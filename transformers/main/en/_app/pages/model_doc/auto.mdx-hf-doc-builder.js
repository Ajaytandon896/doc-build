import{S as WRt,i as QRt,s as HRt,e as a,k as l,w as F,t as o,M as URt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as JRt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as RWr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function YRt(x){let g,v,u,f,p,d,h,Mo,fi,um,rt,gi,hi,GL,pm,Ge,We,ui,Ln,OL,yn,xn,VL,pi,$n,XL,_i,_m,Ca;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),fi=a("code"),um=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),GL=o(")."),pm=l(),Ge=a("p"),We=o("Likewise, if your "),ui=a("code"),Ln=o("NewModel"),OL=o(" is a subclass of "),yn=a("a"),xn=o("PreTrainedModel"),VL=o(`, make sure its
`),pi=a("code"),$n=o("config_class"),XL=o(` attribute is set to the same class you use when registering the model (here
`),_i=a("code"),_m=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var ck=s(u);f=r(ck,"NewModelConfig"),ck.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),fi=n(Ae,"CODE",{});var mk=s(fi);um=r(mk,"model_type"),mk.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var fk=s(gi);hi=r(fk,'"new-model"'),fk.forEach(t),GL=r(Ae,")."),Ae.forEach(t),pm=i(Qe),Ge=n(Qe,"P",{});var Eo=s(Ge);We=r(Eo,"Likewise, if your "),ui=n(Eo,"CODE",{});var wa=s(ui);Ln=r(wa,"NewModel"),wa.forEach(t),OL=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var gk=s(yn);xn=r(gk,"PreTrainedModel"),gk.forEach(t),VL=r(Eo,`, make sure its
`),pi=n(Eo,"CODE",{});var bm=s(pi);$n=r(bm,"config_class"),bm.forEach(t),XL=r(Eo,` attribute is set to the same class you use when registering the model (here
`),_i=n(Eo,"CODE",{});var hk=s(_i);_m=r(hk,"NewModelConfig"),hk.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,fi),e(fi,um),e(g,rt),e(g,gi),e(gi,hi),e(g,GL),b(Qe,pm,Ae),b(Qe,Ge,Ae),e(Ge,We),e(Ge,ui),e(ui,Ln),e(Ge,OL),e(Ge,yn),e(yn,xn),e(Ge,VL),e(Ge,pi),e(pi,$n),e(Ge,XL),e(Ge,_i),e(_i,_m),e(Ge,Ca)},d(Qe){Qe&&t(g),Qe&&t(pm),Qe&&t(Ge)}}}function KRt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZRt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ePt(x){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function oPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rPt(x){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function tPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Pt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function APt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Pt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZPt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Bt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ABt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Bt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QBt(x){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HBt(x){let g,v,u,f,p,d,h,Mo,fi,um,rt,gi,hi,GL,pm,Ge,We,ui,Ln,OL,yn,xn,VL,pi,$n,XL,_i,_m,Ca,Qe,Ae,ck,bi,mk,fk,Eo,wa,gk,bm,hk,yVe,_je,vi,vm,Xoe,zL,xVe,zoe,$Ve,bje,kn,kVe,Woe,SVe,RVe,Qoe,PVe,BVe,vje,WL,Fje,uk,IVe,Tje,Fm,Mje,Fi,Tm,Hoe,QL,NVe,Uoe,qVe,Eje,Co,HL,jVe,UL,DVe,pk,GVe,OVe,VVe,JL,XVe,Joe,zVe,WVe,QVe,Er,YL,HVe,Yoe,UVe,JVe,Ti,YVe,Koe,KVe,ZVe,Zoe,eXe,oXe,rXe,A,Mm,ere,tXe,aXe,_k,nXe,sXe,lXe,Em,ore,iXe,dXe,bk,cXe,mXe,fXe,Cm,rre,gXe,hXe,vk,uXe,pXe,_Xe,wm,tre,bXe,vXe,Fk,FXe,TXe,MXe,Am,are,EXe,CXe,Tk,wXe,AXe,LXe,Lm,nre,yXe,xXe,Mk,$Xe,kXe,SXe,ym,sre,RXe,PXe,Ek,BXe,IXe,NXe,xm,lre,qXe,jXe,Ck,DXe,GXe,OXe,$m,ire,VXe,XXe,wk,zXe,WXe,QXe,km,dre,HXe,UXe,Ak,JXe,YXe,KXe,Sm,cre,ZXe,eze,Lk,oze,rze,tze,Rm,mre,aze,nze,yk,sze,lze,ize,Pm,fre,dze,cze,xk,mze,fze,gze,Bm,gre,hze,uze,$k,pze,_ze,bze,Im,hre,vze,Fze,kk,Tze,Mze,Eze,Nm,ure,Cze,wze,Sk,Aze,Lze,yze,qm,pre,xze,$ze,Rk,kze,Sze,Rze,jm,_re,Pze,Bze,Pk,Ize,Nze,qze,Dm,bre,jze,Dze,Bk,Gze,Oze,Vze,Gm,vre,Xze,zze,Ik,Wze,Qze,Hze,Om,Fre,Uze,Jze,Nk,Yze,Kze,Zze,Vm,Tre,eWe,oWe,qk,rWe,tWe,aWe,Xm,Mre,nWe,sWe,jk,lWe,iWe,dWe,zm,Ere,cWe,mWe,Dk,fWe,gWe,hWe,Wm,Cre,uWe,pWe,Gk,_We,bWe,vWe,Qm,wre,FWe,TWe,Ok,MWe,EWe,CWe,Hm,Are,wWe,AWe,Vk,LWe,yWe,xWe,Um,Lre,$We,kWe,Xk,SWe,RWe,PWe,Jm,yre,BWe,IWe,zk,NWe,qWe,jWe,Ym,xre,DWe,GWe,Wk,OWe,VWe,XWe,Km,$re,zWe,WWe,Qk,QWe,HWe,UWe,Zm,kre,JWe,YWe,Hk,KWe,ZWe,eQe,ef,Sre,oQe,rQe,Uk,tQe,aQe,nQe,of,Rre,sQe,lQe,Jk,iQe,dQe,cQe,rf,Pre,mQe,fQe,Yk,gQe,hQe,uQe,tf,Bre,pQe,_Qe,Kk,bQe,vQe,FQe,af,Ire,TQe,MQe,Zk,EQe,CQe,wQe,nf,Nre,AQe,LQe,eS,yQe,xQe,$Qe,sf,qre,kQe,SQe,oS,RQe,PQe,BQe,lf,jre,IQe,NQe,rS,qQe,jQe,DQe,df,Dre,GQe,OQe,tS,VQe,XQe,zQe,cf,Gre,WQe,QQe,aS,HQe,UQe,JQe,mf,Ore,YQe,KQe,nS,ZQe,eHe,oHe,ff,Vre,rHe,tHe,sS,aHe,nHe,sHe,gf,Xre,lHe,iHe,lS,dHe,cHe,mHe,hf,zre,fHe,gHe,iS,hHe,uHe,pHe,uf,Wre,_He,bHe,dS,vHe,FHe,THe,pf,Qre,MHe,EHe,cS,CHe,wHe,AHe,_f,Hre,LHe,yHe,mS,xHe,$He,kHe,bf,Ure,SHe,RHe,fS,PHe,BHe,IHe,vf,Jre,NHe,qHe,gS,jHe,DHe,GHe,Ff,Yre,OHe,VHe,hS,XHe,zHe,WHe,Tf,Kre,QHe,HHe,uS,UHe,JHe,YHe,Mf,Zre,KHe,ZHe,pS,eUe,oUe,rUe,Ef,ete,tUe,aUe,_S,nUe,sUe,lUe,Cf,ote,iUe,dUe,bS,cUe,mUe,fUe,wf,rte,gUe,hUe,vS,uUe,pUe,_Ue,Af,tte,bUe,vUe,FS,FUe,TUe,MUe,Lf,ate,EUe,CUe,TS,wUe,AUe,LUe,yf,nte,yUe,xUe,MS,$Ue,kUe,SUe,xf,ste,RUe,PUe,ES,BUe,IUe,NUe,$f,lte,qUe,jUe,CS,DUe,GUe,OUe,kf,ite,VUe,XUe,wS,zUe,WUe,QUe,Sf,dte,HUe,UUe,AS,JUe,YUe,KUe,Rf,cte,ZUe,eJe,LS,oJe,rJe,tJe,Pf,mte,aJe,nJe,yS,sJe,lJe,iJe,Bf,fte,dJe,cJe,xS,mJe,fJe,gJe,If,gte,hJe,uJe,$S,pJe,_Je,bJe,Nf,hte,vJe,FJe,kS,TJe,MJe,EJe,qf,ute,CJe,wJe,SS,AJe,LJe,yJe,jf,pte,xJe,$Je,RS,kJe,SJe,RJe,Df,_te,PJe,BJe,PS,IJe,NJe,qJe,Gf,bte,jJe,DJe,BS,GJe,OJe,VJe,Of,vte,XJe,zJe,IS,WJe,QJe,HJe,Vf,Fte,UJe,JJe,NS,YJe,KJe,ZJe,Xf,Tte,eYe,oYe,qS,rYe,tYe,aYe,zf,Mte,nYe,sYe,jS,lYe,iYe,dYe,Wf,Ete,cYe,mYe,DS,fYe,gYe,hYe,Qf,Cte,uYe,pYe,GS,_Ye,bYe,vYe,Hf,wte,FYe,TYe,OS,MYe,EYe,CYe,Uf,Ate,wYe,AYe,VS,LYe,yYe,xYe,Jf,Lte,$Ye,kYe,XS,SYe,RYe,PYe,Yf,yte,BYe,IYe,zS,NYe,qYe,jYe,Kf,xte,DYe,GYe,WS,OYe,VYe,XYe,Zf,$te,zYe,WYe,QS,QYe,HYe,UYe,eg,kte,JYe,YYe,HS,KYe,ZYe,eKe,og,Ste,oKe,rKe,US,tKe,aKe,nKe,rg,Rte,sKe,lKe,JS,iKe,dKe,cKe,tg,Pte,mKe,fKe,YS,gKe,hKe,uKe,ag,Bte,pKe,_Ke,KS,bKe,vKe,FKe,ng,Ite,TKe,MKe,ZS,EKe,CKe,wKe,sg,Nte,AKe,LKe,eR,yKe,xKe,$Ke,lg,qte,kKe,SKe,oR,RKe,PKe,BKe,ig,jte,IKe,NKe,rR,qKe,jKe,DKe,dg,Dte,GKe,OKe,tR,VKe,XKe,zKe,cg,Gte,WKe,QKe,aR,HKe,UKe,JKe,mg,Ote,YKe,KKe,nR,ZKe,eZe,oZe,fg,Vte,rZe,tZe,sR,aZe,nZe,sZe,gg,Xte,lZe,iZe,lR,dZe,cZe,mZe,hg,zte,fZe,gZe,iR,hZe,uZe,pZe,ug,Wte,_Ze,bZe,dR,vZe,FZe,TZe,pg,Qte,MZe,EZe,cR,CZe,wZe,AZe,_g,Hte,LZe,yZe,mR,xZe,$Ze,kZe,bg,Ute,SZe,RZe,fR,PZe,BZe,IZe,vg,Jte,NZe,qZe,gR,jZe,DZe,GZe,Fg,Yte,OZe,VZe,hR,XZe,zZe,WZe,Tg,Kte,QZe,HZe,uR,UZe,JZe,YZe,Mg,Zte,KZe,ZZe,pR,eeo,oeo,reo,Eg,eae,teo,aeo,_R,neo,seo,leo,Cg,oae,ieo,deo,bR,ceo,meo,feo,wg,rae,geo,heo,vR,ueo,peo,_eo,Ag,tae,beo,veo,FR,Feo,Teo,Meo,Lg,Eeo,yg,KL,Ceo,aae,weo,Cje,Mi,xg,nae,ZL,Aeo,sae,Leo,wje,wo,ey,yeo,oy,xeo,TR,$eo,keo,Seo,ry,Reo,lae,Peo,Beo,Ieo,Cr,ty,Neo,iae,qeo,jeo,Aa,Deo,dae,Geo,Oeo,cae,Veo,Xeo,mae,zeo,Weo,Qeo,k,Sn,fae,Heo,Ueo,MR,Jeo,Yeo,ER,Keo,Zeo,eoo,Rn,gae,ooo,roo,CR,too,aoo,wR,noo,soo,loo,Pn,hae,ioo,doo,AR,coo,moo,LR,foo,goo,hoo,$g,uae,uoo,poo,yR,_oo,boo,voo,Bn,pae,Foo,Too,xR,Moo,Eoo,$R,Coo,woo,Aoo,kg,_ae,Loo,yoo,kR,xoo,$oo,koo,Sg,bae,Soo,Roo,SR,Poo,Boo,Ioo,Rg,vae,Noo,qoo,RR,joo,Doo,Goo,In,Fae,Ooo,Voo,PR,Xoo,zoo,BR,Woo,Qoo,Hoo,Nn,Tae,Uoo,Joo,IR,Yoo,Koo,NR,Zoo,ero,oro,qn,Mae,rro,tro,qR,aro,nro,jR,sro,lro,iro,Pg,Eae,dro,cro,DR,mro,fro,gro,Bg,Cae,hro,uro,GR,pro,_ro,bro,Ig,wae,vro,Fro,OR,Tro,Mro,Ero,jn,Aae,Cro,wro,VR,Aro,Lro,XR,yro,xro,$ro,Ng,Lae,kro,Sro,zR,Rro,Pro,Bro,Dn,yae,Iro,Nro,WR,qro,jro,QR,Dro,Gro,Oro,Gn,xae,Vro,Xro,HR,zro,Wro,UR,Qro,Hro,Uro,On,$ae,Jro,Yro,JR,Kro,Zro,YR,eto,oto,rto,qg,kae,tto,ato,KR,nto,sto,lto,Vn,Sae,ito,dto,ZR,cto,mto,eP,fto,gto,hto,Xn,Rae,uto,pto,oP,_to,bto,rP,vto,Fto,Tto,zn,Pae,Mto,Eto,tP,Cto,wto,aP,Ato,Lto,yto,Wn,Bae,xto,$to,nP,kto,Sto,sP,Rto,Pto,Bto,Qn,Iae,Ito,Nto,lP,qto,jto,iP,Dto,Gto,Oto,Hn,Nae,Vto,Xto,dP,zto,Wto,cP,Qto,Hto,Uto,jg,qae,Jto,Yto,mP,Kto,Zto,eao,Un,jae,oao,rao,fP,tao,aao,gP,nao,sao,lao,Dg,Dae,iao,dao,hP,cao,mao,fao,Jn,Gae,gao,hao,uP,uao,pao,pP,_ao,bao,vao,Yn,Oae,Fao,Tao,_P,Mao,Eao,bP,Cao,wao,Aao,Kn,Vae,Lao,yao,vP,xao,$ao,FP,kao,Sao,Rao,Gg,Xae,Pao,Bao,TP,Iao,Nao,qao,Zn,zae,jao,Dao,MP,Gao,Oao,EP,Vao,Xao,zao,es,Wae,Wao,Qao,CP,Hao,Uao,wP,Jao,Yao,Kao,Og,Qae,Zao,eno,AP,ono,rno,tno,os,Hae,ano,nno,LP,sno,lno,yP,ino,dno,cno,rs,Uae,mno,fno,xP,gno,hno,$P,uno,pno,_no,ts,Jae,bno,vno,kP,Fno,Tno,SP,Mno,Eno,Cno,as,Yae,wno,Ano,RP,Lno,yno,PP,xno,$no,kno,ns,Kae,Sno,Rno,BP,Pno,Bno,IP,Ino,Nno,qno,ss,Zae,jno,Dno,NP,Gno,Ono,qP,Vno,Xno,zno,ls,ene,Wno,Qno,jP,Hno,Uno,DP,Jno,Yno,Kno,Vg,one,Zno,eso,GP,oso,rso,tso,is,rne,aso,nso,OP,sso,lso,VP,iso,dso,cso,Xg,tne,mso,fso,XP,gso,hso,uso,zg,ane,pso,_so,zP,bso,vso,Fso,ds,nne,Tso,Mso,WP,Eso,Cso,QP,wso,Aso,Lso,cs,sne,yso,xso,HP,$so,kso,UP,Sso,Rso,Pso,ms,lne,Bso,Iso,JP,Nso,qso,YP,jso,Dso,Gso,Wg,ine,Oso,Vso,KP,Xso,zso,Wso,fs,dne,Qso,Hso,ZP,Uso,Jso,eB,Yso,Kso,Zso,gs,cne,elo,olo,oB,rlo,tlo,rB,alo,nlo,slo,hs,mne,llo,ilo,tB,dlo,clo,aB,mlo,flo,glo,us,fne,hlo,ulo,nB,plo,_lo,sB,blo,vlo,Flo,ps,gne,Tlo,Mlo,lB,Elo,Clo,iB,wlo,Alo,Llo,Qg,hne,ylo,xlo,dB,$lo,klo,Slo,_s,une,Rlo,Plo,cB,Blo,Ilo,mB,Nlo,qlo,jlo,Hg,pne,Dlo,Glo,fB,Olo,Vlo,Xlo,Ug,_ne,zlo,Wlo,gB,Qlo,Hlo,Ulo,Jg,bne,Jlo,Ylo,hB,Klo,Zlo,eio,Yg,vne,oio,rio,uB,tio,aio,nio,bs,Fne,sio,lio,pB,iio,dio,_B,cio,mio,fio,Kg,Tne,gio,hio,bB,uio,pio,_io,vs,Mne,bio,vio,vB,Fio,Tio,FB,Mio,Eio,Cio,Fs,Ene,wio,Aio,TB,Lio,yio,MB,xio,$io,kio,Ts,Cne,Sio,Rio,EB,Pio,Bio,CB,Iio,Nio,qio,Ms,wne,jio,Dio,wB,Gio,Oio,AB,Vio,Xio,zio,Es,Ane,Wio,Qio,LB,Hio,Uio,yB,Jio,Yio,Kio,Cs,Lne,Zio,edo,xB,odo,rdo,$B,tdo,ado,ndo,Zg,yne,sdo,ldo,kB,ido,ddo,cdo,eh,xne,mdo,fdo,SB,gdo,hdo,udo,ws,$ne,pdo,_do,RB,bdo,vdo,PB,Fdo,Tdo,Mdo,As,kne,Edo,Cdo,BB,wdo,Ado,IB,Ldo,ydo,xdo,Ls,Sne,$do,kdo,NB,Sdo,Rdo,qB,Pdo,Bdo,Ido,oh,Rne,Ndo,qdo,jB,jdo,Ddo,Gdo,rh,Pne,Odo,Vdo,DB,Xdo,zdo,Wdo,th,Bne,Qdo,Hdo,GB,Udo,Jdo,Ydo,ys,Ine,Kdo,Zdo,OB,eco,oco,VB,rco,tco,aco,ah,Nne,nco,sco,XB,lco,ico,dco,nh,qne,cco,mco,zB,fco,gco,hco,sh,jne,uco,pco,WB,_co,bco,vco,xs,Dne,Fco,Tco,QB,Mco,Eco,HB,Cco,wco,Aco,lh,Gne,Lco,yco,UB,xco,$co,kco,ih,One,Sco,Rco,JB,Pco,Bco,Ico,$s,Vne,Nco,qco,YB,jco,Dco,KB,Gco,Oco,Vco,ks,Xne,Xco,zco,ZB,Wco,Qco,eI,Hco,Uco,Jco,Ss,zne,Yco,Kco,oI,Zco,emo,rI,omo,rmo,tmo,Rs,Wne,amo,nmo,tI,smo,lmo,aI,imo,dmo,cmo,dh,mmo,ch,ay,fmo,Qne,gmo,Aje,Ei,mh,Hne,ny,hmo,Une,umo,Lje,Ao,sy,pmo,ly,_mo,nI,bmo,vmo,Fmo,iy,Tmo,Jne,Mmo,Emo,Cmo,He,dy,wmo,Yne,Amo,Lmo,La,ymo,Kne,xmo,$mo,Zne,kmo,Smo,ese,Rmo,Pmo,Bmo,Y,fh,ose,Imo,Nmo,sI,qmo,jmo,Dmo,gh,rse,Gmo,Omo,lI,Vmo,Xmo,zmo,hh,tse,Wmo,Qmo,iI,Hmo,Umo,Jmo,uh,ase,Ymo,Kmo,dI,Zmo,efo,ofo,ph,nse,rfo,tfo,cI,afo,nfo,sfo,_h,sse,lfo,ifo,mI,dfo,cfo,mfo,bh,lse,ffo,gfo,fI,hfo,ufo,pfo,vh,ise,_fo,bfo,gI,vfo,Ffo,Tfo,Fh,dse,Mfo,Efo,hI,Cfo,wfo,Afo,Th,cse,Lfo,yfo,uI,xfo,$fo,kfo,Mh,mse,Sfo,Rfo,pI,Pfo,Bfo,Ifo,Eh,fse,Nfo,qfo,_I,jfo,Dfo,Gfo,Ch,gse,Ofo,Vfo,bI,Xfo,zfo,Wfo,wh,hse,Qfo,Hfo,vI,Ufo,Jfo,Yfo,Ah,use,Kfo,Zfo,FI,ego,ogo,rgo,Lh,pse,tgo,ago,TI,ngo,sgo,lgo,yh,_se,igo,dgo,MI,cgo,mgo,fgo,xh,bse,ggo,hgo,EI,ugo,pgo,_go,$h,vse,bgo,vgo,CI,Fgo,Tgo,Mgo,kh,Fse,Ego,Cgo,wI,wgo,Ago,Lgo,Sh,Tse,ygo,xgo,AI,$go,kgo,Sgo,Rh,Mse,Rgo,Pgo,LI,Bgo,Igo,Ngo,Ph,Ese,qgo,jgo,yI,Dgo,Ggo,Ogo,Bh,Cse,Vgo,Xgo,xI,zgo,Wgo,Qgo,Ih,wse,Hgo,Ugo,$I,Jgo,Ygo,Kgo,Nh,Ase,Zgo,eho,kI,oho,rho,tho,qh,Lse,aho,nho,SI,sho,lho,iho,jh,yse,dho,cho,RI,mho,fho,gho,Dh,xse,hho,uho,PI,pho,_ho,bho,Gh,$se,vho,Fho,BI,Tho,Mho,Eho,Oh,kse,Cho,who,II,Aho,Lho,yho,Vh,xho,Xh,$ho,zh,cy,kho,Sse,Sho,yje,Ci,Wh,Rse,my,Rho,Pse,Pho,xje,Lo,fy,Bho,gy,Iho,NI,Nho,qho,jho,hy,Dho,Bse,Gho,Oho,Vho,Ue,uy,Xho,Ise,zho,Who,wi,Qho,Nse,Hho,Uho,qse,Jho,Yho,Kho,he,Qh,jse,Zho,euo,qI,ouo,ruo,tuo,Hh,Dse,auo,nuo,Gse,suo,luo,iuo,Uh,Ose,duo,cuo,jI,muo,fuo,guo,Jh,Vse,huo,uuo,DI,puo,_uo,buo,Yh,Xse,vuo,Fuo,GI,Tuo,Muo,Euo,Kh,zse,Cuo,wuo,OI,Auo,Luo,yuo,Zh,Wse,xuo,$uo,VI,kuo,Suo,Ruo,eu,Qse,Puo,Buo,XI,Iuo,Nuo,quo,ou,Hse,juo,Duo,zI,Guo,Ouo,Vuo,ru,Use,Xuo,zuo,WI,Wuo,Quo,Huo,tu,Jse,Uuo,Juo,QI,Yuo,Kuo,Zuo,au,Yse,epo,opo,HI,rpo,tpo,apo,nu,Kse,npo,spo,UI,lpo,ipo,dpo,su,Zse,cpo,mpo,JI,fpo,gpo,hpo,lu,ele,upo,ppo,YI,_po,bpo,vpo,iu,ole,Fpo,Tpo,KI,Mpo,Epo,Cpo,du,rle,wpo,Apo,ZI,Lpo,ypo,xpo,cu,$po,mu,kpo,fu,py,Spo,tle,Rpo,$je,Ai,gu,ale,_y,Ppo,nle,Bpo,kje,yo,by,Ipo,Li,Npo,eN,qpo,jpo,oN,Dpo,Gpo,Opo,vy,Vpo,sle,Xpo,zpo,Wpo,tt,Fy,Qpo,lle,Hpo,Upo,yi,Jpo,ile,Ypo,Kpo,rN,Zpo,e_o,o_o,hu,r_o,Je,Ty,t_o,dle,a_o,n_o,ya,s_o,cle,l_o,i_o,mle,d_o,c_o,fle,m_o,f_o,g_o,y,uu,gle,h_o,u_o,tN,p_o,__o,b_o,pu,hle,v_o,F_o,aN,T_o,M_o,E_o,_u,ule,C_o,w_o,nN,A_o,L_o,y_o,bu,ple,x_o,$_o,sN,k_o,S_o,R_o,vu,_le,P_o,B_o,lN,I_o,N_o,q_o,Fu,ble,j_o,D_o,iN,G_o,O_o,V_o,Tu,vle,X_o,z_o,dN,W_o,Q_o,H_o,Mu,Fle,U_o,J_o,cN,Y_o,K_o,Z_o,Eu,Tle,ebo,obo,mN,rbo,tbo,abo,Cu,Mle,nbo,sbo,fN,lbo,ibo,dbo,wu,Ele,cbo,mbo,gN,fbo,gbo,hbo,Au,Cle,ubo,pbo,hN,_bo,bbo,vbo,Lu,wle,Fbo,Tbo,uN,Mbo,Ebo,Cbo,yu,Ale,wbo,Abo,pN,Lbo,ybo,xbo,xu,Lle,$bo,kbo,_N,Sbo,Rbo,Pbo,$u,yle,Bbo,Ibo,bN,Nbo,qbo,jbo,ku,xle,Dbo,Gbo,vN,Obo,Vbo,Xbo,Su,$le,zbo,Wbo,FN,Qbo,Hbo,Ubo,Ru,kle,Jbo,Ybo,TN,Kbo,Zbo,e2o,Pu,Sle,o2o,r2o,MN,t2o,a2o,n2o,Bu,Rle,s2o,l2o,EN,i2o,d2o,c2o,Iu,Ple,m2o,f2o,CN,g2o,h2o,u2o,Nu,Ble,p2o,_2o,wN,b2o,v2o,F2o,qu,Ile,T2o,M2o,AN,E2o,C2o,w2o,ju,Nle,A2o,L2o,LN,y2o,x2o,$2o,Du,qle,k2o,S2o,yN,R2o,P2o,B2o,Gu,jle,I2o,N2o,xN,q2o,j2o,D2o,Ou,Dle,G2o,O2o,$N,V2o,X2o,z2o,Vu,Gle,W2o,Q2o,kN,H2o,U2o,J2o,Xu,Ole,Y2o,K2o,SN,Z2o,evo,ovo,zu,Vle,rvo,tvo,RN,avo,nvo,svo,Wu,Xle,lvo,ivo,PN,dvo,cvo,mvo,Qu,zle,fvo,gvo,BN,hvo,uvo,pvo,Ps,Wle,_vo,bvo,IN,vvo,Fvo,NN,Tvo,Mvo,Evo,Hu,Qle,Cvo,wvo,qN,Avo,Lvo,yvo,Uu,Hle,xvo,$vo,jN,kvo,Svo,Rvo,Ju,Ule,Pvo,Bvo,DN,Ivo,Nvo,qvo,Yu,Jle,jvo,Dvo,GN,Gvo,Ovo,Vvo,Ku,Yle,Xvo,zvo,ON,Wvo,Qvo,Hvo,Zu,Kle,Uvo,Jvo,VN,Yvo,Kvo,Zvo,ep,Zle,eFo,oFo,XN,rFo,tFo,aFo,op,eie,nFo,sFo,zN,lFo,iFo,dFo,rp,oie,cFo,mFo,WN,fFo,gFo,hFo,tp,rie,uFo,pFo,QN,_Fo,bFo,vFo,ap,tie,FFo,TFo,HN,MFo,EFo,CFo,np,aie,wFo,AFo,UN,LFo,yFo,xFo,sp,nie,$Fo,kFo,JN,SFo,RFo,PFo,lp,sie,BFo,IFo,YN,NFo,qFo,jFo,ip,lie,DFo,GFo,KN,OFo,VFo,XFo,dp,iie,zFo,WFo,ZN,QFo,HFo,UFo,cp,die,JFo,YFo,eq,KFo,ZFo,e1o,mp,cie,o1o,r1o,oq,t1o,a1o,n1o,fp,mie,s1o,l1o,rq,i1o,d1o,c1o,gp,fie,m1o,f1o,tq,g1o,h1o,u1o,hp,gie,p1o,_1o,aq,b1o,v1o,F1o,up,hie,T1o,M1o,nq,E1o,C1o,w1o,pp,uie,A1o,L1o,sq,y1o,x1o,$1o,_p,pie,k1o,S1o,lq,R1o,P1o,B1o,bp,_ie,I1o,N1o,iq,q1o,j1o,D1o,vp,bie,G1o,O1o,dq,V1o,X1o,z1o,Fp,vie,W1o,Q1o,cq,H1o,U1o,J1o,Tp,Fie,Y1o,K1o,mq,Z1o,eTo,oTo,Mp,Tie,rTo,tTo,fq,aTo,nTo,sTo,Ep,Mie,lTo,iTo,gq,dTo,cTo,mTo,Cp,Eie,fTo,gTo,hq,hTo,uTo,pTo,wp,Cie,_To,bTo,uq,vTo,FTo,TTo,Ap,wie,MTo,ETo,pq,CTo,wTo,ATo,Lp,Aie,LTo,yTo,_q,xTo,$To,kTo,yp,Lie,STo,RTo,bq,PTo,BTo,ITo,xp,yie,NTo,qTo,vq,jTo,DTo,GTo,$p,xie,OTo,VTo,Fq,XTo,zTo,WTo,kp,$ie,QTo,HTo,Tq,UTo,JTo,YTo,Sp,kie,KTo,ZTo,Mq,eMo,oMo,rMo,Rp,Sie,tMo,aMo,Eq,nMo,sMo,lMo,Pp,Rie,iMo,dMo,Cq,cMo,mMo,fMo,Bp,Pie,gMo,hMo,wq,uMo,pMo,_Mo,Ip,Bie,bMo,vMo,Aq,FMo,TMo,MMo,Np,Iie,EMo,CMo,Lq,wMo,AMo,LMo,qp,Nie,yMo,xMo,yq,$Mo,kMo,SMo,jp,qie,RMo,PMo,xq,BMo,IMo,NMo,Dp,jie,qMo,jMo,$q,DMo,GMo,OMo,Gp,Die,VMo,XMo,kq,zMo,WMo,QMo,Op,Gie,HMo,UMo,Sq,JMo,YMo,KMo,Vp,Oie,ZMo,e4o,Rq,o4o,r4o,t4o,Xp,Vie,a4o,n4o,Pq,s4o,l4o,i4o,zp,Xie,d4o,c4o,Bq,m4o,f4o,g4o,Wp,zie,h4o,u4o,Iq,p4o,_4o,b4o,Qp,Wie,v4o,F4o,Nq,T4o,M4o,E4o,Hp,Qie,C4o,w4o,qq,A4o,L4o,y4o,Up,Hie,x4o,$4o,jq,k4o,S4o,R4o,Jp,Uie,P4o,B4o,Dq,I4o,N4o,q4o,Yp,Jie,j4o,D4o,Gq,G4o,O4o,V4o,Kp,Yie,X4o,z4o,Oq,W4o,Q4o,H4o,Zp,Kie,U4o,J4o,Vq,Y4o,K4o,Z4o,e_,Zie,eEo,oEo,Xq,rEo,tEo,aEo,o_,ede,nEo,sEo,zq,lEo,iEo,dEo,r_,ode,cEo,mEo,Wq,fEo,gEo,hEo,t_,rde,uEo,pEo,Qq,_Eo,bEo,vEo,a_,tde,FEo,TEo,Hq,MEo,EEo,CEo,n_,ade,wEo,AEo,Uq,LEo,yEo,xEo,s_,nde,$Eo,kEo,Jq,SEo,REo,PEo,l_,sde,BEo,IEo,Yq,NEo,qEo,jEo,i_,lde,DEo,GEo,Kq,OEo,VEo,XEo,d_,ide,zEo,WEo,Zq,QEo,HEo,UEo,c_,dde,JEo,YEo,ej,KEo,ZEo,eCo,m_,oCo,cde,rCo,tCo,mde,aCo,nCo,f_,Sje,xi,g_,fde,My,sCo,gde,lCo,Rje,xo,Ey,iCo,$i,dCo,oj,cCo,mCo,rj,fCo,gCo,hCo,Cy,uCo,hde,pCo,_Co,bCo,at,wy,vCo,ude,FCo,TCo,ki,MCo,pde,ECo,CCo,tj,wCo,ACo,LCo,h_,yCo,Ye,Ay,xCo,_de,$Co,kCo,xa,SCo,bde,RCo,PCo,vde,BCo,ICo,Fde,NCo,qCo,jCo,G,u_,Tde,DCo,GCo,aj,OCo,VCo,XCo,p_,Mde,zCo,WCo,nj,QCo,HCo,UCo,__,Ede,JCo,YCo,sj,KCo,ZCo,e5o,b_,Cde,o5o,r5o,lj,t5o,a5o,n5o,v_,wde,s5o,l5o,ij,i5o,d5o,c5o,F_,Ade,m5o,f5o,dj,g5o,h5o,u5o,T_,Lde,p5o,_5o,cj,b5o,v5o,F5o,M_,yde,T5o,M5o,mj,E5o,C5o,w5o,E_,xde,A5o,L5o,fj,y5o,x5o,$5o,C_,$de,k5o,S5o,gj,R5o,P5o,B5o,w_,kde,I5o,N5o,hj,q5o,j5o,D5o,A_,Sde,G5o,O5o,uj,V5o,X5o,z5o,L_,Rde,W5o,Q5o,pj,H5o,U5o,J5o,y_,Pde,Y5o,K5o,_j,Z5o,e3o,o3o,x_,Bde,r3o,t3o,bj,a3o,n3o,s3o,$_,Ide,l3o,i3o,vj,d3o,c3o,m3o,k_,Nde,f3o,g3o,Fj,h3o,u3o,p3o,S_,qde,_3o,b3o,Tj,v3o,F3o,T3o,R_,jde,M3o,E3o,Mj,C3o,w3o,A3o,P_,Dde,L3o,y3o,Ej,x3o,$3o,k3o,B_,Gde,S3o,R3o,Cj,P3o,B3o,I3o,I_,Ode,N3o,q3o,wj,j3o,D3o,G3o,N_,Vde,O3o,V3o,Aj,X3o,z3o,W3o,q_,Xde,Q3o,H3o,Lj,U3o,J3o,Y3o,j_,zde,K3o,Z3o,yj,e0o,o0o,r0o,D_,Wde,t0o,a0o,xj,n0o,s0o,l0o,G_,Qde,i0o,d0o,$j,c0o,m0o,f0o,O_,Hde,g0o,h0o,kj,u0o,p0o,_0o,V_,Ude,b0o,v0o,Sj,F0o,T0o,M0o,X_,Jde,E0o,C0o,Rj,w0o,A0o,L0o,z_,Yde,y0o,x0o,Pj,$0o,k0o,S0o,W_,Kde,R0o,P0o,Bj,B0o,I0o,N0o,Q_,Zde,q0o,j0o,Ij,D0o,G0o,O0o,H_,ece,V0o,X0o,Nj,z0o,W0o,Q0o,U_,oce,H0o,U0o,qj,J0o,Y0o,K0o,J_,rce,Z0o,ewo,jj,owo,rwo,two,Y_,tce,awo,nwo,Dj,swo,lwo,iwo,K_,ace,dwo,cwo,Gj,mwo,fwo,gwo,Z_,nce,hwo,uwo,Oj,pwo,_wo,bwo,eb,sce,vwo,Fwo,Vj,Two,Mwo,Ewo,ob,lce,Cwo,wwo,Xj,Awo,Lwo,ywo,rb,ice,xwo,$wo,zj,kwo,Swo,Rwo,tb,dce,Pwo,Bwo,Wj,Iwo,Nwo,qwo,ab,jwo,cce,Dwo,Gwo,mce,Owo,Vwo,nb,Pje,Si,sb,fce,Ly,Xwo,gce,zwo,Bje,$o,yy,Wwo,Ri,Qwo,Qj,Hwo,Uwo,Hj,Jwo,Ywo,Kwo,xy,Zwo,hce,eAo,oAo,rAo,nt,$y,tAo,uce,aAo,nAo,Pi,sAo,pce,lAo,iAo,Uj,dAo,cAo,mAo,lb,fAo,Ke,ky,gAo,_ce,hAo,uAo,$a,pAo,bce,_Ao,bAo,vce,vAo,FAo,Fce,TAo,MAo,EAo,z,ib,Tce,CAo,wAo,Jj,AAo,LAo,yAo,db,Mce,xAo,$Ao,Yj,kAo,SAo,RAo,cb,Ece,PAo,BAo,Kj,IAo,NAo,qAo,mb,Cce,jAo,DAo,Zj,GAo,OAo,VAo,fb,wce,XAo,zAo,eD,WAo,QAo,HAo,gb,Ace,UAo,JAo,oD,YAo,KAo,ZAo,hb,Lce,e6o,o6o,rD,r6o,t6o,a6o,ub,yce,n6o,s6o,tD,l6o,i6o,d6o,pb,xce,c6o,m6o,aD,f6o,g6o,h6o,_b,$ce,u6o,p6o,nD,_6o,b6o,v6o,bb,kce,F6o,T6o,sD,M6o,E6o,C6o,vb,Sce,w6o,A6o,lD,L6o,y6o,x6o,Fb,Rce,$6o,k6o,iD,S6o,R6o,P6o,Tb,Pce,B6o,I6o,dD,N6o,q6o,j6o,Mb,Bce,D6o,G6o,cD,O6o,V6o,X6o,Eb,Ice,z6o,W6o,mD,Q6o,H6o,U6o,Cb,Nce,J6o,Y6o,fD,K6o,Z6o,eLo,wb,qce,oLo,rLo,gD,tLo,aLo,nLo,Ab,jce,sLo,lLo,hD,iLo,dLo,cLo,Lb,Dce,mLo,fLo,uD,gLo,hLo,uLo,yb,Gce,pLo,_Lo,pD,bLo,vLo,FLo,xb,Oce,TLo,MLo,_D,ELo,CLo,wLo,$b,Vce,ALo,LLo,bD,yLo,xLo,$Lo,kb,Xce,kLo,SLo,vD,RLo,PLo,BLo,Sb,zce,ILo,NLo,FD,qLo,jLo,DLo,Rb,Wce,GLo,OLo,TD,VLo,XLo,zLo,Pb,Qce,WLo,QLo,MD,HLo,ULo,JLo,Bb,Hce,YLo,KLo,ED,ZLo,eyo,oyo,Ib,Uce,ryo,tyo,CD,ayo,nyo,syo,Nb,Jce,lyo,iyo,wD,dyo,cyo,myo,qb,Yce,fyo,gyo,AD,hyo,uyo,pyo,jb,Kce,_yo,byo,LD,vyo,Fyo,Tyo,Db,Zce,Myo,Eyo,yD,Cyo,wyo,Ayo,Gb,eme,Lyo,yyo,xD,xyo,$yo,kyo,Ob,ome,Syo,Ryo,$D,Pyo,Byo,Iyo,Vb,rme,Nyo,qyo,kD,jyo,Dyo,Gyo,Xb,tme,Oyo,Vyo,SD,Xyo,zyo,Wyo,zb,ame,Qyo,Hyo,RD,Uyo,Jyo,Yyo,Wb,Kyo,nme,Zyo,e7o,sme,o7o,r7o,Qb,Ije,Bi,Hb,lme,Sy,t7o,ime,a7o,Nje,ko,Ry,n7o,Ii,s7o,PD,l7o,i7o,BD,d7o,c7o,m7o,Py,f7o,dme,g7o,h7o,u7o,st,By,p7o,cme,_7o,b7o,Ni,v7o,mme,F7o,T7o,ID,M7o,E7o,C7o,Ub,w7o,Ze,Iy,A7o,fme,L7o,y7o,ka,x7o,gme,$7o,k7o,hme,S7o,R7o,ume,P7o,B7o,I7o,Q,Jb,pme,N7o,q7o,ND,j7o,D7o,G7o,Yb,_me,O7o,V7o,qD,X7o,z7o,W7o,Kb,bme,Q7o,H7o,jD,U7o,J7o,Y7o,Zb,vme,K7o,Z7o,DD,e8o,o8o,r8o,e2,Fme,t8o,a8o,GD,n8o,s8o,l8o,o2,Tme,i8o,d8o,OD,c8o,m8o,f8o,r2,Mme,g8o,h8o,VD,u8o,p8o,_8o,t2,Eme,b8o,v8o,XD,F8o,T8o,M8o,a2,Cme,E8o,C8o,zD,w8o,A8o,L8o,n2,wme,y8o,x8o,WD,$8o,k8o,S8o,s2,Ame,R8o,P8o,QD,B8o,I8o,N8o,l2,Lme,q8o,j8o,HD,D8o,G8o,O8o,i2,yme,V8o,X8o,UD,z8o,W8o,Q8o,d2,xme,H8o,U8o,JD,J8o,Y8o,K8o,c2,$me,Z8o,e9o,YD,o9o,r9o,t9o,m2,kme,a9o,n9o,KD,s9o,l9o,i9o,f2,Sme,d9o,c9o,ZD,m9o,f9o,g9o,g2,Rme,h9o,u9o,eG,p9o,_9o,b9o,h2,Pme,v9o,F9o,oG,T9o,M9o,E9o,u2,Bme,C9o,w9o,rG,A9o,L9o,y9o,p2,Ime,x9o,$9o,tG,k9o,S9o,R9o,_2,Nme,P9o,B9o,aG,I9o,N9o,q9o,b2,qme,j9o,D9o,nG,G9o,O9o,V9o,v2,jme,X9o,z9o,sG,W9o,Q9o,H9o,F2,Dme,U9o,J9o,lG,Y9o,K9o,Z9o,T2,Gme,exo,oxo,iG,rxo,txo,axo,M2,Ome,nxo,sxo,dG,lxo,ixo,dxo,E2,Vme,cxo,mxo,cG,fxo,gxo,hxo,C2,Xme,uxo,pxo,mG,_xo,bxo,vxo,w2,zme,Fxo,Txo,fG,Mxo,Exo,Cxo,A2,Wme,wxo,Axo,gG,Lxo,yxo,xxo,L2,Qme,$xo,kxo,Hme,Sxo,Rxo,Pxo,y2,Ume,Bxo,Ixo,hG,Nxo,qxo,jxo,x2,Jme,Dxo,Gxo,uG,Oxo,Vxo,Xxo,$2,Yme,zxo,Wxo,pG,Qxo,Hxo,Uxo,k2,Kme,Jxo,Yxo,_G,Kxo,Zxo,e$o,S2,o$o,Zme,r$o,t$o,efe,a$o,n$o,R2,qje,qi,P2,ofe,Ny,s$o,rfe,l$o,jje,So,qy,i$o,ji,d$o,bG,c$o,m$o,vG,f$o,g$o,h$o,jy,u$o,tfe,p$o,_$o,b$o,lt,Dy,v$o,afe,F$o,T$o,Di,M$o,nfe,E$o,C$o,FG,w$o,A$o,L$o,B2,y$o,eo,Gy,x$o,sfe,$$o,k$o,Sa,S$o,lfe,R$o,P$o,ife,B$o,I$o,dfe,N$o,q$o,j$o,pe,I2,cfe,D$o,G$o,TG,O$o,V$o,X$o,N2,mfe,z$o,W$o,MG,Q$o,H$o,U$o,q2,ffe,J$o,Y$o,EG,K$o,Z$o,eko,j2,gfe,oko,rko,CG,tko,ako,nko,D2,hfe,sko,lko,wG,iko,dko,cko,G2,ufe,mko,fko,AG,gko,hko,uko,O2,pfe,pko,_ko,LG,bko,vko,Fko,V2,_fe,Tko,Mko,yG,Eko,Cko,wko,X2,bfe,Ako,Lko,xG,yko,xko,$ko,z2,vfe,kko,Sko,$G,Rko,Pko,Bko,W2,Ffe,Iko,Nko,kG,qko,jko,Dko,Q2,Tfe,Gko,Oko,SG,Vko,Xko,zko,H2,Mfe,Wko,Qko,RG,Hko,Uko,Jko,U2,Efe,Yko,Kko,PG,Zko,eSo,oSo,J2,Cfe,rSo,tSo,BG,aSo,nSo,sSo,Y2,wfe,lSo,iSo,IG,dSo,cSo,mSo,K2,fSo,Afe,gSo,hSo,Lfe,uSo,pSo,Z2,Dje,Gi,ev,yfe,Oy,_So,xfe,bSo,Gje,Ro,Vy,vSo,Oi,FSo,NG,TSo,MSo,qG,ESo,CSo,wSo,Xy,ASo,$fe,LSo,ySo,xSo,it,zy,$So,kfe,kSo,SSo,Vi,RSo,Sfe,PSo,BSo,jG,ISo,NSo,qSo,ov,jSo,oo,Wy,DSo,Rfe,GSo,OSo,Ra,VSo,Pfe,XSo,zSo,Bfe,WSo,QSo,Ife,HSo,USo,JSo,N,rv,Nfe,YSo,KSo,DG,ZSo,eRo,oRo,tv,qfe,rRo,tRo,GG,aRo,nRo,sRo,av,jfe,lRo,iRo,OG,dRo,cRo,mRo,nv,Dfe,fRo,gRo,VG,hRo,uRo,pRo,sv,Gfe,_Ro,bRo,XG,vRo,FRo,TRo,lv,Ofe,MRo,ERo,zG,CRo,wRo,ARo,iv,Vfe,LRo,yRo,WG,xRo,$Ro,kRo,dv,Xfe,SRo,RRo,QG,PRo,BRo,IRo,cv,zfe,NRo,qRo,HG,jRo,DRo,GRo,mv,Wfe,ORo,VRo,UG,XRo,zRo,WRo,fv,Qfe,QRo,HRo,JG,URo,JRo,YRo,gv,Hfe,KRo,ZRo,YG,ePo,oPo,rPo,hv,Ufe,tPo,aPo,KG,nPo,sPo,lPo,uv,Jfe,iPo,dPo,ZG,cPo,mPo,fPo,pv,Yfe,gPo,hPo,eO,uPo,pPo,_Po,_v,Kfe,bPo,vPo,oO,FPo,TPo,MPo,bv,Zfe,EPo,CPo,rO,wPo,APo,LPo,vv,ege,yPo,xPo,tO,$Po,kPo,SPo,Fv,oge,RPo,PPo,aO,BPo,IPo,NPo,Tv,rge,qPo,jPo,nO,DPo,GPo,OPo,Mv,tge,VPo,XPo,sO,zPo,WPo,QPo,Ev,age,HPo,UPo,lO,JPo,YPo,KPo,Cv,nge,ZPo,eBo,iO,oBo,rBo,tBo,wv,sge,aBo,nBo,dO,sBo,lBo,iBo,Av,lge,dBo,cBo,cO,mBo,fBo,gBo,Lv,ige,hBo,uBo,mO,pBo,_Bo,bBo,yv,dge,vBo,FBo,fO,TBo,MBo,EBo,xv,cge,CBo,wBo,gO,ABo,LBo,yBo,$v,mge,xBo,$Bo,hO,kBo,SBo,RBo,kv,fge,PBo,BBo,uO,IBo,NBo,qBo,Sv,gge,jBo,DBo,pO,GBo,OBo,VBo,Rv,hge,XBo,zBo,_O,WBo,QBo,HBo,Pv,uge,UBo,JBo,bO,YBo,KBo,ZBo,Bv,pge,eIo,oIo,vO,rIo,tIo,aIo,Iv,_ge,nIo,sIo,FO,lIo,iIo,dIo,Nv,bge,cIo,mIo,TO,fIo,gIo,hIo,qv,vge,uIo,pIo,MO,_Io,bIo,vIo,jv,Fge,FIo,TIo,EO,MIo,EIo,CIo,Dv,Tge,wIo,AIo,CO,LIo,yIo,xIo,Gv,Mge,$Io,kIo,wO,SIo,RIo,PIo,Ov,Ege,BIo,IIo,AO,NIo,qIo,jIo,Vv,Cge,DIo,GIo,LO,OIo,VIo,XIo,Xv,wge,zIo,WIo,yO,QIo,HIo,UIo,zv,Age,JIo,YIo,xO,KIo,ZIo,eNo,Wv,Lge,oNo,rNo,$O,tNo,aNo,nNo,Qv,yge,sNo,lNo,kO,iNo,dNo,cNo,Hv,xge,mNo,fNo,SO,gNo,hNo,uNo,Uv,pNo,$ge,_No,bNo,kge,vNo,FNo,Jv,Oje,Xi,Yv,Sge,Qy,TNo,Rge,MNo,Vje,Po,Hy,ENo,zi,CNo,RO,wNo,ANo,PO,LNo,yNo,xNo,Uy,$No,Pge,kNo,SNo,RNo,dt,Jy,PNo,Bge,BNo,INo,Wi,NNo,Ige,qNo,jNo,BO,DNo,GNo,ONo,Kv,VNo,ro,Yy,XNo,Nge,zNo,WNo,Pa,QNo,qge,HNo,UNo,jge,JNo,YNo,Dge,KNo,ZNo,eqo,Z,Zv,Gge,oqo,rqo,IO,tqo,aqo,nqo,eF,Oge,sqo,lqo,NO,iqo,dqo,cqo,oF,Vge,mqo,fqo,qO,gqo,hqo,uqo,rF,Xge,pqo,_qo,jO,bqo,vqo,Fqo,tF,zge,Tqo,Mqo,DO,Eqo,Cqo,wqo,aF,Wge,Aqo,Lqo,GO,yqo,xqo,$qo,nF,Qge,kqo,Sqo,OO,Rqo,Pqo,Bqo,sF,Hge,Iqo,Nqo,VO,qqo,jqo,Dqo,lF,Uge,Gqo,Oqo,XO,Vqo,Xqo,zqo,iF,Jge,Wqo,Qqo,zO,Hqo,Uqo,Jqo,dF,Yge,Yqo,Kqo,WO,Zqo,ejo,ojo,cF,Kge,rjo,tjo,QO,ajo,njo,sjo,mF,Zge,ljo,ijo,HO,djo,cjo,mjo,fF,ehe,fjo,gjo,UO,hjo,ujo,pjo,gF,ohe,_jo,bjo,JO,vjo,Fjo,Tjo,hF,rhe,Mjo,Ejo,YO,Cjo,wjo,Ajo,uF,the,Ljo,yjo,KO,xjo,$jo,kjo,pF,ahe,Sjo,Rjo,ZO,Pjo,Bjo,Ijo,_F,nhe,Njo,qjo,eV,jjo,Djo,Gjo,bF,she,Ojo,Vjo,oV,Xjo,zjo,Wjo,vF,lhe,Qjo,Hjo,rV,Ujo,Jjo,Yjo,FF,ihe,Kjo,Zjo,tV,eDo,oDo,rDo,TF,dhe,tDo,aDo,aV,nDo,sDo,lDo,MF,che,iDo,dDo,nV,cDo,mDo,fDo,EF,mhe,gDo,hDo,sV,uDo,pDo,_Do,CF,fhe,bDo,vDo,lV,FDo,TDo,MDo,wF,ghe,EDo,CDo,iV,wDo,ADo,LDo,AF,hhe,yDo,xDo,dV,$Do,kDo,SDo,LF,uhe,RDo,PDo,cV,BDo,IDo,NDo,yF,qDo,phe,jDo,DDo,_he,GDo,ODo,xF,Xje,Qi,$F,bhe,Ky,VDo,vhe,XDo,zje,Bo,Zy,zDo,Hi,WDo,mV,QDo,HDo,fV,UDo,JDo,YDo,e7,KDo,Fhe,ZDo,eGo,oGo,ct,o7,rGo,The,tGo,aGo,Ui,nGo,Mhe,sGo,lGo,gV,iGo,dGo,cGo,kF,mGo,to,r7,fGo,Ehe,gGo,hGo,Ba,uGo,Che,pGo,_Go,whe,bGo,vGo,Ahe,FGo,TGo,MGo,Yr,SF,Lhe,EGo,CGo,hV,wGo,AGo,LGo,RF,yhe,yGo,xGo,uV,$Go,kGo,SGo,PF,xhe,RGo,PGo,pV,BGo,IGo,NGo,BF,$he,qGo,jGo,_V,DGo,GGo,OGo,IF,khe,VGo,XGo,bV,zGo,WGo,QGo,NF,HGo,She,UGo,JGo,Rhe,YGo,KGo,qF,Wje,Ji,jF,Phe,t7,ZGo,Bhe,eOo,Qje,Io,a7,oOo,Yi,rOo,vV,tOo,aOo,FV,nOo,sOo,lOo,n7,iOo,Ihe,dOo,cOo,mOo,mt,s7,fOo,Nhe,gOo,hOo,Ki,uOo,qhe,pOo,_Oo,TV,bOo,vOo,FOo,DF,TOo,ao,l7,MOo,jhe,EOo,COo,Ia,wOo,Dhe,AOo,LOo,Ghe,yOo,xOo,Ohe,$Oo,kOo,SOo,U,GF,Vhe,ROo,POo,MV,BOo,IOo,NOo,OF,Xhe,qOo,jOo,EV,DOo,GOo,OOo,VF,zhe,VOo,XOo,CV,zOo,WOo,QOo,XF,Whe,HOo,UOo,wV,JOo,YOo,KOo,zF,Qhe,ZOo,eVo,AV,oVo,rVo,tVo,WF,Hhe,aVo,nVo,LV,sVo,lVo,iVo,QF,Uhe,dVo,cVo,yV,mVo,fVo,gVo,HF,Jhe,hVo,uVo,xV,pVo,_Vo,bVo,UF,Yhe,vVo,FVo,$V,TVo,MVo,EVo,JF,Khe,CVo,wVo,kV,AVo,LVo,yVo,YF,Zhe,xVo,$Vo,SV,kVo,SVo,RVo,KF,eue,PVo,BVo,RV,IVo,NVo,qVo,ZF,oue,jVo,DVo,PV,GVo,OVo,VVo,e1,rue,XVo,zVo,BV,WVo,QVo,HVo,o1,tue,UVo,JVo,IV,YVo,KVo,ZVo,r1,aue,eXo,oXo,NV,rXo,tXo,aXo,t1,nue,nXo,sXo,qV,lXo,iXo,dXo,a1,sue,cXo,mXo,jV,fXo,gXo,hXo,n1,lue,uXo,pXo,DV,_Xo,bXo,vXo,s1,iue,FXo,TXo,GV,MXo,EXo,CXo,l1,due,wXo,AXo,OV,LXo,yXo,xXo,i1,cue,$Xo,kXo,VV,SXo,RXo,PXo,d1,mue,BXo,IXo,XV,NXo,qXo,jXo,c1,fue,DXo,GXo,zV,OXo,VXo,XXo,m1,gue,zXo,WXo,WV,QXo,HXo,UXo,f1,hue,JXo,YXo,QV,KXo,ZXo,ezo,g1,uue,ozo,rzo,HV,tzo,azo,nzo,h1,pue,szo,lzo,UV,izo,dzo,czo,u1,_ue,mzo,fzo,JV,gzo,hzo,uzo,p1,bue,pzo,_zo,YV,bzo,vzo,Fzo,_1,vue,Tzo,Mzo,KV,Ezo,Czo,wzo,b1,Fue,Azo,Lzo,ZV,yzo,xzo,$zo,v1,Tue,kzo,Szo,eX,Rzo,Pzo,Bzo,F1,Mue,Izo,Nzo,oX,qzo,jzo,Dzo,T1,Gzo,Eue,Ozo,Vzo,Cue,Xzo,zzo,M1,Hje,Zi,E1,wue,i7,Wzo,Aue,Qzo,Uje,No,d7,Hzo,ed,Uzo,rX,Jzo,Yzo,tX,Kzo,Zzo,eWo,c7,oWo,Lue,rWo,tWo,aWo,ft,m7,nWo,yue,sWo,lWo,od,iWo,xue,dWo,cWo,aX,mWo,fWo,gWo,C1,hWo,no,f7,uWo,$ue,pWo,_Wo,Na,bWo,kue,vWo,FWo,Sue,TWo,MWo,Rue,EWo,CWo,wWo,V,w1,Pue,AWo,LWo,nX,yWo,xWo,$Wo,A1,Bue,kWo,SWo,sX,RWo,PWo,BWo,L1,Iue,IWo,NWo,lX,qWo,jWo,DWo,y1,Nue,GWo,OWo,iX,VWo,XWo,zWo,x1,que,WWo,QWo,dX,HWo,UWo,JWo,$1,jue,YWo,KWo,cX,ZWo,eQo,oQo,k1,Due,rQo,tQo,mX,aQo,nQo,sQo,S1,Gue,lQo,iQo,fX,dQo,cQo,mQo,R1,Oue,fQo,gQo,gX,hQo,uQo,pQo,P1,Vue,_Qo,bQo,hX,vQo,FQo,TQo,B1,Xue,MQo,EQo,uX,CQo,wQo,AQo,I1,zue,LQo,yQo,pX,xQo,$Qo,kQo,N1,Wue,SQo,RQo,_X,PQo,BQo,IQo,q1,Que,NQo,qQo,bX,jQo,DQo,GQo,j1,Hue,OQo,VQo,vX,XQo,zQo,WQo,D1,Uue,QQo,HQo,FX,UQo,JQo,YQo,G1,Jue,KQo,ZQo,TX,eHo,oHo,rHo,O1,Yue,tHo,aHo,MX,nHo,sHo,lHo,V1,Kue,iHo,dHo,EX,cHo,mHo,fHo,X1,Zue,gHo,hHo,CX,uHo,pHo,_Ho,z1,epe,bHo,vHo,wX,FHo,THo,MHo,W1,ope,EHo,CHo,AX,wHo,AHo,LHo,Q1,rpe,yHo,xHo,LX,$Ho,kHo,SHo,H1,tpe,RHo,PHo,yX,BHo,IHo,NHo,U1,ape,qHo,jHo,xX,DHo,GHo,OHo,J1,npe,VHo,XHo,$X,zHo,WHo,QHo,Y1,spe,HHo,UHo,kX,JHo,YHo,KHo,K1,lpe,ZHo,eUo,SX,oUo,rUo,tUo,Z1,ipe,aUo,nUo,RX,sUo,lUo,iUo,eT,dpe,dUo,cUo,PX,mUo,fUo,gUo,oT,cpe,hUo,uUo,BX,pUo,_Uo,bUo,rT,mpe,vUo,FUo,IX,TUo,MUo,EUo,tT,fpe,CUo,wUo,NX,AUo,LUo,yUo,aT,gpe,xUo,$Uo,qX,kUo,SUo,RUo,nT,hpe,PUo,BUo,jX,IUo,NUo,qUo,sT,upe,jUo,DUo,DX,GUo,OUo,VUo,lT,ppe,XUo,zUo,GX,WUo,QUo,HUo,iT,_pe,UUo,JUo,OX,YUo,KUo,ZUo,dT,bpe,eJo,oJo,VX,rJo,tJo,aJo,cT,vpe,nJo,sJo,XX,lJo,iJo,dJo,mT,cJo,Fpe,mJo,fJo,Tpe,gJo,hJo,fT,Jje,rd,gT,Mpe,g7,uJo,Epe,pJo,Yje,qo,h7,_Jo,td,bJo,zX,vJo,FJo,WX,TJo,MJo,EJo,u7,CJo,Cpe,wJo,AJo,LJo,gt,p7,yJo,wpe,xJo,$Jo,ad,kJo,Ape,SJo,RJo,QX,PJo,BJo,IJo,hT,NJo,so,_7,qJo,Lpe,jJo,DJo,qa,GJo,ype,OJo,VJo,xpe,XJo,zJo,$pe,WJo,QJo,HJo,kpe,uT,Spe,UJo,JJo,HX,YJo,KJo,ZJo,pT,eYo,Rpe,oYo,rYo,Ppe,tYo,aYo,_T,Kje,nd,bT,Bpe,b7,nYo,Ipe,sYo,Zje,jo,v7,lYo,sd,iYo,UX,dYo,cYo,JX,mYo,fYo,gYo,F7,hYo,Npe,uYo,pYo,_Yo,ht,T7,bYo,qpe,vYo,FYo,ld,TYo,jpe,MYo,EYo,YX,CYo,wYo,AYo,vT,LYo,lo,M7,yYo,Dpe,xYo,$Yo,ja,kYo,Gpe,SYo,RYo,Ope,PYo,BYo,Vpe,IYo,NYo,qYo,ve,FT,Xpe,jYo,DYo,KX,GYo,OYo,VYo,TT,zpe,XYo,zYo,ZX,WYo,QYo,HYo,MT,Wpe,UYo,JYo,ez,YYo,KYo,ZYo,ET,Qpe,eKo,oKo,oz,rKo,tKo,aKo,Bs,Hpe,nKo,sKo,rz,lKo,iKo,tz,dKo,cKo,mKo,CT,Upe,fKo,gKo,az,hKo,uKo,pKo,Is,Jpe,_Ko,bKo,nz,vKo,FKo,sz,TKo,MKo,EKo,ut,Ype,CKo,wKo,lz,AKo,LKo,iz,yKo,xKo,dz,$Ko,kKo,SKo,wT,Kpe,RKo,PKo,cz,BKo,IKo,NKo,AT,Zpe,qKo,jKo,mz,DKo,GKo,OKo,LT,e_e,VKo,XKo,fz,zKo,WKo,QKo,yT,o_e,HKo,UKo,gz,JKo,YKo,KKo,xT,r_e,ZKo,eZo,hz,oZo,rZo,tZo,$T,t_e,aZo,nZo,uz,sZo,lZo,iZo,kT,a_e,dZo,cZo,pz,mZo,fZo,gZo,ST,hZo,n_e,uZo,pZo,s_e,_Zo,bZo,RT,eDe,id,PT,l_e,E7,vZo,i_e,FZo,oDe,Do,C7,TZo,dd,MZo,_z,EZo,CZo,bz,wZo,AZo,LZo,w7,yZo,d_e,xZo,$Zo,kZo,pt,A7,SZo,c_e,RZo,PZo,cd,BZo,m_e,IZo,NZo,vz,qZo,jZo,DZo,BT,GZo,io,L7,OZo,f_e,VZo,XZo,Da,zZo,g_e,WZo,QZo,h_e,HZo,UZo,u_e,JZo,YZo,KZo,p_e,IT,__e,ZZo,eer,Fz,oer,rer,ter,NT,aer,b_e,ner,ser,v_e,ler,ier,qT,rDe,md,jT,F_e,y7,der,T_e,cer,tDe,Go,x7,mer,fd,fer,Tz,ger,her,Mz,uer,per,_er,$7,ber,M_e,ver,Fer,Ter,_t,k7,Mer,E_e,Eer,Cer,gd,wer,C_e,Aer,Ler,Ez,yer,xer,$er,DT,ker,co,S7,Ser,w_e,Rer,Per,Ga,Ber,A_e,Ier,Ner,L_e,qer,jer,y_e,Der,Ger,Oer,Re,GT,x_e,Ver,Xer,Cz,zer,Wer,Qer,OT,$_e,Her,Uer,wz,Jer,Yer,Ker,VT,k_e,Zer,eor,Az,oor,ror,tor,XT,S_e,aor,nor,Lz,sor,lor,ior,zT,R_e,dor,cor,yz,mor,gor,hor,WT,P_e,uor,por,xz,_or,bor,vor,QT,B_e,For,Tor,$z,Mor,Eor,Cor,HT,I_e,wor,Aor,kz,Lor,yor,xor,UT,N_e,$or,kor,Sz,Sor,Ror,Por,JT,Bor,q_e,Ior,Nor,j_e,qor,jor,YT,aDe,hd,KT,D_e,R7,Dor,G_e,Gor,nDe,Oo,P7,Oor,ud,Vor,Rz,Xor,zor,Pz,Wor,Qor,Hor,B7,Uor,O_e,Jor,Yor,Kor,bt,I7,Zor,V_e,err,orr,pd,rrr,X_e,trr,arr,Bz,nrr,srr,lrr,ZT,irr,mo,N7,drr,z_e,crr,mrr,Oa,frr,W_e,grr,hrr,Q_e,urr,prr,H_e,_rr,brr,vrr,Kr,eM,U_e,Frr,Trr,Iz,Mrr,Err,Crr,oM,J_e,wrr,Arr,Nz,Lrr,yrr,xrr,rM,Y_e,$rr,krr,qz,Srr,Rrr,Prr,tM,K_e,Brr,Irr,jz,Nrr,qrr,jrr,aM,Z_e,Drr,Grr,Dz,Orr,Vrr,Xrr,nM,zrr,ebe,Wrr,Qrr,obe,Hrr,Urr,sM,sDe,_d,lM,rbe,q7,Jrr,tbe,Yrr,lDe,Vo,j7,Krr,bd,Zrr,Gz,etr,otr,Oz,rtr,ttr,atr,D7,ntr,abe,str,ltr,itr,vt,G7,dtr,nbe,ctr,mtr,vd,ftr,sbe,gtr,htr,Vz,utr,ptr,_tr,iM,btr,fo,O7,vtr,lbe,Ftr,Ttr,Va,Mtr,ibe,Etr,Ctr,dbe,wtr,Atr,cbe,Ltr,ytr,xtr,Le,dM,mbe,$tr,ktr,Xz,Str,Rtr,Ptr,cM,fbe,Btr,Itr,zz,Ntr,qtr,jtr,mM,gbe,Dtr,Gtr,Wz,Otr,Vtr,Xtr,fM,hbe,ztr,Wtr,Qz,Qtr,Htr,Utr,gM,ube,Jtr,Ytr,Hz,Ktr,Ztr,ear,hM,pbe,oar,rar,Uz,tar,aar,nar,uM,_be,sar,lar,Jz,iar,dar,car,pM,bbe,mar,far,Yz,gar,har,uar,_M,vbe,par,_ar,Kz,bar,Far,Tar,bM,Fbe,Mar,Ear,Zz,Car,war,Aar,vM,Lar,Tbe,yar,xar,Mbe,$ar,kar,FM,iDe,Fd,TM,Ebe,V7,Sar,Cbe,Rar,dDe,Xo,X7,Par,Td,Bar,eW,Iar,Nar,oW,qar,jar,Dar,z7,Gar,wbe,Oar,Var,Xar,Ft,W7,zar,Abe,War,Qar,Md,Har,Lbe,Uar,Jar,rW,Yar,Kar,Zar,MM,enr,go,Q7,onr,ybe,rnr,tnr,Xa,anr,xbe,nnr,snr,$be,lnr,inr,kbe,dnr,cnr,mnr,H7,EM,Sbe,fnr,gnr,tW,hnr,unr,pnr,CM,Rbe,_nr,bnr,aW,vnr,Fnr,Tnr,wM,Mnr,Pbe,Enr,Cnr,Bbe,wnr,Anr,AM,cDe,Ed,LM,Ibe,U7,Lnr,Nbe,ynr,mDe,zo,J7,xnr,Cd,$nr,nW,knr,Snr,sW,Rnr,Pnr,Bnr,Y7,Inr,qbe,Nnr,qnr,jnr,Tt,K7,Dnr,jbe,Gnr,Onr,wd,Vnr,Dbe,Xnr,znr,lW,Wnr,Qnr,Hnr,yM,Unr,ho,Z7,Jnr,Gbe,Ynr,Knr,za,Znr,Obe,esr,osr,Vbe,rsr,tsr,Xbe,asr,nsr,ssr,Zr,xM,zbe,lsr,isr,iW,dsr,csr,msr,$M,Wbe,fsr,gsr,dW,hsr,usr,psr,kM,Qbe,_sr,bsr,cW,vsr,Fsr,Tsr,SM,Hbe,Msr,Esr,mW,Csr,wsr,Asr,RM,Ube,Lsr,ysr,fW,xsr,$sr,ksr,PM,Ssr,Jbe,Rsr,Psr,Ybe,Bsr,Isr,BM,fDe,Ad,IM,Kbe,e8,Nsr,Zbe,qsr,gDe,Wo,o8,jsr,Ld,Dsr,gW,Gsr,Osr,hW,Vsr,Xsr,zsr,r8,Wsr,e2e,Qsr,Hsr,Usr,Mt,t8,Jsr,o2e,Ysr,Ksr,yd,Zsr,r2e,elr,olr,uW,rlr,tlr,alr,NM,nlr,uo,a8,slr,t2e,llr,ilr,Wa,dlr,a2e,clr,mlr,n2e,flr,glr,s2e,hlr,ulr,plr,xd,qM,l2e,_lr,blr,pW,vlr,Flr,Tlr,jM,i2e,Mlr,Elr,_W,Clr,wlr,Alr,DM,d2e,Llr,ylr,bW,xlr,$lr,klr,GM,Slr,c2e,Rlr,Plr,m2e,Blr,Ilr,OM,hDe,$d,VM,f2e,n8,Nlr,g2e,qlr,uDe,Qo,s8,jlr,kd,Dlr,vW,Glr,Olr,FW,Vlr,Xlr,zlr,l8,Wlr,h2e,Qlr,Hlr,Ulr,Et,i8,Jlr,u2e,Ylr,Klr,Sd,Zlr,p2e,eir,oir,TW,rir,tir,air,XM,nir,po,d8,sir,_2e,lir,iir,Qa,dir,b2e,cir,mir,v2e,fir,gir,F2e,hir,uir,pir,c8,zM,T2e,_ir,bir,MW,vir,Fir,Tir,WM,M2e,Mir,Eir,EW,Cir,wir,Air,QM,Lir,E2e,yir,xir,C2e,$ir,kir,HM,pDe,Rd,UM,w2e,m8,Sir,A2e,Rir,_De,Ho,f8,Pir,Pd,Bir,CW,Iir,Nir,wW,qir,jir,Dir,g8,Gir,L2e,Oir,Vir,Xir,Ct,h8,zir,y2e,Wir,Qir,Bd,Hir,x2e,Uir,Jir,AW,Yir,Kir,Zir,JM,edr,_o,u8,odr,$2e,rdr,tdr,Ha,adr,k2e,ndr,sdr,S2e,ldr,idr,R2e,ddr,cdr,mdr,P2e,YM,B2e,fdr,gdr,LW,hdr,udr,pdr,KM,_dr,I2e,bdr,vdr,N2e,Fdr,Tdr,ZM,bDe,Id,e4,q2e,p8,Mdr,j2e,Edr,vDe,Uo,_8,Cdr,Nd,wdr,yW,Adr,Ldr,xW,ydr,xdr,$dr,b8,kdr,D2e,Sdr,Rdr,Pdr,wt,v8,Bdr,G2e,Idr,Ndr,qd,qdr,O2e,jdr,Ddr,$W,Gdr,Odr,Vdr,o4,Xdr,bo,F8,zdr,V2e,Wdr,Qdr,Ua,Hdr,X2e,Udr,Jdr,z2e,Ydr,Kdr,W2e,Zdr,ecr,ocr,Ja,r4,Q2e,rcr,tcr,kW,acr,ncr,scr,t4,H2e,lcr,icr,SW,dcr,ccr,mcr,a4,U2e,fcr,gcr,RW,hcr,ucr,pcr,n4,J2e,_cr,bcr,PW,vcr,Fcr,Tcr,s4,Mcr,Y2e,Ecr,Ccr,K2e,wcr,Acr,l4,FDe,jd,i4,Z2e,T8,Lcr,eve,ycr,TDe,Jo,M8,xcr,Dd,$cr,BW,kcr,Scr,IW,Rcr,Pcr,Bcr,E8,Icr,ove,Ncr,qcr,jcr,At,C8,Dcr,rve,Gcr,Ocr,Gd,Vcr,tve,Xcr,zcr,NW,Wcr,Qcr,Hcr,d4,Ucr,vo,w8,Jcr,ave,Ycr,Kcr,Ya,Zcr,nve,emr,omr,sve,rmr,tmr,lve,amr,nmr,smr,ive,c4,dve,lmr,imr,qW,dmr,cmr,mmr,m4,fmr,cve,gmr,hmr,mve,umr,pmr,f4,MDe,Od,g4,fve,A8,_mr,gve,bmr,EDe,Yo,L8,vmr,Vd,Fmr,jW,Tmr,Mmr,DW,Emr,Cmr,wmr,y8,Amr,hve,Lmr,ymr,xmr,Lt,x8,$mr,uve,kmr,Smr,Xd,Rmr,pve,Pmr,Bmr,GW,Imr,Nmr,qmr,h4,jmr,wr,$8,Dmr,_ve,Gmr,Omr,Ka,Vmr,bve,Xmr,zmr,vve,Wmr,Qmr,Fve,Hmr,Umr,Jmr,q,u4,Tve,Ymr,Kmr,OW,Zmr,efr,ofr,p4,Mve,rfr,tfr,VW,afr,nfr,sfr,_4,Eve,lfr,ifr,XW,dfr,cfr,mfr,b4,Cve,ffr,gfr,zW,hfr,ufr,pfr,v4,wve,_fr,bfr,WW,vfr,Ffr,Tfr,F4,Ave,Mfr,Efr,QW,Cfr,wfr,Afr,T4,Lve,Lfr,yfr,HW,xfr,$fr,kfr,M4,yve,Sfr,Rfr,UW,Pfr,Bfr,Ifr,E4,xve,Nfr,qfr,JW,jfr,Dfr,Gfr,C4,$ve,Ofr,Vfr,YW,Xfr,zfr,Wfr,w4,kve,Qfr,Hfr,KW,Ufr,Jfr,Yfr,A4,Sve,Kfr,Zfr,ZW,egr,ogr,rgr,L4,Rve,tgr,agr,eQ,ngr,sgr,lgr,y4,Pve,igr,dgr,oQ,cgr,mgr,fgr,x4,Bve,ggr,hgr,rQ,ugr,pgr,_gr,$4,Ive,bgr,vgr,tQ,Fgr,Tgr,Mgr,k4,Nve,Egr,Cgr,aQ,wgr,Agr,Lgr,Ns,qve,ygr,xgr,nQ,$gr,kgr,sQ,Sgr,Rgr,Pgr,S4,jve,Bgr,Igr,lQ,Ngr,qgr,jgr,R4,Dve,Dgr,Ggr,iQ,Ogr,Vgr,Xgr,P4,Gve,zgr,Wgr,dQ,Qgr,Hgr,Ugr,B4,Ove,Jgr,Ygr,cQ,Kgr,Zgr,ehr,I4,Vve,ohr,rhr,mQ,thr,ahr,nhr,N4,Xve,shr,lhr,fQ,ihr,dhr,chr,q4,zve,mhr,fhr,gQ,ghr,hhr,uhr,j4,Wve,phr,_hr,hQ,bhr,vhr,Fhr,D4,Qve,Thr,Mhr,uQ,Ehr,Chr,whr,G4,Hve,Ahr,Lhr,pQ,yhr,xhr,$hr,O4,Uve,khr,Shr,_Q,Rhr,Phr,Bhr,V4,Jve,Ihr,Nhr,bQ,qhr,jhr,Dhr,X4,Yve,Ghr,Ohr,vQ,Vhr,Xhr,zhr,z4,Kve,Whr,Qhr,FQ,Hhr,Uhr,Jhr,W4,Zve,Yhr,Khr,TQ,Zhr,eur,our,Q4,eFe,rur,tur,MQ,aur,nur,sur,H4,oFe,lur,iur,EQ,dur,cur,mur,U4,rFe,fur,gur,CQ,hur,uur,pur,J4,tFe,_ur,bur,wQ,vur,Fur,Tur,Y4,aFe,Mur,Eur,AQ,Cur,wur,Aur,K4,nFe,Lur,yur,LQ,xur,$ur,kur,Z4,sFe,Sur,Rur,yQ,Pur,Bur,Iur,eE,lFe,Nur,qur,xQ,jur,Dur,Gur,oE,iFe,Our,Vur,$Q,Xur,zur,Wur,rE,dFe,Qur,Hur,kQ,Uur,Jur,Yur,tE,cFe,Kur,Zur,SQ,epr,opr,rpr,aE,mFe,tpr,apr,RQ,npr,spr,lpr,nE,fFe,ipr,dpr,PQ,cpr,mpr,fpr,sE,gFe,gpr,hpr,BQ,upr,ppr,_pr,lE,CDe,zd,iE,hFe,k8,bpr,uFe,vpr,wDe,Ko,S8,Fpr,Wd,Tpr,IQ,Mpr,Epr,NQ,Cpr,wpr,Apr,R8,Lpr,pFe,ypr,xpr,$pr,yt,P8,kpr,_Fe,Spr,Rpr,Qd,Ppr,bFe,Bpr,Ipr,qQ,Npr,qpr,jpr,dE,Dpr,Ar,B8,Gpr,vFe,Opr,Vpr,Za,Xpr,FFe,zpr,Wpr,TFe,Qpr,Hpr,MFe,Upr,Jpr,Ypr,se,cE,EFe,Kpr,Zpr,jQ,e_r,o_r,r_r,mE,CFe,t_r,a_r,DQ,n_r,s_r,l_r,fE,wFe,i_r,d_r,GQ,c_r,m_r,f_r,gE,AFe,g_r,h_r,OQ,u_r,p_r,__r,hE,LFe,b_r,v_r,VQ,F_r,T_r,M_r,uE,yFe,E_r,C_r,XQ,w_r,A_r,L_r,pE,xFe,y_r,x_r,zQ,$_r,k_r,S_r,_E,$Fe,R_r,P_r,WQ,B_r,I_r,N_r,bE,kFe,q_r,j_r,QQ,D_r,G_r,O_r,vE,SFe,V_r,X_r,HQ,z_r,W_r,Q_r,FE,RFe,H_r,U_r,UQ,J_r,Y_r,K_r,TE,PFe,Z_r,ebr,JQ,obr,rbr,tbr,ME,BFe,abr,nbr,YQ,sbr,lbr,ibr,EE,IFe,dbr,cbr,KQ,mbr,fbr,gbr,CE,NFe,hbr,ubr,ZQ,pbr,_br,bbr,wE,qFe,vbr,Fbr,eH,Tbr,Mbr,Ebr,AE,jFe,Cbr,wbr,oH,Abr,Lbr,ybr,LE,DFe,xbr,$br,rH,kbr,Sbr,Rbr,yE,GFe,Pbr,Bbr,tH,Ibr,Nbr,qbr,xE,OFe,jbr,Dbr,aH,Gbr,Obr,Vbr,$E,VFe,Xbr,zbr,nH,Wbr,Qbr,Hbr,kE,XFe,Ubr,Jbr,sH,Ybr,Kbr,Zbr,SE,zFe,e2r,o2r,lH,r2r,t2r,a2r,RE,ADe,Hd,PE,WFe,I8,n2r,QFe,s2r,LDe,Zo,N8,l2r,Ud,i2r,iH,d2r,c2r,dH,m2r,f2r,g2r,q8,h2r,HFe,u2r,p2r,_2r,xt,j8,b2r,UFe,v2r,F2r,Jd,T2r,JFe,M2r,E2r,cH,C2r,w2r,A2r,BE,L2r,Lr,D8,y2r,YFe,x2r,$2r,en,k2r,KFe,S2r,R2r,ZFe,P2r,B2r,e1e,I2r,N2r,q2r,Me,IE,o1e,j2r,D2r,mH,G2r,O2r,V2r,NE,r1e,X2r,z2r,fH,W2r,Q2r,H2r,qE,t1e,U2r,J2r,gH,Y2r,K2r,Z2r,jE,a1e,evr,ovr,hH,rvr,tvr,avr,DE,n1e,nvr,svr,uH,lvr,ivr,dvr,GE,s1e,cvr,mvr,pH,fvr,gvr,hvr,OE,l1e,uvr,pvr,_H,_vr,bvr,vvr,VE,i1e,Fvr,Tvr,bH,Mvr,Evr,Cvr,XE,d1e,wvr,Avr,vH,Lvr,yvr,xvr,zE,c1e,$vr,kvr,FH,Svr,Rvr,Pvr,WE,m1e,Bvr,Ivr,TH,Nvr,qvr,jvr,QE,f1e,Dvr,Gvr,MH,Ovr,Vvr,Xvr,HE,g1e,zvr,Wvr,EH,Qvr,Hvr,Uvr,UE,yDe,Yd,JE,h1e,G8,Jvr,u1e,Yvr,xDe,er,O8,Kvr,Kd,Zvr,CH,eFr,oFr,wH,rFr,tFr,aFr,V8,nFr,p1e,sFr,lFr,iFr,$t,X8,dFr,_1e,cFr,mFr,Zd,fFr,b1e,gFr,hFr,AH,uFr,pFr,_Fr,YE,bFr,yr,z8,vFr,v1e,FFr,TFr,on,MFr,F1e,EFr,CFr,T1e,wFr,AFr,M1e,LFr,yFr,xFr,rn,KE,E1e,$Fr,kFr,LH,SFr,RFr,PFr,ZE,C1e,BFr,IFr,yH,NFr,qFr,jFr,eC,w1e,DFr,GFr,xH,OFr,VFr,XFr,oC,A1e,zFr,WFr,$H,QFr,HFr,UFr,rC,$De,ec,tC,L1e,W8,JFr,y1e,YFr,kDe,or,Q8,KFr,oc,ZFr,kH,e1r,o1r,SH,r1r,t1r,a1r,H8,n1r,x1e,s1r,l1r,i1r,kt,U8,d1r,$1e,c1r,m1r,rc,f1r,k1e,g1r,h1r,RH,u1r,p1r,_1r,aC,b1r,xr,J8,v1r,S1e,F1r,T1r,tn,M1r,R1e,E1r,C1r,P1e,w1r,A1r,B1e,L1r,y1r,x1r,ie,nC,I1e,$1r,k1r,PH,S1r,R1r,P1r,sC,N1e,B1r,I1r,BH,N1r,q1r,j1r,lC,q1e,D1r,G1r,IH,O1r,V1r,X1r,iC,j1e,z1r,W1r,NH,Q1r,H1r,U1r,dC,D1e,J1r,Y1r,qH,K1r,Z1r,eTr,cC,G1e,oTr,rTr,jH,tTr,aTr,nTr,mC,O1e,sTr,lTr,DH,iTr,dTr,cTr,fC,V1e,mTr,fTr,GH,gTr,hTr,uTr,gC,X1e,pTr,_Tr,OH,bTr,vTr,FTr,hC,z1e,TTr,MTr,VH,ETr,CTr,wTr,uC,W1e,ATr,LTr,XH,yTr,xTr,$Tr,pC,Q1e,kTr,STr,zH,RTr,PTr,BTr,_C,H1e,ITr,NTr,WH,qTr,jTr,DTr,bC,U1e,GTr,OTr,QH,VTr,XTr,zTr,vC,J1e,WTr,QTr,HH,HTr,UTr,JTr,FC,Y1e,YTr,KTr,UH,ZTr,eMr,oMr,TC,K1e,rMr,tMr,JH,aMr,nMr,sMr,MC,Z1e,lMr,iMr,YH,dMr,cMr,mMr,EC,eTe,fMr,gMr,KH,hMr,uMr,pMr,CC,oTe,_Mr,bMr,ZH,vMr,FMr,TMr,wC,SDe,tc,AC,rTe,Y8,MMr,tTe,EMr,RDe,rr,K8,CMr,ac,wMr,eU,AMr,LMr,oU,yMr,xMr,$Mr,Z8,kMr,aTe,SMr,RMr,PMr,St,e9,BMr,nTe,IMr,NMr,nc,qMr,sTe,jMr,DMr,rU,GMr,OMr,VMr,LC,XMr,$r,o9,zMr,lTe,WMr,QMr,an,HMr,iTe,UMr,JMr,dTe,YMr,KMr,cTe,ZMr,e4r,o4r,ye,yC,mTe,r4r,t4r,tU,a4r,n4r,s4r,xC,fTe,l4r,i4r,aU,d4r,c4r,m4r,$C,gTe,f4r,g4r,nU,h4r,u4r,p4r,kC,hTe,_4r,b4r,sU,v4r,F4r,T4r,SC,uTe,M4r,E4r,lU,C4r,w4r,A4r,RC,pTe,L4r,y4r,iU,x4r,$4r,k4r,PC,_Te,S4r,R4r,dU,P4r,B4r,I4r,BC,bTe,N4r,q4r,cU,j4r,D4r,G4r,IC,vTe,O4r,V4r,mU,X4r,z4r,W4r,NC,FTe,Q4r,H4r,fU,U4r,J4r,Y4r,qC,PDe,sc,jC,TTe,r9,K4r,MTe,Z4r,BDe,tr,t9,eEr,lc,oEr,gU,rEr,tEr,hU,aEr,nEr,sEr,a9,lEr,ETe,iEr,dEr,cEr,Rt,n9,mEr,CTe,fEr,gEr,ic,hEr,wTe,uEr,pEr,uU,_Er,bEr,vEr,DC,FEr,kr,s9,TEr,ATe,MEr,EEr,nn,CEr,LTe,wEr,AEr,yTe,LEr,yEr,xTe,xEr,$Er,kEr,oe,GC,$Te,SEr,REr,pU,PEr,BEr,IEr,OC,kTe,NEr,qEr,_U,jEr,DEr,GEr,VC,STe,OEr,VEr,bU,XEr,zEr,WEr,XC,RTe,QEr,HEr,vU,UEr,JEr,YEr,zC,PTe,KEr,ZEr,FU,eCr,oCr,rCr,WC,BTe,tCr,aCr,TU,nCr,sCr,lCr,QC,ITe,iCr,dCr,MU,cCr,mCr,fCr,HC,NTe,gCr,hCr,EU,uCr,pCr,_Cr,UC,qTe,bCr,vCr,CU,FCr,TCr,MCr,JC,jTe,ECr,CCr,wU,wCr,ACr,LCr,YC,DTe,yCr,xCr,AU,$Cr,kCr,SCr,KC,GTe,RCr,PCr,LU,BCr,ICr,NCr,ZC,OTe,qCr,jCr,yU,DCr,GCr,OCr,e5,VTe,VCr,XCr,xU,zCr,WCr,QCr,o5,XTe,HCr,UCr,$U,JCr,YCr,KCr,r5,zTe,ZCr,e5r,kU,o5r,r5r,t5r,t5,WTe,a5r,n5r,SU,s5r,l5r,i5r,a5,QTe,d5r,c5r,RU,m5r,f5r,g5r,n5,HTe,h5r,u5r,PU,p5r,_5r,b5r,s5,UTe,v5r,F5r,BU,T5r,M5r,E5r,l5,JTe,C5r,w5r,IU,A5r,L5r,y5r,i5,YTe,x5r,$5r,NU,k5r,S5r,R5r,d5,KTe,P5r,B5r,qU,I5r,N5r,q5r,c5,ZTe,j5r,D5r,jU,G5r,O5r,V5r,m5,eMe,X5r,z5r,DU,W5r,Q5r,H5r,f5,oMe,U5r,J5r,GU,Y5r,K5r,Z5r,g5,IDe,dc,h5,rMe,l9,e3r,tMe,o3r,NDe,ar,i9,r3r,cc,t3r,OU,a3r,n3r,VU,s3r,l3r,i3r,d9,d3r,aMe,c3r,m3r,f3r,Pt,c9,g3r,nMe,h3r,u3r,mc,p3r,sMe,_3r,b3r,XU,v3r,F3r,T3r,u5,M3r,Sr,m9,E3r,lMe,C3r,w3r,sn,A3r,iMe,L3r,y3r,dMe,x3r,$3r,cMe,k3r,S3r,R3r,ue,p5,mMe,P3r,B3r,zU,I3r,N3r,q3r,_5,fMe,j3r,D3r,WU,G3r,O3r,V3r,b5,gMe,X3r,z3r,QU,W3r,Q3r,H3r,v5,hMe,U3r,J3r,HU,Y3r,K3r,Z3r,F5,uMe,e0r,o0r,UU,r0r,t0r,a0r,T5,pMe,n0r,s0r,JU,l0r,i0r,d0r,M5,_Me,c0r,m0r,YU,f0r,g0r,h0r,E5,bMe,u0r,p0r,KU,_0r,b0r,v0r,C5,vMe,F0r,T0r,ZU,M0r,E0r,C0r,w5,FMe,w0r,A0r,eJ,L0r,y0r,x0r,A5,TMe,$0r,k0r,oJ,S0r,R0r,P0r,L5,MMe,B0r,I0r,rJ,N0r,q0r,j0r,y5,EMe,D0r,G0r,tJ,O0r,V0r,X0r,x5,CMe,z0r,W0r,aJ,Q0r,H0r,U0r,$5,wMe,J0r,Y0r,nJ,K0r,Z0r,ewr,k5,AMe,owr,rwr,sJ,twr,awr,nwr,S5,LMe,swr,lwr,lJ,iwr,dwr,cwr,R5,qDe,fc,P5,yMe,f9,mwr,xMe,fwr,jDe,nr,g9,gwr,gc,hwr,iJ,uwr,pwr,dJ,_wr,bwr,vwr,h9,Fwr,$Me,Twr,Mwr,Ewr,Bt,u9,Cwr,kMe,wwr,Awr,hc,Lwr,SMe,ywr,xwr,cJ,$wr,kwr,Swr,B5,Rwr,Rr,p9,Pwr,RMe,Bwr,Iwr,ln,Nwr,PMe,qwr,jwr,BMe,Dwr,Gwr,IMe,Owr,Vwr,Xwr,_9,I5,NMe,zwr,Wwr,mJ,Qwr,Hwr,Uwr,N5,qMe,Jwr,Ywr,fJ,Kwr,Zwr,eAr,q5,DDe,uc,j5,jMe,b9,oAr,DMe,rAr,GDe,sr,v9,tAr,pc,aAr,gJ,nAr,sAr,hJ,lAr,iAr,dAr,F9,cAr,GMe,mAr,fAr,gAr,It,T9,hAr,OMe,uAr,pAr,_c,_Ar,VMe,bAr,vAr,uJ,FAr,TAr,MAr,D5,EAr,Pr,M9,CAr,XMe,wAr,AAr,dn,LAr,zMe,yAr,xAr,WMe,$Ar,kAr,QMe,SAr,RAr,PAr,HMe,G5,UMe,BAr,IAr,pJ,NAr,qAr,jAr,O5,ODe,bc,V5,JMe,E9,DAr,YMe,GAr,VDe,lr,C9,OAr,vc,VAr,_J,XAr,zAr,bJ,WAr,QAr,HAr,w9,UAr,KMe,JAr,YAr,KAr,Nt,A9,ZAr,ZMe,e6r,o6r,Fc,r6r,e4e,t6r,a6r,vJ,n6r,s6r,l6r,X5,i6r,Br,L9,d6r,o4e,c6r,m6r,cn,f6r,r4e,g6r,h6r,t4e,u6r,p6r,a4e,_6r,b6r,v6r,de,z5,n4e,F6r,T6r,FJ,M6r,E6r,C6r,W5,s4e,w6r,A6r,TJ,L6r,y6r,x6r,Q5,l4e,$6r,k6r,MJ,S6r,R6r,P6r,H5,i4e,B6r,I6r,EJ,N6r,q6r,j6r,U5,d4e,D6r,G6r,CJ,O6r,V6r,X6r,J5,c4e,z6r,W6r,wJ,Q6r,H6r,U6r,Y5,m4e,J6r,Y6r,AJ,K6r,Z6r,eLr,K5,f4e,oLr,rLr,LJ,tLr,aLr,nLr,Z5,g4e,sLr,lLr,yJ,iLr,dLr,cLr,e3,h4e,mLr,fLr,xJ,gLr,hLr,uLr,o3,u4e,pLr,_Lr,$J,bLr,vLr,FLr,r3,p4e,TLr,MLr,kJ,ELr,CLr,wLr,t3,_4e,ALr,LLr,SJ,yLr,xLr,$Lr,a3,b4e,kLr,SLr,RJ,RLr,PLr,BLr,n3,v4e,ILr,NLr,PJ,qLr,jLr,DLr,s3,F4e,GLr,OLr,BJ,VLr,XLr,zLr,l3,T4e,WLr,QLr,IJ,HLr,ULr,JLr,i3,M4e,YLr,KLr,NJ,ZLr,eyr,oyr,d3,E4e,ryr,tyr,qJ,ayr,nyr,syr,c3,C4e,lyr,iyr,jJ,dyr,cyr,myr,m3,XDe,Tc,f3,w4e,y9,fyr,A4e,gyr,zDe,ir,x9,hyr,Mc,uyr,DJ,pyr,_yr,GJ,byr,vyr,Fyr,$9,Tyr,L4e,Myr,Eyr,Cyr,qt,k9,wyr,y4e,Ayr,Lyr,Ec,yyr,x4e,xyr,$yr,OJ,kyr,Syr,Ryr,g3,Pyr,Ir,S9,Byr,$4e,Iyr,Nyr,mn,qyr,k4e,jyr,Dyr,S4e,Gyr,Oyr,R4e,Vyr,Xyr,zyr,ce,h3,P4e,Wyr,Qyr,VJ,Hyr,Uyr,Jyr,u3,B4e,Yyr,Kyr,XJ,Zyr,e7r,o7r,p3,I4e,r7r,t7r,zJ,a7r,n7r,s7r,_3,N4e,l7r,i7r,WJ,d7r,c7r,m7r,b3,q4e,f7r,g7r,QJ,h7r,u7r,p7r,v3,j4e,_7r,b7r,HJ,v7r,F7r,T7r,F3,D4e,M7r,E7r,UJ,C7r,w7r,A7r,T3,G4e,L7r,y7r,JJ,x7r,$7r,k7r,M3,O4e,S7r,R7r,YJ,P7r,B7r,I7r,E3,V4e,N7r,q7r,KJ,j7r,D7r,G7r,C3,X4e,O7r,V7r,ZJ,X7r,z7r,W7r,w3,z4e,Q7r,H7r,eY,U7r,J7r,Y7r,A3,W4e,K7r,Z7r,oY,e8r,o8r,r8r,L3,Q4e,t8r,a8r,rY,n8r,s8r,l8r,y3,H4e,i8r,d8r,tY,c8r,m8r,f8r,x3,U4e,g8r,h8r,aY,u8r,p8r,_8r,$3,J4e,b8r,v8r,nY,F8r,T8r,M8r,k3,Y4e,E8r,C8r,sY,w8r,A8r,L8r,S3,K4e,y8r,x8r,lY,$8r,k8r,S8r,R3,Z4e,R8r,P8r,iY,B8r,I8r,N8r,P3,WDe,Cc,B3,eEe,R9,q8r,oEe,j8r,QDe,dr,P9,D8r,wc,G8r,dY,O8r,V8r,cY,X8r,z8r,W8r,B9,Q8r,rEe,H8r,U8r,J8r,jt,I9,Y8r,tEe,K8r,Z8r,Ac,e9r,aEe,o9r,r9r,mY,t9r,a9r,n9r,I3,s9r,Nr,N9,l9r,nEe,i9r,d9r,fn,c9r,sEe,m9r,f9r,lEe,g9r,h9r,iEe,u9r,p9r,_9r,dEe,N3,cEe,b9r,v9r,fY,F9r,T9r,M9r,q3,HDe,Lc,j3,mEe,q9,E9r,fEe,C9r,UDe,cr,j9,w9r,yc,A9r,gY,L9r,y9r,hY,x9r,$9r,k9r,D9,S9r,gEe,R9r,P9r,B9r,Dt,G9,I9r,hEe,N9r,q9r,xc,j9r,uEe,D9r,G9r,uY,O9r,V9r,X9r,D3,z9r,qr,O9,W9r,pEe,Q9r,H9r,gn,U9r,_Ee,J9r,Y9r,bEe,K9r,Z9r,vEe,exr,oxr,rxr,FEe,G3,TEe,txr,axr,pY,nxr,sxr,lxr,O3,JDe,$c,V3,MEe,V9,ixr,EEe,dxr,YDe,mr,X9,cxr,kc,mxr,_Y,fxr,gxr,bY,hxr,uxr,pxr,z9,_xr,CEe,bxr,vxr,Fxr,Gt,W9,Txr,wEe,Mxr,Exr,Sc,Cxr,AEe,wxr,Axr,vY,Lxr,yxr,xxr,X3,$xr,jr,Q9,kxr,LEe,Sxr,Rxr,hn,Pxr,yEe,Bxr,Ixr,xEe,Nxr,qxr,$Ee,jxr,Dxr,Gxr,re,z3,kEe,Oxr,Vxr,FY,Xxr,zxr,Wxr,W3,SEe,Qxr,Hxr,TY,Uxr,Jxr,Yxr,Q3,REe,Kxr,Zxr,MY,e$r,o$r,r$r,H3,PEe,t$r,a$r,EY,n$r,s$r,l$r,U3,BEe,i$r,d$r,CY,c$r,m$r,f$r,J3,IEe,g$r,h$r,wY,u$r,p$r,_$r,Y3,NEe,b$r,v$r,AY,F$r,T$r,M$r,K3,qEe,E$r,C$r,LY,w$r,A$r,L$r,Z3,jEe,y$r,x$r,yY,$$r,k$r,S$r,e0,DEe,R$r,P$r,xY,B$r,I$r,N$r,o0,GEe,q$r,j$r,$Y,D$r,G$r,O$r,r0,OEe,V$r,X$r,kY,z$r,W$r,Q$r,t0,VEe,H$r,U$r,SY,J$r,Y$r,K$r,a0,XEe,Z$r,ekr,RY,okr,rkr,tkr,n0,zEe,akr,nkr,PY,skr,lkr,ikr,s0,WEe,dkr,ckr,BY,mkr,fkr,gkr,l0,QEe,hkr,ukr,IY,pkr,_kr,bkr,i0,HEe,vkr,Fkr,NY,Tkr,Mkr,Ekr,d0,UEe,Ckr,wkr,qY,Akr,Lkr,ykr,c0,JEe,xkr,$kr,jY,kkr,Skr,Rkr,m0,YEe,Pkr,Bkr,DY,Ikr,Nkr,qkr,f0,KEe,jkr,Dkr,GY,Gkr,Okr,Vkr,g0,ZEe,Xkr,zkr,OY,Wkr,Qkr,Hkr,h0,eCe,Ukr,Jkr,VY,Ykr,Kkr,Zkr,u0,oCe,eSr,oSr,XY,rSr,tSr,aSr,p0,rCe,nSr,sSr,zY,lSr,iSr,dSr,_0,KDe,Rc,b0,tCe,H9,cSr,aCe,mSr,ZDe,fr,U9,fSr,Pc,gSr,WY,hSr,uSr,QY,pSr,_Sr,bSr,J9,vSr,nCe,FSr,TSr,MSr,Ot,Y9,ESr,sCe,CSr,wSr,Bc,ASr,lCe,LSr,ySr,HY,xSr,$Sr,kSr,v0,SSr,Dr,K9,RSr,iCe,PSr,BSr,un,ISr,dCe,NSr,qSr,cCe,jSr,DSr,mCe,GSr,OSr,VSr,xe,F0,fCe,XSr,zSr,UY,WSr,QSr,HSr,T0,gCe,USr,JSr,JY,YSr,KSr,ZSr,M0,hCe,eRr,oRr,YY,rRr,tRr,aRr,E0,uCe,nRr,sRr,KY,lRr,iRr,dRr,C0,pCe,cRr,mRr,ZY,fRr,gRr,hRr,w0,_Ce,uRr,pRr,eK,_Rr,bRr,vRr,A0,bCe,FRr,TRr,oK,MRr,ERr,CRr,L0,vCe,wRr,ARr,rK,LRr,yRr,xRr,y0,FCe,$Rr,kRr,tK,SRr,RRr,PRr,x0,TCe,BRr,IRr,aK,NRr,qRr,jRr,$0,eGe,Ic,k0,MCe,Z9,DRr,ECe,GRr,oGe,gr,ex,ORr,Nc,VRr,nK,XRr,zRr,sK,WRr,QRr,HRr,ox,URr,CCe,JRr,YRr,KRr,Vt,rx,ZRr,wCe,ePr,oPr,qc,rPr,ACe,tPr,aPr,lK,nPr,sPr,lPr,S0,iPr,Gr,tx,dPr,LCe,cPr,mPr,pn,fPr,yCe,gPr,hPr,xCe,uPr,pPr,$Ce,_Pr,bPr,vPr,Ee,R0,kCe,FPr,TPr,iK,MPr,EPr,CPr,P0,SCe,wPr,APr,dK,LPr,yPr,xPr,B0,RCe,$Pr,kPr,cK,SPr,RPr,PPr,I0,PCe,BPr,IPr,mK,NPr,qPr,jPr,N0,BCe,DPr,GPr,fK,OPr,VPr,XPr,q0,ICe,zPr,WPr,gK,QPr,HPr,UPr,j0,NCe,JPr,YPr,hK,KPr,ZPr,eBr,D0,qCe,oBr,rBr,uK,tBr,aBr,nBr,G0,jCe,sBr,lBr,pK,iBr,dBr,cBr,O0,DCe,mBr,fBr,_K,gBr,hBr,uBr,V0,GCe,pBr,_Br,bK,bBr,vBr,FBr,X0,OCe,TBr,MBr,vK,EBr,CBr,wBr,z0,rGe,jc,W0,VCe,ax,ABr,XCe,LBr,tGe,hr,nx,yBr,Dc,xBr,FK,$Br,kBr,TK,SBr,RBr,PBr,sx,BBr,zCe,IBr,NBr,qBr,Xt,lx,jBr,WCe,DBr,GBr,Gc,OBr,QCe,VBr,XBr,MK,zBr,WBr,QBr,Q0,HBr,Or,ix,UBr,HCe,JBr,YBr,_n,KBr,UCe,ZBr,eIr,JCe,oIr,rIr,YCe,tIr,aIr,nIr,$e,H0,KCe,sIr,lIr,EK,iIr,dIr,cIr,U0,ZCe,mIr,fIr,CK,gIr,hIr,uIr,J0,e5e,pIr,_Ir,wK,bIr,vIr,FIr,Y0,o5e,TIr,MIr,AK,EIr,CIr,wIr,K0,r5e,AIr,LIr,LK,yIr,xIr,$Ir,Z0,t5e,kIr,SIr,yK,RIr,PIr,BIr,ew,a5e,IIr,NIr,xK,qIr,jIr,DIr,ow,n5e,GIr,OIr,$K,VIr,XIr,zIr,rw,s5e,WIr,QIr,kK,HIr,UIr,JIr,tw,l5e,YIr,KIr,SK,ZIr,eNr,oNr,aw,aGe,Oc,nw,i5e,dx,rNr,d5e,tNr,nGe,ur,cx,aNr,Vc,nNr,RK,sNr,lNr,PK,iNr,dNr,cNr,mx,mNr,c5e,fNr,gNr,hNr,zt,fx,uNr,m5e,pNr,_Nr,Xc,bNr,f5e,vNr,FNr,BK,TNr,MNr,ENr,sw,CNr,Vr,gx,wNr,g5e,ANr,LNr,bn,yNr,h5e,xNr,$Nr,u5e,kNr,SNr,p5e,RNr,PNr,BNr,Pe,lw,_5e,INr,NNr,IK,qNr,jNr,DNr,iw,b5e,GNr,ONr,NK,VNr,XNr,zNr,dw,v5e,WNr,QNr,qK,HNr,UNr,JNr,cw,F5e,YNr,KNr,jK,ZNr,eqr,oqr,mw,T5e,rqr,tqr,DK,aqr,nqr,sqr,fw,M5e,lqr,iqr,GK,dqr,cqr,mqr,gw,E5e,fqr,gqr,OK,hqr,uqr,pqr,hw,C5e,_qr,bqr,VK,vqr,Fqr,Tqr,uw,w5e,Mqr,Eqr,XK,Cqr,wqr,Aqr,pw,sGe,zc,_w,A5e,hx,Lqr,L5e,yqr,lGe,pr,ux,xqr,Wc,$qr,zK,kqr,Sqr,WK,Rqr,Pqr,Bqr,px,Iqr,y5e,Nqr,qqr,jqr,Wt,_x,Dqr,x5e,Gqr,Oqr,Qc,Vqr,$5e,Xqr,zqr,QK,Wqr,Qqr,Hqr,bw,Uqr,Xr,bx,Jqr,k5e,Yqr,Kqr,vn,Zqr,S5e,ejr,ojr,R5e,rjr,tjr,P5e,ajr,njr,sjr,ke,vw,B5e,ljr,ijr,HK,djr,cjr,mjr,Fw,I5e,fjr,gjr,UK,hjr,ujr,pjr,Tw,N5e,_jr,bjr,JK,vjr,Fjr,Tjr,Mw,q5e,Mjr,Ejr,YK,Cjr,wjr,Ajr,Ew,j5e,Ljr,yjr,KK,xjr,$jr,kjr,Cw,D5e,Sjr,Rjr,ZK,Pjr,Bjr,Ijr,ww,G5e,Njr,qjr,eZ,jjr,Djr,Gjr,Aw,O5e,Ojr,Vjr,oZ,Xjr,zjr,Wjr,Lw,V5e,Qjr,Hjr,rZ,Ujr,Jjr,Yjr,yw,X5e,Kjr,Zjr,tZ,eDr,oDr,rDr,xw,iGe,Hc,$w,z5e,vx,tDr,W5e,aDr,dGe,_r,Fx,nDr,Uc,sDr,aZ,lDr,iDr,nZ,dDr,cDr,mDr,Tx,fDr,Q5e,gDr,hDr,uDr,Qt,Mx,pDr,H5e,_Dr,bDr,Jc,vDr,U5e,FDr,TDr,sZ,MDr,EDr,CDr,kw,wDr,zr,Ex,ADr,J5e,LDr,yDr,Fn,xDr,Y5e,$Dr,kDr,K5e,SDr,RDr,Z5e,PDr,BDr,IDr,Se,Sw,e3e,NDr,qDr,lZ,jDr,DDr,GDr,Rw,o3e,ODr,VDr,iZ,XDr,zDr,WDr,Pw,r3e,QDr,HDr,dZ,UDr,JDr,YDr,Bw,t3e,KDr,ZDr,cZ,eGr,oGr,rGr,Iw,a3e,tGr,aGr,mZ,nGr,sGr,lGr,Nw,n3e,iGr,dGr,fZ,cGr,mGr,fGr,qw,s3e,gGr,hGr,gZ,uGr,pGr,_Gr,jw,l3e,bGr,vGr,hZ,FGr,TGr,MGr,Dw,i3e,EGr,CGr,uZ,wGr,AGr,LGr,Gw,d3e,yGr,xGr,pZ,$Gr,kGr,SGr,Ow,cGe,Yc,Vw,c3e,Cx,RGr,m3e,PGr,mGe,br,wx,BGr,Kc,IGr,_Z,NGr,qGr,bZ,jGr,DGr,GGr,Ax,OGr,f3e,VGr,XGr,zGr,Ht,Lx,WGr,g3e,QGr,HGr,Zc,UGr,h3e,JGr,YGr,vZ,KGr,ZGr,eOr,Xw,oOr,Wr,yx,rOr,u3e,tOr,aOr,Tn,nOr,p3e,sOr,lOr,_3e,iOr,dOr,b3e,cOr,mOr,fOr,Oe,zw,v3e,gOr,hOr,FZ,uOr,pOr,_Or,Ww,F3e,bOr,vOr,TZ,FOr,TOr,MOr,Qw,T3e,EOr,COr,MZ,wOr,AOr,LOr,Hw,M3e,yOr,xOr,EZ,$Or,kOr,SOr,Uw,E3e,ROr,POr,CZ,BOr,IOr,NOr,Jw,C3e,qOr,jOr,wZ,DOr,GOr,OOr,Yw,w3e,VOr,XOr,AZ,zOr,WOr,QOr,Kw,A3e,HOr,UOr,LZ,JOr,YOr,KOr,Zw,fGe,em,eA,L3e,xx,ZOr,y3e,eVr,gGe,vr,$x,oVr,om,rVr,yZ,tVr,aVr,xZ,nVr,sVr,lVr,kx,iVr,x3e,dVr,cVr,mVr,Ut,Sx,fVr,$3e,gVr,hVr,rm,uVr,k3e,pVr,_Vr,$Z,bVr,vVr,FVr,oA,TVr,Qr,Rx,MVr,S3e,EVr,CVr,Mn,wVr,R3e,AVr,LVr,P3e,yVr,xVr,B3e,$Vr,kVr,SVr,Ve,rA,I3e,RVr,PVr,kZ,BVr,IVr,NVr,tA,N3e,qVr,jVr,SZ,DVr,GVr,OVr,aA,q3e,VVr,XVr,RZ,zVr,WVr,QVr,nA,j3e,HVr,UVr,PZ,JVr,YVr,KVr,sA,D3e,ZVr,eXr,BZ,oXr,rXr,tXr,lA,G3e,aXr,nXr,IZ,sXr,lXr,iXr,iA,O3e,dXr,cXr,NZ,mXr,fXr,gXr,dA,V3e,hXr,uXr,qZ,pXr,_Xr,bXr,cA,hGe,tm,mA,X3e,Px,vXr,z3e,FXr,uGe,Fr,Bx,TXr,am,MXr,jZ,EXr,CXr,DZ,wXr,AXr,LXr,Ix,yXr,W3e,xXr,$Xr,kXr,Jt,Nx,SXr,Q3e,RXr,PXr,nm,BXr,H3e,IXr,NXr,GZ,qXr,jXr,DXr,fA,GXr,Hr,qx,OXr,U3e,VXr,XXr,En,zXr,J3e,WXr,QXr,Y3e,HXr,UXr,K3e,JXr,YXr,KXr,Z3e,gA,e0e,ZXr,ezr,OZ,ozr,rzr,tzr,hA,pGe,sm,uA,o0e,jx,azr,r0e,nzr,_Ge,Tr,Dx,szr,lm,lzr,VZ,izr,dzr,XZ,czr,mzr,fzr,Gx,gzr,t0e,hzr,uzr,pzr,Yt,Ox,_zr,a0e,bzr,vzr,im,Fzr,n0e,Tzr,Mzr,zZ,Ezr,Czr,wzr,pA,Azr,Ur,Vx,Lzr,s0e,yzr,xzr,Cn,$zr,l0e,kzr,Szr,i0e,Rzr,Pzr,d0e,Bzr,Izr,Nzr,Xx,_A,c0e,qzr,jzr,WZ,Dzr,Gzr,Ozr,bA,m0e,Vzr,Xzr,QZ,zzr,Wzr,Qzr,vA,bGe,dm,FA,f0e,zx,Hzr,g0e,Uzr,vGe,Mr,Wx,Jzr,cm,Yzr,HZ,Kzr,Zzr,UZ,eWr,oWr,rWr,Qx,tWr,h0e,aWr,nWr,sWr,Kt,Hx,lWr,u0e,iWr,dWr,mm,cWr,p0e,mWr,fWr,JZ,gWr,hWr,uWr,TA,pWr,Jr,Ux,_Wr,_0e,bWr,vWr,wn,FWr,b0e,TWr,MWr,v0e,EWr,CWr,F0e,wWr,AWr,LWr,T0e,MA,M0e,yWr,xWr,YZ,$Wr,kWr,SWr,EA,FGe;return d=new te({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),zL=new te({}),WL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Fm=new RWr({props:{warning:!0,$$slots:{default:[YRt]},$$scope:{ctx:x}}}),QL=new te({}),HL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L591"}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L614"}}),Lg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[KRt]},$$scope:{ctx:x}}}),KL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L737"}}),ZL=new te({}),ey=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L391"}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L405"}}),dh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ZRt]},$$scope:{ctx:x}}}),ay=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L604"}}),ny=new te({}),sy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L206"}}),Vh=new RWr({props:{$$slots:{default:[ePt]},$$scope:{ctx:x}}}),Xh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[oPt]},$$scope:{ctx:x}}}),cy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L333"}}),my=new te({}),fy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L88"}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L102"}}),cu=new RWr({props:{$$slots:{default:[rPt]},$$scope:{ctx:x}}}),mu=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[tPt]},$$scope:{ctx:x}}}),py=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L255"}}),_y=new te({}),by=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L744"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[aPt]},$$scope:{ctx:x}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[nPt]},$$scope:{ctx:x}}}),My=new te({}),Ey=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L751"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[sPt]},$$scope:{ctx:x}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nb=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[lPt]},$$scope:{ctx:x}}}),Ly=new te({}),yy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L766"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[iPt]},$$scope:{ctx:x}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Qb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dPt]},$$scope:{ctx:x}}}),Sy=new te({}),Ry=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L773"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ub=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[cPt]},$$scope:{ctx:x}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mPt]},$$scope:{ctx:x}}}),Ny=new te({}),qy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L780"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[fPt]},$$scope:{ctx:x}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[gPt]},$$scope:{ctx:x}}}),Oy=new te({}),Vy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L789"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[hPt]},$$scope:{ctx:x}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Jv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uPt]},$$scope:{ctx:x}}}),Qy=new te({}),Hy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L823"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Kv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[pPt]},$$scope:{ctx:x}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[_Pt]},$$scope:{ctx:x}}}),Ky=new te({}),Zy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L830"}}),o7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[bPt]},$$scope:{ctx:x}}}),r7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[vPt]},$$scope:{ctx:x}}}),t7=new te({}),a7=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L816"}}),s7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[FPt]},$$scope:{ctx:x}}}),l7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M1=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TPt]},$$scope:{ctx:x}}}),i7=new te({}),d7=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L798"}}),m7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[MPt]},$$scope:{ctx:x}}}),f7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[EPt]},$$scope:{ctx:x}}}),g7=new te({}),h7=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L805"}}),p7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[CPt]},$$scope:{ctx:x}}}),_7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[wPt]},$$scope:{ctx:x}}}),b7=new te({}),v7=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L839"}}),T7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[APt]},$$scope:{ctx:x}}}),M7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LPt]},$$scope:{ctx:x}}}),E7=new te({}),C7=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L878"}}),A7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[yPt]},$$scope:{ctx:x}}}),L7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xPt]},$$scope:{ctx:x}}}),y7=new te({}),x7=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L885"}}),k7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[$Pt]},$$scope:{ctx:x}}}),S7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),YT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[kPt]},$$scope:{ctx:x}}}),R7=new te({}),P7=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L908"}}),I7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[SPt]},$$scope:{ctx:x}}}),N7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[RPt]},$$scope:{ctx:x}}}),q7=new te({}),j7=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L892"}}),G7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[PPt]},$$scope:{ctx:x}}}),O7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[BPt]},$$scope:{ctx:x}}}),V7=new te({}),X7=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L899"}}),W7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[IPt]},$$scope:{ctx:x}}}),Q7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[NPt]},$$scope:{ctx:x}}}),U7=new te({}),J7=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L917"}}),K7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[qPt]},$$scope:{ctx:x}}}),Z7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[jPt]},$$scope:{ctx:x}}}),e8=new te({}),o8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L924"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[DPt]},$$scope:{ctx:x}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),OM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[GPt]},$$scope:{ctx:x}}}),n8=new te({}),s8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L871"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),XM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[OPt]},$$scope:{ctx:x}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[VPt]},$$scope:{ctx:x}}}),m8=new te({}),f8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L846"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[XPt]},$$scope:{ctx:x}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[zPt]},$$scope:{ctx:x}}}),p8=new te({}),_8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L853"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[WPt]},$$scope:{ctx:x}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l4=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[QPt]},$$scope:{ctx:x}}}),T8=new te({}),M8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L862"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d4=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[HPt]},$$scope:{ctx:x}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f4=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[UPt]},$$scope:{ctx:x}}}),A8=new te({}),L8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),x8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h4=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[JPt]},$$scope:{ctx:x}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[YPt]},$$scope:{ctx:x}}}),k8=new te({}),S8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[KPt]},$$scope:{ctx:x}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ZPt]},$$scope:{ctx:x}}}),I8=new te({}),N8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),j8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[eBt]},$$scope:{ctx:x}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[oBt]},$$scope:{ctx:x}}}),G8=new te({}),O8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),X8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[rBt]},$$scope:{ctx:x}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[tBt]},$$scope:{ctx:x}}}),W8=new te({}),Q8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),U8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[aBt]},$$scope:{ctx:x}}}),J8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[nBt]},$$scope:{ctx:x}}}),Y8=new te({}),K8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),e9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[sBt]},$$scope:{ctx:x}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[lBt]},$$scope:{ctx:x}}}),r9=new te({}),t9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[iBt]},$$scope:{ctx:x}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[dBt]},$$scope:{ctx:x}}}),l9=new te({}),i9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[cBt]},$$scope:{ctx:x}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mBt]},$$scope:{ctx:x}}}),f9=new te({}),g9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fBt]},$$scope:{ctx:x}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[gBt]},$$scope:{ctx:x}}}),b9=new te({}),v9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),T9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[hBt]},$$scope:{ctx:x}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[uBt]},$$scope:{ctx:x}}}),E9=new te({}),C9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),A9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[pBt]},$$scope:{ctx:x}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[_Bt]},$$scope:{ctx:x}}}),y9=new te({}),x9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),k9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[bBt]},$$scope:{ctx:x}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[vBt]},$$scope:{ctx:x}}}),R9=new te({}),P9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),I9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[FBt]},$$scope:{ctx:x}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[TBt]},$$scope:{ctx:x}}}),q9=new te({}),j9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),G9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[MBt]},$$scope:{ctx:x}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[EBt]},$$scope:{ctx:x}}}),V9=new te({}),X9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),W9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[CBt]},$$scope:{ctx:x}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[wBt]},$$scope:{ctx:x}}}),H9=new te({}),U9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[ABt]},$$scope:{ctx:x}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[LBt]},$$scope:{ctx:x}}}),Z9=new te({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[yBt]},$$scope:{ctx:x}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[xBt]},$$scope:{ctx:x}}}),ax=new te({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[$Bt]},$$scope:{ctx:x}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[kBt]},$$scope:{ctx:x}}}),dx=new te({}),cx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[SBt]},$$scope:{ctx:x}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[RBt]},$$scope:{ctx:x}}}),hx=new te({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[PBt]},$$scope:{ctx:x}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[BBt]},$$scope:{ctx:x}}}),vx=new te({}),Fx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[IBt]},$$scope:{ctx:x}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[NBt]},$$scope:{ctx:x}}}),Cx=new te({}),wx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Xw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[qBt]},$$scope:{ctx:x}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Zw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[jBt]},$$scope:{ctx:x}}}),xx=new te({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[DBt]},$$scope:{ctx:x}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[GBt]},$$scope:{ctx:x}}}),Px=new te({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[OBt]},$$scope:{ctx:x}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[VBt]},$$scope:{ctx:x}}}),jx=new te({}),Dx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[XBt]},$$scope:{ctx:x}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[zBt]},$$scope:{ctx:x}}}),zx=new te({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[WBt]},$$scope:{ctx:x}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[QBt]},$$scope:{ctx:x}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),fi=o("Auto Classes"),um=l(),rt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),GL=o("from_pretrained()"),pm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ge=l(),We=a("p"),ui=o("Instantiating one of "),Ln=a("a"),OL=o("AutoConfig"),yn=o(", "),xn=a("a"),VL=o("AutoModel"),pi=o(`, and
`),$n=a("a"),XL=o("AutoTokenizer"),_i=o(" will directly create a class of the relevant architecture. For instance"),_m=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),ck=o("will create a model that is an instance of "),bi=a("a"),mk=o("BertModel"),fk=o("."),Eo=l(),wa=a("p"),gk=o("There is one class of "),bm=a("code"),hk=o("AutoModel"),yVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),_je=l(),vi=a("h2"),vm=a("a"),Xoe=a("span"),F(zL.$$.fragment),xVe=l(),zoe=a("span"),$Ve=o("Extending the Auto Classes"),bje=l(),kn=a("p"),kVe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Woe=a("code"),SVe=o("NewModel"),RVe=o(", make sure you have a "),Qoe=a("code"),PVe=o("NewModelConfig"),BVe=o(` then you can add those to the auto
classes like this:`),vje=l(),F(WL.$$.fragment),Fje=l(),uk=a("p"),IVe=o("You will then be able to use the auto classes like you would usually do!"),Tje=l(),F(Fm.$$.fragment),Mje=l(),Fi=a("h2"),Tm=a("a"),Hoe=a("span"),F(QL.$$.fragment),NVe=l(),Uoe=a("span"),qVe=o("AutoConfig"),Eje=l(),Co=a("div"),F(HL.$$.fragment),jVe=l(),UL=a("p"),DVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),pk=a("a"),GVe=o("from_pretrained()"),OVe=o(" class method."),VVe=l(),JL=a("p"),XVe=o("This class cannot be instantiated directly using "),Joe=a("code"),zVe=o("__init__()"),WVe=o(" (throws an error)."),QVe=l(),Er=a("div"),F(YL.$$.fragment),HVe=l(),Yoe=a("p"),UVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),JVe=l(),Ti=a("p"),YVe=o("The configuration class to instantiate is selected based on the "),Koe=a("code"),KVe=o("model_type"),ZVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zoe=a("code"),eXe=o("pretrained_model_name_or_path"),oXe=o(":"),rXe=l(),A=a("ul"),Mm=a("li"),ere=a("strong"),tXe=o("albert"),aXe=o(" \u2014 "),_k=a("a"),nXe=o("AlbertConfig"),sXe=o(" (ALBERT model)"),lXe=l(),Em=a("li"),ore=a("strong"),iXe=o("bart"),dXe=o(" \u2014 "),bk=a("a"),cXe=o("BartConfig"),mXe=o(" (BART model)"),fXe=l(),Cm=a("li"),rre=a("strong"),gXe=o("beit"),hXe=o(" \u2014 "),vk=a("a"),uXe=o("BeitConfig"),pXe=o(" (BEiT model)"),_Xe=l(),wm=a("li"),tre=a("strong"),bXe=o("bert"),vXe=o(" \u2014 "),Fk=a("a"),FXe=o("BertConfig"),TXe=o(" (BERT model)"),MXe=l(),Am=a("li"),are=a("strong"),EXe=o("bert-generation"),CXe=o(" \u2014 "),Tk=a("a"),wXe=o("BertGenerationConfig"),AXe=o(" (Bert Generation model)"),LXe=l(),Lm=a("li"),nre=a("strong"),yXe=o("big_bird"),xXe=o(" \u2014 "),Mk=a("a"),$Xe=o("BigBirdConfig"),kXe=o(" (BigBird model)"),SXe=l(),ym=a("li"),sre=a("strong"),RXe=o("bigbird_pegasus"),PXe=o(" \u2014 "),Ek=a("a"),BXe=o("BigBirdPegasusConfig"),IXe=o(" (BigBird-Pegasus model)"),NXe=l(),xm=a("li"),lre=a("strong"),qXe=o("blenderbot"),jXe=o(" \u2014 "),Ck=a("a"),DXe=o("BlenderbotConfig"),GXe=o(" (Blenderbot model)"),OXe=l(),$m=a("li"),ire=a("strong"),VXe=o("blenderbot-small"),XXe=o(" \u2014 "),wk=a("a"),zXe=o("BlenderbotSmallConfig"),WXe=o(" (BlenderbotSmall model)"),QXe=l(),km=a("li"),dre=a("strong"),HXe=o("bloom"),UXe=o(" \u2014 "),Ak=a("a"),JXe=o("BloomConfig"),YXe=o(" (BLOOM model)"),KXe=l(),Sm=a("li"),cre=a("strong"),ZXe=o("camembert"),eze=o(" \u2014 "),Lk=a("a"),oze=o("CamembertConfig"),rze=o(" (CamemBERT model)"),tze=l(),Rm=a("li"),mre=a("strong"),aze=o("canine"),nze=o(" \u2014 "),yk=a("a"),sze=o("CanineConfig"),lze=o(" (CANINE model)"),ize=l(),Pm=a("li"),fre=a("strong"),dze=o("clip"),cze=o(" \u2014 "),xk=a("a"),mze=o("CLIPConfig"),fze=o(" (CLIP model)"),gze=l(),Bm=a("li"),gre=a("strong"),hze=o("convbert"),uze=o(" \u2014 "),$k=a("a"),pze=o("ConvBertConfig"),_ze=o(" (ConvBERT model)"),bze=l(),Im=a("li"),hre=a("strong"),vze=o("convnext"),Fze=o(" \u2014 "),kk=a("a"),Tze=o("ConvNextConfig"),Mze=o(" (ConvNeXT model)"),Eze=l(),Nm=a("li"),ure=a("strong"),Cze=o("ctrl"),wze=o(" \u2014 "),Sk=a("a"),Aze=o("CTRLConfig"),Lze=o(" (CTRL model)"),yze=l(),qm=a("li"),pre=a("strong"),xze=o("cvt"),$ze=o(" \u2014 "),Rk=a("a"),kze=o("CvtConfig"),Sze=o(" (CvT model)"),Rze=l(),jm=a("li"),_re=a("strong"),Pze=o("data2vec-audio"),Bze=o(" \u2014 "),Pk=a("a"),Ize=o("Data2VecAudioConfig"),Nze=o(" (Data2VecAudio model)"),qze=l(),Dm=a("li"),bre=a("strong"),jze=o("data2vec-text"),Dze=o(" \u2014 "),Bk=a("a"),Gze=o("Data2VecTextConfig"),Oze=o(" (Data2VecText model)"),Vze=l(),Gm=a("li"),vre=a("strong"),Xze=o("data2vec-vision"),zze=o(" \u2014 "),Ik=a("a"),Wze=o("Data2VecVisionConfig"),Qze=o(" (Data2VecVision model)"),Hze=l(),Om=a("li"),Fre=a("strong"),Uze=o("deberta"),Jze=o(" \u2014 "),Nk=a("a"),Yze=o("DebertaConfig"),Kze=o(" (DeBERTa model)"),Zze=l(),Vm=a("li"),Tre=a("strong"),eWe=o("deberta-v2"),oWe=o(" \u2014 "),qk=a("a"),rWe=o("DebertaV2Config"),tWe=o(" (DeBERTa-v2 model)"),aWe=l(),Xm=a("li"),Mre=a("strong"),nWe=o("decision_transformer"),sWe=o(" \u2014 "),jk=a("a"),lWe=o("DecisionTransformerConfig"),iWe=o(" (Decision Transformer model)"),dWe=l(),zm=a("li"),Ere=a("strong"),cWe=o("deit"),mWe=o(" \u2014 "),Dk=a("a"),fWe=o("DeiTConfig"),gWe=o(" (DeiT model)"),hWe=l(),Wm=a("li"),Cre=a("strong"),uWe=o("detr"),pWe=o(" \u2014 "),Gk=a("a"),_We=o("DetrConfig"),bWe=o(" (DETR model)"),vWe=l(),Qm=a("li"),wre=a("strong"),FWe=o("distilbert"),TWe=o(" \u2014 "),Ok=a("a"),MWe=o("DistilBertConfig"),EWe=o(" (DistilBERT model)"),CWe=l(),Hm=a("li"),Are=a("strong"),wWe=o("dpr"),AWe=o(" \u2014 "),Vk=a("a"),LWe=o("DPRConfig"),yWe=o(" (DPR model)"),xWe=l(),Um=a("li"),Lre=a("strong"),$We=o("dpt"),kWe=o(" \u2014 "),Xk=a("a"),SWe=o("DPTConfig"),RWe=o(" (DPT model)"),PWe=l(),Jm=a("li"),yre=a("strong"),BWe=o("electra"),IWe=o(" \u2014 "),zk=a("a"),NWe=o("ElectraConfig"),qWe=o(" (ELECTRA model)"),jWe=l(),Ym=a("li"),xre=a("strong"),DWe=o("encoder-decoder"),GWe=o(" \u2014 "),Wk=a("a"),OWe=o("EncoderDecoderConfig"),VWe=o(" (Encoder decoder model)"),XWe=l(),Km=a("li"),$re=a("strong"),zWe=o("flaubert"),WWe=o(" \u2014 "),Qk=a("a"),QWe=o("FlaubertConfig"),HWe=o(" (FlauBERT model)"),UWe=l(),Zm=a("li"),kre=a("strong"),JWe=o("flava"),YWe=o(" \u2014 "),Hk=a("a"),KWe=o("FlavaConfig"),ZWe=o(" (FLAVA model)"),eQe=l(),ef=a("li"),Sre=a("strong"),oQe=o("fnet"),rQe=o(" \u2014 "),Uk=a("a"),tQe=o("FNetConfig"),aQe=o(" (FNet model)"),nQe=l(),of=a("li"),Rre=a("strong"),sQe=o("fsmt"),lQe=o(" \u2014 "),Jk=a("a"),iQe=o("FSMTConfig"),dQe=o(" (FairSeq Machine-Translation model)"),cQe=l(),rf=a("li"),Pre=a("strong"),mQe=o("funnel"),fQe=o(" \u2014 "),Yk=a("a"),gQe=o("FunnelConfig"),hQe=o(" (Funnel Transformer model)"),uQe=l(),tf=a("li"),Bre=a("strong"),pQe=o("glpn"),_Qe=o(" \u2014 "),Kk=a("a"),bQe=o("GLPNConfig"),vQe=o(" (GLPN model)"),FQe=l(),af=a("li"),Ire=a("strong"),TQe=o("gpt2"),MQe=o(" \u2014 "),Zk=a("a"),EQe=o("GPT2Config"),CQe=o(" (OpenAI GPT-2 model)"),wQe=l(),nf=a("li"),Nre=a("strong"),AQe=o("gpt_neo"),LQe=o(" \u2014 "),eS=a("a"),yQe=o("GPTNeoConfig"),xQe=o(" (GPT Neo model)"),$Qe=l(),sf=a("li"),qre=a("strong"),kQe=o("gpt_neox"),SQe=o(" \u2014 "),oS=a("a"),RQe=o("GPTNeoXConfig"),PQe=o(" (GPT NeoX model)"),BQe=l(),lf=a("li"),jre=a("strong"),IQe=o("gptj"),NQe=o(" \u2014 "),rS=a("a"),qQe=o("GPTJConfig"),jQe=o(" (GPT-J model)"),DQe=l(),df=a("li"),Dre=a("strong"),GQe=o("hubert"),OQe=o(" \u2014 "),tS=a("a"),VQe=o("HubertConfig"),XQe=o(" (Hubert model)"),zQe=l(),cf=a("li"),Gre=a("strong"),WQe=o("ibert"),QQe=o(" \u2014 "),aS=a("a"),HQe=o("IBertConfig"),UQe=o(" (I-BERT model)"),JQe=l(),mf=a("li"),Ore=a("strong"),YQe=o("imagegpt"),KQe=o(" \u2014 "),nS=a("a"),ZQe=o("ImageGPTConfig"),eHe=o(" (ImageGPT model)"),oHe=l(),ff=a("li"),Vre=a("strong"),rHe=o("layoutlm"),tHe=o(" \u2014 "),sS=a("a"),aHe=o("LayoutLMConfig"),nHe=o(" (LayoutLM model)"),sHe=l(),gf=a("li"),Xre=a("strong"),lHe=o("layoutlmv2"),iHe=o(" \u2014 "),lS=a("a"),dHe=o("LayoutLMv2Config"),cHe=o(" (LayoutLMv2 model)"),mHe=l(),hf=a("li"),zre=a("strong"),fHe=o("layoutlmv3"),gHe=o(" \u2014 "),iS=a("a"),hHe=o("LayoutLMv3Config"),uHe=o(" (LayoutLMv3 model)"),pHe=l(),uf=a("li"),Wre=a("strong"),_He=o("led"),bHe=o(" \u2014 "),dS=a("a"),vHe=o("LEDConfig"),FHe=o(" (LED model)"),THe=l(),pf=a("li"),Qre=a("strong"),MHe=o("levit"),EHe=o(" \u2014 "),cS=a("a"),CHe=o("LevitConfig"),wHe=o(" (LeViT model)"),AHe=l(),_f=a("li"),Hre=a("strong"),LHe=o("longformer"),yHe=o(" \u2014 "),mS=a("a"),xHe=o("LongformerConfig"),$He=o(" (Longformer model)"),kHe=l(),bf=a("li"),Ure=a("strong"),SHe=o("luke"),RHe=o(" \u2014 "),fS=a("a"),PHe=o("LukeConfig"),BHe=o(" (LUKE model)"),IHe=l(),vf=a("li"),Jre=a("strong"),NHe=o("lxmert"),qHe=o(" \u2014 "),gS=a("a"),jHe=o("LxmertConfig"),DHe=o(" (LXMERT model)"),GHe=l(),Ff=a("li"),Yre=a("strong"),OHe=o("m2m_100"),VHe=o(" \u2014 "),hS=a("a"),XHe=o("M2M100Config"),zHe=o(" (M2M100 model)"),WHe=l(),Tf=a("li"),Kre=a("strong"),QHe=o("marian"),HHe=o(" \u2014 "),uS=a("a"),UHe=o("MarianConfig"),JHe=o(" (Marian model)"),YHe=l(),Mf=a("li"),Zre=a("strong"),KHe=o("maskformer"),ZHe=o(" \u2014 "),pS=a("a"),eUe=o("MaskFormerConfig"),oUe=o(" (MaskFormer model)"),rUe=l(),Ef=a("li"),ete=a("strong"),tUe=o("mbart"),aUe=o(" \u2014 "),_S=a("a"),nUe=o("MBartConfig"),sUe=o(" (mBART model)"),lUe=l(),Cf=a("li"),ote=a("strong"),iUe=o("mctct"),dUe=o(" \u2014 "),bS=a("a"),cUe=o("MCTCTConfig"),mUe=o(" (M-CTC-T model)"),fUe=l(),wf=a("li"),rte=a("strong"),gUe=o("megatron-bert"),hUe=o(" \u2014 "),vS=a("a"),uUe=o("MegatronBertConfig"),pUe=o(" (Megatron-BERT model)"),_Ue=l(),Af=a("li"),tte=a("strong"),bUe=o("mobilebert"),vUe=o(" \u2014 "),FS=a("a"),FUe=o("MobileBertConfig"),TUe=o(" (MobileBERT model)"),MUe=l(),Lf=a("li"),ate=a("strong"),EUe=o("mpnet"),CUe=o(" \u2014 "),TS=a("a"),wUe=o("MPNetConfig"),AUe=o(" (MPNet model)"),LUe=l(),yf=a("li"),nte=a("strong"),yUe=o("mt5"),xUe=o(" \u2014 "),MS=a("a"),$Ue=o("MT5Config"),kUe=o(" (MT5 model)"),SUe=l(),xf=a("li"),ste=a("strong"),RUe=o("nystromformer"),PUe=o(" \u2014 "),ES=a("a"),BUe=o("NystromformerConfig"),IUe=o(" (Nystr\xF6mformer model)"),NUe=l(),$f=a("li"),lte=a("strong"),qUe=o("openai-gpt"),jUe=o(" \u2014 "),CS=a("a"),DUe=o("OpenAIGPTConfig"),GUe=o(" (OpenAI GPT model)"),OUe=l(),kf=a("li"),ite=a("strong"),VUe=o("opt"),XUe=o(" \u2014 "),wS=a("a"),zUe=o("OPTConfig"),WUe=o(" (OPT model)"),QUe=l(),Sf=a("li"),dte=a("strong"),HUe=o("pegasus"),UUe=o(" \u2014 "),AS=a("a"),JUe=o("PegasusConfig"),YUe=o(" (Pegasus model)"),KUe=l(),Rf=a("li"),cte=a("strong"),ZUe=o("perceiver"),eJe=o(" \u2014 "),LS=a("a"),oJe=o("PerceiverConfig"),rJe=o(" (Perceiver model)"),tJe=l(),Pf=a("li"),mte=a("strong"),aJe=o("plbart"),nJe=o(" \u2014 "),yS=a("a"),sJe=o("PLBartConfig"),lJe=o(" (PLBart model)"),iJe=l(),Bf=a("li"),fte=a("strong"),dJe=o("poolformer"),cJe=o(" \u2014 "),xS=a("a"),mJe=o("PoolFormerConfig"),fJe=o(" (PoolFormer model)"),gJe=l(),If=a("li"),gte=a("strong"),hJe=o("prophetnet"),uJe=o(" \u2014 "),$S=a("a"),pJe=o("ProphetNetConfig"),_Je=o(" (ProphetNet model)"),bJe=l(),Nf=a("li"),hte=a("strong"),vJe=o("qdqbert"),FJe=o(" \u2014 "),kS=a("a"),TJe=o("QDQBertConfig"),MJe=o(" (QDQBert model)"),EJe=l(),qf=a("li"),ute=a("strong"),CJe=o("rag"),wJe=o(" \u2014 "),SS=a("a"),AJe=o("RagConfig"),LJe=o(" (RAG model)"),yJe=l(),jf=a("li"),pte=a("strong"),xJe=o("realm"),$Je=o(" \u2014 "),RS=a("a"),kJe=o("RealmConfig"),SJe=o(" (REALM model)"),RJe=l(),Df=a("li"),_te=a("strong"),PJe=o("reformer"),BJe=o(" \u2014 "),PS=a("a"),IJe=o("ReformerConfig"),NJe=o(" (Reformer model)"),qJe=l(),Gf=a("li"),bte=a("strong"),jJe=o("regnet"),DJe=o(" \u2014 "),BS=a("a"),GJe=o("RegNetConfig"),OJe=o(" (RegNet model)"),VJe=l(),Of=a("li"),vte=a("strong"),XJe=o("rembert"),zJe=o(" \u2014 "),IS=a("a"),WJe=o("RemBertConfig"),QJe=o(" (RemBERT model)"),HJe=l(),Vf=a("li"),Fte=a("strong"),UJe=o("resnet"),JJe=o(" \u2014 "),NS=a("a"),YJe=o("ResNetConfig"),KJe=o(" (ResNet model)"),ZJe=l(),Xf=a("li"),Tte=a("strong"),eYe=o("retribert"),oYe=o(" \u2014 "),qS=a("a"),rYe=o("RetriBertConfig"),tYe=o(" (RetriBERT model)"),aYe=l(),zf=a("li"),Mte=a("strong"),nYe=o("roberta"),sYe=o(" \u2014 "),jS=a("a"),lYe=o("RobertaConfig"),iYe=o(" (RoBERTa model)"),dYe=l(),Wf=a("li"),Ete=a("strong"),cYe=o("roformer"),mYe=o(" \u2014 "),DS=a("a"),fYe=o("RoFormerConfig"),gYe=o(" (RoFormer model)"),hYe=l(),Qf=a("li"),Cte=a("strong"),uYe=o("segformer"),pYe=o(" \u2014 "),GS=a("a"),_Ye=o("SegformerConfig"),bYe=o(" (SegFormer model)"),vYe=l(),Hf=a("li"),wte=a("strong"),FYe=o("sew"),TYe=o(" \u2014 "),OS=a("a"),MYe=o("SEWConfig"),EYe=o(" (SEW model)"),CYe=l(),Uf=a("li"),Ate=a("strong"),wYe=o("sew-d"),AYe=o(" \u2014 "),VS=a("a"),LYe=o("SEWDConfig"),yYe=o(" (SEW-D model)"),xYe=l(),Jf=a("li"),Lte=a("strong"),$Ye=o("speech-encoder-decoder"),kYe=o(" \u2014 "),XS=a("a"),SYe=o("SpeechEncoderDecoderConfig"),RYe=o(" (Speech Encoder decoder model)"),PYe=l(),Yf=a("li"),yte=a("strong"),BYe=o("speech_to_text"),IYe=o(" \u2014 "),zS=a("a"),NYe=o("Speech2TextConfig"),qYe=o(" (Speech2Text model)"),jYe=l(),Kf=a("li"),xte=a("strong"),DYe=o("speech_to_text_2"),GYe=o(" \u2014 "),WS=a("a"),OYe=o("Speech2Text2Config"),VYe=o(" (Speech2Text2 model)"),XYe=l(),Zf=a("li"),$te=a("strong"),zYe=o("splinter"),WYe=o(" \u2014 "),QS=a("a"),QYe=o("SplinterConfig"),HYe=o(" (Splinter model)"),UYe=l(),eg=a("li"),kte=a("strong"),JYe=o("squeezebert"),YYe=o(" \u2014 "),HS=a("a"),KYe=o("SqueezeBertConfig"),ZYe=o(" (SqueezeBERT model)"),eKe=l(),og=a("li"),Ste=a("strong"),oKe=o("swin"),rKe=o(" \u2014 "),US=a("a"),tKe=o("SwinConfig"),aKe=o(" (Swin Transformer model)"),nKe=l(),rg=a("li"),Rte=a("strong"),sKe=o("t5"),lKe=o(" \u2014 "),JS=a("a"),iKe=o("T5Config"),dKe=o(" (T5 model)"),cKe=l(),tg=a("li"),Pte=a("strong"),mKe=o("tapas"),fKe=o(" \u2014 "),YS=a("a"),gKe=o("TapasConfig"),hKe=o(" (TAPAS model)"),uKe=l(),ag=a("li"),Bte=a("strong"),pKe=o("trajectory_transformer"),_Ke=o(" \u2014 "),KS=a("a"),bKe=o("TrajectoryTransformerConfig"),vKe=o(" (Trajectory Transformer model)"),FKe=l(),ng=a("li"),Ite=a("strong"),TKe=o("transfo-xl"),MKe=o(" \u2014 "),ZS=a("a"),EKe=o("TransfoXLConfig"),CKe=o(" (Transformer-XL model)"),wKe=l(),sg=a("li"),Nte=a("strong"),AKe=o("trocr"),LKe=o(" \u2014 "),eR=a("a"),yKe=o("TrOCRConfig"),xKe=o(" (TrOCR model)"),$Ke=l(),lg=a("li"),qte=a("strong"),kKe=o("unispeech"),SKe=o(" \u2014 "),oR=a("a"),RKe=o("UniSpeechConfig"),PKe=o(" (UniSpeech model)"),BKe=l(),ig=a("li"),jte=a("strong"),IKe=o("unispeech-sat"),NKe=o(" \u2014 "),rR=a("a"),qKe=o("UniSpeechSatConfig"),jKe=o(" (UniSpeechSat model)"),DKe=l(),dg=a("li"),Dte=a("strong"),GKe=o("van"),OKe=o(" \u2014 "),tR=a("a"),VKe=o("VanConfig"),XKe=o(" (VAN model)"),zKe=l(),cg=a("li"),Gte=a("strong"),WKe=o("vilt"),QKe=o(" \u2014 "),aR=a("a"),HKe=o("ViltConfig"),UKe=o(" (ViLT model)"),JKe=l(),mg=a("li"),Ote=a("strong"),YKe=o("vision-encoder-decoder"),KKe=o(" \u2014 "),nR=a("a"),ZKe=o("VisionEncoderDecoderConfig"),eZe=o(" (Vision Encoder decoder model)"),oZe=l(),fg=a("li"),Vte=a("strong"),rZe=o("vision-text-dual-encoder"),tZe=o(" \u2014 "),sR=a("a"),aZe=o("VisionTextDualEncoderConfig"),nZe=o(" (VisionTextDualEncoder model)"),sZe=l(),gg=a("li"),Xte=a("strong"),lZe=o("visual_bert"),iZe=o(" \u2014 "),lR=a("a"),dZe=o("VisualBertConfig"),cZe=o(" (VisualBERT model)"),mZe=l(),hg=a("li"),zte=a("strong"),fZe=o("vit"),gZe=o(" \u2014 "),iR=a("a"),hZe=o("ViTConfig"),uZe=o(" (ViT model)"),pZe=l(),ug=a("li"),Wte=a("strong"),_Ze=o("vit_mae"),bZe=o(" \u2014 "),dR=a("a"),vZe=o("ViTMAEConfig"),FZe=o(" (ViTMAE model)"),TZe=l(),pg=a("li"),Qte=a("strong"),MZe=o("wav2vec2"),EZe=o(" \u2014 "),cR=a("a"),CZe=o("Wav2Vec2Config"),wZe=o(" (Wav2Vec2 model)"),AZe=l(),_g=a("li"),Hte=a("strong"),LZe=o("wav2vec2-conformer"),yZe=o(" \u2014 "),mR=a("a"),xZe=o("Wav2Vec2ConformerConfig"),$Ze=o(" (Wav2Vec2-Conformer model)"),kZe=l(),bg=a("li"),Ute=a("strong"),SZe=o("wavlm"),RZe=o(" \u2014 "),fR=a("a"),PZe=o("WavLMConfig"),BZe=o(" (WavLM model)"),IZe=l(),vg=a("li"),Jte=a("strong"),NZe=o("xglm"),qZe=o(" \u2014 "),gR=a("a"),jZe=o("XGLMConfig"),DZe=o(" (XGLM model)"),GZe=l(),Fg=a("li"),Yte=a("strong"),OZe=o("xlm"),VZe=o(" \u2014 "),hR=a("a"),XZe=o("XLMConfig"),zZe=o(" (XLM model)"),WZe=l(),Tg=a("li"),Kte=a("strong"),QZe=o("xlm-prophetnet"),HZe=o(" \u2014 "),uR=a("a"),UZe=o("XLMProphetNetConfig"),JZe=o(" (XLM-ProphetNet model)"),YZe=l(),Mg=a("li"),Zte=a("strong"),KZe=o("xlm-roberta"),ZZe=o(" \u2014 "),pR=a("a"),eeo=o("XLMRobertaConfig"),oeo=o(" (XLM-RoBERTa model)"),reo=l(),Eg=a("li"),eae=a("strong"),teo=o("xlm-roberta-xl"),aeo=o(" \u2014 "),_R=a("a"),neo=o("XLMRobertaXLConfig"),seo=o(" (XLM-RoBERTa-XL model)"),leo=l(),Cg=a("li"),oae=a("strong"),ieo=o("xlnet"),deo=o(" \u2014 "),bR=a("a"),ceo=o("XLNetConfig"),meo=o(" (XLNet model)"),feo=l(),wg=a("li"),rae=a("strong"),geo=o("yolos"),heo=o(" \u2014 "),vR=a("a"),ueo=o("YolosConfig"),peo=o(" (YOLOS model)"),_eo=l(),Ag=a("li"),tae=a("strong"),beo=o("yoso"),veo=o(" \u2014 "),FR=a("a"),Feo=o("YosoConfig"),Teo=o(" (YOSO model)"),Meo=l(),F(Lg.$$.fragment),Eeo=l(),yg=a("div"),F(KL.$$.fragment),Ceo=l(),aae=a("p"),weo=o("Register a new configuration for this class."),Cje=l(),Mi=a("h2"),xg=a("a"),nae=a("span"),F(ZL.$$.fragment),Aeo=l(),sae=a("span"),Leo=o("AutoTokenizer"),wje=l(),wo=a("div"),F(ey.$$.fragment),yeo=l(),oy=a("p"),xeo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),TR=a("a"),$eo=o("AutoTokenizer.from_pretrained()"),keo=o(" class method."),Seo=l(),ry=a("p"),Reo=o("This class cannot be instantiated directly using "),lae=a("code"),Peo=o("__init__()"),Beo=o(" (throws an error)."),Ieo=l(),Cr=a("div"),F(ty.$$.fragment),Neo=l(),iae=a("p"),qeo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),jeo=l(),Aa=a("p"),Deo=o("The tokenizer class to instantiate is selected based on the "),dae=a("code"),Geo=o("model_type"),Oeo=o(` property of the config object (either
passed as an argument or loaded from `),cae=a("code"),Veo=o("pretrained_model_name_or_path"),Xeo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mae=a("code"),zeo=o("pretrained_model_name_or_path"),Weo=o(":"),Qeo=l(),k=a("ul"),Sn=a("li"),fae=a("strong"),Heo=o("albert"),Ueo=o(" \u2014 "),MR=a("a"),Jeo=o("AlbertTokenizer"),Yeo=o(" or "),ER=a("a"),Keo=o("AlbertTokenizerFast"),Zeo=o(" (ALBERT model)"),eoo=l(),Rn=a("li"),gae=a("strong"),ooo=o("bart"),roo=o(" \u2014 "),CR=a("a"),too=o("BartTokenizer"),aoo=o(" or "),wR=a("a"),noo=o("BartTokenizerFast"),soo=o(" (BART model)"),loo=l(),Pn=a("li"),hae=a("strong"),ioo=o("barthez"),doo=o(" \u2014 "),AR=a("a"),coo=o("BarthezTokenizer"),moo=o(" or "),LR=a("a"),foo=o("BarthezTokenizerFast"),goo=o(" (BARThez model)"),hoo=l(),$g=a("li"),uae=a("strong"),uoo=o("bartpho"),poo=o(" \u2014 "),yR=a("a"),_oo=o("BartphoTokenizer"),boo=o(" (BARTpho model)"),voo=l(),Bn=a("li"),pae=a("strong"),Foo=o("bert"),Too=o(" \u2014 "),xR=a("a"),Moo=o("BertTokenizer"),Eoo=o(" or "),$R=a("a"),Coo=o("BertTokenizerFast"),woo=o(" (BERT model)"),Aoo=l(),kg=a("li"),_ae=a("strong"),Loo=o("bert-generation"),yoo=o(" \u2014 "),kR=a("a"),xoo=o("BertGenerationTokenizer"),$oo=o(" (Bert Generation model)"),koo=l(),Sg=a("li"),bae=a("strong"),Soo=o("bert-japanese"),Roo=o(" \u2014 "),SR=a("a"),Poo=o("BertJapaneseTokenizer"),Boo=o(" (BertJapanese model)"),Ioo=l(),Rg=a("li"),vae=a("strong"),Noo=o("bertweet"),qoo=o(" \u2014 "),RR=a("a"),joo=o("BertweetTokenizer"),Doo=o(" (BERTweet model)"),Goo=l(),In=a("li"),Fae=a("strong"),Ooo=o("big_bird"),Voo=o(" \u2014 "),PR=a("a"),Xoo=o("BigBirdTokenizer"),zoo=o(" or "),BR=a("a"),Woo=o("BigBirdTokenizerFast"),Qoo=o(" (BigBird model)"),Hoo=l(),Nn=a("li"),Tae=a("strong"),Uoo=o("bigbird_pegasus"),Joo=o(" \u2014 "),IR=a("a"),Yoo=o("PegasusTokenizer"),Koo=o(" or "),NR=a("a"),Zoo=o("PegasusTokenizerFast"),ero=o(" (BigBird-Pegasus model)"),oro=l(),qn=a("li"),Mae=a("strong"),rro=o("blenderbot"),tro=o(" \u2014 "),qR=a("a"),aro=o("BlenderbotTokenizer"),nro=o(" or "),jR=a("a"),sro=o("BlenderbotTokenizerFast"),lro=o(" (Blenderbot model)"),iro=l(),Pg=a("li"),Eae=a("strong"),dro=o("blenderbot-small"),cro=o(" \u2014 "),DR=a("a"),mro=o("BlenderbotSmallTokenizer"),fro=o(" (BlenderbotSmall model)"),gro=l(),Bg=a("li"),Cae=a("strong"),hro=o("bloom"),uro=o(" \u2014 "),GR=a("a"),pro=o("BloomTokenizerFast"),_ro=o(" (BLOOM model)"),bro=l(),Ig=a("li"),wae=a("strong"),vro=o("byt5"),Fro=o(" \u2014 "),OR=a("a"),Tro=o("ByT5Tokenizer"),Mro=o(" (ByT5 model)"),Ero=l(),jn=a("li"),Aae=a("strong"),Cro=o("camembert"),wro=o(" \u2014 "),VR=a("a"),Aro=o("CamembertTokenizer"),Lro=o(" or "),XR=a("a"),yro=o("CamembertTokenizerFast"),xro=o(" (CamemBERT model)"),$ro=l(),Ng=a("li"),Lae=a("strong"),kro=o("canine"),Sro=o(" \u2014 "),zR=a("a"),Rro=o("CanineTokenizer"),Pro=o(" (CANINE model)"),Bro=l(),Dn=a("li"),yae=a("strong"),Iro=o("clip"),Nro=o(" \u2014 "),WR=a("a"),qro=o("CLIPTokenizer"),jro=o(" or "),QR=a("a"),Dro=o("CLIPTokenizerFast"),Gro=o(" (CLIP model)"),Oro=l(),Gn=a("li"),xae=a("strong"),Vro=o("convbert"),Xro=o(" \u2014 "),HR=a("a"),zro=o("ConvBertTokenizer"),Wro=o(" or "),UR=a("a"),Qro=o("ConvBertTokenizerFast"),Hro=o(" (ConvBERT model)"),Uro=l(),On=a("li"),$ae=a("strong"),Jro=o("cpm"),Yro=o(" \u2014 "),JR=a("a"),Kro=o("CpmTokenizer"),Zro=o(" or "),YR=a("a"),eto=o("CpmTokenizerFast"),oto=o(" (CPM model)"),rto=l(),qg=a("li"),kae=a("strong"),tto=o("ctrl"),ato=o(" \u2014 "),KR=a("a"),nto=o("CTRLTokenizer"),sto=o(" (CTRL model)"),lto=l(),Vn=a("li"),Sae=a("strong"),ito=o("data2vec-text"),dto=o(" \u2014 "),ZR=a("a"),cto=o("RobertaTokenizer"),mto=o(" or "),eP=a("a"),fto=o("RobertaTokenizerFast"),gto=o(" (Data2VecText model)"),hto=l(),Xn=a("li"),Rae=a("strong"),uto=o("deberta"),pto=o(" \u2014 "),oP=a("a"),_to=o("DebertaTokenizer"),bto=o(" or "),rP=a("a"),vto=o("DebertaTokenizerFast"),Fto=o(" (DeBERTa model)"),Tto=l(),zn=a("li"),Pae=a("strong"),Mto=o("deberta-v2"),Eto=o(" \u2014 "),tP=a("a"),Cto=o("DebertaV2Tokenizer"),wto=o(" or "),aP=a("a"),Ato=o("DebertaV2TokenizerFast"),Lto=o(" (DeBERTa-v2 model)"),yto=l(),Wn=a("li"),Bae=a("strong"),xto=o("distilbert"),$to=o(" \u2014 "),nP=a("a"),kto=o("DistilBertTokenizer"),Sto=o(" or "),sP=a("a"),Rto=o("DistilBertTokenizerFast"),Pto=o(" (DistilBERT model)"),Bto=l(),Qn=a("li"),Iae=a("strong"),Ito=o("dpr"),Nto=o(" \u2014 "),lP=a("a"),qto=o("DPRQuestionEncoderTokenizer"),jto=o(" or "),iP=a("a"),Dto=o("DPRQuestionEncoderTokenizerFast"),Gto=o(" (DPR model)"),Oto=l(),Hn=a("li"),Nae=a("strong"),Vto=o("electra"),Xto=o(" \u2014 "),dP=a("a"),zto=o("ElectraTokenizer"),Wto=o(" or "),cP=a("a"),Qto=o("ElectraTokenizerFast"),Hto=o(" (ELECTRA model)"),Uto=l(),jg=a("li"),qae=a("strong"),Jto=o("flaubert"),Yto=o(" \u2014 "),mP=a("a"),Kto=o("FlaubertTokenizer"),Zto=o(" (FlauBERT model)"),eao=l(),Un=a("li"),jae=a("strong"),oao=o("fnet"),rao=o(" \u2014 "),fP=a("a"),tao=o("FNetTokenizer"),aao=o(" or "),gP=a("a"),nao=o("FNetTokenizerFast"),sao=o(" (FNet model)"),lao=l(),Dg=a("li"),Dae=a("strong"),iao=o("fsmt"),dao=o(" \u2014 "),hP=a("a"),cao=o("FSMTTokenizer"),mao=o(" (FairSeq Machine-Translation model)"),fao=l(),Jn=a("li"),Gae=a("strong"),gao=o("funnel"),hao=o(" \u2014 "),uP=a("a"),uao=o("FunnelTokenizer"),pao=o(" or "),pP=a("a"),_ao=o("FunnelTokenizerFast"),bao=o(" (Funnel Transformer model)"),vao=l(),Yn=a("li"),Oae=a("strong"),Fao=o("gpt2"),Tao=o(" \u2014 "),_P=a("a"),Mao=o("GPT2Tokenizer"),Eao=o(" or "),bP=a("a"),Cao=o("GPT2TokenizerFast"),wao=o(" (OpenAI GPT-2 model)"),Aao=l(),Kn=a("li"),Vae=a("strong"),Lao=o("gpt_neo"),yao=o(" \u2014 "),vP=a("a"),xao=o("GPT2Tokenizer"),$ao=o(" or "),FP=a("a"),kao=o("GPT2TokenizerFast"),Sao=o(" (GPT Neo model)"),Rao=l(),Gg=a("li"),Xae=a("strong"),Pao=o("gpt_neox"),Bao=o(" \u2014 "),TP=a("a"),Iao=o("GPTNeoXTokenizerFast"),Nao=o(" (GPT NeoX model)"),qao=l(),Zn=a("li"),zae=a("strong"),jao=o("gptj"),Dao=o(" \u2014 "),MP=a("a"),Gao=o("GPT2Tokenizer"),Oao=o(" or "),EP=a("a"),Vao=o("GPT2TokenizerFast"),Xao=o(" (GPT-J model)"),zao=l(),es=a("li"),Wae=a("strong"),Wao=o("herbert"),Qao=o(" \u2014 "),CP=a("a"),Hao=o("HerbertTokenizer"),Uao=o(" or "),wP=a("a"),Jao=o("HerbertTokenizerFast"),Yao=o(" (HerBERT model)"),Kao=l(),Og=a("li"),Qae=a("strong"),Zao=o("hubert"),eno=o(" \u2014 "),AP=a("a"),ono=o("Wav2Vec2CTCTokenizer"),rno=o(" (Hubert model)"),tno=l(),os=a("li"),Hae=a("strong"),ano=o("ibert"),nno=o(" \u2014 "),LP=a("a"),sno=o("RobertaTokenizer"),lno=o(" or "),yP=a("a"),ino=o("RobertaTokenizerFast"),dno=o(" (I-BERT model)"),cno=l(),rs=a("li"),Uae=a("strong"),mno=o("layoutlm"),fno=o(" \u2014 "),xP=a("a"),gno=o("LayoutLMTokenizer"),hno=o(" or "),$P=a("a"),uno=o("LayoutLMTokenizerFast"),pno=o(" (LayoutLM model)"),_no=l(),ts=a("li"),Jae=a("strong"),bno=o("layoutlmv2"),vno=o(" \u2014 "),kP=a("a"),Fno=o("LayoutLMv2Tokenizer"),Tno=o(" or "),SP=a("a"),Mno=o("LayoutLMv2TokenizerFast"),Eno=o(" (LayoutLMv2 model)"),Cno=l(),as=a("li"),Yae=a("strong"),wno=o("layoutlmv3"),Ano=o(" \u2014 "),RP=a("a"),Lno=o("LayoutLMv3Tokenizer"),yno=o(" or "),PP=a("a"),xno=o("LayoutLMv3TokenizerFast"),$no=o(" (LayoutLMv3 model)"),kno=l(),ns=a("li"),Kae=a("strong"),Sno=o("layoutxlm"),Rno=o(" \u2014 "),BP=a("a"),Pno=o("LayoutXLMTokenizer"),Bno=o(" or "),IP=a("a"),Ino=o("LayoutXLMTokenizerFast"),Nno=o(" (LayoutXLM model)"),qno=l(),ss=a("li"),Zae=a("strong"),jno=o("led"),Dno=o(" \u2014 "),NP=a("a"),Gno=o("LEDTokenizer"),Ono=o(" or "),qP=a("a"),Vno=o("LEDTokenizerFast"),Xno=o(" (LED model)"),zno=l(),ls=a("li"),ene=a("strong"),Wno=o("longformer"),Qno=o(" \u2014 "),jP=a("a"),Hno=o("LongformerTokenizer"),Uno=o(" or "),DP=a("a"),Jno=o("LongformerTokenizerFast"),Yno=o(" (Longformer model)"),Kno=l(),Vg=a("li"),one=a("strong"),Zno=o("luke"),eso=o(" \u2014 "),GP=a("a"),oso=o("LukeTokenizer"),rso=o(" (LUKE model)"),tso=l(),is=a("li"),rne=a("strong"),aso=o("lxmert"),nso=o(" \u2014 "),OP=a("a"),sso=o("LxmertTokenizer"),lso=o(" or "),VP=a("a"),iso=o("LxmertTokenizerFast"),dso=o(" (LXMERT model)"),cso=l(),Xg=a("li"),tne=a("strong"),mso=o("m2m_100"),fso=o(" \u2014 "),XP=a("a"),gso=o("M2M100Tokenizer"),hso=o(" (M2M100 model)"),uso=l(),zg=a("li"),ane=a("strong"),pso=o("marian"),_so=o(" \u2014 "),zP=a("a"),bso=o("MarianTokenizer"),vso=o(" (Marian model)"),Fso=l(),ds=a("li"),nne=a("strong"),Tso=o("mbart"),Mso=o(" \u2014 "),WP=a("a"),Eso=o("MBartTokenizer"),Cso=o(" or "),QP=a("a"),wso=o("MBartTokenizerFast"),Aso=o(" (mBART model)"),Lso=l(),cs=a("li"),sne=a("strong"),yso=o("mbart50"),xso=o(" \u2014 "),HP=a("a"),$so=o("MBart50Tokenizer"),kso=o(" or "),UP=a("a"),Sso=o("MBart50TokenizerFast"),Rso=o(" (mBART-50 model)"),Pso=l(),ms=a("li"),lne=a("strong"),Bso=o("megatron-bert"),Iso=o(" \u2014 "),JP=a("a"),Nso=o("BertTokenizer"),qso=o(" or "),YP=a("a"),jso=o("BertTokenizerFast"),Dso=o(" (Megatron-BERT model)"),Gso=l(),Wg=a("li"),ine=a("strong"),Oso=o("mluke"),Vso=o(" \u2014 "),KP=a("a"),Xso=o("MLukeTokenizer"),zso=o(" (mLUKE model)"),Wso=l(),fs=a("li"),dne=a("strong"),Qso=o("mobilebert"),Hso=o(" \u2014 "),ZP=a("a"),Uso=o("MobileBertTokenizer"),Jso=o(" or "),eB=a("a"),Yso=o("MobileBertTokenizerFast"),Kso=o(" (MobileBERT model)"),Zso=l(),gs=a("li"),cne=a("strong"),elo=o("mpnet"),olo=o(" \u2014 "),oB=a("a"),rlo=o("MPNetTokenizer"),tlo=o(" or "),rB=a("a"),alo=o("MPNetTokenizerFast"),nlo=o(" (MPNet model)"),slo=l(),hs=a("li"),mne=a("strong"),llo=o("mt5"),ilo=o(" \u2014 "),tB=a("a"),dlo=o("MT5Tokenizer"),clo=o(" or "),aB=a("a"),mlo=o("MT5TokenizerFast"),flo=o(" (MT5 model)"),glo=l(),us=a("li"),fne=a("strong"),hlo=o("nystromformer"),ulo=o(" \u2014 "),nB=a("a"),plo=o("AlbertTokenizer"),_lo=o(" or "),sB=a("a"),blo=o("AlbertTokenizerFast"),vlo=o(" (Nystr\xF6mformer model)"),Flo=l(),ps=a("li"),gne=a("strong"),Tlo=o("openai-gpt"),Mlo=o(" \u2014 "),lB=a("a"),Elo=o("OpenAIGPTTokenizer"),Clo=o(" or "),iB=a("a"),wlo=o("OpenAIGPTTokenizerFast"),Alo=o(" (OpenAI GPT model)"),Llo=l(),Qg=a("li"),hne=a("strong"),ylo=o("opt"),xlo=o(" \u2014 "),dB=a("a"),$lo=o("GPT2Tokenizer"),klo=o(" (OPT model)"),Slo=l(),_s=a("li"),une=a("strong"),Rlo=o("pegasus"),Plo=o(" \u2014 "),cB=a("a"),Blo=o("PegasusTokenizer"),Ilo=o(" or "),mB=a("a"),Nlo=o("PegasusTokenizerFast"),qlo=o(" (Pegasus model)"),jlo=l(),Hg=a("li"),pne=a("strong"),Dlo=o("perceiver"),Glo=o(" \u2014 "),fB=a("a"),Olo=o("PerceiverTokenizer"),Vlo=o(" (Perceiver model)"),Xlo=l(),Ug=a("li"),_ne=a("strong"),zlo=o("phobert"),Wlo=o(" \u2014 "),gB=a("a"),Qlo=o("PhobertTokenizer"),Hlo=o(" (PhoBERT model)"),Ulo=l(),Jg=a("li"),bne=a("strong"),Jlo=o("plbart"),Ylo=o(" \u2014 "),hB=a("a"),Klo=o("PLBartTokenizer"),Zlo=o(" (PLBart model)"),eio=l(),Yg=a("li"),vne=a("strong"),oio=o("prophetnet"),rio=o(" \u2014 "),uB=a("a"),tio=o("ProphetNetTokenizer"),aio=o(" (ProphetNet model)"),nio=l(),bs=a("li"),Fne=a("strong"),sio=o("qdqbert"),lio=o(" \u2014 "),pB=a("a"),iio=o("BertTokenizer"),dio=o(" or "),_B=a("a"),cio=o("BertTokenizerFast"),mio=o(" (QDQBert model)"),fio=l(),Kg=a("li"),Tne=a("strong"),gio=o("rag"),hio=o(" \u2014 "),bB=a("a"),uio=o("RagTokenizer"),pio=o(" (RAG model)"),_io=l(),vs=a("li"),Mne=a("strong"),bio=o("realm"),vio=o(" \u2014 "),vB=a("a"),Fio=o("RealmTokenizer"),Tio=o(" or "),FB=a("a"),Mio=o("RealmTokenizerFast"),Eio=o(" (REALM model)"),Cio=l(),Fs=a("li"),Ene=a("strong"),wio=o("reformer"),Aio=o(" \u2014 "),TB=a("a"),Lio=o("ReformerTokenizer"),yio=o(" or "),MB=a("a"),xio=o("ReformerTokenizerFast"),$io=o(" (Reformer model)"),kio=l(),Ts=a("li"),Cne=a("strong"),Sio=o("rembert"),Rio=o(" \u2014 "),EB=a("a"),Pio=o("RemBertTokenizer"),Bio=o(" or "),CB=a("a"),Iio=o("RemBertTokenizerFast"),Nio=o(" (RemBERT model)"),qio=l(),Ms=a("li"),wne=a("strong"),jio=o("retribert"),Dio=o(" \u2014 "),wB=a("a"),Gio=o("RetriBertTokenizer"),Oio=o(" or "),AB=a("a"),Vio=o("RetriBertTokenizerFast"),Xio=o(" (RetriBERT model)"),zio=l(),Es=a("li"),Ane=a("strong"),Wio=o("roberta"),Qio=o(" \u2014 "),LB=a("a"),Hio=o("RobertaTokenizer"),Uio=o(" or "),yB=a("a"),Jio=o("RobertaTokenizerFast"),Yio=o(" (RoBERTa model)"),Kio=l(),Cs=a("li"),Lne=a("strong"),Zio=o("roformer"),edo=o(" \u2014 "),xB=a("a"),odo=o("RoFormerTokenizer"),rdo=o(" or "),$B=a("a"),tdo=o("RoFormerTokenizerFast"),ado=o(" (RoFormer model)"),ndo=l(),Zg=a("li"),yne=a("strong"),sdo=o("speech_to_text"),ldo=o(" \u2014 "),kB=a("a"),ido=o("Speech2TextTokenizer"),ddo=o(" (Speech2Text model)"),cdo=l(),eh=a("li"),xne=a("strong"),mdo=o("speech_to_text_2"),fdo=o(" \u2014 "),SB=a("a"),gdo=o("Speech2Text2Tokenizer"),hdo=o(" (Speech2Text2 model)"),udo=l(),ws=a("li"),$ne=a("strong"),pdo=o("splinter"),_do=o(" \u2014 "),RB=a("a"),bdo=o("SplinterTokenizer"),vdo=o(" or "),PB=a("a"),Fdo=o("SplinterTokenizerFast"),Tdo=o(" (Splinter model)"),Mdo=l(),As=a("li"),kne=a("strong"),Edo=o("squeezebert"),Cdo=o(" \u2014 "),BB=a("a"),wdo=o("SqueezeBertTokenizer"),Ado=o(" or "),IB=a("a"),Ldo=o("SqueezeBertTokenizerFast"),ydo=o(" (SqueezeBERT model)"),xdo=l(),Ls=a("li"),Sne=a("strong"),$do=o("t5"),kdo=o(" \u2014 "),NB=a("a"),Sdo=o("T5Tokenizer"),Rdo=o(" or "),qB=a("a"),Pdo=o("T5TokenizerFast"),Bdo=o(" (T5 model)"),Ido=l(),oh=a("li"),Rne=a("strong"),Ndo=o("tapas"),qdo=o(" \u2014 "),jB=a("a"),jdo=o("TapasTokenizer"),Ddo=o(" (TAPAS model)"),Gdo=l(),rh=a("li"),Pne=a("strong"),Odo=o("tapex"),Vdo=o(" \u2014 "),DB=a("a"),Xdo=o("TapexTokenizer"),zdo=o(" (TAPEX model)"),Wdo=l(),th=a("li"),Bne=a("strong"),Qdo=o("transfo-xl"),Hdo=o(" \u2014 "),GB=a("a"),Udo=o("TransfoXLTokenizer"),Jdo=o(" (Transformer-XL model)"),Ydo=l(),ys=a("li"),Ine=a("strong"),Kdo=o("visual_bert"),Zdo=o(" \u2014 "),OB=a("a"),eco=o("BertTokenizer"),oco=o(" or "),VB=a("a"),rco=o("BertTokenizerFast"),tco=o(" (VisualBERT model)"),aco=l(),ah=a("li"),Nne=a("strong"),nco=o("wav2vec2"),sco=o(" \u2014 "),XB=a("a"),lco=o("Wav2Vec2CTCTokenizer"),ico=o(" (Wav2Vec2 model)"),dco=l(),nh=a("li"),qne=a("strong"),cco=o("wav2vec2-conformer"),mco=o(" \u2014 "),zB=a("a"),fco=o("Wav2Vec2CTCTokenizer"),gco=o(" (Wav2Vec2-Conformer model)"),hco=l(),sh=a("li"),jne=a("strong"),uco=o("wav2vec2_phoneme"),pco=o(" \u2014 "),WB=a("a"),_co=o("Wav2Vec2PhonemeCTCTokenizer"),bco=o(" (Wav2Vec2Phoneme model)"),vco=l(),xs=a("li"),Dne=a("strong"),Fco=o("xglm"),Tco=o(" \u2014 "),QB=a("a"),Mco=o("XGLMTokenizer"),Eco=o(" or "),HB=a("a"),Cco=o("XGLMTokenizerFast"),wco=o(" (XGLM model)"),Aco=l(),lh=a("li"),Gne=a("strong"),Lco=o("xlm"),yco=o(" \u2014 "),UB=a("a"),xco=o("XLMTokenizer"),$co=o(" (XLM model)"),kco=l(),ih=a("li"),One=a("strong"),Sco=o("xlm-prophetnet"),Rco=o(" \u2014 "),JB=a("a"),Pco=o("XLMProphetNetTokenizer"),Bco=o(" (XLM-ProphetNet model)"),Ico=l(),$s=a("li"),Vne=a("strong"),Nco=o("xlm-roberta"),qco=o(" \u2014 "),YB=a("a"),jco=o("XLMRobertaTokenizer"),Dco=o(" or "),KB=a("a"),Gco=o("XLMRobertaTokenizerFast"),Oco=o(" (XLM-RoBERTa model)"),Vco=l(),ks=a("li"),Xne=a("strong"),Xco=o("xlm-roberta-xl"),zco=o(" \u2014 "),ZB=a("a"),Wco=o("RobertaTokenizer"),Qco=o(" or "),eI=a("a"),Hco=o("RobertaTokenizerFast"),Uco=o(" (XLM-RoBERTa-XL model)"),Jco=l(),Ss=a("li"),zne=a("strong"),Yco=o("xlnet"),Kco=o(" \u2014 "),oI=a("a"),Zco=o("XLNetTokenizer"),emo=o(" or "),rI=a("a"),omo=o("XLNetTokenizerFast"),rmo=o(" (XLNet model)"),tmo=l(),Rs=a("li"),Wne=a("strong"),amo=o("yoso"),nmo=o(" \u2014 "),tI=a("a"),smo=o("AlbertTokenizer"),lmo=o(" or "),aI=a("a"),imo=o("AlbertTokenizerFast"),dmo=o(" (YOSO model)"),cmo=l(),F(dh.$$.fragment),mmo=l(),ch=a("div"),F(ay.$$.fragment),fmo=l(),Qne=a("p"),gmo=o("Register a new tokenizer in this mapping."),Aje=l(),Ei=a("h2"),mh=a("a"),Hne=a("span"),F(ny.$$.fragment),hmo=l(),Une=a("span"),umo=o("AutoFeatureExtractor"),Lje=l(),Ao=a("div"),F(sy.$$.fragment),pmo=l(),ly=a("p"),_mo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),nI=a("a"),bmo=o("AutoFeatureExtractor.from_pretrained()"),vmo=o(" class method."),Fmo=l(),iy=a("p"),Tmo=o("This class cannot be instantiated directly using "),Jne=a("code"),Mmo=o("__init__()"),Emo=o(" (throws an error)."),Cmo=l(),He=a("div"),F(dy.$$.fragment),wmo=l(),Yne=a("p"),Amo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Lmo=l(),La=a("p"),ymo=o("The feature extractor class to instantiate is selected based on the "),Kne=a("code"),xmo=o("model_type"),$mo=o(` property of the config object
(either passed as an argument or loaded from `),Zne=a("code"),kmo=o("pretrained_model_name_or_path"),Smo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ese=a("code"),Rmo=o("pretrained_model_name_or_path"),Pmo=o(":"),Bmo=l(),Y=a("ul"),fh=a("li"),ose=a("strong"),Imo=o("beit"),Nmo=o(" \u2014 "),sI=a("a"),qmo=o("BeitFeatureExtractor"),jmo=o(" (BEiT model)"),Dmo=l(),gh=a("li"),rse=a("strong"),Gmo=o("clip"),Omo=o(" \u2014 "),lI=a("a"),Vmo=o("CLIPFeatureExtractor"),Xmo=o(" (CLIP model)"),zmo=l(),hh=a("li"),tse=a("strong"),Wmo=o("convnext"),Qmo=o(" \u2014 "),iI=a("a"),Hmo=o("ConvNextFeatureExtractor"),Umo=o(" (ConvNeXT model)"),Jmo=l(),uh=a("li"),ase=a("strong"),Ymo=o("cvt"),Kmo=o(" \u2014 "),dI=a("a"),Zmo=o("ConvNextFeatureExtractor"),efo=o(" (CvT model)"),ofo=l(),ph=a("li"),nse=a("strong"),rfo=o("data2vec-audio"),tfo=o(" \u2014 "),cI=a("a"),afo=o("Wav2Vec2FeatureExtractor"),nfo=o(" (Data2VecAudio model)"),sfo=l(),_h=a("li"),sse=a("strong"),lfo=o("data2vec-vision"),ifo=o(" \u2014 "),mI=a("a"),dfo=o("BeitFeatureExtractor"),cfo=o(" (Data2VecVision model)"),mfo=l(),bh=a("li"),lse=a("strong"),ffo=o("deit"),gfo=o(" \u2014 "),fI=a("a"),hfo=o("DeiTFeatureExtractor"),ufo=o(" (DeiT model)"),pfo=l(),vh=a("li"),ise=a("strong"),_fo=o("detr"),bfo=o(" \u2014 "),gI=a("a"),vfo=o("DetrFeatureExtractor"),Ffo=o(" (DETR model)"),Tfo=l(),Fh=a("li"),dse=a("strong"),Mfo=o("dpt"),Efo=o(" \u2014 "),hI=a("a"),Cfo=o("DPTFeatureExtractor"),wfo=o(" (DPT model)"),Afo=l(),Th=a("li"),cse=a("strong"),Lfo=o("flava"),yfo=o(" \u2014 "),uI=a("a"),xfo=o("FlavaFeatureExtractor"),$fo=o(" (FLAVA model)"),kfo=l(),Mh=a("li"),mse=a("strong"),Sfo=o("glpn"),Rfo=o(" \u2014 "),pI=a("a"),Pfo=o("GLPNFeatureExtractor"),Bfo=o(" (GLPN model)"),Ifo=l(),Eh=a("li"),fse=a("strong"),Nfo=o("hubert"),qfo=o(" \u2014 "),_I=a("a"),jfo=o("Wav2Vec2FeatureExtractor"),Dfo=o(" (Hubert model)"),Gfo=l(),Ch=a("li"),gse=a("strong"),Ofo=o("imagegpt"),Vfo=o(" \u2014 "),bI=a("a"),Xfo=o("ImageGPTFeatureExtractor"),zfo=o(" (ImageGPT model)"),Wfo=l(),wh=a("li"),hse=a("strong"),Qfo=o("layoutlmv2"),Hfo=o(" \u2014 "),vI=a("a"),Ufo=o("LayoutLMv2FeatureExtractor"),Jfo=o(" (LayoutLMv2 model)"),Yfo=l(),Ah=a("li"),use=a("strong"),Kfo=o("layoutlmv3"),Zfo=o(" \u2014 "),FI=a("a"),ego=o("LayoutLMv3FeatureExtractor"),ogo=o(" (LayoutLMv3 model)"),rgo=l(),Lh=a("li"),pse=a("strong"),tgo=o("levit"),ago=o(" \u2014 "),TI=a("a"),ngo=o("LevitFeatureExtractor"),sgo=o(" (LeViT model)"),lgo=l(),yh=a("li"),_se=a("strong"),igo=o("maskformer"),dgo=o(" \u2014 "),MI=a("a"),cgo=o("MaskFormerFeatureExtractor"),mgo=o(" (MaskFormer model)"),fgo=l(),xh=a("li"),bse=a("strong"),ggo=o("mctct"),hgo=o(" \u2014 "),EI=a("a"),ugo=o("MCTCTFeatureExtractor"),pgo=o(" (M-CTC-T model)"),_go=l(),$h=a("li"),vse=a("strong"),bgo=o("perceiver"),vgo=o(" \u2014 "),CI=a("a"),Fgo=o("PerceiverFeatureExtractor"),Tgo=o(" (Perceiver model)"),Mgo=l(),kh=a("li"),Fse=a("strong"),Ego=o("poolformer"),Cgo=o(" \u2014 "),wI=a("a"),wgo=o("PoolFormerFeatureExtractor"),Ago=o(" (PoolFormer model)"),Lgo=l(),Sh=a("li"),Tse=a("strong"),ygo=o("regnet"),xgo=o(" \u2014 "),AI=a("a"),$go=o("ConvNextFeatureExtractor"),kgo=o(" (RegNet model)"),Sgo=l(),Rh=a("li"),Mse=a("strong"),Rgo=o("resnet"),Pgo=o(" \u2014 "),LI=a("a"),Bgo=o("ConvNextFeatureExtractor"),Igo=o(" (ResNet model)"),Ngo=l(),Ph=a("li"),Ese=a("strong"),qgo=o("segformer"),jgo=o(" \u2014 "),yI=a("a"),Dgo=o("SegformerFeatureExtractor"),Ggo=o(" (SegFormer model)"),Ogo=l(),Bh=a("li"),Cse=a("strong"),Vgo=o("speech_to_text"),Xgo=o(" \u2014 "),xI=a("a"),zgo=o("Speech2TextFeatureExtractor"),Wgo=o(" (Speech2Text model)"),Qgo=l(),Ih=a("li"),wse=a("strong"),Hgo=o("swin"),Ugo=o(" \u2014 "),$I=a("a"),Jgo=o("ViTFeatureExtractor"),Ygo=o(" (Swin Transformer model)"),Kgo=l(),Nh=a("li"),Ase=a("strong"),Zgo=o("van"),eho=o(" \u2014 "),kI=a("a"),oho=o("ConvNextFeatureExtractor"),rho=o(" (VAN model)"),tho=l(),qh=a("li"),Lse=a("strong"),aho=o("vit"),nho=o(" \u2014 "),SI=a("a"),sho=o("ViTFeatureExtractor"),lho=o(" (ViT model)"),iho=l(),jh=a("li"),yse=a("strong"),dho=o("vit_mae"),cho=o(" \u2014 "),RI=a("a"),mho=o("ViTFeatureExtractor"),fho=o(" (ViTMAE model)"),gho=l(),Dh=a("li"),xse=a("strong"),hho=o("wav2vec2"),uho=o(" \u2014 "),PI=a("a"),pho=o("Wav2Vec2FeatureExtractor"),_ho=o(" (Wav2Vec2 model)"),bho=l(),Gh=a("li"),$se=a("strong"),vho=o("wav2vec2-conformer"),Fho=o(" \u2014 "),BI=a("a"),Tho=o("Wav2Vec2FeatureExtractor"),Mho=o(" (Wav2Vec2-Conformer model)"),Eho=l(),Oh=a("li"),kse=a("strong"),Cho=o("yolos"),who=o(" \u2014 "),II=a("a"),Aho=o("YolosFeatureExtractor"),Lho=o(" (YOLOS model)"),yho=l(),F(Vh.$$.fragment),xho=l(),F(Xh.$$.fragment),$ho=l(),zh=a("div"),F(cy.$$.fragment),kho=l(),Sse=a("p"),Sho=o("Register a new feature extractor for this class."),yje=l(),Ci=a("h2"),Wh=a("a"),Rse=a("span"),F(my.$$.fragment),Rho=l(),Pse=a("span"),Pho=o("AutoProcessor"),xje=l(),Lo=a("div"),F(fy.$$.fragment),Bho=l(),gy=a("p"),Iho=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),NI=a("a"),Nho=o("AutoProcessor.from_pretrained()"),qho=o(" class method."),jho=l(),hy=a("p"),Dho=o("This class cannot be instantiated directly using "),Bse=a("code"),Gho=o("__init__()"),Oho=o(" (throws an error)."),Vho=l(),Ue=a("div"),F(uy.$$.fragment),Xho=l(),Ise=a("p"),zho=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Who=l(),wi=a("p"),Qho=o("The processor class to instantiate is selected based on the "),Nse=a("code"),Hho=o("model_type"),Uho=o(` property of the config object (either
passed as an argument or loaded from `),qse=a("code"),Jho=o("pretrained_model_name_or_path"),Yho=o(" if possible):"),Kho=l(),he=a("ul"),Qh=a("li"),jse=a("strong"),Zho=o("clip"),euo=o(" \u2014 "),qI=a("a"),ouo=o("CLIPProcessor"),ruo=o(" (CLIP model)"),tuo=l(),Hh=a("li"),Dse=a("strong"),auo=o("flava"),nuo=o(" \u2014 "),Gse=a("code"),suo=o("FLAVAProcessor"),luo=o(" (FLAVA model)"),iuo=l(),Uh=a("li"),Ose=a("strong"),duo=o("layoutlmv2"),cuo=o(" \u2014 "),jI=a("a"),muo=o("LayoutLMv2Processor"),fuo=o(" (LayoutLMv2 model)"),guo=l(),Jh=a("li"),Vse=a("strong"),huo=o("layoutlmv3"),uuo=o(" \u2014 "),DI=a("a"),puo=o("LayoutLMv3Processor"),_uo=o(" (LayoutLMv3 model)"),buo=l(),Yh=a("li"),Xse=a("strong"),vuo=o("layoutxlm"),Fuo=o(" \u2014 "),GI=a("a"),Tuo=o("LayoutXLMProcessor"),Muo=o(" (LayoutXLM model)"),Euo=l(),Kh=a("li"),zse=a("strong"),Cuo=o("sew"),wuo=o(" \u2014 "),OI=a("a"),Auo=o("Wav2Vec2Processor"),Luo=o(" (SEW model)"),yuo=l(),Zh=a("li"),Wse=a("strong"),xuo=o("sew-d"),$uo=o(" \u2014 "),VI=a("a"),kuo=o("Wav2Vec2Processor"),Suo=o(" (SEW-D model)"),Ruo=l(),eu=a("li"),Qse=a("strong"),Puo=o("speech_to_text"),Buo=o(" \u2014 "),XI=a("a"),Iuo=o("Speech2TextProcessor"),Nuo=o(" (Speech2Text model)"),quo=l(),ou=a("li"),Hse=a("strong"),juo=o("speech_to_text_2"),Duo=o(" \u2014 "),zI=a("a"),Guo=o("Speech2Text2Processor"),Ouo=o(" (Speech2Text2 model)"),Vuo=l(),ru=a("li"),Use=a("strong"),Xuo=o("trocr"),zuo=o(" \u2014 "),WI=a("a"),Wuo=o("TrOCRProcessor"),Quo=o(" (TrOCR model)"),Huo=l(),tu=a("li"),Jse=a("strong"),Uuo=o("unispeech"),Juo=o(" \u2014 "),QI=a("a"),Yuo=o("Wav2Vec2Processor"),Kuo=o(" (UniSpeech model)"),Zuo=l(),au=a("li"),Yse=a("strong"),epo=o("unispeech-sat"),opo=o(" \u2014 "),HI=a("a"),rpo=o("Wav2Vec2Processor"),tpo=o(" (UniSpeechSat model)"),apo=l(),nu=a("li"),Kse=a("strong"),npo=o("vilt"),spo=o(" \u2014 "),UI=a("a"),lpo=o("ViltProcessor"),ipo=o(" (ViLT model)"),dpo=l(),su=a("li"),Zse=a("strong"),cpo=o("vision-text-dual-encoder"),mpo=o(" \u2014 "),JI=a("a"),fpo=o("VisionTextDualEncoderProcessor"),gpo=o(" (VisionTextDualEncoder model)"),hpo=l(),lu=a("li"),ele=a("strong"),upo=o("wav2vec2"),ppo=o(" \u2014 "),YI=a("a"),_po=o("Wav2Vec2Processor"),bpo=o(" (Wav2Vec2 model)"),vpo=l(),iu=a("li"),ole=a("strong"),Fpo=o("wav2vec2-conformer"),Tpo=o(" \u2014 "),KI=a("a"),Mpo=o("Wav2Vec2Processor"),Epo=o(" (Wav2Vec2-Conformer model)"),Cpo=l(),du=a("li"),rle=a("strong"),wpo=o("wavlm"),Apo=o(" \u2014 "),ZI=a("a"),Lpo=o("Wav2Vec2Processor"),ypo=o(" (WavLM model)"),xpo=l(),F(cu.$$.fragment),$po=l(),F(mu.$$.fragment),kpo=l(),fu=a("div"),F(py.$$.fragment),Spo=l(),tle=a("p"),Rpo=o("Register a new processor for this class."),$je=l(),Ai=a("h2"),gu=a("a"),ale=a("span"),F(_y.$$.fragment),Ppo=l(),nle=a("span"),Bpo=o("AutoModel"),kje=l(),yo=a("div"),F(by.$$.fragment),Ipo=l(),Li=a("p"),Npo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eN=a("a"),qpo=o("from_pretrained()"),jpo=o(" class method or the "),oN=a("a"),Dpo=o("from_config()"),Gpo=o(` class
method.`),Opo=l(),vy=a("p"),Vpo=o("This class cannot be instantiated directly using "),sle=a("code"),Xpo=o("__init__()"),zpo=o(" (throws an error)."),Wpo=l(),tt=a("div"),F(Fy.$$.fragment),Qpo=l(),lle=a("p"),Hpo=o("Instantiates one of the base model classes of the library from a configuration."),Upo=l(),yi=a("p"),Jpo=o(`Note:
Loading a model from its configuration file does `),ile=a("strong"),Ypo=o("not"),Kpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rN=a("a"),Zpo=o("from_pretrained()"),e_o=o(" to load the model weights."),o_o=l(),F(hu.$$.fragment),r_o=l(),Je=a("div"),F(Ty.$$.fragment),t_o=l(),dle=a("p"),a_o=o("Instantiate one of the base model classes of the library from a pretrained model."),n_o=l(),ya=a("p"),s_o=o("The model class to instantiate is selected based on the "),cle=a("code"),l_o=o("model_type"),i_o=o(` property of the config object (either
passed as an argument or loaded from `),mle=a("code"),d_o=o("pretrained_model_name_or_path"),c_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fle=a("code"),m_o=o("pretrained_model_name_or_path"),f_o=o(":"),g_o=l(),y=a("ul"),uu=a("li"),gle=a("strong"),h_o=o("albert"),u_o=o(" \u2014 "),tN=a("a"),p_o=o("AlbertModel"),__o=o(" (ALBERT model)"),b_o=l(),pu=a("li"),hle=a("strong"),v_o=o("bart"),F_o=o(" \u2014 "),aN=a("a"),T_o=o("BartModel"),M_o=o(" (BART model)"),E_o=l(),_u=a("li"),ule=a("strong"),C_o=o("beit"),w_o=o(" \u2014 "),nN=a("a"),A_o=o("BeitModel"),L_o=o(" (BEiT model)"),y_o=l(),bu=a("li"),ple=a("strong"),x_o=o("bert"),$_o=o(" \u2014 "),sN=a("a"),k_o=o("BertModel"),S_o=o(" (BERT model)"),R_o=l(),vu=a("li"),_le=a("strong"),P_o=o("bert-generation"),B_o=o(" \u2014 "),lN=a("a"),I_o=o("BertGenerationEncoder"),N_o=o(" (Bert Generation model)"),q_o=l(),Fu=a("li"),ble=a("strong"),j_o=o("big_bird"),D_o=o(" \u2014 "),iN=a("a"),G_o=o("BigBirdModel"),O_o=o(" (BigBird model)"),V_o=l(),Tu=a("li"),vle=a("strong"),X_o=o("bigbird_pegasus"),z_o=o(" \u2014 "),dN=a("a"),W_o=o("BigBirdPegasusModel"),Q_o=o(" (BigBird-Pegasus model)"),H_o=l(),Mu=a("li"),Fle=a("strong"),U_o=o("blenderbot"),J_o=o(" \u2014 "),cN=a("a"),Y_o=o("BlenderbotModel"),K_o=o(" (Blenderbot model)"),Z_o=l(),Eu=a("li"),Tle=a("strong"),ebo=o("blenderbot-small"),obo=o(" \u2014 "),mN=a("a"),rbo=o("BlenderbotSmallModel"),tbo=o(" (BlenderbotSmall model)"),abo=l(),Cu=a("li"),Mle=a("strong"),nbo=o("bloom"),sbo=o(" \u2014 "),fN=a("a"),lbo=o("BloomModel"),ibo=o(" (BLOOM model)"),dbo=l(),wu=a("li"),Ele=a("strong"),cbo=o("camembert"),mbo=o(" \u2014 "),gN=a("a"),fbo=o("CamembertModel"),gbo=o(" (CamemBERT model)"),hbo=l(),Au=a("li"),Cle=a("strong"),ubo=o("canine"),pbo=o(" \u2014 "),hN=a("a"),_bo=o("CanineModel"),bbo=o(" (CANINE model)"),vbo=l(),Lu=a("li"),wle=a("strong"),Fbo=o("clip"),Tbo=o(" \u2014 "),uN=a("a"),Mbo=o("CLIPModel"),Ebo=o(" (CLIP model)"),Cbo=l(),yu=a("li"),Ale=a("strong"),wbo=o("convbert"),Abo=o(" \u2014 "),pN=a("a"),Lbo=o("ConvBertModel"),ybo=o(" (ConvBERT model)"),xbo=l(),xu=a("li"),Lle=a("strong"),$bo=o("convnext"),kbo=o(" \u2014 "),_N=a("a"),Sbo=o("ConvNextModel"),Rbo=o(" (ConvNeXT model)"),Pbo=l(),$u=a("li"),yle=a("strong"),Bbo=o("ctrl"),Ibo=o(" \u2014 "),bN=a("a"),Nbo=o("CTRLModel"),qbo=o(" (CTRL model)"),jbo=l(),ku=a("li"),xle=a("strong"),Dbo=o("cvt"),Gbo=o(" \u2014 "),vN=a("a"),Obo=o("CvtModel"),Vbo=o(" (CvT model)"),Xbo=l(),Su=a("li"),$le=a("strong"),zbo=o("data2vec-audio"),Wbo=o(" \u2014 "),FN=a("a"),Qbo=o("Data2VecAudioModel"),Hbo=o(" (Data2VecAudio model)"),Ubo=l(),Ru=a("li"),kle=a("strong"),Jbo=o("data2vec-text"),Ybo=o(" \u2014 "),TN=a("a"),Kbo=o("Data2VecTextModel"),Zbo=o(" (Data2VecText model)"),e2o=l(),Pu=a("li"),Sle=a("strong"),o2o=o("data2vec-vision"),r2o=o(" \u2014 "),MN=a("a"),t2o=o("Data2VecVisionModel"),a2o=o(" (Data2VecVision model)"),n2o=l(),Bu=a("li"),Rle=a("strong"),s2o=o("deberta"),l2o=o(" \u2014 "),EN=a("a"),i2o=o("DebertaModel"),d2o=o(" (DeBERTa model)"),c2o=l(),Iu=a("li"),Ple=a("strong"),m2o=o("deberta-v2"),f2o=o(" \u2014 "),CN=a("a"),g2o=o("DebertaV2Model"),h2o=o(" (DeBERTa-v2 model)"),u2o=l(),Nu=a("li"),Ble=a("strong"),p2o=o("decision_transformer"),_2o=o(" \u2014 "),wN=a("a"),b2o=o("DecisionTransformerModel"),v2o=o(" (Decision Transformer model)"),F2o=l(),qu=a("li"),Ile=a("strong"),T2o=o("deit"),M2o=o(" \u2014 "),AN=a("a"),E2o=o("DeiTModel"),C2o=o(" (DeiT model)"),w2o=l(),ju=a("li"),Nle=a("strong"),A2o=o("detr"),L2o=o(" \u2014 "),LN=a("a"),y2o=o("DetrModel"),x2o=o(" (DETR model)"),$2o=l(),Du=a("li"),qle=a("strong"),k2o=o("distilbert"),S2o=o(" \u2014 "),yN=a("a"),R2o=o("DistilBertModel"),P2o=o(" (DistilBERT model)"),B2o=l(),Gu=a("li"),jle=a("strong"),I2o=o("dpr"),N2o=o(" \u2014 "),xN=a("a"),q2o=o("DPRQuestionEncoder"),j2o=o(" (DPR model)"),D2o=l(),Ou=a("li"),Dle=a("strong"),G2o=o("dpt"),O2o=o(" \u2014 "),$N=a("a"),V2o=o("DPTModel"),X2o=o(" (DPT model)"),z2o=l(),Vu=a("li"),Gle=a("strong"),W2o=o("electra"),Q2o=o(" \u2014 "),kN=a("a"),H2o=o("ElectraModel"),U2o=o(" (ELECTRA model)"),J2o=l(),Xu=a("li"),Ole=a("strong"),Y2o=o("flaubert"),K2o=o(" \u2014 "),SN=a("a"),Z2o=o("FlaubertModel"),evo=o(" (FlauBERT model)"),ovo=l(),zu=a("li"),Vle=a("strong"),rvo=o("flava"),tvo=o(" \u2014 "),RN=a("a"),avo=o("FlavaModel"),nvo=o(" (FLAVA model)"),svo=l(),Wu=a("li"),Xle=a("strong"),lvo=o("fnet"),ivo=o(" \u2014 "),PN=a("a"),dvo=o("FNetModel"),cvo=o(" (FNet model)"),mvo=l(),Qu=a("li"),zle=a("strong"),fvo=o("fsmt"),gvo=o(" \u2014 "),BN=a("a"),hvo=o("FSMTModel"),uvo=o(" (FairSeq Machine-Translation model)"),pvo=l(),Ps=a("li"),Wle=a("strong"),_vo=o("funnel"),bvo=o(" \u2014 "),IN=a("a"),vvo=o("FunnelModel"),Fvo=o(" or "),NN=a("a"),Tvo=o("FunnelBaseModel"),Mvo=o(" (Funnel Transformer model)"),Evo=l(),Hu=a("li"),Qle=a("strong"),Cvo=o("glpn"),wvo=o(" \u2014 "),qN=a("a"),Avo=o("GLPNModel"),Lvo=o(" (GLPN model)"),yvo=l(),Uu=a("li"),Hle=a("strong"),xvo=o("gpt2"),$vo=o(" \u2014 "),jN=a("a"),kvo=o("GPT2Model"),Svo=o(" (OpenAI GPT-2 model)"),Rvo=l(),Ju=a("li"),Ule=a("strong"),Pvo=o("gpt_neo"),Bvo=o(" \u2014 "),DN=a("a"),Ivo=o("GPTNeoModel"),Nvo=o(" (GPT Neo model)"),qvo=l(),Yu=a("li"),Jle=a("strong"),jvo=o("gpt_neox"),Dvo=o(" \u2014 "),GN=a("a"),Gvo=o("GPTNeoXModel"),Ovo=o(" (GPT NeoX model)"),Vvo=l(),Ku=a("li"),Yle=a("strong"),Xvo=o("gptj"),zvo=o(" \u2014 "),ON=a("a"),Wvo=o("GPTJModel"),Qvo=o(" (GPT-J model)"),Hvo=l(),Zu=a("li"),Kle=a("strong"),Uvo=o("hubert"),Jvo=o(" \u2014 "),VN=a("a"),Yvo=o("HubertModel"),Kvo=o(" (Hubert model)"),Zvo=l(),ep=a("li"),Zle=a("strong"),eFo=o("ibert"),oFo=o(" \u2014 "),XN=a("a"),rFo=o("IBertModel"),tFo=o(" (I-BERT model)"),aFo=l(),op=a("li"),eie=a("strong"),nFo=o("imagegpt"),sFo=o(" \u2014 "),zN=a("a"),lFo=o("ImageGPTModel"),iFo=o(" (ImageGPT model)"),dFo=l(),rp=a("li"),oie=a("strong"),cFo=o("layoutlm"),mFo=o(" \u2014 "),WN=a("a"),fFo=o("LayoutLMModel"),gFo=o(" (LayoutLM model)"),hFo=l(),tp=a("li"),rie=a("strong"),uFo=o("layoutlmv2"),pFo=o(" \u2014 "),QN=a("a"),_Fo=o("LayoutLMv2Model"),bFo=o(" (LayoutLMv2 model)"),vFo=l(),ap=a("li"),tie=a("strong"),FFo=o("layoutlmv3"),TFo=o(" \u2014 "),HN=a("a"),MFo=o("LayoutLMv3Model"),EFo=o(" (LayoutLMv3 model)"),CFo=l(),np=a("li"),aie=a("strong"),wFo=o("led"),AFo=o(" \u2014 "),UN=a("a"),LFo=o("LEDModel"),yFo=o(" (LED model)"),xFo=l(),sp=a("li"),nie=a("strong"),$Fo=o("levit"),kFo=o(" \u2014 "),JN=a("a"),SFo=o("LevitModel"),RFo=o(" (LeViT model)"),PFo=l(),lp=a("li"),sie=a("strong"),BFo=o("longformer"),IFo=o(" \u2014 "),YN=a("a"),NFo=o("LongformerModel"),qFo=o(" (Longformer model)"),jFo=l(),ip=a("li"),lie=a("strong"),DFo=o("luke"),GFo=o(" \u2014 "),KN=a("a"),OFo=o("LukeModel"),VFo=o(" (LUKE model)"),XFo=l(),dp=a("li"),iie=a("strong"),zFo=o("lxmert"),WFo=o(" \u2014 "),ZN=a("a"),QFo=o("LxmertModel"),HFo=o(" (LXMERT model)"),UFo=l(),cp=a("li"),die=a("strong"),JFo=o("m2m_100"),YFo=o(" \u2014 "),eq=a("a"),KFo=o("M2M100Model"),ZFo=o(" (M2M100 model)"),e1o=l(),mp=a("li"),cie=a("strong"),o1o=o("marian"),r1o=o(" \u2014 "),oq=a("a"),t1o=o("MarianModel"),a1o=o(" (Marian model)"),n1o=l(),fp=a("li"),mie=a("strong"),s1o=o("maskformer"),l1o=o(" \u2014 "),rq=a("a"),i1o=o("MaskFormerModel"),d1o=o(" (MaskFormer model)"),c1o=l(),gp=a("li"),fie=a("strong"),m1o=o("mbart"),f1o=o(" \u2014 "),tq=a("a"),g1o=o("MBartModel"),h1o=o(" (mBART model)"),u1o=l(),hp=a("li"),gie=a("strong"),p1o=o("mctct"),_1o=o(" \u2014 "),aq=a("a"),b1o=o("MCTCTModel"),v1o=o(" (M-CTC-T model)"),F1o=l(),up=a("li"),hie=a("strong"),T1o=o("megatron-bert"),M1o=o(" \u2014 "),nq=a("a"),E1o=o("MegatronBertModel"),C1o=o(" (Megatron-BERT model)"),w1o=l(),pp=a("li"),uie=a("strong"),A1o=o("mobilebert"),L1o=o(" \u2014 "),sq=a("a"),y1o=o("MobileBertModel"),x1o=o(" (MobileBERT model)"),$1o=l(),_p=a("li"),pie=a("strong"),k1o=o("mpnet"),S1o=o(" \u2014 "),lq=a("a"),R1o=o("MPNetModel"),P1o=o(" (MPNet model)"),B1o=l(),bp=a("li"),_ie=a("strong"),I1o=o("mt5"),N1o=o(" \u2014 "),iq=a("a"),q1o=o("MT5Model"),j1o=o(" (MT5 model)"),D1o=l(),vp=a("li"),bie=a("strong"),G1o=o("nystromformer"),O1o=o(" \u2014 "),dq=a("a"),V1o=o("NystromformerModel"),X1o=o(" (Nystr\xF6mformer model)"),z1o=l(),Fp=a("li"),vie=a("strong"),W1o=o("openai-gpt"),Q1o=o(" \u2014 "),cq=a("a"),H1o=o("OpenAIGPTModel"),U1o=o(" (OpenAI GPT model)"),J1o=l(),Tp=a("li"),Fie=a("strong"),Y1o=o("opt"),K1o=o(" \u2014 "),mq=a("a"),Z1o=o("OPTModel"),eTo=o(" (OPT model)"),oTo=l(),Mp=a("li"),Tie=a("strong"),rTo=o("pegasus"),tTo=o(" \u2014 "),fq=a("a"),aTo=o("PegasusModel"),nTo=o(" (Pegasus model)"),sTo=l(),Ep=a("li"),Mie=a("strong"),lTo=o("perceiver"),iTo=o(" \u2014 "),gq=a("a"),dTo=o("PerceiverModel"),cTo=o(" (Perceiver model)"),mTo=l(),Cp=a("li"),Eie=a("strong"),fTo=o("plbart"),gTo=o(" \u2014 "),hq=a("a"),hTo=o("PLBartModel"),uTo=o(" (PLBart model)"),pTo=l(),wp=a("li"),Cie=a("strong"),_To=o("poolformer"),bTo=o(" \u2014 "),uq=a("a"),vTo=o("PoolFormerModel"),FTo=o(" (PoolFormer model)"),TTo=l(),Ap=a("li"),wie=a("strong"),MTo=o("prophetnet"),ETo=o(" \u2014 "),pq=a("a"),CTo=o("ProphetNetModel"),wTo=o(" (ProphetNet model)"),ATo=l(),Lp=a("li"),Aie=a("strong"),LTo=o("qdqbert"),yTo=o(" \u2014 "),_q=a("a"),xTo=o("QDQBertModel"),$To=o(" (QDQBert model)"),kTo=l(),yp=a("li"),Lie=a("strong"),STo=o("reformer"),RTo=o(" \u2014 "),bq=a("a"),PTo=o("ReformerModel"),BTo=o(" (Reformer model)"),ITo=l(),xp=a("li"),yie=a("strong"),NTo=o("regnet"),qTo=o(" \u2014 "),vq=a("a"),jTo=o("RegNetModel"),DTo=o(" (RegNet model)"),GTo=l(),$p=a("li"),xie=a("strong"),OTo=o("rembert"),VTo=o(" \u2014 "),Fq=a("a"),XTo=o("RemBertModel"),zTo=o(" (RemBERT model)"),WTo=l(),kp=a("li"),$ie=a("strong"),QTo=o("resnet"),HTo=o(" \u2014 "),Tq=a("a"),UTo=o("ResNetModel"),JTo=o(" (ResNet model)"),YTo=l(),Sp=a("li"),kie=a("strong"),KTo=o("retribert"),ZTo=o(" \u2014 "),Mq=a("a"),eMo=o("RetriBertModel"),oMo=o(" (RetriBERT model)"),rMo=l(),Rp=a("li"),Sie=a("strong"),tMo=o("roberta"),aMo=o(" \u2014 "),Eq=a("a"),nMo=o("RobertaModel"),sMo=o(" (RoBERTa model)"),lMo=l(),Pp=a("li"),Rie=a("strong"),iMo=o("roformer"),dMo=o(" \u2014 "),Cq=a("a"),cMo=o("RoFormerModel"),mMo=o(" (RoFormer model)"),fMo=l(),Bp=a("li"),Pie=a("strong"),gMo=o("segformer"),hMo=o(" \u2014 "),wq=a("a"),uMo=o("SegformerModel"),pMo=o(" (SegFormer model)"),_Mo=l(),Ip=a("li"),Bie=a("strong"),bMo=o("sew"),vMo=o(" \u2014 "),Aq=a("a"),FMo=o("SEWModel"),TMo=o(" (SEW model)"),MMo=l(),Np=a("li"),Iie=a("strong"),EMo=o("sew-d"),CMo=o(" \u2014 "),Lq=a("a"),wMo=o("SEWDModel"),AMo=o(" (SEW-D model)"),LMo=l(),qp=a("li"),Nie=a("strong"),yMo=o("speech_to_text"),xMo=o(" \u2014 "),yq=a("a"),$Mo=o("Speech2TextModel"),kMo=o(" (Speech2Text model)"),SMo=l(),jp=a("li"),qie=a("strong"),RMo=o("splinter"),PMo=o(" \u2014 "),xq=a("a"),BMo=o("SplinterModel"),IMo=o(" (Splinter model)"),NMo=l(),Dp=a("li"),jie=a("strong"),qMo=o("squeezebert"),jMo=o(" \u2014 "),$q=a("a"),DMo=o("SqueezeBertModel"),GMo=o(" (SqueezeBERT model)"),OMo=l(),Gp=a("li"),Die=a("strong"),VMo=o("swin"),XMo=o(" \u2014 "),kq=a("a"),zMo=o("SwinModel"),WMo=o(" (Swin Transformer model)"),QMo=l(),Op=a("li"),Gie=a("strong"),HMo=o("t5"),UMo=o(" \u2014 "),Sq=a("a"),JMo=o("T5Model"),YMo=o(" (T5 model)"),KMo=l(),Vp=a("li"),Oie=a("strong"),ZMo=o("tapas"),e4o=o(" \u2014 "),Rq=a("a"),o4o=o("TapasModel"),r4o=o(" (TAPAS model)"),t4o=l(),Xp=a("li"),Vie=a("strong"),a4o=o("trajectory_transformer"),n4o=o(" \u2014 "),Pq=a("a"),s4o=o("TrajectoryTransformerModel"),l4o=o(" (Trajectory Transformer model)"),i4o=l(),zp=a("li"),Xie=a("strong"),d4o=o("transfo-xl"),c4o=o(" \u2014 "),Bq=a("a"),m4o=o("TransfoXLModel"),f4o=o(" (Transformer-XL model)"),g4o=l(),Wp=a("li"),zie=a("strong"),h4o=o("unispeech"),u4o=o(" \u2014 "),Iq=a("a"),p4o=o("UniSpeechModel"),_4o=o(" (UniSpeech model)"),b4o=l(),Qp=a("li"),Wie=a("strong"),v4o=o("unispeech-sat"),F4o=o(" \u2014 "),Nq=a("a"),T4o=o("UniSpeechSatModel"),M4o=o(" (UniSpeechSat model)"),E4o=l(),Hp=a("li"),Qie=a("strong"),C4o=o("van"),w4o=o(" \u2014 "),qq=a("a"),A4o=o("VanModel"),L4o=o(" (VAN model)"),y4o=l(),Up=a("li"),Hie=a("strong"),x4o=o("vilt"),$4o=o(" \u2014 "),jq=a("a"),k4o=o("ViltModel"),S4o=o(" (ViLT model)"),R4o=l(),Jp=a("li"),Uie=a("strong"),P4o=o("vision-text-dual-encoder"),B4o=o(" \u2014 "),Dq=a("a"),I4o=o("VisionTextDualEncoderModel"),N4o=o(" (VisionTextDualEncoder model)"),q4o=l(),Yp=a("li"),Jie=a("strong"),j4o=o("visual_bert"),D4o=o(" \u2014 "),Gq=a("a"),G4o=o("VisualBertModel"),O4o=o(" (VisualBERT model)"),V4o=l(),Kp=a("li"),Yie=a("strong"),X4o=o("vit"),z4o=o(" \u2014 "),Oq=a("a"),W4o=o("ViTModel"),Q4o=o(" (ViT model)"),H4o=l(),Zp=a("li"),Kie=a("strong"),U4o=o("vit_mae"),J4o=o(" \u2014 "),Vq=a("a"),Y4o=o("ViTMAEModel"),K4o=o(" (ViTMAE model)"),Z4o=l(),e_=a("li"),Zie=a("strong"),eEo=o("wav2vec2"),oEo=o(" \u2014 "),Xq=a("a"),rEo=o("Wav2Vec2Model"),tEo=o(" (Wav2Vec2 model)"),aEo=l(),o_=a("li"),ede=a("strong"),nEo=o("wav2vec2-conformer"),sEo=o(" \u2014 "),zq=a("a"),lEo=o("Wav2Vec2ConformerModel"),iEo=o(" (Wav2Vec2-Conformer model)"),dEo=l(),r_=a("li"),ode=a("strong"),cEo=o("wavlm"),mEo=o(" \u2014 "),Wq=a("a"),fEo=o("WavLMModel"),gEo=o(" (WavLM model)"),hEo=l(),t_=a("li"),rde=a("strong"),uEo=o("xglm"),pEo=o(" \u2014 "),Qq=a("a"),_Eo=o("XGLMModel"),bEo=o(" (XGLM model)"),vEo=l(),a_=a("li"),tde=a("strong"),FEo=o("xlm"),TEo=o(" \u2014 "),Hq=a("a"),MEo=o("XLMModel"),EEo=o(" (XLM model)"),CEo=l(),n_=a("li"),ade=a("strong"),wEo=o("xlm-prophetnet"),AEo=o(" \u2014 "),Uq=a("a"),LEo=o("XLMProphetNetModel"),yEo=o(" (XLM-ProphetNet model)"),xEo=l(),s_=a("li"),nde=a("strong"),$Eo=o("xlm-roberta"),kEo=o(" \u2014 "),Jq=a("a"),SEo=o("XLMRobertaModel"),REo=o(" (XLM-RoBERTa model)"),PEo=l(),l_=a("li"),sde=a("strong"),BEo=o("xlm-roberta-xl"),IEo=o(" \u2014 "),Yq=a("a"),NEo=o("XLMRobertaXLModel"),qEo=o(" (XLM-RoBERTa-XL model)"),jEo=l(),i_=a("li"),lde=a("strong"),DEo=o("xlnet"),GEo=o(" \u2014 "),Kq=a("a"),OEo=o("XLNetModel"),VEo=o(" (XLNet model)"),XEo=l(),d_=a("li"),ide=a("strong"),zEo=o("yolos"),WEo=o(" \u2014 "),Zq=a("a"),QEo=o("YolosModel"),HEo=o(" (YOLOS model)"),UEo=l(),c_=a("li"),dde=a("strong"),JEo=o("yoso"),YEo=o(" \u2014 "),ej=a("a"),KEo=o("YosoModel"),ZEo=o(" (YOSO model)"),eCo=l(),m_=a("p"),oCo=o("The model is set in evaluation mode by default using "),cde=a("code"),rCo=o("model.eval()"),tCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mde=a("code"),aCo=o("model.train()"),nCo=l(),F(f_.$$.fragment),Sje=l(),xi=a("h2"),g_=a("a"),fde=a("span"),F(My.$$.fragment),sCo=l(),gde=a("span"),lCo=o("AutoModelForPreTraining"),Rje=l(),xo=a("div"),F(Ey.$$.fragment),iCo=l(),$i=a("p"),dCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oj=a("a"),cCo=o("from_pretrained()"),mCo=o(" class method or the "),rj=a("a"),fCo=o("from_config()"),gCo=o(` class
method.`),hCo=l(),Cy=a("p"),uCo=o("This class cannot be instantiated directly using "),hde=a("code"),pCo=o("__init__()"),_Co=o(" (throws an error)."),bCo=l(),at=a("div"),F(wy.$$.fragment),vCo=l(),ude=a("p"),FCo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TCo=l(),ki=a("p"),MCo=o(`Note:
Loading a model from its configuration file does `),pde=a("strong"),ECo=o("not"),CCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=a("a"),wCo=o("from_pretrained()"),ACo=o(" to load the model weights."),LCo=l(),F(h_.$$.fragment),yCo=l(),Ye=a("div"),F(Ay.$$.fragment),xCo=l(),_de=a("p"),$Co=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kCo=l(),xa=a("p"),SCo=o("The model class to instantiate is selected based on the "),bde=a("code"),RCo=o("model_type"),PCo=o(` property of the config object (either
passed as an argument or loaded from `),vde=a("code"),BCo=o("pretrained_model_name_or_path"),ICo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),NCo=o("pretrained_model_name_or_path"),qCo=o(":"),jCo=l(),G=a("ul"),u_=a("li"),Tde=a("strong"),DCo=o("albert"),GCo=o(" \u2014 "),aj=a("a"),OCo=o("AlbertForPreTraining"),VCo=o(" (ALBERT model)"),XCo=l(),p_=a("li"),Mde=a("strong"),zCo=o("bart"),WCo=o(" \u2014 "),nj=a("a"),QCo=o("BartForConditionalGeneration"),HCo=o(" (BART model)"),UCo=l(),__=a("li"),Ede=a("strong"),JCo=o("bert"),YCo=o(" \u2014 "),sj=a("a"),KCo=o("BertForPreTraining"),ZCo=o(" (BERT model)"),e5o=l(),b_=a("li"),Cde=a("strong"),o5o=o("big_bird"),r5o=o(" \u2014 "),lj=a("a"),t5o=o("BigBirdForPreTraining"),a5o=o(" (BigBird model)"),n5o=l(),v_=a("li"),wde=a("strong"),s5o=o("bloom"),l5o=o(" \u2014 "),ij=a("a"),i5o=o("BloomForCausalLM"),d5o=o(" (BLOOM model)"),c5o=l(),F_=a("li"),Ade=a("strong"),m5o=o("camembert"),f5o=o(" \u2014 "),dj=a("a"),g5o=o("CamembertForMaskedLM"),h5o=o(" (CamemBERT model)"),u5o=l(),T_=a("li"),Lde=a("strong"),p5o=o("ctrl"),_5o=o(" \u2014 "),cj=a("a"),b5o=o("CTRLLMHeadModel"),v5o=o(" (CTRL model)"),F5o=l(),M_=a("li"),yde=a("strong"),T5o=o("data2vec-text"),M5o=o(" \u2014 "),mj=a("a"),E5o=o("Data2VecTextForMaskedLM"),C5o=o(" (Data2VecText model)"),w5o=l(),E_=a("li"),xde=a("strong"),A5o=o("deberta"),L5o=o(" \u2014 "),fj=a("a"),y5o=o("DebertaForMaskedLM"),x5o=o(" (DeBERTa model)"),$5o=l(),C_=a("li"),$de=a("strong"),k5o=o("deberta-v2"),S5o=o(" \u2014 "),gj=a("a"),R5o=o("DebertaV2ForMaskedLM"),P5o=o(" (DeBERTa-v2 model)"),B5o=l(),w_=a("li"),kde=a("strong"),I5o=o("distilbert"),N5o=o(" \u2014 "),hj=a("a"),q5o=o("DistilBertForMaskedLM"),j5o=o(" (DistilBERT model)"),D5o=l(),A_=a("li"),Sde=a("strong"),G5o=o("electra"),O5o=o(" \u2014 "),uj=a("a"),V5o=o("ElectraForPreTraining"),X5o=o(" (ELECTRA model)"),z5o=l(),L_=a("li"),Rde=a("strong"),W5o=o("flaubert"),Q5o=o(" \u2014 "),pj=a("a"),H5o=o("FlaubertWithLMHeadModel"),U5o=o(" (FlauBERT model)"),J5o=l(),y_=a("li"),Pde=a("strong"),Y5o=o("flava"),K5o=o(" \u2014 "),_j=a("a"),Z5o=o("FlavaForPreTraining"),e3o=o(" (FLAVA model)"),o3o=l(),x_=a("li"),Bde=a("strong"),r3o=o("fnet"),t3o=o(" \u2014 "),bj=a("a"),a3o=o("FNetForPreTraining"),n3o=o(" (FNet model)"),s3o=l(),$_=a("li"),Ide=a("strong"),l3o=o("fsmt"),i3o=o(" \u2014 "),vj=a("a"),d3o=o("FSMTForConditionalGeneration"),c3o=o(" (FairSeq Machine-Translation model)"),m3o=l(),k_=a("li"),Nde=a("strong"),f3o=o("funnel"),g3o=o(" \u2014 "),Fj=a("a"),h3o=o("FunnelForPreTraining"),u3o=o(" (Funnel Transformer model)"),p3o=l(),S_=a("li"),qde=a("strong"),_3o=o("gpt2"),b3o=o(" \u2014 "),Tj=a("a"),v3o=o("GPT2LMHeadModel"),F3o=o(" (OpenAI GPT-2 model)"),T3o=l(),R_=a("li"),jde=a("strong"),M3o=o("ibert"),E3o=o(" \u2014 "),Mj=a("a"),C3o=o("IBertForMaskedLM"),w3o=o(" (I-BERT model)"),A3o=l(),P_=a("li"),Dde=a("strong"),L3o=o("layoutlm"),y3o=o(" \u2014 "),Ej=a("a"),x3o=o("LayoutLMForMaskedLM"),$3o=o(" (LayoutLM model)"),k3o=l(),B_=a("li"),Gde=a("strong"),S3o=o("longformer"),R3o=o(" \u2014 "),Cj=a("a"),P3o=o("LongformerForMaskedLM"),B3o=o(" (Longformer model)"),I3o=l(),I_=a("li"),Ode=a("strong"),N3o=o("lxmert"),q3o=o(" \u2014 "),wj=a("a"),j3o=o("LxmertForPreTraining"),D3o=o(" (LXMERT model)"),G3o=l(),N_=a("li"),Vde=a("strong"),O3o=o("megatron-bert"),V3o=o(" \u2014 "),Aj=a("a"),X3o=o("MegatronBertForPreTraining"),z3o=o(" (Megatron-BERT model)"),W3o=l(),q_=a("li"),Xde=a("strong"),Q3o=o("mobilebert"),H3o=o(" \u2014 "),Lj=a("a"),U3o=o("MobileBertForPreTraining"),J3o=o(" (MobileBERT model)"),Y3o=l(),j_=a("li"),zde=a("strong"),K3o=o("mpnet"),Z3o=o(" \u2014 "),yj=a("a"),e0o=o("MPNetForMaskedLM"),o0o=o(" (MPNet model)"),r0o=l(),D_=a("li"),Wde=a("strong"),t0o=o("openai-gpt"),a0o=o(" \u2014 "),xj=a("a"),n0o=o("OpenAIGPTLMHeadModel"),s0o=o(" (OpenAI GPT model)"),l0o=l(),G_=a("li"),Qde=a("strong"),i0o=o("retribert"),d0o=o(" \u2014 "),$j=a("a"),c0o=o("RetriBertModel"),m0o=o(" (RetriBERT model)"),f0o=l(),O_=a("li"),Hde=a("strong"),g0o=o("roberta"),h0o=o(" \u2014 "),kj=a("a"),u0o=o("RobertaForMaskedLM"),p0o=o(" (RoBERTa model)"),_0o=l(),V_=a("li"),Ude=a("strong"),b0o=o("splinter"),v0o=o(" \u2014 "),Sj=a("a"),F0o=o("SplinterForPreTraining"),T0o=o(" (Splinter model)"),M0o=l(),X_=a("li"),Jde=a("strong"),E0o=o("squeezebert"),C0o=o(" \u2014 "),Rj=a("a"),w0o=o("SqueezeBertForMaskedLM"),A0o=o(" (SqueezeBERT model)"),L0o=l(),z_=a("li"),Yde=a("strong"),y0o=o("t5"),x0o=o(" \u2014 "),Pj=a("a"),$0o=o("T5ForConditionalGeneration"),k0o=o(" (T5 model)"),S0o=l(),W_=a("li"),Kde=a("strong"),R0o=o("tapas"),P0o=o(" \u2014 "),Bj=a("a"),B0o=o("TapasForMaskedLM"),I0o=o(" (TAPAS model)"),N0o=l(),Q_=a("li"),Zde=a("strong"),q0o=o("transfo-xl"),j0o=o(" \u2014 "),Ij=a("a"),D0o=o("TransfoXLLMHeadModel"),G0o=o(" (Transformer-XL model)"),O0o=l(),H_=a("li"),ece=a("strong"),V0o=o("unispeech"),X0o=o(" \u2014 "),Nj=a("a"),z0o=o("UniSpeechForPreTraining"),W0o=o(" (UniSpeech model)"),Q0o=l(),U_=a("li"),oce=a("strong"),H0o=o("unispeech-sat"),U0o=o(" \u2014 "),qj=a("a"),J0o=o("UniSpeechSatForPreTraining"),Y0o=o(" (UniSpeechSat model)"),K0o=l(),J_=a("li"),rce=a("strong"),Z0o=o("visual_bert"),ewo=o(" \u2014 "),jj=a("a"),owo=o("VisualBertForPreTraining"),rwo=o(" (VisualBERT model)"),two=l(),Y_=a("li"),tce=a("strong"),awo=o("vit_mae"),nwo=o(" \u2014 "),Dj=a("a"),swo=o("ViTMAEForPreTraining"),lwo=o(" (ViTMAE model)"),iwo=l(),K_=a("li"),ace=a("strong"),dwo=o("wav2vec2"),cwo=o(" \u2014 "),Gj=a("a"),mwo=o("Wav2Vec2ForPreTraining"),fwo=o(" (Wav2Vec2 model)"),gwo=l(),Z_=a("li"),nce=a("strong"),hwo=o("wav2vec2-conformer"),uwo=o(" \u2014 "),Oj=a("a"),pwo=o("Wav2Vec2ConformerForPreTraining"),_wo=o(" (Wav2Vec2-Conformer model)"),bwo=l(),eb=a("li"),sce=a("strong"),vwo=o("xlm"),Fwo=o(" \u2014 "),Vj=a("a"),Two=o("XLMWithLMHeadModel"),Mwo=o(" (XLM model)"),Ewo=l(),ob=a("li"),lce=a("strong"),Cwo=o("xlm-roberta"),wwo=o(" \u2014 "),Xj=a("a"),Awo=o("XLMRobertaForMaskedLM"),Lwo=o(" (XLM-RoBERTa model)"),ywo=l(),rb=a("li"),ice=a("strong"),xwo=o("xlm-roberta-xl"),$wo=o(" \u2014 "),zj=a("a"),kwo=o("XLMRobertaXLForMaskedLM"),Swo=o(" (XLM-RoBERTa-XL model)"),Rwo=l(),tb=a("li"),dce=a("strong"),Pwo=o("xlnet"),Bwo=o(" \u2014 "),Wj=a("a"),Iwo=o("XLNetLMHeadModel"),Nwo=o(" (XLNet model)"),qwo=l(),ab=a("p"),jwo=o("The model is set in evaluation mode by default using "),cce=a("code"),Dwo=o("model.eval()"),Gwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mce=a("code"),Owo=o("model.train()"),Vwo=l(),F(nb.$$.fragment),Pje=l(),Si=a("h2"),sb=a("a"),fce=a("span"),F(Ly.$$.fragment),Xwo=l(),gce=a("span"),zwo=o("AutoModelForCausalLM"),Bje=l(),$o=a("div"),F(yy.$$.fragment),Wwo=l(),Ri=a("p"),Qwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Qj=a("a"),Hwo=o("from_pretrained()"),Uwo=o(" class method or the "),Hj=a("a"),Jwo=o("from_config()"),Ywo=o(` class
method.`),Kwo=l(),xy=a("p"),Zwo=o("This class cannot be instantiated directly using "),hce=a("code"),eAo=o("__init__()"),oAo=o(" (throws an error)."),rAo=l(),nt=a("div"),F($y.$$.fragment),tAo=l(),uce=a("p"),aAo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nAo=l(),Pi=a("p"),sAo=o(`Note:
Loading a model from its configuration file does `),pce=a("strong"),lAo=o("not"),iAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=a("a"),dAo=o("from_pretrained()"),cAo=o(" to load the model weights."),mAo=l(),F(lb.$$.fragment),fAo=l(),Ke=a("div"),F(ky.$$.fragment),gAo=l(),_ce=a("p"),hAo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uAo=l(),$a=a("p"),pAo=o("The model class to instantiate is selected based on the "),bce=a("code"),_Ao=o("model_type"),bAo=o(` property of the config object (either
passed as an argument or loaded from `),vce=a("code"),vAo=o("pretrained_model_name_or_path"),FAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=a("code"),TAo=o("pretrained_model_name_or_path"),MAo=o(":"),EAo=l(),z=a("ul"),ib=a("li"),Tce=a("strong"),CAo=o("bart"),wAo=o(" \u2014 "),Jj=a("a"),AAo=o("BartForCausalLM"),LAo=o(" (BART model)"),yAo=l(),db=a("li"),Mce=a("strong"),xAo=o("bert"),$Ao=o(" \u2014 "),Yj=a("a"),kAo=o("BertLMHeadModel"),SAo=o(" (BERT model)"),RAo=l(),cb=a("li"),Ece=a("strong"),PAo=o("bert-generation"),BAo=o(" \u2014 "),Kj=a("a"),IAo=o("BertGenerationDecoder"),NAo=o(" (Bert Generation model)"),qAo=l(),mb=a("li"),Cce=a("strong"),jAo=o("big_bird"),DAo=o(" \u2014 "),Zj=a("a"),GAo=o("BigBirdForCausalLM"),OAo=o(" (BigBird model)"),VAo=l(),fb=a("li"),wce=a("strong"),XAo=o("bigbird_pegasus"),zAo=o(" \u2014 "),eD=a("a"),WAo=o("BigBirdPegasusForCausalLM"),QAo=o(" (BigBird-Pegasus model)"),HAo=l(),gb=a("li"),Ace=a("strong"),UAo=o("blenderbot"),JAo=o(" \u2014 "),oD=a("a"),YAo=o("BlenderbotForCausalLM"),KAo=o(" (Blenderbot model)"),ZAo=l(),hb=a("li"),Lce=a("strong"),e6o=o("blenderbot-small"),o6o=o(" \u2014 "),rD=a("a"),r6o=o("BlenderbotSmallForCausalLM"),t6o=o(" (BlenderbotSmall model)"),a6o=l(),ub=a("li"),yce=a("strong"),n6o=o("bloom"),s6o=o(" \u2014 "),tD=a("a"),l6o=o("BloomForCausalLM"),i6o=o(" (BLOOM model)"),d6o=l(),pb=a("li"),xce=a("strong"),c6o=o("camembert"),m6o=o(" \u2014 "),aD=a("a"),f6o=o("CamembertForCausalLM"),g6o=o(" (CamemBERT model)"),h6o=l(),_b=a("li"),$ce=a("strong"),u6o=o("ctrl"),p6o=o(" \u2014 "),nD=a("a"),_6o=o("CTRLLMHeadModel"),b6o=o(" (CTRL model)"),v6o=l(),bb=a("li"),kce=a("strong"),F6o=o("data2vec-text"),T6o=o(" \u2014 "),sD=a("a"),M6o=o("Data2VecTextForCausalLM"),E6o=o(" (Data2VecText model)"),C6o=l(),vb=a("li"),Sce=a("strong"),w6o=o("electra"),A6o=o(" \u2014 "),lD=a("a"),L6o=o("ElectraForCausalLM"),y6o=o(" (ELECTRA model)"),x6o=l(),Fb=a("li"),Rce=a("strong"),$6o=o("gpt2"),k6o=o(" \u2014 "),iD=a("a"),S6o=o("GPT2LMHeadModel"),R6o=o(" (OpenAI GPT-2 model)"),P6o=l(),Tb=a("li"),Pce=a("strong"),B6o=o("gpt_neo"),I6o=o(" \u2014 "),dD=a("a"),N6o=o("GPTNeoForCausalLM"),q6o=o(" (GPT Neo model)"),j6o=l(),Mb=a("li"),Bce=a("strong"),D6o=o("gpt_neox"),G6o=o(" \u2014 "),cD=a("a"),O6o=o("GPTNeoXForCausalLM"),V6o=o(" (GPT NeoX model)"),X6o=l(),Eb=a("li"),Ice=a("strong"),z6o=o("gptj"),W6o=o(" \u2014 "),mD=a("a"),Q6o=o("GPTJForCausalLM"),H6o=o(" (GPT-J model)"),U6o=l(),Cb=a("li"),Nce=a("strong"),J6o=o("marian"),Y6o=o(" \u2014 "),fD=a("a"),K6o=o("MarianForCausalLM"),Z6o=o(" (Marian model)"),eLo=l(),wb=a("li"),qce=a("strong"),oLo=o("mbart"),rLo=o(" \u2014 "),gD=a("a"),tLo=o("MBartForCausalLM"),aLo=o(" (mBART model)"),nLo=l(),Ab=a("li"),jce=a("strong"),sLo=o("megatron-bert"),lLo=o(" \u2014 "),hD=a("a"),iLo=o("MegatronBertForCausalLM"),dLo=o(" (Megatron-BERT model)"),cLo=l(),Lb=a("li"),Dce=a("strong"),mLo=o("openai-gpt"),fLo=o(" \u2014 "),uD=a("a"),gLo=o("OpenAIGPTLMHeadModel"),hLo=o(" (OpenAI GPT model)"),uLo=l(),yb=a("li"),Gce=a("strong"),pLo=o("opt"),_Lo=o(" \u2014 "),pD=a("a"),bLo=o("OPTForCausalLM"),vLo=o(" (OPT model)"),FLo=l(),xb=a("li"),Oce=a("strong"),TLo=o("pegasus"),MLo=o(" \u2014 "),_D=a("a"),ELo=o("PegasusForCausalLM"),CLo=o(" (Pegasus model)"),wLo=l(),$b=a("li"),Vce=a("strong"),ALo=o("plbart"),LLo=o(" \u2014 "),bD=a("a"),yLo=o("PLBartForCausalLM"),xLo=o(" (PLBart model)"),$Lo=l(),kb=a("li"),Xce=a("strong"),kLo=o("prophetnet"),SLo=o(" \u2014 "),vD=a("a"),RLo=o("ProphetNetForCausalLM"),PLo=o(" (ProphetNet model)"),BLo=l(),Sb=a("li"),zce=a("strong"),ILo=o("qdqbert"),NLo=o(" \u2014 "),FD=a("a"),qLo=o("QDQBertLMHeadModel"),jLo=o(" (QDQBert model)"),DLo=l(),Rb=a("li"),Wce=a("strong"),GLo=o("reformer"),OLo=o(" \u2014 "),TD=a("a"),VLo=o("ReformerModelWithLMHead"),XLo=o(" (Reformer model)"),zLo=l(),Pb=a("li"),Qce=a("strong"),WLo=o("rembert"),QLo=o(" \u2014 "),MD=a("a"),HLo=o("RemBertForCausalLM"),ULo=o(" (RemBERT model)"),JLo=l(),Bb=a("li"),Hce=a("strong"),YLo=o("roberta"),KLo=o(" \u2014 "),ED=a("a"),ZLo=o("RobertaForCausalLM"),eyo=o(" (RoBERTa model)"),oyo=l(),Ib=a("li"),Uce=a("strong"),ryo=o("roformer"),tyo=o(" \u2014 "),CD=a("a"),ayo=o("RoFormerForCausalLM"),nyo=o(" (RoFormer model)"),syo=l(),Nb=a("li"),Jce=a("strong"),lyo=o("speech_to_text_2"),iyo=o(" \u2014 "),wD=a("a"),dyo=o("Speech2Text2ForCausalLM"),cyo=o(" (Speech2Text2 model)"),myo=l(),qb=a("li"),Yce=a("strong"),fyo=o("transfo-xl"),gyo=o(" \u2014 "),AD=a("a"),hyo=o("TransfoXLLMHeadModel"),uyo=o(" (Transformer-XL model)"),pyo=l(),jb=a("li"),Kce=a("strong"),_yo=o("trocr"),byo=o(" \u2014 "),LD=a("a"),vyo=o("TrOCRForCausalLM"),Fyo=o(" (TrOCR model)"),Tyo=l(),Db=a("li"),Zce=a("strong"),Myo=o("xglm"),Eyo=o(" \u2014 "),yD=a("a"),Cyo=o("XGLMForCausalLM"),wyo=o(" (XGLM model)"),Ayo=l(),Gb=a("li"),eme=a("strong"),Lyo=o("xlm"),yyo=o(" \u2014 "),xD=a("a"),xyo=o("XLMWithLMHeadModel"),$yo=o(" (XLM model)"),kyo=l(),Ob=a("li"),ome=a("strong"),Syo=o("xlm-prophetnet"),Ryo=o(" \u2014 "),$D=a("a"),Pyo=o("XLMProphetNetForCausalLM"),Byo=o(" (XLM-ProphetNet model)"),Iyo=l(),Vb=a("li"),rme=a("strong"),Nyo=o("xlm-roberta"),qyo=o(" \u2014 "),kD=a("a"),jyo=o("XLMRobertaForCausalLM"),Dyo=o(" (XLM-RoBERTa model)"),Gyo=l(),Xb=a("li"),tme=a("strong"),Oyo=o("xlm-roberta-xl"),Vyo=o(" \u2014 "),SD=a("a"),Xyo=o("XLMRobertaXLForCausalLM"),zyo=o(" (XLM-RoBERTa-XL model)"),Wyo=l(),zb=a("li"),ame=a("strong"),Qyo=o("xlnet"),Hyo=o(" \u2014 "),RD=a("a"),Uyo=o("XLNetLMHeadModel"),Jyo=o(" (XLNet model)"),Yyo=l(),Wb=a("p"),Kyo=o("The model is set in evaluation mode by default using "),nme=a("code"),Zyo=o("model.eval()"),e7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=a("code"),o7o=o("model.train()"),r7o=l(),F(Qb.$$.fragment),Ije=l(),Bi=a("h2"),Hb=a("a"),lme=a("span"),F(Sy.$$.fragment),t7o=l(),ime=a("span"),a7o=o("AutoModelForMaskedLM"),Nje=l(),ko=a("div"),F(Ry.$$.fragment),n7o=l(),Ii=a("p"),s7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PD=a("a"),l7o=o("from_pretrained()"),i7o=o(" class method or the "),BD=a("a"),d7o=o("from_config()"),c7o=o(` class
method.`),m7o=l(),Py=a("p"),f7o=o("This class cannot be instantiated directly using "),dme=a("code"),g7o=o("__init__()"),h7o=o(" (throws an error)."),u7o=l(),st=a("div"),F(By.$$.fragment),p7o=l(),cme=a("p"),_7o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),b7o=l(),Ni=a("p"),v7o=o(`Note:
Loading a model from its configuration file does `),mme=a("strong"),F7o=o("not"),T7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ID=a("a"),M7o=o("from_pretrained()"),E7o=o(" to load the model weights."),C7o=l(),F(Ub.$$.fragment),w7o=l(),Ze=a("div"),F(Iy.$$.fragment),A7o=l(),fme=a("p"),L7o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y7o=l(),ka=a("p"),x7o=o("The model class to instantiate is selected based on the "),gme=a("code"),$7o=o("model_type"),k7o=o(` property of the config object (either
passed as an argument or loaded from `),hme=a("code"),S7o=o("pretrained_model_name_or_path"),R7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=a("code"),P7o=o("pretrained_model_name_or_path"),B7o=o(":"),I7o=l(),Q=a("ul"),Jb=a("li"),pme=a("strong"),N7o=o("albert"),q7o=o(" \u2014 "),ND=a("a"),j7o=o("AlbertForMaskedLM"),D7o=o(" (ALBERT model)"),G7o=l(),Yb=a("li"),_me=a("strong"),O7o=o("bart"),V7o=o(" \u2014 "),qD=a("a"),X7o=o("BartForConditionalGeneration"),z7o=o(" (BART model)"),W7o=l(),Kb=a("li"),bme=a("strong"),Q7o=o("bert"),H7o=o(" \u2014 "),jD=a("a"),U7o=o("BertForMaskedLM"),J7o=o(" (BERT model)"),Y7o=l(),Zb=a("li"),vme=a("strong"),K7o=o("big_bird"),Z7o=o(" \u2014 "),DD=a("a"),e8o=o("BigBirdForMaskedLM"),o8o=o(" (BigBird model)"),r8o=l(),e2=a("li"),Fme=a("strong"),t8o=o("camembert"),a8o=o(" \u2014 "),GD=a("a"),n8o=o("CamembertForMaskedLM"),s8o=o(" (CamemBERT model)"),l8o=l(),o2=a("li"),Tme=a("strong"),i8o=o("convbert"),d8o=o(" \u2014 "),OD=a("a"),c8o=o("ConvBertForMaskedLM"),m8o=o(" (ConvBERT model)"),f8o=l(),r2=a("li"),Mme=a("strong"),g8o=o("data2vec-text"),h8o=o(" \u2014 "),VD=a("a"),u8o=o("Data2VecTextForMaskedLM"),p8o=o(" (Data2VecText model)"),_8o=l(),t2=a("li"),Eme=a("strong"),b8o=o("deberta"),v8o=o(" \u2014 "),XD=a("a"),F8o=o("DebertaForMaskedLM"),T8o=o(" (DeBERTa model)"),M8o=l(),a2=a("li"),Cme=a("strong"),E8o=o("deberta-v2"),C8o=o(" \u2014 "),zD=a("a"),w8o=o("DebertaV2ForMaskedLM"),A8o=o(" (DeBERTa-v2 model)"),L8o=l(),n2=a("li"),wme=a("strong"),y8o=o("distilbert"),x8o=o(" \u2014 "),WD=a("a"),$8o=o("DistilBertForMaskedLM"),k8o=o(" (DistilBERT model)"),S8o=l(),s2=a("li"),Ame=a("strong"),R8o=o("electra"),P8o=o(" \u2014 "),QD=a("a"),B8o=o("ElectraForMaskedLM"),I8o=o(" (ELECTRA model)"),N8o=l(),l2=a("li"),Lme=a("strong"),q8o=o("flaubert"),j8o=o(" \u2014 "),HD=a("a"),D8o=o("FlaubertWithLMHeadModel"),G8o=o(" (FlauBERT model)"),O8o=l(),i2=a("li"),yme=a("strong"),V8o=o("fnet"),X8o=o(" \u2014 "),UD=a("a"),z8o=o("FNetForMaskedLM"),W8o=o(" (FNet model)"),Q8o=l(),d2=a("li"),xme=a("strong"),H8o=o("funnel"),U8o=o(" \u2014 "),JD=a("a"),J8o=o("FunnelForMaskedLM"),Y8o=o(" (Funnel Transformer model)"),K8o=l(),c2=a("li"),$me=a("strong"),Z8o=o("ibert"),e9o=o(" \u2014 "),YD=a("a"),o9o=o("IBertForMaskedLM"),r9o=o(" (I-BERT model)"),t9o=l(),m2=a("li"),kme=a("strong"),a9o=o("layoutlm"),n9o=o(" \u2014 "),KD=a("a"),s9o=o("LayoutLMForMaskedLM"),l9o=o(" (LayoutLM model)"),i9o=l(),f2=a("li"),Sme=a("strong"),d9o=o("longformer"),c9o=o(" \u2014 "),ZD=a("a"),m9o=o("LongformerForMaskedLM"),f9o=o(" (Longformer model)"),g9o=l(),g2=a("li"),Rme=a("strong"),h9o=o("luke"),u9o=o(" \u2014 "),eG=a("a"),p9o=o("LukeForMaskedLM"),_9o=o(" (LUKE model)"),b9o=l(),h2=a("li"),Pme=a("strong"),v9o=o("mbart"),F9o=o(" \u2014 "),oG=a("a"),T9o=o("MBartForConditionalGeneration"),M9o=o(" (mBART model)"),E9o=l(),u2=a("li"),Bme=a("strong"),C9o=o("megatron-bert"),w9o=o(" \u2014 "),rG=a("a"),A9o=o("MegatronBertForMaskedLM"),L9o=o(" (Megatron-BERT model)"),y9o=l(),p2=a("li"),Ime=a("strong"),x9o=o("mobilebert"),$9o=o(" \u2014 "),tG=a("a"),k9o=o("MobileBertForMaskedLM"),S9o=o(" (MobileBERT model)"),R9o=l(),_2=a("li"),Nme=a("strong"),P9o=o("mpnet"),B9o=o(" \u2014 "),aG=a("a"),I9o=o("MPNetForMaskedLM"),N9o=o(" (MPNet model)"),q9o=l(),b2=a("li"),qme=a("strong"),j9o=o("nystromformer"),D9o=o(" \u2014 "),nG=a("a"),G9o=o("NystromformerForMaskedLM"),O9o=o(" (Nystr\xF6mformer model)"),V9o=l(),v2=a("li"),jme=a("strong"),X9o=o("perceiver"),z9o=o(" \u2014 "),sG=a("a"),W9o=o("PerceiverForMaskedLM"),Q9o=o(" (Perceiver model)"),H9o=l(),F2=a("li"),Dme=a("strong"),U9o=o("qdqbert"),J9o=o(" \u2014 "),lG=a("a"),Y9o=o("QDQBertForMaskedLM"),K9o=o(" (QDQBert model)"),Z9o=l(),T2=a("li"),Gme=a("strong"),exo=o("reformer"),oxo=o(" \u2014 "),iG=a("a"),rxo=o("ReformerForMaskedLM"),txo=o(" (Reformer model)"),axo=l(),M2=a("li"),Ome=a("strong"),nxo=o("rembert"),sxo=o(" \u2014 "),dG=a("a"),lxo=o("RemBertForMaskedLM"),ixo=o(" (RemBERT model)"),dxo=l(),E2=a("li"),Vme=a("strong"),cxo=o("roberta"),mxo=o(" \u2014 "),cG=a("a"),fxo=o("RobertaForMaskedLM"),gxo=o(" (RoBERTa model)"),hxo=l(),C2=a("li"),Xme=a("strong"),uxo=o("roformer"),pxo=o(" \u2014 "),mG=a("a"),_xo=o("RoFormerForMaskedLM"),bxo=o(" (RoFormer model)"),vxo=l(),w2=a("li"),zme=a("strong"),Fxo=o("squeezebert"),Txo=o(" \u2014 "),fG=a("a"),Mxo=o("SqueezeBertForMaskedLM"),Exo=o(" (SqueezeBERT model)"),Cxo=l(),A2=a("li"),Wme=a("strong"),wxo=o("tapas"),Axo=o(" \u2014 "),gG=a("a"),Lxo=o("TapasForMaskedLM"),yxo=o(" (TAPAS model)"),xxo=l(),L2=a("li"),Qme=a("strong"),$xo=o("wav2vec2"),kxo=o(" \u2014 "),Hme=a("code"),Sxo=o("Wav2Vec2ForMaskedLM"),Rxo=o(" (Wav2Vec2 model)"),Pxo=l(),y2=a("li"),Ume=a("strong"),Bxo=o("xlm"),Ixo=o(" \u2014 "),hG=a("a"),Nxo=o("XLMWithLMHeadModel"),qxo=o(" (XLM model)"),jxo=l(),x2=a("li"),Jme=a("strong"),Dxo=o("xlm-roberta"),Gxo=o(" \u2014 "),uG=a("a"),Oxo=o("XLMRobertaForMaskedLM"),Vxo=o(" (XLM-RoBERTa model)"),Xxo=l(),$2=a("li"),Yme=a("strong"),zxo=o("xlm-roberta-xl"),Wxo=o(" \u2014 "),pG=a("a"),Qxo=o("XLMRobertaXLForMaskedLM"),Hxo=o(" (XLM-RoBERTa-XL model)"),Uxo=l(),k2=a("li"),Kme=a("strong"),Jxo=o("yoso"),Yxo=o(" \u2014 "),_G=a("a"),Kxo=o("YosoForMaskedLM"),Zxo=o(" (YOSO model)"),e$o=l(),S2=a("p"),o$o=o("The model is set in evaluation mode by default using "),Zme=a("code"),r$o=o("model.eval()"),t$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=a("code"),a$o=o("model.train()"),n$o=l(),F(R2.$$.fragment),qje=l(),qi=a("h2"),P2=a("a"),ofe=a("span"),F(Ny.$$.fragment),s$o=l(),rfe=a("span"),l$o=o("AutoModelForSeq2SeqLM"),jje=l(),So=a("div"),F(qy.$$.fragment),i$o=l(),ji=a("p"),d$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bG=a("a"),c$o=o("from_pretrained()"),m$o=o(" class method or the "),vG=a("a"),f$o=o("from_config()"),g$o=o(` class
method.`),h$o=l(),jy=a("p"),u$o=o("This class cannot be instantiated directly using "),tfe=a("code"),p$o=o("__init__()"),_$o=o(" (throws an error)."),b$o=l(),lt=a("div"),F(Dy.$$.fragment),v$o=l(),afe=a("p"),F$o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),T$o=l(),Di=a("p"),M$o=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),E$o=o("not"),C$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=a("a"),w$o=o("from_pretrained()"),A$o=o(" to load the model weights."),L$o=l(),F(B2.$$.fragment),y$o=l(),eo=a("div"),F(Gy.$$.fragment),x$o=l(),sfe=a("p"),$$o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k$o=l(),Sa=a("p"),S$o=o("The model class to instantiate is selected based on the "),lfe=a("code"),R$o=o("model_type"),P$o=o(` property of the config object (either
passed as an argument or loaded from `),ife=a("code"),B$o=o("pretrained_model_name_or_path"),I$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=a("code"),N$o=o("pretrained_model_name_or_path"),q$o=o(":"),j$o=l(),pe=a("ul"),I2=a("li"),cfe=a("strong"),D$o=o("bart"),G$o=o(" \u2014 "),TG=a("a"),O$o=o("BartForConditionalGeneration"),V$o=o(" (BART model)"),X$o=l(),N2=a("li"),mfe=a("strong"),z$o=o("bigbird_pegasus"),W$o=o(" \u2014 "),MG=a("a"),Q$o=o("BigBirdPegasusForConditionalGeneration"),H$o=o(" (BigBird-Pegasus model)"),U$o=l(),q2=a("li"),ffe=a("strong"),J$o=o("blenderbot"),Y$o=o(" \u2014 "),EG=a("a"),K$o=o("BlenderbotForConditionalGeneration"),Z$o=o(" (Blenderbot model)"),eko=l(),j2=a("li"),gfe=a("strong"),oko=o("blenderbot-small"),rko=o(" \u2014 "),CG=a("a"),tko=o("BlenderbotSmallForConditionalGeneration"),ako=o(" (BlenderbotSmall model)"),nko=l(),D2=a("li"),hfe=a("strong"),sko=o("encoder-decoder"),lko=o(" \u2014 "),wG=a("a"),iko=o("EncoderDecoderModel"),dko=o(" (Encoder decoder model)"),cko=l(),G2=a("li"),ufe=a("strong"),mko=o("fsmt"),fko=o(" \u2014 "),AG=a("a"),gko=o("FSMTForConditionalGeneration"),hko=o(" (FairSeq Machine-Translation model)"),uko=l(),O2=a("li"),pfe=a("strong"),pko=o("led"),_ko=o(" \u2014 "),LG=a("a"),bko=o("LEDForConditionalGeneration"),vko=o(" (LED model)"),Fko=l(),V2=a("li"),_fe=a("strong"),Tko=o("m2m_100"),Mko=o(" \u2014 "),yG=a("a"),Eko=o("M2M100ForConditionalGeneration"),Cko=o(" (M2M100 model)"),wko=l(),X2=a("li"),bfe=a("strong"),Ako=o("marian"),Lko=o(" \u2014 "),xG=a("a"),yko=o("MarianMTModel"),xko=o(" (Marian model)"),$ko=l(),z2=a("li"),vfe=a("strong"),kko=o("mbart"),Sko=o(" \u2014 "),$G=a("a"),Rko=o("MBartForConditionalGeneration"),Pko=o(" (mBART model)"),Bko=l(),W2=a("li"),Ffe=a("strong"),Iko=o("mt5"),Nko=o(" \u2014 "),kG=a("a"),qko=o("MT5ForConditionalGeneration"),jko=o(" (MT5 model)"),Dko=l(),Q2=a("li"),Tfe=a("strong"),Gko=o("pegasus"),Oko=o(" \u2014 "),SG=a("a"),Vko=o("PegasusForConditionalGeneration"),Xko=o(" (Pegasus model)"),zko=l(),H2=a("li"),Mfe=a("strong"),Wko=o("plbart"),Qko=o(" \u2014 "),RG=a("a"),Hko=o("PLBartForConditionalGeneration"),Uko=o(" (PLBart model)"),Jko=l(),U2=a("li"),Efe=a("strong"),Yko=o("prophetnet"),Kko=o(" \u2014 "),PG=a("a"),Zko=o("ProphetNetForConditionalGeneration"),eSo=o(" (ProphetNet model)"),oSo=l(),J2=a("li"),Cfe=a("strong"),rSo=o("t5"),tSo=o(" \u2014 "),BG=a("a"),aSo=o("T5ForConditionalGeneration"),nSo=o(" (T5 model)"),sSo=l(),Y2=a("li"),wfe=a("strong"),lSo=o("xlm-prophetnet"),iSo=o(" \u2014 "),IG=a("a"),dSo=o("XLMProphetNetForConditionalGeneration"),cSo=o(" (XLM-ProphetNet model)"),mSo=l(),K2=a("p"),fSo=o("The model is set in evaluation mode by default using "),Afe=a("code"),gSo=o("model.eval()"),hSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=a("code"),uSo=o("model.train()"),pSo=l(),F(Z2.$$.fragment),Dje=l(),Gi=a("h2"),ev=a("a"),yfe=a("span"),F(Oy.$$.fragment),_So=l(),xfe=a("span"),bSo=o("AutoModelForSequenceClassification"),Gje=l(),Ro=a("div"),F(Vy.$$.fragment),vSo=l(),Oi=a("p"),FSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NG=a("a"),TSo=o("from_pretrained()"),MSo=o(" class method or the "),qG=a("a"),ESo=o("from_config()"),CSo=o(` class
method.`),wSo=l(),Xy=a("p"),ASo=o("This class cannot be instantiated directly using "),$fe=a("code"),LSo=o("__init__()"),ySo=o(" (throws an error)."),xSo=l(),it=a("div"),F(zy.$$.fragment),$So=l(),kfe=a("p"),kSo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SSo=l(),Vi=a("p"),RSo=o(`Note:
Loading a model from its configuration file does `),Sfe=a("strong"),PSo=o("not"),BSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=a("a"),ISo=o("from_pretrained()"),NSo=o(" to load the model weights."),qSo=l(),F(ov.$$.fragment),jSo=l(),oo=a("div"),F(Wy.$$.fragment),DSo=l(),Rfe=a("p"),GSo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OSo=l(),Ra=a("p"),VSo=o("The model class to instantiate is selected based on the "),Pfe=a("code"),XSo=o("model_type"),zSo=o(` property of the config object (either
passed as an argument or loaded from `),Bfe=a("code"),WSo=o("pretrained_model_name_or_path"),QSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=a("code"),HSo=o("pretrained_model_name_or_path"),USo=o(":"),JSo=l(),N=a("ul"),rv=a("li"),Nfe=a("strong"),YSo=o("albert"),KSo=o(" \u2014 "),DG=a("a"),ZSo=o("AlbertForSequenceClassification"),eRo=o(" (ALBERT model)"),oRo=l(),tv=a("li"),qfe=a("strong"),rRo=o("bart"),tRo=o(" \u2014 "),GG=a("a"),aRo=o("BartForSequenceClassification"),nRo=o(" (BART model)"),sRo=l(),av=a("li"),jfe=a("strong"),lRo=o("bert"),iRo=o(" \u2014 "),OG=a("a"),dRo=o("BertForSequenceClassification"),cRo=o(" (BERT model)"),mRo=l(),nv=a("li"),Dfe=a("strong"),fRo=o("big_bird"),gRo=o(" \u2014 "),VG=a("a"),hRo=o("BigBirdForSequenceClassification"),uRo=o(" (BigBird model)"),pRo=l(),sv=a("li"),Gfe=a("strong"),_Ro=o("bigbird_pegasus"),bRo=o(" \u2014 "),XG=a("a"),vRo=o("BigBirdPegasusForSequenceClassification"),FRo=o(" (BigBird-Pegasus model)"),TRo=l(),lv=a("li"),Ofe=a("strong"),MRo=o("camembert"),ERo=o(" \u2014 "),zG=a("a"),CRo=o("CamembertForSequenceClassification"),wRo=o(" (CamemBERT model)"),ARo=l(),iv=a("li"),Vfe=a("strong"),LRo=o("canine"),yRo=o(" \u2014 "),WG=a("a"),xRo=o("CanineForSequenceClassification"),$Ro=o(" (CANINE model)"),kRo=l(),dv=a("li"),Xfe=a("strong"),SRo=o("convbert"),RRo=o(" \u2014 "),QG=a("a"),PRo=o("ConvBertForSequenceClassification"),BRo=o(" (ConvBERT model)"),IRo=l(),cv=a("li"),zfe=a("strong"),NRo=o("ctrl"),qRo=o(" \u2014 "),HG=a("a"),jRo=o("CTRLForSequenceClassification"),DRo=o(" (CTRL model)"),GRo=l(),mv=a("li"),Wfe=a("strong"),ORo=o("data2vec-text"),VRo=o(" \u2014 "),UG=a("a"),XRo=o("Data2VecTextForSequenceClassification"),zRo=o(" (Data2VecText model)"),WRo=l(),fv=a("li"),Qfe=a("strong"),QRo=o("deberta"),HRo=o(" \u2014 "),JG=a("a"),URo=o("DebertaForSequenceClassification"),JRo=o(" (DeBERTa model)"),YRo=l(),gv=a("li"),Hfe=a("strong"),KRo=o("deberta-v2"),ZRo=o(" \u2014 "),YG=a("a"),ePo=o("DebertaV2ForSequenceClassification"),oPo=o(" (DeBERTa-v2 model)"),rPo=l(),hv=a("li"),Ufe=a("strong"),tPo=o("distilbert"),aPo=o(" \u2014 "),KG=a("a"),nPo=o("DistilBertForSequenceClassification"),sPo=o(" (DistilBERT model)"),lPo=l(),uv=a("li"),Jfe=a("strong"),iPo=o("electra"),dPo=o(" \u2014 "),ZG=a("a"),cPo=o("ElectraForSequenceClassification"),mPo=o(" (ELECTRA model)"),fPo=l(),pv=a("li"),Yfe=a("strong"),gPo=o("flaubert"),hPo=o(" \u2014 "),eO=a("a"),uPo=o("FlaubertForSequenceClassification"),pPo=o(" (FlauBERT model)"),_Po=l(),_v=a("li"),Kfe=a("strong"),bPo=o("fnet"),vPo=o(" \u2014 "),oO=a("a"),FPo=o("FNetForSequenceClassification"),TPo=o(" (FNet model)"),MPo=l(),bv=a("li"),Zfe=a("strong"),EPo=o("funnel"),CPo=o(" \u2014 "),rO=a("a"),wPo=o("FunnelForSequenceClassification"),APo=o(" (Funnel Transformer model)"),LPo=l(),vv=a("li"),ege=a("strong"),yPo=o("gpt2"),xPo=o(" \u2014 "),tO=a("a"),$Po=o("GPT2ForSequenceClassification"),kPo=o(" (OpenAI GPT-2 model)"),SPo=l(),Fv=a("li"),oge=a("strong"),RPo=o("gpt_neo"),PPo=o(" \u2014 "),aO=a("a"),BPo=o("GPTNeoForSequenceClassification"),IPo=o(" (GPT Neo model)"),NPo=l(),Tv=a("li"),rge=a("strong"),qPo=o("gptj"),jPo=o(" \u2014 "),nO=a("a"),DPo=o("GPTJForSequenceClassification"),GPo=o(" (GPT-J model)"),OPo=l(),Mv=a("li"),tge=a("strong"),VPo=o("ibert"),XPo=o(" \u2014 "),sO=a("a"),zPo=o("IBertForSequenceClassification"),WPo=o(" (I-BERT model)"),QPo=l(),Ev=a("li"),age=a("strong"),HPo=o("layoutlm"),UPo=o(" \u2014 "),lO=a("a"),JPo=o("LayoutLMForSequenceClassification"),YPo=o(" (LayoutLM model)"),KPo=l(),Cv=a("li"),nge=a("strong"),ZPo=o("layoutlmv2"),eBo=o(" \u2014 "),iO=a("a"),oBo=o("LayoutLMv2ForSequenceClassification"),rBo=o(" (LayoutLMv2 model)"),tBo=l(),wv=a("li"),sge=a("strong"),aBo=o("layoutlmv3"),nBo=o(" \u2014 "),dO=a("a"),sBo=o("LayoutLMv3ForSequenceClassification"),lBo=o(" (LayoutLMv3 model)"),iBo=l(),Av=a("li"),lge=a("strong"),dBo=o("led"),cBo=o(" \u2014 "),cO=a("a"),mBo=o("LEDForSequenceClassification"),fBo=o(" (LED model)"),gBo=l(),Lv=a("li"),ige=a("strong"),hBo=o("longformer"),uBo=o(" \u2014 "),mO=a("a"),pBo=o("LongformerForSequenceClassification"),_Bo=o(" (Longformer model)"),bBo=l(),yv=a("li"),dge=a("strong"),vBo=o("mbart"),FBo=o(" \u2014 "),fO=a("a"),TBo=o("MBartForSequenceClassification"),MBo=o(" (mBART model)"),EBo=l(),xv=a("li"),cge=a("strong"),CBo=o("megatron-bert"),wBo=o(" \u2014 "),gO=a("a"),ABo=o("MegatronBertForSequenceClassification"),LBo=o(" (Megatron-BERT model)"),yBo=l(),$v=a("li"),mge=a("strong"),xBo=o("mobilebert"),$Bo=o(" \u2014 "),hO=a("a"),kBo=o("MobileBertForSequenceClassification"),SBo=o(" (MobileBERT model)"),RBo=l(),kv=a("li"),fge=a("strong"),PBo=o("mpnet"),BBo=o(" \u2014 "),uO=a("a"),IBo=o("MPNetForSequenceClassification"),NBo=o(" (MPNet model)"),qBo=l(),Sv=a("li"),gge=a("strong"),jBo=o("nystromformer"),DBo=o(" \u2014 "),pO=a("a"),GBo=o("NystromformerForSequenceClassification"),OBo=o(" (Nystr\xF6mformer model)"),VBo=l(),Rv=a("li"),hge=a("strong"),XBo=o("openai-gpt"),zBo=o(" \u2014 "),_O=a("a"),WBo=o("OpenAIGPTForSequenceClassification"),QBo=o(" (OpenAI GPT model)"),HBo=l(),Pv=a("li"),uge=a("strong"),UBo=o("perceiver"),JBo=o(" \u2014 "),bO=a("a"),YBo=o("PerceiverForSequenceClassification"),KBo=o(" (Perceiver model)"),ZBo=l(),Bv=a("li"),pge=a("strong"),eIo=o("plbart"),oIo=o(" \u2014 "),vO=a("a"),rIo=o("PLBartForSequenceClassification"),tIo=o(" (PLBart model)"),aIo=l(),Iv=a("li"),_ge=a("strong"),nIo=o("qdqbert"),sIo=o(" \u2014 "),FO=a("a"),lIo=o("QDQBertForSequenceClassification"),iIo=o(" (QDQBert model)"),dIo=l(),Nv=a("li"),bge=a("strong"),cIo=o("reformer"),mIo=o(" \u2014 "),TO=a("a"),fIo=o("ReformerForSequenceClassification"),gIo=o(" (Reformer model)"),hIo=l(),qv=a("li"),vge=a("strong"),uIo=o("rembert"),pIo=o(" \u2014 "),MO=a("a"),_Io=o("RemBertForSequenceClassification"),bIo=o(" (RemBERT model)"),vIo=l(),jv=a("li"),Fge=a("strong"),FIo=o("roberta"),TIo=o(" \u2014 "),EO=a("a"),MIo=o("RobertaForSequenceClassification"),EIo=o(" (RoBERTa model)"),CIo=l(),Dv=a("li"),Tge=a("strong"),wIo=o("roformer"),AIo=o(" \u2014 "),CO=a("a"),LIo=o("RoFormerForSequenceClassification"),yIo=o(" (RoFormer model)"),xIo=l(),Gv=a("li"),Mge=a("strong"),$Io=o("squeezebert"),kIo=o(" \u2014 "),wO=a("a"),SIo=o("SqueezeBertForSequenceClassification"),RIo=o(" (SqueezeBERT model)"),PIo=l(),Ov=a("li"),Ege=a("strong"),BIo=o("tapas"),IIo=o(" \u2014 "),AO=a("a"),NIo=o("TapasForSequenceClassification"),qIo=o(" (TAPAS model)"),jIo=l(),Vv=a("li"),Cge=a("strong"),DIo=o("transfo-xl"),GIo=o(" \u2014 "),LO=a("a"),OIo=o("TransfoXLForSequenceClassification"),VIo=o(" (Transformer-XL model)"),XIo=l(),Xv=a("li"),wge=a("strong"),zIo=o("xlm"),WIo=o(" \u2014 "),yO=a("a"),QIo=o("XLMForSequenceClassification"),HIo=o(" (XLM model)"),UIo=l(),zv=a("li"),Age=a("strong"),JIo=o("xlm-roberta"),YIo=o(" \u2014 "),xO=a("a"),KIo=o("XLMRobertaForSequenceClassification"),ZIo=o(" (XLM-RoBERTa model)"),eNo=l(),Wv=a("li"),Lge=a("strong"),oNo=o("xlm-roberta-xl"),rNo=o(" \u2014 "),$O=a("a"),tNo=o("XLMRobertaXLForSequenceClassification"),aNo=o(" (XLM-RoBERTa-XL model)"),nNo=l(),Qv=a("li"),yge=a("strong"),sNo=o("xlnet"),lNo=o(" \u2014 "),kO=a("a"),iNo=o("XLNetForSequenceClassification"),dNo=o(" (XLNet model)"),cNo=l(),Hv=a("li"),xge=a("strong"),mNo=o("yoso"),fNo=o(" \u2014 "),SO=a("a"),gNo=o("YosoForSequenceClassification"),hNo=o(" (YOSO model)"),uNo=l(),Uv=a("p"),pNo=o("The model is set in evaluation mode by default using "),$ge=a("code"),_No=o("model.eval()"),bNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=a("code"),vNo=o("model.train()"),FNo=l(),F(Jv.$$.fragment),Oje=l(),Xi=a("h2"),Yv=a("a"),Sge=a("span"),F(Qy.$$.fragment),TNo=l(),Rge=a("span"),MNo=o("AutoModelForMultipleChoice"),Vje=l(),Po=a("div"),F(Hy.$$.fragment),ENo=l(),zi=a("p"),CNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RO=a("a"),wNo=o("from_pretrained()"),ANo=o(" class method or the "),PO=a("a"),LNo=o("from_config()"),yNo=o(` class
method.`),xNo=l(),Uy=a("p"),$No=o("This class cannot be instantiated directly using "),Pge=a("code"),kNo=o("__init__()"),SNo=o(" (throws an error)."),RNo=l(),dt=a("div"),F(Jy.$$.fragment),PNo=l(),Bge=a("p"),BNo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),INo=l(),Wi=a("p"),NNo=o(`Note:
Loading a model from its configuration file does `),Ige=a("strong"),qNo=o("not"),jNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=a("a"),DNo=o("from_pretrained()"),GNo=o(" to load the model weights."),ONo=l(),F(Kv.$$.fragment),VNo=l(),ro=a("div"),F(Yy.$$.fragment),XNo=l(),Nge=a("p"),zNo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WNo=l(),Pa=a("p"),QNo=o("The model class to instantiate is selected based on the "),qge=a("code"),HNo=o("model_type"),UNo=o(` property of the config object (either
passed as an argument or loaded from `),jge=a("code"),JNo=o("pretrained_model_name_or_path"),YNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=a("code"),KNo=o("pretrained_model_name_or_path"),ZNo=o(":"),eqo=l(),Z=a("ul"),Zv=a("li"),Gge=a("strong"),oqo=o("albert"),rqo=o(" \u2014 "),IO=a("a"),tqo=o("AlbertForMultipleChoice"),aqo=o(" (ALBERT model)"),nqo=l(),eF=a("li"),Oge=a("strong"),sqo=o("bert"),lqo=o(" \u2014 "),NO=a("a"),iqo=o("BertForMultipleChoice"),dqo=o(" (BERT model)"),cqo=l(),oF=a("li"),Vge=a("strong"),mqo=o("big_bird"),fqo=o(" \u2014 "),qO=a("a"),gqo=o("BigBirdForMultipleChoice"),hqo=o(" (BigBird model)"),uqo=l(),rF=a("li"),Xge=a("strong"),pqo=o("camembert"),_qo=o(" \u2014 "),jO=a("a"),bqo=o("CamembertForMultipleChoice"),vqo=o(" (CamemBERT model)"),Fqo=l(),tF=a("li"),zge=a("strong"),Tqo=o("canine"),Mqo=o(" \u2014 "),DO=a("a"),Eqo=o("CanineForMultipleChoice"),Cqo=o(" (CANINE model)"),wqo=l(),aF=a("li"),Wge=a("strong"),Aqo=o("convbert"),Lqo=o(" \u2014 "),GO=a("a"),yqo=o("ConvBertForMultipleChoice"),xqo=o(" (ConvBERT model)"),$qo=l(),nF=a("li"),Qge=a("strong"),kqo=o("data2vec-text"),Sqo=o(" \u2014 "),OO=a("a"),Rqo=o("Data2VecTextForMultipleChoice"),Pqo=o(" (Data2VecText model)"),Bqo=l(),sF=a("li"),Hge=a("strong"),Iqo=o("deberta-v2"),Nqo=o(" \u2014 "),VO=a("a"),qqo=o("DebertaV2ForMultipleChoice"),jqo=o(" (DeBERTa-v2 model)"),Dqo=l(),lF=a("li"),Uge=a("strong"),Gqo=o("distilbert"),Oqo=o(" \u2014 "),XO=a("a"),Vqo=o("DistilBertForMultipleChoice"),Xqo=o(" (DistilBERT model)"),zqo=l(),iF=a("li"),Jge=a("strong"),Wqo=o("electra"),Qqo=o(" \u2014 "),zO=a("a"),Hqo=o("ElectraForMultipleChoice"),Uqo=o(" (ELECTRA model)"),Jqo=l(),dF=a("li"),Yge=a("strong"),Yqo=o("flaubert"),Kqo=o(" \u2014 "),WO=a("a"),Zqo=o("FlaubertForMultipleChoice"),ejo=o(" (FlauBERT model)"),ojo=l(),cF=a("li"),Kge=a("strong"),rjo=o("fnet"),tjo=o(" \u2014 "),QO=a("a"),ajo=o("FNetForMultipleChoice"),njo=o(" (FNet model)"),sjo=l(),mF=a("li"),Zge=a("strong"),ljo=o("funnel"),ijo=o(" \u2014 "),HO=a("a"),djo=o("FunnelForMultipleChoice"),cjo=o(" (Funnel Transformer model)"),mjo=l(),fF=a("li"),ehe=a("strong"),fjo=o("ibert"),gjo=o(" \u2014 "),UO=a("a"),hjo=o("IBertForMultipleChoice"),ujo=o(" (I-BERT model)"),pjo=l(),gF=a("li"),ohe=a("strong"),_jo=o("longformer"),bjo=o(" \u2014 "),JO=a("a"),vjo=o("LongformerForMultipleChoice"),Fjo=o(" (Longformer model)"),Tjo=l(),hF=a("li"),rhe=a("strong"),Mjo=o("megatron-bert"),Ejo=o(" \u2014 "),YO=a("a"),Cjo=o("MegatronBertForMultipleChoice"),wjo=o(" (Megatron-BERT model)"),Ajo=l(),uF=a("li"),the=a("strong"),Ljo=o("mobilebert"),yjo=o(" \u2014 "),KO=a("a"),xjo=o("MobileBertForMultipleChoice"),$jo=o(" (MobileBERT model)"),kjo=l(),pF=a("li"),ahe=a("strong"),Sjo=o("mpnet"),Rjo=o(" \u2014 "),ZO=a("a"),Pjo=o("MPNetForMultipleChoice"),Bjo=o(" (MPNet model)"),Ijo=l(),_F=a("li"),nhe=a("strong"),Njo=o("nystromformer"),qjo=o(" \u2014 "),eV=a("a"),jjo=o("NystromformerForMultipleChoice"),Djo=o(" (Nystr\xF6mformer model)"),Gjo=l(),bF=a("li"),she=a("strong"),Ojo=o("qdqbert"),Vjo=o(" \u2014 "),oV=a("a"),Xjo=o("QDQBertForMultipleChoice"),zjo=o(" (QDQBert model)"),Wjo=l(),vF=a("li"),lhe=a("strong"),Qjo=o("rembert"),Hjo=o(" \u2014 "),rV=a("a"),Ujo=o("RemBertForMultipleChoice"),Jjo=o(" (RemBERT model)"),Yjo=l(),FF=a("li"),ihe=a("strong"),Kjo=o("roberta"),Zjo=o(" \u2014 "),tV=a("a"),eDo=o("RobertaForMultipleChoice"),oDo=o(" (RoBERTa model)"),rDo=l(),TF=a("li"),dhe=a("strong"),tDo=o("roformer"),aDo=o(" \u2014 "),aV=a("a"),nDo=o("RoFormerForMultipleChoice"),sDo=o(" (RoFormer model)"),lDo=l(),MF=a("li"),che=a("strong"),iDo=o("squeezebert"),dDo=o(" \u2014 "),nV=a("a"),cDo=o("SqueezeBertForMultipleChoice"),mDo=o(" (SqueezeBERT model)"),fDo=l(),EF=a("li"),mhe=a("strong"),gDo=o("xlm"),hDo=o(" \u2014 "),sV=a("a"),uDo=o("XLMForMultipleChoice"),pDo=o(" (XLM model)"),_Do=l(),CF=a("li"),fhe=a("strong"),bDo=o("xlm-roberta"),vDo=o(" \u2014 "),lV=a("a"),FDo=o("XLMRobertaForMultipleChoice"),TDo=o(" (XLM-RoBERTa model)"),MDo=l(),wF=a("li"),ghe=a("strong"),EDo=o("xlm-roberta-xl"),CDo=o(" \u2014 "),iV=a("a"),wDo=o("XLMRobertaXLForMultipleChoice"),ADo=o(" (XLM-RoBERTa-XL model)"),LDo=l(),AF=a("li"),hhe=a("strong"),yDo=o("xlnet"),xDo=o(" \u2014 "),dV=a("a"),$Do=o("XLNetForMultipleChoice"),kDo=o(" (XLNet model)"),SDo=l(),LF=a("li"),uhe=a("strong"),RDo=o("yoso"),PDo=o(" \u2014 "),cV=a("a"),BDo=o("YosoForMultipleChoice"),IDo=o(" (YOSO model)"),NDo=l(),yF=a("p"),qDo=o("The model is set in evaluation mode by default using "),phe=a("code"),jDo=o("model.eval()"),DDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=a("code"),GDo=o("model.train()"),ODo=l(),F(xF.$$.fragment),Xje=l(),Qi=a("h2"),$F=a("a"),bhe=a("span"),F(Ky.$$.fragment),VDo=l(),vhe=a("span"),XDo=o("AutoModelForNextSentencePrediction"),zje=l(),Bo=a("div"),F(Zy.$$.fragment),zDo=l(),Hi=a("p"),WDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mV=a("a"),QDo=o("from_pretrained()"),HDo=o(" class method or the "),fV=a("a"),UDo=o("from_config()"),JDo=o(` class
method.`),YDo=l(),e7=a("p"),KDo=o("This class cannot be instantiated directly using "),Fhe=a("code"),ZDo=o("__init__()"),eGo=o(" (throws an error)."),oGo=l(),ct=a("div"),F(o7.$$.fragment),rGo=l(),The=a("p"),tGo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aGo=l(),Ui=a("p"),nGo=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),sGo=o("not"),lGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=a("a"),iGo=o("from_pretrained()"),dGo=o(" to load the model weights."),cGo=l(),F(kF.$$.fragment),mGo=l(),to=a("div"),F(r7.$$.fragment),fGo=l(),Ehe=a("p"),gGo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),hGo=l(),Ba=a("p"),uGo=o("The model class to instantiate is selected based on the "),Che=a("code"),pGo=o("model_type"),_Go=o(` property of the config object (either
passed as an argument or loaded from `),whe=a("code"),bGo=o("pretrained_model_name_or_path"),vGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=a("code"),FGo=o("pretrained_model_name_or_path"),TGo=o(":"),MGo=l(),Yr=a("ul"),SF=a("li"),Lhe=a("strong"),EGo=o("bert"),CGo=o(" \u2014 "),hV=a("a"),wGo=o("BertForNextSentencePrediction"),AGo=o(" (BERT model)"),LGo=l(),RF=a("li"),yhe=a("strong"),yGo=o("fnet"),xGo=o(" \u2014 "),uV=a("a"),$Go=o("FNetForNextSentencePrediction"),kGo=o(" (FNet model)"),SGo=l(),PF=a("li"),xhe=a("strong"),RGo=o("megatron-bert"),PGo=o(" \u2014 "),pV=a("a"),BGo=o("MegatronBertForNextSentencePrediction"),IGo=o(" (Megatron-BERT model)"),NGo=l(),BF=a("li"),$he=a("strong"),qGo=o("mobilebert"),jGo=o(" \u2014 "),_V=a("a"),DGo=o("MobileBertForNextSentencePrediction"),GGo=o(" (MobileBERT model)"),OGo=l(),IF=a("li"),khe=a("strong"),VGo=o("qdqbert"),XGo=o(" \u2014 "),bV=a("a"),zGo=o("QDQBertForNextSentencePrediction"),WGo=o(" (QDQBert model)"),QGo=l(),NF=a("p"),HGo=o("The model is set in evaluation mode by default using "),She=a("code"),UGo=o("model.eval()"),JGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=a("code"),YGo=o("model.train()"),KGo=l(),F(qF.$$.fragment),Wje=l(),Ji=a("h2"),jF=a("a"),Phe=a("span"),F(t7.$$.fragment),ZGo=l(),Bhe=a("span"),eOo=o("AutoModelForTokenClassification"),Qje=l(),Io=a("div"),F(a7.$$.fragment),oOo=l(),Yi=a("p"),rOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vV=a("a"),tOo=o("from_pretrained()"),aOo=o(" class method or the "),FV=a("a"),nOo=o("from_config()"),sOo=o(` class
method.`),lOo=l(),n7=a("p"),iOo=o("This class cannot be instantiated directly using "),Ihe=a("code"),dOo=o("__init__()"),cOo=o(" (throws an error)."),mOo=l(),mt=a("div"),F(s7.$$.fragment),fOo=l(),Nhe=a("p"),gOo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hOo=l(),Ki=a("p"),uOo=o(`Note:
Loading a model from its configuration file does `),qhe=a("strong"),pOo=o("not"),_Oo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),bOo=o("from_pretrained()"),vOo=o(" to load the model weights."),FOo=l(),F(DF.$$.fragment),TOo=l(),ao=a("div"),F(l7.$$.fragment),MOo=l(),jhe=a("p"),EOo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),COo=l(),Ia=a("p"),wOo=o("The model class to instantiate is selected based on the "),Dhe=a("code"),AOo=o("model_type"),LOo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),yOo=o("pretrained_model_name_or_path"),xOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),$Oo=o("pretrained_model_name_or_path"),kOo=o(":"),SOo=l(),U=a("ul"),GF=a("li"),Vhe=a("strong"),ROo=o("albert"),POo=o(" \u2014 "),MV=a("a"),BOo=o("AlbertForTokenClassification"),IOo=o(" (ALBERT model)"),NOo=l(),OF=a("li"),Xhe=a("strong"),qOo=o("bert"),jOo=o(" \u2014 "),EV=a("a"),DOo=o("BertForTokenClassification"),GOo=o(" (BERT model)"),OOo=l(),VF=a("li"),zhe=a("strong"),VOo=o("big_bird"),XOo=o(" \u2014 "),CV=a("a"),zOo=o("BigBirdForTokenClassification"),WOo=o(" (BigBird model)"),QOo=l(),XF=a("li"),Whe=a("strong"),HOo=o("camembert"),UOo=o(" \u2014 "),wV=a("a"),JOo=o("CamembertForTokenClassification"),YOo=o(" (CamemBERT model)"),KOo=l(),zF=a("li"),Qhe=a("strong"),ZOo=o("canine"),eVo=o(" \u2014 "),AV=a("a"),oVo=o("CanineForTokenClassification"),rVo=o(" (CANINE model)"),tVo=l(),WF=a("li"),Hhe=a("strong"),aVo=o("convbert"),nVo=o(" \u2014 "),LV=a("a"),sVo=o("ConvBertForTokenClassification"),lVo=o(" (ConvBERT model)"),iVo=l(),QF=a("li"),Uhe=a("strong"),dVo=o("data2vec-text"),cVo=o(" \u2014 "),yV=a("a"),mVo=o("Data2VecTextForTokenClassification"),fVo=o(" (Data2VecText model)"),gVo=l(),HF=a("li"),Jhe=a("strong"),hVo=o("deberta"),uVo=o(" \u2014 "),xV=a("a"),pVo=o("DebertaForTokenClassification"),_Vo=o(" (DeBERTa model)"),bVo=l(),UF=a("li"),Yhe=a("strong"),vVo=o("deberta-v2"),FVo=o(" \u2014 "),$V=a("a"),TVo=o("DebertaV2ForTokenClassification"),MVo=o(" (DeBERTa-v2 model)"),EVo=l(),JF=a("li"),Khe=a("strong"),CVo=o("distilbert"),wVo=o(" \u2014 "),kV=a("a"),AVo=o("DistilBertForTokenClassification"),LVo=o(" (DistilBERT model)"),yVo=l(),YF=a("li"),Zhe=a("strong"),xVo=o("electra"),$Vo=o(" \u2014 "),SV=a("a"),kVo=o("ElectraForTokenClassification"),SVo=o(" (ELECTRA model)"),RVo=l(),KF=a("li"),eue=a("strong"),PVo=o("flaubert"),BVo=o(" \u2014 "),RV=a("a"),IVo=o("FlaubertForTokenClassification"),NVo=o(" (FlauBERT model)"),qVo=l(),ZF=a("li"),oue=a("strong"),jVo=o("fnet"),DVo=o(" \u2014 "),PV=a("a"),GVo=o("FNetForTokenClassification"),OVo=o(" (FNet model)"),VVo=l(),e1=a("li"),rue=a("strong"),XVo=o("funnel"),zVo=o(" \u2014 "),BV=a("a"),WVo=o("FunnelForTokenClassification"),QVo=o(" (Funnel Transformer model)"),HVo=l(),o1=a("li"),tue=a("strong"),UVo=o("gpt2"),JVo=o(" \u2014 "),IV=a("a"),YVo=o("GPT2ForTokenClassification"),KVo=o(" (OpenAI GPT-2 model)"),ZVo=l(),r1=a("li"),aue=a("strong"),eXo=o("ibert"),oXo=o(" \u2014 "),NV=a("a"),rXo=o("IBertForTokenClassification"),tXo=o(" (I-BERT model)"),aXo=l(),t1=a("li"),nue=a("strong"),nXo=o("layoutlm"),sXo=o(" \u2014 "),qV=a("a"),lXo=o("LayoutLMForTokenClassification"),iXo=o(" (LayoutLM model)"),dXo=l(),a1=a("li"),sue=a("strong"),cXo=o("layoutlmv2"),mXo=o(" \u2014 "),jV=a("a"),fXo=o("LayoutLMv2ForTokenClassification"),gXo=o(" (LayoutLMv2 model)"),hXo=l(),n1=a("li"),lue=a("strong"),uXo=o("layoutlmv3"),pXo=o(" \u2014 "),DV=a("a"),_Xo=o("LayoutLMv3ForTokenClassification"),bXo=o(" (LayoutLMv3 model)"),vXo=l(),s1=a("li"),iue=a("strong"),FXo=o("longformer"),TXo=o(" \u2014 "),GV=a("a"),MXo=o("LongformerForTokenClassification"),EXo=o(" (Longformer model)"),CXo=l(),l1=a("li"),due=a("strong"),wXo=o("megatron-bert"),AXo=o(" \u2014 "),OV=a("a"),LXo=o("MegatronBertForTokenClassification"),yXo=o(" (Megatron-BERT model)"),xXo=l(),i1=a("li"),cue=a("strong"),$Xo=o("mobilebert"),kXo=o(" \u2014 "),VV=a("a"),SXo=o("MobileBertForTokenClassification"),RXo=o(" (MobileBERT model)"),PXo=l(),d1=a("li"),mue=a("strong"),BXo=o("mpnet"),IXo=o(" \u2014 "),XV=a("a"),NXo=o("MPNetForTokenClassification"),qXo=o(" (MPNet model)"),jXo=l(),c1=a("li"),fue=a("strong"),DXo=o("nystromformer"),GXo=o(" \u2014 "),zV=a("a"),OXo=o("NystromformerForTokenClassification"),VXo=o(" (Nystr\xF6mformer model)"),XXo=l(),m1=a("li"),gue=a("strong"),zXo=o("qdqbert"),WXo=o(" \u2014 "),WV=a("a"),QXo=o("QDQBertForTokenClassification"),HXo=o(" (QDQBert model)"),UXo=l(),f1=a("li"),hue=a("strong"),JXo=o("rembert"),YXo=o(" \u2014 "),QV=a("a"),KXo=o("RemBertForTokenClassification"),ZXo=o(" (RemBERT model)"),ezo=l(),g1=a("li"),uue=a("strong"),ozo=o("roberta"),rzo=o(" \u2014 "),HV=a("a"),tzo=o("RobertaForTokenClassification"),azo=o(" (RoBERTa model)"),nzo=l(),h1=a("li"),pue=a("strong"),szo=o("roformer"),lzo=o(" \u2014 "),UV=a("a"),izo=o("RoFormerForTokenClassification"),dzo=o(" (RoFormer model)"),czo=l(),u1=a("li"),_ue=a("strong"),mzo=o("squeezebert"),fzo=o(" \u2014 "),JV=a("a"),gzo=o("SqueezeBertForTokenClassification"),hzo=o(" (SqueezeBERT model)"),uzo=l(),p1=a("li"),bue=a("strong"),pzo=o("xlm"),_zo=o(" \u2014 "),YV=a("a"),bzo=o("XLMForTokenClassification"),vzo=o(" (XLM model)"),Fzo=l(),_1=a("li"),vue=a("strong"),Tzo=o("xlm-roberta"),Mzo=o(" \u2014 "),KV=a("a"),Ezo=o("XLMRobertaForTokenClassification"),Czo=o(" (XLM-RoBERTa model)"),wzo=l(),b1=a("li"),Fue=a("strong"),Azo=o("xlm-roberta-xl"),Lzo=o(" \u2014 "),ZV=a("a"),yzo=o("XLMRobertaXLForTokenClassification"),xzo=o(" (XLM-RoBERTa-XL model)"),$zo=l(),v1=a("li"),Tue=a("strong"),kzo=o("xlnet"),Szo=o(" \u2014 "),eX=a("a"),Rzo=o("XLNetForTokenClassification"),Pzo=o(" (XLNet model)"),Bzo=l(),F1=a("li"),Mue=a("strong"),Izo=o("yoso"),Nzo=o(" \u2014 "),oX=a("a"),qzo=o("YosoForTokenClassification"),jzo=o(" (YOSO model)"),Dzo=l(),T1=a("p"),Gzo=o("The model is set in evaluation mode by default using "),Eue=a("code"),Ozo=o("model.eval()"),Vzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=a("code"),Xzo=o("model.train()"),zzo=l(),F(M1.$$.fragment),Hje=l(),Zi=a("h2"),E1=a("a"),wue=a("span"),F(i7.$$.fragment),Wzo=l(),Aue=a("span"),Qzo=o("AutoModelForQuestionAnswering"),Uje=l(),No=a("div"),F(d7.$$.fragment),Hzo=l(),ed=a("p"),Uzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rX=a("a"),Jzo=o("from_pretrained()"),Yzo=o(" class method or the "),tX=a("a"),Kzo=o("from_config()"),Zzo=o(` class
method.`),eWo=l(),c7=a("p"),oWo=o("This class cannot be instantiated directly using "),Lue=a("code"),rWo=o("__init__()"),tWo=o(" (throws an error)."),aWo=l(),ft=a("div"),F(m7.$$.fragment),nWo=l(),yue=a("p"),sWo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lWo=l(),od=a("p"),iWo=o(`Note:
Loading a model from its configuration file does `),xue=a("strong"),dWo=o("not"),cWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),mWo=o("from_pretrained()"),fWo=o(" to load the model weights."),gWo=l(),F(C1.$$.fragment),hWo=l(),no=a("div"),F(f7.$$.fragment),uWo=l(),$ue=a("p"),pWo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Wo=l(),Na=a("p"),bWo=o("The model class to instantiate is selected based on the "),kue=a("code"),vWo=o("model_type"),FWo=o(` property of the config object (either
passed as an argument or loaded from `),Sue=a("code"),TWo=o("pretrained_model_name_or_path"),MWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),EWo=o("pretrained_model_name_or_path"),CWo=o(":"),wWo=l(),V=a("ul"),w1=a("li"),Pue=a("strong"),AWo=o("albert"),LWo=o(" \u2014 "),nX=a("a"),yWo=o("AlbertForQuestionAnswering"),xWo=o(" (ALBERT model)"),$Wo=l(),A1=a("li"),Bue=a("strong"),kWo=o("bart"),SWo=o(" \u2014 "),sX=a("a"),RWo=o("BartForQuestionAnswering"),PWo=o(" (BART model)"),BWo=l(),L1=a("li"),Iue=a("strong"),IWo=o("bert"),NWo=o(" \u2014 "),lX=a("a"),qWo=o("BertForQuestionAnswering"),jWo=o(" (BERT model)"),DWo=l(),y1=a("li"),Nue=a("strong"),GWo=o("big_bird"),OWo=o(" \u2014 "),iX=a("a"),VWo=o("BigBirdForQuestionAnswering"),XWo=o(" (BigBird model)"),zWo=l(),x1=a("li"),que=a("strong"),WWo=o("bigbird_pegasus"),QWo=o(" \u2014 "),dX=a("a"),HWo=o("BigBirdPegasusForQuestionAnswering"),UWo=o(" (BigBird-Pegasus model)"),JWo=l(),$1=a("li"),jue=a("strong"),YWo=o("camembert"),KWo=o(" \u2014 "),cX=a("a"),ZWo=o("CamembertForQuestionAnswering"),eQo=o(" (CamemBERT model)"),oQo=l(),k1=a("li"),Due=a("strong"),rQo=o("canine"),tQo=o(" \u2014 "),mX=a("a"),aQo=o("CanineForQuestionAnswering"),nQo=o(" (CANINE model)"),sQo=l(),S1=a("li"),Gue=a("strong"),lQo=o("convbert"),iQo=o(" \u2014 "),fX=a("a"),dQo=o("ConvBertForQuestionAnswering"),cQo=o(" (ConvBERT model)"),mQo=l(),R1=a("li"),Oue=a("strong"),fQo=o("data2vec-text"),gQo=o(" \u2014 "),gX=a("a"),hQo=o("Data2VecTextForQuestionAnswering"),uQo=o(" (Data2VecText model)"),pQo=l(),P1=a("li"),Vue=a("strong"),_Qo=o("deberta"),bQo=o(" \u2014 "),hX=a("a"),vQo=o("DebertaForQuestionAnswering"),FQo=o(" (DeBERTa model)"),TQo=l(),B1=a("li"),Xue=a("strong"),MQo=o("deberta-v2"),EQo=o(" \u2014 "),uX=a("a"),CQo=o("DebertaV2ForQuestionAnswering"),wQo=o(" (DeBERTa-v2 model)"),AQo=l(),I1=a("li"),zue=a("strong"),LQo=o("distilbert"),yQo=o(" \u2014 "),pX=a("a"),xQo=o("DistilBertForQuestionAnswering"),$Qo=o(" (DistilBERT model)"),kQo=l(),N1=a("li"),Wue=a("strong"),SQo=o("electra"),RQo=o(" \u2014 "),_X=a("a"),PQo=o("ElectraForQuestionAnswering"),BQo=o(" (ELECTRA model)"),IQo=l(),q1=a("li"),Que=a("strong"),NQo=o("flaubert"),qQo=o(" \u2014 "),bX=a("a"),jQo=o("FlaubertForQuestionAnsweringSimple"),DQo=o(" (FlauBERT model)"),GQo=l(),j1=a("li"),Hue=a("strong"),OQo=o("fnet"),VQo=o(" \u2014 "),vX=a("a"),XQo=o("FNetForQuestionAnswering"),zQo=o(" (FNet model)"),WQo=l(),D1=a("li"),Uue=a("strong"),QQo=o("funnel"),HQo=o(" \u2014 "),FX=a("a"),UQo=o("FunnelForQuestionAnswering"),JQo=o(" (Funnel Transformer model)"),YQo=l(),G1=a("li"),Jue=a("strong"),KQo=o("gptj"),ZQo=o(" \u2014 "),TX=a("a"),eHo=o("GPTJForQuestionAnswering"),oHo=o(" (GPT-J model)"),rHo=l(),O1=a("li"),Yue=a("strong"),tHo=o("ibert"),aHo=o(" \u2014 "),MX=a("a"),nHo=o("IBertForQuestionAnswering"),sHo=o(" (I-BERT model)"),lHo=l(),V1=a("li"),Kue=a("strong"),iHo=o("layoutlmv2"),dHo=o(" \u2014 "),EX=a("a"),cHo=o("LayoutLMv2ForQuestionAnswering"),mHo=o(" (LayoutLMv2 model)"),fHo=l(),X1=a("li"),Zue=a("strong"),gHo=o("layoutlmv3"),hHo=o(" \u2014 "),CX=a("a"),uHo=o("LayoutLMv3ForQuestionAnswering"),pHo=o(" (LayoutLMv3 model)"),_Ho=l(),z1=a("li"),epe=a("strong"),bHo=o("led"),vHo=o(" \u2014 "),wX=a("a"),FHo=o("LEDForQuestionAnswering"),THo=o(" (LED model)"),MHo=l(),W1=a("li"),ope=a("strong"),EHo=o("longformer"),CHo=o(" \u2014 "),AX=a("a"),wHo=o("LongformerForQuestionAnswering"),AHo=o(" (Longformer model)"),LHo=l(),Q1=a("li"),rpe=a("strong"),yHo=o("lxmert"),xHo=o(" \u2014 "),LX=a("a"),$Ho=o("LxmertForQuestionAnswering"),kHo=o(" (LXMERT model)"),SHo=l(),H1=a("li"),tpe=a("strong"),RHo=o("mbart"),PHo=o(" \u2014 "),yX=a("a"),BHo=o("MBartForQuestionAnswering"),IHo=o(" (mBART model)"),NHo=l(),U1=a("li"),ape=a("strong"),qHo=o("megatron-bert"),jHo=o(" \u2014 "),xX=a("a"),DHo=o("MegatronBertForQuestionAnswering"),GHo=o(" (Megatron-BERT model)"),OHo=l(),J1=a("li"),npe=a("strong"),VHo=o("mobilebert"),XHo=o(" \u2014 "),$X=a("a"),zHo=o("MobileBertForQuestionAnswering"),WHo=o(" (MobileBERT model)"),QHo=l(),Y1=a("li"),spe=a("strong"),HHo=o("mpnet"),UHo=o(" \u2014 "),kX=a("a"),JHo=o("MPNetForQuestionAnswering"),YHo=o(" (MPNet model)"),KHo=l(),K1=a("li"),lpe=a("strong"),ZHo=o("nystromformer"),eUo=o(" \u2014 "),SX=a("a"),oUo=o("NystromformerForQuestionAnswering"),rUo=o(" (Nystr\xF6mformer model)"),tUo=l(),Z1=a("li"),ipe=a("strong"),aUo=o("qdqbert"),nUo=o(" \u2014 "),RX=a("a"),sUo=o("QDQBertForQuestionAnswering"),lUo=o(" (QDQBert model)"),iUo=l(),eT=a("li"),dpe=a("strong"),dUo=o("reformer"),cUo=o(" \u2014 "),PX=a("a"),mUo=o("ReformerForQuestionAnswering"),fUo=o(" (Reformer model)"),gUo=l(),oT=a("li"),cpe=a("strong"),hUo=o("rembert"),uUo=o(" \u2014 "),BX=a("a"),pUo=o("RemBertForQuestionAnswering"),_Uo=o(" (RemBERT model)"),bUo=l(),rT=a("li"),mpe=a("strong"),vUo=o("roberta"),FUo=o(" \u2014 "),IX=a("a"),TUo=o("RobertaForQuestionAnswering"),MUo=o(" (RoBERTa model)"),EUo=l(),tT=a("li"),fpe=a("strong"),CUo=o("roformer"),wUo=o(" \u2014 "),NX=a("a"),AUo=o("RoFormerForQuestionAnswering"),LUo=o(" (RoFormer model)"),yUo=l(),aT=a("li"),gpe=a("strong"),xUo=o("splinter"),$Uo=o(" \u2014 "),qX=a("a"),kUo=o("SplinterForQuestionAnswering"),SUo=o(" (Splinter model)"),RUo=l(),nT=a("li"),hpe=a("strong"),PUo=o("squeezebert"),BUo=o(" \u2014 "),jX=a("a"),IUo=o("SqueezeBertForQuestionAnswering"),NUo=o(" (SqueezeBERT model)"),qUo=l(),sT=a("li"),upe=a("strong"),jUo=o("xlm"),DUo=o(" \u2014 "),DX=a("a"),GUo=o("XLMForQuestionAnsweringSimple"),OUo=o(" (XLM model)"),VUo=l(),lT=a("li"),ppe=a("strong"),XUo=o("xlm-roberta"),zUo=o(" \u2014 "),GX=a("a"),WUo=o("XLMRobertaForQuestionAnswering"),QUo=o(" (XLM-RoBERTa model)"),HUo=l(),iT=a("li"),_pe=a("strong"),UUo=o("xlm-roberta-xl"),JUo=o(" \u2014 "),OX=a("a"),YUo=o("XLMRobertaXLForQuestionAnswering"),KUo=o(" (XLM-RoBERTa-XL model)"),ZUo=l(),dT=a("li"),bpe=a("strong"),eJo=o("xlnet"),oJo=o(" \u2014 "),VX=a("a"),rJo=o("XLNetForQuestionAnsweringSimple"),tJo=o(" (XLNet model)"),aJo=l(),cT=a("li"),vpe=a("strong"),nJo=o("yoso"),sJo=o(" \u2014 "),XX=a("a"),lJo=o("YosoForQuestionAnswering"),iJo=o(" (YOSO model)"),dJo=l(),mT=a("p"),cJo=o("The model is set in evaluation mode by default using "),Fpe=a("code"),mJo=o("model.eval()"),fJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tpe=a("code"),gJo=o("model.train()"),hJo=l(),F(fT.$$.fragment),Jje=l(),rd=a("h2"),gT=a("a"),Mpe=a("span"),F(g7.$$.fragment),uJo=l(),Epe=a("span"),pJo=o("AutoModelForTableQuestionAnswering"),Yje=l(),qo=a("div"),F(h7.$$.fragment),_Jo=l(),td=a("p"),bJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zX=a("a"),vJo=o("from_pretrained()"),FJo=o(" class method or the "),WX=a("a"),TJo=o("from_config()"),MJo=o(` class
method.`),EJo=l(),u7=a("p"),CJo=o("This class cannot be instantiated directly using "),Cpe=a("code"),wJo=o("__init__()"),AJo=o(" (throws an error)."),LJo=l(),gt=a("div"),F(p7.$$.fragment),yJo=l(),wpe=a("p"),xJo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$Jo=l(),ad=a("p"),kJo=o(`Note:
Loading a model from its configuration file does `),Ape=a("strong"),SJo=o("not"),RJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),PJo=o("from_pretrained()"),BJo=o(" to load the model weights."),IJo=l(),F(hT.$$.fragment),NJo=l(),so=a("div"),F(_7.$$.fragment),qJo=l(),Lpe=a("p"),jJo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),DJo=l(),qa=a("p"),GJo=o("The model class to instantiate is selected based on the "),ype=a("code"),OJo=o("model_type"),VJo=o(` property of the config object (either
passed as an argument or loaded from `),xpe=a("code"),XJo=o("pretrained_model_name_or_path"),zJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$pe=a("code"),WJo=o("pretrained_model_name_or_path"),QJo=o(":"),HJo=l(),kpe=a("ul"),uT=a("li"),Spe=a("strong"),UJo=o("tapas"),JJo=o(" \u2014 "),HX=a("a"),YJo=o("TapasForQuestionAnswering"),KJo=o(" (TAPAS model)"),ZJo=l(),pT=a("p"),eYo=o("The model is set in evaluation mode by default using "),Rpe=a("code"),oYo=o("model.eval()"),rYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ppe=a("code"),tYo=o("model.train()"),aYo=l(),F(_T.$$.fragment),Kje=l(),nd=a("h2"),bT=a("a"),Bpe=a("span"),F(b7.$$.fragment),nYo=l(),Ipe=a("span"),sYo=o("AutoModelForImageClassification"),Zje=l(),jo=a("div"),F(v7.$$.fragment),lYo=l(),sd=a("p"),iYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UX=a("a"),dYo=o("from_pretrained()"),cYo=o(" class method or the "),JX=a("a"),mYo=o("from_config()"),fYo=o(` class
method.`),gYo=l(),F7=a("p"),hYo=o("This class cannot be instantiated directly using "),Npe=a("code"),uYo=o("__init__()"),pYo=o(" (throws an error)."),_Yo=l(),ht=a("div"),F(T7.$$.fragment),bYo=l(),qpe=a("p"),vYo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FYo=l(),ld=a("p"),TYo=o(`Note:
Loading a model from its configuration file does `),jpe=a("strong"),MYo=o("not"),EYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),CYo=o("from_pretrained()"),wYo=o(" to load the model weights."),AYo=l(),F(vT.$$.fragment),LYo=l(),lo=a("div"),F(M7.$$.fragment),yYo=l(),Dpe=a("p"),xYo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$Yo=l(),ja=a("p"),kYo=o("The model class to instantiate is selected based on the "),Gpe=a("code"),SYo=o("model_type"),RYo=o(` property of the config object (either
passed as an argument or loaded from `),Ope=a("code"),PYo=o("pretrained_model_name_or_path"),BYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),IYo=o("pretrained_model_name_or_path"),NYo=o(":"),qYo=l(),ve=a("ul"),FT=a("li"),Xpe=a("strong"),jYo=o("beit"),DYo=o(" \u2014 "),KX=a("a"),GYo=o("BeitForImageClassification"),OYo=o(" (BEiT model)"),VYo=l(),TT=a("li"),zpe=a("strong"),XYo=o("convnext"),zYo=o(" \u2014 "),ZX=a("a"),WYo=o("ConvNextForImageClassification"),QYo=o(" (ConvNeXT model)"),HYo=l(),MT=a("li"),Wpe=a("strong"),UYo=o("cvt"),JYo=o(" \u2014 "),ez=a("a"),YYo=o("CvtForImageClassification"),KYo=o(" (CvT model)"),ZYo=l(),ET=a("li"),Qpe=a("strong"),eKo=o("data2vec-vision"),oKo=o(" \u2014 "),oz=a("a"),rKo=o("Data2VecVisionForImageClassification"),tKo=o(" (Data2VecVision model)"),aKo=l(),Bs=a("li"),Hpe=a("strong"),nKo=o("deit"),sKo=o(" \u2014 "),rz=a("a"),lKo=o("DeiTForImageClassification"),iKo=o(" or "),tz=a("a"),dKo=o("DeiTForImageClassificationWithTeacher"),cKo=o(" (DeiT model)"),mKo=l(),CT=a("li"),Upe=a("strong"),fKo=o("imagegpt"),gKo=o(" \u2014 "),az=a("a"),hKo=o("ImageGPTForImageClassification"),uKo=o(" (ImageGPT model)"),pKo=l(),Is=a("li"),Jpe=a("strong"),_Ko=o("levit"),bKo=o(" \u2014 "),nz=a("a"),vKo=o("LevitForImageClassification"),FKo=o(" or "),sz=a("a"),TKo=o("LevitForImageClassificationWithTeacher"),MKo=o(" (LeViT model)"),EKo=l(),ut=a("li"),Ype=a("strong"),CKo=o("perceiver"),wKo=o(" \u2014 "),lz=a("a"),AKo=o("PerceiverForImageClassificationLearned"),LKo=o(" or "),iz=a("a"),yKo=o("PerceiverForImageClassificationFourier"),xKo=o(" or "),dz=a("a"),$Ko=o("PerceiverForImageClassificationConvProcessing"),kKo=o(" (Perceiver model)"),SKo=l(),wT=a("li"),Kpe=a("strong"),RKo=o("poolformer"),PKo=o(" \u2014 "),cz=a("a"),BKo=o("PoolFormerForImageClassification"),IKo=o(" (PoolFormer model)"),NKo=l(),AT=a("li"),Zpe=a("strong"),qKo=o("regnet"),jKo=o(" \u2014 "),mz=a("a"),DKo=o("RegNetForImageClassification"),GKo=o(" (RegNet model)"),OKo=l(),LT=a("li"),e_e=a("strong"),VKo=o("resnet"),XKo=o(" \u2014 "),fz=a("a"),zKo=o("ResNetForImageClassification"),WKo=o(" (ResNet model)"),QKo=l(),yT=a("li"),o_e=a("strong"),HKo=o("segformer"),UKo=o(" \u2014 "),gz=a("a"),JKo=o("SegformerForImageClassification"),YKo=o(" (SegFormer model)"),KKo=l(),xT=a("li"),r_e=a("strong"),ZKo=o("swin"),eZo=o(" \u2014 "),hz=a("a"),oZo=o("SwinForImageClassification"),rZo=o(" (Swin Transformer model)"),tZo=l(),$T=a("li"),t_e=a("strong"),aZo=o("van"),nZo=o(" \u2014 "),uz=a("a"),sZo=o("VanForImageClassification"),lZo=o(" (VAN model)"),iZo=l(),kT=a("li"),a_e=a("strong"),dZo=o("vit"),cZo=o(" \u2014 "),pz=a("a"),mZo=o("ViTForImageClassification"),fZo=o(" (ViT model)"),gZo=l(),ST=a("p"),hZo=o("The model is set in evaluation mode by default using "),n_e=a("code"),uZo=o("model.eval()"),pZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=a("code"),_Zo=o("model.train()"),bZo=l(),F(RT.$$.fragment),eDe=l(),id=a("h2"),PT=a("a"),l_e=a("span"),F(E7.$$.fragment),vZo=l(),i_e=a("span"),FZo=o("AutoModelForVision2Seq"),oDe=l(),Do=a("div"),F(C7.$$.fragment),TZo=l(),dd=a("p"),MZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_z=a("a"),EZo=o("from_pretrained()"),CZo=o(" class method or the "),bz=a("a"),wZo=o("from_config()"),AZo=o(` class
method.`),LZo=l(),w7=a("p"),yZo=o("This class cannot be instantiated directly using "),d_e=a("code"),xZo=o("__init__()"),$Zo=o(" (throws an error)."),kZo=l(),pt=a("div"),F(A7.$$.fragment),SZo=l(),c_e=a("p"),RZo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PZo=l(),cd=a("p"),BZo=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),IZo=o("not"),NZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),qZo=o("from_pretrained()"),jZo=o(" to load the model weights."),DZo=l(),F(BT.$$.fragment),GZo=l(),io=a("div"),F(L7.$$.fragment),OZo=l(),f_e=a("p"),VZo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XZo=l(),Da=a("p"),zZo=o("The model class to instantiate is selected based on the "),g_e=a("code"),WZo=o("model_type"),QZo=o(` property of the config object (either
passed as an argument or loaded from `),h_e=a("code"),HZo=o("pretrained_model_name_or_path"),UZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),JZo=o("pretrained_model_name_or_path"),YZo=o(":"),KZo=l(),p_e=a("ul"),IT=a("li"),__e=a("strong"),ZZo=o("vision-encoder-decoder"),eer=o(" \u2014 "),Fz=a("a"),oer=o("VisionEncoderDecoderModel"),rer=o(" (Vision Encoder decoder model)"),ter=l(),NT=a("p"),aer=o("The model is set in evaluation mode by default using "),b_e=a("code"),ner=o("model.eval()"),ser=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=a("code"),ler=o("model.train()"),ier=l(),F(qT.$$.fragment),rDe=l(),md=a("h2"),jT=a("a"),F_e=a("span"),F(y7.$$.fragment),der=l(),T_e=a("span"),cer=o("AutoModelForAudioClassification"),tDe=l(),Go=a("div"),F(x7.$$.fragment),mer=l(),fd=a("p"),fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Tz=a("a"),ger=o("from_pretrained()"),her=o(" class method or the "),Mz=a("a"),uer=o("from_config()"),per=o(` class
method.`),_er=l(),$7=a("p"),ber=o("This class cannot be instantiated directly using "),M_e=a("code"),ver=o("__init__()"),Fer=o(" (throws an error)."),Ter=l(),_t=a("div"),F(k7.$$.fragment),Mer=l(),E_e=a("p"),Eer=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Cer=l(),gd=a("p"),wer=o(`Note:
Loading a model from its configuration file does `),C_e=a("strong"),Aer=o("not"),Ler=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),yer=o("from_pretrained()"),xer=o(" to load the model weights."),$er=l(),F(DT.$$.fragment),ker=l(),co=a("div"),F(S7.$$.fragment),Ser=l(),w_e=a("p"),Rer=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Per=l(),Ga=a("p"),Ber=o("The model class to instantiate is selected based on the "),A_e=a("code"),Ier=o("model_type"),Ner=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),qer=o("pretrained_model_name_or_path"),jer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),Der=o("pretrained_model_name_or_path"),Ger=o(":"),Oer=l(),Re=a("ul"),GT=a("li"),x_e=a("strong"),Ver=o("data2vec-audio"),Xer=o(" \u2014 "),Cz=a("a"),zer=o("Data2VecAudioForSequenceClassification"),Wer=o(" (Data2VecAudio model)"),Qer=l(),OT=a("li"),$_e=a("strong"),Her=o("hubert"),Uer=o(" \u2014 "),wz=a("a"),Jer=o("HubertForSequenceClassification"),Yer=o(" (Hubert model)"),Ker=l(),VT=a("li"),k_e=a("strong"),Zer=o("sew"),eor=o(" \u2014 "),Az=a("a"),oor=o("SEWForSequenceClassification"),ror=o(" (SEW model)"),tor=l(),XT=a("li"),S_e=a("strong"),aor=o("sew-d"),nor=o(" \u2014 "),Lz=a("a"),sor=o("SEWDForSequenceClassification"),lor=o(" (SEW-D model)"),ior=l(),zT=a("li"),R_e=a("strong"),dor=o("unispeech"),cor=o(" \u2014 "),yz=a("a"),mor=o("UniSpeechForSequenceClassification"),gor=o(" (UniSpeech model)"),hor=l(),WT=a("li"),P_e=a("strong"),uor=o("unispeech-sat"),por=o(" \u2014 "),xz=a("a"),_or=o("UniSpeechSatForSequenceClassification"),bor=o(" (UniSpeechSat model)"),vor=l(),QT=a("li"),B_e=a("strong"),For=o("wav2vec2"),Tor=o(" \u2014 "),$z=a("a"),Mor=o("Wav2Vec2ForSequenceClassification"),Eor=o(" (Wav2Vec2 model)"),Cor=l(),HT=a("li"),I_e=a("strong"),wor=o("wav2vec2-conformer"),Aor=o(" \u2014 "),kz=a("a"),Lor=o("Wav2Vec2ConformerForSequenceClassification"),yor=o(" (Wav2Vec2-Conformer model)"),xor=l(),UT=a("li"),N_e=a("strong"),$or=o("wavlm"),kor=o(" \u2014 "),Sz=a("a"),Sor=o("WavLMForSequenceClassification"),Ror=o(" (WavLM model)"),Por=l(),JT=a("p"),Bor=o("The model is set in evaluation mode by default using "),q_e=a("code"),Ior=o("model.eval()"),Nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=a("code"),qor=o("model.train()"),jor=l(),F(YT.$$.fragment),aDe=l(),hd=a("h2"),KT=a("a"),D_e=a("span"),F(R7.$$.fragment),Dor=l(),G_e=a("span"),Gor=o("AutoModelForAudioFrameClassification"),nDe=l(),Oo=a("div"),F(P7.$$.fragment),Oor=l(),ud=a("p"),Vor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Rz=a("a"),Xor=o("from_pretrained()"),zor=o(" class method or the "),Pz=a("a"),Wor=o("from_config()"),Qor=o(` class
method.`),Hor=l(),B7=a("p"),Uor=o("This class cannot be instantiated directly using "),O_e=a("code"),Jor=o("__init__()"),Yor=o(" (throws an error)."),Kor=l(),bt=a("div"),F(I7.$$.fragment),Zor=l(),V_e=a("p"),err=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),orr=l(),pd=a("p"),rrr=o(`Note:
Loading a model from its configuration file does `),X_e=a("strong"),trr=o("not"),arr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),nrr=o("from_pretrained()"),srr=o(" to load the model weights."),lrr=l(),F(ZT.$$.fragment),irr=l(),mo=a("div"),F(N7.$$.fragment),drr=l(),z_e=a("p"),crr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),mrr=l(),Oa=a("p"),frr=o("The model class to instantiate is selected based on the "),W_e=a("code"),grr=o("model_type"),hrr=o(` property of the config object (either
passed as an argument or loaded from `),Q_e=a("code"),urr=o("pretrained_model_name_or_path"),prr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=a("code"),_rr=o("pretrained_model_name_or_path"),brr=o(":"),vrr=l(),Kr=a("ul"),eM=a("li"),U_e=a("strong"),Frr=o("data2vec-audio"),Trr=o(" \u2014 "),Iz=a("a"),Mrr=o("Data2VecAudioForAudioFrameClassification"),Err=o(" (Data2VecAudio model)"),Crr=l(),oM=a("li"),J_e=a("strong"),wrr=o("unispeech-sat"),Arr=o(" \u2014 "),Nz=a("a"),Lrr=o("UniSpeechSatForAudioFrameClassification"),yrr=o(" (UniSpeechSat model)"),xrr=l(),rM=a("li"),Y_e=a("strong"),$rr=o("wav2vec2"),krr=o(" \u2014 "),qz=a("a"),Srr=o("Wav2Vec2ForAudioFrameClassification"),Rrr=o(" (Wav2Vec2 model)"),Prr=l(),tM=a("li"),K_e=a("strong"),Brr=o("wav2vec2-conformer"),Irr=o(" \u2014 "),jz=a("a"),Nrr=o("Wav2Vec2ConformerForAudioFrameClassification"),qrr=o(" (Wav2Vec2-Conformer model)"),jrr=l(),aM=a("li"),Z_e=a("strong"),Drr=o("wavlm"),Grr=o(" \u2014 "),Dz=a("a"),Orr=o("WavLMForAudioFrameClassification"),Vrr=o(" (WavLM model)"),Xrr=l(),nM=a("p"),zrr=o("The model is set in evaluation mode by default using "),ebe=a("code"),Wrr=o("model.eval()"),Qrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=a("code"),Hrr=o("model.train()"),Urr=l(),F(sM.$$.fragment),sDe=l(),_d=a("h2"),lM=a("a"),rbe=a("span"),F(q7.$$.fragment),Jrr=l(),tbe=a("span"),Yrr=o("AutoModelForCTC"),lDe=l(),Vo=a("div"),F(j7.$$.fragment),Krr=l(),bd=a("p"),Zrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Gz=a("a"),etr=o("from_pretrained()"),otr=o(" class method or the "),Oz=a("a"),rtr=o("from_config()"),ttr=o(` class
method.`),atr=l(),D7=a("p"),ntr=o("This class cannot be instantiated directly using "),abe=a("code"),str=o("__init__()"),ltr=o(" (throws an error)."),itr=l(),vt=a("div"),F(G7.$$.fragment),dtr=l(),nbe=a("p"),ctr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),mtr=l(),vd=a("p"),ftr=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),gtr=o("not"),htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),utr=o("from_pretrained()"),ptr=o(" to load the model weights."),_tr=l(),F(iM.$$.fragment),btr=l(),fo=a("div"),F(O7.$$.fragment),vtr=l(),lbe=a("p"),Ftr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ttr=l(),Va=a("p"),Mtr=o("The model class to instantiate is selected based on the "),ibe=a("code"),Etr=o("model_type"),Ctr=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),Ltr=o("pretrained_model_name_or_path"),ytr=o(":"),xtr=l(),Le=a("ul"),dM=a("li"),mbe=a("strong"),$tr=o("data2vec-audio"),ktr=o(" \u2014 "),Xz=a("a"),Str=o("Data2VecAudioForCTC"),Rtr=o(" (Data2VecAudio model)"),Ptr=l(),cM=a("li"),fbe=a("strong"),Btr=o("hubert"),Itr=o(" \u2014 "),zz=a("a"),Ntr=o("HubertForCTC"),qtr=o(" (Hubert model)"),jtr=l(),mM=a("li"),gbe=a("strong"),Dtr=o("mctct"),Gtr=o(" \u2014 "),Wz=a("a"),Otr=o("MCTCTForCTC"),Vtr=o(" (M-CTC-T model)"),Xtr=l(),fM=a("li"),hbe=a("strong"),ztr=o("sew"),Wtr=o(" \u2014 "),Qz=a("a"),Qtr=o("SEWForCTC"),Htr=o(" (SEW model)"),Utr=l(),gM=a("li"),ube=a("strong"),Jtr=o("sew-d"),Ytr=o(" \u2014 "),Hz=a("a"),Ktr=o("SEWDForCTC"),Ztr=o(" (SEW-D model)"),ear=l(),hM=a("li"),pbe=a("strong"),oar=o("unispeech"),rar=o(" \u2014 "),Uz=a("a"),tar=o("UniSpeechForCTC"),aar=o(" (UniSpeech model)"),nar=l(),uM=a("li"),_be=a("strong"),sar=o("unispeech-sat"),lar=o(" \u2014 "),Jz=a("a"),iar=o("UniSpeechSatForCTC"),dar=o(" (UniSpeechSat model)"),car=l(),pM=a("li"),bbe=a("strong"),mar=o("wav2vec2"),far=o(" \u2014 "),Yz=a("a"),gar=o("Wav2Vec2ForCTC"),har=o(" (Wav2Vec2 model)"),uar=l(),_M=a("li"),vbe=a("strong"),par=o("wav2vec2-conformer"),_ar=o(" \u2014 "),Kz=a("a"),bar=o("Wav2Vec2ConformerForCTC"),Far=o(" (Wav2Vec2-Conformer model)"),Tar=l(),bM=a("li"),Fbe=a("strong"),Mar=o("wavlm"),Ear=o(" \u2014 "),Zz=a("a"),Car=o("WavLMForCTC"),war=o(" (WavLM model)"),Aar=l(),vM=a("p"),Lar=o("The model is set in evaluation mode by default using "),Tbe=a("code"),yar=o("model.eval()"),xar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mbe=a("code"),$ar=o("model.train()"),kar=l(),F(FM.$$.fragment),iDe=l(),Fd=a("h2"),TM=a("a"),Ebe=a("span"),F(V7.$$.fragment),Sar=l(),Cbe=a("span"),Rar=o("AutoModelForSpeechSeq2Seq"),dDe=l(),Xo=a("div"),F(X7.$$.fragment),Par=l(),Td=a("p"),Bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eW=a("a"),Iar=o("from_pretrained()"),Nar=o(" class method or the "),oW=a("a"),qar=o("from_config()"),jar=o(` class
method.`),Dar=l(),z7=a("p"),Gar=o("This class cannot be instantiated directly using "),wbe=a("code"),Oar=o("__init__()"),Var=o(" (throws an error)."),Xar=l(),Ft=a("div"),F(W7.$$.fragment),zar=l(),Abe=a("p"),War=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Qar=l(),Md=a("p"),Har=o(`Note:
Loading a model from its configuration file does `),Lbe=a("strong"),Uar=o("not"),Jar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),Yar=o("from_pretrained()"),Kar=o(" to load the model weights."),Zar=l(),F(MM.$$.fragment),enr=l(),go=a("div"),F(Q7.$$.fragment),onr=l(),ybe=a("p"),rnr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tnr=l(),Xa=a("p"),anr=o("The model class to instantiate is selected based on the "),xbe=a("code"),nnr=o("model_type"),snr=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),lnr=o("pretrained_model_name_or_path"),inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=a("code"),dnr=o("pretrained_model_name_or_path"),cnr=o(":"),mnr=l(),H7=a("ul"),EM=a("li"),Sbe=a("strong"),fnr=o("speech-encoder-decoder"),gnr=o(" \u2014 "),tW=a("a"),hnr=o("SpeechEncoderDecoderModel"),unr=o(" (Speech Encoder decoder model)"),pnr=l(),CM=a("li"),Rbe=a("strong"),_nr=o("speech_to_text"),bnr=o(" \u2014 "),aW=a("a"),vnr=o("Speech2TextForConditionalGeneration"),Fnr=o(" (Speech2Text model)"),Tnr=l(),wM=a("p"),Mnr=o("The model is set in evaluation mode by default using "),Pbe=a("code"),Enr=o("model.eval()"),Cnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bbe=a("code"),wnr=o("model.train()"),Anr=l(),F(AM.$$.fragment),cDe=l(),Ed=a("h2"),LM=a("a"),Ibe=a("span"),F(U7.$$.fragment),Lnr=l(),Nbe=a("span"),ynr=o("AutoModelForAudioXVector"),mDe=l(),zo=a("div"),F(J7.$$.fragment),xnr=l(),Cd=a("p"),$nr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nW=a("a"),knr=o("from_pretrained()"),Snr=o(" class method or the "),sW=a("a"),Rnr=o("from_config()"),Pnr=o(` class
method.`),Bnr=l(),Y7=a("p"),Inr=o("This class cannot be instantiated directly using "),qbe=a("code"),Nnr=o("__init__()"),qnr=o(" (throws an error)."),jnr=l(),Tt=a("div"),F(K7.$$.fragment),Dnr=l(),jbe=a("p"),Gnr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Onr=l(),wd=a("p"),Vnr=o(`Note:
Loading a model from its configuration file does `),Dbe=a("strong"),Xnr=o("not"),znr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),Wnr=o("from_pretrained()"),Qnr=o(" to load the model weights."),Hnr=l(),F(yM.$$.fragment),Unr=l(),ho=a("div"),F(Z7.$$.fragment),Jnr=l(),Gbe=a("p"),Ynr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Knr=l(),za=a("p"),Znr=o("The model class to instantiate is selected based on the "),Obe=a("code"),esr=o("model_type"),osr=o(` property of the config object (either
passed as an argument or loaded from `),Vbe=a("code"),rsr=o("pretrained_model_name_or_path"),tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=a("code"),asr=o("pretrained_model_name_or_path"),nsr=o(":"),ssr=l(),Zr=a("ul"),xM=a("li"),zbe=a("strong"),lsr=o("data2vec-audio"),isr=o(" \u2014 "),iW=a("a"),dsr=o("Data2VecAudioForXVector"),csr=o(" (Data2VecAudio model)"),msr=l(),$M=a("li"),Wbe=a("strong"),fsr=o("unispeech-sat"),gsr=o(" \u2014 "),dW=a("a"),hsr=o("UniSpeechSatForXVector"),usr=o(" (UniSpeechSat model)"),psr=l(),kM=a("li"),Qbe=a("strong"),_sr=o("wav2vec2"),bsr=o(" \u2014 "),cW=a("a"),vsr=o("Wav2Vec2ForXVector"),Fsr=o(" (Wav2Vec2 model)"),Tsr=l(),SM=a("li"),Hbe=a("strong"),Msr=o("wav2vec2-conformer"),Esr=o(" \u2014 "),mW=a("a"),Csr=o("Wav2Vec2ConformerForXVector"),wsr=o(" (Wav2Vec2-Conformer model)"),Asr=l(),RM=a("li"),Ube=a("strong"),Lsr=o("wavlm"),ysr=o(" \u2014 "),fW=a("a"),xsr=o("WavLMForXVector"),$sr=o(" (WavLM model)"),ksr=l(),PM=a("p"),Ssr=o("The model is set in evaluation mode by default using "),Jbe=a("code"),Rsr=o("model.eval()"),Psr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=a("code"),Bsr=o("model.train()"),Isr=l(),F(BM.$$.fragment),fDe=l(),Ad=a("h2"),IM=a("a"),Kbe=a("span"),F(e8.$$.fragment),Nsr=l(),Zbe=a("span"),qsr=o("AutoModelForMaskedImageModeling"),gDe=l(),Wo=a("div"),F(o8.$$.fragment),jsr=l(),Ld=a("p"),Dsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),gW=a("a"),Gsr=o("from_pretrained()"),Osr=o(" class method or the "),hW=a("a"),Vsr=o("from_config()"),Xsr=o(` class
method.`),zsr=l(),r8=a("p"),Wsr=o("This class cannot be instantiated directly using "),e2e=a("code"),Qsr=o("__init__()"),Hsr=o(" (throws an error)."),Usr=l(),Mt=a("div"),F(t8.$$.fragment),Jsr=l(),o2e=a("p"),Ysr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ksr=l(),yd=a("p"),Zsr=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),elr=o("not"),olr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),rlr=o("from_pretrained()"),tlr=o(" to load the model weights."),alr=l(),F(NM.$$.fragment),nlr=l(),uo=a("div"),F(a8.$$.fragment),slr=l(),t2e=a("p"),llr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ilr=l(),Wa=a("p"),dlr=o("The model class to instantiate is selected based on the "),a2e=a("code"),clr=o("model_type"),mlr=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),flr=o("pretrained_model_name_or_path"),glr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),hlr=o("pretrained_model_name_or_path"),ulr=o(":"),plr=l(),xd=a("ul"),qM=a("li"),l2e=a("strong"),_lr=o("deit"),blr=o(" \u2014 "),pW=a("a"),vlr=o("DeiTForMaskedImageModeling"),Flr=o(" (DeiT model)"),Tlr=l(),jM=a("li"),i2e=a("strong"),Mlr=o("swin"),Elr=o(" \u2014 "),_W=a("a"),Clr=o("SwinForMaskedImageModeling"),wlr=o(" (Swin Transformer model)"),Alr=l(),DM=a("li"),d2e=a("strong"),Llr=o("vit"),ylr=o(" \u2014 "),bW=a("a"),xlr=o("ViTForMaskedImageModeling"),$lr=o(" (ViT model)"),klr=l(),GM=a("p"),Slr=o("The model is set in evaluation mode by default using "),c2e=a("code"),Rlr=o("model.eval()"),Plr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=a("code"),Blr=o("model.train()"),Ilr=l(),F(OM.$$.fragment),hDe=l(),$d=a("h2"),VM=a("a"),f2e=a("span"),F(n8.$$.fragment),Nlr=l(),g2e=a("span"),qlr=o("AutoModelForObjectDetection"),uDe=l(),Qo=a("div"),F(s8.$$.fragment),jlr=l(),kd=a("p"),Dlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),vW=a("a"),Glr=o("from_pretrained()"),Olr=o(" class method or the "),FW=a("a"),Vlr=o("from_config()"),Xlr=o(` class
method.`),zlr=l(),l8=a("p"),Wlr=o("This class cannot be instantiated directly using "),h2e=a("code"),Qlr=o("__init__()"),Hlr=o(" (throws an error)."),Ulr=l(),Et=a("div"),F(i8.$$.fragment),Jlr=l(),u2e=a("p"),Ylr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Klr=l(),Sd=a("p"),Zlr=o(`Note:
Loading a model from its configuration file does `),p2e=a("strong"),eir=o("not"),oir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),rir=o("from_pretrained()"),tir=o(" to load the model weights."),air=l(),F(XM.$$.fragment),nir=l(),po=a("div"),F(d8.$$.fragment),sir=l(),_2e=a("p"),lir=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),iir=l(),Qa=a("p"),dir=o("The model class to instantiate is selected based on the "),b2e=a("code"),cir=o("model_type"),mir=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),fir=o("pretrained_model_name_or_path"),gir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=a("code"),hir=o("pretrained_model_name_or_path"),uir=o(":"),pir=l(),c8=a("ul"),zM=a("li"),T2e=a("strong"),_ir=o("detr"),bir=o(" \u2014 "),MW=a("a"),vir=o("DetrForObjectDetection"),Fir=o(" (DETR model)"),Tir=l(),WM=a("li"),M2e=a("strong"),Mir=o("yolos"),Eir=o(" \u2014 "),EW=a("a"),Cir=o("YolosForObjectDetection"),wir=o(" (YOLOS model)"),Air=l(),QM=a("p"),Lir=o("The model is set in evaluation mode by default using "),E2e=a("code"),yir=o("model.eval()"),xir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C2e=a("code"),$ir=o("model.train()"),kir=l(),F(HM.$$.fragment),pDe=l(),Rd=a("h2"),UM=a("a"),w2e=a("span"),F(m8.$$.fragment),Sir=l(),A2e=a("span"),Rir=o("AutoModelForImageSegmentation"),_De=l(),Ho=a("div"),F(f8.$$.fragment),Pir=l(),Pd=a("p"),Bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),CW=a("a"),Iir=o("from_pretrained()"),Nir=o(" class method or the "),wW=a("a"),qir=o("from_config()"),jir=o(` class
method.`),Dir=l(),g8=a("p"),Gir=o("This class cannot be instantiated directly using "),L2e=a("code"),Oir=o("__init__()"),Vir=o(" (throws an error)."),Xir=l(),Ct=a("div"),F(h8.$$.fragment),zir=l(),y2e=a("p"),Wir=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Qir=l(),Bd=a("p"),Hir=o(`Note:
Loading a model from its configuration file does `),x2e=a("strong"),Uir=o("not"),Jir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),Yir=o("from_pretrained()"),Kir=o(" to load the model weights."),Zir=l(),F(JM.$$.fragment),edr=l(),_o=a("div"),F(u8.$$.fragment),odr=l(),$2e=a("p"),rdr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),tdr=l(),Ha=a("p"),adr=o("The model class to instantiate is selected based on the "),k2e=a("code"),ndr=o("model_type"),sdr=o(` property of the config object (either
passed as an argument or loaded from `),S2e=a("code"),ldr=o("pretrained_model_name_or_path"),idr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(":"),mdr=l(),P2e=a("ul"),YM=a("li"),B2e=a("strong"),fdr=o("detr"),gdr=o(" \u2014 "),LW=a("a"),hdr=o("DetrForSegmentation"),udr=o(" (DETR model)"),pdr=l(),KM=a("p"),_dr=o("The model is set in evaluation mode by default using "),I2e=a("code"),bdr=o("model.eval()"),vdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N2e=a("code"),Fdr=o("model.train()"),Tdr=l(),F(ZM.$$.fragment),bDe=l(),Id=a("h2"),e4=a("a"),q2e=a("span"),F(p8.$$.fragment),Mdr=l(),j2e=a("span"),Edr=o("AutoModelForSemanticSegmentation"),vDe=l(),Uo=a("div"),F(_8.$$.fragment),Cdr=l(),Nd=a("p"),wdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yW=a("a"),Adr=o("from_pretrained()"),Ldr=o(" class method or the "),xW=a("a"),ydr=o("from_config()"),xdr=o(` class
method.`),$dr=l(),b8=a("p"),kdr=o("This class cannot be instantiated directly using "),D2e=a("code"),Sdr=o("__init__()"),Rdr=o(" (throws an error)."),Pdr=l(),wt=a("div"),F(v8.$$.fragment),Bdr=l(),G2e=a("p"),Idr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ndr=l(),qd=a("p"),qdr=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),jdr=o("not"),Ddr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),Gdr=o("from_pretrained()"),Odr=o(" to load the model weights."),Vdr=l(),F(o4.$$.fragment),Xdr=l(),bo=a("div"),F(F8.$$.fragment),zdr=l(),V2e=a("p"),Wdr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Qdr=l(),Ua=a("p"),Hdr=o("The model class to instantiate is selected based on the "),X2e=a("code"),Udr=o("model_type"),Jdr=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),Ydr=o("pretrained_model_name_or_path"),Kdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=a("code"),Zdr=o("pretrained_model_name_or_path"),ecr=o(":"),ocr=l(),Ja=a("ul"),r4=a("li"),Q2e=a("strong"),rcr=o("beit"),tcr=o(" \u2014 "),kW=a("a"),acr=o("BeitForSemanticSegmentation"),ncr=o(" (BEiT model)"),scr=l(),t4=a("li"),H2e=a("strong"),lcr=o("data2vec-vision"),icr=o(" \u2014 "),SW=a("a"),dcr=o("Data2VecVisionForSemanticSegmentation"),ccr=o(" (Data2VecVision model)"),mcr=l(),a4=a("li"),U2e=a("strong"),fcr=o("dpt"),gcr=o(" \u2014 "),RW=a("a"),hcr=o("DPTForSemanticSegmentation"),ucr=o(" (DPT model)"),pcr=l(),n4=a("li"),J2e=a("strong"),_cr=o("segformer"),bcr=o(" \u2014 "),PW=a("a"),vcr=o("SegformerForSemanticSegmentation"),Fcr=o(" (SegFormer model)"),Tcr=l(),s4=a("p"),Mcr=o("The model is set in evaluation mode by default using "),Y2e=a("code"),Ecr=o("model.eval()"),Ccr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K2e=a("code"),wcr=o("model.train()"),Acr=l(),F(l4.$$.fragment),FDe=l(),jd=a("h2"),i4=a("a"),Z2e=a("span"),F(T8.$$.fragment),Lcr=l(),eve=a("span"),ycr=o("AutoModelForInstanceSegmentation"),TDe=l(),Jo=a("div"),F(M8.$$.fragment),xcr=l(),Dd=a("p"),$cr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),BW=a("a"),kcr=o("from_pretrained()"),Scr=o(" class method or the "),IW=a("a"),Rcr=o("from_config()"),Pcr=o(` class
method.`),Bcr=l(),E8=a("p"),Icr=o("This class cannot be instantiated directly using "),ove=a("code"),Ncr=o("__init__()"),qcr=o(" (throws an error)."),jcr=l(),At=a("div"),F(C8.$$.fragment),Dcr=l(),rve=a("p"),Gcr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ocr=l(),Gd=a("p"),Vcr=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),Xcr=o("not"),zcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=a("a"),Wcr=o("from_pretrained()"),Qcr=o(" to load the model weights."),Hcr=l(),F(d4.$$.fragment),Ucr=l(),vo=a("div"),F(w8.$$.fragment),Jcr=l(),ave=a("p"),Ycr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Kcr=l(),Ya=a("p"),Zcr=o("The model class to instantiate is selected based on the "),nve=a("code"),emr=o("model_type"),omr=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),rmr=o("pretrained_model_name_or_path"),tmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(":"),smr=l(),ive=a("ul"),c4=a("li"),dve=a("strong"),lmr=o("maskformer"),imr=o(" \u2014 "),qW=a("a"),dmr=o("MaskFormerForInstanceSegmentation"),cmr=o(" (MaskFormer model)"),mmr=l(),m4=a("p"),fmr=o("The model is set in evaluation mode by default using "),cve=a("code"),gmr=o("model.eval()"),hmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=a("code"),umr=o("model.train()"),pmr=l(),F(f4.$$.fragment),MDe=l(),Od=a("h2"),g4=a("a"),fve=a("span"),F(A8.$$.fragment),_mr=l(),gve=a("span"),bmr=o("TFAutoModel"),EDe=l(),Yo=a("div"),F(L8.$$.fragment),vmr=l(),Vd=a("p"),Fmr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jW=a("a"),Tmr=o("from_pretrained()"),Mmr=o(" class method or the "),DW=a("a"),Emr=o("from_config()"),Cmr=o(` class
method.`),wmr=l(),y8=a("p"),Amr=o("This class cannot be instantiated directly using "),hve=a("code"),Lmr=o("__init__()"),ymr=o(" (throws an error)."),xmr=l(),Lt=a("div"),F(x8.$$.fragment),$mr=l(),uve=a("p"),kmr=o("Instantiates one of the base model classes of the library from a configuration."),Smr=l(),Xd=a("p"),Rmr=o(`Note:
Loading a model from its configuration file does `),pve=a("strong"),Pmr=o("not"),Bmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),Imr=o("from_pretrained()"),Nmr=o(" to load the model weights."),qmr=l(),F(h4.$$.fragment),jmr=l(),wr=a("div"),F($8.$$.fragment),Dmr=l(),_ve=a("p"),Gmr=o("Instantiate one of the base model classes of the library from a pretrained model."),Omr=l(),Ka=a("p"),Vmr=o("The model class to instantiate is selected based on the "),bve=a("code"),Xmr=o("model_type"),zmr=o(` property of the config object (either
passed as an argument or loaded from `),vve=a("code"),Wmr=o("pretrained_model_name_or_path"),Qmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=a("code"),Hmr=o("pretrained_model_name_or_path"),Umr=o(":"),Jmr=l(),q=a("ul"),u4=a("li"),Tve=a("strong"),Ymr=o("albert"),Kmr=o(" \u2014 "),OW=a("a"),Zmr=o("TFAlbertModel"),efr=o(" (ALBERT model)"),ofr=l(),p4=a("li"),Mve=a("strong"),rfr=o("bart"),tfr=o(" \u2014 "),VW=a("a"),afr=o("TFBartModel"),nfr=o(" (BART model)"),sfr=l(),_4=a("li"),Eve=a("strong"),lfr=o("bert"),ifr=o(" \u2014 "),XW=a("a"),dfr=o("TFBertModel"),cfr=o(" (BERT model)"),mfr=l(),b4=a("li"),Cve=a("strong"),ffr=o("blenderbot"),gfr=o(" \u2014 "),zW=a("a"),hfr=o("TFBlenderbotModel"),ufr=o(" (Blenderbot model)"),pfr=l(),v4=a("li"),wve=a("strong"),_fr=o("blenderbot-small"),bfr=o(" \u2014 "),WW=a("a"),vfr=o("TFBlenderbotSmallModel"),Ffr=o(" (BlenderbotSmall model)"),Tfr=l(),F4=a("li"),Ave=a("strong"),Mfr=o("camembert"),Efr=o(" \u2014 "),QW=a("a"),Cfr=o("TFCamembertModel"),wfr=o(" (CamemBERT model)"),Afr=l(),T4=a("li"),Lve=a("strong"),Lfr=o("clip"),yfr=o(" \u2014 "),HW=a("a"),xfr=o("TFCLIPModel"),$fr=o(" (CLIP model)"),kfr=l(),M4=a("li"),yve=a("strong"),Sfr=o("convbert"),Rfr=o(" \u2014 "),UW=a("a"),Pfr=o("TFConvBertModel"),Bfr=o(" (ConvBERT model)"),Ifr=l(),E4=a("li"),xve=a("strong"),Nfr=o("convnext"),qfr=o(" \u2014 "),JW=a("a"),jfr=o("TFConvNextModel"),Dfr=o(" (ConvNeXT model)"),Gfr=l(),C4=a("li"),$ve=a("strong"),Ofr=o("ctrl"),Vfr=o(" \u2014 "),YW=a("a"),Xfr=o("TFCTRLModel"),zfr=o(" (CTRL model)"),Wfr=l(),w4=a("li"),kve=a("strong"),Qfr=o("data2vec-vision"),Hfr=o(" \u2014 "),KW=a("a"),Ufr=o("TFData2VecVisionModel"),Jfr=o(" (Data2VecVision model)"),Yfr=l(),A4=a("li"),Sve=a("strong"),Kfr=o("deberta"),Zfr=o(" \u2014 "),ZW=a("a"),egr=o("TFDebertaModel"),ogr=o(" (DeBERTa model)"),rgr=l(),L4=a("li"),Rve=a("strong"),tgr=o("deberta-v2"),agr=o(" \u2014 "),eQ=a("a"),ngr=o("TFDebertaV2Model"),sgr=o(" (DeBERTa-v2 model)"),lgr=l(),y4=a("li"),Pve=a("strong"),igr=o("distilbert"),dgr=o(" \u2014 "),oQ=a("a"),cgr=o("TFDistilBertModel"),mgr=o(" (DistilBERT model)"),fgr=l(),x4=a("li"),Bve=a("strong"),ggr=o("dpr"),hgr=o(" \u2014 "),rQ=a("a"),ugr=o("TFDPRQuestionEncoder"),pgr=o(" (DPR model)"),_gr=l(),$4=a("li"),Ive=a("strong"),bgr=o("electra"),vgr=o(" \u2014 "),tQ=a("a"),Fgr=o("TFElectraModel"),Tgr=o(" (ELECTRA model)"),Mgr=l(),k4=a("li"),Nve=a("strong"),Egr=o("flaubert"),Cgr=o(" \u2014 "),aQ=a("a"),wgr=o("TFFlaubertModel"),Agr=o(" (FlauBERT model)"),Lgr=l(),Ns=a("li"),qve=a("strong"),ygr=o("funnel"),xgr=o(" \u2014 "),nQ=a("a"),$gr=o("TFFunnelModel"),kgr=o(" or "),sQ=a("a"),Sgr=o("TFFunnelBaseModel"),Rgr=o(" (Funnel Transformer model)"),Pgr=l(),S4=a("li"),jve=a("strong"),Bgr=o("gpt2"),Igr=o(" \u2014 "),lQ=a("a"),Ngr=o("TFGPT2Model"),qgr=o(" (OpenAI GPT-2 model)"),jgr=l(),R4=a("li"),Dve=a("strong"),Dgr=o("gptj"),Ggr=o(" \u2014 "),iQ=a("a"),Ogr=o("TFGPTJModel"),Vgr=o(" (GPT-J model)"),Xgr=l(),P4=a("li"),Gve=a("strong"),zgr=o("hubert"),Wgr=o(" \u2014 "),dQ=a("a"),Qgr=o("TFHubertModel"),Hgr=o(" (Hubert model)"),Ugr=l(),B4=a("li"),Ove=a("strong"),Jgr=o("layoutlm"),Ygr=o(" \u2014 "),cQ=a("a"),Kgr=o("TFLayoutLMModel"),Zgr=o(" (LayoutLM model)"),ehr=l(),I4=a("li"),Vve=a("strong"),ohr=o("led"),rhr=o(" \u2014 "),mQ=a("a"),thr=o("TFLEDModel"),ahr=o(" (LED model)"),nhr=l(),N4=a("li"),Xve=a("strong"),shr=o("longformer"),lhr=o(" \u2014 "),fQ=a("a"),ihr=o("TFLongformerModel"),dhr=o(" (Longformer model)"),chr=l(),q4=a("li"),zve=a("strong"),mhr=o("lxmert"),fhr=o(" \u2014 "),gQ=a("a"),ghr=o("TFLxmertModel"),hhr=o(" (LXMERT model)"),uhr=l(),j4=a("li"),Wve=a("strong"),phr=o("marian"),_hr=o(" \u2014 "),hQ=a("a"),bhr=o("TFMarianModel"),vhr=o(" (Marian model)"),Fhr=l(),D4=a("li"),Qve=a("strong"),Thr=o("mbart"),Mhr=o(" \u2014 "),uQ=a("a"),Ehr=o("TFMBartModel"),Chr=o(" (mBART model)"),whr=l(),G4=a("li"),Hve=a("strong"),Ahr=o("mobilebert"),Lhr=o(" \u2014 "),pQ=a("a"),yhr=o("TFMobileBertModel"),xhr=o(" (MobileBERT model)"),$hr=l(),O4=a("li"),Uve=a("strong"),khr=o("mpnet"),Shr=o(" \u2014 "),_Q=a("a"),Rhr=o("TFMPNetModel"),Phr=o(" (MPNet model)"),Bhr=l(),V4=a("li"),Jve=a("strong"),Ihr=o("mt5"),Nhr=o(" \u2014 "),bQ=a("a"),qhr=o("TFMT5Model"),jhr=o(" (MT5 model)"),Dhr=l(),X4=a("li"),Yve=a("strong"),Ghr=o("openai-gpt"),Ohr=o(" \u2014 "),vQ=a("a"),Vhr=o("TFOpenAIGPTModel"),Xhr=o(" (OpenAI GPT model)"),zhr=l(),z4=a("li"),Kve=a("strong"),Whr=o("opt"),Qhr=o(" \u2014 "),FQ=a("a"),Hhr=o("TFOPTModel"),Uhr=o(" (OPT model)"),Jhr=l(),W4=a("li"),Zve=a("strong"),Yhr=o("pegasus"),Khr=o(" \u2014 "),TQ=a("a"),Zhr=o("TFPegasusModel"),eur=o(" (Pegasus model)"),our=l(),Q4=a("li"),eFe=a("strong"),rur=o("rembert"),tur=o(" \u2014 "),MQ=a("a"),aur=o("TFRemBertModel"),nur=o(" (RemBERT model)"),sur=l(),H4=a("li"),oFe=a("strong"),lur=o("roberta"),iur=o(" \u2014 "),EQ=a("a"),dur=o("TFRobertaModel"),cur=o(" (RoBERTa model)"),mur=l(),U4=a("li"),rFe=a("strong"),fur=o("roformer"),gur=o(" \u2014 "),CQ=a("a"),hur=o("TFRoFormerModel"),uur=o(" (RoFormer model)"),pur=l(),J4=a("li"),tFe=a("strong"),_ur=o("speech_to_text"),bur=o(" \u2014 "),wQ=a("a"),vur=o("TFSpeech2TextModel"),Fur=o(" (Speech2Text model)"),Tur=l(),Y4=a("li"),aFe=a("strong"),Mur=o("swin"),Eur=o(" \u2014 "),AQ=a("a"),Cur=o("TFSwinModel"),wur=o(" (Swin Transformer model)"),Aur=l(),K4=a("li"),nFe=a("strong"),Lur=o("t5"),yur=o(" \u2014 "),LQ=a("a"),xur=o("TFT5Model"),$ur=o(" (T5 model)"),kur=l(),Z4=a("li"),sFe=a("strong"),Sur=o("tapas"),Rur=o(" \u2014 "),yQ=a("a"),Pur=o("TFTapasModel"),Bur=o(" (TAPAS model)"),Iur=l(),eE=a("li"),lFe=a("strong"),Nur=o("transfo-xl"),qur=o(" \u2014 "),xQ=a("a"),jur=o("TFTransfoXLModel"),Dur=o(" (Transformer-XL model)"),Gur=l(),oE=a("li"),iFe=a("strong"),Our=o("vit"),Vur=o(" \u2014 "),$Q=a("a"),Xur=o("TFViTModel"),zur=o(" (ViT model)"),Wur=l(),rE=a("li"),dFe=a("strong"),Qur=o("vit_mae"),Hur=o(" \u2014 "),kQ=a("a"),Uur=o("TFViTMAEModel"),Jur=o(" (ViTMAE model)"),Yur=l(),tE=a("li"),cFe=a("strong"),Kur=o("wav2vec2"),Zur=o(" \u2014 "),SQ=a("a"),epr=o("TFWav2Vec2Model"),opr=o(" (Wav2Vec2 model)"),rpr=l(),aE=a("li"),mFe=a("strong"),tpr=o("xlm"),apr=o(" \u2014 "),RQ=a("a"),npr=o("TFXLMModel"),spr=o(" (XLM model)"),lpr=l(),nE=a("li"),fFe=a("strong"),ipr=o("xlm-roberta"),dpr=o(" \u2014 "),PQ=a("a"),cpr=o("TFXLMRobertaModel"),mpr=o(" (XLM-RoBERTa model)"),fpr=l(),sE=a("li"),gFe=a("strong"),gpr=o("xlnet"),hpr=o(" \u2014 "),BQ=a("a"),upr=o("TFXLNetModel"),ppr=o(" (XLNet model)"),_pr=l(),F(lE.$$.fragment),CDe=l(),zd=a("h2"),iE=a("a"),hFe=a("span"),F(k8.$$.fragment),bpr=l(),uFe=a("span"),vpr=o("TFAutoModelForPreTraining"),wDe=l(),Ko=a("div"),F(S8.$$.fragment),Fpr=l(),Wd=a("p"),Tpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IQ=a("a"),Mpr=o("from_pretrained()"),Epr=o(" class method or the "),NQ=a("a"),Cpr=o("from_config()"),wpr=o(` class
method.`),Apr=l(),R8=a("p"),Lpr=o("This class cannot be instantiated directly using "),pFe=a("code"),ypr=o("__init__()"),xpr=o(" (throws an error)."),$pr=l(),yt=a("div"),F(P8.$$.fragment),kpr=l(),_Fe=a("p"),Spr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rpr=l(),Qd=a("p"),Ppr=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),Bpr=o("not"),Ipr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=a("a"),Npr=o("from_pretrained()"),qpr=o(" to load the model weights."),jpr=l(),F(dE.$$.fragment),Dpr=l(),Ar=a("div"),F(B8.$$.fragment),Gpr=l(),vFe=a("p"),Opr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vpr=l(),Za=a("p"),Xpr=o("The model class to instantiate is selected based on the "),FFe=a("code"),zpr=o("model_type"),Wpr=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),Qpr=o("pretrained_model_name_or_path"),Hpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),Upr=o("pretrained_model_name_or_path"),Jpr=o(":"),Ypr=l(),se=a("ul"),cE=a("li"),EFe=a("strong"),Kpr=o("albert"),Zpr=o(" \u2014 "),jQ=a("a"),e_r=o("TFAlbertForPreTraining"),o_r=o(" (ALBERT model)"),r_r=l(),mE=a("li"),CFe=a("strong"),t_r=o("bart"),a_r=o(" \u2014 "),DQ=a("a"),n_r=o("TFBartForConditionalGeneration"),s_r=o(" (BART model)"),l_r=l(),fE=a("li"),wFe=a("strong"),i_r=o("bert"),d_r=o(" \u2014 "),GQ=a("a"),c_r=o("TFBertForPreTraining"),m_r=o(" (BERT model)"),f_r=l(),gE=a("li"),AFe=a("strong"),g_r=o("camembert"),h_r=o(" \u2014 "),OQ=a("a"),u_r=o("TFCamembertForMaskedLM"),p_r=o(" (CamemBERT model)"),__r=l(),hE=a("li"),LFe=a("strong"),b_r=o("ctrl"),v_r=o(" \u2014 "),VQ=a("a"),F_r=o("TFCTRLLMHeadModel"),T_r=o(" (CTRL model)"),M_r=l(),uE=a("li"),yFe=a("strong"),E_r=o("distilbert"),C_r=o(" \u2014 "),XQ=a("a"),w_r=o("TFDistilBertForMaskedLM"),A_r=o(" (DistilBERT model)"),L_r=l(),pE=a("li"),xFe=a("strong"),y_r=o("electra"),x_r=o(" \u2014 "),zQ=a("a"),$_r=o("TFElectraForPreTraining"),k_r=o(" (ELECTRA model)"),S_r=l(),_E=a("li"),$Fe=a("strong"),R_r=o("flaubert"),P_r=o(" \u2014 "),WQ=a("a"),B_r=o("TFFlaubertWithLMHeadModel"),I_r=o(" (FlauBERT model)"),N_r=l(),bE=a("li"),kFe=a("strong"),q_r=o("funnel"),j_r=o(" \u2014 "),QQ=a("a"),D_r=o("TFFunnelForPreTraining"),G_r=o(" (Funnel Transformer model)"),O_r=l(),vE=a("li"),SFe=a("strong"),V_r=o("gpt2"),X_r=o(" \u2014 "),HQ=a("a"),z_r=o("TFGPT2LMHeadModel"),W_r=o(" (OpenAI GPT-2 model)"),Q_r=l(),FE=a("li"),RFe=a("strong"),H_r=o("layoutlm"),U_r=o(" \u2014 "),UQ=a("a"),J_r=o("TFLayoutLMForMaskedLM"),Y_r=o(" (LayoutLM model)"),K_r=l(),TE=a("li"),PFe=a("strong"),Z_r=o("lxmert"),ebr=o(" \u2014 "),JQ=a("a"),obr=o("TFLxmertForPreTraining"),rbr=o(" (LXMERT model)"),tbr=l(),ME=a("li"),BFe=a("strong"),abr=o("mobilebert"),nbr=o(" \u2014 "),YQ=a("a"),sbr=o("TFMobileBertForPreTraining"),lbr=o(" (MobileBERT model)"),ibr=l(),EE=a("li"),IFe=a("strong"),dbr=o("mpnet"),cbr=o(" \u2014 "),KQ=a("a"),mbr=o("TFMPNetForMaskedLM"),fbr=o(" (MPNet model)"),gbr=l(),CE=a("li"),NFe=a("strong"),hbr=o("openai-gpt"),ubr=o(" \u2014 "),ZQ=a("a"),pbr=o("TFOpenAIGPTLMHeadModel"),_br=o(" (OpenAI GPT model)"),bbr=l(),wE=a("li"),qFe=a("strong"),vbr=o("roberta"),Fbr=o(" \u2014 "),eH=a("a"),Tbr=o("TFRobertaForMaskedLM"),Mbr=o(" (RoBERTa model)"),Ebr=l(),AE=a("li"),jFe=a("strong"),Cbr=o("t5"),wbr=o(" \u2014 "),oH=a("a"),Abr=o("TFT5ForConditionalGeneration"),Lbr=o(" (T5 model)"),ybr=l(),LE=a("li"),DFe=a("strong"),xbr=o("tapas"),$br=o(" \u2014 "),rH=a("a"),kbr=o("TFTapasForMaskedLM"),Sbr=o(" (TAPAS model)"),Rbr=l(),yE=a("li"),GFe=a("strong"),Pbr=o("transfo-xl"),Bbr=o(" \u2014 "),tH=a("a"),Ibr=o("TFTransfoXLLMHeadModel"),Nbr=o(" (Transformer-XL model)"),qbr=l(),xE=a("li"),OFe=a("strong"),jbr=o("vit_mae"),Dbr=o(" \u2014 "),aH=a("a"),Gbr=o("TFViTMAEForPreTraining"),Obr=o(" (ViTMAE model)"),Vbr=l(),$E=a("li"),VFe=a("strong"),Xbr=o("xlm"),zbr=o(" \u2014 "),nH=a("a"),Wbr=o("TFXLMWithLMHeadModel"),Qbr=o(" (XLM model)"),Hbr=l(),kE=a("li"),XFe=a("strong"),Ubr=o("xlm-roberta"),Jbr=o(" \u2014 "),sH=a("a"),Ybr=o("TFXLMRobertaForMaskedLM"),Kbr=o(" (XLM-RoBERTa model)"),Zbr=l(),SE=a("li"),zFe=a("strong"),e2r=o("xlnet"),o2r=o(" \u2014 "),lH=a("a"),r2r=o("TFXLNetLMHeadModel"),t2r=o(" (XLNet model)"),a2r=l(),F(RE.$$.fragment),ADe=l(),Hd=a("h2"),PE=a("a"),WFe=a("span"),F(I8.$$.fragment),n2r=l(),QFe=a("span"),s2r=o("TFAutoModelForCausalLM"),LDe=l(),Zo=a("div"),F(N8.$$.fragment),l2r=l(),Ud=a("p"),i2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iH=a("a"),d2r=o("from_pretrained()"),c2r=o(" class method or the "),dH=a("a"),m2r=o("from_config()"),f2r=o(` class
method.`),g2r=l(),q8=a("p"),h2r=o("This class cannot be instantiated directly using "),HFe=a("code"),u2r=o("__init__()"),p2r=o(" (throws an error)."),_2r=l(),xt=a("div"),F(j8.$$.fragment),b2r=l(),UFe=a("p"),v2r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),F2r=l(),Jd=a("p"),T2r=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),M2r=o("not"),E2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),C2r=o("from_pretrained()"),w2r=o(" to load the model weights."),A2r=l(),F(BE.$$.fragment),L2r=l(),Lr=a("div"),F(D8.$$.fragment),y2r=l(),YFe=a("p"),x2r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$2r=l(),en=a("p"),k2r=o("The model class to instantiate is selected based on the "),KFe=a("code"),S2r=o("model_type"),R2r=o(` property of the config object (either
passed as an argument or loaded from `),ZFe=a("code"),P2r=o("pretrained_model_name_or_path"),B2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),I2r=o("pretrained_model_name_or_path"),N2r=o(":"),q2r=l(),Me=a("ul"),IE=a("li"),o1e=a("strong"),j2r=o("bert"),D2r=o(" \u2014 "),mH=a("a"),G2r=o("TFBertLMHeadModel"),O2r=o(" (BERT model)"),V2r=l(),NE=a("li"),r1e=a("strong"),X2r=o("camembert"),z2r=o(" \u2014 "),fH=a("a"),W2r=o("TFCamembertForCausalLM"),Q2r=o(" (CamemBERT model)"),H2r=l(),qE=a("li"),t1e=a("strong"),U2r=o("ctrl"),J2r=o(" \u2014 "),gH=a("a"),Y2r=o("TFCTRLLMHeadModel"),K2r=o(" (CTRL model)"),Z2r=l(),jE=a("li"),a1e=a("strong"),evr=o("gpt2"),ovr=o(" \u2014 "),hH=a("a"),rvr=o("TFGPT2LMHeadModel"),tvr=o(" (OpenAI GPT-2 model)"),avr=l(),DE=a("li"),n1e=a("strong"),nvr=o("gptj"),svr=o(" \u2014 "),uH=a("a"),lvr=o("TFGPTJForCausalLM"),ivr=o(" (GPT-J model)"),dvr=l(),GE=a("li"),s1e=a("strong"),cvr=o("openai-gpt"),mvr=o(" \u2014 "),pH=a("a"),fvr=o("TFOpenAIGPTLMHeadModel"),gvr=o(" (OpenAI GPT model)"),hvr=l(),OE=a("li"),l1e=a("strong"),uvr=o("opt"),pvr=o(" \u2014 "),_H=a("a"),_vr=o("TFOPTForCausalLM"),bvr=o(" (OPT model)"),vvr=l(),VE=a("li"),i1e=a("strong"),Fvr=o("rembert"),Tvr=o(" \u2014 "),bH=a("a"),Mvr=o("TFRemBertForCausalLM"),Evr=o(" (RemBERT model)"),Cvr=l(),XE=a("li"),d1e=a("strong"),wvr=o("roberta"),Avr=o(" \u2014 "),vH=a("a"),Lvr=o("TFRobertaForCausalLM"),yvr=o(" (RoBERTa model)"),xvr=l(),zE=a("li"),c1e=a("strong"),$vr=o("roformer"),kvr=o(" \u2014 "),FH=a("a"),Svr=o("TFRoFormerForCausalLM"),Rvr=o(" (RoFormer model)"),Pvr=l(),WE=a("li"),m1e=a("strong"),Bvr=o("transfo-xl"),Ivr=o(" \u2014 "),TH=a("a"),Nvr=o("TFTransfoXLLMHeadModel"),qvr=o(" (Transformer-XL model)"),jvr=l(),QE=a("li"),f1e=a("strong"),Dvr=o("xlm"),Gvr=o(" \u2014 "),MH=a("a"),Ovr=o("TFXLMWithLMHeadModel"),Vvr=o(" (XLM model)"),Xvr=l(),HE=a("li"),g1e=a("strong"),zvr=o("xlnet"),Wvr=o(" \u2014 "),EH=a("a"),Qvr=o("TFXLNetLMHeadModel"),Hvr=o(" (XLNet model)"),Uvr=l(),F(UE.$$.fragment),yDe=l(),Yd=a("h2"),JE=a("a"),h1e=a("span"),F(G8.$$.fragment),Jvr=l(),u1e=a("span"),Yvr=o("TFAutoModelForImageClassification"),xDe=l(),er=a("div"),F(O8.$$.fragment),Kvr=l(),Kd=a("p"),Zvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CH=a("a"),eFr=o("from_pretrained()"),oFr=o(" class method or the "),wH=a("a"),rFr=o("from_config()"),tFr=o(` class
method.`),aFr=l(),V8=a("p"),nFr=o("This class cannot be instantiated directly using "),p1e=a("code"),sFr=o("__init__()"),lFr=o(" (throws an error)."),iFr=l(),$t=a("div"),F(X8.$$.fragment),dFr=l(),_1e=a("p"),cFr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mFr=l(),Zd=a("p"),fFr=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),gFr=o("not"),hFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),uFr=o("from_pretrained()"),pFr=o(" to load the model weights."),_Fr=l(),F(YE.$$.fragment),bFr=l(),yr=a("div"),F(z8.$$.fragment),vFr=l(),v1e=a("p"),FFr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),TFr=l(),on=a("p"),MFr=o("The model class to instantiate is selected based on the "),F1e=a("code"),EFr=o("model_type"),CFr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),wFr=o("pretrained_model_name_or_path"),AFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),LFr=o("pretrained_model_name_or_path"),yFr=o(":"),xFr=l(),rn=a("ul"),KE=a("li"),E1e=a("strong"),$Fr=o("convnext"),kFr=o(" \u2014 "),LH=a("a"),SFr=o("TFConvNextForImageClassification"),RFr=o(" (ConvNeXT model)"),PFr=l(),ZE=a("li"),C1e=a("strong"),BFr=o("data2vec-vision"),IFr=o(" \u2014 "),yH=a("a"),NFr=o("TFData2VecVisionForImageClassification"),qFr=o(" (Data2VecVision model)"),jFr=l(),eC=a("li"),w1e=a("strong"),DFr=o("swin"),GFr=o(" \u2014 "),xH=a("a"),OFr=o("TFSwinForImageClassification"),VFr=o(" (Swin Transformer model)"),XFr=l(),oC=a("li"),A1e=a("strong"),zFr=o("vit"),WFr=o(" \u2014 "),$H=a("a"),QFr=o("TFViTForImageClassification"),HFr=o(" (ViT model)"),UFr=l(),F(rC.$$.fragment),$De=l(),ec=a("h2"),tC=a("a"),L1e=a("span"),F(W8.$$.fragment),JFr=l(),y1e=a("span"),YFr=o("TFAutoModelForMaskedLM"),kDe=l(),or=a("div"),F(Q8.$$.fragment),KFr=l(),oc=a("p"),ZFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kH=a("a"),e1r=o("from_pretrained()"),o1r=o(" class method or the "),SH=a("a"),r1r=o("from_config()"),t1r=o(` class
method.`),a1r=l(),H8=a("p"),n1r=o("This class cannot be instantiated directly using "),x1e=a("code"),s1r=o("__init__()"),l1r=o(" (throws an error)."),i1r=l(),kt=a("div"),F(U8.$$.fragment),d1r=l(),$1e=a("p"),c1r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),m1r=l(),rc=a("p"),f1r=o(`Note:
Loading a model from its configuration file does `),k1e=a("strong"),g1r=o("not"),h1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),u1r=o("from_pretrained()"),p1r=o(" to load the model weights."),_1r=l(),F(aC.$$.fragment),b1r=l(),xr=a("div"),F(J8.$$.fragment),v1r=l(),S1e=a("p"),F1r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),T1r=l(),tn=a("p"),M1r=o("The model class to instantiate is selected based on the "),R1e=a("code"),E1r=o("model_type"),C1r=o(` property of the config object (either
passed as an argument or loaded from `),P1e=a("code"),w1r=o("pretrained_model_name_or_path"),A1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=a("code"),L1r=o("pretrained_model_name_or_path"),y1r=o(":"),x1r=l(),ie=a("ul"),nC=a("li"),I1e=a("strong"),$1r=o("albert"),k1r=o(" \u2014 "),PH=a("a"),S1r=o("TFAlbertForMaskedLM"),R1r=o(" (ALBERT model)"),P1r=l(),sC=a("li"),N1e=a("strong"),B1r=o("bert"),I1r=o(" \u2014 "),BH=a("a"),N1r=o("TFBertForMaskedLM"),q1r=o(" (BERT model)"),j1r=l(),lC=a("li"),q1e=a("strong"),D1r=o("camembert"),G1r=o(" \u2014 "),IH=a("a"),O1r=o("TFCamembertForMaskedLM"),V1r=o(" (CamemBERT model)"),X1r=l(),iC=a("li"),j1e=a("strong"),z1r=o("convbert"),W1r=o(" \u2014 "),NH=a("a"),Q1r=o("TFConvBertForMaskedLM"),H1r=o(" (ConvBERT model)"),U1r=l(),dC=a("li"),D1e=a("strong"),J1r=o("deberta"),Y1r=o(" \u2014 "),qH=a("a"),K1r=o("TFDebertaForMaskedLM"),Z1r=o(" (DeBERTa model)"),eTr=l(),cC=a("li"),G1e=a("strong"),oTr=o("deberta-v2"),rTr=o(" \u2014 "),jH=a("a"),tTr=o("TFDebertaV2ForMaskedLM"),aTr=o(" (DeBERTa-v2 model)"),nTr=l(),mC=a("li"),O1e=a("strong"),sTr=o("distilbert"),lTr=o(" \u2014 "),DH=a("a"),iTr=o("TFDistilBertForMaskedLM"),dTr=o(" (DistilBERT model)"),cTr=l(),fC=a("li"),V1e=a("strong"),mTr=o("electra"),fTr=o(" \u2014 "),GH=a("a"),gTr=o("TFElectraForMaskedLM"),hTr=o(" (ELECTRA model)"),uTr=l(),gC=a("li"),X1e=a("strong"),pTr=o("flaubert"),_Tr=o(" \u2014 "),OH=a("a"),bTr=o("TFFlaubertWithLMHeadModel"),vTr=o(" (FlauBERT model)"),FTr=l(),hC=a("li"),z1e=a("strong"),TTr=o("funnel"),MTr=o(" \u2014 "),VH=a("a"),ETr=o("TFFunnelForMaskedLM"),CTr=o(" (Funnel Transformer model)"),wTr=l(),uC=a("li"),W1e=a("strong"),ATr=o("layoutlm"),LTr=o(" \u2014 "),XH=a("a"),yTr=o("TFLayoutLMForMaskedLM"),xTr=o(" (LayoutLM model)"),$Tr=l(),pC=a("li"),Q1e=a("strong"),kTr=o("longformer"),STr=o(" \u2014 "),zH=a("a"),RTr=o("TFLongformerForMaskedLM"),PTr=o(" (Longformer model)"),BTr=l(),_C=a("li"),H1e=a("strong"),ITr=o("mobilebert"),NTr=o(" \u2014 "),WH=a("a"),qTr=o("TFMobileBertForMaskedLM"),jTr=o(" (MobileBERT model)"),DTr=l(),bC=a("li"),U1e=a("strong"),GTr=o("mpnet"),OTr=o(" \u2014 "),QH=a("a"),VTr=o("TFMPNetForMaskedLM"),XTr=o(" (MPNet model)"),zTr=l(),vC=a("li"),J1e=a("strong"),WTr=o("rembert"),QTr=o(" \u2014 "),HH=a("a"),HTr=o("TFRemBertForMaskedLM"),UTr=o(" (RemBERT model)"),JTr=l(),FC=a("li"),Y1e=a("strong"),YTr=o("roberta"),KTr=o(" \u2014 "),UH=a("a"),ZTr=o("TFRobertaForMaskedLM"),eMr=o(" (RoBERTa model)"),oMr=l(),TC=a("li"),K1e=a("strong"),rMr=o("roformer"),tMr=o(" \u2014 "),JH=a("a"),aMr=o("TFRoFormerForMaskedLM"),nMr=o(" (RoFormer model)"),sMr=l(),MC=a("li"),Z1e=a("strong"),lMr=o("tapas"),iMr=o(" \u2014 "),YH=a("a"),dMr=o("TFTapasForMaskedLM"),cMr=o(" (TAPAS model)"),mMr=l(),EC=a("li"),eTe=a("strong"),fMr=o("xlm"),gMr=o(" \u2014 "),KH=a("a"),hMr=o("TFXLMWithLMHeadModel"),uMr=o(" (XLM model)"),pMr=l(),CC=a("li"),oTe=a("strong"),_Mr=o("xlm-roberta"),bMr=o(" \u2014 "),ZH=a("a"),vMr=o("TFXLMRobertaForMaskedLM"),FMr=o(" (XLM-RoBERTa model)"),TMr=l(),F(wC.$$.fragment),SDe=l(),tc=a("h2"),AC=a("a"),rTe=a("span"),F(Y8.$$.fragment),MMr=l(),tTe=a("span"),EMr=o("TFAutoModelForSeq2SeqLM"),RDe=l(),rr=a("div"),F(K8.$$.fragment),CMr=l(),ac=a("p"),wMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eU=a("a"),AMr=o("from_pretrained()"),LMr=o(" class method or the "),oU=a("a"),yMr=o("from_config()"),xMr=o(` class
method.`),$Mr=l(),Z8=a("p"),kMr=o("This class cannot be instantiated directly using "),aTe=a("code"),SMr=o("__init__()"),RMr=o(" (throws an error)."),PMr=l(),St=a("div"),F(e9.$$.fragment),BMr=l(),nTe=a("p"),IMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NMr=l(),nc=a("p"),qMr=o(`Note:
Loading a model from its configuration file does `),sTe=a("strong"),jMr=o("not"),DMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),GMr=o("from_pretrained()"),OMr=o(" to load the model weights."),VMr=l(),F(LC.$$.fragment),XMr=l(),$r=a("div"),F(o9.$$.fragment),zMr=l(),lTe=a("p"),WMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QMr=l(),an=a("p"),HMr=o("The model class to instantiate is selected based on the "),iTe=a("code"),UMr=o("model_type"),JMr=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),YMr=o("pretrained_model_name_or_path"),KMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),ZMr=o("pretrained_model_name_or_path"),e4r=o(":"),o4r=l(),ye=a("ul"),yC=a("li"),mTe=a("strong"),r4r=o("bart"),t4r=o(" \u2014 "),tU=a("a"),a4r=o("TFBartForConditionalGeneration"),n4r=o(" (BART model)"),s4r=l(),xC=a("li"),fTe=a("strong"),l4r=o("blenderbot"),i4r=o(" \u2014 "),aU=a("a"),d4r=o("TFBlenderbotForConditionalGeneration"),c4r=o(" (Blenderbot model)"),m4r=l(),$C=a("li"),gTe=a("strong"),f4r=o("blenderbot-small"),g4r=o(" \u2014 "),nU=a("a"),h4r=o("TFBlenderbotSmallForConditionalGeneration"),u4r=o(" (BlenderbotSmall model)"),p4r=l(),kC=a("li"),hTe=a("strong"),_4r=o("encoder-decoder"),b4r=o(" \u2014 "),sU=a("a"),v4r=o("TFEncoderDecoderModel"),F4r=o(" (Encoder decoder model)"),T4r=l(),SC=a("li"),uTe=a("strong"),M4r=o("led"),E4r=o(" \u2014 "),lU=a("a"),C4r=o("TFLEDForConditionalGeneration"),w4r=o(" (LED model)"),A4r=l(),RC=a("li"),pTe=a("strong"),L4r=o("marian"),y4r=o(" \u2014 "),iU=a("a"),x4r=o("TFMarianMTModel"),$4r=o(" (Marian model)"),k4r=l(),PC=a("li"),_Te=a("strong"),S4r=o("mbart"),R4r=o(" \u2014 "),dU=a("a"),P4r=o("TFMBartForConditionalGeneration"),B4r=o(" (mBART model)"),I4r=l(),BC=a("li"),bTe=a("strong"),N4r=o("mt5"),q4r=o(" \u2014 "),cU=a("a"),j4r=o("TFMT5ForConditionalGeneration"),D4r=o(" (MT5 model)"),G4r=l(),IC=a("li"),vTe=a("strong"),O4r=o("pegasus"),V4r=o(" \u2014 "),mU=a("a"),X4r=o("TFPegasusForConditionalGeneration"),z4r=o(" (Pegasus model)"),W4r=l(),NC=a("li"),FTe=a("strong"),Q4r=o("t5"),H4r=o(" \u2014 "),fU=a("a"),U4r=o("TFT5ForConditionalGeneration"),J4r=o(" (T5 model)"),Y4r=l(),F(qC.$$.fragment),PDe=l(),sc=a("h2"),jC=a("a"),TTe=a("span"),F(r9.$$.fragment),K4r=l(),MTe=a("span"),Z4r=o("TFAutoModelForSequenceClassification"),BDe=l(),tr=a("div"),F(t9.$$.fragment),eEr=l(),lc=a("p"),oEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gU=a("a"),rEr=o("from_pretrained()"),tEr=o(" class method or the "),hU=a("a"),aEr=o("from_config()"),nEr=o(` class
method.`),sEr=l(),a9=a("p"),lEr=o("This class cannot be instantiated directly using "),ETe=a("code"),iEr=o("__init__()"),dEr=o(" (throws an error)."),cEr=l(),Rt=a("div"),F(n9.$$.fragment),mEr=l(),CTe=a("p"),fEr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gEr=l(),ic=a("p"),hEr=o(`Note:
Loading a model from its configuration file does `),wTe=a("strong"),uEr=o("not"),pEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),_Er=o("from_pretrained()"),bEr=o(" to load the model weights."),vEr=l(),F(DC.$$.fragment),FEr=l(),kr=a("div"),F(s9.$$.fragment),TEr=l(),ATe=a("p"),MEr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EEr=l(),nn=a("p"),CEr=o("The model class to instantiate is selected based on the "),LTe=a("code"),wEr=o("model_type"),AEr=o(` property of the config object (either
passed as an argument or loaded from `),yTe=a("code"),LEr=o("pretrained_model_name_or_path"),yEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),xEr=o("pretrained_model_name_or_path"),$Er=o(":"),kEr=l(),oe=a("ul"),GC=a("li"),$Te=a("strong"),SEr=o("albert"),REr=o(" \u2014 "),pU=a("a"),PEr=o("TFAlbertForSequenceClassification"),BEr=o(" (ALBERT model)"),IEr=l(),OC=a("li"),kTe=a("strong"),NEr=o("bert"),qEr=o(" \u2014 "),_U=a("a"),jEr=o("TFBertForSequenceClassification"),DEr=o(" (BERT model)"),GEr=l(),VC=a("li"),STe=a("strong"),OEr=o("camembert"),VEr=o(" \u2014 "),bU=a("a"),XEr=o("TFCamembertForSequenceClassification"),zEr=o(" (CamemBERT model)"),WEr=l(),XC=a("li"),RTe=a("strong"),QEr=o("convbert"),HEr=o(" \u2014 "),vU=a("a"),UEr=o("TFConvBertForSequenceClassification"),JEr=o(" (ConvBERT model)"),YEr=l(),zC=a("li"),PTe=a("strong"),KEr=o("ctrl"),ZEr=o(" \u2014 "),FU=a("a"),eCr=o("TFCTRLForSequenceClassification"),oCr=o(" (CTRL model)"),rCr=l(),WC=a("li"),BTe=a("strong"),tCr=o("deberta"),aCr=o(" \u2014 "),TU=a("a"),nCr=o("TFDebertaForSequenceClassification"),sCr=o(" (DeBERTa model)"),lCr=l(),QC=a("li"),ITe=a("strong"),iCr=o("deberta-v2"),dCr=o(" \u2014 "),MU=a("a"),cCr=o("TFDebertaV2ForSequenceClassification"),mCr=o(" (DeBERTa-v2 model)"),fCr=l(),HC=a("li"),NTe=a("strong"),gCr=o("distilbert"),hCr=o(" \u2014 "),EU=a("a"),uCr=o("TFDistilBertForSequenceClassification"),pCr=o(" (DistilBERT model)"),_Cr=l(),UC=a("li"),qTe=a("strong"),bCr=o("electra"),vCr=o(" \u2014 "),CU=a("a"),FCr=o("TFElectraForSequenceClassification"),TCr=o(" (ELECTRA model)"),MCr=l(),JC=a("li"),jTe=a("strong"),ECr=o("flaubert"),CCr=o(" \u2014 "),wU=a("a"),wCr=o("TFFlaubertForSequenceClassification"),ACr=o(" (FlauBERT model)"),LCr=l(),YC=a("li"),DTe=a("strong"),yCr=o("funnel"),xCr=o(" \u2014 "),AU=a("a"),$Cr=o("TFFunnelForSequenceClassification"),kCr=o(" (Funnel Transformer model)"),SCr=l(),KC=a("li"),GTe=a("strong"),RCr=o("gpt2"),PCr=o(" \u2014 "),LU=a("a"),BCr=o("TFGPT2ForSequenceClassification"),ICr=o(" (OpenAI GPT-2 model)"),NCr=l(),ZC=a("li"),OTe=a("strong"),qCr=o("gptj"),jCr=o(" \u2014 "),yU=a("a"),DCr=o("TFGPTJForSequenceClassification"),GCr=o(" (GPT-J model)"),OCr=l(),e5=a("li"),VTe=a("strong"),VCr=o("layoutlm"),XCr=o(" \u2014 "),xU=a("a"),zCr=o("TFLayoutLMForSequenceClassification"),WCr=o(" (LayoutLM model)"),QCr=l(),o5=a("li"),XTe=a("strong"),HCr=o("longformer"),UCr=o(" \u2014 "),$U=a("a"),JCr=o("TFLongformerForSequenceClassification"),YCr=o(" (Longformer model)"),KCr=l(),r5=a("li"),zTe=a("strong"),ZCr=o("mobilebert"),e5r=o(" \u2014 "),kU=a("a"),o5r=o("TFMobileBertForSequenceClassification"),r5r=o(" (MobileBERT model)"),t5r=l(),t5=a("li"),WTe=a("strong"),a5r=o("mpnet"),n5r=o(" \u2014 "),SU=a("a"),s5r=o("TFMPNetForSequenceClassification"),l5r=o(" (MPNet model)"),i5r=l(),a5=a("li"),QTe=a("strong"),d5r=o("openai-gpt"),c5r=o(" \u2014 "),RU=a("a"),m5r=o("TFOpenAIGPTForSequenceClassification"),f5r=o(" (OpenAI GPT model)"),g5r=l(),n5=a("li"),HTe=a("strong"),h5r=o("rembert"),u5r=o(" \u2014 "),PU=a("a"),p5r=o("TFRemBertForSequenceClassification"),_5r=o(" (RemBERT model)"),b5r=l(),s5=a("li"),UTe=a("strong"),v5r=o("roberta"),F5r=o(" \u2014 "),BU=a("a"),T5r=o("TFRobertaForSequenceClassification"),M5r=o(" (RoBERTa model)"),E5r=l(),l5=a("li"),JTe=a("strong"),C5r=o("roformer"),w5r=o(" \u2014 "),IU=a("a"),A5r=o("TFRoFormerForSequenceClassification"),L5r=o(" (RoFormer model)"),y5r=l(),i5=a("li"),YTe=a("strong"),x5r=o("tapas"),$5r=o(" \u2014 "),NU=a("a"),k5r=o("TFTapasForSequenceClassification"),S5r=o(" (TAPAS model)"),R5r=l(),d5=a("li"),KTe=a("strong"),P5r=o("transfo-xl"),B5r=o(" \u2014 "),qU=a("a"),I5r=o("TFTransfoXLForSequenceClassification"),N5r=o(" (Transformer-XL model)"),q5r=l(),c5=a("li"),ZTe=a("strong"),j5r=o("xlm"),D5r=o(" \u2014 "),jU=a("a"),G5r=o("TFXLMForSequenceClassification"),O5r=o(" (XLM model)"),V5r=l(),m5=a("li"),eMe=a("strong"),X5r=o("xlm-roberta"),z5r=o(" \u2014 "),DU=a("a"),W5r=o("TFXLMRobertaForSequenceClassification"),Q5r=o(" (XLM-RoBERTa model)"),H5r=l(),f5=a("li"),oMe=a("strong"),U5r=o("xlnet"),J5r=o(" \u2014 "),GU=a("a"),Y5r=o("TFXLNetForSequenceClassification"),K5r=o(" (XLNet model)"),Z5r=l(),F(g5.$$.fragment),IDe=l(),dc=a("h2"),h5=a("a"),rMe=a("span"),F(l9.$$.fragment),e3r=l(),tMe=a("span"),o3r=o("TFAutoModelForMultipleChoice"),NDe=l(),ar=a("div"),F(i9.$$.fragment),r3r=l(),cc=a("p"),t3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OU=a("a"),a3r=o("from_pretrained()"),n3r=o(" class method or the "),VU=a("a"),s3r=o("from_config()"),l3r=o(` class
method.`),i3r=l(),d9=a("p"),d3r=o("This class cannot be instantiated directly using "),aMe=a("code"),c3r=o("__init__()"),m3r=o(" (throws an error)."),f3r=l(),Pt=a("div"),F(c9.$$.fragment),g3r=l(),nMe=a("p"),h3r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),u3r=l(),mc=a("p"),p3r=o(`Note:
Loading a model from its configuration file does `),sMe=a("strong"),_3r=o("not"),b3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=a("a"),v3r=o("from_pretrained()"),F3r=o(" to load the model weights."),T3r=l(),F(u5.$$.fragment),M3r=l(),Sr=a("div"),F(m9.$$.fragment),E3r=l(),lMe=a("p"),C3r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),w3r=l(),sn=a("p"),A3r=o("The model class to instantiate is selected based on the "),iMe=a("code"),L3r=o("model_type"),y3r=o(` property of the config object (either
passed as an argument or loaded from `),dMe=a("code"),x3r=o("pretrained_model_name_or_path"),$3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=a("code"),k3r=o("pretrained_model_name_or_path"),S3r=o(":"),R3r=l(),ue=a("ul"),p5=a("li"),mMe=a("strong"),P3r=o("albert"),B3r=o(" \u2014 "),zU=a("a"),I3r=o("TFAlbertForMultipleChoice"),N3r=o(" (ALBERT model)"),q3r=l(),_5=a("li"),fMe=a("strong"),j3r=o("bert"),D3r=o(" \u2014 "),WU=a("a"),G3r=o("TFBertForMultipleChoice"),O3r=o(" (BERT model)"),V3r=l(),b5=a("li"),gMe=a("strong"),X3r=o("camembert"),z3r=o(" \u2014 "),QU=a("a"),W3r=o("TFCamembertForMultipleChoice"),Q3r=o(" (CamemBERT model)"),H3r=l(),v5=a("li"),hMe=a("strong"),U3r=o("convbert"),J3r=o(" \u2014 "),HU=a("a"),Y3r=o("TFConvBertForMultipleChoice"),K3r=o(" (ConvBERT model)"),Z3r=l(),F5=a("li"),uMe=a("strong"),e0r=o("distilbert"),o0r=o(" \u2014 "),UU=a("a"),r0r=o("TFDistilBertForMultipleChoice"),t0r=o(" (DistilBERT model)"),a0r=l(),T5=a("li"),pMe=a("strong"),n0r=o("electra"),s0r=o(" \u2014 "),JU=a("a"),l0r=o("TFElectraForMultipleChoice"),i0r=o(" (ELECTRA model)"),d0r=l(),M5=a("li"),_Me=a("strong"),c0r=o("flaubert"),m0r=o(" \u2014 "),YU=a("a"),f0r=o("TFFlaubertForMultipleChoice"),g0r=o(" (FlauBERT model)"),h0r=l(),E5=a("li"),bMe=a("strong"),u0r=o("funnel"),p0r=o(" \u2014 "),KU=a("a"),_0r=o("TFFunnelForMultipleChoice"),b0r=o(" (Funnel Transformer model)"),v0r=l(),C5=a("li"),vMe=a("strong"),F0r=o("longformer"),T0r=o(" \u2014 "),ZU=a("a"),M0r=o("TFLongformerForMultipleChoice"),E0r=o(" (Longformer model)"),C0r=l(),w5=a("li"),FMe=a("strong"),w0r=o("mobilebert"),A0r=o(" \u2014 "),eJ=a("a"),L0r=o("TFMobileBertForMultipleChoice"),y0r=o(" (MobileBERT model)"),x0r=l(),A5=a("li"),TMe=a("strong"),$0r=o("mpnet"),k0r=o(" \u2014 "),oJ=a("a"),S0r=o("TFMPNetForMultipleChoice"),R0r=o(" (MPNet model)"),P0r=l(),L5=a("li"),MMe=a("strong"),B0r=o("rembert"),I0r=o(" \u2014 "),rJ=a("a"),N0r=o("TFRemBertForMultipleChoice"),q0r=o(" (RemBERT model)"),j0r=l(),y5=a("li"),EMe=a("strong"),D0r=o("roberta"),G0r=o(" \u2014 "),tJ=a("a"),O0r=o("TFRobertaForMultipleChoice"),V0r=o(" (RoBERTa model)"),X0r=l(),x5=a("li"),CMe=a("strong"),z0r=o("roformer"),W0r=o(" \u2014 "),aJ=a("a"),Q0r=o("TFRoFormerForMultipleChoice"),H0r=o(" (RoFormer model)"),U0r=l(),$5=a("li"),wMe=a("strong"),J0r=o("xlm"),Y0r=o(" \u2014 "),nJ=a("a"),K0r=o("TFXLMForMultipleChoice"),Z0r=o(" (XLM model)"),ewr=l(),k5=a("li"),AMe=a("strong"),owr=o("xlm-roberta"),rwr=o(" \u2014 "),sJ=a("a"),twr=o("TFXLMRobertaForMultipleChoice"),awr=o(" (XLM-RoBERTa model)"),nwr=l(),S5=a("li"),LMe=a("strong"),swr=o("xlnet"),lwr=o(" \u2014 "),lJ=a("a"),iwr=o("TFXLNetForMultipleChoice"),dwr=o(" (XLNet model)"),cwr=l(),F(R5.$$.fragment),qDe=l(),fc=a("h2"),P5=a("a"),yMe=a("span"),F(f9.$$.fragment),mwr=l(),xMe=a("span"),fwr=o("TFAutoModelForNextSentencePrediction"),jDe=l(),nr=a("div"),F(g9.$$.fragment),gwr=l(),gc=a("p"),hwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iJ=a("a"),uwr=o("from_pretrained()"),pwr=o(" class method or the "),dJ=a("a"),_wr=o("from_config()"),bwr=o(` class
method.`),vwr=l(),h9=a("p"),Fwr=o("This class cannot be instantiated directly using "),$Me=a("code"),Twr=o("__init__()"),Mwr=o(" (throws an error)."),Ewr=l(),Bt=a("div"),F(u9.$$.fragment),Cwr=l(),kMe=a("p"),wwr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Awr=l(),hc=a("p"),Lwr=o(`Note:
Loading a model from its configuration file does `),SMe=a("strong"),ywr=o("not"),xwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),$wr=o("from_pretrained()"),kwr=o(" to load the model weights."),Swr=l(),F(B5.$$.fragment),Rwr=l(),Rr=a("div"),F(p9.$$.fragment),Pwr=l(),RMe=a("p"),Bwr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Iwr=l(),ln=a("p"),Nwr=o("The model class to instantiate is selected based on the "),PMe=a("code"),qwr=o("model_type"),jwr=o(` property of the config object (either
passed as an argument or loaded from `),BMe=a("code"),Dwr=o("pretrained_model_name_or_path"),Gwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=a("code"),Owr=o("pretrained_model_name_or_path"),Vwr=o(":"),Xwr=l(),_9=a("ul"),I5=a("li"),NMe=a("strong"),zwr=o("bert"),Wwr=o(" \u2014 "),mJ=a("a"),Qwr=o("TFBertForNextSentencePrediction"),Hwr=o(" (BERT model)"),Uwr=l(),N5=a("li"),qMe=a("strong"),Jwr=o("mobilebert"),Ywr=o(" \u2014 "),fJ=a("a"),Kwr=o("TFMobileBertForNextSentencePrediction"),Zwr=o(" (MobileBERT model)"),eAr=l(),F(q5.$$.fragment),DDe=l(),uc=a("h2"),j5=a("a"),jMe=a("span"),F(b9.$$.fragment),oAr=l(),DMe=a("span"),rAr=o("TFAutoModelForTableQuestionAnswering"),GDe=l(),sr=a("div"),F(v9.$$.fragment),tAr=l(),pc=a("p"),aAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gJ=a("a"),nAr=o("from_pretrained()"),sAr=o(" class method or the "),hJ=a("a"),lAr=o("from_config()"),iAr=o(` class
method.`),dAr=l(),F9=a("p"),cAr=o("This class cannot be instantiated directly using "),GMe=a("code"),mAr=o("__init__()"),fAr=o(" (throws an error)."),gAr=l(),It=a("div"),F(T9.$$.fragment),hAr=l(),OMe=a("p"),uAr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pAr=l(),_c=a("p"),_Ar=o(`Note:
Loading a model from its configuration file does `),VMe=a("strong"),bAr=o("not"),vAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),FAr=o("from_pretrained()"),TAr=o(" to load the model weights."),MAr=l(),F(D5.$$.fragment),EAr=l(),Pr=a("div"),F(M9.$$.fragment),CAr=l(),XMe=a("p"),wAr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),AAr=l(),dn=a("p"),LAr=o("The model class to instantiate is selected based on the "),zMe=a("code"),yAr=o("model_type"),xAr=o(` property of the config object (either
passed as an argument or loaded from `),WMe=a("code"),$Ar=o("pretrained_model_name_or_path"),kAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=a("code"),SAr=o("pretrained_model_name_or_path"),RAr=o(":"),PAr=l(),HMe=a("ul"),G5=a("li"),UMe=a("strong"),BAr=o("tapas"),IAr=o(" \u2014 "),pJ=a("a"),NAr=o("TFTapasForQuestionAnswering"),qAr=o(" (TAPAS model)"),jAr=l(),F(O5.$$.fragment),ODe=l(),bc=a("h2"),V5=a("a"),JMe=a("span"),F(E9.$$.fragment),DAr=l(),YMe=a("span"),GAr=o("TFAutoModelForTokenClassification"),VDe=l(),lr=a("div"),F(C9.$$.fragment),OAr=l(),vc=a("p"),VAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_J=a("a"),XAr=o("from_pretrained()"),zAr=o(" class method or the "),bJ=a("a"),WAr=o("from_config()"),QAr=o(` class
method.`),HAr=l(),w9=a("p"),UAr=o("This class cannot be instantiated directly using "),KMe=a("code"),JAr=o("__init__()"),YAr=o(" (throws an error)."),KAr=l(),Nt=a("div"),F(A9.$$.fragment),ZAr=l(),ZMe=a("p"),e6r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),o6r=l(),Fc=a("p"),r6r=o(`Note:
Loading a model from its configuration file does `),e4e=a("strong"),t6r=o("not"),a6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=a("a"),n6r=o("from_pretrained()"),s6r=o(" to load the model weights."),l6r=l(),F(X5.$$.fragment),i6r=l(),Br=a("div"),F(L9.$$.fragment),d6r=l(),o4e=a("p"),c6r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),m6r=l(),cn=a("p"),f6r=o("The model class to instantiate is selected based on the "),r4e=a("code"),g6r=o("model_type"),h6r=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),u6r=o("pretrained_model_name_or_path"),p6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),_6r=o("pretrained_model_name_or_path"),b6r=o(":"),v6r=l(),de=a("ul"),z5=a("li"),n4e=a("strong"),F6r=o("albert"),T6r=o(" \u2014 "),FJ=a("a"),M6r=o("TFAlbertForTokenClassification"),E6r=o(" (ALBERT model)"),C6r=l(),W5=a("li"),s4e=a("strong"),w6r=o("bert"),A6r=o(" \u2014 "),TJ=a("a"),L6r=o("TFBertForTokenClassification"),y6r=o(" (BERT model)"),x6r=l(),Q5=a("li"),l4e=a("strong"),$6r=o("camembert"),k6r=o(" \u2014 "),MJ=a("a"),S6r=o("TFCamembertForTokenClassification"),R6r=o(" (CamemBERT model)"),P6r=l(),H5=a("li"),i4e=a("strong"),B6r=o("convbert"),I6r=o(" \u2014 "),EJ=a("a"),N6r=o("TFConvBertForTokenClassification"),q6r=o(" (ConvBERT model)"),j6r=l(),U5=a("li"),d4e=a("strong"),D6r=o("deberta"),G6r=o(" \u2014 "),CJ=a("a"),O6r=o("TFDebertaForTokenClassification"),V6r=o(" (DeBERTa model)"),X6r=l(),J5=a("li"),c4e=a("strong"),z6r=o("deberta-v2"),W6r=o(" \u2014 "),wJ=a("a"),Q6r=o("TFDebertaV2ForTokenClassification"),H6r=o(" (DeBERTa-v2 model)"),U6r=l(),Y5=a("li"),m4e=a("strong"),J6r=o("distilbert"),Y6r=o(" \u2014 "),AJ=a("a"),K6r=o("TFDistilBertForTokenClassification"),Z6r=o(" (DistilBERT model)"),eLr=l(),K5=a("li"),f4e=a("strong"),oLr=o("electra"),rLr=o(" \u2014 "),LJ=a("a"),tLr=o("TFElectraForTokenClassification"),aLr=o(" (ELECTRA model)"),nLr=l(),Z5=a("li"),g4e=a("strong"),sLr=o("flaubert"),lLr=o(" \u2014 "),yJ=a("a"),iLr=o("TFFlaubertForTokenClassification"),dLr=o(" (FlauBERT model)"),cLr=l(),e3=a("li"),h4e=a("strong"),mLr=o("funnel"),fLr=o(" \u2014 "),xJ=a("a"),gLr=o("TFFunnelForTokenClassification"),hLr=o(" (Funnel Transformer model)"),uLr=l(),o3=a("li"),u4e=a("strong"),pLr=o("layoutlm"),_Lr=o(" \u2014 "),$J=a("a"),bLr=o("TFLayoutLMForTokenClassification"),vLr=o(" (LayoutLM model)"),FLr=l(),r3=a("li"),p4e=a("strong"),TLr=o("longformer"),MLr=o(" \u2014 "),kJ=a("a"),ELr=o("TFLongformerForTokenClassification"),CLr=o(" (Longformer model)"),wLr=l(),t3=a("li"),_4e=a("strong"),ALr=o("mobilebert"),LLr=o(" \u2014 "),SJ=a("a"),yLr=o("TFMobileBertForTokenClassification"),xLr=o(" (MobileBERT model)"),$Lr=l(),a3=a("li"),b4e=a("strong"),kLr=o("mpnet"),SLr=o(" \u2014 "),RJ=a("a"),RLr=o("TFMPNetForTokenClassification"),PLr=o(" (MPNet model)"),BLr=l(),n3=a("li"),v4e=a("strong"),ILr=o("rembert"),NLr=o(" \u2014 "),PJ=a("a"),qLr=o("TFRemBertForTokenClassification"),jLr=o(" (RemBERT model)"),DLr=l(),s3=a("li"),F4e=a("strong"),GLr=o("roberta"),OLr=o(" \u2014 "),BJ=a("a"),VLr=o("TFRobertaForTokenClassification"),XLr=o(" (RoBERTa model)"),zLr=l(),l3=a("li"),T4e=a("strong"),WLr=o("roformer"),QLr=o(" \u2014 "),IJ=a("a"),HLr=o("TFRoFormerForTokenClassification"),ULr=o(" (RoFormer model)"),JLr=l(),i3=a("li"),M4e=a("strong"),YLr=o("xlm"),KLr=o(" \u2014 "),NJ=a("a"),ZLr=o("TFXLMForTokenClassification"),eyr=o(" (XLM model)"),oyr=l(),d3=a("li"),E4e=a("strong"),ryr=o("xlm-roberta"),tyr=o(" \u2014 "),qJ=a("a"),ayr=o("TFXLMRobertaForTokenClassification"),nyr=o(" (XLM-RoBERTa model)"),syr=l(),c3=a("li"),C4e=a("strong"),lyr=o("xlnet"),iyr=o(" \u2014 "),jJ=a("a"),dyr=o("TFXLNetForTokenClassification"),cyr=o(" (XLNet model)"),myr=l(),F(m3.$$.fragment),XDe=l(),Tc=a("h2"),f3=a("a"),w4e=a("span"),F(y9.$$.fragment),fyr=l(),A4e=a("span"),gyr=o("TFAutoModelForQuestionAnswering"),zDe=l(),ir=a("div"),F(x9.$$.fragment),hyr=l(),Mc=a("p"),uyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DJ=a("a"),pyr=o("from_pretrained()"),_yr=o(" class method or the "),GJ=a("a"),byr=o("from_config()"),vyr=o(` class
method.`),Fyr=l(),$9=a("p"),Tyr=o("This class cannot be instantiated directly using "),L4e=a("code"),Myr=o("__init__()"),Eyr=o(" (throws an error)."),Cyr=l(),qt=a("div"),F(k9.$$.fragment),wyr=l(),y4e=a("p"),Ayr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Lyr=l(),Ec=a("p"),yyr=o(`Note:
Loading a model from its configuration file does `),x4e=a("strong"),xyr=o("not"),$yr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),kyr=o("from_pretrained()"),Syr=o(" to load the model weights."),Ryr=l(),F(g3.$$.fragment),Pyr=l(),Ir=a("div"),F(S9.$$.fragment),Byr=l(),$4e=a("p"),Iyr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Nyr=l(),mn=a("p"),qyr=o("The model class to instantiate is selected based on the "),k4e=a("code"),jyr=o("model_type"),Dyr=o(` property of the config object (either
passed as an argument or loaded from `),S4e=a("code"),Gyr=o("pretrained_model_name_or_path"),Oyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=a("code"),Vyr=o("pretrained_model_name_or_path"),Xyr=o(":"),zyr=l(),ce=a("ul"),h3=a("li"),P4e=a("strong"),Wyr=o("albert"),Qyr=o(" \u2014 "),VJ=a("a"),Hyr=o("TFAlbertForQuestionAnswering"),Uyr=o(" (ALBERT model)"),Jyr=l(),u3=a("li"),B4e=a("strong"),Yyr=o("bert"),Kyr=o(" \u2014 "),XJ=a("a"),Zyr=o("TFBertForQuestionAnswering"),e7r=o(" (BERT model)"),o7r=l(),p3=a("li"),I4e=a("strong"),r7r=o("camembert"),t7r=o(" \u2014 "),zJ=a("a"),a7r=o("TFCamembertForQuestionAnswering"),n7r=o(" (CamemBERT model)"),s7r=l(),_3=a("li"),N4e=a("strong"),l7r=o("convbert"),i7r=o(" \u2014 "),WJ=a("a"),d7r=o("TFConvBertForQuestionAnswering"),c7r=o(" (ConvBERT model)"),m7r=l(),b3=a("li"),q4e=a("strong"),f7r=o("deberta"),g7r=o(" \u2014 "),QJ=a("a"),h7r=o("TFDebertaForQuestionAnswering"),u7r=o(" (DeBERTa model)"),p7r=l(),v3=a("li"),j4e=a("strong"),_7r=o("deberta-v2"),b7r=o(" \u2014 "),HJ=a("a"),v7r=o("TFDebertaV2ForQuestionAnswering"),F7r=o(" (DeBERTa-v2 model)"),T7r=l(),F3=a("li"),D4e=a("strong"),M7r=o("distilbert"),E7r=o(" \u2014 "),UJ=a("a"),C7r=o("TFDistilBertForQuestionAnswering"),w7r=o(" (DistilBERT model)"),A7r=l(),T3=a("li"),G4e=a("strong"),L7r=o("electra"),y7r=o(" \u2014 "),JJ=a("a"),x7r=o("TFElectraForQuestionAnswering"),$7r=o(" (ELECTRA model)"),k7r=l(),M3=a("li"),O4e=a("strong"),S7r=o("flaubert"),R7r=o(" \u2014 "),YJ=a("a"),P7r=o("TFFlaubertForQuestionAnsweringSimple"),B7r=o(" (FlauBERT model)"),I7r=l(),E3=a("li"),V4e=a("strong"),N7r=o("funnel"),q7r=o(" \u2014 "),KJ=a("a"),j7r=o("TFFunnelForQuestionAnswering"),D7r=o(" (Funnel Transformer model)"),G7r=l(),C3=a("li"),X4e=a("strong"),O7r=o("gptj"),V7r=o(" \u2014 "),ZJ=a("a"),X7r=o("TFGPTJForQuestionAnswering"),z7r=o(" (GPT-J model)"),W7r=l(),w3=a("li"),z4e=a("strong"),Q7r=o("longformer"),H7r=o(" \u2014 "),eY=a("a"),U7r=o("TFLongformerForQuestionAnswering"),J7r=o(" (Longformer model)"),Y7r=l(),A3=a("li"),W4e=a("strong"),K7r=o("mobilebert"),Z7r=o(" \u2014 "),oY=a("a"),e8r=o("TFMobileBertForQuestionAnswering"),o8r=o(" (MobileBERT model)"),r8r=l(),L3=a("li"),Q4e=a("strong"),t8r=o("mpnet"),a8r=o(" \u2014 "),rY=a("a"),n8r=o("TFMPNetForQuestionAnswering"),s8r=o(" (MPNet model)"),l8r=l(),y3=a("li"),H4e=a("strong"),i8r=o("rembert"),d8r=o(" \u2014 "),tY=a("a"),c8r=o("TFRemBertForQuestionAnswering"),m8r=o(" (RemBERT model)"),f8r=l(),x3=a("li"),U4e=a("strong"),g8r=o("roberta"),h8r=o(" \u2014 "),aY=a("a"),u8r=o("TFRobertaForQuestionAnswering"),p8r=o(" (RoBERTa model)"),_8r=l(),$3=a("li"),J4e=a("strong"),b8r=o("roformer"),v8r=o(" \u2014 "),nY=a("a"),F8r=o("TFRoFormerForQuestionAnswering"),T8r=o(" (RoFormer model)"),M8r=l(),k3=a("li"),Y4e=a("strong"),E8r=o("xlm"),C8r=o(" \u2014 "),sY=a("a"),w8r=o("TFXLMForQuestionAnsweringSimple"),A8r=o(" (XLM model)"),L8r=l(),S3=a("li"),K4e=a("strong"),y8r=o("xlm-roberta"),x8r=o(" \u2014 "),lY=a("a"),$8r=o("TFXLMRobertaForQuestionAnswering"),k8r=o(" (XLM-RoBERTa model)"),S8r=l(),R3=a("li"),Z4e=a("strong"),R8r=o("xlnet"),P8r=o(" \u2014 "),iY=a("a"),B8r=o("TFXLNetForQuestionAnsweringSimple"),I8r=o(" (XLNet model)"),N8r=l(),F(P3.$$.fragment),WDe=l(),Cc=a("h2"),B3=a("a"),eEe=a("span"),F(R9.$$.fragment),q8r=l(),oEe=a("span"),j8r=o("TFAutoModelForVision2Seq"),QDe=l(),dr=a("div"),F(P9.$$.fragment),D8r=l(),wc=a("p"),G8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dY=a("a"),O8r=o("from_pretrained()"),V8r=o(" class method or the "),cY=a("a"),X8r=o("from_config()"),z8r=o(` class
method.`),W8r=l(),B9=a("p"),Q8r=o("This class cannot be instantiated directly using "),rEe=a("code"),H8r=o("__init__()"),U8r=o(" (throws an error)."),J8r=l(),jt=a("div"),F(I9.$$.fragment),Y8r=l(),tEe=a("p"),K8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Z8r=l(),Ac=a("p"),e9r=o(`Note:
Loading a model from its configuration file does `),aEe=a("strong"),o9r=o("not"),r9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),t9r=o("from_pretrained()"),a9r=o(" to load the model weights."),n9r=l(),F(I3.$$.fragment),s9r=l(),Nr=a("div"),F(N9.$$.fragment),l9r=l(),nEe=a("p"),i9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),d9r=l(),fn=a("p"),c9r=o("The model class to instantiate is selected based on the "),sEe=a("code"),m9r=o("model_type"),f9r=o(` property of the config object (either
passed as an argument or loaded from `),lEe=a("code"),g9r=o("pretrained_model_name_or_path"),h9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=a("code"),u9r=o("pretrained_model_name_or_path"),p9r=o(":"),_9r=l(),dEe=a("ul"),N3=a("li"),cEe=a("strong"),b9r=o("vision-encoder-decoder"),v9r=o(" \u2014 "),fY=a("a"),F9r=o("TFVisionEncoderDecoderModel"),T9r=o(" (Vision Encoder decoder model)"),M9r=l(),F(q3.$$.fragment),HDe=l(),Lc=a("h2"),j3=a("a"),mEe=a("span"),F(q9.$$.fragment),E9r=l(),fEe=a("span"),C9r=o("TFAutoModelForSpeechSeq2Seq"),UDe=l(),cr=a("div"),F(j9.$$.fragment),w9r=l(),yc=a("p"),A9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gY=a("a"),L9r=o("from_pretrained()"),y9r=o(" class method or the "),hY=a("a"),x9r=o("from_config()"),$9r=o(` class
method.`),k9r=l(),D9=a("p"),S9r=o("This class cannot be instantiated directly using "),gEe=a("code"),R9r=o("__init__()"),P9r=o(" (throws an error)."),B9r=l(),Dt=a("div"),F(G9.$$.fragment),I9r=l(),hEe=a("p"),N9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),q9r=l(),xc=a("p"),j9r=o(`Note:
Loading a model from its configuration file does `),uEe=a("strong"),D9r=o("not"),G9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),O9r=o("from_pretrained()"),V9r=o(" to load the model weights."),X9r=l(),F(D3.$$.fragment),z9r=l(),qr=a("div"),F(O9.$$.fragment),W9r=l(),pEe=a("p"),Q9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),H9r=l(),gn=a("p"),U9r=o("The model class to instantiate is selected based on the "),_Ee=a("code"),J9r=o("model_type"),Y9r=o(` property of the config object (either
passed as an argument or loaded from `),bEe=a("code"),K9r=o("pretrained_model_name_or_path"),Z9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=a("code"),exr=o("pretrained_model_name_or_path"),oxr=o(":"),rxr=l(),FEe=a("ul"),G3=a("li"),TEe=a("strong"),txr=o("speech_to_text"),axr=o(" \u2014 "),pY=a("a"),nxr=o("TFSpeech2TextForConditionalGeneration"),sxr=o(" (Speech2Text model)"),lxr=l(),F(O3.$$.fragment),JDe=l(),$c=a("h2"),V3=a("a"),MEe=a("span"),F(V9.$$.fragment),ixr=l(),EEe=a("span"),dxr=o("FlaxAutoModel"),YDe=l(),mr=a("div"),F(X9.$$.fragment),cxr=l(),kc=a("p"),mxr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_Y=a("a"),fxr=o("from_pretrained()"),gxr=o(" class method or the "),bY=a("a"),hxr=o("from_config()"),uxr=o(` class
method.`),pxr=l(),z9=a("p"),_xr=o("This class cannot be instantiated directly using "),CEe=a("code"),bxr=o("__init__()"),vxr=o(" (throws an error)."),Fxr=l(),Gt=a("div"),F(W9.$$.fragment),Txr=l(),wEe=a("p"),Mxr=o("Instantiates one of the base model classes of the library from a configuration."),Exr=l(),Sc=a("p"),Cxr=o(`Note:
Loading a model from its configuration file does `),AEe=a("strong"),wxr=o("not"),Axr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=a("a"),Lxr=o("from_pretrained()"),yxr=o(" to load the model weights."),xxr=l(),F(X3.$$.fragment),$xr=l(),jr=a("div"),F(Q9.$$.fragment),kxr=l(),LEe=a("p"),Sxr=o("Instantiate one of the base model classes of the library from a pretrained model."),Rxr=l(),hn=a("p"),Pxr=o("The model class to instantiate is selected based on the "),yEe=a("code"),Bxr=o("model_type"),Ixr=o(` property of the config object (either
passed as an argument or loaded from `),xEe=a("code"),Nxr=o("pretrained_model_name_or_path"),qxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=a("code"),jxr=o("pretrained_model_name_or_path"),Dxr=o(":"),Gxr=l(),re=a("ul"),z3=a("li"),kEe=a("strong"),Oxr=o("albert"),Vxr=o(" \u2014 "),FY=a("a"),Xxr=o("FlaxAlbertModel"),zxr=o(" (ALBERT model)"),Wxr=l(),W3=a("li"),SEe=a("strong"),Qxr=o("bart"),Hxr=o(" \u2014 "),TY=a("a"),Uxr=o("FlaxBartModel"),Jxr=o(" (BART model)"),Yxr=l(),Q3=a("li"),REe=a("strong"),Kxr=o("beit"),Zxr=o(" \u2014 "),MY=a("a"),e$r=o("FlaxBeitModel"),o$r=o(" (BEiT model)"),r$r=l(),H3=a("li"),PEe=a("strong"),t$r=o("bert"),a$r=o(" \u2014 "),EY=a("a"),n$r=o("FlaxBertModel"),s$r=o(" (BERT model)"),l$r=l(),U3=a("li"),BEe=a("strong"),i$r=o("big_bird"),d$r=o(" \u2014 "),CY=a("a"),c$r=o("FlaxBigBirdModel"),m$r=o(" (BigBird model)"),f$r=l(),J3=a("li"),IEe=a("strong"),g$r=o("blenderbot"),h$r=o(" \u2014 "),wY=a("a"),u$r=o("FlaxBlenderbotModel"),p$r=o(" (Blenderbot model)"),_$r=l(),Y3=a("li"),NEe=a("strong"),b$r=o("blenderbot-small"),v$r=o(" \u2014 "),AY=a("a"),F$r=o("FlaxBlenderbotSmallModel"),T$r=o(" (BlenderbotSmall model)"),M$r=l(),K3=a("li"),qEe=a("strong"),E$r=o("clip"),C$r=o(" \u2014 "),LY=a("a"),w$r=o("FlaxCLIPModel"),A$r=o(" (CLIP model)"),L$r=l(),Z3=a("li"),jEe=a("strong"),y$r=o("distilbert"),x$r=o(" \u2014 "),yY=a("a"),$$r=o("FlaxDistilBertModel"),k$r=o(" (DistilBERT model)"),S$r=l(),e0=a("li"),DEe=a("strong"),R$r=o("electra"),P$r=o(" \u2014 "),xY=a("a"),B$r=o("FlaxElectraModel"),I$r=o(" (ELECTRA model)"),N$r=l(),o0=a("li"),GEe=a("strong"),q$r=o("gpt2"),j$r=o(" \u2014 "),$Y=a("a"),D$r=o("FlaxGPT2Model"),G$r=o(" (OpenAI GPT-2 model)"),O$r=l(),r0=a("li"),OEe=a("strong"),V$r=o("gpt_neo"),X$r=o(" \u2014 "),kY=a("a"),z$r=o("FlaxGPTNeoModel"),W$r=o(" (GPT Neo model)"),Q$r=l(),t0=a("li"),VEe=a("strong"),H$r=o("gptj"),U$r=o(" \u2014 "),SY=a("a"),J$r=o("FlaxGPTJModel"),Y$r=o(" (GPT-J model)"),K$r=l(),a0=a("li"),XEe=a("strong"),Z$r=o("marian"),ekr=o(" \u2014 "),RY=a("a"),okr=o("FlaxMarianModel"),rkr=o(" (Marian model)"),tkr=l(),n0=a("li"),zEe=a("strong"),akr=o("mbart"),nkr=o(" \u2014 "),PY=a("a"),skr=o("FlaxMBartModel"),lkr=o(" (mBART model)"),ikr=l(),s0=a("li"),WEe=a("strong"),dkr=o("mt5"),ckr=o(" \u2014 "),BY=a("a"),mkr=o("FlaxMT5Model"),fkr=o(" (MT5 model)"),gkr=l(),l0=a("li"),QEe=a("strong"),hkr=o("opt"),ukr=o(" \u2014 "),IY=a("a"),pkr=o("FlaxOPTModel"),_kr=o(" (OPT model)"),bkr=l(),i0=a("li"),HEe=a("strong"),vkr=o("pegasus"),Fkr=o(" \u2014 "),NY=a("a"),Tkr=o("FlaxPegasusModel"),Mkr=o(" (Pegasus model)"),Ekr=l(),d0=a("li"),UEe=a("strong"),Ckr=o("roberta"),wkr=o(" \u2014 "),qY=a("a"),Akr=o("FlaxRobertaModel"),Lkr=o(" (RoBERTa model)"),ykr=l(),c0=a("li"),JEe=a("strong"),xkr=o("roformer"),$kr=o(" \u2014 "),jY=a("a"),kkr=o("FlaxRoFormerModel"),Skr=o(" (RoFormer model)"),Rkr=l(),m0=a("li"),YEe=a("strong"),Pkr=o("t5"),Bkr=o(" \u2014 "),DY=a("a"),Ikr=o("FlaxT5Model"),Nkr=o(" (T5 model)"),qkr=l(),f0=a("li"),KEe=a("strong"),jkr=o("vision-text-dual-encoder"),Dkr=o(" \u2014 "),GY=a("a"),Gkr=o("FlaxVisionTextDualEncoderModel"),Okr=o(" (VisionTextDualEncoder model)"),Vkr=l(),g0=a("li"),ZEe=a("strong"),Xkr=o("vit"),zkr=o(" \u2014 "),OY=a("a"),Wkr=o("FlaxViTModel"),Qkr=o(" (ViT model)"),Hkr=l(),h0=a("li"),eCe=a("strong"),Ukr=o("wav2vec2"),Jkr=o(" \u2014 "),VY=a("a"),Ykr=o("FlaxWav2Vec2Model"),Kkr=o(" (Wav2Vec2 model)"),Zkr=l(),u0=a("li"),oCe=a("strong"),eSr=o("xglm"),oSr=o(" \u2014 "),XY=a("a"),rSr=o("FlaxXGLMModel"),tSr=o(" (XGLM model)"),aSr=l(),p0=a("li"),rCe=a("strong"),nSr=o("xlm-roberta"),sSr=o(" \u2014 "),zY=a("a"),lSr=o("FlaxXLMRobertaModel"),iSr=o(" (XLM-RoBERTa model)"),dSr=l(),F(_0.$$.fragment),KDe=l(),Rc=a("h2"),b0=a("a"),tCe=a("span"),F(H9.$$.fragment),cSr=l(),aCe=a("span"),mSr=o("FlaxAutoModelForCausalLM"),ZDe=l(),fr=a("div"),F(U9.$$.fragment),fSr=l(),Pc=a("p"),gSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WY=a("a"),hSr=o("from_pretrained()"),uSr=o(" class method or the "),QY=a("a"),pSr=o("from_config()"),_Sr=o(` class
method.`),bSr=l(),J9=a("p"),vSr=o("This class cannot be instantiated directly using "),nCe=a("code"),FSr=o("__init__()"),TSr=o(" (throws an error)."),MSr=l(),Ot=a("div"),F(Y9.$$.fragment),ESr=l(),sCe=a("p"),CSr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wSr=l(),Bc=a("p"),ASr=o(`Note:
Loading a model from its configuration file does `),lCe=a("strong"),LSr=o("not"),ySr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),xSr=o("from_pretrained()"),$Sr=o(" to load the model weights."),kSr=l(),F(v0.$$.fragment),SSr=l(),Dr=a("div"),F(K9.$$.fragment),RSr=l(),iCe=a("p"),PSr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BSr=l(),un=a("p"),ISr=o("The model class to instantiate is selected based on the "),dCe=a("code"),NSr=o("model_type"),qSr=o(` property of the config object (either
passed as an argument or loaded from `),cCe=a("code"),jSr=o("pretrained_model_name_or_path"),DSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=a("code"),GSr=o("pretrained_model_name_or_path"),OSr=o(":"),VSr=l(),xe=a("ul"),F0=a("li"),fCe=a("strong"),XSr=o("bart"),zSr=o(" \u2014 "),UY=a("a"),WSr=o("FlaxBartForCausalLM"),QSr=o(" (BART model)"),HSr=l(),T0=a("li"),gCe=a("strong"),USr=o("bert"),JSr=o(" \u2014 "),JY=a("a"),YSr=o("FlaxBertForCausalLM"),KSr=o(" (BERT model)"),ZSr=l(),M0=a("li"),hCe=a("strong"),eRr=o("big_bird"),oRr=o(" \u2014 "),YY=a("a"),rRr=o("FlaxBigBirdForCausalLM"),tRr=o(" (BigBird model)"),aRr=l(),E0=a("li"),uCe=a("strong"),nRr=o("electra"),sRr=o(" \u2014 "),KY=a("a"),lRr=o("FlaxElectraForCausalLM"),iRr=o(" (ELECTRA model)"),dRr=l(),C0=a("li"),pCe=a("strong"),cRr=o("gpt2"),mRr=o(" \u2014 "),ZY=a("a"),fRr=o("FlaxGPT2LMHeadModel"),gRr=o(" (OpenAI GPT-2 model)"),hRr=l(),w0=a("li"),_Ce=a("strong"),uRr=o("gpt_neo"),pRr=o(" \u2014 "),eK=a("a"),_Rr=o("FlaxGPTNeoForCausalLM"),bRr=o(" (GPT Neo model)"),vRr=l(),A0=a("li"),bCe=a("strong"),FRr=o("gptj"),TRr=o(" \u2014 "),oK=a("a"),MRr=o("FlaxGPTJForCausalLM"),ERr=o(" (GPT-J model)"),CRr=l(),L0=a("li"),vCe=a("strong"),wRr=o("opt"),ARr=o(" \u2014 "),rK=a("a"),LRr=o("FlaxOPTForCausalLM"),yRr=o(" (OPT model)"),xRr=l(),y0=a("li"),FCe=a("strong"),$Rr=o("roberta"),kRr=o(" \u2014 "),tK=a("a"),SRr=o("FlaxRobertaForCausalLM"),RRr=o(" (RoBERTa model)"),PRr=l(),x0=a("li"),TCe=a("strong"),BRr=o("xglm"),IRr=o(" \u2014 "),aK=a("a"),NRr=o("FlaxXGLMForCausalLM"),qRr=o(" (XGLM model)"),jRr=l(),F($0.$$.fragment),eGe=l(),Ic=a("h2"),k0=a("a"),MCe=a("span"),F(Z9.$$.fragment),DRr=l(),ECe=a("span"),GRr=o("FlaxAutoModelForPreTraining"),oGe=l(),gr=a("div"),F(ex.$$.fragment),ORr=l(),Nc=a("p"),VRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nK=a("a"),XRr=o("from_pretrained()"),zRr=o(" class method or the "),sK=a("a"),WRr=o("from_config()"),QRr=o(` class
method.`),HRr=l(),ox=a("p"),URr=o("This class cannot be instantiated directly using "),CCe=a("code"),JRr=o("__init__()"),YRr=o(" (throws an error)."),KRr=l(),Vt=a("div"),F(rx.$$.fragment),ZRr=l(),wCe=a("p"),ePr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oPr=l(),qc=a("p"),rPr=o(`Note:
Loading a model from its configuration file does `),ACe=a("strong"),tPr=o("not"),aPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),nPr=o("from_pretrained()"),sPr=o(" to load the model weights."),lPr=l(),F(S0.$$.fragment),iPr=l(),Gr=a("div"),F(tx.$$.fragment),dPr=l(),LCe=a("p"),cPr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mPr=l(),pn=a("p"),fPr=o("The model class to instantiate is selected based on the "),yCe=a("code"),gPr=o("model_type"),hPr=o(` property of the config object (either
passed as an argument or loaded from `),xCe=a("code"),uPr=o("pretrained_model_name_or_path"),pPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ce=a("code"),_Pr=o("pretrained_model_name_or_path"),bPr=o(":"),vPr=l(),Ee=a("ul"),R0=a("li"),kCe=a("strong"),FPr=o("albert"),TPr=o(" \u2014 "),iK=a("a"),MPr=o("FlaxAlbertForPreTraining"),EPr=o(" (ALBERT model)"),CPr=l(),P0=a("li"),SCe=a("strong"),wPr=o("bart"),APr=o(" \u2014 "),dK=a("a"),LPr=o("FlaxBartForConditionalGeneration"),yPr=o(" (BART model)"),xPr=l(),B0=a("li"),RCe=a("strong"),$Pr=o("bert"),kPr=o(" \u2014 "),cK=a("a"),SPr=o("FlaxBertForPreTraining"),RPr=o(" (BERT model)"),PPr=l(),I0=a("li"),PCe=a("strong"),BPr=o("big_bird"),IPr=o(" \u2014 "),mK=a("a"),NPr=o("FlaxBigBirdForPreTraining"),qPr=o(" (BigBird model)"),jPr=l(),N0=a("li"),BCe=a("strong"),DPr=o("electra"),GPr=o(" \u2014 "),fK=a("a"),OPr=o("FlaxElectraForPreTraining"),VPr=o(" (ELECTRA model)"),XPr=l(),q0=a("li"),ICe=a("strong"),zPr=o("mbart"),WPr=o(" \u2014 "),gK=a("a"),QPr=o("FlaxMBartForConditionalGeneration"),HPr=o(" (mBART model)"),UPr=l(),j0=a("li"),NCe=a("strong"),JPr=o("mt5"),YPr=o(" \u2014 "),hK=a("a"),KPr=o("FlaxMT5ForConditionalGeneration"),ZPr=o(" (MT5 model)"),eBr=l(),D0=a("li"),qCe=a("strong"),oBr=o("roberta"),rBr=o(" \u2014 "),uK=a("a"),tBr=o("FlaxRobertaForMaskedLM"),aBr=o(" (RoBERTa model)"),nBr=l(),G0=a("li"),jCe=a("strong"),sBr=o("roformer"),lBr=o(" \u2014 "),pK=a("a"),iBr=o("FlaxRoFormerForMaskedLM"),dBr=o(" (RoFormer model)"),cBr=l(),O0=a("li"),DCe=a("strong"),mBr=o("t5"),fBr=o(" \u2014 "),_K=a("a"),gBr=o("FlaxT5ForConditionalGeneration"),hBr=o(" (T5 model)"),uBr=l(),V0=a("li"),GCe=a("strong"),pBr=o("wav2vec2"),_Br=o(" \u2014 "),bK=a("a"),bBr=o("FlaxWav2Vec2ForPreTraining"),vBr=o(" (Wav2Vec2 model)"),FBr=l(),X0=a("li"),OCe=a("strong"),TBr=o("xlm-roberta"),MBr=o(" \u2014 "),vK=a("a"),EBr=o("FlaxXLMRobertaForMaskedLM"),CBr=o(" (XLM-RoBERTa model)"),wBr=l(),F(z0.$$.fragment),rGe=l(),jc=a("h2"),W0=a("a"),VCe=a("span"),F(ax.$$.fragment),ABr=l(),XCe=a("span"),LBr=o("FlaxAutoModelForMaskedLM"),tGe=l(),hr=a("div"),F(nx.$$.fragment),yBr=l(),Dc=a("p"),xBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FK=a("a"),$Br=o("from_pretrained()"),kBr=o(" class method or the "),TK=a("a"),SBr=o("from_config()"),RBr=o(` class
method.`),PBr=l(),sx=a("p"),BBr=o("This class cannot be instantiated directly using "),zCe=a("code"),IBr=o("__init__()"),NBr=o(" (throws an error)."),qBr=l(),Xt=a("div"),F(lx.$$.fragment),jBr=l(),WCe=a("p"),DBr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GBr=l(),Gc=a("p"),OBr=o(`Note:
Loading a model from its configuration file does `),QCe=a("strong"),VBr=o("not"),XBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=a("a"),zBr=o("from_pretrained()"),WBr=o(" to load the model weights."),QBr=l(),F(Q0.$$.fragment),HBr=l(),Or=a("div"),F(ix.$$.fragment),UBr=l(),HCe=a("p"),JBr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),YBr=l(),_n=a("p"),KBr=o("The model class to instantiate is selected based on the "),UCe=a("code"),ZBr=o("model_type"),eIr=o(` property of the config object (either
passed as an argument or loaded from `),JCe=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=a("code"),tIr=o("pretrained_model_name_or_path"),aIr=o(":"),nIr=l(),$e=a("ul"),H0=a("li"),KCe=a("strong"),sIr=o("albert"),lIr=o(" \u2014 "),EK=a("a"),iIr=o("FlaxAlbertForMaskedLM"),dIr=o(" (ALBERT model)"),cIr=l(),U0=a("li"),ZCe=a("strong"),mIr=o("bart"),fIr=o(" \u2014 "),CK=a("a"),gIr=o("FlaxBartForConditionalGeneration"),hIr=o(" (BART model)"),uIr=l(),J0=a("li"),e5e=a("strong"),pIr=o("bert"),_Ir=o(" \u2014 "),wK=a("a"),bIr=o("FlaxBertForMaskedLM"),vIr=o(" (BERT model)"),FIr=l(),Y0=a("li"),o5e=a("strong"),TIr=o("big_bird"),MIr=o(" \u2014 "),AK=a("a"),EIr=o("FlaxBigBirdForMaskedLM"),CIr=o(" (BigBird model)"),wIr=l(),K0=a("li"),r5e=a("strong"),AIr=o("distilbert"),LIr=o(" \u2014 "),LK=a("a"),yIr=o("FlaxDistilBertForMaskedLM"),xIr=o(" (DistilBERT model)"),$Ir=l(),Z0=a("li"),t5e=a("strong"),kIr=o("electra"),SIr=o(" \u2014 "),yK=a("a"),RIr=o("FlaxElectraForMaskedLM"),PIr=o(" (ELECTRA model)"),BIr=l(),ew=a("li"),a5e=a("strong"),IIr=o("mbart"),NIr=o(" \u2014 "),xK=a("a"),qIr=o("FlaxMBartForConditionalGeneration"),jIr=o(" (mBART model)"),DIr=l(),ow=a("li"),n5e=a("strong"),GIr=o("roberta"),OIr=o(" \u2014 "),$K=a("a"),VIr=o("FlaxRobertaForMaskedLM"),XIr=o(" (RoBERTa model)"),zIr=l(),rw=a("li"),s5e=a("strong"),WIr=o("roformer"),QIr=o(" \u2014 "),kK=a("a"),HIr=o("FlaxRoFormerForMaskedLM"),UIr=o(" (RoFormer model)"),JIr=l(),tw=a("li"),l5e=a("strong"),YIr=o("xlm-roberta"),KIr=o(" \u2014 "),SK=a("a"),ZIr=o("FlaxXLMRobertaForMaskedLM"),eNr=o(" (XLM-RoBERTa model)"),oNr=l(),F(aw.$$.fragment),aGe=l(),Oc=a("h2"),nw=a("a"),i5e=a("span"),F(dx.$$.fragment),rNr=l(),d5e=a("span"),tNr=o("FlaxAutoModelForSeq2SeqLM"),nGe=l(),ur=a("div"),F(cx.$$.fragment),aNr=l(),Vc=a("p"),nNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RK=a("a"),sNr=o("from_pretrained()"),lNr=o(" class method or the "),PK=a("a"),iNr=o("from_config()"),dNr=o(` class
method.`),cNr=l(),mx=a("p"),mNr=o("This class cannot be instantiated directly using "),c5e=a("code"),fNr=o("__init__()"),gNr=o(" (throws an error)."),hNr=l(),zt=a("div"),F(fx.$$.fragment),uNr=l(),m5e=a("p"),pNr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_Nr=l(),Xc=a("p"),bNr=o(`Note:
Loading a model from its configuration file does `),f5e=a("strong"),vNr=o("not"),FNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=a("a"),TNr=o("from_pretrained()"),MNr=o(" to load the model weights."),ENr=l(),F(sw.$$.fragment),CNr=l(),Vr=a("div"),F(gx.$$.fragment),wNr=l(),g5e=a("p"),ANr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),LNr=l(),bn=a("p"),yNr=o("The model class to instantiate is selected based on the "),h5e=a("code"),xNr=o("model_type"),$Nr=o(` property of the config object (either
passed as an argument or loaded from `),u5e=a("code"),kNr=o("pretrained_model_name_or_path"),SNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=a("code"),RNr=o("pretrained_model_name_or_path"),PNr=o(":"),BNr=l(),Pe=a("ul"),lw=a("li"),_5e=a("strong"),INr=o("bart"),NNr=o(" \u2014 "),IK=a("a"),qNr=o("FlaxBartForConditionalGeneration"),jNr=o(" (BART model)"),DNr=l(),iw=a("li"),b5e=a("strong"),GNr=o("blenderbot"),ONr=o(" \u2014 "),NK=a("a"),VNr=o("FlaxBlenderbotForConditionalGeneration"),XNr=o(" (Blenderbot model)"),zNr=l(),dw=a("li"),v5e=a("strong"),WNr=o("blenderbot-small"),QNr=o(" \u2014 "),qK=a("a"),HNr=o("FlaxBlenderbotSmallForConditionalGeneration"),UNr=o(" (BlenderbotSmall model)"),JNr=l(),cw=a("li"),F5e=a("strong"),YNr=o("encoder-decoder"),KNr=o(" \u2014 "),jK=a("a"),ZNr=o("FlaxEncoderDecoderModel"),eqr=o(" (Encoder decoder model)"),oqr=l(),mw=a("li"),T5e=a("strong"),rqr=o("marian"),tqr=o(" \u2014 "),DK=a("a"),aqr=o("FlaxMarianMTModel"),nqr=o(" (Marian model)"),sqr=l(),fw=a("li"),M5e=a("strong"),lqr=o("mbart"),iqr=o(" \u2014 "),GK=a("a"),dqr=o("FlaxMBartForConditionalGeneration"),cqr=o(" (mBART model)"),mqr=l(),gw=a("li"),E5e=a("strong"),fqr=o("mt5"),gqr=o(" \u2014 "),OK=a("a"),hqr=o("FlaxMT5ForConditionalGeneration"),uqr=o(" (MT5 model)"),pqr=l(),hw=a("li"),C5e=a("strong"),_qr=o("pegasus"),bqr=o(" \u2014 "),VK=a("a"),vqr=o("FlaxPegasusForConditionalGeneration"),Fqr=o(" (Pegasus model)"),Tqr=l(),uw=a("li"),w5e=a("strong"),Mqr=o("t5"),Eqr=o(" \u2014 "),XK=a("a"),Cqr=o("FlaxT5ForConditionalGeneration"),wqr=o(" (T5 model)"),Aqr=l(),F(pw.$$.fragment),sGe=l(),zc=a("h2"),_w=a("a"),A5e=a("span"),F(hx.$$.fragment),Lqr=l(),L5e=a("span"),yqr=o("FlaxAutoModelForSequenceClassification"),lGe=l(),pr=a("div"),F(ux.$$.fragment),xqr=l(),Wc=a("p"),$qr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zK=a("a"),kqr=o("from_pretrained()"),Sqr=o(" class method or the "),WK=a("a"),Rqr=o("from_config()"),Pqr=o(` class
method.`),Bqr=l(),px=a("p"),Iqr=o("This class cannot be instantiated directly using "),y5e=a("code"),Nqr=o("__init__()"),qqr=o(" (throws an error)."),jqr=l(),Wt=a("div"),F(_x.$$.fragment),Dqr=l(),x5e=a("p"),Gqr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Oqr=l(),Qc=a("p"),Vqr=o(`Note:
Loading a model from its configuration file does `),$5e=a("strong"),Xqr=o("not"),zqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=a("a"),Wqr=o("from_pretrained()"),Qqr=o(" to load the model weights."),Hqr=l(),F(bw.$$.fragment),Uqr=l(),Xr=a("div"),F(bx.$$.fragment),Jqr=l(),k5e=a("p"),Yqr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kqr=l(),vn=a("p"),Zqr=o("The model class to instantiate is selected based on the "),S5e=a("code"),ejr=o("model_type"),ojr=o(` property of the config object (either
passed as an argument or loaded from `),R5e=a("code"),rjr=o("pretrained_model_name_or_path"),tjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P5e=a("code"),ajr=o("pretrained_model_name_or_path"),njr=o(":"),sjr=l(),ke=a("ul"),vw=a("li"),B5e=a("strong"),ljr=o("albert"),ijr=o(" \u2014 "),HK=a("a"),djr=o("FlaxAlbertForSequenceClassification"),cjr=o(" (ALBERT model)"),mjr=l(),Fw=a("li"),I5e=a("strong"),fjr=o("bart"),gjr=o(" \u2014 "),UK=a("a"),hjr=o("FlaxBartForSequenceClassification"),ujr=o(" (BART model)"),pjr=l(),Tw=a("li"),N5e=a("strong"),_jr=o("bert"),bjr=o(" \u2014 "),JK=a("a"),vjr=o("FlaxBertForSequenceClassification"),Fjr=o(" (BERT model)"),Tjr=l(),Mw=a("li"),q5e=a("strong"),Mjr=o("big_bird"),Ejr=o(" \u2014 "),YK=a("a"),Cjr=o("FlaxBigBirdForSequenceClassification"),wjr=o(" (BigBird model)"),Ajr=l(),Ew=a("li"),j5e=a("strong"),Ljr=o("distilbert"),yjr=o(" \u2014 "),KK=a("a"),xjr=o("FlaxDistilBertForSequenceClassification"),$jr=o(" (DistilBERT model)"),kjr=l(),Cw=a("li"),D5e=a("strong"),Sjr=o("electra"),Rjr=o(" \u2014 "),ZK=a("a"),Pjr=o("FlaxElectraForSequenceClassification"),Bjr=o(" (ELECTRA model)"),Ijr=l(),ww=a("li"),G5e=a("strong"),Njr=o("mbart"),qjr=o(" \u2014 "),eZ=a("a"),jjr=o("FlaxMBartForSequenceClassification"),Djr=o(" (mBART model)"),Gjr=l(),Aw=a("li"),O5e=a("strong"),Ojr=o("roberta"),Vjr=o(" \u2014 "),oZ=a("a"),Xjr=o("FlaxRobertaForSequenceClassification"),zjr=o(" (RoBERTa model)"),Wjr=l(),Lw=a("li"),V5e=a("strong"),Qjr=o("roformer"),Hjr=o(" \u2014 "),rZ=a("a"),Ujr=o("FlaxRoFormerForSequenceClassification"),Jjr=o(" (RoFormer model)"),Yjr=l(),yw=a("li"),X5e=a("strong"),Kjr=o("xlm-roberta"),Zjr=o(" \u2014 "),tZ=a("a"),eDr=o("FlaxXLMRobertaForSequenceClassification"),oDr=o(" (XLM-RoBERTa model)"),rDr=l(),F(xw.$$.fragment),iGe=l(),Hc=a("h2"),$w=a("a"),z5e=a("span"),F(vx.$$.fragment),tDr=l(),W5e=a("span"),aDr=o("FlaxAutoModelForQuestionAnswering"),dGe=l(),_r=a("div"),F(Fx.$$.fragment),nDr=l(),Uc=a("p"),sDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aZ=a("a"),lDr=o("from_pretrained()"),iDr=o(" class method or the "),nZ=a("a"),dDr=o("from_config()"),cDr=o(` class
method.`),mDr=l(),Tx=a("p"),fDr=o("This class cannot be instantiated directly using "),Q5e=a("code"),gDr=o("__init__()"),hDr=o(" (throws an error)."),uDr=l(),Qt=a("div"),F(Mx.$$.fragment),pDr=l(),H5e=a("p"),_Dr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bDr=l(),Jc=a("p"),vDr=o(`Note:
Loading a model from its configuration file does `),U5e=a("strong"),FDr=o("not"),TDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=a("a"),MDr=o("from_pretrained()"),EDr=o(" to load the model weights."),CDr=l(),F(kw.$$.fragment),wDr=l(),zr=a("div"),F(Ex.$$.fragment),ADr=l(),J5e=a("p"),LDr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yDr=l(),Fn=a("p"),xDr=o("The model class to instantiate is selected based on the "),Y5e=a("code"),$Dr=o("model_type"),kDr=o(` property of the config object (either
passed as an argument or loaded from `),K5e=a("code"),SDr=o("pretrained_model_name_or_path"),RDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=a("code"),PDr=o("pretrained_model_name_or_path"),BDr=o(":"),IDr=l(),Se=a("ul"),Sw=a("li"),e3e=a("strong"),NDr=o("albert"),qDr=o(" \u2014 "),lZ=a("a"),jDr=o("FlaxAlbertForQuestionAnswering"),DDr=o(" (ALBERT model)"),GDr=l(),Rw=a("li"),o3e=a("strong"),ODr=o("bart"),VDr=o(" \u2014 "),iZ=a("a"),XDr=o("FlaxBartForQuestionAnswering"),zDr=o(" (BART model)"),WDr=l(),Pw=a("li"),r3e=a("strong"),QDr=o("bert"),HDr=o(" \u2014 "),dZ=a("a"),UDr=o("FlaxBertForQuestionAnswering"),JDr=o(" (BERT model)"),YDr=l(),Bw=a("li"),t3e=a("strong"),KDr=o("big_bird"),ZDr=o(" \u2014 "),cZ=a("a"),eGr=o("FlaxBigBirdForQuestionAnswering"),oGr=o(" (BigBird model)"),rGr=l(),Iw=a("li"),a3e=a("strong"),tGr=o("distilbert"),aGr=o(" \u2014 "),mZ=a("a"),nGr=o("FlaxDistilBertForQuestionAnswering"),sGr=o(" (DistilBERT model)"),lGr=l(),Nw=a("li"),n3e=a("strong"),iGr=o("electra"),dGr=o(" \u2014 "),fZ=a("a"),cGr=o("FlaxElectraForQuestionAnswering"),mGr=o(" (ELECTRA model)"),fGr=l(),qw=a("li"),s3e=a("strong"),gGr=o("mbart"),hGr=o(" \u2014 "),gZ=a("a"),uGr=o("FlaxMBartForQuestionAnswering"),pGr=o(" (mBART model)"),_Gr=l(),jw=a("li"),l3e=a("strong"),bGr=o("roberta"),vGr=o(" \u2014 "),hZ=a("a"),FGr=o("FlaxRobertaForQuestionAnswering"),TGr=o(" (RoBERTa model)"),MGr=l(),Dw=a("li"),i3e=a("strong"),EGr=o("roformer"),CGr=o(" \u2014 "),uZ=a("a"),wGr=o("FlaxRoFormerForQuestionAnswering"),AGr=o(" (RoFormer model)"),LGr=l(),Gw=a("li"),d3e=a("strong"),yGr=o("xlm-roberta"),xGr=o(" \u2014 "),pZ=a("a"),$Gr=o("FlaxXLMRobertaForQuestionAnswering"),kGr=o(" (XLM-RoBERTa model)"),SGr=l(),F(Ow.$$.fragment),cGe=l(),Yc=a("h2"),Vw=a("a"),c3e=a("span"),F(Cx.$$.fragment),RGr=l(),m3e=a("span"),PGr=o("FlaxAutoModelForTokenClassification"),mGe=l(),br=a("div"),F(wx.$$.fragment),BGr=l(),Kc=a("p"),IGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_Z=a("a"),NGr=o("from_pretrained()"),qGr=o(" class method or the "),bZ=a("a"),jGr=o("from_config()"),DGr=o(` class
method.`),GGr=l(),Ax=a("p"),OGr=o("This class cannot be instantiated directly using "),f3e=a("code"),VGr=o("__init__()"),XGr=o(" (throws an error)."),zGr=l(),Ht=a("div"),F(Lx.$$.fragment),WGr=l(),g3e=a("p"),QGr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),HGr=l(),Zc=a("p"),UGr=o(`Note:
Loading a model from its configuration file does `),h3e=a("strong"),JGr=o("not"),YGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=a("a"),KGr=o("from_pretrained()"),ZGr=o(" to load the model weights."),eOr=l(),F(Xw.$$.fragment),oOr=l(),Wr=a("div"),F(yx.$$.fragment),rOr=l(),u3e=a("p"),tOr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),aOr=l(),Tn=a("p"),nOr=o("The model class to instantiate is selected based on the "),p3e=a("code"),sOr=o("model_type"),lOr=o(` property of the config object (either
passed as an argument or loaded from `),_3e=a("code"),iOr=o("pretrained_model_name_or_path"),dOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=a("code"),cOr=o("pretrained_model_name_or_path"),mOr=o(":"),fOr=l(),Oe=a("ul"),zw=a("li"),v3e=a("strong"),gOr=o("albert"),hOr=o(" \u2014 "),FZ=a("a"),uOr=o("FlaxAlbertForTokenClassification"),pOr=o(" (ALBERT model)"),_Or=l(),Ww=a("li"),F3e=a("strong"),bOr=o("bert"),vOr=o(" \u2014 "),TZ=a("a"),FOr=o("FlaxBertForTokenClassification"),TOr=o(" (BERT model)"),MOr=l(),Qw=a("li"),T3e=a("strong"),EOr=o("big_bird"),COr=o(" \u2014 "),MZ=a("a"),wOr=o("FlaxBigBirdForTokenClassification"),AOr=o(" (BigBird model)"),LOr=l(),Hw=a("li"),M3e=a("strong"),yOr=o("distilbert"),xOr=o(" \u2014 "),EZ=a("a"),$Or=o("FlaxDistilBertForTokenClassification"),kOr=o(" (DistilBERT model)"),SOr=l(),Uw=a("li"),E3e=a("strong"),ROr=o("electra"),POr=o(" \u2014 "),CZ=a("a"),BOr=o("FlaxElectraForTokenClassification"),IOr=o(" (ELECTRA model)"),NOr=l(),Jw=a("li"),C3e=a("strong"),qOr=o("roberta"),jOr=o(" \u2014 "),wZ=a("a"),DOr=o("FlaxRobertaForTokenClassification"),GOr=o(" (RoBERTa model)"),OOr=l(),Yw=a("li"),w3e=a("strong"),VOr=o("roformer"),XOr=o(" \u2014 "),AZ=a("a"),zOr=o("FlaxRoFormerForTokenClassification"),WOr=o(" (RoFormer model)"),QOr=l(),Kw=a("li"),A3e=a("strong"),HOr=o("xlm-roberta"),UOr=o(" \u2014 "),LZ=a("a"),JOr=o("FlaxXLMRobertaForTokenClassification"),YOr=o(" (XLM-RoBERTa model)"),KOr=l(),F(Zw.$$.fragment),fGe=l(),em=a("h2"),eA=a("a"),L3e=a("span"),F(xx.$$.fragment),ZOr=l(),y3e=a("span"),eVr=o("FlaxAutoModelForMultipleChoice"),gGe=l(),vr=a("div"),F($x.$$.fragment),oVr=l(),om=a("p"),rVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yZ=a("a"),tVr=o("from_pretrained()"),aVr=o(" class method or the "),xZ=a("a"),nVr=o("from_config()"),sVr=o(` class
method.`),lVr=l(),kx=a("p"),iVr=o("This class cannot be instantiated directly using "),x3e=a("code"),dVr=o("__init__()"),cVr=o(" (throws an error)."),mVr=l(),Ut=a("div"),F(Sx.$$.fragment),fVr=l(),$3e=a("p"),gVr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hVr=l(),rm=a("p"),uVr=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),pVr=o("not"),_Vr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=a("a"),bVr=o("from_pretrained()"),vVr=o(" to load the model weights."),FVr=l(),F(oA.$$.fragment),TVr=l(),Qr=a("div"),F(Rx.$$.fragment),MVr=l(),S3e=a("p"),EVr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CVr=l(),Mn=a("p"),wVr=o("The model class to instantiate is selected based on the "),R3e=a("code"),AVr=o("model_type"),LVr=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),yVr=o("pretrained_model_name_or_path"),xVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=a("code"),$Vr=o("pretrained_model_name_or_path"),kVr=o(":"),SVr=l(),Ve=a("ul"),rA=a("li"),I3e=a("strong"),RVr=o("albert"),PVr=o(" \u2014 "),kZ=a("a"),BVr=o("FlaxAlbertForMultipleChoice"),IVr=o(" (ALBERT model)"),NVr=l(),tA=a("li"),N3e=a("strong"),qVr=o("bert"),jVr=o(" \u2014 "),SZ=a("a"),DVr=o("FlaxBertForMultipleChoice"),GVr=o(" (BERT model)"),OVr=l(),aA=a("li"),q3e=a("strong"),VVr=o("big_bird"),XVr=o(" \u2014 "),RZ=a("a"),zVr=o("FlaxBigBirdForMultipleChoice"),WVr=o(" (BigBird model)"),QVr=l(),nA=a("li"),j3e=a("strong"),HVr=o("distilbert"),UVr=o(" \u2014 "),PZ=a("a"),JVr=o("FlaxDistilBertForMultipleChoice"),YVr=o(" (DistilBERT model)"),KVr=l(),sA=a("li"),D3e=a("strong"),ZVr=o("electra"),eXr=o(" \u2014 "),BZ=a("a"),oXr=o("FlaxElectraForMultipleChoice"),rXr=o(" (ELECTRA model)"),tXr=l(),lA=a("li"),G3e=a("strong"),aXr=o("roberta"),nXr=o(" \u2014 "),IZ=a("a"),sXr=o("FlaxRobertaForMultipleChoice"),lXr=o(" (RoBERTa model)"),iXr=l(),iA=a("li"),O3e=a("strong"),dXr=o("roformer"),cXr=o(" \u2014 "),NZ=a("a"),mXr=o("FlaxRoFormerForMultipleChoice"),fXr=o(" (RoFormer model)"),gXr=l(),dA=a("li"),V3e=a("strong"),hXr=o("xlm-roberta"),uXr=o(" \u2014 "),qZ=a("a"),pXr=o("FlaxXLMRobertaForMultipleChoice"),_Xr=o(" (XLM-RoBERTa model)"),bXr=l(),F(cA.$$.fragment),hGe=l(),tm=a("h2"),mA=a("a"),X3e=a("span"),F(Px.$$.fragment),vXr=l(),z3e=a("span"),FXr=o("FlaxAutoModelForNextSentencePrediction"),uGe=l(),Fr=a("div"),F(Bx.$$.fragment),TXr=l(),am=a("p"),MXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jZ=a("a"),EXr=o("from_pretrained()"),CXr=o(" class method or the "),DZ=a("a"),wXr=o("from_config()"),AXr=o(` class
method.`),LXr=l(),Ix=a("p"),yXr=o("This class cannot be instantiated directly using "),W3e=a("code"),xXr=o("__init__()"),$Xr=o(" (throws an error)."),kXr=l(),Jt=a("div"),F(Nx.$$.fragment),SXr=l(),Q3e=a("p"),RXr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),PXr=l(),nm=a("p"),BXr=o(`Note:
Loading a model from its configuration file does `),H3e=a("strong"),IXr=o("not"),NXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=a("a"),qXr=o("from_pretrained()"),jXr=o(" to load the model weights."),DXr=l(),F(fA.$$.fragment),GXr=l(),Hr=a("div"),F(qx.$$.fragment),OXr=l(),U3e=a("p"),VXr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XXr=l(),En=a("p"),zXr=o("The model class to instantiate is selected based on the "),J3e=a("code"),WXr=o("model_type"),QXr=o(` property of the config object (either
passed as an argument or loaded from `),Y3e=a("code"),HXr=o("pretrained_model_name_or_path"),UXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=a("code"),JXr=o("pretrained_model_name_or_path"),YXr=o(":"),KXr=l(),Z3e=a("ul"),gA=a("li"),e0e=a("strong"),ZXr=o("bert"),ezr=o(" \u2014 "),OZ=a("a"),ozr=o("FlaxBertForNextSentencePrediction"),rzr=o(" (BERT model)"),tzr=l(),F(hA.$$.fragment),pGe=l(),sm=a("h2"),uA=a("a"),o0e=a("span"),F(jx.$$.fragment),azr=l(),r0e=a("span"),nzr=o("FlaxAutoModelForImageClassification"),_Ge=l(),Tr=a("div"),F(Dx.$$.fragment),szr=l(),lm=a("p"),lzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VZ=a("a"),izr=o("from_pretrained()"),dzr=o(" class method or the "),XZ=a("a"),czr=o("from_config()"),mzr=o(` class
method.`),fzr=l(),Gx=a("p"),gzr=o("This class cannot be instantiated directly using "),t0e=a("code"),hzr=o("__init__()"),uzr=o(" (throws an error)."),pzr=l(),Yt=a("div"),F(Ox.$$.fragment),_zr=l(),a0e=a("p"),bzr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vzr=l(),im=a("p"),Fzr=o(`Note:
Loading a model from its configuration file does `),n0e=a("strong"),Tzr=o("not"),Mzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=a("a"),Ezr=o("from_pretrained()"),Czr=o(" to load the model weights."),wzr=l(),F(pA.$$.fragment),Azr=l(),Ur=a("div"),F(Vx.$$.fragment),Lzr=l(),s0e=a("p"),yzr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xzr=l(),Cn=a("p"),$zr=o("The model class to instantiate is selected based on the "),l0e=a("code"),kzr=o("model_type"),Szr=o(` property of the config object (either
passed as an argument or loaded from `),i0e=a("code"),Rzr=o("pretrained_model_name_or_path"),Pzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=a("code"),Bzr=o("pretrained_model_name_or_path"),Izr=o(":"),Nzr=l(),Xx=a("ul"),_A=a("li"),c0e=a("strong"),qzr=o("beit"),jzr=o(" \u2014 "),WZ=a("a"),Dzr=o("FlaxBeitForImageClassification"),Gzr=o(" (BEiT model)"),Ozr=l(),bA=a("li"),m0e=a("strong"),Vzr=o("vit"),Xzr=o(" \u2014 "),QZ=a("a"),zzr=o("FlaxViTForImageClassification"),Wzr=o(" (ViT model)"),Qzr=l(),F(vA.$$.fragment),bGe=l(),dm=a("h2"),FA=a("a"),f0e=a("span"),F(zx.$$.fragment),Hzr=l(),g0e=a("span"),Uzr=o("FlaxAutoModelForVision2Seq"),vGe=l(),Mr=a("div"),F(Wx.$$.fragment),Jzr=l(),cm=a("p"),Yzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HZ=a("a"),Kzr=o("from_pretrained()"),Zzr=o(" class method or the "),UZ=a("a"),eWr=o("from_config()"),oWr=o(` class
method.`),rWr=l(),Qx=a("p"),tWr=o("This class cannot be instantiated directly using "),h0e=a("code"),aWr=o("__init__()"),nWr=o(" (throws an error)."),sWr=l(),Kt=a("div"),F(Hx.$$.fragment),lWr=l(),u0e=a("p"),iWr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dWr=l(),mm=a("p"),cWr=o(`Note:
Loading a model from its configuration file does `),p0e=a("strong"),mWr=o("not"),fWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=a("a"),gWr=o("from_pretrained()"),hWr=o(" to load the model weights."),uWr=l(),F(TA.$$.fragment),pWr=l(),Jr=a("div"),F(Ux.$$.fragment),_Wr=l(),_0e=a("p"),bWr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vWr=l(),wn=a("p"),FWr=o("The model class to instantiate is selected based on the "),b0e=a("code"),TWr=o("model_type"),MWr=o(` property of the config object (either
passed as an argument or loaded from `),v0e=a("code"),EWr=o("pretrained_model_name_or_path"),CWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=a("code"),wWr=o("pretrained_model_name_or_path"),AWr=o(":"),LWr=l(),T0e=a("ul"),MA=a("li"),M0e=a("strong"),yWr=o("vision-encoder-decoder"),xWr=o(" \u2014 "),YZ=a("a"),$Wr=o("FlaxVisionEncoderDecoderModel"),kWr=o(" (Vision Encoder decoder model)"),SWr=l(),F(EA.$$.fragment),this.h()},l(m){const _=URt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var Jx=s(u);f=n(Jx,"A",{id:!0,class:!0,href:!0});var E0e=s(f);p=n(E0e,"SPAN",{});var C0e=s(p);T(d.$$.fragment,C0e),C0e.forEach(t),E0e.forEach(t),h=i(Jx),Mo=n(Jx,"SPAN",{});var w0e=s(Mo);fi=r(w0e,"Auto Classes"),w0e.forEach(t),Jx.forEach(t),um=i(m),rt=n(m,"P",{});var Yx=s(rt);gi=r(Yx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Yx,"CODE",{});var A0e=s(hi);GL=r(A0e,"from_pretrained()"),A0e.forEach(t),pm=r(Yx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Yx.forEach(t),Ge=i(m),We=n(m,"P",{});var An=s(We);ui=r(An,"Instantiating one of "),Ln=n(An,"A",{href:!0});var L0e=s(Ln);OL=r(L0e,"AutoConfig"),L0e.forEach(t),yn=r(An,", "),xn=n(An,"A",{href:!0});var y0e=s(xn);VL=r(y0e,"AutoModel"),y0e.forEach(t),pi=r(An,`, and
`),$n=n(An,"A",{href:!0});var x0e=s($n);XL=r(x0e,"AutoTokenizer"),x0e.forEach(t),_i=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),_m=i(m),T(Ca.$$.fragment,m),Qe=i(m),Ae=n(m,"P",{});var Kx=s(Ae);ck=r(Kx,"will create a model that is an instance of "),bi=n(Kx,"A",{href:!0});var $0e=s(bi);mk=r($0e,"BertModel"),$0e.forEach(t),fk=r(Kx,"."),Kx.forEach(t),Eo=i(m),wa=n(m,"P",{});var Zx=s(wa);gk=r(Zx,"There is one class of "),bm=n(Zx,"CODE",{});var k0e=s(bm);hk=r(k0e,"AutoModel"),k0e.forEach(t),yVe=r(Zx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Zx.forEach(t),_je=i(m),vi=n(m,"H2",{class:!0});var e$=s(vi);vm=n(e$,"A",{id:!0,class:!0,href:!0});var S0e=s(vm);Xoe=n(S0e,"SPAN",{});var R0e=s(Xoe);T(zL.$$.fragment,R0e),R0e.forEach(t),S0e.forEach(t),xVe=i(e$),zoe=n(e$,"SPAN",{});var P0e=s(zoe);$Ve=r(P0e,"Extending the Auto Classes"),P0e.forEach(t),e$.forEach(t),bje=i(m),kn=n(m,"P",{});var fm=s(kn);kVe=r(fm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Woe=n(fm,"CODE",{});var B0e=s(Woe);SVe=r(B0e,"NewModel"),B0e.forEach(t),RVe=r(fm,", make sure you have a "),Qoe=n(fm,"CODE",{});var I0e=s(Qoe);PVe=r(I0e,"NewModelConfig"),I0e.forEach(t),BVe=r(fm,` then you can add those to the auto
classes like this:`),fm.forEach(t),vje=i(m),T(WL.$$.fragment,m),Fje=i(m),uk=n(m,"P",{});var N0e=s(uk);IVe=r(N0e,"You will then be able to use the auto classes like you would usually do!"),N0e.forEach(t),Tje=i(m),T(Fm.$$.fragment,m),Mje=i(m),Fi=n(m,"H2",{class:!0});var o$=s(Fi);Tm=n(o$,"A",{id:!0,class:!0,href:!0});var q0e=s(Tm);Hoe=n(q0e,"SPAN",{});var j0e=s(Hoe);T(QL.$$.fragment,j0e),j0e.forEach(t),q0e.forEach(t),NVe=i(o$),Uoe=n(o$,"SPAN",{});var D0e=s(Uoe);qVe=r(D0e,"AutoConfig"),D0e.forEach(t),o$.forEach(t),Eje=i(m),Co=n(m,"DIV",{class:!0});var et=s(Co);T(HL.$$.fragment,et),jVe=i(et),UL=n(et,"P",{});var r$=s(UL);DVe=r(r$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),pk=n(r$,"A",{href:!0});var G0e=s(pk);GVe=r(G0e,"from_pretrained()"),G0e.forEach(t),OVe=r(r$," class method."),r$.forEach(t),VVe=i(et),JL=n(et,"P",{});var t$=s(JL);XVe=r(t$,"This class cannot be instantiated directly using "),Joe=n(t$,"CODE",{});var O0e=s(Joe);zVe=r(O0e,"__init__()"),O0e.forEach(t),WVe=r(t$," (throws an error)."),t$.forEach(t),QVe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(YL.$$.fragment,ot),HVe=i(ot),Yoe=n(ot,"P",{});var V0e=s(Yoe);UVe=r(V0e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),V0e.forEach(t),JVe=i(ot),Ti=n(ot,"P",{});var gm=s(Ti);YVe=r(gm,"The configuration class to instantiate is selected based on the "),Koe=n(gm,"CODE",{});var X0e=s(Koe);KVe=r(X0e,"model_type"),X0e.forEach(t),ZVe=r(gm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zoe=n(gm,"CODE",{});var z0e=s(Zoe);eXe=r(z0e,"pretrained_model_name_or_path"),z0e.forEach(t),oXe=r(gm,":"),gm.forEach(t),rXe=i(ot),A=n(ot,"UL",{});var L=s(A);Mm=n(L,"LI",{});var CA=s(Mm);ere=n(CA,"STRONG",{});var W0e=s(ere);tXe=r(W0e,"albert"),W0e.forEach(t),aXe=r(CA," \u2014 "),_k=n(CA,"A",{href:!0});var Q0e=s(_k);nXe=r(Q0e,"AlbertConfig"),Q0e.forEach(t),sXe=r(CA," (ALBERT model)"),CA.forEach(t),lXe=i(L),Em=n(L,"LI",{});var wA=s(Em);ore=n(wA,"STRONG",{});var H0e=s(ore);iXe=r(H0e,"bart"),H0e.forEach(t),dXe=r(wA," \u2014 "),bk=n(wA,"A",{href:!0});var U0e=s(bk);cXe=r(U0e,"BartConfig"),U0e.forEach(t),mXe=r(wA," (BART model)"),wA.forEach(t),fXe=i(L),Cm=n(L,"LI",{});var AA=s(Cm);rre=n(AA,"STRONG",{});var J0e=s(rre);gXe=r(J0e,"beit"),J0e.forEach(t),hXe=r(AA," \u2014 "),vk=n(AA,"A",{href:!0});var Y0e=s(vk);uXe=r(Y0e,"BeitConfig"),Y0e.forEach(t),pXe=r(AA," (BEiT model)"),AA.forEach(t),_Xe=i(L),wm=n(L,"LI",{});var LA=s(wm);tre=n(LA,"STRONG",{});var K0e=s(tre);bXe=r(K0e,"bert"),K0e.forEach(t),vXe=r(LA," \u2014 "),Fk=n(LA,"A",{href:!0});var Z0e=s(Fk);FXe=r(Z0e,"BertConfig"),Z0e.forEach(t),TXe=r(LA," (BERT model)"),LA.forEach(t),MXe=i(L),Am=n(L,"LI",{});var yA=s(Am);are=n(yA,"STRONG",{});var ewe=s(are);EXe=r(ewe,"bert-generation"),ewe.forEach(t),CXe=r(yA," \u2014 "),Tk=n(yA,"A",{href:!0});var owe=s(Tk);wXe=r(owe,"BertGenerationConfig"),owe.forEach(t),AXe=r(yA," (Bert Generation model)"),yA.forEach(t),LXe=i(L),Lm=n(L,"LI",{});var xA=s(Lm);nre=n(xA,"STRONG",{});var rwe=s(nre);yXe=r(rwe,"big_bird"),rwe.forEach(t),xXe=r(xA," \u2014 "),Mk=n(xA,"A",{href:!0});var twe=s(Mk);$Xe=r(twe,"BigBirdConfig"),twe.forEach(t),kXe=r(xA," (BigBird model)"),xA.forEach(t),SXe=i(L),ym=n(L,"LI",{});var $A=s(ym);sre=n($A,"STRONG",{});var awe=s(sre);RXe=r(awe,"bigbird_pegasus"),awe.forEach(t),PXe=r($A," \u2014 "),Ek=n($A,"A",{href:!0});var nwe=s(Ek);BXe=r(nwe,"BigBirdPegasusConfig"),nwe.forEach(t),IXe=r($A," (BigBird-Pegasus model)"),$A.forEach(t),NXe=i(L),xm=n(L,"LI",{});var kA=s(xm);lre=n(kA,"STRONG",{});var swe=s(lre);qXe=r(swe,"blenderbot"),swe.forEach(t),jXe=r(kA," \u2014 "),Ck=n(kA,"A",{href:!0});var lwe=s(Ck);DXe=r(lwe,"BlenderbotConfig"),lwe.forEach(t),GXe=r(kA," (Blenderbot model)"),kA.forEach(t),OXe=i(L),$m=n(L,"LI",{});var SA=s($m);ire=n(SA,"STRONG",{});var iwe=s(ire);VXe=r(iwe,"blenderbot-small"),iwe.forEach(t),XXe=r(SA," \u2014 "),wk=n(SA,"A",{href:!0});var dwe=s(wk);zXe=r(dwe,"BlenderbotSmallConfig"),dwe.forEach(t),WXe=r(SA," (BlenderbotSmall model)"),SA.forEach(t),QXe=i(L),km=n(L,"LI",{});var RA=s(km);dre=n(RA,"STRONG",{});var cwe=s(dre);HXe=r(cwe,"bloom"),cwe.forEach(t),UXe=r(RA," \u2014 "),Ak=n(RA,"A",{href:!0});var mwe=s(Ak);JXe=r(mwe,"BloomConfig"),mwe.forEach(t),YXe=r(RA," (BLOOM model)"),RA.forEach(t),KXe=i(L),Sm=n(L,"LI",{});var PA=s(Sm);cre=n(PA,"STRONG",{});var fwe=s(cre);ZXe=r(fwe,"camembert"),fwe.forEach(t),eze=r(PA," \u2014 "),Lk=n(PA,"A",{href:!0});var gwe=s(Lk);oze=r(gwe,"CamembertConfig"),gwe.forEach(t),rze=r(PA," (CamemBERT model)"),PA.forEach(t),tze=i(L),Rm=n(L,"LI",{});var BA=s(Rm);mre=n(BA,"STRONG",{});var hwe=s(mre);aze=r(hwe,"canine"),hwe.forEach(t),nze=r(BA," \u2014 "),yk=n(BA,"A",{href:!0});var uwe=s(yk);sze=r(uwe,"CanineConfig"),uwe.forEach(t),lze=r(BA," (CANINE model)"),BA.forEach(t),ize=i(L),Pm=n(L,"LI",{});var IA=s(Pm);fre=n(IA,"STRONG",{});var pwe=s(fre);dze=r(pwe,"clip"),pwe.forEach(t),cze=r(IA," \u2014 "),xk=n(IA,"A",{href:!0});var _we=s(xk);mze=r(_we,"CLIPConfig"),_we.forEach(t),fze=r(IA," (CLIP model)"),IA.forEach(t),gze=i(L),Bm=n(L,"LI",{});var NA=s(Bm);gre=n(NA,"STRONG",{});var bwe=s(gre);hze=r(bwe,"convbert"),bwe.forEach(t),uze=r(NA," \u2014 "),$k=n(NA,"A",{href:!0});var vwe=s($k);pze=r(vwe,"ConvBertConfig"),vwe.forEach(t),_ze=r(NA," (ConvBERT model)"),NA.forEach(t),bze=i(L),Im=n(L,"LI",{});var qA=s(Im);hre=n(qA,"STRONG",{});var Fwe=s(hre);vze=r(Fwe,"convnext"),Fwe.forEach(t),Fze=r(qA," \u2014 "),kk=n(qA,"A",{href:!0});var Twe=s(kk);Tze=r(Twe,"ConvNextConfig"),Twe.forEach(t),Mze=r(qA," (ConvNeXT model)"),qA.forEach(t),Eze=i(L),Nm=n(L,"LI",{});var jA=s(Nm);ure=n(jA,"STRONG",{});var Mwe=s(ure);Cze=r(Mwe,"ctrl"),Mwe.forEach(t),wze=r(jA," \u2014 "),Sk=n(jA,"A",{href:!0});var Ewe=s(Sk);Aze=r(Ewe,"CTRLConfig"),Ewe.forEach(t),Lze=r(jA," (CTRL model)"),jA.forEach(t),yze=i(L),qm=n(L,"LI",{});var DA=s(qm);pre=n(DA,"STRONG",{});var Cwe=s(pre);xze=r(Cwe,"cvt"),Cwe.forEach(t),$ze=r(DA," \u2014 "),Rk=n(DA,"A",{href:!0});var wwe=s(Rk);kze=r(wwe,"CvtConfig"),wwe.forEach(t),Sze=r(DA," (CvT model)"),DA.forEach(t),Rze=i(L),jm=n(L,"LI",{});var GA=s(jm);_re=n(GA,"STRONG",{});var Awe=s(_re);Pze=r(Awe,"data2vec-audio"),Awe.forEach(t),Bze=r(GA," \u2014 "),Pk=n(GA,"A",{href:!0});var Lwe=s(Pk);Ize=r(Lwe,"Data2VecAudioConfig"),Lwe.forEach(t),Nze=r(GA," (Data2VecAudio model)"),GA.forEach(t),qze=i(L),Dm=n(L,"LI",{});var OA=s(Dm);bre=n(OA,"STRONG",{});var ywe=s(bre);jze=r(ywe,"data2vec-text"),ywe.forEach(t),Dze=r(OA," \u2014 "),Bk=n(OA,"A",{href:!0});var xwe=s(Bk);Gze=r(xwe,"Data2VecTextConfig"),xwe.forEach(t),Oze=r(OA," (Data2VecText model)"),OA.forEach(t),Vze=i(L),Gm=n(L,"LI",{});var VA=s(Gm);vre=n(VA,"STRONG",{});var $we=s(vre);Xze=r($we,"data2vec-vision"),$we.forEach(t),zze=r(VA," \u2014 "),Ik=n(VA,"A",{href:!0});var kwe=s(Ik);Wze=r(kwe,"Data2VecVisionConfig"),kwe.forEach(t),Qze=r(VA," (Data2VecVision model)"),VA.forEach(t),Hze=i(L),Om=n(L,"LI",{});var XA=s(Om);Fre=n(XA,"STRONG",{});var Swe=s(Fre);Uze=r(Swe,"deberta"),Swe.forEach(t),Jze=r(XA," \u2014 "),Nk=n(XA,"A",{href:!0});var Rwe=s(Nk);Yze=r(Rwe,"DebertaConfig"),Rwe.forEach(t),Kze=r(XA," (DeBERTa model)"),XA.forEach(t),Zze=i(L),Vm=n(L,"LI",{});var zA=s(Vm);Tre=n(zA,"STRONG",{});var Pwe=s(Tre);eWe=r(Pwe,"deberta-v2"),Pwe.forEach(t),oWe=r(zA," \u2014 "),qk=n(zA,"A",{href:!0});var Bwe=s(qk);rWe=r(Bwe,"DebertaV2Config"),Bwe.forEach(t),tWe=r(zA," (DeBERTa-v2 model)"),zA.forEach(t),aWe=i(L),Xm=n(L,"LI",{});var WA=s(Xm);Mre=n(WA,"STRONG",{});var Iwe=s(Mre);nWe=r(Iwe,"decision_transformer"),Iwe.forEach(t),sWe=r(WA," \u2014 "),jk=n(WA,"A",{href:!0});var PWr=s(jk);lWe=r(PWr,"DecisionTransformerConfig"),PWr.forEach(t),iWe=r(WA," (Decision Transformer model)"),WA.forEach(t),dWe=i(L),zm=n(L,"LI",{});var Nwe=s(zm);Ere=n(Nwe,"STRONG",{});var BWr=s(Ere);cWe=r(BWr,"deit"),BWr.forEach(t),mWe=r(Nwe," \u2014 "),Dk=n(Nwe,"A",{href:!0});var IWr=s(Dk);fWe=r(IWr,"DeiTConfig"),IWr.forEach(t),gWe=r(Nwe," (DeiT model)"),Nwe.forEach(t),hWe=i(L),Wm=n(L,"LI",{});var qwe=s(Wm);Cre=n(qwe,"STRONG",{});var NWr=s(Cre);uWe=r(NWr,"detr"),NWr.forEach(t),pWe=r(qwe," \u2014 "),Gk=n(qwe,"A",{href:!0});var qWr=s(Gk);_We=r(qWr,"DetrConfig"),qWr.forEach(t),bWe=r(qwe," (DETR model)"),qwe.forEach(t),vWe=i(L),Qm=n(L,"LI",{});var jwe=s(Qm);wre=n(jwe,"STRONG",{});var jWr=s(wre);FWe=r(jWr,"distilbert"),jWr.forEach(t),TWe=r(jwe," \u2014 "),Ok=n(jwe,"A",{href:!0});var DWr=s(Ok);MWe=r(DWr,"DistilBertConfig"),DWr.forEach(t),EWe=r(jwe," (DistilBERT model)"),jwe.forEach(t),CWe=i(L),Hm=n(L,"LI",{});var Dwe=s(Hm);Are=n(Dwe,"STRONG",{});var GWr=s(Are);wWe=r(GWr,"dpr"),GWr.forEach(t),AWe=r(Dwe," \u2014 "),Vk=n(Dwe,"A",{href:!0});var OWr=s(Vk);LWe=r(OWr,"DPRConfig"),OWr.forEach(t),yWe=r(Dwe," (DPR model)"),Dwe.forEach(t),xWe=i(L),Um=n(L,"LI",{});var Gwe=s(Um);Lre=n(Gwe,"STRONG",{});var VWr=s(Lre);$We=r(VWr,"dpt"),VWr.forEach(t),kWe=r(Gwe," \u2014 "),Xk=n(Gwe,"A",{href:!0});var XWr=s(Xk);SWe=r(XWr,"DPTConfig"),XWr.forEach(t),RWe=r(Gwe," (DPT model)"),Gwe.forEach(t),PWe=i(L),Jm=n(L,"LI",{});var Owe=s(Jm);yre=n(Owe,"STRONG",{});var zWr=s(yre);BWe=r(zWr,"electra"),zWr.forEach(t),IWe=r(Owe," \u2014 "),zk=n(Owe,"A",{href:!0});var WWr=s(zk);NWe=r(WWr,"ElectraConfig"),WWr.forEach(t),qWe=r(Owe," (ELECTRA model)"),Owe.forEach(t),jWe=i(L),Ym=n(L,"LI",{});var Vwe=s(Ym);xre=n(Vwe,"STRONG",{});var QWr=s(xre);DWe=r(QWr,"encoder-decoder"),QWr.forEach(t),GWe=r(Vwe," \u2014 "),Wk=n(Vwe,"A",{href:!0});var HWr=s(Wk);OWe=r(HWr,"EncoderDecoderConfig"),HWr.forEach(t),VWe=r(Vwe," (Encoder decoder model)"),Vwe.forEach(t),XWe=i(L),Km=n(L,"LI",{});var Xwe=s(Km);$re=n(Xwe,"STRONG",{});var UWr=s($re);zWe=r(UWr,"flaubert"),UWr.forEach(t),WWe=r(Xwe," \u2014 "),Qk=n(Xwe,"A",{href:!0});var JWr=s(Qk);QWe=r(JWr,"FlaubertConfig"),JWr.forEach(t),HWe=r(Xwe," (FlauBERT model)"),Xwe.forEach(t),UWe=i(L),Zm=n(L,"LI",{});var zwe=s(Zm);kre=n(zwe,"STRONG",{});var YWr=s(kre);JWe=r(YWr,"flava"),YWr.forEach(t),YWe=r(zwe," \u2014 "),Hk=n(zwe,"A",{href:!0});var KWr=s(Hk);KWe=r(KWr,"FlavaConfig"),KWr.forEach(t),ZWe=r(zwe," (FLAVA model)"),zwe.forEach(t),eQe=i(L),ef=n(L,"LI",{});var Wwe=s(ef);Sre=n(Wwe,"STRONG",{});var ZWr=s(Sre);oQe=r(ZWr,"fnet"),ZWr.forEach(t),rQe=r(Wwe," \u2014 "),Uk=n(Wwe,"A",{href:!0});var eQr=s(Uk);tQe=r(eQr,"FNetConfig"),eQr.forEach(t),aQe=r(Wwe," (FNet model)"),Wwe.forEach(t),nQe=i(L),of=n(L,"LI",{});var Qwe=s(of);Rre=n(Qwe,"STRONG",{});var oQr=s(Rre);sQe=r(oQr,"fsmt"),oQr.forEach(t),lQe=r(Qwe," \u2014 "),Jk=n(Qwe,"A",{href:!0});var rQr=s(Jk);iQe=r(rQr,"FSMTConfig"),rQr.forEach(t),dQe=r(Qwe," (FairSeq Machine-Translation model)"),Qwe.forEach(t),cQe=i(L),rf=n(L,"LI",{});var Hwe=s(rf);Pre=n(Hwe,"STRONG",{});var tQr=s(Pre);mQe=r(tQr,"funnel"),tQr.forEach(t),fQe=r(Hwe," \u2014 "),Yk=n(Hwe,"A",{href:!0});var aQr=s(Yk);gQe=r(aQr,"FunnelConfig"),aQr.forEach(t),hQe=r(Hwe," (Funnel Transformer model)"),Hwe.forEach(t),uQe=i(L),tf=n(L,"LI",{});var Uwe=s(tf);Bre=n(Uwe,"STRONG",{});var nQr=s(Bre);pQe=r(nQr,"glpn"),nQr.forEach(t),_Qe=r(Uwe," \u2014 "),Kk=n(Uwe,"A",{href:!0});var sQr=s(Kk);bQe=r(sQr,"GLPNConfig"),sQr.forEach(t),vQe=r(Uwe," (GLPN model)"),Uwe.forEach(t),FQe=i(L),af=n(L,"LI",{});var Jwe=s(af);Ire=n(Jwe,"STRONG",{});var lQr=s(Ire);TQe=r(lQr,"gpt2"),lQr.forEach(t),MQe=r(Jwe," \u2014 "),Zk=n(Jwe,"A",{href:!0});var iQr=s(Zk);EQe=r(iQr,"GPT2Config"),iQr.forEach(t),CQe=r(Jwe," (OpenAI GPT-2 model)"),Jwe.forEach(t),wQe=i(L),nf=n(L,"LI",{});var Ywe=s(nf);Nre=n(Ywe,"STRONG",{});var dQr=s(Nre);AQe=r(dQr,"gpt_neo"),dQr.forEach(t),LQe=r(Ywe," \u2014 "),eS=n(Ywe,"A",{href:!0});var cQr=s(eS);yQe=r(cQr,"GPTNeoConfig"),cQr.forEach(t),xQe=r(Ywe," (GPT Neo model)"),Ywe.forEach(t),$Qe=i(L),sf=n(L,"LI",{});var Kwe=s(sf);qre=n(Kwe,"STRONG",{});var mQr=s(qre);kQe=r(mQr,"gpt_neox"),mQr.forEach(t),SQe=r(Kwe," \u2014 "),oS=n(Kwe,"A",{href:!0});var fQr=s(oS);RQe=r(fQr,"GPTNeoXConfig"),fQr.forEach(t),PQe=r(Kwe," (GPT NeoX model)"),Kwe.forEach(t),BQe=i(L),lf=n(L,"LI",{});var Zwe=s(lf);jre=n(Zwe,"STRONG",{});var gQr=s(jre);IQe=r(gQr,"gptj"),gQr.forEach(t),NQe=r(Zwe," \u2014 "),rS=n(Zwe,"A",{href:!0});var hQr=s(rS);qQe=r(hQr,"GPTJConfig"),hQr.forEach(t),jQe=r(Zwe," (GPT-J model)"),Zwe.forEach(t),DQe=i(L),df=n(L,"LI",{});var eAe=s(df);Dre=n(eAe,"STRONG",{});var uQr=s(Dre);GQe=r(uQr,"hubert"),uQr.forEach(t),OQe=r(eAe," \u2014 "),tS=n(eAe,"A",{href:!0});var pQr=s(tS);VQe=r(pQr,"HubertConfig"),pQr.forEach(t),XQe=r(eAe," (Hubert model)"),eAe.forEach(t),zQe=i(L),cf=n(L,"LI",{});var oAe=s(cf);Gre=n(oAe,"STRONG",{});var _Qr=s(Gre);WQe=r(_Qr,"ibert"),_Qr.forEach(t),QQe=r(oAe," \u2014 "),aS=n(oAe,"A",{href:!0});var bQr=s(aS);HQe=r(bQr,"IBertConfig"),bQr.forEach(t),UQe=r(oAe," (I-BERT model)"),oAe.forEach(t),JQe=i(L),mf=n(L,"LI",{});var rAe=s(mf);Ore=n(rAe,"STRONG",{});var vQr=s(Ore);YQe=r(vQr,"imagegpt"),vQr.forEach(t),KQe=r(rAe," \u2014 "),nS=n(rAe,"A",{href:!0});var FQr=s(nS);ZQe=r(FQr,"ImageGPTConfig"),FQr.forEach(t),eHe=r(rAe," (ImageGPT model)"),rAe.forEach(t),oHe=i(L),ff=n(L,"LI",{});var tAe=s(ff);Vre=n(tAe,"STRONG",{});var TQr=s(Vre);rHe=r(TQr,"layoutlm"),TQr.forEach(t),tHe=r(tAe," \u2014 "),sS=n(tAe,"A",{href:!0});var MQr=s(sS);aHe=r(MQr,"LayoutLMConfig"),MQr.forEach(t),nHe=r(tAe," (LayoutLM model)"),tAe.forEach(t),sHe=i(L),gf=n(L,"LI",{});var aAe=s(gf);Xre=n(aAe,"STRONG",{});var EQr=s(Xre);lHe=r(EQr,"layoutlmv2"),EQr.forEach(t),iHe=r(aAe," \u2014 "),lS=n(aAe,"A",{href:!0});var CQr=s(lS);dHe=r(CQr,"LayoutLMv2Config"),CQr.forEach(t),cHe=r(aAe," (LayoutLMv2 model)"),aAe.forEach(t),mHe=i(L),hf=n(L,"LI",{});var nAe=s(hf);zre=n(nAe,"STRONG",{});var wQr=s(zre);fHe=r(wQr,"layoutlmv3"),wQr.forEach(t),gHe=r(nAe," \u2014 "),iS=n(nAe,"A",{href:!0});var AQr=s(iS);hHe=r(AQr,"LayoutLMv3Config"),AQr.forEach(t),uHe=r(nAe," (LayoutLMv3 model)"),nAe.forEach(t),pHe=i(L),uf=n(L,"LI",{});var sAe=s(uf);Wre=n(sAe,"STRONG",{});var LQr=s(Wre);_He=r(LQr,"led"),LQr.forEach(t),bHe=r(sAe," \u2014 "),dS=n(sAe,"A",{href:!0});var yQr=s(dS);vHe=r(yQr,"LEDConfig"),yQr.forEach(t),FHe=r(sAe," (LED model)"),sAe.forEach(t),THe=i(L),pf=n(L,"LI",{});var lAe=s(pf);Qre=n(lAe,"STRONG",{});var xQr=s(Qre);MHe=r(xQr,"levit"),xQr.forEach(t),EHe=r(lAe," \u2014 "),cS=n(lAe,"A",{href:!0});var $Qr=s(cS);CHe=r($Qr,"LevitConfig"),$Qr.forEach(t),wHe=r(lAe," (LeViT model)"),lAe.forEach(t),AHe=i(L),_f=n(L,"LI",{});var iAe=s(_f);Hre=n(iAe,"STRONG",{});var kQr=s(Hre);LHe=r(kQr,"longformer"),kQr.forEach(t),yHe=r(iAe," \u2014 "),mS=n(iAe,"A",{href:!0});var SQr=s(mS);xHe=r(SQr,"LongformerConfig"),SQr.forEach(t),$He=r(iAe," (Longformer model)"),iAe.forEach(t),kHe=i(L),bf=n(L,"LI",{});var dAe=s(bf);Ure=n(dAe,"STRONG",{});var RQr=s(Ure);SHe=r(RQr,"luke"),RQr.forEach(t),RHe=r(dAe," \u2014 "),fS=n(dAe,"A",{href:!0});var PQr=s(fS);PHe=r(PQr,"LukeConfig"),PQr.forEach(t),BHe=r(dAe," (LUKE model)"),dAe.forEach(t),IHe=i(L),vf=n(L,"LI",{});var cAe=s(vf);Jre=n(cAe,"STRONG",{});var BQr=s(Jre);NHe=r(BQr,"lxmert"),BQr.forEach(t),qHe=r(cAe," \u2014 "),gS=n(cAe,"A",{href:!0});var IQr=s(gS);jHe=r(IQr,"LxmertConfig"),IQr.forEach(t),DHe=r(cAe," (LXMERT model)"),cAe.forEach(t),GHe=i(L),Ff=n(L,"LI",{});var mAe=s(Ff);Yre=n(mAe,"STRONG",{});var NQr=s(Yre);OHe=r(NQr,"m2m_100"),NQr.forEach(t),VHe=r(mAe," \u2014 "),hS=n(mAe,"A",{href:!0});var qQr=s(hS);XHe=r(qQr,"M2M100Config"),qQr.forEach(t),zHe=r(mAe," (M2M100 model)"),mAe.forEach(t),WHe=i(L),Tf=n(L,"LI",{});var fAe=s(Tf);Kre=n(fAe,"STRONG",{});var jQr=s(Kre);QHe=r(jQr,"marian"),jQr.forEach(t),HHe=r(fAe," \u2014 "),uS=n(fAe,"A",{href:!0});var DQr=s(uS);UHe=r(DQr,"MarianConfig"),DQr.forEach(t),JHe=r(fAe," (Marian model)"),fAe.forEach(t),YHe=i(L),Mf=n(L,"LI",{});var gAe=s(Mf);Zre=n(gAe,"STRONG",{});var GQr=s(Zre);KHe=r(GQr,"maskformer"),GQr.forEach(t),ZHe=r(gAe," \u2014 "),pS=n(gAe,"A",{href:!0});var OQr=s(pS);eUe=r(OQr,"MaskFormerConfig"),OQr.forEach(t),oUe=r(gAe," (MaskFormer model)"),gAe.forEach(t),rUe=i(L),Ef=n(L,"LI",{});var hAe=s(Ef);ete=n(hAe,"STRONG",{});var VQr=s(ete);tUe=r(VQr,"mbart"),VQr.forEach(t),aUe=r(hAe," \u2014 "),_S=n(hAe,"A",{href:!0});var XQr=s(_S);nUe=r(XQr,"MBartConfig"),XQr.forEach(t),sUe=r(hAe," (mBART model)"),hAe.forEach(t),lUe=i(L),Cf=n(L,"LI",{});var uAe=s(Cf);ote=n(uAe,"STRONG",{});var zQr=s(ote);iUe=r(zQr,"mctct"),zQr.forEach(t),dUe=r(uAe," \u2014 "),bS=n(uAe,"A",{href:!0});var WQr=s(bS);cUe=r(WQr,"MCTCTConfig"),WQr.forEach(t),mUe=r(uAe," (M-CTC-T model)"),uAe.forEach(t),fUe=i(L),wf=n(L,"LI",{});var pAe=s(wf);rte=n(pAe,"STRONG",{});var QQr=s(rte);gUe=r(QQr,"megatron-bert"),QQr.forEach(t),hUe=r(pAe," \u2014 "),vS=n(pAe,"A",{href:!0});var HQr=s(vS);uUe=r(HQr,"MegatronBertConfig"),HQr.forEach(t),pUe=r(pAe," (Megatron-BERT model)"),pAe.forEach(t),_Ue=i(L),Af=n(L,"LI",{});var _Ae=s(Af);tte=n(_Ae,"STRONG",{});var UQr=s(tte);bUe=r(UQr,"mobilebert"),UQr.forEach(t),vUe=r(_Ae," \u2014 "),FS=n(_Ae,"A",{href:!0});var JQr=s(FS);FUe=r(JQr,"MobileBertConfig"),JQr.forEach(t),TUe=r(_Ae," (MobileBERT model)"),_Ae.forEach(t),MUe=i(L),Lf=n(L,"LI",{});var bAe=s(Lf);ate=n(bAe,"STRONG",{});var YQr=s(ate);EUe=r(YQr,"mpnet"),YQr.forEach(t),CUe=r(bAe," \u2014 "),TS=n(bAe,"A",{href:!0});var KQr=s(TS);wUe=r(KQr,"MPNetConfig"),KQr.forEach(t),AUe=r(bAe," (MPNet model)"),bAe.forEach(t),LUe=i(L),yf=n(L,"LI",{});var vAe=s(yf);nte=n(vAe,"STRONG",{});var ZQr=s(nte);yUe=r(ZQr,"mt5"),ZQr.forEach(t),xUe=r(vAe," \u2014 "),MS=n(vAe,"A",{href:!0});var eHr=s(MS);$Ue=r(eHr,"MT5Config"),eHr.forEach(t),kUe=r(vAe," (MT5 model)"),vAe.forEach(t),SUe=i(L),xf=n(L,"LI",{});var FAe=s(xf);ste=n(FAe,"STRONG",{});var oHr=s(ste);RUe=r(oHr,"nystromformer"),oHr.forEach(t),PUe=r(FAe," \u2014 "),ES=n(FAe,"A",{href:!0});var rHr=s(ES);BUe=r(rHr,"NystromformerConfig"),rHr.forEach(t),IUe=r(FAe," (Nystr\xF6mformer model)"),FAe.forEach(t),NUe=i(L),$f=n(L,"LI",{});var TAe=s($f);lte=n(TAe,"STRONG",{});var tHr=s(lte);qUe=r(tHr,"openai-gpt"),tHr.forEach(t),jUe=r(TAe," \u2014 "),CS=n(TAe,"A",{href:!0});var aHr=s(CS);DUe=r(aHr,"OpenAIGPTConfig"),aHr.forEach(t),GUe=r(TAe," (OpenAI GPT model)"),TAe.forEach(t),OUe=i(L),kf=n(L,"LI",{});var MAe=s(kf);ite=n(MAe,"STRONG",{});var nHr=s(ite);VUe=r(nHr,"opt"),nHr.forEach(t),XUe=r(MAe," \u2014 "),wS=n(MAe,"A",{href:!0});var sHr=s(wS);zUe=r(sHr,"OPTConfig"),sHr.forEach(t),WUe=r(MAe," (OPT model)"),MAe.forEach(t),QUe=i(L),Sf=n(L,"LI",{});var EAe=s(Sf);dte=n(EAe,"STRONG",{});var lHr=s(dte);HUe=r(lHr,"pegasus"),lHr.forEach(t),UUe=r(EAe," \u2014 "),AS=n(EAe,"A",{href:!0});var iHr=s(AS);JUe=r(iHr,"PegasusConfig"),iHr.forEach(t),YUe=r(EAe," (Pegasus model)"),EAe.forEach(t),KUe=i(L),Rf=n(L,"LI",{});var CAe=s(Rf);cte=n(CAe,"STRONG",{});var dHr=s(cte);ZUe=r(dHr,"perceiver"),dHr.forEach(t),eJe=r(CAe," \u2014 "),LS=n(CAe,"A",{href:!0});var cHr=s(LS);oJe=r(cHr,"PerceiverConfig"),cHr.forEach(t),rJe=r(CAe," (Perceiver model)"),CAe.forEach(t),tJe=i(L),Pf=n(L,"LI",{});var wAe=s(Pf);mte=n(wAe,"STRONG",{});var mHr=s(mte);aJe=r(mHr,"plbart"),mHr.forEach(t),nJe=r(wAe," \u2014 "),yS=n(wAe,"A",{href:!0});var fHr=s(yS);sJe=r(fHr,"PLBartConfig"),fHr.forEach(t),lJe=r(wAe," (PLBart model)"),wAe.forEach(t),iJe=i(L),Bf=n(L,"LI",{});var AAe=s(Bf);fte=n(AAe,"STRONG",{});var gHr=s(fte);dJe=r(gHr,"poolformer"),gHr.forEach(t),cJe=r(AAe," \u2014 "),xS=n(AAe,"A",{href:!0});var hHr=s(xS);mJe=r(hHr,"PoolFormerConfig"),hHr.forEach(t),fJe=r(AAe," (PoolFormer model)"),AAe.forEach(t),gJe=i(L),If=n(L,"LI",{});var LAe=s(If);gte=n(LAe,"STRONG",{});var uHr=s(gte);hJe=r(uHr,"prophetnet"),uHr.forEach(t),uJe=r(LAe," \u2014 "),$S=n(LAe,"A",{href:!0});var pHr=s($S);pJe=r(pHr,"ProphetNetConfig"),pHr.forEach(t),_Je=r(LAe," (ProphetNet model)"),LAe.forEach(t),bJe=i(L),Nf=n(L,"LI",{});var yAe=s(Nf);hte=n(yAe,"STRONG",{});var _Hr=s(hte);vJe=r(_Hr,"qdqbert"),_Hr.forEach(t),FJe=r(yAe," \u2014 "),kS=n(yAe,"A",{href:!0});var bHr=s(kS);TJe=r(bHr,"QDQBertConfig"),bHr.forEach(t),MJe=r(yAe," (QDQBert model)"),yAe.forEach(t),EJe=i(L),qf=n(L,"LI",{});var xAe=s(qf);ute=n(xAe,"STRONG",{});var vHr=s(ute);CJe=r(vHr,"rag"),vHr.forEach(t),wJe=r(xAe," \u2014 "),SS=n(xAe,"A",{href:!0});var FHr=s(SS);AJe=r(FHr,"RagConfig"),FHr.forEach(t),LJe=r(xAe," (RAG model)"),xAe.forEach(t),yJe=i(L),jf=n(L,"LI",{});var $Ae=s(jf);pte=n($Ae,"STRONG",{});var THr=s(pte);xJe=r(THr,"realm"),THr.forEach(t),$Je=r($Ae," \u2014 "),RS=n($Ae,"A",{href:!0});var MHr=s(RS);kJe=r(MHr,"RealmConfig"),MHr.forEach(t),SJe=r($Ae," (REALM model)"),$Ae.forEach(t),RJe=i(L),Df=n(L,"LI",{});var kAe=s(Df);_te=n(kAe,"STRONG",{});var EHr=s(_te);PJe=r(EHr,"reformer"),EHr.forEach(t),BJe=r(kAe," \u2014 "),PS=n(kAe,"A",{href:!0});var CHr=s(PS);IJe=r(CHr,"ReformerConfig"),CHr.forEach(t),NJe=r(kAe," (Reformer model)"),kAe.forEach(t),qJe=i(L),Gf=n(L,"LI",{});var SAe=s(Gf);bte=n(SAe,"STRONG",{});var wHr=s(bte);jJe=r(wHr,"regnet"),wHr.forEach(t),DJe=r(SAe," \u2014 "),BS=n(SAe,"A",{href:!0});var AHr=s(BS);GJe=r(AHr,"RegNetConfig"),AHr.forEach(t),OJe=r(SAe," (RegNet model)"),SAe.forEach(t),VJe=i(L),Of=n(L,"LI",{});var RAe=s(Of);vte=n(RAe,"STRONG",{});var LHr=s(vte);XJe=r(LHr,"rembert"),LHr.forEach(t),zJe=r(RAe," \u2014 "),IS=n(RAe,"A",{href:!0});var yHr=s(IS);WJe=r(yHr,"RemBertConfig"),yHr.forEach(t),QJe=r(RAe," (RemBERT model)"),RAe.forEach(t),HJe=i(L),Vf=n(L,"LI",{});var PAe=s(Vf);Fte=n(PAe,"STRONG",{});var xHr=s(Fte);UJe=r(xHr,"resnet"),xHr.forEach(t),JJe=r(PAe," \u2014 "),NS=n(PAe,"A",{href:!0});var $Hr=s(NS);YJe=r($Hr,"ResNetConfig"),$Hr.forEach(t),KJe=r(PAe," (ResNet model)"),PAe.forEach(t),ZJe=i(L),Xf=n(L,"LI",{});var BAe=s(Xf);Tte=n(BAe,"STRONG",{});var kHr=s(Tte);eYe=r(kHr,"retribert"),kHr.forEach(t),oYe=r(BAe," \u2014 "),qS=n(BAe,"A",{href:!0});var SHr=s(qS);rYe=r(SHr,"RetriBertConfig"),SHr.forEach(t),tYe=r(BAe," (RetriBERT model)"),BAe.forEach(t),aYe=i(L),zf=n(L,"LI",{});var IAe=s(zf);Mte=n(IAe,"STRONG",{});var RHr=s(Mte);nYe=r(RHr,"roberta"),RHr.forEach(t),sYe=r(IAe," \u2014 "),jS=n(IAe,"A",{href:!0});var PHr=s(jS);lYe=r(PHr,"RobertaConfig"),PHr.forEach(t),iYe=r(IAe," (RoBERTa model)"),IAe.forEach(t),dYe=i(L),Wf=n(L,"LI",{});var NAe=s(Wf);Ete=n(NAe,"STRONG",{});var BHr=s(Ete);cYe=r(BHr,"roformer"),BHr.forEach(t),mYe=r(NAe," \u2014 "),DS=n(NAe,"A",{href:!0});var IHr=s(DS);fYe=r(IHr,"RoFormerConfig"),IHr.forEach(t),gYe=r(NAe," (RoFormer model)"),NAe.forEach(t),hYe=i(L),Qf=n(L,"LI",{});var qAe=s(Qf);Cte=n(qAe,"STRONG",{});var NHr=s(Cte);uYe=r(NHr,"segformer"),NHr.forEach(t),pYe=r(qAe," \u2014 "),GS=n(qAe,"A",{href:!0});var qHr=s(GS);_Ye=r(qHr,"SegformerConfig"),qHr.forEach(t),bYe=r(qAe," (SegFormer model)"),qAe.forEach(t),vYe=i(L),Hf=n(L,"LI",{});var jAe=s(Hf);wte=n(jAe,"STRONG",{});var jHr=s(wte);FYe=r(jHr,"sew"),jHr.forEach(t),TYe=r(jAe," \u2014 "),OS=n(jAe,"A",{href:!0});var DHr=s(OS);MYe=r(DHr,"SEWConfig"),DHr.forEach(t),EYe=r(jAe," (SEW model)"),jAe.forEach(t),CYe=i(L),Uf=n(L,"LI",{});var DAe=s(Uf);Ate=n(DAe,"STRONG",{});var GHr=s(Ate);wYe=r(GHr,"sew-d"),GHr.forEach(t),AYe=r(DAe," \u2014 "),VS=n(DAe,"A",{href:!0});var OHr=s(VS);LYe=r(OHr,"SEWDConfig"),OHr.forEach(t),yYe=r(DAe," (SEW-D model)"),DAe.forEach(t),xYe=i(L),Jf=n(L,"LI",{});var GAe=s(Jf);Lte=n(GAe,"STRONG",{});var VHr=s(Lte);$Ye=r(VHr,"speech-encoder-decoder"),VHr.forEach(t),kYe=r(GAe," \u2014 "),XS=n(GAe,"A",{href:!0});var XHr=s(XS);SYe=r(XHr,"SpeechEncoderDecoderConfig"),XHr.forEach(t),RYe=r(GAe," (Speech Encoder decoder model)"),GAe.forEach(t),PYe=i(L),Yf=n(L,"LI",{});var OAe=s(Yf);yte=n(OAe,"STRONG",{});var zHr=s(yte);BYe=r(zHr,"speech_to_text"),zHr.forEach(t),IYe=r(OAe," \u2014 "),zS=n(OAe,"A",{href:!0});var WHr=s(zS);NYe=r(WHr,"Speech2TextConfig"),WHr.forEach(t),qYe=r(OAe," (Speech2Text model)"),OAe.forEach(t),jYe=i(L),Kf=n(L,"LI",{});var VAe=s(Kf);xte=n(VAe,"STRONG",{});var QHr=s(xte);DYe=r(QHr,"speech_to_text_2"),QHr.forEach(t),GYe=r(VAe," \u2014 "),WS=n(VAe,"A",{href:!0});var HHr=s(WS);OYe=r(HHr,"Speech2Text2Config"),HHr.forEach(t),VYe=r(VAe," (Speech2Text2 model)"),VAe.forEach(t),XYe=i(L),Zf=n(L,"LI",{});var XAe=s(Zf);$te=n(XAe,"STRONG",{});var UHr=s($te);zYe=r(UHr,"splinter"),UHr.forEach(t),WYe=r(XAe," \u2014 "),QS=n(XAe,"A",{href:!0});var JHr=s(QS);QYe=r(JHr,"SplinterConfig"),JHr.forEach(t),HYe=r(XAe," (Splinter model)"),XAe.forEach(t),UYe=i(L),eg=n(L,"LI",{});var zAe=s(eg);kte=n(zAe,"STRONG",{});var YHr=s(kte);JYe=r(YHr,"squeezebert"),YHr.forEach(t),YYe=r(zAe," \u2014 "),HS=n(zAe,"A",{href:!0});var KHr=s(HS);KYe=r(KHr,"SqueezeBertConfig"),KHr.forEach(t),ZYe=r(zAe," (SqueezeBERT model)"),zAe.forEach(t),eKe=i(L),og=n(L,"LI",{});var WAe=s(og);Ste=n(WAe,"STRONG",{});var ZHr=s(Ste);oKe=r(ZHr,"swin"),ZHr.forEach(t),rKe=r(WAe," \u2014 "),US=n(WAe,"A",{href:!0});var eUr=s(US);tKe=r(eUr,"SwinConfig"),eUr.forEach(t),aKe=r(WAe," (Swin Transformer model)"),WAe.forEach(t),nKe=i(L),rg=n(L,"LI",{});var QAe=s(rg);Rte=n(QAe,"STRONG",{});var oUr=s(Rte);sKe=r(oUr,"t5"),oUr.forEach(t),lKe=r(QAe," \u2014 "),JS=n(QAe,"A",{href:!0});var rUr=s(JS);iKe=r(rUr,"T5Config"),rUr.forEach(t),dKe=r(QAe," (T5 model)"),QAe.forEach(t),cKe=i(L),tg=n(L,"LI",{});var HAe=s(tg);Pte=n(HAe,"STRONG",{});var tUr=s(Pte);mKe=r(tUr,"tapas"),tUr.forEach(t),fKe=r(HAe," \u2014 "),YS=n(HAe,"A",{href:!0});var aUr=s(YS);gKe=r(aUr,"TapasConfig"),aUr.forEach(t),hKe=r(HAe," (TAPAS model)"),HAe.forEach(t),uKe=i(L),ag=n(L,"LI",{});var UAe=s(ag);Bte=n(UAe,"STRONG",{});var nUr=s(Bte);pKe=r(nUr,"trajectory_transformer"),nUr.forEach(t),_Ke=r(UAe," \u2014 "),KS=n(UAe,"A",{href:!0});var sUr=s(KS);bKe=r(sUr,"TrajectoryTransformerConfig"),sUr.forEach(t),vKe=r(UAe," (Trajectory Transformer model)"),UAe.forEach(t),FKe=i(L),ng=n(L,"LI",{});var JAe=s(ng);Ite=n(JAe,"STRONG",{});var lUr=s(Ite);TKe=r(lUr,"transfo-xl"),lUr.forEach(t),MKe=r(JAe," \u2014 "),ZS=n(JAe,"A",{href:!0});var iUr=s(ZS);EKe=r(iUr,"TransfoXLConfig"),iUr.forEach(t),CKe=r(JAe," (Transformer-XL model)"),JAe.forEach(t),wKe=i(L),sg=n(L,"LI",{});var YAe=s(sg);Nte=n(YAe,"STRONG",{});var dUr=s(Nte);AKe=r(dUr,"trocr"),dUr.forEach(t),LKe=r(YAe," \u2014 "),eR=n(YAe,"A",{href:!0});var cUr=s(eR);yKe=r(cUr,"TrOCRConfig"),cUr.forEach(t),xKe=r(YAe," (TrOCR model)"),YAe.forEach(t),$Ke=i(L),lg=n(L,"LI",{});var KAe=s(lg);qte=n(KAe,"STRONG",{});var mUr=s(qte);kKe=r(mUr,"unispeech"),mUr.forEach(t),SKe=r(KAe," \u2014 "),oR=n(KAe,"A",{href:!0});var fUr=s(oR);RKe=r(fUr,"UniSpeechConfig"),fUr.forEach(t),PKe=r(KAe," (UniSpeech model)"),KAe.forEach(t),BKe=i(L),ig=n(L,"LI",{});var ZAe=s(ig);jte=n(ZAe,"STRONG",{});var gUr=s(jte);IKe=r(gUr,"unispeech-sat"),gUr.forEach(t),NKe=r(ZAe," \u2014 "),rR=n(ZAe,"A",{href:!0});var hUr=s(rR);qKe=r(hUr,"UniSpeechSatConfig"),hUr.forEach(t),jKe=r(ZAe," (UniSpeechSat model)"),ZAe.forEach(t),DKe=i(L),dg=n(L,"LI",{});var e6e=s(dg);Dte=n(e6e,"STRONG",{});var uUr=s(Dte);GKe=r(uUr,"van"),uUr.forEach(t),OKe=r(e6e," \u2014 "),tR=n(e6e,"A",{href:!0});var pUr=s(tR);VKe=r(pUr,"VanConfig"),pUr.forEach(t),XKe=r(e6e," (VAN model)"),e6e.forEach(t),zKe=i(L),cg=n(L,"LI",{});var o6e=s(cg);Gte=n(o6e,"STRONG",{});var _Ur=s(Gte);WKe=r(_Ur,"vilt"),_Ur.forEach(t),QKe=r(o6e," \u2014 "),aR=n(o6e,"A",{href:!0});var bUr=s(aR);HKe=r(bUr,"ViltConfig"),bUr.forEach(t),UKe=r(o6e," (ViLT model)"),o6e.forEach(t),JKe=i(L),mg=n(L,"LI",{});var r6e=s(mg);Ote=n(r6e,"STRONG",{});var vUr=s(Ote);YKe=r(vUr,"vision-encoder-decoder"),vUr.forEach(t),KKe=r(r6e," \u2014 "),nR=n(r6e,"A",{href:!0});var FUr=s(nR);ZKe=r(FUr,"VisionEncoderDecoderConfig"),FUr.forEach(t),eZe=r(r6e," (Vision Encoder decoder model)"),r6e.forEach(t),oZe=i(L),fg=n(L,"LI",{});var t6e=s(fg);Vte=n(t6e,"STRONG",{});var TUr=s(Vte);rZe=r(TUr,"vision-text-dual-encoder"),TUr.forEach(t),tZe=r(t6e," \u2014 "),sR=n(t6e,"A",{href:!0});var MUr=s(sR);aZe=r(MUr,"VisionTextDualEncoderConfig"),MUr.forEach(t),nZe=r(t6e," (VisionTextDualEncoder model)"),t6e.forEach(t),sZe=i(L),gg=n(L,"LI",{});var a6e=s(gg);Xte=n(a6e,"STRONG",{});var EUr=s(Xte);lZe=r(EUr,"visual_bert"),EUr.forEach(t),iZe=r(a6e," \u2014 "),lR=n(a6e,"A",{href:!0});var CUr=s(lR);dZe=r(CUr,"VisualBertConfig"),CUr.forEach(t),cZe=r(a6e," (VisualBERT model)"),a6e.forEach(t),mZe=i(L),hg=n(L,"LI",{});var n6e=s(hg);zte=n(n6e,"STRONG",{});var wUr=s(zte);fZe=r(wUr,"vit"),wUr.forEach(t),gZe=r(n6e," \u2014 "),iR=n(n6e,"A",{href:!0});var AUr=s(iR);hZe=r(AUr,"ViTConfig"),AUr.forEach(t),uZe=r(n6e," (ViT model)"),n6e.forEach(t),pZe=i(L),ug=n(L,"LI",{});var s6e=s(ug);Wte=n(s6e,"STRONG",{});var LUr=s(Wte);_Ze=r(LUr,"vit_mae"),LUr.forEach(t),bZe=r(s6e," \u2014 "),dR=n(s6e,"A",{href:!0});var yUr=s(dR);vZe=r(yUr,"ViTMAEConfig"),yUr.forEach(t),FZe=r(s6e," (ViTMAE model)"),s6e.forEach(t),TZe=i(L),pg=n(L,"LI",{});var l6e=s(pg);Qte=n(l6e,"STRONG",{});var xUr=s(Qte);MZe=r(xUr,"wav2vec2"),xUr.forEach(t),EZe=r(l6e," \u2014 "),cR=n(l6e,"A",{href:!0});var $Ur=s(cR);CZe=r($Ur,"Wav2Vec2Config"),$Ur.forEach(t),wZe=r(l6e," (Wav2Vec2 model)"),l6e.forEach(t),AZe=i(L),_g=n(L,"LI",{});var i6e=s(_g);Hte=n(i6e,"STRONG",{});var kUr=s(Hte);LZe=r(kUr,"wav2vec2-conformer"),kUr.forEach(t),yZe=r(i6e," \u2014 "),mR=n(i6e,"A",{href:!0});var SUr=s(mR);xZe=r(SUr,"Wav2Vec2ConformerConfig"),SUr.forEach(t),$Ze=r(i6e," (Wav2Vec2-Conformer model)"),i6e.forEach(t),kZe=i(L),bg=n(L,"LI",{});var d6e=s(bg);Ute=n(d6e,"STRONG",{});var RUr=s(Ute);SZe=r(RUr,"wavlm"),RUr.forEach(t),RZe=r(d6e," \u2014 "),fR=n(d6e,"A",{href:!0});var PUr=s(fR);PZe=r(PUr,"WavLMConfig"),PUr.forEach(t),BZe=r(d6e," (WavLM model)"),d6e.forEach(t),IZe=i(L),vg=n(L,"LI",{});var c6e=s(vg);Jte=n(c6e,"STRONG",{});var BUr=s(Jte);NZe=r(BUr,"xglm"),BUr.forEach(t),qZe=r(c6e," \u2014 "),gR=n(c6e,"A",{href:!0});var IUr=s(gR);jZe=r(IUr,"XGLMConfig"),IUr.forEach(t),DZe=r(c6e," (XGLM model)"),c6e.forEach(t),GZe=i(L),Fg=n(L,"LI",{});var m6e=s(Fg);Yte=n(m6e,"STRONG",{});var NUr=s(Yte);OZe=r(NUr,"xlm"),NUr.forEach(t),VZe=r(m6e," \u2014 "),hR=n(m6e,"A",{href:!0});var qUr=s(hR);XZe=r(qUr,"XLMConfig"),qUr.forEach(t),zZe=r(m6e," (XLM model)"),m6e.forEach(t),WZe=i(L),Tg=n(L,"LI",{});var f6e=s(Tg);Kte=n(f6e,"STRONG",{});var jUr=s(Kte);QZe=r(jUr,"xlm-prophetnet"),jUr.forEach(t),HZe=r(f6e," \u2014 "),uR=n(f6e,"A",{href:!0});var DUr=s(uR);UZe=r(DUr,"XLMProphetNetConfig"),DUr.forEach(t),JZe=r(f6e," (XLM-ProphetNet model)"),f6e.forEach(t),YZe=i(L),Mg=n(L,"LI",{});var g6e=s(Mg);Zte=n(g6e,"STRONG",{});var GUr=s(Zte);KZe=r(GUr,"xlm-roberta"),GUr.forEach(t),ZZe=r(g6e," \u2014 "),pR=n(g6e,"A",{href:!0});var OUr=s(pR);eeo=r(OUr,"XLMRobertaConfig"),OUr.forEach(t),oeo=r(g6e," (XLM-RoBERTa model)"),g6e.forEach(t),reo=i(L),Eg=n(L,"LI",{});var h6e=s(Eg);eae=n(h6e,"STRONG",{});var VUr=s(eae);teo=r(VUr,"xlm-roberta-xl"),VUr.forEach(t),aeo=r(h6e," \u2014 "),_R=n(h6e,"A",{href:!0});var XUr=s(_R);neo=r(XUr,"XLMRobertaXLConfig"),XUr.forEach(t),seo=r(h6e," (XLM-RoBERTa-XL model)"),h6e.forEach(t),leo=i(L),Cg=n(L,"LI",{});var u6e=s(Cg);oae=n(u6e,"STRONG",{});var zUr=s(oae);ieo=r(zUr,"xlnet"),zUr.forEach(t),deo=r(u6e," \u2014 "),bR=n(u6e,"A",{href:!0});var WUr=s(bR);ceo=r(WUr,"XLNetConfig"),WUr.forEach(t),meo=r(u6e," (XLNet model)"),u6e.forEach(t),feo=i(L),wg=n(L,"LI",{});var p6e=s(wg);rae=n(p6e,"STRONG",{});var QUr=s(rae);geo=r(QUr,"yolos"),QUr.forEach(t),heo=r(p6e," \u2014 "),vR=n(p6e,"A",{href:!0});var HUr=s(vR);ueo=r(HUr,"YolosConfig"),HUr.forEach(t),peo=r(p6e," (YOLOS model)"),p6e.forEach(t),_eo=i(L),Ag=n(L,"LI",{});var _6e=s(Ag);tae=n(_6e,"STRONG",{});var UUr=s(tae);beo=r(UUr,"yoso"),UUr.forEach(t),veo=r(_6e," \u2014 "),FR=n(_6e,"A",{href:!0});var JUr=s(FR);Feo=r(JUr,"YosoConfig"),JUr.forEach(t),Teo=r(_6e," (YOSO model)"),_6e.forEach(t),L.forEach(t),Meo=i(ot),T(Lg.$$.fragment,ot),ot.forEach(t),Eeo=i(et),yg=n(et,"DIV",{class:!0});var TGe=s(yg);T(KL.$$.fragment,TGe),Ceo=i(TGe),aae=n(TGe,"P",{});var YUr=s(aae);weo=r(YUr,"Register a new configuration for this class."),YUr.forEach(t),TGe.forEach(t),et.forEach(t),Cje=i(m),Mi=n(m,"H2",{class:!0});var MGe=s(Mi);xg=n(MGe,"A",{id:!0,class:!0,href:!0});var KUr=s(xg);nae=n(KUr,"SPAN",{});var ZUr=s(nae);T(ZL.$$.fragment,ZUr),ZUr.forEach(t),KUr.forEach(t),Aeo=i(MGe),sae=n(MGe,"SPAN",{});var eJr=s(sae);Leo=r(eJr,"AutoTokenizer"),eJr.forEach(t),MGe.forEach(t),wje=i(m),wo=n(m,"DIV",{class:!0});var qs=s(wo);T(ey.$$.fragment,qs),yeo=i(qs),oy=n(qs,"P",{});var EGe=s(oy);xeo=r(EGe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),TR=n(EGe,"A",{href:!0});var oJr=s(TR);$eo=r(oJr,"AutoTokenizer.from_pretrained()"),oJr.forEach(t),keo=r(EGe," class method."),EGe.forEach(t),Seo=i(qs),ry=n(qs,"P",{});var CGe=s(ry);Reo=r(CGe,"This class cannot be instantiated directly using "),lae=n(CGe,"CODE",{});var rJr=s(lae);Peo=r(rJr,"__init__()"),rJr.forEach(t),Beo=r(CGe," (throws an error)."),CGe.forEach(t),Ieo=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(ty.$$.fragment,js),Neo=i(js),iae=n(js,"P",{});var tJr=s(iae);qeo=r(tJr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),tJr.forEach(t),jeo=i(js),Aa=n(js,"P",{});var QA=s(Aa);Deo=r(QA,"The tokenizer class to instantiate is selected based on the "),dae=n(QA,"CODE",{});var aJr=s(dae);Geo=r(aJr,"model_type"),aJr.forEach(t),Oeo=r(QA,` property of the config object (either
passed as an argument or loaded from `),cae=n(QA,"CODE",{});var nJr=s(cae);Veo=r(nJr,"pretrained_model_name_or_path"),nJr.forEach(t),Xeo=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mae=n(QA,"CODE",{});var sJr=s(mae);zeo=r(sJr,"pretrained_model_name_or_path"),sJr.forEach(t),Weo=r(QA,":"),QA.forEach(t),Qeo=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var a$=s(Sn);fae=n(a$,"STRONG",{});var lJr=s(fae);Heo=r(lJr,"albert"),lJr.forEach(t),Ueo=r(a$," \u2014 "),MR=n(a$,"A",{href:!0});var iJr=s(MR);Jeo=r(iJr,"AlbertTokenizer"),iJr.forEach(t),Yeo=r(a$," or "),ER=n(a$,"A",{href:!0});var dJr=s(ER);Keo=r(dJr,"AlbertTokenizerFast"),dJr.forEach(t),Zeo=r(a$," (ALBERT model)"),a$.forEach(t),eoo=i(S),Rn=n(S,"LI",{});var n$=s(Rn);gae=n(n$,"STRONG",{});var cJr=s(gae);ooo=r(cJr,"bart"),cJr.forEach(t),roo=r(n$," \u2014 "),CR=n(n$,"A",{href:!0});var mJr=s(CR);too=r(mJr,"BartTokenizer"),mJr.forEach(t),aoo=r(n$," or "),wR=n(n$,"A",{href:!0});var fJr=s(wR);noo=r(fJr,"BartTokenizerFast"),fJr.forEach(t),soo=r(n$," (BART model)"),n$.forEach(t),loo=i(S),Pn=n(S,"LI",{});var s$=s(Pn);hae=n(s$,"STRONG",{});var gJr=s(hae);ioo=r(gJr,"barthez"),gJr.forEach(t),doo=r(s$," \u2014 "),AR=n(s$,"A",{href:!0});var hJr=s(AR);coo=r(hJr,"BarthezTokenizer"),hJr.forEach(t),moo=r(s$," or "),LR=n(s$,"A",{href:!0});var uJr=s(LR);foo=r(uJr,"BarthezTokenizerFast"),uJr.forEach(t),goo=r(s$," (BARThez model)"),s$.forEach(t),hoo=i(S),$g=n(S,"LI",{});var b6e=s($g);uae=n(b6e,"STRONG",{});var pJr=s(uae);uoo=r(pJr,"bartpho"),pJr.forEach(t),poo=r(b6e," \u2014 "),yR=n(b6e,"A",{href:!0});var _Jr=s(yR);_oo=r(_Jr,"BartphoTokenizer"),_Jr.forEach(t),boo=r(b6e," (BARTpho model)"),b6e.forEach(t),voo=i(S),Bn=n(S,"LI",{});var l$=s(Bn);pae=n(l$,"STRONG",{});var bJr=s(pae);Foo=r(bJr,"bert"),bJr.forEach(t),Too=r(l$," \u2014 "),xR=n(l$,"A",{href:!0});var vJr=s(xR);Moo=r(vJr,"BertTokenizer"),vJr.forEach(t),Eoo=r(l$," or "),$R=n(l$,"A",{href:!0});var FJr=s($R);Coo=r(FJr,"BertTokenizerFast"),FJr.forEach(t),woo=r(l$," (BERT model)"),l$.forEach(t),Aoo=i(S),kg=n(S,"LI",{});var v6e=s(kg);_ae=n(v6e,"STRONG",{});var TJr=s(_ae);Loo=r(TJr,"bert-generation"),TJr.forEach(t),yoo=r(v6e," \u2014 "),kR=n(v6e,"A",{href:!0});var MJr=s(kR);xoo=r(MJr,"BertGenerationTokenizer"),MJr.forEach(t),$oo=r(v6e," (Bert Generation model)"),v6e.forEach(t),koo=i(S),Sg=n(S,"LI",{});var F6e=s(Sg);bae=n(F6e,"STRONG",{});var EJr=s(bae);Soo=r(EJr,"bert-japanese"),EJr.forEach(t),Roo=r(F6e," \u2014 "),SR=n(F6e,"A",{href:!0});var CJr=s(SR);Poo=r(CJr,"BertJapaneseTokenizer"),CJr.forEach(t),Boo=r(F6e," (BertJapanese model)"),F6e.forEach(t),Ioo=i(S),Rg=n(S,"LI",{});var T6e=s(Rg);vae=n(T6e,"STRONG",{});var wJr=s(vae);Noo=r(wJr,"bertweet"),wJr.forEach(t),qoo=r(T6e," \u2014 "),RR=n(T6e,"A",{href:!0});var AJr=s(RR);joo=r(AJr,"BertweetTokenizer"),AJr.forEach(t),Doo=r(T6e," (BERTweet model)"),T6e.forEach(t),Goo=i(S),In=n(S,"LI",{});var i$=s(In);Fae=n(i$,"STRONG",{});var LJr=s(Fae);Ooo=r(LJr,"big_bird"),LJr.forEach(t),Voo=r(i$," \u2014 "),PR=n(i$,"A",{href:!0});var yJr=s(PR);Xoo=r(yJr,"BigBirdTokenizer"),yJr.forEach(t),zoo=r(i$," or "),BR=n(i$,"A",{href:!0});var xJr=s(BR);Woo=r(xJr,"BigBirdTokenizerFast"),xJr.forEach(t),Qoo=r(i$," (BigBird model)"),i$.forEach(t),Hoo=i(S),Nn=n(S,"LI",{});var d$=s(Nn);Tae=n(d$,"STRONG",{});var $Jr=s(Tae);Uoo=r($Jr,"bigbird_pegasus"),$Jr.forEach(t),Joo=r(d$," \u2014 "),IR=n(d$,"A",{href:!0});var kJr=s(IR);Yoo=r(kJr,"PegasusTokenizer"),kJr.forEach(t),Koo=r(d$," or "),NR=n(d$,"A",{href:!0});var SJr=s(NR);Zoo=r(SJr,"PegasusTokenizerFast"),SJr.forEach(t),ero=r(d$," (BigBird-Pegasus model)"),d$.forEach(t),oro=i(S),qn=n(S,"LI",{});var c$=s(qn);Mae=n(c$,"STRONG",{});var RJr=s(Mae);rro=r(RJr,"blenderbot"),RJr.forEach(t),tro=r(c$," \u2014 "),qR=n(c$,"A",{href:!0});var PJr=s(qR);aro=r(PJr,"BlenderbotTokenizer"),PJr.forEach(t),nro=r(c$," or "),jR=n(c$,"A",{href:!0});var BJr=s(jR);sro=r(BJr,"BlenderbotTokenizerFast"),BJr.forEach(t),lro=r(c$," (Blenderbot model)"),c$.forEach(t),iro=i(S),Pg=n(S,"LI",{});var M6e=s(Pg);Eae=n(M6e,"STRONG",{});var IJr=s(Eae);dro=r(IJr,"blenderbot-small"),IJr.forEach(t),cro=r(M6e," \u2014 "),DR=n(M6e,"A",{href:!0});var NJr=s(DR);mro=r(NJr,"BlenderbotSmallTokenizer"),NJr.forEach(t),fro=r(M6e," (BlenderbotSmall model)"),M6e.forEach(t),gro=i(S),Bg=n(S,"LI",{});var E6e=s(Bg);Cae=n(E6e,"STRONG",{});var qJr=s(Cae);hro=r(qJr,"bloom"),qJr.forEach(t),uro=r(E6e," \u2014 "),GR=n(E6e,"A",{href:!0});var jJr=s(GR);pro=r(jJr,"BloomTokenizerFast"),jJr.forEach(t),_ro=r(E6e," (BLOOM model)"),E6e.forEach(t),bro=i(S),Ig=n(S,"LI",{});var C6e=s(Ig);wae=n(C6e,"STRONG",{});var DJr=s(wae);vro=r(DJr,"byt5"),DJr.forEach(t),Fro=r(C6e," \u2014 "),OR=n(C6e,"A",{href:!0});var GJr=s(OR);Tro=r(GJr,"ByT5Tokenizer"),GJr.forEach(t),Mro=r(C6e," (ByT5 model)"),C6e.forEach(t),Ero=i(S),jn=n(S,"LI",{});var m$=s(jn);Aae=n(m$,"STRONG",{});var OJr=s(Aae);Cro=r(OJr,"camembert"),OJr.forEach(t),wro=r(m$," \u2014 "),VR=n(m$,"A",{href:!0});var VJr=s(VR);Aro=r(VJr,"CamembertTokenizer"),VJr.forEach(t),Lro=r(m$," or "),XR=n(m$,"A",{href:!0});var XJr=s(XR);yro=r(XJr,"CamembertTokenizerFast"),XJr.forEach(t),xro=r(m$," (CamemBERT model)"),m$.forEach(t),$ro=i(S),Ng=n(S,"LI",{});var w6e=s(Ng);Lae=n(w6e,"STRONG",{});var zJr=s(Lae);kro=r(zJr,"canine"),zJr.forEach(t),Sro=r(w6e," \u2014 "),zR=n(w6e,"A",{href:!0});var WJr=s(zR);Rro=r(WJr,"CanineTokenizer"),WJr.forEach(t),Pro=r(w6e," (CANINE model)"),w6e.forEach(t),Bro=i(S),Dn=n(S,"LI",{});var f$=s(Dn);yae=n(f$,"STRONG",{});var QJr=s(yae);Iro=r(QJr,"clip"),QJr.forEach(t),Nro=r(f$," \u2014 "),WR=n(f$,"A",{href:!0});var HJr=s(WR);qro=r(HJr,"CLIPTokenizer"),HJr.forEach(t),jro=r(f$," or "),QR=n(f$,"A",{href:!0});var UJr=s(QR);Dro=r(UJr,"CLIPTokenizerFast"),UJr.forEach(t),Gro=r(f$," (CLIP model)"),f$.forEach(t),Oro=i(S),Gn=n(S,"LI",{});var g$=s(Gn);xae=n(g$,"STRONG",{});var JJr=s(xae);Vro=r(JJr,"convbert"),JJr.forEach(t),Xro=r(g$," \u2014 "),HR=n(g$,"A",{href:!0});var YJr=s(HR);zro=r(YJr,"ConvBertTokenizer"),YJr.forEach(t),Wro=r(g$," or "),UR=n(g$,"A",{href:!0});var KJr=s(UR);Qro=r(KJr,"ConvBertTokenizerFast"),KJr.forEach(t),Hro=r(g$," (ConvBERT model)"),g$.forEach(t),Uro=i(S),On=n(S,"LI",{});var h$=s(On);$ae=n(h$,"STRONG",{});var ZJr=s($ae);Jro=r(ZJr,"cpm"),ZJr.forEach(t),Yro=r(h$," \u2014 "),JR=n(h$,"A",{href:!0});var eYr=s(JR);Kro=r(eYr,"CpmTokenizer"),eYr.forEach(t),Zro=r(h$," or "),YR=n(h$,"A",{href:!0});var oYr=s(YR);eto=r(oYr,"CpmTokenizerFast"),oYr.forEach(t),oto=r(h$," (CPM model)"),h$.forEach(t),rto=i(S),qg=n(S,"LI",{});var A6e=s(qg);kae=n(A6e,"STRONG",{});var rYr=s(kae);tto=r(rYr,"ctrl"),rYr.forEach(t),ato=r(A6e," \u2014 "),KR=n(A6e,"A",{href:!0});var tYr=s(KR);nto=r(tYr,"CTRLTokenizer"),tYr.forEach(t),sto=r(A6e," (CTRL model)"),A6e.forEach(t),lto=i(S),Vn=n(S,"LI",{});var u$=s(Vn);Sae=n(u$,"STRONG",{});var aYr=s(Sae);ito=r(aYr,"data2vec-text"),aYr.forEach(t),dto=r(u$," \u2014 "),ZR=n(u$,"A",{href:!0});var nYr=s(ZR);cto=r(nYr,"RobertaTokenizer"),nYr.forEach(t),mto=r(u$," or "),eP=n(u$,"A",{href:!0});var sYr=s(eP);fto=r(sYr,"RobertaTokenizerFast"),sYr.forEach(t),gto=r(u$," (Data2VecText model)"),u$.forEach(t),hto=i(S),Xn=n(S,"LI",{});var p$=s(Xn);Rae=n(p$,"STRONG",{});var lYr=s(Rae);uto=r(lYr,"deberta"),lYr.forEach(t),pto=r(p$," \u2014 "),oP=n(p$,"A",{href:!0});var iYr=s(oP);_to=r(iYr,"DebertaTokenizer"),iYr.forEach(t),bto=r(p$," or "),rP=n(p$,"A",{href:!0});var dYr=s(rP);vto=r(dYr,"DebertaTokenizerFast"),dYr.forEach(t),Fto=r(p$," (DeBERTa model)"),p$.forEach(t),Tto=i(S),zn=n(S,"LI",{});var _$=s(zn);Pae=n(_$,"STRONG",{});var cYr=s(Pae);Mto=r(cYr,"deberta-v2"),cYr.forEach(t),Eto=r(_$," \u2014 "),tP=n(_$,"A",{href:!0});var mYr=s(tP);Cto=r(mYr,"DebertaV2Tokenizer"),mYr.forEach(t),wto=r(_$," or "),aP=n(_$,"A",{href:!0});var fYr=s(aP);Ato=r(fYr,"DebertaV2TokenizerFast"),fYr.forEach(t),Lto=r(_$," (DeBERTa-v2 model)"),_$.forEach(t),yto=i(S),Wn=n(S,"LI",{});var b$=s(Wn);Bae=n(b$,"STRONG",{});var gYr=s(Bae);xto=r(gYr,"distilbert"),gYr.forEach(t),$to=r(b$," \u2014 "),nP=n(b$,"A",{href:!0});var hYr=s(nP);kto=r(hYr,"DistilBertTokenizer"),hYr.forEach(t),Sto=r(b$," or "),sP=n(b$,"A",{href:!0});var uYr=s(sP);Rto=r(uYr,"DistilBertTokenizerFast"),uYr.forEach(t),Pto=r(b$," (DistilBERT model)"),b$.forEach(t),Bto=i(S),Qn=n(S,"LI",{});var v$=s(Qn);Iae=n(v$,"STRONG",{});var pYr=s(Iae);Ito=r(pYr,"dpr"),pYr.forEach(t),Nto=r(v$," \u2014 "),lP=n(v$,"A",{href:!0});var _Yr=s(lP);qto=r(_Yr,"DPRQuestionEncoderTokenizer"),_Yr.forEach(t),jto=r(v$," or "),iP=n(v$,"A",{href:!0});var bYr=s(iP);Dto=r(bYr,"DPRQuestionEncoderTokenizerFast"),bYr.forEach(t),Gto=r(v$," (DPR model)"),v$.forEach(t),Oto=i(S),Hn=n(S,"LI",{});var F$=s(Hn);Nae=n(F$,"STRONG",{});var vYr=s(Nae);Vto=r(vYr,"electra"),vYr.forEach(t),Xto=r(F$," \u2014 "),dP=n(F$,"A",{href:!0});var FYr=s(dP);zto=r(FYr,"ElectraTokenizer"),FYr.forEach(t),Wto=r(F$," or "),cP=n(F$,"A",{href:!0});var TYr=s(cP);Qto=r(TYr,"ElectraTokenizerFast"),TYr.forEach(t),Hto=r(F$," (ELECTRA model)"),F$.forEach(t),Uto=i(S),jg=n(S,"LI",{});var L6e=s(jg);qae=n(L6e,"STRONG",{});var MYr=s(qae);Jto=r(MYr,"flaubert"),MYr.forEach(t),Yto=r(L6e," \u2014 "),mP=n(L6e,"A",{href:!0});var EYr=s(mP);Kto=r(EYr,"FlaubertTokenizer"),EYr.forEach(t),Zto=r(L6e," (FlauBERT model)"),L6e.forEach(t),eao=i(S),Un=n(S,"LI",{});var T$=s(Un);jae=n(T$,"STRONG",{});var CYr=s(jae);oao=r(CYr,"fnet"),CYr.forEach(t),rao=r(T$," \u2014 "),fP=n(T$,"A",{href:!0});var wYr=s(fP);tao=r(wYr,"FNetTokenizer"),wYr.forEach(t),aao=r(T$," or "),gP=n(T$,"A",{href:!0});var AYr=s(gP);nao=r(AYr,"FNetTokenizerFast"),AYr.forEach(t),sao=r(T$," (FNet model)"),T$.forEach(t),lao=i(S),Dg=n(S,"LI",{});var y6e=s(Dg);Dae=n(y6e,"STRONG",{});var LYr=s(Dae);iao=r(LYr,"fsmt"),LYr.forEach(t),dao=r(y6e," \u2014 "),hP=n(y6e,"A",{href:!0});var yYr=s(hP);cao=r(yYr,"FSMTTokenizer"),yYr.forEach(t),mao=r(y6e," (FairSeq Machine-Translation model)"),y6e.forEach(t),fao=i(S),Jn=n(S,"LI",{});var M$=s(Jn);Gae=n(M$,"STRONG",{});var xYr=s(Gae);gao=r(xYr,"funnel"),xYr.forEach(t),hao=r(M$," \u2014 "),uP=n(M$,"A",{href:!0});var $Yr=s(uP);uao=r($Yr,"FunnelTokenizer"),$Yr.forEach(t),pao=r(M$," or "),pP=n(M$,"A",{href:!0});var kYr=s(pP);_ao=r(kYr,"FunnelTokenizerFast"),kYr.forEach(t),bao=r(M$," (Funnel Transformer model)"),M$.forEach(t),vao=i(S),Yn=n(S,"LI",{});var E$=s(Yn);Oae=n(E$,"STRONG",{});var SYr=s(Oae);Fao=r(SYr,"gpt2"),SYr.forEach(t),Tao=r(E$," \u2014 "),_P=n(E$,"A",{href:!0});var RYr=s(_P);Mao=r(RYr,"GPT2Tokenizer"),RYr.forEach(t),Eao=r(E$," or "),bP=n(E$,"A",{href:!0});var PYr=s(bP);Cao=r(PYr,"GPT2TokenizerFast"),PYr.forEach(t),wao=r(E$," (OpenAI GPT-2 model)"),E$.forEach(t),Aao=i(S),Kn=n(S,"LI",{});var C$=s(Kn);Vae=n(C$,"STRONG",{});var BYr=s(Vae);Lao=r(BYr,"gpt_neo"),BYr.forEach(t),yao=r(C$," \u2014 "),vP=n(C$,"A",{href:!0});var IYr=s(vP);xao=r(IYr,"GPT2Tokenizer"),IYr.forEach(t),$ao=r(C$," or "),FP=n(C$,"A",{href:!0});var NYr=s(FP);kao=r(NYr,"GPT2TokenizerFast"),NYr.forEach(t),Sao=r(C$," (GPT Neo model)"),C$.forEach(t),Rao=i(S),Gg=n(S,"LI",{});var x6e=s(Gg);Xae=n(x6e,"STRONG",{});var qYr=s(Xae);Pao=r(qYr,"gpt_neox"),qYr.forEach(t),Bao=r(x6e," \u2014 "),TP=n(x6e,"A",{href:!0});var jYr=s(TP);Iao=r(jYr,"GPTNeoXTokenizerFast"),jYr.forEach(t),Nao=r(x6e," (GPT NeoX model)"),x6e.forEach(t),qao=i(S),Zn=n(S,"LI",{});var w$=s(Zn);zae=n(w$,"STRONG",{});var DYr=s(zae);jao=r(DYr,"gptj"),DYr.forEach(t),Dao=r(w$," \u2014 "),MP=n(w$,"A",{href:!0});var GYr=s(MP);Gao=r(GYr,"GPT2Tokenizer"),GYr.forEach(t),Oao=r(w$," or "),EP=n(w$,"A",{href:!0});var OYr=s(EP);Vao=r(OYr,"GPT2TokenizerFast"),OYr.forEach(t),Xao=r(w$," (GPT-J model)"),w$.forEach(t),zao=i(S),es=n(S,"LI",{});var A$=s(es);Wae=n(A$,"STRONG",{});var VYr=s(Wae);Wao=r(VYr,"herbert"),VYr.forEach(t),Qao=r(A$," \u2014 "),CP=n(A$,"A",{href:!0});var XYr=s(CP);Hao=r(XYr,"HerbertTokenizer"),XYr.forEach(t),Uao=r(A$," or "),wP=n(A$,"A",{href:!0});var zYr=s(wP);Jao=r(zYr,"HerbertTokenizerFast"),zYr.forEach(t),Yao=r(A$," (HerBERT model)"),A$.forEach(t),Kao=i(S),Og=n(S,"LI",{});var $6e=s(Og);Qae=n($6e,"STRONG",{});var WYr=s(Qae);Zao=r(WYr,"hubert"),WYr.forEach(t),eno=r($6e," \u2014 "),AP=n($6e,"A",{href:!0});var QYr=s(AP);ono=r(QYr,"Wav2Vec2CTCTokenizer"),QYr.forEach(t),rno=r($6e," (Hubert model)"),$6e.forEach(t),tno=i(S),os=n(S,"LI",{});var L$=s(os);Hae=n(L$,"STRONG",{});var HYr=s(Hae);ano=r(HYr,"ibert"),HYr.forEach(t),nno=r(L$," \u2014 "),LP=n(L$,"A",{href:!0});var UYr=s(LP);sno=r(UYr,"RobertaTokenizer"),UYr.forEach(t),lno=r(L$," or "),yP=n(L$,"A",{href:!0});var JYr=s(yP);ino=r(JYr,"RobertaTokenizerFast"),JYr.forEach(t),dno=r(L$," (I-BERT model)"),L$.forEach(t),cno=i(S),rs=n(S,"LI",{});var y$=s(rs);Uae=n(y$,"STRONG",{});var YYr=s(Uae);mno=r(YYr,"layoutlm"),YYr.forEach(t),fno=r(y$," \u2014 "),xP=n(y$,"A",{href:!0});var KYr=s(xP);gno=r(KYr,"LayoutLMTokenizer"),KYr.forEach(t),hno=r(y$," or "),$P=n(y$,"A",{href:!0});var ZYr=s($P);uno=r(ZYr,"LayoutLMTokenizerFast"),ZYr.forEach(t),pno=r(y$," (LayoutLM model)"),y$.forEach(t),_no=i(S),ts=n(S,"LI",{});var x$=s(ts);Jae=n(x$,"STRONG",{});var eKr=s(Jae);bno=r(eKr,"layoutlmv2"),eKr.forEach(t),vno=r(x$," \u2014 "),kP=n(x$,"A",{href:!0});var oKr=s(kP);Fno=r(oKr,"LayoutLMv2Tokenizer"),oKr.forEach(t),Tno=r(x$," or "),SP=n(x$,"A",{href:!0});var rKr=s(SP);Mno=r(rKr,"LayoutLMv2TokenizerFast"),rKr.forEach(t),Eno=r(x$," (LayoutLMv2 model)"),x$.forEach(t),Cno=i(S),as=n(S,"LI",{});var $$=s(as);Yae=n($$,"STRONG",{});var tKr=s(Yae);wno=r(tKr,"layoutlmv3"),tKr.forEach(t),Ano=r($$," \u2014 "),RP=n($$,"A",{href:!0});var aKr=s(RP);Lno=r(aKr,"LayoutLMv3Tokenizer"),aKr.forEach(t),yno=r($$," or "),PP=n($$,"A",{href:!0});var nKr=s(PP);xno=r(nKr,"LayoutLMv3TokenizerFast"),nKr.forEach(t),$no=r($$," (LayoutLMv3 model)"),$$.forEach(t),kno=i(S),ns=n(S,"LI",{});var k$=s(ns);Kae=n(k$,"STRONG",{});var sKr=s(Kae);Sno=r(sKr,"layoutxlm"),sKr.forEach(t),Rno=r(k$," \u2014 "),BP=n(k$,"A",{href:!0});var lKr=s(BP);Pno=r(lKr,"LayoutXLMTokenizer"),lKr.forEach(t),Bno=r(k$," or "),IP=n(k$,"A",{href:!0});var iKr=s(IP);Ino=r(iKr,"LayoutXLMTokenizerFast"),iKr.forEach(t),Nno=r(k$," (LayoutXLM model)"),k$.forEach(t),qno=i(S),ss=n(S,"LI",{});var S$=s(ss);Zae=n(S$,"STRONG",{});var dKr=s(Zae);jno=r(dKr,"led"),dKr.forEach(t),Dno=r(S$," \u2014 "),NP=n(S$,"A",{href:!0});var cKr=s(NP);Gno=r(cKr,"LEDTokenizer"),cKr.forEach(t),Ono=r(S$," or "),qP=n(S$,"A",{href:!0});var mKr=s(qP);Vno=r(mKr,"LEDTokenizerFast"),mKr.forEach(t),Xno=r(S$," (LED model)"),S$.forEach(t),zno=i(S),ls=n(S,"LI",{});var R$=s(ls);ene=n(R$,"STRONG",{});var fKr=s(ene);Wno=r(fKr,"longformer"),fKr.forEach(t),Qno=r(R$," \u2014 "),jP=n(R$,"A",{href:!0});var gKr=s(jP);Hno=r(gKr,"LongformerTokenizer"),gKr.forEach(t),Uno=r(R$," or "),DP=n(R$,"A",{href:!0});var hKr=s(DP);Jno=r(hKr,"LongformerTokenizerFast"),hKr.forEach(t),Yno=r(R$," (Longformer model)"),R$.forEach(t),Kno=i(S),Vg=n(S,"LI",{});var k6e=s(Vg);one=n(k6e,"STRONG",{});var uKr=s(one);Zno=r(uKr,"luke"),uKr.forEach(t),eso=r(k6e," \u2014 "),GP=n(k6e,"A",{href:!0});var pKr=s(GP);oso=r(pKr,"LukeTokenizer"),pKr.forEach(t),rso=r(k6e," (LUKE model)"),k6e.forEach(t),tso=i(S),is=n(S,"LI",{});var P$=s(is);rne=n(P$,"STRONG",{});var _Kr=s(rne);aso=r(_Kr,"lxmert"),_Kr.forEach(t),nso=r(P$," \u2014 "),OP=n(P$,"A",{href:!0});var bKr=s(OP);sso=r(bKr,"LxmertTokenizer"),bKr.forEach(t),lso=r(P$," or "),VP=n(P$,"A",{href:!0});var vKr=s(VP);iso=r(vKr,"LxmertTokenizerFast"),vKr.forEach(t),dso=r(P$," (LXMERT model)"),P$.forEach(t),cso=i(S),Xg=n(S,"LI",{});var S6e=s(Xg);tne=n(S6e,"STRONG",{});var FKr=s(tne);mso=r(FKr,"m2m_100"),FKr.forEach(t),fso=r(S6e," \u2014 "),XP=n(S6e,"A",{href:!0});var TKr=s(XP);gso=r(TKr,"M2M100Tokenizer"),TKr.forEach(t),hso=r(S6e," (M2M100 model)"),S6e.forEach(t),uso=i(S),zg=n(S,"LI",{});var R6e=s(zg);ane=n(R6e,"STRONG",{});var MKr=s(ane);pso=r(MKr,"marian"),MKr.forEach(t),_so=r(R6e," \u2014 "),zP=n(R6e,"A",{href:!0});var EKr=s(zP);bso=r(EKr,"MarianTokenizer"),EKr.forEach(t),vso=r(R6e," (Marian model)"),R6e.forEach(t),Fso=i(S),ds=n(S,"LI",{});var B$=s(ds);nne=n(B$,"STRONG",{});var CKr=s(nne);Tso=r(CKr,"mbart"),CKr.forEach(t),Mso=r(B$," \u2014 "),WP=n(B$,"A",{href:!0});var wKr=s(WP);Eso=r(wKr,"MBartTokenizer"),wKr.forEach(t),Cso=r(B$," or "),QP=n(B$,"A",{href:!0});var AKr=s(QP);wso=r(AKr,"MBartTokenizerFast"),AKr.forEach(t),Aso=r(B$," (mBART model)"),B$.forEach(t),Lso=i(S),cs=n(S,"LI",{});var I$=s(cs);sne=n(I$,"STRONG",{});var LKr=s(sne);yso=r(LKr,"mbart50"),LKr.forEach(t),xso=r(I$," \u2014 "),HP=n(I$,"A",{href:!0});var yKr=s(HP);$so=r(yKr,"MBart50Tokenizer"),yKr.forEach(t),kso=r(I$," or "),UP=n(I$,"A",{href:!0});var xKr=s(UP);Sso=r(xKr,"MBart50TokenizerFast"),xKr.forEach(t),Rso=r(I$," (mBART-50 model)"),I$.forEach(t),Pso=i(S),ms=n(S,"LI",{});var N$=s(ms);lne=n(N$,"STRONG",{});var $Kr=s(lne);Bso=r($Kr,"megatron-bert"),$Kr.forEach(t),Iso=r(N$," \u2014 "),JP=n(N$,"A",{href:!0});var kKr=s(JP);Nso=r(kKr,"BertTokenizer"),kKr.forEach(t),qso=r(N$," or "),YP=n(N$,"A",{href:!0});var SKr=s(YP);jso=r(SKr,"BertTokenizerFast"),SKr.forEach(t),Dso=r(N$," (Megatron-BERT model)"),N$.forEach(t),Gso=i(S),Wg=n(S,"LI",{});var P6e=s(Wg);ine=n(P6e,"STRONG",{});var RKr=s(ine);Oso=r(RKr,"mluke"),RKr.forEach(t),Vso=r(P6e," \u2014 "),KP=n(P6e,"A",{href:!0});var PKr=s(KP);Xso=r(PKr,"MLukeTokenizer"),PKr.forEach(t),zso=r(P6e," (mLUKE model)"),P6e.forEach(t),Wso=i(S),fs=n(S,"LI",{});var q$=s(fs);dne=n(q$,"STRONG",{});var BKr=s(dne);Qso=r(BKr,"mobilebert"),BKr.forEach(t),Hso=r(q$," \u2014 "),ZP=n(q$,"A",{href:!0});var IKr=s(ZP);Uso=r(IKr,"MobileBertTokenizer"),IKr.forEach(t),Jso=r(q$," or "),eB=n(q$,"A",{href:!0});var NKr=s(eB);Yso=r(NKr,"MobileBertTokenizerFast"),NKr.forEach(t),Kso=r(q$," (MobileBERT model)"),q$.forEach(t),Zso=i(S),gs=n(S,"LI",{});var j$=s(gs);cne=n(j$,"STRONG",{});var qKr=s(cne);elo=r(qKr,"mpnet"),qKr.forEach(t),olo=r(j$," \u2014 "),oB=n(j$,"A",{href:!0});var jKr=s(oB);rlo=r(jKr,"MPNetTokenizer"),jKr.forEach(t),tlo=r(j$," or "),rB=n(j$,"A",{href:!0});var DKr=s(rB);alo=r(DKr,"MPNetTokenizerFast"),DKr.forEach(t),nlo=r(j$," (MPNet model)"),j$.forEach(t),slo=i(S),hs=n(S,"LI",{});var D$=s(hs);mne=n(D$,"STRONG",{});var GKr=s(mne);llo=r(GKr,"mt5"),GKr.forEach(t),ilo=r(D$," \u2014 "),tB=n(D$,"A",{href:!0});var OKr=s(tB);dlo=r(OKr,"MT5Tokenizer"),OKr.forEach(t),clo=r(D$," or "),aB=n(D$,"A",{href:!0});var VKr=s(aB);mlo=r(VKr,"MT5TokenizerFast"),VKr.forEach(t),flo=r(D$," (MT5 model)"),D$.forEach(t),glo=i(S),us=n(S,"LI",{});var G$=s(us);fne=n(G$,"STRONG",{});var XKr=s(fne);hlo=r(XKr,"nystromformer"),XKr.forEach(t),ulo=r(G$," \u2014 "),nB=n(G$,"A",{href:!0});var zKr=s(nB);plo=r(zKr,"AlbertTokenizer"),zKr.forEach(t),_lo=r(G$," or "),sB=n(G$,"A",{href:!0});var WKr=s(sB);blo=r(WKr,"AlbertTokenizerFast"),WKr.forEach(t),vlo=r(G$," (Nystr\xF6mformer model)"),G$.forEach(t),Flo=i(S),ps=n(S,"LI",{});var O$=s(ps);gne=n(O$,"STRONG",{});var QKr=s(gne);Tlo=r(QKr,"openai-gpt"),QKr.forEach(t),Mlo=r(O$," \u2014 "),lB=n(O$,"A",{href:!0});var HKr=s(lB);Elo=r(HKr,"OpenAIGPTTokenizer"),HKr.forEach(t),Clo=r(O$," or "),iB=n(O$,"A",{href:!0});var UKr=s(iB);wlo=r(UKr,"OpenAIGPTTokenizerFast"),UKr.forEach(t),Alo=r(O$," (OpenAI GPT model)"),O$.forEach(t),Llo=i(S),Qg=n(S,"LI",{});var B6e=s(Qg);hne=n(B6e,"STRONG",{});var JKr=s(hne);ylo=r(JKr,"opt"),JKr.forEach(t),xlo=r(B6e," \u2014 "),dB=n(B6e,"A",{href:!0});var YKr=s(dB);$lo=r(YKr,"GPT2Tokenizer"),YKr.forEach(t),klo=r(B6e," (OPT model)"),B6e.forEach(t),Slo=i(S),_s=n(S,"LI",{});var V$=s(_s);une=n(V$,"STRONG",{});var KKr=s(une);Rlo=r(KKr,"pegasus"),KKr.forEach(t),Plo=r(V$," \u2014 "),cB=n(V$,"A",{href:!0});var ZKr=s(cB);Blo=r(ZKr,"PegasusTokenizer"),ZKr.forEach(t),Ilo=r(V$," or "),mB=n(V$,"A",{href:!0});var eZr=s(mB);Nlo=r(eZr,"PegasusTokenizerFast"),eZr.forEach(t),qlo=r(V$," (Pegasus model)"),V$.forEach(t),jlo=i(S),Hg=n(S,"LI",{});var I6e=s(Hg);pne=n(I6e,"STRONG",{});var oZr=s(pne);Dlo=r(oZr,"perceiver"),oZr.forEach(t),Glo=r(I6e," \u2014 "),fB=n(I6e,"A",{href:!0});var rZr=s(fB);Olo=r(rZr,"PerceiverTokenizer"),rZr.forEach(t),Vlo=r(I6e," (Perceiver model)"),I6e.forEach(t),Xlo=i(S),Ug=n(S,"LI",{});var N6e=s(Ug);_ne=n(N6e,"STRONG",{});var tZr=s(_ne);zlo=r(tZr,"phobert"),tZr.forEach(t),Wlo=r(N6e," \u2014 "),gB=n(N6e,"A",{href:!0});var aZr=s(gB);Qlo=r(aZr,"PhobertTokenizer"),aZr.forEach(t),Hlo=r(N6e," (PhoBERT model)"),N6e.forEach(t),Ulo=i(S),Jg=n(S,"LI",{});var q6e=s(Jg);bne=n(q6e,"STRONG",{});var nZr=s(bne);Jlo=r(nZr,"plbart"),nZr.forEach(t),Ylo=r(q6e," \u2014 "),hB=n(q6e,"A",{href:!0});var sZr=s(hB);Klo=r(sZr,"PLBartTokenizer"),sZr.forEach(t),Zlo=r(q6e," (PLBart model)"),q6e.forEach(t),eio=i(S),Yg=n(S,"LI",{});var j6e=s(Yg);vne=n(j6e,"STRONG",{});var lZr=s(vne);oio=r(lZr,"prophetnet"),lZr.forEach(t),rio=r(j6e," \u2014 "),uB=n(j6e,"A",{href:!0});var iZr=s(uB);tio=r(iZr,"ProphetNetTokenizer"),iZr.forEach(t),aio=r(j6e," (ProphetNet model)"),j6e.forEach(t),nio=i(S),bs=n(S,"LI",{});var X$=s(bs);Fne=n(X$,"STRONG",{});var dZr=s(Fne);sio=r(dZr,"qdqbert"),dZr.forEach(t),lio=r(X$," \u2014 "),pB=n(X$,"A",{href:!0});var cZr=s(pB);iio=r(cZr,"BertTokenizer"),cZr.forEach(t),dio=r(X$," or "),_B=n(X$,"A",{href:!0});var mZr=s(_B);cio=r(mZr,"BertTokenizerFast"),mZr.forEach(t),mio=r(X$," (QDQBert model)"),X$.forEach(t),fio=i(S),Kg=n(S,"LI",{});var D6e=s(Kg);Tne=n(D6e,"STRONG",{});var fZr=s(Tne);gio=r(fZr,"rag"),fZr.forEach(t),hio=r(D6e," \u2014 "),bB=n(D6e,"A",{href:!0});var gZr=s(bB);uio=r(gZr,"RagTokenizer"),gZr.forEach(t),pio=r(D6e," (RAG model)"),D6e.forEach(t),_io=i(S),vs=n(S,"LI",{});var z$=s(vs);Mne=n(z$,"STRONG",{});var hZr=s(Mne);bio=r(hZr,"realm"),hZr.forEach(t),vio=r(z$," \u2014 "),vB=n(z$,"A",{href:!0});var uZr=s(vB);Fio=r(uZr,"RealmTokenizer"),uZr.forEach(t),Tio=r(z$," or "),FB=n(z$,"A",{href:!0});var pZr=s(FB);Mio=r(pZr,"RealmTokenizerFast"),pZr.forEach(t),Eio=r(z$," (REALM model)"),z$.forEach(t),Cio=i(S),Fs=n(S,"LI",{});var W$=s(Fs);Ene=n(W$,"STRONG",{});var _Zr=s(Ene);wio=r(_Zr,"reformer"),_Zr.forEach(t),Aio=r(W$," \u2014 "),TB=n(W$,"A",{href:!0});var bZr=s(TB);Lio=r(bZr,"ReformerTokenizer"),bZr.forEach(t),yio=r(W$," or "),MB=n(W$,"A",{href:!0});var vZr=s(MB);xio=r(vZr,"ReformerTokenizerFast"),vZr.forEach(t),$io=r(W$," (Reformer model)"),W$.forEach(t),kio=i(S),Ts=n(S,"LI",{});var Q$=s(Ts);Cne=n(Q$,"STRONG",{});var FZr=s(Cne);Sio=r(FZr,"rembert"),FZr.forEach(t),Rio=r(Q$," \u2014 "),EB=n(Q$,"A",{href:!0});var TZr=s(EB);Pio=r(TZr,"RemBertTokenizer"),TZr.forEach(t),Bio=r(Q$," or "),CB=n(Q$,"A",{href:!0});var MZr=s(CB);Iio=r(MZr,"RemBertTokenizerFast"),MZr.forEach(t),Nio=r(Q$," (RemBERT model)"),Q$.forEach(t),qio=i(S),Ms=n(S,"LI",{});var H$=s(Ms);wne=n(H$,"STRONG",{});var EZr=s(wne);jio=r(EZr,"retribert"),EZr.forEach(t),Dio=r(H$," \u2014 "),wB=n(H$,"A",{href:!0});var CZr=s(wB);Gio=r(CZr,"RetriBertTokenizer"),CZr.forEach(t),Oio=r(H$," or "),AB=n(H$,"A",{href:!0});var wZr=s(AB);Vio=r(wZr,"RetriBertTokenizerFast"),wZr.forEach(t),Xio=r(H$," (RetriBERT model)"),H$.forEach(t),zio=i(S),Es=n(S,"LI",{});var U$=s(Es);Ane=n(U$,"STRONG",{});var AZr=s(Ane);Wio=r(AZr,"roberta"),AZr.forEach(t),Qio=r(U$," \u2014 "),LB=n(U$,"A",{href:!0});var LZr=s(LB);Hio=r(LZr,"RobertaTokenizer"),LZr.forEach(t),Uio=r(U$," or "),yB=n(U$,"A",{href:!0});var yZr=s(yB);Jio=r(yZr,"RobertaTokenizerFast"),yZr.forEach(t),Yio=r(U$," (RoBERTa model)"),U$.forEach(t),Kio=i(S),Cs=n(S,"LI",{});var J$=s(Cs);Lne=n(J$,"STRONG",{});var xZr=s(Lne);Zio=r(xZr,"roformer"),xZr.forEach(t),edo=r(J$," \u2014 "),xB=n(J$,"A",{href:!0});var $Zr=s(xB);odo=r($Zr,"RoFormerTokenizer"),$Zr.forEach(t),rdo=r(J$," or "),$B=n(J$,"A",{href:!0});var kZr=s($B);tdo=r(kZr,"RoFormerTokenizerFast"),kZr.forEach(t),ado=r(J$," (RoFormer model)"),J$.forEach(t),ndo=i(S),Zg=n(S,"LI",{});var G6e=s(Zg);yne=n(G6e,"STRONG",{});var SZr=s(yne);sdo=r(SZr,"speech_to_text"),SZr.forEach(t),ldo=r(G6e," \u2014 "),kB=n(G6e,"A",{href:!0});var RZr=s(kB);ido=r(RZr,"Speech2TextTokenizer"),RZr.forEach(t),ddo=r(G6e," (Speech2Text model)"),G6e.forEach(t),cdo=i(S),eh=n(S,"LI",{});var O6e=s(eh);xne=n(O6e,"STRONG",{});var PZr=s(xne);mdo=r(PZr,"speech_to_text_2"),PZr.forEach(t),fdo=r(O6e," \u2014 "),SB=n(O6e,"A",{href:!0});var BZr=s(SB);gdo=r(BZr,"Speech2Text2Tokenizer"),BZr.forEach(t),hdo=r(O6e," (Speech2Text2 model)"),O6e.forEach(t),udo=i(S),ws=n(S,"LI",{});var Y$=s(ws);$ne=n(Y$,"STRONG",{});var IZr=s($ne);pdo=r(IZr,"splinter"),IZr.forEach(t),_do=r(Y$," \u2014 "),RB=n(Y$,"A",{href:!0});var NZr=s(RB);bdo=r(NZr,"SplinterTokenizer"),NZr.forEach(t),vdo=r(Y$," or "),PB=n(Y$,"A",{href:!0});var qZr=s(PB);Fdo=r(qZr,"SplinterTokenizerFast"),qZr.forEach(t),Tdo=r(Y$," (Splinter model)"),Y$.forEach(t),Mdo=i(S),As=n(S,"LI",{});var K$=s(As);kne=n(K$,"STRONG",{});var jZr=s(kne);Edo=r(jZr,"squeezebert"),jZr.forEach(t),Cdo=r(K$," \u2014 "),BB=n(K$,"A",{href:!0});var DZr=s(BB);wdo=r(DZr,"SqueezeBertTokenizer"),DZr.forEach(t),Ado=r(K$," or "),IB=n(K$,"A",{href:!0});var GZr=s(IB);Ldo=r(GZr,"SqueezeBertTokenizerFast"),GZr.forEach(t),ydo=r(K$," (SqueezeBERT model)"),K$.forEach(t),xdo=i(S),Ls=n(S,"LI",{});var Z$=s(Ls);Sne=n(Z$,"STRONG",{});var OZr=s(Sne);$do=r(OZr,"t5"),OZr.forEach(t),kdo=r(Z$," \u2014 "),NB=n(Z$,"A",{href:!0});var VZr=s(NB);Sdo=r(VZr,"T5Tokenizer"),VZr.forEach(t),Rdo=r(Z$," or "),qB=n(Z$,"A",{href:!0});var XZr=s(qB);Pdo=r(XZr,"T5TokenizerFast"),XZr.forEach(t),Bdo=r(Z$," (T5 model)"),Z$.forEach(t),Ido=i(S),oh=n(S,"LI",{});var V6e=s(oh);Rne=n(V6e,"STRONG",{});var zZr=s(Rne);Ndo=r(zZr,"tapas"),zZr.forEach(t),qdo=r(V6e," \u2014 "),jB=n(V6e,"A",{href:!0});var WZr=s(jB);jdo=r(WZr,"TapasTokenizer"),WZr.forEach(t),Ddo=r(V6e," (TAPAS model)"),V6e.forEach(t),Gdo=i(S),rh=n(S,"LI",{});var X6e=s(rh);Pne=n(X6e,"STRONG",{});var QZr=s(Pne);Odo=r(QZr,"tapex"),QZr.forEach(t),Vdo=r(X6e," \u2014 "),DB=n(X6e,"A",{href:!0});var HZr=s(DB);Xdo=r(HZr,"TapexTokenizer"),HZr.forEach(t),zdo=r(X6e," (TAPEX model)"),X6e.forEach(t),Wdo=i(S),th=n(S,"LI",{});var z6e=s(th);Bne=n(z6e,"STRONG",{});var UZr=s(Bne);Qdo=r(UZr,"transfo-xl"),UZr.forEach(t),Hdo=r(z6e," \u2014 "),GB=n(z6e,"A",{href:!0});var JZr=s(GB);Udo=r(JZr,"TransfoXLTokenizer"),JZr.forEach(t),Jdo=r(z6e," (Transformer-XL model)"),z6e.forEach(t),Ydo=i(S),ys=n(S,"LI",{});var ek=s(ys);Ine=n(ek,"STRONG",{});var YZr=s(Ine);Kdo=r(YZr,"visual_bert"),YZr.forEach(t),Zdo=r(ek," \u2014 "),OB=n(ek,"A",{href:!0});var KZr=s(OB);eco=r(KZr,"BertTokenizer"),KZr.forEach(t),oco=r(ek," or "),VB=n(ek,"A",{href:!0});var ZZr=s(VB);rco=r(ZZr,"BertTokenizerFast"),ZZr.forEach(t),tco=r(ek," (VisualBERT model)"),ek.forEach(t),aco=i(S),ah=n(S,"LI",{});var W6e=s(ah);Nne=n(W6e,"STRONG",{});var eet=s(Nne);nco=r(eet,"wav2vec2"),eet.forEach(t),sco=r(W6e," \u2014 "),XB=n(W6e,"A",{href:!0});var oet=s(XB);lco=r(oet,"Wav2Vec2CTCTokenizer"),oet.forEach(t),ico=r(W6e," (Wav2Vec2 model)"),W6e.forEach(t),dco=i(S),nh=n(S,"LI",{});var Q6e=s(nh);qne=n(Q6e,"STRONG",{});var ret=s(qne);cco=r(ret,"wav2vec2-conformer"),ret.forEach(t),mco=r(Q6e," \u2014 "),zB=n(Q6e,"A",{href:!0});var tet=s(zB);fco=r(tet,"Wav2Vec2CTCTokenizer"),tet.forEach(t),gco=r(Q6e," (Wav2Vec2-Conformer model)"),Q6e.forEach(t),hco=i(S),sh=n(S,"LI",{});var H6e=s(sh);jne=n(H6e,"STRONG",{});var aet=s(jne);uco=r(aet,"wav2vec2_phoneme"),aet.forEach(t),pco=r(H6e," \u2014 "),WB=n(H6e,"A",{href:!0});var net=s(WB);_co=r(net,"Wav2Vec2PhonemeCTCTokenizer"),net.forEach(t),bco=r(H6e," (Wav2Vec2Phoneme model)"),H6e.forEach(t),vco=i(S),xs=n(S,"LI",{});var ok=s(xs);Dne=n(ok,"STRONG",{});var set=s(Dne);Fco=r(set,"xglm"),set.forEach(t),Tco=r(ok," \u2014 "),QB=n(ok,"A",{href:!0});var iet=s(QB);Mco=r(iet,"XGLMTokenizer"),iet.forEach(t),Eco=r(ok," or "),HB=n(ok,"A",{href:!0});var det=s(HB);Cco=r(det,"XGLMTokenizerFast"),det.forEach(t),wco=r(ok," (XGLM model)"),ok.forEach(t),Aco=i(S),lh=n(S,"LI",{});var U6e=s(lh);Gne=n(U6e,"STRONG",{});var cet=s(Gne);Lco=r(cet,"xlm"),cet.forEach(t),yco=r(U6e," \u2014 "),UB=n(U6e,"A",{href:!0});var met=s(UB);xco=r(met,"XLMTokenizer"),met.forEach(t),$co=r(U6e," (XLM model)"),U6e.forEach(t),kco=i(S),ih=n(S,"LI",{});var J6e=s(ih);One=n(J6e,"STRONG",{});var fet=s(One);Sco=r(fet,"xlm-prophetnet"),fet.forEach(t),Rco=r(J6e," \u2014 "),JB=n(J6e,"A",{href:!0});var get=s(JB);Pco=r(get,"XLMProphetNetTokenizer"),get.forEach(t),Bco=r(J6e," (XLM-ProphetNet model)"),J6e.forEach(t),Ico=i(S),$s=n(S,"LI",{});var rk=s($s);Vne=n(rk,"STRONG",{});var het=s(Vne);Nco=r(het,"xlm-roberta"),het.forEach(t),qco=r(rk," \u2014 "),YB=n(rk,"A",{href:!0});var uet=s(YB);jco=r(uet,"XLMRobertaTokenizer"),uet.forEach(t),Dco=r(rk," or "),KB=n(rk,"A",{href:!0});var pet=s(KB);Gco=r(pet,"XLMRobertaTokenizerFast"),pet.forEach(t),Oco=r(rk," (XLM-RoBERTa model)"),rk.forEach(t),Vco=i(S),ks=n(S,"LI",{});var tk=s(ks);Xne=n(tk,"STRONG",{});var _et=s(Xne);Xco=r(_et,"xlm-roberta-xl"),_et.forEach(t),zco=r(tk," \u2014 "),ZB=n(tk,"A",{href:!0});var bet=s(ZB);Wco=r(bet,"RobertaTokenizer"),bet.forEach(t),Qco=r(tk," or "),eI=n(tk,"A",{href:!0});var vet=s(eI);Hco=r(vet,"RobertaTokenizerFast"),vet.forEach(t),Uco=r(tk," (XLM-RoBERTa-XL model)"),tk.forEach(t),Jco=i(S),Ss=n(S,"LI",{});var ak=s(Ss);zne=n(ak,"STRONG",{});var Fet=s(zne);Yco=r(Fet,"xlnet"),Fet.forEach(t),Kco=r(ak," \u2014 "),oI=n(ak,"A",{href:!0});var Tet=s(oI);Zco=r(Tet,"XLNetTokenizer"),Tet.forEach(t),emo=r(ak," or "),rI=n(ak,"A",{href:!0});var Met=s(rI);omo=r(Met,"XLNetTokenizerFast"),Met.forEach(t),rmo=r(ak," (XLNet model)"),ak.forEach(t),tmo=i(S),Rs=n(S,"LI",{});var nk=s(Rs);Wne=n(nk,"STRONG",{});var Eet=s(Wne);amo=r(Eet,"yoso"),Eet.forEach(t),nmo=r(nk," \u2014 "),tI=n(nk,"A",{href:!0});var Cet=s(tI);smo=r(Cet,"AlbertTokenizer"),Cet.forEach(t),lmo=r(nk," or "),aI=n(nk,"A",{href:!0});var wet=s(aI);imo=r(wet,"AlbertTokenizerFast"),wet.forEach(t),dmo=r(nk," (YOSO model)"),nk.forEach(t),S.forEach(t),cmo=i(js),T(dh.$$.fragment,js),js.forEach(t),mmo=i(qs),ch=n(qs,"DIV",{class:!0});var wGe=s(ch);T(ay.$$.fragment,wGe),fmo=i(wGe),Qne=n(wGe,"P",{});var Aet=s(Qne);gmo=r(Aet,"Register a new tokenizer in this mapping."),Aet.forEach(t),wGe.forEach(t),qs.forEach(t),Aje=i(m),Ei=n(m,"H2",{class:!0});var AGe=s(Ei);mh=n(AGe,"A",{id:!0,class:!0,href:!0});var Let=s(mh);Hne=n(Let,"SPAN",{});var yet=s(Hne);T(ny.$$.fragment,yet),yet.forEach(t),Let.forEach(t),hmo=i(AGe),Une=n(AGe,"SPAN",{});var xet=s(Une);umo=r(xet,"AutoFeatureExtractor"),xet.forEach(t),AGe.forEach(t),Lje=i(m),Ao=n(m,"DIV",{class:!0});var Ds=s(Ao);T(sy.$$.fragment,Ds),pmo=i(Ds),ly=n(Ds,"P",{});var LGe=s(ly);_mo=r(LGe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),nI=n(LGe,"A",{href:!0});var $et=s(nI);bmo=r($et,"AutoFeatureExtractor.from_pretrained()"),$et.forEach(t),vmo=r(LGe," class method."),LGe.forEach(t),Fmo=i(Ds),iy=n(Ds,"P",{});var yGe=s(iy);Tmo=r(yGe,"This class cannot be instantiated directly using "),Jne=n(yGe,"CODE",{});var ket=s(Jne);Mmo=r(ket,"__init__()"),ket.forEach(t),Emo=r(yGe," (throws an error)."),yGe.forEach(t),Cmo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(dy.$$.fragment,Zt),wmo=i(Zt),Yne=n(Zt,"P",{});var Set=s(Yne);Amo=r(Set,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Set.forEach(t),Lmo=i(Zt),La=n(Zt,"P",{});var HA=s(La);ymo=r(HA,"The feature extractor class to instantiate is selected based on the "),Kne=n(HA,"CODE",{});var Ret=s(Kne);xmo=r(Ret,"model_type"),Ret.forEach(t),$mo=r(HA,` property of the config object
(either passed as an argument or loaded from `),Zne=n(HA,"CODE",{});var Pet=s(Zne);kmo=r(Pet,"pretrained_model_name_or_path"),Pet.forEach(t),Smo=r(HA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ese=n(HA,"CODE",{});var Bet=s(ese);Rmo=r(Bet,"pretrained_model_name_or_path"),Bet.forEach(t),Pmo=r(HA,":"),HA.forEach(t),Bmo=i(Zt),Y=n(Zt,"UL",{});var K=s(Y);fh=n(K,"LI",{});var Y6e=s(fh);ose=n(Y6e,"STRONG",{});var Iet=s(ose);Imo=r(Iet,"beit"),Iet.forEach(t),Nmo=r(Y6e," \u2014 "),sI=n(Y6e,"A",{href:!0});var Net=s(sI);qmo=r(Net,"BeitFeatureExtractor"),Net.forEach(t),jmo=r(Y6e," (BEiT model)"),Y6e.forEach(t),Dmo=i(K),gh=n(K,"LI",{});var K6e=s(gh);rse=n(K6e,"STRONG",{});var qet=s(rse);Gmo=r(qet,"clip"),qet.forEach(t),Omo=r(K6e," \u2014 "),lI=n(K6e,"A",{href:!0});var jet=s(lI);Vmo=r(jet,"CLIPFeatureExtractor"),jet.forEach(t),Xmo=r(K6e," (CLIP model)"),K6e.forEach(t),zmo=i(K),hh=n(K,"LI",{});var Z6e=s(hh);tse=n(Z6e,"STRONG",{});var Det=s(tse);Wmo=r(Det,"convnext"),Det.forEach(t),Qmo=r(Z6e," \u2014 "),iI=n(Z6e,"A",{href:!0});var Get=s(iI);Hmo=r(Get,"ConvNextFeatureExtractor"),Get.forEach(t),Umo=r(Z6e," (ConvNeXT model)"),Z6e.forEach(t),Jmo=i(K),uh=n(K,"LI",{});var eLe=s(uh);ase=n(eLe,"STRONG",{});var Oet=s(ase);Ymo=r(Oet,"cvt"),Oet.forEach(t),Kmo=r(eLe," \u2014 "),dI=n(eLe,"A",{href:!0});var Vet=s(dI);Zmo=r(Vet,"ConvNextFeatureExtractor"),Vet.forEach(t),efo=r(eLe," (CvT model)"),eLe.forEach(t),ofo=i(K),ph=n(K,"LI",{});var oLe=s(ph);nse=n(oLe,"STRONG",{});var Xet=s(nse);rfo=r(Xet,"data2vec-audio"),Xet.forEach(t),tfo=r(oLe," \u2014 "),cI=n(oLe,"A",{href:!0});var zet=s(cI);afo=r(zet,"Wav2Vec2FeatureExtractor"),zet.forEach(t),nfo=r(oLe," (Data2VecAudio model)"),oLe.forEach(t),sfo=i(K),_h=n(K,"LI",{});var rLe=s(_h);sse=n(rLe,"STRONG",{});var Wet=s(sse);lfo=r(Wet,"data2vec-vision"),Wet.forEach(t),ifo=r(rLe," \u2014 "),mI=n(rLe,"A",{href:!0});var Qet=s(mI);dfo=r(Qet,"BeitFeatureExtractor"),Qet.forEach(t),cfo=r(rLe," (Data2VecVision model)"),rLe.forEach(t),mfo=i(K),bh=n(K,"LI",{});var tLe=s(bh);lse=n(tLe,"STRONG",{});var Het=s(lse);ffo=r(Het,"deit"),Het.forEach(t),gfo=r(tLe," \u2014 "),fI=n(tLe,"A",{href:!0});var Uet=s(fI);hfo=r(Uet,"DeiTFeatureExtractor"),Uet.forEach(t),ufo=r(tLe," (DeiT model)"),tLe.forEach(t),pfo=i(K),vh=n(K,"LI",{});var aLe=s(vh);ise=n(aLe,"STRONG",{});var Jet=s(ise);_fo=r(Jet,"detr"),Jet.forEach(t),bfo=r(aLe," \u2014 "),gI=n(aLe,"A",{href:!0});var Yet=s(gI);vfo=r(Yet,"DetrFeatureExtractor"),Yet.forEach(t),Ffo=r(aLe," (DETR model)"),aLe.forEach(t),Tfo=i(K),Fh=n(K,"LI",{});var nLe=s(Fh);dse=n(nLe,"STRONG",{});var Ket=s(dse);Mfo=r(Ket,"dpt"),Ket.forEach(t),Efo=r(nLe," \u2014 "),hI=n(nLe,"A",{href:!0});var Zet=s(hI);Cfo=r(Zet,"DPTFeatureExtractor"),Zet.forEach(t),wfo=r(nLe," (DPT model)"),nLe.forEach(t),Afo=i(K),Th=n(K,"LI",{});var sLe=s(Th);cse=n(sLe,"STRONG",{});var eot=s(cse);Lfo=r(eot,"flava"),eot.forEach(t),yfo=r(sLe," \u2014 "),uI=n(sLe,"A",{href:!0});var oot=s(uI);xfo=r(oot,"FlavaFeatureExtractor"),oot.forEach(t),$fo=r(sLe," (FLAVA model)"),sLe.forEach(t),kfo=i(K),Mh=n(K,"LI",{});var lLe=s(Mh);mse=n(lLe,"STRONG",{});var rot=s(mse);Sfo=r(rot,"glpn"),rot.forEach(t),Rfo=r(lLe," \u2014 "),pI=n(lLe,"A",{href:!0});var tot=s(pI);Pfo=r(tot,"GLPNFeatureExtractor"),tot.forEach(t),Bfo=r(lLe," (GLPN model)"),lLe.forEach(t),Ifo=i(K),Eh=n(K,"LI",{});var iLe=s(Eh);fse=n(iLe,"STRONG",{});var aot=s(fse);Nfo=r(aot,"hubert"),aot.forEach(t),qfo=r(iLe," \u2014 "),_I=n(iLe,"A",{href:!0});var not=s(_I);jfo=r(not,"Wav2Vec2FeatureExtractor"),not.forEach(t),Dfo=r(iLe," (Hubert model)"),iLe.forEach(t),Gfo=i(K),Ch=n(K,"LI",{});var dLe=s(Ch);gse=n(dLe,"STRONG",{});var sot=s(gse);Ofo=r(sot,"imagegpt"),sot.forEach(t),Vfo=r(dLe," \u2014 "),bI=n(dLe,"A",{href:!0});var lot=s(bI);Xfo=r(lot,"ImageGPTFeatureExtractor"),lot.forEach(t),zfo=r(dLe," (ImageGPT model)"),dLe.forEach(t),Wfo=i(K),wh=n(K,"LI",{});var cLe=s(wh);hse=n(cLe,"STRONG",{});var iot=s(hse);Qfo=r(iot,"layoutlmv2"),iot.forEach(t),Hfo=r(cLe," \u2014 "),vI=n(cLe,"A",{href:!0});var dot=s(vI);Ufo=r(dot,"LayoutLMv2FeatureExtractor"),dot.forEach(t),Jfo=r(cLe," (LayoutLMv2 model)"),cLe.forEach(t),Yfo=i(K),Ah=n(K,"LI",{});var mLe=s(Ah);use=n(mLe,"STRONG",{});var cot=s(use);Kfo=r(cot,"layoutlmv3"),cot.forEach(t),Zfo=r(mLe," \u2014 "),FI=n(mLe,"A",{href:!0});var mot=s(FI);ego=r(mot,"LayoutLMv3FeatureExtractor"),mot.forEach(t),ogo=r(mLe," (LayoutLMv3 model)"),mLe.forEach(t),rgo=i(K),Lh=n(K,"LI",{});var fLe=s(Lh);pse=n(fLe,"STRONG",{});var fot=s(pse);tgo=r(fot,"levit"),fot.forEach(t),ago=r(fLe," \u2014 "),TI=n(fLe,"A",{href:!0});var got=s(TI);ngo=r(got,"LevitFeatureExtractor"),got.forEach(t),sgo=r(fLe," (LeViT model)"),fLe.forEach(t),lgo=i(K),yh=n(K,"LI",{});var gLe=s(yh);_se=n(gLe,"STRONG",{});var hot=s(_se);igo=r(hot,"maskformer"),hot.forEach(t),dgo=r(gLe," \u2014 "),MI=n(gLe,"A",{href:!0});var uot=s(MI);cgo=r(uot,"MaskFormerFeatureExtractor"),uot.forEach(t),mgo=r(gLe," (MaskFormer model)"),gLe.forEach(t),fgo=i(K),xh=n(K,"LI",{});var hLe=s(xh);bse=n(hLe,"STRONG",{});var pot=s(bse);ggo=r(pot,"mctct"),pot.forEach(t),hgo=r(hLe," \u2014 "),EI=n(hLe,"A",{href:!0});var _ot=s(EI);ugo=r(_ot,"MCTCTFeatureExtractor"),_ot.forEach(t),pgo=r(hLe," (M-CTC-T model)"),hLe.forEach(t),_go=i(K),$h=n(K,"LI",{});var uLe=s($h);vse=n(uLe,"STRONG",{});var bot=s(vse);bgo=r(bot,"perceiver"),bot.forEach(t),vgo=r(uLe," \u2014 "),CI=n(uLe,"A",{href:!0});var vot=s(CI);Fgo=r(vot,"PerceiverFeatureExtractor"),vot.forEach(t),Tgo=r(uLe," (Perceiver model)"),uLe.forEach(t),Mgo=i(K),kh=n(K,"LI",{});var pLe=s(kh);Fse=n(pLe,"STRONG",{});var Fot=s(Fse);Ego=r(Fot,"poolformer"),Fot.forEach(t),Cgo=r(pLe," \u2014 "),wI=n(pLe,"A",{href:!0});var Tot=s(wI);wgo=r(Tot,"PoolFormerFeatureExtractor"),Tot.forEach(t),Ago=r(pLe," (PoolFormer model)"),pLe.forEach(t),Lgo=i(K),Sh=n(K,"LI",{});var _Le=s(Sh);Tse=n(_Le,"STRONG",{});var Mot=s(Tse);ygo=r(Mot,"regnet"),Mot.forEach(t),xgo=r(_Le," \u2014 "),AI=n(_Le,"A",{href:!0});var Eot=s(AI);$go=r(Eot,"ConvNextFeatureExtractor"),Eot.forEach(t),kgo=r(_Le," (RegNet model)"),_Le.forEach(t),Sgo=i(K),Rh=n(K,"LI",{});var bLe=s(Rh);Mse=n(bLe,"STRONG",{});var Cot=s(Mse);Rgo=r(Cot,"resnet"),Cot.forEach(t),Pgo=r(bLe," \u2014 "),LI=n(bLe,"A",{href:!0});var wot=s(LI);Bgo=r(wot,"ConvNextFeatureExtractor"),wot.forEach(t),Igo=r(bLe," (ResNet model)"),bLe.forEach(t),Ngo=i(K),Ph=n(K,"LI",{});var vLe=s(Ph);Ese=n(vLe,"STRONG",{});var Aot=s(Ese);qgo=r(Aot,"segformer"),Aot.forEach(t),jgo=r(vLe," \u2014 "),yI=n(vLe,"A",{href:!0});var Lot=s(yI);Dgo=r(Lot,"SegformerFeatureExtractor"),Lot.forEach(t),Ggo=r(vLe," (SegFormer model)"),vLe.forEach(t),Ogo=i(K),Bh=n(K,"LI",{});var FLe=s(Bh);Cse=n(FLe,"STRONG",{});var yot=s(Cse);Vgo=r(yot,"speech_to_text"),yot.forEach(t),Xgo=r(FLe," \u2014 "),xI=n(FLe,"A",{href:!0});var xot=s(xI);zgo=r(xot,"Speech2TextFeatureExtractor"),xot.forEach(t),Wgo=r(FLe," (Speech2Text model)"),FLe.forEach(t),Qgo=i(K),Ih=n(K,"LI",{});var TLe=s(Ih);wse=n(TLe,"STRONG",{});var $ot=s(wse);Hgo=r($ot,"swin"),$ot.forEach(t),Ugo=r(TLe," \u2014 "),$I=n(TLe,"A",{href:!0});var kot=s($I);Jgo=r(kot,"ViTFeatureExtractor"),kot.forEach(t),Ygo=r(TLe," (Swin Transformer model)"),TLe.forEach(t),Kgo=i(K),Nh=n(K,"LI",{});var MLe=s(Nh);Ase=n(MLe,"STRONG",{});var Sot=s(Ase);Zgo=r(Sot,"van"),Sot.forEach(t),eho=r(MLe," \u2014 "),kI=n(MLe,"A",{href:!0});var Rot=s(kI);oho=r(Rot,"ConvNextFeatureExtractor"),Rot.forEach(t),rho=r(MLe," (VAN model)"),MLe.forEach(t),tho=i(K),qh=n(K,"LI",{});var ELe=s(qh);Lse=n(ELe,"STRONG",{});var Pot=s(Lse);aho=r(Pot,"vit"),Pot.forEach(t),nho=r(ELe," \u2014 "),SI=n(ELe,"A",{href:!0});var Bot=s(SI);sho=r(Bot,"ViTFeatureExtractor"),Bot.forEach(t),lho=r(ELe," (ViT model)"),ELe.forEach(t),iho=i(K),jh=n(K,"LI",{});var CLe=s(jh);yse=n(CLe,"STRONG",{});var Iot=s(yse);dho=r(Iot,"vit_mae"),Iot.forEach(t),cho=r(CLe," \u2014 "),RI=n(CLe,"A",{href:!0});var Not=s(RI);mho=r(Not,"ViTFeatureExtractor"),Not.forEach(t),fho=r(CLe," (ViTMAE model)"),CLe.forEach(t),gho=i(K),Dh=n(K,"LI",{});var wLe=s(Dh);xse=n(wLe,"STRONG",{});var qot=s(xse);hho=r(qot,"wav2vec2"),qot.forEach(t),uho=r(wLe," \u2014 "),PI=n(wLe,"A",{href:!0});var jot=s(PI);pho=r(jot,"Wav2Vec2FeatureExtractor"),jot.forEach(t),_ho=r(wLe," (Wav2Vec2 model)"),wLe.forEach(t),bho=i(K),Gh=n(K,"LI",{});var ALe=s(Gh);$se=n(ALe,"STRONG",{});var Dot=s($se);vho=r(Dot,"wav2vec2-conformer"),Dot.forEach(t),Fho=r(ALe," \u2014 "),BI=n(ALe,"A",{href:!0});var Got=s(BI);Tho=r(Got,"Wav2Vec2FeatureExtractor"),Got.forEach(t),Mho=r(ALe," (Wav2Vec2-Conformer model)"),ALe.forEach(t),Eho=i(K),Oh=n(K,"LI",{});var LLe=s(Oh);kse=n(LLe,"STRONG",{});var Oot=s(kse);Cho=r(Oot,"yolos"),Oot.forEach(t),who=r(LLe," \u2014 "),II=n(LLe,"A",{href:!0});var Vot=s(II);Aho=r(Vot,"YolosFeatureExtractor"),Vot.forEach(t),Lho=r(LLe," (YOLOS model)"),LLe.forEach(t),K.forEach(t),yho=i(Zt),T(Vh.$$.fragment,Zt),xho=i(Zt),T(Xh.$$.fragment,Zt),Zt.forEach(t),$ho=i(Ds),zh=n(Ds,"DIV",{class:!0});var xGe=s(zh);T(cy.$$.fragment,xGe),kho=i(xGe),Sse=n(xGe,"P",{});var Xot=s(Sse);Sho=r(Xot,"Register a new feature extractor for this class."),Xot.forEach(t),xGe.forEach(t),Ds.forEach(t),yje=i(m),Ci=n(m,"H2",{class:!0});var $Ge=s(Ci);Wh=n($Ge,"A",{id:!0,class:!0,href:!0});var zot=s(Wh);Rse=n(zot,"SPAN",{});var Wot=s(Rse);T(my.$$.fragment,Wot),Wot.forEach(t),zot.forEach(t),Rho=i($Ge),Pse=n($Ge,"SPAN",{});var Qot=s(Pse);Pho=r(Qot,"AutoProcessor"),Qot.forEach(t),$Ge.forEach(t),xje=i(m),Lo=n(m,"DIV",{class:!0});var Gs=s(Lo);T(fy.$$.fragment,Gs),Bho=i(Gs),gy=n(Gs,"P",{});var kGe=s(gy);Iho=r(kGe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),NI=n(kGe,"A",{href:!0});var Hot=s(NI);Nho=r(Hot,"AutoProcessor.from_pretrained()"),Hot.forEach(t),qho=r(kGe," class method."),kGe.forEach(t),jho=i(Gs),hy=n(Gs,"P",{});var SGe=s(hy);Dho=r(SGe,"This class cannot be instantiated directly using "),Bse=n(SGe,"CODE",{});var Uot=s(Bse);Gho=r(Uot,"__init__()"),Uot.forEach(t),Oho=r(SGe," (throws an error)."),SGe.forEach(t),Vho=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(uy.$$.fragment,ea),Xho=i(ea),Ise=n(ea,"P",{});var Jot=s(Ise);zho=r(Jot,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Jot.forEach(t),Who=i(ea),wi=n(ea,"P",{});var KZ=s(wi);Qho=r(KZ,"The processor class to instantiate is selected based on the "),Nse=n(KZ,"CODE",{});var Yot=s(Nse);Hho=r(Yot,"model_type"),Yot.forEach(t),Uho=r(KZ,` property of the config object (either
passed as an argument or loaded from `),qse=n(KZ,"CODE",{});var Kot=s(qse);Jho=r(Kot,"pretrained_model_name_or_path"),Kot.forEach(t),Yho=r(KZ," if possible):"),KZ.forEach(t),Kho=i(ea),he=n(ea,"UL",{});var _e=s(he);Qh=n(_e,"LI",{});var yLe=s(Qh);jse=n(yLe,"STRONG",{});var Zot=s(jse);Zho=r(Zot,"clip"),Zot.forEach(t),euo=r(yLe," \u2014 "),qI=n(yLe,"A",{href:!0});var ert=s(qI);ouo=r(ert,"CLIPProcessor"),ert.forEach(t),ruo=r(yLe," (CLIP model)"),yLe.forEach(t),tuo=i(_e),Hh=n(_e,"LI",{});var xLe=s(Hh);Dse=n(xLe,"STRONG",{});var ort=s(Dse);auo=r(ort,"flava"),ort.forEach(t),nuo=r(xLe," \u2014 "),Gse=n(xLe,"CODE",{});var rrt=s(Gse);suo=r(rrt,"FLAVAProcessor"),rrt.forEach(t),luo=r(xLe," (FLAVA model)"),xLe.forEach(t),iuo=i(_e),Uh=n(_e,"LI",{});var $Le=s(Uh);Ose=n($Le,"STRONG",{});var trt=s(Ose);duo=r(trt,"layoutlmv2"),trt.forEach(t),cuo=r($Le," \u2014 "),jI=n($Le,"A",{href:!0});var art=s(jI);muo=r(art,"LayoutLMv2Processor"),art.forEach(t),fuo=r($Le," (LayoutLMv2 model)"),$Le.forEach(t),guo=i(_e),Jh=n(_e,"LI",{});var kLe=s(Jh);Vse=n(kLe,"STRONG",{});var nrt=s(Vse);huo=r(nrt,"layoutlmv3"),nrt.forEach(t),uuo=r(kLe," \u2014 "),DI=n(kLe,"A",{href:!0});var srt=s(DI);puo=r(srt,"LayoutLMv3Processor"),srt.forEach(t),_uo=r(kLe," (LayoutLMv3 model)"),kLe.forEach(t),buo=i(_e),Yh=n(_e,"LI",{});var SLe=s(Yh);Xse=n(SLe,"STRONG",{});var lrt=s(Xse);vuo=r(lrt,"layoutxlm"),lrt.forEach(t),Fuo=r(SLe," \u2014 "),GI=n(SLe,"A",{href:!0});var irt=s(GI);Tuo=r(irt,"LayoutXLMProcessor"),irt.forEach(t),Muo=r(SLe," (LayoutXLM model)"),SLe.forEach(t),Euo=i(_e),Kh=n(_e,"LI",{});var RLe=s(Kh);zse=n(RLe,"STRONG",{});var drt=s(zse);Cuo=r(drt,"sew"),drt.forEach(t),wuo=r(RLe," \u2014 "),OI=n(RLe,"A",{href:!0});var crt=s(OI);Auo=r(crt,"Wav2Vec2Processor"),crt.forEach(t),Luo=r(RLe," (SEW model)"),RLe.forEach(t),yuo=i(_e),Zh=n(_e,"LI",{});var PLe=s(Zh);Wse=n(PLe,"STRONG",{});var mrt=s(Wse);xuo=r(mrt,"sew-d"),mrt.forEach(t),$uo=r(PLe," \u2014 "),VI=n(PLe,"A",{href:!0});var frt=s(VI);kuo=r(frt,"Wav2Vec2Processor"),frt.forEach(t),Suo=r(PLe," (SEW-D model)"),PLe.forEach(t),Ruo=i(_e),eu=n(_e,"LI",{});var BLe=s(eu);Qse=n(BLe,"STRONG",{});var grt=s(Qse);Puo=r(grt,"speech_to_text"),grt.forEach(t),Buo=r(BLe," \u2014 "),XI=n(BLe,"A",{href:!0});var hrt=s(XI);Iuo=r(hrt,"Speech2TextProcessor"),hrt.forEach(t),Nuo=r(BLe," (Speech2Text model)"),BLe.forEach(t),quo=i(_e),ou=n(_e,"LI",{});var ILe=s(ou);Hse=n(ILe,"STRONG",{});var urt=s(Hse);juo=r(urt,"speech_to_text_2"),urt.forEach(t),Duo=r(ILe," \u2014 "),zI=n(ILe,"A",{href:!0});var prt=s(zI);Guo=r(prt,"Speech2Text2Processor"),prt.forEach(t),Ouo=r(ILe," (Speech2Text2 model)"),ILe.forEach(t),Vuo=i(_e),ru=n(_e,"LI",{});var NLe=s(ru);Use=n(NLe,"STRONG",{});var _rt=s(Use);Xuo=r(_rt,"trocr"),_rt.forEach(t),zuo=r(NLe," \u2014 "),WI=n(NLe,"A",{href:!0});var brt=s(WI);Wuo=r(brt,"TrOCRProcessor"),brt.forEach(t),Quo=r(NLe," (TrOCR model)"),NLe.forEach(t),Huo=i(_e),tu=n(_e,"LI",{});var qLe=s(tu);Jse=n(qLe,"STRONG",{});var vrt=s(Jse);Uuo=r(vrt,"unispeech"),vrt.forEach(t),Juo=r(qLe," \u2014 "),QI=n(qLe,"A",{href:!0});var Frt=s(QI);Yuo=r(Frt,"Wav2Vec2Processor"),Frt.forEach(t),Kuo=r(qLe," (UniSpeech model)"),qLe.forEach(t),Zuo=i(_e),au=n(_e,"LI",{});var jLe=s(au);Yse=n(jLe,"STRONG",{});var Trt=s(Yse);epo=r(Trt,"unispeech-sat"),Trt.forEach(t),opo=r(jLe," \u2014 "),HI=n(jLe,"A",{href:!0});var Mrt=s(HI);rpo=r(Mrt,"Wav2Vec2Processor"),Mrt.forEach(t),tpo=r(jLe," (UniSpeechSat model)"),jLe.forEach(t),apo=i(_e),nu=n(_e,"LI",{});var DLe=s(nu);Kse=n(DLe,"STRONG",{});var Ert=s(Kse);npo=r(Ert,"vilt"),Ert.forEach(t),spo=r(DLe," \u2014 "),UI=n(DLe,"A",{href:!0});var Crt=s(UI);lpo=r(Crt,"ViltProcessor"),Crt.forEach(t),ipo=r(DLe," (ViLT model)"),DLe.forEach(t),dpo=i(_e),su=n(_e,"LI",{});var GLe=s(su);Zse=n(GLe,"STRONG",{});var wrt=s(Zse);cpo=r(wrt,"vision-text-dual-encoder"),wrt.forEach(t),mpo=r(GLe," \u2014 "),JI=n(GLe,"A",{href:!0});var Art=s(JI);fpo=r(Art,"VisionTextDualEncoderProcessor"),Art.forEach(t),gpo=r(GLe," (VisionTextDualEncoder model)"),GLe.forEach(t),hpo=i(_e),lu=n(_e,"LI",{});var OLe=s(lu);ele=n(OLe,"STRONG",{});var Lrt=s(ele);upo=r(Lrt,"wav2vec2"),Lrt.forEach(t),ppo=r(OLe," \u2014 "),YI=n(OLe,"A",{href:!0});var yrt=s(YI);_po=r(yrt,"Wav2Vec2Processor"),yrt.forEach(t),bpo=r(OLe," (Wav2Vec2 model)"),OLe.forEach(t),vpo=i(_e),iu=n(_e,"LI",{});var VLe=s(iu);ole=n(VLe,"STRONG",{});var xrt=s(ole);Fpo=r(xrt,"wav2vec2-conformer"),xrt.forEach(t),Tpo=r(VLe," \u2014 "),KI=n(VLe,"A",{href:!0});var $rt=s(KI);Mpo=r($rt,"Wav2Vec2Processor"),$rt.forEach(t),Epo=r(VLe," (Wav2Vec2-Conformer model)"),VLe.forEach(t),Cpo=i(_e),du=n(_e,"LI",{});var XLe=s(du);rle=n(XLe,"STRONG",{});var krt=s(rle);wpo=r(krt,"wavlm"),krt.forEach(t),Apo=r(XLe," \u2014 "),ZI=n(XLe,"A",{href:!0});var Srt=s(ZI);Lpo=r(Srt,"Wav2Vec2Processor"),Srt.forEach(t),ypo=r(XLe," (WavLM model)"),XLe.forEach(t),_e.forEach(t),xpo=i(ea),T(cu.$$.fragment,ea),$po=i(ea),T(mu.$$.fragment,ea),ea.forEach(t),kpo=i(Gs),fu=n(Gs,"DIV",{class:!0});var RGe=s(fu);T(py.$$.fragment,RGe),Spo=i(RGe),tle=n(RGe,"P",{});var Rrt=s(tle);Rpo=r(Rrt,"Register a new processor for this class."),Rrt.forEach(t),RGe.forEach(t),Gs.forEach(t),$je=i(m),Ai=n(m,"H2",{class:!0});var PGe=s(Ai);gu=n(PGe,"A",{id:!0,class:!0,href:!0});var Prt=s(gu);ale=n(Prt,"SPAN",{});var Brt=s(ale);T(_y.$$.fragment,Brt),Brt.forEach(t),Prt.forEach(t),Ppo=i(PGe),nle=n(PGe,"SPAN",{});var Irt=s(nle);Bpo=r(Irt,"AutoModel"),Irt.forEach(t),PGe.forEach(t),kje=i(m),yo=n(m,"DIV",{class:!0});var Os=s(yo);T(by.$$.fragment,Os),Ipo=i(Os),Li=n(Os,"P",{});var ZZ=s(Li);Npo=r(ZZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),eN=n(ZZ,"A",{href:!0});var Nrt=s(eN);qpo=r(Nrt,"from_pretrained()"),Nrt.forEach(t),jpo=r(ZZ," class method or the "),oN=n(ZZ,"A",{href:!0});var qrt=s(oN);Dpo=r(qrt,"from_config()"),qrt.forEach(t),Gpo=r(ZZ,` class
method.`),ZZ.forEach(t),Opo=i(Os),vy=n(Os,"P",{});var BGe=s(vy);Vpo=r(BGe,"This class cannot be instantiated directly using "),sle=n(BGe,"CODE",{});var jrt=s(sle);Xpo=r(jrt,"__init__()"),jrt.forEach(t),zpo=r(BGe," (throws an error)."),BGe.forEach(t),Wpo=i(Os),tt=n(Os,"DIV",{class:!0});var UA=s(tt);T(Fy.$$.fragment,UA),Qpo=i(UA),lle=n(UA,"P",{});var Drt=s(lle);Hpo=r(Drt,"Instantiates one of the base model classes of the library from a configuration."),Drt.forEach(t),Upo=i(UA),yi=n(UA,"P",{});var eee=s(yi);Jpo=r(eee,`Note:
Loading a model from its configuration file does `),ile=n(eee,"STRONG",{});var Grt=s(ile);Ypo=r(Grt,"not"),Grt.forEach(t),Kpo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),rN=n(eee,"A",{href:!0});var Ort=s(rN);Zpo=r(Ort,"from_pretrained()"),Ort.forEach(t),e_o=r(eee," to load the model weights."),eee.forEach(t),o_o=i(UA),T(hu.$$.fragment,UA),UA.forEach(t),r_o=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(Ty.$$.fragment,oa),t_o=i(oa),dle=n(oa,"P",{});var Vrt=s(dle);a_o=r(Vrt,"Instantiate one of the base model classes of the library from a pretrained model."),Vrt.forEach(t),n_o=i(oa),ya=n(oa,"P",{});var JA=s(ya);s_o=r(JA,"The model class to instantiate is selected based on the "),cle=n(JA,"CODE",{});var Xrt=s(cle);l_o=r(Xrt,"model_type"),Xrt.forEach(t),i_o=r(JA,` property of the config object (either
passed as an argument or loaded from `),mle=n(JA,"CODE",{});var zrt=s(mle);d_o=r(zrt,"pretrained_model_name_or_path"),zrt.forEach(t),c_o=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fle=n(JA,"CODE",{});var Wrt=s(fle);m_o=r(Wrt,"pretrained_model_name_or_path"),Wrt.forEach(t),f_o=r(JA,":"),JA.forEach(t),g_o=i(oa),y=n(oa,"UL",{});var $=s(y);uu=n($,"LI",{});var zLe=s(uu);gle=n(zLe,"STRONG",{});var Qrt=s(gle);h_o=r(Qrt,"albert"),Qrt.forEach(t),u_o=r(zLe," \u2014 "),tN=n(zLe,"A",{href:!0});var Hrt=s(tN);p_o=r(Hrt,"AlbertModel"),Hrt.forEach(t),__o=r(zLe," (ALBERT model)"),zLe.forEach(t),b_o=i($),pu=n($,"LI",{});var WLe=s(pu);hle=n(WLe,"STRONG",{});var Urt=s(hle);v_o=r(Urt,"bart"),Urt.forEach(t),F_o=r(WLe," \u2014 "),aN=n(WLe,"A",{href:!0});var Jrt=s(aN);T_o=r(Jrt,"BartModel"),Jrt.forEach(t),M_o=r(WLe," (BART model)"),WLe.forEach(t),E_o=i($),_u=n($,"LI",{});var QLe=s(_u);ule=n(QLe,"STRONG",{});var Yrt=s(ule);C_o=r(Yrt,"beit"),Yrt.forEach(t),w_o=r(QLe," \u2014 "),nN=n(QLe,"A",{href:!0});var Krt=s(nN);A_o=r(Krt,"BeitModel"),Krt.forEach(t),L_o=r(QLe," (BEiT model)"),QLe.forEach(t),y_o=i($),bu=n($,"LI",{});var HLe=s(bu);ple=n(HLe,"STRONG",{});var Zrt=s(ple);x_o=r(Zrt,"bert"),Zrt.forEach(t),$_o=r(HLe," \u2014 "),sN=n(HLe,"A",{href:!0});var ett=s(sN);k_o=r(ett,"BertModel"),ett.forEach(t),S_o=r(HLe," (BERT model)"),HLe.forEach(t),R_o=i($),vu=n($,"LI",{});var ULe=s(vu);_le=n(ULe,"STRONG",{});var ott=s(_le);P_o=r(ott,"bert-generation"),ott.forEach(t),B_o=r(ULe," \u2014 "),lN=n(ULe,"A",{href:!0});var rtt=s(lN);I_o=r(rtt,"BertGenerationEncoder"),rtt.forEach(t),N_o=r(ULe," (Bert Generation model)"),ULe.forEach(t),q_o=i($),Fu=n($,"LI",{});var JLe=s(Fu);ble=n(JLe,"STRONG",{});var ttt=s(ble);j_o=r(ttt,"big_bird"),ttt.forEach(t),D_o=r(JLe," \u2014 "),iN=n(JLe,"A",{href:!0});var att=s(iN);G_o=r(att,"BigBirdModel"),att.forEach(t),O_o=r(JLe," (BigBird model)"),JLe.forEach(t),V_o=i($),Tu=n($,"LI",{});var YLe=s(Tu);vle=n(YLe,"STRONG",{});var ntt=s(vle);X_o=r(ntt,"bigbird_pegasus"),ntt.forEach(t),z_o=r(YLe," \u2014 "),dN=n(YLe,"A",{href:!0});var stt=s(dN);W_o=r(stt,"BigBirdPegasusModel"),stt.forEach(t),Q_o=r(YLe," (BigBird-Pegasus model)"),YLe.forEach(t),H_o=i($),Mu=n($,"LI",{});var KLe=s(Mu);Fle=n(KLe,"STRONG",{});var ltt=s(Fle);U_o=r(ltt,"blenderbot"),ltt.forEach(t),J_o=r(KLe," \u2014 "),cN=n(KLe,"A",{href:!0});var itt=s(cN);Y_o=r(itt,"BlenderbotModel"),itt.forEach(t),K_o=r(KLe," (Blenderbot model)"),KLe.forEach(t),Z_o=i($),Eu=n($,"LI",{});var ZLe=s(Eu);Tle=n(ZLe,"STRONG",{});var dtt=s(Tle);ebo=r(dtt,"blenderbot-small"),dtt.forEach(t),obo=r(ZLe," \u2014 "),mN=n(ZLe,"A",{href:!0});var ctt=s(mN);rbo=r(ctt,"BlenderbotSmallModel"),ctt.forEach(t),tbo=r(ZLe," (BlenderbotSmall model)"),ZLe.forEach(t),abo=i($),Cu=n($,"LI",{});var eye=s(Cu);Mle=n(eye,"STRONG",{});var mtt=s(Mle);nbo=r(mtt,"bloom"),mtt.forEach(t),sbo=r(eye," \u2014 "),fN=n(eye,"A",{href:!0});var ftt=s(fN);lbo=r(ftt,"BloomModel"),ftt.forEach(t),ibo=r(eye," (BLOOM model)"),eye.forEach(t),dbo=i($),wu=n($,"LI",{});var oye=s(wu);Ele=n(oye,"STRONG",{});var gtt=s(Ele);cbo=r(gtt,"camembert"),gtt.forEach(t),mbo=r(oye," \u2014 "),gN=n(oye,"A",{href:!0});var htt=s(gN);fbo=r(htt,"CamembertModel"),htt.forEach(t),gbo=r(oye," (CamemBERT model)"),oye.forEach(t),hbo=i($),Au=n($,"LI",{});var rye=s(Au);Cle=n(rye,"STRONG",{});var utt=s(Cle);ubo=r(utt,"canine"),utt.forEach(t),pbo=r(rye," \u2014 "),hN=n(rye,"A",{href:!0});var ptt=s(hN);_bo=r(ptt,"CanineModel"),ptt.forEach(t),bbo=r(rye," (CANINE model)"),rye.forEach(t),vbo=i($),Lu=n($,"LI",{});var tye=s(Lu);wle=n(tye,"STRONG",{});var _tt=s(wle);Fbo=r(_tt,"clip"),_tt.forEach(t),Tbo=r(tye," \u2014 "),uN=n(tye,"A",{href:!0});var btt=s(uN);Mbo=r(btt,"CLIPModel"),btt.forEach(t),Ebo=r(tye," (CLIP model)"),tye.forEach(t),Cbo=i($),yu=n($,"LI",{});var aye=s(yu);Ale=n(aye,"STRONG",{});var vtt=s(Ale);wbo=r(vtt,"convbert"),vtt.forEach(t),Abo=r(aye," \u2014 "),pN=n(aye,"A",{href:!0});var Ftt=s(pN);Lbo=r(Ftt,"ConvBertModel"),Ftt.forEach(t),ybo=r(aye," (ConvBERT model)"),aye.forEach(t),xbo=i($),xu=n($,"LI",{});var nye=s(xu);Lle=n(nye,"STRONG",{});var Ttt=s(Lle);$bo=r(Ttt,"convnext"),Ttt.forEach(t),kbo=r(nye," \u2014 "),_N=n(nye,"A",{href:!0});var Mtt=s(_N);Sbo=r(Mtt,"ConvNextModel"),Mtt.forEach(t),Rbo=r(nye," (ConvNeXT model)"),nye.forEach(t),Pbo=i($),$u=n($,"LI",{});var sye=s($u);yle=n(sye,"STRONG",{});var Ett=s(yle);Bbo=r(Ett,"ctrl"),Ett.forEach(t),Ibo=r(sye," \u2014 "),bN=n(sye,"A",{href:!0});var Ctt=s(bN);Nbo=r(Ctt,"CTRLModel"),Ctt.forEach(t),qbo=r(sye," (CTRL model)"),sye.forEach(t),jbo=i($),ku=n($,"LI",{});var lye=s(ku);xle=n(lye,"STRONG",{});var wtt=s(xle);Dbo=r(wtt,"cvt"),wtt.forEach(t),Gbo=r(lye," \u2014 "),vN=n(lye,"A",{href:!0});var Att=s(vN);Obo=r(Att,"CvtModel"),Att.forEach(t),Vbo=r(lye," (CvT model)"),lye.forEach(t),Xbo=i($),Su=n($,"LI",{});var iye=s(Su);$le=n(iye,"STRONG",{});var Ltt=s($le);zbo=r(Ltt,"data2vec-audio"),Ltt.forEach(t),Wbo=r(iye," \u2014 "),FN=n(iye,"A",{href:!0});var ytt=s(FN);Qbo=r(ytt,"Data2VecAudioModel"),ytt.forEach(t),Hbo=r(iye," (Data2VecAudio model)"),iye.forEach(t),Ubo=i($),Ru=n($,"LI",{});var dye=s(Ru);kle=n(dye,"STRONG",{});var xtt=s(kle);Jbo=r(xtt,"data2vec-text"),xtt.forEach(t),Ybo=r(dye," \u2014 "),TN=n(dye,"A",{href:!0});var $tt=s(TN);Kbo=r($tt,"Data2VecTextModel"),$tt.forEach(t),Zbo=r(dye," (Data2VecText model)"),dye.forEach(t),e2o=i($),Pu=n($,"LI",{});var cye=s(Pu);Sle=n(cye,"STRONG",{});var ktt=s(Sle);o2o=r(ktt,"data2vec-vision"),ktt.forEach(t),r2o=r(cye," \u2014 "),MN=n(cye,"A",{href:!0});var Stt=s(MN);t2o=r(Stt,"Data2VecVisionModel"),Stt.forEach(t),a2o=r(cye," (Data2VecVision model)"),cye.forEach(t),n2o=i($),Bu=n($,"LI",{});var mye=s(Bu);Rle=n(mye,"STRONG",{});var Rtt=s(Rle);s2o=r(Rtt,"deberta"),Rtt.forEach(t),l2o=r(mye," \u2014 "),EN=n(mye,"A",{href:!0});var Ptt=s(EN);i2o=r(Ptt,"DebertaModel"),Ptt.forEach(t),d2o=r(mye," (DeBERTa model)"),mye.forEach(t),c2o=i($),Iu=n($,"LI",{});var fye=s(Iu);Ple=n(fye,"STRONG",{});var Btt=s(Ple);m2o=r(Btt,"deberta-v2"),Btt.forEach(t),f2o=r(fye," \u2014 "),CN=n(fye,"A",{href:!0});var Itt=s(CN);g2o=r(Itt,"DebertaV2Model"),Itt.forEach(t),h2o=r(fye," (DeBERTa-v2 model)"),fye.forEach(t),u2o=i($),Nu=n($,"LI",{});var gye=s(Nu);Ble=n(gye,"STRONG",{});var Ntt=s(Ble);p2o=r(Ntt,"decision_transformer"),Ntt.forEach(t),_2o=r(gye," \u2014 "),wN=n(gye,"A",{href:!0});var qtt=s(wN);b2o=r(qtt,"DecisionTransformerModel"),qtt.forEach(t),v2o=r(gye," (Decision Transformer model)"),gye.forEach(t),F2o=i($),qu=n($,"LI",{});var hye=s(qu);Ile=n(hye,"STRONG",{});var jtt=s(Ile);T2o=r(jtt,"deit"),jtt.forEach(t),M2o=r(hye," \u2014 "),AN=n(hye,"A",{href:!0});var Dtt=s(AN);E2o=r(Dtt,"DeiTModel"),Dtt.forEach(t),C2o=r(hye," (DeiT model)"),hye.forEach(t),w2o=i($),ju=n($,"LI",{});var uye=s(ju);Nle=n(uye,"STRONG",{});var Gtt=s(Nle);A2o=r(Gtt,"detr"),Gtt.forEach(t),L2o=r(uye," \u2014 "),LN=n(uye,"A",{href:!0});var Ott=s(LN);y2o=r(Ott,"DetrModel"),Ott.forEach(t),x2o=r(uye," (DETR model)"),uye.forEach(t),$2o=i($),Du=n($,"LI",{});var pye=s(Du);qle=n(pye,"STRONG",{});var Vtt=s(qle);k2o=r(Vtt,"distilbert"),Vtt.forEach(t),S2o=r(pye," \u2014 "),yN=n(pye,"A",{href:!0});var Xtt=s(yN);R2o=r(Xtt,"DistilBertModel"),Xtt.forEach(t),P2o=r(pye," (DistilBERT model)"),pye.forEach(t),B2o=i($),Gu=n($,"LI",{});var _ye=s(Gu);jle=n(_ye,"STRONG",{});var ztt=s(jle);I2o=r(ztt,"dpr"),ztt.forEach(t),N2o=r(_ye," \u2014 "),xN=n(_ye,"A",{href:!0});var Wtt=s(xN);q2o=r(Wtt,"DPRQuestionEncoder"),Wtt.forEach(t),j2o=r(_ye," (DPR model)"),_ye.forEach(t),D2o=i($),Ou=n($,"LI",{});var bye=s(Ou);Dle=n(bye,"STRONG",{});var Qtt=s(Dle);G2o=r(Qtt,"dpt"),Qtt.forEach(t),O2o=r(bye," \u2014 "),$N=n(bye,"A",{href:!0});var Htt=s($N);V2o=r(Htt,"DPTModel"),Htt.forEach(t),X2o=r(bye," (DPT model)"),bye.forEach(t),z2o=i($),Vu=n($,"LI",{});var vye=s(Vu);Gle=n(vye,"STRONG",{});var Utt=s(Gle);W2o=r(Utt,"electra"),Utt.forEach(t),Q2o=r(vye," \u2014 "),kN=n(vye,"A",{href:!0});var Jtt=s(kN);H2o=r(Jtt,"ElectraModel"),Jtt.forEach(t),U2o=r(vye," (ELECTRA model)"),vye.forEach(t),J2o=i($),Xu=n($,"LI",{});var Fye=s(Xu);Ole=n(Fye,"STRONG",{});var Ytt=s(Ole);Y2o=r(Ytt,"flaubert"),Ytt.forEach(t),K2o=r(Fye," \u2014 "),SN=n(Fye,"A",{href:!0});var Ktt=s(SN);Z2o=r(Ktt,"FlaubertModel"),Ktt.forEach(t),evo=r(Fye," (FlauBERT model)"),Fye.forEach(t),ovo=i($),zu=n($,"LI",{});var Tye=s(zu);Vle=n(Tye,"STRONG",{});var Ztt=s(Vle);rvo=r(Ztt,"flava"),Ztt.forEach(t),tvo=r(Tye," \u2014 "),RN=n(Tye,"A",{href:!0});var eat=s(RN);avo=r(eat,"FlavaModel"),eat.forEach(t),nvo=r(Tye," (FLAVA model)"),Tye.forEach(t),svo=i($),Wu=n($,"LI",{});var Mye=s(Wu);Xle=n(Mye,"STRONG",{});var oat=s(Xle);lvo=r(oat,"fnet"),oat.forEach(t),ivo=r(Mye," \u2014 "),PN=n(Mye,"A",{href:!0});var rat=s(PN);dvo=r(rat,"FNetModel"),rat.forEach(t),cvo=r(Mye," (FNet model)"),Mye.forEach(t),mvo=i($),Qu=n($,"LI",{});var Eye=s(Qu);zle=n(Eye,"STRONG",{});var tat=s(zle);fvo=r(tat,"fsmt"),tat.forEach(t),gvo=r(Eye," \u2014 "),BN=n(Eye,"A",{href:!0});var aat=s(BN);hvo=r(aat,"FSMTModel"),aat.forEach(t),uvo=r(Eye," (FairSeq Machine-Translation model)"),Eye.forEach(t),pvo=i($),Ps=n($,"LI",{});var sk=s(Ps);Wle=n(sk,"STRONG",{});var nat=s(Wle);_vo=r(nat,"funnel"),nat.forEach(t),bvo=r(sk," \u2014 "),IN=n(sk,"A",{href:!0});var sat=s(IN);vvo=r(sat,"FunnelModel"),sat.forEach(t),Fvo=r(sk," or "),NN=n(sk,"A",{href:!0});var lat=s(NN);Tvo=r(lat,"FunnelBaseModel"),lat.forEach(t),Mvo=r(sk," (Funnel Transformer model)"),sk.forEach(t),Evo=i($),Hu=n($,"LI",{});var Cye=s(Hu);Qle=n(Cye,"STRONG",{});var iat=s(Qle);Cvo=r(iat,"glpn"),iat.forEach(t),wvo=r(Cye," \u2014 "),qN=n(Cye,"A",{href:!0});var dat=s(qN);Avo=r(dat,"GLPNModel"),dat.forEach(t),Lvo=r(Cye," (GLPN model)"),Cye.forEach(t),yvo=i($),Uu=n($,"LI",{});var wye=s(Uu);Hle=n(wye,"STRONG",{});var cat=s(Hle);xvo=r(cat,"gpt2"),cat.forEach(t),$vo=r(wye," \u2014 "),jN=n(wye,"A",{href:!0});var mat=s(jN);kvo=r(mat,"GPT2Model"),mat.forEach(t),Svo=r(wye," (OpenAI GPT-2 model)"),wye.forEach(t),Rvo=i($),Ju=n($,"LI",{});var Aye=s(Ju);Ule=n(Aye,"STRONG",{});var fat=s(Ule);Pvo=r(fat,"gpt_neo"),fat.forEach(t),Bvo=r(Aye," \u2014 "),DN=n(Aye,"A",{href:!0});var gat=s(DN);Ivo=r(gat,"GPTNeoModel"),gat.forEach(t),Nvo=r(Aye," (GPT Neo model)"),Aye.forEach(t),qvo=i($),Yu=n($,"LI",{});var Lye=s(Yu);Jle=n(Lye,"STRONG",{});var hat=s(Jle);jvo=r(hat,"gpt_neox"),hat.forEach(t),Dvo=r(Lye," \u2014 "),GN=n(Lye,"A",{href:!0});var uat=s(GN);Gvo=r(uat,"GPTNeoXModel"),uat.forEach(t),Ovo=r(Lye," (GPT NeoX model)"),Lye.forEach(t),Vvo=i($),Ku=n($,"LI",{});var yye=s(Ku);Yle=n(yye,"STRONG",{});var pat=s(Yle);Xvo=r(pat,"gptj"),pat.forEach(t),zvo=r(yye," \u2014 "),ON=n(yye,"A",{href:!0});var _at=s(ON);Wvo=r(_at,"GPTJModel"),_at.forEach(t),Qvo=r(yye," (GPT-J model)"),yye.forEach(t),Hvo=i($),Zu=n($,"LI",{});var xye=s(Zu);Kle=n(xye,"STRONG",{});var bat=s(Kle);Uvo=r(bat,"hubert"),bat.forEach(t),Jvo=r(xye," \u2014 "),VN=n(xye,"A",{href:!0});var vat=s(VN);Yvo=r(vat,"HubertModel"),vat.forEach(t),Kvo=r(xye," (Hubert model)"),xye.forEach(t),Zvo=i($),ep=n($,"LI",{});var $ye=s(ep);Zle=n($ye,"STRONG",{});var Fat=s(Zle);eFo=r(Fat,"ibert"),Fat.forEach(t),oFo=r($ye," \u2014 "),XN=n($ye,"A",{href:!0});var Tat=s(XN);rFo=r(Tat,"IBertModel"),Tat.forEach(t),tFo=r($ye," (I-BERT model)"),$ye.forEach(t),aFo=i($),op=n($,"LI",{});var kye=s(op);eie=n(kye,"STRONG",{});var Mat=s(eie);nFo=r(Mat,"imagegpt"),Mat.forEach(t),sFo=r(kye," \u2014 "),zN=n(kye,"A",{href:!0});var Eat=s(zN);lFo=r(Eat,"ImageGPTModel"),Eat.forEach(t),iFo=r(kye," (ImageGPT model)"),kye.forEach(t),dFo=i($),rp=n($,"LI",{});var Sye=s(rp);oie=n(Sye,"STRONG",{});var Cat=s(oie);cFo=r(Cat,"layoutlm"),Cat.forEach(t),mFo=r(Sye," \u2014 "),WN=n(Sye,"A",{href:!0});var wat=s(WN);fFo=r(wat,"LayoutLMModel"),wat.forEach(t),gFo=r(Sye," (LayoutLM model)"),Sye.forEach(t),hFo=i($),tp=n($,"LI",{});var Rye=s(tp);rie=n(Rye,"STRONG",{});var Aat=s(rie);uFo=r(Aat,"layoutlmv2"),Aat.forEach(t),pFo=r(Rye," \u2014 "),QN=n(Rye,"A",{href:!0});var Lat=s(QN);_Fo=r(Lat,"LayoutLMv2Model"),Lat.forEach(t),bFo=r(Rye," (LayoutLMv2 model)"),Rye.forEach(t),vFo=i($),ap=n($,"LI",{});var Pye=s(ap);tie=n(Pye,"STRONG",{});var yat=s(tie);FFo=r(yat,"layoutlmv3"),yat.forEach(t),TFo=r(Pye," \u2014 "),HN=n(Pye,"A",{href:!0});var xat=s(HN);MFo=r(xat,"LayoutLMv3Model"),xat.forEach(t),EFo=r(Pye," (LayoutLMv3 model)"),Pye.forEach(t),CFo=i($),np=n($,"LI",{});var Bye=s(np);aie=n(Bye,"STRONG",{});var $at=s(aie);wFo=r($at,"led"),$at.forEach(t),AFo=r(Bye," \u2014 "),UN=n(Bye,"A",{href:!0});var kat=s(UN);LFo=r(kat,"LEDModel"),kat.forEach(t),yFo=r(Bye," (LED model)"),Bye.forEach(t),xFo=i($),sp=n($,"LI",{});var Iye=s(sp);nie=n(Iye,"STRONG",{});var Sat=s(nie);$Fo=r(Sat,"levit"),Sat.forEach(t),kFo=r(Iye," \u2014 "),JN=n(Iye,"A",{href:!0});var Rat=s(JN);SFo=r(Rat,"LevitModel"),Rat.forEach(t),RFo=r(Iye," (LeViT model)"),Iye.forEach(t),PFo=i($),lp=n($,"LI",{});var Nye=s(lp);sie=n(Nye,"STRONG",{});var Pat=s(sie);BFo=r(Pat,"longformer"),Pat.forEach(t),IFo=r(Nye," \u2014 "),YN=n(Nye,"A",{href:!0});var Bat=s(YN);NFo=r(Bat,"LongformerModel"),Bat.forEach(t),qFo=r(Nye," (Longformer model)"),Nye.forEach(t),jFo=i($),ip=n($,"LI",{});var qye=s(ip);lie=n(qye,"STRONG",{});var Iat=s(lie);DFo=r(Iat,"luke"),Iat.forEach(t),GFo=r(qye," \u2014 "),KN=n(qye,"A",{href:!0});var Nat=s(KN);OFo=r(Nat,"LukeModel"),Nat.forEach(t),VFo=r(qye," (LUKE model)"),qye.forEach(t),XFo=i($),dp=n($,"LI",{});var jye=s(dp);iie=n(jye,"STRONG",{});var qat=s(iie);zFo=r(qat,"lxmert"),qat.forEach(t),WFo=r(jye," \u2014 "),ZN=n(jye,"A",{href:!0});var jat=s(ZN);QFo=r(jat,"LxmertModel"),jat.forEach(t),HFo=r(jye," (LXMERT model)"),jye.forEach(t),UFo=i($),cp=n($,"LI",{});var Dye=s(cp);die=n(Dye,"STRONG",{});var Dat=s(die);JFo=r(Dat,"m2m_100"),Dat.forEach(t),YFo=r(Dye," \u2014 "),eq=n(Dye,"A",{href:!0});var Gat=s(eq);KFo=r(Gat,"M2M100Model"),Gat.forEach(t),ZFo=r(Dye," (M2M100 model)"),Dye.forEach(t),e1o=i($),mp=n($,"LI",{});var Gye=s(mp);cie=n(Gye,"STRONG",{});var Oat=s(cie);o1o=r(Oat,"marian"),Oat.forEach(t),r1o=r(Gye," \u2014 "),oq=n(Gye,"A",{href:!0});var Vat=s(oq);t1o=r(Vat,"MarianModel"),Vat.forEach(t),a1o=r(Gye," (Marian model)"),Gye.forEach(t),n1o=i($),fp=n($,"LI",{});var Oye=s(fp);mie=n(Oye,"STRONG",{});var Xat=s(mie);s1o=r(Xat,"maskformer"),Xat.forEach(t),l1o=r(Oye," \u2014 "),rq=n(Oye,"A",{href:!0});var zat=s(rq);i1o=r(zat,"MaskFormerModel"),zat.forEach(t),d1o=r(Oye," (MaskFormer model)"),Oye.forEach(t),c1o=i($),gp=n($,"LI",{});var Vye=s(gp);fie=n(Vye,"STRONG",{});var Wat=s(fie);m1o=r(Wat,"mbart"),Wat.forEach(t),f1o=r(Vye," \u2014 "),tq=n(Vye,"A",{href:!0});var Qat=s(tq);g1o=r(Qat,"MBartModel"),Qat.forEach(t),h1o=r(Vye," (mBART model)"),Vye.forEach(t),u1o=i($),hp=n($,"LI",{});var Xye=s(hp);gie=n(Xye,"STRONG",{});var Hat=s(gie);p1o=r(Hat,"mctct"),Hat.forEach(t),_1o=r(Xye," \u2014 "),aq=n(Xye,"A",{href:!0});var Uat=s(aq);b1o=r(Uat,"MCTCTModel"),Uat.forEach(t),v1o=r(Xye," (M-CTC-T model)"),Xye.forEach(t),F1o=i($),up=n($,"LI",{});var zye=s(up);hie=n(zye,"STRONG",{});var Jat=s(hie);T1o=r(Jat,"megatron-bert"),Jat.forEach(t),M1o=r(zye," \u2014 "),nq=n(zye,"A",{href:!0});var Yat=s(nq);E1o=r(Yat,"MegatronBertModel"),Yat.forEach(t),C1o=r(zye," (Megatron-BERT model)"),zye.forEach(t),w1o=i($),pp=n($,"LI",{});var Wye=s(pp);uie=n(Wye,"STRONG",{});var Kat=s(uie);A1o=r(Kat,"mobilebert"),Kat.forEach(t),L1o=r(Wye," \u2014 "),sq=n(Wye,"A",{href:!0});var Zat=s(sq);y1o=r(Zat,"MobileBertModel"),Zat.forEach(t),x1o=r(Wye," (MobileBERT model)"),Wye.forEach(t),$1o=i($),_p=n($,"LI",{});var Qye=s(_p);pie=n(Qye,"STRONG",{});var ent=s(pie);k1o=r(ent,"mpnet"),ent.forEach(t),S1o=r(Qye," \u2014 "),lq=n(Qye,"A",{href:!0});var ont=s(lq);R1o=r(ont,"MPNetModel"),ont.forEach(t),P1o=r(Qye," (MPNet model)"),Qye.forEach(t),B1o=i($),bp=n($,"LI",{});var Hye=s(bp);_ie=n(Hye,"STRONG",{});var rnt=s(_ie);I1o=r(rnt,"mt5"),rnt.forEach(t),N1o=r(Hye," \u2014 "),iq=n(Hye,"A",{href:!0});var tnt=s(iq);q1o=r(tnt,"MT5Model"),tnt.forEach(t),j1o=r(Hye," (MT5 model)"),Hye.forEach(t),D1o=i($),vp=n($,"LI",{});var Uye=s(vp);bie=n(Uye,"STRONG",{});var ant=s(bie);G1o=r(ant,"nystromformer"),ant.forEach(t),O1o=r(Uye," \u2014 "),dq=n(Uye,"A",{href:!0});var nnt=s(dq);V1o=r(nnt,"NystromformerModel"),nnt.forEach(t),X1o=r(Uye," (Nystr\xF6mformer model)"),Uye.forEach(t),z1o=i($),Fp=n($,"LI",{});var Jye=s(Fp);vie=n(Jye,"STRONG",{});var snt=s(vie);W1o=r(snt,"openai-gpt"),snt.forEach(t),Q1o=r(Jye," \u2014 "),cq=n(Jye,"A",{href:!0});var lnt=s(cq);H1o=r(lnt,"OpenAIGPTModel"),lnt.forEach(t),U1o=r(Jye," (OpenAI GPT model)"),Jye.forEach(t),J1o=i($),Tp=n($,"LI",{});var Yye=s(Tp);Fie=n(Yye,"STRONG",{});var int=s(Fie);Y1o=r(int,"opt"),int.forEach(t),K1o=r(Yye," \u2014 "),mq=n(Yye,"A",{href:!0});var dnt=s(mq);Z1o=r(dnt,"OPTModel"),dnt.forEach(t),eTo=r(Yye," (OPT model)"),Yye.forEach(t),oTo=i($),Mp=n($,"LI",{});var Kye=s(Mp);Tie=n(Kye,"STRONG",{});var cnt=s(Tie);rTo=r(cnt,"pegasus"),cnt.forEach(t),tTo=r(Kye," \u2014 "),fq=n(Kye,"A",{href:!0});var mnt=s(fq);aTo=r(mnt,"PegasusModel"),mnt.forEach(t),nTo=r(Kye," (Pegasus model)"),Kye.forEach(t),sTo=i($),Ep=n($,"LI",{});var Zye=s(Ep);Mie=n(Zye,"STRONG",{});var fnt=s(Mie);lTo=r(fnt,"perceiver"),fnt.forEach(t),iTo=r(Zye," \u2014 "),gq=n(Zye,"A",{href:!0});var gnt=s(gq);dTo=r(gnt,"PerceiverModel"),gnt.forEach(t),cTo=r(Zye," (Perceiver model)"),Zye.forEach(t),mTo=i($),Cp=n($,"LI",{});var e7e=s(Cp);Eie=n(e7e,"STRONG",{});var hnt=s(Eie);fTo=r(hnt,"plbart"),hnt.forEach(t),gTo=r(e7e," \u2014 "),hq=n(e7e,"A",{href:!0});var unt=s(hq);hTo=r(unt,"PLBartModel"),unt.forEach(t),uTo=r(e7e," (PLBart model)"),e7e.forEach(t),pTo=i($),wp=n($,"LI",{});var o7e=s(wp);Cie=n(o7e,"STRONG",{});var pnt=s(Cie);_To=r(pnt,"poolformer"),pnt.forEach(t),bTo=r(o7e," \u2014 "),uq=n(o7e,"A",{href:!0});var _nt=s(uq);vTo=r(_nt,"PoolFormerModel"),_nt.forEach(t),FTo=r(o7e," (PoolFormer model)"),o7e.forEach(t),TTo=i($),Ap=n($,"LI",{});var r7e=s(Ap);wie=n(r7e,"STRONG",{});var bnt=s(wie);MTo=r(bnt,"prophetnet"),bnt.forEach(t),ETo=r(r7e," \u2014 "),pq=n(r7e,"A",{href:!0});var vnt=s(pq);CTo=r(vnt,"ProphetNetModel"),vnt.forEach(t),wTo=r(r7e," (ProphetNet model)"),r7e.forEach(t),ATo=i($),Lp=n($,"LI",{});var t7e=s(Lp);Aie=n(t7e,"STRONG",{});var Fnt=s(Aie);LTo=r(Fnt,"qdqbert"),Fnt.forEach(t),yTo=r(t7e," \u2014 "),_q=n(t7e,"A",{href:!0});var Tnt=s(_q);xTo=r(Tnt,"QDQBertModel"),Tnt.forEach(t),$To=r(t7e," (QDQBert model)"),t7e.forEach(t),kTo=i($),yp=n($,"LI",{});var a7e=s(yp);Lie=n(a7e,"STRONG",{});var Mnt=s(Lie);STo=r(Mnt,"reformer"),Mnt.forEach(t),RTo=r(a7e," \u2014 "),bq=n(a7e,"A",{href:!0});var Ent=s(bq);PTo=r(Ent,"ReformerModel"),Ent.forEach(t),BTo=r(a7e," (Reformer model)"),a7e.forEach(t),ITo=i($),xp=n($,"LI",{});var n7e=s(xp);yie=n(n7e,"STRONG",{});var Cnt=s(yie);NTo=r(Cnt,"regnet"),Cnt.forEach(t),qTo=r(n7e," \u2014 "),vq=n(n7e,"A",{href:!0});var wnt=s(vq);jTo=r(wnt,"RegNetModel"),wnt.forEach(t),DTo=r(n7e," (RegNet model)"),n7e.forEach(t),GTo=i($),$p=n($,"LI",{});var s7e=s($p);xie=n(s7e,"STRONG",{});var Ant=s(xie);OTo=r(Ant,"rembert"),Ant.forEach(t),VTo=r(s7e," \u2014 "),Fq=n(s7e,"A",{href:!0});var Lnt=s(Fq);XTo=r(Lnt,"RemBertModel"),Lnt.forEach(t),zTo=r(s7e," (RemBERT model)"),s7e.forEach(t),WTo=i($),kp=n($,"LI",{});var l7e=s(kp);$ie=n(l7e,"STRONG",{});var ynt=s($ie);QTo=r(ynt,"resnet"),ynt.forEach(t),HTo=r(l7e," \u2014 "),Tq=n(l7e,"A",{href:!0});var xnt=s(Tq);UTo=r(xnt,"ResNetModel"),xnt.forEach(t),JTo=r(l7e," (ResNet model)"),l7e.forEach(t),YTo=i($),Sp=n($,"LI",{});var i7e=s(Sp);kie=n(i7e,"STRONG",{});var $nt=s(kie);KTo=r($nt,"retribert"),$nt.forEach(t),ZTo=r(i7e," \u2014 "),Mq=n(i7e,"A",{href:!0});var knt=s(Mq);eMo=r(knt,"RetriBertModel"),knt.forEach(t),oMo=r(i7e," (RetriBERT model)"),i7e.forEach(t),rMo=i($),Rp=n($,"LI",{});var d7e=s(Rp);Sie=n(d7e,"STRONG",{});var Snt=s(Sie);tMo=r(Snt,"roberta"),Snt.forEach(t),aMo=r(d7e," \u2014 "),Eq=n(d7e,"A",{href:!0});var Rnt=s(Eq);nMo=r(Rnt,"RobertaModel"),Rnt.forEach(t),sMo=r(d7e," (RoBERTa model)"),d7e.forEach(t),lMo=i($),Pp=n($,"LI",{});var c7e=s(Pp);Rie=n(c7e,"STRONG",{});var Pnt=s(Rie);iMo=r(Pnt,"roformer"),Pnt.forEach(t),dMo=r(c7e," \u2014 "),Cq=n(c7e,"A",{href:!0});var Bnt=s(Cq);cMo=r(Bnt,"RoFormerModel"),Bnt.forEach(t),mMo=r(c7e," (RoFormer model)"),c7e.forEach(t),fMo=i($),Bp=n($,"LI",{});var m7e=s(Bp);Pie=n(m7e,"STRONG",{});var Int=s(Pie);gMo=r(Int,"segformer"),Int.forEach(t),hMo=r(m7e," \u2014 "),wq=n(m7e,"A",{href:!0});var Nnt=s(wq);uMo=r(Nnt,"SegformerModel"),Nnt.forEach(t),pMo=r(m7e," (SegFormer model)"),m7e.forEach(t),_Mo=i($),Ip=n($,"LI",{});var f7e=s(Ip);Bie=n(f7e,"STRONG",{});var qnt=s(Bie);bMo=r(qnt,"sew"),qnt.forEach(t),vMo=r(f7e," \u2014 "),Aq=n(f7e,"A",{href:!0});var jnt=s(Aq);FMo=r(jnt,"SEWModel"),jnt.forEach(t),TMo=r(f7e," (SEW model)"),f7e.forEach(t),MMo=i($),Np=n($,"LI",{});var g7e=s(Np);Iie=n(g7e,"STRONG",{});var Dnt=s(Iie);EMo=r(Dnt,"sew-d"),Dnt.forEach(t),CMo=r(g7e," \u2014 "),Lq=n(g7e,"A",{href:!0});var Gnt=s(Lq);wMo=r(Gnt,"SEWDModel"),Gnt.forEach(t),AMo=r(g7e," (SEW-D model)"),g7e.forEach(t),LMo=i($),qp=n($,"LI",{});var h7e=s(qp);Nie=n(h7e,"STRONG",{});var Ont=s(Nie);yMo=r(Ont,"speech_to_text"),Ont.forEach(t),xMo=r(h7e," \u2014 "),yq=n(h7e,"A",{href:!0});var Vnt=s(yq);$Mo=r(Vnt,"Speech2TextModel"),Vnt.forEach(t),kMo=r(h7e," (Speech2Text model)"),h7e.forEach(t),SMo=i($),jp=n($,"LI",{});var u7e=s(jp);qie=n(u7e,"STRONG",{});var Xnt=s(qie);RMo=r(Xnt,"splinter"),Xnt.forEach(t),PMo=r(u7e," \u2014 "),xq=n(u7e,"A",{href:!0});var znt=s(xq);BMo=r(znt,"SplinterModel"),znt.forEach(t),IMo=r(u7e," (Splinter model)"),u7e.forEach(t),NMo=i($),Dp=n($,"LI",{});var p7e=s(Dp);jie=n(p7e,"STRONG",{});var Wnt=s(jie);qMo=r(Wnt,"squeezebert"),Wnt.forEach(t),jMo=r(p7e," \u2014 "),$q=n(p7e,"A",{href:!0});var Qnt=s($q);DMo=r(Qnt,"SqueezeBertModel"),Qnt.forEach(t),GMo=r(p7e," (SqueezeBERT model)"),p7e.forEach(t),OMo=i($),Gp=n($,"LI",{});var _7e=s(Gp);Die=n(_7e,"STRONG",{});var Hnt=s(Die);VMo=r(Hnt,"swin"),Hnt.forEach(t),XMo=r(_7e," \u2014 "),kq=n(_7e,"A",{href:!0});var Unt=s(kq);zMo=r(Unt,"SwinModel"),Unt.forEach(t),WMo=r(_7e," (Swin Transformer model)"),_7e.forEach(t),QMo=i($),Op=n($,"LI",{});var b7e=s(Op);Gie=n(b7e,"STRONG",{});var Jnt=s(Gie);HMo=r(Jnt,"t5"),Jnt.forEach(t),UMo=r(b7e," \u2014 "),Sq=n(b7e,"A",{href:!0});var Ynt=s(Sq);JMo=r(Ynt,"T5Model"),Ynt.forEach(t),YMo=r(b7e," (T5 model)"),b7e.forEach(t),KMo=i($),Vp=n($,"LI",{});var v7e=s(Vp);Oie=n(v7e,"STRONG",{});var Knt=s(Oie);ZMo=r(Knt,"tapas"),Knt.forEach(t),e4o=r(v7e," \u2014 "),Rq=n(v7e,"A",{href:!0});var Znt=s(Rq);o4o=r(Znt,"TapasModel"),Znt.forEach(t),r4o=r(v7e," (TAPAS model)"),v7e.forEach(t),t4o=i($),Xp=n($,"LI",{});var F7e=s(Xp);Vie=n(F7e,"STRONG",{});var est=s(Vie);a4o=r(est,"trajectory_transformer"),est.forEach(t),n4o=r(F7e," \u2014 "),Pq=n(F7e,"A",{href:!0});var ost=s(Pq);s4o=r(ost,"TrajectoryTransformerModel"),ost.forEach(t),l4o=r(F7e," (Trajectory Transformer model)"),F7e.forEach(t),i4o=i($),zp=n($,"LI",{});var T7e=s(zp);Xie=n(T7e,"STRONG",{});var rst=s(Xie);d4o=r(rst,"transfo-xl"),rst.forEach(t),c4o=r(T7e," \u2014 "),Bq=n(T7e,"A",{href:!0});var tst=s(Bq);m4o=r(tst,"TransfoXLModel"),tst.forEach(t),f4o=r(T7e," (Transformer-XL model)"),T7e.forEach(t),g4o=i($),Wp=n($,"LI",{});var M7e=s(Wp);zie=n(M7e,"STRONG",{});var ast=s(zie);h4o=r(ast,"unispeech"),ast.forEach(t),u4o=r(M7e," \u2014 "),Iq=n(M7e,"A",{href:!0});var nst=s(Iq);p4o=r(nst,"UniSpeechModel"),nst.forEach(t),_4o=r(M7e," (UniSpeech model)"),M7e.forEach(t),b4o=i($),Qp=n($,"LI",{});var E7e=s(Qp);Wie=n(E7e,"STRONG",{});var sst=s(Wie);v4o=r(sst,"unispeech-sat"),sst.forEach(t),F4o=r(E7e," \u2014 "),Nq=n(E7e,"A",{href:!0});var lst=s(Nq);T4o=r(lst,"UniSpeechSatModel"),lst.forEach(t),M4o=r(E7e," (UniSpeechSat model)"),E7e.forEach(t),E4o=i($),Hp=n($,"LI",{});var C7e=s(Hp);Qie=n(C7e,"STRONG",{});var ist=s(Qie);C4o=r(ist,"van"),ist.forEach(t),w4o=r(C7e," \u2014 "),qq=n(C7e,"A",{href:!0});var dst=s(qq);A4o=r(dst,"VanModel"),dst.forEach(t),L4o=r(C7e," (VAN model)"),C7e.forEach(t),y4o=i($),Up=n($,"LI",{});var w7e=s(Up);Hie=n(w7e,"STRONG",{});var cst=s(Hie);x4o=r(cst,"vilt"),cst.forEach(t),$4o=r(w7e," \u2014 "),jq=n(w7e,"A",{href:!0});var mst=s(jq);k4o=r(mst,"ViltModel"),mst.forEach(t),S4o=r(w7e," (ViLT model)"),w7e.forEach(t),R4o=i($),Jp=n($,"LI",{});var A7e=s(Jp);Uie=n(A7e,"STRONG",{});var fst=s(Uie);P4o=r(fst,"vision-text-dual-encoder"),fst.forEach(t),B4o=r(A7e," \u2014 "),Dq=n(A7e,"A",{href:!0});var gst=s(Dq);I4o=r(gst,"VisionTextDualEncoderModel"),gst.forEach(t),N4o=r(A7e," (VisionTextDualEncoder model)"),A7e.forEach(t),q4o=i($),Yp=n($,"LI",{});var L7e=s(Yp);Jie=n(L7e,"STRONG",{});var hst=s(Jie);j4o=r(hst,"visual_bert"),hst.forEach(t),D4o=r(L7e," \u2014 "),Gq=n(L7e,"A",{href:!0});var ust=s(Gq);G4o=r(ust,"VisualBertModel"),ust.forEach(t),O4o=r(L7e," (VisualBERT model)"),L7e.forEach(t),V4o=i($),Kp=n($,"LI",{});var y7e=s(Kp);Yie=n(y7e,"STRONG",{});var pst=s(Yie);X4o=r(pst,"vit"),pst.forEach(t),z4o=r(y7e," \u2014 "),Oq=n(y7e,"A",{href:!0});var _st=s(Oq);W4o=r(_st,"ViTModel"),_st.forEach(t),Q4o=r(y7e," (ViT model)"),y7e.forEach(t),H4o=i($),Zp=n($,"LI",{});var x7e=s(Zp);Kie=n(x7e,"STRONG",{});var bst=s(Kie);U4o=r(bst,"vit_mae"),bst.forEach(t),J4o=r(x7e," \u2014 "),Vq=n(x7e,"A",{href:!0});var vst=s(Vq);Y4o=r(vst,"ViTMAEModel"),vst.forEach(t),K4o=r(x7e," (ViTMAE model)"),x7e.forEach(t),Z4o=i($),e_=n($,"LI",{});var $7e=s(e_);Zie=n($7e,"STRONG",{});var Fst=s(Zie);eEo=r(Fst,"wav2vec2"),Fst.forEach(t),oEo=r($7e," \u2014 "),Xq=n($7e,"A",{href:!0});var Tst=s(Xq);rEo=r(Tst,"Wav2Vec2Model"),Tst.forEach(t),tEo=r($7e," (Wav2Vec2 model)"),$7e.forEach(t),aEo=i($),o_=n($,"LI",{});var k7e=s(o_);ede=n(k7e,"STRONG",{});var Mst=s(ede);nEo=r(Mst,"wav2vec2-conformer"),Mst.forEach(t),sEo=r(k7e," \u2014 "),zq=n(k7e,"A",{href:!0});var Est=s(zq);lEo=r(Est,"Wav2Vec2ConformerModel"),Est.forEach(t),iEo=r(k7e," (Wav2Vec2-Conformer model)"),k7e.forEach(t),dEo=i($),r_=n($,"LI",{});var S7e=s(r_);ode=n(S7e,"STRONG",{});var Cst=s(ode);cEo=r(Cst,"wavlm"),Cst.forEach(t),mEo=r(S7e," \u2014 "),Wq=n(S7e,"A",{href:!0});var wst=s(Wq);fEo=r(wst,"WavLMModel"),wst.forEach(t),gEo=r(S7e," (WavLM model)"),S7e.forEach(t),hEo=i($),t_=n($,"LI",{});var R7e=s(t_);rde=n(R7e,"STRONG",{});var Ast=s(rde);uEo=r(Ast,"xglm"),Ast.forEach(t),pEo=r(R7e," \u2014 "),Qq=n(R7e,"A",{href:!0});var Lst=s(Qq);_Eo=r(Lst,"XGLMModel"),Lst.forEach(t),bEo=r(R7e," (XGLM model)"),R7e.forEach(t),vEo=i($),a_=n($,"LI",{});var P7e=s(a_);tde=n(P7e,"STRONG",{});var yst=s(tde);FEo=r(yst,"xlm"),yst.forEach(t),TEo=r(P7e," \u2014 "),Hq=n(P7e,"A",{href:!0});var xst=s(Hq);MEo=r(xst,"XLMModel"),xst.forEach(t),EEo=r(P7e," (XLM model)"),P7e.forEach(t),CEo=i($),n_=n($,"LI",{});var B7e=s(n_);ade=n(B7e,"STRONG",{});var $st=s(ade);wEo=r($st,"xlm-prophetnet"),$st.forEach(t),AEo=r(B7e," \u2014 "),Uq=n(B7e,"A",{href:!0});var kst=s(Uq);LEo=r(kst,"XLMProphetNetModel"),kst.forEach(t),yEo=r(B7e," (XLM-ProphetNet model)"),B7e.forEach(t),xEo=i($),s_=n($,"LI",{});var I7e=s(s_);nde=n(I7e,"STRONG",{});var Sst=s(nde);$Eo=r(Sst,"xlm-roberta"),Sst.forEach(t),kEo=r(I7e," \u2014 "),Jq=n(I7e,"A",{href:!0});var Rst=s(Jq);SEo=r(Rst,"XLMRobertaModel"),Rst.forEach(t),REo=r(I7e," (XLM-RoBERTa model)"),I7e.forEach(t),PEo=i($),l_=n($,"LI",{});var N7e=s(l_);sde=n(N7e,"STRONG",{});var Pst=s(sde);BEo=r(Pst,"xlm-roberta-xl"),Pst.forEach(t),IEo=r(N7e," \u2014 "),Yq=n(N7e,"A",{href:!0});var Bst=s(Yq);NEo=r(Bst,"XLMRobertaXLModel"),Bst.forEach(t),qEo=r(N7e," (XLM-RoBERTa-XL model)"),N7e.forEach(t),jEo=i($),i_=n($,"LI",{});var q7e=s(i_);lde=n(q7e,"STRONG",{});var Ist=s(lde);DEo=r(Ist,"xlnet"),Ist.forEach(t),GEo=r(q7e," \u2014 "),Kq=n(q7e,"A",{href:!0});var Nst=s(Kq);OEo=r(Nst,"XLNetModel"),Nst.forEach(t),VEo=r(q7e," (XLNet model)"),q7e.forEach(t),XEo=i($),d_=n($,"LI",{});var j7e=s(d_);ide=n(j7e,"STRONG",{});var qst=s(ide);zEo=r(qst,"yolos"),qst.forEach(t),WEo=r(j7e," \u2014 "),Zq=n(j7e,"A",{href:!0});var jst=s(Zq);QEo=r(jst,"YolosModel"),jst.forEach(t),HEo=r(j7e," (YOLOS model)"),j7e.forEach(t),UEo=i($),c_=n($,"LI",{});var D7e=s(c_);dde=n(D7e,"STRONG",{});var Dst=s(dde);JEo=r(Dst,"yoso"),Dst.forEach(t),YEo=r(D7e," \u2014 "),ej=n(D7e,"A",{href:!0});var Gst=s(ej);KEo=r(Gst,"YosoModel"),Gst.forEach(t),ZEo=r(D7e," (YOSO model)"),D7e.forEach(t),$.forEach(t),eCo=i(oa),m_=n(oa,"P",{});var G7e=s(m_);oCo=r(G7e,"The model is set in evaluation mode by default using "),cde=n(G7e,"CODE",{});var Ost=s(cde);rCo=r(Ost,"model.eval()"),Ost.forEach(t),tCo=r(G7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mde=n(G7e,"CODE",{});var Vst=s(mde);aCo=r(Vst,"model.train()"),Vst.forEach(t),G7e.forEach(t),nCo=i(oa),T(f_.$$.fragment,oa),oa.forEach(t),Os.forEach(t),Sje=i(m),xi=n(m,"H2",{class:!0});var IGe=s(xi);g_=n(IGe,"A",{id:!0,class:!0,href:!0});var Xst=s(g_);fde=n(Xst,"SPAN",{});var zst=s(fde);T(My.$$.fragment,zst),zst.forEach(t),Xst.forEach(t),sCo=i(IGe),gde=n(IGe,"SPAN",{});var Wst=s(gde);lCo=r(Wst,"AutoModelForPreTraining"),Wst.forEach(t),IGe.forEach(t),Rje=i(m),xo=n(m,"DIV",{class:!0});var Vs=s(xo);T(Ey.$$.fragment,Vs),iCo=i(Vs),$i=n(Vs,"P",{});var oee=s($i);dCo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oj=n(oee,"A",{href:!0});var Qst=s(oj);cCo=r(Qst,"from_pretrained()"),Qst.forEach(t),mCo=r(oee," class method or the "),rj=n(oee,"A",{href:!0});var Hst=s(rj);fCo=r(Hst,"from_config()"),Hst.forEach(t),gCo=r(oee,` class
method.`),oee.forEach(t),hCo=i(Vs),Cy=n(Vs,"P",{});var NGe=s(Cy);uCo=r(NGe,"This class cannot be instantiated directly using "),hde=n(NGe,"CODE",{});var Ust=s(hde);pCo=r(Ust,"__init__()"),Ust.forEach(t),_Co=r(NGe," (throws an error)."),NGe.forEach(t),bCo=i(Vs),at=n(Vs,"DIV",{class:!0});var YA=s(at);T(wy.$$.fragment,YA),vCo=i(YA),ude=n(YA,"P",{});var Jst=s(ude);FCo=r(Jst,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jst.forEach(t),TCo=i(YA),ki=n(YA,"P",{});var ree=s(ki);MCo=r(ree,`Note:
Loading a model from its configuration file does `),pde=n(ree,"STRONG",{});var Yst=s(pde);ECo=r(Yst,"not"),Yst.forEach(t),CCo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),tj=n(ree,"A",{href:!0});var Kst=s(tj);wCo=r(Kst,"from_pretrained()"),Kst.forEach(t),ACo=r(ree," to load the model weights."),ree.forEach(t),LCo=i(YA),T(h_.$$.fragment,YA),YA.forEach(t),yCo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(Ay.$$.fragment,ra),xCo=i(ra),_de=n(ra,"P",{});var Zst=s(_de);$Co=r(Zst,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zst.forEach(t),kCo=i(ra),xa=n(ra,"P",{});var KA=s(xa);SCo=r(KA,"The model class to instantiate is selected based on the "),bde=n(KA,"CODE",{});var elt=s(bde);RCo=r(elt,"model_type"),elt.forEach(t),PCo=r(KA,` property of the config object (either
passed as an argument or loaded from `),vde=n(KA,"CODE",{});var olt=s(vde);BCo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),ICo=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(KA,"CODE",{});var rlt=s(Fde);NCo=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),qCo=r(KA,":"),KA.forEach(t),jCo=i(ra),G=n(ra,"UL",{});var O=s(G);u_=n(O,"LI",{});var O7e=s(u_);Tde=n(O7e,"STRONG",{});var tlt=s(Tde);DCo=r(tlt,"albert"),tlt.forEach(t),GCo=r(O7e," \u2014 "),aj=n(O7e,"A",{href:!0});var alt=s(aj);OCo=r(alt,"AlbertForPreTraining"),alt.forEach(t),VCo=r(O7e," (ALBERT model)"),O7e.forEach(t),XCo=i(O),p_=n(O,"LI",{});var V7e=s(p_);Mde=n(V7e,"STRONG",{});var nlt=s(Mde);zCo=r(nlt,"bart"),nlt.forEach(t),WCo=r(V7e," \u2014 "),nj=n(V7e,"A",{href:!0});var slt=s(nj);QCo=r(slt,"BartForConditionalGeneration"),slt.forEach(t),HCo=r(V7e," (BART model)"),V7e.forEach(t),UCo=i(O),__=n(O,"LI",{});var X7e=s(__);Ede=n(X7e,"STRONG",{});var llt=s(Ede);JCo=r(llt,"bert"),llt.forEach(t),YCo=r(X7e," \u2014 "),sj=n(X7e,"A",{href:!0});var ilt=s(sj);KCo=r(ilt,"BertForPreTraining"),ilt.forEach(t),ZCo=r(X7e," (BERT model)"),X7e.forEach(t),e5o=i(O),b_=n(O,"LI",{});var z7e=s(b_);Cde=n(z7e,"STRONG",{});var dlt=s(Cde);o5o=r(dlt,"big_bird"),dlt.forEach(t),r5o=r(z7e," \u2014 "),lj=n(z7e,"A",{href:!0});var clt=s(lj);t5o=r(clt,"BigBirdForPreTraining"),clt.forEach(t),a5o=r(z7e," (BigBird model)"),z7e.forEach(t),n5o=i(O),v_=n(O,"LI",{});var W7e=s(v_);wde=n(W7e,"STRONG",{});var mlt=s(wde);s5o=r(mlt,"bloom"),mlt.forEach(t),l5o=r(W7e," \u2014 "),ij=n(W7e,"A",{href:!0});var flt=s(ij);i5o=r(flt,"BloomForCausalLM"),flt.forEach(t),d5o=r(W7e," (BLOOM model)"),W7e.forEach(t),c5o=i(O),F_=n(O,"LI",{});var Q7e=s(F_);Ade=n(Q7e,"STRONG",{});var glt=s(Ade);m5o=r(glt,"camembert"),glt.forEach(t),f5o=r(Q7e," \u2014 "),dj=n(Q7e,"A",{href:!0});var hlt=s(dj);g5o=r(hlt,"CamembertForMaskedLM"),hlt.forEach(t),h5o=r(Q7e," (CamemBERT model)"),Q7e.forEach(t),u5o=i(O),T_=n(O,"LI",{});var H7e=s(T_);Lde=n(H7e,"STRONG",{});var ult=s(Lde);p5o=r(ult,"ctrl"),ult.forEach(t),_5o=r(H7e," \u2014 "),cj=n(H7e,"A",{href:!0});var plt=s(cj);b5o=r(plt,"CTRLLMHeadModel"),plt.forEach(t),v5o=r(H7e," (CTRL model)"),H7e.forEach(t),F5o=i(O),M_=n(O,"LI",{});var U7e=s(M_);yde=n(U7e,"STRONG",{});var _lt=s(yde);T5o=r(_lt,"data2vec-text"),_lt.forEach(t),M5o=r(U7e," \u2014 "),mj=n(U7e,"A",{href:!0});var blt=s(mj);E5o=r(blt,"Data2VecTextForMaskedLM"),blt.forEach(t),C5o=r(U7e," (Data2VecText model)"),U7e.forEach(t),w5o=i(O),E_=n(O,"LI",{});var J7e=s(E_);xde=n(J7e,"STRONG",{});var vlt=s(xde);A5o=r(vlt,"deberta"),vlt.forEach(t),L5o=r(J7e," \u2014 "),fj=n(J7e,"A",{href:!0});var Flt=s(fj);y5o=r(Flt,"DebertaForMaskedLM"),Flt.forEach(t),x5o=r(J7e," (DeBERTa model)"),J7e.forEach(t),$5o=i(O),C_=n(O,"LI",{});var Y7e=s(C_);$de=n(Y7e,"STRONG",{});var Tlt=s($de);k5o=r(Tlt,"deberta-v2"),Tlt.forEach(t),S5o=r(Y7e," \u2014 "),gj=n(Y7e,"A",{href:!0});var Mlt=s(gj);R5o=r(Mlt,"DebertaV2ForMaskedLM"),Mlt.forEach(t),P5o=r(Y7e," (DeBERTa-v2 model)"),Y7e.forEach(t),B5o=i(O),w_=n(O,"LI",{});var K7e=s(w_);kde=n(K7e,"STRONG",{});var Elt=s(kde);I5o=r(Elt,"distilbert"),Elt.forEach(t),N5o=r(K7e," \u2014 "),hj=n(K7e,"A",{href:!0});var Clt=s(hj);q5o=r(Clt,"DistilBertForMaskedLM"),Clt.forEach(t),j5o=r(K7e," (DistilBERT model)"),K7e.forEach(t),D5o=i(O),A_=n(O,"LI",{});var Z7e=s(A_);Sde=n(Z7e,"STRONG",{});var wlt=s(Sde);G5o=r(wlt,"electra"),wlt.forEach(t),O5o=r(Z7e," \u2014 "),uj=n(Z7e,"A",{href:!0});var Alt=s(uj);V5o=r(Alt,"ElectraForPreTraining"),Alt.forEach(t),X5o=r(Z7e," (ELECTRA model)"),Z7e.forEach(t),z5o=i(O),L_=n(O,"LI",{});var e8e=s(L_);Rde=n(e8e,"STRONG",{});var Llt=s(Rde);W5o=r(Llt,"flaubert"),Llt.forEach(t),Q5o=r(e8e," \u2014 "),pj=n(e8e,"A",{href:!0});var ylt=s(pj);H5o=r(ylt,"FlaubertWithLMHeadModel"),ylt.forEach(t),U5o=r(e8e," (FlauBERT model)"),e8e.forEach(t),J5o=i(O),y_=n(O,"LI",{});var o8e=s(y_);Pde=n(o8e,"STRONG",{});var xlt=s(Pde);Y5o=r(xlt,"flava"),xlt.forEach(t),K5o=r(o8e," \u2014 "),_j=n(o8e,"A",{href:!0});var $lt=s(_j);Z5o=r($lt,"FlavaForPreTraining"),$lt.forEach(t),e3o=r(o8e," (FLAVA model)"),o8e.forEach(t),o3o=i(O),x_=n(O,"LI",{});var r8e=s(x_);Bde=n(r8e,"STRONG",{});var klt=s(Bde);r3o=r(klt,"fnet"),klt.forEach(t),t3o=r(r8e," \u2014 "),bj=n(r8e,"A",{href:!0});var Slt=s(bj);a3o=r(Slt,"FNetForPreTraining"),Slt.forEach(t),n3o=r(r8e," (FNet model)"),r8e.forEach(t),s3o=i(O),$_=n(O,"LI",{});var t8e=s($_);Ide=n(t8e,"STRONG",{});var Rlt=s(Ide);l3o=r(Rlt,"fsmt"),Rlt.forEach(t),i3o=r(t8e," \u2014 "),vj=n(t8e,"A",{href:!0});var Plt=s(vj);d3o=r(Plt,"FSMTForConditionalGeneration"),Plt.forEach(t),c3o=r(t8e," (FairSeq Machine-Translation model)"),t8e.forEach(t),m3o=i(O),k_=n(O,"LI",{});var a8e=s(k_);Nde=n(a8e,"STRONG",{});var Blt=s(Nde);f3o=r(Blt,"funnel"),Blt.forEach(t),g3o=r(a8e," \u2014 "),Fj=n(a8e,"A",{href:!0});var Ilt=s(Fj);h3o=r(Ilt,"FunnelForPreTraining"),Ilt.forEach(t),u3o=r(a8e," (Funnel Transformer model)"),a8e.forEach(t),p3o=i(O),S_=n(O,"LI",{});var n8e=s(S_);qde=n(n8e,"STRONG",{});var Nlt=s(qde);_3o=r(Nlt,"gpt2"),Nlt.forEach(t),b3o=r(n8e," \u2014 "),Tj=n(n8e,"A",{href:!0});var qlt=s(Tj);v3o=r(qlt,"GPT2LMHeadModel"),qlt.forEach(t),F3o=r(n8e," (OpenAI GPT-2 model)"),n8e.forEach(t),T3o=i(O),R_=n(O,"LI",{});var s8e=s(R_);jde=n(s8e,"STRONG",{});var jlt=s(jde);M3o=r(jlt,"ibert"),jlt.forEach(t),E3o=r(s8e," \u2014 "),Mj=n(s8e,"A",{href:!0});var Dlt=s(Mj);C3o=r(Dlt,"IBertForMaskedLM"),Dlt.forEach(t),w3o=r(s8e," (I-BERT model)"),s8e.forEach(t),A3o=i(O),P_=n(O,"LI",{});var l8e=s(P_);Dde=n(l8e,"STRONG",{});var Glt=s(Dde);L3o=r(Glt,"layoutlm"),Glt.forEach(t),y3o=r(l8e," \u2014 "),Ej=n(l8e,"A",{href:!0});var Olt=s(Ej);x3o=r(Olt,"LayoutLMForMaskedLM"),Olt.forEach(t),$3o=r(l8e," (LayoutLM model)"),l8e.forEach(t),k3o=i(O),B_=n(O,"LI",{});var i8e=s(B_);Gde=n(i8e,"STRONG",{});var Vlt=s(Gde);S3o=r(Vlt,"longformer"),Vlt.forEach(t),R3o=r(i8e," \u2014 "),Cj=n(i8e,"A",{href:!0});var Xlt=s(Cj);P3o=r(Xlt,"LongformerForMaskedLM"),Xlt.forEach(t),B3o=r(i8e," (Longformer model)"),i8e.forEach(t),I3o=i(O),I_=n(O,"LI",{});var d8e=s(I_);Ode=n(d8e,"STRONG",{});var zlt=s(Ode);N3o=r(zlt,"lxmert"),zlt.forEach(t),q3o=r(d8e," \u2014 "),wj=n(d8e,"A",{href:!0});var Wlt=s(wj);j3o=r(Wlt,"LxmertForPreTraining"),Wlt.forEach(t),D3o=r(d8e," (LXMERT model)"),d8e.forEach(t),G3o=i(O),N_=n(O,"LI",{});var c8e=s(N_);Vde=n(c8e,"STRONG",{});var Qlt=s(Vde);O3o=r(Qlt,"megatron-bert"),Qlt.forEach(t),V3o=r(c8e," \u2014 "),Aj=n(c8e,"A",{href:!0});var Hlt=s(Aj);X3o=r(Hlt,"MegatronBertForPreTraining"),Hlt.forEach(t),z3o=r(c8e," (Megatron-BERT model)"),c8e.forEach(t),W3o=i(O),q_=n(O,"LI",{});var m8e=s(q_);Xde=n(m8e,"STRONG",{});var Ult=s(Xde);Q3o=r(Ult,"mobilebert"),Ult.forEach(t),H3o=r(m8e," \u2014 "),Lj=n(m8e,"A",{href:!0});var Jlt=s(Lj);U3o=r(Jlt,"MobileBertForPreTraining"),Jlt.forEach(t),J3o=r(m8e," (MobileBERT model)"),m8e.forEach(t),Y3o=i(O),j_=n(O,"LI",{});var f8e=s(j_);zde=n(f8e,"STRONG",{});var Ylt=s(zde);K3o=r(Ylt,"mpnet"),Ylt.forEach(t),Z3o=r(f8e," \u2014 "),yj=n(f8e,"A",{href:!0});var Klt=s(yj);e0o=r(Klt,"MPNetForMaskedLM"),Klt.forEach(t),o0o=r(f8e," (MPNet model)"),f8e.forEach(t),r0o=i(O),D_=n(O,"LI",{});var g8e=s(D_);Wde=n(g8e,"STRONG",{});var Zlt=s(Wde);t0o=r(Zlt,"openai-gpt"),Zlt.forEach(t),a0o=r(g8e," \u2014 "),xj=n(g8e,"A",{href:!0});var eit=s(xj);n0o=r(eit,"OpenAIGPTLMHeadModel"),eit.forEach(t),s0o=r(g8e," (OpenAI GPT model)"),g8e.forEach(t),l0o=i(O),G_=n(O,"LI",{});var h8e=s(G_);Qde=n(h8e,"STRONG",{});var oit=s(Qde);i0o=r(oit,"retribert"),oit.forEach(t),d0o=r(h8e," \u2014 "),$j=n(h8e,"A",{href:!0});var rit=s($j);c0o=r(rit,"RetriBertModel"),rit.forEach(t),m0o=r(h8e," (RetriBERT model)"),h8e.forEach(t),f0o=i(O),O_=n(O,"LI",{});var u8e=s(O_);Hde=n(u8e,"STRONG",{});var tit=s(Hde);g0o=r(tit,"roberta"),tit.forEach(t),h0o=r(u8e," \u2014 "),kj=n(u8e,"A",{href:!0});var ait=s(kj);u0o=r(ait,"RobertaForMaskedLM"),ait.forEach(t),p0o=r(u8e," (RoBERTa model)"),u8e.forEach(t),_0o=i(O),V_=n(O,"LI",{});var p8e=s(V_);Ude=n(p8e,"STRONG",{});var nit=s(Ude);b0o=r(nit,"splinter"),nit.forEach(t),v0o=r(p8e," \u2014 "),Sj=n(p8e,"A",{href:!0});var sit=s(Sj);F0o=r(sit,"SplinterForPreTraining"),sit.forEach(t),T0o=r(p8e," (Splinter model)"),p8e.forEach(t),M0o=i(O),X_=n(O,"LI",{});var _8e=s(X_);Jde=n(_8e,"STRONG",{});var lit=s(Jde);E0o=r(lit,"squeezebert"),lit.forEach(t),C0o=r(_8e," \u2014 "),Rj=n(_8e,"A",{href:!0});var iit=s(Rj);w0o=r(iit,"SqueezeBertForMaskedLM"),iit.forEach(t),A0o=r(_8e," (SqueezeBERT model)"),_8e.forEach(t),L0o=i(O),z_=n(O,"LI",{});var b8e=s(z_);Yde=n(b8e,"STRONG",{});var dit=s(Yde);y0o=r(dit,"t5"),dit.forEach(t),x0o=r(b8e," \u2014 "),Pj=n(b8e,"A",{href:!0});var cit=s(Pj);$0o=r(cit,"T5ForConditionalGeneration"),cit.forEach(t),k0o=r(b8e," (T5 model)"),b8e.forEach(t),S0o=i(O),W_=n(O,"LI",{});var v8e=s(W_);Kde=n(v8e,"STRONG",{});var mit=s(Kde);R0o=r(mit,"tapas"),mit.forEach(t),P0o=r(v8e," \u2014 "),Bj=n(v8e,"A",{href:!0});var fit=s(Bj);B0o=r(fit,"TapasForMaskedLM"),fit.forEach(t),I0o=r(v8e," (TAPAS model)"),v8e.forEach(t),N0o=i(O),Q_=n(O,"LI",{});var F8e=s(Q_);Zde=n(F8e,"STRONG",{});var git=s(Zde);q0o=r(git,"transfo-xl"),git.forEach(t),j0o=r(F8e," \u2014 "),Ij=n(F8e,"A",{href:!0});var hit=s(Ij);D0o=r(hit,"TransfoXLLMHeadModel"),hit.forEach(t),G0o=r(F8e," (Transformer-XL model)"),F8e.forEach(t),O0o=i(O),H_=n(O,"LI",{});var T8e=s(H_);ece=n(T8e,"STRONG",{});var uit=s(ece);V0o=r(uit,"unispeech"),uit.forEach(t),X0o=r(T8e," \u2014 "),Nj=n(T8e,"A",{href:!0});var pit=s(Nj);z0o=r(pit,"UniSpeechForPreTraining"),pit.forEach(t),W0o=r(T8e," (UniSpeech model)"),T8e.forEach(t),Q0o=i(O),U_=n(O,"LI",{});var M8e=s(U_);oce=n(M8e,"STRONG",{});var _it=s(oce);H0o=r(_it,"unispeech-sat"),_it.forEach(t),U0o=r(M8e," \u2014 "),qj=n(M8e,"A",{href:!0});var bit=s(qj);J0o=r(bit,"UniSpeechSatForPreTraining"),bit.forEach(t),Y0o=r(M8e," (UniSpeechSat model)"),M8e.forEach(t),K0o=i(O),J_=n(O,"LI",{});var E8e=s(J_);rce=n(E8e,"STRONG",{});var vit=s(rce);Z0o=r(vit,"visual_bert"),vit.forEach(t),ewo=r(E8e," \u2014 "),jj=n(E8e,"A",{href:!0});var Fit=s(jj);owo=r(Fit,"VisualBertForPreTraining"),Fit.forEach(t),rwo=r(E8e," (VisualBERT model)"),E8e.forEach(t),two=i(O),Y_=n(O,"LI",{});var C8e=s(Y_);tce=n(C8e,"STRONG",{});var Tit=s(tce);awo=r(Tit,"vit_mae"),Tit.forEach(t),nwo=r(C8e," \u2014 "),Dj=n(C8e,"A",{href:!0});var Mit=s(Dj);swo=r(Mit,"ViTMAEForPreTraining"),Mit.forEach(t),lwo=r(C8e," (ViTMAE model)"),C8e.forEach(t),iwo=i(O),K_=n(O,"LI",{});var w8e=s(K_);ace=n(w8e,"STRONG",{});var Eit=s(ace);dwo=r(Eit,"wav2vec2"),Eit.forEach(t),cwo=r(w8e," \u2014 "),Gj=n(w8e,"A",{href:!0});var Cit=s(Gj);mwo=r(Cit,"Wav2Vec2ForPreTraining"),Cit.forEach(t),fwo=r(w8e," (Wav2Vec2 model)"),w8e.forEach(t),gwo=i(O),Z_=n(O,"LI",{});var A8e=s(Z_);nce=n(A8e,"STRONG",{});var wit=s(nce);hwo=r(wit,"wav2vec2-conformer"),wit.forEach(t),uwo=r(A8e," \u2014 "),Oj=n(A8e,"A",{href:!0});var Ait=s(Oj);pwo=r(Ait,"Wav2Vec2ConformerForPreTraining"),Ait.forEach(t),_wo=r(A8e," (Wav2Vec2-Conformer model)"),A8e.forEach(t),bwo=i(O),eb=n(O,"LI",{});var L8e=s(eb);sce=n(L8e,"STRONG",{});var Lit=s(sce);vwo=r(Lit,"xlm"),Lit.forEach(t),Fwo=r(L8e," \u2014 "),Vj=n(L8e,"A",{href:!0});var yit=s(Vj);Two=r(yit,"XLMWithLMHeadModel"),yit.forEach(t),Mwo=r(L8e," (XLM model)"),L8e.forEach(t),Ewo=i(O),ob=n(O,"LI",{});var y8e=s(ob);lce=n(y8e,"STRONG",{});var xit=s(lce);Cwo=r(xit,"xlm-roberta"),xit.forEach(t),wwo=r(y8e," \u2014 "),Xj=n(y8e,"A",{href:!0});var $it=s(Xj);Awo=r($it,"XLMRobertaForMaskedLM"),$it.forEach(t),Lwo=r(y8e," (XLM-RoBERTa model)"),y8e.forEach(t),ywo=i(O),rb=n(O,"LI",{});var x8e=s(rb);ice=n(x8e,"STRONG",{});var kit=s(ice);xwo=r(kit,"xlm-roberta-xl"),kit.forEach(t),$wo=r(x8e," \u2014 "),zj=n(x8e,"A",{href:!0});var Sit=s(zj);kwo=r(Sit,"XLMRobertaXLForMaskedLM"),Sit.forEach(t),Swo=r(x8e," (XLM-RoBERTa-XL model)"),x8e.forEach(t),Rwo=i(O),tb=n(O,"LI",{});var $8e=s(tb);dce=n($8e,"STRONG",{});var Rit=s(dce);Pwo=r(Rit,"xlnet"),Rit.forEach(t),Bwo=r($8e," \u2014 "),Wj=n($8e,"A",{href:!0});var Pit=s(Wj);Iwo=r(Pit,"XLNetLMHeadModel"),Pit.forEach(t),Nwo=r($8e," (XLNet model)"),$8e.forEach(t),O.forEach(t),qwo=i(ra),ab=n(ra,"P",{});var k8e=s(ab);jwo=r(k8e,"The model is set in evaluation mode by default using "),cce=n(k8e,"CODE",{});var Bit=s(cce);Dwo=r(Bit,"model.eval()"),Bit.forEach(t),Gwo=r(k8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mce=n(k8e,"CODE",{});var Iit=s(mce);Owo=r(Iit,"model.train()"),Iit.forEach(t),k8e.forEach(t),Vwo=i(ra),T(nb.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),Pje=i(m),Si=n(m,"H2",{class:!0});var qGe=s(Si);sb=n(qGe,"A",{id:!0,class:!0,href:!0});var Nit=s(sb);fce=n(Nit,"SPAN",{});var qit=s(fce);T(Ly.$$.fragment,qit),qit.forEach(t),Nit.forEach(t),Xwo=i(qGe),gce=n(qGe,"SPAN",{});var jit=s(gce);zwo=r(jit,"AutoModelForCausalLM"),jit.forEach(t),qGe.forEach(t),Bje=i(m),$o=n(m,"DIV",{class:!0});var Xs=s($o);T(yy.$$.fragment,Xs),Wwo=i(Xs),Ri=n(Xs,"P",{});var tee=s(Ri);Qwo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Qj=n(tee,"A",{href:!0});var Dit=s(Qj);Hwo=r(Dit,"from_pretrained()"),Dit.forEach(t),Uwo=r(tee," class method or the "),Hj=n(tee,"A",{href:!0});var Git=s(Hj);Jwo=r(Git,"from_config()"),Git.forEach(t),Ywo=r(tee,` class
method.`),tee.forEach(t),Kwo=i(Xs),xy=n(Xs,"P",{});var jGe=s(xy);Zwo=r(jGe,"This class cannot be instantiated directly using "),hce=n(jGe,"CODE",{});var Oit=s(hce);eAo=r(Oit,"__init__()"),Oit.forEach(t),oAo=r(jGe," (throws an error)."),jGe.forEach(t),rAo=i(Xs),nt=n(Xs,"DIV",{class:!0});var ZA=s(nt);T($y.$$.fragment,ZA),tAo=i(ZA),uce=n(ZA,"P",{});var Vit=s(uce);aAo=r(Vit,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vit.forEach(t),nAo=i(ZA),Pi=n(ZA,"P",{});var aee=s(Pi);sAo=r(aee,`Note:
Loading a model from its configuration file does `),pce=n(aee,"STRONG",{});var Xit=s(pce);lAo=r(Xit,"not"),Xit.forEach(t),iAo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=n(aee,"A",{href:!0});var zit=s(Uj);dAo=r(zit,"from_pretrained()"),zit.forEach(t),cAo=r(aee," to load the model weights."),aee.forEach(t),mAo=i(ZA),T(lb.$$.fragment,ZA),ZA.forEach(t),fAo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(ky.$$.fragment,ta),gAo=i(ta),_ce=n(ta,"P",{});var Wit=s(_ce);hAo=r(Wit,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wit.forEach(t),uAo=i(ta),$a=n(ta,"P",{});var e6=s($a);pAo=r(e6,"The model class to instantiate is selected based on the "),bce=n(e6,"CODE",{});var Qit=s(bce);_Ao=r(Qit,"model_type"),Qit.forEach(t),bAo=r(e6,` property of the config object (either
passed as an argument or loaded from `),vce=n(e6,"CODE",{});var Hit=s(vce);vAo=r(Hit,"pretrained_model_name_or_path"),Hit.forEach(t),FAo=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fce=n(e6,"CODE",{});var Uit=s(Fce);TAo=r(Uit,"pretrained_model_name_or_path"),Uit.forEach(t),MAo=r(e6,":"),e6.forEach(t),EAo=i(ta),z=n(ta,"UL",{});var W=s(z);ib=n(W,"LI",{});var S8e=s(ib);Tce=n(S8e,"STRONG",{});var Jit=s(Tce);CAo=r(Jit,"bart"),Jit.forEach(t),wAo=r(S8e," \u2014 "),Jj=n(S8e,"A",{href:!0});var Yit=s(Jj);AAo=r(Yit,"BartForCausalLM"),Yit.forEach(t),LAo=r(S8e," (BART model)"),S8e.forEach(t),yAo=i(W),db=n(W,"LI",{});var R8e=s(db);Mce=n(R8e,"STRONG",{});var Kit=s(Mce);xAo=r(Kit,"bert"),Kit.forEach(t),$Ao=r(R8e," \u2014 "),Yj=n(R8e,"A",{href:!0});var Zit=s(Yj);kAo=r(Zit,"BertLMHeadModel"),Zit.forEach(t),SAo=r(R8e," (BERT model)"),R8e.forEach(t),RAo=i(W),cb=n(W,"LI",{});var P8e=s(cb);Ece=n(P8e,"STRONG",{});var edt=s(Ece);PAo=r(edt,"bert-generation"),edt.forEach(t),BAo=r(P8e," \u2014 "),Kj=n(P8e,"A",{href:!0});var odt=s(Kj);IAo=r(odt,"BertGenerationDecoder"),odt.forEach(t),NAo=r(P8e," (Bert Generation model)"),P8e.forEach(t),qAo=i(W),mb=n(W,"LI",{});var B8e=s(mb);Cce=n(B8e,"STRONG",{});var rdt=s(Cce);jAo=r(rdt,"big_bird"),rdt.forEach(t),DAo=r(B8e," \u2014 "),Zj=n(B8e,"A",{href:!0});var tdt=s(Zj);GAo=r(tdt,"BigBirdForCausalLM"),tdt.forEach(t),OAo=r(B8e," (BigBird model)"),B8e.forEach(t),VAo=i(W),fb=n(W,"LI",{});var I8e=s(fb);wce=n(I8e,"STRONG",{});var adt=s(wce);XAo=r(adt,"bigbird_pegasus"),adt.forEach(t),zAo=r(I8e," \u2014 "),eD=n(I8e,"A",{href:!0});var ndt=s(eD);WAo=r(ndt,"BigBirdPegasusForCausalLM"),ndt.forEach(t),QAo=r(I8e," (BigBird-Pegasus model)"),I8e.forEach(t),HAo=i(W),gb=n(W,"LI",{});var N8e=s(gb);Ace=n(N8e,"STRONG",{});var sdt=s(Ace);UAo=r(sdt,"blenderbot"),sdt.forEach(t),JAo=r(N8e," \u2014 "),oD=n(N8e,"A",{href:!0});var ldt=s(oD);YAo=r(ldt,"BlenderbotForCausalLM"),ldt.forEach(t),KAo=r(N8e," (Blenderbot model)"),N8e.forEach(t),ZAo=i(W),hb=n(W,"LI",{});var q8e=s(hb);Lce=n(q8e,"STRONG",{});var idt=s(Lce);e6o=r(idt,"blenderbot-small"),idt.forEach(t),o6o=r(q8e," \u2014 "),rD=n(q8e,"A",{href:!0});var ddt=s(rD);r6o=r(ddt,"BlenderbotSmallForCausalLM"),ddt.forEach(t),t6o=r(q8e," (BlenderbotSmall model)"),q8e.forEach(t),a6o=i(W),ub=n(W,"LI",{});var j8e=s(ub);yce=n(j8e,"STRONG",{});var cdt=s(yce);n6o=r(cdt,"bloom"),cdt.forEach(t),s6o=r(j8e," \u2014 "),tD=n(j8e,"A",{href:!0});var mdt=s(tD);l6o=r(mdt,"BloomForCausalLM"),mdt.forEach(t),i6o=r(j8e," (BLOOM model)"),j8e.forEach(t),d6o=i(W),pb=n(W,"LI",{});var D8e=s(pb);xce=n(D8e,"STRONG",{});var fdt=s(xce);c6o=r(fdt,"camembert"),fdt.forEach(t),m6o=r(D8e," \u2014 "),aD=n(D8e,"A",{href:!0});var gdt=s(aD);f6o=r(gdt,"CamembertForCausalLM"),gdt.forEach(t),g6o=r(D8e," (CamemBERT model)"),D8e.forEach(t),h6o=i(W),_b=n(W,"LI",{});var G8e=s(_b);$ce=n(G8e,"STRONG",{});var hdt=s($ce);u6o=r(hdt,"ctrl"),hdt.forEach(t),p6o=r(G8e," \u2014 "),nD=n(G8e,"A",{href:!0});var udt=s(nD);_6o=r(udt,"CTRLLMHeadModel"),udt.forEach(t),b6o=r(G8e," (CTRL model)"),G8e.forEach(t),v6o=i(W),bb=n(W,"LI",{});var O8e=s(bb);kce=n(O8e,"STRONG",{});var pdt=s(kce);F6o=r(pdt,"data2vec-text"),pdt.forEach(t),T6o=r(O8e," \u2014 "),sD=n(O8e,"A",{href:!0});var _dt=s(sD);M6o=r(_dt,"Data2VecTextForCausalLM"),_dt.forEach(t),E6o=r(O8e," (Data2VecText model)"),O8e.forEach(t),C6o=i(W),vb=n(W,"LI",{});var V8e=s(vb);Sce=n(V8e,"STRONG",{});var bdt=s(Sce);w6o=r(bdt,"electra"),bdt.forEach(t),A6o=r(V8e," \u2014 "),lD=n(V8e,"A",{href:!0});var vdt=s(lD);L6o=r(vdt,"ElectraForCausalLM"),vdt.forEach(t),y6o=r(V8e," (ELECTRA model)"),V8e.forEach(t),x6o=i(W),Fb=n(W,"LI",{});var X8e=s(Fb);Rce=n(X8e,"STRONG",{});var Fdt=s(Rce);$6o=r(Fdt,"gpt2"),Fdt.forEach(t),k6o=r(X8e," \u2014 "),iD=n(X8e,"A",{href:!0});var Tdt=s(iD);S6o=r(Tdt,"GPT2LMHeadModel"),Tdt.forEach(t),R6o=r(X8e," (OpenAI GPT-2 model)"),X8e.forEach(t),P6o=i(W),Tb=n(W,"LI",{});var z8e=s(Tb);Pce=n(z8e,"STRONG",{});var Mdt=s(Pce);B6o=r(Mdt,"gpt_neo"),Mdt.forEach(t),I6o=r(z8e," \u2014 "),dD=n(z8e,"A",{href:!0});var Edt=s(dD);N6o=r(Edt,"GPTNeoForCausalLM"),Edt.forEach(t),q6o=r(z8e," (GPT Neo model)"),z8e.forEach(t),j6o=i(W),Mb=n(W,"LI",{});var W8e=s(Mb);Bce=n(W8e,"STRONG",{});var Cdt=s(Bce);D6o=r(Cdt,"gpt_neox"),Cdt.forEach(t),G6o=r(W8e," \u2014 "),cD=n(W8e,"A",{href:!0});var wdt=s(cD);O6o=r(wdt,"GPTNeoXForCausalLM"),wdt.forEach(t),V6o=r(W8e," (GPT NeoX model)"),W8e.forEach(t),X6o=i(W),Eb=n(W,"LI",{});var Q8e=s(Eb);Ice=n(Q8e,"STRONG",{});var Adt=s(Ice);z6o=r(Adt,"gptj"),Adt.forEach(t),W6o=r(Q8e," \u2014 "),mD=n(Q8e,"A",{href:!0});var Ldt=s(mD);Q6o=r(Ldt,"GPTJForCausalLM"),Ldt.forEach(t),H6o=r(Q8e," (GPT-J model)"),Q8e.forEach(t),U6o=i(W),Cb=n(W,"LI",{});var H8e=s(Cb);Nce=n(H8e,"STRONG",{});var ydt=s(Nce);J6o=r(ydt,"marian"),ydt.forEach(t),Y6o=r(H8e," \u2014 "),fD=n(H8e,"A",{href:!0});var xdt=s(fD);K6o=r(xdt,"MarianForCausalLM"),xdt.forEach(t),Z6o=r(H8e," (Marian model)"),H8e.forEach(t),eLo=i(W),wb=n(W,"LI",{});var U8e=s(wb);qce=n(U8e,"STRONG",{});var $dt=s(qce);oLo=r($dt,"mbart"),$dt.forEach(t),rLo=r(U8e," \u2014 "),gD=n(U8e,"A",{href:!0});var kdt=s(gD);tLo=r(kdt,"MBartForCausalLM"),kdt.forEach(t),aLo=r(U8e," (mBART model)"),U8e.forEach(t),nLo=i(W),Ab=n(W,"LI",{});var J8e=s(Ab);jce=n(J8e,"STRONG",{});var Sdt=s(jce);sLo=r(Sdt,"megatron-bert"),Sdt.forEach(t),lLo=r(J8e," \u2014 "),hD=n(J8e,"A",{href:!0});var Rdt=s(hD);iLo=r(Rdt,"MegatronBertForCausalLM"),Rdt.forEach(t),dLo=r(J8e," (Megatron-BERT model)"),J8e.forEach(t),cLo=i(W),Lb=n(W,"LI",{});var Y8e=s(Lb);Dce=n(Y8e,"STRONG",{});var Pdt=s(Dce);mLo=r(Pdt,"openai-gpt"),Pdt.forEach(t),fLo=r(Y8e," \u2014 "),uD=n(Y8e,"A",{href:!0});var Bdt=s(uD);gLo=r(Bdt,"OpenAIGPTLMHeadModel"),Bdt.forEach(t),hLo=r(Y8e," (OpenAI GPT model)"),Y8e.forEach(t),uLo=i(W),yb=n(W,"LI",{});var K8e=s(yb);Gce=n(K8e,"STRONG",{});var Idt=s(Gce);pLo=r(Idt,"opt"),Idt.forEach(t),_Lo=r(K8e," \u2014 "),pD=n(K8e,"A",{href:!0});var Ndt=s(pD);bLo=r(Ndt,"OPTForCausalLM"),Ndt.forEach(t),vLo=r(K8e," (OPT model)"),K8e.forEach(t),FLo=i(W),xb=n(W,"LI",{});var Z8e=s(xb);Oce=n(Z8e,"STRONG",{});var qdt=s(Oce);TLo=r(qdt,"pegasus"),qdt.forEach(t),MLo=r(Z8e," \u2014 "),_D=n(Z8e,"A",{href:!0});var jdt=s(_D);ELo=r(jdt,"PegasusForCausalLM"),jdt.forEach(t),CLo=r(Z8e," (Pegasus model)"),Z8e.forEach(t),wLo=i(W),$b=n(W,"LI",{});var e9e=s($b);Vce=n(e9e,"STRONG",{});var Ddt=s(Vce);ALo=r(Ddt,"plbart"),Ddt.forEach(t),LLo=r(e9e," \u2014 "),bD=n(e9e,"A",{href:!0});var Gdt=s(bD);yLo=r(Gdt,"PLBartForCausalLM"),Gdt.forEach(t),xLo=r(e9e," (PLBart model)"),e9e.forEach(t),$Lo=i(W),kb=n(W,"LI",{});var o9e=s(kb);Xce=n(o9e,"STRONG",{});var Odt=s(Xce);kLo=r(Odt,"prophetnet"),Odt.forEach(t),SLo=r(o9e," \u2014 "),vD=n(o9e,"A",{href:!0});var Vdt=s(vD);RLo=r(Vdt,"ProphetNetForCausalLM"),Vdt.forEach(t),PLo=r(o9e," (ProphetNet model)"),o9e.forEach(t),BLo=i(W),Sb=n(W,"LI",{});var r9e=s(Sb);zce=n(r9e,"STRONG",{});var Xdt=s(zce);ILo=r(Xdt,"qdqbert"),Xdt.forEach(t),NLo=r(r9e," \u2014 "),FD=n(r9e,"A",{href:!0});var zdt=s(FD);qLo=r(zdt,"QDQBertLMHeadModel"),zdt.forEach(t),jLo=r(r9e," (QDQBert model)"),r9e.forEach(t),DLo=i(W),Rb=n(W,"LI",{});var t9e=s(Rb);Wce=n(t9e,"STRONG",{});var Wdt=s(Wce);GLo=r(Wdt,"reformer"),Wdt.forEach(t),OLo=r(t9e," \u2014 "),TD=n(t9e,"A",{href:!0});var Qdt=s(TD);VLo=r(Qdt,"ReformerModelWithLMHead"),Qdt.forEach(t),XLo=r(t9e," (Reformer model)"),t9e.forEach(t),zLo=i(W),Pb=n(W,"LI",{});var a9e=s(Pb);Qce=n(a9e,"STRONG",{});var Hdt=s(Qce);WLo=r(Hdt,"rembert"),Hdt.forEach(t),QLo=r(a9e," \u2014 "),MD=n(a9e,"A",{href:!0});var Udt=s(MD);HLo=r(Udt,"RemBertForCausalLM"),Udt.forEach(t),ULo=r(a9e," (RemBERT model)"),a9e.forEach(t),JLo=i(W),Bb=n(W,"LI",{});var n9e=s(Bb);Hce=n(n9e,"STRONG",{});var Jdt=s(Hce);YLo=r(Jdt,"roberta"),Jdt.forEach(t),KLo=r(n9e," \u2014 "),ED=n(n9e,"A",{href:!0});var Ydt=s(ED);ZLo=r(Ydt,"RobertaForCausalLM"),Ydt.forEach(t),eyo=r(n9e," (RoBERTa model)"),n9e.forEach(t),oyo=i(W),Ib=n(W,"LI",{});var s9e=s(Ib);Uce=n(s9e,"STRONG",{});var Kdt=s(Uce);ryo=r(Kdt,"roformer"),Kdt.forEach(t),tyo=r(s9e," \u2014 "),CD=n(s9e,"A",{href:!0});var Zdt=s(CD);ayo=r(Zdt,"RoFormerForCausalLM"),Zdt.forEach(t),nyo=r(s9e," (RoFormer model)"),s9e.forEach(t),syo=i(W),Nb=n(W,"LI",{});var l9e=s(Nb);Jce=n(l9e,"STRONG",{});var ect=s(Jce);lyo=r(ect,"speech_to_text_2"),ect.forEach(t),iyo=r(l9e," \u2014 "),wD=n(l9e,"A",{href:!0});var oct=s(wD);dyo=r(oct,"Speech2Text2ForCausalLM"),oct.forEach(t),cyo=r(l9e," (Speech2Text2 model)"),l9e.forEach(t),myo=i(W),qb=n(W,"LI",{});var i9e=s(qb);Yce=n(i9e,"STRONG",{});var rct=s(Yce);fyo=r(rct,"transfo-xl"),rct.forEach(t),gyo=r(i9e," \u2014 "),AD=n(i9e,"A",{href:!0});var tct=s(AD);hyo=r(tct,"TransfoXLLMHeadModel"),tct.forEach(t),uyo=r(i9e," (Transformer-XL model)"),i9e.forEach(t),pyo=i(W),jb=n(W,"LI",{});var d9e=s(jb);Kce=n(d9e,"STRONG",{});var act=s(Kce);_yo=r(act,"trocr"),act.forEach(t),byo=r(d9e," \u2014 "),LD=n(d9e,"A",{href:!0});var nct=s(LD);vyo=r(nct,"TrOCRForCausalLM"),nct.forEach(t),Fyo=r(d9e," (TrOCR model)"),d9e.forEach(t),Tyo=i(W),Db=n(W,"LI",{});var c9e=s(Db);Zce=n(c9e,"STRONG",{});var sct=s(Zce);Myo=r(sct,"xglm"),sct.forEach(t),Eyo=r(c9e," \u2014 "),yD=n(c9e,"A",{href:!0});var lct=s(yD);Cyo=r(lct,"XGLMForCausalLM"),lct.forEach(t),wyo=r(c9e," (XGLM model)"),c9e.forEach(t),Ayo=i(W),Gb=n(W,"LI",{});var m9e=s(Gb);eme=n(m9e,"STRONG",{});var ict=s(eme);Lyo=r(ict,"xlm"),ict.forEach(t),yyo=r(m9e," \u2014 "),xD=n(m9e,"A",{href:!0});var dct=s(xD);xyo=r(dct,"XLMWithLMHeadModel"),dct.forEach(t),$yo=r(m9e," (XLM model)"),m9e.forEach(t),kyo=i(W),Ob=n(W,"LI",{});var f9e=s(Ob);ome=n(f9e,"STRONG",{});var cct=s(ome);Syo=r(cct,"xlm-prophetnet"),cct.forEach(t),Ryo=r(f9e," \u2014 "),$D=n(f9e,"A",{href:!0});var mct=s($D);Pyo=r(mct,"XLMProphetNetForCausalLM"),mct.forEach(t),Byo=r(f9e," (XLM-ProphetNet model)"),f9e.forEach(t),Iyo=i(W),Vb=n(W,"LI",{});var g9e=s(Vb);rme=n(g9e,"STRONG",{});var fct=s(rme);Nyo=r(fct,"xlm-roberta"),fct.forEach(t),qyo=r(g9e," \u2014 "),kD=n(g9e,"A",{href:!0});var gct=s(kD);jyo=r(gct,"XLMRobertaForCausalLM"),gct.forEach(t),Dyo=r(g9e," (XLM-RoBERTa model)"),g9e.forEach(t),Gyo=i(W),Xb=n(W,"LI",{});var h9e=s(Xb);tme=n(h9e,"STRONG",{});var hct=s(tme);Oyo=r(hct,"xlm-roberta-xl"),hct.forEach(t),Vyo=r(h9e," \u2014 "),SD=n(h9e,"A",{href:!0});var uct=s(SD);Xyo=r(uct,"XLMRobertaXLForCausalLM"),uct.forEach(t),zyo=r(h9e," (XLM-RoBERTa-XL model)"),h9e.forEach(t),Wyo=i(W),zb=n(W,"LI",{});var u9e=s(zb);ame=n(u9e,"STRONG",{});var pct=s(ame);Qyo=r(pct,"xlnet"),pct.forEach(t),Hyo=r(u9e," \u2014 "),RD=n(u9e,"A",{href:!0});var _ct=s(RD);Uyo=r(_ct,"XLNetLMHeadModel"),_ct.forEach(t),Jyo=r(u9e," (XLNet model)"),u9e.forEach(t),W.forEach(t),Yyo=i(ta),Wb=n(ta,"P",{});var p9e=s(Wb);Kyo=r(p9e,"The model is set in evaluation mode by default using "),nme=n(p9e,"CODE",{});var bct=s(nme);Zyo=r(bct,"model.eval()"),bct.forEach(t),e7o=r(p9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=n(p9e,"CODE",{});var vct=s(sme);o7o=r(vct,"model.train()"),vct.forEach(t),p9e.forEach(t),r7o=i(ta),T(Qb.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),Ije=i(m),Bi=n(m,"H2",{class:!0});var DGe=s(Bi);Hb=n(DGe,"A",{id:!0,class:!0,href:!0});var Fct=s(Hb);lme=n(Fct,"SPAN",{});var Tct=s(lme);T(Sy.$$.fragment,Tct),Tct.forEach(t),Fct.forEach(t),t7o=i(DGe),ime=n(DGe,"SPAN",{});var Mct=s(ime);a7o=r(Mct,"AutoModelForMaskedLM"),Mct.forEach(t),DGe.forEach(t),Nje=i(m),ko=n(m,"DIV",{class:!0});var zs=s(ko);T(Ry.$$.fragment,zs),n7o=i(zs),Ii=n(zs,"P",{});var nee=s(Ii);s7o=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PD=n(nee,"A",{href:!0});var Ect=s(PD);l7o=r(Ect,"from_pretrained()"),Ect.forEach(t),i7o=r(nee," class method or the "),BD=n(nee,"A",{href:!0});var Cct=s(BD);d7o=r(Cct,"from_config()"),Cct.forEach(t),c7o=r(nee,` class
method.`),nee.forEach(t),m7o=i(zs),Py=n(zs,"P",{});var GGe=s(Py);f7o=r(GGe,"This class cannot be instantiated directly using "),dme=n(GGe,"CODE",{});var wct=s(dme);g7o=r(wct,"__init__()"),wct.forEach(t),h7o=r(GGe," (throws an error)."),GGe.forEach(t),u7o=i(zs),st=n(zs,"DIV",{class:!0});var o6=s(st);T(By.$$.fragment,o6),p7o=i(o6),cme=n(o6,"P",{});var Act=s(cme);_7o=r(Act,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Act.forEach(t),b7o=i(o6),Ni=n(o6,"P",{});var see=s(Ni);v7o=r(see,`Note:
Loading a model from its configuration file does `),mme=n(see,"STRONG",{});var Lct=s(mme);F7o=r(Lct,"not"),Lct.forEach(t),T7o=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),ID=n(see,"A",{href:!0});var yct=s(ID);M7o=r(yct,"from_pretrained()"),yct.forEach(t),E7o=r(see," to load the model weights."),see.forEach(t),C7o=i(o6),T(Ub.$$.fragment,o6),o6.forEach(t),w7o=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(Iy.$$.fragment,aa),A7o=i(aa),fme=n(aa,"P",{});var xct=s(fme);L7o=r(xct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xct.forEach(t),y7o=i(aa),ka=n(aa,"P",{});var r6=s(ka);x7o=r(r6,"The model class to instantiate is selected based on the "),gme=n(r6,"CODE",{});var $ct=s(gme);$7o=r($ct,"model_type"),$ct.forEach(t),k7o=r(r6,` property of the config object (either
passed as an argument or loaded from `),hme=n(r6,"CODE",{});var kct=s(hme);S7o=r(kct,"pretrained_model_name_or_path"),kct.forEach(t),R7o=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=n(r6,"CODE",{});var Sct=s(ume);P7o=r(Sct,"pretrained_model_name_or_path"),Sct.forEach(t),B7o=r(r6,":"),r6.forEach(t),I7o=i(aa),Q=n(aa,"UL",{});var H=s(Q);Jb=n(H,"LI",{});var _9e=s(Jb);pme=n(_9e,"STRONG",{});var Rct=s(pme);N7o=r(Rct,"albert"),Rct.forEach(t),q7o=r(_9e," \u2014 "),ND=n(_9e,"A",{href:!0});var Pct=s(ND);j7o=r(Pct,"AlbertForMaskedLM"),Pct.forEach(t),D7o=r(_9e," (ALBERT model)"),_9e.forEach(t),G7o=i(H),Yb=n(H,"LI",{});var b9e=s(Yb);_me=n(b9e,"STRONG",{});var Bct=s(_me);O7o=r(Bct,"bart"),Bct.forEach(t),V7o=r(b9e," \u2014 "),qD=n(b9e,"A",{href:!0});var Ict=s(qD);X7o=r(Ict,"BartForConditionalGeneration"),Ict.forEach(t),z7o=r(b9e," (BART model)"),b9e.forEach(t),W7o=i(H),Kb=n(H,"LI",{});var v9e=s(Kb);bme=n(v9e,"STRONG",{});var Nct=s(bme);Q7o=r(Nct,"bert"),Nct.forEach(t),H7o=r(v9e," \u2014 "),jD=n(v9e,"A",{href:!0});var qct=s(jD);U7o=r(qct,"BertForMaskedLM"),qct.forEach(t),J7o=r(v9e," (BERT model)"),v9e.forEach(t),Y7o=i(H),Zb=n(H,"LI",{});var F9e=s(Zb);vme=n(F9e,"STRONG",{});var jct=s(vme);K7o=r(jct,"big_bird"),jct.forEach(t),Z7o=r(F9e," \u2014 "),DD=n(F9e,"A",{href:!0});var Dct=s(DD);e8o=r(Dct,"BigBirdForMaskedLM"),Dct.forEach(t),o8o=r(F9e," (BigBird model)"),F9e.forEach(t),r8o=i(H),e2=n(H,"LI",{});var T9e=s(e2);Fme=n(T9e,"STRONG",{});var Gct=s(Fme);t8o=r(Gct,"camembert"),Gct.forEach(t),a8o=r(T9e," \u2014 "),GD=n(T9e,"A",{href:!0});var Oct=s(GD);n8o=r(Oct,"CamembertForMaskedLM"),Oct.forEach(t),s8o=r(T9e," (CamemBERT model)"),T9e.forEach(t),l8o=i(H),o2=n(H,"LI",{});var M9e=s(o2);Tme=n(M9e,"STRONG",{});var Vct=s(Tme);i8o=r(Vct,"convbert"),Vct.forEach(t),d8o=r(M9e," \u2014 "),OD=n(M9e,"A",{href:!0});var Xct=s(OD);c8o=r(Xct,"ConvBertForMaskedLM"),Xct.forEach(t),m8o=r(M9e," (ConvBERT model)"),M9e.forEach(t),f8o=i(H),r2=n(H,"LI",{});var E9e=s(r2);Mme=n(E9e,"STRONG",{});var zct=s(Mme);g8o=r(zct,"data2vec-text"),zct.forEach(t),h8o=r(E9e," \u2014 "),VD=n(E9e,"A",{href:!0});var Wct=s(VD);u8o=r(Wct,"Data2VecTextForMaskedLM"),Wct.forEach(t),p8o=r(E9e," (Data2VecText model)"),E9e.forEach(t),_8o=i(H),t2=n(H,"LI",{});var C9e=s(t2);Eme=n(C9e,"STRONG",{});var Qct=s(Eme);b8o=r(Qct,"deberta"),Qct.forEach(t),v8o=r(C9e," \u2014 "),XD=n(C9e,"A",{href:!0});var Hct=s(XD);F8o=r(Hct,"DebertaForMaskedLM"),Hct.forEach(t),T8o=r(C9e," (DeBERTa model)"),C9e.forEach(t),M8o=i(H),a2=n(H,"LI",{});var w9e=s(a2);Cme=n(w9e,"STRONG",{});var Uct=s(Cme);E8o=r(Uct,"deberta-v2"),Uct.forEach(t),C8o=r(w9e," \u2014 "),zD=n(w9e,"A",{href:!0});var Jct=s(zD);w8o=r(Jct,"DebertaV2ForMaskedLM"),Jct.forEach(t),A8o=r(w9e," (DeBERTa-v2 model)"),w9e.forEach(t),L8o=i(H),n2=n(H,"LI",{});var A9e=s(n2);wme=n(A9e,"STRONG",{});var Yct=s(wme);y8o=r(Yct,"distilbert"),Yct.forEach(t),x8o=r(A9e," \u2014 "),WD=n(A9e,"A",{href:!0});var Kct=s(WD);$8o=r(Kct,"DistilBertForMaskedLM"),Kct.forEach(t),k8o=r(A9e," (DistilBERT model)"),A9e.forEach(t),S8o=i(H),s2=n(H,"LI",{});var L9e=s(s2);Ame=n(L9e,"STRONG",{});var Zct=s(Ame);R8o=r(Zct,"electra"),Zct.forEach(t),P8o=r(L9e," \u2014 "),QD=n(L9e,"A",{href:!0});var emt=s(QD);B8o=r(emt,"ElectraForMaskedLM"),emt.forEach(t),I8o=r(L9e," (ELECTRA model)"),L9e.forEach(t),N8o=i(H),l2=n(H,"LI",{});var y9e=s(l2);Lme=n(y9e,"STRONG",{});var omt=s(Lme);q8o=r(omt,"flaubert"),omt.forEach(t),j8o=r(y9e," \u2014 "),HD=n(y9e,"A",{href:!0});var rmt=s(HD);D8o=r(rmt,"FlaubertWithLMHeadModel"),rmt.forEach(t),G8o=r(y9e," (FlauBERT model)"),y9e.forEach(t),O8o=i(H),i2=n(H,"LI",{});var x9e=s(i2);yme=n(x9e,"STRONG",{});var tmt=s(yme);V8o=r(tmt,"fnet"),tmt.forEach(t),X8o=r(x9e," \u2014 "),UD=n(x9e,"A",{href:!0});var amt=s(UD);z8o=r(amt,"FNetForMaskedLM"),amt.forEach(t),W8o=r(x9e," (FNet model)"),x9e.forEach(t),Q8o=i(H),d2=n(H,"LI",{});var $9e=s(d2);xme=n($9e,"STRONG",{});var nmt=s(xme);H8o=r(nmt,"funnel"),nmt.forEach(t),U8o=r($9e," \u2014 "),JD=n($9e,"A",{href:!0});var smt=s(JD);J8o=r(smt,"FunnelForMaskedLM"),smt.forEach(t),Y8o=r($9e," (Funnel Transformer model)"),$9e.forEach(t),K8o=i(H),c2=n(H,"LI",{});var k9e=s(c2);$me=n(k9e,"STRONG",{});var lmt=s($me);Z8o=r(lmt,"ibert"),lmt.forEach(t),e9o=r(k9e," \u2014 "),YD=n(k9e,"A",{href:!0});var imt=s(YD);o9o=r(imt,"IBertForMaskedLM"),imt.forEach(t),r9o=r(k9e," (I-BERT model)"),k9e.forEach(t),t9o=i(H),m2=n(H,"LI",{});var S9e=s(m2);kme=n(S9e,"STRONG",{});var dmt=s(kme);a9o=r(dmt,"layoutlm"),dmt.forEach(t),n9o=r(S9e," \u2014 "),KD=n(S9e,"A",{href:!0});var cmt=s(KD);s9o=r(cmt,"LayoutLMForMaskedLM"),cmt.forEach(t),l9o=r(S9e," (LayoutLM model)"),S9e.forEach(t),i9o=i(H),f2=n(H,"LI",{});var R9e=s(f2);Sme=n(R9e,"STRONG",{});var mmt=s(Sme);d9o=r(mmt,"longformer"),mmt.forEach(t),c9o=r(R9e," \u2014 "),ZD=n(R9e,"A",{href:!0});var fmt=s(ZD);m9o=r(fmt,"LongformerForMaskedLM"),fmt.forEach(t),f9o=r(R9e," (Longformer model)"),R9e.forEach(t),g9o=i(H),g2=n(H,"LI",{});var P9e=s(g2);Rme=n(P9e,"STRONG",{});var gmt=s(Rme);h9o=r(gmt,"luke"),gmt.forEach(t),u9o=r(P9e," \u2014 "),eG=n(P9e,"A",{href:!0});var hmt=s(eG);p9o=r(hmt,"LukeForMaskedLM"),hmt.forEach(t),_9o=r(P9e," (LUKE model)"),P9e.forEach(t),b9o=i(H),h2=n(H,"LI",{});var B9e=s(h2);Pme=n(B9e,"STRONG",{});var umt=s(Pme);v9o=r(umt,"mbart"),umt.forEach(t),F9o=r(B9e," \u2014 "),oG=n(B9e,"A",{href:!0});var pmt=s(oG);T9o=r(pmt,"MBartForConditionalGeneration"),pmt.forEach(t),M9o=r(B9e," (mBART model)"),B9e.forEach(t),E9o=i(H),u2=n(H,"LI",{});var I9e=s(u2);Bme=n(I9e,"STRONG",{});var _mt=s(Bme);C9o=r(_mt,"megatron-bert"),_mt.forEach(t),w9o=r(I9e," \u2014 "),rG=n(I9e,"A",{href:!0});var bmt=s(rG);A9o=r(bmt,"MegatronBertForMaskedLM"),bmt.forEach(t),L9o=r(I9e," (Megatron-BERT model)"),I9e.forEach(t),y9o=i(H),p2=n(H,"LI",{});var N9e=s(p2);Ime=n(N9e,"STRONG",{});var vmt=s(Ime);x9o=r(vmt,"mobilebert"),vmt.forEach(t),$9o=r(N9e," \u2014 "),tG=n(N9e,"A",{href:!0});var Fmt=s(tG);k9o=r(Fmt,"MobileBertForMaskedLM"),Fmt.forEach(t),S9o=r(N9e," (MobileBERT model)"),N9e.forEach(t),R9o=i(H),_2=n(H,"LI",{});var q9e=s(_2);Nme=n(q9e,"STRONG",{});var Tmt=s(Nme);P9o=r(Tmt,"mpnet"),Tmt.forEach(t),B9o=r(q9e," \u2014 "),aG=n(q9e,"A",{href:!0});var Mmt=s(aG);I9o=r(Mmt,"MPNetForMaskedLM"),Mmt.forEach(t),N9o=r(q9e," (MPNet model)"),q9e.forEach(t),q9o=i(H),b2=n(H,"LI",{});var j9e=s(b2);qme=n(j9e,"STRONG",{});var Emt=s(qme);j9o=r(Emt,"nystromformer"),Emt.forEach(t),D9o=r(j9e," \u2014 "),nG=n(j9e,"A",{href:!0});var Cmt=s(nG);G9o=r(Cmt,"NystromformerForMaskedLM"),Cmt.forEach(t),O9o=r(j9e," (Nystr\xF6mformer model)"),j9e.forEach(t),V9o=i(H),v2=n(H,"LI",{});var D9e=s(v2);jme=n(D9e,"STRONG",{});var wmt=s(jme);X9o=r(wmt,"perceiver"),wmt.forEach(t),z9o=r(D9e," \u2014 "),sG=n(D9e,"A",{href:!0});var Amt=s(sG);W9o=r(Amt,"PerceiverForMaskedLM"),Amt.forEach(t),Q9o=r(D9e," (Perceiver model)"),D9e.forEach(t),H9o=i(H),F2=n(H,"LI",{});var G9e=s(F2);Dme=n(G9e,"STRONG",{});var Lmt=s(Dme);U9o=r(Lmt,"qdqbert"),Lmt.forEach(t),J9o=r(G9e," \u2014 "),lG=n(G9e,"A",{href:!0});var ymt=s(lG);Y9o=r(ymt,"QDQBertForMaskedLM"),ymt.forEach(t),K9o=r(G9e," (QDQBert model)"),G9e.forEach(t),Z9o=i(H),T2=n(H,"LI",{});var O9e=s(T2);Gme=n(O9e,"STRONG",{});var xmt=s(Gme);exo=r(xmt,"reformer"),xmt.forEach(t),oxo=r(O9e," \u2014 "),iG=n(O9e,"A",{href:!0});var $mt=s(iG);rxo=r($mt,"ReformerForMaskedLM"),$mt.forEach(t),txo=r(O9e," (Reformer model)"),O9e.forEach(t),axo=i(H),M2=n(H,"LI",{});var V9e=s(M2);Ome=n(V9e,"STRONG",{});var kmt=s(Ome);nxo=r(kmt,"rembert"),kmt.forEach(t),sxo=r(V9e," \u2014 "),dG=n(V9e,"A",{href:!0});var Smt=s(dG);lxo=r(Smt,"RemBertForMaskedLM"),Smt.forEach(t),ixo=r(V9e," (RemBERT model)"),V9e.forEach(t),dxo=i(H),E2=n(H,"LI",{});var X9e=s(E2);Vme=n(X9e,"STRONG",{});var Rmt=s(Vme);cxo=r(Rmt,"roberta"),Rmt.forEach(t),mxo=r(X9e," \u2014 "),cG=n(X9e,"A",{href:!0});var Pmt=s(cG);fxo=r(Pmt,"RobertaForMaskedLM"),Pmt.forEach(t),gxo=r(X9e," (RoBERTa model)"),X9e.forEach(t),hxo=i(H),C2=n(H,"LI",{});var z9e=s(C2);Xme=n(z9e,"STRONG",{});var Bmt=s(Xme);uxo=r(Bmt,"roformer"),Bmt.forEach(t),pxo=r(z9e," \u2014 "),mG=n(z9e,"A",{href:!0});var Imt=s(mG);_xo=r(Imt,"RoFormerForMaskedLM"),Imt.forEach(t),bxo=r(z9e," (RoFormer model)"),z9e.forEach(t),vxo=i(H),w2=n(H,"LI",{});var W9e=s(w2);zme=n(W9e,"STRONG",{});var Nmt=s(zme);Fxo=r(Nmt,"squeezebert"),Nmt.forEach(t),Txo=r(W9e," \u2014 "),fG=n(W9e,"A",{href:!0});var qmt=s(fG);Mxo=r(qmt,"SqueezeBertForMaskedLM"),qmt.forEach(t),Exo=r(W9e," (SqueezeBERT model)"),W9e.forEach(t),Cxo=i(H),A2=n(H,"LI",{});var Q9e=s(A2);Wme=n(Q9e,"STRONG",{});var jmt=s(Wme);wxo=r(jmt,"tapas"),jmt.forEach(t),Axo=r(Q9e," \u2014 "),gG=n(Q9e,"A",{href:!0});var Dmt=s(gG);Lxo=r(Dmt,"TapasForMaskedLM"),Dmt.forEach(t),yxo=r(Q9e," (TAPAS model)"),Q9e.forEach(t),xxo=i(H),L2=n(H,"LI",{});var H9e=s(L2);Qme=n(H9e,"STRONG",{});var Gmt=s(Qme);$xo=r(Gmt,"wav2vec2"),Gmt.forEach(t),kxo=r(H9e," \u2014 "),Hme=n(H9e,"CODE",{});var Omt=s(Hme);Sxo=r(Omt,"Wav2Vec2ForMaskedLM"),Omt.forEach(t),Rxo=r(H9e," (Wav2Vec2 model)"),H9e.forEach(t),Pxo=i(H),y2=n(H,"LI",{});var U9e=s(y2);Ume=n(U9e,"STRONG",{});var Vmt=s(Ume);Bxo=r(Vmt,"xlm"),Vmt.forEach(t),Ixo=r(U9e," \u2014 "),hG=n(U9e,"A",{href:!0});var Xmt=s(hG);Nxo=r(Xmt,"XLMWithLMHeadModel"),Xmt.forEach(t),qxo=r(U9e," (XLM model)"),U9e.forEach(t),jxo=i(H),x2=n(H,"LI",{});var J9e=s(x2);Jme=n(J9e,"STRONG",{});var zmt=s(Jme);Dxo=r(zmt,"xlm-roberta"),zmt.forEach(t),Gxo=r(J9e," \u2014 "),uG=n(J9e,"A",{href:!0});var Wmt=s(uG);Oxo=r(Wmt,"XLMRobertaForMaskedLM"),Wmt.forEach(t),Vxo=r(J9e," (XLM-RoBERTa model)"),J9e.forEach(t),Xxo=i(H),$2=n(H,"LI",{});var Y9e=s($2);Yme=n(Y9e,"STRONG",{});var Qmt=s(Yme);zxo=r(Qmt,"xlm-roberta-xl"),Qmt.forEach(t),Wxo=r(Y9e," \u2014 "),pG=n(Y9e,"A",{href:!0});var Hmt=s(pG);Qxo=r(Hmt,"XLMRobertaXLForMaskedLM"),Hmt.forEach(t),Hxo=r(Y9e," (XLM-RoBERTa-XL model)"),Y9e.forEach(t),Uxo=i(H),k2=n(H,"LI",{});var K9e=s(k2);Kme=n(K9e,"STRONG",{});var Umt=s(Kme);Jxo=r(Umt,"yoso"),Umt.forEach(t),Yxo=r(K9e," \u2014 "),_G=n(K9e,"A",{href:!0});var Jmt=s(_G);Kxo=r(Jmt,"YosoForMaskedLM"),Jmt.forEach(t),Zxo=r(K9e," (YOSO model)"),K9e.forEach(t),H.forEach(t),e$o=i(aa),S2=n(aa,"P",{});var Z9e=s(S2);o$o=r(Z9e,"The model is set in evaluation mode by default using "),Zme=n(Z9e,"CODE",{});var Ymt=s(Zme);r$o=r(Ymt,"model.eval()"),Ymt.forEach(t),t$o=r(Z9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=n(Z9e,"CODE",{});var Kmt=s(efe);a$o=r(Kmt,"model.train()"),Kmt.forEach(t),Z9e.forEach(t),n$o=i(aa),T(R2.$$.fragment,aa),aa.forEach(t),zs.forEach(t),qje=i(m),qi=n(m,"H2",{class:!0});var OGe=s(qi);P2=n(OGe,"A",{id:!0,class:!0,href:!0});var Zmt=s(P2);ofe=n(Zmt,"SPAN",{});var eft=s(ofe);T(Ny.$$.fragment,eft),eft.forEach(t),Zmt.forEach(t),s$o=i(OGe),rfe=n(OGe,"SPAN",{});var oft=s(rfe);l$o=r(oft,"AutoModelForSeq2SeqLM"),oft.forEach(t),OGe.forEach(t),jje=i(m),So=n(m,"DIV",{class:!0});var Ws=s(So);T(qy.$$.fragment,Ws),i$o=i(Ws),ji=n(Ws,"P",{});var lee=s(ji);d$o=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bG=n(lee,"A",{href:!0});var rft=s(bG);c$o=r(rft,"from_pretrained()"),rft.forEach(t),m$o=r(lee," class method or the "),vG=n(lee,"A",{href:!0});var tft=s(vG);f$o=r(tft,"from_config()"),tft.forEach(t),g$o=r(lee,` class
method.`),lee.forEach(t),h$o=i(Ws),jy=n(Ws,"P",{});var VGe=s(jy);u$o=r(VGe,"This class cannot be instantiated directly using "),tfe=n(VGe,"CODE",{});var aft=s(tfe);p$o=r(aft,"__init__()"),aft.forEach(t),_$o=r(VGe," (throws an error)."),VGe.forEach(t),b$o=i(Ws),lt=n(Ws,"DIV",{class:!0});var t6=s(lt);T(Dy.$$.fragment,t6),v$o=i(t6),afe=n(t6,"P",{});var nft=s(afe);F$o=r(nft,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nft.forEach(t),T$o=i(t6),Di=n(t6,"P",{});var iee=s(Di);M$o=r(iee,`Note:
Loading a model from its configuration file does `),nfe=n(iee,"STRONG",{});var sft=s(nfe);E$o=r(sft,"not"),sft.forEach(t),C$o=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=n(iee,"A",{href:!0});var lft=s(FG);w$o=r(lft,"from_pretrained()"),lft.forEach(t),A$o=r(iee," to load the model weights."),iee.forEach(t),L$o=i(t6),T(B2.$$.fragment,t6),t6.forEach(t),y$o=i(Ws),eo=n(Ws,"DIV",{class:!0});var na=s(eo);T(Gy.$$.fragment,na),x$o=i(na),sfe=n(na,"P",{});var ift=s(sfe);$$o=r(ift,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ift.forEach(t),k$o=i(na),Sa=n(na,"P",{});var a6=s(Sa);S$o=r(a6,"The model class to instantiate is selected based on the "),lfe=n(a6,"CODE",{});var dft=s(lfe);R$o=r(dft,"model_type"),dft.forEach(t),P$o=r(a6,` property of the config object (either
passed as an argument or loaded from `),ife=n(a6,"CODE",{});var cft=s(ife);B$o=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),I$o=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=n(a6,"CODE",{});var mft=s(dfe);N$o=r(mft,"pretrained_model_name_or_path"),mft.forEach(t),q$o=r(a6,":"),a6.forEach(t),j$o=i(na),pe=n(na,"UL",{});var Fe=s(pe);I2=n(Fe,"LI",{});var exe=s(I2);cfe=n(exe,"STRONG",{});var fft=s(cfe);D$o=r(fft,"bart"),fft.forEach(t),G$o=r(exe," \u2014 "),TG=n(exe,"A",{href:!0});var gft=s(TG);O$o=r(gft,"BartForConditionalGeneration"),gft.forEach(t),V$o=r(exe," (BART model)"),exe.forEach(t),X$o=i(Fe),N2=n(Fe,"LI",{});var oxe=s(N2);mfe=n(oxe,"STRONG",{});var hft=s(mfe);z$o=r(hft,"bigbird_pegasus"),hft.forEach(t),W$o=r(oxe," \u2014 "),MG=n(oxe,"A",{href:!0});var uft=s(MG);Q$o=r(uft,"BigBirdPegasusForConditionalGeneration"),uft.forEach(t),H$o=r(oxe," (BigBird-Pegasus model)"),oxe.forEach(t),U$o=i(Fe),q2=n(Fe,"LI",{});var rxe=s(q2);ffe=n(rxe,"STRONG",{});var pft=s(ffe);J$o=r(pft,"blenderbot"),pft.forEach(t),Y$o=r(rxe," \u2014 "),EG=n(rxe,"A",{href:!0});var _ft=s(EG);K$o=r(_ft,"BlenderbotForConditionalGeneration"),_ft.forEach(t),Z$o=r(rxe," (Blenderbot model)"),rxe.forEach(t),eko=i(Fe),j2=n(Fe,"LI",{});var txe=s(j2);gfe=n(txe,"STRONG",{});var bft=s(gfe);oko=r(bft,"blenderbot-small"),bft.forEach(t),rko=r(txe," \u2014 "),CG=n(txe,"A",{href:!0});var vft=s(CG);tko=r(vft,"BlenderbotSmallForConditionalGeneration"),vft.forEach(t),ako=r(txe," (BlenderbotSmall model)"),txe.forEach(t),nko=i(Fe),D2=n(Fe,"LI",{});var axe=s(D2);hfe=n(axe,"STRONG",{});var Fft=s(hfe);sko=r(Fft,"encoder-decoder"),Fft.forEach(t),lko=r(axe," \u2014 "),wG=n(axe,"A",{href:!0});var Tft=s(wG);iko=r(Tft,"EncoderDecoderModel"),Tft.forEach(t),dko=r(axe," (Encoder decoder model)"),axe.forEach(t),cko=i(Fe),G2=n(Fe,"LI",{});var nxe=s(G2);ufe=n(nxe,"STRONG",{});var Mft=s(ufe);mko=r(Mft,"fsmt"),Mft.forEach(t),fko=r(nxe," \u2014 "),AG=n(nxe,"A",{href:!0});var Eft=s(AG);gko=r(Eft,"FSMTForConditionalGeneration"),Eft.forEach(t),hko=r(nxe," (FairSeq Machine-Translation model)"),nxe.forEach(t),uko=i(Fe),O2=n(Fe,"LI",{});var sxe=s(O2);pfe=n(sxe,"STRONG",{});var Cft=s(pfe);pko=r(Cft,"led"),Cft.forEach(t),_ko=r(sxe," \u2014 "),LG=n(sxe,"A",{href:!0});var wft=s(LG);bko=r(wft,"LEDForConditionalGeneration"),wft.forEach(t),vko=r(sxe," (LED model)"),sxe.forEach(t),Fko=i(Fe),V2=n(Fe,"LI",{});var lxe=s(V2);_fe=n(lxe,"STRONG",{});var Aft=s(_fe);Tko=r(Aft,"m2m_100"),Aft.forEach(t),Mko=r(lxe," \u2014 "),yG=n(lxe,"A",{href:!0});var Lft=s(yG);Eko=r(Lft,"M2M100ForConditionalGeneration"),Lft.forEach(t),Cko=r(lxe," (M2M100 model)"),lxe.forEach(t),wko=i(Fe),X2=n(Fe,"LI",{});var ixe=s(X2);bfe=n(ixe,"STRONG",{});var yft=s(bfe);Ako=r(yft,"marian"),yft.forEach(t),Lko=r(ixe," \u2014 "),xG=n(ixe,"A",{href:!0});var xft=s(xG);yko=r(xft,"MarianMTModel"),xft.forEach(t),xko=r(ixe," (Marian model)"),ixe.forEach(t),$ko=i(Fe),z2=n(Fe,"LI",{});var dxe=s(z2);vfe=n(dxe,"STRONG",{});var $ft=s(vfe);kko=r($ft,"mbart"),$ft.forEach(t),Sko=r(dxe," \u2014 "),$G=n(dxe,"A",{href:!0});var kft=s($G);Rko=r(kft,"MBartForConditionalGeneration"),kft.forEach(t),Pko=r(dxe," (mBART model)"),dxe.forEach(t),Bko=i(Fe),W2=n(Fe,"LI",{});var cxe=s(W2);Ffe=n(cxe,"STRONG",{});var Sft=s(Ffe);Iko=r(Sft,"mt5"),Sft.forEach(t),Nko=r(cxe," \u2014 "),kG=n(cxe,"A",{href:!0});var Rft=s(kG);qko=r(Rft,"MT5ForConditionalGeneration"),Rft.forEach(t),jko=r(cxe," (MT5 model)"),cxe.forEach(t),Dko=i(Fe),Q2=n(Fe,"LI",{});var mxe=s(Q2);Tfe=n(mxe,"STRONG",{});var Pft=s(Tfe);Gko=r(Pft,"pegasus"),Pft.forEach(t),Oko=r(mxe," \u2014 "),SG=n(mxe,"A",{href:!0});var Bft=s(SG);Vko=r(Bft,"PegasusForConditionalGeneration"),Bft.forEach(t),Xko=r(mxe," (Pegasus model)"),mxe.forEach(t),zko=i(Fe),H2=n(Fe,"LI",{});var fxe=s(H2);Mfe=n(fxe,"STRONG",{});var Ift=s(Mfe);Wko=r(Ift,"plbart"),Ift.forEach(t),Qko=r(fxe," \u2014 "),RG=n(fxe,"A",{href:!0});var Nft=s(RG);Hko=r(Nft,"PLBartForConditionalGeneration"),Nft.forEach(t),Uko=r(fxe," (PLBart model)"),fxe.forEach(t),Jko=i(Fe),U2=n(Fe,"LI",{});var gxe=s(U2);Efe=n(gxe,"STRONG",{});var qft=s(Efe);Yko=r(qft,"prophetnet"),qft.forEach(t),Kko=r(gxe," \u2014 "),PG=n(gxe,"A",{href:!0});var jft=s(PG);Zko=r(jft,"ProphetNetForConditionalGeneration"),jft.forEach(t),eSo=r(gxe," (ProphetNet model)"),gxe.forEach(t),oSo=i(Fe),J2=n(Fe,"LI",{});var hxe=s(J2);Cfe=n(hxe,"STRONG",{});var Dft=s(Cfe);rSo=r(Dft,"t5"),Dft.forEach(t),tSo=r(hxe," \u2014 "),BG=n(hxe,"A",{href:!0});var Gft=s(BG);aSo=r(Gft,"T5ForConditionalGeneration"),Gft.forEach(t),nSo=r(hxe," (T5 model)"),hxe.forEach(t),sSo=i(Fe),Y2=n(Fe,"LI",{});var uxe=s(Y2);wfe=n(uxe,"STRONG",{});var Oft=s(wfe);lSo=r(Oft,"xlm-prophetnet"),Oft.forEach(t),iSo=r(uxe," \u2014 "),IG=n(uxe,"A",{href:!0});var Vft=s(IG);dSo=r(Vft,"XLMProphetNetForConditionalGeneration"),Vft.forEach(t),cSo=r(uxe," (XLM-ProphetNet model)"),uxe.forEach(t),Fe.forEach(t),mSo=i(na),K2=n(na,"P",{});var pxe=s(K2);fSo=r(pxe,"The model is set in evaluation mode by default using "),Afe=n(pxe,"CODE",{});var Xft=s(Afe);gSo=r(Xft,"model.eval()"),Xft.forEach(t),hSo=r(pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=n(pxe,"CODE",{});var zft=s(Lfe);uSo=r(zft,"model.train()"),zft.forEach(t),pxe.forEach(t),pSo=i(na),T(Z2.$$.fragment,na),na.forEach(t),Ws.forEach(t),Dje=i(m),Gi=n(m,"H2",{class:!0});var XGe=s(Gi);ev=n(XGe,"A",{id:!0,class:!0,href:!0});var Wft=s(ev);yfe=n(Wft,"SPAN",{});var Qft=s(yfe);T(Oy.$$.fragment,Qft),Qft.forEach(t),Wft.forEach(t),_So=i(XGe),xfe=n(XGe,"SPAN",{});var Hft=s(xfe);bSo=r(Hft,"AutoModelForSequenceClassification"),Hft.forEach(t),XGe.forEach(t),Gje=i(m),Ro=n(m,"DIV",{class:!0});var Qs=s(Ro);T(Vy.$$.fragment,Qs),vSo=i(Qs),Oi=n(Qs,"P",{});var dee=s(Oi);FSo=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),NG=n(dee,"A",{href:!0});var Uft=s(NG);TSo=r(Uft,"from_pretrained()"),Uft.forEach(t),MSo=r(dee," class method or the "),qG=n(dee,"A",{href:!0});var Jft=s(qG);ESo=r(Jft,"from_config()"),Jft.forEach(t),CSo=r(dee,` class
method.`),dee.forEach(t),wSo=i(Qs),Xy=n(Qs,"P",{});var zGe=s(Xy);ASo=r(zGe,"This class cannot be instantiated directly using "),$fe=n(zGe,"CODE",{});var Yft=s($fe);LSo=r(Yft,"__init__()"),Yft.forEach(t),ySo=r(zGe," (throws an error)."),zGe.forEach(t),xSo=i(Qs),it=n(Qs,"DIV",{class:!0});var n6=s(it);T(zy.$$.fragment,n6),$So=i(n6),kfe=n(n6,"P",{});var Kft=s(kfe);kSo=r(Kft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Kft.forEach(t),SSo=i(n6),Vi=n(n6,"P",{});var cee=s(Vi);RSo=r(cee,`Note:
Loading a model from its configuration file does `),Sfe=n(cee,"STRONG",{});var Zft=s(Sfe);PSo=r(Zft,"not"),Zft.forEach(t),BSo=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=n(cee,"A",{href:!0});var egt=s(jG);ISo=r(egt,"from_pretrained()"),egt.forEach(t),NSo=r(cee," to load the model weights."),cee.forEach(t),qSo=i(n6),T(ov.$$.fragment,n6),n6.forEach(t),jSo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(Wy.$$.fragment,sa),DSo=i(sa),Rfe=n(sa,"P",{});var ogt=s(Rfe);GSo=r(ogt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ogt.forEach(t),OSo=i(sa),Ra=n(sa,"P",{});var s6=s(Ra);VSo=r(s6,"The model class to instantiate is selected based on the "),Pfe=n(s6,"CODE",{});var rgt=s(Pfe);XSo=r(rgt,"model_type"),rgt.forEach(t),zSo=r(s6,` property of the config object (either
passed as an argument or loaded from `),Bfe=n(s6,"CODE",{});var tgt=s(Bfe);WSo=r(tgt,"pretrained_model_name_or_path"),tgt.forEach(t),QSo=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=n(s6,"CODE",{});var agt=s(Ife);HSo=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),USo=r(s6,":"),s6.forEach(t),JSo=i(sa),N=n(sa,"UL",{});var j=s(N);rv=n(j,"LI",{});var _xe=s(rv);Nfe=n(_xe,"STRONG",{});var ngt=s(Nfe);YSo=r(ngt,"albert"),ngt.forEach(t),KSo=r(_xe," \u2014 "),DG=n(_xe,"A",{href:!0});var sgt=s(DG);ZSo=r(sgt,"AlbertForSequenceClassification"),sgt.forEach(t),eRo=r(_xe," (ALBERT model)"),_xe.forEach(t),oRo=i(j),tv=n(j,"LI",{});var bxe=s(tv);qfe=n(bxe,"STRONG",{});var lgt=s(qfe);rRo=r(lgt,"bart"),lgt.forEach(t),tRo=r(bxe," \u2014 "),GG=n(bxe,"A",{href:!0});var igt=s(GG);aRo=r(igt,"BartForSequenceClassification"),igt.forEach(t),nRo=r(bxe," (BART model)"),bxe.forEach(t),sRo=i(j),av=n(j,"LI",{});var vxe=s(av);jfe=n(vxe,"STRONG",{});var dgt=s(jfe);lRo=r(dgt,"bert"),dgt.forEach(t),iRo=r(vxe," \u2014 "),OG=n(vxe,"A",{href:!0});var cgt=s(OG);dRo=r(cgt,"BertForSequenceClassification"),cgt.forEach(t),cRo=r(vxe," (BERT model)"),vxe.forEach(t),mRo=i(j),nv=n(j,"LI",{});var Fxe=s(nv);Dfe=n(Fxe,"STRONG",{});var mgt=s(Dfe);fRo=r(mgt,"big_bird"),mgt.forEach(t),gRo=r(Fxe," \u2014 "),VG=n(Fxe,"A",{href:!0});var fgt=s(VG);hRo=r(fgt,"BigBirdForSequenceClassification"),fgt.forEach(t),uRo=r(Fxe," (BigBird model)"),Fxe.forEach(t),pRo=i(j),sv=n(j,"LI",{});var Txe=s(sv);Gfe=n(Txe,"STRONG",{});var ggt=s(Gfe);_Ro=r(ggt,"bigbird_pegasus"),ggt.forEach(t),bRo=r(Txe," \u2014 "),XG=n(Txe,"A",{href:!0});var hgt=s(XG);vRo=r(hgt,"BigBirdPegasusForSequenceClassification"),hgt.forEach(t),FRo=r(Txe," (BigBird-Pegasus model)"),Txe.forEach(t),TRo=i(j),lv=n(j,"LI",{});var Mxe=s(lv);Ofe=n(Mxe,"STRONG",{});var ugt=s(Ofe);MRo=r(ugt,"camembert"),ugt.forEach(t),ERo=r(Mxe," \u2014 "),zG=n(Mxe,"A",{href:!0});var pgt=s(zG);CRo=r(pgt,"CamembertForSequenceClassification"),pgt.forEach(t),wRo=r(Mxe," (CamemBERT model)"),Mxe.forEach(t),ARo=i(j),iv=n(j,"LI",{});var Exe=s(iv);Vfe=n(Exe,"STRONG",{});var _gt=s(Vfe);LRo=r(_gt,"canine"),_gt.forEach(t),yRo=r(Exe," \u2014 "),WG=n(Exe,"A",{href:!0});var bgt=s(WG);xRo=r(bgt,"CanineForSequenceClassification"),bgt.forEach(t),$Ro=r(Exe," (CANINE model)"),Exe.forEach(t),kRo=i(j),dv=n(j,"LI",{});var Cxe=s(dv);Xfe=n(Cxe,"STRONG",{});var vgt=s(Xfe);SRo=r(vgt,"convbert"),vgt.forEach(t),RRo=r(Cxe," \u2014 "),QG=n(Cxe,"A",{href:!0});var Fgt=s(QG);PRo=r(Fgt,"ConvBertForSequenceClassification"),Fgt.forEach(t),BRo=r(Cxe," (ConvBERT model)"),Cxe.forEach(t),IRo=i(j),cv=n(j,"LI",{});var wxe=s(cv);zfe=n(wxe,"STRONG",{});var Tgt=s(zfe);NRo=r(Tgt,"ctrl"),Tgt.forEach(t),qRo=r(wxe," \u2014 "),HG=n(wxe,"A",{href:!0});var Mgt=s(HG);jRo=r(Mgt,"CTRLForSequenceClassification"),Mgt.forEach(t),DRo=r(wxe," (CTRL model)"),wxe.forEach(t),GRo=i(j),mv=n(j,"LI",{});var Axe=s(mv);Wfe=n(Axe,"STRONG",{});var Egt=s(Wfe);ORo=r(Egt,"data2vec-text"),Egt.forEach(t),VRo=r(Axe," \u2014 "),UG=n(Axe,"A",{href:!0});var Cgt=s(UG);XRo=r(Cgt,"Data2VecTextForSequenceClassification"),Cgt.forEach(t),zRo=r(Axe," (Data2VecText model)"),Axe.forEach(t),WRo=i(j),fv=n(j,"LI",{});var Lxe=s(fv);Qfe=n(Lxe,"STRONG",{});var wgt=s(Qfe);QRo=r(wgt,"deberta"),wgt.forEach(t),HRo=r(Lxe," \u2014 "),JG=n(Lxe,"A",{href:!0});var Agt=s(JG);URo=r(Agt,"DebertaForSequenceClassification"),Agt.forEach(t),JRo=r(Lxe," (DeBERTa model)"),Lxe.forEach(t),YRo=i(j),gv=n(j,"LI",{});var yxe=s(gv);Hfe=n(yxe,"STRONG",{});var Lgt=s(Hfe);KRo=r(Lgt,"deberta-v2"),Lgt.forEach(t),ZRo=r(yxe," \u2014 "),YG=n(yxe,"A",{href:!0});var ygt=s(YG);ePo=r(ygt,"DebertaV2ForSequenceClassification"),ygt.forEach(t),oPo=r(yxe," (DeBERTa-v2 model)"),yxe.forEach(t),rPo=i(j),hv=n(j,"LI",{});var xxe=s(hv);Ufe=n(xxe,"STRONG",{});var xgt=s(Ufe);tPo=r(xgt,"distilbert"),xgt.forEach(t),aPo=r(xxe," \u2014 "),KG=n(xxe,"A",{href:!0});var $gt=s(KG);nPo=r($gt,"DistilBertForSequenceClassification"),$gt.forEach(t),sPo=r(xxe," (DistilBERT model)"),xxe.forEach(t),lPo=i(j),uv=n(j,"LI",{});var $xe=s(uv);Jfe=n($xe,"STRONG",{});var kgt=s(Jfe);iPo=r(kgt,"electra"),kgt.forEach(t),dPo=r($xe," \u2014 "),ZG=n($xe,"A",{href:!0});var Sgt=s(ZG);cPo=r(Sgt,"ElectraForSequenceClassification"),Sgt.forEach(t),mPo=r($xe," (ELECTRA model)"),$xe.forEach(t),fPo=i(j),pv=n(j,"LI",{});var kxe=s(pv);Yfe=n(kxe,"STRONG",{});var Rgt=s(Yfe);gPo=r(Rgt,"flaubert"),Rgt.forEach(t),hPo=r(kxe," \u2014 "),eO=n(kxe,"A",{href:!0});var Pgt=s(eO);uPo=r(Pgt,"FlaubertForSequenceClassification"),Pgt.forEach(t),pPo=r(kxe," (FlauBERT model)"),kxe.forEach(t),_Po=i(j),_v=n(j,"LI",{});var Sxe=s(_v);Kfe=n(Sxe,"STRONG",{});var Bgt=s(Kfe);bPo=r(Bgt,"fnet"),Bgt.forEach(t),vPo=r(Sxe," \u2014 "),oO=n(Sxe,"A",{href:!0});var Igt=s(oO);FPo=r(Igt,"FNetForSequenceClassification"),Igt.forEach(t),TPo=r(Sxe," (FNet model)"),Sxe.forEach(t),MPo=i(j),bv=n(j,"LI",{});var Rxe=s(bv);Zfe=n(Rxe,"STRONG",{});var Ngt=s(Zfe);EPo=r(Ngt,"funnel"),Ngt.forEach(t),CPo=r(Rxe," \u2014 "),rO=n(Rxe,"A",{href:!0});var qgt=s(rO);wPo=r(qgt,"FunnelForSequenceClassification"),qgt.forEach(t),APo=r(Rxe," (Funnel Transformer model)"),Rxe.forEach(t),LPo=i(j),vv=n(j,"LI",{});var Pxe=s(vv);ege=n(Pxe,"STRONG",{});var jgt=s(ege);yPo=r(jgt,"gpt2"),jgt.forEach(t),xPo=r(Pxe," \u2014 "),tO=n(Pxe,"A",{href:!0});var Dgt=s(tO);$Po=r(Dgt,"GPT2ForSequenceClassification"),Dgt.forEach(t),kPo=r(Pxe," (OpenAI GPT-2 model)"),Pxe.forEach(t),SPo=i(j),Fv=n(j,"LI",{});var Bxe=s(Fv);oge=n(Bxe,"STRONG",{});var Ggt=s(oge);RPo=r(Ggt,"gpt_neo"),Ggt.forEach(t),PPo=r(Bxe," \u2014 "),aO=n(Bxe,"A",{href:!0});var Ogt=s(aO);BPo=r(Ogt,"GPTNeoForSequenceClassification"),Ogt.forEach(t),IPo=r(Bxe," (GPT Neo model)"),Bxe.forEach(t),NPo=i(j),Tv=n(j,"LI",{});var Ixe=s(Tv);rge=n(Ixe,"STRONG",{});var Vgt=s(rge);qPo=r(Vgt,"gptj"),Vgt.forEach(t),jPo=r(Ixe," \u2014 "),nO=n(Ixe,"A",{href:!0});var Xgt=s(nO);DPo=r(Xgt,"GPTJForSequenceClassification"),Xgt.forEach(t),GPo=r(Ixe," (GPT-J model)"),Ixe.forEach(t),OPo=i(j),Mv=n(j,"LI",{});var Nxe=s(Mv);tge=n(Nxe,"STRONG",{});var zgt=s(tge);VPo=r(zgt,"ibert"),zgt.forEach(t),XPo=r(Nxe," \u2014 "),sO=n(Nxe,"A",{href:!0});var Wgt=s(sO);zPo=r(Wgt,"IBertForSequenceClassification"),Wgt.forEach(t),WPo=r(Nxe," (I-BERT model)"),Nxe.forEach(t),QPo=i(j),Ev=n(j,"LI",{});var qxe=s(Ev);age=n(qxe,"STRONG",{});var Qgt=s(age);HPo=r(Qgt,"layoutlm"),Qgt.forEach(t),UPo=r(qxe," \u2014 "),lO=n(qxe,"A",{href:!0});var Hgt=s(lO);JPo=r(Hgt,"LayoutLMForSequenceClassification"),Hgt.forEach(t),YPo=r(qxe," (LayoutLM model)"),qxe.forEach(t),KPo=i(j),Cv=n(j,"LI",{});var jxe=s(Cv);nge=n(jxe,"STRONG",{});var Ugt=s(nge);ZPo=r(Ugt,"layoutlmv2"),Ugt.forEach(t),eBo=r(jxe," \u2014 "),iO=n(jxe,"A",{href:!0});var Jgt=s(iO);oBo=r(Jgt,"LayoutLMv2ForSequenceClassification"),Jgt.forEach(t),rBo=r(jxe," (LayoutLMv2 model)"),jxe.forEach(t),tBo=i(j),wv=n(j,"LI",{});var Dxe=s(wv);sge=n(Dxe,"STRONG",{});var Ygt=s(sge);aBo=r(Ygt,"layoutlmv3"),Ygt.forEach(t),nBo=r(Dxe," \u2014 "),dO=n(Dxe,"A",{href:!0});var Kgt=s(dO);sBo=r(Kgt,"LayoutLMv3ForSequenceClassification"),Kgt.forEach(t),lBo=r(Dxe," (LayoutLMv3 model)"),Dxe.forEach(t),iBo=i(j),Av=n(j,"LI",{});var Gxe=s(Av);lge=n(Gxe,"STRONG",{});var Zgt=s(lge);dBo=r(Zgt,"led"),Zgt.forEach(t),cBo=r(Gxe," \u2014 "),cO=n(Gxe,"A",{href:!0});var eht=s(cO);mBo=r(eht,"LEDForSequenceClassification"),eht.forEach(t),fBo=r(Gxe," (LED model)"),Gxe.forEach(t),gBo=i(j),Lv=n(j,"LI",{});var Oxe=s(Lv);ige=n(Oxe,"STRONG",{});var oht=s(ige);hBo=r(oht,"longformer"),oht.forEach(t),uBo=r(Oxe," \u2014 "),mO=n(Oxe,"A",{href:!0});var rht=s(mO);pBo=r(rht,"LongformerForSequenceClassification"),rht.forEach(t),_Bo=r(Oxe," (Longformer model)"),Oxe.forEach(t),bBo=i(j),yv=n(j,"LI",{});var Vxe=s(yv);dge=n(Vxe,"STRONG",{});var tht=s(dge);vBo=r(tht,"mbart"),tht.forEach(t),FBo=r(Vxe," \u2014 "),fO=n(Vxe,"A",{href:!0});var aht=s(fO);TBo=r(aht,"MBartForSequenceClassification"),aht.forEach(t),MBo=r(Vxe," (mBART model)"),Vxe.forEach(t),EBo=i(j),xv=n(j,"LI",{});var Xxe=s(xv);cge=n(Xxe,"STRONG",{});var nht=s(cge);CBo=r(nht,"megatron-bert"),nht.forEach(t),wBo=r(Xxe," \u2014 "),gO=n(Xxe,"A",{href:!0});var sht=s(gO);ABo=r(sht,"MegatronBertForSequenceClassification"),sht.forEach(t),LBo=r(Xxe," (Megatron-BERT model)"),Xxe.forEach(t),yBo=i(j),$v=n(j,"LI",{});var zxe=s($v);mge=n(zxe,"STRONG",{});var lht=s(mge);xBo=r(lht,"mobilebert"),lht.forEach(t),$Bo=r(zxe," \u2014 "),hO=n(zxe,"A",{href:!0});var iht=s(hO);kBo=r(iht,"MobileBertForSequenceClassification"),iht.forEach(t),SBo=r(zxe," (MobileBERT model)"),zxe.forEach(t),RBo=i(j),kv=n(j,"LI",{});var Wxe=s(kv);fge=n(Wxe,"STRONG",{});var dht=s(fge);PBo=r(dht,"mpnet"),dht.forEach(t),BBo=r(Wxe," \u2014 "),uO=n(Wxe,"A",{href:!0});var cht=s(uO);IBo=r(cht,"MPNetForSequenceClassification"),cht.forEach(t),NBo=r(Wxe," (MPNet model)"),Wxe.forEach(t),qBo=i(j),Sv=n(j,"LI",{});var Qxe=s(Sv);gge=n(Qxe,"STRONG",{});var mht=s(gge);jBo=r(mht,"nystromformer"),mht.forEach(t),DBo=r(Qxe," \u2014 "),pO=n(Qxe,"A",{href:!0});var fht=s(pO);GBo=r(fht,"NystromformerForSequenceClassification"),fht.forEach(t),OBo=r(Qxe," (Nystr\xF6mformer model)"),Qxe.forEach(t),VBo=i(j),Rv=n(j,"LI",{});var Hxe=s(Rv);hge=n(Hxe,"STRONG",{});var ght=s(hge);XBo=r(ght,"openai-gpt"),ght.forEach(t),zBo=r(Hxe," \u2014 "),_O=n(Hxe,"A",{href:!0});var hht=s(_O);WBo=r(hht,"OpenAIGPTForSequenceClassification"),hht.forEach(t),QBo=r(Hxe," (OpenAI GPT model)"),Hxe.forEach(t),HBo=i(j),Pv=n(j,"LI",{});var Uxe=s(Pv);uge=n(Uxe,"STRONG",{});var uht=s(uge);UBo=r(uht,"perceiver"),uht.forEach(t),JBo=r(Uxe," \u2014 "),bO=n(Uxe,"A",{href:!0});var pht=s(bO);YBo=r(pht,"PerceiverForSequenceClassification"),pht.forEach(t),KBo=r(Uxe," (Perceiver model)"),Uxe.forEach(t),ZBo=i(j),Bv=n(j,"LI",{});var Jxe=s(Bv);pge=n(Jxe,"STRONG",{});var _ht=s(pge);eIo=r(_ht,"plbart"),_ht.forEach(t),oIo=r(Jxe," \u2014 "),vO=n(Jxe,"A",{href:!0});var bht=s(vO);rIo=r(bht,"PLBartForSequenceClassification"),bht.forEach(t),tIo=r(Jxe," (PLBart model)"),Jxe.forEach(t),aIo=i(j),Iv=n(j,"LI",{});var Yxe=s(Iv);_ge=n(Yxe,"STRONG",{});var vht=s(_ge);nIo=r(vht,"qdqbert"),vht.forEach(t),sIo=r(Yxe," \u2014 "),FO=n(Yxe,"A",{href:!0});var Fht=s(FO);lIo=r(Fht,"QDQBertForSequenceClassification"),Fht.forEach(t),iIo=r(Yxe," (QDQBert model)"),Yxe.forEach(t),dIo=i(j),Nv=n(j,"LI",{});var Kxe=s(Nv);bge=n(Kxe,"STRONG",{});var Tht=s(bge);cIo=r(Tht,"reformer"),Tht.forEach(t),mIo=r(Kxe," \u2014 "),TO=n(Kxe,"A",{href:!0});var Mht=s(TO);fIo=r(Mht,"ReformerForSequenceClassification"),Mht.forEach(t),gIo=r(Kxe," (Reformer model)"),Kxe.forEach(t),hIo=i(j),qv=n(j,"LI",{});var Zxe=s(qv);vge=n(Zxe,"STRONG",{});var Eht=s(vge);uIo=r(Eht,"rembert"),Eht.forEach(t),pIo=r(Zxe," \u2014 "),MO=n(Zxe,"A",{href:!0});var Cht=s(MO);_Io=r(Cht,"RemBertForSequenceClassification"),Cht.forEach(t),bIo=r(Zxe," (RemBERT model)"),Zxe.forEach(t),vIo=i(j),jv=n(j,"LI",{});var e$e=s(jv);Fge=n(e$e,"STRONG",{});var wht=s(Fge);FIo=r(wht,"roberta"),wht.forEach(t),TIo=r(e$e," \u2014 "),EO=n(e$e,"A",{href:!0});var Aht=s(EO);MIo=r(Aht,"RobertaForSequenceClassification"),Aht.forEach(t),EIo=r(e$e," (RoBERTa model)"),e$e.forEach(t),CIo=i(j),Dv=n(j,"LI",{});var o$e=s(Dv);Tge=n(o$e,"STRONG",{});var Lht=s(Tge);wIo=r(Lht,"roformer"),Lht.forEach(t),AIo=r(o$e," \u2014 "),CO=n(o$e,"A",{href:!0});var yht=s(CO);LIo=r(yht,"RoFormerForSequenceClassification"),yht.forEach(t),yIo=r(o$e," (RoFormer model)"),o$e.forEach(t),xIo=i(j),Gv=n(j,"LI",{});var r$e=s(Gv);Mge=n(r$e,"STRONG",{});var xht=s(Mge);$Io=r(xht,"squeezebert"),xht.forEach(t),kIo=r(r$e," \u2014 "),wO=n(r$e,"A",{href:!0});var $ht=s(wO);SIo=r($ht,"SqueezeBertForSequenceClassification"),$ht.forEach(t),RIo=r(r$e," (SqueezeBERT model)"),r$e.forEach(t),PIo=i(j),Ov=n(j,"LI",{});var t$e=s(Ov);Ege=n(t$e,"STRONG",{});var kht=s(Ege);BIo=r(kht,"tapas"),kht.forEach(t),IIo=r(t$e," \u2014 "),AO=n(t$e,"A",{href:!0});var Sht=s(AO);NIo=r(Sht,"TapasForSequenceClassification"),Sht.forEach(t),qIo=r(t$e," (TAPAS model)"),t$e.forEach(t),jIo=i(j),Vv=n(j,"LI",{});var a$e=s(Vv);Cge=n(a$e,"STRONG",{});var Rht=s(Cge);DIo=r(Rht,"transfo-xl"),Rht.forEach(t),GIo=r(a$e," \u2014 "),LO=n(a$e,"A",{href:!0});var Pht=s(LO);OIo=r(Pht,"TransfoXLForSequenceClassification"),Pht.forEach(t),VIo=r(a$e," (Transformer-XL model)"),a$e.forEach(t),XIo=i(j),Xv=n(j,"LI",{});var n$e=s(Xv);wge=n(n$e,"STRONG",{});var Bht=s(wge);zIo=r(Bht,"xlm"),Bht.forEach(t),WIo=r(n$e," \u2014 "),yO=n(n$e,"A",{href:!0});var Iht=s(yO);QIo=r(Iht,"XLMForSequenceClassification"),Iht.forEach(t),HIo=r(n$e," (XLM model)"),n$e.forEach(t),UIo=i(j),zv=n(j,"LI",{});var s$e=s(zv);Age=n(s$e,"STRONG",{});var Nht=s(Age);JIo=r(Nht,"xlm-roberta"),Nht.forEach(t),YIo=r(s$e," \u2014 "),xO=n(s$e,"A",{href:!0});var qht=s(xO);KIo=r(qht,"XLMRobertaForSequenceClassification"),qht.forEach(t),ZIo=r(s$e," (XLM-RoBERTa model)"),s$e.forEach(t),eNo=i(j),Wv=n(j,"LI",{});var l$e=s(Wv);Lge=n(l$e,"STRONG",{});var jht=s(Lge);oNo=r(jht,"xlm-roberta-xl"),jht.forEach(t),rNo=r(l$e," \u2014 "),$O=n(l$e,"A",{href:!0});var Dht=s($O);tNo=r(Dht,"XLMRobertaXLForSequenceClassification"),Dht.forEach(t),aNo=r(l$e," (XLM-RoBERTa-XL model)"),l$e.forEach(t),nNo=i(j),Qv=n(j,"LI",{});var i$e=s(Qv);yge=n(i$e,"STRONG",{});var Ght=s(yge);sNo=r(Ght,"xlnet"),Ght.forEach(t),lNo=r(i$e," \u2014 "),kO=n(i$e,"A",{href:!0});var Oht=s(kO);iNo=r(Oht,"XLNetForSequenceClassification"),Oht.forEach(t),dNo=r(i$e," (XLNet model)"),i$e.forEach(t),cNo=i(j),Hv=n(j,"LI",{});var d$e=s(Hv);xge=n(d$e,"STRONG",{});var Vht=s(xge);mNo=r(Vht,"yoso"),Vht.forEach(t),fNo=r(d$e," \u2014 "),SO=n(d$e,"A",{href:!0});var Xht=s(SO);gNo=r(Xht,"YosoForSequenceClassification"),Xht.forEach(t),hNo=r(d$e," (YOSO model)"),d$e.forEach(t),j.forEach(t),uNo=i(sa),Uv=n(sa,"P",{});var c$e=s(Uv);pNo=r(c$e,"The model is set in evaluation mode by default using "),$ge=n(c$e,"CODE",{});var zht=s($ge);_No=r(zht,"model.eval()"),zht.forEach(t),bNo=r(c$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=n(c$e,"CODE",{});var Wht=s(kge);vNo=r(Wht,"model.train()"),Wht.forEach(t),c$e.forEach(t),FNo=i(sa),T(Jv.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),Oje=i(m),Xi=n(m,"H2",{class:!0});var WGe=s(Xi);Yv=n(WGe,"A",{id:!0,class:!0,href:!0});var Qht=s(Yv);Sge=n(Qht,"SPAN",{});var Hht=s(Sge);T(Qy.$$.fragment,Hht),Hht.forEach(t),Qht.forEach(t),TNo=i(WGe),Rge=n(WGe,"SPAN",{});var Uht=s(Rge);MNo=r(Uht,"AutoModelForMultipleChoice"),Uht.forEach(t),WGe.forEach(t),Vje=i(m),Po=n(m,"DIV",{class:!0});var Hs=s(Po);T(Hy.$$.fragment,Hs),ENo=i(Hs),zi=n(Hs,"P",{});var mee=s(zi);CNo=r(mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RO=n(mee,"A",{href:!0});var Jht=s(RO);wNo=r(Jht,"from_pretrained()"),Jht.forEach(t),ANo=r(mee," class method or the "),PO=n(mee,"A",{href:!0});var Yht=s(PO);LNo=r(Yht,"from_config()"),Yht.forEach(t),yNo=r(mee,` class
method.`),mee.forEach(t),xNo=i(Hs),Uy=n(Hs,"P",{});var QGe=s(Uy);$No=r(QGe,"This class cannot be instantiated directly using "),Pge=n(QGe,"CODE",{});var Kht=s(Pge);kNo=r(Kht,"__init__()"),Kht.forEach(t),SNo=r(QGe," (throws an error)."),QGe.forEach(t),RNo=i(Hs),dt=n(Hs,"DIV",{class:!0});var l6=s(dt);T(Jy.$$.fragment,l6),PNo=i(l6),Bge=n(l6,"P",{});var Zht=s(Bge);BNo=r(Zht,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zht.forEach(t),INo=i(l6),Wi=n(l6,"P",{});var fee=s(Wi);NNo=r(fee,`Note:
Loading a model from its configuration file does `),Ige=n(fee,"STRONG",{});var eut=s(Ige);qNo=r(eut,"not"),eut.forEach(t),jNo=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=n(fee,"A",{href:!0});var out=s(BO);DNo=r(out,"from_pretrained()"),out.forEach(t),GNo=r(fee," to load the model weights."),fee.forEach(t),ONo=i(l6),T(Kv.$$.fragment,l6),l6.forEach(t),VNo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(Yy.$$.fragment,la),XNo=i(la),Nge=n(la,"P",{});var rut=s(Nge);zNo=r(rut,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rut.forEach(t),WNo=i(la),Pa=n(la,"P",{});var i6=s(Pa);QNo=r(i6,"The model class to instantiate is selected based on the "),qge=n(i6,"CODE",{});var tut=s(qge);HNo=r(tut,"model_type"),tut.forEach(t),UNo=r(i6,` property of the config object (either
passed as an argument or loaded from `),jge=n(i6,"CODE",{});var aut=s(jge);JNo=r(aut,"pretrained_model_name_or_path"),aut.forEach(t),YNo=r(i6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dge=n(i6,"CODE",{});var nut=s(Dge);KNo=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),ZNo=r(i6,":"),i6.forEach(t),eqo=i(la),Z=n(la,"UL",{});var ee=s(Z);Zv=n(ee,"LI",{});var m$e=s(Zv);Gge=n(m$e,"STRONG",{});var sut=s(Gge);oqo=r(sut,"albert"),sut.forEach(t),rqo=r(m$e," \u2014 "),IO=n(m$e,"A",{href:!0});var lut=s(IO);tqo=r(lut,"AlbertForMultipleChoice"),lut.forEach(t),aqo=r(m$e," (ALBERT model)"),m$e.forEach(t),nqo=i(ee),eF=n(ee,"LI",{});var f$e=s(eF);Oge=n(f$e,"STRONG",{});var iut=s(Oge);sqo=r(iut,"bert"),iut.forEach(t),lqo=r(f$e," \u2014 "),NO=n(f$e,"A",{href:!0});var dut=s(NO);iqo=r(dut,"BertForMultipleChoice"),dut.forEach(t),dqo=r(f$e," (BERT model)"),f$e.forEach(t),cqo=i(ee),oF=n(ee,"LI",{});var g$e=s(oF);Vge=n(g$e,"STRONG",{});var cut=s(Vge);mqo=r(cut,"big_bird"),cut.forEach(t),fqo=r(g$e," \u2014 "),qO=n(g$e,"A",{href:!0});var mut=s(qO);gqo=r(mut,"BigBirdForMultipleChoice"),mut.forEach(t),hqo=r(g$e," (BigBird model)"),g$e.forEach(t),uqo=i(ee),rF=n(ee,"LI",{});var h$e=s(rF);Xge=n(h$e,"STRONG",{});var fut=s(Xge);pqo=r(fut,"camembert"),fut.forEach(t),_qo=r(h$e," \u2014 "),jO=n(h$e,"A",{href:!0});var gut=s(jO);bqo=r(gut,"CamembertForMultipleChoice"),gut.forEach(t),vqo=r(h$e," (CamemBERT model)"),h$e.forEach(t),Fqo=i(ee),tF=n(ee,"LI",{});var u$e=s(tF);zge=n(u$e,"STRONG",{});var hut=s(zge);Tqo=r(hut,"canine"),hut.forEach(t),Mqo=r(u$e," \u2014 "),DO=n(u$e,"A",{href:!0});var uut=s(DO);Eqo=r(uut,"CanineForMultipleChoice"),uut.forEach(t),Cqo=r(u$e," (CANINE model)"),u$e.forEach(t),wqo=i(ee),aF=n(ee,"LI",{});var p$e=s(aF);Wge=n(p$e,"STRONG",{});var put=s(Wge);Aqo=r(put,"convbert"),put.forEach(t),Lqo=r(p$e," \u2014 "),GO=n(p$e,"A",{href:!0});var _ut=s(GO);yqo=r(_ut,"ConvBertForMultipleChoice"),_ut.forEach(t),xqo=r(p$e," (ConvBERT model)"),p$e.forEach(t),$qo=i(ee),nF=n(ee,"LI",{});var _$e=s(nF);Qge=n(_$e,"STRONG",{});var but=s(Qge);kqo=r(but,"data2vec-text"),but.forEach(t),Sqo=r(_$e," \u2014 "),OO=n(_$e,"A",{href:!0});var vut=s(OO);Rqo=r(vut,"Data2VecTextForMultipleChoice"),vut.forEach(t),Pqo=r(_$e," (Data2VecText model)"),_$e.forEach(t),Bqo=i(ee),sF=n(ee,"LI",{});var b$e=s(sF);Hge=n(b$e,"STRONG",{});var Fut=s(Hge);Iqo=r(Fut,"deberta-v2"),Fut.forEach(t),Nqo=r(b$e," \u2014 "),VO=n(b$e,"A",{href:!0});var Tut=s(VO);qqo=r(Tut,"DebertaV2ForMultipleChoice"),Tut.forEach(t),jqo=r(b$e," (DeBERTa-v2 model)"),b$e.forEach(t),Dqo=i(ee),lF=n(ee,"LI",{});var v$e=s(lF);Uge=n(v$e,"STRONG",{});var Mut=s(Uge);Gqo=r(Mut,"distilbert"),Mut.forEach(t),Oqo=r(v$e," \u2014 "),XO=n(v$e,"A",{href:!0});var Eut=s(XO);Vqo=r(Eut,"DistilBertForMultipleChoice"),Eut.forEach(t),Xqo=r(v$e," (DistilBERT model)"),v$e.forEach(t),zqo=i(ee),iF=n(ee,"LI",{});var F$e=s(iF);Jge=n(F$e,"STRONG",{});var Cut=s(Jge);Wqo=r(Cut,"electra"),Cut.forEach(t),Qqo=r(F$e," \u2014 "),zO=n(F$e,"A",{href:!0});var wut=s(zO);Hqo=r(wut,"ElectraForMultipleChoice"),wut.forEach(t),Uqo=r(F$e," (ELECTRA model)"),F$e.forEach(t),Jqo=i(ee),dF=n(ee,"LI",{});var T$e=s(dF);Yge=n(T$e,"STRONG",{});var Aut=s(Yge);Yqo=r(Aut,"flaubert"),Aut.forEach(t),Kqo=r(T$e," \u2014 "),WO=n(T$e,"A",{href:!0});var Lut=s(WO);Zqo=r(Lut,"FlaubertForMultipleChoice"),Lut.forEach(t),ejo=r(T$e," (FlauBERT model)"),T$e.forEach(t),ojo=i(ee),cF=n(ee,"LI",{});var M$e=s(cF);Kge=n(M$e,"STRONG",{});var yut=s(Kge);rjo=r(yut,"fnet"),yut.forEach(t),tjo=r(M$e," \u2014 "),QO=n(M$e,"A",{href:!0});var xut=s(QO);ajo=r(xut,"FNetForMultipleChoice"),xut.forEach(t),njo=r(M$e," (FNet model)"),M$e.forEach(t),sjo=i(ee),mF=n(ee,"LI",{});var E$e=s(mF);Zge=n(E$e,"STRONG",{});var $ut=s(Zge);ljo=r($ut,"funnel"),$ut.forEach(t),ijo=r(E$e," \u2014 "),HO=n(E$e,"A",{href:!0});var kut=s(HO);djo=r(kut,"FunnelForMultipleChoice"),kut.forEach(t),cjo=r(E$e," (Funnel Transformer model)"),E$e.forEach(t),mjo=i(ee),fF=n(ee,"LI",{});var C$e=s(fF);ehe=n(C$e,"STRONG",{});var Sut=s(ehe);fjo=r(Sut,"ibert"),Sut.forEach(t),gjo=r(C$e," \u2014 "),UO=n(C$e,"A",{href:!0});var Rut=s(UO);hjo=r(Rut,"IBertForMultipleChoice"),Rut.forEach(t),ujo=r(C$e," (I-BERT model)"),C$e.forEach(t),pjo=i(ee),gF=n(ee,"LI",{});var w$e=s(gF);ohe=n(w$e,"STRONG",{});var Put=s(ohe);_jo=r(Put,"longformer"),Put.forEach(t),bjo=r(w$e," \u2014 "),JO=n(w$e,"A",{href:!0});var But=s(JO);vjo=r(But,"LongformerForMultipleChoice"),But.forEach(t),Fjo=r(w$e," (Longformer model)"),w$e.forEach(t),Tjo=i(ee),hF=n(ee,"LI",{});var A$e=s(hF);rhe=n(A$e,"STRONG",{});var Iut=s(rhe);Mjo=r(Iut,"megatron-bert"),Iut.forEach(t),Ejo=r(A$e," \u2014 "),YO=n(A$e,"A",{href:!0});var Nut=s(YO);Cjo=r(Nut,"MegatronBertForMultipleChoice"),Nut.forEach(t),wjo=r(A$e," (Megatron-BERT model)"),A$e.forEach(t),Ajo=i(ee),uF=n(ee,"LI",{});var L$e=s(uF);the=n(L$e,"STRONG",{});var qut=s(the);Ljo=r(qut,"mobilebert"),qut.forEach(t),yjo=r(L$e," \u2014 "),KO=n(L$e,"A",{href:!0});var jut=s(KO);xjo=r(jut,"MobileBertForMultipleChoice"),jut.forEach(t),$jo=r(L$e," (MobileBERT model)"),L$e.forEach(t),kjo=i(ee),pF=n(ee,"LI",{});var y$e=s(pF);ahe=n(y$e,"STRONG",{});var Dut=s(ahe);Sjo=r(Dut,"mpnet"),Dut.forEach(t),Rjo=r(y$e," \u2014 "),ZO=n(y$e,"A",{href:!0});var Gut=s(ZO);Pjo=r(Gut,"MPNetForMultipleChoice"),Gut.forEach(t),Bjo=r(y$e," (MPNet model)"),y$e.forEach(t),Ijo=i(ee),_F=n(ee,"LI",{});var x$e=s(_F);nhe=n(x$e,"STRONG",{});var Out=s(nhe);Njo=r(Out,"nystromformer"),Out.forEach(t),qjo=r(x$e," \u2014 "),eV=n(x$e,"A",{href:!0});var Vut=s(eV);jjo=r(Vut,"NystromformerForMultipleChoice"),Vut.forEach(t),Djo=r(x$e," (Nystr\xF6mformer model)"),x$e.forEach(t),Gjo=i(ee),bF=n(ee,"LI",{});var $$e=s(bF);she=n($$e,"STRONG",{});var Xut=s(she);Ojo=r(Xut,"qdqbert"),Xut.forEach(t),Vjo=r($$e," \u2014 "),oV=n($$e,"A",{href:!0});var zut=s(oV);Xjo=r(zut,"QDQBertForMultipleChoice"),zut.forEach(t),zjo=r($$e," (QDQBert model)"),$$e.forEach(t),Wjo=i(ee),vF=n(ee,"LI",{});var k$e=s(vF);lhe=n(k$e,"STRONG",{});var Wut=s(lhe);Qjo=r(Wut,"rembert"),Wut.forEach(t),Hjo=r(k$e," \u2014 "),rV=n(k$e,"A",{href:!0});var Qut=s(rV);Ujo=r(Qut,"RemBertForMultipleChoice"),Qut.forEach(t),Jjo=r(k$e," (RemBERT model)"),k$e.forEach(t),Yjo=i(ee),FF=n(ee,"LI",{});var S$e=s(FF);ihe=n(S$e,"STRONG",{});var Hut=s(ihe);Kjo=r(Hut,"roberta"),Hut.forEach(t),Zjo=r(S$e," \u2014 "),tV=n(S$e,"A",{href:!0});var Uut=s(tV);eDo=r(Uut,"RobertaForMultipleChoice"),Uut.forEach(t),oDo=r(S$e," (RoBERTa model)"),S$e.forEach(t),rDo=i(ee),TF=n(ee,"LI",{});var R$e=s(TF);dhe=n(R$e,"STRONG",{});var Jut=s(dhe);tDo=r(Jut,"roformer"),Jut.forEach(t),aDo=r(R$e," \u2014 "),aV=n(R$e,"A",{href:!0});var Yut=s(aV);nDo=r(Yut,"RoFormerForMultipleChoice"),Yut.forEach(t),sDo=r(R$e," (RoFormer model)"),R$e.forEach(t),lDo=i(ee),MF=n(ee,"LI",{});var P$e=s(MF);che=n(P$e,"STRONG",{});var Kut=s(che);iDo=r(Kut,"squeezebert"),Kut.forEach(t),dDo=r(P$e," \u2014 "),nV=n(P$e,"A",{href:!0});var Zut=s(nV);cDo=r(Zut,"SqueezeBertForMultipleChoice"),Zut.forEach(t),mDo=r(P$e," (SqueezeBERT model)"),P$e.forEach(t),fDo=i(ee),EF=n(ee,"LI",{});var B$e=s(EF);mhe=n(B$e,"STRONG",{});var ept=s(mhe);gDo=r(ept,"xlm"),ept.forEach(t),hDo=r(B$e," \u2014 "),sV=n(B$e,"A",{href:!0});var opt=s(sV);uDo=r(opt,"XLMForMultipleChoice"),opt.forEach(t),pDo=r(B$e," (XLM model)"),B$e.forEach(t),_Do=i(ee),CF=n(ee,"LI",{});var I$e=s(CF);fhe=n(I$e,"STRONG",{});var rpt=s(fhe);bDo=r(rpt,"xlm-roberta"),rpt.forEach(t),vDo=r(I$e," \u2014 "),lV=n(I$e,"A",{href:!0});var tpt=s(lV);FDo=r(tpt,"XLMRobertaForMultipleChoice"),tpt.forEach(t),TDo=r(I$e," (XLM-RoBERTa model)"),I$e.forEach(t),MDo=i(ee),wF=n(ee,"LI",{});var N$e=s(wF);ghe=n(N$e,"STRONG",{});var apt=s(ghe);EDo=r(apt,"xlm-roberta-xl"),apt.forEach(t),CDo=r(N$e," \u2014 "),iV=n(N$e,"A",{href:!0});var npt=s(iV);wDo=r(npt,"XLMRobertaXLForMultipleChoice"),npt.forEach(t),ADo=r(N$e," (XLM-RoBERTa-XL model)"),N$e.forEach(t),LDo=i(ee),AF=n(ee,"LI",{});var q$e=s(AF);hhe=n(q$e,"STRONG",{});var spt=s(hhe);yDo=r(spt,"xlnet"),spt.forEach(t),xDo=r(q$e," \u2014 "),dV=n(q$e,"A",{href:!0});var lpt=s(dV);$Do=r(lpt,"XLNetForMultipleChoice"),lpt.forEach(t),kDo=r(q$e," (XLNet model)"),q$e.forEach(t),SDo=i(ee),LF=n(ee,"LI",{});var j$e=s(LF);uhe=n(j$e,"STRONG",{});var ipt=s(uhe);RDo=r(ipt,"yoso"),ipt.forEach(t),PDo=r(j$e," \u2014 "),cV=n(j$e,"A",{href:!0});var dpt=s(cV);BDo=r(dpt,"YosoForMultipleChoice"),dpt.forEach(t),IDo=r(j$e," (YOSO model)"),j$e.forEach(t),ee.forEach(t),NDo=i(la),yF=n(la,"P",{});var D$e=s(yF);qDo=r(D$e,"The model is set in evaluation mode by default using "),phe=n(D$e,"CODE",{});var cpt=s(phe);jDo=r(cpt,"model.eval()"),cpt.forEach(t),DDo=r(D$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=n(D$e,"CODE",{});var mpt=s(_he);GDo=r(mpt,"model.train()"),mpt.forEach(t),D$e.forEach(t),ODo=i(la),T(xF.$$.fragment,la),la.forEach(t),Hs.forEach(t),Xje=i(m),Qi=n(m,"H2",{class:!0});var HGe=s(Qi);$F=n(HGe,"A",{id:!0,class:!0,href:!0});var fpt=s($F);bhe=n(fpt,"SPAN",{});var gpt=s(bhe);T(Ky.$$.fragment,gpt),gpt.forEach(t),fpt.forEach(t),VDo=i(HGe),vhe=n(HGe,"SPAN",{});var hpt=s(vhe);XDo=r(hpt,"AutoModelForNextSentencePrediction"),hpt.forEach(t),HGe.forEach(t),zje=i(m),Bo=n(m,"DIV",{class:!0});var Us=s(Bo);T(Zy.$$.fragment,Us),zDo=i(Us),Hi=n(Us,"P",{});var gee=s(Hi);WDo=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mV=n(gee,"A",{href:!0});var upt=s(mV);QDo=r(upt,"from_pretrained()"),upt.forEach(t),HDo=r(gee," class method or the "),fV=n(gee,"A",{href:!0});var ppt=s(fV);UDo=r(ppt,"from_config()"),ppt.forEach(t),JDo=r(gee,` class
method.`),gee.forEach(t),YDo=i(Us),e7=n(Us,"P",{});var UGe=s(e7);KDo=r(UGe,"This class cannot be instantiated directly using "),Fhe=n(UGe,"CODE",{});var _pt=s(Fhe);ZDo=r(_pt,"__init__()"),_pt.forEach(t),eGo=r(UGe," (throws an error)."),UGe.forEach(t),oGo=i(Us),ct=n(Us,"DIV",{class:!0});var d6=s(ct);T(o7.$$.fragment,d6),rGo=i(d6),The=n(d6,"P",{});var bpt=s(The);tGo=r(bpt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bpt.forEach(t),aGo=i(d6),Ui=n(d6,"P",{});var hee=s(Ui);nGo=r(hee,`Note:
Loading a model from its configuration file does `),Mhe=n(hee,"STRONG",{});var vpt=s(Mhe);sGo=r(vpt,"not"),vpt.forEach(t),lGo=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=n(hee,"A",{href:!0});var Fpt=s(gV);iGo=r(Fpt,"from_pretrained()"),Fpt.forEach(t),dGo=r(hee," to load the model weights."),hee.forEach(t),cGo=i(d6),T(kF.$$.fragment,d6),d6.forEach(t),mGo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(r7.$$.fragment,ia),fGo=i(ia),Ehe=n(ia,"P",{});var Tpt=s(Ehe);gGo=r(Tpt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Tpt.forEach(t),hGo=i(ia),Ba=n(ia,"P",{});var c6=s(Ba);uGo=r(c6,"The model class to instantiate is selected based on the "),Che=n(c6,"CODE",{});var Mpt=s(Che);pGo=r(Mpt,"model_type"),Mpt.forEach(t),_Go=r(c6,` property of the config object (either
passed as an argument or loaded from `),whe=n(c6,"CODE",{});var Ept=s(whe);bGo=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),vGo=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=n(c6,"CODE",{});var Cpt=s(Ahe);FGo=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),TGo=r(c6,":"),c6.forEach(t),MGo=i(ia),Yr=n(ia,"UL",{});var Js=s(Yr);SF=n(Js,"LI",{});var G$e=s(SF);Lhe=n(G$e,"STRONG",{});var wpt=s(Lhe);EGo=r(wpt,"bert"),wpt.forEach(t),CGo=r(G$e," \u2014 "),hV=n(G$e,"A",{href:!0});var Apt=s(hV);wGo=r(Apt,"BertForNextSentencePrediction"),Apt.forEach(t),AGo=r(G$e," (BERT model)"),G$e.forEach(t),LGo=i(Js),RF=n(Js,"LI",{});var O$e=s(RF);yhe=n(O$e,"STRONG",{});var Lpt=s(yhe);yGo=r(Lpt,"fnet"),Lpt.forEach(t),xGo=r(O$e," \u2014 "),uV=n(O$e,"A",{href:!0});var ypt=s(uV);$Go=r(ypt,"FNetForNextSentencePrediction"),ypt.forEach(t),kGo=r(O$e," (FNet model)"),O$e.forEach(t),SGo=i(Js),PF=n(Js,"LI",{});var V$e=s(PF);xhe=n(V$e,"STRONG",{});var xpt=s(xhe);RGo=r(xpt,"megatron-bert"),xpt.forEach(t),PGo=r(V$e," \u2014 "),pV=n(V$e,"A",{href:!0});var $pt=s(pV);BGo=r($pt,"MegatronBertForNextSentencePrediction"),$pt.forEach(t),IGo=r(V$e," (Megatron-BERT model)"),V$e.forEach(t),NGo=i(Js),BF=n(Js,"LI",{});var X$e=s(BF);$he=n(X$e,"STRONG",{});var kpt=s($he);qGo=r(kpt,"mobilebert"),kpt.forEach(t),jGo=r(X$e," \u2014 "),_V=n(X$e,"A",{href:!0});var Spt=s(_V);DGo=r(Spt,"MobileBertForNextSentencePrediction"),Spt.forEach(t),GGo=r(X$e," (MobileBERT model)"),X$e.forEach(t),OGo=i(Js),IF=n(Js,"LI",{});var z$e=s(IF);khe=n(z$e,"STRONG",{});var Rpt=s(khe);VGo=r(Rpt,"qdqbert"),Rpt.forEach(t),XGo=r(z$e," \u2014 "),bV=n(z$e,"A",{href:!0});var Ppt=s(bV);zGo=r(Ppt,"QDQBertForNextSentencePrediction"),Ppt.forEach(t),WGo=r(z$e," (QDQBert model)"),z$e.forEach(t),Js.forEach(t),QGo=i(ia),NF=n(ia,"P",{});var W$e=s(NF);HGo=r(W$e,"The model is set in evaluation mode by default using "),She=n(W$e,"CODE",{});var Bpt=s(She);UGo=r(Bpt,"model.eval()"),Bpt.forEach(t),JGo=r(W$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=n(W$e,"CODE",{});var Ipt=s(Rhe);YGo=r(Ipt,"model.train()"),Ipt.forEach(t),W$e.forEach(t),KGo=i(ia),T(qF.$$.fragment,ia),ia.forEach(t),Us.forEach(t),Wje=i(m),Ji=n(m,"H2",{class:!0});var JGe=s(Ji);jF=n(JGe,"A",{id:!0,class:!0,href:!0});var Npt=s(jF);Phe=n(Npt,"SPAN",{});var qpt=s(Phe);T(t7.$$.fragment,qpt),qpt.forEach(t),Npt.forEach(t),ZGo=i(JGe),Bhe=n(JGe,"SPAN",{});var jpt=s(Bhe);eOo=r(jpt,"AutoModelForTokenClassification"),jpt.forEach(t),JGe.forEach(t),Qje=i(m),Io=n(m,"DIV",{class:!0});var Ys=s(Io);T(a7.$$.fragment,Ys),oOo=i(Ys),Yi=n(Ys,"P",{});var uee=s(Yi);rOo=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vV=n(uee,"A",{href:!0});var Dpt=s(vV);tOo=r(Dpt,"from_pretrained()"),Dpt.forEach(t),aOo=r(uee," class method or the "),FV=n(uee,"A",{href:!0});var Gpt=s(FV);nOo=r(Gpt,"from_config()"),Gpt.forEach(t),sOo=r(uee,` class
method.`),uee.forEach(t),lOo=i(Ys),n7=n(Ys,"P",{});var YGe=s(n7);iOo=r(YGe,"This class cannot be instantiated directly using "),Ihe=n(YGe,"CODE",{});var Opt=s(Ihe);dOo=r(Opt,"__init__()"),Opt.forEach(t),cOo=r(YGe," (throws an error)."),YGe.forEach(t),mOo=i(Ys),mt=n(Ys,"DIV",{class:!0});var m6=s(mt);T(s7.$$.fragment,m6),fOo=i(m6),Nhe=n(m6,"P",{});var Vpt=s(Nhe);gOo=r(Vpt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Vpt.forEach(t),hOo=i(m6),Ki=n(m6,"P",{});var pee=s(Ki);uOo=r(pee,`Note:
Loading a model from its configuration file does `),qhe=n(pee,"STRONG",{});var Xpt=s(qhe);pOo=r(Xpt,"not"),Xpt.forEach(t),_Oo=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(pee,"A",{href:!0});var zpt=s(TV);bOo=r(zpt,"from_pretrained()"),zpt.forEach(t),vOo=r(pee," to load the model weights."),pee.forEach(t),FOo=i(m6),T(DF.$$.fragment,m6),m6.forEach(t),TOo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(l7.$$.fragment,da),MOo=i(da),jhe=n(da,"P",{});var Wpt=s(jhe);EOo=r(Wpt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wpt.forEach(t),COo=i(da),Ia=n(da,"P",{});var f6=s(Ia);wOo=r(f6,"The model class to instantiate is selected based on the "),Dhe=n(f6,"CODE",{});var Qpt=s(Dhe);AOo=r(Qpt,"model_type"),Qpt.forEach(t),LOo=r(f6,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(f6,"CODE",{});var Hpt=s(Ghe);yOo=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),xOo=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(f6,"CODE",{});var Upt=s(Ohe);$Oo=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),kOo=r(f6,":"),f6.forEach(t),SOo=i(da),U=n(da,"UL",{});var J=s(U);GF=n(J,"LI",{});var Q$e=s(GF);Vhe=n(Q$e,"STRONG",{});var Jpt=s(Vhe);ROo=r(Jpt,"albert"),Jpt.forEach(t),POo=r(Q$e," \u2014 "),MV=n(Q$e,"A",{href:!0});var Ypt=s(MV);BOo=r(Ypt,"AlbertForTokenClassification"),Ypt.forEach(t),IOo=r(Q$e," (ALBERT model)"),Q$e.forEach(t),NOo=i(J),OF=n(J,"LI",{});var H$e=s(OF);Xhe=n(H$e,"STRONG",{});var Kpt=s(Xhe);qOo=r(Kpt,"bert"),Kpt.forEach(t),jOo=r(H$e," \u2014 "),EV=n(H$e,"A",{href:!0});var Zpt=s(EV);DOo=r(Zpt,"BertForTokenClassification"),Zpt.forEach(t),GOo=r(H$e," (BERT model)"),H$e.forEach(t),OOo=i(J),VF=n(J,"LI",{});var U$e=s(VF);zhe=n(U$e,"STRONG",{});var e_t=s(zhe);VOo=r(e_t,"big_bird"),e_t.forEach(t),XOo=r(U$e," \u2014 "),CV=n(U$e,"A",{href:!0});var o_t=s(CV);zOo=r(o_t,"BigBirdForTokenClassification"),o_t.forEach(t),WOo=r(U$e," (BigBird model)"),U$e.forEach(t),QOo=i(J),XF=n(J,"LI",{});var J$e=s(XF);Whe=n(J$e,"STRONG",{});var r_t=s(Whe);HOo=r(r_t,"camembert"),r_t.forEach(t),UOo=r(J$e," \u2014 "),wV=n(J$e,"A",{href:!0});var t_t=s(wV);JOo=r(t_t,"CamembertForTokenClassification"),t_t.forEach(t),YOo=r(J$e," (CamemBERT model)"),J$e.forEach(t),KOo=i(J),zF=n(J,"LI",{});var Y$e=s(zF);Qhe=n(Y$e,"STRONG",{});var a_t=s(Qhe);ZOo=r(a_t,"canine"),a_t.forEach(t),eVo=r(Y$e," \u2014 "),AV=n(Y$e,"A",{href:!0});var n_t=s(AV);oVo=r(n_t,"CanineForTokenClassification"),n_t.forEach(t),rVo=r(Y$e," (CANINE model)"),Y$e.forEach(t),tVo=i(J),WF=n(J,"LI",{});var K$e=s(WF);Hhe=n(K$e,"STRONG",{});var s_t=s(Hhe);aVo=r(s_t,"convbert"),s_t.forEach(t),nVo=r(K$e," \u2014 "),LV=n(K$e,"A",{href:!0});var l_t=s(LV);sVo=r(l_t,"ConvBertForTokenClassification"),l_t.forEach(t),lVo=r(K$e," (ConvBERT model)"),K$e.forEach(t),iVo=i(J),QF=n(J,"LI",{});var Z$e=s(QF);Uhe=n(Z$e,"STRONG",{});var i_t=s(Uhe);dVo=r(i_t,"data2vec-text"),i_t.forEach(t),cVo=r(Z$e," \u2014 "),yV=n(Z$e,"A",{href:!0});var d_t=s(yV);mVo=r(d_t,"Data2VecTextForTokenClassification"),d_t.forEach(t),fVo=r(Z$e," (Data2VecText model)"),Z$e.forEach(t),gVo=i(J),HF=n(J,"LI",{});var eke=s(HF);Jhe=n(eke,"STRONG",{});var c_t=s(Jhe);hVo=r(c_t,"deberta"),c_t.forEach(t),uVo=r(eke," \u2014 "),xV=n(eke,"A",{href:!0});var m_t=s(xV);pVo=r(m_t,"DebertaForTokenClassification"),m_t.forEach(t),_Vo=r(eke," (DeBERTa model)"),eke.forEach(t),bVo=i(J),UF=n(J,"LI",{});var oke=s(UF);Yhe=n(oke,"STRONG",{});var f_t=s(Yhe);vVo=r(f_t,"deberta-v2"),f_t.forEach(t),FVo=r(oke," \u2014 "),$V=n(oke,"A",{href:!0});var g_t=s($V);TVo=r(g_t,"DebertaV2ForTokenClassification"),g_t.forEach(t),MVo=r(oke," (DeBERTa-v2 model)"),oke.forEach(t),EVo=i(J),JF=n(J,"LI",{});var rke=s(JF);Khe=n(rke,"STRONG",{});var h_t=s(Khe);CVo=r(h_t,"distilbert"),h_t.forEach(t),wVo=r(rke," \u2014 "),kV=n(rke,"A",{href:!0});var u_t=s(kV);AVo=r(u_t,"DistilBertForTokenClassification"),u_t.forEach(t),LVo=r(rke," (DistilBERT model)"),rke.forEach(t),yVo=i(J),YF=n(J,"LI",{});var tke=s(YF);Zhe=n(tke,"STRONG",{});var p_t=s(Zhe);xVo=r(p_t,"electra"),p_t.forEach(t),$Vo=r(tke," \u2014 "),SV=n(tke,"A",{href:!0});var __t=s(SV);kVo=r(__t,"ElectraForTokenClassification"),__t.forEach(t),SVo=r(tke," (ELECTRA model)"),tke.forEach(t),RVo=i(J),KF=n(J,"LI",{});var ake=s(KF);eue=n(ake,"STRONG",{});var b_t=s(eue);PVo=r(b_t,"flaubert"),b_t.forEach(t),BVo=r(ake," \u2014 "),RV=n(ake,"A",{href:!0});var v_t=s(RV);IVo=r(v_t,"FlaubertForTokenClassification"),v_t.forEach(t),NVo=r(ake," (FlauBERT model)"),ake.forEach(t),qVo=i(J),ZF=n(J,"LI",{});var nke=s(ZF);oue=n(nke,"STRONG",{});var F_t=s(oue);jVo=r(F_t,"fnet"),F_t.forEach(t),DVo=r(nke," \u2014 "),PV=n(nke,"A",{href:!0});var T_t=s(PV);GVo=r(T_t,"FNetForTokenClassification"),T_t.forEach(t),OVo=r(nke," (FNet model)"),nke.forEach(t),VVo=i(J),e1=n(J,"LI",{});var ske=s(e1);rue=n(ske,"STRONG",{});var M_t=s(rue);XVo=r(M_t,"funnel"),M_t.forEach(t),zVo=r(ske," \u2014 "),BV=n(ske,"A",{href:!0});var E_t=s(BV);WVo=r(E_t,"FunnelForTokenClassification"),E_t.forEach(t),QVo=r(ske," (Funnel Transformer model)"),ske.forEach(t),HVo=i(J),o1=n(J,"LI",{});var lke=s(o1);tue=n(lke,"STRONG",{});var C_t=s(tue);UVo=r(C_t,"gpt2"),C_t.forEach(t),JVo=r(lke," \u2014 "),IV=n(lke,"A",{href:!0});var w_t=s(IV);YVo=r(w_t,"GPT2ForTokenClassification"),w_t.forEach(t),KVo=r(lke," (OpenAI GPT-2 model)"),lke.forEach(t),ZVo=i(J),r1=n(J,"LI",{});var ike=s(r1);aue=n(ike,"STRONG",{});var A_t=s(aue);eXo=r(A_t,"ibert"),A_t.forEach(t),oXo=r(ike," \u2014 "),NV=n(ike,"A",{href:!0});var L_t=s(NV);rXo=r(L_t,"IBertForTokenClassification"),L_t.forEach(t),tXo=r(ike," (I-BERT model)"),ike.forEach(t),aXo=i(J),t1=n(J,"LI",{});var dke=s(t1);nue=n(dke,"STRONG",{});var y_t=s(nue);nXo=r(y_t,"layoutlm"),y_t.forEach(t),sXo=r(dke," \u2014 "),qV=n(dke,"A",{href:!0});var x_t=s(qV);lXo=r(x_t,"LayoutLMForTokenClassification"),x_t.forEach(t),iXo=r(dke," (LayoutLM model)"),dke.forEach(t),dXo=i(J),a1=n(J,"LI",{});var cke=s(a1);sue=n(cke,"STRONG",{});var $_t=s(sue);cXo=r($_t,"layoutlmv2"),$_t.forEach(t),mXo=r(cke," \u2014 "),jV=n(cke,"A",{href:!0});var k_t=s(jV);fXo=r(k_t,"LayoutLMv2ForTokenClassification"),k_t.forEach(t),gXo=r(cke," (LayoutLMv2 model)"),cke.forEach(t),hXo=i(J),n1=n(J,"LI",{});var mke=s(n1);lue=n(mke,"STRONG",{});var S_t=s(lue);uXo=r(S_t,"layoutlmv3"),S_t.forEach(t),pXo=r(mke," \u2014 "),DV=n(mke,"A",{href:!0});var R_t=s(DV);_Xo=r(R_t,"LayoutLMv3ForTokenClassification"),R_t.forEach(t),bXo=r(mke," (LayoutLMv3 model)"),mke.forEach(t),vXo=i(J),s1=n(J,"LI",{});var fke=s(s1);iue=n(fke,"STRONG",{});var P_t=s(iue);FXo=r(P_t,"longformer"),P_t.forEach(t),TXo=r(fke," \u2014 "),GV=n(fke,"A",{href:!0});var B_t=s(GV);MXo=r(B_t,"LongformerForTokenClassification"),B_t.forEach(t),EXo=r(fke," (Longformer model)"),fke.forEach(t),CXo=i(J),l1=n(J,"LI",{});var gke=s(l1);due=n(gke,"STRONG",{});var I_t=s(due);wXo=r(I_t,"megatron-bert"),I_t.forEach(t),AXo=r(gke," \u2014 "),OV=n(gke,"A",{href:!0});var N_t=s(OV);LXo=r(N_t,"MegatronBertForTokenClassification"),N_t.forEach(t),yXo=r(gke," (Megatron-BERT model)"),gke.forEach(t),xXo=i(J),i1=n(J,"LI",{});var hke=s(i1);cue=n(hke,"STRONG",{});var q_t=s(cue);$Xo=r(q_t,"mobilebert"),q_t.forEach(t),kXo=r(hke," \u2014 "),VV=n(hke,"A",{href:!0});var j_t=s(VV);SXo=r(j_t,"MobileBertForTokenClassification"),j_t.forEach(t),RXo=r(hke," (MobileBERT model)"),hke.forEach(t),PXo=i(J),d1=n(J,"LI",{});var uke=s(d1);mue=n(uke,"STRONG",{});var D_t=s(mue);BXo=r(D_t,"mpnet"),D_t.forEach(t),IXo=r(uke," \u2014 "),XV=n(uke,"A",{href:!0});var G_t=s(XV);NXo=r(G_t,"MPNetForTokenClassification"),G_t.forEach(t),qXo=r(uke," (MPNet model)"),uke.forEach(t),jXo=i(J),c1=n(J,"LI",{});var pke=s(c1);fue=n(pke,"STRONG",{});var O_t=s(fue);DXo=r(O_t,"nystromformer"),O_t.forEach(t),GXo=r(pke," \u2014 "),zV=n(pke,"A",{href:!0});var V_t=s(zV);OXo=r(V_t,"NystromformerForTokenClassification"),V_t.forEach(t),VXo=r(pke," (Nystr\xF6mformer model)"),pke.forEach(t),XXo=i(J),m1=n(J,"LI",{});var _ke=s(m1);gue=n(_ke,"STRONG",{});var X_t=s(gue);zXo=r(X_t,"qdqbert"),X_t.forEach(t),WXo=r(_ke," \u2014 "),WV=n(_ke,"A",{href:!0});var z_t=s(WV);QXo=r(z_t,"QDQBertForTokenClassification"),z_t.forEach(t),HXo=r(_ke," (QDQBert model)"),_ke.forEach(t),UXo=i(J),f1=n(J,"LI",{});var bke=s(f1);hue=n(bke,"STRONG",{});var W_t=s(hue);JXo=r(W_t,"rembert"),W_t.forEach(t),YXo=r(bke," \u2014 "),QV=n(bke,"A",{href:!0});var Q_t=s(QV);KXo=r(Q_t,"RemBertForTokenClassification"),Q_t.forEach(t),ZXo=r(bke," (RemBERT model)"),bke.forEach(t),ezo=i(J),g1=n(J,"LI",{});var vke=s(g1);uue=n(vke,"STRONG",{});var H_t=s(uue);ozo=r(H_t,"roberta"),H_t.forEach(t),rzo=r(vke," \u2014 "),HV=n(vke,"A",{href:!0});var U_t=s(HV);tzo=r(U_t,"RobertaForTokenClassification"),U_t.forEach(t),azo=r(vke," (RoBERTa model)"),vke.forEach(t),nzo=i(J),h1=n(J,"LI",{});var Fke=s(h1);pue=n(Fke,"STRONG",{});var J_t=s(pue);szo=r(J_t,"roformer"),J_t.forEach(t),lzo=r(Fke," \u2014 "),UV=n(Fke,"A",{href:!0});var Y_t=s(UV);izo=r(Y_t,"RoFormerForTokenClassification"),Y_t.forEach(t),dzo=r(Fke," (RoFormer model)"),Fke.forEach(t),czo=i(J),u1=n(J,"LI",{});var Tke=s(u1);_ue=n(Tke,"STRONG",{});var K_t=s(_ue);mzo=r(K_t,"squeezebert"),K_t.forEach(t),fzo=r(Tke," \u2014 "),JV=n(Tke,"A",{href:!0});var Z_t=s(JV);gzo=r(Z_t,"SqueezeBertForTokenClassification"),Z_t.forEach(t),hzo=r(Tke," (SqueezeBERT model)"),Tke.forEach(t),uzo=i(J),p1=n(J,"LI",{});var Mke=s(p1);bue=n(Mke,"STRONG",{});var ebt=s(bue);pzo=r(ebt,"xlm"),ebt.forEach(t),_zo=r(Mke," \u2014 "),YV=n(Mke,"A",{href:!0});var obt=s(YV);bzo=r(obt,"XLMForTokenClassification"),obt.forEach(t),vzo=r(Mke," (XLM model)"),Mke.forEach(t),Fzo=i(J),_1=n(J,"LI",{});var Eke=s(_1);vue=n(Eke,"STRONG",{});var rbt=s(vue);Tzo=r(rbt,"xlm-roberta"),rbt.forEach(t),Mzo=r(Eke," \u2014 "),KV=n(Eke,"A",{href:!0});var tbt=s(KV);Ezo=r(tbt,"XLMRobertaForTokenClassification"),tbt.forEach(t),Czo=r(Eke," (XLM-RoBERTa model)"),Eke.forEach(t),wzo=i(J),b1=n(J,"LI",{});var Cke=s(b1);Fue=n(Cke,"STRONG",{});var abt=s(Fue);Azo=r(abt,"xlm-roberta-xl"),abt.forEach(t),Lzo=r(Cke," \u2014 "),ZV=n(Cke,"A",{href:!0});var nbt=s(ZV);yzo=r(nbt,"XLMRobertaXLForTokenClassification"),nbt.forEach(t),xzo=r(Cke," (XLM-RoBERTa-XL model)"),Cke.forEach(t),$zo=i(J),v1=n(J,"LI",{});var wke=s(v1);Tue=n(wke,"STRONG",{});var sbt=s(Tue);kzo=r(sbt,"xlnet"),sbt.forEach(t),Szo=r(wke," \u2014 "),eX=n(wke,"A",{href:!0});var lbt=s(eX);Rzo=r(lbt,"XLNetForTokenClassification"),lbt.forEach(t),Pzo=r(wke," (XLNet model)"),wke.forEach(t),Bzo=i(J),F1=n(J,"LI",{});var Ake=s(F1);Mue=n(Ake,"STRONG",{});var ibt=s(Mue);Izo=r(ibt,"yoso"),ibt.forEach(t),Nzo=r(Ake," \u2014 "),oX=n(Ake,"A",{href:!0});var dbt=s(oX);qzo=r(dbt,"YosoForTokenClassification"),dbt.forEach(t),jzo=r(Ake," (YOSO model)"),Ake.forEach(t),J.forEach(t),Dzo=i(da),T1=n(da,"P",{});var Lke=s(T1);Gzo=r(Lke,"The model is set in evaluation mode by default using "),Eue=n(Lke,"CODE",{});var cbt=s(Eue);Ozo=r(cbt,"model.eval()"),cbt.forEach(t),Vzo=r(Lke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=n(Lke,"CODE",{});var mbt=s(Cue);Xzo=r(mbt,"model.train()"),mbt.forEach(t),Lke.forEach(t),zzo=i(da),T(M1.$$.fragment,da),da.forEach(t),Ys.forEach(t),Hje=i(m),Zi=n(m,"H2",{class:!0});var KGe=s(Zi);E1=n(KGe,"A",{id:!0,class:!0,href:!0});var fbt=s(E1);wue=n(fbt,"SPAN",{});var gbt=s(wue);T(i7.$$.fragment,gbt),gbt.forEach(t),fbt.forEach(t),Wzo=i(KGe),Aue=n(KGe,"SPAN",{});var hbt=s(Aue);Qzo=r(hbt,"AutoModelForQuestionAnswering"),hbt.forEach(t),KGe.forEach(t),Uje=i(m),No=n(m,"DIV",{class:!0});var Ks=s(No);T(d7.$$.fragment,Ks),Hzo=i(Ks),ed=n(Ks,"P",{});var _ee=s(ed);Uzo=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rX=n(_ee,"A",{href:!0});var ubt=s(rX);Jzo=r(ubt,"from_pretrained()"),ubt.forEach(t),Yzo=r(_ee," class method or the "),tX=n(_ee,"A",{href:!0});var pbt=s(tX);Kzo=r(pbt,"from_config()"),pbt.forEach(t),Zzo=r(_ee,` class
method.`),_ee.forEach(t),eWo=i(Ks),c7=n(Ks,"P",{});var ZGe=s(c7);oWo=r(ZGe,"This class cannot be instantiated directly using "),Lue=n(ZGe,"CODE",{});var _bt=s(Lue);rWo=r(_bt,"__init__()"),_bt.forEach(t),tWo=r(ZGe," (throws an error)."),ZGe.forEach(t),aWo=i(Ks),ft=n(Ks,"DIV",{class:!0});var g6=s(ft);T(m7.$$.fragment,g6),nWo=i(g6),yue=n(g6,"P",{});var bbt=s(yue);sWo=r(bbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bbt.forEach(t),lWo=i(g6),od=n(g6,"P",{});var bee=s(od);iWo=r(bee,`Note:
Loading a model from its configuration file does `),xue=n(bee,"STRONG",{});var vbt=s(xue);dWo=r(vbt,"not"),vbt.forEach(t),cWo=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(bee,"A",{href:!0});var Fbt=s(aX);mWo=r(Fbt,"from_pretrained()"),Fbt.forEach(t),fWo=r(bee," to load the model weights."),bee.forEach(t),gWo=i(g6),T(C1.$$.fragment,g6),g6.forEach(t),hWo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(f7.$$.fragment,ca),uWo=i(ca),$ue=n(ca,"P",{});var Tbt=s($ue);pWo=r(Tbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Tbt.forEach(t),_Wo=i(ca),Na=n(ca,"P",{});var h6=s(Na);bWo=r(h6,"The model class to instantiate is selected based on the "),kue=n(h6,"CODE",{});var Mbt=s(kue);vWo=r(Mbt,"model_type"),Mbt.forEach(t),FWo=r(h6,` property of the config object (either
passed as an argument or loaded from `),Sue=n(h6,"CODE",{});var Ebt=s(Sue);TWo=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),MWo=r(h6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(h6,"CODE",{});var Cbt=s(Rue);EWo=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),CWo=r(h6,":"),h6.forEach(t),wWo=i(ca),V=n(ca,"UL",{});var X=s(V);w1=n(X,"LI",{});var yke=s(w1);Pue=n(yke,"STRONG",{});var wbt=s(Pue);AWo=r(wbt,"albert"),wbt.forEach(t),LWo=r(yke," \u2014 "),nX=n(yke,"A",{href:!0});var Abt=s(nX);yWo=r(Abt,"AlbertForQuestionAnswering"),Abt.forEach(t),xWo=r(yke," (ALBERT model)"),yke.forEach(t),$Wo=i(X),A1=n(X,"LI",{});var xke=s(A1);Bue=n(xke,"STRONG",{});var Lbt=s(Bue);kWo=r(Lbt,"bart"),Lbt.forEach(t),SWo=r(xke," \u2014 "),sX=n(xke,"A",{href:!0});var ybt=s(sX);RWo=r(ybt,"BartForQuestionAnswering"),ybt.forEach(t),PWo=r(xke," (BART model)"),xke.forEach(t),BWo=i(X),L1=n(X,"LI",{});var $ke=s(L1);Iue=n($ke,"STRONG",{});var xbt=s(Iue);IWo=r(xbt,"bert"),xbt.forEach(t),NWo=r($ke," \u2014 "),lX=n($ke,"A",{href:!0});var $bt=s(lX);qWo=r($bt,"BertForQuestionAnswering"),$bt.forEach(t),jWo=r($ke," (BERT model)"),$ke.forEach(t),DWo=i(X),y1=n(X,"LI",{});var kke=s(y1);Nue=n(kke,"STRONG",{});var kbt=s(Nue);GWo=r(kbt,"big_bird"),kbt.forEach(t),OWo=r(kke," \u2014 "),iX=n(kke,"A",{href:!0});var Sbt=s(iX);VWo=r(Sbt,"BigBirdForQuestionAnswering"),Sbt.forEach(t),XWo=r(kke," (BigBird model)"),kke.forEach(t),zWo=i(X),x1=n(X,"LI",{});var Ske=s(x1);que=n(Ske,"STRONG",{});var Rbt=s(que);WWo=r(Rbt,"bigbird_pegasus"),Rbt.forEach(t),QWo=r(Ske," \u2014 "),dX=n(Ske,"A",{href:!0});var Pbt=s(dX);HWo=r(Pbt,"BigBirdPegasusForQuestionAnswering"),Pbt.forEach(t),UWo=r(Ske," (BigBird-Pegasus model)"),Ske.forEach(t),JWo=i(X),$1=n(X,"LI",{});var Rke=s($1);jue=n(Rke,"STRONG",{});var Bbt=s(jue);YWo=r(Bbt,"camembert"),Bbt.forEach(t),KWo=r(Rke," \u2014 "),cX=n(Rke,"A",{href:!0});var Ibt=s(cX);ZWo=r(Ibt,"CamembertForQuestionAnswering"),Ibt.forEach(t),eQo=r(Rke," (CamemBERT model)"),Rke.forEach(t),oQo=i(X),k1=n(X,"LI",{});var Pke=s(k1);Due=n(Pke,"STRONG",{});var Nbt=s(Due);rQo=r(Nbt,"canine"),Nbt.forEach(t),tQo=r(Pke," \u2014 "),mX=n(Pke,"A",{href:!0});var qbt=s(mX);aQo=r(qbt,"CanineForQuestionAnswering"),qbt.forEach(t),nQo=r(Pke," (CANINE model)"),Pke.forEach(t),sQo=i(X),S1=n(X,"LI",{});var Bke=s(S1);Gue=n(Bke,"STRONG",{});var jbt=s(Gue);lQo=r(jbt,"convbert"),jbt.forEach(t),iQo=r(Bke," \u2014 "),fX=n(Bke,"A",{href:!0});var Dbt=s(fX);dQo=r(Dbt,"ConvBertForQuestionAnswering"),Dbt.forEach(t),cQo=r(Bke," (ConvBERT model)"),Bke.forEach(t),mQo=i(X),R1=n(X,"LI",{});var Ike=s(R1);Oue=n(Ike,"STRONG",{});var Gbt=s(Oue);fQo=r(Gbt,"data2vec-text"),Gbt.forEach(t),gQo=r(Ike," \u2014 "),gX=n(Ike,"A",{href:!0});var Obt=s(gX);hQo=r(Obt,"Data2VecTextForQuestionAnswering"),Obt.forEach(t),uQo=r(Ike," (Data2VecText model)"),Ike.forEach(t),pQo=i(X),P1=n(X,"LI",{});var Nke=s(P1);Vue=n(Nke,"STRONG",{});var Vbt=s(Vue);_Qo=r(Vbt,"deberta"),Vbt.forEach(t),bQo=r(Nke," \u2014 "),hX=n(Nke,"A",{href:!0});var Xbt=s(hX);vQo=r(Xbt,"DebertaForQuestionAnswering"),Xbt.forEach(t),FQo=r(Nke," (DeBERTa model)"),Nke.forEach(t),TQo=i(X),B1=n(X,"LI",{});var qke=s(B1);Xue=n(qke,"STRONG",{});var zbt=s(Xue);MQo=r(zbt,"deberta-v2"),zbt.forEach(t),EQo=r(qke," \u2014 "),uX=n(qke,"A",{href:!0});var Wbt=s(uX);CQo=r(Wbt,"DebertaV2ForQuestionAnswering"),Wbt.forEach(t),wQo=r(qke," (DeBERTa-v2 model)"),qke.forEach(t),AQo=i(X),I1=n(X,"LI",{});var jke=s(I1);zue=n(jke,"STRONG",{});var Qbt=s(zue);LQo=r(Qbt,"distilbert"),Qbt.forEach(t),yQo=r(jke," \u2014 "),pX=n(jke,"A",{href:!0});var Hbt=s(pX);xQo=r(Hbt,"DistilBertForQuestionAnswering"),Hbt.forEach(t),$Qo=r(jke," (DistilBERT model)"),jke.forEach(t),kQo=i(X),N1=n(X,"LI",{});var Dke=s(N1);Wue=n(Dke,"STRONG",{});var Ubt=s(Wue);SQo=r(Ubt,"electra"),Ubt.forEach(t),RQo=r(Dke," \u2014 "),_X=n(Dke,"A",{href:!0});var Jbt=s(_X);PQo=r(Jbt,"ElectraForQuestionAnswering"),Jbt.forEach(t),BQo=r(Dke," (ELECTRA model)"),Dke.forEach(t),IQo=i(X),q1=n(X,"LI",{});var Gke=s(q1);Que=n(Gke,"STRONG",{});var Ybt=s(Que);NQo=r(Ybt,"flaubert"),Ybt.forEach(t),qQo=r(Gke," \u2014 "),bX=n(Gke,"A",{href:!0});var Kbt=s(bX);jQo=r(Kbt,"FlaubertForQuestionAnsweringSimple"),Kbt.forEach(t),DQo=r(Gke," (FlauBERT model)"),Gke.forEach(t),GQo=i(X),j1=n(X,"LI",{});var Oke=s(j1);Hue=n(Oke,"STRONG",{});var Zbt=s(Hue);OQo=r(Zbt,"fnet"),Zbt.forEach(t),VQo=r(Oke," \u2014 "),vX=n(Oke,"A",{href:!0});var e2t=s(vX);XQo=r(e2t,"FNetForQuestionAnswering"),e2t.forEach(t),zQo=r(Oke," (FNet model)"),Oke.forEach(t),WQo=i(X),D1=n(X,"LI",{});var Vke=s(D1);Uue=n(Vke,"STRONG",{});var o2t=s(Uue);QQo=r(o2t,"funnel"),o2t.forEach(t),HQo=r(Vke," \u2014 "),FX=n(Vke,"A",{href:!0});var r2t=s(FX);UQo=r(r2t,"FunnelForQuestionAnswering"),r2t.forEach(t),JQo=r(Vke," (Funnel Transformer model)"),Vke.forEach(t),YQo=i(X),G1=n(X,"LI",{});var Xke=s(G1);Jue=n(Xke,"STRONG",{});var t2t=s(Jue);KQo=r(t2t,"gptj"),t2t.forEach(t),ZQo=r(Xke," \u2014 "),TX=n(Xke,"A",{href:!0});var a2t=s(TX);eHo=r(a2t,"GPTJForQuestionAnswering"),a2t.forEach(t),oHo=r(Xke," (GPT-J model)"),Xke.forEach(t),rHo=i(X),O1=n(X,"LI",{});var zke=s(O1);Yue=n(zke,"STRONG",{});var n2t=s(Yue);tHo=r(n2t,"ibert"),n2t.forEach(t),aHo=r(zke," \u2014 "),MX=n(zke,"A",{href:!0});var s2t=s(MX);nHo=r(s2t,"IBertForQuestionAnswering"),s2t.forEach(t),sHo=r(zke," (I-BERT model)"),zke.forEach(t),lHo=i(X),V1=n(X,"LI",{});var Wke=s(V1);Kue=n(Wke,"STRONG",{});var l2t=s(Kue);iHo=r(l2t,"layoutlmv2"),l2t.forEach(t),dHo=r(Wke," \u2014 "),EX=n(Wke,"A",{href:!0});var i2t=s(EX);cHo=r(i2t,"LayoutLMv2ForQuestionAnswering"),i2t.forEach(t),mHo=r(Wke," (LayoutLMv2 model)"),Wke.forEach(t),fHo=i(X),X1=n(X,"LI",{});var Qke=s(X1);Zue=n(Qke,"STRONG",{});var d2t=s(Zue);gHo=r(d2t,"layoutlmv3"),d2t.forEach(t),hHo=r(Qke," \u2014 "),CX=n(Qke,"A",{href:!0});var c2t=s(CX);uHo=r(c2t,"LayoutLMv3ForQuestionAnswering"),c2t.forEach(t),pHo=r(Qke," (LayoutLMv3 model)"),Qke.forEach(t),_Ho=i(X),z1=n(X,"LI",{});var Hke=s(z1);epe=n(Hke,"STRONG",{});var m2t=s(epe);bHo=r(m2t,"led"),m2t.forEach(t),vHo=r(Hke," \u2014 "),wX=n(Hke,"A",{href:!0});var f2t=s(wX);FHo=r(f2t,"LEDForQuestionAnswering"),f2t.forEach(t),THo=r(Hke," (LED model)"),Hke.forEach(t),MHo=i(X),W1=n(X,"LI",{});var Uke=s(W1);ope=n(Uke,"STRONG",{});var g2t=s(ope);EHo=r(g2t,"longformer"),g2t.forEach(t),CHo=r(Uke," \u2014 "),AX=n(Uke,"A",{href:!0});var h2t=s(AX);wHo=r(h2t,"LongformerForQuestionAnswering"),h2t.forEach(t),AHo=r(Uke," (Longformer model)"),Uke.forEach(t),LHo=i(X),Q1=n(X,"LI",{});var Jke=s(Q1);rpe=n(Jke,"STRONG",{});var u2t=s(rpe);yHo=r(u2t,"lxmert"),u2t.forEach(t),xHo=r(Jke," \u2014 "),LX=n(Jke,"A",{href:!0});var p2t=s(LX);$Ho=r(p2t,"LxmertForQuestionAnswering"),p2t.forEach(t),kHo=r(Jke," (LXMERT model)"),Jke.forEach(t),SHo=i(X),H1=n(X,"LI",{});var Yke=s(H1);tpe=n(Yke,"STRONG",{});var _2t=s(tpe);RHo=r(_2t,"mbart"),_2t.forEach(t),PHo=r(Yke," \u2014 "),yX=n(Yke,"A",{href:!0});var b2t=s(yX);BHo=r(b2t,"MBartForQuestionAnswering"),b2t.forEach(t),IHo=r(Yke," (mBART model)"),Yke.forEach(t),NHo=i(X),U1=n(X,"LI",{});var Kke=s(U1);ape=n(Kke,"STRONG",{});var v2t=s(ape);qHo=r(v2t,"megatron-bert"),v2t.forEach(t),jHo=r(Kke," \u2014 "),xX=n(Kke,"A",{href:!0});var F2t=s(xX);DHo=r(F2t,"MegatronBertForQuestionAnswering"),F2t.forEach(t),GHo=r(Kke," (Megatron-BERT model)"),Kke.forEach(t),OHo=i(X),J1=n(X,"LI",{});var Zke=s(J1);npe=n(Zke,"STRONG",{});var T2t=s(npe);VHo=r(T2t,"mobilebert"),T2t.forEach(t),XHo=r(Zke," \u2014 "),$X=n(Zke,"A",{href:!0});var M2t=s($X);zHo=r(M2t,"MobileBertForQuestionAnswering"),M2t.forEach(t),WHo=r(Zke," (MobileBERT model)"),Zke.forEach(t),QHo=i(X),Y1=n(X,"LI",{});var eSe=s(Y1);spe=n(eSe,"STRONG",{});var E2t=s(spe);HHo=r(E2t,"mpnet"),E2t.forEach(t),UHo=r(eSe," \u2014 "),kX=n(eSe,"A",{href:!0});var C2t=s(kX);JHo=r(C2t,"MPNetForQuestionAnswering"),C2t.forEach(t),YHo=r(eSe," (MPNet model)"),eSe.forEach(t),KHo=i(X),K1=n(X,"LI",{});var oSe=s(K1);lpe=n(oSe,"STRONG",{});var w2t=s(lpe);ZHo=r(w2t,"nystromformer"),w2t.forEach(t),eUo=r(oSe," \u2014 "),SX=n(oSe,"A",{href:!0});var A2t=s(SX);oUo=r(A2t,"NystromformerForQuestionAnswering"),A2t.forEach(t),rUo=r(oSe," (Nystr\xF6mformer model)"),oSe.forEach(t),tUo=i(X),Z1=n(X,"LI",{});var rSe=s(Z1);ipe=n(rSe,"STRONG",{});var L2t=s(ipe);aUo=r(L2t,"qdqbert"),L2t.forEach(t),nUo=r(rSe," \u2014 "),RX=n(rSe,"A",{href:!0});var y2t=s(RX);sUo=r(y2t,"QDQBertForQuestionAnswering"),y2t.forEach(t),lUo=r(rSe," (QDQBert model)"),rSe.forEach(t),iUo=i(X),eT=n(X,"LI",{});var tSe=s(eT);dpe=n(tSe,"STRONG",{});var x2t=s(dpe);dUo=r(x2t,"reformer"),x2t.forEach(t),cUo=r(tSe," \u2014 "),PX=n(tSe,"A",{href:!0});var $2t=s(PX);mUo=r($2t,"ReformerForQuestionAnswering"),$2t.forEach(t),fUo=r(tSe," (Reformer model)"),tSe.forEach(t),gUo=i(X),oT=n(X,"LI",{});var aSe=s(oT);cpe=n(aSe,"STRONG",{});var k2t=s(cpe);hUo=r(k2t,"rembert"),k2t.forEach(t),uUo=r(aSe," \u2014 "),BX=n(aSe,"A",{href:!0});var S2t=s(BX);pUo=r(S2t,"RemBertForQuestionAnswering"),S2t.forEach(t),_Uo=r(aSe," (RemBERT model)"),aSe.forEach(t),bUo=i(X),rT=n(X,"LI",{});var nSe=s(rT);mpe=n(nSe,"STRONG",{});var R2t=s(mpe);vUo=r(R2t,"roberta"),R2t.forEach(t),FUo=r(nSe," \u2014 "),IX=n(nSe,"A",{href:!0});var P2t=s(IX);TUo=r(P2t,"RobertaForQuestionAnswering"),P2t.forEach(t),MUo=r(nSe," (RoBERTa model)"),nSe.forEach(t),EUo=i(X),tT=n(X,"LI",{});var sSe=s(tT);fpe=n(sSe,"STRONG",{});var B2t=s(fpe);CUo=r(B2t,"roformer"),B2t.forEach(t),wUo=r(sSe," \u2014 "),NX=n(sSe,"A",{href:!0});var I2t=s(NX);AUo=r(I2t,"RoFormerForQuestionAnswering"),I2t.forEach(t),LUo=r(sSe," (RoFormer model)"),sSe.forEach(t),yUo=i(X),aT=n(X,"LI",{});var lSe=s(aT);gpe=n(lSe,"STRONG",{});var N2t=s(gpe);xUo=r(N2t,"splinter"),N2t.forEach(t),$Uo=r(lSe," \u2014 "),qX=n(lSe,"A",{href:!0});var q2t=s(qX);kUo=r(q2t,"SplinterForQuestionAnswering"),q2t.forEach(t),SUo=r(lSe," (Splinter model)"),lSe.forEach(t),RUo=i(X),nT=n(X,"LI",{});var iSe=s(nT);hpe=n(iSe,"STRONG",{});var j2t=s(hpe);PUo=r(j2t,"squeezebert"),j2t.forEach(t),BUo=r(iSe," \u2014 "),jX=n(iSe,"A",{href:!0});var D2t=s(jX);IUo=r(D2t,"SqueezeBertForQuestionAnswering"),D2t.forEach(t),NUo=r(iSe," (SqueezeBERT model)"),iSe.forEach(t),qUo=i(X),sT=n(X,"LI",{});var dSe=s(sT);upe=n(dSe,"STRONG",{});var G2t=s(upe);jUo=r(G2t,"xlm"),G2t.forEach(t),DUo=r(dSe," \u2014 "),DX=n(dSe,"A",{href:!0});var O2t=s(DX);GUo=r(O2t,"XLMForQuestionAnsweringSimple"),O2t.forEach(t),OUo=r(dSe," (XLM model)"),dSe.forEach(t),VUo=i(X),lT=n(X,"LI",{});var cSe=s(lT);ppe=n(cSe,"STRONG",{});var V2t=s(ppe);XUo=r(V2t,"xlm-roberta"),V2t.forEach(t),zUo=r(cSe," \u2014 "),GX=n(cSe,"A",{href:!0});var X2t=s(GX);WUo=r(X2t,"XLMRobertaForQuestionAnswering"),X2t.forEach(t),QUo=r(cSe," (XLM-RoBERTa model)"),cSe.forEach(t),HUo=i(X),iT=n(X,"LI",{});var mSe=s(iT);_pe=n(mSe,"STRONG",{});var z2t=s(_pe);UUo=r(z2t,"xlm-roberta-xl"),z2t.forEach(t),JUo=r(mSe," \u2014 "),OX=n(mSe,"A",{href:!0});var W2t=s(OX);YUo=r(W2t,"XLMRobertaXLForQuestionAnswering"),W2t.forEach(t),KUo=r(mSe," (XLM-RoBERTa-XL model)"),mSe.forEach(t),ZUo=i(X),dT=n(X,"LI",{});var fSe=s(dT);bpe=n(fSe,"STRONG",{});var Q2t=s(bpe);eJo=r(Q2t,"xlnet"),Q2t.forEach(t),oJo=r(fSe," \u2014 "),VX=n(fSe,"A",{href:!0});var H2t=s(VX);rJo=r(H2t,"XLNetForQuestionAnsweringSimple"),H2t.forEach(t),tJo=r(fSe," (XLNet model)"),fSe.forEach(t),aJo=i(X),cT=n(X,"LI",{});var gSe=s(cT);vpe=n(gSe,"STRONG",{});var U2t=s(vpe);nJo=r(U2t,"yoso"),U2t.forEach(t),sJo=r(gSe," \u2014 "),XX=n(gSe,"A",{href:!0});var J2t=s(XX);lJo=r(J2t,"YosoForQuestionAnswering"),J2t.forEach(t),iJo=r(gSe," (YOSO model)"),gSe.forEach(t),X.forEach(t),dJo=i(ca),mT=n(ca,"P",{});var hSe=s(mT);cJo=r(hSe,"The model is set in evaluation mode by default using "),Fpe=n(hSe,"CODE",{});var Y2t=s(Fpe);mJo=r(Y2t,"model.eval()"),Y2t.forEach(t),fJo=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tpe=n(hSe,"CODE",{});var K2t=s(Tpe);gJo=r(K2t,"model.train()"),K2t.forEach(t),hSe.forEach(t),hJo=i(ca),T(fT.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),Jje=i(m),rd=n(m,"H2",{class:!0});var eOe=s(rd);gT=n(eOe,"A",{id:!0,class:!0,href:!0});var Z2t=s(gT);Mpe=n(Z2t,"SPAN",{});var evt=s(Mpe);T(g7.$$.fragment,evt),evt.forEach(t),Z2t.forEach(t),uJo=i(eOe),Epe=n(eOe,"SPAN",{});var ovt=s(Epe);pJo=r(ovt,"AutoModelForTableQuestionAnswering"),ovt.forEach(t),eOe.forEach(t),Yje=i(m),qo=n(m,"DIV",{class:!0});var Zs=s(qo);T(h7.$$.fragment,Zs),_Jo=i(Zs),td=n(Zs,"P",{});var vee=s(td);bJo=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zX=n(vee,"A",{href:!0});var rvt=s(zX);vJo=r(rvt,"from_pretrained()"),rvt.forEach(t),FJo=r(vee," class method or the "),WX=n(vee,"A",{href:!0});var tvt=s(WX);TJo=r(tvt,"from_config()"),tvt.forEach(t),MJo=r(vee,` class
method.`),vee.forEach(t),EJo=i(Zs),u7=n(Zs,"P",{});var oOe=s(u7);CJo=r(oOe,"This class cannot be instantiated directly using "),Cpe=n(oOe,"CODE",{});var avt=s(Cpe);wJo=r(avt,"__init__()"),avt.forEach(t),AJo=r(oOe," (throws an error)."),oOe.forEach(t),LJo=i(Zs),gt=n(Zs,"DIV",{class:!0});var u6=s(gt);T(p7.$$.fragment,u6),yJo=i(u6),wpe=n(u6,"P",{});var nvt=s(wpe);xJo=r(nvt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),nvt.forEach(t),$Jo=i(u6),ad=n(u6,"P",{});var Fee=s(ad);kJo=r(Fee,`Note:
Loading a model from its configuration file does `),Ape=n(Fee,"STRONG",{});var svt=s(Ape);SJo=r(svt,"not"),svt.forEach(t),RJo=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(Fee,"A",{href:!0});var lvt=s(QX);PJo=r(lvt,"from_pretrained()"),lvt.forEach(t),BJo=r(Fee," to load the model weights."),Fee.forEach(t),IJo=i(u6),T(hT.$$.fragment,u6),u6.forEach(t),NJo=i(Zs),so=n(Zs,"DIV",{class:!0});var ma=s(so);T(_7.$$.fragment,ma),qJo=i(ma),Lpe=n(ma,"P",{});var ivt=s(Lpe);jJo=r(ivt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ivt.forEach(t),DJo=i(ma),qa=n(ma,"P",{});var p6=s(qa);GJo=r(p6,"The model class to instantiate is selected based on the "),ype=n(p6,"CODE",{});var dvt=s(ype);OJo=r(dvt,"model_type"),dvt.forEach(t),VJo=r(p6,` property of the config object (either
passed as an argument or loaded from `),xpe=n(p6,"CODE",{});var cvt=s(xpe);XJo=r(cvt,"pretrained_model_name_or_path"),cvt.forEach(t),zJo=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$pe=n(p6,"CODE",{});var mvt=s($pe);WJo=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),QJo=r(p6,":"),p6.forEach(t),HJo=i(ma),kpe=n(ma,"UL",{});var fvt=s(kpe);uT=n(fvt,"LI",{});var uSe=s(uT);Spe=n(uSe,"STRONG",{});var gvt=s(Spe);UJo=r(gvt,"tapas"),gvt.forEach(t),JJo=r(uSe," \u2014 "),HX=n(uSe,"A",{href:!0});var hvt=s(HX);YJo=r(hvt,"TapasForQuestionAnswering"),hvt.forEach(t),KJo=r(uSe," (TAPAS model)"),uSe.forEach(t),fvt.forEach(t),ZJo=i(ma),pT=n(ma,"P",{});var pSe=s(pT);eYo=r(pSe,"The model is set in evaluation mode by default using "),Rpe=n(pSe,"CODE",{});var uvt=s(Rpe);oYo=r(uvt,"model.eval()"),uvt.forEach(t),rYo=r(pSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ppe=n(pSe,"CODE",{});var pvt=s(Ppe);tYo=r(pvt,"model.train()"),pvt.forEach(t),pSe.forEach(t),aYo=i(ma),T(_T.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),Kje=i(m),nd=n(m,"H2",{class:!0});var rOe=s(nd);bT=n(rOe,"A",{id:!0,class:!0,href:!0});var _vt=s(bT);Bpe=n(_vt,"SPAN",{});var bvt=s(Bpe);T(b7.$$.fragment,bvt),bvt.forEach(t),_vt.forEach(t),nYo=i(rOe),Ipe=n(rOe,"SPAN",{});var vvt=s(Ipe);sYo=r(vvt,"AutoModelForImageClassification"),vvt.forEach(t),rOe.forEach(t),Zje=i(m),jo=n(m,"DIV",{class:!0});var el=s(jo);T(v7.$$.fragment,el),lYo=i(el),sd=n(el,"P",{});var Tee=s(sd);iYo=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),UX=n(Tee,"A",{href:!0});var Fvt=s(UX);dYo=r(Fvt,"from_pretrained()"),Fvt.forEach(t),cYo=r(Tee," class method or the "),JX=n(Tee,"A",{href:!0});var Tvt=s(JX);mYo=r(Tvt,"from_config()"),Tvt.forEach(t),fYo=r(Tee,` class
method.`),Tee.forEach(t),gYo=i(el),F7=n(el,"P",{});var tOe=s(F7);hYo=r(tOe,"This class cannot be instantiated directly using "),Npe=n(tOe,"CODE",{});var Mvt=s(Npe);uYo=r(Mvt,"__init__()"),Mvt.forEach(t),pYo=r(tOe," (throws an error)."),tOe.forEach(t),_Yo=i(el),ht=n(el,"DIV",{class:!0});var _6=s(ht);T(T7.$$.fragment,_6),bYo=i(_6),qpe=n(_6,"P",{});var Evt=s(qpe);vYo=r(Evt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Evt.forEach(t),FYo=i(_6),ld=n(_6,"P",{});var Mee=s(ld);TYo=r(Mee,`Note:
Loading a model from its configuration file does `),jpe=n(Mee,"STRONG",{});var Cvt=s(jpe);MYo=r(Cvt,"not"),Cvt.forEach(t),EYo=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(Mee,"A",{href:!0});var wvt=s(YX);CYo=r(wvt,"from_pretrained()"),wvt.forEach(t),wYo=r(Mee," to load the model weights."),Mee.forEach(t),AYo=i(_6),T(vT.$$.fragment,_6),_6.forEach(t),LYo=i(el),lo=n(el,"DIV",{class:!0});var fa=s(lo);T(M7.$$.fragment,fa),yYo=i(fa),Dpe=n(fa,"P",{});var Avt=s(Dpe);xYo=r(Avt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Avt.forEach(t),$Yo=i(fa),ja=n(fa,"P",{});var b6=s(ja);kYo=r(b6,"The model class to instantiate is selected based on the "),Gpe=n(b6,"CODE",{});var Lvt=s(Gpe);SYo=r(Lvt,"model_type"),Lvt.forEach(t),RYo=r(b6,` property of the config object (either
passed as an argument or loaded from `),Ope=n(b6,"CODE",{});var yvt=s(Ope);PYo=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),BYo=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n(b6,"CODE",{});var xvt=s(Vpe);IYo=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),NYo=r(b6,":"),b6.forEach(t),qYo=i(fa),ve=n(fa,"UL",{});var Te=s(ve);FT=n(Te,"LI",{});var _Se=s(FT);Xpe=n(_Se,"STRONG",{});var $vt=s(Xpe);jYo=r($vt,"beit"),$vt.forEach(t),DYo=r(_Se," \u2014 "),KX=n(_Se,"A",{href:!0});var kvt=s(KX);GYo=r(kvt,"BeitForImageClassification"),kvt.forEach(t),OYo=r(_Se," (BEiT model)"),_Se.forEach(t),VYo=i(Te),TT=n(Te,"LI",{});var bSe=s(TT);zpe=n(bSe,"STRONG",{});var Svt=s(zpe);XYo=r(Svt,"convnext"),Svt.forEach(t),zYo=r(bSe," \u2014 "),ZX=n(bSe,"A",{href:!0});var Rvt=s(ZX);WYo=r(Rvt,"ConvNextForImageClassification"),Rvt.forEach(t),QYo=r(bSe," (ConvNeXT model)"),bSe.forEach(t),HYo=i(Te),MT=n(Te,"LI",{});var vSe=s(MT);Wpe=n(vSe,"STRONG",{});var Pvt=s(Wpe);UYo=r(Pvt,"cvt"),Pvt.forEach(t),JYo=r(vSe," \u2014 "),ez=n(vSe,"A",{href:!0});var Bvt=s(ez);YYo=r(Bvt,"CvtForImageClassification"),Bvt.forEach(t),KYo=r(vSe," (CvT model)"),vSe.forEach(t),ZYo=i(Te),ET=n(Te,"LI",{});var FSe=s(ET);Qpe=n(FSe,"STRONG",{});var Ivt=s(Qpe);eKo=r(Ivt,"data2vec-vision"),Ivt.forEach(t),oKo=r(FSe," \u2014 "),oz=n(FSe,"A",{href:!0});var Nvt=s(oz);rKo=r(Nvt,"Data2VecVisionForImageClassification"),Nvt.forEach(t),tKo=r(FSe," (Data2VecVision model)"),FSe.forEach(t),aKo=i(Te),Bs=n(Te,"LI",{});var lk=s(Bs);Hpe=n(lk,"STRONG",{});var qvt=s(Hpe);nKo=r(qvt,"deit"),qvt.forEach(t),sKo=r(lk," \u2014 "),rz=n(lk,"A",{href:!0});var jvt=s(rz);lKo=r(jvt,"DeiTForImageClassification"),jvt.forEach(t),iKo=r(lk," or "),tz=n(lk,"A",{href:!0});var Dvt=s(tz);dKo=r(Dvt,"DeiTForImageClassificationWithTeacher"),Dvt.forEach(t),cKo=r(lk," (DeiT model)"),lk.forEach(t),mKo=i(Te),CT=n(Te,"LI",{});var TSe=s(CT);Upe=n(TSe,"STRONG",{});var Gvt=s(Upe);fKo=r(Gvt,"imagegpt"),Gvt.forEach(t),gKo=r(TSe," \u2014 "),az=n(TSe,"A",{href:!0});var Ovt=s(az);hKo=r(Ovt,"ImageGPTForImageClassification"),Ovt.forEach(t),uKo=r(TSe," (ImageGPT model)"),TSe.forEach(t),pKo=i(Te),Is=n(Te,"LI",{});var ik=s(Is);Jpe=n(ik,"STRONG",{});var Vvt=s(Jpe);_Ko=r(Vvt,"levit"),Vvt.forEach(t),bKo=r(ik," \u2014 "),nz=n(ik,"A",{href:!0});var Xvt=s(nz);vKo=r(Xvt,"LevitForImageClassification"),Xvt.forEach(t),FKo=r(ik," or "),sz=n(ik,"A",{href:!0});var zvt=s(sz);TKo=r(zvt,"LevitForImageClassificationWithTeacher"),zvt.forEach(t),MKo=r(ik," (LeViT model)"),ik.forEach(t),EKo=i(Te),ut=n(Te,"LI",{});var hm=s(ut);Ype=n(hm,"STRONG",{});var Wvt=s(Ype);CKo=r(Wvt,"perceiver"),Wvt.forEach(t),wKo=r(hm," \u2014 "),lz=n(hm,"A",{href:!0});var Qvt=s(lz);AKo=r(Qvt,"PerceiverForImageClassificationLearned"),Qvt.forEach(t),LKo=r(hm," or "),iz=n(hm,"A",{href:!0});var Hvt=s(iz);yKo=r(Hvt,"PerceiverForImageClassificationFourier"),Hvt.forEach(t),xKo=r(hm," or "),dz=n(hm,"A",{href:!0});var Uvt=s(dz);$Ko=r(Uvt,"PerceiverForImageClassificationConvProcessing"),Uvt.forEach(t),kKo=r(hm," (Perceiver model)"),hm.forEach(t),SKo=i(Te),wT=n(Te,"LI",{});var MSe=s(wT);Kpe=n(MSe,"STRONG",{});var Jvt=s(Kpe);RKo=r(Jvt,"poolformer"),Jvt.forEach(t),PKo=r(MSe," \u2014 "),cz=n(MSe,"A",{href:!0});var Yvt=s(cz);BKo=r(Yvt,"PoolFormerForImageClassification"),Yvt.forEach(t),IKo=r(MSe," (PoolFormer model)"),MSe.forEach(t),NKo=i(Te),AT=n(Te,"LI",{});var ESe=s(AT);Zpe=n(ESe,"STRONG",{});var Kvt=s(Zpe);qKo=r(Kvt,"regnet"),Kvt.forEach(t),jKo=r(ESe," \u2014 "),mz=n(ESe,"A",{href:!0});var Zvt=s(mz);DKo=r(Zvt,"RegNetForImageClassification"),Zvt.forEach(t),GKo=r(ESe," (RegNet model)"),ESe.forEach(t),OKo=i(Te),LT=n(Te,"LI",{});var CSe=s(LT);e_e=n(CSe,"STRONG",{});var eFt=s(e_e);VKo=r(eFt,"resnet"),eFt.forEach(t),XKo=r(CSe," \u2014 "),fz=n(CSe,"A",{href:!0});var oFt=s(fz);zKo=r(oFt,"ResNetForImageClassification"),oFt.forEach(t),WKo=r(CSe," (ResNet model)"),CSe.forEach(t),QKo=i(Te),yT=n(Te,"LI",{});var wSe=s(yT);o_e=n(wSe,"STRONG",{});var rFt=s(o_e);HKo=r(rFt,"segformer"),rFt.forEach(t),UKo=r(wSe," \u2014 "),gz=n(wSe,"A",{href:!0});var tFt=s(gz);JKo=r(tFt,"SegformerForImageClassification"),tFt.forEach(t),YKo=r(wSe," (SegFormer model)"),wSe.forEach(t),KKo=i(Te),xT=n(Te,"LI",{});var ASe=s(xT);r_e=n(ASe,"STRONG",{});var aFt=s(r_e);ZKo=r(aFt,"swin"),aFt.forEach(t),eZo=r(ASe," \u2014 "),hz=n(ASe,"A",{href:!0});var nFt=s(hz);oZo=r(nFt,"SwinForImageClassification"),nFt.forEach(t),rZo=r(ASe," (Swin Transformer model)"),ASe.forEach(t),tZo=i(Te),$T=n(Te,"LI",{});var LSe=s($T);t_e=n(LSe,"STRONG",{});var sFt=s(t_e);aZo=r(sFt,"van"),sFt.forEach(t),nZo=r(LSe," \u2014 "),uz=n(LSe,"A",{href:!0});var lFt=s(uz);sZo=r(lFt,"VanForImageClassification"),lFt.forEach(t),lZo=r(LSe," (VAN model)"),LSe.forEach(t),iZo=i(Te),kT=n(Te,"LI",{});var ySe=s(kT);a_e=n(ySe,"STRONG",{});var iFt=s(a_e);dZo=r(iFt,"vit"),iFt.forEach(t),cZo=r(ySe," \u2014 "),pz=n(ySe,"A",{href:!0});var dFt=s(pz);mZo=r(dFt,"ViTForImageClassification"),dFt.forEach(t),fZo=r(ySe," (ViT model)"),ySe.forEach(t),Te.forEach(t),gZo=i(fa),ST=n(fa,"P",{});var xSe=s(ST);hZo=r(xSe,"The model is set in evaluation mode by default using "),n_e=n(xSe,"CODE",{});var cFt=s(n_e);uZo=r(cFt,"model.eval()"),cFt.forEach(t),pZo=r(xSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=n(xSe,"CODE",{});var mFt=s(s_e);_Zo=r(mFt,"model.train()"),mFt.forEach(t),xSe.forEach(t),bZo=i(fa),T(RT.$$.fragment,fa),fa.forEach(t),el.forEach(t),eDe=i(m),id=n(m,"H2",{class:!0});var aOe=s(id);PT=n(aOe,"A",{id:!0,class:!0,href:!0});var fFt=s(PT);l_e=n(fFt,"SPAN",{});var gFt=s(l_e);T(E7.$$.fragment,gFt),gFt.forEach(t),fFt.forEach(t),vZo=i(aOe),i_e=n(aOe,"SPAN",{});var hFt=s(i_e);FZo=r(hFt,"AutoModelForVision2Seq"),hFt.forEach(t),aOe.forEach(t),oDe=i(m),Do=n(m,"DIV",{class:!0});var ol=s(Do);T(C7.$$.fragment,ol),TZo=i(ol),dd=n(ol,"P",{});var Eee=s(dd);MZo=r(Eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_z=n(Eee,"A",{href:!0});var uFt=s(_z);EZo=r(uFt,"from_pretrained()"),uFt.forEach(t),CZo=r(Eee," class method or the "),bz=n(Eee,"A",{href:!0});var pFt=s(bz);wZo=r(pFt,"from_config()"),pFt.forEach(t),AZo=r(Eee,` class
method.`),Eee.forEach(t),LZo=i(ol),w7=n(ol,"P",{});var nOe=s(w7);yZo=r(nOe,"This class cannot be instantiated directly using "),d_e=n(nOe,"CODE",{});var _Ft=s(d_e);xZo=r(_Ft,"__init__()"),_Ft.forEach(t),$Zo=r(nOe," (throws an error)."),nOe.forEach(t),kZo=i(ol),pt=n(ol,"DIV",{class:!0});var v6=s(pt);T(A7.$$.fragment,v6),SZo=i(v6),c_e=n(v6,"P",{});var bFt=s(c_e);RZo=r(bFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bFt.forEach(t),PZo=i(v6),cd=n(v6,"P",{});var Cee=s(cd);BZo=r(Cee,`Note:
Loading a model from its configuration file does `),m_e=n(Cee,"STRONG",{});var vFt=s(m_e);IZo=r(vFt,"not"),vFt.forEach(t),NZo=r(Cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(Cee,"A",{href:!0});var FFt=s(vz);qZo=r(FFt,"from_pretrained()"),FFt.forEach(t),jZo=r(Cee," to load the model weights."),Cee.forEach(t),DZo=i(v6),T(BT.$$.fragment,v6),v6.forEach(t),GZo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(L7.$$.fragment,ga),OZo=i(ga),f_e=n(ga,"P",{});var TFt=s(f_e);VZo=r(TFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TFt.forEach(t),XZo=i(ga),Da=n(ga,"P",{});var F6=s(Da);zZo=r(F6,"The model class to instantiate is selected based on the "),g_e=n(F6,"CODE",{});var MFt=s(g_e);WZo=r(MFt,"model_type"),MFt.forEach(t),QZo=r(F6,` property of the config object (either
passed as an argument or loaded from `),h_e=n(F6,"CODE",{});var EFt=s(h_e);HZo=r(EFt,"pretrained_model_name_or_path"),EFt.forEach(t),UZo=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(F6,"CODE",{});var CFt=s(u_e);JZo=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),YZo=r(F6,":"),F6.forEach(t),KZo=i(ga),p_e=n(ga,"UL",{});var wFt=s(p_e);IT=n(wFt,"LI",{});var $Se=s(IT);__e=n($Se,"STRONG",{});var AFt=s(__e);ZZo=r(AFt,"vision-encoder-decoder"),AFt.forEach(t),eer=r($Se," \u2014 "),Fz=n($Se,"A",{href:!0});var LFt=s(Fz);oer=r(LFt,"VisionEncoderDecoderModel"),LFt.forEach(t),rer=r($Se," (Vision Encoder decoder model)"),$Se.forEach(t),wFt.forEach(t),ter=i(ga),NT=n(ga,"P",{});var kSe=s(NT);aer=r(kSe,"The model is set in evaluation mode by default using "),b_e=n(kSe,"CODE",{});var yFt=s(b_e);ner=r(yFt,"model.eval()"),yFt.forEach(t),ser=r(kSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=n(kSe,"CODE",{});var xFt=s(v_e);ler=r(xFt,"model.train()"),xFt.forEach(t),kSe.forEach(t),ier=i(ga),T(qT.$$.fragment,ga),ga.forEach(t),ol.forEach(t),rDe=i(m),md=n(m,"H2",{class:!0});var sOe=s(md);jT=n(sOe,"A",{id:!0,class:!0,href:!0});var $Ft=s(jT);F_e=n($Ft,"SPAN",{});var kFt=s(F_e);T(y7.$$.fragment,kFt),kFt.forEach(t),$Ft.forEach(t),der=i(sOe),T_e=n(sOe,"SPAN",{});var SFt=s(T_e);cer=r(SFt,"AutoModelForAudioClassification"),SFt.forEach(t),sOe.forEach(t),tDe=i(m),Go=n(m,"DIV",{class:!0});var rl=s(Go);T(x7.$$.fragment,rl),mer=i(rl),fd=n(rl,"P",{});var wee=s(fd);fer=r(wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Tz=n(wee,"A",{href:!0});var RFt=s(Tz);ger=r(RFt,"from_pretrained()"),RFt.forEach(t),her=r(wee," class method or the "),Mz=n(wee,"A",{href:!0});var PFt=s(Mz);uer=r(PFt,"from_config()"),PFt.forEach(t),per=r(wee,` class
method.`),wee.forEach(t),_er=i(rl),$7=n(rl,"P",{});var lOe=s($7);ber=r(lOe,"This class cannot be instantiated directly using "),M_e=n(lOe,"CODE",{});var BFt=s(M_e);ver=r(BFt,"__init__()"),BFt.forEach(t),Fer=r(lOe," (throws an error)."),lOe.forEach(t),Ter=i(rl),_t=n(rl,"DIV",{class:!0});var T6=s(_t);T(k7.$$.fragment,T6),Mer=i(T6),E_e=n(T6,"P",{});var IFt=s(E_e);Eer=r(IFt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),IFt.forEach(t),Cer=i(T6),gd=n(T6,"P",{});var Aee=s(gd);wer=r(Aee,`Note:
Loading a model from its configuration file does `),C_e=n(Aee,"STRONG",{});var NFt=s(C_e);Aer=r(NFt,"not"),NFt.forEach(t),Ler=r(Aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(Aee,"A",{href:!0});var qFt=s(Ez);yer=r(qFt,"from_pretrained()"),qFt.forEach(t),xer=r(Aee," to load the model weights."),Aee.forEach(t),$er=i(T6),T(DT.$$.fragment,T6),T6.forEach(t),ker=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(S7.$$.fragment,ha),Ser=i(ha),w_e=n(ha,"P",{});var jFt=s(w_e);Rer=r(jFt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),jFt.forEach(t),Per=i(ha),Ga=n(ha,"P",{});var M6=s(Ga);Ber=r(M6,"The model class to instantiate is selected based on the "),A_e=n(M6,"CODE",{});var DFt=s(A_e);Ier=r(DFt,"model_type"),DFt.forEach(t),Ner=r(M6,` property of the config object (either
passed as an argument or loaded from `),L_e=n(M6,"CODE",{});var GFt=s(L_e);qer=r(GFt,"pretrained_model_name_or_path"),GFt.forEach(t),jer=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(M6,"CODE",{});var OFt=s(y_e);Der=r(OFt,"pretrained_model_name_or_path"),OFt.forEach(t),Ger=r(M6,":"),M6.forEach(t),Oer=i(ha),Re=n(ha,"UL",{});var Xe=s(Re);GT=n(Xe,"LI",{});var SSe=s(GT);x_e=n(SSe,"STRONG",{});var VFt=s(x_e);Ver=r(VFt,"data2vec-audio"),VFt.forEach(t),Xer=r(SSe," \u2014 "),Cz=n(SSe,"A",{href:!0});var XFt=s(Cz);zer=r(XFt,"Data2VecAudioForSequenceClassification"),XFt.forEach(t),Wer=r(SSe," (Data2VecAudio model)"),SSe.forEach(t),Qer=i(Xe),OT=n(Xe,"LI",{});var RSe=s(OT);$_e=n(RSe,"STRONG",{});var zFt=s($_e);Her=r(zFt,"hubert"),zFt.forEach(t),Uer=r(RSe," \u2014 "),wz=n(RSe,"A",{href:!0});var WFt=s(wz);Jer=r(WFt,"HubertForSequenceClassification"),WFt.forEach(t),Yer=r(RSe," (Hubert model)"),RSe.forEach(t),Ker=i(Xe),VT=n(Xe,"LI",{});var PSe=s(VT);k_e=n(PSe,"STRONG",{});var QFt=s(k_e);Zer=r(QFt,"sew"),QFt.forEach(t),eor=r(PSe," \u2014 "),Az=n(PSe,"A",{href:!0});var HFt=s(Az);oor=r(HFt,"SEWForSequenceClassification"),HFt.forEach(t),ror=r(PSe," (SEW model)"),PSe.forEach(t),tor=i(Xe),XT=n(Xe,"LI",{});var BSe=s(XT);S_e=n(BSe,"STRONG",{});var UFt=s(S_e);aor=r(UFt,"sew-d"),UFt.forEach(t),nor=r(BSe," \u2014 "),Lz=n(BSe,"A",{href:!0});var JFt=s(Lz);sor=r(JFt,"SEWDForSequenceClassification"),JFt.forEach(t),lor=r(BSe," (SEW-D model)"),BSe.forEach(t),ior=i(Xe),zT=n(Xe,"LI",{});var ISe=s(zT);R_e=n(ISe,"STRONG",{});var YFt=s(R_e);dor=r(YFt,"unispeech"),YFt.forEach(t),cor=r(ISe," \u2014 "),yz=n(ISe,"A",{href:!0});var KFt=s(yz);mor=r(KFt,"UniSpeechForSequenceClassification"),KFt.forEach(t),gor=r(ISe," (UniSpeech model)"),ISe.forEach(t),hor=i(Xe),WT=n(Xe,"LI",{});var NSe=s(WT);P_e=n(NSe,"STRONG",{});var ZFt=s(P_e);uor=r(ZFt,"unispeech-sat"),ZFt.forEach(t),por=r(NSe," \u2014 "),xz=n(NSe,"A",{href:!0});var e1t=s(xz);_or=r(e1t,"UniSpeechSatForSequenceClassification"),e1t.forEach(t),bor=r(NSe," (UniSpeechSat model)"),NSe.forEach(t),vor=i(Xe),QT=n(Xe,"LI",{});var qSe=s(QT);B_e=n(qSe,"STRONG",{});var o1t=s(B_e);For=r(o1t,"wav2vec2"),o1t.forEach(t),Tor=r(qSe," \u2014 "),$z=n(qSe,"A",{href:!0});var r1t=s($z);Mor=r(r1t,"Wav2Vec2ForSequenceClassification"),r1t.forEach(t),Eor=r(qSe," (Wav2Vec2 model)"),qSe.forEach(t),Cor=i(Xe),HT=n(Xe,"LI",{});var jSe=s(HT);I_e=n(jSe,"STRONG",{});var t1t=s(I_e);wor=r(t1t,"wav2vec2-conformer"),t1t.forEach(t),Aor=r(jSe," \u2014 "),kz=n(jSe,"A",{href:!0});var a1t=s(kz);Lor=r(a1t,"Wav2Vec2ConformerForSequenceClassification"),a1t.forEach(t),yor=r(jSe," (Wav2Vec2-Conformer model)"),jSe.forEach(t),xor=i(Xe),UT=n(Xe,"LI",{});var DSe=s(UT);N_e=n(DSe,"STRONG",{});var n1t=s(N_e);$or=r(n1t,"wavlm"),n1t.forEach(t),kor=r(DSe," \u2014 "),Sz=n(DSe,"A",{href:!0});var s1t=s(Sz);Sor=r(s1t,"WavLMForSequenceClassification"),s1t.forEach(t),Ror=r(DSe," (WavLM model)"),DSe.forEach(t),Xe.forEach(t),Por=i(ha),JT=n(ha,"P",{});var GSe=s(JT);Bor=r(GSe,"The model is set in evaluation mode by default using "),q_e=n(GSe,"CODE",{});var l1t=s(q_e);Ior=r(l1t,"model.eval()"),l1t.forEach(t),Nor=r(GSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),j_e=n(GSe,"CODE",{});var i1t=s(j_e);qor=r(i1t,"model.train()"),i1t.forEach(t),GSe.forEach(t),jor=i(ha),T(YT.$$.fragment,ha),ha.forEach(t),rl.forEach(t),aDe=i(m),hd=n(m,"H2",{class:!0});var iOe=s(hd);KT=n(iOe,"A",{id:!0,class:!0,href:!0});var d1t=s(KT);D_e=n(d1t,"SPAN",{});var c1t=s(D_e);T(R7.$$.fragment,c1t),c1t.forEach(t),d1t.forEach(t),Dor=i(iOe),G_e=n(iOe,"SPAN",{});var m1t=s(G_e);Gor=r(m1t,"AutoModelForAudioFrameClassification"),m1t.forEach(t),iOe.forEach(t),nDe=i(m),Oo=n(m,"DIV",{class:!0});var tl=s(Oo);T(P7.$$.fragment,tl),Oor=i(tl),ud=n(tl,"P",{});var Lee=s(ud);Vor=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Rz=n(Lee,"A",{href:!0});var f1t=s(Rz);Xor=r(f1t,"from_pretrained()"),f1t.forEach(t),zor=r(Lee," class method or the "),Pz=n(Lee,"A",{href:!0});var g1t=s(Pz);Wor=r(g1t,"from_config()"),g1t.forEach(t),Qor=r(Lee,` class
method.`),Lee.forEach(t),Hor=i(tl),B7=n(tl,"P",{});var dOe=s(B7);Uor=r(dOe,"This class cannot be instantiated directly using "),O_e=n(dOe,"CODE",{});var h1t=s(O_e);Jor=r(h1t,"__init__()"),h1t.forEach(t),Yor=r(dOe," (throws an error)."),dOe.forEach(t),Kor=i(tl),bt=n(tl,"DIV",{class:!0});var E6=s(bt);T(I7.$$.fragment,E6),Zor=i(E6),V_e=n(E6,"P",{});var u1t=s(V_e);err=r(u1t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),u1t.forEach(t),orr=i(E6),pd=n(E6,"P",{});var yee=s(pd);rrr=r(yee,`Note:
Loading a model from its configuration file does `),X_e=n(yee,"STRONG",{});var p1t=s(X_e);trr=r(p1t,"not"),p1t.forEach(t),arr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(yee,"A",{href:!0});var _1t=s(Bz);nrr=r(_1t,"from_pretrained()"),_1t.forEach(t),srr=r(yee," to load the model weights."),yee.forEach(t),lrr=i(E6),T(ZT.$$.fragment,E6),E6.forEach(t),irr=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(N7.$$.fragment,ua),drr=i(ua),z_e=n(ua,"P",{});var b1t=s(z_e);crr=r(b1t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),b1t.forEach(t),mrr=i(ua),Oa=n(ua,"P",{});var C6=s(Oa);frr=r(C6,"The model class to instantiate is selected based on the "),W_e=n(C6,"CODE",{});var v1t=s(W_e);grr=r(v1t,"model_type"),v1t.forEach(t),hrr=r(C6,` property of the config object (either
passed as an argument or loaded from `),Q_e=n(C6,"CODE",{});var F1t=s(Q_e);urr=r(F1t,"pretrained_model_name_or_path"),F1t.forEach(t),prr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=n(C6,"CODE",{});var T1t=s(H_e);_rr=r(T1t,"pretrained_model_name_or_path"),T1t.forEach(t),brr=r(C6,":"),C6.forEach(t),vrr=i(ua),Kr=n(ua,"UL",{});var al=s(Kr);eM=n(al,"LI",{});var OSe=s(eM);U_e=n(OSe,"STRONG",{});var M1t=s(U_e);Frr=r(M1t,"data2vec-audio"),M1t.forEach(t),Trr=r(OSe," \u2014 "),Iz=n(OSe,"A",{href:!0});var E1t=s(Iz);Mrr=r(E1t,"Data2VecAudioForAudioFrameClassification"),E1t.forEach(t),Err=r(OSe," (Data2VecAudio model)"),OSe.forEach(t),Crr=i(al),oM=n(al,"LI",{});var VSe=s(oM);J_e=n(VSe,"STRONG",{});var C1t=s(J_e);wrr=r(C1t,"unispeech-sat"),C1t.forEach(t),Arr=r(VSe," \u2014 "),Nz=n(VSe,"A",{href:!0});var w1t=s(Nz);Lrr=r(w1t,"UniSpeechSatForAudioFrameClassification"),w1t.forEach(t),yrr=r(VSe," (UniSpeechSat model)"),VSe.forEach(t),xrr=i(al),rM=n(al,"LI",{});var XSe=s(rM);Y_e=n(XSe,"STRONG",{});var A1t=s(Y_e);$rr=r(A1t,"wav2vec2"),A1t.forEach(t),krr=r(XSe," \u2014 "),qz=n(XSe,"A",{href:!0});var L1t=s(qz);Srr=r(L1t,"Wav2Vec2ForAudioFrameClassification"),L1t.forEach(t),Rrr=r(XSe," (Wav2Vec2 model)"),XSe.forEach(t),Prr=i(al),tM=n(al,"LI",{});var zSe=s(tM);K_e=n(zSe,"STRONG",{});var y1t=s(K_e);Brr=r(y1t,"wav2vec2-conformer"),y1t.forEach(t),Irr=r(zSe," \u2014 "),jz=n(zSe,"A",{href:!0});var x1t=s(jz);Nrr=r(x1t,"Wav2Vec2ConformerForAudioFrameClassification"),x1t.forEach(t),qrr=r(zSe," (Wav2Vec2-Conformer model)"),zSe.forEach(t),jrr=i(al),aM=n(al,"LI",{});var WSe=s(aM);Z_e=n(WSe,"STRONG",{});var $1t=s(Z_e);Drr=r($1t,"wavlm"),$1t.forEach(t),Grr=r(WSe," \u2014 "),Dz=n(WSe,"A",{href:!0});var k1t=s(Dz);Orr=r(k1t,"WavLMForAudioFrameClassification"),k1t.forEach(t),Vrr=r(WSe," (WavLM model)"),WSe.forEach(t),al.forEach(t),Xrr=i(ua),nM=n(ua,"P",{});var QSe=s(nM);zrr=r(QSe,"The model is set in evaluation mode by default using "),ebe=n(QSe,"CODE",{});var S1t=s(ebe);Wrr=r(S1t,"model.eval()"),S1t.forEach(t),Qrr=r(QSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=n(QSe,"CODE",{});var R1t=s(obe);Hrr=r(R1t,"model.train()"),R1t.forEach(t),QSe.forEach(t),Urr=i(ua),T(sM.$$.fragment,ua),ua.forEach(t),tl.forEach(t),sDe=i(m),_d=n(m,"H2",{class:!0});var cOe=s(_d);lM=n(cOe,"A",{id:!0,class:!0,href:!0});var P1t=s(lM);rbe=n(P1t,"SPAN",{});var B1t=s(rbe);T(q7.$$.fragment,B1t),B1t.forEach(t),P1t.forEach(t),Jrr=i(cOe),tbe=n(cOe,"SPAN",{});var I1t=s(tbe);Yrr=r(I1t,"AutoModelForCTC"),I1t.forEach(t),cOe.forEach(t),lDe=i(m),Vo=n(m,"DIV",{class:!0});var nl=s(Vo);T(j7.$$.fragment,nl),Krr=i(nl),bd=n(nl,"P",{});var xee=s(bd);Zrr=r(xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Gz=n(xee,"A",{href:!0});var N1t=s(Gz);etr=r(N1t,"from_pretrained()"),N1t.forEach(t),otr=r(xee," class method or the "),Oz=n(xee,"A",{href:!0});var q1t=s(Oz);rtr=r(q1t,"from_config()"),q1t.forEach(t),ttr=r(xee,` class
method.`),xee.forEach(t),atr=i(nl),D7=n(nl,"P",{});var mOe=s(D7);ntr=r(mOe,"This class cannot be instantiated directly using "),abe=n(mOe,"CODE",{});var j1t=s(abe);str=r(j1t,"__init__()"),j1t.forEach(t),ltr=r(mOe," (throws an error)."),mOe.forEach(t),itr=i(nl),vt=n(nl,"DIV",{class:!0});var w6=s(vt);T(G7.$$.fragment,w6),dtr=i(w6),nbe=n(w6,"P",{});var D1t=s(nbe);ctr=r(D1t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),D1t.forEach(t),mtr=i(w6),vd=n(w6,"P",{});var $ee=s(vd);ftr=r($ee,`Note:
Loading a model from its configuration file does `),sbe=n($ee,"STRONG",{});var G1t=s(sbe);gtr=r(G1t,"not"),G1t.forEach(t),htr=r($ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n($ee,"A",{href:!0});var O1t=s(Vz);utr=r(O1t,"from_pretrained()"),O1t.forEach(t),ptr=r($ee," to load the model weights."),$ee.forEach(t),_tr=i(w6),T(iM.$$.fragment,w6),w6.forEach(t),btr=i(nl),fo=n(nl,"DIV",{class:!0});var pa=s(fo);T(O7.$$.fragment,pa),vtr=i(pa),lbe=n(pa,"P",{});var V1t=s(lbe);Ftr=r(V1t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),V1t.forEach(t),Ttr=i(pa),Va=n(pa,"P",{});var A6=s(Va);Mtr=r(A6,"The model class to instantiate is selected based on the "),ibe=n(A6,"CODE",{});var X1t=s(ibe);Etr=r(X1t,"model_type"),X1t.forEach(t),Ctr=r(A6,` property of the config object (either
passed as an argument or loaded from `),dbe=n(A6,"CODE",{});var z1t=s(dbe);wtr=r(z1t,"pretrained_model_name_or_path"),z1t.forEach(t),Atr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(A6,"CODE",{});var W1t=s(cbe);Ltr=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),ytr=r(A6,":"),A6.forEach(t),xtr=i(pa),Le=n(pa,"UL",{});var Be=s(Le);dM=n(Be,"LI",{});var HSe=s(dM);mbe=n(HSe,"STRONG",{});var Q1t=s(mbe);$tr=r(Q1t,"data2vec-audio"),Q1t.forEach(t),ktr=r(HSe," \u2014 "),Xz=n(HSe,"A",{href:!0});var H1t=s(Xz);Str=r(H1t,"Data2VecAudioForCTC"),H1t.forEach(t),Rtr=r(HSe," (Data2VecAudio model)"),HSe.forEach(t),Ptr=i(Be),cM=n(Be,"LI",{});var USe=s(cM);fbe=n(USe,"STRONG",{});var U1t=s(fbe);Btr=r(U1t,"hubert"),U1t.forEach(t),Itr=r(USe," \u2014 "),zz=n(USe,"A",{href:!0});var J1t=s(zz);Ntr=r(J1t,"HubertForCTC"),J1t.forEach(t),qtr=r(USe," (Hubert model)"),USe.forEach(t),jtr=i(Be),mM=n(Be,"LI",{});var JSe=s(mM);gbe=n(JSe,"STRONG",{});var Y1t=s(gbe);Dtr=r(Y1t,"mctct"),Y1t.forEach(t),Gtr=r(JSe," \u2014 "),Wz=n(JSe,"A",{href:!0});var K1t=s(Wz);Otr=r(K1t,"MCTCTForCTC"),K1t.forEach(t),Vtr=r(JSe," (M-CTC-T model)"),JSe.forEach(t),Xtr=i(Be),fM=n(Be,"LI",{});var YSe=s(fM);hbe=n(YSe,"STRONG",{});var Z1t=s(hbe);ztr=r(Z1t,"sew"),Z1t.forEach(t),Wtr=r(YSe," \u2014 "),Qz=n(YSe,"A",{href:!0});var eTt=s(Qz);Qtr=r(eTt,"SEWForCTC"),eTt.forEach(t),Htr=r(YSe," (SEW model)"),YSe.forEach(t),Utr=i(Be),gM=n(Be,"LI",{});var KSe=s(gM);ube=n(KSe,"STRONG",{});var oTt=s(ube);Jtr=r(oTt,"sew-d"),oTt.forEach(t),Ytr=r(KSe," \u2014 "),Hz=n(KSe,"A",{href:!0});var rTt=s(Hz);Ktr=r(rTt,"SEWDForCTC"),rTt.forEach(t),Ztr=r(KSe," (SEW-D model)"),KSe.forEach(t),ear=i(Be),hM=n(Be,"LI",{});var ZSe=s(hM);pbe=n(ZSe,"STRONG",{});var tTt=s(pbe);oar=r(tTt,"unispeech"),tTt.forEach(t),rar=r(ZSe," \u2014 "),Uz=n(ZSe,"A",{href:!0});var aTt=s(Uz);tar=r(aTt,"UniSpeechForCTC"),aTt.forEach(t),aar=r(ZSe," (UniSpeech model)"),ZSe.forEach(t),nar=i(Be),uM=n(Be,"LI",{});var eRe=s(uM);_be=n(eRe,"STRONG",{});var nTt=s(_be);sar=r(nTt,"unispeech-sat"),nTt.forEach(t),lar=r(eRe," \u2014 "),Jz=n(eRe,"A",{href:!0});var sTt=s(Jz);iar=r(sTt,"UniSpeechSatForCTC"),sTt.forEach(t),dar=r(eRe," (UniSpeechSat model)"),eRe.forEach(t),car=i(Be),pM=n(Be,"LI",{});var oRe=s(pM);bbe=n(oRe,"STRONG",{});var lTt=s(bbe);mar=r(lTt,"wav2vec2"),lTt.forEach(t),far=r(oRe," \u2014 "),Yz=n(oRe,"A",{href:!0});var iTt=s(Yz);gar=r(iTt,"Wav2Vec2ForCTC"),iTt.forEach(t),har=r(oRe," (Wav2Vec2 model)"),oRe.forEach(t),uar=i(Be),_M=n(Be,"LI",{});var rRe=s(_M);vbe=n(rRe,"STRONG",{});var dTt=s(vbe);par=r(dTt,"wav2vec2-conformer"),dTt.forEach(t),_ar=r(rRe," \u2014 "),Kz=n(rRe,"A",{href:!0});var cTt=s(Kz);bar=r(cTt,"Wav2Vec2ConformerForCTC"),cTt.forEach(t),Far=r(rRe," (Wav2Vec2-Conformer model)"),rRe.forEach(t),Tar=i(Be),bM=n(Be,"LI",{});var tRe=s(bM);Fbe=n(tRe,"STRONG",{});var mTt=s(Fbe);Mar=r(mTt,"wavlm"),mTt.forEach(t),Ear=r(tRe," \u2014 "),Zz=n(tRe,"A",{href:!0});var fTt=s(Zz);Car=r(fTt,"WavLMForCTC"),fTt.forEach(t),war=r(tRe," (WavLM model)"),tRe.forEach(t),Be.forEach(t),Aar=i(pa),vM=n(pa,"P",{});var aRe=s(vM);Lar=r(aRe,"The model is set in evaluation mode by default using "),Tbe=n(aRe,"CODE",{});var gTt=s(Tbe);yar=r(gTt,"model.eval()"),gTt.forEach(t),xar=r(aRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mbe=n(aRe,"CODE",{});var hTt=s(Mbe);$ar=r(hTt,"model.train()"),hTt.forEach(t),aRe.forEach(t),kar=i(pa),T(FM.$$.fragment,pa),pa.forEach(t),nl.forEach(t),iDe=i(m),Fd=n(m,"H2",{class:!0});var fOe=s(Fd);TM=n(fOe,"A",{id:!0,class:!0,href:!0});var uTt=s(TM);Ebe=n(uTt,"SPAN",{});var pTt=s(Ebe);T(V7.$$.fragment,pTt),pTt.forEach(t),uTt.forEach(t),Sar=i(fOe),Cbe=n(fOe,"SPAN",{});var _Tt=s(Cbe);Rar=r(_Tt,"AutoModelForSpeechSeq2Seq"),_Tt.forEach(t),fOe.forEach(t),dDe=i(m),Xo=n(m,"DIV",{class:!0});var sl=s(Xo);T(X7.$$.fragment,sl),Par=i(sl),Td=n(sl,"P",{});var kee=s(Td);Bar=r(kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eW=n(kee,"A",{href:!0});var bTt=s(eW);Iar=r(bTt,"from_pretrained()"),bTt.forEach(t),Nar=r(kee," class method or the "),oW=n(kee,"A",{href:!0});var vTt=s(oW);qar=r(vTt,"from_config()"),vTt.forEach(t),jar=r(kee,` class
method.`),kee.forEach(t),Dar=i(sl),z7=n(sl,"P",{});var gOe=s(z7);Gar=r(gOe,"This class cannot be instantiated directly using "),wbe=n(gOe,"CODE",{});var FTt=s(wbe);Oar=r(FTt,"__init__()"),FTt.forEach(t),Var=r(gOe," (throws an error)."),gOe.forEach(t),Xar=i(sl),Ft=n(sl,"DIV",{class:!0});var L6=s(Ft);T(W7.$$.fragment,L6),zar=i(L6),Abe=n(L6,"P",{});var TTt=s(Abe);War=r(TTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),TTt.forEach(t),Qar=i(L6),Md=n(L6,"P",{});var See=s(Md);Har=r(See,`Note:
Loading a model from its configuration file does `),Lbe=n(See,"STRONG",{});var MTt=s(Lbe);Uar=r(MTt,"not"),MTt.forEach(t),Jar=r(See,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(See,"A",{href:!0});var ETt=s(rW);Yar=r(ETt,"from_pretrained()"),ETt.forEach(t),Kar=r(See," to load the model weights."),See.forEach(t),Zar=i(L6),T(MM.$$.fragment,L6),L6.forEach(t),enr=i(sl),go=n(sl,"DIV",{class:!0});var _a=s(go);T(Q7.$$.fragment,_a),onr=i(_a),ybe=n(_a,"P",{});var CTt=s(ybe);rnr=r(CTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),CTt.forEach(t),tnr=i(_a),Xa=n(_a,"P",{});var y6=s(Xa);anr=r(y6,"The model class to instantiate is selected based on the "),xbe=n(y6,"CODE",{});var wTt=s(xbe);nnr=r(wTt,"model_type"),wTt.forEach(t),snr=r(y6,` property of the config object (either
passed as an argument or loaded from `),$be=n(y6,"CODE",{});var ATt=s($be);lnr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),inr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=n(y6,"CODE",{});var LTt=s(kbe);dnr=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),cnr=r(y6,":"),y6.forEach(t),mnr=i(_a),H7=n(_a,"UL",{});var hOe=s(H7);EM=n(hOe,"LI",{});var nRe=s(EM);Sbe=n(nRe,"STRONG",{});var yTt=s(Sbe);fnr=r(yTt,"speech-encoder-decoder"),yTt.forEach(t),gnr=r(nRe," \u2014 "),tW=n(nRe,"A",{href:!0});var xTt=s(tW);hnr=r(xTt,"SpeechEncoderDecoderModel"),xTt.forEach(t),unr=r(nRe," (Speech Encoder decoder model)"),nRe.forEach(t),pnr=i(hOe),CM=n(hOe,"LI",{});var sRe=s(CM);Rbe=n(sRe,"STRONG",{});var $Tt=s(Rbe);_nr=r($Tt,"speech_to_text"),$Tt.forEach(t),bnr=r(sRe," \u2014 "),aW=n(sRe,"A",{href:!0});var kTt=s(aW);vnr=r(kTt,"Speech2TextForConditionalGeneration"),kTt.forEach(t),Fnr=r(sRe," (Speech2Text model)"),sRe.forEach(t),hOe.forEach(t),Tnr=i(_a),wM=n(_a,"P",{});var lRe=s(wM);Mnr=r(lRe,"The model is set in evaluation mode by default using "),Pbe=n(lRe,"CODE",{});var STt=s(Pbe);Enr=r(STt,"model.eval()"),STt.forEach(t),Cnr=r(lRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bbe=n(lRe,"CODE",{});var RTt=s(Bbe);wnr=r(RTt,"model.train()"),RTt.forEach(t),lRe.forEach(t),Anr=i(_a),T(AM.$$.fragment,_a),_a.forEach(t),sl.forEach(t),cDe=i(m),Ed=n(m,"H2",{class:!0});var uOe=s(Ed);LM=n(uOe,"A",{id:!0,class:!0,href:!0});var PTt=s(LM);Ibe=n(PTt,"SPAN",{});var BTt=s(Ibe);T(U7.$$.fragment,BTt),BTt.forEach(t),PTt.forEach(t),Lnr=i(uOe),Nbe=n(uOe,"SPAN",{});var ITt=s(Nbe);ynr=r(ITt,"AutoModelForAudioXVector"),ITt.forEach(t),uOe.forEach(t),mDe=i(m),zo=n(m,"DIV",{class:!0});var ll=s(zo);T(J7.$$.fragment,ll),xnr=i(ll),Cd=n(ll,"P",{});var Ree=s(Cd);$nr=r(Ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nW=n(Ree,"A",{href:!0});var NTt=s(nW);knr=r(NTt,"from_pretrained()"),NTt.forEach(t),Snr=r(Ree," class method or the "),sW=n(Ree,"A",{href:!0});var qTt=s(sW);Rnr=r(qTt,"from_config()"),qTt.forEach(t),Pnr=r(Ree,` class
method.`),Ree.forEach(t),Bnr=i(ll),Y7=n(ll,"P",{});var pOe=s(Y7);Inr=r(pOe,"This class cannot be instantiated directly using "),qbe=n(pOe,"CODE",{});var jTt=s(qbe);Nnr=r(jTt,"__init__()"),jTt.forEach(t),qnr=r(pOe," (throws an error)."),pOe.forEach(t),jnr=i(ll),Tt=n(ll,"DIV",{class:!0});var x6=s(Tt);T(K7.$$.fragment,x6),Dnr=i(x6),jbe=n(x6,"P",{});var DTt=s(jbe);Gnr=r(DTt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),DTt.forEach(t),Onr=i(x6),wd=n(x6,"P",{});var Pee=s(wd);Vnr=r(Pee,`Note:
Loading a model from its configuration file does `),Dbe=n(Pee,"STRONG",{});var GTt=s(Dbe);Xnr=r(GTt,"not"),GTt.forEach(t),znr=r(Pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(Pee,"A",{href:!0});var OTt=s(lW);Wnr=r(OTt,"from_pretrained()"),OTt.forEach(t),Qnr=r(Pee," to load the model weights."),Pee.forEach(t),Hnr=i(x6),T(yM.$$.fragment,x6),x6.forEach(t),Unr=i(ll),ho=n(ll,"DIV",{class:!0});var ba=s(ho);T(Z7.$$.fragment,ba),Jnr=i(ba),Gbe=n(ba,"P",{});var VTt=s(Gbe);Ynr=r(VTt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),VTt.forEach(t),Knr=i(ba),za=n(ba,"P",{});var $6=s(za);Znr=r($6,"The model class to instantiate is selected based on the "),Obe=n($6,"CODE",{});var XTt=s(Obe);esr=r(XTt,"model_type"),XTt.forEach(t),osr=r($6,` property of the config object (either
passed as an argument or loaded from `),Vbe=n($6,"CODE",{});var zTt=s(Vbe);rsr=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),tsr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=n($6,"CODE",{});var WTt=s(Xbe);asr=r(WTt,"pretrained_model_name_or_path"),WTt.forEach(t),nsr=r($6,":"),$6.forEach(t),ssr=i(ba),Zr=n(ba,"UL",{});var il=s(Zr);xM=n(il,"LI",{});var iRe=s(xM);zbe=n(iRe,"STRONG",{});var QTt=s(zbe);lsr=r(QTt,"data2vec-audio"),QTt.forEach(t),isr=r(iRe," \u2014 "),iW=n(iRe,"A",{href:!0});var HTt=s(iW);dsr=r(HTt,"Data2VecAudioForXVector"),HTt.forEach(t),csr=r(iRe," (Data2VecAudio model)"),iRe.forEach(t),msr=i(il),$M=n(il,"LI",{});var dRe=s($M);Wbe=n(dRe,"STRONG",{});var UTt=s(Wbe);fsr=r(UTt,"unispeech-sat"),UTt.forEach(t),gsr=r(dRe," \u2014 "),dW=n(dRe,"A",{href:!0});var JTt=s(dW);hsr=r(JTt,"UniSpeechSatForXVector"),JTt.forEach(t),usr=r(dRe," (UniSpeechSat model)"),dRe.forEach(t),psr=i(il),kM=n(il,"LI",{});var cRe=s(kM);Qbe=n(cRe,"STRONG",{});var YTt=s(Qbe);_sr=r(YTt,"wav2vec2"),YTt.forEach(t),bsr=r(cRe," \u2014 "),cW=n(cRe,"A",{href:!0});var KTt=s(cW);vsr=r(KTt,"Wav2Vec2ForXVector"),KTt.forEach(t),Fsr=r(cRe," (Wav2Vec2 model)"),cRe.forEach(t),Tsr=i(il),SM=n(il,"LI",{});var mRe=s(SM);Hbe=n(mRe,"STRONG",{});var ZTt=s(Hbe);Msr=r(ZTt,"wav2vec2-conformer"),ZTt.forEach(t),Esr=r(mRe," \u2014 "),mW=n(mRe,"A",{href:!0});var eMt=s(mW);Csr=r(eMt,"Wav2Vec2ConformerForXVector"),eMt.forEach(t),wsr=r(mRe," (Wav2Vec2-Conformer model)"),mRe.forEach(t),Asr=i(il),RM=n(il,"LI",{});var fRe=s(RM);Ube=n(fRe,"STRONG",{});var oMt=s(Ube);Lsr=r(oMt,"wavlm"),oMt.forEach(t),ysr=r(fRe," \u2014 "),fW=n(fRe,"A",{href:!0});var rMt=s(fW);xsr=r(rMt,"WavLMForXVector"),rMt.forEach(t),$sr=r(fRe," (WavLM model)"),fRe.forEach(t),il.forEach(t),ksr=i(ba),PM=n(ba,"P",{});var gRe=s(PM);Ssr=r(gRe,"The model is set in evaluation mode by default using "),Jbe=n(gRe,"CODE",{});var tMt=s(Jbe);Rsr=r(tMt,"model.eval()"),tMt.forEach(t),Psr=r(gRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ybe=n(gRe,"CODE",{});var aMt=s(Ybe);Bsr=r(aMt,"model.train()"),aMt.forEach(t),gRe.forEach(t),Isr=i(ba),T(BM.$$.fragment,ba),ba.forEach(t),ll.forEach(t),fDe=i(m),Ad=n(m,"H2",{class:!0});var _Oe=s(Ad);IM=n(_Oe,"A",{id:!0,class:!0,href:!0});var nMt=s(IM);Kbe=n(nMt,"SPAN",{});var sMt=s(Kbe);T(e8.$$.fragment,sMt),sMt.forEach(t),nMt.forEach(t),Nsr=i(_Oe),Zbe=n(_Oe,"SPAN",{});var lMt=s(Zbe);qsr=r(lMt,"AutoModelForMaskedImageModeling"),lMt.forEach(t),_Oe.forEach(t),gDe=i(m),Wo=n(m,"DIV",{class:!0});var dl=s(Wo);T(o8.$$.fragment,dl),jsr=i(dl),Ld=n(dl,"P",{});var Bee=s(Ld);Dsr=r(Bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),gW=n(Bee,"A",{href:!0});var iMt=s(gW);Gsr=r(iMt,"from_pretrained()"),iMt.forEach(t),Osr=r(Bee," class method or the "),hW=n(Bee,"A",{href:!0});var dMt=s(hW);Vsr=r(dMt,"from_config()"),dMt.forEach(t),Xsr=r(Bee,` class
method.`),Bee.forEach(t),zsr=i(dl),r8=n(dl,"P",{});var bOe=s(r8);Wsr=r(bOe,"This class cannot be instantiated directly using "),e2e=n(bOe,"CODE",{});var cMt=s(e2e);Qsr=r(cMt,"__init__()"),cMt.forEach(t),Hsr=r(bOe," (throws an error)."),bOe.forEach(t),Usr=i(dl),Mt=n(dl,"DIV",{class:!0});var k6=s(Mt);T(t8.$$.fragment,k6),Jsr=i(k6),o2e=n(k6,"P",{});var mMt=s(o2e);Ysr=r(mMt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),mMt.forEach(t),Ksr=i(k6),yd=n(k6,"P",{});var Iee=s(yd);Zsr=r(Iee,`Note:
Loading a model from its configuration file does `),r2e=n(Iee,"STRONG",{});var fMt=s(r2e);elr=r(fMt,"not"),fMt.forEach(t),olr=r(Iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(Iee,"A",{href:!0});var gMt=s(uW);rlr=r(gMt,"from_pretrained()"),gMt.forEach(t),tlr=r(Iee," to load the model weights."),Iee.forEach(t),alr=i(k6),T(NM.$$.fragment,k6),k6.forEach(t),nlr=i(dl),uo=n(dl,"DIV",{class:!0});var va=s(uo);T(a8.$$.fragment,va),slr=i(va),t2e=n(va,"P",{});var hMt=s(t2e);llr=r(hMt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),hMt.forEach(t),ilr=i(va),Wa=n(va,"P",{});var S6=s(Wa);dlr=r(S6,"The model class to instantiate is selected based on the "),a2e=n(S6,"CODE",{});var uMt=s(a2e);clr=r(uMt,"model_type"),uMt.forEach(t),mlr=r(S6,` property of the config object (either
passed as an argument or loaded from `),n2e=n(S6,"CODE",{});var pMt=s(n2e);flr=r(pMt,"pretrained_model_name_or_path"),pMt.forEach(t),glr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(S6,"CODE",{});var _Mt=s(s2e);hlr=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),ulr=r(S6,":"),S6.forEach(t),plr=i(va),xd=n(va,"UL",{});var Nee=s(xd);qM=n(Nee,"LI",{});var hRe=s(qM);l2e=n(hRe,"STRONG",{});var bMt=s(l2e);_lr=r(bMt,"deit"),bMt.forEach(t),blr=r(hRe," \u2014 "),pW=n(hRe,"A",{href:!0});var vMt=s(pW);vlr=r(vMt,"DeiTForMaskedImageModeling"),vMt.forEach(t),Flr=r(hRe," (DeiT model)"),hRe.forEach(t),Tlr=i(Nee),jM=n(Nee,"LI",{});var uRe=s(jM);i2e=n(uRe,"STRONG",{});var FMt=s(i2e);Mlr=r(FMt,"swin"),FMt.forEach(t),Elr=r(uRe," \u2014 "),_W=n(uRe,"A",{href:!0});var TMt=s(_W);Clr=r(TMt,"SwinForMaskedImageModeling"),TMt.forEach(t),wlr=r(uRe," (Swin Transformer model)"),uRe.forEach(t),Alr=i(Nee),DM=n(Nee,"LI",{});var pRe=s(DM);d2e=n(pRe,"STRONG",{});var MMt=s(d2e);Llr=r(MMt,"vit"),MMt.forEach(t),ylr=r(pRe," \u2014 "),bW=n(pRe,"A",{href:!0});var EMt=s(bW);xlr=r(EMt,"ViTForMaskedImageModeling"),EMt.forEach(t),$lr=r(pRe," (ViT model)"),pRe.forEach(t),Nee.forEach(t),klr=i(va),GM=n(va,"P",{});var _Re=s(GM);Slr=r(_Re,"The model is set in evaluation mode by default using "),c2e=n(_Re,"CODE",{});var CMt=s(c2e);Rlr=r(CMt,"model.eval()"),CMt.forEach(t),Plr=r(_Re,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=n(_Re,"CODE",{});var wMt=s(m2e);Blr=r(wMt,"model.train()"),wMt.forEach(t),_Re.forEach(t),Ilr=i(va),T(OM.$$.fragment,va),va.forEach(t),dl.forEach(t),hDe=i(m),$d=n(m,"H2",{class:!0});var vOe=s($d);VM=n(vOe,"A",{id:!0,class:!0,href:!0});var AMt=s(VM);f2e=n(AMt,"SPAN",{});var LMt=s(f2e);T(n8.$$.fragment,LMt),LMt.forEach(t),AMt.forEach(t),Nlr=i(vOe),g2e=n(vOe,"SPAN",{});var yMt=s(g2e);qlr=r(yMt,"AutoModelForObjectDetection"),yMt.forEach(t),vOe.forEach(t),uDe=i(m),Qo=n(m,"DIV",{class:!0});var cl=s(Qo);T(s8.$$.fragment,cl),jlr=i(cl),kd=n(cl,"P",{});var qee=s(kd);Dlr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),vW=n(qee,"A",{href:!0});var xMt=s(vW);Glr=r(xMt,"from_pretrained()"),xMt.forEach(t),Olr=r(qee," class method or the "),FW=n(qee,"A",{href:!0});var $Mt=s(FW);Vlr=r($Mt,"from_config()"),$Mt.forEach(t),Xlr=r(qee,` class
method.`),qee.forEach(t),zlr=i(cl),l8=n(cl,"P",{});var FOe=s(l8);Wlr=r(FOe,"This class cannot be instantiated directly using "),h2e=n(FOe,"CODE",{});var kMt=s(h2e);Qlr=r(kMt,"__init__()"),kMt.forEach(t),Hlr=r(FOe," (throws an error)."),FOe.forEach(t),Ulr=i(cl),Et=n(cl,"DIV",{class:!0});var R6=s(Et);T(i8.$$.fragment,R6),Jlr=i(R6),u2e=n(R6,"P",{});var SMt=s(u2e);Ylr=r(SMt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),SMt.forEach(t),Klr=i(R6),Sd=n(R6,"P",{});var jee=s(Sd);Zlr=r(jee,`Note:
Loading a model from its configuration file does `),p2e=n(jee,"STRONG",{});var RMt=s(p2e);eir=r(RMt,"not"),RMt.forEach(t),oir=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(jee,"A",{href:!0});var PMt=s(TW);rir=r(PMt,"from_pretrained()"),PMt.forEach(t),tir=r(jee," to load the model weights."),jee.forEach(t),air=i(R6),T(XM.$$.fragment,R6),R6.forEach(t),nir=i(cl),po=n(cl,"DIV",{class:!0});var Fa=s(po);T(d8.$$.fragment,Fa),sir=i(Fa),_2e=n(Fa,"P",{});var BMt=s(_2e);lir=r(BMt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),BMt.forEach(t),iir=i(Fa),Qa=n(Fa,"P",{});var P6=s(Qa);dir=r(P6,"The model class to instantiate is selected based on the "),b2e=n(P6,"CODE",{});var IMt=s(b2e);cir=r(IMt,"model_type"),IMt.forEach(t),mir=r(P6,` property of the config object (either
passed as an argument or loaded from `),v2e=n(P6,"CODE",{});var NMt=s(v2e);fir=r(NMt,"pretrained_model_name_or_path"),NMt.forEach(t),gir=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=n(P6,"CODE",{});var qMt=s(F2e);hir=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),uir=r(P6,":"),P6.forEach(t),pir=i(Fa),c8=n(Fa,"UL",{});var TOe=s(c8);zM=n(TOe,"LI",{});var bRe=s(zM);T2e=n(bRe,"STRONG",{});var jMt=s(T2e);_ir=r(jMt,"detr"),jMt.forEach(t),bir=r(bRe," \u2014 "),MW=n(bRe,"A",{href:!0});var DMt=s(MW);vir=r(DMt,"DetrForObjectDetection"),DMt.forEach(t),Fir=r(bRe," (DETR model)"),bRe.forEach(t),Tir=i(TOe),WM=n(TOe,"LI",{});var vRe=s(WM);M2e=n(vRe,"STRONG",{});var GMt=s(M2e);Mir=r(GMt,"yolos"),GMt.forEach(t),Eir=r(vRe," \u2014 "),EW=n(vRe,"A",{href:!0});var OMt=s(EW);Cir=r(OMt,"YolosForObjectDetection"),OMt.forEach(t),wir=r(vRe," (YOLOS model)"),vRe.forEach(t),TOe.forEach(t),Air=i(Fa),QM=n(Fa,"P",{});var FRe=s(QM);Lir=r(FRe,"The model is set in evaluation mode by default using "),E2e=n(FRe,"CODE",{});var VMt=s(E2e);yir=r(VMt,"model.eval()"),VMt.forEach(t),xir=r(FRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C2e=n(FRe,"CODE",{});var XMt=s(C2e);$ir=r(XMt,"model.train()"),XMt.forEach(t),FRe.forEach(t),kir=i(Fa),T(HM.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),pDe=i(m),Rd=n(m,"H2",{class:!0});var MOe=s(Rd);UM=n(MOe,"A",{id:!0,class:!0,href:!0});var zMt=s(UM);w2e=n(zMt,"SPAN",{});var WMt=s(w2e);T(m8.$$.fragment,WMt),WMt.forEach(t),zMt.forEach(t),Sir=i(MOe),A2e=n(MOe,"SPAN",{});var QMt=s(A2e);Rir=r(QMt,"AutoModelForImageSegmentation"),QMt.forEach(t),MOe.forEach(t),_De=i(m),Ho=n(m,"DIV",{class:!0});var ml=s(Ho);T(f8.$$.fragment,ml),Pir=i(ml),Pd=n(ml,"P",{});var Dee=s(Pd);Bir=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),CW=n(Dee,"A",{href:!0});var HMt=s(CW);Iir=r(HMt,"from_pretrained()"),HMt.forEach(t),Nir=r(Dee," class method or the "),wW=n(Dee,"A",{href:!0});var UMt=s(wW);qir=r(UMt,"from_config()"),UMt.forEach(t),jir=r(Dee,` class
method.`),Dee.forEach(t),Dir=i(ml),g8=n(ml,"P",{});var EOe=s(g8);Gir=r(EOe,"This class cannot be instantiated directly using "),L2e=n(EOe,"CODE",{});var JMt=s(L2e);Oir=r(JMt,"__init__()"),JMt.forEach(t),Vir=r(EOe," (throws an error)."),EOe.forEach(t),Xir=i(ml),Ct=n(ml,"DIV",{class:!0});var B6=s(Ct);T(h8.$$.fragment,B6),zir=i(B6),y2e=n(B6,"P",{});var YMt=s(y2e);Wir=r(YMt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),YMt.forEach(t),Qir=i(B6),Bd=n(B6,"P",{});var Gee=s(Bd);Hir=r(Gee,`Note:
Loading a model from its configuration file does `),x2e=n(Gee,"STRONG",{});var KMt=s(x2e);Uir=r(KMt,"not"),KMt.forEach(t),Jir=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(Gee,"A",{href:!0});var ZMt=s(AW);Yir=r(ZMt,"from_pretrained()"),ZMt.forEach(t),Kir=r(Gee," to load the model weights."),Gee.forEach(t),Zir=i(B6),T(JM.$$.fragment,B6),B6.forEach(t),edr=i(ml),_o=n(ml,"DIV",{class:!0});var Ta=s(_o);T(u8.$$.fragment,Ta),odr=i(Ta),$2e=n(Ta,"P",{});var e4t=s($2e);rdr=r(e4t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),e4t.forEach(t),tdr=i(Ta),Ha=n(Ta,"P",{});var I6=s(Ha);adr=r(I6,"The model class to instantiate is selected based on the "),k2e=n(I6,"CODE",{});var o4t=s(k2e);ndr=r(o4t,"model_type"),o4t.forEach(t),sdr=r(I6,` property of the config object (either
passed as an argument or loaded from `),S2e=n(I6,"CODE",{});var r4t=s(S2e);ldr=r(r4t,"pretrained_model_name_or_path"),r4t.forEach(t),idr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=n(I6,"CODE",{});var t4t=s(R2e);ddr=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),cdr=r(I6,":"),I6.forEach(t),mdr=i(Ta),P2e=n(Ta,"UL",{});var a4t=s(P2e);YM=n(a4t,"LI",{});var TRe=s(YM);B2e=n(TRe,"STRONG",{});var n4t=s(B2e);fdr=r(n4t,"detr"),n4t.forEach(t),gdr=r(TRe," \u2014 "),LW=n(TRe,"A",{href:!0});var s4t=s(LW);hdr=r(s4t,"DetrForSegmentation"),s4t.forEach(t),udr=r(TRe," (DETR model)"),TRe.forEach(t),a4t.forEach(t),pdr=i(Ta),KM=n(Ta,"P",{});var MRe=s(KM);_dr=r(MRe,"The model is set in evaluation mode by default using "),I2e=n(MRe,"CODE",{});var l4t=s(I2e);bdr=r(l4t,"model.eval()"),l4t.forEach(t),vdr=r(MRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N2e=n(MRe,"CODE",{});var i4t=s(N2e);Fdr=r(i4t,"model.train()"),i4t.forEach(t),MRe.forEach(t),Tdr=i(Ta),T(ZM.$$.fragment,Ta),Ta.forEach(t),ml.forEach(t),bDe=i(m),Id=n(m,"H2",{class:!0});var COe=s(Id);e4=n(COe,"A",{id:!0,class:!0,href:!0});var d4t=s(e4);q2e=n(d4t,"SPAN",{});var c4t=s(q2e);T(p8.$$.fragment,c4t),c4t.forEach(t),d4t.forEach(t),Mdr=i(COe),j2e=n(COe,"SPAN",{});var m4t=s(j2e);Edr=r(m4t,"AutoModelForSemanticSegmentation"),m4t.forEach(t),COe.forEach(t),vDe=i(m),Uo=n(m,"DIV",{class:!0});var fl=s(Uo);T(_8.$$.fragment,fl),Cdr=i(fl),Nd=n(fl,"P",{});var Oee=s(Nd);wdr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yW=n(Oee,"A",{href:!0});var f4t=s(yW);Adr=r(f4t,"from_pretrained()"),f4t.forEach(t),Ldr=r(Oee," class method or the "),xW=n(Oee,"A",{href:!0});var g4t=s(xW);ydr=r(g4t,"from_config()"),g4t.forEach(t),xdr=r(Oee,` class
method.`),Oee.forEach(t),$dr=i(fl),b8=n(fl,"P",{});var wOe=s(b8);kdr=r(wOe,"This class cannot be instantiated directly using "),D2e=n(wOe,"CODE",{});var h4t=s(D2e);Sdr=r(h4t,"__init__()"),h4t.forEach(t),Rdr=r(wOe," (throws an error)."),wOe.forEach(t),Pdr=i(fl),wt=n(fl,"DIV",{class:!0});var N6=s(wt);T(v8.$$.fragment,N6),Bdr=i(N6),G2e=n(N6,"P",{});var u4t=s(G2e);Idr=r(u4t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),u4t.forEach(t),Ndr=i(N6),qd=n(N6,"P",{});var Vee=s(qd);qdr=r(Vee,`Note:
Loading a model from its configuration file does `),O2e=n(Vee,"STRONG",{});var p4t=s(O2e);jdr=r(p4t,"not"),p4t.forEach(t),Ddr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(Vee,"A",{href:!0});var _4t=s($W);Gdr=r(_4t,"from_pretrained()"),_4t.forEach(t),Odr=r(Vee," to load the model weights."),Vee.forEach(t),Vdr=i(N6),T(o4.$$.fragment,N6),N6.forEach(t),Xdr=i(fl),bo=n(fl,"DIV",{class:!0});var Ma=s(bo);T(F8.$$.fragment,Ma),zdr=i(Ma),V2e=n(Ma,"P",{});var b4t=s(V2e);Wdr=r(b4t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),b4t.forEach(t),Qdr=i(Ma),Ua=n(Ma,"P",{});var q6=s(Ua);Hdr=r(q6,"The model class to instantiate is selected based on the "),X2e=n(q6,"CODE",{});var v4t=s(X2e);Udr=r(v4t,"model_type"),v4t.forEach(t),Jdr=r(q6,` property of the config object (either
passed as an argument or loaded from `),z2e=n(q6,"CODE",{});var F4t=s(z2e);Ydr=r(F4t,"pretrained_model_name_or_path"),F4t.forEach(t),Kdr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=n(q6,"CODE",{});var T4t=s(W2e);Zdr=r(T4t,"pretrained_model_name_or_path"),T4t.forEach(t),ecr=r(q6,":"),q6.forEach(t),ocr=i(Ma),Ja=n(Ma,"UL",{});var j6=s(Ja);r4=n(j6,"LI",{});var ERe=s(r4);Q2e=n(ERe,"STRONG",{});var M4t=s(Q2e);rcr=r(M4t,"beit"),M4t.forEach(t),tcr=r(ERe," \u2014 "),kW=n(ERe,"A",{href:!0});var E4t=s(kW);acr=r(E4t,"BeitForSemanticSegmentation"),E4t.forEach(t),ncr=r(ERe," (BEiT model)"),ERe.forEach(t),scr=i(j6),t4=n(j6,"LI",{});var CRe=s(t4);H2e=n(CRe,"STRONG",{});var C4t=s(H2e);lcr=r(C4t,"data2vec-vision"),C4t.forEach(t),icr=r(CRe," \u2014 "),SW=n(CRe,"A",{href:!0});var w4t=s(SW);dcr=r(w4t,"Data2VecVisionForSemanticSegmentation"),w4t.forEach(t),ccr=r(CRe," (Data2VecVision model)"),CRe.forEach(t),mcr=i(j6),a4=n(j6,"LI",{});var wRe=s(a4);U2e=n(wRe,"STRONG",{});var A4t=s(U2e);fcr=r(A4t,"dpt"),A4t.forEach(t),gcr=r(wRe," \u2014 "),RW=n(wRe,"A",{href:!0});var L4t=s(RW);hcr=r(L4t,"DPTForSemanticSegmentation"),L4t.forEach(t),ucr=r(wRe," (DPT model)"),wRe.forEach(t),pcr=i(j6),n4=n(j6,"LI",{});var ARe=s(n4);J2e=n(ARe,"STRONG",{});var y4t=s(J2e);_cr=r(y4t,"segformer"),y4t.forEach(t),bcr=r(ARe," \u2014 "),PW=n(ARe,"A",{href:!0});var x4t=s(PW);vcr=r(x4t,"SegformerForSemanticSegmentation"),x4t.forEach(t),Fcr=r(ARe," (SegFormer model)"),ARe.forEach(t),j6.forEach(t),Tcr=i(Ma),s4=n(Ma,"P",{});var LRe=s(s4);Mcr=r(LRe,"The model is set in evaluation mode by default using "),Y2e=n(LRe,"CODE",{});var $4t=s(Y2e);Ecr=r($4t,"model.eval()"),$4t.forEach(t),Ccr=r(LRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),K2e=n(LRe,"CODE",{});var k4t=s(K2e);wcr=r(k4t,"model.train()"),k4t.forEach(t),LRe.forEach(t),Acr=i(Ma),T(l4.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),FDe=i(m),jd=n(m,"H2",{class:!0});var AOe=s(jd);i4=n(AOe,"A",{id:!0,class:!0,href:!0});var S4t=s(i4);Z2e=n(S4t,"SPAN",{});var R4t=s(Z2e);T(T8.$$.fragment,R4t),R4t.forEach(t),S4t.forEach(t),Lcr=i(AOe),eve=n(AOe,"SPAN",{});var P4t=s(eve);ycr=r(P4t,"AutoModelForInstanceSegmentation"),P4t.forEach(t),AOe.forEach(t),TDe=i(m),Jo=n(m,"DIV",{class:!0});var gl=s(Jo);T(M8.$$.fragment,gl),xcr=i(gl),Dd=n(gl,"P",{});var Xee=s(Dd);$cr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),BW=n(Xee,"A",{href:!0});var B4t=s(BW);kcr=r(B4t,"from_pretrained()"),B4t.forEach(t),Scr=r(Xee," class method or the "),IW=n(Xee,"A",{href:!0});var I4t=s(IW);Rcr=r(I4t,"from_config()"),I4t.forEach(t),Pcr=r(Xee,` class
method.`),Xee.forEach(t),Bcr=i(gl),E8=n(gl,"P",{});var LOe=s(E8);Icr=r(LOe,"This class cannot be instantiated directly using "),ove=n(LOe,"CODE",{});var N4t=s(ove);Ncr=r(N4t,"__init__()"),N4t.forEach(t),qcr=r(LOe," (throws an error)."),LOe.forEach(t),jcr=i(gl),At=n(gl,"DIV",{class:!0});var D6=s(At);T(C8.$$.fragment,D6),Dcr=i(D6),rve=n(D6,"P",{});var q4t=s(rve);Gcr=r(q4t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),q4t.forEach(t),Ocr=i(D6),Gd=n(D6,"P",{});var zee=s(Gd);Vcr=r(zee,`Note:
Loading a model from its configuration file does `),tve=n(zee,"STRONG",{});var j4t=s(tve);Xcr=r(j4t,"not"),j4t.forEach(t),zcr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=n(zee,"A",{href:!0});var D4t=s(NW);Wcr=r(D4t,"from_pretrained()"),D4t.forEach(t),Qcr=r(zee," to load the model weights."),zee.forEach(t),Hcr=i(D6),T(d4.$$.fragment,D6),D6.forEach(t),Ucr=i(gl),vo=n(gl,"DIV",{class:!0});var Ea=s(vo);T(w8.$$.fragment,Ea),Jcr=i(Ea),ave=n(Ea,"P",{});var G4t=s(ave);Ycr=r(G4t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),G4t.forEach(t),Kcr=i(Ea),Ya=n(Ea,"P",{});var G6=s(Ya);Zcr=r(G6,"The model class to instantiate is selected based on the "),nve=n(G6,"CODE",{});var O4t=s(nve);emr=r(O4t,"model_type"),O4t.forEach(t),omr=r(G6,` property of the config object (either
passed as an argument or loaded from `),sve=n(G6,"CODE",{});var V4t=s(sve);rmr=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),tmr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(G6,"CODE",{});var X4t=s(lve);amr=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),nmr=r(G6,":"),G6.forEach(t),smr=i(Ea),ive=n(Ea,"UL",{});var z4t=s(ive);c4=n(z4t,"LI",{});var yRe=s(c4);dve=n(yRe,"STRONG",{});var W4t=s(dve);lmr=r(W4t,"maskformer"),W4t.forEach(t),imr=r(yRe," \u2014 "),qW=n(yRe,"A",{href:!0});var Q4t=s(qW);dmr=r(Q4t,"MaskFormerForInstanceSegmentation"),Q4t.forEach(t),cmr=r(yRe," (MaskFormer model)"),yRe.forEach(t),z4t.forEach(t),mmr=i(Ea),m4=n(Ea,"P",{});var xRe=s(m4);fmr=r(xRe,"The model is set in evaluation mode by default using "),cve=n(xRe,"CODE",{});var H4t=s(cve);gmr=r(H4t,"model.eval()"),H4t.forEach(t),hmr=r(xRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mve=n(xRe,"CODE",{});var U4t=s(mve);umr=r(U4t,"model.train()"),U4t.forEach(t),xRe.forEach(t),pmr=i(Ea),T(f4.$$.fragment,Ea),Ea.forEach(t),gl.forEach(t),MDe=i(m),Od=n(m,"H2",{class:!0});var yOe=s(Od);g4=n(yOe,"A",{id:!0,class:!0,href:!0});var J4t=s(g4);fve=n(J4t,"SPAN",{});var Y4t=s(fve);T(A8.$$.fragment,Y4t),Y4t.forEach(t),J4t.forEach(t),_mr=i(yOe),gve=n(yOe,"SPAN",{});var K4t=s(gve);bmr=r(K4t,"TFAutoModel"),K4t.forEach(t),yOe.forEach(t),EDe=i(m),Yo=n(m,"DIV",{class:!0});var hl=s(Yo);T(L8.$$.fragment,hl),vmr=i(hl),Vd=n(hl,"P",{});var Wee=s(Vd);Fmr=r(Wee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jW=n(Wee,"A",{href:!0});var Z4t=s(jW);Tmr=r(Z4t,"from_pretrained()"),Z4t.forEach(t),Mmr=r(Wee," class method or the "),DW=n(Wee,"A",{href:!0});var eEt=s(DW);Emr=r(eEt,"from_config()"),eEt.forEach(t),Cmr=r(Wee,` class
method.`),Wee.forEach(t),wmr=i(hl),y8=n(hl,"P",{});var xOe=s(y8);Amr=r(xOe,"This class cannot be instantiated directly using "),hve=n(xOe,"CODE",{});var oEt=s(hve);Lmr=r(oEt,"__init__()"),oEt.forEach(t),ymr=r(xOe," (throws an error)."),xOe.forEach(t),xmr=i(hl),Lt=n(hl,"DIV",{class:!0});var O6=s(Lt);T(x8.$$.fragment,O6),$mr=i(O6),uve=n(O6,"P",{});var rEt=s(uve);kmr=r(rEt,"Instantiates one of the base model classes of the library from a configuration."),rEt.forEach(t),Smr=i(O6),Xd=n(O6,"P",{});var Qee=s(Xd);Rmr=r(Qee,`Note:
Loading a model from its configuration file does `),pve=n(Qee,"STRONG",{});var tEt=s(pve);Pmr=r(tEt,"not"),tEt.forEach(t),Bmr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(Qee,"A",{href:!0});var aEt=s(GW);Imr=r(aEt,"from_pretrained()"),aEt.forEach(t),Nmr=r(Qee," to load the model weights."),Qee.forEach(t),qmr=i(O6),T(h4.$$.fragment,O6),O6.forEach(t),jmr=i(hl),wr=n(hl,"DIV",{class:!0});var ul=s(wr);T($8.$$.fragment,ul),Dmr=i(ul),_ve=n(ul,"P",{});var nEt=s(_ve);Gmr=r(nEt,"Instantiate one of the base model classes of the library from a pretrained model."),nEt.forEach(t),Omr=i(ul),Ka=n(ul,"P",{});var V6=s(Ka);Vmr=r(V6,"The model class to instantiate is selected based on the "),bve=n(V6,"CODE",{});var sEt=s(bve);Xmr=r(sEt,"model_type"),sEt.forEach(t),zmr=r(V6,` property of the config object (either
passed as an argument or loaded from `),vve=n(V6,"CODE",{});var lEt=s(vve);Wmr=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),Qmr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=n(V6,"CODE",{});var iEt=s(Fve);Hmr=r(iEt,"pretrained_model_name_or_path"),iEt.forEach(t),Umr=r(V6,":"),V6.forEach(t),Jmr=i(ul),q=n(ul,"UL",{});var D=s(q);u4=n(D,"LI",{});var $Re=s(u4);Tve=n($Re,"STRONG",{});var dEt=s(Tve);Ymr=r(dEt,"albert"),dEt.forEach(t),Kmr=r($Re," \u2014 "),OW=n($Re,"A",{href:!0});var cEt=s(OW);Zmr=r(cEt,"TFAlbertModel"),cEt.forEach(t),efr=r($Re," (ALBERT model)"),$Re.forEach(t),ofr=i(D),p4=n(D,"LI",{});var kRe=s(p4);Mve=n(kRe,"STRONG",{});var mEt=s(Mve);rfr=r(mEt,"bart"),mEt.forEach(t),tfr=r(kRe," \u2014 "),VW=n(kRe,"A",{href:!0});var fEt=s(VW);afr=r(fEt,"TFBartModel"),fEt.forEach(t),nfr=r(kRe," (BART model)"),kRe.forEach(t),sfr=i(D),_4=n(D,"LI",{});var SRe=s(_4);Eve=n(SRe,"STRONG",{});var gEt=s(Eve);lfr=r(gEt,"bert"),gEt.forEach(t),ifr=r(SRe," \u2014 "),XW=n(SRe,"A",{href:!0});var hEt=s(XW);dfr=r(hEt,"TFBertModel"),hEt.forEach(t),cfr=r(SRe," (BERT model)"),SRe.forEach(t),mfr=i(D),b4=n(D,"LI",{});var RRe=s(b4);Cve=n(RRe,"STRONG",{});var uEt=s(Cve);ffr=r(uEt,"blenderbot"),uEt.forEach(t),gfr=r(RRe," \u2014 "),zW=n(RRe,"A",{href:!0});var pEt=s(zW);hfr=r(pEt,"TFBlenderbotModel"),pEt.forEach(t),ufr=r(RRe," (Blenderbot model)"),RRe.forEach(t),pfr=i(D),v4=n(D,"LI",{});var PRe=s(v4);wve=n(PRe,"STRONG",{});var _Et=s(wve);_fr=r(_Et,"blenderbot-small"),_Et.forEach(t),bfr=r(PRe," \u2014 "),WW=n(PRe,"A",{href:!0});var bEt=s(WW);vfr=r(bEt,"TFBlenderbotSmallModel"),bEt.forEach(t),Ffr=r(PRe," (BlenderbotSmall model)"),PRe.forEach(t),Tfr=i(D),F4=n(D,"LI",{});var BRe=s(F4);Ave=n(BRe,"STRONG",{});var vEt=s(Ave);Mfr=r(vEt,"camembert"),vEt.forEach(t),Efr=r(BRe," \u2014 "),QW=n(BRe,"A",{href:!0});var FEt=s(QW);Cfr=r(FEt,"TFCamembertModel"),FEt.forEach(t),wfr=r(BRe," (CamemBERT model)"),BRe.forEach(t),Afr=i(D),T4=n(D,"LI",{});var IRe=s(T4);Lve=n(IRe,"STRONG",{});var TEt=s(Lve);Lfr=r(TEt,"clip"),TEt.forEach(t),yfr=r(IRe," \u2014 "),HW=n(IRe,"A",{href:!0});var MEt=s(HW);xfr=r(MEt,"TFCLIPModel"),MEt.forEach(t),$fr=r(IRe," (CLIP model)"),IRe.forEach(t),kfr=i(D),M4=n(D,"LI",{});var NRe=s(M4);yve=n(NRe,"STRONG",{});var EEt=s(yve);Sfr=r(EEt,"convbert"),EEt.forEach(t),Rfr=r(NRe," \u2014 "),UW=n(NRe,"A",{href:!0});var CEt=s(UW);Pfr=r(CEt,"TFConvBertModel"),CEt.forEach(t),Bfr=r(NRe," (ConvBERT model)"),NRe.forEach(t),Ifr=i(D),E4=n(D,"LI",{});var qRe=s(E4);xve=n(qRe,"STRONG",{});var wEt=s(xve);Nfr=r(wEt,"convnext"),wEt.forEach(t),qfr=r(qRe," \u2014 "),JW=n(qRe,"A",{href:!0});var AEt=s(JW);jfr=r(AEt,"TFConvNextModel"),AEt.forEach(t),Dfr=r(qRe," (ConvNeXT model)"),qRe.forEach(t),Gfr=i(D),C4=n(D,"LI",{});var jRe=s(C4);$ve=n(jRe,"STRONG",{});var LEt=s($ve);Ofr=r(LEt,"ctrl"),LEt.forEach(t),Vfr=r(jRe," \u2014 "),YW=n(jRe,"A",{href:!0});var yEt=s(YW);Xfr=r(yEt,"TFCTRLModel"),yEt.forEach(t),zfr=r(jRe," (CTRL model)"),jRe.forEach(t),Wfr=i(D),w4=n(D,"LI",{});var DRe=s(w4);kve=n(DRe,"STRONG",{});var xEt=s(kve);Qfr=r(xEt,"data2vec-vision"),xEt.forEach(t),Hfr=r(DRe," \u2014 "),KW=n(DRe,"A",{href:!0});var $Et=s(KW);Ufr=r($Et,"TFData2VecVisionModel"),$Et.forEach(t),Jfr=r(DRe," (Data2VecVision model)"),DRe.forEach(t),Yfr=i(D),A4=n(D,"LI",{});var GRe=s(A4);Sve=n(GRe,"STRONG",{});var kEt=s(Sve);Kfr=r(kEt,"deberta"),kEt.forEach(t),Zfr=r(GRe," \u2014 "),ZW=n(GRe,"A",{href:!0});var SEt=s(ZW);egr=r(SEt,"TFDebertaModel"),SEt.forEach(t),ogr=r(GRe," (DeBERTa model)"),GRe.forEach(t),rgr=i(D),L4=n(D,"LI",{});var ORe=s(L4);Rve=n(ORe,"STRONG",{});var REt=s(Rve);tgr=r(REt,"deberta-v2"),REt.forEach(t),agr=r(ORe," \u2014 "),eQ=n(ORe,"A",{href:!0});var PEt=s(eQ);ngr=r(PEt,"TFDebertaV2Model"),PEt.forEach(t),sgr=r(ORe," (DeBERTa-v2 model)"),ORe.forEach(t),lgr=i(D),y4=n(D,"LI",{});var VRe=s(y4);Pve=n(VRe,"STRONG",{});var BEt=s(Pve);igr=r(BEt,"distilbert"),BEt.forEach(t),dgr=r(VRe," \u2014 "),oQ=n(VRe,"A",{href:!0});var IEt=s(oQ);cgr=r(IEt,"TFDistilBertModel"),IEt.forEach(t),mgr=r(VRe," (DistilBERT model)"),VRe.forEach(t),fgr=i(D),x4=n(D,"LI",{});var XRe=s(x4);Bve=n(XRe,"STRONG",{});var NEt=s(Bve);ggr=r(NEt,"dpr"),NEt.forEach(t),hgr=r(XRe," \u2014 "),rQ=n(XRe,"A",{href:!0});var qEt=s(rQ);ugr=r(qEt,"TFDPRQuestionEncoder"),qEt.forEach(t),pgr=r(XRe," (DPR model)"),XRe.forEach(t),_gr=i(D),$4=n(D,"LI",{});var zRe=s($4);Ive=n(zRe,"STRONG",{});var jEt=s(Ive);bgr=r(jEt,"electra"),jEt.forEach(t),vgr=r(zRe," \u2014 "),tQ=n(zRe,"A",{href:!0});var DEt=s(tQ);Fgr=r(DEt,"TFElectraModel"),DEt.forEach(t),Tgr=r(zRe," (ELECTRA model)"),zRe.forEach(t),Mgr=i(D),k4=n(D,"LI",{});var WRe=s(k4);Nve=n(WRe,"STRONG",{});var GEt=s(Nve);Egr=r(GEt,"flaubert"),GEt.forEach(t),Cgr=r(WRe," \u2014 "),aQ=n(WRe,"A",{href:!0});var OEt=s(aQ);wgr=r(OEt,"TFFlaubertModel"),OEt.forEach(t),Agr=r(WRe," (FlauBERT model)"),WRe.forEach(t),Lgr=i(D),Ns=n(D,"LI",{});var dk=s(Ns);qve=n(dk,"STRONG",{});var VEt=s(qve);ygr=r(VEt,"funnel"),VEt.forEach(t),xgr=r(dk," \u2014 "),nQ=n(dk,"A",{href:!0});var XEt=s(nQ);$gr=r(XEt,"TFFunnelModel"),XEt.forEach(t),kgr=r(dk," or "),sQ=n(dk,"A",{href:!0});var zEt=s(sQ);Sgr=r(zEt,"TFFunnelBaseModel"),zEt.forEach(t),Rgr=r(dk," (Funnel Transformer model)"),dk.forEach(t),Pgr=i(D),S4=n(D,"LI",{});var QRe=s(S4);jve=n(QRe,"STRONG",{});var WEt=s(jve);Bgr=r(WEt,"gpt2"),WEt.forEach(t),Igr=r(QRe," \u2014 "),lQ=n(QRe,"A",{href:!0});var QEt=s(lQ);Ngr=r(QEt,"TFGPT2Model"),QEt.forEach(t),qgr=r(QRe," (OpenAI GPT-2 model)"),QRe.forEach(t),jgr=i(D),R4=n(D,"LI",{});var HRe=s(R4);Dve=n(HRe,"STRONG",{});var HEt=s(Dve);Dgr=r(HEt,"gptj"),HEt.forEach(t),Ggr=r(HRe," \u2014 "),iQ=n(HRe,"A",{href:!0});var UEt=s(iQ);Ogr=r(UEt,"TFGPTJModel"),UEt.forEach(t),Vgr=r(HRe," (GPT-J model)"),HRe.forEach(t),Xgr=i(D),P4=n(D,"LI",{});var URe=s(P4);Gve=n(URe,"STRONG",{});var JEt=s(Gve);zgr=r(JEt,"hubert"),JEt.forEach(t),Wgr=r(URe," \u2014 "),dQ=n(URe,"A",{href:!0});var YEt=s(dQ);Qgr=r(YEt,"TFHubertModel"),YEt.forEach(t),Hgr=r(URe," (Hubert model)"),URe.forEach(t),Ugr=i(D),B4=n(D,"LI",{});var JRe=s(B4);Ove=n(JRe,"STRONG",{});var KEt=s(Ove);Jgr=r(KEt,"layoutlm"),KEt.forEach(t),Ygr=r(JRe," \u2014 "),cQ=n(JRe,"A",{href:!0});var ZEt=s(cQ);Kgr=r(ZEt,"TFLayoutLMModel"),ZEt.forEach(t),Zgr=r(JRe," (LayoutLM model)"),JRe.forEach(t),ehr=i(D),I4=n(D,"LI",{});var YRe=s(I4);Vve=n(YRe,"STRONG",{});var eCt=s(Vve);ohr=r(eCt,"led"),eCt.forEach(t),rhr=r(YRe," \u2014 "),mQ=n(YRe,"A",{href:!0});var oCt=s(mQ);thr=r(oCt,"TFLEDModel"),oCt.forEach(t),ahr=r(YRe," (LED model)"),YRe.forEach(t),nhr=i(D),N4=n(D,"LI",{});var KRe=s(N4);Xve=n(KRe,"STRONG",{});var rCt=s(Xve);shr=r(rCt,"longformer"),rCt.forEach(t),lhr=r(KRe," \u2014 "),fQ=n(KRe,"A",{href:!0});var tCt=s(fQ);ihr=r(tCt,"TFLongformerModel"),tCt.forEach(t),dhr=r(KRe," (Longformer model)"),KRe.forEach(t),chr=i(D),q4=n(D,"LI",{});var ZRe=s(q4);zve=n(ZRe,"STRONG",{});var aCt=s(zve);mhr=r(aCt,"lxmert"),aCt.forEach(t),fhr=r(ZRe," \u2014 "),gQ=n(ZRe,"A",{href:!0});var nCt=s(gQ);ghr=r(nCt,"TFLxmertModel"),nCt.forEach(t),hhr=r(ZRe," (LXMERT model)"),ZRe.forEach(t),uhr=i(D),j4=n(D,"LI",{});var ePe=s(j4);Wve=n(ePe,"STRONG",{});var sCt=s(Wve);phr=r(sCt,"marian"),sCt.forEach(t),_hr=r(ePe," \u2014 "),hQ=n(ePe,"A",{href:!0});var lCt=s(hQ);bhr=r(lCt,"TFMarianModel"),lCt.forEach(t),vhr=r(ePe," (Marian model)"),ePe.forEach(t),Fhr=i(D),D4=n(D,"LI",{});var oPe=s(D4);Qve=n(oPe,"STRONG",{});var iCt=s(Qve);Thr=r(iCt,"mbart"),iCt.forEach(t),Mhr=r(oPe," \u2014 "),uQ=n(oPe,"A",{href:!0});var dCt=s(uQ);Ehr=r(dCt,"TFMBartModel"),dCt.forEach(t),Chr=r(oPe," (mBART model)"),oPe.forEach(t),whr=i(D),G4=n(D,"LI",{});var rPe=s(G4);Hve=n(rPe,"STRONG",{});var cCt=s(Hve);Ahr=r(cCt,"mobilebert"),cCt.forEach(t),Lhr=r(rPe," \u2014 "),pQ=n(rPe,"A",{href:!0});var mCt=s(pQ);yhr=r(mCt,"TFMobileBertModel"),mCt.forEach(t),xhr=r(rPe," (MobileBERT model)"),rPe.forEach(t),$hr=i(D),O4=n(D,"LI",{});var tPe=s(O4);Uve=n(tPe,"STRONG",{});var fCt=s(Uve);khr=r(fCt,"mpnet"),fCt.forEach(t),Shr=r(tPe," \u2014 "),_Q=n(tPe,"A",{href:!0});var gCt=s(_Q);Rhr=r(gCt,"TFMPNetModel"),gCt.forEach(t),Phr=r(tPe," (MPNet model)"),tPe.forEach(t),Bhr=i(D),V4=n(D,"LI",{});var aPe=s(V4);Jve=n(aPe,"STRONG",{});var hCt=s(Jve);Ihr=r(hCt,"mt5"),hCt.forEach(t),Nhr=r(aPe," \u2014 "),bQ=n(aPe,"A",{href:!0});var uCt=s(bQ);qhr=r(uCt,"TFMT5Model"),uCt.forEach(t),jhr=r(aPe," (MT5 model)"),aPe.forEach(t),Dhr=i(D),X4=n(D,"LI",{});var nPe=s(X4);Yve=n(nPe,"STRONG",{});var pCt=s(Yve);Ghr=r(pCt,"openai-gpt"),pCt.forEach(t),Ohr=r(nPe," \u2014 "),vQ=n(nPe,"A",{href:!0});var _Ct=s(vQ);Vhr=r(_Ct,"TFOpenAIGPTModel"),_Ct.forEach(t),Xhr=r(nPe," (OpenAI GPT model)"),nPe.forEach(t),zhr=i(D),z4=n(D,"LI",{});var sPe=s(z4);Kve=n(sPe,"STRONG",{});var bCt=s(Kve);Whr=r(bCt,"opt"),bCt.forEach(t),Qhr=r(sPe," \u2014 "),FQ=n(sPe,"A",{href:!0});var vCt=s(FQ);Hhr=r(vCt,"TFOPTModel"),vCt.forEach(t),Uhr=r(sPe," (OPT model)"),sPe.forEach(t),Jhr=i(D),W4=n(D,"LI",{});var lPe=s(W4);Zve=n(lPe,"STRONG",{});var FCt=s(Zve);Yhr=r(FCt,"pegasus"),FCt.forEach(t),Khr=r(lPe," \u2014 "),TQ=n(lPe,"A",{href:!0});var TCt=s(TQ);Zhr=r(TCt,"TFPegasusModel"),TCt.forEach(t),eur=r(lPe," (Pegasus model)"),lPe.forEach(t),our=i(D),Q4=n(D,"LI",{});var iPe=s(Q4);eFe=n(iPe,"STRONG",{});var MCt=s(eFe);rur=r(MCt,"rembert"),MCt.forEach(t),tur=r(iPe," \u2014 "),MQ=n(iPe,"A",{href:!0});var ECt=s(MQ);aur=r(ECt,"TFRemBertModel"),ECt.forEach(t),nur=r(iPe," (RemBERT model)"),iPe.forEach(t),sur=i(D),H4=n(D,"LI",{});var dPe=s(H4);oFe=n(dPe,"STRONG",{});var CCt=s(oFe);lur=r(CCt,"roberta"),CCt.forEach(t),iur=r(dPe," \u2014 "),EQ=n(dPe,"A",{href:!0});var wCt=s(EQ);dur=r(wCt,"TFRobertaModel"),wCt.forEach(t),cur=r(dPe," (RoBERTa model)"),dPe.forEach(t),mur=i(D),U4=n(D,"LI",{});var cPe=s(U4);rFe=n(cPe,"STRONG",{});var ACt=s(rFe);fur=r(ACt,"roformer"),ACt.forEach(t),gur=r(cPe," \u2014 "),CQ=n(cPe,"A",{href:!0});var LCt=s(CQ);hur=r(LCt,"TFRoFormerModel"),LCt.forEach(t),uur=r(cPe," (RoFormer model)"),cPe.forEach(t),pur=i(D),J4=n(D,"LI",{});var mPe=s(J4);tFe=n(mPe,"STRONG",{});var yCt=s(tFe);_ur=r(yCt,"speech_to_text"),yCt.forEach(t),bur=r(mPe," \u2014 "),wQ=n(mPe,"A",{href:!0});var xCt=s(wQ);vur=r(xCt,"TFSpeech2TextModel"),xCt.forEach(t),Fur=r(mPe," (Speech2Text model)"),mPe.forEach(t),Tur=i(D),Y4=n(D,"LI",{});var fPe=s(Y4);aFe=n(fPe,"STRONG",{});var $Ct=s(aFe);Mur=r($Ct,"swin"),$Ct.forEach(t),Eur=r(fPe," \u2014 "),AQ=n(fPe,"A",{href:!0});var kCt=s(AQ);Cur=r(kCt,"TFSwinModel"),kCt.forEach(t),wur=r(fPe," (Swin Transformer model)"),fPe.forEach(t),Aur=i(D),K4=n(D,"LI",{});var gPe=s(K4);nFe=n(gPe,"STRONG",{});var SCt=s(nFe);Lur=r(SCt,"t5"),SCt.forEach(t),yur=r(gPe," \u2014 "),LQ=n(gPe,"A",{href:!0});var RCt=s(LQ);xur=r(RCt,"TFT5Model"),RCt.forEach(t),$ur=r(gPe," (T5 model)"),gPe.forEach(t),kur=i(D),Z4=n(D,"LI",{});var hPe=s(Z4);sFe=n(hPe,"STRONG",{});var PCt=s(sFe);Sur=r(PCt,"tapas"),PCt.forEach(t),Rur=r(hPe," \u2014 "),yQ=n(hPe,"A",{href:!0});var BCt=s(yQ);Pur=r(BCt,"TFTapasModel"),BCt.forEach(t),Bur=r(hPe," (TAPAS model)"),hPe.forEach(t),Iur=i(D),eE=n(D,"LI",{});var uPe=s(eE);lFe=n(uPe,"STRONG",{});var ICt=s(lFe);Nur=r(ICt,"transfo-xl"),ICt.forEach(t),qur=r(uPe," \u2014 "),xQ=n(uPe,"A",{href:!0});var NCt=s(xQ);jur=r(NCt,"TFTransfoXLModel"),NCt.forEach(t),Dur=r(uPe," (Transformer-XL model)"),uPe.forEach(t),Gur=i(D),oE=n(D,"LI",{});var pPe=s(oE);iFe=n(pPe,"STRONG",{});var qCt=s(iFe);Our=r(qCt,"vit"),qCt.forEach(t),Vur=r(pPe," \u2014 "),$Q=n(pPe,"A",{href:!0});var jCt=s($Q);Xur=r(jCt,"TFViTModel"),jCt.forEach(t),zur=r(pPe," (ViT model)"),pPe.forEach(t),Wur=i(D),rE=n(D,"LI",{});var _Pe=s(rE);dFe=n(_Pe,"STRONG",{});var DCt=s(dFe);Qur=r(DCt,"vit_mae"),DCt.forEach(t),Hur=r(_Pe," \u2014 "),kQ=n(_Pe,"A",{href:!0});var GCt=s(kQ);Uur=r(GCt,"TFViTMAEModel"),GCt.forEach(t),Jur=r(_Pe," (ViTMAE model)"),_Pe.forEach(t),Yur=i(D),tE=n(D,"LI",{});var bPe=s(tE);cFe=n(bPe,"STRONG",{});var OCt=s(cFe);Kur=r(OCt,"wav2vec2"),OCt.forEach(t),Zur=r(bPe," \u2014 "),SQ=n(bPe,"A",{href:!0});var VCt=s(SQ);epr=r(VCt,"TFWav2Vec2Model"),VCt.forEach(t),opr=r(bPe," (Wav2Vec2 model)"),bPe.forEach(t),rpr=i(D),aE=n(D,"LI",{});var vPe=s(aE);mFe=n(vPe,"STRONG",{});var XCt=s(mFe);tpr=r(XCt,"xlm"),XCt.forEach(t),apr=r(vPe," \u2014 "),RQ=n(vPe,"A",{href:!0});var zCt=s(RQ);npr=r(zCt,"TFXLMModel"),zCt.forEach(t),spr=r(vPe," (XLM model)"),vPe.forEach(t),lpr=i(D),nE=n(D,"LI",{});var FPe=s(nE);fFe=n(FPe,"STRONG",{});var WCt=s(fFe);ipr=r(WCt,"xlm-roberta"),WCt.forEach(t),dpr=r(FPe," \u2014 "),PQ=n(FPe,"A",{href:!0});var QCt=s(PQ);cpr=r(QCt,"TFXLMRobertaModel"),QCt.forEach(t),mpr=r(FPe," (XLM-RoBERTa model)"),FPe.forEach(t),fpr=i(D),sE=n(D,"LI",{});var TPe=s(sE);gFe=n(TPe,"STRONG",{});var HCt=s(gFe);gpr=r(HCt,"xlnet"),HCt.forEach(t),hpr=r(TPe," \u2014 "),BQ=n(TPe,"A",{href:!0});var UCt=s(BQ);upr=r(UCt,"TFXLNetModel"),UCt.forEach(t),ppr=r(TPe," (XLNet model)"),TPe.forEach(t),D.forEach(t),_pr=i(ul),T(lE.$$.fragment,ul),ul.forEach(t),hl.forEach(t),CDe=i(m),zd=n(m,"H2",{class:!0});var $Oe=s(zd);iE=n($Oe,"A",{id:!0,class:!0,href:!0});var JCt=s(iE);hFe=n(JCt,"SPAN",{});var YCt=s(hFe);T(k8.$$.fragment,YCt),YCt.forEach(t),JCt.forEach(t),bpr=i($Oe),uFe=n($Oe,"SPAN",{});var KCt=s(uFe);vpr=r(KCt,"TFAutoModelForPreTraining"),KCt.forEach(t),$Oe.forEach(t),wDe=i(m),Ko=n(m,"DIV",{class:!0});var pl=s(Ko);T(S8.$$.fragment,pl),Fpr=i(pl),Wd=n(pl,"P",{});var Hee=s(Wd);Tpr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IQ=n(Hee,"A",{href:!0});var ZCt=s(IQ);Mpr=r(ZCt,"from_pretrained()"),ZCt.forEach(t),Epr=r(Hee," class method or the "),NQ=n(Hee,"A",{href:!0});var e5t=s(NQ);Cpr=r(e5t,"from_config()"),e5t.forEach(t),wpr=r(Hee,` class
method.`),Hee.forEach(t),Apr=i(pl),R8=n(pl,"P",{});var kOe=s(R8);Lpr=r(kOe,"This class cannot be instantiated directly using "),pFe=n(kOe,"CODE",{});var o5t=s(pFe);ypr=r(o5t,"__init__()"),o5t.forEach(t),xpr=r(kOe," (throws an error)."),kOe.forEach(t),$pr=i(pl),yt=n(pl,"DIV",{class:!0});var X6=s(yt);T(P8.$$.fragment,X6),kpr=i(X6),_Fe=n(X6,"P",{});var r5t=s(_Fe);Spr=r(r5t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),r5t.forEach(t),Rpr=i(X6),Qd=n(X6,"P",{});var Uee=s(Qd);Ppr=r(Uee,`Note:
Loading a model from its configuration file does `),bFe=n(Uee,"STRONG",{});var t5t=s(bFe);Bpr=r(t5t,"not"),t5t.forEach(t),Ipr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=n(Uee,"A",{href:!0});var a5t=s(qQ);Npr=r(a5t,"from_pretrained()"),a5t.forEach(t),qpr=r(Uee," to load the model weights."),Uee.forEach(t),jpr=i(X6),T(dE.$$.fragment,X6),X6.forEach(t),Dpr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(B8.$$.fragment,_l),Gpr=i(_l),vFe=n(_l,"P",{});var n5t=s(vFe);Opr=r(n5t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),n5t.forEach(t),Vpr=i(_l),Za=n(_l,"P",{});var z6=s(Za);Xpr=r(z6,"The model class to instantiate is selected based on the "),FFe=n(z6,"CODE",{});var s5t=s(FFe);zpr=r(s5t,"model_type"),s5t.forEach(t),Wpr=r(z6,` property of the config object (either
passed as an argument or loaded from `),TFe=n(z6,"CODE",{});var l5t=s(TFe);Qpr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),Hpr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(z6,"CODE",{});var i5t=s(MFe);Upr=r(i5t,"pretrained_model_name_or_path"),i5t.forEach(t),Jpr=r(z6,":"),z6.forEach(t),Ypr=i(_l),se=n(_l,"UL",{});var le=s(se);cE=n(le,"LI",{});var MPe=s(cE);EFe=n(MPe,"STRONG",{});var d5t=s(EFe);Kpr=r(d5t,"albert"),d5t.forEach(t),Zpr=r(MPe," \u2014 "),jQ=n(MPe,"A",{href:!0});var c5t=s(jQ);e_r=r(c5t,"TFAlbertForPreTraining"),c5t.forEach(t),o_r=r(MPe," (ALBERT model)"),MPe.forEach(t),r_r=i(le),mE=n(le,"LI",{});var EPe=s(mE);CFe=n(EPe,"STRONG",{});var m5t=s(CFe);t_r=r(m5t,"bart"),m5t.forEach(t),a_r=r(EPe," \u2014 "),DQ=n(EPe,"A",{href:!0});var f5t=s(DQ);n_r=r(f5t,"TFBartForConditionalGeneration"),f5t.forEach(t),s_r=r(EPe," (BART model)"),EPe.forEach(t),l_r=i(le),fE=n(le,"LI",{});var CPe=s(fE);wFe=n(CPe,"STRONG",{});var g5t=s(wFe);i_r=r(g5t,"bert"),g5t.forEach(t),d_r=r(CPe," \u2014 "),GQ=n(CPe,"A",{href:!0});var h5t=s(GQ);c_r=r(h5t,"TFBertForPreTraining"),h5t.forEach(t),m_r=r(CPe," (BERT model)"),CPe.forEach(t),f_r=i(le),gE=n(le,"LI",{});var wPe=s(gE);AFe=n(wPe,"STRONG",{});var u5t=s(AFe);g_r=r(u5t,"camembert"),u5t.forEach(t),h_r=r(wPe," \u2014 "),OQ=n(wPe,"A",{href:!0});var p5t=s(OQ);u_r=r(p5t,"TFCamembertForMaskedLM"),p5t.forEach(t),p_r=r(wPe," (CamemBERT model)"),wPe.forEach(t),__r=i(le),hE=n(le,"LI",{});var APe=s(hE);LFe=n(APe,"STRONG",{});var _5t=s(LFe);b_r=r(_5t,"ctrl"),_5t.forEach(t),v_r=r(APe," \u2014 "),VQ=n(APe,"A",{href:!0});var b5t=s(VQ);F_r=r(b5t,"TFCTRLLMHeadModel"),b5t.forEach(t),T_r=r(APe," (CTRL model)"),APe.forEach(t),M_r=i(le),uE=n(le,"LI",{});var LPe=s(uE);yFe=n(LPe,"STRONG",{});var v5t=s(yFe);E_r=r(v5t,"distilbert"),v5t.forEach(t),C_r=r(LPe," \u2014 "),XQ=n(LPe,"A",{href:!0});var F5t=s(XQ);w_r=r(F5t,"TFDistilBertForMaskedLM"),F5t.forEach(t),A_r=r(LPe," (DistilBERT model)"),LPe.forEach(t),L_r=i(le),pE=n(le,"LI",{});var yPe=s(pE);xFe=n(yPe,"STRONG",{});var T5t=s(xFe);y_r=r(T5t,"electra"),T5t.forEach(t),x_r=r(yPe," \u2014 "),zQ=n(yPe,"A",{href:!0});var M5t=s(zQ);$_r=r(M5t,"TFElectraForPreTraining"),M5t.forEach(t),k_r=r(yPe," (ELECTRA model)"),yPe.forEach(t),S_r=i(le),_E=n(le,"LI",{});var xPe=s(_E);$Fe=n(xPe,"STRONG",{});var E5t=s($Fe);R_r=r(E5t,"flaubert"),E5t.forEach(t),P_r=r(xPe," \u2014 "),WQ=n(xPe,"A",{href:!0});var C5t=s(WQ);B_r=r(C5t,"TFFlaubertWithLMHeadModel"),C5t.forEach(t),I_r=r(xPe," (FlauBERT model)"),xPe.forEach(t),N_r=i(le),bE=n(le,"LI",{});var $Pe=s(bE);kFe=n($Pe,"STRONG",{});var w5t=s(kFe);q_r=r(w5t,"funnel"),w5t.forEach(t),j_r=r($Pe," \u2014 "),QQ=n($Pe,"A",{href:!0});var A5t=s(QQ);D_r=r(A5t,"TFFunnelForPreTraining"),A5t.forEach(t),G_r=r($Pe," (Funnel Transformer model)"),$Pe.forEach(t),O_r=i(le),vE=n(le,"LI",{});var kPe=s(vE);SFe=n(kPe,"STRONG",{});var L5t=s(SFe);V_r=r(L5t,"gpt2"),L5t.forEach(t),X_r=r(kPe," \u2014 "),HQ=n(kPe,"A",{href:!0});var y5t=s(HQ);z_r=r(y5t,"TFGPT2LMHeadModel"),y5t.forEach(t),W_r=r(kPe," (OpenAI GPT-2 model)"),kPe.forEach(t),Q_r=i(le),FE=n(le,"LI",{});var SPe=s(FE);RFe=n(SPe,"STRONG",{});var x5t=s(RFe);H_r=r(x5t,"layoutlm"),x5t.forEach(t),U_r=r(SPe," \u2014 "),UQ=n(SPe,"A",{href:!0});var $5t=s(UQ);J_r=r($5t,"TFLayoutLMForMaskedLM"),$5t.forEach(t),Y_r=r(SPe," (LayoutLM model)"),SPe.forEach(t),K_r=i(le),TE=n(le,"LI",{});var RPe=s(TE);PFe=n(RPe,"STRONG",{});var k5t=s(PFe);Z_r=r(k5t,"lxmert"),k5t.forEach(t),ebr=r(RPe," \u2014 "),JQ=n(RPe,"A",{href:!0});var S5t=s(JQ);obr=r(S5t,"TFLxmertForPreTraining"),S5t.forEach(t),rbr=r(RPe," (LXMERT model)"),RPe.forEach(t),tbr=i(le),ME=n(le,"LI",{});var PPe=s(ME);BFe=n(PPe,"STRONG",{});var R5t=s(BFe);abr=r(R5t,"mobilebert"),R5t.forEach(t),nbr=r(PPe," \u2014 "),YQ=n(PPe,"A",{href:!0});var P5t=s(YQ);sbr=r(P5t,"TFMobileBertForPreTraining"),P5t.forEach(t),lbr=r(PPe," (MobileBERT model)"),PPe.forEach(t),ibr=i(le),EE=n(le,"LI",{});var BPe=s(EE);IFe=n(BPe,"STRONG",{});var B5t=s(IFe);dbr=r(B5t,"mpnet"),B5t.forEach(t),cbr=r(BPe," \u2014 "),KQ=n(BPe,"A",{href:!0});var I5t=s(KQ);mbr=r(I5t,"TFMPNetForMaskedLM"),I5t.forEach(t),fbr=r(BPe," (MPNet model)"),BPe.forEach(t),gbr=i(le),CE=n(le,"LI",{});var IPe=s(CE);NFe=n(IPe,"STRONG",{});var N5t=s(NFe);hbr=r(N5t,"openai-gpt"),N5t.forEach(t),ubr=r(IPe," \u2014 "),ZQ=n(IPe,"A",{href:!0});var q5t=s(ZQ);pbr=r(q5t,"TFOpenAIGPTLMHeadModel"),q5t.forEach(t),_br=r(IPe," (OpenAI GPT model)"),IPe.forEach(t),bbr=i(le),wE=n(le,"LI",{});var NPe=s(wE);qFe=n(NPe,"STRONG",{});var j5t=s(qFe);vbr=r(j5t,"roberta"),j5t.forEach(t),Fbr=r(NPe," \u2014 "),eH=n(NPe,"A",{href:!0});var D5t=s(eH);Tbr=r(D5t,"TFRobertaForMaskedLM"),D5t.forEach(t),Mbr=r(NPe," (RoBERTa model)"),NPe.forEach(t),Ebr=i(le),AE=n(le,"LI",{});var qPe=s(AE);jFe=n(qPe,"STRONG",{});var G5t=s(jFe);Cbr=r(G5t,"t5"),G5t.forEach(t),wbr=r(qPe," \u2014 "),oH=n(qPe,"A",{href:!0});var O5t=s(oH);Abr=r(O5t,"TFT5ForConditionalGeneration"),O5t.forEach(t),Lbr=r(qPe," (T5 model)"),qPe.forEach(t),ybr=i(le),LE=n(le,"LI",{});var jPe=s(LE);DFe=n(jPe,"STRONG",{});var V5t=s(DFe);xbr=r(V5t,"tapas"),V5t.forEach(t),$br=r(jPe," \u2014 "),rH=n(jPe,"A",{href:!0});var X5t=s(rH);kbr=r(X5t,"TFTapasForMaskedLM"),X5t.forEach(t),Sbr=r(jPe," (TAPAS model)"),jPe.forEach(t),Rbr=i(le),yE=n(le,"LI",{});var DPe=s(yE);GFe=n(DPe,"STRONG",{});var z5t=s(GFe);Pbr=r(z5t,"transfo-xl"),z5t.forEach(t),Bbr=r(DPe," \u2014 "),tH=n(DPe,"A",{href:!0});var W5t=s(tH);Ibr=r(W5t,"TFTransfoXLLMHeadModel"),W5t.forEach(t),Nbr=r(DPe," (Transformer-XL model)"),DPe.forEach(t),qbr=i(le),xE=n(le,"LI",{});var GPe=s(xE);OFe=n(GPe,"STRONG",{});var Q5t=s(OFe);jbr=r(Q5t,"vit_mae"),Q5t.forEach(t),Dbr=r(GPe," \u2014 "),aH=n(GPe,"A",{href:!0});var H5t=s(aH);Gbr=r(H5t,"TFViTMAEForPreTraining"),H5t.forEach(t),Obr=r(GPe," (ViTMAE model)"),GPe.forEach(t),Vbr=i(le),$E=n(le,"LI",{});var OPe=s($E);VFe=n(OPe,"STRONG",{});var U5t=s(VFe);Xbr=r(U5t,"xlm"),U5t.forEach(t),zbr=r(OPe," \u2014 "),nH=n(OPe,"A",{href:!0});var J5t=s(nH);Wbr=r(J5t,"TFXLMWithLMHeadModel"),J5t.forEach(t),Qbr=r(OPe," (XLM model)"),OPe.forEach(t),Hbr=i(le),kE=n(le,"LI",{});var VPe=s(kE);XFe=n(VPe,"STRONG",{});var Y5t=s(XFe);Ubr=r(Y5t,"xlm-roberta"),Y5t.forEach(t),Jbr=r(VPe," \u2014 "),sH=n(VPe,"A",{href:!0});var K5t=s(sH);Ybr=r(K5t,"TFXLMRobertaForMaskedLM"),K5t.forEach(t),Kbr=r(VPe," (XLM-RoBERTa model)"),VPe.forEach(t),Zbr=i(le),SE=n(le,"LI",{});var XPe=s(SE);zFe=n(XPe,"STRONG",{});var Z5t=s(zFe);e2r=r(Z5t,"xlnet"),Z5t.forEach(t),o2r=r(XPe," \u2014 "),lH=n(XPe,"A",{href:!0});var e3t=s(lH);r2r=r(e3t,"TFXLNetLMHeadModel"),e3t.forEach(t),t2r=r(XPe," (XLNet model)"),XPe.forEach(t),le.forEach(t),a2r=i(_l),T(RE.$$.fragment,_l),_l.forEach(t),pl.forEach(t),ADe=i(m),Hd=n(m,"H2",{class:!0});var SOe=s(Hd);PE=n(SOe,"A",{id:!0,class:!0,href:!0});var o3t=s(PE);WFe=n(o3t,"SPAN",{});var r3t=s(WFe);T(I8.$$.fragment,r3t),r3t.forEach(t),o3t.forEach(t),n2r=i(SOe),QFe=n(SOe,"SPAN",{});var t3t=s(QFe);s2r=r(t3t,"TFAutoModelForCausalLM"),t3t.forEach(t),SOe.forEach(t),LDe=i(m),Zo=n(m,"DIV",{class:!0});var bl=s(Zo);T(N8.$$.fragment,bl),l2r=i(bl),Ud=n(bl,"P",{});var Jee=s(Ud);i2r=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),iH=n(Jee,"A",{href:!0});var a3t=s(iH);d2r=r(a3t,"from_pretrained()"),a3t.forEach(t),c2r=r(Jee," class method or the "),dH=n(Jee,"A",{href:!0});var n3t=s(dH);m2r=r(n3t,"from_config()"),n3t.forEach(t),f2r=r(Jee,` class
method.`),Jee.forEach(t),g2r=i(bl),q8=n(bl,"P",{});var ROe=s(q8);h2r=r(ROe,"This class cannot be instantiated directly using "),HFe=n(ROe,"CODE",{});var s3t=s(HFe);u2r=r(s3t,"__init__()"),s3t.forEach(t),p2r=r(ROe," (throws an error)."),ROe.forEach(t),_2r=i(bl),xt=n(bl,"DIV",{class:!0});var W6=s(xt);T(j8.$$.fragment,W6),b2r=i(W6),UFe=n(W6,"P",{});var l3t=s(UFe);v2r=r(l3t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),l3t.forEach(t),F2r=i(W6),Jd=n(W6,"P",{});var Yee=s(Jd);T2r=r(Yee,`Note:
Loading a model from its configuration file does `),JFe=n(Yee,"STRONG",{});var i3t=s(JFe);M2r=r(i3t,"not"),i3t.forEach(t),E2r=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(Yee,"A",{href:!0});var d3t=s(cH);C2r=r(d3t,"from_pretrained()"),d3t.forEach(t),w2r=r(Yee," to load the model weights."),Yee.forEach(t),A2r=i(W6),T(BE.$$.fragment,W6),W6.forEach(t),L2r=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(D8.$$.fragment,vl),y2r=i(vl),YFe=n(vl,"P",{});var c3t=s(YFe);x2r=r(c3t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),c3t.forEach(t),$2r=i(vl),en=n(vl,"P",{});var Q6=s(en);k2r=r(Q6,"The model class to instantiate is selected based on the "),KFe=n(Q6,"CODE",{});var m3t=s(KFe);S2r=r(m3t,"model_type"),m3t.forEach(t),R2r=r(Q6,` property of the config object (either
passed as an argument or loaded from `),ZFe=n(Q6,"CODE",{});var f3t=s(ZFe);P2r=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),B2r=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=n(Q6,"CODE",{});var g3t=s(e1e);I2r=r(g3t,"pretrained_model_name_or_path"),g3t.forEach(t),N2r=r(Q6,":"),Q6.forEach(t),q2r=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);IE=n(Ce,"LI",{});var zPe=s(IE);o1e=n(zPe,"STRONG",{});var h3t=s(o1e);j2r=r(h3t,"bert"),h3t.forEach(t),D2r=r(zPe," \u2014 "),mH=n(zPe,"A",{href:!0});var u3t=s(mH);G2r=r(u3t,"TFBertLMHeadModel"),u3t.forEach(t),O2r=r(zPe," (BERT model)"),zPe.forEach(t),V2r=i(Ce),NE=n(Ce,"LI",{});var WPe=s(NE);r1e=n(WPe,"STRONG",{});var p3t=s(r1e);X2r=r(p3t,"camembert"),p3t.forEach(t),z2r=r(WPe," \u2014 "),fH=n(WPe,"A",{href:!0});var _3t=s(fH);W2r=r(_3t,"TFCamembertForCausalLM"),_3t.forEach(t),Q2r=r(WPe," (CamemBERT model)"),WPe.forEach(t),H2r=i(Ce),qE=n(Ce,"LI",{});var QPe=s(qE);t1e=n(QPe,"STRONG",{});var b3t=s(t1e);U2r=r(b3t,"ctrl"),b3t.forEach(t),J2r=r(QPe," \u2014 "),gH=n(QPe,"A",{href:!0});var v3t=s(gH);Y2r=r(v3t,"TFCTRLLMHeadModel"),v3t.forEach(t),K2r=r(QPe," (CTRL model)"),QPe.forEach(t),Z2r=i(Ce),jE=n(Ce,"LI",{});var HPe=s(jE);a1e=n(HPe,"STRONG",{});var F3t=s(a1e);evr=r(F3t,"gpt2"),F3t.forEach(t),ovr=r(HPe," \u2014 "),hH=n(HPe,"A",{href:!0});var T3t=s(hH);rvr=r(T3t,"TFGPT2LMHeadModel"),T3t.forEach(t),tvr=r(HPe," (OpenAI GPT-2 model)"),HPe.forEach(t),avr=i(Ce),DE=n(Ce,"LI",{});var UPe=s(DE);n1e=n(UPe,"STRONG",{});var M3t=s(n1e);nvr=r(M3t,"gptj"),M3t.forEach(t),svr=r(UPe," \u2014 "),uH=n(UPe,"A",{href:!0});var E3t=s(uH);lvr=r(E3t,"TFGPTJForCausalLM"),E3t.forEach(t),ivr=r(UPe," (GPT-J model)"),UPe.forEach(t),dvr=i(Ce),GE=n(Ce,"LI",{});var JPe=s(GE);s1e=n(JPe,"STRONG",{});var C3t=s(s1e);cvr=r(C3t,"openai-gpt"),C3t.forEach(t),mvr=r(JPe," \u2014 "),pH=n(JPe,"A",{href:!0});var w3t=s(pH);fvr=r(w3t,"TFOpenAIGPTLMHeadModel"),w3t.forEach(t),gvr=r(JPe," (OpenAI GPT model)"),JPe.forEach(t),hvr=i(Ce),OE=n(Ce,"LI",{});var YPe=s(OE);l1e=n(YPe,"STRONG",{});var A3t=s(l1e);uvr=r(A3t,"opt"),A3t.forEach(t),pvr=r(YPe," \u2014 "),_H=n(YPe,"A",{href:!0});var L3t=s(_H);_vr=r(L3t,"TFOPTForCausalLM"),L3t.forEach(t),bvr=r(YPe," (OPT model)"),YPe.forEach(t),vvr=i(Ce),VE=n(Ce,"LI",{});var KPe=s(VE);i1e=n(KPe,"STRONG",{});var y3t=s(i1e);Fvr=r(y3t,"rembert"),y3t.forEach(t),Tvr=r(KPe," \u2014 "),bH=n(KPe,"A",{href:!0});var x3t=s(bH);Mvr=r(x3t,"TFRemBertForCausalLM"),x3t.forEach(t),Evr=r(KPe," (RemBERT model)"),KPe.forEach(t),Cvr=i(Ce),XE=n(Ce,"LI",{});var ZPe=s(XE);d1e=n(ZPe,"STRONG",{});var $3t=s(d1e);wvr=r($3t,"roberta"),$3t.forEach(t),Avr=r(ZPe," \u2014 "),vH=n(ZPe,"A",{href:!0});var k3t=s(vH);Lvr=r(k3t,"TFRobertaForCausalLM"),k3t.forEach(t),yvr=r(ZPe," (RoBERTa model)"),ZPe.forEach(t),xvr=i(Ce),zE=n(Ce,"LI",{});var eBe=s(zE);c1e=n(eBe,"STRONG",{});var S3t=s(c1e);$vr=r(S3t,"roformer"),S3t.forEach(t),kvr=r(eBe," \u2014 "),FH=n(eBe,"A",{href:!0});var R3t=s(FH);Svr=r(R3t,"TFRoFormerForCausalLM"),R3t.forEach(t),Rvr=r(eBe," (RoFormer model)"),eBe.forEach(t),Pvr=i(Ce),WE=n(Ce,"LI",{});var oBe=s(WE);m1e=n(oBe,"STRONG",{});var P3t=s(m1e);Bvr=r(P3t,"transfo-xl"),P3t.forEach(t),Ivr=r(oBe," \u2014 "),TH=n(oBe,"A",{href:!0});var B3t=s(TH);Nvr=r(B3t,"TFTransfoXLLMHeadModel"),B3t.forEach(t),qvr=r(oBe," (Transformer-XL model)"),oBe.forEach(t),jvr=i(Ce),QE=n(Ce,"LI",{});var rBe=s(QE);f1e=n(rBe,"STRONG",{});var I3t=s(f1e);Dvr=r(I3t,"xlm"),I3t.forEach(t),Gvr=r(rBe," \u2014 "),MH=n(rBe,"A",{href:!0});var N3t=s(MH);Ovr=r(N3t,"TFXLMWithLMHeadModel"),N3t.forEach(t),Vvr=r(rBe," (XLM model)"),rBe.forEach(t),Xvr=i(Ce),HE=n(Ce,"LI",{});var tBe=s(HE);g1e=n(tBe,"STRONG",{});var q3t=s(g1e);zvr=r(q3t,"xlnet"),q3t.forEach(t),Wvr=r(tBe," \u2014 "),EH=n(tBe,"A",{href:!0});var j3t=s(EH);Qvr=r(j3t,"TFXLNetLMHeadModel"),j3t.forEach(t),Hvr=r(tBe," (XLNet model)"),tBe.forEach(t),Ce.forEach(t),Uvr=i(vl),T(UE.$$.fragment,vl),vl.forEach(t),bl.forEach(t),yDe=i(m),Yd=n(m,"H2",{class:!0});var POe=s(Yd);JE=n(POe,"A",{id:!0,class:!0,href:!0});var D3t=s(JE);h1e=n(D3t,"SPAN",{});var G3t=s(h1e);T(G8.$$.fragment,G3t),G3t.forEach(t),D3t.forEach(t),Jvr=i(POe),u1e=n(POe,"SPAN",{});var O3t=s(u1e);Yvr=r(O3t,"TFAutoModelForImageClassification"),O3t.forEach(t),POe.forEach(t),xDe=i(m),er=n(m,"DIV",{class:!0});var Fl=s(er);T(O8.$$.fragment,Fl),Kvr=i(Fl),Kd=n(Fl,"P",{});var Kee=s(Kd);Zvr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CH=n(Kee,"A",{href:!0});var V3t=s(CH);eFr=r(V3t,"from_pretrained()"),V3t.forEach(t),oFr=r(Kee," class method or the "),wH=n(Kee,"A",{href:!0});var X3t=s(wH);rFr=r(X3t,"from_config()"),X3t.forEach(t),tFr=r(Kee,` class
method.`),Kee.forEach(t),aFr=i(Fl),V8=n(Fl,"P",{});var BOe=s(V8);nFr=r(BOe,"This class cannot be instantiated directly using "),p1e=n(BOe,"CODE",{});var z3t=s(p1e);sFr=r(z3t,"__init__()"),z3t.forEach(t),lFr=r(BOe," (throws an error)."),BOe.forEach(t),iFr=i(Fl),$t=n(Fl,"DIV",{class:!0});var H6=s($t);T(X8.$$.fragment,H6),dFr=i(H6),_1e=n(H6,"P",{});var W3t=s(_1e);cFr=r(W3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),W3t.forEach(t),mFr=i(H6),Zd=n(H6,"P",{});var Zee=s(Zd);fFr=r(Zee,`Note:
Loading a model from its configuration file does `),b1e=n(Zee,"STRONG",{});var Q3t=s(b1e);gFr=r(Q3t,"not"),Q3t.forEach(t),hFr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(Zee,"A",{href:!0});var H3t=s(AH);uFr=r(H3t,"from_pretrained()"),H3t.forEach(t),pFr=r(Zee," to load the model weights."),Zee.forEach(t),_Fr=i(H6),T(YE.$$.fragment,H6),H6.forEach(t),bFr=i(Fl),yr=n(Fl,"DIV",{class:!0});var Tl=s(yr);T(z8.$$.fragment,Tl),vFr=i(Tl),v1e=n(Tl,"P",{});var U3t=s(v1e);FFr=r(U3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),U3t.forEach(t),TFr=i(Tl),on=n(Tl,"P",{});var U6=s(on);MFr=r(U6,"The model class to instantiate is selected based on the "),F1e=n(U6,"CODE",{});var J3t=s(F1e);EFr=r(J3t,"model_type"),J3t.forEach(t),CFr=r(U6,` property of the config object (either
passed as an argument or loaded from `),T1e=n(U6,"CODE",{});var Y3t=s(T1e);wFr=r(Y3t,"pretrained_model_name_or_path"),Y3t.forEach(t),AFr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(U6,"CODE",{});var K3t=s(M1e);LFr=r(K3t,"pretrained_model_name_or_path"),K3t.forEach(t),yFr=r(U6,":"),U6.forEach(t),xFr=i(Tl),rn=n(Tl,"UL",{});var J6=s(rn);KE=n(J6,"LI",{});var aBe=s(KE);E1e=n(aBe,"STRONG",{});var Z3t=s(E1e);$Fr=r(Z3t,"convnext"),Z3t.forEach(t),kFr=r(aBe," \u2014 "),LH=n(aBe,"A",{href:!0});var e0t=s(LH);SFr=r(e0t,"TFConvNextForImageClassification"),e0t.forEach(t),RFr=r(aBe," (ConvNeXT model)"),aBe.forEach(t),PFr=i(J6),ZE=n(J6,"LI",{});var nBe=s(ZE);C1e=n(nBe,"STRONG",{});var o0t=s(C1e);BFr=r(o0t,"data2vec-vision"),o0t.forEach(t),IFr=r(nBe," \u2014 "),yH=n(nBe,"A",{href:!0});var r0t=s(yH);NFr=r(r0t,"TFData2VecVisionForImageClassification"),r0t.forEach(t),qFr=r(nBe," (Data2VecVision model)"),nBe.forEach(t),jFr=i(J6),eC=n(J6,"LI",{});var sBe=s(eC);w1e=n(sBe,"STRONG",{});var t0t=s(w1e);DFr=r(t0t,"swin"),t0t.forEach(t),GFr=r(sBe," \u2014 "),xH=n(sBe,"A",{href:!0});var a0t=s(xH);OFr=r(a0t,"TFSwinForImageClassification"),a0t.forEach(t),VFr=r(sBe," (Swin Transformer model)"),sBe.forEach(t),XFr=i(J6),oC=n(J6,"LI",{});var lBe=s(oC);A1e=n(lBe,"STRONG",{});var n0t=s(A1e);zFr=r(n0t,"vit"),n0t.forEach(t),WFr=r(lBe," \u2014 "),$H=n(lBe,"A",{href:!0});var s0t=s($H);QFr=r(s0t,"TFViTForImageClassification"),s0t.forEach(t),HFr=r(lBe," (ViT model)"),lBe.forEach(t),J6.forEach(t),UFr=i(Tl),T(rC.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),$De=i(m),ec=n(m,"H2",{class:!0});var IOe=s(ec);tC=n(IOe,"A",{id:!0,class:!0,href:!0});var l0t=s(tC);L1e=n(l0t,"SPAN",{});var i0t=s(L1e);T(W8.$$.fragment,i0t),i0t.forEach(t),l0t.forEach(t),JFr=i(IOe),y1e=n(IOe,"SPAN",{});var d0t=s(y1e);YFr=r(d0t,"TFAutoModelForMaskedLM"),d0t.forEach(t),IOe.forEach(t),kDe=i(m),or=n(m,"DIV",{class:!0});var Ml=s(or);T(Q8.$$.fragment,Ml),KFr=i(Ml),oc=n(Ml,"P",{});var eoe=s(oc);ZFr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kH=n(eoe,"A",{href:!0});var c0t=s(kH);e1r=r(c0t,"from_pretrained()"),c0t.forEach(t),o1r=r(eoe," class method or the "),SH=n(eoe,"A",{href:!0});var m0t=s(SH);r1r=r(m0t,"from_config()"),m0t.forEach(t),t1r=r(eoe,` class
method.`),eoe.forEach(t),a1r=i(Ml),H8=n(Ml,"P",{});var NOe=s(H8);n1r=r(NOe,"This class cannot be instantiated directly using "),x1e=n(NOe,"CODE",{});var f0t=s(x1e);s1r=r(f0t,"__init__()"),f0t.forEach(t),l1r=r(NOe," (throws an error)."),NOe.forEach(t),i1r=i(Ml),kt=n(Ml,"DIV",{class:!0});var Y6=s(kt);T(U8.$$.fragment,Y6),d1r=i(Y6),$1e=n(Y6,"P",{});var g0t=s($1e);c1r=r(g0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),g0t.forEach(t),m1r=i(Y6),rc=n(Y6,"P",{});var ooe=s(rc);f1r=r(ooe,`Note:
Loading a model from its configuration file does `),k1e=n(ooe,"STRONG",{});var h0t=s(k1e);g1r=r(h0t,"not"),h0t.forEach(t),h1r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(ooe,"A",{href:!0});var u0t=s(RH);u1r=r(u0t,"from_pretrained()"),u0t.forEach(t),p1r=r(ooe," to load the model weights."),ooe.forEach(t),_1r=i(Y6),T(aC.$$.fragment,Y6),Y6.forEach(t),b1r=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(J8.$$.fragment,El),v1r=i(El),S1e=n(El,"P",{});var p0t=s(S1e);F1r=r(p0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),p0t.forEach(t),T1r=i(El),tn=n(El,"P",{});var K6=s(tn);M1r=r(K6,"The model class to instantiate is selected based on the "),R1e=n(K6,"CODE",{});var _0t=s(R1e);E1r=r(_0t,"model_type"),_0t.forEach(t),C1r=r(K6,` property of the config object (either
passed as an argument or loaded from `),P1e=n(K6,"CODE",{});var b0t=s(P1e);w1r=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),A1r=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B1e=n(K6,"CODE",{});var v0t=s(B1e);L1r=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),y1r=r(K6,":"),K6.forEach(t),x1r=i(El),ie=n(El,"UL",{});var me=s(ie);nC=n(me,"LI",{});var iBe=s(nC);I1e=n(iBe,"STRONG",{});var F0t=s(I1e);$1r=r(F0t,"albert"),F0t.forEach(t),k1r=r(iBe," \u2014 "),PH=n(iBe,"A",{href:!0});var T0t=s(PH);S1r=r(T0t,"TFAlbertForMaskedLM"),T0t.forEach(t),R1r=r(iBe," (ALBERT model)"),iBe.forEach(t),P1r=i(me),sC=n(me,"LI",{});var dBe=s(sC);N1e=n(dBe,"STRONG",{});var M0t=s(N1e);B1r=r(M0t,"bert"),M0t.forEach(t),I1r=r(dBe," \u2014 "),BH=n(dBe,"A",{href:!0});var E0t=s(BH);N1r=r(E0t,"TFBertForMaskedLM"),E0t.forEach(t),q1r=r(dBe," (BERT model)"),dBe.forEach(t),j1r=i(me),lC=n(me,"LI",{});var cBe=s(lC);q1e=n(cBe,"STRONG",{});var C0t=s(q1e);D1r=r(C0t,"camembert"),C0t.forEach(t),G1r=r(cBe," \u2014 "),IH=n(cBe,"A",{href:!0});var w0t=s(IH);O1r=r(w0t,"TFCamembertForMaskedLM"),w0t.forEach(t),V1r=r(cBe," (CamemBERT model)"),cBe.forEach(t),X1r=i(me),iC=n(me,"LI",{});var mBe=s(iC);j1e=n(mBe,"STRONG",{});var A0t=s(j1e);z1r=r(A0t,"convbert"),A0t.forEach(t),W1r=r(mBe," \u2014 "),NH=n(mBe,"A",{href:!0});var L0t=s(NH);Q1r=r(L0t,"TFConvBertForMaskedLM"),L0t.forEach(t),H1r=r(mBe," (ConvBERT model)"),mBe.forEach(t),U1r=i(me),dC=n(me,"LI",{});var fBe=s(dC);D1e=n(fBe,"STRONG",{});var y0t=s(D1e);J1r=r(y0t,"deberta"),y0t.forEach(t),Y1r=r(fBe," \u2014 "),qH=n(fBe,"A",{href:!0});var x0t=s(qH);K1r=r(x0t,"TFDebertaForMaskedLM"),x0t.forEach(t),Z1r=r(fBe," (DeBERTa model)"),fBe.forEach(t),eTr=i(me),cC=n(me,"LI",{});var gBe=s(cC);G1e=n(gBe,"STRONG",{});var $0t=s(G1e);oTr=r($0t,"deberta-v2"),$0t.forEach(t),rTr=r(gBe," \u2014 "),jH=n(gBe,"A",{href:!0});var k0t=s(jH);tTr=r(k0t,"TFDebertaV2ForMaskedLM"),k0t.forEach(t),aTr=r(gBe," (DeBERTa-v2 model)"),gBe.forEach(t),nTr=i(me),mC=n(me,"LI",{});var hBe=s(mC);O1e=n(hBe,"STRONG",{});var S0t=s(O1e);sTr=r(S0t,"distilbert"),S0t.forEach(t),lTr=r(hBe," \u2014 "),DH=n(hBe,"A",{href:!0});var R0t=s(DH);iTr=r(R0t,"TFDistilBertForMaskedLM"),R0t.forEach(t),dTr=r(hBe," (DistilBERT model)"),hBe.forEach(t),cTr=i(me),fC=n(me,"LI",{});var uBe=s(fC);V1e=n(uBe,"STRONG",{});var P0t=s(V1e);mTr=r(P0t,"electra"),P0t.forEach(t),fTr=r(uBe," \u2014 "),GH=n(uBe,"A",{href:!0});var B0t=s(GH);gTr=r(B0t,"TFElectraForMaskedLM"),B0t.forEach(t),hTr=r(uBe," (ELECTRA model)"),uBe.forEach(t),uTr=i(me),gC=n(me,"LI",{});var pBe=s(gC);X1e=n(pBe,"STRONG",{});var I0t=s(X1e);pTr=r(I0t,"flaubert"),I0t.forEach(t),_Tr=r(pBe," \u2014 "),OH=n(pBe,"A",{href:!0});var N0t=s(OH);bTr=r(N0t,"TFFlaubertWithLMHeadModel"),N0t.forEach(t),vTr=r(pBe," (FlauBERT model)"),pBe.forEach(t),FTr=i(me),hC=n(me,"LI",{});var _Be=s(hC);z1e=n(_Be,"STRONG",{});var q0t=s(z1e);TTr=r(q0t,"funnel"),q0t.forEach(t),MTr=r(_Be," \u2014 "),VH=n(_Be,"A",{href:!0});var j0t=s(VH);ETr=r(j0t,"TFFunnelForMaskedLM"),j0t.forEach(t),CTr=r(_Be," (Funnel Transformer model)"),_Be.forEach(t),wTr=i(me),uC=n(me,"LI",{});var bBe=s(uC);W1e=n(bBe,"STRONG",{});var D0t=s(W1e);ATr=r(D0t,"layoutlm"),D0t.forEach(t),LTr=r(bBe," \u2014 "),XH=n(bBe,"A",{href:!0});var G0t=s(XH);yTr=r(G0t,"TFLayoutLMForMaskedLM"),G0t.forEach(t),xTr=r(bBe," (LayoutLM model)"),bBe.forEach(t),$Tr=i(me),pC=n(me,"LI",{});var vBe=s(pC);Q1e=n(vBe,"STRONG",{});var O0t=s(Q1e);kTr=r(O0t,"longformer"),O0t.forEach(t),STr=r(vBe," \u2014 "),zH=n(vBe,"A",{href:!0});var V0t=s(zH);RTr=r(V0t,"TFLongformerForMaskedLM"),V0t.forEach(t),PTr=r(vBe," (Longformer model)"),vBe.forEach(t),BTr=i(me),_C=n(me,"LI",{});var FBe=s(_C);H1e=n(FBe,"STRONG",{});var X0t=s(H1e);ITr=r(X0t,"mobilebert"),X0t.forEach(t),NTr=r(FBe," \u2014 "),WH=n(FBe,"A",{href:!0});var z0t=s(WH);qTr=r(z0t,"TFMobileBertForMaskedLM"),z0t.forEach(t),jTr=r(FBe," (MobileBERT model)"),FBe.forEach(t),DTr=i(me),bC=n(me,"LI",{});var TBe=s(bC);U1e=n(TBe,"STRONG",{});var W0t=s(U1e);GTr=r(W0t,"mpnet"),W0t.forEach(t),OTr=r(TBe," \u2014 "),QH=n(TBe,"A",{href:!0});var Q0t=s(QH);VTr=r(Q0t,"TFMPNetForMaskedLM"),Q0t.forEach(t),XTr=r(TBe," (MPNet model)"),TBe.forEach(t),zTr=i(me),vC=n(me,"LI",{});var MBe=s(vC);J1e=n(MBe,"STRONG",{});var H0t=s(J1e);WTr=r(H0t,"rembert"),H0t.forEach(t),QTr=r(MBe," \u2014 "),HH=n(MBe,"A",{href:!0});var U0t=s(HH);HTr=r(U0t,"TFRemBertForMaskedLM"),U0t.forEach(t),UTr=r(MBe," (RemBERT model)"),MBe.forEach(t),JTr=i(me),FC=n(me,"LI",{});var EBe=s(FC);Y1e=n(EBe,"STRONG",{});var J0t=s(Y1e);YTr=r(J0t,"roberta"),J0t.forEach(t),KTr=r(EBe," \u2014 "),UH=n(EBe,"A",{href:!0});var Y0t=s(UH);ZTr=r(Y0t,"TFRobertaForMaskedLM"),Y0t.forEach(t),eMr=r(EBe," (RoBERTa model)"),EBe.forEach(t),oMr=i(me),TC=n(me,"LI",{});var CBe=s(TC);K1e=n(CBe,"STRONG",{});var K0t=s(K1e);rMr=r(K0t,"roformer"),K0t.forEach(t),tMr=r(CBe," \u2014 "),JH=n(CBe,"A",{href:!0});var Z0t=s(JH);aMr=r(Z0t,"TFRoFormerForMaskedLM"),Z0t.forEach(t),nMr=r(CBe," (RoFormer model)"),CBe.forEach(t),sMr=i(me),MC=n(me,"LI",{});var wBe=s(MC);Z1e=n(wBe,"STRONG",{});var ewt=s(Z1e);lMr=r(ewt,"tapas"),ewt.forEach(t),iMr=r(wBe," \u2014 "),YH=n(wBe,"A",{href:!0});var owt=s(YH);dMr=r(owt,"TFTapasForMaskedLM"),owt.forEach(t),cMr=r(wBe," (TAPAS model)"),wBe.forEach(t),mMr=i(me),EC=n(me,"LI",{});var ABe=s(EC);eTe=n(ABe,"STRONG",{});var rwt=s(eTe);fMr=r(rwt,"xlm"),rwt.forEach(t),gMr=r(ABe," \u2014 "),KH=n(ABe,"A",{href:!0});var twt=s(KH);hMr=r(twt,"TFXLMWithLMHeadModel"),twt.forEach(t),uMr=r(ABe," (XLM model)"),ABe.forEach(t),pMr=i(me),CC=n(me,"LI",{});var LBe=s(CC);oTe=n(LBe,"STRONG",{});var awt=s(oTe);_Mr=r(awt,"xlm-roberta"),awt.forEach(t),bMr=r(LBe," \u2014 "),ZH=n(LBe,"A",{href:!0});var nwt=s(ZH);vMr=r(nwt,"TFXLMRobertaForMaskedLM"),nwt.forEach(t),FMr=r(LBe," (XLM-RoBERTa model)"),LBe.forEach(t),me.forEach(t),TMr=i(El),T(wC.$$.fragment,El),El.forEach(t),Ml.forEach(t),SDe=i(m),tc=n(m,"H2",{class:!0});var qOe=s(tc);AC=n(qOe,"A",{id:!0,class:!0,href:!0});var swt=s(AC);rTe=n(swt,"SPAN",{});var lwt=s(rTe);T(Y8.$$.fragment,lwt),lwt.forEach(t),swt.forEach(t),MMr=i(qOe),tTe=n(qOe,"SPAN",{});var iwt=s(tTe);EMr=r(iwt,"TFAutoModelForSeq2SeqLM"),iwt.forEach(t),qOe.forEach(t),RDe=i(m),rr=n(m,"DIV",{class:!0});var Cl=s(rr);T(K8.$$.fragment,Cl),CMr=i(Cl),ac=n(Cl,"P",{});var roe=s(ac);wMr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eU=n(roe,"A",{href:!0});var dwt=s(eU);AMr=r(dwt,"from_pretrained()"),dwt.forEach(t),LMr=r(roe," class method or the "),oU=n(roe,"A",{href:!0});var cwt=s(oU);yMr=r(cwt,"from_config()"),cwt.forEach(t),xMr=r(roe,` class
method.`),roe.forEach(t),$Mr=i(Cl),Z8=n(Cl,"P",{});var jOe=s(Z8);kMr=r(jOe,"This class cannot be instantiated directly using "),aTe=n(jOe,"CODE",{});var mwt=s(aTe);SMr=r(mwt,"__init__()"),mwt.forEach(t),RMr=r(jOe," (throws an error)."),jOe.forEach(t),PMr=i(Cl),St=n(Cl,"DIV",{class:!0});var Z6=s(St);T(e9.$$.fragment,Z6),BMr=i(Z6),nTe=n(Z6,"P",{});var fwt=s(nTe);IMr=r(fwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fwt.forEach(t),NMr=i(Z6),nc=n(Z6,"P",{});var toe=s(nc);qMr=r(toe,`Note:
Loading a model from its configuration file does `),sTe=n(toe,"STRONG",{});var gwt=s(sTe);jMr=r(gwt,"not"),gwt.forEach(t),DMr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(toe,"A",{href:!0});var hwt=s(rU);GMr=r(hwt,"from_pretrained()"),hwt.forEach(t),OMr=r(toe," to load the model weights."),toe.forEach(t),VMr=i(Z6),T(LC.$$.fragment,Z6),Z6.forEach(t),XMr=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(o9.$$.fragment,wl),zMr=i(wl),lTe=n(wl,"P",{});var uwt=s(lTe);WMr=r(uwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uwt.forEach(t),QMr=i(wl),an=n(wl,"P",{});var eL=s(an);HMr=r(eL,"The model class to instantiate is selected based on the "),iTe=n(eL,"CODE",{});var pwt=s(iTe);UMr=r(pwt,"model_type"),pwt.forEach(t),JMr=r(eL,` property of the config object (either
passed as an argument or loaded from `),dTe=n(eL,"CODE",{});var _wt=s(dTe);YMr=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),KMr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(eL,"CODE",{});var bwt=s(cTe);ZMr=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),e4r=r(eL,":"),eL.forEach(t),o4r=i(wl),ye=n(wl,"UL",{});var Ie=s(ye);yC=n(Ie,"LI",{});var yBe=s(yC);mTe=n(yBe,"STRONG",{});var vwt=s(mTe);r4r=r(vwt,"bart"),vwt.forEach(t),t4r=r(yBe," \u2014 "),tU=n(yBe,"A",{href:!0});var Fwt=s(tU);a4r=r(Fwt,"TFBartForConditionalGeneration"),Fwt.forEach(t),n4r=r(yBe," (BART model)"),yBe.forEach(t),s4r=i(Ie),xC=n(Ie,"LI",{});var xBe=s(xC);fTe=n(xBe,"STRONG",{});var Twt=s(fTe);l4r=r(Twt,"blenderbot"),Twt.forEach(t),i4r=r(xBe," \u2014 "),aU=n(xBe,"A",{href:!0});var Mwt=s(aU);d4r=r(Mwt,"TFBlenderbotForConditionalGeneration"),Mwt.forEach(t),c4r=r(xBe," (Blenderbot model)"),xBe.forEach(t),m4r=i(Ie),$C=n(Ie,"LI",{});var $Be=s($C);gTe=n($Be,"STRONG",{});var Ewt=s(gTe);f4r=r(Ewt,"blenderbot-small"),Ewt.forEach(t),g4r=r($Be," \u2014 "),nU=n($Be,"A",{href:!0});var Cwt=s(nU);h4r=r(Cwt,"TFBlenderbotSmallForConditionalGeneration"),Cwt.forEach(t),u4r=r($Be," (BlenderbotSmall model)"),$Be.forEach(t),p4r=i(Ie),kC=n(Ie,"LI",{});var kBe=s(kC);hTe=n(kBe,"STRONG",{});var wwt=s(hTe);_4r=r(wwt,"encoder-decoder"),wwt.forEach(t),b4r=r(kBe," \u2014 "),sU=n(kBe,"A",{href:!0});var Awt=s(sU);v4r=r(Awt,"TFEncoderDecoderModel"),Awt.forEach(t),F4r=r(kBe," (Encoder decoder model)"),kBe.forEach(t),T4r=i(Ie),SC=n(Ie,"LI",{});var SBe=s(SC);uTe=n(SBe,"STRONG",{});var Lwt=s(uTe);M4r=r(Lwt,"led"),Lwt.forEach(t),E4r=r(SBe," \u2014 "),lU=n(SBe,"A",{href:!0});var ywt=s(lU);C4r=r(ywt,"TFLEDForConditionalGeneration"),ywt.forEach(t),w4r=r(SBe," (LED model)"),SBe.forEach(t),A4r=i(Ie),RC=n(Ie,"LI",{});var RBe=s(RC);pTe=n(RBe,"STRONG",{});var xwt=s(pTe);L4r=r(xwt,"marian"),xwt.forEach(t),y4r=r(RBe," \u2014 "),iU=n(RBe,"A",{href:!0});var $wt=s(iU);x4r=r($wt,"TFMarianMTModel"),$wt.forEach(t),$4r=r(RBe," (Marian model)"),RBe.forEach(t),k4r=i(Ie),PC=n(Ie,"LI",{});var PBe=s(PC);_Te=n(PBe,"STRONG",{});var kwt=s(_Te);S4r=r(kwt,"mbart"),kwt.forEach(t),R4r=r(PBe," \u2014 "),dU=n(PBe,"A",{href:!0});var Swt=s(dU);P4r=r(Swt,"TFMBartForConditionalGeneration"),Swt.forEach(t),B4r=r(PBe," (mBART model)"),PBe.forEach(t),I4r=i(Ie),BC=n(Ie,"LI",{});var BBe=s(BC);bTe=n(BBe,"STRONG",{});var Rwt=s(bTe);N4r=r(Rwt,"mt5"),Rwt.forEach(t),q4r=r(BBe," \u2014 "),cU=n(BBe,"A",{href:!0});var Pwt=s(cU);j4r=r(Pwt,"TFMT5ForConditionalGeneration"),Pwt.forEach(t),D4r=r(BBe," (MT5 model)"),BBe.forEach(t),G4r=i(Ie),IC=n(Ie,"LI",{});var IBe=s(IC);vTe=n(IBe,"STRONG",{});var Bwt=s(vTe);O4r=r(Bwt,"pegasus"),Bwt.forEach(t),V4r=r(IBe," \u2014 "),mU=n(IBe,"A",{href:!0});var Iwt=s(mU);X4r=r(Iwt,"TFPegasusForConditionalGeneration"),Iwt.forEach(t),z4r=r(IBe," (Pegasus model)"),IBe.forEach(t),W4r=i(Ie),NC=n(Ie,"LI",{});var NBe=s(NC);FTe=n(NBe,"STRONG",{});var Nwt=s(FTe);Q4r=r(Nwt,"t5"),Nwt.forEach(t),H4r=r(NBe," \u2014 "),fU=n(NBe,"A",{href:!0});var qwt=s(fU);U4r=r(qwt,"TFT5ForConditionalGeneration"),qwt.forEach(t),J4r=r(NBe," (T5 model)"),NBe.forEach(t),Ie.forEach(t),Y4r=i(wl),T(qC.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),PDe=i(m),sc=n(m,"H2",{class:!0});var DOe=s(sc);jC=n(DOe,"A",{id:!0,class:!0,href:!0});var jwt=s(jC);TTe=n(jwt,"SPAN",{});var Dwt=s(TTe);T(r9.$$.fragment,Dwt),Dwt.forEach(t),jwt.forEach(t),K4r=i(DOe),MTe=n(DOe,"SPAN",{});var Gwt=s(MTe);Z4r=r(Gwt,"TFAutoModelForSequenceClassification"),Gwt.forEach(t),DOe.forEach(t),BDe=i(m),tr=n(m,"DIV",{class:!0});var Al=s(tr);T(t9.$$.fragment,Al),eEr=i(Al),lc=n(Al,"P",{});var aoe=s(lc);oEr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gU=n(aoe,"A",{href:!0});var Owt=s(gU);rEr=r(Owt,"from_pretrained()"),Owt.forEach(t),tEr=r(aoe," class method or the "),hU=n(aoe,"A",{href:!0});var Vwt=s(hU);aEr=r(Vwt,"from_config()"),Vwt.forEach(t),nEr=r(aoe,` class
method.`),aoe.forEach(t),sEr=i(Al),a9=n(Al,"P",{});var GOe=s(a9);lEr=r(GOe,"This class cannot be instantiated directly using "),ETe=n(GOe,"CODE",{});var Xwt=s(ETe);iEr=r(Xwt,"__init__()"),Xwt.forEach(t),dEr=r(GOe," (throws an error)."),GOe.forEach(t),cEr=i(Al),Rt=n(Al,"DIV",{class:!0});var oL=s(Rt);T(n9.$$.fragment,oL),mEr=i(oL),CTe=n(oL,"P",{});var zwt=s(CTe);fEr=r(zwt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zwt.forEach(t),gEr=i(oL),ic=n(oL,"P",{});var noe=s(ic);hEr=r(noe,`Note:
Loading a model from its configuration file does `),wTe=n(noe,"STRONG",{});var Wwt=s(wTe);uEr=r(Wwt,"not"),Wwt.forEach(t),pEr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(noe,"A",{href:!0});var Qwt=s(uU);_Er=r(Qwt,"from_pretrained()"),Qwt.forEach(t),bEr=r(noe," to load the model weights."),noe.forEach(t),vEr=i(oL),T(DC.$$.fragment,oL),oL.forEach(t),FEr=i(Al),kr=n(Al,"DIV",{class:!0});var Ll=s(kr);T(s9.$$.fragment,Ll),TEr=i(Ll),ATe=n(Ll,"P",{});var Hwt=s(ATe);MEr=r(Hwt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Hwt.forEach(t),EEr=i(Ll),nn=n(Ll,"P",{});var rL=s(nn);CEr=r(rL,"The model class to instantiate is selected based on the "),LTe=n(rL,"CODE",{});var Uwt=s(LTe);wEr=r(Uwt,"model_type"),Uwt.forEach(t),AEr=r(rL,` property of the config object (either
passed as an argument or loaded from `),yTe=n(rL,"CODE",{});var Jwt=s(yTe);LEr=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),yEr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=n(rL,"CODE",{});var Ywt=s(xTe);xEr=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),$Er=r(rL,":"),rL.forEach(t),kEr=i(Ll),oe=n(Ll,"UL",{});var ae=s(oe);GC=n(ae,"LI",{});var qBe=s(GC);$Te=n(qBe,"STRONG",{});var Kwt=s($Te);SEr=r(Kwt,"albert"),Kwt.forEach(t),REr=r(qBe," \u2014 "),pU=n(qBe,"A",{href:!0});var Zwt=s(pU);PEr=r(Zwt,"TFAlbertForSequenceClassification"),Zwt.forEach(t),BEr=r(qBe," (ALBERT model)"),qBe.forEach(t),IEr=i(ae),OC=n(ae,"LI",{});var jBe=s(OC);kTe=n(jBe,"STRONG",{});var eAt=s(kTe);NEr=r(eAt,"bert"),eAt.forEach(t),qEr=r(jBe," \u2014 "),_U=n(jBe,"A",{href:!0});var oAt=s(_U);jEr=r(oAt,"TFBertForSequenceClassification"),oAt.forEach(t),DEr=r(jBe," (BERT model)"),jBe.forEach(t),GEr=i(ae),VC=n(ae,"LI",{});var DBe=s(VC);STe=n(DBe,"STRONG",{});var rAt=s(STe);OEr=r(rAt,"camembert"),rAt.forEach(t),VEr=r(DBe," \u2014 "),bU=n(DBe,"A",{href:!0});var tAt=s(bU);XEr=r(tAt,"TFCamembertForSequenceClassification"),tAt.forEach(t),zEr=r(DBe," (CamemBERT model)"),DBe.forEach(t),WEr=i(ae),XC=n(ae,"LI",{});var GBe=s(XC);RTe=n(GBe,"STRONG",{});var aAt=s(RTe);QEr=r(aAt,"convbert"),aAt.forEach(t),HEr=r(GBe," \u2014 "),vU=n(GBe,"A",{href:!0});var nAt=s(vU);UEr=r(nAt,"TFConvBertForSequenceClassification"),nAt.forEach(t),JEr=r(GBe," (ConvBERT model)"),GBe.forEach(t),YEr=i(ae),zC=n(ae,"LI",{});var OBe=s(zC);PTe=n(OBe,"STRONG",{});var sAt=s(PTe);KEr=r(sAt,"ctrl"),sAt.forEach(t),ZEr=r(OBe," \u2014 "),FU=n(OBe,"A",{href:!0});var lAt=s(FU);eCr=r(lAt,"TFCTRLForSequenceClassification"),lAt.forEach(t),oCr=r(OBe," (CTRL model)"),OBe.forEach(t),rCr=i(ae),WC=n(ae,"LI",{});var VBe=s(WC);BTe=n(VBe,"STRONG",{});var iAt=s(BTe);tCr=r(iAt,"deberta"),iAt.forEach(t),aCr=r(VBe," \u2014 "),TU=n(VBe,"A",{href:!0});var dAt=s(TU);nCr=r(dAt,"TFDebertaForSequenceClassification"),dAt.forEach(t),sCr=r(VBe," (DeBERTa model)"),VBe.forEach(t),lCr=i(ae),QC=n(ae,"LI",{});var XBe=s(QC);ITe=n(XBe,"STRONG",{});var cAt=s(ITe);iCr=r(cAt,"deberta-v2"),cAt.forEach(t),dCr=r(XBe," \u2014 "),MU=n(XBe,"A",{href:!0});var mAt=s(MU);cCr=r(mAt,"TFDebertaV2ForSequenceClassification"),mAt.forEach(t),mCr=r(XBe," (DeBERTa-v2 model)"),XBe.forEach(t),fCr=i(ae),HC=n(ae,"LI",{});var zBe=s(HC);NTe=n(zBe,"STRONG",{});var fAt=s(NTe);gCr=r(fAt,"distilbert"),fAt.forEach(t),hCr=r(zBe," \u2014 "),EU=n(zBe,"A",{href:!0});var gAt=s(EU);uCr=r(gAt,"TFDistilBertForSequenceClassification"),gAt.forEach(t),pCr=r(zBe," (DistilBERT model)"),zBe.forEach(t),_Cr=i(ae),UC=n(ae,"LI",{});var WBe=s(UC);qTe=n(WBe,"STRONG",{});var hAt=s(qTe);bCr=r(hAt,"electra"),hAt.forEach(t),vCr=r(WBe," \u2014 "),CU=n(WBe,"A",{href:!0});var uAt=s(CU);FCr=r(uAt,"TFElectraForSequenceClassification"),uAt.forEach(t),TCr=r(WBe," (ELECTRA model)"),WBe.forEach(t),MCr=i(ae),JC=n(ae,"LI",{});var QBe=s(JC);jTe=n(QBe,"STRONG",{});var pAt=s(jTe);ECr=r(pAt,"flaubert"),pAt.forEach(t),CCr=r(QBe," \u2014 "),wU=n(QBe,"A",{href:!0});var _At=s(wU);wCr=r(_At,"TFFlaubertForSequenceClassification"),_At.forEach(t),ACr=r(QBe," (FlauBERT model)"),QBe.forEach(t),LCr=i(ae),YC=n(ae,"LI",{});var HBe=s(YC);DTe=n(HBe,"STRONG",{});var bAt=s(DTe);yCr=r(bAt,"funnel"),bAt.forEach(t),xCr=r(HBe," \u2014 "),AU=n(HBe,"A",{href:!0});var vAt=s(AU);$Cr=r(vAt,"TFFunnelForSequenceClassification"),vAt.forEach(t),kCr=r(HBe," (Funnel Transformer model)"),HBe.forEach(t),SCr=i(ae),KC=n(ae,"LI",{});var UBe=s(KC);GTe=n(UBe,"STRONG",{});var FAt=s(GTe);RCr=r(FAt,"gpt2"),FAt.forEach(t),PCr=r(UBe," \u2014 "),LU=n(UBe,"A",{href:!0});var TAt=s(LU);BCr=r(TAt,"TFGPT2ForSequenceClassification"),TAt.forEach(t),ICr=r(UBe," (OpenAI GPT-2 model)"),UBe.forEach(t),NCr=i(ae),ZC=n(ae,"LI",{});var JBe=s(ZC);OTe=n(JBe,"STRONG",{});var MAt=s(OTe);qCr=r(MAt,"gptj"),MAt.forEach(t),jCr=r(JBe," \u2014 "),yU=n(JBe,"A",{href:!0});var EAt=s(yU);DCr=r(EAt,"TFGPTJForSequenceClassification"),EAt.forEach(t),GCr=r(JBe," (GPT-J model)"),JBe.forEach(t),OCr=i(ae),e5=n(ae,"LI",{});var YBe=s(e5);VTe=n(YBe,"STRONG",{});var CAt=s(VTe);VCr=r(CAt,"layoutlm"),CAt.forEach(t),XCr=r(YBe," \u2014 "),xU=n(YBe,"A",{href:!0});var wAt=s(xU);zCr=r(wAt,"TFLayoutLMForSequenceClassification"),wAt.forEach(t),WCr=r(YBe," (LayoutLM model)"),YBe.forEach(t),QCr=i(ae),o5=n(ae,"LI",{});var KBe=s(o5);XTe=n(KBe,"STRONG",{});var AAt=s(XTe);HCr=r(AAt,"longformer"),AAt.forEach(t),UCr=r(KBe," \u2014 "),$U=n(KBe,"A",{href:!0});var LAt=s($U);JCr=r(LAt,"TFLongformerForSequenceClassification"),LAt.forEach(t),YCr=r(KBe," (Longformer model)"),KBe.forEach(t),KCr=i(ae),r5=n(ae,"LI",{});var ZBe=s(r5);zTe=n(ZBe,"STRONG",{});var yAt=s(zTe);ZCr=r(yAt,"mobilebert"),yAt.forEach(t),e5r=r(ZBe," \u2014 "),kU=n(ZBe,"A",{href:!0});var xAt=s(kU);o5r=r(xAt,"TFMobileBertForSequenceClassification"),xAt.forEach(t),r5r=r(ZBe," (MobileBERT model)"),ZBe.forEach(t),t5r=i(ae),t5=n(ae,"LI",{});var eIe=s(t5);WTe=n(eIe,"STRONG",{});var $At=s(WTe);a5r=r($At,"mpnet"),$At.forEach(t),n5r=r(eIe," \u2014 "),SU=n(eIe,"A",{href:!0});var kAt=s(SU);s5r=r(kAt,"TFMPNetForSequenceClassification"),kAt.forEach(t),l5r=r(eIe," (MPNet model)"),eIe.forEach(t),i5r=i(ae),a5=n(ae,"LI",{});var oIe=s(a5);QTe=n(oIe,"STRONG",{});var SAt=s(QTe);d5r=r(SAt,"openai-gpt"),SAt.forEach(t),c5r=r(oIe," \u2014 "),RU=n(oIe,"A",{href:!0});var RAt=s(RU);m5r=r(RAt,"TFOpenAIGPTForSequenceClassification"),RAt.forEach(t),f5r=r(oIe," (OpenAI GPT model)"),oIe.forEach(t),g5r=i(ae),n5=n(ae,"LI",{});var rIe=s(n5);HTe=n(rIe,"STRONG",{});var PAt=s(HTe);h5r=r(PAt,"rembert"),PAt.forEach(t),u5r=r(rIe," \u2014 "),PU=n(rIe,"A",{href:!0});var BAt=s(PU);p5r=r(BAt,"TFRemBertForSequenceClassification"),BAt.forEach(t),_5r=r(rIe," (RemBERT model)"),rIe.forEach(t),b5r=i(ae),s5=n(ae,"LI",{});var tIe=s(s5);UTe=n(tIe,"STRONG",{});var IAt=s(UTe);v5r=r(IAt,"roberta"),IAt.forEach(t),F5r=r(tIe," \u2014 "),BU=n(tIe,"A",{href:!0});var NAt=s(BU);T5r=r(NAt,"TFRobertaForSequenceClassification"),NAt.forEach(t),M5r=r(tIe," (RoBERTa model)"),tIe.forEach(t),E5r=i(ae),l5=n(ae,"LI",{});var aIe=s(l5);JTe=n(aIe,"STRONG",{});var qAt=s(JTe);C5r=r(qAt,"roformer"),qAt.forEach(t),w5r=r(aIe," \u2014 "),IU=n(aIe,"A",{href:!0});var jAt=s(IU);A5r=r(jAt,"TFRoFormerForSequenceClassification"),jAt.forEach(t),L5r=r(aIe," (RoFormer model)"),aIe.forEach(t),y5r=i(ae),i5=n(ae,"LI",{});var nIe=s(i5);YTe=n(nIe,"STRONG",{});var DAt=s(YTe);x5r=r(DAt,"tapas"),DAt.forEach(t),$5r=r(nIe," \u2014 "),NU=n(nIe,"A",{href:!0});var GAt=s(NU);k5r=r(GAt,"TFTapasForSequenceClassification"),GAt.forEach(t),S5r=r(nIe," (TAPAS model)"),nIe.forEach(t),R5r=i(ae),d5=n(ae,"LI",{});var sIe=s(d5);KTe=n(sIe,"STRONG",{});var OAt=s(KTe);P5r=r(OAt,"transfo-xl"),OAt.forEach(t),B5r=r(sIe," \u2014 "),qU=n(sIe,"A",{href:!0});var VAt=s(qU);I5r=r(VAt,"TFTransfoXLForSequenceClassification"),VAt.forEach(t),N5r=r(sIe," (Transformer-XL model)"),sIe.forEach(t),q5r=i(ae),c5=n(ae,"LI",{});var lIe=s(c5);ZTe=n(lIe,"STRONG",{});var XAt=s(ZTe);j5r=r(XAt,"xlm"),XAt.forEach(t),D5r=r(lIe," \u2014 "),jU=n(lIe,"A",{href:!0});var zAt=s(jU);G5r=r(zAt,"TFXLMForSequenceClassification"),zAt.forEach(t),O5r=r(lIe," (XLM model)"),lIe.forEach(t),V5r=i(ae),m5=n(ae,"LI",{});var iIe=s(m5);eMe=n(iIe,"STRONG",{});var WAt=s(eMe);X5r=r(WAt,"xlm-roberta"),WAt.forEach(t),z5r=r(iIe," \u2014 "),DU=n(iIe,"A",{href:!0});var QAt=s(DU);W5r=r(QAt,"TFXLMRobertaForSequenceClassification"),QAt.forEach(t),Q5r=r(iIe," (XLM-RoBERTa model)"),iIe.forEach(t),H5r=i(ae),f5=n(ae,"LI",{});var dIe=s(f5);oMe=n(dIe,"STRONG",{});var HAt=s(oMe);U5r=r(HAt,"xlnet"),HAt.forEach(t),J5r=r(dIe," \u2014 "),GU=n(dIe,"A",{href:!0});var UAt=s(GU);Y5r=r(UAt,"TFXLNetForSequenceClassification"),UAt.forEach(t),K5r=r(dIe," (XLNet model)"),dIe.forEach(t),ae.forEach(t),Z5r=i(Ll),T(g5.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),IDe=i(m),dc=n(m,"H2",{class:!0});var OOe=s(dc);h5=n(OOe,"A",{id:!0,class:!0,href:!0});var JAt=s(h5);rMe=n(JAt,"SPAN",{});var YAt=s(rMe);T(l9.$$.fragment,YAt),YAt.forEach(t),JAt.forEach(t),e3r=i(OOe),tMe=n(OOe,"SPAN",{});var KAt=s(tMe);o3r=r(KAt,"TFAutoModelForMultipleChoice"),KAt.forEach(t),OOe.forEach(t),NDe=i(m),ar=n(m,"DIV",{class:!0});var yl=s(ar);T(i9.$$.fragment,yl),r3r=i(yl),cc=n(yl,"P",{});var soe=s(cc);t3r=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OU=n(soe,"A",{href:!0});var ZAt=s(OU);a3r=r(ZAt,"from_pretrained()"),ZAt.forEach(t),n3r=r(soe," class method or the "),VU=n(soe,"A",{href:!0});var e6t=s(VU);s3r=r(e6t,"from_config()"),e6t.forEach(t),l3r=r(soe,` class
method.`),soe.forEach(t),i3r=i(yl),d9=n(yl,"P",{});var VOe=s(d9);d3r=r(VOe,"This class cannot be instantiated directly using "),aMe=n(VOe,"CODE",{});var o6t=s(aMe);c3r=r(o6t,"__init__()"),o6t.forEach(t),m3r=r(VOe," (throws an error)."),VOe.forEach(t),f3r=i(yl),Pt=n(yl,"DIV",{class:!0});var tL=s(Pt);T(c9.$$.fragment,tL),g3r=i(tL),nMe=n(tL,"P",{});var r6t=s(nMe);h3r=r(r6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),r6t.forEach(t),u3r=i(tL),mc=n(tL,"P",{});var loe=s(mc);p3r=r(loe,`Note:
Loading a model from its configuration file does `),sMe=n(loe,"STRONG",{});var t6t=s(sMe);_3r=r(t6t,"not"),t6t.forEach(t),b3r=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=n(loe,"A",{href:!0});var a6t=s(XU);v3r=r(a6t,"from_pretrained()"),a6t.forEach(t),F3r=r(loe," to load the model weights."),loe.forEach(t),T3r=i(tL),T(u5.$$.fragment,tL),tL.forEach(t),M3r=i(yl),Sr=n(yl,"DIV",{class:!0});var xl=s(Sr);T(m9.$$.fragment,xl),E3r=i(xl),lMe=n(xl,"P",{});var n6t=s(lMe);C3r=r(n6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),n6t.forEach(t),w3r=i(xl),sn=n(xl,"P",{});var aL=s(sn);A3r=r(aL,"The model class to instantiate is selected based on the "),iMe=n(aL,"CODE",{});var s6t=s(iMe);L3r=r(s6t,"model_type"),s6t.forEach(t),y3r=r(aL,` property of the config object (either
passed as an argument or loaded from `),dMe=n(aL,"CODE",{});var l6t=s(dMe);x3r=r(l6t,"pretrained_model_name_or_path"),l6t.forEach(t),$3r=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cMe=n(aL,"CODE",{});var i6t=s(cMe);k3r=r(i6t,"pretrained_model_name_or_path"),i6t.forEach(t),S3r=r(aL,":"),aL.forEach(t),R3r=i(xl),ue=n(xl,"UL",{});var be=s(ue);p5=n(be,"LI",{});var cIe=s(p5);mMe=n(cIe,"STRONG",{});var d6t=s(mMe);P3r=r(d6t,"albert"),d6t.forEach(t),B3r=r(cIe," \u2014 "),zU=n(cIe,"A",{href:!0});var c6t=s(zU);I3r=r(c6t,"TFAlbertForMultipleChoice"),c6t.forEach(t),N3r=r(cIe," (ALBERT model)"),cIe.forEach(t),q3r=i(be),_5=n(be,"LI",{});var mIe=s(_5);fMe=n(mIe,"STRONG",{});var m6t=s(fMe);j3r=r(m6t,"bert"),m6t.forEach(t),D3r=r(mIe," \u2014 "),WU=n(mIe,"A",{href:!0});var f6t=s(WU);G3r=r(f6t,"TFBertForMultipleChoice"),f6t.forEach(t),O3r=r(mIe," (BERT model)"),mIe.forEach(t),V3r=i(be),b5=n(be,"LI",{});var fIe=s(b5);gMe=n(fIe,"STRONG",{});var g6t=s(gMe);X3r=r(g6t,"camembert"),g6t.forEach(t),z3r=r(fIe," \u2014 "),QU=n(fIe,"A",{href:!0});var h6t=s(QU);W3r=r(h6t,"TFCamembertForMultipleChoice"),h6t.forEach(t),Q3r=r(fIe," (CamemBERT model)"),fIe.forEach(t),H3r=i(be),v5=n(be,"LI",{});var gIe=s(v5);hMe=n(gIe,"STRONG",{});var u6t=s(hMe);U3r=r(u6t,"convbert"),u6t.forEach(t),J3r=r(gIe," \u2014 "),HU=n(gIe,"A",{href:!0});var p6t=s(HU);Y3r=r(p6t,"TFConvBertForMultipleChoice"),p6t.forEach(t),K3r=r(gIe," (ConvBERT model)"),gIe.forEach(t),Z3r=i(be),F5=n(be,"LI",{});var hIe=s(F5);uMe=n(hIe,"STRONG",{});var _6t=s(uMe);e0r=r(_6t,"distilbert"),_6t.forEach(t),o0r=r(hIe," \u2014 "),UU=n(hIe,"A",{href:!0});var b6t=s(UU);r0r=r(b6t,"TFDistilBertForMultipleChoice"),b6t.forEach(t),t0r=r(hIe," (DistilBERT model)"),hIe.forEach(t),a0r=i(be),T5=n(be,"LI",{});var uIe=s(T5);pMe=n(uIe,"STRONG",{});var v6t=s(pMe);n0r=r(v6t,"electra"),v6t.forEach(t),s0r=r(uIe," \u2014 "),JU=n(uIe,"A",{href:!0});var F6t=s(JU);l0r=r(F6t,"TFElectraForMultipleChoice"),F6t.forEach(t),i0r=r(uIe," (ELECTRA model)"),uIe.forEach(t),d0r=i(be),M5=n(be,"LI",{});var pIe=s(M5);_Me=n(pIe,"STRONG",{});var T6t=s(_Me);c0r=r(T6t,"flaubert"),T6t.forEach(t),m0r=r(pIe," \u2014 "),YU=n(pIe,"A",{href:!0});var M6t=s(YU);f0r=r(M6t,"TFFlaubertForMultipleChoice"),M6t.forEach(t),g0r=r(pIe," (FlauBERT model)"),pIe.forEach(t),h0r=i(be),E5=n(be,"LI",{});var _Ie=s(E5);bMe=n(_Ie,"STRONG",{});var E6t=s(bMe);u0r=r(E6t,"funnel"),E6t.forEach(t),p0r=r(_Ie," \u2014 "),KU=n(_Ie,"A",{href:!0});var C6t=s(KU);_0r=r(C6t,"TFFunnelForMultipleChoice"),C6t.forEach(t),b0r=r(_Ie," (Funnel Transformer model)"),_Ie.forEach(t),v0r=i(be),C5=n(be,"LI",{});var bIe=s(C5);vMe=n(bIe,"STRONG",{});var w6t=s(vMe);F0r=r(w6t,"longformer"),w6t.forEach(t),T0r=r(bIe," \u2014 "),ZU=n(bIe,"A",{href:!0});var A6t=s(ZU);M0r=r(A6t,"TFLongformerForMultipleChoice"),A6t.forEach(t),E0r=r(bIe," (Longformer model)"),bIe.forEach(t),C0r=i(be),w5=n(be,"LI",{});var vIe=s(w5);FMe=n(vIe,"STRONG",{});var L6t=s(FMe);w0r=r(L6t,"mobilebert"),L6t.forEach(t),A0r=r(vIe," \u2014 "),eJ=n(vIe,"A",{href:!0});var y6t=s(eJ);L0r=r(y6t,"TFMobileBertForMultipleChoice"),y6t.forEach(t),y0r=r(vIe," (MobileBERT model)"),vIe.forEach(t),x0r=i(be),A5=n(be,"LI",{});var FIe=s(A5);TMe=n(FIe,"STRONG",{});var x6t=s(TMe);$0r=r(x6t,"mpnet"),x6t.forEach(t),k0r=r(FIe," \u2014 "),oJ=n(FIe,"A",{href:!0});var $6t=s(oJ);S0r=r($6t,"TFMPNetForMultipleChoice"),$6t.forEach(t),R0r=r(FIe," (MPNet model)"),FIe.forEach(t),P0r=i(be),L5=n(be,"LI",{});var TIe=s(L5);MMe=n(TIe,"STRONG",{});var k6t=s(MMe);B0r=r(k6t,"rembert"),k6t.forEach(t),I0r=r(TIe," \u2014 "),rJ=n(TIe,"A",{href:!0});var S6t=s(rJ);N0r=r(S6t,"TFRemBertForMultipleChoice"),S6t.forEach(t),q0r=r(TIe," (RemBERT model)"),TIe.forEach(t),j0r=i(be),y5=n(be,"LI",{});var MIe=s(y5);EMe=n(MIe,"STRONG",{});var R6t=s(EMe);D0r=r(R6t,"roberta"),R6t.forEach(t),G0r=r(MIe," \u2014 "),tJ=n(MIe,"A",{href:!0});var P6t=s(tJ);O0r=r(P6t,"TFRobertaForMultipleChoice"),P6t.forEach(t),V0r=r(MIe," (RoBERTa model)"),MIe.forEach(t),X0r=i(be),x5=n(be,"LI",{});var EIe=s(x5);CMe=n(EIe,"STRONG",{});var B6t=s(CMe);z0r=r(B6t,"roformer"),B6t.forEach(t),W0r=r(EIe," \u2014 "),aJ=n(EIe,"A",{href:!0});var I6t=s(aJ);Q0r=r(I6t,"TFRoFormerForMultipleChoice"),I6t.forEach(t),H0r=r(EIe," (RoFormer model)"),EIe.forEach(t),U0r=i(be),$5=n(be,"LI",{});var CIe=s($5);wMe=n(CIe,"STRONG",{});var N6t=s(wMe);J0r=r(N6t,"xlm"),N6t.forEach(t),Y0r=r(CIe," \u2014 "),nJ=n(CIe,"A",{href:!0});var q6t=s(nJ);K0r=r(q6t,"TFXLMForMultipleChoice"),q6t.forEach(t),Z0r=r(CIe," (XLM model)"),CIe.forEach(t),ewr=i(be),k5=n(be,"LI",{});var wIe=s(k5);AMe=n(wIe,"STRONG",{});var j6t=s(AMe);owr=r(j6t,"xlm-roberta"),j6t.forEach(t),rwr=r(wIe," \u2014 "),sJ=n(wIe,"A",{href:!0});var D6t=s(sJ);twr=r(D6t,"TFXLMRobertaForMultipleChoice"),D6t.forEach(t),awr=r(wIe," (XLM-RoBERTa model)"),wIe.forEach(t),nwr=i(be),S5=n(be,"LI",{});var AIe=s(S5);LMe=n(AIe,"STRONG",{});var G6t=s(LMe);swr=r(G6t,"xlnet"),G6t.forEach(t),lwr=r(AIe," \u2014 "),lJ=n(AIe,"A",{href:!0});var O6t=s(lJ);iwr=r(O6t,"TFXLNetForMultipleChoice"),O6t.forEach(t),dwr=r(AIe," (XLNet model)"),AIe.forEach(t),be.forEach(t),cwr=i(xl),T(R5.$$.fragment,xl),xl.forEach(t),yl.forEach(t),qDe=i(m),fc=n(m,"H2",{class:!0});var XOe=s(fc);P5=n(XOe,"A",{id:!0,class:!0,href:!0});var V6t=s(P5);yMe=n(V6t,"SPAN",{});var X6t=s(yMe);T(f9.$$.fragment,X6t),X6t.forEach(t),V6t.forEach(t),mwr=i(XOe),xMe=n(XOe,"SPAN",{});var z6t=s(xMe);fwr=r(z6t,"TFAutoModelForNextSentencePrediction"),z6t.forEach(t),XOe.forEach(t),jDe=i(m),nr=n(m,"DIV",{class:!0});var $l=s(nr);T(g9.$$.fragment,$l),gwr=i($l),gc=n($l,"P",{});var ioe=s(gc);hwr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iJ=n(ioe,"A",{href:!0});var W6t=s(iJ);uwr=r(W6t,"from_pretrained()"),W6t.forEach(t),pwr=r(ioe," class method or the "),dJ=n(ioe,"A",{href:!0});var Q6t=s(dJ);_wr=r(Q6t,"from_config()"),Q6t.forEach(t),bwr=r(ioe,` class
method.`),ioe.forEach(t),vwr=i($l),h9=n($l,"P",{});var zOe=s(h9);Fwr=r(zOe,"This class cannot be instantiated directly using "),$Me=n(zOe,"CODE",{});var H6t=s($Me);Twr=r(H6t,"__init__()"),H6t.forEach(t),Mwr=r(zOe," (throws an error)."),zOe.forEach(t),Ewr=i($l),Bt=n($l,"DIV",{class:!0});var nL=s(Bt);T(u9.$$.fragment,nL),Cwr=i(nL),kMe=n(nL,"P",{});var U6t=s(kMe);wwr=r(U6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),U6t.forEach(t),Awr=i(nL),hc=n(nL,"P",{});var doe=s(hc);Lwr=r(doe,`Note:
Loading a model from its configuration file does `),SMe=n(doe,"STRONG",{});var J6t=s(SMe);ywr=r(J6t,"not"),J6t.forEach(t),xwr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(doe,"A",{href:!0});var Y6t=s(cJ);$wr=r(Y6t,"from_pretrained()"),Y6t.forEach(t),kwr=r(doe," to load the model weights."),doe.forEach(t),Swr=i(nL),T(B5.$$.fragment,nL),nL.forEach(t),Rwr=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(p9.$$.fragment,kl),Pwr=i(kl),RMe=n(kl,"P",{});var K6t=s(RMe);Bwr=r(K6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),K6t.forEach(t),Iwr=i(kl),ln=n(kl,"P",{});var sL=s(ln);Nwr=r(sL,"The model class to instantiate is selected based on the "),PMe=n(sL,"CODE",{});var Z6t=s(PMe);qwr=r(Z6t,"model_type"),Z6t.forEach(t),jwr=r(sL,` property of the config object (either
passed as an argument or loaded from `),BMe=n(sL,"CODE",{});var eLt=s(BMe);Dwr=r(eLt,"pretrained_model_name_or_path"),eLt.forEach(t),Gwr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=n(sL,"CODE",{});var oLt=s(IMe);Owr=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),Vwr=r(sL,":"),sL.forEach(t),Xwr=i(kl),_9=n(kl,"UL",{});var WOe=s(_9);I5=n(WOe,"LI",{});var LIe=s(I5);NMe=n(LIe,"STRONG",{});var rLt=s(NMe);zwr=r(rLt,"bert"),rLt.forEach(t),Wwr=r(LIe," \u2014 "),mJ=n(LIe,"A",{href:!0});var tLt=s(mJ);Qwr=r(tLt,"TFBertForNextSentencePrediction"),tLt.forEach(t),Hwr=r(LIe," (BERT model)"),LIe.forEach(t),Uwr=i(WOe),N5=n(WOe,"LI",{});var yIe=s(N5);qMe=n(yIe,"STRONG",{});var aLt=s(qMe);Jwr=r(aLt,"mobilebert"),aLt.forEach(t),Ywr=r(yIe," \u2014 "),fJ=n(yIe,"A",{href:!0});var nLt=s(fJ);Kwr=r(nLt,"TFMobileBertForNextSentencePrediction"),nLt.forEach(t),Zwr=r(yIe," (MobileBERT model)"),yIe.forEach(t),WOe.forEach(t),eAr=i(kl),T(q5.$$.fragment,kl),kl.forEach(t),$l.forEach(t),DDe=i(m),uc=n(m,"H2",{class:!0});var QOe=s(uc);j5=n(QOe,"A",{id:!0,class:!0,href:!0});var sLt=s(j5);jMe=n(sLt,"SPAN",{});var lLt=s(jMe);T(b9.$$.fragment,lLt),lLt.forEach(t),sLt.forEach(t),oAr=i(QOe),DMe=n(QOe,"SPAN",{});var iLt=s(DMe);rAr=r(iLt,"TFAutoModelForTableQuestionAnswering"),iLt.forEach(t),QOe.forEach(t),GDe=i(m),sr=n(m,"DIV",{class:!0});var Sl=s(sr);T(v9.$$.fragment,Sl),tAr=i(Sl),pc=n(Sl,"P",{});var coe=s(pc);aAr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gJ=n(coe,"A",{href:!0});var dLt=s(gJ);nAr=r(dLt,"from_pretrained()"),dLt.forEach(t),sAr=r(coe," class method or the "),hJ=n(coe,"A",{href:!0});var cLt=s(hJ);lAr=r(cLt,"from_config()"),cLt.forEach(t),iAr=r(coe,` class
method.`),coe.forEach(t),dAr=i(Sl),F9=n(Sl,"P",{});var HOe=s(F9);cAr=r(HOe,"This class cannot be instantiated directly using "),GMe=n(HOe,"CODE",{});var mLt=s(GMe);mAr=r(mLt,"__init__()"),mLt.forEach(t),fAr=r(HOe," (throws an error)."),HOe.forEach(t),gAr=i(Sl),It=n(Sl,"DIV",{class:!0});var lL=s(It);T(T9.$$.fragment,lL),hAr=i(lL),OMe=n(lL,"P",{});var fLt=s(OMe);uAr=r(fLt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fLt.forEach(t),pAr=i(lL),_c=n(lL,"P",{});var moe=s(_c);_Ar=r(moe,`Note:
Loading a model from its configuration file does `),VMe=n(moe,"STRONG",{});var gLt=s(VMe);bAr=r(gLt,"not"),gLt.forEach(t),vAr=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(moe,"A",{href:!0});var hLt=s(uJ);FAr=r(hLt,"from_pretrained()"),hLt.forEach(t),TAr=r(moe," to load the model weights."),moe.forEach(t),MAr=i(lL),T(D5.$$.fragment,lL),lL.forEach(t),EAr=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(M9.$$.fragment,Rl),CAr=i(Rl),XMe=n(Rl,"P",{});var uLt=s(XMe);wAr=r(uLt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),uLt.forEach(t),AAr=i(Rl),dn=n(Rl,"P",{});var iL=s(dn);LAr=r(iL,"The model class to instantiate is selected based on the "),zMe=n(iL,"CODE",{});var pLt=s(zMe);yAr=r(pLt,"model_type"),pLt.forEach(t),xAr=r(iL,` property of the config object (either
passed as an argument or loaded from `),WMe=n(iL,"CODE",{});var _Lt=s(WMe);$Ar=r(_Lt,"pretrained_model_name_or_path"),_Lt.forEach(t),kAr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QMe=n(iL,"CODE",{});var bLt=s(QMe);SAr=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),RAr=r(iL,":"),iL.forEach(t),PAr=i(Rl),HMe=n(Rl,"UL",{});var vLt=s(HMe);G5=n(vLt,"LI",{});var xIe=s(G5);UMe=n(xIe,"STRONG",{});var FLt=s(UMe);BAr=r(FLt,"tapas"),FLt.forEach(t),IAr=r(xIe," \u2014 "),pJ=n(xIe,"A",{href:!0});var TLt=s(pJ);NAr=r(TLt,"TFTapasForQuestionAnswering"),TLt.forEach(t),qAr=r(xIe," (TAPAS model)"),xIe.forEach(t),vLt.forEach(t),jAr=i(Rl),T(O5.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),ODe=i(m),bc=n(m,"H2",{class:!0});var UOe=s(bc);V5=n(UOe,"A",{id:!0,class:!0,href:!0});var MLt=s(V5);JMe=n(MLt,"SPAN",{});var ELt=s(JMe);T(E9.$$.fragment,ELt),ELt.forEach(t),MLt.forEach(t),DAr=i(UOe),YMe=n(UOe,"SPAN",{});var CLt=s(YMe);GAr=r(CLt,"TFAutoModelForTokenClassification"),CLt.forEach(t),UOe.forEach(t),VDe=i(m),lr=n(m,"DIV",{class:!0});var Pl=s(lr);T(C9.$$.fragment,Pl),OAr=i(Pl),vc=n(Pl,"P",{});var foe=s(vc);VAr=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_J=n(foe,"A",{href:!0});var wLt=s(_J);XAr=r(wLt,"from_pretrained()"),wLt.forEach(t),zAr=r(foe," class method or the "),bJ=n(foe,"A",{href:!0});var ALt=s(bJ);WAr=r(ALt,"from_config()"),ALt.forEach(t),QAr=r(foe,` class
method.`),foe.forEach(t),HAr=i(Pl),w9=n(Pl,"P",{});var JOe=s(w9);UAr=r(JOe,"This class cannot be instantiated directly using "),KMe=n(JOe,"CODE",{});var LLt=s(KMe);JAr=r(LLt,"__init__()"),LLt.forEach(t),YAr=r(JOe," (throws an error)."),JOe.forEach(t),KAr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var dL=s(Nt);T(A9.$$.fragment,dL),ZAr=i(dL),ZMe=n(dL,"P",{});var yLt=s(ZMe);e6r=r(yLt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yLt.forEach(t),o6r=i(dL),Fc=n(dL,"P",{});var goe=s(Fc);r6r=r(goe,`Note:
Loading a model from its configuration file does `),e4e=n(goe,"STRONG",{});var xLt=s(e4e);t6r=r(xLt,"not"),xLt.forEach(t),a6r=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vJ=n(goe,"A",{href:!0});var $Lt=s(vJ);n6r=r($Lt,"from_pretrained()"),$Lt.forEach(t),s6r=r(goe," to load the model weights."),goe.forEach(t),l6r=i(dL),T(X5.$$.fragment,dL),dL.forEach(t),i6r=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(L9.$$.fragment,Bl),d6r=i(Bl),o4e=n(Bl,"P",{});var kLt=s(o4e);c6r=r(kLt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),kLt.forEach(t),m6r=i(Bl),cn=n(Bl,"P",{});var cL=s(cn);f6r=r(cL,"The model class to instantiate is selected based on the "),r4e=n(cL,"CODE",{});var SLt=s(r4e);g6r=r(SLt,"model_type"),SLt.forEach(t),h6r=r(cL,` property of the config object (either
passed as an argument or loaded from `),t4e=n(cL,"CODE",{});var RLt=s(t4e);u6r=r(RLt,"pretrained_model_name_or_path"),RLt.forEach(t),p6r=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(cL,"CODE",{});var PLt=s(a4e);_6r=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),b6r=r(cL,":"),cL.forEach(t),v6r=i(Bl),de=n(Bl,"UL",{});var fe=s(de);z5=n(fe,"LI",{});var $Ie=s(z5);n4e=n($Ie,"STRONG",{});var BLt=s(n4e);F6r=r(BLt,"albert"),BLt.forEach(t),T6r=r($Ie," \u2014 "),FJ=n($Ie,"A",{href:!0});var ILt=s(FJ);M6r=r(ILt,"TFAlbertForTokenClassification"),ILt.forEach(t),E6r=r($Ie," (ALBERT model)"),$Ie.forEach(t),C6r=i(fe),W5=n(fe,"LI",{});var kIe=s(W5);s4e=n(kIe,"STRONG",{});var NLt=s(s4e);w6r=r(NLt,"bert"),NLt.forEach(t),A6r=r(kIe," \u2014 "),TJ=n(kIe,"A",{href:!0});var qLt=s(TJ);L6r=r(qLt,"TFBertForTokenClassification"),qLt.forEach(t),y6r=r(kIe," (BERT model)"),kIe.forEach(t),x6r=i(fe),Q5=n(fe,"LI",{});var SIe=s(Q5);l4e=n(SIe,"STRONG",{});var jLt=s(l4e);$6r=r(jLt,"camembert"),jLt.forEach(t),k6r=r(SIe," \u2014 "),MJ=n(SIe,"A",{href:!0});var DLt=s(MJ);S6r=r(DLt,"TFCamembertForTokenClassification"),DLt.forEach(t),R6r=r(SIe," (CamemBERT model)"),SIe.forEach(t),P6r=i(fe),H5=n(fe,"LI",{});var RIe=s(H5);i4e=n(RIe,"STRONG",{});var GLt=s(i4e);B6r=r(GLt,"convbert"),GLt.forEach(t),I6r=r(RIe," \u2014 "),EJ=n(RIe,"A",{href:!0});var OLt=s(EJ);N6r=r(OLt,"TFConvBertForTokenClassification"),OLt.forEach(t),q6r=r(RIe," (ConvBERT model)"),RIe.forEach(t),j6r=i(fe),U5=n(fe,"LI",{});var PIe=s(U5);d4e=n(PIe,"STRONG",{});var VLt=s(d4e);D6r=r(VLt,"deberta"),VLt.forEach(t),G6r=r(PIe," \u2014 "),CJ=n(PIe,"A",{href:!0});var XLt=s(CJ);O6r=r(XLt,"TFDebertaForTokenClassification"),XLt.forEach(t),V6r=r(PIe," (DeBERTa model)"),PIe.forEach(t),X6r=i(fe),J5=n(fe,"LI",{});var BIe=s(J5);c4e=n(BIe,"STRONG",{});var zLt=s(c4e);z6r=r(zLt,"deberta-v2"),zLt.forEach(t),W6r=r(BIe," \u2014 "),wJ=n(BIe,"A",{href:!0});var WLt=s(wJ);Q6r=r(WLt,"TFDebertaV2ForTokenClassification"),WLt.forEach(t),H6r=r(BIe," (DeBERTa-v2 model)"),BIe.forEach(t),U6r=i(fe),Y5=n(fe,"LI",{});var IIe=s(Y5);m4e=n(IIe,"STRONG",{});var QLt=s(m4e);J6r=r(QLt,"distilbert"),QLt.forEach(t),Y6r=r(IIe," \u2014 "),AJ=n(IIe,"A",{href:!0});var HLt=s(AJ);K6r=r(HLt,"TFDistilBertForTokenClassification"),HLt.forEach(t),Z6r=r(IIe," (DistilBERT model)"),IIe.forEach(t),eLr=i(fe),K5=n(fe,"LI",{});var NIe=s(K5);f4e=n(NIe,"STRONG",{});var ULt=s(f4e);oLr=r(ULt,"electra"),ULt.forEach(t),rLr=r(NIe," \u2014 "),LJ=n(NIe,"A",{href:!0});var JLt=s(LJ);tLr=r(JLt,"TFElectraForTokenClassification"),JLt.forEach(t),aLr=r(NIe," (ELECTRA model)"),NIe.forEach(t),nLr=i(fe),Z5=n(fe,"LI",{});var qIe=s(Z5);g4e=n(qIe,"STRONG",{});var YLt=s(g4e);sLr=r(YLt,"flaubert"),YLt.forEach(t),lLr=r(qIe," \u2014 "),yJ=n(qIe,"A",{href:!0});var KLt=s(yJ);iLr=r(KLt,"TFFlaubertForTokenClassification"),KLt.forEach(t),dLr=r(qIe," (FlauBERT model)"),qIe.forEach(t),cLr=i(fe),e3=n(fe,"LI",{});var jIe=s(e3);h4e=n(jIe,"STRONG",{});var ZLt=s(h4e);mLr=r(ZLt,"funnel"),ZLt.forEach(t),fLr=r(jIe," \u2014 "),xJ=n(jIe,"A",{href:!0});var eyt=s(xJ);gLr=r(eyt,"TFFunnelForTokenClassification"),eyt.forEach(t),hLr=r(jIe," (Funnel Transformer model)"),jIe.forEach(t),uLr=i(fe),o3=n(fe,"LI",{});var DIe=s(o3);u4e=n(DIe,"STRONG",{});var oyt=s(u4e);pLr=r(oyt,"layoutlm"),oyt.forEach(t),_Lr=r(DIe," \u2014 "),$J=n(DIe,"A",{href:!0});var ryt=s($J);bLr=r(ryt,"TFLayoutLMForTokenClassification"),ryt.forEach(t),vLr=r(DIe," (LayoutLM model)"),DIe.forEach(t),FLr=i(fe),r3=n(fe,"LI",{});var GIe=s(r3);p4e=n(GIe,"STRONG",{});var tyt=s(p4e);TLr=r(tyt,"longformer"),tyt.forEach(t),MLr=r(GIe," \u2014 "),kJ=n(GIe,"A",{href:!0});var ayt=s(kJ);ELr=r(ayt,"TFLongformerForTokenClassification"),ayt.forEach(t),CLr=r(GIe," (Longformer model)"),GIe.forEach(t),wLr=i(fe),t3=n(fe,"LI",{});var OIe=s(t3);_4e=n(OIe,"STRONG",{});var nyt=s(_4e);ALr=r(nyt,"mobilebert"),nyt.forEach(t),LLr=r(OIe," \u2014 "),SJ=n(OIe,"A",{href:!0});var syt=s(SJ);yLr=r(syt,"TFMobileBertForTokenClassification"),syt.forEach(t),xLr=r(OIe," (MobileBERT model)"),OIe.forEach(t),$Lr=i(fe),a3=n(fe,"LI",{});var VIe=s(a3);b4e=n(VIe,"STRONG",{});var lyt=s(b4e);kLr=r(lyt,"mpnet"),lyt.forEach(t),SLr=r(VIe," \u2014 "),RJ=n(VIe,"A",{href:!0});var iyt=s(RJ);RLr=r(iyt,"TFMPNetForTokenClassification"),iyt.forEach(t),PLr=r(VIe," (MPNet model)"),VIe.forEach(t),BLr=i(fe),n3=n(fe,"LI",{});var XIe=s(n3);v4e=n(XIe,"STRONG",{});var dyt=s(v4e);ILr=r(dyt,"rembert"),dyt.forEach(t),NLr=r(XIe," \u2014 "),PJ=n(XIe,"A",{href:!0});var cyt=s(PJ);qLr=r(cyt,"TFRemBertForTokenClassification"),cyt.forEach(t),jLr=r(XIe," (RemBERT model)"),XIe.forEach(t),DLr=i(fe),s3=n(fe,"LI",{});var zIe=s(s3);F4e=n(zIe,"STRONG",{});var myt=s(F4e);GLr=r(myt,"roberta"),myt.forEach(t),OLr=r(zIe," \u2014 "),BJ=n(zIe,"A",{href:!0});var fyt=s(BJ);VLr=r(fyt,"TFRobertaForTokenClassification"),fyt.forEach(t),XLr=r(zIe," (RoBERTa model)"),zIe.forEach(t),zLr=i(fe),l3=n(fe,"LI",{});var WIe=s(l3);T4e=n(WIe,"STRONG",{});var gyt=s(T4e);WLr=r(gyt,"roformer"),gyt.forEach(t),QLr=r(WIe," \u2014 "),IJ=n(WIe,"A",{href:!0});var hyt=s(IJ);HLr=r(hyt,"TFRoFormerForTokenClassification"),hyt.forEach(t),ULr=r(WIe," (RoFormer model)"),WIe.forEach(t),JLr=i(fe),i3=n(fe,"LI",{});var QIe=s(i3);M4e=n(QIe,"STRONG",{});var uyt=s(M4e);YLr=r(uyt,"xlm"),uyt.forEach(t),KLr=r(QIe," \u2014 "),NJ=n(QIe,"A",{href:!0});var pyt=s(NJ);ZLr=r(pyt,"TFXLMForTokenClassification"),pyt.forEach(t),eyr=r(QIe," (XLM model)"),QIe.forEach(t),oyr=i(fe),d3=n(fe,"LI",{});var HIe=s(d3);E4e=n(HIe,"STRONG",{});var _yt=s(E4e);ryr=r(_yt,"xlm-roberta"),_yt.forEach(t),tyr=r(HIe," \u2014 "),qJ=n(HIe,"A",{href:!0});var byt=s(qJ);ayr=r(byt,"TFXLMRobertaForTokenClassification"),byt.forEach(t),nyr=r(HIe," (XLM-RoBERTa model)"),HIe.forEach(t),syr=i(fe),c3=n(fe,"LI",{});var UIe=s(c3);C4e=n(UIe,"STRONG",{});var vyt=s(C4e);lyr=r(vyt,"xlnet"),vyt.forEach(t),iyr=r(UIe," \u2014 "),jJ=n(UIe,"A",{href:!0});var Fyt=s(jJ);dyr=r(Fyt,"TFXLNetForTokenClassification"),Fyt.forEach(t),cyr=r(UIe," (XLNet model)"),UIe.forEach(t),fe.forEach(t),myr=i(Bl),T(m3.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),XDe=i(m),Tc=n(m,"H2",{class:!0});var YOe=s(Tc);f3=n(YOe,"A",{id:!0,class:!0,href:!0});var Tyt=s(f3);w4e=n(Tyt,"SPAN",{});var Myt=s(w4e);T(y9.$$.fragment,Myt),Myt.forEach(t),Tyt.forEach(t),fyr=i(YOe),A4e=n(YOe,"SPAN",{});var Eyt=s(A4e);gyr=r(Eyt,"TFAutoModelForQuestionAnswering"),Eyt.forEach(t),YOe.forEach(t),zDe=i(m),ir=n(m,"DIV",{class:!0});var Il=s(ir);T(x9.$$.fragment,Il),hyr=i(Il),Mc=n(Il,"P",{});var hoe=s(Mc);uyr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DJ=n(hoe,"A",{href:!0});var Cyt=s(DJ);pyr=r(Cyt,"from_pretrained()"),Cyt.forEach(t),_yr=r(hoe," class method or the "),GJ=n(hoe,"A",{href:!0});var wyt=s(GJ);byr=r(wyt,"from_config()"),wyt.forEach(t),vyr=r(hoe,` class
method.`),hoe.forEach(t),Fyr=i(Il),$9=n(Il,"P",{});var KOe=s($9);Tyr=r(KOe,"This class cannot be instantiated directly using "),L4e=n(KOe,"CODE",{});var Ayt=s(L4e);Myr=r(Ayt,"__init__()"),Ayt.forEach(t),Eyr=r(KOe," (throws an error)."),KOe.forEach(t),Cyr=i(Il),qt=n(Il,"DIV",{class:!0});var mL=s(qt);T(k9.$$.fragment,mL),wyr=i(mL),y4e=n(mL,"P",{});var Lyt=s(y4e);Ayr=r(Lyt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Lyt.forEach(t),Lyr=i(mL),Ec=n(mL,"P",{});var uoe=s(Ec);yyr=r(uoe,`Note:
Loading a model from its configuration file does `),x4e=n(uoe,"STRONG",{});var yyt=s(x4e);xyr=r(yyt,"not"),yyt.forEach(t),$yr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(uoe,"A",{href:!0});var xyt=s(OJ);kyr=r(xyt,"from_pretrained()"),xyt.forEach(t),Syr=r(uoe," to load the model weights."),uoe.forEach(t),Ryr=i(mL),T(g3.$$.fragment,mL),mL.forEach(t),Pyr=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(S9.$$.fragment,Nl),Byr=i(Nl),$4e=n(Nl,"P",{});var $yt=s($4e);Iyr=r($yt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$yt.forEach(t),Nyr=i(Nl),mn=n(Nl,"P",{});var fL=s(mn);qyr=r(fL,"The model class to instantiate is selected based on the "),k4e=n(fL,"CODE",{});var kyt=s(k4e);jyr=r(kyt,"model_type"),kyt.forEach(t),Dyr=r(fL,` property of the config object (either
passed as an argument or loaded from `),S4e=n(fL,"CODE",{});var Syt=s(S4e);Gyr=r(Syt,"pretrained_model_name_or_path"),Syt.forEach(t),Oyr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=n(fL,"CODE",{});var Ryt=s(R4e);Vyr=r(Ryt,"pretrained_model_name_or_path"),Ryt.forEach(t),Xyr=r(fL,":"),fL.forEach(t),zyr=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);h3=n(ge,"LI",{});var JIe=s(h3);P4e=n(JIe,"STRONG",{});var Pyt=s(P4e);Wyr=r(Pyt,"albert"),Pyt.forEach(t),Qyr=r(JIe," \u2014 "),VJ=n(JIe,"A",{href:!0});var Byt=s(VJ);Hyr=r(Byt,"TFAlbertForQuestionAnswering"),Byt.forEach(t),Uyr=r(JIe," (ALBERT model)"),JIe.forEach(t),Jyr=i(ge),u3=n(ge,"LI",{});var YIe=s(u3);B4e=n(YIe,"STRONG",{});var Iyt=s(B4e);Yyr=r(Iyt,"bert"),Iyt.forEach(t),Kyr=r(YIe," \u2014 "),XJ=n(YIe,"A",{href:!0});var Nyt=s(XJ);Zyr=r(Nyt,"TFBertForQuestionAnswering"),Nyt.forEach(t),e7r=r(YIe," (BERT model)"),YIe.forEach(t),o7r=i(ge),p3=n(ge,"LI",{});var KIe=s(p3);I4e=n(KIe,"STRONG",{});var qyt=s(I4e);r7r=r(qyt,"camembert"),qyt.forEach(t),t7r=r(KIe," \u2014 "),zJ=n(KIe,"A",{href:!0});var jyt=s(zJ);a7r=r(jyt,"TFCamembertForQuestionAnswering"),jyt.forEach(t),n7r=r(KIe," (CamemBERT model)"),KIe.forEach(t),s7r=i(ge),_3=n(ge,"LI",{});var ZIe=s(_3);N4e=n(ZIe,"STRONG",{});var Dyt=s(N4e);l7r=r(Dyt,"convbert"),Dyt.forEach(t),i7r=r(ZIe," \u2014 "),WJ=n(ZIe,"A",{href:!0});var Gyt=s(WJ);d7r=r(Gyt,"TFConvBertForQuestionAnswering"),Gyt.forEach(t),c7r=r(ZIe," (ConvBERT model)"),ZIe.forEach(t),m7r=i(ge),b3=n(ge,"LI",{});var eNe=s(b3);q4e=n(eNe,"STRONG",{});var Oyt=s(q4e);f7r=r(Oyt,"deberta"),Oyt.forEach(t),g7r=r(eNe," \u2014 "),QJ=n(eNe,"A",{href:!0});var Vyt=s(QJ);h7r=r(Vyt,"TFDebertaForQuestionAnswering"),Vyt.forEach(t),u7r=r(eNe," (DeBERTa model)"),eNe.forEach(t),p7r=i(ge),v3=n(ge,"LI",{});var oNe=s(v3);j4e=n(oNe,"STRONG",{});var Xyt=s(j4e);_7r=r(Xyt,"deberta-v2"),Xyt.forEach(t),b7r=r(oNe," \u2014 "),HJ=n(oNe,"A",{href:!0});var zyt=s(HJ);v7r=r(zyt,"TFDebertaV2ForQuestionAnswering"),zyt.forEach(t),F7r=r(oNe," (DeBERTa-v2 model)"),oNe.forEach(t),T7r=i(ge),F3=n(ge,"LI",{});var rNe=s(F3);D4e=n(rNe,"STRONG",{});var Wyt=s(D4e);M7r=r(Wyt,"distilbert"),Wyt.forEach(t),E7r=r(rNe," \u2014 "),UJ=n(rNe,"A",{href:!0});var Qyt=s(UJ);C7r=r(Qyt,"TFDistilBertForQuestionAnswering"),Qyt.forEach(t),w7r=r(rNe," (DistilBERT model)"),rNe.forEach(t),A7r=i(ge),T3=n(ge,"LI",{});var tNe=s(T3);G4e=n(tNe,"STRONG",{});var Hyt=s(G4e);L7r=r(Hyt,"electra"),Hyt.forEach(t),y7r=r(tNe," \u2014 "),JJ=n(tNe,"A",{href:!0});var Uyt=s(JJ);x7r=r(Uyt,"TFElectraForQuestionAnswering"),Uyt.forEach(t),$7r=r(tNe," (ELECTRA model)"),tNe.forEach(t),k7r=i(ge),M3=n(ge,"LI",{});var aNe=s(M3);O4e=n(aNe,"STRONG",{});var Jyt=s(O4e);S7r=r(Jyt,"flaubert"),Jyt.forEach(t),R7r=r(aNe," \u2014 "),YJ=n(aNe,"A",{href:!0});var Yyt=s(YJ);P7r=r(Yyt,"TFFlaubertForQuestionAnsweringSimple"),Yyt.forEach(t),B7r=r(aNe," (FlauBERT model)"),aNe.forEach(t),I7r=i(ge),E3=n(ge,"LI",{});var nNe=s(E3);V4e=n(nNe,"STRONG",{});var Kyt=s(V4e);N7r=r(Kyt,"funnel"),Kyt.forEach(t),q7r=r(nNe," \u2014 "),KJ=n(nNe,"A",{href:!0});var Zyt=s(KJ);j7r=r(Zyt,"TFFunnelForQuestionAnswering"),Zyt.forEach(t),D7r=r(nNe," (Funnel Transformer model)"),nNe.forEach(t),G7r=i(ge),C3=n(ge,"LI",{});var sNe=s(C3);X4e=n(sNe,"STRONG",{});var e7t=s(X4e);O7r=r(e7t,"gptj"),e7t.forEach(t),V7r=r(sNe," \u2014 "),ZJ=n(sNe,"A",{href:!0});var o7t=s(ZJ);X7r=r(o7t,"TFGPTJForQuestionAnswering"),o7t.forEach(t),z7r=r(sNe," (GPT-J model)"),sNe.forEach(t),W7r=i(ge),w3=n(ge,"LI",{});var lNe=s(w3);z4e=n(lNe,"STRONG",{});var r7t=s(z4e);Q7r=r(r7t,"longformer"),r7t.forEach(t),H7r=r(lNe," \u2014 "),eY=n(lNe,"A",{href:!0});var t7t=s(eY);U7r=r(t7t,"TFLongformerForQuestionAnswering"),t7t.forEach(t),J7r=r(lNe," (Longformer model)"),lNe.forEach(t),Y7r=i(ge),A3=n(ge,"LI",{});var iNe=s(A3);W4e=n(iNe,"STRONG",{});var a7t=s(W4e);K7r=r(a7t,"mobilebert"),a7t.forEach(t),Z7r=r(iNe," \u2014 "),oY=n(iNe,"A",{href:!0});var n7t=s(oY);e8r=r(n7t,"TFMobileBertForQuestionAnswering"),n7t.forEach(t),o8r=r(iNe," (MobileBERT model)"),iNe.forEach(t),r8r=i(ge),L3=n(ge,"LI",{});var dNe=s(L3);Q4e=n(dNe,"STRONG",{});var s7t=s(Q4e);t8r=r(s7t,"mpnet"),s7t.forEach(t),a8r=r(dNe," \u2014 "),rY=n(dNe,"A",{href:!0});var l7t=s(rY);n8r=r(l7t,"TFMPNetForQuestionAnswering"),l7t.forEach(t),s8r=r(dNe," (MPNet model)"),dNe.forEach(t),l8r=i(ge),y3=n(ge,"LI",{});var cNe=s(y3);H4e=n(cNe,"STRONG",{});var i7t=s(H4e);i8r=r(i7t,"rembert"),i7t.forEach(t),d8r=r(cNe," \u2014 "),tY=n(cNe,"A",{href:!0});var d7t=s(tY);c8r=r(d7t,"TFRemBertForQuestionAnswering"),d7t.forEach(t),m8r=r(cNe," (RemBERT model)"),cNe.forEach(t),f8r=i(ge),x3=n(ge,"LI",{});var mNe=s(x3);U4e=n(mNe,"STRONG",{});var c7t=s(U4e);g8r=r(c7t,"roberta"),c7t.forEach(t),h8r=r(mNe," \u2014 "),aY=n(mNe,"A",{href:!0});var m7t=s(aY);u8r=r(m7t,"TFRobertaForQuestionAnswering"),m7t.forEach(t),p8r=r(mNe," (RoBERTa model)"),mNe.forEach(t),_8r=i(ge),$3=n(ge,"LI",{});var fNe=s($3);J4e=n(fNe,"STRONG",{});var f7t=s(J4e);b8r=r(f7t,"roformer"),f7t.forEach(t),v8r=r(fNe," \u2014 "),nY=n(fNe,"A",{href:!0});var g7t=s(nY);F8r=r(g7t,"TFRoFormerForQuestionAnswering"),g7t.forEach(t),T8r=r(fNe," (RoFormer model)"),fNe.forEach(t),M8r=i(ge),k3=n(ge,"LI",{});var gNe=s(k3);Y4e=n(gNe,"STRONG",{});var h7t=s(Y4e);E8r=r(h7t,"xlm"),h7t.forEach(t),C8r=r(gNe," \u2014 "),sY=n(gNe,"A",{href:!0});var u7t=s(sY);w8r=r(u7t,"TFXLMForQuestionAnsweringSimple"),u7t.forEach(t),A8r=r(gNe," (XLM model)"),gNe.forEach(t),L8r=i(ge),S3=n(ge,"LI",{});var hNe=s(S3);K4e=n(hNe,"STRONG",{});var p7t=s(K4e);y8r=r(p7t,"xlm-roberta"),p7t.forEach(t),x8r=r(hNe," \u2014 "),lY=n(hNe,"A",{href:!0});var _7t=s(lY);$8r=r(_7t,"TFXLMRobertaForQuestionAnswering"),_7t.forEach(t),k8r=r(hNe," (XLM-RoBERTa model)"),hNe.forEach(t),S8r=i(ge),R3=n(ge,"LI",{});var uNe=s(R3);Z4e=n(uNe,"STRONG",{});var b7t=s(Z4e);R8r=r(b7t,"xlnet"),b7t.forEach(t),P8r=r(uNe," \u2014 "),iY=n(uNe,"A",{href:!0});var v7t=s(iY);B8r=r(v7t,"TFXLNetForQuestionAnsweringSimple"),v7t.forEach(t),I8r=r(uNe," (XLNet model)"),uNe.forEach(t),ge.forEach(t),N8r=i(Nl),T(P3.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),WDe=i(m),Cc=n(m,"H2",{class:!0});var ZOe=s(Cc);B3=n(ZOe,"A",{id:!0,class:!0,href:!0});var F7t=s(B3);eEe=n(F7t,"SPAN",{});var T7t=s(eEe);T(R9.$$.fragment,T7t),T7t.forEach(t),F7t.forEach(t),q8r=i(ZOe),oEe=n(ZOe,"SPAN",{});var M7t=s(oEe);j8r=r(M7t,"TFAutoModelForVision2Seq"),M7t.forEach(t),ZOe.forEach(t),QDe=i(m),dr=n(m,"DIV",{class:!0});var ql=s(dr);T(P9.$$.fragment,ql),D8r=i(ql),wc=n(ql,"P",{});var poe=s(wc);G8r=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dY=n(poe,"A",{href:!0});var E7t=s(dY);O8r=r(E7t,"from_pretrained()"),E7t.forEach(t),V8r=r(poe," class method or the "),cY=n(poe,"A",{href:!0});var C7t=s(cY);X8r=r(C7t,"from_config()"),C7t.forEach(t),z8r=r(poe,` class
method.`),poe.forEach(t),W8r=i(ql),B9=n(ql,"P",{});var eVe=s(B9);Q8r=r(eVe,"This class cannot be instantiated directly using "),rEe=n(eVe,"CODE",{});var w7t=s(rEe);H8r=r(w7t,"__init__()"),w7t.forEach(t),U8r=r(eVe," (throws an error)."),eVe.forEach(t),J8r=i(ql),jt=n(ql,"DIV",{class:!0});var gL=s(jt);T(I9.$$.fragment,gL),Y8r=i(gL),tEe=n(gL,"P",{});var A7t=s(tEe);K8r=r(A7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),A7t.forEach(t),Z8r=i(gL),Ac=n(gL,"P",{});var _oe=s(Ac);e9r=r(_oe,`Note:
Loading a model from its configuration file does `),aEe=n(_oe,"STRONG",{});var L7t=s(aEe);o9r=r(L7t,"not"),L7t.forEach(t),r9r=r(_oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(_oe,"A",{href:!0});var y7t=s(mY);t9r=r(y7t,"from_pretrained()"),y7t.forEach(t),a9r=r(_oe," to load the model weights."),_oe.forEach(t),n9r=i(gL),T(I3.$$.fragment,gL),gL.forEach(t),s9r=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(N9.$$.fragment,jl),l9r=i(jl),nEe=n(jl,"P",{});var x7t=s(nEe);i9r=r(x7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),x7t.forEach(t),d9r=i(jl),fn=n(jl,"P",{});var hL=s(fn);c9r=r(hL,"The model class to instantiate is selected based on the "),sEe=n(hL,"CODE",{});var $7t=s(sEe);m9r=r($7t,"model_type"),$7t.forEach(t),f9r=r(hL,` property of the config object (either
passed as an argument or loaded from `),lEe=n(hL,"CODE",{});var k7t=s(lEe);g9r=r(k7t,"pretrained_model_name_or_path"),k7t.forEach(t),h9r=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=n(hL,"CODE",{});var S7t=s(iEe);u9r=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),p9r=r(hL,":"),hL.forEach(t),_9r=i(jl),dEe=n(jl,"UL",{});var R7t=s(dEe);N3=n(R7t,"LI",{});var pNe=s(N3);cEe=n(pNe,"STRONG",{});var P7t=s(cEe);b9r=r(P7t,"vision-encoder-decoder"),P7t.forEach(t),v9r=r(pNe," \u2014 "),fY=n(pNe,"A",{href:!0});var B7t=s(fY);F9r=r(B7t,"TFVisionEncoderDecoderModel"),B7t.forEach(t),T9r=r(pNe," (Vision Encoder decoder model)"),pNe.forEach(t),R7t.forEach(t),M9r=i(jl),T(q3.$$.fragment,jl),jl.forEach(t),ql.forEach(t),HDe=i(m),Lc=n(m,"H2",{class:!0});var oVe=s(Lc);j3=n(oVe,"A",{id:!0,class:!0,href:!0});var I7t=s(j3);mEe=n(I7t,"SPAN",{});var N7t=s(mEe);T(q9.$$.fragment,N7t),N7t.forEach(t),I7t.forEach(t),E9r=i(oVe),fEe=n(oVe,"SPAN",{});var q7t=s(fEe);C9r=r(q7t,"TFAutoModelForSpeechSeq2Seq"),q7t.forEach(t),oVe.forEach(t),UDe=i(m),cr=n(m,"DIV",{class:!0});var Dl=s(cr);T(j9.$$.fragment,Dl),w9r=i(Dl),yc=n(Dl,"P",{});var boe=s(yc);A9r=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gY=n(boe,"A",{href:!0});var j7t=s(gY);L9r=r(j7t,"from_pretrained()"),j7t.forEach(t),y9r=r(boe," class method or the "),hY=n(boe,"A",{href:!0});var D7t=s(hY);x9r=r(D7t,"from_config()"),D7t.forEach(t),$9r=r(boe,` class
method.`),boe.forEach(t),k9r=i(Dl),D9=n(Dl,"P",{});var rVe=s(D9);S9r=r(rVe,"This class cannot be instantiated directly using "),gEe=n(rVe,"CODE",{});var G7t=s(gEe);R9r=r(G7t,"__init__()"),G7t.forEach(t),P9r=r(rVe," (throws an error)."),rVe.forEach(t),B9r=i(Dl),Dt=n(Dl,"DIV",{class:!0});var uL=s(Dt);T(G9.$$.fragment,uL),I9r=i(uL),hEe=n(uL,"P",{});var O7t=s(hEe);N9r=r(O7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),O7t.forEach(t),q9r=i(uL),xc=n(uL,"P",{});var voe=s(xc);j9r=r(voe,`Note:
Loading a model from its configuration file does `),uEe=n(voe,"STRONG",{});var V7t=s(uEe);D9r=r(V7t,"not"),V7t.forEach(t),G9r=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(voe,"A",{href:!0});var X7t=s(uY);O9r=r(X7t,"from_pretrained()"),X7t.forEach(t),V9r=r(voe," to load the model weights."),voe.forEach(t),X9r=i(uL),T(D3.$$.fragment,uL),uL.forEach(t),z9r=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(O9.$$.fragment,Gl),W9r=i(Gl),pEe=n(Gl,"P",{});var z7t=s(pEe);Q9r=r(z7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),z7t.forEach(t),H9r=i(Gl),gn=n(Gl,"P",{});var pL=s(gn);U9r=r(pL,"The model class to instantiate is selected based on the "),_Ee=n(pL,"CODE",{});var W7t=s(_Ee);J9r=r(W7t,"model_type"),W7t.forEach(t),Y9r=r(pL,` property of the config object (either
passed as an argument or loaded from `),bEe=n(pL,"CODE",{});var Q7t=s(bEe);K9r=r(Q7t,"pretrained_model_name_or_path"),Q7t.forEach(t),Z9r=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=n(pL,"CODE",{});var H7t=s(vEe);exr=r(H7t,"pretrained_model_name_or_path"),H7t.forEach(t),oxr=r(pL,":"),pL.forEach(t),rxr=i(Gl),FEe=n(Gl,"UL",{});var U7t=s(FEe);G3=n(U7t,"LI",{});var _Ne=s(G3);TEe=n(_Ne,"STRONG",{});var J7t=s(TEe);txr=r(J7t,"speech_to_text"),J7t.forEach(t),axr=r(_Ne," \u2014 "),pY=n(_Ne,"A",{href:!0});var Y7t=s(pY);nxr=r(Y7t,"TFSpeech2TextForConditionalGeneration"),Y7t.forEach(t),sxr=r(_Ne," (Speech2Text model)"),_Ne.forEach(t),U7t.forEach(t),lxr=i(Gl),T(O3.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),JDe=i(m),$c=n(m,"H2",{class:!0});var tVe=s($c);V3=n(tVe,"A",{id:!0,class:!0,href:!0});var K7t=s(V3);MEe=n(K7t,"SPAN",{});var Z7t=s(MEe);T(V9.$$.fragment,Z7t),Z7t.forEach(t),K7t.forEach(t),ixr=i(tVe),EEe=n(tVe,"SPAN",{});var e8t=s(EEe);dxr=r(e8t,"FlaxAutoModel"),e8t.forEach(t),tVe.forEach(t),YDe=i(m),mr=n(m,"DIV",{class:!0});var Ol=s(mr);T(X9.$$.fragment,Ol),cxr=i(Ol),kc=n(Ol,"P",{});var Foe=s(kc);mxr=r(Foe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_Y=n(Foe,"A",{href:!0});var o8t=s(_Y);fxr=r(o8t,"from_pretrained()"),o8t.forEach(t),gxr=r(Foe," class method or the "),bY=n(Foe,"A",{href:!0});var r8t=s(bY);hxr=r(r8t,"from_config()"),r8t.forEach(t),uxr=r(Foe,` class
method.`),Foe.forEach(t),pxr=i(Ol),z9=n(Ol,"P",{});var aVe=s(z9);_xr=r(aVe,"This class cannot be instantiated directly using "),CEe=n(aVe,"CODE",{});var t8t=s(CEe);bxr=r(t8t,"__init__()"),t8t.forEach(t),vxr=r(aVe," (throws an error)."),aVe.forEach(t),Fxr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var _L=s(Gt);T(W9.$$.fragment,_L),Txr=i(_L),wEe=n(_L,"P",{});var a8t=s(wEe);Mxr=r(a8t,"Instantiates one of the base model classes of the library from a configuration."),a8t.forEach(t),Exr=i(_L),Sc=n(_L,"P",{});var Toe=s(Sc);Cxr=r(Toe,`Note:
Loading a model from its configuration file does `),AEe=n(Toe,"STRONG",{});var n8t=s(AEe);wxr=r(n8t,"not"),n8t.forEach(t),Axr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vY=n(Toe,"A",{href:!0});var s8t=s(vY);Lxr=r(s8t,"from_pretrained()"),s8t.forEach(t),yxr=r(Toe," to load the model weights."),Toe.forEach(t),xxr=i(_L),T(X3.$$.fragment,_L),_L.forEach(t),$xr=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(Q9.$$.fragment,Vl),kxr=i(Vl),LEe=n(Vl,"P",{});var l8t=s(LEe);Sxr=r(l8t,"Instantiate one of the base model classes of the library from a pretrained model."),l8t.forEach(t),Rxr=i(Vl),hn=n(Vl,"P",{});var bL=s(hn);Pxr=r(bL,"The model class to instantiate is selected based on the "),yEe=n(bL,"CODE",{});var i8t=s(yEe);Bxr=r(i8t,"model_type"),i8t.forEach(t),Ixr=r(bL,` property of the config object (either
passed as an argument or loaded from `),xEe=n(bL,"CODE",{});var d8t=s(xEe);Nxr=r(d8t,"pretrained_model_name_or_path"),d8t.forEach(t),qxr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=n(bL,"CODE",{});var c8t=s($Ee);jxr=r(c8t,"pretrained_model_name_or_path"),c8t.forEach(t),Dxr=r(bL,":"),bL.forEach(t),Gxr=i(Vl),re=n(Vl,"UL",{});var ne=s(re);z3=n(ne,"LI",{});var bNe=s(z3);kEe=n(bNe,"STRONG",{});var m8t=s(kEe);Oxr=r(m8t,"albert"),m8t.forEach(t),Vxr=r(bNe," \u2014 "),FY=n(bNe,"A",{href:!0});var f8t=s(FY);Xxr=r(f8t,"FlaxAlbertModel"),f8t.forEach(t),zxr=r(bNe," (ALBERT model)"),bNe.forEach(t),Wxr=i(ne),W3=n(ne,"LI",{});var vNe=s(W3);SEe=n(vNe,"STRONG",{});var g8t=s(SEe);Qxr=r(g8t,"bart"),g8t.forEach(t),Hxr=r(vNe," \u2014 "),TY=n(vNe,"A",{href:!0});var h8t=s(TY);Uxr=r(h8t,"FlaxBartModel"),h8t.forEach(t),Jxr=r(vNe," (BART model)"),vNe.forEach(t),Yxr=i(ne),Q3=n(ne,"LI",{});var FNe=s(Q3);REe=n(FNe,"STRONG",{});var u8t=s(REe);Kxr=r(u8t,"beit"),u8t.forEach(t),Zxr=r(FNe," \u2014 "),MY=n(FNe,"A",{href:!0});var p8t=s(MY);e$r=r(p8t,"FlaxBeitModel"),p8t.forEach(t),o$r=r(FNe," (BEiT model)"),FNe.forEach(t),r$r=i(ne),H3=n(ne,"LI",{});var TNe=s(H3);PEe=n(TNe,"STRONG",{});var _8t=s(PEe);t$r=r(_8t,"bert"),_8t.forEach(t),a$r=r(TNe," \u2014 "),EY=n(TNe,"A",{href:!0});var b8t=s(EY);n$r=r(b8t,"FlaxBertModel"),b8t.forEach(t),s$r=r(TNe," (BERT model)"),TNe.forEach(t),l$r=i(ne),U3=n(ne,"LI",{});var MNe=s(U3);BEe=n(MNe,"STRONG",{});var v8t=s(BEe);i$r=r(v8t,"big_bird"),v8t.forEach(t),d$r=r(MNe," \u2014 "),CY=n(MNe,"A",{href:!0});var F8t=s(CY);c$r=r(F8t,"FlaxBigBirdModel"),F8t.forEach(t),m$r=r(MNe," (BigBird model)"),MNe.forEach(t),f$r=i(ne),J3=n(ne,"LI",{});var ENe=s(J3);IEe=n(ENe,"STRONG",{});var T8t=s(IEe);g$r=r(T8t,"blenderbot"),T8t.forEach(t),h$r=r(ENe," \u2014 "),wY=n(ENe,"A",{href:!0});var M8t=s(wY);u$r=r(M8t,"FlaxBlenderbotModel"),M8t.forEach(t),p$r=r(ENe," (Blenderbot model)"),ENe.forEach(t),_$r=i(ne),Y3=n(ne,"LI",{});var CNe=s(Y3);NEe=n(CNe,"STRONG",{});var E8t=s(NEe);b$r=r(E8t,"blenderbot-small"),E8t.forEach(t),v$r=r(CNe," \u2014 "),AY=n(CNe,"A",{href:!0});var C8t=s(AY);F$r=r(C8t,"FlaxBlenderbotSmallModel"),C8t.forEach(t),T$r=r(CNe," (BlenderbotSmall model)"),CNe.forEach(t),M$r=i(ne),K3=n(ne,"LI",{});var wNe=s(K3);qEe=n(wNe,"STRONG",{});var w8t=s(qEe);E$r=r(w8t,"clip"),w8t.forEach(t),C$r=r(wNe," \u2014 "),LY=n(wNe,"A",{href:!0});var A8t=s(LY);w$r=r(A8t,"FlaxCLIPModel"),A8t.forEach(t),A$r=r(wNe," (CLIP model)"),wNe.forEach(t),L$r=i(ne),Z3=n(ne,"LI",{});var ANe=s(Z3);jEe=n(ANe,"STRONG",{});var L8t=s(jEe);y$r=r(L8t,"distilbert"),L8t.forEach(t),x$r=r(ANe," \u2014 "),yY=n(ANe,"A",{href:!0});var y8t=s(yY);$$r=r(y8t,"FlaxDistilBertModel"),y8t.forEach(t),k$r=r(ANe," (DistilBERT model)"),ANe.forEach(t),S$r=i(ne),e0=n(ne,"LI",{});var LNe=s(e0);DEe=n(LNe,"STRONG",{});var x8t=s(DEe);R$r=r(x8t,"electra"),x8t.forEach(t),P$r=r(LNe," \u2014 "),xY=n(LNe,"A",{href:!0});var $8t=s(xY);B$r=r($8t,"FlaxElectraModel"),$8t.forEach(t),I$r=r(LNe," (ELECTRA model)"),LNe.forEach(t),N$r=i(ne),o0=n(ne,"LI",{});var yNe=s(o0);GEe=n(yNe,"STRONG",{});var k8t=s(GEe);q$r=r(k8t,"gpt2"),k8t.forEach(t),j$r=r(yNe," \u2014 "),$Y=n(yNe,"A",{href:!0});var S8t=s($Y);D$r=r(S8t,"FlaxGPT2Model"),S8t.forEach(t),G$r=r(yNe," (OpenAI GPT-2 model)"),yNe.forEach(t),O$r=i(ne),r0=n(ne,"LI",{});var xNe=s(r0);OEe=n(xNe,"STRONG",{});var R8t=s(OEe);V$r=r(R8t,"gpt_neo"),R8t.forEach(t),X$r=r(xNe," \u2014 "),kY=n(xNe,"A",{href:!0});var P8t=s(kY);z$r=r(P8t,"FlaxGPTNeoModel"),P8t.forEach(t),W$r=r(xNe," (GPT Neo model)"),xNe.forEach(t),Q$r=i(ne),t0=n(ne,"LI",{});var $Ne=s(t0);VEe=n($Ne,"STRONG",{});var B8t=s(VEe);H$r=r(B8t,"gptj"),B8t.forEach(t),U$r=r($Ne," \u2014 "),SY=n($Ne,"A",{href:!0});var I8t=s(SY);J$r=r(I8t,"FlaxGPTJModel"),I8t.forEach(t),Y$r=r($Ne," (GPT-J model)"),$Ne.forEach(t),K$r=i(ne),a0=n(ne,"LI",{});var kNe=s(a0);XEe=n(kNe,"STRONG",{});var N8t=s(XEe);Z$r=r(N8t,"marian"),N8t.forEach(t),ekr=r(kNe," \u2014 "),RY=n(kNe,"A",{href:!0});var q8t=s(RY);okr=r(q8t,"FlaxMarianModel"),q8t.forEach(t),rkr=r(kNe," (Marian model)"),kNe.forEach(t),tkr=i(ne),n0=n(ne,"LI",{});var SNe=s(n0);zEe=n(SNe,"STRONG",{});var j8t=s(zEe);akr=r(j8t,"mbart"),j8t.forEach(t),nkr=r(SNe," \u2014 "),PY=n(SNe,"A",{href:!0});var D8t=s(PY);skr=r(D8t,"FlaxMBartModel"),D8t.forEach(t),lkr=r(SNe," (mBART model)"),SNe.forEach(t),ikr=i(ne),s0=n(ne,"LI",{});var RNe=s(s0);WEe=n(RNe,"STRONG",{});var G8t=s(WEe);dkr=r(G8t,"mt5"),G8t.forEach(t),ckr=r(RNe," \u2014 "),BY=n(RNe,"A",{href:!0});var O8t=s(BY);mkr=r(O8t,"FlaxMT5Model"),O8t.forEach(t),fkr=r(RNe," (MT5 model)"),RNe.forEach(t),gkr=i(ne),l0=n(ne,"LI",{});var PNe=s(l0);QEe=n(PNe,"STRONG",{});var V8t=s(QEe);hkr=r(V8t,"opt"),V8t.forEach(t),ukr=r(PNe," \u2014 "),IY=n(PNe,"A",{href:!0});var X8t=s(IY);pkr=r(X8t,"FlaxOPTModel"),X8t.forEach(t),_kr=r(PNe," (OPT model)"),PNe.forEach(t),bkr=i(ne),i0=n(ne,"LI",{});var BNe=s(i0);HEe=n(BNe,"STRONG",{});var z8t=s(HEe);vkr=r(z8t,"pegasus"),z8t.forEach(t),Fkr=r(BNe," \u2014 "),NY=n(BNe,"A",{href:!0});var W8t=s(NY);Tkr=r(W8t,"FlaxPegasusModel"),W8t.forEach(t),Mkr=r(BNe," (Pegasus model)"),BNe.forEach(t),Ekr=i(ne),d0=n(ne,"LI",{});var INe=s(d0);UEe=n(INe,"STRONG",{});var Q8t=s(UEe);Ckr=r(Q8t,"roberta"),Q8t.forEach(t),wkr=r(INe," \u2014 "),qY=n(INe,"A",{href:!0});var H8t=s(qY);Akr=r(H8t,"FlaxRobertaModel"),H8t.forEach(t),Lkr=r(INe," (RoBERTa model)"),INe.forEach(t),ykr=i(ne),c0=n(ne,"LI",{});var NNe=s(c0);JEe=n(NNe,"STRONG",{});var U8t=s(JEe);xkr=r(U8t,"roformer"),U8t.forEach(t),$kr=r(NNe," \u2014 "),jY=n(NNe,"A",{href:!0});var J8t=s(jY);kkr=r(J8t,"FlaxRoFormerModel"),J8t.forEach(t),Skr=r(NNe," (RoFormer model)"),NNe.forEach(t),Rkr=i(ne),m0=n(ne,"LI",{});var qNe=s(m0);YEe=n(qNe,"STRONG",{});var Y8t=s(YEe);Pkr=r(Y8t,"t5"),Y8t.forEach(t),Bkr=r(qNe," \u2014 "),DY=n(qNe,"A",{href:!0});var K8t=s(DY);Ikr=r(K8t,"FlaxT5Model"),K8t.forEach(t),Nkr=r(qNe," (T5 model)"),qNe.forEach(t),qkr=i(ne),f0=n(ne,"LI",{});var jNe=s(f0);KEe=n(jNe,"STRONG",{});var Z8t=s(KEe);jkr=r(Z8t,"vision-text-dual-encoder"),Z8t.forEach(t),Dkr=r(jNe," \u2014 "),GY=n(jNe,"A",{href:!0});var e9t=s(GY);Gkr=r(e9t,"FlaxVisionTextDualEncoderModel"),e9t.forEach(t),Okr=r(jNe," (VisionTextDualEncoder model)"),jNe.forEach(t),Vkr=i(ne),g0=n(ne,"LI",{});var DNe=s(g0);ZEe=n(DNe,"STRONG",{});var o9t=s(ZEe);Xkr=r(o9t,"vit"),o9t.forEach(t),zkr=r(DNe," \u2014 "),OY=n(DNe,"A",{href:!0});var r9t=s(OY);Wkr=r(r9t,"FlaxViTModel"),r9t.forEach(t),Qkr=r(DNe," (ViT model)"),DNe.forEach(t),Hkr=i(ne),h0=n(ne,"LI",{});var GNe=s(h0);eCe=n(GNe,"STRONG",{});var t9t=s(eCe);Ukr=r(t9t,"wav2vec2"),t9t.forEach(t),Jkr=r(GNe," \u2014 "),VY=n(GNe,"A",{href:!0});var a9t=s(VY);Ykr=r(a9t,"FlaxWav2Vec2Model"),a9t.forEach(t),Kkr=r(GNe," (Wav2Vec2 model)"),GNe.forEach(t),Zkr=i(ne),u0=n(ne,"LI",{});var ONe=s(u0);oCe=n(ONe,"STRONG",{});var n9t=s(oCe);eSr=r(n9t,"xglm"),n9t.forEach(t),oSr=r(ONe," \u2014 "),XY=n(ONe,"A",{href:!0});var s9t=s(XY);rSr=r(s9t,"FlaxXGLMModel"),s9t.forEach(t),tSr=r(ONe," (XGLM model)"),ONe.forEach(t),aSr=i(ne),p0=n(ne,"LI",{});var VNe=s(p0);rCe=n(VNe,"STRONG",{});var l9t=s(rCe);nSr=r(l9t,"xlm-roberta"),l9t.forEach(t),sSr=r(VNe," \u2014 "),zY=n(VNe,"A",{href:!0});var i9t=s(zY);lSr=r(i9t,"FlaxXLMRobertaModel"),i9t.forEach(t),iSr=r(VNe," (XLM-RoBERTa model)"),VNe.forEach(t),ne.forEach(t),dSr=i(Vl),T(_0.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),KDe=i(m),Rc=n(m,"H2",{class:!0});var nVe=s(Rc);b0=n(nVe,"A",{id:!0,class:!0,href:!0});var d9t=s(b0);tCe=n(d9t,"SPAN",{});var c9t=s(tCe);T(H9.$$.fragment,c9t),c9t.forEach(t),d9t.forEach(t),cSr=i(nVe),aCe=n(nVe,"SPAN",{});var m9t=s(aCe);mSr=r(m9t,"FlaxAutoModelForCausalLM"),m9t.forEach(t),nVe.forEach(t),ZDe=i(m),fr=n(m,"DIV",{class:!0});var Xl=s(fr);T(U9.$$.fragment,Xl),fSr=i(Xl),Pc=n(Xl,"P",{});var Moe=s(Pc);gSr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WY=n(Moe,"A",{href:!0});var f9t=s(WY);hSr=r(f9t,"from_pretrained()"),f9t.forEach(t),uSr=r(Moe," class method or the "),QY=n(Moe,"A",{href:!0});var g9t=s(QY);pSr=r(g9t,"from_config()"),g9t.forEach(t),_Sr=r(Moe,` class
method.`),Moe.forEach(t),bSr=i(Xl),J9=n(Xl,"P",{});var sVe=s(J9);vSr=r(sVe,"This class cannot be instantiated directly using "),nCe=n(sVe,"CODE",{});var h9t=s(nCe);FSr=r(h9t,"__init__()"),h9t.forEach(t),TSr=r(sVe," (throws an error)."),sVe.forEach(t),MSr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var vL=s(Ot);T(Y9.$$.fragment,vL),ESr=i(vL),sCe=n(vL,"P",{});var u9t=s(sCe);CSr=r(u9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),u9t.forEach(t),wSr=i(vL),Bc=n(vL,"P",{});var Eoe=s(Bc);ASr=r(Eoe,`Note:
Loading a model from its configuration file does `),lCe=n(Eoe,"STRONG",{});var p9t=s(lCe);LSr=r(p9t,"not"),p9t.forEach(t),ySr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(Eoe,"A",{href:!0});var _9t=s(HY);xSr=r(_9t,"from_pretrained()"),_9t.forEach(t),$Sr=r(Eoe," to load the model weights."),Eoe.forEach(t),kSr=i(vL),T(v0.$$.fragment,vL),vL.forEach(t),SSr=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(K9.$$.fragment,zl),RSr=i(zl),iCe=n(zl,"P",{});var b9t=s(iCe);PSr=r(b9t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),b9t.forEach(t),BSr=i(zl),un=n(zl,"P",{});var FL=s(un);ISr=r(FL,"The model class to instantiate is selected based on the "),dCe=n(FL,"CODE",{});var v9t=s(dCe);NSr=r(v9t,"model_type"),v9t.forEach(t),qSr=r(FL,` property of the config object (either
passed as an argument or loaded from `),cCe=n(FL,"CODE",{});var F9t=s(cCe);jSr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),DSr=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=n(FL,"CODE",{});var T9t=s(mCe);GSr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),OSr=r(FL,":"),FL.forEach(t),VSr=i(zl),xe=n(zl,"UL",{});var Ne=s(xe);F0=n(Ne,"LI",{});var XNe=s(F0);fCe=n(XNe,"STRONG",{});var M9t=s(fCe);XSr=r(M9t,"bart"),M9t.forEach(t),zSr=r(XNe," \u2014 "),UY=n(XNe,"A",{href:!0});var E9t=s(UY);WSr=r(E9t,"FlaxBartForCausalLM"),E9t.forEach(t),QSr=r(XNe," (BART model)"),XNe.forEach(t),HSr=i(Ne),T0=n(Ne,"LI",{});var zNe=s(T0);gCe=n(zNe,"STRONG",{});var C9t=s(gCe);USr=r(C9t,"bert"),C9t.forEach(t),JSr=r(zNe," \u2014 "),JY=n(zNe,"A",{href:!0});var w9t=s(JY);YSr=r(w9t,"FlaxBertForCausalLM"),w9t.forEach(t),KSr=r(zNe," (BERT model)"),zNe.forEach(t),ZSr=i(Ne),M0=n(Ne,"LI",{});var WNe=s(M0);hCe=n(WNe,"STRONG",{});var A9t=s(hCe);eRr=r(A9t,"big_bird"),A9t.forEach(t),oRr=r(WNe," \u2014 "),YY=n(WNe,"A",{href:!0});var L9t=s(YY);rRr=r(L9t,"FlaxBigBirdForCausalLM"),L9t.forEach(t),tRr=r(WNe," (BigBird model)"),WNe.forEach(t),aRr=i(Ne),E0=n(Ne,"LI",{});var QNe=s(E0);uCe=n(QNe,"STRONG",{});var y9t=s(uCe);nRr=r(y9t,"electra"),y9t.forEach(t),sRr=r(QNe," \u2014 "),KY=n(QNe,"A",{href:!0});var x9t=s(KY);lRr=r(x9t,"FlaxElectraForCausalLM"),x9t.forEach(t),iRr=r(QNe," (ELECTRA model)"),QNe.forEach(t),dRr=i(Ne),C0=n(Ne,"LI",{});var HNe=s(C0);pCe=n(HNe,"STRONG",{});var $9t=s(pCe);cRr=r($9t,"gpt2"),$9t.forEach(t),mRr=r(HNe," \u2014 "),ZY=n(HNe,"A",{href:!0});var k9t=s(ZY);fRr=r(k9t,"FlaxGPT2LMHeadModel"),k9t.forEach(t),gRr=r(HNe," (OpenAI GPT-2 model)"),HNe.forEach(t),hRr=i(Ne),w0=n(Ne,"LI",{});var UNe=s(w0);_Ce=n(UNe,"STRONG",{});var S9t=s(_Ce);uRr=r(S9t,"gpt_neo"),S9t.forEach(t),pRr=r(UNe," \u2014 "),eK=n(UNe,"A",{href:!0});var R9t=s(eK);_Rr=r(R9t,"FlaxGPTNeoForCausalLM"),R9t.forEach(t),bRr=r(UNe," (GPT Neo model)"),UNe.forEach(t),vRr=i(Ne),A0=n(Ne,"LI",{});var JNe=s(A0);bCe=n(JNe,"STRONG",{});var P9t=s(bCe);FRr=r(P9t,"gptj"),P9t.forEach(t),TRr=r(JNe," \u2014 "),oK=n(JNe,"A",{href:!0});var B9t=s(oK);MRr=r(B9t,"FlaxGPTJForCausalLM"),B9t.forEach(t),ERr=r(JNe," (GPT-J model)"),JNe.forEach(t),CRr=i(Ne),L0=n(Ne,"LI",{});var YNe=s(L0);vCe=n(YNe,"STRONG",{});var I9t=s(vCe);wRr=r(I9t,"opt"),I9t.forEach(t),ARr=r(YNe," \u2014 "),rK=n(YNe,"A",{href:!0});var N9t=s(rK);LRr=r(N9t,"FlaxOPTForCausalLM"),N9t.forEach(t),yRr=r(YNe," (OPT model)"),YNe.forEach(t),xRr=i(Ne),y0=n(Ne,"LI",{});var KNe=s(y0);FCe=n(KNe,"STRONG",{});var q9t=s(FCe);$Rr=r(q9t,"roberta"),q9t.forEach(t),kRr=r(KNe," \u2014 "),tK=n(KNe,"A",{href:!0});var j9t=s(tK);SRr=r(j9t,"FlaxRobertaForCausalLM"),j9t.forEach(t),RRr=r(KNe," (RoBERTa model)"),KNe.forEach(t),PRr=i(Ne),x0=n(Ne,"LI",{});var ZNe=s(x0);TCe=n(ZNe,"STRONG",{});var D9t=s(TCe);BRr=r(D9t,"xglm"),D9t.forEach(t),IRr=r(ZNe," \u2014 "),aK=n(ZNe,"A",{href:!0});var G9t=s(aK);NRr=r(G9t,"FlaxXGLMForCausalLM"),G9t.forEach(t),qRr=r(ZNe," (XGLM model)"),ZNe.forEach(t),Ne.forEach(t),jRr=i(zl),T($0.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),eGe=i(m),Ic=n(m,"H2",{class:!0});var lVe=s(Ic);k0=n(lVe,"A",{id:!0,class:!0,href:!0});var O9t=s(k0);MCe=n(O9t,"SPAN",{});var V9t=s(MCe);T(Z9.$$.fragment,V9t),V9t.forEach(t),O9t.forEach(t),DRr=i(lVe),ECe=n(lVe,"SPAN",{});var X9t=s(ECe);GRr=r(X9t,"FlaxAutoModelForPreTraining"),X9t.forEach(t),lVe.forEach(t),oGe=i(m),gr=n(m,"DIV",{class:!0});var Wl=s(gr);T(ex.$$.fragment,Wl),ORr=i(Wl),Nc=n(Wl,"P",{});var Coe=s(Nc);VRr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nK=n(Coe,"A",{href:!0});var z9t=s(nK);XRr=r(z9t,"from_pretrained()"),z9t.forEach(t),zRr=r(Coe," class method or the "),sK=n(Coe,"A",{href:!0});var W9t=s(sK);WRr=r(W9t,"from_config()"),W9t.forEach(t),QRr=r(Coe,` class
method.`),Coe.forEach(t),HRr=i(Wl),ox=n(Wl,"P",{});var iVe=s(ox);URr=r(iVe,"This class cannot be instantiated directly using "),CCe=n(iVe,"CODE",{});var Q9t=s(CCe);JRr=r(Q9t,"__init__()"),Q9t.forEach(t),YRr=r(iVe," (throws an error)."),iVe.forEach(t),KRr=i(Wl),Vt=n(Wl,"DIV",{class:!0});var TL=s(Vt);T(rx.$$.fragment,TL),ZRr=i(TL),wCe=n(TL,"P",{});var H9t=s(wCe);ePr=r(H9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),H9t.forEach(t),oPr=i(TL),qc=n(TL,"P",{});var woe=s(qc);rPr=r(woe,`Note:
Loading a model from its configuration file does `),ACe=n(woe,"STRONG",{});var U9t=s(ACe);tPr=r(U9t,"not"),U9t.forEach(t),aPr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(woe,"A",{href:!0});var J9t=s(lK);nPr=r(J9t,"from_pretrained()"),J9t.forEach(t),sPr=r(woe," to load the model weights."),woe.forEach(t),lPr=i(TL),T(S0.$$.fragment,TL),TL.forEach(t),iPr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(tx.$$.fragment,Ql),dPr=i(Ql),LCe=n(Ql,"P",{});var Y9t=s(LCe);cPr=r(Y9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Y9t.forEach(t),mPr=i(Ql),pn=n(Ql,"P",{});var ML=s(pn);fPr=r(ML,"The model class to instantiate is selected based on the "),yCe=n(ML,"CODE",{});var K9t=s(yCe);gPr=r(K9t,"model_type"),K9t.forEach(t),hPr=r(ML,` property of the config object (either
passed as an argument or loaded from `),xCe=n(ML,"CODE",{});var Z9t=s(xCe);uPr=r(Z9t,"pretrained_model_name_or_path"),Z9t.forEach(t),pPr=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ce=n(ML,"CODE",{});var ext=s($Ce);_Pr=r(ext,"pretrained_model_name_or_path"),ext.forEach(t),bPr=r(ML,":"),ML.forEach(t),vPr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);R0=n(we,"LI",{});var eqe=s(R0);kCe=n(eqe,"STRONG",{});var oxt=s(kCe);FPr=r(oxt,"albert"),oxt.forEach(t),TPr=r(eqe," \u2014 "),iK=n(eqe,"A",{href:!0});var rxt=s(iK);MPr=r(rxt,"FlaxAlbertForPreTraining"),rxt.forEach(t),EPr=r(eqe," (ALBERT model)"),eqe.forEach(t),CPr=i(we),P0=n(we,"LI",{});var oqe=s(P0);SCe=n(oqe,"STRONG",{});var txt=s(SCe);wPr=r(txt,"bart"),txt.forEach(t),APr=r(oqe," \u2014 "),dK=n(oqe,"A",{href:!0});var axt=s(dK);LPr=r(axt,"FlaxBartForConditionalGeneration"),axt.forEach(t),yPr=r(oqe," (BART model)"),oqe.forEach(t),xPr=i(we),B0=n(we,"LI",{});var rqe=s(B0);RCe=n(rqe,"STRONG",{});var nxt=s(RCe);$Pr=r(nxt,"bert"),nxt.forEach(t),kPr=r(rqe," \u2014 "),cK=n(rqe,"A",{href:!0});var sxt=s(cK);SPr=r(sxt,"FlaxBertForPreTraining"),sxt.forEach(t),RPr=r(rqe," (BERT model)"),rqe.forEach(t),PPr=i(we),I0=n(we,"LI",{});var tqe=s(I0);PCe=n(tqe,"STRONG",{});var lxt=s(PCe);BPr=r(lxt,"big_bird"),lxt.forEach(t),IPr=r(tqe," \u2014 "),mK=n(tqe,"A",{href:!0});var ixt=s(mK);NPr=r(ixt,"FlaxBigBirdForPreTraining"),ixt.forEach(t),qPr=r(tqe," (BigBird model)"),tqe.forEach(t),jPr=i(we),N0=n(we,"LI",{});var aqe=s(N0);BCe=n(aqe,"STRONG",{});var dxt=s(BCe);DPr=r(dxt,"electra"),dxt.forEach(t),GPr=r(aqe," \u2014 "),fK=n(aqe,"A",{href:!0});var cxt=s(fK);OPr=r(cxt,"FlaxElectraForPreTraining"),cxt.forEach(t),VPr=r(aqe," (ELECTRA model)"),aqe.forEach(t),XPr=i(we),q0=n(we,"LI",{});var nqe=s(q0);ICe=n(nqe,"STRONG",{});var mxt=s(ICe);zPr=r(mxt,"mbart"),mxt.forEach(t),WPr=r(nqe," \u2014 "),gK=n(nqe,"A",{href:!0});var fxt=s(gK);QPr=r(fxt,"FlaxMBartForConditionalGeneration"),fxt.forEach(t),HPr=r(nqe," (mBART model)"),nqe.forEach(t),UPr=i(we),j0=n(we,"LI",{});var sqe=s(j0);NCe=n(sqe,"STRONG",{});var gxt=s(NCe);JPr=r(gxt,"mt5"),gxt.forEach(t),YPr=r(sqe," \u2014 "),hK=n(sqe,"A",{href:!0});var hxt=s(hK);KPr=r(hxt,"FlaxMT5ForConditionalGeneration"),hxt.forEach(t),ZPr=r(sqe," (MT5 model)"),sqe.forEach(t),eBr=i(we),D0=n(we,"LI",{});var lqe=s(D0);qCe=n(lqe,"STRONG",{});var uxt=s(qCe);oBr=r(uxt,"roberta"),uxt.forEach(t),rBr=r(lqe," \u2014 "),uK=n(lqe,"A",{href:!0});var pxt=s(uK);tBr=r(pxt,"FlaxRobertaForMaskedLM"),pxt.forEach(t),aBr=r(lqe," (RoBERTa model)"),lqe.forEach(t),nBr=i(we),G0=n(we,"LI",{});var iqe=s(G0);jCe=n(iqe,"STRONG",{});var _xt=s(jCe);sBr=r(_xt,"roformer"),_xt.forEach(t),lBr=r(iqe," \u2014 "),pK=n(iqe,"A",{href:!0});var bxt=s(pK);iBr=r(bxt,"FlaxRoFormerForMaskedLM"),bxt.forEach(t),dBr=r(iqe," (RoFormer model)"),iqe.forEach(t),cBr=i(we),O0=n(we,"LI",{});var dqe=s(O0);DCe=n(dqe,"STRONG",{});var vxt=s(DCe);mBr=r(vxt,"t5"),vxt.forEach(t),fBr=r(dqe," \u2014 "),_K=n(dqe,"A",{href:!0});var Fxt=s(_K);gBr=r(Fxt,"FlaxT5ForConditionalGeneration"),Fxt.forEach(t),hBr=r(dqe," (T5 model)"),dqe.forEach(t),uBr=i(we),V0=n(we,"LI",{});var cqe=s(V0);GCe=n(cqe,"STRONG",{});var Txt=s(GCe);pBr=r(Txt,"wav2vec2"),Txt.forEach(t),_Br=r(cqe," \u2014 "),bK=n(cqe,"A",{href:!0});var Mxt=s(bK);bBr=r(Mxt,"FlaxWav2Vec2ForPreTraining"),Mxt.forEach(t),vBr=r(cqe," (Wav2Vec2 model)"),cqe.forEach(t),FBr=i(we),X0=n(we,"LI",{});var mqe=s(X0);OCe=n(mqe,"STRONG",{});var Ext=s(OCe);TBr=r(Ext,"xlm-roberta"),Ext.forEach(t),MBr=r(mqe," \u2014 "),vK=n(mqe,"A",{href:!0});var Cxt=s(vK);EBr=r(Cxt,"FlaxXLMRobertaForMaskedLM"),Cxt.forEach(t),CBr=r(mqe," (XLM-RoBERTa model)"),mqe.forEach(t),we.forEach(t),wBr=i(Ql),T(z0.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),rGe=i(m),jc=n(m,"H2",{class:!0});var dVe=s(jc);W0=n(dVe,"A",{id:!0,class:!0,href:!0});var wxt=s(W0);VCe=n(wxt,"SPAN",{});var Axt=s(VCe);T(ax.$$.fragment,Axt),Axt.forEach(t),wxt.forEach(t),ABr=i(dVe),XCe=n(dVe,"SPAN",{});var Lxt=s(XCe);LBr=r(Lxt,"FlaxAutoModelForMaskedLM"),Lxt.forEach(t),dVe.forEach(t),tGe=i(m),hr=n(m,"DIV",{class:!0});var Hl=s(hr);T(nx.$$.fragment,Hl),yBr=i(Hl),Dc=n(Hl,"P",{});var Aoe=s(Dc);xBr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FK=n(Aoe,"A",{href:!0});var yxt=s(FK);$Br=r(yxt,"from_pretrained()"),yxt.forEach(t),kBr=r(Aoe," class method or the "),TK=n(Aoe,"A",{href:!0});var xxt=s(TK);SBr=r(xxt,"from_config()"),xxt.forEach(t),RBr=r(Aoe,` class
method.`),Aoe.forEach(t),PBr=i(Hl),sx=n(Hl,"P",{});var cVe=s(sx);BBr=r(cVe,"This class cannot be instantiated directly using "),zCe=n(cVe,"CODE",{});var $xt=s(zCe);IBr=r($xt,"__init__()"),$xt.forEach(t),NBr=r(cVe," (throws an error)."),cVe.forEach(t),qBr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var EL=s(Xt);T(lx.$$.fragment,EL),jBr=i(EL),WCe=n(EL,"P",{});var kxt=s(WCe);DBr=r(kxt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kxt.forEach(t),GBr=i(EL),Gc=n(EL,"P",{});var Loe=s(Gc);OBr=r(Loe,`Note:
Loading a model from its configuration file does `),QCe=n(Loe,"STRONG",{});var Sxt=s(QCe);VBr=r(Sxt,"not"),Sxt.forEach(t),XBr=r(Loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MK=n(Loe,"A",{href:!0});var Rxt=s(MK);zBr=r(Rxt,"from_pretrained()"),Rxt.forEach(t),WBr=r(Loe," to load the model weights."),Loe.forEach(t),QBr=i(EL),T(Q0.$$.fragment,EL),EL.forEach(t),HBr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(ix.$$.fragment,Ul),UBr=i(Ul),HCe=n(Ul,"P",{});var Pxt=s(HCe);JBr=r(Pxt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pxt.forEach(t),YBr=i(Ul),_n=n(Ul,"P",{});var CL=s(_n);KBr=r(CL,"The model class to instantiate is selected based on the "),UCe=n(CL,"CODE",{});var Bxt=s(UCe);ZBr=r(Bxt,"model_type"),Bxt.forEach(t),eIr=r(CL,` property of the config object (either
passed as an argument or loaded from `),JCe=n(CL,"CODE",{});var Ixt=s(JCe);oIr=r(Ixt,"pretrained_model_name_or_path"),Ixt.forEach(t),rIr=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=n(CL,"CODE",{});var Nxt=s(YCe);tIr=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),aIr=r(CL,":"),CL.forEach(t),nIr=i(Ul),$e=n(Ul,"UL",{});var qe=s($e);H0=n(qe,"LI",{});var fqe=s(H0);KCe=n(fqe,"STRONG",{});var qxt=s(KCe);sIr=r(qxt,"albert"),qxt.forEach(t),lIr=r(fqe," \u2014 "),EK=n(fqe,"A",{href:!0});var jxt=s(EK);iIr=r(jxt,"FlaxAlbertForMaskedLM"),jxt.forEach(t),dIr=r(fqe," (ALBERT model)"),fqe.forEach(t),cIr=i(qe),U0=n(qe,"LI",{});var gqe=s(U0);ZCe=n(gqe,"STRONG",{});var Dxt=s(ZCe);mIr=r(Dxt,"bart"),Dxt.forEach(t),fIr=r(gqe," \u2014 "),CK=n(gqe,"A",{href:!0});var Gxt=s(CK);gIr=r(Gxt,"FlaxBartForConditionalGeneration"),Gxt.forEach(t),hIr=r(gqe," (BART model)"),gqe.forEach(t),uIr=i(qe),J0=n(qe,"LI",{});var hqe=s(J0);e5e=n(hqe,"STRONG",{});var Oxt=s(e5e);pIr=r(Oxt,"bert"),Oxt.forEach(t),_Ir=r(hqe," \u2014 "),wK=n(hqe,"A",{href:!0});var Vxt=s(wK);bIr=r(Vxt,"FlaxBertForMaskedLM"),Vxt.forEach(t),vIr=r(hqe," (BERT model)"),hqe.forEach(t),FIr=i(qe),Y0=n(qe,"LI",{});var uqe=s(Y0);o5e=n(uqe,"STRONG",{});var Xxt=s(o5e);TIr=r(Xxt,"big_bird"),Xxt.forEach(t),MIr=r(uqe," \u2014 "),AK=n(uqe,"A",{href:!0});var zxt=s(AK);EIr=r(zxt,"FlaxBigBirdForMaskedLM"),zxt.forEach(t),CIr=r(uqe," (BigBird model)"),uqe.forEach(t),wIr=i(qe),K0=n(qe,"LI",{});var pqe=s(K0);r5e=n(pqe,"STRONG",{});var Wxt=s(r5e);AIr=r(Wxt,"distilbert"),Wxt.forEach(t),LIr=r(pqe," \u2014 "),LK=n(pqe,"A",{href:!0});var Qxt=s(LK);yIr=r(Qxt,"FlaxDistilBertForMaskedLM"),Qxt.forEach(t),xIr=r(pqe," (DistilBERT model)"),pqe.forEach(t),$Ir=i(qe),Z0=n(qe,"LI",{});var _qe=s(Z0);t5e=n(_qe,"STRONG",{});var Hxt=s(t5e);kIr=r(Hxt,"electra"),Hxt.forEach(t),SIr=r(_qe," \u2014 "),yK=n(_qe,"A",{href:!0});var Uxt=s(yK);RIr=r(Uxt,"FlaxElectraForMaskedLM"),Uxt.forEach(t),PIr=r(_qe," (ELECTRA model)"),_qe.forEach(t),BIr=i(qe),ew=n(qe,"LI",{});var bqe=s(ew);a5e=n(bqe,"STRONG",{});var Jxt=s(a5e);IIr=r(Jxt,"mbart"),Jxt.forEach(t),NIr=r(bqe," \u2014 "),xK=n(bqe,"A",{href:!0});var Yxt=s(xK);qIr=r(Yxt,"FlaxMBartForConditionalGeneration"),Yxt.forEach(t),jIr=r(bqe," (mBART model)"),bqe.forEach(t),DIr=i(qe),ow=n(qe,"LI",{});var vqe=s(ow);n5e=n(vqe,"STRONG",{});var Kxt=s(n5e);GIr=r(Kxt,"roberta"),Kxt.forEach(t),OIr=r(vqe," \u2014 "),$K=n(vqe,"A",{href:!0});var Zxt=s($K);VIr=r(Zxt,"FlaxRobertaForMaskedLM"),Zxt.forEach(t),XIr=r(vqe," (RoBERTa model)"),vqe.forEach(t),zIr=i(qe),rw=n(qe,"LI",{});var Fqe=s(rw);s5e=n(Fqe,"STRONG",{});var e$t=s(s5e);WIr=r(e$t,"roformer"),e$t.forEach(t),QIr=r(Fqe," \u2014 "),kK=n(Fqe,"A",{href:!0});var o$t=s(kK);HIr=r(o$t,"FlaxRoFormerForMaskedLM"),o$t.forEach(t),UIr=r(Fqe," (RoFormer model)"),Fqe.forEach(t),JIr=i(qe),tw=n(qe,"LI",{});var Tqe=s(tw);l5e=n(Tqe,"STRONG",{});var r$t=s(l5e);YIr=r(r$t,"xlm-roberta"),r$t.forEach(t),KIr=r(Tqe," \u2014 "),SK=n(Tqe,"A",{href:!0});var t$t=s(SK);ZIr=r(t$t,"FlaxXLMRobertaForMaskedLM"),t$t.forEach(t),eNr=r(Tqe," (XLM-RoBERTa model)"),Tqe.forEach(t),qe.forEach(t),oNr=i(Ul),T(aw.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),aGe=i(m),Oc=n(m,"H2",{class:!0});var mVe=s(Oc);nw=n(mVe,"A",{id:!0,class:!0,href:!0});var a$t=s(nw);i5e=n(a$t,"SPAN",{});var n$t=s(i5e);T(dx.$$.fragment,n$t),n$t.forEach(t),a$t.forEach(t),rNr=i(mVe),d5e=n(mVe,"SPAN",{});var s$t=s(d5e);tNr=r(s$t,"FlaxAutoModelForSeq2SeqLM"),s$t.forEach(t),mVe.forEach(t),nGe=i(m),ur=n(m,"DIV",{class:!0});var Jl=s(ur);T(cx.$$.fragment,Jl),aNr=i(Jl),Vc=n(Jl,"P",{});var yoe=s(Vc);nNr=r(yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RK=n(yoe,"A",{href:!0});var l$t=s(RK);sNr=r(l$t,"from_pretrained()"),l$t.forEach(t),lNr=r(yoe," class method or the "),PK=n(yoe,"A",{href:!0});var i$t=s(PK);iNr=r(i$t,"from_config()"),i$t.forEach(t),dNr=r(yoe,` class
method.`),yoe.forEach(t),cNr=i(Jl),mx=n(Jl,"P",{});var fVe=s(mx);mNr=r(fVe,"This class cannot be instantiated directly using "),c5e=n(fVe,"CODE",{});var d$t=s(c5e);fNr=r(d$t,"__init__()"),d$t.forEach(t),gNr=r(fVe," (throws an error)."),fVe.forEach(t),hNr=i(Jl),zt=n(Jl,"DIV",{class:!0});var wL=s(zt);T(fx.$$.fragment,wL),uNr=i(wL),m5e=n(wL,"P",{});var c$t=s(m5e);pNr=r(c$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),c$t.forEach(t),_Nr=i(wL),Xc=n(wL,"P",{});var xoe=s(Xc);bNr=r(xoe,`Note:
Loading a model from its configuration file does `),f5e=n(xoe,"STRONG",{});var m$t=s(f5e);vNr=r(m$t,"not"),m$t.forEach(t),FNr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),BK=n(xoe,"A",{href:!0});var f$t=s(BK);TNr=r(f$t,"from_pretrained()"),f$t.forEach(t),MNr=r(xoe," to load the model weights."),xoe.forEach(t),ENr=i(wL),T(sw.$$.fragment,wL),wL.forEach(t),CNr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(gx.$$.fragment,Yl),wNr=i(Yl),g5e=n(Yl,"P",{});var g$t=s(g5e);ANr=r(g$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),g$t.forEach(t),LNr=i(Yl),bn=n(Yl,"P",{});var AL=s(bn);yNr=r(AL,"The model class to instantiate is selected based on the "),h5e=n(AL,"CODE",{});var h$t=s(h5e);xNr=r(h$t,"model_type"),h$t.forEach(t),$Nr=r(AL,` property of the config object (either
passed as an argument or loaded from `),u5e=n(AL,"CODE",{});var u$t=s(u5e);kNr=r(u$t,"pretrained_model_name_or_path"),u$t.forEach(t),SNr=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p5e=n(AL,"CODE",{});var p$t=s(p5e);RNr=r(p$t,"pretrained_model_name_or_path"),p$t.forEach(t),PNr=r(AL,":"),AL.forEach(t),BNr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);lw=n(ze,"LI",{});var Mqe=s(lw);_5e=n(Mqe,"STRONG",{});var _$t=s(_5e);INr=r(_$t,"bart"),_$t.forEach(t),NNr=r(Mqe," \u2014 "),IK=n(Mqe,"A",{href:!0});var b$t=s(IK);qNr=r(b$t,"FlaxBartForConditionalGeneration"),b$t.forEach(t),jNr=r(Mqe," (BART model)"),Mqe.forEach(t),DNr=i(ze),iw=n(ze,"LI",{});var Eqe=s(iw);b5e=n(Eqe,"STRONG",{});var v$t=s(b5e);GNr=r(v$t,"blenderbot"),v$t.forEach(t),ONr=r(Eqe," \u2014 "),NK=n(Eqe,"A",{href:!0});var F$t=s(NK);VNr=r(F$t,"FlaxBlenderbotForConditionalGeneration"),F$t.forEach(t),XNr=r(Eqe," (Blenderbot model)"),Eqe.forEach(t),zNr=i(ze),dw=n(ze,"LI",{});var Cqe=s(dw);v5e=n(Cqe,"STRONG",{});var T$t=s(v5e);WNr=r(T$t,"blenderbot-small"),T$t.forEach(t),QNr=r(Cqe," \u2014 "),qK=n(Cqe,"A",{href:!0});var M$t=s(qK);HNr=r(M$t,"FlaxBlenderbotSmallForConditionalGeneration"),M$t.forEach(t),UNr=r(Cqe," (BlenderbotSmall model)"),Cqe.forEach(t),JNr=i(ze),cw=n(ze,"LI",{});var wqe=s(cw);F5e=n(wqe,"STRONG",{});var E$t=s(F5e);YNr=r(E$t,"encoder-decoder"),E$t.forEach(t),KNr=r(wqe," \u2014 "),jK=n(wqe,"A",{href:!0});var C$t=s(jK);ZNr=r(C$t,"FlaxEncoderDecoderModel"),C$t.forEach(t),eqr=r(wqe," (Encoder decoder model)"),wqe.forEach(t),oqr=i(ze),mw=n(ze,"LI",{});var Aqe=s(mw);T5e=n(Aqe,"STRONG",{});var w$t=s(T5e);rqr=r(w$t,"marian"),w$t.forEach(t),tqr=r(Aqe," \u2014 "),DK=n(Aqe,"A",{href:!0});var A$t=s(DK);aqr=r(A$t,"FlaxMarianMTModel"),A$t.forEach(t),nqr=r(Aqe," (Marian model)"),Aqe.forEach(t),sqr=i(ze),fw=n(ze,"LI",{});var Lqe=s(fw);M5e=n(Lqe,"STRONG",{});var L$t=s(M5e);lqr=r(L$t,"mbart"),L$t.forEach(t),iqr=r(Lqe," \u2014 "),GK=n(Lqe,"A",{href:!0});var y$t=s(GK);dqr=r(y$t,"FlaxMBartForConditionalGeneration"),y$t.forEach(t),cqr=r(Lqe," (mBART model)"),Lqe.forEach(t),mqr=i(ze),gw=n(ze,"LI",{});var yqe=s(gw);E5e=n(yqe,"STRONG",{});var x$t=s(E5e);fqr=r(x$t,"mt5"),x$t.forEach(t),gqr=r(yqe," \u2014 "),OK=n(yqe,"A",{href:!0});var $$t=s(OK);hqr=r($$t,"FlaxMT5ForConditionalGeneration"),$$t.forEach(t),uqr=r(yqe," (MT5 model)"),yqe.forEach(t),pqr=i(ze),hw=n(ze,"LI",{});var xqe=s(hw);C5e=n(xqe,"STRONG",{});var k$t=s(C5e);_qr=r(k$t,"pegasus"),k$t.forEach(t),bqr=r(xqe," \u2014 "),VK=n(xqe,"A",{href:!0});var S$t=s(VK);vqr=r(S$t,"FlaxPegasusForConditionalGeneration"),S$t.forEach(t),Fqr=r(xqe," (Pegasus model)"),xqe.forEach(t),Tqr=i(ze),uw=n(ze,"LI",{});var $qe=s(uw);w5e=n($qe,"STRONG",{});var R$t=s(w5e);Mqr=r(R$t,"t5"),R$t.forEach(t),Eqr=r($qe," \u2014 "),XK=n($qe,"A",{href:!0});var P$t=s(XK);Cqr=r(P$t,"FlaxT5ForConditionalGeneration"),P$t.forEach(t),wqr=r($qe," (T5 model)"),$qe.forEach(t),ze.forEach(t),Aqr=i(Yl),T(pw.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),sGe=i(m),zc=n(m,"H2",{class:!0});var gVe=s(zc);_w=n(gVe,"A",{id:!0,class:!0,href:!0});var B$t=s(_w);A5e=n(B$t,"SPAN",{});var I$t=s(A5e);T(hx.$$.fragment,I$t),I$t.forEach(t),B$t.forEach(t),Lqr=i(gVe),L5e=n(gVe,"SPAN",{});var N$t=s(L5e);yqr=r(N$t,"FlaxAutoModelForSequenceClassification"),N$t.forEach(t),gVe.forEach(t),lGe=i(m),pr=n(m,"DIV",{class:!0});var Kl=s(pr);T(ux.$$.fragment,Kl),xqr=i(Kl),Wc=n(Kl,"P",{});var $oe=s(Wc);$qr=r($oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zK=n($oe,"A",{href:!0});var q$t=s(zK);kqr=r(q$t,"from_pretrained()"),q$t.forEach(t),Sqr=r($oe," class method or the "),WK=n($oe,"A",{href:!0});var j$t=s(WK);Rqr=r(j$t,"from_config()"),j$t.forEach(t),Pqr=r($oe,` class
method.`),$oe.forEach(t),Bqr=i(Kl),px=n(Kl,"P",{});var hVe=s(px);Iqr=r(hVe,"This class cannot be instantiated directly using "),y5e=n(hVe,"CODE",{});var D$t=s(y5e);Nqr=r(D$t,"__init__()"),D$t.forEach(t),qqr=r(hVe," (throws an error)."),hVe.forEach(t),jqr=i(Kl),Wt=n(Kl,"DIV",{class:!0});var LL=s(Wt);T(_x.$$.fragment,LL),Dqr=i(LL),x5e=n(LL,"P",{});var G$t=s(x5e);Gqr=r(G$t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),G$t.forEach(t),Oqr=i(LL),Qc=n(LL,"P",{});var koe=s(Qc);Vqr=r(koe,`Note:
Loading a model from its configuration file does `),$5e=n(koe,"STRONG",{});var O$t=s($5e);Xqr=r(O$t,"not"),O$t.forEach(t),zqr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QK=n(koe,"A",{href:!0});var V$t=s(QK);Wqr=r(V$t,"from_pretrained()"),V$t.forEach(t),Qqr=r(koe," to load the model weights."),koe.forEach(t),Hqr=i(LL),T(bw.$$.fragment,LL),LL.forEach(t),Uqr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(bx.$$.fragment,Zl),Jqr=i(Zl),k5e=n(Zl,"P",{});var X$t=s(k5e);Yqr=r(X$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),X$t.forEach(t),Kqr=i(Zl),vn=n(Zl,"P",{});var yL=s(vn);Zqr=r(yL,"The model class to instantiate is selected based on the "),S5e=n(yL,"CODE",{});var z$t=s(S5e);ejr=r(z$t,"model_type"),z$t.forEach(t),ojr=r(yL,` property of the config object (either
passed as an argument or loaded from `),R5e=n(yL,"CODE",{});var W$t=s(R5e);rjr=r(W$t,"pretrained_model_name_or_path"),W$t.forEach(t),tjr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P5e=n(yL,"CODE",{});var Q$t=s(P5e);ajr=r(Q$t,"pretrained_model_name_or_path"),Q$t.forEach(t),njr=r(yL,":"),yL.forEach(t),sjr=i(Zl),ke=n(Zl,"UL",{});var je=s(ke);vw=n(je,"LI",{});var kqe=s(vw);B5e=n(kqe,"STRONG",{});var H$t=s(B5e);ljr=r(H$t,"albert"),H$t.forEach(t),ijr=r(kqe," \u2014 "),HK=n(kqe,"A",{href:!0});var U$t=s(HK);djr=r(U$t,"FlaxAlbertForSequenceClassification"),U$t.forEach(t),cjr=r(kqe," (ALBERT model)"),kqe.forEach(t),mjr=i(je),Fw=n(je,"LI",{});var Sqe=s(Fw);I5e=n(Sqe,"STRONG",{});var J$t=s(I5e);fjr=r(J$t,"bart"),J$t.forEach(t),gjr=r(Sqe," \u2014 "),UK=n(Sqe,"A",{href:!0});var Y$t=s(UK);hjr=r(Y$t,"FlaxBartForSequenceClassification"),Y$t.forEach(t),ujr=r(Sqe," (BART model)"),Sqe.forEach(t),pjr=i(je),Tw=n(je,"LI",{});var Rqe=s(Tw);N5e=n(Rqe,"STRONG",{});var K$t=s(N5e);_jr=r(K$t,"bert"),K$t.forEach(t),bjr=r(Rqe," \u2014 "),JK=n(Rqe,"A",{href:!0});var Z$t=s(JK);vjr=r(Z$t,"FlaxBertForSequenceClassification"),Z$t.forEach(t),Fjr=r(Rqe," (BERT model)"),Rqe.forEach(t),Tjr=i(je),Mw=n(je,"LI",{});var Pqe=s(Mw);q5e=n(Pqe,"STRONG",{});var ekt=s(q5e);Mjr=r(ekt,"big_bird"),ekt.forEach(t),Ejr=r(Pqe," \u2014 "),YK=n(Pqe,"A",{href:!0});var okt=s(YK);Cjr=r(okt,"FlaxBigBirdForSequenceClassification"),okt.forEach(t),wjr=r(Pqe," (BigBird model)"),Pqe.forEach(t),Ajr=i(je),Ew=n(je,"LI",{});var Bqe=s(Ew);j5e=n(Bqe,"STRONG",{});var rkt=s(j5e);Ljr=r(rkt,"distilbert"),rkt.forEach(t),yjr=r(Bqe," \u2014 "),KK=n(Bqe,"A",{href:!0});var tkt=s(KK);xjr=r(tkt,"FlaxDistilBertForSequenceClassification"),tkt.forEach(t),$jr=r(Bqe," (DistilBERT model)"),Bqe.forEach(t),kjr=i(je),Cw=n(je,"LI",{});var Iqe=s(Cw);D5e=n(Iqe,"STRONG",{});var akt=s(D5e);Sjr=r(akt,"electra"),akt.forEach(t),Rjr=r(Iqe," \u2014 "),ZK=n(Iqe,"A",{href:!0});var nkt=s(ZK);Pjr=r(nkt,"FlaxElectraForSequenceClassification"),nkt.forEach(t),Bjr=r(Iqe," (ELECTRA model)"),Iqe.forEach(t),Ijr=i(je),ww=n(je,"LI",{});var Nqe=s(ww);G5e=n(Nqe,"STRONG",{});var skt=s(G5e);Njr=r(skt,"mbart"),skt.forEach(t),qjr=r(Nqe," \u2014 "),eZ=n(Nqe,"A",{href:!0});var lkt=s(eZ);jjr=r(lkt,"FlaxMBartForSequenceClassification"),lkt.forEach(t),Djr=r(Nqe," (mBART model)"),Nqe.forEach(t),Gjr=i(je),Aw=n(je,"LI",{});var qqe=s(Aw);O5e=n(qqe,"STRONG",{});var ikt=s(O5e);Ojr=r(ikt,"roberta"),ikt.forEach(t),Vjr=r(qqe," \u2014 "),oZ=n(qqe,"A",{href:!0});var dkt=s(oZ);Xjr=r(dkt,"FlaxRobertaForSequenceClassification"),dkt.forEach(t),zjr=r(qqe," (RoBERTa model)"),qqe.forEach(t),Wjr=i(je),Lw=n(je,"LI",{});var jqe=s(Lw);V5e=n(jqe,"STRONG",{});var ckt=s(V5e);Qjr=r(ckt,"roformer"),ckt.forEach(t),Hjr=r(jqe," \u2014 "),rZ=n(jqe,"A",{href:!0});var mkt=s(rZ);Ujr=r(mkt,"FlaxRoFormerForSequenceClassification"),mkt.forEach(t),Jjr=r(jqe," (RoFormer model)"),jqe.forEach(t),Yjr=i(je),yw=n(je,"LI",{});var Dqe=s(yw);X5e=n(Dqe,"STRONG",{});var fkt=s(X5e);Kjr=r(fkt,"xlm-roberta"),fkt.forEach(t),Zjr=r(Dqe," \u2014 "),tZ=n(Dqe,"A",{href:!0});var gkt=s(tZ);eDr=r(gkt,"FlaxXLMRobertaForSequenceClassification"),gkt.forEach(t),oDr=r(Dqe," (XLM-RoBERTa model)"),Dqe.forEach(t),je.forEach(t),rDr=i(Zl),T(xw.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),iGe=i(m),Hc=n(m,"H2",{class:!0});var uVe=s(Hc);$w=n(uVe,"A",{id:!0,class:!0,href:!0});var hkt=s($w);z5e=n(hkt,"SPAN",{});var ukt=s(z5e);T(vx.$$.fragment,ukt),ukt.forEach(t),hkt.forEach(t),tDr=i(uVe),W5e=n(uVe,"SPAN",{});var pkt=s(W5e);aDr=r(pkt,"FlaxAutoModelForQuestionAnswering"),pkt.forEach(t),uVe.forEach(t),dGe=i(m),_r=n(m,"DIV",{class:!0});var ei=s(_r);T(Fx.$$.fragment,ei),nDr=i(ei),Uc=n(ei,"P",{});var Soe=s(Uc);sDr=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aZ=n(Soe,"A",{href:!0});var _kt=s(aZ);lDr=r(_kt,"from_pretrained()"),_kt.forEach(t),iDr=r(Soe," class method or the "),nZ=n(Soe,"A",{href:!0});var bkt=s(nZ);dDr=r(bkt,"from_config()"),bkt.forEach(t),cDr=r(Soe,` class
method.`),Soe.forEach(t),mDr=i(ei),Tx=n(ei,"P",{});var pVe=s(Tx);fDr=r(pVe,"This class cannot be instantiated directly using "),Q5e=n(pVe,"CODE",{});var vkt=s(Q5e);gDr=r(vkt,"__init__()"),vkt.forEach(t),hDr=r(pVe," (throws an error)."),pVe.forEach(t),uDr=i(ei),Qt=n(ei,"DIV",{class:!0});var xL=s(Qt);T(Mx.$$.fragment,xL),pDr=i(xL),H5e=n(xL,"P",{});var Fkt=s(H5e);_Dr=r(Fkt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fkt.forEach(t),bDr=i(xL),Jc=n(xL,"P",{});var Roe=s(Jc);vDr=r(Roe,`Note:
Loading a model from its configuration file does `),U5e=n(Roe,"STRONG",{});var Tkt=s(U5e);FDr=r(Tkt,"not"),Tkt.forEach(t),TDr=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sZ=n(Roe,"A",{href:!0});var Mkt=s(sZ);MDr=r(Mkt,"from_pretrained()"),Mkt.forEach(t),EDr=r(Roe," to load the model weights."),Roe.forEach(t),CDr=i(xL),T(kw.$$.fragment,xL),xL.forEach(t),wDr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(Ex.$$.fragment,oi),ADr=i(oi),J5e=n(oi,"P",{});var Ekt=s(J5e);LDr=r(Ekt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ekt.forEach(t),yDr=i(oi),Fn=n(oi,"P",{});var $L=s(Fn);xDr=r($L,"The model class to instantiate is selected based on the "),Y5e=n($L,"CODE",{});var Ckt=s(Y5e);$Dr=r(Ckt,"model_type"),Ckt.forEach(t),kDr=r($L,` property of the config object (either
passed as an argument or loaded from `),K5e=n($L,"CODE",{});var wkt=s(K5e);SDr=r(wkt,"pretrained_model_name_or_path"),wkt.forEach(t),RDr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=n($L,"CODE",{});var Akt=s(Z5e);PDr=r(Akt,"pretrained_model_name_or_path"),Akt.forEach(t),BDr=r($L,":"),$L.forEach(t),IDr=i(oi),Se=n(oi,"UL",{});var De=s(Se);Sw=n(De,"LI",{});var Gqe=s(Sw);e3e=n(Gqe,"STRONG",{});var Lkt=s(e3e);NDr=r(Lkt,"albert"),Lkt.forEach(t),qDr=r(Gqe," \u2014 "),lZ=n(Gqe,"A",{href:!0});var ykt=s(lZ);jDr=r(ykt,"FlaxAlbertForQuestionAnswering"),ykt.forEach(t),DDr=r(Gqe," (ALBERT model)"),Gqe.forEach(t),GDr=i(De),Rw=n(De,"LI",{});var Oqe=s(Rw);o3e=n(Oqe,"STRONG",{});var xkt=s(o3e);ODr=r(xkt,"bart"),xkt.forEach(t),VDr=r(Oqe," \u2014 "),iZ=n(Oqe,"A",{href:!0});var $kt=s(iZ);XDr=r($kt,"FlaxBartForQuestionAnswering"),$kt.forEach(t),zDr=r(Oqe," (BART model)"),Oqe.forEach(t),WDr=i(De),Pw=n(De,"LI",{});var Vqe=s(Pw);r3e=n(Vqe,"STRONG",{});var kkt=s(r3e);QDr=r(kkt,"bert"),kkt.forEach(t),HDr=r(Vqe," \u2014 "),dZ=n(Vqe,"A",{href:!0});var Skt=s(dZ);UDr=r(Skt,"FlaxBertForQuestionAnswering"),Skt.forEach(t),JDr=r(Vqe," (BERT model)"),Vqe.forEach(t),YDr=i(De),Bw=n(De,"LI",{});var Xqe=s(Bw);t3e=n(Xqe,"STRONG",{});var Rkt=s(t3e);KDr=r(Rkt,"big_bird"),Rkt.forEach(t),ZDr=r(Xqe," \u2014 "),cZ=n(Xqe,"A",{href:!0});var Pkt=s(cZ);eGr=r(Pkt,"FlaxBigBirdForQuestionAnswering"),Pkt.forEach(t),oGr=r(Xqe," (BigBird model)"),Xqe.forEach(t),rGr=i(De),Iw=n(De,"LI",{});var zqe=s(Iw);a3e=n(zqe,"STRONG",{});var Bkt=s(a3e);tGr=r(Bkt,"distilbert"),Bkt.forEach(t),aGr=r(zqe," \u2014 "),mZ=n(zqe,"A",{href:!0});var Ikt=s(mZ);nGr=r(Ikt,"FlaxDistilBertForQuestionAnswering"),Ikt.forEach(t),sGr=r(zqe," (DistilBERT model)"),zqe.forEach(t),lGr=i(De),Nw=n(De,"LI",{});var Wqe=s(Nw);n3e=n(Wqe,"STRONG",{});var Nkt=s(n3e);iGr=r(Nkt,"electra"),Nkt.forEach(t),dGr=r(Wqe," \u2014 "),fZ=n(Wqe,"A",{href:!0});var qkt=s(fZ);cGr=r(qkt,"FlaxElectraForQuestionAnswering"),qkt.forEach(t),mGr=r(Wqe," (ELECTRA model)"),Wqe.forEach(t),fGr=i(De),qw=n(De,"LI",{});var Qqe=s(qw);s3e=n(Qqe,"STRONG",{});var jkt=s(s3e);gGr=r(jkt,"mbart"),jkt.forEach(t),hGr=r(Qqe," \u2014 "),gZ=n(Qqe,"A",{href:!0});var Dkt=s(gZ);uGr=r(Dkt,"FlaxMBartForQuestionAnswering"),Dkt.forEach(t),pGr=r(Qqe," (mBART model)"),Qqe.forEach(t),_Gr=i(De),jw=n(De,"LI",{});var Hqe=s(jw);l3e=n(Hqe,"STRONG",{});var Gkt=s(l3e);bGr=r(Gkt,"roberta"),Gkt.forEach(t),vGr=r(Hqe," \u2014 "),hZ=n(Hqe,"A",{href:!0});var Okt=s(hZ);FGr=r(Okt,"FlaxRobertaForQuestionAnswering"),Okt.forEach(t),TGr=r(Hqe," (RoBERTa model)"),Hqe.forEach(t),MGr=i(De),Dw=n(De,"LI",{});var Uqe=s(Dw);i3e=n(Uqe,"STRONG",{});var Vkt=s(i3e);EGr=r(Vkt,"roformer"),Vkt.forEach(t),CGr=r(Uqe," \u2014 "),uZ=n(Uqe,"A",{href:!0});var Xkt=s(uZ);wGr=r(Xkt,"FlaxRoFormerForQuestionAnswering"),Xkt.forEach(t),AGr=r(Uqe," (RoFormer model)"),Uqe.forEach(t),LGr=i(De),Gw=n(De,"LI",{});var Jqe=s(Gw);d3e=n(Jqe,"STRONG",{});var zkt=s(d3e);yGr=r(zkt,"xlm-roberta"),zkt.forEach(t),xGr=r(Jqe," \u2014 "),pZ=n(Jqe,"A",{href:!0});var Wkt=s(pZ);$Gr=r(Wkt,"FlaxXLMRobertaForQuestionAnswering"),Wkt.forEach(t),kGr=r(Jqe," (XLM-RoBERTa model)"),Jqe.forEach(t),De.forEach(t),SGr=i(oi),T(Ow.$$.fragment,oi),oi.forEach(t),ei.forEach(t),cGe=i(m),Yc=n(m,"H2",{class:!0});var _Ve=s(Yc);Vw=n(_Ve,"A",{id:!0,class:!0,href:!0});var Qkt=s(Vw);c3e=n(Qkt,"SPAN",{});var Hkt=s(c3e);T(Cx.$$.fragment,Hkt),Hkt.forEach(t),Qkt.forEach(t),RGr=i(_Ve),m3e=n(_Ve,"SPAN",{});var Ukt=s(m3e);PGr=r(Ukt,"FlaxAutoModelForTokenClassification"),Ukt.forEach(t),_Ve.forEach(t),mGe=i(m),br=n(m,"DIV",{class:!0});var ri=s(br);T(wx.$$.fragment,ri),BGr=i(ri),Kc=n(ri,"P",{});var Poe=s(Kc);IGr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_Z=n(Poe,"A",{href:!0});var Jkt=s(_Z);NGr=r(Jkt,"from_pretrained()"),Jkt.forEach(t),qGr=r(Poe," class method or the "),bZ=n(Poe,"A",{href:!0});var Ykt=s(bZ);jGr=r(Ykt,"from_config()"),Ykt.forEach(t),DGr=r(Poe,` class
method.`),Poe.forEach(t),GGr=i(ri),Ax=n(ri,"P",{});var bVe=s(Ax);OGr=r(bVe,"This class cannot be instantiated directly using "),f3e=n(bVe,"CODE",{});var Kkt=s(f3e);VGr=r(Kkt,"__init__()"),Kkt.forEach(t),XGr=r(bVe," (throws an error)."),bVe.forEach(t),zGr=i(ri),Ht=n(ri,"DIV",{class:!0});var kL=s(Ht);T(Lx.$$.fragment,kL),WGr=i(kL),g3e=n(kL,"P",{});var Zkt=s(g3e);QGr=r(Zkt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zkt.forEach(t),HGr=i(kL),Zc=n(kL,"P",{});var Boe=s(Zc);UGr=r(Boe,`Note:
Loading a model from its configuration file does `),h3e=n(Boe,"STRONG",{});var eSt=s(h3e);JGr=r(eSt,"not"),eSt.forEach(t),YGr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=n(Boe,"A",{href:!0});var oSt=s(vZ);KGr=r(oSt,"from_pretrained()"),oSt.forEach(t),ZGr=r(Boe," to load the model weights."),Boe.forEach(t),eOr=i(kL),T(Xw.$$.fragment,kL),kL.forEach(t),oOr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(yx.$$.fragment,ti),rOr=i(ti),u3e=n(ti,"P",{});var rSt=s(u3e);tOr=r(rSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rSt.forEach(t),aOr=i(ti),Tn=n(ti,"P",{});var SL=s(Tn);nOr=r(SL,"The model class to instantiate is selected based on the "),p3e=n(SL,"CODE",{});var tSt=s(p3e);sOr=r(tSt,"model_type"),tSt.forEach(t),lOr=r(SL,` property of the config object (either
passed as an argument or loaded from `),_3e=n(SL,"CODE",{});var aSt=s(_3e);iOr=r(aSt,"pretrained_model_name_or_path"),aSt.forEach(t),dOr=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b3e=n(SL,"CODE",{});var nSt=s(b3e);cOr=r(nSt,"pretrained_model_name_or_path"),nSt.forEach(t),mOr=r(SL,":"),SL.forEach(t),fOr=i(ti),Oe=n(ti,"UL",{});var Fo=s(Oe);zw=n(Fo,"LI",{});var Yqe=s(zw);v3e=n(Yqe,"STRONG",{});var sSt=s(v3e);gOr=r(sSt,"albert"),sSt.forEach(t),hOr=r(Yqe," \u2014 "),FZ=n(Yqe,"A",{href:!0});var lSt=s(FZ);uOr=r(lSt,"FlaxAlbertForTokenClassification"),lSt.forEach(t),pOr=r(Yqe," (ALBERT model)"),Yqe.forEach(t),_Or=i(Fo),Ww=n(Fo,"LI",{});var Kqe=s(Ww);F3e=n(Kqe,"STRONG",{});var iSt=s(F3e);bOr=r(iSt,"bert"),iSt.forEach(t),vOr=r(Kqe," \u2014 "),TZ=n(Kqe,"A",{href:!0});var dSt=s(TZ);FOr=r(dSt,"FlaxBertForTokenClassification"),dSt.forEach(t),TOr=r(Kqe," (BERT model)"),Kqe.forEach(t),MOr=i(Fo),Qw=n(Fo,"LI",{});var Zqe=s(Qw);T3e=n(Zqe,"STRONG",{});var cSt=s(T3e);EOr=r(cSt,"big_bird"),cSt.forEach(t),COr=r(Zqe," \u2014 "),MZ=n(Zqe,"A",{href:!0});var mSt=s(MZ);wOr=r(mSt,"FlaxBigBirdForTokenClassification"),mSt.forEach(t),AOr=r(Zqe," (BigBird model)"),Zqe.forEach(t),LOr=i(Fo),Hw=n(Fo,"LI",{});var eje=s(Hw);M3e=n(eje,"STRONG",{});var fSt=s(M3e);yOr=r(fSt,"distilbert"),fSt.forEach(t),xOr=r(eje," \u2014 "),EZ=n(eje,"A",{href:!0});var gSt=s(EZ);$Or=r(gSt,"FlaxDistilBertForTokenClassification"),gSt.forEach(t),kOr=r(eje," (DistilBERT model)"),eje.forEach(t),SOr=i(Fo),Uw=n(Fo,"LI",{});var oje=s(Uw);E3e=n(oje,"STRONG",{});var hSt=s(E3e);ROr=r(hSt,"electra"),hSt.forEach(t),POr=r(oje," \u2014 "),CZ=n(oje,"A",{href:!0});var uSt=s(CZ);BOr=r(uSt,"FlaxElectraForTokenClassification"),uSt.forEach(t),IOr=r(oje," (ELECTRA model)"),oje.forEach(t),NOr=i(Fo),Jw=n(Fo,"LI",{});var rje=s(Jw);C3e=n(rje,"STRONG",{});var pSt=s(C3e);qOr=r(pSt,"roberta"),pSt.forEach(t),jOr=r(rje," \u2014 "),wZ=n(rje,"A",{href:!0});var _St=s(wZ);DOr=r(_St,"FlaxRobertaForTokenClassification"),_St.forEach(t),GOr=r(rje," (RoBERTa model)"),rje.forEach(t),OOr=i(Fo),Yw=n(Fo,"LI",{});var tje=s(Yw);w3e=n(tje,"STRONG",{});var bSt=s(w3e);VOr=r(bSt,"roformer"),bSt.forEach(t),XOr=r(tje," \u2014 "),AZ=n(tje,"A",{href:!0});var vSt=s(AZ);zOr=r(vSt,"FlaxRoFormerForTokenClassification"),vSt.forEach(t),WOr=r(tje," (RoFormer model)"),tje.forEach(t),QOr=i(Fo),Kw=n(Fo,"LI",{});var aje=s(Kw);A3e=n(aje,"STRONG",{});var FSt=s(A3e);HOr=r(FSt,"xlm-roberta"),FSt.forEach(t),UOr=r(aje," \u2014 "),LZ=n(aje,"A",{href:!0});var TSt=s(LZ);JOr=r(TSt,"FlaxXLMRobertaForTokenClassification"),TSt.forEach(t),YOr=r(aje," (XLM-RoBERTa model)"),aje.forEach(t),Fo.forEach(t),KOr=i(ti),T(Zw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),fGe=i(m),em=n(m,"H2",{class:!0});var vVe=s(em);eA=n(vVe,"A",{id:!0,class:!0,href:!0});var MSt=s(eA);L3e=n(MSt,"SPAN",{});var ESt=s(L3e);T(xx.$$.fragment,ESt),ESt.forEach(t),MSt.forEach(t),ZOr=i(vVe),y3e=n(vVe,"SPAN",{});var CSt=s(y3e);eVr=r(CSt,"FlaxAutoModelForMultipleChoice"),CSt.forEach(t),vVe.forEach(t),gGe=i(m),vr=n(m,"DIV",{class:!0});var ai=s(vr);T($x.$$.fragment,ai),oVr=i(ai),om=n(ai,"P",{});var Ioe=s(om);rVr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yZ=n(Ioe,"A",{href:!0});var wSt=s(yZ);tVr=r(wSt,"from_pretrained()"),wSt.forEach(t),aVr=r(Ioe," class method or the "),xZ=n(Ioe,"A",{href:!0});var ASt=s(xZ);nVr=r(ASt,"from_config()"),ASt.forEach(t),sVr=r(Ioe,` class
method.`),Ioe.forEach(t),lVr=i(ai),kx=n(ai,"P",{});var FVe=s(kx);iVr=r(FVe,"This class cannot be instantiated directly using "),x3e=n(FVe,"CODE",{});var LSt=s(x3e);dVr=r(LSt,"__init__()"),LSt.forEach(t),cVr=r(FVe," (throws an error)."),FVe.forEach(t),mVr=i(ai),Ut=n(ai,"DIV",{class:!0});var RL=s(Ut);T(Sx.$$.fragment,RL),fVr=i(RL),$3e=n(RL,"P",{});var ySt=s($3e);gVr=r(ySt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ySt.forEach(t),hVr=i(RL),rm=n(RL,"P",{});var Noe=s(rm);uVr=r(Noe,`Note:
Loading a model from its configuration file does `),k3e=n(Noe,"STRONG",{});var xSt=s(k3e);pVr=r(xSt,"not"),xSt.forEach(t),_Vr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=n(Noe,"A",{href:!0});var $St=s($Z);bVr=r($St,"from_pretrained()"),$St.forEach(t),vVr=r(Noe," to load the model weights."),Noe.forEach(t),FVr=i(RL),T(oA.$$.fragment,RL),RL.forEach(t),TVr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(Rx.$$.fragment,ni),MVr=i(ni),S3e=n(ni,"P",{});var kSt=s(S3e);EVr=r(kSt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kSt.forEach(t),CVr=i(ni),Mn=n(ni,"P",{});var PL=s(Mn);wVr=r(PL,"The model class to instantiate is selected based on the "),R3e=n(PL,"CODE",{});var SSt=s(R3e);AVr=r(SSt,"model_type"),SSt.forEach(t),LVr=r(PL,` property of the config object (either
passed as an argument or loaded from `),P3e=n(PL,"CODE",{});var RSt=s(P3e);yVr=r(RSt,"pretrained_model_name_or_path"),RSt.forEach(t),xVr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B3e=n(PL,"CODE",{});var PSt=s(B3e);$Vr=r(PSt,"pretrained_model_name_or_path"),PSt.forEach(t),kVr=r(PL,":"),PL.forEach(t),SVr=i(ni),Ve=n(ni,"UL",{});var To=s(Ve);rA=n(To,"LI",{});var nje=s(rA);I3e=n(nje,"STRONG",{});var BSt=s(I3e);RVr=r(BSt,"albert"),BSt.forEach(t),PVr=r(nje," \u2014 "),kZ=n(nje,"A",{href:!0});var ISt=s(kZ);BVr=r(ISt,"FlaxAlbertForMultipleChoice"),ISt.forEach(t),IVr=r(nje," (ALBERT model)"),nje.forEach(t),NVr=i(To),tA=n(To,"LI",{});var sje=s(tA);N3e=n(sje,"STRONG",{});var NSt=s(N3e);qVr=r(NSt,"bert"),NSt.forEach(t),jVr=r(sje," \u2014 "),SZ=n(sje,"A",{href:!0});var qSt=s(SZ);DVr=r(qSt,"FlaxBertForMultipleChoice"),qSt.forEach(t),GVr=r(sje," (BERT model)"),sje.forEach(t),OVr=i(To),aA=n(To,"LI",{});var lje=s(aA);q3e=n(lje,"STRONG",{});var jSt=s(q3e);VVr=r(jSt,"big_bird"),jSt.forEach(t),XVr=r(lje," \u2014 "),RZ=n(lje,"A",{href:!0});var DSt=s(RZ);zVr=r(DSt,"FlaxBigBirdForMultipleChoice"),DSt.forEach(t),WVr=r(lje," (BigBird model)"),lje.forEach(t),QVr=i(To),nA=n(To,"LI",{});var ije=s(nA);j3e=n(ije,"STRONG",{});var GSt=s(j3e);HVr=r(GSt,"distilbert"),GSt.forEach(t),UVr=r(ije," \u2014 "),PZ=n(ije,"A",{href:!0});var OSt=s(PZ);JVr=r(OSt,"FlaxDistilBertForMultipleChoice"),OSt.forEach(t),YVr=r(ije," (DistilBERT model)"),ije.forEach(t),KVr=i(To),sA=n(To,"LI",{});var dje=s(sA);D3e=n(dje,"STRONG",{});var VSt=s(D3e);ZVr=r(VSt,"electra"),VSt.forEach(t),eXr=r(dje," \u2014 "),BZ=n(dje,"A",{href:!0});var XSt=s(BZ);oXr=r(XSt,"FlaxElectraForMultipleChoice"),XSt.forEach(t),rXr=r(dje," (ELECTRA model)"),dje.forEach(t),tXr=i(To),lA=n(To,"LI",{});var cje=s(lA);G3e=n(cje,"STRONG",{});var zSt=s(G3e);aXr=r(zSt,"roberta"),zSt.forEach(t),nXr=r(cje," \u2014 "),IZ=n(cje,"A",{href:!0});var WSt=s(IZ);sXr=r(WSt,"FlaxRobertaForMultipleChoice"),WSt.forEach(t),lXr=r(cje," (RoBERTa model)"),cje.forEach(t),iXr=i(To),iA=n(To,"LI",{});var mje=s(iA);O3e=n(mje,"STRONG",{});var QSt=s(O3e);dXr=r(QSt,"roformer"),QSt.forEach(t),cXr=r(mje," \u2014 "),NZ=n(mje,"A",{href:!0});var HSt=s(NZ);mXr=r(HSt,"FlaxRoFormerForMultipleChoice"),HSt.forEach(t),fXr=r(mje," (RoFormer model)"),mje.forEach(t),gXr=i(To),dA=n(To,"LI",{});var fje=s(dA);V3e=n(fje,"STRONG",{});var USt=s(V3e);hXr=r(USt,"xlm-roberta"),USt.forEach(t),uXr=r(fje," \u2014 "),qZ=n(fje,"A",{href:!0});var JSt=s(qZ);pXr=r(JSt,"FlaxXLMRobertaForMultipleChoice"),JSt.forEach(t),_Xr=r(fje," (XLM-RoBERTa model)"),fje.forEach(t),To.forEach(t),bXr=i(ni),T(cA.$$.fragment,ni),ni.forEach(t),ai.forEach(t),hGe=i(m),tm=n(m,"H2",{class:!0});var TVe=s(tm);mA=n(TVe,"A",{id:!0,class:!0,href:!0});var YSt=s(mA);X3e=n(YSt,"SPAN",{});var KSt=s(X3e);T(Px.$$.fragment,KSt),KSt.forEach(t),YSt.forEach(t),vXr=i(TVe),z3e=n(TVe,"SPAN",{});var ZSt=s(z3e);FXr=r(ZSt,"FlaxAutoModelForNextSentencePrediction"),ZSt.forEach(t),TVe.forEach(t),uGe=i(m),Fr=n(m,"DIV",{class:!0});var si=s(Fr);T(Bx.$$.fragment,si),TXr=i(si),am=n(si,"P",{});var qoe=s(am);MXr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jZ=n(qoe,"A",{href:!0});var eRt=s(jZ);EXr=r(eRt,"from_pretrained()"),eRt.forEach(t),CXr=r(qoe," class method or the "),DZ=n(qoe,"A",{href:!0});var oRt=s(DZ);wXr=r(oRt,"from_config()"),oRt.forEach(t),AXr=r(qoe,` class
method.`),qoe.forEach(t),LXr=i(si),Ix=n(si,"P",{});var MVe=s(Ix);yXr=r(MVe,"This class cannot be instantiated directly using "),W3e=n(MVe,"CODE",{});var rRt=s(W3e);xXr=r(rRt,"__init__()"),rRt.forEach(t),$Xr=r(MVe," (throws an error)."),MVe.forEach(t),kXr=i(si),Jt=n(si,"DIV",{class:!0});var BL=s(Jt);T(Nx.$$.fragment,BL),SXr=i(BL),Q3e=n(BL,"P",{});var tRt=s(Q3e);RXr=r(tRt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tRt.forEach(t),PXr=i(BL),nm=n(BL,"P",{});var joe=s(nm);BXr=r(joe,`Note:
Loading a model from its configuration file does `),H3e=n(joe,"STRONG",{});var aRt=s(H3e);IXr=r(aRt,"not"),aRt.forEach(t),NXr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=n(joe,"A",{href:!0});var nRt=s(GZ);qXr=r(nRt,"from_pretrained()"),nRt.forEach(t),jXr=r(joe," to load the model weights."),joe.forEach(t),DXr=i(BL),T(fA.$$.fragment,BL),BL.forEach(t),GXr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(qx.$$.fragment,li),OXr=i(li),U3e=n(li,"P",{});var sRt=s(U3e);VXr=r(sRt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sRt.forEach(t),XXr=i(li),En=n(li,"P",{});var IL=s(En);zXr=r(IL,"The model class to instantiate is selected based on the "),J3e=n(IL,"CODE",{});var lRt=s(J3e);WXr=r(lRt,"model_type"),lRt.forEach(t),QXr=r(IL,` property of the config object (either
passed as an argument or loaded from `),Y3e=n(IL,"CODE",{});var iRt=s(Y3e);HXr=r(iRt,"pretrained_model_name_or_path"),iRt.forEach(t),UXr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=n(IL,"CODE",{});var dRt=s(K3e);JXr=r(dRt,"pretrained_model_name_or_path"),dRt.forEach(t),YXr=r(IL,":"),IL.forEach(t),KXr=i(li),Z3e=n(li,"UL",{});var cRt=s(Z3e);gA=n(cRt,"LI",{});var gje=s(gA);e0e=n(gje,"STRONG",{});var mRt=s(e0e);ZXr=r(mRt,"bert"),mRt.forEach(t),ezr=r(gje," \u2014 "),OZ=n(gje,"A",{href:!0});var fRt=s(OZ);ozr=r(fRt,"FlaxBertForNextSentencePrediction"),fRt.forEach(t),rzr=r(gje," (BERT model)"),gje.forEach(t),cRt.forEach(t),tzr=i(li),T(hA.$$.fragment,li),li.forEach(t),si.forEach(t),pGe=i(m),sm=n(m,"H2",{class:!0});var EVe=s(sm);uA=n(EVe,"A",{id:!0,class:!0,href:!0});var gRt=s(uA);o0e=n(gRt,"SPAN",{});var hRt=s(o0e);T(jx.$$.fragment,hRt),hRt.forEach(t),gRt.forEach(t),azr=i(EVe),r0e=n(EVe,"SPAN",{});var uRt=s(r0e);nzr=r(uRt,"FlaxAutoModelForImageClassification"),uRt.forEach(t),EVe.forEach(t),_Ge=i(m),Tr=n(m,"DIV",{class:!0});var ii=s(Tr);T(Dx.$$.fragment,ii),szr=i(ii),lm=n(ii,"P",{});var Doe=s(lm);lzr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VZ=n(Doe,"A",{href:!0});var pRt=s(VZ);izr=r(pRt,"from_pretrained()"),pRt.forEach(t),dzr=r(Doe," class method or the "),XZ=n(Doe,"A",{href:!0});var _Rt=s(XZ);czr=r(_Rt,"from_config()"),_Rt.forEach(t),mzr=r(Doe,` class
method.`),Doe.forEach(t),fzr=i(ii),Gx=n(ii,"P",{});var CVe=s(Gx);gzr=r(CVe,"This class cannot be instantiated directly using "),t0e=n(CVe,"CODE",{});var bRt=s(t0e);hzr=r(bRt,"__init__()"),bRt.forEach(t),uzr=r(CVe," (throws an error)."),CVe.forEach(t),pzr=i(ii),Yt=n(ii,"DIV",{class:!0});var NL=s(Yt);T(Ox.$$.fragment,NL),_zr=i(NL),a0e=n(NL,"P",{});var vRt=s(a0e);bzr=r(vRt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vRt.forEach(t),vzr=i(NL),im=n(NL,"P",{});var Goe=s(im);Fzr=r(Goe,`Note:
Loading a model from its configuration file does `),n0e=n(Goe,"STRONG",{});var FRt=s(n0e);Tzr=r(FRt,"not"),FRt.forEach(t),Mzr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=n(Goe,"A",{href:!0});var TRt=s(zZ);Ezr=r(TRt,"from_pretrained()"),TRt.forEach(t),Czr=r(Goe," to load the model weights."),Goe.forEach(t),wzr=i(NL),T(pA.$$.fragment,NL),NL.forEach(t),Azr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(Vx.$$.fragment,di),Lzr=i(di),s0e=n(di,"P",{});var MRt=s(s0e);yzr=r(MRt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MRt.forEach(t),xzr=i(di),Cn=n(di,"P",{});var qL=s(Cn);$zr=r(qL,"The model class to instantiate is selected based on the "),l0e=n(qL,"CODE",{});var ERt=s(l0e);kzr=r(ERt,"model_type"),ERt.forEach(t),Szr=r(qL,` property of the config object (either
passed as an argument or loaded from `),i0e=n(qL,"CODE",{});var CRt=s(i0e);Rzr=r(CRt,"pretrained_model_name_or_path"),CRt.forEach(t),Pzr=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d0e=n(qL,"CODE",{});var wRt=s(d0e);Bzr=r(wRt,"pretrained_model_name_or_path"),wRt.forEach(t),Izr=r(qL,":"),qL.forEach(t),Nzr=i(di),Xx=n(di,"UL",{});var wVe=s(Xx);_A=n(wVe,"LI",{});var hje=s(_A);c0e=n(hje,"STRONG",{});var ARt=s(c0e);qzr=r(ARt,"beit"),ARt.forEach(t),jzr=r(hje," \u2014 "),WZ=n(hje,"A",{href:!0});var LRt=s(WZ);Dzr=r(LRt,"FlaxBeitForImageClassification"),LRt.forEach(t),Gzr=r(hje," (BEiT model)"),hje.forEach(t),Ozr=i(wVe),bA=n(wVe,"LI",{});var uje=s(bA);m0e=n(uje,"STRONG",{});var yRt=s(m0e);Vzr=r(yRt,"vit"),yRt.forEach(t),Xzr=r(uje," \u2014 "),QZ=n(uje,"A",{href:!0});var xRt=s(QZ);zzr=r(xRt,"FlaxViTForImageClassification"),xRt.forEach(t),Wzr=r(uje," (ViT model)"),uje.forEach(t),wVe.forEach(t),Qzr=i(di),T(vA.$$.fragment,di),di.forEach(t),ii.forEach(t),bGe=i(m),dm=n(m,"H2",{class:!0});var AVe=s(dm);FA=n(AVe,"A",{id:!0,class:!0,href:!0});var $Rt=s(FA);f0e=n($Rt,"SPAN",{});var kRt=s(f0e);T(zx.$$.fragment,kRt),kRt.forEach(t),$Rt.forEach(t),Hzr=i(AVe),g0e=n(AVe,"SPAN",{});var SRt=s(g0e);Uzr=r(SRt,"FlaxAutoModelForVision2Seq"),SRt.forEach(t),AVe.forEach(t),vGe=i(m),Mr=n(m,"DIV",{class:!0});var ci=s(Mr);T(Wx.$$.fragment,ci),Jzr=i(ci),cm=n(ci,"P",{});var Ooe=s(cm);Yzr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HZ=n(Ooe,"A",{href:!0});var RRt=s(HZ);Kzr=r(RRt,"from_pretrained()"),RRt.forEach(t),Zzr=r(Ooe," class method or the "),UZ=n(Ooe,"A",{href:!0});var PRt=s(UZ);eWr=r(PRt,"from_config()"),PRt.forEach(t),oWr=r(Ooe,` class
method.`),Ooe.forEach(t),rWr=i(ci),Qx=n(ci,"P",{});var LVe=s(Qx);tWr=r(LVe,"This class cannot be instantiated directly using "),h0e=n(LVe,"CODE",{});var BRt=s(h0e);aWr=r(BRt,"__init__()"),BRt.forEach(t),nWr=r(LVe," (throws an error)."),LVe.forEach(t),sWr=i(ci),Kt=n(ci,"DIV",{class:!0});var jL=s(Kt);T(Hx.$$.fragment,jL),lWr=i(jL),u0e=n(jL,"P",{});var IRt=s(u0e);iWr=r(IRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),IRt.forEach(t),dWr=i(jL),mm=n(jL,"P",{});var Voe=s(mm);cWr=r(Voe,`Note:
Loading a model from its configuration file does `),p0e=n(Voe,"STRONG",{});var NRt=s(p0e);mWr=r(NRt,"not"),NRt.forEach(t),fWr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JZ=n(Voe,"A",{href:!0});var qRt=s(JZ);gWr=r(qRt,"from_pretrained()"),qRt.forEach(t),hWr=r(Voe," to load the model weights."),Voe.forEach(t),uWr=i(jL),T(TA.$$.fragment,jL),jL.forEach(t),pWr=i(ci),Jr=n(ci,"DIV",{class:!0});var mi=s(Jr);T(Ux.$$.fragment,mi),_Wr=i(mi),_0e=n(mi,"P",{});var jRt=s(_0e);bWr=r(jRt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jRt.forEach(t),vWr=i(mi),wn=n(mi,"P",{});var DL=s(wn);FWr=r(DL,"The model class to instantiate is selected based on the "),b0e=n(DL,"CODE",{});var DRt=s(b0e);TWr=r(DRt,"model_type"),DRt.forEach(t),MWr=r(DL,` property of the config object (either
passed as an argument or loaded from `),v0e=n(DL,"CODE",{});var GRt=s(v0e);EWr=r(GRt,"pretrained_model_name_or_path"),GRt.forEach(t),CWr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F0e=n(DL,"CODE",{});var ORt=s(F0e);wWr=r(ORt,"pretrained_model_name_or_path"),ORt.forEach(t),AWr=r(DL,":"),DL.forEach(t),LWr=i(mi),T0e=n(mi,"UL",{});var VRt=s(T0e);MA=n(VRt,"LI",{});var pje=s(MA);M0e=n(pje,"STRONG",{});var XRt=s(M0e);yWr=r(XRt,"vision-encoder-decoder"),XRt.forEach(t),xWr=r(pje," \u2014 "),YZ=n(pje,"A",{href:!0});var zRt=s(YZ);$Wr=r(zRt,"FlaxVisionEncoderDecoderModel"),zRt.forEach(t),kWr=r(pje," (Vision Encoder decoder model)"),pje.forEach(t),VRt.forEach(t),SWr=i(mi),T(EA.$$.fragment,mi),mi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(UBt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Ln,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(vm,"id","extending-the-auto-classes"),c(vm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vm,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Tm,"id","transformers.AutoConfig"),c(Tm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tm,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(pk,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(_k,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(Fk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(wk,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c($k,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(Sk,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(Pk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Nk,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(qk,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(jk,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(Ok,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(Qk,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(Uk,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(eS,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(iS,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(dS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(uS,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(bS,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(vS,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(FS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(MS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(ES,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(wS,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(xS,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c($S,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(kS,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(SS,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(RS,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(PS,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(BS,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(IS,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(NS,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(qS,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(jS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(DS,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(GS,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(OS,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(VS,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(XS,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(zS,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(WS,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(QS,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(HS,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(US,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(YS,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(KS,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(ZS,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(eR,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(oR,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(rR,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(tR,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(aR,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(nR,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(sR,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(lR,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(iR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(dR,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(cR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(mR,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(fR,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(gR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(hR,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(uR,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(pR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(_R,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(bR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(vR,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(FR,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xg,"id","transformers.AutoTokenizer"),c(xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xg,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(TR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(MR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(ER,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(wR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(AR,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(LR,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(yR,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(xR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c($R,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(kR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(SR,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(RR,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(PR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(BR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(IR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(NR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(qR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(jR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(DR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(GR,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(OR,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(VR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(XR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(zR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(WR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(QR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(HR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(UR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(JR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(YR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(KR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(ZR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(eP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(oP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(rP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(tP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(aP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(nP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(sP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(lP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(iP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(dP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(cP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(mP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(fP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(gP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(hP,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(uP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(pP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(_P,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(bP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TP,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(MP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(EP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CP,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(wP,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(AP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(LP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c($P,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(kP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(SP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(RP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(PP,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(BP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(IP,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(NP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(qP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(jP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(DP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(GP,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(OP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(VP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(XP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(zP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(WP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(QP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(HP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(UP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(JP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(YP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(KP,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(ZP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(oB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(rB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(tB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(nB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(lB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(dB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(fB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(pB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(bB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(vB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(FB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(TB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(EB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(CB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(wB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(AB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(LB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(xB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c($B,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(kB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(SB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(RB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(PB,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(BB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(IB,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(NB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(qB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(jB,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(DB,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(GB,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(OB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(VB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(XB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(zB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(WB,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(QB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(HB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(UB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(JB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(YB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(KB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(ZB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(eI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(oI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(rI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(tI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(aI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"id","transformers.AutoFeatureExtractor"),c(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mh,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(nI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(sI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(lI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(iI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(cI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(fI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(gI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(hI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(uI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(pI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(_I,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(bI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(vI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(FI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(TI,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(MI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(EI,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(CI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(wI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(AI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yI,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(xI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c($I,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(SI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(RI,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(PI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(BI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(II,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wh,"id","transformers.AutoProcessor"),c(Wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(NI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(qI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(jI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(DI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(GI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(OI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(zI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(WI,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(QI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UI,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(JI,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(YI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gu,"id","transformers.AutoModel"),c(gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gu,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(eN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(aN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(nN,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(sN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(lN,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(iN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(dN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(cN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(mN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(fN,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(gN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(hN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(uN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(pN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(_N,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(bN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(vN,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(FN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(TN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(MN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(EN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(CN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(wN,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(AN,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(LN,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(yN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(xN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c($N,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(kN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(SN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(RN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(PN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(BN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(IN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(NN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(qN,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(jN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(DN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(GN,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(ON,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(VN,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(XN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(zN,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(WN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(QN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(HN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(UN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(JN,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(YN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(KN,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(ZN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(eq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(oq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(rq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(tq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(aq,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(nq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(sq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(lq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(iq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(dq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(cq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(mq,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(fq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(gq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(hq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(uq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(pq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(_q,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(bq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(vq,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(Tq,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(Mq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(wq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(yq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(xq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c($q,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(kq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(Sq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(Rq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(Pq,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Bq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Iq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Nq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(qq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(jq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Gq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(zq,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(Qq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(Hq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(Uq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Jq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Yq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Kq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(Zq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(ej,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g_,"id","transformers.AutoModelForPreTraining"),c(g_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g_,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(oj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(nj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(sj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(lj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(ij,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(dj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(cj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(mj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(fj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(gj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(hj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(uj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(pj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(_j,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(bj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(vj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Fj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Tj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Mj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Ej,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Cj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(wj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Aj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Lj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(yj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(xj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c($j,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(kj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Sj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Rj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Pj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Bj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Ij,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Nj,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(qj,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(jj,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Dj,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Gj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Oj,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(Vj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Xj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Wj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sb,"id","transformers.AutoModelForCausalLM"),c(sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sb,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(Qj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(Yj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(Kj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Zj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(eD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(oD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(rD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(tD,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(aD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(nD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(sD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(lD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(iD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(dD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(cD,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(mD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(fD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(gD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(hD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(uD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(pD,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(_D,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(bD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(vD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(FD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(TD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(MD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(ED,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(CD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(wD,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(AD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(LD,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(yD,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(xD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($D,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(kD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(SD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(RD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hb,"id","transformers.AutoModelForMaskedLM"),c(Hb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hb,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(PD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ID,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ND,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(qD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(DD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(GD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(OD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(VD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(XD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(zD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(WD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(QD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(HD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(UD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(JD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(YD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(KD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ZD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(eG,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(oG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(tG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(aG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(sG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(lG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(iG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(dG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(cG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(mG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(fG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(gG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(hG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(pG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_G,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P2,"id","transformers.AutoModelForSeq2SeqLM"),c(P2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P2,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(bG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(MG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(EG,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(CG,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(wG,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(AG,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(LG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(yG,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(xG,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c($G,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(kG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(SG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(RG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(PG,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(BG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(IG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ev,"id","transformers.AutoModelForSequenceClassification"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(NG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(GG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(OG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(VG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(XG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(zG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(WG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(QG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(HG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(UG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(JG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(YG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(KG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(ZG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(eO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(oO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(rO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(tO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(aO,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(nO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(sO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(lO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(iO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(dO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(cO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(mO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(fO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(gO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(hO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(uO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(pO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(_O,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(bO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(vO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(FO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(TO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(MO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(EO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(CO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(wO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(AO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(LO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(yO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(xO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c($O,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(kO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(SO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yv,"id","transformers.AutoModelForMultipleChoice"),c(Yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yv,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(RO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(NO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(qO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(jO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(DO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(GO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(OO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(VO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(XO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(zO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(WO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(QO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(HO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(UO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(JO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(YO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(KO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(ZO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(eV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(oV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(rV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(tV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(aV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(nV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(sV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(lV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(iV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(dV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(cV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($F,"id","transformers.AutoModelForNextSentencePrediction"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(mV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(uV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(pV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(_V,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(bV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForTokenClassification"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(vV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(EV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(CV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(wV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(AV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(LV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(yV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(xV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c($V,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(kV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(SV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(RV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(PV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(BV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(IV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(NV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(qV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(jV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(DV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(GV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(OV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(VV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(XV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(zV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(WV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(QV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(HV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(UV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(JV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(YV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(KV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(ZV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(eX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(oX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E1,"id","transformers.AutoModelForQuestionAnswering"),c(E1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E1,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(rX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(sX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(lX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(iX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(dX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(cX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(mX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(fX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(gX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(hX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(uX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(pX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(_X,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(bX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(vX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(FX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(TX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(MX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(EX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(CX,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(wX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(AX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(LX,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(yX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(xX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c($X,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(kX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(SX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(RX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(PX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(BX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(IX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(NX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(qX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(jX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(DX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(GX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(OX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(VX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(XX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gT,"id","transformers.AutoModelForTableQuestionAnswering"),c(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.AutoModelForImageClassification"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(UX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KX,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(ZX,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(ez,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(oz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(rz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(tz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(az,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(nz,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(sz,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(lz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(iz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(dz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(cz,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(mz,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(fz,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(gz,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(hz,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(uz,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(pz,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.AutoModelForVision2Seq"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(_z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fz,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jT,"id","transformers.AutoModelForAudioClassification"),c(jT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jT,"href","#transformers.AutoModelForAudioClassification"),c(md,"class","relative group"),c(Tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(wz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(Az,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(Lz,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(yz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(xz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c($z,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(kz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(Sz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KT,"id","transformers.AutoModelForAudioFrameClassification"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(Rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(Nz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(qz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(jz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(Dz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.AutoModelForCTC"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.AutoModelForCTC"),c(_d,"class","relative group"),c(Gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(zz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(Wz,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(Qz,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(Hz,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Uz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Jz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Yz,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Kz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Zz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.AutoModelForSpeechSeq2Seq"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(eW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(aW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LM,"id","transformers.AutoModelForAudioXVector"),c(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LM,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(nW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(dW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(cW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(mW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(fW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.AutoModelForMaskedImageModeling"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(gW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pW,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(_W,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(bW,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VM,"id","transformers.AutoModelForObjectDetection"),c(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VM,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(vW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(EW,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.AutoModelForImageSegmentation"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(CW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.AutoModelForSemanticSegmentation"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(yW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(SW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(RW,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(PW,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i4,"id","transformers.AutoModelForInstanceSegmentation"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(BW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qW,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g4,"id","transformers.TFAutoModel"),c(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g4,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(jW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(VW,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(XW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(zW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(WW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(QW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(HW,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(UW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(JW,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(YW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(KW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(ZW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(eQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(oQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(rQ,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(tQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(aQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(nQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(sQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(lQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(iQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(dQ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(cQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(mQ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(fQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(gQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(hQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(uQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(pQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(_Q,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(bQ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(vQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(FQ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(TQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(MQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(EQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(CQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(wQ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(AQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(LQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(yQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(xQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c($Q,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(kQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(SQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(RQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(PQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(BQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.TFAutoModelForPreTraining"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(IQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(DQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(GQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(OQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(VQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(XQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(WQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(QQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(HQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(UQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(JQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(YQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(KQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(ZQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(eH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(oH,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(rH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(tH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(aH,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(nH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(sH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(lH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.TFAutoModelForCausalLM"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c(iH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(fH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(gH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(hH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(uH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(pH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(_H,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(bH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(vH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(FH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(TH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(MH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(EH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.TFAutoModelForImageClassification"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LH,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(yH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(xH,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c($H,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.TFAutoModelForMaskedLM"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(kH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(BH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(IH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(NH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(qH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(jH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(DH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(GH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(OH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(VH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(XH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(zH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(WH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(QH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(HH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(UH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(JH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(YH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(KH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ZH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(eU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(aU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(nU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(sU,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(lU,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(iU,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(dU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(cU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(mU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(fU,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.TFAutoModelForSequenceClassification"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(gU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(_U,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(bU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(vU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(FU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(TU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(MU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(EU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(CU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(wU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(AU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(LU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(yU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(xU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c($U,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(kU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(SU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(RU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(PU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(BU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(IU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(NU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(qU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(jU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(DU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(GU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.TFAutoModelForMultipleChoice"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(OU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(WU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(QU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(HU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(UU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(JU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(YU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(KU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(ZU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(eJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(oJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(rJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(tJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(aJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(nJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(sJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(lJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(fc,"class","relative group"),c(iJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(fJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(uc,"class","relative group"),c(gJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.TFAutoModelForTokenClassification"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(_J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(TJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(MJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(EJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(CJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(wJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(AJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(LJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(yJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(xJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c($J,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(kJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(SJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(RJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(PJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(BJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(IJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(NJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(qJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(jJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f3,"id","transformers.TFAutoModelForQuestionAnswering"),c(f3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(DJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(XJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(zJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(WJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(QJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(HJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(UJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(JJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(YJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(KJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(ZJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(eY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(oY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(rY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(tY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(aY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(nY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(sY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(lY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(iY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B3,"id","transformers.TFAutoModelForVision2Seq"),c(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B3,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(dY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(j3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Lc,"class","relative group"),c(gY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.FlaxAutoModel"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(_Y,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(TY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(MY,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(EY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(CY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(wY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(AY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(LY,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(yY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(xY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c($Y,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(kY,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(SY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(RY,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(PY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(BY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(IY,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(NY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(qY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(jY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(DY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(GY,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(OY,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(VY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(XY,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(zY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b0,"id","transformers.FlaxAutoModelForCausalLM"),c(b0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(WY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(JY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(YY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(KY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(ZY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(eK,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(oK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(rK,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(tK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(aK,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k0,"id","transformers.FlaxAutoModelForPreTraining"),c(k0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(dK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(cK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(mK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(fK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(gK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(uK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(pK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(_K,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(bK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(vK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W0,"id","transformers.FlaxAutoModelForMaskedLM"),c(W0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(FK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(CK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(wK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(AK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(LK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(yK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(xK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($K,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(kK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(SK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(RK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(NK,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(qK,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(jK,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(DK,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(GK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(VK,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(XK,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_w,"id","transformers.FlaxAutoModelForSequenceClassification"),c(_w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_w,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(zK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(UK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(JK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(YK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(KK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(ZK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(eZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(oZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(rZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(tZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($w,"id","transformers.FlaxAutoModelForQuestionAnswering"),c($w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($w,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(aZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(iZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(dZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(cZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(mZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(fZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(gZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(hZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(uZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(pZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vw,"id","transformers.FlaxAutoModelForTokenClassification"),c(Vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(_Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(TZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(MZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(EZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(CZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(wZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(AZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(LZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(eA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(em,"class","relative group"),c(yZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(SZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(RZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(PZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(BZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(IZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(NZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(qZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(mA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tm,"class","relative group"),c(jZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uA,"id","transformers.FlaxAutoModelForImageClassification"),c(uA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uA,"href","#transformers.FlaxAutoModelForImageClassification"),c(sm,"class","relative group"),c(VZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(QZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FA,"id","transformers.FlaxAutoModelForVision2Seq"),c(FA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(dm,"class","relative group"),c(HZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YZ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,fi),b(m,um,_),b(m,rt,_),e(rt,gi),e(rt,hi),e(hi,GL),e(rt,pm),b(m,Ge,_),b(m,We,_),e(We,ui),e(We,Ln),e(Ln,OL),e(We,yn),e(We,xn),e(xn,VL),e(We,pi),e(We,$n),e($n,XL),e(We,_i),b(m,_m,_),M(Ca,m,_),b(m,Qe,_),b(m,Ae,_),e(Ae,ck),e(Ae,bi),e(bi,mk),e(Ae,fk),b(m,Eo,_),b(m,wa,_),e(wa,gk),e(wa,bm),e(bm,hk),e(wa,yVe),b(m,_je,_),b(m,vi,_),e(vi,vm),e(vm,Xoe),M(zL,Xoe,null),e(vi,xVe),e(vi,zoe),e(zoe,$Ve),b(m,bje,_),b(m,kn,_),e(kn,kVe),e(kn,Woe),e(Woe,SVe),e(kn,RVe),e(kn,Qoe),e(Qoe,PVe),e(kn,BVe),b(m,vje,_),M(WL,m,_),b(m,Fje,_),b(m,uk,_),e(uk,IVe),b(m,Tje,_),M(Fm,m,_),b(m,Mje,_),b(m,Fi,_),e(Fi,Tm),e(Tm,Hoe),M(QL,Hoe,null),e(Fi,NVe),e(Fi,Uoe),e(Uoe,qVe),b(m,Eje,_),b(m,Co,_),M(HL,Co,null),e(Co,jVe),e(Co,UL),e(UL,DVe),e(UL,pk),e(pk,GVe),e(UL,OVe),e(Co,VVe),e(Co,JL),e(JL,XVe),e(JL,Joe),e(Joe,zVe),e(JL,WVe),e(Co,QVe),e(Co,Er),M(YL,Er,null),e(Er,HVe),e(Er,Yoe),e(Yoe,UVe),e(Er,JVe),e(Er,Ti),e(Ti,YVe),e(Ti,Koe),e(Koe,KVe),e(Ti,ZVe),e(Ti,Zoe),e(Zoe,eXe),e(Ti,oXe),e(Er,rXe),e(Er,A),e(A,Mm),e(Mm,ere),e(ere,tXe),e(Mm,aXe),e(Mm,_k),e(_k,nXe),e(Mm,sXe),e(A,lXe),e(A,Em),e(Em,ore),e(ore,iXe),e(Em,dXe),e(Em,bk),e(bk,cXe),e(Em,mXe),e(A,fXe),e(A,Cm),e(Cm,rre),e(rre,gXe),e(Cm,hXe),e(Cm,vk),e(vk,uXe),e(Cm,pXe),e(A,_Xe),e(A,wm),e(wm,tre),e(tre,bXe),e(wm,vXe),e(wm,Fk),e(Fk,FXe),e(wm,TXe),e(A,MXe),e(A,Am),e(Am,are),e(are,EXe),e(Am,CXe),e(Am,Tk),e(Tk,wXe),e(Am,AXe),e(A,LXe),e(A,Lm),e(Lm,nre),e(nre,yXe),e(Lm,xXe),e(Lm,Mk),e(Mk,$Xe),e(Lm,kXe),e(A,SXe),e(A,ym),e(ym,sre),e(sre,RXe),e(ym,PXe),e(ym,Ek),e(Ek,BXe),e(ym,IXe),e(A,NXe),e(A,xm),e(xm,lre),e(lre,qXe),e(xm,jXe),e(xm,Ck),e(Ck,DXe),e(xm,GXe),e(A,OXe),e(A,$m),e($m,ire),e(ire,VXe),e($m,XXe),e($m,wk),e(wk,zXe),e($m,WXe),e(A,QXe),e(A,km),e(km,dre),e(dre,HXe),e(km,UXe),e(km,Ak),e(Ak,JXe),e(km,YXe),e(A,KXe),e(A,Sm),e(Sm,cre),e(cre,ZXe),e(Sm,eze),e(Sm,Lk),e(Lk,oze),e(Sm,rze),e(A,tze),e(A,Rm),e(Rm,mre),e(mre,aze),e(Rm,nze),e(Rm,yk),e(yk,sze),e(Rm,lze),e(A,ize),e(A,Pm),e(Pm,fre),e(fre,dze),e(Pm,cze),e(Pm,xk),e(xk,mze),e(Pm,fze),e(A,gze),e(A,Bm),e(Bm,gre),e(gre,hze),e(Bm,uze),e(Bm,$k),e($k,pze),e(Bm,_ze),e(A,bze),e(A,Im),e(Im,hre),e(hre,vze),e(Im,Fze),e(Im,kk),e(kk,Tze),e(Im,Mze),e(A,Eze),e(A,Nm),e(Nm,ure),e(ure,Cze),e(Nm,wze),e(Nm,Sk),e(Sk,Aze),e(Nm,Lze),e(A,yze),e(A,qm),e(qm,pre),e(pre,xze),e(qm,$ze),e(qm,Rk),e(Rk,kze),e(qm,Sze),e(A,Rze),e(A,jm),e(jm,_re),e(_re,Pze),e(jm,Bze),e(jm,Pk),e(Pk,Ize),e(jm,Nze),e(A,qze),e(A,Dm),e(Dm,bre),e(bre,jze),e(Dm,Dze),e(Dm,Bk),e(Bk,Gze),e(Dm,Oze),e(A,Vze),e(A,Gm),e(Gm,vre),e(vre,Xze),e(Gm,zze),e(Gm,Ik),e(Ik,Wze),e(Gm,Qze),e(A,Hze),e(A,Om),e(Om,Fre),e(Fre,Uze),e(Om,Jze),e(Om,Nk),e(Nk,Yze),e(Om,Kze),e(A,Zze),e(A,Vm),e(Vm,Tre),e(Tre,eWe),e(Vm,oWe),e(Vm,qk),e(qk,rWe),e(Vm,tWe),e(A,aWe),e(A,Xm),e(Xm,Mre),e(Mre,nWe),e(Xm,sWe),e(Xm,jk),e(jk,lWe),e(Xm,iWe),e(A,dWe),e(A,zm),e(zm,Ere),e(Ere,cWe),e(zm,mWe),e(zm,Dk),e(Dk,fWe),e(zm,gWe),e(A,hWe),e(A,Wm),e(Wm,Cre),e(Cre,uWe),e(Wm,pWe),e(Wm,Gk),e(Gk,_We),e(Wm,bWe),e(A,vWe),e(A,Qm),e(Qm,wre),e(wre,FWe),e(Qm,TWe),e(Qm,Ok),e(Ok,MWe),e(Qm,EWe),e(A,CWe),e(A,Hm),e(Hm,Are),e(Are,wWe),e(Hm,AWe),e(Hm,Vk),e(Vk,LWe),e(Hm,yWe),e(A,xWe),e(A,Um),e(Um,Lre),e(Lre,$We),e(Um,kWe),e(Um,Xk),e(Xk,SWe),e(Um,RWe),e(A,PWe),e(A,Jm),e(Jm,yre),e(yre,BWe),e(Jm,IWe),e(Jm,zk),e(zk,NWe),e(Jm,qWe),e(A,jWe),e(A,Ym),e(Ym,xre),e(xre,DWe),e(Ym,GWe),e(Ym,Wk),e(Wk,OWe),e(Ym,VWe),e(A,XWe),e(A,Km),e(Km,$re),e($re,zWe),e(Km,WWe),e(Km,Qk),e(Qk,QWe),e(Km,HWe),e(A,UWe),e(A,Zm),e(Zm,kre),e(kre,JWe),e(Zm,YWe),e(Zm,Hk),e(Hk,KWe),e(Zm,ZWe),e(A,eQe),e(A,ef),e(ef,Sre),e(Sre,oQe),e(ef,rQe),e(ef,Uk),e(Uk,tQe),e(ef,aQe),e(A,nQe),e(A,of),e(of,Rre),e(Rre,sQe),e(of,lQe),e(of,Jk),e(Jk,iQe),e(of,dQe),e(A,cQe),e(A,rf),e(rf,Pre),e(Pre,mQe),e(rf,fQe),e(rf,Yk),e(Yk,gQe),e(rf,hQe),e(A,uQe),e(A,tf),e(tf,Bre),e(Bre,pQe),e(tf,_Qe),e(tf,Kk),e(Kk,bQe),e(tf,vQe),e(A,FQe),e(A,af),e(af,Ire),e(Ire,TQe),e(af,MQe),e(af,Zk),e(Zk,EQe),e(af,CQe),e(A,wQe),e(A,nf),e(nf,Nre),e(Nre,AQe),e(nf,LQe),e(nf,eS),e(eS,yQe),e(nf,xQe),e(A,$Qe),e(A,sf),e(sf,qre),e(qre,kQe),e(sf,SQe),e(sf,oS),e(oS,RQe),e(sf,PQe),e(A,BQe),e(A,lf),e(lf,jre),e(jre,IQe),e(lf,NQe),e(lf,rS),e(rS,qQe),e(lf,jQe),e(A,DQe),e(A,df),e(df,Dre),e(Dre,GQe),e(df,OQe),e(df,tS),e(tS,VQe),e(df,XQe),e(A,zQe),e(A,cf),e(cf,Gre),e(Gre,WQe),e(cf,QQe),e(cf,aS),e(aS,HQe),e(cf,UQe),e(A,JQe),e(A,mf),e(mf,Ore),e(Ore,YQe),e(mf,KQe),e(mf,nS),e(nS,ZQe),e(mf,eHe),e(A,oHe),e(A,ff),e(ff,Vre),e(Vre,rHe),e(ff,tHe),e(ff,sS),e(sS,aHe),e(ff,nHe),e(A,sHe),e(A,gf),e(gf,Xre),e(Xre,lHe),e(gf,iHe),e(gf,lS),e(lS,dHe),e(gf,cHe),e(A,mHe),e(A,hf),e(hf,zre),e(zre,fHe),e(hf,gHe),e(hf,iS),e(iS,hHe),e(hf,uHe),e(A,pHe),e(A,uf),e(uf,Wre),e(Wre,_He),e(uf,bHe),e(uf,dS),e(dS,vHe),e(uf,FHe),e(A,THe),e(A,pf),e(pf,Qre),e(Qre,MHe),e(pf,EHe),e(pf,cS),e(cS,CHe),e(pf,wHe),e(A,AHe),e(A,_f),e(_f,Hre),e(Hre,LHe),e(_f,yHe),e(_f,mS),e(mS,xHe),e(_f,$He),e(A,kHe),e(A,bf),e(bf,Ure),e(Ure,SHe),e(bf,RHe),e(bf,fS),e(fS,PHe),e(bf,BHe),e(A,IHe),e(A,vf),e(vf,Jre),e(Jre,NHe),e(vf,qHe),e(vf,gS),e(gS,jHe),e(vf,DHe),e(A,GHe),e(A,Ff),e(Ff,Yre),e(Yre,OHe),e(Ff,VHe),e(Ff,hS),e(hS,XHe),e(Ff,zHe),e(A,WHe),e(A,Tf),e(Tf,Kre),e(Kre,QHe),e(Tf,HHe),e(Tf,uS),e(uS,UHe),e(Tf,JHe),e(A,YHe),e(A,Mf),e(Mf,Zre),e(Zre,KHe),e(Mf,ZHe),e(Mf,pS),e(pS,eUe),e(Mf,oUe),e(A,rUe),e(A,Ef),e(Ef,ete),e(ete,tUe),e(Ef,aUe),e(Ef,_S),e(_S,nUe),e(Ef,sUe),e(A,lUe),e(A,Cf),e(Cf,ote),e(ote,iUe),e(Cf,dUe),e(Cf,bS),e(bS,cUe),e(Cf,mUe),e(A,fUe),e(A,wf),e(wf,rte),e(rte,gUe),e(wf,hUe),e(wf,vS),e(vS,uUe),e(wf,pUe),e(A,_Ue),e(A,Af),e(Af,tte),e(tte,bUe),e(Af,vUe),e(Af,FS),e(FS,FUe),e(Af,TUe),e(A,MUe),e(A,Lf),e(Lf,ate),e(ate,EUe),e(Lf,CUe),e(Lf,TS),e(TS,wUe),e(Lf,AUe),e(A,LUe),e(A,yf),e(yf,nte),e(nte,yUe),e(yf,xUe),e(yf,MS),e(MS,$Ue),e(yf,kUe),e(A,SUe),e(A,xf),e(xf,ste),e(ste,RUe),e(xf,PUe),e(xf,ES),e(ES,BUe),e(xf,IUe),e(A,NUe),e(A,$f),e($f,lte),e(lte,qUe),e($f,jUe),e($f,CS),e(CS,DUe),e($f,GUe),e(A,OUe),e(A,kf),e(kf,ite),e(ite,VUe),e(kf,XUe),e(kf,wS),e(wS,zUe),e(kf,WUe),e(A,QUe),e(A,Sf),e(Sf,dte),e(dte,HUe),e(Sf,UUe),e(Sf,AS),e(AS,JUe),e(Sf,YUe),e(A,KUe),e(A,Rf),e(Rf,cte),e(cte,ZUe),e(Rf,eJe),e(Rf,LS),e(LS,oJe),e(Rf,rJe),e(A,tJe),e(A,Pf),e(Pf,mte),e(mte,aJe),e(Pf,nJe),e(Pf,yS),e(yS,sJe),e(Pf,lJe),e(A,iJe),e(A,Bf),e(Bf,fte),e(fte,dJe),e(Bf,cJe),e(Bf,xS),e(xS,mJe),e(Bf,fJe),e(A,gJe),e(A,If),e(If,gte),e(gte,hJe),e(If,uJe),e(If,$S),e($S,pJe),e(If,_Je),e(A,bJe),e(A,Nf),e(Nf,hte),e(hte,vJe),e(Nf,FJe),e(Nf,kS),e(kS,TJe),e(Nf,MJe),e(A,EJe),e(A,qf),e(qf,ute),e(ute,CJe),e(qf,wJe),e(qf,SS),e(SS,AJe),e(qf,LJe),e(A,yJe),e(A,jf),e(jf,pte),e(pte,xJe),e(jf,$Je),e(jf,RS),e(RS,kJe),e(jf,SJe),e(A,RJe),e(A,Df),e(Df,_te),e(_te,PJe),e(Df,BJe),e(Df,PS),e(PS,IJe),e(Df,NJe),e(A,qJe),e(A,Gf),e(Gf,bte),e(bte,jJe),e(Gf,DJe),e(Gf,BS),e(BS,GJe),e(Gf,OJe),e(A,VJe),e(A,Of),e(Of,vte),e(vte,XJe),e(Of,zJe),e(Of,IS),e(IS,WJe),e(Of,QJe),e(A,HJe),e(A,Vf),e(Vf,Fte),e(Fte,UJe),e(Vf,JJe),e(Vf,NS),e(NS,YJe),e(Vf,KJe),e(A,ZJe),e(A,Xf),e(Xf,Tte),e(Tte,eYe),e(Xf,oYe),e(Xf,qS),e(qS,rYe),e(Xf,tYe),e(A,aYe),e(A,zf),e(zf,Mte),e(Mte,nYe),e(zf,sYe),e(zf,jS),e(jS,lYe),e(zf,iYe),e(A,dYe),e(A,Wf),e(Wf,Ete),e(Ete,cYe),e(Wf,mYe),e(Wf,DS),e(DS,fYe),e(Wf,gYe),e(A,hYe),e(A,Qf),e(Qf,Cte),e(Cte,uYe),e(Qf,pYe),e(Qf,GS),e(GS,_Ye),e(Qf,bYe),e(A,vYe),e(A,Hf),e(Hf,wte),e(wte,FYe),e(Hf,TYe),e(Hf,OS),e(OS,MYe),e(Hf,EYe),e(A,CYe),e(A,Uf),e(Uf,Ate),e(Ate,wYe),e(Uf,AYe),e(Uf,VS),e(VS,LYe),e(Uf,yYe),e(A,xYe),e(A,Jf),e(Jf,Lte),e(Lte,$Ye),e(Jf,kYe),e(Jf,XS),e(XS,SYe),e(Jf,RYe),e(A,PYe),e(A,Yf),e(Yf,yte),e(yte,BYe),e(Yf,IYe),e(Yf,zS),e(zS,NYe),e(Yf,qYe),e(A,jYe),e(A,Kf),e(Kf,xte),e(xte,DYe),e(Kf,GYe),e(Kf,WS),e(WS,OYe),e(Kf,VYe),e(A,XYe),e(A,Zf),e(Zf,$te),e($te,zYe),e(Zf,WYe),e(Zf,QS),e(QS,QYe),e(Zf,HYe),e(A,UYe),e(A,eg),e(eg,kte),e(kte,JYe),e(eg,YYe),e(eg,HS),e(HS,KYe),e(eg,ZYe),e(A,eKe),e(A,og),e(og,Ste),e(Ste,oKe),e(og,rKe),e(og,US),e(US,tKe),e(og,aKe),e(A,nKe),e(A,rg),e(rg,Rte),e(Rte,sKe),e(rg,lKe),e(rg,JS),e(JS,iKe),e(rg,dKe),e(A,cKe),e(A,tg),e(tg,Pte),e(Pte,mKe),e(tg,fKe),e(tg,YS),e(YS,gKe),e(tg,hKe),e(A,uKe),e(A,ag),e(ag,Bte),e(Bte,pKe),e(ag,_Ke),e(ag,KS),e(KS,bKe),e(ag,vKe),e(A,FKe),e(A,ng),e(ng,Ite),e(Ite,TKe),e(ng,MKe),e(ng,ZS),e(ZS,EKe),e(ng,CKe),e(A,wKe),e(A,sg),e(sg,Nte),e(Nte,AKe),e(sg,LKe),e(sg,eR),e(eR,yKe),e(sg,xKe),e(A,$Ke),e(A,lg),e(lg,qte),e(qte,kKe),e(lg,SKe),e(lg,oR),e(oR,RKe),e(lg,PKe),e(A,BKe),e(A,ig),e(ig,jte),e(jte,IKe),e(ig,NKe),e(ig,rR),e(rR,qKe),e(ig,jKe),e(A,DKe),e(A,dg),e(dg,Dte),e(Dte,GKe),e(dg,OKe),e(dg,tR),e(tR,VKe),e(dg,XKe),e(A,zKe),e(A,cg),e(cg,Gte),e(Gte,WKe),e(cg,QKe),e(cg,aR),e(aR,HKe),e(cg,UKe),e(A,JKe),e(A,mg),e(mg,Ote),e(Ote,YKe),e(mg,KKe),e(mg,nR),e(nR,ZKe),e(mg,eZe),e(A,oZe),e(A,fg),e(fg,Vte),e(Vte,rZe),e(fg,tZe),e(fg,sR),e(sR,aZe),e(fg,nZe),e(A,sZe),e(A,gg),e(gg,Xte),e(Xte,lZe),e(gg,iZe),e(gg,lR),e(lR,dZe),e(gg,cZe),e(A,mZe),e(A,hg),e(hg,zte),e(zte,fZe),e(hg,gZe),e(hg,iR),e(iR,hZe),e(hg,uZe),e(A,pZe),e(A,ug),e(ug,Wte),e(Wte,_Ze),e(ug,bZe),e(ug,dR),e(dR,vZe),e(ug,FZe),e(A,TZe),e(A,pg),e(pg,Qte),e(Qte,MZe),e(pg,EZe),e(pg,cR),e(cR,CZe),e(pg,wZe),e(A,AZe),e(A,_g),e(_g,Hte),e(Hte,LZe),e(_g,yZe),e(_g,mR),e(mR,xZe),e(_g,$Ze),e(A,kZe),e(A,bg),e(bg,Ute),e(Ute,SZe),e(bg,RZe),e(bg,fR),e(fR,PZe),e(bg,BZe),e(A,IZe),e(A,vg),e(vg,Jte),e(Jte,NZe),e(vg,qZe),e(vg,gR),e(gR,jZe),e(vg,DZe),e(A,GZe),e(A,Fg),e(Fg,Yte),e(Yte,OZe),e(Fg,VZe),e(Fg,hR),e(hR,XZe),e(Fg,zZe),e(A,WZe),e(A,Tg),e(Tg,Kte),e(Kte,QZe),e(Tg,HZe),e(Tg,uR),e(uR,UZe),e(Tg,JZe),e(A,YZe),e(A,Mg),e(Mg,Zte),e(Zte,KZe),e(Mg,ZZe),e(Mg,pR),e(pR,eeo),e(Mg,oeo),e(A,reo),e(A,Eg),e(Eg,eae),e(eae,teo),e(Eg,aeo),e(Eg,_R),e(_R,neo),e(Eg,seo),e(A,leo),e(A,Cg),e(Cg,oae),e(oae,ieo),e(Cg,deo),e(Cg,bR),e(bR,ceo),e(Cg,meo),e(A,feo),e(A,wg),e(wg,rae),e(rae,geo),e(wg,heo),e(wg,vR),e(vR,ueo),e(wg,peo),e(A,_eo),e(A,Ag),e(Ag,tae),e(tae,beo),e(Ag,veo),e(Ag,FR),e(FR,Feo),e(Ag,Teo),e(Er,Meo),M(Lg,Er,null),e(Co,Eeo),e(Co,yg),M(KL,yg,null),e(yg,Ceo),e(yg,aae),e(aae,weo),b(m,Cje,_),b(m,Mi,_),e(Mi,xg),e(xg,nae),M(ZL,nae,null),e(Mi,Aeo),e(Mi,sae),e(sae,Leo),b(m,wje,_),b(m,wo,_),M(ey,wo,null),e(wo,yeo),e(wo,oy),e(oy,xeo),e(oy,TR),e(TR,$eo),e(oy,keo),e(wo,Seo),e(wo,ry),e(ry,Reo),e(ry,lae),e(lae,Peo),e(ry,Beo),e(wo,Ieo),e(wo,Cr),M(ty,Cr,null),e(Cr,Neo),e(Cr,iae),e(iae,qeo),e(Cr,jeo),e(Cr,Aa),e(Aa,Deo),e(Aa,dae),e(dae,Geo),e(Aa,Oeo),e(Aa,cae),e(cae,Veo),e(Aa,Xeo),e(Aa,mae),e(mae,zeo),e(Aa,Weo),e(Cr,Qeo),e(Cr,k),e(k,Sn),e(Sn,fae),e(fae,Heo),e(Sn,Ueo),e(Sn,MR),e(MR,Jeo),e(Sn,Yeo),e(Sn,ER),e(ER,Keo),e(Sn,Zeo),e(k,eoo),e(k,Rn),e(Rn,gae),e(gae,ooo),e(Rn,roo),e(Rn,CR),e(CR,too),e(Rn,aoo),e(Rn,wR),e(wR,noo),e(Rn,soo),e(k,loo),e(k,Pn),e(Pn,hae),e(hae,ioo),e(Pn,doo),e(Pn,AR),e(AR,coo),e(Pn,moo),e(Pn,LR),e(LR,foo),e(Pn,goo),e(k,hoo),e(k,$g),e($g,uae),e(uae,uoo),e($g,poo),e($g,yR),e(yR,_oo),e($g,boo),e(k,voo),e(k,Bn),e(Bn,pae),e(pae,Foo),e(Bn,Too),e(Bn,xR),e(xR,Moo),e(Bn,Eoo),e(Bn,$R),e($R,Coo),e(Bn,woo),e(k,Aoo),e(k,kg),e(kg,_ae),e(_ae,Loo),e(kg,yoo),e(kg,kR),e(kR,xoo),e(kg,$oo),e(k,koo),e(k,Sg),e(Sg,bae),e(bae,Soo),e(Sg,Roo),e(Sg,SR),e(SR,Poo),e(Sg,Boo),e(k,Ioo),e(k,Rg),e(Rg,vae),e(vae,Noo),e(Rg,qoo),e(Rg,RR),e(RR,joo),e(Rg,Doo),e(k,Goo),e(k,In),e(In,Fae),e(Fae,Ooo),e(In,Voo),e(In,PR),e(PR,Xoo),e(In,zoo),e(In,BR),e(BR,Woo),e(In,Qoo),e(k,Hoo),e(k,Nn),e(Nn,Tae),e(Tae,Uoo),e(Nn,Joo),e(Nn,IR),e(IR,Yoo),e(Nn,Koo),e(Nn,NR),e(NR,Zoo),e(Nn,ero),e(k,oro),e(k,qn),e(qn,Mae),e(Mae,rro),e(qn,tro),e(qn,qR),e(qR,aro),e(qn,nro),e(qn,jR),e(jR,sro),e(qn,lro),e(k,iro),e(k,Pg),e(Pg,Eae),e(Eae,dro),e(Pg,cro),e(Pg,DR),e(DR,mro),e(Pg,fro),e(k,gro),e(k,Bg),e(Bg,Cae),e(Cae,hro),e(Bg,uro),e(Bg,GR),e(GR,pro),e(Bg,_ro),e(k,bro),e(k,Ig),e(Ig,wae),e(wae,vro),e(Ig,Fro),e(Ig,OR),e(OR,Tro),e(Ig,Mro),e(k,Ero),e(k,jn),e(jn,Aae),e(Aae,Cro),e(jn,wro),e(jn,VR),e(VR,Aro),e(jn,Lro),e(jn,XR),e(XR,yro),e(jn,xro),e(k,$ro),e(k,Ng),e(Ng,Lae),e(Lae,kro),e(Ng,Sro),e(Ng,zR),e(zR,Rro),e(Ng,Pro),e(k,Bro),e(k,Dn),e(Dn,yae),e(yae,Iro),e(Dn,Nro),e(Dn,WR),e(WR,qro),e(Dn,jro),e(Dn,QR),e(QR,Dro),e(Dn,Gro),e(k,Oro),e(k,Gn),e(Gn,xae),e(xae,Vro),e(Gn,Xro),e(Gn,HR),e(HR,zro),e(Gn,Wro),e(Gn,UR),e(UR,Qro),e(Gn,Hro),e(k,Uro),e(k,On),e(On,$ae),e($ae,Jro),e(On,Yro),e(On,JR),e(JR,Kro),e(On,Zro),e(On,YR),e(YR,eto),e(On,oto),e(k,rto),e(k,qg),e(qg,kae),e(kae,tto),e(qg,ato),e(qg,KR),e(KR,nto),e(qg,sto),e(k,lto),e(k,Vn),e(Vn,Sae),e(Sae,ito),e(Vn,dto),e(Vn,ZR),e(ZR,cto),e(Vn,mto),e(Vn,eP),e(eP,fto),e(Vn,gto),e(k,hto),e(k,Xn),e(Xn,Rae),e(Rae,uto),e(Xn,pto),e(Xn,oP),e(oP,_to),e(Xn,bto),e(Xn,rP),e(rP,vto),e(Xn,Fto),e(k,Tto),e(k,zn),e(zn,Pae),e(Pae,Mto),e(zn,Eto),e(zn,tP),e(tP,Cto),e(zn,wto),e(zn,aP),e(aP,Ato),e(zn,Lto),e(k,yto),e(k,Wn),e(Wn,Bae),e(Bae,xto),e(Wn,$to),e(Wn,nP),e(nP,kto),e(Wn,Sto),e(Wn,sP),e(sP,Rto),e(Wn,Pto),e(k,Bto),e(k,Qn),e(Qn,Iae),e(Iae,Ito),e(Qn,Nto),e(Qn,lP),e(lP,qto),e(Qn,jto),e(Qn,iP),e(iP,Dto),e(Qn,Gto),e(k,Oto),e(k,Hn),e(Hn,Nae),e(Nae,Vto),e(Hn,Xto),e(Hn,dP),e(dP,zto),e(Hn,Wto),e(Hn,cP),e(cP,Qto),e(Hn,Hto),e(k,Uto),e(k,jg),e(jg,qae),e(qae,Jto),e(jg,Yto),e(jg,mP),e(mP,Kto),e(jg,Zto),e(k,eao),e(k,Un),e(Un,jae),e(jae,oao),e(Un,rao),e(Un,fP),e(fP,tao),e(Un,aao),e(Un,gP),e(gP,nao),e(Un,sao),e(k,lao),e(k,Dg),e(Dg,Dae),e(Dae,iao),e(Dg,dao),e(Dg,hP),e(hP,cao),e(Dg,mao),e(k,fao),e(k,Jn),e(Jn,Gae),e(Gae,gao),e(Jn,hao),e(Jn,uP),e(uP,uao),e(Jn,pao),e(Jn,pP),e(pP,_ao),e(Jn,bao),e(k,vao),e(k,Yn),e(Yn,Oae),e(Oae,Fao),e(Yn,Tao),e(Yn,_P),e(_P,Mao),e(Yn,Eao),e(Yn,bP),e(bP,Cao),e(Yn,wao),e(k,Aao),e(k,Kn),e(Kn,Vae),e(Vae,Lao),e(Kn,yao),e(Kn,vP),e(vP,xao),e(Kn,$ao),e(Kn,FP),e(FP,kao),e(Kn,Sao),e(k,Rao),e(k,Gg),e(Gg,Xae),e(Xae,Pao),e(Gg,Bao),e(Gg,TP),e(TP,Iao),e(Gg,Nao),e(k,qao),e(k,Zn),e(Zn,zae),e(zae,jao),e(Zn,Dao),e(Zn,MP),e(MP,Gao),e(Zn,Oao),e(Zn,EP),e(EP,Vao),e(Zn,Xao),e(k,zao),e(k,es),e(es,Wae),e(Wae,Wao),e(es,Qao),e(es,CP),e(CP,Hao),e(es,Uao),e(es,wP),e(wP,Jao),e(es,Yao),e(k,Kao),e(k,Og),e(Og,Qae),e(Qae,Zao),e(Og,eno),e(Og,AP),e(AP,ono),e(Og,rno),e(k,tno),e(k,os),e(os,Hae),e(Hae,ano),e(os,nno),e(os,LP),e(LP,sno),e(os,lno),e(os,yP),e(yP,ino),e(os,dno),e(k,cno),e(k,rs),e(rs,Uae),e(Uae,mno),e(rs,fno),e(rs,xP),e(xP,gno),e(rs,hno),e(rs,$P),e($P,uno),e(rs,pno),e(k,_no),e(k,ts),e(ts,Jae),e(Jae,bno),e(ts,vno),e(ts,kP),e(kP,Fno),e(ts,Tno),e(ts,SP),e(SP,Mno),e(ts,Eno),e(k,Cno),e(k,as),e(as,Yae),e(Yae,wno),e(as,Ano),e(as,RP),e(RP,Lno),e(as,yno),e(as,PP),e(PP,xno),e(as,$no),e(k,kno),e(k,ns),e(ns,Kae),e(Kae,Sno),e(ns,Rno),e(ns,BP),e(BP,Pno),e(ns,Bno),e(ns,IP),e(IP,Ino),e(ns,Nno),e(k,qno),e(k,ss),e(ss,Zae),e(Zae,jno),e(ss,Dno),e(ss,NP),e(NP,Gno),e(ss,Ono),e(ss,qP),e(qP,Vno),e(ss,Xno),e(k,zno),e(k,ls),e(ls,ene),e(ene,Wno),e(ls,Qno),e(ls,jP),e(jP,Hno),e(ls,Uno),e(ls,DP),e(DP,Jno),e(ls,Yno),e(k,Kno),e(k,Vg),e(Vg,one),e(one,Zno),e(Vg,eso),e(Vg,GP),e(GP,oso),e(Vg,rso),e(k,tso),e(k,is),e(is,rne),e(rne,aso),e(is,nso),e(is,OP),e(OP,sso),e(is,lso),e(is,VP),e(VP,iso),e(is,dso),e(k,cso),e(k,Xg),e(Xg,tne),e(tne,mso),e(Xg,fso),e(Xg,XP),e(XP,gso),e(Xg,hso),e(k,uso),e(k,zg),e(zg,ane),e(ane,pso),e(zg,_so),e(zg,zP),e(zP,bso),e(zg,vso),e(k,Fso),e(k,ds),e(ds,nne),e(nne,Tso),e(ds,Mso),e(ds,WP),e(WP,Eso),e(ds,Cso),e(ds,QP),e(QP,wso),e(ds,Aso),e(k,Lso),e(k,cs),e(cs,sne),e(sne,yso),e(cs,xso),e(cs,HP),e(HP,$so),e(cs,kso),e(cs,UP),e(UP,Sso),e(cs,Rso),e(k,Pso),e(k,ms),e(ms,lne),e(lne,Bso),e(ms,Iso),e(ms,JP),e(JP,Nso),e(ms,qso),e(ms,YP),e(YP,jso),e(ms,Dso),e(k,Gso),e(k,Wg),e(Wg,ine),e(ine,Oso),e(Wg,Vso),e(Wg,KP),e(KP,Xso),e(Wg,zso),e(k,Wso),e(k,fs),e(fs,dne),e(dne,Qso),e(fs,Hso),e(fs,ZP),e(ZP,Uso),e(fs,Jso),e(fs,eB),e(eB,Yso),e(fs,Kso),e(k,Zso),e(k,gs),e(gs,cne),e(cne,elo),e(gs,olo),e(gs,oB),e(oB,rlo),e(gs,tlo),e(gs,rB),e(rB,alo),e(gs,nlo),e(k,slo),e(k,hs),e(hs,mne),e(mne,llo),e(hs,ilo),e(hs,tB),e(tB,dlo),e(hs,clo),e(hs,aB),e(aB,mlo),e(hs,flo),e(k,glo),e(k,us),e(us,fne),e(fne,hlo),e(us,ulo),e(us,nB),e(nB,plo),e(us,_lo),e(us,sB),e(sB,blo),e(us,vlo),e(k,Flo),e(k,ps),e(ps,gne),e(gne,Tlo),e(ps,Mlo),e(ps,lB),e(lB,Elo),e(ps,Clo),e(ps,iB),e(iB,wlo),e(ps,Alo),e(k,Llo),e(k,Qg),e(Qg,hne),e(hne,ylo),e(Qg,xlo),e(Qg,dB),e(dB,$lo),e(Qg,klo),e(k,Slo),e(k,_s),e(_s,une),e(une,Rlo),e(_s,Plo),e(_s,cB),e(cB,Blo),e(_s,Ilo),e(_s,mB),e(mB,Nlo),e(_s,qlo),e(k,jlo),e(k,Hg),e(Hg,pne),e(pne,Dlo),e(Hg,Glo),e(Hg,fB),e(fB,Olo),e(Hg,Vlo),e(k,Xlo),e(k,Ug),e(Ug,_ne),e(_ne,zlo),e(Ug,Wlo),e(Ug,gB),e(gB,Qlo),e(Ug,Hlo),e(k,Ulo),e(k,Jg),e(Jg,bne),e(bne,Jlo),e(Jg,Ylo),e(Jg,hB),e(hB,Klo),e(Jg,Zlo),e(k,eio),e(k,Yg),e(Yg,vne),e(vne,oio),e(Yg,rio),e(Yg,uB),e(uB,tio),e(Yg,aio),e(k,nio),e(k,bs),e(bs,Fne),e(Fne,sio),e(bs,lio),e(bs,pB),e(pB,iio),e(bs,dio),e(bs,_B),e(_B,cio),e(bs,mio),e(k,fio),e(k,Kg),e(Kg,Tne),e(Tne,gio),e(Kg,hio),e(Kg,bB),e(bB,uio),e(Kg,pio),e(k,_io),e(k,vs),e(vs,Mne),e(Mne,bio),e(vs,vio),e(vs,vB),e(vB,Fio),e(vs,Tio),e(vs,FB),e(FB,Mio),e(vs,Eio),e(k,Cio),e(k,Fs),e(Fs,Ene),e(Ene,wio),e(Fs,Aio),e(Fs,TB),e(TB,Lio),e(Fs,yio),e(Fs,MB),e(MB,xio),e(Fs,$io),e(k,kio),e(k,Ts),e(Ts,Cne),e(Cne,Sio),e(Ts,Rio),e(Ts,EB),e(EB,Pio),e(Ts,Bio),e(Ts,CB),e(CB,Iio),e(Ts,Nio),e(k,qio),e(k,Ms),e(Ms,wne),e(wne,jio),e(Ms,Dio),e(Ms,wB),e(wB,Gio),e(Ms,Oio),e(Ms,AB),e(AB,Vio),e(Ms,Xio),e(k,zio),e(k,Es),e(Es,Ane),e(Ane,Wio),e(Es,Qio),e(Es,LB),e(LB,Hio),e(Es,Uio),e(Es,yB),e(yB,Jio),e(Es,Yio),e(k,Kio),e(k,Cs),e(Cs,Lne),e(Lne,Zio),e(Cs,edo),e(Cs,xB),e(xB,odo),e(Cs,rdo),e(Cs,$B),e($B,tdo),e(Cs,ado),e(k,ndo),e(k,Zg),e(Zg,yne),e(yne,sdo),e(Zg,ldo),e(Zg,kB),e(kB,ido),e(Zg,ddo),e(k,cdo),e(k,eh),e(eh,xne),e(xne,mdo),e(eh,fdo),e(eh,SB),e(SB,gdo),e(eh,hdo),e(k,udo),e(k,ws),e(ws,$ne),e($ne,pdo),e(ws,_do),e(ws,RB),e(RB,bdo),e(ws,vdo),e(ws,PB),e(PB,Fdo),e(ws,Tdo),e(k,Mdo),e(k,As),e(As,kne),e(kne,Edo),e(As,Cdo),e(As,BB),e(BB,wdo),e(As,Ado),e(As,IB),e(IB,Ldo),e(As,ydo),e(k,xdo),e(k,Ls),e(Ls,Sne),e(Sne,$do),e(Ls,kdo),e(Ls,NB),e(NB,Sdo),e(Ls,Rdo),e(Ls,qB),e(qB,Pdo),e(Ls,Bdo),e(k,Ido),e(k,oh),e(oh,Rne),e(Rne,Ndo),e(oh,qdo),e(oh,jB),e(jB,jdo),e(oh,Ddo),e(k,Gdo),e(k,rh),e(rh,Pne),e(Pne,Odo),e(rh,Vdo),e(rh,DB),e(DB,Xdo),e(rh,zdo),e(k,Wdo),e(k,th),e(th,Bne),e(Bne,Qdo),e(th,Hdo),e(th,GB),e(GB,Udo),e(th,Jdo),e(k,Ydo),e(k,ys),e(ys,Ine),e(Ine,Kdo),e(ys,Zdo),e(ys,OB),e(OB,eco),e(ys,oco),e(ys,VB),e(VB,rco),e(ys,tco),e(k,aco),e(k,ah),e(ah,Nne),e(Nne,nco),e(ah,sco),e(ah,XB),e(XB,lco),e(ah,ico),e(k,dco),e(k,nh),e(nh,qne),e(qne,cco),e(nh,mco),e(nh,zB),e(zB,fco),e(nh,gco),e(k,hco),e(k,sh),e(sh,jne),e(jne,uco),e(sh,pco),e(sh,WB),e(WB,_co),e(sh,bco),e(k,vco),e(k,xs),e(xs,Dne),e(Dne,Fco),e(xs,Tco),e(xs,QB),e(QB,Mco),e(xs,Eco),e(xs,HB),e(HB,Cco),e(xs,wco),e(k,Aco),e(k,lh),e(lh,Gne),e(Gne,Lco),e(lh,yco),e(lh,UB),e(UB,xco),e(lh,$co),e(k,kco),e(k,ih),e(ih,One),e(One,Sco),e(ih,Rco),e(ih,JB),e(JB,Pco),e(ih,Bco),e(k,Ico),e(k,$s),e($s,Vne),e(Vne,Nco),e($s,qco),e($s,YB),e(YB,jco),e($s,Dco),e($s,KB),e(KB,Gco),e($s,Oco),e(k,Vco),e(k,ks),e(ks,Xne),e(Xne,Xco),e(ks,zco),e(ks,ZB),e(ZB,Wco),e(ks,Qco),e(ks,eI),e(eI,Hco),e(ks,Uco),e(k,Jco),e(k,Ss),e(Ss,zne),e(zne,Yco),e(Ss,Kco),e(Ss,oI),e(oI,Zco),e(Ss,emo),e(Ss,rI),e(rI,omo),e(Ss,rmo),e(k,tmo),e(k,Rs),e(Rs,Wne),e(Wne,amo),e(Rs,nmo),e(Rs,tI),e(tI,smo),e(Rs,lmo),e(Rs,aI),e(aI,imo),e(Rs,dmo),e(Cr,cmo),M(dh,Cr,null),e(wo,mmo),e(wo,ch),M(ay,ch,null),e(ch,fmo),e(ch,Qne),e(Qne,gmo),b(m,Aje,_),b(m,Ei,_),e(Ei,mh),e(mh,Hne),M(ny,Hne,null),e(Ei,hmo),e(Ei,Une),e(Une,umo),b(m,Lje,_),b(m,Ao,_),M(sy,Ao,null),e(Ao,pmo),e(Ao,ly),e(ly,_mo),e(ly,nI),e(nI,bmo),e(ly,vmo),e(Ao,Fmo),e(Ao,iy),e(iy,Tmo),e(iy,Jne),e(Jne,Mmo),e(iy,Emo),e(Ao,Cmo),e(Ao,He),M(dy,He,null),e(He,wmo),e(He,Yne),e(Yne,Amo),e(He,Lmo),e(He,La),e(La,ymo),e(La,Kne),e(Kne,xmo),e(La,$mo),e(La,Zne),e(Zne,kmo),e(La,Smo),e(La,ese),e(ese,Rmo),e(La,Pmo),e(He,Bmo),e(He,Y),e(Y,fh),e(fh,ose),e(ose,Imo),e(fh,Nmo),e(fh,sI),e(sI,qmo),e(fh,jmo),e(Y,Dmo),e(Y,gh),e(gh,rse),e(rse,Gmo),e(gh,Omo),e(gh,lI),e(lI,Vmo),e(gh,Xmo),e(Y,zmo),e(Y,hh),e(hh,tse),e(tse,Wmo),e(hh,Qmo),e(hh,iI),e(iI,Hmo),e(hh,Umo),e(Y,Jmo),e(Y,uh),e(uh,ase),e(ase,Ymo),e(uh,Kmo),e(uh,dI),e(dI,Zmo),e(uh,efo),e(Y,ofo),e(Y,ph),e(ph,nse),e(nse,rfo),e(ph,tfo),e(ph,cI),e(cI,afo),e(ph,nfo),e(Y,sfo),e(Y,_h),e(_h,sse),e(sse,lfo),e(_h,ifo),e(_h,mI),e(mI,dfo),e(_h,cfo),e(Y,mfo),e(Y,bh),e(bh,lse),e(lse,ffo),e(bh,gfo),e(bh,fI),e(fI,hfo),e(bh,ufo),e(Y,pfo),e(Y,vh),e(vh,ise),e(ise,_fo),e(vh,bfo),e(vh,gI),e(gI,vfo),e(vh,Ffo),e(Y,Tfo),e(Y,Fh),e(Fh,dse),e(dse,Mfo),e(Fh,Efo),e(Fh,hI),e(hI,Cfo),e(Fh,wfo),e(Y,Afo),e(Y,Th),e(Th,cse),e(cse,Lfo),e(Th,yfo),e(Th,uI),e(uI,xfo),e(Th,$fo),e(Y,kfo),e(Y,Mh),e(Mh,mse),e(mse,Sfo),e(Mh,Rfo),e(Mh,pI),e(pI,Pfo),e(Mh,Bfo),e(Y,Ifo),e(Y,Eh),e(Eh,fse),e(fse,Nfo),e(Eh,qfo),e(Eh,_I),e(_I,jfo),e(Eh,Dfo),e(Y,Gfo),e(Y,Ch),e(Ch,gse),e(gse,Ofo),e(Ch,Vfo),e(Ch,bI),e(bI,Xfo),e(Ch,zfo),e(Y,Wfo),e(Y,wh),e(wh,hse),e(hse,Qfo),e(wh,Hfo),e(wh,vI),e(vI,Ufo),e(wh,Jfo),e(Y,Yfo),e(Y,Ah),e(Ah,use),e(use,Kfo),e(Ah,Zfo),e(Ah,FI),e(FI,ego),e(Ah,ogo),e(Y,rgo),e(Y,Lh),e(Lh,pse),e(pse,tgo),e(Lh,ago),e(Lh,TI),e(TI,ngo),e(Lh,sgo),e(Y,lgo),e(Y,yh),e(yh,_se),e(_se,igo),e(yh,dgo),e(yh,MI),e(MI,cgo),e(yh,mgo),e(Y,fgo),e(Y,xh),e(xh,bse),e(bse,ggo),e(xh,hgo),e(xh,EI),e(EI,ugo),e(xh,pgo),e(Y,_go),e(Y,$h),e($h,vse),e(vse,bgo),e($h,vgo),e($h,CI),e(CI,Fgo),e($h,Tgo),e(Y,Mgo),e(Y,kh),e(kh,Fse),e(Fse,Ego),e(kh,Cgo),e(kh,wI),e(wI,wgo),e(kh,Ago),e(Y,Lgo),e(Y,Sh),e(Sh,Tse),e(Tse,ygo),e(Sh,xgo),e(Sh,AI),e(AI,$go),e(Sh,kgo),e(Y,Sgo),e(Y,Rh),e(Rh,Mse),e(Mse,Rgo),e(Rh,Pgo),e(Rh,LI),e(LI,Bgo),e(Rh,Igo),e(Y,Ngo),e(Y,Ph),e(Ph,Ese),e(Ese,qgo),e(Ph,jgo),e(Ph,yI),e(yI,Dgo),e(Ph,Ggo),e(Y,Ogo),e(Y,Bh),e(Bh,Cse),e(Cse,Vgo),e(Bh,Xgo),e(Bh,xI),e(xI,zgo),e(Bh,Wgo),e(Y,Qgo),e(Y,Ih),e(Ih,wse),e(wse,Hgo),e(Ih,Ugo),e(Ih,$I),e($I,Jgo),e(Ih,Ygo),e(Y,Kgo),e(Y,Nh),e(Nh,Ase),e(Ase,Zgo),e(Nh,eho),e(Nh,kI),e(kI,oho),e(Nh,rho),e(Y,tho),e(Y,qh),e(qh,Lse),e(Lse,aho),e(qh,nho),e(qh,SI),e(SI,sho),e(qh,lho),e(Y,iho),e(Y,jh),e(jh,yse),e(yse,dho),e(jh,cho),e(jh,RI),e(RI,mho),e(jh,fho),e(Y,gho),e(Y,Dh),e(Dh,xse),e(xse,hho),e(Dh,uho),e(Dh,PI),e(PI,pho),e(Dh,_ho),e(Y,bho),e(Y,Gh),e(Gh,$se),e($se,vho),e(Gh,Fho),e(Gh,BI),e(BI,Tho),e(Gh,Mho),e(Y,Eho),e(Y,Oh),e(Oh,kse),e(kse,Cho),e(Oh,who),e(Oh,II),e(II,Aho),e(Oh,Lho),e(He,yho),M(Vh,He,null),e(He,xho),M(Xh,He,null),e(Ao,$ho),e(Ao,zh),M(cy,zh,null),e(zh,kho),e(zh,Sse),e(Sse,Sho),b(m,yje,_),b(m,Ci,_),e(Ci,Wh),e(Wh,Rse),M(my,Rse,null),e(Ci,Rho),e(Ci,Pse),e(Pse,Pho),b(m,xje,_),b(m,Lo,_),M(fy,Lo,null),e(Lo,Bho),e(Lo,gy),e(gy,Iho),e(gy,NI),e(NI,Nho),e(gy,qho),e(Lo,jho),e(Lo,hy),e(hy,Dho),e(hy,Bse),e(Bse,Gho),e(hy,Oho),e(Lo,Vho),e(Lo,Ue),M(uy,Ue,null),e(Ue,Xho),e(Ue,Ise),e(Ise,zho),e(Ue,Who),e(Ue,wi),e(wi,Qho),e(wi,Nse),e(Nse,Hho),e(wi,Uho),e(wi,qse),e(qse,Jho),e(wi,Yho),e(Ue,Kho),e(Ue,he),e(he,Qh),e(Qh,jse),e(jse,Zho),e(Qh,euo),e(Qh,qI),e(qI,ouo),e(Qh,ruo),e(he,tuo),e(he,Hh),e(Hh,Dse),e(Dse,auo),e(Hh,nuo),e(Hh,Gse),e(Gse,suo),e(Hh,luo),e(he,iuo),e(he,Uh),e(Uh,Ose),e(Ose,duo),e(Uh,cuo),e(Uh,jI),e(jI,muo),e(Uh,fuo),e(he,guo),e(he,Jh),e(Jh,Vse),e(Vse,huo),e(Jh,uuo),e(Jh,DI),e(DI,puo),e(Jh,_uo),e(he,buo),e(he,Yh),e(Yh,Xse),e(Xse,vuo),e(Yh,Fuo),e(Yh,GI),e(GI,Tuo),e(Yh,Muo),e(he,Euo),e(he,Kh),e(Kh,zse),e(zse,Cuo),e(Kh,wuo),e(Kh,OI),e(OI,Auo),e(Kh,Luo),e(he,yuo),e(he,Zh),e(Zh,Wse),e(Wse,xuo),e(Zh,$uo),e(Zh,VI),e(VI,kuo),e(Zh,Suo),e(he,Ruo),e(he,eu),e(eu,Qse),e(Qse,Puo),e(eu,Buo),e(eu,XI),e(XI,Iuo),e(eu,Nuo),e(he,quo),e(he,ou),e(ou,Hse),e(Hse,juo),e(ou,Duo),e(ou,zI),e(zI,Guo),e(ou,Ouo),e(he,Vuo),e(he,ru),e(ru,Use),e(Use,Xuo),e(ru,zuo),e(ru,WI),e(WI,Wuo),e(ru,Quo),e(he,Huo),e(he,tu),e(tu,Jse),e(Jse,Uuo),e(tu,Juo),e(tu,QI),e(QI,Yuo),e(tu,Kuo),e(he,Zuo),e(he,au),e(au,Yse),e(Yse,epo),e(au,opo),e(au,HI),e(HI,rpo),e(au,tpo),e(he,apo),e(he,nu),e(nu,Kse),e(Kse,npo),e(nu,spo),e(nu,UI),e(UI,lpo),e(nu,ipo),e(he,dpo),e(he,su),e(su,Zse),e(Zse,cpo),e(su,mpo),e(su,JI),e(JI,fpo),e(su,gpo),e(he,hpo),e(he,lu),e(lu,ele),e(ele,upo),e(lu,ppo),e(lu,YI),e(YI,_po),e(lu,bpo),e(he,vpo),e(he,iu),e(iu,ole),e(ole,Fpo),e(iu,Tpo),e(iu,KI),e(KI,Mpo),e(iu,Epo),e(he,Cpo),e(he,du),e(du,rle),e(rle,wpo),e(du,Apo),e(du,ZI),e(ZI,Lpo),e(du,ypo),e(Ue,xpo),M(cu,Ue,null),e(Ue,$po),M(mu,Ue,null),e(Lo,kpo),e(Lo,fu),M(py,fu,null),e(fu,Spo),e(fu,tle),e(tle,Rpo),b(m,$je,_),b(m,Ai,_),e(Ai,gu),e(gu,ale),M(_y,ale,null),e(Ai,Ppo),e(Ai,nle),e(nle,Bpo),b(m,kje,_),b(m,yo,_),M(by,yo,null),e(yo,Ipo),e(yo,Li),e(Li,Npo),e(Li,eN),e(eN,qpo),e(Li,jpo),e(Li,oN),e(oN,Dpo),e(Li,Gpo),e(yo,Opo),e(yo,vy),e(vy,Vpo),e(vy,sle),e(sle,Xpo),e(vy,zpo),e(yo,Wpo),e(yo,tt),M(Fy,tt,null),e(tt,Qpo),e(tt,lle),e(lle,Hpo),e(tt,Upo),e(tt,yi),e(yi,Jpo),e(yi,ile),e(ile,Ypo),e(yi,Kpo),e(yi,rN),e(rN,Zpo),e(yi,e_o),e(tt,o_o),M(hu,tt,null),e(yo,r_o),e(yo,Je),M(Ty,Je,null),e(Je,t_o),e(Je,dle),e(dle,a_o),e(Je,n_o),e(Je,ya),e(ya,s_o),e(ya,cle),e(cle,l_o),e(ya,i_o),e(ya,mle),e(mle,d_o),e(ya,c_o),e(ya,fle),e(fle,m_o),e(ya,f_o),e(Je,g_o),e(Je,y),e(y,uu),e(uu,gle),e(gle,h_o),e(uu,u_o),e(uu,tN),e(tN,p_o),e(uu,__o),e(y,b_o),e(y,pu),e(pu,hle),e(hle,v_o),e(pu,F_o),e(pu,aN),e(aN,T_o),e(pu,M_o),e(y,E_o),e(y,_u),e(_u,ule),e(ule,C_o),e(_u,w_o),e(_u,nN),e(nN,A_o),e(_u,L_o),e(y,y_o),e(y,bu),e(bu,ple),e(ple,x_o),e(bu,$_o),e(bu,sN),e(sN,k_o),e(bu,S_o),e(y,R_o),e(y,vu),e(vu,_le),e(_le,P_o),e(vu,B_o),e(vu,lN),e(lN,I_o),e(vu,N_o),e(y,q_o),e(y,Fu),e(Fu,ble),e(ble,j_o),e(Fu,D_o),e(Fu,iN),e(iN,G_o),e(Fu,O_o),e(y,V_o),e(y,Tu),e(Tu,vle),e(vle,X_o),e(Tu,z_o),e(Tu,dN),e(dN,W_o),e(Tu,Q_o),e(y,H_o),e(y,Mu),e(Mu,Fle),e(Fle,U_o),e(Mu,J_o),e(Mu,cN),e(cN,Y_o),e(Mu,K_o),e(y,Z_o),e(y,Eu),e(Eu,Tle),e(Tle,ebo),e(Eu,obo),e(Eu,mN),e(mN,rbo),e(Eu,tbo),e(y,abo),e(y,Cu),e(Cu,Mle),e(Mle,nbo),e(Cu,sbo),e(Cu,fN),e(fN,lbo),e(Cu,ibo),e(y,dbo),e(y,wu),e(wu,Ele),e(Ele,cbo),e(wu,mbo),e(wu,gN),e(gN,fbo),e(wu,gbo),e(y,hbo),e(y,Au),e(Au,Cle),e(Cle,ubo),e(Au,pbo),e(Au,hN),e(hN,_bo),e(Au,bbo),e(y,vbo),e(y,Lu),e(Lu,wle),e(wle,Fbo),e(Lu,Tbo),e(Lu,uN),e(uN,Mbo),e(Lu,Ebo),e(y,Cbo),e(y,yu),e(yu,Ale),e(Ale,wbo),e(yu,Abo),e(yu,pN),e(pN,Lbo),e(yu,ybo),e(y,xbo),e(y,xu),e(xu,Lle),e(Lle,$bo),e(xu,kbo),e(xu,_N),e(_N,Sbo),e(xu,Rbo),e(y,Pbo),e(y,$u),e($u,yle),e(yle,Bbo),e($u,Ibo),e($u,bN),e(bN,Nbo),e($u,qbo),e(y,jbo),e(y,ku),e(ku,xle),e(xle,Dbo),e(ku,Gbo),e(ku,vN),e(vN,Obo),e(ku,Vbo),e(y,Xbo),e(y,Su),e(Su,$le),e($le,zbo),e(Su,Wbo),e(Su,FN),e(FN,Qbo),e(Su,Hbo),e(y,Ubo),e(y,Ru),e(Ru,kle),e(kle,Jbo),e(Ru,Ybo),e(Ru,TN),e(TN,Kbo),e(Ru,Zbo),e(y,e2o),e(y,Pu),e(Pu,Sle),e(Sle,o2o),e(Pu,r2o),e(Pu,MN),e(MN,t2o),e(Pu,a2o),e(y,n2o),e(y,Bu),e(Bu,Rle),e(Rle,s2o),e(Bu,l2o),e(Bu,EN),e(EN,i2o),e(Bu,d2o),e(y,c2o),e(y,Iu),e(Iu,Ple),e(Ple,m2o),e(Iu,f2o),e(Iu,CN),e(CN,g2o),e(Iu,h2o),e(y,u2o),e(y,Nu),e(Nu,Ble),e(Ble,p2o),e(Nu,_2o),e(Nu,wN),e(wN,b2o),e(Nu,v2o),e(y,F2o),e(y,qu),e(qu,Ile),e(Ile,T2o),e(qu,M2o),e(qu,AN),e(AN,E2o),e(qu,C2o),e(y,w2o),e(y,ju),e(ju,Nle),e(Nle,A2o),e(ju,L2o),e(ju,LN),e(LN,y2o),e(ju,x2o),e(y,$2o),e(y,Du),e(Du,qle),e(qle,k2o),e(Du,S2o),e(Du,yN),e(yN,R2o),e(Du,P2o),e(y,B2o),e(y,Gu),e(Gu,jle),e(jle,I2o),e(Gu,N2o),e(Gu,xN),e(xN,q2o),e(Gu,j2o),e(y,D2o),e(y,Ou),e(Ou,Dle),e(Dle,G2o),e(Ou,O2o),e(Ou,$N),e($N,V2o),e(Ou,X2o),e(y,z2o),e(y,Vu),e(Vu,Gle),e(Gle,W2o),e(Vu,Q2o),e(Vu,kN),e(kN,H2o),e(Vu,U2o),e(y,J2o),e(y,Xu),e(Xu,Ole),e(Ole,Y2o),e(Xu,K2o),e(Xu,SN),e(SN,Z2o),e(Xu,evo),e(y,ovo),e(y,zu),e(zu,Vle),e(Vle,rvo),e(zu,tvo),e(zu,RN),e(RN,avo),e(zu,nvo),e(y,svo),e(y,Wu),e(Wu,Xle),e(Xle,lvo),e(Wu,ivo),e(Wu,PN),e(PN,dvo),e(Wu,cvo),e(y,mvo),e(y,Qu),e(Qu,zle),e(zle,fvo),e(Qu,gvo),e(Qu,BN),e(BN,hvo),e(Qu,uvo),e(y,pvo),e(y,Ps),e(Ps,Wle),e(Wle,_vo),e(Ps,bvo),e(Ps,IN),e(IN,vvo),e(Ps,Fvo),e(Ps,NN),e(NN,Tvo),e(Ps,Mvo),e(y,Evo),e(y,Hu),e(Hu,Qle),e(Qle,Cvo),e(Hu,wvo),e(Hu,qN),e(qN,Avo),e(Hu,Lvo),e(y,yvo),e(y,Uu),e(Uu,Hle),e(Hle,xvo),e(Uu,$vo),e(Uu,jN),e(jN,kvo),e(Uu,Svo),e(y,Rvo),e(y,Ju),e(Ju,Ule),e(Ule,Pvo),e(Ju,Bvo),e(Ju,DN),e(DN,Ivo),e(Ju,Nvo),e(y,qvo),e(y,Yu),e(Yu,Jle),e(Jle,jvo),e(Yu,Dvo),e(Yu,GN),e(GN,Gvo),e(Yu,Ovo),e(y,Vvo),e(y,Ku),e(Ku,Yle),e(Yle,Xvo),e(Ku,zvo),e(Ku,ON),e(ON,Wvo),e(Ku,Qvo),e(y,Hvo),e(y,Zu),e(Zu,Kle),e(Kle,Uvo),e(Zu,Jvo),e(Zu,VN),e(VN,Yvo),e(Zu,Kvo),e(y,Zvo),e(y,ep),e(ep,Zle),e(Zle,eFo),e(ep,oFo),e(ep,XN),e(XN,rFo),e(ep,tFo),e(y,aFo),e(y,op),e(op,eie),e(eie,nFo),e(op,sFo),e(op,zN),e(zN,lFo),e(op,iFo),e(y,dFo),e(y,rp),e(rp,oie),e(oie,cFo),e(rp,mFo),e(rp,WN),e(WN,fFo),e(rp,gFo),e(y,hFo),e(y,tp),e(tp,rie),e(rie,uFo),e(tp,pFo),e(tp,QN),e(QN,_Fo),e(tp,bFo),e(y,vFo),e(y,ap),e(ap,tie),e(tie,FFo),e(ap,TFo),e(ap,HN),e(HN,MFo),e(ap,EFo),e(y,CFo),e(y,np),e(np,aie),e(aie,wFo),e(np,AFo),e(np,UN),e(UN,LFo),e(np,yFo),e(y,xFo),e(y,sp),e(sp,nie),e(nie,$Fo),e(sp,kFo),e(sp,JN),e(JN,SFo),e(sp,RFo),e(y,PFo),e(y,lp),e(lp,sie),e(sie,BFo),e(lp,IFo),e(lp,YN),e(YN,NFo),e(lp,qFo),e(y,jFo),e(y,ip),e(ip,lie),e(lie,DFo),e(ip,GFo),e(ip,KN),e(KN,OFo),e(ip,VFo),e(y,XFo),e(y,dp),e(dp,iie),e(iie,zFo),e(dp,WFo),e(dp,ZN),e(ZN,QFo),e(dp,HFo),e(y,UFo),e(y,cp),e(cp,die),e(die,JFo),e(cp,YFo),e(cp,eq),e(eq,KFo),e(cp,ZFo),e(y,e1o),e(y,mp),e(mp,cie),e(cie,o1o),e(mp,r1o),e(mp,oq),e(oq,t1o),e(mp,a1o),e(y,n1o),e(y,fp),e(fp,mie),e(mie,s1o),e(fp,l1o),e(fp,rq),e(rq,i1o),e(fp,d1o),e(y,c1o),e(y,gp),e(gp,fie),e(fie,m1o),e(gp,f1o),e(gp,tq),e(tq,g1o),e(gp,h1o),e(y,u1o),e(y,hp),e(hp,gie),e(gie,p1o),e(hp,_1o),e(hp,aq),e(aq,b1o),e(hp,v1o),e(y,F1o),e(y,up),e(up,hie),e(hie,T1o),e(up,M1o),e(up,nq),e(nq,E1o),e(up,C1o),e(y,w1o),e(y,pp),e(pp,uie),e(uie,A1o),e(pp,L1o),e(pp,sq),e(sq,y1o),e(pp,x1o),e(y,$1o),e(y,_p),e(_p,pie),e(pie,k1o),e(_p,S1o),e(_p,lq),e(lq,R1o),e(_p,P1o),e(y,B1o),e(y,bp),e(bp,_ie),e(_ie,I1o),e(bp,N1o),e(bp,iq),e(iq,q1o),e(bp,j1o),e(y,D1o),e(y,vp),e(vp,bie),e(bie,G1o),e(vp,O1o),e(vp,dq),e(dq,V1o),e(vp,X1o),e(y,z1o),e(y,Fp),e(Fp,vie),e(vie,W1o),e(Fp,Q1o),e(Fp,cq),e(cq,H1o),e(Fp,U1o),e(y,J1o),e(y,Tp),e(Tp,Fie),e(Fie,Y1o),e(Tp,K1o),e(Tp,mq),e(mq,Z1o),e(Tp,eTo),e(y,oTo),e(y,Mp),e(Mp,Tie),e(Tie,rTo),e(Mp,tTo),e(Mp,fq),e(fq,aTo),e(Mp,nTo),e(y,sTo),e(y,Ep),e(Ep,Mie),e(Mie,lTo),e(Ep,iTo),e(Ep,gq),e(gq,dTo),e(Ep,cTo),e(y,mTo),e(y,Cp),e(Cp,Eie),e(Eie,fTo),e(Cp,gTo),e(Cp,hq),e(hq,hTo),e(Cp,uTo),e(y,pTo),e(y,wp),e(wp,Cie),e(Cie,_To),e(wp,bTo),e(wp,uq),e(uq,vTo),e(wp,FTo),e(y,TTo),e(y,Ap),e(Ap,wie),e(wie,MTo),e(Ap,ETo),e(Ap,pq),e(pq,CTo),e(Ap,wTo),e(y,ATo),e(y,Lp),e(Lp,Aie),e(Aie,LTo),e(Lp,yTo),e(Lp,_q),e(_q,xTo),e(Lp,$To),e(y,kTo),e(y,yp),e(yp,Lie),e(Lie,STo),e(yp,RTo),e(yp,bq),e(bq,PTo),e(yp,BTo),e(y,ITo),e(y,xp),e(xp,yie),e(yie,NTo),e(xp,qTo),e(xp,vq),e(vq,jTo),e(xp,DTo),e(y,GTo),e(y,$p),e($p,xie),e(xie,OTo),e($p,VTo),e($p,Fq),e(Fq,XTo),e($p,zTo),e(y,WTo),e(y,kp),e(kp,$ie),e($ie,QTo),e(kp,HTo),e(kp,Tq),e(Tq,UTo),e(kp,JTo),e(y,YTo),e(y,Sp),e(Sp,kie),e(kie,KTo),e(Sp,ZTo),e(Sp,Mq),e(Mq,eMo),e(Sp,oMo),e(y,rMo),e(y,Rp),e(Rp,Sie),e(Sie,tMo),e(Rp,aMo),e(Rp,Eq),e(Eq,nMo),e(Rp,sMo),e(y,lMo),e(y,Pp),e(Pp,Rie),e(Rie,iMo),e(Pp,dMo),e(Pp,Cq),e(Cq,cMo),e(Pp,mMo),e(y,fMo),e(y,Bp),e(Bp,Pie),e(Pie,gMo),e(Bp,hMo),e(Bp,wq),e(wq,uMo),e(Bp,pMo),e(y,_Mo),e(y,Ip),e(Ip,Bie),e(Bie,bMo),e(Ip,vMo),e(Ip,Aq),e(Aq,FMo),e(Ip,TMo),e(y,MMo),e(y,Np),e(Np,Iie),e(Iie,EMo),e(Np,CMo),e(Np,Lq),e(Lq,wMo),e(Np,AMo),e(y,LMo),e(y,qp),e(qp,Nie),e(Nie,yMo),e(qp,xMo),e(qp,yq),e(yq,$Mo),e(qp,kMo),e(y,SMo),e(y,jp),e(jp,qie),e(qie,RMo),e(jp,PMo),e(jp,xq),e(xq,BMo),e(jp,IMo),e(y,NMo),e(y,Dp),e(Dp,jie),e(jie,qMo),e(Dp,jMo),e(Dp,$q),e($q,DMo),e(Dp,GMo),e(y,OMo),e(y,Gp),e(Gp,Die),e(Die,VMo),e(Gp,XMo),e(Gp,kq),e(kq,zMo),e(Gp,WMo),e(y,QMo),e(y,Op),e(Op,Gie),e(Gie,HMo),e(Op,UMo),e(Op,Sq),e(Sq,JMo),e(Op,YMo),e(y,KMo),e(y,Vp),e(Vp,Oie),e(Oie,ZMo),e(Vp,e4o),e(Vp,Rq),e(Rq,o4o),e(Vp,r4o),e(y,t4o),e(y,Xp),e(Xp,Vie),e(Vie,a4o),e(Xp,n4o),e(Xp,Pq),e(Pq,s4o),e(Xp,l4o),e(y,i4o),e(y,zp),e(zp,Xie),e(Xie,d4o),e(zp,c4o),e(zp,Bq),e(Bq,m4o),e(zp,f4o),e(y,g4o),e(y,Wp),e(Wp,zie),e(zie,h4o),e(Wp,u4o),e(Wp,Iq),e(Iq,p4o),e(Wp,_4o),e(y,b4o),e(y,Qp),e(Qp,Wie),e(Wie,v4o),e(Qp,F4o),e(Qp,Nq),e(Nq,T4o),e(Qp,M4o),e(y,E4o),e(y,Hp),e(Hp,Qie),e(Qie,C4o),e(Hp,w4o),e(Hp,qq),e(qq,A4o),e(Hp,L4o),e(y,y4o),e(y,Up),e(Up,Hie),e(Hie,x4o),e(Up,$4o),e(Up,jq),e(jq,k4o),e(Up,S4o),e(y,R4o),e(y,Jp),e(Jp,Uie),e(Uie,P4o),e(Jp,B4o),e(Jp,Dq),e(Dq,I4o),e(Jp,N4o),e(y,q4o),e(y,Yp),e(Yp,Jie),e(Jie,j4o),e(Yp,D4o),e(Yp,Gq),e(Gq,G4o),e(Yp,O4o),e(y,V4o),e(y,Kp),e(Kp,Yie),e(Yie,X4o),e(Kp,z4o),e(Kp,Oq),e(Oq,W4o),e(Kp,Q4o),e(y,H4o),e(y,Zp),e(Zp,Kie),e(Kie,U4o),e(Zp,J4o),e(Zp,Vq),e(Vq,Y4o),e(Zp,K4o),e(y,Z4o),e(y,e_),e(e_,Zie),e(Zie,eEo),e(e_,oEo),e(e_,Xq),e(Xq,rEo),e(e_,tEo),e(y,aEo),e(y,o_),e(o_,ede),e(ede,nEo),e(o_,sEo),e(o_,zq),e(zq,lEo),e(o_,iEo),e(y,dEo),e(y,r_),e(r_,ode),e(ode,cEo),e(r_,mEo),e(r_,Wq),e(Wq,fEo),e(r_,gEo),e(y,hEo),e(y,t_),e(t_,rde),e(rde,uEo),e(t_,pEo),e(t_,Qq),e(Qq,_Eo),e(t_,bEo),e(y,vEo),e(y,a_),e(a_,tde),e(tde,FEo),e(a_,TEo),e(a_,Hq),e(Hq,MEo),e(a_,EEo),e(y,CEo),e(y,n_),e(n_,ade),e(ade,wEo),e(n_,AEo),e(n_,Uq),e(Uq,LEo),e(n_,yEo),e(y,xEo),e(y,s_),e(s_,nde),e(nde,$Eo),e(s_,kEo),e(s_,Jq),e(Jq,SEo),e(s_,REo),e(y,PEo),e(y,l_),e(l_,sde),e(sde,BEo),e(l_,IEo),e(l_,Yq),e(Yq,NEo),e(l_,qEo),e(y,jEo),e(y,i_),e(i_,lde),e(lde,DEo),e(i_,GEo),e(i_,Kq),e(Kq,OEo),e(i_,VEo),e(y,XEo),e(y,d_),e(d_,ide),e(ide,zEo),e(d_,WEo),e(d_,Zq),e(Zq,QEo),e(d_,HEo),e(y,UEo),e(y,c_),e(c_,dde),e(dde,JEo),e(c_,YEo),e(c_,ej),e(ej,KEo),e(c_,ZEo),e(Je,eCo),e(Je,m_),e(m_,oCo),e(m_,cde),e(cde,rCo),e(m_,tCo),e(m_,mde),e(mde,aCo),e(Je,nCo),M(f_,Je,null),b(m,Sje,_),b(m,xi,_),e(xi,g_),e(g_,fde),M(My,fde,null),e(xi,sCo),e(xi,gde),e(gde,lCo),b(m,Rje,_),b(m,xo,_),M(Ey,xo,null),e(xo,iCo),e(xo,$i),e($i,dCo),e($i,oj),e(oj,cCo),e($i,mCo),e($i,rj),e(rj,fCo),e($i,gCo),e(xo,hCo),e(xo,Cy),e(Cy,uCo),e(Cy,hde),e(hde,pCo),e(Cy,_Co),e(xo,bCo),e(xo,at),M(wy,at,null),e(at,vCo),e(at,ude),e(ude,FCo),e(at,TCo),e(at,ki),e(ki,MCo),e(ki,pde),e(pde,ECo),e(ki,CCo),e(ki,tj),e(tj,wCo),e(ki,ACo),e(at,LCo),M(h_,at,null),e(xo,yCo),e(xo,Ye),M(Ay,Ye,null),e(Ye,xCo),e(Ye,_de),e(_de,$Co),e(Ye,kCo),e(Ye,xa),e(xa,SCo),e(xa,bde),e(bde,RCo),e(xa,PCo),e(xa,vde),e(vde,BCo),e(xa,ICo),e(xa,Fde),e(Fde,NCo),e(xa,qCo),e(Ye,jCo),e(Ye,G),e(G,u_),e(u_,Tde),e(Tde,DCo),e(u_,GCo),e(u_,aj),e(aj,OCo),e(u_,VCo),e(G,XCo),e(G,p_),e(p_,Mde),e(Mde,zCo),e(p_,WCo),e(p_,nj),e(nj,QCo),e(p_,HCo),e(G,UCo),e(G,__),e(__,Ede),e(Ede,JCo),e(__,YCo),e(__,sj),e(sj,KCo),e(__,ZCo),e(G,e5o),e(G,b_),e(b_,Cde),e(Cde,o5o),e(b_,r5o),e(b_,lj),e(lj,t5o),e(b_,a5o),e(G,n5o),e(G,v_),e(v_,wde),e(wde,s5o),e(v_,l5o),e(v_,ij),e(ij,i5o),e(v_,d5o),e(G,c5o),e(G,F_),e(F_,Ade),e(Ade,m5o),e(F_,f5o),e(F_,dj),e(dj,g5o),e(F_,h5o),e(G,u5o),e(G,T_),e(T_,Lde),e(Lde,p5o),e(T_,_5o),e(T_,cj),e(cj,b5o),e(T_,v5o),e(G,F5o),e(G,M_),e(M_,yde),e(yde,T5o),e(M_,M5o),e(M_,mj),e(mj,E5o),e(M_,C5o),e(G,w5o),e(G,E_),e(E_,xde),e(xde,A5o),e(E_,L5o),e(E_,fj),e(fj,y5o),e(E_,x5o),e(G,$5o),e(G,C_),e(C_,$de),e($de,k5o),e(C_,S5o),e(C_,gj),e(gj,R5o),e(C_,P5o),e(G,B5o),e(G,w_),e(w_,kde),e(kde,I5o),e(w_,N5o),e(w_,hj),e(hj,q5o),e(w_,j5o),e(G,D5o),e(G,A_),e(A_,Sde),e(Sde,G5o),e(A_,O5o),e(A_,uj),e(uj,V5o),e(A_,X5o),e(G,z5o),e(G,L_),e(L_,Rde),e(Rde,W5o),e(L_,Q5o),e(L_,pj),e(pj,H5o),e(L_,U5o),e(G,J5o),e(G,y_),e(y_,Pde),e(Pde,Y5o),e(y_,K5o),e(y_,_j),e(_j,Z5o),e(y_,e3o),e(G,o3o),e(G,x_),e(x_,Bde),e(Bde,r3o),e(x_,t3o),e(x_,bj),e(bj,a3o),e(x_,n3o),e(G,s3o),e(G,$_),e($_,Ide),e(Ide,l3o),e($_,i3o),e($_,vj),e(vj,d3o),e($_,c3o),e(G,m3o),e(G,k_),e(k_,Nde),e(Nde,f3o),e(k_,g3o),e(k_,Fj),e(Fj,h3o),e(k_,u3o),e(G,p3o),e(G,S_),e(S_,qde),e(qde,_3o),e(S_,b3o),e(S_,Tj),e(Tj,v3o),e(S_,F3o),e(G,T3o),e(G,R_),e(R_,jde),e(jde,M3o),e(R_,E3o),e(R_,Mj),e(Mj,C3o),e(R_,w3o),e(G,A3o),e(G,P_),e(P_,Dde),e(Dde,L3o),e(P_,y3o),e(P_,Ej),e(Ej,x3o),e(P_,$3o),e(G,k3o),e(G,B_),e(B_,Gde),e(Gde,S3o),e(B_,R3o),e(B_,Cj),e(Cj,P3o),e(B_,B3o),e(G,I3o),e(G,I_),e(I_,Ode),e(Ode,N3o),e(I_,q3o),e(I_,wj),e(wj,j3o),e(I_,D3o),e(G,G3o),e(G,N_),e(N_,Vde),e(Vde,O3o),e(N_,V3o),e(N_,Aj),e(Aj,X3o),e(N_,z3o),e(G,W3o),e(G,q_),e(q_,Xde),e(Xde,Q3o),e(q_,H3o),e(q_,Lj),e(Lj,U3o),e(q_,J3o),e(G,Y3o),e(G,j_),e(j_,zde),e(zde,K3o),e(j_,Z3o),e(j_,yj),e(yj,e0o),e(j_,o0o),e(G,r0o),e(G,D_),e(D_,Wde),e(Wde,t0o),e(D_,a0o),e(D_,xj),e(xj,n0o),e(D_,s0o),e(G,l0o),e(G,G_),e(G_,Qde),e(Qde,i0o),e(G_,d0o),e(G_,$j),e($j,c0o),e(G_,m0o),e(G,f0o),e(G,O_),e(O_,Hde),e(Hde,g0o),e(O_,h0o),e(O_,kj),e(kj,u0o),e(O_,p0o),e(G,_0o),e(G,V_),e(V_,Ude),e(Ude,b0o),e(V_,v0o),e(V_,Sj),e(Sj,F0o),e(V_,T0o),e(G,M0o),e(G,X_),e(X_,Jde),e(Jde,E0o),e(X_,C0o),e(X_,Rj),e(Rj,w0o),e(X_,A0o),e(G,L0o),e(G,z_),e(z_,Yde),e(Yde,y0o),e(z_,x0o),e(z_,Pj),e(Pj,$0o),e(z_,k0o),e(G,S0o),e(G,W_),e(W_,Kde),e(Kde,R0o),e(W_,P0o),e(W_,Bj),e(Bj,B0o),e(W_,I0o),e(G,N0o),e(G,Q_),e(Q_,Zde),e(Zde,q0o),e(Q_,j0o),e(Q_,Ij),e(Ij,D0o),e(Q_,G0o),e(G,O0o),e(G,H_),e(H_,ece),e(ece,V0o),e(H_,X0o),e(H_,Nj),e(Nj,z0o),e(H_,W0o),e(G,Q0o),e(G,U_),e(U_,oce),e(oce,H0o),e(U_,U0o),e(U_,qj),e(qj,J0o),e(U_,Y0o),e(G,K0o),e(G,J_),e(J_,rce),e(rce,Z0o),e(J_,ewo),e(J_,jj),e(jj,owo),e(J_,rwo),e(G,two),e(G,Y_),e(Y_,tce),e(tce,awo),e(Y_,nwo),e(Y_,Dj),e(Dj,swo),e(Y_,lwo),e(G,iwo),e(G,K_),e(K_,ace),e(ace,dwo),e(K_,cwo),e(K_,Gj),e(Gj,mwo),e(K_,fwo),e(G,gwo),e(G,Z_),e(Z_,nce),e(nce,hwo),e(Z_,uwo),e(Z_,Oj),e(Oj,pwo),e(Z_,_wo),e(G,bwo),e(G,eb),e(eb,sce),e(sce,vwo),e(eb,Fwo),e(eb,Vj),e(Vj,Two),e(eb,Mwo),e(G,Ewo),e(G,ob),e(ob,lce),e(lce,Cwo),e(ob,wwo),e(ob,Xj),e(Xj,Awo),e(ob,Lwo),e(G,ywo),e(G,rb),e(rb,ice),e(ice,xwo),e(rb,$wo),e(rb,zj),e(zj,kwo),e(rb,Swo),e(G,Rwo),e(G,tb),e(tb,dce),e(dce,Pwo),e(tb,Bwo),e(tb,Wj),e(Wj,Iwo),e(tb,Nwo),e(Ye,qwo),e(Ye,ab),e(ab,jwo),e(ab,cce),e(cce,Dwo),e(ab,Gwo),e(ab,mce),e(mce,Owo),e(Ye,Vwo),M(nb,Ye,null),b(m,Pje,_),b(m,Si,_),e(Si,sb),e(sb,fce),M(Ly,fce,null),e(Si,Xwo),e(Si,gce),e(gce,zwo),b(m,Bje,_),b(m,$o,_),M(yy,$o,null),e($o,Wwo),e($o,Ri),e(Ri,Qwo),e(Ri,Qj),e(Qj,Hwo),e(Ri,Uwo),e(Ri,Hj),e(Hj,Jwo),e(Ri,Ywo),e($o,Kwo),e($o,xy),e(xy,Zwo),e(xy,hce),e(hce,eAo),e(xy,oAo),e($o,rAo),e($o,nt),M($y,nt,null),e(nt,tAo),e(nt,uce),e(uce,aAo),e(nt,nAo),e(nt,Pi),e(Pi,sAo),e(Pi,pce),e(pce,lAo),e(Pi,iAo),e(Pi,Uj),e(Uj,dAo),e(Pi,cAo),e(nt,mAo),M(lb,nt,null),e($o,fAo),e($o,Ke),M(ky,Ke,null),e(Ke,gAo),e(Ke,_ce),e(_ce,hAo),e(Ke,uAo),e(Ke,$a),e($a,pAo),e($a,bce),e(bce,_Ao),e($a,bAo),e($a,vce),e(vce,vAo),e($a,FAo),e($a,Fce),e(Fce,TAo),e($a,MAo),e(Ke,EAo),e(Ke,z),e(z,ib),e(ib,Tce),e(Tce,CAo),e(ib,wAo),e(ib,Jj),e(Jj,AAo),e(ib,LAo),e(z,yAo),e(z,db),e(db,Mce),e(Mce,xAo),e(db,$Ao),e(db,Yj),e(Yj,kAo),e(db,SAo),e(z,RAo),e(z,cb),e(cb,Ece),e(Ece,PAo),e(cb,BAo),e(cb,Kj),e(Kj,IAo),e(cb,NAo),e(z,qAo),e(z,mb),e(mb,Cce),e(Cce,jAo),e(mb,DAo),e(mb,Zj),e(Zj,GAo),e(mb,OAo),e(z,VAo),e(z,fb),e(fb,wce),e(wce,XAo),e(fb,zAo),e(fb,eD),e(eD,WAo),e(fb,QAo),e(z,HAo),e(z,gb),e(gb,Ace),e(Ace,UAo),e(gb,JAo),e(gb,oD),e(oD,YAo),e(gb,KAo),e(z,ZAo),e(z,hb),e(hb,Lce),e(Lce,e6o),e(hb,o6o),e(hb,rD),e(rD,r6o),e(hb,t6o),e(z,a6o),e(z,ub),e(ub,yce),e(yce,n6o),e(ub,s6o),e(ub,tD),e(tD,l6o),e(ub,i6o),e(z,d6o),e(z,pb),e(pb,xce),e(xce,c6o),e(pb,m6o),e(pb,aD),e(aD,f6o),e(pb,g6o),e(z,h6o),e(z,_b),e(_b,$ce),e($ce,u6o),e(_b,p6o),e(_b,nD),e(nD,_6o),e(_b,b6o),e(z,v6o),e(z,bb),e(bb,kce),e(kce,F6o),e(bb,T6o),e(bb,sD),e(sD,M6o),e(bb,E6o),e(z,C6o),e(z,vb),e(vb,Sce),e(Sce,w6o),e(vb,A6o),e(vb,lD),e(lD,L6o),e(vb,y6o),e(z,x6o),e(z,Fb),e(Fb,Rce),e(Rce,$6o),e(Fb,k6o),e(Fb,iD),e(iD,S6o),e(Fb,R6o),e(z,P6o),e(z,Tb),e(Tb,Pce),e(Pce,B6o),e(Tb,I6o),e(Tb,dD),e(dD,N6o),e(Tb,q6o),e(z,j6o),e(z,Mb),e(Mb,Bce),e(Bce,D6o),e(Mb,G6o),e(Mb,cD),e(cD,O6o),e(Mb,V6o),e(z,X6o),e(z,Eb),e(Eb,Ice),e(Ice,z6o),e(Eb,W6o),e(Eb,mD),e(mD,Q6o),e(Eb,H6o),e(z,U6o),e(z,Cb),e(Cb,Nce),e(Nce,J6o),e(Cb,Y6o),e(Cb,fD),e(fD,K6o),e(Cb,Z6o),e(z,eLo),e(z,wb),e(wb,qce),e(qce,oLo),e(wb,rLo),e(wb,gD),e(gD,tLo),e(wb,aLo),e(z,nLo),e(z,Ab),e(Ab,jce),e(jce,sLo),e(Ab,lLo),e(Ab,hD),e(hD,iLo),e(Ab,dLo),e(z,cLo),e(z,Lb),e(Lb,Dce),e(Dce,mLo),e(Lb,fLo),e(Lb,uD),e(uD,gLo),e(Lb,hLo),e(z,uLo),e(z,yb),e(yb,Gce),e(Gce,pLo),e(yb,_Lo),e(yb,pD),e(pD,bLo),e(yb,vLo),e(z,FLo),e(z,xb),e(xb,Oce),e(Oce,TLo),e(xb,MLo),e(xb,_D),e(_D,ELo),e(xb,CLo),e(z,wLo),e(z,$b),e($b,Vce),e(Vce,ALo),e($b,LLo),e($b,bD),e(bD,yLo),e($b,xLo),e(z,$Lo),e(z,kb),e(kb,Xce),e(Xce,kLo),e(kb,SLo),e(kb,vD),e(vD,RLo),e(kb,PLo),e(z,BLo),e(z,Sb),e(Sb,zce),e(zce,ILo),e(Sb,NLo),e(Sb,FD),e(FD,qLo),e(Sb,jLo),e(z,DLo),e(z,Rb),e(Rb,Wce),e(Wce,GLo),e(Rb,OLo),e(Rb,TD),e(TD,VLo),e(Rb,XLo),e(z,zLo),e(z,Pb),e(Pb,Qce),e(Qce,WLo),e(Pb,QLo),e(Pb,MD),e(MD,HLo),e(Pb,ULo),e(z,JLo),e(z,Bb),e(Bb,Hce),e(Hce,YLo),e(Bb,KLo),e(Bb,ED),e(ED,ZLo),e(Bb,eyo),e(z,oyo),e(z,Ib),e(Ib,Uce),e(Uce,ryo),e(Ib,tyo),e(Ib,CD),e(CD,ayo),e(Ib,nyo),e(z,syo),e(z,Nb),e(Nb,Jce),e(Jce,lyo),e(Nb,iyo),e(Nb,wD),e(wD,dyo),e(Nb,cyo),e(z,myo),e(z,qb),e(qb,Yce),e(Yce,fyo),e(qb,gyo),e(qb,AD),e(AD,hyo),e(qb,uyo),e(z,pyo),e(z,jb),e(jb,Kce),e(Kce,_yo),e(jb,byo),e(jb,LD),e(LD,vyo),e(jb,Fyo),e(z,Tyo),e(z,Db),e(Db,Zce),e(Zce,Myo),e(Db,Eyo),e(Db,yD),e(yD,Cyo),e(Db,wyo),e(z,Ayo),e(z,Gb),e(Gb,eme),e(eme,Lyo),e(Gb,yyo),e(Gb,xD),e(xD,xyo),e(Gb,$yo),e(z,kyo),e(z,Ob),e(Ob,ome),e(ome,Syo),e(Ob,Ryo),e(Ob,$D),e($D,Pyo),e(Ob,Byo),e(z,Iyo),e(z,Vb),e(Vb,rme),e(rme,Nyo),e(Vb,qyo),e(Vb,kD),e(kD,jyo),e(Vb,Dyo),e(z,Gyo),e(z,Xb),e(Xb,tme),e(tme,Oyo),e(Xb,Vyo),e(Xb,SD),e(SD,Xyo),e(Xb,zyo),e(z,Wyo),e(z,zb),e(zb,ame),e(ame,Qyo),e(zb,Hyo),e(zb,RD),e(RD,Uyo),e(zb,Jyo),e(Ke,Yyo),e(Ke,Wb),e(Wb,Kyo),e(Wb,nme),e(nme,Zyo),e(Wb,e7o),e(Wb,sme),e(sme,o7o),e(Ke,r7o),M(Qb,Ke,null),b(m,Ije,_),b(m,Bi,_),e(Bi,Hb),e(Hb,lme),M(Sy,lme,null),e(Bi,t7o),e(Bi,ime),e(ime,a7o),b(m,Nje,_),b(m,ko,_),M(Ry,ko,null),e(ko,n7o),e(ko,Ii),e(Ii,s7o),e(Ii,PD),e(PD,l7o),e(Ii,i7o),e(Ii,BD),e(BD,d7o),e(Ii,c7o),e(ko,m7o),e(ko,Py),e(Py,f7o),e(Py,dme),e(dme,g7o),e(Py,h7o),e(ko,u7o),e(ko,st),M(By,st,null),e(st,p7o),e(st,cme),e(cme,_7o),e(st,b7o),e(st,Ni),e(Ni,v7o),e(Ni,mme),e(mme,F7o),e(Ni,T7o),e(Ni,ID),e(ID,M7o),e(Ni,E7o),e(st,C7o),M(Ub,st,null),e(ko,w7o),e(ko,Ze),M(Iy,Ze,null),e(Ze,A7o),e(Ze,fme),e(fme,L7o),e(Ze,y7o),e(Ze,ka),e(ka,x7o),e(ka,gme),e(gme,$7o),e(ka,k7o),e(ka,hme),e(hme,S7o),e(ka,R7o),e(ka,ume),e(ume,P7o),e(ka,B7o),e(Ze,I7o),e(Ze,Q),e(Q,Jb),e(Jb,pme),e(pme,N7o),e(Jb,q7o),e(Jb,ND),e(ND,j7o),e(Jb,D7o),e(Q,G7o),e(Q,Yb),e(Yb,_me),e(_me,O7o),e(Yb,V7o),e(Yb,qD),e(qD,X7o),e(Yb,z7o),e(Q,W7o),e(Q,Kb),e(Kb,bme),e(bme,Q7o),e(Kb,H7o),e(Kb,jD),e(jD,U7o),e(Kb,J7o),e(Q,Y7o),e(Q,Zb),e(Zb,vme),e(vme,K7o),e(Zb,Z7o),e(Zb,DD),e(DD,e8o),e(Zb,o8o),e(Q,r8o),e(Q,e2),e(e2,Fme),e(Fme,t8o),e(e2,a8o),e(e2,GD),e(GD,n8o),e(e2,s8o),e(Q,l8o),e(Q,o2),e(o2,Tme),e(Tme,i8o),e(o2,d8o),e(o2,OD),e(OD,c8o),e(o2,m8o),e(Q,f8o),e(Q,r2),e(r2,Mme),e(Mme,g8o),e(r2,h8o),e(r2,VD),e(VD,u8o),e(r2,p8o),e(Q,_8o),e(Q,t2),e(t2,Eme),e(Eme,b8o),e(t2,v8o),e(t2,XD),e(XD,F8o),e(t2,T8o),e(Q,M8o),e(Q,a2),e(a2,Cme),e(Cme,E8o),e(a2,C8o),e(a2,zD),e(zD,w8o),e(a2,A8o),e(Q,L8o),e(Q,n2),e(n2,wme),e(wme,y8o),e(n2,x8o),e(n2,WD),e(WD,$8o),e(n2,k8o),e(Q,S8o),e(Q,s2),e(s2,Ame),e(Ame,R8o),e(s2,P8o),e(s2,QD),e(QD,B8o),e(s2,I8o),e(Q,N8o),e(Q,l2),e(l2,Lme),e(Lme,q8o),e(l2,j8o),e(l2,HD),e(HD,D8o),e(l2,G8o),e(Q,O8o),e(Q,i2),e(i2,yme),e(yme,V8o),e(i2,X8o),e(i2,UD),e(UD,z8o),e(i2,W8o),e(Q,Q8o),e(Q,d2),e(d2,xme),e(xme,H8o),e(d2,U8o),e(d2,JD),e(JD,J8o),e(d2,Y8o),e(Q,K8o),e(Q,c2),e(c2,$me),e($me,Z8o),e(c2,e9o),e(c2,YD),e(YD,o9o),e(c2,r9o),e(Q,t9o),e(Q,m2),e(m2,kme),e(kme,a9o),e(m2,n9o),e(m2,KD),e(KD,s9o),e(m2,l9o),e(Q,i9o),e(Q,f2),e(f2,Sme),e(Sme,d9o),e(f2,c9o),e(f2,ZD),e(ZD,m9o),e(f2,f9o),e(Q,g9o),e(Q,g2),e(g2,Rme),e(Rme,h9o),e(g2,u9o),e(g2,eG),e(eG,p9o),e(g2,_9o),e(Q,b9o),e(Q,h2),e(h2,Pme),e(Pme,v9o),e(h2,F9o),e(h2,oG),e(oG,T9o),e(h2,M9o),e(Q,E9o),e(Q,u2),e(u2,Bme),e(Bme,C9o),e(u2,w9o),e(u2,rG),e(rG,A9o),e(u2,L9o),e(Q,y9o),e(Q,p2),e(p2,Ime),e(Ime,x9o),e(p2,$9o),e(p2,tG),e(tG,k9o),e(p2,S9o),e(Q,R9o),e(Q,_2),e(_2,Nme),e(Nme,P9o),e(_2,B9o),e(_2,aG),e(aG,I9o),e(_2,N9o),e(Q,q9o),e(Q,b2),e(b2,qme),e(qme,j9o),e(b2,D9o),e(b2,nG),e(nG,G9o),e(b2,O9o),e(Q,V9o),e(Q,v2),e(v2,jme),e(jme,X9o),e(v2,z9o),e(v2,sG),e(sG,W9o),e(v2,Q9o),e(Q,H9o),e(Q,F2),e(F2,Dme),e(Dme,U9o),e(F2,J9o),e(F2,lG),e(lG,Y9o),e(F2,K9o),e(Q,Z9o),e(Q,T2),e(T2,Gme),e(Gme,exo),e(T2,oxo),e(T2,iG),e(iG,rxo),e(T2,txo),e(Q,axo),e(Q,M2),e(M2,Ome),e(Ome,nxo),e(M2,sxo),e(M2,dG),e(dG,lxo),e(M2,ixo),e(Q,dxo),e(Q,E2),e(E2,Vme),e(Vme,cxo),e(E2,mxo),e(E2,cG),e(cG,fxo),e(E2,gxo),e(Q,hxo),e(Q,C2),e(C2,Xme),e(Xme,uxo),e(C2,pxo),e(C2,mG),e(mG,_xo),e(C2,bxo),e(Q,vxo),e(Q,w2),e(w2,zme),e(zme,Fxo),e(w2,Txo),e(w2,fG),e(fG,Mxo),e(w2,Exo),e(Q,Cxo),e(Q,A2),e(A2,Wme),e(Wme,wxo),e(A2,Axo),e(A2,gG),e(gG,Lxo),e(A2,yxo),e(Q,xxo),e(Q,L2),e(L2,Qme),e(Qme,$xo),e(L2,kxo),e(L2,Hme),e(Hme,Sxo),e(L2,Rxo),e(Q,Pxo),e(Q,y2),e(y2,Ume),e(Ume,Bxo),e(y2,Ixo),e(y2,hG),e(hG,Nxo),e(y2,qxo),e(Q,jxo),e(Q,x2),e(x2,Jme),e(Jme,Dxo),e(x2,Gxo),e(x2,uG),e(uG,Oxo),e(x2,Vxo),e(Q,Xxo),e(Q,$2),e($2,Yme),e(Yme,zxo),e($2,Wxo),e($2,pG),e(pG,Qxo),e($2,Hxo),e(Q,Uxo),e(Q,k2),e(k2,Kme),e(Kme,Jxo),e(k2,Yxo),e(k2,_G),e(_G,Kxo),e(k2,Zxo),e(Ze,e$o),e(Ze,S2),e(S2,o$o),e(S2,Zme),e(Zme,r$o),e(S2,t$o),e(S2,efe),e(efe,a$o),e(Ze,n$o),M(R2,Ze,null),b(m,qje,_),b(m,qi,_),e(qi,P2),e(P2,ofe),M(Ny,ofe,null),e(qi,s$o),e(qi,rfe),e(rfe,l$o),b(m,jje,_),b(m,So,_),M(qy,So,null),e(So,i$o),e(So,ji),e(ji,d$o),e(ji,bG),e(bG,c$o),e(ji,m$o),e(ji,vG),e(vG,f$o),e(ji,g$o),e(So,h$o),e(So,jy),e(jy,u$o),e(jy,tfe),e(tfe,p$o),e(jy,_$o),e(So,b$o),e(So,lt),M(Dy,lt,null),e(lt,v$o),e(lt,afe),e(afe,F$o),e(lt,T$o),e(lt,Di),e(Di,M$o),e(Di,nfe),e(nfe,E$o),e(Di,C$o),e(Di,FG),e(FG,w$o),e(Di,A$o),e(lt,L$o),M(B2,lt,null),e(So,y$o),e(So,eo),M(Gy,eo,null),e(eo,x$o),e(eo,sfe),e(sfe,$$o),e(eo,k$o),e(eo,Sa),e(Sa,S$o),e(Sa,lfe),e(lfe,R$o),e(Sa,P$o),e(Sa,ife),e(ife,B$o),e(Sa,I$o),e(Sa,dfe),e(dfe,N$o),e(Sa,q$o),e(eo,j$o),e(eo,pe),e(pe,I2),e(I2,cfe),e(cfe,D$o),e(I2,G$o),e(I2,TG),e(TG,O$o),e(I2,V$o),e(pe,X$o),e(pe,N2),e(N2,mfe),e(mfe,z$o),e(N2,W$o),e(N2,MG),e(MG,Q$o),e(N2,H$o),e(pe,U$o),e(pe,q2),e(q2,ffe),e(ffe,J$o),e(q2,Y$o),e(q2,EG),e(EG,K$o),e(q2,Z$o),e(pe,eko),e(pe,j2),e(j2,gfe),e(gfe,oko),e(j2,rko),e(j2,CG),e(CG,tko),e(j2,ako),e(pe,nko),e(pe,D2),e(D2,hfe),e(hfe,sko),e(D2,lko),e(D2,wG),e(wG,iko),e(D2,dko),e(pe,cko),e(pe,G2),e(G2,ufe),e(ufe,mko),e(G2,fko),e(G2,AG),e(AG,gko),e(G2,hko),e(pe,uko),e(pe,O2),e(O2,pfe),e(pfe,pko),e(O2,_ko),e(O2,LG),e(LG,bko),e(O2,vko),e(pe,Fko),e(pe,V2),e(V2,_fe),e(_fe,Tko),e(V2,Mko),e(V2,yG),e(yG,Eko),e(V2,Cko),e(pe,wko),e(pe,X2),e(X2,bfe),e(bfe,Ako),e(X2,Lko),e(X2,xG),e(xG,yko),e(X2,xko),e(pe,$ko),e(pe,z2),e(z2,vfe),e(vfe,kko),e(z2,Sko),e(z2,$G),e($G,Rko),e(z2,Pko),e(pe,Bko),e(pe,W2),e(W2,Ffe),e(Ffe,Iko),e(W2,Nko),e(W2,kG),e(kG,qko),e(W2,jko),e(pe,Dko),e(pe,Q2),e(Q2,Tfe),e(Tfe,Gko),e(Q2,Oko),e(Q2,SG),e(SG,Vko),e(Q2,Xko),e(pe,zko),e(pe,H2),e(H2,Mfe),e(Mfe,Wko),e(H2,Qko),e(H2,RG),e(RG,Hko),e(H2,Uko),e(pe,Jko),e(pe,U2),e(U2,Efe),e(Efe,Yko),e(U2,Kko),e(U2,PG),e(PG,Zko),e(U2,eSo),e(pe,oSo),e(pe,J2),e(J2,Cfe),e(Cfe,rSo),e(J2,tSo),e(J2,BG),e(BG,aSo),e(J2,nSo),e(pe,sSo),e(pe,Y2),e(Y2,wfe),e(wfe,lSo),e(Y2,iSo),e(Y2,IG),e(IG,dSo),e(Y2,cSo),e(eo,mSo),e(eo,K2),e(K2,fSo),e(K2,Afe),e(Afe,gSo),e(K2,hSo),e(K2,Lfe),e(Lfe,uSo),e(eo,pSo),M(Z2,eo,null),b(m,Dje,_),b(m,Gi,_),e(Gi,ev),e(ev,yfe),M(Oy,yfe,null),e(Gi,_So),e(Gi,xfe),e(xfe,bSo),b(m,Gje,_),b(m,Ro,_),M(Vy,Ro,null),e(Ro,vSo),e(Ro,Oi),e(Oi,FSo),e(Oi,NG),e(NG,TSo),e(Oi,MSo),e(Oi,qG),e(qG,ESo),e(Oi,CSo),e(Ro,wSo),e(Ro,Xy),e(Xy,ASo),e(Xy,$fe),e($fe,LSo),e(Xy,ySo),e(Ro,xSo),e(Ro,it),M(zy,it,null),e(it,$So),e(it,kfe),e(kfe,kSo),e(it,SSo),e(it,Vi),e(Vi,RSo),e(Vi,Sfe),e(Sfe,PSo),e(Vi,BSo),e(Vi,jG),e(jG,ISo),e(Vi,NSo),e(it,qSo),M(ov,it,null),e(Ro,jSo),e(Ro,oo),M(Wy,oo,null),e(oo,DSo),e(oo,Rfe),e(Rfe,GSo),e(oo,OSo),e(oo,Ra),e(Ra,VSo),e(Ra,Pfe),e(Pfe,XSo),e(Ra,zSo),e(Ra,Bfe),e(Bfe,WSo),e(Ra,QSo),e(Ra,Ife),e(Ife,HSo),e(Ra,USo),e(oo,JSo),e(oo,N),e(N,rv),e(rv,Nfe),e(Nfe,YSo),e(rv,KSo),e(rv,DG),e(DG,ZSo),e(rv,eRo),e(N,oRo),e(N,tv),e(tv,qfe),e(qfe,rRo),e(tv,tRo),e(tv,GG),e(GG,aRo),e(tv,nRo),e(N,sRo),e(N,av),e(av,jfe),e(jfe,lRo),e(av,iRo),e(av,OG),e(OG,dRo),e(av,cRo),e(N,mRo),e(N,nv),e(nv,Dfe),e(Dfe,fRo),e(nv,gRo),e(nv,VG),e(VG,hRo),e(nv,uRo),e(N,pRo),e(N,sv),e(sv,Gfe),e(Gfe,_Ro),e(sv,bRo),e(sv,XG),e(XG,vRo),e(sv,FRo),e(N,TRo),e(N,lv),e(lv,Ofe),e(Ofe,MRo),e(lv,ERo),e(lv,zG),e(zG,CRo),e(lv,wRo),e(N,ARo),e(N,iv),e(iv,Vfe),e(Vfe,LRo),e(iv,yRo),e(iv,WG),e(WG,xRo),e(iv,$Ro),e(N,kRo),e(N,dv),e(dv,Xfe),e(Xfe,SRo),e(dv,RRo),e(dv,QG),e(QG,PRo),e(dv,BRo),e(N,IRo),e(N,cv),e(cv,zfe),e(zfe,NRo),e(cv,qRo),e(cv,HG),e(HG,jRo),e(cv,DRo),e(N,GRo),e(N,mv),e(mv,Wfe),e(Wfe,ORo),e(mv,VRo),e(mv,UG),e(UG,XRo),e(mv,zRo),e(N,WRo),e(N,fv),e(fv,Qfe),e(Qfe,QRo),e(fv,HRo),e(fv,JG),e(JG,URo),e(fv,JRo),e(N,YRo),e(N,gv),e(gv,Hfe),e(Hfe,KRo),e(gv,ZRo),e(gv,YG),e(YG,ePo),e(gv,oPo),e(N,rPo),e(N,hv),e(hv,Ufe),e(Ufe,tPo),e(hv,aPo),e(hv,KG),e(KG,nPo),e(hv,sPo),e(N,lPo),e(N,uv),e(uv,Jfe),e(Jfe,iPo),e(uv,dPo),e(uv,ZG),e(ZG,cPo),e(uv,mPo),e(N,fPo),e(N,pv),e(pv,Yfe),e(Yfe,gPo),e(pv,hPo),e(pv,eO),e(eO,uPo),e(pv,pPo),e(N,_Po),e(N,_v),e(_v,Kfe),e(Kfe,bPo),e(_v,vPo),e(_v,oO),e(oO,FPo),e(_v,TPo),e(N,MPo),e(N,bv),e(bv,Zfe),e(Zfe,EPo),e(bv,CPo),e(bv,rO),e(rO,wPo),e(bv,APo),e(N,LPo),e(N,vv),e(vv,ege),e(ege,yPo),e(vv,xPo),e(vv,tO),e(tO,$Po),e(vv,kPo),e(N,SPo),e(N,Fv),e(Fv,oge),e(oge,RPo),e(Fv,PPo),e(Fv,aO),e(aO,BPo),e(Fv,IPo),e(N,NPo),e(N,Tv),e(Tv,rge),e(rge,qPo),e(Tv,jPo),e(Tv,nO),e(nO,DPo),e(Tv,GPo),e(N,OPo),e(N,Mv),e(Mv,tge),e(tge,VPo),e(Mv,XPo),e(Mv,sO),e(sO,zPo),e(Mv,WPo),e(N,QPo),e(N,Ev),e(Ev,age),e(age,HPo),e(Ev,UPo),e(Ev,lO),e(lO,JPo),e(Ev,YPo),e(N,KPo),e(N,Cv),e(Cv,nge),e(nge,ZPo),e(Cv,eBo),e(Cv,iO),e(iO,oBo),e(Cv,rBo),e(N,tBo),e(N,wv),e(wv,sge),e(sge,aBo),e(wv,nBo),e(wv,dO),e(dO,sBo),e(wv,lBo),e(N,iBo),e(N,Av),e(Av,lge),e(lge,dBo),e(Av,cBo),e(Av,cO),e(cO,mBo),e(Av,fBo),e(N,gBo),e(N,Lv),e(Lv,ige),e(ige,hBo),e(Lv,uBo),e(Lv,mO),e(mO,pBo),e(Lv,_Bo),e(N,bBo),e(N,yv),e(yv,dge),e(dge,vBo),e(yv,FBo),e(yv,fO),e(fO,TBo),e(yv,MBo),e(N,EBo),e(N,xv),e(xv,cge),e(cge,CBo),e(xv,wBo),e(xv,gO),e(gO,ABo),e(xv,LBo),e(N,yBo),e(N,$v),e($v,mge),e(mge,xBo),e($v,$Bo),e($v,hO),e(hO,kBo),e($v,SBo),e(N,RBo),e(N,kv),e(kv,fge),e(fge,PBo),e(kv,BBo),e(kv,uO),e(uO,IBo),e(kv,NBo),e(N,qBo),e(N,Sv),e(Sv,gge),e(gge,jBo),e(Sv,DBo),e(Sv,pO),e(pO,GBo),e(Sv,OBo),e(N,VBo),e(N,Rv),e(Rv,hge),e(hge,XBo),e(Rv,zBo),e(Rv,_O),e(_O,WBo),e(Rv,QBo),e(N,HBo),e(N,Pv),e(Pv,uge),e(uge,UBo),e(Pv,JBo),e(Pv,bO),e(bO,YBo),e(Pv,KBo),e(N,ZBo),e(N,Bv),e(Bv,pge),e(pge,eIo),e(Bv,oIo),e(Bv,vO),e(vO,rIo),e(Bv,tIo),e(N,aIo),e(N,Iv),e(Iv,_ge),e(_ge,nIo),e(Iv,sIo),e(Iv,FO),e(FO,lIo),e(Iv,iIo),e(N,dIo),e(N,Nv),e(Nv,bge),e(bge,cIo),e(Nv,mIo),e(Nv,TO),e(TO,fIo),e(Nv,gIo),e(N,hIo),e(N,qv),e(qv,vge),e(vge,uIo),e(qv,pIo),e(qv,MO),e(MO,_Io),e(qv,bIo),e(N,vIo),e(N,jv),e(jv,Fge),e(Fge,FIo),e(jv,TIo),e(jv,EO),e(EO,MIo),e(jv,EIo),e(N,CIo),e(N,Dv),e(Dv,Tge),e(Tge,wIo),e(Dv,AIo),e(Dv,CO),e(CO,LIo),e(Dv,yIo),e(N,xIo),e(N,Gv),e(Gv,Mge),e(Mge,$Io),e(Gv,kIo),e(Gv,wO),e(wO,SIo),e(Gv,RIo),e(N,PIo),e(N,Ov),e(Ov,Ege),e(Ege,BIo),e(Ov,IIo),e(Ov,AO),e(AO,NIo),e(Ov,qIo),e(N,jIo),e(N,Vv),e(Vv,Cge),e(Cge,DIo),e(Vv,GIo),e(Vv,LO),e(LO,OIo),e(Vv,VIo),e(N,XIo),e(N,Xv),e(Xv,wge),e(wge,zIo),e(Xv,WIo),e(Xv,yO),e(yO,QIo),e(Xv,HIo),e(N,UIo),e(N,zv),e(zv,Age),e(Age,JIo),e(zv,YIo),e(zv,xO),e(xO,KIo),e(zv,ZIo),e(N,eNo),e(N,Wv),e(Wv,Lge),e(Lge,oNo),e(Wv,rNo),e(Wv,$O),e($O,tNo),e(Wv,aNo),e(N,nNo),e(N,Qv),e(Qv,yge),e(yge,sNo),e(Qv,lNo),e(Qv,kO),e(kO,iNo),e(Qv,dNo),e(N,cNo),e(N,Hv),e(Hv,xge),e(xge,mNo),e(Hv,fNo),e(Hv,SO),e(SO,gNo),e(Hv,hNo),e(oo,uNo),e(oo,Uv),e(Uv,pNo),e(Uv,$ge),e($ge,_No),e(Uv,bNo),e(Uv,kge),e(kge,vNo),e(oo,FNo),M(Jv,oo,null),b(m,Oje,_),b(m,Xi,_),e(Xi,Yv),e(Yv,Sge),M(Qy,Sge,null),e(Xi,TNo),e(Xi,Rge),e(Rge,MNo),b(m,Vje,_),b(m,Po,_),M(Hy,Po,null),e(Po,ENo),e(Po,zi),e(zi,CNo),e(zi,RO),e(RO,wNo),e(zi,ANo),e(zi,PO),e(PO,LNo),e(zi,yNo),e(Po,xNo),e(Po,Uy),e(Uy,$No),e(Uy,Pge),e(Pge,kNo),e(Uy,SNo),e(Po,RNo),e(Po,dt),M(Jy,dt,null),e(dt,PNo),e(dt,Bge),e(Bge,BNo),e(dt,INo),e(dt,Wi),e(Wi,NNo),e(Wi,Ige),e(Ige,qNo),e(Wi,jNo),e(Wi,BO),e(BO,DNo),e(Wi,GNo),e(dt,ONo),M(Kv,dt,null),e(Po,VNo),e(Po,ro),M(Yy,ro,null),e(ro,XNo),e(ro,Nge),e(Nge,zNo),e(ro,WNo),e(ro,Pa),e(Pa,QNo),e(Pa,qge),e(qge,HNo),e(Pa,UNo),e(Pa,jge),e(jge,JNo),e(Pa,YNo),e(Pa,Dge),e(Dge,KNo),e(Pa,ZNo),e(ro,eqo),e(ro,Z),e(Z,Zv),e(Zv,Gge),e(Gge,oqo),e(Zv,rqo),e(Zv,IO),e(IO,tqo),e(Zv,aqo),e(Z,nqo),e(Z,eF),e(eF,Oge),e(Oge,sqo),e(eF,lqo),e(eF,NO),e(NO,iqo),e(eF,dqo),e(Z,cqo),e(Z,oF),e(oF,Vge),e(Vge,mqo),e(oF,fqo),e(oF,qO),e(qO,gqo),e(oF,hqo),e(Z,uqo),e(Z,rF),e(rF,Xge),e(Xge,pqo),e(rF,_qo),e(rF,jO),e(jO,bqo),e(rF,vqo),e(Z,Fqo),e(Z,tF),e(tF,zge),e(zge,Tqo),e(tF,Mqo),e(tF,DO),e(DO,Eqo),e(tF,Cqo),e(Z,wqo),e(Z,aF),e(aF,Wge),e(Wge,Aqo),e(aF,Lqo),e(aF,GO),e(GO,yqo),e(aF,xqo),e(Z,$qo),e(Z,nF),e(nF,Qge),e(Qge,kqo),e(nF,Sqo),e(nF,OO),e(OO,Rqo),e(nF,Pqo),e(Z,Bqo),e(Z,sF),e(sF,Hge),e(Hge,Iqo),e(sF,Nqo),e(sF,VO),e(VO,qqo),e(sF,jqo),e(Z,Dqo),e(Z,lF),e(lF,Uge),e(Uge,Gqo),e(lF,Oqo),e(lF,XO),e(XO,Vqo),e(lF,Xqo),e(Z,zqo),e(Z,iF),e(iF,Jge),e(Jge,Wqo),e(iF,Qqo),e(iF,zO),e(zO,Hqo),e(iF,Uqo),e(Z,Jqo),e(Z,dF),e(dF,Yge),e(Yge,Yqo),e(dF,Kqo),e(dF,WO),e(WO,Zqo),e(dF,ejo),e(Z,ojo),e(Z,cF),e(cF,Kge),e(Kge,rjo),e(cF,tjo),e(cF,QO),e(QO,ajo),e(cF,njo),e(Z,sjo),e(Z,mF),e(mF,Zge),e(Zge,ljo),e(mF,ijo),e(mF,HO),e(HO,djo),e(mF,cjo),e(Z,mjo),e(Z,fF),e(fF,ehe),e(ehe,fjo),e(fF,gjo),e(fF,UO),e(UO,hjo),e(fF,ujo),e(Z,pjo),e(Z,gF),e(gF,ohe),e(ohe,_jo),e(gF,bjo),e(gF,JO),e(JO,vjo),e(gF,Fjo),e(Z,Tjo),e(Z,hF),e(hF,rhe),e(rhe,Mjo),e(hF,Ejo),e(hF,YO),e(YO,Cjo),e(hF,wjo),e(Z,Ajo),e(Z,uF),e(uF,the),e(the,Ljo),e(uF,yjo),e(uF,KO),e(KO,xjo),e(uF,$jo),e(Z,kjo),e(Z,pF),e(pF,ahe),e(ahe,Sjo),e(pF,Rjo),e(pF,ZO),e(ZO,Pjo),e(pF,Bjo),e(Z,Ijo),e(Z,_F),e(_F,nhe),e(nhe,Njo),e(_F,qjo),e(_F,eV),e(eV,jjo),e(_F,Djo),e(Z,Gjo),e(Z,bF),e(bF,she),e(she,Ojo),e(bF,Vjo),e(bF,oV),e(oV,Xjo),e(bF,zjo),e(Z,Wjo),e(Z,vF),e(vF,lhe),e(lhe,Qjo),e(vF,Hjo),e(vF,rV),e(rV,Ujo),e(vF,Jjo),e(Z,Yjo),e(Z,FF),e(FF,ihe),e(ihe,Kjo),e(FF,Zjo),e(FF,tV),e(tV,eDo),e(FF,oDo),e(Z,rDo),e(Z,TF),e(TF,dhe),e(dhe,tDo),e(TF,aDo),e(TF,aV),e(aV,nDo),e(TF,sDo),e(Z,lDo),e(Z,MF),e(MF,che),e(che,iDo),e(MF,dDo),e(MF,nV),e(nV,cDo),e(MF,mDo),e(Z,fDo),e(Z,EF),e(EF,mhe),e(mhe,gDo),e(EF,hDo),e(EF,sV),e(sV,uDo),e(EF,pDo),e(Z,_Do),e(Z,CF),e(CF,fhe),e(fhe,bDo),e(CF,vDo),e(CF,lV),e(lV,FDo),e(CF,TDo),e(Z,MDo),e(Z,wF),e(wF,ghe),e(ghe,EDo),e(wF,CDo),e(wF,iV),e(iV,wDo),e(wF,ADo),e(Z,LDo),e(Z,AF),e(AF,hhe),e(hhe,yDo),e(AF,xDo),e(AF,dV),e(dV,$Do),e(AF,kDo),e(Z,SDo),e(Z,LF),e(LF,uhe),e(uhe,RDo),e(LF,PDo),e(LF,cV),e(cV,BDo),e(LF,IDo),e(ro,NDo),e(ro,yF),e(yF,qDo),e(yF,phe),e(phe,jDo),e(yF,DDo),e(yF,_he),e(_he,GDo),e(ro,ODo),M(xF,ro,null),b(m,Xje,_),b(m,Qi,_),e(Qi,$F),e($F,bhe),M(Ky,bhe,null),e(Qi,VDo),e(Qi,vhe),e(vhe,XDo),b(m,zje,_),b(m,Bo,_),M(Zy,Bo,null),e(Bo,zDo),e(Bo,Hi),e(Hi,WDo),e(Hi,mV),e(mV,QDo),e(Hi,HDo),e(Hi,fV),e(fV,UDo),e(Hi,JDo),e(Bo,YDo),e(Bo,e7),e(e7,KDo),e(e7,Fhe),e(Fhe,ZDo),e(e7,eGo),e(Bo,oGo),e(Bo,ct),M(o7,ct,null),e(ct,rGo),e(ct,The),e(The,tGo),e(ct,aGo),e(ct,Ui),e(Ui,nGo),e(Ui,Mhe),e(Mhe,sGo),e(Ui,lGo),e(Ui,gV),e(gV,iGo),e(Ui,dGo),e(ct,cGo),M(kF,ct,null),e(Bo,mGo),e(Bo,to),M(r7,to,null),e(to,fGo),e(to,Ehe),e(Ehe,gGo),e(to,hGo),e(to,Ba),e(Ba,uGo),e(Ba,Che),e(Che,pGo),e(Ba,_Go),e(Ba,whe),e(whe,bGo),e(Ba,vGo),e(Ba,Ahe),e(Ahe,FGo),e(Ba,TGo),e(to,MGo),e(to,Yr),e(Yr,SF),e(SF,Lhe),e(Lhe,EGo),e(SF,CGo),e(SF,hV),e(hV,wGo),e(SF,AGo),e(Yr,LGo),e(Yr,RF),e(RF,yhe),e(yhe,yGo),e(RF,xGo),e(RF,uV),e(uV,$Go),e(RF,kGo),e(Yr,SGo),e(Yr,PF),e(PF,xhe),e(xhe,RGo),e(PF,PGo),e(PF,pV),e(pV,BGo),e(PF,IGo),e(Yr,NGo),e(Yr,BF),e(BF,$he),e($he,qGo),e(BF,jGo),e(BF,_V),e(_V,DGo),e(BF,GGo),e(Yr,OGo),e(Yr,IF),e(IF,khe),e(khe,VGo),e(IF,XGo),e(IF,bV),e(bV,zGo),e(IF,WGo),e(to,QGo),e(to,NF),e(NF,HGo),e(NF,She),e(She,UGo),e(NF,JGo),e(NF,Rhe),e(Rhe,YGo),e(to,KGo),M(qF,to,null),b(m,Wje,_),b(m,Ji,_),e(Ji,jF),e(jF,Phe),M(t7,Phe,null),e(Ji,ZGo),e(Ji,Bhe),e(Bhe,eOo),b(m,Qje,_),b(m,Io,_),M(a7,Io,null),e(Io,oOo),e(Io,Yi),e(Yi,rOo),e(Yi,vV),e(vV,tOo),e(Yi,aOo),e(Yi,FV),e(FV,nOo),e(Yi,sOo),e(Io,lOo),e(Io,n7),e(n7,iOo),e(n7,Ihe),e(Ihe,dOo),e(n7,cOo),e(Io,mOo),e(Io,mt),M(s7,mt,null),e(mt,fOo),e(mt,Nhe),e(Nhe,gOo),e(mt,hOo),e(mt,Ki),e(Ki,uOo),e(Ki,qhe),e(qhe,pOo),e(Ki,_Oo),e(Ki,TV),e(TV,bOo),e(Ki,vOo),e(mt,FOo),M(DF,mt,null),e(Io,TOo),e(Io,ao),M(l7,ao,null),e(ao,MOo),e(ao,jhe),e(jhe,EOo),e(ao,COo),e(ao,Ia),e(Ia,wOo),e(Ia,Dhe),e(Dhe,AOo),e(Ia,LOo),e(Ia,Ghe),e(Ghe,yOo),e(Ia,xOo),e(Ia,Ohe),e(Ohe,$Oo),e(Ia,kOo),e(ao,SOo),e(ao,U),e(U,GF),e(GF,Vhe),e(Vhe,ROo),e(GF,POo),e(GF,MV),e(MV,BOo),e(GF,IOo),e(U,NOo),e(U,OF),e(OF,Xhe),e(Xhe,qOo),e(OF,jOo),e(OF,EV),e(EV,DOo),e(OF,GOo),e(U,OOo),e(U,VF),e(VF,zhe),e(zhe,VOo),e(VF,XOo),e(VF,CV),e(CV,zOo),e(VF,WOo),e(U,QOo),e(U,XF),e(XF,Whe),e(Whe,HOo),e(XF,UOo),e(XF,wV),e(wV,JOo),e(XF,YOo),e(U,KOo),e(U,zF),e(zF,Qhe),e(Qhe,ZOo),e(zF,eVo),e(zF,AV),e(AV,oVo),e(zF,rVo),e(U,tVo),e(U,WF),e(WF,Hhe),e(Hhe,aVo),e(WF,nVo),e(WF,LV),e(LV,sVo),e(WF,lVo),e(U,iVo),e(U,QF),e(QF,Uhe),e(Uhe,dVo),e(QF,cVo),e(QF,yV),e(yV,mVo),e(QF,fVo),e(U,gVo),e(U,HF),e(HF,Jhe),e(Jhe,hVo),e(HF,uVo),e(HF,xV),e(xV,pVo),e(HF,_Vo),e(U,bVo),e(U,UF),e(UF,Yhe),e(Yhe,vVo),e(UF,FVo),e(UF,$V),e($V,TVo),e(UF,MVo),e(U,EVo),e(U,JF),e(JF,Khe),e(Khe,CVo),e(JF,wVo),e(JF,kV),e(kV,AVo),e(JF,LVo),e(U,yVo),e(U,YF),e(YF,Zhe),e(Zhe,xVo),e(YF,$Vo),e(YF,SV),e(SV,kVo),e(YF,SVo),e(U,RVo),e(U,KF),e(KF,eue),e(eue,PVo),e(KF,BVo),e(KF,RV),e(RV,IVo),e(KF,NVo),e(U,qVo),e(U,ZF),e(ZF,oue),e(oue,jVo),e(ZF,DVo),e(ZF,PV),e(PV,GVo),e(ZF,OVo),e(U,VVo),e(U,e1),e(e1,rue),e(rue,XVo),e(e1,zVo),e(e1,BV),e(BV,WVo),e(e1,QVo),e(U,HVo),e(U,o1),e(o1,tue),e(tue,UVo),e(o1,JVo),e(o1,IV),e(IV,YVo),e(o1,KVo),e(U,ZVo),e(U,r1),e(r1,aue),e(aue,eXo),e(r1,oXo),e(r1,NV),e(NV,rXo),e(r1,tXo),e(U,aXo),e(U,t1),e(t1,nue),e(nue,nXo),e(t1,sXo),e(t1,qV),e(qV,lXo),e(t1,iXo),e(U,dXo),e(U,a1),e(a1,sue),e(sue,cXo),e(a1,mXo),e(a1,jV),e(jV,fXo),e(a1,gXo),e(U,hXo),e(U,n1),e(n1,lue),e(lue,uXo),e(n1,pXo),e(n1,DV),e(DV,_Xo),e(n1,bXo),e(U,vXo),e(U,s1),e(s1,iue),e(iue,FXo),e(s1,TXo),e(s1,GV),e(GV,MXo),e(s1,EXo),e(U,CXo),e(U,l1),e(l1,due),e(due,wXo),e(l1,AXo),e(l1,OV),e(OV,LXo),e(l1,yXo),e(U,xXo),e(U,i1),e(i1,cue),e(cue,$Xo),e(i1,kXo),e(i1,VV),e(VV,SXo),e(i1,RXo),e(U,PXo),e(U,d1),e(d1,mue),e(mue,BXo),e(d1,IXo),e(d1,XV),e(XV,NXo),e(d1,qXo),e(U,jXo),e(U,c1),e(c1,fue),e(fue,DXo),e(c1,GXo),e(c1,zV),e(zV,OXo),e(c1,VXo),e(U,XXo),e(U,m1),e(m1,gue),e(gue,zXo),e(m1,WXo),e(m1,WV),e(WV,QXo),e(m1,HXo),e(U,UXo),e(U,f1),e(f1,hue),e(hue,JXo),e(f1,YXo),e(f1,QV),e(QV,KXo),e(f1,ZXo),e(U,ezo),e(U,g1),e(g1,uue),e(uue,ozo),e(g1,rzo),e(g1,HV),e(HV,tzo),e(g1,azo),e(U,nzo),e(U,h1),e(h1,pue),e(pue,szo),e(h1,lzo),e(h1,UV),e(UV,izo),e(h1,dzo),e(U,czo),e(U,u1),e(u1,_ue),e(_ue,mzo),e(u1,fzo),e(u1,JV),e(JV,gzo),e(u1,hzo),e(U,uzo),e(U,p1),e(p1,bue),e(bue,pzo),e(p1,_zo),e(p1,YV),e(YV,bzo),e(p1,vzo),e(U,Fzo),e(U,_1),e(_1,vue),e(vue,Tzo),e(_1,Mzo),e(_1,KV),e(KV,Ezo),e(_1,Czo),e(U,wzo),e(U,b1),e(b1,Fue),e(Fue,Azo),e(b1,Lzo),e(b1,ZV),e(ZV,yzo),e(b1,xzo),e(U,$zo),e(U,v1),e(v1,Tue),e(Tue,kzo),e(v1,Szo),e(v1,eX),e(eX,Rzo),e(v1,Pzo),e(U,Bzo),e(U,F1),e(F1,Mue),e(Mue,Izo),e(F1,Nzo),e(F1,oX),e(oX,qzo),e(F1,jzo),e(ao,Dzo),e(ao,T1),e(T1,Gzo),e(T1,Eue),e(Eue,Ozo),e(T1,Vzo),e(T1,Cue),e(Cue,Xzo),e(ao,zzo),M(M1,ao,null),b(m,Hje,_),b(m,Zi,_),e(Zi,E1),e(E1,wue),M(i7,wue,null),e(Zi,Wzo),e(Zi,Aue),e(Aue,Qzo),b(m,Uje,_),b(m,No,_),M(d7,No,null),e(No,Hzo),e(No,ed),e(ed,Uzo),e(ed,rX),e(rX,Jzo),e(ed,Yzo),e(ed,tX),e(tX,Kzo),e(ed,Zzo),e(No,eWo),e(No,c7),e(c7,oWo),e(c7,Lue),e(Lue,rWo),e(c7,tWo),e(No,aWo),e(No,ft),M(m7,ft,null),e(ft,nWo),e(ft,yue),e(yue,sWo),e(ft,lWo),e(ft,od),e(od,iWo),e(od,xue),e(xue,dWo),e(od,cWo),e(od,aX),e(aX,mWo),e(od,fWo),e(ft,gWo),M(C1,ft,null),e(No,hWo),e(No,no),M(f7,no,null),e(no,uWo),e(no,$ue),e($ue,pWo),e(no,_Wo),e(no,Na),e(Na,bWo),e(Na,kue),e(kue,vWo),e(Na,FWo),e(Na,Sue),e(Sue,TWo),e(Na,MWo),e(Na,Rue),e(Rue,EWo),e(Na,CWo),e(no,wWo),e(no,V),e(V,w1),e(w1,Pue),e(Pue,AWo),e(w1,LWo),e(w1,nX),e(nX,yWo),e(w1,xWo),e(V,$Wo),e(V,A1),e(A1,Bue),e(Bue,kWo),e(A1,SWo),e(A1,sX),e(sX,RWo),e(A1,PWo),e(V,BWo),e(V,L1),e(L1,Iue),e(Iue,IWo),e(L1,NWo),e(L1,lX),e(lX,qWo),e(L1,jWo),e(V,DWo),e(V,y1),e(y1,Nue),e(Nue,GWo),e(y1,OWo),e(y1,iX),e(iX,VWo),e(y1,XWo),e(V,zWo),e(V,x1),e(x1,que),e(que,WWo),e(x1,QWo),e(x1,dX),e(dX,HWo),e(x1,UWo),e(V,JWo),e(V,$1),e($1,jue),e(jue,YWo),e($1,KWo),e($1,cX),e(cX,ZWo),e($1,eQo),e(V,oQo),e(V,k1),e(k1,Due),e(Due,rQo),e(k1,tQo),e(k1,mX),e(mX,aQo),e(k1,nQo),e(V,sQo),e(V,S1),e(S1,Gue),e(Gue,lQo),e(S1,iQo),e(S1,fX),e(fX,dQo),e(S1,cQo),e(V,mQo),e(V,R1),e(R1,Oue),e(Oue,fQo),e(R1,gQo),e(R1,gX),e(gX,hQo),e(R1,uQo),e(V,pQo),e(V,P1),e(P1,Vue),e(Vue,_Qo),e(P1,bQo),e(P1,hX),e(hX,vQo),e(P1,FQo),e(V,TQo),e(V,B1),e(B1,Xue),e(Xue,MQo),e(B1,EQo),e(B1,uX),e(uX,CQo),e(B1,wQo),e(V,AQo),e(V,I1),e(I1,zue),e(zue,LQo),e(I1,yQo),e(I1,pX),e(pX,xQo),e(I1,$Qo),e(V,kQo),e(V,N1),e(N1,Wue),e(Wue,SQo),e(N1,RQo),e(N1,_X),e(_X,PQo),e(N1,BQo),e(V,IQo),e(V,q1),e(q1,Que),e(Que,NQo),e(q1,qQo),e(q1,bX),e(bX,jQo),e(q1,DQo),e(V,GQo),e(V,j1),e(j1,Hue),e(Hue,OQo),e(j1,VQo),e(j1,vX),e(vX,XQo),e(j1,zQo),e(V,WQo),e(V,D1),e(D1,Uue),e(Uue,QQo),e(D1,HQo),e(D1,FX),e(FX,UQo),e(D1,JQo),e(V,YQo),e(V,G1),e(G1,Jue),e(Jue,KQo),e(G1,ZQo),e(G1,TX),e(TX,eHo),e(G1,oHo),e(V,rHo),e(V,O1),e(O1,Yue),e(Yue,tHo),e(O1,aHo),e(O1,MX),e(MX,nHo),e(O1,sHo),e(V,lHo),e(V,V1),e(V1,Kue),e(Kue,iHo),e(V1,dHo),e(V1,EX),e(EX,cHo),e(V1,mHo),e(V,fHo),e(V,X1),e(X1,Zue),e(Zue,gHo),e(X1,hHo),e(X1,CX),e(CX,uHo),e(X1,pHo),e(V,_Ho),e(V,z1),e(z1,epe),e(epe,bHo),e(z1,vHo),e(z1,wX),e(wX,FHo),e(z1,THo),e(V,MHo),e(V,W1),e(W1,ope),e(ope,EHo),e(W1,CHo),e(W1,AX),e(AX,wHo),e(W1,AHo),e(V,LHo),e(V,Q1),e(Q1,rpe),e(rpe,yHo),e(Q1,xHo),e(Q1,LX),e(LX,$Ho),e(Q1,kHo),e(V,SHo),e(V,H1),e(H1,tpe),e(tpe,RHo),e(H1,PHo),e(H1,yX),e(yX,BHo),e(H1,IHo),e(V,NHo),e(V,U1),e(U1,ape),e(ape,qHo),e(U1,jHo),e(U1,xX),e(xX,DHo),e(U1,GHo),e(V,OHo),e(V,J1),e(J1,npe),e(npe,VHo),e(J1,XHo),e(J1,$X),e($X,zHo),e(J1,WHo),e(V,QHo),e(V,Y1),e(Y1,spe),e(spe,HHo),e(Y1,UHo),e(Y1,kX),e(kX,JHo),e(Y1,YHo),e(V,KHo),e(V,K1),e(K1,lpe),e(lpe,ZHo),e(K1,eUo),e(K1,SX),e(SX,oUo),e(K1,rUo),e(V,tUo),e(V,Z1),e(Z1,ipe),e(ipe,aUo),e(Z1,nUo),e(Z1,RX),e(RX,sUo),e(Z1,lUo),e(V,iUo),e(V,eT),e(eT,dpe),e(dpe,dUo),e(eT,cUo),e(eT,PX),e(PX,mUo),e(eT,fUo),e(V,gUo),e(V,oT),e(oT,cpe),e(cpe,hUo),e(oT,uUo),e(oT,BX),e(BX,pUo),e(oT,_Uo),e(V,bUo),e(V,rT),e(rT,mpe),e(mpe,vUo),e(rT,FUo),e(rT,IX),e(IX,TUo),e(rT,MUo),e(V,EUo),e(V,tT),e(tT,fpe),e(fpe,CUo),e(tT,wUo),e(tT,NX),e(NX,AUo),e(tT,LUo),e(V,yUo),e(V,aT),e(aT,gpe),e(gpe,xUo),e(aT,$Uo),e(aT,qX),e(qX,kUo),e(aT,SUo),e(V,RUo),e(V,nT),e(nT,hpe),e(hpe,PUo),e(nT,BUo),e(nT,jX),e(jX,IUo),e(nT,NUo),e(V,qUo),e(V,sT),e(sT,upe),e(upe,jUo),e(sT,DUo),e(sT,DX),e(DX,GUo),e(sT,OUo),e(V,VUo),e(V,lT),e(lT,ppe),e(ppe,XUo),e(lT,zUo),e(lT,GX),e(GX,WUo),e(lT,QUo),e(V,HUo),e(V,iT),e(iT,_pe),e(_pe,UUo),e(iT,JUo),e(iT,OX),e(OX,YUo),e(iT,KUo),e(V,ZUo),e(V,dT),e(dT,bpe),e(bpe,eJo),e(dT,oJo),e(dT,VX),e(VX,rJo),e(dT,tJo),e(V,aJo),e(V,cT),e(cT,vpe),e(vpe,nJo),e(cT,sJo),e(cT,XX),e(XX,lJo),e(cT,iJo),e(no,dJo),e(no,mT),e(mT,cJo),e(mT,Fpe),e(Fpe,mJo),e(mT,fJo),e(mT,Tpe),e(Tpe,gJo),e(no,hJo),M(fT,no,null),b(m,Jje,_),b(m,rd,_),e(rd,gT),e(gT,Mpe),M(g7,Mpe,null),e(rd,uJo),e(rd,Epe),e(Epe,pJo),b(m,Yje,_),b(m,qo,_),M(h7,qo,null),e(qo,_Jo),e(qo,td),e(td,bJo),e(td,zX),e(zX,vJo),e(td,FJo),e(td,WX),e(WX,TJo),e(td,MJo),e(qo,EJo),e(qo,u7),e(u7,CJo),e(u7,Cpe),e(Cpe,wJo),e(u7,AJo),e(qo,LJo),e(qo,gt),M(p7,gt,null),e(gt,yJo),e(gt,wpe),e(wpe,xJo),e(gt,$Jo),e(gt,ad),e(ad,kJo),e(ad,Ape),e(Ape,SJo),e(ad,RJo),e(ad,QX),e(QX,PJo),e(ad,BJo),e(gt,IJo),M(hT,gt,null),e(qo,NJo),e(qo,so),M(_7,so,null),e(so,qJo),e(so,Lpe),e(Lpe,jJo),e(so,DJo),e(so,qa),e(qa,GJo),e(qa,ype),e(ype,OJo),e(qa,VJo),e(qa,xpe),e(xpe,XJo),e(qa,zJo),e(qa,$pe),e($pe,WJo),e(qa,QJo),e(so,HJo),e(so,kpe),e(kpe,uT),e(uT,Spe),e(Spe,UJo),e(uT,JJo),e(uT,HX),e(HX,YJo),e(uT,KJo),e(so,ZJo),e(so,pT),e(pT,eYo),e(pT,Rpe),e(Rpe,oYo),e(pT,rYo),e(pT,Ppe),e(Ppe,tYo),e(so,aYo),M(_T,so,null),b(m,Kje,_),b(m,nd,_),e(nd,bT),e(bT,Bpe),M(b7,Bpe,null),e(nd,nYo),e(nd,Ipe),e(Ipe,sYo),b(m,Zje,_),b(m,jo,_),M(v7,jo,null),e(jo,lYo),e(jo,sd),e(sd,iYo),e(sd,UX),e(UX,dYo),e(sd,cYo),e(sd,JX),e(JX,mYo),e(sd,fYo),e(jo,gYo),e(jo,F7),e(F7,hYo),e(F7,Npe),e(Npe,uYo),e(F7,pYo),e(jo,_Yo),e(jo,ht),M(T7,ht,null),e(ht,bYo),e(ht,qpe),e(qpe,vYo),e(ht,FYo),e(ht,ld),e(ld,TYo),e(ld,jpe),e(jpe,MYo),e(ld,EYo),e(ld,YX),e(YX,CYo),e(ld,wYo),e(ht,AYo),M(vT,ht,null),e(jo,LYo),e(jo,lo),M(M7,lo,null),e(lo,yYo),e(lo,Dpe),e(Dpe,xYo),e(lo,$Yo),e(lo,ja),e(ja,kYo),e(ja,Gpe),e(Gpe,SYo),e(ja,RYo),e(ja,Ope),e(Ope,PYo),e(ja,BYo),e(ja,Vpe),e(Vpe,IYo),e(ja,NYo),e(lo,qYo),e(lo,ve),e(ve,FT),e(FT,Xpe),e(Xpe,jYo),e(FT,DYo),e(FT,KX),e(KX,GYo),e(FT,OYo),e(ve,VYo),e(ve,TT),e(TT,zpe),e(zpe,XYo),e(TT,zYo),e(TT,ZX),e(ZX,WYo),e(TT,QYo),e(ve,HYo),e(ve,MT),e(MT,Wpe),e(Wpe,UYo),e(MT,JYo),e(MT,ez),e(ez,YYo),e(MT,KYo),e(ve,ZYo),e(ve,ET),e(ET,Qpe),e(Qpe,eKo),e(ET,oKo),e(ET,oz),e(oz,rKo),e(ET,tKo),e(ve,aKo),e(ve,Bs),e(Bs,Hpe),e(Hpe,nKo),e(Bs,sKo),e(Bs,rz),e(rz,lKo),e(Bs,iKo),e(Bs,tz),e(tz,dKo),e(Bs,cKo),e(ve,mKo),e(ve,CT),e(CT,Upe),e(Upe,fKo),e(CT,gKo),e(CT,az),e(az,hKo),e(CT,uKo),e(ve,pKo),e(ve,Is),e(Is,Jpe),e(Jpe,_Ko),e(Is,bKo),e(Is,nz),e(nz,vKo),e(Is,FKo),e(Is,sz),e(sz,TKo),e(Is,MKo),e(ve,EKo),e(ve,ut),e(ut,Ype),e(Ype,CKo),e(ut,wKo),e(ut,lz),e(lz,AKo),e(ut,LKo),e(ut,iz),e(iz,yKo),e(ut,xKo),e(ut,dz),e(dz,$Ko),e(ut,kKo),e(ve,SKo),e(ve,wT),e(wT,Kpe),e(Kpe,RKo),e(wT,PKo),e(wT,cz),e(cz,BKo),e(wT,IKo),e(ve,NKo),e(ve,AT),e(AT,Zpe),e(Zpe,qKo),e(AT,jKo),e(AT,mz),e(mz,DKo),e(AT,GKo),e(ve,OKo),e(ve,LT),e(LT,e_e),e(e_e,VKo),e(LT,XKo),e(LT,fz),e(fz,zKo),e(LT,WKo),e(ve,QKo),e(ve,yT),e(yT,o_e),e(o_e,HKo),e(yT,UKo),e(yT,gz),e(gz,JKo),e(yT,YKo),e(ve,KKo),e(ve,xT),e(xT,r_e),e(r_e,ZKo),e(xT,eZo),e(xT,hz),e(hz,oZo),e(xT,rZo),e(ve,tZo),e(ve,$T),e($T,t_e),e(t_e,aZo),e($T,nZo),e($T,uz),e(uz,sZo),e($T,lZo),e(ve,iZo),e(ve,kT),e(kT,a_e),e(a_e,dZo),e(kT,cZo),e(kT,pz),e(pz,mZo),e(kT,fZo),e(lo,gZo),e(lo,ST),e(ST,hZo),e(ST,n_e),e(n_e,uZo),e(ST,pZo),e(ST,s_e),e(s_e,_Zo),e(lo,bZo),M(RT,lo,null),b(m,eDe,_),b(m,id,_),e(id,PT),e(PT,l_e),M(E7,l_e,null),e(id,vZo),e(id,i_e),e(i_e,FZo),b(m,oDe,_),b(m,Do,_),M(C7,Do,null),e(Do,TZo),e(Do,dd),e(dd,MZo),e(dd,_z),e(_z,EZo),e(dd,CZo),e(dd,bz),e(bz,wZo),e(dd,AZo),e(Do,LZo),e(Do,w7),e(w7,yZo),e(w7,d_e),e(d_e,xZo),e(w7,$Zo),e(Do,kZo),e(Do,pt),M(A7,pt,null),e(pt,SZo),e(pt,c_e),e(c_e,RZo),e(pt,PZo),e(pt,cd),e(cd,BZo),e(cd,m_e),e(m_e,IZo),e(cd,NZo),e(cd,vz),e(vz,qZo),e(cd,jZo),e(pt,DZo),M(BT,pt,null),e(Do,GZo),e(Do,io),M(L7,io,null),e(io,OZo),e(io,f_e),e(f_e,VZo),e(io,XZo),e(io,Da),e(Da,zZo),e(Da,g_e),e(g_e,WZo),e(Da,QZo),e(Da,h_e),e(h_e,HZo),e(Da,UZo),e(Da,u_e),e(u_e,JZo),e(Da,YZo),e(io,KZo),e(io,p_e),e(p_e,IT),e(IT,__e),e(__e,ZZo),e(IT,eer),e(IT,Fz),e(Fz,oer),e(IT,rer),e(io,ter),e(io,NT),e(NT,aer),e(NT,b_e),e(b_e,ner),e(NT,ser),e(NT,v_e),e(v_e,ler),e(io,ier),M(qT,io,null),b(m,rDe,_),b(m,md,_),e(md,jT),e(jT,F_e),M(y7,F_e,null),e(md,der),e(md,T_e),e(T_e,cer),b(m,tDe,_),b(m,Go,_),M(x7,Go,null),e(Go,mer),e(Go,fd),e(fd,fer),e(fd,Tz),e(Tz,ger),e(fd,her),e(fd,Mz),e(Mz,uer),e(fd,per),e(Go,_er),e(Go,$7),e($7,ber),e($7,M_e),e(M_e,ver),e($7,Fer),e(Go,Ter),e(Go,_t),M(k7,_t,null),e(_t,Mer),e(_t,E_e),e(E_e,Eer),e(_t,Cer),e(_t,gd),e(gd,wer),e(gd,C_e),e(C_e,Aer),e(gd,Ler),e(gd,Ez),e(Ez,yer),e(gd,xer),e(_t,$er),M(DT,_t,null),e(Go,ker),e(Go,co),M(S7,co,null),e(co,Ser),e(co,w_e),e(w_e,Rer),e(co,Per),e(co,Ga),e(Ga,Ber),e(Ga,A_e),e(A_e,Ier),e(Ga,Ner),e(Ga,L_e),e(L_e,qer),e(Ga,jer),e(Ga,y_e),e(y_e,Der),e(Ga,Ger),e(co,Oer),e(co,Re),e(Re,GT),e(GT,x_e),e(x_e,Ver),e(GT,Xer),e(GT,Cz),e(Cz,zer),e(GT,Wer),e(Re,Qer),e(Re,OT),e(OT,$_e),e($_e,Her),e(OT,Uer),e(OT,wz),e(wz,Jer),e(OT,Yer),e(Re,Ker),e(Re,VT),e(VT,k_e),e(k_e,Zer),e(VT,eor),e(VT,Az),e(Az,oor),e(VT,ror),e(Re,tor),e(Re,XT),e(XT,S_e),e(S_e,aor),e(XT,nor),e(XT,Lz),e(Lz,sor),e(XT,lor),e(Re,ior),e(Re,zT),e(zT,R_e),e(R_e,dor),e(zT,cor),e(zT,yz),e(yz,mor),e(zT,gor),e(Re,hor),e(Re,WT),e(WT,P_e),e(P_e,uor),e(WT,por),e(WT,xz),e(xz,_or),e(WT,bor),e(Re,vor),e(Re,QT),e(QT,B_e),e(B_e,For),e(QT,Tor),e(QT,$z),e($z,Mor),e(QT,Eor),e(Re,Cor),e(Re,HT),e(HT,I_e),e(I_e,wor),e(HT,Aor),e(HT,kz),e(kz,Lor),e(HT,yor),e(Re,xor),e(Re,UT),e(UT,N_e),e(N_e,$or),e(UT,kor),e(UT,Sz),e(Sz,Sor),e(UT,Ror),e(co,Por),e(co,JT),e(JT,Bor),e(JT,q_e),e(q_e,Ior),e(JT,Nor),e(JT,j_e),e(j_e,qor),e(co,jor),M(YT,co,null),b(m,aDe,_),b(m,hd,_),e(hd,KT),e(KT,D_e),M(R7,D_e,null),e(hd,Dor),e(hd,G_e),e(G_e,Gor),b(m,nDe,_),b(m,Oo,_),M(P7,Oo,null),e(Oo,Oor),e(Oo,ud),e(ud,Vor),e(ud,Rz),e(Rz,Xor),e(ud,zor),e(ud,Pz),e(Pz,Wor),e(ud,Qor),e(Oo,Hor),e(Oo,B7),e(B7,Uor),e(B7,O_e),e(O_e,Jor),e(B7,Yor),e(Oo,Kor),e(Oo,bt),M(I7,bt,null),e(bt,Zor),e(bt,V_e),e(V_e,err),e(bt,orr),e(bt,pd),e(pd,rrr),e(pd,X_e),e(X_e,trr),e(pd,arr),e(pd,Bz),e(Bz,nrr),e(pd,srr),e(bt,lrr),M(ZT,bt,null),e(Oo,irr),e(Oo,mo),M(N7,mo,null),e(mo,drr),e(mo,z_e),e(z_e,crr),e(mo,mrr),e(mo,Oa),e(Oa,frr),e(Oa,W_e),e(W_e,grr),e(Oa,hrr),e(Oa,Q_e),e(Q_e,urr),e(Oa,prr),e(Oa,H_e),e(H_e,_rr),e(Oa,brr),e(mo,vrr),e(mo,Kr),e(Kr,eM),e(eM,U_e),e(U_e,Frr),e(eM,Trr),e(eM,Iz),e(Iz,Mrr),e(eM,Err),e(Kr,Crr),e(Kr,oM),e(oM,J_e),e(J_e,wrr),e(oM,Arr),e(oM,Nz),e(Nz,Lrr),e(oM,yrr),e(Kr,xrr),e(Kr,rM),e(rM,Y_e),e(Y_e,$rr),e(rM,krr),e(rM,qz),e(qz,Srr),e(rM,Rrr),e(Kr,Prr),e(Kr,tM),e(tM,K_e),e(K_e,Brr),e(tM,Irr),e(tM,jz),e(jz,Nrr),e(tM,qrr),e(Kr,jrr),e(Kr,aM),e(aM,Z_e),e(Z_e,Drr),e(aM,Grr),e(aM,Dz),e(Dz,Orr),e(aM,Vrr),e(mo,Xrr),e(mo,nM),e(nM,zrr),e(nM,ebe),e(ebe,Wrr),e(nM,Qrr),e(nM,obe),e(obe,Hrr),e(mo,Urr),M(sM,mo,null),b(m,sDe,_),b(m,_d,_),e(_d,lM),e(lM,rbe),M(q7,rbe,null),e(_d,Jrr),e(_d,tbe),e(tbe,Yrr),b(m,lDe,_),b(m,Vo,_),M(j7,Vo,null),e(Vo,Krr),e(Vo,bd),e(bd,Zrr),e(bd,Gz),e(Gz,etr),e(bd,otr),e(bd,Oz),e(Oz,rtr),e(bd,ttr),e(Vo,atr),e(Vo,D7),e(D7,ntr),e(D7,abe),e(abe,str),e(D7,ltr),e(Vo,itr),e(Vo,vt),M(G7,vt,null),e(vt,dtr),e(vt,nbe),e(nbe,ctr),e(vt,mtr),e(vt,vd),e(vd,ftr),e(vd,sbe),e(sbe,gtr),e(vd,htr),e(vd,Vz),e(Vz,utr),e(vd,ptr),e(vt,_tr),M(iM,vt,null),e(Vo,btr),e(Vo,fo),M(O7,fo,null),e(fo,vtr),e(fo,lbe),e(lbe,Ftr),e(fo,Ttr),e(fo,Va),e(Va,Mtr),e(Va,ibe),e(ibe,Etr),e(Va,Ctr),e(Va,dbe),e(dbe,wtr),e(Va,Atr),e(Va,cbe),e(cbe,Ltr),e(Va,ytr),e(fo,xtr),e(fo,Le),e(Le,dM),e(dM,mbe),e(mbe,$tr),e(dM,ktr),e(dM,Xz),e(Xz,Str),e(dM,Rtr),e(Le,Ptr),e(Le,cM),e(cM,fbe),e(fbe,Btr),e(cM,Itr),e(cM,zz),e(zz,Ntr),e(cM,qtr),e(Le,jtr),e(Le,mM),e(mM,gbe),e(gbe,Dtr),e(mM,Gtr),e(mM,Wz),e(Wz,Otr),e(mM,Vtr),e(Le,Xtr),e(Le,fM),e(fM,hbe),e(hbe,ztr),e(fM,Wtr),e(fM,Qz),e(Qz,Qtr),e(fM,Htr),e(Le,Utr),e(Le,gM),e(gM,ube),e(ube,Jtr),e(gM,Ytr),e(gM,Hz),e(Hz,Ktr),e(gM,Ztr),e(Le,ear),e(Le,hM),e(hM,pbe),e(pbe,oar),e(hM,rar),e(hM,Uz),e(Uz,tar),e(hM,aar),e(Le,nar),e(Le,uM),e(uM,_be),e(_be,sar),e(uM,lar),e(uM,Jz),e(Jz,iar),e(uM,dar),e(Le,car),e(Le,pM),e(pM,bbe),e(bbe,mar),e(pM,far),e(pM,Yz),e(Yz,gar),e(pM,har),e(Le,uar),e(Le,_M),e(_M,vbe),e(vbe,par),e(_M,_ar),e(_M,Kz),e(Kz,bar),e(_M,Far),e(Le,Tar),e(Le,bM),e(bM,Fbe),e(Fbe,Mar),e(bM,Ear),e(bM,Zz),e(Zz,Car),e(bM,war),e(fo,Aar),e(fo,vM),e(vM,Lar),e(vM,Tbe),e(Tbe,yar),e(vM,xar),e(vM,Mbe),e(Mbe,$ar),e(fo,kar),M(FM,fo,null),b(m,iDe,_),b(m,Fd,_),e(Fd,TM),e(TM,Ebe),M(V7,Ebe,null),e(Fd,Sar),e(Fd,Cbe),e(Cbe,Rar),b(m,dDe,_),b(m,Xo,_),M(X7,Xo,null),e(Xo,Par),e(Xo,Td),e(Td,Bar),e(Td,eW),e(eW,Iar),e(Td,Nar),e(Td,oW),e(oW,qar),e(Td,jar),e(Xo,Dar),e(Xo,z7),e(z7,Gar),e(z7,wbe),e(wbe,Oar),e(z7,Var),e(Xo,Xar),e(Xo,Ft),M(W7,Ft,null),e(Ft,zar),e(Ft,Abe),e(Abe,War),e(Ft,Qar),e(Ft,Md),e(Md,Har),e(Md,Lbe),e(Lbe,Uar),e(Md,Jar),e(Md,rW),e(rW,Yar),e(Md,Kar),e(Ft,Zar),M(MM,Ft,null),e(Xo,enr),e(Xo,go),M(Q7,go,null),e(go,onr),e(go,ybe),e(ybe,rnr),e(go,tnr),e(go,Xa),e(Xa,anr),e(Xa,xbe),e(xbe,nnr),e(Xa,snr),e(Xa,$be),e($be,lnr),e(Xa,inr),e(Xa,kbe),e(kbe,dnr),e(Xa,cnr),e(go,mnr),e(go,H7),e(H7,EM),e(EM,Sbe),e(Sbe,fnr),e(EM,gnr),e(EM,tW),e(tW,hnr),e(EM,unr),e(H7,pnr),e(H7,CM),e(CM,Rbe),e(Rbe,_nr),e(CM,bnr),e(CM,aW),e(aW,vnr),e(CM,Fnr),e(go,Tnr),e(go,wM),e(wM,Mnr),e(wM,Pbe),e(Pbe,Enr),e(wM,Cnr),e(wM,Bbe),e(Bbe,wnr),e(go,Anr),M(AM,go,null),b(m,cDe,_),b(m,Ed,_),e(Ed,LM),e(LM,Ibe),M(U7,Ibe,null),e(Ed,Lnr),e(Ed,Nbe),e(Nbe,ynr),b(m,mDe,_),b(m,zo,_),M(J7,zo,null),e(zo,xnr),e(zo,Cd),e(Cd,$nr),e(Cd,nW),e(nW,knr),e(Cd,Snr),e(Cd,sW),e(sW,Rnr),e(Cd,Pnr),e(zo,Bnr),e(zo,Y7),e(Y7,Inr),e(Y7,qbe),e(qbe,Nnr),e(Y7,qnr),e(zo,jnr),e(zo,Tt),M(K7,Tt,null),e(Tt,Dnr),e(Tt,jbe),e(jbe,Gnr),e(Tt,Onr),e(Tt,wd),e(wd,Vnr),e(wd,Dbe),e(Dbe,Xnr),e(wd,znr),e(wd,lW),e(lW,Wnr),e(wd,Qnr),e(Tt,Hnr),M(yM,Tt,null),e(zo,Unr),e(zo,ho),M(Z7,ho,null),e(ho,Jnr),e(ho,Gbe),e(Gbe,Ynr),e(ho,Knr),e(ho,za),e(za,Znr),e(za,Obe),e(Obe,esr),e(za,osr),e(za,Vbe),e(Vbe,rsr),e(za,tsr),e(za,Xbe),e(Xbe,asr),e(za,nsr),e(ho,ssr),e(ho,Zr),e(Zr,xM),e(xM,zbe),e(zbe,lsr),e(xM,isr),e(xM,iW),e(iW,dsr),e(xM,csr),e(Zr,msr),e(Zr,$M),e($M,Wbe),e(Wbe,fsr),e($M,gsr),e($M,dW),e(dW,hsr),e($M,usr),e(Zr,psr),e(Zr,kM),e(kM,Qbe),e(Qbe,_sr),e(kM,bsr),e(kM,cW),e(cW,vsr),e(kM,Fsr),e(Zr,Tsr),e(Zr,SM),e(SM,Hbe),e(Hbe,Msr),e(SM,Esr),e(SM,mW),e(mW,Csr),e(SM,wsr),e(Zr,Asr),e(Zr,RM),e(RM,Ube),e(Ube,Lsr),e(RM,ysr),e(RM,fW),e(fW,xsr),e(RM,$sr),e(ho,ksr),e(ho,PM),e(PM,Ssr),e(PM,Jbe),e(Jbe,Rsr),e(PM,Psr),e(PM,Ybe),e(Ybe,Bsr),e(ho,Isr),M(BM,ho,null),b(m,fDe,_),b(m,Ad,_),e(Ad,IM),e(IM,Kbe),M(e8,Kbe,null),e(Ad,Nsr),e(Ad,Zbe),e(Zbe,qsr),b(m,gDe,_),b(m,Wo,_),M(o8,Wo,null),e(Wo,jsr),e(Wo,Ld),e(Ld,Dsr),e(Ld,gW),e(gW,Gsr),e(Ld,Osr),e(Ld,hW),e(hW,Vsr),e(Ld,Xsr),e(Wo,zsr),e(Wo,r8),e(r8,Wsr),e(r8,e2e),e(e2e,Qsr),e(r8,Hsr),e(Wo,Usr),e(Wo,Mt),M(t8,Mt,null),e(Mt,Jsr),e(Mt,o2e),e(o2e,Ysr),e(Mt,Ksr),e(Mt,yd),e(yd,Zsr),e(yd,r2e),e(r2e,elr),e(yd,olr),e(yd,uW),e(uW,rlr),e(yd,tlr),e(Mt,alr),M(NM,Mt,null),e(Wo,nlr),e(Wo,uo),M(a8,uo,null),e(uo,slr),e(uo,t2e),e(t2e,llr),e(uo,ilr),e(uo,Wa),e(Wa,dlr),e(Wa,a2e),e(a2e,clr),e(Wa,mlr),e(Wa,n2e),e(n2e,flr),e(Wa,glr),e(Wa,s2e),e(s2e,hlr),e(Wa,ulr),e(uo,plr),e(uo,xd),e(xd,qM),e(qM,l2e),e(l2e,_lr),e(qM,blr),e(qM,pW),e(pW,vlr),e(qM,Flr),e(xd,Tlr),e(xd,jM),e(jM,i2e),e(i2e,Mlr),e(jM,Elr),e(jM,_W),e(_W,Clr),e(jM,wlr),e(xd,Alr),e(xd,DM),e(DM,d2e),e(d2e,Llr),e(DM,ylr),e(DM,bW),e(bW,xlr),e(DM,$lr),e(uo,klr),e(uo,GM),e(GM,Slr),e(GM,c2e),e(c2e,Rlr),e(GM,Plr),e(GM,m2e),e(m2e,Blr),e(uo,Ilr),M(OM,uo,null),b(m,hDe,_),b(m,$d,_),e($d,VM),e(VM,f2e),M(n8,f2e,null),e($d,Nlr),e($d,g2e),e(g2e,qlr),b(m,uDe,_),b(m,Qo,_),M(s8,Qo,null),e(Qo,jlr),e(Qo,kd),e(kd,Dlr),e(kd,vW),e(vW,Glr),e(kd,Olr),e(kd,FW),e(FW,Vlr),e(kd,Xlr),e(Qo,zlr),e(Qo,l8),e(l8,Wlr),e(l8,h2e),e(h2e,Qlr),e(l8,Hlr),e(Qo,Ulr),e(Qo,Et),M(i8,Et,null),e(Et,Jlr),e(Et,u2e),e(u2e,Ylr),e(Et,Klr),e(Et,Sd),e(Sd,Zlr),e(Sd,p2e),e(p2e,eir),e(Sd,oir),e(Sd,TW),e(TW,rir),e(Sd,tir),e(Et,air),M(XM,Et,null),e(Qo,nir),e(Qo,po),M(d8,po,null),e(po,sir),e(po,_2e),e(_2e,lir),e(po,iir),e(po,Qa),e(Qa,dir),e(Qa,b2e),e(b2e,cir),e(Qa,mir),e(Qa,v2e),e(v2e,fir),e(Qa,gir),e(Qa,F2e),e(F2e,hir),e(Qa,uir),e(po,pir),e(po,c8),e(c8,zM),e(zM,T2e),e(T2e,_ir),e(zM,bir),e(zM,MW),e(MW,vir),e(zM,Fir),e(c8,Tir),e(c8,WM),e(WM,M2e),e(M2e,Mir),e(WM,Eir),e(WM,EW),e(EW,Cir),e(WM,wir),e(po,Air),e(po,QM),e(QM,Lir),e(QM,E2e),e(E2e,yir),e(QM,xir),e(QM,C2e),e(C2e,$ir),e(po,kir),M(HM,po,null),b(m,pDe,_),b(m,Rd,_),e(Rd,UM),e(UM,w2e),M(m8,w2e,null),e(Rd,Sir),e(Rd,A2e),e(A2e,Rir),b(m,_De,_),b(m,Ho,_),M(f8,Ho,null),e(Ho,Pir),e(Ho,Pd),e(Pd,Bir),e(Pd,CW),e(CW,Iir),e(Pd,Nir),e(Pd,wW),e(wW,qir),e(Pd,jir),e(Ho,Dir),e(Ho,g8),e(g8,Gir),e(g8,L2e),e(L2e,Oir),e(g8,Vir),e(Ho,Xir),e(Ho,Ct),M(h8,Ct,null),e(Ct,zir),e(Ct,y2e),e(y2e,Wir),e(Ct,Qir),e(Ct,Bd),e(Bd,Hir),e(Bd,x2e),e(x2e,Uir),e(Bd,Jir),e(Bd,AW),e(AW,Yir),e(Bd,Kir),e(Ct,Zir),M(JM,Ct,null),e(Ho,edr),e(Ho,_o),M(u8,_o,null),e(_o,odr),e(_o,$2e),e($2e,rdr),e(_o,tdr),e(_o,Ha),e(Ha,adr),e(Ha,k2e),e(k2e,ndr),e(Ha,sdr),e(Ha,S2e),e(S2e,ldr),e(Ha,idr),e(Ha,R2e),e(R2e,ddr),e(Ha,cdr),e(_o,mdr),e(_o,P2e),e(P2e,YM),e(YM,B2e),e(B2e,fdr),e(YM,gdr),e(YM,LW),e(LW,hdr),e(YM,udr),e(_o,pdr),e(_o,KM),e(KM,_dr),e(KM,I2e),e(I2e,bdr),e(KM,vdr),e(KM,N2e),e(N2e,Fdr),e(_o,Tdr),M(ZM,_o,null),b(m,bDe,_),b(m,Id,_),e(Id,e4),e(e4,q2e),M(p8,q2e,null),e(Id,Mdr),e(Id,j2e),e(j2e,Edr),b(m,vDe,_),b(m,Uo,_),M(_8,Uo,null),e(Uo,Cdr),e(Uo,Nd),e(Nd,wdr),e(Nd,yW),e(yW,Adr),e(Nd,Ldr),e(Nd,xW),e(xW,ydr),e(Nd,xdr),e(Uo,$dr),e(Uo,b8),e(b8,kdr),e(b8,D2e),e(D2e,Sdr),e(b8,Rdr),e(Uo,Pdr),e(Uo,wt),M(v8,wt,null),e(wt,Bdr),e(wt,G2e),e(G2e,Idr),e(wt,Ndr),e(wt,qd),e(qd,qdr),e(qd,O2e),e(O2e,jdr),e(qd,Ddr),e(qd,$W),e($W,Gdr),e(qd,Odr),e(wt,Vdr),M(o4,wt,null),e(Uo,Xdr),e(Uo,bo),M(F8,bo,null),e(bo,zdr),e(bo,V2e),e(V2e,Wdr),e(bo,Qdr),e(bo,Ua),e(Ua,Hdr),e(Ua,X2e),e(X2e,Udr),e(Ua,Jdr),e(Ua,z2e),e(z2e,Ydr),e(Ua,Kdr),e(Ua,W2e),e(W2e,Zdr),e(Ua,ecr),e(bo,ocr),e(bo,Ja),e(Ja,r4),e(r4,Q2e),e(Q2e,rcr),e(r4,tcr),e(r4,kW),e(kW,acr),e(r4,ncr),e(Ja,scr),e(Ja,t4),e(t4,H2e),e(H2e,lcr),e(t4,icr),e(t4,SW),e(SW,dcr),e(t4,ccr),e(Ja,mcr),e(Ja,a4),e(a4,U2e),e(U2e,fcr),e(a4,gcr),e(a4,RW),e(RW,hcr),e(a4,ucr),e(Ja,pcr),e(Ja,n4),e(n4,J2e),e(J2e,_cr),e(n4,bcr),e(n4,PW),e(PW,vcr),e(n4,Fcr),e(bo,Tcr),e(bo,s4),e(s4,Mcr),e(s4,Y2e),e(Y2e,Ecr),e(s4,Ccr),e(s4,K2e),e(K2e,wcr),e(bo,Acr),M(l4,bo,null),b(m,FDe,_),b(m,jd,_),e(jd,i4),e(i4,Z2e),M(T8,Z2e,null),e(jd,Lcr),e(jd,eve),e(eve,ycr),b(m,TDe,_),b(m,Jo,_),M(M8,Jo,null),e(Jo,xcr),e(Jo,Dd),e(Dd,$cr),e(Dd,BW),e(BW,kcr),e(Dd,Scr),e(Dd,IW),e(IW,Rcr),e(Dd,Pcr),e(Jo,Bcr),e(Jo,E8),e(E8,Icr),e(E8,ove),e(ove,Ncr),e(E8,qcr),e(Jo,jcr),e(Jo,At),M(C8,At,null),e(At,Dcr),e(At,rve),e(rve,Gcr),e(At,Ocr),e(At,Gd),e(Gd,Vcr),e(Gd,tve),e(tve,Xcr),e(Gd,zcr),e(Gd,NW),e(NW,Wcr),e(Gd,Qcr),e(At,Hcr),M(d4,At,null),e(Jo,Ucr),e(Jo,vo),M(w8,vo,null),e(vo,Jcr),e(vo,ave),e(ave,Ycr),e(vo,Kcr),e(vo,Ya),e(Ya,Zcr),e(Ya,nve),e(nve,emr),e(Ya,omr),e(Ya,sve),e(sve,rmr),e(Ya,tmr),e(Ya,lve),e(lve,amr),e(Ya,nmr),e(vo,smr),e(vo,ive),e(ive,c4),e(c4,dve),e(dve,lmr),e(c4,imr),e(c4,qW),e(qW,dmr),e(c4,cmr),e(vo,mmr),e(vo,m4),e(m4,fmr),e(m4,cve),e(cve,gmr),e(m4,hmr),e(m4,mve),e(mve,umr),e(vo,pmr),M(f4,vo,null),b(m,MDe,_),b(m,Od,_),e(Od,g4),e(g4,fve),M(A8,fve,null),e(Od,_mr),e(Od,gve),e(gve,bmr),b(m,EDe,_),b(m,Yo,_),M(L8,Yo,null),e(Yo,vmr),e(Yo,Vd),e(Vd,Fmr),e(Vd,jW),e(jW,Tmr),e(Vd,Mmr),e(Vd,DW),e(DW,Emr),e(Vd,Cmr),e(Yo,wmr),e(Yo,y8),e(y8,Amr),e(y8,hve),e(hve,Lmr),e(y8,ymr),e(Yo,xmr),e(Yo,Lt),M(x8,Lt,null),e(Lt,$mr),e(Lt,uve),e(uve,kmr),e(Lt,Smr),e(Lt,Xd),e(Xd,Rmr),e(Xd,pve),e(pve,Pmr),e(Xd,Bmr),e(Xd,GW),e(GW,Imr),e(Xd,Nmr),e(Lt,qmr),M(h4,Lt,null),e(Yo,jmr),e(Yo,wr),M($8,wr,null),e(wr,Dmr),e(wr,_ve),e(_ve,Gmr),e(wr,Omr),e(wr,Ka),e(Ka,Vmr),e(Ka,bve),e(bve,Xmr),e(Ka,zmr),e(Ka,vve),e(vve,Wmr),e(Ka,Qmr),e(Ka,Fve),e(Fve,Hmr),e(Ka,Umr),e(wr,Jmr),e(wr,q),e(q,u4),e(u4,Tve),e(Tve,Ymr),e(u4,Kmr),e(u4,OW),e(OW,Zmr),e(u4,efr),e(q,ofr),e(q,p4),e(p4,Mve),e(Mve,rfr),e(p4,tfr),e(p4,VW),e(VW,afr),e(p4,nfr),e(q,sfr),e(q,_4),e(_4,Eve),e(Eve,lfr),e(_4,ifr),e(_4,XW),e(XW,dfr),e(_4,cfr),e(q,mfr),e(q,b4),e(b4,Cve),e(Cve,ffr),e(b4,gfr),e(b4,zW),e(zW,hfr),e(b4,ufr),e(q,pfr),e(q,v4),e(v4,wve),e(wve,_fr),e(v4,bfr),e(v4,WW),e(WW,vfr),e(v4,Ffr),e(q,Tfr),e(q,F4),e(F4,Ave),e(Ave,Mfr),e(F4,Efr),e(F4,QW),e(QW,Cfr),e(F4,wfr),e(q,Afr),e(q,T4),e(T4,Lve),e(Lve,Lfr),e(T4,yfr),e(T4,HW),e(HW,xfr),e(T4,$fr),e(q,kfr),e(q,M4),e(M4,yve),e(yve,Sfr),e(M4,Rfr),e(M4,UW),e(UW,Pfr),e(M4,Bfr),e(q,Ifr),e(q,E4),e(E4,xve),e(xve,Nfr),e(E4,qfr),e(E4,JW),e(JW,jfr),e(E4,Dfr),e(q,Gfr),e(q,C4),e(C4,$ve),e($ve,Ofr),e(C4,Vfr),e(C4,YW),e(YW,Xfr),e(C4,zfr),e(q,Wfr),e(q,w4),e(w4,kve),e(kve,Qfr),e(w4,Hfr),e(w4,KW),e(KW,Ufr),e(w4,Jfr),e(q,Yfr),e(q,A4),e(A4,Sve),e(Sve,Kfr),e(A4,Zfr),e(A4,ZW),e(ZW,egr),e(A4,ogr),e(q,rgr),e(q,L4),e(L4,Rve),e(Rve,tgr),e(L4,agr),e(L4,eQ),e(eQ,ngr),e(L4,sgr),e(q,lgr),e(q,y4),e(y4,Pve),e(Pve,igr),e(y4,dgr),e(y4,oQ),e(oQ,cgr),e(y4,mgr),e(q,fgr),e(q,x4),e(x4,Bve),e(Bve,ggr),e(x4,hgr),e(x4,rQ),e(rQ,ugr),e(x4,pgr),e(q,_gr),e(q,$4),e($4,Ive),e(Ive,bgr),e($4,vgr),e($4,tQ),e(tQ,Fgr),e($4,Tgr),e(q,Mgr),e(q,k4),e(k4,Nve),e(Nve,Egr),e(k4,Cgr),e(k4,aQ),e(aQ,wgr),e(k4,Agr),e(q,Lgr),e(q,Ns),e(Ns,qve),e(qve,ygr),e(Ns,xgr),e(Ns,nQ),e(nQ,$gr),e(Ns,kgr),e(Ns,sQ),e(sQ,Sgr),e(Ns,Rgr),e(q,Pgr),e(q,S4),e(S4,jve),e(jve,Bgr),e(S4,Igr),e(S4,lQ),e(lQ,Ngr),e(S4,qgr),e(q,jgr),e(q,R4),e(R4,Dve),e(Dve,Dgr),e(R4,Ggr),e(R4,iQ),e(iQ,Ogr),e(R4,Vgr),e(q,Xgr),e(q,P4),e(P4,Gve),e(Gve,zgr),e(P4,Wgr),e(P4,dQ),e(dQ,Qgr),e(P4,Hgr),e(q,Ugr),e(q,B4),e(B4,Ove),e(Ove,Jgr),e(B4,Ygr),e(B4,cQ),e(cQ,Kgr),e(B4,Zgr),e(q,ehr),e(q,I4),e(I4,Vve),e(Vve,ohr),e(I4,rhr),e(I4,mQ),e(mQ,thr),e(I4,ahr),e(q,nhr),e(q,N4),e(N4,Xve),e(Xve,shr),e(N4,lhr),e(N4,fQ),e(fQ,ihr),e(N4,dhr),e(q,chr),e(q,q4),e(q4,zve),e(zve,mhr),e(q4,fhr),e(q4,gQ),e(gQ,ghr),e(q4,hhr),e(q,uhr),e(q,j4),e(j4,Wve),e(Wve,phr),e(j4,_hr),e(j4,hQ),e(hQ,bhr),e(j4,vhr),e(q,Fhr),e(q,D4),e(D4,Qve),e(Qve,Thr),e(D4,Mhr),e(D4,uQ),e(uQ,Ehr),e(D4,Chr),e(q,whr),e(q,G4),e(G4,Hve),e(Hve,Ahr),e(G4,Lhr),e(G4,pQ),e(pQ,yhr),e(G4,xhr),e(q,$hr),e(q,O4),e(O4,Uve),e(Uve,khr),e(O4,Shr),e(O4,_Q),e(_Q,Rhr),e(O4,Phr),e(q,Bhr),e(q,V4),e(V4,Jve),e(Jve,Ihr),e(V4,Nhr),e(V4,bQ),e(bQ,qhr),e(V4,jhr),e(q,Dhr),e(q,X4),e(X4,Yve),e(Yve,Ghr),e(X4,Ohr),e(X4,vQ),e(vQ,Vhr),e(X4,Xhr),e(q,zhr),e(q,z4),e(z4,Kve),e(Kve,Whr),e(z4,Qhr),e(z4,FQ),e(FQ,Hhr),e(z4,Uhr),e(q,Jhr),e(q,W4),e(W4,Zve),e(Zve,Yhr),e(W4,Khr),e(W4,TQ),e(TQ,Zhr),e(W4,eur),e(q,our),e(q,Q4),e(Q4,eFe),e(eFe,rur),e(Q4,tur),e(Q4,MQ),e(MQ,aur),e(Q4,nur),e(q,sur),e(q,H4),e(H4,oFe),e(oFe,lur),e(H4,iur),e(H4,EQ),e(EQ,dur),e(H4,cur),e(q,mur),e(q,U4),e(U4,rFe),e(rFe,fur),e(U4,gur),e(U4,CQ),e(CQ,hur),e(U4,uur),e(q,pur),e(q,J4),e(J4,tFe),e(tFe,_ur),e(J4,bur),e(J4,wQ),e(wQ,vur),e(J4,Fur),e(q,Tur),e(q,Y4),e(Y4,aFe),e(aFe,Mur),e(Y4,Eur),e(Y4,AQ),e(AQ,Cur),e(Y4,wur),e(q,Aur),e(q,K4),e(K4,nFe),e(nFe,Lur),e(K4,yur),e(K4,LQ),e(LQ,xur),e(K4,$ur),e(q,kur),e(q,Z4),e(Z4,sFe),e(sFe,Sur),e(Z4,Rur),e(Z4,yQ),e(yQ,Pur),e(Z4,Bur),e(q,Iur),e(q,eE),e(eE,lFe),e(lFe,Nur),e(eE,qur),e(eE,xQ),e(xQ,jur),e(eE,Dur),e(q,Gur),e(q,oE),e(oE,iFe),e(iFe,Our),e(oE,Vur),e(oE,$Q),e($Q,Xur),e(oE,zur),e(q,Wur),e(q,rE),e(rE,dFe),e(dFe,Qur),e(rE,Hur),e(rE,kQ),e(kQ,Uur),e(rE,Jur),e(q,Yur),e(q,tE),e(tE,cFe),e(cFe,Kur),e(tE,Zur),e(tE,SQ),e(SQ,epr),e(tE,opr),e(q,rpr),e(q,aE),e(aE,mFe),e(mFe,tpr),e(aE,apr),e(aE,RQ),e(RQ,npr),e(aE,spr),e(q,lpr),e(q,nE),e(nE,fFe),e(fFe,ipr),e(nE,dpr),e(nE,PQ),e(PQ,cpr),e(nE,mpr),e(q,fpr),e(q,sE),e(sE,gFe),e(gFe,gpr),e(sE,hpr),e(sE,BQ),e(BQ,upr),e(sE,ppr),e(wr,_pr),M(lE,wr,null),b(m,CDe,_),b(m,zd,_),e(zd,iE),e(iE,hFe),M(k8,hFe,null),e(zd,bpr),e(zd,uFe),e(uFe,vpr),b(m,wDe,_),b(m,Ko,_),M(S8,Ko,null),e(Ko,Fpr),e(Ko,Wd),e(Wd,Tpr),e(Wd,IQ),e(IQ,Mpr),e(Wd,Epr),e(Wd,NQ),e(NQ,Cpr),e(Wd,wpr),e(Ko,Apr),e(Ko,R8),e(R8,Lpr),e(R8,pFe),e(pFe,ypr),e(R8,xpr),e(Ko,$pr),e(Ko,yt),M(P8,yt,null),e(yt,kpr),e(yt,_Fe),e(_Fe,Spr),e(yt,Rpr),e(yt,Qd),e(Qd,Ppr),e(Qd,bFe),e(bFe,Bpr),e(Qd,Ipr),e(Qd,qQ),e(qQ,Npr),e(Qd,qpr),e(yt,jpr),M(dE,yt,null),e(Ko,Dpr),e(Ko,Ar),M(B8,Ar,null),e(Ar,Gpr),e(Ar,vFe),e(vFe,Opr),e(Ar,Vpr),e(Ar,Za),e(Za,Xpr),e(Za,FFe),e(FFe,zpr),e(Za,Wpr),e(Za,TFe),e(TFe,Qpr),e(Za,Hpr),e(Za,MFe),e(MFe,Upr),e(Za,Jpr),e(Ar,Ypr),e(Ar,se),e(se,cE),e(cE,EFe),e(EFe,Kpr),e(cE,Zpr),e(cE,jQ),e(jQ,e_r),e(cE,o_r),e(se,r_r),e(se,mE),e(mE,CFe),e(CFe,t_r),e(mE,a_r),e(mE,DQ),e(DQ,n_r),e(mE,s_r),e(se,l_r),e(se,fE),e(fE,wFe),e(wFe,i_r),e(fE,d_r),e(fE,GQ),e(GQ,c_r),e(fE,m_r),e(se,f_r),e(se,gE),e(gE,AFe),e(AFe,g_r),e(gE,h_r),e(gE,OQ),e(OQ,u_r),e(gE,p_r),e(se,__r),e(se,hE),e(hE,LFe),e(LFe,b_r),e(hE,v_r),e(hE,VQ),e(VQ,F_r),e(hE,T_r),e(se,M_r),e(se,uE),e(uE,yFe),e(yFe,E_r),e(uE,C_r),e(uE,XQ),e(XQ,w_r),e(uE,A_r),e(se,L_r),e(se,pE),e(pE,xFe),e(xFe,y_r),e(pE,x_r),e(pE,zQ),e(zQ,$_r),e(pE,k_r),e(se,S_r),e(se,_E),e(_E,$Fe),e($Fe,R_r),e(_E,P_r),e(_E,WQ),e(WQ,B_r),e(_E,I_r),e(se,N_r),e(se,bE),e(bE,kFe),e(kFe,q_r),e(bE,j_r),e(bE,QQ),e(QQ,D_r),e(bE,G_r),e(se,O_r),e(se,vE),e(vE,SFe),e(SFe,V_r),e(vE,X_r),e(vE,HQ),e(HQ,z_r),e(vE,W_r),e(se,Q_r),e(se,FE),e(FE,RFe),e(RFe,H_r),e(FE,U_r),e(FE,UQ),e(UQ,J_r),e(FE,Y_r),e(se,K_r),e(se,TE),e(TE,PFe),e(PFe,Z_r),e(TE,ebr),e(TE,JQ),e(JQ,obr),e(TE,rbr),e(se,tbr),e(se,ME),e(ME,BFe),e(BFe,abr),e(ME,nbr),e(ME,YQ),e(YQ,sbr),e(ME,lbr),e(se,ibr),e(se,EE),e(EE,IFe),e(IFe,dbr),e(EE,cbr),e(EE,KQ),e(KQ,mbr),e(EE,fbr),e(se,gbr),e(se,CE),e(CE,NFe),e(NFe,hbr),e(CE,ubr),e(CE,ZQ),e(ZQ,pbr),e(CE,_br),e(se,bbr),e(se,wE),e(wE,qFe),e(qFe,vbr),e(wE,Fbr),e(wE,eH),e(eH,Tbr),e(wE,Mbr),e(se,Ebr),e(se,AE),e(AE,jFe),e(jFe,Cbr),e(AE,wbr),e(AE,oH),e(oH,Abr),e(AE,Lbr),e(se,ybr),e(se,LE),e(LE,DFe),e(DFe,xbr),e(LE,$br),e(LE,rH),e(rH,kbr),e(LE,Sbr),e(se,Rbr),e(se,yE),e(yE,GFe),e(GFe,Pbr),e(yE,Bbr),e(yE,tH),e(tH,Ibr),e(yE,Nbr),e(se,qbr),e(se,xE),e(xE,OFe),e(OFe,jbr),e(xE,Dbr),e(xE,aH),e(aH,Gbr),e(xE,Obr),e(se,Vbr),e(se,$E),e($E,VFe),e(VFe,Xbr),e($E,zbr),e($E,nH),e(nH,Wbr),e($E,Qbr),e(se,Hbr),e(se,kE),e(kE,XFe),e(XFe,Ubr),e(kE,Jbr),e(kE,sH),e(sH,Ybr),e(kE,Kbr),e(se,Zbr),e(se,SE),e(SE,zFe),e(zFe,e2r),e(SE,o2r),e(SE,lH),e(lH,r2r),e(SE,t2r),e(Ar,a2r),M(RE,Ar,null),b(m,ADe,_),b(m,Hd,_),e(Hd,PE),e(PE,WFe),M(I8,WFe,null),e(Hd,n2r),e(Hd,QFe),e(QFe,s2r),b(m,LDe,_),b(m,Zo,_),M(N8,Zo,null),e(Zo,l2r),e(Zo,Ud),e(Ud,i2r),e(Ud,iH),e(iH,d2r),e(Ud,c2r),e(Ud,dH),e(dH,m2r),e(Ud,f2r),e(Zo,g2r),e(Zo,q8),e(q8,h2r),e(q8,HFe),e(HFe,u2r),e(q8,p2r),e(Zo,_2r),e(Zo,xt),M(j8,xt,null),e(xt,b2r),e(xt,UFe),e(UFe,v2r),e(xt,F2r),e(xt,Jd),e(Jd,T2r),e(Jd,JFe),e(JFe,M2r),e(Jd,E2r),e(Jd,cH),e(cH,C2r),e(Jd,w2r),e(xt,A2r),M(BE,xt,null),e(Zo,L2r),e(Zo,Lr),M(D8,Lr,null),e(Lr,y2r),e(Lr,YFe),e(YFe,x2r),e(Lr,$2r),e(Lr,en),e(en,k2r),e(en,KFe),e(KFe,S2r),e(en,R2r),e(en,ZFe),e(ZFe,P2r),e(en,B2r),e(en,e1e),e(e1e,I2r),e(en,N2r),e(Lr,q2r),e(Lr,Me),e(Me,IE),e(IE,o1e),e(o1e,j2r),e(IE,D2r),e(IE,mH),e(mH,G2r),e(IE,O2r),e(Me,V2r),e(Me,NE),e(NE,r1e),e(r1e,X2r),e(NE,z2r),e(NE,fH),e(fH,W2r),e(NE,Q2r),e(Me,H2r),e(Me,qE),e(qE,t1e),e(t1e,U2r),e(qE,J2r),e(qE,gH),e(gH,Y2r),e(qE,K2r),e(Me,Z2r),e(Me,jE),e(jE,a1e),e(a1e,evr),e(jE,ovr),e(jE,hH),e(hH,rvr),e(jE,tvr),e(Me,avr),e(Me,DE),e(DE,n1e),e(n1e,nvr),e(DE,svr),e(DE,uH),e(uH,lvr),e(DE,ivr),e(Me,dvr),e(Me,GE),e(GE,s1e),e(s1e,cvr),e(GE,mvr),e(GE,pH),e(pH,fvr),e(GE,gvr),e(Me,hvr),e(Me,OE),e(OE,l1e),e(l1e,uvr),e(OE,pvr),e(OE,_H),e(_H,_vr),e(OE,bvr),e(Me,vvr),e(Me,VE),e(VE,i1e),e(i1e,Fvr),e(VE,Tvr),e(VE,bH),e(bH,Mvr),e(VE,Evr),e(Me,Cvr),e(Me,XE),e(XE,d1e),e(d1e,wvr),e(XE,Avr),e(XE,vH),e(vH,Lvr),e(XE,yvr),e(Me,xvr),e(Me,zE),e(zE,c1e),e(c1e,$vr),e(zE,kvr),e(zE,FH),e(FH,Svr),e(zE,Rvr),e(Me,Pvr),e(Me,WE),e(WE,m1e),e(m1e,Bvr),e(WE,Ivr),e(WE,TH),e(TH,Nvr),e(WE,qvr),e(Me,jvr),e(Me,QE),e(QE,f1e),e(f1e,Dvr),e(QE,Gvr),e(QE,MH),e(MH,Ovr),e(QE,Vvr),e(Me,Xvr),e(Me,HE),e(HE,g1e),e(g1e,zvr),e(HE,Wvr),e(HE,EH),e(EH,Qvr),e(HE,Hvr),e(Lr,Uvr),M(UE,Lr,null),b(m,yDe,_),b(m,Yd,_),e(Yd,JE),e(JE,h1e),M(G8,h1e,null),e(Yd,Jvr),e(Yd,u1e),e(u1e,Yvr),b(m,xDe,_),b(m,er,_),M(O8,er,null),e(er,Kvr),e(er,Kd),e(Kd,Zvr),e(Kd,CH),e(CH,eFr),e(Kd,oFr),e(Kd,wH),e(wH,rFr),e(Kd,tFr),e(er,aFr),e(er,V8),e(V8,nFr),e(V8,p1e),e(p1e,sFr),e(V8,lFr),e(er,iFr),e(er,$t),M(X8,$t,null),e($t,dFr),e($t,_1e),e(_1e,cFr),e($t,mFr),e($t,Zd),e(Zd,fFr),e(Zd,b1e),e(b1e,gFr),e(Zd,hFr),e(Zd,AH),e(AH,uFr),e(Zd,pFr),e($t,_Fr),M(YE,$t,null),e(er,bFr),e(er,yr),M(z8,yr,null),e(yr,vFr),e(yr,v1e),e(v1e,FFr),e(yr,TFr),e(yr,on),e(on,MFr),e(on,F1e),e(F1e,EFr),e(on,CFr),e(on,T1e),e(T1e,wFr),e(on,AFr),e(on,M1e),e(M1e,LFr),e(on,yFr),e(yr,xFr),e(yr,rn),e(rn,KE),e(KE,E1e),e(E1e,$Fr),e(KE,kFr),e(KE,LH),e(LH,SFr),e(KE,RFr),e(rn,PFr),e(rn,ZE),e(ZE,C1e),e(C1e,BFr),e(ZE,IFr),e(ZE,yH),e(yH,NFr),e(ZE,qFr),e(rn,jFr),e(rn,eC),e(eC,w1e),e(w1e,DFr),e(eC,GFr),e(eC,xH),e(xH,OFr),e(eC,VFr),e(rn,XFr),e(rn,oC),e(oC,A1e),e(A1e,zFr),e(oC,WFr),e(oC,$H),e($H,QFr),e(oC,HFr),e(yr,UFr),M(rC,yr,null),b(m,$De,_),b(m,ec,_),e(ec,tC),e(tC,L1e),M(W8,L1e,null),e(ec,JFr),e(ec,y1e),e(y1e,YFr),b(m,kDe,_),b(m,or,_),M(Q8,or,null),e(or,KFr),e(or,oc),e(oc,ZFr),e(oc,kH),e(kH,e1r),e(oc,o1r),e(oc,SH),e(SH,r1r),e(oc,t1r),e(or,a1r),e(or,H8),e(H8,n1r),e(H8,x1e),e(x1e,s1r),e(H8,l1r),e(or,i1r),e(or,kt),M(U8,kt,null),e(kt,d1r),e(kt,$1e),e($1e,c1r),e(kt,m1r),e(kt,rc),e(rc,f1r),e(rc,k1e),e(k1e,g1r),e(rc,h1r),e(rc,RH),e(RH,u1r),e(rc,p1r),e(kt,_1r),M(aC,kt,null),e(or,b1r),e(or,xr),M(J8,xr,null),e(xr,v1r),e(xr,S1e),e(S1e,F1r),e(xr,T1r),e(xr,tn),e(tn,M1r),e(tn,R1e),e(R1e,E1r),e(tn,C1r),e(tn,P1e),e(P1e,w1r),e(tn,A1r),e(tn,B1e),e(B1e,L1r),e(tn,y1r),e(xr,x1r),e(xr,ie),e(ie,nC),e(nC,I1e),e(I1e,$1r),e(nC,k1r),e(nC,PH),e(PH,S1r),e(nC,R1r),e(ie,P1r),e(ie,sC),e(sC,N1e),e(N1e,B1r),e(sC,I1r),e(sC,BH),e(BH,N1r),e(sC,q1r),e(ie,j1r),e(ie,lC),e(lC,q1e),e(q1e,D1r),e(lC,G1r),e(lC,IH),e(IH,O1r),e(lC,V1r),e(ie,X1r),e(ie,iC),e(iC,j1e),e(j1e,z1r),e(iC,W1r),e(iC,NH),e(NH,Q1r),e(iC,H1r),e(ie,U1r),e(ie,dC),e(dC,D1e),e(D1e,J1r),e(dC,Y1r),e(dC,qH),e(qH,K1r),e(dC,Z1r),e(ie,eTr),e(ie,cC),e(cC,G1e),e(G1e,oTr),e(cC,rTr),e(cC,jH),e(jH,tTr),e(cC,aTr),e(ie,nTr),e(ie,mC),e(mC,O1e),e(O1e,sTr),e(mC,lTr),e(mC,DH),e(DH,iTr),e(mC,dTr),e(ie,cTr),e(ie,fC),e(fC,V1e),e(V1e,mTr),e(fC,fTr),e(fC,GH),e(GH,gTr),e(fC,hTr),e(ie,uTr),e(ie,gC),e(gC,X1e),e(X1e,pTr),e(gC,_Tr),e(gC,OH),e(OH,bTr),e(gC,vTr),e(ie,FTr),e(ie,hC),e(hC,z1e),e(z1e,TTr),e(hC,MTr),e(hC,VH),e(VH,ETr),e(hC,CTr),e(ie,wTr),e(ie,uC),e(uC,W1e),e(W1e,ATr),e(uC,LTr),e(uC,XH),e(XH,yTr),e(uC,xTr),e(ie,$Tr),e(ie,pC),e(pC,Q1e),e(Q1e,kTr),e(pC,STr),e(pC,zH),e(zH,RTr),e(pC,PTr),e(ie,BTr),e(ie,_C),e(_C,H1e),e(H1e,ITr),e(_C,NTr),e(_C,WH),e(WH,qTr),e(_C,jTr),e(ie,DTr),e(ie,bC),e(bC,U1e),e(U1e,GTr),e(bC,OTr),e(bC,QH),e(QH,VTr),e(bC,XTr),e(ie,zTr),e(ie,vC),e(vC,J1e),e(J1e,WTr),e(vC,QTr),e(vC,HH),e(HH,HTr),e(vC,UTr),e(ie,JTr),e(ie,FC),e(FC,Y1e),e(Y1e,YTr),e(FC,KTr),e(FC,UH),e(UH,ZTr),e(FC,eMr),e(ie,oMr),e(ie,TC),e(TC,K1e),e(K1e,rMr),e(TC,tMr),e(TC,JH),e(JH,aMr),e(TC,nMr),e(ie,sMr),e(ie,MC),e(MC,Z1e),e(Z1e,lMr),e(MC,iMr),e(MC,YH),e(YH,dMr),e(MC,cMr),e(ie,mMr),e(ie,EC),e(EC,eTe),e(eTe,fMr),e(EC,gMr),e(EC,KH),e(KH,hMr),e(EC,uMr),e(ie,pMr),e(ie,CC),e(CC,oTe),e(oTe,_Mr),e(CC,bMr),e(CC,ZH),e(ZH,vMr),e(CC,FMr),e(xr,TMr),M(wC,xr,null),b(m,SDe,_),b(m,tc,_),e(tc,AC),e(AC,rTe),M(Y8,rTe,null),e(tc,MMr),e(tc,tTe),e(tTe,EMr),b(m,RDe,_),b(m,rr,_),M(K8,rr,null),e(rr,CMr),e(rr,ac),e(ac,wMr),e(ac,eU),e(eU,AMr),e(ac,LMr),e(ac,oU),e(oU,yMr),e(ac,xMr),e(rr,$Mr),e(rr,Z8),e(Z8,kMr),e(Z8,aTe),e(aTe,SMr),e(Z8,RMr),e(rr,PMr),e(rr,St),M(e9,St,null),e(St,BMr),e(St,nTe),e(nTe,IMr),e(St,NMr),e(St,nc),e(nc,qMr),e(nc,sTe),e(sTe,jMr),e(nc,DMr),e(nc,rU),e(rU,GMr),e(nc,OMr),e(St,VMr),M(LC,St,null),e(rr,XMr),e(rr,$r),M(o9,$r,null),e($r,zMr),e($r,lTe),e(lTe,WMr),e($r,QMr),e($r,an),e(an,HMr),e(an,iTe),e(iTe,UMr),e(an,JMr),e(an,dTe),e(dTe,YMr),e(an,KMr),e(an,cTe),e(cTe,ZMr),e(an,e4r),e($r,o4r),e($r,ye),e(ye,yC),e(yC,mTe),e(mTe,r4r),e(yC,t4r),e(yC,tU),e(tU,a4r),e(yC,n4r),e(ye,s4r),e(ye,xC),e(xC,fTe),e(fTe,l4r),e(xC,i4r),e(xC,aU),e(aU,d4r),e(xC,c4r),e(ye,m4r),e(ye,$C),e($C,gTe),e(gTe,f4r),e($C,g4r),e($C,nU),e(nU,h4r),e($C,u4r),e(ye,p4r),e(ye,kC),e(kC,hTe),e(hTe,_4r),e(kC,b4r),e(kC,sU),e(sU,v4r),e(kC,F4r),e(ye,T4r),e(ye,SC),e(SC,uTe),e(uTe,M4r),e(SC,E4r),e(SC,lU),e(lU,C4r),e(SC,w4r),e(ye,A4r),e(ye,RC),e(RC,pTe),e(pTe,L4r),e(RC,y4r),e(RC,iU),e(iU,x4r),e(RC,$4r),e(ye,k4r),e(ye,PC),e(PC,_Te),e(_Te,S4r),e(PC,R4r),e(PC,dU),e(dU,P4r),e(PC,B4r),e(ye,I4r),e(ye,BC),e(BC,bTe),e(bTe,N4r),e(BC,q4r),e(BC,cU),e(cU,j4r),e(BC,D4r),e(ye,G4r),e(ye,IC),e(IC,vTe),e(vTe,O4r),e(IC,V4r),e(IC,mU),e(mU,X4r),e(IC,z4r),e(ye,W4r),e(ye,NC),e(NC,FTe),e(FTe,Q4r),e(NC,H4r),e(NC,fU),e(fU,U4r),e(NC,J4r),e($r,Y4r),M(qC,$r,null),b(m,PDe,_),b(m,sc,_),e(sc,jC),e(jC,TTe),M(r9,TTe,null),e(sc,K4r),e(sc,MTe),e(MTe,Z4r),b(m,BDe,_),b(m,tr,_),M(t9,tr,null),e(tr,eEr),e(tr,lc),e(lc,oEr),e(lc,gU),e(gU,rEr),e(lc,tEr),e(lc,hU),e(hU,aEr),e(lc,nEr),e(tr,sEr),e(tr,a9),e(a9,lEr),e(a9,ETe),e(ETe,iEr),e(a9,dEr),e(tr,cEr),e(tr,Rt),M(n9,Rt,null),e(Rt,mEr),e(Rt,CTe),e(CTe,fEr),e(Rt,gEr),e(Rt,ic),e(ic,hEr),e(ic,wTe),e(wTe,uEr),e(ic,pEr),e(ic,uU),e(uU,_Er),e(ic,bEr),e(Rt,vEr),M(DC,Rt,null),e(tr,FEr),e(tr,kr),M(s9,kr,null),e(kr,TEr),e(kr,ATe),e(ATe,MEr),e(kr,EEr),e(kr,nn),e(nn,CEr),e(nn,LTe),e(LTe,wEr),e(nn,AEr),e(nn,yTe),e(yTe,LEr),e(nn,yEr),e(nn,xTe),e(xTe,xEr),e(nn,$Er),e(kr,kEr),e(kr,oe),e(oe,GC),e(GC,$Te),e($Te,SEr),e(GC,REr),e(GC,pU),e(pU,PEr),e(GC,BEr),e(oe,IEr),e(oe,OC),e(OC,kTe),e(kTe,NEr),e(OC,qEr),e(OC,_U),e(_U,jEr),e(OC,DEr),e(oe,GEr),e(oe,VC),e(VC,STe),e(STe,OEr),e(VC,VEr),e(VC,bU),e(bU,XEr),e(VC,zEr),e(oe,WEr),e(oe,XC),e(XC,RTe),e(RTe,QEr),e(XC,HEr),e(XC,vU),e(vU,UEr),e(XC,JEr),e(oe,YEr),e(oe,zC),e(zC,PTe),e(PTe,KEr),e(zC,ZEr),e(zC,FU),e(FU,eCr),e(zC,oCr),e(oe,rCr),e(oe,WC),e(WC,BTe),e(BTe,tCr),e(WC,aCr),e(WC,TU),e(TU,nCr),e(WC,sCr),e(oe,lCr),e(oe,QC),e(QC,ITe),e(ITe,iCr),e(QC,dCr),e(QC,MU),e(MU,cCr),e(QC,mCr),e(oe,fCr),e(oe,HC),e(HC,NTe),e(NTe,gCr),e(HC,hCr),e(HC,EU),e(EU,uCr),e(HC,pCr),e(oe,_Cr),e(oe,UC),e(UC,qTe),e(qTe,bCr),e(UC,vCr),e(UC,CU),e(CU,FCr),e(UC,TCr),e(oe,MCr),e(oe,JC),e(JC,jTe),e(jTe,ECr),e(JC,CCr),e(JC,wU),e(wU,wCr),e(JC,ACr),e(oe,LCr),e(oe,YC),e(YC,DTe),e(DTe,yCr),e(YC,xCr),e(YC,AU),e(AU,$Cr),e(YC,kCr),e(oe,SCr),e(oe,KC),e(KC,GTe),e(GTe,RCr),e(KC,PCr),e(KC,LU),e(LU,BCr),e(KC,ICr),e(oe,NCr),e(oe,ZC),e(ZC,OTe),e(OTe,qCr),e(ZC,jCr),e(ZC,yU),e(yU,DCr),e(ZC,GCr),e(oe,OCr),e(oe,e5),e(e5,VTe),e(VTe,VCr),e(e5,XCr),e(e5,xU),e(xU,zCr),e(e5,WCr),e(oe,QCr),e(oe,o5),e(o5,XTe),e(XTe,HCr),e(o5,UCr),e(o5,$U),e($U,JCr),e(o5,YCr),e(oe,KCr),e(oe,r5),e(r5,zTe),e(zTe,ZCr),e(r5,e5r),e(r5,kU),e(kU,o5r),e(r5,r5r),e(oe,t5r),e(oe,t5),e(t5,WTe),e(WTe,a5r),e(t5,n5r),e(t5,SU),e(SU,s5r),e(t5,l5r),e(oe,i5r),e(oe,a5),e(a5,QTe),e(QTe,d5r),e(a5,c5r),e(a5,RU),e(RU,m5r),e(a5,f5r),e(oe,g5r),e(oe,n5),e(n5,HTe),e(HTe,h5r),e(n5,u5r),e(n5,PU),e(PU,p5r),e(n5,_5r),e(oe,b5r),e(oe,s5),e(s5,UTe),e(UTe,v5r),e(s5,F5r),e(s5,BU),e(BU,T5r),e(s5,M5r),e(oe,E5r),e(oe,l5),e(l5,JTe),e(JTe,C5r),e(l5,w5r),e(l5,IU),e(IU,A5r),e(l5,L5r),e(oe,y5r),e(oe,i5),e(i5,YTe),e(YTe,x5r),e(i5,$5r),e(i5,NU),e(NU,k5r),e(i5,S5r),e(oe,R5r),e(oe,d5),e(d5,KTe),e(KTe,P5r),e(d5,B5r),e(d5,qU),e(qU,I5r),e(d5,N5r),e(oe,q5r),e(oe,c5),e(c5,ZTe),e(ZTe,j5r),e(c5,D5r),e(c5,jU),e(jU,G5r),e(c5,O5r),e(oe,V5r),e(oe,m5),e(m5,eMe),e(eMe,X5r),e(m5,z5r),e(m5,DU),e(DU,W5r),e(m5,Q5r),e(oe,H5r),e(oe,f5),e(f5,oMe),e(oMe,U5r),e(f5,J5r),e(f5,GU),e(GU,Y5r),e(f5,K5r),e(kr,Z5r),M(g5,kr,null),b(m,IDe,_),b(m,dc,_),e(dc,h5),e(h5,rMe),M(l9,rMe,null),e(dc,e3r),e(dc,tMe),e(tMe,o3r),b(m,NDe,_),b(m,ar,_),M(i9,ar,null),e(ar,r3r),e(ar,cc),e(cc,t3r),e(cc,OU),e(OU,a3r),e(cc,n3r),e(cc,VU),e(VU,s3r),e(cc,l3r),e(ar,i3r),e(ar,d9),e(d9,d3r),e(d9,aMe),e(aMe,c3r),e(d9,m3r),e(ar,f3r),e(ar,Pt),M(c9,Pt,null),e(Pt,g3r),e(Pt,nMe),e(nMe,h3r),e(Pt,u3r),e(Pt,mc),e(mc,p3r),e(mc,sMe),e(sMe,_3r),e(mc,b3r),e(mc,XU),e(XU,v3r),e(mc,F3r),e(Pt,T3r),M(u5,Pt,null),e(ar,M3r),e(ar,Sr),M(m9,Sr,null),e(Sr,E3r),e(Sr,lMe),e(lMe,C3r),e(Sr,w3r),e(Sr,sn),e(sn,A3r),e(sn,iMe),e(iMe,L3r),e(sn,y3r),e(sn,dMe),e(dMe,x3r),e(sn,$3r),e(sn,cMe),e(cMe,k3r),e(sn,S3r),e(Sr,R3r),e(Sr,ue),e(ue,p5),e(p5,mMe),e(mMe,P3r),e(p5,B3r),e(p5,zU),e(zU,I3r),e(p5,N3r),e(ue,q3r),e(ue,_5),e(_5,fMe),e(fMe,j3r),e(_5,D3r),e(_5,WU),e(WU,G3r),e(_5,O3r),e(ue,V3r),e(ue,b5),e(b5,gMe),e(gMe,X3r),e(b5,z3r),e(b5,QU),e(QU,W3r),e(b5,Q3r),e(ue,H3r),e(ue,v5),e(v5,hMe),e(hMe,U3r),e(v5,J3r),e(v5,HU),e(HU,Y3r),e(v5,K3r),e(ue,Z3r),e(ue,F5),e(F5,uMe),e(uMe,e0r),e(F5,o0r),e(F5,UU),e(UU,r0r),e(F5,t0r),e(ue,a0r),e(ue,T5),e(T5,pMe),e(pMe,n0r),e(T5,s0r),e(T5,JU),e(JU,l0r),e(T5,i0r),e(ue,d0r),e(ue,M5),e(M5,_Me),e(_Me,c0r),e(M5,m0r),e(M5,YU),e(YU,f0r),e(M5,g0r),e(ue,h0r),e(ue,E5),e(E5,bMe),e(bMe,u0r),e(E5,p0r),e(E5,KU),e(KU,_0r),e(E5,b0r),e(ue,v0r),e(ue,C5),e(C5,vMe),e(vMe,F0r),e(C5,T0r),e(C5,ZU),e(ZU,M0r),e(C5,E0r),e(ue,C0r),e(ue,w5),e(w5,FMe),e(FMe,w0r),e(w5,A0r),e(w5,eJ),e(eJ,L0r),e(w5,y0r),e(ue,x0r),e(ue,A5),e(A5,TMe),e(TMe,$0r),e(A5,k0r),e(A5,oJ),e(oJ,S0r),e(A5,R0r),e(ue,P0r),e(ue,L5),e(L5,MMe),e(MMe,B0r),e(L5,I0r),e(L5,rJ),e(rJ,N0r),e(L5,q0r),e(ue,j0r),e(ue,y5),e(y5,EMe),e(EMe,D0r),e(y5,G0r),e(y5,tJ),e(tJ,O0r),e(y5,V0r),e(ue,X0r),e(ue,x5),e(x5,CMe),e(CMe,z0r),e(x5,W0r),e(x5,aJ),e(aJ,Q0r),e(x5,H0r),e(ue,U0r),e(ue,$5),e($5,wMe),e(wMe,J0r),e($5,Y0r),e($5,nJ),e(nJ,K0r),e($5,Z0r),e(ue,ewr),e(ue,k5),e(k5,AMe),e(AMe,owr),e(k5,rwr),e(k5,sJ),e(sJ,twr),e(k5,awr),e(ue,nwr),e(ue,S5),e(S5,LMe),e(LMe,swr),e(S5,lwr),e(S5,lJ),e(lJ,iwr),e(S5,dwr),e(Sr,cwr),M(R5,Sr,null),b(m,qDe,_),b(m,fc,_),e(fc,P5),e(P5,yMe),M(f9,yMe,null),e(fc,mwr),e(fc,xMe),e(xMe,fwr),b(m,jDe,_),b(m,nr,_),M(g9,nr,null),e(nr,gwr),e(nr,gc),e(gc,hwr),e(gc,iJ),e(iJ,uwr),e(gc,pwr),e(gc,dJ),e(dJ,_wr),e(gc,bwr),e(nr,vwr),e(nr,h9),e(h9,Fwr),e(h9,$Me),e($Me,Twr),e(h9,Mwr),e(nr,Ewr),e(nr,Bt),M(u9,Bt,null),e(Bt,Cwr),e(Bt,kMe),e(kMe,wwr),e(Bt,Awr),e(Bt,hc),e(hc,Lwr),e(hc,SMe),e(SMe,ywr),e(hc,xwr),e(hc,cJ),e(cJ,$wr),e(hc,kwr),e(Bt,Swr),M(B5,Bt,null),e(nr,Rwr),e(nr,Rr),M(p9,Rr,null),e(Rr,Pwr),e(Rr,RMe),e(RMe,Bwr),e(Rr,Iwr),e(Rr,ln),e(ln,Nwr),e(ln,PMe),e(PMe,qwr),e(ln,jwr),e(ln,BMe),e(BMe,Dwr),e(ln,Gwr),e(ln,IMe),e(IMe,Owr),e(ln,Vwr),e(Rr,Xwr),e(Rr,_9),e(_9,I5),e(I5,NMe),e(NMe,zwr),e(I5,Wwr),e(I5,mJ),e(mJ,Qwr),e(I5,Hwr),e(_9,Uwr),e(_9,N5),e(N5,qMe),e(qMe,Jwr),e(N5,Ywr),e(N5,fJ),e(fJ,Kwr),e(N5,Zwr),e(Rr,eAr),M(q5,Rr,null),b(m,DDe,_),b(m,uc,_),e(uc,j5),e(j5,jMe),M(b9,jMe,null),e(uc,oAr),e(uc,DMe),e(DMe,rAr),b(m,GDe,_),b(m,sr,_),M(v9,sr,null),e(sr,tAr),e(sr,pc),e(pc,aAr),e(pc,gJ),e(gJ,nAr),e(pc,sAr),e(pc,hJ),e(hJ,lAr),e(pc,iAr),e(sr,dAr),e(sr,F9),e(F9,cAr),e(F9,GMe),e(GMe,mAr),e(F9,fAr),e(sr,gAr),e(sr,It),M(T9,It,null),e(It,hAr),e(It,OMe),e(OMe,uAr),e(It,pAr),e(It,_c),e(_c,_Ar),e(_c,VMe),e(VMe,bAr),e(_c,vAr),e(_c,uJ),e(uJ,FAr),e(_c,TAr),e(It,MAr),M(D5,It,null),e(sr,EAr),e(sr,Pr),M(M9,Pr,null),e(Pr,CAr),e(Pr,XMe),e(XMe,wAr),e(Pr,AAr),e(Pr,dn),e(dn,LAr),e(dn,zMe),e(zMe,yAr),e(dn,xAr),e(dn,WMe),e(WMe,$Ar),e(dn,kAr),e(dn,QMe),e(QMe,SAr),e(dn,RAr),e(Pr,PAr),e(Pr,HMe),e(HMe,G5),e(G5,UMe),e(UMe,BAr),e(G5,IAr),e(G5,pJ),e(pJ,NAr),e(G5,qAr),e(Pr,jAr),M(O5,Pr,null),b(m,ODe,_),b(m,bc,_),e(bc,V5),e(V5,JMe),M(E9,JMe,null),e(bc,DAr),e(bc,YMe),e(YMe,GAr),b(m,VDe,_),b(m,lr,_),M(C9,lr,null),e(lr,OAr),e(lr,vc),e(vc,VAr),e(vc,_J),e(_J,XAr),e(vc,zAr),e(vc,bJ),e(bJ,WAr),e(vc,QAr),e(lr,HAr),e(lr,w9),e(w9,UAr),e(w9,KMe),e(KMe,JAr),e(w9,YAr),e(lr,KAr),e(lr,Nt),M(A9,Nt,null),e(Nt,ZAr),e(Nt,ZMe),e(ZMe,e6r),e(Nt,o6r),e(Nt,Fc),e(Fc,r6r),e(Fc,e4e),e(e4e,t6r),e(Fc,a6r),e(Fc,vJ),e(vJ,n6r),e(Fc,s6r),e(Nt,l6r),M(X5,Nt,null),e(lr,i6r),e(lr,Br),M(L9,Br,null),e(Br,d6r),e(Br,o4e),e(o4e,c6r),e(Br,m6r),e(Br,cn),e(cn,f6r),e(cn,r4e),e(r4e,g6r),e(cn,h6r),e(cn,t4e),e(t4e,u6r),e(cn,p6r),e(cn,a4e),e(a4e,_6r),e(cn,b6r),e(Br,v6r),e(Br,de),e(de,z5),e(z5,n4e),e(n4e,F6r),e(z5,T6r),e(z5,FJ),e(FJ,M6r),e(z5,E6r),e(de,C6r),e(de,W5),e(W5,s4e),e(s4e,w6r),e(W5,A6r),e(W5,TJ),e(TJ,L6r),e(W5,y6r),e(de,x6r),e(de,Q5),e(Q5,l4e),e(l4e,$6r),e(Q5,k6r),e(Q5,MJ),e(MJ,S6r),e(Q5,R6r),e(de,P6r),e(de,H5),e(H5,i4e),e(i4e,B6r),e(H5,I6r),e(H5,EJ),e(EJ,N6r),e(H5,q6r),e(de,j6r),e(de,U5),e(U5,d4e),e(d4e,D6r),e(U5,G6r),e(U5,CJ),e(CJ,O6r),e(U5,V6r),e(de,X6r),e(de,J5),e(J5,c4e),e(c4e,z6r),e(J5,W6r),e(J5,wJ),e(wJ,Q6r),e(J5,H6r),e(de,U6r),e(de,Y5),e(Y5,m4e),e(m4e,J6r),e(Y5,Y6r),e(Y5,AJ),e(AJ,K6r),e(Y5,Z6r),e(de,eLr),e(de,K5),e(K5,f4e),e(f4e,oLr),e(K5,rLr),e(K5,LJ),e(LJ,tLr),e(K5,aLr),e(de,nLr),e(de,Z5),e(Z5,g4e),e(g4e,sLr),e(Z5,lLr),e(Z5,yJ),e(yJ,iLr),e(Z5,dLr),e(de,cLr),e(de,e3),e(e3,h4e),e(h4e,mLr),e(e3,fLr),e(e3,xJ),e(xJ,gLr),e(e3,hLr),e(de,uLr),e(de,o3),e(o3,u4e),e(u4e,pLr),e(o3,_Lr),e(o3,$J),e($J,bLr),e(o3,vLr),e(de,FLr),e(de,r3),e(r3,p4e),e(p4e,TLr),e(r3,MLr),e(r3,kJ),e(kJ,ELr),e(r3,CLr),e(de,wLr),e(de,t3),e(t3,_4e),e(_4e,ALr),e(t3,LLr),e(t3,SJ),e(SJ,yLr),e(t3,xLr),e(de,$Lr),e(de,a3),e(a3,b4e),e(b4e,kLr),e(a3,SLr),e(a3,RJ),e(RJ,RLr),e(a3,PLr),e(de,BLr),e(de,n3),e(n3,v4e),e(v4e,ILr),e(n3,NLr),e(n3,PJ),e(PJ,qLr),e(n3,jLr),e(de,DLr),e(de,s3),e(s3,F4e),e(F4e,GLr),e(s3,OLr),e(s3,BJ),e(BJ,VLr),e(s3,XLr),e(de,zLr),e(de,l3),e(l3,T4e),e(T4e,WLr),e(l3,QLr),e(l3,IJ),e(IJ,HLr),e(l3,ULr),e(de,JLr),e(de,i3),e(i3,M4e),e(M4e,YLr),e(i3,KLr),e(i3,NJ),e(NJ,ZLr),e(i3,eyr),e(de,oyr),e(de,d3),e(d3,E4e),e(E4e,ryr),e(d3,tyr),e(d3,qJ),e(qJ,ayr),e(d3,nyr),e(de,syr),e(de,c3),e(c3,C4e),e(C4e,lyr),e(c3,iyr),e(c3,jJ),e(jJ,dyr),e(c3,cyr),e(Br,myr),M(m3,Br,null),b(m,XDe,_),b(m,Tc,_),e(Tc,f3),e(f3,w4e),M(y9,w4e,null),e(Tc,fyr),e(Tc,A4e),e(A4e,gyr),b(m,zDe,_),b(m,ir,_),M(x9,ir,null),e(ir,hyr),e(ir,Mc),e(Mc,uyr),e(Mc,DJ),e(DJ,pyr),e(Mc,_yr),e(Mc,GJ),e(GJ,byr),e(Mc,vyr),e(ir,Fyr),e(ir,$9),e($9,Tyr),e($9,L4e),e(L4e,Myr),e($9,Eyr),e(ir,Cyr),e(ir,qt),M(k9,qt,null),e(qt,wyr),e(qt,y4e),e(y4e,Ayr),e(qt,Lyr),e(qt,Ec),e(Ec,yyr),e(Ec,x4e),e(x4e,xyr),e(Ec,$yr),e(Ec,OJ),e(OJ,kyr),e(Ec,Syr),e(qt,Ryr),M(g3,qt,null),e(ir,Pyr),e(ir,Ir),M(S9,Ir,null),e(Ir,Byr),e(Ir,$4e),e($4e,Iyr),e(Ir,Nyr),e(Ir,mn),e(mn,qyr),e(mn,k4e),e(k4e,jyr),e(mn,Dyr),e(mn,S4e),e(S4e,Gyr),e(mn,Oyr),e(mn,R4e),e(R4e,Vyr),e(mn,Xyr),e(Ir,zyr),e(Ir,ce),e(ce,h3),e(h3,P4e),e(P4e,Wyr),e(h3,Qyr),e(h3,VJ),e(VJ,Hyr),e(h3,Uyr),e(ce,Jyr),e(ce,u3),e(u3,B4e),e(B4e,Yyr),e(u3,Kyr),e(u3,XJ),e(XJ,Zyr),e(u3,e7r),e(ce,o7r),e(ce,p3),e(p3,I4e),e(I4e,r7r),e(p3,t7r),e(p3,zJ),e(zJ,a7r),e(p3,n7r),e(ce,s7r),e(ce,_3),e(_3,N4e),e(N4e,l7r),e(_3,i7r),e(_3,WJ),e(WJ,d7r),e(_3,c7r),e(ce,m7r),e(ce,b3),e(b3,q4e),e(q4e,f7r),e(b3,g7r),e(b3,QJ),e(QJ,h7r),e(b3,u7r),e(ce,p7r),e(ce,v3),e(v3,j4e),e(j4e,_7r),e(v3,b7r),e(v3,HJ),e(HJ,v7r),e(v3,F7r),e(ce,T7r),e(ce,F3),e(F3,D4e),e(D4e,M7r),e(F3,E7r),e(F3,UJ),e(UJ,C7r),e(F3,w7r),e(ce,A7r),e(ce,T3),e(T3,G4e),e(G4e,L7r),e(T3,y7r),e(T3,JJ),e(JJ,x7r),e(T3,$7r),e(ce,k7r),e(ce,M3),e(M3,O4e),e(O4e,S7r),e(M3,R7r),e(M3,YJ),e(YJ,P7r),e(M3,B7r),e(ce,I7r),e(ce,E3),e(E3,V4e),e(V4e,N7r),e(E3,q7r),e(E3,KJ),e(KJ,j7r),e(E3,D7r),e(ce,G7r),e(ce,C3),e(C3,X4e),e(X4e,O7r),e(C3,V7r),e(C3,ZJ),e(ZJ,X7r),e(C3,z7r),e(ce,W7r),e(ce,w3),e(w3,z4e),e(z4e,Q7r),e(w3,H7r),e(w3,eY),e(eY,U7r),e(w3,J7r),e(ce,Y7r),e(ce,A3),e(A3,W4e),e(W4e,K7r),e(A3,Z7r),e(A3,oY),e(oY,e8r),e(A3,o8r),e(ce,r8r),e(ce,L3),e(L3,Q4e),e(Q4e,t8r),e(L3,a8r),e(L3,rY),e(rY,n8r),e(L3,s8r),e(ce,l8r),e(ce,y3),e(y3,H4e),e(H4e,i8r),e(y3,d8r),e(y3,tY),e(tY,c8r),e(y3,m8r),e(ce,f8r),e(ce,x3),e(x3,U4e),e(U4e,g8r),e(x3,h8r),e(x3,aY),e(aY,u8r),e(x3,p8r),e(ce,_8r),e(ce,$3),e($3,J4e),e(J4e,b8r),e($3,v8r),e($3,nY),e(nY,F8r),e($3,T8r),e(ce,M8r),e(ce,k3),e(k3,Y4e),e(Y4e,E8r),e(k3,C8r),e(k3,sY),e(sY,w8r),e(k3,A8r),e(ce,L8r),e(ce,S3),e(S3,K4e),e(K4e,y8r),e(S3,x8r),e(S3,lY),e(lY,$8r),e(S3,k8r),e(ce,S8r),e(ce,R3),e(R3,Z4e),e(Z4e,R8r),e(R3,P8r),e(R3,iY),e(iY,B8r),e(R3,I8r),e(Ir,N8r),M(P3,Ir,null),b(m,WDe,_),b(m,Cc,_),e(Cc,B3),e(B3,eEe),M(R9,eEe,null),e(Cc,q8r),e(Cc,oEe),e(oEe,j8r),b(m,QDe,_),b(m,dr,_),M(P9,dr,null),e(dr,D8r),e(dr,wc),e(wc,G8r),e(wc,dY),e(dY,O8r),e(wc,V8r),e(wc,cY),e(cY,X8r),e(wc,z8r),e(dr,W8r),e(dr,B9),e(B9,Q8r),e(B9,rEe),e(rEe,H8r),e(B9,U8r),e(dr,J8r),e(dr,jt),M(I9,jt,null),e(jt,Y8r),e(jt,tEe),e(tEe,K8r),e(jt,Z8r),e(jt,Ac),e(Ac,e9r),e(Ac,aEe),e(aEe,o9r),e(Ac,r9r),e(Ac,mY),e(mY,t9r),e(Ac,a9r),e(jt,n9r),M(I3,jt,null),e(dr,s9r),e(dr,Nr),M(N9,Nr,null),e(Nr,l9r),e(Nr,nEe),e(nEe,i9r),e(Nr,d9r),e(Nr,fn),e(fn,c9r),e(fn,sEe),e(sEe,m9r),e(fn,f9r),e(fn,lEe),e(lEe,g9r),e(fn,h9r),e(fn,iEe),e(iEe,u9r),e(fn,p9r),e(Nr,_9r),e(Nr,dEe),e(dEe,N3),e(N3,cEe),e(cEe,b9r),e(N3,v9r),e(N3,fY),e(fY,F9r),e(N3,T9r),e(Nr,M9r),M(q3,Nr,null),b(m,HDe,_),b(m,Lc,_),e(Lc,j3),e(j3,mEe),M(q9,mEe,null),e(Lc,E9r),e(Lc,fEe),e(fEe,C9r),b(m,UDe,_),b(m,cr,_),M(j9,cr,null),e(cr,w9r),e(cr,yc),e(yc,A9r),e(yc,gY),e(gY,L9r),e(yc,y9r),e(yc,hY),e(hY,x9r),e(yc,$9r),e(cr,k9r),e(cr,D9),e(D9,S9r),e(D9,gEe),e(gEe,R9r),e(D9,P9r),e(cr,B9r),e(cr,Dt),M(G9,Dt,null),e(Dt,I9r),e(Dt,hEe),e(hEe,N9r),e(Dt,q9r),e(Dt,xc),e(xc,j9r),e(xc,uEe),e(uEe,D9r),e(xc,G9r),e(xc,uY),e(uY,O9r),e(xc,V9r),e(Dt,X9r),M(D3,Dt,null),e(cr,z9r),e(cr,qr),M(O9,qr,null),e(qr,W9r),e(qr,pEe),e(pEe,Q9r),e(qr,H9r),e(qr,gn),e(gn,U9r),e(gn,_Ee),e(_Ee,J9r),e(gn,Y9r),e(gn,bEe),e(bEe,K9r),e(gn,Z9r),e(gn,vEe),e(vEe,exr),e(gn,oxr),e(qr,rxr),e(qr,FEe),e(FEe,G3),e(G3,TEe),e(TEe,txr),e(G3,axr),e(G3,pY),e(pY,nxr),e(G3,sxr),e(qr,lxr),M(O3,qr,null),b(m,JDe,_),b(m,$c,_),e($c,V3),e(V3,MEe),M(V9,MEe,null),e($c,ixr),e($c,EEe),e(EEe,dxr),b(m,YDe,_),b(m,mr,_),M(X9,mr,null),e(mr,cxr),e(mr,kc),e(kc,mxr),e(kc,_Y),e(_Y,fxr),e(kc,gxr),e(kc,bY),e(bY,hxr),e(kc,uxr),e(mr,pxr),e(mr,z9),e(z9,_xr),e(z9,CEe),e(CEe,bxr),e(z9,vxr),e(mr,Fxr),e(mr,Gt),M(W9,Gt,null),e(Gt,Txr),e(Gt,wEe),e(wEe,Mxr),e(Gt,Exr),e(Gt,Sc),e(Sc,Cxr),e(Sc,AEe),e(AEe,wxr),e(Sc,Axr),e(Sc,vY),e(vY,Lxr),e(Sc,yxr),e(Gt,xxr),M(X3,Gt,null),e(mr,$xr),e(mr,jr),M(Q9,jr,null),e(jr,kxr),e(jr,LEe),e(LEe,Sxr),e(jr,Rxr),e(jr,hn),e(hn,Pxr),e(hn,yEe),e(yEe,Bxr),e(hn,Ixr),e(hn,xEe),e(xEe,Nxr),e(hn,qxr),e(hn,$Ee),e($Ee,jxr),e(hn,Dxr),e(jr,Gxr),e(jr,re),e(re,z3),e(z3,kEe),e(kEe,Oxr),e(z3,Vxr),e(z3,FY),e(FY,Xxr),e(z3,zxr),e(re,Wxr),e(re,W3),e(W3,SEe),e(SEe,Qxr),e(W3,Hxr),e(W3,TY),e(TY,Uxr),e(W3,Jxr),e(re,Yxr),e(re,Q3),e(Q3,REe),e(REe,Kxr),e(Q3,Zxr),e(Q3,MY),e(MY,e$r),e(Q3,o$r),e(re,r$r),e(re,H3),e(H3,PEe),e(PEe,t$r),e(H3,a$r),e(H3,EY),e(EY,n$r),e(H3,s$r),e(re,l$r),e(re,U3),e(U3,BEe),e(BEe,i$r),e(U3,d$r),e(U3,CY),e(CY,c$r),e(U3,m$r),e(re,f$r),e(re,J3),e(J3,IEe),e(IEe,g$r),e(J3,h$r),e(J3,wY),e(wY,u$r),e(J3,p$r),e(re,_$r),e(re,Y3),e(Y3,NEe),e(NEe,b$r),e(Y3,v$r),e(Y3,AY),e(AY,F$r),e(Y3,T$r),e(re,M$r),e(re,K3),e(K3,qEe),e(qEe,E$r),e(K3,C$r),e(K3,LY),e(LY,w$r),e(K3,A$r),e(re,L$r),e(re,Z3),e(Z3,jEe),e(jEe,y$r),e(Z3,x$r),e(Z3,yY),e(yY,$$r),e(Z3,k$r),e(re,S$r),e(re,e0),e(e0,DEe),e(DEe,R$r),e(e0,P$r),e(e0,xY),e(xY,B$r),e(e0,I$r),e(re,N$r),e(re,o0),e(o0,GEe),e(GEe,q$r),e(o0,j$r),e(o0,$Y),e($Y,D$r),e(o0,G$r),e(re,O$r),e(re,r0),e(r0,OEe),e(OEe,V$r),e(r0,X$r),e(r0,kY),e(kY,z$r),e(r0,W$r),e(re,Q$r),e(re,t0),e(t0,VEe),e(VEe,H$r),e(t0,U$r),e(t0,SY),e(SY,J$r),e(t0,Y$r),e(re,K$r),e(re,a0),e(a0,XEe),e(XEe,Z$r),e(a0,ekr),e(a0,RY),e(RY,okr),e(a0,rkr),e(re,tkr),e(re,n0),e(n0,zEe),e(zEe,akr),e(n0,nkr),e(n0,PY),e(PY,skr),e(n0,lkr),e(re,ikr),e(re,s0),e(s0,WEe),e(WEe,dkr),e(s0,ckr),e(s0,BY),e(BY,mkr),e(s0,fkr),e(re,gkr),e(re,l0),e(l0,QEe),e(QEe,hkr),e(l0,ukr),e(l0,IY),e(IY,pkr),e(l0,_kr),e(re,bkr),e(re,i0),e(i0,HEe),e(HEe,vkr),e(i0,Fkr),e(i0,NY),e(NY,Tkr),e(i0,Mkr),e(re,Ekr),e(re,d0),e(d0,UEe),e(UEe,Ckr),e(d0,wkr),e(d0,qY),e(qY,Akr),e(d0,Lkr),e(re,ykr),e(re,c0),e(c0,JEe),e(JEe,xkr),e(c0,$kr),e(c0,jY),e(jY,kkr),e(c0,Skr),e(re,Rkr),e(re,m0),e(m0,YEe),e(YEe,Pkr),e(m0,Bkr),e(m0,DY),e(DY,Ikr),e(m0,Nkr),e(re,qkr),e(re,f0),e(f0,KEe),e(KEe,jkr),e(f0,Dkr),e(f0,GY),e(GY,Gkr),e(f0,Okr),e(re,Vkr),e(re,g0),e(g0,ZEe),e(ZEe,Xkr),e(g0,zkr),e(g0,OY),e(OY,Wkr),e(g0,Qkr),e(re,Hkr),e(re,h0),e(h0,eCe),e(eCe,Ukr),e(h0,Jkr),e(h0,VY),e(VY,Ykr),e(h0,Kkr),e(re,Zkr),e(re,u0),e(u0,oCe),e(oCe,eSr),e(u0,oSr),e(u0,XY),e(XY,rSr),e(u0,tSr),e(re,aSr),e(re,p0),e(p0,rCe),e(rCe,nSr),e(p0,sSr),e(p0,zY),e(zY,lSr),e(p0,iSr),e(jr,dSr),M(_0,jr,null),b(m,KDe,_),b(m,Rc,_),e(Rc,b0),e(b0,tCe),M(H9,tCe,null),e(Rc,cSr),e(Rc,aCe),e(aCe,mSr),b(m,ZDe,_),b(m,fr,_),M(U9,fr,null),e(fr,fSr),e(fr,Pc),e(Pc,gSr),e(Pc,WY),e(WY,hSr),e(Pc,uSr),e(Pc,QY),e(QY,pSr),e(Pc,_Sr),e(fr,bSr),e(fr,J9),e(J9,vSr),e(J9,nCe),e(nCe,FSr),e(J9,TSr),e(fr,MSr),e(fr,Ot),M(Y9,Ot,null),e(Ot,ESr),e(Ot,sCe),e(sCe,CSr),e(Ot,wSr),e(Ot,Bc),e(Bc,ASr),e(Bc,lCe),e(lCe,LSr),e(Bc,ySr),e(Bc,HY),e(HY,xSr),e(Bc,$Sr),e(Ot,kSr),M(v0,Ot,null),e(fr,SSr),e(fr,Dr),M(K9,Dr,null),e(Dr,RSr),e(Dr,iCe),e(iCe,PSr),e(Dr,BSr),e(Dr,un),e(un,ISr),e(un,dCe),e(dCe,NSr),e(un,qSr),e(un,cCe),e(cCe,jSr),e(un,DSr),e(un,mCe),e(mCe,GSr),e(un,OSr),e(Dr,VSr),e(Dr,xe),e(xe,F0),e(F0,fCe),e(fCe,XSr),e(F0,zSr),e(F0,UY),e(UY,WSr),e(F0,QSr),e(xe,HSr),e(xe,T0),e(T0,gCe),e(gCe,USr),e(T0,JSr),e(T0,JY),e(JY,YSr),e(T0,KSr),e(xe,ZSr),e(xe,M0),e(M0,hCe),e(hCe,eRr),e(M0,oRr),e(M0,YY),e(YY,rRr),e(M0,tRr),e(xe,aRr),e(xe,E0),e(E0,uCe),e(uCe,nRr),e(E0,sRr),e(E0,KY),e(KY,lRr),e(E0,iRr),e(xe,dRr),e(xe,C0),e(C0,pCe),e(pCe,cRr),e(C0,mRr),e(C0,ZY),e(ZY,fRr),e(C0,gRr),e(xe,hRr),e(xe,w0),e(w0,_Ce),e(_Ce,uRr),e(w0,pRr),e(w0,eK),e(eK,_Rr),e(w0,bRr),e(xe,vRr),e(xe,A0),e(A0,bCe),e(bCe,FRr),e(A0,TRr),e(A0,oK),e(oK,MRr),e(A0,ERr),e(xe,CRr),e(xe,L0),e(L0,vCe),e(vCe,wRr),e(L0,ARr),e(L0,rK),e(rK,LRr),e(L0,yRr),e(xe,xRr),e(xe,y0),e(y0,FCe),e(FCe,$Rr),e(y0,kRr),e(y0,tK),e(tK,SRr),e(y0,RRr),e(xe,PRr),e(xe,x0),e(x0,TCe),e(TCe,BRr),e(x0,IRr),e(x0,aK),e(aK,NRr),e(x0,qRr),e(Dr,jRr),M($0,Dr,null),b(m,eGe,_),b(m,Ic,_),e(Ic,k0),e(k0,MCe),M(Z9,MCe,null),e(Ic,DRr),e(Ic,ECe),e(ECe,GRr),b(m,oGe,_),b(m,gr,_),M(ex,gr,null),e(gr,ORr),e(gr,Nc),e(Nc,VRr),e(Nc,nK),e(nK,XRr),e(Nc,zRr),e(Nc,sK),e(sK,WRr),e(Nc,QRr),e(gr,HRr),e(gr,ox),e(ox,URr),e(ox,CCe),e(CCe,JRr),e(ox,YRr),e(gr,KRr),e(gr,Vt),M(rx,Vt,null),e(Vt,ZRr),e(Vt,wCe),e(wCe,ePr),e(Vt,oPr),e(Vt,qc),e(qc,rPr),e(qc,ACe),e(ACe,tPr),e(qc,aPr),e(qc,lK),e(lK,nPr),e(qc,sPr),e(Vt,lPr),M(S0,Vt,null),e(gr,iPr),e(gr,Gr),M(tx,Gr,null),e(Gr,dPr),e(Gr,LCe),e(LCe,cPr),e(Gr,mPr),e(Gr,pn),e(pn,fPr),e(pn,yCe),e(yCe,gPr),e(pn,hPr),e(pn,xCe),e(xCe,uPr),e(pn,pPr),e(pn,$Ce),e($Ce,_Pr),e(pn,bPr),e(Gr,vPr),e(Gr,Ee),e(Ee,R0),e(R0,kCe),e(kCe,FPr),e(R0,TPr),e(R0,iK),e(iK,MPr),e(R0,EPr),e(Ee,CPr),e(Ee,P0),e(P0,SCe),e(SCe,wPr),e(P0,APr),e(P0,dK),e(dK,LPr),e(P0,yPr),e(Ee,xPr),e(Ee,B0),e(B0,RCe),e(RCe,$Pr),e(B0,kPr),e(B0,cK),e(cK,SPr),e(B0,RPr),e(Ee,PPr),e(Ee,I0),e(I0,PCe),e(PCe,BPr),e(I0,IPr),e(I0,mK),e(mK,NPr),e(I0,qPr),e(Ee,jPr),e(Ee,N0),e(N0,BCe),e(BCe,DPr),e(N0,GPr),e(N0,fK),e(fK,OPr),e(N0,VPr),e(Ee,XPr),e(Ee,q0),e(q0,ICe),e(ICe,zPr),e(q0,WPr),e(q0,gK),e(gK,QPr),e(q0,HPr),e(Ee,UPr),e(Ee,j0),e(j0,NCe),e(NCe,JPr),e(j0,YPr),e(j0,hK),e(hK,KPr),e(j0,ZPr),e(Ee,eBr),e(Ee,D0),e(D0,qCe),e(qCe,oBr),e(D0,rBr),e(D0,uK),e(uK,tBr),e(D0,aBr),e(Ee,nBr),e(Ee,G0),e(G0,jCe),e(jCe,sBr),e(G0,lBr),e(G0,pK),e(pK,iBr),e(G0,dBr),e(Ee,cBr),e(Ee,O0),e(O0,DCe),e(DCe,mBr),e(O0,fBr),e(O0,_K),e(_K,gBr),e(O0,hBr),e(Ee,uBr),e(Ee,V0),e(V0,GCe),e(GCe,pBr),e(V0,_Br),e(V0,bK),e(bK,bBr),e(V0,vBr),e(Ee,FBr),e(Ee,X0),e(X0,OCe),e(OCe,TBr),e(X0,MBr),e(X0,vK),e(vK,EBr),e(X0,CBr),e(Gr,wBr),M(z0,Gr,null),b(m,rGe,_),b(m,jc,_),e(jc,W0),e(W0,VCe),M(ax,VCe,null),e(jc,ABr),e(jc,XCe),e(XCe,LBr),b(m,tGe,_),b(m,hr,_),M(nx,hr,null),e(hr,yBr),e(hr,Dc),e(Dc,xBr),e(Dc,FK),e(FK,$Br),e(Dc,kBr),e(Dc,TK),e(TK,SBr),e(Dc,RBr),e(hr,PBr),e(hr,sx),e(sx,BBr),e(sx,zCe),e(zCe,IBr),e(sx,NBr),e(hr,qBr),e(hr,Xt),M(lx,Xt,null),e(Xt,jBr),e(Xt,WCe),e(WCe,DBr),e(Xt,GBr),e(Xt,Gc),e(Gc,OBr),e(Gc,QCe),e(QCe,VBr),e(Gc,XBr),e(Gc,MK),e(MK,zBr),e(Gc,WBr),e(Xt,QBr),M(Q0,Xt,null),e(hr,HBr),e(hr,Or),M(ix,Or,null),e(Or,UBr),e(Or,HCe),e(HCe,JBr),e(Or,YBr),e(Or,_n),e(_n,KBr),e(_n,UCe),e(UCe,ZBr),e(_n,eIr),e(_n,JCe),e(JCe,oIr),e(_n,rIr),e(_n,YCe),e(YCe,tIr),e(_n,aIr),e(Or,nIr),e(Or,$e),e($e,H0),e(H0,KCe),e(KCe,sIr),e(H0,lIr),e(H0,EK),e(EK,iIr),e(H0,dIr),e($e,cIr),e($e,U0),e(U0,ZCe),e(ZCe,mIr),e(U0,fIr),e(U0,CK),e(CK,gIr),e(U0,hIr),e($e,uIr),e($e,J0),e(J0,e5e),e(e5e,pIr),e(J0,_Ir),e(J0,wK),e(wK,bIr),e(J0,vIr),e($e,FIr),e($e,Y0),e(Y0,o5e),e(o5e,TIr),e(Y0,MIr),e(Y0,AK),e(AK,EIr),e(Y0,CIr),e($e,wIr),e($e,K0),e(K0,r5e),e(r5e,AIr),e(K0,LIr),e(K0,LK),e(LK,yIr),e(K0,xIr),e($e,$Ir),e($e,Z0),e(Z0,t5e),e(t5e,kIr),e(Z0,SIr),e(Z0,yK),e(yK,RIr),e(Z0,PIr),e($e,BIr),e($e,ew),e(ew,a5e),e(a5e,IIr),e(ew,NIr),e(ew,xK),e(xK,qIr),e(ew,jIr),e($e,DIr),e($e,ow),e(ow,n5e),e(n5e,GIr),e(ow,OIr),e(ow,$K),e($K,VIr),e(ow,XIr),e($e,zIr),e($e,rw),e(rw,s5e),e(s5e,WIr),e(rw,QIr),e(rw,kK),e(kK,HIr),e(rw,UIr),e($e,JIr),e($e,tw),e(tw,l5e),e(l5e,YIr),e(tw,KIr),e(tw,SK),e(SK,ZIr),e(tw,eNr),e(Or,oNr),M(aw,Or,null),b(m,aGe,_),b(m,Oc,_),e(Oc,nw),e(nw,i5e),M(dx,i5e,null),e(Oc,rNr),e(Oc,d5e),e(d5e,tNr),b(m,nGe,_),b(m,ur,_),M(cx,ur,null),e(ur,aNr),e(ur,Vc),e(Vc,nNr),e(Vc,RK),e(RK,sNr),e(Vc,lNr),e(Vc,PK),e(PK,iNr),e(Vc,dNr),e(ur,cNr),e(ur,mx),e(mx,mNr),e(mx,c5e),e(c5e,fNr),e(mx,gNr),e(ur,hNr),e(ur,zt),M(fx,zt,null),e(zt,uNr),e(zt,m5e),e(m5e,pNr),e(zt,_Nr),e(zt,Xc),e(Xc,bNr),e(Xc,f5e),e(f5e,vNr),e(Xc,FNr),e(Xc,BK),e(BK,TNr),e(Xc,MNr),e(zt,ENr),M(sw,zt,null),e(ur,CNr),e(ur,Vr),M(gx,Vr,null),e(Vr,wNr),e(Vr,g5e),e(g5e,ANr),e(Vr,LNr),e(Vr,bn),e(bn,yNr),e(bn,h5e),e(h5e,xNr),e(bn,$Nr),e(bn,u5e),e(u5e,kNr),e(bn,SNr),e(bn,p5e),e(p5e,RNr),e(bn,PNr),e(Vr,BNr),e(Vr,Pe),e(Pe,lw),e(lw,_5e),e(_5e,INr),e(lw,NNr),e(lw,IK),e(IK,qNr),e(lw,jNr),e(Pe,DNr),e(Pe,iw),e(iw,b5e),e(b5e,GNr),e(iw,ONr),e(iw,NK),e(NK,VNr),e(iw,XNr),e(Pe,zNr),e(Pe,dw),e(dw,v5e),e(v5e,WNr),e(dw,QNr),e(dw,qK),e(qK,HNr),e(dw,UNr),e(Pe,JNr),e(Pe,cw),e(cw,F5e),e(F5e,YNr),e(cw,KNr),e(cw,jK),e(jK,ZNr),e(cw,eqr),e(Pe,oqr),e(Pe,mw),e(mw,T5e),e(T5e,rqr),e(mw,tqr),e(mw,DK),e(DK,aqr),e(mw,nqr),e(Pe,sqr),e(Pe,fw),e(fw,M5e),e(M5e,lqr),e(fw,iqr),e(fw,GK),e(GK,dqr),e(fw,cqr),e(Pe,mqr),e(Pe,gw),e(gw,E5e),e(E5e,fqr),e(gw,gqr),e(gw,OK),e(OK,hqr),e(gw,uqr),e(Pe,pqr),e(Pe,hw),e(hw,C5e),e(C5e,_qr),e(hw,bqr),e(hw,VK),e(VK,vqr),e(hw,Fqr),e(Pe,Tqr),e(Pe,uw),e(uw,w5e),e(w5e,Mqr),e(uw,Eqr),e(uw,XK),e(XK,Cqr),e(uw,wqr),e(Vr,Aqr),M(pw,Vr,null),b(m,sGe,_),b(m,zc,_),e(zc,_w),e(_w,A5e),M(hx,A5e,null),e(zc,Lqr),e(zc,L5e),e(L5e,yqr),b(m,lGe,_),b(m,pr,_),M(ux,pr,null),e(pr,xqr),e(pr,Wc),e(Wc,$qr),e(Wc,zK),e(zK,kqr),e(Wc,Sqr),e(Wc,WK),e(WK,Rqr),e(Wc,Pqr),e(pr,Bqr),e(pr,px),e(px,Iqr),e(px,y5e),e(y5e,Nqr),e(px,qqr),e(pr,jqr),e(pr,Wt),M(_x,Wt,null),e(Wt,Dqr),e(Wt,x5e),e(x5e,Gqr),e(Wt,Oqr),e(Wt,Qc),e(Qc,Vqr),e(Qc,$5e),e($5e,Xqr),e(Qc,zqr),e(Qc,QK),e(QK,Wqr),e(Qc,Qqr),e(Wt,Hqr),M(bw,Wt,null),e(pr,Uqr),e(pr,Xr),M(bx,Xr,null),e(Xr,Jqr),e(Xr,k5e),e(k5e,Yqr),e(Xr,Kqr),e(Xr,vn),e(vn,Zqr),e(vn,S5e),e(S5e,ejr),e(vn,ojr),e(vn,R5e),e(R5e,rjr),e(vn,tjr),e(vn,P5e),e(P5e,ajr),e(vn,njr),e(Xr,sjr),e(Xr,ke),e(ke,vw),e(vw,B5e),e(B5e,ljr),e(vw,ijr),e(vw,HK),e(HK,djr),e(vw,cjr),e(ke,mjr),e(ke,Fw),e(Fw,I5e),e(I5e,fjr),e(Fw,gjr),e(Fw,UK),e(UK,hjr),e(Fw,ujr),e(ke,pjr),e(ke,Tw),e(Tw,N5e),e(N5e,_jr),e(Tw,bjr),e(Tw,JK),e(JK,vjr),e(Tw,Fjr),e(ke,Tjr),e(ke,Mw),e(Mw,q5e),e(q5e,Mjr),e(Mw,Ejr),e(Mw,YK),e(YK,Cjr),e(Mw,wjr),e(ke,Ajr),e(ke,Ew),e(Ew,j5e),e(j5e,Ljr),e(Ew,yjr),e(Ew,KK),e(KK,xjr),e(Ew,$jr),e(ke,kjr),e(ke,Cw),e(Cw,D5e),e(D5e,Sjr),e(Cw,Rjr),e(Cw,ZK),e(ZK,Pjr),e(Cw,Bjr),e(ke,Ijr),e(ke,ww),e(ww,G5e),e(G5e,Njr),e(ww,qjr),e(ww,eZ),e(eZ,jjr),e(ww,Djr),e(ke,Gjr),e(ke,Aw),e(Aw,O5e),e(O5e,Ojr),e(Aw,Vjr),e(Aw,oZ),e(oZ,Xjr),e(Aw,zjr),e(ke,Wjr),e(ke,Lw),e(Lw,V5e),e(V5e,Qjr),e(Lw,Hjr),e(Lw,rZ),e(rZ,Ujr),e(Lw,Jjr),e(ke,Yjr),e(ke,yw),e(yw,X5e),e(X5e,Kjr),e(yw,Zjr),e(yw,tZ),e(tZ,eDr),e(yw,oDr),e(Xr,rDr),M(xw,Xr,null),b(m,iGe,_),b(m,Hc,_),e(Hc,$w),e($w,z5e),M(vx,z5e,null),e(Hc,tDr),e(Hc,W5e),e(W5e,aDr),b(m,dGe,_),b(m,_r,_),M(Fx,_r,null),e(_r,nDr),e(_r,Uc),e(Uc,sDr),e(Uc,aZ),e(aZ,lDr),e(Uc,iDr),e(Uc,nZ),e(nZ,dDr),e(Uc,cDr),e(_r,mDr),e(_r,Tx),e(Tx,fDr),e(Tx,Q5e),e(Q5e,gDr),e(Tx,hDr),e(_r,uDr),e(_r,Qt),M(Mx,Qt,null),e(Qt,pDr),e(Qt,H5e),e(H5e,_Dr),e(Qt,bDr),e(Qt,Jc),e(Jc,vDr),e(Jc,U5e),e(U5e,FDr),e(Jc,TDr),e(Jc,sZ),e(sZ,MDr),e(Jc,EDr),e(Qt,CDr),M(kw,Qt,null),e(_r,wDr),e(_r,zr),M(Ex,zr,null),e(zr,ADr),e(zr,J5e),e(J5e,LDr),e(zr,yDr),e(zr,Fn),e(Fn,xDr),e(Fn,Y5e),e(Y5e,$Dr),e(Fn,kDr),e(Fn,K5e),e(K5e,SDr),e(Fn,RDr),e(Fn,Z5e),e(Z5e,PDr),e(Fn,BDr),e(zr,IDr),e(zr,Se),e(Se,Sw),e(Sw,e3e),e(e3e,NDr),e(Sw,qDr),e(Sw,lZ),e(lZ,jDr),e(Sw,DDr),e(Se,GDr),e(Se,Rw),e(Rw,o3e),e(o3e,ODr),e(Rw,VDr),e(Rw,iZ),e(iZ,XDr),e(Rw,zDr),e(Se,WDr),e(Se,Pw),e(Pw,r3e),e(r3e,QDr),e(Pw,HDr),e(Pw,dZ),e(dZ,UDr),e(Pw,JDr),e(Se,YDr),e(Se,Bw),e(Bw,t3e),e(t3e,KDr),e(Bw,ZDr),e(Bw,cZ),e(cZ,eGr),e(Bw,oGr),e(Se,rGr),e(Se,Iw),e(Iw,a3e),e(a3e,tGr),e(Iw,aGr),e(Iw,mZ),e(mZ,nGr),e(Iw,sGr),e(Se,lGr),e(Se,Nw),e(Nw,n3e),e(n3e,iGr),e(Nw,dGr),e(Nw,fZ),e(fZ,cGr),e(Nw,mGr),e(Se,fGr),e(Se,qw),e(qw,s3e),e(s3e,gGr),e(qw,hGr),e(qw,gZ),e(gZ,uGr),e(qw,pGr),e(Se,_Gr),e(Se,jw),e(jw,l3e),e(l3e,bGr),e(jw,vGr),e(jw,hZ),e(hZ,FGr),e(jw,TGr),e(Se,MGr),e(Se,Dw),e(Dw,i3e),e(i3e,EGr),e(Dw,CGr),e(Dw,uZ),e(uZ,wGr),e(Dw,AGr),e(Se,LGr),e(Se,Gw),e(Gw,d3e),e(d3e,yGr),e(Gw,xGr),e(Gw,pZ),e(pZ,$Gr),e(Gw,kGr),e(zr,SGr),M(Ow,zr,null),b(m,cGe,_),b(m,Yc,_),e(Yc,Vw),e(Vw,c3e),M(Cx,c3e,null),e(Yc,RGr),e(Yc,m3e),e(m3e,PGr),b(m,mGe,_),b(m,br,_),M(wx,br,null),e(br,BGr),e(br,Kc),e(Kc,IGr),e(Kc,_Z),e(_Z,NGr),e(Kc,qGr),e(Kc,bZ),e(bZ,jGr),e(Kc,DGr),e(br,GGr),e(br,Ax),e(Ax,OGr),e(Ax,f3e),e(f3e,VGr),e(Ax,XGr),e(br,zGr),e(br,Ht),M(Lx,Ht,null),e(Ht,WGr),e(Ht,g3e),e(g3e,QGr),e(Ht,HGr),e(Ht,Zc),e(Zc,UGr),e(Zc,h3e),e(h3e,JGr),e(Zc,YGr),e(Zc,vZ),e(vZ,KGr),e(Zc,ZGr),e(Ht,eOr),M(Xw,Ht,null),e(br,oOr),e(br,Wr),M(yx,Wr,null),e(Wr,rOr),e(Wr,u3e),e(u3e,tOr),e(Wr,aOr),e(Wr,Tn),e(Tn,nOr),e(Tn,p3e),e(p3e,sOr),e(Tn,lOr),e(Tn,_3e),e(_3e,iOr),e(Tn,dOr),e(Tn,b3e),e(b3e,cOr),e(Tn,mOr),e(Wr,fOr),e(Wr,Oe),e(Oe,zw),e(zw,v3e),e(v3e,gOr),e(zw,hOr),e(zw,FZ),e(FZ,uOr),e(zw,pOr),e(Oe,_Or),e(Oe,Ww),e(Ww,F3e),e(F3e,bOr),e(Ww,vOr),e(Ww,TZ),e(TZ,FOr),e(Ww,TOr),e(Oe,MOr),e(Oe,Qw),e(Qw,T3e),e(T3e,EOr),e(Qw,COr),e(Qw,MZ),e(MZ,wOr),e(Qw,AOr),e(Oe,LOr),e(Oe,Hw),e(Hw,M3e),e(M3e,yOr),e(Hw,xOr),e(Hw,EZ),e(EZ,$Or),e(Hw,kOr),e(Oe,SOr),e(Oe,Uw),e(Uw,E3e),e(E3e,ROr),e(Uw,POr),e(Uw,CZ),e(CZ,BOr),e(Uw,IOr),e(Oe,NOr),e(Oe,Jw),e(Jw,C3e),e(C3e,qOr),e(Jw,jOr),e(Jw,wZ),e(wZ,DOr),e(Jw,GOr),e(Oe,OOr),e(Oe,Yw),e(Yw,w3e),e(w3e,VOr),e(Yw,XOr),e(Yw,AZ),e(AZ,zOr),e(Yw,WOr),e(Oe,QOr),e(Oe,Kw),e(Kw,A3e),e(A3e,HOr),e(Kw,UOr),e(Kw,LZ),e(LZ,JOr),e(Kw,YOr),e(Wr,KOr),M(Zw,Wr,null),b(m,fGe,_),b(m,em,_),e(em,eA),e(eA,L3e),M(xx,L3e,null),e(em,ZOr),e(em,y3e),e(y3e,eVr),b(m,gGe,_),b(m,vr,_),M($x,vr,null),e(vr,oVr),e(vr,om),e(om,rVr),e(om,yZ),e(yZ,tVr),e(om,aVr),e(om,xZ),e(xZ,nVr),e(om,sVr),e(vr,lVr),e(vr,kx),e(kx,iVr),e(kx,x3e),e(x3e,dVr),e(kx,cVr),e(vr,mVr),e(vr,Ut),M(Sx,Ut,null),e(Ut,fVr),e(Ut,$3e),e($3e,gVr),e(Ut,hVr),e(Ut,rm),e(rm,uVr),e(rm,k3e),e(k3e,pVr),e(rm,_Vr),e(rm,$Z),e($Z,bVr),e(rm,vVr),e(Ut,FVr),M(oA,Ut,null),e(vr,TVr),e(vr,Qr),M(Rx,Qr,null),e(Qr,MVr),e(Qr,S3e),e(S3e,EVr),e(Qr,CVr),e(Qr,Mn),e(Mn,wVr),e(Mn,R3e),e(R3e,AVr),e(Mn,LVr),e(Mn,P3e),e(P3e,yVr),e(Mn,xVr),e(Mn,B3e),e(B3e,$Vr),e(Mn,kVr),e(Qr,SVr),e(Qr,Ve),e(Ve,rA),e(rA,I3e),e(I3e,RVr),e(rA,PVr),e(rA,kZ),e(kZ,BVr),e(rA,IVr),e(Ve,NVr),e(Ve,tA),e(tA,N3e),e(N3e,qVr),e(tA,jVr),e(tA,SZ),e(SZ,DVr),e(tA,GVr),e(Ve,OVr),e(Ve,aA),e(aA,q3e),e(q3e,VVr),e(aA,XVr),e(aA,RZ),e(RZ,zVr),e(aA,WVr),e(Ve,QVr),e(Ve,nA),e(nA,j3e),e(j3e,HVr),e(nA,UVr),e(nA,PZ),e(PZ,JVr),e(nA,YVr),e(Ve,KVr),e(Ve,sA),e(sA,D3e),e(D3e,ZVr),e(sA,eXr),e(sA,BZ),e(BZ,oXr),e(sA,rXr),e(Ve,tXr),e(Ve,lA),e(lA,G3e),e(G3e,aXr),e(lA,nXr),e(lA,IZ),e(IZ,sXr),e(lA,lXr),e(Ve,iXr),e(Ve,iA),e(iA,O3e),e(O3e,dXr),e(iA,cXr),e(iA,NZ),e(NZ,mXr),e(iA,fXr),e(Ve,gXr),e(Ve,dA),e(dA,V3e),e(V3e,hXr),e(dA,uXr),e(dA,qZ),e(qZ,pXr),e(dA,_Xr),e(Qr,bXr),M(cA,Qr,null),b(m,hGe,_),b(m,tm,_),e(tm,mA),e(mA,X3e),M(Px,X3e,null),e(tm,vXr),e(tm,z3e),e(z3e,FXr),b(m,uGe,_),b(m,Fr,_),M(Bx,Fr,null),e(Fr,TXr),e(Fr,am),e(am,MXr),e(am,jZ),e(jZ,EXr),e(am,CXr),e(am,DZ),e(DZ,wXr),e(am,AXr),e(Fr,LXr),e(Fr,Ix),e(Ix,yXr),e(Ix,W3e),e(W3e,xXr),e(Ix,$Xr),e(Fr,kXr),e(Fr,Jt),M(Nx,Jt,null),e(Jt,SXr),e(Jt,Q3e),e(Q3e,RXr),e(Jt,PXr),e(Jt,nm),e(nm,BXr),e(nm,H3e),e(H3e,IXr),e(nm,NXr),e(nm,GZ),e(GZ,qXr),e(nm,jXr),e(Jt,DXr),M(fA,Jt,null),e(Fr,GXr),e(Fr,Hr),M(qx,Hr,null),e(Hr,OXr),e(Hr,U3e),e(U3e,VXr),e(Hr,XXr),e(Hr,En),e(En,zXr),e(En,J3e),e(J3e,WXr),e(En,QXr),e(En,Y3e),e(Y3e,HXr),e(En,UXr),e(En,K3e),e(K3e,JXr),e(En,YXr),e(Hr,KXr),e(Hr,Z3e),e(Z3e,gA),e(gA,e0e),e(e0e,ZXr),e(gA,ezr),e(gA,OZ),e(OZ,ozr),e(gA,rzr),e(Hr,tzr),M(hA,Hr,null),b(m,pGe,_),b(m,sm,_),e(sm,uA),e(uA,o0e),M(jx,o0e,null),e(sm,azr),e(sm,r0e),e(r0e,nzr),b(m,_Ge,_),b(m,Tr,_),M(Dx,Tr,null),e(Tr,szr),e(Tr,lm),e(lm,lzr),e(lm,VZ),e(VZ,izr),e(lm,dzr),e(lm,XZ),e(XZ,czr),e(lm,mzr),e(Tr,fzr),e(Tr,Gx),e(Gx,gzr),e(Gx,t0e),e(t0e,hzr),e(Gx,uzr),e(Tr,pzr),e(Tr,Yt),M(Ox,Yt,null),e(Yt,_zr),e(Yt,a0e),e(a0e,bzr),e(Yt,vzr),e(Yt,im),e(im,Fzr),e(im,n0e),e(n0e,Tzr),e(im,Mzr),e(im,zZ),e(zZ,Ezr),e(im,Czr),e(Yt,wzr),M(pA,Yt,null),e(Tr,Azr),e(Tr,Ur),M(Vx,Ur,null),e(Ur,Lzr),e(Ur,s0e),e(s0e,yzr),e(Ur,xzr),e(Ur,Cn),e(Cn,$zr),e(Cn,l0e),e(l0e,kzr),e(Cn,Szr),e(Cn,i0e),e(i0e,Rzr),e(Cn,Pzr),e(Cn,d0e),e(d0e,Bzr),e(Cn,Izr),e(Ur,Nzr),e(Ur,Xx),e(Xx,_A),e(_A,c0e),e(c0e,qzr),e(_A,jzr),e(_A,WZ),e(WZ,Dzr),e(_A,Gzr),e(Xx,Ozr),e(Xx,bA),e(bA,m0e),e(m0e,Vzr),e(bA,Xzr),e(bA,QZ),e(QZ,zzr),e(bA,Wzr),e(Ur,Qzr),M(vA,Ur,null),b(m,bGe,_),b(m,dm,_),e(dm,FA),e(FA,f0e),M(zx,f0e,null),e(dm,Hzr),e(dm,g0e),e(g0e,Uzr),b(m,vGe,_),b(m,Mr,_),M(Wx,Mr,null),e(Mr,Jzr),e(Mr,cm),e(cm,Yzr),e(cm,HZ),e(HZ,Kzr),e(cm,Zzr),e(cm,UZ),e(UZ,eWr),e(cm,oWr),e(Mr,rWr),e(Mr,Qx),e(Qx,tWr),e(Qx,h0e),e(h0e,aWr),e(Qx,nWr),e(Mr,sWr),e(Mr,Kt),M(Hx,Kt,null),e(Kt,lWr),e(Kt,u0e),e(u0e,iWr),e(Kt,dWr),e(Kt,mm),e(mm,cWr),e(mm,p0e),e(p0e,mWr),e(mm,fWr),e(mm,JZ),e(JZ,gWr),e(mm,hWr),e(Kt,uWr),M(TA,Kt,null),e(Mr,pWr),e(Mr,Jr),M(Ux,Jr,null),e(Jr,_Wr),e(Jr,_0e),e(_0e,bWr),e(Jr,vWr),e(Jr,wn),e(wn,FWr),e(wn,b0e),e(b0e,TWr),e(wn,MWr),e(wn,v0e),e(v0e,EWr),e(wn,CWr),e(wn,F0e),e(F0e,wWr),e(wn,AWr),e(Jr,LWr),e(Jr,T0e),e(T0e,MA),e(MA,M0e),e(M0e,yWr),e(MA,xWr),e(MA,YZ),e(YZ,$Wr),e(MA,kWr),e(Jr,SWr),M(EA,Jr,null),FGe=!0},p(m,[_]){const Jx={};_&2&&(Jx.$$scope={dirty:_,ctx:m}),Fm.$set(Jx);const E0e={};_&2&&(E0e.$$scope={dirty:_,ctx:m}),Lg.$set(E0e);const C0e={};_&2&&(C0e.$$scope={dirty:_,ctx:m}),dh.$set(C0e);const w0e={};_&2&&(w0e.$$scope={dirty:_,ctx:m}),Vh.$set(w0e);const Yx={};_&2&&(Yx.$$scope={dirty:_,ctx:m}),Xh.$set(Yx);const A0e={};_&2&&(A0e.$$scope={dirty:_,ctx:m}),cu.$set(A0e);const An={};_&2&&(An.$$scope={dirty:_,ctx:m}),mu.$set(An);const L0e={};_&2&&(L0e.$$scope={dirty:_,ctx:m}),hu.$set(L0e);const y0e={};_&2&&(y0e.$$scope={dirty:_,ctx:m}),f_.$set(y0e);const x0e={};_&2&&(x0e.$$scope={dirty:_,ctx:m}),h_.$set(x0e);const Kx={};_&2&&(Kx.$$scope={dirty:_,ctx:m}),nb.$set(Kx);const $0e={};_&2&&($0e.$$scope={dirty:_,ctx:m}),lb.$set($0e);const Zx={};_&2&&(Zx.$$scope={dirty:_,ctx:m}),Qb.$set(Zx);const k0e={};_&2&&(k0e.$$scope={dirty:_,ctx:m}),Ub.$set(k0e);const e$={};_&2&&(e$.$$scope={dirty:_,ctx:m}),R2.$set(e$);const S0e={};_&2&&(S0e.$$scope={dirty:_,ctx:m}),B2.$set(S0e);const R0e={};_&2&&(R0e.$$scope={dirty:_,ctx:m}),Z2.$set(R0e);const P0e={};_&2&&(P0e.$$scope={dirty:_,ctx:m}),ov.$set(P0e);const fm={};_&2&&(fm.$$scope={dirty:_,ctx:m}),Jv.$set(fm);const B0e={};_&2&&(B0e.$$scope={dirty:_,ctx:m}),Kv.$set(B0e);const I0e={};_&2&&(I0e.$$scope={dirty:_,ctx:m}),xF.$set(I0e);const N0e={};_&2&&(N0e.$$scope={dirty:_,ctx:m}),kF.$set(N0e);const o$={};_&2&&(o$.$$scope={dirty:_,ctx:m}),qF.$set(o$);const q0e={};_&2&&(q0e.$$scope={dirty:_,ctx:m}),DF.$set(q0e);const j0e={};_&2&&(j0e.$$scope={dirty:_,ctx:m}),M1.$set(j0e);const D0e={};_&2&&(D0e.$$scope={dirty:_,ctx:m}),C1.$set(D0e);const et={};_&2&&(et.$$scope={dirty:_,ctx:m}),fT.$set(et);const r$={};_&2&&(r$.$$scope={dirty:_,ctx:m}),hT.$set(r$);const G0e={};_&2&&(G0e.$$scope={dirty:_,ctx:m}),_T.$set(G0e);const t$={};_&2&&(t$.$$scope={dirty:_,ctx:m}),vT.$set(t$);const O0e={};_&2&&(O0e.$$scope={dirty:_,ctx:m}),RT.$set(O0e);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:m}),BT.$set(ot);const V0e={};_&2&&(V0e.$$scope={dirty:_,ctx:m}),qT.$set(V0e);const gm={};_&2&&(gm.$$scope={dirty:_,ctx:m}),DT.$set(gm);const X0e={};_&2&&(X0e.$$scope={dirty:_,ctx:m}),YT.$set(X0e);const z0e={};_&2&&(z0e.$$scope={dirty:_,ctx:m}),ZT.$set(z0e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),sM.$set(L);const CA={};_&2&&(CA.$$scope={dirty:_,ctx:m}),iM.$set(CA);const W0e={};_&2&&(W0e.$$scope={dirty:_,ctx:m}),FM.$set(W0e);const Q0e={};_&2&&(Q0e.$$scope={dirty:_,ctx:m}),MM.$set(Q0e);const wA={};_&2&&(wA.$$scope={dirty:_,ctx:m}),AM.$set(wA);const H0e={};_&2&&(H0e.$$scope={dirty:_,ctx:m}),yM.$set(H0e);const U0e={};_&2&&(U0e.$$scope={dirty:_,ctx:m}),BM.$set(U0e);const AA={};_&2&&(AA.$$scope={dirty:_,ctx:m}),NM.$set(AA);const J0e={};_&2&&(J0e.$$scope={dirty:_,ctx:m}),OM.$set(J0e);const Y0e={};_&2&&(Y0e.$$scope={dirty:_,ctx:m}),XM.$set(Y0e);const LA={};_&2&&(LA.$$scope={dirty:_,ctx:m}),HM.$set(LA);const K0e={};_&2&&(K0e.$$scope={dirty:_,ctx:m}),JM.$set(K0e);const Z0e={};_&2&&(Z0e.$$scope={dirty:_,ctx:m}),ZM.$set(Z0e);const yA={};_&2&&(yA.$$scope={dirty:_,ctx:m}),o4.$set(yA);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:m}),l4.$set(ewe);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:m}),d4.$set(owe);const xA={};_&2&&(xA.$$scope={dirty:_,ctx:m}),f4.$set(xA);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:m}),h4.$set(rwe);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:m}),lE.$set(twe);const $A={};_&2&&($A.$$scope={dirty:_,ctx:m}),dE.$set($A);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:m}),RE.$set(awe);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:m}),BE.$set(nwe);const kA={};_&2&&(kA.$$scope={dirty:_,ctx:m}),UE.$set(kA);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:m}),YE.$set(swe);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:m}),rC.$set(lwe);const SA={};_&2&&(SA.$$scope={dirty:_,ctx:m}),aC.$set(SA);const iwe={};_&2&&(iwe.$$scope={dirty:_,ctx:m}),wC.$set(iwe);const dwe={};_&2&&(dwe.$$scope={dirty:_,ctx:m}),LC.$set(dwe);const RA={};_&2&&(RA.$$scope={dirty:_,ctx:m}),qC.$set(RA);const cwe={};_&2&&(cwe.$$scope={dirty:_,ctx:m}),DC.$set(cwe);const mwe={};_&2&&(mwe.$$scope={dirty:_,ctx:m}),g5.$set(mwe);const PA={};_&2&&(PA.$$scope={dirty:_,ctx:m}),u5.$set(PA);const fwe={};_&2&&(fwe.$$scope={dirty:_,ctx:m}),R5.$set(fwe);const gwe={};_&2&&(gwe.$$scope={dirty:_,ctx:m}),B5.$set(gwe);const BA={};_&2&&(BA.$$scope={dirty:_,ctx:m}),q5.$set(BA);const hwe={};_&2&&(hwe.$$scope={dirty:_,ctx:m}),D5.$set(hwe);const uwe={};_&2&&(uwe.$$scope={dirty:_,ctx:m}),O5.$set(uwe);const IA={};_&2&&(IA.$$scope={dirty:_,ctx:m}),X5.$set(IA);const pwe={};_&2&&(pwe.$$scope={dirty:_,ctx:m}),m3.$set(pwe);const _we={};_&2&&(_we.$$scope={dirty:_,ctx:m}),g3.$set(_we);const NA={};_&2&&(NA.$$scope={dirty:_,ctx:m}),P3.$set(NA);const bwe={};_&2&&(bwe.$$scope={dirty:_,ctx:m}),I3.$set(bwe);const vwe={};_&2&&(vwe.$$scope={dirty:_,ctx:m}),q3.$set(vwe);const qA={};_&2&&(qA.$$scope={dirty:_,ctx:m}),D3.$set(qA);const Fwe={};_&2&&(Fwe.$$scope={dirty:_,ctx:m}),O3.$set(Fwe);const Twe={};_&2&&(Twe.$$scope={dirty:_,ctx:m}),X3.$set(Twe);const jA={};_&2&&(jA.$$scope={dirty:_,ctx:m}),_0.$set(jA);const Mwe={};_&2&&(Mwe.$$scope={dirty:_,ctx:m}),v0.$set(Mwe);const Ewe={};_&2&&(Ewe.$$scope={dirty:_,ctx:m}),$0.$set(Ewe);const DA={};_&2&&(DA.$$scope={dirty:_,ctx:m}),S0.$set(DA);const Cwe={};_&2&&(Cwe.$$scope={dirty:_,ctx:m}),z0.$set(Cwe);const wwe={};_&2&&(wwe.$$scope={dirty:_,ctx:m}),Q0.$set(wwe);const GA={};_&2&&(GA.$$scope={dirty:_,ctx:m}),aw.$set(GA);const Awe={};_&2&&(Awe.$$scope={dirty:_,ctx:m}),sw.$set(Awe);const Lwe={};_&2&&(Lwe.$$scope={dirty:_,ctx:m}),pw.$set(Lwe);const OA={};_&2&&(OA.$$scope={dirty:_,ctx:m}),bw.$set(OA);const ywe={};_&2&&(ywe.$$scope={dirty:_,ctx:m}),xw.$set(ywe);const xwe={};_&2&&(xwe.$$scope={dirty:_,ctx:m}),kw.$set(xwe);const VA={};_&2&&(VA.$$scope={dirty:_,ctx:m}),Ow.$set(VA);const $we={};_&2&&($we.$$scope={dirty:_,ctx:m}),Xw.$set($we);const kwe={};_&2&&(kwe.$$scope={dirty:_,ctx:m}),Zw.$set(kwe);const XA={};_&2&&(XA.$$scope={dirty:_,ctx:m}),oA.$set(XA);const Swe={};_&2&&(Swe.$$scope={dirty:_,ctx:m}),cA.$set(Swe);const Rwe={};_&2&&(Rwe.$$scope={dirty:_,ctx:m}),fA.$set(Rwe);const zA={};_&2&&(zA.$$scope={dirty:_,ctx:m}),hA.$set(zA);const Pwe={};_&2&&(Pwe.$$scope={dirty:_,ctx:m}),pA.$set(Pwe);const Bwe={};_&2&&(Bwe.$$scope={dirty:_,ctx:m}),vA.$set(Bwe);const WA={};_&2&&(WA.$$scope={dirty:_,ctx:m}),TA.$set(WA);const Iwe={};_&2&&(Iwe.$$scope={dirty:_,ctx:m}),EA.$set(Iwe)},i(m){FGe||(E(d.$$.fragment,m),E(Ca.$$.fragment,m),E(zL.$$.fragment,m),E(WL.$$.fragment,m),E(Fm.$$.fragment,m),E(QL.$$.fragment,m),E(HL.$$.fragment,m),E(YL.$$.fragment,m),E(Lg.$$.fragment,m),E(KL.$$.fragment,m),E(ZL.$$.fragment,m),E(ey.$$.fragment,m),E(ty.$$.fragment,m),E(dh.$$.fragment,m),E(ay.$$.fragment,m),E(ny.$$.fragment,m),E(sy.$$.fragment,m),E(dy.$$.fragment,m),E(Vh.$$.fragment,m),E(Xh.$$.fragment,m),E(cy.$$.fragment,m),E(my.$$.fragment,m),E(fy.$$.fragment,m),E(uy.$$.fragment,m),E(cu.$$.fragment,m),E(mu.$$.fragment,m),E(py.$$.fragment,m),E(_y.$$.fragment,m),E(by.$$.fragment,m),E(Fy.$$.fragment,m),E(hu.$$.fragment,m),E(Ty.$$.fragment,m),E(f_.$$.fragment,m),E(My.$$.fragment,m),E(Ey.$$.fragment,m),E(wy.$$.fragment,m),E(h_.$$.fragment,m),E(Ay.$$.fragment,m),E(nb.$$.fragment,m),E(Ly.$$.fragment,m),E(yy.$$.fragment,m),E($y.$$.fragment,m),E(lb.$$.fragment,m),E(ky.$$.fragment,m),E(Qb.$$.fragment,m),E(Sy.$$.fragment,m),E(Ry.$$.fragment,m),E(By.$$.fragment,m),E(Ub.$$.fragment,m),E(Iy.$$.fragment,m),E(R2.$$.fragment,m),E(Ny.$$.fragment,m),E(qy.$$.fragment,m),E(Dy.$$.fragment,m),E(B2.$$.fragment,m),E(Gy.$$.fragment,m),E(Z2.$$.fragment,m),E(Oy.$$.fragment,m),E(Vy.$$.fragment,m),E(zy.$$.fragment,m),E(ov.$$.fragment,m),E(Wy.$$.fragment,m),E(Jv.$$.fragment,m),E(Qy.$$.fragment,m),E(Hy.$$.fragment,m),E(Jy.$$.fragment,m),E(Kv.$$.fragment,m),E(Yy.$$.fragment,m),E(xF.$$.fragment,m),E(Ky.$$.fragment,m),E(Zy.$$.fragment,m),E(o7.$$.fragment,m),E(kF.$$.fragment,m),E(r7.$$.fragment,m),E(qF.$$.fragment,m),E(t7.$$.fragment,m),E(a7.$$.fragment,m),E(s7.$$.fragment,m),E(DF.$$.fragment,m),E(l7.$$.fragment,m),E(M1.$$.fragment,m),E(i7.$$.fragment,m),E(d7.$$.fragment,m),E(m7.$$.fragment,m),E(C1.$$.fragment,m),E(f7.$$.fragment,m),E(fT.$$.fragment,m),E(g7.$$.fragment,m),E(h7.$$.fragment,m),E(p7.$$.fragment,m),E(hT.$$.fragment,m),E(_7.$$.fragment,m),E(_T.$$.fragment,m),E(b7.$$.fragment,m),E(v7.$$.fragment,m),E(T7.$$.fragment,m),E(vT.$$.fragment,m),E(M7.$$.fragment,m),E(RT.$$.fragment,m),E(E7.$$.fragment,m),E(C7.$$.fragment,m),E(A7.$$.fragment,m),E(BT.$$.fragment,m),E(L7.$$.fragment,m),E(qT.$$.fragment,m),E(y7.$$.fragment,m),E(x7.$$.fragment,m),E(k7.$$.fragment,m),E(DT.$$.fragment,m),E(S7.$$.fragment,m),E(YT.$$.fragment,m),E(R7.$$.fragment,m),E(P7.$$.fragment,m),E(I7.$$.fragment,m),E(ZT.$$.fragment,m),E(N7.$$.fragment,m),E(sM.$$.fragment,m),E(q7.$$.fragment,m),E(j7.$$.fragment,m),E(G7.$$.fragment,m),E(iM.$$.fragment,m),E(O7.$$.fragment,m),E(FM.$$.fragment,m),E(V7.$$.fragment,m),E(X7.$$.fragment,m),E(W7.$$.fragment,m),E(MM.$$.fragment,m),E(Q7.$$.fragment,m),E(AM.$$.fragment,m),E(U7.$$.fragment,m),E(J7.$$.fragment,m),E(K7.$$.fragment,m),E(yM.$$.fragment,m),E(Z7.$$.fragment,m),E(BM.$$.fragment,m),E(e8.$$.fragment,m),E(o8.$$.fragment,m),E(t8.$$.fragment,m),E(NM.$$.fragment,m),E(a8.$$.fragment,m),E(OM.$$.fragment,m),E(n8.$$.fragment,m),E(s8.$$.fragment,m),E(i8.$$.fragment,m),E(XM.$$.fragment,m),E(d8.$$.fragment,m),E(HM.$$.fragment,m),E(m8.$$.fragment,m),E(f8.$$.fragment,m),E(h8.$$.fragment,m),E(JM.$$.fragment,m),E(u8.$$.fragment,m),E(ZM.$$.fragment,m),E(p8.$$.fragment,m),E(_8.$$.fragment,m),E(v8.$$.fragment,m),E(o4.$$.fragment,m),E(F8.$$.fragment,m),E(l4.$$.fragment,m),E(T8.$$.fragment,m),E(M8.$$.fragment,m),E(C8.$$.fragment,m),E(d4.$$.fragment,m),E(w8.$$.fragment,m),E(f4.$$.fragment,m),E(A8.$$.fragment,m),E(L8.$$.fragment,m),E(x8.$$.fragment,m),E(h4.$$.fragment,m),E($8.$$.fragment,m),E(lE.$$.fragment,m),E(k8.$$.fragment,m),E(S8.$$.fragment,m),E(P8.$$.fragment,m),E(dE.$$.fragment,m),E(B8.$$.fragment,m),E(RE.$$.fragment,m),E(I8.$$.fragment,m),E(N8.$$.fragment,m),E(j8.$$.fragment,m),E(BE.$$.fragment,m),E(D8.$$.fragment,m),E(UE.$$.fragment,m),E(G8.$$.fragment,m),E(O8.$$.fragment,m),E(X8.$$.fragment,m),E(YE.$$.fragment,m),E(z8.$$.fragment,m),E(rC.$$.fragment,m),E(W8.$$.fragment,m),E(Q8.$$.fragment,m),E(U8.$$.fragment,m),E(aC.$$.fragment,m),E(J8.$$.fragment,m),E(wC.$$.fragment,m),E(Y8.$$.fragment,m),E(K8.$$.fragment,m),E(e9.$$.fragment,m),E(LC.$$.fragment,m),E(o9.$$.fragment,m),E(qC.$$.fragment,m),E(r9.$$.fragment,m),E(t9.$$.fragment,m),E(n9.$$.fragment,m),E(DC.$$.fragment,m),E(s9.$$.fragment,m),E(g5.$$.fragment,m),E(l9.$$.fragment,m),E(i9.$$.fragment,m),E(c9.$$.fragment,m),E(u5.$$.fragment,m),E(m9.$$.fragment,m),E(R5.$$.fragment,m),E(f9.$$.fragment,m),E(g9.$$.fragment,m),E(u9.$$.fragment,m),E(B5.$$.fragment,m),E(p9.$$.fragment,m),E(q5.$$.fragment,m),E(b9.$$.fragment,m),E(v9.$$.fragment,m),E(T9.$$.fragment,m),E(D5.$$.fragment,m),E(M9.$$.fragment,m),E(O5.$$.fragment,m),E(E9.$$.fragment,m),E(C9.$$.fragment,m),E(A9.$$.fragment,m),E(X5.$$.fragment,m),E(L9.$$.fragment,m),E(m3.$$.fragment,m),E(y9.$$.fragment,m),E(x9.$$.fragment,m),E(k9.$$.fragment,m),E(g3.$$.fragment,m),E(S9.$$.fragment,m),E(P3.$$.fragment,m),E(R9.$$.fragment,m),E(P9.$$.fragment,m),E(I9.$$.fragment,m),E(I3.$$.fragment,m),E(N9.$$.fragment,m),E(q3.$$.fragment,m),E(q9.$$.fragment,m),E(j9.$$.fragment,m),E(G9.$$.fragment,m),E(D3.$$.fragment,m),E(O9.$$.fragment,m),E(O3.$$.fragment,m),E(V9.$$.fragment,m),E(X9.$$.fragment,m),E(W9.$$.fragment,m),E(X3.$$.fragment,m),E(Q9.$$.fragment,m),E(_0.$$.fragment,m),E(H9.$$.fragment,m),E(U9.$$.fragment,m),E(Y9.$$.fragment,m),E(v0.$$.fragment,m),E(K9.$$.fragment,m),E($0.$$.fragment,m),E(Z9.$$.fragment,m),E(ex.$$.fragment,m),E(rx.$$.fragment,m),E(S0.$$.fragment,m),E(tx.$$.fragment,m),E(z0.$$.fragment,m),E(ax.$$.fragment,m),E(nx.$$.fragment,m),E(lx.$$.fragment,m),E(Q0.$$.fragment,m),E(ix.$$.fragment,m),E(aw.$$.fragment,m),E(dx.$$.fragment,m),E(cx.$$.fragment,m),E(fx.$$.fragment,m),E(sw.$$.fragment,m),E(gx.$$.fragment,m),E(pw.$$.fragment,m),E(hx.$$.fragment,m),E(ux.$$.fragment,m),E(_x.$$.fragment,m),E(bw.$$.fragment,m),E(bx.$$.fragment,m),E(xw.$$.fragment,m),E(vx.$$.fragment,m),E(Fx.$$.fragment,m),E(Mx.$$.fragment,m),E(kw.$$.fragment,m),E(Ex.$$.fragment,m),E(Ow.$$.fragment,m),E(Cx.$$.fragment,m),E(wx.$$.fragment,m),E(Lx.$$.fragment,m),E(Xw.$$.fragment,m),E(yx.$$.fragment,m),E(Zw.$$.fragment,m),E(xx.$$.fragment,m),E($x.$$.fragment,m),E(Sx.$$.fragment,m),E(oA.$$.fragment,m),E(Rx.$$.fragment,m),E(cA.$$.fragment,m),E(Px.$$.fragment,m),E(Bx.$$.fragment,m),E(Nx.$$.fragment,m),E(fA.$$.fragment,m),E(qx.$$.fragment,m),E(hA.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(pA.$$.fragment,m),E(Vx.$$.fragment,m),E(vA.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(Hx.$$.fragment,m),E(TA.$$.fragment,m),E(Ux.$$.fragment,m),E(EA.$$.fragment,m),FGe=!0)},o(m){C(d.$$.fragment,m),C(Ca.$$.fragment,m),C(zL.$$.fragment,m),C(WL.$$.fragment,m),C(Fm.$$.fragment,m),C(QL.$$.fragment,m),C(HL.$$.fragment,m),C(YL.$$.fragment,m),C(Lg.$$.fragment,m),C(KL.$$.fragment,m),C(ZL.$$.fragment,m),C(ey.$$.fragment,m),C(ty.$$.fragment,m),C(dh.$$.fragment,m),C(ay.$$.fragment,m),C(ny.$$.fragment,m),C(sy.$$.fragment,m),C(dy.$$.fragment,m),C(Vh.$$.fragment,m),C(Xh.$$.fragment,m),C(cy.$$.fragment,m),C(my.$$.fragment,m),C(fy.$$.fragment,m),C(uy.$$.fragment,m),C(cu.$$.fragment,m),C(mu.$$.fragment,m),C(py.$$.fragment,m),C(_y.$$.fragment,m),C(by.$$.fragment,m),C(Fy.$$.fragment,m),C(hu.$$.fragment,m),C(Ty.$$.fragment,m),C(f_.$$.fragment,m),C(My.$$.fragment,m),C(Ey.$$.fragment,m),C(wy.$$.fragment,m),C(h_.$$.fragment,m),C(Ay.$$.fragment,m),C(nb.$$.fragment,m),C(Ly.$$.fragment,m),C(yy.$$.fragment,m),C($y.$$.fragment,m),C(lb.$$.fragment,m),C(ky.$$.fragment,m),C(Qb.$$.fragment,m),C(Sy.$$.fragment,m),C(Ry.$$.fragment,m),C(By.$$.fragment,m),C(Ub.$$.fragment,m),C(Iy.$$.fragment,m),C(R2.$$.fragment,m),C(Ny.$$.fragment,m),C(qy.$$.fragment,m),C(Dy.$$.fragment,m),C(B2.$$.fragment,m),C(Gy.$$.fragment,m),C(Z2.$$.fragment,m),C(Oy.$$.fragment,m),C(Vy.$$.fragment,m),C(zy.$$.fragment,m),C(ov.$$.fragment,m),C(Wy.$$.fragment,m),C(Jv.$$.fragment,m),C(Qy.$$.fragment,m),C(Hy.$$.fragment,m),C(Jy.$$.fragment,m),C(Kv.$$.fragment,m),C(Yy.$$.fragment,m),C(xF.$$.fragment,m),C(Ky.$$.fragment,m),C(Zy.$$.fragment,m),C(o7.$$.fragment,m),C(kF.$$.fragment,m),C(r7.$$.fragment,m),C(qF.$$.fragment,m),C(t7.$$.fragment,m),C(a7.$$.fragment,m),C(s7.$$.fragment,m),C(DF.$$.fragment,m),C(l7.$$.fragment,m),C(M1.$$.fragment,m),C(i7.$$.fragment,m),C(d7.$$.fragment,m),C(m7.$$.fragment,m),C(C1.$$.fragment,m),C(f7.$$.fragment,m),C(fT.$$.fragment,m),C(g7.$$.fragment,m),C(h7.$$.fragment,m),C(p7.$$.fragment,m),C(hT.$$.fragment,m),C(_7.$$.fragment,m),C(_T.$$.fragment,m),C(b7.$$.fragment,m),C(v7.$$.fragment,m),C(T7.$$.fragment,m),C(vT.$$.fragment,m),C(M7.$$.fragment,m),C(RT.$$.fragment,m),C(E7.$$.fragment,m),C(C7.$$.fragment,m),C(A7.$$.fragment,m),C(BT.$$.fragment,m),C(L7.$$.fragment,m),C(qT.$$.fragment,m),C(y7.$$.fragment,m),C(x7.$$.fragment,m),C(k7.$$.fragment,m),C(DT.$$.fragment,m),C(S7.$$.fragment,m),C(YT.$$.fragment,m),C(R7.$$.fragment,m),C(P7.$$.fragment,m),C(I7.$$.fragment,m),C(ZT.$$.fragment,m),C(N7.$$.fragment,m),C(sM.$$.fragment,m),C(q7.$$.fragment,m),C(j7.$$.fragment,m),C(G7.$$.fragment,m),C(iM.$$.fragment,m),C(O7.$$.fragment,m),C(FM.$$.fragment,m),C(V7.$$.fragment,m),C(X7.$$.fragment,m),C(W7.$$.fragment,m),C(MM.$$.fragment,m),C(Q7.$$.fragment,m),C(AM.$$.fragment,m),C(U7.$$.fragment,m),C(J7.$$.fragment,m),C(K7.$$.fragment,m),C(yM.$$.fragment,m),C(Z7.$$.fragment,m),C(BM.$$.fragment,m),C(e8.$$.fragment,m),C(o8.$$.fragment,m),C(t8.$$.fragment,m),C(NM.$$.fragment,m),C(a8.$$.fragment,m),C(OM.$$.fragment,m),C(n8.$$.fragment,m),C(s8.$$.fragment,m),C(i8.$$.fragment,m),C(XM.$$.fragment,m),C(d8.$$.fragment,m),C(HM.$$.fragment,m),C(m8.$$.fragment,m),C(f8.$$.fragment,m),C(h8.$$.fragment,m),C(JM.$$.fragment,m),C(u8.$$.fragment,m),C(ZM.$$.fragment,m),C(p8.$$.fragment,m),C(_8.$$.fragment,m),C(v8.$$.fragment,m),C(o4.$$.fragment,m),C(F8.$$.fragment,m),C(l4.$$.fragment,m),C(T8.$$.fragment,m),C(M8.$$.fragment,m),C(C8.$$.fragment,m),C(d4.$$.fragment,m),C(w8.$$.fragment,m),C(f4.$$.fragment,m),C(A8.$$.fragment,m),C(L8.$$.fragment,m),C(x8.$$.fragment,m),C(h4.$$.fragment,m),C($8.$$.fragment,m),C(lE.$$.fragment,m),C(k8.$$.fragment,m),C(S8.$$.fragment,m),C(P8.$$.fragment,m),C(dE.$$.fragment,m),C(B8.$$.fragment,m),C(RE.$$.fragment,m),C(I8.$$.fragment,m),C(N8.$$.fragment,m),C(j8.$$.fragment,m),C(BE.$$.fragment,m),C(D8.$$.fragment,m),C(UE.$$.fragment,m),C(G8.$$.fragment,m),C(O8.$$.fragment,m),C(X8.$$.fragment,m),C(YE.$$.fragment,m),C(z8.$$.fragment,m),C(rC.$$.fragment,m),C(W8.$$.fragment,m),C(Q8.$$.fragment,m),C(U8.$$.fragment,m),C(aC.$$.fragment,m),C(J8.$$.fragment,m),C(wC.$$.fragment,m),C(Y8.$$.fragment,m),C(K8.$$.fragment,m),C(e9.$$.fragment,m),C(LC.$$.fragment,m),C(o9.$$.fragment,m),C(qC.$$.fragment,m),C(r9.$$.fragment,m),C(t9.$$.fragment,m),C(n9.$$.fragment,m),C(DC.$$.fragment,m),C(s9.$$.fragment,m),C(g5.$$.fragment,m),C(l9.$$.fragment,m),C(i9.$$.fragment,m),C(c9.$$.fragment,m),C(u5.$$.fragment,m),C(m9.$$.fragment,m),C(R5.$$.fragment,m),C(f9.$$.fragment,m),C(g9.$$.fragment,m),C(u9.$$.fragment,m),C(B5.$$.fragment,m),C(p9.$$.fragment,m),C(q5.$$.fragment,m),C(b9.$$.fragment,m),C(v9.$$.fragment,m),C(T9.$$.fragment,m),C(D5.$$.fragment,m),C(M9.$$.fragment,m),C(O5.$$.fragment,m),C(E9.$$.fragment,m),C(C9.$$.fragment,m),C(A9.$$.fragment,m),C(X5.$$.fragment,m),C(L9.$$.fragment,m),C(m3.$$.fragment,m),C(y9.$$.fragment,m),C(x9.$$.fragment,m),C(k9.$$.fragment,m),C(g3.$$.fragment,m),C(S9.$$.fragment,m),C(P3.$$.fragment,m),C(R9.$$.fragment,m),C(P9.$$.fragment,m),C(I9.$$.fragment,m),C(I3.$$.fragment,m),C(N9.$$.fragment,m),C(q3.$$.fragment,m),C(q9.$$.fragment,m),C(j9.$$.fragment,m),C(G9.$$.fragment,m),C(D3.$$.fragment,m),C(O9.$$.fragment,m),C(O3.$$.fragment,m),C(V9.$$.fragment,m),C(X9.$$.fragment,m),C(W9.$$.fragment,m),C(X3.$$.fragment,m),C(Q9.$$.fragment,m),C(_0.$$.fragment,m),C(H9.$$.fragment,m),C(U9.$$.fragment,m),C(Y9.$$.fragment,m),C(v0.$$.fragment,m),C(K9.$$.fragment,m),C($0.$$.fragment,m),C(Z9.$$.fragment,m),C(ex.$$.fragment,m),C(rx.$$.fragment,m),C(S0.$$.fragment,m),C(tx.$$.fragment,m),C(z0.$$.fragment,m),C(ax.$$.fragment,m),C(nx.$$.fragment,m),C(lx.$$.fragment,m),C(Q0.$$.fragment,m),C(ix.$$.fragment,m),C(aw.$$.fragment,m),C(dx.$$.fragment,m),C(cx.$$.fragment,m),C(fx.$$.fragment,m),C(sw.$$.fragment,m),C(gx.$$.fragment,m),C(pw.$$.fragment,m),C(hx.$$.fragment,m),C(ux.$$.fragment,m),C(_x.$$.fragment,m),C(bw.$$.fragment,m),C(bx.$$.fragment,m),C(xw.$$.fragment,m),C(vx.$$.fragment,m),C(Fx.$$.fragment,m),C(Mx.$$.fragment,m),C(kw.$$.fragment,m),C(Ex.$$.fragment,m),C(Ow.$$.fragment,m),C(Cx.$$.fragment,m),C(wx.$$.fragment,m),C(Lx.$$.fragment,m),C(Xw.$$.fragment,m),C(yx.$$.fragment,m),C(Zw.$$.fragment,m),C(xx.$$.fragment,m),C($x.$$.fragment,m),C(Sx.$$.fragment,m),C(oA.$$.fragment,m),C(Rx.$$.fragment,m),C(cA.$$.fragment,m),C(Px.$$.fragment,m),C(Bx.$$.fragment,m),C(Nx.$$.fragment,m),C(fA.$$.fragment,m),C(qx.$$.fragment,m),C(hA.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(pA.$$.fragment,m),C(Vx.$$.fragment,m),C(vA.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(Hx.$$.fragment,m),C(TA.$$.fragment,m),C(Ux.$$.fragment,m),C(EA.$$.fragment,m),FGe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(um),m&&t(rt),m&&t(Ge),m&&t(We),m&&t(_m),w(Ca,m),m&&t(Qe),m&&t(Ae),m&&t(Eo),m&&t(wa),m&&t(_je),m&&t(vi),w(zL),m&&t(bje),m&&t(kn),m&&t(vje),w(WL,m),m&&t(Fje),m&&t(uk),m&&t(Tje),w(Fm,m),m&&t(Mje),m&&t(Fi),w(QL),m&&t(Eje),m&&t(Co),w(HL),w(YL),w(Lg),w(KL),m&&t(Cje),m&&t(Mi),w(ZL),m&&t(wje),m&&t(wo),w(ey),w(ty),w(dh),w(ay),m&&t(Aje),m&&t(Ei),w(ny),m&&t(Lje),m&&t(Ao),w(sy),w(dy),w(Vh),w(Xh),w(cy),m&&t(yje),m&&t(Ci),w(my),m&&t(xje),m&&t(Lo),w(fy),w(uy),w(cu),w(mu),w(py),m&&t($je),m&&t(Ai),w(_y),m&&t(kje),m&&t(yo),w(by),w(Fy),w(hu),w(Ty),w(f_),m&&t(Sje),m&&t(xi),w(My),m&&t(Rje),m&&t(xo),w(Ey),w(wy),w(h_),w(Ay),w(nb),m&&t(Pje),m&&t(Si),w(Ly),m&&t(Bje),m&&t($o),w(yy),w($y),w(lb),w(ky),w(Qb),m&&t(Ije),m&&t(Bi),w(Sy),m&&t(Nje),m&&t(ko),w(Ry),w(By),w(Ub),w(Iy),w(R2),m&&t(qje),m&&t(qi),w(Ny),m&&t(jje),m&&t(So),w(qy),w(Dy),w(B2),w(Gy),w(Z2),m&&t(Dje),m&&t(Gi),w(Oy),m&&t(Gje),m&&t(Ro),w(Vy),w(zy),w(ov),w(Wy),w(Jv),m&&t(Oje),m&&t(Xi),w(Qy),m&&t(Vje),m&&t(Po),w(Hy),w(Jy),w(Kv),w(Yy),w(xF),m&&t(Xje),m&&t(Qi),w(Ky),m&&t(zje),m&&t(Bo),w(Zy),w(o7),w(kF),w(r7),w(qF),m&&t(Wje),m&&t(Ji),w(t7),m&&t(Qje),m&&t(Io),w(a7),w(s7),w(DF),w(l7),w(M1),m&&t(Hje),m&&t(Zi),w(i7),m&&t(Uje),m&&t(No),w(d7),w(m7),w(C1),w(f7),w(fT),m&&t(Jje),m&&t(rd),w(g7),m&&t(Yje),m&&t(qo),w(h7),w(p7),w(hT),w(_7),w(_T),m&&t(Kje),m&&t(nd),w(b7),m&&t(Zje),m&&t(jo),w(v7),w(T7),w(vT),w(M7),w(RT),m&&t(eDe),m&&t(id),w(E7),m&&t(oDe),m&&t(Do),w(C7),w(A7),w(BT),w(L7),w(qT),m&&t(rDe),m&&t(md),w(y7),m&&t(tDe),m&&t(Go),w(x7),w(k7),w(DT),w(S7),w(YT),m&&t(aDe),m&&t(hd),w(R7),m&&t(nDe),m&&t(Oo),w(P7),w(I7),w(ZT),w(N7),w(sM),m&&t(sDe),m&&t(_d),w(q7),m&&t(lDe),m&&t(Vo),w(j7),w(G7),w(iM),w(O7),w(FM),m&&t(iDe),m&&t(Fd),w(V7),m&&t(dDe),m&&t(Xo),w(X7),w(W7),w(MM),w(Q7),w(AM),m&&t(cDe),m&&t(Ed),w(U7),m&&t(mDe),m&&t(zo),w(J7),w(K7),w(yM),w(Z7),w(BM),m&&t(fDe),m&&t(Ad),w(e8),m&&t(gDe),m&&t(Wo),w(o8),w(t8),w(NM),w(a8),w(OM),m&&t(hDe),m&&t($d),w(n8),m&&t(uDe),m&&t(Qo),w(s8),w(i8),w(XM),w(d8),w(HM),m&&t(pDe),m&&t(Rd),w(m8),m&&t(_De),m&&t(Ho),w(f8),w(h8),w(JM),w(u8),w(ZM),m&&t(bDe),m&&t(Id),w(p8),m&&t(vDe),m&&t(Uo),w(_8),w(v8),w(o4),w(F8),w(l4),m&&t(FDe),m&&t(jd),w(T8),m&&t(TDe),m&&t(Jo),w(M8),w(C8),w(d4),w(w8),w(f4),m&&t(MDe),m&&t(Od),w(A8),m&&t(EDe),m&&t(Yo),w(L8),w(x8),w(h4),w($8),w(lE),m&&t(CDe),m&&t(zd),w(k8),m&&t(wDe),m&&t(Ko),w(S8),w(P8),w(dE),w(B8),w(RE),m&&t(ADe),m&&t(Hd),w(I8),m&&t(LDe),m&&t(Zo),w(N8),w(j8),w(BE),w(D8),w(UE),m&&t(yDe),m&&t(Yd),w(G8),m&&t(xDe),m&&t(er),w(O8),w(X8),w(YE),w(z8),w(rC),m&&t($De),m&&t(ec),w(W8),m&&t(kDe),m&&t(or),w(Q8),w(U8),w(aC),w(J8),w(wC),m&&t(SDe),m&&t(tc),w(Y8),m&&t(RDe),m&&t(rr),w(K8),w(e9),w(LC),w(o9),w(qC),m&&t(PDe),m&&t(sc),w(r9),m&&t(BDe),m&&t(tr),w(t9),w(n9),w(DC),w(s9),w(g5),m&&t(IDe),m&&t(dc),w(l9),m&&t(NDe),m&&t(ar),w(i9),w(c9),w(u5),w(m9),w(R5),m&&t(qDe),m&&t(fc),w(f9),m&&t(jDe),m&&t(nr),w(g9),w(u9),w(B5),w(p9),w(q5),m&&t(DDe),m&&t(uc),w(b9),m&&t(GDe),m&&t(sr),w(v9),w(T9),w(D5),w(M9),w(O5),m&&t(ODe),m&&t(bc),w(E9),m&&t(VDe),m&&t(lr),w(C9),w(A9),w(X5),w(L9),w(m3),m&&t(XDe),m&&t(Tc),w(y9),m&&t(zDe),m&&t(ir),w(x9),w(k9),w(g3),w(S9),w(P3),m&&t(WDe),m&&t(Cc),w(R9),m&&t(QDe),m&&t(dr),w(P9),w(I9),w(I3),w(N9),w(q3),m&&t(HDe),m&&t(Lc),w(q9),m&&t(UDe),m&&t(cr),w(j9),w(G9),w(D3),w(O9),w(O3),m&&t(JDe),m&&t($c),w(V9),m&&t(YDe),m&&t(mr),w(X9),w(W9),w(X3),w(Q9),w(_0),m&&t(KDe),m&&t(Rc),w(H9),m&&t(ZDe),m&&t(fr),w(U9),w(Y9),w(v0),w(K9),w($0),m&&t(eGe),m&&t(Ic),w(Z9),m&&t(oGe),m&&t(gr),w(ex),w(rx),w(S0),w(tx),w(z0),m&&t(rGe),m&&t(jc),w(ax),m&&t(tGe),m&&t(hr),w(nx),w(lx),w(Q0),w(ix),w(aw),m&&t(aGe),m&&t(Oc),w(dx),m&&t(nGe),m&&t(ur),w(cx),w(fx),w(sw),w(gx),w(pw),m&&t(sGe),m&&t(zc),w(hx),m&&t(lGe),m&&t(pr),w(ux),w(_x),w(bw),w(bx),w(xw),m&&t(iGe),m&&t(Hc),w(vx),m&&t(dGe),m&&t(_r),w(Fx),w(Mx),w(kw),w(Ex),w(Ow),m&&t(cGe),m&&t(Yc),w(Cx),m&&t(mGe),m&&t(br),w(wx),w(Lx),w(Xw),w(yx),w(Zw),m&&t(fGe),m&&t(em),w(xx),m&&t(gGe),m&&t(vr),w($x),w(Sx),w(oA),w(Rx),w(cA),m&&t(hGe),m&&t(tm),w(Px),m&&t(uGe),m&&t(Fr),w(Bx),w(Nx),w(fA),w(qx),w(hA),m&&t(pGe),m&&t(sm),w(jx),m&&t(_Ge),m&&t(Tr),w(Dx),w(Ox),w(pA),w(Vx),w(vA),m&&t(bGe),m&&t(dm),w(zx),m&&t(vGe),m&&t(Mr),w(Wx),w(Hx),w(TA),w(Ux),w(EA)}}}const UBt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function JBt(x){return JRt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class tIt extends WRt{constructor(g){super();QRt(this,g,JBt,HBt,HRt,{})}}export{tIt as default,UBt as metadata};
