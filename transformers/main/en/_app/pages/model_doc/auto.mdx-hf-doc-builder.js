import{S as DOt,i as GOt,s as OOt,e as a,k as l,w as F,t as o,M as VOt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as XOt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as UZr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function zOt($){let g,v,u,f,p,d,h,Eo,Ci,$m,nt,wi,Ai,I7,km,Oe,Qe,Li,Rn,N7,Pn,Bn,q7,yi,In,j7,xi,Sm,$a;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ci=a("code"),$m=o("model_type"),nt=o(" attribute is set to the same key you use when registering the config (here "),wi=a("code"),Ai=o('"new-model"'),I7=o(")."),km=l(),Oe=a("p"),Qe=o("Likewise, if your "),Li=a("code"),Rn=o("NewModel"),N7=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),q7=o(`, make sure its
`),yi=a("code"),In=o("config_class"),j7=o(` attribute is set to the same class you use when registering the model (here
`),xi=a("code"),Sm=o("NewModelConfig"),$a=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var uS=s(u);f=r(uS,"NewModelConfig"),uS.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var $i=s(d);h=r($i,"PretrainedConfig"),$i.forEach(t),Eo=r(Ae,`, make sure its
`),Ci=n(Ae,"CODE",{});var pS=s(Ci);$m=r(pS,"model_type"),pS.forEach(t),nt=r(Ae," attribute is set to the same key you use when registering the config (here "),wi=n(Ae,"CODE",{});var _S=s(wi);Ai=r(_S,'"new-model"'),_S.forEach(t),I7=r(Ae,")."),Ae.forEach(t),km=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),Li=n(Co,"CODE",{});var ka=s(Li);Rn=r(ka,"NewModel"),ka.forEach(t),N7=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var bS=s(Pn);Bn=r(bS,"PreTrainedModel"),bS.forEach(t),q7=r(Co,`, make sure its
`),yi=n(Co,"CODE",{});var Rm=s(yi);In=r(Rm,"config_class"),Rm.forEach(t),j7=r(Co,` attribute is set to the same class you use when registering the model (here
`),xi=n(Co,"CODE",{});var vS=s(xi);Sm=r(vS,"NewModelConfig"),vS.forEach(t),$a=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Eo),e(g,Ci),e(Ci,$m),e(g,nt),e(g,wi),e(wi,Ai),e(g,I7),b(We,km,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,Li),e(Li,Rn),e(Oe,N7),e(Oe,Pn),e(Pn,Bn),e(Oe,q7),e(Oe,yi),e(yi,In),e(Oe,j7),e(Oe,xi),e(xi,Sm),e(Oe,$a)},d(We){We&&t(g),We&&t(km),We&&t(Oe)}}}function QOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HOt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Eo=s(u);f=r(Eo,"use_auth_token=True"),Eo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function UOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JOt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Eo=s(u);f=r(Eo,"use_auth_token=True"),Eo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function YOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Vt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Vt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Xt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Xt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XXt($){let g,v,u,f,p,d,h,Eo,Ci,$m,nt,wi,Ai,I7,km,Oe,Qe,Li,Rn,N7,Pn,Bn,q7,yi,In,j7,xi,Sm,$a,We,Ae,uS,$i,pS,_S,Co,ka,bS,Rm,vS,QQe,kOe,ki,Pm,qte,D7,WQe,jte,HQe,SOe,Nn,UQe,Dte,JQe,YQe,Gte,KQe,ZQe,ROe,G7,POe,FS,eWe,BOe,Bm,IOe,Si,Im,Ote,O7,oWe,Vte,rWe,NOe,wo,V7,tWe,X7,aWe,TS,nWe,sWe,lWe,z7,iWe,Xte,dWe,cWe,mWe,Ar,Q7,fWe,zte,gWe,hWe,Ri,uWe,Qte,pWe,_We,Wte,bWe,vWe,FWe,A,Nm,Hte,TWe,MWe,MS,EWe,CWe,wWe,qm,Ute,AWe,LWe,ES,yWe,xWe,$We,jm,Jte,kWe,SWe,CS,RWe,PWe,BWe,Dm,Yte,IWe,NWe,wS,qWe,jWe,DWe,Gm,Kte,GWe,OWe,AS,VWe,XWe,zWe,Om,Zte,QWe,WWe,LS,HWe,UWe,JWe,Vm,eae,YWe,KWe,yS,ZWe,eHe,oHe,Xm,oae,rHe,tHe,xS,aHe,nHe,sHe,zm,rae,lHe,iHe,$S,dHe,cHe,mHe,Qm,tae,fHe,gHe,kS,hHe,uHe,pHe,Wm,aae,_He,bHe,SS,vHe,FHe,THe,Hm,nae,MHe,EHe,RS,CHe,wHe,AHe,Um,sae,LHe,yHe,PS,xHe,$He,kHe,Jm,lae,SHe,RHe,BS,PHe,BHe,IHe,Ym,iae,NHe,qHe,IS,jHe,DHe,GHe,Km,dae,OHe,VHe,NS,XHe,zHe,QHe,Zm,cae,WHe,HHe,qS,UHe,JHe,YHe,ef,mae,KHe,ZHe,jS,eUe,oUe,rUe,of,fae,tUe,aUe,DS,nUe,sUe,lUe,rf,gae,iUe,dUe,GS,cUe,mUe,fUe,tf,hae,gUe,hUe,OS,uUe,pUe,_Ue,af,uae,bUe,vUe,VS,FUe,TUe,MUe,nf,pae,EUe,CUe,XS,wUe,AUe,LUe,sf,_ae,yUe,xUe,zS,$Ue,kUe,SUe,lf,bae,RUe,PUe,QS,BUe,IUe,NUe,df,vae,qUe,jUe,WS,DUe,GUe,OUe,cf,Fae,VUe,XUe,HS,zUe,QUe,WUe,mf,Tae,HUe,UUe,US,JUe,YUe,KUe,ff,Mae,ZUe,eJe,JS,oJe,rJe,tJe,gf,Eae,aJe,nJe,YS,sJe,lJe,iJe,hf,Cae,dJe,cJe,KS,mJe,fJe,gJe,uf,wae,hJe,uJe,ZS,pJe,_Je,bJe,pf,Aae,vJe,FJe,eR,TJe,MJe,EJe,_f,Lae,CJe,wJe,oR,AJe,LJe,yJe,bf,yae,xJe,$Je,rR,kJe,SJe,RJe,vf,xae,PJe,BJe,tR,IJe,NJe,qJe,Ff,$ae,jJe,DJe,aR,GJe,OJe,VJe,Tf,kae,XJe,zJe,nR,QJe,WJe,HJe,Mf,Sae,UJe,JJe,sR,YJe,KJe,ZJe,Ef,Rae,eYe,oYe,lR,rYe,tYe,aYe,Cf,Pae,nYe,sYe,iR,lYe,iYe,dYe,wf,Bae,cYe,mYe,dR,fYe,gYe,hYe,Af,Iae,uYe,pYe,cR,_Ye,bYe,vYe,Lf,Nae,FYe,TYe,mR,MYe,EYe,CYe,yf,qae,wYe,AYe,fR,LYe,yYe,xYe,xf,jae,$Ye,kYe,gR,SYe,RYe,PYe,$f,Dae,BYe,IYe,hR,NYe,qYe,jYe,kf,Gae,DYe,GYe,uR,OYe,VYe,XYe,Sf,Oae,zYe,QYe,pR,WYe,HYe,UYe,Rf,Vae,JYe,YYe,_R,KYe,ZYe,eKe,Pf,Xae,oKe,rKe,bR,tKe,aKe,nKe,Bf,zae,sKe,lKe,vR,iKe,dKe,cKe,If,Qae,mKe,fKe,FR,gKe,hKe,uKe,Nf,Wae,pKe,_Ke,TR,bKe,vKe,FKe,qf,Hae,TKe,MKe,MR,EKe,CKe,wKe,jf,Uae,AKe,LKe,ER,yKe,xKe,$Ke,Df,Jae,kKe,SKe,CR,RKe,PKe,BKe,Gf,Yae,IKe,NKe,wR,qKe,jKe,DKe,Of,Kae,GKe,OKe,AR,VKe,XKe,zKe,Vf,Zae,QKe,WKe,LR,HKe,UKe,JKe,Xf,ene,YKe,KKe,yR,ZKe,eZe,oZe,zf,one,rZe,tZe,xR,aZe,nZe,sZe,Qf,rne,lZe,iZe,$R,dZe,cZe,mZe,Wf,tne,fZe,gZe,kR,hZe,uZe,pZe,Hf,ane,_Ze,bZe,SR,vZe,FZe,TZe,Uf,nne,MZe,EZe,RR,CZe,wZe,AZe,Jf,sne,LZe,yZe,PR,xZe,$Ze,kZe,Yf,lne,SZe,RZe,BR,PZe,BZe,IZe,Kf,ine,NZe,qZe,IR,jZe,DZe,GZe,Zf,dne,OZe,VZe,NR,XZe,zZe,QZe,eg,cne,WZe,HZe,qR,UZe,JZe,YZe,og,mne,KZe,ZZe,jR,eeo,oeo,reo,rg,fne,teo,aeo,DR,neo,seo,leo,tg,gne,ieo,deo,GR,ceo,meo,feo,ag,hne,geo,heo,OR,ueo,peo,_eo,ng,une,beo,veo,VR,Feo,Teo,Meo,sg,pne,Eeo,Ceo,XR,weo,Aeo,Leo,lg,_ne,yeo,xeo,zR,$eo,keo,Seo,ig,bne,Reo,Peo,QR,Beo,Ieo,Neo,dg,vne,qeo,jeo,WR,Deo,Geo,Oeo,cg,Fne,Veo,Xeo,HR,zeo,Qeo,Weo,mg,Tne,Heo,Ueo,UR,Jeo,Yeo,Keo,fg,Mne,Zeo,eoo,JR,ooo,roo,too,gg,Ene,aoo,noo,YR,soo,loo,ioo,hg,Cne,doo,coo,KR,moo,foo,goo,ug,wne,hoo,uoo,ZR,poo,_oo,boo,pg,Ane,voo,Foo,eP,Too,Moo,Eoo,_g,Lne,Coo,woo,oP,Aoo,Loo,yoo,bg,yne,xoo,$oo,rP,koo,Soo,Roo,vg,xne,Poo,Boo,tP,Ioo,Noo,qoo,Fg,$ne,joo,Doo,aP,Goo,Ooo,Voo,Tg,kne,Xoo,zoo,nP,Qoo,Woo,Hoo,Mg,Sne,Uoo,Joo,sP,Yoo,Koo,Zoo,Eg,Rne,ero,oro,lP,rro,tro,aro,Cg,Pne,nro,sro,iP,lro,iro,dro,wg,Bne,cro,mro,dP,fro,gro,hro,Ag,Ine,uro,pro,cP,_ro,bro,vro,Lg,Nne,Fro,Tro,mP,Mro,Ero,Cro,yg,qne,wro,Aro,fP,Lro,yro,xro,xg,jne,$ro,kro,gP,Sro,Rro,Pro,$g,Dne,Bro,Iro,hP,Nro,qro,jro,kg,Gne,Dro,Gro,uP,Oro,Vro,Xro,Sg,One,zro,Qro,pP,Wro,Hro,Uro,Rg,Vne,Jro,Yro,_P,Kro,Zro,eto,Pg,Xne,oto,rto,bP,tto,ato,nto,Bg,zne,sto,lto,vP,ito,dto,cto,Ig,Qne,mto,fto,FP,gto,hto,uto,Ng,Wne,pto,_to,TP,bto,vto,Fto,qg,Hne,Tto,Mto,MP,Eto,Cto,wto,jg,Une,Ato,Lto,EP,yto,xto,$to,Dg,Jne,kto,Sto,CP,Rto,Pto,Bto,Gg,Yne,Ito,Nto,wP,qto,jto,Dto,Og,Kne,Gto,Oto,AP,Vto,Xto,zto,Vg,Zne,Qto,Wto,LP,Hto,Uto,Jto,Xg,ese,Yto,Kto,yP,Zto,eao,oao,zg,ose,rao,tao,xP,aao,nao,sao,Qg,lao,Wg,W7,iao,rse,dao,qOe,Pi,Hg,tse,H7,cao,ase,mao,jOe,Ao,U7,fao,J7,gao,$P,hao,uao,pao,Y7,_ao,nse,bao,vao,Fao,Lr,K7,Tao,sse,Mao,Eao,Sa,Cao,lse,wao,Aao,ise,Lao,yao,dse,xao,$ao,kao,k,qn,cse,Sao,Rao,kP,Pao,Bao,SP,Iao,Nao,qao,jn,mse,jao,Dao,RP,Gao,Oao,PP,Vao,Xao,zao,Dn,fse,Qao,Wao,BP,Hao,Uao,IP,Jao,Yao,Kao,Ug,gse,Zao,eno,NP,ono,rno,tno,Gn,hse,ano,nno,qP,sno,lno,jP,ino,dno,cno,Jg,use,mno,fno,DP,gno,hno,uno,Yg,pse,pno,_no,GP,bno,vno,Fno,Kg,_se,Tno,Mno,OP,Eno,Cno,wno,On,bse,Ano,Lno,VP,yno,xno,XP,$no,kno,Sno,Vn,vse,Rno,Pno,zP,Bno,Ino,QP,Nno,qno,jno,Xn,Fse,Dno,Gno,WP,Ono,Vno,HP,Xno,zno,Qno,Zg,Tse,Wno,Hno,UP,Uno,Jno,Yno,eh,Mse,Kno,Zno,JP,eso,oso,rso,oh,Ese,tso,aso,YP,nso,sso,lso,zn,Cse,iso,dso,KP,cso,mso,ZP,fso,gso,hso,rh,wse,uso,pso,eB,_so,bso,vso,Qn,Ase,Fso,Tso,oB,Mso,Eso,rB,Cso,wso,Aso,Wn,Lse,Lso,yso,tB,xso,$so,aB,kso,Sso,Rso,Hn,yse,Pso,Bso,nB,Iso,Nso,sB,qso,jso,Dso,Un,xse,Gso,Oso,lB,Vso,Xso,iB,zso,Qso,Wso,th,$se,Hso,Uso,dB,Jso,Yso,Kso,Jn,kse,Zso,elo,cB,olo,rlo,mB,tlo,alo,nlo,Yn,Sse,slo,llo,fB,ilo,dlo,gB,clo,mlo,flo,Kn,Rse,glo,hlo,hB,ulo,plo,uB,_lo,blo,vlo,Zn,Pse,Flo,Tlo,pB,Mlo,Elo,_B,Clo,wlo,Alo,es,Bse,Llo,ylo,bB,xlo,$lo,vB,klo,Slo,Rlo,os,Ise,Plo,Blo,FB,Ilo,Nlo,TB,qlo,jlo,Dlo,ah,Nse,Glo,Olo,MB,Vlo,Xlo,zlo,rs,qse,Qlo,Wlo,EB,Hlo,Ulo,CB,Jlo,Ylo,Klo,nh,jse,Zlo,eio,wB,oio,rio,tio,ts,Dse,aio,nio,AB,sio,lio,LB,iio,dio,cio,as,Gse,mio,fio,yB,gio,hio,xB,uio,pio,_io,ns,Ose,bio,vio,$B,Fio,Tio,kB,Mio,Eio,Cio,sh,Vse,wio,Aio,SB,Lio,yio,xio,ss,Xse,$io,kio,RB,Sio,Rio,PB,Pio,Bio,Iio,ls,zse,Nio,qio,BB,jio,Dio,IB,Gio,Oio,Vio,is,Qse,Xio,zio,NB,Qio,Wio,qB,Hio,Uio,Jio,lh,Wse,Yio,Kio,jB,Zio,edo,odo,ds,Hse,rdo,tdo,DB,ado,ndo,GB,sdo,ldo,ido,cs,Use,ddo,cdo,OB,mdo,fdo,VB,gdo,hdo,udo,ms,Jse,pdo,_do,XB,bdo,vdo,zB,Fdo,Tdo,Mdo,fs,Yse,Edo,Cdo,QB,wdo,Ado,WB,Ldo,ydo,xdo,gs,Kse,$do,kdo,HB,Sdo,Rdo,UB,Pdo,Bdo,Ido,hs,Zse,Ndo,qdo,JB,jdo,Ddo,YB,Gdo,Odo,Vdo,us,ele,Xdo,zdo,KB,Qdo,Wdo,ZB,Hdo,Udo,Jdo,ps,ole,Ydo,Kdo,eI,Zdo,eco,oI,oco,rco,tco,ih,rle,aco,nco,rI,sco,lco,ico,_s,tle,dco,cco,tI,mco,fco,aI,gco,hco,uco,dh,ale,pco,_co,nI,bco,vco,Fco,ch,nle,Tco,Mco,sI,Eco,Cco,wco,bs,sle,Aco,Lco,lI,yco,xco,iI,$co,kco,Sco,vs,lle,Rco,Pco,dI,Bco,Ico,cI,Nco,qco,jco,Fs,ile,Dco,Gco,mI,Oco,Vco,fI,Xco,zco,Qco,mh,dle,Wco,Hco,gI,Uco,Jco,Yco,Ts,cle,Kco,Zco,hI,emo,omo,uI,rmo,tmo,amo,Ms,mle,nmo,smo,pI,lmo,imo,_I,dmo,cmo,mmo,Es,fle,fmo,gmo,bI,hmo,umo,vI,pmo,_mo,bmo,Cs,gle,vmo,Fmo,FI,Tmo,Mmo,TI,Emo,Cmo,wmo,ws,hle,Amo,Lmo,MI,ymo,xmo,EI,$mo,kmo,Smo,As,ule,Rmo,Pmo,CI,Bmo,Imo,wI,Nmo,qmo,jmo,fh,ple,Dmo,Gmo,AI,Omo,Vmo,Xmo,Ls,_le,zmo,Qmo,LI,Wmo,Hmo,yI,Umo,Jmo,Ymo,gh,ble,Kmo,Zmo,xI,efo,ofo,rfo,hh,vle,tfo,afo,$I,nfo,sfo,lfo,uh,Fle,ifo,dfo,kI,cfo,mfo,ffo,ph,Tle,gfo,hfo,SI,ufo,pfo,_fo,ys,Mle,bfo,vfo,RI,Ffo,Tfo,PI,Mfo,Efo,Cfo,_h,Ele,wfo,Afo,BI,Lfo,yfo,xfo,xs,Cle,$fo,kfo,II,Sfo,Rfo,NI,Pfo,Bfo,Ifo,$s,wle,Nfo,qfo,qI,jfo,Dfo,jI,Gfo,Ofo,Vfo,ks,Ale,Xfo,zfo,DI,Qfo,Wfo,GI,Hfo,Ufo,Jfo,Ss,Lle,Yfo,Kfo,OI,Zfo,ego,VI,ogo,rgo,tgo,Rs,yle,ago,ngo,XI,sgo,lgo,zI,igo,dgo,cgo,Ps,xle,mgo,fgo,QI,ggo,hgo,WI,ugo,pgo,_go,bh,$le,bgo,vgo,HI,Fgo,Tgo,Mgo,vh,kle,Ego,Cgo,UI,wgo,Ago,Lgo,Bs,Sle,ygo,xgo,JI,$go,kgo,YI,Sgo,Rgo,Pgo,Is,Rle,Bgo,Igo,KI,Ngo,qgo,ZI,jgo,Dgo,Ggo,Ns,Ple,Ogo,Vgo,eN,Xgo,zgo,oN,Qgo,Wgo,Hgo,Fh,Ble,Ugo,Jgo,rN,Ygo,Kgo,Zgo,Th,Ile,eho,oho,tN,rho,tho,aho,Mh,Nle,nho,sho,aN,lho,iho,dho,qs,qle,cho,mho,nN,fho,gho,sN,hho,uho,pho,js,jle,_ho,bho,lN,vho,Fho,iN,Tho,Mho,Eho,Eh,Dle,Cho,who,dN,Aho,Lho,yho,Ch,Gle,xho,$ho,cN,kho,Sho,Rho,wh,Ole,Pho,Bho,mN,Iho,Nho,qho,Ds,Vle,jho,Dho,fN,Gho,Oho,gN,Vho,Xho,zho,Ah,Xle,Qho,Who,hN,Hho,Uho,Jho,Lh,zle,Yho,Kho,uN,Zho,euo,ouo,Gs,Qle,ruo,tuo,pN,auo,nuo,_N,suo,luo,iuo,Os,Wle,duo,cuo,bN,muo,fuo,vN,guo,huo,uuo,Vs,Hle,puo,_uo,FN,buo,vuo,TN,Fuo,Tuo,Muo,Xs,Ule,Euo,Cuo,MN,wuo,Auo,EN,Luo,yuo,xuo,yh,$uo,xh,Z7,kuo,Jle,Suo,DOe,Bi,$h,Yle,ey,Ruo,Kle,Puo,GOe,Lo,oy,Buo,ry,Iuo,CN,Nuo,quo,juo,ty,Duo,Zle,Guo,Ouo,Vuo,He,ay,Xuo,eie,zuo,Quo,Ra,Wuo,oie,Huo,Uuo,rie,Juo,Yuo,tie,Kuo,Zuo,epo,Y,kh,aie,opo,rpo,wN,tpo,apo,npo,Sh,nie,spo,lpo,AN,ipo,dpo,cpo,Rh,sie,mpo,fpo,LN,gpo,hpo,upo,Ph,lie,ppo,_po,yN,bpo,vpo,Fpo,Bh,iie,Tpo,Mpo,xN,Epo,Cpo,wpo,Ih,die,Apo,Lpo,$N,ypo,xpo,$po,Nh,cie,kpo,Spo,kN,Rpo,Ppo,Bpo,qh,mie,Ipo,Npo,SN,qpo,jpo,Dpo,jh,fie,Gpo,Opo,RN,Vpo,Xpo,zpo,Dh,gie,Qpo,Wpo,PN,Hpo,Upo,Jpo,Gh,hie,Ypo,Kpo,BN,Zpo,e_o,o_o,Oh,uie,r_o,t_o,IN,a_o,n_o,s_o,Vh,pie,l_o,i_o,NN,d_o,c_o,m_o,Xh,_ie,f_o,g_o,qN,h_o,u_o,p_o,zh,bie,__o,b_o,jN,v_o,F_o,T_o,Qh,vie,M_o,E_o,DN,C_o,w_o,A_o,Wh,Fie,L_o,y_o,GN,x_o,$_o,k_o,Hh,Tie,S_o,R_o,ON,P_o,B_o,I_o,Uh,Mie,N_o,q_o,VN,j_o,D_o,G_o,Jh,Eie,O_o,V_o,XN,X_o,z_o,Q_o,Yh,Cie,W_o,H_o,zN,U_o,J_o,Y_o,Kh,wie,K_o,Z_o,QN,e2o,o2o,r2o,Zh,Aie,t2o,a2o,WN,n2o,s2o,l2o,eu,Lie,i2o,d2o,HN,c2o,m2o,f2o,ou,yie,g2o,h2o,UN,u2o,p2o,_2o,ru,xie,b2o,v2o,JN,F2o,T2o,M2o,tu,$ie,E2o,C2o,YN,w2o,A2o,L2o,au,kie,y2o,x2o,KN,$2o,k2o,S2o,nu,Sie,R2o,P2o,ZN,B2o,I2o,N2o,su,Rie,q2o,j2o,eq,D2o,G2o,O2o,lu,Pie,V2o,X2o,oq,z2o,Q2o,W2o,iu,Bie,H2o,U2o,rq,J2o,Y2o,K2o,du,Iie,Z2o,ebo,tq,obo,rbo,tbo,cu,abo,mu,nbo,fu,ny,sbo,Nie,lbo,OOe,Ii,gu,qie,sy,ibo,jie,dbo,VOe,yo,ly,cbo,iy,mbo,aq,fbo,gbo,hbo,dy,ubo,Die,pbo,_bo,bbo,Ue,cy,vbo,Gie,Fbo,Tbo,Ni,Mbo,Oie,Ebo,Cbo,Vie,wbo,Abo,Lbo,he,hu,Xie,ybo,xbo,nq,$bo,kbo,Sbo,uu,zie,Rbo,Pbo,Qie,Bbo,Ibo,Nbo,pu,Wie,qbo,jbo,sq,Dbo,Gbo,Obo,_u,Hie,Vbo,Xbo,lq,zbo,Qbo,Wbo,bu,Uie,Hbo,Ubo,iq,Jbo,Ybo,Kbo,vu,Jie,Zbo,evo,dq,ovo,rvo,tvo,Fu,Yie,avo,nvo,cq,svo,lvo,ivo,Tu,Kie,dvo,cvo,mq,mvo,fvo,gvo,Mu,Zie,hvo,uvo,fq,pvo,_vo,bvo,Eu,ede,vvo,Fvo,gq,Tvo,Mvo,Evo,Cu,ode,Cvo,wvo,hq,Avo,Lvo,yvo,wu,rde,xvo,$vo,uq,kvo,Svo,Rvo,Au,tde,Pvo,Bvo,pq,Ivo,Nvo,qvo,Lu,ade,jvo,Dvo,_q,Gvo,Ovo,Vvo,yu,nde,Xvo,zvo,bq,Qvo,Wvo,Hvo,xu,sde,Uvo,Jvo,vq,Yvo,Kvo,Zvo,$u,lde,e1o,o1o,Fq,r1o,t1o,a1o,ku,ide,n1o,s1o,Tq,l1o,i1o,d1o,Su,c1o,Ru,m1o,Pu,my,f1o,dde,g1o,XOe,qi,Bu,cde,fy,h1o,mde,u1o,zOe,xo,gy,p1o,ji,_1o,Mq,b1o,v1o,Eq,F1o,T1o,M1o,hy,E1o,fde,C1o,w1o,A1o,st,uy,L1o,gde,y1o,x1o,Di,$1o,hde,k1o,S1o,Cq,R1o,P1o,B1o,Iu,I1o,Je,py,N1o,ude,q1o,j1o,Pa,D1o,pde,G1o,O1o,_de,V1o,X1o,bde,z1o,Q1o,W1o,y,Nu,vde,H1o,U1o,wq,J1o,Y1o,K1o,qu,Fde,Z1o,eFo,Aq,oFo,rFo,tFo,ju,Tde,aFo,nFo,Lq,sFo,lFo,iFo,Du,Mde,dFo,cFo,yq,mFo,fFo,gFo,Gu,Ede,hFo,uFo,xq,pFo,_Fo,bFo,Ou,Cde,vFo,FFo,$q,TFo,MFo,EFo,Vu,wde,CFo,wFo,kq,AFo,LFo,yFo,Xu,Ade,xFo,$Fo,Sq,kFo,SFo,RFo,zu,Lde,PFo,BFo,Rq,IFo,NFo,qFo,Qu,yde,jFo,DFo,Pq,GFo,OFo,VFo,Wu,xde,XFo,zFo,Bq,QFo,WFo,HFo,Hu,$de,UFo,JFo,Iq,YFo,KFo,ZFo,Uu,kde,eTo,oTo,Nq,rTo,tTo,aTo,Ju,Sde,nTo,sTo,qq,lTo,iTo,dTo,Yu,Rde,cTo,mTo,jq,fTo,gTo,hTo,Ku,Pde,uTo,pTo,Dq,_To,bTo,vTo,Zu,Bde,FTo,TTo,Gq,MTo,ETo,CTo,ep,Ide,wTo,ATo,Oq,LTo,yTo,xTo,op,Nde,$To,kTo,Vq,STo,RTo,PTo,rp,qde,BTo,ITo,Xq,NTo,qTo,jTo,tp,jde,DTo,GTo,zq,OTo,VTo,XTo,ap,Dde,zTo,QTo,Qq,WTo,HTo,UTo,np,Gde,JTo,YTo,Wq,KTo,ZTo,eMo,sp,Ode,oMo,rMo,Hq,tMo,aMo,nMo,lp,Vde,sMo,lMo,Uq,iMo,dMo,cMo,ip,Xde,mMo,fMo,Jq,gMo,hMo,uMo,dp,zde,pMo,_Mo,Yq,bMo,vMo,FMo,cp,Qde,TMo,MMo,Kq,EMo,CMo,wMo,mp,Wde,AMo,LMo,Zq,yMo,xMo,$Mo,fp,Hde,kMo,SMo,ej,RMo,PMo,BMo,gp,Ude,IMo,NMo,oj,qMo,jMo,DMo,hp,Jde,GMo,OMo,rj,VMo,XMo,zMo,up,Yde,QMo,WMo,tj,HMo,UMo,JMo,pp,Kde,YMo,KMo,aj,ZMo,e4o,o4o,zs,Zde,r4o,t4o,nj,a4o,n4o,sj,s4o,l4o,i4o,_p,ece,d4o,c4o,lj,m4o,f4o,g4o,bp,oce,h4o,u4o,ij,p4o,_4o,b4o,vp,rce,v4o,F4o,dj,T4o,M4o,E4o,Fp,tce,C4o,w4o,cj,A4o,L4o,y4o,Tp,ace,x4o,$4o,mj,k4o,S4o,R4o,Mp,nce,P4o,B4o,fj,I4o,N4o,q4o,Ep,sce,j4o,D4o,gj,G4o,O4o,V4o,Cp,lce,X4o,z4o,hj,Q4o,W4o,H4o,wp,ice,U4o,J4o,uj,Y4o,K4o,Z4o,Ap,dce,eEo,oEo,pj,rEo,tEo,aEo,Lp,cce,nEo,sEo,_j,lEo,iEo,dEo,yp,mce,cEo,mEo,bj,fEo,gEo,hEo,xp,fce,uEo,pEo,vj,_Eo,bEo,vEo,$p,gce,FEo,TEo,Fj,MEo,EEo,CEo,kp,hce,wEo,AEo,Tj,LEo,yEo,xEo,Sp,uce,$Eo,kEo,Mj,SEo,REo,PEo,Rp,pce,BEo,IEo,Ej,NEo,qEo,jEo,Pp,_ce,DEo,GEo,Cj,OEo,VEo,XEo,Bp,bce,zEo,QEo,wj,WEo,HEo,UEo,Ip,vce,JEo,YEo,Aj,KEo,ZEo,eCo,Np,Fce,oCo,rCo,Lj,tCo,aCo,nCo,qp,Tce,sCo,lCo,yj,iCo,dCo,cCo,jp,Mce,mCo,fCo,xj,gCo,hCo,uCo,Dp,Ece,pCo,_Co,$j,bCo,vCo,FCo,Gp,Cce,TCo,MCo,kj,ECo,CCo,wCo,Op,wce,ACo,LCo,Sj,yCo,xCo,$Co,Vp,Ace,kCo,SCo,Rj,RCo,PCo,BCo,Xp,Lce,ICo,NCo,Pj,qCo,jCo,DCo,zp,yce,GCo,OCo,Bj,VCo,XCo,zCo,Qp,xce,QCo,WCo,Ij,HCo,UCo,JCo,Wp,$ce,YCo,KCo,Nj,ZCo,e3o,o3o,Hp,kce,r3o,t3o,qj,a3o,n3o,s3o,Up,Sce,l3o,i3o,jj,d3o,c3o,m3o,Jp,Rce,f3o,g3o,Dj,h3o,u3o,p3o,Yp,Pce,_3o,b3o,Gj,v3o,F3o,T3o,Kp,Bce,M3o,E3o,Oj,C3o,w3o,A3o,Zp,Ice,L3o,y3o,Vj,x3o,$3o,k3o,e_,Nce,S3o,R3o,Xj,P3o,B3o,I3o,o_,qce,N3o,q3o,zj,j3o,D3o,G3o,r_,jce,O3o,V3o,Qj,X3o,z3o,Q3o,t_,Dce,W3o,H3o,Wj,U3o,J3o,Y3o,a_,Gce,K3o,Z3o,Hj,e5o,o5o,r5o,n_,Oce,t5o,a5o,Uj,n5o,s5o,l5o,s_,Vce,i5o,d5o,Jj,c5o,m5o,f5o,l_,Xce,g5o,h5o,Yj,u5o,p5o,_5o,i_,zce,b5o,v5o,Kj,F5o,T5o,M5o,d_,Qce,E5o,C5o,Zj,w5o,A5o,L5o,c_,Wce,y5o,x5o,eD,$5o,k5o,S5o,m_,Hce,R5o,P5o,oD,B5o,I5o,N5o,f_,Uce,q5o,j5o,rD,D5o,G5o,O5o,g_,Jce,V5o,X5o,tD,z5o,Q5o,W5o,h_,Yce,H5o,U5o,aD,J5o,Y5o,K5o,u_,Kce,Z5o,e0o,nD,o0o,r0o,t0o,p_,Zce,a0o,n0o,sD,s0o,l0o,i0o,__,eme,d0o,c0o,lD,m0o,f0o,g0o,b_,ome,h0o,u0o,iD,p0o,_0o,b0o,v_,rme,v0o,F0o,dD,T0o,M0o,E0o,F_,tme,C0o,w0o,cD,A0o,L0o,y0o,T_,ame,x0o,$0o,mD,k0o,S0o,R0o,M_,nme,P0o,B0o,fD,I0o,N0o,q0o,E_,sme,j0o,D0o,gD,G0o,O0o,V0o,C_,lme,X0o,z0o,hD,Q0o,W0o,H0o,w_,ime,U0o,J0o,uD,Y0o,K0o,Z0o,A_,dme,ewo,owo,pD,rwo,two,awo,L_,cme,nwo,swo,_D,lwo,iwo,dwo,y_,mme,cwo,mwo,bD,fwo,gwo,hwo,x_,fme,uwo,pwo,vD,_wo,bwo,vwo,$_,gme,Fwo,Two,FD,Mwo,Ewo,Cwo,k_,hme,wwo,Awo,TD,Lwo,ywo,xwo,S_,ume,$wo,kwo,MD,Swo,Rwo,Pwo,R_,pme,Bwo,Iwo,ED,Nwo,qwo,jwo,P_,_me,Dwo,Gwo,CD,Owo,Vwo,Xwo,B_,bme,zwo,Qwo,wD,Wwo,Hwo,Uwo,I_,vme,Jwo,Ywo,AD,Kwo,Zwo,eAo,N_,oAo,Fme,rAo,tAo,Tme,aAo,nAo,q_,QOe,Gi,j_,Mme,_y,sAo,Eme,lAo,WOe,$o,by,iAo,Oi,dAo,LD,cAo,mAo,yD,fAo,gAo,hAo,vy,uAo,Cme,pAo,_Ao,bAo,lt,Fy,vAo,wme,FAo,TAo,Vi,MAo,Ame,EAo,CAo,xD,wAo,AAo,LAo,D_,yAo,Ye,Ty,xAo,Lme,$Ao,kAo,Ba,SAo,yme,RAo,PAo,xme,BAo,IAo,$me,NAo,qAo,jAo,G,G_,kme,DAo,GAo,$D,OAo,VAo,XAo,O_,Sme,zAo,QAo,kD,WAo,HAo,UAo,V_,Rme,JAo,YAo,SD,KAo,ZAo,e6o,X_,Pme,o6o,r6o,RD,t6o,a6o,n6o,z_,Bme,s6o,l6o,PD,i6o,d6o,c6o,Q_,Ime,m6o,f6o,BD,g6o,h6o,u6o,W_,Nme,p6o,_6o,ID,b6o,v6o,F6o,H_,qme,T6o,M6o,ND,E6o,C6o,w6o,U_,jme,A6o,L6o,qD,y6o,x6o,$6o,J_,Dme,k6o,S6o,jD,R6o,P6o,B6o,Y_,Gme,I6o,N6o,DD,q6o,j6o,D6o,K_,Ome,G6o,O6o,GD,V6o,X6o,z6o,Z_,Vme,Q6o,W6o,OD,H6o,U6o,J6o,e2,Xme,Y6o,K6o,VD,Z6o,eLo,oLo,o2,zme,rLo,tLo,XD,aLo,nLo,sLo,r2,Qme,lLo,iLo,zD,dLo,cLo,mLo,t2,Wme,fLo,gLo,QD,hLo,uLo,pLo,a2,Hme,_Lo,bLo,WD,vLo,FLo,TLo,n2,Ume,MLo,ELo,HD,CLo,wLo,ALo,s2,Jme,LLo,yLo,UD,xLo,$Lo,kLo,l2,Yme,SLo,RLo,JD,PLo,BLo,ILo,i2,Kme,NLo,qLo,YD,jLo,DLo,GLo,d2,Zme,OLo,VLo,KD,XLo,zLo,QLo,c2,efe,WLo,HLo,ZD,ULo,JLo,YLo,m2,ofe,KLo,ZLo,eG,e7o,o7o,r7o,f2,rfe,t7o,a7o,oG,n7o,s7o,l7o,g2,tfe,i7o,d7o,rG,c7o,m7o,f7o,h2,afe,g7o,h7o,tG,u7o,p7o,_7o,u2,nfe,b7o,v7o,aG,F7o,T7o,M7o,p2,sfe,E7o,C7o,nG,w7o,A7o,L7o,_2,lfe,y7o,x7o,sG,$7o,k7o,S7o,b2,ife,R7o,P7o,lG,B7o,I7o,N7o,v2,dfe,q7o,j7o,iG,D7o,G7o,O7o,F2,cfe,V7o,X7o,dG,z7o,Q7o,W7o,T2,mfe,H7o,U7o,cG,J7o,Y7o,K7o,M2,ffe,Z7o,eyo,mG,oyo,ryo,tyo,E2,gfe,ayo,nyo,fG,syo,lyo,iyo,C2,hfe,dyo,cyo,gG,myo,fyo,gyo,w2,ufe,hyo,uyo,hG,pyo,_yo,byo,A2,pfe,vyo,Fyo,uG,Tyo,Myo,Eyo,L2,_fe,Cyo,wyo,pG,Ayo,Lyo,yyo,y2,bfe,xyo,$yo,_G,kyo,Syo,Ryo,x2,vfe,Pyo,Byo,bG,Iyo,Nyo,qyo,$2,Ffe,jyo,Dyo,vG,Gyo,Oyo,Vyo,k2,Xyo,Tfe,zyo,Qyo,Mfe,Wyo,Hyo,S2,HOe,Xi,R2,Efe,My,Uyo,Cfe,Jyo,UOe,ko,Ey,Yyo,zi,Kyo,FG,Zyo,e8o,TG,o8o,r8o,t8o,Cy,a8o,wfe,n8o,s8o,l8o,it,wy,i8o,Afe,d8o,c8o,Qi,m8o,Lfe,f8o,g8o,MG,h8o,u8o,p8o,P2,_8o,Ke,Ay,b8o,yfe,v8o,F8o,Ia,T8o,xfe,M8o,E8o,$fe,C8o,w8o,kfe,A8o,L8o,y8o,z,B2,Sfe,x8o,$8o,EG,k8o,S8o,R8o,I2,Rfe,P8o,B8o,CG,I8o,N8o,q8o,N2,Pfe,j8o,D8o,wG,G8o,O8o,V8o,q2,Bfe,X8o,z8o,AG,Q8o,W8o,H8o,j2,Ife,U8o,J8o,LG,Y8o,K8o,Z8o,D2,Nfe,e9o,o9o,yG,r9o,t9o,a9o,G2,qfe,n9o,s9o,xG,l9o,i9o,d9o,O2,jfe,c9o,m9o,$G,f9o,g9o,h9o,V2,Dfe,u9o,p9o,kG,_9o,b9o,v9o,X2,Gfe,F9o,T9o,SG,M9o,E9o,C9o,z2,Ofe,w9o,A9o,RG,L9o,y9o,x9o,Q2,Vfe,$9o,k9o,PG,S9o,R9o,P9o,W2,Xfe,B9o,I9o,BG,N9o,q9o,j9o,H2,zfe,D9o,G9o,IG,O9o,V9o,X9o,U2,Qfe,z9o,Q9o,NG,W9o,H9o,U9o,J2,Wfe,J9o,Y9o,qG,K9o,Z9o,exo,Y2,Hfe,oxo,rxo,jG,txo,axo,nxo,K2,Ufe,sxo,lxo,DG,ixo,dxo,cxo,Z2,Jfe,mxo,fxo,GG,gxo,hxo,uxo,eb,Yfe,pxo,_xo,OG,bxo,vxo,Fxo,ob,Kfe,Txo,Mxo,VG,Exo,Cxo,wxo,rb,Zfe,Axo,Lxo,XG,yxo,xxo,$xo,tb,ege,kxo,Sxo,zG,Rxo,Pxo,Bxo,ab,oge,Ixo,Nxo,QG,qxo,jxo,Dxo,nb,rge,Gxo,Oxo,WG,Vxo,Xxo,zxo,sb,tge,Qxo,Wxo,HG,Hxo,Uxo,Jxo,lb,age,Yxo,Kxo,UG,Zxo,e$o,o$o,ib,nge,r$o,t$o,JG,a$o,n$o,s$o,db,sge,l$o,i$o,YG,d$o,c$o,m$o,cb,lge,f$o,g$o,KG,h$o,u$o,p$o,mb,ige,_$o,b$o,ZG,v$o,F$o,T$o,fb,dge,M$o,E$o,eO,C$o,w$o,A$o,gb,cge,L$o,y$o,oO,x$o,$$o,k$o,hb,mge,S$o,R$o,rO,P$o,B$o,I$o,ub,fge,N$o,q$o,tO,j$o,D$o,G$o,pb,gge,O$o,V$o,aO,X$o,z$o,Q$o,_b,hge,W$o,H$o,nO,U$o,J$o,Y$o,bb,uge,K$o,Z$o,sO,eko,oko,rko,vb,pge,tko,ako,lO,nko,sko,lko,Fb,iko,_ge,dko,cko,bge,mko,fko,Tb,JOe,Wi,Mb,vge,Ly,gko,Fge,hko,YOe,So,yy,uko,Hi,pko,iO,_ko,bko,dO,vko,Fko,Tko,xy,Mko,Tge,Eko,Cko,wko,dt,$y,Ako,Mge,Lko,yko,Ui,xko,Ege,$ko,kko,cO,Sko,Rko,Pko,Eb,Bko,Ze,ky,Iko,Cge,Nko,qko,Na,jko,wge,Dko,Gko,Age,Oko,Vko,Lge,Xko,zko,Qko,W,Cb,yge,Wko,Hko,mO,Uko,Jko,Yko,wb,xge,Kko,Zko,fO,eSo,oSo,rSo,Ab,$ge,tSo,aSo,gO,nSo,sSo,lSo,Lb,kge,iSo,dSo,hO,cSo,mSo,fSo,yb,Sge,gSo,hSo,uO,uSo,pSo,_So,xb,Rge,bSo,vSo,pO,FSo,TSo,MSo,$b,Pge,ESo,CSo,_O,wSo,ASo,LSo,kb,Bge,ySo,xSo,bO,$So,kSo,SSo,Sb,Ige,RSo,PSo,vO,BSo,ISo,NSo,Rb,Nge,qSo,jSo,FO,DSo,GSo,OSo,Pb,qge,VSo,XSo,TO,zSo,QSo,WSo,Bb,jge,HSo,USo,MO,JSo,YSo,KSo,Ib,Dge,ZSo,eRo,EO,oRo,rRo,tRo,Nb,Gge,aRo,nRo,CO,sRo,lRo,iRo,qb,Oge,dRo,cRo,wO,mRo,fRo,gRo,jb,Vge,hRo,uRo,AO,pRo,_Ro,bRo,Db,Xge,vRo,FRo,LO,TRo,MRo,ERo,Gb,zge,CRo,wRo,yO,ARo,LRo,yRo,Ob,Qge,xRo,$Ro,xO,kRo,SRo,RRo,Vb,Wge,PRo,BRo,$O,IRo,NRo,qRo,Xb,Hge,jRo,DRo,kO,GRo,ORo,VRo,zb,Uge,XRo,zRo,SO,QRo,WRo,HRo,Qb,Jge,URo,JRo,RO,YRo,KRo,ZRo,Wb,Yge,ePo,oPo,PO,rPo,tPo,aPo,Hb,Kge,nPo,sPo,BO,lPo,iPo,dPo,Ub,Zge,cPo,mPo,IO,fPo,gPo,hPo,Jb,ehe,uPo,pPo,NO,_Po,bPo,vPo,Yb,ohe,FPo,TPo,qO,MPo,EPo,CPo,Kb,rhe,wPo,APo,jO,LPo,yPo,xPo,Zb,the,$Po,kPo,DO,SPo,RPo,PPo,ev,ahe,BPo,IPo,GO,NPo,qPo,jPo,ov,nhe,DPo,GPo,OO,OPo,VPo,XPo,rv,she,zPo,QPo,lhe,WPo,HPo,UPo,tv,ihe,JPo,YPo,VO,KPo,ZPo,eBo,av,dhe,oBo,rBo,XO,tBo,aBo,nBo,nv,che,sBo,lBo,zO,iBo,dBo,cBo,sv,mhe,mBo,fBo,QO,gBo,hBo,uBo,lv,pBo,fhe,_Bo,bBo,ghe,vBo,FBo,iv,KOe,Ji,dv,hhe,Sy,TBo,uhe,MBo,ZOe,Ro,Ry,EBo,Yi,CBo,WO,wBo,ABo,HO,LBo,yBo,xBo,Py,$Bo,phe,kBo,SBo,RBo,ct,By,PBo,_he,BBo,IBo,Ki,NBo,bhe,qBo,jBo,UO,DBo,GBo,OBo,cv,VBo,eo,Iy,XBo,vhe,zBo,QBo,qa,WBo,Fhe,HBo,UBo,The,JBo,YBo,Mhe,KBo,ZBo,eIo,ue,mv,Ehe,oIo,rIo,JO,tIo,aIo,nIo,fv,Che,sIo,lIo,YO,iIo,dIo,cIo,gv,whe,mIo,fIo,KO,gIo,hIo,uIo,hv,Ahe,pIo,_Io,ZO,bIo,vIo,FIo,uv,Lhe,TIo,MIo,eV,EIo,CIo,wIo,pv,yhe,AIo,LIo,oV,yIo,xIo,$Io,_v,xhe,kIo,SIo,rV,RIo,PIo,BIo,bv,$he,IIo,NIo,tV,qIo,jIo,DIo,vv,khe,GIo,OIo,aV,VIo,XIo,zIo,Fv,She,QIo,WIo,nV,HIo,UIo,JIo,Tv,Rhe,YIo,KIo,sV,ZIo,eNo,oNo,Mv,Phe,rNo,tNo,lV,aNo,nNo,sNo,Ev,Bhe,lNo,iNo,iV,dNo,cNo,mNo,Cv,Ihe,fNo,gNo,dV,hNo,uNo,pNo,wv,Nhe,_No,bNo,cV,vNo,FNo,TNo,Av,qhe,MNo,ENo,mV,CNo,wNo,ANo,Lv,jhe,LNo,yNo,fV,xNo,$No,kNo,yv,SNo,Dhe,RNo,PNo,Ghe,BNo,INo,xv,eVe,Zi,$v,Ohe,Ny,NNo,Vhe,qNo,oVe,Po,qy,jNo,ed,DNo,gV,GNo,ONo,hV,VNo,XNo,zNo,jy,QNo,Xhe,WNo,HNo,UNo,mt,Dy,JNo,zhe,YNo,KNo,od,ZNo,Qhe,eqo,oqo,uV,rqo,tqo,aqo,kv,nqo,oo,Gy,sqo,Whe,lqo,iqo,ja,dqo,Hhe,cqo,mqo,Uhe,fqo,gqo,Jhe,hqo,uqo,pqo,N,Sv,Yhe,_qo,bqo,pV,vqo,Fqo,Tqo,Rv,Khe,Mqo,Eqo,_V,Cqo,wqo,Aqo,Pv,Zhe,Lqo,yqo,bV,xqo,$qo,kqo,Bv,eue,Sqo,Rqo,vV,Pqo,Bqo,Iqo,Iv,oue,Nqo,qqo,FV,jqo,Dqo,Gqo,Nv,rue,Oqo,Vqo,TV,Xqo,zqo,Qqo,qv,tue,Wqo,Hqo,MV,Uqo,Jqo,Yqo,jv,aue,Kqo,Zqo,EV,ejo,ojo,rjo,Dv,nue,tjo,ajo,CV,njo,sjo,ljo,Gv,sue,ijo,djo,wV,cjo,mjo,fjo,Ov,lue,gjo,hjo,AV,ujo,pjo,_jo,Vv,iue,bjo,vjo,LV,Fjo,Tjo,Mjo,Xv,due,Ejo,Cjo,yV,wjo,Ajo,Ljo,zv,cue,yjo,xjo,xV,$jo,kjo,Sjo,Qv,mue,Rjo,Pjo,$V,Bjo,Ijo,Njo,Wv,fue,qjo,jjo,kV,Djo,Gjo,Ojo,Hv,gue,Vjo,Xjo,SV,zjo,Qjo,Wjo,Uv,hue,Hjo,Ujo,RV,Jjo,Yjo,Kjo,Jv,uue,Zjo,eDo,PV,oDo,rDo,tDo,Yv,pue,aDo,nDo,BV,sDo,lDo,iDo,Kv,_ue,dDo,cDo,IV,mDo,fDo,gDo,Zv,bue,hDo,uDo,NV,pDo,_Do,bDo,e1,vue,vDo,FDo,qV,TDo,MDo,EDo,o1,Fue,CDo,wDo,jV,ADo,LDo,yDo,r1,Tue,xDo,$Do,DV,kDo,SDo,RDo,t1,Mue,PDo,BDo,GV,IDo,NDo,qDo,a1,Eue,jDo,DDo,OV,GDo,ODo,VDo,n1,Cue,XDo,zDo,VV,QDo,WDo,HDo,s1,wue,UDo,JDo,XV,YDo,KDo,ZDo,l1,Aue,eGo,oGo,zV,rGo,tGo,aGo,i1,Lue,nGo,sGo,QV,lGo,iGo,dGo,d1,yue,cGo,mGo,WV,fGo,gGo,hGo,c1,xue,uGo,pGo,HV,_Go,bGo,vGo,m1,$ue,FGo,TGo,UV,MGo,EGo,CGo,f1,kue,wGo,AGo,JV,LGo,yGo,xGo,g1,Sue,$Go,kGo,YV,SGo,RGo,PGo,h1,Rue,BGo,IGo,KV,NGo,qGo,jGo,u1,Pue,DGo,GGo,ZV,OGo,VGo,XGo,p1,Bue,zGo,QGo,eX,WGo,HGo,UGo,_1,Iue,JGo,YGo,oX,KGo,ZGo,eOo,b1,Nue,oOo,rOo,rX,tOo,aOo,nOo,v1,que,sOo,lOo,tX,iOo,dOo,cOo,F1,jue,mOo,fOo,aX,gOo,hOo,uOo,T1,Due,pOo,_Oo,nX,bOo,vOo,FOo,M1,Gue,TOo,MOo,sX,EOo,COo,wOo,E1,Oue,AOo,LOo,lX,yOo,xOo,$Oo,C1,Vue,kOo,SOo,iX,ROo,POo,BOo,w1,Xue,IOo,NOo,dX,qOo,jOo,DOo,A1,zue,GOo,OOo,cX,VOo,XOo,zOo,L1,QOo,Que,WOo,HOo,Wue,UOo,JOo,y1,rVe,rd,x1,Hue,Oy,YOo,Uue,KOo,tVe,Bo,Vy,ZOo,td,eVo,mX,oVo,rVo,fX,tVo,aVo,nVo,Xy,sVo,Jue,lVo,iVo,dVo,ft,zy,cVo,Yue,mVo,fVo,ad,gVo,Kue,hVo,uVo,gX,pVo,_Vo,bVo,$1,vVo,ro,Qy,FVo,Zue,TVo,MVo,Da,EVo,epe,CVo,wVo,ope,AVo,LVo,rpe,yVo,xVo,$Vo,Z,k1,tpe,kVo,SVo,hX,RVo,PVo,BVo,S1,ape,IVo,NVo,uX,qVo,jVo,DVo,R1,npe,GVo,OVo,pX,VVo,XVo,zVo,P1,spe,QVo,WVo,_X,HVo,UVo,JVo,B1,lpe,YVo,KVo,bX,ZVo,eXo,oXo,I1,ipe,rXo,tXo,vX,aXo,nXo,sXo,N1,dpe,lXo,iXo,FX,dXo,cXo,mXo,q1,cpe,fXo,gXo,TX,hXo,uXo,pXo,j1,mpe,_Xo,bXo,MX,vXo,FXo,TXo,D1,fpe,MXo,EXo,EX,CXo,wXo,AXo,G1,gpe,LXo,yXo,CX,xXo,$Xo,kXo,O1,hpe,SXo,RXo,wX,PXo,BXo,IXo,V1,upe,NXo,qXo,AX,jXo,DXo,GXo,X1,ppe,OXo,VXo,LX,XXo,zXo,QXo,z1,_pe,WXo,HXo,yX,UXo,JXo,YXo,Q1,bpe,KXo,ZXo,xX,ezo,ozo,rzo,W1,vpe,tzo,azo,$X,nzo,szo,lzo,H1,Fpe,izo,dzo,kX,czo,mzo,fzo,U1,Tpe,gzo,hzo,SX,uzo,pzo,_zo,J1,Mpe,bzo,vzo,RX,Fzo,Tzo,Mzo,Y1,Epe,Ezo,Czo,PX,wzo,Azo,Lzo,K1,Cpe,yzo,xzo,BX,$zo,kzo,Szo,Z1,wpe,Rzo,Pzo,IX,Bzo,Izo,Nzo,eF,Ape,qzo,jzo,NX,Dzo,Gzo,Ozo,oF,Lpe,Vzo,Xzo,qX,zzo,Qzo,Wzo,rF,ype,Hzo,Uzo,jX,Jzo,Yzo,Kzo,tF,xpe,Zzo,eQo,DX,oQo,rQo,tQo,aF,$pe,aQo,nQo,GX,sQo,lQo,iQo,nF,kpe,dQo,cQo,OX,mQo,fQo,gQo,sF,Spe,hQo,uQo,VX,pQo,_Qo,bQo,lF,vQo,Rpe,FQo,TQo,Ppe,MQo,EQo,iF,aVe,nd,dF,Bpe,Wy,CQo,Ipe,wQo,nVe,Io,Hy,AQo,sd,LQo,XX,yQo,xQo,zX,$Qo,kQo,SQo,Uy,RQo,Npe,PQo,BQo,IQo,gt,Jy,NQo,qpe,qQo,jQo,ld,DQo,jpe,GQo,OQo,QX,VQo,XQo,zQo,cF,QQo,to,Yy,WQo,Dpe,HQo,UQo,Ga,JQo,Gpe,YQo,KQo,Ope,ZQo,eWo,Vpe,oWo,rWo,tWo,No,mF,Xpe,aWo,nWo,WX,sWo,lWo,iWo,fF,zpe,dWo,cWo,HX,mWo,fWo,gWo,gF,Qpe,hWo,uWo,UX,pWo,_Wo,bWo,hF,Wpe,vWo,FWo,JX,TWo,MWo,EWo,uF,Hpe,CWo,wWo,YX,AWo,LWo,yWo,pF,Upe,xWo,$Wo,KX,kWo,SWo,RWo,_F,PWo,Jpe,BWo,IWo,Ype,NWo,qWo,bF,sVe,id,vF,Kpe,Ky,jWo,Zpe,DWo,lVe,qo,Zy,GWo,dd,OWo,ZX,VWo,XWo,ez,zWo,QWo,WWo,e8,HWo,e_e,UWo,JWo,YWo,ht,o8,KWo,o_e,ZWo,eHo,cd,oHo,r_e,rHo,tHo,oz,aHo,nHo,sHo,FF,lHo,ao,r8,iHo,t_e,dHo,cHo,Oa,mHo,a_e,fHo,gHo,n_e,hHo,uHo,s_e,pHo,_Ho,bHo,H,TF,l_e,vHo,FHo,rz,THo,MHo,EHo,MF,i_e,CHo,wHo,tz,AHo,LHo,yHo,EF,d_e,xHo,$Ho,az,kHo,SHo,RHo,CF,c_e,PHo,BHo,nz,IHo,NHo,qHo,wF,m_e,jHo,DHo,sz,GHo,OHo,VHo,AF,f_e,XHo,zHo,lz,QHo,WHo,HHo,LF,g_e,UHo,JHo,iz,YHo,KHo,ZHo,yF,h_e,eUo,oUo,dz,rUo,tUo,aUo,xF,u_e,nUo,sUo,cz,lUo,iUo,dUo,$F,p_e,cUo,mUo,mz,fUo,gUo,hUo,kF,__e,uUo,pUo,fz,_Uo,bUo,vUo,SF,b_e,FUo,TUo,gz,MUo,EUo,CUo,RF,v_e,wUo,AUo,hz,LUo,yUo,xUo,PF,F_e,$Uo,kUo,uz,SUo,RUo,PUo,BF,T_e,BUo,IUo,pz,NUo,qUo,jUo,IF,M_e,DUo,GUo,_z,OUo,VUo,XUo,NF,E_e,zUo,QUo,bz,WUo,HUo,UUo,qF,C_e,JUo,YUo,vz,KUo,ZUo,eJo,jF,w_e,oJo,rJo,Fz,tJo,aJo,nJo,DF,A_e,sJo,lJo,Tz,iJo,dJo,cJo,GF,L_e,mJo,fJo,Mz,gJo,hJo,uJo,OF,y_e,pJo,_Jo,Ez,bJo,vJo,FJo,VF,x_e,TJo,MJo,Cz,EJo,CJo,wJo,XF,$_e,AJo,LJo,wz,yJo,xJo,$Jo,zF,k_e,kJo,SJo,Az,RJo,PJo,BJo,QF,S_e,IJo,NJo,Lz,qJo,jJo,DJo,WF,R_e,GJo,OJo,yz,VJo,XJo,zJo,HF,P_e,QJo,WJo,xz,HJo,UJo,JJo,UF,B_e,YJo,KJo,$z,ZJo,eYo,oYo,JF,I_e,rYo,tYo,kz,aYo,nYo,sYo,YF,N_e,lYo,iYo,Sz,dYo,cYo,mYo,KF,q_e,fYo,gYo,Rz,hYo,uYo,pYo,ZF,j_e,_Yo,bYo,Pz,vYo,FYo,TYo,eT,D_e,MYo,EYo,Bz,CYo,wYo,AYo,oT,G_e,LYo,yYo,Iz,xYo,$Yo,kYo,rT,O_e,SYo,RYo,Nz,PYo,BYo,IYo,tT,NYo,V_e,qYo,jYo,X_e,DYo,GYo,aT,iVe,md,nT,z_e,t8,OYo,Q_e,VYo,dVe,jo,a8,XYo,fd,zYo,qz,QYo,WYo,jz,HYo,UYo,JYo,n8,YYo,W_e,KYo,ZYo,eKo,ut,s8,oKo,H_e,rKo,tKo,gd,aKo,U_e,nKo,sKo,Dz,lKo,iKo,dKo,sT,cKo,no,l8,mKo,J_e,fKo,gKo,Va,hKo,Y_e,uKo,pKo,K_e,_Ko,bKo,Z_e,vKo,FKo,TKo,V,lT,e2e,MKo,EKo,Gz,CKo,wKo,AKo,iT,o2e,LKo,yKo,Oz,xKo,$Ko,kKo,dT,r2e,SKo,RKo,Vz,PKo,BKo,IKo,cT,t2e,NKo,qKo,Xz,jKo,DKo,GKo,mT,a2e,OKo,VKo,zz,XKo,zKo,QKo,fT,n2e,WKo,HKo,Qz,UKo,JKo,YKo,gT,s2e,KKo,ZKo,Wz,eZo,oZo,rZo,hT,l2e,tZo,aZo,Hz,nZo,sZo,lZo,uT,i2e,iZo,dZo,Uz,cZo,mZo,fZo,pT,d2e,gZo,hZo,Jz,uZo,pZo,_Zo,_T,c2e,bZo,vZo,Yz,FZo,TZo,MZo,bT,m2e,EZo,CZo,Kz,wZo,AZo,LZo,vT,f2e,yZo,xZo,Zz,$Zo,kZo,SZo,FT,g2e,RZo,PZo,eQ,BZo,IZo,NZo,TT,h2e,qZo,jZo,oQ,DZo,GZo,OZo,MT,u2e,VZo,XZo,rQ,zZo,QZo,WZo,ET,p2e,HZo,UZo,tQ,JZo,YZo,KZo,CT,_2e,ZZo,eer,aQ,oer,rer,ter,wT,b2e,aer,ner,nQ,ser,ler,ier,AT,v2e,der,cer,sQ,mer,fer,ger,LT,F2e,her,uer,lQ,per,_er,ber,yT,T2e,ver,Fer,iQ,Ter,Mer,Eer,xT,M2e,Cer,wer,dQ,Aer,Ler,yer,$T,E2e,xer,$er,cQ,ker,Ser,Rer,kT,C2e,Per,Ber,mQ,Ier,Ner,qer,ST,w2e,jer,Der,fQ,Ger,Oer,Ver,RT,A2e,Xer,zer,gQ,Qer,Wer,Her,PT,L2e,Uer,Jer,hQ,Yer,Ker,Zer,BT,y2e,eor,oor,uQ,ror,tor,aor,IT,x2e,nor,sor,pQ,lor,ior,dor,NT,$2e,cor,mor,_Q,gor,hor,uor,qT,k2e,por,_or,bQ,bor,vor,For,jT,S2e,Tor,Mor,vQ,Eor,Cor,wor,DT,R2e,Aor,Lor,FQ,yor,xor,$or,GT,P2e,kor,Sor,TQ,Ror,Por,Bor,OT,B2e,Ior,Nor,MQ,qor,jor,Dor,VT,I2e,Gor,Oor,EQ,Vor,Xor,zor,XT,N2e,Qor,Wor,CQ,Hor,Uor,Jor,zT,q2e,Yor,Kor,wQ,Zor,err,orr,QT,j2e,rrr,trr,AQ,arr,nrr,srr,WT,D2e,lrr,irr,LQ,drr,crr,mrr,HT,frr,G2e,grr,hrr,O2e,urr,prr,UT,cVe,hd,JT,V2e,i8,_rr,X2e,brr,mVe,Do,d8,vrr,ud,Frr,yQ,Trr,Mrr,xQ,Err,Crr,wrr,c8,Arr,z2e,Lrr,yrr,xrr,pt,m8,$rr,Q2e,krr,Srr,pd,Rrr,W2e,Prr,Brr,$Q,Irr,Nrr,qrr,YT,jrr,so,f8,Drr,H2e,Grr,Orr,Xa,Vrr,U2e,Xrr,zrr,J2e,Qrr,Wrr,Y2e,Hrr,Urr,Jrr,K2e,KT,Z2e,Yrr,Krr,kQ,Zrr,etr,otr,ZT,rtr,ebe,ttr,atr,obe,ntr,str,eM,fVe,_d,oM,rbe,g8,ltr,tbe,itr,gVe,Go,h8,dtr,bd,ctr,SQ,mtr,ftr,RQ,gtr,htr,utr,u8,ptr,abe,_tr,btr,vtr,_t,p8,Ftr,nbe,Ttr,Mtr,vd,Etr,sbe,Ctr,wtr,PQ,Atr,Ltr,ytr,rM,xtr,lo,_8,$tr,lbe,ktr,Str,za,Rtr,ibe,Ptr,Btr,dbe,Itr,Ntr,cbe,qtr,jtr,Dtr,Fe,tM,mbe,Gtr,Otr,BQ,Vtr,Xtr,ztr,aM,fbe,Qtr,Wtr,IQ,Htr,Utr,Jtr,nM,gbe,Ytr,Ktr,NQ,Ztr,ear,oar,sM,hbe,rar,tar,qQ,aar,nar,sar,Qs,ube,lar,iar,jQ,dar,car,DQ,mar,far,gar,lM,pbe,har,uar,GQ,par,_ar,bar,Ws,_be,Far,Tar,OQ,Mar,Ear,VQ,Car,war,Aar,bt,bbe,Lar,yar,XQ,xar,$ar,zQ,kar,Sar,QQ,Rar,Par,Bar,iM,vbe,Iar,Nar,WQ,qar,jar,Dar,dM,Fbe,Gar,Oar,HQ,Var,Xar,zar,cM,Tbe,Qar,War,UQ,Har,Uar,Jar,mM,Mbe,Yar,Kar,JQ,Zar,enr,onr,fM,Ebe,rnr,tnr,YQ,anr,nnr,snr,gM,Cbe,lnr,inr,KQ,dnr,cnr,mnr,hM,wbe,fnr,gnr,ZQ,hnr,unr,pnr,uM,_nr,Abe,bnr,vnr,Lbe,Fnr,Tnr,pM,hVe,Fd,_M,ybe,b8,Mnr,xbe,Enr,uVe,Oo,v8,Cnr,Td,wnr,eW,Anr,Lnr,oW,ynr,xnr,$nr,F8,knr,$be,Snr,Rnr,Pnr,vt,T8,Bnr,kbe,Inr,Nnr,Md,qnr,Sbe,jnr,Dnr,rW,Gnr,Onr,Vnr,bM,Xnr,io,M8,znr,Rbe,Qnr,Wnr,Qa,Hnr,Pbe,Unr,Jnr,Bbe,Ynr,Knr,Ibe,Znr,esr,osr,Nbe,vM,qbe,rsr,tsr,tW,asr,nsr,ssr,FM,lsr,jbe,isr,dsr,Dbe,csr,msr,TM,pVe,Ed,MM,Gbe,E8,fsr,Obe,gsr,_Ve,Vo,C8,hsr,Cd,usr,aW,psr,_sr,nW,bsr,vsr,Fsr,w8,Tsr,Vbe,Msr,Esr,Csr,Ft,A8,wsr,Xbe,Asr,Lsr,wd,ysr,zbe,xsr,$sr,sW,ksr,Ssr,Rsr,EM,Psr,co,L8,Bsr,Qbe,Isr,Nsr,Wa,qsr,Wbe,jsr,Dsr,Hbe,Gsr,Osr,Ube,Vsr,Xsr,zsr,Jbe,CM,Ybe,Qsr,Wsr,lW,Hsr,Usr,Jsr,wM,Ysr,Kbe,Ksr,Zsr,Zbe,elr,olr,AM,bVe,Ad,LM,eve,y8,rlr,ove,tlr,vVe,Xo,x8,alr,Ld,nlr,iW,slr,llr,dW,ilr,dlr,clr,$8,mlr,rve,flr,glr,hlr,Tt,k8,ulr,tve,plr,_lr,yd,blr,ave,vlr,Flr,cW,Tlr,Mlr,Elr,yM,Clr,mo,S8,wlr,nve,Alr,Llr,Ha,ylr,sve,xlr,$lr,lve,klr,Slr,ive,Rlr,Plr,Blr,Pe,xM,dve,Ilr,Nlr,mW,qlr,jlr,Dlr,$M,cve,Glr,Olr,fW,Vlr,Xlr,zlr,kM,mve,Qlr,Wlr,gW,Hlr,Ulr,Jlr,SM,fve,Ylr,Klr,hW,Zlr,eir,oir,RM,gve,rir,tir,uW,air,nir,sir,PM,hve,lir,iir,pW,dir,cir,mir,BM,uve,fir,gir,_W,hir,uir,pir,IM,pve,_ir,bir,bW,vir,Fir,Tir,NM,_ve,Mir,Eir,vW,Cir,wir,Air,qM,Lir,bve,yir,xir,vve,$ir,kir,jM,FVe,xd,DM,Fve,R8,Sir,Tve,Rir,TVe,zo,P8,Pir,$d,Bir,FW,Iir,Nir,TW,qir,jir,Dir,B8,Gir,Mve,Oir,Vir,Xir,Mt,I8,zir,Eve,Qir,Wir,kd,Hir,Cve,Uir,Jir,MW,Yir,Kir,Zir,GM,edr,fo,N8,odr,wve,rdr,tdr,Ua,adr,Ave,ndr,sdr,Lve,ldr,idr,yve,ddr,cdr,mdr,et,OM,xve,fdr,gdr,EW,hdr,udr,pdr,VM,$ve,_dr,bdr,CW,vdr,Fdr,Tdr,XM,kve,Mdr,Edr,wW,Cdr,wdr,Adr,zM,Sve,Ldr,ydr,AW,xdr,$dr,kdr,QM,Rve,Sdr,Rdr,LW,Pdr,Bdr,Idr,WM,Ndr,Pve,qdr,jdr,Bve,Ddr,Gdr,HM,MVe,Sd,UM,Ive,q8,Odr,Nve,Vdr,EVe,Qo,j8,Xdr,Rd,zdr,yW,Qdr,Wdr,xW,Hdr,Udr,Jdr,D8,Ydr,qve,Kdr,Zdr,ecr,Et,G8,ocr,jve,rcr,tcr,Pd,acr,Dve,ncr,scr,$W,lcr,icr,dcr,JM,ccr,go,O8,mcr,Gve,fcr,gcr,Ja,hcr,Ove,ucr,pcr,Vve,_cr,bcr,Xve,vcr,Fcr,Tcr,Le,YM,zve,Mcr,Ecr,kW,Ccr,wcr,Acr,KM,Qve,Lcr,ycr,SW,xcr,$cr,kcr,ZM,Wve,Scr,Rcr,RW,Pcr,Bcr,Icr,e4,Hve,Ncr,qcr,PW,jcr,Dcr,Gcr,o4,Uve,Ocr,Vcr,BW,Xcr,zcr,Qcr,r4,Jve,Wcr,Hcr,IW,Ucr,Jcr,Ycr,t4,Yve,Kcr,Zcr,NW,emr,omr,rmr,a4,Kve,tmr,amr,qW,nmr,smr,lmr,n4,Zve,imr,dmr,jW,cmr,mmr,fmr,s4,e1e,gmr,hmr,DW,umr,pmr,_mr,l4,bmr,o1e,vmr,Fmr,r1e,Tmr,Mmr,i4,CVe,Bd,d4,t1e,V8,Emr,a1e,Cmr,wVe,Wo,X8,wmr,Id,Amr,GW,Lmr,ymr,OW,xmr,$mr,kmr,z8,Smr,n1e,Rmr,Pmr,Bmr,Ct,Q8,Imr,s1e,Nmr,qmr,Nd,jmr,l1e,Dmr,Gmr,VW,Omr,Vmr,Xmr,c4,zmr,ho,W8,Qmr,i1e,Wmr,Hmr,Ya,Umr,d1e,Jmr,Ymr,c1e,Kmr,Zmr,m1e,efr,ofr,rfr,H8,m4,f1e,tfr,afr,XW,nfr,sfr,lfr,f4,g1e,ifr,dfr,zW,cfr,mfr,ffr,g4,gfr,h1e,hfr,ufr,u1e,pfr,_fr,h4,AVe,qd,u4,p1e,U8,bfr,_1e,vfr,LVe,Ho,J8,Ffr,jd,Tfr,QW,Mfr,Efr,WW,Cfr,wfr,Afr,Y8,Lfr,b1e,yfr,xfr,$fr,wt,K8,kfr,v1e,Sfr,Rfr,Dd,Pfr,F1e,Bfr,Ifr,HW,Nfr,qfr,jfr,p4,Dfr,uo,Z8,Gfr,T1e,Ofr,Vfr,Ka,Xfr,M1e,zfr,Qfr,E1e,Wfr,Hfr,C1e,Ufr,Jfr,Yfr,ot,_4,w1e,Kfr,Zfr,UW,egr,ogr,rgr,b4,A1e,tgr,agr,JW,ngr,sgr,lgr,v4,L1e,igr,dgr,YW,cgr,mgr,fgr,F4,y1e,ggr,hgr,KW,ugr,pgr,_gr,T4,x1e,bgr,vgr,ZW,Fgr,Tgr,Mgr,M4,Egr,$1e,Cgr,wgr,k1e,Agr,Lgr,E4,yVe,Gd,C4,S1e,e9,ygr,R1e,xgr,xVe,Uo,o9,$gr,Od,kgr,eH,Sgr,Rgr,oH,Pgr,Bgr,Igr,r9,Ngr,P1e,qgr,jgr,Dgr,At,t9,Ggr,B1e,Ogr,Vgr,Vd,Xgr,I1e,zgr,Qgr,rH,Wgr,Hgr,Ugr,w4,Jgr,po,a9,Ygr,N1e,Kgr,Zgr,Za,ehr,q1e,ohr,rhr,j1e,thr,ahr,D1e,nhr,shr,lhr,Xd,A4,G1e,ihr,dhr,tH,chr,mhr,fhr,L4,O1e,ghr,hhr,aH,uhr,phr,_hr,y4,V1e,bhr,vhr,nH,Fhr,Thr,Mhr,x4,Ehr,X1e,Chr,whr,z1e,Ahr,Lhr,$4,$Ve,zd,k4,Q1e,n9,yhr,W1e,xhr,kVe,Jo,s9,$hr,Qd,khr,sH,Shr,Rhr,lH,Phr,Bhr,Ihr,l9,Nhr,H1e,qhr,jhr,Dhr,Lt,i9,Ghr,U1e,Ohr,Vhr,Wd,Xhr,J1e,zhr,Qhr,iH,Whr,Hhr,Uhr,S4,Jhr,_o,d9,Yhr,Y1e,Khr,Zhr,en,eur,K1e,our,rur,Z1e,tur,aur,eFe,nur,sur,lur,c9,R4,oFe,iur,dur,dH,cur,mur,fur,P4,rFe,gur,hur,cH,uur,pur,_ur,B4,bur,tFe,vur,Fur,aFe,Tur,Mur,I4,SVe,Hd,N4,nFe,m9,Eur,sFe,Cur,RVe,Yo,f9,wur,Ud,Aur,mH,Lur,yur,fH,xur,$ur,kur,g9,Sur,lFe,Rur,Pur,Bur,yt,h9,Iur,iFe,Nur,qur,Jd,jur,dFe,Dur,Gur,gH,Our,Vur,Xur,q4,zur,bo,u9,Qur,cFe,Wur,Hur,on,Uur,mFe,Jur,Yur,fFe,Kur,Zur,gFe,epr,opr,rpr,hFe,j4,uFe,tpr,apr,hH,npr,spr,lpr,D4,ipr,pFe,dpr,cpr,_Fe,mpr,fpr,G4,PVe,Yd,O4,bFe,p9,gpr,vFe,hpr,BVe,Ko,_9,upr,Kd,ppr,uH,_pr,bpr,pH,vpr,Fpr,Tpr,b9,Mpr,FFe,Epr,Cpr,wpr,xt,v9,Apr,TFe,Lpr,ypr,Zd,xpr,MFe,$pr,kpr,_H,Spr,Rpr,Ppr,V4,Bpr,vo,F9,Ipr,EFe,Npr,qpr,rn,jpr,CFe,Dpr,Gpr,wFe,Opr,Vpr,AFe,Xpr,zpr,Qpr,tn,X4,LFe,Wpr,Hpr,bH,Upr,Jpr,Ypr,z4,yFe,Kpr,Zpr,vH,e_r,o_r,r_r,Q4,xFe,t_r,a_r,FH,n_r,s_r,l_r,W4,$Fe,i_r,d_r,TH,c_r,m_r,f_r,H4,g_r,kFe,h_r,u_r,SFe,p_r,__r,U4,IVe,ec,J4,RFe,T9,b_r,PFe,v_r,NVe,Zo,M9,F_r,oc,T_r,MH,M_r,E_r,EH,C_r,w_r,A_r,E9,L_r,BFe,y_r,x_r,$_r,$t,C9,k_r,IFe,S_r,R_r,rc,P_r,NFe,B_r,I_r,CH,N_r,q_r,j_r,Y4,D_r,Fo,w9,G_r,qFe,O_r,V_r,an,X_r,jFe,z_r,Q_r,DFe,W_r,H_r,GFe,U_r,J_r,Y_r,OFe,K4,VFe,K_r,Z_r,wH,e2r,o2r,r2r,Z4,t2r,XFe,a2r,n2r,zFe,s2r,l2r,eE,qVe,tc,oE,QFe,A9,i2r,WFe,d2r,jVe,er,L9,c2r,ac,m2r,AH,f2r,g2r,LH,h2r,u2r,p2r,y9,_2r,HFe,b2r,v2r,F2r,kt,x9,T2r,UFe,M2r,E2r,nc,C2r,JFe,w2r,A2r,yH,L2r,y2r,x2r,rE,$2r,yr,$9,k2r,YFe,S2r,R2r,nn,P2r,KFe,B2r,I2r,ZFe,N2r,q2r,eTe,j2r,D2r,G2r,q,tE,oTe,O2r,V2r,xH,X2r,z2r,Q2r,aE,rTe,W2r,H2r,$H,U2r,J2r,Y2r,nE,tTe,K2r,Z2r,kH,ebr,obr,rbr,sE,aTe,tbr,abr,SH,nbr,sbr,lbr,lE,nTe,ibr,dbr,RH,cbr,mbr,fbr,iE,sTe,gbr,hbr,PH,ubr,pbr,_br,dE,lTe,bbr,vbr,BH,Fbr,Tbr,Mbr,cE,iTe,Ebr,Cbr,IH,wbr,Abr,Lbr,mE,dTe,ybr,xbr,NH,$br,kbr,Sbr,fE,cTe,Rbr,Pbr,qH,Bbr,Ibr,Nbr,gE,mTe,qbr,jbr,jH,Dbr,Gbr,Obr,hE,fTe,Vbr,Xbr,DH,zbr,Qbr,Wbr,uE,gTe,Hbr,Ubr,GH,Jbr,Ybr,Kbr,pE,hTe,Zbr,evr,OH,ovr,rvr,tvr,_E,uTe,avr,nvr,VH,svr,lvr,ivr,bE,pTe,dvr,cvr,XH,mvr,fvr,gvr,vE,_Te,hvr,uvr,zH,pvr,_vr,bvr,Hs,bTe,vvr,Fvr,QH,Tvr,Mvr,WH,Evr,Cvr,wvr,FE,vTe,Avr,Lvr,HH,yvr,xvr,$vr,TE,FTe,kvr,Svr,UH,Rvr,Pvr,Bvr,ME,TTe,Ivr,Nvr,JH,qvr,jvr,Dvr,EE,MTe,Gvr,Ovr,YH,Vvr,Xvr,zvr,CE,ETe,Qvr,Wvr,KH,Hvr,Uvr,Jvr,wE,CTe,Yvr,Kvr,ZH,Zvr,e1r,o1r,AE,wTe,r1r,t1r,eU,a1r,n1r,s1r,LE,ATe,l1r,i1r,oU,d1r,c1r,m1r,yE,LTe,f1r,g1r,rU,h1r,u1r,p1r,xE,yTe,_1r,b1r,tU,v1r,F1r,T1r,$E,xTe,M1r,E1r,aU,C1r,w1r,A1r,kE,$Te,L1r,y1r,nU,x1r,$1r,k1r,SE,kTe,S1r,R1r,sU,P1r,B1r,I1r,RE,STe,N1r,q1r,lU,j1r,D1r,G1r,PE,RTe,O1r,V1r,iU,X1r,z1r,Q1r,BE,PTe,W1r,H1r,dU,U1r,J1r,Y1r,IE,BTe,K1r,Z1r,cU,eFr,oFr,rFr,NE,ITe,tFr,aFr,mU,nFr,sFr,lFr,qE,NTe,iFr,dFr,fU,cFr,mFr,fFr,jE,qTe,gFr,hFr,gU,uFr,pFr,_Fr,DE,jTe,bFr,vFr,hU,FFr,TFr,MFr,GE,DTe,EFr,CFr,uU,wFr,AFr,LFr,OE,GTe,yFr,xFr,pU,$Fr,kFr,SFr,VE,OTe,RFr,PFr,_U,BFr,IFr,NFr,XE,VTe,qFr,jFr,bU,DFr,GFr,OFr,zE,XTe,VFr,XFr,vU,zFr,QFr,WFr,QE,zTe,HFr,UFr,FU,JFr,YFr,KFr,WE,QTe,ZFr,eTr,TU,oTr,rTr,tTr,HE,WTe,aTr,nTr,MU,sTr,lTr,iTr,UE,HTe,dTr,cTr,EU,mTr,fTr,gTr,JE,DVe,sc,YE,UTe,k9,hTr,JTe,uTr,GVe,or,S9,pTr,lc,_Tr,CU,bTr,vTr,wU,FTr,TTr,MTr,R9,ETr,YTe,CTr,wTr,ATr,St,P9,LTr,KTe,yTr,xTr,ic,$Tr,ZTe,kTr,STr,AU,RTr,PTr,BTr,KE,ITr,xr,B9,NTr,eMe,qTr,jTr,sn,DTr,oMe,GTr,OTr,rMe,VTr,XTr,tMe,zTr,QTr,WTr,se,ZE,aMe,HTr,UTr,LU,JTr,YTr,KTr,eC,nMe,ZTr,eMr,yU,oMr,rMr,tMr,oC,sMe,aMr,nMr,xU,sMr,lMr,iMr,rC,lMe,dMr,cMr,$U,mMr,fMr,gMr,tC,iMe,hMr,uMr,kU,pMr,_Mr,bMr,aC,dMe,vMr,FMr,SU,TMr,MMr,EMr,nC,cMe,CMr,wMr,RU,AMr,LMr,yMr,sC,mMe,xMr,$Mr,PU,kMr,SMr,RMr,lC,fMe,PMr,BMr,BU,IMr,NMr,qMr,iC,gMe,jMr,DMr,IU,GMr,OMr,VMr,dC,hMe,XMr,zMr,NU,QMr,WMr,HMr,cC,uMe,UMr,JMr,qU,YMr,KMr,ZMr,mC,pMe,e4r,o4r,jU,r4r,t4r,a4r,fC,_Me,n4r,s4r,DU,l4r,i4r,d4r,gC,bMe,c4r,m4r,GU,f4r,g4r,h4r,hC,vMe,u4r,p4r,OU,_4r,b4r,v4r,uC,FMe,F4r,T4r,VU,M4r,E4r,C4r,pC,TMe,w4r,A4r,XU,L4r,y4r,x4r,_C,MMe,$4r,k4r,zU,S4r,R4r,P4r,bC,EMe,B4r,I4r,QU,N4r,q4r,j4r,vC,CMe,D4r,G4r,WU,O4r,V4r,X4r,FC,wMe,z4r,Q4r,HU,W4r,H4r,U4r,TC,AMe,J4r,Y4r,UU,K4r,Z4r,eEr,MC,OVe,dc,EC,LMe,I9,oEr,yMe,rEr,VVe,rr,N9,tEr,cc,aEr,JU,nEr,sEr,YU,lEr,iEr,dEr,q9,cEr,xMe,mEr,fEr,gEr,Rt,j9,hEr,$Me,uEr,pEr,mc,_Er,kMe,bEr,vEr,KU,FEr,TEr,MEr,CC,EEr,$r,D9,CEr,SMe,wEr,AEr,ln,LEr,RMe,yEr,xEr,PMe,$Er,kEr,BMe,SEr,REr,PEr,Me,wC,IMe,BEr,IEr,ZU,NEr,qEr,jEr,AC,NMe,DEr,GEr,eJ,OEr,VEr,XEr,LC,qMe,zEr,QEr,oJ,WEr,HEr,UEr,yC,jMe,JEr,YEr,rJ,KEr,ZEr,eCr,xC,DMe,oCr,rCr,tJ,tCr,aCr,nCr,$C,GMe,sCr,lCr,aJ,iCr,dCr,cCr,kC,OMe,mCr,fCr,nJ,gCr,hCr,uCr,SC,VMe,pCr,_Cr,sJ,bCr,vCr,FCr,RC,XMe,TCr,MCr,lJ,ECr,CCr,wCr,PC,zMe,ACr,LCr,iJ,yCr,xCr,$Cr,BC,QMe,kCr,SCr,dJ,RCr,PCr,BCr,IC,WMe,ICr,NCr,cJ,qCr,jCr,DCr,NC,HMe,GCr,OCr,mJ,VCr,XCr,zCr,qC,XVe,fc,jC,UMe,G9,QCr,JMe,WCr,zVe,tr,O9,HCr,gc,UCr,fJ,JCr,YCr,gJ,KCr,ZCr,e3r,V9,o3r,YMe,r3r,t3r,a3r,Pt,X9,n3r,KMe,s3r,l3r,hc,i3r,ZMe,d3r,c3r,hJ,m3r,f3r,g3r,DC,h3r,kr,z9,u3r,e4e,p3r,_3r,dn,b3r,o4e,v3r,F3r,r4e,T3r,M3r,t4e,E3r,C3r,w3r,rt,GC,a4e,A3r,L3r,uJ,y3r,x3r,$3r,OC,n4e,k3r,S3r,pJ,R3r,P3r,B3r,VC,s4e,I3r,N3r,_J,q3r,j3r,D3r,XC,l4e,G3r,O3r,bJ,V3r,X3r,z3r,zC,i4e,Q3r,W3r,vJ,H3r,U3r,J3r,QC,QVe,uc,WC,d4e,Q9,Y3r,c4e,K3r,WVe,ar,W9,Z3r,pc,e5r,FJ,o5r,r5r,TJ,t5r,a5r,n5r,H9,s5r,m4e,l5r,i5r,d5r,Bt,U9,c5r,f4e,m5r,f5r,_c,g5r,g4e,h5r,u5r,MJ,p5r,_5r,b5r,HC,v5r,Sr,J9,F5r,h4e,T5r,M5r,cn,E5r,u4e,C5r,w5r,p4e,A5r,L5r,_4e,y5r,x5r,$5r,ie,UC,b4e,k5r,S5r,EJ,R5r,P5r,B5r,JC,v4e,I5r,N5r,CJ,q5r,j5r,D5r,YC,F4e,G5r,O5r,wJ,V5r,X5r,z5r,KC,T4e,Q5r,W5r,AJ,H5r,U5r,J5r,ZC,M4e,Y5r,K5r,LJ,Z5r,e0r,o0r,e3,E4e,r0r,t0r,yJ,a0r,n0r,s0r,o3,C4e,l0r,i0r,xJ,d0r,c0r,m0r,r3,w4e,f0r,g0r,$J,h0r,u0r,p0r,t3,A4e,_0r,b0r,kJ,v0r,F0r,T0r,a3,L4e,M0r,E0r,SJ,C0r,w0r,A0r,n3,y4e,L0r,y0r,RJ,x0r,$0r,k0r,s3,x4e,S0r,R0r,PJ,P0r,B0r,I0r,l3,$4e,N0r,q0r,BJ,j0r,D0r,G0r,i3,k4e,O0r,V0r,IJ,X0r,z0r,Q0r,d3,S4e,W0r,H0r,NJ,U0r,J0r,Y0r,c3,R4e,K0r,Z0r,qJ,ewr,owr,rwr,m3,P4e,twr,awr,jJ,nwr,swr,lwr,f3,B4e,iwr,dwr,DJ,cwr,mwr,fwr,g3,I4e,gwr,hwr,GJ,uwr,pwr,_wr,h3,N4e,bwr,vwr,OJ,Fwr,Twr,Mwr,u3,HVe,bc,p3,q4e,Y9,Ewr,j4e,Cwr,UVe,nr,K9,wwr,vc,Awr,VJ,Lwr,ywr,XJ,xwr,$wr,kwr,Z9,Swr,D4e,Rwr,Pwr,Bwr,It,ex,Iwr,G4e,Nwr,qwr,Fc,jwr,O4e,Dwr,Gwr,zJ,Owr,Vwr,Xwr,_3,zwr,Rr,ox,Qwr,V4e,Wwr,Hwr,mn,Uwr,X4e,Jwr,Ywr,z4e,Kwr,Zwr,Q4e,eAr,oAr,rAr,ye,b3,W4e,tAr,aAr,QJ,nAr,sAr,lAr,v3,H4e,iAr,dAr,WJ,cAr,mAr,fAr,F3,U4e,gAr,hAr,HJ,uAr,pAr,_Ar,T3,J4e,bAr,vAr,UJ,FAr,TAr,MAr,M3,Y4e,EAr,CAr,JJ,wAr,AAr,LAr,E3,K4e,yAr,xAr,YJ,$Ar,kAr,SAr,C3,Z4e,RAr,PAr,KJ,BAr,IAr,NAr,w3,eEe,qAr,jAr,ZJ,DAr,GAr,OAr,A3,oEe,VAr,XAr,eY,zAr,QAr,WAr,L3,rEe,HAr,UAr,oY,JAr,YAr,KAr,y3,JVe,Tc,x3,tEe,rx,ZAr,aEe,e6r,YVe,sr,tx,o6r,Mc,r6r,rY,t6r,a6r,tY,n6r,s6r,l6r,ax,i6r,nEe,d6r,c6r,m6r,Nt,nx,f6r,sEe,g6r,h6r,Ec,u6r,lEe,p6r,_6r,aY,b6r,v6r,F6r,$3,T6r,Pr,sx,M6r,iEe,E6r,C6r,fn,w6r,dEe,A6r,L6r,cEe,y6r,x6r,mEe,$6r,k6r,S6r,te,k3,fEe,R6r,P6r,nY,B6r,I6r,N6r,S3,gEe,q6r,j6r,sY,D6r,G6r,O6r,R3,hEe,V6r,X6r,lY,z6r,Q6r,W6r,P3,uEe,H6r,U6r,iY,J6r,Y6r,K6r,B3,pEe,Z6r,eLr,dY,oLr,rLr,tLr,I3,_Ee,aLr,nLr,cY,sLr,lLr,iLr,N3,bEe,dLr,cLr,mY,mLr,fLr,gLr,q3,vEe,hLr,uLr,fY,pLr,_Lr,bLr,j3,FEe,vLr,FLr,gY,TLr,MLr,ELr,D3,TEe,CLr,wLr,hY,ALr,LLr,yLr,G3,MEe,xLr,$Lr,uY,kLr,SLr,RLr,O3,EEe,PLr,BLr,pY,ILr,NLr,qLr,V3,CEe,jLr,DLr,_Y,GLr,OLr,VLr,X3,wEe,XLr,zLr,bY,QLr,WLr,HLr,z3,AEe,ULr,JLr,vY,YLr,KLr,ZLr,Q3,LEe,e7r,o7r,FY,r7r,t7r,a7r,W3,yEe,n7r,s7r,TY,l7r,i7r,d7r,H3,xEe,c7r,m7r,MY,f7r,g7r,h7r,U3,$Ee,u7r,p7r,EY,_7r,b7r,v7r,J3,kEe,F7r,T7r,CY,M7r,E7r,C7r,Y3,SEe,w7r,A7r,wY,L7r,y7r,x7r,K3,REe,$7r,k7r,AY,S7r,R7r,P7r,Z3,PEe,B7r,I7r,LY,N7r,q7r,j7r,e5,BEe,D7r,G7r,yY,O7r,V7r,X7r,o5,IEe,z7r,Q7r,xY,W7r,H7r,U7r,r5,NEe,J7r,Y7r,$Y,K7r,Z7r,eyr,t5,KVe,Cc,a5,qEe,lx,oyr,jEe,ryr,ZVe,lr,ix,tyr,wc,ayr,kY,nyr,syr,SY,lyr,iyr,dyr,dx,cyr,DEe,myr,fyr,gyr,qt,cx,hyr,GEe,uyr,pyr,Ac,_yr,OEe,byr,vyr,RY,Fyr,Tyr,Myr,n5,Eyr,Br,mx,Cyr,VEe,wyr,Ayr,gn,Lyr,XEe,yyr,xyr,zEe,$yr,kyr,QEe,Syr,Ryr,Pyr,pe,s5,WEe,Byr,Iyr,PY,Nyr,qyr,jyr,l5,HEe,Dyr,Gyr,BY,Oyr,Vyr,Xyr,i5,UEe,zyr,Qyr,IY,Wyr,Hyr,Uyr,d5,JEe,Jyr,Yyr,NY,Kyr,Zyr,e8r,c5,YEe,o8r,r8r,qY,t8r,a8r,n8r,m5,KEe,s8r,l8r,jY,i8r,d8r,c8r,f5,ZEe,m8r,f8r,DY,g8r,h8r,u8r,g5,eCe,p8r,_8r,GY,b8r,v8r,F8r,h5,oCe,T8r,M8r,OY,E8r,C8r,w8r,u5,rCe,A8r,L8r,VY,y8r,x8r,$8r,p5,tCe,k8r,S8r,XY,R8r,P8r,B8r,_5,aCe,I8r,N8r,zY,q8r,j8r,D8r,b5,nCe,G8r,O8r,QY,V8r,X8r,z8r,v5,sCe,Q8r,W8r,WY,H8r,U8r,J8r,F5,lCe,Y8r,K8r,HY,Z8r,e9r,o9r,T5,iCe,r9r,t9r,UY,a9r,n9r,s9r,M5,dCe,l9r,i9r,JY,d9r,c9r,m9r,E5,eXe,Lc,C5,cCe,fx,f9r,mCe,g9r,oXe,ir,gx,h9r,yc,u9r,YY,p9r,_9r,KY,b9r,v9r,F9r,hx,T9r,fCe,M9r,E9r,C9r,jt,ux,w9r,gCe,A9r,L9r,xc,y9r,hCe,x9r,$9r,ZY,k9r,S9r,R9r,w5,P9r,Ir,px,B9r,uCe,I9r,N9r,hn,q9r,pCe,j9r,D9r,_Ce,G9r,O9r,bCe,V9r,X9r,z9r,_x,A5,vCe,Q9r,W9r,eK,H9r,U9r,J9r,L5,FCe,Y9r,K9r,oK,Z9r,exr,oxr,y5,rXe,$c,x5,TCe,bx,rxr,MCe,txr,tXe,dr,vx,axr,kc,nxr,rK,sxr,lxr,tK,ixr,dxr,cxr,Fx,mxr,ECe,fxr,gxr,hxr,Dt,Tx,uxr,CCe,pxr,_xr,Sc,bxr,wCe,vxr,Fxr,aK,Txr,Mxr,Exr,$5,Cxr,Nr,Mx,wxr,ACe,Axr,Lxr,un,yxr,LCe,xxr,$xr,yCe,kxr,Sxr,xCe,Rxr,Pxr,Bxr,$Ce,k5,kCe,Ixr,Nxr,nK,qxr,jxr,Dxr,S5,aXe,Rc,R5,SCe,Ex,Gxr,RCe,Oxr,nXe,cr,Cx,Vxr,Pc,Xxr,sK,zxr,Qxr,lK,Wxr,Hxr,Uxr,wx,Jxr,PCe,Yxr,Kxr,Zxr,Gt,Ax,e$r,BCe,o$r,r$r,Bc,t$r,ICe,a$r,n$r,iK,s$r,l$r,i$r,P5,d$r,qr,Lx,c$r,NCe,m$r,f$r,pn,g$r,qCe,h$r,u$r,jCe,p$r,_$r,DCe,b$r,v$r,F$r,de,B5,GCe,T$r,M$r,dK,E$r,C$r,w$r,I5,OCe,A$r,L$r,cK,y$r,x$r,$$r,N5,VCe,k$r,S$r,mK,R$r,P$r,B$r,q5,XCe,I$r,N$r,fK,q$r,j$r,D$r,j5,zCe,G$r,O$r,gK,V$r,X$r,z$r,D5,QCe,Q$r,W$r,hK,H$r,U$r,J$r,G5,WCe,Y$r,K$r,uK,Z$r,ekr,okr,O5,HCe,rkr,tkr,pK,akr,nkr,skr,V5,UCe,lkr,ikr,_K,dkr,ckr,mkr,X5,JCe,fkr,gkr,bK,hkr,ukr,pkr,z5,YCe,_kr,bkr,vK,vkr,Fkr,Tkr,Q5,KCe,Mkr,Ekr,FK,Ckr,wkr,Akr,W5,ZCe,Lkr,ykr,TK,xkr,$kr,kkr,H5,e3e,Skr,Rkr,MK,Pkr,Bkr,Ikr,U5,o3e,Nkr,qkr,EK,jkr,Dkr,Gkr,J5,r3e,Okr,Vkr,CK,Xkr,zkr,Qkr,Y5,t3e,Wkr,Hkr,wK,Ukr,Jkr,Ykr,K5,a3e,Kkr,Zkr,AK,eSr,oSr,rSr,Z5,n3e,tSr,aSr,LK,nSr,sSr,lSr,e0,s3e,iSr,dSr,yK,cSr,mSr,fSr,o0,sXe,Ic,r0,l3e,yx,gSr,i3e,hSr,lXe,mr,xx,uSr,Nc,pSr,xK,_Sr,bSr,$K,vSr,FSr,TSr,$x,MSr,d3e,ESr,CSr,wSr,Ot,kx,ASr,c3e,LSr,ySr,qc,xSr,m3e,$Sr,kSr,kK,SSr,RSr,PSr,t0,BSr,jr,Sx,ISr,f3e,NSr,qSr,_n,jSr,g3e,DSr,GSr,h3e,OSr,VSr,u3e,XSr,zSr,QSr,ce,a0,p3e,WSr,HSr,SK,USr,JSr,YSr,n0,_3e,KSr,ZSr,RK,eRr,oRr,rRr,s0,b3e,tRr,aRr,PK,nRr,sRr,lRr,l0,v3e,iRr,dRr,BK,cRr,mRr,fRr,i0,F3e,gRr,hRr,IK,uRr,pRr,_Rr,d0,T3e,bRr,vRr,NK,FRr,TRr,MRr,c0,M3e,ERr,CRr,qK,wRr,ARr,LRr,m0,E3e,yRr,xRr,jK,$Rr,kRr,SRr,f0,C3e,RRr,PRr,DK,BRr,IRr,NRr,g0,w3e,qRr,jRr,GK,DRr,GRr,ORr,h0,A3e,VRr,XRr,OK,zRr,QRr,WRr,u0,L3e,HRr,URr,VK,JRr,YRr,KRr,p0,y3e,ZRr,ePr,XK,oPr,rPr,tPr,_0,x3e,aPr,nPr,zK,sPr,lPr,iPr,b0,$3e,dPr,cPr,QK,mPr,fPr,gPr,v0,k3e,hPr,uPr,WK,pPr,_Pr,bPr,F0,S3e,vPr,FPr,HK,TPr,MPr,EPr,T0,R3e,CPr,wPr,UK,APr,LPr,yPr,M0,P3e,xPr,$Pr,JK,kPr,SPr,RPr,E0,B3e,PPr,BPr,YK,IPr,NPr,qPr,C0,iXe,jc,w0,I3e,Rx,jPr,N3e,DPr,dXe,fr,Px,GPr,Dc,OPr,KK,VPr,XPr,ZK,zPr,QPr,WPr,Bx,HPr,q3e,UPr,JPr,YPr,Vt,Ix,KPr,j3e,ZPr,eBr,Gc,oBr,D3e,rBr,tBr,eZ,aBr,nBr,sBr,A0,lBr,Dr,Nx,iBr,G3e,dBr,cBr,bn,mBr,O3e,fBr,gBr,V3e,hBr,uBr,X3e,pBr,_Br,bBr,z3e,L0,Q3e,vBr,FBr,oZ,TBr,MBr,EBr,y0,cXe,Oc,x0,W3e,qx,CBr,H3e,wBr,mXe,gr,jx,ABr,Vc,LBr,rZ,yBr,xBr,tZ,$Br,kBr,SBr,Dx,RBr,U3e,PBr,BBr,IBr,Xt,Gx,NBr,J3e,qBr,jBr,Xc,DBr,Y3e,GBr,OBr,aZ,VBr,XBr,zBr,$0,QBr,Gr,Ox,WBr,K3e,HBr,UBr,vn,JBr,Z3e,YBr,KBr,e5e,ZBr,eIr,o5e,oIr,rIr,tIr,r5e,k0,t5e,aIr,nIr,nZ,sIr,lIr,iIr,S0,fXe,zc,R0,a5e,Vx,dIr,n5e,cIr,gXe,hr,Xx,mIr,Qc,fIr,sZ,gIr,hIr,lZ,uIr,pIr,_Ir,zx,bIr,s5e,vIr,FIr,TIr,zt,Qx,MIr,l5e,EIr,CIr,Wc,wIr,i5e,AIr,LIr,iZ,yIr,xIr,$Ir,P0,kIr,Or,Wx,SIr,d5e,RIr,PIr,Fn,BIr,c5e,IIr,NIr,m5e,qIr,jIr,f5e,DIr,GIr,OIr,oe,B0,g5e,VIr,XIr,dZ,zIr,QIr,WIr,I0,h5e,HIr,UIr,cZ,JIr,YIr,KIr,N0,u5e,ZIr,eNr,mZ,oNr,rNr,tNr,q0,p5e,aNr,nNr,fZ,sNr,lNr,iNr,j0,_5e,dNr,cNr,gZ,mNr,fNr,gNr,D0,b5e,hNr,uNr,hZ,pNr,_Nr,bNr,G0,v5e,vNr,FNr,uZ,TNr,MNr,ENr,O0,F5e,CNr,wNr,pZ,ANr,LNr,yNr,V0,T5e,xNr,$Nr,_Z,kNr,SNr,RNr,X0,M5e,PNr,BNr,bZ,INr,NNr,qNr,z0,E5e,jNr,DNr,vZ,GNr,ONr,VNr,Q0,C5e,XNr,zNr,FZ,QNr,WNr,HNr,W0,w5e,UNr,JNr,TZ,YNr,KNr,ZNr,H0,A5e,eqr,oqr,MZ,rqr,tqr,aqr,U0,L5e,nqr,sqr,EZ,lqr,iqr,dqr,J0,y5e,cqr,mqr,CZ,fqr,gqr,hqr,Y0,x5e,uqr,pqr,wZ,_qr,bqr,vqr,K0,$5e,Fqr,Tqr,AZ,Mqr,Eqr,Cqr,Z0,k5e,wqr,Aqr,LZ,Lqr,yqr,xqr,ew,S5e,$qr,kqr,yZ,Sqr,Rqr,Pqr,ow,R5e,Bqr,Iqr,xZ,Nqr,qqr,jqr,rw,P5e,Dqr,Gqr,$Z,Oqr,Vqr,Xqr,tw,B5e,zqr,Qqr,kZ,Wqr,Hqr,Uqr,aw,I5e,Jqr,Yqr,SZ,Kqr,Zqr,ejr,nw,N5e,ojr,rjr,RZ,tjr,ajr,njr,sw,q5e,sjr,ljr,PZ,ijr,djr,cjr,lw,j5e,mjr,fjr,BZ,gjr,hjr,ujr,iw,hXe,Hc,dw,D5e,Hx,pjr,G5e,_jr,uXe,ur,Ux,bjr,Uc,vjr,IZ,Fjr,Tjr,NZ,Mjr,Ejr,Cjr,Jx,wjr,O5e,Ajr,Ljr,yjr,Qt,Yx,xjr,V5e,$jr,kjr,Jc,Sjr,X5e,Rjr,Pjr,qZ,Bjr,Ijr,Njr,cw,qjr,Vr,Kx,jjr,z5e,Djr,Gjr,Tn,Ojr,Q5e,Vjr,Xjr,W5e,zjr,Qjr,H5e,Wjr,Hjr,Ujr,xe,mw,U5e,Jjr,Yjr,jZ,Kjr,Zjr,eDr,fw,J5e,oDr,rDr,DZ,tDr,aDr,nDr,gw,Y5e,sDr,lDr,GZ,iDr,dDr,cDr,hw,K5e,mDr,fDr,OZ,gDr,hDr,uDr,uw,Z5e,pDr,_Dr,VZ,bDr,vDr,FDr,pw,e0e,TDr,MDr,XZ,EDr,CDr,wDr,_w,o0e,ADr,LDr,zZ,yDr,xDr,$Dr,bw,r0e,kDr,SDr,QZ,RDr,PDr,BDr,vw,t0e,IDr,NDr,WZ,qDr,jDr,DDr,Fw,a0e,GDr,ODr,HZ,VDr,XDr,zDr,Tw,pXe,Yc,Mw,n0e,Zx,QDr,s0e,WDr,_Xe,pr,e$,HDr,Kc,UDr,UZ,JDr,YDr,JZ,KDr,ZDr,eGr,o$,oGr,l0e,rGr,tGr,aGr,Wt,r$,nGr,i0e,sGr,lGr,Zc,iGr,d0e,dGr,cGr,YZ,mGr,fGr,gGr,Ew,hGr,Xr,t$,uGr,c0e,pGr,_Gr,Mn,bGr,m0e,vGr,FGr,f0e,TGr,MGr,g0e,EGr,CGr,wGr,Ee,Cw,h0e,AGr,LGr,KZ,yGr,xGr,$Gr,ww,u0e,kGr,SGr,ZZ,RGr,PGr,BGr,Aw,p0e,IGr,NGr,eee,qGr,jGr,DGr,Lw,_0e,GGr,OGr,oee,VGr,XGr,zGr,yw,b0e,QGr,WGr,ree,HGr,UGr,JGr,xw,v0e,YGr,KGr,tee,ZGr,eOr,oOr,$w,F0e,rOr,tOr,aee,aOr,nOr,sOr,kw,T0e,lOr,iOr,nee,dOr,cOr,mOr,Sw,M0e,fOr,gOr,see,hOr,uOr,pOr,Rw,E0e,_Or,bOr,lee,vOr,FOr,TOr,Pw,C0e,MOr,EOr,iee,COr,wOr,AOr,Bw,w0e,LOr,yOr,dee,xOr,$Or,kOr,Iw,A0e,SOr,ROr,cee,POr,BOr,IOr,Nw,bXe,em,qw,L0e,a$,NOr,y0e,qOr,vXe,_r,n$,jOr,om,DOr,mee,GOr,OOr,fee,VOr,XOr,zOr,s$,QOr,x0e,WOr,HOr,UOr,Ht,l$,JOr,$0e,YOr,KOr,rm,ZOr,k0e,eVr,oVr,gee,rVr,tVr,aVr,jw,nVr,zr,i$,sVr,S0e,lVr,iVr,En,dVr,R0e,cVr,mVr,P0e,fVr,gVr,B0e,hVr,uVr,pVr,$e,Dw,I0e,_Vr,bVr,hee,vVr,FVr,TVr,Gw,N0e,MVr,EVr,uee,CVr,wVr,AVr,Ow,q0e,LVr,yVr,pee,xVr,$Vr,kVr,Vw,j0e,SVr,RVr,_ee,PVr,BVr,IVr,Xw,D0e,NVr,qVr,bee,jVr,DVr,GVr,zw,G0e,OVr,VVr,vee,XVr,zVr,QVr,Qw,O0e,WVr,HVr,Fee,UVr,JVr,YVr,Ww,V0e,KVr,ZVr,Tee,eXr,oXr,rXr,Hw,X0e,tXr,aXr,Mee,nXr,sXr,lXr,Uw,z0e,iXr,dXr,Eee,cXr,mXr,fXr,Jw,FXe,tm,Yw,Q0e,d$,gXr,W0e,hXr,TXe,br,c$,uXr,am,pXr,Cee,_Xr,bXr,wee,vXr,FXr,TXr,m$,MXr,H0e,EXr,CXr,wXr,Ut,f$,AXr,U0e,LXr,yXr,nm,xXr,J0e,$Xr,kXr,Aee,SXr,RXr,PXr,Kw,BXr,Qr,g$,IXr,Y0e,NXr,qXr,Cn,jXr,K0e,DXr,GXr,Z0e,OXr,VXr,ewe,XXr,zXr,QXr,ke,Zw,owe,WXr,HXr,Lee,UXr,JXr,YXr,eA,rwe,KXr,ZXr,yee,ezr,ozr,rzr,oA,twe,tzr,azr,xee,nzr,szr,lzr,rA,awe,izr,dzr,$ee,czr,mzr,fzr,tA,nwe,gzr,hzr,kee,uzr,pzr,_zr,aA,swe,bzr,vzr,See,Fzr,Tzr,Mzr,nA,lwe,Ezr,Czr,Ree,wzr,Azr,Lzr,sA,iwe,yzr,xzr,Pee,$zr,kzr,Szr,lA,dwe,Rzr,Pzr,Bee,Bzr,Izr,Nzr,iA,cwe,qzr,jzr,Iee,Dzr,Gzr,Ozr,dA,MXe,sm,cA,mwe,h$,Vzr,fwe,Xzr,EXe,vr,u$,zzr,lm,Qzr,Nee,Wzr,Hzr,qee,Uzr,Jzr,Yzr,p$,Kzr,gwe,Zzr,eQr,oQr,Jt,_$,rQr,hwe,tQr,aQr,im,nQr,uwe,sQr,lQr,jee,iQr,dQr,cQr,mA,mQr,Wr,b$,fQr,pwe,gQr,hQr,wn,uQr,_we,pQr,_Qr,bwe,bQr,vQr,vwe,FQr,TQr,MQr,Se,fA,Fwe,EQr,CQr,Dee,wQr,AQr,LQr,gA,Twe,yQr,xQr,Gee,$Qr,kQr,SQr,hA,Mwe,RQr,PQr,Oee,BQr,IQr,NQr,uA,Ewe,qQr,jQr,Vee,DQr,GQr,OQr,pA,Cwe,VQr,XQr,Xee,zQr,QQr,WQr,_A,wwe,HQr,UQr,zee,JQr,YQr,KQr,bA,Awe,ZQr,eWr,Qee,oWr,rWr,tWr,vA,Lwe,aWr,nWr,Wee,sWr,lWr,iWr,FA,ywe,dWr,cWr,Hee,mWr,fWr,gWr,TA,xwe,hWr,uWr,Uee,pWr,_Wr,bWr,MA,CXe,dm,EA,$we,v$,vWr,kwe,FWr,wXe,Fr,F$,TWr,cm,MWr,Jee,EWr,CWr,Yee,wWr,AWr,LWr,T$,yWr,Swe,xWr,$Wr,kWr,Yt,M$,SWr,Rwe,RWr,PWr,mm,BWr,Pwe,IWr,NWr,Kee,qWr,jWr,DWr,CA,GWr,Hr,E$,OWr,Bwe,VWr,XWr,An,zWr,Iwe,QWr,WWr,Nwe,HWr,UWr,qwe,JWr,YWr,KWr,Re,wA,jwe,ZWr,eHr,Zee,oHr,rHr,tHr,AA,Dwe,aHr,nHr,eoe,sHr,lHr,iHr,LA,Gwe,dHr,cHr,ooe,mHr,fHr,gHr,yA,Owe,hHr,uHr,roe,pHr,_Hr,bHr,xA,Vwe,vHr,FHr,toe,THr,MHr,EHr,$A,Xwe,CHr,wHr,aoe,AHr,LHr,yHr,kA,zwe,xHr,$Hr,noe,kHr,SHr,RHr,SA,Qwe,PHr,BHr,soe,IHr,NHr,qHr,RA,Wwe,jHr,DHr,loe,GHr,OHr,VHr,PA,Hwe,XHr,zHr,ioe,QHr,WHr,HHr,BA,AXe,fm,IA,Uwe,C$,UHr,Jwe,JHr,LXe,Tr,w$,YHr,gm,KHr,doe,ZHr,eUr,coe,oUr,rUr,tUr,A$,aUr,Ywe,nUr,sUr,lUr,Kt,L$,iUr,Kwe,dUr,cUr,hm,mUr,Zwe,fUr,gUr,moe,hUr,uUr,pUr,NA,_Ur,Ur,y$,bUr,eAe,vUr,FUr,Ln,TUr,oAe,MUr,EUr,rAe,CUr,wUr,tAe,AUr,LUr,yUr,Ve,qA,aAe,xUr,$Ur,foe,kUr,SUr,RUr,jA,nAe,PUr,BUr,goe,IUr,NUr,qUr,DA,sAe,jUr,DUr,hoe,GUr,OUr,VUr,GA,lAe,XUr,zUr,uoe,QUr,WUr,HUr,OA,iAe,UUr,JUr,poe,YUr,KUr,ZUr,VA,dAe,eJr,oJr,_oe,rJr,tJr,aJr,XA,cAe,nJr,sJr,boe,lJr,iJr,dJr,zA,mAe,cJr,mJr,voe,fJr,gJr,hJr,QA,yXe,um,WA,fAe,x$,uJr,gAe,pJr,xXe,Mr,$$,_Jr,pm,bJr,Foe,vJr,FJr,Toe,TJr,MJr,EJr,k$,CJr,hAe,wJr,AJr,LJr,Zt,S$,yJr,uAe,xJr,$Jr,_m,kJr,pAe,SJr,RJr,Moe,PJr,BJr,IJr,HA,NJr,Jr,R$,qJr,_Ae,jJr,DJr,yn,GJr,bAe,OJr,VJr,vAe,XJr,zJr,FAe,QJr,WJr,HJr,Xe,UA,TAe,UJr,JJr,Eoe,YJr,KJr,ZJr,JA,MAe,eYr,oYr,Coe,rYr,tYr,aYr,YA,EAe,nYr,sYr,woe,lYr,iYr,dYr,KA,CAe,cYr,mYr,Aoe,fYr,gYr,hYr,ZA,wAe,uYr,pYr,Loe,_Yr,bYr,vYr,e6,AAe,FYr,TYr,yoe,MYr,EYr,CYr,o6,LAe,wYr,AYr,xoe,LYr,yYr,xYr,r6,yAe,$Yr,kYr,$oe,SYr,RYr,PYr,t6,$Xe,bm,a6,xAe,P$,BYr,$Ae,IYr,kXe,Er,B$,NYr,vm,qYr,koe,jYr,DYr,Soe,GYr,OYr,VYr,I$,XYr,kAe,zYr,QYr,WYr,ea,N$,HYr,SAe,UYr,JYr,Fm,YYr,RAe,KYr,ZYr,Roe,eKr,oKr,rKr,n6,tKr,Yr,q$,aKr,PAe,nKr,sKr,xn,lKr,BAe,iKr,dKr,IAe,cKr,mKr,NAe,fKr,gKr,hKr,qAe,s6,jAe,uKr,pKr,Poe,_Kr,bKr,vKr,l6,SXe,Tm,i6,DAe,j$,FKr,GAe,TKr,RXe,Cr,D$,MKr,Mm,EKr,Boe,CKr,wKr,Ioe,AKr,LKr,yKr,G$,xKr,OAe,$Kr,kKr,SKr,oa,O$,RKr,VAe,PKr,BKr,Em,IKr,XAe,NKr,qKr,Noe,jKr,DKr,GKr,d6,OKr,Kr,V$,VKr,zAe,XKr,zKr,$n,QKr,QAe,WKr,HKr,WAe,UKr,JKr,HAe,YKr,KKr,ZKr,X$,c6,UAe,eZr,oZr,qoe,rZr,tZr,aZr,m6,JAe,nZr,sZr,joe,lZr,iZr,dZr,f6,PXe,Cm,g6,YAe,z$,cZr,KAe,mZr,BXe,wr,Q$,fZr,wm,gZr,Doe,hZr,uZr,Goe,pZr,_Zr,bZr,W$,vZr,ZAe,FZr,TZr,MZr,ra,H$,EZr,e6e,CZr,wZr,Am,AZr,o6e,LZr,yZr,Ooe,xZr,$Zr,kZr,h6,SZr,Zr,U$,RZr,r6e,PZr,BZr,kn,IZr,t6e,NZr,qZr,a6e,jZr,DZr,n6e,GZr,OZr,VZr,s6e,u6,l6e,XZr,zZr,Voe,QZr,WZr,HZr,p6,IXe;return d=new re({}),$a=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),D7=new re({}),G7=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Bm=new UZr({props:{warning:!0,$$slots:{default:[zOt]},$$scope:{ctx:$}}}),O7=new re({}),V7=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L604"}}),Q7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L627"}}),Qg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[QOt]},$$scope:{ctx:$}}}),W7=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L750"}}),H7=new re({}),U7=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L402"}}),K7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L416"}}),yh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[WOt]},$$scope:{ctx:$}}}),Z7=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L615"}}),ey=new re({}),oy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L208"}}),cu=new UZr({props:{$$slots:{default:[HOt]},$$scope:{ctx:$}}}),mu=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[UOt]},$$scope:{ctx:$}}}),ny=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L335"}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L89"}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L103"}}),Su=new UZr({props:{$$slots:{default:[JOt]},$$scope:{ctx:$}}}),Ru=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[YOt]},$$scope:{ctx:$}}}),my=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L256"}}),fy=new re({}),gy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L771"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Iu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[KOt]},$$scope:{ctx:$}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[ZOt]},$$scope:{ctx:$}}}),_y=new re({}),by=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L778"}}),Fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[eVt]},$$scope:{ctx:$}}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[oVt]},$$scope:{ctx:$}}}),My=new re({}),Ey=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L793"}}),wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[rVt]},$$scope:{ctx:$}}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Tb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[tVt]},$$scope:{ctx:$}}}),Ly=new re({}),yy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L800"}}),$y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Eb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[aVt]},$$scope:{ctx:$}}}),ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[nVt]},$$scope:{ctx:$}}}),Sy=new re({}),Ry=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L807"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[sVt]},$$scope:{ctx:$}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[lVt]},$$scope:{ctx:$}}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L816"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[iVt]},$$scope:{ctx:$}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[dVt]},$$scope:{ctx:$}}}),Oy=new re({}),Vy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L861"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$1=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[cVt]},$$scope:{ctx:$}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mVt]},$$scope:{ctx:$}}}),Wy=new re({}),Hy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L868"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fVt]},$$scope:{ctx:$}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[gVt]},$$scope:{ctx:$}}}),Ky=new re({}),Zy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L854"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[hVt]},$$scope:{ctx:$}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[uVt]},$$scope:{ctx:$}}}),t8=new re({}),a8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L825"}}),s8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[pVt]},$$scope:{ctx:$}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),UT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[_Vt]},$$scope:{ctx:$}}}),i8=new re({}),d8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L832"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[bVt]},$$scope:{ctx:$}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eM=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[vVt]},$$scope:{ctx:$}}}),g8=new re({}),h8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L877"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rM=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[FVt]},$$scope:{ctx:$}}}),_8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[TVt]},$$scope:{ctx:$}}}),b8=new re({}),v8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L916"}}),T8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bM=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[MVt]},$$scope:{ctx:$}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TM=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[EVt]},$$scope:{ctx:$}}}),E8=new re({}),C8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L843"}}),A8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[CVt]},$$scope:{ctx:$}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[wVt]},$$scope:{ctx:$}}}),y8=new re({}),x8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L923"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[AVt]},$$scope:{ctx:$}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[LVt]},$$scope:{ctx:$}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L946"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[yVt]},$$scope:{ctx:$}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[xVt]},$$scope:{ctx:$}}}),q8=new re({}),j8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L930"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JM=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[$Vt]},$$scope:{ctx:$}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i4=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[kVt]},$$scope:{ctx:$}}}),V8=new re({}),X8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L937"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c4=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[SVt]},$$scope:{ctx:$}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[RVt]},$$scope:{ctx:$}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L955"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[PVt]},$$scope:{ctx:$}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E4=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[BVt]},$$scope:{ctx:$}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L962"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w4=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[IVt]},$$scope:{ctx:$}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[NVt]},$$scope:{ctx:$}}}),n9=new re({}),s9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L909"}}),i9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[qVt]},$$scope:{ctx:$}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I4=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[jVt]},$$scope:{ctx:$}}}),m9=new re({}),f9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L884"}}),h9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[DVt]},$$scope:{ctx:$}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[GVt]},$$scope:{ctx:$}}}),p9=new re({}),_9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L891"}}),v9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[OVt]},$$scope:{ctx:$}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[VVt]},$$scope:{ctx:$}}}),T9=new re({}),M9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L900"}}),C9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y4=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[XVt]},$$scope:{ctx:$}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[zVt]},$$scope:{ctx:$}}}),A9=new re({}),L9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),x9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[QVt]},$$scope:{ctx:$}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[WVt]},$$scope:{ctx:$}}}),k9=new re({}),S9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),P9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[HVt]},$$scope:{ctx:$}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[UVt]},$$scope:{ctx:$}}}),I9=new re({}),N9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),j9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[JVt]},$$scope:{ctx:$}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[YVt]},$$scope:{ctx:$}}}),G9=new re({}),O9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),X9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[KVt]},$$scope:{ctx:$}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZVt]},$$scope:{ctx:$}}}),Q9=new re({}),W9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),U9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[eXt]},$$scope:{ctx:$}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[oXt]},$$scope:{ctx:$}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[rXt]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y3=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[tXt]},$$scope:{ctx:$}}}),rx=new re({}),tx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[aXt]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[nXt]},$$scope:{ctx:$}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[sXt]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[lXt]},$$scope:{ctx:$}}}),fx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L530"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[iXt]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[dXt]},$$scope:{ctx:$}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[cXt]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[mXt]},$$scope:{ctx:$}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[fXt]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[gXt]},$$scope:{ctx:$}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[hXt]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[uXt]},$$scope:{ctx:$}}}),Rx=new re({}),Px=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[pXt]},$$scope:{ctx:$}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[_Xt]},$$scope:{ctx:$}}}),qx=new re({}),jx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[bXt]},$$scope:{ctx:$}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[vXt]},$$scope:{ctx:$}}}),Vx=new re({}),Xx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[FXt]},$$scope:{ctx:$}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[TXt]},$$scope:{ctx:$}}}),Hx=new re({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[MXt]},$$scope:{ctx:$}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Tw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[EXt]},$$scope:{ctx:$}}}),Zx=new re({}),e$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),r$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ew=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[CXt]},$$scope:{ctx:$}}}),t$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[wXt]},$$scope:{ctx:$}}}),a$=new re({}),n$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),l$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[AXt]},$$scope:{ctx:$}}}),i$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Jw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[LXt]},$$scope:{ctx:$}}}),d$=new re({}),c$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Kw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[yXt]},$$scope:{ctx:$}}}),g$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xXt]},$$scope:{ctx:$}}}),h$=new re({}),u$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),_$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[$Xt]},$$scope:{ctx:$}}}),b$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kXt]},$$scope:{ctx:$}}}),v$=new re({}),F$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),M$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[SXt]},$$scope:{ctx:$}}}),E$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[RXt]},$$scope:{ctx:$}}}),C$=new re({}),w$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[PXt]},$$scope:{ctx:$}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[BXt]},$$scope:{ctx:$}}}),x$=new re({}),$$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),S$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[IXt]},$$scope:{ctx:$}}}),R$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[NXt]},$$scope:{ctx:$}}}),P$=new re({}),B$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),N$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[qXt]},$$scope:{ctx:$}}}),q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[jXt]},$$scope:{ctx:$}}}),j$=new re({}),D$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),O$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[DXt]},$$scope:{ctx:$}}}),V$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[GXt]},$$scope:{ctx:$}}}),z$=new re({}),Q$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),H$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[OXt]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[VXt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ci=o("Auto Classes"),$m=l(),nt=a("p"),wi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ai=a("code"),I7=o("from_pretrained()"),km=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Li=o("Instantiating one of "),Rn=a("a"),N7=o("AutoConfig"),Pn=o(", "),Bn=a("a"),q7=o("AutoModel"),yi=o(`, and
`),In=a("a"),j7=o("AutoTokenizer"),xi=o(" will directly create a class of the relevant architecture. For instance"),Sm=l(),F($a.$$.fragment),We=l(),Ae=a("p"),uS=o("will create a model that is an instance of "),$i=a("a"),pS=o("BertModel"),_S=o("."),Co=l(),ka=a("p"),bS=o("There is one class of "),Rm=a("code"),vS=o("AutoModel"),QQe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kOe=l(),ki=a("h2"),Pm=a("a"),qte=a("span"),F(D7.$$.fragment),WQe=l(),jte=a("span"),HQe=o("Extending the Auto Classes"),SOe=l(),Nn=a("p"),UQe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dte=a("code"),JQe=o("NewModel"),YQe=o(", make sure you have a "),Gte=a("code"),KQe=o("NewModelConfig"),ZQe=o(` then you can add those to the auto
classes like this:`),ROe=l(),F(G7.$$.fragment),POe=l(),FS=a("p"),eWe=o("You will then be able to use the auto classes like you would usually do!"),BOe=l(),F(Bm.$$.fragment),IOe=l(),Si=a("h2"),Im=a("a"),Ote=a("span"),F(O7.$$.fragment),oWe=l(),Vte=a("span"),rWe=o("AutoConfig"),NOe=l(),wo=a("div"),F(V7.$$.fragment),tWe=l(),X7=a("p"),aWe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),TS=a("a"),nWe=o("from_pretrained()"),sWe=o(" class method."),lWe=l(),z7=a("p"),iWe=o("This class cannot be instantiated directly using "),Xte=a("code"),dWe=o("__init__()"),cWe=o(" (throws an error)."),mWe=l(),Ar=a("div"),F(Q7.$$.fragment),fWe=l(),zte=a("p"),gWe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),hWe=l(),Ri=a("p"),uWe=o("The configuration class to instantiate is selected based on the "),Qte=a("code"),pWe=o("model_type"),_We=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Wte=a("code"),bWe=o("pretrained_model_name_or_path"),vWe=o(":"),FWe=l(),A=a("ul"),Nm=a("li"),Hte=a("strong"),TWe=o("albert"),MWe=o(" \u2014 "),MS=a("a"),EWe=o("AlbertConfig"),CWe=o(" (ALBERT model)"),wWe=l(),qm=a("li"),Ute=a("strong"),AWe=o("bart"),LWe=o(" \u2014 "),ES=a("a"),yWe=o("BartConfig"),xWe=o(" (BART model)"),$We=l(),jm=a("li"),Jte=a("strong"),kWe=o("beit"),SWe=o(" \u2014 "),CS=a("a"),RWe=o("BeitConfig"),PWe=o(" (BEiT model)"),BWe=l(),Dm=a("li"),Yte=a("strong"),IWe=o("bert"),NWe=o(" \u2014 "),wS=a("a"),qWe=o("BertConfig"),jWe=o(" (BERT model)"),DWe=l(),Gm=a("li"),Kte=a("strong"),GWe=o("bert-generation"),OWe=o(" \u2014 "),AS=a("a"),VWe=o("BertGenerationConfig"),XWe=o(" (Bert Generation model)"),zWe=l(),Om=a("li"),Zte=a("strong"),QWe=o("big_bird"),WWe=o(" \u2014 "),LS=a("a"),HWe=o("BigBirdConfig"),UWe=o(" (BigBird model)"),JWe=l(),Vm=a("li"),eae=a("strong"),YWe=o("bigbird_pegasus"),KWe=o(" \u2014 "),yS=a("a"),ZWe=o("BigBirdPegasusConfig"),eHe=o(" (BigBird-Pegasus model)"),oHe=l(),Xm=a("li"),oae=a("strong"),rHe=o("blenderbot"),tHe=o(" \u2014 "),xS=a("a"),aHe=o("BlenderbotConfig"),nHe=o(" (Blenderbot model)"),sHe=l(),zm=a("li"),rae=a("strong"),lHe=o("blenderbot-small"),iHe=o(" \u2014 "),$S=a("a"),dHe=o("BlenderbotSmallConfig"),cHe=o(" (BlenderbotSmall model)"),mHe=l(),Qm=a("li"),tae=a("strong"),fHe=o("bloom"),gHe=o(" \u2014 "),kS=a("a"),hHe=o("BloomConfig"),uHe=o(" (BLOOM model)"),pHe=l(),Wm=a("li"),aae=a("strong"),_He=o("camembert"),bHe=o(" \u2014 "),SS=a("a"),vHe=o("CamembertConfig"),FHe=o(" (CamemBERT model)"),THe=l(),Hm=a("li"),nae=a("strong"),MHe=o("canine"),EHe=o(" \u2014 "),RS=a("a"),CHe=o("CanineConfig"),wHe=o(" (CANINE model)"),AHe=l(),Um=a("li"),sae=a("strong"),LHe=o("clip"),yHe=o(" \u2014 "),PS=a("a"),xHe=o("CLIPConfig"),$He=o(" (CLIP model)"),kHe=l(),Jm=a("li"),lae=a("strong"),SHe=o("codegen"),RHe=o(" \u2014 "),BS=a("a"),PHe=o("CodeGenConfig"),BHe=o(" (CodeGen model)"),IHe=l(),Ym=a("li"),iae=a("strong"),NHe=o("convbert"),qHe=o(" \u2014 "),IS=a("a"),jHe=o("ConvBertConfig"),DHe=o(" (ConvBERT model)"),GHe=l(),Km=a("li"),dae=a("strong"),OHe=o("convnext"),VHe=o(" \u2014 "),NS=a("a"),XHe=o("ConvNextConfig"),zHe=o(" (ConvNeXT model)"),QHe=l(),Zm=a("li"),cae=a("strong"),WHe=o("ctrl"),HHe=o(" \u2014 "),qS=a("a"),UHe=o("CTRLConfig"),JHe=o(" (CTRL model)"),YHe=l(),ef=a("li"),mae=a("strong"),KHe=o("cvt"),ZHe=o(" \u2014 "),jS=a("a"),eUe=o("CvtConfig"),oUe=o(" (CvT model)"),rUe=l(),of=a("li"),fae=a("strong"),tUe=o("data2vec-audio"),aUe=o(" \u2014 "),DS=a("a"),nUe=o("Data2VecAudioConfig"),sUe=o(" (Data2VecAudio model)"),lUe=l(),rf=a("li"),gae=a("strong"),iUe=o("data2vec-text"),dUe=o(" \u2014 "),GS=a("a"),cUe=o("Data2VecTextConfig"),mUe=o(" (Data2VecText model)"),fUe=l(),tf=a("li"),hae=a("strong"),gUe=o("data2vec-vision"),hUe=o(" \u2014 "),OS=a("a"),uUe=o("Data2VecVisionConfig"),pUe=o(" (Data2VecVision model)"),_Ue=l(),af=a("li"),uae=a("strong"),bUe=o("deberta"),vUe=o(" \u2014 "),VS=a("a"),FUe=o("DebertaConfig"),TUe=o(" (DeBERTa model)"),MUe=l(),nf=a("li"),pae=a("strong"),EUe=o("deberta-v2"),CUe=o(" \u2014 "),XS=a("a"),wUe=o("DebertaV2Config"),AUe=o(" (DeBERTa-v2 model)"),LUe=l(),sf=a("li"),_ae=a("strong"),yUe=o("decision_transformer"),xUe=o(" \u2014 "),zS=a("a"),$Ue=o("DecisionTransformerConfig"),kUe=o(" (Decision Transformer model)"),SUe=l(),lf=a("li"),bae=a("strong"),RUe=o("deit"),PUe=o(" \u2014 "),QS=a("a"),BUe=o("DeiTConfig"),IUe=o(" (DeiT model)"),NUe=l(),df=a("li"),vae=a("strong"),qUe=o("detr"),jUe=o(" \u2014 "),WS=a("a"),DUe=o("DetrConfig"),GUe=o(" (DETR model)"),OUe=l(),cf=a("li"),Fae=a("strong"),VUe=o("distilbert"),XUe=o(" \u2014 "),HS=a("a"),zUe=o("DistilBertConfig"),QUe=o(" (DistilBERT model)"),WUe=l(),mf=a("li"),Tae=a("strong"),HUe=o("dpr"),UUe=o(" \u2014 "),US=a("a"),JUe=o("DPRConfig"),YUe=o(" (DPR model)"),KUe=l(),ff=a("li"),Mae=a("strong"),ZUe=o("dpt"),eJe=o(" \u2014 "),JS=a("a"),oJe=o("DPTConfig"),rJe=o(" (DPT model)"),tJe=l(),gf=a("li"),Eae=a("strong"),aJe=o("electra"),nJe=o(" \u2014 "),YS=a("a"),sJe=o("ElectraConfig"),lJe=o(" (ELECTRA model)"),iJe=l(),hf=a("li"),Cae=a("strong"),dJe=o("encoder-decoder"),cJe=o(" \u2014 "),KS=a("a"),mJe=o("EncoderDecoderConfig"),fJe=o(" (Encoder decoder model)"),gJe=l(),uf=a("li"),wae=a("strong"),hJe=o("flaubert"),uJe=o(" \u2014 "),ZS=a("a"),pJe=o("FlaubertConfig"),_Je=o(" (FlauBERT model)"),bJe=l(),pf=a("li"),Aae=a("strong"),vJe=o("flava"),FJe=o(" \u2014 "),eR=a("a"),TJe=o("FlavaConfig"),MJe=o(" (FLAVA model)"),EJe=l(),_f=a("li"),Lae=a("strong"),CJe=o("fnet"),wJe=o(" \u2014 "),oR=a("a"),AJe=o("FNetConfig"),LJe=o(" (FNet model)"),yJe=l(),bf=a("li"),yae=a("strong"),xJe=o("fsmt"),$Je=o(" \u2014 "),rR=a("a"),kJe=o("FSMTConfig"),SJe=o(" (FairSeq Machine-Translation model)"),RJe=l(),vf=a("li"),xae=a("strong"),PJe=o("funnel"),BJe=o(" \u2014 "),tR=a("a"),IJe=o("FunnelConfig"),NJe=o(" (Funnel Transformer model)"),qJe=l(),Ff=a("li"),$ae=a("strong"),jJe=o("glpn"),DJe=o(" \u2014 "),aR=a("a"),GJe=o("GLPNConfig"),OJe=o(" (GLPN model)"),VJe=l(),Tf=a("li"),kae=a("strong"),XJe=o("gpt2"),zJe=o(" \u2014 "),nR=a("a"),QJe=o("GPT2Config"),WJe=o(" (OpenAI GPT-2 model)"),HJe=l(),Mf=a("li"),Sae=a("strong"),UJe=o("gpt_neo"),JJe=o(" \u2014 "),sR=a("a"),YJe=o("GPTNeoConfig"),KJe=o(" (GPT Neo model)"),ZJe=l(),Ef=a("li"),Rae=a("strong"),eYe=o("gpt_neox"),oYe=o(" \u2014 "),lR=a("a"),rYe=o("GPTNeoXConfig"),tYe=o(" (GPT NeoX model)"),aYe=l(),Cf=a("li"),Pae=a("strong"),nYe=o("gptj"),sYe=o(" \u2014 "),iR=a("a"),lYe=o("GPTJConfig"),iYe=o(" (GPT-J model)"),dYe=l(),wf=a("li"),Bae=a("strong"),cYe=o("groupvit"),mYe=o(" \u2014 "),dR=a("a"),fYe=o("GroupViTConfig"),gYe=o(" (GroupViT model)"),hYe=l(),Af=a("li"),Iae=a("strong"),uYe=o("hubert"),pYe=o(" \u2014 "),cR=a("a"),_Ye=o("HubertConfig"),bYe=o(" (Hubert model)"),vYe=l(),Lf=a("li"),Nae=a("strong"),FYe=o("ibert"),TYe=o(" \u2014 "),mR=a("a"),MYe=o("IBertConfig"),EYe=o(" (I-BERT model)"),CYe=l(),yf=a("li"),qae=a("strong"),wYe=o("imagegpt"),AYe=o(" \u2014 "),fR=a("a"),LYe=o("ImageGPTConfig"),yYe=o(" (ImageGPT model)"),xYe=l(),xf=a("li"),jae=a("strong"),$Ye=o("layoutlm"),kYe=o(" \u2014 "),gR=a("a"),SYe=o("LayoutLMConfig"),RYe=o(" (LayoutLM model)"),PYe=l(),$f=a("li"),Dae=a("strong"),BYe=o("layoutlmv2"),IYe=o(" \u2014 "),hR=a("a"),NYe=o("LayoutLMv2Config"),qYe=o(" (LayoutLMv2 model)"),jYe=l(),kf=a("li"),Gae=a("strong"),DYe=o("layoutlmv3"),GYe=o(" \u2014 "),uR=a("a"),OYe=o("LayoutLMv3Config"),VYe=o(" (LayoutLMv3 model)"),XYe=l(),Sf=a("li"),Oae=a("strong"),zYe=o("led"),QYe=o(" \u2014 "),pR=a("a"),WYe=o("LEDConfig"),HYe=o(" (LED model)"),UYe=l(),Rf=a("li"),Vae=a("strong"),JYe=o("levit"),YYe=o(" \u2014 "),_R=a("a"),KYe=o("LevitConfig"),ZYe=o(" (LeViT model)"),eKe=l(),Pf=a("li"),Xae=a("strong"),oKe=o("longformer"),rKe=o(" \u2014 "),bR=a("a"),tKe=o("LongformerConfig"),aKe=o(" (Longformer model)"),nKe=l(),Bf=a("li"),zae=a("strong"),sKe=o("longt5"),lKe=o(" \u2014 "),vR=a("a"),iKe=o("LongT5Config"),dKe=o(" (LongT5 model)"),cKe=l(),If=a("li"),Qae=a("strong"),mKe=o("luke"),fKe=o(" \u2014 "),FR=a("a"),gKe=o("LukeConfig"),hKe=o(" (LUKE model)"),uKe=l(),Nf=a("li"),Wae=a("strong"),pKe=o("lxmert"),_Ke=o(" \u2014 "),TR=a("a"),bKe=o("LxmertConfig"),vKe=o(" (LXMERT model)"),FKe=l(),qf=a("li"),Hae=a("strong"),TKe=o("m2m_100"),MKe=o(" \u2014 "),MR=a("a"),EKe=o("M2M100Config"),CKe=o(" (M2M100 model)"),wKe=l(),jf=a("li"),Uae=a("strong"),AKe=o("marian"),LKe=o(" \u2014 "),ER=a("a"),yKe=o("MarianConfig"),xKe=o(" (Marian model)"),$Ke=l(),Df=a("li"),Jae=a("strong"),kKe=o("maskformer"),SKe=o(" \u2014 "),CR=a("a"),RKe=o("MaskFormerConfig"),PKe=o(" (MaskFormer model)"),BKe=l(),Gf=a("li"),Yae=a("strong"),IKe=o("mbart"),NKe=o(" \u2014 "),wR=a("a"),qKe=o("MBartConfig"),jKe=o(" (mBART model)"),DKe=l(),Of=a("li"),Kae=a("strong"),GKe=o("mctct"),OKe=o(" \u2014 "),AR=a("a"),VKe=o("MCTCTConfig"),XKe=o(" (M-CTC-T model)"),zKe=l(),Vf=a("li"),Zae=a("strong"),QKe=o("megatron-bert"),WKe=o(" \u2014 "),LR=a("a"),HKe=o("MegatronBertConfig"),UKe=o(" (Megatron-BERT model)"),JKe=l(),Xf=a("li"),ene=a("strong"),YKe=o("mobilebert"),KKe=o(" \u2014 "),yR=a("a"),ZKe=o("MobileBertConfig"),eZe=o(" (MobileBERT model)"),oZe=l(),zf=a("li"),one=a("strong"),rZe=o("mpnet"),tZe=o(" \u2014 "),xR=a("a"),aZe=o("MPNetConfig"),nZe=o(" (MPNet model)"),sZe=l(),Qf=a("li"),rne=a("strong"),lZe=o("mt5"),iZe=o(" \u2014 "),$R=a("a"),dZe=o("MT5Config"),cZe=o(" (MT5 model)"),mZe=l(),Wf=a("li"),tne=a("strong"),fZe=o("nezha"),gZe=o(" \u2014 "),kR=a("a"),hZe=o("NezhaConfig"),uZe=o(" (Nezha model)"),pZe=l(),Hf=a("li"),ane=a("strong"),_Ze=o("nystromformer"),bZe=o(" \u2014 "),SR=a("a"),vZe=o("NystromformerConfig"),FZe=o(" (Nystr\xF6mformer model)"),TZe=l(),Uf=a("li"),nne=a("strong"),MZe=o("openai-gpt"),EZe=o(" \u2014 "),RR=a("a"),CZe=o("OpenAIGPTConfig"),wZe=o(" (OpenAI GPT model)"),AZe=l(),Jf=a("li"),sne=a("strong"),LZe=o("opt"),yZe=o(" \u2014 "),PR=a("a"),xZe=o("OPTConfig"),$Ze=o(" (OPT model)"),kZe=l(),Yf=a("li"),lne=a("strong"),SZe=o("pegasus"),RZe=o(" \u2014 "),BR=a("a"),PZe=o("PegasusConfig"),BZe=o(" (Pegasus model)"),IZe=l(),Kf=a("li"),ine=a("strong"),NZe=o("perceiver"),qZe=o(" \u2014 "),IR=a("a"),jZe=o("PerceiverConfig"),DZe=o(" (Perceiver model)"),GZe=l(),Zf=a("li"),dne=a("strong"),OZe=o("plbart"),VZe=o(" \u2014 "),NR=a("a"),XZe=o("PLBartConfig"),zZe=o(" (PLBart model)"),QZe=l(),eg=a("li"),cne=a("strong"),WZe=o("poolformer"),HZe=o(" \u2014 "),qR=a("a"),UZe=o("PoolFormerConfig"),JZe=o(" (PoolFormer model)"),YZe=l(),og=a("li"),mne=a("strong"),KZe=o("prophetnet"),ZZe=o(" \u2014 "),jR=a("a"),eeo=o("ProphetNetConfig"),oeo=o(" (ProphetNet model)"),reo=l(),rg=a("li"),fne=a("strong"),teo=o("qdqbert"),aeo=o(" \u2014 "),DR=a("a"),neo=o("QDQBertConfig"),seo=o(" (QDQBert model)"),leo=l(),tg=a("li"),gne=a("strong"),ieo=o("rag"),deo=o(" \u2014 "),GR=a("a"),ceo=o("RagConfig"),meo=o(" (RAG model)"),feo=l(),ag=a("li"),hne=a("strong"),geo=o("realm"),heo=o(" \u2014 "),OR=a("a"),ueo=o("RealmConfig"),peo=o(" (REALM model)"),_eo=l(),ng=a("li"),une=a("strong"),beo=o("reformer"),veo=o(" \u2014 "),VR=a("a"),Feo=o("ReformerConfig"),Teo=o(" (Reformer model)"),Meo=l(),sg=a("li"),pne=a("strong"),Eeo=o("regnet"),Ceo=o(" \u2014 "),XR=a("a"),weo=o("RegNetConfig"),Aeo=o(" (RegNet model)"),Leo=l(),lg=a("li"),_ne=a("strong"),yeo=o("rembert"),xeo=o(" \u2014 "),zR=a("a"),$eo=o("RemBertConfig"),keo=o(" (RemBERT model)"),Seo=l(),ig=a("li"),bne=a("strong"),Reo=o("resnet"),Peo=o(" \u2014 "),QR=a("a"),Beo=o("ResNetConfig"),Ieo=o(" (ResNet model)"),Neo=l(),dg=a("li"),vne=a("strong"),qeo=o("retribert"),jeo=o(" \u2014 "),WR=a("a"),Deo=o("RetriBertConfig"),Geo=o(" (RetriBERT model)"),Oeo=l(),cg=a("li"),Fne=a("strong"),Veo=o("roberta"),Xeo=o(" \u2014 "),HR=a("a"),zeo=o("RobertaConfig"),Qeo=o(" (RoBERTa model)"),Weo=l(),mg=a("li"),Tne=a("strong"),Heo=o("roformer"),Ueo=o(" \u2014 "),UR=a("a"),Jeo=o("RoFormerConfig"),Yeo=o(" (RoFormer model)"),Keo=l(),fg=a("li"),Mne=a("strong"),Zeo=o("segformer"),eoo=o(" \u2014 "),JR=a("a"),ooo=o("SegformerConfig"),roo=o(" (SegFormer model)"),too=l(),gg=a("li"),Ene=a("strong"),aoo=o("sew"),noo=o(" \u2014 "),YR=a("a"),soo=o("SEWConfig"),loo=o(" (SEW model)"),ioo=l(),hg=a("li"),Cne=a("strong"),doo=o("sew-d"),coo=o(" \u2014 "),KR=a("a"),moo=o("SEWDConfig"),foo=o(" (SEW-D model)"),goo=l(),ug=a("li"),wne=a("strong"),hoo=o("speech-encoder-decoder"),uoo=o(" \u2014 "),ZR=a("a"),poo=o("SpeechEncoderDecoderConfig"),_oo=o(" (Speech Encoder decoder model)"),boo=l(),pg=a("li"),Ane=a("strong"),voo=o("speech_to_text"),Foo=o(" \u2014 "),eP=a("a"),Too=o("Speech2TextConfig"),Moo=o(" (Speech2Text model)"),Eoo=l(),_g=a("li"),Lne=a("strong"),Coo=o("speech_to_text_2"),woo=o(" \u2014 "),oP=a("a"),Aoo=o("Speech2Text2Config"),Loo=o(" (Speech2Text2 model)"),yoo=l(),bg=a("li"),yne=a("strong"),xoo=o("splinter"),$oo=o(" \u2014 "),rP=a("a"),koo=o("SplinterConfig"),Soo=o(" (Splinter model)"),Roo=l(),vg=a("li"),xne=a("strong"),Poo=o("squeezebert"),Boo=o(" \u2014 "),tP=a("a"),Ioo=o("SqueezeBertConfig"),Noo=o(" (SqueezeBERT model)"),qoo=l(),Fg=a("li"),$ne=a("strong"),joo=o("swin"),Doo=o(" \u2014 "),aP=a("a"),Goo=o("SwinConfig"),Ooo=o(" (Swin Transformer model)"),Voo=l(),Tg=a("li"),kne=a("strong"),Xoo=o("t5"),zoo=o(" \u2014 "),nP=a("a"),Qoo=o("T5Config"),Woo=o(" (T5 model)"),Hoo=l(),Mg=a("li"),Sne=a("strong"),Uoo=o("tapas"),Joo=o(" \u2014 "),sP=a("a"),Yoo=o("TapasConfig"),Koo=o(" (TAPAS model)"),Zoo=l(),Eg=a("li"),Rne=a("strong"),ero=o("trajectory_transformer"),oro=o(" \u2014 "),lP=a("a"),rro=o("TrajectoryTransformerConfig"),tro=o(" (Trajectory Transformer model)"),aro=l(),Cg=a("li"),Pne=a("strong"),nro=o("transfo-xl"),sro=o(" \u2014 "),iP=a("a"),lro=o("TransfoXLConfig"),iro=o(" (Transformer-XL model)"),dro=l(),wg=a("li"),Bne=a("strong"),cro=o("trocr"),mro=o(" \u2014 "),dP=a("a"),fro=o("TrOCRConfig"),gro=o(" (TrOCR model)"),hro=l(),Ag=a("li"),Ine=a("strong"),uro=o("unispeech"),pro=o(" \u2014 "),cP=a("a"),_ro=o("UniSpeechConfig"),bro=o(" (UniSpeech model)"),vro=l(),Lg=a("li"),Nne=a("strong"),Fro=o("unispeech-sat"),Tro=o(" \u2014 "),mP=a("a"),Mro=o("UniSpeechSatConfig"),Ero=o(" (UniSpeechSat model)"),Cro=l(),yg=a("li"),qne=a("strong"),wro=o("van"),Aro=o(" \u2014 "),fP=a("a"),Lro=o("VanConfig"),yro=o(" (VAN model)"),xro=l(),xg=a("li"),jne=a("strong"),$ro=o("vilt"),kro=o(" \u2014 "),gP=a("a"),Sro=o("ViltConfig"),Rro=o(" (ViLT model)"),Pro=l(),$g=a("li"),Dne=a("strong"),Bro=o("vision-encoder-decoder"),Iro=o(" \u2014 "),hP=a("a"),Nro=o("VisionEncoderDecoderConfig"),qro=o(" (Vision Encoder decoder model)"),jro=l(),kg=a("li"),Gne=a("strong"),Dro=o("vision-text-dual-encoder"),Gro=o(" \u2014 "),uP=a("a"),Oro=o("VisionTextDualEncoderConfig"),Vro=o(" (VisionTextDualEncoder model)"),Xro=l(),Sg=a("li"),One=a("strong"),zro=o("visual_bert"),Qro=o(" \u2014 "),pP=a("a"),Wro=o("VisualBertConfig"),Hro=o(" (VisualBERT model)"),Uro=l(),Rg=a("li"),Vne=a("strong"),Jro=o("vit"),Yro=o(" \u2014 "),_P=a("a"),Kro=o("ViTConfig"),Zro=o(" (ViT model)"),eto=l(),Pg=a("li"),Xne=a("strong"),oto=o("vit_mae"),rto=o(" \u2014 "),bP=a("a"),tto=o("ViTMAEConfig"),ato=o(" (ViTMAE model)"),nto=l(),Bg=a("li"),zne=a("strong"),sto=o("wav2vec2"),lto=o(" \u2014 "),vP=a("a"),ito=o("Wav2Vec2Config"),dto=o(" (Wav2Vec2 model)"),cto=l(),Ig=a("li"),Qne=a("strong"),mto=o("wav2vec2-conformer"),fto=o(" \u2014 "),FP=a("a"),gto=o("Wav2Vec2ConformerConfig"),hto=o(" (Wav2Vec2-Conformer model)"),uto=l(),Ng=a("li"),Wne=a("strong"),pto=o("wavlm"),_to=o(" \u2014 "),TP=a("a"),bto=o("WavLMConfig"),vto=o(" (WavLM model)"),Fto=l(),qg=a("li"),Hne=a("strong"),Tto=o("xglm"),Mto=o(" \u2014 "),MP=a("a"),Eto=o("XGLMConfig"),Cto=o(" (XGLM model)"),wto=l(),jg=a("li"),Une=a("strong"),Ato=o("xlm"),Lto=o(" \u2014 "),EP=a("a"),yto=o("XLMConfig"),xto=o(" (XLM model)"),$to=l(),Dg=a("li"),Jne=a("strong"),kto=o("xlm-prophetnet"),Sto=o(" \u2014 "),CP=a("a"),Rto=o("XLMProphetNetConfig"),Pto=o(" (XLM-ProphetNet model)"),Bto=l(),Gg=a("li"),Yne=a("strong"),Ito=o("xlm-roberta"),Nto=o(" \u2014 "),wP=a("a"),qto=o("XLMRobertaConfig"),jto=o(" (XLM-RoBERTa model)"),Dto=l(),Og=a("li"),Kne=a("strong"),Gto=o("xlm-roberta-xl"),Oto=o(" \u2014 "),AP=a("a"),Vto=o("XLMRobertaXLConfig"),Xto=o(" (XLM-RoBERTa-XL model)"),zto=l(),Vg=a("li"),Zne=a("strong"),Qto=o("xlnet"),Wto=o(" \u2014 "),LP=a("a"),Hto=o("XLNetConfig"),Uto=o(" (XLNet model)"),Jto=l(),Xg=a("li"),ese=a("strong"),Yto=o("yolos"),Kto=o(" \u2014 "),yP=a("a"),Zto=o("YolosConfig"),eao=o(" (YOLOS model)"),oao=l(),zg=a("li"),ose=a("strong"),rao=o("yoso"),tao=o(" \u2014 "),xP=a("a"),aao=o("YosoConfig"),nao=o(" (YOSO model)"),sao=l(),F(Qg.$$.fragment),lao=l(),Wg=a("div"),F(W7.$$.fragment),iao=l(),rse=a("p"),dao=o("Register a new configuration for this class."),qOe=l(),Pi=a("h2"),Hg=a("a"),tse=a("span"),F(H7.$$.fragment),cao=l(),ase=a("span"),mao=o("AutoTokenizer"),jOe=l(),Ao=a("div"),F(U7.$$.fragment),fao=l(),J7=a("p"),gao=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$P=a("a"),hao=o("AutoTokenizer.from_pretrained()"),uao=o(" class method."),pao=l(),Y7=a("p"),_ao=o("This class cannot be instantiated directly using "),nse=a("code"),bao=o("__init__()"),vao=o(" (throws an error)."),Fao=l(),Lr=a("div"),F(K7.$$.fragment),Tao=l(),sse=a("p"),Mao=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Eao=l(),Sa=a("p"),Cao=o("The tokenizer class to instantiate is selected based on the "),lse=a("code"),wao=o("model_type"),Aao=o(` property of the config object (either
passed as an argument or loaded from `),ise=a("code"),Lao=o("pretrained_model_name_or_path"),yao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=a("code"),xao=o("pretrained_model_name_or_path"),$ao=o(":"),kao=l(),k=a("ul"),qn=a("li"),cse=a("strong"),Sao=o("albert"),Rao=o(" \u2014 "),kP=a("a"),Pao=o("AlbertTokenizer"),Bao=o(" or "),SP=a("a"),Iao=o("AlbertTokenizerFast"),Nao=o(" (ALBERT model)"),qao=l(),jn=a("li"),mse=a("strong"),jao=o("bart"),Dao=o(" \u2014 "),RP=a("a"),Gao=o("BartTokenizer"),Oao=o(" or "),PP=a("a"),Vao=o("BartTokenizerFast"),Xao=o(" (BART model)"),zao=l(),Dn=a("li"),fse=a("strong"),Qao=o("barthez"),Wao=o(" \u2014 "),BP=a("a"),Hao=o("BarthezTokenizer"),Uao=o(" or "),IP=a("a"),Jao=o("BarthezTokenizerFast"),Yao=o(" (BARThez model)"),Kao=l(),Ug=a("li"),gse=a("strong"),Zao=o("bartpho"),eno=o(" \u2014 "),NP=a("a"),ono=o("BartphoTokenizer"),rno=o(" (BARTpho model)"),tno=l(),Gn=a("li"),hse=a("strong"),ano=o("bert"),nno=o(" \u2014 "),qP=a("a"),sno=o("BertTokenizer"),lno=o(" or "),jP=a("a"),ino=o("BertTokenizerFast"),dno=o(" (BERT model)"),cno=l(),Jg=a("li"),use=a("strong"),mno=o("bert-generation"),fno=o(" \u2014 "),DP=a("a"),gno=o("BertGenerationTokenizer"),hno=o(" (Bert Generation model)"),uno=l(),Yg=a("li"),pse=a("strong"),pno=o("bert-japanese"),_no=o(" \u2014 "),GP=a("a"),bno=o("BertJapaneseTokenizer"),vno=o(" (BertJapanese model)"),Fno=l(),Kg=a("li"),_se=a("strong"),Tno=o("bertweet"),Mno=o(" \u2014 "),OP=a("a"),Eno=o("BertweetTokenizer"),Cno=o(" (BERTweet model)"),wno=l(),On=a("li"),bse=a("strong"),Ano=o("big_bird"),Lno=o(" \u2014 "),VP=a("a"),yno=o("BigBirdTokenizer"),xno=o(" or "),XP=a("a"),$no=o("BigBirdTokenizerFast"),kno=o(" (BigBird model)"),Sno=l(),Vn=a("li"),vse=a("strong"),Rno=o("bigbird_pegasus"),Pno=o(" \u2014 "),zP=a("a"),Bno=o("PegasusTokenizer"),Ino=o(" or "),QP=a("a"),Nno=o("PegasusTokenizerFast"),qno=o(" (BigBird-Pegasus model)"),jno=l(),Xn=a("li"),Fse=a("strong"),Dno=o("blenderbot"),Gno=o(" \u2014 "),WP=a("a"),Ono=o("BlenderbotTokenizer"),Vno=o(" or "),HP=a("a"),Xno=o("BlenderbotTokenizerFast"),zno=o(" (Blenderbot model)"),Qno=l(),Zg=a("li"),Tse=a("strong"),Wno=o("blenderbot-small"),Hno=o(" \u2014 "),UP=a("a"),Uno=o("BlenderbotSmallTokenizer"),Jno=o(" (BlenderbotSmall model)"),Yno=l(),eh=a("li"),Mse=a("strong"),Kno=o("bloom"),Zno=o(" \u2014 "),JP=a("a"),eso=o("BloomTokenizerFast"),oso=o(" (BLOOM model)"),rso=l(),oh=a("li"),Ese=a("strong"),tso=o("byt5"),aso=o(" \u2014 "),YP=a("a"),nso=o("ByT5Tokenizer"),sso=o(" (ByT5 model)"),lso=l(),zn=a("li"),Cse=a("strong"),iso=o("camembert"),dso=o(" \u2014 "),KP=a("a"),cso=o("CamembertTokenizer"),mso=o(" or "),ZP=a("a"),fso=o("CamembertTokenizerFast"),gso=o(" (CamemBERT model)"),hso=l(),rh=a("li"),wse=a("strong"),uso=o("canine"),pso=o(" \u2014 "),eB=a("a"),_so=o("CanineTokenizer"),bso=o(" (CANINE model)"),vso=l(),Qn=a("li"),Ase=a("strong"),Fso=o("clip"),Tso=o(" \u2014 "),oB=a("a"),Mso=o("CLIPTokenizer"),Eso=o(" or "),rB=a("a"),Cso=o("CLIPTokenizerFast"),wso=o(" (CLIP model)"),Aso=l(),Wn=a("li"),Lse=a("strong"),Lso=o("codegen"),yso=o(" \u2014 "),tB=a("a"),xso=o("CodeGenTokenizer"),$so=o(" or "),aB=a("a"),kso=o("CodeGenTokenizerFast"),Sso=o(" (CodeGen model)"),Rso=l(),Hn=a("li"),yse=a("strong"),Pso=o("convbert"),Bso=o(" \u2014 "),nB=a("a"),Iso=o("ConvBertTokenizer"),Nso=o(" or "),sB=a("a"),qso=o("ConvBertTokenizerFast"),jso=o(" (ConvBERT model)"),Dso=l(),Un=a("li"),xse=a("strong"),Gso=o("cpm"),Oso=o(" \u2014 "),lB=a("a"),Vso=o("CpmTokenizer"),Xso=o(" or "),iB=a("a"),zso=o("CpmTokenizerFast"),Qso=o(" (CPM model)"),Wso=l(),th=a("li"),$se=a("strong"),Hso=o("ctrl"),Uso=o(" \u2014 "),dB=a("a"),Jso=o("CTRLTokenizer"),Yso=o(" (CTRL model)"),Kso=l(),Jn=a("li"),kse=a("strong"),Zso=o("data2vec-text"),elo=o(" \u2014 "),cB=a("a"),olo=o("RobertaTokenizer"),rlo=o(" or "),mB=a("a"),tlo=o("RobertaTokenizerFast"),alo=o(" (Data2VecText model)"),nlo=l(),Yn=a("li"),Sse=a("strong"),slo=o("deberta"),llo=o(" \u2014 "),fB=a("a"),ilo=o("DebertaTokenizer"),dlo=o(" or "),gB=a("a"),clo=o("DebertaTokenizerFast"),mlo=o(" (DeBERTa model)"),flo=l(),Kn=a("li"),Rse=a("strong"),glo=o("deberta-v2"),hlo=o(" \u2014 "),hB=a("a"),ulo=o("DebertaV2Tokenizer"),plo=o(" or "),uB=a("a"),_lo=o("DebertaV2TokenizerFast"),blo=o(" (DeBERTa-v2 model)"),vlo=l(),Zn=a("li"),Pse=a("strong"),Flo=o("distilbert"),Tlo=o(" \u2014 "),pB=a("a"),Mlo=o("DistilBertTokenizer"),Elo=o(" or "),_B=a("a"),Clo=o("DistilBertTokenizerFast"),wlo=o(" (DistilBERT model)"),Alo=l(),es=a("li"),Bse=a("strong"),Llo=o("dpr"),ylo=o(" \u2014 "),bB=a("a"),xlo=o("DPRQuestionEncoderTokenizer"),$lo=o(" or "),vB=a("a"),klo=o("DPRQuestionEncoderTokenizerFast"),Slo=o(" (DPR model)"),Rlo=l(),os=a("li"),Ise=a("strong"),Plo=o("electra"),Blo=o(" \u2014 "),FB=a("a"),Ilo=o("ElectraTokenizer"),Nlo=o(" or "),TB=a("a"),qlo=o("ElectraTokenizerFast"),jlo=o(" (ELECTRA model)"),Dlo=l(),ah=a("li"),Nse=a("strong"),Glo=o("flaubert"),Olo=o(" \u2014 "),MB=a("a"),Vlo=o("FlaubertTokenizer"),Xlo=o(" (FlauBERT model)"),zlo=l(),rs=a("li"),qse=a("strong"),Qlo=o("fnet"),Wlo=o(" \u2014 "),EB=a("a"),Hlo=o("FNetTokenizer"),Ulo=o(" or "),CB=a("a"),Jlo=o("FNetTokenizerFast"),Ylo=o(" (FNet model)"),Klo=l(),nh=a("li"),jse=a("strong"),Zlo=o("fsmt"),eio=o(" \u2014 "),wB=a("a"),oio=o("FSMTTokenizer"),rio=o(" (FairSeq Machine-Translation model)"),tio=l(),ts=a("li"),Dse=a("strong"),aio=o("funnel"),nio=o(" \u2014 "),AB=a("a"),sio=o("FunnelTokenizer"),lio=o(" or "),LB=a("a"),iio=o("FunnelTokenizerFast"),dio=o(" (Funnel Transformer model)"),cio=l(),as=a("li"),Gse=a("strong"),mio=o("gpt2"),fio=o(" \u2014 "),yB=a("a"),gio=o("GPT2Tokenizer"),hio=o(" or "),xB=a("a"),uio=o("GPT2TokenizerFast"),pio=o(" (OpenAI GPT-2 model)"),_io=l(),ns=a("li"),Ose=a("strong"),bio=o("gpt_neo"),vio=o(" \u2014 "),$B=a("a"),Fio=o("GPT2Tokenizer"),Tio=o(" or "),kB=a("a"),Mio=o("GPT2TokenizerFast"),Eio=o(" (GPT Neo model)"),Cio=l(),sh=a("li"),Vse=a("strong"),wio=o("gpt_neox"),Aio=o(" \u2014 "),SB=a("a"),Lio=o("GPTNeoXTokenizerFast"),yio=o(" (GPT NeoX model)"),xio=l(),ss=a("li"),Xse=a("strong"),$io=o("gptj"),kio=o(" \u2014 "),RB=a("a"),Sio=o("GPT2Tokenizer"),Rio=o(" or "),PB=a("a"),Pio=o("GPT2TokenizerFast"),Bio=o(" (GPT-J model)"),Iio=l(),ls=a("li"),zse=a("strong"),Nio=o("groupvit"),qio=o(" \u2014 "),BB=a("a"),jio=o("CLIPTokenizer"),Dio=o(" or "),IB=a("a"),Gio=o("CLIPTokenizerFast"),Oio=o(" (GroupViT model)"),Vio=l(),is=a("li"),Qse=a("strong"),Xio=o("herbert"),zio=o(" \u2014 "),NB=a("a"),Qio=o("HerbertTokenizer"),Wio=o(" or "),qB=a("a"),Hio=o("HerbertTokenizerFast"),Uio=o(" (HerBERT model)"),Jio=l(),lh=a("li"),Wse=a("strong"),Yio=o("hubert"),Kio=o(" \u2014 "),jB=a("a"),Zio=o("Wav2Vec2CTCTokenizer"),edo=o(" (Hubert model)"),odo=l(),ds=a("li"),Hse=a("strong"),rdo=o("ibert"),tdo=o(" \u2014 "),DB=a("a"),ado=o("RobertaTokenizer"),ndo=o(" or "),GB=a("a"),sdo=o("RobertaTokenizerFast"),ldo=o(" (I-BERT model)"),ido=l(),cs=a("li"),Use=a("strong"),ddo=o("layoutlm"),cdo=o(" \u2014 "),OB=a("a"),mdo=o("LayoutLMTokenizer"),fdo=o(" or "),VB=a("a"),gdo=o("LayoutLMTokenizerFast"),hdo=o(" (LayoutLM model)"),udo=l(),ms=a("li"),Jse=a("strong"),pdo=o("layoutlmv2"),_do=o(" \u2014 "),XB=a("a"),bdo=o("LayoutLMv2Tokenizer"),vdo=o(" or "),zB=a("a"),Fdo=o("LayoutLMv2TokenizerFast"),Tdo=o(" (LayoutLMv2 model)"),Mdo=l(),fs=a("li"),Yse=a("strong"),Edo=o("layoutlmv3"),Cdo=o(" \u2014 "),QB=a("a"),wdo=o("LayoutLMv3Tokenizer"),Ado=o(" or "),WB=a("a"),Ldo=o("LayoutLMv3TokenizerFast"),ydo=o(" (LayoutLMv3 model)"),xdo=l(),gs=a("li"),Kse=a("strong"),$do=o("layoutxlm"),kdo=o(" \u2014 "),HB=a("a"),Sdo=o("LayoutXLMTokenizer"),Rdo=o(" or "),UB=a("a"),Pdo=o("LayoutXLMTokenizerFast"),Bdo=o(" (LayoutXLM model)"),Ido=l(),hs=a("li"),Zse=a("strong"),Ndo=o("led"),qdo=o(" \u2014 "),JB=a("a"),jdo=o("LEDTokenizer"),Ddo=o(" or "),YB=a("a"),Gdo=o("LEDTokenizerFast"),Odo=o(" (LED model)"),Vdo=l(),us=a("li"),ele=a("strong"),Xdo=o("longformer"),zdo=o(" \u2014 "),KB=a("a"),Qdo=o("LongformerTokenizer"),Wdo=o(" or "),ZB=a("a"),Hdo=o("LongformerTokenizerFast"),Udo=o(" (Longformer model)"),Jdo=l(),ps=a("li"),ole=a("strong"),Ydo=o("longt5"),Kdo=o(" \u2014 "),eI=a("a"),Zdo=o("T5Tokenizer"),eco=o(" or "),oI=a("a"),oco=o("T5TokenizerFast"),rco=o(" (LongT5 model)"),tco=l(),ih=a("li"),rle=a("strong"),aco=o("luke"),nco=o(" \u2014 "),rI=a("a"),sco=o("LukeTokenizer"),lco=o(" (LUKE model)"),ico=l(),_s=a("li"),tle=a("strong"),dco=o("lxmert"),cco=o(" \u2014 "),tI=a("a"),mco=o("LxmertTokenizer"),fco=o(" or "),aI=a("a"),gco=o("LxmertTokenizerFast"),hco=o(" (LXMERT model)"),uco=l(),dh=a("li"),ale=a("strong"),pco=o("m2m_100"),_co=o(" \u2014 "),nI=a("a"),bco=o("M2M100Tokenizer"),vco=o(" (M2M100 model)"),Fco=l(),ch=a("li"),nle=a("strong"),Tco=o("marian"),Mco=o(" \u2014 "),sI=a("a"),Eco=o("MarianTokenizer"),Cco=o(" (Marian model)"),wco=l(),bs=a("li"),sle=a("strong"),Aco=o("mbart"),Lco=o(" \u2014 "),lI=a("a"),yco=o("MBartTokenizer"),xco=o(" or "),iI=a("a"),$co=o("MBartTokenizerFast"),kco=o(" (mBART model)"),Sco=l(),vs=a("li"),lle=a("strong"),Rco=o("mbart50"),Pco=o(" \u2014 "),dI=a("a"),Bco=o("MBart50Tokenizer"),Ico=o(" or "),cI=a("a"),Nco=o("MBart50TokenizerFast"),qco=o(" (mBART-50 model)"),jco=l(),Fs=a("li"),ile=a("strong"),Dco=o("megatron-bert"),Gco=o(" \u2014 "),mI=a("a"),Oco=o("BertTokenizer"),Vco=o(" or "),fI=a("a"),Xco=o("BertTokenizerFast"),zco=o(" (Megatron-BERT model)"),Qco=l(),mh=a("li"),dle=a("strong"),Wco=o("mluke"),Hco=o(" \u2014 "),gI=a("a"),Uco=o("MLukeTokenizer"),Jco=o(" (mLUKE model)"),Yco=l(),Ts=a("li"),cle=a("strong"),Kco=o("mobilebert"),Zco=o(" \u2014 "),hI=a("a"),emo=o("MobileBertTokenizer"),omo=o(" or "),uI=a("a"),rmo=o("MobileBertTokenizerFast"),tmo=o(" (MobileBERT model)"),amo=l(),Ms=a("li"),mle=a("strong"),nmo=o("mpnet"),smo=o(" \u2014 "),pI=a("a"),lmo=o("MPNetTokenizer"),imo=o(" or "),_I=a("a"),dmo=o("MPNetTokenizerFast"),cmo=o(" (MPNet model)"),mmo=l(),Es=a("li"),fle=a("strong"),fmo=o("mt5"),gmo=o(" \u2014 "),bI=a("a"),hmo=o("MT5Tokenizer"),umo=o(" or "),vI=a("a"),pmo=o("MT5TokenizerFast"),_mo=o(" (MT5 model)"),bmo=l(),Cs=a("li"),gle=a("strong"),vmo=o("nezha"),Fmo=o(" \u2014 "),FI=a("a"),Tmo=o("BertTokenizer"),Mmo=o(" or "),TI=a("a"),Emo=o("BertTokenizerFast"),Cmo=o(" (Nezha model)"),wmo=l(),ws=a("li"),hle=a("strong"),Amo=o("nystromformer"),Lmo=o(" \u2014 "),MI=a("a"),ymo=o("AlbertTokenizer"),xmo=o(" or "),EI=a("a"),$mo=o("AlbertTokenizerFast"),kmo=o(" (Nystr\xF6mformer model)"),Smo=l(),As=a("li"),ule=a("strong"),Rmo=o("openai-gpt"),Pmo=o(" \u2014 "),CI=a("a"),Bmo=o("OpenAIGPTTokenizer"),Imo=o(" or "),wI=a("a"),Nmo=o("OpenAIGPTTokenizerFast"),qmo=o(" (OpenAI GPT model)"),jmo=l(),fh=a("li"),ple=a("strong"),Dmo=o("opt"),Gmo=o(" \u2014 "),AI=a("a"),Omo=o("GPT2Tokenizer"),Vmo=o(" (OPT model)"),Xmo=l(),Ls=a("li"),_le=a("strong"),zmo=o("pegasus"),Qmo=o(" \u2014 "),LI=a("a"),Wmo=o("PegasusTokenizer"),Hmo=o(" or "),yI=a("a"),Umo=o("PegasusTokenizerFast"),Jmo=o(" (Pegasus model)"),Ymo=l(),gh=a("li"),ble=a("strong"),Kmo=o("perceiver"),Zmo=o(" \u2014 "),xI=a("a"),efo=o("PerceiverTokenizer"),ofo=o(" (Perceiver model)"),rfo=l(),hh=a("li"),vle=a("strong"),tfo=o("phobert"),afo=o(" \u2014 "),$I=a("a"),nfo=o("PhobertTokenizer"),sfo=o(" (PhoBERT model)"),lfo=l(),uh=a("li"),Fle=a("strong"),ifo=o("plbart"),dfo=o(" \u2014 "),kI=a("a"),cfo=o("PLBartTokenizer"),mfo=o(" (PLBart model)"),ffo=l(),ph=a("li"),Tle=a("strong"),gfo=o("prophetnet"),hfo=o(" \u2014 "),SI=a("a"),ufo=o("ProphetNetTokenizer"),pfo=o(" (ProphetNet model)"),_fo=l(),ys=a("li"),Mle=a("strong"),bfo=o("qdqbert"),vfo=o(" \u2014 "),RI=a("a"),Ffo=o("BertTokenizer"),Tfo=o(" or "),PI=a("a"),Mfo=o("BertTokenizerFast"),Efo=o(" (QDQBert model)"),Cfo=l(),_h=a("li"),Ele=a("strong"),wfo=o("rag"),Afo=o(" \u2014 "),BI=a("a"),Lfo=o("RagTokenizer"),yfo=o(" (RAG model)"),xfo=l(),xs=a("li"),Cle=a("strong"),$fo=o("realm"),kfo=o(" \u2014 "),II=a("a"),Sfo=o("RealmTokenizer"),Rfo=o(" or "),NI=a("a"),Pfo=o("RealmTokenizerFast"),Bfo=o(" (REALM model)"),Ifo=l(),$s=a("li"),wle=a("strong"),Nfo=o("reformer"),qfo=o(" \u2014 "),qI=a("a"),jfo=o("ReformerTokenizer"),Dfo=o(" or "),jI=a("a"),Gfo=o("ReformerTokenizerFast"),Ofo=o(" (Reformer model)"),Vfo=l(),ks=a("li"),Ale=a("strong"),Xfo=o("rembert"),zfo=o(" \u2014 "),DI=a("a"),Qfo=o("RemBertTokenizer"),Wfo=o(" or "),GI=a("a"),Hfo=o("RemBertTokenizerFast"),Ufo=o(" (RemBERT model)"),Jfo=l(),Ss=a("li"),Lle=a("strong"),Yfo=o("retribert"),Kfo=o(" \u2014 "),OI=a("a"),Zfo=o("RetriBertTokenizer"),ego=o(" or "),VI=a("a"),ogo=o("RetriBertTokenizerFast"),rgo=o(" (RetriBERT model)"),tgo=l(),Rs=a("li"),yle=a("strong"),ago=o("roberta"),ngo=o(" \u2014 "),XI=a("a"),sgo=o("RobertaTokenizer"),lgo=o(" or "),zI=a("a"),igo=o("RobertaTokenizerFast"),dgo=o(" (RoBERTa model)"),cgo=l(),Ps=a("li"),xle=a("strong"),mgo=o("roformer"),fgo=o(" \u2014 "),QI=a("a"),ggo=o("RoFormerTokenizer"),hgo=o(" or "),WI=a("a"),ugo=o("RoFormerTokenizerFast"),pgo=o(" (RoFormer model)"),_go=l(),bh=a("li"),$le=a("strong"),bgo=o("speech_to_text"),vgo=o(" \u2014 "),HI=a("a"),Fgo=o("Speech2TextTokenizer"),Tgo=o(" (Speech2Text model)"),Mgo=l(),vh=a("li"),kle=a("strong"),Ego=o("speech_to_text_2"),Cgo=o(" \u2014 "),UI=a("a"),wgo=o("Speech2Text2Tokenizer"),Ago=o(" (Speech2Text2 model)"),Lgo=l(),Bs=a("li"),Sle=a("strong"),ygo=o("splinter"),xgo=o(" \u2014 "),JI=a("a"),$go=o("SplinterTokenizer"),kgo=o(" or "),YI=a("a"),Sgo=o("SplinterTokenizerFast"),Rgo=o(" (Splinter model)"),Pgo=l(),Is=a("li"),Rle=a("strong"),Bgo=o("squeezebert"),Igo=o(" \u2014 "),KI=a("a"),Ngo=o("SqueezeBertTokenizer"),qgo=o(" or "),ZI=a("a"),jgo=o("SqueezeBertTokenizerFast"),Dgo=o(" (SqueezeBERT model)"),Ggo=l(),Ns=a("li"),Ple=a("strong"),Ogo=o("t5"),Vgo=o(" \u2014 "),eN=a("a"),Xgo=o("T5Tokenizer"),zgo=o(" or "),oN=a("a"),Qgo=o("T5TokenizerFast"),Wgo=o(" (T5 model)"),Hgo=l(),Fh=a("li"),Ble=a("strong"),Ugo=o("tapas"),Jgo=o(" \u2014 "),rN=a("a"),Ygo=o("TapasTokenizer"),Kgo=o(" (TAPAS model)"),Zgo=l(),Th=a("li"),Ile=a("strong"),eho=o("tapex"),oho=o(" \u2014 "),tN=a("a"),rho=o("TapexTokenizer"),tho=o(" (TAPEX model)"),aho=l(),Mh=a("li"),Nle=a("strong"),nho=o("transfo-xl"),sho=o(" \u2014 "),aN=a("a"),lho=o("TransfoXLTokenizer"),iho=o(" (Transformer-XL model)"),dho=l(),qs=a("li"),qle=a("strong"),cho=o("vilt"),mho=o(" \u2014 "),nN=a("a"),fho=o("BertTokenizer"),gho=o(" or "),sN=a("a"),hho=o("BertTokenizerFast"),uho=o(" (ViLT model)"),pho=l(),js=a("li"),jle=a("strong"),_ho=o("visual_bert"),bho=o(" \u2014 "),lN=a("a"),vho=o("BertTokenizer"),Fho=o(" or "),iN=a("a"),Tho=o("BertTokenizerFast"),Mho=o(" (VisualBERT model)"),Eho=l(),Eh=a("li"),Dle=a("strong"),Cho=o("wav2vec2"),who=o(" \u2014 "),dN=a("a"),Aho=o("Wav2Vec2CTCTokenizer"),Lho=o(" (Wav2Vec2 model)"),yho=l(),Ch=a("li"),Gle=a("strong"),xho=o("wav2vec2-conformer"),$ho=o(" \u2014 "),cN=a("a"),kho=o("Wav2Vec2CTCTokenizer"),Sho=o(" (Wav2Vec2-Conformer model)"),Rho=l(),wh=a("li"),Ole=a("strong"),Pho=o("wav2vec2_phoneme"),Bho=o(" \u2014 "),mN=a("a"),Iho=o("Wav2Vec2PhonemeCTCTokenizer"),Nho=o(" (Wav2Vec2Phoneme model)"),qho=l(),Ds=a("li"),Vle=a("strong"),jho=o("xglm"),Dho=o(" \u2014 "),fN=a("a"),Gho=o("XGLMTokenizer"),Oho=o(" or "),gN=a("a"),Vho=o("XGLMTokenizerFast"),Xho=o(" (XGLM model)"),zho=l(),Ah=a("li"),Xle=a("strong"),Qho=o("xlm"),Who=o(" \u2014 "),hN=a("a"),Hho=o("XLMTokenizer"),Uho=o(" (XLM model)"),Jho=l(),Lh=a("li"),zle=a("strong"),Yho=o("xlm-prophetnet"),Kho=o(" \u2014 "),uN=a("a"),Zho=o("XLMProphetNetTokenizer"),euo=o(" (XLM-ProphetNet model)"),ouo=l(),Gs=a("li"),Qle=a("strong"),ruo=o("xlm-roberta"),tuo=o(" \u2014 "),pN=a("a"),auo=o("XLMRobertaTokenizer"),nuo=o(" or "),_N=a("a"),suo=o("XLMRobertaTokenizerFast"),luo=o(" (XLM-RoBERTa model)"),iuo=l(),Os=a("li"),Wle=a("strong"),duo=o("xlm-roberta-xl"),cuo=o(" \u2014 "),bN=a("a"),muo=o("RobertaTokenizer"),fuo=o(" or "),vN=a("a"),guo=o("RobertaTokenizerFast"),huo=o(" (XLM-RoBERTa-XL model)"),uuo=l(),Vs=a("li"),Hle=a("strong"),puo=o("xlnet"),_uo=o(" \u2014 "),FN=a("a"),buo=o("XLNetTokenizer"),vuo=o(" or "),TN=a("a"),Fuo=o("XLNetTokenizerFast"),Tuo=o(" (XLNet model)"),Muo=l(),Xs=a("li"),Ule=a("strong"),Euo=o("yoso"),Cuo=o(" \u2014 "),MN=a("a"),wuo=o("AlbertTokenizer"),Auo=o(" or "),EN=a("a"),Luo=o("AlbertTokenizerFast"),yuo=o(" (YOSO model)"),xuo=l(),F(yh.$$.fragment),$uo=l(),xh=a("div"),F(Z7.$$.fragment),kuo=l(),Jle=a("p"),Suo=o("Register a new tokenizer in this mapping."),DOe=l(),Bi=a("h2"),$h=a("a"),Yle=a("span"),F(ey.$$.fragment),Ruo=l(),Kle=a("span"),Puo=o("AutoFeatureExtractor"),GOe=l(),Lo=a("div"),F(oy.$$.fragment),Buo=l(),ry=a("p"),Iuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CN=a("a"),Nuo=o("AutoFeatureExtractor.from_pretrained()"),quo=o(" class method."),juo=l(),ty=a("p"),Duo=o("This class cannot be instantiated directly using "),Zle=a("code"),Guo=o("__init__()"),Ouo=o(" (throws an error)."),Vuo=l(),He=a("div"),F(ay.$$.fragment),Xuo=l(),eie=a("p"),zuo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Quo=l(),Ra=a("p"),Wuo=o("The feature extractor class to instantiate is selected based on the "),oie=a("code"),Huo=o("model_type"),Uuo=o(` property of the config object
(either passed as an argument or loaded from `),rie=a("code"),Juo=o("pretrained_model_name_or_path"),Yuo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tie=a("code"),Kuo=o("pretrained_model_name_or_path"),Zuo=o(":"),epo=l(),Y=a("ul"),kh=a("li"),aie=a("strong"),opo=o("beit"),rpo=o(" \u2014 "),wN=a("a"),tpo=o("BeitFeatureExtractor"),apo=o(" (BEiT model)"),npo=l(),Sh=a("li"),nie=a("strong"),spo=o("clip"),lpo=o(" \u2014 "),AN=a("a"),ipo=o("CLIPFeatureExtractor"),dpo=o(" (CLIP model)"),cpo=l(),Rh=a("li"),sie=a("strong"),mpo=o("convnext"),fpo=o(" \u2014 "),LN=a("a"),gpo=o("ConvNextFeatureExtractor"),hpo=o(" (ConvNeXT model)"),upo=l(),Ph=a("li"),lie=a("strong"),ppo=o("cvt"),_po=o(" \u2014 "),yN=a("a"),bpo=o("ConvNextFeatureExtractor"),vpo=o(" (CvT model)"),Fpo=l(),Bh=a("li"),iie=a("strong"),Tpo=o("data2vec-audio"),Mpo=o(" \u2014 "),xN=a("a"),Epo=o("Wav2Vec2FeatureExtractor"),Cpo=o(" (Data2VecAudio model)"),wpo=l(),Ih=a("li"),die=a("strong"),Apo=o("data2vec-vision"),Lpo=o(" \u2014 "),$N=a("a"),ypo=o("BeitFeatureExtractor"),xpo=o(" (Data2VecVision model)"),$po=l(),Nh=a("li"),cie=a("strong"),kpo=o("deit"),Spo=o(" \u2014 "),kN=a("a"),Rpo=o("DeiTFeatureExtractor"),Ppo=o(" (DeiT model)"),Bpo=l(),qh=a("li"),mie=a("strong"),Ipo=o("detr"),Npo=o(" \u2014 "),SN=a("a"),qpo=o("DetrFeatureExtractor"),jpo=o(" (DETR model)"),Dpo=l(),jh=a("li"),fie=a("strong"),Gpo=o("dpt"),Opo=o(" \u2014 "),RN=a("a"),Vpo=o("DPTFeatureExtractor"),Xpo=o(" (DPT model)"),zpo=l(),Dh=a("li"),gie=a("strong"),Qpo=o("flava"),Wpo=o(" \u2014 "),PN=a("a"),Hpo=o("FlavaFeatureExtractor"),Upo=o(" (FLAVA model)"),Jpo=l(),Gh=a("li"),hie=a("strong"),Ypo=o("glpn"),Kpo=o(" \u2014 "),BN=a("a"),Zpo=o("GLPNFeatureExtractor"),e_o=o(" (GLPN model)"),o_o=l(),Oh=a("li"),uie=a("strong"),r_o=o("groupvit"),t_o=o(" \u2014 "),IN=a("a"),a_o=o("CLIPFeatureExtractor"),n_o=o(" (GroupViT model)"),s_o=l(),Vh=a("li"),pie=a("strong"),l_o=o("hubert"),i_o=o(" \u2014 "),NN=a("a"),d_o=o("Wav2Vec2FeatureExtractor"),c_o=o(" (Hubert model)"),m_o=l(),Xh=a("li"),_ie=a("strong"),f_o=o("imagegpt"),g_o=o(" \u2014 "),qN=a("a"),h_o=o("ImageGPTFeatureExtractor"),u_o=o(" (ImageGPT model)"),p_o=l(),zh=a("li"),bie=a("strong"),__o=o("layoutlmv2"),b_o=o(" \u2014 "),jN=a("a"),v_o=o("LayoutLMv2FeatureExtractor"),F_o=o(" (LayoutLMv2 model)"),T_o=l(),Qh=a("li"),vie=a("strong"),M_o=o("layoutlmv3"),E_o=o(" \u2014 "),DN=a("a"),C_o=o("LayoutLMv3FeatureExtractor"),w_o=o(" (LayoutLMv3 model)"),A_o=l(),Wh=a("li"),Fie=a("strong"),L_o=o("levit"),y_o=o(" \u2014 "),GN=a("a"),x_o=o("LevitFeatureExtractor"),$_o=o(" (LeViT model)"),k_o=l(),Hh=a("li"),Tie=a("strong"),S_o=o("maskformer"),R_o=o(" \u2014 "),ON=a("a"),P_o=o("MaskFormerFeatureExtractor"),B_o=o(" (MaskFormer model)"),I_o=l(),Uh=a("li"),Mie=a("strong"),N_o=o("mctct"),q_o=o(" \u2014 "),VN=a("a"),j_o=o("MCTCTFeatureExtractor"),D_o=o(" (M-CTC-T model)"),G_o=l(),Jh=a("li"),Eie=a("strong"),O_o=o("perceiver"),V_o=o(" \u2014 "),XN=a("a"),X_o=o("PerceiverFeatureExtractor"),z_o=o(" (Perceiver model)"),Q_o=l(),Yh=a("li"),Cie=a("strong"),W_o=o("poolformer"),H_o=o(" \u2014 "),zN=a("a"),U_o=o("PoolFormerFeatureExtractor"),J_o=o(" (PoolFormer model)"),Y_o=l(),Kh=a("li"),wie=a("strong"),K_o=o("regnet"),Z_o=o(" \u2014 "),QN=a("a"),e2o=o("ConvNextFeatureExtractor"),o2o=o(" (RegNet model)"),r2o=l(),Zh=a("li"),Aie=a("strong"),t2o=o("resnet"),a2o=o(" \u2014 "),WN=a("a"),n2o=o("ConvNextFeatureExtractor"),s2o=o(" (ResNet model)"),l2o=l(),eu=a("li"),Lie=a("strong"),i2o=o("segformer"),d2o=o(" \u2014 "),HN=a("a"),c2o=o("SegformerFeatureExtractor"),m2o=o(" (SegFormer model)"),f2o=l(),ou=a("li"),yie=a("strong"),g2o=o("speech_to_text"),h2o=o(" \u2014 "),UN=a("a"),u2o=o("Speech2TextFeatureExtractor"),p2o=o(" (Speech2Text model)"),_2o=l(),ru=a("li"),xie=a("strong"),b2o=o("swin"),v2o=o(" \u2014 "),JN=a("a"),F2o=o("ViTFeatureExtractor"),T2o=o(" (Swin Transformer model)"),M2o=l(),tu=a("li"),$ie=a("strong"),E2o=o("van"),C2o=o(" \u2014 "),YN=a("a"),w2o=o("ConvNextFeatureExtractor"),A2o=o(" (VAN model)"),L2o=l(),au=a("li"),kie=a("strong"),y2o=o("vilt"),x2o=o(" \u2014 "),KN=a("a"),$2o=o("ViltFeatureExtractor"),k2o=o(" (ViLT model)"),S2o=l(),nu=a("li"),Sie=a("strong"),R2o=o("vit"),P2o=o(" \u2014 "),ZN=a("a"),B2o=o("ViTFeatureExtractor"),I2o=o(" (ViT model)"),N2o=l(),su=a("li"),Rie=a("strong"),q2o=o("vit_mae"),j2o=o(" \u2014 "),eq=a("a"),D2o=o("ViTFeatureExtractor"),G2o=o(" (ViTMAE model)"),O2o=l(),lu=a("li"),Pie=a("strong"),V2o=o("wav2vec2"),X2o=o(" \u2014 "),oq=a("a"),z2o=o("Wav2Vec2FeatureExtractor"),Q2o=o(" (Wav2Vec2 model)"),W2o=l(),iu=a("li"),Bie=a("strong"),H2o=o("wav2vec2-conformer"),U2o=o(" \u2014 "),rq=a("a"),J2o=o("Wav2Vec2FeatureExtractor"),Y2o=o(" (Wav2Vec2-Conformer model)"),K2o=l(),du=a("li"),Iie=a("strong"),Z2o=o("yolos"),ebo=o(" \u2014 "),tq=a("a"),obo=o("YolosFeatureExtractor"),rbo=o(" (YOLOS model)"),tbo=l(),F(cu.$$.fragment),abo=l(),F(mu.$$.fragment),nbo=l(),fu=a("div"),F(ny.$$.fragment),sbo=l(),Nie=a("p"),lbo=o("Register a new feature extractor for this class."),OOe=l(),Ii=a("h2"),gu=a("a"),qie=a("span"),F(sy.$$.fragment),ibo=l(),jie=a("span"),dbo=o("AutoProcessor"),VOe=l(),yo=a("div"),F(ly.$$.fragment),cbo=l(),iy=a("p"),mbo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),aq=a("a"),fbo=o("AutoProcessor.from_pretrained()"),gbo=o(" class method."),hbo=l(),dy=a("p"),ubo=o("This class cannot be instantiated directly using "),Die=a("code"),pbo=o("__init__()"),_bo=o(" (throws an error)."),bbo=l(),Ue=a("div"),F(cy.$$.fragment),vbo=l(),Gie=a("p"),Fbo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Tbo=l(),Ni=a("p"),Mbo=o("The processor class to instantiate is selected based on the "),Oie=a("code"),Ebo=o("model_type"),Cbo=o(` property of the config object (either
passed as an argument or loaded from `),Vie=a("code"),wbo=o("pretrained_model_name_or_path"),Abo=o(" if possible):"),Lbo=l(),he=a("ul"),hu=a("li"),Xie=a("strong"),ybo=o("clip"),xbo=o(" \u2014 "),nq=a("a"),$bo=o("CLIPProcessor"),kbo=o(" (CLIP model)"),Sbo=l(),uu=a("li"),zie=a("strong"),Rbo=o("flava"),Pbo=o(" \u2014 "),Qie=a("code"),Bbo=o("FLAVAProcessor"),Ibo=o(" (FLAVA model)"),Nbo=l(),pu=a("li"),Wie=a("strong"),qbo=o("groupvit"),jbo=o(" \u2014 "),sq=a("a"),Dbo=o("CLIPProcessor"),Gbo=o(" (GroupViT model)"),Obo=l(),_u=a("li"),Hie=a("strong"),Vbo=o("layoutlmv2"),Xbo=o(" \u2014 "),lq=a("a"),zbo=o("LayoutLMv2Processor"),Qbo=o(" (LayoutLMv2 model)"),Wbo=l(),bu=a("li"),Uie=a("strong"),Hbo=o("layoutlmv3"),Ubo=o(" \u2014 "),iq=a("a"),Jbo=o("LayoutLMv3Processor"),Ybo=o(" (LayoutLMv3 model)"),Kbo=l(),vu=a("li"),Jie=a("strong"),Zbo=o("layoutxlm"),evo=o(" \u2014 "),dq=a("a"),ovo=o("LayoutXLMProcessor"),rvo=o(" (LayoutXLM model)"),tvo=l(),Fu=a("li"),Yie=a("strong"),avo=o("sew"),nvo=o(" \u2014 "),cq=a("a"),svo=o("Wav2Vec2Processor"),lvo=o(" (SEW model)"),ivo=l(),Tu=a("li"),Kie=a("strong"),dvo=o("sew-d"),cvo=o(" \u2014 "),mq=a("a"),mvo=o("Wav2Vec2Processor"),fvo=o(" (SEW-D model)"),gvo=l(),Mu=a("li"),Zie=a("strong"),hvo=o("speech_to_text"),uvo=o(" \u2014 "),fq=a("a"),pvo=o("Speech2TextProcessor"),_vo=o(" (Speech2Text model)"),bvo=l(),Eu=a("li"),ede=a("strong"),vvo=o("speech_to_text_2"),Fvo=o(" \u2014 "),gq=a("a"),Tvo=o("Speech2Text2Processor"),Mvo=o(" (Speech2Text2 model)"),Evo=l(),Cu=a("li"),ode=a("strong"),Cvo=o("trocr"),wvo=o(" \u2014 "),hq=a("a"),Avo=o("TrOCRProcessor"),Lvo=o(" (TrOCR model)"),yvo=l(),wu=a("li"),rde=a("strong"),xvo=o("unispeech"),$vo=o(" \u2014 "),uq=a("a"),kvo=o("Wav2Vec2Processor"),Svo=o(" (UniSpeech model)"),Rvo=l(),Au=a("li"),tde=a("strong"),Pvo=o("unispeech-sat"),Bvo=o(" \u2014 "),pq=a("a"),Ivo=o("Wav2Vec2Processor"),Nvo=o(" (UniSpeechSat model)"),qvo=l(),Lu=a("li"),ade=a("strong"),jvo=o("vilt"),Dvo=o(" \u2014 "),_q=a("a"),Gvo=o("ViltProcessor"),Ovo=o(" (ViLT model)"),Vvo=l(),yu=a("li"),nde=a("strong"),Xvo=o("vision-text-dual-encoder"),zvo=o(" \u2014 "),bq=a("a"),Qvo=o("VisionTextDualEncoderProcessor"),Wvo=o(" (VisionTextDualEncoder model)"),Hvo=l(),xu=a("li"),sde=a("strong"),Uvo=o("wav2vec2"),Jvo=o(" \u2014 "),vq=a("a"),Yvo=o("Wav2Vec2Processor"),Kvo=o(" (Wav2Vec2 model)"),Zvo=l(),$u=a("li"),lde=a("strong"),e1o=o("wav2vec2-conformer"),o1o=o(" \u2014 "),Fq=a("a"),r1o=o("Wav2Vec2Processor"),t1o=o(" (Wav2Vec2-Conformer model)"),a1o=l(),ku=a("li"),ide=a("strong"),n1o=o("wavlm"),s1o=o(" \u2014 "),Tq=a("a"),l1o=o("Wav2Vec2Processor"),i1o=o(" (WavLM model)"),d1o=l(),F(Su.$$.fragment),c1o=l(),F(Ru.$$.fragment),m1o=l(),Pu=a("div"),F(my.$$.fragment),f1o=l(),dde=a("p"),g1o=o("Register a new processor for this class."),XOe=l(),qi=a("h2"),Bu=a("a"),cde=a("span"),F(fy.$$.fragment),h1o=l(),mde=a("span"),u1o=o("AutoModel"),zOe=l(),xo=a("div"),F(gy.$$.fragment),p1o=l(),ji=a("p"),_1o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mq=a("a"),b1o=o("from_pretrained()"),v1o=o(" class method or the "),Eq=a("a"),F1o=o("from_config()"),T1o=o(` class
method.`),M1o=l(),hy=a("p"),E1o=o("This class cannot be instantiated directly using "),fde=a("code"),C1o=o("__init__()"),w1o=o(" (throws an error)."),A1o=l(),st=a("div"),F(uy.$$.fragment),L1o=l(),gde=a("p"),y1o=o("Instantiates one of the base model classes of the library from a configuration."),x1o=l(),Di=a("p"),$1o=o(`Note:
Loading a model from its configuration file does `),hde=a("strong"),k1o=o("not"),S1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cq=a("a"),R1o=o("from_pretrained()"),P1o=o(" to load the model weights."),B1o=l(),F(Iu.$$.fragment),I1o=l(),Je=a("div"),F(py.$$.fragment),N1o=l(),ude=a("p"),q1o=o("Instantiate one of the base model classes of the library from a pretrained model."),j1o=l(),Pa=a("p"),D1o=o("The model class to instantiate is selected based on the "),pde=a("code"),G1o=o("model_type"),O1o=o(` property of the config object (either
passed as an argument or loaded from `),_de=a("code"),V1o=o("pretrained_model_name_or_path"),X1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=a("code"),z1o=o("pretrained_model_name_or_path"),Q1o=o(":"),W1o=l(),y=a("ul"),Nu=a("li"),vde=a("strong"),H1o=o("albert"),U1o=o(" \u2014 "),wq=a("a"),J1o=o("AlbertModel"),Y1o=o(" (ALBERT model)"),K1o=l(),qu=a("li"),Fde=a("strong"),Z1o=o("bart"),eFo=o(" \u2014 "),Aq=a("a"),oFo=o("BartModel"),rFo=o(" (BART model)"),tFo=l(),ju=a("li"),Tde=a("strong"),aFo=o("beit"),nFo=o(" \u2014 "),Lq=a("a"),sFo=o("BeitModel"),lFo=o(" (BEiT model)"),iFo=l(),Du=a("li"),Mde=a("strong"),dFo=o("bert"),cFo=o(" \u2014 "),yq=a("a"),mFo=o("BertModel"),fFo=o(" (BERT model)"),gFo=l(),Gu=a("li"),Ede=a("strong"),hFo=o("bert-generation"),uFo=o(" \u2014 "),xq=a("a"),pFo=o("BertGenerationEncoder"),_Fo=o(" (Bert Generation model)"),bFo=l(),Ou=a("li"),Cde=a("strong"),vFo=o("big_bird"),FFo=o(" \u2014 "),$q=a("a"),TFo=o("BigBirdModel"),MFo=o(" (BigBird model)"),EFo=l(),Vu=a("li"),wde=a("strong"),CFo=o("bigbird_pegasus"),wFo=o(" \u2014 "),kq=a("a"),AFo=o("BigBirdPegasusModel"),LFo=o(" (BigBird-Pegasus model)"),yFo=l(),Xu=a("li"),Ade=a("strong"),xFo=o("blenderbot"),$Fo=o(" \u2014 "),Sq=a("a"),kFo=o("BlenderbotModel"),SFo=o(" (Blenderbot model)"),RFo=l(),zu=a("li"),Lde=a("strong"),PFo=o("blenderbot-small"),BFo=o(" \u2014 "),Rq=a("a"),IFo=o("BlenderbotSmallModel"),NFo=o(" (BlenderbotSmall model)"),qFo=l(),Qu=a("li"),yde=a("strong"),jFo=o("bloom"),DFo=o(" \u2014 "),Pq=a("a"),GFo=o("BloomModel"),OFo=o(" (BLOOM model)"),VFo=l(),Wu=a("li"),xde=a("strong"),XFo=o("camembert"),zFo=o(" \u2014 "),Bq=a("a"),QFo=o("CamembertModel"),WFo=o(" (CamemBERT model)"),HFo=l(),Hu=a("li"),$de=a("strong"),UFo=o("canine"),JFo=o(" \u2014 "),Iq=a("a"),YFo=o("CanineModel"),KFo=o(" (CANINE model)"),ZFo=l(),Uu=a("li"),kde=a("strong"),eTo=o("clip"),oTo=o(" \u2014 "),Nq=a("a"),rTo=o("CLIPModel"),tTo=o(" (CLIP model)"),aTo=l(),Ju=a("li"),Sde=a("strong"),nTo=o("codegen"),sTo=o(" \u2014 "),qq=a("a"),lTo=o("CodeGenModel"),iTo=o(" (CodeGen model)"),dTo=l(),Yu=a("li"),Rde=a("strong"),cTo=o("convbert"),mTo=o(" \u2014 "),jq=a("a"),fTo=o("ConvBertModel"),gTo=o(" (ConvBERT model)"),hTo=l(),Ku=a("li"),Pde=a("strong"),uTo=o("convnext"),pTo=o(" \u2014 "),Dq=a("a"),_To=o("ConvNextModel"),bTo=o(" (ConvNeXT model)"),vTo=l(),Zu=a("li"),Bde=a("strong"),FTo=o("ctrl"),TTo=o(" \u2014 "),Gq=a("a"),MTo=o("CTRLModel"),ETo=o(" (CTRL model)"),CTo=l(),ep=a("li"),Ide=a("strong"),wTo=o("cvt"),ATo=o(" \u2014 "),Oq=a("a"),LTo=o("CvtModel"),yTo=o(" (CvT model)"),xTo=l(),op=a("li"),Nde=a("strong"),$To=o("data2vec-audio"),kTo=o(" \u2014 "),Vq=a("a"),STo=o("Data2VecAudioModel"),RTo=o(" (Data2VecAudio model)"),PTo=l(),rp=a("li"),qde=a("strong"),BTo=o("data2vec-text"),ITo=o(" \u2014 "),Xq=a("a"),NTo=o("Data2VecTextModel"),qTo=o(" (Data2VecText model)"),jTo=l(),tp=a("li"),jde=a("strong"),DTo=o("data2vec-vision"),GTo=o(" \u2014 "),zq=a("a"),OTo=o("Data2VecVisionModel"),VTo=o(" (Data2VecVision model)"),XTo=l(),ap=a("li"),Dde=a("strong"),zTo=o("deberta"),QTo=o(" \u2014 "),Qq=a("a"),WTo=o("DebertaModel"),HTo=o(" (DeBERTa model)"),UTo=l(),np=a("li"),Gde=a("strong"),JTo=o("deberta-v2"),YTo=o(" \u2014 "),Wq=a("a"),KTo=o("DebertaV2Model"),ZTo=o(" (DeBERTa-v2 model)"),eMo=l(),sp=a("li"),Ode=a("strong"),oMo=o("decision_transformer"),rMo=o(" \u2014 "),Hq=a("a"),tMo=o("DecisionTransformerModel"),aMo=o(" (Decision Transformer model)"),nMo=l(),lp=a("li"),Vde=a("strong"),sMo=o("deit"),lMo=o(" \u2014 "),Uq=a("a"),iMo=o("DeiTModel"),dMo=o(" (DeiT model)"),cMo=l(),ip=a("li"),Xde=a("strong"),mMo=o("detr"),fMo=o(" \u2014 "),Jq=a("a"),gMo=o("DetrModel"),hMo=o(" (DETR model)"),uMo=l(),dp=a("li"),zde=a("strong"),pMo=o("distilbert"),_Mo=o(" \u2014 "),Yq=a("a"),bMo=o("DistilBertModel"),vMo=o(" (DistilBERT model)"),FMo=l(),cp=a("li"),Qde=a("strong"),TMo=o("dpr"),MMo=o(" \u2014 "),Kq=a("a"),EMo=o("DPRQuestionEncoder"),CMo=o(" (DPR model)"),wMo=l(),mp=a("li"),Wde=a("strong"),AMo=o("dpt"),LMo=o(" \u2014 "),Zq=a("a"),yMo=o("DPTModel"),xMo=o(" (DPT model)"),$Mo=l(),fp=a("li"),Hde=a("strong"),kMo=o("electra"),SMo=o(" \u2014 "),ej=a("a"),RMo=o("ElectraModel"),PMo=o(" (ELECTRA model)"),BMo=l(),gp=a("li"),Ude=a("strong"),IMo=o("flaubert"),NMo=o(" \u2014 "),oj=a("a"),qMo=o("FlaubertModel"),jMo=o(" (FlauBERT model)"),DMo=l(),hp=a("li"),Jde=a("strong"),GMo=o("flava"),OMo=o(" \u2014 "),rj=a("a"),VMo=o("FlavaModel"),XMo=o(" (FLAVA model)"),zMo=l(),up=a("li"),Yde=a("strong"),QMo=o("fnet"),WMo=o(" \u2014 "),tj=a("a"),HMo=o("FNetModel"),UMo=o(" (FNet model)"),JMo=l(),pp=a("li"),Kde=a("strong"),YMo=o("fsmt"),KMo=o(" \u2014 "),aj=a("a"),ZMo=o("FSMTModel"),e4o=o(" (FairSeq Machine-Translation model)"),o4o=l(),zs=a("li"),Zde=a("strong"),r4o=o("funnel"),t4o=o(" \u2014 "),nj=a("a"),a4o=o("FunnelModel"),n4o=o(" or "),sj=a("a"),s4o=o("FunnelBaseModel"),l4o=o(" (Funnel Transformer model)"),i4o=l(),_p=a("li"),ece=a("strong"),d4o=o("glpn"),c4o=o(" \u2014 "),lj=a("a"),m4o=o("GLPNModel"),f4o=o(" (GLPN model)"),g4o=l(),bp=a("li"),oce=a("strong"),h4o=o("gpt2"),u4o=o(" \u2014 "),ij=a("a"),p4o=o("GPT2Model"),_4o=o(" (OpenAI GPT-2 model)"),b4o=l(),vp=a("li"),rce=a("strong"),v4o=o("gpt_neo"),F4o=o(" \u2014 "),dj=a("a"),T4o=o("GPTNeoModel"),M4o=o(" (GPT Neo model)"),E4o=l(),Fp=a("li"),tce=a("strong"),C4o=o("gpt_neox"),w4o=o(" \u2014 "),cj=a("a"),A4o=o("GPTNeoXModel"),L4o=o(" (GPT NeoX model)"),y4o=l(),Tp=a("li"),ace=a("strong"),x4o=o("gptj"),$4o=o(" \u2014 "),mj=a("a"),k4o=o("GPTJModel"),S4o=o(" (GPT-J model)"),R4o=l(),Mp=a("li"),nce=a("strong"),P4o=o("groupvit"),B4o=o(" \u2014 "),fj=a("a"),I4o=o("GroupViTModel"),N4o=o(" (GroupViT model)"),q4o=l(),Ep=a("li"),sce=a("strong"),j4o=o("hubert"),D4o=o(" \u2014 "),gj=a("a"),G4o=o("HubertModel"),O4o=o(" (Hubert model)"),V4o=l(),Cp=a("li"),lce=a("strong"),X4o=o("ibert"),z4o=o(" \u2014 "),hj=a("a"),Q4o=o("IBertModel"),W4o=o(" (I-BERT model)"),H4o=l(),wp=a("li"),ice=a("strong"),U4o=o("imagegpt"),J4o=o(" \u2014 "),uj=a("a"),Y4o=o("ImageGPTModel"),K4o=o(" (ImageGPT model)"),Z4o=l(),Ap=a("li"),dce=a("strong"),eEo=o("layoutlm"),oEo=o(" \u2014 "),pj=a("a"),rEo=o("LayoutLMModel"),tEo=o(" (LayoutLM model)"),aEo=l(),Lp=a("li"),cce=a("strong"),nEo=o("layoutlmv2"),sEo=o(" \u2014 "),_j=a("a"),lEo=o("LayoutLMv2Model"),iEo=o(" (LayoutLMv2 model)"),dEo=l(),yp=a("li"),mce=a("strong"),cEo=o("layoutlmv3"),mEo=o(" \u2014 "),bj=a("a"),fEo=o("LayoutLMv3Model"),gEo=o(" (LayoutLMv3 model)"),hEo=l(),xp=a("li"),fce=a("strong"),uEo=o("led"),pEo=o(" \u2014 "),vj=a("a"),_Eo=o("LEDModel"),bEo=o(" (LED model)"),vEo=l(),$p=a("li"),gce=a("strong"),FEo=o("levit"),TEo=o(" \u2014 "),Fj=a("a"),MEo=o("LevitModel"),EEo=o(" (LeViT model)"),CEo=l(),kp=a("li"),hce=a("strong"),wEo=o("longformer"),AEo=o(" \u2014 "),Tj=a("a"),LEo=o("LongformerModel"),yEo=o(" (Longformer model)"),xEo=l(),Sp=a("li"),uce=a("strong"),$Eo=o("longt5"),kEo=o(" \u2014 "),Mj=a("a"),SEo=o("LongT5Model"),REo=o(" (LongT5 model)"),PEo=l(),Rp=a("li"),pce=a("strong"),BEo=o("luke"),IEo=o(" \u2014 "),Ej=a("a"),NEo=o("LukeModel"),qEo=o(" (LUKE model)"),jEo=l(),Pp=a("li"),_ce=a("strong"),DEo=o("lxmert"),GEo=o(" \u2014 "),Cj=a("a"),OEo=o("LxmertModel"),VEo=o(" (LXMERT model)"),XEo=l(),Bp=a("li"),bce=a("strong"),zEo=o("m2m_100"),QEo=o(" \u2014 "),wj=a("a"),WEo=o("M2M100Model"),HEo=o(" (M2M100 model)"),UEo=l(),Ip=a("li"),vce=a("strong"),JEo=o("marian"),YEo=o(" \u2014 "),Aj=a("a"),KEo=o("MarianModel"),ZEo=o(" (Marian model)"),eCo=l(),Np=a("li"),Fce=a("strong"),oCo=o("maskformer"),rCo=o(" \u2014 "),Lj=a("a"),tCo=o("MaskFormerModel"),aCo=o(" (MaskFormer model)"),nCo=l(),qp=a("li"),Tce=a("strong"),sCo=o("mbart"),lCo=o(" \u2014 "),yj=a("a"),iCo=o("MBartModel"),dCo=o(" (mBART model)"),cCo=l(),jp=a("li"),Mce=a("strong"),mCo=o("mctct"),fCo=o(" \u2014 "),xj=a("a"),gCo=o("MCTCTModel"),hCo=o(" (M-CTC-T model)"),uCo=l(),Dp=a("li"),Ece=a("strong"),pCo=o("megatron-bert"),_Co=o(" \u2014 "),$j=a("a"),bCo=o("MegatronBertModel"),vCo=o(" (Megatron-BERT model)"),FCo=l(),Gp=a("li"),Cce=a("strong"),TCo=o("mobilebert"),MCo=o(" \u2014 "),kj=a("a"),ECo=o("MobileBertModel"),CCo=o(" (MobileBERT model)"),wCo=l(),Op=a("li"),wce=a("strong"),ACo=o("mpnet"),LCo=o(" \u2014 "),Sj=a("a"),yCo=o("MPNetModel"),xCo=o(" (MPNet model)"),$Co=l(),Vp=a("li"),Ace=a("strong"),kCo=o("mt5"),SCo=o(" \u2014 "),Rj=a("a"),RCo=o("MT5Model"),PCo=o(" (MT5 model)"),BCo=l(),Xp=a("li"),Lce=a("strong"),ICo=o("nezha"),NCo=o(" \u2014 "),Pj=a("a"),qCo=o("NezhaModel"),jCo=o(" (Nezha model)"),DCo=l(),zp=a("li"),yce=a("strong"),GCo=o("nystromformer"),OCo=o(" \u2014 "),Bj=a("a"),VCo=o("NystromformerModel"),XCo=o(" (Nystr\xF6mformer model)"),zCo=l(),Qp=a("li"),xce=a("strong"),QCo=o("openai-gpt"),WCo=o(" \u2014 "),Ij=a("a"),HCo=o("OpenAIGPTModel"),UCo=o(" (OpenAI GPT model)"),JCo=l(),Wp=a("li"),$ce=a("strong"),YCo=o("opt"),KCo=o(" \u2014 "),Nj=a("a"),ZCo=o("OPTModel"),e3o=o(" (OPT model)"),o3o=l(),Hp=a("li"),kce=a("strong"),r3o=o("pegasus"),t3o=o(" \u2014 "),qj=a("a"),a3o=o("PegasusModel"),n3o=o(" (Pegasus model)"),s3o=l(),Up=a("li"),Sce=a("strong"),l3o=o("perceiver"),i3o=o(" \u2014 "),jj=a("a"),d3o=o("PerceiverModel"),c3o=o(" (Perceiver model)"),m3o=l(),Jp=a("li"),Rce=a("strong"),f3o=o("plbart"),g3o=o(" \u2014 "),Dj=a("a"),h3o=o("PLBartModel"),u3o=o(" (PLBart model)"),p3o=l(),Yp=a("li"),Pce=a("strong"),_3o=o("poolformer"),b3o=o(" \u2014 "),Gj=a("a"),v3o=o("PoolFormerModel"),F3o=o(" (PoolFormer model)"),T3o=l(),Kp=a("li"),Bce=a("strong"),M3o=o("prophetnet"),E3o=o(" \u2014 "),Oj=a("a"),C3o=o("ProphetNetModel"),w3o=o(" (ProphetNet model)"),A3o=l(),Zp=a("li"),Ice=a("strong"),L3o=o("qdqbert"),y3o=o(" \u2014 "),Vj=a("a"),x3o=o("QDQBertModel"),$3o=o(" (QDQBert model)"),k3o=l(),e_=a("li"),Nce=a("strong"),S3o=o("reformer"),R3o=o(" \u2014 "),Xj=a("a"),P3o=o("ReformerModel"),B3o=o(" (Reformer model)"),I3o=l(),o_=a("li"),qce=a("strong"),N3o=o("regnet"),q3o=o(" \u2014 "),zj=a("a"),j3o=o("RegNetModel"),D3o=o(" (RegNet model)"),G3o=l(),r_=a("li"),jce=a("strong"),O3o=o("rembert"),V3o=o(" \u2014 "),Qj=a("a"),X3o=o("RemBertModel"),z3o=o(" (RemBERT model)"),Q3o=l(),t_=a("li"),Dce=a("strong"),W3o=o("resnet"),H3o=o(" \u2014 "),Wj=a("a"),U3o=o("ResNetModel"),J3o=o(" (ResNet model)"),Y3o=l(),a_=a("li"),Gce=a("strong"),K3o=o("retribert"),Z3o=o(" \u2014 "),Hj=a("a"),e5o=o("RetriBertModel"),o5o=o(" (RetriBERT model)"),r5o=l(),n_=a("li"),Oce=a("strong"),t5o=o("roberta"),a5o=o(" \u2014 "),Uj=a("a"),n5o=o("RobertaModel"),s5o=o(" (RoBERTa model)"),l5o=l(),s_=a("li"),Vce=a("strong"),i5o=o("roformer"),d5o=o(" \u2014 "),Jj=a("a"),c5o=o("RoFormerModel"),m5o=o(" (RoFormer model)"),f5o=l(),l_=a("li"),Xce=a("strong"),g5o=o("segformer"),h5o=o(" \u2014 "),Yj=a("a"),u5o=o("SegformerModel"),p5o=o(" (SegFormer model)"),_5o=l(),i_=a("li"),zce=a("strong"),b5o=o("sew"),v5o=o(" \u2014 "),Kj=a("a"),F5o=o("SEWModel"),T5o=o(" (SEW model)"),M5o=l(),d_=a("li"),Qce=a("strong"),E5o=o("sew-d"),C5o=o(" \u2014 "),Zj=a("a"),w5o=o("SEWDModel"),A5o=o(" (SEW-D model)"),L5o=l(),c_=a("li"),Wce=a("strong"),y5o=o("speech_to_text"),x5o=o(" \u2014 "),eD=a("a"),$5o=o("Speech2TextModel"),k5o=o(" (Speech2Text model)"),S5o=l(),m_=a("li"),Hce=a("strong"),R5o=o("splinter"),P5o=o(" \u2014 "),oD=a("a"),B5o=o("SplinterModel"),I5o=o(" (Splinter model)"),N5o=l(),f_=a("li"),Uce=a("strong"),q5o=o("squeezebert"),j5o=o(" \u2014 "),rD=a("a"),D5o=o("SqueezeBertModel"),G5o=o(" (SqueezeBERT model)"),O5o=l(),g_=a("li"),Jce=a("strong"),V5o=o("swin"),X5o=o(" \u2014 "),tD=a("a"),z5o=o("SwinModel"),Q5o=o(" (Swin Transformer model)"),W5o=l(),h_=a("li"),Yce=a("strong"),H5o=o("t5"),U5o=o(" \u2014 "),aD=a("a"),J5o=o("T5Model"),Y5o=o(" (T5 model)"),K5o=l(),u_=a("li"),Kce=a("strong"),Z5o=o("tapas"),e0o=o(" \u2014 "),nD=a("a"),o0o=o("TapasModel"),r0o=o(" (TAPAS model)"),t0o=l(),p_=a("li"),Zce=a("strong"),a0o=o("trajectory_transformer"),n0o=o(" \u2014 "),sD=a("a"),s0o=o("TrajectoryTransformerModel"),l0o=o(" (Trajectory Transformer model)"),i0o=l(),__=a("li"),eme=a("strong"),d0o=o("transfo-xl"),c0o=o(" \u2014 "),lD=a("a"),m0o=o("TransfoXLModel"),f0o=o(" (Transformer-XL model)"),g0o=l(),b_=a("li"),ome=a("strong"),h0o=o("unispeech"),u0o=o(" \u2014 "),iD=a("a"),p0o=o("UniSpeechModel"),_0o=o(" (UniSpeech model)"),b0o=l(),v_=a("li"),rme=a("strong"),v0o=o("unispeech-sat"),F0o=o(" \u2014 "),dD=a("a"),T0o=o("UniSpeechSatModel"),M0o=o(" (UniSpeechSat model)"),E0o=l(),F_=a("li"),tme=a("strong"),C0o=o("van"),w0o=o(" \u2014 "),cD=a("a"),A0o=o("VanModel"),L0o=o(" (VAN model)"),y0o=l(),T_=a("li"),ame=a("strong"),x0o=o("vilt"),$0o=o(" \u2014 "),mD=a("a"),k0o=o("ViltModel"),S0o=o(" (ViLT model)"),R0o=l(),M_=a("li"),nme=a("strong"),P0o=o("vision-text-dual-encoder"),B0o=o(" \u2014 "),fD=a("a"),I0o=o("VisionTextDualEncoderModel"),N0o=o(" (VisionTextDualEncoder model)"),q0o=l(),E_=a("li"),sme=a("strong"),j0o=o("visual_bert"),D0o=o(" \u2014 "),gD=a("a"),G0o=o("VisualBertModel"),O0o=o(" (VisualBERT model)"),V0o=l(),C_=a("li"),lme=a("strong"),X0o=o("vit"),z0o=o(" \u2014 "),hD=a("a"),Q0o=o("ViTModel"),W0o=o(" (ViT model)"),H0o=l(),w_=a("li"),ime=a("strong"),U0o=o("vit_mae"),J0o=o(" \u2014 "),uD=a("a"),Y0o=o("ViTMAEModel"),K0o=o(" (ViTMAE model)"),Z0o=l(),A_=a("li"),dme=a("strong"),ewo=o("wav2vec2"),owo=o(" \u2014 "),pD=a("a"),rwo=o("Wav2Vec2Model"),two=o(" (Wav2Vec2 model)"),awo=l(),L_=a("li"),cme=a("strong"),nwo=o("wav2vec2-conformer"),swo=o(" \u2014 "),_D=a("a"),lwo=o("Wav2Vec2ConformerModel"),iwo=o(" (Wav2Vec2-Conformer model)"),dwo=l(),y_=a("li"),mme=a("strong"),cwo=o("wavlm"),mwo=o(" \u2014 "),bD=a("a"),fwo=o("WavLMModel"),gwo=o(" (WavLM model)"),hwo=l(),x_=a("li"),fme=a("strong"),uwo=o("xglm"),pwo=o(" \u2014 "),vD=a("a"),_wo=o("XGLMModel"),bwo=o(" (XGLM model)"),vwo=l(),$_=a("li"),gme=a("strong"),Fwo=o("xlm"),Two=o(" \u2014 "),FD=a("a"),Mwo=o("XLMModel"),Ewo=o(" (XLM model)"),Cwo=l(),k_=a("li"),hme=a("strong"),wwo=o("xlm-prophetnet"),Awo=o(" \u2014 "),TD=a("a"),Lwo=o("XLMProphetNetModel"),ywo=o(" (XLM-ProphetNet model)"),xwo=l(),S_=a("li"),ume=a("strong"),$wo=o("xlm-roberta"),kwo=o(" \u2014 "),MD=a("a"),Swo=o("XLMRobertaModel"),Rwo=o(" (XLM-RoBERTa model)"),Pwo=l(),R_=a("li"),pme=a("strong"),Bwo=o("xlm-roberta-xl"),Iwo=o(" \u2014 "),ED=a("a"),Nwo=o("XLMRobertaXLModel"),qwo=o(" (XLM-RoBERTa-XL model)"),jwo=l(),P_=a("li"),_me=a("strong"),Dwo=o("xlnet"),Gwo=o(" \u2014 "),CD=a("a"),Owo=o("XLNetModel"),Vwo=o(" (XLNet model)"),Xwo=l(),B_=a("li"),bme=a("strong"),zwo=o("yolos"),Qwo=o(" \u2014 "),wD=a("a"),Wwo=o("YolosModel"),Hwo=o(" (YOLOS model)"),Uwo=l(),I_=a("li"),vme=a("strong"),Jwo=o("yoso"),Ywo=o(" \u2014 "),AD=a("a"),Kwo=o("YosoModel"),Zwo=o(" (YOSO model)"),eAo=l(),N_=a("p"),oAo=o("The model is set in evaluation mode by default using "),Fme=a("code"),rAo=o("model.eval()"),tAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=a("code"),aAo=o("model.train()"),nAo=l(),F(q_.$$.fragment),QOe=l(),Gi=a("h2"),j_=a("a"),Mme=a("span"),F(_y.$$.fragment),sAo=l(),Eme=a("span"),lAo=o("AutoModelForPreTraining"),WOe=l(),$o=a("div"),F(by.$$.fragment),iAo=l(),Oi=a("p"),dAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LD=a("a"),cAo=o("from_pretrained()"),mAo=o(" class method or the "),yD=a("a"),fAo=o("from_config()"),gAo=o(` class
method.`),hAo=l(),vy=a("p"),uAo=o("This class cannot be instantiated directly using "),Cme=a("code"),pAo=o("__init__()"),_Ao=o(" (throws an error)."),bAo=l(),lt=a("div"),F(Fy.$$.fragment),vAo=l(),wme=a("p"),FAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TAo=l(),Vi=a("p"),MAo=o(`Note:
Loading a model from its configuration file does `),Ame=a("strong"),EAo=o("not"),CAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=a("a"),wAo=o("from_pretrained()"),AAo=o(" to load the model weights."),LAo=l(),F(D_.$$.fragment),yAo=l(),Ye=a("div"),F(Ty.$$.fragment),xAo=l(),Lme=a("p"),$Ao=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kAo=l(),Ba=a("p"),SAo=o("The model class to instantiate is selected based on the "),yme=a("code"),RAo=o("model_type"),PAo=o(` property of the config object (either
passed as an argument or loaded from `),xme=a("code"),BAo=o("pretrained_model_name_or_path"),IAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=a("code"),NAo=o("pretrained_model_name_or_path"),qAo=o(":"),jAo=l(),G=a("ul"),G_=a("li"),kme=a("strong"),DAo=o("albert"),GAo=o(" \u2014 "),$D=a("a"),OAo=o("AlbertForPreTraining"),VAo=o(" (ALBERT model)"),XAo=l(),O_=a("li"),Sme=a("strong"),zAo=o("bart"),QAo=o(" \u2014 "),kD=a("a"),WAo=o("BartForConditionalGeneration"),HAo=o(" (BART model)"),UAo=l(),V_=a("li"),Rme=a("strong"),JAo=o("bert"),YAo=o(" \u2014 "),SD=a("a"),KAo=o("BertForPreTraining"),ZAo=o(" (BERT model)"),e6o=l(),X_=a("li"),Pme=a("strong"),o6o=o("big_bird"),r6o=o(" \u2014 "),RD=a("a"),t6o=o("BigBirdForPreTraining"),a6o=o(" (BigBird model)"),n6o=l(),z_=a("li"),Bme=a("strong"),s6o=o("bloom"),l6o=o(" \u2014 "),PD=a("a"),i6o=o("BloomForCausalLM"),d6o=o(" (BLOOM model)"),c6o=l(),Q_=a("li"),Ime=a("strong"),m6o=o("camembert"),f6o=o(" \u2014 "),BD=a("a"),g6o=o("CamembertForMaskedLM"),h6o=o(" (CamemBERT model)"),u6o=l(),W_=a("li"),Nme=a("strong"),p6o=o("ctrl"),_6o=o(" \u2014 "),ID=a("a"),b6o=o("CTRLLMHeadModel"),v6o=o(" (CTRL model)"),F6o=l(),H_=a("li"),qme=a("strong"),T6o=o("data2vec-text"),M6o=o(" \u2014 "),ND=a("a"),E6o=o("Data2VecTextForMaskedLM"),C6o=o(" (Data2VecText model)"),w6o=l(),U_=a("li"),jme=a("strong"),A6o=o("deberta"),L6o=o(" \u2014 "),qD=a("a"),y6o=o("DebertaForMaskedLM"),x6o=o(" (DeBERTa model)"),$6o=l(),J_=a("li"),Dme=a("strong"),k6o=o("deberta-v2"),S6o=o(" \u2014 "),jD=a("a"),R6o=o("DebertaV2ForMaskedLM"),P6o=o(" (DeBERTa-v2 model)"),B6o=l(),Y_=a("li"),Gme=a("strong"),I6o=o("distilbert"),N6o=o(" \u2014 "),DD=a("a"),q6o=o("DistilBertForMaskedLM"),j6o=o(" (DistilBERT model)"),D6o=l(),K_=a("li"),Ome=a("strong"),G6o=o("electra"),O6o=o(" \u2014 "),GD=a("a"),V6o=o("ElectraForPreTraining"),X6o=o(" (ELECTRA model)"),z6o=l(),Z_=a("li"),Vme=a("strong"),Q6o=o("flaubert"),W6o=o(" \u2014 "),OD=a("a"),H6o=o("FlaubertWithLMHeadModel"),U6o=o(" (FlauBERT model)"),J6o=l(),e2=a("li"),Xme=a("strong"),Y6o=o("flava"),K6o=o(" \u2014 "),VD=a("a"),Z6o=o("FlavaForPreTraining"),eLo=o(" (FLAVA model)"),oLo=l(),o2=a("li"),zme=a("strong"),rLo=o("fnet"),tLo=o(" \u2014 "),XD=a("a"),aLo=o("FNetForPreTraining"),nLo=o(" (FNet model)"),sLo=l(),r2=a("li"),Qme=a("strong"),lLo=o("fsmt"),iLo=o(" \u2014 "),zD=a("a"),dLo=o("FSMTForConditionalGeneration"),cLo=o(" (FairSeq Machine-Translation model)"),mLo=l(),t2=a("li"),Wme=a("strong"),fLo=o("funnel"),gLo=o(" \u2014 "),QD=a("a"),hLo=o("FunnelForPreTraining"),uLo=o(" (Funnel Transformer model)"),pLo=l(),a2=a("li"),Hme=a("strong"),_Lo=o("gpt2"),bLo=o(" \u2014 "),WD=a("a"),vLo=o("GPT2LMHeadModel"),FLo=o(" (OpenAI GPT-2 model)"),TLo=l(),n2=a("li"),Ume=a("strong"),MLo=o("ibert"),ELo=o(" \u2014 "),HD=a("a"),CLo=o("IBertForMaskedLM"),wLo=o(" (I-BERT model)"),ALo=l(),s2=a("li"),Jme=a("strong"),LLo=o("layoutlm"),yLo=o(" \u2014 "),UD=a("a"),xLo=o("LayoutLMForMaskedLM"),$Lo=o(" (LayoutLM model)"),kLo=l(),l2=a("li"),Yme=a("strong"),SLo=o("longformer"),RLo=o(" \u2014 "),JD=a("a"),PLo=o("LongformerForMaskedLM"),BLo=o(" (Longformer model)"),ILo=l(),i2=a("li"),Kme=a("strong"),NLo=o("lxmert"),qLo=o(" \u2014 "),YD=a("a"),jLo=o("LxmertForPreTraining"),DLo=o(" (LXMERT model)"),GLo=l(),d2=a("li"),Zme=a("strong"),OLo=o("megatron-bert"),VLo=o(" \u2014 "),KD=a("a"),XLo=o("MegatronBertForPreTraining"),zLo=o(" (Megatron-BERT model)"),QLo=l(),c2=a("li"),efe=a("strong"),WLo=o("mobilebert"),HLo=o(" \u2014 "),ZD=a("a"),ULo=o("MobileBertForPreTraining"),JLo=o(" (MobileBERT model)"),YLo=l(),m2=a("li"),ofe=a("strong"),KLo=o("mpnet"),ZLo=o(" \u2014 "),eG=a("a"),e7o=o("MPNetForMaskedLM"),o7o=o(" (MPNet model)"),r7o=l(),f2=a("li"),rfe=a("strong"),t7o=o("nezha"),a7o=o(" \u2014 "),oG=a("a"),n7o=o("NezhaForPreTraining"),s7o=o(" (Nezha model)"),l7o=l(),g2=a("li"),tfe=a("strong"),i7o=o("openai-gpt"),d7o=o(" \u2014 "),rG=a("a"),c7o=o("OpenAIGPTLMHeadModel"),m7o=o(" (OpenAI GPT model)"),f7o=l(),h2=a("li"),afe=a("strong"),g7o=o("retribert"),h7o=o(" \u2014 "),tG=a("a"),u7o=o("RetriBertModel"),p7o=o(" (RetriBERT model)"),_7o=l(),u2=a("li"),nfe=a("strong"),b7o=o("roberta"),v7o=o(" \u2014 "),aG=a("a"),F7o=o("RobertaForMaskedLM"),T7o=o(" (RoBERTa model)"),M7o=l(),p2=a("li"),sfe=a("strong"),E7o=o("splinter"),C7o=o(" \u2014 "),nG=a("a"),w7o=o("SplinterForPreTraining"),A7o=o(" (Splinter model)"),L7o=l(),_2=a("li"),lfe=a("strong"),y7o=o("squeezebert"),x7o=o(" \u2014 "),sG=a("a"),$7o=o("SqueezeBertForMaskedLM"),k7o=o(" (SqueezeBERT model)"),S7o=l(),b2=a("li"),ife=a("strong"),R7o=o("t5"),P7o=o(" \u2014 "),lG=a("a"),B7o=o("T5ForConditionalGeneration"),I7o=o(" (T5 model)"),N7o=l(),v2=a("li"),dfe=a("strong"),q7o=o("tapas"),j7o=o(" \u2014 "),iG=a("a"),D7o=o("TapasForMaskedLM"),G7o=o(" (TAPAS model)"),O7o=l(),F2=a("li"),cfe=a("strong"),V7o=o("transfo-xl"),X7o=o(" \u2014 "),dG=a("a"),z7o=o("TransfoXLLMHeadModel"),Q7o=o(" (Transformer-XL model)"),W7o=l(),T2=a("li"),mfe=a("strong"),H7o=o("unispeech"),U7o=o(" \u2014 "),cG=a("a"),J7o=o("UniSpeechForPreTraining"),Y7o=o(" (UniSpeech model)"),K7o=l(),M2=a("li"),ffe=a("strong"),Z7o=o("unispeech-sat"),eyo=o(" \u2014 "),mG=a("a"),oyo=o("UniSpeechSatForPreTraining"),ryo=o(" (UniSpeechSat model)"),tyo=l(),E2=a("li"),gfe=a("strong"),ayo=o("visual_bert"),nyo=o(" \u2014 "),fG=a("a"),syo=o("VisualBertForPreTraining"),lyo=o(" (VisualBERT model)"),iyo=l(),C2=a("li"),hfe=a("strong"),dyo=o("vit_mae"),cyo=o(" \u2014 "),gG=a("a"),myo=o("ViTMAEForPreTraining"),fyo=o(" (ViTMAE model)"),gyo=l(),w2=a("li"),ufe=a("strong"),hyo=o("wav2vec2"),uyo=o(" \u2014 "),hG=a("a"),pyo=o("Wav2Vec2ForPreTraining"),_yo=o(" (Wav2Vec2 model)"),byo=l(),A2=a("li"),pfe=a("strong"),vyo=o("wav2vec2-conformer"),Fyo=o(" \u2014 "),uG=a("a"),Tyo=o("Wav2Vec2ConformerForPreTraining"),Myo=o(" (Wav2Vec2-Conformer model)"),Eyo=l(),L2=a("li"),_fe=a("strong"),Cyo=o("xlm"),wyo=o(" \u2014 "),pG=a("a"),Ayo=o("XLMWithLMHeadModel"),Lyo=o(" (XLM model)"),yyo=l(),y2=a("li"),bfe=a("strong"),xyo=o("xlm-roberta"),$yo=o(" \u2014 "),_G=a("a"),kyo=o("XLMRobertaForMaskedLM"),Syo=o(" (XLM-RoBERTa model)"),Ryo=l(),x2=a("li"),vfe=a("strong"),Pyo=o("xlm-roberta-xl"),Byo=o(" \u2014 "),bG=a("a"),Iyo=o("XLMRobertaXLForMaskedLM"),Nyo=o(" (XLM-RoBERTa-XL model)"),qyo=l(),$2=a("li"),Ffe=a("strong"),jyo=o("xlnet"),Dyo=o(" \u2014 "),vG=a("a"),Gyo=o("XLNetLMHeadModel"),Oyo=o(" (XLNet model)"),Vyo=l(),k2=a("p"),Xyo=o("The model is set in evaluation mode by default using "),Tfe=a("code"),zyo=o("model.eval()"),Qyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=a("code"),Wyo=o("model.train()"),Hyo=l(),F(S2.$$.fragment),HOe=l(),Xi=a("h2"),R2=a("a"),Efe=a("span"),F(My.$$.fragment),Uyo=l(),Cfe=a("span"),Jyo=o("AutoModelForCausalLM"),UOe=l(),ko=a("div"),F(Ey.$$.fragment),Yyo=l(),zi=a("p"),Kyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FG=a("a"),Zyo=o("from_pretrained()"),e8o=o(" class method or the "),TG=a("a"),o8o=o("from_config()"),r8o=o(` class
method.`),t8o=l(),Cy=a("p"),a8o=o("This class cannot be instantiated directly using "),wfe=a("code"),n8o=o("__init__()"),s8o=o(" (throws an error)."),l8o=l(),it=a("div"),F(wy.$$.fragment),i8o=l(),Afe=a("p"),d8o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),c8o=l(),Qi=a("p"),m8o=o(`Note:
Loading a model from its configuration file does `),Lfe=a("strong"),f8o=o("not"),g8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),h8o=o("from_pretrained()"),u8o=o(" to load the model weights."),p8o=l(),F(P2.$$.fragment),_8o=l(),Ke=a("div"),F(Ay.$$.fragment),b8o=l(),yfe=a("p"),v8o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),F8o=l(),Ia=a("p"),T8o=o("The model class to instantiate is selected based on the "),xfe=a("code"),M8o=o("model_type"),E8o=o(` property of the config object (either
passed as an argument or loaded from `),$fe=a("code"),C8o=o("pretrained_model_name_or_path"),w8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),A8o=o("pretrained_model_name_or_path"),L8o=o(":"),y8o=l(),z=a("ul"),B2=a("li"),Sfe=a("strong"),x8o=o("bart"),$8o=o(" \u2014 "),EG=a("a"),k8o=o("BartForCausalLM"),S8o=o(" (BART model)"),R8o=l(),I2=a("li"),Rfe=a("strong"),P8o=o("bert"),B8o=o(" \u2014 "),CG=a("a"),I8o=o("BertLMHeadModel"),N8o=o(" (BERT model)"),q8o=l(),N2=a("li"),Pfe=a("strong"),j8o=o("bert-generation"),D8o=o(" \u2014 "),wG=a("a"),G8o=o("BertGenerationDecoder"),O8o=o(" (Bert Generation model)"),V8o=l(),q2=a("li"),Bfe=a("strong"),X8o=o("big_bird"),z8o=o(" \u2014 "),AG=a("a"),Q8o=o("BigBirdForCausalLM"),W8o=o(" (BigBird model)"),H8o=l(),j2=a("li"),Ife=a("strong"),U8o=o("bigbird_pegasus"),J8o=o(" \u2014 "),LG=a("a"),Y8o=o("BigBirdPegasusForCausalLM"),K8o=o(" (BigBird-Pegasus model)"),Z8o=l(),D2=a("li"),Nfe=a("strong"),e9o=o("blenderbot"),o9o=o(" \u2014 "),yG=a("a"),r9o=o("BlenderbotForCausalLM"),t9o=o(" (Blenderbot model)"),a9o=l(),G2=a("li"),qfe=a("strong"),n9o=o("blenderbot-small"),s9o=o(" \u2014 "),xG=a("a"),l9o=o("BlenderbotSmallForCausalLM"),i9o=o(" (BlenderbotSmall model)"),d9o=l(),O2=a("li"),jfe=a("strong"),c9o=o("bloom"),m9o=o(" \u2014 "),$G=a("a"),f9o=o("BloomForCausalLM"),g9o=o(" (BLOOM model)"),h9o=l(),V2=a("li"),Dfe=a("strong"),u9o=o("camembert"),p9o=o(" \u2014 "),kG=a("a"),_9o=o("CamembertForCausalLM"),b9o=o(" (CamemBERT model)"),v9o=l(),X2=a("li"),Gfe=a("strong"),F9o=o("codegen"),T9o=o(" \u2014 "),SG=a("a"),M9o=o("CodeGenForCausalLM"),E9o=o(" (CodeGen model)"),C9o=l(),z2=a("li"),Ofe=a("strong"),w9o=o("ctrl"),A9o=o(" \u2014 "),RG=a("a"),L9o=o("CTRLLMHeadModel"),y9o=o(" (CTRL model)"),x9o=l(),Q2=a("li"),Vfe=a("strong"),$9o=o("data2vec-text"),k9o=o(" \u2014 "),PG=a("a"),S9o=o("Data2VecTextForCausalLM"),R9o=o(" (Data2VecText model)"),P9o=l(),W2=a("li"),Xfe=a("strong"),B9o=o("electra"),I9o=o(" \u2014 "),BG=a("a"),N9o=o("ElectraForCausalLM"),q9o=o(" (ELECTRA model)"),j9o=l(),H2=a("li"),zfe=a("strong"),D9o=o("gpt2"),G9o=o(" \u2014 "),IG=a("a"),O9o=o("GPT2LMHeadModel"),V9o=o(" (OpenAI GPT-2 model)"),X9o=l(),U2=a("li"),Qfe=a("strong"),z9o=o("gpt_neo"),Q9o=o(" \u2014 "),NG=a("a"),W9o=o("GPTNeoForCausalLM"),H9o=o(" (GPT Neo model)"),U9o=l(),J2=a("li"),Wfe=a("strong"),J9o=o("gpt_neox"),Y9o=o(" \u2014 "),qG=a("a"),K9o=o("GPTNeoXForCausalLM"),Z9o=o(" (GPT NeoX model)"),exo=l(),Y2=a("li"),Hfe=a("strong"),oxo=o("gptj"),rxo=o(" \u2014 "),jG=a("a"),txo=o("GPTJForCausalLM"),axo=o(" (GPT-J model)"),nxo=l(),K2=a("li"),Ufe=a("strong"),sxo=o("marian"),lxo=o(" \u2014 "),DG=a("a"),ixo=o("MarianForCausalLM"),dxo=o(" (Marian model)"),cxo=l(),Z2=a("li"),Jfe=a("strong"),mxo=o("mbart"),fxo=o(" \u2014 "),GG=a("a"),gxo=o("MBartForCausalLM"),hxo=o(" (mBART model)"),uxo=l(),eb=a("li"),Yfe=a("strong"),pxo=o("megatron-bert"),_xo=o(" \u2014 "),OG=a("a"),bxo=o("MegatronBertForCausalLM"),vxo=o(" (Megatron-BERT model)"),Fxo=l(),ob=a("li"),Kfe=a("strong"),Txo=o("openai-gpt"),Mxo=o(" \u2014 "),VG=a("a"),Exo=o("OpenAIGPTLMHeadModel"),Cxo=o(" (OpenAI GPT model)"),wxo=l(),rb=a("li"),Zfe=a("strong"),Axo=o("opt"),Lxo=o(" \u2014 "),XG=a("a"),yxo=o("OPTForCausalLM"),xxo=o(" (OPT model)"),$xo=l(),tb=a("li"),ege=a("strong"),kxo=o("pegasus"),Sxo=o(" \u2014 "),zG=a("a"),Rxo=o("PegasusForCausalLM"),Pxo=o(" (Pegasus model)"),Bxo=l(),ab=a("li"),oge=a("strong"),Ixo=o("plbart"),Nxo=o(" \u2014 "),QG=a("a"),qxo=o("PLBartForCausalLM"),jxo=o(" (PLBart model)"),Dxo=l(),nb=a("li"),rge=a("strong"),Gxo=o("prophetnet"),Oxo=o(" \u2014 "),WG=a("a"),Vxo=o("ProphetNetForCausalLM"),Xxo=o(" (ProphetNet model)"),zxo=l(),sb=a("li"),tge=a("strong"),Qxo=o("qdqbert"),Wxo=o(" \u2014 "),HG=a("a"),Hxo=o("QDQBertLMHeadModel"),Uxo=o(" (QDQBert model)"),Jxo=l(),lb=a("li"),age=a("strong"),Yxo=o("reformer"),Kxo=o(" \u2014 "),UG=a("a"),Zxo=o("ReformerModelWithLMHead"),e$o=o(" (Reformer model)"),o$o=l(),ib=a("li"),nge=a("strong"),r$o=o("rembert"),t$o=o(" \u2014 "),JG=a("a"),a$o=o("RemBertForCausalLM"),n$o=o(" (RemBERT model)"),s$o=l(),db=a("li"),sge=a("strong"),l$o=o("roberta"),i$o=o(" \u2014 "),YG=a("a"),d$o=o("RobertaForCausalLM"),c$o=o(" (RoBERTa model)"),m$o=l(),cb=a("li"),lge=a("strong"),f$o=o("roformer"),g$o=o(" \u2014 "),KG=a("a"),h$o=o("RoFormerForCausalLM"),u$o=o(" (RoFormer model)"),p$o=l(),mb=a("li"),ige=a("strong"),_$o=o("speech_to_text_2"),b$o=o(" \u2014 "),ZG=a("a"),v$o=o("Speech2Text2ForCausalLM"),F$o=o(" (Speech2Text2 model)"),T$o=l(),fb=a("li"),dge=a("strong"),M$o=o("transfo-xl"),E$o=o(" \u2014 "),eO=a("a"),C$o=o("TransfoXLLMHeadModel"),w$o=o(" (Transformer-XL model)"),A$o=l(),gb=a("li"),cge=a("strong"),L$o=o("trocr"),y$o=o(" \u2014 "),oO=a("a"),x$o=o("TrOCRForCausalLM"),$$o=o(" (TrOCR model)"),k$o=l(),hb=a("li"),mge=a("strong"),S$o=o("xglm"),R$o=o(" \u2014 "),rO=a("a"),P$o=o("XGLMForCausalLM"),B$o=o(" (XGLM model)"),I$o=l(),ub=a("li"),fge=a("strong"),N$o=o("xlm"),q$o=o(" \u2014 "),tO=a("a"),j$o=o("XLMWithLMHeadModel"),D$o=o(" (XLM model)"),G$o=l(),pb=a("li"),gge=a("strong"),O$o=o("xlm-prophetnet"),V$o=o(" \u2014 "),aO=a("a"),X$o=o("XLMProphetNetForCausalLM"),z$o=o(" (XLM-ProphetNet model)"),Q$o=l(),_b=a("li"),hge=a("strong"),W$o=o("xlm-roberta"),H$o=o(" \u2014 "),nO=a("a"),U$o=o("XLMRobertaForCausalLM"),J$o=o(" (XLM-RoBERTa model)"),Y$o=l(),bb=a("li"),uge=a("strong"),K$o=o("xlm-roberta-xl"),Z$o=o(" \u2014 "),sO=a("a"),eko=o("XLMRobertaXLForCausalLM"),oko=o(" (XLM-RoBERTa-XL model)"),rko=l(),vb=a("li"),pge=a("strong"),tko=o("xlnet"),ako=o(" \u2014 "),lO=a("a"),nko=o("XLNetLMHeadModel"),sko=o(" (XLNet model)"),lko=l(),Fb=a("p"),iko=o("The model is set in evaluation mode by default using "),_ge=a("code"),dko=o("model.eval()"),cko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=a("code"),mko=o("model.train()"),fko=l(),F(Tb.$$.fragment),JOe=l(),Wi=a("h2"),Mb=a("a"),vge=a("span"),F(Ly.$$.fragment),gko=l(),Fge=a("span"),hko=o("AutoModelForMaskedLM"),YOe=l(),So=a("div"),F(yy.$$.fragment),uko=l(),Hi=a("p"),pko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iO=a("a"),_ko=o("from_pretrained()"),bko=o(" class method or the "),dO=a("a"),vko=o("from_config()"),Fko=o(` class
method.`),Tko=l(),xy=a("p"),Mko=o("This class cannot be instantiated directly using "),Tge=a("code"),Eko=o("__init__()"),Cko=o(" (throws an error)."),wko=l(),dt=a("div"),F($y.$$.fragment),Ako=l(),Mge=a("p"),Lko=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yko=l(),Ui=a("p"),xko=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),$ko=o("not"),kko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),Sko=o("from_pretrained()"),Rko=o(" to load the model weights."),Pko=l(),F(Eb.$$.fragment),Bko=l(),Ze=a("div"),F(ky.$$.fragment),Iko=l(),Cge=a("p"),Nko=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qko=l(),Na=a("p"),jko=o("The model class to instantiate is selected based on the "),wge=a("code"),Dko=o("model_type"),Gko=o(` property of the config object (either
passed as an argument or loaded from `),Age=a("code"),Oko=o("pretrained_model_name_or_path"),Vko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=a("code"),Xko=o("pretrained_model_name_or_path"),zko=o(":"),Qko=l(),W=a("ul"),Cb=a("li"),yge=a("strong"),Wko=o("albert"),Hko=o(" \u2014 "),mO=a("a"),Uko=o("AlbertForMaskedLM"),Jko=o(" (ALBERT model)"),Yko=l(),wb=a("li"),xge=a("strong"),Kko=o("bart"),Zko=o(" \u2014 "),fO=a("a"),eSo=o("BartForConditionalGeneration"),oSo=o(" (BART model)"),rSo=l(),Ab=a("li"),$ge=a("strong"),tSo=o("bert"),aSo=o(" \u2014 "),gO=a("a"),nSo=o("BertForMaskedLM"),sSo=o(" (BERT model)"),lSo=l(),Lb=a("li"),kge=a("strong"),iSo=o("big_bird"),dSo=o(" \u2014 "),hO=a("a"),cSo=o("BigBirdForMaskedLM"),mSo=o(" (BigBird model)"),fSo=l(),yb=a("li"),Sge=a("strong"),gSo=o("camembert"),hSo=o(" \u2014 "),uO=a("a"),uSo=o("CamembertForMaskedLM"),pSo=o(" (CamemBERT model)"),_So=l(),xb=a("li"),Rge=a("strong"),bSo=o("convbert"),vSo=o(" \u2014 "),pO=a("a"),FSo=o("ConvBertForMaskedLM"),TSo=o(" (ConvBERT model)"),MSo=l(),$b=a("li"),Pge=a("strong"),ESo=o("data2vec-text"),CSo=o(" \u2014 "),_O=a("a"),wSo=o("Data2VecTextForMaskedLM"),ASo=o(" (Data2VecText model)"),LSo=l(),kb=a("li"),Bge=a("strong"),ySo=o("deberta"),xSo=o(" \u2014 "),bO=a("a"),$So=o("DebertaForMaskedLM"),kSo=o(" (DeBERTa model)"),SSo=l(),Sb=a("li"),Ige=a("strong"),RSo=o("deberta-v2"),PSo=o(" \u2014 "),vO=a("a"),BSo=o("DebertaV2ForMaskedLM"),ISo=o(" (DeBERTa-v2 model)"),NSo=l(),Rb=a("li"),Nge=a("strong"),qSo=o("distilbert"),jSo=o(" \u2014 "),FO=a("a"),DSo=o("DistilBertForMaskedLM"),GSo=o(" (DistilBERT model)"),OSo=l(),Pb=a("li"),qge=a("strong"),VSo=o("electra"),XSo=o(" \u2014 "),TO=a("a"),zSo=o("ElectraForMaskedLM"),QSo=o(" (ELECTRA model)"),WSo=l(),Bb=a("li"),jge=a("strong"),HSo=o("flaubert"),USo=o(" \u2014 "),MO=a("a"),JSo=o("FlaubertWithLMHeadModel"),YSo=o(" (FlauBERT model)"),KSo=l(),Ib=a("li"),Dge=a("strong"),ZSo=o("fnet"),eRo=o(" \u2014 "),EO=a("a"),oRo=o("FNetForMaskedLM"),rRo=o(" (FNet model)"),tRo=l(),Nb=a("li"),Gge=a("strong"),aRo=o("funnel"),nRo=o(" \u2014 "),CO=a("a"),sRo=o("FunnelForMaskedLM"),lRo=o(" (Funnel Transformer model)"),iRo=l(),qb=a("li"),Oge=a("strong"),dRo=o("ibert"),cRo=o(" \u2014 "),wO=a("a"),mRo=o("IBertForMaskedLM"),fRo=o(" (I-BERT model)"),gRo=l(),jb=a("li"),Vge=a("strong"),hRo=o("layoutlm"),uRo=o(" \u2014 "),AO=a("a"),pRo=o("LayoutLMForMaskedLM"),_Ro=o(" (LayoutLM model)"),bRo=l(),Db=a("li"),Xge=a("strong"),vRo=o("longformer"),FRo=o(" \u2014 "),LO=a("a"),TRo=o("LongformerForMaskedLM"),MRo=o(" (Longformer model)"),ERo=l(),Gb=a("li"),zge=a("strong"),CRo=o("luke"),wRo=o(" \u2014 "),yO=a("a"),ARo=o("LukeForMaskedLM"),LRo=o(" (LUKE model)"),yRo=l(),Ob=a("li"),Qge=a("strong"),xRo=o("mbart"),$Ro=o(" \u2014 "),xO=a("a"),kRo=o("MBartForConditionalGeneration"),SRo=o(" (mBART model)"),RRo=l(),Vb=a("li"),Wge=a("strong"),PRo=o("megatron-bert"),BRo=o(" \u2014 "),$O=a("a"),IRo=o("MegatronBertForMaskedLM"),NRo=o(" (Megatron-BERT model)"),qRo=l(),Xb=a("li"),Hge=a("strong"),jRo=o("mobilebert"),DRo=o(" \u2014 "),kO=a("a"),GRo=o("MobileBertForMaskedLM"),ORo=o(" (MobileBERT model)"),VRo=l(),zb=a("li"),Uge=a("strong"),XRo=o("mpnet"),zRo=o(" \u2014 "),SO=a("a"),QRo=o("MPNetForMaskedLM"),WRo=o(" (MPNet model)"),HRo=l(),Qb=a("li"),Jge=a("strong"),URo=o("nezha"),JRo=o(" \u2014 "),RO=a("a"),YRo=o("NezhaForMaskedLM"),KRo=o(" (Nezha model)"),ZRo=l(),Wb=a("li"),Yge=a("strong"),ePo=o("nystromformer"),oPo=o(" \u2014 "),PO=a("a"),rPo=o("NystromformerForMaskedLM"),tPo=o(" (Nystr\xF6mformer model)"),aPo=l(),Hb=a("li"),Kge=a("strong"),nPo=o("perceiver"),sPo=o(" \u2014 "),BO=a("a"),lPo=o("PerceiverForMaskedLM"),iPo=o(" (Perceiver model)"),dPo=l(),Ub=a("li"),Zge=a("strong"),cPo=o("qdqbert"),mPo=o(" \u2014 "),IO=a("a"),fPo=o("QDQBertForMaskedLM"),gPo=o(" (QDQBert model)"),hPo=l(),Jb=a("li"),ehe=a("strong"),uPo=o("reformer"),pPo=o(" \u2014 "),NO=a("a"),_Po=o("ReformerForMaskedLM"),bPo=o(" (Reformer model)"),vPo=l(),Yb=a("li"),ohe=a("strong"),FPo=o("rembert"),TPo=o(" \u2014 "),qO=a("a"),MPo=o("RemBertForMaskedLM"),EPo=o(" (RemBERT model)"),CPo=l(),Kb=a("li"),rhe=a("strong"),wPo=o("roberta"),APo=o(" \u2014 "),jO=a("a"),LPo=o("RobertaForMaskedLM"),yPo=o(" (RoBERTa model)"),xPo=l(),Zb=a("li"),the=a("strong"),$Po=o("roformer"),kPo=o(" \u2014 "),DO=a("a"),SPo=o("RoFormerForMaskedLM"),RPo=o(" (RoFormer model)"),PPo=l(),ev=a("li"),ahe=a("strong"),BPo=o("squeezebert"),IPo=o(" \u2014 "),GO=a("a"),NPo=o("SqueezeBertForMaskedLM"),qPo=o(" (SqueezeBERT model)"),jPo=l(),ov=a("li"),nhe=a("strong"),DPo=o("tapas"),GPo=o(" \u2014 "),OO=a("a"),OPo=o("TapasForMaskedLM"),VPo=o(" (TAPAS model)"),XPo=l(),rv=a("li"),she=a("strong"),zPo=o("wav2vec2"),QPo=o(" \u2014 "),lhe=a("code"),WPo=o("Wav2Vec2ForMaskedLM"),HPo=o(" (Wav2Vec2 model)"),UPo=l(),tv=a("li"),ihe=a("strong"),JPo=o("xlm"),YPo=o(" \u2014 "),VO=a("a"),KPo=o("XLMWithLMHeadModel"),ZPo=o(" (XLM model)"),eBo=l(),av=a("li"),dhe=a("strong"),oBo=o("xlm-roberta"),rBo=o(" \u2014 "),XO=a("a"),tBo=o("XLMRobertaForMaskedLM"),aBo=o(" (XLM-RoBERTa model)"),nBo=l(),nv=a("li"),che=a("strong"),sBo=o("xlm-roberta-xl"),lBo=o(" \u2014 "),zO=a("a"),iBo=o("XLMRobertaXLForMaskedLM"),dBo=o(" (XLM-RoBERTa-XL model)"),cBo=l(),sv=a("li"),mhe=a("strong"),mBo=o("yoso"),fBo=o(" \u2014 "),QO=a("a"),gBo=o("YosoForMaskedLM"),hBo=o(" (YOSO model)"),uBo=l(),lv=a("p"),pBo=o("The model is set in evaluation mode by default using "),fhe=a("code"),_Bo=o("model.eval()"),bBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=a("code"),vBo=o("model.train()"),FBo=l(),F(iv.$$.fragment),KOe=l(),Ji=a("h2"),dv=a("a"),hhe=a("span"),F(Sy.$$.fragment),TBo=l(),uhe=a("span"),MBo=o("AutoModelForSeq2SeqLM"),ZOe=l(),Ro=a("div"),F(Ry.$$.fragment),EBo=l(),Yi=a("p"),CBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WO=a("a"),wBo=o("from_pretrained()"),ABo=o(" class method or the "),HO=a("a"),LBo=o("from_config()"),yBo=o(` class
method.`),xBo=l(),Py=a("p"),$Bo=o("This class cannot be instantiated directly using "),phe=a("code"),kBo=o("__init__()"),SBo=o(" (throws an error)."),RBo=l(),ct=a("div"),F(By.$$.fragment),PBo=l(),_he=a("p"),BBo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IBo=l(),Ki=a("p"),NBo=o(`Note:
Loading a model from its configuration file does `),bhe=a("strong"),qBo=o("not"),jBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=a("a"),DBo=o("from_pretrained()"),GBo=o(" to load the model weights."),OBo=l(),F(cv.$$.fragment),VBo=l(),eo=a("div"),F(Iy.$$.fragment),XBo=l(),vhe=a("p"),zBo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QBo=l(),qa=a("p"),WBo=o("The model class to instantiate is selected based on the "),Fhe=a("code"),HBo=o("model_type"),UBo=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),JBo=o("pretrained_model_name_or_path"),YBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=a("code"),KBo=o("pretrained_model_name_or_path"),ZBo=o(":"),eIo=l(),ue=a("ul"),mv=a("li"),Ehe=a("strong"),oIo=o("bart"),rIo=o(" \u2014 "),JO=a("a"),tIo=o("BartForConditionalGeneration"),aIo=o(" (BART model)"),nIo=l(),fv=a("li"),Che=a("strong"),sIo=o("bigbird_pegasus"),lIo=o(" \u2014 "),YO=a("a"),iIo=o("BigBirdPegasusForConditionalGeneration"),dIo=o(" (BigBird-Pegasus model)"),cIo=l(),gv=a("li"),whe=a("strong"),mIo=o("blenderbot"),fIo=o(" \u2014 "),KO=a("a"),gIo=o("BlenderbotForConditionalGeneration"),hIo=o(" (Blenderbot model)"),uIo=l(),hv=a("li"),Ahe=a("strong"),pIo=o("blenderbot-small"),_Io=o(" \u2014 "),ZO=a("a"),bIo=o("BlenderbotSmallForConditionalGeneration"),vIo=o(" (BlenderbotSmall model)"),FIo=l(),uv=a("li"),Lhe=a("strong"),TIo=o("encoder-decoder"),MIo=o(" \u2014 "),eV=a("a"),EIo=o("EncoderDecoderModel"),CIo=o(" (Encoder decoder model)"),wIo=l(),pv=a("li"),yhe=a("strong"),AIo=o("fsmt"),LIo=o(" \u2014 "),oV=a("a"),yIo=o("FSMTForConditionalGeneration"),xIo=o(" (FairSeq Machine-Translation model)"),$Io=l(),_v=a("li"),xhe=a("strong"),kIo=o("led"),SIo=o(" \u2014 "),rV=a("a"),RIo=o("LEDForConditionalGeneration"),PIo=o(" (LED model)"),BIo=l(),bv=a("li"),$he=a("strong"),IIo=o("longt5"),NIo=o(" \u2014 "),tV=a("a"),qIo=o("LongT5ForConditionalGeneration"),jIo=o(" (LongT5 model)"),DIo=l(),vv=a("li"),khe=a("strong"),GIo=o("m2m_100"),OIo=o(" \u2014 "),aV=a("a"),VIo=o("M2M100ForConditionalGeneration"),XIo=o(" (M2M100 model)"),zIo=l(),Fv=a("li"),She=a("strong"),QIo=o("marian"),WIo=o(" \u2014 "),nV=a("a"),HIo=o("MarianMTModel"),UIo=o(" (Marian model)"),JIo=l(),Tv=a("li"),Rhe=a("strong"),YIo=o("mbart"),KIo=o(" \u2014 "),sV=a("a"),ZIo=o("MBartForConditionalGeneration"),eNo=o(" (mBART model)"),oNo=l(),Mv=a("li"),Phe=a("strong"),rNo=o("mt5"),tNo=o(" \u2014 "),lV=a("a"),aNo=o("MT5ForConditionalGeneration"),nNo=o(" (MT5 model)"),sNo=l(),Ev=a("li"),Bhe=a("strong"),lNo=o("pegasus"),iNo=o(" \u2014 "),iV=a("a"),dNo=o("PegasusForConditionalGeneration"),cNo=o(" (Pegasus model)"),mNo=l(),Cv=a("li"),Ihe=a("strong"),fNo=o("plbart"),gNo=o(" \u2014 "),dV=a("a"),hNo=o("PLBartForConditionalGeneration"),uNo=o(" (PLBart model)"),pNo=l(),wv=a("li"),Nhe=a("strong"),_No=o("prophetnet"),bNo=o(" \u2014 "),cV=a("a"),vNo=o("ProphetNetForConditionalGeneration"),FNo=o(" (ProphetNet model)"),TNo=l(),Av=a("li"),qhe=a("strong"),MNo=o("t5"),ENo=o(" \u2014 "),mV=a("a"),CNo=o("T5ForConditionalGeneration"),wNo=o(" (T5 model)"),ANo=l(),Lv=a("li"),jhe=a("strong"),LNo=o("xlm-prophetnet"),yNo=o(" \u2014 "),fV=a("a"),xNo=o("XLMProphetNetForConditionalGeneration"),$No=o(" (XLM-ProphetNet model)"),kNo=l(),yv=a("p"),SNo=o("The model is set in evaluation mode by default using "),Dhe=a("code"),RNo=o("model.eval()"),PNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=a("code"),BNo=o("model.train()"),INo=l(),F(xv.$$.fragment),eVe=l(),Zi=a("h2"),$v=a("a"),Ohe=a("span"),F(Ny.$$.fragment),NNo=l(),Vhe=a("span"),qNo=o("AutoModelForSequenceClassification"),oVe=l(),Po=a("div"),F(qy.$$.fragment),jNo=l(),ed=a("p"),DNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gV=a("a"),GNo=o("from_pretrained()"),ONo=o(" class method or the "),hV=a("a"),VNo=o("from_config()"),XNo=o(` class
method.`),zNo=l(),jy=a("p"),QNo=o("This class cannot be instantiated directly using "),Xhe=a("code"),WNo=o("__init__()"),HNo=o(" (throws an error)."),UNo=l(),mt=a("div"),F(Dy.$$.fragment),JNo=l(),zhe=a("p"),YNo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KNo=l(),od=a("p"),ZNo=o(`Note:
Loading a model from its configuration file does `),Qhe=a("strong"),eqo=o("not"),oqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=a("a"),rqo=o("from_pretrained()"),tqo=o(" to load the model weights."),aqo=l(),F(kv.$$.fragment),nqo=l(),oo=a("div"),F(Gy.$$.fragment),sqo=l(),Whe=a("p"),lqo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iqo=l(),ja=a("p"),dqo=o("The model class to instantiate is selected based on the "),Hhe=a("code"),cqo=o("model_type"),mqo=o(` property of the config object (either
passed as an argument or loaded from `),Uhe=a("code"),fqo=o("pretrained_model_name_or_path"),gqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),hqo=o("pretrained_model_name_or_path"),uqo=o(":"),pqo=l(),N=a("ul"),Sv=a("li"),Yhe=a("strong"),_qo=o("albert"),bqo=o(" \u2014 "),pV=a("a"),vqo=o("AlbertForSequenceClassification"),Fqo=o(" (ALBERT model)"),Tqo=l(),Rv=a("li"),Khe=a("strong"),Mqo=o("bart"),Eqo=o(" \u2014 "),_V=a("a"),Cqo=o("BartForSequenceClassification"),wqo=o(" (BART model)"),Aqo=l(),Pv=a("li"),Zhe=a("strong"),Lqo=o("bert"),yqo=o(" \u2014 "),bV=a("a"),xqo=o("BertForSequenceClassification"),$qo=o(" (BERT model)"),kqo=l(),Bv=a("li"),eue=a("strong"),Sqo=o("big_bird"),Rqo=o(" \u2014 "),vV=a("a"),Pqo=o("BigBirdForSequenceClassification"),Bqo=o(" (BigBird model)"),Iqo=l(),Iv=a("li"),oue=a("strong"),Nqo=o("bigbird_pegasus"),qqo=o(" \u2014 "),FV=a("a"),jqo=o("BigBirdPegasusForSequenceClassification"),Dqo=o(" (BigBird-Pegasus model)"),Gqo=l(),Nv=a("li"),rue=a("strong"),Oqo=o("bloom"),Vqo=o(" \u2014 "),TV=a("a"),Xqo=o("BloomForSequenceClassification"),zqo=o(" (BLOOM model)"),Qqo=l(),qv=a("li"),tue=a("strong"),Wqo=o("camembert"),Hqo=o(" \u2014 "),MV=a("a"),Uqo=o("CamembertForSequenceClassification"),Jqo=o(" (CamemBERT model)"),Yqo=l(),jv=a("li"),aue=a("strong"),Kqo=o("canine"),Zqo=o(" \u2014 "),EV=a("a"),ejo=o("CanineForSequenceClassification"),ojo=o(" (CANINE model)"),rjo=l(),Dv=a("li"),nue=a("strong"),tjo=o("convbert"),ajo=o(" \u2014 "),CV=a("a"),njo=o("ConvBertForSequenceClassification"),sjo=o(" (ConvBERT model)"),ljo=l(),Gv=a("li"),sue=a("strong"),ijo=o("ctrl"),djo=o(" \u2014 "),wV=a("a"),cjo=o("CTRLForSequenceClassification"),mjo=o(" (CTRL model)"),fjo=l(),Ov=a("li"),lue=a("strong"),gjo=o("data2vec-text"),hjo=o(" \u2014 "),AV=a("a"),ujo=o("Data2VecTextForSequenceClassification"),pjo=o(" (Data2VecText model)"),_jo=l(),Vv=a("li"),iue=a("strong"),bjo=o("deberta"),vjo=o(" \u2014 "),LV=a("a"),Fjo=o("DebertaForSequenceClassification"),Tjo=o(" (DeBERTa model)"),Mjo=l(),Xv=a("li"),due=a("strong"),Ejo=o("deberta-v2"),Cjo=o(" \u2014 "),yV=a("a"),wjo=o("DebertaV2ForSequenceClassification"),Ajo=o(" (DeBERTa-v2 model)"),Ljo=l(),zv=a("li"),cue=a("strong"),yjo=o("distilbert"),xjo=o(" \u2014 "),xV=a("a"),$jo=o("DistilBertForSequenceClassification"),kjo=o(" (DistilBERT model)"),Sjo=l(),Qv=a("li"),mue=a("strong"),Rjo=o("electra"),Pjo=o(" \u2014 "),$V=a("a"),Bjo=o("ElectraForSequenceClassification"),Ijo=o(" (ELECTRA model)"),Njo=l(),Wv=a("li"),fue=a("strong"),qjo=o("flaubert"),jjo=o(" \u2014 "),kV=a("a"),Djo=o("FlaubertForSequenceClassification"),Gjo=o(" (FlauBERT model)"),Ojo=l(),Hv=a("li"),gue=a("strong"),Vjo=o("fnet"),Xjo=o(" \u2014 "),SV=a("a"),zjo=o("FNetForSequenceClassification"),Qjo=o(" (FNet model)"),Wjo=l(),Uv=a("li"),hue=a("strong"),Hjo=o("funnel"),Ujo=o(" \u2014 "),RV=a("a"),Jjo=o("FunnelForSequenceClassification"),Yjo=o(" (Funnel Transformer model)"),Kjo=l(),Jv=a("li"),uue=a("strong"),Zjo=o("gpt2"),eDo=o(" \u2014 "),PV=a("a"),oDo=o("GPT2ForSequenceClassification"),rDo=o(" (OpenAI GPT-2 model)"),tDo=l(),Yv=a("li"),pue=a("strong"),aDo=o("gpt_neo"),nDo=o(" \u2014 "),BV=a("a"),sDo=o("GPTNeoForSequenceClassification"),lDo=o(" (GPT Neo model)"),iDo=l(),Kv=a("li"),_ue=a("strong"),dDo=o("gptj"),cDo=o(" \u2014 "),IV=a("a"),mDo=o("GPTJForSequenceClassification"),fDo=o(" (GPT-J model)"),gDo=l(),Zv=a("li"),bue=a("strong"),hDo=o("ibert"),uDo=o(" \u2014 "),NV=a("a"),pDo=o("IBertForSequenceClassification"),_Do=o(" (I-BERT model)"),bDo=l(),e1=a("li"),vue=a("strong"),vDo=o("layoutlm"),FDo=o(" \u2014 "),qV=a("a"),TDo=o("LayoutLMForSequenceClassification"),MDo=o(" (LayoutLM model)"),EDo=l(),o1=a("li"),Fue=a("strong"),CDo=o("layoutlmv2"),wDo=o(" \u2014 "),jV=a("a"),ADo=o("LayoutLMv2ForSequenceClassification"),LDo=o(" (LayoutLMv2 model)"),yDo=l(),r1=a("li"),Tue=a("strong"),xDo=o("layoutlmv3"),$Do=o(" \u2014 "),DV=a("a"),kDo=o("LayoutLMv3ForSequenceClassification"),SDo=o(" (LayoutLMv3 model)"),RDo=l(),t1=a("li"),Mue=a("strong"),PDo=o("led"),BDo=o(" \u2014 "),GV=a("a"),IDo=o("LEDForSequenceClassification"),NDo=o(" (LED model)"),qDo=l(),a1=a("li"),Eue=a("strong"),jDo=o("longformer"),DDo=o(" \u2014 "),OV=a("a"),GDo=o("LongformerForSequenceClassification"),ODo=o(" (Longformer model)"),VDo=l(),n1=a("li"),Cue=a("strong"),XDo=o("mbart"),zDo=o(" \u2014 "),VV=a("a"),QDo=o("MBartForSequenceClassification"),WDo=o(" (mBART model)"),HDo=l(),s1=a("li"),wue=a("strong"),UDo=o("megatron-bert"),JDo=o(" \u2014 "),XV=a("a"),YDo=o("MegatronBertForSequenceClassification"),KDo=o(" (Megatron-BERT model)"),ZDo=l(),l1=a("li"),Aue=a("strong"),eGo=o("mobilebert"),oGo=o(" \u2014 "),zV=a("a"),rGo=o("MobileBertForSequenceClassification"),tGo=o(" (MobileBERT model)"),aGo=l(),i1=a("li"),Lue=a("strong"),nGo=o("mpnet"),sGo=o(" \u2014 "),QV=a("a"),lGo=o("MPNetForSequenceClassification"),iGo=o(" (MPNet model)"),dGo=l(),d1=a("li"),yue=a("strong"),cGo=o("nezha"),mGo=o(" \u2014 "),WV=a("a"),fGo=o("NezhaForSequenceClassification"),gGo=o(" (Nezha model)"),hGo=l(),c1=a("li"),xue=a("strong"),uGo=o("nystromformer"),pGo=o(" \u2014 "),HV=a("a"),_Go=o("NystromformerForSequenceClassification"),bGo=o(" (Nystr\xF6mformer model)"),vGo=l(),m1=a("li"),$ue=a("strong"),FGo=o("openai-gpt"),TGo=o(" \u2014 "),UV=a("a"),MGo=o("OpenAIGPTForSequenceClassification"),EGo=o(" (OpenAI GPT model)"),CGo=l(),f1=a("li"),kue=a("strong"),wGo=o("perceiver"),AGo=o(" \u2014 "),JV=a("a"),LGo=o("PerceiverForSequenceClassification"),yGo=o(" (Perceiver model)"),xGo=l(),g1=a("li"),Sue=a("strong"),$Go=o("plbart"),kGo=o(" \u2014 "),YV=a("a"),SGo=o("PLBartForSequenceClassification"),RGo=o(" (PLBart model)"),PGo=l(),h1=a("li"),Rue=a("strong"),BGo=o("qdqbert"),IGo=o(" \u2014 "),KV=a("a"),NGo=o("QDQBertForSequenceClassification"),qGo=o(" (QDQBert model)"),jGo=l(),u1=a("li"),Pue=a("strong"),DGo=o("reformer"),GGo=o(" \u2014 "),ZV=a("a"),OGo=o("ReformerForSequenceClassification"),VGo=o(" (Reformer model)"),XGo=l(),p1=a("li"),Bue=a("strong"),zGo=o("rembert"),QGo=o(" \u2014 "),eX=a("a"),WGo=o("RemBertForSequenceClassification"),HGo=o(" (RemBERT model)"),UGo=l(),_1=a("li"),Iue=a("strong"),JGo=o("roberta"),YGo=o(" \u2014 "),oX=a("a"),KGo=o("RobertaForSequenceClassification"),ZGo=o(" (RoBERTa model)"),eOo=l(),b1=a("li"),Nue=a("strong"),oOo=o("roformer"),rOo=o(" \u2014 "),rX=a("a"),tOo=o("RoFormerForSequenceClassification"),aOo=o(" (RoFormer model)"),nOo=l(),v1=a("li"),que=a("strong"),sOo=o("squeezebert"),lOo=o(" \u2014 "),tX=a("a"),iOo=o("SqueezeBertForSequenceClassification"),dOo=o(" (SqueezeBERT model)"),cOo=l(),F1=a("li"),jue=a("strong"),mOo=o("tapas"),fOo=o(" \u2014 "),aX=a("a"),gOo=o("TapasForSequenceClassification"),hOo=o(" (TAPAS model)"),uOo=l(),T1=a("li"),Due=a("strong"),pOo=o("transfo-xl"),_Oo=o(" \u2014 "),nX=a("a"),bOo=o("TransfoXLForSequenceClassification"),vOo=o(" (Transformer-XL model)"),FOo=l(),M1=a("li"),Gue=a("strong"),TOo=o("xlm"),MOo=o(" \u2014 "),sX=a("a"),EOo=o("XLMForSequenceClassification"),COo=o(" (XLM model)"),wOo=l(),E1=a("li"),Oue=a("strong"),AOo=o("xlm-roberta"),LOo=o(" \u2014 "),lX=a("a"),yOo=o("XLMRobertaForSequenceClassification"),xOo=o(" (XLM-RoBERTa model)"),$Oo=l(),C1=a("li"),Vue=a("strong"),kOo=o("xlm-roberta-xl"),SOo=o(" \u2014 "),iX=a("a"),ROo=o("XLMRobertaXLForSequenceClassification"),POo=o(" (XLM-RoBERTa-XL model)"),BOo=l(),w1=a("li"),Xue=a("strong"),IOo=o("xlnet"),NOo=o(" \u2014 "),dX=a("a"),qOo=o("XLNetForSequenceClassification"),jOo=o(" (XLNet model)"),DOo=l(),A1=a("li"),zue=a("strong"),GOo=o("yoso"),OOo=o(" \u2014 "),cX=a("a"),VOo=o("YosoForSequenceClassification"),XOo=o(" (YOSO model)"),zOo=l(),L1=a("p"),QOo=o("The model is set in evaluation mode by default using "),Que=a("code"),WOo=o("model.eval()"),HOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=a("code"),UOo=o("model.train()"),JOo=l(),F(y1.$$.fragment),rVe=l(),rd=a("h2"),x1=a("a"),Hue=a("span"),F(Oy.$$.fragment),YOo=l(),Uue=a("span"),KOo=o("AutoModelForMultipleChoice"),tVe=l(),Bo=a("div"),F(Vy.$$.fragment),ZOo=l(),td=a("p"),eVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mX=a("a"),oVo=o("from_pretrained()"),rVo=o(" class method or the "),fX=a("a"),tVo=o("from_config()"),aVo=o(` class
method.`),nVo=l(),Xy=a("p"),sVo=o("This class cannot be instantiated directly using "),Jue=a("code"),lVo=o("__init__()"),iVo=o(" (throws an error)."),dVo=l(),ft=a("div"),F(zy.$$.fragment),cVo=l(),Yue=a("p"),mVo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fVo=l(),ad=a("p"),gVo=o(`Note:
Loading a model from its configuration file does `),Kue=a("strong"),hVo=o("not"),uVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),pVo=o("from_pretrained()"),_Vo=o(" to load the model weights."),bVo=l(),F($1.$$.fragment),vVo=l(),ro=a("div"),F(Qy.$$.fragment),FVo=l(),Zue=a("p"),TVo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MVo=l(),Da=a("p"),EVo=o("The model class to instantiate is selected based on the "),epe=a("code"),CVo=o("model_type"),wVo=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),AVo=o("pretrained_model_name_or_path"),LVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),yVo=o("pretrained_model_name_or_path"),xVo=o(":"),$Vo=l(),Z=a("ul"),k1=a("li"),tpe=a("strong"),kVo=o("albert"),SVo=o(" \u2014 "),hX=a("a"),RVo=o("AlbertForMultipleChoice"),PVo=o(" (ALBERT model)"),BVo=l(),S1=a("li"),ape=a("strong"),IVo=o("bert"),NVo=o(" \u2014 "),uX=a("a"),qVo=o("BertForMultipleChoice"),jVo=o(" (BERT model)"),DVo=l(),R1=a("li"),npe=a("strong"),GVo=o("big_bird"),OVo=o(" \u2014 "),pX=a("a"),VVo=o("BigBirdForMultipleChoice"),XVo=o(" (BigBird model)"),zVo=l(),P1=a("li"),spe=a("strong"),QVo=o("camembert"),WVo=o(" \u2014 "),_X=a("a"),HVo=o("CamembertForMultipleChoice"),UVo=o(" (CamemBERT model)"),JVo=l(),B1=a("li"),lpe=a("strong"),YVo=o("canine"),KVo=o(" \u2014 "),bX=a("a"),ZVo=o("CanineForMultipleChoice"),eXo=o(" (CANINE model)"),oXo=l(),I1=a("li"),ipe=a("strong"),rXo=o("convbert"),tXo=o(" \u2014 "),vX=a("a"),aXo=o("ConvBertForMultipleChoice"),nXo=o(" (ConvBERT model)"),sXo=l(),N1=a("li"),dpe=a("strong"),lXo=o("data2vec-text"),iXo=o(" \u2014 "),FX=a("a"),dXo=o("Data2VecTextForMultipleChoice"),cXo=o(" (Data2VecText model)"),mXo=l(),q1=a("li"),cpe=a("strong"),fXo=o("deberta-v2"),gXo=o(" \u2014 "),TX=a("a"),hXo=o("DebertaV2ForMultipleChoice"),uXo=o(" (DeBERTa-v2 model)"),pXo=l(),j1=a("li"),mpe=a("strong"),_Xo=o("distilbert"),bXo=o(" \u2014 "),MX=a("a"),vXo=o("DistilBertForMultipleChoice"),FXo=o(" (DistilBERT model)"),TXo=l(),D1=a("li"),fpe=a("strong"),MXo=o("electra"),EXo=o(" \u2014 "),EX=a("a"),CXo=o("ElectraForMultipleChoice"),wXo=o(" (ELECTRA model)"),AXo=l(),G1=a("li"),gpe=a("strong"),LXo=o("flaubert"),yXo=o(" \u2014 "),CX=a("a"),xXo=o("FlaubertForMultipleChoice"),$Xo=o(" (FlauBERT model)"),kXo=l(),O1=a("li"),hpe=a("strong"),SXo=o("fnet"),RXo=o(" \u2014 "),wX=a("a"),PXo=o("FNetForMultipleChoice"),BXo=o(" (FNet model)"),IXo=l(),V1=a("li"),upe=a("strong"),NXo=o("funnel"),qXo=o(" \u2014 "),AX=a("a"),jXo=o("FunnelForMultipleChoice"),DXo=o(" (Funnel Transformer model)"),GXo=l(),X1=a("li"),ppe=a("strong"),OXo=o("ibert"),VXo=o(" \u2014 "),LX=a("a"),XXo=o("IBertForMultipleChoice"),zXo=o(" (I-BERT model)"),QXo=l(),z1=a("li"),_pe=a("strong"),WXo=o("longformer"),HXo=o(" \u2014 "),yX=a("a"),UXo=o("LongformerForMultipleChoice"),JXo=o(" (Longformer model)"),YXo=l(),Q1=a("li"),bpe=a("strong"),KXo=o("megatron-bert"),ZXo=o(" \u2014 "),xX=a("a"),ezo=o("MegatronBertForMultipleChoice"),ozo=o(" (Megatron-BERT model)"),rzo=l(),W1=a("li"),vpe=a("strong"),tzo=o("mobilebert"),azo=o(" \u2014 "),$X=a("a"),nzo=o("MobileBertForMultipleChoice"),szo=o(" (MobileBERT model)"),lzo=l(),H1=a("li"),Fpe=a("strong"),izo=o("mpnet"),dzo=o(" \u2014 "),kX=a("a"),czo=o("MPNetForMultipleChoice"),mzo=o(" (MPNet model)"),fzo=l(),U1=a("li"),Tpe=a("strong"),gzo=o("nezha"),hzo=o(" \u2014 "),SX=a("a"),uzo=o("NezhaForMultipleChoice"),pzo=o(" (Nezha model)"),_zo=l(),J1=a("li"),Mpe=a("strong"),bzo=o("nystromformer"),vzo=o(" \u2014 "),RX=a("a"),Fzo=o("NystromformerForMultipleChoice"),Tzo=o(" (Nystr\xF6mformer model)"),Mzo=l(),Y1=a("li"),Epe=a("strong"),Ezo=o("qdqbert"),Czo=o(" \u2014 "),PX=a("a"),wzo=o("QDQBertForMultipleChoice"),Azo=o(" (QDQBert model)"),Lzo=l(),K1=a("li"),Cpe=a("strong"),yzo=o("rembert"),xzo=o(" \u2014 "),BX=a("a"),$zo=o("RemBertForMultipleChoice"),kzo=o(" (RemBERT model)"),Szo=l(),Z1=a("li"),wpe=a("strong"),Rzo=o("roberta"),Pzo=o(" \u2014 "),IX=a("a"),Bzo=o("RobertaForMultipleChoice"),Izo=o(" (RoBERTa model)"),Nzo=l(),eF=a("li"),Ape=a("strong"),qzo=o("roformer"),jzo=o(" \u2014 "),NX=a("a"),Dzo=o("RoFormerForMultipleChoice"),Gzo=o(" (RoFormer model)"),Ozo=l(),oF=a("li"),Lpe=a("strong"),Vzo=o("squeezebert"),Xzo=o(" \u2014 "),qX=a("a"),zzo=o("SqueezeBertForMultipleChoice"),Qzo=o(" (SqueezeBERT model)"),Wzo=l(),rF=a("li"),ype=a("strong"),Hzo=o("xlm"),Uzo=o(" \u2014 "),jX=a("a"),Jzo=o("XLMForMultipleChoice"),Yzo=o(" (XLM model)"),Kzo=l(),tF=a("li"),xpe=a("strong"),Zzo=o("xlm-roberta"),eQo=o(" \u2014 "),DX=a("a"),oQo=o("XLMRobertaForMultipleChoice"),rQo=o(" (XLM-RoBERTa model)"),tQo=l(),aF=a("li"),$pe=a("strong"),aQo=o("xlm-roberta-xl"),nQo=o(" \u2014 "),GX=a("a"),sQo=o("XLMRobertaXLForMultipleChoice"),lQo=o(" (XLM-RoBERTa-XL model)"),iQo=l(),nF=a("li"),kpe=a("strong"),dQo=o("xlnet"),cQo=o(" \u2014 "),OX=a("a"),mQo=o("XLNetForMultipleChoice"),fQo=o(" (XLNet model)"),gQo=l(),sF=a("li"),Spe=a("strong"),hQo=o("yoso"),uQo=o(" \u2014 "),VX=a("a"),pQo=o("YosoForMultipleChoice"),_Qo=o(" (YOSO model)"),bQo=l(),lF=a("p"),vQo=o("The model is set in evaluation mode by default using "),Rpe=a("code"),FQo=o("model.eval()"),TQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ppe=a("code"),MQo=o("model.train()"),EQo=l(),F(iF.$$.fragment),aVe=l(),nd=a("h2"),dF=a("a"),Bpe=a("span"),F(Wy.$$.fragment),CQo=l(),Ipe=a("span"),wQo=o("AutoModelForNextSentencePrediction"),nVe=l(),Io=a("div"),F(Hy.$$.fragment),AQo=l(),sd=a("p"),LQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XX=a("a"),yQo=o("from_pretrained()"),xQo=o(" class method or the "),zX=a("a"),$Qo=o("from_config()"),kQo=o(` class
method.`),SQo=l(),Uy=a("p"),RQo=o("This class cannot be instantiated directly using "),Npe=a("code"),PQo=o("__init__()"),BQo=o(" (throws an error)."),IQo=l(),gt=a("div"),F(Jy.$$.fragment),NQo=l(),qpe=a("p"),qQo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jQo=l(),ld=a("p"),DQo=o(`Note:
Loading a model from its configuration file does `),jpe=a("strong"),GQo=o("not"),OQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),VQo=o("from_pretrained()"),XQo=o(" to load the model weights."),zQo=l(),F(cF.$$.fragment),QQo=l(),to=a("div"),F(Yy.$$.fragment),WQo=l(),Dpe=a("p"),HQo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UQo=l(),Ga=a("p"),JQo=o("The model class to instantiate is selected based on the "),Gpe=a("code"),YQo=o("model_type"),KQo=o(` property of the config object (either
passed as an argument or loaded from `),Ope=a("code"),ZQo=o("pretrained_model_name_or_path"),eWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),oWo=o("pretrained_model_name_or_path"),rWo=o(":"),tWo=l(),No=a("ul"),mF=a("li"),Xpe=a("strong"),aWo=o("bert"),nWo=o(" \u2014 "),WX=a("a"),sWo=o("BertForNextSentencePrediction"),lWo=o(" (BERT model)"),iWo=l(),fF=a("li"),zpe=a("strong"),dWo=o("fnet"),cWo=o(" \u2014 "),HX=a("a"),mWo=o("FNetForNextSentencePrediction"),fWo=o(" (FNet model)"),gWo=l(),gF=a("li"),Qpe=a("strong"),hWo=o("megatron-bert"),uWo=o(" \u2014 "),UX=a("a"),pWo=o("MegatronBertForNextSentencePrediction"),_Wo=o(" (Megatron-BERT model)"),bWo=l(),hF=a("li"),Wpe=a("strong"),vWo=o("mobilebert"),FWo=o(" \u2014 "),JX=a("a"),TWo=o("MobileBertForNextSentencePrediction"),MWo=o(" (MobileBERT model)"),EWo=l(),uF=a("li"),Hpe=a("strong"),CWo=o("nezha"),wWo=o(" \u2014 "),YX=a("a"),AWo=o("NezhaForNextSentencePrediction"),LWo=o(" (Nezha model)"),yWo=l(),pF=a("li"),Upe=a("strong"),xWo=o("qdqbert"),$Wo=o(" \u2014 "),KX=a("a"),kWo=o("QDQBertForNextSentencePrediction"),SWo=o(" (QDQBert model)"),RWo=l(),_F=a("p"),PWo=o("The model is set in evaluation mode by default using "),Jpe=a("code"),BWo=o("model.eval()"),IWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=a("code"),NWo=o("model.train()"),qWo=l(),F(bF.$$.fragment),sVe=l(),id=a("h2"),vF=a("a"),Kpe=a("span"),F(Ky.$$.fragment),jWo=l(),Zpe=a("span"),DWo=o("AutoModelForTokenClassification"),lVe=l(),qo=a("div"),F(Zy.$$.fragment),GWo=l(),dd=a("p"),OWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZX=a("a"),VWo=o("from_pretrained()"),XWo=o(" class method or the "),ez=a("a"),zWo=o("from_config()"),QWo=o(` class
method.`),WWo=l(),e8=a("p"),HWo=o("This class cannot be instantiated directly using "),e_e=a("code"),UWo=o("__init__()"),JWo=o(" (throws an error)."),YWo=l(),ht=a("div"),F(o8.$$.fragment),KWo=l(),o_e=a("p"),ZWo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eHo=l(),cd=a("p"),oHo=o(`Note:
Loading a model from its configuration file does `),r_e=a("strong"),rHo=o("not"),tHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),aHo=o("from_pretrained()"),nHo=o(" to load the model weights."),sHo=l(),F(FF.$$.fragment),lHo=l(),ao=a("div"),F(r8.$$.fragment),iHo=l(),t_e=a("p"),dHo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cHo=l(),Oa=a("p"),mHo=o("The model class to instantiate is selected based on the "),a_e=a("code"),fHo=o("model_type"),gHo=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),hHo=o("pretrained_model_name_or_path"),uHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),pHo=o("pretrained_model_name_or_path"),_Ho=o(":"),bHo=l(),H=a("ul"),TF=a("li"),l_e=a("strong"),vHo=o("albert"),FHo=o(" \u2014 "),rz=a("a"),THo=o("AlbertForTokenClassification"),MHo=o(" (ALBERT model)"),EHo=l(),MF=a("li"),i_e=a("strong"),CHo=o("bert"),wHo=o(" \u2014 "),tz=a("a"),AHo=o("BertForTokenClassification"),LHo=o(" (BERT model)"),yHo=l(),EF=a("li"),d_e=a("strong"),xHo=o("big_bird"),$Ho=o(" \u2014 "),az=a("a"),kHo=o("BigBirdForTokenClassification"),SHo=o(" (BigBird model)"),RHo=l(),CF=a("li"),c_e=a("strong"),PHo=o("bloom"),BHo=o(" \u2014 "),nz=a("a"),IHo=o("BloomForTokenClassification"),NHo=o(" (BLOOM model)"),qHo=l(),wF=a("li"),m_e=a("strong"),jHo=o("camembert"),DHo=o(" \u2014 "),sz=a("a"),GHo=o("CamembertForTokenClassification"),OHo=o(" (CamemBERT model)"),VHo=l(),AF=a("li"),f_e=a("strong"),XHo=o("canine"),zHo=o(" \u2014 "),lz=a("a"),QHo=o("CanineForTokenClassification"),WHo=o(" (CANINE model)"),HHo=l(),LF=a("li"),g_e=a("strong"),UHo=o("convbert"),JHo=o(" \u2014 "),iz=a("a"),YHo=o("ConvBertForTokenClassification"),KHo=o(" (ConvBERT model)"),ZHo=l(),yF=a("li"),h_e=a("strong"),eUo=o("data2vec-text"),oUo=o(" \u2014 "),dz=a("a"),rUo=o("Data2VecTextForTokenClassification"),tUo=o(" (Data2VecText model)"),aUo=l(),xF=a("li"),u_e=a("strong"),nUo=o("deberta"),sUo=o(" \u2014 "),cz=a("a"),lUo=o("DebertaForTokenClassification"),iUo=o(" (DeBERTa model)"),dUo=l(),$F=a("li"),p_e=a("strong"),cUo=o("deberta-v2"),mUo=o(" \u2014 "),mz=a("a"),fUo=o("DebertaV2ForTokenClassification"),gUo=o(" (DeBERTa-v2 model)"),hUo=l(),kF=a("li"),__e=a("strong"),uUo=o("distilbert"),pUo=o(" \u2014 "),fz=a("a"),_Uo=o("DistilBertForTokenClassification"),bUo=o(" (DistilBERT model)"),vUo=l(),SF=a("li"),b_e=a("strong"),FUo=o("electra"),TUo=o(" \u2014 "),gz=a("a"),MUo=o("ElectraForTokenClassification"),EUo=o(" (ELECTRA model)"),CUo=l(),RF=a("li"),v_e=a("strong"),wUo=o("flaubert"),AUo=o(" \u2014 "),hz=a("a"),LUo=o("FlaubertForTokenClassification"),yUo=o(" (FlauBERT model)"),xUo=l(),PF=a("li"),F_e=a("strong"),$Uo=o("fnet"),kUo=o(" \u2014 "),uz=a("a"),SUo=o("FNetForTokenClassification"),RUo=o(" (FNet model)"),PUo=l(),BF=a("li"),T_e=a("strong"),BUo=o("funnel"),IUo=o(" \u2014 "),pz=a("a"),NUo=o("FunnelForTokenClassification"),qUo=o(" (Funnel Transformer model)"),jUo=l(),IF=a("li"),M_e=a("strong"),DUo=o("gpt2"),GUo=o(" \u2014 "),_z=a("a"),OUo=o("GPT2ForTokenClassification"),VUo=o(" (OpenAI GPT-2 model)"),XUo=l(),NF=a("li"),E_e=a("strong"),zUo=o("ibert"),QUo=o(" \u2014 "),bz=a("a"),WUo=o("IBertForTokenClassification"),HUo=o(" (I-BERT model)"),UUo=l(),qF=a("li"),C_e=a("strong"),JUo=o("layoutlm"),YUo=o(" \u2014 "),vz=a("a"),KUo=o("LayoutLMForTokenClassification"),ZUo=o(" (LayoutLM model)"),eJo=l(),jF=a("li"),w_e=a("strong"),oJo=o("layoutlmv2"),rJo=o(" \u2014 "),Fz=a("a"),tJo=o("LayoutLMv2ForTokenClassification"),aJo=o(" (LayoutLMv2 model)"),nJo=l(),DF=a("li"),A_e=a("strong"),sJo=o("layoutlmv3"),lJo=o(" \u2014 "),Tz=a("a"),iJo=o("LayoutLMv3ForTokenClassification"),dJo=o(" (LayoutLMv3 model)"),cJo=l(),GF=a("li"),L_e=a("strong"),mJo=o("longformer"),fJo=o(" \u2014 "),Mz=a("a"),gJo=o("LongformerForTokenClassification"),hJo=o(" (Longformer model)"),uJo=l(),OF=a("li"),y_e=a("strong"),pJo=o("megatron-bert"),_Jo=o(" \u2014 "),Ez=a("a"),bJo=o("MegatronBertForTokenClassification"),vJo=o(" (Megatron-BERT model)"),FJo=l(),VF=a("li"),x_e=a("strong"),TJo=o("mobilebert"),MJo=o(" \u2014 "),Cz=a("a"),EJo=o("MobileBertForTokenClassification"),CJo=o(" (MobileBERT model)"),wJo=l(),XF=a("li"),$_e=a("strong"),AJo=o("mpnet"),LJo=o(" \u2014 "),wz=a("a"),yJo=o("MPNetForTokenClassification"),xJo=o(" (MPNet model)"),$Jo=l(),zF=a("li"),k_e=a("strong"),kJo=o("nezha"),SJo=o(" \u2014 "),Az=a("a"),RJo=o("NezhaForTokenClassification"),PJo=o(" (Nezha model)"),BJo=l(),QF=a("li"),S_e=a("strong"),IJo=o("nystromformer"),NJo=o(" \u2014 "),Lz=a("a"),qJo=o("NystromformerForTokenClassification"),jJo=o(" (Nystr\xF6mformer model)"),DJo=l(),WF=a("li"),R_e=a("strong"),GJo=o("qdqbert"),OJo=o(" \u2014 "),yz=a("a"),VJo=o("QDQBertForTokenClassification"),XJo=o(" (QDQBert model)"),zJo=l(),HF=a("li"),P_e=a("strong"),QJo=o("rembert"),WJo=o(" \u2014 "),xz=a("a"),HJo=o("RemBertForTokenClassification"),UJo=o(" (RemBERT model)"),JJo=l(),UF=a("li"),B_e=a("strong"),YJo=o("roberta"),KJo=o(" \u2014 "),$z=a("a"),ZJo=o("RobertaForTokenClassification"),eYo=o(" (RoBERTa model)"),oYo=l(),JF=a("li"),I_e=a("strong"),rYo=o("roformer"),tYo=o(" \u2014 "),kz=a("a"),aYo=o("RoFormerForTokenClassification"),nYo=o(" (RoFormer model)"),sYo=l(),YF=a("li"),N_e=a("strong"),lYo=o("squeezebert"),iYo=o(" \u2014 "),Sz=a("a"),dYo=o("SqueezeBertForTokenClassification"),cYo=o(" (SqueezeBERT model)"),mYo=l(),KF=a("li"),q_e=a("strong"),fYo=o("xlm"),gYo=o(" \u2014 "),Rz=a("a"),hYo=o("XLMForTokenClassification"),uYo=o(" (XLM model)"),pYo=l(),ZF=a("li"),j_e=a("strong"),_Yo=o("xlm-roberta"),bYo=o(" \u2014 "),Pz=a("a"),vYo=o("XLMRobertaForTokenClassification"),FYo=o(" (XLM-RoBERTa model)"),TYo=l(),eT=a("li"),D_e=a("strong"),MYo=o("xlm-roberta-xl"),EYo=o(" \u2014 "),Bz=a("a"),CYo=o("XLMRobertaXLForTokenClassification"),wYo=o(" (XLM-RoBERTa-XL model)"),AYo=l(),oT=a("li"),G_e=a("strong"),LYo=o("xlnet"),yYo=o(" \u2014 "),Iz=a("a"),xYo=o("XLNetForTokenClassification"),$Yo=o(" (XLNet model)"),kYo=l(),rT=a("li"),O_e=a("strong"),SYo=o("yoso"),RYo=o(" \u2014 "),Nz=a("a"),PYo=o("YosoForTokenClassification"),BYo=o(" (YOSO model)"),IYo=l(),tT=a("p"),NYo=o("The model is set in evaluation mode by default using "),V_e=a("code"),qYo=o("model.eval()"),jYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=a("code"),DYo=o("model.train()"),GYo=l(),F(aT.$$.fragment),iVe=l(),md=a("h2"),nT=a("a"),z_e=a("span"),F(t8.$$.fragment),OYo=l(),Q_e=a("span"),VYo=o("AutoModelForQuestionAnswering"),dVe=l(),jo=a("div"),F(a8.$$.fragment),XYo=l(),fd=a("p"),zYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qz=a("a"),QYo=o("from_pretrained()"),WYo=o(" class method or the "),jz=a("a"),HYo=o("from_config()"),UYo=o(` class
method.`),JYo=l(),n8=a("p"),YYo=o("This class cannot be instantiated directly using "),W_e=a("code"),KYo=o("__init__()"),ZYo=o(" (throws an error)."),eKo=l(),ut=a("div"),F(s8.$$.fragment),oKo=l(),H_e=a("p"),rKo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tKo=l(),gd=a("p"),aKo=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),nKo=o("not"),sKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),lKo=o("from_pretrained()"),iKo=o(" to load the model weights."),dKo=l(),F(sT.$$.fragment),cKo=l(),no=a("div"),F(l8.$$.fragment),mKo=l(),J_e=a("p"),fKo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gKo=l(),Va=a("p"),hKo=o("The model class to instantiate is selected based on the "),Y_e=a("code"),uKo=o("model_type"),pKo=o(` property of the config object (either
passed as an argument or loaded from `),K_e=a("code"),_Ko=o("pretrained_model_name_or_path"),bKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=a("code"),vKo=o("pretrained_model_name_or_path"),FKo=o(":"),TKo=l(),V=a("ul"),lT=a("li"),e2e=a("strong"),MKo=o("albert"),EKo=o(" \u2014 "),Gz=a("a"),CKo=o("AlbertForQuestionAnswering"),wKo=o(" (ALBERT model)"),AKo=l(),iT=a("li"),o2e=a("strong"),LKo=o("bart"),yKo=o(" \u2014 "),Oz=a("a"),xKo=o("BartForQuestionAnswering"),$Ko=o(" (BART model)"),kKo=l(),dT=a("li"),r2e=a("strong"),SKo=o("bert"),RKo=o(" \u2014 "),Vz=a("a"),PKo=o("BertForQuestionAnswering"),BKo=o(" (BERT model)"),IKo=l(),cT=a("li"),t2e=a("strong"),NKo=o("big_bird"),qKo=o(" \u2014 "),Xz=a("a"),jKo=o("BigBirdForQuestionAnswering"),DKo=o(" (BigBird model)"),GKo=l(),mT=a("li"),a2e=a("strong"),OKo=o("bigbird_pegasus"),VKo=o(" \u2014 "),zz=a("a"),XKo=o("BigBirdPegasusForQuestionAnswering"),zKo=o(" (BigBird-Pegasus model)"),QKo=l(),fT=a("li"),n2e=a("strong"),WKo=o("camembert"),HKo=o(" \u2014 "),Qz=a("a"),UKo=o("CamembertForQuestionAnswering"),JKo=o(" (CamemBERT model)"),YKo=l(),gT=a("li"),s2e=a("strong"),KKo=o("canine"),ZKo=o(" \u2014 "),Wz=a("a"),eZo=o("CanineForQuestionAnswering"),oZo=o(" (CANINE model)"),rZo=l(),hT=a("li"),l2e=a("strong"),tZo=o("convbert"),aZo=o(" \u2014 "),Hz=a("a"),nZo=o("ConvBertForQuestionAnswering"),sZo=o(" (ConvBERT model)"),lZo=l(),uT=a("li"),i2e=a("strong"),iZo=o("data2vec-text"),dZo=o(" \u2014 "),Uz=a("a"),cZo=o("Data2VecTextForQuestionAnswering"),mZo=o(" (Data2VecText model)"),fZo=l(),pT=a("li"),d2e=a("strong"),gZo=o("deberta"),hZo=o(" \u2014 "),Jz=a("a"),uZo=o("DebertaForQuestionAnswering"),pZo=o(" (DeBERTa model)"),_Zo=l(),_T=a("li"),c2e=a("strong"),bZo=o("deberta-v2"),vZo=o(" \u2014 "),Yz=a("a"),FZo=o("DebertaV2ForQuestionAnswering"),TZo=o(" (DeBERTa-v2 model)"),MZo=l(),bT=a("li"),m2e=a("strong"),EZo=o("distilbert"),CZo=o(" \u2014 "),Kz=a("a"),wZo=o("DistilBertForQuestionAnswering"),AZo=o(" (DistilBERT model)"),LZo=l(),vT=a("li"),f2e=a("strong"),yZo=o("electra"),xZo=o(" \u2014 "),Zz=a("a"),$Zo=o("ElectraForQuestionAnswering"),kZo=o(" (ELECTRA model)"),SZo=l(),FT=a("li"),g2e=a("strong"),RZo=o("flaubert"),PZo=o(" \u2014 "),eQ=a("a"),BZo=o("FlaubertForQuestionAnsweringSimple"),IZo=o(" (FlauBERT model)"),NZo=l(),TT=a("li"),h2e=a("strong"),qZo=o("fnet"),jZo=o(" \u2014 "),oQ=a("a"),DZo=o("FNetForQuestionAnswering"),GZo=o(" (FNet model)"),OZo=l(),MT=a("li"),u2e=a("strong"),VZo=o("funnel"),XZo=o(" \u2014 "),rQ=a("a"),zZo=o("FunnelForQuestionAnswering"),QZo=o(" (Funnel Transformer model)"),WZo=l(),ET=a("li"),p2e=a("strong"),HZo=o("gptj"),UZo=o(" \u2014 "),tQ=a("a"),JZo=o("GPTJForQuestionAnswering"),YZo=o(" (GPT-J model)"),KZo=l(),CT=a("li"),_2e=a("strong"),ZZo=o("ibert"),eer=o(" \u2014 "),aQ=a("a"),oer=o("IBertForQuestionAnswering"),rer=o(" (I-BERT model)"),ter=l(),wT=a("li"),b2e=a("strong"),aer=o("layoutlmv2"),ner=o(" \u2014 "),nQ=a("a"),ser=o("LayoutLMv2ForQuestionAnswering"),ler=o(" (LayoutLMv2 model)"),ier=l(),AT=a("li"),v2e=a("strong"),der=o("layoutlmv3"),cer=o(" \u2014 "),sQ=a("a"),mer=o("LayoutLMv3ForQuestionAnswering"),fer=o(" (LayoutLMv3 model)"),ger=l(),LT=a("li"),F2e=a("strong"),her=o("led"),uer=o(" \u2014 "),lQ=a("a"),per=o("LEDForQuestionAnswering"),_er=o(" (LED model)"),ber=l(),yT=a("li"),T2e=a("strong"),ver=o("longformer"),Fer=o(" \u2014 "),iQ=a("a"),Ter=o("LongformerForQuestionAnswering"),Mer=o(" (Longformer model)"),Eer=l(),xT=a("li"),M2e=a("strong"),Cer=o("lxmert"),wer=o(" \u2014 "),dQ=a("a"),Aer=o("LxmertForQuestionAnswering"),Ler=o(" (LXMERT model)"),yer=l(),$T=a("li"),E2e=a("strong"),xer=o("mbart"),$er=o(" \u2014 "),cQ=a("a"),ker=o("MBartForQuestionAnswering"),Ser=o(" (mBART model)"),Rer=l(),kT=a("li"),C2e=a("strong"),Per=o("megatron-bert"),Ber=o(" \u2014 "),mQ=a("a"),Ier=o("MegatronBertForQuestionAnswering"),Ner=o(" (Megatron-BERT model)"),qer=l(),ST=a("li"),w2e=a("strong"),jer=o("mobilebert"),Der=o(" \u2014 "),fQ=a("a"),Ger=o("MobileBertForQuestionAnswering"),Oer=o(" (MobileBERT model)"),Ver=l(),RT=a("li"),A2e=a("strong"),Xer=o("mpnet"),zer=o(" \u2014 "),gQ=a("a"),Qer=o("MPNetForQuestionAnswering"),Wer=o(" (MPNet model)"),Her=l(),PT=a("li"),L2e=a("strong"),Uer=o("nezha"),Jer=o(" \u2014 "),hQ=a("a"),Yer=o("NezhaForQuestionAnswering"),Ker=o(" (Nezha model)"),Zer=l(),BT=a("li"),y2e=a("strong"),eor=o("nystromformer"),oor=o(" \u2014 "),uQ=a("a"),ror=o("NystromformerForQuestionAnswering"),tor=o(" (Nystr\xF6mformer model)"),aor=l(),IT=a("li"),x2e=a("strong"),nor=o("qdqbert"),sor=o(" \u2014 "),pQ=a("a"),lor=o("QDQBertForQuestionAnswering"),ior=o(" (QDQBert model)"),dor=l(),NT=a("li"),$2e=a("strong"),cor=o("reformer"),mor=o(" \u2014 "),_Q=a("a"),gor=o("ReformerForQuestionAnswering"),hor=o(" (Reformer model)"),uor=l(),qT=a("li"),k2e=a("strong"),por=o("rembert"),_or=o(" \u2014 "),bQ=a("a"),bor=o("RemBertForQuestionAnswering"),vor=o(" (RemBERT model)"),For=l(),jT=a("li"),S2e=a("strong"),Tor=o("roberta"),Mor=o(" \u2014 "),vQ=a("a"),Eor=o("RobertaForQuestionAnswering"),Cor=o(" (RoBERTa model)"),wor=l(),DT=a("li"),R2e=a("strong"),Aor=o("roformer"),Lor=o(" \u2014 "),FQ=a("a"),yor=o("RoFormerForQuestionAnswering"),xor=o(" (RoFormer model)"),$or=l(),GT=a("li"),P2e=a("strong"),kor=o("splinter"),Sor=o(" \u2014 "),TQ=a("a"),Ror=o("SplinterForQuestionAnswering"),Por=o(" (Splinter model)"),Bor=l(),OT=a("li"),B2e=a("strong"),Ior=o("squeezebert"),Nor=o(" \u2014 "),MQ=a("a"),qor=o("SqueezeBertForQuestionAnswering"),jor=o(" (SqueezeBERT model)"),Dor=l(),VT=a("li"),I2e=a("strong"),Gor=o("xlm"),Oor=o(" \u2014 "),EQ=a("a"),Vor=o("XLMForQuestionAnsweringSimple"),Xor=o(" (XLM model)"),zor=l(),XT=a("li"),N2e=a("strong"),Qor=o("xlm-roberta"),Wor=o(" \u2014 "),CQ=a("a"),Hor=o("XLMRobertaForQuestionAnswering"),Uor=o(" (XLM-RoBERTa model)"),Jor=l(),zT=a("li"),q2e=a("strong"),Yor=o("xlm-roberta-xl"),Kor=o(" \u2014 "),wQ=a("a"),Zor=o("XLMRobertaXLForQuestionAnswering"),err=o(" (XLM-RoBERTa-XL model)"),orr=l(),QT=a("li"),j2e=a("strong"),rrr=o("xlnet"),trr=o(" \u2014 "),AQ=a("a"),arr=o("XLNetForQuestionAnsweringSimple"),nrr=o(" (XLNet model)"),srr=l(),WT=a("li"),D2e=a("strong"),lrr=o("yoso"),irr=o(" \u2014 "),LQ=a("a"),drr=o("YosoForQuestionAnswering"),crr=o(" (YOSO model)"),mrr=l(),HT=a("p"),frr=o("The model is set in evaluation mode by default using "),G2e=a("code"),grr=o("model.eval()"),hrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=a("code"),urr=o("model.train()"),prr=l(),F(UT.$$.fragment),cVe=l(),hd=a("h2"),JT=a("a"),V2e=a("span"),F(i8.$$.fragment),_rr=l(),X2e=a("span"),brr=o("AutoModelForTableQuestionAnswering"),mVe=l(),Do=a("div"),F(d8.$$.fragment),vrr=l(),ud=a("p"),Frr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yQ=a("a"),Trr=o("from_pretrained()"),Mrr=o(" class method or the "),xQ=a("a"),Err=o("from_config()"),Crr=o(` class
method.`),wrr=l(),c8=a("p"),Arr=o("This class cannot be instantiated directly using "),z2e=a("code"),Lrr=o("__init__()"),yrr=o(" (throws an error)."),xrr=l(),pt=a("div"),F(m8.$$.fragment),$rr=l(),Q2e=a("p"),krr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Srr=l(),pd=a("p"),Rrr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),Prr=o("not"),Brr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),Irr=o("from_pretrained()"),Nrr=o(" to load the model weights."),qrr=l(),F(YT.$$.fragment),jrr=l(),so=a("div"),F(f8.$$.fragment),Drr=l(),H2e=a("p"),Grr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Orr=l(),Xa=a("p"),Vrr=o("The model class to instantiate is selected based on the "),U2e=a("code"),Xrr=o("model_type"),zrr=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),Qrr=o("pretrained_model_name_or_path"),Wrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),Hrr=o("pretrained_model_name_or_path"),Urr=o(":"),Jrr=l(),K2e=a("ul"),KT=a("li"),Z2e=a("strong"),Yrr=o("tapas"),Krr=o(" \u2014 "),kQ=a("a"),Zrr=o("TapasForQuestionAnswering"),etr=o(" (TAPAS model)"),otr=l(),ZT=a("p"),rtr=o("The model is set in evaluation mode by default using "),ebe=a("code"),ttr=o("model.eval()"),atr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=a("code"),ntr=o("model.train()"),str=l(),F(eM.$$.fragment),fVe=l(),_d=a("h2"),oM=a("a"),rbe=a("span"),F(g8.$$.fragment),ltr=l(),tbe=a("span"),itr=o("AutoModelForImageClassification"),gVe=l(),Go=a("div"),F(h8.$$.fragment),dtr=l(),bd=a("p"),ctr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SQ=a("a"),mtr=o("from_pretrained()"),ftr=o(" class method or the "),RQ=a("a"),gtr=o("from_config()"),htr=o(` class
method.`),utr=l(),u8=a("p"),ptr=o("This class cannot be instantiated directly using "),abe=a("code"),_tr=o("__init__()"),btr=o(" (throws an error)."),vtr=l(),_t=a("div"),F(p8.$$.fragment),Ftr=l(),nbe=a("p"),Ttr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mtr=l(),vd=a("p"),Etr=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),Ctr=o("not"),wtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),Atr=o("from_pretrained()"),Ltr=o(" to load the model weights."),ytr=l(),F(rM.$$.fragment),xtr=l(),lo=a("div"),F(_8.$$.fragment),$tr=l(),lbe=a("p"),ktr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Str=l(),za=a("p"),Rtr=o("The model class to instantiate is selected based on the "),ibe=a("code"),Ptr=o("model_type"),Btr=o(` property of the config object (either
passed as an argument or loaded from `),dbe=a("code"),Itr=o("pretrained_model_name_or_path"),Ntr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=a("code"),qtr=o("pretrained_model_name_or_path"),jtr=o(":"),Dtr=l(),Fe=a("ul"),tM=a("li"),mbe=a("strong"),Gtr=o("beit"),Otr=o(" \u2014 "),BQ=a("a"),Vtr=o("BeitForImageClassification"),Xtr=o(" (BEiT model)"),ztr=l(),aM=a("li"),fbe=a("strong"),Qtr=o("convnext"),Wtr=o(" \u2014 "),IQ=a("a"),Htr=o("ConvNextForImageClassification"),Utr=o(" (ConvNeXT model)"),Jtr=l(),nM=a("li"),gbe=a("strong"),Ytr=o("cvt"),Ktr=o(" \u2014 "),NQ=a("a"),Ztr=o("CvtForImageClassification"),ear=o(" (CvT model)"),oar=l(),sM=a("li"),hbe=a("strong"),rar=o("data2vec-vision"),tar=o(" \u2014 "),qQ=a("a"),aar=o("Data2VecVisionForImageClassification"),nar=o(" (Data2VecVision model)"),sar=l(),Qs=a("li"),ube=a("strong"),lar=o("deit"),iar=o(" \u2014 "),jQ=a("a"),dar=o("DeiTForImageClassification"),car=o(" or "),DQ=a("a"),mar=o("DeiTForImageClassificationWithTeacher"),far=o(" (DeiT model)"),gar=l(),lM=a("li"),pbe=a("strong"),har=o("imagegpt"),uar=o(" \u2014 "),GQ=a("a"),par=o("ImageGPTForImageClassification"),_ar=o(" (ImageGPT model)"),bar=l(),Ws=a("li"),_be=a("strong"),Far=o("levit"),Tar=o(" \u2014 "),OQ=a("a"),Mar=o("LevitForImageClassification"),Ear=o(" or "),VQ=a("a"),Car=o("LevitForImageClassificationWithTeacher"),war=o(" (LeViT model)"),Aar=l(),bt=a("li"),bbe=a("strong"),Lar=o("perceiver"),yar=o(" \u2014 "),XQ=a("a"),xar=o("PerceiverForImageClassificationLearned"),$ar=o(" or "),zQ=a("a"),kar=o("PerceiverForImageClassificationFourier"),Sar=o(" or "),QQ=a("a"),Rar=o("PerceiverForImageClassificationConvProcessing"),Par=o(" (Perceiver model)"),Bar=l(),iM=a("li"),vbe=a("strong"),Iar=o("poolformer"),Nar=o(" \u2014 "),WQ=a("a"),qar=o("PoolFormerForImageClassification"),jar=o(" (PoolFormer model)"),Dar=l(),dM=a("li"),Fbe=a("strong"),Gar=o("regnet"),Oar=o(" \u2014 "),HQ=a("a"),Var=o("RegNetForImageClassification"),Xar=o(" (RegNet model)"),zar=l(),cM=a("li"),Tbe=a("strong"),Qar=o("resnet"),War=o(" \u2014 "),UQ=a("a"),Har=o("ResNetForImageClassification"),Uar=o(" (ResNet model)"),Jar=l(),mM=a("li"),Mbe=a("strong"),Yar=o("segformer"),Kar=o(" \u2014 "),JQ=a("a"),Zar=o("SegformerForImageClassification"),enr=o(" (SegFormer model)"),onr=l(),fM=a("li"),Ebe=a("strong"),rnr=o("swin"),tnr=o(" \u2014 "),YQ=a("a"),anr=o("SwinForImageClassification"),nnr=o(" (Swin Transformer model)"),snr=l(),gM=a("li"),Cbe=a("strong"),lnr=o("van"),inr=o(" \u2014 "),KQ=a("a"),dnr=o("VanForImageClassification"),cnr=o(" (VAN model)"),mnr=l(),hM=a("li"),wbe=a("strong"),fnr=o("vit"),gnr=o(" \u2014 "),ZQ=a("a"),hnr=o("ViTForImageClassification"),unr=o(" (ViT model)"),pnr=l(),uM=a("p"),_nr=o("The model is set in evaluation mode by default using "),Abe=a("code"),bnr=o("model.eval()"),vnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=a("code"),Fnr=o("model.train()"),Tnr=l(),F(pM.$$.fragment),hVe=l(),Fd=a("h2"),_M=a("a"),ybe=a("span"),F(b8.$$.fragment),Mnr=l(),xbe=a("span"),Enr=o("AutoModelForVision2Seq"),uVe=l(),Oo=a("div"),F(v8.$$.fragment),Cnr=l(),Td=a("p"),wnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eW=a("a"),Anr=o("from_pretrained()"),Lnr=o(" class method or the "),oW=a("a"),ynr=o("from_config()"),xnr=o(` class
method.`),$nr=l(),F8=a("p"),knr=o("This class cannot be instantiated directly using "),$be=a("code"),Snr=o("__init__()"),Rnr=o(" (throws an error)."),Pnr=l(),vt=a("div"),F(T8.$$.fragment),Bnr=l(),kbe=a("p"),Inr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Nnr=l(),Md=a("p"),qnr=o(`Note:
Loading a model from its configuration file does `),Sbe=a("strong"),jnr=o("not"),Dnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),Gnr=o("from_pretrained()"),Onr=o(" to load the model weights."),Vnr=l(),F(bM.$$.fragment),Xnr=l(),io=a("div"),F(M8.$$.fragment),znr=l(),Rbe=a("p"),Qnr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Wnr=l(),Qa=a("p"),Hnr=o("The model class to instantiate is selected based on the "),Pbe=a("code"),Unr=o("model_type"),Jnr=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),Ynr=o("pretrained_model_name_or_path"),Knr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=a("code"),Znr=o("pretrained_model_name_or_path"),esr=o(":"),osr=l(),Nbe=a("ul"),vM=a("li"),qbe=a("strong"),rsr=o("vision-encoder-decoder"),tsr=o(" \u2014 "),tW=a("a"),asr=o("VisionEncoderDecoderModel"),nsr=o(" (Vision Encoder decoder model)"),ssr=l(),FM=a("p"),lsr=o("The model is set in evaluation mode by default using "),jbe=a("code"),isr=o("model.eval()"),dsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=a("code"),csr=o("model.train()"),msr=l(),F(TM.$$.fragment),pVe=l(),Ed=a("h2"),MM=a("a"),Gbe=a("span"),F(E8.$$.fragment),fsr=l(),Obe=a("span"),gsr=o("AutoModelForVisualQuestionAnswering"),_Ve=l(),Vo=a("div"),F(C8.$$.fragment),hsr=l(),Cd=a("p"),usr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),aW=a("a"),psr=o("from_pretrained()"),_sr=o(" class method or the "),nW=a("a"),bsr=o("from_config()"),vsr=o(` class
method.`),Fsr=l(),w8=a("p"),Tsr=o("This class cannot be instantiated directly using "),Vbe=a("code"),Msr=o("__init__()"),Esr=o(" (throws an error)."),Csr=l(),Ft=a("div"),F(A8.$$.fragment),wsr=l(),Xbe=a("p"),Asr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Lsr=l(),wd=a("p"),ysr=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),xsr=o("not"),$sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),ksr=o("from_pretrained()"),Ssr=o(" to load the model weights."),Rsr=l(),F(EM.$$.fragment),Psr=l(),co=a("div"),F(L8.$$.fragment),Bsr=l(),Qbe=a("p"),Isr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Nsr=l(),Wa=a("p"),qsr=o("The model class to instantiate is selected based on the "),Wbe=a("code"),jsr=o("model_type"),Dsr=o(` property of the config object (either
passed as an argument or loaded from `),Hbe=a("code"),Gsr=o("pretrained_model_name_or_path"),Osr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=a("code"),Vsr=o("pretrained_model_name_or_path"),Xsr=o(":"),zsr=l(),Jbe=a("ul"),CM=a("li"),Ybe=a("strong"),Qsr=o("vilt"),Wsr=o(" \u2014 "),lW=a("a"),Hsr=o("ViltForQuestionAnswering"),Usr=o(" (ViLT model)"),Jsr=l(),wM=a("p"),Ysr=o("The model is set in evaluation mode by default using "),Kbe=a("code"),Ksr=o("model.eval()"),Zsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=a("code"),elr=o("model.train()"),olr=l(),F(AM.$$.fragment),bVe=l(),Ad=a("h2"),LM=a("a"),eve=a("span"),F(y8.$$.fragment),rlr=l(),ove=a("span"),tlr=o("AutoModelForAudioClassification"),vVe=l(),Xo=a("div"),F(x8.$$.fragment),alr=l(),Ld=a("p"),nlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),iW=a("a"),slr=o("from_pretrained()"),llr=o(" class method or the "),dW=a("a"),ilr=o("from_config()"),dlr=o(` class
method.`),clr=l(),$8=a("p"),mlr=o("This class cannot be instantiated directly using "),rve=a("code"),flr=o("__init__()"),glr=o(" (throws an error)."),hlr=l(),Tt=a("div"),F(k8.$$.fragment),ulr=l(),tve=a("p"),plr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_lr=l(),yd=a("p"),blr=o(`Note:
Loading a model from its configuration file does `),ave=a("strong"),vlr=o("not"),Flr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),Tlr=o("from_pretrained()"),Mlr=o(" to load the model weights."),Elr=l(),F(yM.$$.fragment),Clr=l(),mo=a("div"),F(S8.$$.fragment),wlr=l(),nve=a("p"),Alr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Llr=l(),Ha=a("p"),ylr=o("The model class to instantiate is selected based on the "),sve=a("code"),xlr=o("model_type"),$lr=o(` property of the config object (either
passed as an argument or loaded from `),lve=a("code"),klr=o("pretrained_model_name_or_path"),Slr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=a("code"),Rlr=o("pretrained_model_name_or_path"),Plr=o(":"),Blr=l(),Pe=a("ul"),xM=a("li"),dve=a("strong"),Ilr=o("data2vec-audio"),Nlr=o(" \u2014 "),mW=a("a"),qlr=o("Data2VecAudioForSequenceClassification"),jlr=o(" (Data2VecAudio model)"),Dlr=l(),$M=a("li"),cve=a("strong"),Glr=o("hubert"),Olr=o(" \u2014 "),fW=a("a"),Vlr=o("HubertForSequenceClassification"),Xlr=o(" (Hubert model)"),zlr=l(),kM=a("li"),mve=a("strong"),Qlr=o("sew"),Wlr=o(" \u2014 "),gW=a("a"),Hlr=o("SEWForSequenceClassification"),Ulr=o(" (SEW model)"),Jlr=l(),SM=a("li"),fve=a("strong"),Ylr=o("sew-d"),Klr=o(" \u2014 "),hW=a("a"),Zlr=o("SEWDForSequenceClassification"),eir=o(" (SEW-D model)"),oir=l(),RM=a("li"),gve=a("strong"),rir=o("unispeech"),tir=o(" \u2014 "),uW=a("a"),air=o("UniSpeechForSequenceClassification"),nir=o(" (UniSpeech model)"),sir=l(),PM=a("li"),hve=a("strong"),lir=o("unispeech-sat"),iir=o(" \u2014 "),pW=a("a"),dir=o("UniSpeechSatForSequenceClassification"),cir=o(" (UniSpeechSat model)"),mir=l(),BM=a("li"),uve=a("strong"),fir=o("wav2vec2"),gir=o(" \u2014 "),_W=a("a"),hir=o("Wav2Vec2ForSequenceClassification"),uir=o(" (Wav2Vec2 model)"),pir=l(),IM=a("li"),pve=a("strong"),_ir=o("wav2vec2-conformer"),bir=o(" \u2014 "),bW=a("a"),vir=o("Wav2Vec2ConformerForSequenceClassification"),Fir=o(" (Wav2Vec2-Conformer model)"),Tir=l(),NM=a("li"),_ve=a("strong"),Mir=o("wavlm"),Eir=o(" \u2014 "),vW=a("a"),Cir=o("WavLMForSequenceClassification"),wir=o(" (WavLM model)"),Air=l(),qM=a("p"),Lir=o("The model is set in evaluation mode by default using "),bve=a("code"),yir=o("model.eval()"),xir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vve=a("code"),$ir=o("model.train()"),kir=l(),F(jM.$$.fragment),FVe=l(),xd=a("h2"),DM=a("a"),Fve=a("span"),F(R8.$$.fragment),Sir=l(),Tve=a("span"),Rir=o("AutoModelForAudioFrameClassification"),TVe=l(),zo=a("div"),F(P8.$$.fragment),Pir=l(),$d=a("p"),Bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FW=a("a"),Iir=o("from_pretrained()"),Nir=o(" class method or the "),TW=a("a"),qir=o("from_config()"),jir=o(` class
method.`),Dir=l(),B8=a("p"),Gir=o("This class cannot be instantiated directly using "),Mve=a("code"),Oir=o("__init__()"),Vir=o(" (throws an error)."),Xir=l(),Mt=a("div"),F(I8.$$.fragment),zir=l(),Eve=a("p"),Qir=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Wir=l(),kd=a("p"),Hir=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),Uir=o("not"),Jir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),Yir=o("from_pretrained()"),Kir=o(" to load the model weights."),Zir=l(),F(GM.$$.fragment),edr=l(),fo=a("div"),F(N8.$$.fragment),odr=l(),wve=a("p"),rdr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),tdr=l(),Ua=a("p"),adr=o("The model class to instantiate is selected based on the "),Ave=a("code"),ndr=o("model_type"),sdr=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),ldr=o("pretrained_model_name_or_path"),idr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(":"),mdr=l(),et=a("ul"),OM=a("li"),xve=a("strong"),fdr=o("data2vec-audio"),gdr=o(" \u2014 "),EW=a("a"),hdr=o("Data2VecAudioForAudioFrameClassification"),udr=o(" (Data2VecAudio model)"),pdr=l(),VM=a("li"),$ve=a("strong"),_dr=o("unispeech-sat"),bdr=o(" \u2014 "),CW=a("a"),vdr=o("UniSpeechSatForAudioFrameClassification"),Fdr=o(" (UniSpeechSat model)"),Tdr=l(),XM=a("li"),kve=a("strong"),Mdr=o("wav2vec2"),Edr=o(" \u2014 "),wW=a("a"),Cdr=o("Wav2Vec2ForAudioFrameClassification"),wdr=o(" (Wav2Vec2 model)"),Adr=l(),zM=a("li"),Sve=a("strong"),Ldr=o("wav2vec2-conformer"),ydr=o(" \u2014 "),AW=a("a"),xdr=o("Wav2Vec2ConformerForAudioFrameClassification"),$dr=o(" (Wav2Vec2-Conformer model)"),kdr=l(),QM=a("li"),Rve=a("strong"),Sdr=o("wavlm"),Rdr=o(" \u2014 "),LW=a("a"),Pdr=o("WavLMForAudioFrameClassification"),Bdr=o(" (WavLM model)"),Idr=l(),WM=a("p"),Ndr=o("The model is set in evaluation mode by default using "),Pve=a("code"),qdr=o("model.eval()"),jdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bve=a("code"),Ddr=o("model.train()"),Gdr=l(),F(HM.$$.fragment),MVe=l(),Sd=a("h2"),UM=a("a"),Ive=a("span"),F(q8.$$.fragment),Odr=l(),Nve=a("span"),Vdr=o("AutoModelForCTC"),EVe=l(),Qo=a("div"),F(j8.$$.fragment),Xdr=l(),Rd=a("p"),zdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yW=a("a"),Qdr=o("from_pretrained()"),Wdr=o(" class method or the "),xW=a("a"),Hdr=o("from_config()"),Udr=o(` class
method.`),Jdr=l(),D8=a("p"),Ydr=o("This class cannot be instantiated directly using "),qve=a("code"),Kdr=o("__init__()"),Zdr=o(" (throws an error)."),ecr=l(),Et=a("div"),F(G8.$$.fragment),ocr=l(),jve=a("p"),rcr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),tcr=l(),Pd=a("p"),acr=o(`Note:
Loading a model from its configuration file does `),Dve=a("strong"),ncr=o("not"),scr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),lcr=o("from_pretrained()"),icr=o(" to load the model weights."),dcr=l(),F(JM.$$.fragment),ccr=l(),go=a("div"),F(O8.$$.fragment),mcr=l(),Gve=a("p"),fcr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gcr=l(),Ja=a("p"),hcr=o("The model class to instantiate is selected based on the "),Ove=a("code"),ucr=o("model_type"),pcr=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),_cr=o("pretrained_model_name_or_path"),bcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=a("code"),vcr=o("pretrained_model_name_or_path"),Fcr=o(":"),Tcr=l(),Le=a("ul"),YM=a("li"),zve=a("strong"),Mcr=o("data2vec-audio"),Ecr=o(" \u2014 "),kW=a("a"),Ccr=o("Data2VecAudioForCTC"),wcr=o(" (Data2VecAudio model)"),Acr=l(),KM=a("li"),Qve=a("strong"),Lcr=o("hubert"),ycr=o(" \u2014 "),SW=a("a"),xcr=o("HubertForCTC"),$cr=o(" (Hubert model)"),kcr=l(),ZM=a("li"),Wve=a("strong"),Scr=o("mctct"),Rcr=o(" \u2014 "),RW=a("a"),Pcr=o("MCTCTForCTC"),Bcr=o(" (M-CTC-T model)"),Icr=l(),e4=a("li"),Hve=a("strong"),Ncr=o("sew"),qcr=o(" \u2014 "),PW=a("a"),jcr=o("SEWForCTC"),Dcr=o(" (SEW model)"),Gcr=l(),o4=a("li"),Uve=a("strong"),Ocr=o("sew-d"),Vcr=o(" \u2014 "),BW=a("a"),Xcr=o("SEWDForCTC"),zcr=o(" (SEW-D model)"),Qcr=l(),r4=a("li"),Jve=a("strong"),Wcr=o("unispeech"),Hcr=o(" \u2014 "),IW=a("a"),Ucr=o("UniSpeechForCTC"),Jcr=o(" (UniSpeech model)"),Ycr=l(),t4=a("li"),Yve=a("strong"),Kcr=o("unispeech-sat"),Zcr=o(" \u2014 "),NW=a("a"),emr=o("UniSpeechSatForCTC"),omr=o(" (UniSpeechSat model)"),rmr=l(),a4=a("li"),Kve=a("strong"),tmr=o("wav2vec2"),amr=o(" \u2014 "),qW=a("a"),nmr=o("Wav2Vec2ForCTC"),smr=o(" (Wav2Vec2 model)"),lmr=l(),n4=a("li"),Zve=a("strong"),imr=o("wav2vec2-conformer"),dmr=o(" \u2014 "),jW=a("a"),cmr=o("Wav2Vec2ConformerForCTC"),mmr=o(" (Wav2Vec2-Conformer model)"),fmr=l(),s4=a("li"),e1e=a("strong"),gmr=o("wavlm"),hmr=o(" \u2014 "),DW=a("a"),umr=o("WavLMForCTC"),pmr=o(" (WavLM model)"),_mr=l(),l4=a("p"),bmr=o("The model is set in evaluation mode by default using "),o1e=a("code"),vmr=o("model.eval()"),Fmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=a("code"),Tmr=o("model.train()"),Mmr=l(),F(i4.$$.fragment),CVe=l(),Bd=a("h2"),d4=a("a"),t1e=a("span"),F(V8.$$.fragment),Emr=l(),a1e=a("span"),Cmr=o("AutoModelForSpeechSeq2Seq"),wVe=l(),Wo=a("div"),F(X8.$$.fragment),wmr=l(),Id=a("p"),Amr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GW=a("a"),Lmr=o("from_pretrained()"),ymr=o(" class method or the "),OW=a("a"),xmr=o("from_config()"),$mr=o(` class
method.`),kmr=l(),z8=a("p"),Smr=o("This class cannot be instantiated directly using "),n1e=a("code"),Rmr=o("__init__()"),Pmr=o(" (throws an error)."),Bmr=l(),Ct=a("div"),F(Q8.$$.fragment),Imr=l(),s1e=a("p"),Nmr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qmr=l(),Nd=a("p"),jmr=o(`Note:
Loading a model from its configuration file does `),l1e=a("strong"),Dmr=o("not"),Gmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),Omr=o("from_pretrained()"),Vmr=o(" to load the model weights."),Xmr=l(),F(c4.$$.fragment),zmr=l(),ho=a("div"),F(W8.$$.fragment),Qmr=l(),i1e=a("p"),Wmr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Hmr=l(),Ya=a("p"),Umr=o("The model class to instantiate is selected based on the "),d1e=a("code"),Jmr=o("model_type"),Ymr=o(` property of the config object (either
passed as an argument or loaded from `),c1e=a("code"),Kmr=o("pretrained_model_name_or_path"),Zmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=a("code"),efr=o("pretrained_model_name_or_path"),ofr=o(":"),rfr=l(),H8=a("ul"),m4=a("li"),f1e=a("strong"),tfr=o("speech-encoder-decoder"),afr=o(" \u2014 "),XW=a("a"),nfr=o("SpeechEncoderDecoderModel"),sfr=o(" (Speech Encoder decoder model)"),lfr=l(),f4=a("li"),g1e=a("strong"),ifr=o("speech_to_text"),dfr=o(" \u2014 "),zW=a("a"),cfr=o("Speech2TextForConditionalGeneration"),mfr=o(" (Speech2Text model)"),ffr=l(),g4=a("p"),gfr=o("The model is set in evaluation mode by default using "),h1e=a("code"),hfr=o("model.eval()"),ufr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=a("code"),pfr=o("model.train()"),_fr=l(),F(h4.$$.fragment),AVe=l(),qd=a("h2"),u4=a("a"),p1e=a("span"),F(U8.$$.fragment),bfr=l(),_1e=a("span"),vfr=o("AutoModelForAudioXVector"),LVe=l(),Ho=a("div"),F(J8.$$.fragment),Ffr=l(),jd=a("p"),Tfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),QW=a("a"),Mfr=o("from_pretrained()"),Efr=o(" class method or the "),WW=a("a"),Cfr=o("from_config()"),wfr=o(` class
method.`),Afr=l(),Y8=a("p"),Lfr=o("This class cannot be instantiated directly using "),b1e=a("code"),yfr=o("__init__()"),xfr=o(" (throws an error)."),$fr=l(),wt=a("div"),F(K8.$$.fragment),kfr=l(),v1e=a("p"),Sfr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Rfr=l(),Dd=a("p"),Pfr=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),Bfr=o("not"),Ifr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),Nfr=o("from_pretrained()"),qfr=o(" to load the model weights."),jfr=l(),F(p4.$$.fragment),Dfr=l(),uo=a("div"),F(Z8.$$.fragment),Gfr=l(),T1e=a("p"),Ofr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Vfr=l(),Ka=a("p"),Xfr=o("The model class to instantiate is selected based on the "),M1e=a("code"),zfr=o("model_type"),Qfr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),Wfr=o("pretrained_model_name_or_path"),Hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),Ufr=o("pretrained_model_name_or_path"),Jfr=o(":"),Yfr=l(),ot=a("ul"),_4=a("li"),w1e=a("strong"),Kfr=o("data2vec-audio"),Zfr=o(" \u2014 "),UW=a("a"),egr=o("Data2VecAudioForXVector"),ogr=o(" (Data2VecAudio model)"),rgr=l(),b4=a("li"),A1e=a("strong"),tgr=o("unispeech-sat"),agr=o(" \u2014 "),JW=a("a"),ngr=o("UniSpeechSatForXVector"),sgr=o(" (UniSpeechSat model)"),lgr=l(),v4=a("li"),L1e=a("strong"),igr=o("wav2vec2"),dgr=o(" \u2014 "),YW=a("a"),cgr=o("Wav2Vec2ForXVector"),mgr=o(" (Wav2Vec2 model)"),fgr=l(),F4=a("li"),y1e=a("strong"),ggr=o("wav2vec2-conformer"),hgr=o(" \u2014 "),KW=a("a"),ugr=o("Wav2Vec2ConformerForXVector"),pgr=o(" (Wav2Vec2-Conformer model)"),_gr=l(),T4=a("li"),x1e=a("strong"),bgr=o("wavlm"),vgr=o(" \u2014 "),ZW=a("a"),Fgr=o("WavLMForXVector"),Tgr=o(" (WavLM model)"),Mgr=l(),M4=a("p"),Egr=o("The model is set in evaluation mode by default using "),$1e=a("code"),Cgr=o("model.eval()"),wgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=a("code"),Agr=o("model.train()"),Lgr=l(),F(E4.$$.fragment),yVe=l(),Gd=a("h2"),C4=a("a"),S1e=a("span"),F(e9.$$.fragment),ygr=l(),R1e=a("span"),xgr=o("AutoModelForMaskedImageModeling"),xVe=l(),Uo=a("div"),F(o9.$$.fragment),$gr=l(),Od=a("p"),kgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),eH=a("a"),Sgr=o("from_pretrained()"),Rgr=o(" class method or the "),oH=a("a"),Pgr=o("from_config()"),Bgr=o(` class
method.`),Igr=l(),r9=a("p"),Ngr=o("This class cannot be instantiated directly using "),P1e=a("code"),qgr=o("__init__()"),jgr=o(" (throws an error)."),Dgr=l(),At=a("div"),F(t9.$$.fragment),Ggr=l(),B1e=a("p"),Ogr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Vgr=l(),Vd=a("p"),Xgr=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),zgr=o("not"),Qgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),Wgr=o("from_pretrained()"),Hgr=o(" to load the model weights."),Ugr=l(),F(w4.$$.fragment),Jgr=l(),po=a("div"),F(a9.$$.fragment),Ygr=l(),N1e=a("p"),Kgr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Zgr=l(),Za=a("p"),ehr=o("The model class to instantiate is selected based on the "),q1e=a("code"),ohr=o("model_type"),rhr=o(` property of the config object (either
passed as an argument or loaded from `),j1e=a("code"),thr=o("pretrained_model_name_or_path"),ahr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=a("code"),nhr=o("pretrained_model_name_or_path"),shr=o(":"),lhr=l(),Xd=a("ul"),A4=a("li"),G1e=a("strong"),ihr=o("deit"),dhr=o(" \u2014 "),tH=a("a"),chr=o("DeiTForMaskedImageModeling"),mhr=o(" (DeiT model)"),fhr=l(),L4=a("li"),O1e=a("strong"),ghr=o("swin"),hhr=o(" \u2014 "),aH=a("a"),uhr=o("SwinForMaskedImageModeling"),phr=o(" (Swin Transformer model)"),_hr=l(),y4=a("li"),V1e=a("strong"),bhr=o("vit"),vhr=o(" \u2014 "),nH=a("a"),Fhr=o("ViTForMaskedImageModeling"),Thr=o(" (ViT model)"),Mhr=l(),x4=a("p"),Ehr=o("The model is set in evaluation mode by default using "),X1e=a("code"),Chr=o("model.eval()"),whr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=a("code"),Ahr=o("model.train()"),Lhr=l(),F($4.$$.fragment),$Ve=l(),zd=a("h2"),k4=a("a"),Q1e=a("span"),F(n9.$$.fragment),yhr=l(),W1e=a("span"),xhr=o("AutoModelForObjectDetection"),kVe=l(),Jo=a("div"),F(s9.$$.fragment),$hr=l(),Qd=a("p"),khr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),sH=a("a"),Shr=o("from_pretrained()"),Rhr=o(" class method or the "),lH=a("a"),Phr=o("from_config()"),Bhr=o(` class
method.`),Ihr=l(),l9=a("p"),Nhr=o("This class cannot be instantiated directly using "),H1e=a("code"),qhr=o("__init__()"),jhr=o(" (throws an error)."),Dhr=l(),Lt=a("div"),F(i9.$$.fragment),Ghr=l(),U1e=a("p"),Ohr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Vhr=l(),Wd=a("p"),Xhr=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),zhr=o("not"),Qhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),Whr=o("from_pretrained()"),Hhr=o(" to load the model weights."),Uhr=l(),F(S4.$$.fragment),Jhr=l(),_o=a("div"),F(d9.$$.fragment),Yhr=l(),Y1e=a("p"),Khr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Zhr=l(),en=a("p"),eur=o("The model class to instantiate is selected based on the "),K1e=a("code"),our=o("model_type"),rur=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),tur=o("pretrained_model_name_or_path"),aur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),nur=o("pretrained_model_name_or_path"),sur=o(":"),lur=l(),c9=a("ul"),R4=a("li"),oFe=a("strong"),iur=o("detr"),dur=o(" \u2014 "),dH=a("a"),cur=o("DetrForObjectDetection"),mur=o(" (DETR model)"),fur=l(),P4=a("li"),rFe=a("strong"),gur=o("yolos"),hur=o(" \u2014 "),cH=a("a"),uur=o("YolosForObjectDetection"),pur=o(" (YOLOS model)"),_ur=l(),B4=a("p"),bur=o("The model is set in evaluation mode by default using "),tFe=a("code"),vur=o("model.eval()"),Fur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aFe=a("code"),Tur=o("model.train()"),Mur=l(),F(I4.$$.fragment),SVe=l(),Hd=a("h2"),N4=a("a"),nFe=a("span"),F(m9.$$.fragment),Eur=l(),sFe=a("span"),Cur=o("AutoModelForImageSegmentation"),RVe=l(),Yo=a("div"),F(f9.$$.fragment),wur=l(),Ud=a("p"),Aur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mH=a("a"),Lur=o("from_pretrained()"),yur=o(" class method or the "),fH=a("a"),xur=o("from_config()"),$ur=o(` class
method.`),kur=l(),g9=a("p"),Sur=o("This class cannot be instantiated directly using "),lFe=a("code"),Rur=o("__init__()"),Pur=o(" (throws an error)."),Bur=l(),yt=a("div"),F(h9.$$.fragment),Iur=l(),iFe=a("p"),Nur=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),qur=l(),Jd=a("p"),jur=o(`Note:
Loading a model from its configuration file does `),dFe=a("strong"),Dur=o("not"),Gur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),Our=o("from_pretrained()"),Vur=o(" to load the model weights."),Xur=l(),F(q4.$$.fragment),zur=l(),bo=a("div"),F(u9.$$.fragment),Qur=l(),cFe=a("p"),Wur=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Hur=l(),on=a("p"),Uur=o("The model class to instantiate is selected based on the "),mFe=a("code"),Jur=o("model_type"),Yur=o(` property of the config object (either
passed as an argument or loaded from `),fFe=a("code"),Kur=o("pretrained_model_name_or_path"),Zur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=a("code"),epr=o("pretrained_model_name_or_path"),opr=o(":"),rpr=l(),hFe=a("ul"),j4=a("li"),uFe=a("strong"),tpr=o("detr"),apr=o(" \u2014 "),hH=a("a"),npr=o("DetrForSegmentation"),spr=o(" (DETR model)"),lpr=l(),D4=a("p"),ipr=o("The model is set in evaluation mode by default using "),pFe=a("code"),dpr=o("model.eval()"),cpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Fe=a("code"),mpr=o("model.train()"),fpr=l(),F(G4.$$.fragment),PVe=l(),Yd=a("h2"),O4=a("a"),bFe=a("span"),F(p9.$$.fragment),gpr=l(),vFe=a("span"),hpr=o("AutoModelForSemanticSegmentation"),BVe=l(),Ko=a("div"),F(_9.$$.fragment),upr=l(),Kd=a("p"),ppr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),uH=a("a"),_pr=o("from_pretrained()"),bpr=o(" class method or the "),pH=a("a"),vpr=o("from_config()"),Fpr=o(` class
method.`),Tpr=l(),b9=a("p"),Mpr=o("This class cannot be instantiated directly using "),FFe=a("code"),Epr=o("__init__()"),Cpr=o(" (throws an error)."),wpr=l(),xt=a("div"),F(v9.$$.fragment),Apr=l(),TFe=a("p"),Lpr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ypr=l(),Zd=a("p"),xpr=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),$pr=o("not"),kpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),Spr=o("from_pretrained()"),Rpr=o(" to load the model weights."),Ppr=l(),F(V4.$$.fragment),Bpr=l(),vo=a("div"),F(F9.$$.fragment),Ipr=l(),EFe=a("p"),Npr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),qpr=l(),rn=a("p"),jpr=o("The model class to instantiate is selected based on the "),CFe=a("code"),Dpr=o("model_type"),Gpr=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),Opr=o("pretrained_model_name_or_path"),Vpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),Xpr=o("pretrained_model_name_or_path"),zpr=o(":"),Qpr=l(),tn=a("ul"),X4=a("li"),LFe=a("strong"),Wpr=o("beit"),Hpr=o(" \u2014 "),bH=a("a"),Upr=o("BeitForSemanticSegmentation"),Jpr=o(" (BEiT model)"),Ypr=l(),z4=a("li"),yFe=a("strong"),Kpr=o("data2vec-vision"),Zpr=o(" \u2014 "),vH=a("a"),e_r=o("Data2VecVisionForSemanticSegmentation"),o_r=o(" (Data2VecVision model)"),r_r=l(),Q4=a("li"),xFe=a("strong"),t_r=o("dpt"),a_r=o(" \u2014 "),FH=a("a"),n_r=o("DPTForSemanticSegmentation"),s_r=o(" (DPT model)"),l_r=l(),W4=a("li"),$Fe=a("strong"),i_r=o("segformer"),d_r=o(" \u2014 "),TH=a("a"),c_r=o("SegformerForSemanticSegmentation"),m_r=o(" (SegFormer model)"),f_r=l(),H4=a("p"),g_r=o("The model is set in evaluation mode by default using "),kFe=a("code"),h_r=o("model.eval()"),u_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SFe=a("code"),p_r=o("model.train()"),__r=l(),F(U4.$$.fragment),IVe=l(),ec=a("h2"),J4=a("a"),RFe=a("span"),F(T9.$$.fragment),b_r=l(),PFe=a("span"),v_r=o("AutoModelForInstanceSegmentation"),NVe=l(),Zo=a("div"),F(M9.$$.fragment),F_r=l(),oc=a("p"),T_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),MH=a("a"),M_r=o("from_pretrained()"),E_r=o(" class method or the "),EH=a("a"),C_r=o("from_config()"),w_r=o(` class
method.`),A_r=l(),E9=a("p"),L_r=o("This class cannot be instantiated directly using "),BFe=a("code"),y_r=o("__init__()"),x_r=o(" (throws an error)."),$_r=l(),$t=a("div"),F(C9.$$.fragment),k_r=l(),IFe=a("p"),S_r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),R_r=l(),rc=a("p"),P_r=o(`Note:
Loading a model from its configuration file does `),NFe=a("strong"),B_r=o("not"),I_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),N_r=o("from_pretrained()"),q_r=o(" to load the model weights."),j_r=l(),F(Y4.$$.fragment),D_r=l(),Fo=a("div"),F(w9.$$.fragment),G_r=l(),qFe=a("p"),O_r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),V_r=l(),an=a("p"),X_r=o("The model class to instantiate is selected based on the "),jFe=a("code"),z_r=o("model_type"),Q_r=o(` property of the config object (either
passed as an argument or loaded from `),DFe=a("code"),W_r=o("pretrained_model_name_or_path"),H_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=a("code"),U_r=o("pretrained_model_name_or_path"),J_r=o(":"),Y_r=l(),OFe=a("ul"),K4=a("li"),VFe=a("strong"),K_r=o("maskformer"),Z_r=o(" \u2014 "),wH=a("a"),e2r=o("MaskFormerForInstanceSegmentation"),o2r=o(" (MaskFormer model)"),r2r=l(),Z4=a("p"),t2r=o("The model is set in evaluation mode by default using "),XFe=a("code"),a2r=o("model.eval()"),n2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zFe=a("code"),s2r=o("model.train()"),l2r=l(),F(eE.$$.fragment),qVe=l(),tc=a("h2"),oE=a("a"),QFe=a("span"),F(A9.$$.fragment),i2r=l(),WFe=a("span"),d2r=o("TFAutoModel"),jVe=l(),er=a("div"),F(L9.$$.fragment),c2r=l(),ac=a("p"),m2r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AH=a("a"),f2r=o("from_pretrained()"),g2r=o(" class method or the "),LH=a("a"),h2r=o("from_config()"),u2r=o(` class
method.`),p2r=l(),y9=a("p"),_2r=o("This class cannot be instantiated directly using "),HFe=a("code"),b2r=o("__init__()"),v2r=o(" (throws an error)."),F2r=l(),kt=a("div"),F(x9.$$.fragment),T2r=l(),UFe=a("p"),M2r=o("Instantiates one of the base model classes of the library from a configuration."),E2r=l(),nc=a("p"),C2r=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),w2r=o("not"),A2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),L2r=o("from_pretrained()"),y2r=o(" to load the model weights."),x2r=l(),F(rE.$$.fragment),$2r=l(),yr=a("div"),F($9.$$.fragment),k2r=l(),YFe=a("p"),S2r=o("Instantiate one of the base model classes of the library from a pretrained model."),R2r=l(),nn=a("p"),P2r=o("The model class to instantiate is selected based on the "),KFe=a("code"),B2r=o("model_type"),I2r=o(` property of the config object (either
passed as an argument or loaded from `),ZFe=a("code"),N2r=o("pretrained_model_name_or_path"),q2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=a("code"),j2r=o("pretrained_model_name_or_path"),D2r=o(":"),G2r=l(),q=a("ul"),tE=a("li"),oTe=a("strong"),O2r=o("albert"),V2r=o(" \u2014 "),xH=a("a"),X2r=o("TFAlbertModel"),z2r=o(" (ALBERT model)"),Q2r=l(),aE=a("li"),rTe=a("strong"),W2r=o("bart"),H2r=o(" \u2014 "),$H=a("a"),U2r=o("TFBartModel"),J2r=o(" (BART model)"),Y2r=l(),nE=a("li"),tTe=a("strong"),K2r=o("bert"),Z2r=o(" \u2014 "),kH=a("a"),ebr=o("TFBertModel"),obr=o(" (BERT model)"),rbr=l(),sE=a("li"),aTe=a("strong"),tbr=o("blenderbot"),abr=o(" \u2014 "),SH=a("a"),nbr=o("TFBlenderbotModel"),sbr=o(" (Blenderbot model)"),lbr=l(),lE=a("li"),nTe=a("strong"),ibr=o("blenderbot-small"),dbr=o(" \u2014 "),RH=a("a"),cbr=o("TFBlenderbotSmallModel"),mbr=o(" (BlenderbotSmall model)"),fbr=l(),iE=a("li"),sTe=a("strong"),gbr=o("camembert"),hbr=o(" \u2014 "),PH=a("a"),ubr=o("TFCamembertModel"),pbr=o(" (CamemBERT model)"),_br=l(),dE=a("li"),lTe=a("strong"),bbr=o("clip"),vbr=o(" \u2014 "),BH=a("a"),Fbr=o("TFCLIPModel"),Tbr=o(" (CLIP model)"),Mbr=l(),cE=a("li"),iTe=a("strong"),Ebr=o("convbert"),Cbr=o(" \u2014 "),IH=a("a"),wbr=o("TFConvBertModel"),Abr=o(" (ConvBERT model)"),Lbr=l(),mE=a("li"),dTe=a("strong"),ybr=o("convnext"),xbr=o(" \u2014 "),NH=a("a"),$br=o("TFConvNextModel"),kbr=o(" (ConvNeXT model)"),Sbr=l(),fE=a("li"),cTe=a("strong"),Rbr=o("ctrl"),Pbr=o(" \u2014 "),qH=a("a"),Bbr=o("TFCTRLModel"),Ibr=o(" (CTRL model)"),Nbr=l(),gE=a("li"),mTe=a("strong"),qbr=o("data2vec-vision"),jbr=o(" \u2014 "),jH=a("a"),Dbr=o("TFData2VecVisionModel"),Gbr=o(" (Data2VecVision model)"),Obr=l(),hE=a("li"),fTe=a("strong"),Vbr=o("deberta"),Xbr=o(" \u2014 "),DH=a("a"),zbr=o("TFDebertaModel"),Qbr=o(" (DeBERTa model)"),Wbr=l(),uE=a("li"),gTe=a("strong"),Hbr=o("deberta-v2"),Ubr=o(" \u2014 "),GH=a("a"),Jbr=o("TFDebertaV2Model"),Ybr=o(" (DeBERTa-v2 model)"),Kbr=l(),pE=a("li"),hTe=a("strong"),Zbr=o("distilbert"),evr=o(" \u2014 "),OH=a("a"),ovr=o("TFDistilBertModel"),rvr=o(" (DistilBERT model)"),tvr=l(),_E=a("li"),uTe=a("strong"),avr=o("dpr"),nvr=o(" \u2014 "),VH=a("a"),svr=o("TFDPRQuestionEncoder"),lvr=o(" (DPR model)"),ivr=l(),bE=a("li"),pTe=a("strong"),dvr=o("electra"),cvr=o(" \u2014 "),XH=a("a"),mvr=o("TFElectraModel"),fvr=o(" (ELECTRA model)"),gvr=l(),vE=a("li"),_Te=a("strong"),hvr=o("flaubert"),uvr=o(" \u2014 "),zH=a("a"),pvr=o("TFFlaubertModel"),_vr=o(" (FlauBERT model)"),bvr=l(),Hs=a("li"),bTe=a("strong"),vvr=o("funnel"),Fvr=o(" \u2014 "),QH=a("a"),Tvr=o("TFFunnelModel"),Mvr=o(" or "),WH=a("a"),Evr=o("TFFunnelBaseModel"),Cvr=o(" (Funnel Transformer model)"),wvr=l(),FE=a("li"),vTe=a("strong"),Avr=o("gpt2"),Lvr=o(" \u2014 "),HH=a("a"),yvr=o("TFGPT2Model"),xvr=o(" (OpenAI GPT-2 model)"),$vr=l(),TE=a("li"),FTe=a("strong"),kvr=o("gptj"),Svr=o(" \u2014 "),UH=a("a"),Rvr=o("TFGPTJModel"),Pvr=o(" (GPT-J model)"),Bvr=l(),ME=a("li"),TTe=a("strong"),Ivr=o("hubert"),Nvr=o(" \u2014 "),JH=a("a"),qvr=o("TFHubertModel"),jvr=o(" (Hubert model)"),Dvr=l(),EE=a("li"),MTe=a("strong"),Gvr=o("layoutlm"),Ovr=o(" \u2014 "),YH=a("a"),Vvr=o("TFLayoutLMModel"),Xvr=o(" (LayoutLM model)"),zvr=l(),CE=a("li"),ETe=a("strong"),Qvr=o("led"),Wvr=o(" \u2014 "),KH=a("a"),Hvr=o("TFLEDModel"),Uvr=o(" (LED model)"),Jvr=l(),wE=a("li"),CTe=a("strong"),Yvr=o("longformer"),Kvr=o(" \u2014 "),ZH=a("a"),Zvr=o("TFLongformerModel"),e1r=o(" (Longformer model)"),o1r=l(),AE=a("li"),wTe=a("strong"),r1r=o("lxmert"),t1r=o(" \u2014 "),eU=a("a"),a1r=o("TFLxmertModel"),n1r=o(" (LXMERT model)"),s1r=l(),LE=a("li"),ATe=a("strong"),l1r=o("marian"),i1r=o(" \u2014 "),oU=a("a"),d1r=o("TFMarianModel"),c1r=o(" (Marian model)"),m1r=l(),yE=a("li"),LTe=a("strong"),f1r=o("mbart"),g1r=o(" \u2014 "),rU=a("a"),h1r=o("TFMBartModel"),u1r=o(" (mBART model)"),p1r=l(),xE=a("li"),yTe=a("strong"),_1r=o("mobilebert"),b1r=o(" \u2014 "),tU=a("a"),v1r=o("TFMobileBertModel"),F1r=o(" (MobileBERT model)"),T1r=l(),$E=a("li"),xTe=a("strong"),M1r=o("mpnet"),E1r=o(" \u2014 "),aU=a("a"),C1r=o("TFMPNetModel"),w1r=o(" (MPNet model)"),A1r=l(),kE=a("li"),$Te=a("strong"),L1r=o("mt5"),y1r=o(" \u2014 "),nU=a("a"),x1r=o("TFMT5Model"),$1r=o(" (MT5 model)"),k1r=l(),SE=a("li"),kTe=a("strong"),S1r=o("openai-gpt"),R1r=o(" \u2014 "),sU=a("a"),P1r=o("TFOpenAIGPTModel"),B1r=o(" (OpenAI GPT model)"),I1r=l(),RE=a("li"),STe=a("strong"),N1r=o("opt"),q1r=o(" \u2014 "),lU=a("a"),j1r=o("TFOPTModel"),D1r=o(" (OPT model)"),G1r=l(),PE=a("li"),RTe=a("strong"),O1r=o("pegasus"),V1r=o(" \u2014 "),iU=a("a"),X1r=o("TFPegasusModel"),z1r=o(" (Pegasus model)"),Q1r=l(),BE=a("li"),PTe=a("strong"),W1r=o("regnet"),H1r=o(" \u2014 "),dU=a("a"),U1r=o("TFRegNetModel"),J1r=o(" (RegNet model)"),Y1r=l(),IE=a("li"),BTe=a("strong"),K1r=o("rembert"),Z1r=o(" \u2014 "),cU=a("a"),eFr=o("TFRemBertModel"),oFr=o(" (RemBERT model)"),rFr=l(),NE=a("li"),ITe=a("strong"),tFr=o("roberta"),aFr=o(" \u2014 "),mU=a("a"),nFr=o("TFRobertaModel"),sFr=o(" (RoBERTa model)"),lFr=l(),qE=a("li"),NTe=a("strong"),iFr=o("roformer"),dFr=o(" \u2014 "),fU=a("a"),cFr=o("TFRoFormerModel"),mFr=o(" (RoFormer model)"),fFr=l(),jE=a("li"),qTe=a("strong"),gFr=o("speech_to_text"),hFr=o(" \u2014 "),gU=a("a"),uFr=o("TFSpeech2TextModel"),pFr=o(" (Speech2Text model)"),_Fr=l(),DE=a("li"),jTe=a("strong"),bFr=o("swin"),vFr=o(" \u2014 "),hU=a("a"),FFr=o("TFSwinModel"),TFr=o(" (Swin Transformer model)"),MFr=l(),GE=a("li"),DTe=a("strong"),EFr=o("t5"),CFr=o(" \u2014 "),uU=a("a"),wFr=o("TFT5Model"),AFr=o(" (T5 model)"),LFr=l(),OE=a("li"),GTe=a("strong"),yFr=o("tapas"),xFr=o(" \u2014 "),pU=a("a"),$Fr=o("TFTapasModel"),kFr=o(" (TAPAS model)"),SFr=l(),VE=a("li"),OTe=a("strong"),RFr=o("transfo-xl"),PFr=o(" \u2014 "),_U=a("a"),BFr=o("TFTransfoXLModel"),IFr=o(" (Transformer-XL model)"),NFr=l(),XE=a("li"),VTe=a("strong"),qFr=o("vit"),jFr=o(" \u2014 "),bU=a("a"),DFr=o("TFViTModel"),GFr=o(" (ViT model)"),OFr=l(),zE=a("li"),XTe=a("strong"),VFr=o("vit_mae"),XFr=o(" \u2014 "),vU=a("a"),zFr=o("TFViTMAEModel"),QFr=o(" (ViTMAE model)"),WFr=l(),QE=a("li"),zTe=a("strong"),HFr=o("wav2vec2"),UFr=o(" \u2014 "),FU=a("a"),JFr=o("TFWav2Vec2Model"),YFr=o(" (Wav2Vec2 model)"),KFr=l(),WE=a("li"),QTe=a("strong"),ZFr=o("xlm"),eTr=o(" \u2014 "),TU=a("a"),oTr=o("TFXLMModel"),rTr=o(" (XLM model)"),tTr=l(),HE=a("li"),WTe=a("strong"),aTr=o("xlm-roberta"),nTr=o(" \u2014 "),MU=a("a"),sTr=o("TFXLMRobertaModel"),lTr=o(" (XLM-RoBERTa model)"),iTr=l(),UE=a("li"),HTe=a("strong"),dTr=o("xlnet"),cTr=o(" \u2014 "),EU=a("a"),mTr=o("TFXLNetModel"),fTr=o(" (XLNet model)"),gTr=l(),F(JE.$$.fragment),DVe=l(),sc=a("h2"),YE=a("a"),UTe=a("span"),F(k9.$$.fragment),hTr=l(),JTe=a("span"),uTr=o("TFAutoModelForPreTraining"),GVe=l(),or=a("div"),F(S9.$$.fragment),pTr=l(),lc=a("p"),_Tr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CU=a("a"),bTr=o("from_pretrained()"),vTr=o(" class method or the "),wU=a("a"),FTr=o("from_config()"),TTr=o(` class
method.`),MTr=l(),R9=a("p"),ETr=o("This class cannot be instantiated directly using "),YTe=a("code"),CTr=o("__init__()"),wTr=o(" (throws an error)."),ATr=l(),St=a("div"),F(P9.$$.fragment),LTr=l(),KTe=a("p"),yTr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xTr=l(),ic=a("p"),$Tr=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),kTr=o("not"),STr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),RTr=o("from_pretrained()"),PTr=o(" to load the model weights."),BTr=l(),F(KE.$$.fragment),ITr=l(),xr=a("div"),F(B9.$$.fragment),NTr=l(),eMe=a("p"),qTr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jTr=l(),sn=a("p"),DTr=o("The model class to instantiate is selected based on the "),oMe=a("code"),GTr=o("model_type"),OTr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),VTr=o("pretrained_model_name_or_path"),XTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),zTr=o("pretrained_model_name_or_path"),QTr=o(":"),WTr=l(),se=a("ul"),ZE=a("li"),aMe=a("strong"),HTr=o("albert"),UTr=o(" \u2014 "),LU=a("a"),JTr=o("TFAlbertForPreTraining"),YTr=o(" (ALBERT model)"),KTr=l(),eC=a("li"),nMe=a("strong"),ZTr=o("bart"),eMr=o(" \u2014 "),yU=a("a"),oMr=o("TFBartForConditionalGeneration"),rMr=o(" (BART model)"),tMr=l(),oC=a("li"),sMe=a("strong"),aMr=o("bert"),nMr=o(" \u2014 "),xU=a("a"),sMr=o("TFBertForPreTraining"),lMr=o(" (BERT model)"),iMr=l(),rC=a("li"),lMe=a("strong"),dMr=o("camembert"),cMr=o(" \u2014 "),$U=a("a"),mMr=o("TFCamembertForMaskedLM"),fMr=o(" (CamemBERT model)"),gMr=l(),tC=a("li"),iMe=a("strong"),hMr=o("ctrl"),uMr=o(" \u2014 "),kU=a("a"),pMr=o("TFCTRLLMHeadModel"),_Mr=o(" (CTRL model)"),bMr=l(),aC=a("li"),dMe=a("strong"),vMr=o("distilbert"),FMr=o(" \u2014 "),SU=a("a"),TMr=o("TFDistilBertForMaskedLM"),MMr=o(" (DistilBERT model)"),EMr=l(),nC=a("li"),cMe=a("strong"),CMr=o("electra"),wMr=o(" \u2014 "),RU=a("a"),AMr=o("TFElectraForPreTraining"),LMr=o(" (ELECTRA model)"),yMr=l(),sC=a("li"),mMe=a("strong"),xMr=o("flaubert"),$Mr=o(" \u2014 "),PU=a("a"),kMr=o("TFFlaubertWithLMHeadModel"),SMr=o(" (FlauBERT model)"),RMr=l(),lC=a("li"),fMe=a("strong"),PMr=o("funnel"),BMr=o(" \u2014 "),BU=a("a"),IMr=o("TFFunnelForPreTraining"),NMr=o(" (Funnel Transformer model)"),qMr=l(),iC=a("li"),gMe=a("strong"),jMr=o("gpt2"),DMr=o(" \u2014 "),IU=a("a"),GMr=o("TFGPT2LMHeadModel"),OMr=o(" (OpenAI GPT-2 model)"),VMr=l(),dC=a("li"),hMe=a("strong"),XMr=o("layoutlm"),zMr=o(" \u2014 "),NU=a("a"),QMr=o("TFLayoutLMForMaskedLM"),WMr=o(" (LayoutLM model)"),HMr=l(),cC=a("li"),uMe=a("strong"),UMr=o("lxmert"),JMr=o(" \u2014 "),qU=a("a"),YMr=o("TFLxmertForPreTraining"),KMr=o(" (LXMERT model)"),ZMr=l(),mC=a("li"),pMe=a("strong"),e4r=o("mobilebert"),o4r=o(" \u2014 "),jU=a("a"),r4r=o("TFMobileBertForPreTraining"),t4r=o(" (MobileBERT model)"),a4r=l(),fC=a("li"),_Me=a("strong"),n4r=o("mpnet"),s4r=o(" \u2014 "),DU=a("a"),l4r=o("TFMPNetForMaskedLM"),i4r=o(" (MPNet model)"),d4r=l(),gC=a("li"),bMe=a("strong"),c4r=o("openai-gpt"),m4r=o(" \u2014 "),GU=a("a"),f4r=o("TFOpenAIGPTLMHeadModel"),g4r=o(" (OpenAI GPT model)"),h4r=l(),hC=a("li"),vMe=a("strong"),u4r=o("roberta"),p4r=o(" \u2014 "),OU=a("a"),_4r=o("TFRobertaForMaskedLM"),b4r=o(" (RoBERTa model)"),v4r=l(),uC=a("li"),FMe=a("strong"),F4r=o("t5"),T4r=o(" \u2014 "),VU=a("a"),M4r=o("TFT5ForConditionalGeneration"),E4r=o(" (T5 model)"),C4r=l(),pC=a("li"),TMe=a("strong"),w4r=o("tapas"),A4r=o(" \u2014 "),XU=a("a"),L4r=o("TFTapasForMaskedLM"),y4r=o(" (TAPAS model)"),x4r=l(),_C=a("li"),MMe=a("strong"),$4r=o("transfo-xl"),k4r=o(" \u2014 "),zU=a("a"),S4r=o("TFTransfoXLLMHeadModel"),R4r=o(" (Transformer-XL model)"),P4r=l(),bC=a("li"),EMe=a("strong"),B4r=o("vit_mae"),I4r=o(" \u2014 "),QU=a("a"),N4r=o("TFViTMAEForPreTraining"),q4r=o(" (ViTMAE model)"),j4r=l(),vC=a("li"),CMe=a("strong"),D4r=o("xlm"),G4r=o(" \u2014 "),WU=a("a"),O4r=o("TFXLMWithLMHeadModel"),V4r=o(" (XLM model)"),X4r=l(),FC=a("li"),wMe=a("strong"),z4r=o("xlm-roberta"),Q4r=o(" \u2014 "),HU=a("a"),W4r=o("TFXLMRobertaForMaskedLM"),H4r=o(" (XLM-RoBERTa model)"),U4r=l(),TC=a("li"),AMe=a("strong"),J4r=o("xlnet"),Y4r=o(" \u2014 "),UU=a("a"),K4r=o("TFXLNetLMHeadModel"),Z4r=o(" (XLNet model)"),eEr=l(),F(MC.$$.fragment),OVe=l(),dc=a("h2"),EC=a("a"),LMe=a("span"),F(I9.$$.fragment),oEr=l(),yMe=a("span"),rEr=o("TFAutoModelForCausalLM"),VVe=l(),rr=a("div"),F(N9.$$.fragment),tEr=l(),cc=a("p"),aEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JU=a("a"),nEr=o("from_pretrained()"),sEr=o(" class method or the "),YU=a("a"),lEr=o("from_config()"),iEr=o(` class
method.`),dEr=l(),q9=a("p"),cEr=o("This class cannot be instantiated directly using "),xMe=a("code"),mEr=o("__init__()"),fEr=o(" (throws an error)."),gEr=l(),Rt=a("div"),F(j9.$$.fragment),hEr=l(),$Me=a("p"),uEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pEr=l(),mc=a("p"),_Er=o(`Note:
Loading a model from its configuration file does `),kMe=a("strong"),bEr=o("not"),vEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=a("a"),FEr=o("from_pretrained()"),TEr=o(" to load the model weights."),MEr=l(),F(CC.$$.fragment),EEr=l(),$r=a("div"),F(D9.$$.fragment),CEr=l(),SMe=a("p"),wEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AEr=l(),ln=a("p"),LEr=o("The model class to instantiate is selected based on the "),RMe=a("code"),yEr=o("model_type"),xEr=o(` property of the config object (either
passed as an argument or loaded from `),PMe=a("code"),$Er=o("pretrained_model_name_or_path"),kEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),SEr=o("pretrained_model_name_or_path"),REr=o(":"),PEr=l(),Me=a("ul"),wC=a("li"),IMe=a("strong"),BEr=o("bert"),IEr=o(" \u2014 "),ZU=a("a"),NEr=o("TFBertLMHeadModel"),qEr=o(" (BERT model)"),jEr=l(),AC=a("li"),NMe=a("strong"),DEr=o("camembert"),GEr=o(" \u2014 "),eJ=a("a"),OEr=o("TFCamembertForCausalLM"),VEr=o(" (CamemBERT model)"),XEr=l(),LC=a("li"),qMe=a("strong"),zEr=o("ctrl"),QEr=o(" \u2014 "),oJ=a("a"),WEr=o("TFCTRLLMHeadModel"),HEr=o(" (CTRL model)"),UEr=l(),yC=a("li"),jMe=a("strong"),JEr=o("gpt2"),YEr=o(" \u2014 "),rJ=a("a"),KEr=o("TFGPT2LMHeadModel"),ZEr=o(" (OpenAI GPT-2 model)"),eCr=l(),xC=a("li"),DMe=a("strong"),oCr=o("gptj"),rCr=o(" \u2014 "),tJ=a("a"),tCr=o("TFGPTJForCausalLM"),aCr=o(" (GPT-J model)"),nCr=l(),$C=a("li"),GMe=a("strong"),sCr=o("openai-gpt"),lCr=o(" \u2014 "),aJ=a("a"),iCr=o("TFOpenAIGPTLMHeadModel"),dCr=o(" (OpenAI GPT model)"),cCr=l(),kC=a("li"),OMe=a("strong"),mCr=o("opt"),fCr=o(" \u2014 "),nJ=a("a"),gCr=o("TFOPTForCausalLM"),hCr=o(" (OPT model)"),uCr=l(),SC=a("li"),VMe=a("strong"),pCr=o("rembert"),_Cr=o(" \u2014 "),sJ=a("a"),bCr=o("TFRemBertForCausalLM"),vCr=o(" (RemBERT model)"),FCr=l(),RC=a("li"),XMe=a("strong"),TCr=o("roberta"),MCr=o(" \u2014 "),lJ=a("a"),ECr=o("TFRobertaForCausalLM"),CCr=o(" (RoBERTa model)"),wCr=l(),PC=a("li"),zMe=a("strong"),ACr=o("roformer"),LCr=o(" \u2014 "),iJ=a("a"),yCr=o("TFRoFormerForCausalLM"),xCr=o(" (RoFormer model)"),$Cr=l(),BC=a("li"),QMe=a("strong"),kCr=o("transfo-xl"),SCr=o(" \u2014 "),dJ=a("a"),RCr=o("TFTransfoXLLMHeadModel"),PCr=o(" (Transformer-XL model)"),BCr=l(),IC=a("li"),WMe=a("strong"),ICr=o("xlm"),NCr=o(" \u2014 "),cJ=a("a"),qCr=o("TFXLMWithLMHeadModel"),jCr=o(" (XLM model)"),DCr=l(),NC=a("li"),HMe=a("strong"),GCr=o("xlnet"),OCr=o(" \u2014 "),mJ=a("a"),VCr=o("TFXLNetLMHeadModel"),XCr=o(" (XLNet model)"),zCr=l(),F(qC.$$.fragment),XVe=l(),fc=a("h2"),jC=a("a"),UMe=a("span"),F(G9.$$.fragment),QCr=l(),JMe=a("span"),WCr=o("TFAutoModelForImageClassification"),zVe=l(),tr=a("div"),F(O9.$$.fragment),HCr=l(),gc=a("p"),UCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fJ=a("a"),JCr=o("from_pretrained()"),YCr=o(" class method or the "),gJ=a("a"),KCr=o("from_config()"),ZCr=o(` class
method.`),e3r=l(),V9=a("p"),o3r=o("This class cannot be instantiated directly using "),YMe=a("code"),r3r=o("__init__()"),t3r=o(" (throws an error)."),a3r=l(),Pt=a("div"),F(X9.$$.fragment),n3r=l(),KMe=a("p"),s3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),l3r=l(),hc=a("p"),i3r=o(`Note:
Loading a model from its configuration file does `),ZMe=a("strong"),d3r=o("not"),c3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),m3r=o("from_pretrained()"),f3r=o(" to load the model weights."),g3r=l(),F(DC.$$.fragment),h3r=l(),kr=a("div"),F(z9.$$.fragment),u3r=l(),e4e=a("p"),p3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_3r=l(),dn=a("p"),b3r=o("The model class to instantiate is selected based on the "),o4e=a("code"),v3r=o("model_type"),F3r=o(` property of the config object (either
passed as an argument or loaded from `),r4e=a("code"),T3r=o("pretrained_model_name_or_path"),M3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=a("code"),E3r=o("pretrained_model_name_or_path"),C3r=o(":"),w3r=l(),rt=a("ul"),GC=a("li"),a4e=a("strong"),A3r=o("convnext"),L3r=o(" \u2014 "),uJ=a("a"),y3r=o("TFConvNextForImageClassification"),x3r=o(" (ConvNeXT model)"),$3r=l(),OC=a("li"),n4e=a("strong"),k3r=o("data2vec-vision"),S3r=o(" \u2014 "),pJ=a("a"),R3r=o("TFData2VecVisionForImageClassification"),P3r=o(" (Data2VecVision model)"),B3r=l(),VC=a("li"),s4e=a("strong"),I3r=o("regnet"),N3r=o(" \u2014 "),_J=a("a"),q3r=o("TFRegNetForImageClassification"),j3r=o(" (RegNet model)"),D3r=l(),XC=a("li"),l4e=a("strong"),G3r=o("swin"),O3r=o(" \u2014 "),bJ=a("a"),V3r=o("TFSwinForImageClassification"),X3r=o(" (Swin Transformer model)"),z3r=l(),zC=a("li"),i4e=a("strong"),Q3r=o("vit"),W3r=o(" \u2014 "),vJ=a("a"),H3r=o("TFViTForImageClassification"),U3r=o(" (ViT model)"),J3r=l(),F(QC.$$.fragment),QVe=l(),uc=a("h2"),WC=a("a"),d4e=a("span"),F(Q9.$$.fragment),Y3r=l(),c4e=a("span"),K3r=o("TFAutoModelForMaskedLM"),WVe=l(),ar=a("div"),F(W9.$$.fragment),Z3r=l(),pc=a("p"),e5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FJ=a("a"),o5r=o("from_pretrained()"),r5r=o(" class method or the "),TJ=a("a"),t5r=o("from_config()"),a5r=o(` class
method.`),n5r=l(),H9=a("p"),s5r=o("This class cannot be instantiated directly using "),m4e=a("code"),l5r=o("__init__()"),i5r=o(" (throws an error)."),d5r=l(),Bt=a("div"),F(U9.$$.fragment),c5r=l(),f4e=a("p"),m5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),f5r=l(),_c=a("p"),g5r=o(`Note:
Loading a model from its configuration file does `),g4e=a("strong"),h5r=o("not"),u5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=a("a"),p5r=o("from_pretrained()"),_5r=o(" to load the model weights."),b5r=l(),F(HC.$$.fragment),v5r=l(),Sr=a("div"),F(J9.$$.fragment),F5r=l(),h4e=a("p"),T5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),M5r=l(),cn=a("p"),E5r=o("The model class to instantiate is selected based on the "),u4e=a("code"),C5r=o("model_type"),w5r=o(` property of the config object (either
passed as an argument or loaded from `),p4e=a("code"),A5r=o("pretrained_model_name_or_path"),L5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=a("code"),y5r=o("pretrained_model_name_or_path"),x5r=o(":"),$5r=l(),ie=a("ul"),UC=a("li"),b4e=a("strong"),k5r=o("albert"),S5r=o(" \u2014 "),EJ=a("a"),R5r=o("TFAlbertForMaskedLM"),P5r=o(" (ALBERT model)"),B5r=l(),JC=a("li"),v4e=a("strong"),I5r=o("bert"),N5r=o(" \u2014 "),CJ=a("a"),q5r=o("TFBertForMaskedLM"),j5r=o(" (BERT model)"),D5r=l(),YC=a("li"),F4e=a("strong"),G5r=o("camembert"),O5r=o(" \u2014 "),wJ=a("a"),V5r=o("TFCamembertForMaskedLM"),X5r=o(" (CamemBERT model)"),z5r=l(),KC=a("li"),T4e=a("strong"),Q5r=o("convbert"),W5r=o(" \u2014 "),AJ=a("a"),H5r=o("TFConvBertForMaskedLM"),U5r=o(" (ConvBERT model)"),J5r=l(),ZC=a("li"),M4e=a("strong"),Y5r=o("deberta"),K5r=o(" \u2014 "),LJ=a("a"),Z5r=o("TFDebertaForMaskedLM"),e0r=o(" (DeBERTa model)"),o0r=l(),e3=a("li"),E4e=a("strong"),r0r=o("deberta-v2"),t0r=o(" \u2014 "),yJ=a("a"),a0r=o("TFDebertaV2ForMaskedLM"),n0r=o(" (DeBERTa-v2 model)"),s0r=l(),o3=a("li"),C4e=a("strong"),l0r=o("distilbert"),i0r=o(" \u2014 "),xJ=a("a"),d0r=o("TFDistilBertForMaskedLM"),c0r=o(" (DistilBERT model)"),m0r=l(),r3=a("li"),w4e=a("strong"),f0r=o("electra"),g0r=o(" \u2014 "),$J=a("a"),h0r=o("TFElectraForMaskedLM"),u0r=o(" (ELECTRA model)"),p0r=l(),t3=a("li"),A4e=a("strong"),_0r=o("flaubert"),b0r=o(" \u2014 "),kJ=a("a"),v0r=o("TFFlaubertWithLMHeadModel"),F0r=o(" (FlauBERT model)"),T0r=l(),a3=a("li"),L4e=a("strong"),M0r=o("funnel"),E0r=o(" \u2014 "),SJ=a("a"),C0r=o("TFFunnelForMaskedLM"),w0r=o(" (Funnel Transformer model)"),A0r=l(),n3=a("li"),y4e=a("strong"),L0r=o("layoutlm"),y0r=o(" \u2014 "),RJ=a("a"),x0r=o("TFLayoutLMForMaskedLM"),$0r=o(" (LayoutLM model)"),k0r=l(),s3=a("li"),x4e=a("strong"),S0r=o("longformer"),R0r=o(" \u2014 "),PJ=a("a"),P0r=o("TFLongformerForMaskedLM"),B0r=o(" (Longformer model)"),I0r=l(),l3=a("li"),$4e=a("strong"),N0r=o("mobilebert"),q0r=o(" \u2014 "),BJ=a("a"),j0r=o("TFMobileBertForMaskedLM"),D0r=o(" (MobileBERT model)"),G0r=l(),i3=a("li"),k4e=a("strong"),O0r=o("mpnet"),V0r=o(" \u2014 "),IJ=a("a"),X0r=o("TFMPNetForMaskedLM"),z0r=o(" (MPNet model)"),Q0r=l(),d3=a("li"),S4e=a("strong"),W0r=o("rembert"),H0r=o(" \u2014 "),NJ=a("a"),U0r=o("TFRemBertForMaskedLM"),J0r=o(" (RemBERT model)"),Y0r=l(),c3=a("li"),R4e=a("strong"),K0r=o("roberta"),Z0r=o(" \u2014 "),qJ=a("a"),ewr=o("TFRobertaForMaskedLM"),owr=o(" (RoBERTa model)"),rwr=l(),m3=a("li"),P4e=a("strong"),twr=o("roformer"),awr=o(" \u2014 "),jJ=a("a"),nwr=o("TFRoFormerForMaskedLM"),swr=o(" (RoFormer model)"),lwr=l(),f3=a("li"),B4e=a("strong"),iwr=o("tapas"),dwr=o(" \u2014 "),DJ=a("a"),cwr=o("TFTapasForMaskedLM"),mwr=o(" (TAPAS model)"),fwr=l(),g3=a("li"),I4e=a("strong"),gwr=o("xlm"),hwr=o(" \u2014 "),GJ=a("a"),uwr=o("TFXLMWithLMHeadModel"),pwr=o(" (XLM model)"),_wr=l(),h3=a("li"),N4e=a("strong"),bwr=o("xlm-roberta"),vwr=o(" \u2014 "),OJ=a("a"),Fwr=o("TFXLMRobertaForMaskedLM"),Twr=o(" (XLM-RoBERTa model)"),Mwr=l(),F(u3.$$.fragment),HVe=l(),bc=a("h2"),p3=a("a"),q4e=a("span"),F(Y9.$$.fragment),Ewr=l(),j4e=a("span"),Cwr=o("TFAutoModelForSeq2SeqLM"),UVe=l(),nr=a("div"),F(K9.$$.fragment),wwr=l(),vc=a("p"),Awr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VJ=a("a"),Lwr=o("from_pretrained()"),ywr=o(" class method or the "),XJ=a("a"),xwr=o("from_config()"),$wr=o(` class
method.`),kwr=l(),Z9=a("p"),Swr=o("This class cannot be instantiated directly using "),D4e=a("code"),Rwr=o("__init__()"),Pwr=o(" (throws an error)."),Bwr=l(),It=a("div"),F(ex.$$.fragment),Iwr=l(),G4e=a("p"),Nwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qwr=l(),Fc=a("p"),jwr=o(`Note:
Loading a model from its configuration file does `),O4e=a("strong"),Dwr=o("not"),Gwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),Owr=o("from_pretrained()"),Vwr=o(" to load the model weights."),Xwr=l(),F(_3.$$.fragment),zwr=l(),Rr=a("div"),F(ox.$$.fragment),Qwr=l(),V4e=a("p"),Wwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hwr=l(),mn=a("p"),Uwr=o("The model class to instantiate is selected based on the "),X4e=a("code"),Jwr=o("model_type"),Ywr=o(` property of the config object (either
passed as an argument or loaded from `),z4e=a("code"),Kwr=o("pretrained_model_name_or_path"),Zwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),eAr=o("pretrained_model_name_or_path"),oAr=o(":"),rAr=l(),ye=a("ul"),b3=a("li"),W4e=a("strong"),tAr=o("bart"),aAr=o(" \u2014 "),QJ=a("a"),nAr=o("TFBartForConditionalGeneration"),sAr=o(" (BART model)"),lAr=l(),v3=a("li"),H4e=a("strong"),iAr=o("blenderbot"),dAr=o(" \u2014 "),WJ=a("a"),cAr=o("TFBlenderbotForConditionalGeneration"),mAr=o(" (Blenderbot model)"),fAr=l(),F3=a("li"),U4e=a("strong"),gAr=o("blenderbot-small"),hAr=o(" \u2014 "),HJ=a("a"),uAr=o("TFBlenderbotSmallForConditionalGeneration"),pAr=o(" (BlenderbotSmall model)"),_Ar=l(),T3=a("li"),J4e=a("strong"),bAr=o("encoder-decoder"),vAr=o(" \u2014 "),UJ=a("a"),FAr=o("TFEncoderDecoderModel"),TAr=o(" (Encoder decoder model)"),MAr=l(),M3=a("li"),Y4e=a("strong"),EAr=o("led"),CAr=o(" \u2014 "),JJ=a("a"),wAr=o("TFLEDForConditionalGeneration"),AAr=o(" (LED model)"),LAr=l(),E3=a("li"),K4e=a("strong"),yAr=o("marian"),xAr=o(" \u2014 "),YJ=a("a"),$Ar=o("TFMarianMTModel"),kAr=o(" (Marian model)"),SAr=l(),C3=a("li"),Z4e=a("strong"),RAr=o("mbart"),PAr=o(" \u2014 "),KJ=a("a"),BAr=o("TFMBartForConditionalGeneration"),IAr=o(" (mBART model)"),NAr=l(),w3=a("li"),eEe=a("strong"),qAr=o("mt5"),jAr=o(" \u2014 "),ZJ=a("a"),DAr=o("TFMT5ForConditionalGeneration"),GAr=o(" (MT5 model)"),OAr=l(),A3=a("li"),oEe=a("strong"),VAr=o("pegasus"),XAr=o(" \u2014 "),eY=a("a"),zAr=o("TFPegasusForConditionalGeneration"),QAr=o(" (Pegasus model)"),WAr=l(),L3=a("li"),rEe=a("strong"),HAr=o("t5"),UAr=o(" \u2014 "),oY=a("a"),JAr=o("TFT5ForConditionalGeneration"),YAr=o(" (T5 model)"),KAr=l(),F(y3.$$.fragment),JVe=l(),Tc=a("h2"),x3=a("a"),tEe=a("span"),F(rx.$$.fragment),ZAr=l(),aEe=a("span"),e6r=o("TFAutoModelForSequenceClassification"),YVe=l(),sr=a("div"),F(tx.$$.fragment),o6r=l(),Mc=a("p"),r6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rY=a("a"),t6r=o("from_pretrained()"),a6r=o(" class method or the "),tY=a("a"),n6r=o("from_config()"),s6r=o(` class
method.`),l6r=l(),ax=a("p"),i6r=o("This class cannot be instantiated directly using "),nEe=a("code"),d6r=o("__init__()"),c6r=o(" (throws an error)."),m6r=l(),Nt=a("div"),F(nx.$$.fragment),f6r=l(),sEe=a("p"),g6r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),h6r=l(),Ec=a("p"),u6r=o(`Note:
Loading a model from its configuration file does `),lEe=a("strong"),p6r=o("not"),_6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=a("a"),b6r=o("from_pretrained()"),v6r=o(" to load the model weights."),F6r=l(),F($3.$$.fragment),T6r=l(),Pr=a("div"),F(sx.$$.fragment),M6r=l(),iEe=a("p"),E6r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C6r=l(),fn=a("p"),w6r=o("The model class to instantiate is selected based on the "),dEe=a("code"),A6r=o("model_type"),L6r=o(` property of the config object (either
passed as an argument or loaded from `),cEe=a("code"),y6r=o("pretrained_model_name_or_path"),x6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=a("code"),$6r=o("pretrained_model_name_or_path"),k6r=o(":"),S6r=l(),te=a("ul"),k3=a("li"),fEe=a("strong"),R6r=o("albert"),P6r=o(" \u2014 "),nY=a("a"),B6r=o("TFAlbertForSequenceClassification"),I6r=o(" (ALBERT model)"),N6r=l(),S3=a("li"),gEe=a("strong"),q6r=o("bert"),j6r=o(" \u2014 "),sY=a("a"),D6r=o("TFBertForSequenceClassification"),G6r=o(" (BERT model)"),O6r=l(),R3=a("li"),hEe=a("strong"),V6r=o("camembert"),X6r=o(" \u2014 "),lY=a("a"),z6r=o("TFCamembertForSequenceClassification"),Q6r=o(" (CamemBERT model)"),W6r=l(),P3=a("li"),uEe=a("strong"),H6r=o("convbert"),U6r=o(" \u2014 "),iY=a("a"),J6r=o("TFConvBertForSequenceClassification"),Y6r=o(" (ConvBERT model)"),K6r=l(),B3=a("li"),pEe=a("strong"),Z6r=o("ctrl"),eLr=o(" \u2014 "),dY=a("a"),oLr=o("TFCTRLForSequenceClassification"),rLr=o(" (CTRL model)"),tLr=l(),I3=a("li"),_Ee=a("strong"),aLr=o("deberta"),nLr=o(" \u2014 "),cY=a("a"),sLr=o("TFDebertaForSequenceClassification"),lLr=o(" (DeBERTa model)"),iLr=l(),N3=a("li"),bEe=a("strong"),dLr=o("deberta-v2"),cLr=o(" \u2014 "),mY=a("a"),mLr=o("TFDebertaV2ForSequenceClassification"),fLr=o(" (DeBERTa-v2 model)"),gLr=l(),q3=a("li"),vEe=a("strong"),hLr=o("distilbert"),uLr=o(" \u2014 "),fY=a("a"),pLr=o("TFDistilBertForSequenceClassification"),_Lr=o(" (DistilBERT model)"),bLr=l(),j3=a("li"),FEe=a("strong"),vLr=o("electra"),FLr=o(" \u2014 "),gY=a("a"),TLr=o("TFElectraForSequenceClassification"),MLr=o(" (ELECTRA model)"),ELr=l(),D3=a("li"),TEe=a("strong"),CLr=o("flaubert"),wLr=o(" \u2014 "),hY=a("a"),ALr=o("TFFlaubertForSequenceClassification"),LLr=o(" (FlauBERT model)"),yLr=l(),G3=a("li"),MEe=a("strong"),xLr=o("funnel"),$Lr=o(" \u2014 "),uY=a("a"),kLr=o("TFFunnelForSequenceClassification"),SLr=o(" (Funnel Transformer model)"),RLr=l(),O3=a("li"),EEe=a("strong"),PLr=o("gpt2"),BLr=o(" \u2014 "),pY=a("a"),ILr=o("TFGPT2ForSequenceClassification"),NLr=o(" (OpenAI GPT-2 model)"),qLr=l(),V3=a("li"),CEe=a("strong"),jLr=o("gptj"),DLr=o(" \u2014 "),_Y=a("a"),GLr=o("TFGPTJForSequenceClassification"),OLr=o(" (GPT-J model)"),VLr=l(),X3=a("li"),wEe=a("strong"),XLr=o("layoutlm"),zLr=o(" \u2014 "),bY=a("a"),QLr=o("TFLayoutLMForSequenceClassification"),WLr=o(" (LayoutLM model)"),HLr=l(),z3=a("li"),AEe=a("strong"),ULr=o("longformer"),JLr=o(" \u2014 "),vY=a("a"),YLr=o("TFLongformerForSequenceClassification"),KLr=o(" (Longformer model)"),ZLr=l(),Q3=a("li"),LEe=a("strong"),e7r=o("mobilebert"),o7r=o(" \u2014 "),FY=a("a"),r7r=o("TFMobileBertForSequenceClassification"),t7r=o(" (MobileBERT model)"),a7r=l(),W3=a("li"),yEe=a("strong"),n7r=o("mpnet"),s7r=o(" \u2014 "),TY=a("a"),l7r=o("TFMPNetForSequenceClassification"),i7r=o(" (MPNet model)"),d7r=l(),H3=a("li"),xEe=a("strong"),c7r=o("openai-gpt"),m7r=o(" \u2014 "),MY=a("a"),f7r=o("TFOpenAIGPTForSequenceClassification"),g7r=o(" (OpenAI GPT model)"),h7r=l(),U3=a("li"),$Ee=a("strong"),u7r=o("rembert"),p7r=o(" \u2014 "),EY=a("a"),_7r=o("TFRemBertForSequenceClassification"),b7r=o(" (RemBERT model)"),v7r=l(),J3=a("li"),kEe=a("strong"),F7r=o("roberta"),T7r=o(" \u2014 "),CY=a("a"),M7r=o("TFRobertaForSequenceClassification"),E7r=o(" (RoBERTa model)"),C7r=l(),Y3=a("li"),SEe=a("strong"),w7r=o("roformer"),A7r=o(" \u2014 "),wY=a("a"),L7r=o("TFRoFormerForSequenceClassification"),y7r=o(" (RoFormer model)"),x7r=l(),K3=a("li"),REe=a("strong"),$7r=o("tapas"),k7r=o(" \u2014 "),AY=a("a"),S7r=o("TFTapasForSequenceClassification"),R7r=o(" (TAPAS model)"),P7r=l(),Z3=a("li"),PEe=a("strong"),B7r=o("transfo-xl"),I7r=o(" \u2014 "),LY=a("a"),N7r=o("TFTransfoXLForSequenceClassification"),q7r=o(" (Transformer-XL model)"),j7r=l(),e5=a("li"),BEe=a("strong"),D7r=o("xlm"),G7r=o(" \u2014 "),yY=a("a"),O7r=o("TFXLMForSequenceClassification"),V7r=o(" (XLM model)"),X7r=l(),o5=a("li"),IEe=a("strong"),z7r=o("xlm-roberta"),Q7r=o(" \u2014 "),xY=a("a"),W7r=o("TFXLMRobertaForSequenceClassification"),H7r=o(" (XLM-RoBERTa model)"),U7r=l(),r5=a("li"),NEe=a("strong"),J7r=o("xlnet"),Y7r=o(" \u2014 "),$Y=a("a"),K7r=o("TFXLNetForSequenceClassification"),Z7r=o(" (XLNet model)"),eyr=l(),F(t5.$$.fragment),KVe=l(),Cc=a("h2"),a5=a("a"),qEe=a("span"),F(lx.$$.fragment),oyr=l(),jEe=a("span"),ryr=o("TFAutoModelForMultipleChoice"),ZVe=l(),lr=a("div"),F(ix.$$.fragment),tyr=l(),wc=a("p"),ayr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kY=a("a"),nyr=o("from_pretrained()"),syr=o(" class method or the "),SY=a("a"),lyr=o("from_config()"),iyr=o(` class
method.`),dyr=l(),dx=a("p"),cyr=o("This class cannot be instantiated directly using "),DEe=a("code"),myr=o("__init__()"),fyr=o(" (throws an error)."),gyr=l(),qt=a("div"),F(cx.$$.fragment),hyr=l(),GEe=a("p"),uyr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pyr=l(),Ac=a("p"),_yr=o(`Note:
Loading a model from its configuration file does `),OEe=a("strong"),byr=o("not"),vyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),Fyr=o("from_pretrained()"),Tyr=o(" to load the model weights."),Myr=l(),F(n5.$$.fragment),Eyr=l(),Br=a("div"),F(mx.$$.fragment),Cyr=l(),VEe=a("p"),wyr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ayr=l(),gn=a("p"),Lyr=o("The model class to instantiate is selected based on the "),XEe=a("code"),yyr=o("model_type"),xyr=o(` property of the config object (either
passed as an argument or loaded from `),zEe=a("code"),$yr=o("pretrained_model_name_or_path"),kyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=a("code"),Syr=o("pretrained_model_name_or_path"),Ryr=o(":"),Pyr=l(),pe=a("ul"),s5=a("li"),WEe=a("strong"),Byr=o("albert"),Iyr=o(" \u2014 "),PY=a("a"),Nyr=o("TFAlbertForMultipleChoice"),qyr=o(" (ALBERT model)"),jyr=l(),l5=a("li"),HEe=a("strong"),Dyr=o("bert"),Gyr=o(" \u2014 "),BY=a("a"),Oyr=o("TFBertForMultipleChoice"),Vyr=o(" (BERT model)"),Xyr=l(),i5=a("li"),UEe=a("strong"),zyr=o("camembert"),Qyr=o(" \u2014 "),IY=a("a"),Wyr=o("TFCamembertForMultipleChoice"),Hyr=o(" (CamemBERT model)"),Uyr=l(),d5=a("li"),JEe=a("strong"),Jyr=o("convbert"),Yyr=o(" \u2014 "),NY=a("a"),Kyr=o("TFConvBertForMultipleChoice"),Zyr=o(" (ConvBERT model)"),e8r=l(),c5=a("li"),YEe=a("strong"),o8r=o("distilbert"),r8r=o(" \u2014 "),qY=a("a"),t8r=o("TFDistilBertForMultipleChoice"),a8r=o(" (DistilBERT model)"),n8r=l(),m5=a("li"),KEe=a("strong"),s8r=o("electra"),l8r=o(" \u2014 "),jY=a("a"),i8r=o("TFElectraForMultipleChoice"),d8r=o(" (ELECTRA model)"),c8r=l(),f5=a("li"),ZEe=a("strong"),m8r=o("flaubert"),f8r=o(" \u2014 "),DY=a("a"),g8r=o("TFFlaubertForMultipleChoice"),h8r=o(" (FlauBERT model)"),u8r=l(),g5=a("li"),eCe=a("strong"),p8r=o("funnel"),_8r=o(" \u2014 "),GY=a("a"),b8r=o("TFFunnelForMultipleChoice"),v8r=o(" (Funnel Transformer model)"),F8r=l(),h5=a("li"),oCe=a("strong"),T8r=o("longformer"),M8r=o(" \u2014 "),OY=a("a"),E8r=o("TFLongformerForMultipleChoice"),C8r=o(" (Longformer model)"),w8r=l(),u5=a("li"),rCe=a("strong"),A8r=o("mobilebert"),L8r=o(" \u2014 "),VY=a("a"),y8r=o("TFMobileBertForMultipleChoice"),x8r=o(" (MobileBERT model)"),$8r=l(),p5=a("li"),tCe=a("strong"),k8r=o("mpnet"),S8r=o(" \u2014 "),XY=a("a"),R8r=o("TFMPNetForMultipleChoice"),P8r=o(" (MPNet model)"),B8r=l(),_5=a("li"),aCe=a("strong"),I8r=o("rembert"),N8r=o(" \u2014 "),zY=a("a"),q8r=o("TFRemBertForMultipleChoice"),j8r=o(" (RemBERT model)"),D8r=l(),b5=a("li"),nCe=a("strong"),G8r=o("roberta"),O8r=o(" \u2014 "),QY=a("a"),V8r=o("TFRobertaForMultipleChoice"),X8r=o(" (RoBERTa model)"),z8r=l(),v5=a("li"),sCe=a("strong"),Q8r=o("roformer"),W8r=o(" \u2014 "),WY=a("a"),H8r=o("TFRoFormerForMultipleChoice"),U8r=o(" (RoFormer model)"),J8r=l(),F5=a("li"),lCe=a("strong"),Y8r=o("xlm"),K8r=o(" \u2014 "),HY=a("a"),Z8r=o("TFXLMForMultipleChoice"),e9r=o(" (XLM model)"),o9r=l(),T5=a("li"),iCe=a("strong"),r9r=o("xlm-roberta"),t9r=o(" \u2014 "),UY=a("a"),a9r=o("TFXLMRobertaForMultipleChoice"),n9r=o(" (XLM-RoBERTa model)"),s9r=l(),M5=a("li"),dCe=a("strong"),l9r=o("xlnet"),i9r=o(" \u2014 "),JY=a("a"),d9r=o("TFXLNetForMultipleChoice"),c9r=o(" (XLNet model)"),m9r=l(),F(E5.$$.fragment),eXe=l(),Lc=a("h2"),C5=a("a"),cCe=a("span"),F(fx.$$.fragment),f9r=l(),mCe=a("span"),g9r=o("TFAutoModelForNextSentencePrediction"),oXe=l(),ir=a("div"),F(gx.$$.fragment),h9r=l(),yc=a("p"),u9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YY=a("a"),p9r=o("from_pretrained()"),_9r=o(" class method or the "),KY=a("a"),b9r=o("from_config()"),v9r=o(` class
method.`),F9r=l(),hx=a("p"),T9r=o("This class cannot be instantiated directly using "),fCe=a("code"),M9r=o("__init__()"),E9r=o(" (throws an error)."),C9r=l(),jt=a("div"),F(ux.$$.fragment),w9r=l(),gCe=a("p"),A9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),L9r=l(),xc=a("p"),y9r=o(`Note:
Loading a model from its configuration file does `),hCe=a("strong"),x9r=o("not"),$9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=a("a"),k9r=o("from_pretrained()"),S9r=o(" to load the model weights."),R9r=l(),F(w5.$$.fragment),P9r=l(),Ir=a("div"),F(px.$$.fragment),B9r=l(),uCe=a("p"),I9r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),N9r=l(),hn=a("p"),q9r=o("The model class to instantiate is selected based on the "),pCe=a("code"),j9r=o("model_type"),D9r=o(` property of the config object (either
passed as an argument or loaded from `),_Ce=a("code"),G9r=o("pretrained_model_name_or_path"),O9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=a("code"),V9r=o("pretrained_model_name_or_path"),X9r=o(":"),z9r=l(),_x=a("ul"),A5=a("li"),vCe=a("strong"),Q9r=o("bert"),W9r=o(" \u2014 "),eK=a("a"),H9r=o("TFBertForNextSentencePrediction"),U9r=o(" (BERT model)"),J9r=l(),L5=a("li"),FCe=a("strong"),Y9r=o("mobilebert"),K9r=o(" \u2014 "),oK=a("a"),Z9r=o("TFMobileBertForNextSentencePrediction"),exr=o(" (MobileBERT model)"),oxr=l(),F(y5.$$.fragment),rXe=l(),$c=a("h2"),x5=a("a"),TCe=a("span"),F(bx.$$.fragment),rxr=l(),MCe=a("span"),txr=o("TFAutoModelForTableQuestionAnswering"),tXe=l(),dr=a("div"),F(vx.$$.fragment),axr=l(),kc=a("p"),nxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rK=a("a"),sxr=o("from_pretrained()"),lxr=o(" class method or the "),tK=a("a"),ixr=o("from_config()"),dxr=o(` class
method.`),cxr=l(),Fx=a("p"),mxr=o("This class cannot be instantiated directly using "),ECe=a("code"),fxr=o("__init__()"),gxr=o(" (throws an error)."),hxr=l(),Dt=a("div"),F(Tx.$$.fragment),uxr=l(),CCe=a("p"),pxr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_xr=l(),Sc=a("p"),bxr=o(`Note:
Loading a model from its configuration file does `),wCe=a("strong"),vxr=o("not"),Fxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),Txr=o("from_pretrained()"),Mxr=o(" to load the model weights."),Exr=l(),F($5.$$.fragment),Cxr=l(),Nr=a("div"),F(Mx.$$.fragment),wxr=l(),ACe=a("p"),Axr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lxr=l(),un=a("p"),yxr=o("The model class to instantiate is selected based on the "),LCe=a("code"),xxr=o("model_type"),$xr=o(` property of the config object (either
passed as an argument or loaded from `),yCe=a("code"),kxr=o("pretrained_model_name_or_path"),Sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),Rxr=o("pretrained_model_name_or_path"),Pxr=o(":"),Bxr=l(),$Ce=a("ul"),k5=a("li"),kCe=a("strong"),Ixr=o("tapas"),Nxr=o(" \u2014 "),nK=a("a"),qxr=o("TFTapasForQuestionAnswering"),jxr=o(" (TAPAS model)"),Dxr=l(),F(S5.$$.fragment),aXe=l(),Rc=a("h2"),R5=a("a"),SCe=a("span"),F(Ex.$$.fragment),Gxr=l(),RCe=a("span"),Oxr=o("TFAutoModelForTokenClassification"),nXe=l(),cr=a("div"),F(Cx.$$.fragment),Vxr=l(),Pc=a("p"),Xxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sK=a("a"),zxr=o("from_pretrained()"),Qxr=o(" class method or the "),lK=a("a"),Wxr=o("from_config()"),Hxr=o(` class
method.`),Uxr=l(),wx=a("p"),Jxr=o("This class cannot be instantiated directly using "),PCe=a("code"),Yxr=o("__init__()"),Kxr=o(" (throws an error)."),Zxr=l(),Gt=a("div"),F(Ax.$$.fragment),e$r=l(),BCe=a("p"),o$r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),r$r=l(),Bc=a("p"),t$r=o(`Note:
Loading a model from its configuration file does `),ICe=a("strong"),a$r=o("not"),n$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),s$r=o("from_pretrained()"),l$r=o(" to load the model weights."),i$r=l(),F(P5.$$.fragment),d$r=l(),qr=a("div"),F(Lx.$$.fragment),c$r=l(),NCe=a("p"),m$r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),f$r=l(),pn=a("p"),g$r=o("The model class to instantiate is selected based on the "),qCe=a("code"),h$r=o("model_type"),u$r=o(` property of the config object (either
passed as an argument or loaded from `),jCe=a("code"),p$r=o("pretrained_model_name_or_path"),_$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DCe=a("code"),b$r=o("pretrained_model_name_or_path"),v$r=o(":"),F$r=l(),de=a("ul"),B5=a("li"),GCe=a("strong"),T$r=o("albert"),M$r=o(" \u2014 "),dK=a("a"),E$r=o("TFAlbertForTokenClassification"),C$r=o(" (ALBERT model)"),w$r=l(),I5=a("li"),OCe=a("strong"),A$r=o("bert"),L$r=o(" \u2014 "),cK=a("a"),y$r=o("TFBertForTokenClassification"),x$r=o(" (BERT model)"),$$r=l(),N5=a("li"),VCe=a("strong"),k$r=o("camembert"),S$r=o(" \u2014 "),mK=a("a"),R$r=o("TFCamembertForTokenClassification"),P$r=o(" (CamemBERT model)"),B$r=l(),q5=a("li"),XCe=a("strong"),I$r=o("convbert"),N$r=o(" \u2014 "),fK=a("a"),q$r=o("TFConvBertForTokenClassification"),j$r=o(" (ConvBERT model)"),D$r=l(),j5=a("li"),zCe=a("strong"),G$r=o("deberta"),O$r=o(" \u2014 "),gK=a("a"),V$r=o("TFDebertaForTokenClassification"),X$r=o(" (DeBERTa model)"),z$r=l(),D5=a("li"),QCe=a("strong"),Q$r=o("deberta-v2"),W$r=o(" \u2014 "),hK=a("a"),H$r=o("TFDebertaV2ForTokenClassification"),U$r=o(" (DeBERTa-v2 model)"),J$r=l(),G5=a("li"),WCe=a("strong"),Y$r=o("distilbert"),K$r=o(" \u2014 "),uK=a("a"),Z$r=o("TFDistilBertForTokenClassification"),ekr=o(" (DistilBERT model)"),okr=l(),O5=a("li"),HCe=a("strong"),rkr=o("electra"),tkr=o(" \u2014 "),pK=a("a"),akr=o("TFElectraForTokenClassification"),nkr=o(" (ELECTRA model)"),skr=l(),V5=a("li"),UCe=a("strong"),lkr=o("flaubert"),ikr=o(" \u2014 "),_K=a("a"),dkr=o("TFFlaubertForTokenClassification"),ckr=o(" (FlauBERT model)"),mkr=l(),X5=a("li"),JCe=a("strong"),fkr=o("funnel"),gkr=o(" \u2014 "),bK=a("a"),hkr=o("TFFunnelForTokenClassification"),ukr=o(" (Funnel Transformer model)"),pkr=l(),z5=a("li"),YCe=a("strong"),_kr=o("layoutlm"),bkr=o(" \u2014 "),vK=a("a"),vkr=o("TFLayoutLMForTokenClassification"),Fkr=o(" (LayoutLM model)"),Tkr=l(),Q5=a("li"),KCe=a("strong"),Mkr=o("longformer"),Ekr=o(" \u2014 "),FK=a("a"),Ckr=o("TFLongformerForTokenClassification"),wkr=o(" (Longformer model)"),Akr=l(),W5=a("li"),ZCe=a("strong"),Lkr=o("mobilebert"),ykr=o(" \u2014 "),TK=a("a"),xkr=o("TFMobileBertForTokenClassification"),$kr=o(" (MobileBERT model)"),kkr=l(),H5=a("li"),e3e=a("strong"),Skr=o("mpnet"),Rkr=o(" \u2014 "),MK=a("a"),Pkr=o("TFMPNetForTokenClassification"),Bkr=o(" (MPNet model)"),Ikr=l(),U5=a("li"),o3e=a("strong"),Nkr=o("rembert"),qkr=o(" \u2014 "),EK=a("a"),jkr=o("TFRemBertForTokenClassification"),Dkr=o(" (RemBERT model)"),Gkr=l(),J5=a("li"),r3e=a("strong"),Okr=o("roberta"),Vkr=o(" \u2014 "),CK=a("a"),Xkr=o("TFRobertaForTokenClassification"),zkr=o(" (RoBERTa model)"),Qkr=l(),Y5=a("li"),t3e=a("strong"),Wkr=o("roformer"),Hkr=o(" \u2014 "),wK=a("a"),Ukr=o("TFRoFormerForTokenClassification"),Jkr=o(" (RoFormer model)"),Ykr=l(),K5=a("li"),a3e=a("strong"),Kkr=o("xlm"),Zkr=o(" \u2014 "),AK=a("a"),eSr=o("TFXLMForTokenClassification"),oSr=o(" (XLM model)"),rSr=l(),Z5=a("li"),n3e=a("strong"),tSr=o("xlm-roberta"),aSr=o(" \u2014 "),LK=a("a"),nSr=o("TFXLMRobertaForTokenClassification"),sSr=o(" (XLM-RoBERTa model)"),lSr=l(),e0=a("li"),s3e=a("strong"),iSr=o("xlnet"),dSr=o(" \u2014 "),yK=a("a"),cSr=o("TFXLNetForTokenClassification"),mSr=o(" (XLNet model)"),fSr=l(),F(o0.$$.fragment),sXe=l(),Ic=a("h2"),r0=a("a"),l3e=a("span"),F(yx.$$.fragment),gSr=l(),i3e=a("span"),hSr=o("TFAutoModelForQuestionAnswering"),lXe=l(),mr=a("div"),F(xx.$$.fragment),uSr=l(),Nc=a("p"),pSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xK=a("a"),_Sr=o("from_pretrained()"),bSr=o(" class method or the "),$K=a("a"),vSr=o("from_config()"),FSr=o(` class
method.`),TSr=l(),$x=a("p"),MSr=o("This class cannot be instantiated directly using "),d3e=a("code"),ESr=o("__init__()"),CSr=o(" (throws an error)."),wSr=l(),Ot=a("div"),F(kx.$$.fragment),ASr=l(),c3e=a("p"),LSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ySr=l(),qc=a("p"),xSr=o(`Note:
Loading a model from its configuration file does `),m3e=a("strong"),$Sr=o("not"),kSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=a("a"),SSr=o("from_pretrained()"),RSr=o(" to load the model weights."),PSr=l(),F(t0.$$.fragment),BSr=l(),jr=a("div"),F(Sx.$$.fragment),ISr=l(),f3e=a("p"),NSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qSr=l(),_n=a("p"),jSr=o("The model class to instantiate is selected based on the "),g3e=a("code"),DSr=o("model_type"),GSr=o(` property of the config object (either
passed as an argument or loaded from `),h3e=a("code"),OSr=o("pretrained_model_name_or_path"),VSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=a("code"),XSr=o("pretrained_model_name_or_path"),zSr=o(":"),QSr=l(),ce=a("ul"),a0=a("li"),p3e=a("strong"),WSr=o("albert"),HSr=o(" \u2014 "),SK=a("a"),USr=o("TFAlbertForQuestionAnswering"),JSr=o(" (ALBERT model)"),YSr=l(),n0=a("li"),_3e=a("strong"),KSr=o("bert"),ZSr=o(" \u2014 "),RK=a("a"),eRr=o("TFBertForQuestionAnswering"),oRr=o(" (BERT model)"),rRr=l(),s0=a("li"),b3e=a("strong"),tRr=o("camembert"),aRr=o(" \u2014 "),PK=a("a"),nRr=o("TFCamembertForQuestionAnswering"),sRr=o(" (CamemBERT model)"),lRr=l(),l0=a("li"),v3e=a("strong"),iRr=o("convbert"),dRr=o(" \u2014 "),BK=a("a"),cRr=o("TFConvBertForQuestionAnswering"),mRr=o(" (ConvBERT model)"),fRr=l(),i0=a("li"),F3e=a("strong"),gRr=o("deberta"),hRr=o(" \u2014 "),IK=a("a"),uRr=o("TFDebertaForQuestionAnswering"),pRr=o(" (DeBERTa model)"),_Rr=l(),d0=a("li"),T3e=a("strong"),bRr=o("deberta-v2"),vRr=o(" \u2014 "),NK=a("a"),FRr=o("TFDebertaV2ForQuestionAnswering"),TRr=o(" (DeBERTa-v2 model)"),MRr=l(),c0=a("li"),M3e=a("strong"),ERr=o("distilbert"),CRr=o(" \u2014 "),qK=a("a"),wRr=o("TFDistilBertForQuestionAnswering"),ARr=o(" (DistilBERT model)"),LRr=l(),m0=a("li"),E3e=a("strong"),yRr=o("electra"),xRr=o(" \u2014 "),jK=a("a"),$Rr=o("TFElectraForQuestionAnswering"),kRr=o(" (ELECTRA model)"),SRr=l(),f0=a("li"),C3e=a("strong"),RRr=o("flaubert"),PRr=o(" \u2014 "),DK=a("a"),BRr=o("TFFlaubertForQuestionAnsweringSimple"),IRr=o(" (FlauBERT model)"),NRr=l(),g0=a("li"),w3e=a("strong"),qRr=o("funnel"),jRr=o(" \u2014 "),GK=a("a"),DRr=o("TFFunnelForQuestionAnswering"),GRr=o(" (Funnel Transformer model)"),ORr=l(),h0=a("li"),A3e=a("strong"),VRr=o("gptj"),XRr=o(" \u2014 "),OK=a("a"),zRr=o("TFGPTJForQuestionAnswering"),QRr=o(" (GPT-J model)"),WRr=l(),u0=a("li"),L3e=a("strong"),HRr=o("longformer"),URr=o(" \u2014 "),VK=a("a"),JRr=o("TFLongformerForQuestionAnswering"),YRr=o(" (Longformer model)"),KRr=l(),p0=a("li"),y3e=a("strong"),ZRr=o("mobilebert"),ePr=o(" \u2014 "),XK=a("a"),oPr=o("TFMobileBertForQuestionAnswering"),rPr=o(" (MobileBERT model)"),tPr=l(),_0=a("li"),x3e=a("strong"),aPr=o("mpnet"),nPr=o(" \u2014 "),zK=a("a"),sPr=o("TFMPNetForQuestionAnswering"),lPr=o(" (MPNet model)"),iPr=l(),b0=a("li"),$3e=a("strong"),dPr=o("rembert"),cPr=o(" \u2014 "),QK=a("a"),mPr=o("TFRemBertForQuestionAnswering"),fPr=o(" (RemBERT model)"),gPr=l(),v0=a("li"),k3e=a("strong"),hPr=o("roberta"),uPr=o(" \u2014 "),WK=a("a"),pPr=o("TFRobertaForQuestionAnswering"),_Pr=o(" (RoBERTa model)"),bPr=l(),F0=a("li"),S3e=a("strong"),vPr=o("roformer"),FPr=o(" \u2014 "),HK=a("a"),TPr=o("TFRoFormerForQuestionAnswering"),MPr=o(" (RoFormer model)"),EPr=l(),T0=a("li"),R3e=a("strong"),CPr=o("xlm"),wPr=o(" \u2014 "),UK=a("a"),APr=o("TFXLMForQuestionAnsweringSimple"),LPr=o(" (XLM model)"),yPr=l(),M0=a("li"),P3e=a("strong"),xPr=o("xlm-roberta"),$Pr=o(" \u2014 "),JK=a("a"),kPr=o("TFXLMRobertaForQuestionAnswering"),SPr=o(" (XLM-RoBERTa model)"),RPr=l(),E0=a("li"),B3e=a("strong"),PPr=o("xlnet"),BPr=o(" \u2014 "),YK=a("a"),IPr=o("TFXLNetForQuestionAnsweringSimple"),NPr=o(" (XLNet model)"),qPr=l(),F(C0.$$.fragment),iXe=l(),jc=a("h2"),w0=a("a"),I3e=a("span"),F(Rx.$$.fragment),jPr=l(),N3e=a("span"),DPr=o("TFAutoModelForVision2Seq"),dXe=l(),fr=a("div"),F(Px.$$.fragment),GPr=l(),Dc=a("p"),OPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KK=a("a"),VPr=o("from_pretrained()"),XPr=o(" class method or the "),ZK=a("a"),zPr=o("from_config()"),QPr=o(` class
method.`),WPr=l(),Bx=a("p"),HPr=o("This class cannot be instantiated directly using "),q3e=a("code"),UPr=o("__init__()"),JPr=o(" (throws an error)."),YPr=l(),Vt=a("div"),F(Ix.$$.fragment),KPr=l(),j3e=a("p"),ZPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eBr=l(),Gc=a("p"),oBr=o(`Note:
Loading a model from its configuration file does `),D3e=a("strong"),rBr=o("not"),tBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),aBr=o("from_pretrained()"),nBr=o(" to load the model weights."),sBr=l(),F(A0.$$.fragment),lBr=l(),Dr=a("div"),F(Nx.$$.fragment),iBr=l(),G3e=a("p"),dBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cBr=l(),bn=a("p"),mBr=o("The model class to instantiate is selected based on the "),O3e=a("code"),fBr=o("model_type"),gBr=o(` property of the config object (either
passed as an argument or loaded from `),V3e=a("code"),hBr=o("pretrained_model_name_or_path"),uBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=a("code"),pBr=o("pretrained_model_name_or_path"),_Br=o(":"),bBr=l(),z3e=a("ul"),L0=a("li"),Q3e=a("strong"),vBr=o("vision-encoder-decoder"),FBr=o(" \u2014 "),oZ=a("a"),TBr=o("TFVisionEncoderDecoderModel"),MBr=o(" (Vision Encoder decoder model)"),EBr=l(),F(y0.$$.fragment),cXe=l(),Oc=a("h2"),x0=a("a"),W3e=a("span"),F(qx.$$.fragment),CBr=l(),H3e=a("span"),wBr=o("TFAutoModelForSpeechSeq2Seq"),mXe=l(),gr=a("div"),F(jx.$$.fragment),ABr=l(),Vc=a("p"),LBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rZ=a("a"),yBr=o("from_pretrained()"),xBr=o(" class method or the "),tZ=a("a"),$Br=o("from_config()"),kBr=o(` class
method.`),SBr=l(),Dx=a("p"),RBr=o("This class cannot be instantiated directly using "),U3e=a("code"),PBr=o("__init__()"),BBr=o(" (throws an error)."),IBr=l(),Xt=a("div"),F(Gx.$$.fragment),NBr=l(),J3e=a("p"),qBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jBr=l(),Xc=a("p"),DBr=o(`Note:
Loading a model from its configuration file does `),Y3e=a("strong"),GBr=o("not"),OBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),VBr=o("from_pretrained()"),XBr=o(" to load the model weights."),zBr=l(),F($0.$$.fragment),QBr=l(),Gr=a("div"),F(Ox.$$.fragment),WBr=l(),K3e=a("p"),HBr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),UBr=l(),vn=a("p"),JBr=o("The model class to instantiate is selected based on the "),Z3e=a("code"),YBr=o("model_type"),KBr=o(` property of the config object (either
passed as an argument or loaded from `),e5e=a("code"),ZBr=o("pretrained_model_name_or_path"),eIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o5e=a("code"),oIr=o("pretrained_model_name_or_path"),rIr=o(":"),tIr=l(),r5e=a("ul"),k0=a("li"),t5e=a("strong"),aIr=o("speech_to_text"),nIr=o(" \u2014 "),nZ=a("a"),sIr=o("TFSpeech2TextForConditionalGeneration"),lIr=o(" (Speech2Text model)"),iIr=l(),F(S0.$$.fragment),fXe=l(),zc=a("h2"),R0=a("a"),a5e=a("span"),F(Vx.$$.fragment),dIr=l(),n5e=a("span"),cIr=o("FlaxAutoModel"),gXe=l(),hr=a("div"),F(Xx.$$.fragment),mIr=l(),Qc=a("p"),fIr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sZ=a("a"),gIr=o("from_pretrained()"),hIr=o(" class method or the "),lZ=a("a"),uIr=o("from_config()"),pIr=o(` class
method.`),_Ir=l(),zx=a("p"),bIr=o("This class cannot be instantiated directly using "),s5e=a("code"),vIr=o("__init__()"),FIr=o(" (throws an error)."),TIr=l(),zt=a("div"),F(Qx.$$.fragment),MIr=l(),l5e=a("p"),EIr=o("Instantiates one of the base model classes of the library from a configuration."),CIr=l(),Wc=a("p"),wIr=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),AIr=o("not"),LIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=a("a"),yIr=o("from_pretrained()"),xIr=o(" to load the model weights."),$Ir=l(),F(P0.$$.fragment),kIr=l(),Or=a("div"),F(Wx.$$.fragment),SIr=l(),d5e=a("p"),RIr=o("Instantiate one of the base model classes of the library from a pretrained model."),PIr=l(),Fn=a("p"),BIr=o("The model class to instantiate is selected based on the "),c5e=a("code"),IIr=o("model_type"),NIr=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),qIr=o("pretrained_model_name_or_path"),jIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=a("code"),DIr=o("pretrained_model_name_or_path"),GIr=o(":"),OIr=l(),oe=a("ul"),B0=a("li"),g5e=a("strong"),VIr=o("albert"),XIr=o(" \u2014 "),dZ=a("a"),zIr=o("FlaxAlbertModel"),QIr=o(" (ALBERT model)"),WIr=l(),I0=a("li"),h5e=a("strong"),HIr=o("bart"),UIr=o(" \u2014 "),cZ=a("a"),JIr=o("FlaxBartModel"),YIr=o(" (BART model)"),KIr=l(),N0=a("li"),u5e=a("strong"),ZIr=o("beit"),eNr=o(" \u2014 "),mZ=a("a"),oNr=o("FlaxBeitModel"),rNr=o(" (BEiT model)"),tNr=l(),q0=a("li"),p5e=a("strong"),aNr=o("bert"),nNr=o(" \u2014 "),fZ=a("a"),sNr=o("FlaxBertModel"),lNr=o(" (BERT model)"),iNr=l(),j0=a("li"),_5e=a("strong"),dNr=o("big_bird"),cNr=o(" \u2014 "),gZ=a("a"),mNr=o("FlaxBigBirdModel"),fNr=o(" (BigBird model)"),gNr=l(),D0=a("li"),b5e=a("strong"),hNr=o("blenderbot"),uNr=o(" \u2014 "),hZ=a("a"),pNr=o("FlaxBlenderbotModel"),_Nr=o(" (Blenderbot model)"),bNr=l(),G0=a("li"),v5e=a("strong"),vNr=o("blenderbot-small"),FNr=o(" \u2014 "),uZ=a("a"),TNr=o("FlaxBlenderbotSmallModel"),MNr=o(" (BlenderbotSmall model)"),ENr=l(),O0=a("li"),F5e=a("strong"),CNr=o("clip"),wNr=o(" \u2014 "),pZ=a("a"),ANr=o("FlaxCLIPModel"),LNr=o(" (CLIP model)"),yNr=l(),V0=a("li"),T5e=a("strong"),xNr=o("distilbert"),$Nr=o(" \u2014 "),_Z=a("a"),kNr=o("FlaxDistilBertModel"),SNr=o(" (DistilBERT model)"),RNr=l(),X0=a("li"),M5e=a("strong"),PNr=o("electra"),BNr=o(" \u2014 "),bZ=a("a"),INr=o("FlaxElectraModel"),NNr=o(" (ELECTRA model)"),qNr=l(),z0=a("li"),E5e=a("strong"),jNr=o("gpt2"),DNr=o(" \u2014 "),vZ=a("a"),GNr=o("FlaxGPT2Model"),ONr=o(" (OpenAI GPT-2 model)"),VNr=l(),Q0=a("li"),C5e=a("strong"),XNr=o("gpt_neo"),zNr=o(" \u2014 "),FZ=a("a"),QNr=o("FlaxGPTNeoModel"),WNr=o(" (GPT Neo model)"),HNr=l(),W0=a("li"),w5e=a("strong"),UNr=o("gptj"),JNr=o(" \u2014 "),TZ=a("a"),YNr=o("FlaxGPTJModel"),KNr=o(" (GPT-J model)"),ZNr=l(),H0=a("li"),A5e=a("strong"),eqr=o("longt5"),oqr=o(" \u2014 "),MZ=a("a"),rqr=o("FlaxLongT5Model"),tqr=o(" (LongT5 model)"),aqr=l(),U0=a("li"),L5e=a("strong"),nqr=o("marian"),sqr=o(" \u2014 "),EZ=a("a"),lqr=o("FlaxMarianModel"),iqr=o(" (Marian model)"),dqr=l(),J0=a("li"),y5e=a("strong"),cqr=o("mbart"),mqr=o(" \u2014 "),CZ=a("a"),fqr=o("FlaxMBartModel"),gqr=o(" (mBART model)"),hqr=l(),Y0=a("li"),x5e=a("strong"),uqr=o("mt5"),pqr=o(" \u2014 "),wZ=a("a"),_qr=o("FlaxMT5Model"),bqr=o(" (MT5 model)"),vqr=l(),K0=a("li"),$5e=a("strong"),Fqr=o("opt"),Tqr=o(" \u2014 "),AZ=a("a"),Mqr=o("FlaxOPTModel"),Eqr=o(" (OPT model)"),Cqr=l(),Z0=a("li"),k5e=a("strong"),wqr=o("pegasus"),Aqr=o(" \u2014 "),LZ=a("a"),Lqr=o("FlaxPegasusModel"),yqr=o(" (Pegasus model)"),xqr=l(),ew=a("li"),S5e=a("strong"),$qr=o("roberta"),kqr=o(" \u2014 "),yZ=a("a"),Sqr=o("FlaxRobertaModel"),Rqr=o(" (RoBERTa model)"),Pqr=l(),ow=a("li"),R5e=a("strong"),Bqr=o("roformer"),Iqr=o(" \u2014 "),xZ=a("a"),Nqr=o("FlaxRoFormerModel"),qqr=o(" (RoFormer model)"),jqr=l(),rw=a("li"),P5e=a("strong"),Dqr=o("t5"),Gqr=o(" \u2014 "),$Z=a("a"),Oqr=o("FlaxT5Model"),Vqr=o(" (T5 model)"),Xqr=l(),tw=a("li"),B5e=a("strong"),zqr=o("vision-text-dual-encoder"),Qqr=o(" \u2014 "),kZ=a("a"),Wqr=o("FlaxVisionTextDualEncoderModel"),Hqr=o(" (VisionTextDualEncoder model)"),Uqr=l(),aw=a("li"),I5e=a("strong"),Jqr=o("vit"),Yqr=o(" \u2014 "),SZ=a("a"),Kqr=o("FlaxViTModel"),Zqr=o(" (ViT model)"),ejr=l(),nw=a("li"),N5e=a("strong"),ojr=o("wav2vec2"),rjr=o(" \u2014 "),RZ=a("a"),tjr=o("FlaxWav2Vec2Model"),ajr=o(" (Wav2Vec2 model)"),njr=l(),sw=a("li"),q5e=a("strong"),sjr=o("xglm"),ljr=o(" \u2014 "),PZ=a("a"),ijr=o("FlaxXGLMModel"),djr=o(" (XGLM model)"),cjr=l(),lw=a("li"),j5e=a("strong"),mjr=o("xlm-roberta"),fjr=o(" \u2014 "),BZ=a("a"),gjr=o("FlaxXLMRobertaModel"),hjr=o(" (XLM-RoBERTa model)"),ujr=l(),F(iw.$$.fragment),hXe=l(),Hc=a("h2"),dw=a("a"),D5e=a("span"),F(Hx.$$.fragment),pjr=l(),G5e=a("span"),_jr=o("FlaxAutoModelForCausalLM"),uXe=l(),ur=a("div"),F(Ux.$$.fragment),bjr=l(),Uc=a("p"),vjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IZ=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" class method or the "),NZ=a("a"),Mjr=o("from_config()"),Ejr=o(` class
method.`),Cjr=l(),Jx=a("p"),wjr=o("This class cannot be instantiated directly using "),O5e=a("code"),Ajr=o("__init__()"),Ljr=o(" (throws an error)."),yjr=l(),Qt=a("div"),F(Yx.$$.fragment),xjr=l(),V5e=a("p"),$jr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kjr=l(),Jc=a("p"),Sjr=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),Rjr=o("not"),Pjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),Bjr=o("from_pretrained()"),Ijr=o(" to load the model weights."),Njr=l(),F(cw.$$.fragment),qjr=l(),Vr=a("div"),F(Kx.$$.fragment),jjr=l(),z5e=a("p"),Djr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Gjr=l(),Tn=a("p"),Ojr=o("The model class to instantiate is selected based on the "),Q5e=a("code"),Vjr=o("model_type"),Xjr=o(` property of the config object (either
passed as an argument or loaded from `),W5e=a("code"),zjr=o("pretrained_model_name_or_path"),Qjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),Wjr=o("pretrained_model_name_or_path"),Hjr=o(":"),Ujr=l(),xe=a("ul"),mw=a("li"),U5e=a("strong"),Jjr=o("bart"),Yjr=o(" \u2014 "),jZ=a("a"),Kjr=o("FlaxBartForCausalLM"),Zjr=o(" (BART model)"),eDr=l(),fw=a("li"),J5e=a("strong"),oDr=o("bert"),rDr=o(" \u2014 "),DZ=a("a"),tDr=o("FlaxBertForCausalLM"),aDr=o(" (BERT model)"),nDr=l(),gw=a("li"),Y5e=a("strong"),sDr=o("big_bird"),lDr=o(" \u2014 "),GZ=a("a"),iDr=o("FlaxBigBirdForCausalLM"),dDr=o(" (BigBird model)"),cDr=l(),hw=a("li"),K5e=a("strong"),mDr=o("electra"),fDr=o(" \u2014 "),OZ=a("a"),gDr=o("FlaxElectraForCausalLM"),hDr=o(" (ELECTRA model)"),uDr=l(),uw=a("li"),Z5e=a("strong"),pDr=o("gpt2"),_Dr=o(" \u2014 "),VZ=a("a"),bDr=o("FlaxGPT2LMHeadModel"),vDr=o(" (OpenAI GPT-2 model)"),FDr=l(),pw=a("li"),e0e=a("strong"),TDr=o("gpt_neo"),MDr=o(" \u2014 "),XZ=a("a"),EDr=o("FlaxGPTNeoForCausalLM"),CDr=o(" (GPT Neo model)"),wDr=l(),_w=a("li"),o0e=a("strong"),ADr=o("gptj"),LDr=o(" \u2014 "),zZ=a("a"),yDr=o("FlaxGPTJForCausalLM"),xDr=o(" (GPT-J model)"),$Dr=l(),bw=a("li"),r0e=a("strong"),kDr=o("opt"),SDr=o(" \u2014 "),QZ=a("a"),RDr=o("FlaxOPTForCausalLM"),PDr=o(" (OPT model)"),BDr=l(),vw=a("li"),t0e=a("strong"),IDr=o("roberta"),NDr=o(" \u2014 "),WZ=a("a"),qDr=o("FlaxRobertaForCausalLM"),jDr=o(" (RoBERTa model)"),DDr=l(),Fw=a("li"),a0e=a("strong"),GDr=o("xglm"),ODr=o(" \u2014 "),HZ=a("a"),VDr=o("FlaxXGLMForCausalLM"),XDr=o(" (XGLM model)"),zDr=l(),F(Tw.$$.fragment),pXe=l(),Yc=a("h2"),Mw=a("a"),n0e=a("span"),F(Zx.$$.fragment),QDr=l(),s0e=a("span"),WDr=o("FlaxAutoModelForPreTraining"),_Xe=l(),pr=a("div"),F(e$.$$.fragment),HDr=l(),Kc=a("p"),UDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UZ=a("a"),JDr=o("from_pretrained()"),YDr=o(" class method or the "),JZ=a("a"),KDr=o("from_config()"),ZDr=o(` class
method.`),eGr=l(),o$=a("p"),oGr=o("This class cannot be instantiated directly using "),l0e=a("code"),rGr=o("__init__()"),tGr=o(" (throws an error)."),aGr=l(),Wt=a("div"),F(r$.$$.fragment),nGr=l(),i0e=a("p"),sGr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lGr=l(),Zc=a("p"),iGr=o(`Note:
Loading a model from its configuration file does `),d0e=a("strong"),dGr=o("not"),cGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=a("a"),mGr=o("from_pretrained()"),fGr=o(" to load the model weights."),gGr=l(),F(Ew.$$.fragment),hGr=l(),Xr=a("div"),F(t$.$$.fragment),uGr=l(),c0e=a("p"),pGr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_Gr=l(),Mn=a("p"),bGr=o("The model class to instantiate is selected based on the "),m0e=a("code"),vGr=o("model_type"),FGr=o(` property of the config object (either
passed as an argument or loaded from `),f0e=a("code"),TGr=o("pretrained_model_name_or_path"),MGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=a("code"),EGr=o("pretrained_model_name_or_path"),CGr=o(":"),wGr=l(),Ee=a("ul"),Cw=a("li"),h0e=a("strong"),AGr=o("albert"),LGr=o(" \u2014 "),KZ=a("a"),yGr=o("FlaxAlbertForPreTraining"),xGr=o(" (ALBERT model)"),$Gr=l(),ww=a("li"),u0e=a("strong"),kGr=o("bart"),SGr=o(" \u2014 "),ZZ=a("a"),RGr=o("FlaxBartForConditionalGeneration"),PGr=o(" (BART model)"),BGr=l(),Aw=a("li"),p0e=a("strong"),IGr=o("bert"),NGr=o(" \u2014 "),eee=a("a"),qGr=o("FlaxBertForPreTraining"),jGr=o(" (BERT model)"),DGr=l(),Lw=a("li"),_0e=a("strong"),GGr=o("big_bird"),OGr=o(" \u2014 "),oee=a("a"),VGr=o("FlaxBigBirdForPreTraining"),XGr=o(" (BigBird model)"),zGr=l(),yw=a("li"),b0e=a("strong"),QGr=o("electra"),WGr=o(" \u2014 "),ree=a("a"),HGr=o("FlaxElectraForPreTraining"),UGr=o(" (ELECTRA model)"),JGr=l(),xw=a("li"),v0e=a("strong"),YGr=o("longt5"),KGr=o(" \u2014 "),tee=a("a"),ZGr=o("FlaxLongT5ForConditionalGeneration"),eOr=o(" (LongT5 model)"),oOr=l(),$w=a("li"),F0e=a("strong"),rOr=o("mbart"),tOr=o(" \u2014 "),aee=a("a"),aOr=o("FlaxMBartForConditionalGeneration"),nOr=o(" (mBART model)"),sOr=l(),kw=a("li"),T0e=a("strong"),lOr=o("mt5"),iOr=o(" \u2014 "),nee=a("a"),dOr=o("FlaxMT5ForConditionalGeneration"),cOr=o(" (MT5 model)"),mOr=l(),Sw=a("li"),M0e=a("strong"),fOr=o("roberta"),gOr=o(" \u2014 "),see=a("a"),hOr=o("FlaxRobertaForMaskedLM"),uOr=o(" (RoBERTa model)"),pOr=l(),Rw=a("li"),E0e=a("strong"),_Or=o("roformer"),bOr=o(" \u2014 "),lee=a("a"),vOr=o("FlaxRoFormerForMaskedLM"),FOr=o(" (RoFormer model)"),TOr=l(),Pw=a("li"),C0e=a("strong"),MOr=o("t5"),EOr=o(" \u2014 "),iee=a("a"),COr=o("FlaxT5ForConditionalGeneration"),wOr=o(" (T5 model)"),AOr=l(),Bw=a("li"),w0e=a("strong"),LOr=o("wav2vec2"),yOr=o(" \u2014 "),dee=a("a"),xOr=o("FlaxWav2Vec2ForPreTraining"),$Or=o(" (Wav2Vec2 model)"),kOr=l(),Iw=a("li"),A0e=a("strong"),SOr=o("xlm-roberta"),ROr=o(" \u2014 "),cee=a("a"),POr=o("FlaxXLMRobertaForMaskedLM"),BOr=o(" (XLM-RoBERTa model)"),IOr=l(),F(Nw.$$.fragment),bXe=l(),em=a("h2"),qw=a("a"),L0e=a("span"),F(a$.$$.fragment),NOr=l(),y0e=a("span"),qOr=o("FlaxAutoModelForMaskedLM"),vXe=l(),_r=a("div"),F(n$.$$.fragment),jOr=l(),om=a("p"),DOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mee=a("a"),GOr=o("from_pretrained()"),OOr=o(" class method or the "),fee=a("a"),VOr=o("from_config()"),XOr=o(` class
method.`),zOr=l(),s$=a("p"),QOr=o("This class cannot be instantiated directly using "),x0e=a("code"),WOr=o("__init__()"),HOr=o(" (throws an error)."),UOr=l(),Ht=a("div"),F(l$.$$.fragment),JOr=l(),$0e=a("p"),YOr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KOr=l(),rm=a("p"),ZOr=o(`Note:
Loading a model from its configuration file does `),k0e=a("strong"),eVr=o("not"),oVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=a("a"),rVr=o("from_pretrained()"),tVr=o(" to load the model weights."),aVr=l(),F(jw.$$.fragment),nVr=l(),zr=a("div"),F(i$.$$.fragment),sVr=l(),S0e=a("p"),lVr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iVr=l(),En=a("p"),dVr=o("The model class to instantiate is selected based on the "),R0e=a("code"),cVr=o("model_type"),mVr=o(` property of the config object (either
passed as an argument or loaded from `),P0e=a("code"),fVr=o("pretrained_model_name_or_path"),gVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=a("code"),hVr=o("pretrained_model_name_or_path"),uVr=o(":"),pVr=l(),$e=a("ul"),Dw=a("li"),I0e=a("strong"),_Vr=o("albert"),bVr=o(" \u2014 "),hee=a("a"),vVr=o("FlaxAlbertForMaskedLM"),FVr=o(" (ALBERT model)"),TVr=l(),Gw=a("li"),N0e=a("strong"),MVr=o("bart"),EVr=o(" \u2014 "),uee=a("a"),CVr=o("FlaxBartForConditionalGeneration"),wVr=o(" (BART model)"),AVr=l(),Ow=a("li"),q0e=a("strong"),LVr=o("bert"),yVr=o(" \u2014 "),pee=a("a"),xVr=o("FlaxBertForMaskedLM"),$Vr=o(" (BERT model)"),kVr=l(),Vw=a("li"),j0e=a("strong"),SVr=o("big_bird"),RVr=o(" \u2014 "),_ee=a("a"),PVr=o("FlaxBigBirdForMaskedLM"),BVr=o(" (BigBird model)"),IVr=l(),Xw=a("li"),D0e=a("strong"),NVr=o("distilbert"),qVr=o(" \u2014 "),bee=a("a"),jVr=o("FlaxDistilBertForMaskedLM"),DVr=o(" (DistilBERT model)"),GVr=l(),zw=a("li"),G0e=a("strong"),OVr=o("electra"),VVr=o(" \u2014 "),vee=a("a"),XVr=o("FlaxElectraForMaskedLM"),zVr=o(" (ELECTRA model)"),QVr=l(),Qw=a("li"),O0e=a("strong"),WVr=o("mbart"),HVr=o(" \u2014 "),Fee=a("a"),UVr=o("FlaxMBartForConditionalGeneration"),JVr=o(" (mBART model)"),YVr=l(),Ww=a("li"),V0e=a("strong"),KVr=o("roberta"),ZVr=o(" \u2014 "),Tee=a("a"),eXr=o("FlaxRobertaForMaskedLM"),oXr=o(" (RoBERTa model)"),rXr=l(),Hw=a("li"),X0e=a("strong"),tXr=o("roformer"),aXr=o(" \u2014 "),Mee=a("a"),nXr=o("FlaxRoFormerForMaskedLM"),sXr=o(" (RoFormer model)"),lXr=l(),Uw=a("li"),z0e=a("strong"),iXr=o("xlm-roberta"),dXr=o(" \u2014 "),Eee=a("a"),cXr=o("FlaxXLMRobertaForMaskedLM"),mXr=o(" (XLM-RoBERTa model)"),fXr=l(),F(Jw.$$.fragment),FXe=l(),tm=a("h2"),Yw=a("a"),Q0e=a("span"),F(d$.$$.fragment),gXr=l(),W0e=a("span"),hXr=o("FlaxAutoModelForSeq2SeqLM"),TXe=l(),br=a("div"),F(c$.$$.fragment),uXr=l(),am=a("p"),pXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cee=a("a"),_Xr=o("from_pretrained()"),bXr=o(" class method or the "),wee=a("a"),vXr=o("from_config()"),FXr=o(` class
method.`),TXr=l(),m$=a("p"),MXr=o("This class cannot be instantiated directly using "),H0e=a("code"),EXr=o("__init__()"),CXr=o(" (throws an error)."),wXr=l(),Ut=a("div"),F(f$.$$.fragment),AXr=l(),U0e=a("p"),LXr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yXr=l(),nm=a("p"),xXr=o(`Note:
Loading a model from its configuration file does `),J0e=a("strong"),$Xr=o("not"),kXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=a("a"),SXr=o("from_pretrained()"),RXr=o(" to load the model weights."),PXr=l(),F(Kw.$$.fragment),BXr=l(),Qr=a("div"),F(g$.$$.fragment),IXr=l(),Y0e=a("p"),NXr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qXr=l(),Cn=a("p"),jXr=o("The model class to instantiate is selected based on the "),K0e=a("code"),DXr=o("model_type"),GXr=o(` property of the config object (either
passed as an argument or loaded from `),Z0e=a("code"),OXr=o("pretrained_model_name_or_path"),VXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ewe=a("code"),XXr=o("pretrained_model_name_or_path"),zXr=o(":"),QXr=l(),ke=a("ul"),Zw=a("li"),owe=a("strong"),WXr=o("bart"),HXr=o(" \u2014 "),Lee=a("a"),UXr=o("FlaxBartForConditionalGeneration"),JXr=o(" (BART model)"),YXr=l(),eA=a("li"),rwe=a("strong"),KXr=o("blenderbot"),ZXr=o(" \u2014 "),yee=a("a"),ezr=o("FlaxBlenderbotForConditionalGeneration"),ozr=o(" (Blenderbot model)"),rzr=l(),oA=a("li"),twe=a("strong"),tzr=o("blenderbot-small"),azr=o(" \u2014 "),xee=a("a"),nzr=o("FlaxBlenderbotSmallForConditionalGeneration"),szr=o(" (BlenderbotSmall model)"),lzr=l(),rA=a("li"),awe=a("strong"),izr=o("encoder-decoder"),dzr=o(" \u2014 "),$ee=a("a"),czr=o("FlaxEncoderDecoderModel"),mzr=o(" (Encoder decoder model)"),fzr=l(),tA=a("li"),nwe=a("strong"),gzr=o("longt5"),hzr=o(" \u2014 "),kee=a("a"),uzr=o("FlaxLongT5ForConditionalGeneration"),pzr=o(" (LongT5 model)"),_zr=l(),aA=a("li"),swe=a("strong"),bzr=o("marian"),vzr=o(" \u2014 "),See=a("a"),Fzr=o("FlaxMarianMTModel"),Tzr=o(" (Marian model)"),Mzr=l(),nA=a("li"),lwe=a("strong"),Ezr=o("mbart"),Czr=o(" \u2014 "),Ree=a("a"),wzr=o("FlaxMBartForConditionalGeneration"),Azr=o(" (mBART model)"),Lzr=l(),sA=a("li"),iwe=a("strong"),yzr=o("mt5"),xzr=o(" \u2014 "),Pee=a("a"),$zr=o("FlaxMT5ForConditionalGeneration"),kzr=o(" (MT5 model)"),Szr=l(),lA=a("li"),dwe=a("strong"),Rzr=o("pegasus"),Pzr=o(" \u2014 "),Bee=a("a"),Bzr=o("FlaxPegasusForConditionalGeneration"),Izr=o(" (Pegasus model)"),Nzr=l(),iA=a("li"),cwe=a("strong"),qzr=o("t5"),jzr=o(" \u2014 "),Iee=a("a"),Dzr=o("FlaxT5ForConditionalGeneration"),Gzr=o(" (T5 model)"),Ozr=l(),F(dA.$$.fragment),MXe=l(),sm=a("h2"),cA=a("a"),mwe=a("span"),F(h$.$$.fragment),Vzr=l(),fwe=a("span"),Xzr=o("FlaxAutoModelForSequenceClassification"),EXe=l(),vr=a("div"),F(u$.$$.fragment),zzr=l(),lm=a("p"),Qzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nee=a("a"),Wzr=o("from_pretrained()"),Hzr=o(" class method or the "),qee=a("a"),Uzr=o("from_config()"),Jzr=o(` class
method.`),Yzr=l(),p$=a("p"),Kzr=o("This class cannot be instantiated directly using "),gwe=a("code"),Zzr=o("__init__()"),eQr=o(" (throws an error)."),oQr=l(),Jt=a("div"),F(_$.$$.fragment),rQr=l(),hwe=a("p"),tQr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aQr=l(),im=a("p"),nQr=o(`Note:
Loading a model from its configuration file does `),uwe=a("strong"),sQr=o("not"),lQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=a("a"),iQr=o("from_pretrained()"),dQr=o(" to load the model weights."),cQr=l(),F(mA.$$.fragment),mQr=l(),Wr=a("div"),F(b$.$$.fragment),fQr=l(),pwe=a("p"),gQr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hQr=l(),wn=a("p"),uQr=o("The model class to instantiate is selected based on the "),_we=a("code"),pQr=o("model_type"),_Qr=o(` property of the config object (either
passed as an argument or loaded from `),bwe=a("code"),bQr=o("pretrained_model_name_or_path"),vQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vwe=a("code"),FQr=o("pretrained_model_name_or_path"),TQr=o(":"),MQr=l(),Se=a("ul"),fA=a("li"),Fwe=a("strong"),EQr=o("albert"),CQr=o(" \u2014 "),Dee=a("a"),wQr=o("FlaxAlbertForSequenceClassification"),AQr=o(" (ALBERT model)"),LQr=l(),gA=a("li"),Twe=a("strong"),yQr=o("bart"),xQr=o(" \u2014 "),Gee=a("a"),$Qr=o("FlaxBartForSequenceClassification"),kQr=o(" (BART model)"),SQr=l(),hA=a("li"),Mwe=a("strong"),RQr=o("bert"),PQr=o(" \u2014 "),Oee=a("a"),BQr=o("FlaxBertForSequenceClassification"),IQr=o(" (BERT model)"),NQr=l(),uA=a("li"),Ewe=a("strong"),qQr=o("big_bird"),jQr=o(" \u2014 "),Vee=a("a"),DQr=o("FlaxBigBirdForSequenceClassification"),GQr=o(" (BigBird model)"),OQr=l(),pA=a("li"),Cwe=a("strong"),VQr=o("distilbert"),XQr=o(" \u2014 "),Xee=a("a"),zQr=o("FlaxDistilBertForSequenceClassification"),QQr=o(" (DistilBERT model)"),WQr=l(),_A=a("li"),wwe=a("strong"),HQr=o("electra"),UQr=o(" \u2014 "),zee=a("a"),JQr=o("FlaxElectraForSequenceClassification"),YQr=o(" (ELECTRA model)"),KQr=l(),bA=a("li"),Awe=a("strong"),ZQr=o("mbart"),eWr=o(" \u2014 "),Qee=a("a"),oWr=o("FlaxMBartForSequenceClassification"),rWr=o(" (mBART model)"),tWr=l(),vA=a("li"),Lwe=a("strong"),aWr=o("roberta"),nWr=o(" \u2014 "),Wee=a("a"),sWr=o("FlaxRobertaForSequenceClassification"),lWr=o(" (RoBERTa model)"),iWr=l(),FA=a("li"),ywe=a("strong"),dWr=o("roformer"),cWr=o(" \u2014 "),Hee=a("a"),mWr=o("FlaxRoFormerForSequenceClassification"),fWr=o(" (RoFormer model)"),gWr=l(),TA=a("li"),xwe=a("strong"),hWr=o("xlm-roberta"),uWr=o(" \u2014 "),Uee=a("a"),pWr=o("FlaxXLMRobertaForSequenceClassification"),_Wr=o(" (XLM-RoBERTa model)"),bWr=l(),F(MA.$$.fragment),CXe=l(),dm=a("h2"),EA=a("a"),$we=a("span"),F(v$.$$.fragment),vWr=l(),kwe=a("span"),FWr=o("FlaxAutoModelForQuestionAnswering"),wXe=l(),Fr=a("div"),F(F$.$$.fragment),TWr=l(),cm=a("p"),MWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jee=a("a"),EWr=o("from_pretrained()"),CWr=o(" class method or the "),Yee=a("a"),wWr=o("from_config()"),AWr=o(` class
method.`),LWr=l(),T$=a("p"),yWr=o("This class cannot be instantiated directly using "),Swe=a("code"),xWr=o("__init__()"),$Wr=o(" (throws an error)."),kWr=l(),Yt=a("div"),F(M$.$$.fragment),SWr=l(),Rwe=a("p"),RWr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PWr=l(),mm=a("p"),BWr=o(`Note:
Loading a model from its configuration file does `),Pwe=a("strong"),IWr=o("not"),NWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=a("a"),qWr=o("from_pretrained()"),jWr=o(" to load the model weights."),DWr=l(),F(CA.$$.fragment),GWr=l(),Hr=a("div"),F(E$.$$.fragment),OWr=l(),Bwe=a("p"),VWr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XWr=l(),An=a("p"),zWr=o("The model class to instantiate is selected based on the "),Iwe=a("code"),QWr=o("model_type"),WWr=o(` property of the config object (either
passed as an argument or loaded from `),Nwe=a("code"),HWr=o("pretrained_model_name_or_path"),UWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qwe=a("code"),JWr=o("pretrained_model_name_or_path"),YWr=o(":"),KWr=l(),Re=a("ul"),wA=a("li"),jwe=a("strong"),ZWr=o("albert"),eHr=o(" \u2014 "),Zee=a("a"),oHr=o("FlaxAlbertForQuestionAnswering"),rHr=o(" (ALBERT model)"),tHr=l(),AA=a("li"),Dwe=a("strong"),aHr=o("bart"),nHr=o(" \u2014 "),eoe=a("a"),sHr=o("FlaxBartForQuestionAnswering"),lHr=o(" (BART model)"),iHr=l(),LA=a("li"),Gwe=a("strong"),dHr=o("bert"),cHr=o(" \u2014 "),ooe=a("a"),mHr=o("FlaxBertForQuestionAnswering"),fHr=o(" (BERT model)"),gHr=l(),yA=a("li"),Owe=a("strong"),hHr=o("big_bird"),uHr=o(" \u2014 "),roe=a("a"),pHr=o("FlaxBigBirdForQuestionAnswering"),_Hr=o(" (BigBird model)"),bHr=l(),xA=a("li"),Vwe=a("strong"),vHr=o("distilbert"),FHr=o(" \u2014 "),toe=a("a"),THr=o("FlaxDistilBertForQuestionAnswering"),MHr=o(" (DistilBERT model)"),EHr=l(),$A=a("li"),Xwe=a("strong"),CHr=o("electra"),wHr=o(" \u2014 "),aoe=a("a"),AHr=o("FlaxElectraForQuestionAnswering"),LHr=o(" (ELECTRA model)"),yHr=l(),kA=a("li"),zwe=a("strong"),xHr=o("mbart"),$Hr=o(" \u2014 "),noe=a("a"),kHr=o("FlaxMBartForQuestionAnswering"),SHr=o(" (mBART model)"),RHr=l(),SA=a("li"),Qwe=a("strong"),PHr=o("roberta"),BHr=o(" \u2014 "),soe=a("a"),IHr=o("FlaxRobertaForQuestionAnswering"),NHr=o(" (RoBERTa model)"),qHr=l(),RA=a("li"),Wwe=a("strong"),jHr=o("roformer"),DHr=o(" \u2014 "),loe=a("a"),GHr=o("FlaxRoFormerForQuestionAnswering"),OHr=o(" (RoFormer model)"),VHr=l(),PA=a("li"),Hwe=a("strong"),XHr=o("xlm-roberta"),zHr=o(" \u2014 "),ioe=a("a"),QHr=o("FlaxXLMRobertaForQuestionAnswering"),WHr=o(" (XLM-RoBERTa model)"),HHr=l(),F(BA.$$.fragment),AXe=l(),fm=a("h2"),IA=a("a"),Uwe=a("span"),F(C$.$$.fragment),UHr=l(),Jwe=a("span"),JHr=o("FlaxAutoModelForTokenClassification"),LXe=l(),Tr=a("div"),F(w$.$$.fragment),YHr=l(),gm=a("p"),KHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),doe=a("a"),ZHr=o("from_pretrained()"),eUr=o(" class method or the "),coe=a("a"),oUr=o("from_config()"),rUr=o(` class
method.`),tUr=l(),A$=a("p"),aUr=o("This class cannot be instantiated directly using "),Ywe=a("code"),nUr=o("__init__()"),sUr=o(" (throws an error)."),lUr=l(),Kt=a("div"),F(L$.$$.fragment),iUr=l(),Kwe=a("p"),dUr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cUr=l(),hm=a("p"),mUr=o(`Note:
Loading a model from its configuration file does `),Zwe=a("strong"),fUr=o("not"),gUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),moe=a("a"),hUr=o("from_pretrained()"),uUr=o(" to load the model weights."),pUr=l(),F(NA.$$.fragment),_Ur=l(),Ur=a("div"),F(y$.$$.fragment),bUr=l(),eAe=a("p"),vUr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FUr=l(),Ln=a("p"),TUr=o("The model class to instantiate is selected based on the "),oAe=a("code"),MUr=o("model_type"),EUr=o(` property of the config object (either
passed as an argument or loaded from `),rAe=a("code"),CUr=o("pretrained_model_name_or_path"),wUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tAe=a("code"),AUr=o("pretrained_model_name_or_path"),LUr=o(":"),yUr=l(),Ve=a("ul"),qA=a("li"),aAe=a("strong"),xUr=o("albert"),$Ur=o(" \u2014 "),foe=a("a"),kUr=o("FlaxAlbertForTokenClassification"),SUr=o(" (ALBERT model)"),RUr=l(),jA=a("li"),nAe=a("strong"),PUr=o("bert"),BUr=o(" \u2014 "),goe=a("a"),IUr=o("FlaxBertForTokenClassification"),NUr=o(" (BERT model)"),qUr=l(),DA=a("li"),sAe=a("strong"),jUr=o("big_bird"),DUr=o(" \u2014 "),hoe=a("a"),GUr=o("FlaxBigBirdForTokenClassification"),OUr=o(" (BigBird model)"),VUr=l(),GA=a("li"),lAe=a("strong"),XUr=o("distilbert"),zUr=o(" \u2014 "),uoe=a("a"),QUr=o("FlaxDistilBertForTokenClassification"),WUr=o(" (DistilBERT model)"),HUr=l(),OA=a("li"),iAe=a("strong"),UUr=o("electra"),JUr=o(" \u2014 "),poe=a("a"),YUr=o("FlaxElectraForTokenClassification"),KUr=o(" (ELECTRA model)"),ZUr=l(),VA=a("li"),dAe=a("strong"),eJr=o("roberta"),oJr=o(" \u2014 "),_oe=a("a"),rJr=o("FlaxRobertaForTokenClassification"),tJr=o(" (RoBERTa model)"),aJr=l(),XA=a("li"),cAe=a("strong"),nJr=o("roformer"),sJr=o(" \u2014 "),boe=a("a"),lJr=o("FlaxRoFormerForTokenClassification"),iJr=o(" (RoFormer model)"),dJr=l(),zA=a("li"),mAe=a("strong"),cJr=o("xlm-roberta"),mJr=o(" \u2014 "),voe=a("a"),fJr=o("FlaxXLMRobertaForTokenClassification"),gJr=o(" (XLM-RoBERTa model)"),hJr=l(),F(QA.$$.fragment),yXe=l(),um=a("h2"),WA=a("a"),fAe=a("span"),F(x$.$$.fragment),uJr=l(),gAe=a("span"),pJr=o("FlaxAutoModelForMultipleChoice"),xXe=l(),Mr=a("div"),F($$.$$.fragment),_Jr=l(),pm=a("p"),bJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Foe=a("a"),vJr=o("from_pretrained()"),FJr=o(" class method or the "),Toe=a("a"),TJr=o("from_config()"),MJr=o(` class
method.`),EJr=l(),k$=a("p"),CJr=o("This class cannot be instantiated directly using "),hAe=a("code"),wJr=o("__init__()"),AJr=o(" (throws an error)."),LJr=l(),Zt=a("div"),F(S$.$$.fragment),yJr=l(),uAe=a("p"),xJr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$Jr=l(),_m=a("p"),kJr=o(`Note:
Loading a model from its configuration file does `),pAe=a("strong"),SJr=o("not"),RJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=a("a"),PJr=o("from_pretrained()"),BJr=o(" to load the model weights."),IJr=l(),F(HA.$$.fragment),NJr=l(),Jr=a("div"),F(R$.$$.fragment),qJr=l(),_Ae=a("p"),jJr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),DJr=l(),yn=a("p"),GJr=o("The model class to instantiate is selected based on the "),bAe=a("code"),OJr=o("model_type"),VJr=o(` property of the config object (either
passed as an argument or loaded from `),vAe=a("code"),XJr=o("pretrained_model_name_or_path"),zJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FAe=a("code"),QJr=o("pretrained_model_name_or_path"),WJr=o(":"),HJr=l(),Xe=a("ul"),UA=a("li"),TAe=a("strong"),UJr=o("albert"),JJr=o(" \u2014 "),Eoe=a("a"),YJr=o("FlaxAlbertForMultipleChoice"),KJr=o(" (ALBERT model)"),ZJr=l(),JA=a("li"),MAe=a("strong"),eYr=o("bert"),oYr=o(" \u2014 "),Coe=a("a"),rYr=o("FlaxBertForMultipleChoice"),tYr=o(" (BERT model)"),aYr=l(),YA=a("li"),EAe=a("strong"),nYr=o("big_bird"),sYr=o(" \u2014 "),woe=a("a"),lYr=o("FlaxBigBirdForMultipleChoice"),iYr=o(" (BigBird model)"),dYr=l(),KA=a("li"),CAe=a("strong"),cYr=o("distilbert"),mYr=o(" \u2014 "),Aoe=a("a"),fYr=o("FlaxDistilBertForMultipleChoice"),gYr=o(" (DistilBERT model)"),hYr=l(),ZA=a("li"),wAe=a("strong"),uYr=o("electra"),pYr=o(" \u2014 "),Loe=a("a"),_Yr=o("FlaxElectraForMultipleChoice"),bYr=o(" (ELECTRA model)"),vYr=l(),e6=a("li"),AAe=a("strong"),FYr=o("roberta"),TYr=o(" \u2014 "),yoe=a("a"),MYr=o("FlaxRobertaForMultipleChoice"),EYr=o(" (RoBERTa model)"),CYr=l(),o6=a("li"),LAe=a("strong"),wYr=o("roformer"),AYr=o(" \u2014 "),xoe=a("a"),LYr=o("FlaxRoFormerForMultipleChoice"),yYr=o(" (RoFormer model)"),xYr=l(),r6=a("li"),yAe=a("strong"),$Yr=o("xlm-roberta"),kYr=o(" \u2014 "),$oe=a("a"),SYr=o("FlaxXLMRobertaForMultipleChoice"),RYr=o(" (XLM-RoBERTa model)"),PYr=l(),F(t6.$$.fragment),$Xe=l(),bm=a("h2"),a6=a("a"),xAe=a("span"),F(P$.$$.fragment),BYr=l(),$Ae=a("span"),IYr=o("FlaxAutoModelForNextSentencePrediction"),kXe=l(),Er=a("div"),F(B$.$$.fragment),NYr=l(),vm=a("p"),qYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),koe=a("a"),jYr=o("from_pretrained()"),DYr=o(" class method or the "),Soe=a("a"),GYr=o("from_config()"),OYr=o(` class
method.`),VYr=l(),I$=a("p"),XYr=o("This class cannot be instantiated directly using "),kAe=a("code"),zYr=o("__init__()"),QYr=o(" (throws an error)."),WYr=l(),ea=a("div"),F(N$.$$.fragment),HYr=l(),SAe=a("p"),UYr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JYr=l(),Fm=a("p"),YYr=o(`Note:
Loading a model from its configuration file does `),RAe=a("strong"),KYr=o("not"),ZYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=a("a"),eKr=o("from_pretrained()"),oKr=o(" to load the model weights."),rKr=l(),F(n6.$$.fragment),tKr=l(),Yr=a("div"),F(q$.$$.fragment),aKr=l(),PAe=a("p"),nKr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sKr=l(),xn=a("p"),lKr=o("The model class to instantiate is selected based on the "),BAe=a("code"),iKr=o("model_type"),dKr=o(` property of the config object (either
passed as an argument or loaded from `),IAe=a("code"),cKr=o("pretrained_model_name_or_path"),mKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=a("code"),fKr=o("pretrained_model_name_or_path"),gKr=o(":"),hKr=l(),qAe=a("ul"),s6=a("li"),jAe=a("strong"),uKr=o("bert"),pKr=o(" \u2014 "),Poe=a("a"),_Kr=o("FlaxBertForNextSentencePrediction"),bKr=o(" (BERT model)"),vKr=l(),F(l6.$$.fragment),SXe=l(),Tm=a("h2"),i6=a("a"),DAe=a("span"),F(j$.$$.fragment),FKr=l(),GAe=a("span"),TKr=o("FlaxAutoModelForImageClassification"),RXe=l(),Cr=a("div"),F(D$.$$.fragment),MKr=l(),Mm=a("p"),EKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Boe=a("a"),CKr=o("from_pretrained()"),wKr=o(" class method or the "),Ioe=a("a"),AKr=o("from_config()"),LKr=o(` class
method.`),yKr=l(),G$=a("p"),xKr=o("This class cannot be instantiated directly using "),OAe=a("code"),$Kr=o("__init__()"),kKr=o(" (throws an error)."),SKr=l(),oa=a("div"),F(O$.$$.fragment),RKr=l(),VAe=a("p"),PKr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BKr=l(),Em=a("p"),IKr=o(`Note:
Loading a model from its configuration file does `),XAe=a("strong"),NKr=o("not"),qKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=a("a"),jKr=o("from_pretrained()"),DKr=o(" to load the model weights."),GKr=l(),F(d6.$$.fragment),OKr=l(),Kr=a("div"),F(V$.$$.fragment),VKr=l(),zAe=a("p"),XKr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zKr=l(),$n=a("p"),QKr=o("The model class to instantiate is selected based on the "),QAe=a("code"),WKr=o("model_type"),HKr=o(` property of the config object (either
passed as an argument or loaded from `),WAe=a("code"),UKr=o("pretrained_model_name_or_path"),JKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HAe=a("code"),YKr=o("pretrained_model_name_or_path"),KKr=o(":"),ZKr=l(),X$=a("ul"),c6=a("li"),UAe=a("strong"),eZr=o("beit"),oZr=o(" \u2014 "),qoe=a("a"),rZr=o("FlaxBeitForImageClassification"),tZr=o(" (BEiT model)"),aZr=l(),m6=a("li"),JAe=a("strong"),nZr=o("vit"),sZr=o(" \u2014 "),joe=a("a"),lZr=o("FlaxViTForImageClassification"),iZr=o(" (ViT model)"),dZr=l(),F(f6.$$.fragment),PXe=l(),Cm=a("h2"),g6=a("a"),YAe=a("span"),F(z$.$$.fragment),cZr=l(),KAe=a("span"),mZr=o("FlaxAutoModelForVision2Seq"),BXe=l(),wr=a("div"),F(Q$.$$.fragment),fZr=l(),wm=a("p"),gZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Doe=a("a"),hZr=o("from_pretrained()"),uZr=o(" class method or the "),Goe=a("a"),pZr=o("from_config()"),_Zr=o(` class
method.`),bZr=l(),W$=a("p"),vZr=o("This class cannot be instantiated directly using "),ZAe=a("code"),FZr=o("__init__()"),TZr=o(" (throws an error)."),MZr=l(),ra=a("div"),F(H$.$$.fragment),EZr=l(),e6e=a("p"),CZr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wZr=l(),Am=a("p"),AZr=o(`Note:
Loading a model from its configuration file does `),o6e=a("strong"),LZr=o("not"),yZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=a("a"),xZr=o("from_pretrained()"),$Zr=o(" to load the model weights."),kZr=l(),F(h6.$$.fragment),SZr=l(),Zr=a("div"),F(U$.$$.fragment),RZr=l(),r6e=a("p"),PZr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BZr=l(),kn=a("p"),IZr=o("The model class to instantiate is selected based on the "),t6e=a("code"),NZr=o("model_type"),qZr=o(` property of the config object (either
passed as an argument or loaded from `),a6e=a("code"),jZr=o("pretrained_model_name_or_path"),DZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=a("code"),GZr=o("pretrained_model_name_or_path"),OZr=o(":"),VZr=l(),s6e=a("ul"),u6=a("li"),l6e=a("strong"),XZr=o("vision-encoder-decoder"),zZr=o(" \u2014 "),Voe=a("a"),QZr=o("FlaxVisionEncoderDecoderModel"),WZr=o(" (Vision Encoder decoder model)"),HZr=l(),F(p6.$$.fragment),this.h()},l(m){const _=VOt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var J$=s(u);f=n(J$,"A",{id:!0,class:!0,href:!0});var i6e=s(f);p=n(i6e,"SPAN",{});var d6e=s(p);T(d.$$.fragment,d6e),d6e.forEach(t),i6e.forEach(t),h=i(J$),Eo=n(J$,"SPAN",{});var c6e=s(Eo);Ci=r(c6e,"Auto Classes"),c6e.forEach(t),J$.forEach(t),$m=i(m),nt=n(m,"P",{});var Y$=s(nt);wi=r(Y$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ai=n(Y$,"CODE",{});var m6e=s(Ai);I7=r(m6e,"from_pretrained()"),m6e.forEach(t),km=r(Y$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Y$.forEach(t),Oe=i(m),Qe=n(m,"P",{});var Sn=s(Qe);Li=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var f6e=s(Rn);N7=r(f6e,"AutoConfig"),f6e.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var g6e=s(Bn);q7=r(g6e,"AutoModel"),g6e.forEach(t),yi=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var h6e=s(In);j7=r(h6e,"AutoTokenizer"),h6e.forEach(t),xi=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),Sm=i(m),T($a.$$.fragment,m),We=i(m),Ae=n(m,"P",{});var K$=s(Ae);uS=r(K$,"will create a model that is an instance of "),$i=n(K$,"A",{href:!0});var u6e=s($i);pS=r(u6e,"BertModel"),u6e.forEach(t),_S=r(K$,"."),K$.forEach(t),Co=i(m),ka=n(m,"P",{});var Z$=s(ka);bS=r(Z$,"There is one class of "),Rm=n(Z$,"CODE",{});var p6e=s(Rm);vS=r(p6e,"AutoModel"),p6e.forEach(t),QQe=r(Z$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Z$.forEach(t),kOe=i(m),ki=n(m,"H2",{class:!0});var ek=s(ki);Pm=n(ek,"A",{id:!0,class:!0,href:!0});var _6e=s(Pm);qte=n(_6e,"SPAN",{});var b6e=s(qte);T(D7.$$.fragment,b6e),b6e.forEach(t),_6e.forEach(t),WQe=i(ek),jte=n(ek,"SPAN",{});var v6e=s(jte);HQe=r(v6e,"Extending the Auto Classes"),v6e.forEach(t),ek.forEach(t),SOe=i(m),Nn=n(m,"P",{});var Lm=s(Nn);UQe=r(Lm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Dte=n(Lm,"CODE",{});var F6e=s(Dte);JQe=r(F6e,"NewModel"),F6e.forEach(t),YQe=r(Lm,", make sure you have a "),Gte=n(Lm,"CODE",{});var T6e=s(Gte);KQe=r(T6e,"NewModelConfig"),T6e.forEach(t),ZQe=r(Lm,` then you can add those to the auto
classes like this:`),Lm.forEach(t),ROe=i(m),T(G7.$$.fragment,m),POe=i(m),FS=n(m,"P",{});var M6e=s(FS);eWe=r(M6e,"You will then be able to use the auto classes like you would usually do!"),M6e.forEach(t),BOe=i(m),T(Bm.$$.fragment,m),IOe=i(m),Si=n(m,"H2",{class:!0});var ok=s(Si);Im=n(ok,"A",{id:!0,class:!0,href:!0});var E6e=s(Im);Ote=n(E6e,"SPAN",{});var C6e=s(Ote);T(O7.$$.fragment,C6e),C6e.forEach(t),E6e.forEach(t),oWe=i(ok),Vte=n(ok,"SPAN",{});var w6e=s(Vte);rWe=r(w6e,"AutoConfig"),w6e.forEach(t),ok.forEach(t),NOe=i(m),wo=n(m,"DIV",{class:!0});var tt=s(wo);T(V7.$$.fragment,tt),tWe=i(tt),X7=n(tt,"P",{});var rk=s(X7);aWe=r(rk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),TS=n(rk,"A",{href:!0});var A6e=s(TS);nWe=r(A6e,"from_pretrained()"),A6e.forEach(t),sWe=r(rk," class method."),rk.forEach(t),lWe=i(tt),z7=n(tt,"P",{});var tk=s(z7);iWe=r(tk,"This class cannot be instantiated directly using "),Xte=n(tk,"CODE",{});var L6e=s(Xte);dWe=r(L6e,"__init__()"),L6e.forEach(t),cWe=r(tk," (throws an error)."),tk.forEach(t),mWe=i(tt),Ar=n(tt,"DIV",{class:!0});var at=s(Ar);T(Q7.$$.fragment,at),fWe=i(at),zte=n(at,"P",{});var y6e=s(zte);gWe=r(y6e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),y6e.forEach(t),hWe=i(at),Ri=n(at,"P",{});var ym=s(Ri);uWe=r(ym,"The configuration class to instantiate is selected based on the "),Qte=n(ym,"CODE",{});var x6e=s(Qte);pWe=r(x6e,"model_type"),x6e.forEach(t),_We=r(ym,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Wte=n(ym,"CODE",{});var $6e=s(Wte);bWe=r($6e,"pretrained_model_name_or_path"),$6e.forEach(t),vWe=r(ym,":"),ym.forEach(t),FWe=i(at),A=n(at,"UL",{});var L=s(A);Nm=n(L,"LI",{});var _6=s(Nm);Hte=n(_6,"STRONG",{});var k6e=s(Hte);TWe=r(k6e,"albert"),k6e.forEach(t),MWe=r(_6," \u2014 "),MS=n(_6,"A",{href:!0});var S6e=s(MS);EWe=r(S6e,"AlbertConfig"),S6e.forEach(t),CWe=r(_6," (ALBERT model)"),_6.forEach(t),wWe=i(L),qm=n(L,"LI",{});var b6=s(qm);Ute=n(b6,"STRONG",{});var R6e=s(Ute);AWe=r(R6e,"bart"),R6e.forEach(t),LWe=r(b6," \u2014 "),ES=n(b6,"A",{href:!0});var P6e=s(ES);yWe=r(P6e,"BartConfig"),P6e.forEach(t),xWe=r(b6," (BART model)"),b6.forEach(t),$We=i(L),jm=n(L,"LI",{});var v6=s(jm);Jte=n(v6,"STRONG",{});var B6e=s(Jte);kWe=r(B6e,"beit"),B6e.forEach(t),SWe=r(v6," \u2014 "),CS=n(v6,"A",{href:!0});var I6e=s(CS);RWe=r(I6e,"BeitConfig"),I6e.forEach(t),PWe=r(v6," (BEiT model)"),v6.forEach(t),BWe=i(L),Dm=n(L,"LI",{});var F6=s(Dm);Yte=n(F6,"STRONG",{});var N6e=s(Yte);IWe=r(N6e,"bert"),N6e.forEach(t),NWe=r(F6," \u2014 "),wS=n(F6,"A",{href:!0});var q6e=s(wS);qWe=r(q6e,"BertConfig"),q6e.forEach(t),jWe=r(F6," (BERT model)"),F6.forEach(t),DWe=i(L),Gm=n(L,"LI",{});var T6=s(Gm);Kte=n(T6,"STRONG",{});var j6e=s(Kte);GWe=r(j6e,"bert-generation"),j6e.forEach(t),OWe=r(T6," \u2014 "),AS=n(T6,"A",{href:!0});var D6e=s(AS);VWe=r(D6e,"BertGenerationConfig"),D6e.forEach(t),XWe=r(T6," (Bert Generation model)"),T6.forEach(t),zWe=i(L),Om=n(L,"LI",{});var M6=s(Om);Zte=n(M6,"STRONG",{});var G6e=s(Zte);QWe=r(G6e,"big_bird"),G6e.forEach(t),WWe=r(M6," \u2014 "),LS=n(M6,"A",{href:!0});var O6e=s(LS);HWe=r(O6e,"BigBirdConfig"),O6e.forEach(t),UWe=r(M6," (BigBird model)"),M6.forEach(t),JWe=i(L),Vm=n(L,"LI",{});var E6=s(Vm);eae=n(E6,"STRONG",{});var V6e=s(eae);YWe=r(V6e,"bigbird_pegasus"),V6e.forEach(t),KWe=r(E6," \u2014 "),yS=n(E6,"A",{href:!0});var X6e=s(yS);ZWe=r(X6e,"BigBirdPegasusConfig"),X6e.forEach(t),eHe=r(E6," (BigBird-Pegasus model)"),E6.forEach(t),oHe=i(L),Xm=n(L,"LI",{});var C6=s(Xm);oae=n(C6,"STRONG",{});var z6e=s(oae);rHe=r(z6e,"blenderbot"),z6e.forEach(t),tHe=r(C6," \u2014 "),xS=n(C6,"A",{href:!0});var Q6e=s(xS);aHe=r(Q6e,"BlenderbotConfig"),Q6e.forEach(t),nHe=r(C6," (Blenderbot model)"),C6.forEach(t),sHe=i(L),zm=n(L,"LI",{});var w6=s(zm);rae=n(w6,"STRONG",{});var W6e=s(rae);lHe=r(W6e,"blenderbot-small"),W6e.forEach(t),iHe=r(w6," \u2014 "),$S=n(w6,"A",{href:!0});var H6e=s($S);dHe=r(H6e,"BlenderbotSmallConfig"),H6e.forEach(t),cHe=r(w6," (BlenderbotSmall model)"),w6.forEach(t),mHe=i(L),Qm=n(L,"LI",{});var A6=s(Qm);tae=n(A6,"STRONG",{});var U6e=s(tae);fHe=r(U6e,"bloom"),U6e.forEach(t),gHe=r(A6," \u2014 "),kS=n(A6,"A",{href:!0});var J6e=s(kS);hHe=r(J6e,"BloomConfig"),J6e.forEach(t),uHe=r(A6," (BLOOM model)"),A6.forEach(t),pHe=i(L),Wm=n(L,"LI",{});var L6=s(Wm);aae=n(L6,"STRONG",{});var Y6e=s(aae);_He=r(Y6e,"camembert"),Y6e.forEach(t),bHe=r(L6," \u2014 "),SS=n(L6,"A",{href:!0});var K6e=s(SS);vHe=r(K6e,"CamembertConfig"),K6e.forEach(t),FHe=r(L6," (CamemBERT model)"),L6.forEach(t),THe=i(L),Hm=n(L,"LI",{});var y6=s(Hm);nae=n(y6,"STRONG",{});var Z6e=s(nae);MHe=r(Z6e,"canine"),Z6e.forEach(t),EHe=r(y6," \u2014 "),RS=n(y6,"A",{href:!0});var eLe=s(RS);CHe=r(eLe,"CanineConfig"),eLe.forEach(t),wHe=r(y6," (CANINE model)"),y6.forEach(t),AHe=i(L),Um=n(L,"LI",{});var x6=s(Um);sae=n(x6,"STRONG",{});var oLe=s(sae);LHe=r(oLe,"clip"),oLe.forEach(t),yHe=r(x6," \u2014 "),PS=n(x6,"A",{href:!0});var rLe=s(PS);xHe=r(rLe,"CLIPConfig"),rLe.forEach(t),$He=r(x6," (CLIP model)"),x6.forEach(t),kHe=i(L),Jm=n(L,"LI",{});var $6=s(Jm);lae=n($6,"STRONG",{});var tLe=s(lae);SHe=r(tLe,"codegen"),tLe.forEach(t),RHe=r($6," \u2014 "),BS=n($6,"A",{href:!0});var aLe=s(BS);PHe=r(aLe,"CodeGenConfig"),aLe.forEach(t),BHe=r($6," (CodeGen model)"),$6.forEach(t),IHe=i(L),Ym=n(L,"LI",{});var k6=s(Ym);iae=n(k6,"STRONG",{});var nLe=s(iae);NHe=r(nLe,"convbert"),nLe.forEach(t),qHe=r(k6," \u2014 "),IS=n(k6,"A",{href:!0});var sLe=s(IS);jHe=r(sLe,"ConvBertConfig"),sLe.forEach(t),DHe=r(k6," (ConvBERT model)"),k6.forEach(t),GHe=i(L),Km=n(L,"LI",{});var S6=s(Km);dae=n(S6,"STRONG",{});var lLe=s(dae);OHe=r(lLe,"convnext"),lLe.forEach(t),VHe=r(S6," \u2014 "),NS=n(S6,"A",{href:!0});var iLe=s(NS);XHe=r(iLe,"ConvNextConfig"),iLe.forEach(t),zHe=r(S6," (ConvNeXT model)"),S6.forEach(t),QHe=i(L),Zm=n(L,"LI",{});var R6=s(Zm);cae=n(R6,"STRONG",{});var dLe=s(cae);WHe=r(dLe,"ctrl"),dLe.forEach(t),HHe=r(R6," \u2014 "),qS=n(R6,"A",{href:!0});var cLe=s(qS);UHe=r(cLe,"CTRLConfig"),cLe.forEach(t),JHe=r(R6," (CTRL model)"),R6.forEach(t),YHe=i(L),ef=n(L,"LI",{});var P6=s(ef);mae=n(P6,"STRONG",{});var mLe=s(mae);KHe=r(mLe,"cvt"),mLe.forEach(t),ZHe=r(P6," \u2014 "),jS=n(P6,"A",{href:!0});var fLe=s(jS);eUe=r(fLe,"CvtConfig"),fLe.forEach(t),oUe=r(P6," (CvT model)"),P6.forEach(t),rUe=i(L),of=n(L,"LI",{});var B6=s(of);fae=n(B6,"STRONG",{});var gLe=s(fae);tUe=r(gLe,"data2vec-audio"),gLe.forEach(t),aUe=r(B6," \u2014 "),DS=n(B6,"A",{href:!0});var hLe=s(DS);nUe=r(hLe,"Data2VecAudioConfig"),hLe.forEach(t),sUe=r(B6," (Data2VecAudio model)"),B6.forEach(t),lUe=i(L),rf=n(L,"LI",{});var I6=s(rf);gae=n(I6,"STRONG",{});var uLe=s(gae);iUe=r(uLe,"data2vec-text"),uLe.forEach(t),dUe=r(I6," \u2014 "),GS=n(I6,"A",{href:!0});var pLe=s(GS);cUe=r(pLe,"Data2VecTextConfig"),pLe.forEach(t),mUe=r(I6," (Data2VecText model)"),I6.forEach(t),fUe=i(L),tf=n(L,"LI",{});var N6=s(tf);hae=n(N6,"STRONG",{});var _Le=s(hae);gUe=r(_Le,"data2vec-vision"),_Le.forEach(t),hUe=r(N6," \u2014 "),OS=n(N6,"A",{href:!0});var bLe=s(OS);uUe=r(bLe,"Data2VecVisionConfig"),bLe.forEach(t),pUe=r(N6," (Data2VecVision model)"),N6.forEach(t),_Ue=i(L),af=n(L,"LI",{});var q6=s(af);uae=n(q6,"STRONG",{});var vLe=s(uae);bUe=r(vLe,"deberta"),vLe.forEach(t),vUe=r(q6," \u2014 "),VS=n(q6,"A",{href:!0});var FLe=s(VS);FUe=r(FLe,"DebertaConfig"),FLe.forEach(t),TUe=r(q6," (DeBERTa model)"),q6.forEach(t),MUe=i(L),nf=n(L,"LI",{});var j6=s(nf);pae=n(j6,"STRONG",{});var TLe=s(pae);EUe=r(TLe,"deberta-v2"),TLe.forEach(t),CUe=r(j6," \u2014 "),XS=n(j6,"A",{href:!0});var MLe=s(XS);wUe=r(MLe,"DebertaV2Config"),MLe.forEach(t),AUe=r(j6," (DeBERTa-v2 model)"),j6.forEach(t),LUe=i(L),sf=n(L,"LI",{});var D6=s(sf);_ae=n(D6,"STRONG",{});var JZr=s(_ae);yUe=r(JZr,"decision_transformer"),JZr.forEach(t),xUe=r(D6," \u2014 "),zS=n(D6,"A",{href:!0});var YZr=s(zS);$Ue=r(YZr,"DecisionTransformerConfig"),YZr.forEach(t),kUe=r(D6," (Decision Transformer model)"),D6.forEach(t),SUe=i(L),lf=n(L,"LI",{});var ELe=s(lf);bae=n(ELe,"STRONG",{});var KZr=s(bae);RUe=r(KZr,"deit"),KZr.forEach(t),PUe=r(ELe," \u2014 "),QS=n(ELe,"A",{href:!0});var ZZr=s(QS);BUe=r(ZZr,"DeiTConfig"),ZZr.forEach(t),IUe=r(ELe," (DeiT model)"),ELe.forEach(t),NUe=i(L),df=n(L,"LI",{});var CLe=s(df);vae=n(CLe,"STRONG",{});var eet=s(vae);qUe=r(eet,"detr"),eet.forEach(t),jUe=r(CLe," \u2014 "),WS=n(CLe,"A",{href:!0});var oet=s(WS);DUe=r(oet,"DetrConfig"),oet.forEach(t),GUe=r(CLe," (DETR model)"),CLe.forEach(t),OUe=i(L),cf=n(L,"LI",{});var wLe=s(cf);Fae=n(wLe,"STRONG",{});var ret=s(Fae);VUe=r(ret,"distilbert"),ret.forEach(t),XUe=r(wLe," \u2014 "),HS=n(wLe,"A",{href:!0});var tet=s(HS);zUe=r(tet,"DistilBertConfig"),tet.forEach(t),QUe=r(wLe," (DistilBERT model)"),wLe.forEach(t),WUe=i(L),mf=n(L,"LI",{});var ALe=s(mf);Tae=n(ALe,"STRONG",{});var aet=s(Tae);HUe=r(aet,"dpr"),aet.forEach(t),UUe=r(ALe," \u2014 "),US=n(ALe,"A",{href:!0});var net=s(US);JUe=r(net,"DPRConfig"),net.forEach(t),YUe=r(ALe," (DPR model)"),ALe.forEach(t),KUe=i(L),ff=n(L,"LI",{});var LLe=s(ff);Mae=n(LLe,"STRONG",{});var set=s(Mae);ZUe=r(set,"dpt"),set.forEach(t),eJe=r(LLe," \u2014 "),JS=n(LLe,"A",{href:!0});var iet=s(JS);oJe=r(iet,"DPTConfig"),iet.forEach(t),rJe=r(LLe," (DPT model)"),LLe.forEach(t),tJe=i(L),gf=n(L,"LI",{});var yLe=s(gf);Eae=n(yLe,"STRONG",{});var det=s(Eae);aJe=r(det,"electra"),det.forEach(t),nJe=r(yLe," \u2014 "),YS=n(yLe,"A",{href:!0});var cet=s(YS);sJe=r(cet,"ElectraConfig"),cet.forEach(t),lJe=r(yLe," (ELECTRA model)"),yLe.forEach(t),iJe=i(L),hf=n(L,"LI",{});var xLe=s(hf);Cae=n(xLe,"STRONG",{});var met=s(Cae);dJe=r(met,"encoder-decoder"),met.forEach(t),cJe=r(xLe," \u2014 "),KS=n(xLe,"A",{href:!0});var fet=s(KS);mJe=r(fet,"EncoderDecoderConfig"),fet.forEach(t),fJe=r(xLe," (Encoder decoder model)"),xLe.forEach(t),gJe=i(L),uf=n(L,"LI",{});var $Le=s(uf);wae=n($Le,"STRONG",{});var get=s(wae);hJe=r(get,"flaubert"),get.forEach(t),uJe=r($Le," \u2014 "),ZS=n($Le,"A",{href:!0});var het=s(ZS);pJe=r(het,"FlaubertConfig"),het.forEach(t),_Je=r($Le," (FlauBERT model)"),$Le.forEach(t),bJe=i(L),pf=n(L,"LI",{});var kLe=s(pf);Aae=n(kLe,"STRONG",{});var uet=s(Aae);vJe=r(uet,"flava"),uet.forEach(t),FJe=r(kLe," \u2014 "),eR=n(kLe,"A",{href:!0});var pet=s(eR);TJe=r(pet,"FlavaConfig"),pet.forEach(t),MJe=r(kLe," (FLAVA model)"),kLe.forEach(t),EJe=i(L),_f=n(L,"LI",{});var SLe=s(_f);Lae=n(SLe,"STRONG",{});var _et=s(Lae);CJe=r(_et,"fnet"),_et.forEach(t),wJe=r(SLe," \u2014 "),oR=n(SLe,"A",{href:!0});var bet=s(oR);AJe=r(bet,"FNetConfig"),bet.forEach(t),LJe=r(SLe," (FNet model)"),SLe.forEach(t),yJe=i(L),bf=n(L,"LI",{});var RLe=s(bf);yae=n(RLe,"STRONG",{});var vet=s(yae);xJe=r(vet,"fsmt"),vet.forEach(t),$Je=r(RLe," \u2014 "),rR=n(RLe,"A",{href:!0});var Fet=s(rR);kJe=r(Fet,"FSMTConfig"),Fet.forEach(t),SJe=r(RLe," (FairSeq Machine-Translation model)"),RLe.forEach(t),RJe=i(L),vf=n(L,"LI",{});var PLe=s(vf);xae=n(PLe,"STRONG",{});var Tet=s(xae);PJe=r(Tet,"funnel"),Tet.forEach(t),BJe=r(PLe," \u2014 "),tR=n(PLe,"A",{href:!0});var Met=s(tR);IJe=r(Met,"FunnelConfig"),Met.forEach(t),NJe=r(PLe," (Funnel Transformer model)"),PLe.forEach(t),qJe=i(L),Ff=n(L,"LI",{});var BLe=s(Ff);$ae=n(BLe,"STRONG",{});var Eet=s($ae);jJe=r(Eet,"glpn"),Eet.forEach(t),DJe=r(BLe," \u2014 "),aR=n(BLe,"A",{href:!0});var Cet=s(aR);GJe=r(Cet,"GLPNConfig"),Cet.forEach(t),OJe=r(BLe," (GLPN model)"),BLe.forEach(t),VJe=i(L),Tf=n(L,"LI",{});var ILe=s(Tf);kae=n(ILe,"STRONG",{});var wet=s(kae);XJe=r(wet,"gpt2"),wet.forEach(t),zJe=r(ILe," \u2014 "),nR=n(ILe,"A",{href:!0});var Aet=s(nR);QJe=r(Aet,"GPT2Config"),Aet.forEach(t),WJe=r(ILe," (OpenAI GPT-2 model)"),ILe.forEach(t),HJe=i(L),Mf=n(L,"LI",{});var NLe=s(Mf);Sae=n(NLe,"STRONG",{});var Let=s(Sae);UJe=r(Let,"gpt_neo"),Let.forEach(t),JJe=r(NLe," \u2014 "),sR=n(NLe,"A",{href:!0});var yet=s(sR);YJe=r(yet,"GPTNeoConfig"),yet.forEach(t),KJe=r(NLe," (GPT Neo model)"),NLe.forEach(t),ZJe=i(L),Ef=n(L,"LI",{});var qLe=s(Ef);Rae=n(qLe,"STRONG",{});var xet=s(Rae);eYe=r(xet,"gpt_neox"),xet.forEach(t),oYe=r(qLe," \u2014 "),lR=n(qLe,"A",{href:!0});var $et=s(lR);rYe=r($et,"GPTNeoXConfig"),$et.forEach(t),tYe=r(qLe," (GPT NeoX model)"),qLe.forEach(t),aYe=i(L),Cf=n(L,"LI",{});var jLe=s(Cf);Pae=n(jLe,"STRONG",{});var ket=s(Pae);nYe=r(ket,"gptj"),ket.forEach(t),sYe=r(jLe," \u2014 "),iR=n(jLe,"A",{href:!0});var Set=s(iR);lYe=r(Set,"GPTJConfig"),Set.forEach(t),iYe=r(jLe," (GPT-J model)"),jLe.forEach(t),dYe=i(L),wf=n(L,"LI",{});var DLe=s(wf);Bae=n(DLe,"STRONG",{});var Ret=s(Bae);cYe=r(Ret,"groupvit"),Ret.forEach(t),mYe=r(DLe," \u2014 "),dR=n(DLe,"A",{href:!0});var Pet=s(dR);fYe=r(Pet,"GroupViTConfig"),Pet.forEach(t),gYe=r(DLe," (GroupViT model)"),DLe.forEach(t),hYe=i(L),Af=n(L,"LI",{});var GLe=s(Af);Iae=n(GLe,"STRONG",{});var Bet=s(Iae);uYe=r(Bet,"hubert"),Bet.forEach(t),pYe=r(GLe," \u2014 "),cR=n(GLe,"A",{href:!0});var Iet=s(cR);_Ye=r(Iet,"HubertConfig"),Iet.forEach(t),bYe=r(GLe," (Hubert model)"),GLe.forEach(t),vYe=i(L),Lf=n(L,"LI",{});var OLe=s(Lf);Nae=n(OLe,"STRONG",{});var Net=s(Nae);FYe=r(Net,"ibert"),Net.forEach(t),TYe=r(OLe," \u2014 "),mR=n(OLe,"A",{href:!0});var qet=s(mR);MYe=r(qet,"IBertConfig"),qet.forEach(t),EYe=r(OLe," (I-BERT model)"),OLe.forEach(t),CYe=i(L),yf=n(L,"LI",{});var VLe=s(yf);qae=n(VLe,"STRONG",{});var jet=s(qae);wYe=r(jet,"imagegpt"),jet.forEach(t),AYe=r(VLe," \u2014 "),fR=n(VLe,"A",{href:!0});var Det=s(fR);LYe=r(Det,"ImageGPTConfig"),Det.forEach(t),yYe=r(VLe," (ImageGPT model)"),VLe.forEach(t),xYe=i(L),xf=n(L,"LI",{});var XLe=s(xf);jae=n(XLe,"STRONG",{});var Get=s(jae);$Ye=r(Get,"layoutlm"),Get.forEach(t),kYe=r(XLe," \u2014 "),gR=n(XLe,"A",{href:!0});var Oet=s(gR);SYe=r(Oet,"LayoutLMConfig"),Oet.forEach(t),RYe=r(XLe," (LayoutLM model)"),XLe.forEach(t),PYe=i(L),$f=n(L,"LI",{});var zLe=s($f);Dae=n(zLe,"STRONG",{});var Vet=s(Dae);BYe=r(Vet,"layoutlmv2"),Vet.forEach(t),IYe=r(zLe," \u2014 "),hR=n(zLe,"A",{href:!0});var Xet=s(hR);NYe=r(Xet,"LayoutLMv2Config"),Xet.forEach(t),qYe=r(zLe," (LayoutLMv2 model)"),zLe.forEach(t),jYe=i(L),kf=n(L,"LI",{});var QLe=s(kf);Gae=n(QLe,"STRONG",{});var zet=s(Gae);DYe=r(zet,"layoutlmv3"),zet.forEach(t),GYe=r(QLe," \u2014 "),uR=n(QLe,"A",{href:!0});var Qet=s(uR);OYe=r(Qet,"LayoutLMv3Config"),Qet.forEach(t),VYe=r(QLe," (LayoutLMv3 model)"),QLe.forEach(t),XYe=i(L),Sf=n(L,"LI",{});var WLe=s(Sf);Oae=n(WLe,"STRONG",{});var Wet=s(Oae);zYe=r(Wet,"led"),Wet.forEach(t),QYe=r(WLe," \u2014 "),pR=n(WLe,"A",{href:!0});var Het=s(pR);WYe=r(Het,"LEDConfig"),Het.forEach(t),HYe=r(WLe," (LED model)"),WLe.forEach(t),UYe=i(L),Rf=n(L,"LI",{});var HLe=s(Rf);Vae=n(HLe,"STRONG",{});var Uet=s(Vae);JYe=r(Uet,"levit"),Uet.forEach(t),YYe=r(HLe," \u2014 "),_R=n(HLe,"A",{href:!0});var Jet=s(_R);KYe=r(Jet,"LevitConfig"),Jet.forEach(t),ZYe=r(HLe," (LeViT model)"),HLe.forEach(t),eKe=i(L),Pf=n(L,"LI",{});var ULe=s(Pf);Xae=n(ULe,"STRONG",{});var Yet=s(Xae);oKe=r(Yet,"longformer"),Yet.forEach(t),rKe=r(ULe," \u2014 "),bR=n(ULe,"A",{href:!0});var Ket=s(bR);tKe=r(Ket,"LongformerConfig"),Ket.forEach(t),aKe=r(ULe," (Longformer model)"),ULe.forEach(t),nKe=i(L),Bf=n(L,"LI",{});var JLe=s(Bf);zae=n(JLe,"STRONG",{});var Zet=s(zae);sKe=r(Zet,"longt5"),Zet.forEach(t),lKe=r(JLe," \u2014 "),vR=n(JLe,"A",{href:!0});var eot=s(vR);iKe=r(eot,"LongT5Config"),eot.forEach(t),dKe=r(JLe," (LongT5 model)"),JLe.forEach(t),cKe=i(L),If=n(L,"LI",{});var YLe=s(If);Qae=n(YLe,"STRONG",{});var oot=s(Qae);mKe=r(oot,"luke"),oot.forEach(t),fKe=r(YLe," \u2014 "),FR=n(YLe,"A",{href:!0});var rot=s(FR);gKe=r(rot,"LukeConfig"),rot.forEach(t),hKe=r(YLe," (LUKE model)"),YLe.forEach(t),uKe=i(L),Nf=n(L,"LI",{});var KLe=s(Nf);Wae=n(KLe,"STRONG",{});var tot=s(Wae);pKe=r(tot,"lxmert"),tot.forEach(t),_Ke=r(KLe," \u2014 "),TR=n(KLe,"A",{href:!0});var aot=s(TR);bKe=r(aot,"LxmertConfig"),aot.forEach(t),vKe=r(KLe," (LXMERT model)"),KLe.forEach(t),FKe=i(L),qf=n(L,"LI",{});var ZLe=s(qf);Hae=n(ZLe,"STRONG",{});var not=s(Hae);TKe=r(not,"m2m_100"),not.forEach(t),MKe=r(ZLe," \u2014 "),MR=n(ZLe,"A",{href:!0});var sot=s(MR);EKe=r(sot,"M2M100Config"),sot.forEach(t),CKe=r(ZLe," (M2M100 model)"),ZLe.forEach(t),wKe=i(L),jf=n(L,"LI",{});var e7e=s(jf);Uae=n(e7e,"STRONG",{});var lot=s(Uae);AKe=r(lot,"marian"),lot.forEach(t),LKe=r(e7e," \u2014 "),ER=n(e7e,"A",{href:!0});var iot=s(ER);yKe=r(iot,"MarianConfig"),iot.forEach(t),xKe=r(e7e," (Marian model)"),e7e.forEach(t),$Ke=i(L),Df=n(L,"LI",{});var o7e=s(Df);Jae=n(o7e,"STRONG",{});var dot=s(Jae);kKe=r(dot,"maskformer"),dot.forEach(t),SKe=r(o7e," \u2014 "),CR=n(o7e,"A",{href:!0});var cot=s(CR);RKe=r(cot,"MaskFormerConfig"),cot.forEach(t),PKe=r(o7e," (MaskFormer model)"),o7e.forEach(t),BKe=i(L),Gf=n(L,"LI",{});var r7e=s(Gf);Yae=n(r7e,"STRONG",{});var mot=s(Yae);IKe=r(mot,"mbart"),mot.forEach(t),NKe=r(r7e," \u2014 "),wR=n(r7e,"A",{href:!0});var fot=s(wR);qKe=r(fot,"MBartConfig"),fot.forEach(t),jKe=r(r7e," (mBART model)"),r7e.forEach(t),DKe=i(L),Of=n(L,"LI",{});var t7e=s(Of);Kae=n(t7e,"STRONG",{});var got=s(Kae);GKe=r(got,"mctct"),got.forEach(t),OKe=r(t7e," \u2014 "),AR=n(t7e,"A",{href:!0});var hot=s(AR);VKe=r(hot,"MCTCTConfig"),hot.forEach(t),XKe=r(t7e," (M-CTC-T model)"),t7e.forEach(t),zKe=i(L),Vf=n(L,"LI",{});var a7e=s(Vf);Zae=n(a7e,"STRONG",{});var uot=s(Zae);QKe=r(uot,"megatron-bert"),uot.forEach(t),WKe=r(a7e," \u2014 "),LR=n(a7e,"A",{href:!0});var pot=s(LR);HKe=r(pot,"MegatronBertConfig"),pot.forEach(t),UKe=r(a7e," (Megatron-BERT model)"),a7e.forEach(t),JKe=i(L),Xf=n(L,"LI",{});var n7e=s(Xf);ene=n(n7e,"STRONG",{});var _ot=s(ene);YKe=r(_ot,"mobilebert"),_ot.forEach(t),KKe=r(n7e," \u2014 "),yR=n(n7e,"A",{href:!0});var bot=s(yR);ZKe=r(bot,"MobileBertConfig"),bot.forEach(t),eZe=r(n7e," (MobileBERT model)"),n7e.forEach(t),oZe=i(L),zf=n(L,"LI",{});var s7e=s(zf);one=n(s7e,"STRONG",{});var vot=s(one);rZe=r(vot,"mpnet"),vot.forEach(t),tZe=r(s7e," \u2014 "),xR=n(s7e,"A",{href:!0});var Fot=s(xR);aZe=r(Fot,"MPNetConfig"),Fot.forEach(t),nZe=r(s7e," (MPNet model)"),s7e.forEach(t),sZe=i(L),Qf=n(L,"LI",{});var l7e=s(Qf);rne=n(l7e,"STRONG",{});var Tot=s(rne);lZe=r(Tot,"mt5"),Tot.forEach(t),iZe=r(l7e," \u2014 "),$R=n(l7e,"A",{href:!0});var Mot=s($R);dZe=r(Mot,"MT5Config"),Mot.forEach(t),cZe=r(l7e," (MT5 model)"),l7e.forEach(t),mZe=i(L),Wf=n(L,"LI",{});var i7e=s(Wf);tne=n(i7e,"STRONG",{});var Eot=s(tne);fZe=r(Eot,"nezha"),Eot.forEach(t),gZe=r(i7e," \u2014 "),kR=n(i7e,"A",{href:!0});var Cot=s(kR);hZe=r(Cot,"NezhaConfig"),Cot.forEach(t),uZe=r(i7e," (Nezha model)"),i7e.forEach(t),pZe=i(L),Hf=n(L,"LI",{});var d7e=s(Hf);ane=n(d7e,"STRONG",{});var wot=s(ane);_Ze=r(wot,"nystromformer"),wot.forEach(t),bZe=r(d7e," \u2014 "),SR=n(d7e,"A",{href:!0});var Aot=s(SR);vZe=r(Aot,"NystromformerConfig"),Aot.forEach(t),FZe=r(d7e," (Nystr\xF6mformer model)"),d7e.forEach(t),TZe=i(L),Uf=n(L,"LI",{});var c7e=s(Uf);nne=n(c7e,"STRONG",{});var Lot=s(nne);MZe=r(Lot,"openai-gpt"),Lot.forEach(t),EZe=r(c7e," \u2014 "),RR=n(c7e,"A",{href:!0});var yot=s(RR);CZe=r(yot,"OpenAIGPTConfig"),yot.forEach(t),wZe=r(c7e," (OpenAI GPT model)"),c7e.forEach(t),AZe=i(L),Jf=n(L,"LI",{});var m7e=s(Jf);sne=n(m7e,"STRONG",{});var xot=s(sne);LZe=r(xot,"opt"),xot.forEach(t),yZe=r(m7e," \u2014 "),PR=n(m7e,"A",{href:!0});var $ot=s(PR);xZe=r($ot,"OPTConfig"),$ot.forEach(t),$Ze=r(m7e," (OPT model)"),m7e.forEach(t),kZe=i(L),Yf=n(L,"LI",{});var f7e=s(Yf);lne=n(f7e,"STRONG",{});var kot=s(lne);SZe=r(kot,"pegasus"),kot.forEach(t),RZe=r(f7e," \u2014 "),BR=n(f7e,"A",{href:!0});var Sot=s(BR);PZe=r(Sot,"PegasusConfig"),Sot.forEach(t),BZe=r(f7e," (Pegasus model)"),f7e.forEach(t),IZe=i(L),Kf=n(L,"LI",{});var g7e=s(Kf);ine=n(g7e,"STRONG",{});var Rot=s(ine);NZe=r(Rot,"perceiver"),Rot.forEach(t),qZe=r(g7e," \u2014 "),IR=n(g7e,"A",{href:!0});var Pot=s(IR);jZe=r(Pot,"PerceiverConfig"),Pot.forEach(t),DZe=r(g7e," (Perceiver model)"),g7e.forEach(t),GZe=i(L),Zf=n(L,"LI",{});var h7e=s(Zf);dne=n(h7e,"STRONG",{});var Bot=s(dne);OZe=r(Bot,"plbart"),Bot.forEach(t),VZe=r(h7e," \u2014 "),NR=n(h7e,"A",{href:!0});var Iot=s(NR);XZe=r(Iot,"PLBartConfig"),Iot.forEach(t),zZe=r(h7e," (PLBart model)"),h7e.forEach(t),QZe=i(L),eg=n(L,"LI",{});var u7e=s(eg);cne=n(u7e,"STRONG",{});var Not=s(cne);WZe=r(Not,"poolformer"),Not.forEach(t),HZe=r(u7e," \u2014 "),qR=n(u7e,"A",{href:!0});var qot=s(qR);UZe=r(qot,"PoolFormerConfig"),qot.forEach(t),JZe=r(u7e," (PoolFormer model)"),u7e.forEach(t),YZe=i(L),og=n(L,"LI",{});var p7e=s(og);mne=n(p7e,"STRONG",{});var jot=s(mne);KZe=r(jot,"prophetnet"),jot.forEach(t),ZZe=r(p7e," \u2014 "),jR=n(p7e,"A",{href:!0});var Dot=s(jR);eeo=r(Dot,"ProphetNetConfig"),Dot.forEach(t),oeo=r(p7e," (ProphetNet model)"),p7e.forEach(t),reo=i(L),rg=n(L,"LI",{});var _7e=s(rg);fne=n(_7e,"STRONG",{});var Got=s(fne);teo=r(Got,"qdqbert"),Got.forEach(t),aeo=r(_7e," \u2014 "),DR=n(_7e,"A",{href:!0});var Oot=s(DR);neo=r(Oot,"QDQBertConfig"),Oot.forEach(t),seo=r(_7e," (QDQBert model)"),_7e.forEach(t),leo=i(L),tg=n(L,"LI",{});var b7e=s(tg);gne=n(b7e,"STRONG",{});var Vot=s(gne);ieo=r(Vot,"rag"),Vot.forEach(t),deo=r(b7e," \u2014 "),GR=n(b7e,"A",{href:!0});var Xot=s(GR);ceo=r(Xot,"RagConfig"),Xot.forEach(t),meo=r(b7e," (RAG model)"),b7e.forEach(t),feo=i(L),ag=n(L,"LI",{});var v7e=s(ag);hne=n(v7e,"STRONG",{});var zot=s(hne);geo=r(zot,"realm"),zot.forEach(t),heo=r(v7e," \u2014 "),OR=n(v7e,"A",{href:!0});var Qot=s(OR);ueo=r(Qot,"RealmConfig"),Qot.forEach(t),peo=r(v7e," (REALM model)"),v7e.forEach(t),_eo=i(L),ng=n(L,"LI",{});var F7e=s(ng);une=n(F7e,"STRONG",{});var Wot=s(une);beo=r(Wot,"reformer"),Wot.forEach(t),veo=r(F7e," \u2014 "),VR=n(F7e,"A",{href:!0});var Hot=s(VR);Feo=r(Hot,"ReformerConfig"),Hot.forEach(t),Teo=r(F7e," (Reformer model)"),F7e.forEach(t),Meo=i(L),sg=n(L,"LI",{});var T7e=s(sg);pne=n(T7e,"STRONG",{});var Uot=s(pne);Eeo=r(Uot,"regnet"),Uot.forEach(t),Ceo=r(T7e," \u2014 "),XR=n(T7e,"A",{href:!0});var Jot=s(XR);weo=r(Jot,"RegNetConfig"),Jot.forEach(t),Aeo=r(T7e," (RegNet model)"),T7e.forEach(t),Leo=i(L),lg=n(L,"LI",{});var M7e=s(lg);_ne=n(M7e,"STRONG",{});var Yot=s(_ne);yeo=r(Yot,"rembert"),Yot.forEach(t),xeo=r(M7e," \u2014 "),zR=n(M7e,"A",{href:!0});var Kot=s(zR);$eo=r(Kot,"RemBertConfig"),Kot.forEach(t),keo=r(M7e," (RemBERT model)"),M7e.forEach(t),Seo=i(L),ig=n(L,"LI",{});var E7e=s(ig);bne=n(E7e,"STRONG",{});var Zot=s(bne);Reo=r(Zot,"resnet"),Zot.forEach(t),Peo=r(E7e," \u2014 "),QR=n(E7e,"A",{href:!0});var ert=s(QR);Beo=r(ert,"ResNetConfig"),ert.forEach(t),Ieo=r(E7e," (ResNet model)"),E7e.forEach(t),Neo=i(L),dg=n(L,"LI",{});var C7e=s(dg);vne=n(C7e,"STRONG",{});var ort=s(vne);qeo=r(ort,"retribert"),ort.forEach(t),jeo=r(C7e," \u2014 "),WR=n(C7e,"A",{href:!0});var rrt=s(WR);Deo=r(rrt,"RetriBertConfig"),rrt.forEach(t),Geo=r(C7e," (RetriBERT model)"),C7e.forEach(t),Oeo=i(L),cg=n(L,"LI",{});var w7e=s(cg);Fne=n(w7e,"STRONG",{});var trt=s(Fne);Veo=r(trt,"roberta"),trt.forEach(t),Xeo=r(w7e," \u2014 "),HR=n(w7e,"A",{href:!0});var art=s(HR);zeo=r(art,"RobertaConfig"),art.forEach(t),Qeo=r(w7e," (RoBERTa model)"),w7e.forEach(t),Weo=i(L),mg=n(L,"LI",{});var A7e=s(mg);Tne=n(A7e,"STRONG",{});var nrt=s(Tne);Heo=r(nrt,"roformer"),nrt.forEach(t),Ueo=r(A7e," \u2014 "),UR=n(A7e,"A",{href:!0});var srt=s(UR);Jeo=r(srt,"RoFormerConfig"),srt.forEach(t),Yeo=r(A7e," (RoFormer model)"),A7e.forEach(t),Keo=i(L),fg=n(L,"LI",{});var L7e=s(fg);Mne=n(L7e,"STRONG",{});var lrt=s(Mne);Zeo=r(lrt,"segformer"),lrt.forEach(t),eoo=r(L7e," \u2014 "),JR=n(L7e,"A",{href:!0});var irt=s(JR);ooo=r(irt,"SegformerConfig"),irt.forEach(t),roo=r(L7e," (SegFormer model)"),L7e.forEach(t),too=i(L),gg=n(L,"LI",{});var y7e=s(gg);Ene=n(y7e,"STRONG",{});var drt=s(Ene);aoo=r(drt,"sew"),drt.forEach(t),noo=r(y7e," \u2014 "),YR=n(y7e,"A",{href:!0});var crt=s(YR);soo=r(crt,"SEWConfig"),crt.forEach(t),loo=r(y7e," (SEW model)"),y7e.forEach(t),ioo=i(L),hg=n(L,"LI",{});var x7e=s(hg);Cne=n(x7e,"STRONG",{});var mrt=s(Cne);doo=r(mrt,"sew-d"),mrt.forEach(t),coo=r(x7e," \u2014 "),KR=n(x7e,"A",{href:!0});var frt=s(KR);moo=r(frt,"SEWDConfig"),frt.forEach(t),foo=r(x7e," (SEW-D model)"),x7e.forEach(t),goo=i(L),ug=n(L,"LI",{});var $7e=s(ug);wne=n($7e,"STRONG",{});var grt=s(wne);hoo=r(grt,"speech-encoder-decoder"),grt.forEach(t),uoo=r($7e," \u2014 "),ZR=n($7e,"A",{href:!0});var hrt=s(ZR);poo=r(hrt,"SpeechEncoderDecoderConfig"),hrt.forEach(t),_oo=r($7e," (Speech Encoder decoder model)"),$7e.forEach(t),boo=i(L),pg=n(L,"LI",{});var k7e=s(pg);Ane=n(k7e,"STRONG",{});var urt=s(Ane);voo=r(urt,"speech_to_text"),urt.forEach(t),Foo=r(k7e," \u2014 "),eP=n(k7e,"A",{href:!0});var prt=s(eP);Too=r(prt,"Speech2TextConfig"),prt.forEach(t),Moo=r(k7e," (Speech2Text model)"),k7e.forEach(t),Eoo=i(L),_g=n(L,"LI",{});var S7e=s(_g);Lne=n(S7e,"STRONG",{});var _rt=s(Lne);Coo=r(_rt,"speech_to_text_2"),_rt.forEach(t),woo=r(S7e," \u2014 "),oP=n(S7e,"A",{href:!0});var brt=s(oP);Aoo=r(brt,"Speech2Text2Config"),brt.forEach(t),Loo=r(S7e," (Speech2Text2 model)"),S7e.forEach(t),yoo=i(L),bg=n(L,"LI",{});var R7e=s(bg);yne=n(R7e,"STRONG",{});var vrt=s(yne);xoo=r(vrt,"splinter"),vrt.forEach(t),$oo=r(R7e," \u2014 "),rP=n(R7e,"A",{href:!0});var Frt=s(rP);koo=r(Frt,"SplinterConfig"),Frt.forEach(t),Soo=r(R7e," (Splinter model)"),R7e.forEach(t),Roo=i(L),vg=n(L,"LI",{});var P7e=s(vg);xne=n(P7e,"STRONG",{});var Trt=s(xne);Poo=r(Trt,"squeezebert"),Trt.forEach(t),Boo=r(P7e," \u2014 "),tP=n(P7e,"A",{href:!0});var Mrt=s(tP);Ioo=r(Mrt,"SqueezeBertConfig"),Mrt.forEach(t),Noo=r(P7e," (SqueezeBERT model)"),P7e.forEach(t),qoo=i(L),Fg=n(L,"LI",{});var B7e=s(Fg);$ne=n(B7e,"STRONG",{});var Ert=s($ne);joo=r(Ert,"swin"),Ert.forEach(t),Doo=r(B7e," \u2014 "),aP=n(B7e,"A",{href:!0});var Crt=s(aP);Goo=r(Crt,"SwinConfig"),Crt.forEach(t),Ooo=r(B7e," (Swin Transformer model)"),B7e.forEach(t),Voo=i(L),Tg=n(L,"LI",{});var I7e=s(Tg);kne=n(I7e,"STRONG",{});var wrt=s(kne);Xoo=r(wrt,"t5"),wrt.forEach(t),zoo=r(I7e," \u2014 "),nP=n(I7e,"A",{href:!0});var Art=s(nP);Qoo=r(Art,"T5Config"),Art.forEach(t),Woo=r(I7e," (T5 model)"),I7e.forEach(t),Hoo=i(L),Mg=n(L,"LI",{});var N7e=s(Mg);Sne=n(N7e,"STRONG",{});var Lrt=s(Sne);Uoo=r(Lrt,"tapas"),Lrt.forEach(t),Joo=r(N7e," \u2014 "),sP=n(N7e,"A",{href:!0});var yrt=s(sP);Yoo=r(yrt,"TapasConfig"),yrt.forEach(t),Koo=r(N7e," (TAPAS model)"),N7e.forEach(t),Zoo=i(L),Eg=n(L,"LI",{});var q7e=s(Eg);Rne=n(q7e,"STRONG",{});var xrt=s(Rne);ero=r(xrt,"trajectory_transformer"),xrt.forEach(t),oro=r(q7e," \u2014 "),lP=n(q7e,"A",{href:!0});var $rt=s(lP);rro=r($rt,"TrajectoryTransformerConfig"),$rt.forEach(t),tro=r(q7e," (Trajectory Transformer model)"),q7e.forEach(t),aro=i(L),Cg=n(L,"LI",{});var j7e=s(Cg);Pne=n(j7e,"STRONG",{});var krt=s(Pne);nro=r(krt,"transfo-xl"),krt.forEach(t),sro=r(j7e," \u2014 "),iP=n(j7e,"A",{href:!0});var Srt=s(iP);lro=r(Srt,"TransfoXLConfig"),Srt.forEach(t),iro=r(j7e," (Transformer-XL model)"),j7e.forEach(t),dro=i(L),wg=n(L,"LI",{});var D7e=s(wg);Bne=n(D7e,"STRONG",{});var Rrt=s(Bne);cro=r(Rrt,"trocr"),Rrt.forEach(t),mro=r(D7e," \u2014 "),dP=n(D7e,"A",{href:!0});var Prt=s(dP);fro=r(Prt,"TrOCRConfig"),Prt.forEach(t),gro=r(D7e," (TrOCR model)"),D7e.forEach(t),hro=i(L),Ag=n(L,"LI",{});var G7e=s(Ag);Ine=n(G7e,"STRONG",{});var Brt=s(Ine);uro=r(Brt,"unispeech"),Brt.forEach(t),pro=r(G7e," \u2014 "),cP=n(G7e,"A",{href:!0});var Irt=s(cP);_ro=r(Irt,"UniSpeechConfig"),Irt.forEach(t),bro=r(G7e," (UniSpeech model)"),G7e.forEach(t),vro=i(L),Lg=n(L,"LI",{});var O7e=s(Lg);Nne=n(O7e,"STRONG",{});var Nrt=s(Nne);Fro=r(Nrt,"unispeech-sat"),Nrt.forEach(t),Tro=r(O7e," \u2014 "),mP=n(O7e,"A",{href:!0});var qrt=s(mP);Mro=r(qrt,"UniSpeechSatConfig"),qrt.forEach(t),Ero=r(O7e," (UniSpeechSat model)"),O7e.forEach(t),Cro=i(L),yg=n(L,"LI",{});var V7e=s(yg);qne=n(V7e,"STRONG",{});var jrt=s(qne);wro=r(jrt,"van"),jrt.forEach(t),Aro=r(V7e," \u2014 "),fP=n(V7e,"A",{href:!0});var Drt=s(fP);Lro=r(Drt,"VanConfig"),Drt.forEach(t),yro=r(V7e," (VAN model)"),V7e.forEach(t),xro=i(L),xg=n(L,"LI",{});var X7e=s(xg);jne=n(X7e,"STRONG",{});var Grt=s(jne);$ro=r(Grt,"vilt"),Grt.forEach(t),kro=r(X7e," \u2014 "),gP=n(X7e,"A",{href:!0});var Ort=s(gP);Sro=r(Ort,"ViltConfig"),Ort.forEach(t),Rro=r(X7e," (ViLT model)"),X7e.forEach(t),Pro=i(L),$g=n(L,"LI",{});var z7e=s($g);Dne=n(z7e,"STRONG",{});var Vrt=s(Dne);Bro=r(Vrt,"vision-encoder-decoder"),Vrt.forEach(t),Iro=r(z7e," \u2014 "),hP=n(z7e,"A",{href:!0});var Xrt=s(hP);Nro=r(Xrt,"VisionEncoderDecoderConfig"),Xrt.forEach(t),qro=r(z7e," (Vision Encoder decoder model)"),z7e.forEach(t),jro=i(L),kg=n(L,"LI",{});var Q7e=s(kg);Gne=n(Q7e,"STRONG",{});var zrt=s(Gne);Dro=r(zrt,"vision-text-dual-encoder"),zrt.forEach(t),Gro=r(Q7e," \u2014 "),uP=n(Q7e,"A",{href:!0});var Qrt=s(uP);Oro=r(Qrt,"VisionTextDualEncoderConfig"),Qrt.forEach(t),Vro=r(Q7e," (VisionTextDualEncoder model)"),Q7e.forEach(t),Xro=i(L),Sg=n(L,"LI",{});var W7e=s(Sg);One=n(W7e,"STRONG",{});var Wrt=s(One);zro=r(Wrt,"visual_bert"),Wrt.forEach(t),Qro=r(W7e," \u2014 "),pP=n(W7e,"A",{href:!0});var Hrt=s(pP);Wro=r(Hrt,"VisualBertConfig"),Hrt.forEach(t),Hro=r(W7e," (VisualBERT model)"),W7e.forEach(t),Uro=i(L),Rg=n(L,"LI",{});var H7e=s(Rg);Vne=n(H7e,"STRONG",{});var Urt=s(Vne);Jro=r(Urt,"vit"),Urt.forEach(t),Yro=r(H7e," \u2014 "),_P=n(H7e,"A",{href:!0});var Jrt=s(_P);Kro=r(Jrt,"ViTConfig"),Jrt.forEach(t),Zro=r(H7e," (ViT model)"),H7e.forEach(t),eto=i(L),Pg=n(L,"LI",{});var U7e=s(Pg);Xne=n(U7e,"STRONG",{});var Yrt=s(Xne);oto=r(Yrt,"vit_mae"),Yrt.forEach(t),rto=r(U7e," \u2014 "),bP=n(U7e,"A",{href:!0});var Krt=s(bP);tto=r(Krt,"ViTMAEConfig"),Krt.forEach(t),ato=r(U7e," (ViTMAE model)"),U7e.forEach(t),nto=i(L),Bg=n(L,"LI",{});var J7e=s(Bg);zne=n(J7e,"STRONG",{});var Zrt=s(zne);sto=r(Zrt,"wav2vec2"),Zrt.forEach(t),lto=r(J7e," \u2014 "),vP=n(J7e,"A",{href:!0});var ett=s(vP);ito=r(ett,"Wav2Vec2Config"),ett.forEach(t),dto=r(J7e," (Wav2Vec2 model)"),J7e.forEach(t),cto=i(L),Ig=n(L,"LI",{});var Y7e=s(Ig);Qne=n(Y7e,"STRONG",{});var ott=s(Qne);mto=r(ott,"wav2vec2-conformer"),ott.forEach(t),fto=r(Y7e," \u2014 "),FP=n(Y7e,"A",{href:!0});var rtt=s(FP);gto=r(rtt,"Wav2Vec2ConformerConfig"),rtt.forEach(t),hto=r(Y7e," (Wav2Vec2-Conformer model)"),Y7e.forEach(t),uto=i(L),Ng=n(L,"LI",{});var K7e=s(Ng);Wne=n(K7e,"STRONG",{});var ttt=s(Wne);pto=r(ttt,"wavlm"),ttt.forEach(t),_to=r(K7e," \u2014 "),TP=n(K7e,"A",{href:!0});var att=s(TP);bto=r(att,"WavLMConfig"),att.forEach(t),vto=r(K7e," (WavLM model)"),K7e.forEach(t),Fto=i(L),qg=n(L,"LI",{});var Z7e=s(qg);Hne=n(Z7e,"STRONG",{});var ntt=s(Hne);Tto=r(ntt,"xglm"),ntt.forEach(t),Mto=r(Z7e," \u2014 "),MP=n(Z7e,"A",{href:!0});var stt=s(MP);Eto=r(stt,"XGLMConfig"),stt.forEach(t),Cto=r(Z7e," (XGLM model)"),Z7e.forEach(t),wto=i(L),jg=n(L,"LI",{});var eye=s(jg);Une=n(eye,"STRONG",{});var ltt=s(Une);Ato=r(ltt,"xlm"),ltt.forEach(t),Lto=r(eye," \u2014 "),EP=n(eye,"A",{href:!0});var itt=s(EP);yto=r(itt,"XLMConfig"),itt.forEach(t),xto=r(eye," (XLM model)"),eye.forEach(t),$to=i(L),Dg=n(L,"LI",{});var oye=s(Dg);Jne=n(oye,"STRONG",{});var dtt=s(Jne);kto=r(dtt,"xlm-prophetnet"),dtt.forEach(t),Sto=r(oye," \u2014 "),CP=n(oye,"A",{href:!0});var ctt=s(CP);Rto=r(ctt,"XLMProphetNetConfig"),ctt.forEach(t),Pto=r(oye," (XLM-ProphetNet model)"),oye.forEach(t),Bto=i(L),Gg=n(L,"LI",{});var rye=s(Gg);Yne=n(rye,"STRONG",{});var mtt=s(Yne);Ito=r(mtt,"xlm-roberta"),mtt.forEach(t),Nto=r(rye," \u2014 "),wP=n(rye,"A",{href:!0});var ftt=s(wP);qto=r(ftt,"XLMRobertaConfig"),ftt.forEach(t),jto=r(rye," (XLM-RoBERTa model)"),rye.forEach(t),Dto=i(L),Og=n(L,"LI",{});var tye=s(Og);Kne=n(tye,"STRONG",{});var gtt=s(Kne);Gto=r(gtt,"xlm-roberta-xl"),gtt.forEach(t),Oto=r(tye," \u2014 "),AP=n(tye,"A",{href:!0});var htt=s(AP);Vto=r(htt,"XLMRobertaXLConfig"),htt.forEach(t),Xto=r(tye," (XLM-RoBERTa-XL model)"),tye.forEach(t),zto=i(L),Vg=n(L,"LI",{});var aye=s(Vg);Zne=n(aye,"STRONG",{});var utt=s(Zne);Qto=r(utt,"xlnet"),utt.forEach(t),Wto=r(aye," \u2014 "),LP=n(aye,"A",{href:!0});var ptt=s(LP);Hto=r(ptt,"XLNetConfig"),ptt.forEach(t),Uto=r(aye," (XLNet model)"),aye.forEach(t),Jto=i(L),Xg=n(L,"LI",{});var nye=s(Xg);ese=n(nye,"STRONG",{});var _tt=s(ese);Yto=r(_tt,"yolos"),_tt.forEach(t),Kto=r(nye," \u2014 "),yP=n(nye,"A",{href:!0});var btt=s(yP);Zto=r(btt,"YolosConfig"),btt.forEach(t),eao=r(nye," (YOLOS model)"),nye.forEach(t),oao=i(L),zg=n(L,"LI",{});var sye=s(zg);ose=n(sye,"STRONG",{});var vtt=s(ose);rao=r(vtt,"yoso"),vtt.forEach(t),tao=r(sye," \u2014 "),xP=n(sye,"A",{href:!0});var Ftt=s(xP);aao=r(Ftt,"YosoConfig"),Ftt.forEach(t),nao=r(sye," (YOSO model)"),sye.forEach(t),L.forEach(t),sao=i(at),T(Qg.$$.fragment,at),at.forEach(t),lao=i(tt),Wg=n(tt,"DIV",{class:!0});var NXe=s(Wg);T(W7.$$.fragment,NXe),iao=i(NXe),rse=n(NXe,"P",{});var Ttt=s(rse);dao=r(Ttt,"Register a new configuration for this class."),Ttt.forEach(t),NXe.forEach(t),tt.forEach(t),qOe=i(m),Pi=n(m,"H2",{class:!0});var qXe=s(Pi);Hg=n(qXe,"A",{id:!0,class:!0,href:!0});var Mtt=s(Hg);tse=n(Mtt,"SPAN",{});var Ett=s(tse);T(H7.$$.fragment,Ett),Ett.forEach(t),Mtt.forEach(t),cao=i(qXe),ase=n(qXe,"SPAN",{});var Ctt=s(ase);mao=r(Ctt,"AutoTokenizer"),Ctt.forEach(t),qXe.forEach(t),jOe=i(m),Ao=n(m,"DIV",{class:!0});var Us=s(Ao);T(U7.$$.fragment,Us),fao=i(Us),J7=n(Us,"P",{});var jXe=s(J7);gao=r(jXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$P=n(jXe,"A",{href:!0});var wtt=s($P);hao=r(wtt,"AutoTokenizer.from_pretrained()"),wtt.forEach(t),uao=r(jXe," class method."),jXe.forEach(t),pao=i(Us),Y7=n(Us,"P",{});var DXe=s(Y7);_ao=r(DXe,"This class cannot be instantiated directly using "),nse=n(DXe,"CODE",{});var Att=s(nse);bao=r(Att,"__init__()"),Att.forEach(t),vao=r(DXe," (throws an error)."),DXe.forEach(t),Fao=i(Us),Lr=n(Us,"DIV",{class:!0});var Js=s(Lr);T(K7.$$.fragment,Js),Tao=i(Js),sse=n(Js,"P",{});var Ltt=s(sse);Mao=r(Ltt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Ltt.forEach(t),Eao=i(Js),Sa=n(Js,"P",{});var G6=s(Sa);Cao=r(G6,"The tokenizer class to instantiate is selected based on the "),lse=n(G6,"CODE",{});var ytt=s(lse);wao=r(ytt,"model_type"),ytt.forEach(t),Aao=r(G6,` property of the config object (either
passed as an argument or loaded from `),ise=n(G6,"CODE",{});var xtt=s(ise);Lao=r(xtt,"pretrained_model_name_or_path"),xtt.forEach(t),yao=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=n(G6,"CODE",{});var $tt=s(dse);xao=r($tt,"pretrained_model_name_or_path"),$tt.forEach(t),$ao=r(G6,":"),G6.forEach(t),kao=i(Js),k=n(Js,"UL",{});var S=s(k);qn=n(S,"LI",{});var ak=s(qn);cse=n(ak,"STRONG",{});var ktt=s(cse);Sao=r(ktt,"albert"),ktt.forEach(t),Rao=r(ak," \u2014 "),kP=n(ak,"A",{href:!0});var Stt=s(kP);Pao=r(Stt,"AlbertTokenizer"),Stt.forEach(t),Bao=r(ak," or "),SP=n(ak,"A",{href:!0});var Rtt=s(SP);Iao=r(Rtt,"AlbertTokenizerFast"),Rtt.forEach(t),Nao=r(ak," (ALBERT model)"),ak.forEach(t),qao=i(S),jn=n(S,"LI",{});var nk=s(jn);mse=n(nk,"STRONG",{});var Ptt=s(mse);jao=r(Ptt,"bart"),Ptt.forEach(t),Dao=r(nk," \u2014 "),RP=n(nk,"A",{href:!0});var Btt=s(RP);Gao=r(Btt,"BartTokenizer"),Btt.forEach(t),Oao=r(nk," or "),PP=n(nk,"A",{href:!0});var Itt=s(PP);Vao=r(Itt,"BartTokenizerFast"),Itt.forEach(t),Xao=r(nk," (BART model)"),nk.forEach(t),zao=i(S),Dn=n(S,"LI",{});var sk=s(Dn);fse=n(sk,"STRONG",{});var Ntt=s(fse);Qao=r(Ntt,"barthez"),Ntt.forEach(t),Wao=r(sk," \u2014 "),BP=n(sk,"A",{href:!0});var qtt=s(BP);Hao=r(qtt,"BarthezTokenizer"),qtt.forEach(t),Uao=r(sk," or "),IP=n(sk,"A",{href:!0});var jtt=s(IP);Jao=r(jtt,"BarthezTokenizerFast"),jtt.forEach(t),Yao=r(sk," (BARThez model)"),sk.forEach(t),Kao=i(S),Ug=n(S,"LI",{});var lye=s(Ug);gse=n(lye,"STRONG",{});var Dtt=s(gse);Zao=r(Dtt,"bartpho"),Dtt.forEach(t),eno=r(lye," \u2014 "),NP=n(lye,"A",{href:!0});var Gtt=s(NP);ono=r(Gtt,"BartphoTokenizer"),Gtt.forEach(t),rno=r(lye," (BARTpho model)"),lye.forEach(t),tno=i(S),Gn=n(S,"LI",{});var lk=s(Gn);hse=n(lk,"STRONG",{});var Ott=s(hse);ano=r(Ott,"bert"),Ott.forEach(t),nno=r(lk," \u2014 "),qP=n(lk,"A",{href:!0});var Vtt=s(qP);sno=r(Vtt,"BertTokenizer"),Vtt.forEach(t),lno=r(lk," or "),jP=n(lk,"A",{href:!0});var Xtt=s(jP);ino=r(Xtt,"BertTokenizerFast"),Xtt.forEach(t),dno=r(lk," (BERT model)"),lk.forEach(t),cno=i(S),Jg=n(S,"LI",{});var iye=s(Jg);use=n(iye,"STRONG",{});var ztt=s(use);mno=r(ztt,"bert-generation"),ztt.forEach(t),fno=r(iye," \u2014 "),DP=n(iye,"A",{href:!0});var Qtt=s(DP);gno=r(Qtt,"BertGenerationTokenizer"),Qtt.forEach(t),hno=r(iye," (Bert Generation model)"),iye.forEach(t),uno=i(S),Yg=n(S,"LI",{});var dye=s(Yg);pse=n(dye,"STRONG",{});var Wtt=s(pse);pno=r(Wtt,"bert-japanese"),Wtt.forEach(t),_no=r(dye," \u2014 "),GP=n(dye,"A",{href:!0});var Htt=s(GP);bno=r(Htt,"BertJapaneseTokenizer"),Htt.forEach(t),vno=r(dye," (BertJapanese model)"),dye.forEach(t),Fno=i(S),Kg=n(S,"LI",{});var cye=s(Kg);_se=n(cye,"STRONG",{});var Utt=s(_se);Tno=r(Utt,"bertweet"),Utt.forEach(t),Mno=r(cye," \u2014 "),OP=n(cye,"A",{href:!0});var Jtt=s(OP);Eno=r(Jtt,"BertweetTokenizer"),Jtt.forEach(t),Cno=r(cye," (BERTweet model)"),cye.forEach(t),wno=i(S),On=n(S,"LI",{});var ik=s(On);bse=n(ik,"STRONG",{});var Ytt=s(bse);Ano=r(Ytt,"big_bird"),Ytt.forEach(t),Lno=r(ik," \u2014 "),VP=n(ik,"A",{href:!0});var Ktt=s(VP);yno=r(Ktt,"BigBirdTokenizer"),Ktt.forEach(t),xno=r(ik," or "),XP=n(ik,"A",{href:!0});var Ztt=s(XP);$no=r(Ztt,"BigBirdTokenizerFast"),Ztt.forEach(t),kno=r(ik," (BigBird model)"),ik.forEach(t),Sno=i(S),Vn=n(S,"LI",{});var dk=s(Vn);vse=n(dk,"STRONG",{});var eat=s(vse);Rno=r(eat,"bigbird_pegasus"),eat.forEach(t),Pno=r(dk," \u2014 "),zP=n(dk,"A",{href:!0});var oat=s(zP);Bno=r(oat,"PegasusTokenizer"),oat.forEach(t),Ino=r(dk," or "),QP=n(dk,"A",{href:!0});var rat=s(QP);Nno=r(rat,"PegasusTokenizerFast"),rat.forEach(t),qno=r(dk," (BigBird-Pegasus model)"),dk.forEach(t),jno=i(S),Xn=n(S,"LI",{});var ck=s(Xn);Fse=n(ck,"STRONG",{});var tat=s(Fse);Dno=r(tat,"blenderbot"),tat.forEach(t),Gno=r(ck," \u2014 "),WP=n(ck,"A",{href:!0});var aat=s(WP);Ono=r(aat,"BlenderbotTokenizer"),aat.forEach(t),Vno=r(ck," or "),HP=n(ck,"A",{href:!0});var nat=s(HP);Xno=r(nat,"BlenderbotTokenizerFast"),nat.forEach(t),zno=r(ck," (Blenderbot model)"),ck.forEach(t),Qno=i(S),Zg=n(S,"LI",{});var mye=s(Zg);Tse=n(mye,"STRONG",{});var sat=s(Tse);Wno=r(sat,"blenderbot-small"),sat.forEach(t),Hno=r(mye," \u2014 "),UP=n(mye,"A",{href:!0});var lat=s(UP);Uno=r(lat,"BlenderbotSmallTokenizer"),lat.forEach(t),Jno=r(mye," (BlenderbotSmall model)"),mye.forEach(t),Yno=i(S),eh=n(S,"LI",{});var fye=s(eh);Mse=n(fye,"STRONG",{});var iat=s(Mse);Kno=r(iat,"bloom"),iat.forEach(t),Zno=r(fye," \u2014 "),JP=n(fye,"A",{href:!0});var dat=s(JP);eso=r(dat,"BloomTokenizerFast"),dat.forEach(t),oso=r(fye," (BLOOM model)"),fye.forEach(t),rso=i(S),oh=n(S,"LI",{});var gye=s(oh);Ese=n(gye,"STRONG",{});var cat=s(Ese);tso=r(cat,"byt5"),cat.forEach(t),aso=r(gye," \u2014 "),YP=n(gye,"A",{href:!0});var mat=s(YP);nso=r(mat,"ByT5Tokenizer"),mat.forEach(t),sso=r(gye," (ByT5 model)"),gye.forEach(t),lso=i(S),zn=n(S,"LI",{});var mk=s(zn);Cse=n(mk,"STRONG",{});var fat=s(Cse);iso=r(fat,"camembert"),fat.forEach(t),dso=r(mk," \u2014 "),KP=n(mk,"A",{href:!0});var gat=s(KP);cso=r(gat,"CamembertTokenizer"),gat.forEach(t),mso=r(mk," or "),ZP=n(mk,"A",{href:!0});var hat=s(ZP);fso=r(hat,"CamembertTokenizerFast"),hat.forEach(t),gso=r(mk," (CamemBERT model)"),mk.forEach(t),hso=i(S),rh=n(S,"LI",{});var hye=s(rh);wse=n(hye,"STRONG",{});var uat=s(wse);uso=r(uat,"canine"),uat.forEach(t),pso=r(hye," \u2014 "),eB=n(hye,"A",{href:!0});var pat=s(eB);_so=r(pat,"CanineTokenizer"),pat.forEach(t),bso=r(hye," (CANINE model)"),hye.forEach(t),vso=i(S),Qn=n(S,"LI",{});var fk=s(Qn);Ase=n(fk,"STRONG",{});var _at=s(Ase);Fso=r(_at,"clip"),_at.forEach(t),Tso=r(fk," \u2014 "),oB=n(fk,"A",{href:!0});var bat=s(oB);Mso=r(bat,"CLIPTokenizer"),bat.forEach(t),Eso=r(fk," or "),rB=n(fk,"A",{href:!0});var vat=s(rB);Cso=r(vat,"CLIPTokenizerFast"),vat.forEach(t),wso=r(fk," (CLIP model)"),fk.forEach(t),Aso=i(S),Wn=n(S,"LI",{});var gk=s(Wn);Lse=n(gk,"STRONG",{});var Fat=s(Lse);Lso=r(Fat,"codegen"),Fat.forEach(t),yso=r(gk," \u2014 "),tB=n(gk,"A",{href:!0});var Tat=s(tB);xso=r(Tat,"CodeGenTokenizer"),Tat.forEach(t),$so=r(gk," or "),aB=n(gk,"A",{href:!0});var Mat=s(aB);kso=r(Mat,"CodeGenTokenizerFast"),Mat.forEach(t),Sso=r(gk," (CodeGen model)"),gk.forEach(t),Rso=i(S),Hn=n(S,"LI",{});var hk=s(Hn);yse=n(hk,"STRONG",{});var Eat=s(yse);Pso=r(Eat,"convbert"),Eat.forEach(t),Bso=r(hk," \u2014 "),nB=n(hk,"A",{href:!0});var Cat=s(nB);Iso=r(Cat,"ConvBertTokenizer"),Cat.forEach(t),Nso=r(hk," or "),sB=n(hk,"A",{href:!0});var wat=s(sB);qso=r(wat,"ConvBertTokenizerFast"),wat.forEach(t),jso=r(hk," (ConvBERT model)"),hk.forEach(t),Dso=i(S),Un=n(S,"LI",{});var uk=s(Un);xse=n(uk,"STRONG",{});var Aat=s(xse);Gso=r(Aat,"cpm"),Aat.forEach(t),Oso=r(uk," \u2014 "),lB=n(uk,"A",{href:!0});var Lat=s(lB);Vso=r(Lat,"CpmTokenizer"),Lat.forEach(t),Xso=r(uk," or "),iB=n(uk,"A",{href:!0});var yat=s(iB);zso=r(yat,"CpmTokenizerFast"),yat.forEach(t),Qso=r(uk," (CPM model)"),uk.forEach(t),Wso=i(S),th=n(S,"LI",{});var uye=s(th);$se=n(uye,"STRONG",{});var xat=s($se);Hso=r(xat,"ctrl"),xat.forEach(t),Uso=r(uye," \u2014 "),dB=n(uye,"A",{href:!0});var $at=s(dB);Jso=r($at,"CTRLTokenizer"),$at.forEach(t),Yso=r(uye," (CTRL model)"),uye.forEach(t),Kso=i(S),Jn=n(S,"LI",{});var pk=s(Jn);kse=n(pk,"STRONG",{});var kat=s(kse);Zso=r(kat,"data2vec-text"),kat.forEach(t),elo=r(pk," \u2014 "),cB=n(pk,"A",{href:!0});var Sat=s(cB);olo=r(Sat,"RobertaTokenizer"),Sat.forEach(t),rlo=r(pk," or "),mB=n(pk,"A",{href:!0});var Rat=s(mB);tlo=r(Rat,"RobertaTokenizerFast"),Rat.forEach(t),alo=r(pk," (Data2VecText model)"),pk.forEach(t),nlo=i(S),Yn=n(S,"LI",{});var _k=s(Yn);Sse=n(_k,"STRONG",{});var Pat=s(Sse);slo=r(Pat,"deberta"),Pat.forEach(t),llo=r(_k," \u2014 "),fB=n(_k,"A",{href:!0});var Bat=s(fB);ilo=r(Bat,"DebertaTokenizer"),Bat.forEach(t),dlo=r(_k," or "),gB=n(_k,"A",{href:!0});var Iat=s(gB);clo=r(Iat,"DebertaTokenizerFast"),Iat.forEach(t),mlo=r(_k," (DeBERTa model)"),_k.forEach(t),flo=i(S),Kn=n(S,"LI",{});var bk=s(Kn);Rse=n(bk,"STRONG",{});var Nat=s(Rse);glo=r(Nat,"deberta-v2"),Nat.forEach(t),hlo=r(bk," \u2014 "),hB=n(bk,"A",{href:!0});var qat=s(hB);ulo=r(qat,"DebertaV2Tokenizer"),qat.forEach(t),plo=r(bk," or "),uB=n(bk,"A",{href:!0});var jat=s(uB);_lo=r(jat,"DebertaV2TokenizerFast"),jat.forEach(t),blo=r(bk," (DeBERTa-v2 model)"),bk.forEach(t),vlo=i(S),Zn=n(S,"LI",{});var vk=s(Zn);Pse=n(vk,"STRONG",{});var Dat=s(Pse);Flo=r(Dat,"distilbert"),Dat.forEach(t),Tlo=r(vk," \u2014 "),pB=n(vk,"A",{href:!0});var Gat=s(pB);Mlo=r(Gat,"DistilBertTokenizer"),Gat.forEach(t),Elo=r(vk," or "),_B=n(vk,"A",{href:!0});var Oat=s(_B);Clo=r(Oat,"DistilBertTokenizerFast"),Oat.forEach(t),wlo=r(vk," (DistilBERT model)"),vk.forEach(t),Alo=i(S),es=n(S,"LI",{});var Fk=s(es);Bse=n(Fk,"STRONG",{});var Vat=s(Bse);Llo=r(Vat,"dpr"),Vat.forEach(t),ylo=r(Fk," \u2014 "),bB=n(Fk,"A",{href:!0});var Xat=s(bB);xlo=r(Xat,"DPRQuestionEncoderTokenizer"),Xat.forEach(t),$lo=r(Fk," or "),vB=n(Fk,"A",{href:!0});var zat=s(vB);klo=r(zat,"DPRQuestionEncoderTokenizerFast"),zat.forEach(t),Slo=r(Fk," (DPR model)"),Fk.forEach(t),Rlo=i(S),os=n(S,"LI",{});var Tk=s(os);Ise=n(Tk,"STRONG",{});var Qat=s(Ise);Plo=r(Qat,"electra"),Qat.forEach(t),Blo=r(Tk," \u2014 "),FB=n(Tk,"A",{href:!0});var Wat=s(FB);Ilo=r(Wat,"ElectraTokenizer"),Wat.forEach(t),Nlo=r(Tk," or "),TB=n(Tk,"A",{href:!0});var Hat=s(TB);qlo=r(Hat,"ElectraTokenizerFast"),Hat.forEach(t),jlo=r(Tk," (ELECTRA model)"),Tk.forEach(t),Dlo=i(S),ah=n(S,"LI",{});var pye=s(ah);Nse=n(pye,"STRONG",{});var Uat=s(Nse);Glo=r(Uat,"flaubert"),Uat.forEach(t),Olo=r(pye," \u2014 "),MB=n(pye,"A",{href:!0});var Jat=s(MB);Vlo=r(Jat,"FlaubertTokenizer"),Jat.forEach(t),Xlo=r(pye," (FlauBERT model)"),pye.forEach(t),zlo=i(S),rs=n(S,"LI",{});var Mk=s(rs);qse=n(Mk,"STRONG",{});var Yat=s(qse);Qlo=r(Yat,"fnet"),Yat.forEach(t),Wlo=r(Mk," \u2014 "),EB=n(Mk,"A",{href:!0});var Kat=s(EB);Hlo=r(Kat,"FNetTokenizer"),Kat.forEach(t),Ulo=r(Mk," or "),CB=n(Mk,"A",{href:!0});var Zat=s(CB);Jlo=r(Zat,"FNetTokenizerFast"),Zat.forEach(t),Ylo=r(Mk," (FNet model)"),Mk.forEach(t),Klo=i(S),nh=n(S,"LI",{});var _ye=s(nh);jse=n(_ye,"STRONG",{});var ent=s(jse);Zlo=r(ent,"fsmt"),ent.forEach(t),eio=r(_ye," \u2014 "),wB=n(_ye,"A",{href:!0});var ont=s(wB);oio=r(ont,"FSMTTokenizer"),ont.forEach(t),rio=r(_ye," (FairSeq Machine-Translation model)"),_ye.forEach(t),tio=i(S),ts=n(S,"LI",{});var Ek=s(ts);Dse=n(Ek,"STRONG",{});var rnt=s(Dse);aio=r(rnt,"funnel"),rnt.forEach(t),nio=r(Ek," \u2014 "),AB=n(Ek,"A",{href:!0});var tnt=s(AB);sio=r(tnt,"FunnelTokenizer"),tnt.forEach(t),lio=r(Ek," or "),LB=n(Ek,"A",{href:!0});var ant=s(LB);iio=r(ant,"FunnelTokenizerFast"),ant.forEach(t),dio=r(Ek," (Funnel Transformer model)"),Ek.forEach(t),cio=i(S),as=n(S,"LI",{});var Ck=s(as);Gse=n(Ck,"STRONG",{});var nnt=s(Gse);mio=r(nnt,"gpt2"),nnt.forEach(t),fio=r(Ck," \u2014 "),yB=n(Ck,"A",{href:!0});var snt=s(yB);gio=r(snt,"GPT2Tokenizer"),snt.forEach(t),hio=r(Ck," or "),xB=n(Ck,"A",{href:!0});var lnt=s(xB);uio=r(lnt,"GPT2TokenizerFast"),lnt.forEach(t),pio=r(Ck," (OpenAI GPT-2 model)"),Ck.forEach(t),_io=i(S),ns=n(S,"LI",{});var wk=s(ns);Ose=n(wk,"STRONG",{});var int=s(Ose);bio=r(int,"gpt_neo"),int.forEach(t),vio=r(wk," \u2014 "),$B=n(wk,"A",{href:!0});var dnt=s($B);Fio=r(dnt,"GPT2Tokenizer"),dnt.forEach(t),Tio=r(wk," or "),kB=n(wk,"A",{href:!0});var cnt=s(kB);Mio=r(cnt,"GPT2TokenizerFast"),cnt.forEach(t),Eio=r(wk," (GPT Neo model)"),wk.forEach(t),Cio=i(S),sh=n(S,"LI",{});var bye=s(sh);Vse=n(bye,"STRONG",{});var mnt=s(Vse);wio=r(mnt,"gpt_neox"),mnt.forEach(t),Aio=r(bye," \u2014 "),SB=n(bye,"A",{href:!0});var fnt=s(SB);Lio=r(fnt,"GPTNeoXTokenizerFast"),fnt.forEach(t),yio=r(bye," (GPT NeoX model)"),bye.forEach(t),xio=i(S),ss=n(S,"LI",{});var Ak=s(ss);Xse=n(Ak,"STRONG",{});var gnt=s(Xse);$io=r(gnt,"gptj"),gnt.forEach(t),kio=r(Ak," \u2014 "),RB=n(Ak,"A",{href:!0});var hnt=s(RB);Sio=r(hnt,"GPT2Tokenizer"),hnt.forEach(t),Rio=r(Ak," or "),PB=n(Ak,"A",{href:!0});var unt=s(PB);Pio=r(unt,"GPT2TokenizerFast"),unt.forEach(t),Bio=r(Ak," (GPT-J model)"),Ak.forEach(t),Iio=i(S),ls=n(S,"LI",{});var Lk=s(ls);zse=n(Lk,"STRONG",{});var pnt=s(zse);Nio=r(pnt,"groupvit"),pnt.forEach(t),qio=r(Lk," \u2014 "),BB=n(Lk,"A",{href:!0});var _nt=s(BB);jio=r(_nt,"CLIPTokenizer"),_nt.forEach(t),Dio=r(Lk," or "),IB=n(Lk,"A",{href:!0});var bnt=s(IB);Gio=r(bnt,"CLIPTokenizerFast"),bnt.forEach(t),Oio=r(Lk," (GroupViT model)"),Lk.forEach(t),Vio=i(S),is=n(S,"LI",{});var yk=s(is);Qse=n(yk,"STRONG",{});var vnt=s(Qse);Xio=r(vnt,"herbert"),vnt.forEach(t),zio=r(yk," \u2014 "),NB=n(yk,"A",{href:!0});var Fnt=s(NB);Qio=r(Fnt,"HerbertTokenizer"),Fnt.forEach(t),Wio=r(yk," or "),qB=n(yk,"A",{href:!0});var Tnt=s(qB);Hio=r(Tnt,"HerbertTokenizerFast"),Tnt.forEach(t),Uio=r(yk," (HerBERT model)"),yk.forEach(t),Jio=i(S),lh=n(S,"LI",{});var vye=s(lh);Wse=n(vye,"STRONG",{});var Mnt=s(Wse);Yio=r(Mnt,"hubert"),Mnt.forEach(t),Kio=r(vye," \u2014 "),jB=n(vye,"A",{href:!0});var Ent=s(jB);Zio=r(Ent,"Wav2Vec2CTCTokenizer"),Ent.forEach(t),edo=r(vye," (Hubert model)"),vye.forEach(t),odo=i(S),ds=n(S,"LI",{});var xk=s(ds);Hse=n(xk,"STRONG",{});var Cnt=s(Hse);rdo=r(Cnt,"ibert"),Cnt.forEach(t),tdo=r(xk," \u2014 "),DB=n(xk,"A",{href:!0});var wnt=s(DB);ado=r(wnt,"RobertaTokenizer"),wnt.forEach(t),ndo=r(xk," or "),GB=n(xk,"A",{href:!0});var Ant=s(GB);sdo=r(Ant,"RobertaTokenizerFast"),Ant.forEach(t),ldo=r(xk," (I-BERT model)"),xk.forEach(t),ido=i(S),cs=n(S,"LI",{});var $k=s(cs);Use=n($k,"STRONG",{});var Lnt=s(Use);ddo=r(Lnt,"layoutlm"),Lnt.forEach(t),cdo=r($k," \u2014 "),OB=n($k,"A",{href:!0});var ynt=s(OB);mdo=r(ynt,"LayoutLMTokenizer"),ynt.forEach(t),fdo=r($k," or "),VB=n($k,"A",{href:!0});var xnt=s(VB);gdo=r(xnt,"LayoutLMTokenizerFast"),xnt.forEach(t),hdo=r($k," (LayoutLM model)"),$k.forEach(t),udo=i(S),ms=n(S,"LI",{});var kk=s(ms);Jse=n(kk,"STRONG",{});var $nt=s(Jse);pdo=r($nt,"layoutlmv2"),$nt.forEach(t),_do=r(kk," \u2014 "),XB=n(kk,"A",{href:!0});var knt=s(XB);bdo=r(knt,"LayoutLMv2Tokenizer"),knt.forEach(t),vdo=r(kk," or "),zB=n(kk,"A",{href:!0});var Snt=s(zB);Fdo=r(Snt,"LayoutLMv2TokenizerFast"),Snt.forEach(t),Tdo=r(kk," (LayoutLMv2 model)"),kk.forEach(t),Mdo=i(S),fs=n(S,"LI",{});var Sk=s(fs);Yse=n(Sk,"STRONG",{});var Rnt=s(Yse);Edo=r(Rnt,"layoutlmv3"),Rnt.forEach(t),Cdo=r(Sk," \u2014 "),QB=n(Sk,"A",{href:!0});var Pnt=s(QB);wdo=r(Pnt,"LayoutLMv3Tokenizer"),Pnt.forEach(t),Ado=r(Sk," or "),WB=n(Sk,"A",{href:!0});var Bnt=s(WB);Ldo=r(Bnt,"LayoutLMv3TokenizerFast"),Bnt.forEach(t),ydo=r(Sk," (LayoutLMv3 model)"),Sk.forEach(t),xdo=i(S),gs=n(S,"LI",{});var Rk=s(gs);Kse=n(Rk,"STRONG",{});var Int=s(Kse);$do=r(Int,"layoutxlm"),Int.forEach(t),kdo=r(Rk," \u2014 "),HB=n(Rk,"A",{href:!0});var Nnt=s(HB);Sdo=r(Nnt,"LayoutXLMTokenizer"),Nnt.forEach(t),Rdo=r(Rk," or "),UB=n(Rk,"A",{href:!0});var qnt=s(UB);Pdo=r(qnt,"LayoutXLMTokenizerFast"),qnt.forEach(t),Bdo=r(Rk," (LayoutXLM model)"),Rk.forEach(t),Ido=i(S),hs=n(S,"LI",{});var Pk=s(hs);Zse=n(Pk,"STRONG",{});var jnt=s(Zse);Ndo=r(jnt,"led"),jnt.forEach(t),qdo=r(Pk," \u2014 "),JB=n(Pk,"A",{href:!0});var Dnt=s(JB);jdo=r(Dnt,"LEDTokenizer"),Dnt.forEach(t),Ddo=r(Pk," or "),YB=n(Pk,"A",{href:!0});var Gnt=s(YB);Gdo=r(Gnt,"LEDTokenizerFast"),Gnt.forEach(t),Odo=r(Pk," (LED model)"),Pk.forEach(t),Vdo=i(S),us=n(S,"LI",{});var Bk=s(us);ele=n(Bk,"STRONG",{});var Ont=s(ele);Xdo=r(Ont,"longformer"),Ont.forEach(t),zdo=r(Bk," \u2014 "),KB=n(Bk,"A",{href:!0});var Vnt=s(KB);Qdo=r(Vnt,"LongformerTokenizer"),Vnt.forEach(t),Wdo=r(Bk," or "),ZB=n(Bk,"A",{href:!0});var Xnt=s(ZB);Hdo=r(Xnt,"LongformerTokenizerFast"),Xnt.forEach(t),Udo=r(Bk," (Longformer model)"),Bk.forEach(t),Jdo=i(S),ps=n(S,"LI",{});var Ik=s(ps);ole=n(Ik,"STRONG",{});var znt=s(ole);Ydo=r(znt,"longt5"),znt.forEach(t),Kdo=r(Ik," \u2014 "),eI=n(Ik,"A",{href:!0});var Qnt=s(eI);Zdo=r(Qnt,"T5Tokenizer"),Qnt.forEach(t),eco=r(Ik," or "),oI=n(Ik,"A",{href:!0});var Wnt=s(oI);oco=r(Wnt,"T5TokenizerFast"),Wnt.forEach(t),rco=r(Ik," (LongT5 model)"),Ik.forEach(t),tco=i(S),ih=n(S,"LI",{});var Fye=s(ih);rle=n(Fye,"STRONG",{});var Hnt=s(rle);aco=r(Hnt,"luke"),Hnt.forEach(t),nco=r(Fye," \u2014 "),rI=n(Fye,"A",{href:!0});var Unt=s(rI);sco=r(Unt,"LukeTokenizer"),Unt.forEach(t),lco=r(Fye," (LUKE model)"),Fye.forEach(t),ico=i(S),_s=n(S,"LI",{});var Nk=s(_s);tle=n(Nk,"STRONG",{});var Jnt=s(tle);dco=r(Jnt,"lxmert"),Jnt.forEach(t),cco=r(Nk," \u2014 "),tI=n(Nk,"A",{href:!0});var Ynt=s(tI);mco=r(Ynt,"LxmertTokenizer"),Ynt.forEach(t),fco=r(Nk," or "),aI=n(Nk,"A",{href:!0});var Knt=s(aI);gco=r(Knt,"LxmertTokenizerFast"),Knt.forEach(t),hco=r(Nk," (LXMERT model)"),Nk.forEach(t),uco=i(S),dh=n(S,"LI",{});var Tye=s(dh);ale=n(Tye,"STRONG",{});var Znt=s(ale);pco=r(Znt,"m2m_100"),Znt.forEach(t),_co=r(Tye," \u2014 "),nI=n(Tye,"A",{href:!0});var est=s(nI);bco=r(est,"M2M100Tokenizer"),est.forEach(t),vco=r(Tye," (M2M100 model)"),Tye.forEach(t),Fco=i(S),ch=n(S,"LI",{});var Mye=s(ch);nle=n(Mye,"STRONG",{});var ost=s(nle);Tco=r(ost,"marian"),ost.forEach(t),Mco=r(Mye," \u2014 "),sI=n(Mye,"A",{href:!0});var rst=s(sI);Eco=r(rst,"MarianTokenizer"),rst.forEach(t),Cco=r(Mye," (Marian model)"),Mye.forEach(t),wco=i(S),bs=n(S,"LI",{});var qk=s(bs);sle=n(qk,"STRONG",{});var tst=s(sle);Aco=r(tst,"mbart"),tst.forEach(t),Lco=r(qk," \u2014 "),lI=n(qk,"A",{href:!0});var ast=s(lI);yco=r(ast,"MBartTokenizer"),ast.forEach(t),xco=r(qk," or "),iI=n(qk,"A",{href:!0});var nst=s(iI);$co=r(nst,"MBartTokenizerFast"),nst.forEach(t),kco=r(qk," (mBART model)"),qk.forEach(t),Sco=i(S),vs=n(S,"LI",{});var jk=s(vs);lle=n(jk,"STRONG",{});var sst=s(lle);Rco=r(sst,"mbart50"),sst.forEach(t),Pco=r(jk," \u2014 "),dI=n(jk,"A",{href:!0});var lst=s(dI);Bco=r(lst,"MBart50Tokenizer"),lst.forEach(t),Ico=r(jk," or "),cI=n(jk,"A",{href:!0});var ist=s(cI);Nco=r(ist,"MBart50TokenizerFast"),ist.forEach(t),qco=r(jk," (mBART-50 model)"),jk.forEach(t),jco=i(S),Fs=n(S,"LI",{});var Dk=s(Fs);ile=n(Dk,"STRONG",{});var dst=s(ile);Dco=r(dst,"megatron-bert"),dst.forEach(t),Gco=r(Dk," \u2014 "),mI=n(Dk,"A",{href:!0});var cst=s(mI);Oco=r(cst,"BertTokenizer"),cst.forEach(t),Vco=r(Dk," or "),fI=n(Dk,"A",{href:!0});var mst=s(fI);Xco=r(mst,"BertTokenizerFast"),mst.forEach(t),zco=r(Dk," (Megatron-BERT model)"),Dk.forEach(t),Qco=i(S),mh=n(S,"LI",{});var Eye=s(mh);dle=n(Eye,"STRONG",{});var fst=s(dle);Wco=r(fst,"mluke"),fst.forEach(t),Hco=r(Eye," \u2014 "),gI=n(Eye,"A",{href:!0});var gst=s(gI);Uco=r(gst,"MLukeTokenizer"),gst.forEach(t),Jco=r(Eye," (mLUKE model)"),Eye.forEach(t),Yco=i(S),Ts=n(S,"LI",{});var Gk=s(Ts);cle=n(Gk,"STRONG",{});var hst=s(cle);Kco=r(hst,"mobilebert"),hst.forEach(t),Zco=r(Gk," \u2014 "),hI=n(Gk,"A",{href:!0});var ust=s(hI);emo=r(ust,"MobileBertTokenizer"),ust.forEach(t),omo=r(Gk," or "),uI=n(Gk,"A",{href:!0});var pst=s(uI);rmo=r(pst,"MobileBertTokenizerFast"),pst.forEach(t),tmo=r(Gk," (MobileBERT model)"),Gk.forEach(t),amo=i(S),Ms=n(S,"LI",{});var Ok=s(Ms);mle=n(Ok,"STRONG",{});var _st=s(mle);nmo=r(_st,"mpnet"),_st.forEach(t),smo=r(Ok," \u2014 "),pI=n(Ok,"A",{href:!0});var bst=s(pI);lmo=r(bst,"MPNetTokenizer"),bst.forEach(t),imo=r(Ok," or "),_I=n(Ok,"A",{href:!0});var vst=s(_I);dmo=r(vst,"MPNetTokenizerFast"),vst.forEach(t),cmo=r(Ok," (MPNet model)"),Ok.forEach(t),mmo=i(S),Es=n(S,"LI",{});var Vk=s(Es);fle=n(Vk,"STRONG",{});var Fst=s(fle);fmo=r(Fst,"mt5"),Fst.forEach(t),gmo=r(Vk," \u2014 "),bI=n(Vk,"A",{href:!0});var Tst=s(bI);hmo=r(Tst,"MT5Tokenizer"),Tst.forEach(t),umo=r(Vk," or "),vI=n(Vk,"A",{href:!0});var Mst=s(vI);pmo=r(Mst,"MT5TokenizerFast"),Mst.forEach(t),_mo=r(Vk," (MT5 model)"),Vk.forEach(t),bmo=i(S),Cs=n(S,"LI",{});var Xk=s(Cs);gle=n(Xk,"STRONG",{});var Est=s(gle);vmo=r(Est,"nezha"),Est.forEach(t),Fmo=r(Xk," \u2014 "),FI=n(Xk,"A",{href:!0});var Cst=s(FI);Tmo=r(Cst,"BertTokenizer"),Cst.forEach(t),Mmo=r(Xk," or "),TI=n(Xk,"A",{href:!0});var wst=s(TI);Emo=r(wst,"BertTokenizerFast"),wst.forEach(t),Cmo=r(Xk," (Nezha model)"),Xk.forEach(t),wmo=i(S),ws=n(S,"LI",{});var zk=s(ws);hle=n(zk,"STRONG",{});var Ast=s(hle);Amo=r(Ast,"nystromformer"),Ast.forEach(t),Lmo=r(zk," \u2014 "),MI=n(zk,"A",{href:!0});var Lst=s(MI);ymo=r(Lst,"AlbertTokenizer"),Lst.forEach(t),xmo=r(zk," or "),EI=n(zk,"A",{href:!0});var yst=s(EI);$mo=r(yst,"AlbertTokenizerFast"),yst.forEach(t),kmo=r(zk," (Nystr\xF6mformer model)"),zk.forEach(t),Smo=i(S),As=n(S,"LI",{});var Qk=s(As);ule=n(Qk,"STRONG",{});var xst=s(ule);Rmo=r(xst,"openai-gpt"),xst.forEach(t),Pmo=r(Qk," \u2014 "),CI=n(Qk,"A",{href:!0});var $st=s(CI);Bmo=r($st,"OpenAIGPTTokenizer"),$st.forEach(t),Imo=r(Qk," or "),wI=n(Qk,"A",{href:!0});var kst=s(wI);Nmo=r(kst,"OpenAIGPTTokenizerFast"),kst.forEach(t),qmo=r(Qk," (OpenAI GPT model)"),Qk.forEach(t),jmo=i(S),fh=n(S,"LI",{});var Cye=s(fh);ple=n(Cye,"STRONG",{});var Sst=s(ple);Dmo=r(Sst,"opt"),Sst.forEach(t),Gmo=r(Cye," \u2014 "),AI=n(Cye,"A",{href:!0});var Rst=s(AI);Omo=r(Rst,"GPT2Tokenizer"),Rst.forEach(t),Vmo=r(Cye," (OPT model)"),Cye.forEach(t),Xmo=i(S),Ls=n(S,"LI",{});var Wk=s(Ls);_le=n(Wk,"STRONG",{});var Pst=s(_le);zmo=r(Pst,"pegasus"),Pst.forEach(t),Qmo=r(Wk," \u2014 "),LI=n(Wk,"A",{href:!0});var Bst=s(LI);Wmo=r(Bst,"PegasusTokenizer"),Bst.forEach(t),Hmo=r(Wk," or "),yI=n(Wk,"A",{href:!0});var Ist=s(yI);Umo=r(Ist,"PegasusTokenizerFast"),Ist.forEach(t),Jmo=r(Wk," (Pegasus model)"),Wk.forEach(t),Ymo=i(S),gh=n(S,"LI",{});var wye=s(gh);ble=n(wye,"STRONG",{});var Nst=s(ble);Kmo=r(Nst,"perceiver"),Nst.forEach(t),Zmo=r(wye," \u2014 "),xI=n(wye,"A",{href:!0});var qst=s(xI);efo=r(qst,"PerceiverTokenizer"),qst.forEach(t),ofo=r(wye," (Perceiver model)"),wye.forEach(t),rfo=i(S),hh=n(S,"LI",{});var Aye=s(hh);vle=n(Aye,"STRONG",{});var jst=s(vle);tfo=r(jst,"phobert"),jst.forEach(t),afo=r(Aye," \u2014 "),$I=n(Aye,"A",{href:!0});var Dst=s($I);nfo=r(Dst,"PhobertTokenizer"),Dst.forEach(t),sfo=r(Aye," (PhoBERT model)"),Aye.forEach(t),lfo=i(S),uh=n(S,"LI",{});var Lye=s(uh);Fle=n(Lye,"STRONG",{});var Gst=s(Fle);ifo=r(Gst,"plbart"),Gst.forEach(t),dfo=r(Lye," \u2014 "),kI=n(Lye,"A",{href:!0});var Ost=s(kI);cfo=r(Ost,"PLBartTokenizer"),Ost.forEach(t),mfo=r(Lye," (PLBart model)"),Lye.forEach(t),ffo=i(S),ph=n(S,"LI",{});var yye=s(ph);Tle=n(yye,"STRONG",{});var Vst=s(Tle);gfo=r(Vst,"prophetnet"),Vst.forEach(t),hfo=r(yye," \u2014 "),SI=n(yye,"A",{href:!0});var Xst=s(SI);ufo=r(Xst,"ProphetNetTokenizer"),Xst.forEach(t),pfo=r(yye," (ProphetNet model)"),yye.forEach(t),_fo=i(S),ys=n(S,"LI",{});var Hk=s(ys);Mle=n(Hk,"STRONG",{});var zst=s(Mle);bfo=r(zst,"qdqbert"),zst.forEach(t),vfo=r(Hk," \u2014 "),RI=n(Hk,"A",{href:!0});var Qst=s(RI);Ffo=r(Qst,"BertTokenizer"),Qst.forEach(t),Tfo=r(Hk," or "),PI=n(Hk,"A",{href:!0});var Wst=s(PI);Mfo=r(Wst,"BertTokenizerFast"),Wst.forEach(t),Efo=r(Hk," (QDQBert model)"),Hk.forEach(t),Cfo=i(S),_h=n(S,"LI",{});var xye=s(_h);Ele=n(xye,"STRONG",{});var Hst=s(Ele);wfo=r(Hst,"rag"),Hst.forEach(t),Afo=r(xye," \u2014 "),BI=n(xye,"A",{href:!0});var Ust=s(BI);Lfo=r(Ust,"RagTokenizer"),Ust.forEach(t),yfo=r(xye," (RAG model)"),xye.forEach(t),xfo=i(S),xs=n(S,"LI",{});var Uk=s(xs);Cle=n(Uk,"STRONG",{});var Jst=s(Cle);$fo=r(Jst,"realm"),Jst.forEach(t),kfo=r(Uk," \u2014 "),II=n(Uk,"A",{href:!0});var Yst=s(II);Sfo=r(Yst,"RealmTokenizer"),Yst.forEach(t),Rfo=r(Uk," or "),NI=n(Uk,"A",{href:!0});var Kst=s(NI);Pfo=r(Kst,"RealmTokenizerFast"),Kst.forEach(t),Bfo=r(Uk," (REALM model)"),Uk.forEach(t),Ifo=i(S),$s=n(S,"LI",{});var Jk=s($s);wle=n(Jk,"STRONG",{});var Zst=s(wle);Nfo=r(Zst,"reformer"),Zst.forEach(t),qfo=r(Jk," \u2014 "),qI=n(Jk,"A",{href:!0});var elt=s(qI);jfo=r(elt,"ReformerTokenizer"),elt.forEach(t),Dfo=r(Jk," or "),jI=n(Jk,"A",{href:!0});var olt=s(jI);Gfo=r(olt,"ReformerTokenizerFast"),olt.forEach(t),Ofo=r(Jk," (Reformer model)"),Jk.forEach(t),Vfo=i(S),ks=n(S,"LI",{});var Yk=s(ks);Ale=n(Yk,"STRONG",{});var rlt=s(Ale);Xfo=r(rlt,"rembert"),rlt.forEach(t),zfo=r(Yk," \u2014 "),DI=n(Yk,"A",{href:!0});var tlt=s(DI);Qfo=r(tlt,"RemBertTokenizer"),tlt.forEach(t),Wfo=r(Yk," or "),GI=n(Yk,"A",{href:!0});var alt=s(GI);Hfo=r(alt,"RemBertTokenizerFast"),alt.forEach(t),Ufo=r(Yk," (RemBERT model)"),Yk.forEach(t),Jfo=i(S),Ss=n(S,"LI",{});var Kk=s(Ss);Lle=n(Kk,"STRONG",{});var nlt=s(Lle);Yfo=r(nlt,"retribert"),nlt.forEach(t),Kfo=r(Kk," \u2014 "),OI=n(Kk,"A",{href:!0});var slt=s(OI);Zfo=r(slt,"RetriBertTokenizer"),slt.forEach(t),ego=r(Kk," or "),VI=n(Kk,"A",{href:!0});var llt=s(VI);ogo=r(llt,"RetriBertTokenizerFast"),llt.forEach(t),rgo=r(Kk," (RetriBERT model)"),Kk.forEach(t),tgo=i(S),Rs=n(S,"LI",{});var Zk=s(Rs);yle=n(Zk,"STRONG",{});var ilt=s(yle);ago=r(ilt,"roberta"),ilt.forEach(t),ngo=r(Zk," \u2014 "),XI=n(Zk,"A",{href:!0});var dlt=s(XI);sgo=r(dlt,"RobertaTokenizer"),dlt.forEach(t),lgo=r(Zk," or "),zI=n(Zk,"A",{href:!0});var clt=s(zI);igo=r(clt,"RobertaTokenizerFast"),clt.forEach(t),dgo=r(Zk," (RoBERTa model)"),Zk.forEach(t),cgo=i(S),Ps=n(S,"LI",{});var eS=s(Ps);xle=n(eS,"STRONG",{});var mlt=s(xle);mgo=r(mlt,"roformer"),mlt.forEach(t),fgo=r(eS," \u2014 "),QI=n(eS,"A",{href:!0});var flt=s(QI);ggo=r(flt,"RoFormerTokenizer"),flt.forEach(t),hgo=r(eS," or "),WI=n(eS,"A",{href:!0});var glt=s(WI);ugo=r(glt,"RoFormerTokenizerFast"),glt.forEach(t),pgo=r(eS," (RoFormer model)"),eS.forEach(t),_go=i(S),bh=n(S,"LI",{});var $ye=s(bh);$le=n($ye,"STRONG",{});var hlt=s($le);bgo=r(hlt,"speech_to_text"),hlt.forEach(t),vgo=r($ye," \u2014 "),HI=n($ye,"A",{href:!0});var ult=s(HI);Fgo=r(ult,"Speech2TextTokenizer"),ult.forEach(t),Tgo=r($ye," (Speech2Text model)"),$ye.forEach(t),Mgo=i(S),vh=n(S,"LI",{});var kye=s(vh);kle=n(kye,"STRONG",{});var plt=s(kle);Ego=r(plt,"speech_to_text_2"),plt.forEach(t),Cgo=r(kye," \u2014 "),UI=n(kye,"A",{href:!0});var _lt=s(UI);wgo=r(_lt,"Speech2Text2Tokenizer"),_lt.forEach(t),Ago=r(kye," (Speech2Text2 model)"),kye.forEach(t),Lgo=i(S),Bs=n(S,"LI",{});var oS=s(Bs);Sle=n(oS,"STRONG",{});var blt=s(Sle);ygo=r(blt,"splinter"),blt.forEach(t),xgo=r(oS," \u2014 "),JI=n(oS,"A",{href:!0});var vlt=s(JI);$go=r(vlt,"SplinterTokenizer"),vlt.forEach(t),kgo=r(oS," or "),YI=n(oS,"A",{href:!0});var Flt=s(YI);Sgo=r(Flt,"SplinterTokenizerFast"),Flt.forEach(t),Rgo=r(oS," (Splinter model)"),oS.forEach(t),Pgo=i(S),Is=n(S,"LI",{});var rS=s(Is);Rle=n(rS,"STRONG",{});var Tlt=s(Rle);Bgo=r(Tlt,"squeezebert"),Tlt.forEach(t),Igo=r(rS," \u2014 "),KI=n(rS,"A",{href:!0});var Mlt=s(KI);Ngo=r(Mlt,"SqueezeBertTokenizer"),Mlt.forEach(t),qgo=r(rS," or "),ZI=n(rS,"A",{href:!0});var Elt=s(ZI);jgo=r(Elt,"SqueezeBertTokenizerFast"),Elt.forEach(t),Dgo=r(rS," (SqueezeBERT model)"),rS.forEach(t),Ggo=i(S),Ns=n(S,"LI",{});var tS=s(Ns);Ple=n(tS,"STRONG",{});var Clt=s(Ple);Ogo=r(Clt,"t5"),Clt.forEach(t),Vgo=r(tS," \u2014 "),eN=n(tS,"A",{href:!0});var wlt=s(eN);Xgo=r(wlt,"T5Tokenizer"),wlt.forEach(t),zgo=r(tS," or "),oN=n(tS,"A",{href:!0});var Alt=s(oN);Qgo=r(Alt,"T5TokenizerFast"),Alt.forEach(t),Wgo=r(tS," (T5 model)"),tS.forEach(t),Hgo=i(S),Fh=n(S,"LI",{});var Sye=s(Fh);Ble=n(Sye,"STRONG",{});var Llt=s(Ble);Ugo=r(Llt,"tapas"),Llt.forEach(t),Jgo=r(Sye," \u2014 "),rN=n(Sye,"A",{href:!0});var ylt=s(rN);Ygo=r(ylt,"TapasTokenizer"),ylt.forEach(t),Kgo=r(Sye," (TAPAS model)"),Sye.forEach(t),Zgo=i(S),Th=n(S,"LI",{});var Rye=s(Th);Ile=n(Rye,"STRONG",{});var xlt=s(Ile);eho=r(xlt,"tapex"),xlt.forEach(t),oho=r(Rye," \u2014 "),tN=n(Rye,"A",{href:!0});var $lt=s(tN);rho=r($lt,"TapexTokenizer"),$lt.forEach(t),tho=r(Rye," (TAPEX model)"),Rye.forEach(t),aho=i(S),Mh=n(S,"LI",{});var Pye=s(Mh);Nle=n(Pye,"STRONG",{});var klt=s(Nle);nho=r(klt,"transfo-xl"),klt.forEach(t),sho=r(Pye," \u2014 "),aN=n(Pye,"A",{href:!0});var Slt=s(aN);lho=r(Slt,"TransfoXLTokenizer"),Slt.forEach(t),iho=r(Pye," (Transformer-XL model)"),Pye.forEach(t),dho=i(S),qs=n(S,"LI",{});var aS=s(qs);qle=n(aS,"STRONG",{});var Rlt=s(qle);cho=r(Rlt,"vilt"),Rlt.forEach(t),mho=r(aS," \u2014 "),nN=n(aS,"A",{href:!0});var Plt=s(nN);fho=r(Plt,"BertTokenizer"),Plt.forEach(t),gho=r(aS," or "),sN=n(aS,"A",{href:!0});var Blt=s(sN);hho=r(Blt,"BertTokenizerFast"),Blt.forEach(t),uho=r(aS," (ViLT model)"),aS.forEach(t),pho=i(S),js=n(S,"LI",{});var nS=s(js);jle=n(nS,"STRONG",{});var Ilt=s(jle);_ho=r(Ilt,"visual_bert"),Ilt.forEach(t),bho=r(nS," \u2014 "),lN=n(nS,"A",{href:!0});var Nlt=s(lN);vho=r(Nlt,"BertTokenizer"),Nlt.forEach(t),Fho=r(nS," or "),iN=n(nS,"A",{href:!0});var qlt=s(iN);Tho=r(qlt,"BertTokenizerFast"),qlt.forEach(t),Mho=r(nS," (VisualBERT model)"),nS.forEach(t),Eho=i(S),Eh=n(S,"LI",{});var Bye=s(Eh);Dle=n(Bye,"STRONG",{});var jlt=s(Dle);Cho=r(jlt,"wav2vec2"),jlt.forEach(t),who=r(Bye," \u2014 "),dN=n(Bye,"A",{href:!0});var Dlt=s(dN);Aho=r(Dlt,"Wav2Vec2CTCTokenizer"),Dlt.forEach(t),Lho=r(Bye," (Wav2Vec2 model)"),Bye.forEach(t),yho=i(S),Ch=n(S,"LI",{});var Iye=s(Ch);Gle=n(Iye,"STRONG",{});var Glt=s(Gle);xho=r(Glt,"wav2vec2-conformer"),Glt.forEach(t),$ho=r(Iye," \u2014 "),cN=n(Iye,"A",{href:!0});var Olt=s(cN);kho=r(Olt,"Wav2Vec2CTCTokenizer"),Olt.forEach(t),Sho=r(Iye," (Wav2Vec2-Conformer model)"),Iye.forEach(t),Rho=i(S),wh=n(S,"LI",{});var Nye=s(wh);Ole=n(Nye,"STRONG",{});var Vlt=s(Ole);Pho=r(Vlt,"wav2vec2_phoneme"),Vlt.forEach(t),Bho=r(Nye," \u2014 "),mN=n(Nye,"A",{href:!0});var Xlt=s(mN);Iho=r(Xlt,"Wav2Vec2PhonemeCTCTokenizer"),Xlt.forEach(t),Nho=r(Nye," (Wav2Vec2Phoneme model)"),Nye.forEach(t),qho=i(S),Ds=n(S,"LI",{});var sS=s(Ds);Vle=n(sS,"STRONG",{});var zlt=s(Vle);jho=r(zlt,"xglm"),zlt.forEach(t),Dho=r(sS," \u2014 "),fN=n(sS,"A",{href:!0});var Qlt=s(fN);Gho=r(Qlt,"XGLMTokenizer"),Qlt.forEach(t),Oho=r(sS," or "),gN=n(sS,"A",{href:!0});var Wlt=s(gN);Vho=r(Wlt,"XGLMTokenizerFast"),Wlt.forEach(t),Xho=r(sS," (XGLM model)"),sS.forEach(t),zho=i(S),Ah=n(S,"LI",{});var qye=s(Ah);Xle=n(qye,"STRONG",{});var Hlt=s(Xle);Qho=r(Hlt,"xlm"),Hlt.forEach(t),Who=r(qye," \u2014 "),hN=n(qye,"A",{href:!0});var Ult=s(hN);Hho=r(Ult,"XLMTokenizer"),Ult.forEach(t),Uho=r(qye," (XLM model)"),qye.forEach(t),Jho=i(S),Lh=n(S,"LI",{});var jye=s(Lh);zle=n(jye,"STRONG",{});var Jlt=s(zle);Yho=r(Jlt,"xlm-prophetnet"),Jlt.forEach(t),Kho=r(jye," \u2014 "),uN=n(jye,"A",{href:!0});var Ylt=s(uN);Zho=r(Ylt,"XLMProphetNetTokenizer"),Ylt.forEach(t),euo=r(jye," (XLM-ProphetNet model)"),jye.forEach(t),ouo=i(S),Gs=n(S,"LI",{});var lS=s(Gs);Qle=n(lS,"STRONG",{});var Klt=s(Qle);ruo=r(Klt,"xlm-roberta"),Klt.forEach(t),tuo=r(lS," \u2014 "),pN=n(lS,"A",{href:!0});var Zlt=s(pN);auo=r(Zlt,"XLMRobertaTokenizer"),Zlt.forEach(t),nuo=r(lS," or "),_N=n(lS,"A",{href:!0});var eit=s(_N);suo=r(eit,"XLMRobertaTokenizerFast"),eit.forEach(t),luo=r(lS," (XLM-RoBERTa model)"),lS.forEach(t),iuo=i(S),Os=n(S,"LI",{});var iS=s(Os);Wle=n(iS,"STRONG",{});var oit=s(Wle);duo=r(oit,"xlm-roberta-xl"),oit.forEach(t),cuo=r(iS," \u2014 "),bN=n(iS,"A",{href:!0});var rit=s(bN);muo=r(rit,"RobertaTokenizer"),rit.forEach(t),fuo=r(iS," or "),vN=n(iS,"A",{href:!0});var tit=s(vN);guo=r(tit,"RobertaTokenizerFast"),tit.forEach(t),huo=r(iS," (XLM-RoBERTa-XL model)"),iS.forEach(t),uuo=i(S),Vs=n(S,"LI",{});var dS=s(Vs);Hle=n(dS,"STRONG",{});var ait=s(Hle);puo=r(ait,"xlnet"),ait.forEach(t),_uo=r(dS," \u2014 "),FN=n(dS,"A",{href:!0});var nit=s(FN);buo=r(nit,"XLNetTokenizer"),nit.forEach(t),vuo=r(dS," or "),TN=n(dS,"A",{href:!0});var sit=s(TN);Fuo=r(sit,"XLNetTokenizerFast"),sit.forEach(t),Tuo=r(dS," (XLNet model)"),dS.forEach(t),Muo=i(S),Xs=n(S,"LI",{});var cS=s(Xs);Ule=n(cS,"STRONG",{});var lit=s(Ule);Euo=r(lit,"yoso"),lit.forEach(t),Cuo=r(cS," \u2014 "),MN=n(cS,"A",{href:!0});var iit=s(MN);wuo=r(iit,"AlbertTokenizer"),iit.forEach(t),Auo=r(cS," or "),EN=n(cS,"A",{href:!0});var dit=s(EN);Luo=r(dit,"AlbertTokenizerFast"),dit.forEach(t),yuo=r(cS," (YOSO model)"),cS.forEach(t),S.forEach(t),xuo=i(Js),T(yh.$$.fragment,Js),Js.forEach(t),$uo=i(Us),xh=n(Us,"DIV",{class:!0});var GXe=s(xh);T(Z7.$$.fragment,GXe),kuo=i(GXe),Jle=n(GXe,"P",{});var cit=s(Jle);Suo=r(cit,"Register a new tokenizer in this mapping."),cit.forEach(t),GXe.forEach(t),Us.forEach(t),DOe=i(m),Bi=n(m,"H2",{class:!0});var OXe=s(Bi);$h=n(OXe,"A",{id:!0,class:!0,href:!0});var mit=s($h);Yle=n(mit,"SPAN",{});var fit=s(Yle);T(ey.$$.fragment,fit),fit.forEach(t),mit.forEach(t),Ruo=i(OXe),Kle=n(OXe,"SPAN",{});var git=s(Kle);Puo=r(git,"AutoFeatureExtractor"),git.forEach(t),OXe.forEach(t),GOe=i(m),Lo=n(m,"DIV",{class:!0});var Ys=s(Lo);T(oy.$$.fragment,Ys),Buo=i(Ys),ry=n(Ys,"P",{});var VXe=s(ry);Iuo=r(VXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CN=n(VXe,"A",{href:!0});var hit=s(CN);Nuo=r(hit,"AutoFeatureExtractor.from_pretrained()"),hit.forEach(t),quo=r(VXe," class method."),VXe.forEach(t),juo=i(Ys),ty=n(Ys,"P",{});var XXe=s(ty);Duo=r(XXe,"This class cannot be instantiated directly using "),Zle=n(XXe,"CODE",{});var uit=s(Zle);Guo=r(uit,"__init__()"),uit.forEach(t),Ouo=r(XXe," (throws an error)."),XXe.forEach(t),Vuo=i(Ys),He=n(Ys,"DIV",{class:!0});var ta=s(He);T(ay.$$.fragment,ta),Xuo=i(ta),eie=n(ta,"P",{});var pit=s(eie);zuo=r(pit,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),pit.forEach(t),Quo=i(ta),Ra=n(ta,"P",{});var O6=s(Ra);Wuo=r(O6,"The feature extractor class to instantiate is selected based on the "),oie=n(O6,"CODE",{});var _it=s(oie);Huo=r(_it,"model_type"),_it.forEach(t),Uuo=r(O6,` property of the config object
(either passed as an argument or loaded from `),rie=n(O6,"CODE",{});var bit=s(rie);Juo=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),Yuo=r(O6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tie=n(O6,"CODE",{});var vit=s(tie);Kuo=r(vit,"pretrained_model_name_or_path"),vit.forEach(t),Zuo=r(O6,":"),O6.forEach(t),epo=i(ta),Y=n(ta,"UL",{});var K=s(Y);kh=n(K,"LI",{});var Dye=s(kh);aie=n(Dye,"STRONG",{});var Fit=s(aie);opo=r(Fit,"beit"),Fit.forEach(t),rpo=r(Dye," \u2014 "),wN=n(Dye,"A",{href:!0});var Tit=s(wN);tpo=r(Tit,"BeitFeatureExtractor"),Tit.forEach(t),apo=r(Dye," (BEiT model)"),Dye.forEach(t),npo=i(K),Sh=n(K,"LI",{});var Gye=s(Sh);nie=n(Gye,"STRONG",{});var Mit=s(nie);spo=r(Mit,"clip"),Mit.forEach(t),lpo=r(Gye," \u2014 "),AN=n(Gye,"A",{href:!0});var Eit=s(AN);ipo=r(Eit,"CLIPFeatureExtractor"),Eit.forEach(t),dpo=r(Gye," (CLIP model)"),Gye.forEach(t),cpo=i(K),Rh=n(K,"LI",{});var Oye=s(Rh);sie=n(Oye,"STRONG",{});var Cit=s(sie);mpo=r(Cit,"convnext"),Cit.forEach(t),fpo=r(Oye," \u2014 "),LN=n(Oye,"A",{href:!0});var wit=s(LN);gpo=r(wit,"ConvNextFeatureExtractor"),wit.forEach(t),hpo=r(Oye," (ConvNeXT model)"),Oye.forEach(t),upo=i(K),Ph=n(K,"LI",{});var Vye=s(Ph);lie=n(Vye,"STRONG",{});var Ait=s(lie);ppo=r(Ait,"cvt"),Ait.forEach(t),_po=r(Vye," \u2014 "),yN=n(Vye,"A",{href:!0});var Lit=s(yN);bpo=r(Lit,"ConvNextFeatureExtractor"),Lit.forEach(t),vpo=r(Vye," (CvT model)"),Vye.forEach(t),Fpo=i(K),Bh=n(K,"LI",{});var Xye=s(Bh);iie=n(Xye,"STRONG",{});var yit=s(iie);Tpo=r(yit,"data2vec-audio"),yit.forEach(t),Mpo=r(Xye," \u2014 "),xN=n(Xye,"A",{href:!0});var xit=s(xN);Epo=r(xit,"Wav2Vec2FeatureExtractor"),xit.forEach(t),Cpo=r(Xye," (Data2VecAudio model)"),Xye.forEach(t),wpo=i(K),Ih=n(K,"LI",{});var zye=s(Ih);die=n(zye,"STRONG",{});var $it=s(die);Apo=r($it,"data2vec-vision"),$it.forEach(t),Lpo=r(zye," \u2014 "),$N=n(zye,"A",{href:!0});var kit=s($N);ypo=r(kit,"BeitFeatureExtractor"),kit.forEach(t),xpo=r(zye," (Data2VecVision model)"),zye.forEach(t),$po=i(K),Nh=n(K,"LI",{});var Qye=s(Nh);cie=n(Qye,"STRONG",{});var Sit=s(cie);kpo=r(Sit,"deit"),Sit.forEach(t),Spo=r(Qye," \u2014 "),kN=n(Qye,"A",{href:!0});var Rit=s(kN);Rpo=r(Rit,"DeiTFeatureExtractor"),Rit.forEach(t),Ppo=r(Qye," (DeiT model)"),Qye.forEach(t),Bpo=i(K),qh=n(K,"LI",{});var Wye=s(qh);mie=n(Wye,"STRONG",{});var Pit=s(mie);Ipo=r(Pit,"detr"),Pit.forEach(t),Npo=r(Wye," \u2014 "),SN=n(Wye,"A",{href:!0});var Bit=s(SN);qpo=r(Bit,"DetrFeatureExtractor"),Bit.forEach(t),jpo=r(Wye," (DETR model)"),Wye.forEach(t),Dpo=i(K),jh=n(K,"LI",{});var Hye=s(jh);fie=n(Hye,"STRONG",{});var Iit=s(fie);Gpo=r(Iit,"dpt"),Iit.forEach(t),Opo=r(Hye," \u2014 "),RN=n(Hye,"A",{href:!0});var Nit=s(RN);Vpo=r(Nit,"DPTFeatureExtractor"),Nit.forEach(t),Xpo=r(Hye," (DPT model)"),Hye.forEach(t),zpo=i(K),Dh=n(K,"LI",{});var Uye=s(Dh);gie=n(Uye,"STRONG",{});var qit=s(gie);Qpo=r(qit,"flava"),qit.forEach(t),Wpo=r(Uye," \u2014 "),PN=n(Uye,"A",{href:!0});var jit=s(PN);Hpo=r(jit,"FlavaFeatureExtractor"),jit.forEach(t),Upo=r(Uye," (FLAVA model)"),Uye.forEach(t),Jpo=i(K),Gh=n(K,"LI",{});var Jye=s(Gh);hie=n(Jye,"STRONG",{});var Dit=s(hie);Ypo=r(Dit,"glpn"),Dit.forEach(t),Kpo=r(Jye," \u2014 "),BN=n(Jye,"A",{href:!0});var Git=s(BN);Zpo=r(Git,"GLPNFeatureExtractor"),Git.forEach(t),e_o=r(Jye," (GLPN model)"),Jye.forEach(t),o_o=i(K),Oh=n(K,"LI",{});var Yye=s(Oh);uie=n(Yye,"STRONG",{});var Oit=s(uie);r_o=r(Oit,"groupvit"),Oit.forEach(t),t_o=r(Yye," \u2014 "),IN=n(Yye,"A",{href:!0});var Vit=s(IN);a_o=r(Vit,"CLIPFeatureExtractor"),Vit.forEach(t),n_o=r(Yye," (GroupViT model)"),Yye.forEach(t),s_o=i(K),Vh=n(K,"LI",{});var Kye=s(Vh);pie=n(Kye,"STRONG",{});var Xit=s(pie);l_o=r(Xit,"hubert"),Xit.forEach(t),i_o=r(Kye," \u2014 "),NN=n(Kye,"A",{href:!0});var zit=s(NN);d_o=r(zit,"Wav2Vec2FeatureExtractor"),zit.forEach(t),c_o=r(Kye," (Hubert model)"),Kye.forEach(t),m_o=i(K),Xh=n(K,"LI",{});var Zye=s(Xh);_ie=n(Zye,"STRONG",{});var Qit=s(_ie);f_o=r(Qit,"imagegpt"),Qit.forEach(t),g_o=r(Zye," \u2014 "),qN=n(Zye,"A",{href:!0});var Wit=s(qN);h_o=r(Wit,"ImageGPTFeatureExtractor"),Wit.forEach(t),u_o=r(Zye," (ImageGPT model)"),Zye.forEach(t),p_o=i(K),zh=n(K,"LI",{});var e8e=s(zh);bie=n(e8e,"STRONG",{});var Hit=s(bie);__o=r(Hit,"layoutlmv2"),Hit.forEach(t),b_o=r(e8e," \u2014 "),jN=n(e8e,"A",{href:!0});var Uit=s(jN);v_o=r(Uit,"LayoutLMv2FeatureExtractor"),Uit.forEach(t),F_o=r(e8e," (LayoutLMv2 model)"),e8e.forEach(t),T_o=i(K),Qh=n(K,"LI",{});var o8e=s(Qh);vie=n(o8e,"STRONG",{});var Jit=s(vie);M_o=r(Jit,"layoutlmv3"),Jit.forEach(t),E_o=r(o8e," \u2014 "),DN=n(o8e,"A",{href:!0});var Yit=s(DN);C_o=r(Yit,"LayoutLMv3FeatureExtractor"),Yit.forEach(t),w_o=r(o8e," (LayoutLMv3 model)"),o8e.forEach(t),A_o=i(K),Wh=n(K,"LI",{});var r8e=s(Wh);Fie=n(r8e,"STRONG",{});var Kit=s(Fie);L_o=r(Kit,"levit"),Kit.forEach(t),y_o=r(r8e," \u2014 "),GN=n(r8e,"A",{href:!0});var Zit=s(GN);x_o=r(Zit,"LevitFeatureExtractor"),Zit.forEach(t),$_o=r(r8e," (LeViT model)"),r8e.forEach(t),k_o=i(K),Hh=n(K,"LI",{});var t8e=s(Hh);Tie=n(t8e,"STRONG",{});var edt=s(Tie);S_o=r(edt,"maskformer"),edt.forEach(t),R_o=r(t8e," \u2014 "),ON=n(t8e,"A",{href:!0});var odt=s(ON);P_o=r(odt,"MaskFormerFeatureExtractor"),odt.forEach(t),B_o=r(t8e," (MaskFormer model)"),t8e.forEach(t),I_o=i(K),Uh=n(K,"LI",{});var a8e=s(Uh);Mie=n(a8e,"STRONG",{});var rdt=s(Mie);N_o=r(rdt,"mctct"),rdt.forEach(t),q_o=r(a8e," \u2014 "),VN=n(a8e,"A",{href:!0});var tdt=s(VN);j_o=r(tdt,"MCTCTFeatureExtractor"),tdt.forEach(t),D_o=r(a8e," (M-CTC-T model)"),a8e.forEach(t),G_o=i(K),Jh=n(K,"LI",{});var n8e=s(Jh);Eie=n(n8e,"STRONG",{});var adt=s(Eie);O_o=r(adt,"perceiver"),adt.forEach(t),V_o=r(n8e," \u2014 "),XN=n(n8e,"A",{href:!0});var ndt=s(XN);X_o=r(ndt,"PerceiverFeatureExtractor"),ndt.forEach(t),z_o=r(n8e," (Perceiver model)"),n8e.forEach(t),Q_o=i(K),Yh=n(K,"LI",{});var s8e=s(Yh);Cie=n(s8e,"STRONG",{});var sdt=s(Cie);W_o=r(sdt,"poolformer"),sdt.forEach(t),H_o=r(s8e," \u2014 "),zN=n(s8e,"A",{href:!0});var ldt=s(zN);U_o=r(ldt,"PoolFormerFeatureExtractor"),ldt.forEach(t),J_o=r(s8e," (PoolFormer model)"),s8e.forEach(t),Y_o=i(K),Kh=n(K,"LI",{});var l8e=s(Kh);wie=n(l8e,"STRONG",{});var idt=s(wie);K_o=r(idt,"regnet"),idt.forEach(t),Z_o=r(l8e," \u2014 "),QN=n(l8e,"A",{href:!0});var ddt=s(QN);e2o=r(ddt,"ConvNextFeatureExtractor"),ddt.forEach(t),o2o=r(l8e," (RegNet model)"),l8e.forEach(t),r2o=i(K),Zh=n(K,"LI",{});var i8e=s(Zh);Aie=n(i8e,"STRONG",{});var cdt=s(Aie);t2o=r(cdt,"resnet"),cdt.forEach(t),a2o=r(i8e," \u2014 "),WN=n(i8e,"A",{href:!0});var mdt=s(WN);n2o=r(mdt,"ConvNextFeatureExtractor"),mdt.forEach(t),s2o=r(i8e," (ResNet model)"),i8e.forEach(t),l2o=i(K),eu=n(K,"LI",{});var d8e=s(eu);Lie=n(d8e,"STRONG",{});var fdt=s(Lie);i2o=r(fdt,"segformer"),fdt.forEach(t),d2o=r(d8e," \u2014 "),HN=n(d8e,"A",{href:!0});var gdt=s(HN);c2o=r(gdt,"SegformerFeatureExtractor"),gdt.forEach(t),m2o=r(d8e," (SegFormer model)"),d8e.forEach(t),f2o=i(K),ou=n(K,"LI",{});var c8e=s(ou);yie=n(c8e,"STRONG",{});var hdt=s(yie);g2o=r(hdt,"speech_to_text"),hdt.forEach(t),h2o=r(c8e," \u2014 "),UN=n(c8e,"A",{href:!0});var udt=s(UN);u2o=r(udt,"Speech2TextFeatureExtractor"),udt.forEach(t),p2o=r(c8e," (Speech2Text model)"),c8e.forEach(t),_2o=i(K),ru=n(K,"LI",{});var m8e=s(ru);xie=n(m8e,"STRONG",{});var pdt=s(xie);b2o=r(pdt,"swin"),pdt.forEach(t),v2o=r(m8e," \u2014 "),JN=n(m8e,"A",{href:!0});var _dt=s(JN);F2o=r(_dt,"ViTFeatureExtractor"),_dt.forEach(t),T2o=r(m8e," (Swin Transformer model)"),m8e.forEach(t),M2o=i(K),tu=n(K,"LI",{});var f8e=s(tu);$ie=n(f8e,"STRONG",{});var bdt=s($ie);E2o=r(bdt,"van"),bdt.forEach(t),C2o=r(f8e," \u2014 "),YN=n(f8e,"A",{href:!0});var vdt=s(YN);w2o=r(vdt,"ConvNextFeatureExtractor"),vdt.forEach(t),A2o=r(f8e," (VAN model)"),f8e.forEach(t),L2o=i(K),au=n(K,"LI",{});var g8e=s(au);kie=n(g8e,"STRONG",{});var Fdt=s(kie);y2o=r(Fdt,"vilt"),Fdt.forEach(t),x2o=r(g8e," \u2014 "),KN=n(g8e,"A",{href:!0});var Tdt=s(KN);$2o=r(Tdt,"ViltFeatureExtractor"),Tdt.forEach(t),k2o=r(g8e," (ViLT model)"),g8e.forEach(t),S2o=i(K),nu=n(K,"LI",{});var h8e=s(nu);Sie=n(h8e,"STRONG",{});var Mdt=s(Sie);R2o=r(Mdt,"vit"),Mdt.forEach(t),P2o=r(h8e," \u2014 "),ZN=n(h8e,"A",{href:!0});var Edt=s(ZN);B2o=r(Edt,"ViTFeatureExtractor"),Edt.forEach(t),I2o=r(h8e," (ViT model)"),h8e.forEach(t),N2o=i(K),su=n(K,"LI",{});var u8e=s(su);Rie=n(u8e,"STRONG",{});var Cdt=s(Rie);q2o=r(Cdt,"vit_mae"),Cdt.forEach(t),j2o=r(u8e," \u2014 "),eq=n(u8e,"A",{href:!0});var wdt=s(eq);D2o=r(wdt,"ViTFeatureExtractor"),wdt.forEach(t),G2o=r(u8e," (ViTMAE model)"),u8e.forEach(t),O2o=i(K),lu=n(K,"LI",{});var p8e=s(lu);Pie=n(p8e,"STRONG",{});var Adt=s(Pie);V2o=r(Adt,"wav2vec2"),Adt.forEach(t),X2o=r(p8e," \u2014 "),oq=n(p8e,"A",{href:!0});var Ldt=s(oq);z2o=r(Ldt,"Wav2Vec2FeatureExtractor"),Ldt.forEach(t),Q2o=r(p8e," (Wav2Vec2 model)"),p8e.forEach(t),W2o=i(K),iu=n(K,"LI",{});var _8e=s(iu);Bie=n(_8e,"STRONG",{});var ydt=s(Bie);H2o=r(ydt,"wav2vec2-conformer"),ydt.forEach(t),U2o=r(_8e," \u2014 "),rq=n(_8e,"A",{href:!0});var xdt=s(rq);J2o=r(xdt,"Wav2Vec2FeatureExtractor"),xdt.forEach(t),Y2o=r(_8e," (Wav2Vec2-Conformer model)"),_8e.forEach(t),K2o=i(K),du=n(K,"LI",{});var b8e=s(du);Iie=n(b8e,"STRONG",{});var $dt=s(Iie);Z2o=r($dt,"yolos"),$dt.forEach(t),ebo=r(b8e," \u2014 "),tq=n(b8e,"A",{href:!0});var kdt=s(tq);obo=r(kdt,"YolosFeatureExtractor"),kdt.forEach(t),rbo=r(b8e," (YOLOS model)"),b8e.forEach(t),K.forEach(t),tbo=i(ta),T(cu.$$.fragment,ta),abo=i(ta),T(mu.$$.fragment,ta),ta.forEach(t),nbo=i(Ys),fu=n(Ys,"DIV",{class:!0});var zXe=s(fu);T(ny.$$.fragment,zXe),sbo=i(zXe),Nie=n(zXe,"P",{});var Sdt=s(Nie);lbo=r(Sdt,"Register a new feature extractor for this class."),Sdt.forEach(t),zXe.forEach(t),Ys.forEach(t),OOe=i(m),Ii=n(m,"H2",{class:!0});var QXe=s(Ii);gu=n(QXe,"A",{id:!0,class:!0,href:!0});var Rdt=s(gu);qie=n(Rdt,"SPAN",{});var Pdt=s(qie);T(sy.$$.fragment,Pdt),Pdt.forEach(t),Rdt.forEach(t),ibo=i(QXe),jie=n(QXe,"SPAN",{});var Bdt=s(jie);dbo=r(Bdt,"AutoProcessor"),Bdt.forEach(t),QXe.forEach(t),VOe=i(m),yo=n(m,"DIV",{class:!0});var Ks=s(yo);T(ly.$$.fragment,Ks),cbo=i(Ks),iy=n(Ks,"P",{});var WXe=s(iy);mbo=r(WXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),aq=n(WXe,"A",{href:!0});var Idt=s(aq);fbo=r(Idt,"AutoProcessor.from_pretrained()"),Idt.forEach(t),gbo=r(WXe," class method."),WXe.forEach(t),hbo=i(Ks),dy=n(Ks,"P",{});var HXe=s(dy);ubo=r(HXe,"This class cannot be instantiated directly using "),Die=n(HXe,"CODE",{});var Ndt=s(Die);pbo=r(Ndt,"__init__()"),Ndt.forEach(t),_bo=r(HXe," (throws an error)."),HXe.forEach(t),bbo=i(Ks),Ue=n(Ks,"DIV",{class:!0});var aa=s(Ue);T(cy.$$.fragment,aa),vbo=i(aa),Gie=n(aa,"P",{});var qdt=s(Gie);Fbo=r(qdt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qdt.forEach(t),Tbo=i(aa),Ni=n(aa,"P",{});var Xoe=s(Ni);Mbo=r(Xoe,"The processor class to instantiate is selected based on the "),Oie=n(Xoe,"CODE",{});var jdt=s(Oie);Ebo=r(jdt,"model_type"),jdt.forEach(t),Cbo=r(Xoe,` property of the config object (either
passed as an argument or loaded from `),Vie=n(Xoe,"CODE",{});var Ddt=s(Vie);wbo=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),Abo=r(Xoe," if possible):"),Xoe.forEach(t),Lbo=i(aa),he=n(aa,"UL",{});var _e=s(he);hu=n(_e,"LI",{});var v8e=s(hu);Xie=n(v8e,"STRONG",{});var Gdt=s(Xie);ybo=r(Gdt,"clip"),Gdt.forEach(t),xbo=r(v8e," \u2014 "),nq=n(v8e,"A",{href:!0});var Odt=s(nq);$bo=r(Odt,"CLIPProcessor"),Odt.forEach(t),kbo=r(v8e," (CLIP model)"),v8e.forEach(t),Sbo=i(_e),uu=n(_e,"LI",{});var F8e=s(uu);zie=n(F8e,"STRONG",{});var Vdt=s(zie);Rbo=r(Vdt,"flava"),Vdt.forEach(t),Pbo=r(F8e," \u2014 "),Qie=n(F8e,"CODE",{});var Xdt=s(Qie);Bbo=r(Xdt,"FLAVAProcessor"),Xdt.forEach(t),Ibo=r(F8e," (FLAVA model)"),F8e.forEach(t),Nbo=i(_e),pu=n(_e,"LI",{});var T8e=s(pu);Wie=n(T8e,"STRONG",{});var zdt=s(Wie);qbo=r(zdt,"groupvit"),zdt.forEach(t),jbo=r(T8e," \u2014 "),sq=n(T8e,"A",{href:!0});var Qdt=s(sq);Dbo=r(Qdt,"CLIPProcessor"),Qdt.forEach(t),Gbo=r(T8e," (GroupViT model)"),T8e.forEach(t),Obo=i(_e),_u=n(_e,"LI",{});var M8e=s(_u);Hie=n(M8e,"STRONG",{});var Wdt=s(Hie);Vbo=r(Wdt,"layoutlmv2"),Wdt.forEach(t),Xbo=r(M8e," \u2014 "),lq=n(M8e,"A",{href:!0});var Hdt=s(lq);zbo=r(Hdt,"LayoutLMv2Processor"),Hdt.forEach(t),Qbo=r(M8e," (LayoutLMv2 model)"),M8e.forEach(t),Wbo=i(_e),bu=n(_e,"LI",{});var E8e=s(bu);Uie=n(E8e,"STRONG",{});var Udt=s(Uie);Hbo=r(Udt,"layoutlmv3"),Udt.forEach(t),Ubo=r(E8e," \u2014 "),iq=n(E8e,"A",{href:!0});var Jdt=s(iq);Jbo=r(Jdt,"LayoutLMv3Processor"),Jdt.forEach(t),Ybo=r(E8e," (LayoutLMv3 model)"),E8e.forEach(t),Kbo=i(_e),vu=n(_e,"LI",{});var C8e=s(vu);Jie=n(C8e,"STRONG",{});var Ydt=s(Jie);Zbo=r(Ydt,"layoutxlm"),Ydt.forEach(t),evo=r(C8e," \u2014 "),dq=n(C8e,"A",{href:!0});var Kdt=s(dq);ovo=r(Kdt,"LayoutXLMProcessor"),Kdt.forEach(t),rvo=r(C8e," (LayoutXLM model)"),C8e.forEach(t),tvo=i(_e),Fu=n(_e,"LI",{});var w8e=s(Fu);Yie=n(w8e,"STRONG",{});var Zdt=s(Yie);avo=r(Zdt,"sew"),Zdt.forEach(t),nvo=r(w8e," \u2014 "),cq=n(w8e,"A",{href:!0});var ect=s(cq);svo=r(ect,"Wav2Vec2Processor"),ect.forEach(t),lvo=r(w8e," (SEW model)"),w8e.forEach(t),ivo=i(_e),Tu=n(_e,"LI",{});var A8e=s(Tu);Kie=n(A8e,"STRONG",{});var oct=s(Kie);dvo=r(oct,"sew-d"),oct.forEach(t),cvo=r(A8e," \u2014 "),mq=n(A8e,"A",{href:!0});var rct=s(mq);mvo=r(rct,"Wav2Vec2Processor"),rct.forEach(t),fvo=r(A8e," (SEW-D model)"),A8e.forEach(t),gvo=i(_e),Mu=n(_e,"LI",{});var L8e=s(Mu);Zie=n(L8e,"STRONG",{});var tct=s(Zie);hvo=r(tct,"speech_to_text"),tct.forEach(t),uvo=r(L8e," \u2014 "),fq=n(L8e,"A",{href:!0});var act=s(fq);pvo=r(act,"Speech2TextProcessor"),act.forEach(t),_vo=r(L8e," (Speech2Text model)"),L8e.forEach(t),bvo=i(_e),Eu=n(_e,"LI",{});var y8e=s(Eu);ede=n(y8e,"STRONG",{});var nct=s(ede);vvo=r(nct,"speech_to_text_2"),nct.forEach(t),Fvo=r(y8e," \u2014 "),gq=n(y8e,"A",{href:!0});var sct=s(gq);Tvo=r(sct,"Speech2Text2Processor"),sct.forEach(t),Mvo=r(y8e," (Speech2Text2 model)"),y8e.forEach(t),Evo=i(_e),Cu=n(_e,"LI",{});var x8e=s(Cu);ode=n(x8e,"STRONG",{});var lct=s(ode);Cvo=r(lct,"trocr"),lct.forEach(t),wvo=r(x8e," \u2014 "),hq=n(x8e,"A",{href:!0});var ict=s(hq);Avo=r(ict,"TrOCRProcessor"),ict.forEach(t),Lvo=r(x8e," (TrOCR model)"),x8e.forEach(t),yvo=i(_e),wu=n(_e,"LI",{});var $8e=s(wu);rde=n($8e,"STRONG",{});var dct=s(rde);xvo=r(dct,"unispeech"),dct.forEach(t),$vo=r($8e," \u2014 "),uq=n($8e,"A",{href:!0});var cct=s(uq);kvo=r(cct,"Wav2Vec2Processor"),cct.forEach(t),Svo=r($8e," (UniSpeech model)"),$8e.forEach(t),Rvo=i(_e),Au=n(_e,"LI",{});var k8e=s(Au);tde=n(k8e,"STRONG",{});var mct=s(tde);Pvo=r(mct,"unispeech-sat"),mct.forEach(t),Bvo=r(k8e," \u2014 "),pq=n(k8e,"A",{href:!0});var fct=s(pq);Ivo=r(fct,"Wav2Vec2Processor"),fct.forEach(t),Nvo=r(k8e," (UniSpeechSat model)"),k8e.forEach(t),qvo=i(_e),Lu=n(_e,"LI",{});var S8e=s(Lu);ade=n(S8e,"STRONG",{});var gct=s(ade);jvo=r(gct,"vilt"),gct.forEach(t),Dvo=r(S8e," \u2014 "),_q=n(S8e,"A",{href:!0});var hct=s(_q);Gvo=r(hct,"ViltProcessor"),hct.forEach(t),Ovo=r(S8e," (ViLT model)"),S8e.forEach(t),Vvo=i(_e),yu=n(_e,"LI",{});var R8e=s(yu);nde=n(R8e,"STRONG",{});var uct=s(nde);Xvo=r(uct,"vision-text-dual-encoder"),uct.forEach(t),zvo=r(R8e," \u2014 "),bq=n(R8e,"A",{href:!0});var pct=s(bq);Qvo=r(pct,"VisionTextDualEncoderProcessor"),pct.forEach(t),Wvo=r(R8e," (VisionTextDualEncoder model)"),R8e.forEach(t),Hvo=i(_e),xu=n(_e,"LI",{});var P8e=s(xu);sde=n(P8e,"STRONG",{});var _ct=s(sde);Uvo=r(_ct,"wav2vec2"),_ct.forEach(t),Jvo=r(P8e," \u2014 "),vq=n(P8e,"A",{href:!0});var bct=s(vq);Yvo=r(bct,"Wav2Vec2Processor"),bct.forEach(t),Kvo=r(P8e," (Wav2Vec2 model)"),P8e.forEach(t),Zvo=i(_e),$u=n(_e,"LI",{});var B8e=s($u);lde=n(B8e,"STRONG",{});var vct=s(lde);e1o=r(vct,"wav2vec2-conformer"),vct.forEach(t),o1o=r(B8e," \u2014 "),Fq=n(B8e,"A",{href:!0});var Fct=s(Fq);r1o=r(Fct,"Wav2Vec2Processor"),Fct.forEach(t),t1o=r(B8e," (Wav2Vec2-Conformer model)"),B8e.forEach(t),a1o=i(_e),ku=n(_e,"LI",{});var I8e=s(ku);ide=n(I8e,"STRONG",{});var Tct=s(ide);n1o=r(Tct,"wavlm"),Tct.forEach(t),s1o=r(I8e," \u2014 "),Tq=n(I8e,"A",{href:!0});var Mct=s(Tq);l1o=r(Mct,"Wav2Vec2Processor"),Mct.forEach(t),i1o=r(I8e," (WavLM model)"),I8e.forEach(t),_e.forEach(t),d1o=i(aa),T(Su.$$.fragment,aa),c1o=i(aa),T(Ru.$$.fragment,aa),aa.forEach(t),m1o=i(Ks),Pu=n(Ks,"DIV",{class:!0});var UXe=s(Pu);T(my.$$.fragment,UXe),f1o=i(UXe),dde=n(UXe,"P",{});var Ect=s(dde);g1o=r(Ect,"Register a new processor for this class."),Ect.forEach(t),UXe.forEach(t),Ks.forEach(t),XOe=i(m),qi=n(m,"H2",{class:!0});var JXe=s(qi);Bu=n(JXe,"A",{id:!0,class:!0,href:!0});var Cct=s(Bu);cde=n(Cct,"SPAN",{});var wct=s(cde);T(fy.$$.fragment,wct),wct.forEach(t),Cct.forEach(t),h1o=i(JXe),mde=n(JXe,"SPAN",{});var Act=s(mde);u1o=r(Act,"AutoModel"),Act.forEach(t),JXe.forEach(t),zOe=i(m),xo=n(m,"DIV",{class:!0});var Zs=s(xo);T(gy.$$.fragment,Zs),p1o=i(Zs),ji=n(Zs,"P",{});var zoe=s(ji);_1o=r(zoe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Mq=n(zoe,"A",{href:!0});var Lct=s(Mq);b1o=r(Lct,"from_pretrained()"),Lct.forEach(t),v1o=r(zoe," class method or the "),Eq=n(zoe,"A",{href:!0});var yct=s(Eq);F1o=r(yct,"from_config()"),yct.forEach(t),T1o=r(zoe,` class
method.`),zoe.forEach(t),M1o=i(Zs),hy=n(Zs,"P",{});var YXe=s(hy);E1o=r(YXe,"This class cannot be instantiated directly using "),fde=n(YXe,"CODE",{});var xct=s(fde);C1o=r(xct,"__init__()"),xct.forEach(t),w1o=r(YXe," (throws an error)."),YXe.forEach(t),A1o=i(Zs),st=n(Zs,"DIV",{class:!0});var V6=s(st);T(uy.$$.fragment,V6),L1o=i(V6),gde=n(V6,"P",{});var $ct=s(gde);y1o=r($ct,"Instantiates one of the base model classes of the library from a configuration."),$ct.forEach(t),x1o=i(V6),Di=n(V6,"P",{});var Qoe=s(Di);$1o=r(Qoe,`Note:
Loading a model from its configuration file does `),hde=n(Qoe,"STRONG",{});var kct=s(hde);k1o=r(kct,"not"),kct.forEach(t),S1o=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cq=n(Qoe,"A",{href:!0});var Sct=s(Cq);R1o=r(Sct,"from_pretrained()"),Sct.forEach(t),P1o=r(Qoe," to load the model weights."),Qoe.forEach(t),B1o=i(V6),T(Iu.$$.fragment,V6),V6.forEach(t),I1o=i(Zs),Je=n(Zs,"DIV",{class:!0});var na=s(Je);T(py.$$.fragment,na),N1o=i(na),ude=n(na,"P",{});var Rct=s(ude);q1o=r(Rct,"Instantiate one of the base model classes of the library from a pretrained model."),Rct.forEach(t),j1o=i(na),Pa=n(na,"P",{});var X6=s(Pa);D1o=r(X6,"The model class to instantiate is selected based on the "),pde=n(X6,"CODE",{});var Pct=s(pde);G1o=r(Pct,"model_type"),Pct.forEach(t),O1o=r(X6,` property of the config object (either
passed as an argument or loaded from `),_de=n(X6,"CODE",{});var Bct=s(_de);V1o=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),X1o=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bde=n(X6,"CODE",{});var Ict=s(bde);z1o=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),Q1o=r(X6,":"),X6.forEach(t),W1o=i(na),y=n(na,"UL",{});var x=s(y);Nu=n(x,"LI",{});var N8e=s(Nu);vde=n(N8e,"STRONG",{});var Nct=s(vde);H1o=r(Nct,"albert"),Nct.forEach(t),U1o=r(N8e," \u2014 "),wq=n(N8e,"A",{href:!0});var qct=s(wq);J1o=r(qct,"AlbertModel"),qct.forEach(t),Y1o=r(N8e," (ALBERT model)"),N8e.forEach(t),K1o=i(x),qu=n(x,"LI",{});var q8e=s(qu);Fde=n(q8e,"STRONG",{});var jct=s(Fde);Z1o=r(jct,"bart"),jct.forEach(t),eFo=r(q8e," \u2014 "),Aq=n(q8e,"A",{href:!0});var Dct=s(Aq);oFo=r(Dct,"BartModel"),Dct.forEach(t),rFo=r(q8e," (BART model)"),q8e.forEach(t),tFo=i(x),ju=n(x,"LI",{});var j8e=s(ju);Tde=n(j8e,"STRONG",{});var Gct=s(Tde);aFo=r(Gct,"beit"),Gct.forEach(t),nFo=r(j8e," \u2014 "),Lq=n(j8e,"A",{href:!0});var Oct=s(Lq);sFo=r(Oct,"BeitModel"),Oct.forEach(t),lFo=r(j8e," (BEiT model)"),j8e.forEach(t),iFo=i(x),Du=n(x,"LI",{});var D8e=s(Du);Mde=n(D8e,"STRONG",{});var Vct=s(Mde);dFo=r(Vct,"bert"),Vct.forEach(t),cFo=r(D8e," \u2014 "),yq=n(D8e,"A",{href:!0});var Xct=s(yq);mFo=r(Xct,"BertModel"),Xct.forEach(t),fFo=r(D8e," (BERT model)"),D8e.forEach(t),gFo=i(x),Gu=n(x,"LI",{});var G8e=s(Gu);Ede=n(G8e,"STRONG",{});var zct=s(Ede);hFo=r(zct,"bert-generation"),zct.forEach(t),uFo=r(G8e," \u2014 "),xq=n(G8e,"A",{href:!0});var Qct=s(xq);pFo=r(Qct,"BertGenerationEncoder"),Qct.forEach(t),_Fo=r(G8e," (Bert Generation model)"),G8e.forEach(t),bFo=i(x),Ou=n(x,"LI",{});var O8e=s(Ou);Cde=n(O8e,"STRONG",{});var Wct=s(Cde);vFo=r(Wct,"big_bird"),Wct.forEach(t),FFo=r(O8e," \u2014 "),$q=n(O8e,"A",{href:!0});var Hct=s($q);TFo=r(Hct,"BigBirdModel"),Hct.forEach(t),MFo=r(O8e," (BigBird model)"),O8e.forEach(t),EFo=i(x),Vu=n(x,"LI",{});var V8e=s(Vu);wde=n(V8e,"STRONG",{});var Uct=s(wde);CFo=r(Uct,"bigbird_pegasus"),Uct.forEach(t),wFo=r(V8e," \u2014 "),kq=n(V8e,"A",{href:!0});var Jct=s(kq);AFo=r(Jct,"BigBirdPegasusModel"),Jct.forEach(t),LFo=r(V8e," (BigBird-Pegasus model)"),V8e.forEach(t),yFo=i(x),Xu=n(x,"LI",{});var X8e=s(Xu);Ade=n(X8e,"STRONG",{});var Yct=s(Ade);xFo=r(Yct,"blenderbot"),Yct.forEach(t),$Fo=r(X8e," \u2014 "),Sq=n(X8e,"A",{href:!0});var Kct=s(Sq);kFo=r(Kct,"BlenderbotModel"),Kct.forEach(t),SFo=r(X8e," (Blenderbot model)"),X8e.forEach(t),RFo=i(x),zu=n(x,"LI",{});var z8e=s(zu);Lde=n(z8e,"STRONG",{});var Zct=s(Lde);PFo=r(Zct,"blenderbot-small"),Zct.forEach(t),BFo=r(z8e," \u2014 "),Rq=n(z8e,"A",{href:!0});var emt=s(Rq);IFo=r(emt,"BlenderbotSmallModel"),emt.forEach(t),NFo=r(z8e," (BlenderbotSmall model)"),z8e.forEach(t),qFo=i(x),Qu=n(x,"LI",{});var Q8e=s(Qu);yde=n(Q8e,"STRONG",{});var omt=s(yde);jFo=r(omt,"bloom"),omt.forEach(t),DFo=r(Q8e," \u2014 "),Pq=n(Q8e,"A",{href:!0});var rmt=s(Pq);GFo=r(rmt,"BloomModel"),rmt.forEach(t),OFo=r(Q8e," (BLOOM model)"),Q8e.forEach(t),VFo=i(x),Wu=n(x,"LI",{});var W8e=s(Wu);xde=n(W8e,"STRONG",{});var tmt=s(xde);XFo=r(tmt,"camembert"),tmt.forEach(t),zFo=r(W8e," \u2014 "),Bq=n(W8e,"A",{href:!0});var amt=s(Bq);QFo=r(amt,"CamembertModel"),amt.forEach(t),WFo=r(W8e," (CamemBERT model)"),W8e.forEach(t),HFo=i(x),Hu=n(x,"LI",{});var H8e=s(Hu);$de=n(H8e,"STRONG",{});var nmt=s($de);UFo=r(nmt,"canine"),nmt.forEach(t),JFo=r(H8e," \u2014 "),Iq=n(H8e,"A",{href:!0});var smt=s(Iq);YFo=r(smt,"CanineModel"),smt.forEach(t),KFo=r(H8e," (CANINE model)"),H8e.forEach(t),ZFo=i(x),Uu=n(x,"LI",{});var U8e=s(Uu);kde=n(U8e,"STRONG",{});var lmt=s(kde);eTo=r(lmt,"clip"),lmt.forEach(t),oTo=r(U8e," \u2014 "),Nq=n(U8e,"A",{href:!0});var imt=s(Nq);rTo=r(imt,"CLIPModel"),imt.forEach(t),tTo=r(U8e," (CLIP model)"),U8e.forEach(t),aTo=i(x),Ju=n(x,"LI",{});var J8e=s(Ju);Sde=n(J8e,"STRONG",{});var dmt=s(Sde);nTo=r(dmt,"codegen"),dmt.forEach(t),sTo=r(J8e," \u2014 "),qq=n(J8e,"A",{href:!0});var cmt=s(qq);lTo=r(cmt,"CodeGenModel"),cmt.forEach(t),iTo=r(J8e," (CodeGen model)"),J8e.forEach(t),dTo=i(x),Yu=n(x,"LI",{});var Y8e=s(Yu);Rde=n(Y8e,"STRONG",{});var mmt=s(Rde);cTo=r(mmt,"convbert"),mmt.forEach(t),mTo=r(Y8e," \u2014 "),jq=n(Y8e,"A",{href:!0});var fmt=s(jq);fTo=r(fmt,"ConvBertModel"),fmt.forEach(t),gTo=r(Y8e," (ConvBERT model)"),Y8e.forEach(t),hTo=i(x),Ku=n(x,"LI",{});var K8e=s(Ku);Pde=n(K8e,"STRONG",{});var gmt=s(Pde);uTo=r(gmt,"convnext"),gmt.forEach(t),pTo=r(K8e," \u2014 "),Dq=n(K8e,"A",{href:!0});var hmt=s(Dq);_To=r(hmt,"ConvNextModel"),hmt.forEach(t),bTo=r(K8e," (ConvNeXT model)"),K8e.forEach(t),vTo=i(x),Zu=n(x,"LI",{});var Z8e=s(Zu);Bde=n(Z8e,"STRONG",{});var umt=s(Bde);FTo=r(umt,"ctrl"),umt.forEach(t),TTo=r(Z8e," \u2014 "),Gq=n(Z8e,"A",{href:!0});var pmt=s(Gq);MTo=r(pmt,"CTRLModel"),pmt.forEach(t),ETo=r(Z8e," (CTRL model)"),Z8e.forEach(t),CTo=i(x),ep=n(x,"LI",{});var e9e=s(ep);Ide=n(e9e,"STRONG",{});var _mt=s(Ide);wTo=r(_mt,"cvt"),_mt.forEach(t),ATo=r(e9e," \u2014 "),Oq=n(e9e,"A",{href:!0});var bmt=s(Oq);LTo=r(bmt,"CvtModel"),bmt.forEach(t),yTo=r(e9e," (CvT model)"),e9e.forEach(t),xTo=i(x),op=n(x,"LI",{});var o9e=s(op);Nde=n(o9e,"STRONG",{});var vmt=s(Nde);$To=r(vmt,"data2vec-audio"),vmt.forEach(t),kTo=r(o9e," \u2014 "),Vq=n(o9e,"A",{href:!0});var Fmt=s(Vq);STo=r(Fmt,"Data2VecAudioModel"),Fmt.forEach(t),RTo=r(o9e," (Data2VecAudio model)"),o9e.forEach(t),PTo=i(x),rp=n(x,"LI",{});var r9e=s(rp);qde=n(r9e,"STRONG",{});var Tmt=s(qde);BTo=r(Tmt,"data2vec-text"),Tmt.forEach(t),ITo=r(r9e," \u2014 "),Xq=n(r9e,"A",{href:!0});var Mmt=s(Xq);NTo=r(Mmt,"Data2VecTextModel"),Mmt.forEach(t),qTo=r(r9e," (Data2VecText model)"),r9e.forEach(t),jTo=i(x),tp=n(x,"LI",{});var t9e=s(tp);jde=n(t9e,"STRONG",{});var Emt=s(jde);DTo=r(Emt,"data2vec-vision"),Emt.forEach(t),GTo=r(t9e," \u2014 "),zq=n(t9e,"A",{href:!0});var Cmt=s(zq);OTo=r(Cmt,"Data2VecVisionModel"),Cmt.forEach(t),VTo=r(t9e," (Data2VecVision model)"),t9e.forEach(t),XTo=i(x),ap=n(x,"LI",{});var a9e=s(ap);Dde=n(a9e,"STRONG",{});var wmt=s(Dde);zTo=r(wmt,"deberta"),wmt.forEach(t),QTo=r(a9e," \u2014 "),Qq=n(a9e,"A",{href:!0});var Amt=s(Qq);WTo=r(Amt,"DebertaModel"),Amt.forEach(t),HTo=r(a9e," (DeBERTa model)"),a9e.forEach(t),UTo=i(x),np=n(x,"LI",{});var n9e=s(np);Gde=n(n9e,"STRONG",{});var Lmt=s(Gde);JTo=r(Lmt,"deberta-v2"),Lmt.forEach(t),YTo=r(n9e," \u2014 "),Wq=n(n9e,"A",{href:!0});var ymt=s(Wq);KTo=r(ymt,"DebertaV2Model"),ymt.forEach(t),ZTo=r(n9e," (DeBERTa-v2 model)"),n9e.forEach(t),eMo=i(x),sp=n(x,"LI",{});var s9e=s(sp);Ode=n(s9e,"STRONG",{});var xmt=s(Ode);oMo=r(xmt,"decision_transformer"),xmt.forEach(t),rMo=r(s9e," \u2014 "),Hq=n(s9e,"A",{href:!0});var $mt=s(Hq);tMo=r($mt,"DecisionTransformerModel"),$mt.forEach(t),aMo=r(s9e," (Decision Transformer model)"),s9e.forEach(t),nMo=i(x),lp=n(x,"LI",{});var l9e=s(lp);Vde=n(l9e,"STRONG",{});var kmt=s(Vde);sMo=r(kmt,"deit"),kmt.forEach(t),lMo=r(l9e," \u2014 "),Uq=n(l9e,"A",{href:!0});var Smt=s(Uq);iMo=r(Smt,"DeiTModel"),Smt.forEach(t),dMo=r(l9e," (DeiT model)"),l9e.forEach(t),cMo=i(x),ip=n(x,"LI",{});var i9e=s(ip);Xde=n(i9e,"STRONG",{});var Rmt=s(Xde);mMo=r(Rmt,"detr"),Rmt.forEach(t),fMo=r(i9e," \u2014 "),Jq=n(i9e,"A",{href:!0});var Pmt=s(Jq);gMo=r(Pmt,"DetrModel"),Pmt.forEach(t),hMo=r(i9e," (DETR model)"),i9e.forEach(t),uMo=i(x),dp=n(x,"LI",{});var d9e=s(dp);zde=n(d9e,"STRONG",{});var Bmt=s(zde);pMo=r(Bmt,"distilbert"),Bmt.forEach(t),_Mo=r(d9e," \u2014 "),Yq=n(d9e,"A",{href:!0});var Imt=s(Yq);bMo=r(Imt,"DistilBertModel"),Imt.forEach(t),vMo=r(d9e," (DistilBERT model)"),d9e.forEach(t),FMo=i(x),cp=n(x,"LI",{});var c9e=s(cp);Qde=n(c9e,"STRONG",{});var Nmt=s(Qde);TMo=r(Nmt,"dpr"),Nmt.forEach(t),MMo=r(c9e," \u2014 "),Kq=n(c9e,"A",{href:!0});var qmt=s(Kq);EMo=r(qmt,"DPRQuestionEncoder"),qmt.forEach(t),CMo=r(c9e," (DPR model)"),c9e.forEach(t),wMo=i(x),mp=n(x,"LI",{});var m9e=s(mp);Wde=n(m9e,"STRONG",{});var jmt=s(Wde);AMo=r(jmt,"dpt"),jmt.forEach(t),LMo=r(m9e," \u2014 "),Zq=n(m9e,"A",{href:!0});var Dmt=s(Zq);yMo=r(Dmt,"DPTModel"),Dmt.forEach(t),xMo=r(m9e," (DPT model)"),m9e.forEach(t),$Mo=i(x),fp=n(x,"LI",{});var f9e=s(fp);Hde=n(f9e,"STRONG",{});var Gmt=s(Hde);kMo=r(Gmt,"electra"),Gmt.forEach(t),SMo=r(f9e," \u2014 "),ej=n(f9e,"A",{href:!0});var Omt=s(ej);RMo=r(Omt,"ElectraModel"),Omt.forEach(t),PMo=r(f9e," (ELECTRA model)"),f9e.forEach(t),BMo=i(x),gp=n(x,"LI",{});var g9e=s(gp);Ude=n(g9e,"STRONG",{});var Vmt=s(Ude);IMo=r(Vmt,"flaubert"),Vmt.forEach(t),NMo=r(g9e," \u2014 "),oj=n(g9e,"A",{href:!0});var Xmt=s(oj);qMo=r(Xmt,"FlaubertModel"),Xmt.forEach(t),jMo=r(g9e," (FlauBERT model)"),g9e.forEach(t),DMo=i(x),hp=n(x,"LI",{});var h9e=s(hp);Jde=n(h9e,"STRONG",{});var zmt=s(Jde);GMo=r(zmt,"flava"),zmt.forEach(t),OMo=r(h9e," \u2014 "),rj=n(h9e,"A",{href:!0});var Qmt=s(rj);VMo=r(Qmt,"FlavaModel"),Qmt.forEach(t),XMo=r(h9e," (FLAVA model)"),h9e.forEach(t),zMo=i(x),up=n(x,"LI",{});var u9e=s(up);Yde=n(u9e,"STRONG",{});var Wmt=s(Yde);QMo=r(Wmt,"fnet"),Wmt.forEach(t),WMo=r(u9e," \u2014 "),tj=n(u9e,"A",{href:!0});var Hmt=s(tj);HMo=r(Hmt,"FNetModel"),Hmt.forEach(t),UMo=r(u9e," (FNet model)"),u9e.forEach(t),JMo=i(x),pp=n(x,"LI",{});var p9e=s(pp);Kde=n(p9e,"STRONG",{});var Umt=s(Kde);YMo=r(Umt,"fsmt"),Umt.forEach(t),KMo=r(p9e," \u2014 "),aj=n(p9e,"A",{href:!0});var Jmt=s(aj);ZMo=r(Jmt,"FSMTModel"),Jmt.forEach(t),e4o=r(p9e," (FairSeq Machine-Translation model)"),p9e.forEach(t),o4o=i(x),zs=n(x,"LI",{});var mS=s(zs);Zde=n(mS,"STRONG",{});var Ymt=s(Zde);r4o=r(Ymt,"funnel"),Ymt.forEach(t),t4o=r(mS," \u2014 "),nj=n(mS,"A",{href:!0});var Kmt=s(nj);a4o=r(Kmt,"FunnelModel"),Kmt.forEach(t),n4o=r(mS," or "),sj=n(mS,"A",{href:!0});var Zmt=s(sj);s4o=r(Zmt,"FunnelBaseModel"),Zmt.forEach(t),l4o=r(mS," (Funnel Transformer model)"),mS.forEach(t),i4o=i(x),_p=n(x,"LI",{});var _9e=s(_p);ece=n(_9e,"STRONG",{});var eft=s(ece);d4o=r(eft,"glpn"),eft.forEach(t),c4o=r(_9e," \u2014 "),lj=n(_9e,"A",{href:!0});var oft=s(lj);m4o=r(oft,"GLPNModel"),oft.forEach(t),f4o=r(_9e," (GLPN model)"),_9e.forEach(t),g4o=i(x),bp=n(x,"LI",{});var b9e=s(bp);oce=n(b9e,"STRONG",{});var rft=s(oce);h4o=r(rft,"gpt2"),rft.forEach(t),u4o=r(b9e," \u2014 "),ij=n(b9e,"A",{href:!0});var tft=s(ij);p4o=r(tft,"GPT2Model"),tft.forEach(t),_4o=r(b9e," (OpenAI GPT-2 model)"),b9e.forEach(t),b4o=i(x),vp=n(x,"LI",{});var v9e=s(vp);rce=n(v9e,"STRONG",{});var aft=s(rce);v4o=r(aft,"gpt_neo"),aft.forEach(t),F4o=r(v9e," \u2014 "),dj=n(v9e,"A",{href:!0});var nft=s(dj);T4o=r(nft,"GPTNeoModel"),nft.forEach(t),M4o=r(v9e," (GPT Neo model)"),v9e.forEach(t),E4o=i(x),Fp=n(x,"LI",{});var F9e=s(Fp);tce=n(F9e,"STRONG",{});var sft=s(tce);C4o=r(sft,"gpt_neox"),sft.forEach(t),w4o=r(F9e," \u2014 "),cj=n(F9e,"A",{href:!0});var lft=s(cj);A4o=r(lft,"GPTNeoXModel"),lft.forEach(t),L4o=r(F9e," (GPT NeoX model)"),F9e.forEach(t),y4o=i(x),Tp=n(x,"LI",{});var T9e=s(Tp);ace=n(T9e,"STRONG",{});var ift=s(ace);x4o=r(ift,"gptj"),ift.forEach(t),$4o=r(T9e," \u2014 "),mj=n(T9e,"A",{href:!0});var dft=s(mj);k4o=r(dft,"GPTJModel"),dft.forEach(t),S4o=r(T9e," (GPT-J model)"),T9e.forEach(t),R4o=i(x),Mp=n(x,"LI",{});var M9e=s(Mp);nce=n(M9e,"STRONG",{});var cft=s(nce);P4o=r(cft,"groupvit"),cft.forEach(t),B4o=r(M9e," \u2014 "),fj=n(M9e,"A",{href:!0});var mft=s(fj);I4o=r(mft,"GroupViTModel"),mft.forEach(t),N4o=r(M9e," (GroupViT model)"),M9e.forEach(t),q4o=i(x),Ep=n(x,"LI",{});var E9e=s(Ep);sce=n(E9e,"STRONG",{});var fft=s(sce);j4o=r(fft,"hubert"),fft.forEach(t),D4o=r(E9e," \u2014 "),gj=n(E9e,"A",{href:!0});var gft=s(gj);G4o=r(gft,"HubertModel"),gft.forEach(t),O4o=r(E9e," (Hubert model)"),E9e.forEach(t),V4o=i(x),Cp=n(x,"LI",{});var C9e=s(Cp);lce=n(C9e,"STRONG",{});var hft=s(lce);X4o=r(hft,"ibert"),hft.forEach(t),z4o=r(C9e," \u2014 "),hj=n(C9e,"A",{href:!0});var uft=s(hj);Q4o=r(uft,"IBertModel"),uft.forEach(t),W4o=r(C9e," (I-BERT model)"),C9e.forEach(t),H4o=i(x),wp=n(x,"LI",{});var w9e=s(wp);ice=n(w9e,"STRONG",{});var pft=s(ice);U4o=r(pft,"imagegpt"),pft.forEach(t),J4o=r(w9e," \u2014 "),uj=n(w9e,"A",{href:!0});var _ft=s(uj);Y4o=r(_ft,"ImageGPTModel"),_ft.forEach(t),K4o=r(w9e," (ImageGPT model)"),w9e.forEach(t),Z4o=i(x),Ap=n(x,"LI",{});var A9e=s(Ap);dce=n(A9e,"STRONG",{});var bft=s(dce);eEo=r(bft,"layoutlm"),bft.forEach(t),oEo=r(A9e," \u2014 "),pj=n(A9e,"A",{href:!0});var vft=s(pj);rEo=r(vft,"LayoutLMModel"),vft.forEach(t),tEo=r(A9e," (LayoutLM model)"),A9e.forEach(t),aEo=i(x),Lp=n(x,"LI",{});var L9e=s(Lp);cce=n(L9e,"STRONG",{});var Fft=s(cce);nEo=r(Fft,"layoutlmv2"),Fft.forEach(t),sEo=r(L9e," \u2014 "),_j=n(L9e,"A",{href:!0});var Tft=s(_j);lEo=r(Tft,"LayoutLMv2Model"),Tft.forEach(t),iEo=r(L9e," (LayoutLMv2 model)"),L9e.forEach(t),dEo=i(x),yp=n(x,"LI",{});var y9e=s(yp);mce=n(y9e,"STRONG",{});var Mft=s(mce);cEo=r(Mft,"layoutlmv3"),Mft.forEach(t),mEo=r(y9e," \u2014 "),bj=n(y9e,"A",{href:!0});var Eft=s(bj);fEo=r(Eft,"LayoutLMv3Model"),Eft.forEach(t),gEo=r(y9e," (LayoutLMv3 model)"),y9e.forEach(t),hEo=i(x),xp=n(x,"LI",{});var x9e=s(xp);fce=n(x9e,"STRONG",{});var Cft=s(fce);uEo=r(Cft,"led"),Cft.forEach(t),pEo=r(x9e," \u2014 "),vj=n(x9e,"A",{href:!0});var wft=s(vj);_Eo=r(wft,"LEDModel"),wft.forEach(t),bEo=r(x9e," (LED model)"),x9e.forEach(t),vEo=i(x),$p=n(x,"LI",{});var $9e=s($p);gce=n($9e,"STRONG",{});var Aft=s(gce);FEo=r(Aft,"levit"),Aft.forEach(t),TEo=r($9e," \u2014 "),Fj=n($9e,"A",{href:!0});var Lft=s(Fj);MEo=r(Lft,"LevitModel"),Lft.forEach(t),EEo=r($9e," (LeViT model)"),$9e.forEach(t),CEo=i(x),kp=n(x,"LI",{});var k9e=s(kp);hce=n(k9e,"STRONG",{});var yft=s(hce);wEo=r(yft,"longformer"),yft.forEach(t),AEo=r(k9e," \u2014 "),Tj=n(k9e,"A",{href:!0});var xft=s(Tj);LEo=r(xft,"LongformerModel"),xft.forEach(t),yEo=r(k9e," (Longformer model)"),k9e.forEach(t),xEo=i(x),Sp=n(x,"LI",{});var S9e=s(Sp);uce=n(S9e,"STRONG",{});var $ft=s(uce);$Eo=r($ft,"longt5"),$ft.forEach(t),kEo=r(S9e," \u2014 "),Mj=n(S9e,"A",{href:!0});var kft=s(Mj);SEo=r(kft,"LongT5Model"),kft.forEach(t),REo=r(S9e," (LongT5 model)"),S9e.forEach(t),PEo=i(x),Rp=n(x,"LI",{});var R9e=s(Rp);pce=n(R9e,"STRONG",{});var Sft=s(pce);BEo=r(Sft,"luke"),Sft.forEach(t),IEo=r(R9e," \u2014 "),Ej=n(R9e,"A",{href:!0});var Rft=s(Ej);NEo=r(Rft,"LukeModel"),Rft.forEach(t),qEo=r(R9e," (LUKE model)"),R9e.forEach(t),jEo=i(x),Pp=n(x,"LI",{});var P9e=s(Pp);_ce=n(P9e,"STRONG",{});var Pft=s(_ce);DEo=r(Pft,"lxmert"),Pft.forEach(t),GEo=r(P9e," \u2014 "),Cj=n(P9e,"A",{href:!0});var Bft=s(Cj);OEo=r(Bft,"LxmertModel"),Bft.forEach(t),VEo=r(P9e," (LXMERT model)"),P9e.forEach(t),XEo=i(x),Bp=n(x,"LI",{});var B9e=s(Bp);bce=n(B9e,"STRONG",{});var Ift=s(bce);zEo=r(Ift,"m2m_100"),Ift.forEach(t),QEo=r(B9e," \u2014 "),wj=n(B9e,"A",{href:!0});var Nft=s(wj);WEo=r(Nft,"M2M100Model"),Nft.forEach(t),HEo=r(B9e," (M2M100 model)"),B9e.forEach(t),UEo=i(x),Ip=n(x,"LI",{});var I9e=s(Ip);vce=n(I9e,"STRONG",{});var qft=s(vce);JEo=r(qft,"marian"),qft.forEach(t),YEo=r(I9e," \u2014 "),Aj=n(I9e,"A",{href:!0});var jft=s(Aj);KEo=r(jft,"MarianModel"),jft.forEach(t),ZEo=r(I9e," (Marian model)"),I9e.forEach(t),eCo=i(x),Np=n(x,"LI",{});var N9e=s(Np);Fce=n(N9e,"STRONG",{});var Dft=s(Fce);oCo=r(Dft,"maskformer"),Dft.forEach(t),rCo=r(N9e," \u2014 "),Lj=n(N9e,"A",{href:!0});var Gft=s(Lj);tCo=r(Gft,"MaskFormerModel"),Gft.forEach(t),aCo=r(N9e," (MaskFormer model)"),N9e.forEach(t),nCo=i(x),qp=n(x,"LI",{});var q9e=s(qp);Tce=n(q9e,"STRONG",{});var Oft=s(Tce);sCo=r(Oft,"mbart"),Oft.forEach(t),lCo=r(q9e," \u2014 "),yj=n(q9e,"A",{href:!0});var Vft=s(yj);iCo=r(Vft,"MBartModel"),Vft.forEach(t),dCo=r(q9e," (mBART model)"),q9e.forEach(t),cCo=i(x),jp=n(x,"LI",{});var j9e=s(jp);Mce=n(j9e,"STRONG",{});var Xft=s(Mce);mCo=r(Xft,"mctct"),Xft.forEach(t),fCo=r(j9e," \u2014 "),xj=n(j9e,"A",{href:!0});var zft=s(xj);gCo=r(zft,"MCTCTModel"),zft.forEach(t),hCo=r(j9e," (M-CTC-T model)"),j9e.forEach(t),uCo=i(x),Dp=n(x,"LI",{});var D9e=s(Dp);Ece=n(D9e,"STRONG",{});var Qft=s(Ece);pCo=r(Qft,"megatron-bert"),Qft.forEach(t),_Co=r(D9e," \u2014 "),$j=n(D9e,"A",{href:!0});var Wft=s($j);bCo=r(Wft,"MegatronBertModel"),Wft.forEach(t),vCo=r(D9e," (Megatron-BERT model)"),D9e.forEach(t),FCo=i(x),Gp=n(x,"LI",{});var G9e=s(Gp);Cce=n(G9e,"STRONG",{});var Hft=s(Cce);TCo=r(Hft,"mobilebert"),Hft.forEach(t),MCo=r(G9e," \u2014 "),kj=n(G9e,"A",{href:!0});var Uft=s(kj);ECo=r(Uft,"MobileBertModel"),Uft.forEach(t),CCo=r(G9e," (MobileBERT model)"),G9e.forEach(t),wCo=i(x),Op=n(x,"LI",{});var O9e=s(Op);wce=n(O9e,"STRONG",{});var Jft=s(wce);ACo=r(Jft,"mpnet"),Jft.forEach(t),LCo=r(O9e," \u2014 "),Sj=n(O9e,"A",{href:!0});var Yft=s(Sj);yCo=r(Yft,"MPNetModel"),Yft.forEach(t),xCo=r(O9e," (MPNet model)"),O9e.forEach(t),$Co=i(x),Vp=n(x,"LI",{});var V9e=s(Vp);Ace=n(V9e,"STRONG",{});var Kft=s(Ace);kCo=r(Kft,"mt5"),Kft.forEach(t),SCo=r(V9e," \u2014 "),Rj=n(V9e,"A",{href:!0});var Zft=s(Rj);RCo=r(Zft,"MT5Model"),Zft.forEach(t),PCo=r(V9e," (MT5 model)"),V9e.forEach(t),BCo=i(x),Xp=n(x,"LI",{});var X9e=s(Xp);Lce=n(X9e,"STRONG",{});var egt=s(Lce);ICo=r(egt,"nezha"),egt.forEach(t),NCo=r(X9e," \u2014 "),Pj=n(X9e,"A",{href:!0});var ogt=s(Pj);qCo=r(ogt,"NezhaModel"),ogt.forEach(t),jCo=r(X9e," (Nezha model)"),X9e.forEach(t),DCo=i(x),zp=n(x,"LI",{});var z9e=s(zp);yce=n(z9e,"STRONG",{});var rgt=s(yce);GCo=r(rgt,"nystromformer"),rgt.forEach(t),OCo=r(z9e," \u2014 "),Bj=n(z9e,"A",{href:!0});var tgt=s(Bj);VCo=r(tgt,"NystromformerModel"),tgt.forEach(t),XCo=r(z9e," (Nystr\xF6mformer model)"),z9e.forEach(t),zCo=i(x),Qp=n(x,"LI",{});var Q9e=s(Qp);xce=n(Q9e,"STRONG",{});var agt=s(xce);QCo=r(agt,"openai-gpt"),agt.forEach(t),WCo=r(Q9e," \u2014 "),Ij=n(Q9e,"A",{href:!0});var ngt=s(Ij);HCo=r(ngt,"OpenAIGPTModel"),ngt.forEach(t),UCo=r(Q9e," (OpenAI GPT model)"),Q9e.forEach(t),JCo=i(x),Wp=n(x,"LI",{});var W9e=s(Wp);$ce=n(W9e,"STRONG",{});var sgt=s($ce);YCo=r(sgt,"opt"),sgt.forEach(t),KCo=r(W9e," \u2014 "),Nj=n(W9e,"A",{href:!0});var lgt=s(Nj);ZCo=r(lgt,"OPTModel"),lgt.forEach(t),e3o=r(W9e," (OPT model)"),W9e.forEach(t),o3o=i(x),Hp=n(x,"LI",{});var H9e=s(Hp);kce=n(H9e,"STRONG",{});var igt=s(kce);r3o=r(igt,"pegasus"),igt.forEach(t),t3o=r(H9e," \u2014 "),qj=n(H9e,"A",{href:!0});var dgt=s(qj);a3o=r(dgt,"PegasusModel"),dgt.forEach(t),n3o=r(H9e," (Pegasus model)"),H9e.forEach(t),s3o=i(x),Up=n(x,"LI",{});var U9e=s(Up);Sce=n(U9e,"STRONG",{});var cgt=s(Sce);l3o=r(cgt,"perceiver"),cgt.forEach(t),i3o=r(U9e," \u2014 "),jj=n(U9e,"A",{href:!0});var mgt=s(jj);d3o=r(mgt,"PerceiverModel"),mgt.forEach(t),c3o=r(U9e," (Perceiver model)"),U9e.forEach(t),m3o=i(x),Jp=n(x,"LI",{});var J9e=s(Jp);Rce=n(J9e,"STRONG",{});var fgt=s(Rce);f3o=r(fgt,"plbart"),fgt.forEach(t),g3o=r(J9e," \u2014 "),Dj=n(J9e,"A",{href:!0});var ggt=s(Dj);h3o=r(ggt,"PLBartModel"),ggt.forEach(t),u3o=r(J9e," (PLBart model)"),J9e.forEach(t),p3o=i(x),Yp=n(x,"LI",{});var Y9e=s(Yp);Pce=n(Y9e,"STRONG",{});var hgt=s(Pce);_3o=r(hgt,"poolformer"),hgt.forEach(t),b3o=r(Y9e," \u2014 "),Gj=n(Y9e,"A",{href:!0});var ugt=s(Gj);v3o=r(ugt,"PoolFormerModel"),ugt.forEach(t),F3o=r(Y9e," (PoolFormer model)"),Y9e.forEach(t),T3o=i(x),Kp=n(x,"LI",{});var K9e=s(Kp);Bce=n(K9e,"STRONG",{});var pgt=s(Bce);M3o=r(pgt,"prophetnet"),pgt.forEach(t),E3o=r(K9e," \u2014 "),Oj=n(K9e,"A",{href:!0});var _gt=s(Oj);C3o=r(_gt,"ProphetNetModel"),_gt.forEach(t),w3o=r(K9e," (ProphetNet model)"),K9e.forEach(t),A3o=i(x),Zp=n(x,"LI",{});var Z9e=s(Zp);Ice=n(Z9e,"STRONG",{});var bgt=s(Ice);L3o=r(bgt,"qdqbert"),bgt.forEach(t),y3o=r(Z9e," \u2014 "),Vj=n(Z9e,"A",{href:!0});var vgt=s(Vj);x3o=r(vgt,"QDQBertModel"),vgt.forEach(t),$3o=r(Z9e," (QDQBert model)"),Z9e.forEach(t),k3o=i(x),e_=n(x,"LI",{});var exe=s(e_);Nce=n(exe,"STRONG",{});var Fgt=s(Nce);S3o=r(Fgt,"reformer"),Fgt.forEach(t),R3o=r(exe," \u2014 "),Xj=n(exe,"A",{href:!0});var Tgt=s(Xj);P3o=r(Tgt,"ReformerModel"),Tgt.forEach(t),B3o=r(exe," (Reformer model)"),exe.forEach(t),I3o=i(x),o_=n(x,"LI",{});var oxe=s(o_);qce=n(oxe,"STRONG",{});var Mgt=s(qce);N3o=r(Mgt,"regnet"),Mgt.forEach(t),q3o=r(oxe," \u2014 "),zj=n(oxe,"A",{href:!0});var Egt=s(zj);j3o=r(Egt,"RegNetModel"),Egt.forEach(t),D3o=r(oxe," (RegNet model)"),oxe.forEach(t),G3o=i(x),r_=n(x,"LI",{});var rxe=s(r_);jce=n(rxe,"STRONG",{});var Cgt=s(jce);O3o=r(Cgt,"rembert"),Cgt.forEach(t),V3o=r(rxe," \u2014 "),Qj=n(rxe,"A",{href:!0});var wgt=s(Qj);X3o=r(wgt,"RemBertModel"),wgt.forEach(t),z3o=r(rxe," (RemBERT model)"),rxe.forEach(t),Q3o=i(x),t_=n(x,"LI",{});var txe=s(t_);Dce=n(txe,"STRONG",{});var Agt=s(Dce);W3o=r(Agt,"resnet"),Agt.forEach(t),H3o=r(txe," \u2014 "),Wj=n(txe,"A",{href:!0});var Lgt=s(Wj);U3o=r(Lgt,"ResNetModel"),Lgt.forEach(t),J3o=r(txe," (ResNet model)"),txe.forEach(t),Y3o=i(x),a_=n(x,"LI",{});var axe=s(a_);Gce=n(axe,"STRONG",{});var ygt=s(Gce);K3o=r(ygt,"retribert"),ygt.forEach(t),Z3o=r(axe," \u2014 "),Hj=n(axe,"A",{href:!0});var xgt=s(Hj);e5o=r(xgt,"RetriBertModel"),xgt.forEach(t),o5o=r(axe," (RetriBERT model)"),axe.forEach(t),r5o=i(x),n_=n(x,"LI",{});var nxe=s(n_);Oce=n(nxe,"STRONG",{});var $gt=s(Oce);t5o=r($gt,"roberta"),$gt.forEach(t),a5o=r(nxe," \u2014 "),Uj=n(nxe,"A",{href:!0});var kgt=s(Uj);n5o=r(kgt,"RobertaModel"),kgt.forEach(t),s5o=r(nxe," (RoBERTa model)"),nxe.forEach(t),l5o=i(x),s_=n(x,"LI",{});var sxe=s(s_);Vce=n(sxe,"STRONG",{});var Sgt=s(Vce);i5o=r(Sgt,"roformer"),Sgt.forEach(t),d5o=r(sxe," \u2014 "),Jj=n(sxe,"A",{href:!0});var Rgt=s(Jj);c5o=r(Rgt,"RoFormerModel"),Rgt.forEach(t),m5o=r(sxe," (RoFormer model)"),sxe.forEach(t),f5o=i(x),l_=n(x,"LI",{});var lxe=s(l_);Xce=n(lxe,"STRONG",{});var Pgt=s(Xce);g5o=r(Pgt,"segformer"),Pgt.forEach(t),h5o=r(lxe," \u2014 "),Yj=n(lxe,"A",{href:!0});var Bgt=s(Yj);u5o=r(Bgt,"SegformerModel"),Bgt.forEach(t),p5o=r(lxe," (SegFormer model)"),lxe.forEach(t),_5o=i(x),i_=n(x,"LI",{});var ixe=s(i_);zce=n(ixe,"STRONG",{});var Igt=s(zce);b5o=r(Igt,"sew"),Igt.forEach(t),v5o=r(ixe," \u2014 "),Kj=n(ixe,"A",{href:!0});var Ngt=s(Kj);F5o=r(Ngt,"SEWModel"),Ngt.forEach(t),T5o=r(ixe," (SEW model)"),ixe.forEach(t),M5o=i(x),d_=n(x,"LI",{});var dxe=s(d_);Qce=n(dxe,"STRONG",{});var qgt=s(Qce);E5o=r(qgt,"sew-d"),qgt.forEach(t),C5o=r(dxe," \u2014 "),Zj=n(dxe,"A",{href:!0});var jgt=s(Zj);w5o=r(jgt,"SEWDModel"),jgt.forEach(t),A5o=r(dxe," (SEW-D model)"),dxe.forEach(t),L5o=i(x),c_=n(x,"LI",{});var cxe=s(c_);Wce=n(cxe,"STRONG",{});var Dgt=s(Wce);y5o=r(Dgt,"speech_to_text"),Dgt.forEach(t),x5o=r(cxe," \u2014 "),eD=n(cxe,"A",{href:!0});var Ggt=s(eD);$5o=r(Ggt,"Speech2TextModel"),Ggt.forEach(t),k5o=r(cxe," (Speech2Text model)"),cxe.forEach(t),S5o=i(x),m_=n(x,"LI",{});var mxe=s(m_);Hce=n(mxe,"STRONG",{});var Ogt=s(Hce);R5o=r(Ogt,"splinter"),Ogt.forEach(t),P5o=r(mxe," \u2014 "),oD=n(mxe,"A",{href:!0});var Vgt=s(oD);B5o=r(Vgt,"SplinterModel"),Vgt.forEach(t),I5o=r(mxe," (Splinter model)"),mxe.forEach(t),N5o=i(x),f_=n(x,"LI",{});var fxe=s(f_);Uce=n(fxe,"STRONG",{});var Xgt=s(Uce);q5o=r(Xgt,"squeezebert"),Xgt.forEach(t),j5o=r(fxe," \u2014 "),rD=n(fxe,"A",{href:!0});var zgt=s(rD);D5o=r(zgt,"SqueezeBertModel"),zgt.forEach(t),G5o=r(fxe," (SqueezeBERT model)"),fxe.forEach(t),O5o=i(x),g_=n(x,"LI",{});var gxe=s(g_);Jce=n(gxe,"STRONG",{});var Qgt=s(Jce);V5o=r(Qgt,"swin"),Qgt.forEach(t),X5o=r(gxe," \u2014 "),tD=n(gxe,"A",{href:!0});var Wgt=s(tD);z5o=r(Wgt,"SwinModel"),Wgt.forEach(t),Q5o=r(gxe," (Swin Transformer model)"),gxe.forEach(t),W5o=i(x),h_=n(x,"LI",{});var hxe=s(h_);Yce=n(hxe,"STRONG",{});var Hgt=s(Yce);H5o=r(Hgt,"t5"),Hgt.forEach(t),U5o=r(hxe," \u2014 "),aD=n(hxe,"A",{href:!0});var Ugt=s(aD);J5o=r(Ugt,"T5Model"),Ugt.forEach(t),Y5o=r(hxe," (T5 model)"),hxe.forEach(t),K5o=i(x),u_=n(x,"LI",{});var uxe=s(u_);Kce=n(uxe,"STRONG",{});var Jgt=s(Kce);Z5o=r(Jgt,"tapas"),Jgt.forEach(t),e0o=r(uxe," \u2014 "),nD=n(uxe,"A",{href:!0});var Ygt=s(nD);o0o=r(Ygt,"TapasModel"),Ygt.forEach(t),r0o=r(uxe," (TAPAS model)"),uxe.forEach(t),t0o=i(x),p_=n(x,"LI",{});var pxe=s(p_);Zce=n(pxe,"STRONG",{});var Kgt=s(Zce);a0o=r(Kgt,"trajectory_transformer"),Kgt.forEach(t),n0o=r(pxe," \u2014 "),sD=n(pxe,"A",{href:!0});var Zgt=s(sD);s0o=r(Zgt,"TrajectoryTransformerModel"),Zgt.forEach(t),l0o=r(pxe," (Trajectory Transformer model)"),pxe.forEach(t),i0o=i(x),__=n(x,"LI",{});var _xe=s(__);eme=n(_xe,"STRONG",{});var eht=s(eme);d0o=r(eht,"transfo-xl"),eht.forEach(t),c0o=r(_xe," \u2014 "),lD=n(_xe,"A",{href:!0});var oht=s(lD);m0o=r(oht,"TransfoXLModel"),oht.forEach(t),f0o=r(_xe," (Transformer-XL model)"),_xe.forEach(t),g0o=i(x),b_=n(x,"LI",{});var bxe=s(b_);ome=n(bxe,"STRONG",{});var rht=s(ome);h0o=r(rht,"unispeech"),rht.forEach(t),u0o=r(bxe," \u2014 "),iD=n(bxe,"A",{href:!0});var tht=s(iD);p0o=r(tht,"UniSpeechModel"),tht.forEach(t),_0o=r(bxe," (UniSpeech model)"),bxe.forEach(t),b0o=i(x),v_=n(x,"LI",{});var vxe=s(v_);rme=n(vxe,"STRONG",{});var aht=s(rme);v0o=r(aht,"unispeech-sat"),aht.forEach(t),F0o=r(vxe," \u2014 "),dD=n(vxe,"A",{href:!0});var nht=s(dD);T0o=r(nht,"UniSpeechSatModel"),nht.forEach(t),M0o=r(vxe," (UniSpeechSat model)"),vxe.forEach(t),E0o=i(x),F_=n(x,"LI",{});var Fxe=s(F_);tme=n(Fxe,"STRONG",{});var sht=s(tme);C0o=r(sht,"van"),sht.forEach(t),w0o=r(Fxe," \u2014 "),cD=n(Fxe,"A",{href:!0});var lht=s(cD);A0o=r(lht,"VanModel"),lht.forEach(t),L0o=r(Fxe," (VAN model)"),Fxe.forEach(t),y0o=i(x),T_=n(x,"LI",{});var Txe=s(T_);ame=n(Txe,"STRONG",{});var iht=s(ame);x0o=r(iht,"vilt"),iht.forEach(t),$0o=r(Txe," \u2014 "),mD=n(Txe,"A",{href:!0});var dht=s(mD);k0o=r(dht,"ViltModel"),dht.forEach(t),S0o=r(Txe," (ViLT model)"),Txe.forEach(t),R0o=i(x),M_=n(x,"LI",{});var Mxe=s(M_);nme=n(Mxe,"STRONG",{});var cht=s(nme);P0o=r(cht,"vision-text-dual-encoder"),cht.forEach(t),B0o=r(Mxe," \u2014 "),fD=n(Mxe,"A",{href:!0});var mht=s(fD);I0o=r(mht,"VisionTextDualEncoderModel"),mht.forEach(t),N0o=r(Mxe," (VisionTextDualEncoder model)"),Mxe.forEach(t),q0o=i(x),E_=n(x,"LI",{});var Exe=s(E_);sme=n(Exe,"STRONG",{});var fht=s(sme);j0o=r(fht,"visual_bert"),fht.forEach(t),D0o=r(Exe," \u2014 "),gD=n(Exe,"A",{href:!0});var ght=s(gD);G0o=r(ght,"VisualBertModel"),ght.forEach(t),O0o=r(Exe," (VisualBERT model)"),Exe.forEach(t),V0o=i(x),C_=n(x,"LI",{});var Cxe=s(C_);lme=n(Cxe,"STRONG",{});var hht=s(lme);X0o=r(hht,"vit"),hht.forEach(t),z0o=r(Cxe," \u2014 "),hD=n(Cxe,"A",{href:!0});var uht=s(hD);Q0o=r(uht,"ViTModel"),uht.forEach(t),W0o=r(Cxe," (ViT model)"),Cxe.forEach(t),H0o=i(x),w_=n(x,"LI",{});var wxe=s(w_);ime=n(wxe,"STRONG",{});var pht=s(ime);U0o=r(pht,"vit_mae"),pht.forEach(t),J0o=r(wxe," \u2014 "),uD=n(wxe,"A",{href:!0});var _ht=s(uD);Y0o=r(_ht,"ViTMAEModel"),_ht.forEach(t),K0o=r(wxe," (ViTMAE model)"),wxe.forEach(t),Z0o=i(x),A_=n(x,"LI",{});var Axe=s(A_);dme=n(Axe,"STRONG",{});var bht=s(dme);ewo=r(bht,"wav2vec2"),bht.forEach(t),owo=r(Axe," \u2014 "),pD=n(Axe,"A",{href:!0});var vht=s(pD);rwo=r(vht,"Wav2Vec2Model"),vht.forEach(t),two=r(Axe," (Wav2Vec2 model)"),Axe.forEach(t),awo=i(x),L_=n(x,"LI",{});var Lxe=s(L_);cme=n(Lxe,"STRONG",{});var Fht=s(cme);nwo=r(Fht,"wav2vec2-conformer"),Fht.forEach(t),swo=r(Lxe," \u2014 "),_D=n(Lxe,"A",{href:!0});var Tht=s(_D);lwo=r(Tht,"Wav2Vec2ConformerModel"),Tht.forEach(t),iwo=r(Lxe," (Wav2Vec2-Conformer model)"),Lxe.forEach(t),dwo=i(x),y_=n(x,"LI",{});var yxe=s(y_);mme=n(yxe,"STRONG",{});var Mht=s(mme);cwo=r(Mht,"wavlm"),Mht.forEach(t),mwo=r(yxe," \u2014 "),bD=n(yxe,"A",{href:!0});var Eht=s(bD);fwo=r(Eht,"WavLMModel"),Eht.forEach(t),gwo=r(yxe," (WavLM model)"),yxe.forEach(t),hwo=i(x),x_=n(x,"LI",{});var xxe=s(x_);fme=n(xxe,"STRONG",{});var Cht=s(fme);uwo=r(Cht,"xglm"),Cht.forEach(t),pwo=r(xxe," \u2014 "),vD=n(xxe,"A",{href:!0});var wht=s(vD);_wo=r(wht,"XGLMModel"),wht.forEach(t),bwo=r(xxe," (XGLM model)"),xxe.forEach(t),vwo=i(x),$_=n(x,"LI",{});var $xe=s($_);gme=n($xe,"STRONG",{});var Aht=s(gme);Fwo=r(Aht,"xlm"),Aht.forEach(t),Two=r($xe," \u2014 "),FD=n($xe,"A",{href:!0});var Lht=s(FD);Mwo=r(Lht,"XLMModel"),Lht.forEach(t),Ewo=r($xe," (XLM model)"),$xe.forEach(t),Cwo=i(x),k_=n(x,"LI",{});var kxe=s(k_);hme=n(kxe,"STRONG",{});var yht=s(hme);wwo=r(yht,"xlm-prophetnet"),yht.forEach(t),Awo=r(kxe," \u2014 "),TD=n(kxe,"A",{href:!0});var xht=s(TD);Lwo=r(xht,"XLMProphetNetModel"),xht.forEach(t),ywo=r(kxe," (XLM-ProphetNet model)"),kxe.forEach(t),xwo=i(x),S_=n(x,"LI",{});var Sxe=s(S_);ume=n(Sxe,"STRONG",{});var $ht=s(ume);$wo=r($ht,"xlm-roberta"),$ht.forEach(t),kwo=r(Sxe," \u2014 "),MD=n(Sxe,"A",{href:!0});var kht=s(MD);Swo=r(kht,"XLMRobertaModel"),kht.forEach(t),Rwo=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),Pwo=i(x),R_=n(x,"LI",{});var Rxe=s(R_);pme=n(Rxe,"STRONG",{});var Sht=s(pme);Bwo=r(Sht,"xlm-roberta-xl"),Sht.forEach(t),Iwo=r(Rxe," \u2014 "),ED=n(Rxe,"A",{href:!0});var Rht=s(ED);Nwo=r(Rht,"XLMRobertaXLModel"),Rht.forEach(t),qwo=r(Rxe," (XLM-RoBERTa-XL model)"),Rxe.forEach(t),jwo=i(x),P_=n(x,"LI",{});var Pxe=s(P_);_me=n(Pxe,"STRONG",{});var Pht=s(_me);Dwo=r(Pht,"xlnet"),Pht.forEach(t),Gwo=r(Pxe," \u2014 "),CD=n(Pxe,"A",{href:!0});var Bht=s(CD);Owo=r(Bht,"XLNetModel"),Bht.forEach(t),Vwo=r(Pxe," (XLNet model)"),Pxe.forEach(t),Xwo=i(x),B_=n(x,"LI",{});var Bxe=s(B_);bme=n(Bxe,"STRONG",{});var Iht=s(bme);zwo=r(Iht,"yolos"),Iht.forEach(t),Qwo=r(Bxe," \u2014 "),wD=n(Bxe,"A",{href:!0});var Nht=s(wD);Wwo=r(Nht,"YolosModel"),Nht.forEach(t),Hwo=r(Bxe," (YOLOS model)"),Bxe.forEach(t),Uwo=i(x),I_=n(x,"LI",{});var Ixe=s(I_);vme=n(Ixe,"STRONG",{});var qht=s(vme);Jwo=r(qht,"yoso"),qht.forEach(t),Ywo=r(Ixe," \u2014 "),AD=n(Ixe,"A",{href:!0});var jht=s(AD);Kwo=r(jht,"YosoModel"),jht.forEach(t),Zwo=r(Ixe," (YOSO model)"),Ixe.forEach(t),x.forEach(t),eAo=i(na),N_=n(na,"P",{});var Nxe=s(N_);oAo=r(Nxe,"The model is set in evaluation mode by default using "),Fme=n(Nxe,"CODE",{});var Dht=s(Fme);rAo=r(Dht,"model.eval()"),Dht.forEach(t),tAo=r(Nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tme=n(Nxe,"CODE",{});var Ght=s(Tme);aAo=r(Ght,"model.train()"),Ght.forEach(t),Nxe.forEach(t),nAo=i(na),T(q_.$$.fragment,na),na.forEach(t),Zs.forEach(t),QOe=i(m),Gi=n(m,"H2",{class:!0});var KXe=s(Gi);j_=n(KXe,"A",{id:!0,class:!0,href:!0});var Oht=s(j_);Mme=n(Oht,"SPAN",{});var Vht=s(Mme);T(_y.$$.fragment,Vht),Vht.forEach(t),Oht.forEach(t),sAo=i(KXe),Eme=n(KXe,"SPAN",{});var Xht=s(Eme);lAo=r(Xht,"AutoModelForPreTraining"),Xht.forEach(t),KXe.forEach(t),WOe=i(m),$o=n(m,"DIV",{class:!0});var el=s($o);T(by.$$.fragment,el),iAo=i(el),Oi=n(el,"P",{});var Woe=s(Oi);dAo=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LD=n(Woe,"A",{href:!0});var zht=s(LD);cAo=r(zht,"from_pretrained()"),zht.forEach(t),mAo=r(Woe," class method or the "),yD=n(Woe,"A",{href:!0});var Qht=s(yD);fAo=r(Qht,"from_config()"),Qht.forEach(t),gAo=r(Woe,` class
method.`),Woe.forEach(t),hAo=i(el),vy=n(el,"P",{});var ZXe=s(vy);uAo=r(ZXe,"This class cannot be instantiated directly using "),Cme=n(ZXe,"CODE",{});var Wht=s(Cme);pAo=r(Wht,"__init__()"),Wht.forEach(t),_Ao=r(ZXe," (throws an error)."),ZXe.forEach(t),bAo=i(el),lt=n(el,"DIV",{class:!0});var z6=s(lt);T(Fy.$$.fragment,z6),vAo=i(z6),wme=n(z6,"P",{});var Hht=s(wme);FAo=r(Hht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hht.forEach(t),TAo=i(z6),Vi=n(z6,"P",{});var Hoe=s(Vi);MAo=r(Hoe,`Note:
Loading a model from its configuration file does `),Ame=n(Hoe,"STRONG",{});var Uht=s(Ame);EAo=r(Uht,"not"),Uht.forEach(t),CAo=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=n(Hoe,"A",{href:!0});var Jht=s(xD);wAo=r(Jht,"from_pretrained()"),Jht.forEach(t),AAo=r(Hoe," to load the model weights."),Hoe.forEach(t),LAo=i(z6),T(D_.$$.fragment,z6),z6.forEach(t),yAo=i(el),Ye=n(el,"DIV",{class:!0});var sa=s(Ye);T(Ty.$$.fragment,sa),xAo=i(sa),Lme=n(sa,"P",{});var Yht=s(Lme);$Ao=r(Yht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Yht.forEach(t),kAo=i(sa),Ba=n(sa,"P",{});var Q6=s(Ba);SAo=r(Q6,"The model class to instantiate is selected based on the "),yme=n(Q6,"CODE",{});var Kht=s(yme);RAo=r(Kht,"model_type"),Kht.forEach(t),PAo=r(Q6,` property of the config object (either
passed as an argument or loaded from `),xme=n(Q6,"CODE",{});var Zht=s(xme);BAo=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),IAo=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=n(Q6,"CODE",{});var eut=s($me);NAo=r(eut,"pretrained_model_name_or_path"),eut.forEach(t),qAo=r(Q6,":"),Q6.forEach(t),jAo=i(sa),G=n(sa,"UL",{});var O=s(G);G_=n(O,"LI",{});var qxe=s(G_);kme=n(qxe,"STRONG",{});var out=s(kme);DAo=r(out,"albert"),out.forEach(t),GAo=r(qxe," \u2014 "),$D=n(qxe,"A",{href:!0});var rut=s($D);OAo=r(rut,"AlbertForPreTraining"),rut.forEach(t),VAo=r(qxe," (ALBERT model)"),qxe.forEach(t),XAo=i(O),O_=n(O,"LI",{});var jxe=s(O_);Sme=n(jxe,"STRONG",{});var tut=s(Sme);zAo=r(tut,"bart"),tut.forEach(t),QAo=r(jxe," \u2014 "),kD=n(jxe,"A",{href:!0});var aut=s(kD);WAo=r(aut,"BartForConditionalGeneration"),aut.forEach(t),HAo=r(jxe," (BART model)"),jxe.forEach(t),UAo=i(O),V_=n(O,"LI",{});var Dxe=s(V_);Rme=n(Dxe,"STRONG",{});var nut=s(Rme);JAo=r(nut,"bert"),nut.forEach(t),YAo=r(Dxe," \u2014 "),SD=n(Dxe,"A",{href:!0});var sut=s(SD);KAo=r(sut,"BertForPreTraining"),sut.forEach(t),ZAo=r(Dxe," (BERT model)"),Dxe.forEach(t),e6o=i(O),X_=n(O,"LI",{});var Gxe=s(X_);Pme=n(Gxe,"STRONG",{});var lut=s(Pme);o6o=r(lut,"big_bird"),lut.forEach(t),r6o=r(Gxe," \u2014 "),RD=n(Gxe,"A",{href:!0});var iut=s(RD);t6o=r(iut,"BigBirdForPreTraining"),iut.forEach(t),a6o=r(Gxe," (BigBird model)"),Gxe.forEach(t),n6o=i(O),z_=n(O,"LI",{});var Oxe=s(z_);Bme=n(Oxe,"STRONG",{});var dut=s(Bme);s6o=r(dut,"bloom"),dut.forEach(t),l6o=r(Oxe," \u2014 "),PD=n(Oxe,"A",{href:!0});var cut=s(PD);i6o=r(cut,"BloomForCausalLM"),cut.forEach(t),d6o=r(Oxe," (BLOOM model)"),Oxe.forEach(t),c6o=i(O),Q_=n(O,"LI",{});var Vxe=s(Q_);Ime=n(Vxe,"STRONG",{});var mut=s(Ime);m6o=r(mut,"camembert"),mut.forEach(t),f6o=r(Vxe," \u2014 "),BD=n(Vxe,"A",{href:!0});var fut=s(BD);g6o=r(fut,"CamembertForMaskedLM"),fut.forEach(t),h6o=r(Vxe," (CamemBERT model)"),Vxe.forEach(t),u6o=i(O),W_=n(O,"LI",{});var Xxe=s(W_);Nme=n(Xxe,"STRONG",{});var gut=s(Nme);p6o=r(gut,"ctrl"),gut.forEach(t),_6o=r(Xxe," \u2014 "),ID=n(Xxe,"A",{href:!0});var hut=s(ID);b6o=r(hut,"CTRLLMHeadModel"),hut.forEach(t),v6o=r(Xxe," (CTRL model)"),Xxe.forEach(t),F6o=i(O),H_=n(O,"LI",{});var zxe=s(H_);qme=n(zxe,"STRONG",{});var uut=s(qme);T6o=r(uut,"data2vec-text"),uut.forEach(t),M6o=r(zxe," \u2014 "),ND=n(zxe,"A",{href:!0});var put=s(ND);E6o=r(put,"Data2VecTextForMaskedLM"),put.forEach(t),C6o=r(zxe," (Data2VecText model)"),zxe.forEach(t),w6o=i(O),U_=n(O,"LI",{});var Qxe=s(U_);jme=n(Qxe,"STRONG",{});var _ut=s(jme);A6o=r(_ut,"deberta"),_ut.forEach(t),L6o=r(Qxe," \u2014 "),qD=n(Qxe,"A",{href:!0});var but=s(qD);y6o=r(but,"DebertaForMaskedLM"),but.forEach(t),x6o=r(Qxe," (DeBERTa model)"),Qxe.forEach(t),$6o=i(O),J_=n(O,"LI",{});var Wxe=s(J_);Dme=n(Wxe,"STRONG",{});var vut=s(Dme);k6o=r(vut,"deberta-v2"),vut.forEach(t),S6o=r(Wxe," \u2014 "),jD=n(Wxe,"A",{href:!0});var Fut=s(jD);R6o=r(Fut,"DebertaV2ForMaskedLM"),Fut.forEach(t),P6o=r(Wxe," (DeBERTa-v2 model)"),Wxe.forEach(t),B6o=i(O),Y_=n(O,"LI",{});var Hxe=s(Y_);Gme=n(Hxe,"STRONG",{});var Tut=s(Gme);I6o=r(Tut,"distilbert"),Tut.forEach(t),N6o=r(Hxe," \u2014 "),DD=n(Hxe,"A",{href:!0});var Mut=s(DD);q6o=r(Mut,"DistilBertForMaskedLM"),Mut.forEach(t),j6o=r(Hxe," (DistilBERT model)"),Hxe.forEach(t),D6o=i(O),K_=n(O,"LI",{});var Uxe=s(K_);Ome=n(Uxe,"STRONG",{});var Eut=s(Ome);G6o=r(Eut,"electra"),Eut.forEach(t),O6o=r(Uxe," \u2014 "),GD=n(Uxe,"A",{href:!0});var Cut=s(GD);V6o=r(Cut,"ElectraForPreTraining"),Cut.forEach(t),X6o=r(Uxe," (ELECTRA model)"),Uxe.forEach(t),z6o=i(O),Z_=n(O,"LI",{});var Jxe=s(Z_);Vme=n(Jxe,"STRONG",{});var wut=s(Vme);Q6o=r(wut,"flaubert"),wut.forEach(t),W6o=r(Jxe," \u2014 "),OD=n(Jxe,"A",{href:!0});var Aut=s(OD);H6o=r(Aut,"FlaubertWithLMHeadModel"),Aut.forEach(t),U6o=r(Jxe," (FlauBERT model)"),Jxe.forEach(t),J6o=i(O),e2=n(O,"LI",{});var Yxe=s(e2);Xme=n(Yxe,"STRONG",{});var Lut=s(Xme);Y6o=r(Lut,"flava"),Lut.forEach(t),K6o=r(Yxe," \u2014 "),VD=n(Yxe,"A",{href:!0});var yut=s(VD);Z6o=r(yut,"FlavaForPreTraining"),yut.forEach(t),eLo=r(Yxe," (FLAVA model)"),Yxe.forEach(t),oLo=i(O),o2=n(O,"LI",{});var Kxe=s(o2);zme=n(Kxe,"STRONG",{});var xut=s(zme);rLo=r(xut,"fnet"),xut.forEach(t),tLo=r(Kxe," \u2014 "),XD=n(Kxe,"A",{href:!0});var $ut=s(XD);aLo=r($ut,"FNetForPreTraining"),$ut.forEach(t),nLo=r(Kxe," (FNet model)"),Kxe.forEach(t),sLo=i(O),r2=n(O,"LI",{});var Zxe=s(r2);Qme=n(Zxe,"STRONG",{});var kut=s(Qme);lLo=r(kut,"fsmt"),kut.forEach(t),iLo=r(Zxe," \u2014 "),zD=n(Zxe,"A",{href:!0});var Sut=s(zD);dLo=r(Sut,"FSMTForConditionalGeneration"),Sut.forEach(t),cLo=r(Zxe," (FairSeq Machine-Translation model)"),Zxe.forEach(t),mLo=i(O),t2=n(O,"LI",{});var e$e=s(t2);Wme=n(e$e,"STRONG",{});var Rut=s(Wme);fLo=r(Rut,"funnel"),Rut.forEach(t),gLo=r(e$e," \u2014 "),QD=n(e$e,"A",{href:!0});var Put=s(QD);hLo=r(Put,"FunnelForPreTraining"),Put.forEach(t),uLo=r(e$e," (Funnel Transformer model)"),e$e.forEach(t),pLo=i(O),a2=n(O,"LI",{});var o$e=s(a2);Hme=n(o$e,"STRONG",{});var But=s(Hme);_Lo=r(But,"gpt2"),But.forEach(t),bLo=r(o$e," \u2014 "),WD=n(o$e,"A",{href:!0});var Iut=s(WD);vLo=r(Iut,"GPT2LMHeadModel"),Iut.forEach(t),FLo=r(o$e," (OpenAI GPT-2 model)"),o$e.forEach(t),TLo=i(O),n2=n(O,"LI",{});var r$e=s(n2);Ume=n(r$e,"STRONG",{});var Nut=s(Ume);MLo=r(Nut,"ibert"),Nut.forEach(t),ELo=r(r$e," \u2014 "),HD=n(r$e,"A",{href:!0});var qut=s(HD);CLo=r(qut,"IBertForMaskedLM"),qut.forEach(t),wLo=r(r$e," (I-BERT model)"),r$e.forEach(t),ALo=i(O),s2=n(O,"LI",{});var t$e=s(s2);Jme=n(t$e,"STRONG",{});var jut=s(Jme);LLo=r(jut,"layoutlm"),jut.forEach(t),yLo=r(t$e," \u2014 "),UD=n(t$e,"A",{href:!0});var Dut=s(UD);xLo=r(Dut,"LayoutLMForMaskedLM"),Dut.forEach(t),$Lo=r(t$e," (LayoutLM model)"),t$e.forEach(t),kLo=i(O),l2=n(O,"LI",{});var a$e=s(l2);Yme=n(a$e,"STRONG",{});var Gut=s(Yme);SLo=r(Gut,"longformer"),Gut.forEach(t),RLo=r(a$e," \u2014 "),JD=n(a$e,"A",{href:!0});var Out=s(JD);PLo=r(Out,"LongformerForMaskedLM"),Out.forEach(t),BLo=r(a$e," (Longformer model)"),a$e.forEach(t),ILo=i(O),i2=n(O,"LI",{});var n$e=s(i2);Kme=n(n$e,"STRONG",{});var Vut=s(Kme);NLo=r(Vut,"lxmert"),Vut.forEach(t),qLo=r(n$e," \u2014 "),YD=n(n$e,"A",{href:!0});var Xut=s(YD);jLo=r(Xut,"LxmertForPreTraining"),Xut.forEach(t),DLo=r(n$e," (LXMERT model)"),n$e.forEach(t),GLo=i(O),d2=n(O,"LI",{});var s$e=s(d2);Zme=n(s$e,"STRONG",{});var zut=s(Zme);OLo=r(zut,"megatron-bert"),zut.forEach(t),VLo=r(s$e," \u2014 "),KD=n(s$e,"A",{href:!0});var Qut=s(KD);XLo=r(Qut,"MegatronBertForPreTraining"),Qut.forEach(t),zLo=r(s$e," (Megatron-BERT model)"),s$e.forEach(t),QLo=i(O),c2=n(O,"LI",{});var l$e=s(c2);efe=n(l$e,"STRONG",{});var Wut=s(efe);WLo=r(Wut,"mobilebert"),Wut.forEach(t),HLo=r(l$e," \u2014 "),ZD=n(l$e,"A",{href:!0});var Hut=s(ZD);ULo=r(Hut,"MobileBertForPreTraining"),Hut.forEach(t),JLo=r(l$e," (MobileBERT model)"),l$e.forEach(t),YLo=i(O),m2=n(O,"LI",{});var i$e=s(m2);ofe=n(i$e,"STRONG",{});var Uut=s(ofe);KLo=r(Uut,"mpnet"),Uut.forEach(t),ZLo=r(i$e," \u2014 "),eG=n(i$e,"A",{href:!0});var Jut=s(eG);e7o=r(Jut,"MPNetForMaskedLM"),Jut.forEach(t),o7o=r(i$e," (MPNet model)"),i$e.forEach(t),r7o=i(O),f2=n(O,"LI",{});var d$e=s(f2);rfe=n(d$e,"STRONG",{});var Yut=s(rfe);t7o=r(Yut,"nezha"),Yut.forEach(t),a7o=r(d$e," \u2014 "),oG=n(d$e,"A",{href:!0});var Kut=s(oG);n7o=r(Kut,"NezhaForPreTraining"),Kut.forEach(t),s7o=r(d$e," (Nezha model)"),d$e.forEach(t),l7o=i(O),g2=n(O,"LI",{});var c$e=s(g2);tfe=n(c$e,"STRONG",{});var Zut=s(tfe);i7o=r(Zut,"openai-gpt"),Zut.forEach(t),d7o=r(c$e," \u2014 "),rG=n(c$e,"A",{href:!0});var ept=s(rG);c7o=r(ept,"OpenAIGPTLMHeadModel"),ept.forEach(t),m7o=r(c$e," (OpenAI GPT model)"),c$e.forEach(t),f7o=i(O),h2=n(O,"LI",{});var m$e=s(h2);afe=n(m$e,"STRONG",{});var opt=s(afe);g7o=r(opt,"retribert"),opt.forEach(t),h7o=r(m$e," \u2014 "),tG=n(m$e,"A",{href:!0});var rpt=s(tG);u7o=r(rpt,"RetriBertModel"),rpt.forEach(t),p7o=r(m$e," (RetriBERT model)"),m$e.forEach(t),_7o=i(O),u2=n(O,"LI",{});var f$e=s(u2);nfe=n(f$e,"STRONG",{});var tpt=s(nfe);b7o=r(tpt,"roberta"),tpt.forEach(t),v7o=r(f$e," \u2014 "),aG=n(f$e,"A",{href:!0});var apt=s(aG);F7o=r(apt,"RobertaForMaskedLM"),apt.forEach(t),T7o=r(f$e," (RoBERTa model)"),f$e.forEach(t),M7o=i(O),p2=n(O,"LI",{});var g$e=s(p2);sfe=n(g$e,"STRONG",{});var npt=s(sfe);E7o=r(npt,"splinter"),npt.forEach(t),C7o=r(g$e," \u2014 "),nG=n(g$e,"A",{href:!0});var spt=s(nG);w7o=r(spt,"SplinterForPreTraining"),spt.forEach(t),A7o=r(g$e," (Splinter model)"),g$e.forEach(t),L7o=i(O),_2=n(O,"LI",{});var h$e=s(_2);lfe=n(h$e,"STRONG",{});var lpt=s(lfe);y7o=r(lpt,"squeezebert"),lpt.forEach(t),x7o=r(h$e," \u2014 "),sG=n(h$e,"A",{href:!0});var ipt=s(sG);$7o=r(ipt,"SqueezeBertForMaskedLM"),ipt.forEach(t),k7o=r(h$e," (SqueezeBERT model)"),h$e.forEach(t),S7o=i(O),b2=n(O,"LI",{});var u$e=s(b2);ife=n(u$e,"STRONG",{});var dpt=s(ife);R7o=r(dpt,"t5"),dpt.forEach(t),P7o=r(u$e," \u2014 "),lG=n(u$e,"A",{href:!0});var cpt=s(lG);B7o=r(cpt,"T5ForConditionalGeneration"),cpt.forEach(t),I7o=r(u$e," (T5 model)"),u$e.forEach(t),N7o=i(O),v2=n(O,"LI",{});var p$e=s(v2);dfe=n(p$e,"STRONG",{});var mpt=s(dfe);q7o=r(mpt,"tapas"),mpt.forEach(t),j7o=r(p$e," \u2014 "),iG=n(p$e,"A",{href:!0});var fpt=s(iG);D7o=r(fpt,"TapasForMaskedLM"),fpt.forEach(t),G7o=r(p$e," (TAPAS model)"),p$e.forEach(t),O7o=i(O),F2=n(O,"LI",{});var _$e=s(F2);cfe=n(_$e,"STRONG",{});var gpt=s(cfe);V7o=r(gpt,"transfo-xl"),gpt.forEach(t),X7o=r(_$e," \u2014 "),dG=n(_$e,"A",{href:!0});var hpt=s(dG);z7o=r(hpt,"TransfoXLLMHeadModel"),hpt.forEach(t),Q7o=r(_$e," (Transformer-XL model)"),_$e.forEach(t),W7o=i(O),T2=n(O,"LI",{});var b$e=s(T2);mfe=n(b$e,"STRONG",{});var upt=s(mfe);H7o=r(upt,"unispeech"),upt.forEach(t),U7o=r(b$e," \u2014 "),cG=n(b$e,"A",{href:!0});var ppt=s(cG);J7o=r(ppt,"UniSpeechForPreTraining"),ppt.forEach(t),Y7o=r(b$e," (UniSpeech model)"),b$e.forEach(t),K7o=i(O),M2=n(O,"LI",{});var v$e=s(M2);ffe=n(v$e,"STRONG",{});var _pt=s(ffe);Z7o=r(_pt,"unispeech-sat"),_pt.forEach(t),eyo=r(v$e," \u2014 "),mG=n(v$e,"A",{href:!0});var bpt=s(mG);oyo=r(bpt,"UniSpeechSatForPreTraining"),bpt.forEach(t),ryo=r(v$e," (UniSpeechSat model)"),v$e.forEach(t),tyo=i(O),E2=n(O,"LI",{});var F$e=s(E2);gfe=n(F$e,"STRONG",{});var vpt=s(gfe);ayo=r(vpt,"visual_bert"),vpt.forEach(t),nyo=r(F$e," \u2014 "),fG=n(F$e,"A",{href:!0});var Fpt=s(fG);syo=r(Fpt,"VisualBertForPreTraining"),Fpt.forEach(t),lyo=r(F$e," (VisualBERT model)"),F$e.forEach(t),iyo=i(O),C2=n(O,"LI",{});var T$e=s(C2);hfe=n(T$e,"STRONG",{});var Tpt=s(hfe);dyo=r(Tpt,"vit_mae"),Tpt.forEach(t),cyo=r(T$e," \u2014 "),gG=n(T$e,"A",{href:!0});var Mpt=s(gG);myo=r(Mpt,"ViTMAEForPreTraining"),Mpt.forEach(t),fyo=r(T$e," (ViTMAE model)"),T$e.forEach(t),gyo=i(O),w2=n(O,"LI",{});var M$e=s(w2);ufe=n(M$e,"STRONG",{});var Ept=s(ufe);hyo=r(Ept,"wav2vec2"),Ept.forEach(t),uyo=r(M$e," \u2014 "),hG=n(M$e,"A",{href:!0});var Cpt=s(hG);pyo=r(Cpt,"Wav2Vec2ForPreTraining"),Cpt.forEach(t),_yo=r(M$e," (Wav2Vec2 model)"),M$e.forEach(t),byo=i(O),A2=n(O,"LI",{});var E$e=s(A2);pfe=n(E$e,"STRONG",{});var wpt=s(pfe);vyo=r(wpt,"wav2vec2-conformer"),wpt.forEach(t),Fyo=r(E$e," \u2014 "),uG=n(E$e,"A",{href:!0});var Apt=s(uG);Tyo=r(Apt,"Wav2Vec2ConformerForPreTraining"),Apt.forEach(t),Myo=r(E$e," (Wav2Vec2-Conformer model)"),E$e.forEach(t),Eyo=i(O),L2=n(O,"LI",{});var C$e=s(L2);_fe=n(C$e,"STRONG",{});var Lpt=s(_fe);Cyo=r(Lpt,"xlm"),Lpt.forEach(t),wyo=r(C$e," \u2014 "),pG=n(C$e,"A",{href:!0});var ypt=s(pG);Ayo=r(ypt,"XLMWithLMHeadModel"),ypt.forEach(t),Lyo=r(C$e," (XLM model)"),C$e.forEach(t),yyo=i(O),y2=n(O,"LI",{});var w$e=s(y2);bfe=n(w$e,"STRONG",{});var xpt=s(bfe);xyo=r(xpt,"xlm-roberta"),xpt.forEach(t),$yo=r(w$e," \u2014 "),_G=n(w$e,"A",{href:!0});var $pt=s(_G);kyo=r($pt,"XLMRobertaForMaskedLM"),$pt.forEach(t),Syo=r(w$e," (XLM-RoBERTa model)"),w$e.forEach(t),Ryo=i(O),x2=n(O,"LI",{});var A$e=s(x2);vfe=n(A$e,"STRONG",{});var kpt=s(vfe);Pyo=r(kpt,"xlm-roberta-xl"),kpt.forEach(t),Byo=r(A$e," \u2014 "),bG=n(A$e,"A",{href:!0});var Spt=s(bG);Iyo=r(Spt,"XLMRobertaXLForMaskedLM"),Spt.forEach(t),Nyo=r(A$e," (XLM-RoBERTa-XL model)"),A$e.forEach(t),qyo=i(O),$2=n(O,"LI",{});var L$e=s($2);Ffe=n(L$e,"STRONG",{});var Rpt=s(Ffe);jyo=r(Rpt,"xlnet"),Rpt.forEach(t),Dyo=r(L$e," \u2014 "),vG=n(L$e,"A",{href:!0});var Ppt=s(vG);Gyo=r(Ppt,"XLNetLMHeadModel"),Ppt.forEach(t),Oyo=r(L$e," (XLNet model)"),L$e.forEach(t),O.forEach(t),Vyo=i(sa),k2=n(sa,"P",{});var y$e=s(k2);Xyo=r(y$e,"The model is set in evaluation mode by default using "),Tfe=n(y$e,"CODE",{});var Bpt=s(Tfe);zyo=r(Bpt,"model.eval()"),Bpt.forEach(t),Qyo=r(y$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=n(y$e,"CODE",{});var Ipt=s(Mfe);Wyo=r(Ipt,"model.train()"),Ipt.forEach(t),y$e.forEach(t),Hyo=i(sa),T(S2.$$.fragment,sa),sa.forEach(t),el.forEach(t),HOe=i(m),Xi=n(m,"H2",{class:!0});var eze=s(Xi);R2=n(eze,"A",{id:!0,class:!0,href:!0});var Npt=s(R2);Efe=n(Npt,"SPAN",{});var qpt=s(Efe);T(My.$$.fragment,qpt),qpt.forEach(t),Npt.forEach(t),Uyo=i(eze),Cfe=n(eze,"SPAN",{});var jpt=s(Cfe);Jyo=r(jpt,"AutoModelForCausalLM"),jpt.forEach(t),eze.forEach(t),UOe=i(m),ko=n(m,"DIV",{class:!0});var ol=s(ko);T(Ey.$$.fragment,ol),Yyo=i(ol),zi=n(ol,"P",{});var Uoe=s(zi);Kyo=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FG=n(Uoe,"A",{href:!0});var Dpt=s(FG);Zyo=r(Dpt,"from_pretrained()"),Dpt.forEach(t),e8o=r(Uoe," class method or the "),TG=n(Uoe,"A",{href:!0});var Gpt=s(TG);o8o=r(Gpt,"from_config()"),Gpt.forEach(t),r8o=r(Uoe,` class
method.`),Uoe.forEach(t),t8o=i(ol),Cy=n(ol,"P",{});var oze=s(Cy);a8o=r(oze,"This class cannot be instantiated directly using "),wfe=n(oze,"CODE",{});var Opt=s(wfe);n8o=r(Opt,"__init__()"),Opt.forEach(t),s8o=r(oze," (throws an error)."),oze.forEach(t),l8o=i(ol),it=n(ol,"DIV",{class:!0});var W6=s(it);T(wy.$$.fragment,W6),i8o=i(W6),Afe=n(W6,"P",{});var Vpt=s(Afe);d8o=r(Vpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vpt.forEach(t),c8o=i(W6),Qi=n(W6,"P",{});var Joe=s(Qi);m8o=r(Joe,`Note:
Loading a model from its configuration file does `),Lfe=n(Joe,"STRONG",{});var Xpt=s(Lfe);f8o=r(Xpt,"not"),Xpt.forEach(t),g8o=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(Joe,"A",{href:!0});var zpt=s(MG);h8o=r(zpt,"from_pretrained()"),zpt.forEach(t),u8o=r(Joe," to load the model weights."),Joe.forEach(t),p8o=i(W6),T(P2.$$.fragment,W6),W6.forEach(t),_8o=i(ol),Ke=n(ol,"DIV",{class:!0});var la=s(Ke);T(Ay.$$.fragment,la),b8o=i(la),yfe=n(la,"P",{});var Qpt=s(yfe);v8o=r(Qpt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qpt.forEach(t),F8o=i(la),Ia=n(la,"P",{});var H6=s(Ia);T8o=r(H6,"The model class to instantiate is selected based on the "),xfe=n(H6,"CODE",{});var Wpt=s(xfe);M8o=r(Wpt,"model_type"),Wpt.forEach(t),E8o=r(H6,` property of the config object (either
passed as an argument or loaded from `),$fe=n(H6,"CODE",{});var Hpt=s($fe);C8o=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),w8o=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(H6,"CODE",{});var Upt=s(kfe);A8o=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),L8o=r(H6,":"),H6.forEach(t),y8o=i(la),z=n(la,"UL",{});var Q=s(z);B2=n(Q,"LI",{});var x$e=s(B2);Sfe=n(x$e,"STRONG",{});var Jpt=s(Sfe);x8o=r(Jpt,"bart"),Jpt.forEach(t),$8o=r(x$e," \u2014 "),EG=n(x$e,"A",{href:!0});var Ypt=s(EG);k8o=r(Ypt,"BartForCausalLM"),Ypt.forEach(t),S8o=r(x$e," (BART model)"),x$e.forEach(t),R8o=i(Q),I2=n(Q,"LI",{});var $$e=s(I2);Rfe=n($$e,"STRONG",{});var Kpt=s(Rfe);P8o=r(Kpt,"bert"),Kpt.forEach(t),B8o=r($$e," \u2014 "),CG=n($$e,"A",{href:!0});var Zpt=s(CG);I8o=r(Zpt,"BertLMHeadModel"),Zpt.forEach(t),N8o=r($$e," (BERT model)"),$$e.forEach(t),q8o=i(Q),N2=n(Q,"LI",{});var k$e=s(N2);Pfe=n(k$e,"STRONG",{});var e_t=s(Pfe);j8o=r(e_t,"bert-generation"),e_t.forEach(t),D8o=r(k$e," \u2014 "),wG=n(k$e,"A",{href:!0});var o_t=s(wG);G8o=r(o_t,"BertGenerationDecoder"),o_t.forEach(t),O8o=r(k$e," (Bert Generation model)"),k$e.forEach(t),V8o=i(Q),q2=n(Q,"LI",{});var S$e=s(q2);Bfe=n(S$e,"STRONG",{});var r_t=s(Bfe);X8o=r(r_t,"big_bird"),r_t.forEach(t),z8o=r(S$e," \u2014 "),AG=n(S$e,"A",{href:!0});var t_t=s(AG);Q8o=r(t_t,"BigBirdForCausalLM"),t_t.forEach(t),W8o=r(S$e," (BigBird model)"),S$e.forEach(t),H8o=i(Q),j2=n(Q,"LI",{});var R$e=s(j2);Ife=n(R$e,"STRONG",{});var a_t=s(Ife);U8o=r(a_t,"bigbird_pegasus"),a_t.forEach(t),J8o=r(R$e," \u2014 "),LG=n(R$e,"A",{href:!0});var n_t=s(LG);Y8o=r(n_t,"BigBirdPegasusForCausalLM"),n_t.forEach(t),K8o=r(R$e," (BigBird-Pegasus model)"),R$e.forEach(t),Z8o=i(Q),D2=n(Q,"LI",{});var P$e=s(D2);Nfe=n(P$e,"STRONG",{});var s_t=s(Nfe);e9o=r(s_t,"blenderbot"),s_t.forEach(t),o9o=r(P$e," \u2014 "),yG=n(P$e,"A",{href:!0});var l_t=s(yG);r9o=r(l_t,"BlenderbotForCausalLM"),l_t.forEach(t),t9o=r(P$e," (Blenderbot model)"),P$e.forEach(t),a9o=i(Q),G2=n(Q,"LI",{});var B$e=s(G2);qfe=n(B$e,"STRONG",{});var i_t=s(qfe);n9o=r(i_t,"blenderbot-small"),i_t.forEach(t),s9o=r(B$e," \u2014 "),xG=n(B$e,"A",{href:!0});var d_t=s(xG);l9o=r(d_t,"BlenderbotSmallForCausalLM"),d_t.forEach(t),i9o=r(B$e," (BlenderbotSmall model)"),B$e.forEach(t),d9o=i(Q),O2=n(Q,"LI",{});var I$e=s(O2);jfe=n(I$e,"STRONG",{});var c_t=s(jfe);c9o=r(c_t,"bloom"),c_t.forEach(t),m9o=r(I$e," \u2014 "),$G=n(I$e,"A",{href:!0});var m_t=s($G);f9o=r(m_t,"BloomForCausalLM"),m_t.forEach(t),g9o=r(I$e," (BLOOM model)"),I$e.forEach(t),h9o=i(Q),V2=n(Q,"LI",{});var N$e=s(V2);Dfe=n(N$e,"STRONG",{});var f_t=s(Dfe);u9o=r(f_t,"camembert"),f_t.forEach(t),p9o=r(N$e," \u2014 "),kG=n(N$e,"A",{href:!0});var g_t=s(kG);_9o=r(g_t,"CamembertForCausalLM"),g_t.forEach(t),b9o=r(N$e," (CamemBERT model)"),N$e.forEach(t),v9o=i(Q),X2=n(Q,"LI",{});var q$e=s(X2);Gfe=n(q$e,"STRONG",{});var h_t=s(Gfe);F9o=r(h_t,"codegen"),h_t.forEach(t),T9o=r(q$e," \u2014 "),SG=n(q$e,"A",{href:!0});var u_t=s(SG);M9o=r(u_t,"CodeGenForCausalLM"),u_t.forEach(t),E9o=r(q$e," (CodeGen model)"),q$e.forEach(t),C9o=i(Q),z2=n(Q,"LI",{});var j$e=s(z2);Ofe=n(j$e,"STRONG",{});var p_t=s(Ofe);w9o=r(p_t,"ctrl"),p_t.forEach(t),A9o=r(j$e," \u2014 "),RG=n(j$e,"A",{href:!0});var __t=s(RG);L9o=r(__t,"CTRLLMHeadModel"),__t.forEach(t),y9o=r(j$e," (CTRL model)"),j$e.forEach(t),x9o=i(Q),Q2=n(Q,"LI",{});var D$e=s(Q2);Vfe=n(D$e,"STRONG",{});var b_t=s(Vfe);$9o=r(b_t,"data2vec-text"),b_t.forEach(t),k9o=r(D$e," \u2014 "),PG=n(D$e,"A",{href:!0});var v_t=s(PG);S9o=r(v_t,"Data2VecTextForCausalLM"),v_t.forEach(t),R9o=r(D$e," (Data2VecText model)"),D$e.forEach(t),P9o=i(Q),W2=n(Q,"LI",{});var G$e=s(W2);Xfe=n(G$e,"STRONG",{});var F_t=s(Xfe);B9o=r(F_t,"electra"),F_t.forEach(t),I9o=r(G$e," \u2014 "),BG=n(G$e,"A",{href:!0});var T_t=s(BG);N9o=r(T_t,"ElectraForCausalLM"),T_t.forEach(t),q9o=r(G$e," (ELECTRA model)"),G$e.forEach(t),j9o=i(Q),H2=n(Q,"LI",{});var O$e=s(H2);zfe=n(O$e,"STRONG",{});var M_t=s(zfe);D9o=r(M_t,"gpt2"),M_t.forEach(t),G9o=r(O$e," \u2014 "),IG=n(O$e,"A",{href:!0});var E_t=s(IG);O9o=r(E_t,"GPT2LMHeadModel"),E_t.forEach(t),V9o=r(O$e," (OpenAI GPT-2 model)"),O$e.forEach(t),X9o=i(Q),U2=n(Q,"LI",{});var V$e=s(U2);Qfe=n(V$e,"STRONG",{});var C_t=s(Qfe);z9o=r(C_t,"gpt_neo"),C_t.forEach(t),Q9o=r(V$e," \u2014 "),NG=n(V$e,"A",{href:!0});var w_t=s(NG);W9o=r(w_t,"GPTNeoForCausalLM"),w_t.forEach(t),H9o=r(V$e," (GPT Neo model)"),V$e.forEach(t),U9o=i(Q),J2=n(Q,"LI",{});var X$e=s(J2);Wfe=n(X$e,"STRONG",{});var A_t=s(Wfe);J9o=r(A_t,"gpt_neox"),A_t.forEach(t),Y9o=r(X$e," \u2014 "),qG=n(X$e,"A",{href:!0});var L_t=s(qG);K9o=r(L_t,"GPTNeoXForCausalLM"),L_t.forEach(t),Z9o=r(X$e," (GPT NeoX model)"),X$e.forEach(t),exo=i(Q),Y2=n(Q,"LI",{});var z$e=s(Y2);Hfe=n(z$e,"STRONG",{});var y_t=s(Hfe);oxo=r(y_t,"gptj"),y_t.forEach(t),rxo=r(z$e," \u2014 "),jG=n(z$e,"A",{href:!0});var x_t=s(jG);txo=r(x_t,"GPTJForCausalLM"),x_t.forEach(t),axo=r(z$e," (GPT-J model)"),z$e.forEach(t),nxo=i(Q),K2=n(Q,"LI",{});var Q$e=s(K2);Ufe=n(Q$e,"STRONG",{});var $_t=s(Ufe);sxo=r($_t,"marian"),$_t.forEach(t),lxo=r(Q$e," \u2014 "),DG=n(Q$e,"A",{href:!0});var k_t=s(DG);ixo=r(k_t,"MarianForCausalLM"),k_t.forEach(t),dxo=r(Q$e," (Marian model)"),Q$e.forEach(t),cxo=i(Q),Z2=n(Q,"LI",{});var W$e=s(Z2);Jfe=n(W$e,"STRONG",{});var S_t=s(Jfe);mxo=r(S_t,"mbart"),S_t.forEach(t),fxo=r(W$e," \u2014 "),GG=n(W$e,"A",{href:!0});var R_t=s(GG);gxo=r(R_t,"MBartForCausalLM"),R_t.forEach(t),hxo=r(W$e," (mBART model)"),W$e.forEach(t),uxo=i(Q),eb=n(Q,"LI",{});var H$e=s(eb);Yfe=n(H$e,"STRONG",{});var P_t=s(Yfe);pxo=r(P_t,"megatron-bert"),P_t.forEach(t),_xo=r(H$e," \u2014 "),OG=n(H$e,"A",{href:!0});var B_t=s(OG);bxo=r(B_t,"MegatronBertForCausalLM"),B_t.forEach(t),vxo=r(H$e," (Megatron-BERT model)"),H$e.forEach(t),Fxo=i(Q),ob=n(Q,"LI",{});var U$e=s(ob);Kfe=n(U$e,"STRONG",{});var I_t=s(Kfe);Txo=r(I_t,"openai-gpt"),I_t.forEach(t),Mxo=r(U$e," \u2014 "),VG=n(U$e,"A",{href:!0});var N_t=s(VG);Exo=r(N_t,"OpenAIGPTLMHeadModel"),N_t.forEach(t),Cxo=r(U$e," (OpenAI GPT model)"),U$e.forEach(t),wxo=i(Q),rb=n(Q,"LI",{});var J$e=s(rb);Zfe=n(J$e,"STRONG",{});var q_t=s(Zfe);Axo=r(q_t,"opt"),q_t.forEach(t),Lxo=r(J$e," \u2014 "),XG=n(J$e,"A",{href:!0});var j_t=s(XG);yxo=r(j_t,"OPTForCausalLM"),j_t.forEach(t),xxo=r(J$e," (OPT model)"),J$e.forEach(t),$xo=i(Q),tb=n(Q,"LI",{});var Y$e=s(tb);ege=n(Y$e,"STRONG",{});var D_t=s(ege);kxo=r(D_t,"pegasus"),D_t.forEach(t),Sxo=r(Y$e," \u2014 "),zG=n(Y$e,"A",{href:!0});var G_t=s(zG);Rxo=r(G_t,"PegasusForCausalLM"),G_t.forEach(t),Pxo=r(Y$e," (Pegasus model)"),Y$e.forEach(t),Bxo=i(Q),ab=n(Q,"LI",{});var K$e=s(ab);oge=n(K$e,"STRONG",{});var O_t=s(oge);Ixo=r(O_t,"plbart"),O_t.forEach(t),Nxo=r(K$e," \u2014 "),QG=n(K$e,"A",{href:!0});var V_t=s(QG);qxo=r(V_t,"PLBartForCausalLM"),V_t.forEach(t),jxo=r(K$e," (PLBart model)"),K$e.forEach(t),Dxo=i(Q),nb=n(Q,"LI",{});var Z$e=s(nb);rge=n(Z$e,"STRONG",{});var X_t=s(rge);Gxo=r(X_t,"prophetnet"),X_t.forEach(t),Oxo=r(Z$e," \u2014 "),WG=n(Z$e,"A",{href:!0});var z_t=s(WG);Vxo=r(z_t,"ProphetNetForCausalLM"),z_t.forEach(t),Xxo=r(Z$e," (ProphetNet model)"),Z$e.forEach(t),zxo=i(Q),sb=n(Q,"LI",{});var eke=s(sb);tge=n(eke,"STRONG",{});var Q_t=s(tge);Qxo=r(Q_t,"qdqbert"),Q_t.forEach(t),Wxo=r(eke," \u2014 "),HG=n(eke,"A",{href:!0});var W_t=s(HG);Hxo=r(W_t,"QDQBertLMHeadModel"),W_t.forEach(t),Uxo=r(eke," (QDQBert model)"),eke.forEach(t),Jxo=i(Q),lb=n(Q,"LI",{});var oke=s(lb);age=n(oke,"STRONG",{});var H_t=s(age);Yxo=r(H_t,"reformer"),H_t.forEach(t),Kxo=r(oke," \u2014 "),UG=n(oke,"A",{href:!0});var U_t=s(UG);Zxo=r(U_t,"ReformerModelWithLMHead"),U_t.forEach(t),e$o=r(oke," (Reformer model)"),oke.forEach(t),o$o=i(Q),ib=n(Q,"LI",{});var rke=s(ib);nge=n(rke,"STRONG",{});var J_t=s(nge);r$o=r(J_t,"rembert"),J_t.forEach(t),t$o=r(rke," \u2014 "),JG=n(rke,"A",{href:!0});var Y_t=s(JG);a$o=r(Y_t,"RemBertForCausalLM"),Y_t.forEach(t),n$o=r(rke," (RemBERT model)"),rke.forEach(t),s$o=i(Q),db=n(Q,"LI",{});var tke=s(db);sge=n(tke,"STRONG",{});var K_t=s(sge);l$o=r(K_t,"roberta"),K_t.forEach(t),i$o=r(tke," \u2014 "),YG=n(tke,"A",{href:!0});var Z_t=s(YG);d$o=r(Z_t,"RobertaForCausalLM"),Z_t.forEach(t),c$o=r(tke," (RoBERTa model)"),tke.forEach(t),m$o=i(Q),cb=n(Q,"LI",{});var ake=s(cb);lge=n(ake,"STRONG",{});var e2t=s(lge);f$o=r(e2t,"roformer"),e2t.forEach(t),g$o=r(ake," \u2014 "),KG=n(ake,"A",{href:!0});var o2t=s(KG);h$o=r(o2t,"RoFormerForCausalLM"),o2t.forEach(t),u$o=r(ake," (RoFormer model)"),ake.forEach(t),p$o=i(Q),mb=n(Q,"LI",{});var nke=s(mb);ige=n(nke,"STRONG",{});var r2t=s(ige);_$o=r(r2t,"speech_to_text_2"),r2t.forEach(t),b$o=r(nke," \u2014 "),ZG=n(nke,"A",{href:!0});var t2t=s(ZG);v$o=r(t2t,"Speech2Text2ForCausalLM"),t2t.forEach(t),F$o=r(nke," (Speech2Text2 model)"),nke.forEach(t),T$o=i(Q),fb=n(Q,"LI",{});var ske=s(fb);dge=n(ske,"STRONG",{});var a2t=s(dge);M$o=r(a2t,"transfo-xl"),a2t.forEach(t),E$o=r(ske," \u2014 "),eO=n(ske,"A",{href:!0});var n2t=s(eO);C$o=r(n2t,"TransfoXLLMHeadModel"),n2t.forEach(t),w$o=r(ske," (Transformer-XL model)"),ske.forEach(t),A$o=i(Q),gb=n(Q,"LI",{});var lke=s(gb);cge=n(lke,"STRONG",{});var s2t=s(cge);L$o=r(s2t,"trocr"),s2t.forEach(t),y$o=r(lke," \u2014 "),oO=n(lke,"A",{href:!0});var l2t=s(oO);x$o=r(l2t,"TrOCRForCausalLM"),l2t.forEach(t),$$o=r(lke," (TrOCR model)"),lke.forEach(t),k$o=i(Q),hb=n(Q,"LI",{});var ike=s(hb);mge=n(ike,"STRONG",{});var i2t=s(mge);S$o=r(i2t,"xglm"),i2t.forEach(t),R$o=r(ike," \u2014 "),rO=n(ike,"A",{href:!0});var d2t=s(rO);P$o=r(d2t,"XGLMForCausalLM"),d2t.forEach(t),B$o=r(ike," (XGLM model)"),ike.forEach(t),I$o=i(Q),ub=n(Q,"LI",{});var dke=s(ub);fge=n(dke,"STRONG",{});var c2t=s(fge);N$o=r(c2t,"xlm"),c2t.forEach(t),q$o=r(dke," \u2014 "),tO=n(dke,"A",{href:!0});var m2t=s(tO);j$o=r(m2t,"XLMWithLMHeadModel"),m2t.forEach(t),D$o=r(dke," (XLM model)"),dke.forEach(t),G$o=i(Q),pb=n(Q,"LI",{});var cke=s(pb);gge=n(cke,"STRONG",{});var f2t=s(gge);O$o=r(f2t,"xlm-prophetnet"),f2t.forEach(t),V$o=r(cke," \u2014 "),aO=n(cke,"A",{href:!0});var g2t=s(aO);X$o=r(g2t,"XLMProphetNetForCausalLM"),g2t.forEach(t),z$o=r(cke," (XLM-ProphetNet model)"),cke.forEach(t),Q$o=i(Q),_b=n(Q,"LI",{});var mke=s(_b);hge=n(mke,"STRONG",{});var h2t=s(hge);W$o=r(h2t,"xlm-roberta"),h2t.forEach(t),H$o=r(mke," \u2014 "),nO=n(mke,"A",{href:!0});var u2t=s(nO);U$o=r(u2t,"XLMRobertaForCausalLM"),u2t.forEach(t),J$o=r(mke," (XLM-RoBERTa model)"),mke.forEach(t),Y$o=i(Q),bb=n(Q,"LI",{});var fke=s(bb);uge=n(fke,"STRONG",{});var p2t=s(uge);K$o=r(p2t,"xlm-roberta-xl"),p2t.forEach(t),Z$o=r(fke," \u2014 "),sO=n(fke,"A",{href:!0});var _2t=s(sO);eko=r(_2t,"XLMRobertaXLForCausalLM"),_2t.forEach(t),oko=r(fke," (XLM-RoBERTa-XL model)"),fke.forEach(t),rko=i(Q),vb=n(Q,"LI",{});var gke=s(vb);pge=n(gke,"STRONG",{});var b2t=s(pge);tko=r(b2t,"xlnet"),b2t.forEach(t),ako=r(gke," \u2014 "),lO=n(gke,"A",{href:!0});var v2t=s(lO);nko=r(v2t,"XLNetLMHeadModel"),v2t.forEach(t),sko=r(gke," (XLNet model)"),gke.forEach(t),Q.forEach(t),lko=i(la),Fb=n(la,"P",{});var hke=s(Fb);iko=r(hke,"The model is set in evaluation mode by default using "),_ge=n(hke,"CODE",{});var F2t=s(_ge);dko=r(F2t,"model.eval()"),F2t.forEach(t),cko=r(hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bge=n(hke,"CODE",{});var T2t=s(bge);mko=r(T2t,"model.train()"),T2t.forEach(t),hke.forEach(t),fko=i(la),T(Tb.$$.fragment,la),la.forEach(t),ol.forEach(t),JOe=i(m),Wi=n(m,"H2",{class:!0});var rze=s(Wi);Mb=n(rze,"A",{id:!0,class:!0,href:!0});var M2t=s(Mb);vge=n(M2t,"SPAN",{});var E2t=s(vge);T(Ly.$$.fragment,E2t),E2t.forEach(t),M2t.forEach(t),gko=i(rze),Fge=n(rze,"SPAN",{});var C2t=s(Fge);hko=r(C2t,"AutoModelForMaskedLM"),C2t.forEach(t),rze.forEach(t),YOe=i(m),So=n(m,"DIV",{class:!0});var rl=s(So);T(yy.$$.fragment,rl),uko=i(rl),Hi=n(rl,"P",{});var Yoe=s(Hi);pko=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iO=n(Yoe,"A",{href:!0});var w2t=s(iO);_ko=r(w2t,"from_pretrained()"),w2t.forEach(t),bko=r(Yoe," class method or the "),dO=n(Yoe,"A",{href:!0});var A2t=s(dO);vko=r(A2t,"from_config()"),A2t.forEach(t),Fko=r(Yoe,` class
method.`),Yoe.forEach(t),Tko=i(rl),xy=n(rl,"P",{});var tze=s(xy);Mko=r(tze,"This class cannot be instantiated directly using "),Tge=n(tze,"CODE",{});var L2t=s(Tge);Eko=r(L2t,"__init__()"),L2t.forEach(t),Cko=r(tze," (throws an error)."),tze.forEach(t),wko=i(rl),dt=n(rl,"DIV",{class:!0});var U6=s(dt);T($y.$$.fragment,U6),Ako=i(U6),Mge=n(U6,"P",{});var y2t=s(Mge);Lko=r(y2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y2t.forEach(t),yko=i(U6),Ui=n(U6,"P",{});var Koe=s(Ui);xko=r(Koe,`Note:
Loading a model from its configuration file does `),Ege=n(Koe,"STRONG",{});var x2t=s(Ege);$ko=r(x2t,"not"),x2t.forEach(t),kko=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(Koe,"A",{href:!0});var $2t=s(cO);Sko=r($2t,"from_pretrained()"),$2t.forEach(t),Rko=r(Koe," to load the model weights."),Koe.forEach(t),Pko=i(U6),T(Eb.$$.fragment,U6),U6.forEach(t),Bko=i(rl),Ze=n(rl,"DIV",{class:!0});var ia=s(Ze);T(ky.$$.fragment,ia),Iko=i(ia),Cge=n(ia,"P",{});var k2t=s(Cge);Nko=r(k2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k2t.forEach(t),qko=i(ia),Na=n(ia,"P",{});var J6=s(Na);jko=r(J6,"The model class to instantiate is selected based on the "),wge=n(J6,"CODE",{});var S2t=s(wge);Dko=r(S2t,"model_type"),S2t.forEach(t),Gko=r(J6,` property of the config object (either
passed as an argument or loaded from `),Age=n(J6,"CODE",{});var R2t=s(Age);Oko=r(R2t,"pretrained_model_name_or_path"),R2t.forEach(t),Vko=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=n(J6,"CODE",{});var P2t=s(Lge);Xko=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),zko=r(J6,":"),J6.forEach(t),Qko=i(ia),W=n(ia,"UL",{});var U=s(W);Cb=n(U,"LI",{});var uke=s(Cb);yge=n(uke,"STRONG",{});var B2t=s(yge);Wko=r(B2t,"albert"),B2t.forEach(t),Hko=r(uke," \u2014 "),mO=n(uke,"A",{href:!0});var I2t=s(mO);Uko=r(I2t,"AlbertForMaskedLM"),I2t.forEach(t),Jko=r(uke," (ALBERT model)"),uke.forEach(t),Yko=i(U),wb=n(U,"LI",{});var pke=s(wb);xge=n(pke,"STRONG",{});var N2t=s(xge);Kko=r(N2t,"bart"),N2t.forEach(t),Zko=r(pke," \u2014 "),fO=n(pke,"A",{href:!0});var q2t=s(fO);eSo=r(q2t,"BartForConditionalGeneration"),q2t.forEach(t),oSo=r(pke," (BART model)"),pke.forEach(t),rSo=i(U),Ab=n(U,"LI",{});var _ke=s(Ab);$ge=n(_ke,"STRONG",{});var j2t=s($ge);tSo=r(j2t,"bert"),j2t.forEach(t),aSo=r(_ke," \u2014 "),gO=n(_ke,"A",{href:!0});var D2t=s(gO);nSo=r(D2t,"BertForMaskedLM"),D2t.forEach(t),sSo=r(_ke," (BERT model)"),_ke.forEach(t),lSo=i(U),Lb=n(U,"LI",{});var bke=s(Lb);kge=n(bke,"STRONG",{});var G2t=s(kge);iSo=r(G2t,"big_bird"),G2t.forEach(t),dSo=r(bke," \u2014 "),hO=n(bke,"A",{href:!0});var O2t=s(hO);cSo=r(O2t,"BigBirdForMaskedLM"),O2t.forEach(t),mSo=r(bke," (BigBird model)"),bke.forEach(t),fSo=i(U),yb=n(U,"LI",{});var vke=s(yb);Sge=n(vke,"STRONG",{});var V2t=s(Sge);gSo=r(V2t,"camembert"),V2t.forEach(t),hSo=r(vke," \u2014 "),uO=n(vke,"A",{href:!0});var X2t=s(uO);uSo=r(X2t,"CamembertForMaskedLM"),X2t.forEach(t),pSo=r(vke," (CamemBERT model)"),vke.forEach(t),_So=i(U),xb=n(U,"LI",{});var Fke=s(xb);Rge=n(Fke,"STRONG",{});var z2t=s(Rge);bSo=r(z2t,"convbert"),z2t.forEach(t),vSo=r(Fke," \u2014 "),pO=n(Fke,"A",{href:!0});var Q2t=s(pO);FSo=r(Q2t,"ConvBertForMaskedLM"),Q2t.forEach(t),TSo=r(Fke," (ConvBERT model)"),Fke.forEach(t),MSo=i(U),$b=n(U,"LI",{});var Tke=s($b);Pge=n(Tke,"STRONG",{});var W2t=s(Pge);ESo=r(W2t,"data2vec-text"),W2t.forEach(t),CSo=r(Tke," \u2014 "),_O=n(Tke,"A",{href:!0});var H2t=s(_O);wSo=r(H2t,"Data2VecTextForMaskedLM"),H2t.forEach(t),ASo=r(Tke," (Data2VecText model)"),Tke.forEach(t),LSo=i(U),kb=n(U,"LI",{});var Mke=s(kb);Bge=n(Mke,"STRONG",{});var U2t=s(Bge);ySo=r(U2t,"deberta"),U2t.forEach(t),xSo=r(Mke," \u2014 "),bO=n(Mke,"A",{href:!0});var J2t=s(bO);$So=r(J2t,"DebertaForMaskedLM"),J2t.forEach(t),kSo=r(Mke," (DeBERTa model)"),Mke.forEach(t),SSo=i(U),Sb=n(U,"LI",{});var Eke=s(Sb);Ige=n(Eke,"STRONG",{});var Y2t=s(Ige);RSo=r(Y2t,"deberta-v2"),Y2t.forEach(t),PSo=r(Eke," \u2014 "),vO=n(Eke,"A",{href:!0});var K2t=s(vO);BSo=r(K2t,"DebertaV2ForMaskedLM"),K2t.forEach(t),ISo=r(Eke," (DeBERTa-v2 model)"),Eke.forEach(t),NSo=i(U),Rb=n(U,"LI",{});var Cke=s(Rb);Nge=n(Cke,"STRONG",{});var Z2t=s(Nge);qSo=r(Z2t,"distilbert"),Z2t.forEach(t),jSo=r(Cke," \u2014 "),FO=n(Cke,"A",{href:!0});var ebt=s(FO);DSo=r(ebt,"DistilBertForMaskedLM"),ebt.forEach(t),GSo=r(Cke," (DistilBERT model)"),Cke.forEach(t),OSo=i(U),Pb=n(U,"LI",{});var wke=s(Pb);qge=n(wke,"STRONG",{});var obt=s(qge);VSo=r(obt,"electra"),obt.forEach(t),XSo=r(wke," \u2014 "),TO=n(wke,"A",{href:!0});var rbt=s(TO);zSo=r(rbt,"ElectraForMaskedLM"),rbt.forEach(t),QSo=r(wke," (ELECTRA model)"),wke.forEach(t),WSo=i(U),Bb=n(U,"LI",{});var Ake=s(Bb);jge=n(Ake,"STRONG",{});var tbt=s(jge);HSo=r(tbt,"flaubert"),tbt.forEach(t),USo=r(Ake," \u2014 "),MO=n(Ake,"A",{href:!0});var abt=s(MO);JSo=r(abt,"FlaubertWithLMHeadModel"),abt.forEach(t),YSo=r(Ake," (FlauBERT model)"),Ake.forEach(t),KSo=i(U),Ib=n(U,"LI",{});var Lke=s(Ib);Dge=n(Lke,"STRONG",{});var nbt=s(Dge);ZSo=r(nbt,"fnet"),nbt.forEach(t),eRo=r(Lke," \u2014 "),EO=n(Lke,"A",{href:!0});var sbt=s(EO);oRo=r(sbt,"FNetForMaskedLM"),sbt.forEach(t),rRo=r(Lke," (FNet model)"),Lke.forEach(t),tRo=i(U),Nb=n(U,"LI",{});var yke=s(Nb);Gge=n(yke,"STRONG",{});var lbt=s(Gge);aRo=r(lbt,"funnel"),lbt.forEach(t),nRo=r(yke," \u2014 "),CO=n(yke,"A",{href:!0});var ibt=s(CO);sRo=r(ibt,"FunnelForMaskedLM"),ibt.forEach(t),lRo=r(yke," (Funnel Transformer model)"),yke.forEach(t),iRo=i(U),qb=n(U,"LI",{});var xke=s(qb);Oge=n(xke,"STRONG",{});var dbt=s(Oge);dRo=r(dbt,"ibert"),dbt.forEach(t),cRo=r(xke," \u2014 "),wO=n(xke,"A",{href:!0});var cbt=s(wO);mRo=r(cbt,"IBertForMaskedLM"),cbt.forEach(t),fRo=r(xke," (I-BERT model)"),xke.forEach(t),gRo=i(U),jb=n(U,"LI",{});var $ke=s(jb);Vge=n($ke,"STRONG",{});var mbt=s(Vge);hRo=r(mbt,"layoutlm"),mbt.forEach(t),uRo=r($ke," \u2014 "),AO=n($ke,"A",{href:!0});var fbt=s(AO);pRo=r(fbt,"LayoutLMForMaskedLM"),fbt.forEach(t),_Ro=r($ke," (LayoutLM model)"),$ke.forEach(t),bRo=i(U),Db=n(U,"LI",{});var kke=s(Db);Xge=n(kke,"STRONG",{});var gbt=s(Xge);vRo=r(gbt,"longformer"),gbt.forEach(t),FRo=r(kke," \u2014 "),LO=n(kke,"A",{href:!0});var hbt=s(LO);TRo=r(hbt,"LongformerForMaskedLM"),hbt.forEach(t),MRo=r(kke," (Longformer model)"),kke.forEach(t),ERo=i(U),Gb=n(U,"LI",{});var Ske=s(Gb);zge=n(Ske,"STRONG",{});var ubt=s(zge);CRo=r(ubt,"luke"),ubt.forEach(t),wRo=r(Ske," \u2014 "),yO=n(Ske,"A",{href:!0});var pbt=s(yO);ARo=r(pbt,"LukeForMaskedLM"),pbt.forEach(t),LRo=r(Ske," (LUKE model)"),Ske.forEach(t),yRo=i(U),Ob=n(U,"LI",{});var Rke=s(Ob);Qge=n(Rke,"STRONG",{});var _bt=s(Qge);xRo=r(_bt,"mbart"),_bt.forEach(t),$Ro=r(Rke," \u2014 "),xO=n(Rke,"A",{href:!0});var bbt=s(xO);kRo=r(bbt,"MBartForConditionalGeneration"),bbt.forEach(t),SRo=r(Rke," (mBART model)"),Rke.forEach(t),RRo=i(U),Vb=n(U,"LI",{});var Pke=s(Vb);Wge=n(Pke,"STRONG",{});var vbt=s(Wge);PRo=r(vbt,"megatron-bert"),vbt.forEach(t),BRo=r(Pke," \u2014 "),$O=n(Pke,"A",{href:!0});var Fbt=s($O);IRo=r(Fbt,"MegatronBertForMaskedLM"),Fbt.forEach(t),NRo=r(Pke," (Megatron-BERT model)"),Pke.forEach(t),qRo=i(U),Xb=n(U,"LI",{});var Bke=s(Xb);Hge=n(Bke,"STRONG",{});var Tbt=s(Hge);jRo=r(Tbt,"mobilebert"),Tbt.forEach(t),DRo=r(Bke," \u2014 "),kO=n(Bke,"A",{href:!0});var Mbt=s(kO);GRo=r(Mbt,"MobileBertForMaskedLM"),Mbt.forEach(t),ORo=r(Bke," (MobileBERT model)"),Bke.forEach(t),VRo=i(U),zb=n(U,"LI",{});var Ike=s(zb);Uge=n(Ike,"STRONG",{});var Ebt=s(Uge);XRo=r(Ebt,"mpnet"),Ebt.forEach(t),zRo=r(Ike," \u2014 "),SO=n(Ike,"A",{href:!0});var Cbt=s(SO);QRo=r(Cbt,"MPNetForMaskedLM"),Cbt.forEach(t),WRo=r(Ike," (MPNet model)"),Ike.forEach(t),HRo=i(U),Qb=n(U,"LI",{});var Nke=s(Qb);Jge=n(Nke,"STRONG",{});var wbt=s(Jge);URo=r(wbt,"nezha"),wbt.forEach(t),JRo=r(Nke," \u2014 "),RO=n(Nke,"A",{href:!0});var Abt=s(RO);YRo=r(Abt,"NezhaForMaskedLM"),Abt.forEach(t),KRo=r(Nke," (Nezha model)"),Nke.forEach(t),ZRo=i(U),Wb=n(U,"LI",{});var qke=s(Wb);Yge=n(qke,"STRONG",{});var Lbt=s(Yge);ePo=r(Lbt,"nystromformer"),Lbt.forEach(t),oPo=r(qke," \u2014 "),PO=n(qke,"A",{href:!0});var ybt=s(PO);rPo=r(ybt,"NystromformerForMaskedLM"),ybt.forEach(t),tPo=r(qke," (Nystr\xF6mformer model)"),qke.forEach(t),aPo=i(U),Hb=n(U,"LI",{});var jke=s(Hb);Kge=n(jke,"STRONG",{});var xbt=s(Kge);nPo=r(xbt,"perceiver"),xbt.forEach(t),sPo=r(jke," \u2014 "),BO=n(jke,"A",{href:!0});var $bt=s(BO);lPo=r($bt,"PerceiverForMaskedLM"),$bt.forEach(t),iPo=r(jke," (Perceiver model)"),jke.forEach(t),dPo=i(U),Ub=n(U,"LI",{});var Dke=s(Ub);Zge=n(Dke,"STRONG",{});var kbt=s(Zge);cPo=r(kbt,"qdqbert"),kbt.forEach(t),mPo=r(Dke," \u2014 "),IO=n(Dke,"A",{href:!0});var Sbt=s(IO);fPo=r(Sbt,"QDQBertForMaskedLM"),Sbt.forEach(t),gPo=r(Dke," (QDQBert model)"),Dke.forEach(t),hPo=i(U),Jb=n(U,"LI",{});var Gke=s(Jb);ehe=n(Gke,"STRONG",{});var Rbt=s(ehe);uPo=r(Rbt,"reformer"),Rbt.forEach(t),pPo=r(Gke," \u2014 "),NO=n(Gke,"A",{href:!0});var Pbt=s(NO);_Po=r(Pbt,"ReformerForMaskedLM"),Pbt.forEach(t),bPo=r(Gke," (Reformer model)"),Gke.forEach(t),vPo=i(U),Yb=n(U,"LI",{});var Oke=s(Yb);ohe=n(Oke,"STRONG",{});var Bbt=s(ohe);FPo=r(Bbt,"rembert"),Bbt.forEach(t),TPo=r(Oke," \u2014 "),qO=n(Oke,"A",{href:!0});var Ibt=s(qO);MPo=r(Ibt,"RemBertForMaskedLM"),Ibt.forEach(t),EPo=r(Oke," (RemBERT model)"),Oke.forEach(t),CPo=i(U),Kb=n(U,"LI",{});var Vke=s(Kb);rhe=n(Vke,"STRONG",{});var Nbt=s(rhe);wPo=r(Nbt,"roberta"),Nbt.forEach(t),APo=r(Vke," \u2014 "),jO=n(Vke,"A",{href:!0});var qbt=s(jO);LPo=r(qbt,"RobertaForMaskedLM"),qbt.forEach(t),yPo=r(Vke," (RoBERTa model)"),Vke.forEach(t),xPo=i(U),Zb=n(U,"LI",{});var Xke=s(Zb);the=n(Xke,"STRONG",{});var jbt=s(the);$Po=r(jbt,"roformer"),jbt.forEach(t),kPo=r(Xke," \u2014 "),DO=n(Xke,"A",{href:!0});var Dbt=s(DO);SPo=r(Dbt,"RoFormerForMaskedLM"),Dbt.forEach(t),RPo=r(Xke," (RoFormer model)"),Xke.forEach(t),PPo=i(U),ev=n(U,"LI",{});var zke=s(ev);ahe=n(zke,"STRONG",{});var Gbt=s(ahe);BPo=r(Gbt,"squeezebert"),Gbt.forEach(t),IPo=r(zke," \u2014 "),GO=n(zke,"A",{href:!0});var Obt=s(GO);NPo=r(Obt,"SqueezeBertForMaskedLM"),Obt.forEach(t),qPo=r(zke," (SqueezeBERT model)"),zke.forEach(t),jPo=i(U),ov=n(U,"LI",{});var Qke=s(ov);nhe=n(Qke,"STRONG",{});var Vbt=s(nhe);DPo=r(Vbt,"tapas"),Vbt.forEach(t),GPo=r(Qke," \u2014 "),OO=n(Qke,"A",{href:!0});var Xbt=s(OO);OPo=r(Xbt,"TapasForMaskedLM"),Xbt.forEach(t),VPo=r(Qke," (TAPAS model)"),Qke.forEach(t),XPo=i(U),rv=n(U,"LI",{});var Wke=s(rv);she=n(Wke,"STRONG",{});var zbt=s(she);zPo=r(zbt,"wav2vec2"),zbt.forEach(t),QPo=r(Wke," \u2014 "),lhe=n(Wke,"CODE",{});var Qbt=s(lhe);WPo=r(Qbt,"Wav2Vec2ForMaskedLM"),Qbt.forEach(t),HPo=r(Wke," (Wav2Vec2 model)"),Wke.forEach(t),UPo=i(U),tv=n(U,"LI",{});var Hke=s(tv);ihe=n(Hke,"STRONG",{});var Wbt=s(ihe);JPo=r(Wbt,"xlm"),Wbt.forEach(t),YPo=r(Hke," \u2014 "),VO=n(Hke,"A",{href:!0});var Hbt=s(VO);KPo=r(Hbt,"XLMWithLMHeadModel"),Hbt.forEach(t),ZPo=r(Hke," (XLM model)"),Hke.forEach(t),eBo=i(U),av=n(U,"LI",{});var Uke=s(av);dhe=n(Uke,"STRONG",{});var Ubt=s(dhe);oBo=r(Ubt,"xlm-roberta"),Ubt.forEach(t),rBo=r(Uke," \u2014 "),XO=n(Uke,"A",{href:!0});var Jbt=s(XO);tBo=r(Jbt,"XLMRobertaForMaskedLM"),Jbt.forEach(t),aBo=r(Uke," (XLM-RoBERTa model)"),Uke.forEach(t),nBo=i(U),nv=n(U,"LI",{});var Jke=s(nv);che=n(Jke,"STRONG",{});var Ybt=s(che);sBo=r(Ybt,"xlm-roberta-xl"),Ybt.forEach(t),lBo=r(Jke," \u2014 "),zO=n(Jke,"A",{href:!0});var Kbt=s(zO);iBo=r(Kbt,"XLMRobertaXLForMaskedLM"),Kbt.forEach(t),dBo=r(Jke," (XLM-RoBERTa-XL model)"),Jke.forEach(t),cBo=i(U),sv=n(U,"LI",{});var Yke=s(sv);mhe=n(Yke,"STRONG",{});var Zbt=s(mhe);mBo=r(Zbt,"yoso"),Zbt.forEach(t),fBo=r(Yke," \u2014 "),QO=n(Yke,"A",{href:!0});var evt=s(QO);gBo=r(evt,"YosoForMaskedLM"),evt.forEach(t),hBo=r(Yke," (YOSO model)"),Yke.forEach(t),U.forEach(t),uBo=i(ia),lv=n(ia,"P",{});var Kke=s(lv);pBo=r(Kke,"The model is set in evaluation mode by default using "),fhe=n(Kke,"CODE",{});var ovt=s(fhe);_Bo=r(ovt,"model.eval()"),ovt.forEach(t),bBo=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=n(Kke,"CODE",{});var rvt=s(ghe);vBo=r(rvt,"model.train()"),rvt.forEach(t),Kke.forEach(t),FBo=i(ia),T(iv.$$.fragment,ia),ia.forEach(t),rl.forEach(t),KOe=i(m),Ji=n(m,"H2",{class:!0});var aze=s(Ji);dv=n(aze,"A",{id:!0,class:!0,href:!0});var tvt=s(dv);hhe=n(tvt,"SPAN",{});var avt=s(hhe);T(Sy.$$.fragment,avt),avt.forEach(t),tvt.forEach(t),TBo=i(aze),uhe=n(aze,"SPAN",{});var nvt=s(uhe);MBo=r(nvt,"AutoModelForSeq2SeqLM"),nvt.forEach(t),aze.forEach(t),ZOe=i(m),Ro=n(m,"DIV",{class:!0});var tl=s(Ro);T(Ry.$$.fragment,tl),EBo=i(tl),Yi=n(tl,"P",{});var Zoe=s(Yi);CBo=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WO=n(Zoe,"A",{href:!0});var svt=s(WO);wBo=r(svt,"from_pretrained()"),svt.forEach(t),ABo=r(Zoe," class method or the "),HO=n(Zoe,"A",{href:!0});var lvt=s(HO);LBo=r(lvt,"from_config()"),lvt.forEach(t),yBo=r(Zoe,` class
method.`),Zoe.forEach(t),xBo=i(tl),Py=n(tl,"P",{});var nze=s(Py);$Bo=r(nze,"This class cannot be instantiated directly using "),phe=n(nze,"CODE",{});var ivt=s(phe);kBo=r(ivt,"__init__()"),ivt.forEach(t),SBo=r(nze," (throws an error)."),nze.forEach(t),RBo=i(tl),ct=n(tl,"DIV",{class:!0});var Y6=s(ct);T(By.$$.fragment,Y6),PBo=i(Y6),_he=n(Y6,"P",{});var dvt=s(_he);BBo=r(dvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dvt.forEach(t),IBo=i(Y6),Ki=n(Y6,"P",{});var ere=s(Ki);NBo=r(ere,`Note:
Loading a model from its configuration file does `),bhe=n(ere,"STRONG",{});var cvt=s(bhe);qBo=r(cvt,"not"),cvt.forEach(t),jBo=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=n(ere,"A",{href:!0});var mvt=s(UO);DBo=r(mvt,"from_pretrained()"),mvt.forEach(t),GBo=r(ere," to load the model weights."),ere.forEach(t),OBo=i(Y6),T(cv.$$.fragment,Y6),Y6.forEach(t),VBo=i(tl),eo=n(tl,"DIV",{class:!0});var da=s(eo);T(Iy.$$.fragment,da),XBo=i(da),vhe=n(da,"P",{});var fvt=s(vhe);zBo=r(fvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fvt.forEach(t),QBo=i(da),qa=n(da,"P",{});var K6=s(qa);WBo=r(K6,"The model class to instantiate is selected based on the "),Fhe=n(K6,"CODE",{});var gvt=s(Fhe);HBo=r(gvt,"model_type"),gvt.forEach(t),UBo=r(K6,` property of the config object (either
passed as an argument or loaded from `),The=n(K6,"CODE",{});var hvt=s(The);JBo=r(hvt,"pretrained_model_name_or_path"),hvt.forEach(t),YBo=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=n(K6,"CODE",{});var uvt=s(Mhe);KBo=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),ZBo=r(K6,":"),K6.forEach(t),eIo=i(da),ue=n(da,"UL",{});var be=s(ue);mv=n(be,"LI",{});var Zke=s(mv);Ehe=n(Zke,"STRONG",{});var pvt=s(Ehe);oIo=r(pvt,"bart"),pvt.forEach(t),rIo=r(Zke," \u2014 "),JO=n(Zke,"A",{href:!0});var _vt=s(JO);tIo=r(_vt,"BartForConditionalGeneration"),_vt.forEach(t),aIo=r(Zke," (BART model)"),Zke.forEach(t),nIo=i(be),fv=n(be,"LI",{});var eSe=s(fv);Che=n(eSe,"STRONG",{});var bvt=s(Che);sIo=r(bvt,"bigbird_pegasus"),bvt.forEach(t),lIo=r(eSe," \u2014 "),YO=n(eSe,"A",{href:!0});var vvt=s(YO);iIo=r(vvt,"BigBirdPegasusForConditionalGeneration"),vvt.forEach(t),dIo=r(eSe," (BigBird-Pegasus model)"),eSe.forEach(t),cIo=i(be),gv=n(be,"LI",{});var oSe=s(gv);whe=n(oSe,"STRONG",{});var Fvt=s(whe);mIo=r(Fvt,"blenderbot"),Fvt.forEach(t),fIo=r(oSe," \u2014 "),KO=n(oSe,"A",{href:!0});var Tvt=s(KO);gIo=r(Tvt,"BlenderbotForConditionalGeneration"),Tvt.forEach(t),hIo=r(oSe," (Blenderbot model)"),oSe.forEach(t),uIo=i(be),hv=n(be,"LI",{});var rSe=s(hv);Ahe=n(rSe,"STRONG",{});var Mvt=s(Ahe);pIo=r(Mvt,"blenderbot-small"),Mvt.forEach(t),_Io=r(rSe," \u2014 "),ZO=n(rSe,"A",{href:!0});var Evt=s(ZO);bIo=r(Evt,"BlenderbotSmallForConditionalGeneration"),Evt.forEach(t),vIo=r(rSe," (BlenderbotSmall model)"),rSe.forEach(t),FIo=i(be),uv=n(be,"LI",{});var tSe=s(uv);Lhe=n(tSe,"STRONG",{});var Cvt=s(Lhe);TIo=r(Cvt,"encoder-decoder"),Cvt.forEach(t),MIo=r(tSe," \u2014 "),eV=n(tSe,"A",{href:!0});var wvt=s(eV);EIo=r(wvt,"EncoderDecoderModel"),wvt.forEach(t),CIo=r(tSe," (Encoder decoder model)"),tSe.forEach(t),wIo=i(be),pv=n(be,"LI",{});var aSe=s(pv);yhe=n(aSe,"STRONG",{});var Avt=s(yhe);AIo=r(Avt,"fsmt"),Avt.forEach(t),LIo=r(aSe," \u2014 "),oV=n(aSe,"A",{href:!0});var Lvt=s(oV);yIo=r(Lvt,"FSMTForConditionalGeneration"),Lvt.forEach(t),xIo=r(aSe," (FairSeq Machine-Translation model)"),aSe.forEach(t),$Io=i(be),_v=n(be,"LI",{});var nSe=s(_v);xhe=n(nSe,"STRONG",{});var yvt=s(xhe);kIo=r(yvt,"led"),yvt.forEach(t),SIo=r(nSe," \u2014 "),rV=n(nSe,"A",{href:!0});var xvt=s(rV);RIo=r(xvt,"LEDForConditionalGeneration"),xvt.forEach(t),PIo=r(nSe," (LED model)"),nSe.forEach(t),BIo=i(be),bv=n(be,"LI",{});var sSe=s(bv);$he=n(sSe,"STRONG",{});var $vt=s($he);IIo=r($vt,"longt5"),$vt.forEach(t),NIo=r(sSe," \u2014 "),tV=n(sSe,"A",{href:!0});var kvt=s(tV);qIo=r(kvt,"LongT5ForConditionalGeneration"),kvt.forEach(t),jIo=r(sSe," (LongT5 model)"),sSe.forEach(t),DIo=i(be),vv=n(be,"LI",{});var lSe=s(vv);khe=n(lSe,"STRONG",{});var Svt=s(khe);GIo=r(Svt,"m2m_100"),Svt.forEach(t),OIo=r(lSe," \u2014 "),aV=n(lSe,"A",{href:!0});var Rvt=s(aV);VIo=r(Rvt,"M2M100ForConditionalGeneration"),Rvt.forEach(t),XIo=r(lSe," (M2M100 model)"),lSe.forEach(t),zIo=i(be),Fv=n(be,"LI",{});var iSe=s(Fv);She=n(iSe,"STRONG",{});var Pvt=s(She);QIo=r(Pvt,"marian"),Pvt.forEach(t),WIo=r(iSe," \u2014 "),nV=n(iSe,"A",{href:!0});var Bvt=s(nV);HIo=r(Bvt,"MarianMTModel"),Bvt.forEach(t),UIo=r(iSe," (Marian model)"),iSe.forEach(t),JIo=i(be),Tv=n(be,"LI",{});var dSe=s(Tv);Rhe=n(dSe,"STRONG",{});var Ivt=s(Rhe);YIo=r(Ivt,"mbart"),Ivt.forEach(t),KIo=r(dSe," \u2014 "),sV=n(dSe,"A",{href:!0});var Nvt=s(sV);ZIo=r(Nvt,"MBartForConditionalGeneration"),Nvt.forEach(t),eNo=r(dSe," (mBART model)"),dSe.forEach(t),oNo=i(be),Mv=n(be,"LI",{});var cSe=s(Mv);Phe=n(cSe,"STRONG",{});var qvt=s(Phe);rNo=r(qvt,"mt5"),qvt.forEach(t),tNo=r(cSe," \u2014 "),lV=n(cSe,"A",{href:!0});var jvt=s(lV);aNo=r(jvt,"MT5ForConditionalGeneration"),jvt.forEach(t),nNo=r(cSe," (MT5 model)"),cSe.forEach(t),sNo=i(be),Ev=n(be,"LI",{});var mSe=s(Ev);Bhe=n(mSe,"STRONG",{});var Dvt=s(Bhe);lNo=r(Dvt,"pegasus"),Dvt.forEach(t),iNo=r(mSe," \u2014 "),iV=n(mSe,"A",{href:!0});var Gvt=s(iV);dNo=r(Gvt,"PegasusForConditionalGeneration"),Gvt.forEach(t),cNo=r(mSe," (Pegasus model)"),mSe.forEach(t),mNo=i(be),Cv=n(be,"LI",{});var fSe=s(Cv);Ihe=n(fSe,"STRONG",{});var Ovt=s(Ihe);fNo=r(Ovt,"plbart"),Ovt.forEach(t),gNo=r(fSe," \u2014 "),dV=n(fSe,"A",{href:!0});var Vvt=s(dV);hNo=r(Vvt,"PLBartForConditionalGeneration"),Vvt.forEach(t),uNo=r(fSe," (PLBart model)"),fSe.forEach(t),pNo=i(be),wv=n(be,"LI",{});var gSe=s(wv);Nhe=n(gSe,"STRONG",{});var Xvt=s(Nhe);_No=r(Xvt,"prophetnet"),Xvt.forEach(t),bNo=r(gSe," \u2014 "),cV=n(gSe,"A",{href:!0});var zvt=s(cV);vNo=r(zvt,"ProphetNetForConditionalGeneration"),zvt.forEach(t),FNo=r(gSe," (ProphetNet model)"),gSe.forEach(t),TNo=i(be),Av=n(be,"LI",{});var hSe=s(Av);qhe=n(hSe,"STRONG",{});var Qvt=s(qhe);MNo=r(Qvt,"t5"),Qvt.forEach(t),ENo=r(hSe," \u2014 "),mV=n(hSe,"A",{href:!0});var Wvt=s(mV);CNo=r(Wvt,"T5ForConditionalGeneration"),Wvt.forEach(t),wNo=r(hSe," (T5 model)"),hSe.forEach(t),ANo=i(be),Lv=n(be,"LI",{});var uSe=s(Lv);jhe=n(uSe,"STRONG",{});var Hvt=s(jhe);LNo=r(Hvt,"xlm-prophetnet"),Hvt.forEach(t),yNo=r(uSe," \u2014 "),fV=n(uSe,"A",{href:!0});var Uvt=s(fV);xNo=r(Uvt,"XLMProphetNetForConditionalGeneration"),Uvt.forEach(t),$No=r(uSe," (XLM-ProphetNet model)"),uSe.forEach(t),be.forEach(t),kNo=i(da),yv=n(da,"P",{});var pSe=s(yv);SNo=r(pSe,"The model is set in evaluation mode by default using "),Dhe=n(pSe,"CODE",{});var Jvt=s(Dhe);RNo=r(Jvt,"model.eval()"),Jvt.forEach(t),PNo=r(pSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=n(pSe,"CODE",{});var Yvt=s(Ghe);BNo=r(Yvt,"model.train()"),Yvt.forEach(t),pSe.forEach(t),INo=i(da),T(xv.$$.fragment,da),da.forEach(t),tl.forEach(t),eVe=i(m),Zi=n(m,"H2",{class:!0});var sze=s(Zi);$v=n(sze,"A",{id:!0,class:!0,href:!0});var Kvt=s($v);Ohe=n(Kvt,"SPAN",{});var Zvt=s(Ohe);T(Ny.$$.fragment,Zvt),Zvt.forEach(t),Kvt.forEach(t),NNo=i(sze),Vhe=n(sze,"SPAN",{});var e1t=s(Vhe);qNo=r(e1t,"AutoModelForSequenceClassification"),e1t.forEach(t),sze.forEach(t),oVe=i(m),Po=n(m,"DIV",{class:!0});var al=s(Po);T(qy.$$.fragment,al),jNo=i(al),ed=n(al,"P",{});var ore=s(ed);DNo=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gV=n(ore,"A",{href:!0});var o1t=s(gV);GNo=r(o1t,"from_pretrained()"),o1t.forEach(t),ONo=r(ore," class method or the "),hV=n(ore,"A",{href:!0});var r1t=s(hV);VNo=r(r1t,"from_config()"),r1t.forEach(t),XNo=r(ore,` class
method.`),ore.forEach(t),zNo=i(al),jy=n(al,"P",{});var lze=s(jy);QNo=r(lze,"This class cannot be instantiated directly using "),Xhe=n(lze,"CODE",{});var t1t=s(Xhe);WNo=r(t1t,"__init__()"),t1t.forEach(t),HNo=r(lze," (throws an error)."),lze.forEach(t),UNo=i(al),mt=n(al,"DIV",{class:!0});var Z6=s(mt);T(Dy.$$.fragment,Z6),JNo=i(Z6),zhe=n(Z6,"P",{});var a1t=s(zhe);YNo=r(a1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),a1t.forEach(t),KNo=i(Z6),od=n(Z6,"P",{});var rre=s(od);ZNo=r(rre,`Note:
Loading a model from its configuration file does `),Qhe=n(rre,"STRONG",{});var n1t=s(Qhe);eqo=r(n1t,"not"),n1t.forEach(t),oqo=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=n(rre,"A",{href:!0});var s1t=s(uV);rqo=r(s1t,"from_pretrained()"),s1t.forEach(t),tqo=r(rre," to load the model weights."),rre.forEach(t),aqo=i(Z6),T(kv.$$.fragment,Z6),Z6.forEach(t),nqo=i(al),oo=n(al,"DIV",{class:!0});var ca=s(oo);T(Gy.$$.fragment,ca),sqo=i(ca),Whe=n(ca,"P",{});var l1t=s(Whe);lqo=r(l1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),l1t.forEach(t),iqo=i(ca),ja=n(ca,"P",{});var eL=s(ja);dqo=r(eL,"The model class to instantiate is selected based on the "),Hhe=n(eL,"CODE",{});var i1t=s(Hhe);cqo=r(i1t,"model_type"),i1t.forEach(t),mqo=r(eL,` property of the config object (either
passed as an argument or loaded from `),Uhe=n(eL,"CODE",{});var d1t=s(Uhe);fqo=r(d1t,"pretrained_model_name_or_path"),d1t.forEach(t),gqo=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(eL,"CODE",{});var c1t=s(Jhe);hqo=r(c1t,"pretrained_model_name_or_path"),c1t.forEach(t),uqo=r(eL,":"),eL.forEach(t),pqo=i(ca),N=n(ca,"UL",{});var j=s(N);Sv=n(j,"LI",{});var _Se=s(Sv);Yhe=n(_Se,"STRONG",{});var m1t=s(Yhe);_qo=r(m1t,"albert"),m1t.forEach(t),bqo=r(_Se," \u2014 "),pV=n(_Se,"A",{href:!0});var f1t=s(pV);vqo=r(f1t,"AlbertForSequenceClassification"),f1t.forEach(t),Fqo=r(_Se," (ALBERT model)"),_Se.forEach(t),Tqo=i(j),Rv=n(j,"LI",{});var bSe=s(Rv);Khe=n(bSe,"STRONG",{});var g1t=s(Khe);Mqo=r(g1t,"bart"),g1t.forEach(t),Eqo=r(bSe," \u2014 "),_V=n(bSe,"A",{href:!0});var h1t=s(_V);Cqo=r(h1t,"BartForSequenceClassification"),h1t.forEach(t),wqo=r(bSe," (BART model)"),bSe.forEach(t),Aqo=i(j),Pv=n(j,"LI",{});var vSe=s(Pv);Zhe=n(vSe,"STRONG",{});var u1t=s(Zhe);Lqo=r(u1t,"bert"),u1t.forEach(t),yqo=r(vSe," \u2014 "),bV=n(vSe,"A",{href:!0});var p1t=s(bV);xqo=r(p1t,"BertForSequenceClassification"),p1t.forEach(t),$qo=r(vSe," (BERT model)"),vSe.forEach(t),kqo=i(j),Bv=n(j,"LI",{});var FSe=s(Bv);eue=n(FSe,"STRONG",{});var _1t=s(eue);Sqo=r(_1t,"big_bird"),_1t.forEach(t),Rqo=r(FSe," \u2014 "),vV=n(FSe,"A",{href:!0});var b1t=s(vV);Pqo=r(b1t,"BigBirdForSequenceClassification"),b1t.forEach(t),Bqo=r(FSe," (BigBird model)"),FSe.forEach(t),Iqo=i(j),Iv=n(j,"LI",{});var TSe=s(Iv);oue=n(TSe,"STRONG",{});var v1t=s(oue);Nqo=r(v1t,"bigbird_pegasus"),v1t.forEach(t),qqo=r(TSe," \u2014 "),FV=n(TSe,"A",{href:!0});var F1t=s(FV);jqo=r(F1t,"BigBirdPegasusForSequenceClassification"),F1t.forEach(t),Dqo=r(TSe," (BigBird-Pegasus model)"),TSe.forEach(t),Gqo=i(j),Nv=n(j,"LI",{});var MSe=s(Nv);rue=n(MSe,"STRONG",{});var T1t=s(rue);Oqo=r(T1t,"bloom"),T1t.forEach(t),Vqo=r(MSe," \u2014 "),TV=n(MSe,"A",{href:!0});var M1t=s(TV);Xqo=r(M1t,"BloomForSequenceClassification"),M1t.forEach(t),zqo=r(MSe," (BLOOM model)"),MSe.forEach(t),Qqo=i(j),qv=n(j,"LI",{});var ESe=s(qv);tue=n(ESe,"STRONG",{});var E1t=s(tue);Wqo=r(E1t,"camembert"),E1t.forEach(t),Hqo=r(ESe," \u2014 "),MV=n(ESe,"A",{href:!0});var C1t=s(MV);Uqo=r(C1t,"CamembertForSequenceClassification"),C1t.forEach(t),Jqo=r(ESe," (CamemBERT model)"),ESe.forEach(t),Yqo=i(j),jv=n(j,"LI",{});var CSe=s(jv);aue=n(CSe,"STRONG",{});var w1t=s(aue);Kqo=r(w1t,"canine"),w1t.forEach(t),Zqo=r(CSe," \u2014 "),EV=n(CSe,"A",{href:!0});var A1t=s(EV);ejo=r(A1t,"CanineForSequenceClassification"),A1t.forEach(t),ojo=r(CSe," (CANINE model)"),CSe.forEach(t),rjo=i(j),Dv=n(j,"LI",{});var wSe=s(Dv);nue=n(wSe,"STRONG",{});var L1t=s(nue);tjo=r(L1t,"convbert"),L1t.forEach(t),ajo=r(wSe," \u2014 "),CV=n(wSe,"A",{href:!0});var y1t=s(CV);njo=r(y1t,"ConvBertForSequenceClassification"),y1t.forEach(t),sjo=r(wSe," (ConvBERT model)"),wSe.forEach(t),ljo=i(j),Gv=n(j,"LI",{});var ASe=s(Gv);sue=n(ASe,"STRONG",{});var x1t=s(sue);ijo=r(x1t,"ctrl"),x1t.forEach(t),djo=r(ASe," \u2014 "),wV=n(ASe,"A",{href:!0});var $1t=s(wV);cjo=r($1t,"CTRLForSequenceClassification"),$1t.forEach(t),mjo=r(ASe," (CTRL model)"),ASe.forEach(t),fjo=i(j),Ov=n(j,"LI",{});var LSe=s(Ov);lue=n(LSe,"STRONG",{});var k1t=s(lue);gjo=r(k1t,"data2vec-text"),k1t.forEach(t),hjo=r(LSe," \u2014 "),AV=n(LSe,"A",{href:!0});var S1t=s(AV);ujo=r(S1t,"Data2VecTextForSequenceClassification"),S1t.forEach(t),pjo=r(LSe," (Data2VecText model)"),LSe.forEach(t),_jo=i(j),Vv=n(j,"LI",{});var ySe=s(Vv);iue=n(ySe,"STRONG",{});var R1t=s(iue);bjo=r(R1t,"deberta"),R1t.forEach(t),vjo=r(ySe," \u2014 "),LV=n(ySe,"A",{href:!0});var P1t=s(LV);Fjo=r(P1t,"DebertaForSequenceClassification"),P1t.forEach(t),Tjo=r(ySe," (DeBERTa model)"),ySe.forEach(t),Mjo=i(j),Xv=n(j,"LI",{});var xSe=s(Xv);due=n(xSe,"STRONG",{});var B1t=s(due);Ejo=r(B1t,"deberta-v2"),B1t.forEach(t),Cjo=r(xSe," \u2014 "),yV=n(xSe,"A",{href:!0});var I1t=s(yV);wjo=r(I1t,"DebertaV2ForSequenceClassification"),I1t.forEach(t),Ajo=r(xSe," (DeBERTa-v2 model)"),xSe.forEach(t),Ljo=i(j),zv=n(j,"LI",{});var $Se=s(zv);cue=n($Se,"STRONG",{});var N1t=s(cue);yjo=r(N1t,"distilbert"),N1t.forEach(t),xjo=r($Se," \u2014 "),xV=n($Se,"A",{href:!0});var q1t=s(xV);$jo=r(q1t,"DistilBertForSequenceClassification"),q1t.forEach(t),kjo=r($Se," (DistilBERT model)"),$Se.forEach(t),Sjo=i(j),Qv=n(j,"LI",{});var kSe=s(Qv);mue=n(kSe,"STRONG",{});var j1t=s(mue);Rjo=r(j1t,"electra"),j1t.forEach(t),Pjo=r(kSe," \u2014 "),$V=n(kSe,"A",{href:!0});var D1t=s($V);Bjo=r(D1t,"ElectraForSequenceClassification"),D1t.forEach(t),Ijo=r(kSe," (ELECTRA model)"),kSe.forEach(t),Njo=i(j),Wv=n(j,"LI",{});var SSe=s(Wv);fue=n(SSe,"STRONG",{});var G1t=s(fue);qjo=r(G1t,"flaubert"),G1t.forEach(t),jjo=r(SSe," \u2014 "),kV=n(SSe,"A",{href:!0});var O1t=s(kV);Djo=r(O1t,"FlaubertForSequenceClassification"),O1t.forEach(t),Gjo=r(SSe," (FlauBERT model)"),SSe.forEach(t),Ojo=i(j),Hv=n(j,"LI",{});var RSe=s(Hv);gue=n(RSe,"STRONG",{});var V1t=s(gue);Vjo=r(V1t,"fnet"),V1t.forEach(t),Xjo=r(RSe," \u2014 "),SV=n(RSe,"A",{href:!0});var X1t=s(SV);zjo=r(X1t,"FNetForSequenceClassification"),X1t.forEach(t),Qjo=r(RSe," (FNet model)"),RSe.forEach(t),Wjo=i(j),Uv=n(j,"LI",{});var PSe=s(Uv);hue=n(PSe,"STRONG",{});var z1t=s(hue);Hjo=r(z1t,"funnel"),z1t.forEach(t),Ujo=r(PSe," \u2014 "),RV=n(PSe,"A",{href:!0});var Q1t=s(RV);Jjo=r(Q1t,"FunnelForSequenceClassification"),Q1t.forEach(t),Yjo=r(PSe," (Funnel Transformer model)"),PSe.forEach(t),Kjo=i(j),Jv=n(j,"LI",{});var BSe=s(Jv);uue=n(BSe,"STRONG",{});var W1t=s(uue);Zjo=r(W1t,"gpt2"),W1t.forEach(t),eDo=r(BSe," \u2014 "),PV=n(BSe,"A",{href:!0});var H1t=s(PV);oDo=r(H1t,"GPT2ForSequenceClassification"),H1t.forEach(t),rDo=r(BSe," (OpenAI GPT-2 model)"),BSe.forEach(t),tDo=i(j),Yv=n(j,"LI",{});var ISe=s(Yv);pue=n(ISe,"STRONG",{});var U1t=s(pue);aDo=r(U1t,"gpt_neo"),U1t.forEach(t),nDo=r(ISe," \u2014 "),BV=n(ISe,"A",{href:!0});var J1t=s(BV);sDo=r(J1t,"GPTNeoForSequenceClassification"),J1t.forEach(t),lDo=r(ISe," (GPT Neo model)"),ISe.forEach(t),iDo=i(j),Kv=n(j,"LI",{});var NSe=s(Kv);_ue=n(NSe,"STRONG",{});var Y1t=s(_ue);dDo=r(Y1t,"gptj"),Y1t.forEach(t),cDo=r(NSe," \u2014 "),IV=n(NSe,"A",{href:!0});var K1t=s(IV);mDo=r(K1t,"GPTJForSequenceClassification"),K1t.forEach(t),fDo=r(NSe," (GPT-J model)"),NSe.forEach(t),gDo=i(j),Zv=n(j,"LI",{});var qSe=s(Zv);bue=n(qSe,"STRONG",{});var Z1t=s(bue);hDo=r(Z1t,"ibert"),Z1t.forEach(t),uDo=r(qSe," \u2014 "),NV=n(qSe,"A",{href:!0});var eFt=s(NV);pDo=r(eFt,"IBertForSequenceClassification"),eFt.forEach(t),_Do=r(qSe," (I-BERT model)"),qSe.forEach(t),bDo=i(j),e1=n(j,"LI",{});var jSe=s(e1);vue=n(jSe,"STRONG",{});var oFt=s(vue);vDo=r(oFt,"layoutlm"),oFt.forEach(t),FDo=r(jSe," \u2014 "),qV=n(jSe,"A",{href:!0});var rFt=s(qV);TDo=r(rFt,"LayoutLMForSequenceClassification"),rFt.forEach(t),MDo=r(jSe," (LayoutLM model)"),jSe.forEach(t),EDo=i(j),o1=n(j,"LI",{});var DSe=s(o1);Fue=n(DSe,"STRONG",{});var tFt=s(Fue);CDo=r(tFt,"layoutlmv2"),tFt.forEach(t),wDo=r(DSe," \u2014 "),jV=n(DSe,"A",{href:!0});var aFt=s(jV);ADo=r(aFt,"LayoutLMv2ForSequenceClassification"),aFt.forEach(t),LDo=r(DSe," (LayoutLMv2 model)"),DSe.forEach(t),yDo=i(j),r1=n(j,"LI",{});var GSe=s(r1);Tue=n(GSe,"STRONG",{});var nFt=s(Tue);xDo=r(nFt,"layoutlmv3"),nFt.forEach(t),$Do=r(GSe," \u2014 "),DV=n(GSe,"A",{href:!0});var sFt=s(DV);kDo=r(sFt,"LayoutLMv3ForSequenceClassification"),sFt.forEach(t),SDo=r(GSe," (LayoutLMv3 model)"),GSe.forEach(t),RDo=i(j),t1=n(j,"LI",{});var OSe=s(t1);Mue=n(OSe,"STRONG",{});var lFt=s(Mue);PDo=r(lFt,"led"),lFt.forEach(t),BDo=r(OSe," \u2014 "),GV=n(OSe,"A",{href:!0});var iFt=s(GV);IDo=r(iFt,"LEDForSequenceClassification"),iFt.forEach(t),NDo=r(OSe," (LED model)"),OSe.forEach(t),qDo=i(j),a1=n(j,"LI",{});var VSe=s(a1);Eue=n(VSe,"STRONG",{});var dFt=s(Eue);jDo=r(dFt,"longformer"),dFt.forEach(t),DDo=r(VSe," \u2014 "),OV=n(VSe,"A",{href:!0});var cFt=s(OV);GDo=r(cFt,"LongformerForSequenceClassification"),cFt.forEach(t),ODo=r(VSe," (Longformer model)"),VSe.forEach(t),VDo=i(j),n1=n(j,"LI",{});var XSe=s(n1);Cue=n(XSe,"STRONG",{});var mFt=s(Cue);XDo=r(mFt,"mbart"),mFt.forEach(t),zDo=r(XSe," \u2014 "),VV=n(XSe,"A",{href:!0});var fFt=s(VV);QDo=r(fFt,"MBartForSequenceClassification"),fFt.forEach(t),WDo=r(XSe," (mBART model)"),XSe.forEach(t),HDo=i(j),s1=n(j,"LI",{});var zSe=s(s1);wue=n(zSe,"STRONG",{});var gFt=s(wue);UDo=r(gFt,"megatron-bert"),gFt.forEach(t),JDo=r(zSe," \u2014 "),XV=n(zSe,"A",{href:!0});var hFt=s(XV);YDo=r(hFt,"MegatronBertForSequenceClassification"),hFt.forEach(t),KDo=r(zSe," (Megatron-BERT model)"),zSe.forEach(t),ZDo=i(j),l1=n(j,"LI",{});var QSe=s(l1);Aue=n(QSe,"STRONG",{});var uFt=s(Aue);eGo=r(uFt,"mobilebert"),uFt.forEach(t),oGo=r(QSe," \u2014 "),zV=n(QSe,"A",{href:!0});var pFt=s(zV);rGo=r(pFt,"MobileBertForSequenceClassification"),pFt.forEach(t),tGo=r(QSe," (MobileBERT model)"),QSe.forEach(t),aGo=i(j),i1=n(j,"LI",{});var WSe=s(i1);Lue=n(WSe,"STRONG",{});var _Ft=s(Lue);nGo=r(_Ft,"mpnet"),_Ft.forEach(t),sGo=r(WSe," \u2014 "),QV=n(WSe,"A",{href:!0});var bFt=s(QV);lGo=r(bFt,"MPNetForSequenceClassification"),bFt.forEach(t),iGo=r(WSe," (MPNet model)"),WSe.forEach(t),dGo=i(j),d1=n(j,"LI",{});var HSe=s(d1);yue=n(HSe,"STRONG",{});var vFt=s(yue);cGo=r(vFt,"nezha"),vFt.forEach(t),mGo=r(HSe," \u2014 "),WV=n(HSe,"A",{href:!0});var FFt=s(WV);fGo=r(FFt,"NezhaForSequenceClassification"),FFt.forEach(t),gGo=r(HSe," (Nezha model)"),HSe.forEach(t),hGo=i(j),c1=n(j,"LI",{});var USe=s(c1);xue=n(USe,"STRONG",{});var TFt=s(xue);uGo=r(TFt,"nystromformer"),TFt.forEach(t),pGo=r(USe," \u2014 "),HV=n(USe,"A",{href:!0});var MFt=s(HV);_Go=r(MFt,"NystromformerForSequenceClassification"),MFt.forEach(t),bGo=r(USe," (Nystr\xF6mformer model)"),USe.forEach(t),vGo=i(j),m1=n(j,"LI",{});var JSe=s(m1);$ue=n(JSe,"STRONG",{});var EFt=s($ue);FGo=r(EFt,"openai-gpt"),EFt.forEach(t),TGo=r(JSe," \u2014 "),UV=n(JSe,"A",{href:!0});var CFt=s(UV);MGo=r(CFt,"OpenAIGPTForSequenceClassification"),CFt.forEach(t),EGo=r(JSe," (OpenAI GPT model)"),JSe.forEach(t),CGo=i(j),f1=n(j,"LI",{});var YSe=s(f1);kue=n(YSe,"STRONG",{});var wFt=s(kue);wGo=r(wFt,"perceiver"),wFt.forEach(t),AGo=r(YSe," \u2014 "),JV=n(YSe,"A",{href:!0});var AFt=s(JV);LGo=r(AFt,"PerceiverForSequenceClassification"),AFt.forEach(t),yGo=r(YSe," (Perceiver model)"),YSe.forEach(t),xGo=i(j),g1=n(j,"LI",{});var KSe=s(g1);Sue=n(KSe,"STRONG",{});var LFt=s(Sue);$Go=r(LFt,"plbart"),LFt.forEach(t),kGo=r(KSe," \u2014 "),YV=n(KSe,"A",{href:!0});var yFt=s(YV);SGo=r(yFt,"PLBartForSequenceClassification"),yFt.forEach(t),RGo=r(KSe," (PLBart model)"),KSe.forEach(t),PGo=i(j),h1=n(j,"LI",{});var ZSe=s(h1);Rue=n(ZSe,"STRONG",{});var xFt=s(Rue);BGo=r(xFt,"qdqbert"),xFt.forEach(t),IGo=r(ZSe," \u2014 "),KV=n(ZSe,"A",{href:!0});var $Ft=s(KV);NGo=r($Ft,"QDQBertForSequenceClassification"),$Ft.forEach(t),qGo=r(ZSe," (QDQBert model)"),ZSe.forEach(t),jGo=i(j),u1=n(j,"LI",{});var eRe=s(u1);Pue=n(eRe,"STRONG",{});var kFt=s(Pue);DGo=r(kFt,"reformer"),kFt.forEach(t),GGo=r(eRe," \u2014 "),ZV=n(eRe,"A",{href:!0});var SFt=s(ZV);OGo=r(SFt,"ReformerForSequenceClassification"),SFt.forEach(t),VGo=r(eRe," (Reformer model)"),eRe.forEach(t),XGo=i(j),p1=n(j,"LI",{});var oRe=s(p1);Bue=n(oRe,"STRONG",{});var RFt=s(Bue);zGo=r(RFt,"rembert"),RFt.forEach(t),QGo=r(oRe," \u2014 "),eX=n(oRe,"A",{href:!0});var PFt=s(eX);WGo=r(PFt,"RemBertForSequenceClassification"),PFt.forEach(t),HGo=r(oRe," (RemBERT model)"),oRe.forEach(t),UGo=i(j),_1=n(j,"LI",{});var rRe=s(_1);Iue=n(rRe,"STRONG",{});var BFt=s(Iue);JGo=r(BFt,"roberta"),BFt.forEach(t),YGo=r(rRe," \u2014 "),oX=n(rRe,"A",{href:!0});var IFt=s(oX);KGo=r(IFt,"RobertaForSequenceClassification"),IFt.forEach(t),ZGo=r(rRe," (RoBERTa model)"),rRe.forEach(t),eOo=i(j),b1=n(j,"LI",{});var tRe=s(b1);Nue=n(tRe,"STRONG",{});var NFt=s(Nue);oOo=r(NFt,"roformer"),NFt.forEach(t),rOo=r(tRe," \u2014 "),rX=n(tRe,"A",{href:!0});var qFt=s(rX);tOo=r(qFt,"RoFormerForSequenceClassification"),qFt.forEach(t),aOo=r(tRe," (RoFormer model)"),tRe.forEach(t),nOo=i(j),v1=n(j,"LI",{});var aRe=s(v1);que=n(aRe,"STRONG",{});var jFt=s(que);sOo=r(jFt,"squeezebert"),jFt.forEach(t),lOo=r(aRe," \u2014 "),tX=n(aRe,"A",{href:!0});var DFt=s(tX);iOo=r(DFt,"SqueezeBertForSequenceClassification"),DFt.forEach(t),dOo=r(aRe," (SqueezeBERT model)"),aRe.forEach(t),cOo=i(j),F1=n(j,"LI",{});var nRe=s(F1);jue=n(nRe,"STRONG",{});var GFt=s(jue);mOo=r(GFt,"tapas"),GFt.forEach(t),fOo=r(nRe," \u2014 "),aX=n(nRe,"A",{href:!0});var OFt=s(aX);gOo=r(OFt,"TapasForSequenceClassification"),OFt.forEach(t),hOo=r(nRe," (TAPAS model)"),nRe.forEach(t),uOo=i(j),T1=n(j,"LI",{});var sRe=s(T1);Due=n(sRe,"STRONG",{});var VFt=s(Due);pOo=r(VFt,"transfo-xl"),VFt.forEach(t),_Oo=r(sRe," \u2014 "),nX=n(sRe,"A",{href:!0});var XFt=s(nX);bOo=r(XFt,"TransfoXLForSequenceClassification"),XFt.forEach(t),vOo=r(sRe," (Transformer-XL model)"),sRe.forEach(t),FOo=i(j),M1=n(j,"LI",{});var lRe=s(M1);Gue=n(lRe,"STRONG",{});var zFt=s(Gue);TOo=r(zFt,"xlm"),zFt.forEach(t),MOo=r(lRe," \u2014 "),sX=n(lRe,"A",{href:!0});var QFt=s(sX);EOo=r(QFt,"XLMForSequenceClassification"),QFt.forEach(t),COo=r(lRe," (XLM model)"),lRe.forEach(t),wOo=i(j),E1=n(j,"LI",{});var iRe=s(E1);Oue=n(iRe,"STRONG",{});var WFt=s(Oue);AOo=r(WFt,"xlm-roberta"),WFt.forEach(t),LOo=r(iRe," \u2014 "),lX=n(iRe,"A",{href:!0});var HFt=s(lX);yOo=r(HFt,"XLMRobertaForSequenceClassification"),HFt.forEach(t),xOo=r(iRe," (XLM-RoBERTa model)"),iRe.forEach(t),$Oo=i(j),C1=n(j,"LI",{});var dRe=s(C1);Vue=n(dRe,"STRONG",{});var UFt=s(Vue);kOo=r(UFt,"xlm-roberta-xl"),UFt.forEach(t),SOo=r(dRe," \u2014 "),iX=n(dRe,"A",{href:!0});var JFt=s(iX);ROo=r(JFt,"XLMRobertaXLForSequenceClassification"),JFt.forEach(t),POo=r(dRe," (XLM-RoBERTa-XL model)"),dRe.forEach(t),BOo=i(j),w1=n(j,"LI",{});var cRe=s(w1);Xue=n(cRe,"STRONG",{});var YFt=s(Xue);IOo=r(YFt,"xlnet"),YFt.forEach(t),NOo=r(cRe," \u2014 "),dX=n(cRe,"A",{href:!0});var KFt=s(dX);qOo=r(KFt,"XLNetForSequenceClassification"),KFt.forEach(t),jOo=r(cRe," (XLNet model)"),cRe.forEach(t),DOo=i(j),A1=n(j,"LI",{});var mRe=s(A1);zue=n(mRe,"STRONG",{});var ZFt=s(zue);GOo=r(ZFt,"yoso"),ZFt.forEach(t),OOo=r(mRe," \u2014 "),cX=n(mRe,"A",{href:!0});var eTt=s(cX);VOo=r(eTt,"YosoForSequenceClassification"),eTt.forEach(t),XOo=r(mRe," (YOSO model)"),mRe.forEach(t),j.forEach(t),zOo=i(ca),L1=n(ca,"P",{});var fRe=s(L1);QOo=r(fRe,"The model is set in evaluation mode by default using "),Que=n(fRe,"CODE",{});var oTt=s(Que);WOo=r(oTt,"model.eval()"),oTt.forEach(t),HOo=r(fRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wue=n(fRe,"CODE",{});var rTt=s(Wue);UOo=r(rTt,"model.train()"),rTt.forEach(t),fRe.forEach(t),JOo=i(ca),T(y1.$$.fragment,ca),ca.forEach(t),al.forEach(t),rVe=i(m),rd=n(m,"H2",{class:!0});var ize=s(rd);x1=n(ize,"A",{id:!0,class:!0,href:!0});var tTt=s(x1);Hue=n(tTt,"SPAN",{});var aTt=s(Hue);T(Oy.$$.fragment,aTt),aTt.forEach(t),tTt.forEach(t),YOo=i(ize),Uue=n(ize,"SPAN",{});var nTt=s(Uue);KOo=r(nTt,"AutoModelForMultipleChoice"),nTt.forEach(t),ize.forEach(t),tVe=i(m),Bo=n(m,"DIV",{class:!0});var nl=s(Bo);T(Vy.$$.fragment,nl),ZOo=i(nl),td=n(nl,"P",{});var tre=s(td);eVo=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),mX=n(tre,"A",{href:!0});var sTt=s(mX);oVo=r(sTt,"from_pretrained()"),sTt.forEach(t),rVo=r(tre," class method or the "),fX=n(tre,"A",{href:!0});var lTt=s(fX);tVo=r(lTt,"from_config()"),lTt.forEach(t),aVo=r(tre,` class
method.`),tre.forEach(t),nVo=i(nl),Xy=n(nl,"P",{});var dze=s(Xy);sVo=r(dze,"This class cannot be instantiated directly using "),Jue=n(dze,"CODE",{});var iTt=s(Jue);lVo=r(iTt,"__init__()"),iTt.forEach(t),iVo=r(dze," (throws an error)."),dze.forEach(t),dVo=i(nl),ft=n(nl,"DIV",{class:!0});var oL=s(ft);T(zy.$$.fragment,oL),cVo=i(oL),Yue=n(oL,"P",{});var dTt=s(Yue);mVo=r(dTt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dTt.forEach(t),fVo=i(oL),ad=n(oL,"P",{});var are=s(ad);gVo=r(are,`Note:
Loading a model from its configuration file does `),Kue=n(are,"STRONG",{});var cTt=s(Kue);hVo=r(cTt,"not"),cTt.forEach(t),uVo=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(are,"A",{href:!0});var mTt=s(gX);pVo=r(mTt,"from_pretrained()"),mTt.forEach(t),_Vo=r(are," to load the model weights."),are.forEach(t),bVo=i(oL),T($1.$$.fragment,oL),oL.forEach(t),vVo=i(nl),ro=n(nl,"DIV",{class:!0});var ma=s(ro);T(Qy.$$.fragment,ma),FVo=i(ma),Zue=n(ma,"P",{});var fTt=s(Zue);TVo=r(fTt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fTt.forEach(t),MVo=i(ma),Da=n(ma,"P",{});var rL=s(Da);EVo=r(rL,"The model class to instantiate is selected based on the "),epe=n(rL,"CODE",{});var gTt=s(epe);CVo=r(gTt,"model_type"),gTt.forEach(t),wVo=r(rL,` property of the config object (either
passed as an argument or loaded from `),ope=n(rL,"CODE",{});var hTt=s(ope);AVo=r(hTt,"pretrained_model_name_or_path"),hTt.forEach(t),LVo=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=n(rL,"CODE",{});var uTt=s(rpe);yVo=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),xVo=r(rL,":"),rL.forEach(t),$Vo=i(ma),Z=n(ma,"UL",{});var ee=s(Z);k1=n(ee,"LI",{});var gRe=s(k1);tpe=n(gRe,"STRONG",{});var pTt=s(tpe);kVo=r(pTt,"albert"),pTt.forEach(t),SVo=r(gRe," \u2014 "),hX=n(gRe,"A",{href:!0});var _Tt=s(hX);RVo=r(_Tt,"AlbertForMultipleChoice"),_Tt.forEach(t),PVo=r(gRe," (ALBERT model)"),gRe.forEach(t),BVo=i(ee),S1=n(ee,"LI",{});var hRe=s(S1);ape=n(hRe,"STRONG",{});var bTt=s(ape);IVo=r(bTt,"bert"),bTt.forEach(t),NVo=r(hRe," \u2014 "),uX=n(hRe,"A",{href:!0});var vTt=s(uX);qVo=r(vTt,"BertForMultipleChoice"),vTt.forEach(t),jVo=r(hRe," (BERT model)"),hRe.forEach(t),DVo=i(ee),R1=n(ee,"LI",{});var uRe=s(R1);npe=n(uRe,"STRONG",{});var FTt=s(npe);GVo=r(FTt,"big_bird"),FTt.forEach(t),OVo=r(uRe," \u2014 "),pX=n(uRe,"A",{href:!0});var TTt=s(pX);VVo=r(TTt,"BigBirdForMultipleChoice"),TTt.forEach(t),XVo=r(uRe," (BigBird model)"),uRe.forEach(t),zVo=i(ee),P1=n(ee,"LI",{});var pRe=s(P1);spe=n(pRe,"STRONG",{});var MTt=s(spe);QVo=r(MTt,"camembert"),MTt.forEach(t),WVo=r(pRe," \u2014 "),_X=n(pRe,"A",{href:!0});var ETt=s(_X);HVo=r(ETt,"CamembertForMultipleChoice"),ETt.forEach(t),UVo=r(pRe," (CamemBERT model)"),pRe.forEach(t),JVo=i(ee),B1=n(ee,"LI",{});var _Re=s(B1);lpe=n(_Re,"STRONG",{});var CTt=s(lpe);YVo=r(CTt,"canine"),CTt.forEach(t),KVo=r(_Re," \u2014 "),bX=n(_Re,"A",{href:!0});var wTt=s(bX);ZVo=r(wTt,"CanineForMultipleChoice"),wTt.forEach(t),eXo=r(_Re," (CANINE model)"),_Re.forEach(t),oXo=i(ee),I1=n(ee,"LI",{});var bRe=s(I1);ipe=n(bRe,"STRONG",{});var ATt=s(ipe);rXo=r(ATt,"convbert"),ATt.forEach(t),tXo=r(bRe," \u2014 "),vX=n(bRe,"A",{href:!0});var LTt=s(vX);aXo=r(LTt,"ConvBertForMultipleChoice"),LTt.forEach(t),nXo=r(bRe," (ConvBERT model)"),bRe.forEach(t),sXo=i(ee),N1=n(ee,"LI",{});var vRe=s(N1);dpe=n(vRe,"STRONG",{});var yTt=s(dpe);lXo=r(yTt,"data2vec-text"),yTt.forEach(t),iXo=r(vRe," \u2014 "),FX=n(vRe,"A",{href:!0});var xTt=s(FX);dXo=r(xTt,"Data2VecTextForMultipleChoice"),xTt.forEach(t),cXo=r(vRe," (Data2VecText model)"),vRe.forEach(t),mXo=i(ee),q1=n(ee,"LI",{});var FRe=s(q1);cpe=n(FRe,"STRONG",{});var $Tt=s(cpe);fXo=r($Tt,"deberta-v2"),$Tt.forEach(t),gXo=r(FRe," \u2014 "),TX=n(FRe,"A",{href:!0});var kTt=s(TX);hXo=r(kTt,"DebertaV2ForMultipleChoice"),kTt.forEach(t),uXo=r(FRe," (DeBERTa-v2 model)"),FRe.forEach(t),pXo=i(ee),j1=n(ee,"LI",{});var TRe=s(j1);mpe=n(TRe,"STRONG",{});var STt=s(mpe);_Xo=r(STt,"distilbert"),STt.forEach(t),bXo=r(TRe," \u2014 "),MX=n(TRe,"A",{href:!0});var RTt=s(MX);vXo=r(RTt,"DistilBertForMultipleChoice"),RTt.forEach(t),FXo=r(TRe," (DistilBERT model)"),TRe.forEach(t),TXo=i(ee),D1=n(ee,"LI",{});var MRe=s(D1);fpe=n(MRe,"STRONG",{});var PTt=s(fpe);MXo=r(PTt,"electra"),PTt.forEach(t),EXo=r(MRe," \u2014 "),EX=n(MRe,"A",{href:!0});var BTt=s(EX);CXo=r(BTt,"ElectraForMultipleChoice"),BTt.forEach(t),wXo=r(MRe," (ELECTRA model)"),MRe.forEach(t),AXo=i(ee),G1=n(ee,"LI",{});var ERe=s(G1);gpe=n(ERe,"STRONG",{});var ITt=s(gpe);LXo=r(ITt,"flaubert"),ITt.forEach(t),yXo=r(ERe," \u2014 "),CX=n(ERe,"A",{href:!0});var NTt=s(CX);xXo=r(NTt,"FlaubertForMultipleChoice"),NTt.forEach(t),$Xo=r(ERe," (FlauBERT model)"),ERe.forEach(t),kXo=i(ee),O1=n(ee,"LI",{});var CRe=s(O1);hpe=n(CRe,"STRONG",{});var qTt=s(hpe);SXo=r(qTt,"fnet"),qTt.forEach(t),RXo=r(CRe," \u2014 "),wX=n(CRe,"A",{href:!0});var jTt=s(wX);PXo=r(jTt,"FNetForMultipleChoice"),jTt.forEach(t),BXo=r(CRe," (FNet model)"),CRe.forEach(t),IXo=i(ee),V1=n(ee,"LI",{});var wRe=s(V1);upe=n(wRe,"STRONG",{});var DTt=s(upe);NXo=r(DTt,"funnel"),DTt.forEach(t),qXo=r(wRe," \u2014 "),AX=n(wRe,"A",{href:!0});var GTt=s(AX);jXo=r(GTt,"FunnelForMultipleChoice"),GTt.forEach(t),DXo=r(wRe," (Funnel Transformer model)"),wRe.forEach(t),GXo=i(ee),X1=n(ee,"LI",{});var ARe=s(X1);ppe=n(ARe,"STRONG",{});var OTt=s(ppe);OXo=r(OTt,"ibert"),OTt.forEach(t),VXo=r(ARe," \u2014 "),LX=n(ARe,"A",{href:!0});var VTt=s(LX);XXo=r(VTt,"IBertForMultipleChoice"),VTt.forEach(t),zXo=r(ARe," (I-BERT model)"),ARe.forEach(t),QXo=i(ee),z1=n(ee,"LI",{});var LRe=s(z1);_pe=n(LRe,"STRONG",{});var XTt=s(_pe);WXo=r(XTt,"longformer"),XTt.forEach(t),HXo=r(LRe," \u2014 "),yX=n(LRe,"A",{href:!0});var zTt=s(yX);UXo=r(zTt,"LongformerForMultipleChoice"),zTt.forEach(t),JXo=r(LRe," (Longformer model)"),LRe.forEach(t),YXo=i(ee),Q1=n(ee,"LI",{});var yRe=s(Q1);bpe=n(yRe,"STRONG",{});var QTt=s(bpe);KXo=r(QTt,"megatron-bert"),QTt.forEach(t),ZXo=r(yRe," \u2014 "),xX=n(yRe,"A",{href:!0});var WTt=s(xX);ezo=r(WTt,"MegatronBertForMultipleChoice"),WTt.forEach(t),ozo=r(yRe," (Megatron-BERT model)"),yRe.forEach(t),rzo=i(ee),W1=n(ee,"LI",{});var xRe=s(W1);vpe=n(xRe,"STRONG",{});var HTt=s(vpe);tzo=r(HTt,"mobilebert"),HTt.forEach(t),azo=r(xRe," \u2014 "),$X=n(xRe,"A",{href:!0});var UTt=s($X);nzo=r(UTt,"MobileBertForMultipleChoice"),UTt.forEach(t),szo=r(xRe," (MobileBERT model)"),xRe.forEach(t),lzo=i(ee),H1=n(ee,"LI",{});var $Re=s(H1);Fpe=n($Re,"STRONG",{});var JTt=s(Fpe);izo=r(JTt,"mpnet"),JTt.forEach(t),dzo=r($Re," \u2014 "),kX=n($Re,"A",{href:!0});var YTt=s(kX);czo=r(YTt,"MPNetForMultipleChoice"),YTt.forEach(t),mzo=r($Re," (MPNet model)"),$Re.forEach(t),fzo=i(ee),U1=n(ee,"LI",{});var kRe=s(U1);Tpe=n(kRe,"STRONG",{});var KTt=s(Tpe);gzo=r(KTt,"nezha"),KTt.forEach(t),hzo=r(kRe," \u2014 "),SX=n(kRe,"A",{href:!0});var ZTt=s(SX);uzo=r(ZTt,"NezhaForMultipleChoice"),ZTt.forEach(t),pzo=r(kRe," (Nezha model)"),kRe.forEach(t),_zo=i(ee),J1=n(ee,"LI",{});var SRe=s(J1);Mpe=n(SRe,"STRONG",{});var eMt=s(Mpe);bzo=r(eMt,"nystromformer"),eMt.forEach(t),vzo=r(SRe," \u2014 "),RX=n(SRe,"A",{href:!0});var oMt=s(RX);Fzo=r(oMt,"NystromformerForMultipleChoice"),oMt.forEach(t),Tzo=r(SRe," (Nystr\xF6mformer model)"),SRe.forEach(t),Mzo=i(ee),Y1=n(ee,"LI",{});var RRe=s(Y1);Epe=n(RRe,"STRONG",{});var rMt=s(Epe);Ezo=r(rMt,"qdqbert"),rMt.forEach(t),Czo=r(RRe," \u2014 "),PX=n(RRe,"A",{href:!0});var tMt=s(PX);wzo=r(tMt,"QDQBertForMultipleChoice"),tMt.forEach(t),Azo=r(RRe," (QDQBert model)"),RRe.forEach(t),Lzo=i(ee),K1=n(ee,"LI",{});var PRe=s(K1);Cpe=n(PRe,"STRONG",{});var aMt=s(Cpe);yzo=r(aMt,"rembert"),aMt.forEach(t),xzo=r(PRe," \u2014 "),BX=n(PRe,"A",{href:!0});var nMt=s(BX);$zo=r(nMt,"RemBertForMultipleChoice"),nMt.forEach(t),kzo=r(PRe," (RemBERT model)"),PRe.forEach(t),Szo=i(ee),Z1=n(ee,"LI",{});var BRe=s(Z1);wpe=n(BRe,"STRONG",{});var sMt=s(wpe);Rzo=r(sMt,"roberta"),sMt.forEach(t),Pzo=r(BRe," \u2014 "),IX=n(BRe,"A",{href:!0});var lMt=s(IX);Bzo=r(lMt,"RobertaForMultipleChoice"),lMt.forEach(t),Izo=r(BRe," (RoBERTa model)"),BRe.forEach(t),Nzo=i(ee),eF=n(ee,"LI",{});var IRe=s(eF);Ape=n(IRe,"STRONG",{});var iMt=s(Ape);qzo=r(iMt,"roformer"),iMt.forEach(t),jzo=r(IRe," \u2014 "),NX=n(IRe,"A",{href:!0});var dMt=s(NX);Dzo=r(dMt,"RoFormerForMultipleChoice"),dMt.forEach(t),Gzo=r(IRe," (RoFormer model)"),IRe.forEach(t),Ozo=i(ee),oF=n(ee,"LI",{});var NRe=s(oF);Lpe=n(NRe,"STRONG",{});var cMt=s(Lpe);Vzo=r(cMt,"squeezebert"),cMt.forEach(t),Xzo=r(NRe," \u2014 "),qX=n(NRe,"A",{href:!0});var mMt=s(qX);zzo=r(mMt,"SqueezeBertForMultipleChoice"),mMt.forEach(t),Qzo=r(NRe," (SqueezeBERT model)"),NRe.forEach(t),Wzo=i(ee),rF=n(ee,"LI",{});var qRe=s(rF);ype=n(qRe,"STRONG",{});var fMt=s(ype);Hzo=r(fMt,"xlm"),fMt.forEach(t),Uzo=r(qRe," \u2014 "),jX=n(qRe,"A",{href:!0});var gMt=s(jX);Jzo=r(gMt,"XLMForMultipleChoice"),gMt.forEach(t),Yzo=r(qRe," (XLM model)"),qRe.forEach(t),Kzo=i(ee),tF=n(ee,"LI",{});var jRe=s(tF);xpe=n(jRe,"STRONG",{});var hMt=s(xpe);Zzo=r(hMt,"xlm-roberta"),hMt.forEach(t),eQo=r(jRe," \u2014 "),DX=n(jRe,"A",{href:!0});var uMt=s(DX);oQo=r(uMt,"XLMRobertaForMultipleChoice"),uMt.forEach(t),rQo=r(jRe," (XLM-RoBERTa model)"),jRe.forEach(t),tQo=i(ee),aF=n(ee,"LI",{});var DRe=s(aF);$pe=n(DRe,"STRONG",{});var pMt=s($pe);aQo=r(pMt,"xlm-roberta-xl"),pMt.forEach(t),nQo=r(DRe," \u2014 "),GX=n(DRe,"A",{href:!0});var _Mt=s(GX);sQo=r(_Mt,"XLMRobertaXLForMultipleChoice"),_Mt.forEach(t),lQo=r(DRe," (XLM-RoBERTa-XL model)"),DRe.forEach(t),iQo=i(ee),nF=n(ee,"LI",{});var GRe=s(nF);kpe=n(GRe,"STRONG",{});var bMt=s(kpe);dQo=r(bMt,"xlnet"),bMt.forEach(t),cQo=r(GRe," \u2014 "),OX=n(GRe,"A",{href:!0});var vMt=s(OX);mQo=r(vMt,"XLNetForMultipleChoice"),vMt.forEach(t),fQo=r(GRe," (XLNet model)"),GRe.forEach(t),gQo=i(ee),sF=n(ee,"LI",{});var ORe=s(sF);Spe=n(ORe,"STRONG",{});var FMt=s(Spe);hQo=r(FMt,"yoso"),FMt.forEach(t),uQo=r(ORe," \u2014 "),VX=n(ORe,"A",{href:!0});var TMt=s(VX);pQo=r(TMt,"YosoForMultipleChoice"),TMt.forEach(t),_Qo=r(ORe," (YOSO model)"),ORe.forEach(t),ee.forEach(t),bQo=i(ma),lF=n(ma,"P",{});var VRe=s(lF);vQo=r(VRe,"The model is set in evaluation mode by default using "),Rpe=n(VRe,"CODE",{});var MMt=s(Rpe);FQo=r(MMt,"model.eval()"),MMt.forEach(t),TQo=r(VRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ppe=n(VRe,"CODE",{});var EMt=s(Ppe);MQo=r(EMt,"model.train()"),EMt.forEach(t),VRe.forEach(t),EQo=i(ma),T(iF.$$.fragment,ma),ma.forEach(t),nl.forEach(t),aVe=i(m),nd=n(m,"H2",{class:!0});var cze=s(nd);dF=n(cze,"A",{id:!0,class:!0,href:!0});var CMt=s(dF);Bpe=n(CMt,"SPAN",{});var wMt=s(Bpe);T(Wy.$$.fragment,wMt),wMt.forEach(t),CMt.forEach(t),CQo=i(cze),Ipe=n(cze,"SPAN",{});var AMt=s(Ipe);wQo=r(AMt,"AutoModelForNextSentencePrediction"),AMt.forEach(t),cze.forEach(t),nVe=i(m),Io=n(m,"DIV",{class:!0});var sl=s(Io);T(Hy.$$.fragment,sl),AQo=i(sl),sd=n(sl,"P",{});var nre=s(sd);LQo=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XX=n(nre,"A",{href:!0});var LMt=s(XX);yQo=r(LMt,"from_pretrained()"),LMt.forEach(t),xQo=r(nre," class method or the "),zX=n(nre,"A",{href:!0});var yMt=s(zX);$Qo=r(yMt,"from_config()"),yMt.forEach(t),kQo=r(nre,` class
method.`),nre.forEach(t),SQo=i(sl),Uy=n(sl,"P",{});var mze=s(Uy);RQo=r(mze,"This class cannot be instantiated directly using "),Npe=n(mze,"CODE",{});var xMt=s(Npe);PQo=r(xMt,"__init__()"),xMt.forEach(t),BQo=r(mze," (throws an error)."),mze.forEach(t),IQo=i(sl),gt=n(sl,"DIV",{class:!0});var tL=s(gt);T(Jy.$$.fragment,tL),NQo=i(tL),qpe=n(tL,"P",{});var $Mt=s(qpe);qQo=r($Mt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Mt.forEach(t),jQo=i(tL),ld=n(tL,"P",{});var sre=s(ld);DQo=r(sre,`Note:
Loading a model from its configuration file does `),jpe=n(sre,"STRONG",{});var kMt=s(jpe);GQo=r(kMt,"not"),kMt.forEach(t),OQo=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(sre,"A",{href:!0});var SMt=s(QX);VQo=r(SMt,"from_pretrained()"),SMt.forEach(t),XQo=r(sre," to load the model weights."),sre.forEach(t),zQo=i(tL),T(cF.$$.fragment,tL),tL.forEach(t),QQo=i(sl),to=n(sl,"DIV",{class:!0});var fa=s(to);T(Yy.$$.fragment,fa),WQo=i(fa),Dpe=n(fa,"P",{});var RMt=s(Dpe);HQo=r(RMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),RMt.forEach(t),UQo=i(fa),Ga=n(fa,"P",{});var aL=s(Ga);JQo=r(aL,"The model class to instantiate is selected based on the "),Gpe=n(aL,"CODE",{});var PMt=s(Gpe);YQo=r(PMt,"model_type"),PMt.forEach(t),KQo=r(aL,` property of the config object (either
passed as an argument or loaded from `),Ope=n(aL,"CODE",{});var BMt=s(Ope);ZQo=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),eWo=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n(aL,"CODE",{});var IMt=s(Vpe);oWo=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),rWo=r(aL,":"),aL.forEach(t),tWo=i(fa),No=n(fa,"UL",{});var ga=s(No);mF=n(ga,"LI",{});var XRe=s(mF);Xpe=n(XRe,"STRONG",{});var NMt=s(Xpe);aWo=r(NMt,"bert"),NMt.forEach(t),nWo=r(XRe," \u2014 "),WX=n(XRe,"A",{href:!0});var qMt=s(WX);sWo=r(qMt,"BertForNextSentencePrediction"),qMt.forEach(t),lWo=r(XRe," (BERT model)"),XRe.forEach(t),iWo=i(ga),fF=n(ga,"LI",{});var zRe=s(fF);zpe=n(zRe,"STRONG",{});var jMt=s(zpe);dWo=r(jMt,"fnet"),jMt.forEach(t),cWo=r(zRe," \u2014 "),HX=n(zRe,"A",{href:!0});var DMt=s(HX);mWo=r(DMt,"FNetForNextSentencePrediction"),DMt.forEach(t),fWo=r(zRe," (FNet model)"),zRe.forEach(t),gWo=i(ga),gF=n(ga,"LI",{});var QRe=s(gF);Qpe=n(QRe,"STRONG",{});var GMt=s(Qpe);hWo=r(GMt,"megatron-bert"),GMt.forEach(t),uWo=r(QRe," \u2014 "),UX=n(QRe,"A",{href:!0});var OMt=s(UX);pWo=r(OMt,"MegatronBertForNextSentencePrediction"),OMt.forEach(t),_Wo=r(QRe," (Megatron-BERT model)"),QRe.forEach(t),bWo=i(ga),hF=n(ga,"LI",{});var WRe=s(hF);Wpe=n(WRe,"STRONG",{});var VMt=s(Wpe);vWo=r(VMt,"mobilebert"),VMt.forEach(t),FWo=r(WRe," \u2014 "),JX=n(WRe,"A",{href:!0});var XMt=s(JX);TWo=r(XMt,"MobileBertForNextSentencePrediction"),XMt.forEach(t),MWo=r(WRe," (MobileBERT model)"),WRe.forEach(t),EWo=i(ga),uF=n(ga,"LI",{});var HRe=s(uF);Hpe=n(HRe,"STRONG",{});var zMt=s(Hpe);CWo=r(zMt,"nezha"),zMt.forEach(t),wWo=r(HRe," \u2014 "),YX=n(HRe,"A",{href:!0});var QMt=s(YX);AWo=r(QMt,"NezhaForNextSentencePrediction"),QMt.forEach(t),LWo=r(HRe," (Nezha model)"),HRe.forEach(t),yWo=i(ga),pF=n(ga,"LI",{});var URe=s(pF);Upe=n(URe,"STRONG",{});var WMt=s(Upe);xWo=r(WMt,"qdqbert"),WMt.forEach(t),$Wo=r(URe," \u2014 "),KX=n(URe,"A",{href:!0});var HMt=s(KX);kWo=r(HMt,"QDQBertForNextSentencePrediction"),HMt.forEach(t),SWo=r(URe," (QDQBert model)"),URe.forEach(t),ga.forEach(t),RWo=i(fa),_F=n(fa,"P",{});var JRe=s(_F);PWo=r(JRe,"The model is set in evaluation mode by default using "),Jpe=n(JRe,"CODE",{});var UMt=s(Jpe);BWo=r(UMt,"model.eval()"),UMt.forEach(t),IWo=r(JRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=n(JRe,"CODE",{});var JMt=s(Ype);NWo=r(JMt,"model.train()"),JMt.forEach(t),JRe.forEach(t),qWo=i(fa),T(bF.$$.fragment,fa),fa.forEach(t),sl.forEach(t),sVe=i(m),id=n(m,"H2",{class:!0});var fze=s(id);vF=n(fze,"A",{id:!0,class:!0,href:!0});var YMt=s(vF);Kpe=n(YMt,"SPAN",{});var KMt=s(Kpe);T(Ky.$$.fragment,KMt),KMt.forEach(t),YMt.forEach(t),jWo=i(fze),Zpe=n(fze,"SPAN",{});var ZMt=s(Zpe);DWo=r(ZMt,"AutoModelForTokenClassification"),ZMt.forEach(t),fze.forEach(t),lVe=i(m),qo=n(m,"DIV",{class:!0});var ll=s(qo);T(Zy.$$.fragment,ll),GWo=i(ll),dd=n(ll,"P",{});var lre=s(dd);OWo=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZX=n(lre,"A",{href:!0});var e4t=s(ZX);VWo=r(e4t,"from_pretrained()"),e4t.forEach(t),XWo=r(lre," class method or the "),ez=n(lre,"A",{href:!0});var o4t=s(ez);zWo=r(o4t,"from_config()"),o4t.forEach(t),QWo=r(lre,` class
method.`),lre.forEach(t),WWo=i(ll),e8=n(ll,"P",{});var gze=s(e8);HWo=r(gze,"This class cannot be instantiated directly using "),e_e=n(gze,"CODE",{});var r4t=s(e_e);UWo=r(r4t,"__init__()"),r4t.forEach(t),JWo=r(gze," (throws an error)."),gze.forEach(t),YWo=i(ll),ht=n(ll,"DIV",{class:!0});var nL=s(ht);T(o8.$$.fragment,nL),KWo=i(nL),o_e=n(nL,"P",{});var t4t=s(o_e);ZWo=r(t4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t4t.forEach(t),eHo=i(nL),cd=n(nL,"P",{});var ire=s(cd);oHo=r(ire,`Note:
Loading a model from its configuration file does `),r_e=n(ire,"STRONG",{});var a4t=s(r_e);rHo=r(a4t,"not"),a4t.forEach(t),tHo=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(ire,"A",{href:!0});var n4t=s(oz);aHo=r(n4t,"from_pretrained()"),n4t.forEach(t),nHo=r(ire," to load the model weights."),ire.forEach(t),sHo=i(nL),T(FF.$$.fragment,nL),nL.forEach(t),lHo=i(ll),ao=n(ll,"DIV",{class:!0});var ha=s(ao);T(r8.$$.fragment,ha),iHo=i(ha),t_e=n(ha,"P",{});var s4t=s(t_e);dHo=r(s4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s4t.forEach(t),cHo=i(ha),Oa=n(ha,"P",{});var sL=s(Oa);mHo=r(sL,"The model class to instantiate is selected based on the "),a_e=n(sL,"CODE",{});var l4t=s(a_e);fHo=r(l4t,"model_type"),l4t.forEach(t),gHo=r(sL,` property of the config object (either
passed as an argument or loaded from `),n_e=n(sL,"CODE",{});var i4t=s(n_e);hHo=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),uHo=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(sL,"CODE",{});var d4t=s(s_e);pHo=r(d4t,"pretrained_model_name_or_path"),d4t.forEach(t),_Ho=r(sL,":"),sL.forEach(t),bHo=i(ha),H=n(ha,"UL",{});var J=s(H);TF=n(J,"LI",{});var YRe=s(TF);l_e=n(YRe,"STRONG",{});var c4t=s(l_e);vHo=r(c4t,"albert"),c4t.forEach(t),FHo=r(YRe," \u2014 "),rz=n(YRe,"A",{href:!0});var m4t=s(rz);THo=r(m4t,"AlbertForTokenClassification"),m4t.forEach(t),MHo=r(YRe," (ALBERT model)"),YRe.forEach(t),EHo=i(J),MF=n(J,"LI",{});var KRe=s(MF);i_e=n(KRe,"STRONG",{});var f4t=s(i_e);CHo=r(f4t,"bert"),f4t.forEach(t),wHo=r(KRe," \u2014 "),tz=n(KRe,"A",{href:!0});var g4t=s(tz);AHo=r(g4t,"BertForTokenClassification"),g4t.forEach(t),LHo=r(KRe," (BERT model)"),KRe.forEach(t),yHo=i(J),EF=n(J,"LI",{});var ZRe=s(EF);d_e=n(ZRe,"STRONG",{});var h4t=s(d_e);xHo=r(h4t,"big_bird"),h4t.forEach(t),$Ho=r(ZRe," \u2014 "),az=n(ZRe,"A",{href:!0});var u4t=s(az);kHo=r(u4t,"BigBirdForTokenClassification"),u4t.forEach(t),SHo=r(ZRe," (BigBird model)"),ZRe.forEach(t),RHo=i(J),CF=n(J,"LI",{});var ePe=s(CF);c_e=n(ePe,"STRONG",{});var p4t=s(c_e);PHo=r(p4t,"bloom"),p4t.forEach(t),BHo=r(ePe," \u2014 "),nz=n(ePe,"A",{href:!0});var _4t=s(nz);IHo=r(_4t,"BloomForTokenClassification"),_4t.forEach(t),NHo=r(ePe," (BLOOM model)"),ePe.forEach(t),qHo=i(J),wF=n(J,"LI",{});var oPe=s(wF);m_e=n(oPe,"STRONG",{});var b4t=s(m_e);jHo=r(b4t,"camembert"),b4t.forEach(t),DHo=r(oPe," \u2014 "),sz=n(oPe,"A",{href:!0});var v4t=s(sz);GHo=r(v4t,"CamembertForTokenClassification"),v4t.forEach(t),OHo=r(oPe," (CamemBERT model)"),oPe.forEach(t),VHo=i(J),AF=n(J,"LI",{});var rPe=s(AF);f_e=n(rPe,"STRONG",{});var F4t=s(f_e);XHo=r(F4t,"canine"),F4t.forEach(t),zHo=r(rPe," \u2014 "),lz=n(rPe,"A",{href:!0});var T4t=s(lz);QHo=r(T4t,"CanineForTokenClassification"),T4t.forEach(t),WHo=r(rPe," (CANINE model)"),rPe.forEach(t),HHo=i(J),LF=n(J,"LI",{});var tPe=s(LF);g_e=n(tPe,"STRONG",{});var M4t=s(g_e);UHo=r(M4t,"convbert"),M4t.forEach(t),JHo=r(tPe," \u2014 "),iz=n(tPe,"A",{href:!0});var E4t=s(iz);YHo=r(E4t,"ConvBertForTokenClassification"),E4t.forEach(t),KHo=r(tPe," (ConvBERT model)"),tPe.forEach(t),ZHo=i(J),yF=n(J,"LI",{});var aPe=s(yF);h_e=n(aPe,"STRONG",{});var C4t=s(h_e);eUo=r(C4t,"data2vec-text"),C4t.forEach(t),oUo=r(aPe," \u2014 "),dz=n(aPe,"A",{href:!0});var w4t=s(dz);rUo=r(w4t,"Data2VecTextForTokenClassification"),w4t.forEach(t),tUo=r(aPe," (Data2VecText model)"),aPe.forEach(t),aUo=i(J),xF=n(J,"LI",{});var nPe=s(xF);u_e=n(nPe,"STRONG",{});var A4t=s(u_e);nUo=r(A4t,"deberta"),A4t.forEach(t),sUo=r(nPe," \u2014 "),cz=n(nPe,"A",{href:!0});var L4t=s(cz);lUo=r(L4t,"DebertaForTokenClassification"),L4t.forEach(t),iUo=r(nPe," (DeBERTa model)"),nPe.forEach(t),dUo=i(J),$F=n(J,"LI",{});var sPe=s($F);p_e=n(sPe,"STRONG",{});var y4t=s(p_e);cUo=r(y4t,"deberta-v2"),y4t.forEach(t),mUo=r(sPe," \u2014 "),mz=n(sPe,"A",{href:!0});var x4t=s(mz);fUo=r(x4t,"DebertaV2ForTokenClassification"),x4t.forEach(t),gUo=r(sPe," (DeBERTa-v2 model)"),sPe.forEach(t),hUo=i(J),kF=n(J,"LI",{});var lPe=s(kF);__e=n(lPe,"STRONG",{});var $4t=s(__e);uUo=r($4t,"distilbert"),$4t.forEach(t),pUo=r(lPe," \u2014 "),fz=n(lPe,"A",{href:!0});var k4t=s(fz);_Uo=r(k4t,"DistilBertForTokenClassification"),k4t.forEach(t),bUo=r(lPe," (DistilBERT model)"),lPe.forEach(t),vUo=i(J),SF=n(J,"LI",{});var iPe=s(SF);b_e=n(iPe,"STRONG",{});var S4t=s(b_e);FUo=r(S4t,"electra"),S4t.forEach(t),TUo=r(iPe," \u2014 "),gz=n(iPe,"A",{href:!0});var R4t=s(gz);MUo=r(R4t,"ElectraForTokenClassification"),R4t.forEach(t),EUo=r(iPe," (ELECTRA model)"),iPe.forEach(t),CUo=i(J),RF=n(J,"LI",{});var dPe=s(RF);v_e=n(dPe,"STRONG",{});var P4t=s(v_e);wUo=r(P4t,"flaubert"),P4t.forEach(t),AUo=r(dPe," \u2014 "),hz=n(dPe,"A",{href:!0});var B4t=s(hz);LUo=r(B4t,"FlaubertForTokenClassification"),B4t.forEach(t),yUo=r(dPe," (FlauBERT model)"),dPe.forEach(t),xUo=i(J),PF=n(J,"LI",{});var cPe=s(PF);F_e=n(cPe,"STRONG",{});var I4t=s(F_e);$Uo=r(I4t,"fnet"),I4t.forEach(t),kUo=r(cPe," \u2014 "),uz=n(cPe,"A",{href:!0});var N4t=s(uz);SUo=r(N4t,"FNetForTokenClassification"),N4t.forEach(t),RUo=r(cPe," (FNet model)"),cPe.forEach(t),PUo=i(J),BF=n(J,"LI",{});var mPe=s(BF);T_e=n(mPe,"STRONG",{});var q4t=s(T_e);BUo=r(q4t,"funnel"),q4t.forEach(t),IUo=r(mPe," \u2014 "),pz=n(mPe,"A",{href:!0});var j4t=s(pz);NUo=r(j4t,"FunnelForTokenClassification"),j4t.forEach(t),qUo=r(mPe," (Funnel Transformer model)"),mPe.forEach(t),jUo=i(J),IF=n(J,"LI",{});var fPe=s(IF);M_e=n(fPe,"STRONG",{});var D4t=s(M_e);DUo=r(D4t,"gpt2"),D4t.forEach(t),GUo=r(fPe," \u2014 "),_z=n(fPe,"A",{href:!0});var G4t=s(_z);OUo=r(G4t,"GPT2ForTokenClassification"),G4t.forEach(t),VUo=r(fPe," (OpenAI GPT-2 model)"),fPe.forEach(t),XUo=i(J),NF=n(J,"LI",{});var gPe=s(NF);E_e=n(gPe,"STRONG",{});var O4t=s(E_e);zUo=r(O4t,"ibert"),O4t.forEach(t),QUo=r(gPe," \u2014 "),bz=n(gPe,"A",{href:!0});var V4t=s(bz);WUo=r(V4t,"IBertForTokenClassification"),V4t.forEach(t),HUo=r(gPe," (I-BERT model)"),gPe.forEach(t),UUo=i(J),qF=n(J,"LI",{});var hPe=s(qF);C_e=n(hPe,"STRONG",{});var X4t=s(C_e);JUo=r(X4t,"layoutlm"),X4t.forEach(t),YUo=r(hPe," \u2014 "),vz=n(hPe,"A",{href:!0});var z4t=s(vz);KUo=r(z4t,"LayoutLMForTokenClassification"),z4t.forEach(t),ZUo=r(hPe," (LayoutLM model)"),hPe.forEach(t),eJo=i(J),jF=n(J,"LI",{});var uPe=s(jF);w_e=n(uPe,"STRONG",{});var Q4t=s(w_e);oJo=r(Q4t,"layoutlmv2"),Q4t.forEach(t),rJo=r(uPe," \u2014 "),Fz=n(uPe,"A",{href:!0});var W4t=s(Fz);tJo=r(W4t,"LayoutLMv2ForTokenClassification"),W4t.forEach(t),aJo=r(uPe," (LayoutLMv2 model)"),uPe.forEach(t),nJo=i(J),DF=n(J,"LI",{});var pPe=s(DF);A_e=n(pPe,"STRONG",{});var H4t=s(A_e);sJo=r(H4t,"layoutlmv3"),H4t.forEach(t),lJo=r(pPe," \u2014 "),Tz=n(pPe,"A",{href:!0});var U4t=s(Tz);iJo=r(U4t,"LayoutLMv3ForTokenClassification"),U4t.forEach(t),dJo=r(pPe," (LayoutLMv3 model)"),pPe.forEach(t),cJo=i(J),GF=n(J,"LI",{});var _Pe=s(GF);L_e=n(_Pe,"STRONG",{});var J4t=s(L_e);mJo=r(J4t,"longformer"),J4t.forEach(t),fJo=r(_Pe," \u2014 "),Mz=n(_Pe,"A",{href:!0});var Y4t=s(Mz);gJo=r(Y4t,"LongformerForTokenClassification"),Y4t.forEach(t),hJo=r(_Pe," (Longformer model)"),_Pe.forEach(t),uJo=i(J),OF=n(J,"LI",{});var bPe=s(OF);y_e=n(bPe,"STRONG",{});var K4t=s(y_e);pJo=r(K4t,"megatron-bert"),K4t.forEach(t),_Jo=r(bPe," \u2014 "),Ez=n(bPe,"A",{href:!0});var Z4t=s(Ez);bJo=r(Z4t,"MegatronBertForTokenClassification"),Z4t.forEach(t),vJo=r(bPe," (Megatron-BERT model)"),bPe.forEach(t),FJo=i(J),VF=n(J,"LI",{});var vPe=s(VF);x_e=n(vPe,"STRONG",{});var eEt=s(x_e);TJo=r(eEt,"mobilebert"),eEt.forEach(t),MJo=r(vPe," \u2014 "),Cz=n(vPe,"A",{href:!0});var oEt=s(Cz);EJo=r(oEt,"MobileBertForTokenClassification"),oEt.forEach(t),CJo=r(vPe," (MobileBERT model)"),vPe.forEach(t),wJo=i(J),XF=n(J,"LI",{});var FPe=s(XF);$_e=n(FPe,"STRONG",{});var rEt=s($_e);AJo=r(rEt,"mpnet"),rEt.forEach(t),LJo=r(FPe," \u2014 "),wz=n(FPe,"A",{href:!0});var tEt=s(wz);yJo=r(tEt,"MPNetForTokenClassification"),tEt.forEach(t),xJo=r(FPe," (MPNet model)"),FPe.forEach(t),$Jo=i(J),zF=n(J,"LI",{});var TPe=s(zF);k_e=n(TPe,"STRONG",{});var aEt=s(k_e);kJo=r(aEt,"nezha"),aEt.forEach(t),SJo=r(TPe," \u2014 "),Az=n(TPe,"A",{href:!0});var nEt=s(Az);RJo=r(nEt,"NezhaForTokenClassification"),nEt.forEach(t),PJo=r(TPe," (Nezha model)"),TPe.forEach(t),BJo=i(J),QF=n(J,"LI",{});var MPe=s(QF);S_e=n(MPe,"STRONG",{});var sEt=s(S_e);IJo=r(sEt,"nystromformer"),sEt.forEach(t),NJo=r(MPe," \u2014 "),Lz=n(MPe,"A",{href:!0});var lEt=s(Lz);qJo=r(lEt,"NystromformerForTokenClassification"),lEt.forEach(t),jJo=r(MPe," (Nystr\xF6mformer model)"),MPe.forEach(t),DJo=i(J),WF=n(J,"LI",{});var EPe=s(WF);R_e=n(EPe,"STRONG",{});var iEt=s(R_e);GJo=r(iEt,"qdqbert"),iEt.forEach(t),OJo=r(EPe," \u2014 "),yz=n(EPe,"A",{href:!0});var dEt=s(yz);VJo=r(dEt,"QDQBertForTokenClassification"),dEt.forEach(t),XJo=r(EPe," (QDQBert model)"),EPe.forEach(t),zJo=i(J),HF=n(J,"LI",{});var CPe=s(HF);P_e=n(CPe,"STRONG",{});var cEt=s(P_e);QJo=r(cEt,"rembert"),cEt.forEach(t),WJo=r(CPe," \u2014 "),xz=n(CPe,"A",{href:!0});var mEt=s(xz);HJo=r(mEt,"RemBertForTokenClassification"),mEt.forEach(t),UJo=r(CPe," (RemBERT model)"),CPe.forEach(t),JJo=i(J),UF=n(J,"LI",{});var wPe=s(UF);B_e=n(wPe,"STRONG",{});var fEt=s(B_e);YJo=r(fEt,"roberta"),fEt.forEach(t),KJo=r(wPe," \u2014 "),$z=n(wPe,"A",{href:!0});var gEt=s($z);ZJo=r(gEt,"RobertaForTokenClassification"),gEt.forEach(t),eYo=r(wPe," (RoBERTa model)"),wPe.forEach(t),oYo=i(J),JF=n(J,"LI",{});var APe=s(JF);I_e=n(APe,"STRONG",{});var hEt=s(I_e);rYo=r(hEt,"roformer"),hEt.forEach(t),tYo=r(APe," \u2014 "),kz=n(APe,"A",{href:!0});var uEt=s(kz);aYo=r(uEt,"RoFormerForTokenClassification"),uEt.forEach(t),nYo=r(APe," (RoFormer model)"),APe.forEach(t),sYo=i(J),YF=n(J,"LI",{});var LPe=s(YF);N_e=n(LPe,"STRONG",{});var pEt=s(N_e);lYo=r(pEt,"squeezebert"),pEt.forEach(t),iYo=r(LPe," \u2014 "),Sz=n(LPe,"A",{href:!0});var _Et=s(Sz);dYo=r(_Et,"SqueezeBertForTokenClassification"),_Et.forEach(t),cYo=r(LPe," (SqueezeBERT model)"),LPe.forEach(t),mYo=i(J),KF=n(J,"LI",{});var yPe=s(KF);q_e=n(yPe,"STRONG",{});var bEt=s(q_e);fYo=r(bEt,"xlm"),bEt.forEach(t),gYo=r(yPe," \u2014 "),Rz=n(yPe,"A",{href:!0});var vEt=s(Rz);hYo=r(vEt,"XLMForTokenClassification"),vEt.forEach(t),uYo=r(yPe," (XLM model)"),yPe.forEach(t),pYo=i(J),ZF=n(J,"LI",{});var xPe=s(ZF);j_e=n(xPe,"STRONG",{});var FEt=s(j_e);_Yo=r(FEt,"xlm-roberta"),FEt.forEach(t),bYo=r(xPe," \u2014 "),Pz=n(xPe,"A",{href:!0});var TEt=s(Pz);vYo=r(TEt,"XLMRobertaForTokenClassification"),TEt.forEach(t),FYo=r(xPe," (XLM-RoBERTa model)"),xPe.forEach(t),TYo=i(J),eT=n(J,"LI",{});var $Pe=s(eT);D_e=n($Pe,"STRONG",{});var MEt=s(D_e);MYo=r(MEt,"xlm-roberta-xl"),MEt.forEach(t),EYo=r($Pe," \u2014 "),Bz=n($Pe,"A",{href:!0});var EEt=s(Bz);CYo=r(EEt,"XLMRobertaXLForTokenClassification"),EEt.forEach(t),wYo=r($Pe," (XLM-RoBERTa-XL model)"),$Pe.forEach(t),AYo=i(J),oT=n(J,"LI",{});var kPe=s(oT);G_e=n(kPe,"STRONG",{});var CEt=s(G_e);LYo=r(CEt,"xlnet"),CEt.forEach(t),yYo=r(kPe," \u2014 "),Iz=n(kPe,"A",{href:!0});var wEt=s(Iz);xYo=r(wEt,"XLNetForTokenClassification"),wEt.forEach(t),$Yo=r(kPe," (XLNet model)"),kPe.forEach(t),kYo=i(J),rT=n(J,"LI",{});var SPe=s(rT);O_e=n(SPe,"STRONG",{});var AEt=s(O_e);SYo=r(AEt,"yoso"),AEt.forEach(t),RYo=r(SPe," \u2014 "),Nz=n(SPe,"A",{href:!0});var LEt=s(Nz);PYo=r(LEt,"YosoForTokenClassification"),LEt.forEach(t),BYo=r(SPe," (YOSO model)"),SPe.forEach(t),J.forEach(t),IYo=i(ha),tT=n(ha,"P",{});var RPe=s(tT);NYo=r(RPe,"The model is set in evaluation mode by default using "),V_e=n(RPe,"CODE",{});var yEt=s(V_e);qYo=r(yEt,"model.eval()"),yEt.forEach(t),jYo=r(RPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),X_e=n(RPe,"CODE",{});var xEt=s(X_e);DYo=r(xEt,"model.train()"),xEt.forEach(t),RPe.forEach(t),GYo=i(ha),T(aT.$$.fragment,ha),ha.forEach(t),ll.forEach(t),iVe=i(m),md=n(m,"H2",{class:!0});var hze=s(md);nT=n(hze,"A",{id:!0,class:!0,href:!0});var $Et=s(nT);z_e=n($Et,"SPAN",{});var kEt=s(z_e);T(t8.$$.fragment,kEt),kEt.forEach(t),$Et.forEach(t),OYo=i(hze),Q_e=n(hze,"SPAN",{});var SEt=s(Q_e);VYo=r(SEt,"AutoModelForQuestionAnswering"),SEt.forEach(t),hze.forEach(t),dVe=i(m),jo=n(m,"DIV",{class:!0});var il=s(jo);T(a8.$$.fragment,il),XYo=i(il),fd=n(il,"P",{});var dre=s(fd);zYo=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qz=n(dre,"A",{href:!0});var REt=s(qz);QYo=r(REt,"from_pretrained()"),REt.forEach(t),WYo=r(dre," class method or the "),jz=n(dre,"A",{href:!0});var PEt=s(jz);HYo=r(PEt,"from_config()"),PEt.forEach(t),UYo=r(dre,` class
method.`),dre.forEach(t),JYo=i(il),n8=n(il,"P",{});var uze=s(n8);YYo=r(uze,"This class cannot be instantiated directly using "),W_e=n(uze,"CODE",{});var BEt=s(W_e);KYo=r(BEt,"__init__()"),BEt.forEach(t),ZYo=r(uze," (throws an error)."),uze.forEach(t),eKo=i(il),ut=n(il,"DIV",{class:!0});var lL=s(ut);T(s8.$$.fragment,lL),oKo=i(lL),H_e=n(lL,"P",{});var IEt=s(H_e);rKo=r(IEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IEt.forEach(t),tKo=i(lL),gd=n(lL,"P",{});var cre=s(gd);aKo=r(cre,`Note:
Loading a model from its configuration file does `),U_e=n(cre,"STRONG",{});var NEt=s(U_e);nKo=r(NEt,"not"),NEt.forEach(t),sKo=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(cre,"A",{href:!0});var qEt=s(Dz);lKo=r(qEt,"from_pretrained()"),qEt.forEach(t),iKo=r(cre," to load the model weights."),cre.forEach(t),dKo=i(lL),T(sT.$$.fragment,lL),lL.forEach(t),cKo=i(il),no=n(il,"DIV",{class:!0});var ua=s(no);T(l8.$$.fragment,ua),mKo=i(ua),J_e=n(ua,"P",{});var jEt=s(J_e);fKo=r(jEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jEt.forEach(t),gKo=i(ua),Va=n(ua,"P",{});var iL=s(Va);hKo=r(iL,"The model class to instantiate is selected based on the "),Y_e=n(iL,"CODE",{});var DEt=s(Y_e);uKo=r(DEt,"model_type"),DEt.forEach(t),pKo=r(iL,` property of the config object (either
passed as an argument or loaded from `),K_e=n(iL,"CODE",{});var GEt=s(K_e);_Ko=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),bKo=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z_e=n(iL,"CODE",{});var OEt=s(Z_e);vKo=r(OEt,"pretrained_model_name_or_path"),OEt.forEach(t),FKo=r(iL,":"),iL.forEach(t),TKo=i(ua),V=n(ua,"UL",{});var X=s(V);lT=n(X,"LI",{});var PPe=s(lT);e2e=n(PPe,"STRONG",{});var VEt=s(e2e);MKo=r(VEt,"albert"),VEt.forEach(t),EKo=r(PPe," \u2014 "),Gz=n(PPe,"A",{href:!0});var XEt=s(Gz);CKo=r(XEt,"AlbertForQuestionAnswering"),XEt.forEach(t),wKo=r(PPe," (ALBERT model)"),PPe.forEach(t),AKo=i(X),iT=n(X,"LI",{});var BPe=s(iT);o2e=n(BPe,"STRONG",{});var zEt=s(o2e);LKo=r(zEt,"bart"),zEt.forEach(t),yKo=r(BPe," \u2014 "),Oz=n(BPe,"A",{href:!0});var QEt=s(Oz);xKo=r(QEt,"BartForQuestionAnswering"),QEt.forEach(t),$Ko=r(BPe," (BART model)"),BPe.forEach(t),kKo=i(X),dT=n(X,"LI",{});var IPe=s(dT);r2e=n(IPe,"STRONG",{});var WEt=s(r2e);SKo=r(WEt,"bert"),WEt.forEach(t),RKo=r(IPe," \u2014 "),Vz=n(IPe,"A",{href:!0});var HEt=s(Vz);PKo=r(HEt,"BertForQuestionAnswering"),HEt.forEach(t),BKo=r(IPe," (BERT model)"),IPe.forEach(t),IKo=i(X),cT=n(X,"LI",{});var NPe=s(cT);t2e=n(NPe,"STRONG",{});var UEt=s(t2e);NKo=r(UEt,"big_bird"),UEt.forEach(t),qKo=r(NPe," \u2014 "),Xz=n(NPe,"A",{href:!0});var JEt=s(Xz);jKo=r(JEt,"BigBirdForQuestionAnswering"),JEt.forEach(t),DKo=r(NPe," (BigBird model)"),NPe.forEach(t),GKo=i(X),mT=n(X,"LI",{});var qPe=s(mT);a2e=n(qPe,"STRONG",{});var YEt=s(a2e);OKo=r(YEt,"bigbird_pegasus"),YEt.forEach(t),VKo=r(qPe," \u2014 "),zz=n(qPe,"A",{href:!0});var KEt=s(zz);XKo=r(KEt,"BigBirdPegasusForQuestionAnswering"),KEt.forEach(t),zKo=r(qPe," (BigBird-Pegasus model)"),qPe.forEach(t),QKo=i(X),fT=n(X,"LI",{});var jPe=s(fT);n2e=n(jPe,"STRONG",{});var ZEt=s(n2e);WKo=r(ZEt,"camembert"),ZEt.forEach(t),HKo=r(jPe," \u2014 "),Qz=n(jPe,"A",{href:!0});var eCt=s(Qz);UKo=r(eCt,"CamembertForQuestionAnswering"),eCt.forEach(t),JKo=r(jPe," (CamemBERT model)"),jPe.forEach(t),YKo=i(X),gT=n(X,"LI",{});var DPe=s(gT);s2e=n(DPe,"STRONG",{});var oCt=s(s2e);KKo=r(oCt,"canine"),oCt.forEach(t),ZKo=r(DPe," \u2014 "),Wz=n(DPe,"A",{href:!0});var rCt=s(Wz);eZo=r(rCt,"CanineForQuestionAnswering"),rCt.forEach(t),oZo=r(DPe," (CANINE model)"),DPe.forEach(t),rZo=i(X),hT=n(X,"LI",{});var GPe=s(hT);l2e=n(GPe,"STRONG",{});var tCt=s(l2e);tZo=r(tCt,"convbert"),tCt.forEach(t),aZo=r(GPe," \u2014 "),Hz=n(GPe,"A",{href:!0});var aCt=s(Hz);nZo=r(aCt,"ConvBertForQuestionAnswering"),aCt.forEach(t),sZo=r(GPe," (ConvBERT model)"),GPe.forEach(t),lZo=i(X),uT=n(X,"LI",{});var OPe=s(uT);i2e=n(OPe,"STRONG",{});var nCt=s(i2e);iZo=r(nCt,"data2vec-text"),nCt.forEach(t),dZo=r(OPe," \u2014 "),Uz=n(OPe,"A",{href:!0});var sCt=s(Uz);cZo=r(sCt,"Data2VecTextForQuestionAnswering"),sCt.forEach(t),mZo=r(OPe," (Data2VecText model)"),OPe.forEach(t),fZo=i(X),pT=n(X,"LI",{});var VPe=s(pT);d2e=n(VPe,"STRONG",{});var lCt=s(d2e);gZo=r(lCt,"deberta"),lCt.forEach(t),hZo=r(VPe," \u2014 "),Jz=n(VPe,"A",{href:!0});var iCt=s(Jz);uZo=r(iCt,"DebertaForQuestionAnswering"),iCt.forEach(t),pZo=r(VPe," (DeBERTa model)"),VPe.forEach(t),_Zo=i(X),_T=n(X,"LI",{});var XPe=s(_T);c2e=n(XPe,"STRONG",{});var dCt=s(c2e);bZo=r(dCt,"deberta-v2"),dCt.forEach(t),vZo=r(XPe," \u2014 "),Yz=n(XPe,"A",{href:!0});var cCt=s(Yz);FZo=r(cCt,"DebertaV2ForQuestionAnswering"),cCt.forEach(t),TZo=r(XPe," (DeBERTa-v2 model)"),XPe.forEach(t),MZo=i(X),bT=n(X,"LI",{});var zPe=s(bT);m2e=n(zPe,"STRONG",{});var mCt=s(m2e);EZo=r(mCt,"distilbert"),mCt.forEach(t),CZo=r(zPe," \u2014 "),Kz=n(zPe,"A",{href:!0});var fCt=s(Kz);wZo=r(fCt,"DistilBertForQuestionAnswering"),fCt.forEach(t),AZo=r(zPe," (DistilBERT model)"),zPe.forEach(t),LZo=i(X),vT=n(X,"LI",{});var QPe=s(vT);f2e=n(QPe,"STRONG",{});var gCt=s(f2e);yZo=r(gCt,"electra"),gCt.forEach(t),xZo=r(QPe," \u2014 "),Zz=n(QPe,"A",{href:!0});var hCt=s(Zz);$Zo=r(hCt,"ElectraForQuestionAnswering"),hCt.forEach(t),kZo=r(QPe," (ELECTRA model)"),QPe.forEach(t),SZo=i(X),FT=n(X,"LI",{});var WPe=s(FT);g2e=n(WPe,"STRONG",{});var uCt=s(g2e);RZo=r(uCt,"flaubert"),uCt.forEach(t),PZo=r(WPe," \u2014 "),eQ=n(WPe,"A",{href:!0});var pCt=s(eQ);BZo=r(pCt,"FlaubertForQuestionAnsweringSimple"),pCt.forEach(t),IZo=r(WPe," (FlauBERT model)"),WPe.forEach(t),NZo=i(X),TT=n(X,"LI",{});var HPe=s(TT);h2e=n(HPe,"STRONG",{});var _Ct=s(h2e);qZo=r(_Ct,"fnet"),_Ct.forEach(t),jZo=r(HPe," \u2014 "),oQ=n(HPe,"A",{href:!0});var bCt=s(oQ);DZo=r(bCt,"FNetForQuestionAnswering"),bCt.forEach(t),GZo=r(HPe," (FNet model)"),HPe.forEach(t),OZo=i(X),MT=n(X,"LI",{});var UPe=s(MT);u2e=n(UPe,"STRONG",{});var vCt=s(u2e);VZo=r(vCt,"funnel"),vCt.forEach(t),XZo=r(UPe," \u2014 "),rQ=n(UPe,"A",{href:!0});var FCt=s(rQ);zZo=r(FCt,"FunnelForQuestionAnswering"),FCt.forEach(t),QZo=r(UPe," (Funnel Transformer model)"),UPe.forEach(t),WZo=i(X),ET=n(X,"LI",{});var JPe=s(ET);p2e=n(JPe,"STRONG",{});var TCt=s(p2e);HZo=r(TCt,"gptj"),TCt.forEach(t),UZo=r(JPe," \u2014 "),tQ=n(JPe,"A",{href:!0});var MCt=s(tQ);JZo=r(MCt,"GPTJForQuestionAnswering"),MCt.forEach(t),YZo=r(JPe," (GPT-J model)"),JPe.forEach(t),KZo=i(X),CT=n(X,"LI",{});var YPe=s(CT);_2e=n(YPe,"STRONG",{});var ECt=s(_2e);ZZo=r(ECt,"ibert"),ECt.forEach(t),eer=r(YPe," \u2014 "),aQ=n(YPe,"A",{href:!0});var CCt=s(aQ);oer=r(CCt,"IBertForQuestionAnswering"),CCt.forEach(t),rer=r(YPe," (I-BERT model)"),YPe.forEach(t),ter=i(X),wT=n(X,"LI",{});var KPe=s(wT);b2e=n(KPe,"STRONG",{});var wCt=s(b2e);aer=r(wCt,"layoutlmv2"),wCt.forEach(t),ner=r(KPe," \u2014 "),nQ=n(KPe,"A",{href:!0});var ACt=s(nQ);ser=r(ACt,"LayoutLMv2ForQuestionAnswering"),ACt.forEach(t),ler=r(KPe," (LayoutLMv2 model)"),KPe.forEach(t),ier=i(X),AT=n(X,"LI",{});var ZPe=s(AT);v2e=n(ZPe,"STRONG",{});var LCt=s(v2e);der=r(LCt,"layoutlmv3"),LCt.forEach(t),cer=r(ZPe," \u2014 "),sQ=n(ZPe,"A",{href:!0});var yCt=s(sQ);mer=r(yCt,"LayoutLMv3ForQuestionAnswering"),yCt.forEach(t),fer=r(ZPe," (LayoutLMv3 model)"),ZPe.forEach(t),ger=i(X),LT=n(X,"LI",{});var eBe=s(LT);F2e=n(eBe,"STRONG",{});var xCt=s(F2e);her=r(xCt,"led"),xCt.forEach(t),uer=r(eBe," \u2014 "),lQ=n(eBe,"A",{href:!0});var $Ct=s(lQ);per=r($Ct,"LEDForQuestionAnswering"),$Ct.forEach(t),_er=r(eBe," (LED model)"),eBe.forEach(t),ber=i(X),yT=n(X,"LI",{});var oBe=s(yT);T2e=n(oBe,"STRONG",{});var kCt=s(T2e);ver=r(kCt,"longformer"),kCt.forEach(t),Fer=r(oBe," \u2014 "),iQ=n(oBe,"A",{href:!0});var SCt=s(iQ);Ter=r(SCt,"LongformerForQuestionAnswering"),SCt.forEach(t),Mer=r(oBe," (Longformer model)"),oBe.forEach(t),Eer=i(X),xT=n(X,"LI",{});var rBe=s(xT);M2e=n(rBe,"STRONG",{});var RCt=s(M2e);Cer=r(RCt,"lxmert"),RCt.forEach(t),wer=r(rBe," \u2014 "),dQ=n(rBe,"A",{href:!0});var PCt=s(dQ);Aer=r(PCt,"LxmertForQuestionAnswering"),PCt.forEach(t),Ler=r(rBe," (LXMERT model)"),rBe.forEach(t),yer=i(X),$T=n(X,"LI",{});var tBe=s($T);E2e=n(tBe,"STRONG",{});var BCt=s(E2e);xer=r(BCt,"mbart"),BCt.forEach(t),$er=r(tBe," \u2014 "),cQ=n(tBe,"A",{href:!0});var ICt=s(cQ);ker=r(ICt,"MBartForQuestionAnswering"),ICt.forEach(t),Ser=r(tBe," (mBART model)"),tBe.forEach(t),Rer=i(X),kT=n(X,"LI",{});var aBe=s(kT);C2e=n(aBe,"STRONG",{});var NCt=s(C2e);Per=r(NCt,"megatron-bert"),NCt.forEach(t),Ber=r(aBe," \u2014 "),mQ=n(aBe,"A",{href:!0});var qCt=s(mQ);Ier=r(qCt,"MegatronBertForQuestionAnswering"),qCt.forEach(t),Ner=r(aBe," (Megatron-BERT model)"),aBe.forEach(t),qer=i(X),ST=n(X,"LI",{});var nBe=s(ST);w2e=n(nBe,"STRONG",{});var jCt=s(w2e);jer=r(jCt,"mobilebert"),jCt.forEach(t),Der=r(nBe," \u2014 "),fQ=n(nBe,"A",{href:!0});var DCt=s(fQ);Ger=r(DCt,"MobileBertForQuestionAnswering"),DCt.forEach(t),Oer=r(nBe," (MobileBERT model)"),nBe.forEach(t),Ver=i(X),RT=n(X,"LI",{});var sBe=s(RT);A2e=n(sBe,"STRONG",{});var GCt=s(A2e);Xer=r(GCt,"mpnet"),GCt.forEach(t),zer=r(sBe," \u2014 "),gQ=n(sBe,"A",{href:!0});var OCt=s(gQ);Qer=r(OCt,"MPNetForQuestionAnswering"),OCt.forEach(t),Wer=r(sBe," (MPNet model)"),sBe.forEach(t),Her=i(X),PT=n(X,"LI",{});var lBe=s(PT);L2e=n(lBe,"STRONG",{});var VCt=s(L2e);Uer=r(VCt,"nezha"),VCt.forEach(t),Jer=r(lBe," \u2014 "),hQ=n(lBe,"A",{href:!0});var XCt=s(hQ);Yer=r(XCt,"NezhaForQuestionAnswering"),XCt.forEach(t),Ker=r(lBe," (Nezha model)"),lBe.forEach(t),Zer=i(X),BT=n(X,"LI",{});var iBe=s(BT);y2e=n(iBe,"STRONG",{});var zCt=s(y2e);eor=r(zCt,"nystromformer"),zCt.forEach(t),oor=r(iBe," \u2014 "),uQ=n(iBe,"A",{href:!0});var QCt=s(uQ);ror=r(QCt,"NystromformerForQuestionAnswering"),QCt.forEach(t),tor=r(iBe," (Nystr\xF6mformer model)"),iBe.forEach(t),aor=i(X),IT=n(X,"LI",{});var dBe=s(IT);x2e=n(dBe,"STRONG",{});var WCt=s(x2e);nor=r(WCt,"qdqbert"),WCt.forEach(t),sor=r(dBe," \u2014 "),pQ=n(dBe,"A",{href:!0});var HCt=s(pQ);lor=r(HCt,"QDQBertForQuestionAnswering"),HCt.forEach(t),ior=r(dBe," (QDQBert model)"),dBe.forEach(t),dor=i(X),NT=n(X,"LI",{});var cBe=s(NT);$2e=n(cBe,"STRONG",{});var UCt=s($2e);cor=r(UCt,"reformer"),UCt.forEach(t),mor=r(cBe," \u2014 "),_Q=n(cBe,"A",{href:!0});var JCt=s(_Q);gor=r(JCt,"ReformerForQuestionAnswering"),JCt.forEach(t),hor=r(cBe," (Reformer model)"),cBe.forEach(t),uor=i(X),qT=n(X,"LI",{});var mBe=s(qT);k2e=n(mBe,"STRONG",{});var YCt=s(k2e);por=r(YCt,"rembert"),YCt.forEach(t),_or=r(mBe," \u2014 "),bQ=n(mBe,"A",{href:!0});var KCt=s(bQ);bor=r(KCt,"RemBertForQuestionAnswering"),KCt.forEach(t),vor=r(mBe," (RemBERT model)"),mBe.forEach(t),For=i(X),jT=n(X,"LI",{});var fBe=s(jT);S2e=n(fBe,"STRONG",{});var ZCt=s(S2e);Tor=r(ZCt,"roberta"),ZCt.forEach(t),Mor=r(fBe," \u2014 "),vQ=n(fBe,"A",{href:!0});var e3t=s(vQ);Eor=r(e3t,"RobertaForQuestionAnswering"),e3t.forEach(t),Cor=r(fBe," (RoBERTa model)"),fBe.forEach(t),wor=i(X),DT=n(X,"LI",{});var gBe=s(DT);R2e=n(gBe,"STRONG",{});var o3t=s(R2e);Aor=r(o3t,"roformer"),o3t.forEach(t),Lor=r(gBe," \u2014 "),FQ=n(gBe,"A",{href:!0});var r3t=s(FQ);yor=r(r3t,"RoFormerForQuestionAnswering"),r3t.forEach(t),xor=r(gBe," (RoFormer model)"),gBe.forEach(t),$or=i(X),GT=n(X,"LI",{});var hBe=s(GT);P2e=n(hBe,"STRONG",{});var t3t=s(P2e);kor=r(t3t,"splinter"),t3t.forEach(t),Sor=r(hBe," \u2014 "),TQ=n(hBe,"A",{href:!0});var a3t=s(TQ);Ror=r(a3t,"SplinterForQuestionAnswering"),a3t.forEach(t),Por=r(hBe," (Splinter model)"),hBe.forEach(t),Bor=i(X),OT=n(X,"LI",{});var uBe=s(OT);B2e=n(uBe,"STRONG",{});var n3t=s(B2e);Ior=r(n3t,"squeezebert"),n3t.forEach(t),Nor=r(uBe," \u2014 "),MQ=n(uBe,"A",{href:!0});var s3t=s(MQ);qor=r(s3t,"SqueezeBertForQuestionAnswering"),s3t.forEach(t),jor=r(uBe," (SqueezeBERT model)"),uBe.forEach(t),Dor=i(X),VT=n(X,"LI",{});var pBe=s(VT);I2e=n(pBe,"STRONG",{});var l3t=s(I2e);Gor=r(l3t,"xlm"),l3t.forEach(t),Oor=r(pBe," \u2014 "),EQ=n(pBe,"A",{href:!0});var i3t=s(EQ);Vor=r(i3t,"XLMForQuestionAnsweringSimple"),i3t.forEach(t),Xor=r(pBe," (XLM model)"),pBe.forEach(t),zor=i(X),XT=n(X,"LI",{});var _Be=s(XT);N2e=n(_Be,"STRONG",{});var d3t=s(N2e);Qor=r(d3t,"xlm-roberta"),d3t.forEach(t),Wor=r(_Be," \u2014 "),CQ=n(_Be,"A",{href:!0});var c3t=s(CQ);Hor=r(c3t,"XLMRobertaForQuestionAnswering"),c3t.forEach(t),Uor=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),Jor=i(X),zT=n(X,"LI",{});var bBe=s(zT);q2e=n(bBe,"STRONG",{});var m3t=s(q2e);Yor=r(m3t,"xlm-roberta-xl"),m3t.forEach(t),Kor=r(bBe," \u2014 "),wQ=n(bBe,"A",{href:!0});var f3t=s(wQ);Zor=r(f3t,"XLMRobertaXLForQuestionAnswering"),f3t.forEach(t),err=r(bBe," (XLM-RoBERTa-XL model)"),bBe.forEach(t),orr=i(X),QT=n(X,"LI",{});var vBe=s(QT);j2e=n(vBe,"STRONG",{});var g3t=s(j2e);rrr=r(g3t,"xlnet"),g3t.forEach(t),trr=r(vBe," \u2014 "),AQ=n(vBe,"A",{href:!0});var h3t=s(AQ);arr=r(h3t,"XLNetForQuestionAnsweringSimple"),h3t.forEach(t),nrr=r(vBe," (XLNet model)"),vBe.forEach(t),srr=i(X),WT=n(X,"LI",{});var FBe=s(WT);D2e=n(FBe,"STRONG",{});var u3t=s(D2e);lrr=r(u3t,"yoso"),u3t.forEach(t),irr=r(FBe," \u2014 "),LQ=n(FBe,"A",{href:!0});var p3t=s(LQ);drr=r(p3t,"YosoForQuestionAnswering"),p3t.forEach(t),crr=r(FBe," (YOSO model)"),FBe.forEach(t),X.forEach(t),mrr=i(ua),HT=n(ua,"P",{});var TBe=s(HT);frr=r(TBe,"The model is set in evaluation mode by default using "),G2e=n(TBe,"CODE",{});var _3t=s(G2e);grr=r(_3t,"model.eval()"),_3t.forEach(t),hrr=r(TBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=n(TBe,"CODE",{});var b3t=s(O2e);urr=r(b3t,"model.train()"),b3t.forEach(t),TBe.forEach(t),prr=i(ua),T(UT.$$.fragment,ua),ua.forEach(t),il.forEach(t),cVe=i(m),hd=n(m,"H2",{class:!0});var pze=s(hd);JT=n(pze,"A",{id:!0,class:!0,href:!0});var v3t=s(JT);V2e=n(v3t,"SPAN",{});var F3t=s(V2e);T(i8.$$.fragment,F3t),F3t.forEach(t),v3t.forEach(t),_rr=i(pze),X2e=n(pze,"SPAN",{});var T3t=s(X2e);brr=r(T3t,"AutoModelForTableQuestionAnswering"),T3t.forEach(t),pze.forEach(t),mVe=i(m),Do=n(m,"DIV",{class:!0});var dl=s(Do);T(d8.$$.fragment,dl),vrr=i(dl),ud=n(dl,"P",{});var mre=s(ud);Frr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yQ=n(mre,"A",{href:!0});var M3t=s(yQ);Trr=r(M3t,"from_pretrained()"),M3t.forEach(t),Mrr=r(mre," class method or the "),xQ=n(mre,"A",{href:!0});var E3t=s(xQ);Err=r(E3t,"from_config()"),E3t.forEach(t),Crr=r(mre,` class
method.`),mre.forEach(t),wrr=i(dl),c8=n(dl,"P",{});var _ze=s(c8);Arr=r(_ze,"This class cannot be instantiated directly using "),z2e=n(_ze,"CODE",{});var C3t=s(z2e);Lrr=r(C3t,"__init__()"),C3t.forEach(t),yrr=r(_ze," (throws an error)."),_ze.forEach(t),xrr=i(dl),pt=n(dl,"DIV",{class:!0});var dL=s(pt);T(m8.$$.fragment,dL),$rr=i(dL),Q2e=n(dL,"P",{});var w3t=s(Q2e);krr=r(w3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),w3t.forEach(t),Srr=i(dL),pd=n(dL,"P",{});var fre=s(pd);Rrr=r(fre,`Note:
Loading a model from its configuration file does `),W2e=n(fre,"STRONG",{});var A3t=s(W2e);Prr=r(A3t,"not"),A3t.forEach(t),Brr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(fre,"A",{href:!0});var L3t=s($Q);Irr=r(L3t,"from_pretrained()"),L3t.forEach(t),Nrr=r(fre," to load the model weights."),fre.forEach(t),qrr=i(dL),T(YT.$$.fragment,dL),dL.forEach(t),jrr=i(dl),so=n(dl,"DIV",{class:!0});var pa=s(so);T(f8.$$.fragment,pa),Drr=i(pa),H2e=n(pa,"P",{});var y3t=s(H2e);Grr=r(y3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),y3t.forEach(t),Orr=i(pa),Xa=n(pa,"P",{});var cL=s(Xa);Vrr=r(cL,"The model class to instantiate is selected based on the "),U2e=n(cL,"CODE",{});var x3t=s(U2e);Xrr=r(x3t,"model_type"),x3t.forEach(t),zrr=r(cL,` property of the config object (either
passed as an argument or loaded from `),J2e=n(cL,"CODE",{});var $3t=s(J2e);Qrr=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),Wrr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(cL,"CODE",{});var k3t=s(Y2e);Hrr=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),Urr=r(cL,":"),cL.forEach(t),Jrr=i(pa),K2e=n(pa,"UL",{});var S3t=s(K2e);KT=n(S3t,"LI",{});var MBe=s(KT);Z2e=n(MBe,"STRONG",{});var R3t=s(Z2e);Yrr=r(R3t,"tapas"),R3t.forEach(t),Krr=r(MBe," \u2014 "),kQ=n(MBe,"A",{href:!0});var P3t=s(kQ);Zrr=r(P3t,"TapasForQuestionAnswering"),P3t.forEach(t),etr=r(MBe," (TAPAS model)"),MBe.forEach(t),S3t.forEach(t),otr=i(pa),ZT=n(pa,"P",{});var EBe=s(ZT);rtr=r(EBe,"The model is set in evaluation mode by default using "),ebe=n(EBe,"CODE",{});var B3t=s(ebe);ttr=r(B3t,"model.eval()"),B3t.forEach(t),atr=r(EBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),obe=n(EBe,"CODE",{});var I3t=s(obe);ntr=r(I3t,"model.train()"),I3t.forEach(t),EBe.forEach(t),str=i(pa),T(eM.$$.fragment,pa),pa.forEach(t),dl.forEach(t),fVe=i(m),_d=n(m,"H2",{class:!0});var bze=s(_d);oM=n(bze,"A",{id:!0,class:!0,href:!0});var N3t=s(oM);rbe=n(N3t,"SPAN",{});var q3t=s(rbe);T(g8.$$.fragment,q3t),q3t.forEach(t),N3t.forEach(t),ltr=i(bze),tbe=n(bze,"SPAN",{});var j3t=s(tbe);itr=r(j3t,"AutoModelForImageClassification"),j3t.forEach(t),bze.forEach(t),gVe=i(m),Go=n(m,"DIV",{class:!0});var cl=s(Go);T(h8.$$.fragment,cl),dtr=i(cl),bd=n(cl,"P",{});var gre=s(bd);ctr=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SQ=n(gre,"A",{href:!0});var D3t=s(SQ);mtr=r(D3t,"from_pretrained()"),D3t.forEach(t),ftr=r(gre," class method or the "),RQ=n(gre,"A",{href:!0});var G3t=s(RQ);gtr=r(G3t,"from_config()"),G3t.forEach(t),htr=r(gre,` class
method.`),gre.forEach(t),utr=i(cl),u8=n(cl,"P",{});var vze=s(u8);ptr=r(vze,"This class cannot be instantiated directly using "),abe=n(vze,"CODE",{});var O3t=s(abe);_tr=r(O3t,"__init__()"),O3t.forEach(t),btr=r(vze," (throws an error)."),vze.forEach(t),vtr=i(cl),_t=n(cl,"DIV",{class:!0});var mL=s(_t);T(p8.$$.fragment,mL),Ftr=i(mL),nbe=n(mL,"P",{});var V3t=s(nbe);Ttr=r(V3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),V3t.forEach(t),Mtr=i(mL),vd=n(mL,"P",{});var hre=s(vd);Etr=r(hre,`Note:
Loading a model from its configuration file does `),sbe=n(hre,"STRONG",{});var X3t=s(sbe);Ctr=r(X3t,"not"),X3t.forEach(t),wtr=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(hre,"A",{href:!0});var z3t=s(PQ);Atr=r(z3t,"from_pretrained()"),z3t.forEach(t),Ltr=r(hre," to load the model weights."),hre.forEach(t),ytr=i(mL),T(rM.$$.fragment,mL),mL.forEach(t),xtr=i(cl),lo=n(cl,"DIV",{class:!0});var _a=s(lo);T(_8.$$.fragment,_a),$tr=i(_a),lbe=n(_a,"P",{});var Q3t=s(lbe);ktr=r(Q3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Q3t.forEach(t),Str=i(_a),za=n(_a,"P",{});var fL=s(za);Rtr=r(fL,"The model class to instantiate is selected based on the "),ibe=n(fL,"CODE",{});var W3t=s(ibe);Ptr=r(W3t,"model_type"),W3t.forEach(t),Btr=r(fL,` property of the config object (either
passed as an argument or loaded from `),dbe=n(fL,"CODE",{});var H3t=s(dbe);Itr=r(H3t,"pretrained_model_name_or_path"),H3t.forEach(t),Ntr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cbe=n(fL,"CODE",{});var U3t=s(cbe);qtr=r(U3t,"pretrained_model_name_or_path"),U3t.forEach(t),jtr=r(fL,":"),fL.forEach(t),Dtr=i(_a),Fe=n(_a,"UL",{});var Te=s(Fe);tM=n(Te,"LI",{});var CBe=s(tM);mbe=n(CBe,"STRONG",{});var J3t=s(mbe);Gtr=r(J3t,"beit"),J3t.forEach(t),Otr=r(CBe," \u2014 "),BQ=n(CBe,"A",{href:!0});var Y3t=s(BQ);Vtr=r(Y3t,"BeitForImageClassification"),Y3t.forEach(t),Xtr=r(CBe," (BEiT model)"),CBe.forEach(t),ztr=i(Te),aM=n(Te,"LI",{});var wBe=s(aM);fbe=n(wBe,"STRONG",{});var K3t=s(fbe);Qtr=r(K3t,"convnext"),K3t.forEach(t),Wtr=r(wBe," \u2014 "),IQ=n(wBe,"A",{href:!0});var Z3t=s(IQ);Htr=r(Z3t,"ConvNextForImageClassification"),Z3t.forEach(t),Utr=r(wBe," (ConvNeXT model)"),wBe.forEach(t),Jtr=i(Te),nM=n(Te,"LI",{});var ABe=s(nM);gbe=n(ABe,"STRONG",{});var e5t=s(gbe);Ytr=r(e5t,"cvt"),e5t.forEach(t),Ktr=r(ABe," \u2014 "),NQ=n(ABe,"A",{href:!0});var o5t=s(NQ);Ztr=r(o5t,"CvtForImageClassification"),o5t.forEach(t),ear=r(ABe," (CvT model)"),ABe.forEach(t),oar=i(Te),sM=n(Te,"LI",{});var LBe=s(sM);hbe=n(LBe,"STRONG",{});var r5t=s(hbe);rar=r(r5t,"data2vec-vision"),r5t.forEach(t),tar=r(LBe," \u2014 "),qQ=n(LBe,"A",{href:!0});var t5t=s(qQ);aar=r(t5t,"Data2VecVisionForImageClassification"),t5t.forEach(t),nar=r(LBe," (Data2VecVision model)"),LBe.forEach(t),sar=i(Te),Qs=n(Te,"LI",{});var fS=s(Qs);ube=n(fS,"STRONG",{});var a5t=s(ube);lar=r(a5t,"deit"),a5t.forEach(t),iar=r(fS," \u2014 "),jQ=n(fS,"A",{href:!0});var n5t=s(jQ);dar=r(n5t,"DeiTForImageClassification"),n5t.forEach(t),car=r(fS," or "),DQ=n(fS,"A",{href:!0});var s5t=s(DQ);mar=r(s5t,"DeiTForImageClassificationWithTeacher"),s5t.forEach(t),far=r(fS," (DeiT model)"),fS.forEach(t),gar=i(Te),lM=n(Te,"LI",{});var yBe=s(lM);pbe=n(yBe,"STRONG",{});var l5t=s(pbe);har=r(l5t,"imagegpt"),l5t.forEach(t),uar=r(yBe," \u2014 "),GQ=n(yBe,"A",{href:!0});var i5t=s(GQ);par=r(i5t,"ImageGPTForImageClassification"),i5t.forEach(t),_ar=r(yBe," (ImageGPT model)"),yBe.forEach(t),bar=i(Te),Ws=n(Te,"LI",{});var gS=s(Ws);_be=n(gS,"STRONG",{});var d5t=s(_be);Far=r(d5t,"levit"),d5t.forEach(t),Tar=r(gS," \u2014 "),OQ=n(gS,"A",{href:!0});var c5t=s(OQ);Mar=r(c5t,"LevitForImageClassification"),c5t.forEach(t),Ear=r(gS," or "),VQ=n(gS,"A",{href:!0});var m5t=s(VQ);Car=r(m5t,"LevitForImageClassificationWithTeacher"),m5t.forEach(t),war=r(gS," (LeViT model)"),gS.forEach(t),Aar=i(Te),bt=n(Te,"LI",{});var xm=s(bt);bbe=n(xm,"STRONG",{});var f5t=s(bbe);Lar=r(f5t,"perceiver"),f5t.forEach(t),yar=r(xm," \u2014 "),XQ=n(xm,"A",{href:!0});var g5t=s(XQ);xar=r(g5t,"PerceiverForImageClassificationLearned"),g5t.forEach(t),$ar=r(xm," or "),zQ=n(xm,"A",{href:!0});var h5t=s(zQ);kar=r(h5t,"PerceiverForImageClassificationFourier"),h5t.forEach(t),Sar=r(xm," or "),QQ=n(xm,"A",{href:!0});var u5t=s(QQ);Rar=r(u5t,"PerceiverForImageClassificationConvProcessing"),u5t.forEach(t),Par=r(xm," (Perceiver model)"),xm.forEach(t),Bar=i(Te),iM=n(Te,"LI",{});var xBe=s(iM);vbe=n(xBe,"STRONG",{});var p5t=s(vbe);Iar=r(p5t,"poolformer"),p5t.forEach(t),Nar=r(xBe," \u2014 "),WQ=n(xBe,"A",{href:!0});var _5t=s(WQ);qar=r(_5t,"PoolFormerForImageClassification"),_5t.forEach(t),jar=r(xBe," (PoolFormer model)"),xBe.forEach(t),Dar=i(Te),dM=n(Te,"LI",{});var $Be=s(dM);Fbe=n($Be,"STRONG",{});var b5t=s(Fbe);Gar=r(b5t,"regnet"),b5t.forEach(t),Oar=r($Be," \u2014 "),HQ=n($Be,"A",{href:!0});var v5t=s(HQ);Var=r(v5t,"RegNetForImageClassification"),v5t.forEach(t),Xar=r($Be," (RegNet model)"),$Be.forEach(t),zar=i(Te),cM=n(Te,"LI",{});var kBe=s(cM);Tbe=n(kBe,"STRONG",{});var F5t=s(Tbe);Qar=r(F5t,"resnet"),F5t.forEach(t),War=r(kBe," \u2014 "),UQ=n(kBe,"A",{href:!0});var T5t=s(UQ);Har=r(T5t,"ResNetForImageClassification"),T5t.forEach(t),Uar=r(kBe," (ResNet model)"),kBe.forEach(t),Jar=i(Te),mM=n(Te,"LI",{});var SBe=s(mM);Mbe=n(SBe,"STRONG",{});var M5t=s(Mbe);Yar=r(M5t,"segformer"),M5t.forEach(t),Kar=r(SBe," \u2014 "),JQ=n(SBe,"A",{href:!0});var E5t=s(JQ);Zar=r(E5t,"SegformerForImageClassification"),E5t.forEach(t),enr=r(SBe," (SegFormer model)"),SBe.forEach(t),onr=i(Te),fM=n(Te,"LI",{});var RBe=s(fM);Ebe=n(RBe,"STRONG",{});var C5t=s(Ebe);rnr=r(C5t,"swin"),C5t.forEach(t),tnr=r(RBe," \u2014 "),YQ=n(RBe,"A",{href:!0});var w5t=s(YQ);anr=r(w5t,"SwinForImageClassification"),w5t.forEach(t),nnr=r(RBe," (Swin Transformer model)"),RBe.forEach(t),snr=i(Te),gM=n(Te,"LI",{});var PBe=s(gM);Cbe=n(PBe,"STRONG",{});var A5t=s(Cbe);lnr=r(A5t,"van"),A5t.forEach(t),inr=r(PBe," \u2014 "),KQ=n(PBe,"A",{href:!0});var L5t=s(KQ);dnr=r(L5t,"VanForImageClassification"),L5t.forEach(t),cnr=r(PBe," (VAN model)"),PBe.forEach(t),mnr=i(Te),hM=n(Te,"LI",{});var BBe=s(hM);wbe=n(BBe,"STRONG",{});var y5t=s(wbe);fnr=r(y5t,"vit"),y5t.forEach(t),gnr=r(BBe," \u2014 "),ZQ=n(BBe,"A",{href:!0});var x5t=s(ZQ);hnr=r(x5t,"ViTForImageClassification"),x5t.forEach(t),unr=r(BBe," (ViT model)"),BBe.forEach(t),Te.forEach(t),pnr=i(_a),uM=n(_a,"P",{});var IBe=s(uM);_nr=r(IBe,"The model is set in evaluation mode by default using "),Abe=n(IBe,"CODE",{});var $5t=s(Abe);bnr=r($5t,"model.eval()"),$5t.forEach(t),vnr=r(IBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lbe=n(IBe,"CODE",{});var k5t=s(Lbe);Fnr=r(k5t,"model.train()"),k5t.forEach(t),IBe.forEach(t),Tnr=i(_a),T(pM.$$.fragment,_a),_a.forEach(t),cl.forEach(t),hVe=i(m),Fd=n(m,"H2",{class:!0});var Fze=s(Fd);_M=n(Fze,"A",{id:!0,class:!0,href:!0});var S5t=s(_M);ybe=n(S5t,"SPAN",{});var R5t=s(ybe);T(b8.$$.fragment,R5t),R5t.forEach(t),S5t.forEach(t),Mnr=i(Fze),xbe=n(Fze,"SPAN",{});var P5t=s(xbe);Enr=r(P5t,"AutoModelForVision2Seq"),P5t.forEach(t),Fze.forEach(t),uVe=i(m),Oo=n(m,"DIV",{class:!0});var ml=s(Oo);T(v8.$$.fragment,ml),Cnr=i(ml),Td=n(ml,"P",{});var ure=s(Td);wnr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eW=n(ure,"A",{href:!0});var B5t=s(eW);Anr=r(B5t,"from_pretrained()"),B5t.forEach(t),Lnr=r(ure," class method or the "),oW=n(ure,"A",{href:!0});var I5t=s(oW);ynr=r(I5t,"from_config()"),I5t.forEach(t),xnr=r(ure,` class
method.`),ure.forEach(t),$nr=i(ml),F8=n(ml,"P",{});var Tze=s(F8);knr=r(Tze,"This class cannot be instantiated directly using "),$be=n(Tze,"CODE",{});var N5t=s($be);Snr=r(N5t,"__init__()"),N5t.forEach(t),Rnr=r(Tze," (throws an error)."),Tze.forEach(t),Pnr=i(ml),vt=n(ml,"DIV",{class:!0});var gL=s(vt);T(T8.$$.fragment,gL),Bnr=i(gL),kbe=n(gL,"P",{});var q5t=s(kbe);Inr=r(q5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),q5t.forEach(t),Nnr=i(gL),Md=n(gL,"P",{});var pre=s(Md);qnr=r(pre,`Note:
Loading a model from its configuration file does `),Sbe=n(pre,"STRONG",{});var j5t=s(Sbe);jnr=r(j5t,"not"),j5t.forEach(t),Dnr=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(pre,"A",{href:!0});var D5t=s(rW);Gnr=r(D5t,"from_pretrained()"),D5t.forEach(t),Onr=r(pre," to load the model weights."),pre.forEach(t),Vnr=i(gL),T(bM.$$.fragment,gL),gL.forEach(t),Xnr=i(ml),io=n(ml,"DIV",{class:!0});var ba=s(io);T(M8.$$.fragment,ba),znr=i(ba),Rbe=n(ba,"P",{});var G5t=s(Rbe);Qnr=r(G5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),G5t.forEach(t),Wnr=i(ba),Qa=n(ba,"P",{});var hL=s(Qa);Hnr=r(hL,"The model class to instantiate is selected based on the "),Pbe=n(hL,"CODE",{});var O5t=s(Pbe);Unr=r(O5t,"model_type"),O5t.forEach(t),Jnr=r(hL,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(hL,"CODE",{});var V5t=s(Bbe);Ynr=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),Knr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ibe=n(hL,"CODE",{});var X5t=s(Ibe);Znr=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),esr=r(hL,":"),hL.forEach(t),osr=i(ba),Nbe=n(ba,"UL",{});var z5t=s(Nbe);vM=n(z5t,"LI",{});var NBe=s(vM);qbe=n(NBe,"STRONG",{});var Q5t=s(qbe);rsr=r(Q5t,"vision-encoder-decoder"),Q5t.forEach(t),tsr=r(NBe," \u2014 "),tW=n(NBe,"A",{href:!0});var W5t=s(tW);asr=r(W5t,"VisionEncoderDecoderModel"),W5t.forEach(t),nsr=r(NBe," (Vision Encoder decoder model)"),NBe.forEach(t),z5t.forEach(t),ssr=i(ba),FM=n(ba,"P",{});var qBe=s(FM);lsr=r(qBe,"The model is set in evaluation mode by default using "),jbe=n(qBe,"CODE",{});var H5t=s(jbe);isr=r(H5t,"model.eval()"),H5t.forEach(t),dsr=r(qBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dbe=n(qBe,"CODE",{});var U5t=s(Dbe);csr=r(U5t,"model.train()"),U5t.forEach(t),qBe.forEach(t),msr=i(ba),T(TM.$$.fragment,ba),ba.forEach(t),ml.forEach(t),pVe=i(m),Ed=n(m,"H2",{class:!0});var Mze=s(Ed);MM=n(Mze,"A",{id:!0,class:!0,href:!0});var J5t=s(MM);Gbe=n(J5t,"SPAN",{});var Y5t=s(Gbe);T(E8.$$.fragment,Y5t),Y5t.forEach(t),J5t.forEach(t),fsr=i(Mze),Obe=n(Mze,"SPAN",{});var K5t=s(Obe);gsr=r(K5t,"AutoModelForVisualQuestionAnswering"),K5t.forEach(t),Mze.forEach(t),_Ve=i(m),Vo=n(m,"DIV",{class:!0});var fl=s(Vo);T(C8.$$.fragment,fl),hsr=i(fl),Cd=n(fl,"P",{});var _re=s(Cd);usr=r(_re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),aW=n(_re,"A",{href:!0});var Z5t=s(aW);psr=r(Z5t,"from_pretrained()"),Z5t.forEach(t),_sr=r(_re," class method or the "),nW=n(_re,"A",{href:!0});var e0t=s(nW);bsr=r(e0t,"from_config()"),e0t.forEach(t),vsr=r(_re,` class
method.`),_re.forEach(t),Fsr=i(fl),w8=n(fl,"P",{});var Eze=s(w8);Tsr=r(Eze,"This class cannot be instantiated directly using "),Vbe=n(Eze,"CODE",{});var o0t=s(Vbe);Msr=r(o0t,"__init__()"),o0t.forEach(t),Esr=r(Eze," (throws an error)."),Eze.forEach(t),Csr=i(fl),Ft=n(fl,"DIV",{class:!0});var uL=s(Ft);T(A8.$$.fragment,uL),wsr=i(uL),Xbe=n(uL,"P",{});var r0t=s(Xbe);Asr=r(r0t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),r0t.forEach(t),Lsr=i(uL),wd=n(uL,"P",{});var bre=s(wd);ysr=r(bre,`Note:
Loading a model from its configuration file does `),zbe=n(bre,"STRONG",{});var t0t=s(zbe);xsr=r(t0t,"not"),t0t.forEach(t),$sr=r(bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(bre,"A",{href:!0});var a0t=s(sW);ksr=r(a0t,"from_pretrained()"),a0t.forEach(t),Ssr=r(bre," to load the model weights."),bre.forEach(t),Rsr=i(uL),T(EM.$$.fragment,uL),uL.forEach(t),Psr=i(fl),co=n(fl,"DIV",{class:!0});var va=s(co);T(L8.$$.fragment,va),Bsr=i(va),Qbe=n(va,"P",{});var n0t=s(Qbe);Isr=r(n0t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),n0t.forEach(t),Nsr=i(va),Wa=n(va,"P",{});var pL=s(Wa);qsr=r(pL,"The model class to instantiate is selected based on the "),Wbe=n(pL,"CODE",{});var s0t=s(Wbe);jsr=r(s0t,"model_type"),s0t.forEach(t),Dsr=r(pL,` property of the config object (either
passed as an argument or loaded from `),Hbe=n(pL,"CODE",{});var l0t=s(Hbe);Gsr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),Osr=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ube=n(pL,"CODE",{});var i0t=s(Ube);Vsr=r(i0t,"pretrained_model_name_or_path"),i0t.forEach(t),Xsr=r(pL,":"),pL.forEach(t),zsr=i(va),Jbe=n(va,"UL",{});var d0t=s(Jbe);CM=n(d0t,"LI",{});var jBe=s(CM);Ybe=n(jBe,"STRONG",{});var c0t=s(Ybe);Qsr=r(c0t,"vilt"),c0t.forEach(t),Wsr=r(jBe," \u2014 "),lW=n(jBe,"A",{href:!0});var m0t=s(lW);Hsr=r(m0t,"ViltForQuestionAnswering"),m0t.forEach(t),Usr=r(jBe," (ViLT model)"),jBe.forEach(t),d0t.forEach(t),Jsr=i(va),wM=n(va,"P",{});var DBe=s(wM);Ysr=r(DBe,"The model is set in evaluation mode by default using "),Kbe=n(DBe,"CODE",{});var f0t=s(Kbe);Ksr=r(f0t,"model.eval()"),f0t.forEach(t),Zsr=r(DBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zbe=n(DBe,"CODE",{});var g0t=s(Zbe);elr=r(g0t,"model.train()"),g0t.forEach(t),DBe.forEach(t),olr=i(va),T(AM.$$.fragment,va),va.forEach(t),fl.forEach(t),bVe=i(m),Ad=n(m,"H2",{class:!0});var Cze=s(Ad);LM=n(Cze,"A",{id:!0,class:!0,href:!0});var h0t=s(LM);eve=n(h0t,"SPAN",{});var u0t=s(eve);T(y8.$$.fragment,u0t),u0t.forEach(t),h0t.forEach(t),rlr=i(Cze),ove=n(Cze,"SPAN",{});var p0t=s(ove);tlr=r(p0t,"AutoModelForAudioClassification"),p0t.forEach(t),Cze.forEach(t),vVe=i(m),Xo=n(m,"DIV",{class:!0});var gl=s(Xo);T(x8.$$.fragment,gl),alr=i(gl),Ld=n(gl,"P",{});var vre=s(Ld);nlr=r(vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),iW=n(vre,"A",{href:!0});var _0t=s(iW);slr=r(_0t,"from_pretrained()"),_0t.forEach(t),llr=r(vre," class method or the "),dW=n(vre,"A",{href:!0});var b0t=s(dW);ilr=r(b0t,"from_config()"),b0t.forEach(t),dlr=r(vre,` class
method.`),vre.forEach(t),clr=i(gl),$8=n(gl,"P",{});var wze=s($8);mlr=r(wze,"This class cannot be instantiated directly using "),rve=n(wze,"CODE",{});var v0t=s(rve);flr=r(v0t,"__init__()"),v0t.forEach(t),glr=r(wze," (throws an error)."),wze.forEach(t),hlr=i(gl),Tt=n(gl,"DIV",{class:!0});var _L=s(Tt);T(k8.$$.fragment,_L),ulr=i(_L),tve=n(_L,"P",{});var F0t=s(tve);plr=r(F0t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),F0t.forEach(t),_lr=i(_L),yd=n(_L,"P",{});var Fre=s(yd);blr=r(Fre,`Note:
Loading a model from its configuration file does `),ave=n(Fre,"STRONG",{});var T0t=s(ave);vlr=r(T0t,"not"),T0t.forEach(t),Flr=r(Fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Fre,"A",{href:!0});var M0t=s(cW);Tlr=r(M0t,"from_pretrained()"),M0t.forEach(t),Mlr=r(Fre," to load the model weights."),Fre.forEach(t),Elr=i(_L),T(yM.$$.fragment,_L),_L.forEach(t),Clr=i(gl),mo=n(gl,"DIV",{class:!0});var Fa=s(mo);T(S8.$$.fragment,Fa),wlr=i(Fa),nve=n(Fa,"P",{});var E0t=s(nve);Alr=r(E0t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),E0t.forEach(t),Llr=i(Fa),Ha=n(Fa,"P",{});var bL=s(Ha);ylr=r(bL,"The model class to instantiate is selected based on the "),sve=n(bL,"CODE",{});var C0t=s(sve);xlr=r(C0t,"model_type"),C0t.forEach(t),$lr=r(bL,` property of the config object (either
passed as an argument or loaded from `),lve=n(bL,"CODE",{});var w0t=s(lve);klr=r(w0t,"pretrained_model_name_or_path"),w0t.forEach(t),Slr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=n(bL,"CODE",{});var A0t=s(ive);Rlr=r(A0t,"pretrained_model_name_or_path"),A0t.forEach(t),Plr=r(bL,":"),bL.forEach(t),Blr=i(Fa),Pe=n(Fa,"UL",{});var ze=s(Pe);xM=n(ze,"LI",{});var GBe=s(xM);dve=n(GBe,"STRONG",{});var L0t=s(dve);Ilr=r(L0t,"data2vec-audio"),L0t.forEach(t),Nlr=r(GBe," \u2014 "),mW=n(GBe,"A",{href:!0});var y0t=s(mW);qlr=r(y0t,"Data2VecAudioForSequenceClassification"),y0t.forEach(t),jlr=r(GBe," (Data2VecAudio model)"),GBe.forEach(t),Dlr=i(ze),$M=n(ze,"LI",{});var OBe=s($M);cve=n(OBe,"STRONG",{});var x0t=s(cve);Glr=r(x0t,"hubert"),x0t.forEach(t),Olr=r(OBe," \u2014 "),fW=n(OBe,"A",{href:!0});var $0t=s(fW);Vlr=r($0t,"HubertForSequenceClassification"),$0t.forEach(t),Xlr=r(OBe," (Hubert model)"),OBe.forEach(t),zlr=i(ze),kM=n(ze,"LI",{});var VBe=s(kM);mve=n(VBe,"STRONG",{});var k0t=s(mve);Qlr=r(k0t,"sew"),k0t.forEach(t),Wlr=r(VBe," \u2014 "),gW=n(VBe,"A",{href:!0});var S0t=s(gW);Hlr=r(S0t,"SEWForSequenceClassification"),S0t.forEach(t),Ulr=r(VBe," (SEW model)"),VBe.forEach(t),Jlr=i(ze),SM=n(ze,"LI",{});var XBe=s(SM);fve=n(XBe,"STRONG",{});var R0t=s(fve);Ylr=r(R0t,"sew-d"),R0t.forEach(t),Klr=r(XBe," \u2014 "),hW=n(XBe,"A",{href:!0});var P0t=s(hW);Zlr=r(P0t,"SEWDForSequenceClassification"),P0t.forEach(t),eir=r(XBe," (SEW-D model)"),XBe.forEach(t),oir=i(ze),RM=n(ze,"LI",{});var zBe=s(RM);gve=n(zBe,"STRONG",{});var B0t=s(gve);rir=r(B0t,"unispeech"),B0t.forEach(t),tir=r(zBe," \u2014 "),uW=n(zBe,"A",{href:!0});var I0t=s(uW);air=r(I0t,"UniSpeechForSequenceClassification"),I0t.forEach(t),nir=r(zBe," (UniSpeech model)"),zBe.forEach(t),sir=i(ze),PM=n(ze,"LI",{});var QBe=s(PM);hve=n(QBe,"STRONG",{});var N0t=s(hve);lir=r(N0t,"unispeech-sat"),N0t.forEach(t),iir=r(QBe," \u2014 "),pW=n(QBe,"A",{href:!0});var q0t=s(pW);dir=r(q0t,"UniSpeechSatForSequenceClassification"),q0t.forEach(t),cir=r(QBe," (UniSpeechSat model)"),QBe.forEach(t),mir=i(ze),BM=n(ze,"LI",{});var WBe=s(BM);uve=n(WBe,"STRONG",{});var j0t=s(uve);fir=r(j0t,"wav2vec2"),j0t.forEach(t),gir=r(WBe," \u2014 "),_W=n(WBe,"A",{href:!0});var D0t=s(_W);hir=r(D0t,"Wav2Vec2ForSequenceClassification"),D0t.forEach(t),uir=r(WBe," (Wav2Vec2 model)"),WBe.forEach(t),pir=i(ze),IM=n(ze,"LI",{});var HBe=s(IM);pve=n(HBe,"STRONG",{});var G0t=s(pve);_ir=r(G0t,"wav2vec2-conformer"),G0t.forEach(t),bir=r(HBe," \u2014 "),bW=n(HBe,"A",{href:!0});var O0t=s(bW);vir=r(O0t,"Wav2Vec2ConformerForSequenceClassification"),O0t.forEach(t),Fir=r(HBe," (Wav2Vec2-Conformer model)"),HBe.forEach(t),Tir=i(ze),NM=n(ze,"LI",{});var UBe=s(NM);_ve=n(UBe,"STRONG",{});var V0t=s(_ve);Mir=r(V0t,"wavlm"),V0t.forEach(t),Eir=r(UBe," \u2014 "),vW=n(UBe,"A",{href:!0});var X0t=s(vW);Cir=r(X0t,"WavLMForSequenceClassification"),X0t.forEach(t),wir=r(UBe," (WavLM model)"),UBe.forEach(t),ze.forEach(t),Air=i(Fa),qM=n(Fa,"P",{});var JBe=s(qM);Lir=r(JBe,"The model is set in evaluation mode by default using "),bve=n(JBe,"CODE",{});var z0t=s(bve);yir=r(z0t,"model.eval()"),z0t.forEach(t),xir=r(JBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vve=n(JBe,"CODE",{});var Q0t=s(vve);$ir=r(Q0t,"model.train()"),Q0t.forEach(t),JBe.forEach(t),kir=i(Fa),T(jM.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),FVe=i(m),xd=n(m,"H2",{class:!0});var Aze=s(xd);DM=n(Aze,"A",{id:!0,class:!0,href:!0});var W0t=s(DM);Fve=n(W0t,"SPAN",{});var H0t=s(Fve);T(R8.$$.fragment,H0t),H0t.forEach(t),W0t.forEach(t),Sir=i(Aze),Tve=n(Aze,"SPAN",{});var U0t=s(Tve);Rir=r(U0t,"AutoModelForAudioFrameClassification"),U0t.forEach(t),Aze.forEach(t),TVe=i(m),zo=n(m,"DIV",{class:!0});var hl=s(zo);T(P8.$$.fragment,hl),Pir=i(hl),$d=n(hl,"P",{});var Tre=s($d);Bir=r(Tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FW=n(Tre,"A",{href:!0});var J0t=s(FW);Iir=r(J0t,"from_pretrained()"),J0t.forEach(t),Nir=r(Tre," class method or the "),TW=n(Tre,"A",{href:!0});var Y0t=s(TW);qir=r(Y0t,"from_config()"),Y0t.forEach(t),jir=r(Tre,` class
method.`),Tre.forEach(t),Dir=i(hl),B8=n(hl,"P",{});var Lze=s(B8);Gir=r(Lze,"This class cannot be instantiated directly using "),Mve=n(Lze,"CODE",{});var K0t=s(Mve);Oir=r(K0t,"__init__()"),K0t.forEach(t),Vir=r(Lze," (throws an error)."),Lze.forEach(t),Xir=i(hl),Mt=n(hl,"DIV",{class:!0});var vL=s(Mt);T(I8.$$.fragment,vL),zir=i(vL),Eve=n(vL,"P",{});var Z0t=s(Eve);Qir=r(Z0t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Z0t.forEach(t),Wir=i(vL),kd=n(vL,"P",{});var Mre=s(kd);Hir=r(Mre,`Note:
Loading a model from its configuration file does `),Cve=n(Mre,"STRONG",{});var ewt=s(Cve);Uir=r(ewt,"not"),ewt.forEach(t),Jir=r(Mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(Mre,"A",{href:!0});var owt=s(MW);Yir=r(owt,"from_pretrained()"),owt.forEach(t),Kir=r(Mre," to load the model weights."),Mre.forEach(t),Zir=i(vL),T(GM.$$.fragment,vL),vL.forEach(t),edr=i(hl),fo=n(hl,"DIV",{class:!0});var Ta=s(fo);T(N8.$$.fragment,Ta),odr=i(Ta),wve=n(Ta,"P",{});var rwt=s(wve);rdr=r(rwt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rwt.forEach(t),tdr=i(Ta),Ua=n(Ta,"P",{});var FL=s(Ua);adr=r(FL,"The model class to instantiate is selected based on the "),Ave=n(FL,"CODE",{});var twt=s(Ave);ndr=r(twt,"model_type"),twt.forEach(t),sdr=r(FL,` property of the config object (either
passed as an argument or loaded from `),Lve=n(FL,"CODE",{});var awt=s(Lve);ldr=r(awt,"pretrained_model_name_or_path"),awt.forEach(t),idr=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(FL,"CODE",{});var nwt=s(yve);ddr=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),cdr=r(FL,":"),FL.forEach(t),mdr=i(Ta),et=n(Ta,"UL",{});var ul=s(et);OM=n(ul,"LI",{});var YBe=s(OM);xve=n(YBe,"STRONG",{});var swt=s(xve);fdr=r(swt,"data2vec-audio"),swt.forEach(t),gdr=r(YBe," \u2014 "),EW=n(YBe,"A",{href:!0});var lwt=s(EW);hdr=r(lwt,"Data2VecAudioForAudioFrameClassification"),lwt.forEach(t),udr=r(YBe," (Data2VecAudio model)"),YBe.forEach(t),pdr=i(ul),VM=n(ul,"LI",{});var KBe=s(VM);$ve=n(KBe,"STRONG",{});var iwt=s($ve);_dr=r(iwt,"unispeech-sat"),iwt.forEach(t),bdr=r(KBe," \u2014 "),CW=n(KBe,"A",{href:!0});var dwt=s(CW);vdr=r(dwt,"UniSpeechSatForAudioFrameClassification"),dwt.forEach(t),Fdr=r(KBe," (UniSpeechSat model)"),KBe.forEach(t),Tdr=i(ul),XM=n(ul,"LI",{});var ZBe=s(XM);kve=n(ZBe,"STRONG",{});var cwt=s(kve);Mdr=r(cwt,"wav2vec2"),cwt.forEach(t),Edr=r(ZBe," \u2014 "),wW=n(ZBe,"A",{href:!0});var mwt=s(wW);Cdr=r(mwt,"Wav2Vec2ForAudioFrameClassification"),mwt.forEach(t),wdr=r(ZBe," (Wav2Vec2 model)"),ZBe.forEach(t),Adr=i(ul),zM=n(ul,"LI",{});var eIe=s(zM);Sve=n(eIe,"STRONG",{});var fwt=s(Sve);Ldr=r(fwt,"wav2vec2-conformer"),fwt.forEach(t),ydr=r(eIe," \u2014 "),AW=n(eIe,"A",{href:!0});var gwt=s(AW);xdr=r(gwt,"Wav2Vec2ConformerForAudioFrameClassification"),gwt.forEach(t),$dr=r(eIe," (Wav2Vec2-Conformer model)"),eIe.forEach(t),kdr=i(ul),QM=n(ul,"LI",{});var oIe=s(QM);Rve=n(oIe,"STRONG",{});var hwt=s(Rve);Sdr=r(hwt,"wavlm"),hwt.forEach(t),Rdr=r(oIe," \u2014 "),LW=n(oIe,"A",{href:!0});var uwt=s(LW);Pdr=r(uwt,"WavLMForAudioFrameClassification"),uwt.forEach(t),Bdr=r(oIe," (WavLM model)"),oIe.forEach(t),ul.forEach(t),Idr=i(Ta),WM=n(Ta,"P",{});var rIe=s(WM);Ndr=r(rIe,"The model is set in evaluation mode by default using "),Pve=n(rIe,"CODE",{});var pwt=s(Pve);qdr=r(pwt,"model.eval()"),pwt.forEach(t),jdr=r(rIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bve=n(rIe,"CODE",{});var _wt=s(Bve);Ddr=r(_wt,"model.train()"),_wt.forEach(t),rIe.forEach(t),Gdr=i(Ta),T(HM.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),MVe=i(m),Sd=n(m,"H2",{class:!0});var yze=s(Sd);UM=n(yze,"A",{id:!0,class:!0,href:!0});var bwt=s(UM);Ive=n(bwt,"SPAN",{});var vwt=s(Ive);T(q8.$$.fragment,vwt),vwt.forEach(t),bwt.forEach(t),Odr=i(yze),Nve=n(yze,"SPAN",{});var Fwt=s(Nve);Vdr=r(Fwt,"AutoModelForCTC"),Fwt.forEach(t),yze.forEach(t),EVe=i(m),Qo=n(m,"DIV",{class:!0});var pl=s(Qo);T(j8.$$.fragment,pl),Xdr=i(pl),Rd=n(pl,"P",{});var Ere=s(Rd);zdr=r(Ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yW=n(Ere,"A",{href:!0});var Twt=s(yW);Qdr=r(Twt,"from_pretrained()"),Twt.forEach(t),Wdr=r(Ere," class method or the "),xW=n(Ere,"A",{href:!0});var Mwt=s(xW);Hdr=r(Mwt,"from_config()"),Mwt.forEach(t),Udr=r(Ere,` class
method.`),Ere.forEach(t),Jdr=i(pl),D8=n(pl,"P",{});var xze=s(D8);Ydr=r(xze,"This class cannot be instantiated directly using "),qve=n(xze,"CODE",{});var Ewt=s(qve);Kdr=r(Ewt,"__init__()"),Ewt.forEach(t),Zdr=r(xze," (throws an error)."),xze.forEach(t),ecr=i(pl),Et=n(pl,"DIV",{class:!0});var TL=s(Et);T(G8.$$.fragment,TL),ocr=i(TL),jve=n(TL,"P",{});var Cwt=s(jve);rcr=r(Cwt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Cwt.forEach(t),tcr=i(TL),Pd=n(TL,"P",{});var Cre=s(Pd);acr=r(Cre,`Note:
Loading a model from its configuration file does `),Dve=n(Cre,"STRONG",{});var wwt=s(Dve);ncr=r(wwt,"not"),wwt.forEach(t),scr=r(Cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(Cre,"A",{href:!0});var Awt=s($W);lcr=r(Awt,"from_pretrained()"),Awt.forEach(t),icr=r(Cre," to load the model weights."),Cre.forEach(t),dcr=i(TL),T(JM.$$.fragment,TL),TL.forEach(t),ccr=i(pl),go=n(pl,"DIV",{class:!0});var Ma=s(go);T(O8.$$.fragment,Ma),mcr=i(Ma),Gve=n(Ma,"P",{});var Lwt=s(Gve);fcr=r(Lwt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Lwt.forEach(t),gcr=i(Ma),Ja=n(Ma,"P",{});var ML=s(Ja);hcr=r(ML,"The model class to instantiate is selected based on the "),Ove=n(ML,"CODE",{});var ywt=s(Ove);ucr=r(ywt,"model_type"),ywt.forEach(t),pcr=r(ML,` property of the config object (either
passed as an argument or loaded from `),Vve=n(ML,"CODE",{});var xwt=s(Vve);_cr=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),bcr=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=n(ML,"CODE",{});var $wt=s(Xve);vcr=r($wt,"pretrained_model_name_or_path"),$wt.forEach(t),Fcr=r(ML,":"),ML.forEach(t),Tcr=i(Ma),Le=n(Ma,"UL",{});var Be=s(Le);YM=n(Be,"LI",{});var tIe=s(YM);zve=n(tIe,"STRONG",{});var kwt=s(zve);Mcr=r(kwt,"data2vec-audio"),kwt.forEach(t),Ecr=r(tIe," \u2014 "),kW=n(tIe,"A",{href:!0});var Swt=s(kW);Ccr=r(Swt,"Data2VecAudioForCTC"),Swt.forEach(t),wcr=r(tIe," (Data2VecAudio model)"),tIe.forEach(t),Acr=i(Be),KM=n(Be,"LI",{});var aIe=s(KM);Qve=n(aIe,"STRONG",{});var Rwt=s(Qve);Lcr=r(Rwt,"hubert"),Rwt.forEach(t),ycr=r(aIe," \u2014 "),SW=n(aIe,"A",{href:!0});var Pwt=s(SW);xcr=r(Pwt,"HubertForCTC"),Pwt.forEach(t),$cr=r(aIe," (Hubert model)"),aIe.forEach(t),kcr=i(Be),ZM=n(Be,"LI",{});var nIe=s(ZM);Wve=n(nIe,"STRONG",{});var Bwt=s(Wve);Scr=r(Bwt,"mctct"),Bwt.forEach(t),Rcr=r(nIe," \u2014 "),RW=n(nIe,"A",{href:!0});var Iwt=s(RW);Pcr=r(Iwt,"MCTCTForCTC"),Iwt.forEach(t),Bcr=r(nIe," (M-CTC-T model)"),nIe.forEach(t),Icr=i(Be),e4=n(Be,"LI",{});var sIe=s(e4);Hve=n(sIe,"STRONG",{});var Nwt=s(Hve);Ncr=r(Nwt,"sew"),Nwt.forEach(t),qcr=r(sIe," \u2014 "),PW=n(sIe,"A",{href:!0});var qwt=s(PW);jcr=r(qwt,"SEWForCTC"),qwt.forEach(t),Dcr=r(sIe," (SEW model)"),sIe.forEach(t),Gcr=i(Be),o4=n(Be,"LI",{});var lIe=s(o4);Uve=n(lIe,"STRONG",{});var jwt=s(Uve);Ocr=r(jwt,"sew-d"),jwt.forEach(t),Vcr=r(lIe," \u2014 "),BW=n(lIe,"A",{href:!0});var Dwt=s(BW);Xcr=r(Dwt,"SEWDForCTC"),Dwt.forEach(t),zcr=r(lIe," (SEW-D model)"),lIe.forEach(t),Qcr=i(Be),r4=n(Be,"LI",{});var iIe=s(r4);Jve=n(iIe,"STRONG",{});var Gwt=s(Jve);Wcr=r(Gwt,"unispeech"),Gwt.forEach(t),Hcr=r(iIe," \u2014 "),IW=n(iIe,"A",{href:!0});var Owt=s(IW);Ucr=r(Owt,"UniSpeechForCTC"),Owt.forEach(t),Jcr=r(iIe," (UniSpeech model)"),iIe.forEach(t),Ycr=i(Be),t4=n(Be,"LI",{});var dIe=s(t4);Yve=n(dIe,"STRONG",{});var Vwt=s(Yve);Kcr=r(Vwt,"unispeech-sat"),Vwt.forEach(t),Zcr=r(dIe," \u2014 "),NW=n(dIe,"A",{href:!0});var Xwt=s(NW);emr=r(Xwt,"UniSpeechSatForCTC"),Xwt.forEach(t),omr=r(dIe," (UniSpeechSat model)"),dIe.forEach(t),rmr=i(Be),a4=n(Be,"LI",{});var cIe=s(a4);Kve=n(cIe,"STRONG",{});var zwt=s(Kve);tmr=r(zwt,"wav2vec2"),zwt.forEach(t),amr=r(cIe," \u2014 "),qW=n(cIe,"A",{href:!0});var Qwt=s(qW);nmr=r(Qwt,"Wav2Vec2ForCTC"),Qwt.forEach(t),smr=r(cIe," (Wav2Vec2 model)"),cIe.forEach(t),lmr=i(Be),n4=n(Be,"LI",{});var mIe=s(n4);Zve=n(mIe,"STRONG",{});var Wwt=s(Zve);imr=r(Wwt,"wav2vec2-conformer"),Wwt.forEach(t),dmr=r(mIe," \u2014 "),jW=n(mIe,"A",{href:!0});var Hwt=s(jW);cmr=r(Hwt,"Wav2Vec2ConformerForCTC"),Hwt.forEach(t),mmr=r(mIe," (Wav2Vec2-Conformer model)"),mIe.forEach(t),fmr=i(Be),s4=n(Be,"LI",{});var fIe=s(s4);e1e=n(fIe,"STRONG",{});var Uwt=s(e1e);gmr=r(Uwt,"wavlm"),Uwt.forEach(t),hmr=r(fIe," \u2014 "),DW=n(fIe,"A",{href:!0});var Jwt=s(DW);umr=r(Jwt,"WavLMForCTC"),Jwt.forEach(t),pmr=r(fIe," (WavLM model)"),fIe.forEach(t),Be.forEach(t),_mr=i(Ma),l4=n(Ma,"P",{});var gIe=s(l4);bmr=r(gIe,"The model is set in evaluation mode by default using "),o1e=n(gIe,"CODE",{});var Ywt=s(o1e);vmr=r(Ywt,"model.eval()"),Ywt.forEach(t),Fmr=r(gIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),r1e=n(gIe,"CODE",{});var Kwt=s(r1e);Tmr=r(Kwt,"model.train()"),Kwt.forEach(t),gIe.forEach(t),Mmr=i(Ma),T(i4.$$.fragment,Ma),Ma.forEach(t),pl.forEach(t),CVe=i(m),Bd=n(m,"H2",{class:!0});var $ze=s(Bd);d4=n($ze,"A",{id:!0,class:!0,href:!0});var Zwt=s(d4);t1e=n(Zwt,"SPAN",{});var eAt=s(t1e);T(V8.$$.fragment,eAt),eAt.forEach(t),Zwt.forEach(t),Emr=i($ze),a1e=n($ze,"SPAN",{});var oAt=s(a1e);Cmr=r(oAt,"AutoModelForSpeechSeq2Seq"),oAt.forEach(t),$ze.forEach(t),wVe=i(m),Wo=n(m,"DIV",{class:!0});var _l=s(Wo);T(X8.$$.fragment,_l),wmr=i(_l),Id=n(_l,"P",{});var wre=s(Id);Amr=r(wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),GW=n(wre,"A",{href:!0});var rAt=s(GW);Lmr=r(rAt,"from_pretrained()"),rAt.forEach(t),ymr=r(wre," class method or the "),OW=n(wre,"A",{href:!0});var tAt=s(OW);xmr=r(tAt,"from_config()"),tAt.forEach(t),$mr=r(wre,` class
method.`),wre.forEach(t),kmr=i(_l),z8=n(_l,"P",{});var kze=s(z8);Smr=r(kze,"This class cannot be instantiated directly using "),n1e=n(kze,"CODE",{});var aAt=s(n1e);Rmr=r(aAt,"__init__()"),aAt.forEach(t),Pmr=r(kze," (throws an error)."),kze.forEach(t),Bmr=i(_l),Ct=n(_l,"DIV",{class:!0});var EL=s(Ct);T(Q8.$$.fragment,EL),Imr=i(EL),s1e=n(EL,"P",{});var nAt=s(s1e);Nmr=r(nAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nAt.forEach(t),qmr=i(EL),Nd=n(EL,"P",{});var Are=s(Nd);jmr=r(Are,`Note:
Loading a model from its configuration file does `),l1e=n(Are,"STRONG",{});var sAt=s(l1e);Dmr=r(sAt,"not"),sAt.forEach(t),Gmr=r(Are,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(Are,"A",{href:!0});var lAt=s(VW);Omr=r(lAt,"from_pretrained()"),lAt.forEach(t),Vmr=r(Are," to load the model weights."),Are.forEach(t),Xmr=i(EL),T(c4.$$.fragment,EL),EL.forEach(t),zmr=i(_l),ho=n(_l,"DIV",{class:!0});var Ea=s(ho);T(W8.$$.fragment,Ea),Qmr=i(Ea),i1e=n(Ea,"P",{});var iAt=s(i1e);Wmr=r(iAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),iAt.forEach(t),Hmr=i(Ea),Ya=n(Ea,"P",{});var CL=s(Ya);Umr=r(CL,"The model class to instantiate is selected based on the "),d1e=n(CL,"CODE",{});var dAt=s(d1e);Jmr=r(dAt,"model_type"),dAt.forEach(t),Ymr=r(CL,` property of the config object (either
passed as an argument or loaded from `),c1e=n(CL,"CODE",{});var cAt=s(c1e);Kmr=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),Zmr=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=n(CL,"CODE",{});var mAt=s(m1e);efr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),ofr=r(CL,":"),CL.forEach(t),rfr=i(Ea),H8=n(Ea,"UL",{});var Sze=s(H8);m4=n(Sze,"LI",{});var hIe=s(m4);f1e=n(hIe,"STRONG",{});var fAt=s(f1e);tfr=r(fAt,"speech-encoder-decoder"),fAt.forEach(t),afr=r(hIe," \u2014 "),XW=n(hIe,"A",{href:!0});var gAt=s(XW);nfr=r(gAt,"SpeechEncoderDecoderModel"),gAt.forEach(t),sfr=r(hIe," (Speech Encoder decoder model)"),hIe.forEach(t),lfr=i(Sze),f4=n(Sze,"LI",{});var uIe=s(f4);g1e=n(uIe,"STRONG",{});var hAt=s(g1e);ifr=r(hAt,"speech_to_text"),hAt.forEach(t),dfr=r(uIe," \u2014 "),zW=n(uIe,"A",{href:!0});var uAt=s(zW);cfr=r(uAt,"Speech2TextForConditionalGeneration"),uAt.forEach(t),mfr=r(uIe," (Speech2Text model)"),uIe.forEach(t),Sze.forEach(t),ffr=i(Ea),g4=n(Ea,"P",{});var pIe=s(g4);gfr=r(pIe,"The model is set in evaluation mode by default using "),h1e=n(pIe,"CODE",{});var pAt=s(h1e);hfr=r(pAt,"model.eval()"),pAt.forEach(t),ufr=r(pIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=n(pIe,"CODE",{});var _At=s(u1e);pfr=r(_At,"model.train()"),_At.forEach(t),pIe.forEach(t),_fr=i(Ea),T(h4.$$.fragment,Ea),Ea.forEach(t),_l.forEach(t),AVe=i(m),qd=n(m,"H2",{class:!0});var Rze=s(qd);u4=n(Rze,"A",{id:!0,class:!0,href:!0});var bAt=s(u4);p1e=n(bAt,"SPAN",{});var vAt=s(p1e);T(U8.$$.fragment,vAt),vAt.forEach(t),bAt.forEach(t),bfr=i(Rze),_1e=n(Rze,"SPAN",{});var FAt=s(_1e);vfr=r(FAt,"AutoModelForAudioXVector"),FAt.forEach(t),Rze.forEach(t),LVe=i(m),Ho=n(m,"DIV",{class:!0});var bl=s(Ho);T(J8.$$.fragment,bl),Ffr=i(bl),jd=n(bl,"P",{});var Lre=s(jd);Tfr=r(Lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),QW=n(Lre,"A",{href:!0});var TAt=s(QW);Mfr=r(TAt,"from_pretrained()"),TAt.forEach(t),Efr=r(Lre," class method or the "),WW=n(Lre,"A",{href:!0});var MAt=s(WW);Cfr=r(MAt,"from_config()"),MAt.forEach(t),wfr=r(Lre,` class
method.`),Lre.forEach(t),Afr=i(bl),Y8=n(bl,"P",{});var Pze=s(Y8);Lfr=r(Pze,"This class cannot be instantiated directly using "),b1e=n(Pze,"CODE",{});var EAt=s(b1e);yfr=r(EAt,"__init__()"),EAt.forEach(t),xfr=r(Pze," (throws an error)."),Pze.forEach(t),$fr=i(bl),wt=n(bl,"DIV",{class:!0});var wL=s(wt);T(K8.$$.fragment,wL),kfr=i(wL),v1e=n(wL,"P",{});var CAt=s(v1e);Sfr=r(CAt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),CAt.forEach(t),Rfr=i(wL),Dd=n(wL,"P",{});var yre=s(Dd);Pfr=r(yre,`Note:
Loading a model from its configuration file does `),F1e=n(yre,"STRONG",{});var wAt=s(F1e);Bfr=r(wAt,"not"),wAt.forEach(t),Ifr=r(yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(yre,"A",{href:!0});var AAt=s(HW);Nfr=r(AAt,"from_pretrained()"),AAt.forEach(t),qfr=r(yre," to load the model weights."),yre.forEach(t),jfr=i(wL),T(p4.$$.fragment,wL),wL.forEach(t),Dfr=i(bl),uo=n(bl,"DIV",{class:!0});var Ca=s(uo);T(Z8.$$.fragment,Ca),Gfr=i(Ca),T1e=n(Ca,"P",{});var LAt=s(T1e);Ofr=r(LAt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),LAt.forEach(t),Vfr=i(Ca),Ka=n(Ca,"P",{});var AL=s(Ka);Xfr=r(AL,"The model class to instantiate is selected based on the "),M1e=n(AL,"CODE",{});var yAt=s(M1e);zfr=r(yAt,"model_type"),yAt.forEach(t),Qfr=r(AL,` property of the config object (either
passed as an argument or loaded from `),E1e=n(AL,"CODE",{});var xAt=s(E1e);Wfr=r(xAt,"pretrained_model_name_or_path"),xAt.forEach(t),Hfr=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(AL,"CODE",{});var $At=s(C1e);Ufr=r($At,"pretrained_model_name_or_path"),$At.forEach(t),Jfr=r(AL,":"),AL.forEach(t),Yfr=i(Ca),ot=n(Ca,"UL",{});var vl=s(ot);_4=n(vl,"LI",{});var _Ie=s(_4);w1e=n(_Ie,"STRONG",{});var kAt=s(w1e);Kfr=r(kAt,"data2vec-audio"),kAt.forEach(t),Zfr=r(_Ie," \u2014 "),UW=n(_Ie,"A",{href:!0});var SAt=s(UW);egr=r(SAt,"Data2VecAudioForXVector"),SAt.forEach(t),ogr=r(_Ie," (Data2VecAudio model)"),_Ie.forEach(t),rgr=i(vl),b4=n(vl,"LI",{});var bIe=s(b4);A1e=n(bIe,"STRONG",{});var RAt=s(A1e);tgr=r(RAt,"unispeech-sat"),RAt.forEach(t),agr=r(bIe," \u2014 "),JW=n(bIe,"A",{href:!0});var PAt=s(JW);ngr=r(PAt,"UniSpeechSatForXVector"),PAt.forEach(t),sgr=r(bIe," (UniSpeechSat model)"),bIe.forEach(t),lgr=i(vl),v4=n(vl,"LI",{});var vIe=s(v4);L1e=n(vIe,"STRONG",{});var BAt=s(L1e);igr=r(BAt,"wav2vec2"),BAt.forEach(t),dgr=r(vIe," \u2014 "),YW=n(vIe,"A",{href:!0});var IAt=s(YW);cgr=r(IAt,"Wav2Vec2ForXVector"),IAt.forEach(t),mgr=r(vIe," (Wav2Vec2 model)"),vIe.forEach(t),fgr=i(vl),F4=n(vl,"LI",{});var FIe=s(F4);y1e=n(FIe,"STRONG",{});var NAt=s(y1e);ggr=r(NAt,"wav2vec2-conformer"),NAt.forEach(t),hgr=r(FIe," \u2014 "),KW=n(FIe,"A",{href:!0});var qAt=s(KW);ugr=r(qAt,"Wav2Vec2ConformerForXVector"),qAt.forEach(t),pgr=r(FIe," (Wav2Vec2-Conformer model)"),FIe.forEach(t),_gr=i(vl),T4=n(vl,"LI",{});var TIe=s(T4);x1e=n(TIe,"STRONG",{});var jAt=s(x1e);bgr=r(jAt,"wavlm"),jAt.forEach(t),vgr=r(TIe," \u2014 "),ZW=n(TIe,"A",{href:!0});var DAt=s(ZW);Fgr=r(DAt,"WavLMForXVector"),DAt.forEach(t),Tgr=r(TIe," (WavLM model)"),TIe.forEach(t),vl.forEach(t),Mgr=i(Ca),M4=n(Ca,"P",{});var MIe=s(M4);Egr=r(MIe,"The model is set in evaluation mode by default using "),$1e=n(MIe,"CODE",{});var GAt=s($1e);Cgr=r(GAt,"model.eval()"),GAt.forEach(t),wgr=r(MIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k1e=n(MIe,"CODE",{});var OAt=s(k1e);Agr=r(OAt,"model.train()"),OAt.forEach(t),MIe.forEach(t),Lgr=i(Ca),T(E4.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),yVe=i(m),Gd=n(m,"H2",{class:!0});var Bze=s(Gd);C4=n(Bze,"A",{id:!0,class:!0,href:!0});var VAt=s(C4);S1e=n(VAt,"SPAN",{});var XAt=s(S1e);T(e9.$$.fragment,XAt),XAt.forEach(t),VAt.forEach(t),ygr=i(Bze),R1e=n(Bze,"SPAN",{});var zAt=s(R1e);xgr=r(zAt,"AutoModelForMaskedImageModeling"),zAt.forEach(t),Bze.forEach(t),xVe=i(m),Uo=n(m,"DIV",{class:!0});var Fl=s(Uo);T(o9.$$.fragment,Fl),$gr=i(Fl),Od=n(Fl,"P",{});var xre=s(Od);kgr=r(xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),eH=n(xre,"A",{href:!0});var QAt=s(eH);Sgr=r(QAt,"from_pretrained()"),QAt.forEach(t),Rgr=r(xre," class method or the "),oH=n(xre,"A",{href:!0});var WAt=s(oH);Pgr=r(WAt,"from_config()"),WAt.forEach(t),Bgr=r(xre,` class
method.`),xre.forEach(t),Igr=i(Fl),r9=n(Fl,"P",{});var Ize=s(r9);Ngr=r(Ize,"This class cannot be instantiated directly using "),P1e=n(Ize,"CODE",{});var HAt=s(P1e);qgr=r(HAt,"__init__()"),HAt.forEach(t),jgr=r(Ize," (throws an error)."),Ize.forEach(t),Dgr=i(Fl),At=n(Fl,"DIV",{class:!0});var LL=s(At);T(t9.$$.fragment,LL),Ggr=i(LL),B1e=n(LL,"P",{});var UAt=s(B1e);Ogr=r(UAt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),UAt.forEach(t),Vgr=i(LL),Vd=n(LL,"P",{});var $re=s(Vd);Xgr=r($re,`Note:
Loading a model from its configuration file does `),I1e=n($re,"STRONG",{});var JAt=s(I1e);zgr=r(JAt,"not"),JAt.forEach(t),Qgr=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n($re,"A",{href:!0});var YAt=s(rH);Wgr=r(YAt,"from_pretrained()"),YAt.forEach(t),Hgr=r($re," to load the model weights."),$re.forEach(t),Ugr=i(LL),T(w4.$$.fragment,LL),LL.forEach(t),Jgr=i(Fl),po=n(Fl,"DIV",{class:!0});var wa=s(po);T(a9.$$.fragment,wa),Ygr=i(wa),N1e=n(wa,"P",{});var KAt=s(N1e);Kgr=r(KAt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),KAt.forEach(t),Zgr=i(wa),Za=n(wa,"P",{});var yL=s(Za);ehr=r(yL,"The model class to instantiate is selected based on the "),q1e=n(yL,"CODE",{});var ZAt=s(q1e);ohr=r(ZAt,"model_type"),ZAt.forEach(t),rhr=r(yL,` property of the config object (either
passed as an argument or loaded from `),j1e=n(yL,"CODE",{});var e6t=s(j1e);thr=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),ahr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D1e=n(yL,"CODE",{});var o6t=s(D1e);nhr=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),shr=r(yL,":"),yL.forEach(t),lhr=i(wa),Xd=n(wa,"UL",{});var kre=s(Xd);A4=n(kre,"LI",{});var EIe=s(A4);G1e=n(EIe,"STRONG",{});var r6t=s(G1e);ihr=r(r6t,"deit"),r6t.forEach(t),dhr=r(EIe," \u2014 "),tH=n(EIe,"A",{href:!0});var t6t=s(tH);chr=r(t6t,"DeiTForMaskedImageModeling"),t6t.forEach(t),mhr=r(EIe," (DeiT model)"),EIe.forEach(t),fhr=i(kre),L4=n(kre,"LI",{});var CIe=s(L4);O1e=n(CIe,"STRONG",{});var a6t=s(O1e);ghr=r(a6t,"swin"),a6t.forEach(t),hhr=r(CIe," \u2014 "),aH=n(CIe,"A",{href:!0});var n6t=s(aH);uhr=r(n6t,"SwinForMaskedImageModeling"),n6t.forEach(t),phr=r(CIe," (Swin Transformer model)"),CIe.forEach(t),_hr=i(kre),y4=n(kre,"LI",{});var wIe=s(y4);V1e=n(wIe,"STRONG",{});var s6t=s(V1e);bhr=r(s6t,"vit"),s6t.forEach(t),vhr=r(wIe," \u2014 "),nH=n(wIe,"A",{href:!0});var l6t=s(nH);Fhr=r(l6t,"ViTForMaskedImageModeling"),l6t.forEach(t),Thr=r(wIe," (ViT model)"),wIe.forEach(t),kre.forEach(t),Mhr=i(wa),x4=n(wa,"P",{});var AIe=s(x4);Ehr=r(AIe,"The model is set in evaluation mode by default using "),X1e=n(AIe,"CODE",{});var i6t=s(X1e);Chr=r(i6t,"model.eval()"),i6t.forEach(t),whr=r(AIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=n(AIe,"CODE",{});var d6t=s(z1e);Ahr=r(d6t,"model.train()"),d6t.forEach(t),AIe.forEach(t),Lhr=i(wa),T($4.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),$Ve=i(m),zd=n(m,"H2",{class:!0});var Nze=s(zd);k4=n(Nze,"A",{id:!0,class:!0,href:!0});var c6t=s(k4);Q1e=n(c6t,"SPAN",{});var m6t=s(Q1e);T(n9.$$.fragment,m6t),m6t.forEach(t),c6t.forEach(t),yhr=i(Nze),W1e=n(Nze,"SPAN",{});var f6t=s(W1e);xhr=r(f6t,"AutoModelForObjectDetection"),f6t.forEach(t),Nze.forEach(t),kVe=i(m),Jo=n(m,"DIV",{class:!0});var Tl=s(Jo);T(s9.$$.fragment,Tl),$hr=i(Tl),Qd=n(Tl,"P",{});var Sre=s(Qd);khr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),sH=n(Sre,"A",{href:!0});var g6t=s(sH);Shr=r(g6t,"from_pretrained()"),g6t.forEach(t),Rhr=r(Sre," class method or the "),lH=n(Sre,"A",{href:!0});var h6t=s(lH);Phr=r(h6t,"from_config()"),h6t.forEach(t),Bhr=r(Sre,` class
method.`),Sre.forEach(t),Ihr=i(Tl),l9=n(Tl,"P",{});var qze=s(l9);Nhr=r(qze,"This class cannot be instantiated directly using "),H1e=n(qze,"CODE",{});var u6t=s(H1e);qhr=r(u6t,"__init__()"),u6t.forEach(t),jhr=r(qze," (throws an error)."),qze.forEach(t),Dhr=i(Tl),Lt=n(Tl,"DIV",{class:!0});var xL=s(Lt);T(i9.$$.fragment,xL),Ghr=i(xL),U1e=n(xL,"P",{});var p6t=s(U1e);Ohr=r(p6t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),p6t.forEach(t),Vhr=i(xL),Wd=n(xL,"P",{});var Rre=s(Wd);Xhr=r(Rre,`Note:
Loading a model from its configuration file does `),J1e=n(Rre,"STRONG",{});var _6t=s(J1e);zhr=r(_6t,"not"),_6t.forEach(t),Qhr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(Rre,"A",{href:!0});var b6t=s(iH);Whr=r(b6t,"from_pretrained()"),b6t.forEach(t),Hhr=r(Rre," to load the model weights."),Rre.forEach(t),Uhr=i(xL),T(S4.$$.fragment,xL),xL.forEach(t),Jhr=i(Tl),_o=n(Tl,"DIV",{class:!0});var Aa=s(_o);T(d9.$$.fragment,Aa),Yhr=i(Aa),Y1e=n(Aa,"P",{});var v6t=s(Y1e);Khr=r(v6t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),v6t.forEach(t),Zhr=i(Aa),en=n(Aa,"P",{});var $L=s(en);eur=r($L,"The model class to instantiate is selected based on the "),K1e=n($L,"CODE",{});var F6t=s(K1e);our=r(F6t,"model_type"),F6t.forEach(t),rur=r($L,` property of the config object (either
passed as an argument or loaded from `),Z1e=n($L,"CODE",{});var T6t=s(Z1e);tur=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),aur=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n($L,"CODE",{});var M6t=s(eFe);nur=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),sur=r($L,":"),$L.forEach(t),lur=i(Aa),c9=n(Aa,"UL",{});var jze=s(c9);R4=n(jze,"LI",{});var LIe=s(R4);oFe=n(LIe,"STRONG",{});var E6t=s(oFe);iur=r(E6t,"detr"),E6t.forEach(t),dur=r(LIe," \u2014 "),dH=n(LIe,"A",{href:!0});var C6t=s(dH);cur=r(C6t,"DetrForObjectDetection"),C6t.forEach(t),mur=r(LIe," (DETR model)"),LIe.forEach(t),fur=i(jze),P4=n(jze,"LI",{});var yIe=s(P4);rFe=n(yIe,"STRONG",{});var w6t=s(rFe);gur=r(w6t,"yolos"),w6t.forEach(t),hur=r(yIe," \u2014 "),cH=n(yIe,"A",{href:!0});var A6t=s(cH);uur=r(A6t,"YolosForObjectDetection"),A6t.forEach(t),pur=r(yIe," (YOLOS model)"),yIe.forEach(t),jze.forEach(t),_ur=i(Aa),B4=n(Aa,"P",{});var xIe=s(B4);bur=r(xIe,"The model is set in evaluation mode by default using "),tFe=n(xIe,"CODE",{});var L6t=s(tFe);vur=r(L6t,"model.eval()"),L6t.forEach(t),Fur=r(xIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aFe=n(xIe,"CODE",{});var y6t=s(aFe);Tur=r(y6t,"model.train()"),y6t.forEach(t),xIe.forEach(t),Mur=i(Aa),T(I4.$$.fragment,Aa),Aa.forEach(t),Tl.forEach(t),SVe=i(m),Hd=n(m,"H2",{class:!0});var Dze=s(Hd);N4=n(Dze,"A",{id:!0,class:!0,href:!0});var x6t=s(N4);nFe=n(x6t,"SPAN",{});var $6t=s(nFe);T(m9.$$.fragment,$6t),$6t.forEach(t),x6t.forEach(t),Eur=i(Dze),sFe=n(Dze,"SPAN",{});var k6t=s(sFe);Cur=r(k6t,"AutoModelForImageSegmentation"),k6t.forEach(t),Dze.forEach(t),RVe=i(m),Yo=n(m,"DIV",{class:!0});var Ml=s(Yo);T(f9.$$.fragment,Ml),wur=i(Ml),Ud=n(Ml,"P",{});var Pre=s(Ud);Aur=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mH=n(Pre,"A",{href:!0});var S6t=s(mH);Lur=r(S6t,"from_pretrained()"),S6t.forEach(t),yur=r(Pre," class method or the "),fH=n(Pre,"A",{href:!0});var R6t=s(fH);xur=r(R6t,"from_config()"),R6t.forEach(t),$ur=r(Pre,` class
method.`),Pre.forEach(t),kur=i(Ml),g9=n(Ml,"P",{});var Gze=s(g9);Sur=r(Gze,"This class cannot be instantiated directly using "),lFe=n(Gze,"CODE",{});var P6t=s(lFe);Rur=r(P6t,"__init__()"),P6t.forEach(t),Pur=r(Gze," (throws an error)."),Gze.forEach(t),Bur=i(Ml),yt=n(Ml,"DIV",{class:!0});var kL=s(yt);T(h9.$$.fragment,kL),Iur=i(kL),iFe=n(kL,"P",{});var B6t=s(iFe);Nur=r(B6t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),B6t.forEach(t),qur=i(kL),Jd=n(kL,"P",{});var Bre=s(Jd);jur=r(Bre,`Note:
Loading a model from its configuration file does `),dFe=n(Bre,"STRONG",{});var I6t=s(dFe);Dur=r(I6t,"not"),I6t.forEach(t),Gur=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(Bre,"A",{href:!0});var N6t=s(gH);Our=r(N6t,"from_pretrained()"),N6t.forEach(t),Vur=r(Bre," to load the model weights."),Bre.forEach(t),Xur=i(kL),T(q4.$$.fragment,kL),kL.forEach(t),zur=i(Ml),bo=n(Ml,"DIV",{class:!0});var La=s(bo);T(u9.$$.fragment,La),Qur=i(La),cFe=n(La,"P",{});var q6t=s(cFe);Wur=r(q6t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),q6t.forEach(t),Hur=i(La),on=n(La,"P",{});var SL=s(on);Uur=r(SL,"The model class to instantiate is selected based on the "),mFe=n(SL,"CODE",{});var j6t=s(mFe);Jur=r(j6t,"model_type"),j6t.forEach(t),Yur=r(SL,` property of the config object (either
passed as an argument or loaded from `),fFe=n(SL,"CODE",{});var D6t=s(fFe);Kur=r(D6t,"pretrained_model_name_or_path"),D6t.forEach(t),Zur=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=n(SL,"CODE",{});var G6t=s(gFe);epr=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),opr=r(SL,":"),SL.forEach(t),rpr=i(La),hFe=n(La,"UL",{});var O6t=s(hFe);j4=n(O6t,"LI",{});var $Ie=s(j4);uFe=n($Ie,"STRONG",{});var V6t=s(uFe);tpr=r(V6t,"detr"),V6t.forEach(t),apr=r($Ie," \u2014 "),hH=n($Ie,"A",{href:!0});var X6t=s(hH);npr=r(X6t,"DetrForSegmentation"),X6t.forEach(t),spr=r($Ie," (DETR model)"),$Ie.forEach(t),O6t.forEach(t),lpr=i(La),D4=n(La,"P",{});var kIe=s(D4);ipr=r(kIe,"The model is set in evaluation mode by default using "),pFe=n(kIe,"CODE",{});var z6t=s(pFe);dpr=r(z6t,"model.eval()"),z6t.forEach(t),cpr=r(kIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_Fe=n(kIe,"CODE",{});var Q6t=s(_Fe);mpr=r(Q6t,"model.train()"),Q6t.forEach(t),kIe.forEach(t),fpr=i(La),T(G4.$$.fragment,La),La.forEach(t),Ml.forEach(t),PVe=i(m),Yd=n(m,"H2",{class:!0});var Oze=s(Yd);O4=n(Oze,"A",{id:!0,class:!0,href:!0});var W6t=s(O4);bFe=n(W6t,"SPAN",{});var H6t=s(bFe);T(p9.$$.fragment,H6t),H6t.forEach(t),W6t.forEach(t),gpr=i(Oze),vFe=n(Oze,"SPAN",{});var U6t=s(vFe);hpr=r(U6t,"AutoModelForSemanticSegmentation"),U6t.forEach(t),Oze.forEach(t),BVe=i(m),Ko=n(m,"DIV",{class:!0});var El=s(Ko);T(_9.$$.fragment,El),upr=i(El),Kd=n(El,"P",{});var Ire=s(Kd);ppr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),uH=n(Ire,"A",{href:!0});var J6t=s(uH);_pr=r(J6t,"from_pretrained()"),J6t.forEach(t),bpr=r(Ire," class method or the "),pH=n(Ire,"A",{href:!0});var Y6t=s(pH);vpr=r(Y6t,"from_config()"),Y6t.forEach(t),Fpr=r(Ire,` class
method.`),Ire.forEach(t),Tpr=i(El),b9=n(El,"P",{});var Vze=s(b9);Mpr=r(Vze,"This class cannot be instantiated directly using "),FFe=n(Vze,"CODE",{});var K6t=s(FFe);Epr=r(K6t,"__init__()"),K6t.forEach(t),Cpr=r(Vze," (throws an error)."),Vze.forEach(t),wpr=i(El),xt=n(El,"DIV",{class:!0});var RL=s(xt);T(v9.$$.fragment,RL),Apr=i(RL),TFe=n(RL,"P",{});var Z6t=s(TFe);Lpr=r(Z6t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Z6t.forEach(t),ypr=i(RL),Zd=n(RL,"P",{});var Nre=s(Zd);xpr=r(Nre,`Note:
Loading a model from its configuration file does `),MFe=n(Nre,"STRONG",{});var eLt=s(MFe);$pr=r(eLt,"not"),eLt.forEach(t),kpr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(Nre,"A",{href:!0});var oLt=s(_H);Spr=r(oLt,"from_pretrained()"),oLt.forEach(t),Rpr=r(Nre," to load the model weights."),Nre.forEach(t),Ppr=i(RL),T(V4.$$.fragment,RL),RL.forEach(t),Bpr=i(El),vo=n(El,"DIV",{class:!0});var ya=s(vo);T(F9.$$.fragment,ya),Ipr=i(ya),EFe=n(ya,"P",{});var rLt=s(EFe);Npr=r(rLt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rLt.forEach(t),qpr=i(ya),rn=n(ya,"P",{});var PL=s(rn);jpr=r(PL,"The model class to instantiate is selected based on the "),CFe=n(PL,"CODE",{});var tLt=s(CFe);Dpr=r(tLt,"model_type"),tLt.forEach(t),Gpr=r(PL,` property of the config object (either
passed as an argument or loaded from `),wFe=n(PL,"CODE",{});var aLt=s(wFe);Opr=r(aLt,"pretrained_model_name_or_path"),aLt.forEach(t),Vpr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(PL,"CODE",{});var nLt=s(AFe);Xpr=r(nLt,"pretrained_model_name_or_path"),nLt.forEach(t),zpr=r(PL,":"),PL.forEach(t),Qpr=i(ya),tn=n(ya,"UL",{});var BL=s(tn);X4=n(BL,"LI",{});var SIe=s(X4);LFe=n(SIe,"STRONG",{});var sLt=s(LFe);Wpr=r(sLt,"beit"),sLt.forEach(t),Hpr=r(SIe," \u2014 "),bH=n(SIe,"A",{href:!0});var lLt=s(bH);Upr=r(lLt,"BeitForSemanticSegmentation"),lLt.forEach(t),Jpr=r(SIe," (BEiT model)"),SIe.forEach(t),Ypr=i(BL),z4=n(BL,"LI",{});var RIe=s(z4);yFe=n(RIe,"STRONG",{});var iLt=s(yFe);Kpr=r(iLt,"data2vec-vision"),iLt.forEach(t),Zpr=r(RIe," \u2014 "),vH=n(RIe,"A",{href:!0});var dLt=s(vH);e_r=r(dLt,"Data2VecVisionForSemanticSegmentation"),dLt.forEach(t),o_r=r(RIe," (Data2VecVision model)"),RIe.forEach(t),r_r=i(BL),Q4=n(BL,"LI",{});var PIe=s(Q4);xFe=n(PIe,"STRONG",{});var cLt=s(xFe);t_r=r(cLt,"dpt"),cLt.forEach(t),a_r=r(PIe," \u2014 "),FH=n(PIe,"A",{href:!0});var mLt=s(FH);n_r=r(mLt,"DPTForSemanticSegmentation"),mLt.forEach(t),s_r=r(PIe," (DPT model)"),PIe.forEach(t),l_r=i(BL),W4=n(BL,"LI",{});var BIe=s(W4);$Fe=n(BIe,"STRONG",{});var fLt=s($Fe);i_r=r(fLt,"segformer"),fLt.forEach(t),d_r=r(BIe," \u2014 "),TH=n(BIe,"A",{href:!0});var gLt=s(TH);c_r=r(gLt,"SegformerForSemanticSegmentation"),gLt.forEach(t),m_r=r(BIe," (SegFormer model)"),BIe.forEach(t),BL.forEach(t),f_r=i(ya),H4=n(ya,"P",{});var IIe=s(H4);g_r=r(IIe,"The model is set in evaluation mode by default using "),kFe=n(IIe,"CODE",{});var hLt=s(kFe);h_r=r(hLt,"model.eval()"),hLt.forEach(t),u_r=r(IIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),SFe=n(IIe,"CODE",{});var uLt=s(SFe);p_r=r(uLt,"model.train()"),uLt.forEach(t),IIe.forEach(t),__r=i(ya),T(U4.$$.fragment,ya),ya.forEach(t),El.forEach(t),IVe=i(m),ec=n(m,"H2",{class:!0});var Xze=s(ec);J4=n(Xze,"A",{id:!0,class:!0,href:!0});var pLt=s(J4);RFe=n(pLt,"SPAN",{});var _Lt=s(RFe);T(T9.$$.fragment,_Lt),_Lt.forEach(t),pLt.forEach(t),b_r=i(Xze),PFe=n(Xze,"SPAN",{});var bLt=s(PFe);v_r=r(bLt,"AutoModelForInstanceSegmentation"),bLt.forEach(t),Xze.forEach(t),NVe=i(m),Zo=n(m,"DIV",{class:!0});var Cl=s(Zo);T(M9.$$.fragment,Cl),F_r=i(Cl),oc=n(Cl,"P",{});var qre=s(oc);T_r=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),MH=n(qre,"A",{href:!0});var vLt=s(MH);M_r=r(vLt,"from_pretrained()"),vLt.forEach(t),E_r=r(qre," class method or the "),EH=n(qre,"A",{href:!0});var FLt=s(EH);C_r=r(FLt,"from_config()"),FLt.forEach(t),w_r=r(qre,` class
method.`),qre.forEach(t),A_r=i(Cl),E9=n(Cl,"P",{});var zze=s(E9);L_r=r(zze,"This class cannot be instantiated directly using "),BFe=n(zze,"CODE",{});var TLt=s(BFe);y_r=r(TLt,"__init__()"),TLt.forEach(t),x_r=r(zze," (throws an error)."),zze.forEach(t),$_r=i(Cl),$t=n(Cl,"DIV",{class:!0});var IL=s($t);T(C9.$$.fragment,IL),k_r=i(IL),IFe=n(IL,"P",{});var MLt=s(IFe);S_r=r(MLt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),MLt.forEach(t),R_r=i(IL),rc=n(IL,"P",{});var jre=s(rc);P_r=r(jre,`Note:
Loading a model from its configuration file does `),NFe=n(jre,"STRONG",{});var ELt=s(NFe);B_r=r(ELt,"not"),ELt.forEach(t),I_r=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(jre,"A",{href:!0});var CLt=s(CH);N_r=r(CLt,"from_pretrained()"),CLt.forEach(t),q_r=r(jre," to load the model weights."),jre.forEach(t),j_r=i(IL),T(Y4.$$.fragment,IL),IL.forEach(t),D_r=i(Cl),Fo=n(Cl,"DIV",{class:!0});var xa=s(Fo);T(w9.$$.fragment,xa),G_r=i(xa),qFe=n(xa,"P",{});var wLt=s(qFe);O_r=r(wLt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),wLt.forEach(t),V_r=i(xa),an=n(xa,"P",{});var NL=s(an);X_r=r(NL,"The model class to instantiate is selected based on the "),jFe=n(NL,"CODE",{});var ALt=s(jFe);z_r=r(ALt,"model_type"),ALt.forEach(t),Q_r=r(NL,` property of the config object (either
passed as an argument or loaded from `),DFe=n(NL,"CODE",{});var LLt=s(DFe);W_r=r(LLt,"pretrained_model_name_or_path"),LLt.forEach(t),H_r=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=n(NL,"CODE",{});var yLt=s(GFe);U_r=r(yLt,"pretrained_model_name_or_path"),yLt.forEach(t),J_r=r(NL,":"),NL.forEach(t),Y_r=i(xa),OFe=n(xa,"UL",{});var xLt=s(OFe);K4=n(xLt,"LI",{});var NIe=s(K4);VFe=n(NIe,"STRONG",{});var $Lt=s(VFe);K_r=r($Lt,"maskformer"),$Lt.forEach(t),Z_r=r(NIe," \u2014 "),wH=n(NIe,"A",{href:!0});var kLt=s(wH);e2r=r(kLt,"MaskFormerForInstanceSegmentation"),kLt.forEach(t),o2r=r(NIe," (MaskFormer model)"),NIe.forEach(t),xLt.forEach(t),r2r=i(xa),Z4=n(xa,"P",{});var qIe=s(Z4);t2r=r(qIe,"The model is set in evaluation mode by default using "),XFe=n(qIe,"CODE",{});var SLt=s(XFe);a2r=r(SLt,"model.eval()"),SLt.forEach(t),n2r=r(qIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zFe=n(qIe,"CODE",{});var RLt=s(zFe);s2r=r(RLt,"model.train()"),RLt.forEach(t),qIe.forEach(t),l2r=i(xa),T(eE.$$.fragment,xa),xa.forEach(t),Cl.forEach(t),qVe=i(m),tc=n(m,"H2",{class:!0});var Qze=s(tc);oE=n(Qze,"A",{id:!0,class:!0,href:!0});var PLt=s(oE);QFe=n(PLt,"SPAN",{});var BLt=s(QFe);T(A9.$$.fragment,BLt),BLt.forEach(t),PLt.forEach(t),i2r=i(Qze),WFe=n(Qze,"SPAN",{});var ILt=s(WFe);d2r=r(ILt,"TFAutoModel"),ILt.forEach(t),Qze.forEach(t),jVe=i(m),er=n(m,"DIV",{class:!0});var wl=s(er);T(L9.$$.fragment,wl),c2r=i(wl),ac=n(wl,"P",{});var Dre=s(ac);m2r=r(Dre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AH=n(Dre,"A",{href:!0});var NLt=s(AH);f2r=r(NLt,"from_pretrained()"),NLt.forEach(t),g2r=r(Dre," class method or the "),LH=n(Dre,"A",{href:!0});var qLt=s(LH);h2r=r(qLt,"from_config()"),qLt.forEach(t),u2r=r(Dre,` class
method.`),Dre.forEach(t),p2r=i(wl),y9=n(wl,"P",{});var Wze=s(y9);_2r=r(Wze,"This class cannot be instantiated directly using "),HFe=n(Wze,"CODE",{});var jLt=s(HFe);b2r=r(jLt,"__init__()"),jLt.forEach(t),v2r=r(Wze," (throws an error)."),Wze.forEach(t),F2r=i(wl),kt=n(wl,"DIV",{class:!0});var qL=s(kt);T(x9.$$.fragment,qL),T2r=i(qL),UFe=n(qL,"P",{});var DLt=s(UFe);M2r=r(DLt,"Instantiates one of the base model classes of the library from a configuration."),DLt.forEach(t),E2r=i(qL),nc=n(qL,"P",{});var Gre=s(nc);C2r=r(Gre,`Note:
Loading a model from its configuration file does `),JFe=n(Gre,"STRONG",{});var GLt=s(JFe);w2r=r(GLt,"not"),GLt.forEach(t),A2r=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(Gre,"A",{href:!0});var OLt=s(yH);L2r=r(OLt,"from_pretrained()"),OLt.forEach(t),y2r=r(Gre," to load the model weights."),Gre.forEach(t),x2r=i(qL),T(rE.$$.fragment,qL),qL.forEach(t),$2r=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T($9.$$.fragment,Al),k2r=i(Al),YFe=n(Al,"P",{});var VLt=s(YFe);S2r=r(VLt,"Instantiate one of the base model classes of the library from a pretrained model."),VLt.forEach(t),R2r=i(Al),nn=n(Al,"P",{});var jL=s(nn);P2r=r(jL,"The model class to instantiate is selected based on the "),KFe=n(jL,"CODE",{});var XLt=s(KFe);B2r=r(XLt,"model_type"),XLt.forEach(t),I2r=r(jL,` property of the config object (either
passed as an argument or loaded from `),ZFe=n(jL,"CODE",{});var zLt=s(ZFe);N2r=r(zLt,"pretrained_model_name_or_path"),zLt.forEach(t),q2r=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=n(jL,"CODE",{});var QLt=s(eTe);j2r=r(QLt,"pretrained_model_name_or_path"),QLt.forEach(t),D2r=r(jL,":"),jL.forEach(t),G2r=i(Al),q=n(Al,"UL",{});var D=s(q);tE=n(D,"LI",{});var jIe=s(tE);oTe=n(jIe,"STRONG",{});var WLt=s(oTe);O2r=r(WLt,"albert"),WLt.forEach(t),V2r=r(jIe," \u2014 "),xH=n(jIe,"A",{href:!0});var HLt=s(xH);X2r=r(HLt,"TFAlbertModel"),HLt.forEach(t),z2r=r(jIe," (ALBERT model)"),jIe.forEach(t),Q2r=i(D),aE=n(D,"LI",{});var DIe=s(aE);rTe=n(DIe,"STRONG",{});var ULt=s(rTe);W2r=r(ULt,"bart"),ULt.forEach(t),H2r=r(DIe," \u2014 "),$H=n(DIe,"A",{href:!0});var JLt=s($H);U2r=r(JLt,"TFBartModel"),JLt.forEach(t),J2r=r(DIe," (BART model)"),DIe.forEach(t),Y2r=i(D),nE=n(D,"LI",{});var GIe=s(nE);tTe=n(GIe,"STRONG",{});var YLt=s(tTe);K2r=r(YLt,"bert"),YLt.forEach(t),Z2r=r(GIe," \u2014 "),kH=n(GIe,"A",{href:!0});var KLt=s(kH);ebr=r(KLt,"TFBertModel"),KLt.forEach(t),obr=r(GIe," (BERT model)"),GIe.forEach(t),rbr=i(D),sE=n(D,"LI",{});var OIe=s(sE);aTe=n(OIe,"STRONG",{});var ZLt=s(aTe);tbr=r(ZLt,"blenderbot"),ZLt.forEach(t),abr=r(OIe," \u2014 "),SH=n(OIe,"A",{href:!0});var e7t=s(SH);nbr=r(e7t,"TFBlenderbotModel"),e7t.forEach(t),sbr=r(OIe," (Blenderbot model)"),OIe.forEach(t),lbr=i(D),lE=n(D,"LI",{});var VIe=s(lE);nTe=n(VIe,"STRONG",{});var o7t=s(nTe);ibr=r(o7t,"blenderbot-small"),o7t.forEach(t),dbr=r(VIe," \u2014 "),RH=n(VIe,"A",{href:!0});var r7t=s(RH);cbr=r(r7t,"TFBlenderbotSmallModel"),r7t.forEach(t),mbr=r(VIe," (BlenderbotSmall model)"),VIe.forEach(t),fbr=i(D),iE=n(D,"LI",{});var XIe=s(iE);sTe=n(XIe,"STRONG",{});var t7t=s(sTe);gbr=r(t7t,"camembert"),t7t.forEach(t),hbr=r(XIe," \u2014 "),PH=n(XIe,"A",{href:!0});var a7t=s(PH);ubr=r(a7t,"TFCamembertModel"),a7t.forEach(t),pbr=r(XIe," (CamemBERT model)"),XIe.forEach(t),_br=i(D),dE=n(D,"LI",{});var zIe=s(dE);lTe=n(zIe,"STRONG",{});var n7t=s(lTe);bbr=r(n7t,"clip"),n7t.forEach(t),vbr=r(zIe," \u2014 "),BH=n(zIe,"A",{href:!0});var s7t=s(BH);Fbr=r(s7t,"TFCLIPModel"),s7t.forEach(t),Tbr=r(zIe," (CLIP model)"),zIe.forEach(t),Mbr=i(D),cE=n(D,"LI",{});var QIe=s(cE);iTe=n(QIe,"STRONG",{});var l7t=s(iTe);Ebr=r(l7t,"convbert"),l7t.forEach(t),Cbr=r(QIe," \u2014 "),IH=n(QIe,"A",{href:!0});var i7t=s(IH);wbr=r(i7t,"TFConvBertModel"),i7t.forEach(t),Abr=r(QIe," (ConvBERT model)"),QIe.forEach(t),Lbr=i(D),mE=n(D,"LI",{});var WIe=s(mE);dTe=n(WIe,"STRONG",{});var d7t=s(dTe);ybr=r(d7t,"convnext"),d7t.forEach(t),xbr=r(WIe," \u2014 "),NH=n(WIe,"A",{href:!0});var c7t=s(NH);$br=r(c7t,"TFConvNextModel"),c7t.forEach(t),kbr=r(WIe," (ConvNeXT model)"),WIe.forEach(t),Sbr=i(D),fE=n(D,"LI",{});var HIe=s(fE);cTe=n(HIe,"STRONG",{});var m7t=s(cTe);Rbr=r(m7t,"ctrl"),m7t.forEach(t),Pbr=r(HIe," \u2014 "),qH=n(HIe,"A",{href:!0});var f7t=s(qH);Bbr=r(f7t,"TFCTRLModel"),f7t.forEach(t),Ibr=r(HIe," (CTRL model)"),HIe.forEach(t),Nbr=i(D),gE=n(D,"LI",{});var UIe=s(gE);mTe=n(UIe,"STRONG",{});var g7t=s(mTe);qbr=r(g7t,"data2vec-vision"),g7t.forEach(t),jbr=r(UIe," \u2014 "),jH=n(UIe,"A",{href:!0});var h7t=s(jH);Dbr=r(h7t,"TFData2VecVisionModel"),h7t.forEach(t),Gbr=r(UIe," (Data2VecVision model)"),UIe.forEach(t),Obr=i(D),hE=n(D,"LI",{});var JIe=s(hE);fTe=n(JIe,"STRONG",{});var u7t=s(fTe);Vbr=r(u7t,"deberta"),u7t.forEach(t),Xbr=r(JIe," \u2014 "),DH=n(JIe,"A",{href:!0});var p7t=s(DH);zbr=r(p7t,"TFDebertaModel"),p7t.forEach(t),Qbr=r(JIe," (DeBERTa model)"),JIe.forEach(t),Wbr=i(D),uE=n(D,"LI",{});var YIe=s(uE);gTe=n(YIe,"STRONG",{});var _7t=s(gTe);Hbr=r(_7t,"deberta-v2"),_7t.forEach(t),Ubr=r(YIe," \u2014 "),GH=n(YIe,"A",{href:!0});var b7t=s(GH);Jbr=r(b7t,"TFDebertaV2Model"),b7t.forEach(t),Ybr=r(YIe," (DeBERTa-v2 model)"),YIe.forEach(t),Kbr=i(D),pE=n(D,"LI",{});var KIe=s(pE);hTe=n(KIe,"STRONG",{});var v7t=s(hTe);Zbr=r(v7t,"distilbert"),v7t.forEach(t),evr=r(KIe," \u2014 "),OH=n(KIe,"A",{href:!0});var F7t=s(OH);ovr=r(F7t,"TFDistilBertModel"),F7t.forEach(t),rvr=r(KIe," (DistilBERT model)"),KIe.forEach(t),tvr=i(D),_E=n(D,"LI",{});var ZIe=s(_E);uTe=n(ZIe,"STRONG",{});var T7t=s(uTe);avr=r(T7t,"dpr"),T7t.forEach(t),nvr=r(ZIe," \u2014 "),VH=n(ZIe,"A",{href:!0});var M7t=s(VH);svr=r(M7t,"TFDPRQuestionEncoder"),M7t.forEach(t),lvr=r(ZIe," (DPR model)"),ZIe.forEach(t),ivr=i(D),bE=n(D,"LI",{});var eNe=s(bE);pTe=n(eNe,"STRONG",{});var E7t=s(pTe);dvr=r(E7t,"electra"),E7t.forEach(t),cvr=r(eNe," \u2014 "),XH=n(eNe,"A",{href:!0});var C7t=s(XH);mvr=r(C7t,"TFElectraModel"),C7t.forEach(t),fvr=r(eNe," (ELECTRA model)"),eNe.forEach(t),gvr=i(D),vE=n(D,"LI",{});var oNe=s(vE);_Te=n(oNe,"STRONG",{});var w7t=s(_Te);hvr=r(w7t,"flaubert"),w7t.forEach(t),uvr=r(oNe," \u2014 "),zH=n(oNe,"A",{href:!0});var A7t=s(zH);pvr=r(A7t,"TFFlaubertModel"),A7t.forEach(t),_vr=r(oNe," (FlauBERT model)"),oNe.forEach(t),bvr=i(D),Hs=n(D,"LI",{});var hS=s(Hs);bTe=n(hS,"STRONG",{});var L7t=s(bTe);vvr=r(L7t,"funnel"),L7t.forEach(t),Fvr=r(hS," \u2014 "),QH=n(hS,"A",{href:!0});var y7t=s(QH);Tvr=r(y7t,"TFFunnelModel"),y7t.forEach(t),Mvr=r(hS," or "),WH=n(hS,"A",{href:!0});var x7t=s(WH);Evr=r(x7t,"TFFunnelBaseModel"),x7t.forEach(t),Cvr=r(hS," (Funnel Transformer model)"),hS.forEach(t),wvr=i(D),FE=n(D,"LI",{});var rNe=s(FE);vTe=n(rNe,"STRONG",{});var $7t=s(vTe);Avr=r($7t,"gpt2"),$7t.forEach(t),Lvr=r(rNe," \u2014 "),HH=n(rNe,"A",{href:!0});var k7t=s(HH);yvr=r(k7t,"TFGPT2Model"),k7t.forEach(t),xvr=r(rNe," (OpenAI GPT-2 model)"),rNe.forEach(t),$vr=i(D),TE=n(D,"LI",{});var tNe=s(TE);FTe=n(tNe,"STRONG",{});var S7t=s(FTe);kvr=r(S7t,"gptj"),S7t.forEach(t),Svr=r(tNe," \u2014 "),UH=n(tNe,"A",{href:!0});var R7t=s(UH);Rvr=r(R7t,"TFGPTJModel"),R7t.forEach(t),Pvr=r(tNe," (GPT-J model)"),tNe.forEach(t),Bvr=i(D),ME=n(D,"LI",{});var aNe=s(ME);TTe=n(aNe,"STRONG",{});var P7t=s(TTe);Ivr=r(P7t,"hubert"),P7t.forEach(t),Nvr=r(aNe," \u2014 "),JH=n(aNe,"A",{href:!0});var B7t=s(JH);qvr=r(B7t,"TFHubertModel"),B7t.forEach(t),jvr=r(aNe," (Hubert model)"),aNe.forEach(t),Dvr=i(D),EE=n(D,"LI",{});var nNe=s(EE);MTe=n(nNe,"STRONG",{});var I7t=s(MTe);Gvr=r(I7t,"layoutlm"),I7t.forEach(t),Ovr=r(nNe," \u2014 "),YH=n(nNe,"A",{href:!0});var N7t=s(YH);Vvr=r(N7t,"TFLayoutLMModel"),N7t.forEach(t),Xvr=r(nNe," (LayoutLM model)"),nNe.forEach(t),zvr=i(D),CE=n(D,"LI",{});var sNe=s(CE);ETe=n(sNe,"STRONG",{});var q7t=s(ETe);Qvr=r(q7t,"led"),q7t.forEach(t),Wvr=r(sNe," \u2014 "),KH=n(sNe,"A",{href:!0});var j7t=s(KH);Hvr=r(j7t,"TFLEDModel"),j7t.forEach(t),Uvr=r(sNe," (LED model)"),sNe.forEach(t),Jvr=i(D),wE=n(D,"LI",{});var lNe=s(wE);CTe=n(lNe,"STRONG",{});var D7t=s(CTe);Yvr=r(D7t,"longformer"),D7t.forEach(t),Kvr=r(lNe," \u2014 "),ZH=n(lNe,"A",{href:!0});var G7t=s(ZH);Zvr=r(G7t,"TFLongformerModel"),G7t.forEach(t),e1r=r(lNe," (Longformer model)"),lNe.forEach(t),o1r=i(D),AE=n(D,"LI",{});var iNe=s(AE);wTe=n(iNe,"STRONG",{});var O7t=s(wTe);r1r=r(O7t,"lxmert"),O7t.forEach(t),t1r=r(iNe," \u2014 "),eU=n(iNe,"A",{href:!0});var V7t=s(eU);a1r=r(V7t,"TFLxmertModel"),V7t.forEach(t),n1r=r(iNe," (LXMERT model)"),iNe.forEach(t),s1r=i(D),LE=n(D,"LI",{});var dNe=s(LE);ATe=n(dNe,"STRONG",{});var X7t=s(ATe);l1r=r(X7t,"marian"),X7t.forEach(t),i1r=r(dNe," \u2014 "),oU=n(dNe,"A",{href:!0});var z7t=s(oU);d1r=r(z7t,"TFMarianModel"),z7t.forEach(t),c1r=r(dNe," (Marian model)"),dNe.forEach(t),m1r=i(D),yE=n(D,"LI",{});var cNe=s(yE);LTe=n(cNe,"STRONG",{});var Q7t=s(LTe);f1r=r(Q7t,"mbart"),Q7t.forEach(t),g1r=r(cNe," \u2014 "),rU=n(cNe,"A",{href:!0});var W7t=s(rU);h1r=r(W7t,"TFMBartModel"),W7t.forEach(t),u1r=r(cNe," (mBART model)"),cNe.forEach(t),p1r=i(D),xE=n(D,"LI",{});var mNe=s(xE);yTe=n(mNe,"STRONG",{});var H7t=s(yTe);_1r=r(H7t,"mobilebert"),H7t.forEach(t),b1r=r(mNe," \u2014 "),tU=n(mNe,"A",{href:!0});var U7t=s(tU);v1r=r(U7t,"TFMobileBertModel"),U7t.forEach(t),F1r=r(mNe," (MobileBERT model)"),mNe.forEach(t),T1r=i(D),$E=n(D,"LI",{});var fNe=s($E);xTe=n(fNe,"STRONG",{});var J7t=s(xTe);M1r=r(J7t,"mpnet"),J7t.forEach(t),E1r=r(fNe," \u2014 "),aU=n(fNe,"A",{href:!0});var Y7t=s(aU);C1r=r(Y7t,"TFMPNetModel"),Y7t.forEach(t),w1r=r(fNe," (MPNet model)"),fNe.forEach(t),A1r=i(D),kE=n(D,"LI",{});var gNe=s(kE);$Te=n(gNe,"STRONG",{});var K7t=s($Te);L1r=r(K7t,"mt5"),K7t.forEach(t),y1r=r(gNe," \u2014 "),nU=n(gNe,"A",{href:!0});var Z7t=s(nU);x1r=r(Z7t,"TFMT5Model"),Z7t.forEach(t),$1r=r(gNe," (MT5 model)"),gNe.forEach(t),k1r=i(D),SE=n(D,"LI",{});var hNe=s(SE);kTe=n(hNe,"STRONG",{});var eyt=s(kTe);S1r=r(eyt,"openai-gpt"),eyt.forEach(t),R1r=r(hNe," \u2014 "),sU=n(hNe,"A",{href:!0});var oyt=s(sU);P1r=r(oyt,"TFOpenAIGPTModel"),oyt.forEach(t),B1r=r(hNe," (OpenAI GPT model)"),hNe.forEach(t),I1r=i(D),RE=n(D,"LI",{});var uNe=s(RE);STe=n(uNe,"STRONG",{});var ryt=s(STe);N1r=r(ryt,"opt"),ryt.forEach(t),q1r=r(uNe," \u2014 "),lU=n(uNe,"A",{href:!0});var tyt=s(lU);j1r=r(tyt,"TFOPTModel"),tyt.forEach(t),D1r=r(uNe," (OPT model)"),uNe.forEach(t),G1r=i(D),PE=n(D,"LI",{});var pNe=s(PE);RTe=n(pNe,"STRONG",{});var ayt=s(RTe);O1r=r(ayt,"pegasus"),ayt.forEach(t),V1r=r(pNe," \u2014 "),iU=n(pNe,"A",{href:!0});var nyt=s(iU);X1r=r(nyt,"TFPegasusModel"),nyt.forEach(t),z1r=r(pNe," (Pegasus model)"),pNe.forEach(t),Q1r=i(D),BE=n(D,"LI",{});var _Ne=s(BE);PTe=n(_Ne,"STRONG",{});var syt=s(PTe);W1r=r(syt,"regnet"),syt.forEach(t),H1r=r(_Ne," \u2014 "),dU=n(_Ne,"A",{href:!0});var lyt=s(dU);U1r=r(lyt,"TFRegNetModel"),lyt.forEach(t),J1r=r(_Ne," (RegNet model)"),_Ne.forEach(t),Y1r=i(D),IE=n(D,"LI",{});var bNe=s(IE);BTe=n(bNe,"STRONG",{});var iyt=s(BTe);K1r=r(iyt,"rembert"),iyt.forEach(t),Z1r=r(bNe," \u2014 "),cU=n(bNe,"A",{href:!0});var dyt=s(cU);eFr=r(dyt,"TFRemBertModel"),dyt.forEach(t),oFr=r(bNe," (RemBERT model)"),bNe.forEach(t),rFr=i(D),NE=n(D,"LI",{});var vNe=s(NE);ITe=n(vNe,"STRONG",{});var cyt=s(ITe);tFr=r(cyt,"roberta"),cyt.forEach(t),aFr=r(vNe," \u2014 "),mU=n(vNe,"A",{href:!0});var myt=s(mU);nFr=r(myt,"TFRobertaModel"),myt.forEach(t),sFr=r(vNe," (RoBERTa model)"),vNe.forEach(t),lFr=i(D),qE=n(D,"LI",{});var FNe=s(qE);NTe=n(FNe,"STRONG",{});var fyt=s(NTe);iFr=r(fyt,"roformer"),fyt.forEach(t),dFr=r(FNe," \u2014 "),fU=n(FNe,"A",{href:!0});var gyt=s(fU);cFr=r(gyt,"TFRoFormerModel"),gyt.forEach(t),mFr=r(FNe," (RoFormer model)"),FNe.forEach(t),fFr=i(D),jE=n(D,"LI",{});var TNe=s(jE);qTe=n(TNe,"STRONG",{});var hyt=s(qTe);gFr=r(hyt,"speech_to_text"),hyt.forEach(t),hFr=r(TNe," \u2014 "),gU=n(TNe,"A",{href:!0});var uyt=s(gU);uFr=r(uyt,"TFSpeech2TextModel"),uyt.forEach(t),pFr=r(TNe," (Speech2Text model)"),TNe.forEach(t),_Fr=i(D),DE=n(D,"LI",{});var MNe=s(DE);jTe=n(MNe,"STRONG",{});var pyt=s(jTe);bFr=r(pyt,"swin"),pyt.forEach(t),vFr=r(MNe," \u2014 "),hU=n(MNe,"A",{href:!0});var _yt=s(hU);FFr=r(_yt,"TFSwinModel"),_yt.forEach(t),TFr=r(MNe," (Swin Transformer model)"),MNe.forEach(t),MFr=i(D),GE=n(D,"LI",{});var ENe=s(GE);DTe=n(ENe,"STRONG",{});var byt=s(DTe);EFr=r(byt,"t5"),byt.forEach(t),CFr=r(ENe," \u2014 "),uU=n(ENe,"A",{href:!0});var vyt=s(uU);wFr=r(vyt,"TFT5Model"),vyt.forEach(t),AFr=r(ENe," (T5 model)"),ENe.forEach(t),LFr=i(D),OE=n(D,"LI",{});var CNe=s(OE);GTe=n(CNe,"STRONG",{});var Fyt=s(GTe);yFr=r(Fyt,"tapas"),Fyt.forEach(t),xFr=r(CNe," \u2014 "),pU=n(CNe,"A",{href:!0});var Tyt=s(pU);$Fr=r(Tyt,"TFTapasModel"),Tyt.forEach(t),kFr=r(CNe," (TAPAS model)"),CNe.forEach(t),SFr=i(D),VE=n(D,"LI",{});var wNe=s(VE);OTe=n(wNe,"STRONG",{});var Myt=s(OTe);RFr=r(Myt,"transfo-xl"),Myt.forEach(t),PFr=r(wNe," \u2014 "),_U=n(wNe,"A",{href:!0});var Eyt=s(_U);BFr=r(Eyt,"TFTransfoXLModel"),Eyt.forEach(t),IFr=r(wNe," (Transformer-XL model)"),wNe.forEach(t),NFr=i(D),XE=n(D,"LI",{});var ANe=s(XE);VTe=n(ANe,"STRONG",{});var Cyt=s(VTe);qFr=r(Cyt,"vit"),Cyt.forEach(t),jFr=r(ANe," \u2014 "),bU=n(ANe,"A",{href:!0});var wyt=s(bU);DFr=r(wyt,"TFViTModel"),wyt.forEach(t),GFr=r(ANe," (ViT model)"),ANe.forEach(t),OFr=i(D),zE=n(D,"LI",{});var LNe=s(zE);XTe=n(LNe,"STRONG",{});var Ayt=s(XTe);VFr=r(Ayt,"vit_mae"),Ayt.forEach(t),XFr=r(LNe," \u2014 "),vU=n(LNe,"A",{href:!0});var Lyt=s(vU);zFr=r(Lyt,"TFViTMAEModel"),Lyt.forEach(t),QFr=r(LNe," (ViTMAE model)"),LNe.forEach(t),WFr=i(D),QE=n(D,"LI",{});var yNe=s(QE);zTe=n(yNe,"STRONG",{});var yyt=s(zTe);HFr=r(yyt,"wav2vec2"),yyt.forEach(t),UFr=r(yNe," \u2014 "),FU=n(yNe,"A",{href:!0});var xyt=s(FU);JFr=r(xyt,"TFWav2Vec2Model"),xyt.forEach(t),YFr=r(yNe," (Wav2Vec2 model)"),yNe.forEach(t),KFr=i(D),WE=n(D,"LI",{});var xNe=s(WE);QTe=n(xNe,"STRONG",{});var $yt=s(QTe);ZFr=r($yt,"xlm"),$yt.forEach(t),eTr=r(xNe," \u2014 "),TU=n(xNe,"A",{href:!0});var kyt=s(TU);oTr=r(kyt,"TFXLMModel"),kyt.forEach(t),rTr=r(xNe," (XLM model)"),xNe.forEach(t),tTr=i(D),HE=n(D,"LI",{});var $Ne=s(HE);WTe=n($Ne,"STRONG",{});var Syt=s(WTe);aTr=r(Syt,"xlm-roberta"),Syt.forEach(t),nTr=r($Ne," \u2014 "),MU=n($Ne,"A",{href:!0});var Ryt=s(MU);sTr=r(Ryt,"TFXLMRobertaModel"),Ryt.forEach(t),lTr=r($Ne," (XLM-RoBERTa model)"),$Ne.forEach(t),iTr=i(D),UE=n(D,"LI",{});var kNe=s(UE);HTe=n(kNe,"STRONG",{});var Pyt=s(HTe);dTr=r(Pyt,"xlnet"),Pyt.forEach(t),cTr=r(kNe," \u2014 "),EU=n(kNe,"A",{href:!0});var Byt=s(EU);mTr=r(Byt,"TFXLNetModel"),Byt.forEach(t),fTr=r(kNe," (XLNet model)"),kNe.forEach(t),D.forEach(t),gTr=i(Al),T(JE.$$.fragment,Al),Al.forEach(t),wl.forEach(t),DVe=i(m),sc=n(m,"H2",{class:!0});var Hze=s(sc);YE=n(Hze,"A",{id:!0,class:!0,href:!0});var Iyt=s(YE);UTe=n(Iyt,"SPAN",{});var Nyt=s(UTe);T(k9.$$.fragment,Nyt),Nyt.forEach(t),Iyt.forEach(t),hTr=i(Hze),JTe=n(Hze,"SPAN",{});var qyt=s(JTe);uTr=r(qyt,"TFAutoModelForPreTraining"),qyt.forEach(t),Hze.forEach(t),GVe=i(m),or=n(m,"DIV",{class:!0});var Ll=s(or);T(S9.$$.fragment,Ll),pTr=i(Ll),lc=n(Ll,"P",{});var Ore=s(lc);_Tr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CU=n(Ore,"A",{href:!0});var jyt=s(CU);bTr=r(jyt,"from_pretrained()"),jyt.forEach(t),vTr=r(Ore," class method or the "),wU=n(Ore,"A",{href:!0});var Dyt=s(wU);FTr=r(Dyt,"from_config()"),Dyt.forEach(t),TTr=r(Ore,` class
method.`),Ore.forEach(t),MTr=i(Ll),R9=n(Ll,"P",{});var Uze=s(R9);ETr=r(Uze,"This class cannot be instantiated directly using "),YTe=n(Uze,"CODE",{});var Gyt=s(YTe);CTr=r(Gyt,"__init__()"),Gyt.forEach(t),wTr=r(Uze," (throws an error)."),Uze.forEach(t),ATr=i(Ll),St=n(Ll,"DIV",{class:!0});var DL=s(St);T(P9.$$.fragment,DL),LTr=i(DL),KTe=n(DL,"P",{});var Oyt=s(KTe);yTr=r(Oyt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Oyt.forEach(t),xTr=i(DL),ic=n(DL,"P",{});var Vre=s(ic);$Tr=r(Vre,`Note:
Loading a model from its configuration file does `),ZTe=n(Vre,"STRONG",{});var Vyt=s(ZTe);kTr=r(Vyt,"not"),Vyt.forEach(t),STr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(Vre,"A",{href:!0});var Xyt=s(AU);RTr=r(Xyt,"from_pretrained()"),Xyt.forEach(t),PTr=r(Vre," to load the model weights."),Vre.forEach(t),BTr=i(DL),T(KE.$$.fragment,DL),DL.forEach(t),ITr=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(B9.$$.fragment,yl),NTr=i(yl),eMe=n(yl,"P",{});var zyt=s(eMe);qTr=r(zyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zyt.forEach(t),jTr=i(yl),sn=n(yl,"P",{});var GL=s(sn);DTr=r(GL,"The model class to instantiate is selected based on the "),oMe=n(GL,"CODE",{});var Qyt=s(oMe);GTr=r(Qyt,"model_type"),Qyt.forEach(t),OTr=r(GL,` property of the config object (either
passed as an argument or loaded from `),rMe=n(GL,"CODE",{});var Wyt=s(rMe);VTr=r(Wyt,"pretrained_model_name_or_path"),Wyt.forEach(t),XTr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(GL,"CODE",{});var Hyt=s(tMe);zTr=r(Hyt,"pretrained_model_name_or_path"),Hyt.forEach(t),QTr=r(GL,":"),GL.forEach(t),WTr=i(yl),se=n(yl,"UL",{});var le=s(se);ZE=n(le,"LI",{});var SNe=s(ZE);aMe=n(SNe,"STRONG",{});var Uyt=s(aMe);HTr=r(Uyt,"albert"),Uyt.forEach(t),UTr=r(SNe," \u2014 "),LU=n(SNe,"A",{href:!0});var Jyt=s(LU);JTr=r(Jyt,"TFAlbertForPreTraining"),Jyt.forEach(t),YTr=r(SNe," (ALBERT model)"),SNe.forEach(t),KTr=i(le),eC=n(le,"LI",{});var RNe=s(eC);nMe=n(RNe,"STRONG",{});var Yyt=s(nMe);ZTr=r(Yyt,"bart"),Yyt.forEach(t),eMr=r(RNe," \u2014 "),yU=n(RNe,"A",{href:!0});var Kyt=s(yU);oMr=r(Kyt,"TFBartForConditionalGeneration"),Kyt.forEach(t),rMr=r(RNe," (BART model)"),RNe.forEach(t),tMr=i(le),oC=n(le,"LI",{});var PNe=s(oC);sMe=n(PNe,"STRONG",{});var Zyt=s(sMe);aMr=r(Zyt,"bert"),Zyt.forEach(t),nMr=r(PNe," \u2014 "),xU=n(PNe,"A",{href:!0});var e8t=s(xU);sMr=r(e8t,"TFBertForPreTraining"),e8t.forEach(t),lMr=r(PNe," (BERT model)"),PNe.forEach(t),iMr=i(le),rC=n(le,"LI",{});var BNe=s(rC);lMe=n(BNe,"STRONG",{});var o8t=s(lMe);dMr=r(o8t,"camembert"),o8t.forEach(t),cMr=r(BNe," \u2014 "),$U=n(BNe,"A",{href:!0});var r8t=s($U);mMr=r(r8t,"TFCamembertForMaskedLM"),r8t.forEach(t),fMr=r(BNe," (CamemBERT model)"),BNe.forEach(t),gMr=i(le),tC=n(le,"LI",{});var INe=s(tC);iMe=n(INe,"STRONG",{});var t8t=s(iMe);hMr=r(t8t,"ctrl"),t8t.forEach(t),uMr=r(INe," \u2014 "),kU=n(INe,"A",{href:!0});var a8t=s(kU);pMr=r(a8t,"TFCTRLLMHeadModel"),a8t.forEach(t),_Mr=r(INe," (CTRL model)"),INe.forEach(t),bMr=i(le),aC=n(le,"LI",{});var NNe=s(aC);dMe=n(NNe,"STRONG",{});var n8t=s(dMe);vMr=r(n8t,"distilbert"),n8t.forEach(t),FMr=r(NNe," \u2014 "),SU=n(NNe,"A",{href:!0});var s8t=s(SU);TMr=r(s8t,"TFDistilBertForMaskedLM"),s8t.forEach(t),MMr=r(NNe," (DistilBERT model)"),NNe.forEach(t),EMr=i(le),nC=n(le,"LI",{});var qNe=s(nC);cMe=n(qNe,"STRONG",{});var l8t=s(cMe);CMr=r(l8t,"electra"),l8t.forEach(t),wMr=r(qNe," \u2014 "),RU=n(qNe,"A",{href:!0});var i8t=s(RU);AMr=r(i8t,"TFElectraForPreTraining"),i8t.forEach(t),LMr=r(qNe," (ELECTRA model)"),qNe.forEach(t),yMr=i(le),sC=n(le,"LI",{});var jNe=s(sC);mMe=n(jNe,"STRONG",{});var d8t=s(mMe);xMr=r(d8t,"flaubert"),d8t.forEach(t),$Mr=r(jNe," \u2014 "),PU=n(jNe,"A",{href:!0});var c8t=s(PU);kMr=r(c8t,"TFFlaubertWithLMHeadModel"),c8t.forEach(t),SMr=r(jNe," (FlauBERT model)"),jNe.forEach(t),RMr=i(le),lC=n(le,"LI",{});var DNe=s(lC);fMe=n(DNe,"STRONG",{});var m8t=s(fMe);PMr=r(m8t,"funnel"),m8t.forEach(t),BMr=r(DNe," \u2014 "),BU=n(DNe,"A",{href:!0});var f8t=s(BU);IMr=r(f8t,"TFFunnelForPreTraining"),f8t.forEach(t),NMr=r(DNe," (Funnel Transformer model)"),DNe.forEach(t),qMr=i(le),iC=n(le,"LI",{});var GNe=s(iC);gMe=n(GNe,"STRONG",{});var g8t=s(gMe);jMr=r(g8t,"gpt2"),g8t.forEach(t),DMr=r(GNe," \u2014 "),IU=n(GNe,"A",{href:!0});var h8t=s(IU);GMr=r(h8t,"TFGPT2LMHeadModel"),h8t.forEach(t),OMr=r(GNe," (OpenAI GPT-2 model)"),GNe.forEach(t),VMr=i(le),dC=n(le,"LI",{});var ONe=s(dC);hMe=n(ONe,"STRONG",{});var u8t=s(hMe);XMr=r(u8t,"layoutlm"),u8t.forEach(t),zMr=r(ONe," \u2014 "),NU=n(ONe,"A",{href:!0});var p8t=s(NU);QMr=r(p8t,"TFLayoutLMForMaskedLM"),p8t.forEach(t),WMr=r(ONe," (LayoutLM model)"),ONe.forEach(t),HMr=i(le),cC=n(le,"LI",{});var VNe=s(cC);uMe=n(VNe,"STRONG",{});var _8t=s(uMe);UMr=r(_8t,"lxmert"),_8t.forEach(t),JMr=r(VNe," \u2014 "),qU=n(VNe,"A",{href:!0});var b8t=s(qU);YMr=r(b8t,"TFLxmertForPreTraining"),b8t.forEach(t),KMr=r(VNe," (LXMERT model)"),VNe.forEach(t),ZMr=i(le),mC=n(le,"LI",{});var XNe=s(mC);pMe=n(XNe,"STRONG",{});var v8t=s(pMe);e4r=r(v8t,"mobilebert"),v8t.forEach(t),o4r=r(XNe," \u2014 "),jU=n(XNe,"A",{href:!0});var F8t=s(jU);r4r=r(F8t,"TFMobileBertForPreTraining"),F8t.forEach(t),t4r=r(XNe," (MobileBERT model)"),XNe.forEach(t),a4r=i(le),fC=n(le,"LI",{});var zNe=s(fC);_Me=n(zNe,"STRONG",{});var T8t=s(_Me);n4r=r(T8t,"mpnet"),T8t.forEach(t),s4r=r(zNe," \u2014 "),DU=n(zNe,"A",{href:!0});var M8t=s(DU);l4r=r(M8t,"TFMPNetForMaskedLM"),M8t.forEach(t),i4r=r(zNe," (MPNet model)"),zNe.forEach(t),d4r=i(le),gC=n(le,"LI",{});var QNe=s(gC);bMe=n(QNe,"STRONG",{});var E8t=s(bMe);c4r=r(E8t,"openai-gpt"),E8t.forEach(t),m4r=r(QNe," \u2014 "),GU=n(QNe,"A",{href:!0});var C8t=s(GU);f4r=r(C8t,"TFOpenAIGPTLMHeadModel"),C8t.forEach(t),g4r=r(QNe," (OpenAI GPT model)"),QNe.forEach(t),h4r=i(le),hC=n(le,"LI",{});var WNe=s(hC);vMe=n(WNe,"STRONG",{});var w8t=s(vMe);u4r=r(w8t,"roberta"),w8t.forEach(t),p4r=r(WNe," \u2014 "),OU=n(WNe,"A",{href:!0});var A8t=s(OU);_4r=r(A8t,"TFRobertaForMaskedLM"),A8t.forEach(t),b4r=r(WNe," (RoBERTa model)"),WNe.forEach(t),v4r=i(le),uC=n(le,"LI",{});var HNe=s(uC);FMe=n(HNe,"STRONG",{});var L8t=s(FMe);F4r=r(L8t,"t5"),L8t.forEach(t),T4r=r(HNe," \u2014 "),VU=n(HNe,"A",{href:!0});var y8t=s(VU);M4r=r(y8t,"TFT5ForConditionalGeneration"),y8t.forEach(t),E4r=r(HNe," (T5 model)"),HNe.forEach(t),C4r=i(le),pC=n(le,"LI",{});var UNe=s(pC);TMe=n(UNe,"STRONG",{});var x8t=s(TMe);w4r=r(x8t,"tapas"),x8t.forEach(t),A4r=r(UNe," \u2014 "),XU=n(UNe,"A",{href:!0});var $8t=s(XU);L4r=r($8t,"TFTapasForMaskedLM"),$8t.forEach(t),y4r=r(UNe," (TAPAS model)"),UNe.forEach(t),x4r=i(le),_C=n(le,"LI",{});var JNe=s(_C);MMe=n(JNe,"STRONG",{});var k8t=s(MMe);$4r=r(k8t,"transfo-xl"),k8t.forEach(t),k4r=r(JNe," \u2014 "),zU=n(JNe,"A",{href:!0});var S8t=s(zU);S4r=r(S8t,"TFTransfoXLLMHeadModel"),S8t.forEach(t),R4r=r(JNe," (Transformer-XL model)"),JNe.forEach(t),P4r=i(le),bC=n(le,"LI",{});var YNe=s(bC);EMe=n(YNe,"STRONG",{});var R8t=s(EMe);B4r=r(R8t,"vit_mae"),R8t.forEach(t),I4r=r(YNe," \u2014 "),QU=n(YNe,"A",{href:!0});var P8t=s(QU);N4r=r(P8t,"TFViTMAEForPreTraining"),P8t.forEach(t),q4r=r(YNe," (ViTMAE model)"),YNe.forEach(t),j4r=i(le),vC=n(le,"LI",{});var KNe=s(vC);CMe=n(KNe,"STRONG",{});var B8t=s(CMe);D4r=r(B8t,"xlm"),B8t.forEach(t),G4r=r(KNe," \u2014 "),WU=n(KNe,"A",{href:!0});var I8t=s(WU);O4r=r(I8t,"TFXLMWithLMHeadModel"),I8t.forEach(t),V4r=r(KNe," (XLM model)"),KNe.forEach(t),X4r=i(le),FC=n(le,"LI",{});var ZNe=s(FC);wMe=n(ZNe,"STRONG",{});var N8t=s(wMe);z4r=r(N8t,"xlm-roberta"),N8t.forEach(t),Q4r=r(ZNe," \u2014 "),HU=n(ZNe,"A",{href:!0});var q8t=s(HU);W4r=r(q8t,"TFXLMRobertaForMaskedLM"),q8t.forEach(t),H4r=r(ZNe," (XLM-RoBERTa model)"),ZNe.forEach(t),U4r=i(le),TC=n(le,"LI",{});var eqe=s(TC);AMe=n(eqe,"STRONG",{});var j8t=s(AMe);J4r=r(j8t,"xlnet"),j8t.forEach(t),Y4r=r(eqe," \u2014 "),UU=n(eqe,"A",{href:!0});var D8t=s(UU);K4r=r(D8t,"TFXLNetLMHeadModel"),D8t.forEach(t),Z4r=r(eqe," (XLNet model)"),eqe.forEach(t),le.forEach(t),eEr=i(yl),T(MC.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),OVe=i(m),dc=n(m,"H2",{class:!0});var Jze=s(dc);EC=n(Jze,"A",{id:!0,class:!0,href:!0});var G8t=s(EC);LMe=n(G8t,"SPAN",{});var O8t=s(LMe);T(I9.$$.fragment,O8t),O8t.forEach(t),G8t.forEach(t),oEr=i(Jze),yMe=n(Jze,"SPAN",{});var V8t=s(yMe);rEr=r(V8t,"TFAutoModelForCausalLM"),V8t.forEach(t),Jze.forEach(t),VVe=i(m),rr=n(m,"DIV",{class:!0});var xl=s(rr);T(N9.$$.fragment,xl),tEr=i(xl),cc=n(xl,"P",{});var Xre=s(cc);aEr=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),JU=n(Xre,"A",{href:!0});var X8t=s(JU);nEr=r(X8t,"from_pretrained()"),X8t.forEach(t),sEr=r(Xre," class method or the "),YU=n(Xre,"A",{href:!0});var z8t=s(YU);lEr=r(z8t,"from_config()"),z8t.forEach(t),iEr=r(Xre,` class
method.`),Xre.forEach(t),dEr=i(xl),q9=n(xl,"P",{});var Yze=s(q9);cEr=r(Yze,"This class cannot be instantiated directly using "),xMe=n(Yze,"CODE",{});var Q8t=s(xMe);mEr=r(Q8t,"__init__()"),Q8t.forEach(t),fEr=r(Yze," (throws an error)."),Yze.forEach(t),gEr=i(xl),Rt=n(xl,"DIV",{class:!0});var OL=s(Rt);T(j9.$$.fragment,OL),hEr=i(OL),$Me=n(OL,"P",{});var W8t=s($Me);uEr=r(W8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),W8t.forEach(t),pEr=i(OL),mc=n(OL,"P",{});var zre=s(mc);_Er=r(zre,`Note:
Loading a model from its configuration file does `),kMe=n(zre,"STRONG",{});var H8t=s(kMe);bEr=r(H8t,"not"),H8t.forEach(t),vEr=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),KU=n(zre,"A",{href:!0});var U8t=s(KU);FEr=r(U8t,"from_pretrained()"),U8t.forEach(t),TEr=r(zre," to load the model weights."),zre.forEach(t),MEr=i(OL),T(CC.$$.fragment,OL),OL.forEach(t),EEr=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(D9.$$.fragment,$l),CEr=i($l),SMe=n($l,"P",{});var J8t=s(SMe);wEr=r(J8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),J8t.forEach(t),AEr=i($l),ln=n($l,"P",{});var VL=s(ln);LEr=r(VL,"The model class to instantiate is selected based on the "),RMe=n(VL,"CODE",{});var Y8t=s(RMe);yEr=r(Y8t,"model_type"),Y8t.forEach(t),xEr=r(VL,` property of the config object (either
passed as an argument or loaded from `),PMe=n(VL,"CODE",{});var K8t=s(PMe);$Er=r(K8t,"pretrained_model_name_or_path"),K8t.forEach(t),kEr=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(VL,"CODE",{});var Z8t=s(BMe);SEr=r(Z8t,"pretrained_model_name_or_path"),Z8t.forEach(t),REr=r(VL,":"),VL.forEach(t),PEr=i($l),Me=n($l,"UL",{});var Ce=s(Me);wC=n(Ce,"LI",{});var oqe=s(wC);IMe=n(oqe,"STRONG",{});var e9t=s(IMe);BEr=r(e9t,"bert"),e9t.forEach(t),IEr=r(oqe," \u2014 "),ZU=n(oqe,"A",{href:!0});var o9t=s(ZU);NEr=r(o9t,"TFBertLMHeadModel"),o9t.forEach(t),qEr=r(oqe," (BERT model)"),oqe.forEach(t),jEr=i(Ce),AC=n(Ce,"LI",{});var rqe=s(AC);NMe=n(rqe,"STRONG",{});var r9t=s(NMe);DEr=r(r9t,"camembert"),r9t.forEach(t),GEr=r(rqe," \u2014 "),eJ=n(rqe,"A",{href:!0});var t9t=s(eJ);OEr=r(t9t,"TFCamembertForCausalLM"),t9t.forEach(t),VEr=r(rqe," (CamemBERT model)"),rqe.forEach(t),XEr=i(Ce),LC=n(Ce,"LI",{});var tqe=s(LC);qMe=n(tqe,"STRONG",{});var a9t=s(qMe);zEr=r(a9t,"ctrl"),a9t.forEach(t),QEr=r(tqe," \u2014 "),oJ=n(tqe,"A",{href:!0});var n9t=s(oJ);WEr=r(n9t,"TFCTRLLMHeadModel"),n9t.forEach(t),HEr=r(tqe," (CTRL model)"),tqe.forEach(t),UEr=i(Ce),yC=n(Ce,"LI",{});var aqe=s(yC);jMe=n(aqe,"STRONG",{});var s9t=s(jMe);JEr=r(s9t,"gpt2"),s9t.forEach(t),YEr=r(aqe," \u2014 "),rJ=n(aqe,"A",{href:!0});var l9t=s(rJ);KEr=r(l9t,"TFGPT2LMHeadModel"),l9t.forEach(t),ZEr=r(aqe," (OpenAI GPT-2 model)"),aqe.forEach(t),eCr=i(Ce),xC=n(Ce,"LI",{});var nqe=s(xC);DMe=n(nqe,"STRONG",{});var i9t=s(DMe);oCr=r(i9t,"gptj"),i9t.forEach(t),rCr=r(nqe," \u2014 "),tJ=n(nqe,"A",{href:!0});var d9t=s(tJ);tCr=r(d9t,"TFGPTJForCausalLM"),d9t.forEach(t),aCr=r(nqe," (GPT-J model)"),nqe.forEach(t),nCr=i(Ce),$C=n(Ce,"LI",{});var sqe=s($C);GMe=n(sqe,"STRONG",{});var c9t=s(GMe);sCr=r(c9t,"openai-gpt"),c9t.forEach(t),lCr=r(sqe," \u2014 "),aJ=n(sqe,"A",{href:!0});var m9t=s(aJ);iCr=r(m9t,"TFOpenAIGPTLMHeadModel"),m9t.forEach(t),dCr=r(sqe," (OpenAI GPT model)"),sqe.forEach(t),cCr=i(Ce),kC=n(Ce,"LI",{});var lqe=s(kC);OMe=n(lqe,"STRONG",{});var f9t=s(OMe);mCr=r(f9t,"opt"),f9t.forEach(t),fCr=r(lqe," \u2014 "),nJ=n(lqe,"A",{href:!0});var g9t=s(nJ);gCr=r(g9t,"TFOPTForCausalLM"),g9t.forEach(t),hCr=r(lqe," (OPT model)"),lqe.forEach(t),uCr=i(Ce),SC=n(Ce,"LI",{});var iqe=s(SC);VMe=n(iqe,"STRONG",{});var h9t=s(VMe);pCr=r(h9t,"rembert"),h9t.forEach(t),_Cr=r(iqe," \u2014 "),sJ=n(iqe,"A",{href:!0});var u9t=s(sJ);bCr=r(u9t,"TFRemBertForCausalLM"),u9t.forEach(t),vCr=r(iqe," (RemBERT model)"),iqe.forEach(t),FCr=i(Ce),RC=n(Ce,"LI",{});var dqe=s(RC);XMe=n(dqe,"STRONG",{});var p9t=s(XMe);TCr=r(p9t,"roberta"),p9t.forEach(t),MCr=r(dqe," \u2014 "),lJ=n(dqe,"A",{href:!0});var _9t=s(lJ);ECr=r(_9t,"TFRobertaForCausalLM"),_9t.forEach(t),CCr=r(dqe," (RoBERTa model)"),dqe.forEach(t),wCr=i(Ce),PC=n(Ce,"LI",{});var cqe=s(PC);zMe=n(cqe,"STRONG",{});var b9t=s(zMe);ACr=r(b9t,"roformer"),b9t.forEach(t),LCr=r(cqe," \u2014 "),iJ=n(cqe,"A",{href:!0});var v9t=s(iJ);yCr=r(v9t,"TFRoFormerForCausalLM"),v9t.forEach(t),xCr=r(cqe," (RoFormer model)"),cqe.forEach(t),$Cr=i(Ce),BC=n(Ce,"LI",{});var mqe=s(BC);QMe=n(mqe,"STRONG",{});var F9t=s(QMe);kCr=r(F9t,"transfo-xl"),F9t.forEach(t),SCr=r(mqe," \u2014 "),dJ=n(mqe,"A",{href:!0});var T9t=s(dJ);RCr=r(T9t,"TFTransfoXLLMHeadModel"),T9t.forEach(t),PCr=r(mqe," (Transformer-XL model)"),mqe.forEach(t),BCr=i(Ce),IC=n(Ce,"LI",{});var fqe=s(IC);WMe=n(fqe,"STRONG",{});var M9t=s(WMe);ICr=r(M9t,"xlm"),M9t.forEach(t),NCr=r(fqe," \u2014 "),cJ=n(fqe,"A",{href:!0});var E9t=s(cJ);qCr=r(E9t,"TFXLMWithLMHeadModel"),E9t.forEach(t),jCr=r(fqe," (XLM model)"),fqe.forEach(t),DCr=i(Ce),NC=n(Ce,"LI",{});var gqe=s(NC);HMe=n(gqe,"STRONG",{});var C9t=s(HMe);GCr=r(C9t,"xlnet"),C9t.forEach(t),OCr=r(gqe," \u2014 "),mJ=n(gqe,"A",{href:!0});var w9t=s(mJ);VCr=r(w9t,"TFXLNetLMHeadModel"),w9t.forEach(t),XCr=r(gqe," (XLNet model)"),gqe.forEach(t),Ce.forEach(t),zCr=i($l),T(qC.$$.fragment,$l),$l.forEach(t),xl.forEach(t),XVe=i(m),fc=n(m,"H2",{class:!0});var Kze=s(fc);jC=n(Kze,"A",{id:!0,class:!0,href:!0});var A9t=s(jC);UMe=n(A9t,"SPAN",{});var L9t=s(UMe);T(G9.$$.fragment,L9t),L9t.forEach(t),A9t.forEach(t),QCr=i(Kze),JMe=n(Kze,"SPAN",{});var y9t=s(JMe);WCr=r(y9t,"TFAutoModelForImageClassification"),y9t.forEach(t),Kze.forEach(t),zVe=i(m),tr=n(m,"DIV",{class:!0});var kl=s(tr);T(O9.$$.fragment,kl),HCr=i(kl),gc=n(kl,"P",{});var Qre=s(gc);UCr=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),fJ=n(Qre,"A",{href:!0});var x9t=s(fJ);JCr=r(x9t,"from_pretrained()"),x9t.forEach(t),YCr=r(Qre," class method or the "),gJ=n(Qre,"A",{href:!0});var $9t=s(gJ);KCr=r($9t,"from_config()"),$9t.forEach(t),ZCr=r(Qre,` class
method.`),Qre.forEach(t),e3r=i(kl),V9=n(kl,"P",{});var Zze=s(V9);o3r=r(Zze,"This class cannot be instantiated directly using "),YMe=n(Zze,"CODE",{});var k9t=s(YMe);r3r=r(k9t,"__init__()"),k9t.forEach(t),t3r=r(Zze," (throws an error)."),Zze.forEach(t),a3r=i(kl),Pt=n(kl,"DIV",{class:!0});var XL=s(Pt);T(X9.$$.fragment,XL),n3r=i(XL),KMe=n(XL,"P",{});var S9t=s(KMe);s3r=r(S9t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S9t.forEach(t),l3r=i(XL),hc=n(XL,"P",{});var Wre=s(hc);i3r=r(Wre,`Note:
Loading a model from its configuration file does `),ZMe=n(Wre,"STRONG",{});var R9t=s(ZMe);d3r=r(R9t,"not"),R9t.forEach(t),c3r=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(Wre,"A",{href:!0});var P9t=s(hJ);m3r=r(P9t,"from_pretrained()"),P9t.forEach(t),f3r=r(Wre," to load the model weights."),Wre.forEach(t),g3r=i(XL),T(DC.$$.fragment,XL),XL.forEach(t),h3r=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(z9.$$.fragment,Sl),u3r=i(Sl),e4e=n(Sl,"P",{});var B9t=s(e4e);p3r=r(B9t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B9t.forEach(t),_3r=i(Sl),dn=n(Sl,"P",{});var zL=s(dn);b3r=r(zL,"The model class to instantiate is selected based on the "),o4e=n(zL,"CODE",{});var I9t=s(o4e);v3r=r(I9t,"model_type"),I9t.forEach(t),F3r=r(zL,` property of the config object (either
passed as an argument or loaded from `),r4e=n(zL,"CODE",{});var N9t=s(r4e);T3r=r(N9t,"pretrained_model_name_or_path"),N9t.forEach(t),M3r=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t4e=n(zL,"CODE",{});var q9t=s(t4e);E3r=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),C3r=r(zL,":"),zL.forEach(t),w3r=i(Sl),rt=n(Sl,"UL",{});var Rl=s(rt);GC=n(Rl,"LI",{});var hqe=s(GC);a4e=n(hqe,"STRONG",{});var j9t=s(a4e);A3r=r(j9t,"convnext"),j9t.forEach(t),L3r=r(hqe," \u2014 "),uJ=n(hqe,"A",{href:!0});var D9t=s(uJ);y3r=r(D9t,"TFConvNextForImageClassification"),D9t.forEach(t),x3r=r(hqe," (ConvNeXT model)"),hqe.forEach(t),$3r=i(Rl),OC=n(Rl,"LI",{});var uqe=s(OC);n4e=n(uqe,"STRONG",{});var G9t=s(n4e);k3r=r(G9t,"data2vec-vision"),G9t.forEach(t),S3r=r(uqe," \u2014 "),pJ=n(uqe,"A",{href:!0});var O9t=s(pJ);R3r=r(O9t,"TFData2VecVisionForImageClassification"),O9t.forEach(t),P3r=r(uqe," (Data2VecVision model)"),uqe.forEach(t),B3r=i(Rl),VC=n(Rl,"LI",{});var pqe=s(VC);s4e=n(pqe,"STRONG",{});var V9t=s(s4e);I3r=r(V9t,"regnet"),V9t.forEach(t),N3r=r(pqe," \u2014 "),_J=n(pqe,"A",{href:!0});var X9t=s(_J);q3r=r(X9t,"TFRegNetForImageClassification"),X9t.forEach(t),j3r=r(pqe," (RegNet model)"),pqe.forEach(t),D3r=i(Rl),XC=n(Rl,"LI",{});var _qe=s(XC);l4e=n(_qe,"STRONG",{});var z9t=s(l4e);G3r=r(z9t,"swin"),z9t.forEach(t),O3r=r(_qe," \u2014 "),bJ=n(_qe,"A",{href:!0});var Q9t=s(bJ);V3r=r(Q9t,"TFSwinForImageClassification"),Q9t.forEach(t),X3r=r(_qe," (Swin Transformer model)"),_qe.forEach(t),z3r=i(Rl),zC=n(Rl,"LI",{});var bqe=s(zC);i4e=n(bqe,"STRONG",{});var W9t=s(i4e);Q3r=r(W9t,"vit"),W9t.forEach(t),W3r=r(bqe," \u2014 "),vJ=n(bqe,"A",{href:!0});var H9t=s(vJ);H3r=r(H9t,"TFViTForImageClassification"),H9t.forEach(t),U3r=r(bqe," (ViT model)"),bqe.forEach(t),Rl.forEach(t),J3r=i(Sl),T(QC.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),QVe=i(m),uc=n(m,"H2",{class:!0});var eQe=s(uc);WC=n(eQe,"A",{id:!0,class:!0,href:!0});var U9t=s(WC);d4e=n(U9t,"SPAN",{});var J9t=s(d4e);T(Q9.$$.fragment,J9t),J9t.forEach(t),U9t.forEach(t),Y3r=i(eQe),c4e=n(eQe,"SPAN",{});var Y9t=s(c4e);K3r=r(Y9t,"TFAutoModelForMaskedLM"),Y9t.forEach(t),eQe.forEach(t),WVe=i(m),ar=n(m,"DIV",{class:!0});var Pl=s(ar);T(W9.$$.fragment,Pl),Z3r=i(Pl),pc=n(Pl,"P",{});var Hre=s(pc);e5r=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FJ=n(Hre,"A",{href:!0});var K9t=s(FJ);o5r=r(K9t,"from_pretrained()"),K9t.forEach(t),r5r=r(Hre," class method or the "),TJ=n(Hre,"A",{href:!0});var Z9t=s(TJ);t5r=r(Z9t,"from_config()"),Z9t.forEach(t),a5r=r(Hre,` class
method.`),Hre.forEach(t),n5r=i(Pl),H9=n(Pl,"P",{});var oQe=s(H9);s5r=r(oQe,"This class cannot be instantiated directly using "),m4e=n(oQe,"CODE",{});var ext=s(m4e);l5r=r(ext,"__init__()"),ext.forEach(t),i5r=r(oQe," (throws an error)."),oQe.forEach(t),d5r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var QL=s(Bt);T(U9.$$.fragment,QL),c5r=i(QL),f4e=n(QL,"P",{});var oxt=s(f4e);m5r=r(oxt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oxt.forEach(t),f5r=i(QL),_c=n(QL,"P",{});var Ure=s(_c);g5r=r(Ure,`Note:
Loading a model from its configuration file does `),g4e=n(Ure,"STRONG",{});var rxt=s(g4e);h5r=r(rxt,"not"),rxt.forEach(t),u5r=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),MJ=n(Ure,"A",{href:!0});var txt=s(MJ);p5r=r(txt,"from_pretrained()"),txt.forEach(t),_5r=r(Ure," to load the model weights."),Ure.forEach(t),b5r=i(QL),T(HC.$$.fragment,QL),QL.forEach(t),v5r=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(J9.$$.fragment,Bl),F5r=i(Bl),h4e=n(Bl,"P",{});var axt=s(h4e);T5r=r(axt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),axt.forEach(t),M5r=i(Bl),cn=n(Bl,"P",{});var WL=s(cn);E5r=r(WL,"The model class to instantiate is selected based on the "),u4e=n(WL,"CODE",{});var nxt=s(u4e);C5r=r(nxt,"model_type"),nxt.forEach(t),w5r=r(WL,` property of the config object (either
passed as an argument or loaded from `),p4e=n(WL,"CODE",{});var sxt=s(p4e);A5r=r(sxt,"pretrained_model_name_or_path"),sxt.forEach(t),L5r=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=n(WL,"CODE",{});var lxt=s(_4e);y5r=r(lxt,"pretrained_model_name_or_path"),lxt.forEach(t),x5r=r(WL,":"),WL.forEach(t),$5r=i(Bl),ie=n(Bl,"UL",{});var me=s(ie);UC=n(me,"LI",{});var vqe=s(UC);b4e=n(vqe,"STRONG",{});var ixt=s(b4e);k5r=r(ixt,"albert"),ixt.forEach(t),S5r=r(vqe," \u2014 "),EJ=n(vqe,"A",{href:!0});var dxt=s(EJ);R5r=r(dxt,"TFAlbertForMaskedLM"),dxt.forEach(t),P5r=r(vqe," (ALBERT model)"),vqe.forEach(t),B5r=i(me),JC=n(me,"LI",{});var Fqe=s(JC);v4e=n(Fqe,"STRONG",{});var cxt=s(v4e);I5r=r(cxt,"bert"),cxt.forEach(t),N5r=r(Fqe," \u2014 "),CJ=n(Fqe,"A",{href:!0});var mxt=s(CJ);q5r=r(mxt,"TFBertForMaskedLM"),mxt.forEach(t),j5r=r(Fqe," (BERT model)"),Fqe.forEach(t),D5r=i(me),YC=n(me,"LI",{});var Tqe=s(YC);F4e=n(Tqe,"STRONG",{});var fxt=s(F4e);G5r=r(fxt,"camembert"),fxt.forEach(t),O5r=r(Tqe," \u2014 "),wJ=n(Tqe,"A",{href:!0});var gxt=s(wJ);V5r=r(gxt,"TFCamembertForMaskedLM"),gxt.forEach(t),X5r=r(Tqe," (CamemBERT model)"),Tqe.forEach(t),z5r=i(me),KC=n(me,"LI",{});var Mqe=s(KC);T4e=n(Mqe,"STRONG",{});var hxt=s(T4e);Q5r=r(hxt,"convbert"),hxt.forEach(t),W5r=r(Mqe," \u2014 "),AJ=n(Mqe,"A",{href:!0});var uxt=s(AJ);H5r=r(uxt,"TFConvBertForMaskedLM"),uxt.forEach(t),U5r=r(Mqe," (ConvBERT model)"),Mqe.forEach(t),J5r=i(me),ZC=n(me,"LI",{});var Eqe=s(ZC);M4e=n(Eqe,"STRONG",{});var pxt=s(M4e);Y5r=r(pxt,"deberta"),pxt.forEach(t),K5r=r(Eqe," \u2014 "),LJ=n(Eqe,"A",{href:!0});var _xt=s(LJ);Z5r=r(_xt,"TFDebertaForMaskedLM"),_xt.forEach(t),e0r=r(Eqe," (DeBERTa model)"),Eqe.forEach(t),o0r=i(me),e3=n(me,"LI",{});var Cqe=s(e3);E4e=n(Cqe,"STRONG",{});var bxt=s(E4e);r0r=r(bxt,"deberta-v2"),bxt.forEach(t),t0r=r(Cqe," \u2014 "),yJ=n(Cqe,"A",{href:!0});var vxt=s(yJ);a0r=r(vxt,"TFDebertaV2ForMaskedLM"),vxt.forEach(t),n0r=r(Cqe," (DeBERTa-v2 model)"),Cqe.forEach(t),s0r=i(me),o3=n(me,"LI",{});var wqe=s(o3);C4e=n(wqe,"STRONG",{});var Fxt=s(C4e);l0r=r(Fxt,"distilbert"),Fxt.forEach(t),i0r=r(wqe," \u2014 "),xJ=n(wqe,"A",{href:!0});var Txt=s(xJ);d0r=r(Txt,"TFDistilBertForMaskedLM"),Txt.forEach(t),c0r=r(wqe," (DistilBERT model)"),wqe.forEach(t),m0r=i(me),r3=n(me,"LI",{});var Aqe=s(r3);w4e=n(Aqe,"STRONG",{});var Mxt=s(w4e);f0r=r(Mxt,"electra"),Mxt.forEach(t),g0r=r(Aqe," \u2014 "),$J=n(Aqe,"A",{href:!0});var Ext=s($J);h0r=r(Ext,"TFElectraForMaskedLM"),Ext.forEach(t),u0r=r(Aqe," (ELECTRA model)"),Aqe.forEach(t),p0r=i(me),t3=n(me,"LI",{});var Lqe=s(t3);A4e=n(Lqe,"STRONG",{});var Cxt=s(A4e);_0r=r(Cxt,"flaubert"),Cxt.forEach(t),b0r=r(Lqe," \u2014 "),kJ=n(Lqe,"A",{href:!0});var wxt=s(kJ);v0r=r(wxt,"TFFlaubertWithLMHeadModel"),wxt.forEach(t),F0r=r(Lqe," (FlauBERT model)"),Lqe.forEach(t),T0r=i(me),a3=n(me,"LI",{});var yqe=s(a3);L4e=n(yqe,"STRONG",{});var Axt=s(L4e);M0r=r(Axt,"funnel"),Axt.forEach(t),E0r=r(yqe," \u2014 "),SJ=n(yqe,"A",{href:!0});var Lxt=s(SJ);C0r=r(Lxt,"TFFunnelForMaskedLM"),Lxt.forEach(t),w0r=r(yqe," (Funnel Transformer model)"),yqe.forEach(t),A0r=i(me),n3=n(me,"LI",{});var xqe=s(n3);y4e=n(xqe,"STRONG",{});var yxt=s(y4e);L0r=r(yxt,"layoutlm"),yxt.forEach(t),y0r=r(xqe," \u2014 "),RJ=n(xqe,"A",{href:!0});var xxt=s(RJ);x0r=r(xxt,"TFLayoutLMForMaskedLM"),xxt.forEach(t),$0r=r(xqe," (LayoutLM model)"),xqe.forEach(t),k0r=i(me),s3=n(me,"LI",{});var $qe=s(s3);x4e=n($qe,"STRONG",{});var $xt=s(x4e);S0r=r($xt,"longformer"),$xt.forEach(t),R0r=r($qe," \u2014 "),PJ=n($qe,"A",{href:!0});var kxt=s(PJ);P0r=r(kxt,"TFLongformerForMaskedLM"),kxt.forEach(t),B0r=r($qe," (Longformer model)"),$qe.forEach(t),I0r=i(me),l3=n(me,"LI",{});var kqe=s(l3);$4e=n(kqe,"STRONG",{});var Sxt=s($4e);N0r=r(Sxt,"mobilebert"),Sxt.forEach(t),q0r=r(kqe," \u2014 "),BJ=n(kqe,"A",{href:!0});var Rxt=s(BJ);j0r=r(Rxt,"TFMobileBertForMaskedLM"),Rxt.forEach(t),D0r=r(kqe," (MobileBERT model)"),kqe.forEach(t),G0r=i(me),i3=n(me,"LI",{});var Sqe=s(i3);k4e=n(Sqe,"STRONG",{});var Pxt=s(k4e);O0r=r(Pxt,"mpnet"),Pxt.forEach(t),V0r=r(Sqe," \u2014 "),IJ=n(Sqe,"A",{href:!0});var Bxt=s(IJ);X0r=r(Bxt,"TFMPNetForMaskedLM"),Bxt.forEach(t),z0r=r(Sqe," (MPNet model)"),Sqe.forEach(t),Q0r=i(me),d3=n(me,"LI",{});var Rqe=s(d3);S4e=n(Rqe,"STRONG",{});var Ixt=s(S4e);W0r=r(Ixt,"rembert"),Ixt.forEach(t),H0r=r(Rqe," \u2014 "),NJ=n(Rqe,"A",{href:!0});var Nxt=s(NJ);U0r=r(Nxt,"TFRemBertForMaskedLM"),Nxt.forEach(t),J0r=r(Rqe," (RemBERT model)"),Rqe.forEach(t),Y0r=i(me),c3=n(me,"LI",{});var Pqe=s(c3);R4e=n(Pqe,"STRONG",{});var qxt=s(R4e);K0r=r(qxt,"roberta"),qxt.forEach(t),Z0r=r(Pqe," \u2014 "),qJ=n(Pqe,"A",{href:!0});var jxt=s(qJ);ewr=r(jxt,"TFRobertaForMaskedLM"),jxt.forEach(t),owr=r(Pqe," (RoBERTa model)"),Pqe.forEach(t),rwr=i(me),m3=n(me,"LI",{});var Bqe=s(m3);P4e=n(Bqe,"STRONG",{});var Dxt=s(P4e);twr=r(Dxt,"roformer"),Dxt.forEach(t),awr=r(Bqe," \u2014 "),jJ=n(Bqe,"A",{href:!0});var Gxt=s(jJ);nwr=r(Gxt,"TFRoFormerForMaskedLM"),Gxt.forEach(t),swr=r(Bqe," (RoFormer model)"),Bqe.forEach(t),lwr=i(me),f3=n(me,"LI",{});var Iqe=s(f3);B4e=n(Iqe,"STRONG",{});var Oxt=s(B4e);iwr=r(Oxt,"tapas"),Oxt.forEach(t),dwr=r(Iqe," \u2014 "),DJ=n(Iqe,"A",{href:!0});var Vxt=s(DJ);cwr=r(Vxt,"TFTapasForMaskedLM"),Vxt.forEach(t),mwr=r(Iqe," (TAPAS model)"),Iqe.forEach(t),fwr=i(me),g3=n(me,"LI",{});var Nqe=s(g3);I4e=n(Nqe,"STRONG",{});var Xxt=s(I4e);gwr=r(Xxt,"xlm"),Xxt.forEach(t),hwr=r(Nqe," \u2014 "),GJ=n(Nqe,"A",{href:!0});var zxt=s(GJ);uwr=r(zxt,"TFXLMWithLMHeadModel"),zxt.forEach(t),pwr=r(Nqe," (XLM model)"),Nqe.forEach(t),_wr=i(me),h3=n(me,"LI",{});var qqe=s(h3);N4e=n(qqe,"STRONG",{});var Qxt=s(N4e);bwr=r(Qxt,"xlm-roberta"),Qxt.forEach(t),vwr=r(qqe," \u2014 "),OJ=n(qqe,"A",{href:!0});var Wxt=s(OJ);Fwr=r(Wxt,"TFXLMRobertaForMaskedLM"),Wxt.forEach(t),Twr=r(qqe," (XLM-RoBERTa model)"),qqe.forEach(t),me.forEach(t),Mwr=i(Bl),T(u3.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),HVe=i(m),bc=n(m,"H2",{class:!0});var rQe=s(bc);p3=n(rQe,"A",{id:!0,class:!0,href:!0});var Hxt=s(p3);q4e=n(Hxt,"SPAN",{});var Uxt=s(q4e);T(Y9.$$.fragment,Uxt),Uxt.forEach(t),Hxt.forEach(t),Ewr=i(rQe),j4e=n(rQe,"SPAN",{});var Jxt=s(j4e);Cwr=r(Jxt,"TFAutoModelForSeq2SeqLM"),Jxt.forEach(t),rQe.forEach(t),UVe=i(m),nr=n(m,"DIV",{class:!0});var Il=s(nr);T(K9.$$.fragment,Il),wwr=i(Il),vc=n(Il,"P",{});var Jre=s(vc);Awr=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VJ=n(Jre,"A",{href:!0});var Yxt=s(VJ);Lwr=r(Yxt,"from_pretrained()"),Yxt.forEach(t),ywr=r(Jre," class method or the "),XJ=n(Jre,"A",{href:!0});var Kxt=s(XJ);xwr=r(Kxt,"from_config()"),Kxt.forEach(t),$wr=r(Jre,` class
method.`),Jre.forEach(t),kwr=i(Il),Z9=n(Il,"P",{});var tQe=s(Z9);Swr=r(tQe,"This class cannot be instantiated directly using "),D4e=n(tQe,"CODE",{});var Zxt=s(D4e);Rwr=r(Zxt,"__init__()"),Zxt.forEach(t),Pwr=r(tQe," (throws an error)."),tQe.forEach(t),Bwr=i(Il),It=n(Il,"DIV",{class:!0});var HL=s(It);T(ex.$$.fragment,HL),Iwr=i(HL),G4e=n(HL,"P",{});var e$t=s(G4e);Nwr=r(e$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),e$t.forEach(t),qwr=i(HL),Fc=n(HL,"P",{});var Yre=s(Fc);jwr=r(Yre,`Note:
Loading a model from its configuration file does `),O4e=n(Yre,"STRONG",{});var o$t=s(O4e);Dwr=r(o$t,"not"),o$t.forEach(t),Gwr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(Yre,"A",{href:!0});var r$t=s(zJ);Owr=r(r$t,"from_pretrained()"),r$t.forEach(t),Vwr=r(Yre," to load the model weights."),Yre.forEach(t),Xwr=i(HL),T(_3.$$.fragment,HL),HL.forEach(t),zwr=i(Il),Rr=n(Il,"DIV",{class:!0});var Nl=s(Rr);T(ox.$$.fragment,Nl),Qwr=i(Nl),V4e=n(Nl,"P",{});var t$t=s(V4e);Wwr=r(t$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t$t.forEach(t),Hwr=i(Nl),mn=n(Nl,"P",{});var UL=s(mn);Uwr=r(UL,"The model class to instantiate is selected based on the "),X4e=n(UL,"CODE",{});var a$t=s(X4e);Jwr=r(a$t,"model_type"),a$t.forEach(t),Ywr=r(UL,` property of the config object (either
passed as an argument or loaded from `),z4e=n(UL,"CODE",{});var n$t=s(z4e);Kwr=r(n$t,"pretrained_model_name_or_path"),n$t.forEach(t),Zwr=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(UL,"CODE",{});var s$t=s(Q4e);eAr=r(s$t,"pretrained_model_name_or_path"),s$t.forEach(t),oAr=r(UL,":"),UL.forEach(t),rAr=i(Nl),ye=n(Nl,"UL",{});var Ie=s(ye);b3=n(Ie,"LI",{});var jqe=s(b3);W4e=n(jqe,"STRONG",{});var l$t=s(W4e);tAr=r(l$t,"bart"),l$t.forEach(t),aAr=r(jqe," \u2014 "),QJ=n(jqe,"A",{href:!0});var i$t=s(QJ);nAr=r(i$t,"TFBartForConditionalGeneration"),i$t.forEach(t),sAr=r(jqe," (BART model)"),jqe.forEach(t),lAr=i(Ie),v3=n(Ie,"LI",{});var Dqe=s(v3);H4e=n(Dqe,"STRONG",{});var d$t=s(H4e);iAr=r(d$t,"blenderbot"),d$t.forEach(t),dAr=r(Dqe," \u2014 "),WJ=n(Dqe,"A",{href:!0});var c$t=s(WJ);cAr=r(c$t,"TFBlenderbotForConditionalGeneration"),c$t.forEach(t),mAr=r(Dqe," (Blenderbot model)"),Dqe.forEach(t),fAr=i(Ie),F3=n(Ie,"LI",{});var Gqe=s(F3);U4e=n(Gqe,"STRONG",{});var m$t=s(U4e);gAr=r(m$t,"blenderbot-small"),m$t.forEach(t),hAr=r(Gqe," \u2014 "),HJ=n(Gqe,"A",{href:!0});var f$t=s(HJ);uAr=r(f$t,"TFBlenderbotSmallForConditionalGeneration"),f$t.forEach(t),pAr=r(Gqe," (BlenderbotSmall model)"),Gqe.forEach(t),_Ar=i(Ie),T3=n(Ie,"LI",{});var Oqe=s(T3);J4e=n(Oqe,"STRONG",{});var g$t=s(J4e);bAr=r(g$t,"encoder-decoder"),g$t.forEach(t),vAr=r(Oqe," \u2014 "),UJ=n(Oqe,"A",{href:!0});var h$t=s(UJ);FAr=r(h$t,"TFEncoderDecoderModel"),h$t.forEach(t),TAr=r(Oqe," (Encoder decoder model)"),Oqe.forEach(t),MAr=i(Ie),M3=n(Ie,"LI",{});var Vqe=s(M3);Y4e=n(Vqe,"STRONG",{});var u$t=s(Y4e);EAr=r(u$t,"led"),u$t.forEach(t),CAr=r(Vqe," \u2014 "),JJ=n(Vqe,"A",{href:!0});var p$t=s(JJ);wAr=r(p$t,"TFLEDForConditionalGeneration"),p$t.forEach(t),AAr=r(Vqe," (LED model)"),Vqe.forEach(t),LAr=i(Ie),E3=n(Ie,"LI",{});var Xqe=s(E3);K4e=n(Xqe,"STRONG",{});var _$t=s(K4e);yAr=r(_$t,"marian"),_$t.forEach(t),xAr=r(Xqe," \u2014 "),YJ=n(Xqe,"A",{href:!0});var b$t=s(YJ);$Ar=r(b$t,"TFMarianMTModel"),b$t.forEach(t),kAr=r(Xqe," (Marian model)"),Xqe.forEach(t),SAr=i(Ie),C3=n(Ie,"LI",{});var zqe=s(C3);Z4e=n(zqe,"STRONG",{});var v$t=s(Z4e);RAr=r(v$t,"mbart"),v$t.forEach(t),PAr=r(zqe," \u2014 "),KJ=n(zqe,"A",{href:!0});var F$t=s(KJ);BAr=r(F$t,"TFMBartForConditionalGeneration"),F$t.forEach(t),IAr=r(zqe," (mBART model)"),zqe.forEach(t),NAr=i(Ie),w3=n(Ie,"LI",{});var Qqe=s(w3);eEe=n(Qqe,"STRONG",{});var T$t=s(eEe);qAr=r(T$t,"mt5"),T$t.forEach(t),jAr=r(Qqe," \u2014 "),ZJ=n(Qqe,"A",{href:!0});var M$t=s(ZJ);DAr=r(M$t,"TFMT5ForConditionalGeneration"),M$t.forEach(t),GAr=r(Qqe," (MT5 model)"),Qqe.forEach(t),OAr=i(Ie),A3=n(Ie,"LI",{});var Wqe=s(A3);oEe=n(Wqe,"STRONG",{});var E$t=s(oEe);VAr=r(E$t,"pegasus"),E$t.forEach(t),XAr=r(Wqe," \u2014 "),eY=n(Wqe,"A",{href:!0});var C$t=s(eY);zAr=r(C$t,"TFPegasusForConditionalGeneration"),C$t.forEach(t),QAr=r(Wqe," (Pegasus model)"),Wqe.forEach(t),WAr=i(Ie),L3=n(Ie,"LI",{});var Hqe=s(L3);rEe=n(Hqe,"STRONG",{});var w$t=s(rEe);HAr=r(w$t,"t5"),w$t.forEach(t),UAr=r(Hqe," \u2014 "),oY=n(Hqe,"A",{href:!0});var A$t=s(oY);JAr=r(A$t,"TFT5ForConditionalGeneration"),A$t.forEach(t),YAr=r(Hqe," (T5 model)"),Hqe.forEach(t),Ie.forEach(t),KAr=i(Nl),T(y3.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),JVe=i(m),Tc=n(m,"H2",{class:!0});var aQe=s(Tc);x3=n(aQe,"A",{id:!0,class:!0,href:!0});var L$t=s(x3);tEe=n(L$t,"SPAN",{});var y$t=s(tEe);T(rx.$$.fragment,y$t),y$t.forEach(t),L$t.forEach(t),ZAr=i(aQe),aEe=n(aQe,"SPAN",{});var x$t=s(aEe);e6r=r(x$t,"TFAutoModelForSequenceClassification"),x$t.forEach(t),aQe.forEach(t),YVe=i(m),sr=n(m,"DIV",{class:!0});var ql=s(sr);T(tx.$$.fragment,ql),o6r=i(ql),Mc=n(ql,"P",{});var Kre=s(Mc);r6r=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rY=n(Kre,"A",{href:!0});var $$t=s(rY);t6r=r($$t,"from_pretrained()"),$$t.forEach(t),a6r=r(Kre," class method or the "),tY=n(Kre,"A",{href:!0});var k$t=s(tY);n6r=r(k$t,"from_config()"),k$t.forEach(t),s6r=r(Kre,` class
method.`),Kre.forEach(t),l6r=i(ql),ax=n(ql,"P",{});var nQe=s(ax);i6r=r(nQe,"This class cannot be instantiated directly using "),nEe=n(nQe,"CODE",{});var S$t=s(nEe);d6r=r(S$t,"__init__()"),S$t.forEach(t),c6r=r(nQe," (throws an error)."),nQe.forEach(t),m6r=i(ql),Nt=n(ql,"DIV",{class:!0});var JL=s(Nt);T(nx.$$.fragment,JL),f6r=i(JL),sEe=n(JL,"P",{});var R$t=s(sEe);g6r=r(R$t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),R$t.forEach(t),h6r=i(JL),Ec=n(JL,"P",{});var Zre=s(Ec);u6r=r(Zre,`Note:
Loading a model from its configuration file does `),lEe=n(Zre,"STRONG",{});var P$t=s(lEe);p6r=r(P$t,"not"),P$t.forEach(t),_6r=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aY=n(Zre,"A",{href:!0});var B$t=s(aY);b6r=r(B$t,"from_pretrained()"),B$t.forEach(t),v6r=r(Zre," to load the model weights."),Zre.forEach(t),F6r=i(JL),T($3.$$.fragment,JL),JL.forEach(t),T6r=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(sx.$$.fragment,jl),M6r=i(jl),iEe=n(jl,"P",{});var I$t=s(iEe);E6r=r(I$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),I$t.forEach(t),C6r=i(jl),fn=n(jl,"P",{});var YL=s(fn);w6r=r(YL,"The model class to instantiate is selected based on the "),dEe=n(YL,"CODE",{});var N$t=s(dEe);A6r=r(N$t,"model_type"),N$t.forEach(t),L6r=r(YL,` property of the config object (either
passed as an argument or loaded from `),cEe=n(YL,"CODE",{});var q$t=s(cEe);y6r=r(q$t,"pretrained_model_name_or_path"),q$t.forEach(t),x6r=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=n(YL,"CODE",{});var j$t=s(mEe);$6r=r(j$t,"pretrained_model_name_or_path"),j$t.forEach(t),k6r=r(YL,":"),YL.forEach(t),S6r=i(jl),te=n(jl,"UL",{});var ne=s(te);k3=n(ne,"LI",{});var Uqe=s(k3);fEe=n(Uqe,"STRONG",{});var D$t=s(fEe);R6r=r(D$t,"albert"),D$t.forEach(t),P6r=r(Uqe," \u2014 "),nY=n(Uqe,"A",{href:!0});var G$t=s(nY);B6r=r(G$t,"TFAlbertForSequenceClassification"),G$t.forEach(t),I6r=r(Uqe," (ALBERT model)"),Uqe.forEach(t),N6r=i(ne),S3=n(ne,"LI",{});var Jqe=s(S3);gEe=n(Jqe,"STRONG",{});var O$t=s(gEe);q6r=r(O$t,"bert"),O$t.forEach(t),j6r=r(Jqe," \u2014 "),sY=n(Jqe,"A",{href:!0});var V$t=s(sY);D6r=r(V$t,"TFBertForSequenceClassification"),V$t.forEach(t),G6r=r(Jqe," (BERT model)"),Jqe.forEach(t),O6r=i(ne),R3=n(ne,"LI",{});var Yqe=s(R3);hEe=n(Yqe,"STRONG",{});var X$t=s(hEe);V6r=r(X$t,"camembert"),X$t.forEach(t),X6r=r(Yqe," \u2014 "),lY=n(Yqe,"A",{href:!0});var z$t=s(lY);z6r=r(z$t,"TFCamembertForSequenceClassification"),z$t.forEach(t),Q6r=r(Yqe," (CamemBERT model)"),Yqe.forEach(t),W6r=i(ne),P3=n(ne,"LI",{});var Kqe=s(P3);uEe=n(Kqe,"STRONG",{});var Q$t=s(uEe);H6r=r(Q$t,"convbert"),Q$t.forEach(t),U6r=r(Kqe," \u2014 "),iY=n(Kqe,"A",{href:!0});var W$t=s(iY);J6r=r(W$t,"TFConvBertForSequenceClassification"),W$t.forEach(t),Y6r=r(Kqe," (ConvBERT model)"),Kqe.forEach(t),K6r=i(ne),B3=n(ne,"LI",{});var Zqe=s(B3);pEe=n(Zqe,"STRONG",{});var H$t=s(pEe);Z6r=r(H$t,"ctrl"),H$t.forEach(t),eLr=r(Zqe," \u2014 "),dY=n(Zqe,"A",{href:!0});var U$t=s(dY);oLr=r(U$t,"TFCTRLForSequenceClassification"),U$t.forEach(t),rLr=r(Zqe," (CTRL model)"),Zqe.forEach(t),tLr=i(ne),I3=n(ne,"LI",{});var eje=s(I3);_Ee=n(eje,"STRONG",{});var J$t=s(_Ee);aLr=r(J$t,"deberta"),J$t.forEach(t),nLr=r(eje," \u2014 "),cY=n(eje,"A",{href:!0});var Y$t=s(cY);sLr=r(Y$t,"TFDebertaForSequenceClassification"),Y$t.forEach(t),lLr=r(eje," (DeBERTa model)"),eje.forEach(t),iLr=i(ne),N3=n(ne,"LI",{});var oje=s(N3);bEe=n(oje,"STRONG",{});var K$t=s(bEe);dLr=r(K$t,"deberta-v2"),K$t.forEach(t),cLr=r(oje," \u2014 "),mY=n(oje,"A",{href:!0});var Z$t=s(mY);mLr=r(Z$t,"TFDebertaV2ForSequenceClassification"),Z$t.forEach(t),fLr=r(oje," (DeBERTa-v2 model)"),oje.forEach(t),gLr=i(ne),q3=n(ne,"LI",{});var rje=s(q3);vEe=n(rje,"STRONG",{});var ekt=s(vEe);hLr=r(ekt,"distilbert"),ekt.forEach(t),uLr=r(rje," \u2014 "),fY=n(rje,"A",{href:!0});var okt=s(fY);pLr=r(okt,"TFDistilBertForSequenceClassification"),okt.forEach(t),_Lr=r(rje," (DistilBERT model)"),rje.forEach(t),bLr=i(ne),j3=n(ne,"LI",{});var tje=s(j3);FEe=n(tje,"STRONG",{});var rkt=s(FEe);vLr=r(rkt,"electra"),rkt.forEach(t),FLr=r(tje," \u2014 "),gY=n(tje,"A",{href:!0});var tkt=s(gY);TLr=r(tkt,"TFElectraForSequenceClassification"),tkt.forEach(t),MLr=r(tje," (ELECTRA model)"),tje.forEach(t),ELr=i(ne),D3=n(ne,"LI",{});var aje=s(D3);TEe=n(aje,"STRONG",{});var akt=s(TEe);CLr=r(akt,"flaubert"),akt.forEach(t),wLr=r(aje," \u2014 "),hY=n(aje,"A",{href:!0});var nkt=s(hY);ALr=r(nkt,"TFFlaubertForSequenceClassification"),nkt.forEach(t),LLr=r(aje," (FlauBERT model)"),aje.forEach(t),yLr=i(ne),G3=n(ne,"LI",{});var nje=s(G3);MEe=n(nje,"STRONG",{});var skt=s(MEe);xLr=r(skt,"funnel"),skt.forEach(t),$Lr=r(nje," \u2014 "),uY=n(nje,"A",{href:!0});var lkt=s(uY);kLr=r(lkt,"TFFunnelForSequenceClassification"),lkt.forEach(t),SLr=r(nje," (Funnel Transformer model)"),nje.forEach(t),RLr=i(ne),O3=n(ne,"LI",{});var sje=s(O3);EEe=n(sje,"STRONG",{});var ikt=s(EEe);PLr=r(ikt,"gpt2"),ikt.forEach(t),BLr=r(sje," \u2014 "),pY=n(sje,"A",{href:!0});var dkt=s(pY);ILr=r(dkt,"TFGPT2ForSequenceClassification"),dkt.forEach(t),NLr=r(sje," (OpenAI GPT-2 model)"),sje.forEach(t),qLr=i(ne),V3=n(ne,"LI",{});var lje=s(V3);CEe=n(lje,"STRONG",{});var ckt=s(CEe);jLr=r(ckt,"gptj"),ckt.forEach(t),DLr=r(lje," \u2014 "),_Y=n(lje,"A",{href:!0});var mkt=s(_Y);GLr=r(mkt,"TFGPTJForSequenceClassification"),mkt.forEach(t),OLr=r(lje," (GPT-J model)"),lje.forEach(t),VLr=i(ne),X3=n(ne,"LI",{});var ije=s(X3);wEe=n(ije,"STRONG",{});var fkt=s(wEe);XLr=r(fkt,"layoutlm"),fkt.forEach(t),zLr=r(ije," \u2014 "),bY=n(ije,"A",{href:!0});var gkt=s(bY);QLr=r(gkt,"TFLayoutLMForSequenceClassification"),gkt.forEach(t),WLr=r(ije," (LayoutLM model)"),ije.forEach(t),HLr=i(ne),z3=n(ne,"LI",{});var dje=s(z3);AEe=n(dje,"STRONG",{});var hkt=s(AEe);ULr=r(hkt,"longformer"),hkt.forEach(t),JLr=r(dje," \u2014 "),vY=n(dje,"A",{href:!0});var ukt=s(vY);YLr=r(ukt,"TFLongformerForSequenceClassification"),ukt.forEach(t),KLr=r(dje," (Longformer model)"),dje.forEach(t),ZLr=i(ne),Q3=n(ne,"LI",{});var cje=s(Q3);LEe=n(cje,"STRONG",{});var pkt=s(LEe);e7r=r(pkt,"mobilebert"),pkt.forEach(t),o7r=r(cje," \u2014 "),FY=n(cje,"A",{href:!0});var _kt=s(FY);r7r=r(_kt,"TFMobileBertForSequenceClassification"),_kt.forEach(t),t7r=r(cje," (MobileBERT model)"),cje.forEach(t),a7r=i(ne),W3=n(ne,"LI",{});var mje=s(W3);yEe=n(mje,"STRONG",{});var bkt=s(yEe);n7r=r(bkt,"mpnet"),bkt.forEach(t),s7r=r(mje," \u2014 "),TY=n(mje,"A",{href:!0});var vkt=s(TY);l7r=r(vkt,"TFMPNetForSequenceClassification"),vkt.forEach(t),i7r=r(mje," (MPNet model)"),mje.forEach(t),d7r=i(ne),H3=n(ne,"LI",{});var fje=s(H3);xEe=n(fje,"STRONG",{});var Fkt=s(xEe);c7r=r(Fkt,"openai-gpt"),Fkt.forEach(t),m7r=r(fje," \u2014 "),MY=n(fje,"A",{href:!0});var Tkt=s(MY);f7r=r(Tkt,"TFOpenAIGPTForSequenceClassification"),Tkt.forEach(t),g7r=r(fje," (OpenAI GPT model)"),fje.forEach(t),h7r=i(ne),U3=n(ne,"LI",{});var gje=s(U3);$Ee=n(gje,"STRONG",{});var Mkt=s($Ee);u7r=r(Mkt,"rembert"),Mkt.forEach(t),p7r=r(gje," \u2014 "),EY=n(gje,"A",{href:!0});var Ekt=s(EY);_7r=r(Ekt,"TFRemBertForSequenceClassification"),Ekt.forEach(t),b7r=r(gje," (RemBERT model)"),gje.forEach(t),v7r=i(ne),J3=n(ne,"LI",{});var hje=s(J3);kEe=n(hje,"STRONG",{});var Ckt=s(kEe);F7r=r(Ckt,"roberta"),Ckt.forEach(t),T7r=r(hje," \u2014 "),CY=n(hje,"A",{href:!0});var wkt=s(CY);M7r=r(wkt,"TFRobertaForSequenceClassification"),wkt.forEach(t),E7r=r(hje," (RoBERTa model)"),hje.forEach(t),C7r=i(ne),Y3=n(ne,"LI",{});var uje=s(Y3);SEe=n(uje,"STRONG",{});var Akt=s(SEe);w7r=r(Akt,"roformer"),Akt.forEach(t),A7r=r(uje," \u2014 "),wY=n(uje,"A",{href:!0});var Lkt=s(wY);L7r=r(Lkt,"TFRoFormerForSequenceClassification"),Lkt.forEach(t),y7r=r(uje," (RoFormer model)"),uje.forEach(t),x7r=i(ne),K3=n(ne,"LI",{});var pje=s(K3);REe=n(pje,"STRONG",{});var ykt=s(REe);$7r=r(ykt,"tapas"),ykt.forEach(t),k7r=r(pje," \u2014 "),AY=n(pje,"A",{href:!0});var xkt=s(AY);S7r=r(xkt,"TFTapasForSequenceClassification"),xkt.forEach(t),R7r=r(pje," (TAPAS model)"),pje.forEach(t),P7r=i(ne),Z3=n(ne,"LI",{});var _je=s(Z3);PEe=n(_je,"STRONG",{});var $kt=s(PEe);B7r=r($kt,"transfo-xl"),$kt.forEach(t),I7r=r(_je," \u2014 "),LY=n(_je,"A",{href:!0});var kkt=s(LY);N7r=r(kkt,"TFTransfoXLForSequenceClassification"),kkt.forEach(t),q7r=r(_je," (Transformer-XL model)"),_je.forEach(t),j7r=i(ne),e5=n(ne,"LI",{});var bje=s(e5);BEe=n(bje,"STRONG",{});var Skt=s(BEe);D7r=r(Skt,"xlm"),Skt.forEach(t),G7r=r(bje," \u2014 "),yY=n(bje,"A",{href:!0});var Rkt=s(yY);O7r=r(Rkt,"TFXLMForSequenceClassification"),Rkt.forEach(t),V7r=r(bje," (XLM model)"),bje.forEach(t),X7r=i(ne),o5=n(ne,"LI",{});var vje=s(o5);IEe=n(vje,"STRONG",{});var Pkt=s(IEe);z7r=r(Pkt,"xlm-roberta"),Pkt.forEach(t),Q7r=r(vje," \u2014 "),xY=n(vje,"A",{href:!0});var Bkt=s(xY);W7r=r(Bkt,"TFXLMRobertaForSequenceClassification"),Bkt.forEach(t),H7r=r(vje," (XLM-RoBERTa model)"),vje.forEach(t),U7r=i(ne),r5=n(ne,"LI",{});var Fje=s(r5);NEe=n(Fje,"STRONG",{});var Ikt=s(NEe);J7r=r(Ikt,"xlnet"),Ikt.forEach(t),Y7r=r(Fje," \u2014 "),$Y=n(Fje,"A",{href:!0});var Nkt=s($Y);K7r=r(Nkt,"TFXLNetForSequenceClassification"),Nkt.forEach(t),Z7r=r(Fje," (XLNet model)"),Fje.forEach(t),ne.forEach(t),eyr=i(jl),T(t5.$$.fragment,jl),jl.forEach(t),ql.forEach(t),KVe=i(m),Cc=n(m,"H2",{class:!0});var sQe=s(Cc);a5=n(sQe,"A",{id:!0,class:!0,href:!0});var qkt=s(a5);qEe=n(qkt,"SPAN",{});var jkt=s(qEe);T(lx.$$.fragment,jkt),jkt.forEach(t),qkt.forEach(t),oyr=i(sQe),jEe=n(sQe,"SPAN",{});var Dkt=s(jEe);ryr=r(Dkt,"TFAutoModelForMultipleChoice"),Dkt.forEach(t),sQe.forEach(t),ZVe=i(m),lr=n(m,"DIV",{class:!0});var Dl=s(lr);T(ix.$$.fragment,Dl),tyr=i(Dl),wc=n(Dl,"P",{});var ete=s(wc);ayr=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),kY=n(ete,"A",{href:!0});var Gkt=s(kY);nyr=r(Gkt,"from_pretrained()"),Gkt.forEach(t),syr=r(ete," class method or the "),SY=n(ete,"A",{href:!0});var Okt=s(SY);lyr=r(Okt,"from_config()"),Okt.forEach(t),iyr=r(ete,` class
method.`),ete.forEach(t),dyr=i(Dl),dx=n(Dl,"P",{});var lQe=s(dx);cyr=r(lQe,"This class cannot be instantiated directly using "),DEe=n(lQe,"CODE",{});var Vkt=s(DEe);myr=r(Vkt,"__init__()"),Vkt.forEach(t),fyr=r(lQe," (throws an error)."),lQe.forEach(t),gyr=i(Dl),qt=n(Dl,"DIV",{class:!0});var KL=s(qt);T(cx.$$.fragment,KL),hyr=i(KL),GEe=n(KL,"P",{});var Xkt=s(GEe);uyr=r(Xkt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Xkt.forEach(t),pyr=i(KL),Ac=n(KL,"P",{});var ote=s(Ac);_yr=r(ote,`Note:
Loading a model from its configuration file does `),OEe=n(ote,"STRONG",{});var zkt=s(OEe);byr=r(zkt,"not"),zkt.forEach(t),vyr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(ote,"A",{href:!0});var Qkt=s(RY);Fyr=r(Qkt,"from_pretrained()"),Qkt.forEach(t),Tyr=r(ote," to load the model weights."),ote.forEach(t),Myr=i(KL),T(n5.$$.fragment,KL),KL.forEach(t),Eyr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(mx.$$.fragment,Gl),Cyr=i(Gl),VEe=n(Gl,"P",{});var Wkt=s(VEe);wyr=r(Wkt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wkt.forEach(t),Ayr=i(Gl),gn=n(Gl,"P",{});var ZL=s(gn);Lyr=r(ZL,"The model class to instantiate is selected based on the "),XEe=n(ZL,"CODE",{});var Hkt=s(XEe);yyr=r(Hkt,"model_type"),Hkt.forEach(t),xyr=r(ZL,` property of the config object (either
passed as an argument or loaded from `),zEe=n(ZL,"CODE",{});var Ukt=s(zEe);$yr=r(Ukt,"pretrained_model_name_or_path"),Ukt.forEach(t),kyr=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=n(ZL,"CODE",{});var Jkt=s(QEe);Syr=r(Jkt,"pretrained_model_name_or_path"),Jkt.forEach(t),Ryr=r(ZL,":"),ZL.forEach(t),Pyr=i(Gl),pe=n(Gl,"UL",{});var ve=s(pe);s5=n(ve,"LI",{});var Tje=s(s5);WEe=n(Tje,"STRONG",{});var Ykt=s(WEe);Byr=r(Ykt,"albert"),Ykt.forEach(t),Iyr=r(Tje," \u2014 "),PY=n(Tje,"A",{href:!0});var Kkt=s(PY);Nyr=r(Kkt,"TFAlbertForMultipleChoice"),Kkt.forEach(t),qyr=r(Tje," (ALBERT model)"),Tje.forEach(t),jyr=i(ve),l5=n(ve,"LI",{});var Mje=s(l5);HEe=n(Mje,"STRONG",{});var Zkt=s(HEe);Dyr=r(Zkt,"bert"),Zkt.forEach(t),Gyr=r(Mje," \u2014 "),BY=n(Mje,"A",{href:!0});var eSt=s(BY);Oyr=r(eSt,"TFBertForMultipleChoice"),eSt.forEach(t),Vyr=r(Mje," (BERT model)"),Mje.forEach(t),Xyr=i(ve),i5=n(ve,"LI",{});var Eje=s(i5);UEe=n(Eje,"STRONG",{});var oSt=s(UEe);zyr=r(oSt,"camembert"),oSt.forEach(t),Qyr=r(Eje," \u2014 "),IY=n(Eje,"A",{href:!0});var rSt=s(IY);Wyr=r(rSt,"TFCamembertForMultipleChoice"),rSt.forEach(t),Hyr=r(Eje," (CamemBERT model)"),Eje.forEach(t),Uyr=i(ve),d5=n(ve,"LI",{});var Cje=s(d5);JEe=n(Cje,"STRONG",{});var tSt=s(JEe);Jyr=r(tSt,"convbert"),tSt.forEach(t),Yyr=r(Cje," \u2014 "),NY=n(Cje,"A",{href:!0});var aSt=s(NY);Kyr=r(aSt,"TFConvBertForMultipleChoice"),aSt.forEach(t),Zyr=r(Cje," (ConvBERT model)"),Cje.forEach(t),e8r=i(ve),c5=n(ve,"LI",{});var wje=s(c5);YEe=n(wje,"STRONG",{});var nSt=s(YEe);o8r=r(nSt,"distilbert"),nSt.forEach(t),r8r=r(wje," \u2014 "),qY=n(wje,"A",{href:!0});var sSt=s(qY);t8r=r(sSt,"TFDistilBertForMultipleChoice"),sSt.forEach(t),a8r=r(wje," (DistilBERT model)"),wje.forEach(t),n8r=i(ve),m5=n(ve,"LI",{});var Aje=s(m5);KEe=n(Aje,"STRONG",{});var lSt=s(KEe);s8r=r(lSt,"electra"),lSt.forEach(t),l8r=r(Aje," \u2014 "),jY=n(Aje,"A",{href:!0});var iSt=s(jY);i8r=r(iSt,"TFElectraForMultipleChoice"),iSt.forEach(t),d8r=r(Aje," (ELECTRA model)"),Aje.forEach(t),c8r=i(ve),f5=n(ve,"LI",{});var Lje=s(f5);ZEe=n(Lje,"STRONG",{});var dSt=s(ZEe);m8r=r(dSt,"flaubert"),dSt.forEach(t),f8r=r(Lje," \u2014 "),DY=n(Lje,"A",{href:!0});var cSt=s(DY);g8r=r(cSt,"TFFlaubertForMultipleChoice"),cSt.forEach(t),h8r=r(Lje," (FlauBERT model)"),Lje.forEach(t),u8r=i(ve),g5=n(ve,"LI",{});var yje=s(g5);eCe=n(yje,"STRONG",{});var mSt=s(eCe);p8r=r(mSt,"funnel"),mSt.forEach(t),_8r=r(yje," \u2014 "),GY=n(yje,"A",{href:!0});var fSt=s(GY);b8r=r(fSt,"TFFunnelForMultipleChoice"),fSt.forEach(t),v8r=r(yje," (Funnel Transformer model)"),yje.forEach(t),F8r=i(ve),h5=n(ve,"LI",{});var xje=s(h5);oCe=n(xje,"STRONG",{});var gSt=s(oCe);T8r=r(gSt,"longformer"),gSt.forEach(t),M8r=r(xje," \u2014 "),OY=n(xje,"A",{href:!0});var hSt=s(OY);E8r=r(hSt,"TFLongformerForMultipleChoice"),hSt.forEach(t),C8r=r(xje," (Longformer model)"),xje.forEach(t),w8r=i(ve),u5=n(ve,"LI",{});var $je=s(u5);rCe=n($je,"STRONG",{});var uSt=s(rCe);A8r=r(uSt,"mobilebert"),uSt.forEach(t),L8r=r($je," \u2014 "),VY=n($je,"A",{href:!0});var pSt=s(VY);y8r=r(pSt,"TFMobileBertForMultipleChoice"),pSt.forEach(t),x8r=r($je," (MobileBERT model)"),$je.forEach(t),$8r=i(ve),p5=n(ve,"LI",{});var kje=s(p5);tCe=n(kje,"STRONG",{});var _St=s(tCe);k8r=r(_St,"mpnet"),_St.forEach(t),S8r=r(kje," \u2014 "),XY=n(kje,"A",{href:!0});var bSt=s(XY);R8r=r(bSt,"TFMPNetForMultipleChoice"),bSt.forEach(t),P8r=r(kje," (MPNet model)"),kje.forEach(t),B8r=i(ve),_5=n(ve,"LI",{});var Sje=s(_5);aCe=n(Sje,"STRONG",{});var vSt=s(aCe);I8r=r(vSt,"rembert"),vSt.forEach(t),N8r=r(Sje," \u2014 "),zY=n(Sje,"A",{href:!0});var FSt=s(zY);q8r=r(FSt,"TFRemBertForMultipleChoice"),FSt.forEach(t),j8r=r(Sje," (RemBERT model)"),Sje.forEach(t),D8r=i(ve),b5=n(ve,"LI",{});var Rje=s(b5);nCe=n(Rje,"STRONG",{});var TSt=s(nCe);G8r=r(TSt,"roberta"),TSt.forEach(t),O8r=r(Rje," \u2014 "),QY=n(Rje,"A",{href:!0});var MSt=s(QY);V8r=r(MSt,"TFRobertaForMultipleChoice"),MSt.forEach(t),X8r=r(Rje," (RoBERTa model)"),Rje.forEach(t),z8r=i(ve),v5=n(ve,"LI",{});var Pje=s(v5);sCe=n(Pje,"STRONG",{});var ESt=s(sCe);Q8r=r(ESt,"roformer"),ESt.forEach(t),W8r=r(Pje," \u2014 "),WY=n(Pje,"A",{href:!0});var CSt=s(WY);H8r=r(CSt,"TFRoFormerForMultipleChoice"),CSt.forEach(t),U8r=r(Pje," (RoFormer model)"),Pje.forEach(t),J8r=i(ve),F5=n(ve,"LI",{});var Bje=s(F5);lCe=n(Bje,"STRONG",{});var wSt=s(lCe);Y8r=r(wSt,"xlm"),wSt.forEach(t),K8r=r(Bje," \u2014 "),HY=n(Bje,"A",{href:!0});var ASt=s(HY);Z8r=r(ASt,"TFXLMForMultipleChoice"),ASt.forEach(t),e9r=r(Bje," (XLM model)"),Bje.forEach(t),o9r=i(ve),T5=n(ve,"LI",{});var Ije=s(T5);iCe=n(Ije,"STRONG",{});var LSt=s(iCe);r9r=r(LSt,"xlm-roberta"),LSt.forEach(t),t9r=r(Ije," \u2014 "),UY=n(Ije,"A",{href:!0});var ySt=s(UY);a9r=r(ySt,"TFXLMRobertaForMultipleChoice"),ySt.forEach(t),n9r=r(Ije," (XLM-RoBERTa model)"),Ije.forEach(t),s9r=i(ve),M5=n(ve,"LI",{});var Nje=s(M5);dCe=n(Nje,"STRONG",{});var xSt=s(dCe);l9r=r(xSt,"xlnet"),xSt.forEach(t),i9r=r(Nje," \u2014 "),JY=n(Nje,"A",{href:!0});var $St=s(JY);d9r=r($St,"TFXLNetForMultipleChoice"),$St.forEach(t),c9r=r(Nje," (XLNet model)"),Nje.forEach(t),ve.forEach(t),m9r=i(Gl),T(E5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),eXe=i(m),Lc=n(m,"H2",{class:!0});var iQe=s(Lc);C5=n(iQe,"A",{id:!0,class:!0,href:!0});var kSt=s(C5);cCe=n(kSt,"SPAN",{});var SSt=s(cCe);T(fx.$$.fragment,SSt),SSt.forEach(t),kSt.forEach(t),f9r=i(iQe),mCe=n(iQe,"SPAN",{});var RSt=s(mCe);g9r=r(RSt,"TFAutoModelForNextSentencePrediction"),RSt.forEach(t),iQe.forEach(t),oXe=i(m),ir=n(m,"DIV",{class:!0});var Ol=s(ir);T(gx.$$.fragment,Ol),h9r=i(Ol),yc=n(Ol,"P",{});var rte=s(yc);u9r=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YY=n(rte,"A",{href:!0});var PSt=s(YY);p9r=r(PSt,"from_pretrained()"),PSt.forEach(t),_9r=r(rte," class method or the "),KY=n(rte,"A",{href:!0});var BSt=s(KY);b9r=r(BSt,"from_config()"),BSt.forEach(t),v9r=r(rte,` class
method.`),rte.forEach(t),F9r=i(Ol),hx=n(Ol,"P",{});var dQe=s(hx);T9r=r(dQe,"This class cannot be instantiated directly using "),fCe=n(dQe,"CODE",{});var ISt=s(fCe);M9r=r(ISt,"__init__()"),ISt.forEach(t),E9r=r(dQe," (throws an error)."),dQe.forEach(t),C9r=i(Ol),jt=n(Ol,"DIV",{class:!0});var e7=s(jt);T(ux.$$.fragment,e7),w9r=i(e7),gCe=n(e7,"P",{});var NSt=s(gCe);A9r=r(NSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NSt.forEach(t),L9r=i(e7),xc=n(e7,"P",{});var tte=s(xc);y9r=r(tte,`Note:
Loading a model from its configuration file does `),hCe=n(tte,"STRONG",{});var qSt=s(hCe);x9r=r(qSt,"not"),qSt.forEach(t),$9r=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZY=n(tte,"A",{href:!0});var jSt=s(ZY);k9r=r(jSt,"from_pretrained()"),jSt.forEach(t),S9r=r(tte," to load the model weights."),tte.forEach(t),R9r=i(e7),T(w5.$$.fragment,e7),e7.forEach(t),P9r=i(Ol),Ir=n(Ol,"DIV",{class:!0});var Vl=s(Ir);T(px.$$.fragment,Vl),B9r=i(Vl),uCe=n(Vl,"P",{});var DSt=s(uCe);I9r=r(DSt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DSt.forEach(t),N9r=i(Vl),hn=n(Vl,"P",{});var o7=s(hn);q9r=r(o7,"The model class to instantiate is selected based on the "),pCe=n(o7,"CODE",{});var GSt=s(pCe);j9r=r(GSt,"model_type"),GSt.forEach(t),D9r=r(o7,` property of the config object (either
passed as an argument or loaded from `),_Ce=n(o7,"CODE",{});var OSt=s(_Ce);G9r=r(OSt,"pretrained_model_name_or_path"),OSt.forEach(t),O9r=r(o7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bCe=n(o7,"CODE",{});var VSt=s(bCe);V9r=r(VSt,"pretrained_model_name_or_path"),VSt.forEach(t),X9r=r(o7,":"),o7.forEach(t),z9r=i(Vl),_x=n(Vl,"UL",{});var cQe=s(_x);A5=n(cQe,"LI",{});var qje=s(A5);vCe=n(qje,"STRONG",{});var XSt=s(vCe);Q9r=r(XSt,"bert"),XSt.forEach(t),W9r=r(qje," \u2014 "),eK=n(qje,"A",{href:!0});var zSt=s(eK);H9r=r(zSt,"TFBertForNextSentencePrediction"),zSt.forEach(t),U9r=r(qje," (BERT model)"),qje.forEach(t),J9r=i(cQe),L5=n(cQe,"LI",{});var jje=s(L5);FCe=n(jje,"STRONG",{});var QSt=s(FCe);Y9r=r(QSt,"mobilebert"),QSt.forEach(t),K9r=r(jje," \u2014 "),oK=n(jje,"A",{href:!0});var WSt=s(oK);Z9r=r(WSt,"TFMobileBertForNextSentencePrediction"),WSt.forEach(t),exr=r(jje," (MobileBERT model)"),jje.forEach(t),cQe.forEach(t),oxr=i(Vl),T(y5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),rXe=i(m),$c=n(m,"H2",{class:!0});var mQe=s($c);x5=n(mQe,"A",{id:!0,class:!0,href:!0});var HSt=s(x5);TCe=n(HSt,"SPAN",{});var USt=s(TCe);T(bx.$$.fragment,USt),USt.forEach(t),HSt.forEach(t),rxr=i(mQe),MCe=n(mQe,"SPAN",{});var JSt=s(MCe);txr=r(JSt,"TFAutoModelForTableQuestionAnswering"),JSt.forEach(t),mQe.forEach(t),tXe=i(m),dr=n(m,"DIV",{class:!0});var Xl=s(dr);T(vx.$$.fragment,Xl),axr=i(Xl),kc=n(Xl,"P",{});var ate=s(kc);nxr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),rK=n(ate,"A",{href:!0});var YSt=s(rK);sxr=r(YSt,"from_pretrained()"),YSt.forEach(t),lxr=r(ate," class method or the "),tK=n(ate,"A",{href:!0});var KSt=s(tK);ixr=r(KSt,"from_config()"),KSt.forEach(t),dxr=r(ate,` class
method.`),ate.forEach(t),cxr=i(Xl),Fx=n(Xl,"P",{});var fQe=s(Fx);mxr=r(fQe,"This class cannot be instantiated directly using "),ECe=n(fQe,"CODE",{});var ZSt=s(ECe);fxr=r(ZSt,"__init__()"),ZSt.forEach(t),gxr=r(fQe," (throws an error)."),fQe.forEach(t),hxr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var r7=s(Dt);T(Tx.$$.fragment,r7),uxr=i(r7),CCe=n(r7,"P",{});var eRt=s(CCe);pxr=r(eRt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),eRt.forEach(t),_xr=i(r7),Sc=n(r7,"P",{});var nte=s(Sc);bxr=r(nte,`Note:
Loading a model from its configuration file does `),wCe=n(nte,"STRONG",{});var oRt=s(wCe);vxr=r(oRt,"not"),oRt.forEach(t),Fxr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(nte,"A",{href:!0});var rRt=s(aK);Txr=r(rRt,"from_pretrained()"),rRt.forEach(t),Mxr=r(nte," to load the model weights."),nte.forEach(t),Exr=i(r7),T($5.$$.fragment,r7),r7.forEach(t),Cxr=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Mx.$$.fragment,zl),wxr=i(zl),ACe=n(zl,"P",{});var tRt=s(ACe);Axr=r(tRt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tRt.forEach(t),Lxr=i(zl),un=n(zl,"P",{});var t7=s(un);yxr=r(t7,"The model class to instantiate is selected based on the "),LCe=n(t7,"CODE",{});var aRt=s(LCe);xxr=r(aRt,"model_type"),aRt.forEach(t),$xr=r(t7,` property of the config object (either
passed as an argument or loaded from `),yCe=n(t7,"CODE",{});var nRt=s(yCe);kxr=r(nRt,"pretrained_model_name_or_path"),nRt.forEach(t),Sxr=r(t7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n(t7,"CODE",{});var sRt=s(xCe);Rxr=r(sRt,"pretrained_model_name_or_path"),sRt.forEach(t),Pxr=r(t7,":"),t7.forEach(t),Bxr=i(zl),$Ce=n(zl,"UL",{});var lRt=s($Ce);k5=n(lRt,"LI",{});var Dje=s(k5);kCe=n(Dje,"STRONG",{});var iRt=s(kCe);Ixr=r(iRt,"tapas"),iRt.forEach(t),Nxr=r(Dje," \u2014 "),nK=n(Dje,"A",{href:!0});var dRt=s(nK);qxr=r(dRt,"TFTapasForQuestionAnswering"),dRt.forEach(t),jxr=r(Dje," (TAPAS model)"),Dje.forEach(t),lRt.forEach(t),Dxr=i(zl),T(S5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),aXe=i(m),Rc=n(m,"H2",{class:!0});var gQe=s(Rc);R5=n(gQe,"A",{id:!0,class:!0,href:!0});var cRt=s(R5);SCe=n(cRt,"SPAN",{});var mRt=s(SCe);T(Ex.$$.fragment,mRt),mRt.forEach(t),cRt.forEach(t),Gxr=i(gQe),RCe=n(gQe,"SPAN",{});var fRt=s(RCe);Oxr=r(fRt,"TFAutoModelForTokenClassification"),fRt.forEach(t),gQe.forEach(t),nXe=i(m),cr=n(m,"DIV",{class:!0});var Ql=s(cr);T(Cx.$$.fragment,Ql),Vxr=i(Ql),Pc=n(Ql,"P",{});var ste=s(Pc);Xxr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sK=n(ste,"A",{href:!0});var gRt=s(sK);zxr=r(gRt,"from_pretrained()"),gRt.forEach(t),Qxr=r(ste," class method or the "),lK=n(ste,"A",{href:!0});var hRt=s(lK);Wxr=r(hRt,"from_config()"),hRt.forEach(t),Hxr=r(ste,` class
method.`),ste.forEach(t),Uxr=i(Ql),wx=n(Ql,"P",{});var hQe=s(wx);Jxr=r(hQe,"This class cannot be instantiated directly using "),PCe=n(hQe,"CODE",{});var uRt=s(PCe);Yxr=r(uRt,"__init__()"),uRt.forEach(t),Kxr=r(hQe," (throws an error)."),hQe.forEach(t),Zxr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var a7=s(Gt);T(Ax.$$.fragment,a7),e$r=i(a7),BCe=n(a7,"P",{});var pRt=s(BCe);o$r=r(pRt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pRt.forEach(t),r$r=i(a7),Bc=n(a7,"P",{});var lte=s(Bc);t$r=r(lte,`Note:
Loading a model from its configuration file does `),ICe=n(lte,"STRONG",{});var _Rt=s(ICe);a$r=r(_Rt,"not"),_Rt.forEach(t),n$r=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(lte,"A",{href:!0});var bRt=s(iK);s$r=r(bRt,"from_pretrained()"),bRt.forEach(t),l$r=r(lte," to load the model weights."),lte.forEach(t),i$r=i(a7),T(P5.$$.fragment,a7),a7.forEach(t),d$r=i(Ql),qr=n(Ql,"DIV",{class:!0});var Wl=s(qr);T(Lx.$$.fragment,Wl),c$r=i(Wl),NCe=n(Wl,"P",{});var vRt=s(NCe);m$r=r(vRt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vRt.forEach(t),f$r=i(Wl),pn=n(Wl,"P",{});var n7=s(pn);g$r=r(n7,"The model class to instantiate is selected based on the "),qCe=n(n7,"CODE",{});var FRt=s(qCe);h$r=r(FRt,"model_type"),FRt.forEach(t),u$r=r(n7,` property of the config object (either
passed as an argument or loaded from `),jCe=n(n7,"CODE",{});var TRt=s(jCe);p$r=r(TRt,"pretrained_model_name_or_path"),TRt.forEach(t),_$r=r(n7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DCe=n(n7,"CODE",{});var MRt=s(DCe);b$r=r(MRt,"pretrained_model_name_or_path"),MRt.forEach(t),v$r=r(n7,":"),n7.forEach(t),F$r=i(Wl),de=n(Wl,"UL",{});var fe=s(de);B5=n(fe,"LI",{});var Gje=s(B5);GCe=n(Gje,"STRONG",{});var ERt=s(GCe);T$r=r(ERt,"albert"),ERt.forEach(t),M$r=r(Gje," \u2014 "),dK=n(Gje,"A",{href:!0});var CRt=s(dK);E$r=r(CRt,"TFAlbertForTokenClassification"),CRt.forEach(t),C$r=r(Gje," (ALBERT model)"),Gje.forEach(t),w$r=i(fe),I5=n(fe,"LI",{});var Oje=s(I5);OCe=n(Oje,"STRONG",{});var wRt=s(OCe);A$r=r(wRt,"bert"),wRt.forEach(t),L$r=r(Oje," \u2014 "),cK=n(Oje,"A",{href:!0});var ARt=s(cK);y$r=r(ARt,"TFBertForTokenClassification"),ARt.forEach(t),x$r=r(Oje," (BERT model)"),Oje.forEach(t),$$r=i(fe),N5=n(fe,"LI",{});var Vje=s(N5);VCe=n(Vje,"STRONG",{});var LRt=s(VCe);k$r=r(LRt,"camembert"),LRt.forEach(t),S$r=r(Vje," \u2014 "),mK=n(Vje,"A",{href:!0});var yRt=s(mK);R$r=r(yRt,"TFCamembertForTokenClassification"),yRt.forEach(t),P$r=r(Vje," (CamemBERT model)"),Vje.forEach(t),B$r=i(fe),q5=n(fe,"LI",{});var Xje=s(q5);XCe=n(Xje,"STRONG",{});var xRt=s(XCe);I$r=r(xRt,"convbert"),xRt.forEach(t),N$r=r(Xje," \u2014 "),fK=n(Xje,"A",{href:!0});var $Rt=s(fK);q$r=r($Rt,"TFConvBertForTokenClassification"),$Rt.forEach(t),j$r=r(Xje," (ConvBERT model)"),Xje.forEach(t),D$r=i(fe),j5=n(fe,"LI",{});var zje=s(j5);zCe=n(zje,"STRONG",{});var kRt=s(zCe);G$r=r(kRt,"deberta"),kRt.forEach(t),O$r=r(zje," \u2014 "),gK=n(zje,"A",{href:!0});var SRt=s(gK);V$r=r(SRt,"TFDebertaForTokenClassification"),SRt.forEach(t),X$r=r(zje," (DeBERTa model)"),zje.forEach(t),z$r=i(fe),D5=n(fe,"LI",{});var Qje=s(D5);QCe=n(Qje,"STRONG",{});var RRt=s(QCe);Q$r=r(RRt,"deberta-v2"),RRt.forEach(t),W$r=r(Qje," \u2014 "),hK=n(Qje,"A",{href:!0});var PRt=s(hK);H$r=r(PRt,"TFDebertaV2ForTokenClassification"),PRt.forEach(t),U$r=r(Qje," (DeBERTa-v2 model)"),Qje.forEach(t),J$r=i(fe),G5=n(fe,"LI",{});var Wje=s(G5);WCe=n(Wje,"STRONG",{});var BRt=s(WCe);Y$r=r(BRt,"distilbert"),BRt.forEach(t),K$r=r(Wje," \u2014 "),uK=n(Wje,"A",{href:!0});var IRt=s(uK);Z$r=r(IRt,"TFDistilBertForTokenClassification"),IRt.forEach(t),ekr=r(Wje," (DistilBERT model)"),Wje.forEach(t),okr=i(fe),O5=n(fe,"LI",{});var Hje=s(O5);HCe=n(Hje,"STRONG",{});var NRt=s(HCe);rkr=r(NRt,"electra"),NRt.forEach(t),tkr=r(Hje," \u2014 "),pK=n(Hje,"A",{href:!0});var qRt=s(pK);akr=r(qRt,"TFElectraForTokenClassification"),qRt.forEach(t),nkr=r(Hje," (ELECTRA model)"),Hje.forEach(t),skr=i(fe),V5=n(fe,"LI",{});var Uje=s(V5);UCe=n(Uje,"STRONG",{});var jRt=s(UCe);lkr=r(jRt,"flaubert"),jRt.forEach(t),ikr=r(Uje," \u2014 "),_K=n(Uje,"A",{href:!0});var DRt=s(_K);dkr=r(DRt,"TFFlaubertForTokenClassification"),DRt.forEach(t),ckr=r(Uje," (FlauBERT model)"),Uje.forEach(t),mkr=i(fe),X5=n(fe,"LI",{});var Jje=s(X5);JCe=n(Jje,"STRONG",{});var GRt=s(JCe);fkr=r(GRt,"funnel"),GRt.forEach(t),gkr=r(Jje," \u2014 "),bK=n(Jje,"A",{href:!0});var ORt=s(bK);hkr=r(ORt,"TFFunnelForTokenClassification"),ORt.forEach(t),ukr=r(Jje," (Funnel Transformer model)"),Jje.forEach(t),pkr=i(fe),z5=n(fe,"LI",{});var Yje=s(z5);YCe=n(Yje,"STRONG",{});var VRt=s(YCe);_kr=r(VRt,"layoutlm"),VRt.forEach(t),bkr=r(Yje," \u2014 "),vK=n(Yje,"A",{href:!0});var XRt=s(vK);vkr=r(XRt,"TFLayoutLMForTokenClassification"),XRt.forEach(t),Fkr=r(Yje," (LayoutLM model)"),Yje.forEach(t),Tkr=i(fe),Q5=n(fe,"LI",{});var Kje=s(Q5);KCe=n(Kje,"STRONG",{});var zRt=s(KCe);Mkr=r(zRt,"longformer"),zRt.forEach(t),Ekr=r(Kje," \u2014 "),FK=n(Kje,"A",{href:!0});var QRt=s(FK);Ckr=r(QRt,"TFLongformerForTokenClassification"),QRt.forEach(t),wkr=r(Kje," (Longformer model)"),Kje.forEach(t),Akr=i(fe),W5=n(fe,"LI",{});var Zje=s(W5);ZCe=n(Zje,"STRONG",{});var WRt=s(ZCe);Lkr=r(WRt,"mobilebert"),WRt.forEach(t),ykr=r(Zje," \u2014 "),TK=n(Zje,"A",{href:!0});var HRt=s(TK);xkr=r(HRt,"TFMobileBertForTokenClassification"),HRt.forEach(t),$kr=r(Zje," (MobileBERT model)"),Zje.forEach(t),kkr=i(fe),H5=n(fe,"LI",{});var eDe=s(H5);e3e=n(eDe,"STRONG",{});var URt=s(e3e);Skr=r(URt,"mpnet"),URt.forEach(t),Rkr=r(eDe," \u2014 "),MK=n(eDe,"A",{href:!0});var JRt=s(MK);Pkr=r(JRt,"TFMPNetForTokenClassification"),JRt.forEach(t),Bkr=r(eDe," (MPNet model)"),eDe.forEach(t),Ikr=i(fe),U5=n(fe,"LI",{});var oDe=s(U5);o3e=n(oDe,"STRONG",{});var YRt=s(o3e);Nkr=r(YRt,"rembert"),YRt.forEach(t),qkr=r(oDe," \u2014 "),EK=n(oDe,"A",{href:!0});var KRt=s(EK);jkr=r(KRt,"TFRemBertForTokenClassification"),KRt.forEach(t),Dkr=r(oDe," (RemBERT model)"),oDe.forEach(t),Gkr=i(fe),J5=n(fe,"LI",{});var rDe=s(J5);r3e=n(rDe,"STRONG",{});var ZRt=s(r3e);Okr=r(ZRt,"roberta"),ZRt.forEach(t),Vkr=r(rDe," \u2014 "),CK=n(rDe,"A",{href:!0});var ePt=s(CK);Xkr=r(ePt,"TFRobertaForTokenClassification"),ePt.forEach(t),zkr=r(rDe," (RoBERTa model)"),rDe.forEach(t),Qkr=i(fe),Y5=n(fe,"LI",{});var tDe=s(Y5);t3e=n(tDe,"STRONG",{});var oPt=s(t3e);Wkr=r(oPt,"roformer"),oPt.forEach(t),Hkr=r(tDe," \u2014 "),wK=n(tDe,"A",{href:!0});var rPt=s(wK);Ukr=r(rPt,"TFRoFormerForTokenClassification"),rPt.forEach(t),Jkr=r(tDe," (RoFormer model)"),tDe.forEach(t),Ykr=i(fe),K5=n(fe,"LI",{});var aDe=s(K5);a3e=n(aDe,"STRONG",{});var tPt=s(a3e);Kkr=r(tPt,"xlm"),tPt.forEach(t),Zkr=r(aDe," \u2014 "),AK=n(aDe,"A",{href:!0});var aPt=s(AK);eSr=r(aPt,"TFXLMForTokenClassification"),aPt.forEach(t),oSr=r(aDe," (XLM model)"),aDe.forEach(t),rSr=i(fe),Z5=n(fe,"LI",{});var nDe=s(Z5);n3e=n(nDe,"STRONG",{});var nPt=s(n3e);tSr=r(nPt,"xlm-roberta"),nPt.forEach(t),aSr=r(nDe," \u2014 "),LK=n(nDe,"A",{href:!0});var sPt=s(LK);nSr=r(sPt,"TFXLMRobertaForTokenClassification"),sPt.forEach(t),sSr=r(nDe," (XLM-RoBERTa model)"),nDe.forEach(t),lSr=i(fe),e0=n(fe,"LI",{});var sDe=s(e0);s3e=n(sDe,"STRONG",{});var lPt=s(s3e);iSr=r(lPt,"xlnet"),lPt.forEach(t),dSr=r(sDe," \u2014 "),yK=n(sDe,"A",{href:!0});var iPt=s(yK);cSr=r(iPt,"TFXLNetForTokenClassification"),iPt.forEach(t),mSr=r(sDe," (XLNet model)"),sDe.forEach(t),fe.forEach(t),fSr=i(Wl),T(o0.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),sXe=i(m),Ic=n(m,"H2",{class:!0});var uQe=s(Ic);r0=n(uQe,"A",{id:!0,class:!0,href:!0});var dPt=s(r0);l3e=n(dPt,"SPAN",{});var cPt=s(l3e);T(yx.$$.fragment,cPt),cPt.forEach(t),dPt.forEach(t),gSr=i(uQe),i3e=n(uQe,"SPAN",{});var mPt=s(i3e);hSr=r(mPt,"TFAutoModelForQuestionAnswering"),mPt.forEach(t),uQe.forEach(t),lXe=i(m),mr=n(m,"DIV",{class:!0});var Hl=s(mr);T(xx.$$.fragment,Hl),uSr=i(Hl),Nc=n(Hl,"P",{});var ite=s(Nc);pSr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xK=n(ite,"A",{href:!0});var fPt=s(xK);_Sr=r(fPt,"from_pretrained()"),fPt.forEach(t),bSr=r(ite," class method or the "),$K=n(ite,"A",{href:!0});var gPt=s($K);vSr=r(gPt,"from_config()"),gPt.forEach(t),FSr=r(ite,` class
method.`),ite.forEach(t),TSr=i(Hl),$x=n(Hl,"P",{});var pQe=s($x);MSr=r(pQe,"This class cannot be instantiated directly using "),d3e=n(pQe,"CODE",{});var hPt=s(d3e);ESr=r(hPt,"__init__()"),hPt.forEach(t),CSr=r(pQe," (throws an error)."),pQe.forEach(t),wSr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var s7=s(Ot);T(kx.$$.fragment,s7),ASr=i(s7),c3e=n(s7,"P",{});var uPt=s(c3e);LSr=r(uPt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uPt.forEach(t),ySr=i(s7),qc=n(s7,"P",{});var dte=s(qc);xSr=r(dte,`Note:
Loading a model from its configuration file does `),m3e=n(dte,"STRONG",{});var pPt=s(m3e);$Sr=r(pPt,"not"),pPt.forEach(t),kSr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kK=n(dte,"A",{href:!0});var _Pt=s(kK);SSr=r(_Pt,"from_pretrained()"),_Pt.forEach(t),RSr=r(dte," to load the model weights."),dte.forEach(t),PSr=i(s7),T(t0.$$.fragment,s7),s7.forEach(t),BSr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(Sx.$$.fragment,Ul),ISr=i(Ul),f3e=n(Ul,"P",{});var bPt=s(f3e);NSr=r(bPt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bPt.forEach(t),qSr=i(Ul),_n=n(Ul,"P",{});var l7=s(_n);jSr=r(l7,"The model class to instantiate is selected based on the "),g3e=n(l7,"CODE",{});var vPt=s(g3e);DSr=r(vPt,"model_type"),vPt.forEach(t),GSr=r(l7,` property of the config object (either
passed as an argument or loaded from `),h3e=n(l7,"CODE",{});var FPt=s(h3e);OSr=r(FPt,"pretrained_model_name_or_path"),FPt.forEach(t),VSr=r(l7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u3e=n(l7,"CODE",{});var TPt=s(u3e);XSr=r(TPt,"pretrained_model_name_or_path"),TPt.forEach(t),zSr=r(l7,":"),l7.forEach(t),QSr=i(Ul),ce=n(Ul,"UL",{});var ge=s(ce);a0=n(ge,"LI",{});var lDe=s(a0);p3e=n(lDe,"STRONG",{});var MPt=s(p3e);WSr=r(MPt,"albert"),MPt.forEach(t),HSr=r(lDe," \u2014 "),SK=n(lDe,"A",{href:!0});var EPt=s(SK);USr=r(EPt,"TFAlbertForQuestionAnswering"),EPt.forEach(t),JSr=r(lDe," (ALBERT model)"),lDe.forEach(t),YSr=i(ge),n0=n(ge,"LI",{});var iDe=s(n0);_3e=n(iDe,"STRONG",{});var CPt=s(_3e);KSr=r(CPt,"bert"),CPt.forEach(t),ZSr=r(iDe," \u2014 "),RK=n(iDe,"A",{href:!0});var wPt=s(RK);eRr=r(wPt,"TFBertForQuestionAnswering"),wPt.forEach(t),oRr=r(iDe," (BERT model)"),iDe.forEach(t),rRr=i(ge),s0=n(ge,"LI",{});var dDe=s(s0);b3e=n(dDe,"STRONG",{});var APt=s(b3e);tRr=r(APt,"camembert"),APt.forEach(t),aRr=r(dDe," \u2014 "),PK=n(dDe,"A",{href:!0});var LPt=s(PK);nRr=r(LPt,"TFCamembertForQuestionAnswering"),LPt.forEach(t),sRr=r(dDe," (CamemBERT model)"),dDe.forEach(t),lRr=i(ge),l0=n(ge,"LI",{});var cDe=s(l0);v3e=n(cDe,"STRONG",{});var yPt=s(v3e);iRr=r(yPt,"convbert"),yPt.forEach(t),dRr=r(cDe," \u2014 "),BK=n(cDe,"A",{href:!0});var xPt=s(BK);cRr=r(xPt,"TFConvBertForQuestionAnswering"),xPt.forEach(t),mRr=r(cDe," (ConvBERT model)"),cDe.forEach(t),fRr=i(ge),i0=n(ge,"LI",{});var mDe=s(i0);F3e=n(mDe,"STRONG",{});var $Pt=s(F3e);gRr=r($Pt,"deberta"),$Pt.forEach(t),hRr=r(mDe," \u2014 "),IK=n(mDe,"A",{href:!0});var kPt=s(IK);uRr=r(kPt,"TFDebertaForQuestionAnswering"),kPt.forEach(t),pRr=r(mDe," (DeBERTa model)"),mDe.forEach(t),_Rr=i(ge),d0=n(ge,"LI",{});var fDe=s(d0);T3e=n(fDe,"STRONG",{});var SPt=s(T3e);bRr=r(SPt,"deberta-v2"),SPt.forEach(t),vRr=r(fDe," \u2014 "),NK=n(fDe,"A",{href:!0});var RPt=s(NK);FRr=r(RPt,"TFDebertaV2ForQuestionAnswering"),RPt.forEach(t),TRr=r(fDe," (DeBERTa-v2 model)"),fDe.forEach(t),MRr=i(ge),c0=n(ge,"LI",{});var gDe=s(c0);M3e=n(gDe,"STRONG",{});var PPt=s(M3e);ERr=r(PPt,"distilbert"),PPt.forEach(t),CRr=r(gDe," \u2014 "),qK=n(gDe,"A",{href:!0});var BPt=s(qK);wRr=r(BPt,"TFDistilBertForQuestionAnswering"),BPt.forEach(t),ARr=r(gDe," (DistilBERT model)"),gDe.forEach(t),LRr=i(ge),m0=n(ge,"LI",{});var hDe=s(m0);E3e=n(hDe,"STRONG",{});var IPt=s(E3e);yRr=r(IPt,"electra"),IPt.forEach(t),xRr=r(hDe," \u2014 "),jK=n(hDe,"A",{href:!0});var NPt=s(jK);$Rr=r(NPt,"TFElectraForQuestionAnswering"),NPt.forEach(t),kRr=r(hDe," (ELECTRA model)"),hDe.forEach(t),SRr=i(ge),f0=n(ge,"LI",{});var uDe=s(f0);C3e=n(uDe,"STRONG",{});var qPt=s(C3e);RRr=r(qPt,"flaubert"),qPt.forEach(t),PRr=r(uDe," \u2014 "),DK=n(uDe,"A",{href:!0});var jPt=s(DK);BRr=r(jPt,"TFFlaubertForQuestionAnsweringSimple"),jPt.forEach(t),IRr=r(uDe," (FlauBERT model)"),uDe.forEach(t),NRr=i(ge),g0=n(ge,"LI",{});var pDe=s(g0);w3e=n(pDe,"STRONG",{});var DPt=s(w3e);qRr=r(DPt,"funnel"),DPt.forEach(t),jRr=r(pDe," \u2014 "),GK=n(pDe,"A",{href:!0});var GPt=s(GK);DRr=r(GPt,"TFFunnelForQuestionAnswering"),GPt.forEach(t),GRr=r(pDe," (Funnel Transformer model)"),pDe.forEach(t),ORr=i(ge),h0=n(ge,"LI",{});var _De=s(h0);A3e=n(_De,"STRONG",{});var OPt=s(A3e);VRr=r(OPt,"gptj"),OPt.forEach(t),XRr=r(_De," \u2014 "),OK=n(_De,"A",{href:!0});var VPt=s(OK);zRr=r(VPt,"TFGPTJForQuestionAnswering"),VPt.forEach(t),QRr=r(_De," (GPT-J model)"),_De.forEach(t),WRr=i(ge),u0=n(ge,"LI",{});var bDe=s(u0);L3e=n(bDe,"STRONG",{});var XPt=s(L3e);HRr=r(XPt,"longformer"),XPt.forEach(t),URr=r(bDe," \u2014 "),VK=n(bDe,"A",{href:!0});var zPt=s(VK);JRr=r(zPt,"TFLongformerForQuestionAnswering"),zPt.forEach(t),YRr=r(bDe," (Longformer model)"),bDe.forEach(t),KRr=i(ge),p0=n(ge,"LI",{});var vDe=s(p0);y3e=n(vDe,"STRONG",{});var QPt=s(y3e);ZRr=r(QPt,"mobilebert"),QPt.forEach(t),ePr=r(vDe," \u2014 "),XK=n(vDe,"A",{href:!0});var WPt=s(XK);oPr=r(WPt,"TFMobileBertForQuestionAnswering"),WPt.forEach(t),rPr=r(vDe," (MobileBERT model)"),vDe.forEach(t),tPr=i(ge),_0=n(ge,"LI",{});var FDe=s(_0);x3e=n(FDe,"STRONG",{});var HPt=s(x3e);aPr=r(HPt,"mpnet"),HPt.forEach(t),nPr=r(FDe," \u2014 "),zK=n(FDe,"A",{href:!0});var UPt=s(zK);sPr=r(UPt,"TFMPNetForQuestionAnswering"),UPt.forEach(t),lPr=r(FDe," (MPNet model)"),FDe.forEach(t),iPr=i(ge),b0=n(ge,"LI",{});var TDe=s(b0);$3e=n(TDe,"STRONG",{});var JPt=s($3e);dPr=r(JPt,"rembert"),JPt.forEach(t),cPr=r(TDe," \u2014 "),QK=n(TDe,"A",{href:!0});var YPt=s(QK);mPr=r(YPt,"TFRemBertForQuestionAnswering"),YPt.forEach(t),fPr=r(TDe," (RemBERT model)"),TDe.forEach(t),gPr=i(ge),v0=n(ge,"LI",{});var MDe=s(v0);k3e=n(MDe,"STRONG",{});var KPt=s(k3e);hPr=r(KPt,"roberta"),KPt.forEach(t),uPr=r(MDe," \u2014 "),WK=n(MDe,"A",{href:!0});var ZPt=s(WK);pPr=r(ZPt,"TFRobertaForQuestionAnswering"),ZPt.forEach(t),_Pr=r(MDe," (RoBERTa model)"),MDe.forEach(t),bPr=i(ge),F0=n(ge,"LI",{});var EDe=s(F0);S3e=n(EDe,"STRONG",{});var eBt=s(S3e);vPr=r(eBt,"roformer"),eBt.forEach(t),FPr=r(EDe," \u2014 "),HK=n(EDe,"A",{href:!0});var oBt=s(HK);TPr=r(oBt,"TFRoFormerForQuestionAnswering"),oBt.forEach(t),MPr=r(EDe," (RoFormer model)"),EDe.forEach(t),EPr=i(ge),T0=n(ge,"LI",{});var CDe=s(T0);R3e=n(CDe,"STRONG",{});var rBt=s(R3e);CPr=r(rBt,"xlm"),rBt.forEach(t),wPr=r(CDe," \u2014 "),UK=n(CDe,"A",{href:!0});var tBt=s(UK);APr=r(tBt,"TFXLMForQuestionAnsweringSimple"),tBt.forEach(t),LPr=r(CDe," (XLM model)"),CDe.forEach(t),yPr=i(ge),M0=n(ge,"LI",{});var wDe=s(M0);P3e=n(wDe,"STRONG",{});var aBt=s(P3e);xPr=r(aBt,"xlm-roberta"),aBt.forEach(t),$Pr=r(wDe," \u2014 "),JK=n(wDe,"A",{href:!0});var nBt=s(JK);kPr=r(nBt,"TFXLMRobertaForQuestionAnswering"),nBt.forEach(t),SPr=r(wDe," (XLM-RoBERTa model)"),wDe.forEach(t),RPr=i(ge),E0=n(ge,"LI",{});var ADe=s(E0);B3e=n(ADe,"STRONG",{});var sBt=s(B3e);PPr=r(sBt,"xlnet"),sBt.forEach(t),BPr=r(ADe," \u2014 "),YK=n(ADe,"A",{href:!0});var lBt=s(YK);IPr=r(lBt,"TFXLNetForQuestionAnsweringSimple"),lBt.forEach(t),NPr=r(ADe," (XLNet model)"),ADe.forEach(t),ge.forEach(t),qPr=i(Ul),T(C0.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),iXe=i(m),jc=n(m,"H2",{class:!0});var _Qe=s(jc);w0=n(_Qe,"A",{id:!0,class:!0,href:!0});var iBt=s(w0);I3e=n(iBt,"SPAN",{});var dBt=s(I3e);T(Rx.$$.fragment,dBt),dBt.forEach(t),iBt.forEach(t),jPr=i(_Qe),N3e=n(_Qe,"SPAN",{});var cBt=s(N3e);DPr=r(cBt,"TFAutoModelForVision2Seq"),cBt.forEach(t),_Qe.forEach(t),dXe=i(m),fr=n(m,"DIV",{class:!0});var Jl=s(fr);T(Px.$$.fragment,Jl),GPr=i(Jl),Dc=n(Jl,"P",{});var cte=s(Dc);OPr=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KK=n(cte,"A",{href:!0});var mBt=s(KK);VPr=r(mBt,"from_pretrained()"),mBt.forEach(t),XPr=r(cte," class method or the "),ZK=n(cte,"A",{href:!0});var fBt=s(ZK);zPr=r(fBt,"from_config()"),fBt.forEach(t),QPr=r(cte,` class
method.`),cte.forEach(t),WPr=i(Jl),Bx=n(Jl,"P",{});var bQe=s(Bx);HPr=r(bQe,"This class cannot be instantiated directly using "),q3e=n(bQe,"CODE",{});var gBt=s(q3e);UPr=r(gBt,"__init__()"),gBt.forEach(t),JPr=r(bQe," (throws an error)."),bQe.forEach(t),YPr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var i7=s(Vt);T(Ix.$$.fragment,i7),KPr=i(i7),j3e=n(i7,"P",{});var hBt=s(j3e);ZPr=r(hBt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hBt.forEach(t),eBr=i(i7),Gc=n(i7,"P",{});var mte=s(Gc);oBr=r(mte,`Note:
Loading a model from its configuration file does `),D3e=n(mte,"STRONG",{});var uBt=s(D3e);rBr=r(uBt,"not"),uBt.forEach(t),tBr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(mte,"A",{href:!0});var pBt=s(eZ);aBr=r(pBt,"from_pretrained()"),pBt.forEach(t),nBr=r(mte," to load the model weights."),mte.forEach(t),sBr=i(i7),T(A0.$$.fragment,i7),i7.forEach(t),lBr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Nx.$$.fragment,Yl),iBr=i(Yl),G3e=n(Yl,"P",{});var _Bt=s(G3e);dBr=r(_Bt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Bt.forEach(t),cBr=i(Yl),bn=n(Yl,"P",{});var d7=s(bn);mBr=r(d7,"The model class to instantiate is selected based on the "),O3e=n(d7,"CODE",{});var bBt=s(O3e);fBr=r(bBt,"model_type"),bBt.forEach(t),gBr=r(d7,` property of the config object (either
passed as an argument or loaded from `),V3e=n(d7,"CODE",{});var vBt=s(V3e);hBr=r(vBt,"pretrained_model_name_or_path"),vBt.forEach(t),uBr=r(d7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=n(d7,"CODE",{});var FBt=s(X3e);pBr=r(FBt,"pretrained_model_name_or_path"),FBt.forEach(t),_Br=r(d7,":"),d7.forEach(t),bBr=i(Yl),z3e=n(Yl,"UL",{});var TBt=s(z3e);L0=n(TBt,"LI",{});var LDe=s(L0);Q3e=n(LDe,"STRONG",{});var MBt=s(Q3e);vBr=r(MBt,"vision-encoder-decoder"),MBt.forEach(t),FBr=r(LDe," \u2014 "),oZ=n(LDe,"A",{href:!0});var EBt=s(oZ);TBr=r(EBt,"TFVisionEncoderDecoderModel"),EBt.forEach(t),MBr=r(LDe," (Vision Encoder decoder model)"),LDe.forEach(t),TBt.forEach(t),EBr=i(Yl),T(y0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),cXe=i(m),Oc=n(m,"H2",{class:!0});var vQe=s(Oc);x0=n(vQe,"A",{id:!0,class:!0,href:!0});var CBt=s(x0);W3e=n(CBt,"SPAN",{});var wBt=s(W3e);T(qx.$$.fragment,wBt),wBt.forEach(t),CBt.forEach(t),CBr=i(vQe),H3e=n(vQe,"SPAN",{});var ABt=s(H3e);wBr=r(ABt,"TFAutoModelForSpeechSeq2Seq"),ABt.forEach(t),vQe.forEach(t),mXe=i(m),gr=n(m,"DIV",{class:!0});var Kl=s(gr);T(jx.$$.fragment,Kl),ABr=i(Kl),Vc=n(Kl,"P",{});var fte=s(Vc);LBr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),rZ=n(fte,"A",{href:!0});var LBt=s(rZ);yBr=r(LBt,"from_pretrained()"),LBt.forEach(t),xBr=r(fte," class method or the "),tZ=n(fte,"A",{href:!0});var yBt=s(tZ);$Br=r(yBt,"from_config()"),yBt.forEach(t),kBr=r(fte,` class
method.`),fte.forEach(t),SBr=i(Kl),Dx=n(Kl,"P",{});var FQe=s(Dx);RBr=r(FQe,"This class cannot be instantiated directly using "),U3e=n(FQe,"CODE",{});var xBt=s(U3e);PBr=r(xBt,"__init__()"),xBt.forEach(t),BBr=r(FQe," (throws an error)."),FQe.forEach(t),IBr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var c7=s(Xt);T(Gx.$$.fragment,c7),NBr=i(c7),J3e=n(c7,"P",{});var $Bt=s(J3e);qBr=r($Bt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$Bt.forEach(t),jBr=i(c7),Xc=n(c7,"P",{});var gte=s(Xc);DBr=r(gte,`Note:
Loading a model from its configuration file does `),Y3e=n(gte,"STRONG",{});var kBt=s(Y3e);GBr=r(kBt,"not"),kBt.forEach(t),OBr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(gte,"A",{href:!0});var SBt=s(aZ);VBr=r(SBt,"from_pretrained()"),SBt.forEach(t),XBr=r(gte," to load the model weights."),gte.forEach(t),zBr=i(c7),T($0.$$.fragment,c7),c7.forEach(t),QBr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(Ox.$$.fragment,Zl),WBr=i(Zl),K3e=n(Zl,"P",{});var RBt=s(K3e);HBr=r(RBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),RBt.forEach(t),UBr=i(Zl),vn=n(Zl,"P",{});var m7=s(vn);JBr=r(m7,"The model class to instantiate is selected based on the "),Z3e=n(m7,"CODE",{});var PBt=s(Z3e);YBr=r(PBt,"model_type"),PBt.forEach(t),KBr=r(m7,` property of the config object (either
passed as an argument or loaded from `),e5e=n(m7,"CODE",{});var BBt=s(e5e);ZBr=r(BBt,"pretrained_model_name_or_path"),BBt.forEach(t),eIr=r(m7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o5e=n(m7,"CODE",{});var IBt=s(o5e);oIr=r(IBt,"pretrained_model_name_or_path"),IBt.forEach(t),rIr=r(m7,":"),m7.forEach(t),tIr=i(Zl),r5e=n(Zl,"UL",{});var NBt=s(r5e);k0=n(NBt,"LI",{});var yDe=s(k0);t5e=n(yDe,"STRONG",{});var qBt=s(t5e);aIr=r(qBt,"speech_to_text"),qBt.forEach(t),nIr=r(yDe," \u2014 "),nZ=n(yDe,"A",{href:!0});var jBt=s(nZ);sIr=r(jBt,"TFSpeech2TextForConditionalGeneration"),jBt.forEach(t),lIr=r(yDe," (Speech2Text model)"),yDe.forEach(t),NBt.forEach(t),iIr=i(Zl),T(S0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),fXe=i(m),zc=n(m,"H2",{class:!0});var TQe=s(zc);R0=n(TQe,"A",{id:!0,class:!0,href:!0});var DBt=s(R0);a5e=n(DBt,"SPAN",{});var GBt=s(a5e);T(Vx.$$.fragment,GBt),GBt.forEach(t),DBt.forEach(t),dIr=i(TQe),n5e=n(TQe,"SPAN",{});var OBt=s(n5e);cIr=r(OBt,"FlaxAutoModel"),OBt.forEach(t),TQe.forEach(t),gXe=i(m),hr=n(m,"DIV",{class:!0});var ei=s(hr);T(Xx.$$.fragment,ei),mIr=i(ei),Qc=n(ei,"P",{});var hte=s(Qc);fIr=r(hte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sZ=n(hte,"A",{href:!0});var VBt=s(sZ);gIr=r(VBt,"from_pretrained()"),VBt.forEach(t),hIr=r(hte," class method or the "),lZ=n(hte,"A",{href:!0});var XBt=s(lZ);uIr=r(XBt,"from_config()"),XBt.forEach(t),pIr=r(hte,` class
method.`),hte.forEach(t),_Ir=i(ei),zx=n(ei,"P",{});var MQe=s(zx);bIr=r(MQe,"This class cannot be instantiated directly using "),s5e=n(MQe,"CODE",{});var zBt=s(s5e);vIr=r(zBt,"__init__()"),zBt.forEach(t),FIr=r(MQe," (throws an error)."),MQe.forEach(t),TIr=i(ei),zt=n(ei,"DIV",{class:!0});var f7=s(zt);T(Qx.$$.fragment,f7),MIr=i(f7),l5e=n(f7,"P",{});var QBt=s(l5e);EIr=r(QBt,"Instantiates one of the base model classes of the library from a configuration."),QBt.forEach(t),CIr=i(f7),Wc=n(f7,"P",{});var ute=s(Wc);wIr=r(ute,`Note:
Loading a model from its configuration file does `),i5e=n(ute,"STRONG",{});var WBt=s(i5e);AIr=r(WBt,"not"),WBt.forEach(t),LIr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),iZ=n(ute,"A",{href:!0});var HBt=s(iZ);yIr=r(HBt,"from_pretrained()"),HBt.forEach(t),xIr=r(ute," to load the model weights."),ute.forEach(t),$Ir=i(f7),T(P0.$$.fragment,f7),f7.forEach(t),kIr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(Wx.$$.fragment,oi),SIr=i(oi),d5e=n(oi,"P",{});var UBt=s(d5e);RIr=r(UBt,"Instantiate one of the base model classes of the library from a pretrained model."),UBt.forEach(t),PIr=i(oi),Fn=n(oi,"P",{});var g7=s(Fn);BIr=r(g7,"The model class to instantiate is selected based on the "),c5e=n(g7,"CODE",{});var JBt=s(c5e);IIr=r(JBt,"model_type"),JBt.forEach(t),NIr=r(g7,` property of the config object (either
passed as an argument or loaded from `),m5e=n(g7,"CODE",{});var YBt=s(m5e);qIr=r(YBt,"pretrained_model_name_or_path"),YBt.forEach(t),jIr=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=n(g7,"CODE",{});var KBt=s(f5e);DIr=r(KBt,"pretrained_model_name_or_path"),KBt.forEach(t),GIr=r(g7,":"),g7.forEach(t),OIr=i(oi),oe=n(oi,"UL",{});var ae=s(oe);B0=n(ae,"LI",{});var xDe=s(B0);g5e=n(xDe,"STRONG",{});var ZBt=s(g5e);VIr=r(ZBt,"albert"),ZBt.forEach(t),XIr=r(xDe," \u2014 "),dZ=n(xDe,"A",{href:!0});var eIt=s(dZ);zIr=r(eIt,"FlaxAlbertModel"),eIt.forEach(t),QIr=r(xDe," (ALBERT model)"),xDe.forEach(t),WIr=i(ae),I0=n(ae,"LI",{});var $De=s(I0);h5e=n($De,"STRONG",{});var oIt=s(h5e);HIr=r(oIt,"bart"),oIt.forEach(t),UIr=r($De," \u2014 "),cZ=n($De,"A",{href:!0});var rIt=s(cZ);JIr=r(rIt,"FlaxBartModel"),rIt.forEach(t),YIr=r($De," (BART model)"),$De.forEach(t),KIr=i(ae),N0=n(ae,"LI",{});var kDe=s(N0);u5e=n(kDe,"STRONG",{});var tIt=s(u5e);ZIr=r(tIt,"beit"),tIt.forEach(t),eNr=r(kDe," \u2014 "),mZ=n(kDe,"A",{href:!0});var aIt=s(mZ);oNr=r(aIt,"FlaxBeitModel"),aIt.forEach(t),rNr=r(kDe," (BEiT model)"),kDe.forEach(t),tNr=i(ae),q0=n(ae,"LI",{});var SDe=s(q0);p5e=n(SDe,"STRONG",{});var nIt=s(p5e);aNr=r(nIt,"bert"),nIt.forEach(t),nNr=r(SDe," \u2014 "),fZ=n(SDe,"A",{href:!0});var sIt=s(fZ);sNr=r(sIt,"FlaxBertModel"),sIt.forEach(t),lNr=r(SDe," (BERT model)"),SDe.forEach(t),iNr=i(ae),j0=n(ae,"LI",{});var RDe=s(j0);_5e=n(RDe,"STRONG",{});var lIt=s(_5e);dNr=r(lIt,"big_bird"),lIt.forEach(t),cNr=r(RDe," \u2014 "),gZ=n(RDe,"A",{href:!0});var iIt=s(gZ);mNr=r(iIt,"FlaxBigBirdModel"),iIt.forEach(t),fNr=r(RDe," (BigBird model)"),RDe.forEach(t),gNr=i(ae),D0=n(ae,"LI",{});var PDe=s(D0);b5e=n(PDe,"STRONG",{});var dIt=s(b5e);hNr=r(dIt,"blenderbot"),dIt.forEach(t),uNr=r(PDe," \u2014 "),hZ=n(PDe,"A",{href:!0});var cIt=s(hZ);pNr=r(cIt,"FlaxBlenderbotModel"),cIt.forEach(t),_Nr=r(PDe," (Blenderbot model)"),PDe.forEach(t),bNr=i(ae),G0=n(ae,"LI",{});var BDe=s(G0);v5e=n(BDe,"STRONG",{});var mIt=s(v5e);vNr=r(mIt,"blenderbot-small"),mIt.forEach(t),FNr=r(BDe," \u2014 "),uZ=n(BDe,"A",{href:!0});var fIt=s(uZ);TNr=r(fIt,"FlaxBlenderbotSmallModel"),fIt.forEach(t),MNr=r(BDe," (BlenderbotSmall model)"),BDe.forEach(t),ENr=i(ae),O0=n(ae,"LI",{});var IDe=s(O0);F5e=n(IDe,"STRONG",{});var gIt=s(F5e);CNr=r(gIt,"clip"),gIt.forEach(t),wNr=r(IDe," \u2014 "),pZ=n(IDe,"A",{href:!0});var hIt=s(pZ);ANr=r(hIt,"FlaxCLIPModel"),hIt.forEach(t),LNr=r(IDe," (CLIP model)"),IDe.forEach(t),yNr=i(ae),V0=n(ae,"LI",{});var NDe=s(V0);T5e=n(NDe,"STRONG",{});var uIt=s(T5e);xNr=r(uIt,"distilbert"),uIt.forEach(t),$Nr=r(NDe," \u2014 "),_Z=n(NDe,"A",{href:!0});var pIt=s(_Z);kNr=r(pIt,"FlaxDistilBertModel"),pIt.forEach(t),SNr=r(NDe," (DistilBERT model)"),NDe.forEach(t),RNr=i(ae),X0=n(ae,"LI",{});var qDe=s(X0);M5e=n(qDe,"STRONG",{});var _It=s(M5e);PNr=r(_It,"electra"),_It.forEach(t),BNr=r(qDe," \u2014 "),bZ=n(qDe,"A",{href:!0});var bIt=s(bZ);INr=r(bIt,"FlaxElectraModel"),bIt.forEach(t),NNr=r(qDe," (ELECTRA model)"),qDe.forEach(t),qNr=i(ae),z0=n(ae,"LI",{});var jDe=s(z0);E5e=n(jDe,"STRONG",{});var vIt=s(E5e);jNr=r(vIt,"gpt2"),vIt.forEach(t),DNr=r(jDe," \u2014 "),vZ=n(jDe,"A",{href:!0});var FIt=s(vZ);GNr=r(FIt,"FlaxGPT2Model"),FIt.forEach(t),ONr=r(jDe," (OpenAI GPT-2 model)"),jDe.forEach(t),VNr=i(ae),Q0=n(ae,"LI",{});var DDe=s(Q0);C5e=n(DDe,"STRONG",{});var TIt=s(C5e);XNr=r(TIt,"gpt_neo"),TIt.forEach(t),zNr=r(DDe," \u2014 "),FZ=n(DDe,"A",{href:!0});var MIt=s(FZ);QNr=r(MIt,"FlaxGPTNeoModel"),MIt.forEach(t),WNr=r(DDe," (GPT Neo model)"),DDe.forEach(t),HNr=i(ae),W0=n(ae,"LI",{});var GDe=s(W0);w5e=n(GDe,"STRONG",{});var EIt=s(w5e);UNr=r(EIt,"gptj"),EIt.forEach(t),JNr=r(GDe," \u2014 "),TZ=n(GDe,"A",{href:!0});var CIt=s(TZ);YNr=r(CIt,"FlaxGPTJModel"),CIt.forEach(t),KNr=r(GDe," (GPT-J model)"),GDe.forEach(t),ZNr=i(ae),H0=n(ae,"LI",{});var ODe=s(H0);A5e=n(ODe,"STRONG",{});var wIt=s(A5e);eqr=r(wIt,"longt5"),wIt.forEach(t),oqr=r(ODe," \u2014 "),MZ=n(ODe,"A",{href:!0});var AIt=s(MZ);rqr=r(AIt,"FlaxLongT5Model"),AIt.forEach(t),tqr=r(ODe," (LongT5 model)"),ODe.forEach(t),aqr=i(ae),U0=n(ae,"LI",{});var VDe=s(U0);L5e=n(VDe,"STRONG",{});var LIt=s(L5e);nqr=r(LIt,"marian"),LIt.forEach(t),sqr=r(VDe," \u2014 "),EZ=n(VDe,"A",{href:!0});var yIt=s(EZ);lqr=r(yIt,"FlaxMarianModel"),yIt.forEach(t),iqr=r(VDe," (Marian model)"),VDe.forEach(t),dqr=i(ae),J0=n(ae,"LI",{});var XDe=s(J0);y5e=n(XDe,"STRONG",{});var xIt=s(y5e);cqr=r(xIt,"mbart"),xIt.forEach(t),mqr=r(XDe," \u2014 "),CZ=n(XDe,"A",{href:!0});var $It=s(CZ);fqr=r($It,"FlaxMBartModel"),$It.forEach(t),gqr=r(XDe," (mBART model)"),XDe.forEach(t),hqr=i(ae),Y0=n(ae,"LI",{});var zDe=s(Y0);x5e=n(zDe,"STRONG",{});var kIt=s(x5e);uqr=r(kIt,"mt5"),kIt.forEach(t),pqr=r(zDe," \u2014 "),wZ=n(zDe,"A",{href:!0});var SIt=s(wZ);_qr=r(SIt,"FlaxMT5Model"),SIt.forEach(t),bqr=r(zDe," (MT5 model)"),zDe.forEach(t),vqr=i(ae),K0=n(ae,"LI",{});var QDe=s(K0);$5e=n(QDe,"STRONG",{});var RIt=s($5e);Fqr=r(RIt,"opt"),RIt.forEach(t),Tqr=r(QDe," \u2014 "),AZ=n(QDe,"A",{href:!0});var PIt=s(AZ);Mqr=r(PIt,"FlaxOPTModel"),PIt.forEach(t),Eqr=r(QDe," (OPT model)"),QDe.forEach(t),Cqr=i(ae),Z0=n(ae,"LI",{});var WDe=s(Z0);k5e=n(WDe,"STRONG",{});var BIt=s(k5e);wqr=r(BIt,"pegasus"),BIt.forEach(t),Aqr=r(WDe," \u2014 "),LZ=n(WDe,"A",{href:!0});var IIt=s(LZ);Lqr=r(IIt,"FlaxPegasusModel"),IIt.forEach(t),yqr=r(WDe," (Pegasus model)"),WDe.forEach(t),xqr=i(ae),ew=n(ae,"LI",{});var HDe=s(ew);S5e=n(HDe,"STRONG",{});var NIt=s(S5e);$qr=r(NIt,"roberta"),NIt.forEach(t),kqr=r(HDe," \u2014 "),yZ=n(HDe,"A",{href:!0});var qIt=s(yZ);Sqr=r(qIt,"FlaxRobertaModel"),qIt.forEach(t),Rqr=r(HDe," (RoBERTa model)"),HDe.forEach(t),Pqr=i(ae),ow=n(ae,"LI",{});var UDe=s(ow);R5e=n(UDe,"STRONG",{});var jIt=s(R5e);Bqr=r(jIt,"roformer"),jIt.forEach(t),Iqr=r(UDe," \u2014 "),xZ=n(UDe,"A",{href:!0});var DIt=s(xZ);Nqr=r(DIt,"FlaxRoFormerModel"),DIt.forEach(t),qqr=r(UDe," (RoFormer model)"),UDe.forEach(t),jqr=i(ae),rw=n(ae,"LI",{});var JDe=s(rw);P5e=n(JDe,"STRONG",{});var GIt=s(P5e);Dqr=r(GIt,"t5"),GIt.forEach(t),Gqr=r(JDe," \u2014 "),$Z=n(JDe,"A",{href:!0});var OIt=s($Z);Oqr=r(OIt,"FlaxT5Model"),OIt.forEach(t),Vqr=r(JDe," (T5 model)"),JDe.forEach(t),Xqr=i(ae),tw=n(ae,"LI",{});var YDe=s(tw);B5e=n(YDe,"STRONG",{});var VIt=s(B5e);zqr=r(VIt,"vision-text-dual-encoder"),VIt.forEach(t),Qqr=r(YDe," \u2014 "),kZ=n(YDe,"A",{href:!0});var XIt=s(kZ);Wqr=r(XIt,"FlaxVisionTextDualEncoderModel"),XIt.forEach(t),Hqr=r(YDe," (VisionTextDualEncoder model)"),YDe.forEach(t),Uqr=i(ae),aw=n(ae,"LI",{});var KDe=s(aw);I5e=n(KDe,"STRONG",{});var zIt=s(I5e);Jqr=r(zIt,"vit"),zIt.forEach(t),Yqr=r(KDe," \u2014 "),SZ=n(KDe,"A",{href:!0});var QIt=s(SZ);Kqr=r(QIt,"FlaxViTModel"),QIt.forEach(t),Zqr=r(KDe," (ViT model)"),KDe.forEach(t),ejr=i(ae),nw=n(ae,"LI",{});var ZDe=s(nw);N5e=n(ZDe,"STRONG",{});var WIt=s(N5e);ojr=r(WIt,"wav2vec2"),WIt.forEach(t),rjr=r(ZDe," \u2014 "),RZ=n(ZDe,"A",{href:!0});var HIt=s(RZ);tjr=r(HIt,"FlaxWav2Vec2Model"),HIt.forEach(t),ajr=r(ZDe," (Wav2Vec2 model)"),ZDe.forEach(t),njr=i(ae),sw=n(ae,"LI",{});var eGe=s(sw);q5e=n(eGe,"STRONG",{});var UIt=s(q5e);sjr=r(UIt,"xglm"),UIt.forEach(t),ljr=r(eGe," \u2014 "),PZ=n(eGe,"A",{href:!0});var JIt=s(PZ);ijr=r(JIt,"FlaxXGLMModel"),JIt.forEach(t),djr=r(eGe," (XGLM model)"),eGe.forEach(t),cjr=i(ae),lw=n(ae,"LI",{});var oGe=s(lw);j5e=n(oGe,"STRONG",{});var YIt=s(j5e);mjr=r(YIt,"xlm-roberta"),YIt.forEach(t),fjr=r(oGe," \u2014 "),BZ=n(oGe,"A",{href:!0});var KIt=s(BZ);gjr=r(KIt,"FlaxXLMRobertaModel"),KIt.forEach(t),hjr=r(oGe," (XLM-RoBERTa model)"),oGe.forEach(t),ae.forEach(t),ujr=i(oi),T(iw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),hXe=i(m),Hc=n(m,"H2",{class:!0});var EQe=s(Hc);dw=n(EQe,"A",{id:!0,class:!0,href:!0});var ZIt=s(dw);D5e=n(ZIt,"SPAN",{});var eNt=s(D5e);T(Hx.$$.fragment,eNt),eNt.forEach(t),ZIt.forEach(t),pjr=i(EQe),G5e=n(EQe,"SPAN",{});var oNt=s(G5e);_jr=r(oNt,"FlaxAutoModelForCausalLM"),oNt.forEach(t),EQe.forEach(t),uXe=i(m),ur=n(m,"DIV",{class:!0});var ri=s(ur);T(Ux.$$.fragment,ri),bjr=i(ri),Uc=n(ri,"P",{});var pte=s(Uc);vjr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),IZ=n(pte,"A",{href:!0});var rNt=s(IZ);Fjr=r(rNt,"from_pretrained()"),rNt.forEach(t),Tjr=r(pte," class method or the "),NZ=n(pte,"A",{href:!0});var tNt=s(NZ);Mjr=r(tNt,"from_config()"),tNt.forEach(t),Ejr=r(pte,` class
method.`),pte.forEach(t),Cjr=i(ri),Jx=n(ri,"P",{});var CQe=s(Jx);wjr=r(CQe,"This class cannot be instantiated directly using "),O5e=n(CQe,"CODE",{});var aNt=s(O5e);Ajr=r(aNt,"__init__()"),aNt.forEach(t),Ljr=r(CQe," (throws an error)."),CQe.forEach(t),yjr=i(ri),Qt=n(ri,"DIV",{class:!0});var h7=s(Qt);T(Yx.$$.fragment,h7),xjr=i(h7),V5e=n(h7,"P",{});var nNt=s(V5e);$jr=r(nNt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nNt.forEach(t),kjr=i(h7),Jc=n(h7,"P",{});var _te=s(Jc);Sjr=r(_te,`Note:
Loading a model from its configuration file does `),X5e=n(_te,"STRONG",{});var sNt=s(X5e);Rjr=r(sNt,"not"),sNt.forEach(t),Pjr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(_te,"A",{href:!0});var lNt=s(qZ);Bjr=r(lNt,"from_pretrained()"),lNt.forEach(t),Ijr=r(_te," to load the model weights."),_te.forEach(t),Njr=i(h7),T(cw.$$.fragment,h7),h7.forEach(t),qjr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(Kx.$$.fragment,ti),jjr=i(ti),z5e=n(ti,"P",{});var iNt=s(z5e);Djr=r(iNt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iNt.forEach(t),Gjr=i(ti),Tn=n(ti,"P",{});var u7=s(Tn);Ojr=r(u7,"The model class to instantiate is selected based on the "),Q5e=n(u7,"CODE",{});var dNt=s(Q5e);Vjr=r(dNt,"model_type"),dNt.forEach(t),Xjr=r(u7,` property of the config object (either
passed as an argument or loaded from `),W5e=n(u7,"CODE",{});var cNt=s(W5e);zjr=r(cNt,"pretrained_model_name_or_path"),cNt.forEach(t),Qjr=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(u7,"CODE",{});var mNt=s(H5e);Wjr=r(mNt,"pretrained_model_name_or_path"),mNt.forEach(t),Hjr=r(u7,":"),u7.forEach(t),Ujr=i(ti),xe=n(ti,"UL",{});var Ne=s(xe);mw=n(Ne,"LI",{});var rGe=s(mw);U5e=n(rGe,"STRONG",{});var fNt=s(U5e);Jjr=r(fNt,"bart"),fNt.forEach(t),Yjr=r(rGe," \u2014 "),jZ=n(rGe,"A",{href:!0});var gNt=s(jZ);Kjr=r(gNt,"FlaxBartForCausalLM"),gNt.forEach(t),Zjr=r(rGe," (BART model)"),rGe.forEach(t),eDr=i(Ne),fw=n(Ne,"LI",{});var tGe=s(fw);J5e=n(tGe,"STRONG",{});var hNt=s(J5e);oDr=r(hNt,"bert"),hNt.forEach(t),rDr=r(tGe," \u2014 "),DZ=n(tGe,"A",{href:!0});var uNt=s(DZ);tDr=r(uNt,"FlaxBertForCausalLM"),uNt.forEach(t),aDr=r(tGe," (BERT model)"),tGe.forEach(t),nDr=i(Ne),gw=n(Ne,"LI",{});var aGe=s(gw);Y5e=n(aGe,"STRONG",{});var pNt=s(Y5e);sDr=r(pNt,"big_bird"),pNt.forEach(t),lDr=r(aGe," \u2014 "),GZ=n(aGe,"A",{href:!0});var _Nt=s(GZ);iDr=r(_Nt,"FlaxBigBirdForCausalLM"),_Nt.forEach(t),dDr=r(aGe," (BigBird model)"),aGe.forEach(t),cDr=i(Ne),hw=n(Ne,"LI",{});var nGe=s(hw);K5e=n(nGe,"STRONG",{});var bNt=s(K5e);mDr=r(bNt,"electra"),bNt.forEach(t),fDr=r(nGe," \u2014 "),OZ=n(nGe,"A",{href:!0});var vNt=s(OZ);gDr=r(vNt,"FlaxElectraForCausalLM"),vNt.forEach(t),hDr=r(nGe," (ELECTRA model)"),nGe.forEach(t),uDr=i(Ne),uw=n(Ne,"LI",{});var sGe=s(uw);Z5e=n(sGe,"STRONG",{});var FNt=s(Z5e);pDr=r(FNt,"gpt2"),FNt.forEach(t),_Dr=r(sGe," \u2014 "),VZ=n(sGe,"A",{href:!0});var TNt=s(VZ);bDr=r(TNt,"FlaxGPT2LMHeadModel"),TNt.forEach(t),vDr=r(sGe," (OpenAI GPT-2 model)"),sGe.forEach(t),FDr=i(Ne),pw=n(Ne,"LI",{});var lGe=s(pw);e0e=n(lGe,"STRONG",{});var MNt=s(e0e);TDr=r(MNt,"gpt_neo"),MNt.forEach(t),MDr=r(lGe," \u2014 "),XZ=n(lGe,"A",{href:!0});var ENt=s(XZ);EDr=r(ENt,"FlaxGPTNeoForCausalLM"),ENt.forEach(t),CDr=r(lGe," (GPT Neo model)"),lGe.forEach(t),wDr=i(Ne),_w=n(Ne,"LI",{});var iGe=s(_w);o0e=n(iGe,"STRONG",{});var CNt=s(o0e);ADr=r(CNt,"gptj"),CNt.forEach(t),LDr=r(iGe," \u2014 "),zZ=n(iGe,"A",{href:!0});var wNt=s(zZ);yDr=r(wNt,"FlaxGPTJForCausalLM"),wNt.forEach(t),xDr=r(iGe," (GPT-J model)"),iGe.forEach(t),$Dr=i(Ne),bw=n(Ne,"LI",{});var dGe=s(bw);r0e=n(dGe,"STRONG",{});var ANt=s(r0e);kDr=r(ANt,"opt"),ANt.forEach(t),SDr=r(dGe," \u2014 "),QZ=n(dGe,"A",{href:!0});var LNt=s(QZ);RDr=r(LNt,"FlaxOPTForCausalLM"),LNt.forEach(t),PDr=r(dGe," (OPT model)"),dGe.forEach(t),BDr=i(Ne),vw=n(Ne,"LI",{});var cGe=s(vw);t0e=n(cGe,"STRONG",{});var yNt=s(t0e);IDr=r(yNt,"roberta"),yNt.forEach(t),NDr=r(cGe," \u2014 "),WZ=n(cGe,"A",{href:!0});var xNt=s(WZ);qDr=r(xNt,"FlaxRobertaForCausalLM"),xNt.forEach(t),jDr=r(cGe," (RoBERTa model)"),cGe.forEach(t),DDr=i(Ne),Fw=n(Ne,"LI",{});var mGe=s(Fw);a0e=n(mGe,"STRONG",{});var $Nt=s(a0e);GDr=r($Nt,"xglm"),$Nt.forEach(t),ODr=r(mGe," \u2014 "),HZ=n(mGe,"A",{href:!0});var kNt=s(HZ);VDr=r(kNt,"FlaxXGLMForCausalLM"),kNt.forEach(t),XDr=r(mGe," (XGLM model)"),mGe.forEach(t),Ne.forEach(t),zDr=i(ti),T(Tw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),pXe=i(m),Yc=n(m,"H2",{class:!0});var wQe=s(Yc);Mw=n(wQe,"A",{id:!0,class:!0,href:!0});var SNt=s(Mw);n0e=n(SNt,"SPAN",{});var RNt=s(n0e);T(Zx.$$.fragment,RNt),RNt.forEach(t),SNt.forEach(t),QDr=i(wQe),s0e=n(wQe,"SPAN",{});var PNt=s(s0e);WDr=r(PNt,"FlaxAutoModelForPreTraining"),PNt.forEach(t),wQe.forEach(t),_Xe=i(m),pr=n(m,"DIV",{class:!0});var ai=s(pr);T(e$.$$.fragment,ai),HDr=i(ai),Kc=n(ai,"P",{});var bte=s(Kc);UDr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UZ=n(bte,"A",{href:!0});var BNt=s(UZ);JDr=r(BNt,"from_pretrained()"),BNt.forEach(t),YDr=r(bte," class method or the "),JZ=n(bte,"A",{href:!0});var INt=s(JZ);KDr=r(INt,"from_config()"),INt.forEach(t),ZDr=r(bte,` class
method.`),bte.forEach(t),eGr=i(ai),o$=n(ai,"P",{});var AQe=s(o$);oGr=r(AQe,"This class cannot be instantiated directly using "),l0e=n(AQe,"CODE",{});var NNt=s(l0e);rGr=r(NNt,"__init__()"),NNt.forEach(t),tGr=r(AQe," (throws an error)."),AQe.forEach(t),aGr=i(ai),Wt=n(ai,"DIV",{class:!0});var p7=s(Wt);T(r$.$$.fragment,p7),nGr=i(p7),i0e=n(p7,"P",{});var qNt=s(i0e);sGr=r(qNt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qNt.forEach(t),lGr=i(p7),Zc=n(p7,"P",{});var vte=s(Zc);iGr=r(vte,`Note:
Loading a model from its configuration file does `),d0e=n(vte,"STRONG",{});var jNt=s(d0e);dGr=r(jNt,"not"),jNt.forEach(t),cGr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),YZ=n(vte,"A",{href:!0});var DNt=s(YZ);mGr=r(DNt,"from_pretrained()"),DNt.forEach(t),fGr=r(vte," to load the model weights."),vte.forEach(t),gGr=i(p7),T(Ew.$$.fragment,p7),p7.forEach(t),hGr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(t$.$$.fragment,ni),uGr=i(ni),c0e=n(ni,"P",{});var GNt=s(c0e);pGr=r(GNt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GNt.forEach(t),_Gr=i(ni),Mn=n(ni,"P",{});var _7=s(Mn);bGr=r(_7,"The model class to instantiate is selected based on the "),m0e=n(_7,"CODE",{});var ONt=s(m0e);vGr=r(ONt,"model_type"),ONt.forEach(t),FGr=r(_7,` property of the config object (either
passed as an argument or loaded from `),f0e=n(_7,"CODE",{});var VNt=s(f0e);TGr=r(VNt,"pretrained_model_name_or_path"),VNt.forEach(t),MGr=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=n(_7,"CODE",{});var XNt=s(g0e);EGr=r(XNt,"pretrained_model_name_or_path"),XNt.forEach(t),CGr=r(_7,":"),_7.forEach(t),wGr=i(ni),Ee=n(ni,"UL",{});var we=s(Ee);Cw=n(we,"LI",{});var fGe=s(Cw);h0e=n(fGe,"STRONG",{});var zNt=s(h0e);AGr=r(zNt,"albert"),zNt.forEach(t),LGr=r(fGe," \u2014 "),KZ=n(fGe,"A",{href:!0});var QNt=s(KZ);yGr=r(QNt,"FlaxAlbertForPreTraining"),QNt.forEach(t),xGr=r(fGe," (ALBERT model)"),fGe.forEach(t),$Gr=i(we),ww=n(we,"LI",{});var gGe=s(ww);u0e=n(gGe,"STRONG",{});var WNt=s(u0e);kGr=r(WNt,"bart"),WNt.forEach(t),SGr=r(gGe," \u2014 "),ZZ=n(gGe,"A",{href:!0});var HNt=s(ZZ);RGr=r(HNt,"FlaxBartForConditionalGeneration"),HNt.forEach(t),PGr=r(gGe," (BART model)"),gGe.forEach(t),BGr=i(we),Aw=n(we,"LI",{});var hGe=s(Aw);p0e=n(hGe,"STRONG",{});var UNt=s(p0e);IGr=r(UNt,"bert"),UNt.forEach(t),NGr=r(hGe," \u2014 "),eee=n(hGe,"A",{href:!0});var JNt=s(eee);qGr=r(JNt,"FlaxBertForPreTraining"),JNt.forEach(t),jGr=r(hGe," (BERT model)"),hGe.forEach(t),DGr=i(we),Lw=n(we,"LI",{});var uGe=s(Lw);_0e=n(uGe,"STRONG",{});var YNt=s(_0e);GGr=r(YNt,"big_bird"),YNt.forEach(t),OGr=r(uGe," \u2014 "),oee=n(uGe,"A",{href:!0});var KNt=s(oee);VGr=r(KNt,"FlaxBigBirdForPreTraining"),KNt.forEach(t),XGr=r(uGe," (BigBird model)"),uGe.forEach(t),zGr=i(we),yw=n(we,"LI",{});var pGe=s(yw);b0e=n(pGe,"STRONG",{});var ZNt=s(b0e);QGr=r(ZNt,"electra"),ZNt.forEach(t),WGr=r(pGe," \u2014 "),ree=n(pGe,"A",{href:!0});var eqt=s(ree);HGr=r(eqt,"FlaxElectraForPreTraining"),eqt.forEach(t),UGr=r(pGe," (ELECTRA model)"),pGe.forEach(t),JGr=i(we),xw=n(we,"LI",{});var _Ge=s(xw);v0e=n(_Ge,"STRONG",{});var oqt=s(v0e);YGr=r(oqt,"longt5"),oqt.forEach(t),KGr=r(_Ge," \u2014 "),tee=n(_Ge,"A",{href:!0});var rqt=s(tee);ZGr=r(rqt,"FlaxLongT5ForConditionalGeneration"),rqt.forEach(t),eOr=r(_Ge," (LongT5 model)"),_Ge.forEach(t),oOr=i(we),$w=n(we,"LI",{});var bGe=s($w);F0e=n(bGe,"STRONG",{});var tqt=s(F0e);rOr=r(tqt,"mbart"),tqt.forEach(t),tOr=r(bGe," \u2014 "),aee=n(bGe,"A",{href:!0});var aqt=s(aee);aOr=r(aqt,"FlaxMBartForConditionalGeneration"),aqt.forEach(t),nOr=r(bGe," (mBART model)"),bGe.forEach(t),sOr=i(we),kw=n(we,"LI",{});var vGe=s(kw);T0e=n(vGe,"STRONG",{});var nqt=s(T0e);lOr=r(nqt,"mt5"),nqt.forEach(t),iOr=r(vGe," \u2014 "),nee=n(vGe,"A",{href:!0});var sqt=s(nee);dOr=r(sqt,"FlaxMT5ForConditionalGeneration"),sqt.forEach(t),cOr=r(vGe," (MT5 model)"),vGe.forEach(t),mOr=i(we),Sw=n(we,"LI",{});var FGe=s(Sw);M0e=n(FGe,"STRONG",{});var lqt=s(M0e);fOr=r(lqt,"roberta"),lqt.forEach(t),gOr=r(FGe," \u2014 "),see=n(FGe,"A",{href:!0});var iqt=s(see);hOr=r(iqt,"FlaxRobertaForMaskedLM"),iqt.forEach(t),uOr=r(FGe," (RoBERTa model)"),FGe.forEach(t),pOr=i(we),Rw=n(we,"LI",{});var TGe=s(Rw);E0e=n(TGe,"STRONG",{});var dqt=s(E0e);_Or=r(dqt,"roformer"),dqt.forEach(t),bOr=r(TGe," \u2014 "),lee=n(TGe,"A",{href:!0});var cqt=s(lee);vOr=r(cqt,"FlaxRoFormerForMaskedLM"),cqt.forEach(t),FOr=r(TGe," (RoFormer model)"),TGe.forEach(t),TOr=i(we),Pw=n(we,"LI",{});var MGe=s(Pw);C0e=n(MGe,"STRONG",{});var mqt=s(C0e);MOr=r(mqt,"t5"),mqt.forEach(t),EOr=r(MGe," \u2014 "),iee=n(MGe,"A",{href:!0});var fqt=s(iee);COr=r(fqt,"FlaxT5ForConditionalGeneration"),fqt.forEach(t),wOr=r(MGe," (T5 model)"),MGe.forEach(t),AOr=i(we),Bw=n(we,"LI",{});var EGe=s(Bw);w0e=n(EGe,"STRONG",{});var gqt=s(w0e);LOr=r(gqt,"wav2vec2"),gqt.forEach(t),yOr=r(EGe," \u2014 "),dee=n(EGe,"A",{href:!0});var hqt=s(dee);xOr=r(hqt,"FlaxWav2Vec2ForPreTraining"),hqt.forEach(t),$Or=r(EGe," (Wav2Vec2 model)"),EGe.forEach(t),kOr=i(we),Iw=n(we,"LI",{});var CGe=s(Iw);A0e=n(CGe,"STRONG",{});var uqt=s(A0e);SOr=r(uqt,"xlm-roberta"),uqt.forEach(t),ROr=r(CGe," \u2014 "),cee=n(CGe,"A",{href:!0});var pqt=s(cee);POr=r(pqt,"FlaxXLMRobertaForMaskedLM"),pqt.forEach(t),BOr=r(CGe," (XLM-RoBERTa model)"),CGe.forEach(t),we.forEach(t),IOr=i(ni),T(Nw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),bXe=i(m),em=n(m,"H2",{class:!0});var LQe=s(em);qw=n(LQe,"A",{id:!0,class:!0,href:!0});var _qt=s(qw);L0e=n(_qt,"SPAN",{});var bqt=s(L0e);T(a$.$$.fragment,bqt),bqt.forEach(t),_qt.forEach(t),NOr=i(LQe),y0e=n(LQe,"SPAN",{});var vqt=s(y0e);qOr=r(vqt,"FlaxAutoModelForMaskedLM"),vqt.forEach(t),LQe.forEach(t),vXe=i(m),_r=n(m,"DIV",{class:!0});var si=s(_r);T(n$.$$.fragment,si),jOr=i(si),om=n(si,"P",{});var Fte=s(om);DOr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mee=n(Fte,"A",{href:!0});var Fqt=s(mee);GOr=r(Fqt,"from_pretrained()"),Fqt.forEach(t),OOr=r(Fte," class method or the "),fee=n(Fte,"A",{href:!0});var Tqt=s(fee);VOr=r(Tqt,"from_config()"),Tqt.forEach(t),XOr=r(Fte,` class
method.`),Fte.forEach(t),zOr=i(si),s$=n(si,"P",{});var yQe=s(s$);QOr=r(yQe,"This class cannot be instantiated directly using "),x0e=n(yQe,"CODE",{});var Mqt=s(x0e);WOr=r(Mqt,"__init__()"),Mqt.forEach(t),HOr=r(yQe," (throws an error)."),yQe.forEach(t),UOr=i(si),Ht=n(si,"DIV",{class:!0});var b7=s(Ht);T(l$.$$.fragment,b7),JOr=i(b7),$0e=n(b7,"P",{});var Eqt=s($0e);YOr=r(Eqt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Eqt.forEach(t),KOr=i(b7),rm=n(b7,"P",{});var Tte=s(rm);ZOr=r(Tte,`Note:
Loading a model from its configuration file does `),k0e=n(Tte,"STRONG",{});var Cqt=s(k0e);eVr=r(Cqt,"not"),Cqt.forEach(t),oVr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=n(Tte,"A",{href:!0});var wqt=s(gee);rVr=r(wqt,"from_pretrained()"),wqt.forEach(t),tVr=r(Tte," to load the model weights."),Tte.forEach(t),aVr=i(b7),T(jw.$$.fragment,b7),b7.forEach(t),nVr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(i$.$$.fragment,li),sVr=i(li),S0e=n(li,"P",{});var Aqt=s(S0e);lVr=r(Aqt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Aqt.forEach(t),iVr=i(li),En=n(li,"P",{});var v7=s(En);dVr=r(v7,"The model class to instantiate is selected based on the "),R0e=n(v7,"CODE",{});var Lqt=s(R0e);cVr=r(Lqt,"model_type"),Lqt.forEach(t),mVr=r(v7,` property of the config object (either
passed as an argument or loaded from `),P0e=n(v7,"CODE",{});var yqt=s(P0e);fVr=r(yqt,"pretrained_model_name_or_path"),yqt.forEach(t),gVr=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=n(v7,"CODE",{});var xqt=s(B0e);hVr=r(xqt,"pretrained_model_name_or_path"),xqt.forEach(t),uVr=r(v7,":"),v7.forEach(t),pVr=i(li),$e=n(li,"UL",{});var qe=s($e);Dw=n(qe,"LI",{});var wGe=s(Dw);I0e=n(wGe,"STRONG",{});var $qt=s(I0e);_Vr=r($qt,"albert"),$qt.forEach(t),bVr=r(wGe," \u2014 "),hee=n(wGe,"A",{href:!0});var kqt=s(hee);vVr=r(kqt,"FlaxAlbertForMaskedLM"),kqt.forEach(t),FVr=r(wGe," (ALBERT model)"),wGe.forEach(t),TVr=i(qe),Gw=n(qe,"LI",{});var AGe=s(Gw);N0e=n(AGe,"STRONG",{});var Sqt=s(N0e);MVr=r(Sqt,"bart"),Sqt.forEach(t),EVr=r(AGe," \u2014 "),uee=n(AGe,"A",{href:!0});var Rqt=s(uee);CVr=r(Rqt,"FlaxBartForConditionalGeneration"),Rqt.forEach(t),wVr=r(AGe," (BART model)"),AGe.forEach(t),AVr=i(qe),Ow=n(qe,"LI",{});var LGe=s(Ow);q0e=n(LGe,"STRONG",{});var Pqt=s(q0e);LVr=r(Pqt,"bert"),Pqt.forEach(t),yVr=r(LGe," \u2014 "),pee=n(LGe,"A",{href:!0});var Bqt=s(pee);xVr=r(Bqt,"FlaxBertForMaskedLM"),Bqt.forEach(t),$Vr=r(LGe," (BERT model)"),LGe.forEach(t),kVr=i(qe),Vw=n(qe,"LI",{});var yGe=s(Vw);j0e=n(yGe,"STRONG",{});var Iqt=s(j0e);SVr=r(Iqt,"big_bird"),Iqt.forEach(t),RVr=r(yGe," \u2014 "),_ee=n(yGe,"A",{href:!0});var Nqt=s(_ee);PVr=r(Nqt,"FlaxBigBirdForMaskedLM"),Nqt.forEach(t),BVr=r(yGe," (BigBird model)"),yGe.forEach(t),IVr=i(qe),Xw=n(qe,"LI",{});var xGe=s(Xw);D0e=n(xGe,"STRONG",{});var qqt=s(D0e);NVr=r(qqt,"distilbert"),qqt.forEach(t),qVr=r(xGe," \u2014 "),bee=n(xGe,"A",{href:!0});var jqt=s(bee);jVr=r(jqt,"FlaxDistilBertForMaskedLM"),jqt.forEach(t),DVr=r(xGe," (DistilBERT model)"),xGe.forEach(t),GVr=i(qe),zw=n(qe,"LI",{});var $Ge=s(zw);G0e=n($Ge,"STRONG",{});var Dqt=s(G0e);OVr=r(Dqt,"electra"),Dqt.forEach(t),VVr=r($Ge," \u2014 "),vee=n($Ge,"A",{href:!0});var Gqt=s(vee);XVr=r(Gqt,"FlaxElectraForMaskedLM"),Gqt.forEach(t),zVr=r($Ge," (ELECTRA model)"),$Ge.forEach(t),QVr=i(qe),Qw=n(qe,"LI",{});var kGe=s(Qw);O0e=n(kGe,"STRONG",{});var Oqt=s(O0e);WVr=r(Oqt,"mbart"),Oqt.forEach(t),HVr=r(kGe," \u2014 "),Fee=n(kGe,"A",{href:!0});var Vqt=s(Fee);UVr=r(Vqt,"FlaxMBartForConditionalGeneration"),Vqt.forEach(t),JVr=r(kGe," (mBART model)"),kGe.forEach(t),YVr=i(qe),Ww=n(qe,"LI",{});var SGe=s(Ww);V0e=n(SGe,"STRONG",{});var Xqt=s(V0e);KVr=r(Xqt,"roberta"),Xqt.forEach(t),ZVr=r(SGe," \u2014 "),Tee=n(SGe,"A",{href:!0});var zqt=s(Tee);eXr=r(zqt,"FlaxRobertaForMaskedLM"),zqt.forEach(t),oXr=r(SGe," (RoBERTa model)"),SGe.forEach(t),rXr=i(qe),Hw=n(qe,"LI",{});var RGe=s(Hw);X0e=n(RGe,"STRONG",{});var Qqt=s(X0e);tXr=r(Qqt,"roformer"),Qqt.forEach(t),aXr=r(RGe," \u2014 "),Mee=n(RGe,"A",{href:!0});var Wqt=s(Mee);nXr=r(Wqt,"FlaxRoFormerForMaskedLM"),Wqt.forEach(t),sXr=r(RGe," (RoFormer model)"),RGe.forEach(t),lXr=i(qe),Uw=n(qe,"LI",{});var PGe=s(Uw);z0e=n(PGe,"STRONG",{});var Hqt=s(z0e);iXr=r(Hqt,"xlm-roberta"),Hqt.forEach(t),dXr=r(PGe," \u2014 "),Eee=n(PGe,"A",{href:!0});var Uqt=s(Eee);cXr=r(Uqt,"FlaxXLMRobertaForMaskedLM"),Uqt.forEach(t),mXr=r(PGe," (XLM-RoBERTa model)"),PGe.forEach(t),qe.forEach(t),fXr=i(li),T(Jw.$$.fragment,li),li.forEach(t),si.forEach(t),FXe=i(m),tm=n(m,"H2",{class:!0});var xQe=s(tm);Yw=n(xQe,"A",{id:!0,class:!0,href:!0});var Jqt=s(Yw);Q0e=n(Jqt,"SPAN",{});var Yqt=s(Q0e);T(d$.$$.fragment,Yqt),Yqt.forEach(t),Jqt.forEach(t),gXr=i(xQe),W0e=n(xQe,"SPAN",{});var Kqt=s(W0e);hXr=r(Kqt,"FlaxAutoModelForSeq2SeqLM"),Kqt.forEach(t),xQe.forEach(t),TXe=i(m),br=n(m,"DIV",{class:!0});var ii=s(br);T(c$.$$.fragment,ii),uXr=i(ii),am=n(ii,"P",{});var Mte=s(am);pXr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cee=n(Mte,"A",{href:!0});var Zqt=s(Cee);_Xr=r(Zqt,"from_pretrained()"),Zqt.forEach(t),bXr=r(Mte," class method or the "),wee=n(Mte,"A",{href:!0});var ejt=s(wee);vXr=r(ejt,"from_config()"),ejt.forEach(t),FXr=r(Mte,` class
method.`),Mte.forEach(t),TXr=i(ii),m$=n(ii,"P",{});var $Qe=s(m$);MXr=r($Qe,"This class cannot be instantiated directly using "),H0e=n($Qe,"CODE",{});var ojt=s(H0e);EXr=r(ojt,"__init__()"),ojt.forEach(t),CXr=r($Qe," (throws an error)."),$Qe.forEach(t),wXr=i(ii),Ut=n(ii,"DIV",{class:!0});var F7=s(Ut);T(f$.$$.fragment,F7),AXr=i(F7),U0e=n(F7,"P",{});var rjt=s(U0e);LXr=r(rjt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rjt.forEach(t),yXr=i(F7),nm=n(F7,"P",{});var Ete=s(nm);xXr=r(Ete,`Note:
Loading a model from its configuration file does `),J0e=n(Ete,"STRONG",{});var tjt=s(J0e);$Xr=r(tjt,"not"),tjt.forEach(t),kXr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aee=n(Ete,"A",{href:!0});var ajt=s(Aee);SXr=r(ajt,"from_pretrained()"),ajt.forEach(t),RXr=r(Ete," to load the model weights."),Ete.forEach(t),PXr=i(F7),T(Kw.$$.fragment,F7),F7.forEach(t),BXr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(g$.$$.fragment,di),IXr=i(di),Y0e=n(di,"P",{});var njt=s(Y0e);NXr=r(njt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),njt.forEach(t),qXr=i(di),Cn=n(di,"P",{});var T7=s(Cn);jXr=r(T7,"The model class to instantiate is selected based on the "),K0e=n(T7,"CODE",{});var sjt=s(K0e);DXr=r(sjt,"model_type"),sjt.forEach(t),GXr=r(T7,` property of the config object (either
passed as an argument or loaded from `),Z0e=n(T7,"CODE",{});var ljt=s(Z0e);OXr=r(ljt,"pretrained_model_name_or_path"),ljt.forEach(t),VXr=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ewe=n(T7,"CODE",{});var ijt=s(ewe);XXr=r(ijt,"pretrained_model_name_or_path"),ijt.forEach(t),zXr=r(T7,":"),T7.forEach(t),QXr=i(di),ke=n(di,"UL",{});var je=s(ke);Zw=n(je,"LI",{});var BGe=s(Zw);owe=n(BGe,"STRONG",{});var djt=s(owe);WXr=r(djt,"bart"),djt.forEach(t),HXr=r(BGe," \u2014 "),Lee=n(BGe,"A",{href:!0});var cjt=s(Lee);UXr=r(cjt,"FlaxBartForConditionalGeneration"),cjt.forEach(t),JXr=r(BGe," (BART model)"),BGe.forEach(t),YXr=i(je),eA=n(je,"LI",{});var IGe=s(eA);rwe=n(IGe,"STRONG",{});var mjt=s(rwe);KXr=r(mjt,"blenderbot"),mjt.forEach(t),ZXr=r(IGe," \u2014 "),yee=n(IGe,"A",{href:!0});var fjt=s(yee);ezr=r(fjt,"FlaxBlenderbotForConditionalGeneration"),fjt.forEach(t),ozr=r(IGe," (Blenderbot model)"),IGe.forEach(t),rzr=i(je),oA=n(je,"LI",{});var NGe=s(oA);twe=n(NGe,"STRONG",{});var gjt=s(twe);tzr=r(gjt,"blenderbot-small"),gjt.forEach(t),azr=r(NGe," \u2014 "),xee=n(NGe,"A",{href:!0});var hjt=s(xee);nzr=r(hjt,"FlaxBlenderbotSmallForConditionalGeneration"),hjt.forEach(t),szr=r(NGe," (BlenderbotSmall model)"),NGe.forEach(t),lzr=i(je),rA=n(je,"LI",{});var qGe=s(rA);awe=n(qGe,"STRONG",{});var ujt=s(awe);izr=r(ujt,"encoder-decoder"),ujt.forEach(t),dzr=r(qGe," \u2014 "),$ee=n(qGe,"A",{href:!0});var pjt=s($ee);czr=r(pjt,"FlaxEncoderDecoderModel"),pjt.forEach(t),mzr=r(qGe," (Encoder decoder model)"),qGe.forEach(t),fzr=i(je),tA=n(je,"LI",{});var jGe=s(tA);nwe=n(jGe,"STRONG",{});var _jt=s(nwe);gzr=r(_jt,"longt5"),_jt.forEach(t),hzr=r(jGe," \u2014 "),kee=n(jGe,"A",{href:!0});var bjt=s(kee);uzr=r(bjt,"FlaxLongT5ForConditionalGeneration"),bjt.forEach(t),pzr=r(jGe," (LongT5 model)"),jGe.forEach(t),_zr=i(je),aA=n(je,"LI",{});var DGe=s(aA);swe=n(DGe,"STRONG",{});var vjt=s(swe);bzr=r(vjt,"marian"),vjt.forEach(t),vzr=r(DGe," \u2014 "),See=n(DGe,"A",{href:!0});var Fjt=s(See);Fzr=r(Fjt,"FlaxMarianMTModel"),Fjt.forEach(t),Tzr=r(DGe," (Marian model)"),DGe.forEach(t),Mzr=i(je),nA=n(je,"LI",{});var GGe=s(nA);lwe=n(GGe,"STRONG",{});var Tjt=s(lwe);Ezr=r(Tjt,"mbart"),Tjt.forEach(t),Czr=r(GGe," \u2014 "),Ree=n(GGe,"A",{href:!0});var Mjt=s(Ree);wzr=r(Mjt,"FlaxMBartForConditionalGeneration"),Mjt.forEach(t),Azr=r(GGe," (mBART model)"),GGe.forEach(t),Lzr=i(je),sA=n(je,"LI",{});var OGe=s(sA);iwe=n(OGe,"STRONG",{});var Ejt=s(iwe);yzr=r(Ejt,"mt5"),Ejt.forEach(t),xzr=r(OGe," \u2014 "),Pee=n(OGe,"A",{href:!0});var Cjt=s(Pee);$zr=r(Cjt,"FlaxMT5ForConditionalGeneration"),Cjt.forEach(t),kzr=r(OGe," (MT5 model)"),OGe.forEach(t),Szr=i(je),lA=n(je,"LI",{});var VGe=s(lA);dwe=n(VGe,"STRONG",{});var wjt=s(dwe);Rzr=r(wjt,"pegasus"),wjt.forEach(t),Pzr=r(VGe," \u2014 "),Bee=n(VGe,"A",{href:!0});var Ajt=s(Bee);Bzr=r(Ajt,"FlaxPegasusForConditionalGeneration"),Ajt.forEach(t),Izr=r(VGe," (Pegasus model)"),VGe.forEach(t),Nzr=i(je),iA=n(je,"LI",{});var XGe=s(iA);cwe=n(XGe,"STRONG",{});var Ljt=s(cwe);qzr=r(Ljt,"t5"),Ljt.forEach(t),jzr=r(XGe," \u2014 "),Iee=n(XGe,"A",{href:!0});var yjt=s(Iee);Dzr=r(yjt,"FlaxT5ForConditionalGeneration"),yjt.forEach(t),Gzr=r(XGe," (T5 model)"),XGe.forEach(t),je.forEach(t),Ozr=i(di),T(dA.$$.fragment,di),di.forEach(t),ii.forEach(t),MXe=i(m),sm=n(m,"H2",{class:!0});var kQe=s(sm);cA=n(kQe,"A",{id:!0,class:!0,href:!0});var xjt=s(cA);mwe=n(xjt,"SPAN",{});var $jt=s(mwe);T(h$.$$.fragment,$jt),$jt.forEach(t),xjt.forEach(t),Vzr=i(kQe),fwe=n(kQe,"SPAN",{});var kjt=s(fwe);Xzr=r(kjt,"FlaxAutoModelForSequenceClassification"),kjt.forEach(t),kQe.forEach(t),EXe=i(m),vr=n(m,"DIV",{class:!0});var ci=s(vr);T(u$.$$.fragment,ci),zzr=i(ci),lm=n(ci,"P",{});var Cte=s(lm);Qzr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Nee=n(Cte,"A",{href:!0});var Sjt=s(Nee);Wzr=r(Sjt,"from_pretrained()"),Sjt.forEach(t),Hzr=r(Cte," class method or the "),qee=n(Cte,"A",{href:!0});var Rjt=s(qee);Uzr=r(Rjt,"from_config()"),Rjt.forEach(t),Jzr=r(Cte,` class
method.`),Cte.forEach(t),Yzr=i(ci),p$=n(ci,"P",{});var SQe=s(p$);Kzr=r(SQe,"This class cannot be instantiated directly using "),gwe=n(SQe,"CODE",{});var Pjt=s(gwe);Zzr=r(Pjt,"__init__()"),Pjt.forEach(t),eQr=r(SQe," (throws an error)."),SQe.forEach(t),oQr=i(ci),Jt=n(ci,"DIV",{class:!0});var M7=s(Jt);T(_$.$$.fragment,M7),rQr=i(M7),hwe=n(M7,"P",{});var Bjt=s(hwe);tQr=r(Bjt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Bjt.forEach(t),aQr=i(M7),im=n(M7,"P",{});var wte=s(im);nQr=r(wte,`Note:
Loading a model from its configuration file does `),uwe=n(wte,"STRONG",{});var Ijt=s(uwe);sQr=r(Ijt,"not"),Ijt.forEach(t),lQr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=n(wte,"A",{href:!0});var Njt=s(jee);iQr=r(Njt,"from_pretrained()"),Njt.forEach(t),dQr=r(wte," to load the model weights."),wte.forEach(t),cQr=i(M7),T(mA.$$.fragment,M7),M7.forEach(t),mQr=i(ci),Wr=n(ci,"DIV",{class:!0});var mi=s(Wr);T(b$.$$.fragment,mi),fQr=i(mi),pwe=n(mi,"P",{});var qjt=s(pwe);gQr=r(qjt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qjt.forEach(t),hQr=i(mi),wn=n(mi,"P",{});var E7=s(wn);uQr=r(E7,"The model class to instantiate is selected based on the "),_we=n(E7,"CODE",{});var jjt=s(_we);pQr=r(jjt,"model_type"),jjt.forEach(t),_Qr=r(E7,` property of the config object (either
passed as an argument or loaded from `),bwe=n(E7,"CODE",{});var Djt=s(bwe);bQr=r(Djt,"pretrained_model_name_or_path"),Djt.forEach(t),vQr=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vwe=n(E7,"CODE",{});var Gjt=s(vwe);FQr=r(Gjt,"pretrained_model_name_or_path"),Gjt.forEach(t),TQr=r(E7,":"),E7.forEach(t),MQr=i(mi),Se=n(mi,"UL",{});var De=s(Se);fA=n(De,"LI",{});var zGe=s(fA);Fwe=n(zGe,"STRONG",{});var Ojt=s(Fwe);EQr=r(Ojt,"albert"),Ojt.forEach(t),CQr=r(zGe," \u2014 "),Dee=n(zGe,"A",{href:!0});var Vjt=s(Dee);wQr=r(Vjt,"FlaxAlbertForSequenceClassification"),Vjt.forEach(t),AQr=r(zGe," (ALBERT model)"),zGe.forEach(t),LQr=i(De),gA=n(De,"LI",{});var QGe=s(gA);Twe=n(QGe,"STRONG",{});var Xjt=s(Twe);yQr=r(Xjt,"bart"),Xjt.forEach(t),xQr=r(QGe," \u2014 "),Gee=n(QGe,"A",{href:!0});var zjt=s(Gee);$Qr=r(zjt,"FlaxBartForSequenceClassification"),zjt.forEach(t),kQr=r(QGe," (BART model)"),QGe.forEach(t),SQr=i(De),hA=n(De,"LI",{});var WGe=s(hA);Mwe=n(WGe,"STRONG",{});var Qjt=s(Mwe);RQr=r(Qjt,"bert"),Qjt.forEach(t),PQr=r(WGe," \u2014 "),Oee=n(WGe,"A",{href:!0});var Wjt=s(Oee);BQr=r(Wjt,"FlaxBertForSequenceClassification"),Wjt.forEach(t),IQr=r(WGe," (BERT model)"),WGe.forEach(t),NQr=i(De),uA=n(De,"LI",{});var HGe=s(uA);Ewe=n(HGe,"STRONG",{});var Hjt=s(Ewe);qQr=r(Hjt,"big_bird"),Hjt.forEach(t),jQr=r(HGe," \u2014 "),Vee=n(HGe,"A",{href:!0});var Ujt=s(Vee);DQr=r(Ujt,"FlaxBigBirdForSequenceClassification"),Ujt.forEach(t),GQr=r(HGe," (BigBird model)"),HGe.forEach(t),OQr=i(De),pA=n(De,"LI",{});var UGe=s(pA);Cwe=n(UGe,"STRONG",{});var Jjt=s(Cwe);VQr=r(Jjt,"distilbert"),Jjt.forEach(t),XQr=r(UGe," \u2014 "),Xee=n(UGe,"A",{href:!0});var Yjt=s(Xee);zQr=r(Yjt,"FlaxDistilBertForSequenceClassification"),Yjt.forEach(t),QQr=r(UGe," (DistilBERT model)"),UGe.forEach(t),WQr=i(De),_A=n(De,"LI",{});var JGe=s(_A);wwe=n(JGe,"STRONG",{});var Kjt=s(wwe);HQr=r(Kjt,"electra"),Kjt.forEach(t),UQr=r(JGe," \u2014 "),zee=n(JGe,"A",{href:!0});var Zjt=s(zee);JQr=r(Zjt,"FlaxElectraForSequenceClassification"),Zjt.forEach(t),YQr=r(JGe," (ELECTRA model)"),JGe.forEach(t),KQr=i(De),bA=n(De,"LI",{});var YGe=s(bA);Awe=n(YGe,"STRONG",{});var eDt=s(Awe);ZQr=r(eDt,"mbart"),eDt.forEach(t),eWr=r(YGe," \u2014 "),Qee=n(YGe,"A",{href:!0});var oDt=s(Qee);oWr=r(oDt,"FlaxMBartForSequenceClassification"),oDt.forEach(t),rWr=r(YGe," (mBART model)"),YGe.forEach(t),tWr=i(De),vA=n(De,"LI",{});var KGe=s(vA);Lwe=n(KGe,"STRONG",{});var rDt=s(Lwe);aWr=r(rDt,"roberta"),rDt.forEach(t),nWr=r(KGe," \u2014 "),Wee=n(KGe,"A",{href:!0});var tDt=s(Wee);sWr=r(tDt,"FlaxRobertaForSequenceClassification"),tDt.forEach(t),lWr=r(KGe," (RoBERTa model)"),KGe.forEach(t),iWr=i(De),FA=n(De,"LI",{});var ZGe=s(FA);ywe=n(ZGe,"STRONG",{});var aDt=s(ywe);dWr=r(aDt,"roformer"),aDt.forEach(t),cWr=r(ZGe," \u2014 "),Hee=n(ZGe,"A",{href:!0});var nDt=s(Hee);mWr=r(nDt,"FlaxRoFormerForSequenceClassification"),nDt.forEach(t),fWr=r(ZGe," (RoFormer model)"),ZGe.forEach(t),gWr=i(De),TA=n(De,"LI",{});var eOe=s(TA);xwe=n(eOe,"STRONG",{});var sDt=s(xwe);hWr=r(sDt,"xlm-roberta"),sDt.forEach(t),uWr=r(eOe," \u2014 "),Uee=n(eOe,"A",{href:!0});var lDt=s(Uee);pWr=r(lDt,"FlaxXLMRobertaForSequenceClassification"),lDt.forEach(t),_Wr=r(eOe," (XLM-RoBERTa model)"),eOe.forEach(t),De.forEach(t),bWr=i(mi),T(MA.$$.fragment,mi),mi.forEach(t),ci.forEach(t),CXe=i(m),dm=n(m,"H2",{class:!0});var RQe=s(dm);EA=n(RQe,"A",{id:!0,class:!0,href:!0});var iDt=s(EA);$we=n(iDt,"SPAN",{});var dDt=s($we);T(v$.$$.fragment,dDt),dDt.forEach(t),iDt.forEach(t),vWr=i(RQe),kwe=n(RQe,"SPAN",{});var cDt=s(kwe);FWr=r(cDt,"FlaxAutoModelForQuestionAnswering"),cDt.forEach(t),RQe.forEach(t),wXe=i(m),Fr=n(m,"DIV",{class:!0});var fi=s(Fr);T(F$.$$.fragment,fi),TWr=i(fi),cm=n(fi,"P",{});var Ate=s(cm);MWr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jee=n(Ate,"A",{href:!0});var mDt=s(Jee);EWr=r(mDt,"from_pretrained()"),mDt.forEach(t),CWr=r(Ate," class method or the "),Yee=n(Ate,"A",{href:!0});var fDt=s(Yee);wWr=r(fDt,"from_config()"),fDt.forEach(t),AWr=r(Ate,` class
method.`),Ate.forEach(t),LWr=i(fi),T$=n(fi,"P",{});var PQe=s(T$);yWr=r(PQe,"This class cannot be instantiated directly using "),Swe=n(PQe,"CODE",{});var gDt=s(Swe);xWr=r(gDt,"__init__()"),gDt.forEach(t),$Wr=r(PQe," (throws an error)."),PQe.forEach(t),kWr=i(fi),Yt=n(fi,"DIV",{class:!0});var C7=s(Yt);T(M$.$$.fragment,C7),SWr=i(C7),Rwe=n(C7,"P",{});var hDt=s(Rwe);RWr=r(hDt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hDt.forEach(t),PWr=i(C7),mm=n(C7,"P",{});var Lte=s(mm);BWr=r(Lte,`Note:
Loading a model from its configuration file does `),Pwe=n(Lte,"STRONG",{});var uDt=s(Pwe);IWr=r(uDt,"not"),uDt.forEach(t),NWr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kee=n(Lte,"A",{href:!0});var pDt=s(Kee);qWr=r(pDt,"from_pretrained()"),pDt.forEach(t),jWr=r(Lte," to load the model weights."),Lte.forEach(t),DWr=i(C7),T(CA.$$.fragment,C7),C7.forEach(t),GWr=i(fi),Hr=n(fi,"DIV",{class:!0});var gi=s(Hr);T(E$.$$.fragment,gi),OWr=i(gi),Bwe=n(gi,"P",{});var _Dt=s(Bwe);VWr=r(_Dt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Dt.forEach(t),XWr=i(gi),An=n(gi,"P",{});var w7=s(An);zWr=r(w7,"The model class to instantiate is selected based on the "),Iwe=n(w7,"CODE",{});var bDt=s(Iwe);QWr=r(bDt,"model_type"),bDt.forEach(t),WWr=r(w7,` property of the config object (either
passed as an argument or loaded from `),Nwe=n(w7,"CODE",{});var vDt=s(Nwe);HWr=r(vDt,"pretrained_model_name_or_path"),vDt.forEach(t),UWr=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qwe=n(w7,"CODE",{});var FDt=s(qwe);JWr=r(FDt,"pretrained_model_name_or_path"),FDt.forEach(t),YWr=r(w7,":"),w7.forEach(t),KWr=i(gi),Re=n(gi,"UL",{});var Ge=s(Re);wA=n(Ge,"LI",{});var oOe=s(wA);jwe=n(oOe,"STRONG",{});var TDt=s(jwe);ZWr=r(TDt,"albert"),TDt.forEach(t),eHr=r(oOe," \u2014 "),Zee=n(oOe,"A",{href:!0});var MDt=s(Zee);oHr=r(MDt,"FlaxAlbertForQuestionAnswering"),MDt.forEach(t),rHr=r(oOe," (ALBERT model)"),oOe.forEach(t),tHr=i(Ge),AA=n(Ge,"LI",{});var rOe=s(AA);Dwe=n(rOe,"STRONG",{});var EDt=s(Dwe);aHr=r(EDt,"bart"),EDt.forEach(t),nHr=r(rOe," \u2014 "),eoe=n(rOe,"A",{href:!0});var CDt=s(eoe);sHr=r(CDt,"FlaxBartForQuestionAnswering"),CDt.forEach(t),lHr=r(rOe," (BART model)"),rOe.forEach(t),iHr=i(Ge),LA=n(Ge,"LI",{});var tOe=s(LA);Gwe=n(tOe,"STRONG",{});var wDt=s(Gwe);dHr=r(wDt,"bert"),wDt.forEach(t),cHr=r(tOe," \u2014 "),ooe=n(tOe,"A",{href:!0});var ADt=s(ooe);mHr=r(ADt,"FlaxBertForQuestionAnswering"),ADt.forEach(t),fHr=r(tOe," (BERT model)"),tOe.forEach(t),gHr=i(Ge),yA=n(Ge,"LI",{});var aOe=s(yA);Owe=n(aOe,"STRONG",{});var LDt=s(Owe);hHr=r(LDt,"big_bird"),LDt.forEach(t),uHr=r(aOe," \u2014 "),roe=n(aOe,"A",{href:!0});var yDt=s(roe);pHr=r(yDt,"FlaxBigBirdForQuestionAnswering"),yDt.forEach(t),_Hr=r(aOe," (BigBird model)"),aOe.forEach(t),bHr=i(Ge),xA=n(Ge,"LI",{});var nOe=s(xA);Vwe=n(nOe,"STRONG",{});var xDt=s(Vwe);vHr=r(xDt,"distilbert"),xDt.forEach(t),FHr=r(nOe," \u2014 "),toe=n(nOe,"A",{href:!0});var $Dt=s(toe);THr=r($Dt,"FlaxDistilBertForQuestionAnswering"),$Dt.forEach(t),MHr=r(nOe," (DistilBERT model)"),nOe.forEach(t),EHr=i(Ge),$A=n(Ge,"LI",{});var sOe=s($A);Xwe=n(sOe,"STRONG",{});var kDt=s(Xwe);CHr=r(kDt,"electra"),kDt.forEach(t),wHr=r(sOe," \u2014 "),aoe=n(sOe,"A",{href:!0});var SDt=s(aoe);AHr=r(SDt,"FlaxElectraForQuestionAnswering"),SDt.forEach(t),LHr=r(sOe," (ELECTRA model)"),sOe.forEach(t),yHr=i(Ge),kA=n(Ge,"LI",{});var lOe=s(kA);zwe=n(lOe,"STRONG",{});var RDt=s(zwe);xHr=r(RDt,"mbart"),RDt.forEach(t),$Hr=r(lOe," \u2014 "),noe=n(lOe,"A",{href:!0});var PDt=s(noe);kHr=r(PDt,"FlaxMBartForQuestionAnswering"),PDt.forEach(t),SHr=r(lOe," (mBART model)"),lOe.forEach(t),RHr=i(Ge),SA=n(Ge,"LI",{});var iOe=s(SA);Qwe=n(iOe,"STRONG",{});var BDt=s(Qwe);PHr=r(BDt,"roberta"),BDt.forEach(t),BHr=r(iOe," \u2014 "),soe=n(iOe,"A",{href:!0});var IDt=s(soe);IHr=r(IDt,"FlaxRobertaForQuestionAnswering"),IDt.forEach(t),NHr=r(iOe," (RoBERTa model)"),iOe.forEach(t),qHr=i(Ge),RA=n(Ge,"LI",{});var dOe=s(RA);Wwe=n(dOe,"STRONG",{});var NDt=s(Wwe);jHr=r(NDt,"roformer"),NDt.forEach(t),DHr=r(dOe," \u2014 "),loe=n(dOe,"A",{href:!0});var qDt=s(loe);GHr=r(qDt,"FlaxRoFormerForQuestionAnswering"),qDt.forEach(t),OHr=r(dOe," (RoFormer model)"),dOe.forEach(t),VHr=i(Ge),PA=n(Ge,"LI",{});var cOe=s(PA);Hwe=n(cOe,"STRONG",{});var jDt=s(Hwe);XHr=r(jDt,"xlm-roberta"),jDt.forEach(t),zHr=r(cOe," \u2014 "),ioe=n(cOe,"A",{href:!0});var DDt=s(ioe);QHr=r(DDt,"FlaxXLMRobertaForQuestionAnswering"),DDt.forEach(t),WHr=r(cOe," (XLM-RoBERTa model)"),cOe.forEach(t),Ge.forEach(t),HHr=i(gi),T(BA.$$.fragment,gi),gi.forEach(t),fi.forEach(t),AXe=i(m),fm=n(m,"H2",{class:!0});var BQe=s(fm);IA=n(BQe,"A",{id:!0,class:!0,href:!0});var GDt=s(IA);Uwe=n(GDt,"SPAN",{});var ODt=s(Uwe);T(C$.$$.fragment,ODt),ODt.forEach(t),GDt.forEach(t),UHr=i(BQe),Jwe=n(BQe,"SPAN",{});var VDt=s(Jwe);JHr=r(VDt,"FlaxAutoModelForTokenClassification"),VDt.forEach(t),BQe.forEach(t),LXe=i(m),Tr=n(m,"DIV",{class:!0});var hi=s(Tr);T(w$.$$.fragment,hi),YHr=i(hi),gm=n(hi,"P",{});var yte=s(gm);KHr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),doe=n(yte,"A",{href:!0});var XDt=s(doe);ZHr=r(XDt,"from_pretrained()"),XDt.forEach(t),eUr=r(yte," class method or the "),coe=n(yte,"A",{href:!0});var zDt=s(coe);oUr=r(zDt,"from_config()"),zDt.forEach(t),rUr=r(yte,` class
method.`),yte.forEach(t),tUr=i(hi),A$=n(hi,"P",{});var IQe=s(A$);aUr=r(IQe,"This class cannot be instantiated directly using "),Ywe=n(IQe,"CODE",{});var QDt=s(Ywe);nUr=r(QDt,"__init__()"),QDt.forEach(t),sUr=r(IQe," (throws an error)."),IQe.forEach(t),lUr=i(hi),Kt=n(hi,"DIV",{class:!0});var A7=s(Kt);T(L$.$$.fragment,A7),iUr=i(A7),Kwe=n(A7,"P",{});var WDt=s(Kwe);dUr=r(WDt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WDt.forEach(t),cUr=i(A7),hm=n(A7,"P",{});var xte=s(hm);mUr=r(xte,`Note:
Loading a model from its configuration file does `),Zwe=n(xte,"STRONG",{});var HDt=s(Zwe);fUr=r(HDt,"not"),HDt.forEach(t),gUr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),moe=n(xte,"A",{href:!0});var UDt=s(moe);hUr=r(UDt,"from_pretrained()"),UDt.forEach(t),uUr=r(xte," to load the model weights."),xte.forEach(t),pUr=i(A7),T(NA.$$.fragment,A7),A7.forEach(t),_Ur=i(hi),Ur=n(hi,"DIV",{class:!0});var ui=s(Ur);T(y$.$$.fragment,ui),bUr=i(ui),eAe=n(ui,"P",{});var JDt=s(eAe);vUr=r(JDt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JDt.forEach(t),FUr=i(ui),Ln=n(ui,"P",{});var L7=s(Ln);TUr=r(L7,"The model class to instantiate is selected based on the "),oAe=n(L7,"CODE",{});var YDt=s(oAe);MUr=r(YDt,"model_type"),YDt.forEach(t),EUr=r(L7,` property of the config object (either
passed as an argument or loaded from `),rAe=n(L7,"CODE",{});var KDt=s(rAe);CUr=r(KDt,"pretrained_model_name_or_path"),KDt.forEach(t),wUr=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tAe=n(L7,"CODE",{});var ZDt=s(tAe);AUr=r(ZDt,"pretrained_model_name_or_path"),ZDt.forEach(t),LUr=r(L7,":"),L7.forEach(t),yUr=i(ui),Ve=n(ui,"UL",{});var To=s(Ve);qA=n(To,"LI",{});var mOe=s(qA);aAe=n(mOe,"STRONG",{});var eGt=s(aAe);xUr=r(eGt,"albert"),eGt.forEach(t),$Ur=r(mOe," \u2014 "),foe=n(mOe,"A",{href:!0});var oGt=s(foe);kUr=r(oGt,"FlaxAlbertForTokenClassification"),oGt.forEach(t),SUr=r(mOe," (ALBERT model)"),mOe.forEach(t),RUr=i(To),jA=n(To,"LI",{});var fOe=s(jA);nAe=n(fOe,"STRONG",{});var rGt=s(nAe);PUr=r(rGt,"bert"),rGt.forEach(t),BUr=r(fOe," \u2014 "),goe=n(fOe,"A",{href:!0});var tGt=s(goe);IUr=r(tGt,"FlaxBertForTokenClassification"),tGt.forEach(t),NUr=r(fOe," (BERT model)"),fOe.forEach(t),qUr=i(To),DA=n(To,"LI",{});var gOe=s(DA);sAe=n(gOe,"STRONG",{});var aGt=s(sAe);jUr=r(aGt,"big_bird"),aGt.forEach(t),DUr=r(gOe," \u2014 "),hoe=n(gOe,"A",{href:!0});var nGt=s(hoe);GUr=r(nGt,"FlaxBigBirdForTokenClassification"),nGt.forEach(t),OUr=r(gOe," (BigBird model)"),gOe.forEach(t),VUr=i(To),GA=n(To,"LI",{});var hOe=s(GA);lAe=n(hOe,"STRONG",{});var sGt=s(lAe);XUr=r(sGt,"distilbert"),sGt.forEach(t),zUr=r(hOe," \u2014 "),uoe=n(hOe,"A",{href:!0});var lGt=s(uoe);QUr=r(lGt,"FlaxDistilBertForTokenClassification"),lGt.forEach(t),WUr=r(hOe," (DistilBERT model)"),hOe.forEach(t),HUr=i(To),OA=n(To,"LI",{});var uOe=s(OA);iAe=n(uOe,"STRONG",{});var iGt=s(iAe);UUr=r(iGt,"electra"),iGt.forEach(t),JUr=r(uOe," \u2014 "),poe=n(uOe,"A",{href:!0});var dGt=s(poe);YUr=r(dGt,"FlaxElectraForTokenClassification"),dGt.forEach(t),KUr=r(uOe," (ELECTRA model)"),uOe.forEach(t),ZUr=i(To),VA=n(To,"LI",{});var pOe=s(VA);dAe=n(pOe,"STRONG",{});var cGt=s(dAe);eJr=r(cGt,"roberta"),cGt.forEach(t),oJr=r(pOe," \u2014 "),_oe=n(pOe,"A",{href:!0});var mGt=s(_oe);rJr=r(mGt,"FlaxRobertaForTokenClassification"),mGt.forEach(t),tJr=r(pOe," (RoBERTa model)"),pOe.forEach(t),aJr=i(To),XA=n(To,"LI",{});var _Oe=s(XA);cAe=n(_Oe,"STRONG",{});var fGt=s(cAe);nJr=r(fGt,"roformer"),fGt.forEach(t),sJr=r(_Oe," \u2014 "),boe=n(_Oe,"A",{href:!0});var gGt=s(boe);lJr=r(gGt,"FlaxRoFormerForTokenClassification"),gGt.forEach(t),iJr=r(_Oe," (RoFormer model)"),_Oe.forEach(t),dJr=i(To),zA=n(To,"LI",{});var bOe=s(zA);mAe=n(bOe,"STRONG",{});var hGt=s(mAe);cJr=r(hGt,"xlm-roberta"),hGt.forEach(t),mJr=r(bOe," \u2014 "),voe=n(bOe,"A",{href:!0});var uGt=s(voe);fJr=r(uGt,"FlaxXLMRobertaForTokenClassification"),uGt.forEach(t),gJr=r(bOe," (XLM-RoBERTa model)"),bOe.forEach(t),To.forEach(t),hJr=i(ui),T(QA.$$.fragment,ui),ui.forEach(t),hi.forEach(t),yXe=i(m),um=n(m,"H2",{class:!0});var NQe=s(um);WA=n(NQe,"A",{id:!0,class:!0,href:!0});var pGt=s(WA);fAe=n(pGt,"SPAN",{});var _Gt=s(fAe);T(x$.$$.fragment,_Gt),_Gt.forEach(t),pGt.forEach(t),uJr=i(NQe),gAe=n(NQe,"SPAN",{});var bGt=s(gAe);pJr=r(bGt,"FlaxAutoModelForMultipleChoice"),bGt.forEach(t),NQe.forEach(t),xXe=i(m),Mr=n(m,"DIV",{class:!0});var pi=s(Mr);T($$.$$.fragment,pi),_Jr=i(pi),pm=n(pi,"P",{});var $te=s(pm);bJr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Foe=n($te,"A",{href:!0});var vGt=s(Foe);vJr=r(vGt,"from_pretrained()"),vGt.forEach(t),FJr=r($te," class method or the "),Toe=n($te,"A",{href:!0});var FGt=s(Toe);TJr=r(FGt,"from_config()"),FGt.forEach(t),MJr=r($te,` class
method.`),$te.forEach(t),EJr=i(pi),k$=n(pi,"P",{});var qQe=s(k$);CJr=r(qQe,"This class cannot be instantiated directly using "),hAe=n(qQe,"CODE",{});var TGt=s(hAe);wJr=r(TGt,"__init__()"),TGt.forEach(t),AJr=r(qQe," (throws an error)."),qQe.forEach(t),LJr=i(pi),Zt=n(pi,"DIV",{class:!0});var y7=s(Zt);T(S$.$$.fragment,y7),yJr=i(y7),uAe=n(y7,"P",{});var MGt=s(uAe);xJr=r(MGt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MGt.forEach(t),$Jr=i(y7),_m=n(y7,"P",{});var kte=s(_m);kJr=r(kte,`Note:
Loading a model from its configuration file does `),pAe=n(kte,"STRONG",{});var EGt=s(pAe);SJr=r(EGt,"not"),EGt.forEach(t),RJr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Moe=n(kte,"A",{href:!0});var CGt=s(Moe);PJr=r(CGt,"from_pretrained()"),CGt.forEach(t),BJr=r(kte," to load the model weights."),kte.forEach(t),IJr=i(y7),T(HA.$$.fragment,y7),y7.forEach(t),NJr=i(pi),Jr=n(pi,"DIV",{class:!0});var _i=s(Jr);T(R$.$$.fragment,_i),qJr=i(_i),_Ae=n(_i,"P",{});var wGt=s(_Ae);jJr=r(wGt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wGt.forEach(t),DJr=i(_i),yn=n(_i,"P",{});var x7=s(yn);GJr=r(x7,"The model class to instantiate is selected based on the "),bAe=n(x7,"CODE",{});var AGt=s(bAe);OJr=r(AGt,"model_type"),AGt.forEach(t),VJr=r(x7,` property of the config object (either
passed as an argument or loaded from `),vAe=n(x7,"CODE",{});var LGt=s(vAe);XJr=r(LGt,"pretrained_model_name_or_path"),LGt.forEach(t),zJr=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FAe=n(x7,"CODE",{});var yGt=s(FAe);QJr=r(yGt,"pretrained_model_name_or_path"),yGt.forEach(t),WJr=r(x7,":"),x7.forEach(t),HJr=i(_i),Xe=n(_i,"UL",{});var Mo=s(Xe);UA=n(Mo,"LI",{});var vOe=s(UA);TAe=n(vOe,"STRONG",{});var xGt=s(TAe);UJr=r(xGt,"albert"),xGt.forEach(t),JJr=r(vOe," \u2014 "),Eoe=n(vOe,"A",{href:!0});var $Gt=s(Eoe);YJr=r($Gt,"FlaxAlbertForMultipleChoice"),$Gt.forEach(t),KJr=r(vOe," (ALBERT model)"),vOe.forEach(t),ZJr=i(Mo),JA=n(Mo,"LI",{});var FOe=s(JA);MAe=n(FOe,"STRONG",{});var kGt=s(MAe);eYr=r(kGt,"bert"),kGt.forEach(t),oYr=r(FOe," \u2014 "),Coe=n(FOe,"A",{href:!0});var SGt=s(Coe);rYr=r(SGt,"FlaxBertForMultipleChoice"),SGt.forEach(t),tYr=r(FOe," (BERT model)"),FOe.forEach(t),aYr=i(Mo),YA=n(Mo,"LI",{});var TOe=s(YA);EAe=n(TOe,"STRONG",{});var RGt=s(EAe);nYr=r(RGt,"big_bird"),RGt.forEach(t),sYr=r(TOe," \u2014 "),woe=n(TOe,"A",{href:!0});var PGt=s(woe);lYr=r(PGt,"FlaxBigBirdForMultipleChoice"),PGt.forEach(t),iYr=r(TOe," (BigBird model)"),TOe.forEach(t),dYr=i(Mo),KA=n(Mo,"LI",{});var MOe=s(KA);CAe=n(MOe,"STRONG",{});var BGt=s(CAe);cYr=r(BGt,"distilbert"),BGt.forEach(t),mYr=r(MOe," \u2014 "),Aoe=n(MOe,"A",{href:!0});var IGt=s(Aoe);fYr=r(IGt,"FlaxDistilBertForMultipleChoice"),IGt.forEach(t),gYr=r(MOe," (DistilBERT model)"),MOe.forEach(t),hYr=i(Mo),ZA=n(Mo,"LI",{});var EOe=s(ZA);wAe=n(EOe,"STRONG",{});var NGt=s(wAe);uYr=r(NGt,"electra"),NGt.forEach(t),pYr=r(EOe," \u2014 "),Loe=n(EOe,"A",{href:!0});var qGt=s(Loe);_Yr=r(qGt,"FlaxElectraForMultipleChoice"),qGt.forEach(t),bYr=r(EOe," (ELECTRA model)"),EOe.forEach(t),vYr=i(Mo),e6=n(Mo,"LI",{});var COe=s(e6);AAe=n(COe,"STRONG",{});var jGt=s(AAe);FYr=r(jGt,"roberta"),jGt.forEach(t),TYr=r(COe," \u2014 "),yoe=n(COe,"A",{href:!0});var DGt=s(yoe);MYr=r(DGt,"FlaxRobertaForMultipleChoice"),DGt.forEach(t),EYr=r(COe," (RoBERTa model)"),COe.forEach(t),CYr=i(Mo),o6=n(Mo,"LI",{});var wOe=s(o6);LAe=n(wOe,"STRONG",{});var GGt=s(LAe);wYr=r(GGt,"roformer"),GGt.forEach(t),AYr=r(wOe," \u2014 "),xoe=n(wOe,"A",{href:!0});var OGt=s(xoe);LYr=r(OGt,"FlaxRoFormerForMultipleChoice"),OGt.forEach(t),yYr=r(wOe," (RoFormer model)"),wOe.forEach(t),xYr=i(Mo),r6=n(Mo,"LI",{});var AOe=s(r6);yAe=n(AOe,"STRONG",{});var VGt=s(yAe);$Yr=r(VGt,"xlm-roberta"),VGt.forEach(t),kYr=r(AOe," \u2014 "),$oe=n(AOe,"A",{href:!0});var XGt=s($oe);SYr=r(XGt,"FlaxXLMRobertaForMultipleChoice"),XGt.forEach(t),RYr=r(AOe," (XLM-RoBERTa model)"),AOe.forEach(t),Mo.forEach(t),PYr=i(_i),T(t6.$$.fragment,_i),_i.forEach(t),pi.forEach(t),$Xe=i(m),bm=n(m,"H2",{class:!0});var jQe=s(bm);a6=n(jQe,"A",{id:!0,class:!0,href:!0});var zGt=s(a6);xAe=n(zGt,"SPAN",{});var QGt=s(xAe);T(P$.$$.fragment,QGt),QGt.forEach(t),zGt.forEach(t),BYr=i(jQe),$Ae=n(jQe,"SPAN",{});var WGt=s($Ae);IYr=r(WGt,"FlaxAutoModelForNextSentencePrediction"),WGt.forEach(t),jQe.forEach(t),kXe=i(m),Er=n(m,"DIV",{class:!0});var bi=s(Er);T(B$.$$.fragment,bi),NYr=i(bi),vm=n(bi,"P",{});var Ste=s(vm);qYr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),koe=n(Ste,"A",{href:!0});var HGt=s(koe);jYr=r(HGt,"from_pretrained()"),HGt.forEach(t),DYr=r(Ste," class method or the "),Soe=n(Ste,"A",{href:!0});var UGt=s(Soe);GYr=r(UGt,"from_config()"),UGt.forEach(t),OYr=r(Ste,` class
method.`),Ste.forEach(t),VYr=i(bi),I$=n(bi,"P",{});var DQe=s(I$);XYr=r(DQe,"This class cannot be instantiated directly using "),kAe=n(DQe,"CODE",{});var JGt=s(kAe);zYr=r(JGt,"__init__()"),JGt.forEach(t),QYr=r(DQe," (throws an error)."),DQe.forEach(t),WYr=i(bi),ea=n(bi,"DIV",{class:!0});var $7=s(ea);T(N$.$$.fragment,$7),HYr=i($7),SAe=n($7,"P",{});var YGt=s(SAe);UYr=r(YGt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YGt.forEach(t),JYr=i($7),Fm=n($7,"P",{});var Rte=s(Fm);YYr=r(Rte,`Note:
Loading a model from its configuration file does `),RAe=n(Rte,"STRONG",{});var KGt=s(RAe);KYr=r(KGt,"not"),KGt.forEach(t),ZYr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=n(Rte,"A",{href:!0});var ZGt=s(Roe);eKr=r(ZGt,"from_pretrained()"),ZGt.forEach(t),oKr=r(Rte," to load the model weights."),Rte.forEach(t),rKr=i($7),T(n6.$$.fragment,$7),$7.forEach(t),tKr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(q$.$$.fragment,vi),aKr=i(vi),PAe=n(vi,"P",{});var eOt=s(PAe);nKr=r(eOt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eOt.forEach(t),sKr=i(vi),xn=n(vi,"P",{});var k7=s(xn);lKr=r(k7,"The model class to instantiate is selected based on the "),BAe=n(k7,"CODE",{});var oOt=s(BAe);iKr=r(oOt,"model_type"),oOt.forEach(t),dKr=r(k7,` property of the config object (either
passed as an argument or loaded from `),IAe=n(k7,"CODE",{});var rOt=s(IAe);cKr=r(rOt,"pretrained_model_name_or_path"),rOt.forEach(t),mKr=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NAe=n(k7,"CODE",{});var tOt=s(NAe);fKr=r(tOt,"pretrained_model_name_or_path"),tOt.forEach(t),gKr=r(k7,":"),k7.forEach(t),hKr=i(vi),qAe=n(vi,"UL",{});var aOt=s(qAe);s6=n(aOt,"LI",{});var LOe=s(s6);jAe=n(LOe,"STRONG",{});var nOt=s(jAe);uKr=r(nOt,"bert"),nOt.forEach(t),pKr=r(LOe," \u2014 "),Poe=n(LOe,"A",{href:!0});var sOt=s(Poe);_Kr=r(sOt,"FlaxBertForNextSentencePrediction"),sOt.forEach(t),bKr=r(LOe," (BERT model)"),LOe.forEach(t),aOt.forEach(t),vKr=i(vi),T(l6.$$.fragment,vi),vi.forEach(t),bi.forEach(t),SXe=i(m),Tm=n(m,"H2",{class:!0});var GQe=s(Tm);i6=n(GQe,"A",{id:!0,class:!0,href:!0});var lOt=s(i6);DAe=n(lOt,"SPAN",{});var iOt=s(DAe);T(j$.$$.fragment,iOt),iOt.forEach(t),lOt.forEach(t),FKr=i(GQe),GAe=n(GQe,"SPAN",{});var dOt=s(GAe);TKr=r(dOt,"FlaxAutoModelForImageClassification"),dOt.forEach(t),GQe.forEach(t),RXe=i(m),Cr=n(m,"DIV",{class:!0});var Fi=s(Cr);T(D$.$$.fragment,Fi),MKr=i(Fi),Mm=n(Fi,"P",{});var Pte=s(Mm);EKr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Boe=n(Pte,"A",{href:!0});var cOt=s(Boe);CKr=r(cOt,"from_pretrained()"),cOt.forEach(t),wKr=r(Pte," class method or the "),Ioe=n(Pte,"A",{href:!0});var mOt=s(Ioe);AKr=r(mOt,"from_config()"),mOt.forEach(t),LKr=r(Pte,` class
method.`),Pte.forEach(t),yKr=i(Fi),G$=n(Fi,"P",{});var OQe=s(G$);xKr=r(OQe,"This class cannot be instantiated directly using "),OAe=n(OQe,"CODE",{});var fOt=s(OAe);$Kr=r(fOt,"__init__()"),fOt.forEach(t),kKr=r(OQe," (throws an error)."),OQe.forEach(t),SKr=i(Fi),oa=n(Fi,"DIV",{class:!0});var S7=s(oa);T(O$.$$.fragment,S7),RKr=i(S7),VAe=n(S7,"P",{});var gOt=s(VAe);PKr=r(gOt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gOt.forEach(t),BKr=i(S7),Em=n(S7,"P",{});var Bte=s(Em);IKr=r(Bte,`Note:
Loading a model from its configuration file does `),XAe=n(Bte,"STRONG",{});var hOt=s(XAe);NKr=r(hOt,"not"),hOt.forEach(t),qKr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=n(Bte,"A",{href:!0});var uOt=s(Noe);jKr=r(uOt,"from_pretrained()"),uOt.forEach(t),DKr=r(Bte," to load the model weights."),Bte.forEach(t),GKr=i(S7),T(d6.$$.fragment,S7),S7.forEach(t),OKr=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(V$.$$.fragment,Ti),VKr=i(Ti),zAe=n(Ti,"P",{});var pOt=s(zAe);XKr=r(pOt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pOt.forEach(t),zKr=i(Ti),$n=n(Ti,"P",{});var R7=s($n);QKr=r(R7,"The model class to instantiate is selected based on the "),QAe=n(R7,"CODE",{});var _Ot=s(QAe);WKr=r(_Ot,"model_type"),_Ot.forEach(t),HKr=r(R7,` property of the config object (either
passed as an argument or loaded from `),WAe=n(R7,"CODE",{});var bOt=s(WAe);UKr=r(bOt,"pretrained_model_name_or_path"),bOt.forEach(t),JKr=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HAe=n(R7,"CODE",{});var vOt=s(HAe);YKr=r(vOt,"pretrained_model_name_or_path"),vOt.forEach(t),KKr=r(R7,":"),R7.forEach(t),ZKr=i(Ti),X$=n(Ti,"UL",{});var VQe=s(X$);c6=n(VQe,"LI",{});var yOe=s(c6);UAe=n(yOe,"STRONG",{});var FOt=s(UAe);eZr=r(FOt,"beit"),FOt.forEach(t),oZr=r(yOe," \u2014 "),qoe=n(yOe,"A",{href:!0});var TOt=s(qoe);rZr=r(TOt,"FlaxBeitForImageClassification"),TOt.forEach(t),tZr=r(yOe," (BEiT model)"),yOe.forEach(t),aZr=i(VQe),m6=n(VQe,"LI",{});var xOe=s(m6);JAe=n(xOe,"STRONG",{});var MOt=s(JAe);nZr=r(MOt,"vit"),MOt.forEach(t),sZr=r(xOe," \u2014 "),joe=n(xOe,"A",{href:!0});var EOt=s(joe);lZr=r(EOt,"FlaxViTForImageClassification"),EOt.forEach(t),iZr=r(xOe," (ViT model)"),xOe.forEach(t),VQe.forEach(t),dZr=i(Ti),T(f6.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),PXe=i(m),Cm=n(m,"H2",{class:!0});var XQe=s(Cm);g6=n(XQe,"A",{id:!0,class:!0,href:!0});var COt=s(g6);YAe=n(COt,"SPAN",{});var wOt=s(YAe);T(z$.$$.fragment,wOt),wOt.forEach(t),COt.forEach(t),cZr=i(XQe),KAe=n(XQe,"SPAN",{});var AOt=s(KAe);mZr=r(AOt,"FlaxAutoModelForVision2Seq"),AOt.forEach(t),XQe.forEach(t),BXe=i(m),wr=n(m,"DIV",{class:!0});var Mi=s(wr);T(Q$.$$.fragment,Mi),fZr=i(Mi),wm=n(Mi,"P",{});var Ite=s(wm);gZr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Doe=n(Ite,"A",{href:!0});var LOt=s(Doe);hZr=r(LOt,"from_pretrained()"),LOt.forEach(t),uZr=r(Ite," class method or the "),Goe=n(Ite,"A",{href:!0});var yOt=s(Goe);pZr=r(yOt,"from_config()"),yOt.forEach(t),_Zr=r(Ite,` class
method.`),Ite.forEach(t),bZr=i(Mi),W$=n(Mi,"P",{});var zQe=s(W$);vZr=r(zQe,"This class cannot be instantiated directly using "),ZAe=n(zQe,"CODE",{});var xOt=s(ZAe);FZr=r(xOt,"__init__()"),xOt.forEach(t),TZr=r(zQe," (throws an error)."),zQe.forEach(t),MZr=i(Mi),ra=n(Mi,"DIV",{class:!0});var P7=s(ra);T(H$.$$.fragment,P7),EZr=i(P7),e6e=n(P7,"P",{});var $Ot=s(e6e);CZr=r($Ot,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Ot.forEach(t),wZr=i(P7),Am=n(P7,"P",{});var Nte=s(Am);AZr=r(Nte,`Note:
Loading a model from its configuration file does `),o6e=n(Nte,"STRONG",{});var kOt=s(o6e);LZr=r(kOt,"not"),kOt.forEach(t),yZr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ooe=n(Nte,"A",{href:!0});var SOt=s(Ooe);xZr=r(SOt,"from_pretrained()"),SOt.forEach(t),$Zr=r(Nte," to load the model weights."),Nte.forEach(t),kZr=i(P7),T(h6.$$.fragment,P7),P7.forEach(t),SZr=i(Mi),Zr=n(Mi,"DIV",{class:!0});var Ei=s(Zr);T(U$.$$.fragment,Ei),RZr=i(Ei),r6e=n(Ei,"P",{});var ROt=s(r6e);PZr=r(ROt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ROt.forEach(t),BZr=i(Ei),kn=n(Ei,"P",{});var B7=s(kn);IZr=r(B7,"The model class to instantiate is selected based on the "),t6e=n(B7,"CODE",{});var POt=s(t6e);NZr=r(POt,"model_type"),POt.forEach(t),qZr=r(B7,` property of the config object (either
passed as an argument or loaded from `),a6e=n(B7,"CODE",{});var BOt=s(a6e);jZr=r(BOt,"pretrained_model_name_or_path"),BOt.forEach(t),DZr=r(B7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=n(B7,"CODE",{});var IOt=s(n6e);GZr=r(IOt,"pretrained_model_name_or_path"),IOt.forEach(t),OZr=r(B7,":"),B7.forEach(t),VZr=i(Ei),s6e=n(Ei,"UL",{});var NOt=s(s6e);u6=n(NOt,"LI",{});var $Oe=s(u6);l6e=n($Oe,"STRONG",{});var qOt=s(l6e);XZr=r(qOt,"vision-encoder-decoder"),qOt.forEach(t),zZr=r($Oe," \u2014 "),Voe=n($Oe,"A",{href:!0});var jOt=s(Voe);QZr=r(jOt,"FlaxVisionEncoderDecoderModel"),jOt.forEach(t),WZr=r($Oe," (Vision Encoder decoder model)"),$Oe.forEach(t),NOt.forEach(t),HZr=i(Ei),T(p6.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(zXt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Rn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c($i,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Pm,"id","extending-the-auto-classes"),c(Pm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pm,"href","#extending-the-auto-classes"),c(ki,"class","relative group"),c(Im,"id","transformers.AutoConfig"),c(Im,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Im,"href","#transformers.AutoConfig"),c(Si,"class","relative group"),c(TS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(MS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(ES,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(wS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(xS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c($S,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(kS,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(SS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(RS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(PS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(BS,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(IS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(NS,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(qS,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(jS,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(DS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(GS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(OS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(VS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(XS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(zS,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(QS,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(WS,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(HS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(US,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(YS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(KS,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(ZS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(eR,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(oR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(rR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(tR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(aR,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(nR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(sR,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(lR,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(iR,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(dR,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(cR,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(mR,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(fR,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(gR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(hR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(uR,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(pR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(_R,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(bR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(vR,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(FR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(TR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(MR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(ER,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(CR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(wR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(AR,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(LR,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(yR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(xR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c($R,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(kR,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(SR,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(RR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(PR,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(BR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(IR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(NR,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(qR,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(jR,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(DR,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(GR,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(OR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(VR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(XR,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(zR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(QR,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(WR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(HR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(UR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(JR,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(YR,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(KR,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(ZR,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(eP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(oP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(rP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(tP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(aP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(nP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(sP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(lP,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(iP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(dP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(cP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(mP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(fP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(gP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(hP,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(uP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(pP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(_P,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(bP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(vP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(FP,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(TP,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(MP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(EP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(CP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(wP,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(AP,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(LP,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(yP,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(xP,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hg,"id","transformers.AutoTokenizer"),c(Hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hg,"href","#transformers.AutoTokenizer"),c(Pi,"class","relative group"),c($P,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(kP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(SP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(RP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(PP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(BP,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(IP,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(NP,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(qP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(jP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(DP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(GP,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(OP,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(VP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(XP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(zP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(QP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(WP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(HP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(UP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(JP,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(YP,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(KP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ZP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(eB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(rB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(nB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(lB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(dB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(cB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(hB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(pB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(bB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(vB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(FB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(TB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(MB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(EB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(CB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(wB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(AB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(LB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(yB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($B,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SB,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(RB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(IB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(NB,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(qB,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(jB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(VB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(XB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(zB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(QB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(WB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(HB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(UB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(JB,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(YB,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(KB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(ZB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(eI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(oI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(rI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(tI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(aI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(nI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(sI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(lI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(iI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(dI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(cI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(mI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(fI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(gI,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(hI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(uI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(pI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(_I,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(bI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(vI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(FI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(TI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(MI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(EI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(wI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(AI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(yI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(xI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c($I,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(kI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(SI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(RI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(PI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(BI,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(II,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(NI,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(qI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(jI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(DI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(GI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(OI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(VI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(XI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(WI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(HI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(UI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(JI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(YI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(KI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(ZI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(eN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(oN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(rN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(tN,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(aN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(nN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(sN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(lN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(iN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(dN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(mN,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(fN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(gN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(hN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(uN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(pN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(_N,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(bN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(vN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(FN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(TN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(MN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(EN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoFeatureExtractor"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoFeatureExtractor"),c(Bi,"class","relative group"),c(CN,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(wN,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(AN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(LN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($N,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(kN,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(SN,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(RN,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(PN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(BN,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(IN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(NN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(qN,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(jN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(DN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(GN,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(ON,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(VN,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(XN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(zN,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(QN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(WN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HN,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(UN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(JN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(YN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(KN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(ZN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(eq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(oq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(tq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gu,"id","transformers.AutoProcessor"),c(gu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gu,"href","#transformers.AutoProcessor"),c(Ii,"class","relative group"),c(aq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(nq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(sq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(lq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(iq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(dq,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(cq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(fq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(gq,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(hq,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(uq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(pq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(_q,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(bq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(vq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Fq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Tq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bu,"id","transformers.AutoModel"),c(Bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bu,"href","#transformers.AutoModel"),c(qi,"class","relative group"),c(Mq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(yq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(xq,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c($q,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(kq,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(Sq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(Rq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Pq,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(Bq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(Iq,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(Nq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(qq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(jq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(Gq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(zq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Qq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Hq,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Uq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(Jq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(Yq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(Kq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Zq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(ej,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(oj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(rj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(tj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(aj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(nj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(sj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(lj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(ij,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(dj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(cj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(mj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(fj,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(gj,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(hj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(uj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(pj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(_j,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(bj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(vj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(Fj,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(Tj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(Mj,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(Ej,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(Cj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(wj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(Aj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(Lj,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(yj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(xj,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c($j,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(kj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Sj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(Rj,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(Pj,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(Bj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Ij,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Nj,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(qj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(jj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(Dj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(Gj,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Oj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Vj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Xj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(zj,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(Qj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(Wj,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(Hj,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(Uj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(Jj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(Yj,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(Kj,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(Zj,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(eD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(oD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(rD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(tD,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(aD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(nD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(sD,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(lD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(iD,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(dD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(cD,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(mD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(fD,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(gD,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(hD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(uD,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(pD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(_D,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(bD,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(vD,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(FD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(TD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(MD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(ED,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(CD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(wD,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(AD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j_,"id","transformers.AutoModelForPreTraining"),c(j_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j_,"href","#transformers.AutoModelForPreTraining"),c(Gi,"class","relative group"),c(LD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($D,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(kD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(RD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(PD,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(BD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(ID,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ND,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(jD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(DD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(GD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(OD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(VD,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(XD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(zD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(QD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(WD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(HD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(UD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(JD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(YD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(KD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(ZD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(eG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(oG,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(rG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(tG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(aG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(nG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(sG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(lG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(iG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(mG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(fG,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(gG,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(hG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(uG,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(pG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_G,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R2,"id","transformers.AutoModelForCausalLM"),c(R2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R2,"href","#transformers.AutoModelForCausalLM"),c(Xi,"class","relative group"),c(FG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(CG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(wG,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(AG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(LG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(yG,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(xG,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c($G,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(kG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(SG,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(RG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(PG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(BG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(IG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(NG,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(qG,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(jG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(DG,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(GG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(OG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(VG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(XG,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(zG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(QG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(WG,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(HG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(UG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(JG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(YG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(KG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(ZG,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(eO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oO,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(rO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(tO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(nO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(sO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(lO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mb,"id","transformers.AutoModelForMaskedLM"),c(Mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mb,"href","#transformers.AutoModelForMaskedLM"),c(Wi,"class","relative group"),c(iO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(fO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(hO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(uO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(pO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(_O,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(bO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(vO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(FO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(TO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(MO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(EO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(CO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(wO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(AO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(LO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(yO,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(xO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c($O,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(kO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(SO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(RO,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(PO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(BO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(IO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(NO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(qO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(jO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(DO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(GO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(OO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(VO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(QO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dv,"id","transformers.AutoModelForSeq2SeqLM"),c(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dv,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ji,"class","relative group"),c(WO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(YO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(KO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(ZO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(eV,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(oV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(rV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(tV,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(aV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(nV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(sV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(lV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(iV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(dV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(cV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(mV,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(fV,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($v,"id","transformers.AutoModelForSequenceClassification"),c($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($v,"href","#transformers.AutoModelForSequenceClassification"),c(Zi,"class","relative group"),c(gV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(_V,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(bV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(vV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(FV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(TV,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(MV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(EV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(CV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(wV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(AV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(LV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(yV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(xV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c($V,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(kV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(SV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(RV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(PV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(BV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(IV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(NV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(qV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(jV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(DV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(GV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(OV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(VV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(XV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(zV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(QV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(WV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(HV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(UV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(JV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(YV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(KV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(ZV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(eX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(oX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(rX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(tX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(aX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(nX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(sX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(lX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(iX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(dX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(cX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x1,"id","transformers.AutoModelForMultipleChoice"),c(x1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x1,"href","#transformers.AutoModelForMultipleChoice"),c(rd,"class","relative group"),c(mX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(uX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(pX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(_X,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(bX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(vX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(FX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(TX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(MX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(EX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(CX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(wX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(AX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(LX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(yX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(xX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c($X,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(kX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(SX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(RX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(PX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(BX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(IX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(NX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(qX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(jX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(DX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(GX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(OX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(VX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dF,"id","transformers.AutoModelForNextSentencePrediction"),c(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dF,"href","#transformers.AutoModelForNextSentencePrediction"),c(nd,"class","relative group"),c(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(HX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(UX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(JX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(YX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(KX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForTokenClassification"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForTokenClassification"),c(id,"class","relative group"),c(ZX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(tz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(az,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(nz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(sz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(lz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(iz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(dz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(cz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(mz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(fz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(gz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(hz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(uz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(pz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(_z,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(bz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(vz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Fz,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Tz,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Mz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Ez,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Cz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(wz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(Az,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(Lz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(yz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(xz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c($z,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(kz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Sz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(Rz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Pz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(Bz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Iz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(Nz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForQuestionAnswering"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForQuestionAnswering"),c(md,"class","relative group"),c(qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(Oz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(Vz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(Xz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(zz,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Qz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Wz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Hz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Uz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Jz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(Yz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(Kz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Zz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(eQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(oQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(rQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(tQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(aQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(nQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(sQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(lQ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(iQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(dQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(cQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(mQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(fQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(gQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(hQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(uQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(pQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(_Q,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(bQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(vQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(FQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(TQ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(MQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(EQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(CQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(wQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(AQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(LQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JT,"id","transformers.AutoModelForTableQuestionAnswering"),c(JT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(hd,"class","relative group"),c(yQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oM,"id","transformers.AutoModelForImageClassification"),c(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oM,"href","#transformers.AutoModelForImageClassification"),c(_d,"class","relative group"),c(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(IQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NQ,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(qQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jQ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DQ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GQ,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OQ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(VQ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(XQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(zQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(QQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(WQ,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(HQ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(UQ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(JQ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(YQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(KQ,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(ZQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_M,"id","transformers.AutoModelForVision2Seq"),c(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_M,"href","#transformers.AutoModelForVision2Seq"),c(Fd,"class","relative group"),c(eW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MM,"id","transformers.AutoModelForVisualQuestionAnswering"),c(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MM,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Ed,"class","relative group"),c(aW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LM,"id","transformers.AutoModelForAudioClassification"),c(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LM,"href","#transformers.AutoModelForAudioClassification"),c(Ad,"class","relative group"),c(iW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(fW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(gW,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(hW,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(uW,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(_W,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(bW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(vW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.AutoModelForAudioFrameClassification"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.AutoModelForAudioFrameClassification"),c(xd,"class","relative group"),c(FW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(CW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(AW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UM,"id","transformers.AutoModelForCTC"),c(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UM,"href","#transformers.AutoModelForCTC"),c(Sd,"class","relative group"),c(yW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($W,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(SW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(RW,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(PW,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(BW,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(IW,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(NW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(qW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(jW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(DW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d4,"id","transformers.AutoModelForSpeechSeq2Seq"),c(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d4,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Bd,"class","relative group"),c(GW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(zW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u4,"id","transformers.AutoModelForAudioXVector"),c(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u4,"href","#transformers.AutoModelForAudioXVector"),c(qd,"class","relative group"),c(QW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(JW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(YW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(KW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(ZW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C4,"id","transformers.AutoModelForMaskedImageModeling"),c(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C4,"href","#transformers.AutoModelForMaskedImageModeling"),c(Gd,"class","relative group"),c(eH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(aH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(nH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k4,"id","transformers.AutoModelForObjectDetection"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.AutoModelForObjectDetection"),c(zd,"class","relative group"),c(sH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dH,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(cH,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.AutoModelForImageSegmentation"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.AutoModelForImageSegmentation"),c(Hd,"class","relative group"),c(mH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.AutoModelForSemanticSegmentation"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.AutoModelForSemanticSegmentation"),c(Yd,"class","relative group"),c(uH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bH,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(vH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(FH,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(TH,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J4,"id","transformers.AutoModelForInstanceSegmentation"),c(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J4,"href","#transformers.AutoModelForInstanceSegmentation"),c(ec,"class","relative group"),c(MH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModel"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModel"),c(tc,"class","relative group"),c(AH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c($H,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(kH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(SH,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(RH,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(PH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(BH,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(IH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(NH,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(qH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(jH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(DH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(GH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(OH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(VH,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(XH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(zH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(QH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(WH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(HH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(UH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(JH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(YH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(KH,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(ZH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(eU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(oU,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(rU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(tU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(aU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(nU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(sU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(lU,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(iU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(dU,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(cU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(mU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(fU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(gU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(hU,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(uU,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(pU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(_U,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(bU,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(vU,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(FU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(TU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(MU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(EU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.TFAutoModelForPreTraining"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.TFAutoModelForPreTraining"),c(sc,"class","relative group"),c(CU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(yU,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(xU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c($U,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(kU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(SU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(RU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(PU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(BU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(IU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(NU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(qU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(jU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(DU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(GU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(OU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(VU,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(XU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(zU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(QU,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(WU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(UU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForCausalLM"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForCausalLM"),c(dc,"class","relative group"),c(JU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(eJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(oJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(rJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(tJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(aJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(nJ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(sJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(lJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(iJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(dJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(cJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(mJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.TFAutoModelForImageClassification"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.TFAutoModelForImageClassification"),c(fc,"class","relative group"),c(fJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uJ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(pJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(_J,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(bJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(vJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.TFAutoModelForMaskedLM"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.TFAutoModelForMaskedLM"),c(uc,"class","relative group"),c(FJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(CJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(wJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(AJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(LJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(yJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(xJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($J,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(kJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(RJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(PJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(BJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(IJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(NJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(qJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(jJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(DJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(GJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(OJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.TFAutoModelForSeq2SeqLM"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(bc,"class","relative group"),c(VJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(WJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(HJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(UJ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(JJ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(YJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(KJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(ZJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(eY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(oY,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.TFAutoModelForSequenceClassification"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.TFAutoModelForSequenceClassification"),c(Tc,"class","relative group"),c(rY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(sY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(lY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(iY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(dY,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(cY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(mY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(fY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(gY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(hY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(uY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(pY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(_Y,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(bY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(vY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(FY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(TY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(MY,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(EY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(CY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(wY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(AY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(LY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(yY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(xY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c($Y,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.TFAutoModelForMultipleChoice"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.TFAutoModelForMultipleChoice"),c(Cc,"class","relative group"),c(kY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(BY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(IY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(NY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(qY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(jY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(DY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(GY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(OY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(VY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(XY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(zY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(QY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(WY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(HY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(UY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(JY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Lc,"class","relative group"),c(YY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(oK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c($c,"class","relative group"),c(rK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R5,"id","transformers.TFAutoModelForTokenClassification"),c(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R5,"href","#transformers.TFAutoModelForTokenClassification"),c(Rc,"class","relative group"),c(sK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(cK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(fK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(gK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(hK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(uK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(pK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(_K,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(bK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(vK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(FK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(TK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(MK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(EK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(CK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(wK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(AK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(LK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(yK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r0,"id","transformers.TFAutoModelForQuestionAnswering"),c(r0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r0,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Ic,"class","relative group"),c(xK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(RK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(PK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(BK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(IK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(NK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(qK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(jK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(DK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(GK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(OK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(VK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(XK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(zK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(QK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(WK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(HK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(UK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(JK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(YK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w0,"id","transformers.TFAutoModelForVision2Seq"),c(w0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w0,"href","#transformers.TFAutoModelForVision2Seq"),c(jc,"class","relative group"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x0,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(x0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x0,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Oc,"class","relative group"),c(rZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R0,"id","transformers.FlaxAutoModel"),c(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R0,"href","#transformers.FlaxAutoModel"),c(zc,"class","relative group"),c(sZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(cZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(mZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(fZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(gZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(hZ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(uZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(pZ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(_Z,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(bZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(vZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(FZ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(TZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(MZ,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(EZ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(CZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(wZ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(AZ,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(LZ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(yZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(xZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c($Z,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(kZ,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(SZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(RZ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(PZ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(BZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dw,"id","transformers.FlaxAutoModelForCausalLM"),c(dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dw,"href","#transformers.FlaxAutoModelForCausalLM"),c(Hc,"class","relative group"),c(IZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(DZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(GZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(OZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(VZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(XZ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(zZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(QZ,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(WZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(HZ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mw,"id","transformers.FlaxAutoModelForPreTraining"),c(Mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mw,"href","#transformers.FlaxAutoModelForPreTraining"),c(Yc,"class","relative group"),c(UZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ZZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(oee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(ree,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(tee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(aee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(nee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(see,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(lee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(iee,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(dee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(cee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qw,"id","transformers.FlaxAutoModelForMaskedLM"),c(qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(em,"class","relative group"),c(mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(uee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(_ee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(bee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(vee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Fee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Tee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Mee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Eee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Yw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(tm,"class","relative group"),c(Cee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(xee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c($ee,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(kee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(See,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Ree,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Pee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Bee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Iee,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(cA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(sm,"class","relative group"),c(Nee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Gee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Oee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Vee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Xee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Qee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Wee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Hee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Uee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(EA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(dm,"class","relative group"),c(Jee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(eoe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(ooe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(roe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(toe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(aoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(noe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(soe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(loe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(ioe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IA,"id","transformers.FlaxAutoModelForTokenClassification"),c(IA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(fm,"class","relative group"),c(doe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(coe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(moe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(foe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(goe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hoe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(uoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(poe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(_oe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(boe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(voe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(WA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(um,"class","relative group"),c(Foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Toe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Moe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Coe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(woe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Aoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Loe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(yoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xoe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($oe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(bm,"class","relative group"),c(koe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Soe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Roe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Poe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i6,"id","transformers.FlaxAutoModelForImageClassification"),c(i6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i6,"href","#transformers.FlaxAutoModelForImageClassification"),c(Tm,"class","relative group"),c(Boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Noe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qoe,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(joe,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g6,"id","transformers.FlaxAutoModelForVision2Seq"),c(g6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g6,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Cm,"class","relative group"),c(Doe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Goe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ooe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Voe,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Eo),e(Eo,Ci),b(m,$m,_),b(m,nt,_),e(nt,wi),e(nt,Ai),e(Ai,I7),e(nt,km),b(m,Oe,_),b(m,Qe,_),e(Qe,Li),e(Qe,Rn),e(Rn,N7),e(Qe,Pn),e(Qe,Bn),e(Bn,q7),e(Qe,yi),e(Qe,In),e(In,j7),e(Qe,xi),b(m,Sm,_),M($a,m,_),b(m,We,_),b(m,Ae,_),e(Ae,uS),e(Ae,$i),e($i,pS),e(Ae,_S),b(m,Co,_),b(m,ka,_),e(ka,bS),e(ka,Rm),e(Rm,vS),e(ka,QQe),b(m,kOe,_),b(m,ki,_),e(ki,Pm),e(Pm,qte),M(D7,qte,null),e(ki,WQe),e(ki,jte),e(jte,HQe),b(m,SOe,_),b(m,Nn,_),e(Nn,UQe),e(Nn,Dte),e(Dte,JQe),e(Nn,YQe),e(Nn,Gte),e(Gte,KQe),e(Nn,ZQe),b(m,ROe,_),M(G7,m,_),b(m,POe,_),b(m,FS,_),e(FS,eWe),b(m,BOe,_),M(Bm,m,_),b(m,IOe,_),b(m,Si,_),e(Si,Im),e(Im,Ote),M(O7,Ote,null),e(Si,oWe),e(Si,Vte),e(Vte,rWe),b(m,NOe,_),b(m,wo,_),M(V7,wo,null),e(wo,tWe),e(wo,X7),e(X7,aWe),e(X7,TS),e(TS,nWe),e(X7,sWe),e(wo,lWe),e(wo,z7),e(z7,iWe),e(z7,Xte),e(Xte,dWe),e(z7,cWe),e(wo,mWe),e(wo,Ar),M(Q7,Ar,null),e(Ar,fWe),e(Ar,zte),e(zte,gWe),e(Ar,hWe),e(Ar,Ri),e(Ri,uWe),e(Ri,Qte),e(Qte,pWe),e(Ri,_We),e(Ri,Wte),e(Wte,bWe),e(Ri,vWe),e(Ar,FWe),e(Ar,A),e(A,Nm),e(Nm,Hte),e(Hte,TWe),e(Nm,MWe),e(Nm,MS),e(MS,EWe),e(Nm,CWe),e(A,wWe),e(A,qm),e(qm,Ute),e(Ute,AWe),e(qm,LWe),e(qm,ES),e(ES,yWe),e(qm,xWe),e(A,$We),e(A,jm),e(jm,Jte),e(Jte,kWe),e(jm,SWe),e(jm,CS),e(CS,RWe),e(jm,PWe),e(A,BWe),e(A,Dm),e(Dm,Yte),e(Yte,IWe),e(Dm,NWe),e(Dm,wS),e(wS,qWe),e(Dm,jWe),e(A,DWe),e(A,Gm),e(Gm,Kte),e(Kte,GWe),e(Gm,OWe),e(Gm,AS),e(AS,VWe),e(Gm,XWe),e(A,zWe),e(A,Om),e(Om,Zte),e(Zte,QWe),e(Om,WWe),e(Om,LS),e(LS,HWe),e(Om,UWe),e(A,JWe),e(A,Vm),e(Vm,eae),e(eae,YWe),e(Vm,KWe),e(Vm,yS),e(yS,ZWe),e(Vm,eHe),e(A,oHe),e(A,Xm),e(Xm,oae),e(oae,rHe),e(Xm,tHe),e(Xm,xS),e(xS,aHe),e(Xm,nHe),e(A,sHe),e(A,zm),e(zm,rae),e(rae,lHe),e(zm,iHe),e(zm,$S),e($S,dHe),e(zm,cHe),e(A,mHe),e(A,Qm),e(Qm,tae),e(tae,fHe),e(Qm,gHe),e(Qm,kS),e(kS,hHe),e(Qm,uHe),e(A,pHe),e(A,Wm),e(Wm,aae),e(aae,_He),e(Wm,bHe),e(Wm,SS),e(SS,vHe),e(Wm,FHe),e(A,THe),e(A,Hm),e(Hm,nae),e(nae,MHe),e(Hm,EHe),e(Hm,RS),e(RS,CHe),e(Hm,wHe),e(A,AHe),e(A,Um),e(Um,sae),e(sae,LHe),e(Um,yHe),e(Um,PS),e(PS,xHe),e(Um,$He),e(A,kHe),e(A,Jm),e(Jm,lae),e(lae,SHe),e(Jm,RHe),e(Jm,BS),e(BS,PHe),e(Jm,BHe),e(A,IHe),e(A,Ym),e(Ym,iae),e(iae,NHe),e(Ym,qHe),e(Ym,IS),e(IS,jHe),e(Ym,DHe),e(A,GHe),e(A,Km),e(Km,dae),e(dae,OHe),e(Km,VHe),e(Km,NS),e(NS,XHe),e(Km,zHe),e(A,QHe),e(A,Zm),e(Zm,cae),e(cae,WHe),e(Zm,HHe),e(Zm,qS),e(qS,UHe),e(Zm,JHe),e(A,YHe),e(A,ef),e(ef,mae),e(mae,KHe),e(ef,ZHe),e(ef,jS),e(jS,eUe),e(ef,oUe),e(A,rUe),e(A,of),e(of,fae),e(fae,tUe),e(of,aUe),e(of,DS),e(DS,nUe),e(of,sUe),e(A,lUe),e(A,rf),e(rf,gae),e(gae,iUe),e(rf,dUe),e(rf,GS),e(GS,cUe),e(rf,mUe),e(A,fUe),e(A,tf),e(tf,hae),e(hae,gUe),e(tf,hUe),e(tf,OS),e(OS,uUe),e(tf,pUe),e(A,_Ue),e(A,af),e(af,uae),e(uae,bUe),e(af,vUe),e(af,VS),e(VS,FUe),e(af,TUe),e(A,MUe),e(A,nf),e(nf,pae),e(pae,EUe),e(nf,CUe),e(nf,XS),e(XS,wUe),e(nf,AUe),e(A,LUe),e(A,sf),e(sf,_ae),e(_ae,yUe),e(sf,xUe),e(sf,zS),e(zS,$Ue),e(sf,kUe),e(A,SUe),e(A,lf),e(lf,bae),e(bae,RUe),e(lf,PUe),e(lf,QS),e(QS,BUe),e(lf,IUe),e(A,NUe),e(A,df),e(df,vae),e(vae,qUe),e(df,jUe),e(df,WS),e(WS,DUe),e(df,GUe),e(A,OUe),e(A,cf),e(cf,Fae),e(Fae,VUe),e(cf,XUe),e(cf,HS),e(HS,zUe),e(cf,QUe),e(A,WUe),e(A,mf),e(mf,Tae),e(Tae,HUe),e(mf,UUe),e(mf,US),e(US,JUe),e(mf,YUe),e(A,KUe),e(A,ff),e(ff,Mae),e(Mae,ZUe),e(ff,eJe),e(ff,JS),e(JS,oJe),e(ff,rJe),e(A,tJe),e(A,gf),e(gf,Eae),e(Eae,aJe),e(gf,nJe),e(gf,YS),e(YS,sJe),e(gf,lJe),e(A,iJe),e(A,hf),e(hf,Cae),e(Cae,dJe),e(hf,cJe),e(hf,KS),e(KS,mJe),e(hf,fJe),e(A,gJe),e(A,uf),e(uf,wae),e(wae,hJe),e(uf,uJe),e(uf,ZS),e(ZS,pJe),e(uf,_Je),e(A,bJe),e(A,pf),e(pf,Aae),e(Aae,vJe),e(pf,FJe),e(pf,eR),e(eR,TJe),e(pf,MJe),e(A,EJe),e(A,_f),e(_f,Lae),e(Lae,CJe),e(_f,wJe),e(_f,oR),e(oR,AJe),e(_f,LJe),e(A,yJe),e(A,bf),e(bf,yae),e(yae,xJe),e(bf,$Je),e(bf,rR),e(rR,kJe),e(bf,SJe),e(A,RJe),e(A,vf),e(vf,xae),e(xae,PJe),e(vf,BJe),e(vf,tR),e(tR,IJe),e(vf,NJe),e(A,qJe),e(A,Ff),e(Ff,$ae),e($ae,jJe),e(Ff,DJe),e(Ff,aR),e(aR,GJe),e(Ff,OJe),e(A,VJe),e(A,Tf),e(Tf,kae),e(kae,XJe),e(Tf,zJe),e(Tf,nR),e(nR,QJe),e(Tf,WJe),e(A,HJe),e(A,Mf),e(Mf,Sae),e(Sae,UJe),e(Mf,JJe),e(Mf,sR),e(sR,YJe),e(Mf,KJe),e(A,ZJe),e(A,Ef),e(Ef,Rae),e(Rae,eYe),e(Ef,oYe),e(Ef,lR),e(lR,rYe),e(Ef,tYe),e(A,aYe),e(A,Cf),e(Cf,Pae),e(Pae,nYe),e(Cf,sYe),e(Cf,iR),e(iR,lYe),e(Cf,iYe),e(A,dYe),e(A,wf),e(wf,Bae),e(Bae,cYe),e(wf,mYe),e(wf,dR),e(dR,fYe),e(wf,gYe),e(A,hYe),e(A,Af),e(Af,Iae),e(Iae,uYe),e(Af,pYe),e(Af,cR),e(cR,_Ye),e(Af,bYe),e(A,vYe),e(A,Lf),e(Lf,Nae),e(Nae,FYe),e(Lf,TYe),e(Lf,mR),e(mR,MYe),e(Lf,EYe),e(A,CYe),e(A,yf),e(yf,qae),e(qae,wYe),e(yf,AYe),e(yf,fR),e(fR,LYe),e(yf,yYe),e(A,xYe),e(A,xf),e(xf,jae),e(jae,$Ye),e(xf,kYe),e(xf,gR),e(gR,SYe),e(xf,RYe),e(A,PYe),e(A,$f),e($f,Dae),e(Dae,BYe),e($f,IYe),e($f,hR),e(hR,NYe),e($f,qYe),e(A,jYe),e(A,kf),e(kf,Gae),e(Gae,DYe),e(kf,GYe),e(kf,uR),e(uR,OYe),e(kf,VYe),e(A,XYe),e(A,Sf),e(Sf,Oae),e(Oae,zYe),e(Sf,QYe),e(Sf,pR),e(pR,WYe),e(Sf,HYe),e(A,UYe),e(A,Rf),e(Rf,Vae),e(Vae,JYe),e(Rf,YYe),e(Rf,_R),e(_R,KYe),e(Rf,ZYe),e(A,eKe),e(A,Pf),e(Pf,Xae),e(Xae,oKe),e(Pf,rKe),e(Pf,bR),e(bR,tKe),e(Pf,aKe),e(A,nKe),e(A,Bf),e(Bf,zae),e(zae,sKe),e(Bf,lKe),e(Bf,vR),e(vR,iKe),e(Bf,dKe),e(A,cKe),e(A,If),e(If,Qae),e(Qae,mKe),e(If,fKe),e(If,FR),e(FR,gKe),e(If,hKe),e(A,uKe),e(A,Nf),e(Nf,Wae),e(Wae,pKe),e(Nf,_Ke),e(Nf,TR),e(TR,bKe),e(Nf,vKe),e(A,FKe),e(A,qf),e(qf,Hae),e(Hae,TKe),e(qf,MKe),e(qf,MR),e(MR,EKe),e(qf,CKe),e(A,wKe),e(A,jf),e(jf,Uae),e(Uae,AKe),e(jf,LKe),e(jf,ER),e(ER,yKe),e(jf,xKe),e(A,$Ke),e(A,Df),e(Df,Jae),e(Jae,kKe),e(Df,SKe),e(Df,CR),e(CR,RKe),e(Df,PKe),e(A,BKe),e(A,Gf),e(Gf,Yae),e(Yae,IKe),e(Gf,NKe),e(Gf,wR),e(wR,qKe),e(Gf,jKe),e(A,DKe),e(A,Of),e(Of,Kae),e(Kae,GKe),e(Of,OKe),e(Of,AR),e(AR,VKe),e(Of,XKe),e(A,zKe),e(A,Vf),e(Vf,Zae),e(Zae,QKe),e(Vf,WKe),e(Vf,LR),e(LR,HKe),e(Vf,UKe),e(A,JKe),e(A,Xf),e(Xf,ene),e(ene,YKe),e(Xf,KKe),e(Xf,yR),e(yR,ZKe),e(Xf,eZe),e(A,oZe),e(A,zf),e(zf,one),e(one,rZe),e(zf,tZe),e(zf,xR),e(xR,aZe),e(zf,nZe),e(A,sZe),e(A,Qf),e(Qf,rne),e(rne,lZe),e(Qf,iZe),e(Qf,$R),e($R,dZe),e(Qf,cZe),e(A,mZe),e(A,Wf),e(Wf,tne),e(tne,fZe),e(Wf,gZe),e(Wf,kR),e(kR,hZe),e(Wf,uZe),e(A,pZe),e(A,Hf),e(Hf,ane),e(ane,_Ze),e(Hf,bZe),e(Hf,SR),e(SR,vZe),e(Hf,FZe),e(A,TZe),e(A,Uf),e(Uf,nne),e(nne,MZe),e(Uf,EZe),e(Uf,RR),e(RR,CZe),e(Uf,wZe),e(A,AZe),e(A,Jf),e(Jf,sne),e(sne,LZe),e(Jf,yZe),e(Jf,PR),e(PR,xZe),e(Jf,$Ze),e(A,kZe),e(A,Yf),e(Yf,lne),e(lne,SZe),e(Yf,RZe),e(Yf,BR),e(BR,PZe),e(Yf,BZe),e(A,IZe),e(A,Kf),e(Kf,ine),e(ine,NZe),e(Kf,qZe),e(Kf,IR),e(IR,jZe),e(Kf,DZe),e(A,GZe),e(A,Zf),e(Zf,dne),e(dne,OZe),e(Zf,VZe),e(Zf,NR),e(NR,XZe),e(Zf,zZe),e(A,QZe),e(A,eg),e(eg,cne),e(cne,WZe),e(eg,HZe),e(eg,qR),e(qR,UZe),e(eg,JZe),e(A,YZe),e(A,og),e(og,mne),e(mne,KZe),e(og,ZZe),e(og,jR),e(jR,eeo),e(og,oeo),e(A,reo),e(A,rg),e(rg,fne),e(fne,teo),e(rg,aeo),e(rg,DR),e(DR,neo),e(rg,seo),e(A,leo),e(A,tg),e(tg,gne),e(gne,ieo),e(tg,deo),e(tg,GR),e(GR,ceo),e(tg,meo),e(A,feo),e(A,ag),e(ag,hne),e(hne,geo),e(ag,heo),e(ag,OR),e(OR,ueo),e(ag,peo),e(A,_eo),e(A,ng),e(ng,une),e(une,beo),e(ng,veo),e(ng,VR),e(VR,Feo),e(ng,Teo),e(A,Meo),e(A,sg),e(sg,pne),e(pne,Eeo),e(sg,Ceo),e(sg,XR),e(XR,weo),e(sg,Aeo),e(A,Leo),e(A,lg),e(lg,_ne),e(_ne,yeo),e(lg,xeo),e(lg,zR),e(zR,$eo),e(lg,keo),e(A,Seo),e(A,ig),e(ig,bne),e(bne,Reo),e(ig,Peo),e(ig,QR),e(QR,Beo),e(ig,Ieo),e(A,Neo),e(A,dg),e(dg,vne),e(vne,qeo),e(dg,jeo),e(dg,WR),e(WR,Deo),e(dg,Geo),e(A,Oeo),e(A,cg),e(cg,Fne),e(Fne,Veo),e(cg,Xeo),e(cg,HR),e(HR,zeo),e(cg,Qeo),e(A,Weo),e(A,mg),e(mg,Tne),e(Tne,Heo),e(mg,Ueo),e(mg,UR),e(UR,Jeo),e(mg,Yeo),e(A,Keo),e(A,fg),e(fg,Mne),e(Mne,Zeo),e(fg,eoo),e(fg,JR),e(JR,ooo),e(fg,roo),e(A,too),e(A,gg),e(gg,Ene),e(Ene,aoo),e(gg,noo),e(gg,YR),e(YR,soo),e(gg,loo),e(A,ioo),e(A,hg),e(hg,Cne),e(Cne,doo),e(hg,coo),e(hg,KR),e(KR,moo),e(hg,foo),e(A,goo),e(A,ug),e(ug,wne),e(wne,hoo),e(ug,uoo),e(ug,ZR),e(ZR,poo),e(ug,_oo),e(A,boo),e(A,pg),e(pg,Ane),e(Ane,voo),e(pg,Foo),e(pg,eP),e(eP,Too),e(pg,Moo),e(A,Eoo),e(A,_g),e(_g,Lne),e(Lne,Coo),e(_g,woo),e(_g,oP),e(oP,Aoo),e(_g,Loo),e(A,yoo),e(A,bg),e(bg,yne),e(yne,xoo),e(bg,$oo),e(bg,rP),e(rP,koo),e(bg,Soo),e(A,Roo),e(A,vg),e(vg,xne),e(xne,Poo),e(vg,Boo),e(vg,tP),e(tP,Ioo),e(vg,Noo),e(A,qoo),e(A,Fg),e(Fg,$ne),e($ne,joo),e(Fg,Doo),e(Fg,aP),e(aP,Goo),e(Fg,Ooo),e(A,Voo),e(A,Tg),e(Tg,kne),e(kne,Xoo),e(Tg,zoo),e(Tg,nP),e(nP,Qoo),e(Tg,Woo),e(A,Hoo),e(A,Mg),e(Mg,Sne),e(Sne,Uoo),e(Mg,Joo),e(Mg,sP),e(sP,Yoo),e(Mg,Koo),e(A,Zoo),e(A,Eg),e(Eg,Rne),e(Rne,ero),e(Eg,oro),e(Eg,lP),e(lP,rro),e(Eg,tro),e(A,aro),e(A,Cg),e(Cg,Pne),e(Pne,nro),e(Cg,sro),e(Cg,iP),e(iP,lro),e(Cg,iro),e(A,dro),e(A,wg),e(wg,Bne),e(Bne,cro),e(wg,mro),e(wg,dP),e(dP,fro),e(wg,gro),e(A,hro),e(A,Ag),e(Ag,Ine),e(Ine,uro),e(Ag,pro),e(Ag,cP),e(cP,_ro),e(Ag,bro),e(A,vro),e(A,Lg),e(Lg,Nne),e(Nne,Fro),e(Lg,Tro),e(Lg,mP),e(mP,Mro),e(Lg,Ero),e(A,Cro),e(A,yg),e(yg,qne),e(qne,wro),e(yg,Aro),e(yg,fP),e(fP,Lro),e(yg,yro),e(A,xro),e(A,xg),e(xg,jne),e(jne,$ro),e(xg,kro),e(xg,gP),e(gP,Sro),e(xg,Rro),e(A,Pro),e(A,$g),e($g,Dne),e(Dne,Bro),e($g,Iro),e($g,hP),e(hP,Nro),e($g,qro),e(A,jro),e(A,kg),e(kg,Gne),e(Gne,Dro),e(kg,Gro),e(kg,uP),e(uP,Oro),e(kg,Vro),e(A,Xro),e(A,Sg),e(Sg,One),e(One,zro),e(Sg,Qro),e(Sg,pP),e(pP,Wro),e(Sg,Hro),e(A,Uro),e(A,Rg),e(Rg,Vne),e(Vne,Jro),e(Rg,Yro),e(Rg,_P),e(_P,Kro),e(Rg,Zro),e(A,eto),e(A,Pg),e(Pg,Xne),e(Xne,oto),e(Pg,rto),e(Pg,bP),e(bP,tto),e(Pg,ato),e(A,nto),e(A,Bg),e(Bg,zne),e(zne,sto),e(Bg,lto),e(Bg,vP),e(vP,ito),e(Bg,dto),e(A,cto),e(A,Ig),e(Ig,Qne),e(Qne,mto),e(Ig,fto),e(Ig,FP),e(FP,gto),e(Ig,hto),e(A,uto),e(A,Ng),e(Ng,Wne),e(Wne,pto),e(Ng,_to),e(Ng,TP),e(TP,bto),e(Ng,vto),e(A,Fto),e(A,qg),e(qg,Hne),e(Hne,Tto),e(qg,Mto),e(qg,MP),e(MP,Eto),e(qg,Cto),e(A,wto),e(A,jg),e(jg,Une),e(Une,Ato),e(jg,Lto),e(jg,EP),e(EP,yto),e(jg,xto),e(A,$to),e(A,Dg),e(Dg,Jne),e(Jne,kto),e(Dg,Sto),e(Dg,CP),e(CP,Rto),e(Dg,Pto),e(A,Bto),e(A,Gg),e(Gg,Yne),e(Yne,Ito),e(Gg,Nto),e(Gg,wP),e(wP,qto),e(Gg,jto),e(A,Dto),e(A,Og),e(Og,Kne),e(Kne,Gto),e(Og,Oto),e(Og,AP),e(AP,Vto),e(Og,Xto),e(A,zto),e(A,Vg),e(Vg,Zne),e(Zne,Qto),e(Vg,Wto),e(Vg,LP),e(LP,Hto),e(Vg,Uto),e(A,Jto),e(A,Xg),e(Xg,ese),e(ese,Yto),e(Xg,Kto),e(Xg,yP),e(yP,Zto),e(Xg,eao),e(A,oao),e(A,zg),e(zg,ose),e(ose,rao),e(zg,tao),e(zg,xP),e(xP,aao),e(zg,nao),e(Ar,sao),M(Qg,Ar,null),e(wo,lao),e(wo,Wg),M(W7,Wg,null),e(Wg,iao),e(Wg,rse),e(rse,dao),b(m,qOe,_),b(m,Pi,_),e(Pi,Hg),e(Hg,tse),M(H7,tse,null),e(Pi,cao),e(Pi,ase),e(ase,mao),b(m,jOe,_),b(m,Ao,_),M(U7,Ao,null),e(Ao,fao),e(Ao,J7),e(J7,gao),e(J7,$P),e($P,hao),e(J7,uao),e(Ao,pao),e(Ao,Y7),e(Y7,_ao),e(Y7,nse),e(nse,bao),e(Y7,vao),e(Ao,Fao),e(Ao,Lr),M(K7,Lr,null),e(Lr,Tao),e(Lr,sse),e(sse,Mao),e(Lr,Eao),e(Lr,Sa),e(Sa,Cao),e(Sa,lse),e(lse,wao),e(Sa,Aao),e(Sa,ise),e(ise,Lao),e(Sa,yao),e(Sa,dse),e(dse,xao),e(Sa,$ao),e(Lr,kao),e(Lr,k),e(k,qn),e(qn,cse),e(cse,Sao),e(qn,Rao),e(qn,kP),e(kP,Pao),e(qn,Bao),e(qn,SP),e(SP,Iao),e(qn,Nao),e(k,qao),e(k,jn),e(jn,mse),e(mse,jao),e(jn,Dao),e(jn,RP),e(RP,Gao),e(jn,Oao),e(jn,PP),e(PP,Vao),e(jn,Xao),e(k,zao),e(k,Dn),e(Dn,fse),e(fse,Qao),e(Dn,Wao),e(Dn,BP),e(BP,Hao),e(Dn,Uao),e(Dn,IP),e(IP,Jao),e(Dn,Yao),e(k,Kao),e(k,Ug),e(Ug,gse),e(gse,Zao),e(Ug,eno),e(Ug,NP),e(NP,ono),e(Ug,rno),e(k,tno),e(k,Gn),e(Gn,hse),e(hse,ano),e(Gn,nno),e(Gn,qP),e(qP,sno),e(Gn,lno),e(Gn,jP),e(jP,ino),e(Gn,dno),e(k,cno),e(k,Jg),e(Jg,use),e(use,mno),e(Jg,fno),e(Jg,DP),e(DP,gno),e(Jg,hno),e(k,uno),e(k,Yg),e(Yg,pse),e(pse,pno),e(Yg,_no),e(Yg,GP),e(GP,bno),e(Yg,vno),e(k,Fno),e(k,Kg),e(Kg,_se),e(_se,Tno),e(Kg,Mno),e(Kg,OP),e(OP,Eno),e(Kg,Cno),e(k,wno),e(k,On),e(On,bse),e(bse,Ano),e(On,Lno),e(On,VP),e(VP,yno),e(On,xno),e(On,XP),e(XP,$no),e(On,kno),e(k,Sno),e(k,Vn),e(Vn,vse),e(vse,Rno),e(Vn,Pno),e(Vn,zP),e(zP,Bno),e(Vn,Ino),e(Vn,QP),e(QP,Nno),e(Vn,qno),e(k,jno),e(k,Xn),e(Xn,Fse),e(Fse,Dno),e(Xn,Gno),e(Xn,WP),e(WP,Ono),e(Xn,Vno),e(Xn,HP),e(HP,Xno),e(Xn,zno),e(k,Qno),e(k,Zg),e(Zg,Tse),e(Tse,Wno),e(Zg,Hno),e(Zg,UP),e(UP,Uno),e(Zg,Jno),e(k,Yno),e(k,eh),e(eh,Mse),e(Mse,Kno),e(eh,Zno),e(eh,JP),e(JP,eso),e(eh,oso),e(k,rso),e(k,oh),e(oh,Ese),e(Ese,tso),e(oh,aso),e(oh,YP),e(YP,nso),e(oh,sso),e(k,lso),e(k,zn),e(zn,Cse),e(Cse,iso),e(zn,dso),e(zn,KP),e(KP,cso),e(zn,mso),e(zn,ZP),e(ZP,fso),e(zn,gso),e(k,hso),e(k,rh),e(rh,wse),e(wse,uso),e(rh,pso),e(rh,eB),e(eB,_so),e(rh,bso),e(k,vso),e(k,Qn),e(Qn,Ase),e(Ase,Fso),e(Qn,Tso),e(Qn,oB),e(oB,Mso),e(Qn,Eso),e(Qn,rB),e(rB,Cso),e(Qn,wso),e(k,Aso),e(k,Wn),e(Wn,Lse),e(Lse,Lso),e(Wn,yso),e(Wn,tB),e(tB,xso),e(Wn,$so),e(Wn,aB),e(aB,kso),e(Wn,Sso),e(k,Rso),e(k,Hn),e(Hn,yse),e(yse,Pso),e(Hn,Bso),e(Hn,nB),e(nB,Iso),e(Hn,Nso),e(Hn,sB),e(sB,qso),e(Hn,jso),e(k,Dso),e(k,Un),e(Un,xse),e(xse,Gso),e(Un,Oso),e(Un,lB),e(lB,Vso),e(Un,Xso),e(Un,iB),e(iB,zso),e(Un,Qso),e(k,Wso),e(k,th),e(th,$se),e($se,Hso),e(th,Uso),e(th,dB),e(dB,Jso),e(th,Yso),e(k,Kso),e(k,Jn),e(Jn,kse),e(kse,Zso),e(Jn,elo),e(Jn,cB),e(cB,olo),e(Jn,rlo),e(Jn,mB),e(mB,tlo),e(Jn,alo),e(k,nlo),e(k,Yn),e(Yn,Sse),e(Sse,slo),e(Yn,llo),e(Yn,fB),e(fB,ilo),e(Yn,dlo),e(Yn,gB),e(gB,clo),e(Yn,mlo),e(k,flo),e(k,Kn),e(Kn,Rse),e(Rse,glo),e(Kn,hlo),e(Kn,hB),e(hB,ulo),e(Kn,plo),e(Kn,uB),e(uB,_lo),e(Kn,blo),e(k,vlo),e(k,Zn),e(Zn,Pse),e(Pse,Flo),e(Zn,Tlo),e(Zn,pB),e(pB,Mlo),e(Zn,Elo),e(Zn,_B),e(_B,Clo),e(Zn,wlo),e(k,Alo),e(k,es),e(es,Bse),e(Bse,Llo),e(es,ylo),e(es,bB),e(bB,xlo),e(es,$lo),e(es,vB),e(vB,klo),e(es,Slo),e(k,Rlo),e(k,os),e(os,Ise),e(Ise,Plo),e(os,Blo),e(os,FB),e(FB,Ilo),e(os,Nlo),e(os,TB),e(TB,qlo),e(os,jlo),e(k,Dlo),e(k,ah),e(ah,Nse),e(Nse,Glo),e(ah,Olo),e(ah,MB),e(MB,Vlo),e(ah,Xlo),e(k,zlo),e(k,rs),e(rs,qse),e(qse,Qlo),e(rs,Wlo),e(rs,EB),e(EB,Hlo),e(rs,Ulo),e(rs,CB),e(CB,Jlo),e(rs,Ylo),e(k,Klo),e(k,nh),e(nh,jse),e(jse,Zlo),e(nh,eio),e(nh,wB),e(wB,oio),e(nh,rio),e(k,tio),e(k,ts),e(ts,Dse),e(Dse,aio),e(ts,nio),e(ts,AB),e(AB,sio),e(ts,lio),e(ts,LB),e(LB,iio),e(ts,dio),e(k,cio),e(k,as),e(as,Gse),e(Gse,mio),e(as,fio),e(as,yB),e(yB,gio),e(as,hio),e(as,xB),e(xB,uio),e(as,pio),e(k,_io),e(k,ns),e(ns,Ose),e(Ose,bio),e(ns,vio),e(ns,$B),e($B,Fio),e(ns,Tio),e(ns,kB),e(kB,Mio),e(ns,Eio),e(k,Cio),e(k,sh),e(sh,Vse),e(Vse,wio),e(sh,Aio),e(sh,SB),e(SB,Lio),e(sh,yio),e(k,xio),e(k,ss),e(ss,Xse),e(Xse,$io),e(ss,kio),e(ss,RB),e(RB,Sio),e(ss,Rio),e(ss,PB),e(PB,Pio),e(ss,Bio),e(k,Iio),e(k,ls),e(ls,zse),e(zse,Nio),e(ls,qio),e(ls,BB),e(BB,jio),e(ls,Dio),e(ls,IB),e(IB,Gio),e(ls,Oio),e(k,Vio),e(k,is),e(is,Qse),e(Qse,Xio),e(is,zio),e(is,NB),e(NB,Qio),e(is,Wio),e(is,qB),e(qB,Hio),e(is,Uio),e(k,Jio),e(k,lh),e(lh,Wse),e(Wse,Yio),e(lh,Kio),e(lh,jB),e(jB,Zio),e(lh,edo),e(k,odo),e(k,ds),e(ds,Hse),e(Hse,rdo),e(ds,tdo),e(ds,DB),e(DB,ado),e(ds,ndo),e(ds,GB),e(GB,sdo),e(ds,ldo),e(k,ido),e(k,cs),e(cs,Use),e(Use,ddo),e(cs,cdo),e(cs,OB),e(OB,mdo),e(cs,fdo),e(cs,VB),e(VB,gdo),e(cs,hdo),e(k,udo),e(k,ms),e(ms,Jse),e(Jse,pdo),e(ms,_do),e(ms,XB),e(XB,bdo),e(ms,vdo),e(ms,zB),e(zB,Fdo),e(ms,Tdo),e(k,Mdo),e(k,fs),e(fs,Yse),e(Yse,Edo),e(fs,Cdo),e(fs,QB),e(QB,wdo),e(fs,Ado),e(fs,WB),e(WB,Ldo),e(fs,ydo),e(k,xdo),e(k,gs),e(gs,Kse),e(Kse,$do),e(gs,kdo),e(gs,HB),e(HB,Sdo),e(gs,Rdo),e(gs,UB),e(UB,Pdo),e(gs,Bdo),e(k,Ido),e(k,hs),e(hs,Zse),e(Zse,Ndo),e(hs,qdo),e(hs,JB),e(JB,jdo),e(hs,Ddo),e(hs,YB),e(YB,Gdo),e(hs,Odo),e(k,Vdo),e(k,us),e(us,ele),e(ele,Xdo),e(us,zdo),e(us,KB),e(KB,Qdo),e(us,Wdo),e(us,ZB),e(ZB,Hdo),e(us,Udo),e(k,Jdo),e(k,ps),e(ps,ole),e(ole,Ydo),e(ps,Kdo),e(ps,eI),e(eI,Zdo),e(ps,eco),e(ps,oI),e(oI,oco),e(ps,rco),e(k,tco),e(k,ih),e(ih,rle),e(rle,aco),e(ih,nco),e(ih,rI),e(rI,sco),e(ih,lco),e(k,ico),e(k,_s),e(_s,tle),e(tle,dco),e(_s,cco),e(_s,tI),e(tI,mco),e(_s,fco),e(_s,aI),e(aI,gco),e(_s,hco),e(k,uco),e(k,dh),e(dh,ale),e(ale,pco),e(dh,_co),e(dh,nI),e(nI,bco),e(dh,vco),e(k,Fco),e(k,ch),e(ch,nle),e(nle,Tco),e(ch,Mco),e(ch,sI),e(sI,Eco),e(ch,Cco),e(k,wco),e(k,bs),e(bs,sle),e(sle,Aco),e(bs,Lco),e(bs,lI),e(lI,yco),e(bs,xco),e(bs,iI),e(iI,$co),e(bs,kco),e(k,Sco),e(k,vs),e(vs,lle),e(lle,Rco),e(vs,Pco),e(vs,dI),e(dI,Bco),e(vs,Ico),e(vs,cI),e(cI,Nco),e(vs,qco),e(k,jco),e(k,Fs),e(Fs,ile),e(ile,Dco),e(Fs,Gco),e(Fs,mI),e(mI,Oco),e(Fs,Vco),e(Fs,fI),e(fI,Xco),e(Fs,zco),e(k,Qco),e(k,mh),e(mh,dle),e(dle,Wco),e(mh,Hco),e(mh,gI),e(gI,Uco),e(mh,Jco),e(k,Yco),e(k,Ts),e(Ts,cle),e(cle,Kco),e(Ts,Zco),e(Ts,hI),e(hI,emo),e(Ts,omo),e(Ts,uI),e(uI,rmo),e(Ts,tmo),e(k,amo),e(k,Ms),e(Ms,mle),e(mle,nmo),e(Ms,smo),e(Ms,pI),e(pI,lmo),e(Ms,imo),e(Ms,_I),e(_I,dmo),e(Ms,cmo),e(k,mmo),e(k,Es),e(Es,fle),e(fle,fmo),e(Es,gmo),e(Es,bI),e(bI,hmo),e(Es,umo),e(Es,vI),e(vI,pmo),e(Es,_mo),e(k,bmo),e(k,Cs),e(Cs,gle),e(gle,vmo),e(Cs,Fmo),e(Cs,FI),e(FI,Tmo),e(Cs,Mmo),e(Cs,TI),e(TI,Emo),e(Cs,Cmo),e(k,wmo),e(k,ws),e(ws,hle),e(hle,Amo),e(ws,Lmo),e(ws,MI),e(MI,ymo),e(ws,xmo),e(ws,EI),e(EI,$mo),e(ws,kmo),e(k,Smo),e(k,As),e(As,ule),e(ule,Rmo),e(As,Pmo),e(As,CI),e(CI,Bmo),e(As,Imo),e(As,wI),e(wI,Nmo),e(As,qmo),e(k,jmo),e(k,fh),e(fh,ple),e(ple,Dmo),e(fh,Gmo),e(fh,AI),e(AI,Omo),e(fh,Vmo),e(k,Xmo),e(k,Ls),e(Ls,_le),e(_le,zmo),e(Ls,Qmo),e(Ls,LI),e(LI,Wmo),e(Ls,Hmo),e(Ls,yI),e(yI,Umo),e(Ls,Jmo),e(k,Ymo),e(k,gh),e(gh,ble),e(ble,Kmo),e(gh,Zmo),e(gh,xI),e(xI,efo),e(gh,ofo),e(k,rfo),e(k,hh),e(hh,vle),e(vle,tfo),e(hh,afo),e(hh,$I),e($I,nfo),e(hh,sfo),e(k,lfo),e(k,uh),e(uh,Fle),e(Fle,ifo),e(uh,dfo),e(uh,kI),e(kI,cfo),e(uh,mfo),e(k,ffo),e(k,ph),e(ph,Tle),e(Tle,gfo),e(ph,hfo),e(ph,SI),e(SI,ufo),e(ph,pfo),e(k,_fo),e(k,ys),e(ys,Mle),e(Mle,bfo),e(ys,vfo),e(ys,RI),e(RI,Ffo),e(ys,Tfo),e(ys,PI),e(PI,Mfo),e(ys,Efo),e(k,Cfo),e(k,_h),e(_h,Ele),e(Ele,wfo),e(_h,Afo),e(_h,BI),e(BI,Lfo),e(_h,yfo),e(k,xfo),e(k,xs),e(xs,Cle),e(Cle,$fo),e(xs,kfo),e(xs,II),e(II,Sfo),e(xs,Rfo),e(xs,NI),e(NI,Pfo),e(xs,Bfo),e(k,Ifo),e(k,$s),e($s,wle),e(wle,Nfo),e($s,qfo),e($s,qI),e(qI,jfo),e($s,Dfo),e($s,jI),e(jI,Gfo),e($s,Ofo),e(k,Vfo),e(k,ks),e(ks,Ale),e(Ale,Xfo),e(ks,zfo),e(ks,DI),e(DI,Qfo),e(ks,Wfo),e(ks,GI),e(GI,Hfo),e(ks,Ufo),e(k,Jfo),e(k,Ss),e(Ss,Lle),e(Lle,Yfo),e(Ss,Kfo),e(Ss,OI),e(OI,Zfo),e(Ss,ego),e(Ss,VI),e(VI,ogo),e(Ss,rgo),e(k,tgo),e(k,Rs),e(Rs,yle),e(yle,ago),e(Rs,ngo),e(Rs,XI),e(XI,sgo),e(Rs,lgo),e(Rs,zI),e(zI,igo),e(Rs,dgo),e(k,cgo),e(k,Ps),e(Ps,xle),e(xle,mgo),e(Ps,fgo),e(Ps,QI),e(QI,ggo),e(Ps,hgo),e(Ps,WI),e(WI,ugo),e(Ps,pgo),e(k,_go),e(k,bh),e(bh,$le),e($le,bgo),e(bh,vgo),e(bh,HI),e(HI,Fgo),e(bh,Tgo),e(k,Mgo),e(k,vh),e(vh,kle),e(kle,Ego),e(vh,Cgo),e(vh,UI),e(UI,wgo),e(vh,Ago),e(k,Lgo),e(k,Bs),e(Bs,Sle),e(Sle,ygo),e(Bs,xgo),e(Bs,JI),e(JI,$go),e(Bs,kgo),e(Bs,YI),e(YI,Sgo),e(Bs,Rgo),e(k,Pgo),e(k,Is),e(Is,Rle),e(Rle,Bgo),e(Is,Igo),e(Is,KI),e(KI,Ngo),e(Is,qgo),e(Is,ZI),e(ZI,jgo),e(Is,Dgo),e(k,Ggo),e(k,Ns),e(Ns,Ple),e(Ple,Ogo),e(Ns,Vgo),e(Ns,eN),e(eN,Xgo),e(Ns,zgo),e(Ns,oN),e(oN,Qgo),e(Ns,Wgo),e(k,Hgo),e(k,Fh),e(Fh,Ble),e(Ble,Ugo),e(Fh,Jgo),e(Fh,rN),e(rN,Ygo),e(Fh,Kgo),e(k,Zgo),e(k,Th),e(Th,Ile),e(Ile,eho),e(Th,oho),e(Th,tN),e(tN,rho),e(Th,tho),e(k,aho),e(k,Mh),e(Mh,Nle),e(Nle,nho),e(Mh,sho),e(Mh,aN),e(aN,lho),e(Mh,iho),e(k,dho),e(k,qs),e(qs,qle),e(qle,cho),e(qs,mho),e(qs,nN),e(nN,fho),e(qs,gho),e(qs,sN),e(sN,hho),e(qs,uho),e(k,pho),e(k,js),e(js,jle),e(jle,_ho),e(js,bho),e(js,lN),e(lN,vho),e(js,Fho),e(js,iN),e(iN,Tho),e(js,Mho),e(k,Eho),e(k,Eh),e(Eh,Dle),e(Dle,Cho),e(Eh,who),e(Eh,dN),e(dN,Aho),e(Eh,Lho),e(k,yho),e(k,Ch),e(Ch,Gle),e(Gle,xho),e(Ch,$ho),e(Ch,cN),e(cN,kho),e(Ch,Sho),e(k,Rho),e(k,wh),e(wh,Ole),e(Ole,Pho),e(wh,Bho),e(wh,mN),e(mN,Iho),e(wh,Nho),e(k,qho),e(k,Ds),e(Ds,Vle),e(Vle,jho),e(Ds,Dho),e(Ds,fN),e(fN,Gho),e(Ds,Oho),e(Ds,gN),e(gN,Vho),e(Ds,Xho),e(k,zho),e(k,Ah),e(Ah,Xle),e(Xle,Qho),e(Ah,Who),e(Ah,hN),e(hN,Hho),e(Ah,Uho),e(k,Jho),e(k,Lh),e(Lh,zle),e(zle,Yho),e(Lh,Kho),e(Lh,uN),e(uN,Zho),e(Lh,euo),e(k,ouo),e(k,Gs),e(Gs,Qle),e(Qle,ruo),e(Gs,tuo),e(Gs,pN),e(pN,auo),e(Gs,nuo),e(Gs,_N),e(_N,suo),e(Gs,luo),e(k,iuo),e(k,Os),e(Os,Wle),e(Wle,duo),e(Os,cuo),e(Os,bN),e(bN,muo),e(Os,fuo),e(Os,vN),e(vN,guo),e(Os,huo),e(k,uuo),e(k,Vs),e(Vs,Hle),e(Hle,puo),e(Vs,_uo),e(Vs,FN),e(FN,buo),e(Vs,vuo),e(Vs,TN),e(TN,Fuo),e(Vs,Tuo),e(k,Muo),e(k,Xs),e(Xs,Ule),e(Ule,Euo),e(Xs,Cuo),e(Xs,MN),e(MN,wuo),e(Xs,Auo),e(Xs,EN),e(EN,Luo),e(Xs,yuo),e(Lr,xuo),M(yh,Lr,null),e(Ao,$uo),e(Ao,xh),M(Z7,xh,null),e(xh,kuo),e(xh,Jle),e(Jle,Suo),b(m,DOe,_),b(m,Bi,_),e(Bi,$h),e($h,Yle),M(ey,Yle,null),e(Bi,Ruo),e(Bi,Kle),e(Kle,Puo),b(m,GOe,_),b(m,Lo,_),M(oy,Lo,null),e(Lo,Buo),e(Lo,ry),e(ry,Iuo),e(ry,CN),e(CN,Nuo),e(ry,quo),e(Lo,juo),e(Lo,ty),e(ty,Duo),e(ty,Zle),e(Zle,Guo),e(ty,Ouo),e(Lo,Vuo),e(Lo,He),M(ay,He,null),e(He,Xuo),e(He,eie),e(eie,zuo),e(He,Quo),e(He,Ra),e(Ra,Wuo),e(Ra,oie),e(oie,Huo),e(Ra,Uuo),e(Ra,rie),e(rie,Juo),e(Ra,Yuo),e(Ra,tie),e(tie,Kuo),e(Ra,Zuo),e(He,epo),e(He,Y),e(Y,kh),e(kh,aie),e(aie,opo),e(kh,rpo),e(kh,wN),e(wN,tpo),e(kh,apo),e(Y,npo),e(Y,Sh),e(Sh,nie),e(nie,spo),e(Sh,lpo),e(Sh,AN),e(AN,ipo),e(Sh,dpo),e(Y,cpo),e(Y,Rh),e(Rh,sie),e(sie,mpo),e(Rh,fpo),e(Rh,LN),e(LN,gpo),e(Rh,hpo),e(Y,upo),e(Y,Ph),e(Ph,lie),e(lie,ppo),e(Ph,_po),e(Ph,yN),e(yN,bpo),e(Ph,vpo),e(Y,Fpo),e(Y,Bh),e(Bh,iie),e(iie,Tpo),e(Bh,Mpo),e(Bh,xN),e(xN,Epo),e(Bh,Cpo),e(Y,wpo),e(Y,Ih),e(Ih,die),e(die,Apo),e(Ih,Lpo),e(Ih,$N),e($N,ypo),e(Ih,xpo),e(Y,$po),e(Y,Nh),e(Nh,cie),e(cie,kpo),e(Nh,Spo),e(Nh,kN),e(kN,Rpo),e(Nh,Ppo),e(Y,Bpo),e(Y,qh),e(qh,mie),e(mie,Ipo),e(qh,Npo),e(qh,SN),e(SN,qpo),e(qh,jpo),e(Y,Dpo),e(Y,jh),e(jh,fie),e(fie,Gpo),e(jh,Opo),e(jh,RN),e(RN,Vpo),e(jh,Xpo),e(Y,zpo),e(Y,Dh),e(Dh,gie),e(gie,Qpo),e(Dh,Wpo),e(Dh,PN),e(PN,Hpo),e(Dh,Upo),e(Y,Jpo),e(Y,Gh),e(Gh,hie),e(hie,Ypo),e(Gh,Kpo),e(Gh,BN),e(BN,Zpo),e(Gh,e_o),e(Y,o_o),e(Y,Oh),e(Oh,uie),e(uie,r_o),e(Oh,t_o),e(Oh,IN),e(IN,a_o),e(Oh,n_o),e(Y,s_o),e(Y,Vh),e(Vh,pie),e(pie,l_o),e(Vh,i_o),e(Vh,NN),e(NN,d_o),e(Vh,c_o),e(Y,m_o),e(Y,Xh),e(Xh,_ie),e(_ie,f_o),e(Xh,g_o),e(Xh,qN),e(qN,h_o),e(Xh,u_o),e(Y,p_o),e(Y,zh),e(zh,bie),e(bie,__o),e(zh,b_o),e(zh,jN),e(jN,v_o),e(zh,F_o),e(Y,T_o),e(Y,Qh),e(Qh,vie),e(vie,M_o),e(Qh,E_o),e(Qh,DN),e(DN,C_o),e(Qh,w_o),e(Y,A_o),e(Y,Wh),e(Wh,Fie),e(Fie,L_o),e(Wh,y_o),e(Wh,GN),e(GN,x_o),e(Wh,$_o),e(Y,k_o),e(Y,Hh),e(Hh,Tie),e(Tie,S_o),e(Hh,R_o),e(Hh,ON),e(ON,P_o),e(Hh,B_o),e(Y,I_o),e(Y,Uh),e(Uh,Mie),e(Mie,N_o),e(Uh,q_o),e(Uh,VN),e(VN,j_o),e(Uh,D_o),e(Y,G_o),e(Y,Jh),e(Jh,Eie),e(Eie,O_o),e(Jh,V_o),e(Jh,XN),e(XN,X_o),e(Jh,z_o),e(Y,Q_o),e(Y,Yh),e(Yh,Cie),e(Cie,W_o),e(Yh,H_o),e(Yh,zN),e(zN,U_o),e(Yh,J_o),e(Y,Y_o),e(Y,Kh),e(Kh,wie),e(wie,K_o),e(Kh,Z_o),e(Kh,QN),e(QN,e2o),e(Kh,o2o),e(Y,r2o),e(Y,Zh),e(Zh,Aie),e(Aie,t2o),e(Zh,a2o),e(Zh,WN),e(WN,n2o),e(Zh,s2o),e(Y,l2o),e(Y,eu),e(eu,Lie),e(Lie,i2o),e(eu,d2o),e(eu,HN),e(HN,c2o),e(eu,m2o),e(Y,f2o),e(Y,ou),e(ou,yie),e(yie,g2o),e(ou,h2o),e(ou,UN),e(UN,u2o),e(ou,p2o),e(Y,_2o),e(Y,ru),e(ru,xie),e(xie,b2o),e(ru,v2o),e(ru,JN),e(JN,F2o),e(ru,T2o),e(Y,M2o),e(Y,tu),e(tu,$ie),e($ie,E2o),e(tu,C2o),e(tu,YN),e(YN,w2o),e(tu,A2o),e(Y,L2o),e(Y,au),e(au,kie),e(kie,y2o),e(au,x2o),e(au,KN),e(KN,$2o),e(au,k2o),e(Y,S2o),e(Y,nu),e(nu,Sie),e(Sie,R2o),e(nu,P2o),e(nu,ZN),e(ZN,B2o),e(nu,I2o),e(Y,N2o),e(Y,su),e(su,Rie),e(Rie,q2o),e(su,j2o),e(su,eq),e(eq,D2o),e(su,G2o),e(Y,O2o),e(Y,lu),e(lu,Pie),e(Pie,V2o),e(lu,X2o),e(lu,oq),e(oq,z2o),e(lu,Q2o),e(Y,W2o),e(Y,iu),e(iu,Bie),e(Bie,H2o),e(iu,U2o),e(iu,rq),e(rq,J2o),e(iu,Y2o),e(Y,K2o),e(Y,du),e(du,Iie),e(Iie,Z2o),e(du,ebo),e(du,tq),e(tq,obo),e(du,rbo),e(He,tbo),M(cu,He,null),e(He,abo),M(mu,He,null),e(Lo,nbo),e(Lo,fu),M(ny,fu,null),e(fu,sbo),e(fu,Nie),e(Nie,lbo),b(m,OOe,_),b(m,Ii,_),e(Ii,gu),e(gu,qie),M(sy,qie,null),e(Ii,ibo),e(Ii,jie),e(jie,dbo),b(m,VOe,_),b(m,yo,_),M(ly,yo,null),e(yo,cbo),e(yo,iy),e(iy,mbo),e(iy,aq),e(aq,fbo),e(iy,gbo),e(yo,hbo),e(yo,dy),e(dy,ubo),e(dy,Die),e(Die,pbo),e(dy,_bo),e(yo,bbo),e(yo,Ue),M(cy,Ue,null),e(Ue,vbo),e(Ue,Gie),e(Gie,Fbo),e(Ue,Tbo),e(Ue,Ni),e(Ni,Mbo),e(Ni,Oie),e(Oie,Ebo),e(Ni,Cbo),e(Ni,Vie),e(Vie,wbo),e(Ni,Abo),e(Ue,Lbo),e(Ue,he),e(he,hu),e(hu,Xie),e(Xie,ybo),e(hu,xbo),e(hu,nq),e(nq,$bo),e(hu,kbo),e(he,Sbo),e(he,uu),e(uu,zie),e(zie,Rbo),e(uu,Pbo),e(uu,Qie),e(Qie,Bbo),e(uu,Ibo),e(he,Nbo),e(he,pu),e(pu,Wie),e(Wie,qbo),e(pu,jbo),e(pu,sq),e(sq,Dbo),e(pu,Gbo),e(he,Obo),e(he,_u),e(_u,Hie),e(Hie,Vbo),e(_u,Xbo),e(_u,lq),e(lq,zbo),e(_u,Qbo),e(he,Wbo),e(he,bu),e(bu,Uie),e(Uie,Hbo),e(bu,Ubo),e(bu,iq),e(iq,Jbo),e(bu,Ybo),e(he,Kbo),e(he,vu),e(vu,Jie),e(Jie,Zbo),e(vu,evo),e(vu,dq),e(dq,ovo),e(vu,rvo),e(he,tvo),e(he,Fu),e(Fu,Yie),e(Yie,avo),e(Fu,nvo),e(Fu,cq),e(cq,svo),e(Fu,lvo),e(he,ivo),e(he,Tu),e(Tu,Kie),e(Kie,dvo),e(Tu,cvo),e(Tu,mq),e(mq,mvo),e(Tu,fvo),e(he,gvo),e(he,Mu),e(Mu,Zie),e(Zie,hvo),e(Mu,uvo),e(Mu,fq),e(fq,pvo),e(Mu,_vo),e(he,bvo),e(he,Eu),e(Eu,ede),e(ede,vvo),e(Eu,Fvo),e(Eu,gq),e(gq,Tvo),e(Eu,Mvo),e(he,Evo),e(he,Cu),e(Cu,ode),e(ode,Cvo),e(Cu,wvo),e(Cu,hq),e(hq,Avo),e(Cu,Lvo),e(he,yvo),e(he,wu),e(wu,rde),e(rde,xvo),e(wu,$vo),e(wu,uq),e(uq,kvo),e(wu,Svo),e(he,Rvo),e(he,Au),e(Au,tde),e(tde,Pvo),e(Au,Bvo),e(Au,pq),e(pq,Ivo),e(Au,Nvo),e(he,qvo),e(he,Lu),e(Lu,ade),e(ade,jvo),e(Lu,Dvo),e(Lu,_q),e(_q,Gvo),e(Lu,Ovo),e(he,Vvo),e(he,yu),e(yu,nde),e(nde,Xvo),e(yu,zvo),e(yu,bq),e(bq,Qvo),e(yu,Wvo),e(he,Hvo),e(he,xu),e(xu,sde),e(sde,Uvo),e(xu,Jvo),e(xu,vq),e(vq,Yvo),e(xu,Kvo),e(he,Zvo),e(he,$u),e($u,lde),e(lde,e1o),e($u,o1o),e($u,Fq),e(Fq,r1o),e($u,t1o),e(he,a1o),e(he,ku),e(ku,ide),e(ide,n1o),e(ku,s1o),e(ku,Tq),e(Tq,l1o),e(ku,i1o),e(Ue,d1o),M(Su,Ue,null),e(Ue,c1o),M(Ru,Ue,null),e(yo,m1o),e(yo,Pu),M(my,Pu,null),e(Pu,f1o),e(Pu,dde),e(dde,g1o),b(m,XOe,_),b(m,qi,_),e(qi,Bu),e(Bu,cde),M(fy,cde,null),e(qi,h1o),e(qi,mde),e(mde,u1o),b(m,zOe,_),b(m,xo,_),M(gy,xo,null),e(xo,p1o),e(xo,ji),e(ji,_1o),e(ji,Mq),e(Mq,b1o),e(ji,v1o),e(ji,Eq),e(Eq,F1o),e(ji,T1o),e(xo,M1o),e(xo,hy),e(hy,E1o),e(hy,fde),e(fde,C1o),e(hy,w1o),e(xo,A1o),e(xo,st),M(uy,st,null),e(st,L1o),e(st,gde),e(gde,y1o),e(st,x1o),e(st,Di),e(Di,$1o),e(Di,hde),e(hde,k1o),e(Di,S1o),e(Di,Cq),e(Cq,R1o),e(Di,P1o),e(st,B1o),M(Iu,st,null),e(xo,I1o),e(xo,Je),M(py,Je,null),e(Je,N1o),e(Je,ude),e(ude,q1o),e(Je,j1o),e(Je,Pa),e(Pa,D1o),e(Pa,pde),e(pde,G1o),e(Pa,O1o),e(Pa,_de),e(_de,V1o),e(Pa,X1o),e(Pa,bde),e(bde,z1o),e(Pa,Q1o),e(Je,W1o),e(Je,y),e(y,Nu),e(Nu,vde),e(vde,H1o),e(Nu,U1o),e(Nu,wq),e(wq,J1o),e(Nu,Y1o),e(y,K1o),e(y,qu),e(qu,Fde),e(Fde,Z1o),e(qu,eFo),e(qu,Aq),e(Aq,oFo),e(qu,rFo),e(y,tFo),e(y,ju),e(ju,Tde),e(Tde,aFo),e(ju,nFo),e(ju,Lq),e(Lq,sFo),e(ju,lFo),e(y,iFo),e(y,Du),e(Du,Mde),e(Mde,dFo),e(Du,cFo),e(Du,yq),e(yq,mFo),e(Du,fFo),e(y,gFo),e(y,Gu),e(Gu,Ede),e(Ede,hFo),e(Gu,uFo),e(Gu,xq),e(xq,pFo),e(Gu,_Fo),e(y,bFo),e(y,Ou),e(Ou,Cde),e(Cde,vFo),e(Ou,FFo),e(Ou,$q),e($q,TFo),e(Ou,MFo),e(y,EFo),e(y,Vu),e(Vu,wde),e(wde,CFo),e(Vu,wFo),e(Vu,kq),e(kq,AFo),e(Vu,LFo),e(y,yFo),e(y,Xu),e(Xu,Ade),e(Ade,xFo),e(Xu,$Fo),e(Xu,Sq),e(Sq,kFo),e(Xu,SFo),e(y,RFo),e(y,zu),e(zu,Lde),e(Lde,PFo),e(zu,BFo),e(zu,Rq),e(Rq,IFo),e(zu,NFo),e(y,qFo),e(y,Qu),e(Qu,yde),e(yde,jFo),e(Qu,DFo),e(Qu,Pq),e(Pq,GFo),e(Qu,OFo),e(y,VFo),e(y,Wu),e(Wu,xde),e(xde,XFo),e(Wu,zFo),e(Wu,Bq),e(Bq,QFo),e(Wu,WFo),e(y,HFo),e(y,Hu),e(Hu,$de),e($de,UFo),e(Hu,JFo),e(Hu,Iq),e(Iq,YFo),e(Hu,KFo),e(y,ZFo),e(y,Uu),e(Uu,kde),e(kde,eTo),e(Uu,oTo),e(Uu,Nq),e(Nq,rTo),e(Uu,tTo),e(y,aTo),e(y,Ju),e(Ju,Sde),e(Sde,nTo),e(Ju,sTo),e(Ju,qq),e(qq,lTo),e(Ju,iTo),e(y,dTo),e(y,Yu),e(Yu,Rde),e(Rde,cTo),e(Yu,mTo),e(Yu,jq),e(jq,fTo),e(Yu,gTo),e(y,hTo),e(y,Ku),e(Ku,Pde),e(Pde,uTo),e(Ku,pTo),e(Ku,Dq),e(Dq,_To),e(Ku,bTo),e(y,vTo),e(y,Zu),e(Zu,Bde),e(Bde,FTo),e(Zu,TTo),e(Zu,Gq),e(Gq,MTo),e(Zu,ETo),e(y,CTo),e(y,ep),e(ep,Ide),e(Ide,wTo),e(ep,ATo),e(ep,Oq),e(Oq,LTo),e(ep,yTo),e(y,xTo),e(y,op),e(op,Nde),e(Nde,$To),e(op,kTo),e(op,Vq),e(Vq,STo),e(op,RTo),e(y,PTo),e(y,rp),e(rp,qde),e(qde,BTo),e(rp,ITo),e(rp,Xq),e(Xq,NTo),e(rp,qTo),e(y,jTo),e(y,tp),e(tp,jde),e(jde,DTo),e(tp,GTo),e(tp,zq),e(zq,OTo),e(tp,VTo),e(y,XTo),e(y,ap),e(ap,Dde),e(Dde,zTo),e(ap,QTo),e(ap,Qq),e(Qq,WTo),e(ap,HTo),e(y,UTo),e(y,np),e(np,Gde),e(Gde,JTo),e(np,YTo),e(np,Wq),e(Wq,KTo),e(np,ZTo),e(y,eMo),e(y,sp),e(sp,Ode),e(Ode,oMo),e(sp,rMo),e(sp,Hq),e(Hq,tMo),e(sp,aMo),e(y,nMo),e(y,lp),e(lp,Vde),e(Vde,sMo),e(lp,lMo),e(lp,Uq),e(Uq,iMo),e(lp,dMo),e(y,cMo),e(y,ip),e(ip,Xde),e(Xde,mMo),e(ip,fMo),e(ip,Jq),e(Jq,gMo),e(ip,hMo),e(y,uMo),e(y,dp),e(dp,zde),e(zde,pMo),e(dp,_Mo),e(dp,Yq),e(Yq,bMo),e(dp,vMo),e(y,FMo),e(y,cp),e(cp,Qde),e(Qde,TMo),e(cp,MMo),e(cp,Kq),e(Kq,EMo),e(cp,CMo),e(y,wMo),e(y,mp),e(mp,Wde),e(Wde,AMo),e(mp,LMo),e(mp,Zq),e(Zq,yMo),e(mp,xMo),e(y,$Mo),e(y,fp),e(fp,Hde),e(Hde,kMo),e(fp,SMo),e(fp,ej),e(ej,RMo),e(fp,PMo),e(y,BMo),e(y,gp),e(gp,Ude),e(Ude,IMo),e(gp,NMo),e(gp,oj),e(oj,qMo),e(gp,jMo),e(y,DMo),e(y,hp),e(hp,Jde),e(Jde,GMo),e(hp,OMo),e(hp,rj),e(rj,VMo),e(hp,XMo),e(y,zMo),e(y,up),e(up,Yde),e(Yde,QMo),e(up,WMo),e(up,tj),e(tj,HMo),e(up,UMo),e(y,JMo),e(y,pp),e(pp,Kde),e(Kde,YMo),e(pp,KMo),e(pp,aj),e(aj,ZMo),e(pp,e4o),e(y,o4o),e(y,zs),e(zs,Zde),e(Zde,r4o),e(zs,t4o),e(zs,nj),e(nj,a4o),e(zs,n4o),e(zs,sj),e(sj,s4o),e(zs,l4o),e(y,i4o),e(y,_p),e(_p,ece),e(ece,d4o),e(_p,c4o),e(_p,lj),e(lj,m4o),e(_p,f4o),e(y,g4o),e(y,bp),e(bp,oce),e(oce,h4o),e(bp,u4o),e(bp,ij),e(ij,p4o),e(bp,_4o),e(y,b4o),e(y,vp),e(vp,rce),e(rce,v4o),e(vp,F4o),e(vp,dj),e(dj,T4o),e(vp,M4o),e(y,E4o),e(y,Fp),e(Fp,tce),e(tce,C4o),e(Fp,w4o),e(Fp,cj),e(cj,A4o),e(Fp,L4o),e(y,y4o),e(y,Tp),e(Tp,ace),e(ace,x4o),e(Tp,$4o),e(Tp,mj),e(mj,k4o),e(Tp,S4o),e(y,R4o),e(y,Mp),e(Mp,nce),e(nce,P4o),e(Mp,B4o),e(Mp,fj),e(fj,I4o),e(Mp,N4o),e(y,q4o),e(y,Ep),e(Ep,sce),e(sce,j4o),e(Ep,D4o),e(Ep,gj),e(gj,G4o),e(Ep,O4o),e(y,V4o),e(y,Cp),e(Cp,lce),e(lce,X4o),e(Cp,z4o),e(Cp,hj),e(hj,Q4o),e(Cp,W4o),e(y,H4o),e(y,wp),e(wp,ice),e(ice,U4o),e(wp,J4o),e(wp,uj),e(uj,Y4o),e(wp,K4o),e(y,Z4o),e(y,Ap),e(Ap,dce),e(dce,eEo),e(Ap,oEo),e(Ap,pj),e(pj,rEo),e(Ap,tEo),e(y,aEo),e(y,Lp),e(Lp,cce),e(cce,nEo),e(Lp,sEo),e(Lp,_j),e(_j,lEo),e(Lp,iEo),e(y,dEo),e(y,yp),e(yp,mce),e(mce,cEo),e(yp,mEo),e(yp,bj),e(bj,fEo),e(yp,gEo),e(y,hEo),e(y,xp),e(xp,fce),e(fce,uEo),e(xp,pEo),e(xp,vj),e(vj,_Eo),e(xp,bEo),e(y,vEo),e(y,$p),e($p,gce),e(gce,FEo),e($p,TEo),e($p,Fj),e(Fj,MEo),e($p,EEo),e(y,CEo),e(y,kp),e(kp,hce),e(hce,wEo),e(kp,AEo),e(kp,Tj),e(Tj,LEo),e(kp,yEo),e(y,xEo),e(y,Sp),e(Sp,uce),e(uce,$Eo),e(Sp,kEo),e(Sp,Mj),e(Mj,SEo),e(Sp,REo),e(y,PEo),e(y,Rp),e(Rp,pce),e(pce,BEo),e(Rp,IEo),e(Rp,Ej),e(Ej,NEo),e(Rp,qEo),e(y,jEo),e(y,Pp),e(Pp,_ce),e(_ce,DEo),e(Pp,GEo),e(Pp,Cj),e(Cj,OEo),e(Pp,VEo),e(y,XEo),e(y,Bp),e(Bp,bce),e(bce,zEo),e(Bp,QEo),e(Bp,wj),e(wj,WEo),e(Bp,HEo),e(y,UEo),e(y,Ip),e(Ip,vce),e(vce,JEo),e(Ip,YEo),e(Ip,Aj),e(Aj,KEo),e(Ip,ZEo),e(y,eCo),e(y,Np),e(Np,Fce),e(Fce,oCo),e(Np,rCo),e(Np,Lj),e(Lj,tCo),e(Np,aCo),e(y,nCo),e(y,qp),e(qp,Tce),e(Tce,sCo),e(qp,lCo),e(qp,yj),e(yj,iCo),e(qp,dCo),e(y,cCo),e(y,jp),e(jp,Mce),e(Mce,mCo),e(jp,fCo),e(jp,xj),e(xj,gCo),e(jp,hCo),e(y,uCo),e(y,Dp),e(Dp,Ece),e(Ece,pCo),e(Dp,_Co),e(Dp,$j),e($j,bCo),e(Dp,vCo),e(y,FCo),e(y,Gp),e(Gp,Cce),e(Cce,TCo),e(Gp,MCo),e(Gp,kj),e(kj,ECo),e(Gp,CCo),e(y,wCo),e(y,Op),e(Op,wce),e(wce,ACo),e(Op,LCo),e(Op,Sj),e(Sj,yCo),e(Op,xCo),e(y,$Co),e(y,Vp),e(Vp,Ace),e(Ace,kCo),e(Vp,SCo),e(Vp,Rj),e(Rj,RCo),e(Vp,PCo),e(y,BCo),e(y,Xp),e(Xp,Lce),e(Lce,ICo),e(Xp,NCo),e(Xp,Pj),e(Pj,qCo),e(Xp,jCo),e(y,DCo),e(y,zp),e(zp,yce),e(yce,GCo),e(zp,OCo),e(zp,Bj),e(Bj,VCo),e(zp,XCo),e(y,zCo),e(y,Qp),e(Qp,xce),e(xce,QCo),e(Qp,WCo),e(Qp,Ij),e(Ij,HCo),e(Qp,UCo),e(y,JCo),e(y,Wp),e(Wp,$ce),e($ce,YCo),e(Wp,KCo),e(Wp,Nj),e(Nj,ZCo),e(Wp,e3o),e(y,o3o),e(y,Hp),e(Hp,kce),e(kce,r3o),e(Hp,t3o),e(Hp,qj),e(qj,a3o),e(Hp,n3o),e(y,s3o),e(y,Up),e(Up,Sce),e(Sce,l3o),e(Up,i3o),e(Up,jj),e(jj,d3o),e(Up,c3o),e(y,m3o),e(y,Jp),e(Jp,Rce),e(Rce,f3o),e(Jp,g3o),e(Jp,Dj),e(Dj,h3o),e(Jp,u3o),e(y,p3o),e(y,Yp),e(Yp,Pce),e(Pce,_3o),e(Yp,b3o),e(Yp,Gj),e(Gj,v3o),e(Yp,F3o),e(y,T3o),e(y,Kp),e(Kp,Bce),e(Bce,M3o),e(Kp,E3o),e(Kp,Oj),e(Oj,C3o),e(Kp,w3o),e(y,A3o),e(y,Zp),e(Zp,Ice),e(Ice,L3o),e(Zp,y3o),e(Zp,Vj),e(Vj,x3o),e(Zp,$3o),e(y,k3o),e(y,e_),e(e_,Nce),e(Nce,S3o),e(e_,R3o),e(e_,Xj),e(Xj,P3o),e(e_,B3o),e(y,I3o),e(y,o_),e(o_,qce),e(qce,N3o),e(o_,q3o),e(o_,zj),e(zj,j3o),e(o_,D3o),e(y,G3o),e(y,r_),e(r_,jce),e(jce,O3o),e(r_,V3o),e(r_,Qj),e(Qj,X3o),e(r_,z3o),e(y,Q3o),e(y,t_),e(t_,Dce),e(Dce,W3o),e(t_,H3o),e(t_,Wj),e(Wj,U3o),e(t_,J3o),e(y,Y3o),e(y,a_),e(a_,Gce),e(Gce,K3o),e(a_,Z3o),e(a_,Hj),e(Hj,e5o),e(a_,o5o),e(y,r5o),e(y,n_),e(n_,Oce),e(Oce,t5o),e(n_,a5o),e(n_,Uj),e(Uj,n5o),e(n_,s5o),e(y,l5o),e(y,s_),e(s_,Vce),e(Vce,i5o),e(s_,d5o),e(s_,Jj),e(Jj,c5o),e(s_,m5o),e(y,f5o),e(y,l_),e(l_,Xce),e(Xce,g5o),e(l_,h5o),e(l_,Yj),e(Yj,u5o),e(l_,p5o),e(y,_5o),e(y,i_),e(i_,zce),e(zce,b5o),e(i_,v5o),e(i_,Kj),e(Kj,F5o),e(i_,T5o),e(y,M5o),e(y,d_),e(d_,Qce),e(Qce,E5o),e(d_,C5o),e(d_,Zj),e(Zj,w5o),e(d_,A5o),e(y,L5o),e(y,c_),e(c_,Wce),e(Wce,y5o),e(c_,x5o),e(c_,eD),e(eD,$5o),e(c_,k5o),e(y,S5o),e(y,m_),e(m_,Hce),e(Hce,R5o),e(m_,P5o),e(m_,oD),e(oD,B5o),e(m_,I5o),e(y,N5o),e(y,f_),e(f_,Uce),e(Uce,q5o),e(f_,j5o),e(f_,rD),e(rD,D5o),e(f_,G5o),e(y,O5o),e(y,g_),e(g_,Jce),e(Jce,V5o),e(g_,X5o),e(g_,tD),e(tD,z5o),e(g_,Q5o),e(y,W5o),e(y,h_),e(h_,Yce),e(Yce,H5o),e(h_,U5o),e(h_,aD),e(aD,J5o),e(h_,Y5o),e(y,K5o),e(y,u_),e(u_,Kce),e(Kce,Z5o),e(u_,e0o),e(u_,nD),e(nD,o0o),e(u_,r0o),e(y,t0o),e(y,p_),e(p_,Zce),e(Zce,a0o),e(p_,n0o),e(p_,sD),e(sD,s0o),e(p_,l0o),e(y,i0o),e(y,__),e(__,eme),e(eme,d0o),e(__,c0o),e(__,lD),e(lD,m0o),e(__,f0o),e(y,g0o),e(y,b_),e(b_,ome),e(ome,h0o),e(b_,u0o),e(b_,iD),e(iD,p0o),e(b_,_0o),e(y,b0o),e(y,v_),e(v_,rme),e(rme,v0o),e(v_,F0o),e(v_,dD),e(dD,T0o),e(v_,M0o),e(y,E0o),e(y,F_),e(F_,tme),e(tme,C0o),e(F_,w0o),e(F_,cD),e(cD,A0o),e(F_,L0o),e(y,y0o),e(y,T_),e(T_,ame),e(ame,x0o),e(T_,$0o),e(T_,mD),e(mD,k0o),e(T_,S0o),e(y,R0o),e(y,M_),e(M_,nme),e(nme,P0o),e(M_,B0o),e(M_,fD),e(fD,I0o),e(M_,N0o),e(y,q0o),e(y,E_),e(E_,sme),e(sme,j0o),e(E_,D0o),e(E_,gD),e(gD,G0o),e(E_,O0o),e(y,V0o),e(y,C_),e(C_,lme),e(lme,X0o),e(C_,z0o),e(C_,hD),e(hD,Q0o),e(C_,W0o),e(y,H0o),e(y,w_),e(w_,ime),e(ime,U0o),e(w_,J0o),e(w_,uD),e(uD,Y0o),e(w_,K0o),e(y,Z0o),e(y,A_),e(A_,dme),e(dme,ewo),e(A_,owo),e(A_,pD),e(pD,rwo),e(A_,two),e(y,awo),e(y,L_),e(L_,cme),e(cme,nwo),e(L_,swo),e(L_,_D),e(_D,lwo),e(L_,iwo),e(y,dwo),e(y,y_),e(y_,mme),e(mme,cwo),e(y_,mwo),e(y_,bD),e(bD,fwo),e(y_,gwo),e(y,hwo),e(y,x_),e(x_,fme),e(fme,uwo),e(x_,pwo),e(x_,vD),e(vD,_wo),e(x_,bwo),e(y,vwo),e(y,$_),e($_,gme),e(gme,Fwo),e($_,Two),e($_,FD),e(FD,Mwo),e($_,Ewo),e(y,Cwo),e(y,k_),e(k_,hme),e(hme,wwo),e(k_,Awo),e(k_,TD),e(TD,Lwo),e(k_,ywo),e(y,xwo),e(y,S_),e(S_,ume),e(ume,$wo),e(S_,kwo),e(S_,MD),e(MD,Swo),e(S_,Rwo),e(y,Pwo),e(y,R_),e(R_,pme),e(pme,Bwo),e(R_,Iwo),e(R_,ED),e(ED,Nwo),e(R_,qwo),e(y,jwo),e(y,P_),e(P_,_me),e(_me,Dwo),e(P_,Gwo),e(P_,CD),e(CD,Owo),e(P_,Vwo),e(y,Xwo),e(y,B_),e(B_,bme),e(bme,zwo),e(B_,Qwo),e(B_,wD),e(wD,Wwo),e(B_,Hwo),e(y,Uwo),e(y,I_),e(I_,vme),e(vme,Jwo),e(I_,Ywo),e(I_,AD),e(AD,Kwo),e(I_,Zwo),e(Je,eAo),e(Je,N_),e(N_,oAo),e(N_,Fme),e(Fme,rAo),e(N_,tAo),e(N_,Tme),e(Tme,aAo),e(Je,nAo),M(q_,Je,null),b(m,QOe,_),b(m,Gi,_),e(Gi,j_),e(j_,Mme),M(_y,Mme,null),e(Gi,sAo),e(Gi,Eme),e(Eme,lAo),b(m,WOe,_),b(m,$o,_),M(by,$o,null),e($o,iAo),e($o,Oi),e(Oi,dAo),e(Oi,LD),e(LD,cAo),e(Oi,mAo),e(Oi,yD),e(yD,fAo),e(Oi,gAo),e($o,hAo),e($o,vy),e(vy,uAo),e(vy,Cme),e(Cme,pAo),e(vy,_Ao),e($o,bAo),e($o,lt),M(Fy,lt,null),e(lt,vAo),e(lt,wme),e(wme,FAo),e(lt,TAo),e(lt,Vi),e(Vi,MAo),e(Vi,Ame),e(Ame,EAo),e(Vi,CAo),e(Vi,xD),e(xD,wAo),e(Vi,AAo),e(lt,LAo),M(D_,lt,null),e($o,yAo),e($o,Ye),M(Ty,Ye,null),e(Ye,xAo),e(Ye,Lme),e(Lme,$Ao),e(Ye,kAo),e(Ye,Ba),e(Ba,SAo),e(Ba,yme),e(yme,RAo),e(Ba,PAo),e(Ba,xme),e(xme,BAo),e(Ba,IAo),e(Ba,$me),e($me,NAo),e(Ba,qAo),e(Ye,jAo),e(Ye,G),e(G,G_),e(G_,kme),e(kme,DAo),e(G_,GAo),e(G_,$D),e($D,OAo),e(G_,VAo),e(G,XAo),e(G,O_),e(O_,Sme),e(Sme,zAo),e(O_,QAo),e(O_,kD),e(kD,WAo),e(O_,HAo),e(G,UAo),e(G,V_),e(V_,Rme),e(Rme,JAo),e(V_,YAo),e(V_,SD),e(SD,KAo),e(V_,ZAo),e(G,e6o),e(G,X_),e(X_,Pme),e(Pme,o6o),e(X_,r6o),e(X_,RD),e(RD,t6o),e(X_,a6o),e(G,n6o),e(G,z_),e(z_,Bme),e(Bme,s6o),e(z_,l6o),e(z_,PD),e(PD,i6o),e(z_,d6o),e(G,c6o),e(G,Q_),e(Q_,Ime),e(Ime,m6o),e(Q_,f6o),e(Q_,BD),e(BD,g6o),e(Q_,h6o),e(G,u6o),e(G,W_),e(W_,Nme),e(Nme,p6o),e(W_,_6o),e(W_,ID),e(ID,b6o),e(W_,v6o),e(G,F6o),e(G,H_),e(H_,qme),e(qme,T6o),e(H_,M6o),e(H_,ND),e(ND,E6o),e(H_,C6o),e(G,w6o),e(G,U_),e(U_,jme),e(jme,A6o),e(U_,L6o),e(U_,qD),e(qD,y6o),e(U_,x6o),e(G,$6o),e(G,J_),e(J_,Dme),e(Dme,k6o),e(J_,S6o),e(J_,jD),e(jD,R6o),e(J_,P6o),e(G,B6o),e(G,Y_),e(Y_,Gme),e(Gme,I6o),e(Y_,N6o),e(Y_,DD),e(DD,q6o),e(Y_,j6o),e(G,D6o),e(G,K_),e(K_,Ome),e(Ome,G6o),e(K_,O6o),e(K_,GD),e(GD,V6o),e(K_,X6o),e(G,z6o),e(G,Z_),e(Z_,Vme),e(Vme,Q6o),e(Z_,W6o),e(Z_,OD),e(OD,H6o),e(Z_,U6o),e(G,J6o),e(G,e2),e(e2,Xme),e(Xme,Y6o),e(e2,K6o),e(e2,VD),e(VD,Z6o),e(e2,eLo),e(G,oLo),e(G,o2),e(o2,zme),e(zme,rLo),e(o2,tLo),e(o2,XD),e(XD,aLo),e(o2,nLo),e(G,sLo),e(G,r2),e(r2,Qme),e(Qme,lLo),e(r2,iLo),e(r2,zD),e(zD,dLo),e(r2,cLo),e(G,mLo),e(G,t2),e(t2,Wme),e(Wme,fLo),e(t2,gLo),e(t2,QD),e(QD,hLo),e(t2,uLo),e(G,pLo),e(G,a2),e(a2,Hme),e(Hme,_Lo),e(a2,bLo),e(a2,WD),e(WD,vLo),e(a2,FLo),e(G,TLo),e(G,n2),e(n2,Ume),e(Ume,MLo),e(n2,ELo),e(n2,HD),e(HD,CLo),e(n2,wLo),e(G,ALo),e(G,s2),e(s2,Jme),e(Jme,LLo),e(s2,yLo),e(s2,UD),e(UD,xLo),e(s2,$Lo),e(G,kLo),e(G,l2),e(l2,Yme),e(Yme,SLo),e(l2,RLo),e(l2,JD),e(JD,PLo),e(l2,BLo),e(G,ILo),e(G,i2),e(i2,Kme),e(Kme,NLo),e(i2,qLo),e(i2,YD),e(YD,jLo),e(i2,DLo),e(G,GLo),e(G,d2),e(d2,Zme),e(Zme,OLo),e(d2,VLo),e(d2,KD),e(KD,XLo),e(d2,zLo),e(G,QLo),e(G,c2),e(c2,efe),e(efe,WLo),e(c2,HLo),e(c2,ZD),e(ZD,ULo),e(c2,JLo),e(G,YLo),e(G,m2),e(m2,ofe),e(ofe,KLo),e(m2,ZLo),e(m2,eG),e(eG,e7o),e(m2,o7o),e(G,r7o),e(G,f2),e(f2,rfe),e(rfe,t7o),e(f2,a7o),e(f2,oG),e(oG,n7o),e(f2,s7o),e(G,l7o),e(G,g2),e(g2,tfe),e(tfe,i7o),e(g2,d7o),e(g2,rG),e(rG,c7o),e(g2,m7o),e(G,f7o),e(G,h2),e(h2,afe),e(afe,g7o),e(h2,h7o),e(h2,tG),e(tG,u7o),e(h2,p7o),e(G,_7o),e(G,u2),e(u2,nfe),e(nfe,b7o),e(u2,v7o),e(u2,aG),e(aG,F7o),e(u2,T7o),e(G,M7o),e(G,p2),e(p2,sfe),e(sfe,E7o),e(p2,C7o),e(p2,nG),e(nG,w7o),e(p2,A7o),e(G,L7o),e(G,_2),e(_2,lfe),e(lfe,y7o),e(_2,x7o),e(_2,sG),e(sG,$7o),e(_2,k7o),e(G,S7o),e(G,b2),e(b2,ife),e(ife,R7o),e(b2,P7o),e(b2,lG),e(lG,B7o),e(b2,I7o),e(G,N7o),e(G,v2),e(v2,dfe),e(dfe,q7o),e(v2,j7o),e(v2,iG),e(iG,D7o),e(v2,G7o),e(G,O7o),e(G,F2),e(F2,cfe),e(cfe,V7o),e(F2,X7o),e(F2,dG),e(dG,z7o),e(F2,Q7o),e(G,W7o),e(G,T2),e(T2,mfe),e(mfe,H7o),e(T2,U7o),e(T2,cG),e(cG,J7o),e(T2,Y7o),e(G,K7o),e(G,M2),e(M2,ffe),e(ffe,Z7o),e(M2,eyo),e(M2,mG),e(mG,oyo),e(M2,ryo),e(G,tyo),e(G,E2),e(E2,gfe),e(gfe,ayo),e(E2,nyo),e(E2,fG),e(fG,syo),e(E2,lyo),e(G,iyo),e(G,C2),e(C2,hfe),e(hfe,dyo),e(C2,cyo),e(C2,gG),e(gG,myo),e(C2,fyo),e(G,gyo),e(G,w2),e(w2,ufe),e(ufe,hyo),e(w2,uyo),e(w2,hG),e(hG,pyo),e(w2,_yo),e(G,byo),e(G,A2),e(A2,pfe),e(pfe,vyo),e(A2,Fyo),e(A2,uG),e(uG,Tyo),e(A2,Myo),e(G,Eyo),e(G,L2),e(L2,_fe),e(_fe,Cyo),e(L2,wyo),e(L2,pG),e(pG,Ayo),e(L2,Lyo),e(G,yyo),e(G,y2),e(y2,bfe),e(bfe,xyo),e(y2,$yo),e(y2,_G),e(_G,kyo),e(y2,Syo),e(G,Ryo),e(G,x2),e(x2,vfe),e(vfe,Pyo),e(x2,Byo),e(x2,bG),e(bG,Iyo),e(x2,Nyo),e(G,qyo),e(G,$2),e($2,Ffe),e(Ffe,jyo),e($2,Dyo),e($2,vG),e(vG,Gyo),e($2,Oyo),e(Ye,Vyo),e(Ye,k2),e(k2,Xyo),e(k2,Tfe),e(Tfe,zyo),e(k2,Qyo),e(k2,Mfe),e(Mfe,Wyo),e(Ye,Hyo),M(S2,Ye,null),b(m,HOe,_),b(m,Xi,_),e(Xi,R2),e(R2,Efe),M(My,Efe,null),e(Xi,Uyo),e(Xi,Cfe),e(Cfe,Jyo),b(m,UOe,_),b(m,ko,_),M(Ey,ko,null),e(ko,Yyo),e(ko,zi),e(zi,Kyo),e(zi,FG),e(FG,Zyo),e(zi,e8o),e(zi,TG),e(TG,o8o),e(zi,r8o),e(ko,t8o),e(ko,Cy),e(Cy,a8o),e(Cy,wfe),e(wfe,n8o),e(Cy,s8o),e(ko,l8o),e(ko,it),M(wy,it,null),e(it,i8o),e(it,Afe),e(Afe,d8o),e(it,c8o),e(it,Qi),e(Qi,m8o),e(Qi,Lfe),e(Lfe,f8o),e(Qi,g8o),e(Qi,MG),e(MG,h8o),e(Qi,u8o),e(it,p8o),M(P2,it,null),e(ko,_8o),e(ko,Ke),M(Ay,Ke,null),e(Ke,b8o),e(Ke,yfe),e(yfe,v8o),e(Ke,F8o),e(Ke,Ia),e(Ia,T8o),e(Ia,xfe),e(xfe,M8o),e(Ia,E8o),e(Ia,$fe),e($fe,C8o),e(Ia,w8o),e(Ia,kfe),e(kfe,A8o),e(Ia,L8o),e(Ke,y8o),e(Ke,z),e(z,B2),e(B2,Sfe),e(Sfe,x8o),e(B2,$8o),e(B2,EG),e(EG,k8o),e(B2,S8o),e(z,R8o),e(z,I2),e(I2,Rfe),e(Rfe,P8o),e(I2,B8o),e(I2,CG),e(CG,I8o),e(I2,N8o),e(z,q8o),e(z,N2),e(N2,Pfe),e(Pfe,j8o),e(N2,D8o),e(N2,wG),e(wG,G8o),e(N2,O8o),e(z,V8o),e(z,q2),e(q2,Bfe),e(Bfe,X8o),e(q2,z8o),e(q2,AG),e(AG,Q8o),e(q2,W8o),e(z,H8o),e(z,j2),e(j2,Ife),e(Ife,U8o),e(j2,J8o),e(j2,LG),e(LG,Y8o),e(j2,K8o),e(z,Z8o),e(z,D2),e(D2,Nfe),e(Nfe,e9o),e(D2,o9o),e(D2,yG),e(yG,r9o),e(D2,t9o),e(z,a9o),e(z,G2),e(G2,qfe),e(qfe,n9o),e(G2,s9o),e(G2,xG),e(xG,l9o),e(G2,i9o),e(z,d9o),e(z,O2),e(O2,jfe),e(jfe,c9o),e(O2,m9o),e(O2,$G),e($G,f9o),e(O2,g9o),e(z,h9o),e(z,V2),e(V2,Dfe),e(Dfe,u9o),e(V2,p9o),e(V2,kG),e(kG,_9o),e(V2,b9o),e(z,v9o),e(z,X2),e(X2,Gfe),e(Gfe,F9o),e(X2,T9o),e(X2,SG),e(SG,M9o),e(X2,E9o),e(z,C9o),e(z,z2),e(z2,Ofe),e(Ofe,w9o),e(z2,A9o),e(z2,RG),e(RG,L9o),e(z2,y9o),e(z,x9o),e(z,Q2),e(Q2,Vfe),e(Vfe,$9o),e(Q2,k9o),e(Q2,PG),e(PG,S9o),e(Q2,R9o),e(z,P9o),e(z,W2),e(W2,Xfe),e(Xfe,B9o),e(W2,I9o),e(W2,BG),e(BG,N9o),e(W2,q9o),e(z,j9o),e(z,H2),e(H2,zfe),e(zfe,D9o),e(H2,G9o),e(H2,IG),e(IG,O9o),e(H2,V9o),e(z,X9o),e(z,U2),e(U2,Qfe),e(Qfe,z9o),e(U2,Q9o),e(U2,NG),e(NG,W9o),e(U2,H9o),e(z,U9o),e(z,J2),e(J2,Wfe),e(Wfe,J9o),e(J2,Y9o),e(J2,qG),e(qG,K9o),e(J2,Z9o),e(z,exo),e(z,Y2),e(Y2,Hfe),e(Hfe,oxo),e(Y2,rxo),e(Y2,jG),e(jG,txo),e(Y2,axo),e(z,nxo),e(z,K2),e(K2,Ufe),e(Ufe,sxo),e(K2,lxo),e(K2,DG),e(DG,ixo),e(K2,dxo),e(z,cxo),e(z,Z2),e(Z2,Jfe),e(Jfe,mxo),e(Z2,fxo),e(Z2,GG),e(GG,gxo),e(Z2,hxo),e(z,uxo),e(z,eb),e(eb,Yfe),e(Yfe,pxo),e(eb,_xo),e(eb,OG),e(OG,bxo),e(eb,vxo),e(z,Fxo),e(z,ob),e(ob,Kfe),e(Kfe,Txo),e(ob,Mxo),e(ob,VG),e(VG,Exo),e(ob,Cxo),e(z,wxo),e(z,rb),e(rb,Zfe),e(Zfe,Axo),e(rb,Lxo),e(rb,XG),e(XG,yxo),e(rb,xxo),e(z,$xo),e(z,tb),e(tb,ege),e(ege,kxo),e(tb,Sxo),e(tb,zG),e(zG,Rxo),e(tb,Pxo),e(z,Bxo),e(z,ab),e(ab,oge),e(oge,Ixo),e(ab,Nxo),e(ab,QG),e(QG,qxo),e(ab,jxo),e(z,Dxo),e(z,nb),e(nb,rge),e(rge,Gxo),e(nb,Oxo),e(nb,WG),e(WG,Vxo),e(nb,Xxo),e(z,zxo),e(z,sb),e(sb,tge),e(tge,Qxo),e(sb,Wxo),e(sb,HG),e(HG,Hxo),e(sb,Uxo),e(z,Jxo),e(z,lb),e(lb,age),e(age,Yxo),e(lb,Kxo),e(lb,UG),e(UG,Zxo),e(lb,e$o),e(z,o$o),e(z,ib),e(ib,nge),e(nge,r$o),e(ib,t$o),e(ib,JG),e(JG,a$o),e(ib,n$o),e(z,s$o),e(z,db),e(db,sge),e(sge,l$o),e(db,i$o),e(db,YG),e(YG,d$o),e(db,c$o),e(z,m$o),e(z,cb),e(cb,lge),e(lge,f$o),e(cb,g$o),e(cb,KG),e(KG,h$o),e(cb,u$o),e(z,p$o),e(z,mb),e(mb,ige),e(ige,_$o),e(mb,b$o),e(mb,ZG),e(ZG,v$o),e(mb,F$o),e(z,T$o),e(z,fb),e(fb,dge),e(dge,M$o),e(fb,E$o),e(fb,eO),e(eO,C$o),e(fb,w$o),e(z,A$o),e(z,gb),e(gb,cge),e(cge,L$o),e(gb,y$o),e(gb,oO),e(oO,x$o),e(gb,$$o),e(z,k$o),e(z,hb),e(hb,mge),e(mge,S$o),e(hb,R$o),e(hb,rO),e(rO,P$o),e(hb,B$o),e(z,I$o),e(z,ub),e(ub,fge),e(fge,N$o),e(ub,q$o),e(ub,tO),e(tO,j$o),e(ub,D$o),e(z,G$o),e(z,pb),e(pb,gge),e(gge,O$o),e(pb,V$o),e(pb,aO),e(aO,X$o),e(pb,z$o),e(z,Q$o),e(z,_b),e(_b,hge),e(hge,W$o),e(_b,H$o),e(_b,nO),e(nO,U$o),e(_b,J$o),e(z,Y$o),e(z,bb),e(bb,uge),e(uge,K$o),e(bb,Z$o),e(bb,sO),e(sO,eko),e(bb,oko),e(z,rko),e(z,vb),e(vb,pge),e(pge,tko),e(vb,ako),e(vb,lO),e(lO,nko),e(vb,sko),e(Ke,lko),e(Ke,Fb),e(Fb,iko),e(Fb,_ge),e(_ge,dko),e(Fb,cko),e(Fb,bge),e(bge,mko),e(Ke,fko),M(Tb,Ke,null),b(m,JOe,_),b(m,Wi,_),e(Wi,Mb),e(Mb,vge),M(Ly,vge,null),e(Wi,gko),e(Wi,Fge),e(Fge,hko),b(m,YOe,_),b(m,So,_),M(yy,So,null),e(So,uko),e(So,Hi),e(Hi,pko),e(Hi,iO),e(iO,_ko),e(Hi,bko),e(Hi,dO),e(dO,vko),e(Hi,Fko),e(So,Tko),e(So,xy),e(xy,Mko),e(xy,Tge),e(Tge,Eko),e(xy,Cko),e(So,wko),e(So,dt),M($y,dt,null),e(dt,Ako),e(dt,Mge),e(Mge,Lko),e(dt,yko),e(dt,Ui),e(Ui,xko),e(Ui,Ege),e(Ege,$ko),e(Ui,kko),e(Ui,cO),e(cO,Sko),e(Ui,Rko),e(dt,Pko),M(Eb,dt,null),e(So,Bko),e(So,Ze),M(ky,Ze,null),e(Ze,Iko),e(Ze,Cge),e(Cge,Nko),e(Ze,qko),e(Ze,Na),e(Na,jko),e(Na,wge),e(wge,Dko),e(Na,Gko),e(Na,Age),e(Age,Oko),e(Na,Vko),e(Na,Lge),e(Lge,Xko),e(Na,zko),e(Ze,Qko),e(Ze,W),e(W,Cb),e(Cb,yge),e(yge,Wko),e(Cb,Hko),e(Cb,mO),e(mO,Uko),e(Cb,Jko),e(W,Yko),e(W,wb),e(wb,xge),e(xge,Kko),e(wb,Zko),e(wb,fO),e(fO,eSo),e(wb,oSo),e(W,rSo),e(W,Ab),e(Ab,$ge),e($ge,tSo),e(Ab,aSo),e(Ab,gO),e(gO,nSo),e(Ab,sSo),e(W,lSo),e(W,Lb),e(Lb,kge),e(kge,iSo),e(Lb,dSo),e(Lb,hO),e(hO,cSo),e(Lb,mSo),e(W,fSo),e(W,yb),e(yb,Sge),e(Sge,gSo),e(yb,hSo),e(yb,uO),e(uO,uSo),e(yb,pSo),e(W,_So),e(W,xb),e(xb,Rge),e(Rge,bSo),e(xb,vSo),e(xb,pO),e(pO,FSo),e(xb,TSo),e(W,MSo),e(W,$b),e($b,Pge),e(Pge,ESo),e($b,CSo),e($b,_O),e(_O,wSo),e($b,ASo),e(W,LSo),e(W,kb),e(kb,Bge),e(Bge,ySo),e(kb,xSo),e(kb,bO),e(bO,$So),e(kb,kSo),e(W,SSo),e(W,Sb),e(Sb,Ige),e(Ige,RSo),e(Sb,PSo),e(Sb,vO),e(vO,BSo),e(Sb,ISo),e(W,NSo),e(W,Rb),e(Rb,Nge),e(Nge,qSo),e(Rb,jSo),e(Rb,FO),e(FO,DSo),e(Rb,GSo),e(W,OSo),e(W,Pb),e(Pb,qge),e(qge,VSo),e(Pb,XSo),e(Pb,TO),e(TO,zSo),e(Pb,QSo),e(W,WSo),e(W,Bb),e(Bb,jge),e(jge,HSo),e(Bb,USo),e(Bb,MO),e(MO,JSo),e(Bb,YSo),e(W,KSo),e(W,Ib),e(Ib,Dge),e(Dge,ZSo),e(Ib,eRo),e(Ib,EO),e(EO,oRo),e(Ib,rRo),e(W,tRo),e(W,Nb),e(Nb,Gge),e(Gge,aRo),e(Nb,nRo),e(Nb,CO),e(CO,sRo),e(Nb,lRo),e(W,iRo),e(W,qb),e(qb,Oge),e(Oge,dRo),e(qb,cRo),e(qb,wO),e(wO,mRo),e(qb,fRo),e(W,gRo),e(W,jb),e(jb,Vge),e(Vge,hRo),e(jb,uRo),e(jb,AO),e(AO,pRo),e(jb,_Ro),e(W,bRo),e(W,Db),e(Db,Xge),e(Xge,vRo),e(Db,FRo),e(Db,LO),e(LO,TRo),e(Db,MRo),e(W,ERo),e(W,Gb),e(Gb,zge),e(zge,CRo),e(Gb,wRo),e(Gb,yO),e(yO,ARo),e(Gb,LRo),e(W,yRo),e(W,Ob),e(Ob,Qge),e(Qge,xRo),e(Ob,$Ro),e(Ob,xO),e(xO,kRo),e(Ob,SRo),e(W,RRo),e(W,Vb),e(Vb,Wge),e(Wge,PRo),e(Vb,BRo),e(Vb,$O),e($O,IRo),e(Vb,NRo),e(W,qRo),e(W,Xb),e(Xb,Hge),e(Hge,jRo),e(Xb,DRo),e(Xb,kO),e(kO,GRo),e(Xb,ORo),e(W,VRo),e(W,zb),e(zb,Uge),e(Uge,XRo),e(zb,zRo),e(zb,SO),e(SO,QRo),e(zb,WRo),e(W,HRo),e(W,Qb),e(Qb,Jge),e(Jge,URo),e(Qb,JRo),e(Qb,RO),e(RO,YRo),e(Qb,KRo),e(W,ZRo),e(W,Wb),e(Wb,Yge),e(Yge,ePo),e(Wb,oPo),e(Wb,PO),e(PO,rPo),e(Wb,tPo),e(W,aPo),e(W,Hb),e(Hb,Kge),e(Kge,nPo),e(Hb,sPo),e(Hb,BO),e(BO,lPo),e(Hb,iPo),e(W,dPo),e(W,Ub),e(Ub,Zge),e(Zge,cPo),e(Ub,mPo),e(Ub,IO),e(IO,fPo),e(Ub,gPo),e(W,hPo),e(W,Jb),e(Jb,ehe),e(ehe,uPo),e(Jb,pPo),e(Jb,NO),e(NO,_Po),e(Jb,bPo),e(W,vPo),e(W,Yb),e(Yb,ohe),e(ohe,FPo),e(Yb,TPo),e(Yb,qO),e(qO,MPo),e(Yb,EPo),e(W,CPo),e(W,Kb),e(Kb,rhe),e(rhe,wPo),e(Kb,APo),e(Kb,jO),e(jO,LPo),e(Kb,yPo),e(W,xPo),e(W,Zb),e(Zb,the),e(the,$Po),e(Zb,kPo),e(Zb,DO),e(DO,SPo),e(Zb,RPo),e(W,PPo),e(W,ev),e(ev,ahe),e(ahe,BPo),e(ev,IPo),e(ev,GO),e(GO,NPo),e(ev,qPo),e(W,jPo),e(W,ov),e(ov,nhe),e(nhe,DPo),e(ov,GPo),e(ov,OO),e(OO,OPo),e(ov,VPo),e(W,XPo),e(W,rv),e(rv,she),e(she,zPo),e(rv,QPo),e(rv,lhe),e(lhe,WPo),e(rv,HPo),e(W,UPo),e(W,tv),e(tv,ihe),e(ihe,JPo),e(tv,YPo),e(tv,VO),e(VO,KPo),e(tv,ZPo),e(W,eBo),e(W,av),e(av,dhe),e(dhe,oBo),e(av,rBo),e(av,XO),e(XO,tBo),e(av,aBo),e(W,nBo),e(W,nv),e(nv,che),e(che,sBo),e(nv,lBo),e(nv,zO),e(zO,iBo),e(nv,dBo),e(W,cBo),e(W,sv),e(sv,mhe),e(mhe,mBo),e(sv,fBo),e(sv,QO),e(QO,gBo),e(sv,hBo),e(Ze,uBo),e(Ze,lv),e(lv,pBo),e(lv,fhe),e(fhe,_Bo),e(lv,bBo),e(lv,ghe),e(ghe,vBo),e(Ze,FBo),M(iv,Ze,null),b(m,KOe,_),b(m,Ji,_),e(Ji,dv),e(dv,hhe),M(Sy,hhe,null),e(Ji,TBo),e(Ji,uhe),e(uhe,MBo),b(m,ZOe,_),b(m,Ro,_),M(Ry,Ro,null),e(Ro,EBo),e(Ro,Yi),e(Yi,CBo),e(Yi,WO),e(WO,wBo),e(Yi,ABo),e(Yi,HO),e(HO,LBo),e(Yi,yBo),e(Ro,xBo),e(Ro,Py),e(Py,$Bo),e(Py,phe),e(phe,kBo),e(Py,SBo),e(Ro,RBo),e(Ro,ct),M(By,ct,null),e(ct,PBo),e(ct,_he),e(_he,BBo),e(ct,IBo),e(ct,Ki),e(Ki,NBo),e(Ki,bhe),e(bhe,qBo),e(Ki,jBo),e(Ki,UO),e(UO,DBo),e(Ki,GBo),e(ct,OBo),M(cv,ct,null),e(Ro,VBo),e(Ro,eo),M(Iy,eo,null),e(eo,XBo),e(eo,vhe),e(vhe,zBo),e(eo,QBo),e(eo,qa),e(qa,WBo),e(qa,Fhe),e(Fhe,HBo),e(qa,UBo),e(qa,The),e(The,JBo),e(qa,YBo),e(qa,Mhe),e(Mhe,KBo),e(qa,ZBo),e(eo,eIo),e(eo,ue),e(ue,mv),e(mv,Ehe),e(Ehe,oIo),e(mv,rIo),e(mv,JO),e(JO,tIo),e(mv,aIo),e(ue,nIo),e(ue,fv),e(fv,Che),e(Che,sIo),e(fv,lIo),e(fv,YO),e(YO,iIo),e(fv,dIo),e(ue,cIo),e(ue,gv),e(gv,whe),e(whe,mIo),e(gv,fIo),e(gv,KO),e(KO,gIo),e(gv,hIo),e(ue,uIo),e(ue,hv),e(hv,Ahe),e(Ahe,pIo),e(hv,_Io),e(hv,ZO),e(ZO,bIo),e(hv,vIo),e(ue,FIo),e(ue,uv),e(uv,Lhe),e(Lhe,TIo),e(uv,MIo),e(uv,eV),e(eV,EIo),e(uv,CIo),e(ue,wIo),e(ue,pv),e(pv,yhe),e(yhe,AIo),e(pv,LIo),e(pv,oV),e(oV,yIo),e(pv,xIo),e(ue,$Io),e(ue,_v),e(_v,xhe),e(xhe,kIo),e(_v,SIo),e(_v,rV),e(rV,RIo),e(_v,PIo),e(ue,BIo),e(ue,bv),e(bv,$he),e($he,IIo),e(bv,NIo),e(bv,tV),e(tV,qIo),e(bv,jIo),e(ue,DIo),e(ue,vv),e(vv,khe),e(khe,GIo),e(vv,OIo),e(vv,aV),e(aV,VIo),e(vv,XIo),e(ue,zIo),e(ue,Fv),e(Fv,She),e(She,QIo),e(Fv,WIo),e(Fv,nV),e(nV,HIo),e(Fv,UIo),e(ue,JIo),e(ue,Tv),e(Tv,Rhe),e(Rhe,YIo),e(Tv,KIo),e(Tv,sV),e(sV,ZIo),e(Tv,eNo),e(ue,oNo),e(ue,Mv),e(Mv,Phe),e(Phe,rNo),e(Mv,tNo),e(Mv,lV),e(lV,aNo),e(Mv,nNo),e(ue,sNo),e(ue,Ev),e(Ev,Bhe),e(Bhe,lNo),e(Ev,iNo),e(Ev,iV),e(iV,dNo),e(Ev,cNo),e(ue,mNo),e(ue,Cv),e(Cv,Ihe),e(Ihe,fNo),e(Cv,gNo),e(Cv,dV),e(dV,hNo),e(Cv,uNo),e(ue,pNo),e(ue,wv),e(wv,Nhe),e(Nhe,_No),e(wv,bNo),e(wv,cV),e(cV,vNo),e(wv,FNo),e(ue,TNo),e(ue,Av),e(Av,qhe),e(qhe,MNo),e(Av,ENo),e(Av,mV),e(mV,CNo),e(Av,wNo),e(ue,ANo),e(ue,Lv),e(Lv,jhe),e(jhe,LNo),e(Lv,yNo),e(Lv,fV),e(fV,xNo),e(Lv,$No),e(eo,kNo),e(eo,yv),e(yv,SNo),e(yv,Dhe),e(Dhe,RNo),e(yv,PNo),e(yv,Ghe),e(Ghe,BNo),e(eo,INo),M(xv,eo,null),b(m,eVe,_),b(m,Zi,_),e(Zi,$v),e($v,Ohe),M(Ny,Ohe,null),e(Zi,NNo),e(Zi,Vhe),e(Vhe,qNo),b(m,oVe,_),b(m,Po,_),M(qy,Po,null),e(Po,jNo),e(Po,ed),e(ed,DNo),e(ed,gV),e(gV,GNo),e(ed,ONo),e(ed,hV),e(hV,VNo),e(ed,XNo),e(Po,zNo),e(Po,jy),e(jy,QNo),e(jy,Xhe),e(Xhe,WNo),e(jy,HNo),e(Po,UNo),e(Po,mt),M(Dy,mt,null),e(mt,JNo),e(mt,zhe),e(zhe,YNo),e(mt,KNo),e(mt,od),e(od,ZNo),e(od,Qhe),e(Qhe,eqo),e(od,oqo),e(od,uV),e(uV,rqo),e(od,tqo),e(mt,aqo),M(kv,mt,null),e(Po,nqo),e(Po,oo),M(Gy,oo,null),e(oo,sqo),e(oo,Whe),e(Whe,lqo),e(oo,iqo),e(oo,ja),e(ja,dqo),e(ja,Hhe),e(Hhe,cqo),e(ja,mqo),e(ja,Uhe),e(Uhe,fqo),e(ja,gqo),e(ja,Jhe),e(Jhe,hqo),e(ja,uqo),e(oo,pqo),e(oo,N),e(N,Sv),e(Sv,Yhe),e(Yhe,_qo),e(Sv,bqo),e(Sv,pV),e(pV,vqo),e(Sv,Fqo),e(N,Tqo),e(N,Rv),e(Rv,Khe),e(Khe,Mqo),e(Rv,Eqo),e(Rv,_V),e(_V,Cqo),e(Rv,wqo),e(N,Aqo),e(N,Pv),e(Pv,Zhe),e(Zhe,Lqo),e(Pv,yqo),e(Pv,bV),e(bV,xqo),e(Pv,$qo),e(N,kqo),e(N,Bv),e(Bv,eue),e(eue,Sqo),e(Bv,Rqo),e(Bv,vV),e(vV,Pqo),e(Bv,Bqo),e(N,Iqo),e(N,Iv),e(Iv,oue),e(oue,Nqo),e(Iv,qqo),e(Iv,FV),e(FV,jqo),e(Iv,Dqo),e(N,Gqo),e(N,Nv),e(Nv,rue),e(rue,Oqo),e(Nv,Vqo),e(Nv,TV),e(TV,Xqo),e(Nv,zqo),e(N,Qqo),e(N,qv),e(qv,tue),e(tue,Wqo),e(qv,Hqo),e(qv,MV),e(MV,Uqo),e(qv,Jqo),e(N,Yqo),e(N,jv),e(jv,aue),e(aue,Kqo),e(jv,Zqo),e(jv,EV),e(EV,ejo),e(jv,ojo),e(N,rjo),e(N,Dv),e(Dv,nue),e(nue,tjo),e(Dv,ajo),e(Dv,CV),e(CV,njo),e(Dv,sjo),e(N,ljo),e(N,Gv),e(Gv,sue),e(sue,ijo),e(Gv,djo),e(Gv,wV),e(wV,cjo),e(Gv,mjo),e(N,fjo),e(N,Ov),e(Ov,lue),e(lue,gjo),e(Ov,hjo),e(Ov,AV),e(AV,ujo),e(Ov,pjo),e(N,_jo),e(N,Vv),e(Vv,iue),e(iue,bjo),e(Vv,vjo),e(Vv,LV),e(LV,Fjo),e(Vv,Tjo),e(N,Mjo),e(N,Xv),e(Xv,due),e(due,Ejo),e(Xv,Cjo),e(Xv,yV),e(yV,wjo),e(Xv,Ajo),e(N,Ljo),e(N,zv),e(zv,cue),e(cue,yjo),e(zv,xjo),e(zv,xV),e(xV,$jo),e(zv,kjo),e(N,Sjo),e(N,Qv),e(Qv,mue),e(mue,Rjo),e(Qv,Pjo),e(Qv,$V),e($V,Bjo),e(Qv,Ijo),e(N,Njo),e(N,Wv),e(Wv,fue),e(fue,qjo),e(Wv,jjo),e(Wv,kV),e(kV,Djo),e(Wv,Gjo),e(N,Ojo),e(N,Hv),e(Hv,gue),e(gue,Vjo),e(Hv,Xjo),e(Hv,SV),e(SV,zjo),e(Hv,Qjo),e(N,Wjo),e(N,Uv),e(Uv,hue),e(hue,Hjo),e(Uv,Ujo),e(Uv,RV),e(RV,Jjo),e(Uv,Yjo),e(N,Kjo),e(N,Jv),e(Jv,uue),e(uue,Zjo),e(Jv,eDo),e(Jv,PV),e(PV,oDo),e(Jv,rDo),e(N,tDo),e(N,Yv),e(Yv,pue),e(pue,aDo),e(Yv,nDo),e(Yv,BV),e(BV,sDo),e(Yv,lDo),e(N,iDo),e(N,Kv),e(Kv,_ue),e(_ue,dDo),e(Kv,cDo),e(Kv,IV),e(IV,mDo),e(Kv,fDo),e(N,gDo),e(N,Zv),e(Zv,bue),e(bue,hDo),e(Zv,uDo),e(Zv,NV),e(NV,pDo),e(Zv,_Do),e(N,bDo),e(N,e1),e(e1,vue),e(vue,vDo),e(e1,FDo),e(e1,qV),e(qV,TDo),e(e1,MDo),e(N,EDo),e(N,o1),e(o1,Fue),e(Fue,CDo),e(o1,wDo),e(o1,jV),e(jV,ADo),e(o1,LDo),e(N,yDo),e(N,r1),e(r1,Tue),e(Tue,xDo),e(r1,$Do),e(r1,DV),e(DV,kDo),e(r1,SDo),e(N,RDo),e(N,t1),e(t1,Mue),e(Mue,PDo),e(t1,BDo),e(t1,GV),e(GV,IDo),e(t1,NDo),e(N,qDo),e(N,a1),e(a1,Eue),e(Eue,jDo),e(a1,DDo),e(a1,OV),e(OV,GDo),e(a1,ODo),e(N,VDo),e(N,n1),e(n1,Cue),e(Cue,XDo),e(n1,zDo),e(n1,VV),e(VV,QDo),e(n1,WDo),e(N,HDo),e(N,s1),e(s1,wue),e(wue,UDo),e(s1,JDo),e(s1,XV),e(XV,YDo),e(s1,KDo),e(N,ZDo),e(N,l1),e(l1,Aue),e(Aue,eGo),e(l1,oGo),e(l1,zV),e(zV,rGo),e(l1,tGo),e(N,aGo),e(N,i1),e(i1,Lue),e(Lue,nGo),e(i1,sGo),e(i1,QV),e(QV,lGo),e(i1,iGo),e(N,dGo),e(N,d1),e(d1,yue),e(yue,cGo),e(d1,mGo),e(d1,WV),e(WV,fGo),e(d1,gGo),e(N,hGo),e(N,c1),e(c1,xue),e(xue,uGo),e(c1,pGo),e(c1,HV),e(HV,_Go),e(c1,bGo),e(N,vGo),e(N,m1),e(m1,$ue),e($ue,FGo),e(m1,TGo),e(m1,UV),e(UV,MGo),e(m1,EGo),e(N,CGo),e(N,f1),e(f1,kue),e(kue,wGo),e(f1,AGo),e(f1,JV),e(JV,LGo),e(f1,yGo),e(N,xGo),e(N,g1),e(g1,Sue),e(Sue,$Go),e(g1,kGo),e(g1,YV),e(YV,SGo),e(g1,RGo),e(N,PGo),e(N,h1),e(h1,Rue),e(Rue,BGo),e(h1,IGo),e(h1,KV),e(KV,NGo),e(h1,qGo),e(N,jGo),e(N,u1),e(u1,Pue),e(Pue,DGo),e(u1,GGo),e(u1,ZV),e(ZV,OGo),e(u1,VGo),e(N,XGo),e(N,p1),e(p1,Bue),e(Bue,zGo),e(p1,QGo),e(p1,eX),e(eX,WGo),e(p1,HGo),e(N,UGo),e(N,_1),e(_1,Iue),e(Iue,JGo),e(_1,YGo),e(_1,oX),e(oX,KGo),e(_1,ZGo),e(N,eOo),e(N,b1),e(b1,Nue),e(Nue,oOo),e(b1,rOo),e(b1,rX),e(rX,tOo),e(b1,aOo),e(N,nOo),e(N,v1),e(v1,que),e(que,sOo),e(v1,lOo),e(v1,tX),e(tX,iOo),e(v1,dOo),e(N,cOo),e(N,F1),e(F1,jue),e(jue,mOo),e(F1,fOo),e(F1,aX),e(aX,gOo),e(F1,hOo),e(N,uOo),e(N,T1),e(T1,Due),e(Due,pOo),e(T1,_Oo),e(T1,nX),e(nX,bOo),e(T1,vOo),e(N,FOo),e(N,M1),e(M1,Gue),e(Gue,TOo),e(M1,MOo),e(M1,sX),e(sX,EOo),e(M1,COo),e(N,wOo),e(N,E1),e(E1,Oue),e(Oue,AOo),e(E1,LOo),e(E1,lX),e(lX,yOo),e(E1,xOo),e(N,$Oo),e(N,C1),e(C1,Vue),e(Vue,kOo),e(C1,SOo),e(C1,iX),e(iX,ROo),e(C1,POo),e(N,BOo),e(N,w1),e(w1,Xue),e(Xue,IOo),e(w1,NOo),e(w1,dX),e(dX,qOo),e(w1,jOo),e(N,DOo),e(N,A1),e(A1,zue),e(zue,GOo),e(A1,OOo),e(A1,cX),e(cX,VOo),e(A1,XOo),e(oo,zOo),e(oo,L1),e(L1,QOo),e(L1,Que),e(Que,WOo),e(L1,HOo),e(L1,Wue),e(Wue,UOo),e(oo,JOo),M(y1,oo,null),b(m,rVe,_),b(m,rd,_),e(rd,x1),e(x1,Hue),M(Oy,Hue,null),e(rd,YOo),e(rd,Uue),e(Uue,KOo),b(m,tVe,_),b(m,Bo,_),M(Vy,Bo,null),e(Bo,ZOo),e(Bo,td),e(td,eVo),e(td,mX),e(mX,oVo),e(td,rVo),e(td,fX),e(fX,tVo),e(td,aVo),e(Bo,nVo),e(Bo,Xy),e(Xy,sVo),e(Xy,Jue),e(Jue,lVo),e(Xy,iVo),e(Bo,dVo),e(Bo,ft),M(zy,ft,null),e(ft,cVo),e(ft,Yue),e(Yue,mVo),e(ft,fVo),e(ft,ad),e(ad,gVo),e(ad,Kue),e(Kue,hVo),e(ad,uVo),e(ad,gX),e(gX,pVo),e(ad,_Vo),e(ft,bVo),M($1,ft,null),e(Bo,vVo),e(Bo,ro),M(Qy,ro,null),e(ro,FVo),e(ro,Zue),e(Zue,TVo),e(ro,MVo),e(ro,Da),e(Da,EVo),e(Da,epe),e(epe,CVo),e(Da,wVo),e(Da,ope),e(ope,AVo),e(Da,LVo),e(Da,rpe),e(rpe,yVo),e(Da,xVo),e(ro,$Vo),e(ro,Z),e(Z,k1),e(k1,tpe),e(tpe,kVo),e(k1,SVo),e(k1,hX),e(hX,RVo),e(k1,PVo),e(Z,BVo),e(Z,S1),e(S1,ape),e(ape,IVo),e(S1,NVo),e(S1,uX),e(uX,qVo),e(S1,jVo),e(Z,DVo),e(Z,R1),e(R1,npe),e(npe,GVo),e(R1,OVo),e(R1,pX),e(pX,VVo),e(R1,XVo),e(Z,zVo),e(Z,P1),e(P1,spe),e(spe,QVo),e(P1,WVo),e(P1,_X),e(_X,HVo),e(P1,UVo),e(Z,JVo),e(Z,B1),e(B1,lpe),e(lpe,YVo),e(B1,KVo),e(B1,bX),e(bX,ZVo),e(B1,eXo),e(Z,oXo),e(Z,I1),e(I1,ipe),e(ipe,rXo),e(I1,tXo),e(I1,vX),e(vX,aXo),e(I1,nXo),e(Z,sXo),e(Z,N1),e(N1,dpe),e(dpe,lXo),e(N1,iXo),e(N1,FX),e(FX,dXo),e(N1,cXo),e(Z,mXo),e(Z,q1),e(q1,cpe),e(cpe,fXo),e(q1,gXo),e(q1,TX),e(TX,hXo),e(q1,uXo),e(Z,pXo),e(Z,j1),e(j1,mpe),e(mpe,_Xo),e(j1,bXo),e(j1,MX),e(MX,vXo),e(j1,FXo),e(Z,TXo),e(Z,D1),e(D1,fpe),e(fpe,MXo),e(D1,EXo),e(D1,EX),e(EX,CXo),e(D1,wXo),e(Z,AXo),e(Z,G1),e(G1,gpe),e(gpe,LXo),e(G1,yXo),e(G1,CX),e(CX,xXo),e(G1,$Xo),e(Z,kXo),e(Z,O1),e(O1,hpe),e(hpe,SXo),e(O1,RXo),e(O1,wX),e(wX,PXo),e(O1,BXo),e(Z,IXo),e(Z,V1),e(V1,upe),e(upe,NXo),e(V1,qXo),e(V1,AX),e(AX,jXo),e(V1,DXo),e(Z,GXo),e(Z,X1),e(X1,ppe),e(ppe,OXo),e(X1,VXo),e(X1,LX),e(LX,XXo),e(X1,zXo),e(Z,QXo),e(Z,z1),e(z1,_pe),e(_pe,WXo),e(z1,HXo),e(z1,yX),e(yX,UXo),e(z1,JXo),e(Z,YXo),e(Z,Q1),e(Q1,bpe),e(bpe,KXo),e(Q1,ZXo),e(Q1,xX),e(xX,ezo),e(Q1,ozo),e(Z,rzo),e(Z,W1),e(W1,vpe),e(vpe,tzo),e(W1,azo),e(W1,$X),e($X,nzo),e(W1,szo),e(Z,lzo),e(Z,H1),e(H1,Fpe),e(Fpe,izo),e(H1,dzo),e(H1,kX),e(kX,czo),e(H1,mzo),e(Z,fzo),e(Z,U1),e(U1,Tpe),e(Tpe,gzo),e(U1,hzo),e(U1,SX),e(SX,uzo),e(U1,pzo),e(Z,_zo),e(Z,J1),e(J1,Mpe),e(Mpe,bzo),e(J1,vzo),e(J1,RX),e(RX,Fzo),e(J1,Tzo),e(Z,Mzo),e(Z,Y1),e(Y1,Epe),e(Epe,Ezo),e(Y1,Czo),e(Y1,PX),e(PX,wzo),e(Y1,Azo),e(Z,Lzo),e(Z,K1),e(K1,Cpe),e(Cpe,yzo),e(K1,xzo),e(K1,BX),e(BX,$zo),e(K1,kzo),e(Z,Szo),e(Z,Z1),e(Z1,wpe),e(wpe,Rzo),e(Z1,Pzo),e(Z1,IX),e(IX,Bzo),e(Z1,Izo),e(Z,Nzo),e(Z,eF),e(eF,Ape),e(Ape,qzo),e(eF,jzo),e(eF,NX),e(NX,Dzo),e(eF,Gzo),e(Z,Ozo),e(Z,oF),e(oF,Lpe),e(Lpe,Vzo),e(oF,Xzo),e(oF,qX),e(qX,zzo),e(oF,Qzo),e(Z,Wzo),e(Z,rF),e(rF,ype),e(ype,Hzo),e(rF,Uzo),e(rF,jX),e(jX,Jzo),e(rF,Yzo),e(Z,Kzo),e(Z,tF),e(tF,xpe),e(xpe,Zzo),e(tF,eQo),e(tF,DX),e(DX,oQo),e(tF,rQo),e(Z,tQo),e(Z,aF),e(aF,$pe),e($pe,aQo),e(aF,nQo),e(aF,GX),e(GX,sQo),e(aF,lQo),e(Z,iQo),e(Z,nF),e(nF,kpe),e(kpe,dQo),e(nF,cQo),e(nF,OX),e(OX,mQo),e(nF,fQo),e(Z,gQo),e(Z,sF),e(sF,Spe),e(Spe,hQo),e(sF,uQo),e(sF,VX),e(VX,pQo),e(sF,_Qo),e(ro,bQo),e(ro,lF),e(lF,vQo),e(lF,Rpe),e(Rpe,FQo),e(lF,TQo),e(lF,Ppe),e(Ppe,MQo),e(ro,EQo),M(iF,ro,null),b(m,aVe,_),b(m,nd,_),e(nd,dF),e(dF,Bpe),M(Wy,Bpe,null),e(nd,CQo),e(nd,Ipe),e(Ipe,wQo),b(m,nVe,_),b(m,Io,_),M(Hy,Io,null),e(Io,AQo),e(Io,sd),e(sd,LQo),e(sd,XX),e(XX,yQo),e(sd,xQo),e(sd,zX),e(zX,$Qo),e(sd,kQo),e(Io,SQo),e(Io,Uy),e(Uy,RQo),e(Uy,Npe),e(Npe,PQo),e(Uy,BQo),e(Io,IQo),e(Io,gt),M(Jy,gt,null),e(gt,NQo),e(gt,qpe),e(qpe,qQo),e(gt,jQo),e(gt,ld),e(ld,DQo),e(ld,jpe),e(jpe,GQo),e(ld,OQo),e(ld,QX),e(QX,VQo),e(ld,XQo),e(gt,zQo),M(cF,gt,null),e(Io,QQo),e(Io,to),M(Yy,to,null),e(to,WQo),e(to,Dpe),e(Dpe,HQo),e(to,UQo),e(to,Ga),e(Ga,JQo),e(Ga,Gpe),e(Gpe,YQo),e(Ga,KQo),e(Ga,Ope),e(Ope,ZQo),e(Ga,eWo),e(Ga,Vpe),e(Vpe,oWo),e(Ga,rWo),e(to,tWo),e(to,No),e(No,mF),e(mF,Xpe),e(Xpe,aWo),e(mF,nWo),e(mF,WX),e(WX,sWo),e(mF,lWo),e(No,iWo),e(No,fF),e(fF,zpe),e(zpe,dWo),e(fF,cWo),e(fF,HX),e(HX,mWo),e(fF,fWo),e(No,gWo),e(No,gF),e(gF,Qpe),e(Qpe,hWo),e(gF,uWo),e(gF,UX),e(UX,pWo),e(gF,_Wo),e(No,bWo),e(No,hF),e(hF,Wpe),e(Wpe,vWo),e(hF,FWo),e(hF,JX),e(JX,TWo),e(hF,MWo),e(No,EWo),e(No,uF),e(uF,Hpe),e(Hpe,CWo),e(uF,wWo),e(uF,YX),e(YX,AWo),e(uF,LWo),e(No,yWo),e(No,pF),e(pF,Upe),e(Upe,xWo),e(pF,$Wo),e(pF,KX),e(KX,kWo),e(pF,SWo),e(to,RWo),e(to,_F),e(_F,PWo),e(_F,Jpe),e(Jpe,BWo),e(_F,IWo),e(_F,Ype),e(Ype,NWo),e(to,qWo),M(bF,to,null),b(m,sVe,_),b(m,id,_),e(id,vF),e(vF,Kpe),M(Ky,Kpe,null),e(id,jWo),e(id,Zpe),e(Zpe,DWo),b(m,lVe,_),b(m,qo,_),M(Zy,qo,null),e(qo,GWo),e(qo,dd),e(dd,OWo),e(dd,ZX),e(ZX,VWo),e(dd,XWo),e(dd,ez),e(ez,zWo),e(dd,QWo),e(qo,WWo),e(qo,e8),e(e8,HWo),e(e8,e_e),e(e_e,UWo),e(e8,JWo),e(qo,YWo),e(qo,ht),M(o8,ht,null),e(ht,KWo),e(ht,o_e),e(o_e,ZWo),e(ht,eHo),e(ht,cd),e(cd,oHo),e(cd,r_e),e(r_e,rHo),e(cd,tHo),e(cd,oz),e(oz,aHo),e(cd,nHo),e(ht,sHo),M(FF,ht,null),e(qo,lHo),e(qo,ao),M(r8,ao,null),e(ao,iHo),e(ao,t_e),e(t_e,dHo),e(ao,cHo),e(ao,Oa),e(Oa,mHo),e(Oa,a_e),e(a_e,fHo),e(Oa,gHo),e(Oa,n_e),e(n_e,hHo),e(Oa,uHo),e(Oa,s_e),e(s_e,pHo),e(Oa,_Ho),e(ao,bHo),e(ao,H),e(H,TF),e(TF,l_e),e(l_e,vHo),e(TF,FHo),e(TF,rz),e(rz,THo),e(TF,MHo),e(H,EHo),e(H,MF),e(MF,i_e),e(i_e,CHo),e(MF,wHo),e(MF,tz),e(tz,AHo),e(MF,LHo),e(H,yHo),e(H,EF),e(EF,d_e),e(d_e,xHo),e(EF,$Ho),e(EF,az),e(az,kHo),e(EF,SHo),e(H,RHo),e(H,CF),e(CF,c_e),e(c_e,PHo),e(CF,BHo),e(CF,nz),e(nz,IHo),e(CF,NHo),e(H,qHo),e(H,wF),e(wF,m_e),e(m_e,jHo),e(wF,DHo),e(wF,sz),e(sz,GHo),e(wF,OHo),e(H,VHo),e(H,AF),e(AF,f_e),e(f_e,XHo),e(AF,zHo),e(AF,lz),e(lz,QHo),e(AF,WHo),e(H,HHo),e(H,LF),e(LF,g_e),e(g_e,UHo),e(LF,JHo),e(LF,iz),e(iz,YHo),e(LF,KHo),e(H,ZHo),e(H,yF),e(yF,h_e),e(h_e,eUo),e(yF,oUo),e(yF,dz),e(dz,rUo),e(yF,tUo),e(H,aUo),e(H,xF),e(xF,u_e),e(u_e,nUo),e(xF,sUo),e(xF,cz),e(cz,lUo),e(xF,iUo),e(H,dUo),e(H,$F),e($F,p_e),e(p_e,cUo),e($F,mUo),e($F,mz),e(mz,fUo),e($F,gUo),e(H,hUo),e(H,kF),e(kF,__e),e(__e,uUo),e(kF,pUo),e(kF,fz),e(fz,_Uo),e(kF,bUo),e(H,vUo),e(H,SF),e(SF,b_e),e(b_e,FUo),e(SF,TUo),e(SF,gz),e(gz,MUo),e(SF,EUo),e(H,CUo),e(H,RF),e(RF,v_e),e(v_e,wUo),e(RF,AUo),e(RF,hz),e(hz,LUo),e(RF,yUo),e(H,xUo),e(H,PF),e(PF,F_e),e(F_e,$Uo),e(PF,kUo),e(PF,uz),e(uz,SUo),e(PF,RUo),e(H,PUo),e(H,BF),e(BF,T_e),e(T_e,BUo),e(BF,IUo),e(BF,pz),e(pz,NUo),e(BF,qUo),e(H,jUo),e(H,IF),e(IF,M_e),e(M_e,DUo),e(IF,GUo),e(IF,_z),e(_z,OUo),e(IF,VUo),e(H,XUo),e(H,NF),e(NF,E_e),e(E_e,zUo),e(NF,QUo),e(NF,bz),e(bz,WUo),e(NF,HUo),e(H,UUo),e(H,qF),e(qF,C_e),e(C_e,JUo),e(qF,YUo),e(qF,vz),e(vz,KUo),e(qF,ZUo),e(H,eJo),e(H,jF),e(jF,w_e),e(w_e,oJo),e(jF,rJo),e(jF,Fz),e(Fz,tJo),e(jF,aJo),e(H,nJo),e(H,DF),e(DF,A_e),e(A_e,sJo),e(DF,lJo),e(DF,Tz),e(Tz,iJo),e(DF,dJo),e(H,cJo),e(H,GF),e(GF,L_e),e(L_e,mJo),e(GF,fJo),e(GF,Mz),e(Mz,gJo),e(GF,hJo),e(H,uJo),e(H,OF),e(OF,y_e),e(y_e,pJo),e(OF,_Jo),e(OF,Ez),e(Ez,bJo),e(OF,vJo),e(H,FJo),e(H,VF),e(VF,x_e),e(x_e,TJo),e(VF,MJo),e(VF,Cz),e(Cz,EJo),e(VF,CJo),e(H,wJo),e(H,XF),e(XF,$_e),e($_e,AJo),e(XF,LJo),e(XF,wz),e(wz,yJo),e(XF,xJo),e(H,$Jo),e(H,zF),e(zF,k_e),e(k_e,kJo),e(zF,SJo),e(zF,Az),e(Az,RJo),e(zF,PJo),e(H,BJo),e(H,QF),e(QF,S_e),e(S_e,IJo),e(QF,NJo),e(QF,Lz),e(Lz,qJo),e(QF,jJo),e(H,DJo),e(H,WF),e(WF,R_e),e(R_e,GJo),e(WF,OJo),e(WF,yz),e(yz,VJo),e(WF,XJo),e(H,zJo),e(H,HF),e(HF,P_e),e(P_e,QJo),e(HF,WJo),e(HF,xz),e(xz,HJo),e(HF,UJo),e(H,JJo),e(H,UF),e(UF,B_e),e(B_e,YJo),e(UF,KJo),e(UF,$z),e($z,ZJo),e(UF,eYo),e(H,oYo),e(H,JF),e(JF,I_e),e(I_e,rYo),e(JF,tYo),e(JF,kz),e(kz,aYo),e(JF,nYo),e(H,sYo),e(H,YF),e(YF,N_e),e(N_e,lYo),e(YF,iYo),e(YF,Sz),e(Sz,dYo),e(YF,cYo),e(H,mYo),e(H,KF),e(KF,q_e),e(q_e,fYo),e(KF,gYo),e(KF,Rz),e(Rz,hYo),e(KF,uYo),e(H,pYo),e(H,ZF),e(ZF,j_e),e(j_e,_Yo),e(ZF,bYo),e(ZF,Pz),e(Pz,vYo),e(ZF,FYo),e(H,TYo),e(H,eT),e(eT,D_e),e(D_e,MYo),e(eT,EYo),e(eT,Bz),e(Bz,CYo),e(eT,wYo),e(H,AYo),e(H,oT),e(oT,G_e),e(G_e,LYo),e(oT,yYo),e(oT,Iz),e(Iz,xYo),e(oT,$Yo),e(H,kYo),e(H,rT),e(rT,O_e),e(O_e,SYo),e(rT,RYo),e(rT,Nz),e(Nz,PYo),e(rT,BYo),e(ao,IYo),e(ao,tT),e(tT,NYo),e(tT,V_e),e(V_e,qYo),e(tT,jYo),e(tT,X_e),e(X_e,DYo),e(ao,GYo),M(aT,ao,null),b(m,iVe,_),b(m,md,_),e(md,nT),e(nT,z_e),M(t8,z_e,null),e(md,OYo),e(md,Q_e),e(Q_e,VYo),b(m,dVe,_),b(m,jo,_),M(a8,jo,null),e(jo,XYo),e(jo,fd),e(fd,zYo),e(fd,qz),e(qz,QYo),e(fd,WYo),e(fd,jz),e(jz,HYo),e(fd,UYo),e(jo,JYo),e(jo,n8),e(n8,YYo),e(n8,W_e),e(W_e,KYo),e(n8,ZYo),e(jo,eKo),e(jo,ut),M(s8,ut,null),e(ut,oKo),e(ut,H_e),e(H_e,rKo),e(ut,tKo),e(ut,gd),e(gd,aKo),e(gd,U_e),e(U_e,nKo),e(gd,sKo),e(gd,Dz),e(Dz,lKo),e(gd,iKo),e(ut,dKo),M(sT,ut,null),e(jo,cKo),e(jo,no),M(l8,no,null),e(no,mKo),e(no,J_e),e(J_e,fKo),e(no,gKo),e(no,Va),e(Va,hKo),e(Va,Y_e),e(Y_e,uKo),e(Va,pKo),e(Va,K_e),e(K_e,_Ko),e(Va,bKo),e(Va,Z_e),e(Z_e,vKo),e(Va,FKo),e(no,TKo),e(no,V),e(V,lT),e(lT,e2e),e(e2e,MKo),e(lT,EKo),e(lT,Gz),e(Gz,CKo),e(lT,wKo),e(V,AKo),e(V,iT),e(iT,o2e),e(o2e,LKo),e(iT,yKo),e(iT,Oz),e(Oz,xKo),e(iT,$Ko),e(V,kKo),e(V,dT),e(dT,r2e),e(r2e,SKo),e(dT,RKo),e(dT,Vz),e(Vz,PKo),e(dT,BKo),e(V,IKo),e(V,cT),e(cT,t2e),e(t2e,NKo),e(cT,qKo),e(cT,Xz),e(Xz,jKo),e(cT,DKo),e(V,GKo),e(V,mT),e(mT,a2e),e(a2e,OKo),e(mT,VKo),e(mT,zz),e(zz,XKo),e(mT,zKo),e(V,QKo),e(V,fT),e(fT,n2e),e(n2e,WKo),e(fT,HKo),e(fT,Qz),e(Qz,UKo),e(fT,JKo),e(V,YKo),e(V,gT),e(gT,s2e),e(s2e,KKo),e(gT,ZKo),e(gT,Wz),e(Wz,eZo),e(gT,oZo),e(V,rZo),e(V,hT),e(hT,l2e),e(l2e,tZo),e(hT,aZo),e(hT,Hz),e(Hz,nZo),e(hT,sZo),e(V,lZo),e(V,uT),e(uT,i2e),e(i2e,iZo),e(uT,dZo),e(uT,Uz),e(Uz,cZo),e(uT,mZo),e(V,fZo),e(V,pT),e(pT,d2e),e(d2e,gZo),e(pT,hZo),e(pT,Jz),e(Jz,uZo),e(pT,pZo),e(V,_Zo),e(V,_T),e(_T,c2e),e(c2e,bZo),e(_T,vZo),e(_T,Yz),e(Yz,FZo),e(_T,TZo),e(V,MZo),e(V,bT),e(bT,m2e),e(m2e,EZo),e(bT,CZo),e(bT,Kz),e(Kz,wZo),e(bT,AZo),e(V,LZo),e(V,vT),e(vT,f2e),e(f2e,yZo),e(vT,xZo),e(vT,Zz),e(Zz,$Zo),e(vT,kZo),e(V,SZo),e(V,FT),e(FT,g2e),e(g2e,RZo),e(FT,PZo),e(FT,eQ),e(eQ,BZo),e(FT,IZo),e(V,NZo),e(V,TT),e(TT,h2e),e(h2e,qZo),e(TT,jZo),e(TT,oQ),e(oQ,DZo),e(TT,GZo),e(V,OZo),e(V,MT),e(MT,u2e),e(u2e,VZo),e(MT,XZo),e(MT,rQ),e(rQ,zZo),e(MT,QZo),e(V,WZo),e(V,ET),e(ET,p2e),e(p2e,HZo),e(ET,UZo),e(ET,tQ),e(tQ,JZo),e(ET,YZo),e(V,KZo),e(V,CT),e(CT,_2e),e(_2e,ZZo),e(CT,eer),e(CT,aQ),e(aQ,oer),e(CT,rer),e(V,ter),e(V,wT),e(wT,b2e),e(b2e,aer),e(wT,ner),e(wT,nQ),e(nQ,ser),e(wT,ler),e(V,ier),e(V,AT),e(AT,v2e),e(v2e,der),e(AT,cer),e(AT,sQ),e(sQ,mer),e(AT,fer),e(V,ger),e(V,LT),e(LT,F2e),e(F2e,her),e(LT,uer),e(LT,lQ),e(lQ,per),e(LT,_er),e(V,ber),e(V,yT),e(yT,T2e),e(T2e,ver),e(yT,Fer),e(yT,iQ),e(iQ,Ter),e(yT,Mer),e(V,Eer),e(V,xT),e(xT,M2e),e(M2e,Cer),e(xT,wer),e(xT,dQ),e(dQ,Aer),e(xT,Ler),e(V,yer),e(V,$T),e($T,E2e),e(E2e,xer),e($T,$er),e($T,cQ),e(cQ,ker),e($T,Ser),e(V,Rer),e(V,kT),e(kT,C2e),e(C2e,Per),e(kT,Ber),e(kT,mQ),e(mQ,Ier),e(kT,Ner),e(V,qer),e(V,ST),e(ST,w2e),e(w2e,jer),e(ST,Der),e(ST,fQ),e(fQ,Ger),e(ST,Oer),e(V,Ver),e(V,RT),e(RT,A2e),e(A2e,Xer),e(RT,zer),e(RT,gQ),e(gQ,Qer),e(RT,Wer),e(V,Her),e(V,PT),e(PT,L2e),e(L2e,Uer),e(PT,Jer),e(PT,hQ),e(hQ,Yer),e(PT,Ker),e(V,Zer),e(V,BT),e(BT,y2e),e(y2e,eor),e(BT,oor),e(BT,uQ),e(uQ,ror),e(BT,tor),e(V,aor),e(V,IT),e(IT,x2e),e(x2e,nor),e(IT,sor),e(IT,pQ),e(pQ,lor),e(IT,ior),e(V,dor),e(V,NT),e(NT,$2e),e($2e,cor),e(NT,mor),e(NT,_Q),e(_Q,gor),e(NT,hor),e(V,uor),e(V,qT),e(qT,k2e),e(k2e,por),e(qT,_or),e(qT,bQ),e(bQ,bor),e(qT,vor),e(V,For),e(V,jT),e(jT,S2e),e(S2e,Tor),e(jT,Mor),e(jT,vQ),e(vQ,Eor),e(jT,Cor),e(V,wor),e(V,DT),e(DT,R2e),e(R2e,Aor),e(DT,Lor),e(DT,FQ),e(FQ,yor),e(DT,xor),e(V,$or),e(V,GT),e(GT,P2e),e(P2e,kor),e(GT,Sor),e(GT,TQ),e(TQ,Ror),e(GT,Por),e(V,Bor),e(V,OT),e(OT,B2e),e(B2e,Ior),e(OT,Nor),e(OT,MQ),e(MQ,qor),e(OT,jor),e(V,Dor),e(V,VT),e(VT,I2e),e(I2e,Gor),e(VT,Oor),e(VT,EQ),e(EQ,Vor),e(VT,Xor),e(V,zor),e(V,XT),e(XT,N2e),e(N2e,Qor),e(XT,Wor),e(XT,CQ),e(CQ,Hor),e(XT,Uor),e(V,Jor),e(V,zT),e(zT,q2e),e(q2e,Yor),e(zT,Kor),e(zT,wQ),e(wQ,Zor),e(zT,err),e(V,orr),e(V,QT),e(QT,j2e),e(j2e,rrr),e(QT,trr),e(QT,AQ),e(AQ,arr),e(QT,nrr),e(V,srr),e(V,WT),e(WT,D2e),e(D2e,lrr),e(WT,irr),e(WT,LQ),e(LQ,drr),e(WT,crr),e(no,mrr),e(no,HT),e(HT,frr),e(HT,G2e),e(G2e,grr),e(HT,hrr),e(HT,O2e),e(O2e,urr),e(no,prr),M(UT,no,null),b(m,cVe,_),b(m,hd,_),e(hd,JT),e(JT,V2e),M(i8,V2e,null),e(hd,_rr),e(hd,X2e),e(X2e,brr),b(m,mVe,_),b(m,Do,_),M(d8,Do,null),e(Do,vrr),e(Do,ud),e(ud,Frr),e(ud,yQ),e(yQ,Trr),e(ud,Mrr),e(ud,xQ),e(xQ,Err),e(ud,Crr),e(Do,wrr),e(Do,c8),e(c8,Arr),e(c8,z2e),e(z2e,Lrr),e(c8,yrr),e(Do,xrr),e(Do,pt),M(m8,pt,null),e(pt,$rr),e(pt,Q2e),e(Q2e,krr),e(pt,Srr),e(pt,pd),e(pd,Rrr),e(pd,W2e),e(W2e,Prr),e(pd,Brr),e(pd,$Q),e($Q,Irr),e(pd,Nrr),e(pt,qrr),M(YT,pt,null),e(Do,jrr),e(Do,so),M(f8,so,null),e(so,Drr),e(so,H2e),e(H2e,Grr),e(so,Orr),e(so,Xa),e(Xa,Vrr),e(Xa,U2e),e(U2e,Xrr),e(Xa,zrr),e(Xa,J2e),e(J2e,Qrr),e(Xa,Wrr),e(Xa,Y2e),e(Y2e,Hrr),e(Xa,Urr),e(so,Jrr),e(so,K2e),e(K2e,KT),e(KT,Z2e),e(Z2e,Yrr),e(KT,Krr),e(KT,kQ),e(kQ,Zrr),e(KT,etr),e(so,otr),e(so,ZT),e(ZT,rtr),e(ZT,ebe),e(ebe,ttr),e(ZT,atr),e(ZT,obe),e(obe,ntr),e(so,str),M(eM,so,null),b(m,fVe,_),b(m,_d,_),e(_d,oM),e(oM,rbe),M(g8,rbe,null),e(_d,ltr),e(_d,tbe),e(tbe,itr),b(m,gVe,_),b(m,Go,_),M(h8,Go,null),e(Go,dtr),e(Go,bd),e(bd,ctr),e(bd,SQ),e(SQ,mtr),e(bd,ftr),e(bd,RQ),e(RQ,gtr),e(bd,htr),e(Go,utr),e(Go,u8),e(u8,ptr),e(u8,abe),e(abe,_tr),e(u8,btr),e(Go,vtr),e(Go,_t),M(p8,_t,null),e(_t,Ftr),e(_t,nbe),e(nbe,Ttr),e(_t,Mtr),e(_t,vd),e(vd,Etr),e(vd,sbe),e(sbe,Ctr),e(vd,wtr),e(vd,PQ),e(PQ,Atr),e(vd,Ltr),e(_t,ytr),M(rM,_t,null),e(Go,xtr),e(Go,lo),M(_8,lo,null),e(lo,$tr),e(lo,lbe),e(lbe,ktr),e(lo,Str),e(lo,za),e(za,Rtr),e(za,ibe),e(ibe,Ptr),e(za,Btr),e(za,dbe),e(dbe,Itr),e(za,Ntr),e(za,cbe),e(cbe,qtr),e(za,jtr),e(lo,Dtr),e(lo,Fe),e(Fe,tM),e(tM,mbe),e(mbe,Gtr),e(tM,Otr),e(tM,BQ),e(BQ,Vtr),e(tM,Xtr),e(Fe,ztr),e(Fe,aM),e(aM,fbe),e(fbe,Qtr),e(aM,Wtr),e(aM,IQ),e(IQ,Htr),e(aM,Utr),e(Fe,Jtr),e(Fe,nM),e(nM,gbe),e(gbe,Ytr),e(nM,Ktr),e(nM,NQ),e(NQ,Ztr),e(nM,ear),e(Fe,oar),e(Fe,sM),e(sM,hbe),e(hbe,rar),e(sM,tar),e(sM,qQ),e(qQ,aar),e(sM,nar),e(Fe,sar),e(Fe,Qs),e(Qs,ube),e(ube,lar),e(Qs,iar),e(Qs,jQ),e(jQ,dar),e(Qs,car),e(Qs,DQ),e(DQ,mar),e(Qs,far),e(Fe,gar),e(Fe,lM),e(lM,pbe),e(pbe,har),e(lM,uar),e(lM,GQ),e(GQ,par),e(lM,_ar),e(Fe,bar),e(Fe,Ws),e(Ws,_be),e(_be,Far),e(Ws,Tar),e(Ws,OQ),e(OQ,Mar),e(Ws,Ear),e(Ws,VQ),e(VQ,Car),e(Ws,war),e(Fe,Aar),e(Fe,bt),e(bt,bbe),e(bbe,Lar),e(bt,yar),e(bt,XQ),e(XQ,xar),e(bt,$ar),e(bt,zQ),e(zQ,kar),e(bt,Sar),e(bt,QQ),e(QQ,Rar),e(bt,Par),e(Fe,Bar),e(Fe,iM),e(iM,vbe),e(vbe,Iar),e(iM,Nar),e(iM,WQ),e(WQ,qar),e(iM,jar),e(Fe,Dar),e(Fe,dM),e(dM,Fbe),e(Fbe,Gar),e(dM,Oar),e(dM,HQ),e(HQ,Var),e(dM,Xar),e(Fe,zar),e(Fe,cM),e(cM,Tbe),e(Tbe,Qar),e(cM,War),e(cM,UQ),e(UQ,Har),e(cM,Uar),e(Fe,Jar),e(Fe,mM),e(mM,Mbe),e(Mbe,Yar),e(mM,Kar),e(mM,JQ),e(JQ,Zar),e(mM,enr),e(Fe,onr),e(Fe,fM),e(fM,Ebe),e(Ebe,rnr),e(fM,tnr),e(fM,YQ),e(YQ,anr),e(fM,nnr),e(Fe,snr),e(Fe,gM),e(gM,Cbe),e(Cbe,lnr),e(gM,inr),e(gM,KQ),e(KQ,dnr),e(gM,cnr),e(Fe,mnr),e(Fe,hM),e(hM,wbe),e(wbe,fnr),e(hM,gnr),e(hM,ZQ),e(ZQ,hnr),e(hM,unr),e(lo,pnr),e(lo,uM),e(uM,_nr),e(uM,Abe),e(Abe,bnr),e(uM,vnr),e(uM,Lbe),e(Lbe,Fnr),e(lo,Tnr),M(pM,lo,null),b(m,hVe,_),b(m,Fd,_),e(Fd,_M),e(_M,ybe),M(b8,ybe,null),e(Fd,Mnr),e(Fd,xbe),e(xbe,Enr),b(m,uVe,_),b(m,Oo,_),M(v8,Oo,null),e(Oo,Cnr),e(Oo,Td),e(Td,wnr),e(Td,eW),e(eW,Anr),e(Td,Lnr),e(Td,oW),e(oW,ynr),e(Td,xnr),e(Oo,$nr),e(Oo,F8),e(F8,knr),e(F8,$be),e($be,Snr),e(F8,Rnr),e(Oo,Pnr),e(Oo,vt),M(T8,vt,null),e(vt,Bnr),e(vt,kbe),e(kbe,Inr),e(vt,Nnr),e(vt,Md),e(Md,qnr),e(Md,Sbe),e(Sbe,jnr),e(Md,Dnr),e(Md,rW),e(rW,Gnr),e(Md,Onr),e(vt,Vnr),M(bM,vt,null),e(Oo,Xnr),e(Oo,io),M(M8,io,null),e(io,znr),e(io,Rbe),e(Rbe,Qnr),e(io,Wnr),e(io,Qa),e(Qa,Hnr),e(Qa,Pbe),e(Pbe,Unr),e(Qa,Jnr),e(Qa,Bbe),e(Bbe,Ynr),e(Qa,Knr),e(Qa,Ibe),e(Ibe,Znr),e(Qa,esr),e(io,osr),e(io,Nbe),e(Nbe,vM),e(vM,qbe),e(qbe,rsr),e(vM,tsr),e(vM,tW),e(tW,asr),e(vM,nsr),e(io,ssr),e(io,FM),e(FM,lsr),e(FM,jbe),e(jbe,isr),e(FM,dsr),e(FM,Dbe),e(Dbe,csr),e(io,msr),M(TM,io,null),b(m,pVe,_),b(m,Ed,_),e(Ed,MM),e(MM,Gbe),M(E8,Gbe,null),e(Ed,fsr),e(Ed,Obe),e(Obe,gsr),b(m,_Ve,_),b(m,Vo,_),M(C8,Vo,null),e(Vo,hsr),e(Vo,Cd),e(Cd,usr),e(Cd,aW),e(aW,psr),e(Cd,_sr),e(Cd,nW),e(nW,bsr),e(Cd,vsr),e(Vo,Fsr),e(Vo,w8),e(w8,Tsr),e(w8,Vbe),e(Vbe,Msr),e(w8,Esr),e(Vo,Csr),e(Vo,Ft),M(A8,Ft,null),e(Ft,wsr),e(Ft,Xbe),e(Xbe,Asr),e(Ft,Lsr),e(Ft,wd),e(wd,ysr),e(wd,zbe),e(zbe,xsr),e(wd,$sr),e(wd,sW),e(sW,ksr),e(wd,Ssr),e(Ft,Rsr),M(EM,Ft,null),e(Vo,Psr),e(Vo,co),M(L8,co,null),e(co,Bsr),e(co,Qbe),e(Qbe,Isr),e(co,Nsr),e(co,Wa),e(Wa,qsr),e(Wa,Wbe),e(Wbe,jsr),e(Wa,Dsr),e(Wa,Hbe),e(Hbe,Gsr),e(Wa,Osr),e(Wa,Ube),e(Ube,Vsr),e(Wa,Xsr),e(co,zsr),e(co,Jbe),e(Jbe,CM),e(CM,Ybe),e(Ybe,Qsr),e(CM,Wsr),e(CM,lW),e(lW,Hsr),e(CM,Usr),e(co,Jsr),e(co,wM),e(wM,Ysr),e(wM,Kbe),e(Kbe,Ksr),e(wM,Zsr),e(wM,Zbe),e(Zbe,elr),e(co,olr),M(AM,co,null),b(m,bVe,_),b(m,Ad,_),e(Ad,LM),e(LM,eve),M(y8,eve,null),e(Ad,rlr),e(Ad,ove),e(ove,tlr),b(m,vVe,_),b(m,Xo,_),M(x8,Xo,null),e(Xo,alr),e(Xo,Ld),e(Ld,nlr),e(Ld,iW),e(iW,slr),e(Ld,llr),e(Ld,dW),e(dW,ilr),e(Ld,dlr),e(Xo,clr),e(Xo,$8),e($8,mlr),e($8,rve),e(rve,flr),e($8,glr),e(Xo,hlr),e(Xo,Tt),M(k8,Tt,null),e(Tt,ulr),e(Tt,tve),e(tve,plr),e(Tt,_lr),e(Tt,yd),e(yd,blr),e(yd,ave),e(ave,vlr),e(yd,Flr),e(yd,cW),e(cW,Tlr),e(yd,Mlr),e(Tt,Elr),M(yM,Tt,null),e(Xo,Clr),e(Xo,mo),M(S8,mo,null),e(mo,wlr),e(mo,nve),e(nve,Alr),e(mo,Llr),e(mo,Ha),e(Ha,ylr),e(Ha,sve),e(sve,xlr),e(Ha,$lr),e(Ha,lve),e(lve,klr),e(Ha,Slr),e(Ha,ive),e(ive,Rlr),e(Ha,Plr),e(mo,Blr),e(mo,Pe),e(Pe,xM),e(xM,dve),e(dve,Ilr),e(xM,Nlr),e(xM,mW),e(mW,qlr),e(xM,jlr),e(Pe,Dlr),e(Pe,$M),e($M,cve),e(cve,Glr),e($M,Olr),e($M,fW),e(fW,Vlr),e($M,Xlr),e(Pe,zlr),e(Pe,kM),e(kM,mve),e(mve,Qlr),e(kM,Wlr),e(kM,gW),e(gW,Hlr),e(kM,Ulr),e(Pe,Jlr),e(Pe,SM),e(SM,fve),e(fve,Ylr),e(SM,Klr),e(SM,hW),e(hW,Zlr),e(SM,eir),e(Pe,oir),e(Pe,RM),e(RM,gve),e(gve,rir),e(RM,tir),e(RM,uW),e(uW,air),e(RM,nir),e(Pe,sir),e(Pe,PM),e(PM,hve),e(hve,lir),e(PM,iir),e(PM,pW),e(pW,dir),e(PM,cir),e(Pe,mir),e(Pe,BM),e(BM,uve),e(uve,fir),e(BM,gir),e(BM,_W),e(_W,hir),e(BM,uir),e(Pe,pir),e(Pe,IM),e(IM,pve),e(pve,_ir),e(IM,bir),e(IM,bW),e(bW,vir),e(IM,Fir),e(Pe,Tir),e(Pe,NM),e(NM,_ve),e(_ve,Mir),e(NM,Eir),e(NM,vW),e(vW,Cir),e(NM,wir),e(mo,Air),e(mo,qM),e(qM,Lir),e(qM,bve),e(bve,yir),e(qM,xir),e(qM,vve),e(vve,$ir),e(mo,kir),M(jM,mo,null),b(m,FVe,_),b(m,xd,_),e(xd,DM),e(DM,Fve),M(R8,Fve,null),e(xd,Sir),e(xd,Tve),e(Tve,Rir),b(m,TVe,_),b(m,zo,_),M(P8,zo,null),e(zo,Pir),e(zo,$d),e($d,Bir),e($d,FW),e(FW,Iir),e($d,Nir),e($d,TW),e(TW,qir),e($d,jir),e(zo,Dir),e(zo,B8),e(B8,Gir),e(B8,Mve),e(Mve,Oir),e(B8,Vir),e(zo,Xir),e(zo,Mt),M(I8,Mt,null),e(Mt,zir),e(Mt,Eve),e(Eve,Qir),e(Mt,Wir),e(Mt,kd),e(kd,Hir),e(kd,Cve),e(Cve,Uir),e(kd,Jir),e(kd,MW),e(MW,Yir),e(kd,Kir),e(Mt,Zir),M(GM,Mt,null),e(zo,edr),e(zo,fo),M(N8,fo,null),e(fo,odr),e(fo,wve),e(wve,rdr),e(fo,tdr),e(fo,Ua),e(Ua,adr),e(Ua,Ave),e(Ave,ndr),e(Ua,sdr),e(Ua,Lve),e(Lve,ldr),e(Ua,idr),e(Ua,yve),e(yve,ddr),e(Ua,cdr),e(fo,mdr),e(fo,et),e(et,OM),e(OM,xve),e(xve,fdr),e(OM,gdr),e(OM,EW),e(EW,hdr),e(OM,udr),e(et,pdr),e(et,VM),e(VM,$ve),e($ve,_dr),e(VM,bdr),e(VM,CW),e(CW,vdr),e(VM,Fdr),e(et,Tdr),e(et,XM),e(XM,kve),e(kve,Mdr),e(XM,Edr),e(XM,wW),e(wW,Cdr),e(XM,wdr),e(et,Adr),e(et,zM),e(zM,Sve),e(Sve,Ldr),e(zM,ydr),e(zM,AW),e(AW,xdr),e(zM,$dr),e(et,kdr),e(et,QM),e(QM,Rve),e(Rve,Sdr),e(QM,Rdr),e(QM,LW),e(LW,Pdr),e(QM,Bdr),e(fo,Idr),e(fo,WM),e(WM,Ndr),e(WM,Pve),e(Pve,qdr),e(WM,jdr),e(WM,Bve),e(Bve,Ddr),e(fo,Gdr),M(HM,fo,null),b(m,MVe,_),b(m,Sd,_),e(Sd,UM),e(UM,Ive),M(q8,Ive,null),e(Sd,Odr),e(Sd,Nve),e(Nve,Vdr),b(m,EVe,_),b(m,Qo,_),M(j8,Qo,null),e(Qo,Xdr),e(Qo,Rd),e(Rd,zdr),e(Rd,yW),e(yW,Qdr),e(Rd,Wdr),e(Rd,xW),e(xW,Hdr),e(Rd,Udr),e(Qo,Jdr),e(Qo,D8),e(D8,Ydr),e(D8,qve),e(qve,Kdr),e(D8,Zdr),e(Qo,ecr),e(Qo,Et),M(G8,Et,null),e(Et,ocr),e(Et,jve),e(jve,rcr),e(Et,tcr),e(Et,Pd),e(Pd,acr),e(Pd,Dve),e(Dve,ncr),e(Pd,scr),e(Pd,$W),e($W,lcr),e(Pd,icr),e(Et,dcr),M(JM,Et,null),e(Qo,ccr),e(Qo,go),M(O8,go,null),e(go,mcr),e(go,Gve),e(Gve,fcr),e(go,gcr),e(go,Ja),e(Ja,hcr),e(Ja,Ove),e(Ove,ucr),e(Ja,pcr),e(Ja,Vve),e(Vve,_cr),e(Ja,bcr),e(Ja,Xve),e(Xve,vcr),e(Ja,Fcr),e(go,Tcr),e(go,Le),e(Le,YM),e(YM,zve),e(zve,Mcr),e(YM,Ecr),e(YM,kW),e(kW,Ccr),e(YM,wcr),e(Le,Acr),e(Le,KM),e(KM,Qve),e(Qve,Lcr),e(KM,ycr),e(KM,SW),e(SW,xcr),e(KM,$cr),e(Le,kcr),e(Le,ZM),e(ZM,Wve),e(Wve,Scr),e(ZM,Rcr),e(ZM,RW),e(RW,Pcr),e(ZM,Bcr),e(Le,Icr),e(Le,e4),e(e4,Hve),e(Hve,Ncr),e(e4,qcr),e(e4,PW),e(PW,jcr),e(e4,Dcr),e(Le,Gcr),e(Le,o4),e(o4,Uve),e(Uve,Ocr),e(o4,Vcr),e(o4,BW),e(BW,Xcr),e(o4,zcr),e(Le,Qcr),e(Le,r4),e(r4,Jve),e(Jve,Wcr),e(r4,Hcr),e(r4,IW),e(IW,Ucr),e(r4,Jcr),e(Le,Ycr),e(Le,t4),e(t4,Yve),e(Yve,Kcr),e(t4,Zcr),e(t4,NW),e(NW,emr),e(t4,omr),e(Le,rmr),e(Le,a4),e(a4,Kve),e(Kve,tmr),e(a4,amr),e(a4,qW),e(qW,nmr),e(a4,smr),e(Le,lmr),e(Le,n4),e(n4,Zve),e(Zve,imr),e(n4,dmr),e(n4,jW),e(jW,cmr),e(n4,mmr),e(Le,fmr),e(Le,s4),e(s4,e1e),e(e1e,gmr),e(s4,hmr),e(s4,DW),e(DW,umr),e(s4,pmr),e(go,_mr),e(go,l4),e(l4,bmr),e(l4,o1e),e(o1e,vmr),e(l4,Fmr),e(l4,r1e),e(r1e,Tmr),e(go,Mmr),M(i4,go,null),b(m,CVe,_),b(m,Bd,_),e(Bd,d4),e(d4,t1e),M(V8,t1e,null),e(Bd,Emr),e(Bd,a1e),e(a1e,Cmr),b(m,wVe,_),b(m,Wo,_),M(X8,Wo,null),e(Wo,wmr),e(Wo,Id),e(Id,Amr),e(Id,GW),e(GW,Lmr),e(Id,ymr),e(Id,OW),e(OW,xmr),e(Id,$mr),e(Wo,kmr),e(Wo,z8),e(z8,Smr),e(z8,n1e),e(n1e,Rmr),e(z8,Pmr),e(Wo,Bmr),e(Wo,Ct),M(Q8,Ct,null),e(Ct,Imr),e(Ct,s1e),e(s1e,Nmr),e(Ct,qmr),e(Ct,Nd),e(Nd,jmr),e(Nd,l1e),e(l1e,Dmr),e(Nd,Gmr),e(Nd,VW),e(VW,Omr),e(Nd,Vmr),e(Ct,Xmr),M(c4,Ct,null),e(Wo,zmr),e(Wo,ho),M(W8,ho,null),e(ho,Qmr),e(ho,i1e),e(i1e,Wmr),e(ho,Hmr),e(ho,Ya),e(Ya,Umr),e(Ya,d1e),e(d1e,Jmr),e(Ya,Ymr),e(Ya,c1e),e(c1e,Kmr),e(Ya,Zmr),e(Ya,m1e),e(m1e,efr),e(Ya,ofr),e(ho,rfr),e(ho,H8),e(H8,m4),e(m4,f1e),e(f1e,tfr),e(m4,afr),e(m4,XW),e(XW,nfr),e(m4,sfr),e(H8,lfr),e(H8,f4),e(f4,g1e),e(g1e,ifr),e(f4,dfr),e(f4,zW),e(zW,cfr),e(f4,mfr),e(ho,ffr),e(ho,g4),e(g4,gfr),e(g4,h1e),e(h1e,hfr),e(g4,ufr),e(g4,u1e),e(u1e,pfr),e(ho,_fr),M(h4,ho,null),b(m,AVe,_),b(m,qd,_),e(qd,u4),e(u4,p1e),M(U8,p1e,null),e(qd,bfr),e(qd,_1e),e(_1e,vfr),b(m,LVe,_),b(m,Ho,_),M(J8,Ho,null),e(Ho,Ffr),e(Ho,jd),e(jd,Tfr),e(jd,QW),e(QW,Mfr),e(jd,Efr),e(jd,WW),e(WW,Cfr),e(jd,wfr),e(Ho,Afr),e(Ho,Y8),e(Y8,Lfr),e(Y8,b1e),e(b1e,yfr),e(Y8,xfr),e(Ho,$fr),e(Ho,wt),M(K8,wt,null),e(wt,kfr),e(wt,v1e),e(v1e,Sfr),e(wt,Rfr),e(wt,Dd),e(Dd,Pfr),e(Dd,F1e),e(F1e,Bfr),e(Dd,Ifr),e(Dd,HW),e(HW,Nfr),e(Dd,qfr),e(wt,jfr),M(p4,wt,null),e(Ho,Dfr),e(Ho,uo),M(Z8,uo,null),e(uo,Gfr),e(uo,T1e),e(T1e,Ofr),e(uo,Vfr),e(uo,Ka),e(Ka,Xfr),e(Ka,M1e),e(M1e,zfr),e(Ka,Qfr),e(Ka,E1e),e(E1e,Wfr),e(Ka,Hfr),e(Ka,C1e),e(C1e,Ufr),e(Ka,Jfr),e(uo,Yfr),e(uo,ot),e(ot,_4),e(_4,w1e),e(w1e,Kfr),e(_4,Zfr),e(_4,UW),e(UW,egr),e(_4,ogr),e(ot,rgr),e(ot,b4),e(b4,A1e),e(A1e,tgr),e(b4,agr),e(b4,JW),e(JW,ngr),e(b4,sgr),e(ot,lgr),e(ot,v4),e(v4,L1e),e(L1e,igr),e(v4,dgr),e(v4,YW),e(YW,cgr),e(v4,mgr),e(ot,fgr),e(ot,F4),e(F4,y1e),e(y1e,ggr),e(F4,hgr),e(F4,KW),e(KW,ugr),e(F4,pgr),e(ot,_gr),e(ot,T4),e(T4,x1e),e(x1e,bgr),e(T4,vgr),e(T4,ZW),e(ZW,Fgr),e(T4,Tgr),e(uo,Mgr),e(uo,M4),e(M4,Egr),e(M4,$1e),e($1e,Cgr),e(M4,wgr),e(M4,k1e),e(k1e,Agr),e(uo,Lgr),M(E4,uo,null),b(m,yVe,_),b(m,Gd,_),e(Gd,C4),e(C4,S1e),M(e9,S1e,null),e(Gd,ygr),e(Gd,R1e),e(R1e,xgr),b(m,xVe,_),b(m,Uo,_),M(o9,Uo,null),e(Uo,$gr),e(Uo,Od),e(Od,kgr),e(Od,eH),e(eH,Sgr),e(Od,Rgr),e(Od,oH),e(oH,Pgr),e(Od,Bgr),e(Uo,Igr),e(Uo,r9),e(r9,Ngr),e(r9,P1e),e(P1e,qgr),e(r9,jgr),e(Uo,Dgr),e(Uo,At),M(t9,At,null),e(At,Ggr),e(At,B1e),e(B1e,Ogr),e(At,Vgr),e(At,Vd),e(Vd,Xgr),e(Vd,I1e),e(I1e,zgr),e(Vd,Qgr),e(Vd,rH),e(rH,Wgr),e(Vd,Hgr),e(At,Ugr),M(w4,At,null),e(Uo,Jgr),e(Uo,po),M(a9,po,null),e(po,Ygr),e(po,N1e),e(N1e,Kgr),e(po,Zgr),e(po,Za),e(Za,ehr),e(Za,q1e),e(q1e,ohr),e(Za,rhr),e(Za,j1e),e(j1e,thr),e(Za,ahr),e(Za,D1e),e(D1e,nhr),e(Za,shr),e(po,lhr),e(po,Xd),e(Xd,A4),e(A4,G1e),e(G1e,ihr),e(A4,dhr),e(A4,tH),e(tH,chr),e(A4,mhr),e(Xd,fhr),e(Xd,L4),e(L4,O1e),e(O1e,ghr),e(L4,hhr),e(L4,aH),e(aH,uhr),e(L4,phr),e(Xd,_hr),e(Xd,y4),e(y4,V1e),e(V1e,bhr),e(y4,vhr),e(y4,nH),e(nH,Fhr),e(y4,Thr),e(po,Mhr),e(po,x4),e(x4,Ehr),e(x4,X1e),e(X1e,Chr),e(x4,whr),e(x4,z1e),e(z1e,Ahr),e(po,Lhr),M($4,po,null),b(m,$Ve,_),b(m,zd,_),e(zd,k4),e(k4,Q1e),M(n9,Q1e,null),e(zd,yhr),e(zd,W1e),e(W1e,xhr),b(m,kVe,_),b(m,Jo,_),M(s9,Jo,null),e(Jo,$hr),e(Jo,Qd),e(Qd,khr),e(Qd,sH),e(sH,Shr),e(Qd,Rhr),e(Qd,lH),e(lH,Phr),e(Qd,Bhr),e(Jo,Ihr),e(Jo,l9),e(l9,Nhr),e(l9,H1e),e(H1e,qhr),e(l9,jhr),e(Jo,Dhr),e(Jo,Lt),M(i9,Lt,null),e(Lt,Ghr),e(Lt,U1e),e(U1e,Ohr),e(Lt,Vhr),e(Lt,Wd),e(Wd,Xhr),e(Wd,J1e),e(J1e,zhr),e(Wd,Qhr),e(Wd,iH),e(iH,Whr),e(Wd,Hhr),e(Lt,Uhr),M(S4,Lt,null),e(Jo,Jhr),e(Jo,_o),M(d9,_o,null),e(_o,Yhr),e(_o,Y1e),e(Y1e,Khr),e(_o,Zhr),e(_o,en),e(en,eur),e(en,K1e),e(K1e,our),e(en,rur),e(en,Z1e),e(Z1e,tur),e(en,aur),e(en,eFe),e(eFe,nur),e(en,sur),e(_o,lur),e(_o,c9),e(c9,R4),e(R4,oFe),e(oFe,iur),e(R4,dur),e(R4,dH),e(dH,cur),e(R4,mur),e(c9,fur),e(c9,P4),e(P4,rFe),e(rFe,gur),e(P4,hur),e(P4,cH),e(cH,uur),e(P4,pur),e(_o,_ur),e(_o,B4),e(B4,bur),e(B4,tFe),e(tFe,vur),e(B4,Fur),e(B4,aFe),e(aFe,Tur),e(_o,Mur),M(I4,_o,null),b(m,SVe,_),b(m,Hd,_),e(Hd,N4),e(N4,nFe),M(m9,nFe,null),e(Hd,Eur),e(Hd,sFe),e(sFe,Cur),b(m,RVe,_),b(m,Yo,_),M(f9,Yo,null),e(Yo,wur),e(Yo,Ud),e(Ud,Aur),e(Ud,mH),e(mH,Lur),e(Ud,yur),e(Ud,fH),e(fH,xur),e(Ud,$ur),e(Yo,kur),e(Yo,g9),e(g9,Sur),e(g9,lFe),e(lFe,Rur),e(g9,Pur),e(Yo,Bur),e(Yo,yt),M(h9,yt,null),e(yt,Iur),e(yt,iFe),e(iFe,Nur),e(yt,qur),e(yt,Jd),e(Jd,jur),e(Jd,dFe),e(dFe,Dur),e(Jd,Gur),e(Jd,gH),e(gH,Our),e(Jd,Vur),e(yt,Xur),M(q4,yt,null),e(Yo,zur),e(Yo,bo),M(u9,bo,null),e(bo,Qur),e(bo,cFe),e(cFe,Wur),e(bo,Hur),e(bo,on),e(on,Uur),e(on,mFe),e(mFe,Jur),e(on,Yur),e(on,fFe),e(fFe,Kur),e(on,Zur),e(on,gFe),e(gFe,epr),e(on,opr),e(bo,rpr),e(bo,hFe),e(hFe,j4),e(j4,uFe),e(uFe,tpr),e(j4,apr),e(j4,hH),e(hH,npr),e(j4,spr),e(bo,lpr),e(bo,D4),e(D4,ipr),e(D4,pFe),e(pFe,dpr),e(D4,cpr),e(D4,_Fe),e(_Fe,mpr),e(bo,fpr),M(G4,bo,null),b(m,PVe,_),b(m,Yd,_),e(Yd,O4),e(O4,bFe),M(p9,bFe,null),e(Yd,gpr),e(Yd,vFe),e(vFe,hpr),b(m,BVe,_),b(m,Ko,_),M(_9,Ko,null),e(Ko,upr),e(Ko,Kd),e(Kd,ppr),e(Kd,uH),e(uH,_pr),e(Kd,bpr),e(Kd,pH),e(pH,vpr),e(Kd,Fpr),e(Ko,Tpr),e(Ko,b9),e(b9,Mpr),e(b9,FFe),e(FFe,Epr),e(b9,Cpr),e(Ko,wpr),e(Ko,xt),M(v9,xt,null),e(xt,Apr),e(xt,TFe),e(TFe,Lpr),e(xt,ypr),e(xt,Zd),e(Zd,xpr),e(Zd,MFe),e(MFe,$pr),e(Zd,kpr),e(Zd,_H),e(_H,Spr),e(Zd,Rpr),e(xt,Ppr),M(V4,xt,null),e(Ko,Bpr),e(Ko,vo),M(F9,vo,null),e(vo,Ipr),e(vo,EFe),e(EFe,Npr),e(vo,qpr),e(vo,rn),e(rn,jpr),e(rn,CFe),e(CFe,Dpr),e(rn,Gpr),e(rn,wFe),e(wFe,Opr),e(rn,Vpr),e(rn,AFe),e(AFe,Xpr),e(rn,zpr),e(vo,Qpr),e(vo,tn),e(tn,X4),e(X4,LFe),e(LFe,Wpr),e(X4,Hpr),e(X4,bH),e(bH,Upr),e(X4,Jpr),e(tn,Ypr),e(tn,z4),e(z4,yFe),e(yFe,Kpr),e(z4,Zpr),e(z4,vH),e(vH,e_r),e(z4,o_r),e(tn,r_r),e(tn,Q4),e(Q4,xFe),e(xFe,t_r),e(Q4,a_r),e(Q4,FH),e(FH,n_r),e(Q4,s_r),e(tn,l_r),e(tn,W4),e(W4,$Fe),e($Fe,i_r),e(W4,d_r),e(W4,TH),e(TH,c_r),e(W4,m_r),e(vo,f_r),e(vo,H4),e(H4,g_r),e(H4,kFe),e(kFe,h_r),e(H4,u_r),e(H4,SFe),e(SFe,p_r),e(vo,__r),M(U4,vo,null),b(m,IVe,_),b(m,ec,_),e(ec,J4),e(J4,RFe),M(T9,RFe,null),e(ec,b_r),e(ec,PFe),e(PFe,v_r),b(m,NVe,_),b(m,Zo,_),M(M9,Zo,null),e(Zo,F_r),e(Zo,oc),e(oc,T_r),e(oc,MH),e(MH,M_r),e(oc,E_r),e(oc,EH),e(EH,C_r),e(oc,w_r),e(Zo,A_r),e(Zo,E9),e(E9,L_r),e(E9,BFe),e(BFe,y_r),e(E9,x_r),e(Zo,$_r),e(Zo,$t),M(C9,$t,null),e($t,k_r),e($t,IFe),e(IFe,S_r),e($t,R_r),e($t,rc),e(rc,P_r),e(rc,NFe),e(NFe,B_r),e(rc,I_r),e(rc,CH),e(CH,N_r),e(rc,q_r),e($t,j_r),M(Y4,$t,null),e(Zo,D_r),e(Zo,Fo),M(w9,Fo,null),e(Fo,G_r),e(Fo,qFe),e(qFe,O_r),e(Fo,V_r),e(Fo,an),e(an,X_r),e(an,jFe),e(jFe,z_r),e(an,Q_r),e(an,DFe),e(DFe,W_r),e(an,H_r),e(an,GFe),e(GFe,U_r),e(an,J_r),e(Fo,Y_r),e(Fo,OFe),e(OFe,K4),e(K4,VFe),e(VFe,K_r),e(K4,Z_r),e(K4,wH),e(wH,e2r),e(K4,o2r),e(Fo,r2r),e(Fo,Z4),e(Z4,t2r),e(Z4,XFe),e(XFe,a2r),e(Z4,n2r),e(Z4,zFe),e(zFe,s2r),e(Fo,l2r),M(eE,Fo,null),b(m,qVe,_),b(m,tc,_),e(tc,oE),e(oE,QFe),M(A9,QFe,null),e(tc,i2r),e(tc,WFe),e(WFe,d2r),b(m,jVe,_),b(m,er,_),M(L9,er,null),e(er,c2r),e(er,ac),e(ac,m2r),e(ac,AH),e(AH,f2r),e(ac,g2r),e(ac,LH),e(LH,h2r),e(ac,u2r),e(er,p2r),e(er,y9),e(y9,_2r),e(y9,HFe),e(HFe,b2r),e(y9,v2r),e(er,F2r),e(er,kt),M(x9,kt,null),e(kt,T2r),e(kt,UFe),e(UFe,M2r),e(kt,E2r),e(kt,nc),e(nc,C2r),e(nc,JFe),e(JFe,w2r),e(nc,A2r),e(nc,yH),e(yH,L2r),e(nc,y2r),e(kt,x2r),M(rE,kt,null),e(er,$2r),e(er,yr),M($9,yr,null),e(yr,k2r),e(yr,YFe),e(YFe,S2r),e(yr,R2r),e(yr,nn),e(nn,P2r),e(nn,KFe),e(KFe,B2r),e(nn,I2r),e(nn,ZFe),e(ZFe,N2r),e(nn,q2r),e(nn,eTe),e(eTe,j2r),e(nn,D2r),e(yr,G2r),e(yr,q),e(q,tE),e(tE,oTe),e(oTe,O2r),e(tE,V2r),e(tE,xH),e(xH,X2r),e(tE,z2r),e(q,Q2r),e(q,aE),e(aE,rTe),e(rTe,W2r),e(aE,H2r),e(aE,$H),e($H,U2r),e(aE,J2r),e(q,Y2r),e(q,nE),e(nE,tTe),e(tTe,K2r),e(nE,Z2r),e(nE,kH),e(kH,ebr),e(nE,obr),e(q,rbr),e(q,sE),e(sE,aTe),e(aTe,tbr),e(sE,abr),e(sE,SH),e(SH,nbr),e(sE,sbr),e(q,lbr),e(q,lE),e(lE,nTe),e(nTe,ibr),e(lE,dbr),e(lE,RH),e(RH,cbr),e(lE,mbr),e(q,fbr),e(q,iE),e(iE,sTe),e(sTe,gbr),e(iE,hbr),e(iE,PH),e(PH,ubr),e(iE,pbr),e(q,_br),e(q,dE),e(dE,lTe),e(lTe,bbr),e(dE,vbr),e(dE,BH),e(BH,Fbr),e(dE,Tbr),e(q,Mbr),e(q,cE),e(cE,iTe),e(iTe,Ebr),e(cE,Cbr),e(cE,IH),e(IH,wbr),e(cE,Abr),e(q,Lbr),e(q,mE),e(mE,dTe),e(dTe,ybr),e(mE,xbr),e(mE,NH),e(NH,$br),e(mE,kbr),e(q,Sbr),e(q,fE),e(fE,cTe),e(cTe,Rbr),e(fE,Pbr),e(fE,qH),e(qH,Bbr),e(fE,Ibr),e(q,Nbr),e(q,gE),e(gE,mTe),e(mTe,qbr),e(gE,jbr),e(gE,jH),e(jH,Dbr),e(gE,Gbr),e(q,Obr),e(q,hE),e(hE,fTe),e(fTe,Vbr),e(hE,Xbr),e(hE,DH),e(DH,zbr),e(hE,Qbr),e(q,Wbr),e(q,uE),e(uE,gTe),e(gTe,Hbr),e(uE,Ubr),e(uE,GH),e(GH,Jbr),e(uE,Ybr),e(q,Kbr),e(q,pE),e(pE,hTe),e(hTe,Zbr),e(pE,evr),e(pE,OH),e(OH,ovr),e(pE,rvr),e(q,tvr),e(q,_E),e(_E,uTe),e(uTe,avr),e(_E,nvr),e(_E,VH),e(VH,svr),e(_E,lvr),e(q,ivr),e(q,bE),e(bE,pTe),e(pTe,dvr),e(bE,cvr),e(bE,XH),e(XH,mvr),e(bE,fvr),e(q,gvr),e(q,vE),e(vE,_Te),e(_Te,hvr),e(vE,uvr),e(vE,zH),e(zH,pvr),e(vE,_vr),e(q,bvr),e(q,Hs),e(Hs,bTe),e(bTe,vvr),e(Hs,Fvr),e(Hs,QH),e(QH,Tvr),e(Hs,Mvr),e(Hs,WH),e(WH,Evr),e(Hs,Cvr),e(q,wvr),e(q,FE),e(FE,vTe),e(vTe,Avr),e(FE,Lvr),e(FE,HH),e(HH,yvr),e(FE,xvr),e(q,$vr),e(q,TE),e(TE,FTe),e(FTe,kvr),e(TE,Svr),e(TE,UH),e(UH,Rvr),e(TE,Pvr),e(q,Bvr),e(q,ME),e(ME,TTe),e(TTe,Ivr),e(ME,Nvr),e(ME,JH),e(JH,qvr),e(ME,jvr),e(q,Dvr),e(q,EE),e(EE,MTe),e(MTe,Gvr),e(EE,Ovr),e(EE,YH),e(YH,Vvr),e(EE,Xvr),e(q,zvr),e(q,CE),e(CE,ETe),e(ETe,Qvr),e(CE,Wvr),e(CE,KH),e(KH,Hvr),e(CE,Uvr),e(q,Jvr),e(q,wE),e(wE,CTe),e(CTe,Yvr),e(wE,Kvr),e(wE,ZH),e(ZH,Zvr),e(wE,e1r),e(q,o1r),e(q,AE),e(AE,wTe),e(wTe,r1r),e(AE,t1r),e(AE,eU),e(eU,a1r),e(AE,n1r),e(q,s1r),e(q,LE),e(LE,ATe),e(ATe,l1r),e(LE,i1r),e(LE,oU),e(oU,d1r),e(LE,c1r),e(q,m1r),e(q,yE),e(yE,LTe),e(LTe,f1r),e(yE,g1r),e(yE,rU),e(rU,h1r),e(yE,u1r),e(q,p1r),e(q,xE),e(xE,yTe),e(yTe,_1r),e(xE,b1r),e(xE,tU),e(tU,v1r),e(xE,F1r),e(q,T1r),e(q,$E),e($E,xTe),e(xTe,M1r),e($E,E1r),e($E,aU),e(aU,C1r),e($E,w1r),e(q,A1r),e(q,kE),e(kE,$Te),e($Te,L1r),e(kE,y1r),e(kE,nU),e(nU,x1r),e(kE,$1r),e(q,k1r),e(q,SE),e(SE,kTe),e(kTe,S1r),e(SE,R1r),e(SE,sU),e(sU,P1r),e(SE,B1r),e(q,I1r),e(q,RE),e(RE,STe),e(STe,N1r),e(RE,q1r),e(RE,lU),e(lU,j1r),e(RE,D1r),e(q,G1r),e(q,PE),e(PE,RTe),e(RTe,O1r),e(PE,V1r),e(PE,iU),e(iU,X1r),e(PE,z1r),e(q,Q1r),e(q,BE),e(BE,PTe),e(PTe,W1r),e(BE,H1r),e(BE,dU),e(dU,U1r),e(BE,J1r),e(q,Y1r),e(q,IE),e(IE,BTe),e(BTe,K1r),e(IE,Z1r),e(IE,cU),e(cU,eFr),e(IE,oFr),e(q,rFr),e(q,NE),e(NE,ITe),e(ITe,tFr),e(NE,aFr),e(NE,mU),e(mU,nFr),e(NE,sFr),e(q,lFr),e(q,qE),e(qE,NTe),e(NTe,iFr),e(qE,dFr),e(qE,fU),e(fU,cFr),e(qE,mFr),e(q,fFr),e(q,jE),e(jE,qTe),e(qTe,gFr),e(jE,hFr),e(jE,gU),e(gU,uFr),e(jE,pFr),e(q,_Fr),e(q,DE),e(DE,jTe),e(jTe,bFr),e(DE,vFr),e(DE,hU),e(hU,FFr),e(DE,TFr),e(q,MFr),e(q,GE),e(GE,DTe),e(DTe,EFr),e(GE,CFr),e(GE,uU),e(uU,wFr),e(GE,AFr),e(q,LFr),e(q,OE),e(OE,GTe),e(GTe,yFr),e(OE,xFr),e(OE,pU),e(pU,$Fr),e(OE,kFr),e(q,SFr),e(q,VE),e(VE,OTe),e(OTe,RFr),e(VE,PFr),e(VE,_U),e(_U,BFr),e(VE,IFr),e(q,NFr),e(q,XE),e(XE,VTe),e(VTe,qFr),e(XE,jFr),e(XE,bU),e(bU,DFr),e(XE,GFr),e(q,OFr),e(q,zE),e(zE,XTe),e(XTe,VFr),e(zE,XFr),e(zE,vU),e(vU,zFr),e(zE,QFr),e(q,WFr),e(q,QE),e(QE,zTe),e(zTe,HFr),e(QE,UFr),e(QE,FU),e(FU,JFr),e(QE,YFr),e(q,KFr),e(q,WE),e(WE,QTe),e(QTe,ZFr),e(WE,eTr),e(WE,TU),e(TU,oTr),e(WE,rTr),e(q,tTr),e(q,HE),e(HE,WTe),e(WTe,aTr),e(HE,nTr),e(HE,MU),e(MU,sTr),e(HE,lTr),e(q,iTr),e(q,UE),e(UE,HTe),e(HTe,dTr),e(UE,cTr),e(UE,EU),e(EU,mTr),e(UE,fTr),e(yr,gTr),M(JE,yr,null),b(m,DVe,_),b(m,sc,_),e(sc,YE),e(YE,UTe),M(k9,UTe,null),e(sc,hTr),e(sc,JTe),e(JTe,uTr),b(m,GVe,_),b(m,or,_),M(S9,or,null),e(or,pTr),e(or,lc),e(lc,_Tr),e(lc,CU),e(CU,bTr),e(lc,vTr),e(lc,wU),e(wU,FTr),e(lc,TTr),e(or,MTr),e(or,R9),e(R9,ETr),e(R9,YTe),e(YTe,CTr),e(R9,wTr),e(or,ATr),e(or,St),M(P9,St,null),e(St,LTr),e(St,KTe),e(KTe,yTr),e(St,xTr),e(St,ic),e(ic,$Tr),e(ic,ZTe),e(ZTe,kTr),e(ic,STr),e(ic,AU),e(AU,RTr),e(ic,PTr),e(St,BTr),M(KE,St,null),e(or,ITr),e(or,xr),M(B9,xr,null),e(xr,NTr),e(xr,eMe),e(eMe,qTr),e(xr,jTr),e(xr,sn),e(sn,DTr),e(sn,oMe),e(oMe,GTr),e(sn,OTr),e(sn,rMe),e(rMe,VTr),e(sn,XTr),e(sn,tMe),e(tMe,zTr),e(sn,QTr),e(xr,WTr),e(xr,se),e(se,ZE),e(ZE,aMe),e(aMe,HTr),e(ZE,UTr),e(ZE,LU),e(LU,JTr),e(ZE,YTr),e(se,KTr),e(se,eC),e(eC,nMe),e(nMe,ZTr),e(eC,eMr),e(eC,yU),e(yU,oMr),e(eC,rMr),e(se,tMr),e(se,oC),e(oC,sMe),e(sMe,aMr),e(oC,nMr),e(oC,xU),e(xU,sMr),e(oC,lMr),e(se,iMr),e(se,rC),e(rC,lMe),e(lMe,dMr),e(rC,cMr),e(rC,$U),e($U,mMr),e(rC,fMr),e(se,gMr),e(se,tC),e(tC,iMe),e(iMe,hMr),e(tC,uMr),e(tC,kU),e(kU,pMr),e(tC,_Mr),e(se,bMr),e(se,aC),e(aC,dMe),e(dMe,vMr),e(aC,FMr),e(aC,SU),e(SU,TMr),e(aC,MMr),e(se,EMr),e(se,nC),e(nC,cMe),e(cMe,CMr),e(nC,wMr),e(nC,RU),e(RU,AMr),e(nC,LMr),e(se,yMr),e(se,sC),e(sC,mMe),e(mMe,xMr),e(sC,$Mr),e(sC,PU),e(PU,kMr),e(sC,SMr),e(se,RMr),e(se,lC),e(lC,fMe),e(fMe,PMr),e(lC,BMr),e(lC,BU),e(BU,IMr),e(lC,NMr),e(se,qMr),e(se,iC),e(iC,gMe),e(gMe,jMr),e(iC,DMr),e(iC,IU),e(IU,GMr),e(iC,OMr),e(se,VMr),e(se,dC),e(dC,hMe),e(hMe,XMr),e(dC,zMr),e(dC,NU),e(NU,QMr),e(dC,WMr),e(se,HMr),e(se,cC),e(cC,uMe),e(uMe,UMr),e(cC,JMr),e(cC,qU),e(qU,YMr),e(cC,KMr),e(se,ZMr),e(se,mC),e(mC,pMe),e(pMe,e4r),e(mC,o4r),e(mC,jU),e(jU,r4r),e(mC,t4r),e(se,a4r),e(se,fC),e(fC,_Me),e(_Me,n4r),e(fC,s4r),e(fC,DU),e(DU,l4r),e(fC,i4r),e(se,d4r),e(se,gC),e(gC,bMe),e(bMe,c4r),e(gC,m4r),e(gC,GU),e(GU,f4r),e(gC,g4r),e(se,h4r),e(se,hC),e(hC,vMe),e(vMe,u4r),e(hC,p4r),e(hC,OU),e(OU,_4r),e(hC,b4r),e(se,v4r),e(se,uC),e(uC,FMe),e(FMe,F4r),e(uC,T4r),e(uC,VU),e(VU,M4r),e(uC,E4r),e(se,C4r),e(se,pC),e(pC,TMe),e(TMe,w4r),e(pC,A4r),e(pC,XU),e(XU,L4r),e(pC,y4r),e(se,x4r),e(se,_C),e(_C,MMe),e(MMe,$4r),e(_C,k4r),e(_C,zU),e(zU,S4r),e(_C,R4r),e(se,P4r),e(se,bC),e(bC,EMe),e(EMe,B4r),e(bC,I4r),e(bC,QU),e(QU,N4r),e(bC,q4r),e(se,j4r),e(se,vC),e(vC,CMe),e(CMe,D4r),e(vC,G4r),e(vC,WU),e(WU,O4r),e(vC,V4r),e(se,X4r),e(se,FC),e(FC,wMe),e(wMe,z4r),e(FC,Q4r),e(FC,HU),e(HU,W4r),e(FC,H4r),e(se,U4r),e(se,TC),e(TC,AMe),e(AMe,J4r),e(TC,Y4r),e(TC,UU),e(UU,K4r),e(TC,Z4r),e(xr,eEr),M(MC,xr,null),b(m,OVe,_),b(m,dc,_),e(dc,EC),e(EC,LMe),M(I9,LMe,null),e(dc,oEr),e(dc,yMe),e(yMe,rEr),b(m,VVe,_),b(m,rr,_),M(N9,rr,null),e(rr,tEr),e(rr,cc),e(cc,aEr),e(cc,JU),e(JU,nEr),e(cc,sEr),e(cc,YU),e(YU,lEr),e(cc,iEr),e(rr,dEr),e(rr,q9),e(q9,cEr),e(q9,xMe),e(xMe,mEr),e(q9,fEr),e(rr,gEr),e(rr,Rt),M(j9,Rt,null),e(Rt,hEr),e(Rt,$Me),e($Me,uEr),e(Rt,pEr),e(Rt,mc),e(mc,_Er),e(mc,kMe),e(kMe,bEr),e(mc,vEr),e(mc,KU),e(KU,FEr),e(mc,TEr),e(Rt,MEr),M(CC,Rt,null),e(rr,EEr),e(rr,$r),M(D9,$r,null),e($r,CEr),e($r,SMe),e(SMe,wEr),e($r,AEr),e($r,ln),e(ln,LEr),e(ln,RMe),e(RMe,yEr),e(ln,xEr),e(ln,PMe),e(PMe,$Er),e(ln,kEr),e(ln,BMe),e(BMe,SEr),e(ln,REr),e($r,PEr),e($r,Me),e(Me,wC),e(wC,IMe),e(IMe,BEr),e(wC,IEr),e(wC,ZU),e(ZU,NEr),e(wC,qEr),e(Me,jEr),e(Me,AC),e(AC,NMe),e(NMe,DEr),e(AC,GEr),e(AC,eJ),e(eJ,OEr),e(AC,VEr),e(Me,XEr),e(Me,LC),e(LC,qMe),e(qMe,zEr),e(LC,QEr),e(LC,oJ),e(oJ,WEr),e(LC,HEr),e(Me,UEr),e(Me,yC),e(yC,jMe),e(jMe,JEr),e(yC,YEr),e(yC,rJ),e(rJ,KEr),e(yC,ZEr),e(Me,eCr),e(Me,xC),e(xC,DMe),e(DMe,oCr),e(xC,rCr),e(xC,tJ),e(tJ,tCr),e(xC,aCr),e(Me,nCr),e(Me,$C),e($C,GMe),e(GMe,sCr),e($C,lCr),e($C,aJ),e(aJ,iCr),e($C,dCr),e(Me,cCr),e(Me,kC),e(kC,OMe),e(OMe,mCr),e(kC,fCr),e(kC,nJ),e(nJ,gCr),e(kC,hCr),e(Me,uCr),e(Me,SC),e(SC,VMe),e(VMe,pCr),e(SC,_Cr),e(SC,sJ),e(sJ,bCr),e(SC,vCr),e(Me,FCr),e(Me,RC),e(RC,XMe),e(XMe,TCr),e(RC,MCr),e(RC,lJ),e(lJ,ECr),e(RC,CCr),e(Me,wCr),e(Me,PC),e(PC,zMe),e(zMe,ACr),e(PC,LCr),e(PC,iJ),e(iJ,yCr),e(PC,xCr),e(Me,$Cr),e(Me,BC),e(BC,QMe),e(QMe,kCr),e(BC,SCr),e(BC,dJ),e(dJ,RCr),e(BC,PCr),e(Me,BCr),e(Me,IC),e(IC,WMe),e(WMe,ICr),e(IC,NCr),e(IC,cJ),e(cJ,qCr),e(IC,jCr),e(Me,DCr),e(Me,NC),e(NC,HMe),e(HMe,GCr),e(NC,OCr),e(NC,mJ),e(mJ,VCr),e(NC,XCr),e($r,zCr),M(qC,$r,null),b(m,XVe,_),b(m,fc,_),e(fc,jC),e(jC,UMe),M(G9,UMe,null),e(fc,QCr),e(fc,JMe),e(JMe,WCr),b(m,zVe,_),b(m,tr,_),M(O9,tr,null),e(tr,HCr),e(tr,gc),e(gc,UCr),e(gc,fJ),e(fJ,JCr),e(gc,YCr),e(gc,gJ),e(gJ,KCr),e(gc,ZCr),e(tr,e3r),e(tr,V9),e(V9,o3r),e(V9,YMe),e(YMe,r3r),e(V9,t3r),e(tr,a3r),e(tr,Pt),M(X9,Pt,null),e(Pt,n3r),e(Pt,KMe),e(KMe,s3r),e(Pt,l3r),e(Pt,hc),e(hc,i3r),e(hc,ZMe),e(ZMe,d3r),e(hc,c3r),e(hc,hJ),e(hJ,m3r),e(hc,f3r),e(Pt,g3r),M(DC,Pt,null),e(tr,h3r),e(tr,kr),M(z9,kr,null),e(kr,u3r),e(kr,e4e),e(e4e,p3r),e(kr,_3r),e(kr,dn),e(dn,b3r),e(dn,o4e),e(o4e,v3r),e(dn,F3r),e(dn,r4e),e(r4e,T3r),e(dn,M3r),e(dn,t4e),e(t4e,E3r),e(dn,C3r),e(kr,w3r),e(kr,rt),e(rt,GC),e(GC,a4e),e(a4e,A3r),e(GC,L3r),e(GC,uJ),e(uJ,y3r),e(GC,x3r),e(rt,$3r),e(rt,OC),e(OC,n4e),e(n4e,k3r),e(OC,S3r),e(OC,pJ),e(pJ,R3r),e(OC,P3r),e(rt,B3r),e(rt,VC),e(VC,s4e),e(s4e,I3r),e(VC,N3r),e(VC,_J),e(_J,q3r),e(VC,j3r),e(rt,D3r),e(rt,XC),e(XC,l4e),e(l4e,G3r),e(XC,O3r),e(XC,bJ),e(bJ,V3r),e(XC,X3r),e(rt,z3r),e(rt,zC),e(zC,i4e),e(i4e,Q3r),e(zC,W3r),e(zC,vJ),e(vJ,H3r),e(zC,U3r),e(kr,J3r),M(QC,kr,null),b(m,QVe,_),b(m,uc,_),e(uc,WC),e(WC,d4e),M(Q9,d4e,null),e(uc,Y3r),e(uc,c4e),e(c4e,K3r),b(m,WVe,_),b(m,ar,_),M(W9,ar,null),e(ar,Z3r),e(ar,pc),e(pc,e5r),e(pc,FJ),e(FJ,o5r),e(pc,r5r),e(pc,TJ),e(TJ,t5r),e(pc,a5r),e(ar,n5r),e(ar,H9),e(H9,s5r),e(H9,m4e),e(m4e,l5r),e(H9,i5r),e(ar,d5r),e(ar,Bt),M(U9,Bt,null),e(Bt,c5r),e(Bt,f4e),e(f4e,m5r),e(Bt,f5r),e(Bt,_c),e(_c,g5r),e(_c,g4e),e(g4e,h5r),e(_c,u5r),e(_c,MJ),e(MJ,p5r),e(_c,_5r),e(Bt,b5r),M(HC,Bt,null),e(ar,v5r),e(ar,Sr),M(J9,Sr,null),e(Sr,F5r),e(Sr,h4e),e(h4e,T5r),e(Sr,M5r),e(Sr,cn),e(cn,E5r),e(cn,u4e),e(u4e,C5r),e(cn,w5r),e(cn,p4e),e(p4e,A5r),e(cn,L5r),e(cn,_4e),e(_4e,y5r),e(cn,x5r),e(Sr,$5r),e(Sr,ie),e(ie,UC),e(UC,b4e),e(b4e,k5r),e(UC,S5r),e(UC,EJ),e(EJ,R5r),e(UC,P5r),e(ie,B5r),e(ie,JC),e(JC,v4e),e(v4e,I5r),e(JC,N5r),e(JC,CJ),e(CJ,q5r),e(JC,j5r),e(ie,D5r),e(ie,YC),e(YC,F4e),e(F4e,G5r),e(YC,O5r),e(YC,wJ),e(wJ,V5r),e(YC,X5r),e(ie,z5r),e(ie,KC),e(KC,T4e),e(T4e,Q5r),e(KC,W5r),e(KC,AJ),e(AJ,H5r),e(KC,U5r),e(ie,J5r),e(ie,ZC),e(ZC,M4e),e(M4e,Y5r),e(ZC,K5r),e(ZC,LJ),e(LJ,Z5r),e(ZC,e0r),e(ie,o0r),e(ie,e3),e(e3,E4e),e(E4e,r0r),e(e3,t0r),e(e3,yJ),e(yJ,a0r),e(e3,n0r),e(ie,s0r),e(ie,o3),e(o3,C4e),e(C4e,l0r),e(o3,i0r),e(o3,xJ),e(xJ,d0r),e(o3,c0r),e(ie,m0r),e(ie,r3),e(r3,w4e),e(w4e,f0r),e(r3,g0r),e(r3,$J),e($J,h0r),e(r3,u0r),e(ie,p0r),e(ie,t3),e(t3,A4e),e(A4e,_0r),e(t3,b0r),e(t3,kJ),e(kJ,v0r),e(t3,F0r),e(ie,T0r),e(ie,a3),e(a3,L4e),e(L4e,M0r),e(a3,E0r),e(a3,SJ),e(SJ,C0r),e(a3,w0r),e(ie,A0r),e(ie,n3),e(n3,y4e),e(y4e,L0r),e(n3,y0r),e(n3,RJ),e(RJ,x0r),e(n3,$0r),e(ie,k0r),e(ie,s3),e(s3,x4e),e(x4e,S0r),e(s3,R0r),e(s3,PJ),e(PJ,P0r),e(s3,B0r),e(ie,I0r),e(ie,l3),e(l3,$4e),e($4e,N0r),e(l3,q0r),e(l3,BJ),e(BJ,j0r),e(l3,D0r),e(ie,G0r),e(ie,i3),e(i3,k4e),e(k4e,O0r),e(i3,V0r),e(i3,IJ),e(IJ,X0r),e(i3,z0r),e(ie,Q0r),e(ie,d3),e(d3,S4e),e(S4e,W0r),e(d3,H0r),e(d3,NJ),e(NJ,U0r),e(d3,J0r),e(ie,Y0r),e(ie,c3),e(c3,R4e),e(R4e,K0r),e(c3,Z0r),e(c3,qJ),e(qJ,ewr),e(c3,owr),e(ie,rwr),e(ie,m3),e(m3,P4e),e(P4e,twr),e(m3,awr),e(m3,jJ),e(jJ,nwr),e(m3,swr),e(ie,lwr),e(ie,f3),e(f3,B4e),e(B4e,iwr),e(f3,dwr),e(f3,DJ),e(DJ,cwr),e(f3,mwr),e(ie,fwr),e(ie,g3),e(g3,I4e),e(I4e,gwr),e(g3,hwr),e(g3,GJ),e(GJ,uwr),e(g3,pwr),e(ie,_wr),e(ie,h3),e(h3,N4e),e(N4e,bwr),e(h3,vwr),e(h3,OJ),e(OJ,Fwr),e(h3,Twr),e(Sr,Mwr),M(u3,Sr,null),b(m,HVe,_),b(m,bc,_),e(bc,p3),e(p3,q4e),M(Y9,q4e,null),e(bc,Ewr),e(bc,j4e),e(j4e,Cwr),b(m,UVe,_),b(m,nr,_),M(K9,nr,null),e(nr,wwr),e(nr,vc),e(vc,Awr),e(vc,VJ),e(VJ,Lwr),e(vc,ywr),e(vc,XJ),e(XJ,xwr),e(vc,$wr),e(nr,kwr),e(nr,Z9),e(Z9,Swr),e(Z9,D4e),e(D4e,Rwr),e(Z9,Pwr),e(nr,Bwr),e(nr,It),M(ex,It,null),e(It,Iwr),e(It,G4e),e(G4e,Nwr),e(It,qwr),e(It,Fc),e(Fc,jwr),e(Fc,O4e),e(O4e,Dwr),e(Fc,Gwr),e(Fc,zJ),e(zJ,Owr),e(Fc,Vwr),e(It,Xwr),M(_3,It,null),e(nr,zwr),e(nr,Rr),M(ox,Rr,null),e(Rr,Qwr),e(Rr,V4e),e(V4e,Wwr),e(Rr,Hwr),e(Rr,mn),e(mn,Uwr),e(mn,X4e),e(X4e,Jwr),e(mn,Ywr),e(mn,z4e),e(z4e,Kwr),e(mn,Zwr),e(mn,Q4e),e(Q4e,eAr),e(mn,oAr),e(Rr,rAr),e(Rr,ye),e(ye,b3),e(b3,W4e),e(W4e,tAr),e(b3,aAr),e(b3,QJ),e(QJ,nAr),e(b3,sAr),e(ye,lAr),e(ye,v3),e(v3,H4e),e(H4e,iAr),e(v3,dAr),e(v3,WJ),e(WJ,cAr),e(v3,mAr),e(ye,fAr),e(ye,F3),e(F3,U4e),e(U4e,gAr),e(F3,hAr),e(F3,HJ),e(HJ,uAr),e(F3,pAr),e(ye,_Ar),e(ye,T3),e(T3,J4e),e(J4e,bAr),e(T3,vAr),e(T3,UJ),e(UJ,FAr),e(T3,TAr),e(ye,MAr),e(ye,M3),e(M3,Y4e),e(Y4e,EAr),e(M3,CAr),e(M3,JJ),e(JJ,wAr),e(M3,AAr),e(ye,LAr),e(ye,E3),e(E3,K4e),e(K4e,yAr),e(E3,xAr),e(E3,YJ),e(YJ,$Ar),e(E3,kAr),e(ye,SAr),e(ye,C3),e(C3,Z4e),e(Z4e,RAr),e(C3,PAr),e(C3,KJ),e(KJ,BAr),e(C3,IAr),e(ye,NAr),e(ye,w3),e(w3,eEe),e(eEe,qAr),e(w3,jAr),e(w3,ZJ),e(ZJ,DAr),e(w3,GAr),e(ye,OAr),e(ye,A3),e(A3,oEe),e(oEe,VAr),e(A3,XAr),e(A3,eY),e(eY,zAr),e(A3,QAr),e(ye,WAr),e(ye,L3),e(L3,rEe),e(rEe,HAr),e(L3,UAr),e(L3,oY),e(oY,JAr),e(L3,YAr),e(Rr,KAr),M(y3,Rr,null),b(m,JVe,_),b(m,Tc,_),e(Tc,x3),e(x3,tEe),M(rx,tEe,null),e(Tc,ZAr),e(Tc,aEe),e(aEe,e6r),b(m,YVe,_),b(m,sr,_),M(tx,sr,null),e(sr,o6r),e(sr,Mc),e(Mc,r6r),e(Mc,rY),e(rY,t6r),e(Mc,a6r),e(Mc,tY),e(tY,n6r),e(Mc,s6r),e(sr,l6r),e(sr,ax),e(ax,i6r),e(ax,nEe),e(nEe,d6r),e(ax,c6r),e(sr,m6r),e(sr,Nt),M(nx,Nt,null),e(Nt,f6r),e(Nt,sEe),e(sEe,g6r),e(Nt,h6r),e(Nt,Ec),e(Ec,u6r),e(Ec,lEe),e(lEe,p6r),e(Ec,_6r),e(Ec,aY),e(aY,b6r),e(Ec,v6r),e(Nt,F6r),M($3,Nt,null),e(sr,T6r),e(sr,Pr),M(sx,Pr,null),e(Pr,M6r),e(Pr,iEe),e(iEe,E6r),e(Pr,C6r),e(Pr,fn),e(fn,w6r),e(fn,dEe),e(dEe,A6r),e(fn,L6r),e(fn,cEe),e(cEe,y6r),e(fn,x6r),e(fn,mEe),e(mEe,$6r),e(fn,k6r),e(Pr,S6r),e(Pr,te),e(te,k3),e(k3,fEe),e(fEe,R6r),e(k3,P6r),e(k3,nY),e(nY,B6r),e(k3,I6r),e(te,N6r),e(te,S3),e(S3,gEe),e(gEe,q6r),e(S3,j6r),e(S3,sY),e(sY,D6r),e(S3,G6r),e(te,O6r),e(te,R3),e(R3,hEe),e(hEe,V6r),e(R3,X6r),e(R3,lY),e(lY,z6r),e(R3,Q6r),e(te,W6r),e(te,P3),e(P3,uEe),e(uEe,H6r),e(P3,U6r),e(P3,iY),e(iY,J6r),e(P3,Y6r),e(te,K6r),e(te,B3),e(B3,pEe),e(pEe,Z6r),e(B3,eLr),e(B3,dY),e(dY,oLr),e(B3,rLr),e(te,tLr),e(te,I3),e(I3,_Ee),e(_Ee,aLr),e(I3,nLr),e(I3,cY),e(cY,sLr),e(I3,lLr),e(te,iLr),e(te,N3),e(N3,bEe),e(bEe,dLr),e(N3,cLr),e(N3,mY),e(mY,mLr),e(N3,fLr),e(te,gLr),e(te,q3),e(q3,vEe),e(vEe,hLr),e(q3,uLr),e(q3,fY),e(fY,pLr),e(q3,_Lr),e(te,bLr),e(te,j3),e(j3,FEe),e(FEe,vLr),e(j3,FLr),e(j3,gY),e(gY,TLr),e(j3,MLr),e(te,ELr),e(te,D3),e(D3,TEe),e(TEe,CLr),e(D3,wLr),e(D3,hY),e(hY,ALr),e(D3,LLr),e(te,yLr),e(te,G3),e(G3,MEe),e(MEe,xLr),e(G3,$Lr),e(G3,uY),e(uY,kLr),e(G3,SLr),e(te,RLr),e(te,O3),e(O3,EEe),e(EEe,PLr),e(O3,BLr),e(O3,pY),e(pY,ILr),e(O3,NLr),e(te,qLr),e(te,V3),e(V3,CEe),e(CEe,jLr),e(V3,DLr),e(V3,_Y),e(_Y,GLr),e(V3,OLr),e(te,VLr),e(te,X3),e(X3,wEe),e(wEe,XLr),e(X3,zLr),e(X3,bY),e(bY,QLr),e(X3,WLr),e(te,HLr),e(te,z3),e(z3,AEe),e(AEe,ULr),e(z3,JLr),e(z3,vY),e(vY,YLr),e(z3,KLr),e(te,ZLr),e(te,Q3),e(Q3,LEe),e(LEe,e7r),e(Q3,o7r),e(Q3,FY),e(FY,r7r),e(Q3,t7r),e(te,a7r),e(te,W3),e(W3,yEe),e(yEe,n7r),e(W3,s7r),e(W3,TY),e(TY,l7r),e(W3,i7r),e(te,d7r),e(te,H3),e(H3,xEe),e(xEe,c7r),e(H3,m7r),e(H3,MY),e(MY,f7r),e(H3,g7r),e(te,h7r),e(te,U3),e(U3,$Ee),e($Ee,u7r),e(U3,p7r),e(U3,EY),e(EY,_7r),e(U3,b7r),e(te,v7r),e(te,J3),e(J3,kEe),e(kEe,F7r),e(J3,T7r),e(J3,CY),e(CY,M7r),e(J3,E7r),e(te,C7r),e(te,Y3),e(Y3,SEe),e(SEe,w7r),e(Y3,A7r),e(Y3,wY),e(wY,L7r),e(Y3,y7r),e(te,x7r),e(te,K3),e(K3,REe),e(REe,$7r),e(K3,k7r),e(K3,AY),e(AY,S7r),e(K3,R7r),e(te,P7r),e(te,Z3),e(Z3,PEe),e(PEe,B7r),e(Z3,I7r),e(Z3,LY),e(LY,N7r),e(Z3,q7r),e(te,j7r),e(te,e5),e(e5,BEe),e(BEe,D7r),e(e5,G7r),e(e5,yY),e(yY,O7r),e(e5,V7r),e(te,X7r),e(te,o5),e(o5,IEe),e(IEe,z7r),e(o5,Q7r),e(o5,xY),e(xY,W7r),e(o5,H7r),e(te,U7r),e(te,r5),e(r5,NEe),e(NEe,J7r),e(r5,Y7r),e(r5,$Y),e($Y,K7r),e(r5,Z7r),e(Pr,eyr),M(t5,Pr,null),b(m,KVe,_),b(m,Cc,_),e(Cc,a5),e(a5,qEe),M(lx,qEe,null),e(Cc,oyr),e(Cc,jEe),e(jEe,ryr),b(m,ZVe,_),b(m,lr,_),M(ix,lr,null),e(lr,tyr),e(lr,wc),e(wc,ayr),e(wc,kY),e(kY,nyr),e(wc,syr),e(wc,SY),e(SY,lyr),e(wc,iyr),e(lr,dyr),e(lr,dx),e(dx,cyr),e(dx,DEe),e(DEe,myr),e(dx,fyr),e(lr,gyr),e(lr,qt),M(cx,qt,null),e(qt,hyr),e(qt,GEe),e(GEe,uyr),e(qt,pyr),e(qt,Ac),e(Ac,_yr),e(Ac,OEe),e(OEe,byr),e(Ac,vyr),e(Ac,RY),e(RY,Fyr),e(Ac,Tyr),e(qt,Myr),M(n5,qt,null),e(lr,Eyr),e(lr,Br),M(mx,Br,null),e(Br,Cyr),e(Br,VEe),e(VEe,wyr),e(Br,Ayr),e(Br,gn),e(gn,Lyr),e(gn,XEe),e(XEe,yyr),e(gn,xyr),e(gn,zEe),e(zEe,$yr),e(gn,kyr),e(gn,QEe),e(QEe,Syr),e(gn,Ryr),e(Br,Pyr),e(Br,pe),e(pe,s5),e(s5,WEe),e(WEe,Byr),e(s5,Iyr),e(s5,PY),e(PY,Nyr),e(s5,qyr),e(pe,jyr),e(pe,l5),e(l5,HEe),e(HEe,Dyr),e(l5,Gyr),e(l5,BY),e(BY,Oyr),e(l5,Vyr),e(pe,Xyr),e(pe,i5),e(i5,UEe),e(UEe,zyr),e(i5,Qyr),e(i5,IY),e(IY,Wyr),e(i5,Hyr),e(pe,Uyr),e(pe,d5),e(d5,JEe),e(JEe,Jyr),e(d5,Yyr),e(d5,NY),e(NY,Kyr),e(d5,Zyr),e(pe,e8r),e(pe,c5),e(c5,YEe),e(YEe,o8r),e(c5,r8r),e(c5,qY),e(qY,t8r),e(c5,a8r),e(pe,n8r),e(pe,m5),e(m5,KEe),e(KEe,s8r),e(m5,l8r),e(m5,jY),e(jY,i8r),e(m5,d8r),e(pe,c8r),e(pe,f5),e(f5,ZEe),e(ZEe,m8r),e(f5,f8r),e(f5,DY),e(DY,g8r),e(f5,h8r),e(pe,u8r),e(pe,g5),e(g5,eCe),e(eCe,p8r),e(g5,_8r),e(g5,GY),e(GY,b8r),e(g5,v8r),e(pe,F8r),e(pe,h5),e(h5,oCe),e(oCe,T8r),e(h5,M8r),e(h5,OY),e(OY,E8r),e(h5,C8r),e(pe,w8r),e(pe,u5),e(u5,rCe),e(rCe,A8r),e(u5,L8r),e(u5,VY),e(VY,y8r),e(u5,x8r),e(pe,$8r),e(pe,p5),e(p5,tCe),e(tCe,k8r),e(p5,S8r),e(p5,XY),e(XY,R8r),e(p5,P8r),e(pe,B8r),e(pe,_5),e(_5,aCe),e(aCe,I8r),e(_5,N8r),e(_5,zY),e(zY,q8r),e(_5,j8r),e(pe,D8r),e(pe,b5),e(b5,nCe),e(nCe,G8r),e(b5,O8r),e(b5,QY),e(QY,V8r),e(b5,X8r),e(pe,z8r),e(pe,v5),e(v5,sCe),e(sCe,Q8r),e(v5,W8r),e(v5,WY),e(WY,H8r),e(v5,U8r),e(pe,J8r),e(pe,F5),e(F5,lCe),e(lCe,Y8r),e(F5,K8r),e(F5,HY),e(HY,Z8r),e(F5,e9r),e(pe,o9r),e(pe,T5),e(T5,iCe),e(iCe,r9r),e(T5,t9r),e(T5,UY),e(UY,a9r),e(T5,n9r),e(pe,s9r),e(pe,M5),e(M5,dCe),e(dCe,l9r),e(M5,i9r),e(M5,JY),e(JY,d9r),e(M5,c9r),e(Br,m9r),M(E5,Br,null),b(m,eXe,_),b(m,Lc,_),e(Lc,C5),e(C5,cCe),M(fx,cCe,null),e(Lc,f9r),e(Lc,mCe),e(mCe,g9r),b(m,oXe,_),b(m,ir,_),M(gx,ir,null),e(ir,h9r),e(ir,yc),e(yc,u9r),e(yc,YY),e(YY,p9r),e(yc,_9r),e(yc,KY),e(KY,b9r),e(yc,v9r),e(ir,F9r),e(ir,hx),e(hx,T9r),e(hx,fCe),e(fCe,M9r),e(hx,E9r),e(ir,C9r),e(ir,jt),M(ux,jt,null),e(jt,w9r),e(jt,gCe),e(gCe,A9r),e(jt,L9r),e(jt,xc),e(xc,y9r),e(xc,hCe),e(hCe,x9r),e(xc,$9r),e(xc,ZY),e(ZY,k9r),e(xc,S9r),e(jt,R9r),M(w5,jt,null),e(ir,P9r),e(ir,Ir),M(px,Ir,null),e(Ir,B9r),e(Ir,uCe),e(uCe,I9r),e(Ir,N9r),e(Ir,hn),e(hn,q9r),e(hn,pCe),e(pCe,j9r),e(hn,D9r),e(hn,_Ce),e(_Ce,G9r),e(hn,O9r),e(hn,bCe),e(bCe,V9r),e(hn,X9r),e(Ir,z9r),e(Ir,_x),e(_x,A5),e(A5,vCe),e(vCe,Q9r),e(A5,W9r),e(A5,eK),e(eK,H9r),e(A5,U9r),e(_x,J9r),e(_x,L5),e(L5,FCe),e(FCe,Y9r),e(L5,K9r),e(L5,oK),e(oK,Z9r),e(L5,exr),e(Ir,oxr),M(y5,Ir,null),b(m,rXe,_),b(m,$c,_),e($c,x5),e(x5,TCe),M(bx,TCe,null),e($c,rxr),e($c,MCe),e(MCe,txr),b(m,tXe,_),b(m,dr,_),M(vx,dr,null),e(dr,axr),e(dr,kc),e(kc,nxr),e(kc,rK),e(rK,sxr),e(kc,lxr),e(kc,tK),e(tK,ixr),e(kc,dxr),e(dr,cxr),e(dr,Fx),e(Fx,mxr),e(Fx,ECe),e(ECe,fxr),e(Fx,gxr),e(dr,hxr),e(dr,Dt),M(Tx,Dt,null),e(Dt,uxr),e(Dt,CCe),e(CCe,pxr),e(Dt,_xr),e(Dt,Sc),e(Sc,bxr),e(Sc,wCe),e(wCe,vxr),e(Sc,Fxr),e(Sc,aK),e(aK,Txr),e(Sc,Mxr),e(Dt,Exr),M($5,Dt,null),e(dr,Cxr),e(dr,Nr),M(Mx,Nr,null),e(Nr,wxr),e(Nr,ACe),e(ACe,Axr),e(Nr,Lxr),e(Nr,un),e(un,yxr),e(un,LCe),e(LCe,xxr),e(un,$xr),e(un,yCe),e(yCe,kxr),e(un,Sxr),e(un,xCe),e(xCe,Rxr),e(un,Pxr),e(Nr,Bxr),e(Nr,$Ce),e($Ce,k5),e(k5,kCe),e(kCe,Ixr),e(k5,Nxr),e(k5,nK),e(nK,qxr),e(k5,jxr),e(Nr,Dxr),M(S5,Nr,null),b(m,aXe,_),b(m,Rc,_),e(Rc,R5),e(R5,SCe),M(Ex,SCe,null),e(Rc,Gxr),e(Rc,RCe),e(RCe,Oxr),b(m,nXe,_),b(m,cr,_),M(Cx,cr,null),e(cr,Vxr),e(cr,Pc),e(Pc,Xxr),e(Pc,sK),e(sK,zxr),e(Pc,Qxr),e(Pc,lK),e(lK,Wxr),e(Pc,Hxr),e(cr,Uxr),e(cr,wx),e(wx,Jxr),e(wx,PCe),e(PCe,Yxr),e(wx,Kxr),e(cr,Zxr),e(cr,Gt),M(Ax,Gt,null),e(Gt,e$r),e(Gt,BCe),e(BCe,o$r),e(Gt,r$r),e(Gt,Bc),e(Bc,t$r),e(Bc,ICe),e(ICe,a$r),e(Bc,n$r),e(Bc,iK),e(iK,s$r),e(Bc,l$r),e(Gt,i$r),M(P5,Gt,null),e(cr,d$r),e(cr,qr),M(Lx,qr,null),e(qr,c$r),e(qr,NCe),e(NCe,m$r),e(qr,f$r),e(qr,pn),e(pn,g$r),e(pn,qCe),e(qCe,h$r),e(pn,u$r),e(pn,jCe),e(jCe,p$r),e(pn,_$r),e(pn,DCe),e(DCe,b$r),e(pn,v$r),e(qr,F$r),e(qr,de),e(de,B5),e(B5,GCe),e(GCe,T$r),e(B5,M$r),e(B5,dK),e(dK,E$r),e(B5,C$r),e(de,w$r),e(de,I5),e(I5,OCe),e(OCe,A$r),e(I5,L$r),e(I5,cK),e(cK,y$r),e(I5,x$r),e(de,$$r),e(de,N5),e(N5,VCe),e(VCe,k$r),e(N5,S$r),e(N5,mK),e(mK,R$r),e(N5,P$r),e(de,B$r),e(de,q5),e(q5,XCe),e(XCe,I$r),e(q5,N$r),e(q5,fK),e(fK,q$r),e(q5,j$r),e(de,D$r),e(de,j5),e(j5,zCe),e(zCe,G$r),e(j5,O$r),e(j5,gK),e(gK,V$r),e(j5,X$r),e(de,z$r),e(de,D5),e(D5,QCe),e(QCe,Q$r),e(D5,W$r),e(D5,hK),e(hK,H$r),e(D5,U$r),e(de,J$r),e(de,G5),e(G5,WCe),e(WCe,Y$r),e(G5,K$r),e(G5,uK),e(uK,Z$r),e(G5,ekr),e(de,okr),e(de,O5),e(O5,HCe),e(HCe,rkr),e(O5,tkr),e(O5,pK),e(pK,akr),e(O5,nkr),e(de,skr),e(de,V5),e(V5,UCe),e(UCe,lkr),e(V5,ikr),e(V5,_K),e(_K,dkr),e(V5,ckr),e(de,mkr),e(de,X5),e(X5,JCe),e(JCe,fkr),e(X5,gkr),e(X5,bK),e(bK,hkr),e(X5,ukr),e(de,pkr),e(de,z5),e(z5,YCe),e(YCe,_kr),e(z5,bkr),e(z5,vK),e(vK,vkr),e(z5,Fkr),e(de,Tkr),e(de,Q5),e(Q5,KCe),e(KCe,Mkr),e(Q5,Ekr),e(Q5,FK),e(FK,Ckr),e(Q5,wkr),e(de,Akr),e(de,W5),e(W5,ZCe),e(ZCe,Lkr),e(W5,ykr),e(W5,TK),e(TK,xkr),e(W5,$kr),e(de,kkr),e(de,H5),e(H5,e3e),e(e3e,Skr),e(H5,Rkr),e(H5,MK),e(MK,Pkr),e(H5,Bkr),e(de,Ikr),e(de,U5),e(U5,o3e),e(o3e,Nkr),e(U5,qkr),e(U5,EK),e(EK,jkr),e(U5,Dkr),e(de,Gkr),e(de,J5),e(J5,r3e),e(r3e,Okr),e(J5,Vkr),e(J5,CK),e(CK,Xkr),e(J5,zkr),e(de,Qkr),e(de,Y5),e(Y5,t3e),e(t3e,Wkr),e(Y5,Hkr),e(Y5,wK),e(wK,Ukr),e(Y5,Jkr),e(de,Ykr),e(de,K5),e(K5,a3e),e(a3e,Kkr),e(K5,Zkr),e(K5,AK),e(AK,eSr),e(K5,oSr),e(de,rSr),e(de,Z5),e(Z5,n3e),e(n3e,tSr),e(Z5,aSr),e(Z5,LK),e(LK,nSr),e(Z5,sSr),e(de,lSr),e(de,e0),e(e0,s3e),e(s3e,iSr),e(e0,dSr),e(e0,yK),e(yK,cSr),e(e0,mSr),e(qr,fSr),M(o0,qr,null),b(m,sXe,_),b(m,Ic,_),e(Ic,r0),e(r0,l3e),M(yx,l3e,null),e(Ic,gSr),e(Ic,i3e),e(i3e,hSr),b(m,lXe,_),b(m,mr,_),M(xx,mr,null),e(mr,uSr),e(mr,Nc),e(Nc,pSr),e(Nc,xK),e(xK,_Sr),e(Nc,bSr),e(Nc,$K),e($K,vSr),e(Nc,FSr),e(mr,TSr),e(mr,$x),e($x,MSr),e($x,d3e),e(d3e,ESr),e($x,CSr),e(mr,wSr),e(mr,Ot),M(kx,Ot,null),e(Ot,ASr),e(Ot,c3e),e(c3e,LSr),e(Ot,ySr),e(Ot,qc),e(qc,xSr),e(qc,m3e),e(m3e,$Sr),e(qc,kSr),e(qc,kK),e(kK,SSr),e(qc,RSr),e(Ot,PSr),M(t0,Ot,null),e(mr,BSr),e(mr,jr),M(Sx,jr,null),e(jr,ISr),e(jr,f3e),e(f3e,NSr),e(jr,qSr),e(jr,_n),e(_n,jSr),e(_n,g3e),e(g3e,DSr),e(_n,GSr),e(_n,h3e),e(h3e,OSr),e(_n,VSr),e(_n,u3e),e(u3e,XSr),e(_n,zSr),e(jr,QSr),e(jr,ce),e(ce,a0),e(a0,p3e),e(p3e,WSr),e(a0,HSr),e(a0,SK),e(SK,USr),e(a0,JSr),e(ce,YSr),e(ce,n0),e(n0,_3e),e(_3e,KSr),e(n0,ZSr),e(n0,RK),e(RK,eRr),e(n0,oRr),e(ce,rRr),e(ce,s0),e(s0,b3e),e(b3e,tRr),e(s0,aRr),e(s0,PK),e(PK,nRr),e(s0,sRr),e(ce,lRr),e(ce,l0),e(l0,v3e),e(v3e,iRr),e(l0,dRr),e(l0,BK),e(BK,cRr),e(l0,mRr),e(ce,fRr),e(ce,i0),e(i0,F3e),e(F3e,gRr),e(i0,hRr),e(i0,IK),e(IK,uRr),e(i0,pRr),e(ce,_Rr),e(ce,d0),e(d0,T3e),e(T3e,bRr),e(d0,vRr),e(d0,NK),e(NK,FRr),e(d0,TRr),e(ce,MRr),e(ce,c0),e(c0,M3e),e(M3e,ERr),e(c0,CRr),e(c0,qK),e(qK,wRr),e(c0,ARr),e(ce,LRr),e(ce,m0),e(m0,E3e),e(E3e,yRr),e(m0,xRr),e(m0,jK),e(jK,$Rr),e(m0,kRr),e(ce,SRr),e(ce,f0),e(f0,C3e),e(C3e,RRr),e(f0,PRr),e(f0,DK),e(DK,BRr),e(f0,IRr),e(ce,NRr),e(ce,g0),e(g0,w3e),e(w3e,qRr),e(g0,jRr),e(g0,GK),e(GK,DRr),e(g0,GRr),e(ce,ORr),e(ce,h0),e(h0,A3e),e(A3e,VRr),e(h0,XRr),e(h0,OK),e(OK,zRr),e(h0,QRr),e(ce,WRr),e(ce,u0),e(u0,L3e),e(L3e,HRr),e(u0,URr),e(u0,VK),e(VK,JRr),e(u0,YRr),e(ce,KRr),e(ce,p0),e(p0,y3e),e(y3e,ZRr),e(p0,ePr),e(p0,XK),e(XK,oPr),e(p0,rPr),e(ce,tPr),e(ce,_0),e(_0,x3e),e(x3e,aPr),e(_0,nPr),e(_0,zK),e(zK,sPr),e(_0,lPr),e(ce,iPr),e(ce,b0),e(b0,$3e),e($3e,dPr),e(b0,cPr),e(b0,QK),e(QK,mPr),e(b0,fPr),e(ce,gPr),e(ce,v0),e(v0,k3e),e(k3e,hPr),e(v0,uPr),e(v0,WK),e(WK,pPr),e(v0,_Pr),e(ce,bPr),e(ce,F0),e(F0,S3e),e(S3e,vPr),e(F0,FPr),e(F0,HK),e(HK,TPr),e(F0,MPr),e(ce,EPr),e(ce,T0),e(T0,R3e),e(R3e,CPr),e(T0,wPr),e(T0,UK),e(UK,APr),e(T0,LPr),e(ce,yPr),e(ce,M0),e(M0,P3e),e(P3e,xPr),e(M0,$Pr),e(M0,JK),e(JK,kPr),e(M0,SPr),e(ce,RPr),e(ce,E0),e(E0,B3e),e(B3e,PPr),e(E0,BPr),e(E0,YK),e(YK,IPr),e(E0,NPr),e(jr,qPr),M(C0,jr,null),b(m,iXe,_),b(m,jc,_),e(jc,w0),e(w0,I3e),M(Rx,I3e,null),e(jc,jPr),e(jc,N3e),e(N3e,DPr),b(m,dXe,_),b(m,fr,_),M(Px,fr,null),e(fr,GPr),e(fr,Dc),e(Dc,OPr),e(Dc,KK),e(KK,VPr),e(Dc,XPr),e(Dc,ZK),e(ZK,zPr),e(Dc,QPr),e(fr,WPr),e(fr,Bx),e(Bx,HPr),e(Bx,q3e),e(q3e,UPr),e(Bx,JPr),e(fr,YPr),e(fr,Vt),M(Ix,Vt,null),e(Vt,KPr),e(Vt,j3e),e(j3e,ZPr),e(Vt,eBr),e(Vt,Gc),e(Gc,oBr),e(Gc,D3e),e(D3e,rBr),e(Gc,tBr),e(Gc,eZ),e(eZ,aBr),e(Gc,nBr),e(Vt,sBr),M(A0,Vt,null),e(fr,lBr),e(fr,Dr),M(Nx,Dr,null),e(Dr,iBr),e(Dr,G3e),e(G3e,dBr),e(Dr,cBr),e(Dr,bn),e(bn,mBr),e(bn,O3e),e(O3e,fBr),e(bn,gBr),e(bn,V3e),e(V3e,hBr),e(bn,uBr),e(bn,X3e),e(X3e,pBr),e(bn,_Br),e(Dr,bBr),e(Dr,z3e),e(z3e,L0),e(L0,Q3e),e(Q3e,vBr),e(L0,FBr),e(L0,oZ),e(oZ,TBr),e(L0,MBr),e(Dr,EBr),M(y0,Dr,null),b(m,cXe,_),b(m,Oc,_),e(Oc,x0),e(x0,W3e),M(qx,W3e,null),e(Oc,CBr),e(Oc,H3e),e(H3e,wBr),b(m,mXe,_),b(m,gr,_),M(jx,gr,null),e(gr,ABr),e(gr,Vc),e(Vc,LBr),e(Vc,rZ),e(rZ,yBr),e(Vc,xBr),e(Vc,tZ),e(tZ,$Br),e(Vc,kBr),e(gr,SBr),e(gr,Dx),e(Dx,RBr),e(Dx,U3e),e(U3e,PBr),e(Dx,BBr),e(gr,IBr),e(gr,Xt),M(Gx,Xt,null),e(Xt,NBr),e(Xt,J3e),e(J3e,qBr),e(Xt,jBr),e(Xt,Xc),e(Xc,DBr),e(Xc,Y3e),e(Y3e,GBr),e(Xc,OBr),e(Xc,aZ),e(aZ,VBr),e(Xc,XBr),e(Xt,zBr),M($0,Xt,null),e(gr,QBr),e(gr,Gr),M(Ox,Gr,null),e(Gr,WBr),e(Gr,K3e),e(K3e,HBr),e(Gr,UBr),e(Gr,vn),e(vn,JBr),e(vn,Z3e),e(Z3e,YBr),e(vn,KBr),e(vn,e5e),e(e5e,ZBr),e(vn,eIr),e(vn,o5e),e(o5e,oIr),e(vn,rIr),e(Gr,tIr),e(Gr,r5e),e(r5e,k0),e(k0,t5e),e(t5e,aIr),e(k0,nIr),e(k0,nZ),e(nZ,sIr),e(k0,lIr),e(Gr,iIr),M(S0,Gr,null),b(m,fXe,_),b(m,zc,_),e(zc,R0),e(R0,a5e),M(Vx,a5e,null),e(zc,dIr),e(zc,n5e),e(n5e,cIr),b(m,gXe,_),b(m,hr,_),M(Xx,hr,null),e(hr,mIr),e(hr,Qc),e(Qc,fIr),e(Qc,sZ),e(sZ,gIr),e(Qc,hIr),e(Qc,lZ),e(lZ,uIr),e(Qc,pIr),e(hr,_Ir),e(hr,zx),e(zx,bIr),e(zx,s5e),e(s5e,vIr),e(zx,FIr),e(hr,TIr),e(hr,zt),M(Qx,zt,null),e(zt,MIr),e(zt,l5e),e(l5e,EIr),e(zt,CIr),e(zt,Wc),e(Wc,wIr),e(Wc,i5e),e(i5e,AIr),e(Wc,LIr),e(Wc,iZ),e(iZ,yIr),e(Wc,xIr),e(zt,$Ir),M(P0,zt,null),e(hr,kIr),e(hr,Or),M(Wx,Or,null),e(Or,SIr),e(Or,d5e),e(d5e,RIr),e(Or,PIr),e(Or,Fn),e(Fn,BIr),e(Fn,c5e),e(c5e,IIr),e(Fn,NIr),e(Fn,m5e),e(m5e,qIr),e(Fn,jIr),e(Fn,f5e),e(f5e,DIr),e(Fn,GIr),e(Or,OIr),e(Or,oe),e(oe,B0),e(B0,g5e),e(g5e,VIr),e(B0,XIr),e(B0,dZ),e(dZ,zIr),e(B0,QIr),e(oe,WIr),e(oe,I0),e(I0,h5e),e(h5e,HIr),e(I0,UIr),e(I0,cZ),e(cZ,JIr),e(I0,YIr),e(oe,KIr),e(oe,N0),e(N0,u5e),e(u5e,ZIr),e(N0,eNr),e(N0,mZ),e(mZ,oNr),e(N0,rNr),e(oe,tNr),e(oe,q0),e(q0,p5e),e(p5e,aNr),e(q0,nNr),e(q0,fZ),e(fZ,sNr),e(q0,lNr),e(oe,iNr),e(oe,j0),e(j0,_5e),e(_5e,dNr),e(j0,cNr),e(j0,gZ),e(gZ,mNr),e(j0,fNr),e(oe,gNr),e(oe,D0),e(D0,b5e),e(b5e,hNr),e(D0,uNr),e(D0,hZ),e(hZ,pNr),e(D0,_Nr),e(oe,bNr),e(oe,G0),e(G0,v5e),e(v5e,vNr),e(G0,FNr),e(G0,uZ),e(uZ,TNr),e(G0,MNr),e(oe,ENr),e(oe,O0),e(O0,F5e),e(F5e,CNr),e(O0,wNr),e(O0,pZ),e(pZ,ANr),e(O0,LNr),e(oe,yNr),e(oe,V0),e(V0,T5e),e(T5e,xNr),e(V0,$Nr),e(V0,_Z),e(_Z,kNr),e(V0,SNr),e(oe,RNr),e(oe,X0),e(X0,M5e),e(M5e,PNr),e(X0,BNr),e(X0,bZ),e(bZ,INr),e(X0,NNr),e(oe,qNr),e(oe,z0),e(z0,E5e),e(E5e,jNr),e(z0,DNr),e(z0,vZ),e(vZ,GNr),e(z0,ONr),e(oe,VNr),e(oe,Q0),e(Q0,C5e),e(C5e,XNr),e(Q0,zNr),e(Q0,FZ),e(FZ,QNr),e(Q0,WNr),e(oe,HNr),e(oe,W0),e(W0,w5e),e(w5e,UNr),e(W0,JNr),e(W0,TZ),e(TZ,YNr),e(W0,KNr),e(oe,ZNr),e(oe,H0),e(H0,A5e),e(A5e,eqr),e(H0,oqr),e(H0,MZ),e(MZ,rqr),e(H0,tqr),e(oe,aqr),e(oe,U0),e(U0,L5e),e(L5e,nqr),e(U0,sqr),e(U0,EZ),e(EZ,lqr),e(U0,iqr),e(oe,dqr),e(oe,J0),e(J0,y5e),e(y5e,cqr),e(J0,mqr),e(J0,CZ),e(CZ,fqr),e(J0,gqr),e(oe,hqr),e(oe,Y0),e(Y0,x5e),e(x5e,uqr),e(Y0,pqr),e(Y0,wZ),e(wZ,_qr),e(Y0,bqr),e(oe,vqr),e(oe,K0),e(K0,$5e),e($5e,Fqr),e(K0,Tqr),e(K0,AZ),e(AZ,Mqr),e(K0,Eqr),e(oe,Cqr),e(oe,Z0),e(Z0,k5e),e(k5e,wqr),e(Z0,Aqr),e(Z0,LZ),e(LZ,Lqr),e(Z0,yqr),e(oe,xqr),e(oe,ew),e(ew,S5e),e(S5e,$qr),e(ew,kqr),e(ew,yZ),e(yZ,Sqr),e(ew,Rqr),e(oe,Pqr),e(oe,ow),e(ow,R5e),e(R5e,Bqr),e(ow,Iqr),e(ow,xZ),e(xZ,Nqr),e(ow,qqr),e(oe,jqr),e(oe,rw),e(rw,P5e),e(P5e,Dqr),e(rw,Gqr),e(rw,$Z),e($Z,Oqr),e(rw,Vqr),e(oe,Xqr),e(oe,tw),e(tw,B5e),e(B5e,zqr),e(tw,Qqr),e(tw,kZ),e(kZ,Wqr),e(tw,Hqr),e(oe,Uqr),e(oe,aw),e(aw,I5e),e(I5e,Jqr),e(aw,Yqr),e(aw,SZ),e(SZ,Kqr),e(aw,Zqr),e(oe,ejr),e(oe,nw),e(nw,N5e),e(N5e,ojr),e(nw,rjr),e(nw,RZ),e(RZ,tjr),e(nw,ajr),e(oe,njr),e(oe,sw),e(sw,q5e),e(q5e,sjr),e(sw,ljr),e(sw,PZ),e(PZ,ijr),e(sw,djr),e(oe,cjr),e(oe,lw),e(lw,j5e),e(j5e,mjr),e(lw,fjr),e(lw,BZ),e(BZ,gjr),e(lw,hjr),e(Or,ujr),M(iw,Or,null),b(m,hXe,_),b(m,Hc,_),e(Hc,dw),e(dw,D5e),M(Hx,D5e,null),e(Hc,pjr),e(Hc,G5e),e(G5e,_jr),b(m,uXe,_),b(m,ur,_),M(Ux,ur,null),e(ur,bjr),e(ur,Uc),e(Uc,vjr),e(Uc,IZ),e(IZ,Fjr),e(Uc,Tjr),e(Uc,NZ),e(NZ,Mjr),e(Uc,Ejr),e(ur,Cjr),e(ur,Jx),e(Jx,wjr),e(Jx,O5e),e(O5e,Ajr),e(Jx,Ljr),e(ur,yjr),e(ur,Qt),M(Yx,Qt,null),e(Qt,xjr),e(Qt,V5e),e(V5e,$jr),e(Qt,kjr),e(Qt,Jc),e(Jc,Sjr),e(Jc,X5e),e(X5e,Rjr),e(Jc,Pjr),e(Jc,qZ),e(qZ,Bjr),e(Jc,Ijr),e(Qt,Njr),M(cw,Qt,null),e(ur,qjr),e(ur,Vr),M(Kx,Vr,null),e(Vr,jjr),e(Vr,z5e),e(z5e,Djr),e(Vr,Gjr),e(Vr,Tn),e(Tn,Ojr),e(Tn,Q5e),e(Q5e,Vjr),e(Tn,Xjr),e(Tn,W5e),e(W5e,zjr),e(Tn,Qjr),e(Tn,H5e),e(H5e,Wjr),e(Tn,Hjr),e(Vr,Ujr),e(Vr,xe),e(xe,mw),e(mw,U5e),e(U5e,Jjr),e(mw,Yjr),e(mw,jZ),e(jZ,Kjr),e(mw,Zjr),e(xe,eDr),e(xe,fw),e(fw,J5e),e(J5e,oDr),e(fw,rDr),e(fw,DZ),e(DZ,tDr),e(fw,aDr),e(xe,nDr),e(xe,gw),e(gw,Y5e),e(Y5e,sDr),e(gw,lDr),e(gw,GZ),e(GZ,iDr),e(gw,dDr),e(xe,cDr),e(xe,hw),e(hw,K5e),e(K5e,mDr),e(hw,fDr),e(hw,OZ),e(OZ,gDr),e(hw,hDr),e(xe,uDr),e(xe,uw),e(uw,Z5e),e(Z5e,pDr),e(uw,_Dr),e(uw,VZ),e(VZ,bDr),e(uw,vDr),e(xe,FDr),e(xe,pw),e(pw,e0e),e(e0e,TDr),e(pw,MDr),e(pw,XZ),e(XZ,EDr),e(pw,CDr),e(xe,wDr),e(xe,_w),e(_w,o0e),e(o0e,ADr),e(_w,LDr),e(_w,zZ),e(zZ,yDr),e(_w,xDr),e(xe,$Dr),e(xe,bw),e(bw,r0e),e(r0e,kDr),e(bw,SDr),e(bw,QZ),e(QZ,RDr),e(bw,PDr),e(xe,BDr),e(xe,vw),e(vw,t0e),e(t0e,IDr),e(vw,NDr),e(vw,WZ),e(WZ,qDr),e(vw,jDr),e(xe,DDr),e(xe,Fw),e(Fw,a0e),e(a0e,GDr),e(Fw,ODr),e(Fw,HZ),e(HZ,VDr),e(Fw,XDr),e(Vr,zDr),M(Tw,Vr,null),b(m,pXe,_),b(m,Yc,_),e(Yc,Mw),e(Mw,n0e),M(Zx,n0e,null),e(Yc,QDr),e(Yc,s0e),e(s0e,WDr),b(m,_Xe,_),b(m,pr,_),M(e$,pr,null),e(pr,HDr),e(pr,Kc),e(Kc,UDr),e(Kc,UZ),e(UZ,JDr),e(Kc,YDr),e(Kc,JZ),e(JZ,KDr),e(Kc,ZDr),e(pr,eGr),e(pr,o$),e(o$,oGr),e(o$,l0e),e(l0e,rGr),e(o$,tGr),e(pr,aGr),e(pr,Wt),M(r$,Wt,null),e(Wt,nGr),e(Wt,i0e),e(i0e,sGr),e(Wt,lGr),e(Wt,Zc),e(Zc,iGr),e(Zc,d0e),e(d0e,dGr),e(Zc,cGr),e(Zc,YZ),e(YZ,mGr),e(Zc,fGr),e(Wt,gGr),M(Ew,Wt,null),e(pr,hGr),e(pr,Xr),M(t$,Xr,null),e(Xr,uGr),e(Xr,c0e),e(c0e,pGr),e(Xr,_Gr),e(Xr,Mn),e(Mn,bGr),e(Mn,m0e),e(m0e,vGr),e(Mn,FGr),e(Mn,f0e),e(f0e,TGr),e(Mn,MGr),e(Mn,g0e),e(g0e,EGr),e(Mn,CGr),e(Xr,wGr),e(Xr,Ee),e(Ee,Cw),e(Cw,h0e),e(h0e,AGr),e(Cw,LGr),e(Cw,KZ),e(KZ,yGr),e(Cw,xGr),e(Ee,$Gr),e(Ee,ww),e(ww,u0e),e(u0e,kGr),e(ww,SGr),e(ww,ZZ),e(ZZ,RGr),e(ww,PGr),e(Ee,BGr),e(Ee,Aw),e(Aw,p0e),e(p0e,IGr),e(Aw,NGr),e(Aw,eee),e(eee,qGr),e(Aw,jGr),e(Ee,DGr),e(Ee,Lw),e(Lw,_0e),e(_0e,GGr),e(Lw,OGr),e(Lw,oee),e(oee,VGr),e(Lw,XGr),e(Ee,zGr),e(Ee,yw),e(yw,b0e),e(b0e,QGr),e(yw,WGr),e(yw,ree),e(ree,HGr),e(yw,UGr),e(Ee,JGr),e(Ee,xw),e(xw,v0e),e(v0e,YGr),e(xw,KGr),e(xw,tee),e(tee,ZGr),e(xw,eOr),e(Ee,oOr),e(Ee,$w),e($w,F0e),e(F0e,rOr),e($w,tOr),e($w,aee),e(aee,aOr),e($w,nOr),e(Ee,sOr),e(Ee,kw),e(kw,T0e),e(T0e,lOr),e(kw,iOr),e(kw,nee),e(nee,dOr),e(kw,cOr),e(Ee,mOr),e(Ee,Sw),e(Sw,M0e),e(M0e,fOr),e(Sw,gOr),e(Sw,see),e(see,hOr),e(Sw,uOr),e(Ee,pOr),e(Ee,Rw),e(Rw,E0e),e(E0e,_Or),e(Rw,bOr),e(Rw,lee),e(lee,vOr),e(Rw,FOr),e(Ee,TOr),e(Ee,Pw),e(Pw,C0e),e(C0e,MOr),e(Pw,EOr),e(Pw,iee),e(iee,COr),e(Pw,wOr),e(Ee,AOr),e(Ee,Bw),e(Bw,w0e),e(w0e,LOr),e(Bw,yOr),e(Bw,dee),e(dee,xOr),e(Bw,$Or),e(Ee,kOr),e(Ee,Iw),e(Iw,A0e),e(A0e,SOr),e(Iw,ROr),e(Iw,cee),e(cee,POr),e(Iw,BOr),e(Xr,IOr),M(Nw,Xr,null),b(m,bXe,_),b(m,em,_),e(em,qw),e(qw,L0e),M(a$,L0e,null),e(em,NOr),e(em,y0e),e(y0e,qOr),b(m,vXe,_),b(m,_r,_),M(n$,_r,null),e(_r,jOr),e(_r,om),e(om,DOr),e(om,mee),e(mee,GOr),e(om,OOr),e(om,fee),e(fee,VOr),e(om,XOr),e(_r,zOr),e(_r,s$),e(s$,QOr),e(s$,x0e),e(x0e,WOr),e(s$,HOr),e(_r,UOr),e(_r,Ht),M(l$,Ht,null),e(Ht,JOr),e(Ht,$0e),e($0e,YOr),e(Ht,KOr),e(Ht,rm),e(rm,ZOr),e(rm,k0e),e(k0e,eVr),e(rm,oVr),e(rm,gee),e(gee,rVr),e(rm,tVr),e(Ht,aVr),M(jw,Ht,null),e(_r,nVr),e(_r,zr),M(i$,zr,null),e(zr,sVr),e(zr,S0e),e(S0e,lVr),e(zr,iVr),e(zr,En),e(En,dVr),e(En,R0e),e(R0e,cVr),e(En,mVr),e(En,P0e),e(P0e,fVr),e(En,gVr),e(En,B0e),e(B0e,hVr),e(En,uVr),e(zr,pVr),e(zr,$e),e($e,Dw),e(Dw,I0e),e(I0e,_Vr),e(Dw,bVr),e(Dw,hee),e(hee,vVr),e(Dw,FVr),e($e,TVr),e($e,Gw),e(Gw,N0e),e(N0e,MVr),e(Gw,EVr),e(Gw,uee),e(uee,CVr),e(Gw,wVr),e($e,AVr),e($e,Ow),e(Ow,q0e),e(q0e,LVr),e(Ow,yVr),e(Ow,pee),e(pee,xVr),e(Ow,$Vr),e($e,kVr),e($e,Vw),e(Vw,j0e),e(j0e,SVr),e(Vw,RVr),e(Vw,_ee),e(_ee,PVr),e(Vw,BVr),e($e,IVr),e($e,Xw),e(Xw,D0e),e(D0e,NVr),e(Xw,qVr),e(Xw,bee),e(bee,jVr),e(Xw,DVr),e($e,GVr),e($e,zw),e(zw,G0e),e(G0e,OVr),e(zw,VVr),e(zw,vee),e(vee,XVr),e(zw,zVr),e($e,QVr),e($e,Qw),e(Qw,O0e),e(O0e,WVr),e(Qw,HVr),e(Qw,Fee),e(Fee,UVr),e(Qw,JVr),e($e,YVr),e($e,Ww),e(Ww,V0e),e(V0e,KVr),e(Ww,ZVr),e(Ww,Tee),e(Tee,eXr),e(Ww,oXr),e($e,rXr),e($e,Hw),e(Hw,X0e),e(X0e,tXr),e(Hw,aXr),e(Hw,Mee),e(Mee,nXr),e(Hw,sXr),e($e,lXr),e($e,Uw),e(Uw,z0e),e(z0e,iXr),e(Uw,dXr),e(Uw,Eee),e(Eee,cXr),e(Uw,mXr),e(zr,fXr),M(Jw,zr,null),b(m,FXe,_),b(m,tm,_),e(tm,Yw),e(Yw,Q0e),M(d$,Q0e,null),e(tm,gXr),e(tm,W0e),e(W0e,hXr),b(m,TXe,_),b(m,br,_),M(c$,br,null),e(br,uXr),e(br,am),e(am,pXr),e(am,Cee),e(Cee,_Xr),e(am,bXr),e(am,wee),e(wee,vXr),e(am,FXr),e(br,TXr),e(br,m$),e(m$,MXr),e(m$,H0e),e(H0e,EXr),e(m$,CXr),e(br,wXr),e(br,Ut),M(f$,Ut,null),e(Ut,AXr),e(Ut,U0e),e(U0e,LXr),e(Ut,yXr),e(Ut,nm),e(nm,xXr),e(nm,J0e),e(J0e,$Xr),e(nm,kXr),e(nm,Aee),e(Aee,SXr),e(nm,RXr),e(Ut,PXr),M(Kw,Ut,null),e(br,BXr),e(br,Qr),M(g$,Qr,null),e(Qr,IXr),e(Qr,Y0e),e(Y0e,NXr),e(Qr,qXr),e(Qr,Cn),e(Cn,jXr),e(Cn,K0e),e(K0e,DXr),e(Cn,GXr),e(Cn,Z0e),e(Z0e,OXr),e(Cn,VXr),e(Cn,ewe),e(ewe,XXr),e(Cn,zXr),e(Qr,QXr),e(Qr,ke),e(ke,Zw),e(Zw,owe),e(owe,WXr),e(Zw,HXr),e(Zw,Lee),e(Lee,UXr),e(Zw,JXr),e(ke,YXr),e(ke,eA),e(eA,rwe),e(rwe,KXr),e(eA,ZXr),e(eA,yee),e(yee,ezr),e(eA,ozr),e(ke,rzr),e(ke,oA),e(oA,twe),e(twe,tzr),e(oA,azr),e(oA,xee),e(xee,nzr),e(oA,szr),e(ke,lzr),e(ke,rA),e(rA,awe),e(awe,izr),e(rA,dzr),e(rA,$ee),e($ee,czr),e(rA,mzr),e(ke,fzr),e(ke,tA),e(tA,nwe),e(nwe,gzr),e(tA,hzr),e(tA,kee),e(kee,uzr),e(tA,pzr),e(ke,_zr),e(ke,aA),e(aA,swe),e(swe,bzr),e(aA,vzr),e(aA,See),e(See,Fzr),e(aA,Tzr),e(ke,Mzr),e(ke,nA),e(nA,lwe),e(lwe,Ezr),e(nA,Czr),e(nA,Ree),e(Ree,wzr),e(nA,Azr),e(ke,Lzr),e(ke,sA),e(sA,iwe),e(iwe,yzr),e(sA,xzr),e(sA,Pee),e(Pee,$zr),e(sA,kzr),e(ke,Szr),e(ke,lA),e(lA,dwe),e(dwe,Rzr),e(lA,Pzr),e(lA,Bee),e(Bee,Bzr),e(lA,Izr),e(ke,Nzr),e(ke,iA),e(iA,cwe),e(cwe,qzr),e(iA,jzr),e(iA,Iee),e(Iee,Dzr),e(iA,Gzr),e(Qr,Ozr),M(dA,Qr,null),b(m,MXe,_),b(m,sm,_),e(sm,cA),e(cA,mwe),M(h$,mwe,null),e(sm,Vzr),e(sm,fwe),e(fwe,Xzr),b(m,EXe,_),b(m,vr,_),M(u$,vr,null),e(vr,zzr),e(vr,lm),e(lm,Qzr),e(lm,Nee),e(Nee,Wzr),e(lm,Hzr),e(lm,qee),e(qee,Uzr),e(lm,Jzr),e(vr,Yzr),e(vr,p$),e(p$,Kzr),e(p$,gwe),e(gwe,Zzr),e(p$,eQr),e(vr,oQr),e(vr,Jt),M(_$,Jt,null),e(Jt,rQr),e(Jt,hwe),e(hwe,tQr),e(Jt,aQr),e(Jt,im),e(im,nQr),e(im,uwe),e(uwe,sQr),e(im,lQr),e(im,jee),e(jee,iQr),e(im,dQr),e(Jt,cQr),M(mA,Jt,null),e(vr,mQr),e(vr,Wr),M(b$,Wr,null),e(Wr,fQr),e(Wr,pwe),e(pwe,gQr),e(Wr,hQr),e(Wr,wn),e(wn,uQr),e(wn,_we),e(_we,pQr),e(wn,_Qr),e(wn,bwe),e(bwe,bQr),e(wn,vQr),e(wn,vwe),e(vwe,FQr),e(wn,TQr),e(Wr,MQr),e(Wr,Se),e(Se,fA),e(fA,Fwe),e(Fwe,EQr),e(fA,CQr),e(fA,Dee),e(Dee,wQr),e(fA,AQr),e(Se,LQr),e(Se,gA),e(gA,Twe),e(Twe,yQr),e(gA,xQr),e(gA,Gee),e(Gee,$Qr),e(gA,kQr),e(Se,SQr),e(Se,hA),e(hA,Mwe),e(Mwe,RQr),e(hA,PQr),e(hA,Oee),e(Oee,BQr),e(hA,IQr),e(Se,NQr),e(Se,uA),e(uA,Ewe),e(Ewe,qQr),e(uA,jQr),e(uA,Vee),e(Vee,DQr),e(uA,GQr),e(Se,OQr),e(Se,pA),e(pA,Cwe),e(Cwe,VQr),e(pA,XQr),e(pA,Xee),e(Xee,zQr),e(pA,QQr),e(Se,WQr),e(Se,_A),e(_A,wwe),e(wwe,HQr),e(_A,UQr),e(_A,zee),e(zee,JQr),e(_A,YQr),e(Se,KQr),e(Se,bA),e(bA,Awe),e(Awe,ZQr),e(bA,eWr),e(bA,Qee),e(Qee,oWr),e(bA,rWr),e(Se,tWr),e(Se,vA),e(vA,Lwe),e(Lwe,aWr),e(vA,nWr),e(vA,Wee),e(Wee,sWr),e(vA,lWr),e(Se,iWr),e(Se,FA),e(FA,ywe),e(ywe,dWr),e(FA,cWr),e(FA,Hee),e(Hee,mWr),e(FA,fWr),e(Se,gWr),e(Se,TA),e(TA,xwe),e(xwe,hWr),e(TA,uWr),e(TA,Uee),e(Uee,pWr),e(TA,_Wr),e(Wr,bWr),M(MA,Wr,null),b(m,CXe,_),b(m,dm,_),e(dm,EA),e(EA,$we),M(v$,$we,null),e(dm,vWr),e(dm,kwe),e(kwe,FWr),b(m,wXe,_),b(m,Fr,_),M(F$,Fr,null),e(Fr,TWr),e(Fr,cm),e(cm,MWr),e(cm,Jee),e(Jee,EWr),e(cm,CWr),e(cm,Yee),e(Yee,wWr),e(cm,AWr),e(Fr,LWr),e(Fr,T$),e(T$,yWr),e(T$,Swe),e(Swe,xWr),e(T$,$Wr),e(Fr,kWr),e(Fr,Yt),M(M$,Yt,null),e(Yt,SWr),e(Yt,Rwe),e(Rwe,RWr),e(Yt,PWr),e(Yt,mm),e(mm,BWr),e(mm,Pwe),e(Pwe,IWr),e(mm,NWr),e(mm,Kee),e(Kee,qWr),e(mm,jWr),e(Yt,DWr),M(CA,Yt,null),e(Fr,GWr),e(Fr,Hr),M(E$,Hr,null),e(Hr,OWr),e(Hr,Bwe),e(Bwe,VWr),e(Hr,XWr),e(Hr,An),e(An,zWr),e(An,Iwe),e(Iwe,QWr),e(An,WWr),e(An,Nwe),e(Nwe,HWr),e(An,UWr),e(An,qwe),e(qwe,JWr),e(An,YWr),e(Hr,KWr),e(Hr,Re),e(Re,wA),e(wA,jwe),e(jwe,ZWr),e(wA,eHr),e(wA,Zee),e(Zee,oHr),e(wA,rHr),e(Re,tHr),e(Re,AA),e(AA,Dwe),e(Dwe,aHr),e(AA,nHr),e(AA,eoe),e(eoe,sHr),e(AA,lHr),e(Re,iHr),e(Re,LA),e(LA,Gwe),e(Gwe,dHr),e(LA,cHr),e(LA,ooe),e(ooe,mHr),e(LA,fHr),e(Re,gHr),e(Re,yA),e(yA,Owe),e(Owe,hHr),e(yA,uHr),e(yA,roe),e(roe,pHr),e(yA,_Hr),e(Re,bHr),e(Re,xA),e(xA,Vwe),e(Vwe,vHr),e(xA,FHr),e(xA,toe),e(toe,THr),e(xA,MHr),e(Re,EHr),e(Re,$A),e($A,Xwe),e(Xwe,CHr),e($A,wHr),e($A,aoe),e(aoe,AHr),e($A,LHr),e(Re,yHr),e(Re,kA),e(kA,zwe),e(zwe,xHr),e(kA,$Hr),e(kA,noe),e(noe,kHr),e(kA,SHr),e(Re,RHr),e(Re,SA),e(SA,Qwe),e(Qwe,PHr),e(SA,BHr),e(SA,soe),e(soe,IHr),e(SA,NHr),e(Re,qHr),e(Re,RA),e(RA,Wwe),e(Wwe,jHr),e(RA,DHr),e(RA,loe),e(loe,GHr),e(RA,OHr),e(Re,VHr),e(Re,PA),e(PA,Hwe),e(Hwe,XHr),e(PA,zHr),e(PA,ioe),e(ioe,QHr),e(PA,WHr),e(Hr,HHr),M(BA,Hr,null),b(m,AXe,_),b(m,fm,_),e(fm,IA),e(IA,Uwe),M(C$,Uwe,null),e(fm,UHr),e(fm,Jwe),e(Jwe,JHr),b(m,LXe,_),b(m,Tr,_),M(w$,Tr,null),e(Tr,YHr),e(Tr,gm),e(gm,KHr),e(gm,doe),e(doe,ZHr),e(gm,eUr),e(gm,coe),e(coe,oUr),e(gm,rUr),e(Tr,tUr),e(Tr,A$),e(A$,aUr),e(A$,Ywe),e(Ywe,nUr),e(A$,sUr),e(Tr,lUr),e(Tr,Kt),M(L$,Kt,null),e(Kt,iUr),e(Kt,Kwe),e(Kwe,dUr),e(Kt,cUr),e(Kt,hm),e(hm,mUr),e(hm,Zwe),e(Zwe,fUr),e(hm,gUr),e(hm,moe),e(moe,hUr),e(hm,uUr),e(Kt,pUr),M(NA,Kt,null),e(Tr,_Ur),e(Tr,Ur),M(y$,Ur,null),e(Ur,bUr),e(Ur,eAe),e(eAe,vUr),e(Ur,FUr),e(Ur,Ln),e(Ln,TUr),e(Ln,oAe),e(oAe,MUr),e(Ln,EUr),e(Ln,rAe),e(rAe,CUr),e(Ln,wUr),e(Ln,tAe),e(tAe,AUr),e(Ln,LUr),e(Ur,yUr),e(Ur,Ve),e(Ve,qA),e(qA,aAe),e(aAe,xUr),e(qA,$Ur),e(qA,foe),e(foe,kUr),e(qA,SUr),e(Ve,RUr),e(Ve,jA),e(jA,nAe),e(nAe,PUr),e(jA,BUr),e(jA,goe),e(goe,IUr),e(jA,NUr),e(Ve,qUr),e(Ve,DA),e(DA,sAe),e(sAe,jUr),e(DA,DUr),e(DA,hoe),e(hoe,GUr),e(DA,OUr),e(Ve,VUr),e(Ve,GA),e(GA,lAe),e(lAe,XUr),e(GA,zUr),e(GA,uoe),e(uoe,QUr),e(GA,WUr),e(Ve,HUr),e(Ve,OA),e(OA,iAe),e(iAe,UUr),e(OA,JUr),e(OA,poe),e(poe,YUr),e(OA,KUr),e(Ve,ZUr),e(Ve,VA),e(VA,dAe),e(dAe,eJr),e(VA,oJr),e(VA,_oe),e(_oe,rJr),e(VA,tJr),e(Ve,aJr),e(Ve,XA),e(XA,cAe),e(cAe,nJr),e(XA,sJr),e(XA,boe),e(boe,lJr),e(XA,iJr),e(Ve,dJr),e(Ve,zA),e(zA,mAe),e(mAe,cJr),e(zA,mJr),e(zA,voe),e(voe,fJr),e(zA,gJr),e(Ur,hJr),M(QA,Ur,null),b(m,yXe,_),b(m,um,_),e(um,WA),e(WA,fAe),M(x$,fAe,null),e(um,uJr),e(um,gAe),e(gAe,pJr),b(m,xXe,_),b(m,Mr,_),M($$,Mr,null),e(Mr,_Jr),e(Mr,pm),e(pm,bJr),e(pm,Foe),e(Foe,vJr),e(pm,FJr),e(pm,Toe),e(Toe,TJr),e(pm,MJr),e(Mr,EJr),e(Mr,k$),e(k$,CJr),e(k$,hAe),e(hAe,wJr),e(k$,AJr),e(Mr,LJr),e(Mr,Zt),M(S$,Zt,null),e(Zt,yJr),e(Zt,uAe),e(uAe,xJr),e(Zt,$Jr),e(Zt,_m),e(_m,kJr),e(_m,pAe),e(pAe,SJr),e(_m,RJr),e(_m,Moe),e(Moe,PJr),e(_m,BJr),e(Zt,IJr),M(HA,Zt,null),e(Mr,NJr),e(Mr,Jr),M(R$,Jr,null),e(Jr,qJr),e(Jr,_Ae),e(_Ae,jJr),e(Jr,DJr),e(Jr,yn),e(yn,GJr),e(yn,bAe),e(bAe,OJr),e(yn,VJr),e(yn,vAe),e(vAe,XJr),e(yn,zJr),e(yn,FAe),e(FAe,QJr),e(yn,WJr),e(Jr,HJr),e(Jr,Xe),e(Xe,UA),e(UA,TAe),e(TAe,UJr),e(UA,JJr),e(UA,Eoe),e(Eoe,YJr),e(UA,KJr),e(Xe,ZJr),e(Xe,JA),e(JA,MAe),e(MAe,eYr),e(JA,oYr),e(JA,Coe),e(Coe,rYr),e(JA,tYr),e(Xe,aYr),e(Xe,YA),e(YA,EAe),e(EAe,nYr),e(YA,sYr),e(YA,woe),e(woe,lYr),e(YA,iYr),e(Xe,dYr),e(Xe,KA),e(KA,CAe),e(CAe,cYr),e(KA,mYr),e(KA,Aoe),e(Aoe,fYr),e(KA,gYr),e(Xe,hYr),e(Xe,ZA),e(ZA,wAe),e(wAe,uYr),e(ZA,pYr),e(ZA,Loe),e(Loe,_Yr),e(ZA,bYr),e(Xe,vYr),e(Xe,e6),e(e6,AAe),e(AAe,FYr),e(e6,TYr),e(e6,yoe),e(yoe,MYr),e(e6,EYr),e(Xe,CYr),e(Xe,o6),e(o6,LAe),e(LAe,wYr),e(o6,AYr),e(o6,xoe),e(xoe,LYr),e(o6,yYr),e(Xe,xYr),e(Xe,r6),e(r6,yAe),e(yAe,$Yr),e(r6,kYr),e(r6,$oe),e($oe,SYr),e(r6,RYr),e(Jr,PYr),M(t6,Jr,null),b(m,$Xe,_),b(m,bm,_),e(bm,a6),e(a6,xAe),M(P$,xAe,null),e(bm,BYr),e(bm,$Ae),e($Ae,IYr),b(m,kXe,_),b(m,Er,_),M(B$,Er,null),e(Er,NYr),e(Er,vm),e(vm,qYr),e(vm,koe),e(koe,jYr),e(vm,DYr),e(vm,Soe),e(Soe,GYr),e(vm,OYr),e(Er,VYr),e(Er,I$),e(I$,XYr),e(I$,kAe),e(kAe,zYr),e(I$,QYr),e(Er,WYr),e(Er,ea),M(N$,ea,null),e(ea,HYr),e(ea,SAe),e(SAe,UYr),e(ea,JYr),e(ea,Fm),e(Fm,YYr),e(Fm,RAe),e(RAe,KYr),e(Fm,ZYr),e(Fm,Roe),e(Roe,eKr),e(Fm,oKr),e(ea,rKr),M(n6,ea,null),e(Er,tKr),e(Er,Yr),M(q$,Yr,null),e(Yr,aKr),e(Yr,PAe),e(PAe,nKr),e(Yr,sKr),e(Yr,xn),e(xn,lKr),e(xn,BAe),e(BAe,iKr),e(xn,dKr),e(xn,IAe),e(IAe,cKr),e(xn,mKr),e(xn,NAe),e(NAe,fKr),e(xn,gKr),e(Yr,hKr),e(Yr,qAe),e(qAe,s6),e(s6,jAe),e(jAe,uKr),e(s6,pKr),e(s6,Poe),e(Poe,_Kr),e(s6,bKr),e(Yr,vKr),M(l6,Yr,null),b(m,SXe,_),b(m,Tm,_),e(Tm,i6),e(i6,DAe),M(j$,DAe,null),e(Tm,FKr),e(Tm,GAe),e(GAe,TKr),b(m,RXe,_),b(m,Cr,_),M(D$,Cr,null),e(Cr,MKr),e(Cr,Mm),e(Mm,EKr),e(Mm,Boe),e(Boe,CKr),e(Mm,wKr),e(Mm,Ioe),e(Ioe,AKr),e(Mm,LKr),e(Cr,yKr),e(Cr,G$),e(G$,xKr),e(G$,OAe),e(OAe,$Kr),e(G$,kKr),e(Cr,SKr),e(Cr,oa),M(O$,oa,null),e(oa,RKr),e(oa,VAe),e(VAe,PKr),e(oa,BKr),e(oa,Em),e(Em,IKr),e(Em,XAe),e(XAe,NKr),e(Em,qKr),e(Em,Noe),e(Noe,jKr),e(Em,DKr),e(oa,GKr),M(d6,oa,null),e(Cr,OKr),e(Cr,Kr),M(V$,Kr,null),e(Kr,VKr),e(Kr,zAe),e(zAe,XKr),e(Kr,zKr),e(Kr,$n),e($n,QKr),e($n,QAe),e(QAe,WKr),e($n,HKr),e($n,WAe),e(WAe,UKr),e($n,JKr),e($n,HAe),e(HAe,YKr),e($n,KKr),e(Kr,ZKr),e(Kr,X$),e(X$,c6),e(c6,UAe),e(UAe,eZr),e(c6,oZr),e(c6,qoe),e(qoe,rZr),e(c6,tZr),e(X$,aZr),e(X$,m6),e(m6,JAe),e(JAe,nZr),e(m6,sZr),e(m6,joe),e(joe,lZr),e(m6,iZr),e(Kr,dZr),M(f6,Kr,null),b(m,PXe,_),b(m,Cm,_),e(Cm,g6),e(g6,YAe),M(z$,YAe,null),e(Cm,cZr),e(Cm,KAe),e(KAe,mZr),b(m,BXe,_),b(m,wr,_),M(Q$,wr,null),e(wr,fZr),e(wr,wm),e(wm,gZr),e(wm,Doe),e(Doe,hZr),e(wm,uZr),e(wm,Goe),e(Goe,pZr),e(wm,_Zr),e(wr,bZr),e(wr,W$),e(W$,vZr),e(W$,ZAe),e(ZAe,FZr),e(W$,TZr),e(wr,MZr),e(wr,ra),M(H$,ra,null),e(ra,EZr),e(ra,e6e),e(e6e,CZr),e(ra,wZr),e(ra,Am),e(Am,AZr),e(Am,o6e),e(o6e,LZr),e(Am,yZr),e(Am,Ooe),e(Ooe,xZr),e(Am,$Zr),e(ra,kZr),M(h6,ra,null),e(wr,SZr),e(wr,Zr),M(U$,Zr,null),e(Zr,RZr),e(Zr,r6e),e(r6e,PZr),e(Zr,BZr),e(Zr,kn),e(kn,IZr),e(kn,t6e),e(t6e,NZr),e(kn,qZr),e(kn,a6e),e(a6e,jZr),e(kn,DZr),e(kn,n6e),e(n6e,GZr),e(kn,OZr),e(Zr,VZr),e(Zr,s6e),e(s6e,u6),e(u6,l6e),e(l6e,XZr),e(u6,zZr),e(u6,Voe),e(Voe,QZr),e(u6,WZr),e(Zr,HZr),M(p6,Zr,null),IXe=!0},p(m,[_]){const J$={};_&2&&(J$.$$scope={dirty:_,ctx:m}),Bm.$set(J$);const i6e={};_&2&&(i6e.$$scope={dirty:_,ctx:m}),Qg.$set(i6e);const d6e={};_&2&&(d6e.$$scope={dirty:_,ctx:m}),yh.$set(d6e);const c6e={};_&2&&(c6e.$$scope={dirty:_,ctx:m}),cu.$set(c6e);const Y$={};_&2&&(Y$.$$scope={dirty:_,ctx:m}),mu.$set(Y$);const m6e={};_&2&&(m6e.$$scope={dirty:_,ctx:m}),Su.$set(m6e);const Sn={};_&2&&(Sn.$$scope={dirty:_,ctx:m}),Ru.$set(Sn);const f6e={};_&2&&(f6e.$$scope={dirty:_,ctx:m}),Iu.$set(f6e);const g6e={};_&2&&(g6e.$$scope={dirty:_,ctx:m}),q_.$set(g6e);const h6e={};_&2&&(h6e.$$scope={dirty:_,ctx:m}),D_.$set(h6e);const K$={};_&2&&(K$.$$scope={dirty:_,ctx:m}),S2.$set(K$);const u6e={};_&2&&(u6e.$$scope={dirty:_,ctx:m}),P2.$set(u6e);const Z$={};_&2&&(Z$.$$scope={dirty:_,ctx:m}),Tb.$set(Z$);const p6e={};_&2&&(p6e.$$scope={dirty:_,ctx:m}),Eb.$set(p6e);const ek={};_&2&&(ek.$$scope={dirty:_,ctx:m}),iv.$set(ek);const _6e={};_&2&&(_6e.$$scope={dirty:_,ctx:m}),cv.$set(_6e);const b6e={};_&2&&(b6e.$$scope={dirty:_,ctx:m}),xv.$set(b6e);const v6e={};_&2&&(v6e.$$scope={dirty:_,ctx:m}),kv.$set(v6e);const Lm={};_&2&&(Lm.$$scope={dirty:_,ctx:m}),y1.$set(Lm);const F6e={};_&2&&(F6e.$$scope={dirty:_,ctx:m}),$1.$set(F6e);const T6e={};_&2&&(T6e.$$scope={dirty:_,ctx:m}),iF.$set(T6e);const M6e={};_&2&&(M6e.$$scope={dirty:_,ctx:m}),cF.$set(M6e);const ok={};_&2&&(ok.$$scope={dirty:_,ctx:m}),bF.$set(ok);const E6e={};_&2&&(E6e.$$scope={dirty:_,ctx:m}),FF.$set(E6e);const C6e={};_&2&&(C6e.$$scope={dirty:_,ctx:m}),aT.$set(C6e);const w6e={};_&2&&(w6e.$$scope={dirty:_,ctx:m}),sT.$set(w6e);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:m}),UT.$set(tt);const rk={};_&2&&(rk.$$scope={dirty:_,ctx:m}),YT.$set(rk);const A6e={};_&2&&(A6e.$$scope={dirty:_,ctx:m}),eM.$set(A6e);const tk={};_&2&&(tk.$$scope={dirty:_,ctx:m}),rM.$set(tk);const L6e={};_&2&&(L6e.$$scope={dirty:_,ctx:m}),pM.$set(L6e);const at={};_&2&&(at.$$scope={dirty:_,ctx:m}),bM.$set(at);const y6e={};_&2&&(y6e.$$scope={dirty:_,ctx:m}),TM.$set(y6e);const ym={};_&2&&(ym.$$scope={dirty:_,ctx:m}),EM.$set(ym);const x6e={};_&2&&(x6e.$$scope={dirty:_,ctx:m}),AM.$set(x6e);const $6e={};_&2&&($6e.$$scope={dirty:_,ctx:m}),yM.$set($6e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),jM.$set(L);const _6={};_&2&&(_6.$$scope={dirty:_,ctx:m}),GM.$set(_6);const k6e={};_&2&&(k6e.$$scope={dirty:_,ctx:m}),HM.$set(k6e);const S6e={};_&2&&(S6e.$$scope={dirty:_,ctx:m}),JM.$set(S6e);const b6={};_&2&&(b6.$$scope={dirty:_,ctx:m}),i4.$set(b6);const R6e={};_&2&&(R6e.$$scope={dirty:_,ctx:m}),c4.$set(R6e);const P6e={};_&2&&(P6e.$$scope={dirty:_,ctx:m}),h4.$set(P6e);const v6={};_&2&&(v6.$$scope={dirty:_,ctx:m}),p4.$set(v6);const B6e={};_&2&&(B6e.$$scope={dirty:_,ctx:m}),E4.$set(B6e);const I6e={};_&2&&(I6e.$$scope={dirty:_,ctx:m}),w4.$set(I6e);const F6={};_&2&&(F6.$$scope={dirty:_,ctx:m}),$4.$set(F6);const N6e={};_&2&&(N6e.$$scope={dirty:_,ctx:m}),S4.$set(N6e);const q6e={};_&2&&(q6e.$$scope={dirty:_,ctx:m}),I4.$set(q6e);const T6={};_&2&&(T6.$$scope={dirty:_,ctx:m}),q4.$set(T6);const j6e={};_&2&&(j6e.$$scope={dirty:_,ctx:m}),G4.$set(j6e);const D6e={};_&2&&(D6e.$$scope={dirty:_,ctx:m}),V4.$set(D6e);const M6={};_&2&&(M6.$$scope={dirty:_,ctx:m}),U4.$set(M6);const G6e={};_&2&&(G6e.$$scope={dirty:_,ctx:m}),Y4.$set(G6e);const O6e={};_&2&&(O6e.$$scope={dirty:_,ctx:m}),eE.$set(O6e);const E6={};_&2&&(E6.$$scope={dirty:_,ctx:m}),rE.$set(E6);const V6e={};_&2&&(V6e.$$scope={dirty:_,ctx:m}),JE.$set(V6e);const X6e={};_&2&&(X6e.$$scope={dirty:_,ctx:m}),KE.$set(X6e);const C6={};_&2&&(C6.$$scope={dirty:_,ctx:m}),MC.$set(C6);const z6e={};_&2&&(z6e.$$scope={dirty:_,ctx:m}),CC.$set(z6e);const Q6e={};_&2&&(Q6e.$$scope={dirty:_,ctx:m}),qC.$set(Q6e);const w6={};_&2&&(w6.$$scope={dirty:_,ctx:m}),DC.$set(w6);const W6e={};_&2&&(W6e.$$scope={dirty:_,ctx:m}),QC.$set(W6e);const H6e={};_&2&&(H6e.$$scope={dirty:_,ctx:m}),HC.$set(H6e);const A6={};_&2&&(A6.$$scope={dirty:_,ctx:m}),u3.$set(A6);const U6e={};_&2&&(U6e.$$scope={dirty:_,ctx:m}),_3.$set(U6e);const J6e={};_&2&&(J6e.$$scope={dirty:_,ctx:m}),y3.$set(J6e);const L6={};_&2&&(L6.$$scope={dirty:_,ctx:m}),$3.$set(L6);const Y6e={};_&2&&(Y6e.$$scope={dirty:_,ctx:m}),t5.$set(Y6e);const K6e={};_&2&&(K6e.$$scope={dirty:_,ctx:m}),n5.$set(K6e);const y6={};_&2&&(y6.$$scope={dirty:_,ctx:m}),E5.$set(y6);const Z6e={};_&2&&(Z6e.$$scope={dirty:_,ctx:m}),w5.$set(Z6e);const eLe={};_&2&&(eLe.$$scope={dirty:_,ctx:m}),y5.$set(eLe);const x6={};_&2&&(x6.$$scope={dirty:_,ctx:m}),$5.$set(x6);const oLe={};_&2&&(oLe.$$scope={dirty:_,ctx:m}),S5.$set(oLe);const rLe={};_&2&&(rLe.$$scope={dirty:_,ctx:m}),P5.$set(rLe);const $6={};_&2&&($6.$$scope={dirty:_,ctx:m}),o0.$set($6);const tLe={};_&2&&(tLe.$$scope={dirty:_,ctx:m}),t0.$set(tLe);const aLe={};_&2&&(aLe.$$scope={dirty:_,ctx:m}),C0.$set(aLe);const k6={};_&2&&(k6.$$scope={dirty:_,ctx:m}),A0.$set(k6);const nLe={};_&2&&(nLe.$$scope={dirty:_,ctx:m}),y0.$set(nLe);const sLe={};_&2&&(sLe.$$scope={dirty:_,ctx:m}),$0.$set(sLe);const S6={};_&2&&(S6.$$scope={dirty:_,ctx:m}),S0.$set(S6);const lLe={};_&2&&(lLe.$$scope={dirty:_,ctx:m}),P0.$set(lLe);const iLe={};_&2&&(iLe.$$scope={dirty:_,ctx:m}),iw.$set(iLe);const R6={};_&2&&(R6.$$scope={dirty:_,ctx:m}),cw.$set(R6);const dLe={};_&2&&(dLe.$$scope={dirty:_,ctx:m}),Tw.$set(dLe);const cLe={};_&2&&(cLe.$$scope={dirty:_,ctx:m}),Ew.$set(cLe);const P6={};_&2&&(P6.$$scope={dirty:_,ctx:m}),Nw.$set(P6);const mLe={};_&2&&(mLe.$$scope={dirty:_,ctx:m}),jw.$set(mLe);const fLe={};_&2&&(fLe.$$scope={dirty:_,ctx:m}),Jw.$set(fLe);const B6={};_&2&&(B6.$$scope={dirty:_,ctx:m}),Kw.$set(B6);const gLe={};_&2&&(gLe.$$scope={dirty:_,ctx:m}),dA.$set(gLe);const hLe={};_&2&&(hLe.$$scope={dirty:_,ctx:m}),mA.$set(hLe);const I6={};_&2&&(I6.$$scope={dirty:_,ctx:m}),MA.$set(I6);const uLe={};_&2&&(uLe.$$scope={dirty:_,ctx:m}),CA.$set(uLe);const pLe={};_&2&&(pLe.$$scope={dirty:_,ctx:m}),BA.$set(pLe);const N6={};_&2&&(N6.$$scope={dirty:_,ctx:m}),NA.$set(N6);const _Le={};_&2&&(_Le.$$scope={dirty:_,ctx:m}),QA.$set(_Le);const bLe={};_&2&&(bLe.$$scope={dirty:_,ctx:m}),HA.$set(bLe);const q6={};_&2&&(q6.$$scope={dirty:_,ctx:m}),t6.$set(q6);const vLe={};_&2&&(vLe.$$scope={dirty:_,ctx:m}),n6.$set(vLe);const FLe={};_&2&&(FLe.$$scope={dirty:_,ctx:m}),l6.$set(FLe);const j6={};_&2&&(j6.$$scope={dirty:_,ctx:m}),d6.$set(j6);const TLe={};_&2&&(TLe.$$scope={dirty:_,ctx:m}),f6.$set(TLe);const MLe={};_&2&&(MLe.$$scope={dirty:_,ctx:m}),h6.$set(MLe);const D6={};_&2&&(D6.$$scope={dirty:_,ctx:m}),p6.$set(D6)},i(m){IXe||(E(d.$$.fragment,m),E($a.$$.fragment,m),E(D7.$$.fragment,m),E(G7.$$.fragment,m),E(Bm.$$.fragment,m),E(O7.$$.fragment,m),E(V7.$$.fragment,m),E(Q7.$$.fragment,m),E(Qg.$$.fragment,m),E(W7.$$.fragment,m),E(H7.$$.fragment,m),E(U7.$$.fragment,m),E(K7.$$.fragment,m),E(yh.$$.fragment,m),E(Z7.$$.fragment,m),E(ey.$$.fragment,m),E(oy.$$.fragment,m),E(ay.$$.fragment,m),E(cu.$$.fragment,m),E(mu.$$.fragment,m),E(ny.$$.fragment,m),E(sy.$$.fragment,m),E(ly.$$.fragment,m),E(cy.$$.fragment,m),E(Su.$$.fragment,m),E(Ru.$$.fragment,m),E(my.$$.fragment,m),E(fy.$$.fragment,m),E(gy.$$.fragment,m),E(uy.$$.fragment,m),E(Iu.$$.fragment,m),E(py.$$.fragment,m),E(q_.$$.fragment,m),E(_y.$$.fragment,m),E(by.$$.fragment,m),E(Fy.$$.fragment,m),E(D_.$$.fragment,m),E(Ty.$$.fragment,m),E(S2.$$.fragment,m),E(My.$$.fragment,m),E(Ey.$$.fragment,m),E(wy.$$.fragment,m),E(P2.$$.fragment,m),E(Ay.$$.fragment,m),E(Tb.$$.fragment,m),E(Ly.$$.fragment,m),E(yy.$$.fragment,m),E($y.$$.fragment,m),E(Eb.$$.fragment,m),E(ky.$$.fragment,m),E(iv.$$.fragment,m),E(Sy.$$.fragment,m),E(Ry.$$.fragment,m),E(By.$$.fragment,m),E(cv.$$.fragment,m),E(Iy.$$.fragment,m),E(xv.$$.fragment,m),E(Ny.$$.fragment,m),E(qy.$$.fragment,m),E(Dy.$$.fragment,m),E(kv.$$.fragment,m),E(Gy.$$.fragment,m),E(y1.$$.fragment,m),E(Oy.$$.fragment,m),E(Vy.$$.fragment,m),E(zy.$$.fragment,m),E($1.$$.fragment,m),E(Qy.$$.fragment,m),E(iF.$$.fragment,m),E(Wy.$$.fragment,m),E(Hy.$$.fragment,m),E(Jy.$$.fragment,m),E(cF.$$.fragment,m),E(Yy.$$.fragment,m),E(bF.$$.fragment,m),E(Ky.$$.fragment,m),E(Zy.$$.fragment,m),E(o8.$$.fragment,m),E(FF.$$.fragment,m),E(r8.$$.fragment,m),E(aT.$$.fragment,m),E(t8.$$.fragment,m),E(a8.$$.fragment,m),E(s8.$$.fragment,m),E(sT.$$.fragment,m),E(l8.$$.fragment,m),E(UT.$$.fragment,m),E(i8.$$.fragment,m),E(d8.$$.fragment,m),E(m8.$$.fragment,m),E(YT.$$.fragment,m),E(f8.$$.fragment,m),E(eM.$$.fragment,m),E(g8.$$.fragment,m),E(h8.$$.fragment,m),E(p8.$$.fragment,m),E(rM.$$.fragment,m),E(_8.$$.fragment,m),E(pM.$$.fragment,m),E(b8.$$.fragment,m),E(v8.$$.fragment,m),E(T8.$$.fragment,m),E(bM.$$.fragment,m),E(M8.$$.fragment,m),E(TM.$$.fragment,m),E(E8.$$.fragment,m),E(C8.$$.fragment,m),E(A8.$$.fragment,m),E(EM.$$.fragment,m),E(L8.$$.fragment,m),E(AM.$$.fragment,m),E(y8.$$.fragment,m),E(x8.$$.fragment,m),E(k8.$$.fragment,m),E(yM.$$.fragment,m),E(S8.$$.fragment,m),E(jM.$$.fragment,m),E(R8.$$.fragment,m),E(P8.$$.fragment,m),E(I8.$$.fragment,m),E(GM.$$.fragment,m),E(N8.$$.fragment,m),E(HM.$$.fragment,m),E(q8.$$.fragment,m),E(j8.$$.fragment,m),E(G8.$$.fragment,m),E(JM.$$.fragment,m),E(O8.$$.fragment,m),E(i4.$$.fragment,m),E(V8.$$.fragment,m),E(X8.$$.fragment,m),E(Q8.$$.fragment,m),E(c4.$$.fragment,m),E(W8.$$.fragment,m),E(h4.$$.fragment,m),E(U8.$$.fragment,m),E(J8.$$.fragment,m),E(K8.$$.fragment,m),E(p4.$$.fragment,m),E(Z8.$$.fragment,m),E(E4.$$.fragment,m),E(e9.$$.fragment,m),E(o9.$$.fragment,m),E(t9.$$.fragment,m),E(w4.$$.fragment,m),E(a9.$$.fragment,m),E($4.$$.fragment,m),E(n9.$$.fragment,m),E(s9.$$.fragment,m),E(i9.$$.fragment,m),E(S4.$$.fragment,m),E(d9.$$.fragment,m),E(I4.$$.fragment,m),E(m9.$$.fragment,m),E(f9.$$.fragment,m),E(h9.$$.fragment,m),E(q4.$$.fragment,m),E(u9.$$.fragment,m),E(G4.$$.fragment,m),E(p9.$$.fragment,m),E(_9.$$.fragment,m),E(v9.$$.fragment,m),E(V4.$$.fragment,m),E(F9.$$.fragment,m),E(U4.$$.fragment,m),E(T9.$$.fragment,m),E(M9.$$.fragment,m),E(C9.$$.fragment,m),E(Y4.$$.fragment,m),E(w9.$$.fragment,m),E(eE.$$.fragment,m),E(A9.$$.fragment,m),E(L9.$$.fragment,m),E(x9.$$.fragment,m),E(rE.$$.fragment,m),E($9.$$.fragment,m),E(JE.$$.fragment,m),E(k9.$$.fragment,m),E(S9.$$.fragment,m),E(P9.$$.fragment,m),E(KE.$$.fragment,m),E(B9.$$.fragment,m),E(MC.$$.fragment,m),E(I9.$$.fragment,m),E(N9.$$.fragment,m),E(j9.$$.fragment,m),E(CC.$$.fragment,m),E(D9.$$.fragment,m),E(qC.$$.fragment,m),E(G9.$$.fragment,m),E(O9.$$.fragment,m),E(X9.$$.fragment,m),E(DC.$$.fragment,m),E(z9.$$.fragment,m),E(QC.$$.fragment,m),E(Q9.$$.fragment,m),E(W9.$$.fragment,m),E(U9.$$.fragment,m),E(HC.$$.fragment,m),E(J9.$$.fragment,m),E(u3.$$.fragment,m),E(Y9.$$.fragment,m),E(K9.$$.fragment,m),E(ex.$$.fragment,m),E(_3.$$.fragment,m),E(ox.$$.fragment,m),E(y3.$$.fragment,m),E(rx.$$.fragment,m),E(tx.$$.fragment,m),E(nx.$$.fragment,m),E($3.$$.fragment,m),E(sx.$$.fragment,m),E(t5.$$.fragment,m),E(lx.$$.fragment,m),E(ix.$$.fragment,m),E(cx.$$.fragment,m),E(n5.$$.fragment,m),E(mx.$$.fragment,m),E(E5.$$.fragment,m),E(fx.$$.fragment,m),E(gx.$$.fragment,m),E(ux.$$.fragment,m),E(w5.$$.fragment,m),E(px.$$.fragment,m),E(y5.$$.fragment,m),E(bx.$$.fragment,m),E(vx.$$.fragment,m),E(Tx.$$.fragment,m),E($5.$$.fragment,m),E(Mx.$$.fragment,m),E(S5.$$.fragment,m),E(Ex.$$.fragment,m),E(Cx.$$.fragment,m),E(Ax.$$.fragment,m),E(P5.$$.fragment,m),E(Lx.$$.fragment,m),E(o0.$$.fragment,m),E(yx.$$.fragment,m),E(xx.$$.fragment,m),E(kx.$$.fragment,m),E(t0.$$.fragment,m),E(Sx.$$.fragment,m),E(C0.$$.fragment,m),E(Rx.$$.fragment,m),E(Px.$$.fragment,m),E(Ix.$$.fragment,m),E(A0.$$.fragment,m),E(Nx.$$.fragment,m),E(y0.$$.fragment,m),E(qx.$$.fragment,m),E(jx.$$.fragment,m),E(Gx.$$.fragment,m),E($0.$$.fragment,m),E(Ox.$$.fragment,m),E(S0.$$.fragment,m),E(Vx.$$.fragment,m),E(Xx.$$.fragment,m),E(Qx.$$.fragment,m),E(P0.$$.fragment,m),E(Wx.$$.fragment,m),E(iw.$$.fragment,m),E(Hx.$$.fragment,m),E(Ux.$$.fragment,m),E(Yx.$$.fragment,m),E(cw.$$.fragment,m),E(Kx.$$.fragment,m),E(Tw.$$.fragment,m),E(Zx.$$.fragment,m),E(e$.$$.fragment,m),E(r$.$$.fragment,m),E(Ew.$$.fragment,m),E(t$.$$.fragment,m),E(Nw.$$.fragment,m),E(a$.$$.fragment,m),E(n$.$$.fragment,m),E(l$.$$.fragment,m),E(jw.$$.fragment,m),E(i$.$$.fragment,m),E(Jw.$$.fragment,m),E(d$.$$.fragment,m),E(c$.$$.fragment,m),E(f$.$$.fragment,m),E(Kw.$$.fragment,m),E(g$.$$.fragment,m),E(dA.$$.fragment,m),E(h$.$$.fragment,m),E(u$.$$.fragment,m),E(_$.$$.fragment,m),E(mA.$$.fragment,m),E(b$.$$.fragment,m),E(MA.$$.fragment,m),E(v$.$$.fragment,m),E(F$.$$.fragment,m),E(M$.$$.fragment,m),E(CA.$$.fragment,m),E(E$.$$.fragment,m),E(BA.$$.fragment,m),E(C$.$$.fragment,m),E(w$.$$.fragment,m),E(L$.$$.fragment,m),E(NA.$$.fragment,m),E(y$.$$.fragment,m),E(QA.$$.fragment,m),E(x$.$$.fragment,m),E($$.$$.fragment,m),E(S$.$$.fragment,m),E(HA.$$.fragment,m),E(R$.$$.fragment,m),E(t6.$$.fragment,m),E(P$.$$.fragment,m),E(B$.$$.fragment,m),E(N$.$$.fragment,m),E(n6.$$.fragment,m),E(q$.$$.fragment,m),E(l6.$$.fragment,m),E(j$.$$.fragment,m),E(D$.$$.fragment,m),E(O$.$$.fragment,m),E(d6.$$.fragment,m),E(V$.$$.fragment,m),E(f6.$$.fragment,m),E(z$.$$.fragment,m),E(Q$.$$.fragment,m),E(H$.$$.fragment,m),E(h6.$$.fragment,m),E(U$.$$.fragment,m),E(p6.$$.fragment,m),IXe=!0)},o(m){C(d.$$.fragment,m),C($a.$$.fragment,m),C(D7.$$.fragment,m),C(G7.$$.fragment,m),C(Bm.$$.fragment,m),C(O7.$$.fragment,m),C(V7.$$.fragment,m),C(Q7.$$.fragment,m),C(Qg.$$.fragment,m),C(W7.$$.fragment,m),C(H7.$$.fragment,m),C(U7.$$.fragment,m),C(K7.$$.fragment,m),C(yh.$$.fragment,m),C(Z7.$$.fragment,m),C(ey.$$.fragment,m),C(oy.$$.fragment,m),C(ay.$$.fragment,m),C(cu.$$.fragment,m),C(mu.$$.fragment,m),C(ny.$$.fragment,m),C(sy.$$.fragment,m),C(ly.$$.fragment,m),C(cy.$$.fragment,m),C(Su.$$.fragment,m),C(Ru.$$.fragment,m),C(my.$$.fragment,m),C(fy.$$.fragment,m),C(gy.$$.fragment,m),C(uy.$$.fragment,m),C(Iu.$$.fragment,m),C(py.$$.fragment,m),C(q_.$$.fragment,m),C(_y.$$.fragment,m),C(by.$$.fragment,m),C(Fy.$$.fragment,m),C(D_.$$.fragment,m),C(Ty.$$.fragment,m),C(S2.$$.fragment,m),C(My.$$.fragment,m),C(Ey.$$.fragment,m),C(wy.$$.fragment,m),C(P2.$$.fragment,m),C(Ay.$$.fragment,m),C(Tb.$$.fragment,m),C(Ly.$$.fragment,m),C(yy.$$.fragment,m),C($y.$$.fragment,m),C(Eb.$$.fragment,m),C(ky.$$.fragment,m),C(iv.$$.fragment,m),C(Sy.$$.fragment,m),C(Ry.$$.fragment,m),C(By.$$.fragment,m),C(cv.$$.fragment,m),C(Iy.$$.fragment,m),C(xv.$$.fragment,m),C(Ny.$$.fragment,m),C(qy.$$.fragment,m),C(Dy.$$.fragment,m),C(kv.$$.fragment,m),C(Gy.$$.fragment,m),C(y1.$$.fragment,m),C(Oy.$$.fragment,m),C(Vy.$$.fragment,m),C(zy.$$.fragment,m),C($1.$$.fragment,m),C(Qy.$$.fragment,m),C(iF.$$.fragment,m),C(Wy.$$.fragment,m),C(Hy.$$.fragment,m),C(Jy.$$.fragment,m),C(cF.$$.fragment,m),C(Yy.$$.fragment,m),C(bF.$$.fragment,m),C(Ky.$$.fragment,m),C(Zy.$$.fragment,m),C(o8.$$.fragment,m),C(FF.$$.fragment,m),C(r8.$$.fragment,m),C(aT.$$.fragment,m),C(t8.$$.fragment,m),C(a8.$$.fragment,m),C(s8.$$.fragment,m),C(sT.$$.fragment,m),C(l8.$$.fragment,m),C(UT.$$.fragment,m),C(i8.$$.fragment,m),C(d8.$$.fragment,m),C(m8.$$.fragment,m),C(YT.$$.fragment,m),C(f8.$$.fragment,m),C(eM.$$.fragment,m),C(g8.$$.fragment,m),C(h8.$$.fragment,m),C(p8.$$.fragment,m),C(rM.$$.fragment,m),C(_8.$$.fragment,m),C(pM.$$.fragment,m),C(b8.$$.fragment,m),C(v8.$$.fragment,m),C(T8.$$.fragment,m),C(bM.$$.fragment,m),C(M8.$$.fragment,m),C(TM.$$.fragment,m),C(E8.$$.fragment,m),C(C8.$$.fragment,m),C(A8.$$.fragment,m),C(EM.$$.fragment,m),C(L8.$$.fragment,m),C(AM.$$.fragment,m),C(y8.$$.fragment,m),C(x8.$$.fragment,m),C(k8.$$.fragment,m),C(yM.$$.fragment,m),C(S8.$$.fragment,m),C(jM.$$.fragment,m),C(R8.$$.fragment,m),C(P8.$$.fragment,m),C(I8.$$.fragment,m),C(GM.$$.fragment,m),C(N8.$$.fragment,m),C(HM.$$.fragment,m),C(q8.$$.fragment,m),C(j8.$$.fragment,m),C(G8.$$.fragment,m),C(JM.$$.fragment,m),C(O8.$$.fragment,m),C(i4.$$.fragment,m),C(V8.$$.fragment,m),C(X8.$$.fragment,m),C(Q8.$$.fragment,m),C(c4.$$.fragment,m),C(W8.$$.fragment,m),C(h4.$$.fragment,m),C(U8.$$.fragment,m),C(J8.$$.fragment,m),C(K8.$$.fragment,m),C(p4.$$.fragment,m),C(Z8.$$.fragment,m),C(E4.$$.fragment,m),C(e9.$$.fragment,m),C(o9.$$.fragment,m),C(t9.$$.fragment,m),C(w4.$$.fragment,m),C(a9.$$.fragment,m),C($4.$$.fragment,m),C(n9.$$.fragment,m),C(s9.$$.fragment,m),C(i9.$$.fragment,m),C(S4.$$.fragment,m),C(d9.$$.fragment,m),C(I4.$$.fragment,m),C(m9.$$.fragment,m),C(f9.$$.fragment,m),C(h9.$$.fragment,m),C(q4.$$.fragment,m),C(u9.$$.fragment,m),C(G4.$$.fragment,m),C(p9.$$.fragment,m),C(_9.$$.fragment,m),C(v9.$$.fragment,m),C(V4.$$.fragment,m),C(F9.$$.fragment,m),C(U4.$$.fragment,m),C(T9.$$.fragment,m),C(M9.$$.fragment,m),C(C9.$$.fragment,m),C(Y4.$$.fragment,m),C(w9.$$.fragment,m),C(eE.$$.fragment,m),C(A9.$$.fragment,m),C(L9.$$.fragment,m),C(x9.$$.fragment,m),C(rE.$$.fragment,m),C($9.$$.fragment,m),C(JE.$$.fragment,m),C(k9.$$.fragment,m),C(S9.$$.fragment,m),C(P9.$$.fragment,m),C(KE.$$.fragment,m),C(B9.$$.fragment,m),C(MC.$$.fragment,m),C(I9.$$.fragment,m),C(N9.$$.fragment,m),C(j9.$$.fragment,m),C(CC.$$.fragment,m),C(D9.$$.fragment,m),C(qC.$$.fragment,m),C(G9.$$.fragment,m),C(O9.$$.fragment,m),C(X9.$$.fragment,m),C(DC.$$.fragment,m),C(z9.$$.fragment,m),C(QC.$$.fragment,m),C(Q9.$$.fragment,m),C(W9.$$.fragment,m),C(U9.$$.fragment,m),C(HC.$$.fragment,m),C(J9.$$.fragment,m),C(u3.$$.fragment,m),C(Y9.$$.fragment,m),C(K9.$$.fragment,m),C(ex.$$.fragment,m),C(_3.$$.fragment,m),C(ox.$$.fragment,m),C(y3.$$.fragment,m),C(rx.$$.fragment,m),C(tx.$$.fragment,m),C(nx.$$.fragment,m),C($3.$$.fragment,m),C(sx.$$.fragment,m),C(t5.$$.fragment,m),C(lx.$$.fragment,m),C(ix.$$.fragment,m),C(cx.$$.fragment,m),C(n5.$$.fragment,m),C(mx.$$.fragment,m),C(E5.$$.fragment,m),C(fx.$$.fragment,m),C(gx.$$.fragment,m),C(ux.$$.fragment,m),C(w5.$$.fragment,m),C(px.$$.fragment,m),C(y5.$$.fragment,m),C(bx.$$.fragment,m),C(vx.$$.fragment,m),C(Tx.$$.fragment,m),C($5.$$.fragment,m),C(Mx.$$.fragment,m),C(S5.$$.fragment,m),C(Ex.$$.fragment,m),C(Cx.$$.fragment,m),C(Ax.$$.fragment,m),C(P5.$$.fragment,m),C(Lx.$$.fragment,m),C(o0.$$.fragment,m),C(yx.$$.fragment,m),C(xx.$$.fragment,m),C(kx.$$.fragment,m),C(t0.$$.fragment,m),C(Sx.$$.fragment,m),C(C0.$$.fragment,m),C(Rx.$$.fragment,m),C(Px.$$.fragment,m),C(Ix.$$.fragment,m),C(A0.$$.fragment,m),C(Nx.$$.fragment,m),C(y0.$$.fragment,m),C(qx.$$.fragment,m),C(jx.$$.fragment,m),C(Gx.$$.fragment,m),C($0.$$.fragment,m),C(Ox.$$.fragment,m),C(S0.$$.fragment,m),C(Vx.$$.fragment,m),C(Xx.$$.fragment,m),C(Qx.$$.fragment,m),C(P0.$$.fragment,m),C(Wx.$$.fragment,m),C(iw.$$.fragment,m),C(Hx.$$.fragment,m),C(Ux.$$.fragment,m),C(Yx.$$.fragment,m),C(cw.$$.fragment,m),C(Kx.$$.fragment,m),C(Tw.$$.fragment,m),C(Zx.$$.fragment,m),C(e$.$$.fragment,m),C(r$.$$.fragment,m),C(Ew.$$.fragment,m),C(t$.$$.fragment,m),C(Nw.$$.fragment,m),C(a$.$$.fragment,m),C(n$.$$.fragment,m),C(l$.$$.fragment,m),C(jw.$$.fragment,m),C(i$.$$.fragment,m),C(Jw.$$.fragment,m),C(d$.$$.fragment,m),C(c$.$$.fragment,m),C(f$.$$.fragment,m),C(Kw.$$.fragment,m),C(g$.$$.fragment,m),C(dA.$$.fragment,m),C(h$.$$.fragment,m),C(u$.$$.fragment,m),C(_$.$$.fragment,m),C(mA.$$.fragment,m),C(b$.$$.fragment,m),C(MA.$$.fragment,m),C(v$.$$.fragment,m),C(F$.$$.fragment,m),C(M$.$$.fragment,m),C(CA.$$.fragment,m),C(E$.$$.fragment,m),C(BA.$$.fragment,m),C(C$.$$.fragment,m),C(w$.$$.fragment,m),C(L$.$$.fragment,m),C(NA.$$.fragment,m),C(y$.$$.fragment,m),C(QA.$$.fragment,m),C(x$.$$.fragment,m),C($$.$$.fragment,m),C(S$.$$.fragment,m),C(HA.$$.fragment,m),C(R$.$$.fragment,m),C(t6.$$.fragment,m),C(P$.$$.fragment,m),C(B$.$$.fragment,m),C(N$.$$.fragment,m),C(n6.$$.fragment,m),C(q$.$$.fragment,m),C(l6.$$.fragment,m),C(j$.$$.fragment,m),C(D$.$$.fragment,m),C(O$.$$.fragment,m),C(d6.$$.fragment,m),C(V$.$$.fragment,m),C(f6.$$.fragment,m),C(z$.$$.fragment,m),C(Q$.$$.fragment,m),C(H$.$$.fragment,m),C(h6.$$.fragment,m),C(U$.$$.fragment,m),C(p6.$$.fragment,m),IXe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t($m),m&&t(nt),m&&t(Oe),m&&t(Qe),m&&t(Sm),w($a,m),m&&t(We),m&&t(Ae),m&&t(Co),m&&t(ka),m&&t(kOe),m&&t(ki),w(D7),m&&t(SOe),m&&t(Nn),m&&t(ROe),w(G7,m),m&&t(POe),m&&t(FS),m&&t(BOe),w(Bm,m),m&&t(IOe),m&&t(Si),w(O7),m&&t(NOe),m&&t(wo),w(V7),w(Q7),w(Qg),w(W7),m&&t(qOe),m&&t(Pi),w(H7),m&&t(jOe),m&&t(Ao),w(U7),w(K7),w(yh),w(Z7),m&&t(DOe),m&&t(Bi),w(ey),m&&t(GOe),m&&t(Lo),w(oy),w(ay),w(cu),w(mu),w(ny),m&&t(OOe),m&&t(Ii),w(sy),m&&t(VOe),m&&t(yo),w(ly),w(cy),w(Su),w(Ru),w(my),m&&t(XOe),m&&t(qi),w(fy),m&&t(zOe),m&&t(xo),w(gy),w(uy),w(Iu),w(py),w(q_),m&&t(QOe),m&&t(Gi),w(_y),m&&t(WOe),m&&t($o),w(by),w(Fy),w(D_),w(Ty),w(S2),m&&t(HOe),m&&t(Xi),w(My),m&&t(UOe),m&&t(ko),w(Ey),w(wy),w(P2),w(Ay),w(Tb),m&&t(JOe),m&&t(Wi),w(Ly),m&&t(YOe),m&&t(So),w(yy),w($y),w(Eb),w(ky),w(iv),m&&t(KOe),m&&t(Ji),w(Sy),m&&t(ZOe),m&&t(Ro),w(Ry),w(By),w(cv),w(Iy),w(xv),m&&t(eVe),m&&t(Zi),w(Ny),m&&t(oVe),m&&t(Po),w(qy),w(Dy),w(kv),w(Gy),w(y1),m&&t(rVe),m&&t(rd),w(Oy),m&&t(tVe),m&&t(Bo),w(Vy),w(zy),w($1),w(Qy),w(iF),m&&t(aVe),m&&t(nd),w(Wy),m&&t(nVe),m&&t(Io),w(Hy),w(Jy),w(cF),w(Yy),w(bF),m&&t(sVe),m&&t(id),w(Ky),m&&t(lVe),m&&t(qo),w(Zy),w(o8),w(FF),w(r8),w(aT),m&&t(iVe),m&&t(md),w(t8),m&&t(dVe),m&&t(jo),w(a8),w(s8),w(sT),w(l8),w(UT),m&&t(cVe),m&&t(hd),w(i8),m&&t(mVe),m&&t(Do),w(d8),w(m8),w(YT),w(f8),w(eM),m&&t(fVe),m&&t(_d),w(g8),m&&t(gVe),m&&t(Go),w(h8),w(p8),w(rM),w(_8),w(pM),m&&t(hVe),m&&t(Fd),w(b8),m&&t(uVe),m&&t(Oo),w(v8),w(T8),w(bM),w(M8),w(TM),m&&t(pVe),m&&t(Ed),w(E8),m&&t(_Ve),m&&t(Vo),w(C8),w(A8),w(EM),w(L8),w(AM),m&&t(bVe),m&&t(Ad),w(y8),m&&t(vVe),m&&t(Xo),w(x8),w(k8),w(yM),w(S8),w(jM),m&&t(FVe),m&&t(xd),w(R8),m&&t(TVe),m&&t(zo),w(P8),w(I8),w(GM),w(N8),w(HM),m&&t(MVe),m&&t(Sd),w(q8),m&&t(EVe),m&&t(Qo),w(j8),w(G8),w(JM),w(O8),w(i4),m&&t(CVe),m&&t(Bd),w(V8),m&&t(wVe),m&&t(Wo),w(X8),w(Q8),w(c4),w(W8),w(h4),m&&t(AVe),m&&t(qd),w(U8),m&&t(LVe),m&&t(Ho),w(J8),w(K8),w(p4),w(Z8),w(E4),m&&t(yVe),m&&t(Gd),w(e9),m&&t(xVe),m&&t(Uo),w(o9),w(t9),w(w4),w(a9),w($4),m&&t($Ve),m&&t(zd),w(n9),m&&t(kVe),m&&t(Jo),w(s9),w(i9),w(S4),w(d9),w(I4),m&&t(SVe),m&&t(Hd),w(m9),m&&t(RVe),m&&t(Yo),w(f9),w(h9),w(q4),w(u9),w(G4),m&&t(PVe),m&&t(Yd),w(p9),m&&t(BVe),m&&t(Ko),w(_9),w(v9),w(V4),w(F9),w(U4),m&&t(IVe),m&&t(ec),w(T9),m&&t(NVe),m&&t(Zo),w(M9),w(C9),w(Y4),w(w9),w(eE),m&&t(qVe),m&&t(tc),w(A9),m&&t(jVe),m&&t(er),w(L9),w(x9),w(rE),w($9),w(JE),m&&t(DVe),m&&t(sc),w(k9),m&&t(GVe),m&&t(or),w(S9),w(P9),w(KE),w(B9),w(MC),m&&t(OVe),m&&t(dc),w(I9),m&&t(VVe),m&&t(rr),w(N9),w(j9),w(CC),w(D9),w(qC),m&&t(XVe),m&&t(fc),w(G9),m&&t(zVe),m&&t(tr),w(O9),w(X9),w(DC),w(z9),w(QC),m&&t(QVe),m&&t(uc),w(Q9),m&&t(WVe),m&&t(ar),w(W9),w(U9),w(HC),w(J9),w(u3),m&&t(HVe),m&&t(bc),w(Y9),m&&t(UVe),m&&t(nr),w(K9),w(ex),w(_3),w(ox),w(y3),m&&t(JVe),m&&t(Tc),w(rx),m&&t(YVe),m&&t(sr),w(tx),w(nx),w($3),w(sx),w(t5),m&&t(KVe),m&&t(Cc),w(lx),m&&t(ZVe),m&&t(lr),w(ix),w(cx),w(n5),w(mx),w(E5),m&&t(eXe),m&&t(Lc),w(fx),m&&t(oXe),m&&t(ir),w(gx),w(ux),w(w5),w(px),w(y5),m&&t(rXe),m&&t($c),w(bx),m&&t(tXe),m&&t(dr),w(vx),w(Tx),w($5),w(Mx),w(S5),m&&t(aXe),m&&t(Rc),w(Ex),m&&t(nXe),m&&t(cr),w(Cx),w(Ax),w(P5),w(Lx),w(o0),m&&t(sXe),m&&t(Ic),w(yx),m&&t(lXe),m&&t(mr),w(xx),w(kx),w(t0),w(Sx),w(C0),m&&t(iXe),m&&t(jc),w(Rx),m&&t(dXe),m&&t(fr),w(Px),w(Ix),w(A0),w(Nx),w(y0),m&&t(cXe),m&&t(Oc),w(qx),m&&t(mXe),m&&t(gr),w(jx),w(Gx),w($0),w(Ox),w(S0),m&&t(fXe),m&&t(zc),w(Vx),m&&t(gXe),m&&t(hr),w(Xx),w(Qx),w(P0),w(Wx),w(iw),m&&t(hXe),m&&t(Hc),w(Hx),m&&t(uXe),m&&t(ur),w(Ux),w(Yx),w(cw),w(Kx),w(Tw),m&&t(pXe),m&&t(Yc),w(Zx),m&&t(_Xe),m&&t(pr),w(e$),w(r$),w(Ew),w(t$),w(Nw),m&&t(bXe),m&&t(em),w(a$),m&&t(vXe),m&&t(_r),w(n$),w(l$),w(jw),w(i$),w(Jw),m&&t(FXe),m&&t(tm),w(d$),m&&t(TXe),m&&t(br),w(c$),w(f$),w(Kw),w(g$),w(dA),m&&t(MXe),m&&t(sm),w(h$),m&&t(EXe),m&&t(vr),w(u$),w(_$),w(mA),w(b$),w(MA),m&&t(CXe),m&&t(dm),w(v$),m&&t(wXe),m&&t(Fr),w(F$),w(M$),w(CA),w(E$),w(BA),m&&t(AXe),m&&t(fm),w(C$),m&&t(LXe),m&&t(Tr),w(w$),w(L$),w(NA),w(y$),w(QA),m&&t(yXe),m&&t(um),w(x$),m&&t(xXe),m&&t(Mr),w($$),w(S$),w(HA),w(R$),w(t6),m&&t($Xe),m&&t(bm),w(P$),m&&t(kXe),m&&t(Er),w(B$),w(N$),w(n6),w(q$),w(l6),m&&t(SXe),m&&t(Tm),w(j$),m&&t(RXe),m&&t(Cr),w(D$),w(O$),w(d6),w(V$),w(f6),m&&t(PXe),m&&t(Cm),w(z$),m&&t(BXe),m&&t(wr),w(Q$),w(H$),w(h6),w(U$),w(p6)}}}const zXt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function QXt($){return XOt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ZXt extends DOt{constructor(g){super();GOt(this,g,QXt,XXt,OOt,{})}}export{ZXt as default,zXt as metadata};
