import{S as hda,i as uda,s as pda,e as a,k as l,w as F,t as o,M as _da,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as bda,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Kpt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function vda($){let g,v,u,f,p,d,h,yo,ed,Ff,ut,od,rd,t9,Tf,Ve,Ue,td,Zn,a9,es,os,n9,ad,rs,s9,nd,Mf,Qa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),yo=o(`, make sure its
`),ed=a("code"),Ff=o("model_type"),ut=o(" attribute is set to the same key you use when registering the config (here "),od=a("code"),rd=o('"new-model"'),t9=o(")."),Tf=l(),Ve=a("p"),Ue=o("Likewise, if your "),td=a("code"),Zn=o("NewModel"),a9=o(" is a subclass of "),es=a("a"),os=o("PreTrainedModel"),n9=o(`, make sure its
`),ad=a("code"),rs=o("config_class"),s9=o(` attribute is set to the same class you use when registering the model (here
`),nd=a("code"),Mf=o("NewModelConfig"),Qa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var sB=s(u);f=r(sB,"NewModelConfig"),sB.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var sd=s(d);h=r(sd,"PretrainedConfig"),sd.forEach(t),yo=r(Ae,`, make sure its
`),ed=n(Ae,"CODE",{});var lB=s(ed);Ff=r(lB,"model_type"),lB.forEach(t),ut=r(Ae," attribute is set to the same key you use when registering the config (here "),od=n(Ae,"CODE",{});var iB=s(od);rd=r(iB,'"new-model"'),iB.forEach(t),t9=r(Ae,")."),Ae.forEach(t),Tf=i(He),Ve=n(He,"P",{});var Lo=s(Ve);Ue=r(Lo,"Likewise, if your "),td=n(Lo,"CODE",{});var Wa=s(td);Zn=r(Wa,"NewModel"),Wa.forEach(t),a9=r(Lo," is a subclass of "),es=n(Lo,"A",{href:!0});var dB=s(es);os=r(dB,"PreTrainedModel"),dB.forEach(t),n9=r(Lo,`, make sure its
`),ad=n(Lo,"CODE",{});var Ef=s(ad);rs=r(Ef,"config_class"),Ef.forEach(t),s9=r(Lo,` attribute is set to the same class you use when registering the model (here
`),nd=n(Lo,"CODE",{});var cB=s(nd);Mf=r(cB,"NewModelConfig"),cB.forEach(t),Qa=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(es,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,yo),e(g,ed),e(ed,Ff),e(g,ut),e(g,od),e(od,rd),e(g,t9),b(He,Tf,Ae),b(He,Ve,Ae),e(Ve,Ue),e(Ve,td),e(td,Zn),e(Ve,a9),e(Ve,es),e(es,os),e(Ve,n9),e(Ve,ad),e(ad,rs),e(Ve,s9),e(Ve,nd),e(nd,Mf),e(Ve,Qa)},d(He){He&&t(g),He&&t(Tf),He&&t(Ve)}}}function Fda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mda($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function Eda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cda($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function wda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ada($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $da($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ida($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="3dc6de3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;3dc6de3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="3dc6de3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="3dc6de3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;3dc6de3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;3dc6de3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zda($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ica($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _ca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Eca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Aca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $ca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ica($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="3dc6de3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;3dc6de3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="3dc6de3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="3dc6de3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;3dc6de3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;3dc6de3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zca($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ema($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ama($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ima($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _ma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ema($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wma($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ama($){let g,v,u,f,p,d,h,yo,ed,Ff,ut,od,rd,t9,Tf,Ve,Ue,td,Zn,a9,es,os,n9,ad,rs,s9,nd,Mf,Qa,He,Ae,sB,sd,lB,iB,Lo,Wa,dB,Ef,cB,Jeo,vJe,ld,Cf,gie,l9,Yeo,hie,Keo,FJe,ts,Zeo,uie,eoo,ooo,pie,roo,too,TJe,i9,MJe,mB,aoo,EJe,wf,CJe,id,Af,_ie,d9,noo,bie,soo,wJe,xo,c9,loo,m9,ioo,fB,doo,coo,moo,f9,foo,vie,goo,hoo,uoo,Pr,g9,poo,Fie,_oo,boo,dd,voo,Tie,Foo,Too,Mie,Moo,Eoo,Coo,A,yf,Eie,woo,Aoo,gB,yoo,Loo,xoo,Lf,Cie,$oo,koo,hB,Soo,Roo,Poo,xf,wie,Boo,Ioo,uB,Noo,qoo,joo,$f,Aie,Doo,Goo,pB,Ooo,Voo,Xoo,kf,yie,zoo,Qoo,_B,Woo,Uoo,Hoo,Sf,Lie,Joo,Yoo,bB,Koo,Zoo,ero,Rf,xie,oro,rro,vB,tro,aro,nro,Pf,$ie,sro,lro,FB,iro,dro,cro,Bf,kie,mro,fro,TB,gro,hro,uro,If,Sie,pro,_ro,MB,bro,vro,Fro,Nf,Rie,Tro,Mro,EB,Ero,Cro,wro,qf,Pie,Aro,yro,CB,Lro,xro,$ro,jf,Bie,kro,Sro,wB,Rro,Pro,Bro,Df,Iie,Iro,Nro,AB,qro,jro,Dro,Gf,Nie,Gro,Oro,yB,Vro,Xro,zro,Of,qie,Qro,Wro,LB,Uro,Hro,Jro,Vf,jie,Yro,Kro,xB,Zro,eto,oto,Xf,Die,rto,tto,$B,ato,nto,sto,zf,Gie,lto,ito,kB,dto,cto,mto,Qf,Oie,fto,gto,SB,hto,uto,pto,Wf,Vie,_to,bto,RB,vto,Fto,Tto,Uf,Xie,Mto,Eto,PB,Cto,wto,Ato,Hf,zie,yto,Lto,BB,xto,$to,kto,Jf,Qie,Sto,Rto,IB,Pto,Bto,Ito,Yf,Wie,Nto,qto,NB,jto,Dto,Gto,Kf,Uie,Oto,Vto,qB,Xto,zto,Qto,Zf,Hie,Wto,Uto,jB,Hto,Jto,Yto,eg,Jie,Kto,Zto,DB,eao,oao,rao,og,Yie,tao,aao,GB,nao,sao,lao,rg,Kie,iao,dao,OB,cao,mao,fao,tg,Zie,gao,hao,VB,uao,pao,_ao,ag,ede,bao,vao,XB,Fao,Tao,Mao,ng,ode,Eao,Cao,zB,wao,Aao,yao,sg,rde,Lao,xao,QB,$ao,kao,Sao,lg,tde,Rao,Pao,WB,Bao,Iao,Nao,ig,ade,qao,jao,UB,Dao,Gao,Oao,dg,nde,Vao,Xao,HB,zao,Qao,Wao,cg,sde,Uao,Hao,JB,Jao,Yao,Kao,mg,lde,Zao,eno,YB,ono,rno,tno,fg,ide,ano,nno,KB,sno,lno,ino,gg,dde,dno,cno,ZB,mno,fno,gno,hg,cde,hno,uno,eI,pno,_no,bno,ug,mde,vno,Fno,oI,Tno,Mno,Eno,pg,fde,Cno,wno,rI,Ano,yno,Lno,_g,gde,xno,$no,tI,kno,Sno,Rno,bg,hde,Pno,Bno,aI,Ino,Nno,qno,vg,ude,jno,Dno,nI,Gno,Ono,Vno,Fg,pde,Xno,zno,sI,Qno,Wno,Uno,Tg,_de,Hno,Jno,lI,Yno,Kno,Zno,Mg,bde,eso,oso,iI,rso,tso,aso,Eg,vde,nso,sso,dI,lso,iso,dso,Cg,Fde,cso,mso,cI,fso,gso,hso,wg,Tde,uso,pso,mI,_so,bso,vso,Ag,Mde,Fso,Tso,fI,Mso,Eso,Cso,yg,Ede,wso,Aso,gI,yso,Lso,xso,Lg,Cde,$so,kso,hI,Sso,Rso,Pso,xg,wde,Bso,Iso,uI,Nso,qso,jso,$g,Ade,Dso,Gso,pI,Oso,Vso,Xso,kg,yde,zso,Qso,_I,Wso,Uso,Hso,Sg,Lde,Jso,Yso,bI,Kso,Zso,elo,Rg,xde,olo,rlo,vI,tlo,alo,nlo,Pg,$de,slo,llo,FI,ilo,dlo,clo,Bg,kde,mlo,flo,TI,glo,hlo,ulo,Ig,Sde,plo,_lo,MI,blo,vlo,Flo,Ng,Rde,Tlo,Mlo,EI,Elo,Clo,wlo,qg,Pde,Alo,ylo,CI,Llo,xlo,$lo,jg,Bde,klo,Slo,wI,Rlo,Plo,Blo,Dg,Ide,Ilo,Nlo,AI,qlo,jlo,Dlo,Gg,Nde,Glo,Olo,yI,Vlo,Xlo,zlo,Og,qde,Qlo,Wlo,LI,Ulo,Hlo,Jlo,Vg,jde,Ylo,Klo,xI,Zlo,eio,oio,Xg,Dde,rio,tio,$I,aio,nio,sio,zg,Gde,lio,iio,kI,dio,cio,mio,Qg,Ode,fio,gio,SI,hio,uio,pio,Wg,Vde,_io,bio,RI,vio,Fio,Tio,Ug,Xde,Mio,Eio,PI,Cio,wio,Aio,Hg,zde,yio,Lio,BI,xio,$io,kio,Jg,Qde,Sio,Rio,II,Pio,Bio,Iio,Yg,Wde,Nio,qio,NI,jio,Dio,Gio,Kg,Ude,Oio,Vio,qI,Xio,zio,Qio,Zg,Hde,Wio,Uio,jI,Hio,Jio,Yio,eh,Jde,Kio,Zio,DI,edo,odo,rdo,oh,Yde,tdo,ado,GI,ndo,sdo,ldo,rh,Kde,ido,ddo,OI,cdo,mdo,fdo,th,Zde,gdo,hdo,VI,udo,pdo,_do,ah,ece,bdo,vdo,XI,Fdo,Tdo,Mdo,nh,oce,Edo,Cdo,zI,wdo,Ado,ydo,sh,rce,Ldo,xdo,QI,$do,kdo,Sdo,lh,tce,Rdo,Pdo,WI,Bdo,Ido,Ndo,ih,ace,qdo,jdo,UI,Ddo,Gdo,Odo,dh,nce,Vdo,Xdo,HI,zdo,Qdo,Wdo,ch,sce,Udo,Hdo,JI,Jdo,Ydo,Kdo,mh,lce,Zdo,eco,YI,oco,rco,tco,fh,ice,aco,nco,KI,sco,lco,ico,gh,dce,dco,cco,ZI,mco,fco,gco,hh,cce,hco,uco,eN,pco,_co,bco,uh,mce,vco,Fco,oN,Tco,Mco,Eco,ph,fce,Cco,wco,rN,Aco,yco,Lco,_h,gce,xco,$co,tN,kco,Sco,Rco,bh,hce,Pco,Bco,aN,Ico,Nco,qco,vh,uce,jco,Dco,nN,Gco,Oco,Vco,Fh,pce,Xco,zco,sN,Qco,Wco,Uco,Th,_ce,Hco,Jco,lN,Yco,Kco,Zco,Mh,bce,emo,omo,iN,rmo,tmo,amo,Eh,vce,nmo,smo,dN,lmo,imo,dmo,Ch,Fce,cmo,mmo,cN,fmo,gmo,hmo,wh,Tce,umo,pmo,mN,_mo,bmo,vmo,Ah,Mce,Fmo,Tmo,fN,Mmo,Emo,Cmo,yh,Ece,wmo,Amo,gN,ymo,Lmo,xmo,Lh,Cce,$mo,kmo,hN,Smo,Rmo,Pmo,xh,wce,Bmo,Imo,uN,Nmo,qmo,jmo,$h,Ace,Dmo,Gmo,pN,Omo,Vmo,Xmo,kh,yce,zmo,Qmo,_N,Wmo,Umo,Hmo,Sh,Lce,Jmo,Ymo,bN,Kmo,Zmo,efo,Rh,xce,ofo,rfo,vN,tfo,afo,nfo,Ph,$ce,sfo,lfo,FN,ifo,dfo,cfo,Bh,kce,mfo,ffo,TN,gfo,hfo,ufo,Ih,Sce,pfo,_fo,MN,bfo,vfo,Ffo,Nh,Rce,Tfo,Mfo,EN,Efo,Cfo,wfo,qh,Pce,Afo,yfo,CN,Lfo,xfo,$fo,jh,Bce,kfo,Sfo,wN,Rfo,Pfo,Bfo,Dh,Ice,Ifo,Nfo,AN,qfo,jfo,Dfo,Gh,Nce,Gfo,Ofo,yN,Vfo,Xfo,zfo,Oh,Qfo,Vh,h9,Wfo,qce,Ufo,AJe,cd,Xh,jce,u9,Hfo,Dce,Jfo,yJe,$o,p9,Yfo,_9,Kfo,LN,Zfo,ego,ogo,b9,rgo,Gce,tgo,ago,ngo,Br,v9,sgo,Oce,lgo,igo,Ua,dgo,Vce,cgo,mgo,Xce,fgo,ggo,zce,hgo,ugo,pgo,k,as,Qce,_go,bgo,xN,vgo,Fgo,$N,Tgo,Mgo,Ego,ns,Wce,Cgo,wgo,kN,Ago,ygo,SN,Lgo,xgo,$go,ss,Uce,kgo,Sgo,RN,Rgo,Pgo,PN,Bgo,Igo,Ngo,zh,Hce,qgo,jgo,BN,Dgo,Ggo,Ogo,ls,Jce,Vgo,Xgo,IN,zgo,Qgo,NN,Wgo,Ugo,Hgo,Qh,Yce,Jgo,Ygo,qN,Kgo,Zgo,eho,Wh,Kce,oho,rho,jN,tho,aho,nho,Uh,Zce,sho,lho,DN,iho,dho,cho,is,eme,mho,fho,GN,gho,hho,ON,uho,pho,_ho,ds,ome,bho,vho,VN,Fho,Tho,XN,Mho,Eho,Cho,cs,rme,who,Aho,zN,yho,Lho,QN,xho,$ho,kho,Hh,tme,Sho,Rho,WN,Pho,Bho,Iho,Jh,ame,Nho,qho,UN,jho,Dho,Gho,Yh,nme,Oho,Vho,HN,Xho,zho,Qho,ms,sme,Who,Uho,JN,Hho,Jho,YN,Yho,Kho,Zho,Kh,lme,euo,ouo,KN,ruo,tuo,auo,fs,ime,nuo,suo,ZN,luo,iuo,eq,duo,cuo,muo,gs,dme,fuo,guo,oq,huo,uuo,rq,puo,_uo,buo,hs,cme,vuo,Fuo,tq,Tuo,Muo,aq,Euo,Cuo,wuo,us,mme,Auo,yuo,nq,Luo,xuo,sq,$uo,kuo,Suo,Zh,fme,Ruo,Puo,lq,Buo,Iuo,Nuo,ps,gme,quo,juo,iq,Duo,Guo,dq,Ouo,Vuo,Xuo,_s,hme,zuo,Quo,cq,Wuo,Uuo,mq,Huo,Juo,Yuo,bs,ume,Kuo,Zuo,fq,epo,opo,gq,rpo,tpo,apo,vs,pme,npo,spo,hq,lpo,ipo,uq,dpo,cpo,mpo,Fs,_me,fpo,gpo,pq,hpo,upo,_q,ppo,_po,bpo,Ts,bme,vpo,Fpo,bq,Tpo,Mpo,vq,Epo,Cpo,wpo,eu,vme,Apo,ypo,Fq,Lpo,xpo,$po,Ms,Fme,kpo,Spo,Tq,Rpo,Ppo,Mq,Bpo,Ipo,Npo,ou,Tme,qpo,jpo,Eq,Dpo,Gpo,Opo,Es,Mme,Vpo,Xpo,Cq,zpo,Qpo,wq,Wpo,Upo,Hpo,Cs,Eme,Jpo,Ypo,Aq,Kpo,Zpo,yq,e_o,o_o,r_o,ws,Cme,t_o,a_o,Lq,n_o,s_o,xq,l_o,i_o,d_o,ru,wme,c_o,m_o,$q,f_o,g_o,h_o,As,Ame,u_o,p_o,kq,__o,b_o,Sq,v_o,F_o,T_o,ys,yme,M_o,E_o,Rq,C_o,w_o,Pq,A_o,y_o,L_o,Ls,Lme,x_o,$_o,Bq,k_o,S_o,Iq,R_o,P_o,B_o,tu,xme,I_o,N_o,Nq,q_o,j_o,D_o,xs,$me,G_o,O_o,qq,V_o,X_o,jq,z_o,Q_o,W_o,$s,kme,U_o,H_o,Dq,J_o,Y_o,Gq,K_o,Z_o,ebo,ks,Sme,obo,rbo,Oq,tbo,abo,Vq,nbo,sbo,lbo,Ss,Rme,ibo,dbo,Xq,cbo,mbo,zq,fbo,gbo,hbo,Rs,Pme,ubo,pbo,Qq,_bo,bbo,Wq,vbo,Fbo,Tbo,Ps,Bme,Mbo,Ebo,Uq,Cbo,wbo,Hq,Abo,ybo,Lbo,Bs,Ime,xbo,$bo,Jq,kbo,Sbo,Yq,Rbo,Pbo,Bbo,Is,Nme,Ibo,Nbo,Kq,qbo,jbo,Zq,Dbo,Gbo,Obo,au,qme,Vbo,Xbo,ej,zbo,Qbo,Wbo,Ns,jme,Ubo,Hbo,oj,Jbo,Ybo,rj,Kbo,Zbo,e2o,nu,Dme,o2o,r2o,tj,t2o,a2o,n2o,su,Gme,s2o,l2o,aj,i2o,d2o,c2o,qs,Ome,m2o,f2o,nj,g2o,h2o,sj,u2o,p2o,_2o,js,Vme,b2o,v2o,lj,F2o,T2o,ij,M2o,E2o,C2o,Ds,Xme,w2o,A2o,dj,y2o,L2o,cj,x2o,$2o,k2o,lu,zme,S2o,R2o,mj,P2o,B2o,I2o,Gs,Qme,N2o,q2o,fj,j2o,D2o,gj,G2o,O2o,V2o,Os,Wme,X2o,z2o,hj,Q2o,W2o,uj,U2o,H2o,J2o,Vs,Ume,Y2o,K2o,pj,Z2o,evo,_j,ovo,rvo,tvo,Xs,Hme,avo,nvo,bj,svo,lvo,vj,ivo,dvo,cvo,zs,Jme,mvo,fvo,Fj,gvo,hvo,Tj,uvo,pvo,_vo,Qs,Yme,bvo,vvo,Mj,Fvo,Tvo,Ej,Mvo,Evo,Cvo,Ws,Kme,wvo,Avo,Cj,yvo,Lvo,wj,xvo,$vo,kvo,Us,Zme,Svo,Rvo,Aj,Pvo,Bvo,yj,Ivo,Nvo,qvo,iu,efe,jvo,Dvo,Lj,Gvo,Ovo,Vvo,Hs,ofe,Xvo,zvo,xj,Qvo,Wvo,$j,Uvo,Hvo,Jvo,Js,rfe,Yvo,Kvo,kj,Zvo,e1o,Sj,o1o,r1o,t1o,du,tfe,a1o,n1o,Rj,s1o,l1o,i1o,cu,afe,d1o,c1o,Pj,m1o,f1o,g1o,mu,nfe,h1o,u1o,Bj,p1o,_1o,b1o,fu,sfe,v1o,F1o,Ij,T1o,M1o,E1o,Ys,lfe,C1o,w1o,Nj,A1o,y1o,qj,L1o,x1o,$1o,gu,ife,k1o,S1o,jj,R1o,P1o,B1o,Ks,dfe,I1o,N1o,Dj,q1o,j1o,Gj,D1o,G1o,O1o,Zs,cfe,V1o,X1o,Oj,z1o,Q1o,Vj,W1o,U1o,H1o,el,mfe,J1o,Y1o,Xj,K1o,Z1o,zj,eFo,oFo,rFo,ol,ffe,tFo,aFo,Qj,nFo,sFo,Wj,lFo,iFo,dFo,rl,gfe,cFo,mFo,Uj,fFo,gFo,Hj,hFo,uFo,pFo,tl,hfe,_Fo,bFo,Jj,vFo,FFo,Yj,TFo,MFo,EFo,hu,ufe,CFo,wFo,Kj,AFo,yFo,LFo,uu,pfe,xFo,$Fo,Zj,kFo,SFo,RFo,al,_fe,PFo,BFo,eD,IFo,NFo,oD,qFo,jFo,DFo,nl,bfe,GFo,OFo,rD,VFo,XFo,tD,zFo,QFo,WFo,sl,vfe,UFo,HFo,aD,JFo,YFo,nD,KFo,ZFo,eTo,pu,Ffe,oTo,rTo,sD,tTo,aTo,nTo,_u,Tfe,sTo,lTo,lD,iTo,dTo,cTo,bu,Mfe,mTo,fTo,iD,gTo,hTo,uTo,ll,Efe,pTo,_To,dD,bTo,vTo,cD,FTo,TTo,MTo,il,Cfe,ETo,CTo,mD,wTo,ATo,fD,yTo,LTo,xTo,vu,wfe,$To,kTo,gD,STo,RTo,PTo,Fu,Afe,BTo,ITo,hD,NTo,qTo,jTo,Tu,yfe,DTo,GTo,uD,OTo,VTo,XTo,dl,Lfe,zTo,QTo,pD,WTo,UTo,_D,HTo,JTo,YTo,Mu,xfe,KTo,ZTo,bD,eMo,oMo,rMo,Eu,$fe,tMo,aMo,vD,nMo,sMo,lMo,cl,kfe,iMo,dMo,FD,cMo,mMo,TD,fMo,gMo,hMo,ml,Sfe,uMo,pMo,MD,_Mo,bMo,ED,vMo,FMo,TMo,fl,Rfe,MMo,EMo,CD,CMo,wMo,wD,AMo,yMo,LMo,gl,Pfe,xMo,$Mo,AD,kMo,SMo,yD,RMo,PMo,BMo,Cu,IMo,wu,F9,NMo,Bfe,qMo,LJe,md,Au,Ife,T9,jMo,Nfe,DMo,xJe,ko,M9,GMo,E9,OMo,LD,VMo,XMo,zMo,C9,QMo,qfe,WMo,UMo,HMo,Je,w9,JMo,jfe,YMo,KMo,Ha,ZMo,Dfe,eEo,oEo,Gfe,rEo,tEo,Ofe,aEo,nEo,sEo,W,yu,Vfe,lEo,iEo,xD,dEo,cEo,mEo,Lu,Xfe,fEo,gEo,$D,hEo,uEo,pEo,xu,zfe,_Eo,bEo,kD,vEo,FEo,TEo,$u,Qfe,MEo,EEo,SD,CEo,wEo,AEo,ku,Wfe,yEo,LEo,RD,xEo,$Eo,kEo,Su,Ufe,SEo,REo,PD,PEo,BEo,IEo,Ru,Hfe,NEo,qEo,BD,jEo,DEo,GEo,Pu,Jfe,OEo,VEo,ID,XEo,zEo,QEo,Bu,Yfe,WEo,UEo,ND,HEo,JEo,YEo,Iu,Kfe,KEo,ZEo,qD,e4o,o4o,r4o,Nu,Zfe,t4o,a4o,jD,n4o,s4o,l4o,qu,ege,i4o,d4o,DD,c4o,m4o,f4o,ju,oge,g4o,h4o,GD,u4o,p4o,_4o,Du,rge,b4o,v4o,OD,F4o,T4o,M4o,Gu,tge,E4o,C4o,VD,w4o,A4o,y4o,Ou,age,L4o,x4o,XD,$4o,k4o,S4o,Vu,nge,R4o,P4o,zD,B4o,I4o,N4o,Xu,sge,q4o,j4o,QD,D4o,G4o,O4o,zu,lge,V4o,X4o,WD,z4o,Q4o,W4o,Qu,ige,U4o,H4o,UD,J4o,Y4o,K4o,Wu,dge,Z4o,eCo,HD,oCo,rCo,tCo,Uu,cge,aCo,nCo,JD,sCo,lCo,iCo,Hu,mge,dCo,cCo,YD,mCo,fCo,gCo,Ju,fge,hCo,uCo,KD,pCo,_Co,bCo,Yu,gge,vCo,FCo,ZD,TCo,MCo,ECo,Ku,hge,CCo,wCo,eG,ACo,yCo,LCo,Zu,uge,xCo,$Co,oG,kCo,SCo,RCo,ep,pge,PCo,BCo,rG,ICo,NCo,qCo,op,_ge,jCo,DCo,tG,GCo,OCo,VCo,rp,bge,XCo,zCo,aG,QCo,WCo,UCo,tp,vge,HCo,JCo,nG,YCo,KCo,ZCo,ap,Fge,e3o,o3o,sG,r3o,t3o,a3o,np,Tge,n3o,s3o,lG,l3o,i3o,d3o,sp,Mge,c3o,m3o,iG,f3o,g3o,h3o,lp,Ege,u3o,p3o,dG,_3o,b3o,v3o,ip,Cge,F3o,T3o,cG,M3o,E3o,C3o,dp,wge,w3o,A3o,mG,y3o,L3o,x3o,cp,Age,$3o,k3o,fG,S3o,R3o,P3o,mp,B3o,fp,I3o,gp,A9,N3o,yge,q3o,$Je,fd,hp,Lge,y9,j3o,xge,D3o,kJe,So,L9,G3o,x9,O3o,gG,V3o,X3o,z3o,$9,Q3o,$ge,W3o,U3o,H3o,Ye,k9,J3o,kge,Y3o,K3o,gd,Z3o,Sge,e5o,o5o,Rge,r5o,t5o,a5o,ce,up,Pge,n5o,s5o,hG,l5o,i5o,d5o,pp,Bge,c5o,m5o,uG,f5o,g5o,h5o,_p,Ige,u5o,p5o,pG,_5o,b5o,v5o,bp,Nge,F5o,T5o,_G,M5o,E5o,C5o,vp,qge,w5o,A5o,bG,y5o,L5o,x5o,Fp,jge,$5o,k5o,vG,S5o,R5o,P5o,Tp,Dge,B5o,I5o,FG,N5o,q5o,j5o,Mp,Gge,D5o,G5o,TG,O5o,V5o,X5o,Ep,Oge,z5o,Q5o,MG,W5o,U5o,H5o,Cp,Vge,J5o,Y5o,EG,K5o,Z5o,e0o,wp,Xge,o0o,r0o,CG,t0o,a0o,n0o,Ap,zge,s0o,l0o,wG,i0o,d0o,c0o,yp,Qge,m0o,f0o,AG,g0o,h0o,u0o,Lp,Wge,p0o,_0o,yG,b0o,v0o,F0o,xp,Uge,T0o,M0o,LG,E0o,C0o,w0o,$p,Hge,A0o,y0o,xG,L0o,x0o,$0o,kp,Jge,k0o,S0o,$G,R0o,P0o,B0o,Sp,Yge,I0o,N0o,kG,q0o,j0o,D0o,Rp,Kge,G0o,O0o,SG,V0o,X0o,z0o,Pp,Zge,Q0o,W0o,RG,U0o,H0o,J0o,Bp,Y0o,Ip,K0o,Np,S9,Z0o,ehe,ewo,SJe,hd,qp,ohe,R9,owo,rhe,rwo,RJe,Ro,P9,two,ud,awo,PG,nwo,swo,BG,lwo,iwo,dwo,B9,cwo,the,mwo,fwo,gwo,pt,I9,hwo,ahe,uwo,pwo,pd,_wo,nhe,bwo,vwo,IG,Fwo,Two,Mwo,jp,Ewo,Ke,N9,Cwo,she,wwo,Awo,Ja,ywo,lhe,Lwo,xwo,ihe,$wo,kwo,dhe,Swo,Rwo,Pwo,L,Dp,che,Bwo,Iwo,NG,Nwo,qwo,jwo,Gp,mhe,Dwo,Gwo,qG,Owo,Vwo,Xwo,Op,fhe,zwo,Qwo,jG,Wwo,Uwo,Hwo,Vp,ghe,Jwo,Ywo,DG,Kwo,Zwo,eAo,Xp,hhe,oAo,rAo,GG,tAo,aAo,nAo,zp,uhe,sAo,lAo,OG,iAo,dAo,cAo,Qp,phe,mAo,fAo,VG,gAo,hAo,uAo,Wp,_he,pAo,_Ao,XG,bAo,vAo,FAo,Up,bhe,TAo,MAo,zG,EAo,CAo,wAo,Hp,vhe,AAo,yAo,QG,LAo,xAo,$Ao,Jp,Fhe,kAo,SAo,WG,RAo,PAo,BAo,Yp,The,IAo,NAo,UG,qAo,jAo,DAo,Kp,Mhe,GAo,OAo,HG,VAo,XAo,zAo,Zp,Ehe,QAo,WAo,JG,UAo,HAo,JAo,e_,Che,YAo,KAo,YG,ZAo,e6o,o6o,o_,whe,r6o,t6o,KG,a6o,n6o,s6o,r_,Ahe,l6o,i6o,ZG,d6o,c6o,m6o,t_,yhe,f6o,g6o,eO,h6o,u6o,p6o,a_,Lhe,_6o,b6o,oO,v6o,F6o,T6o,n_,xhe,M6o,E6o,rO,C6o,w6o,A6o,s_,$he,y6o,L6o,tO,x6o,$6o,k6o,l_,khe,S6o,R6o,aO,P6o,B6o,I6o,i_,She,N6o,q6o,nO,j6o,D6o,G6o,d_,Rhe,O6o,V6o,sO,X6o,z6o,Q6o,c_,Phe,W6o,U6o,lO,H6o,J6o,Y6o,m_,Bhe,K6o,Z6o,iO,e7o,o7o,r7o,f_,Ihe,t7o,a7o,dO,n7o,s7o,l7o,g_,Nhe,i7o,d7o,cO,c7o,m7o,f7o,h_,qhe,g7o,h7o,mO,u7o,p7o,_7o,u_,jhe,b7o,v7o,fO,F7o,T7o,M7o,p_,Dhe,E7o,C7o,gO,w7o,A7o,y7o,__,Ghe,L7o,x7o,hO,$7o,k7o,S7o,b_,Ohe,R7o,P7o,uO,B7o,I7o,N7o,v_,Vhe,q7o,j7o,pO,D7o,G7o,O7o,F_,Xhe,V7o,X7o,_O,z7o,Q7o,W7o,hl,zhe,U7o,H7o,bO,J7o,Y7o,vO,K7o,Z7o,eyo,T_,Qhe,oyo,ryo,FO,tyo,ayo,nyo,M_,Whe,syo,lyo,TO,iyo,dyo,cyo,E_,Uhe,myo,fyo,MO,gyo,hyo,uyo,C_,Hhe,pyo,_yo,EO,byo,vyo,Fyo,w_,Jhe,Tyo,Myo,CO,Eyo,Cyo,wyo,A_,Yhe,Ayo,yyo,wO,Lyo,xyo,$yo,y_,Khe,kyo,Syo,AO,Ryo,Pyo,Byo,L_,Zhe,Iyo,Nyo,yO,qyo,jyo,Dyo,x_,eue,Gyo,Oyo,LO,Vyo,Xyo,zyo,$_,oue,Qyo,Wyo,xO,Uyo,Hyo,Jyo,k_,rue,Yyo,Kyo,$O,Zyo,eLo,oLo,S_,tue,rLo,tLo,kO,aLo,nLo,sLo,R_,aue,lLo,iLo,SO,dLo,cLo,mLo,P_,nue,fLo,gLo,RO,hLo,uLo,pLo,B_,sue,_Lo,bLo,PO,vLo,FLo,TLo,I_,lue,MLo,ELo,BO,CLo,wLo,ALo,N_,iue,yLo,LLo,IO,xLo,$Lo,kLo,q_,due,SLo,RLo,NO,PLo,BLo,ILo,j_,cue,NLo,qLo,qO,jLo,DLo,GLo,D_,mue,OLo,VLo,jO,XLo,zLo,QLo,G_,fue,WLo,ULo,DO,HLo,JLo,YLo,O_,gue,KLo,ZLo,GO,e8o,o8o,r8o,V_,hue,t8o,a8o,OO,n8o,s8o,l8o,X_,uue,i8o,d8o,VO,c8o,m8o,f8o,z_,pue,g8o,h8o,XO,u8o,p8o,_8o,Q_,_ue,b8o,v8o,zO,F8o,T8o,M8o,W_,bue,E8o,C8o,QO,w8o,A8o,y8o,U_,vue,L8o,x8o,WO,$8o,k8o,S8o,H_,Fue,R8o,P8o,UO,B8o,I8o,N8o,J_,Tue,q8o,j8o,HO,D8o,G8o,O8o,Y_,Mue,V8o,X8o,JO,z8o,Q8o,W8o,K_,Eue,U8o,H8o,YO,J8o,Y8o,K8o,Z_,Cue,Z8o,e9o,KO,o9o,r9o,t9o,eb,wue,a9o,n9o,ZO,s9o,l9o,i9o,ob,Aue,d9o,c9o,eV,m9o,f9o,g9o,rb,yue,h9o,u9o,oV,p9o,_9o,b9o,tb,Lue,v9o,F9o,rV,T9o,M9o,E9o,ab,xue,C9o,w9o,tV,A9o,y9o,L9o,nb,$ue,x9o,$9o,aV,k9o,S9o,R9o,sb,kue,P9o,B9o,nV,I9o,N9o,q9o,lb,Sue,j9o,D9o,sV,G9o,O9o,V9o,ib,Rue,X9o,z9o,lV,Q9o,W9o,U9o,db,Pue,H9o,J9o,iV,Y9o,K9o,Z9o,cb,Bue,exo,oxo,dV,rxo,txo,axo,mb,Iue,nxo,sxo,cV,lxo,ixo,dxo,fb,Nue,cxo,mxo,mV,fxo,gxo,hxo,gb,que,uxo,pxo,fV,_xo,bxo,vxo,hb,jue,Fxo,Txo,gV,Mxo,Exo,Cxo,ub,Due,wxo,Axo,hV,yxo,Lxo,xxo,pb,Gue,$xo,kxo,uV,Sxo,Rxo,Pxo,_b,Oue,Bxo,Ixo,pV,Nxo,qxo,jxo,bb,Vue,Dxo,Gxo,_V,Oxo,Vxo,Xxo,vb,Xue,zxo,Qxo,bV,Wxo,Uxo,Hxo,Fb,zue,Jxo,Yxo,vV,Kxo,Zxo,e$o,Tb,Que,o$o,r$o,FV,t$o,a$o,n$o,Mb,Wue,s$o,l$o,TV,i$o,d$o,c$o,Eb,Uue,m$o,f$o,MV,g$o,h$o,u$o,Cb,Hue,p$o,_$o,EV,b$o,v$o,F$o,wb,Jue,T$o,M$o,CV,E$o,C$o,w$o,Ab,Yue,A$o,y$o,wV,L$o,x$o,$$o,yb,Kue,k$o,S$o,AV,R$o,P$o,B$o,Lb,Zue,I$o,N$o,yV,q$o,j$o,D$o,xb,epe,G$o,O$o,LV,V$o,X$o,z$o,$b,ope,Q$o,W$o,xV,U$o,H$o,J$o,kb,rpe,Y$o,K$o,$V,Z$o,eko,oko,Sb,tpe,rko,tko,kV,ako,nko,sko,Rb,ape,lko,iko,SV,dko,cko,mko,Pb,npe,fko,gko,RV,hko,uko,pko,Bb,spe,_ko,bko,PV,vko,Fko,Tko,Ib,lpe,Mko,Eko,BV,Cko,wko,Ako,Nb,ipe,yko,Lko,IV,xko,$ko,kko,qb,dpe,Sko,Rko,NV,Pko,Bko,Iko,jb,cpe,Nko,qko,qV,jko,Dko,Gko,Db,mpe,Oko,Vko,jV,Xko,zko,Qko,Gb,fpe,Wko,Uko,DV,Hko,Jko,Yko,Ob,gpe,Kko,Zko,GV,eSo,oSo,rSo,Vb,hpe,tSo,aSo,OV,nSo,sSo,lSo,Xb,upe,iSo,dSo,VV,cSo,mSo,fSo,zb,ppe,gSo,hSo,XV,uSo,pSo,_So,Qb,_pe,bSo,vSo,zV,FSo,TSo,MSo,Wb,bpe,ESo,CSo,QV,wSo,ASo,ySo,Ub,LSo,vpe,xSo,$So,Fpe,kSo,SSo,Hb,PJe,_d,Jb,Tpe,q9,RSo,Mpe,PSo,BJe,Po,j9,BSo,bd,ISo,WV,NSo,qSo,UV,jSo,DSo,GSo,D9,OSo,Epe,VSo,XSo,zSo,_t,G9,QSo,Cpe,WSo,USo,vd,HSo,wpe,JSo,YSo,HV,KSo,ZSo,eRo,Yb,oRo,Ze,O9,rRo,Ape,tRo,aRo,Ya,nRo,ype,sRo,lRo,Lpe,iRo,dRo,xpe,cRo,mRo,fRo,G,Kb,$pe,gRo,hRo,JV,uRo,pRo,_Ro,Zb,kpe,bRo,vRo,YV,FRo,TRo,MRo,e2,Spe,ERo,CRo,KV,wRo,ARo,yRo,o2,Rpe,LRo,xRo,ZV,$Ro,kRo,SRo,r2,Ppe,RRo,PRo,eX,BRo,IRo,NRo,t2,Bpe,qRo,jRo,oX,DRo,GRo,ORo,a2,Ipe,VRo,XRo,rX,zRo,QRo,WRo,n2,Npe,URo,HRo,tX,JRo,YRo,KRo,s2,qpe,ZRo,ePo,aX,oPo,rPo,tPo,l2,jpe,aPo,nPo,nX,sPo,lPo,iPo,i2,Dpe,dPo,cPo,sX,mPo,fPo,gPo,d2,Gpe,hPo,uPo,lX,pPo,_Po,bPo,c2,Ope,vPo,FPo,iX,TPo,MPo,EPo,m2,Vpe,CPo,wPo,dX,APo,yPo,LPo,f2,Xpe,xPo,$Po,cX,kPo,SPo,RPo,g2,zpe,PPo,BPo,mX,IPo,NPo,qPo,h2,Qpe,jPo,DPo,fX,GPo,OPo,VPo,u2,Wpe,XPo,zPo,gX,QPo,WPo,UPo,p2,Upe,HPo,JPo,hX,YPo,KPo,ZPo,_2,Hpe,eBo,oBo,uX,rBo,tBo,aBo,b2,Jpe,nBo,sBo,pX,lBo,iBo,dBo,v2,Ype,cBo,mBo,_X,fBo,gBo,hBo,F2,Kpe,uBo,pBo,bX,_Bo,bBo,vBo,T2,Zpe,FBo,TBo,vX,MBo,EBo,CBo,M2,e_e,wBo,ABo,FX,yBo,LBo,xBo,E2,o_e,$Bo,kBo,TX,SBo,RBo,PBo,C2,r_e,BBo,IBo,MX,NBo,qBo,jBo,w2,t_e,DBo,GBo,EX,OBo,VBo,XBo,A2,a_e,zBo,QBo,CX,WBo,UBo,HBo,y2,n_e,JBo,YBo,wX,KBo,ZBo,eIo,L2,s_e,oIo,rIo,AX,tIo,aIo,nIo,x2,l_e,sIo,lIo,yX,iIo,dIo,cIo,$2,i_e,mIo,fIo,LX,gIo,hIo,uIo,k2,d_e,pIo,_Io,xX,bIo,vIo,FIo,S2,c_e,TIo,MIo,$X,EIo,CIo,wIo,R2,m_e,AIo,yIo,kX,LIo,xIo,$Io,P2,f_e,kIo,SIo,SX,RIo,PIo,BIo,B2,g_e,IIo,NIo,RX,qIo,jIo,DIo,I2,h_e,GIo,OIo,PX,VIo,XIo,zIo,N2,u_e,QIo,WIo,BX,UIo,HIo,JIo,q2,p_e,YIo,KIo,IX,ZIo,eNo,oNo,j2,__e,rNo,tNo,NX,aNo,nNo,sNo,D2,b_e,lNo,iNo,qX,dNo,cNo,mNo,G2,v_e,fNo,gNo,jX,hNo,uNo,pNo,O2,F_e,_No,bNo,DX,vNo,FNo,TNo,V2,T_e,MNo,ENo,GX,CNo,wNo,ANo,X2,M_e,yNo,LNo,OX,xNo,$No,kNo,z2,SNo,E_e,RNo,PNo,C_e,BNo,INo,Q2,IJe,Fd,W2,w_e,V9,NNo,A_e,qNo,NJe,Bo,X9,jNo,Td,DNo,VX,GNo,ONo,XX,VNo,XNo,zNo,z9,QNo,y_e,WNo,UNo,HNo,bt,Q9,JNo,L_e,YNo,KNo,Md,ZNo,x_e,eqo,oqo,zX,rqo,tqo,aqo,U2,nqo,eo,W9,sqo,$_e,lqo,iqo,Ka,dqo,k_e,cqo,mqo,S_e,fqo,gqo,R_e,hqo,uqo,pqo,z,H2,P_e,_qo,bqo,QX,vqo,Fqo,Tqo,J2,B_e,Mqo,Eqo,WX,Cqo,wqo,Aqo,Y2,I_e,yqo,Lqo,UX,xqo,$qo,kqo,K2,N_e,Sqo,Rqo,HX,Pqo,Bqo,Iqo,Z2,q_e,Nqo,qqo,JX,jqo,Dqo,Gqo,ev,j_e,Oqo,Vqo,YX,Xqo,zqo,Qqo,ov,D_e,Wqo,Uqo,KX,Hqo,Jqo,Yqo,rv,G_e,Kqo,Zqo,ZX,ejo,ojo,rjo,tv,O_e,tjo,ajo,ez,njo,sjo,ljo,av,V_e,ijo,djo,oz,cjo,mjo,fjo,nv,X_e,gjo,hjo,rz,ujo,pjo,_jo,sv,z_e,bjo,vjo,tz,Fjo,Tjo,Mjo,lv,Q_e,Ejo,Cjo,az,wjo,Ajo,yjo,iv,W_e,Ljo,xjo,nz,$jo,kjo,Sjo,dv,U_e,Rjo,Pjo,sz,Bjo,Ijo,Njo,cv,H_e,qjo,jjo,lz,Djo,Gjo,Ojo,mv,J_e,Vjo,Xjo,iz,zjo,Qjo,Wjo,fv,Y_e,Ujo,Hjo,dz,Jjo,Yjo,Kjo,gv,K_e,Zjo,eDo,cz,oDo,rDo,tDo,hv,Z_e,aDo,nDo,mz,sDo,lDo,iDo,uv,ebe,dDo,cDo,fz,mDo,fDo,gDo,pv,obe,hDo,uDo,gz,pDo,_Do,bDo,_v,rbe,vDo,FDo,hz,TDo,MDo,EDo,bv,tbe,CDo,wDo,uz,ADo,yDo,LDo,vv,abe,xDo,$Do,pz,kDo,SDo,RDo,Fv,nbe,PDo,BDo,_z,IDo,NDo,qDo,Tv,sbe,jDo,DDo,bz,GDo,ODo,VDo,Mv,lbe,XDo,zDo,vz,QDo,WDo,UDo,Ev,ibe,HDo,JDo,Fz,YDo,KDo,ZDo,Cv,dbe,eGo,oGo,Tz,rGo,tGo,aGo,wv,cbe,nGo,sGo,Mz,lGo,iGo,dGo,Av,mbe,cGo,mGo,Ez,fGo,gGo,hGo,yv,fbe,uGo,pGo,Cz,_Go,bGo,vGo,Lv,gbe,FGo,TGo,wz,MGo,EGo,CGo,xv,hbe,wGo,AGo,Az,yGo,LGo,xGo,$v,ube,$Go,kGo,yz,SGo,RGo,PGo,kv,pbe,BGo,IGo,Lz,NGo,qGo,jGo,Sv,_be,DGo,GGo,xz,OGo,VGo,XGo,Rv,bbe,zGo,QGo,$z,WGo,UGo,HGo,Pv,vbe,JGo,YGo,kz,KGo,ZGo,eOo,Bv,oOo,Fbe,rOo,tOo,Tbe,aOo,nOo,Iv,qJe,Ed,Nv,Mbe,U9,sOo,Ebe,lOo,jJe,Io,H9,iOo,Cd,dOo,Sz,cOo,mOo,Rz,fOo,gOo,hOo,J9,uOo,Cbe,pOo,_Oo,bOo,vt,Y9,vOo,wbe,FOo,TOo,wd,MOo,Abe,EOo,COo,Pz,wOo,AOo,yOo,qv,LOo,oo,K9,xOo,ybe,$Oo,kOo,Za,SOo,Lbe,ROo,POo,xbe,BOo,IOo,$be,NOo,qOo,jOo,U,jv,kbe,DOo,GOo,Bz,OOo,VOo,XOo,Dv,Sbe,zOo,QOo,Iz,WOo,UOo,HOo,Gv,Rbe,JOo,YOo,Nz,KOo,ZOo,eVo,Ov,Pbe,oVo,rVo,qz,tVo,aVo,nVo,Vv,Bbe,sVo,lVo,jz,iVo,dVo,cVo,Xv,Ibe,mVo,fVo,Dz,gVo,hVo,uVo,zv,Nbe,pVo,_Vo,Gz,bVo,vVo,FVo,Qv,qbe,TVo,MVo,Oz,EVo,CVo,wVo,Wv,jbe,AVo,yVo,Vz,LVo,xVo,$Vo,Uv,Dbe,kVo,SVo,Xz,RVo,PVo,BVo,Hv,Gbe,IVo,NVo,zz,qVo,jVo,DVo,Jv,Obe,GVo,OVo,Qz,VVo,XVo,zVo,Yv,Vbe,QVo,WVo,Wz,UVo,HVo,JVo,Kv,Xbe,YVo,KVo,Uz,ZVo,eXo,oXo,Zv,zbe,rXo,tXo,Hz,aXo,nXo,sXo,e1,Qbe,lXo,iXo,Jz,dXo,cXo,mXo,o1,Wbe,fXo,gXo,Yz,hXo,uXo,pXo,r1,Ube,_Xo,bXo,Kz,vXo,FXo,TXo,t1,Hbe,MXo,EXo,Zz,CXo,wXo,AXo,a1,Jbe,yXo,LXo,eQ,xXo,$Xo,kXo,n1,Ybe,SXo,RXo,oQ,PXo,BXo,IXo,s1,Kbe,NXo,qXo,rQ,jXo,DXo,GXo,l1,Zbe,OXo,VXo,tQ,XXo,zXo,QXo,i1,e2e,WXo,UXo,aQ,HXo,JXo,YXo,d1,o2e,KXo,ZXo,nQ,ezo,ozo,rzo,c1,r2e,tzo,azo,sQ,nzo,szo,lzo,m1,t2e,izo,dzo,lQ,czo,mzo,fzo,f1,a2e,gzo,hzo,iQ,uzo,pzo,_zo,g1,n2e,bzo,vzo,dQ,Fzo,Tzo,Mzo,h1,s2e,Ezo,Czo,cQ,wzo,Azo,yzo,u1,l2e,Lzo,xzo,mQ,$zo,kzo,Szo,p1,i2e,Rzo,Pzo,fQ,Bzo,Izo,Nzo,_1,d2e,qzo,jzo,gQ,Dzo,Gzo,Ozo,b1,c2e,Vzo,Xzo,m2e,zzo,Qzo,Wzo,v1,f2e,Uzo,Hzo,hQ,Jzo,Yzo,Kzo,F1,g2e,Zzo,eQo,uQ,oQo,rQo,tQo,T1,h2e,aQo,nQo,pQ,sQo,lQo,iQo,M1,u2e,dQo,cQo,_Q,mQo,fQo,gQo,E1,hQo,p2e,uQo,pQo,_2e,_Qo,bQo,C1,DJe,Ad,w1,b2e,Z9,vQo,v2e,FQo,GJe,No,ex,TQo,yd,MQo,bQ,EQo,CQo,vQ,wQo,AQo,yQo,ox,LQo,F2e,xQo,$Qo,kQo,Ft,rx,SQo,T2e,RQo,PQo,Ld,BQo,M2e,IQo,NQo,FQ,qQo,jQo,DQo,A1,GQo,ro,tx,OQo,E2e,VQo,XQo,en,zQo,C2e,QQo,WQo,w2e,UQo,HQo,A2e,JQo,YQo,KQo,me,y1,y2e,ZQo,eWo,TQ,oWo,rWo,tWo,L1,L2e,aWo,nWo,MQ,sWo,lWo,iWo,x1,x2e,dWo,cWo,EQ,mWo,fWo,gWo,$1,$2e,hWo,uWo,CQ,pWo,_Wo,bWo,k1,k2e,vWo,FWo,wQ,TWo,MWo,EWo,S1,S2e,CWo,wWo,AQ,AWo,yWo,LWo,R1,R2e,xWo,$Wo,yQ,kWo,SWo,RWo,P1,P2e,PWo,BWo,LQ,IWo,NWo,qWo,B1,B2e,jWo,DWo,xQ,GWo,OWo,VWo,I1,I2e,XWo,zWo,$Q,QWo,WWo,UWo,N1,N2e,HWo,JWo,kQ,YWo,KWo,ZWo,q1,q2e,eUo,oUo,SQ,rUo,tUo,aUo,j1,j2e,nUo,sUo,RQ,lUo,iUo,dUo,D1,D2e,cUo,mUo,PQ,fUo,gUo,hUo,G1,G2e,uUo,pUo,BQ,_Uo,bUo,vUo,O1,O2e,FUo,TUo,IQ,MUo,EUo,CUo,V1,V2e,wUo,AUo,NQ,yUo,LUo,xUo,X1,X2e,$Uo,kUo,qQ,SUo,RUo,PUo,z1,z2e,BUo,IUo,jQ,NUo,qUo,jUo,Q1,Q2e,DUo,GUo,DQ,OUo,VUo,XUo,W1,zUo,W2e,QUo,WUo,U2e,UUo,HUo,U1,OJe,xd,H1,H2e,ax,JUo,J2e,YUo,VJe,qo,nx,KUo,$d,ZUo,GQ,eHo,oHo,OQ,rHo,tHo,aHo,sx,nHo,Y2e,sHo,lHo,iHo,Tt,lx,dHo,K2e,cHo,mHo,kd,fHo,Z2e,gHo,hHo,VQ,uHo,pHo,_Ho,J1,bHo,to,ix,vHo,eve,FHo,THo,on,MHo,ove,EHo,CHo,rve,wHo,AHo,tve,yHo,LHo,xHo,j,Y1,ave,$Ho,kHo,XQ,SHo,RHo,PHo,K1,nve,BHo,IHo,zQ,NHo,qHo,jHo,Z1,sve,DHo,GHo,QQ,OHo,VHo,XHo,eF,lve,zHo,QHo,WQ,WHo,UHo,HHo,oF,ive,JHo,YHo,UQ,KHo,ZHo,eJo,rF,dve,oJo,rJo,HQ,tJo,aJo,nJo,tF,cve,sJo,lJo,JQ,iJo,dJo,cJo,aF,mve,mJo,fJo,YQ,gJo,hJo,uJo,nF,fve,pJo,_Jo,KQ,bJo,vJo,FJo,sF,gve,TJo,MJo,ZQ,EJo,CJo,wJo,lF,hve,AJo,yJo,eW,LJo,xJo,$Jo,iF,uve,kJo,SJo,oW,RJo,PJo,BJo,dF,pve,IJo,NJo,rW,qJo,jJo,DJo,cF,_ve,GJo,OJo,tW,VJo,XJo,zJo,mF,bve,QJo,WJo,aW,UJo,HJo,JJo,fF,vve,YJo,KJo,nW,ZJo,eYo,oYo,gF,Fve,rYo,tYo,sW,aYo,nYo,sYo,hF,Tve,lYo,iYo,lW,dYo,cYo,mYo,uF,Mve,fYo,gYo,iW,hYo,uYo,pYo,pF,Eve,_Yo,bYo,dW,vYo,FYo,TYo,_F,Cve,MYo,EYo,cW,CYo,wYo,AYo,bF,wve,yYo,LYo,mW,xYo,$Yo,kYo,vF,Ave,SYo,RYo,fW,PYo,BYo,IYo,FF,yve,NYo,qYo,gW,jYo,DYo,GYo,TF,Lve,OYo,VYo,hW,XYo,zYo,QYo,MF,xve,WYo,UYo,uW,HYo,JYo,YYo,EF,$ve,KYo,ZYo,pW,eKo,oKo,rKo,CF,kve,tKo,aKo,_W,nKo,sKo,lKo,wF,Sve,iKo,dKo,bW,cKo,mKo,fKo,AF,Rve,gKo,hKo,vW,uKo,pKo,_Ko,yF,Pve,bKo,vKo,FW,FKo,TKo,MKo,LF,Bve,EKo,CKo,TW,wKo,AKo,yKo,xF,Ive,LKo,xKo,MW,$Ko,kKo,SKo,$F,Nve,RKo,PKo,EW,BKo,IKo,NKo,kF,qve,qKo,jKo,CW,DKo,GKo,OKo,SF,jve,VKo,XKo,wW,zKo,QKo,WKo,RF,Dve,UKo,HKo,AW,JKo,YKo,KKo,PF,Gve,ZKo,eZo,yW,oZo,rZo,tZo,BF,Ove,aZo,nZo,LW,sZo,lZo,iZo,IF,Vve,dZo,cZo,xW,mZo,fZo,gZo,NF,Xve,hZo,uZo,$W,pZo,_Zo,bZo,qF,zve,vZo,FZo,kW,TZo,MZo,EZo,jF,Qve,CZo,wZo,SW,AZo,yZo,LZo,DF,Wve,xZo,$Zo,RW,kZo,SZo,RZo,GF,Uve,PZo,BZo,PW,IZo,NZo,qZo,OF,Hve,jZo,DZo,BW,GZo,OZo,VZo,VF,Jve,XZo,zZo,IW,QZo,WZo,UZo,XF,Yve,HZo,JZo,NW,YZo,KZo,ZZo,zF,Kve,eer,oer,qW,rer,ter,aer,QF,Zve,ner,ser,jW,ler,ier,der,WF,e1e,cer,mer,DW,fer,ger,her,UF,o1e,uer,per,GW,_er,ber,ver,HF,Fer,r1e,Ter,Mer,t1e,Eer,Cer,JF,XJe,Sd,YF,a1e,dx,wer,n1e,Aer,zJe,jo,cx,yer,Rd,Ler,OW,xer,$er,VW,ker,Ser,Rer,mx,Per,s1e,Ber,Ier,Ner,Mt,fx,qer,l1e,jer,Der,Pd,Ger,i1e,Oer,Ver,XW,Xer,zer,Qer,KF,Wer,ao,gx,Uer,d1e,Her,Jer,rn,Yer,c1e,Ker,Zer,m1e,eor,oor,f1e,ror,tor,aor,Z,ZF,g1e,nor,sor,zW,lor,ior,dor,eT,h1e,cor,mor,QW,gor,hor,uor,oT,u1e,por,_or,WW,bor,vor,For,rT,p1e,Tor,Mor,UW,Eor,Cor,wor,tT,_1e,Aor,yor,HW,Lor,xor,$or,aT,b1e,kor,Sor,JW,Ror,Por,Bor,nT,v1e,Ior,Nor,YW,qor,jor,Dor,sT,F1e,Gor,Oor,KW,Vor,Xor,zor,lT,T1e,Qor,Wor,ZW,Uor,Hor,Jor,iT,M1e,Yor,Kor,eU,Zor,err,orr,dT,E1e,rrr,trr,oU,arr,nrr,srr,cT,C1e,lrr,irr,rU,drr,crr,mrr,mT,w1e,frr,grr,tU,hrr,urr,prr,fT,A1e,_rr,brr,aU,vrr,Frr,Trr,gT,y1e,Mrr,Err,nU,Crr,wrr,Arr,hT,L1e,yrr,Lrr,sU,xrr,$rr,krr,uT,x1e,Srr,Rrr,lU,Prr,Brr,Irr,pT,$1e,Nrr,qrr,iU,jrr,Drr,Grr,_T,k1e,Orr,Vrr,dU,Xrr,zrr,Qrr,bT,S1e,Wrr,Urr,cU,Hrr,Jrr,Yrr,vT,R1e,Krr,Zrr,mU,etr,otr,rtr,FT,P1e,ttr,atr,fU,ntr,str,ltr,TT,B1e,itr,dtr,gU,ctr,mtr,ftr,MT,I1e,gtr,htr,hU,utr,ptr,_tr,ET,N1e,btr,vtr,uU,Ftr,Ttr,Mtr,CT,q1e,Etr,Ctr,pU,wtr,Atr,ytr,wT,j1e,Ltr,xtr,_U,$tr,ktr,Str,AT,D1e,Rtr,Ptr,bU,Btr,Itr,Ntr,yT,G1e,qtr,jtr,vU,Dtr,Gtr,Otr,LT,O1e,Vtr,Xtr,FU,ztr,Qtr,Wtr,xT,V1e,Utr,Htr,TU,Jtr,Ytr,Ktr,$T,Ztr,X1e,ear,oar,z1e,rar,tar,kT,QJe,Bd,ST,Q1e,hx,aar,W1e,nar,WJe,Do,ux,sar,Id,lar,MU,iar,dar,EU,car,mar,far,px,gar,U1e,har,uar,par,Et,_x,_ar,H1e,bar,Far,Nd,Tar,J1e,Mar,Ear,CU,Car,war,Aar,RT,yar,no,bx,Lar,Y1e,xar,$ar,tn,kar,K1e,Sar,Rar,Z1e,Par,Bar,eFe,Iar,Nar,qar,Go,PT,oFe,jar,Dar,wU,Gar,Oar,Var,BT,rFe,Xar,zar,AU,Qar,War,Uar,IT,tFe,Har,Jar,yU,Yar,Kar,Zar,NT,aFe,enr,onr,LU,rnr,tnr,anr,qT,nFe,nnr,snr,xU,lnr,inr,dnr,jT,sFe,cnr,mnr,$U,fnr,gnr,hnr,DT,unr,lFe,pnr,_nr,iFe,bnr,vnr,GT,UJe,qd,OT,dFe,vx,Fnr,cFe,Tnr,HJe,Oo,Fx,Mnr,jd,Enr,kU,Cnr,wnr,SU,Anr,ynr,Lnr,Tx,xnr,mFe,$nr,knr,Snr,Ct,Mx,Rnr,fFe,Pnr,Bnr,Dd,Inr,gFe,Nnr,qnr,RU,jnr,Dnr,Gnr,VT,Onr,so,Ex,Vnr,hFe,Xnr,znr,an,Qnr,uFe,Wnr,Unr,pFe,Hnr,Jnr,_Fe,Ynr,Knr,Znr,H,XT,bFe,esr,osr,PU,rsr,tsr,asr,zT,vFe,nsr,ssr,BU,lsr,isr,dsr,QT,FFe,csr,msr,IU,fsr,gsr,hsr,WT,TFe,usr,psr,NU,_sr,bsr,vsr,UT,MFe,Fsr,Tsr,qU,Msr,Esr,Csr,HT,EFe,wsr,Asr,jU,ysr,Lsr,xsr,JT,CFe,$sr,ksr,DU,Ssr,Rsr,Psr,YT,wFe,Bsr,Isr,GU,Nsr,qsr,jsr,KT,AFe,Dsr,Gsr,OU,Osr,Vsr,Xsr,ZT,yFe,zsr,Qsr,VU,Wsr,Usr,Hsr,eM,LFe,Jsr,Ysr,XU,Ksr,Zsr,elr,oM,xFe,olr,rlr,zU,tlr,alr,nlr,rM,$Fe,slr,llr,QU,ilr,dlr,clr,tM,kFe,mlr,flr,WU,glr,hlr,ulr,aM,SFe,plr,_lr,UU,blr,vlr,Flr,nM,RFe,Tlr,Mlr,HU,Elr,Clr,wlr,sM,PFe,Alr,ylr,JU,Llr,xlr,$lr,lM,BFe,klr,Slr,YU,Rlr,Plr,Blr,iM,IFe,Ilr,Nlr,KU,qlr,jlr,Dlr,dM,NFe,Glr,Olr,ZU,Vlr,Xlr,zlr,cM,qFe,Qlr,Wlr,eH,Ulr,Hlr,Jlr,mM,jFe,Ylr,Klr,oH,Zlr,eir,oir,fM,DFe,rir,tir,rH,air,nir,sir,gM,GFe,lir,iir,tH,dir,cir,mir,hM,OFe,fir,gir,aH,hir,uir,pir,uM,VFe,_ir,bir,nH,vir,Fir,Tir,pM,XFe,Mir,Eir,sH,Cir,wir,Air,_M,zFe,yir,Lir,lH,xir,$ir,kir,bM,QFe,Sir,Rir,iH,Pir,Bir,Iir,vM,WFe,Nir,qir,dH,jir,Dir,Gir,FM,UFe,Oir,Vir,cH,Xir,zir,Qir,TM,HFe,Wir,Uir,mH,Hir,Jir,Yir,MM,JFe,Kir,Zir,fH,edr,odr,rdr,EM,YFe,tdr,adr,gH,ndr,sdr,ldr,CM,KFe,idr,ddr,hH,cdr,mdr,fdr,wM,ZFe,gdr,hdr,uH,udr,pdr,_dr,AM,eTe,bdr,vdr,pH,Fdr,Tdr,Mdr,yM,Edr,oTe,Cdr,wdr,rTe,Adr,ydr,LM,JJe,Gd,xM,tTe,Cx,Ldr,aTe,xdr,YJe,Vo,wx,$dr,Od,kdr,_H,Sdr,Rdr,bH,Pdr,Bdr,Idr,Ax,Ndr,nTe,qdr,jdr,Ddr,wt,yx,Gdr,sTe,Odr,Vdr,Vd,Xdr,lTe,zdr,Qdr,vH,Wdr,Udr,Hdr,$M,Jdr,lo,Lx,Ydr,iTe,Kdr,Zdr,nn,ecr,dTe,ocr,rcr,cTe,tcr,acr,mTe,ncr,scr,lcr,V,kM,fTe,icr,dcr,FH,ccr,mcr,fcr,SM,gTe,gcr,hcr,TH,ucr,pcr,_cr,RM,hTe,bcr,vcr,MH,Fcr,Tcr,Mcr,PM,uTe,Ecr,Ccr,EH,wcr,Acr,ycr,BM,pTe,Lcr,xcr,CH,$cr,kcr,Scr,IM,_Te,Rcr,Pcr,wH,Bcr,Icr,Ncr,NM,bTe,qcr,jcr,AH,Dcr,Gcr,Ocr,qM,vTe,Vcr,Xcr,yH,zcr,Qcr,Wcr,jM,FTe,Ucr,Hcr,LH,Jcr,Ycr,Kcr,DM,TTe,Zcr,emr,xH,omr,rmr,tmr,GM,MTe,amr,nmr,$H,smr,lmr,imr,OM,ETe,dmr,cmr,kH,mmr,fmr,gmr,VM,CTe,hmr,umr,SH,pmr,_mr,bmr,XM,wTe,vmr,Fmr,RH,Tmr,Mmr,Emr,zM,ATe,Cmr,wmr,PH,Amr,ymr,Lmr,QM,yTe,xmr,$mr,BH,kmr,Smr,Rmr,WM,LTe,Pmr,Bmr,IH,Imr,Nmr,qmr,UM,xTe,jmr,Dmr,NH,Gmr,Omr,Vmr,HM,$Te,Xmr,zmr,qH,Qmr,Wmr,Umr,JM,kTe,Hmr,Jmr,jH,Ymr,Kmr,Zmr,YM,STe,efr,ofr,DH,rfr,tfr,afr,KM,RTe,nfr,sfr,GH,lfr,ifr,dfr,ZM,PTe,cfr,mfr,OH,ffr,gfr,hfr,eE,BTe,ufr,pfr,VH,_fr,bfr,vfr,oE,ITe,Ffr,Tfr,XH,Mfr,Efr,Cfr,rE,NTe,wfr,Afr,zH,yfr,Lfr,xfr,tE,qTe,$fr,kfr,QH,Sfr,Rfr,Pfr,aE,jTe,Bfr,Ifr,WH,Nfr,qfr,jfr,nE,DTe,Dfr,Gfr,UH,Ofr,Vfr,Xfr,sE,GTe,zfr,Qfr,HH,Wfr,Ufr,Hfr,lE,OTe,Jfr,Yfr,JH,Kfr,Zfr,egr,iE,VTe,ogr,rgr,YH,tgr,agr,ngr,dE,XTe,sgr,lgr,KH,igr,dgr,cgr,cE,zTe,mgr,fgr,ZH,ggr,hgr,ugr,mE,QTe,pgr,_gr,eJ,bgr,vgr,Fgr,fE,WTe,Tgr,Mgr,oJ,Egr,Cgr,wgr,gE,UTe,Agr,ygr,rJ,Lgr,xgr,$gr,hE,HTe,kgr,Sgr,tJ,Rgr,Pgr,Bgr,uE,JTe,Igr,Ngr,aJ,qgr,jgr,Dgr,pE,YTe,Ggr,Ogr,nJ,Vgr,Xgr,zgr,_E,KTe,Qgr,Wgr,sJ,Ugr,Hgr,Jgr,bE,ZTe,Ygr,Kgr,lJ,Zgr,ehr,ohr,vE,eMe,rhr,thr,iJ,ahr,nhr,shr,FE,lhr,oMe,ihr,dhr,rMe,chr,mhr,TE,KJe,Xd,ME,tMe,xx,fhr,aMe,ghr,ZJe,Xo,$x,hhr,zd,uhr,dJ,phr,_hr,cJ,bhr,vhr,Fhr,kx,Thr,nMe,Mhr,Ehr,Chr,At,Sx,whr,sMe,Ahr,yhr,Qd,Lhr,lMe,xhr,$hr,mJ,khr,Shr,Rhr,EE,Phr,io,Rx,Bhr,iMe,Ihr,Nhr,sn,qhr,dMe,jhr,Dhr,cMe,Ghr,Ohr,mMe,Vhr,Xhr,zhr,fMe,CE,gMe,Qhr,Whr,fJ,Uhr,Hhr,Jhr,wE,Yhr,hMe,Khr,Zhr,uMe,eur,our,AE,eYe,Wd,yE,pMe,Px,rur,_Me,tur,oYe,zo,Bx,aur,Ud,nur,gJ,sur,lur,hJ,iur,dur,cur,Ix,mur,bMe,fur,gur,hur,yt,Nx,uur,vMe,pur,_ur,Hd,bur,FMe,vur,Fur,uJ,Tur,Mur,Eur,LE,Cur,co,qx,wur,TMe,Aur,yur,ln,Lur,MMe,xur,$ur,EMe,kur,Sur,CMe,Rur,Pur,Bur,Jd,xE,wMe,Iur,Nur,pJ,qur,jur,Dur,$E,AMe,Gur,Our,_J,Vur,Xur,zur,kE,yMe,Qur,Wur,bJ,Uur,Hur,Jur,SE,Yur,LMe,Kur,Zur,xMe,epr,opr,RE,rYe,Yd,PE,$Me,jx,rpr,kMe,tpr,tYe,Qo,Dx,apr,Kd,npr,vJ,spr,lpr,FJ,ipr,dpr,cpr,Gx,mpr,SMe,fpr,gpr,hpr,Lt,Ox,upr,RMe,ppr,_pr,Zd,bpr,PMe,vpr,Fpr,TJ,Tpr,Mpr,Epr,BE,Cpr,mo,Vx,wpr,BMe,Apr,ypr,dn,Lpr,IMe,xpr,$pr,NMe,kpr,Spr,qMe,Rpr,Ppr,Bpr,be,IE,jMe,Ipr,Npr,MJ,qpr,jpr,Dpr,NE,DMe,Gpr,Opr,EJ,Vpr,Xpr,zpr,qE,GMe,Qpr,Wpr,CJ,Upr,Hpr,Jpr,jE,OMe,Ypr,Kpr,wJ,Zpr,e_r,o_r,ul,VMe,r_r,t_r,AJ,a_r,n_r,yJ,s_r,l_r,i_r,DE,XMe,d_r,c_r,LJ,m_r,f_r,g_r,pl,zMe,h_r,u_r,xJ,p_r,__r,$J,b_r,v_r,F_r,GE,QMe,T_r,M_r,kJ,E_r,C_r,w_r,xt,WMe,A_r,y_r,SJ,L_r,x_r,RJ,$_r,k_r,PJ,S_r,R_r,P_r,OE,UMe,B_r,I_r,BJ,N_r,q_r,j_r,VE,HMe,D_r,G_r,IJ,O_r,V_r,X_r,XE,JMe,z_r,Q_r,NJ,W_r,U_r,H_r,zE,YMe,J_r,Y_r,qJ,K_r,Z_r,ebr,QE,KMe,obr,rbr,jJ,tbr,abr,nbr,WE,ZMe,sbr,lbr,DJ,ibr,dbr,cbr,UE,eEe,mbr,fbr,GJ,gbr,hbr,ubr,HE,oEe,pbr,_br,OJ,bbr,vbr,Fbr,JE,Tbr,rEe,Mbr,Ebr,tEe,Cbr,wbr,YE,aYe,ec,KE,aEe,Xx,Abr,nEe,ybr,nYe,Wo,zx,Lbr,oc,xbr,VJ,$br,kbr,XJ,Sbr,Rbr,Pbr,Qx,Bbr,sEe,Ibr,Nbr,qbr,$t,Wx,jbr,lEe,Dbr,Gbr,rc,Obr,iEe,Vbr,Xbr,zJ,zbr,Qbr,Wbr,ZE,Ubr,fo,Ux,Hbr,dEe,Jbr,Ybr,cn,Kbr,cEe,Zbr,e2r,mEe,o2r,r2r,fEe,t2r,a2r,n2r,gEe,e4,hEe,s2r,l2r,QJ,i2r,d2r,c2r,o4,m2r,uEe,f2r,g2r,pEe,h2r,u2r,r4,sYe,tc,t4,_Ee,Hx,p2r,bEe,_2r,lYe,Uo,Jx,b2r,ac,v2r,WJ,F2r,T2r,UJ,M2r,E2r,C2r,Yx,w2r,vEe,A2r,y2r,L2r,kt,Kx,x2r,FEe,$2r,k2r,nc,S2r,TEe,R2r,P2r,HJ,B2r,I2r,N2r,a4,q2r,go,Zx,j2r,MEe,D2r,G2r,mn,O2r,EEe,V2r,X2r,CEe,z2r,Q2r,wEe,W2r,U2r,H2r,AEe,n4,yEe,J2r,Y2r,JJ,K2r,Z2r,evr,s4,ovr,LEe,rvr,tvr,xEe,avr,nvr,l4,iYe,sc,i4,$Ee,e$,svr,kEe,lvr,dYe,Ho,o$,ivr,lc,dvr,YJ,cvr,mvr,KJ,fvr,gvr,hvr,r$,uvr,SEe,pvr,_vr,bvr,St,t$,vvr,REe,Fvr,Tvr,ic,Mvr,PEe,Evr,Cvr,ZJ,wvr,Avr,yvr,d4,Lvr,ho,a$,xvr,BEe,$vr,kvr,fn,Svr,IEe,Rvr,Pvr,NEe,Bvr,Ivr,qEe,Nvr,qvr,jvr,jEe,c4,DEe,Dvr,Gvr,eY,Ovr,Vvr,Xvr,m4,zvr,GEe,Qvr,Wvr,OEe,Uvr,Hvr,f4,cYe,dc,g4,VEe,n$,Jvr,XEe,Yvr,mYe,Jo,s$,Kvr,cc,Zvr,oY,e1r,o1r,rY,r1r,t1r,a1r,l$,n1r,zEe,s1r,l1r,i1r,Rt,i$,d1r,QEe,c1r,m1r,mc,f1r,WEe,g1r,h1r,tY,u1r,p1r,_1r,h4,b1r,uo,d$,v1r,UEe,F1r,T1r,gn,M1r,HEe,E1r,C1r,JEe,w1r,A1r,YEe,y1r,L1r,x1r,Pe,u4,KEe,$1r,k1r,aY,S1r,R1r,P1r,p4,ZEe,B1r,I1r,nY,N1r,q1r,j1r,_4,e4e,D1r,G1r,sY,O1r,V1r,X1r,b4,o4e,z1r,Q1r,lY,W1r,U1r,H1r,v4,r4e,J1r,Y1r,iY,K1r,Z1r,eFr,F4,t4e,oFr,rFr,dY,tFr,aFr,nFr,T4,a4e,sFr,lFr,cY,iFr,dFr,cFr,M4,n4e,mFr,fFr,mY,gFr,hFr,uFr,E4,s4e,pFr,_Fr,fY,bFr,vFr,FFr,C4,TFr,l4e,MFr,EFr,i4e,CFr,wFr,w4,fYe,fc,A4,d4e,c$,AFr,c4e,yFr,gYe,Yo,m$,LFr,gc,xFr,gY,$Fr,kFr,hY,SFr,RFr,PFr,f$,BFr,m4e,IFr,NFr,qFr,Pt,g$,jFr,f4e,DFr,GFr,hc,OFr,g4e,VFr,XFr,uY,zFr,QFr,WFr,y4,UFr,po,h$,HFr,h4e,JFr,YFr,hn,KFr,u4e,ZFr,eTr,p4e,oTr,rTr,_4e,tTr,aTr,nTr,ct,L4,b4e,sTr,lTr,pY,iTr,dTr,cTr,x4,v4e,mTr,fTr,_Y,gTr,hTr,uTr,$4,F4e,pTr,_Tr,bY,bTr,vTr,FTr,k4,T4e,TTr,MTr,vY,ETr,CTr,wTr,S4,M4e,ATr,yTr,FY,LTr,xTr,$Tr,R4,kTr,E4e,STr,RTr,C4e,PTr,BTr,P4,hYe,uc,B4,w4e,u$,ITr,A4e,NTr,uYe,Ko,p$,qTr,pc,jTr,TY,DTr,GTr,MY,OTr,VTr,XTr,_$,zTr,y4e,QTr,WTr,UTr,Bt,b$,HTr,L4e,JTr,YTr,_c,KTr,x4e,ZTr,eMr,EY,oMr,rMr,tMr,I4,aMr,_o,v$,nMr,$4e,sMr,lMr,un,iMr,k4e,dMr,cMr,S4e,mMr,fMr,R4e,gMr,hMr,uMr,ye,N4,P4e,pMr,_Mr,CY,bMr,vMr,FMr,q4,B4e,TMr,MMr,wY,EMr,CMr,wMr,j4,I4e,AMr,yMr,AY,LMr,xMr,$Mr,D4,N4e,kMr,SMr,yY,RMr,PMr,BMr,G4,q4e,IMr,NMr,LY,qMr,jMr,DMr,O4,j4e,GMr,OMr,xY,VMr,XMr,zMr,V4,D4e,QMr,WMr,$Y,UMr,HMr,JMr,X4,G4e,YMr,KMr,kY,ZMr,eEr,oEr,z4,O4e,rEr,tEr,SY,aEr,nEr,sEr,Q4,V4e,lEr,iEr,RY,dEr,cEr,mEr,W4,fEr,X4e,gEr,hEr,z4e,uEr,pEr,U4,pYe,bc,H4,Q4e,F$,_Er,W4e,bEr,_Ye,Zo,T$,vEr,vc,FEr,PY,TEr,MEr,BY,EEr,CEr,wEr,M$,AEr,U4e,yEr,LEr,xEr,It,E$,$Er,H4e,kEr,SEr,Fc,REr,J4e,PEr,BEr,IY,IEr,NEr,qEr,J4,jEr,bo,C$,DEr,Y4e,GEr,OEr,pn,VEr,K4e,XEr,zEr,Z4e,QEr,WEr,eCe,UEr,HEr,JEr,w$,Y4,oCe,YEr,KEr,NY,ZEr,e4r,o4r,K4,rCe,r4r,t4r,qY,a4r,n4r,s4r,Z4,l4r,tCe,i4r,d4r,aCe,c4r,m4r,eC,bYe,Tc,oC,nCe,A$,f4r,sCe,g4r,vYe,er,y$,h4r,Mc,u4r,jY,p4r,_4r,DY,b4r,v4r,F4r,L$,T4r,lCe,M4r,E4r,C4r,Nt,x$,w4r,iCe,A4r,y4r,Ec,L4r,dCe,x4r,$4r,GY,k4r,S4r,R4r,rC,P4r,vo,$$,B4r,cCe,I4r,N4r,_n,q4r,mCe,j4r,D4r,fCe,G4r,O4r,gCe,V4r,X4r,z4r,mt,tC,hCe,Q4r,W4r,OY,U4r,H4r,J4r,aC,uCe,Y4r,K4r,VY,Z4r,eCr,oCr,nC,pCe,rCr,tCr,XY,aCr,nCr,sCr,sC,_Ce,lCr,iCr,zY,dCr,cCr,mCr,lC,bCe,fCr,gCr,QY,hCr,uCr,pCr,iC,_Cr,vCe,bCr,vCr,FCe,FCr,TCr,dC,FYe,Cc,cC,TCe,k$,MCr,MCe,ECr,TYe,or,S$,CCr,wc,wCr,WY,ACr,yCr,UY,LCr,xCr,$Cr,R$,kCr,ECe,SCr,RCr,PCr,qt,P$,BCr,CCe,ICr,NCr,Ac,qCr,wCe,jCr,DCr,HY,GCr,OCr,VCr,mC,XCr,Fo,B$,zCr,ACe,QCr,WCr,bn,UCr,yCe,HCr,JCr,LCe,YCr,KCr,xCe,ZCr,e3r,o3r,vn,fC,$Ce,r3r,t3r,JY,a3r,n3r,s3r,gC,kCe,l3r,i3r,YY,d3r,c3r,m3r,hC,SCe,f3r,g3r,KY,h3r,u3r,p3r,uC,RCe,_3r,b3r,ZY,v3r,F3r,T3r,pC,M3r,PCe,E3r,C3r,BCe,w3r,A3r,_C,MYe,yc,bC,ICe,I$,y3r,NCe,L3r,EYe,rr,N$,x3r,Lc,$3r,eK,k3r,S3r,oK,R3r,P3r,B3r,q$,I3r,qCe,N3r,q3r,j3r,jt,j$,D3r,jCe,G3r,O3r,xc,V3r,DCe,X3r,z3r,rK,Q3r,W3r,U3r,vC,H3r,To,D$,J3r,GCe,Y3r,K3r,Fn,Z3r,OCe,e5r,o5r,VCe,r5r,t5r,XCe,a5r,n5r,s5r,G$,FC,zCe,l5r,i5r,tK,d5r,c5r,m5r,TC,QCe,f5r,g5r,aK,h5r,u5r,p5r,MC,_5r,WCe,b5r,v5r,UCe,F5r,T5r,EC,CYe,$c,CC,HCe,O$,M5r,JCe,E5r,wYe,tr,V$,C5r,kc,w5r,nK,A5r,y5r,sK,L5r,x5r,$5r,X$,k5r,YCe,S5r,R5r,P5r,Dt,z$,B5r,KCe,I5r,N5r,Sc,q5r,ZCe,j5r,D5r,lK,G5r,O5r,V5r,wC,X5r,Mo,Q$,z5r,e3e,Q5r,W5r,Tn,U5r,o3e,H5r,J5r,r3e,Y5r,K5r,t3e,Z5r,e0r,o0r,a3e,AC,n3e,r0r,t0r,iK,a0r,n0r,s0r,yC,l0r,s3e,i0r,d0r,l3e,c0r,m0r,LC,AYe,Rc,xC,i3e,W$,f0r,d3e,g0r,yYe,ar,U$,h0r,Pc,u0r,dK,p0r,_0r,cK,b0r,v0r,F0r,H$,T0r,c3e,M0r,E0r,C0r,Gt,J$,w0r,m3e,A0r,y0r,Bc,L0r,f3e,x0r,$0r,mK,k0r,S0r,R0r,$C,P0r,Eo,Y$,B0r,g3e,I0r,N0r,Mn,q0r,h3e,j0r,D0r,u3e,G0r,O0r,p3e,V0r,X0r,z0r,ft,kC,_3e,Q0r,W0r,fK,U0r,H0r,J0r,SC,b3e,Y0r,K0r,gK,Z0r,ewr,owr,RC,v3e,rwr,twr,hK,awr,nwr,swr,PC,F3e,lwr,iwr,uK,dwr,cwr,mwr,BC,T3e,fwr,gwr,pK,hwr,uwr,pwr,IC,_wr,M3e,bwr,vwr,E3e,Fwr,Twr,NC,LYe,Ic,qC,C3e,K$,Mwr,w3e,Ewr,xYe,nr,Z$,Cwr,Nc,wwr,_K,Awr,ywr,bK,Lwr,xwr,$wr,ek,kwr,A3e,Swr,Rwr,Pwr,Ot,ok,Bwr,y3e,Iwr,Nwr,qc,qwr,L3e,jwr,Dwr,vK,Gwr,Owr,Vwr,jC,Xwr,Co,rk,zwr,x3e,Qwr,Wwr,En,Uwr,$3e,Hwr,Jwr,k3e,Ywr,Kwr,S3e,Zwr,eAr,oAr,R3e,DC,P3e,rAr,tAr,FK,aAr,nAr,sAr,GC,lAr,B3e,iAr,dAr,I3e,cAr,mAr,OC,$Ye,jc,VC,N3e,tk,fAr,q3e,gAr,kYe,sr,ak,hAr,Dc,uAr,TK,pAr,_Ar,MK,bAr,vAr,FAr,nk,TAr,j3e,MAr,EAr,CAr,Vt,sk,wAr,D3e,AAr,yAr,Gc,LAr,G3e,xAr,$Ar,EK,kAr,SAr,RAr,XC,PAr,Ir,lk,BAr,O3e,IAr,NAr,Cn,qAr,V3e,jAr,DAr,X3e,GAr,OAr,z3e,VAr,XAr,zAr,N,zC,Q3e,QAr,WAr,CK,UAr,HAr,JAr,QC,W3e,YAr,KAr,wK,ZAr,e6r,o6r,WC,U3e,r6r,t6r,AK,a6r,n6r,s6r,UC,H3e,l6r,i6r,yK,d6r,c6r,m6r,HC,J3e,f6r,g6r,LK,h6r,u6r,p6r,JC,Y3e,_6r,b6r,xK,v6r,F6r,T6r,YC,K3e,M6r,E6r,$K,C6r,w6r,A6r,KC,Z3e,y6r,L6r,kK,x6r,$6r,k6r,ZC,e5e,S6r,R6r,SK,P6r,B6r,I6r,e3,o5e,N6r,q6r,RK,j6r,D6r,G6r,o3,r5e,O6r,V6r,PK,X6r,z6r,Q6r,r3,t5e,W6r,U6r,BK,H6r,J6r,Y6r,t3,a5e,K6r,Z6r,IK,e7r,o7r,r7r,a3,n5e,t7r,a7r,NK,n7r,s7r,l7r,n3,s5e,i7r,d7r,qK,c7r,m7r,f7r,s3,l5e,g7r,h7r,jK,u7r,p7r,_7r,l3,i5e,b7r,v7r,DK,F7r,T7r,M7r,i3,d5e,E7r,C7r,GK,w7r,A7r,y7r,_l,c5e,L7r,x7r,OK,$7r,k7r,VK,S7r,R7r,P7r,d3,m5e,B7r,I7r,XK,N7r,q7r,j7r,c3,f5e,D7r,G7r,zK,O7r,V7r,X7r,m3,g5e,z7r,Q7r,QK,W7r,U7r,H7r,f3,h5e,J7r,Y7r,WK,K7r,Z7r,eyr,g3,u5e,oyr,ryr,UK,tyr,ayr,nyr,h3,p5e,syr,lyr,HK,iyr,dyr,cyr,u3,_5e,myr,fyr,JK,gyr,hyr,uyr,p3,b5e,pyr,_yr,YK,byr,vyr,Fyr,_3,v5e,Tyr,Myr,KK,Eyr,Cyr,wyr,b3,F5e,Ayr,yyr,ZK,Lyr,xyr,$yr,v3,T5e,kyr,Syr,eZ,Ryr,Pyr,Byr,F3,M5e,Iyr,Nyr,oZ,qyr,jyr,Dyr,T3,E5e,Gyr,Oyr,rZ,Vyr,Xyr,zyr,M3,C5e,Qyr,Wyr,tZ,Uyr,Hyr,Jyr,E3,w5e,Yyr,Kyr,aZ,Zyr,eLr,oLr,C3,A5e,rLr,tLr,nZ,aLr,nLr,sLr,w3,y5e,lLr,iLr,sZ,dLr,cLr,mLr,A3,L5e,fLr,gLr,lZ,hLr,uLr,pLr,y3,x5e,_Lr,bLr,iZ,vLr,FLr,TLr,L3,$5e,MLr,ELr,dZ,CLr,wLr,ALr,x3,k5e,yLr,LLr,cZ,xLr,$Lr,kLr,$3,S5e,SLr,RLr,mZ,PLr,BLr,ILr,k3,R5e,NLr,qLr,fZ,jLr,DLr,GLr,S3,P5e,OLr,VLr,gZ,XLr,zLr,QLr,R3,B5e,WLr,ULr,hZ,HLr,JLr,YLr,P3,I5e,KLr,ZLr,uZ,e8r,o8r,r8r,B3,N5e,t8r,a8r,pZ,n8r,s8r,l8r,I3,q5e,i8r,d8r,_Z,c8r,m8r,f8r,N3,j5e,g8r,h8r,bZ,u8r,p8r,_8r,q3,D5e,b8r,v8r,vZ,F8r,T8r,M8r,j3,G5e,E8r,C8r,FZ,w8r,A8r,y8r,D3,O5e,L8r,x8r,TZ,$8r,k8r,S8r,G3,V5e,R8r,P8r,MZ,B8r,I8r,N8r,O3,X5e,q8r,j8r,EZ,D8r,G8r,O8r,V3,z5e,V8r,X8r,CZ,z8r,Q8r,W8r,X3,SYe,Oc,z3,Q5e,ik,U8r,W5e,H8r,RYe,lr,dk,J8r,Vc,Y8r,wZ,K8r,Z8r,AZ,e9r,o9r,r9r,ck,t9r,U5e,a9r,n9r,s9r,Xt,mk,l9r,H5e,i9r,d9r,Xc,c9r,J5e,m9r,f9r,yZ,g9r,h9r,u9r,Q3,p9r,Nr,fk,_9r,Y5e,b9r,v9r,wn,F9r,K5e,T9r,M9r,Z5e,E9r,C9r,e0e,w9r,A9r,y9r,se,W3,o0e,L9r,x9r,LZ,$9r,k9r,S9r,U3,r0e,R9r,P9r,xZ,B9r,I9r,N9r,H3,t0e,q9r,j9r,$Z,D9r,G9r,O9r,J3,a0e,V9r,X9r,kZ,z9r,Q9r,W9r,Y3,n0e,U9r,H9r,SZ,J9r,Y9r,K9r,K3,s0e,Z9r,exr,RZ,oxr,rxr,txr,Z3,l0e,axr,nxr,PZ,sxr,lxr,ixr,e5,i0e,dxr,cxr,BZ,mxr,fxr,gxr,o5,d0e,hxr,uxr,IZ,pxr,_xr,bxr,r5,c0e,vxr,Fxr,NZ,Txr,Mxr,Exr,t5,m0e,Cxr,wxr,qZ,Axr,yxr,Lxr,a5,f0e,xxr,$xr,jZ,kxr,Sxr,Rxr,n5,g0e,Pxr,Bxr,DZ,Ixr,Nxr,qxr,s5,h0e,jxr,Dxr,GZ,Gxr,Oxr,Vxr,l5,u0e,Xxr,zxr,OZ,Qxr,Wxr,Uxr,i5,p0e,Hxr,Jxr,VZ,Yxr,Kxr,Zxr,d5,_0e,e$r,o$r,XZ,r$r,t$r,a$r,c5,b0e,n$r,s$r,zZ,l$r,i$r,d$r,m5,v0e,c$r,m$r,QZ,f$r,g$r,h$r,f5,F0e,u$r,p$r,WZ,_$r,b$r,v$r,g5,T0e,F$r,T$r,UZ,M$r,E$r,C$r,h5,M0e,w$r,A$r,HZ,y$r,L$r,x$r,u5,E0e,$$r,k$r,JZ,S$r,R$r,P$r,p5,PYe,zc,_5,C0e,gk,B$r,w0e,I$r,BYe,ir,hk,N$r,Qc,q$r,YZ,j$r,D$r,KZ,G$r,O$r,V$r,uk,X$r,A0e,z$r,Q$r,W$r,zt,pk,U$r,y0e,H$r,J$r,Wc,Y$r,L0e,K$r,Z$r,ZZ,ekr,okr,rkr,b5,tkr,qr,_k,akr,x0e,nkr,skr,An,lkr,$0e,ikr,dkr,k0e,ckr,mkr,S0e,fkr,gkr,hkr,Me,v5,R0e,ukr,pkr,eee,_kr,bkr,vkr,F5,P0e,Fkr,Tkr,oee,Mkr,Ekr,Ckr,T5,B0e,wkr,Akr,ree,ykr,Lkr,xkr,M5,I0e,$kr,kkr,tee,Skr,Rkr,Pkr,E5,N0e,Bkr,Ikr,aee,Nkr,qkr,jkr,C5,q0e,Dkr,Gkr,nee,Okr,Vkr,Xkr,w5,j0e,zkr,Qkr,see,Wkr,Ukr,Hkr,A5,D0e,Jkr,Ykr,lee,Kkr,Zkr,eSr,y5,G0e,oSr,rSr,iee,tSr,aSr,nSr,L5,O0e,sSr,lSr,dee,iSr,dSr,cSr,x5,V0e,mSr,fSr,cee,gSr,hSr,uSr,$5,X0e,pSr,_Sr,mee,bSr,vSr,FSr,k5,z0e,TSr,MSr,fee,ESr,CSr,wSr,S5,Q0e,ASr,ySr,gee,LSr,xSr,$Sr,R5,IYe,Uc,P5,W0e,bk,kSr,U0e,SSr,NYe,dr,vk,RSr,Hc,PSr,hee,BSr,ISr,uee,NSr,qSr,jSr,Fk,DSr,H0e,GSr,OSr,VSr,Qt,Tk,XSr,J0e,zSr,QSr,Jc,WSr,Y0e,USr,HSr,pee,JSr,YSr,KSr,B5,ZSr,jr,Mk,eRr,K0e,oRr,rRr,yn,tRr,Z0e,aRr,nRr,ewe,sRr,lRr,owe,iRr,dRr,cRr,Be,I5,rwe,mRr,fRr,_ee,gRr,hRr,uRr,N5,twe,pRr,_Rr,bee,bRr,vRr,FRr,bl,awe,TRr,MRr,vee,ERr,CRr,Fee,wRr,ARr,yRr,q5,nwe,LRr,xRr,Tee,$Rr,kRr,SRr,j5,swe,RRr,PRr,Mee,BRr,IRr,NRr,D5,lwe,qRr,jRr,Eee,DRr,GRr,ORr,G5,iwe,VRr,XRr,Cee,zRr,QRr,WRr,O5,dwe,URr,HRr,wee,JRr,YRr,KRr,V5,cwe,ZRr,ePr,Aee,oPr,rPr,tPr,X5,qYe,Yc,z5,mwe,Ek,aPr,fwe,nPr,jYe,cr,Ck,sPr,Kc,lPr,yee,iPr,dPr,Lee,cPr,mPr,fPr,wk,gPr,gwe,hPr,uPr,pPr,Wt,Ak,_Pr,hwe,bPr,vPr,Zc,FPr,uwe,TPr,MPr,xee,EPr,CPr,wPr,Q5,APr,Dr,yk,yPr,pwe,LPr,xPr,Ln,$Pr,_we,kPr,SPr,bwe,RPr,PPr,vwe,BPr,IPr,NPr,em,W5,Fwe,qPr,jPr,$ee,DPr,GPr,OPr,U5,Twe,VPr,XPr,kee,zPr,QPr,WPr,H5,Mwe,UPr,HPr,See,JPr,YPr,KPr,J5,DYe,om,Y5,Ewe,Lk,ZPr,Cwe,eBr,GYe,mr,xk,oBr,rm,rBr,Ree,tBr,aBr,Pee,nBr,sBr,lBr,$k,iBr,wwe,dBr,cBr,mBr,Ut,kk,fBr,Awe,gBr,hBr,tm,uBr,ywe,pBr,_Br,Bee,bBr,vBr,FBr,K5,TBr,Gr,Sk,MBr,Lwe,EBr,CBr,xn,wBr,xwe,ABr,yBr,$we,LBr,xBr,kwe,$Br,kBr,SBr,fe,Z5,Swe,RBr,PBr,Iee,BBr,IBr,NBr,e0,Rwe,qBr,jBr,Nee,DBr,GBr,OBr,o0,Pwe,VBr,XBr,qee,zBr,QBr,WBr,r0,Bwe,UBr,HBr,jee,JBr,YBr,KBr,t0,Iwe,ZBr,eIr,Dee,oIr,rIr,tIr,a0,Nwe,aIr,nIr,Gee,sIr,lIr,iIr,n0,qwe,dIr,cIr,Oee,mIr,fIr,gIr,s0,jwe,hIr,uIr,Vee,pIr,_Ir,bIr,l0,Dwe,vIr,FIr,Xee,TIr,MIr,EIr,i0,Gwe,CIr,wIr,zee,AIr,yIr,LIr,d0,Owe,xIr,$Ir,Qee,kIr,SIr,RIr,c0,Vwe,PIr,BIr,Wee,IIr,NIr,qIr,m0,Xwe,jIr,DIr,Uee,GIr,OIr,VIr,f0,zwe,XIr,zIr,Hee,QIr,WIr,UIr,g0,Qwe,HIr,JIr,Jee,YIr,KIr,ZIr,h0,Wwe,eNr,oNr,Yee,rNr,tNr,aNr,u0,Uwe,nNr,sNr,Kee,lNr,iNr,dNr,p0,Hwe,cNr,mNr,Zee,fNr,gNr,hNr,_0,Jwe,uNr,pNr,eoe,_Nr,bNr,vNr,b0,Ywe,FNr,TNr,ooe,MNr,ENr,CNr,v0,OYe,am,F0,Kwe,Rk,wNr,Zwe,ANr,VYe,fr,Pk,yNr,nm,LNr,roe,xNr,$Nr,toe,kNr,SNr,RNr,Bk,PNr,eAe,BNr,INr,NNr,Ht,Ik,qNr,oAe,jNr,DNr,sm,GNr,rAe,ONr,VNr,aoe,XNr,zNr,QNr,T0,WNr,Or,Nk,UNr,tAe,HNr,JNr,$n,YNr,aAe,KNr,ZNr,nAe,eqr,oqr,sAe,rqr,tqr,aqr,Le,M0,lAe,nqr,sqr,noe,lqr,iqr,dqr,E0,iAe,cqr,mqr,soe,fqr,gqr,hqr,C0,dAe,uqr,pqr,loe,_qr,bqr,vqr,w0,cAe,Fqr,Tqr,ioe,Mqr,Eqr,Cqr,A0,mAe,wqr,Aqr,doe,yqr,Lqr,xqr,y0,fAe,$qr,kqr,coe,Sqr,Rqr,Pqr,L0,gAe,Bqr,Iqr,moe,Nqr,qqr,jqr,x0,hAe,Dqr,Gqr,foe,Oqr,Vqr,Xqr,$0,uAe,zqr,Qqr,goe,Wqr,Uqr,Hqr,k0,pAe,Jqr,Yqr,hoe,Kqr,Zqr,ejr,S0,XYe,lm,R0,_Ae,qk,ojr,bAe,rjr,zYe,gr,jk,tjr,im,ajr,uoe,njr,sjr,poe,ljr,ijr,djr,Dk,cjr,vAe,mjr,fjr,gjr,Jt,Gk,hjr,FAe,ujr,pjr,dm,_jr,TAe,bjr,vjr,_oe,Fjr,Tjr,Mjr,P0,Ejr,Vr,Ok,Cjr,MAe,wjr,Ajr,kn,yjr,EAe,Ljr,xjr,CAe,$jr,kjr,wAe,Sjr,Rjr,Pjr,re,B0,AAe,Bjr,Ijr,boe,Njr,qjr,jjr,I0,yAe,Djr,Gjr,voe,Ojr,Vjr,Xjr,N0,LAe,zjr,Qjr,Foe,Wjr,Ujr,Hjr,q0,xAe,Jjr,Yjr,Toe,Kjr,Zjr,eDr,j0,$Ae,oDr,rDr,Moe,tDr,aDr,nDr,D0,kAe,sDr,lDr,Eoe,iDr,dDr,cDr,G0,SAe,mDr,fDr,Coe,gDr,hDr,uDr,O0,RAe,pDr,_Dr,woe,bDr,vDr,FDr,V0,PAe,TDr,MDr,Aoe,EDr,CDr,wDr,X0,BAe,ADr,yDr,yoe,LDr,xDr,$Dr,z0,IAe,kDr,SDr,Loe,RDr,PDr,BDr,Q0,NAe,IDr,NDr,xoe,qDr,jDr,DDr,W0,qAe,GDr,ODr,$oe,VDr,XDr,zDr,U0,jAe,QDr,WDr,koe,UDr,HDr,JDr,H0,DAe,YDr,KDr,Soe,ZDr,eGr,oGr,J0,GAe,rGr,tGr,Roe,aGr,nGr,sGr,Y0,OAe,lGr,iGr,Poe,dGr,cGr,mGr,K0,VAe,fGr,gGr,Boe,hGr,uGr,pGr,Z0,XAe,_Gr,bGr,Ioe,vGr,FGr,TGr,ew,zAe,MGr,EGr,Noe,CGr,wGr,AGr,ow,QAe,yGr,LGr,qoe,xGr,$Gr,kGr,rw,WAe,SGr,RGr,joe,PGr,BGr,IGr,tw,UAe,NGr,qGr,Doe,jGr,DGr,GGr,aw,HAe,OGr,VGr,Goe,XGr,zGr,QGr,nw,JAe,WGr,UGr,Ooe,HGr,JGr,YGr,sw,YAe,KGr,ZGr,Voe,eOr,oOr,rOr,lw,KAe,tOr,aOr,Xoe,nOr,sOr,lOr,iw,QYe,cm,dw,ZAe,Vk,iOr,e6e,dOr,WYe,hr,Xk,cOr,mm,mOr,zoe,fOr,gOr,Qoe,hOr,uOr,pOr,zk,_Or,o6e,bOr,vOr,FOr,Yt,Qk,TOr,r6e,MOr,EOr,fm,COr,t6e,wOr,AOr,Woe,yOr,LOr,xOr,cw,$Or,Xr,Wk,kOr,a6e,SOr,ROr,Sn,POr,n6e,BOr,IOr,s6e,NOr,qOr,l6e,jOr,DOr,GOr,ve,mw,i6e,OOr,VOr,Uoe,XOr,zOr,QOr,fw,d6e,WOr,UOr,Hoe,HOr,JOr,YOr,gw,c6e,KOr,ZOr,Joe,eVr,oVr,rVr,hw,m6e,tVr,aVr,Yoe,nVr,sVr,lVr,uw,f6e,iVr,dVr,Koe,cVr,mVr,fVr,pw,g6e,gVr,hVr,Zoe,uVr,pVr,_Vr,_w,h6e,bVr,vVr,ere,FVr,TVr,MVr,bw,u6e,EVr,CVr,ore,wVr,AVr,yVr,vw,p6e,LVr,xVr,rre,$Vr,kVr,SVr,Fw,_6e,RVr,PVr,tre,BVr,IVr,NVr,Tw,b6e,qVr,jVr,are,DVr,GVr,OVr,Mw,v6e,VVr,XVr,nre,zVr,QVr,WVr,Ew,F6e,UVr,HVr,sre,JVr,YVr,KVr,Cw,T6e,ZVr,eXr,lre,oXr,rXr,tXr,ww,M6e,aXr,nXr,ire,sXr,lXr,iXr,Aw,E6e,dXr,cXr,dre,mXr,fXr,gXr,yw,C6e,hXr,uXr,cre,pXr,_Xr,bXr,Lw,UYe,gm,xw,w6e,Uk,vXr,A6e,FXr,HYe,ur,Hk,TXr,hm,MXr,mre,EXr,CXr,fre,wXr,AXr,yXr,Jk,LXr,y6e,xXr,$Xr,kXr,Kt,Yk,SXr,L6e,RXr,PXr,um,BXr,x6e,IXr,NXr,gre,qXr,jXr,DXr,$w,GXr,zr,Kk,OXr,$6e,VXr,XXr,Rn,zXr,k6e,QXr,WXr,S6e,UXr,HXr,R6e,JXr,YXr,KXr,Zk,kw,P6e,ZXr,ezr,hre,ozr,rzr,tzr,Sw,B6e,azr,nzr,ure,szr,lzr,izr,Rw,JYe,pm,Pw,I6e,eS,dzr,N6e,czr,YYe,pr,oS,mzr,_m,fzr,pre,gzr,hzr,_re,uzr,pzr,_zr,rS,bzr,q6e,vzr,Fzr,Tzr,Zt,tS,Mzr,j6e,Ezr,Czr,bm,wzr,D6e,Azr,yzr,bre,Lzr,xzr,$zr,Bw,kzr,Qr,aS,Szr,G6e,Rzr,Pzr,Pn,Bzr,O6e,Izr,Nzr,V6e,qzr,jzr,X6e,Dzr,Gzr,Ozr,z6e,Iw,Q6e,Vzr,Xzr,vre,zzr,Qzr,Wzr,Nw,KYe,vm,qw,W6e,nS,Uzr,U6e,Hzr,ZYe,_r,sS,Jzr,Fm,Yzr,Fre,Kzr,Zzr,Tre,eQr,oQr,rQr,lS,tQr,H6e,aQr,nQr,sQr,ea,iS,lQr,J6e,iQr,dQr,Tm,cQr,Y6e,mQr,fQr,Mre,gQr,hQr,uQr,jw,pQr,Wr,dS,_Qr,K6e,bQr,vQr,Bn,FQr,Z6e,TQr,MQr,e7e,EQr,CQr,o7e,wQr,AQr,yQr,r7e,Dw,t7e,LQr,xQr,Ere,$Qr,kQr,SQr,Gw,eKe,Mm,Ow,a7e,cS,RQr,n7e,PQr,oKe,br,mS,BQr,Em,IQr,Cre,NQr,qQr,wre,jQr,DQr,GQr,fS,OQr,s7e,VQr,XQr,zQr,oa,gS,QQr,l7e,WQr,UQr,Cm,HQr,i7e,JQr,YQr,Are,KQr,ZQr,eWr,Vw,oWr,Ur,hS,rWr,d7e,tWr,aWr,In,nWr,c7e,sWr,lWr,m7e,iWr,dWr,f7e,cWr,mWr,fWr,ie,Xw,g7e,gWr,hWr,yre,uWr,pWr,_Wr,zw,h7e,bWr,vWr,Lre,FWr,TWr,MWr,Qw,u7e,EWr,CWr,xre,wWr,AWr,yWr,Ww,p7e,LWr,xWr,$re,$Wr,kWr,SWr,Uw,_7e,RWr,PWr,kre,BWr,IWr,NWr,Hw,b7e,qWr,jWr,Sre,DWr,GWr,OWr,Jw,v7e,VWr,XWr,Rre,zWr,QWr,WWr,Yw,F7e,UWr,HWr,Pre,JWr,YWr,KWr,Kw,T7e,ZWr,eUr,Bre,oUr,rUr,tUr,Zw,M7e,aUr,nUr,Ire,sUr,lUr,iUr,eA,E7e,dUr,cUr,Nre,mUr,fUr,gUr,oA,C7e,hUr,uUr,qre,pUr,_Ur,bUr,rA,w7e,vUr,FUr,jre,TUr,MUr,EUr,tA,A7e,CUr,wUr,Dre,AUr,yUr,LUr,aA,y7e,xUr,$Ur,Gre,kUr,SUr,RUr,nA,L7e,PUr,BUr,Ore,IUr,NUr,qUr,sA,x7e,jUr,DUr,Vre,GUr,OUr,VUr,lA,$7e,XUr,zUr,Xre,QUr,WUr,UUr,iA,k7e,HUr,JUr,zre,YUr,KUr,ZUr,dA,S7e,eHr,oHr,Qre,rHr,tHr,aHr,cA,R7e,nHr,sHr,Wre,lHr,iHr,dHr,mA,rKe,wm,fA,P7e,uS,cHr,B7e,mHr,tKe,vr,pS,fHr,Am,gHr,Ure,hHr,uHr,Hre,pHr,_Hr,bHr,_S,vHr,I7e,FHr,THr,MHr,ra,bS,EHr,N7e,CHr,wHr,ym,AHr,q7e,yHr,LHr,Jre,xHr,$Hr,kHr,gA,SHr,Hr,vS,RHr,j7e,PHr,BHr,Nn,IHr,D7e,NHr,qHr,G7e,jHr,DHr,O7e,GHr,OHr,VHr,de,hA,V7e,XHr,zHr,Yre,QHr,WHr,UHr,uA,X7e,HHr,JHr,Kre,YHr,KHr,ZHr,pA,z7e,eJr,oJr,Zre,rJr,tJr,aJr,_A,Q7e,nJr,sJr,ete,lJr,iJr,dJr,bA,W7e,cJr,mJr,ote,fJr,gJr,hJr,vA,U7e,uJr,pJr,rte,_Jr,bJr,vJr,FA,H7e,FJr,TJr,tte,MJr,EJr,CJr,TA,J7e,wJr,AJr,ate,yJr,LJr,xJr,MA,Y7e,$Jr,kJr,nte,SJr,RJr,PJr,EA,K7e,BJr,IJr,ste,NJr,qJr,jJr,CA,Z7e,DJr,GJr,lte,OJr,VJr,XJr,wA,eye,zJr,QJr,ite,WJr,UJr,HJr,AA,oye,JJr,YJr,dte,KJr,ZJr,eYr,yA,rye,oYr,rYr,cte,tYr,aYr,nYr,LA,tye,sYr,lYr,mte,iYr,dYr,cYr,xA,aye,mYr,fYr,fte,gYr,hYr,uYr,$A,nye,pYr,_Yr,gte,bYr,vYr,FYr,kA,sye,TYr,MYr,hte,EYr,CYr,wYr,SA,lye,AYr,yYr,ute,LYr,xYr,$Yr,RA,iye,kYr,SYr,pte,RYr,PYr,BYr,PA,dye,IYr,NYr,_te,qYr,jYr,DYr,BA,aKe,Lm,IA,cye,FS,GYr,mye,OYr,nKe,Fr,TS,VYr,xm,XYr,bte,zYr,QYr,vte,WYr,UYr,HYr,MS,JYr,fye,YYr,KYr,ZYr,ta,ES,eKr,gye,oKr,rKr,$m,tKr,hye,aKr,nKr,Fte,sKr,lKr,iKr,NA,dKr,Jr,CS,cKr,uye,mKr,fKr,qn,gKr,pye,hKr,uKr,_ye,pKr,_Kr,bye,bKr,vKr,FKr,vye,qA,Fye,TKr,MKr,Tte,EKr,CKr,wKr,jA,sKe,km,DA,Tye,wS,AKr,Mye,yKr,lKe,Tr,AS,LKr,Sm,xKr,Mte,$Kr,kKr,Ete,SKr,RKr,PKr,yS,BKr,Eye,IKr,NKr,qKr,aa,LS,jKr,Cye,DKr,GKr,Rm,OKr,wye,VKr,XKr,Cte,zKr,QKr,WKr,GA,UKr,Yr,xS,HKr,Aye,JKr,YKr,jn,KKr,yye,ZKr,eZr,Lye,oZr,rZr,xye,tZr,aZr,nZr,$ye,OA,kye,sZr,lZr,wte,iZr,dZr,cZr,VA,iKe,Pm,XA,Sye,$S,mZr,Rye,fZr,dKe,Mr,kS,gZr,Bm,hZr,Ate,uZr,pZr,yte,_Zr,bZr,vZr,SS,FZr,Pye,TZr,MZr,EZr,na,RS,CZr,Bye,wZr,AZr,Im,yZr,Iye,LZr,xZr,Lte,$Zr,kZr,SZr,zA,RZr,Kr,PS,PZr,Nye,BZr,IZr,Dn,NZr,qye,qZr,jZr,jye,DZr,GZr,Dye,OZr,VZr,XZr,te,QA,Gye,zZr,QZr,xte,WZr,UZr,HZr,WA,Oye,JZr,YZr,$te,KZr,ZZr,eet,UA,Vye,oet,ret,kte,tet,aet,net,HA,Xye,set,iet,Ste,det,cet,met,JA,zye,fet,get,Rte,het,uet,pet,YA,Qye,_et,bet,Pte,vet,Fet,Tet,KA,Wye,Met,Eet,Bte,Cet,wet,Aet,ZA,Uye,yet,Let,Ite,xet,$et,ket,e6,Hye,Set,Ret,Nte,Pet,Bet,Iet,o6,Jye,Net,qet,qte,jet,Det,Get,r6,Yye,Oet,Vet,jte,Xet,zet,Qet,t6,Kye,Wet,Uet,Dte,Het,Jet,Yet,a6,Zye,Ket,Zet,Gte,eot,oot,rot,n6,eLe,tot,aot,Ote,not,sot,lot,s6,oLe,iot,dot,Vte,cot,mot,fot,l6,rLe,got,hot,Xte,uot,pot,_ot,i6,tLe,bot,vot,zte,Fot,Tot,Mot,d6,aLe,Eot,Cot,Qte,wot,Aot,yot,c6,nLe,Lot,xot,Wte,$ot,kot,Sot,m6,sLe,Rot,Pot,Ute,Bot,Iot,Not,f6,lLe,qot,jot,Hte,Dot,Got,Oot,g6,iLe,Vot,Xot,Jte,zot,Qot,Wot,h6,dLe,Uot,Hot,Yte,Jot,Yot,Kot,u6,cLe,Zot,ert,Kte,ort,rrt,trt,p6,mLe,art,nrt,Zte,srt,lrt,irt,_6,fLe,drt,crt,eae,mrt,frt,grt,b6,gLe,hrt,urt,oae,prt,_rt,brt,v6,cKe,Nm,F6,hLe,BS,vrt,uLe,Frt,mKe,Er,IS,Trt,qm,Mrt,rae,Ert,Crt,tae,wrt,Art,yrt,NS,Lrt,pLe,xrt,$rt,krt,sa,qS,Srt,_Le,Rrt,Prt,jm,Brt,bLe,Irt,Nrt,aae,qrt,jrt,Drt,T6,Grt,Zr,jS,Ort,vLe,Vrt,Xrt,Gn,zrt,FLe,Qrt,Wrt,TLe,Urt,Hrt,MLe,Jrt,Yrt,Krt,xe,M6,ELe,Zrt,ett,nae,ott,rtt,ttt,E6,CLe,att,ntt,sae,stt,ltt,itt,C6,wLe,dtt,ctt,lae,mtt,ftt,gtt,w6,ALe,htt,utt,iae,ptt,_tt,btt,A6,yLe,vtt,Ftt,dae,Ttt,Mtt,Ett,y6,LLe,Ctt,wtt,cae,Att,ytt,Ltt,L6,xLe,xtt,$tt,mae,ktt,Stt,Rtt,x6,$Le,Ptt,Btt,fae,Itt,Ntt,qtt,$6,kLe,jtt,Dtt,gae,Gtt,Ott,Vtt,k6,SLe,Xtt,ztt,hae,Qtt,Wtt,Utt,S6,fKe,Dm,R6,RLe,DS,Htt,PLe,Jtt,gKe,Cr,GS,Ytt,Gm,Ktt,uae,Ztt,eat,pae,oat,rat,tat,OS,aat,BLe,nat,sat,lat,la,VS,iat,ILe,dat,cat,Om,mat,NLe,fat,gat,_ae,hat,uat,pat,P6,_at,et,XS,bat,qLe,vat,Fat,On,Tat,jLe,Mat,Eat,DLe,Cat,wat,GLe,Aat,yat,Lat,Ee,B6,OLe,xat,$at,bae,kat,Sat,Rat,I6,VLe,Pat,Bat,vae,Iat,Nat,qat,N6,XLe,jat,Dat,Fae,Gat,Oat,Vat,q6,zLe,Xat,zat,Tae,Qat,Wat,Uat,j6,QLe,Hat,Jat,Mae,Yat,Kat,Zat,D6,WLe,ent,ont,Eae,rnt,tnt,ant,G6,ULe,nnt,snt,Cae,lnt,int,dnt,O6,HLe,cnt,mnt,wae,fnt,gnt,hnt,V6,JLe,unt,pnt,Aae,_nt,bnt,vnt,X6,YLe,Fnt,Tnt,yae,Mnt,Ent,Cnt,z6,KLe,wnt,Ant,Lae,ynt,Lnt,xnt,Q6,ZLe,$nt,knt,xae,Snt,Rnt,Pnt,W6,e8e,Bnt,Int,$ae,Nnt,qnt,jnt,U6,hKe,Vm,H6,o8e,zS,Dnt,r8e,Gnt,uKe,wr,QS,Ont,Xm,Vnt,kae,Xnt,znt,Sae,Qnt,Wnt,Unt,WS,Hnt,t8e,Jnt,Ynt,Knt,ia,US,Znt,a8e,est,ost,zm,rst,n8e,tst,ast,Rae,nst,sst,lst,J6,ist,ot,HS,dst,s8e,cst,mst,Vn,fst,l8e,gst,hst,i8e,ust,pst,d8e,_st,bst,vst,$e,Y6,c8e,Fst,Tst,Pae,Mst,Est,Cst,K6,m8e,wst,Ast,Bae,yst,Lst,xst,Z6,f8e,$st,kst,Iae,Sst,Rst,Pst,e7,g8e,Bst,Ist,Nae,Nst,qst,jst,o7,h8e,Dst,Gst,qae,Ost,Vst,Xst,r7,u8e,zst,Qst,jae,Wst,Ust,Hst,t7,p8e,Jst,Yst,Dae,Kst,Zst,elt,a7,_8e,olt,rlt,Gae,tlt,alt,nlt,n7,b8e,slt,llt,Oae,ilt,dlt,clt,s7,v8e,mlt,flt,Vae,glt,hlt,ult,l7,pKe,Qm,i7,F8e,JS,plt,T8e,_lt,_Ke,Ar,YS,blt,Wm,vlt,Xae,Flt,Tlt,zae,Mlt,Elt,Clt,KS,wlt,M8e,Alt,ylt,Llt,da,ZS,xlt,E8e,$lt,klt,Um,Slt,C8e,Rlt,Plt,Qae,Blt,Ilt,Nlt,d7,qlt,rt,eR,jlt,w8e,Dlt,Glt,Xn,Olt,A8e,Vlt,Xlt,y8e,zlt,Qlt,L8e,Wlt,Ult,Hlt,ke,c7,x8e,Jlt,Ylt,Wae,Klt,Zlt,eit,m7,$8e,oit,rit,Uae,tit,ait,nit,f7,k8e,sit,lit,Hae,iit,dit,cit,g7,S8e,mit,fit,Jae,git,hit,uit,h7,R8e,pit,_it,Yae,bit,vit,Fit,u7,P8e,Tit,Mit,Kae,Eit,Cit,wit,p7,B8e,Ait,yit,Zae,Lit,xit,$it,_7,I8e,kit,Sit,ene,Rit,Pit,Bit,b7,N8e,Iit,Nit,one,qit,jit,Dit,v7,q8e,Git,Oit,rne,Vit,Xit,zit,F7,bKe,Hm,T7,j8e,oR,Qit,D8e,Wit,vKe,yr,rR,Uit,Jm,Hit,tne,Jit,Yit,ane,Kit,Zit,edt,tR,odt,G8e,rdt,tdt,adt,ca,aR,ndt,O8e,sdt,ldt,Ym,idt,V8e,ddt,cdt,nne,mdt,fdt,gdt,M7,hdt,tt,nR,udt,X8e,pdt,_dt,zn,bdt,z8e,vdt,Fdt,Q8e,Tdt,Mdt,W8e,Edt,Cdt,wdt,Se,E7,U8e,Adt,ydt,sne,Ldt,xdt,$dt,C7,H8e,kdt,Sdt,lne,Rdt,Pdt,Bdt,w7,J8e,Idt,Ndt,ine,qdt,jdt,Ddt,A7,Y8e,Gdt,Odt,dne,Vdt,Xdt,zdt,y7,K8e,Qdt,Wdt,cne,Udt,Hdt,Jdt,L7,Z8e,Ydt,Kdt,mne,Zdt,ect,oct,x7,e9e,rct,tct,fne,act,nct,sct,$7,o9e,lct,ict,gne,dct,cct,mct,k7,r9e,fct,gct,hne,hct,uct,pct,S7,t9e,_ct,bct,une,vct,Fct,Tct,R7,FKe,Km,P7,a9e,sR,Mct,n9e,Ect,TKe,Lr,lR,Cct,Zm,wct,pne,Act,yct,_ne,Lct,xct,$ct,iR,kct,s9e,Sct,Rct,Pct,ma,dR,Bct,l9e,Ict,Nct,ef,qct,i9e,jct,Dct,bne,Gct,Oct,Vct,B7,Xct,at,cR,zct,d9e,Qct,Wct,Qn,Uct,c9e,Hct,Jct,m9e,Yct,Kct,f9e,Zct,emt,omt,Re,I7,g9e,rmt,tmt,vne,amt,nmt,smt,N7,h9e,lmt,imt,Fne,dmt,cmt,mmt,q7,u9e,fmt,gmt,Tne,hmt,umt,pmt,j7,p9e,_mt,bmt,Mne,vmt,Fmt,Tmt,D7,_9e,Mmt,Emt,Ene,Cmt,wmt,Amt,G7,b9e,ymt,Lmt,Cne,xmt,$mt,kmt,O7,v9e,Smt,Rmt,wne,Pmt,Bmt,Imt,V7,F9e,Nmt,qmt,Ane,jmt,Dmt,Gmt,X7,T9e,Omt,Vmt,yne,Xmt,zmt,Qmt,z7,M9e,Wmt,Umt,Lne,Hmt,Jmt,Ymt,Q7,MKe,of,W7,E9e,mR,Kmt,C9e,Zmt,EKe,xr,fR,eft,rf,oft,xne,rft,tft,$ne,aft,nft,sft,gR,lft,w9e,ift,dft,cft,fa,hR,mft,A9e,fft,gft,tf,hft,y9e,uft,pft,kne,_ft,bft,vft,U7,Fft,nt,uR,Tft,L9e,Mft,Eft,Wn,Cft,x9e,wft,Aft,$9e,yft,Lft,k9e,xft,$ft,kft,Xe,H7,S9e,Sft,Rft,Sne,Pft,Bft,Ift,J7,R9e,Nft,qft,Rne,jft,Dft,Gft,Y7,P9e,Oft,Vft,Pne,Xft,zft,Qft,K7,B9e,Wft,Uft,Bne,Hft,Jft,Yft,Z7,I9e,Kft,Zft,Ine,egt,ogt,rgt,ey,N9e,tgt,agt,Nne,ngt,sgt,lgt,oy,q9e,igt,dgt,qne,cgt,mgt,fgt,ry,j9e,ggt,hgt,jne,ugt,pgt,_gt,ty,CKe,af,ay,D9e,pR,bgt,G9e,vgt,wKe,$r,_R,Fgt,nf,Tgt,Dne,Mgt,Egt,Gne,Cgt,wgt,Agt,bR,ygt,O9e,Lgt,xgt,$gt,ga,vR,kgt,V9e,Sgt,Rgt,sf,Pgt,X9e,Bgt,Igt,One,Ngt,qgt,jgt,ny,Dgt,st,FR,Ggt,z9e,Ogt,Vgt,Un,Xgt,Q9e,zgt,Qgt,W9e,Wgt,Ugt,U9e,Hgt,Jgt,Ygt,ze,sy,H9e,Kgt,Zgt,Vne,eht,oht,rht,ly,J9e,tht,aht,Xne,nht,sht,lht,iy,Y9e,iht,dht,zne,cht,mht,fht,dy,K9e,ght,hht,Qne,uht,pht,_ht,cy,Z9e,bht,vht,Wne,Fht,Tht,Mht,my,exe,Eht,Cht,Une,wht,Aht,yht,fy,oxe,Lht,xht,Hne,$ht,kht,Sht,gy,rxe,Rht,Pht,Jne,Bht,Iht,Nht,hy,AKe,lf,uy,txe,TR,qht,axe,jht,yKe,kr,MR,Dht,df,Ght,Yne,Oht,Vht,Kne,Xht,zht,Qht,ER,Wht,nxe,Uht,Hht,Jht,ha,CR,Yht,sxe,Kht,Zht,cf,eut,lxe,out,rut,Zne,tut,aut,nut,py,sut,lt,wR,lut,ixe,iut,dut,Hn,cut,dxe,mut,fut,cxe,gut,hut,mxe,uut,put,_ut,fxe,_y,gxe,but,vut,ese,Fut,Tut,Mut,by,LKe,mf,vy,hxe,AR,Eut,uxe,Cut,xKe,Sr,yR,wut,ff,Aut,ose,yut,Lut,rse,xut,$ut,kut,LR,Sut,pxe,Rut,Put,But,ua,xR,Iut,_xe,Nut,qut,gf,jut,bxe,Dut,Gut,tse,Out,Vut,Xut,Fy,zut,it,$R,Qut,vxe,Wut,Uut,Jn,Hut,Fxe,Jut,Yut,Txe,Kut,Zut,Mxe,ept,opt,rpt,kR,Ty,Exe,tpt,apt,ase,npt,spt,lpt,My,Cxe,ipt,dpt,nse,cpt,mpt,fpt,Ey,$Ke,hf,Cy,wxe,SR,gpt,Axe,hpt,kKe,Rr,RR,upt,uf,ppt,sse,_pt,bpt,lse,vpt,Fpt,Tpt,PR,Mpt,yxe,Ept,Cpt,wpt,pa,BR,Apt,Lxe,ypt,Lpt,pf,xpt,xxe,$pt,kpt,ise,Spt,Rpt,Ppt,wy,Bpt,dt,IR,Ipt,$xe,Npt,qpt,Yn,jpt,kxe,Dpt,Gpt,Sxe,Opt,Vpt,Rxe,Xpt,zpt,Qpt,Pxe,Ay,Bxe,Wpt,Upt,dse,Hpt,Jpt,Ypt,yy,SKe;return d=new oe({}),Qa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),l9=new oe({}),i9=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),wf=new Kpt({props:{warning:!0,$$slots:{default:[vda]},$$scope:{ctx:$}}}),d9=new oe({}),c9=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L628"}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L651"}}),Oh=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Fda]},$$scope:{ctx:$}}}),h9=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L774"}}),u9=new oe({}),p9=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L418"}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L432"}}),Cu=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Tda]},$$scope:{ctx:$}}}),F9=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L633"}}),T9=new oe({}),M9=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),mp=new Kpt({props:{$$slots:{default:[Mda]},$$scope:{ctx:$}}}),fp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Eda]},$$scope:{ctx:$}}}),A9=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),y9=new oe({}),L9=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L91"}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L105"}}),Bp=new Kpt({props:{$$slots:{default:[Cda]},$$scope:{ctx:$}}}),Ip=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[wda]},$$scope:{ctx:$}}}),S9=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L258"}}),R9=new oe({}),P9=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L822"}}),I9=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Ada]},$$scope:{ctx:$}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Hb=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[yda]},$$scope:{ctx:$}}}),q9=new oe({}),j9=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L829"}}),G9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Yb=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Lda]},$$scope:{ctx:$}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[xda]},$$scope:{ctx:$}}}),V9=new oe({}),X9=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L844"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[$da]},$$scope:{ctx:$}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Iv=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[kda]},$$scope:{ctx:$}}}),U9=new oe({}),H9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L851"}}),Y9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Sda]},$$scope:{ctx:$}}}),K9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Rda]},$$scope:{ctx:$}}}),Z9=new oe({}),ex=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L858"}}),rx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Pda]},$$scope:{ctx:$}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Bda]},$$scope:{ctx:$}}}),ax=new oe({}),nx=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L867"}}),lx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Ida]},$$scope:{ctx:$}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JF=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Nda]},$$scope:{ctx:$}}}),dx=new oe({}),cx=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L923"}}),fx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[qda]},$$scope:{ctx:$}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jda]},$$scope:{ctx:$}}}),hx=new oe({}),ux=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L930"}}),_x=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Dda]},$$scope:{ctx:$}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Gda]},$$scope:{ctx:$}}}),vx=new oe({}),Fx=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L916"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Oda]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Vda]},$$scope:{ctx:$}}}),Cx=new oe({}),wx=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L876"}}),yx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Xda]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[zda]},$$scope:{ctx:$}}}),xx=new oe({}),$x=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L883"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Qda]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Wda]},$$scope:{ctx:$}}}),Px=new oe({}),Bx=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L905"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[Uda]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new B({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[Hda]},$$scope:{ctx:$}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L939"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Jda]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),YE=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Yda]},$$scope:{ctx:$}}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L978"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ZE=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[Kda]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r4=new B({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[Zda]},$$scope:{ctx:$}}}),Hx=new oe({}),Jx=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L985"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a4=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[eca]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l4=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oca]},$$scope:{ctx:$}}}),e$=new oe({}),o$=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L894"}}),t$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d4=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[rca]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f4=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[tca]},$$scope:{ctx:$}}}),n$=new oe({}),s$=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L992"}}),i$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h4=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[aca]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[nca]},$$scope:{ctx:$}}}),c$=new oe({}),m$=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1015"}}),g$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[sca]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P4=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[lca]},$$scope:{ctx:$}}}),u$=new oe({}),p$=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L999"}}),b$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I4=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[ica]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[dca]},$$scope:{ctx:$}}}),F$=new oe({}),T$=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1006"}}),E$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[cca]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[mca]},$$scope:{ctx:$}}}),A$=new oe({}),y$=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1024"}}),x$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[fca]},$$scope:{ctx:$}}}),$$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dC=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[gca]},$$scope:{ctx:$}}}),k$=new oe({}),S$=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1031"}}),P$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[hca]},$$scope:{ctx:$}}}),B$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_C=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[uca]},$$scope:{ctx:$}}}),I$=new oe({}),N$=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L971"}}),j$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[pca]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EC=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[_ca]},$$scope:{ctx:$}}}),O$=new oe({}),V$=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L946"}}),z$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[bca]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[vca]},$$scope:{ctx:$}}}),W$=new oe({}),U$=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L953"}}),J$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$C=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Fca]},$$scope:{ctx:$}}}),Y$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Tca]},$$scope:{ctx:$}}}),K$=new oe({}),Z$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L962"}}),ok=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Mca]},$$scope:{ctx:$}}}),rk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Eca]},$$scope:{ctx:$}}}),tk=new oe({}),ak=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),sk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Cca]},$$scope:{ctx:$}}}),lk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X3=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[wca]},$$scope:{ctx:$}}}),ik=new oe({}),dk=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),mk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q3=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Aca]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yca]},$$scope:{ctx:$}}}),gk=new oe({}),hk=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),pk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Lca]},$$scope:{ctx:$}}}),_k=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xca]},$$scope:{ctx:$}}}),bk=new oe({}),vk=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),Tk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[$ca]},$$scope:{ctx:$}}}),Mk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X5=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kca]},$$scope:{ctx:$}}}),Ek=new oe({}),Ck=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),Ak=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Sca]},$$scope:{ctx:$}}}),yk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new B({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Rca]},$$scope:{ctx:$}}}),Lk=new oe({}),xk=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),kk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Pca]},$$scope:{ctx:$}}}),Sk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Bca]},$$scope:{ctx:$}}}),Rk=new oe({}),Pk=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),Ik=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T0=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Ica]},$$scope:{ctx:$}}}),Nk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Nca]},$$scope:{ctx:$}}}),qk=new oe({}),jk=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),Gk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[qca]},$$scope:{ctx:$}}}),Ok=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jca]},$$scope:{ctx:$}}}),Vk=new oe({}),Xk=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L559"}}),Qk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Dca]},$$scope:{ctx:$}}}),Wk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Lw=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Gca]},$$scope:{ctx:$}}}),Uk=new oe({}),Hk=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L566"}}),Yk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$w=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Oca]},$$scope:{ctx:$}}}),Kk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Vca]},$$scope:{ctx:$}}}),eS=new oe({}),oS=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),tS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Xca]},$$scope:{ctx:$}}}),aS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[zca]},$$scope:{ctx:$}}}),nS=new oe({}),sS=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),iS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new B({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[Qca]},$$scope:{ctx:$}}}),dS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Gw=new B({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[Wca]},$$scope:{ctx:$}}}),cS=new oe({}),mS=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L550"}}),gS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Vw=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Uca]},$$scope:{ctx:$}}}),hS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mA=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Hca]},$$scope:{ctx:$}}}),uS=new oe({}),pS=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),bS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gA=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Jca]},$$scope:{ctx:$}}}),vS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BA=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Yca]},$$scope:{ctx:$}}}),FS=new oe({}),TS=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),ES=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NA=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Kca]},$$scope:{ctx:$}}}),CS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jA=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Zca]},$$scope:{ctx:$}}}),wS=new oe({}),AS=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L575"}}),LS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GA=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ema]},$$scope:{ctx:$}}}),xS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VA=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[oma]},$$scope:{ctx:$}}}),$S=new oe({}),kS=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),RS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zA=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[rma]},$$scope:{ctx:$}}}),PS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v6=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[tma]},$$scope:{ctx:$}}}),BS=new oe({}),IS=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),qS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T6=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[ama]},$$scope:{ctx:$}}}),jS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[nma]},$$scope:{ctx:$}}}),DS=new oe({}),GS=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),VS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P6=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[sma]},$$scope:{ctx:$}}}),XS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U6=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[lma]},$$scope:{ctx:$}}}),zS=new oe({}),QS=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),US=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J6=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[ima]},$$scope:{ctx:$}}}),HS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[dma]},$$scope:{ctx:$}}}),JS=new oe({}),YS=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),ZS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d7=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[cma]},$$scope:{ctx:$}}}),eR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[mma]},$$scope:{ctx:$}}}),oR=new oe({}),rR=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),aR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[fma]},$$scope:{ctx:$}}}),nR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R7=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[gma]},$$scope:{ctx:$}}}),sR=new oe({}),lR=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),dR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B7=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[hma]},$$scope:{ctx:$}}}),cR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q7=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[uma]},$$scope:{ctx:$}}}),mR=new oe({}),fR=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),hR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U7=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[pma]},$$scope:{ctx:$}}}),uR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ty=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[_ma]},$$scope:{ctx:$}}}),pR=new oe({}),_R=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),vR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ny=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[bma]},$$scope:{ctx:$}}}),FR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hy=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[vma]},$$scope:{ctx:$}}}),TR=new oe({}),MR=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),CR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),py=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Fma]},$$scope:{ctx:$}}}),wR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),by=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Tma]},$$scope:{ctx:$}}}),AR=new oe({}),yR=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),xR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Fy=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Mma]},$$scope:{ctx:$}}}),$R=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ey=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ema]},$$scope:{ctx:$}}}),SR=new oe({}),RR=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),BR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wy=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Cma]},$$scope:{ctx:$}}}),IR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yy=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[wma]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),yo=a("span"),ed=o("Auto Classes"),Ff=l(),ut=a("p"),od=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),rd=a("code"),t9=o("from_pretrained()"),Tf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),Ue=a("p"),td=o("Instantiating one of "),Zn=a("a"),a9=o("AutoConfig"),es=o(", "),os=a("a"),n9=o("AutoModel"),ad=o(`, and
`),rs=a("a"),s9=o("AutoTokenizer"),nd=o(" will directly create a class of the relevant architecture. For instance"),Mf=l(),F(Qa.$$.fragment),He=l(),Ae=a("p"),sB=o("will create a model that is an instance of "),sd=a("a"),lB=o("BertModel"),iB=o("."),Lo=l(),Wa=a("p"),dB=o("There is one class of "),Ef=a("code"),cB=o("AutoModel"),Jeo=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vJe=l(),ld=a("h2"),Cf=a("a"),gie=a("span"),F(l9.$$.fragment),Yeo=l(),hie=a("span"),Keo=o("Extending the Auto Classes"),FJe=l(),ts=a("p"),Zeo=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),uie=a("code"),eoo=o("NewModel"),ooo=o(", make sure you have a "),pie=a("code"),roo=o("NewModelConfig"),too=o(` then you can add those to the auto
classes like this:`),TJe=l(),F(i9.$$.fragment),MJe=l(),mB=a("p"),aoo=o("You will then be able to use the auto classes like you would usually do!"),EJe=l(),F(wf.$$.fragment),CJe=l(),id=a("h2"),Af=a("a"),_ie=a("span"),F(d9.$$.fragment),noo=l(),bie=a("span"),soo=o("AutoConfig"),wJe=l(),xo=a("div"),F(c9.$$.fragment),loo=l(),m9=a("p"),ioo=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fB=a("a"),doo=o("from_pretrained()"),coo=o(" class method."),moo=l(),f9=a("p"),foo=o("This class cannot be instantiated directly using "),vie=a("code"),goo=o("__init__()"),hoo=o(" (throws an error)."),uoo=l(),Pr=a("div"),F(g9.$$.fragment),poo=l(),Fie=a("p"),_oo=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),boo=l(),dd=a("p"),voo=o("The configuration class to instantiate is selected based on the "),Tie=a("code"),Foo=o("model_type"),Too=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Mie=a("code"),Moo=o("pretrained_model_name_or_path"),Eoo=o(":"),Coo=l(),A=a("ul"),yf=a("li"),Eie=a("strong"),woo=o("albert"),Aoo=o(" \u2014 "),gB=a("a"),yoo=o("AlbertConfig"),Loo=o(" (ALBERT model)"),xoo=l(),Lf=a("li"),Cie=a("strong"),$oo=o("bart"),koo=o(" \u2014 "),hB=a("a"),Soo=o("BartConfig"),Roo=o(" (BART model)"),Poo=l(),xf=a("li"),wie=a("strong"),Boo=o("beit"),Ioo=o(" \u2014 "),uB=a("a"),Noo=o("BeitConfig"),qoo=o(" (BEiT model)"),joo=l(),$f=a("li"),Aie=a("strong"),Doo=o("bert"),Goo=o(" \u2014 "),pB=a("a"),Ooo=o("BertConfig"),Voo=o(" (BERT model)"),Xoo=l(),kf=a("li"),yie=a("strong"),zoo=o("bert-generation"),Qoo=o(" \u2014 "),_B=a("a"),Woo=o("BertGenerationConfig"),Uoo=o(" (Bert Generation model)"),Hoo=l(),Sf=a("li"),Lie=a("strong"),Joo=o("big_bird"),Yoo=o(" \u2014 "),bB=a("a"),Koo=o("BigBirdConfig"),Zoo=o(" (BigBird model)"),ero=l(),Rf=a("li"),xie=a("strong"),oro=o("bigbird_pegasus"),rro=o(" \u2014 "),vB=a("a"),tro=o("BigBirdPegasusConfig"),aro=o(" (BigBird-Pegasus model)"),nro=l(),Pf=a("li"),$ie=a("strong"),sro=o("blenderbot"),lro=o(" \u2014 "),FB=a("a"),iro=o("BlenderbotConfig"),dro=o(" (Blenderbot model)"),cro=l(),Bf=a("li"),kie=a("strong"),mro=o("blenderbot-small"),fro=o(" \u2014 "),TB=a("a"),gro=o("BlenderbotSmallConfig"),hro=o(" (BlenderbotSmall model)"),uro=l(),If=a("li"),Sie=a("strong"),pro=o("bloom"),_ro=o(" \u2014 "),MB=a("a"),bro=o("BloomConfig"),vro=o(" (BLOOM model)"),Fro=l(),Nf=a("li"),Rie=a("strong"),Tro=o("camembert"),Mro=o(" \u2014 "),EB=a("a"),Ero=o("CamembertConfig"),Cro=o(" (CamemBERT model)"),wro=l(),qf=a("li"),Pie=a("strong"),Aro=o("canine"),yro=o(" \u2014 "),CB=a("a"),Lro=o("CanineConfig"),xro=o(" (CANINE model)"),$ro=l(),jf=a("li"),Bie=a("strong"),kro=o("clip"),Sro=o(" \u2014 "),wB=a("a"),Rro=o("CLIPConfig"),Pro=o(" (CLIP model)"),Bro=l(),Df=a("li"),Iie=a("strong"),Iro=o("codegen"),Nro=o(" \u2014 "),AB=a("a"),qro=o("CodeGenConfig"),jro=o(" (CodeGen model)"),Dro=l(),Gf=a("li"),Nie=a("strong"),Gro=o("convbert"),Oro=o(" \u2014 "),yB=a("a"),Vro=o("ConvBertConfig"),Xro=o(" (ConvBERT model)"),zro=l(),Of=a("li"),qie=a("strong"),Qro=o("convnext"),Wro=o(" \u2014 "),LB=a("a"),Uro=o("ConvNextConfig"),Hro=o(" (ConvNeXT model)"),Jro=l(),Vf=a("li"),jie=a("strong"),Yro=o("ctrl"),Kro=o(" \u2014 "),xB=a("a"),Zro=o("CTRLConfig"),eto=o(" (CTRL model)"),oto=l(),Xf=a("li"),Die=a("strong"),rto=o("cvt"),tto=o(" \u2014 "),$B=a("a"),ato=o("CvtConfig"),nto=o(" (CvT model)"),sto=l(),zf=a("li"),Gie=a("strong"),lto=o("data2vec-audio"),ito=o(" \u2014 "),kB=a("a"),dto=o("Data2VecAudioConfig"),cto=o(" (Data2VecAudio model)"),mto=l(),Qf=a("li"),Oie=a("strong"),fto=o("data2vec-text"),gto=o(" \u2014 "),SB=a("a"),hto=o("Data2VecTextConfig"),uto=o(" (Data2VecText model)"),pto=l(),Wf=a("li"),Vie=a("strong"),_to=o("data2vec-vision"),bto=o(" \u2014 "),RB=a("a"),vto=o("Data2VecVisionConfig"),Fto=o(" (Data2VecVision model)"),Tto=l(),Uf=a("li"),Xie=a("strong"),Mto=o("deberta"),Eto=o(" \u2014 "),PB=a("a"),Cto=o("DebertaConfig"),wto=o(" (DeBERTa model)"),Ato=l(),Hf=a("li"),zie=a("strong"),yto=o("deberta-v2"),Lto=o(" \u2014 "),BB=a("a"),xto=o("DebertaV2Config"),$to=o(" (DeBERTa-v2 model)"),kto=l(),Jf=a("li"),Qie=a("strong"),Sto=o("decision_transformer"),Rto=o(" \u2014 "),IB=a("a"),Pto=o("DecisionTransformerConfig"),Bto=o(" (Decision Transformer model)"),Ito=l(),Yf=a("li"),Wie=a("strong"),Nto=o("deit"),qto=o(" \u2014 "),NB=a("a"),jto=o("DeiTConfig"),Dto=o(" (DeiT model)"),Gto=l(),Kf=a("li"),Uie=a("strong"),Oto=o("detr"),Vto=o(" \u2014 "),qB=a("a"),Xto=o("DetrConfig"),zto=o(" (DETR model)"),Qto=l(),Zf=a("li"),Hie=a("strong"),Wto=o("distilbert"),Uto=o(" \u2014 "),jB=a("a"),Hto=o("DistilBertConfig"),Jto=o(" (DistilBERT model)"),Yto=l(),eg=a("li"),Jie=a("strong"),Kto=o("donut-swin"),Zto=o(" \u2014 "),DB=a("a"),eao=o("DonutSwinConfig"),oao=o(" (DonutSwin model)"),rao=l(),og=a("li"),Yie=a("strong"),tao=o("dpr"),aao=o(" \u2014 "),GB=a("a"),nao=o("DPRConfig"),sao=o(" (DPR model)"),lao=l(),rg=a("li"),Kie=a("strong"),iao=o("dpt"),dao=o(" \u2014 "),OB=a("a"),cao=o("DPTConfig"),mao=o(" (DPT model)"),fao=l(),tg=a("li"),Zie=a("strong"),gao=o("electra"),hao=o(" \u2014 "),VB=a("a"),uao=o("ElectraConfig"),pao=o(" (ELECTRA model)"),_ao=l(),ag=a("li"),ede=a("strong"),bao=o("encoder-decoder"),vao=o(" \u2014 "),XB=a("a"),Fao=o("EncoderDecoderConfig"),Tao=o(" (Encoder decoder model)"),Mao=l(),ng=a("li"),ode=a("strong"),Eao=o("flaubert"),Cao=o(" \u2014 "),zB=a("a"),wao=o("FlaubertConfig"),Aao=o(" (FlauBERT model)"),yao=l(),sg=a("li"),rde=a("strong"),Lao=o("flava"),xao=o(" \u2014 "),QB=a("a"),$ao=o("FlavaConfig"),kao=o(" (FLAVA model)"),Sao=l(),lg=a("li"),tde=a("strong"),Rao=o("fnet"),Pao=o(" \u2014 "),WB=a("a"),Bao=o("FNetConfig"),Iao=o(" (FNet model)"),Nao=l(),ig=a("li"),ade=a("strong"),qao=o("fsmt"),jao=o(" \u2014 "),UB=a("a"),Dao=o("FSMTConfig"),Gao=o(" (FairSeq Machine-Translation model)"),Oao=l(),dg=a("li"),nde=a("strong"),Vao=o("funnel"),Xao=o(" \u2014 "),HB=a("a"),zao=o("FunnelConfig"),Qao=o(" (Funnel Transformer model)"),Wao=l(),cg=a("li"),sde=a("strong"),Uao=o("glpn"),Hao=o(" \u2014 "),JB=a("a"),Jao=o("GLPNConfig"),Yao=o(" (GLPN model)"),Kao=l(),mg=a("li"),lde=a("strong"),Zao=o("gpt2"),eno=o(" \u2014 "),YB=a("a"),ono=o("GPT2Config"),rno=o(" (OpenAI GPT-2 model)"),tno=l(),fg=a("li"),ide=a("strong"),ano=o("gpt_neo"),nno=o(" \u2014 "),KB=a("a"),sno=o("GPTNeoConfig"),lno=o(" (GPT Neo model)"),ino=l(),gg=a("li"),dde=a("strong"),dno=o("gpt_neox"),cno=o(" \u2014 "),ZB=a("a"),mno=o("GPTNeoXConfig"),fno=o(" (GPT NeoX model)"),gno=l(),hg=a("li"),cde=a("strong"),hno=o("gptj"),uno=o(" \u2014 "),eI=a("a"),pno=o("GPTJConfig"),_no=o(" (GPT-J model)"),bno=l(),ug=a("li"),mde=a("strong"),vno=o("groupvit"),Fno=o(" \u2014 "),oI=a("a"),Tno=o("GroupViTConfig"),Mno=o(" (GroupViT model)"),Eno=l(),pg=a("li"),fde=a("strong"),Cno=o("hubert"),wno=o(" \u2014 "),rI=a("a"),Ano=o("HubertConfig"),yno=o(" (Hubert model)"),Lno=l(),_g=a("li"),gde=a("strong"),xno=o("ibert"),$no=o(" \u2014 "),tI=a("a"),kno=o("IBertConfig"),Sno=o(" (I-BERT model)"),Rno=l(),bg=a("li"),hde=a("strong"),Pno=o("imagegpt"),Bno=o(" \u2014 "),aI=a("a"),Ino=o("ImageGPTConfig"),Nno=o(" (ImageGPT model)"),qno=l(),vg=a("li"),ude=a("strong"),jno=o("layoutlm"),Dno=o(" \u2014 "),nI=a("a"),Gno=o("LayoutLMConfig"),Ono=o(" (LayoutLM model)"),Vno=l(),Fg=a("li"),pde=a("strong"),Xno=o("layoutlmv2"),zno=o(" \u2014 "),sI=a("a"),Qno=o("LayoutLMv2Config"),Wno=o(" (LayoutLMv2 model)"),Uno=l(),Tg=a("li"),_de=a("strong"),Hno=o("layoutlmv3"),Jno=o(" \u2014 "),lI=a("a"),Yno=o("LayoutLMv3Config"),Kno=o(" (LayoutLMv3 model)"),Zno=l(),Mg=a("li"),bde=a("strong"),eso=o("led"),oso=o(" \u2014 "),iI=a("a"),rso=o("LEDConfig"),tso=o(" (LED model)"),aso=l(),Eg=a("li"),vde=a("strong"),nso=o("levit"),sso=o(" \u2014 "),dI=a("a"),lso=o("LevitConfig"),iso=o(" (LeViT model)"),dso=l(),Cg=a("li"),Fde=a("strong"),cso=o("longformer"),mso=o(" \u2014 "),cI=a("a"),fso=o("LongformerConfig"),gso=o(" (Longformer model)"),hso=l(),wg=a("li"),Tde=a("strong"),uso=o("longt5"),pso=o(" \u2014 "),mI=a("a"),_so=o("LongT5Config"),bso=o(" (LongT5 model)"),vso=l(),Ag=a("li"),Mde=a("strong"),Fso=o("luke"),Tso=o(" \u2014 "),fI=a("a"),Mso=o("LukeConfig"),Eso=o(" (LUKE model)"),Cso=l(),yg=a("li"),Ede=a("strong"),wso=o("lxmert"),Aso=o(" \u2014 "),gI=a("a"),yso=o("LxmertConfig"),Lso=o(" (LXMERT model)"),xso=l(),Lg=a("li"),Cde=a("strong"),$so=o("m2m_100"),kso=o(" \u2014 "),hI=a("a"),Sso=o("M2M100Config"),Rso=o(" (M2M100 model)"),Pso=l(),xg=a("li"),wde=a("strong"),Bso=o("marian"),Iso=o(" \u2014 "),uI=a("a"),Nso=o("MarianConfig"),qso=o(" (Marian model)"),jso=l(),$g=a("li"),Ade=a("strong"),Dso=o("maskformer"),Gso=o(" \u2014 "),pI=a("a"),Oso=o("MaskFormerConfig"),Vso=o(" (MaskFormer model)"),Xso=l(),kg=a("li"),yde=a("strong"),zso=o("mbart"),Qso=o(" \u2014 "),_I=a("a"),Wso=o("MBartConfig"),Uso=o(" (mBART model)"),Hso=l(),Sg=a("li"),Lde=a("strong"),Jso=o("mctct"),Yso=o(" \u2014 "),bI=a("a"),Kso=o("MCTCTConfig"),Zso=o(" (M-CTC-T model)"),elo=l(),Rg=a("li"),xde=a("strong"),olo=o("megatron-bert"),rlo=o(" \u2014 "),vI=a("a"),tlo=o("MegatronBertConfig"),alo=o(" (Megatron-BERT model)"),nlo=l(),Pg=a("li"),$de=a("strong"),slo=o("mobilebert"),llo=o(" \u2014 "),FI=a("a"),ilo=o("MobileBertConfig"),dlo=o(" (MobileBERT model)"),clo=l(),Bg=a("li"),kde=a("strong"),mlo=o("mobilevit"),flo=o(" \u2014 "),TI=a("a"),glo=o("MobileViTConfig"),hlo=o(" (MobileViT model)"),ulo=l(),Ig=a("li"),Sde=a("strong"),plo=o("mpnet"),_lo=o(" \u2014 "),MI=a("a"),blo=o("MPNetConfig"),vlo=o(" (MPNet model)"),Flo=l(),Ng=a("li"),Rde=a("strong"),Tlo=o("mt5"),Mlo=o(" \u2014 "),EI=a("a"),Elo=o("MT5Config"),Clo=o(" (MT5 model)"),wlo=l(),qg=a("li"),Pde=a("strong"),Alo=o("mvp"),ylo=o(" \u2014 "),CI=a("a"),Llo=o("MvpConfig"),xlo=o(" (MVP model)"),$lo=l(),jg=a("li"),Bde=a("strong"),klo=o("nezha"),Slo=o(" \u2014 "),wI=a("a"),Rlo=o("NezhaConfig"),Plo=o(" (Nezha model)"),Blo=l(),Dg=a("li"),Ide=a("strong"),Ilo=o("nystromformer"),Nlo=o(" \u2014 "),AI=a("a"),qlo=o("NystromformerConfig"),jlo=o(" (Nystr\xF6mformer model)"),Dlo=l(),Gg=a("li"),Nde=a("strong"),Glo=o("openai-gpt"),Olo=o(" \u2014 "),yI=a("a"),Vlo=o("OpenAIGPTConfig"),Xlo=o(" (OpenAI GPT model)"),zlo=l(),Og=a("li"),qde=a("strong"),Qlo=o("opt"),Wlo=o(" \u2014 "),LI=a("a"),Ulo=o("OPTConfig"),Hlo=o(" (OPT model)"),Jlo=l(),Vg=a("li"),jde=a("strong"),Ylo=o("owlvit"),Klo=o(" \u2014 "),xI=a("a"),Zlo=o("OwlViTConfig"),eio=o(" (OWL-ViT model)"),oio=l(),Xg=a("li"),Dde=a("strong"),rio=o("pegasus"),tio=o(" \u2014 "),$I=a("a"),aio=o("PegasusConfig"),nio=o(" (Pegasus model)"),sio=l(),zg=a("li"),Gde=a("strong"),lio=o("pegasus_x"),iio=o(" \u2014 "),kI=a("a"),dio=o("PegasusXConfig"),cio=o(" (PEGASUS-X model)"),mio=l(),Qg=a("li"),Ode=a("strong"),fio=o("perceiver"),gio=o(" \u2014 "),SI=a("a"),hio=o("PerceiverConfig"),uio=o(" (Perceiver model)"),pio=l(),Wg=a("li"),Vde=a("strong"),_io=o("plbart"),bio=o(" \u2014 "),RI=a("a"),vio=o("PLBartConfig"),Fio=o(" (PLBart model)"),Tio=l(),Ug=a("li"),Xde=a("strong"),Mio=o("poolformer"),Eio=o(" \u2014 "),PI=a("a"),Cio=o("PoolFormerConfig"),wio=o(" (PoolFormer model)"),Aio=l(),Hg=a("li"),zde=a("strong"),yio=o("prophetnet"),Lio=o(" \u2014 "),BI=a("a"),xio=o("ProphetNetConfig"),$io=o(" (ProphetNet model)"),kio=l(),Jg=a("li"),Qde=a("strong"),Sio=o("qdqbert"),Rio=o(" \u2014 "),II=a("a"),Pio=o("QDQBertConfig"),Bio=o(" (QDQBert model)"),Iio=l(),Yg=a("li"),Wde=a("strong"),Nio=o("rag"),qio=o(" \u2014 "),NI=a("a"),jio=o("RagConfig"),Dio=o(" (RAG model)"),Gio=l(),Kg=a("li"),Ude=a("strong"),Oio=o("realm"),Vio=o(" \u2014 "),qI=a("a"),Xio=o("RealmConfig"),zio=o(" (REALM model)"),Qio=l(),Zg=a("li"),Hde=a("strong"),Wio=o("reformer"),Uio=o(" \u2014 "),jI=a("a"),Hio=o("ReformerConfig"),Jio=o(" (Reformer model)"),Yio=l(),eh=a("li"),Jde=a("strong"),Kio=o("regnet"),Zio=o(" \u2014 "),DI=a("a"),edo=o("RegNetConfig"),odo=o(" (RegNet model)"),rdo=l(),oh=a("li"),Yde=a("strong"),tdo=o("rembert"),ado=o(" \u2014 "),GI=a("a"),ndo=o("RemBertConfig"),sdo=o(" (RemBERT model)"),ldo=l(),rh=a("li"),Kde=a("strong"),ido=o("resnet"),ddo=o(" \u2014 "),OI=a("a"),cdo=o("ResNetConfig"),mdo=o(" (ResNet model)"),fdo=l(),th=a("li"),Zde=a("strong"),gdo=o("retribert"),hdo=o(" \u2014 "),VI=a("a"),udo=o("RetriBertConfig"),pdo=o(" (RetriBERT model)"),_do=l(),ah=a("li"),ece=a("strong"),bdo=o("roberta"),vdo=o(" \u2014 "),XI=a("a"),Fdo=o("RobertaConfig"),Tdo=o(" (RoBERTa model)"),Mdo=l(),nh=a("li"),oce=a("strong"),Edo=o("roformer"),Cdo=o(" \u2014 "),zI=a("a"),wdo=o("RoFormerConfig"),Ado=o(" (RoFormer model)"),ydo=l(),sh=a("li"),rce=a("strong"),Ldo=o("segformer"),xdo=o(" \u2014 "),QI=a("a"),$do=o("SegformerConfig"),kdo=o(" (SegFormer model)"),Sdo=l(),lh=a("li"),tce=a("strong"),Rdo=o("sew"),Pdo=o(" \u2014 "),WI=a("a"),Bdo=o("SEWConfig"),Ido=o(" (SEW model)"),Ndo=l(),ih=a("li"),ace=a("strong"),qdo=o("sew-d"),jdo=o(" \u2014 "),UI=a("a"),Ddo=o("SEWDConfig"),Gdo=o(" (SEW-D model)"),Odo=l(),dh=a("li"),nce=a("strong"),Vdo=o("speech-encoder-decoder"),Xdo=o(" \u2014 "),HI=a("a"),zdo=o("SpeechEncoderDecoderConfig"),Qdo=o(" (Speech Encoder decoder model)"),Wdo=l(),ch=a("li"),sce=a("strong"),Udo=o("speech_to_text"),Hdo=o(" \u2014 "),JI=a("a"),Jdo=o("Speech2TextConfig"),Ydo=o(" (Speech2Text model)"),Kdo=l(),mh=a("li"),lce=a("strong"),Zdo=o("speech_to_text_2"),eco=o(" \u2014 "),YI=a("a"),oco=o("Speech2Text2Config"),rco=o(" (Speech2Text2 model)"),tco=l(),fh=a("li"),ice=a("strong"),aco=o("splinter"),nco=o(" \u2014 "),KI=a("a"),sco=o("SplinterConfig"),lco=o(" (Splinter model)"),ico=l(),gh=a("li"),dce=a("strong"),dco=o("squeezebert"),cco=o(" \u2014 "),ZI=a("a"),mco=o("SqueezeBertConfig"),fco=o(" (SqueezeBERT model)"),gco=l(),hh=a("li"),cce=a("strong"),hco=o("swin"),uco=o(" \u2014 "),eN=a("a"),pco=o("SwinConfig"),_co=o(" (Swin Transformer model)"),bco=l(),uh=a("li"),mce=a("strong"),vco=o("swinv2"),Fco=o(" \u2014 "),oN=a("a"),Tco=o("Swinv2Config"),Mco=o(" (Swin Transformer V2 model)"),Eco=l(),ph=a("li"),fce=a("strong"),Cco=o("t5"),wco=o(" \u2014 "),rN=a("a"),Aco=o("T5Config"),yco=o(" (T5 model)"),Lco=l(),_h=a("li"),gce=a("strong"),xco=o("tapas"),$co=o(" \u2014 "),tN=a("a"),kco=o("TapasConfig"),Sco=o(" (TAPAS model)"),Rco=l(),bh=a("li"),hce=a("strong"),Pco=o("trajectory_transformer"),Bco=o(" \u2014 "),aN=a("a"),Ico=o("TrajectoryTransformerConfig"),Nco=o(" (Trajectory Transformer model)"),qco=l(),vh=a("li"),uce=a("strong"),jco=o("transfo-xl"),Dco=o(" \u2014 "),nN=a("a"),Gco=o("TransfoXLConfig"),Oco=o(" (Transformer-XL model)"),Vco=l(),Fh=a("li"),pce=a("strong"),Xco=o("trocr"),zco=o(" \u2014 "),sN=a("a"),Qco=o("TrOCRConfig"),Wco=o(" (TrOCR model)"),Uco=l(),Th=a("li"),_ce=a("strong"),Hco=o("unispeech"),Jco=o(" \u2014 "),lN=a("a"),Yco=o("UniSpeechConfig"),Kco=o(" (UniSpeech model)"),Zco=l(),Mh=a("li"),bce=a("strong"),emo=o("unispeech-sat"),omo=o(" \u2014 "),iN=a("a"),rmo=o("UniSpeechSatConfig"),tmo=o(" (UniSpeechSat model)"),amo=l(),Eh=a("li"),vce=a("strong"),nmo=o("van"),smo=o(" \u2014 "),dN=a("a"),lmo=o("VanConfig"),imo=o(" (VAN model)"),dmo=l(),Ch=a("li"),Fce=a("strong"),cmo=o("videomae"),mmo=o(" \u2014 "),cN=a("a"),fmo=o("VideoMAEConfig"),gmo=o(" (VideoMAE model)"),hmo=l(),wh=a("li"),Tce=a("strong"),umo=o("vilt"),pmo=o(" \u2014 "),mN=a("a"),_mo=o("ViltConfig"),bmo=o(" (ViLT model)"),vmo=l(),Ah=a("li"),Mce=a("strong"),Fmo=o("vision-encoder-decoder"),Tmo=o(" \u2014 "),fN=a("a"),Mmo=o("VisionEncoderDecoderConfig"),Emo=o(" (Vision Encoder decoder model)"),Cmo=l(),yh=a("li"),Ece=a("strong"),wmo=o("vision-text-dual-encoder"),Amo=o(" \u2014 "),gN=a("a"),ymo=o("VisionTextDualEncoderConfig"),Lmo=o(" (VisionTextDualEncoder model)"),xmo=l(),Lh=a("li"),Cce=a("strong"),$mo=o("visual_bert"),kmo=o(" \u2014 "),hN=a("a"),Smo=o("VisualBertConfig"),Rmo=o(" (VisualBERT model)"),Pmo=l(),xh=a("li"),wce=a("strong"),Bmo=o("vit"),Imo=o(" \u2014 "),uN=a("a"),Nmo=o("ViTConfig"),qmo=o(" (ViT model)"),jmo=l(),$h=a("li"),Ace=a("strong"),Dmo=o("vit_mae"),Gmo=o(" \u2014 "),pN=a("a"),Omo=o("ViTMAEConfig"),Vmo=o(" (ViTMAE model)"),Xmo=l(),kh=a("li"),yce=a("strong"),zmo=o("wav2vec2"),Qmo=o(" \u2014 "),_N=a("a"),Wmo=o("Wav2Vec2Config"),Umo=o(" (Wav2Vec2 model)"),Hmo=l(),Sh=a("li"),Lce=a("strong"),Jmo=o("wav2vec2-conformer"),Ymo=o(" \u2014 "),bN=a("a"),Kmo=o("Wav2Vec2ConformerConfig"),Zmo=o(" (Wav2Vec2-Conformer model)"),efo=l(),Rh=a("li"),xce=a("strong"),ofo=o("wavlm"),rfo=o(" \u2014 "),vN=a("a"),tfo=o("WavLMConfig"),afo=o(" (WavLM model)"),nfo=l(),Ph=a("li"),$ce=a("strong"),sfo=o("xglm"),lfo=o(" \u2014 "),FN=a("a"),ifo=o("XGLMConfig"),dfo=o(" (XGLM model)"),cfo=l(),Bh=a("li"),kce=a("strong"),mfo=o("xlm"),ffo=o(" \u2014 "),TN=a("a"),gfo=o("XLMConfig"),hfo=o(" (XLM model)"),ufo=l(),Ih=a("li"),Sce=a("strong"),pfo=o("xlm-prophetnet"),_fo=o(" \u2014 "),MN=a("a"),bfo=o("XLMProphetNetConfig"),vfo=o(" (XLM-ProphetNet model)"),Ffo=l(),Nh=a("li"),Rce=a("strong"),Tfo=o("xlm-roberta"),Mfo=o(" \u2014 "),EN=a("a"),Efo=o("XLMRobertaConfig"),Cfo=o(" (XLM-RoBERTa model)"),wfo=l(),qh=a("li"),Pce=a("strong"),Afo=o("xlm-roberta-xl"),yfo=o(" \u2014 "),CN=a("a"),Lfo=o("XLMRobertaXLConfig"),xfo=o(" (XLM-RoBERTa-XL model)"),$fo=l(),jh=a("li"),Bce=a("strong"),kfo=o("xlnet"),Sfo=o(" \u2014 "),wN=a("a"),Rfo=o("XLNetConfig"),Pfo=o(" (XLNet model)"),Bfo=l(),Dh=a("li"),Ice=a("strong"),Ifo=o("yolos"),Nfo=o(" \u2014 "),AN=a("a"),qfo=o("YolosConfig"),jfo=o(" (YOLOS model)"),Dfo=l(),Gh=a("li"),Nce=a("strong"),Gfo=o("yoso"),Ofo=o(" \u2014 "),yN=a("a"),Vfo=o("YosoConfig"),Xfo=o(" (YOSO model)"),zfo=l(),F(Oh.$$.fragment),Qfo=l(),Vh=a("div"),F(h9.$$.fragment),Wfo=l(),qce=a("p"),Ufo=o("Register a new configuration for this class."),AJe=l(),cd=a("h2"),Xh=a("a"),jce=a("span"),F(u9.$$.fragment),Hfo=l(),Dce=a("span"),Jfo=o("AutoTokenizer"),yJe=l(),$o=a("div"),F(p9.$$.fragment),Yfo=l(),_9=a("p"),Kfo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LN=a("a"),Zfo=o("AutoTokenizer.from_pretrained()"),ego=o(" class method."),ogo=l(),b9=a("p"),rgo=o("This class cannot be instantiated directly using "),Gce=a("code"),tgo=o("__init__()"),ago=o(" (throws an error)."),ngo=l(),Br=a("div"),F(v9.$$.fragment),sgo=l(),Oce=a("p"),lgo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),igo=l(),Ua=a("p"),dgo=o("The tokenizer class to instantiate is selected based on the "),Vce=a("code"),cgo=o("model_type"),mgo=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),fgo=o("pretrained_model_name_or_path"),ggo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=a("code"),hgo=o("pretrained_model_name_or_path"),ugo=o(":"),pgo=l(),k=a("ul"),as=a("li"),Qce=a("strong"),_go=o("albert"),bgo=o(" \u2014 "),xN=a("a"),vgo=o("AlbertTokenizer"),Fgo=o(" or "),$N=a("a"),Tgo=o("AlbertTokenizerFast"),Mgo=o(" (ALBERT model)"),Ego=l(),ns=a("li"),Wce=a("strong"),Cgo=o("bart"),wgo=o(" \u2014 "),kN=a("a"),Ago=o("BartTokenizer"),ygo=o(" or "),SN=a("a"),Lgo=o("BartTokenizerFast"),xgo=o(" (BART model)"),$go=l(),ss=a("li"),Uce=a("strong"),kgo=o("barthez"),Sgo=o(" \u2014 "),RN=a("a"),Rgo=o("BarthezTokenizer"),Pgo=o(" or "),PN=a("a"),Bgo=o("BarthezTokenizerFast"),Igo=o(" (BARThez model)"),Ngo=l(),zh=a("li"),Hce=a("strong"),qgo=o("bartpho"),jgo=o(" \u2014 "),BN=a("a"),Dgo=o("BartphoTokenizer"),Ggo=o(" (BARTpho model)"),Ogo=l(),ls=a("li"),Jce=a("strong"),Vgo=o("bert"),Xgo=o(" \u2014 "),IN=a("a"),zgo=o("BertTokenizer"),Qgo=o(" or "),NN=a("a"),Wgo=o("BertTokenizerFast"),Ugo=o(" (BERT model)"),Hgo=l(),Qh=a("li"),Yce=a("strong"),Jgo=o("bert-generation"),Ygo=o(" \u2014 "),qN=a("a"),Kgo=o("BertGenerationTokenizer"),Zgo=o(" (Bert Generation model)"),eho=l(),Wh=a("li"),Kce=a("strong"),oho=o("bert-japanese"),rho=o(" \u2014 "),jN=a("a"),tho=o("BertJapaneseTokenizer"),aho=o(" (BertJapanese model)"),nho=l(),Uh=a("li"),Zce=a("strong"),sho=o("bertweet"),lho=o(" \u2014 "),DN=a("a"),iho=o("BertweetTokenizer"),dho=o(" (BERTweet model)"),cho=l(),is=a("li"),eme=a("strong"),mho=o("big_bird"),fho=o(" \u2014 "),GN=a("a"),gho=o("BigBirdTokenizer"),hho=o(" or "),ON=a("a"),uho=o("BigBirdTokenizerFast"),pho=o(" (BigBird model)"),_ho=l(),ds=a("li"),ome=a("strong"),bho=o("bigbird_pegasus"),vho=o(" \u2014 "),VN=a("a"),Fho=o("PegasusTokenizer"),Tho=o(" or "),XN=a("a"),Mho=o("PegasusTokenizerFast"),Eho=o(" (BigBird-Pegasus model)"),Cho=l(),cs=a("li"),rme=a("strong"),who=o("blenderbot"),Aho=o(" \u2014 "),zN=a("a"),yho=o("BlenderbotTokenizer"),Lho=o(" or "),QN=a("a"),xho=o("BlenderbotTokenizerFast"),$ho=o(" (Blenderbot model)"),kho=l(),Hh=a("li"),tme=a("strong"),Sho=o("blenderbot-small"),Rho=o(" \u2014 "),WN=a("a"),Pho=o("BlenderbotSmallTokenizer"),Bho=o(" (BlenderbotSmall model)"),Iho=l(),Jh=a("li"),ame=a("strong"),Nho=o("bloom"),qho=o(" \u2014 "),UN=a("a"),jho=o("BloomTokenizerFast"),Dho=o(" (BLOOM model)"),Gho=l(),Yh=a("li"),nme=a("strong"),Oho=o("byt5"),Vho=o(" \u2014 "),HN=a("a"),Xho=o("ByT5Tokenizer"),zho=o(" (ByT5 model)"),Qho=l(),ms=a("li"),sme=a("strong"),Who=o("camembert"),Uho=o(" \u2014 "),JN=a("a"),Hho=o("CamembertTokenizer"),Jho=o(" or "),YN=a("a"),Yho=o("CamembertTokenizerFast"),Kho=o(" (CamemBERT model)"),Zho=l(),Kh=a("li"),lme=a("strong"),euo=o("canine"),ouo=o(" \u2014 "),KN=a("a"),ruo=o("CanineTokenizer"),tuo=o(" (CANINE model)"),auo=l(),fs=a("li"),ime=a("strong"),nuo=o("clip"),suo=o(" \u2014 "),ZN=a("a"),luo=o("CLIPTokenizer"),iuo=o(" or "),eq=a("a"),duo=o("CLIPTokenizerFast"),cuo=o(" (CLIP model)"),muo=l(),gs=a("li"),dme=a("strong"),fuo=o("codegen"),guo=o(" \u2014 "),oq=a("a"),huo=o("CodeGenTokenizer"),uuo=o(" or "),rq=a("a"),puo=o("CodeGenTokenizerFast"),_uo=o(" (CodeGen model)"),buo=l(),hs=a("li"),cme=a("strong"),vuo=o("convbert"),Fuo=o(" \u2014 "),tq=a("a"),Tuo=o("ConvBertTokenizer"),Muo=o(" or "),aq=a("a"),Euo=o("ConvBertTokenizerFast"),Cuo=o(" (ConvBERT model)"),wuo=l(),us=a("li"),mme=a("strong"),Auo=o("cpm"),yuo=o(" \u2014 "),nq=a("a"),Luo=o("CpmTokenizer"),xuo=o(" or "),sq=a("a"),$uo=o("CpmTokenizerFast"),kuo=o(" (CPM model)"),Suo=l(),Zh=a("li"),fme=a("strong"),Ruo=o("ctrl"),Puo=o(" \u2014 "),lq=a("a"),Buo=o("CTRLTokenizer"),Iuo=o(" (CTRL model)"),Nuo=l(),ps=a("li"),gme=a("strong"),quo=o("data2vec-text"),juo=o(" \u2014 "),iq=a("a"),Duo=o("RobertaTokenizer"),Guo=o(" or "),dq=a("a"),Ouo=o("RobertaTokenizerFast"),Vuo=o(" (Data2VecText model)"),Xuo=l(),_s=a("li"),hme=a("strong"),zuo=o("deberta"),Quo=o(" \u2014 "),cq=a("a"),Wuo=o("DebertaTokenizer"),Uuo=o(" or "),mq=a("a"),Huo=o("DebertaTokenizerFast"),Juo=o(" (DeBERTa model)"),Yuo=l(),bs=a("li"),ume=a("strong"),Kuo=o("deberta-v2"),Zuo=o(" \u2014 "),fq=a("a"),epo=o("DebertaV2Tokenizer"),opo=o(" or "),gq=a("a"),rpo=o("DebertaV2TokenizerFast"),tpo=o(" (DeBERTa-v2 model)"),apo=l(),vs=a("li"),pme=a("strong"),npo=o("distilbert"),spo=o(" \u2014 "),hq=a("a"),lpo=o("DistilBertTokenizer"),ipo=o(" or "),uq=a("a"),dpo=o("DistilBertTokenizerFast"),cpo=o(" (DistilBERT model)"),mpo=l(),Fs=a("li"),_me=a("strong"),fpo=o("dpr"),gpo=o(" \u2014 "),pq=a("a"),hpo=o("DPRQuestionEncoderTokenizer"),upo=o(" or "),_q=a("a"),ppo=o("DPRQuestionEncoderTokenizerFast"),_po=o(" (DPR model)"),bpo=l(),Ts=a("li"),bme=a("strong"),vpo=o("electra"),Fpo=o(" \u2014 "),bq=a("a"),Tpo=o("ElectraTokenizer"),Mpo=o(" or "),vq=a("a"),Epo=o("ElectraTokenizerFast"),Cpo=o(" (ELECTRA model)"),wpo=l(),eu=a("li"),vme=a("strong"),Apo=o("flaubert"),ypo=o(" \u2014 "),Fq=a("a"),Lpo=o("FlaubertTokenizer"),xpo=o(" (FlauBERT model)"),$po=l(),Ms=a("li"),Fme=a("strong"),kpo=o("fnet"),Spo=o(" \u2014 "),Tq=a("a"),Rpo=o("FNetTokenizer"),Ppo=o(" or "),Mq=a("a"),Bpo=o("FNetTokenizerFast"),Ipo=o(" (FNet model)"),Npo=l(),ou=a("li"),Tme=a("strong"),qpo=o("fsmt"),jpo=o(" \u2014 "),Eq=a("a"),Dpo=o("FSMTTokenizer"),Gpo=o(" (FairSeq Machine-Translation model)"),Opo=l(),Es=a("li"),Mme=a("strong"),Vpo=o("funnel"),Xpo=o(" \u2014 "),Cq=a("a"),zpo=o("FunnelTokenizer"),Qpo=o(" or "),wq=a("a"),Wpo=o("FunnelTokenizerFast"),Upo=o(" (Funnel Transformer model)"),Hpo=l(),Cs=a("li"),Eme=a("strong"),Jpo=o("gpt2"),Ypo=o(" \u2014 "),Aq=a("a"),Kpo=o("GPT2Tokenizer"),Zpo=o(" or "),yq=a("a"),e_o=o("GPT2TokenizerFast"),o_o=o(" (OpenAI GPT-2 model)"),r_o=l(),ws=a("li"),Cme=a("strong"),t_o=o("gpt_neo"),a_o=o(" \u2014 "),Lq=a("a"),n_o=o("GPT2Tokenizer"),s_o=o(" or "),xq=a("a"),l_o=o("GPT2TokenizerFast"),i_o=o(" (GPT Neo model)"),d_o=l(),ru=a("li"),wme=a("strong"),c_o=o("gpt_neox"),m_o=o(" \u2014 "),$q=a("a"),f_o=o("GPTNeoXTokenizerFast"),g_o=o(" (GPT NeoX model)"),h_o=l(),As=a("li"),Ame=a("strong"),u_o=o("gptj"),p_o=o(" \u2014 "),kq=a("a"),__o=o("GPT2Tokenizer"),b_o=o(" or "),Sq=a("a"),v_o=o("GPT2TokenizerFast"),F_o=o(" (GPT-J model)"),T_o=l(),ys=a("li"),yme=a("strong"),M_o=o("groupvit"),E_o=o(" \u2014 "),Rq=a("a"),C_o=o("CLIPTokenizer"),w_o=o(" or "),Pq=a("a"),A_o=o("CLIPTokenizerFast"),y_o=o(" (GroupViT model)"),L_o=l(),Ls=a("li"),Lme=a("strong"),x_o=o("herbert"),$_o=o(" \u2014 "),Bq=a("a"),k_o=o("HerbertTokenizer"),S_o=o(" or "),Iq=a("a"),R_o=o("HerbertTokenizerFast"),P_o=o(" (HerBERT model)"),B_o=l(),tu=a("li"),xme=a("strong"),I_o=o("hubert"),N_o=o(" \u2014 "),Nq=a("a"),q_o=o("Wav2Vec2CTCTokenizer"),j_o=o(" (Hubert model)"),D_o=l(),xs=a("li"),$me=a("strong"),G_o=o("ibert"),O_o=o(" \u2014 "),qq=a("a"),V_o=o("RobertaTokenizer"),X_o=o(" or "),jq=a("a"),z_o=o("RobertaTokenizerFast"),Q_o=o(" (I-BERT model)"),W_o=l(),$s=a("li"),kme=a("strong"),U_o=o("layoutlm"),H_o=o(" \u2014 "),Dq=a("a"),J_o=o("LayoutLMTokenizer"),Y_o=o(" or "),Gq=a("a"),K_o=o("LayoutLMTokenizerFast"),Z_o=o(" (LayoutLM model)"),ebo=l(),ks=a("li"),Sme=a("strong"),obo=o("layoutlmv2"),rbo=o(" \u2014 "),Oq=a("a"),tbo=o("LayoutLMv2Tokenizer"),abo=o(" or "),Vq=a("a"),nbo=o("LayoutLMv2TokenizerFast"),sbo=o(" (LayoutLMv2 model)"),lbo=l(),Ss=a("li"),Rme=a("strong"),ibo=o("layoutlmv3"),dbo=o(" \u2014 "),Xq=a("a"),cbo=o("LayoutLMv3Tokenizer"),mbo=o(" or "),zq=a("a"),fbo=o("LayoutLMv3TokenizerFast"),gbo=o(" (LayoutLMv3 model)"),hbo=l(),Rs=a("li"),Pme=a("strong"),ubo=o("layoutxlm"),pbo=o(" \u2014 "),Qq=a("a"),_bo=o("LayoutXLMTokenizer"),bbo=o(" or "),Wq=a("a"),vbo=o("LayoutXLMTokenizerFast"),Fbo=o(" (LayoutXLM model)"),Tbo=l(),Ps=a("li"),Bme=a("strong"),Mbo=o("led"),Ebo=o(" \u2014 "),Uq=a("a"),Cbo=o("LEDTokenizer"),wbo=o(" or "),Hq=a("a"),Abo=o("LEDTokenizerFast"),ybo=o(" (LED model)"),Lbo=l(),Bs=a("li"),Ime=a("strong"),xbo=o("longformer"),$bo=o(" \u2014 "),Jq=a("a"),kbo=o("LongformerTokenizer"),Sbo=o(" or "),Yq=a("a"),Rbo=o("LongformerTokenizerFast"),Pbo=o(" (Longformer model)"),Bbo=l(),Is=a("li"),Nme=a("strong"),Ibo=o("longt5"),Nbo=o(" \u2014 "),Kq=a("a"),qbo=o("T5Tokenizer"),jbo=o(" or "),Zq=a("a"),Dbo=o("T5TokenizerFast"),Gbo=o(" (LongT5 model)"),Obo=l(),au=a("li"),qme=a("strong"),Vbo=o("luke"),Xbo=o(" \u2014 "),ej=a("a"),zbo=o("LukeTokenizer"),Qbo=o(" (LUKE model)"),Wbo=l(),Ns=a("li"),jme=a("strong"),Ubo=o("lxmert"),Hbo=o(" \u2014 "),oj=a("a"),Jbo=o("LxmertTokenizer"),Ybo=o(" or "),rj=a("a"),Kbo=o("LxmertTokenizerFast"),Zbo=o(" (LXMERT model)"),e2o=l(),nu=a("li"),Dme=a("strong"),o2o=o("m2m_100"),r2o=o(" \u2014 "),tj=a("a"),t2o=o("M2M100Tokenizer"),a2o=o(" (M2M100 model)"),n2o=l(),su=a("li"),Gme=a("strong"),s2o=o("marian"),l2o=o(" \u2014 "),aj=a("a"),i2o=o("MarianTokenizer"),d2o=o(" (Marian model)"),c2o=l(),qs=a("li"),Ome=a("strong"),m2o=o("mbart"),f2o=o(" \u2014 "),nj=a("a"),g2o=o("MBartTokenizer"),h2o=o(" or "),sj=a("a"),u2o=o("MBartTokenizerFast"),p2o=o(" (mBART model)"),_2o=l(),js=a("li"),Vme=a("strong"),b2o=o("mbart50"),v2o=o(" \u2014 "),lj=a("a"),F2o=o("MBart50Tokenizer"),T2o=o(" or "),ij=a("a"),M2o=o("MBart50TokenizerFast"),E2o=o(" (mBART-50 model)"),C2o=l(),Ds=a("li"),Xme=a("strong"),w2o=o("megatron-bert"),A2o=o(" \u2014 "),dj=a("a"),y2o=o("BertTokenizer"),L2o=o(" or "),cj=a("a"),x2o=o("BertTokenizerFast"),$2o=o(" (Megatron-BERT model)"),k2o=l(),lu=a("li"),zme=a("strong"),S2o=o("mluke"),R2o=o(" \u2014 "),mj=a("a"),P2o=o("MLukeTokenizer"),B2o=o(" (mLUKE model)"),I2o=l(),Gs=a("li"),Qme=a("strong"),N2o=o("mobilebert"),q2o=o(" \u2014 "),fj=a("a"),j2o=o("MobileBertTokenizer"),D2o=o(" or "),gj=a("a"),G2o=o("MobileBertTokenizerFast"),O2o=o(" (MobileBERT model)"),V2o=l(),Os=a("li"),Wme=a("strong"),X2o=o("mpnet"),z2o=o(" \u2014 "),hj=a("a"),Q2o=o("MPNetTokenizer"),W2o=o(" or "),uj=a("a"),U2o=o("MPNetTokenizerFast"),H2o=o(" (MPNet model)"),J2o=l(),Vs=a("li"),Ume=a("strong"),Y2o=o("mt5"),K2o=o(" \u2014 "),pj=a("a"),Z2o=o("MT5Tokenizer"),evo=o(" or "),_j=a("a"),ovo=o("MT5TokenizerFast"),rvo=o(" (MT5 model)"),tvo=l(),Xs=a("li"),Hme=a("strong"),avo=o("mvp"),nvo=o(" \u2014 "),bj=a("a"),svo=o("MvpTokenizer"),lvo=o(" or "),vj=a("a"),ivo=o("MvpTokenizerFast"),dvo=o(" (MVP model)"),cvo=l(),zs=a("li"),Jme=a("strong"),mvo=o("nezha"),fvo=o(" \u2014 "),Fj=a("a"),gvo=o("BertTokenizer"),hvo=o(" or "),Tj=a("a"),uvo=o("BertTokenizerFast"),pvo=o(" (Nezha model)"),_vo=l(),Qs=a("li"),Yme=a("strong"),bvo=o("nllb"),vvo=o(" \u2014 "),Mj=a("a"),Fvo=o("NllbTokenizer"),Tvo=o(" or "),Ej=a("a"),Mvo=o("NllbTokenizerFast"),Evo=o(" (NLLB model)"),Cvo=l(),Ws=a("li"),Kme=a("strong"),wvo=o("nystromformer"),Avo=o(" \u2014 "),Cj=a("a"),yvo=o("AlbertTokenizer"),Lvo=o(" or "),wj=a("a"),xvo=o("AlbertTokenizerFast"),$vo=o(" (Nystr\xF6mformer model)"),kvo=l(),Us=a("li"),Zme=a("strong"),Svo=o("openai-gpt"),Rvo=o(" \u2014 "),Aj=a("a"),Pvo=o("OpenAIGPTTokenizer"),Bvo=o(" or "),yj=a("a"),Ivo=o("OpenAIGPTTokenizerFast"),Nvo=o(" (OpenAI GPT model)"),qvo=l(),iu=a("li"),efe=a("strong"),jvo=o("opt"),Dvo=o(" \u2014 "),Lj=a("a"),Gvo=o("GPT2Tokenizer"),Ovo=o(" (OPT model)"),Vvo=l(),Hs=a("li"),ofe=a("strong"),Xvo=o("owlvit"),zvo=o(" \u2014 "),xj=a("a"),Qvo=o("CLIPTokenizer"),Wvo=o(" or "),$j=a("a"),Uvo=o("CLIPTokenizerFast"),Hvo=o(" (OWL-ViT model)"),Jvo=l(),Js=a("li"),rfe=a("strong"),Yvo=o("pegasus"),Kvo=o(" \u2014 "),kj=a("a"),Zvo=o("PegasusTokenizer"),e1o=o(" or "),Sj=a("a"),o1o=o("PegasusTokenizerFast"),r1o=o(" (Pegasus model)"),t1o=l(),du=a("li"),tfe=a("strong"),a1o=o("perceiver"),n1o=o(" \u2014 "),Rj=a("a"),s1o=o("PerceiverTokenizer"),l1o=o(" (Perceiver model)"),i1o=l(),cu=a("li"),afe=a("strong"),d1o=o("phobert"),c1o=o(" \u2014 "),Pj=a("a"),m1o=o("PhobertTokenizer"),f1o=o(" (PhoBERT model)"),g1o=l(),mu=a("li"),nfe=a("strong"),h1o=o("plbart"),u1o=o(" \u2014 "),Bj=a("a"),p1o=o("PLBartTokenizer"),_1o=o(" (PLBart model)"),b1o=l(),fu=a("li"),sfe=a("strong"),v1o=o("prophetnet"),F1o=o(" \u2014 "),Ij=a("a"),T1o=o("ProphetNetTokenizer"),M1o=o(" (ProphetNet model)"),E1o=l(),Ys=a("li"),lfe=a("strong"),C1o=o("qdqbert"),w1o=o(" \u2014 "),Nj=a("a"),A1o=o("BertTokenizer"),y1o=o(" or "),qj=a("a"),L1o=o("BertTokenizerFast"),x1o=o(" (QDQBert model)"),$1o=l(),gu=a("li"),ife=a("strong"),k1o=o("rag"),S1o=o(" \u2014 "),jj=a("a"),R1o=o("RagTokenizer"),P1o=o(" (RAG model)"),B1o=l(),Ks=a("li"),dfe=a("strong"),I1o=o("realm"),N1o=o(" \u2014 "),Dj=a("a"),q1o=o("RealmTokenizer"),j1o=o(" or "),Gj=a("a"),D1o=o("RealmTokenizerFast"),G1o=o(" (REALM model)"),O1o=l(),Zs=a("li"),cfe=a("strong"),V1o=o("reformer"),X1o=o(" \u2014 "),Oj=a("a"),z1o=o("ReformerTokenizer"),Q1o=o(" or "),Vj=a("a"),W1o=o("ReformerTokenizerFast"),U1o=o(" (Reformer model)"),H1o=l(),el=a("li"),mfe=a("strong"),J1o=o("rembert"),Y1o=o(" \u2014 "),Xj=a("a"),K1o=o("RemBertTokenizer"),Z1o=o(" or "),zj=a("a"),eFo=o("RemBertTokenizerFast"),oFo=o(" (RemBERT model)"),rFo=l(),ol=a("li"),ffe=a("strong"),tFo=o("retribert"),aFo=o(" \u2014 "),Qj=a("a"),nFo=o("RetriBertTokenizer"),sFo=o(" or "),Wj=a("a"),lFo=o("RetriBertTokenizerFast"),iFo=o(" (RetriBERT model)"),dFo=l(),rl=a("li"),gfe=a("strong"),cFo=o("roberta"),mFo=o(" \u2014 "),Uj=a("a"),fFo=o("RobertaTokenizer"),gFo=o(" or "),Hj=a("a"),hFo=o("RobertaTokenizerFast"),uFo=o(" (RoBERTa model)"),pFo=l(),tl=a("li"),hfe=a("strong"),_Fo=o("roformer"),bFo=o(" \u2014 "),Jj=a("a"),vFo=o("RoFormerTokenizer"),FFo=o(" or "),Yj=a("a"),TFo=o("RoFormerTokenizerFast"),MFo=o(" (RoFormer model)"),EFo=l(),hu=a("li"),ufe=a("strong"),CFo=o("speech_to_text"),wFo=o(" \u2014 "),Kj=a("a"),AFo=o("Speech2TextTokenizer"),yFo=o(" (Speech2Text model)"),LFo=l(),uu=a("li"),pfe=a("strong"),xFo=o("speech_to_text_2"),$Fo=o(" \u2014 "),Zj=a("a"),kFo=o("Speech2Text2Tokenizer"),SFo=o(" (Speech2Text2 model)"),RFo=l(),al=a("li"),_fe=a("strong"),PFo=o("splinter"),BFo=o(" \u2014 "),eD=a("a"),IFo=o("SplinterTokenizer"),NFo=o(" or "),oD=a("a"),qFo=o("SplinterTokenizerFast"),jFo=o(" (Splinter model)"),DFo=l(),nl=a("li"),bfe=a("strong"),GFo=o("squeezebert"),OFo=o(" \u2014 "),rD=a("a"),VFo=o("SqueezeBertTokenizer"),XFo=o(" or "),tD=a("a"),zFo=o("SqueezeBertTokenizerFast"),QFo=o(" (SqueezeBERT model)"),WFo=l(),sl=a("li"),vfe=a("strong"),UFo=o("t5"),HFo=o(" \u2014 "),aD=a("a"),JFo=o("T5Tokenizer"),YFo=o(" or "),nD=a("a"),KFo=o("T5TokenizerFast"),ZFo=o(" (T5 model)"),eTo=l(),pu=a("li"),Ffe=a("strong"),oTo=o("tapas"),rTo=o(" \u2014 "),sD=a("a"),tTo=o("TapasTokenizer"),aTo=o(" (TAPAS model)"),nTo=l(),_u=a("li"),Tfe=a("strong"),sTo=o("tapex"),lTo=o(" \u2014 "),lD=a("a"),iTo=o("TapexTokenizer"),dTo=o(" (TAPEX model)"),cTo=l(),bu=a("li"),Mfe=a("strong"),mTo=o("transfo-xl"),fTo=o(" \u2014 "),iD=a("a"),gTo=o("TransfoXLTokenizer"),hTo=o(" (Transformer-XL model)"),uTo=l(),ll=a("li"),Efe=a("strong"),pTo=o("vilt"),_To=o(" \u2014 "),dD=a("a"),bTo=o("BertTokenizer"),vTo=o(" or "),cD=a("a"),FTo=o("BertTokenizerFast"),TTo=o(" (ViLT model)"),MTo=l(),il=a("li"),Cfe=a("strong"),ETo=o("visual_bert"),CTo=o(" \u2014 "),mD=a("a"),wTo=o("BertTokenizer"),ATo=o(" or "),fD=a("a"),yTo=o("BertTokenizerFast"),LTo=o(" (VisualBERT model)"),xTo=l(),vu=a("li"),wfe=a("strong"),$To=o("wav2vec2"),kTo=o(" \u2014 "),gD=a("a"),STo=o("Wav2Vec2CTCTokenizer"),RTo=o(" (Wav2Vec2 model)"),PTo=l(),Fu=a("li"),Afe=a("strong"),BTo=o("wav2vec2-conformer"),ITo=o(" \u2014 "),hD=a("a"),NTo=o("Wav2Vec2CTCTokenizer"),qTo=o(" (Wav2Vec2-Conformer model)"),jTo=l(),Tu=a("li"),yfe=a("strong"),DTo=o("wav2vec2_phoneme"),GTo=o(" \u2014 "),uD=a("a"),OTo=o("Wav2Vec2PhonemeCTCTokenizer"),VTo=o(" (Wav2Vec2Phoneme model)"),XTo=l(),dl=a("li"),Lfe=a("strong"),zTo=o("xglm"),QTo=o(" \u2014 "),pD=a("a"),WTo=o("XGLMTokenizer"),UTo=o(" or "),_D=a("a"),HTo=o("XGLMTokenizerFast"),JTo=o(" (XGLM model)"),YTo=l(),Mu=a("li"),xfe=a("strong"),KTo=o("xlm"),ZTo=o(" \u2014 "),bD=a("a"),eMo=o("XLMTokenizer"),oMo=o(" (XLM model)"),rMo=l(),Eu=a("li"),$fe=a("strong"),tMo=o("xlm-prophetnet"),aMo=o(" \u2014 "),vD=a("a"),nMo=o("XLMProphetNetTokenizer"),sMo=o(" (XLM-ProphetNet model)"),lMo=l(),cl=a("li"),kfe=a("strong"),iMo=o("xlm-roberta"),dMo=o(" \u2014 "),FD=a("a"),cMo=o("XLMRobertaTokenizer"),mMo=o(" or "),TD=a("a"),fMo=o("XLMRobertaTokenizerFast"),gMo=o(" (XLM-RoBERTa model)"),hMo=l(),ml=a("li"),Sfe=a("strong"),uMo=o("xlm-roberta-xl"),pMo=o(" \u2014 "),MD=a("a"),_Mo=o("RobertaTokenizer"),bMo=o(" or "),ED=a("a"),vMo=o("RobertaTokenizerFast"),FMo=o(" (XLM-RoBERTa-XL model)"),TMo=l(),fl=a("li"),Rfe=a("strong"),MMo=o("xlnet"),EMo=o(" \u2014 "),CD=a("a"),CMo=o("XLNetTokenizer"),wMo=o(" or "),wD=a("a"),AMo=o("XLNetTokenizerFast"),yMo=o(" (XLNet model)"),LMo=l(),gl=a("li"),Pfe=a("strong"),xMo=o("yoso"),$Mo=o(" \u2014 "),AD=a("a"),kMo=o("AlbertTokenizer"),SMo=o(" or "),yD=a("a"),RMo=o("AlbertTokenizerFast"),PMo=o(" (YOSO model)"),BMo=l(),F(Cu.$$.fragment),IMo=l(),wu=a("div"),F(F9.$$.fragment),NMo=l(),Bfe=a("p"),qMo=o("Register a new tokenizer in this mapping."),LJe=l(),md=a("h2"),Au=a("a"),Ife=a("span"),F(T9.$$.fragment),jMo=l(),Nfe=a("span"),DMo=o("AutoFeatureExtractor"),xJe=l(),ko=a("div"),F(M9.$$.fragment),GMo=l(),E9=a("p"),OMo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),LD=a("a"),VMo=o("AutoFeatureExtractor.from_pretrained()"),XMo=o(" class method."),zMo=l(),C9=a("p"),QMo=o("This class cannot be instantiated directly using "),qfe=a("code"),WMo=o("__init__()"),UMo=o(" (throws an error)."),HMo=l(),Je=a("div"),F(w9.$$.fragment),JMo=l(),jfe=a("p"),YMo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),KMo=l(),Ha=a("p"),ZMo=o("The feature extractor class to instantiate is selected based on the "),Dfe=a("code"),eEo=o("model_type"),oEo=o(` property of the config object
(either passed as an argument or loaded from `),Gfe=a("code"),rEo=o("pretrained_model_name_or_path"),tEo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ofe=a("code"),aEo=o("pretrained_model_name_or_path"),nEo=o(":"),sEo=l(),W=a("ul"),yu=a("li"),Vfe=a("strong"),lEo=o("beit"),iEo=o(" \u2014 "),xD=a("a"),dEo=o("BeitFeatureExtractor"),cEo=o(" (BEiT model)"),mEo=l(),Lu=a("li"),Xfe=a("strong"),fEo=o("clip"),gEo=o(" \u2014 "),$D=a("a"),hEo=o("CLIPFeatureExtractor"),uEo=o(" (CLIP model)"),pEo=l(),xu=a("li"),zfe=a("strong"),_Eo=o("convnext"),bEo=o(" \u2014 "),kD=a("a"),vEo=o("ConvNextFeatureExtractor"),FEo=o(" (ConvNeXT model)"),TEo=l(),$u=a("li"),Qfe=a("strong"),MEo=o("cvt"),EEo=o(" \u2014 "),SD=a("a"),CEo=o("ConvNextFeatureExtractor"),wEo=o(" (CvT model)"),AEo=l(),ku=a("li"),Wfe=a("strong"),yEo=o("data2vec-audio"),LEo=o(" \u2014 "),RD=a("a"),xEo=o("Wav2Vec2FeatureExtractor"),$Eo=o(" (Data2VecAudio model)"),kEo=l(),Su=a("li"),Ufe=a("strong"),SEo=o("data2vec-vision"),REo=o(" \u2014 "),PD=a("a"),PEo=o("BeitFeatureExtractor"),BEo=o(" (Data2VecVision model)"),IEo=l(),Ru=a("li"),Hfe=a("strong"),NEo=o("deit"),qEo=o(" \u2014 "),BD=a("a"),jEo=o("DeiTFeatureExtractor"),DEo=o(" (DeiT model)"),GEo=l(),Pu=a("li"),Jfe=a("strong"),OEo=o("detr"),VEo=o(" \u2014 "),ID=a("a"),XEo=o("DetrFeatureExtractor"),zEo=o(" (DETR model)"),QEo=l(),Bu=a("li"),Yfe=a("strong"),WEo=o("donut"),UEo=o(" \u2014 "),ND=a("a"),HEo=o("DonutFeatureExtractor"),JEo=o(" (Donut model)"),YEo=l(),Iu=a("li"),Kfe=a("strong"),KEo=o("dpt"),ZEo=o(" \u2014 "),qD=a("a"),e4o=o("DPTFeatureExtractor"),o4o=o(" (DPT model)"),r4o=l(),Nu=a("li"),Zfe=a("strong"),t4o=o("flava"),a4o=o(" \u2014 "),jD=a("a"),n4o=o("FlavaFeatureExtractor"),s4o=o(" (FLAVA model)"),l4o=l(),qu=a("li"),ege=a("strong"),i4o=o("glpn"),d4o=o(" \u2014 "),DD=a("a"),c4o=o("GLPNFeatureExtractor"),m4o=o(" (GLPN model)"),f4o=l(),ju=a("li"),oge=a("strong"),g4o=o("groupvit"),h4o=o(" \u2014 "),GD=a("a"),u4o=o("CLIPFeatureExtractor"),p4o=o(" (GroupViT model)"),_4o=l(),Du=a("li"),rge=a("strong"),b4o=o("hubert"),v4o=o(" \u2014 "),OD=a("a"),F4o=o("Wav2Vec2FeatureExtractor"),T4o=o(" (Hubert model)"),M4o=l(),Gu=a("li"),tge=a("strong"),E4o=o("imagegpt"),C4o=o(" \u2014 "),VD=a("a"),w4o=o("ImageGPTFeatureExtractor"),A4o=o(" (ImageGPT model)"),y4o=l(),Ou=a("li"),age=a("strong"),L4o=o("layoutlmv2"),x4o=o(" \u2014 "),XD=a("a"),$4o=o("LayoutLMv2FeatureExtractor"),k4o=o(" (LayoutLMv2 model)"),S4o=l(),Vu=a("li"),nge=a("strong"),R4o=o("layoutlmv3"),P4o=o(" \u2014 "),zD=a("a"),B4o=o("LayoutLMv3FeatureExtractor"),I4o=o(" (LayoutLMv3 model)"),N4o=l(),Xu=a("li"),sge=a("strong"),q4o=o("levit"),j4o=o(" \u2014 "),QD=a("a"),D4o=o("LevitFeatureExtractor"),G4o=o(" (LeViT model)"),O4o=l(),zu=a("li"),lge=a("strong"),V4o=o("maskformer"),X4o=o(" \u2014 "),WD=a("a"),z4o=o("MaskFormerFeatureExtractor"),Q4o=o(" (MaskFormer model)"),W4o=l(),Qu=a("li"),ige=a("strong"),U4o=o("mctct"),H4o=o(" \u2014 "),UD=a("a"),J4o=o("MCTCTFeatureExtractor"),Y4o=o(" (M-CTC-T model)"),K4o=l(),Wu=a("li"),dge=a("strong"),Z4o=o("mobilevit"),eCo=o(" \u2014 "),HD=a("a"),oCo=o("MobileViTFeatureExtractor"),rCo=o(" (MobileViT model)"),tCo=l(),Uu=a("li"),cge=a("strong"),aCo=o("owlvit"),nCo=o(" \u2014 "),JD=a("a"),sCo=o("OwlViTFeatureExtractor"),lCo=o(" (OWL-ViT model)"),iCo=l(),Hu=a("li"),mge=a("strong"),dCo=o("perceiver"),cCo=o(" \u2014 "),YD=a("a"),mCo=o("PerceiverFeatureExtractor"),fCo=o(" (Perceiver model)"),gCo=l(),Ju=a("li"),fge=a("strong"),hCo=o("poolformer"),uCo=o(" \u2014 "),KD=a("a"),pCo=o("PoolFormerFeatureExtractor"),_Co=o(" (PoolFormer model)"),bCo=l(),Yu=a("li"),gge=a("strong"),vCo=o("regnet"),FCo=o(" \u2014 "),ZD=a("a"),TCo=o("ConvNextFeatureExtractor"),MCo=o(" (RegNet model)"),ECo=l(),Ku=a("li"),hge=a("strong"),CCo=o("resnet"),wCo=o(" \u2014 "),eG=a("a"),ACo=o("ConvNextFeatureExtractor"),yCo=o(" (ResNet model)"),LCo=l(),Zu=a("li"),uge=a("strong"),xCo=o("segformer"),$Co=o(" \u2014 "),oG=a("a"),kCo=o("SegformerFeatureExtractor"),SCo=o(" (SegFormer model)"),RCo=l(),ep=a("li"),pge=a("strong"),PCo=o("speech_to_text"),BCo=o(" \u2014 "),rG=a("a"),ICo=o("Speech2TextFeatureExtractor"),NCo=o(" (Speech2Text model)"),qCo=l(),op=a("li"),_ge=a("strong"),jCo=o("swin"),DCo=o(" \u2014 "),tG=a("a"),GCo=o("ViTFeatureExtractor"),OCo=o(" (Swin Transformer model)"),VCo=l(),rp=a("li"),bge=a("strong"),XCo=o("swinv2"),zCo=o(" \u2014 "),aG=a("a"),QCo=o("ViTFeatureExtractor"),WCo=o(" (Swin Transformer V2 model)"),UCo=l(),tp=a("li"),vge=a("strong"),HCo=o("van"),JCo=o(" \u2014 "),nG=a("a"),YCo=o("ConvNextFeatureExtractor"),KCo=o(" (VAN model)"),ZCo=l(),ap=a("li"),Fge=a("strong"),e3o=o("videomae"),o3o=o(" \u2014 "),sG=a("a"),r3o=o("VideoMAEFeatureExtractor"),t3o=o(" (VideoMAE model)"),a3o=l(),np=a("li"),Tge=a("strong"),n3o=o("vilt"),s3o=o(" \u2014 "),lG=a("a"),l3o=o("ViltFeatureExtractor"),i3o=o(" (ViLT model)"),d3o=l(),sp=a("li"),Mge=a("strong"),c3o=o("vit"),m3o=o(" \u2014 "),iG=a("a"),f3o=o("ViTFeatureExtractor"),g3o=o(" (ViT model)"),h3o=l(),lp=a("li"),Ege=a("strong"),u3o=o("vit_mae"),p3o=o(" \u2014 "),dG=a("a"),_3o=o("ViTFeatureExtractor"),b3o=o(" (ViTMAE model)"),v3o=l(),ip=a("li"),Cge=a("strong"),F3o=o("wav2vec2"),T3o=o(" \u2014 "),cG=a("a"),M3o=o("Wav2Vec2FeatureExtractor"),E3o=o(" (Wav2Vec2 model)"),C3o=l(),dp=a("li"),wge=a("strong"),w3o=o("wav2vec2-conformer"),A3o=o(" \u2014 "),mG=a("a"),y3o=o("Wav2Vec2FeatureExtractor"),L3o=o(" (Wav2Vec2-Conformer model)"),x3o=l(),cp=a("li"),Age=a("strong"),$3o=o("yolos"),k3o=o(" \u2014 "),fG=a("a"),S3o=o("YolosFeatureExtractor"),R3o=o(" (YOLOS model)"),P3o=l(),F(mp.$$.fragment),B3o=l(),F(fp.$$.fragment),I3o=l(),gp=a("div"),F(A9.$$.fragment),N3o=l(),yge=a("p"),q3o=o("Register a new feature extractor for this class."),$Je=l(),fd=a("h2"),hp=a("a"),Lge=a("span"),F(y9.$$.fragment),j3o=l(),xge=a("span"),D3o=o("AutoProcessor"),kJe=l(),So=a("div"),F(L9.$$.fragment),G3o=l(),x9=a("p"),O3o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),gG=a("a"),V3o=o("AutoProcessor.from_pretrained()"),X3o=o(" class method."),z3o=l(),$9=a("p"),Q3o=o("This class cannot be instantiated directly using "),$ge=a("code"),W3o=o("__init__()"),U3o=o(" (throws an error)."),H3o=l(),Ye=a("div"),F(k9.$$.fragment),J3o=l(),kge=a("p"),Y3o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),K3o=l(),gd=a("p"),Z3o=o("The processor class to instantiate is selected based on the "),Sge=a("code"),e5o=o("model_type"),o5o=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),r5o=o("pretrained_model_name_or_path"),t5o=o(" if possible):"),a5o=l(),ce=a("ul"),up=a("li"),Pge=a("strong"),n5o=o("clip"),s5o=o(" \u2014 "),hG=a("a"),l5o=o("CLIPProcessor"),i5o=o(" (CLIP model)"),d5o=l(),pp=a("li"),Bge=a("strong"),c5o=o("donut"),m5o=o(" \u2014 "),uG=a("a"),f5o=o("DonutProcessor"),g5o=o(" (Donut model)"),h5o=l(),_p=a("li"),Ige=a("strong"),u5o=o("flava"),p5o=o(" \u2014 "),pG=a("a"),_5o=o("FlavaProcessor"),b5o=o(" (FLAVA model)"),v5o=l(),bp=a("li"),Nge=a("strong"),F5o=o("groupvit"),T5o=o(" \u2014 "),_G=a("a"),M5o=o("CLIPProcessor"),E5o=o(" (GroupViT model)"),C5o=l(),vp=a("li"),qge=a("strong"),w5o=o("layoutlmv2"),A5o=o(" \u2014 "),bG=a("a"),y5o=o("LayoutLMv2Processor"),L5o=o(" (LayoutLMv2 model)"),x5o=l(),Fp=a("li"),jge=a("strong"),$5o=o("layoutlmv3"),k5o=o(" \u2014 "),vG=a("a"),S5o=o("LayoutLMv3Processor"),R5o=o(" (LayoutLMv3 model)"),P5o=l(),Tp=a("li"),Dge=a("strong"),B5o=o("layoutxlm"),I5o=o(" \u2014 "),FG=a("a"),N5o=o("LayoutXLMProcessor"),q5o=o(" (LayoutXLM model)"),j5o=l(),Mp=a("li"),Gge=a("strong"),D5o=o("owlvit"),G5o=o(" \u2014 "),TG=a("a"),O5o=o("OwlViTProcessor"),V5o=o(" (OWL-ViT model)"),X5o=l(),Ep=a("li"),Oge=a("strong"),z5o=o("sew"),Q5o=o(" \u2014 "),MG=a("a"),W5o=o("Wav2Vec2Processor"),U5o=o(" (SEW model)"),H5o=l(),Cp=a("li"),Vge=a("strong"),J5o=o("sew-d"),Y5o=o(" \u2014 "),EG=a("a"),K5o=o("Wav2Vec2Processor"),Z5o=o(" (SEW-D model)"),e0o=l(),wp=a("li"),Xge=a("strong"),o0o=o("speech_to_text"),r0o=o(" \u2014 "),CG=a("a"),t0o=o("Speech2TextProcessor"),a0o=o(" (Speech2Text model)"),n0o=l(),Ap=a("li"),zge=a("strong"),s0o=o("speech_to_text_2"),l0o=o(" \u2014 "),wG=a("a"),i0o=o("Speech2Text2Processor"),d0o=o(" (Speech2Text2 model)"),c0o=l(),yp=a("li"),Qge=a("strong"),m0o=o("trocr"),f0o=o(" \u2014 "),AG=a("a"),g0o=o("TrOCRProcessor"),h0o=o(" (TrOCR model)"),u0o=l(),Lp=a("li"),Wge=a("strong"),p0o=o("unispeech"),_0o=o(" \u2014 "),yG=a("a"),b0o=o("Wav2Vec2Processor"),v0o=o(" (UniSpeech model)"),F0o=l(),xp=a("li"),Uge=a("strong"),T0o=o("unispeech-sat"),M0o=o(" \u2014 "),LG=a("a"),E0o=o("Wav2Vec2Processor"),C0o=o(" (UniSpeechSat model)"),w0o=l(),$p=a("li"),Hge=a("strong"),A0o=o("vilt"),y0o=o(" \u2014 "),xG=a("a"),L0o=o("ViltProcessor"),x0o=o(" (ViLT model)"),$0o=l(),kp=a("li"),Jge=a("strong"),k0o=o("vision-text-dual-encoder"),S0o=o(" \u2014 "),$G=a("a"),R0o=o("VisionTextDualEncoderProcessor"),P0o=o(" (VisionTextDualEncoder model)"),B0o=l(),Sp=a("li"),Yge=a("strong"),I0o=o("wav2vec2"),N0o=o(" \u2014 "),kG=a("a"),q0o=o("Wav2Vec2Processor"),j0o=o(" (Wav2Vec2 model)"),D0o=l(),Rp=a("li"),Kge=a("strong"),G0o=o("wav2vec2-conformer"),O0o=o(" \u2014 "),SG=a("a"),V0o=o("Wav2Vec2Processor"),X0o=o(" (Wav2Vec2-Conformer model)"),z0o=l(),Pp=a("li"),Zge=a("strong"),Q0o=o("wavlm"),W0o=o(" \u2014 "),RG=a("a"),U0o=o("Wav2Vec2Processor"),H0o=o(" (WavLM model)"),J0o=l(),F(Bp.$$.fragment),Y0o=l(),F(Ip.$$.fragment),K0o=l(),Np=a("div"),F(S9.$$.fragment),Z0o=l(),ehe=a("p"),ewo=o("Register a new processor for this class."),SJe=l(),hd=a("h2"),qp=a("a"),ohe=a("span"),F(R9.$$.fragment),owo=l(),rhe=a("span"),rwo=o("AutoModel"),RJe=l(),Ro=a("div"),F(P9.$$.fragment),two=l(),ud=a("p"),awo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PG=a("a"),nwo=o("from_pretrained()"),swo=o(" class method or the "),BG=a("a"),lwo=o("from_config()"),iwo=o(` class
method.`),dwo=l(),B9=a("p"),cwo=o("This class cannot be instantiated directly using "),the=a("code"),mwo=o("__init__()"),fwo=o(" (throws an error)."),gwo=l(),pt=a("div"),F(I9.$$.fragment),hwo=l(),ahe=a("p"),uwo=o("Instantiates one of the base model classes of the library from a configuration."),pwo=l(),pd=a("p"),_wo=o(`Note:
Loading a model from its configuration file does `),nhe=a("strong"),bwo=o("not"),vwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),Fwo=o("from_pretrained()"),Two=o(" to load the model weights."),Mwo=l(),F(jp.$$.fragment),Ewo=l(),Ke=a("div"),F(N9.$$.fragment),Cwo=l(),she=a("p"),wwo=o("Instantiate one of the base model classes of the library from a pretrained model."),Awo=l(),Ja=a("p"),ywo=o("The model class to instantiate is selected based on the "),lhe=a("code"),Lwo=o("model_type"),xwo=o(` property of the config object (either
passed as an argument or loaded from `),ihe=a("code"),$wo=o("pretrained_model_name_or_path"),kwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=a("code"),Swo=o("pretrained_model_name_or_path"),Rwo=o(":"),Pwo=l(),L=a("ul"),Dp=a("li"),che=a("strong"),Bwo=o("albert"),Iwo=o(" \u2014 "),NG=a("a"),Nwo=o("AlbertModel"),qwo=o(" (ALBERT model)"),jwo=l(),Gp=a("li"),mhe=a("strong"),Dwo=o("bart"),Gwo=o(" \u2014 "),qG=a("a"),Owo=o("BartModel"),Vwo=o(" (BART model)"),Xwo=l(),Op=a("li"),fhe=a("strong"),zwo=o("beit"),Qwo=o(" \u2014 "),jG=a("a"),Wwo=o("BeitModel"),Uwo=o(" (BEiT model)"),Hwo=l(),Vp=a("li"),ghe=a("strong"),Jwo=o("bert"),Ywo=o(" \u2014 "),DG=a("a"),Kwo=o("BertModel"),Zwo=o(" (BERT model)"),eAo=l(),Xp=a("li"),hhe=a("strong"),oAo=o("bert-generation"),rAo=o(" \u2014 "),GG=a("a"),tAo=o("BertGenerationEncoder"),aAo=o(" (Bert Generation model)"),nAo=l(),zp=a("li"),uhe=a("strong"),sAo=o("big_bird"),lAo=o(" \u2014 "),OG=a("a"),iAo=o("BigBirdModel"),dAo=o(" (BigBird model)"),cAo=l(),Qp=a("li"),phe=a("strong"),mAo=o("bigbird_pegasus"),fAo=o(" \u2014 "),VG=a("a"),gAo=o("BigBirdPegasusModel"),hAo=o(" (BigBird-Pegasus model)"),uAo=l(),Wp=a("li"),_he=a("strong"),pAo=o("blenderbot"),_Ao=o(" \u2014 "),XG=a("a"),bAo=o("BlenderbotModel"),vAo=o(" (Blenderbot model)"),FAo=l(),Up=a("li"),bhe=a("strong"),TAo=o("blenderbot-small"),MAo=o(" \u2014 "),zG=a("a"),EAo=o("BlenderbotSmallModel"),CAo=o(" (BlenderbotSmall model)"),wAo=l(),Hp=a("li"),vhe=a("strong"),AAo=o("bloom"),yAo=o(" \u2014 "),QG=a("a"),LAo=o("BloomModel"),xAo=o(" (BLOOM model)"),$Ao=l(),Jp=a("li"),Fhe=a("strong"),kAo=o("camembert"),SAo=o(" \u2014 "),WG=a("a"),RAo=o("CamembertModel"),PAo=o(" (CamemBERT model)"),BAo=l(),Yp=a("li"),The=a("strong"),IAo=o("canine"),NAo=o(" \u2014 "),UG=a("a"),qAo=o("CanineModel"),jAo=o(" (CANINE model)"),DAo=l(),Kp=a("li"),Mhe=a("strong"),GAo=o("clip"),OAo=o(" \u2014 "),HG=a("a"),VAo=o("CLIPModel"),XAo=o(" (CLIP model)"),zAo=l(),Zp=a("li"),Ehe=a("strong"),QAo=o("codegen"),WAo=o(" \u2014 "),JG=a("a"),UAo=o("CodeGenModel"),HAo=o(" (CodeGen model)"),JAo=l(),e_=a("li"),Che=a("strong"),YAo=o("convbert"),KAo=o(" \u2014 "),YG=a("a"),ZAo=o("ConvBertModel"),e6o=o(" (ConvBERT model)"),o6o=l(),o_=a("li"),whe=a("strong"),r6o=o("convnext"),t6o=o(" \u2014 "),KG=a("a"),a6o=o("ConvNextModel"),n6o=o(" (ConvNeXT model)"),s6o=l(),r_=a("li"),Ahe=a("strong"),l6o=o("ctrl"),i6o=o(" \u2014 "),ZG=a("a"),d6o=o("CTRLModel"),c6o=o(" (CTRL model)"),m6o=l(),t_=a("li"),yhe=a("strong"),f6o=o("cvt"),g6o=o(" \u2014 "),eO=a("a"),h6o=o("CvtModel"),u6o=o(" (CvT model)"),p6o=l(),a_=a("li"),Lhe=a("strong"),_6o=o("data2vec-audio"),b6o=o(" \u2014 "),oO=a("a"),v6o=o("Data2VecAudioModel"),F6o=o(" (Data2VecAudio model)"),T6o=l(),n_=a("li"),xhe=a("strong"),M6o=o("data2vec-text"),E6o=o(" \u2014 "),rO=a("a"),C6o=o("Data2VecTextModel"),w6o=o(" (Data2VecText model)"),A6o=l(),s_=a("li"),$he=a("strong"),y6o=o("data2vec-vision"),L6o=o(" \u2014 "),tO=a("a"),x6o=o("Data2VecVisionModel"),$6o=o(" (Data2VecVision model)"),k6o=l(),l_=a("li"),khe=a("strong"),S6o=o("deberta"),R6o=o(" \u2014 "),aO=a("a"),P6o=o("DebertaModel"),B6o=o(" (DeBERTa model)"),I6o=l(),i_=a("li"),She=a("strong"),N6o=o("deberta-v2"),q6o=o(" \u2014 "),nO=a("a"),j6o=o("DebertaV2Model"),D6o=o(" (DeBERTa-v2 model)"),G6o=l(),d_=a("li"),Rhe=a("strong"),O6o=o("decision_transformer"),V6o=o(" \u2014 "),sO=a("a"),X6o=o("DecisionTransformerModel"),z6o=o(" (Decision Transformer model)"),Q6o=l(),c_=a("li"),Phe=a("strong"),W6o=o("deit"),U6o=o(" \u2014 "),lO=a("a"),H6o=o("DeiTModel"),J6o=o(" (DeiT model)"),Y6o=l(),m_=a("li"),Bhe=a("strong"),K6o=o("detr"),Z6o=o(" \u2014 "),iO=a("a"),e7o=o("DetrModel"),o7o=o(" (DETR model)"),r7o=l(),f_=a("li"),Ihe=a("strong"),t7o=o("distilbert"),a7o=o(" \u2014 "),dO=a("a"),n7o=o("DistilBertModel"),s7o=o(" (DistilBERT model)"),l7o=l(),g_=a("li"),Nhe=a("strong"),i7o=o("donut-swin"),d7o=o(" \u2014 "),cO=a("a"),c7o=o("DonutSwinModel"),m7o=o(" (DonutSwin model)"),f7o=l(),h_=a("li"),qhe=a("strong"),g7o=o("dpr"),h7o=o(" \u2014 "),mO=a("a"),u7o=o("DPRQuestionEncoder"),p7o=o(" (DPR model)"),_7o=l(),u_=a("li"),jhe=a("strong"),b7o=o("dpt"),v7o=o(" \u2014 "),fO=a("a"),F7o=o("DPTModel"),T7o=o(" (DPT model)"),M7o=l(),p_=a("li"),Dhe=a("strong"),E7o=o("electra"),C7o=o(" \u2014 "),gO=a("a"),w7o=o("ElectraModel"),A7o=o(" (ELECTRA model)"),y7o=l(),__=a("li"),Ghe=a("strong"),L7o=o("flaubert"),x7o=o(" \u2014 "),hO=a("a"),$7o=o("FlaubertModel"),k7o=o(" (FlauBERT model)"),S7o=l(),b_=a("li"),Ohe=a("strong"),R7o=o("flava"),P7o=o(" \u2014 "),uO=a("a"),B7o=o("FlavaModel"),I7o=o(" (FLAVA model)"),N7o=l(),v_=a("li"),Vhe=a("strong"),q7o=o("fnet"),j7o=o(" \u2014 "),pO=a("a"),D7o=o("FNetModel"),G7o=o(" (FNet model)"),O7o=l(),F_=a("li"),Xhe=a("strong"),V7o=o("fsmt"),X7o=o(" \u2014 "),_O=a("a"),z7o=o("FSMTModel"),Q7o=o(" (FairSeq Machine-Translation model)"),W7o=l(),hl=a("li"),zhe=a("strong"),U7o=o("funnel"),H7o=o(" \u2014 "),bO=a("a"),J7o=o("FunnelModel"),Y7o=o(" or "),vO=a("a"),K7o=o("FunnelBaseModel"),Z7o=o(" (Funnel Transformer model)"),eyo=l(),T_=a("li"),Qhe=a("strong"),oyo=o("glpn"),ryo=o(" \u2014 "),FO=a("a"),tyo=o("GLPNModel"),ayo=o(" (GLPN model)"),nyo=l(),M_=a("li"),Whe=a("strong"),syo=o("gpt2"),lyo=o(" \u2014 "),TO=a("a"),iyo=o("GPT2Model"),dyo=o(" (OpenAI GPT-2 model)"),cyo=l(),E_=a("li"),Uhe=a("strong"),myo=o("gpt_neo"),fyo=o(" \u2014 "),MO=a("a"),gyo=o("GPTNeoModel"),hyo=o(" (GPT Neo model)"),uyo=l(),C_=a("li"),Hhe=a("strong"),pyo=o("gpt_neox"),_yo=o(" \u2014 "),EO=a("a"),byo=o("GPTNeoXModel"),vyo=o(" (GPT NeoX model)"),Fyo=l(),w_=a("li"),Jhe=a("strong"),Tyo=o("gptj"),Myo=o(" \u2014 "),CO=a("a"),Eyo=o("GPTJModel"),Cyo=o(" (GPT-J model)"),wyo=l(),A_=a("li"),Yhe=a("strong"),Ayo=o("groupvit"),yyo=o(" \u2014 "),wO=a("a"),Lyo=o("GroupViTModel"),xyo=o(" (GroupViT model)"),$yo=l(),y_=a("li"),Khe=a("strong"),kyo=o("hubert"),Syo=o(" \u2014 "),AO=a("a"),Ryo=o("HubertModel"),Pyo=o(" (Hubert model)"),Byo=l(),L_=a("li"),Zhe=a("strong"),Iyo=o("ibert"),Nyo=o(" \u2014 "),yO=a("a"),qyo=o("IBertModel"),jyo=o(" (I-BERT model)"),Dyo=l(),x_=a("li"),eue=a("strong"),Gyo=o("imagegpt"),Oyo=o(" \u2014 "),LO=a("a"),Vyo=o("ImageGPTModel"),Xyo=o(" (ImageGPT model)"),zyo=l(),$_=a("li"),oue=a("strong"),Qyo=o("layoutlm"),Wyo=o(" \u2014 "),xO=a("a"),Uyo=o("LayoutLMModel"),Hyo=o(" (LayoutLM model)"),Jyo=l(),k_=a("li"),rue=a("strong"),Yyo=o("layoutlmv2"),Kyo=o(" \u2014 "),$O=a("a"),Zyo=o("LayoutLMv2Model"),eLo=o(" (LayoutLMv2 model)"),oLo=l(),S_=a("li"),tue=a("strong"),rLo=o("layoutlmv3"),tLo=o(" \u2014 "),kO=a("a"),aLo=o("LayoutLMv3Model"),nLo=o(" (LayoutLMv3 model)"),sLo=l(),R_=a("li"),aue=a("strong"),lLo=o("led"),iLo=o(" \u2014 "),SO=a("a"),dLo=o("LEDModel"),cLo=o(" (LED model)"),mLo=l(),P_=a("li"),nue=a("strong"),fLo=o("levit"),gLo=o(" \u2014 "),RO=a("a"),hLo=o("LevitModel"),uLo=o(" (LeViT model)"),pLo=l(),B_=a("li"),sue=a("strong"),_Lo=o("longformer"),bLo=o(" \u2014 "),PO=a("a"),vLo=o("LongformerModel"),FLo=o(" (Longformer model)"),TLo=l(),I_=a("li"),lue=a("strong"),MLo=o("longt5"),ELo=o(" \u2014 "),BO=a("a"),CLo=o("LongT5Model"),wLo=o(" (LongT5 model)"),ALo=l(),N_=a("li"),iue=a("strong"),yLo=o("luke"),LLo=o(" \u2014 "),IO=a("a"),xLo=o("LukeModel"),$Lo=o(" (LUKE model)"),kLo=l(),q_=a("li"),due=a("strong"),SLo=o("lxmert"),RLo=o(" \u2014 "),NO=a("a"),PLo=o("LxmertModel"),BLo=o(" (LXMERT model)"),ILo=l(),j_=a("li"),cue=a("strong"),NLo=o("m2m_100"),qLo=o(" \u2014 "),qO=a("a"),jLo=o("M2M100Model"),DLo=o(" (M2M100 model)"),GLo=l(),D_=a("li"),mue=a("strong"),OLo=o("marian"),VLo=o(" \u2014 "),jO=a("a"),XLo=o("MarianModel"),zLo=o(" (Marian model)"),QLo=l(),G_=a("li"),fue=a("strong"),WLo=o("maskformer"),ULo=o(" \u2014 "),DO=a("a"),HLo=o("MaskFormerModel"),JLo=o(" (MaskFormer model)"),YLo=l(),O_=a("li"),gue=a("strong"),KLo=o("mbart"),ZLo=o(" \u2014 "),GO=a("a"),e8o=o("MBartModel"),o8o=o(" (mBART model)"),r8o=l(),V_=a("li"),hue=a("strong"),t8o=o("mctct"),a8o=o(" \u2014 "),OO=a("a"),n8o=o("MCTCTModel"),s8o=o(" (M-CTC-T model)"),l8o=l(),X_=a("li"),uue=a("strong"),i8o=o("megatron-bert"),d8o=o(" \u2014 "),VO=a("a"),c8o=o("MegatronBertModel"),m8o=o(" (Megatron-BERT model)"),f8o=l(),z_=a("li"),pue=a("strong"),g8o=o("mobilebert"),h8o=o(" \u2014 "),XO=a("a"),u8o=o("MobileBertModel"),p8o=o(" (MobileBERT model)"),_8o=l(),Q_=a("li"),_ue=a("strong"),b8o=o("mobilevit"),v8o=o(" \u2014 "),zO=a("a"),F8o=o("MobileViTModel"),T8o=o(" (MobileViT model)"),M8o=l(),W_=a("li"),bue=a("strong"),E8o=o("mpnet"),C8o=o(" \u2014 "),QO=a("a"),w8o=o("MPNetModel"),A8o=o(" (MPNet model)"),y8o=l(),U_=a("li"),vue=a("strong"),L8o=o("mt5"),x8o=o(" \u2014 "),WO=a("a"),$8o=o("MT5Model"),k8o=o(" (MT5 model)"),S8o=l(),H_=a("li"),Fue=a("strong"),R8o=o("mvp"),P8o=o(" \u2014 "),UO=a("a"),B8o=o("MvpModel"),I8o=o(" (MVP model)"),N8o=l(),J_=a("li"),Tue=a("strong"),q8o=o("nezha"),j8o=o(" \u2014 "),HO=a("a"),D8o=o("NezhaModel"),G8o=o(" (Nezha model)"),O8o=l(),Y_=a("li"),Mue=a("strong"),V8o=o("nllb"),X8o=o(" \u2014 "),JO=a("a"),z8o=o("M2M100Model"),Q8o=o(" (NLLB model)"),W8o=l(),K_=a("li"),Eue=a("strong"),U8o=o("nystromformer"),H8o=o(" \u2014 "),YO=a("a"),J8o=o("NystromformerModel"),Y8o=o(" (Nystr\xF6mformer model)"),K8o=l(),Z_=a("li"),Cue=a("strong"),Z8o=o("openai-gpt"),e9o=o(" \u2014 "),KO=a("a"),o9o=o("OpenAIGPTModel"),r9o=o(" (OpenAI GPT model)"),t9o=l(),eb=a("li"),wue=a("strong"),a9o=o("opt"),n9o=o(" \u2014 "),ZO=a("a"),s9o=o("OPTModel"),l9o=o(" (OPT model)"),i9o=l(),ob=a("li"),Aue=a("strong"),d9o=o("owlvit"),c9o=o(" \u2014 "),eV=a("a"),m9o=o("OwlViTModel"),f9o=o(" (OWL-ViT model)"),g9o=l(),rb=a("li"),yue=a("strong"),h9o=o("pegasus"),u9o=o(" \u2014 "),oV=a("a"),p9o=o("PegasusModel"),_9o=o(" (Pegasus model)"),b9o=l(),tb=a("li"),Lue=a("strong"),v9o=o("pegasus_x"),F9o=o(" \u2014 "),rV=a("a"),T9o=o("PegasusXModel"),M9o=o(" (PEGASUS-X model)"),E9o=l(),ab=a("li"),xue=a("strong"),C9o=o("perceiver"),w9o=o(" \u2014 "),tV=a("a"),A9o=o("PerceiverModel"),y9o=o(" (Perceiver model)"),L9o=l(),nb=a("li"),$ue=a("strong"),x9o=o("plbart"),$9o=o(" \u2014 "),aV=a("a"),k9o=o("PLBartModel"),S9o=o(" (PLBart model)"),R9o=l(),sb=a("li"),kue=a("strong"),P9o=o("poolformer"),B9o=o(" \u2014 "),nV=a("a"),I9o=o("PoolFormerModel"),N9o=o(" (PoolFormer model)"),q9o=l(),lb=a("li"),Sue=a("strong"),j9o=o("prophetnet"),D9o=o(" \u2014 "),sV=a("a"),G9o=o("ProphetNetModel"),O9o=o(" (ProphetNet model)"),V9o=l(),ib=a("li"),Rue=a("strong"),X9o=o("qdqbert"),z9o=o(" \u2014 "),lV=a("a"),Q9o=o("QDQBertModel"),W9o=o(" (QDQBert model)"),U9o=l(),db=a("li"),Pue=a("strong"),H9o=o("reformer"),J9o=o(" \u2014 "),iV=a("a"),Y9o=o("ReformerModel"),K9o=o(" (Reformer model)"),Z9o=l(),cb=a("li"),Bue=a("strong"),exo=o("regnet"),oxo=o(" \u2014 "),dV=a("a"),rxo=o("RegNetModel"),txo=o(" (RegNet model)"),axo=l(),mb=a("li"),Iue=a("strong"),nxo=o("rembert"),sxo=o(" \u2014 "),cV=a("a"),lxo=o("RemBertModel"),ixo=o(" (RemBERT model)"),dxo=l(),fb=a("li"),Nue=a("strong"),cxo=o("resnet"),mxo=o(" \u2014 "),mV=a("a"),fxo=o("ResNetModel"),gxo=o(" (ResNet model)"),hxo=l(),gb=a("li"),que=a("strong"),uxo=o("retribert"),pxo=o(" \u2014 "),fV=a("a"),_xo=o("RetriBertModel"),bxo=o(" (RetriBERT model)"),vxo=l(),hb=a("li"),jue=a("strong"),Fxo=o("roberta"),Txo=o(" \u2014 "),gV=a("a"),Mxo=o("RobertaModel"),Exo=o(" (RoBERTa model)"),Cxo=l(),ub=a("li"),Due=a("strong"),wxo=o("roformer"),Axo=o(" \u2014 "),hV=a("a"),yxo=o("RoFormerModel"),Lxo=o(" (RoFormer model)"),xxo=l(),pb=a("li"),Gue=a("strong"),$xo=o("segformer"),kxo=o(" \u2014 "),uV=a("a"),Sxo=o("SegformerModel"),Rxo=o(" (SegFormer model)"),Pxo=l(),_b=a("li"),Oue=a("strong"),Bxo=o("sew"),Ixo=o(" \u2014 "),pV=a("a"),Nxo=o("SEWModel"),qxo=o(" (SEW model)"),jxo=l(),bb=a("li"),Vue=a("strong"),Dxo=o("sew-d"),Gxo=o(" \u2014 "),_V=a("a"),Oxo=o("SEWDModel"),Vxo=o(" (SEW-D model)"),Xxo=l(),vb=a("li"),Xue=a("strong"),zxo=o("speech_to_text"),Qxo=o(" \u2014 "),bV=a("a"),Wxo=o("Speech2TextModel"),Uxo=o(" (Speech2Text model)"),Hxo=l(),Fb=a("li"),zue=a("strong"),Jxo=o("splinter"),Yxo=o(" \u2014 "),vV=a("a"),Kxo=o("SplinterModel"),Zxo=o(" (Splinter model)"),e$o=l(),Tb=a("li"),Que=a("strong"),o$o=o("squeezebert"),r$o=o(" \u2014 "),FV=a("a"),t$o=o("SqueezeBertModel"),a$o=o(" (SqueezeBERT model)"),n$o=l(),Mb=a("li"),Wue=a("strong"),s$o=o("swin"),l$o=o(" \u2014 "),TV=a("a"),i$o=o("SwinModel"),d$o=o(" (Swin Transformer model)"),c$o=l(),Eb=a("li"),Uue=a("strong"),m$o=o("swinv2"),f$o=o(" \u2014 "),MV=a("a"),g$o=o("Swinv2Model"),h$o=o(" (Swin Transformer V2 model)"),u$o=l(),Cb=a("li"),Hue=a("strong"),p$o=o("t5"),_$o=o(" \u2014 "),EV=a("a"),b$o=o("T5Model"),v$o=o(" (T5 model)"),F$o=l(),wb=a("li"),Jue=a("strong"),T$o=o("tapas"),M$o=o(" \u2014 "),CV=a("a"),E$o=o("TapasModel"),C$o=o(" (TAPAS model)"),w$o=l(),Ab=a("li"),Yue=a("strong"),A$o=o("trajectory_transformer"),y$o=o(" \u2014 "),wV=a("a"),L$o=o("TrajectoryTransformerModel"),x$o=o(" (Trajectory Transformer model)"),$$o=l(),yb=a("li"),Kue=a("strong"),k$o=o("transfo-xl"),S$o=o(" \u2014 "),AV=a("a"),R$o=o("TransfoXLModel"),P$o=o(" (Transformer-XL model)"),B$o=l(),Lb=a("li"),Zue=a("strong"),I$o=o("unispeech"),N$o=o(" \u2014 "),yV=a("a"),q$o=o("UniSpeechModel"),j$o=o(" (UniSpeech model)"),D$o=l(),xb=a("li"),epe=a("strong"),G$o=o("unispeech-sat"),O$o=o(" \u2014 "),LV=a("a"),V$o=o("UniSpeechSatModel"),X$o=o(" (UniSpeechSat model)"),z$o=l(),$b=a("li"),ope=a("strong"),Q$o=o("van"),W$o=o(" \u2014 "),xV=a("a"),U$o=o("VanModel"),H$o=o(" (VAN model)"),J$o=l(),kb=a("li"),rpe=a("strong"),Y$o=o("videomae"),K$o=o(" \u2014 "),$V=a("a"),Z$o=o("VideoMAEModel"),eko=o(" (VideoMAE model)"),oko=l(),Sb=a("li"),tpe=a("strong"),rko=o("vilt"),tko=o(" \u2014 "),kV=a("a"),ako=o("ViltModel"),nko=o(" (ViLT model)"),sko=l(),Rb=a("li"),ape=a("strong"),lko=o("vision-text-dual-encoder"),iko=o(" \u2014 "),SV=a("a"),dko=o("VisionTextDualEncoderModel"),cko=o(" (VisionTextDualEncoder model)"),mko=l(),Pb=a("li"),npe=a("strong"),fko=o("visual_bert"),gko=o(" \u2014 "),RV=a("a"),hko=o("VisualBertModel"),uko=o(" (VisualBERT model)"),pko=l(),Bb=a("li"),spe=a("strong"),_ko=o("vit"),bko=o(" \u2014 "),PV=a("a"),vko=o("ViTModel"),Fko=o(" (ViT model)"),Tko=l(),Ib=a("li"),lpe=a("strong"),Mko=o("vit_mae"),Eko=o(" \u2014 "),BV=a("a"),Cko=o("ViTMAEModel"),wko=o(" (ViTMAE model)"),Ako=l(),Nb=a("li"),ipe=a("strong"),yko=o("wav2vec2"),Lko=o(" \u2014 "),IV=a("a"),xko=o("Wav2Vec2Model"),$ko=o(" (Wav2Vec2 model)"),kko=l(),qb=a("li"),dpe=a("strong"),Sko=o("wav2vec2-conformer"),Rko=o(" \u2014 "),NV=a("a"),Pko=o("Wav2Vec2ConformerModel"),Bko=o(" (Wav2Vec2-Conformer model)"),Iko=l(),jb=a("li"),cpe=a("strong"),Nko=o("wavlm"),qko=o(" \u2014 "),qV=a("a"),jko=o("WavLMModel"),Dko=o(" (WavLM model)"),Gko=l(),Db=a("li"),mpe=a("strong"),Oko=o("xglm"),Vko=o(" \u2014 "),jV=a("a"),Xko=o("XGLMModel"),zko=o(" (XGLM model)"),Qko=l(),Gb=a("li"),fpe=a("strong"),Wko=o("xlm"),Uko=o(" \u2014 "),DV=a("a"),Hko=o("XLMModel"),Jko=o(" (XLM model)"),Yko=l(),Ob=a("li"),gpe=a("strong"),Kko=o("xlm-prophetnet"),Zko=o(" \u2014 "),GV=a("a"),eSo=o("XLMProphetNetModel"),oSo=o(" (XLM-ProphetNet model)"),rSo=l(),Vb=a("li"),hpe=a("strong"),tSo=o("xlm-roberta"),aSo=o(" \u2014 "),OV=a("a"),nSo=o("XLMRobertaModel"),sSo=o(" (XLM-RoBERTa model)"),lSo=l(),Xb=a("li"),upe=a("strong"),iSo=o("xlm-roberta-xl"),dSo=o(" \u2014 "),VV=a("a"),cSo=o("XLMRobertaXLModel"),mSo=o(" (XLM-RoBERTa-XL model)"),fSo=l(),zb=a("li"),ppe=a("strong"),gSo=o("xlnet"),hSo=o(" \u2014 "),XV=a("a"),uSo=o("XLNetModel"),pSo=o(" (XLNet model)"),_So=l(),Qb=a("li"),_pe=a("strong"),bSo=o("yolos"),vSo=o(" \u2014 "),zV=a("a"),FSo=o("YolosModel"),TSo=o(" (YOLOS model)"),MSo=l(),Wb=a("li"),bpe=a("strong"),ESo=o("yoso"),CSo=o(" \u2014 "),QV=a("a"),wSo=o("YosoModel"),ASo=o(" (YOSO model)"),ySo=l(),Ub=a("p"),LSo=o("The model is set in evaluation mode by default using "),vpe=a("code"),xSo=o("model.eval()"),$So=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=a("code"),kSo=o("model.train()"),SSo=l(),F(Hb.$$.fragment),PJe=l(),_d=a("h2"),Jb=a("a"),Tpe=a("span"),F(q9.$$.fragment),RSo=l(),Mpe=a("span"),PSo=o("AutoModelForPreTraining"),BJe=l(),Po=a("div"),F(j9.$$.fragment),BSo=l(),bd=a("p"),ISo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WV=a("a"),NSo=o("from_pretrained()"),qSo=o(" class method or the "),UV=a("a"),jSo=o("from_config()"),DSo=o(` class
method.`),GSo=l(),D9=a("p"),OSo=o("This class cannot be instantiated directly using "),Epe=a("code"),VSo=o("__init__()"),XSo=o(" (throws an error)."),zSo=l(),_t=a("div"),F(G9.$$.fragment),QSo=l(),Cpe=a("p"),WSo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),USo=l(),vd=a("p"),HSo=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),JSo=o("not"),YSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),KSo=o("from_pretrained()"),ZSo=o(" to load the model weights."),eRo=l(),F(Yb.$$.fragment),oRo=l(),Ze=a("div"),F(O9.$$.fragment),rRo=l(),Ape=a("p"),tRo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aRo=l(),Ya=a("p"),nRo=o("The model class to instantiate is selected based on the "),ype=a("code"),sRo=o("model_type"),lRo=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),iRo=o("pretrained_model_name_or_path"),dRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=a("code"),cRo=o("pretrained_model_name_or_path"),mRo=o(":"),fRo=l(),G=a("ul"),Kb=a("li"),$pe=a("strong"),gRo=o("albert"),hRo=o(" \u2014 "),JV=a("a"),uRo=o("AlbertForPreTraining"),pRo=o(" (ALBERT model)"),_Ro=l(),Zb=a("li"),kpe=a("strong"),bRo=o("bart"),vRo=o(" \u2014 "),YV=a("a"),FRo=o("BartForConditionalGeneration"),TRo=o(" (BART model)"),MRo=l(),e2=a("li"),Spe=a("strong"),ERo=o("bert"),CRo=o(" \u2014 "),KV=a("a"),wRo=o("BertForPreTraining"),ARo=o(" (BERT model)"),yRo=l(),o2=a("li"),Rpe=a("strong"),LRo=o("big_bird"),xRo=o(" \u2014 "),ZV=a("a"),$Ro=o("BigBirdForPreTraining"),kRo=o(" (BigBird model)"),SRo=l(),r2=a("li"),Ppe=a("strong"),RRo=o("bloom"),PRo=o(" \u2014 "),eX=a("a"),BRo=o("BloomForCausalLM"),IRo=o(" (BLOOM model)"),NRo=l(),t2=a("li"),Bpe=a("strong"),qRo=o("camembert"),jRo=o(" \u2014 "),oX=a("a"),DRo=o("CamembertForMaskedLM"),GRo=o(" (CamemBERT model)"),ORo=l(),a2=a("li"),Ipe=a("strong"),VRo=o("ctrl"),XRo=o(" \u2014 "),rX=a("a"),zRo=o("CTRLLMHeadModel"),QRo=o(" (CTRL model)"),WRo=l(),n2=a("li"),Npe=a("strong"),URo=o("data2vec-text"),HRo=o(" \u2014 "),tX=a("a"),JRo=o("Data2VecTextForMaskedLM"),YRo=o(" (Data2VecText model)"),KRo=l(),s2=a("li"),qpe=a("strong"),ZRo=o("deberta"),ePo=o(" \u2014 "),aX=a("a"),oPo=o("DebertaForMaskedLM"),rPo=o(" (DeBERTa model)"),tPo=l(),l2=a("li"),jpe=a("strong"),aPo=o("deberta-v2"),nPo=o(" \u2014 "),nX=a("a"),sPo=o("DebertaV2ForMaskedLM"),lPo=o(" (DeBERTa-v2 model)"),iPo=l(),i2=a("li"),Dpe=a("strong"),dPo=o("distilbert"),cPo=o(" \u2014 "),sX=a("a"),mPo=o("DistilBertForMaskedLM"),fPo=o(" (DistilBERT model)"),gPo=l(),d2=a("li"),Gpe=a("strong"),hPo=o("electra"),uPo=o(" \u2014 "),lX=a("a"),pPo=o("ElectraForPreTraining"),_Po=o(" (ELECTRA model)"),bPo=l(),c2=a("li"),Ope=a("strong"),vPo=o("flaubert"),FPo=o(" \u2014 "),iX=a("a"),TPo=o("FlaubertWithLMHeadModel"),MPo=o(" (FlauBERT model)"),EPo=l(),m2=a("li"),Vpe=a("strong"),CPo=o("flava"),wPo=o(" \u2014 "),dX=a("a"),APo=o("FlavaForPreTraining"),yPo=o(" (FLAVA model)"),LPo=l(),f2=a("li"),Xpe=a("strong"),xPo=o("fnet"),$Po=o(" \u2014 "),cX=a("a"),kPo=o("FNetForPreTraining"),SPo=o(" (FNet model)"),RPo=l(),g2=a("li"),zpe=a("strong"),PPo=o("fsmt"),BPo=o(" \u2014 "),mX=a("a"),IPo=o("FSMTForConditionalGeneration"),NPo=o(" (FairSeq Machine-Translation model)"),qPo=l(),h2=a("li"),Qpe=a("strong"),jPo=o("funnel"),DPo=o(" \u2014 "),fX=a("a"),GPo=o("FunnelForPreTraining"),OPo=o(" (Funnel Transformer model)"),VPo=l(),u2=a("li"),Wpe=a("strong"),XPo=o("gpt2"),zPo=o(" \u2014 "),gX=a("a"),QPo=o("GPT2LMHeadModel"),WPo=o(" (OpenAI GPT-2 model)"),UPo=l(),p2=a("li"),Upe=a("strong"),HPo=o("ibert"),JPo=o(" \u2014 "),hX=a("a"),YPo=o("IBertForMaskedLM"),KPo=o(" (I-BERT model)"),ZPo=l(),_2=a("li"),Hpe=a("strong"),eBo=o("layoutlm"),oBo=o(" \u2014 "),uX=a("a"),rBo=o("LayoutLMForMaskedLM"),tBo=o(" (LayoutLM model)"),aBo=l(),b2=a("li"),Jpe=a("strong"),nBo=o("longformer"),sBo=o(" \u2014 "),pX=a("a"),lBo=o("LongformerForMaskedLM"),iBo=o(" (Longformer model)"),dBo=l(),v2=a("li"),Ype=a("strong"),cBo=o("luke"),mBo=o(" \u2014 "),_X=a("a"),fBo=o("LukeForMaskedLM"),gBo=o(" (LUKE model)"),hBo=l(),F2=a("li"),Kpe=a("strong"),uBo=o("lxmert"),pBo=o(" \u2014 "),bX=a("a"),_Bo=o("LxmertForPreTraining"),bBo=o(" (LXMERT model)"),vBo=l(),T2=a("li"),Zpe=a("strong"),FBo=o("megatron-bert"),TBo=o(" \u2014 "),vX=a("a"),MBo=o("MegatronBertForPreTraining"),EBo=o(" (Megatron-BERT model)"),CBo=l(),M2=a("li"),e_e=a("strong"),wBo=o("mobilebert"),ABo=o(" \u2014 "),FX=a("a"),yBo=o("MobileBertForPreTraining"),LBo=o(" (MobileBERT model)"),xBo=l(),E2=a("li"),o_e=a("strong"),$Bo=o("mpnet"),kBo=o(" \u2014 "),TX=a("a"),SBo=o("MPNetForMaskedLM"),RBo=o(" (MPNet model)"),PBo=l(),C2=a("li"),r_e=a("strong"),BBo=o("mvp"),IBo=o(" \u2014 "),MX=a("a"),NBo=o("MvpForConditionalGeneration"),qBo=o(" (MVP model)"),jBo=l(),w2=a("li"),t_e=a("strong"),DBo=o("nezha"),GBo=o(" \u2014 "),EX=a("a"),OBo=o("NezhaForPreTraining"),VBo=o(" (Nezha model)"),XBo=l(),A2=a("li"),a_e=a("strong"),zBo=o("openai-gpt"),QBo=o(" \u2014 "),CX=a("a"),WBo=o("OpenAIGPTLMHeadModel"),UBo=o(" (OpenAI GPT model)"),HBo=l(),y2=a("li"),n_e=a("strong"),JBo=o("retribert"),YBo=o(" \u2014 "),wX=a("a"),KBo=o("RetriBertModel"),ZBo=o(" (RetriBERT model)"),eIo=l(),L2=a("li"),s_e=a("strong"),oIo=o("roberta"),rIo=o(" \u2014 "),AX=a("a"),tIo=o("RobertaForMaskedLM"),aIo=o(" (RoBERTa model)"),nIo=l(),x2=a("li"),l_e=a("strong"),sIo=o("splinter"),lIo=o(" \u2014 "),yX=a("a"),iIo=o("SplinterForPreTraining"),dIo=o(" (Splinter model)"),cIo=l(),$2=a("li"),i_e=a("strong"),mIo=o("squeezebert"),fIo=o(" \u2014 "),LX=a("a"),gIo=o("SqueezeBertForMaskedLM"),hIo=o(" (SqueezeBERT model)"),uIo=l(),k2=a("li"),d_e=a("strong"),pIo=o("t5"),_Io=o(" \u2014 "),xX=a("a"),bIo=o("T5ForConditionalGeneration"),vIo=o(" (T5 model)"),FIo=l(),S2=a("li"),c_e=a("strong"),TIo=o("tapas"),MIo=o(" \u2014 "),$X=a("a"),EIo=o("TapasForMaskedLM"),CIo=o(" (TAPAS model)"),wIo=l(),R2=a("li"),m_e=a("strong"),AIo=o("transfo-xl"),yIo=o(" \u2014 "),kX=a("a"),LIo=o("TransfoXLLMHeadModel"),xIo=o(" (Transformer-XL model)"),$Io=l(),P2=a("li"),f_e=a("strong"),kIo=o("unispeech"),SIo=o(" \u2014 "),SX=a("a"),RIo=o("UniSpeechForPreTraining"),PIo=o(" (UniSpeech model)"),BIo=l(),B2=a("li"),g_e=a("strong"),IIo=o("unispeech-sat"),NIo=o(" \u2014 "),RX=a("a"),qIo=o("UniSpeechSatForPreTraining"),jIo=o(" (UniSpeechSat model)"),DIo=l(),I2=a("li"),h_e=a("strong"),GIo=o("videomae"),OIo=o(" \u2014 "),PX=a("a"),VIo=o("VideoMAEForPreTraining"),XIo=o(" (VideoMAE model)"),zIo=l(),N2=a("li"),u_e=a("strong"),QIo=o("visual_bert"),WIo=o(" \u2014 "),BX=a("a"),UIo=o("VisualBertForPreTraining"),HIo=o(" (VisualBERT model)"),JIo=l(),q2=a("li"),p_e=a("strong"),YIo=o("vit_mae"),KIo=o(" \u2014 "),IX=a("a"),ZIo=o("ViTMAEForPreTraining"),eNo=o(" (ViTMAE model)"),oNo=l(),j2=a("li"),__e=a("strong"),rNo=o("wav2vec2"),tNo=o(" \u2014 "),NX=a("a"),aNo=o("Wav2Vec2ForPreTraining"),nNo=o(" (Wav2Vec2 model)"),sNo=l(),D2=a("li"),b_e=a("strong"),lNo=o("wav2vec2-conformer"),iNo=o(" \u2014 "),qX=a("a"),dNo=o("Wav2Vec2ConformerForPreTraining"),cNo=o(" (Wav2Vec2-Conformer model)"),mNo=l(),G2=a("li"),v_e=a("strong"),fNo=o("xlm"),gNo=o(" \u2014 "),jX=a("a"),hNo=o("XLMWithLMHeadModel"),uNo=o(" (XLM model)"),pNo=l(),O2=a("li"),F_e=a("strong"),_No=o("xlm-roberta"),bNo=o(" \u2014 "),DX=a("a"),vNo=o("XLMRobertaForMaskedLM"),FNo=o(" (XLM-RoBERTa model)"),TNo=l(),V2=a("li"),T_e=a("strong"),MNo=o("xlm-roberta-xl"),ENo=o(" \u2014 "),GX=a("a"),CNo=o("XLMRobertaXLForMaskedLM"),wNo=o(" (XLM-RoBERTa-XL model)"),ANo=l(),X2=a("li"),M_e=a("strong"),yNo=o("xlnet"),LNo=o(" \u2014 "),OX=a("a"),xNo=o("XLNetLMHeadModel"),$No=o(" (XLNet model)"),kNo=l(),z2=a("p"),SNo=o("The model is set in evaluation mode by default using "),E_e=a("code"),RNo=o("model.eval()"),PNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=a("code"),BNo=o("model.train()"),INo=l(),F(Q2.$$.fragment),IJe=l(),Fd=a("h2"),W2=a("a"),w_e=a("span"),F(V9.$$.fragment),NNo=l(),A_e=a("span"),qNo=o("AutoModelForCausalLM"),NJe=l(),Bo=a("div"),F(X9.$$.fragment),jNo=l(),Td=a("p"),DNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VX=a("a"),GNo=o("from_pretrained()"),ONo=o(" class method or the "),XX=a("a"),VNo=o("from_config()"),XNo=o(` class
method.`),zNo=l(),z9=a("p"),QNo=o("This class cannot be instantiated directly using "),y_e=a("code"),WNo=o("__init__()"),UNo=o(" (throws an error)."),HNo=l(),bt=a("div"),F(Q9.$$.fragment),JNo=l(),L_e=a("p"),YNo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KNo=l(),Md=a("p"),ZNo=o(`Note:
Loading a model from its configuration file does `),x_e=a("strong"),eqo=o("not"),oqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),rqo=o("from_pretrained()"),tqo=o(" to load the model weights."),aqo=l(),F(U2.$$.fragment),nqo=l(),eo=a("div"),F(W9.$$.fragment),sqo=l(),$_e=a("p"),lqo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iqo=l(),Ka=a("p"),dqo=o("The model class to instantiate is selected based on the "),k_e=a("code"),cqo=o("model_type"),mqo=o(` property of the config object (either
passed as an argument or loaded from `),S_e=a("code"),fqo=o("pretrained_model_name_or_path"),gqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=a("code"),hqo=o("pretrained_model_name_or_path"),uqo=o(":"),pqo=l(),z=a("ul"),H2=a("li"),P_e=a("strong"),_qo=o("bart"),bqo=o(" \u2014 "),QX=a("a"),vqo=o("BartForCausalLM"),Fqo=o(" (BART model)"),Tqo=l(),J2=a("li"),B_e=a("strong"),Mqo=o("bert"),Eqo=o(" \u2014 "),WX=a("a"),Cqo=o("BertLMHeadModel"),wqo=o(" (BERT model)"),Aqo=l(),Y2=a("li"),I_e=a("strong"),yqo=o("bert-generation"),Lqo=o(" \u2014 "),UX=a("a"),xqo=o("BertGenerationDecoder"),$qo=o(" (Bert Generation model)"),kqo=l(),K2=a("li"),N_e=a("strong"),Sqo=o("big_bird"),Rqo=o(" \u2014 "),HX=a("a"),Pqo=o("BigBirdForCausalLM"),Bqo=o(" (BigBird model)"),Iqo=l(),Z2=a("li"),q_e=a("strong"),Nqo=o("bigbird_pegasus"),qqo=o(" \u2014 "),JX=a("a"),jqo=o("BigBirdPegasusForCausalLM"),Dqo=o(" (BigBird-Pegasus model)"),Gqo=l(),ev=a("li"),j_e=a("strong"),Oqo=o("blenderbot"),Vqo=o(" \u2014 "),YX=a("a"),Xqo=o("BlenderbotForCausalLM"),zqo=o(" (Blenderbot model)"),Qqo=l(),ov=a("li"),D_e=a("strong"),Wqo=o("blenderbot-small"),Uqo=o(" \u2014 "),KX=a("a"),Hqo=o("BlenderbotSmallForCausalLM"),Jqo=o(" (BlenderbotSmall model)"),Yqo=l(),rv=a("li"),G_e=a("strong"),Kqo=o("bloom"),Zqo=o(" \u2014 "),ZX=a("a"),ejo=o("BloomForCausalLM"),ojo=o(" (BLOOM model)"),rjo=l(),tv=a("li"),O_e=a("strong"),tjo=o("camembert"),ajo=o(" \u2014 "),ez=a("a"),njo=o("CamembertForCausalLM"),sjo=o(" (CamemBERT model)"),ljo=l(),av=a("li"),V_e=a("strong"),ijo=o("codegen"),djo=o(" \u2014 "),oz=a("a"),cjo=o("CodeGenForCausalLM"),mjo=o(" (CodeGen model)"),fjo=l(),nv=a("li"),X_e=a("strong"),gjo=o("ctrl"),hjo=o(" \u2014 "),rz=a("a"),ujo=o("CTRLLMHeadModel"),pjo=o(" (CTRL model)"),_jo=l(),sv=a("li"),z_e=a("strong"),bjo=o("data2vec-text"),vjo=o(" \u2014 "),tz=a("a"),Fjo=o("Data2VecTextForCausalLM"),Tjo=o(" (Data2VecText model)"),Mjo=l(),lv=a("li"),Q_e=a("strong"),Ejo=o("electra"),Cjo=o(" \u2014 "),az=a("a"),wjo=o("ElectraForCausalLM"),Ajo=o(" (ELECTRA model)"),yjo=l(),iv=a("li"),W_e=a("strong"),Ljo=o("gpt2"),xjo=o(" \u2014 "),nz=a("a"),$jo=o("GPT2LMHeadModel"),kjo=o(" (OpenAI GPT-2 model)"),Sjo=l(),dv=a("li"),U_e=a("strong"),Rjo=o("gpt_neo"),Pjo=o(" \u2014 "),sz=a("a"),Bjo=o("GPTNeoForCausalLM"),Ijo=o(" (GPT Neo model)"),Njo=l(),cv=a("li"),H_e=a("strong"),qjo=o("gpt_neox"),jjo=o(" \u2014 "),lz=a("a"),Djo=o("GPTNeoXForCausalLM"),Gjo=o(" (GPT NeoX model)"),Ojo=l(),mv=a("li"),J_e=a("strong"),Vjo=o("gptj"),Xjo=o(" \u2014 "),iz=a("a"),zjo=o("GPTJForCausalLM"),Qjo=o(" (GPT-J model)"),Wjo=l(),fv=a("li"),Y_e=a("strong"),Ujo=o("marian"),Hjo=o(" \u2014 "),dz=a("a"),Jjo=o("MarianForCausalLM"),Yjo=o(" (Marian model)"),Kjo=l(),gv=a("li"),K_e=a("strong"),Zjo=o("mbart"),eDo=o(" \u2014 "),cz=a("a"),oDo=o("MBartForCausalLM"),rDo=o(" (mBART model)"),tDo=l(),hv=a("li"),Z_e=a("strong"),aDo=o("megatron-bert"),nDo=o(" \u2014 "),mz=a("a"),sDo=o("MegatronBertForCausalLM"),lDo=o(" (Megatron-BERT model)"),iDo=l(),uv=a("li"),ebe=a("strong"),dDo=o("mvp"),cDo=o(" \u2014 "),fz=a("a"),mDo=o("MvpForCausalLM"),fDo=o(" (MVP model)"),gDo=l(),pv=a("li"),obe=a("strong"),hDo=o("openai-gpt"),uDo=o(" \u2014 "),gz=a("a"),pDo=o("OpenAIGPTLMHeadModel"),_Do=o(" (OpenAI GPT model)"),bDo=l(),_v=a("li"),rbe=a("strong"),vDo=o("opt"),FDo=o(" \u2014 "),hz=a("a"),TDo=o("OPTForCausalLM"),MDo=o(" (OPT model)"),EDo=l(),bv=a("li"),tbe=a("strong"),CDo=o("pegasus"),wDo=o(" \u2014 "),uz=a("a"),ADo=o("PegasusForCausalLM"),yDo=o(" (Pegasus model)"),LDo=l(),vv=a("li"),abe=a("strong"),xDo=o("plbart"),$Do=o(" \u2014 "),pz=a("a"),kDo=o("PLBartForCausalLM"),SDo=o(" (PLBart model)"),RDo=l(),Fv=a("li"),nbe=a("strong"),PDo=o("prophetnet"),BDo=o(" \u2014 "),_z=a("a"),IDo=o("ProphetNetForCausalLM"),NDo=o(" (ProphetNet model)"),qDo=l(),Tv=a("li"),sbe=a("strong"),jDo=o("qdqbert"),DDo=o(" \u2014 "),bz=a("a"),GDo=o("QDQBertLMHeadModel"),ODo=o(" (QDQBert model)"),VDo=l(),Mv=a("li"),lbe=a("strong"),XDo=o("reformer"),zDo=o(" \u2014 "),vz=a("a"),QDo=o("ReformerModelWithLMHead"),WDo=o(" (Reformer model)"),UDo=l(),Ev=a("li"),ibe=a("strong"),HDo=o("rembert"),JDo=o(" \u2014 "),Fz=a("a"),YDo=o("RemBertForCausalLM"),KDo=o(" (RemBERT model)"),ZDo=l(),Cv=a("li"),dbe=a("strong"),eGo=o("roberta"),oGo=o(" \u2014 "),Tz=a("a"),rGo=o("RobertaForCausalLM"),tGo=o(" (RoBERTa model)"),aGo=l(),wv=a("li"),cbe=a("strong"),nGo=o("roformer"),sGo=o(" \u2014 "),Mz=a("a"),lGo=o("RoFormerForCausalLM"),iGo=o(" (RoFormer model)"),dGo=l(),Av=a("li"),mbe=a("strong"),cGo=o("speech_to_text_2"),mGo=o(" \u2014 "),Ez=a("a"),fGo=o("Speech2Text2ForCausalLM"),gGo=o(" (Speech2Text2 model)"),hGo=l(),yv=a("li"),fbe=a("strong"),uGo=o("transfo-xl"),pGo=o(" \u2014 "),Cz=a("a"),_Go=o("TransfoXLLMHeadModel"),bGo=o(" (Transformer-XL model)"),vGo=l(),Lv=a("li"),gbe=a("strong"),FGo=o("trocr"),TGo=o(" \u2014 "),wz=a("a"),MGo=o("TrOCRForCausalLM"),EGo=o(" (TrOCR model)"),CGo=l(),xv=a("li"),hbe=a("strong"),wGo=o("xglm"),AGo=o(" \u2014 "),Az=a("a"),yGo=o("XGLMForCausalLM"),LGo=o(" (XGLM model)"),xGo=l(),$v=a("li"),ube=a("strong"),$Go=o("xlm"),kGo=o(" \u2014 "),yz=a("a"),SGo=o("XLMWithLMHeadModel"),RGo=o(" (XLM model)"),PGo=l(),kv=a("li"),pbe=a("strong"),BGo=o("xlm-prophetnet"),IGo=o(" \u2014 "),Lz=a("a"),NGo=o("XLMProphetNetForCausalLM"),qGo=o(" (XLM-ProphetNet model)"),jGo=l(),Sv=a("li"),_be=a("strong"),DGo=o("xlm-roberta"),GGo=o(" \u2014 "),xz=a("a"),OGo=o("XLMRobertaForCausalLM"),VGo=o(" (XLM-RoBERTa model)"),XGo=l(),Rv=a("li"),bbe=a("strong"),zGo=o("xlm-roberta-xl"),QGo=o(" \u2014 "),$z=a("a"),WGo=o("XLMRobertaXLForCausalLM"),UGo=o(" (XLM-RoBERTa-XL model)"),HGo=l(),Pv=a("li"),vbe=a("strong"),JGo=o("xlnet"),YGo=o(" \u2014 "),kz=a("a"),KGo=o("XLNetLMHeadModel"),ZGo=o(" (XLNet model)"),eOo=l(),Bv=a("p"),oOo=o("The model is set in evaluation mode by default using "),Fbe=a("code"),rOo=o("model.eval()"),tOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tbe=a("code"),aOo=o("model.train()"),nOo=l(),F(Iv.$$.fragment),qJe=l(),Ed=a("h2"),Nv=a("a"),Mbe=a("span"),F(U9.$$.fragment),sOo=l(),Ebe=a("span"),lOo=o("AutoModelForMaskedLM"),jJe=l(),Io=a("div"),F(H9.$$.fragment),iOo=l(),Cd=a("p"),dOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Sz=a("a"),cOo=o("from_pretrained()"),mOo=o(" class method or the "),Rz=a("a"),fOo=o("from_config()"),gOo=o(` class
method.`),hOo=l(),J9=a("p"),uOo=o("This class cannot be instantiated directly using "),Cbe=a("code"),pOo=o("__init__()"),_Oo=o(" (throws an error)."),bOo=l(),vt=a("div"),F(Y9.$$.fragment),vOo=l(),wbe=a("p"),FOo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),TOo=l(),wd=a("p"),MOo=o(`Note:
Loading a model from its configuration file does `),Abe=a("strong"),EOo=o("not"),COo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),wOo=o("from_pretrained()"),AOo=o(" to load the model weights."),yOo=l(),F(qv.$$.fragment),LOo=l(),oo=a("div"),F(K9.$$.fragment),xOo=l(),ybe=a("p"),$Oo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kOo=l(),Za=a("p"),SOo=o("The model class to instantiate is selected based on the "),Lbe=a("code"),ROo=o("model_type"),POo=o(` property of the config object (either
passed as an argument or loaded from `),xbe=a("code"),BOo=o("pretrained_model_name_or_path"),IOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=a("code"),NOo=o("pretrained_model_name_or_path"),qOo=o(":"),jOo=l(),U=a("ul"),jv=a("li"),kbe=a("strong"),DOo=o("albert"),GOo=o(" \u2014 "),Bz=a("a"),OOo=o("AlbertForMaskedLM"),VOo=o(" (ALBERT model)"),XOo=l(),Dv=a("li"),Sbe=a("strong"),zOo=o("bart"),QOo=o(" \u2014 "),Iz=a("a"),WOo=o("BartForConditionalGeneration"),UOo=o(" (BART model)"),HOo=l(),Gv=a("li"),Rbe=a("strong"),JOo=o("bert"),YOo=o(" \u2014 "),Nz=a("a"),KOo=o("BertForMaskedLM"),ZOo=o(" (BERT model)"),eVo=l(),Ov=a("li"),Pbe=a("strong"),oVo=o("big_bird"),rVo=o(" \u2014 "),qz=a("a"),tVo=o("BigBirdForMaskedLM"),aVo=o(" (BigBird model)"),nVo=l(),Vv=a("li"),Bbe=a("strong"),sVo=o("camembert"),lVo=o(" \u2014 "),jz=a("a"),iVo=o("CamembertForMaskedLM"),dVo=o(" (CamemBERT model)"),cVo=l(),Xv=a("li"),Ibe=a("strong"),mVo=o("convbert"),fVo=o(" \u2014 "),Dz=a("a"),gVo=o("ConvBertForMaskedLM"),hVo=o(" (ConvBERT model)"),uVo=l(),zv=a("li"),Nbe=a("strong"),pVo=o("data2vec-text"),_Vo=o(" \u2014 "),Gz=a("a"),bVo=o("Data2VecTextForMaskedLM"),vVo=o(" (Data2VecText model)"),FVo=l(),Qv=a("li"),qbe=a("strong"),TVo=o("deberta"),MVo=o(" \u2014 "),Oz=a("a"),EVo=o("DebertaForMaskedLM"),CVo=o(" (DeBERTa model)"),wVo=l(),Wv=a("li"),jbe=a("strong"),AVo=o("deberta-v2"),yVo=o(" \u2014 "),Vz=a("a"),LVo=o("DebertaV2ForMaskedLM"),xVo=o(" (DeBERTa-v2 model)"),$Vo=l(),Uv=a("li"),Dbe=a("strong"),kVo=o("distilbert"),SVo=o(" \u2014 "),Xz=a("a"),RVo=o("DistilBertForMaskedLM"),PVo=o(" (DistilBERT model)"),BVo=l(),Hv=a("li"),Gbe=a("strong"),IVo=o("electra"),NVo=o(" \u2014 "),zz=a("a"),qVo=o("ElectraForMaskedLM"),jVo=o(" (ELECTRA model)"),DVo=l(),Jv=a("li"),Obe=a("strong"),GVo=o("flaubert"),OVo=o(" \u2014 "),Qz=a("a"),VVo=o("FlaubertWithLMHeadModel"),XVo=o(" (FlauBERT model)"),zVo=l(),Yv=a("li"),Vbe=a("strong"),QVo=o("fnet"),WVo=o(" \u2014 "),Wz=a("a"),UVo=o("FNetForMaskedLM"),HVo=o(" (FNet model)"),JVo=l(),Kv=a("li"),Xbe=a("strong"),YVo=o("funnel"),KVo=o(" \u2014 "),Uz=a("a"),ZVo=o("FunnelForMaskedLM"),eXo=o(" (Funnel Transformer model)"),oXo=l(),Zv=a("li"),zbe=a("strong"),rXo=o("ibert"),tXo=o(" \u2014 "),Hz=a("a"),aXo=o("IBertForMaskedLM"),nXo=o(" (I-BERT model)"),sXo=l(),e1=a("li"),Qbe=a("strong"),lXo=o("layoutlm"),iXo=o(" \u2014 "),Jz=a("a"),dXo=o("LayoutLMForMaskedLM"),cXo=o(" (LayoutLM model)"),mXo=l(),o1=a("li"),Wbe=a("strong"),fXo=o("longformer"),gXo=o(" \u2014 "),Yz=a("a"),hXo=o("LongformerForMaskedLM"),uXo=o(" (Longformer model)"),pXo=l(),r1=a("li"),Ube=a("strong"),_Xo=o("luke"),bXo=o(" \u2014 "),Kz=a("a"),vXo=o("LukeForMaskedLM"),FXo=o(" (LUKE model)"),TXo=l(),t1=a("li"),Hbe=a("strong"),MXo=o("mbart"),EXo=o(" \u2014 "),Zz=a("a"),CXo=o("MBartForConditionalGeneration"),wXo=o(" (mBART model)"),AXo=l(),a1=a("li"),Jbe=a("strong"),yXo=o("megatron-bert"),LXo=o(" \u2014 "),eQ=a("a"),xXo=o("MegatronBertForMaskedLM"),$Xo=o(" (Megatron-BERT model)"),kXo=l(),n1=a("li"),Ybe=a("strong"),SXo=o("mobilebert"),RXo=o(" \u2014 "),oQ=a("a"),PXo=o("MobileBertForMaskedLM"),BXo=o(" (MobileBERT model)"),IXo=l(),s1=a("li"),Kbe=a("strong"),NXo=o("mpnet"),qXo=o(" \u2014 "),rQ=a("a"),jXo=o("MPNetForMaskedLM"),DXo=o(" (MPNet model)"),GXo=l(),l1=a("li"),Zbe=a("strong"),OXo=o("mvp"),VXo=o(" \u2014 "),tQ=a("a"),XXo=o("MvpForConditionalGeneration"),zXo=o(" (MVP model)"),QXo=l(),i1=a("li"),e2e=a("strong"),WXo=o("nezha"),UXo=o(" \u2014 "),aQ=a("a"),HXo=o("NezhaForMaskedLM"),JXo=o(" (Nezha model)"),YXo=l(),d1=a("li"),o2e=a("strong"),KXo=o("nystromformer"),ZXo=o(" \u2014 "),nQ=a("a"),ezo=o("NystromformerForMaskedLM"),ozo=o(" (Nystr\xF6mformer model)"),rzo=l(),c1=a("li"),r2e=a("strong"),tzo=o("perceiver"),azo=o(" \u2014 "),sQ=a("a"),nzo=o("PerceiverForMaskedLM"),szo=o(" (Perceiver model)"),lzo=l(),m1=a("li"),t2e=a("strong"),izo=o("qdqbert"),dzo=o(" \u2014 "),lQ=a("a"),czo=o("QDQBertForMaskedLM"),mzo=o(" (QDQBert model)"),fzo=l(),f1=a("li"),a2e=a("strong"),gzo=o("reformer"),hzo=o(" \u2014 "),iQ=a("a"),uzo=o("ReformerForMaskedLM"),pzo=o(" (Reformer model)"),_zo=l(),g1=a("li"),n2e=a("strong"),bzo=o("rembert"),vzo=o(" \u2014 "),dQ=a("a"),Fzo=o("RemBertForMaskedLM"),Tzo=o(" (RemBERT model)"),Mzo=l(),h1=a("li"),s2e=a("strong"),Ezo=o("roberta"),Czo=o(" \u2014 "),cQ=a("a"),wzo=o("RobertaForMaskedLM"),Azo=o(" (RoBERTa model)"),yzo=l(),u1=a("li"),l2e=a("strong"),Lzo=o("roformer"),xzo=o(" \u2014 "),mQ=a("a"),$zo=o("RoFormerForMaskedLM"),kzo=o(" (RoFormer model)"),Szo=l(),p1=a("li"),i2e=a("strong"),Rzo=o("squeezebert"),Pzo=o(" \u2014 "),fQ=a("a"),Bzo=o("SqueezeBertForMaskedLM"),Izo=o(" (SqueezeBERT model)"),Nzo=l(),_1=a("li"),d2e=a("strong"),qzo=o("tapas"),jzo=o(" \u2014 "),gQ=a("a"),Dzo=o("TapasForMaskedLM"),Gzo=o(" (TAPAS model)"),Ozo=l(),b1=a("li"),c2e=a("strong"),Vzo=o("wav2vec2"),Xzo=o(" \u2014 "),m2e=a("code"),zzo=o("Wav2Vec2ForMaskedLM"),Qzo=o(" (Wav2Vec2 model)"),Wzo=l(),v1=a("li"),f2e=a("strong"),Uzo=o("xlm"),Hzo=o(" \u2014 "),hQ=a("a"),Jzo=o("XLMWithLMHeadModel"),Yzo=o(" (XLM model)"),Kzo=l(),F1=a("li"),g2e=a("strong"),Zzo=o("xlm-roberta"),eQo=o(" \u2014 "),uQ=a("a"),oQo=o("XLMRobertaForMaskedLM"),rQo=o(" (XLM-RoBERTa model)"),tQo=l(),T1=a("li"),h2e=a("strong"),aQo=o("xlm-roberta-xl"),nQo=o(" \u2014 "),pQ=a("a"),sQo=o("XLMRobertaXLForMaskedLM"),lQo=o(" (XLM-RoBERTa-XL model)"),iQo=l(),M1=a("li"),u2e=a("strong"),dQo=o("yoso"),cQo=o(" \u2014 "),_Q=a("a"),mQo=o("YosoForMaskedLM"),fQo=o(" (YOSO model)"),gQo=l(),E1=a("p"),hQo=o("The model is set in evaluation mode by default using "),p2e=a("code"),uQo=o("model.eval()"),pQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=a("code"),_Qo=o("model.train()"),bQo=l(),F(C1.$$.fragment),DJe=l(),Ad=a("h2"),w1=a("a"),b2e=a("span"),F(Z9.$$.fragment),vQo=l(),v2e=a("span"),FQo=o("AutoModelForSeq2SeqLM"),GJe=l(),No=a("div"),F(ex.$$.fragment),TQo=l(),yd=a("p"),MQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bQ=a("a"),EQo=o("from_pretrained()"),CQo=o(" class method or the "),vQ=a("a"),wQo=o("from_config()"),AQo=o(` class
method.`),yQo=l(),ox=a("p"),LQo=o("This class cannot be instantiated directly using "),F2e=a("code"),xQo=o("__init__()"),$Qo=o(" (throws an error)."),kQo=l(),Ft=a("div"),F(rx.$$.fragment),SQo=l(),T2e=a("p"),RQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),PQo=l(),Ld=a("p"),BQo=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),IQo=o("not"),NQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),qQo=o("from_pretrained()"),jQo=o(" to load the model weights."),DQo=l(),F(A1.$$.fragment),GQo=l(),ro=a("div"),F(tx.$$.fragment),OQo=l(),E2e=a("p"),VQo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XQo=l(),en=a("p"),zQo=o("The model class to instantiate is selected based on the "),C2e=a("code"),QQo=o("model_type"),WQo=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),UQo=o("pretrained_model_name_or_path"),HQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),JQo=o("pretrained_model_name_or_path"),YQo=o(":"),KQo=l(),me=a("ul"),y1=a("li"),y2e=a("strong"),ZQo=o("bart"),eWo=o(" \u2014 "),TQ=a("a"),oWo=o("BartForConditionalGeneration"),rWo=o(" (BART model)"),tWo=l(),L1=a("li"),L2e=a("strong"),aWo=o("bigbird_pegasus"),nWo=o(" \u2014 "),MQ=a("a"),sWo=o("BigBirdPegasusForConditionalGeneration"),lWo=o(" (BigBird-Pegasus model)"),iWo=l(),x1=a("li"),x2e=a("strong"),dWo=o("blenderbot"),cWo=o(" \u2014 "),EQ=a("a"),mWo=o("BlenderbotForConditionalGeneration"),fWo=o(" (Blenderbot model)"),gWo=l(),$1=a("li"),$2e=a("strong"),hWo=o("blenderbot-small"),uWo=o(" \u2014 "),CQ=a("a"),pWo=o("BlenderbotSmallForConditionalGeneration"),_Wo=o(" (BlenderbotSmall model)"),bWo=l(),k1=a("li"),k2e=a("strong"),vWo=o("encoder-decoder"),FWo=o(" \u2014 "),wQ=a("a"),TWo=o("EncoderDecoderModel"),MWo=o(" (Encoder decoder model)"),EWo=l(),S1=a("li"),S2e=a("strong"),CWo=o("fsmt"),wWo=o(" \u2014 "),AQ=a("a"),AWo=o("FSMTForConditionalGeneration"),yWo=o(" (FairSeq Machine-Translation model)"),LWo=l(),R1=a("li"),R2e=a("strong"),xWo=o("led"),$Wo=o(" \u2014 "),yQ=a("a"),kWo=o("LEDForConditionalGeneration"),SWo=o(" (LED model)"),RWo=l(),P1=a("li"),P2e=a("strong"),PWo=o("longt5"),BWo=o(" \u2014 "),LQ=a("a"),IWo=o("LongT5ForConditionalGeneration"),NWo=o(" (LongT5 model)"),qWo=l(),B1=a("li"),B2e=a("strong"),jWo=o("m2m_100"),DWo=o(" \u2014 "),xQ=a("a"),GWo=o("M2M100ForConditionalGeneration"),OWo=o(" (M2M100 model)"),VWo=l(),I1=a("li"),I2e=a("strong"),XWo=o("marian"),zWo=o(" \u2014 "),$Q=a("a"),QWo=o("MarianMTModel"),WWo=o(" (Marian model)"),UWo=l(),N1=a("li"),N2e=a("strong"),HWo=o("mbart"),JWo=o(" \u2014 "),kQ=a("a"),YWo=o("MBartForConditionalGeneration"),KWo=o(" (mBART model)"),ZWo=l(),q1=a("li"),q2e=a("strong"),eUo=o("mt5"),oUo=o(" \u2014 "),SQ=a("a"),rUo=o("MT5ForConditionalGeneration"),tUo=o(" (MT5 model)"),aUo=l(),j1=a("li"),j2e=a("strong"),nUo=o("mvp"),sUo=o(" \u2014 "),RQ=a("a"),lUo=o("MvpForConditionalGeneration"),iUo=o(" (MVP model)"),dUo=l(),D1=a("li"),D2e=a("strong"),cUo=o("nllb"),mUo=o(" \u2014 "),PQ=a("a"),fUo=o("M2M100ForConditionalGeneration"),gUo=o(" (NLLB model)"),hUo=l(),G1=a("li"),G2e=a("strong"),uUo=o("pegasus"),pUo=o(" \u2014 "),BQ=a("a"),_Uo=o("PegasusForConditionalGeneration"),bUo=o(" (Pegasus model)"),vUo=l(),O1=a("li"),O2e=a("strong"),FUo=o("pegasus_x"),TUo=o(" \u2014 "),IQ=a("a"),MUo=o("PegasusXForConditionalGeneration"),EUo=o(" (PEGASUS-X model)"),CUo=l(),V1=a("li"),V2e=a("strong"),wUo=o("plbart"),AUo=o(" \u2014 "),NQ=a("a"),yUo=o("PLBartForConditionalGeneration"),LUo=o(" (PLBart model)"),xUo=l(),X1=a("li"),X2e=a("strong"),$Uo=o("prophetnet"),kUo=o(" \u2014 "),qQ=a("a"),SUo=o("ProphetNetForConditionalGeneration"),RUo=o(" (ProphetNet model)"),PUo=l(),z1=a("li"),z2e=a("strong"),BUo=o("t5"),IUo=o(" \u2014 "),jQ=a("a"),NUo=o("T5ForConditionalGeneration"),qUo=o(" (T5 model)"),jUo=l(),Q1=a("li"),Q2e=a("strong"),DUo=o("xlm-prophetnet"),GUo=o(" \u2014 "),DQ=a("a"),OUo=o("XLMProphetNetForConditionalGeneration"),VUo=o(" (XLM-ProphetNet model)"),XUo=l(),W1=a("p"),zUo=o("The model is set in evaluation mode by default using "),W2e=a("code"),QUo=o("model.eval()"),WUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=a("code"),UUo=o("model.train()"),HUo=l(),F(U1.$$.fragment),OJe=l(),xd=a("h2"),H1=a("a"),H2e=a("span"),F(ax.$$.fragment),JUo=l(),J2e=a("span"),YUo=o("AutoModelForSequenceClassification"),VJe=l(),qo=a("div"),F(nx.$$.fragment),KUo=l(),$d=a("p"),ZUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GQ=a("a"),eHo=o("from_pretrained()"),oHo=o(" class method or the "),OQ=a("a"),rHo=o("from_config()"),tHo=o(` class
method.`),aHo=l(),sx=a("p"),nHo=o("This class cannot be instantiated directly using "),Y2e=a("code"),sHo=o("__init__()"),lHo=o(" (throws an error)."),iHo=l(),Tt=a("div"),F(lx.$$.fragment),dHo=l(),K2e=a("p"),cHo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),mHo=l(),kd=a("p"),fHo=o(`Note:
Loading a model from its configuration file does `),Z2e=a("strong"),gHo=o("not"),hHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),uHo=o("from_pretrained()"),pHo=o(" to load the model weights."),_Ho=l(),F(J1.$$.fragment),bHo=l(),to=a("div"),F(ix.$$.fragment),vHo=l(),eve=a("p"),FHo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),THo=l(),on=a("p"),MHo=o("The model class to instantiate is selected based on the "),ove=a("code"),EHo=o("model_type"),CHo=o(` property of the config object (either
passed as an argument or loaded from `),rve=a("code"),wHo=o("pretrained_model_name_or_path"),AHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=a("code"),yHo=o("pretrained_model_name_or_path"),LHo=o(":"),xHo=l(),j=a("ul"),Y1=a("li"),ave=a("strong"),$Ho=o("albert"),kHo=o(" \u2014 "),XQ=a("a"),SHo=o("AlbertForSequenceClassification"),RHo=o(" (ALBERT model)"),PHo=l(),K1=a("li"),nve=a("strong"),BHo=o("bart"),IHo=o(" \u2014 "),zQ=a("a"),NHo=o("BartForSequenceClassification"),qHo=o(" (BART model)"),jHo=l(),Z1=a("li"),sve=a("strong"),DHo=o("bert"),GHo=o(" \u2014 "),QQ=a("a"),OHo=o("BertForSequenceClassification"),VHo=o(" (BERT model)"),XHo=l(),eF=a("li"),lve=a("strong"),zHo=o("big_bird"),QHo=o(" \u2014 "),WQ=a("a"),WHo=o("BigBirdForSequenceClassification"),UHo=o(" (BigBird model)"),HHo=l(),oF=a("li"),ive=a("strong"),JHo=o("bigbird_pegasus"),YHo=o(" \u2014 "),UQ=a("a"),KHo=o("BigBirdPegasusForSequenceClassification"),ZHo=o(" (BigBird-Pegasus model)"),eJo=l(),rF=a("li"),dve=a("strong"),oJo=o("bloom"),rJo=o(" \u2014 "),HQ=a("a"),tJo=o("BloomForSequenceClassification"),aJo=o(" (BLOOM model)"),nJo=l(),tF=a("li"),cve=a("strong"),sJo=o("camembert"),lJo=o(" \u2014 "),JQ=a("a"),iJo=o("CamembertForSequenceClassification"),dJo=o(" (CamemBERT model)"),cJo=l(),aF=a("li"),mve=a("strong"),mJo=o("canine"),fJo=o(" \u2014 "),YQ=a("a"),gJo=o("CanineForSequenceClassification"),hJo=o(" (CANINE model)"),uJo=l(),nF=a("li"),fve=a("strong"),pJo=o("convbert"),_Jo=o(" \u2014 "),KQ=a("a"),bJo=o("ConvBertForSequenceClassification"),vJo=o(" (ConvBERT model)"),FJo=l(),sF=a("li"),gve=a("strong"),TJo=o("ctrl"),MJo=o(" \u2014 "),ZQ=a("a"),EJo=o("CTRLForSequenceClassification"),CJo=o(" (CTRL model)"),wJo=l(),lF=a("li"),hve=a("strong"),AJo=o("data2vec-text"),yJo=o(" \u2014 "),eW=a("a"),LJo=o("Data2VecTextForSequenceClassification"),xJo=o(" (Data2VecText model)"),$Jo=l(),iF=a("li"),uve=a("strong"),kJo=o("deberta"),SJo=o(" \u2014 "),oW=a("a"),RJo=o("DebertaForSequenceClassification"),PJo=o(" (DeBERTa model)"),BJo=l(),dF=a("li"),pve=a("strong"),IJo=o("deberta-v2"),NJo=o(" \u2014 "),rW=a("a"),qJo=o("DebertaV2ForSequenceClassification"),jJo=o(" (DeBERTa-v2 model)"),DJo=l(),cF=a("li"),_ve=a("strong"),GJo=o("distilbert"),OJo=o(" \u2014 "),tW=a("a"),VJo=o("DistilBertForSequenceClassification"),XJo=o(" (DistilBERT model)"),zJo=l(),mF=a("li"),bve=a("strong"),QJo=o("electra"),WJo=o(" \u2014 "),aW=a("a"),UJo=o("ElectraForSequenceClassification"),HJo=o(" (ELECTRA model)"),JJo=l(),fF=a("li"),vve=a("strong"),YJo=o("flaubert"),KJo=o(" \u2014 "),nW=a("a"),ZJo=o("FlaubertForSequenceClassification"),eYo=o(" (FlauBERT model)"),oYo=l(),gF=a("li"),Fve=a("strong"),rYo=o("fnet"),tYo=o(" \u2014 "),sW=a("a"),aYo=o("FNetForSequenceClassification"),nYo=o(" (FNet model)"),sYo=l(),hF=a("li"),Tve=a("strong"),lYo=o("funnel"),iYo=o(" \u2014 "),lW=a("a"),dYo=o("FunnelForSequenceClassification"),cYo=o(" (Funnel Transformer model)"),mYo=l(),uF=a("li"),Mve=a("strong"),fYo=o("gpt2"),gYo=o(" \u2014 "),iW=a("a"),hYo=o("GPT2ForSequenceClassification"),uYo=o(" (OpenAI GPT-2 model)"),pYo=l(),pF=a("li"),Eve=a("strong"),_Yo=o("gpt_neo"),bYo=o(" \u2014 "),dW=a("a"),vYo=o("GPTNeoForSequenceClassification"),FYo=o(" (GPT Neo model)"),TYo=l(),_F=a("li"),Cve=a("strong"),MYo=o("gptj"),EYo=o(" \u2014 "),cW=a("a"),CYo=o("GPTJForSequenceClassification"),wYo=o(" (GPT-J model)"),AYo=l(),bF=a("li"),wve=a("strong"),yYo=o("ibert"),LYo=o(" \u2014 "),mW=a("a"),xYo=o("IBertForSequenceClassification"),$Yo=o(" (I-BERT model)"),kYo=l(),vF=a("li"),Ave=a("strong"),SYo=o("layoutlm"),RYo=o(" \u2014 "),fW=a("a"),PYo=o("LayoutLMForSequenceClassification"),BYo=o(" (LayoutLM model)"),IYo=l(),FF=a("li"),yve=a("strong"),NYo=o("layoutlmv2"),qYo=o(" \u2014 "),gW=a("a"),jYo=o("LayoutLMv2ForSequenceClassification"),DYo=o(" (LayoutLMv2 model)"),GYo=l(),TF=a("li"),Lve=a("strong"),OYo=o("layoutlmv3"),VYo=o(" \u2014 "),hW=a("a"),XYo=o("LayoutLMv3ForSequenceClassification"),zYo=o(" (LayoutLMv3 model)"),QYo=l(),MF=a("li"),xve=a("strong"),WYo=o("led"),UYo=o(" \u2014 "),uW=a("a"),HYo=o("LEDForSequenceClassification"),JYo=o(" (LED model)"),YYo=l(),EF=a("li"),$ve=a("strong"),KYo=o("longformer"),ZYo=o(" \u2014 "),pW=a("a"),eKo=o("LongformerForSequenceClassification"),oKo=o(" (Longformer model)"),rKo=l(),CF=a("li"),kve=a("strong"),tKo=o("luke"),aKo=o(" \u2014 "),_W=a("a"),nKo=o("LukeForSequenceClassification"),sKo=o(" (LUKE model)"),lKo=l(),wF=a("li"),Sve=a("strong"),iKo=o("mbart"),dKo=o(" \u2014 "),bW=a("a"),cKo=o("MBartForSequenceClassification"),mKo=o(" (mBART model)"),fKo=l(),AF=a("li"),Rve=a("strong"),gKo=o("megatron-bert"),hKo=o(" \u2014 "),vW=a("a"),uKo=o("MegatronBertForSequenceClassification"),pKo=o(" (Megatron-BERT model)"),_Ko=l(),yF=a("li"),Pve=a("strong"),bKo=o("mobilebert"),vKo=o(" \u2014 "),FW=a("a"),FKo=o("MobileBertForSequenceClassification"),TKo=o(" (MobileBERT model)"),MKo=l(),LF=a("li"),Bve=a("strong"),EKo=o("mpnet"),CKo=o(" \u2014 "),TW=a("a"),wKo=o("MPNetForSequenceClassification"),AKo=o(" (MPNet model)"),yKo=l(),xF=a("li"),Ive=a("strong"),LKo=o("mvp"),xKo=o(" \u2014 "),MW=a("a"),$Ko=o("MvpForSequenceClassification"),kKo=o(" (MVP model)"),SKo=l(),$F=a("li"),Nve=a("strong"),RKo=o("nezha"),PKo=o(" \u2014 "),EW=a("a"),BKo=o("NezhaForSequenceClassification"),IKo=o(" (Nezha model)"),NKo=l(),kF=a("li"),qve=a("strong"),qKo=o("nystromformer"),jKo=o(" \u2014 "),CW=a("a"),DKo=o("NystromformerForSequenceClassification"),GKo=o(" (Nystr\xF6mformer model)"),OKo=l(),SF=a("li"),jve=a("strong"),VKo=o("openai-gpt"),XKo=o(" \u2014 "),wW=a("a"),zKo=o("OpenAIGPTForSequenceClassification"),QKo=o(" (OpenAI GPT model)"),WKo=l(),RF=a("li"),Dve=a("strong"),UKo=o("opt"),HKo=o(" \u2014 "),AW=a("a"),JKo=o("OPTForSequenceClassification"),YKo=o(" (OPT model)"),KKo=l(),PF=a("li"),Gve=a("strong"),ZKo=o("perceiver"),eZo=o(" \u2014 "),yW=a("a"),oZo=o("PerceiverForSequenceClassification"),rZo=o(" (Perceiver model)"),tZo=l(),BF=a("li"),Ove=a("strong"),aZo=o("plbart"),nZo=o(" \u2014 "),LW=a("a"),sZo=o("PLBartForSequenceClassification"),lZo=o(" (PLBart model)"),iZo=l(),IF=a("li"),Vve=a("strong"),dZo=o("qdqbert"),cZo=o(" \u2014 "),xW=a("a"),mZo=o("QDQBertForSequenceClassification"),fZo=o(" (QDQBert model)"),gZo=l(),NF=a("li"),Xve=a("strong"),hZo=o("reformer"),uZo=o(" \u2014 "),$W=a("a"),pZo=o("ReformerForSequenceClassification"),_Zo=o(" (Reformer model)"),bZo=l(),qF=a("li"),zve=a("strong"),vZo=o("rembert"),FZo=o(" \u2014 "),kW=a("a"),TZo=o("RemBertForSequenceClassification"),MZo=o(" (RemBERT model)"),EZo=l(),jF=a("li"),Qve=a("strong"),CZo=o("roberta"),wZo=o(" \u2014 "),SW=a("a"),AZo=o("RobertaForSequenceClassification"),yZo=o(" (RoBERTa model)"),LZo=l(),DF=a("li"),Wve=a("strong"),xZo=o("roformer"),$Zo=o(" \u2014 "),RW=a("a"),kZo=o("RoFormerForSequenceClassification"),SZo=o(" (RoFormer model)"),RZo=l(),GF=a("li"),Uve=a("strong"),PZo=o("squeezebert"),BZo=o(" \u2014 "),PW=a("a"),IZo=o("SqueezeBertForSequenceClassification"),NZo=o(" (SqueezeBERT model)"),qZo=l(),OF=a("li"),Hve=a("strong"),jZo=o("tapas"),DZo=o(" \u2014 "),BW=a("a"),GZo=o("TapasForSequenceClassification"),OZo=o(" (TAPAS model)"),VZo=l(),VF=a("li"),Jve=a("strong"),XZo=o("transfo-xl"),zZo=o(" \u2014 "),IW=a("a"),QZo=o("TransfoXLForSequenceClassification"),WZo=o(" (Transformer-XL model)"),UZo=l(),XF=a("li"),Yve=a("strong"),HZo=o("xlm"),JZo=o(" \u2014 "),NW=a("a"),YZo=o("XLMForSequenceClassification"),KZo=o(" (XLM model)"),ZZo=l(),zF=a("li"),Kve=a("strong"),eer=o("xlm-roberta"),oer=o(" \u2014 "),qW=a("a"),rer=o("XLMRobertaForSequenceClassification"),ter=o(" (XLM-RoBERTa model)"),aer=l(),QF=a("li"),Zve=a("strong"),ner=o("xlm-roberta-xl"),ser=o(" \u2014 "),jW=a("a"),ler=o("XLMRobertaXLForSequenceClassification"),ier=o(" (XLM-RoBERTa-XL model)"),der=l(),WF=a("li"),e1e=a("strong"),cer=o("xlnet"),mer=o(" \u2014 "),DW=a("a"),fer=o("XLNetForSequenceClassification"),ger=o(" (XLNet model)"),her=l(),UF=a("li"),o1e=a("strong"),uer=o("yoso"),per=o(" \u2014 "),GW=a("a"),_er=o("YosoForSequenceClassification"),ber=o(" (YOSO model)"),ver=l(),HF=a("p"),Fer=o("The model is set in evaluation mode by default using "),r1e=a("code"),Ter=o("model.eval()"),Mer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t1e=a("code"),Eer=o("model.train()"),Cer=l(),F(JF.$$.fragment),XJe=l(),Sd=a("h2"),YF=a("a"),a1e=a("span"),F(dx.$$.fragment),wer=l(),n1e=a("span"),Aer=o("AutoModelForMultipleChoice"),zJe=l(),jo=a("div"),F(cx.$$.fragment),yer=l(),Rd=a("p"),Ler=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OW=a("a"),xer=o("from_pretrained()"),$er=o(" class method or the "),VW=a("a"),ker=o("from_config()"),Ser=o(` class
method.`),Rer=l(),mx=a("p"),Per=o("This class cannot be instantiated directly using "),s1e=a("code"),Ber=o("__init__()"),Ier=o(" (throws an error)."),Ner=l(),Mt=a("div"),F(fx.$$.fragment),qer=l(),l1e=a("p"),jer=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Der=l(),Pd=a("p"),Ger=o(`Note:
Loading a model from its configuration file does `),i1e=a("strong"),Oer=o("not"),Ver=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),Xer=o("from_pretrained()"),zer=o(" to load the model weights."),Qer=l(),F(KF.$$.fragment),Wer=l(),ao=a("div"),F(gx.$$.fragment),Uer=l(),d1e=a("p"),Her=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jer=l(),rn=a("p"),Yer=o("The model class to instantiate is selected based on the "),c1e=a("code"),Ker=o("model_type"),Zer=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),eor=o("pretrained_model_name_or_path"),oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=a("code"),ror=o("pretrained_model_name_or_path"),tor=o(":"),aor=l(),Z=a("ul"),ZF=a("li"),g1e=a("strong"),nor=o("albert"),sor=o(" \u2014 "),zW=a("a"),lor=o("AlbertForMultipleChoice"),ior=o(" (ALBERT model)"),dor=l(),eT=a("li"),h1e=a("strong"),cor=o("bert"),mor=o(" \u2014 "),QW=a("a"),gor=o("BertForMultipleChoice"),hor=o(" (BERT model)"),uor=l(),oT=a("li"),u1e=a("strong"),por=o("big_bird"),_or=o(" \u2014 "),WW=a("a"),bor=o("BigBirdForMultipleChoice"),vor=o(" (BigBird model)"),For=l(),rT=a("li"),p1e=a("strong"),Tor=o("camembert"),Mor=o(" \u2014 "),UW=a("a"),Eor=o("CamembertForMultipleChoice"),Cor=o(" (CamemBERT model)"),wor=l(),tT=a("li"),_1e=a("strong"),Aor=o("canine"),yor=o(" \u2014 "),HW=a("a"),Lor=o("CanineForMultipleChoice"),xor=o(" (CANINE model)"),$or=l(),aT=a("li"),b1e=a("strong"),kor=o("convbert"),Sor=o(" \u2014 "),JW=a("a"),Ror=o("ConvBertForMultipleChoice"),Por=o(" (ConvBERT model)"),Bor=l(),nT=a("li"),v1e=a("strong"),Ior=o("data2vec-text"),Nor=o(" \u2014 "),YW=a("a"),qor=o("Data2VecTextForMultipleChoice"),jor=o(" (Data2VecText model)"),Dor=l(),sT=a("li"),F1e=a("strong"),Gor=o("deberta-v2"),Oor=o(" \u2014 "),KW=a("a"),Vor=o("DebertaV2ForMultipleChoice"),Xor=o(" (DeBERTa-v2 model)"),zor=l(),lT=a("li"),T1e=a("strong"),Qor=o("distilbert"),Wor=o(" \u2014 "),ZW=a("a"),Uor=o("DistilBertForMultipleChoice"),Hor=o(" (DistilBERT model)"),Jor=l(),iT=a("li"),M1e=a("strong"),Yor=o("electra"),Kor=o(" \u2014 "),eU=a("a"),Zor=o("ElectraForMultipleChoice"),err=o(" (ELECTRA model)"),orr=l(),dT=a("li"),E1e=a("strong"),rrr=o("flaubert"),trr=o(" \u2014 "),oU=a("a"),arr=o("FlaubertForMultipleChoice"),nrr=o(" (FlauBERT model)"),srr=l(),cT=a("li"),C1e=a("strong"),lrr=o("fnet"),irr=o(" \u2014 "),rU=a("a"),drr=o("FNetForMultipleChoice"),crr=o(" (FNet model)"),mrr=l(),mT=a("li"),w1e=a("strong"),frr=o("funnel"),grr=o(" \u2014 "),tU=a("a"),hrr=o("FunnelForMultipleChoice"),urr=o(" (Funnel Transformer model)"),prr=l(),fT=a("li"),A1e=a("strong"),_rr=o("ibert"),brr=o(" \u2014 "),aU=a("a"),vrr=o("IBertForMultipleChoice"),Frr=o(" (I-BERT model)"),Trr=l(),gT=a("li"),y1e=a("strong"),Mrr=o("longformer"),Err=o(" \u2014 "),nU=a("a"),Crr=o("LongformerForMultipleChoice"),wrr=o(" (Longformer model)"),Arr=l(),hT=a("li"),L1e=a("strong"),yrr=o("luke"),Lrr=o(" \u2014 "),sU=a("a"),xrr=o("LukeForMultipleChoice"),$rr=o(" (LUKE model)"),krr=l(),uT=a("li"),x1e=a("strong"),Srr=o("megatron-bert"),Rrr=o(" \u2014 "),lU=a("a"),Prr=o("MegatronBertForMultipleChoice"),Brr=o(" (Megatron-BERT model)"),Irr=l(),pT=a("li"),$1e=a("strong"),Nrr=o("mobilebert"),qrr=o(" \u2014 "),iU=a("a"),jrr=o("MobileBertForMultipleChoice"),Drr=o(" (MobileBERT model)"),Grr=l(),_T=a("li"),k1e=a("strong"),Orr=o("mpnet"),Vrr=o(" \u2014 "),dU=a("a"),Xrr=o("MPNetForMultipleChoice"),zrr=o(" (MPNet model)"),Qrr=l(),bT=a("li"),S1e=a("strong"),Wrr=o("nezha"),Urr=o(" \u2014 "),cU=a("a"),Hrr=o("NezhaForMultipleChoice"),Jrr=o(" (Nezha model)"),Yrr=l(),vT=a("li"),R1e=a("strong"),Krr=o("nystromformer"),Zrr=o(" \u2014 "),mU=a("a"),etr=o("NystromformerForMultipleChoice"),otr=o(" (Nystr\xF6mformer model)"),rtr=l(),FT=a("li"),P1e=a("strong"),ttr=o("qdqbert"),atr=o(" \u2014 "),fU=a("a"),ntr=o("QDQBertForMultipleChoice"),str=o(" (QDQBert model)"),ltr=l(),TT=a("li"),B1e=a("strong"),itr=o("rembert"),dtr=o(" \u2014 "),gU=a("a"),ctr=o("RemBertForMultipleChoice"),mtr=o(" (RemBERT model)"),ftr=l(),MT=a("li"),I1e=a("strong"),gtr=o("roberta"),htr=o(" \u2014 "),hU=a("a"),utr=o("RobertaForMultipleChoice"),ptr=o(" (RoBERTa model)"),_tr=l(),ET=a("li"),N1e=a("strong"),btr=o("roformer"),vtr=o(" \u2014 "),uU=a("a"),Ftr=o("RoFormerForMultipleChoice"),Ttr=o(" (RoFormer model)"),Mtr=l(),CT=a("li"),q1e=a("strong"),Etr=o("squeezebert"),Ctr=o(" \u2014 "),pU=a("a"),wtr=o("SqueezeBertForMultipleChoice"),Atr=o(" (SqueezeBERT model)"),ytr=l(),wT=a("li"),j1e=a("strong"),Ltr=o("xlm"),xtr=o(" \u2014 "),_U=a("a"),$tr=o("XLMForMultipleChoice"),ktr=o(" (XLM model)"),Str=l(),AT=a("li"),D1e=a("strong"),Rtr=o("xlm-roberta"),Ptr=o(" \u2014 "),bU=a("a"),Btr=o("XLMRobertaForMultipleChoice"),Itr=o(" (XLM-RoBERTa model)"),Ntr=l(),yT=a("li"),G1e=a("strong"),qtr=o("xlm-roberta-xl"),jtr=o(" \u2014 "),vU=a("a"),Dtr=o("XLMRobertaXLForMultipleChoice"),Gtr=o(" (XLM-RoBERTa-XL model)"),Otr=l(),LT=a("li"),O1e=a("strong"),Vtr=o("xlnet"),Xtr=o(" \u2014 "),FU=a("a"),ztr=o("XLNetForMultipleChoice"),Qtr=o(" (XLNet model)"),Wtr=l(),xT=a("li"),V1e=a("strong"),Utr=o("yoso"),Htr=o(" \u2014 "),TU=a("a"),Jtr=o("YosoForMultipleChoice"),Ytr=o(" (YOSO model)"),Ktr=l(),$T=a("p"),Ztr=o("The model is set in evaluation mode by default using "),X1e=a("code"),ear=o("model.eval()"),oar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=a("code"),rar=o("model.train()"),tar=l(),F(kT.$$.fragment),QJe=l(),Bd=a("h2"),ST=a("a"),Q1e=a("span"),F(hx.$$.fragment),aar=l(),W1e=a("span"),nar=o("AutoModelForNextSentencePrediction"),WJe=l(),Do=a("div"),F(ux.$$.fragment),sar=l(),Id=a("p"),lar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MU=a("a"),iar=o("from_pretrained()"),dar=o(" class method or the "),EU=a("a"),car=o("from_config()"),mar=o(` class
method.`),far=l(),px=a("p"),gar=o("This class cannot be instantiated directly using "),U1e=a("code"),har=o("__init__()"),uar=o(" (throws an error)."),par=l(),Et=a("div"),F(_x.$$.fragment),_ar=l(),H1e=a("p"),bar=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Far=l(),Nd=a("p"),Tar=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),Mar=o("not"),Ear=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),Car=o("from_pretrained()"),war=o(" to load the model weights."),Aar=l(),F(RT.$$.fragment),yar=l(),no=a("div"),F(bx.$$.fragment),Lar=l(),Y1e=a("p"),xar=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$ar=l(),tn=a("p"),kar=o("The model class to instantiate is selected based on the "),K1e=a("code"),Sar=o("model_type"),Rar=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),Par=o("pretrained_model_name_or_path"),Bar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=a("code"),Iar=o("pretrained_model_name_or_path"),Nar=o(":"),qar=l(),Go=a("ul"),PT=a("li"),oFe=a("strong"),jar=o("bert"),Dar=o(" \u2014 "),wU=a("a"),Gar=o("BertForNextSentencePrediction"),Oar=o(" (BERT model)"),Var=l(),BT=a("li"),rFe=a("strong"),Xar=o("fnet"),zar=o(" \u2014 "),AU=a("a"),Qar=o("FNetForNextSentencePrediction"),War=o(" (FNet model)"),Uar=l(),IT=a("li"),tFe=a("strong"),Har=o("megatron-bert"),Jar=o(" \u2014 "),yU=a("a"),Yar=o("MegatronBertForNextSentencePrediction"),Kar=o(" (Megatron-BERT model)"),Zar=l(),NT=a("li"),aFe=a("strong"),enr=o("mobilebert"),onr=o(" \u2014 "),LU=a("a"),rnr=o("MobileBertForNextSentencePrediction"),tnr=o(" (MobileBERT model)"),anr=l(),qT=a("li"),nFe=a("strong"),nnr=o("nezha"),snr=o(" \u2014 "),xU=a("a"),lnr=o("NezhaForNextSentencePrediction"),inr=o(" (Nezha model)"),dnr=l(),jT=a("li"),sFe=a("strong"),cnr=o("qdqbert"),mnr=o(" \u2014 "),$U=a("a"),fnr=o("QDQBertForNextSentencePrediction"),gnr=o(" (QDQBert model)"),hnr=l(),DT=a("p"),unr=o("The model is set in evaluation mode by default using "),lFe=a("code"),pnr=o("model.eval()"),_nr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iFe=a("code"),bnr=o("model.train()"),vnr=l(),F(GT.$$.fragment),UJe=l(),qd=a("h2"),OT=a("a"),dFe=a("span"),F(vx.$$.fragment),Fnr=l(),cFe=a("span"),Tnr=o("AutoModelForTokenClassification"),HJe=l(),Oo=a("div"),F(Fx.$$.fragment),Mnr=l(),jd=a("p"),Enr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kU=a("a"),Cnr=o("from_pretrained()"),wnr=o(" class method or the "),SU=a("a"),Anr=o("from_config()"),ynr=o(` class
method.`),Lnr=l(),Tx=a("p"),xnr=o("This class cannot be instantiated directly using "),mFe=a("code"),$nr=o("__init__()"),knr=o(" (throws an error)."),Snr=l(),Ct=a("div"),F(Mx.$$.fragment),Rnr=l(),fFe=a("p"),Pnr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Bnr=l(),Dd=a("p"),Inr=o(`Note:
Loading a model from its configuration file does `),gFe=a("strong"),Nnr=o("not"),qnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=a("a"),jnr=o("from_pretrained()"),Dnr=o(" to load the model weights."),Gnr=l(),F(VT.$$.fragment),Onr=l(),so=a("div"),F(Ex.$$.fragment),Vnr=l(),hFe=a("p"),Xnr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),znr=l(),an=a("p"),Qnr=o("The model class to instantiate is selected based on the "),uFe=a("code"),Wnr=o("model_type"),Unr=o(` property of the config object (either
passed as an argument or loaded from `),pFe=a("code"),Hnr=o("pretrained_model_name_or_path"),Jnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=a("code"),Ynr=o("pretrained_model_name_or_path"),Knr=o(":"),Znr=l(),H=a("ul"),XT=a("li"),bFe=a("strong"),esr=o("albert"),osr=o(" \u2014 "),PU=a("a"),rsr=o("AlbertForTokenClassification"),tsr=o(" (ALBERT model)"),asr=l(),zT=a("li"),vFe=a("strong"),nsr=o("bert"),ssr=o(" \u2014 "),BU=a("a"),lsr=o("BertForTokenClassification"),isr=o(" (BERT model)"),dsr=l(),QT=a("li"),FFe=a("strong"),csr=o("big_bird"),msr=o(" \u2014 "),IU=a("a"),fsr=o("BigBirdForTokenClassification"),gsr=o(" (BigBird model)"),hsr=l(),WT=a("li"),TFe=a("strong"),usr=o("bloom"),psr=o(" \u2014 "),NU=a("a"),_sr=o("BloomForTokenClassification"),bsr=o(" (BLOOM model)"),vsr=l(),UT=a("li"),MFe=a("strong"),Fsr=o("camembert"),Tsr=o(" \u2014 "),qU=a("a"),Msr=o("CamembertForTokenClassification"),Esr=o(" (CamemBERT model)"),Csr=l(),HT=a("li"),EFe=a("strong"),wsr=o("canine"),Asr=o(" \u2014 "),jU=a("a"),ysr=o("CanineForTokenClassification"),Lsr=o(" (CANINE model)"),xsr=l(),JT=a("li"),CFe=a("strong"),$sr=o("convbert"),ksr=o(" \u2014 "),DU=a("a"),Ssr=o("ConvBertForTokenClassification"),Rsr=o(" (ConvBERT model)"),Psr=l(),YT=a("li"),wFe=a("strong"),Bsr=o("data2vec-text"),Isr=o(" \u2014 "),GU=a("a"),Nsr=o("Data2VecTextForTokenClassification"),qsr=o(" (Data2VecText model)"),jsr=l(),KT=a("li"),AFe=a("strong"),Dsr=o("deberta"),Gsr=o(" \u2014 "),OU=a("a"),Osr=o("DebertaForTokenClassification"),Vsr=o(" (DeBERTa model)"),Xsr=l(),ZT=a("li"),yFe=a("strong"),zsr=o("deberta-v2"),Qsr=o(" \u2014 "),VU=a("a"),Wsr=o("DebertaV2ForTokenClassification"),Usr=o(" (DeBERTa-v2 model)"),Hsr=l(),eM=a("li"),LFe=a("strong"),Jsr=o("distilbert"),Ysr=o(" \u2014 "),XU=a("a"),Ksr=o("DistilBertForTokenClassification"),Zsr=o(" (DistilBERT model)"),elr=l(),oM=a("li"),xFe=a("strong"),olr=o("electra"),rlr=o(" \u2014 "),zU=a("a"),tlr=o("ElectraForTokenClassification"),alr=o(" (ELECTRA model)"),nlr=l(),rM=a("li"),$Fe=a("strong"),slr=o("flaubert"),llr=o(" \u2014 "),QU=a("a"),ilr=o("FlaubertForTokenClassification"),dlr=o(" (FlauBERT model)"),clr=l(),tM=a("li"),kFe=a("strong"),mlr=o("fnet"),flr=o(" \u2014 "),WU=a("a"),glr=o("FNetForTokenClassification"),hlr=o(" (FNet model)"),ulr=l(),aM=a("li"),SFe=a("strong"),plr=o("funnel"),_lr=o(" \u2014 "),UU=a("a"),blr=o("FunnelForTokenClassification"),vlr=o(" (Funnel Transformer model)"),Flr=l(),nM=a("li"),RFe=a("strong"),Tlr=o("gpt2"),Mlr=o(" \u2014 "),HU=a("a"),Elr=o("GPT2ForTokenClassification"),Clr=o(" (OpenAI GPT-2 model)"),wlr=l(),sM=a("li"),PFe=a("strong"),Alr=o("ibert"),ylr=o(" \u2014 "),JU=a("a"),Llr=o("IBertForTokenClassification"),xlr=o(" (I-BERT model)"),$lr=l(),lM=a("li"),BFe=a("strong"),klr=o("layoutlm"),Slr=o(" \u2014 "),YU=a("a"),Rlr=o("LayoutLMForTokenClassification"),Plr=o(" (LayoutLM model)"),Blr=l(),iM=a("li"),IFe=a("strong"),Ilr=o("layoutlmv2"),Nlr=o(" \u2014 "),KU=a("a"),qlr=o("LayoutLMv2ForTokenClassification"),jlr=o(" (LayoutLMv2 model)"),Dlr=l(),dM=a("li"),NFe=a("strong"),Glr=o("layoutlmv3"),Olr=o(" \u2014 "),ZU=a("a"),Vlr=o("LayoutLMv3ForTokenClassification"),Xlr=o(" (LayoutLMv3 model)"),zlr=l(),cM=a("li"),qFe=a("strong"),Qlr=o("longformer"),Wlr=o(" \u2014 "),eH=a("a"),Ulr=o("LongformerForTokenClassification"),Hlr=o(" (Longformer model)"),Jlr=l(),mM=a("li"),jFe=a("strong"),Ylr=o("luke"),Klr=o(" \u2014 "),oH=a("a"),Zlr=o("LukeForTokenClassification"),eir=o(" (LUKE model)"),oir=l(),fM=a("li"),DFe=a("strong"),rir=o("megatron-bert"),tir=o(" \u2014 "),rH=a("a"),air=o("MegatronBertForTokenClassification"),nir=o(" (Megatron-BERT model)"),sir=l(),gM=a("li"),GFe=a("strong"),lir=o("mobilebert"),iir=o(" \u2014 "),tH=a("a"),dir=o("MobileBertForTokenClassification"),cir=o(" (MobileBERT model)"),mir=l(),hM=a("li"),OFe=a("strong"),fir=o("mpnet"),gir=o(" \u2014 "),aH=a("a"),hir=o("MPNetForTokenClassification"),uir=o(" (MPNet model)"),pir=l(),uM=a("li"),VFe=a("strong"),_ir=o("nezha"),bir=o(" \u2014 "),nH=a("a"),vir=o("NezhaForTokenClassification"),Fir=o(" (Nezha model)"),Tir=l(),pM=a("li"),XFe=a("strong"),Mir=o("nystromformer"),Eir=o(" \u2014 "),sH=a("a"),Cir=o("NystromformerForTokenClassification"),wir=o(" (Nystr\xF6mformer model)"),Air=l(),_M=a("li"),zFe=a("strong"),yir=o("qdqbert"),Lir=o(" \u2014 "),lH=a("a"),xir=o("QDQBertForTokenClassification"),$ir=o(" (QDQBert model)"),kir=l(),bM=a("li"),QFe=a("strong"),Sir=o("rembert"),Rir=o(" \u2014 "),iH=a("a"),Pir=o("RemBertForTokenClassification"),Bir=o(" (RemBERT model)"),Iir=l(),vM=a("li"),WFe=a("strong"),Nir=o("roberta"),qir=o(" \u2014 "),dH=a("a"),jir=o("RobertaForTokenClassification"),Dir=o(" (RoBERTa model)"),Gir=l(),FM=a("li"),UFe=a("strong"),Oir=o("roformer"),Vir=o(" \u2014 "),cH=a("a"),Xir=o("RoFormerForTokenClassification"),zir=o(" (RoFormer model)"),Qir=l(),TM=a("li"),HFe=a("strong"),Wir=o("squeezebert"),Uir=o(" \u2014 "),mH=a("a"),Hir=o("SqueezeBertForTokenClassification"),Jir=o(" (SqueezeBERT model)"),Yir=l(),MM=a("li"),JFe=a("strong"),Kir=o("xlm"),Zir=o(" \u2014 "),fH=a("a"),edr=o("XLMForTokenClassification"),odr=o(" (XLM model)"),rdr=l(),EM=a("li"),YFe=a("strong"),tdr=o("xlm-roberta"),adr=o(" \u2014 "),gH=a("a"),ndr=o("XLMRobertaForTokenClassification"),sdr=o(" (XLM-RoBERTa model)"),ldr=l(),CM=a("li"),KFe=a("strong"),idr=o("xlm-roberta-xl"),ddr=o(" \u2014 "),hH=a("a"),cdr=o("XLMRobertaXLForTokenClassification"),mdr=o(" (XLM-RoBERTa-XL model)"),fdr=l(),wM=a("li"),ZFe=a("strong"),gdr=o("xlnet"),hdr=o(" \u2014 "),uH=a("a"),udr=o("XLNetForTokenClassification"),pdr=o(" (XLNet model)"),_dr=l(),AM=a("li"),eTe=a("strong"),bdr=o("yoso"),vdr=o(" \u2014 "),pH=a("a"),Fdr=o("YosoForTokenClassification"),Tdr=o(" (YOSO model)"),Mdr=l(),yM=a("p"),Edr=o("The model is set in evaluation mode by default using "),oTe=a("code"),Cdr=o("model.eval()"),wdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rTe=a("code"),Adr=o("model.train()"),ydr=l(),F(LM.$$.fragment),JJe=l(),Gd=a("h2"),xM=a("a"),tTe=a("span"),F(Cx.$$.fragment),Ldr=l(),aTe=a("span"),xdr=o("AutoModelForQuestionAnswering"),YJe=l(),Vo=a("div"),F(wx.$$.fragment),$dr=l(),Od=a("p"),kdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_H=a("a"),Sdr=o("from_pretrained()"),Rdr=o(" class method or the "),bH=a("a"),Pdr=o("from_config()"),Bdr=o(` class
method.`),Idr=l(),Ax=a("p"),Ndr=o("This class cannot be instantiated directly using "),nTe=a("code"),qdr=o("__init__()"),jdr=o(" (throws an error)."),Ddr=l(),wt=a("div"),F(yx.$$.fragment),Gdr=l(),sTe=a("p"),Odr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Vdr=l(),Vd=a("p"),Xdr=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),zdr=o("not"),Qdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),Wdr=o("from_pretrained()"),Udr=o(" to load the model weights."),Hdr=l(),F($M.$$.fragment),Jdr=l(),lo=a("div"),F(Lx.$$.fragment),Ydr=l(),iTe=a("p"),Kdr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zdr=l(),nn=a("p"),ecr=o("The model class to instantiate is selected based on the "),dTe=a("code"),ocr=o("model_type"),rcr=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),tcr=o("pretrained_model_name_or_path"),acr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=a("code"),ncr=o("pretrained_model_name_or_path"),scr=o(":"),lcr=l(),V=a("ul"),kM=a("li"),fTe=a("strong"),icr=o("albert"),dcr=o(" \u2014 "),FH=a("a"),ccr=o("AlbertForQuestionAnswering"),mcr=o(" (ALBERT model)"),fcr=l(),SM=a("li"),gTe=a("strong"),gcr=o("bart"),hcr=o(" \u2014 "),TH=a("a"),ucr=o("BartForQuestionAnswering"),pcr=o(" (BART model)"),_cr=l(),RM=a("li"),hTe=a("strong"),bcr=o("bert"),vcr=o(" \u2014 "),MH=a("a"),Fcr=o("BertForQuestionAnswering"),Tcr=o(" (BERT model)"),Mcr=l(),PM=a("li"),uTe=a("strong"),Ecr=o("big_bird"),Ccr=o(" \u2014 "),EH=a("a"),wcr=o("BigBirdForQuestionAnswering"),Acr=o(" (BigBird model)"),ycr=l(),BM=a("li"),pTe=a("strong"),Lcr=o("bigbird_pegasus"),xcr=o(" \u2014 "),CH=a("a"),$cr=o("BigBirdPegasusForQuestionAnswering"),kcr=o(" (BigBird-Pegasus model)"),Scr=l(),IM=a("li"),_Te=a("strong"),Rcr=o("camembert"),Pcr=o(" \u2014 "),wH=a("a"),Bcr=o("CamembertForQuestionAnswering"),Icr=o(" (CamemBERT model)"),Ncr=l(),NM=a("li"),bTe=a("strong"),qcr=o("canine"),jcr=o(" \u2014 "),AH=a("a"),Dcr=o("CanineForQuestionAnswering"),Gcr=o(" (CANINE model)"),Ocr=l(),qM=a("li"),vTe=a("strong"),Vcr=o("convbert"),Xcr=o(" \u2014 "),yH=a("a"),zcr=o("ConvBertForQuestionAnswering"),Qcr=o(" (ConvBERT model)"),Wcr=l(),jM=a("li"),FTe=a("strong"),Ucr=o("data2vec-text"),Hcr=o(" \u2014 "),LH=a("a"),Jcr=o("Data2VecTextForQuestionAnswering"),Ycr=o(" (Data2VecText model)"),Kcr=l(),DM=a("li"),TTe=a("strong"),Zcr=o("deberta"),emr=o(" \u2014 "),xH=a("a"),omr=o("DebertaForQuestionAnswering"),rmr=o(" (DeBERTa model)"),tmr=l(),GM=a("li"),MTe=a("strong"),amr=o("deberta-v2"),nmr=o(" \u2014 "),$H=a("a"),smr=o("DebertaV2ForQuestionAnswering"),lmr=o(" (DeBERTa-v2 model)"),imr=l(),OM=a("li"),ETe=a("strong"),dmr=o("distilbert"),cmr=o(" \u2014 "),kH=a("a"),mmr=o("DistilBertForQuestionAnswering"),fmr=o(" (DistilBERT model)"),gmr=l(),VM=a("li"),CTe=a("strong"),hmr=o("electra"),umr=o(" \u2014 "),SH=a("a"),pmr=o("ElectraForQuestionAnswering"),_mr=o(" (ELECTRA model)"),bmr=l(),XM=a("li"),wTe=a("strong"),vmr=o("flaubert"),Fmr=o(" \u2014 "),RH=a("a"),Tmr=o("FlaubertForQuestionAnsweringSimple"),Mmr=o(" (FlauBERT model)"),Emr=l(),zM=a("li"),ATe=a("strong"),Cmr=o("fnet"),wmr=o(" \u2014 "),PH=a("a"),Amr=o("FNetForQuestionAnswering"),ymr=o(" (FNet model)"),Lmr=l(),QM=a("li"),yTe=a("strong"),xmr=o("funnel"),$mr=o(" \u2014 "),BH=a("a"),kmr=o("FunnelForQuestionAnswering"),Smr=o(" (Funnel Transformer model)"),Rmr=l(),WM=a("li"),LTe=a("strong"),Pmr=o("gptj"),Bmr=o(" \u2014 "),IH=a("a"),Imr=o("GPTJForQuestionAnswering"),Nmr=o(" (GPT-J model)"),qmr=l(),UM=a("li"),xTe=a("strong"),jmr=o("ibert"),Dmr=o(" \u2014 "),NH=a("a"),Gmr=o("IBertForQuestionAnswering"),Omr=o(" (I-BERT model)"),Vmr=l(),HM=a("li"),$Te=a("strong"),Xmr=o("layoutlmv2"),zmr=o(" \u2014 "),qH=a("a"),Qmr=o("LayoutLMv2ForQuestionAnswering"),Wmr=o(" (LayoutLMv2 model)"),Umr=l(),JM=a("li"),kTe=a("strong"),Hmr=o("layoutlmv3"),Jmr=o(" \u2014 "),jH=a("a"),Ymr=o("LayoutLMv3ForQuestionAnswering"),Kmr=o(" (LayoutLMv3 model)"),Zmr=l(),YM=a("li"),STe=a("strong"),efr=o("led"),ofr=o(" \u2014 "),DH=a("a"),rfr=o("LEDForQuestionAnswering"),tfr=o(" (LED model)"),afr=l(),KM=a("li"),RTe=a("strong"),nfr=o("longformer"),sfr=o(" \u2014 "),GH=a("a"),lfr=o("LongformerForQuestionAnswering"),ifr=o(" (Longformer model)"),dfr=l(),ZM=a("li"),PTe=a("strong"),cfr=o("luke"),mfr=o(" \u2014 "),OH=a("a"),ffr=o("LukeForQuestionAnswering"),gfr=o(" (LUKE model)"),hfr=l(),eE=a("li"),BTe=a("strong"),ufr=o("lxmert"),pfr=o(" \u2014 "),VH=a("a"),_fr=o("LxmertForQuestionAnswering"),bfr=o(" (LXMERT model)"),vfr=l(),oE=a("li"),ITe=a("strong"),Ffr=o("mbart"),Tfr=o(" \u2014 "),XH=a("a"),Mfr=o("MBartForQuestionAnswering"),Efr=o(" (mBART model)"),Cfr=l(),rE=a("li"),NTe=a("strong"),wfr=o("megatron-bert"),Afr=o(" \u2014 "),zH=a("a"),yfr=o("MegatronBertForQuestionAnswering"),Lfr=o(" (Megatron-BERT model)"),xfr=l(),tE=a("li"),qTe=a("strong"),$fr=o("mobilebert"),kfr=o(" \u2014 "),QH=a("a"),Sfr=o("MobileBertForQuestionAnswering"),Rfr=o(" (MobileBERT model)"),Pfr=l(),aE=a("li"),jTe=a("strong"),Bfr=o("mpnet"),Ifr=o(" \u2014 "),WH=a("a"),Nfr=o("MPNetForQuestionAnswering"),qfr=o(" (MPNet model)"),jfr=l(),nE=a("li"),DTe=a("strong"),Dfr=o("mvp"),Gfr=o(" \u2014 "),UH=a("a"),Ofr=o("MvpForQuestionAnswering"),Vfr=o(" (MVP model)"),Xfr=l(),sE=a("li"),GTe=a("strong"),zfr=o("nezha"),Qfr=o(" \u2014 "),HH=a("a"),Wfr=o("NezhaForQuestionAnswering"),Ufr=o(" (Nezha model)"),Hfr=l(),lE=a("li"),OTe=a("strong"),Jfr=o("nystromformer"),Yfr=o(" \u2014 "),JH=a("a"),Kfr=o("NystromformerForQuestionAnswering"),Zfr=o(" (Nystr\xF6mformer model)"),egr=l(),iE=a("li"),VTe=a("strong"),ogr=o("qdqbert"),rgr=o(" \u2014 "),YH=a("a"),tgr=o("QDQBertForQuestionAnswering"),agr=o(" (QDQBert model)"),ngr=l(),dE=a("li"),XTe=a("strong"),sgr=o("reformer"),lgr=o(" \u2014 "),KH=a("a"),igr=o("ReformerForQuestionAnswering"),dgr=o(" (Reformer model)"),cgr=l(),cE=a("li"),zTe=a("strong"),mgr=o("rembert"),fgr=o(" \u2014 "),ZH=a("a"),ggr=o("RemBertForQuestionAnswering"),hgr=o(" (RemBERT model)"),ugr=l(),mE=a("li"),QTe=a("strong"),pgr=o("roberta"),_gr=o(" \u2014 "),eJ=a("a"),bgr=o("RobertaForQuestionAnswering"),vgr=o(" (RoBERTa model)"),Fgr=l(),fE=a("li"),WTe=a("strong"),Tgr=o("roformer"),Mgr=o(" \u2014 "),oJ=a("a"),Egr=o("RoFormerForQuestionAnswering"),Cgr=o(" (RoFormer model)"),wgr=l(),gE=a("li"),UTe=a("strong"),Agr=o("splinter"),ygr=o(" \u2014 "),rJ=a("a"),Lgr=o("SplinterForQuestionAnswering"),xgr=o(" (Splinter model)"),$gr=l(),hE=a("li"),HTe=a("strong"),kgr=o("squeezebert"),Sgr=o(" \u2014 "),tJ=a("a"),Rgr=o("SqueezeBertForQuestionAnswering"),Pgr=o(" (SqueezeBERT model)"),Bgr=l(),uE=a("li"),JTe=a("strong"),Igr=o("xlm"),Ngr=o(" \u2014 "),aJ=a("a"),qgr=o("XLMForQuestionAnsweringSimple"),jgr=o(" (XLM model)"),Dgr=l(),pE=a("li"),YTe=a("strong"),Ggr=o("xlm-roberta"),Ogr=o(" \u2014 "),nJ=a("a"),Vgr=o("XLMRobertaForQuestionAnswering"),Xgr=o(" (XLM-RoBERTa model)"),zgr=l(),_E=a("li"),KTe=a("strong"),Qgr=o("xlm-roberta-xl"),Wgr=o(" \u2014 "),sJ=a("a"),Ugr=o("XLMRobertaXLForQuestionAnswering"),Hgr=o(" (XLM-RoBERTa-XL model)"),Jgr=l(),bE=a("li"),ZTe=a("strong"),Ygr=o("xlnet"),Kgr=o(" \u2014 "),lJ=a("a"),Zgr=o("XLNetForQuestionAnsweringSimple"),ehr=o(" (XLNet model)"),ohr=l(),vE=a("li"),eMe=a("strong"),rhr=o("yoso"),thr=o(" \u2014 "),iJ=a("a"),ahr=o("YosoForQuestionAnswering"),nhr=o(" (YOSO model)"),shr=l(),FE=a("p"),lhr=o("The model is set in evaluation mode by default using "),oMe=a("code"),ihr=o("model.eval()"),dhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rMe=a("code"),chr=o("model.train()"),mhr=l(),F(TE.$$.fragment),KJe=l(),Xd=a("h2"),ME=a("a"),tMe=a("span"),F(xx.$$.fragment),fhr=l(),aMe=a("span"),ghr=o("AutoModelForTableQuestionAnswering"),ZJe=l(),Xo=a("div"),F($x.$$.fragment),hhr=l(),zd=a("p"),uhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dJ=a("a"),phr=o("from_pretrained()"),_hr=o(" class method or the "),cJ=a("a"),bhr=o("from_config()"),vhr=o(` class
method.`),Fhr=l(),kx=a("p"),Thr=o("This class cannot be instantiated directly using "),nMe=a("code"),Mhr=o("__init__()"),Ehr=o(" (throws an error)."),Chr=l(),At=a("div"),F(Sx.$$.fragment),whr=l(),sMe=a("p"),Ahr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),yhr=l(),Qd=a("p"),Lhr=o(`Note:
Loading a model from its configuration file does `),lMe=a("strong"),xhr=o("not"),$hr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),khr=o("from_pretrained()"),Shr=o(" to load the model weights."),Rhr=l(),F(EE.$$.fragment),Phr=l(),io=a("div"),F(Rx.$$.fragment),Bhr=l(),iMe=a("p"),Ihr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Nhr=l(),sn=a("p"),qhr=o("The model class to instantiate is selected based on the "),dMe=a("code"),jhr=o("model_type"),Dhr=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),Ghr=o("pretrained_model_name_or_path"),Ohr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=a("code"),Vhr=o("pretrained_model_name_or_path"),Xhr=o(":"),zhr=l(),fMe=a("ul"),CE=a("li"),gMe=a("strong"),Qhr=o("tapas"),Whr=o(" \u2014 "),fJ=a("a"),Uhr=o("TapasForQuestionAnswering"),Hhr=o(" (TAPAS model)"),Jhr=l(),wE=a("p"),Yhr=o("The model is set in evaluation mode by default using "),hMe=a("code"),Khr=o("model.eval()"),Zhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uMe=a("code"),eur=o("model.train()"),our=l(),F(AE.$$.fragment),eYe=l(),Wd=a("h2"),yE=a("a"),pMe=a("span"),F(Px.$$.fragment),rur=l(),_Me=a("span"),tur=o("AutoModelForDocumentQuestionAnswering"),oYe=l(),zo=a("div"),F(Bx.$$.fragment),aur=l(),Ud=a("p"),nur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),gJ=a("a"),sur=o("from_pretrained()"),lur=o(" class method or the "),hJ=a("a"),iur=o("from_config()"),dur=o(` class
method.`),cur=l(),Ix=a("p"),mur=o("This class cannot be instantiated directly using "),bMe=a("code"),fur=o("__init__()"),gur=o(" (throws an error)."),hur=l(),yt=a("div"),F(Nx.$$.fragment),uur=l(),vMe=a("p"),pur=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),_ur=l(),Hd=a("p"),bur=o(`Note:
Loading a model from its configuration file does `),FMe=a("strong"),vur=o("not"),Fur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),Tur=o("from_pretrained()"),Mur=o(" to load the model weights."),Eur=l(),F(LE.$$.fragment),Cur=l(),co=a("div"),F(qx.$$.fragment),wur=l(),TMe=a("p"),Aur=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),yur=l(),ln=a("p"),Lur=o("The model class to instantiate is selected based on the "),MMe=a("code"),xur=o("model_type"),$ur=o(` property of the config object (either
passed as an argument or loaded from `),EMe=a("code"),kur=o("pretrained_model_name_or_path"),Sur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=a("code"),Rur=o("pretrained_model_name_or_path"),Pur=o(":"),Bur=l(),Jd=a("ul"),xE=a("li"),wMe=a("strong"),Iur=o("layoutlm"),Nur=o(" \u2014 "),pJ=a("a"),qur=o("LayoutLMForQuestionAnswering"),jur=o(" (LayoutLM model)"),Dur=l(),$E=a("li"),AMe=a("strong"),Gur=o("layoutlmv2"),Our=o(" \u2014 "),_J=a("a"),Vur=o("LayoutLMv2ForQuestionAnswering"),Xur=o(" (LayoutLMv2 model)"),zur=l(),kE=a("li"),yMe=a("strong"),Qur=o("layoutlmv3"),Wur=o(" \u2014 "),bJ=a("a"),Uur=o("LayoutLMv3ForQuestionAnswering"),Hur=o(" (LayoutLMv3 model)"),Jur=l(),SE=a("p"),Yur=o("The model is set in evaluation mode by default using "),LMe=a("code"),Kur=o("model.eval()"),Zur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xMe=a("code"),epr=o("model.train()"),opr=l(),F(RE.$$.fragment),rYe=l(),Yd=a("h2"),PE=a("a"),$Me=a("span"),F(jx.$$.fragment),rpr=l(),kMe=a("span"),tpr=o("AutoModelForImageClassification"),tYe=l(),Qo=a("div"),F(Dx.$$.fragment),apr=l(),Kd=a("p"),npr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vJ=a("a"),spr=o("from_pretrained()"),lpr=o(" class method or the "),FJ=a("a"),ipr=o("from_config()"),dpr=o(` class
method.`),cpr=l(),Gx=a("p"),mpr=o("This class cannot be instantiated directly using "),SMe=a("code"),fpr=o("__init__()"),gpr=o(" (throws an error)."),hpr=l(),Lt=a("div"),F(Ox.$$.fragment),upr=l(),RMe=a("p"),ppr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_pr=l(),Zd=a("p"),bpr=o(`Note:
Loading a model from its configuration file does `),PMe=a("strong"),vpr=o("not"),Fpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),Tpr=o("from_pretrained()"),Mpr=o(" to load the model weights."),Epr=l(),F(BE.$$.fragment),Cpr=l(),mo=a("div"),F(Vx.$$.fragment),wpr=l(),BMe=a("p"),Apr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ypr=l(),dn=a("p"),Lpr=o("The model class to instantiate is selected based on the "),IMe=a("code"),xpr=o("model_type"),$pr=o(` property of the config object (either
passed as an argument or loaded from `),NMe=a("code"),kpr=o("pretrained_model_name_or_path"),Spr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=a("code"),Rpr=o("pretrained_model_name_or_path"),Ppr=o(":"),Bpr=l(),be=a("ul"),IE=a("li"),jMe=a("strong"),Ipr=o("beit"),Npr=o(" \u2014 "),MJ=a("a"),qpr=o("BeitForImageClassification"),jpr=o(" (BEiT model)"),Dpr=l(),NE=a("li"),DMe=a("strong"),Gpr=o("convnext"),Opr=o(" \u2014 "),EJ=a("a"),Vpr=o("ConvNextForImageClassification"),Xpr=o(" (ConvNeXT model)"),zpr=l(),qE=a("li"),GMe=a("strong"),Qpr=o("cvt"),Wpr=o(" \u2014 "),CJ=a("a"),Upr=o("CvtForImageClassification"),Hpr=o(" (CvT model)"),Jpr=l(),jE=a("li"),OMe=a("strong"),Ypr=o("data2vec-vision"),Kpr=o(" \u2014 "),wJ=a("a"),Zpr=o("Data2VecVisionForImageClassification"),e_r=o(" (Data2VecVision model)"),o_r=l(),ul=a("li"),VMe=a("strong"),r_r=o("deit"),t_r=o(" \u2014 "),AJ=a("a"),a_r=o("DeiTForImageClassification"),n_r=o(" or "),yJ=a("a"),s_r=o("DeiTForImageClassificationWithTeacher"),l_r=o(" (DeiT model)"),i_r=l(),DE=a("li"),XMe=a("strong"),d_r=o("imagegpt"),c_r=o(" \u2014 "),LJ=a("a"),m_r=o("ImageGPTForImageClassification"),f_r=o(" (ImageGPT model)"),g_r=l(),pl=a("li"),zMe=a("strong"),h_r=o("levit"),u_r=o(" \u2014 "),xJ=a("a"),p_r=o("LevitForImageClassification"),__r=o(" or "),$J=a("a"),b_r=o("LevitForImageClassificationWithTeacher"),v_r=o(" (LeViT model)"),F_r=l(),GE=a("li"),QMe=a("strong"),T_r=o("mobilevit"),M_r=o(" \u2014 "),kJ=a("a"),E_r=o("MobileViTForImageClassification"),C_r=o(" (MobileViT model)"),w_r=l(),xt=a("li"),WMe=a("strong"),A_r=o("perceiver"),y_r=o(" \u2014 "),SJ=a("a"),L_r=o("PerceiverForImageClassificationLearned"),x_r=o(" or "),RJ=a("a"),$_r=o("PerceiverForImageClassificationFourier"),k_r=o(" or "),PJ=a("a"),S_r=o("PerceiverForImageClassificationConvProcessing"),R_r=o(" (Perceiver model)"),P_r=l(),OE=a("li"),UMe=a("strong"),B_r=o("poolformer"),I_r=o(" \u2014 "),BJ=a("a"),N_r=o("PoolFormerForImageClassification"),q_r=o(" (PoolFormer model)"),j_r=l(),VE=a("li"),HMe=a("strong"),D_r=o("regnet"),G_r=o(" \u2014 "),IJ=a("a"),O_r=o("RegNetForImageClassification"),V_r=o(" (RegNet model)"),X_r=l(),XE=a("li"),JMe=a("strong"),z_r=o("resnet"),Q_r=o(" \u2014 "),NJ=a("a"),W_r=o("ResNetForImageClassification"),U_r=o(" (ResNet model)"),H_r=l(),zE=a("li"),YMe=a("strong"),J_r=o("segformer"),Y_r=o(" \u2014 "),qJ=a("a"),K_r=o("SegformerForImageClassification"),Z_r=o(" (SegFormer model)"),ebr=l(),QE=a("li"),KMe=a("strong"),obr=o("swin"),rbr=o(" \u2014 "),jJ=a("a"),tbr=o("SwinForImageClassification"),abr=o(" (Swin Transformer model)"),nbr=l(),WE=a("li"),ZMe=a("strong"),sbr=o("swinv2"),lbr=o(" \u2014 "),DJ=a("a"),ibr=o("Swinv2ForImageClassification"),dbr=o(" (Swin Transformer V2 model)"),cbr=l(),UE=a("li"),eEe=a("strong"),mbr=o("van"),fbr=o(" \u2014 "),GJ=a("a"),gbr=o("VanForImageClassification"),hbr=o(" (VAN model)"),ubr=l(),HE=a("li"),oEe=a("strong"),pbr=o("vit"),_br=o(" \u2014 "),OJ=a("a"),bbr=o("ViTForImageClassification"),vbr=o(" (ViT model)"),Fbr=l(),JE=a("p"),Tbr=o("The model is set in evaluation mode by default using "),rEe=a("code"),Mbr=o("model.eval()"),Ebr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tEe=a("code"),Cbr=o("model.train()"),wbr=l(),F(YE.$$.fragment),aYe=l(),ec=a("h2"),KE=a("a"),aEe=a("span"),F(Xx.$$.fragment),Abr=l(),nEe=a("span"),ybr=o("AutoModelForVideoClassification"),nYe=l(),Wo=a("div"),F(zx.$$.fragment),Lbr=l(),oc=a("p"),xbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),VJ=a("a"),$br=o("from_pretrained()"),kbr=o(" class method or the "),XJ=a("a"),Sbr=o("from_config()"),Rbr=o(` class
method.`),Pbr=l(),Qx=a("p"),Bbr=o("This class cannot be instantiated directly using "),sEe=a("code"),Ibr=o("__init__()"),Nbr=o(" (throws an error)."),qbr=l(),$t=a("div"),F(Wx.$$.fragment),jbr=l(),lEe=a("p"),Dbr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Gbr=l(),rc=a("p"),Obr=o(`Note:
Loading a model from its configuration file does `),iEe=a("strong"),Vbr=o("not"),Xbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),zbr=o("from_pretrained()"),Qbr=o(" to load the model weights."),Wbr=l(),F(ZE.$$.fragment),Ubr=l(),fo=a("div"),F(Ux.$$.fragment),Hbr=l(),dEe=a("p"),Jbr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Ybr=l(),cn=a("p"),Kbr=o("The model class to instantiate is selected based on the "),cEe=a("code"),Zbr=o("model_type"),e2r=o(` property of the config object (either
passed as an argument or loaded from `),mEe=a("code"),o2r=o("pretrained_model_name_or_path"),r2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=a("code"),t2r=o("pretrained_model_name_or_path"),a2r=o(":"),n2r=l(),gEe=a("ul"),e4=a("li"),hEe=a("strong"),s2r=o("videomae"),l2r=o(" \u2014 "),QJ=a("a"),i2r=o("VideoMAEForVideoClassification"),d2r=o(" (VideoMAE model)"),c2r=l(),o4=a("p"),m2r=o("The model is set in evaluation mode by default using "),uEe=a("code"),f2r=o("model.eval()"),g2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pEe=a("code"),h2r=o("model.train()"),u2r=l(),F(r4.$$.fragment),sYe=l(),tc=a("h2"),t4=a("a"),_Ee=a("span"),F(Hx.$$.fragment),p2r=l(),bEe=a("span"),_2r=o("AutoModelForVision2Seq"),lYe=l(),Uo=a("div"),F(Jx.$$.fragment),b2r=l(),ac=a("p"),v2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WJ=a("a"),F2r=o("from_pretrained()"),T2r=o(" class method or the "),UJ=a("a"),M2r=o("from_config()"),E2r=o(` class
method.`),C2r=l(),Yx=a("p"),w2r=o("This class cannot be instantiated directly using "),vEe=a("code"),A2r=o("__init__()"),y2r=o(" (throws an error)."),L2r=l(),kt=a("div"),F(Kx.$$.fragment),x2r=l(),FEe=a("p"),$2r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),k2r=l(),nc=a("p"),S2r=o(`Note:
Loading a model from its configuration file does `),TEe=a("strong"),R2r=o("not"),P2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=a("a"),B2r=o("from_pretrained()"),I2r=o(" to load the model weights."),N2r=l(),F(a4.$$.fragment),q2r=l(),go=a("div"),F(Zx.$$.fragment),j2r=l(),MEe=a("p"),D2r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),G2r=l(),mn=a("p"),O2r=o("The model class to instantiate is selected based on the "),EEe=a("code"),V2r=o("model_type"),X2r=o(` property of the config object (either
passed as an argument or loaded from `),CEe=a("code"),z2r=o("pretrained_model_name_or_path"),Q2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=a("code"),W2r=o("pretrained_model_name_or_path"),U2r=o(":"),H2r=l(),AEe=a("ul"),n4=a("li"),yEe=a("strong"),J2r=o("vision-encoder-decoder"),Y2r=o(" \u2014 "),JJ=a("a"),K2r=o("VisionEncoderDecoderModel"),Z2r=o(" (Vision Encoder decoder model)"),evr=l(),s4=a("p"),ovr=o("The model is set in evaluation mode by default using "),LEe=a("code"),rvr=o("model.eval()"),tvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xEe=a("code"),avr=o("model.train()"),nvr=l(),F(l4.$$.fragment),iYe=l(),sc=a("h2"),i4=a("a"),$Ee=a("span"),F(e$.$$.fragment),svr=l(),kEe=a("span"),lvr=o("AutoModelForVisualQuestionAnswering"),dYe=l(),Ho=a("div"),F(o$.$$.fragment),ivr=l(),lc=a("p"),dvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),YJ=a("a"),cvr=o("from_pretrained()"),mvr=o(" class method or the "),KJ=a("a"),fvr=o("from_config()"),gvr=o(` class
method.`),hvr=l(),r$=a("p"),uvr=o("This class cannot be instantiated directly using "),SEe=a("code"),pvr=o("__init__()"),_vr=o(" (throws an error)."),bvr=l(),St=a("div"),F(t$.$$.fragment),vvr=l(),REe=a("p"),Fvr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Tvr=l(),ic=a("p"),Mvr=o(`Note:
Loading a model from its configuration file does `),PEe=a("strong"),Evr=o("not"),Cvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),wvr=o("from_pretrained()"),Avr=o(" to load the model weights."),yvr=l(),F(d4.$$.fragment),Lvr=l(),ho=a("div"),F(a$.$$.fragment),xvr=l(),BEe=a("p"),$vr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),kvr=l(),fn=a("p"),Svr=o("The model class to instantiate is selected based on the "),IEe=a("code"),Rvr=o("model_type"),Pvr=o(` property of the config object (either
passed as an argument or loaded from `),NEe=a("code"),Bvr=o("pretrained_model_name_or_path"),Ivr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=a("code"),Nvr=o("pretrained_model_name_or_path"),qvr=o(":"),jvr=l(),jEe=a("ul"),c4=a("li"),DEe=a("strong"),Dvr=o("vilt"),Gvr=o(" \u2014 "),eY=a("a"),Ovr=o("ViltForQuestionAnswering"),Vvr=o(" (ViLT model)"),Xvr=l(),m4=a("p"),zvr=o("The model is set in evaluation mode by default using "),GEe=a("code"),Qvr=o("model.eval()"),Wvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OEe=a("code"),Uvr=o("model.train()"),Hvr=l(),F(f4.$$.fragment),cYe=l(),dc=a("h2"),g4=a("a"),VEe=a("span"),F(n$.$$.fragment),Jvr=l(),XEe=a("span"),Yvr=o("AutoModelForAudioClassification"),mYe=l(),Jo=a("div"),F(s$.$$.fragment),Kvr=l(),cc=a("p"),Zvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oY=a("a"),e1r=o("from_pretrained()"),o1r=o(" class method or the "),rY=a("a"),r1r=o("from_config()"),t1r=o(` class
method.`),a1r=l(),l$=a("p"),n1r=o("This class cannot be instantiated directly using "),zEe=a("code"),s1r=o("__init__()"),l1r=o(" (throws an error)."),i1r=l(),Rt=a("div"),F(i$.$$.fragment),d1r=l(),QEe=a("p"),c1r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),m1r=l(),mc=a("p"),f1r=o(`Note:
Loading a model from its configuration file does `),WEe=a("strong"),g1r=o("not"),h1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=a("a"),u1r=o("from_pretrained()"),p1r=o(" to load the model weights."),_1r=l(),F(h4.$$.fragment),b1r=l(),uo=a("div"),F(d$.$$.fragment),v1r=l(),UEe=a("p"),F1r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),T1r=l(),gn=a("p"),M1r=o("The model class to instantiate is selected based on the "),HEe=a("code"),E1r=o("model_type"),C1r=o(` property of the config object (either
passed as an argument or loaded from `),JEe=a("code"),w1r=o("pretrained_model_name_or_path"),A1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YEe=a("code"),y1r=o("pretrained_model_name_or_path"),L1r=o(":"),x1r=l(),Pe=a("ul"),u4=a("li"),KEe=a("strong"),$1r=o("data2vec-audio"),k1r=o(" \u2014 "),aY=a("a"),S1r=o("Data2VecAudioForSequenceClassification"),R1r=o(" (Data2VecAudio model)"),P1r=l(),p4=a("li"),ZEe=a("strong"),B1r=o("hubert"),I1r=o(" \u2014 "),nY=a("a"),N1r=o("HubertForSequenceClassification"),q1r=o(" (Hubert model)"),j1r=l(),_4=a("li"),e4e=a("strong"),D1r=o("sew"),G1r=o(" \u2014 "),sY=a("a"),O1r=o("SEWForSequenceClassification"),V1r=o(" (SEW model)"),X1r=l(),b4=a("li"),o4e=a("strong"),z1r=o("sew-d"),Q1r=o(" \u2014 "),lY=a("a"),W1r=o("SEWDForSequenceClassification"),U1r=o(" (SEW-D model)"),H1r=l(),v4=a("li"),r4e=a("strong"),J1r=o("unispeech"),Y1r=o(" \u2014 "),iY=a("a"),K1r=o("UniSpeechForSequenceClassification"),Z1r=o(" (UniSpeech model)"),eFr=l(),F4=a("li"),t4e=a("strong"),oFr=o("unispeech-sat"),rFr=o(" \u2014 "),dY=a("a"),tFr=o("UniSpeechSatForSequenceClassification"),aFr=o(" (UniSpeechSat model)"),nFr=l(),T4=a("li"),a4e=a("strong"),sFr=o("wav2vec2"),lFr=o(" \u2014 "),cY=a("a"),iFr=o("Wav2Vec2ForSequenceClassification"),dFr=o(" (Wav2Vec2 model)"),cFr=l(),M4=a("li"),n4e=a("strong"),mFr=o("wav2vec2-conformer"),fFr=o(" \u2014 "),mY=a("a"),gFr=o("Wav2Vec2ConformerForSequenceClassification"),hFr=o(" (Wav2Vec2-Conformer model)"),uFr=l(),E4=a("li"),s4e=a("strong"),pFr=o("wavlm"),_Fr=o(" \u2014 "),fY=a("a"),bFr=o("WavLMForSequenceClassification"),vFr=o(" (WavLM model)"),FFr=l(),C4=a("p"),TFr=o("The model is set in evaluation mode by default using "),l4e=a("code"),MFr=o("model.eval()"),EFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i4e=a("code"),CFr=o("model.train()"),wFr=l(),F(w4.$$.fragment),fYe=l(),fc=a("h2"),A4=a("a"),d4e=a("span"),F(c$.$$.fragment),AFr=l(),c4e=a("span"),yFr=o("AutoModelForAudioFrameClassification"),gYe=l(),Yo=a("div"),F(m$.$$.fragment),LFr=l(),gc=a("p"),xFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gY=a("a"),$Fr=o("from_pretrained()"),kFr=o(" class method or the "),hY=a("a"),SFr=o("from_config()"),RFr=o(` class
method.`),PFr=l(),f$=a("p"),BFr=o("This class cannot be instantiated directly using "),m4e=a("code"),IFr=o("__init__()"),NFr=o(" (throws an error)."),qFr=l(),Pt=a("div"),F(g$.$$.fragment),jFr=l(),f4e=a("p"),DFr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),GFr=l(),hc=a("p"),OFr=o(`Note:
Loading a model from its configuration file does `),g4e=a("strong"),VFr=o("not"),XFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=a("a"),zFr=o("from_pretrained()"),QFr=o(" to load the model weights."),WFr=l(),F(y4.$$.fragment),UFr=l(),po=a("div"),F(h$.$$.fragment),HFr=l(),h4e=a("p"),JFr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),YFr=l(),hn=a("p"),KFr=o("The model class to instantiate is selected based on the "),u4e=a("code"),ZFr=o("model_type"),eTr=o(` property of the config object (either
passed as an argument or loaded from `),p4e=a("code"),oTr=o("pretrained_model_name_or_path"),rTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=a("code"),tTr=o("pretrained_model_name_or_path"),aTr=o(":"),nTr=l(),ct=a("ul"),L4=a("li"),b4e=a("strong"),sTr=o("data2vec-audio"),lTr=o(" \u2014 "),pY=a("a"),iTr=o("Data2VecAudioForAudioFrameClassification"),dTr=o(" (Data2VecAudio model)"),cTr=l(),x4=a("li"),v4e=a("strong"),mTr=o("unispeech-sat"),fTr=o(" \u2014 "),_Y=a("a"),gTr=o("UniSpeechSatForAudioFrameClassification"),hTr=o(" (UniSpeechSat model)"),uTr=l(),$4=a("li"),F4e=a("strong"),pTr=o("wav2vec2"),_Tr=o(" \u2014 "),bY=a("a"),bTr=o("Wav2Vec2ForAudioFrameClassification"),vTr=o(" (Wav2Vec2 model)"),FTr=l(),k4=a("li"),T4e=a("strong"),TTr=o("wav2vec2-conformer"),MTr=o(" \u2014 "),vY=a("a"),ETr=o("Wav2Vec2ConformerForAudioFrameClassification"),CTr=o(" (Wav2Vec2-Conformer model)"),wTr=l(),S4=a("li"),M4e=a("strong"),ATr=o("wavlm"),yTr=o(" \u2014 "),FY=a("a"),LTr=o("WavLMForAudioFrameClassification"),xTr=o(" (WavLM model)"),$Tr=l(),R4=a("p"),kTr=o("The model is set in evaluation mode by default using "),E4e=a("code"),STr=o("model.eval()"),RTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C4e=a("code"),PTr=o("model.train()"),BTr=l(),F(P4.$$.fragment),hYe=l(),uc=a("h2"),B4=a("a"),w4e=a("span"),F(u$.$$.fragment),ITr=l(),A4e=a("span"),NTr=o("AutoModelForCTC"),uYe=l(),Ko=a("div"),F(p$.$$.fragment),qTr=l(),pc=a("p"),jTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),TY=a("a"),DTr=o("from_pretrained()"),GTr=o(" class method or the "),MY=a("a"),OTr=o("from_config()"),VTr=o(` class
method.`),XTr=l(),_$=a("p"),zTr=o("This class cannot be instantiated directly using "),y4e=a("code"),QTr=o("__init__()"),WTr=o(" (throws an error)."),UTr=l(),Bt=a("div"),F(b$.$$.fragment),HTr=l(),L4e=a("p"),JTr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),YTr=l(),_c=a("p"),KTr=o(`Note:
Loading a model from its configuration file does `),x4e=a("strong"),ZTr=o("not"),eMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),oMr=o("from_pretrained()"),rMr=o(" to load the model weights."),tMr=l(),F(I4.$$.fragment),aMr=l(),_o=a("div"),F(v$.$$.fragment),nMr=l(),$4e=a("p"),sMr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),lMr=l(),un=a("p"),iMr=o("The model class to instantiate is selected based on the "),k4e=a("code"),dMr=o("model_type"),cMr=o(` property of the config object (either
passed as an argument or loaded from `),S4e=a("code"),mMr=o("pretrained_model_name_or_path"),fMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=a("code"),gMr=o("pretrained_model_name_or_path"),hMr=o(":"),uMr=l(),ye=a("ul"),N4=a("li"),P4e=a("strong"),pMr=o("data2vec-audio"),_Mr=o(" \u2014 "),CY=a("a"),bMr=o("Data2VecAudioForCTC"),vMr=o(" (Data2VecAudio model)"),FMr=l(),q4=a("li"),B4e=a("strong"),TMr=o("hubert"),MMr=o(" \u2014 "),wY=a("a"),EMr=o("HubertForCTC"),CMr=o(" (Hubert model)"),wMr=l(),j4=a("li"),I4e=a("strong"),AMr=o("mctct"),yMr=o(" \u2014 "),AY=a("a"),LMr=o("MCTCTForCTC"),xMr=o(" (M-CTC-T model)"),$Mr=l(),D4=a("li"),N4e=a("strong"),kMr=o("sew"),SMr=o(" \u2014 "),yY=a("a"),RMr=o("SEWForCTC"),PMr=o(" (SEW model)"),BMr=l(),G4=a("li"),q4e=a("strong"),IMr=o("sew-d"),NMr=o(" \u2014 "),LY=a("a"),qMr=o("SEWDForCTC"),jMr=o(" (SEW-D model)"),DMr=l(),O4=a("li"),j4e=a("strong"),GMr=o("unispeech"),OMr=o(" \u2014 "),xY=a("a"),VMr=o("UniSpeechForCTC"),XMr=o(" (UniSpeech model)"),zMr=l(),V4=a("li"),D4e=a("strong"),QMr=o("unispeech-sat"),WMr=o(" \u2014 "),$Y=a("a"),UMr=o("UniSpeechSatForCTC"),HMr=o(" (UniSpeechSat model)"),JMr=l(),X4=a("li"),G4e=a("strong"),YMr=o("wav2vec2"),KMr=o(" \u2014 "),kY=a("a"),ZMr=o("Wav2Vec2ForCTC"),eEr=o(" (Wav2Vec2 model)"),oEr=l(),z4=a("li"),O4e=a("strong"),rEr=o("wav2vec2-conformer"),tEr=o(" \u2014 "),SY=a("a"),aEr=o("Wav2Vec2ConformerForCTC"),nEr=o(" (Wav2Vec2-Conformer model)"),sEr=l(),Q4=a("li"),V4e=a("strong"),lEr=o("wavlm"),iEr=o(" \u2014 "),RY=a("a"),dEr=o("WavLMForCTC"),cEr=o(" (WavLM model)"),mEr=l(),W4=a("p"),fEr=o("The model is set in evaluation mode by default using "),X4e=a("code"),gEr=o("model.eval()"),hEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z4e=a("code"),uEr=o("model.train()"),pEr=l(),F(U4.$$.fragment),pYe=l(),bc=a("h2"),H4=a("a"),Q4e=a("span"),F(F$.$$.fragment),_Er=l(),W4e=a("span"),bEr=o("AutoModelForSpeechSeq2Seq"),_Ye=l(),Zo=a("div"),F(T$.$$.fragment),vEr=l(),vc=a("p"),FEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PY=a("a"),TEr=o("from_pretrained()"),MEr=o(" class method or the "),BY=a("a"),EEr=o("from_config()"),CEr=o(` class
method.`),wEr=l(),M$=a("p"),AEr=o("This class cannot be instantiated directly using "),U4e=a("code"),yEr=o("__init__()"),LEr=o(" (throws an error)."),xEr=l(),It=a("div"),F(E$.$$.fragment),$Er=l(),H4e=a("p"),kEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),SEr=l(),Fc=a("p"),REr=o(`Note:
Loading a model from its configuration file does `),J4e=a("strong"),PEr=o("not"),BEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("a"),IEr=o("from_pretrained()"),NEr=o(" to load the model weights."),qEr=l(),F(J4.$$.fragment),jEr=l(),bo=a("div"),F(C$.$$.fragment),DEr=l(),Y4e=a("p"),GEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),OEr=l(),pn=a("p"),VEr=o("The model class to instantiate is selected based on the "),K4e=a("code"),XEr=o("model_type"),zEr=o(` property of the config object (either
passed as an argument or loaded from `),Z4e=a("code"),QEr=o("pretrained_model_name_or_path"),WEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eCe=a("code"),UEr=o("pretrained_model_name_or_path"),HEr=o(":"),JEr=l(),w$=a("ul"),Y4=a("li"),oCe=a("strong"),YEr=o("speech-encoder-decoder"),KEr=o(" \u2014 "),NY=a("a"),ZEr=o("SpeechEncoderDecoderModel"),e4r=o(" (Speech Encoder decoder model)"),o4r=l(),K4=a("li"),rCe=a("strong"),r4r=o("speech_to_text"),t4r=o(" \u2014 "),qY=a("a"),a4r=o("Speech2TextForConditionalGeneration"),n4r=o(" (Speech2Text model)"),s4r=l(),Z4=a("p"),l4r=o("The model is set in evaluation mode by default using "),tCe=a("code"),i4r=o("model.eval()"),d4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aCe=a("code"),c4r=o("model.train()"),m4r=l(),F(eC.$$.fragment),bYe=l(),Tc=a("h2"),oC=a("a"),nCe=a("span"),F(A$.$$.fragment),f4r=l(),sCe=a("span"),g4r=o("AutoModelForAudioXVector"),vYe=l(),er=a("div"),F(y$.$$.fragment),h4r=l(),Mc=a("p"),u4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jY=a("a"),p4r=o("from_pretrained()"),_4r=o(" class method or the "),DY=a("a"),b4r=o("from_config()"),v4r=o(` class
method.`),F4r=l(),L$=a("p"),T4r=o("This class cannot be instantiated directly using "),lCe=a("code"),M4r=o("__init__()"),E4r=o(" (throws an error)."),C4r=l(),Nt=a("div"),F(x$.$$.fragment),w4r=l(),iCe=a("p"),A4r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),y4r=l(),Ec=a("p"),L4r=o(`Note:
Loading a model from its configuration file does `),dCe=a("strong"),x4r=o("not"),$4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=a("a"),k4r=o("from_pretrained()"),S4r=o(" to load the model weights."),R4r=l(),F(rC.$$.fragment),P4r=l(),vo=a("div"),F($$.$$.fragment),B4r=l(),cCe=a("p"),I4r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),N4r=l(),_n=a("p"),q4r=o("The model class to instantiate is selected based on the "),mCe=a("code"),j4r=o("model_type"),D4r=o(` property of the config object (either
passed as an argument or loaded from `),fCe=a("code"),G4r=o("pretrained_model_name_or_path"),O4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=a("code"),V4r=o("pretrained_model_name_or_path"),X4r=o(":"),z4r=l(),mt=a("ul"),tC=a("li"),hCe=a("strong"),Q4r=o("data2vec-audio"),W4r=o(" \u2014 "),OY=a("a"),U4r=o("Data2VecAudioForXVector"),H4r=o(" (Data2VecAudio model)"),J4r=l(),aC=a("li"),uCe=a("strong"),Y4r=o("unispeech-sat"),K4r=o(" \u2014 "),VY=a("a"),Z4r=o("UniSpeechSatForXVector"),eCr=o(" (UniSpeechSat model)"),oCr=l(),nC=a("li"),pCe=a("strong"),rCr=o("wav2vec2"),tCr=o(" \u2014 "),XY=a("a"),aCr=o("Wav2Vec2ForXVector"),nCr=o(" (Wav2Vec2 model)"),sCr=l(),sC=a("li"),_Ce=a("strong"),lCr=o("wav2vec2-conformer"),iCr=o(" \u2014 "),zY=a("a"),dCr=o("Wav2Vec2ConformerForXVector"),cCr=o(" (Wav2Vec2-Conformer model)"),mCr=l(),lC=a("li"),bCe=a("strong"),fCr=o("wavlm"),gCr=o(" \u2014 "),QY=a("a"),hCr=o("WavLMForXVector"),uCr=o(" (WavLM model)"),pCr=l(),iC=a("p"),_Cr=o("The model is set in evaluation mode by default using "),vCe=a("code"),bCr=o("model.eval()"),vCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FCe=a("code"),FCr=o("model.train()"),TCr=l(),F(dC.$$.fragment),FYe=l(),Cc=a("h2"),cC=a("a"),TCe=a("span"),F(k$.$$.fragment),MCr=l(),MCe=a("span"),ECr=o("AutoModelForMaskedImageModeling"),TYe=l(),or=a("div"),F(S$.$$.fragment),CCr=l(),wc=a("p"),wCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),WY=a("a"),ACr=o("from_pretrained()"),yCr=o(" class method or the "),UY=a("a"),LCr=o("from_config()"),xCr=o(` class
method.`),$Cr=l(),R$=a("p"),kCr=o("This class cannot be instantiated directly using "),ECe=a("code"),SCr=o("__init__()"),RCr=o(" (throws an error)."),PCr=l(),qt=a("div"),F(P$.$$.fragment),BCr=l(),CCe=a("p"),ICr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),NCr=l(),Ac=a("p"),qCr=o(`Note:
Loading a model from its configuration file does `),wCe=a("strong"),jCr=o("not"),DCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=a("a"),GCr=o("from_pretrained()"),OCr=o(" to load the model weights."),VCr=l(),F(mC.$$.fragment),XCr=l(),Fo=a("div"),F(B$.$$.fragment),zCr=l(),ACe=a("p"),QCr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),WCr=l(),bn=a("p"),UCr=o("The model class to instantiate is selected based on the "),yCe=a("code"),HCr=o("model_type"),JCr=o(` property of the config object (either
passed as an argument or loaded from `),LCe=a("code"),YCr=o("pretrained_model_name_or_path"),KCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=a("code"),ZCr=o("pretrained_model_name_or_path"),e3r=o(":"),o3r=l(),vn=a("ul"),fC=a("li"),$Ce=a("strong"),r3r=o("deit"),t3r=o(" \u2014 "),JY=a("a"),a3r=o("DeiTForMaskedImageModeling"),n3r=o(" (DeiT model)"),s3r=l(),gC=a("li"),kCe=a("strong"),l3r=o("swin"),i3r=o(" \u2014 "),YY=a("a"),d3r=o("SwinForMaskedImageModeling"),c3r=o(" (Swin Transformer model)"),m3r=l(),hC=a("li"),SCe=a("strong"),f3r=o("swinv2"),g3r=o(" \u2014 "),KY=a("a"),h3r=o("Swinv2ForMaskedImageModeling"),u3r=o(" (Swin Transformer V2 model)"),p3r=l(),uC=a("li"),RCe=a("strong"),_3r=o("vit"),b3r=o(" \u2014 "),ZY=a("a"),v3r=o("ViTForMaskedImageModeling"),F3r=o(" (ViT model)"),T3r=l(),pC=a("p"),M3r=o("The model is set in evaluation mode by default using "),PCe=a("code"),E3r=o("model.eval()"),C3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BCe=a("code"),w3r=o("model.train()"),A3r=l(),F(_C.$$.fragment),MYe=l(),yc=a("h2"),bC=a("a"),ICe=a("span"),F(I$.$$.fragment),y3r=l(),NCe=a("span"),L3r=o("AutoModelForObjectDetection"),EYe=l(),rr=a("div"),F(N$.$$.fragment),x3r=l(),Lc=a("p"),$3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eK=a("a"),k3r=o("from_pretrained()"),S3r=o(" class method or the "),oK=a("a"),R3r=o("from_config()"),P3r=o(` class
method.`),B3r=l(),q$=a("p"),I3r=o("This class cannot be instantiated directly using "),qCe=a("code"),N3r=o("__init__()"),q3r=o(" (throws an error)."),j3r=l(),jt=a("div"),F(j$.$$.fragment),D3r=l(),jCe=a("p"),G3r=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),O3r=l(),xc=a("p"),V3r=o(`Note:
Loading a model from its configuration file does `),DCe=a("strong"),X3r=o("not"),z3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),Q3r=o("from_pretrained()"),W3r=o(" to load the model weights."),U3r=l(),F(vC.$$.fragment),H3r=l(),To=a("div"),F(D$.$$.fragment),J3r=l(),GCe=a("p"),Y3r=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),K3r=l(),Fn=a("p"),Z3r=o("The model class to instantiate is selected based on the "),OCe=a("code"),e5r=o("model_type"),o5r=o(` property of the config object (either
passed as an argument or loaded from `),VCe=a("code"),r5r=o("pretrained_model_name_or_path"),t5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=a("code"),a5r=o("pretrained_model_name_or_path"),n5r=o(":"),s5r=l(),G$=a("ul"),FC=a("li"),zCe=a("strong"),l5r=o("detr"),i5r=o(" \u2014 "),tK=a("a"),d5r=o("DetrForObjectDetection"),c5r=o(" (DETR model)"),m5r=l(),TC=a("li"),QCe=a("strong"),f5r=o("yolos"),g5r=o(" \u2014 "),aK=a("a"),h5r=o("YolosForObjectDetection"),u5r=o(" (YOLOS model)"),p5r=l(),MC=a("p"),_5r=o("The model is set in evaluation mode by default using "),WCe=a("code"),b5r=o("model.eval()"),v5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UCe=a("code"),F5r=o("model.train()"),T5r=l(),F(EC.$$.fragment),CYe=l(),$c=a("h2"),CC=a("a"),HCe=a("span"),F(O$.$$.fragment),M5r=l(),JCe=a("span"),E5r=o("AutoModelForImageSegmentation"),wYe=l(),tr=a("div"),F(V$.$$.fragment),C5r=l(),kc=a("p"),w5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nK=a("a"),A5r=o("from_pretrained()"),y5r=o(" class method or the "),sK=a("a"),L5r=o("from_config()"),x5r=o(` class
method.`),$5r=l(),X$=a("p"),k5r=o("This class cannot be instantiated directly using "),YCe=a("code"),S5r=o("__init__()"),R5r=o(" (throws an error)."),P5r=l(),Dt=a("div"),F(z$.$$.fragment),B5r=l(),KCe=a("p"),I5r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),N5r=l(),Sc=a("p"),q5r=o(`Note:
Loading a model from its configuration file does `),ZCe=a("strong"),j5r=o("not"),D5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=a("a"),G5r=o("from_pretrained()"),O5r=o(" to load the model weights."),V5r=l(),F(wC.$$.fragment),X5r=l(),Mo=a("div"),F(Q$.$$.fragment),z5r=l(),e3e=a("p"),Q5r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),W5r=l(),Tn=a("p"),U5r=o("The model class to instantiate is selected based on the "),o3e=a("code"),H5r=o("model_type"),J5r=o(` property of the config object (either
passed as an argument or loaded from `),r3e=a("code"),Y5r=o("pretrained_model_name_or_path"),K5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t3e=a("code"),Z5r=o("pretrained_model_name_or_path"),e0r=o(":"),o0r=l(),a3e=a("ul"),AC=a("li"),n3e=a("strong"),r0r=o("detr"),t0r=o(" \u2014 "),iK=a("a"),a0r=o("DetrForSegmentation"),n0r=o(" (DETR model)"),s0r=l(),yC=a("p"),l0r=o("The model is set in evaluation mode by default using "),s3e=a("code"),i0r=o("model.eval()"),d0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l3e=a("code"),c0r=o("model.train()"),m0r=l(),F(LC.$$.fragment),AYe=l(),Rc=a("h2"),xC=a("a"),i3e=a("span"),F(W$.$$.fragment),f0r=l(),d3e=a("span"),g0r=o("AutoModelForSemanticSegmentation"),yYe=l(),ar=a("div"),F(U$.$$.fragment),h0r=l(),Pc=a("p"),u0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dK=a("a"),p0r=o("from_pretrained()"),_0r=o(" class method or the "),cK=a("a"),b0r=o("from_config()"),v0r=o(` class
method.`),F0r=l(),H$=a("p"),T0r=o("This class cannot be instantiated directly using "),c3e=a("code"),M0r=o("__init__()"),E0r=o(" (throws an error)."),C0r=l(),Gt=a("div"),F(J$.$$.fragment),w0r=l(),m3e=a("p"),A0r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),y0r=l(),Bc=a("p"),L0r=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),x0r=o("not"),$0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=a("a"),k0r=o("from_pretrained()"),S0r=o(" to load the model weights."),R0r=l(),F($C.$$.fragment),P0r=l(),Eo=a("div"),F(Y$.$$.fragment),B0r=l(),g3e=a("p"),I0r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),N0r=l(),Mn=a("p"),q0r=o("The model class to instantiate is selected based on the "),h3e=a("code"),j0r=o("model_type"),D0r=o(` property of the config object (either
passed as an argument or loaded from `),u3e=a("code"),G0r=o("pretrained_model_name_or_path"),O0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=a("code"),V0r=o("pretrained_model_name_or_path"),X0r=o(":"),z0r=l(),ft=a("ul"),kC=a("li"),_3e=a("strong"),Q0r=o("beit"),W0r=o(" \u2014 "),fK=a("a"),U0r=o("BeitForSemanticSegmentation"),H0r=o(" (BEiT model)"),J0r=l(),SC=a("li"),b3e=a("strong"),Y0r=o("data2vec-vision"),K0r=o(" \u2014 "),gK=a("a"),Z0r=o("Data2VecVisionForSemanticSegmentation"),ewr=o(" (Data2VecVision model)"),owr=l(),RC=a("li"),v3e=a("strong"),rwr=o("dpt"),twr=o(" \u2014 "),hK=a("a"),awr=o("DPTForSemanticSegmentation"),nwr=o(" (DPT model)"),swr=l(),PC=a("li"),F3e=a("strong"),lwr=o("mobilevit"),iwr=o(" \u2014 "),uK=a("a"),dwr=o("MobileViTForSemanticSegmentation"),cwr=o(" (MobileViT model)"),mwr=l(),BC=a("li"),T3e=a("strong"),fwr=o("segformer"),gwr=o(" \u2014 "),pK=a("a"),hwr=o("SegformerForSemanticSegmentation"),uwr=o(" (SegFormer model)"),pwr=l(),IC=a("p"),_wr=o("The model is set in evaluation mode by default using "),M3e=a("code"),bwr=o("model.eval()"),vwr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E3e=a("code"),Fwr=o("model.train()"),Twr=l(),F(NC.$$.fragment),LYe=l(),Ic=a("h2"),qC=a("a"),C3e=a("span"),F(K$.$$.fragment),Mwr=l(),w3e=a("span"),Ewr=o("AutoModelForInstanceSegmentation"),xYe=l(),nr=a("div"),F(Z$.$$.fragment),Cwr=l(),Nc=a("p"),wwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_K=a("a"),Awr=o("from_pretrained()"),ywr=o(" class method or the "),bK=a("a"),Lwr=o("from_config()"),xwr=o(` class
method.`),$wr=l(),ek=a("p"),kwr=o("This class cannot be instantiated directly using "),A3e=a("code"),Swr=o("__init__()"),Rwr=o(" (throws an error)."),Pwr=l(),Ot=a("div"),F(ok.$$.fragment),Bwr=l(),y3e=a("p"),Iwr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Nwr=l(),qc=a("p"),qwr=o(`Note:
Loading a model from its configuration file does `),L3e=a("strong"),jwr=o("not"),Dwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=a("a"),Gwr=o("from_pretrained()"),Owr=o(" to load the model weights."),Vwr=l(),F(jC.$$.fragment),Xwr=l(),Co=a("div"),F(rk.$$.fragment),zwr=l(),x3e=a("p"),Qwr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Wwr=l(),En=a("p"),Uwr=o("The model class to instantiate is selected based on the "),$3e=a("code"),Hwr=o("model_type"),Jwr=o(` property of the config object (either
passed as an argument or loaded from `),k3e=a("code"),Ywr=o("pretrained_model_name_or_path"),Kwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S3e=a("code"),Zwr=o("pretrained_model_name_or_path"),eAr=o(":"),oAr=l(),R3e=a("ul"),DC=a("li"),P3e=a("strong"),rAr=o("maskformer"),tAr=o(" \u2014 "),FK=a("a"),aAr=o("MaskFormerForInstanceSegmentation"),nAr=o(" (MaskFormer model)"),sAr=l(),GC=a("p"),lAr=o("The model is set in evaluation mode by default using "),B3e=a("code"),iAr=o("model.eval()"),dAr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I3e=a("code"),cAr=o("model.train()"),mAr=l(),F(OC.$$.fragment),$Ye=l(),jc=a("h2"),VC=a("a"),N3e=a("span"),F(tk.$$.fragment),fAr=l(),q3e=a("span"),gAr=o("TFAutoModel"),kYe=l(),sr=a("div"),F(ak.$$.fragment),hAr=l(),Dc=a("p"),uAr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TK=a("a"),pAr=o("from_pretrained()"),_Ar=o(" class method or the "),MK=a("a"),bAr=o("from_config()"),vAr=o(` class
method.`),FAr=l(),nk=a("p"),TAr=o("This class cannot be instantiated directly using "),j3e=a("code"),MAr=o("__init__()"),EAr=o(" (throws an error)."),CAr=l(),Vt=a("div"),F(sk.$$.fragment),wAr=l(),D3e=a("p"),AAr=o("Instantiates one of the base model classes of the library from a configuration."),yAr=l(),Gc=a("p"),LAr=o(`Note:
Loading a model from its configuration file does `),G3e=a("strong"),xAr=o("not"),$Ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=a("a"),kAr=o("from_pretrained()"),SAr=o(" to load the model weights."),RAr=l(),F(XC.$$.fragment),PAr=l(),Ir=a("div"),F(lk.$$.fragment),BAr=l(),O3e=a("p"),IAr=o("Instantiate one of the base model classes of the library from a pretrained model."),NAr=l(),Cn=a("p"),qAr=o("The model class to instantiate is selected based on the "),V3e=a("code"),jAr=o("model_type"),DAr=o(` property of the config object (either
passed as an argument or loaded from `),X3e=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=a("code"),VAr=o("pretrained_model_name_or_path"),XAr=o(":"),zAr=l(),N=a("ul"),zC=a("li"),Q3e=a("strong"),QAr=o("albert"),WAr=o(" \u2014 "),CK=a("a"),UAr=o("TFAlbertModel"),HAr=o(" (ALBERT model)"),JAr=l(),QC=a("li"),W3e=a("strong"),YAr=o("bart"),KAr=o(" \u2014 "),wK=a("a"),ZAr=o("TFBartModel"),e6r=o(" (BART model)"),o6r=l(),WC=a("li"),U3e=a("strong"),r6r=o("bert"),t6r=o(" \u2014 "),AK=a("a"),a6r=o("TFBertModel"),n6r=o(" (BERT model)"),s6r=l(),UC=a("li"),H3e=a("strong"),l6r=o("blenderbot"),i6r=o(" \u2014 "),yK=a("a"),d6r=o("TFBlenderbotModel"),c6r=o(" (Blenderbot model)"),m6r=l(),HC=a("li"),J3e=a("strong"),f6r=o("blenderbot-small"),g6r=o(" \u2014 "),LK=a("a"),h6r=o("TFBlenderbotSmallModel"),u6r=o(" (BlenderbotSmall model)"),p6r=l(),JC=a("li"),Y3e=a("strong"),_6r=o("camembert"),b6r=o(" \u2014 "),xK=a("a"),v6r=o("TFCamembertModel"),F6r=o(" (CamemBERT model)"),T6r=l(),YC=a("li"),K3e=a("strong"),M6r=o("clip"),E6r=o(" \u2014 "),$K=a("a"),C6r=o("TFCLIPModel"),w6r=o(" (CLIP model)"),A6r=l(),KC=a("li"),Z3e=a("strong"),y6r=o("convbert"),L6r=o(" \u2014 "),kK=a("a"),x6r=o("TFConvBertModel"),$6r=o(" (ConvBERT model)"),k6r=l(),ZC=a("li"),e5e=a("strong"),S6r=o("convnext"),R6r=o(" \u2014 "),SK=a("a"),P6r=o("TFConvNextModel"),B6r=o(" (ConvNeXT model)"),I6r=l(),e3=a("li"),o5e=a("strong"),N6r=o("ctrl"),q6r=o(" \u2014 "),RK=a("a"),j6r=o("TFCTRLModel"),D6r=o(" (CTRL model)"),G6r=l(),o3=a("li"),r5e=a("strong"),O6r=o("data2vec-vision"),V6r=o(" \u2014 "),PK=a("a"),X6r=o("TFData2VecVisionModel"),z6r=o(" (Data2VecVision model)"),Q6r=l(),r3=a("li"),t5e=a("strong"),W6r=o("deberta"),U6r=o(" \u2014 "),BK=a("a"),H6r=o("TFDebertaModel"),J6r=o(" (DeBERTa model)"),Y6r=l(),t3=a("li"),a5e=a("strong"),K6r=o("deberta-v2"),Z6r=o(" \u2014 "),IK=a("a"),e7r=o("TFDebertaV2Model"),o7r=o(" (DeBERTa-v2 model)"),r7r=l(),a3=a("li"),n5e=a("strong"),t7r=o("deit"),a7r=o(" \u2014 "),NK=a("a"),n7r=o("TFDeiTModel"),s7r=o(" (DeiT model)"),l7r=l(),n3=a("li"),s5e=a("strong"),i7r=o("distilbert"),d7r=o(" \u2014 "),qK=a("a"),c7r=o("TFDistilBertModel"),m7r=o(" (DistilBERT model)"),f7r=l(),s3=a("li"),l5e=a("strong"),g7r=o("dpr"),h7r=o(" \u2014 "),jK=a("a"),u7r=o("TFDPRQuestionEncoder"),p7r=o(" (DPR model)"),_7r=l(),l3=a("li"),i5e=a("strong"),b7r=o("electra"),v7r=o(" \u2014 "),DK=a("a"),F7r=o("TFElectraModel"),T7r=o(" (ELECTRA model)"),M7r=l(),i3=a("li"),d5e=a("strong"),E7r=o("flaubert"),C7r=o(" \u2014 "),GK=a("a"),w7r=o("TFFlaubertModel"),A7r=o(" (FlauBERT model)"),y7r=l(),_l=a("li"),c5e=a("strong"),L7r=o("funnel"),x7r=o(" \u2014 "),OK=a("a"),$7r=o("TFFunnelModel"),k7r=o(" or "),VK=a("a"),S7r=o("TFFunnelBaseModel"),R7r=o(" (Funnel Transformer model)"),P7r=l(),d3=a("li"),m5e=a("strong"),B7r=o("gpt2"),I7r=o(" \u2014 "),XK=a("a"),N7r=o("TFGPT2Model"),q7r=o(" (OpenAI GPT-2 model)"),j7r=l(),c3=a("li"),f5e=a("strong"),D7r=o("gptj"),G7r=o(" \u2014 "),zK=a("a"),O7r=o("TFGPTJModel"),V7r=o(" (GPT-J model)"),X7r=l(),m3=a("li"),g5e=a("strong"),z7r=o("hubert"),Q7r=o(" \u2014 "),QK=a("a"),W7r=o("TFHubertModel"),U7r=o(" (Hubert model)"),H7r=l(),f3=a("li"),h5e=a("strong"),J7r=o("layoutlm"),Y7r=o(" \u2014 "),WK=a("a"),K7r=o("TFLayoutLMModel"),Z7r=o(" (LayoutLM model)"),eyr=l(),g3=a("li"),u5e=a("strong"),oyr=o("layoutlmv3"),ryr=o(" \u2014 "),UK=a("a"),tyr=o("TFLayoutLMv3Model"),ayr=o(" (LayoutLMv3 model)"),nyr=l(),h3=a("li"),p5e=a("strong"),syr=o("led"),lyr=o(" \u2014 "),HK=a("a"),iyr=o("TFLEDModel"),dyr=o(" (LED model)"),cyr=l(),u3=a("li"),_5e=a("strong"),myr=o("longformer"),fyr=o(" \u2014 "),JK=a("a"),gyr=o("TFLongformerModel"),hyr=o(" (Longformer model)"),uyr=l(),p3=a("li"),b5e=a("strong"),pyr=o("lxmert"),_yr=o(" \u2014 "),YK=a("a"),byr=o("TFLxmertModel"),vyr=o(" (LXMERT model)"),Fyr=l(),_3=a("li"),v5e=a("strong"),Tyr=o("marian"),Myr=o(" \u2014 "),KK=a("a"),Eyr=o("TFMarianModel"),Cyr=o(" (Marian model)"),wyr=l(),b3=a("li"),F5e=a("strong"),Ayr=o("mbart"),yyr=o(" \u2014 "),ZK=a("a"),Lyr=o("TFMBartModel"),xyr=o(" (mBART model)"),$yr=l(),v3=a("li"),T5e=a("strong"),kyr=o("mobilebert"),Syr=o(" \u2014 "),eZ=a("a"),Ryr=o("TFMobileBertModel"),Pyr=o(" (MobileBERT model)"),Byr=l(),F3=a("li"),M5e=a("strong"),Iyr=o("mobilevit"),Nyr=o(" \u2014 "),oZ=a("a"),qyr=o("TFMobileViTModel"),jyr=o(" (MobileViT model)"),Dyr=l(),T3=a("li"),E5e=a("strong"),Gyr=o("mpnet"),Oyr=o(" \u2014 "),rZ=a("a"),Vyr=o("TFMPNetModel"),Xyr=o(" (MPNet model)"),zyr=l(),M3=a("li"),C5e=a("strong"),Qyr=o("mt5"),Wyr=o(" \u2014 "),tZ=a("a"),Uyr=o("TFMT5Model"),Hyr=o(" (MT5 model)"),Jyr=l(),E3=a("li"),w5e=a("strong"),Yyr=o("openai-gpt"),Kyr=o(" \u2014 "),aZ=a("a"),Zyr=o("TFOpenAIGPTModel"),eLr=o(" (OpenAI GPT model)"),oLr=l(),C3=a("li"),A5e=a("strong"),rLr=o("opt"),tLr=o(" \u2014 "),nZ=a("a"),aLr=o("TFOPTModel"),nLr=o(" (OPT model)"),sLr=l(),w3=a("li"),y5e=a("strong"),lLr=o("pegasus"),iLr=o(" \u2014 "),sZ=a("a"),dLr=o("TFPegasusModel"),cLr=o(" (Pegasus model)"),mLr=l(),A3=a("li"),L5e=a("strong"),fLr=o("regnet"),gLr=o(" \u2014 "),lZ=a("a"),hLr=o("TFRegNetModel"),uLr=o(" (RegNet model)"),pLr=l(),y3=a("li"),x5e=a("strong"),_Lr=o("rembert"),bLr=o(" \u2014 "),iZ=a("a"),vLr=o("TFRemBertModel"),FLr=o(" (RemBERT model)"),TLr=l(),L3=a("li"),$5e=a("strong"),MLr=o("resnet"),ELr=o(" \u2014 "),dZ=a("a"),CLr=o("TFResNetModel"),wLr=o(" (ResNet model)"),ALr=l(),x3=a("li"),k5e=a("strong"),yLr=o("roberta"),LLr=o(" \u2014 "),cZ=a("a"),xLr=o("TFRobertaModel"),$Lr=o(" (RoBERTa model)"),kLr=l(),$3=a("li"),S5e=a("strong"),SLr=o("roformer"),RLr=o(" \u2014 "),mZ=a("a"),PLr=o("TFRoFormerModel"),BLr=o(" (RoFormer model)"),ILr=l(),k3=a("li"),R5e=a("strong"),NLr=o("segformer"),qLr=o(" \u2014 "),fZ=a("a"),jLr=o("TFSegformerModel"),DLr=o(" (SegFormer model)"),GLr=l(),S3=a("li"),P5e=a("strong"),OLr=o("speech_to_text"),VLr=o(" \u2014 "),gZ=a("a"),XLr=o("TFSpeech2TextModel"),zLr=o(" (Speech2Text model)"),QLr=l(),R3=a("li"),B5e=a("strong"),WLr=o("swin"),ULr=o(" \u2014 "),hZ=a("a"),HLr=o("TFSwinModel"),JLr=o(" (Swin Transformer model)"),YLr=l(),P3=a("li"),I5e=a("strong"),KLr=o("t5"),ZLr=o(" \u2014 "),uZ=a("a"),e8r=o("TFT5Model"),o8r=o(" (T5 model)"),r8r=l(),B3=a("li"),N5e=a("strong"),t8r=o("tapas"),a8r=o(" \u2014 "),pZ=a("a"),n8r=o("TFTapasModel"),s8r=o(" (TAPAS model)"),l8r=l(),I3=a("li"),q5e=a("strong"),i8r=o("transfo-xl"),d8r=o(" \u2014 "),_Z=a("a"),c8r=o("TFTransfoXLModel"),m8r=o(" (Transformer-XL model)"),f8r=l(),N3=a("li"),j5e=a("strong"),g8r=o("vit"),h8r=o(" \u2014 "),bZ=a("a"),u8r=o("TFViTModel"),p8r=o(" (ViT model)"),_8r=l(),q3=a("li"),D5e=a("strong"),b8r=o("vit_mae"),v8r=o(" \u2014 "),vZ=a("a"),F8r=o("TFViTMAEModel"),T8r=o(" (ViTMAE model)"),M8r=l(),j3=a("li"),G5e=a("strong"),E8r=o("wav2vec2"),C8r=o(" \u2014 "),FZ=a("a"),w8r=o("TFWav2Vec2Model"),A8r=o(" (Wav2Vec2 model)"),y8r=l(),D3=a("li"),O5e=a("strong"),L8r=o("xglm"),x8r=o(" \u2014 "),TZ=a("a"),$8r=o("TFXGLMModel"),k8r=o(" (XGLM model)"),S8r=l(),G3=a("li"),V5e=a("strong"),R8r=o("xlm"),P8r=o(" \u2014 "),MZ=a("a"),B8r=o("TFXLMModel"),I8r=o(" (XLM model)"),N8r=l(),O3=a("li"),X5e=a("strong"),q8r=o("xlm-roberta"),j8r=o(" \u2014 "),EZ=a("a"),D8r=o("TFXLMRobertaModel"),G8r=o(" (XLM-RoBERTa model)"),O8r=l(),V3=a("li"),z5e=a("strong"),V8r=o("xlnet"),X8r=o(" \u2014 "),CZ=a("a"),z8r=o("TFXLNetModel"),Q8r=o(" (XLNet model)"),W8r=l(),F(X3.$$.fragment),SYe=l(),Oc=a("h2"),z3=a("a"),Q5e=a("span"),F(ik.$$.fragment),U8r=l(),W5e=a("span"),H8r=o("TFAutoModelForPreTraining"),RYe=l(),lr=a("div"),F(dk.$$.fragment),J8r=l(),Vc=a("p"),Y8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wZ=a("a"),K8r=o("from_pretrained()"),Z8r=o(" class method or the "),AZ=a("a"),e9r=o("from_config()"),o9r=o(` class
method.`),r9r=l(),ck=a("p"),t9r=o("This class cannot be instantiated directly using "),U5e=a("code"),a9r=o("__init__()"),n9r=o(" (throws an error)."),s9r=l(),Xt=a("div"),F(mk.$$.fragment),l9r=l(),H5e=a("p"),i9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),d9r=l(),Xc=a("p"),c9r=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),m9r=o("not"),f9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),g9r=o("from_pretrained()"),h9r=o(" to load the model weights."),u9r=l(),F(Q3.$$.fragment),p9r=l(),Nr=a("div"),F(fk.$$.fragment),_9r=l(),Y5e=a("p"),b9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),v9r=l(),wn=a("p"),F9r=o("The model class to instantiate is selected based on the "),K5e=a("code"),T9r=o("model_type"),M9r=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),E9r=o("pretrained_model_name_or_path"),C9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=a("code"),w9r=o("pretrained_model_name_or_path"),A9r=o(":"),y9r=l(),se=a("ul"),W3=a("li"),o0e=a("strong"),L9r=o("albert"),x9r=o(" \u2014 "),LZ=a("a"),$9r=o("TFAlbertForPreTraining"),k9r=o(" (ALBERT model)"),S9r=l(),U3=a("li"),r0e=a("strong"),R9r=o("bart"),P9r=o(" \u2014 "),xZ=a("a"),B9r=o("TFBartForConditionalGeneration"),I9r=o(" (BART model)"),N9r=l(),H3=a("li"),t0e=a("strong"),q9r=o("bert"),j9r=o(" \u2014 "),$Z=a("a"),D9r=o("TFBertForPreTraining"),G9r=o(" (BERT model)"),O9r=l(),J3=a("li"),a0e=a("strong"),V9r=o("camembert"),X9r=o(" \u2014 "),kZ=a("a"),z9r=o("TFCamembertForMaskedLM"),Q9r=o(" (CamemBERT model)"),W9r=l(),Y3=a("li"),n0e=a("strong"),U9r=o("ctrl"),H9r=o(" \u2014 "),SZ=a("a"),J9r=o("TFCTRLLMHeadModel"),Y9r=o(" (CTRL model)"),K9r=l(),K3=a("li"),s0e=a("strong"),Z9r=o("distilbert"),exr=o(" \u2014 "),RZ=a("a"),oxr=o("TFDistilBertForMaskedLM"),rxr=o(" (DistilBERT model)"),txr=l(),Z3=a("li"),l0e=a("strong"),axr=o("electra"),nxr=o(" \u2014 "),PZ=a("a"),sxr=o("TFElectraForPreTraining"),lxr=o(" (ELECTRA model)"),ixr=l(),e5=a("li"),i0e=a("strong"),dxr=o("flaubert"),cxr=o(" \u2014 "),BZ=a("a"),mxr=o("TFFlaubertWithLMHeadModel"),fxr=o(" (FlauBERT model)"),gxr=l(),o5=a("li"),d0e=a("strong"),hxr=o("funnel"),uxr=o(" \u2014 "),IZ=a("a"),pxr=o("TFFunnelForPreTraining"),_xr=o(" (Funnel Transformer model)"),bxr=l(),r5=a("li"),c0e=a("strong"),vxr=o("gpt2"),Fxr=o(" \u2014 "),NZ=a("a"),Txr=o("TFGPT2LMHeadModel"),Mxr=o(" (OpenAI GPT-2 model)"),Exr=l(),t5=a("li"),m0e=a("strong"),Cxr=o("layoutlm"),wxr=o(" \u2014 "),qZ=a("a"),Axr=o("TFLayoutLMForMaskedLM"),yxr=o(" (LayoutLM model)"),Lxr=l(),a5=a("li"),f0e=a("strong"),xxr=o("lxmert"),$xr=o(" \u2014 "),jZ=a("a"),kxr=o("TFLxmertForPreTraining"),Sxr=o(" (LXMERT model)"),Rxr=l(),n5=a("li"),g0e=a("strong"),Pxr=o("mobilebert"),Bxr=o(" \u2014 "),DZ=a("a"),Ixr=o("TFMobileBertForPreTraining"),Nxr=o(" (MobileBERT model)"),qxr=l(),s5=a("li"),h0e=a("strong"),jxr=o("mpnet"),Dxr=o(" \u2014 "),GZ=a("a"),Gxr=o("TFMPNetForMaskedLM"),Oxr=o(" (MPNet model)"),Vxr=l(),l5=a("li"),u0e=a("strong"),Xxr=o("openai-gpt"),zxr=o(" \u2014 "),OZ=a("a"),Qxr=o("TFOpenAIGPTLMHeadModel"),Wxr=o(" (OpenAI GPT model)"),Uxr=l(),i5=a("li"),p0e=a("strong"),Hxr=o("roberta"),Jxr=o(" \u2014 "),VZ=a("a"),Yxr=o("TFRobertaForMaskedLM"),Kxr=o(" (RoBERTa model)"),Zxr=l(),d5=a("li"),_0e=a("strong"),e$r=o("t5"),o$r=o(" \u2014 "),XZ=a("a"),r$r=o("TFT5ForConditionalGeneration"),t$r=o(" (T5 model)"),a$r=l(),c5=a("li"),b0e=a("strong"),n$r=o("tapas"),s$r=o(" \u2014 "),zZ=a("a"),l$r=o("TFTapasForMaskedLM"),i$r=o(" (TAPAS model)"),d$r=l(),m5=a("li"),v0e=a("strong"),c$r=o("transfo-xl"),m$r=o(" \u2014 "),QZ=a("a"),f$r=o("TFTransfoXLLMHeadModel"),g$r=o(" (Transformer-XL model)"),h$r=l(),f5=a("li"),F0e=a("strong"),u$r=o("vit_mae"),p$r=o(" \u2014 "),WZ=a("a"),_$r=o("TFViTMAEForPreTraining"),b$r=o(" (ViTMAE model)"),v$r=l(),g5=a("li"),T0e=a("strong"),F$r=o("xlm"),T$r=o(" \u2014 "),UZ=a("a"),M$r=o("TFXLMWithLMHeadModel"),E$r=o(" (XLM model)"),C$r=l(),h5=a("li"),M0e=a("strong"),w$r=o("xlm-roberta"),A$r=o(" \u2014 "),HZ=a("a"),y$r=o("TFXLMRobertaForMaskedLM"),L$r=o(" (XLM-RoBERTa model)"),x$r=l(),u5=a("li"),E0e=a("strong"),$$r=o("xlnet"),k$r=o(" \u2014 "),JZ=a("a"),S$r=o("TFXLNetLMHeadModel"),R$r=o(" (XLNet model)"),P$r=l(),F(p5.$$.fragment),PYe=l(),zc=a("h2"),_5=a("a"),C0e=a("span"),F(gk.$$.fragment),B$r=l(),w0e=a("span"),I$r=o("TFAutoModelForCausalLM"),BYe=l(),ir=a("div"),F(hk.$$.fragment),N$r=l(),Qc=a("p"),q$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YZ=a("a"),j$r=o("from_pretrained()"),D$r=o(" class method or the "),KZ=a("a"),G$r=o("from_config()"),O$r=o(` class
method.`),V$r=l(),uk=a("p"),X$r=o("This class cannot be instantiated directly using "),A0e=a("code"),z$r=o("__init__()"),Q$r=o(" (throws an error)."),W$r=l(),zt=a("div"),F(pk.$$.fragment),U$r=l(),y0e=a("p"),H$r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J$r=l(),Wc=a("p"),Y$r=o(`Note:
Loading a model from its configuration file does `),L0e=a("strong"),K$r=o("not"),Z$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=a("a"),ekr=o("from_pretrained()"),okr=o(" to load the model weights."),rkr=l(),F(b5.$$.fragment),tkr=l(),qr=a("div"),F(_k.$$.fragment),akr=l(),x0e=a("p"),nkr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),skr=l(),An=a("p"),lkr=o("The model class to instantiate is selected based on the "),$0e=a("code"),ikr=o("model_type"),dkr=o(` property of the config object (either
passed as an argument or loaded from `),k0e=a("code"),ckr=o("pretrained_model_name_or_path"),mkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=a("code"),fkr=o("pretrained_model_name_or_path"),gkr=o(":"),hkr=l(),Me=a("ul"),v5=a("li"),R0e=a("strong"),ukr=o("bert"),pkr=o(" \u2014 "),eee=a("a"),_kr=o("TFBertLMHeadModel"),bkr=o(" (BERT model)"),vkr=l(),F5=a("li"),P0e=a("strong"),Fkr=o("camembert"),Tkr=o(" \u2014 "),oee=a("a"),Mkr=o("TFCamembertForCausalLM"),Ekr=o(" (CamemBERT model)"),Ckr=l(),T5=a("li"),B0e=a("strong"),wkr=o("ctrl"),Akr=o(" \u2014 "),ree=a("a"),ykr=o("TFCTRLLMHeadModel"),Lkr=o(" (CTRL model)"),xkr=l(),M5=a("li"),I0e=a("strong"),$kr=o("gpt2"),kkr=o(" \u2014 "),tee=a("a"),Skr=o("TFGPT2LMHeadModel"),Rkr=o(" (OpenAI GPT-2 model)"),Pkr=l(),E5=a("li"),N0e=a("strong"),Bkr=o("gptj"),Ikr=o(" \u2014 "),aee=a("a"),Nkr=o("TFGPTJForCausalLM"),qkr=o(" (GPT-J model)"),jkr=l(),C5=a("li"),q0e=a("strong"),Dkr=o("openai-gpt"),Gkr=o(" \u2014 "),nee=a("a"),Okr=o("TFOpenAIGPTLMHeadModel"),Vkr=o(" (OpenAI GPT model)"),Xkr=l(),w5=a("li"),j0e=a("strong"),zkr=o("opt"),Qkr=o(" \u2014 "),see=a("a"),Wkr=o("TFOPTForCausalLM"),Ukr=o(" (OPT model)"),Hkr=l(),A5=a("li"),D0e=a("strong"),Jkr=o("rembert"),Ykr=o(" \u2014 "),lee=a("a"),Kkr=o("TFRemBertForCausalLM"),Zkr=o(" (RemBERT model)"),eSr=l(),y5=a("li"),G0e=a("strong"),oSr=o("roberta"),rSr=o(" \u2014 "),iee=a("a"),tSr=o("TFRobertaForCausalLM"),aSr=o(" (RoBERTa model)"),nSr=l(),L5=a("li"),O0e=a("strong"),sSr=o("roformer"),lSr=o(" \u2014 "),dee=a("a"),iSr=o("TFRoFormerForCausalLM"),dSr=o(" (RoFormer model)"),cSr=l(),x5=a("li"),V0e=a("strong"),mSr=o("transfo-xl"),fSr=o(" \u2014 "),cee=a("a"),gSr=o("TFTransfoXLLMHeadModel"),hSr=o(" (Transformer-XL model)"),uSr=l(),$5=a("li"),X0e=a("strong"),pSr=o("xglm"),_Sr=o(" \u2014 "),mee=a("a"),bSr=o("TFXGLMForCausalLM"),vSr=o(" (XGLM model)"),FSr=l(),k5=a("li"),z0e=a("strong"),TSr=o("xlm"),MSr=o(" \u2014 "),fee=a("a"),ESr=o("TFXLMWithLMHeadModel"),CSr=o(" (XLM model)"),wSr=l(),S5=a("li"),Q0e=a("strong"),ASr=o("xlnet"),ySr=o(" \u2014 "),gee=a("a"),LSr=o("TFXLNetLMHeadModel"),xSr=o(" (XLNet model)"),$Sr=l(),F(R5.$$.fragment),IYe=l(),Uc=a("h2"),P5=a("a"),W0e=a("span"),F(bk.$$.fragment),kSr=l(),U0e=a("span"),SSr=o("TFAutoModelForImageClassification"),NYe=l(),dr=a("div"),F(vk.$$.fragment),RSr=l(),Hc=a("p"),PSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hee=a("a"),BSr=o("from_pretrained()"),ISr=o(" class method or the "),uee=a("a"),NSr=o("from_config()"),qSr=o(` class
method.`),jSr=l(),Fk=a("p"),DSr=o("This class cannot be instantiated directly using "),H0e=a("code"),GSr=o("__init__()"),OSr=o(" (throws an error)."),VSr=l(),Qt=a("div"),F(Tk.$$.fragment),XSr=l(),J0e=a("p"),zSr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QSr=l(),Jc=a("p"),WSr=o(`Note:
Loading a model from its configuration file does `),Y0e=a("strong"),USr=o("not"),HSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pee=a("a"),JSr=o("from_pretrained()"),YSr=o(" to load the model weights."),KSr=l(),F(B5.$$.fragment),ZSr=l(),jr=a("div"),F(Mk.$$.fragment),eRr=l(),K0e=a("p"),oRr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rRr=l(),yn=a("p"),tRr=o("The model class to instantiate is selected based on the "),Z0e=a("code"),aRr=o("model_type"),nRr=o(` property of the config object (either
passed as an argument or loaded from `),ewe=a("code"),sRr=o("pretrained_model_name_or_path"),lRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),owe=a("code"),iRr=o("pretrained_model_name_or_path"),dRr=o(":"),cRr=l(),Be=a("ul"),I5=a("li"),rwe=a("strong"),mRr=o("convnext"),fRr=o(" \u2014 "),_ee=a("a"),gRr=o("TFConvNextForImageClassification"),hRr=o(" (ConvNeXT model)"),uRr=l(),N5=a("li"),twe=a("strong"),pRr=o("data2vec-vision"),_Rr=o(" \u2014 "),bee=a("a"),bRr=o("TFData2VecVisionForImageClassification"),vRr=o(" (Data2VecVision model)"),FRr=l(),bl=a("li"),awe=a("strong"),TRr=o("deit"),MRr=o(" \u2014 "),vee=a("a"),ERr=o("TFDeiTForImageClassification"),CRr=o(" or "),Fee=a("a"),wRr=o("TFDeiTForImageClassificationWithTeacher"),ARr=o(" (DeiT model)"),yRr=l(),q5=a("li"),nwe=a("strong"),LRr=o("mobilevit"),xRr=o(" \u2014 "),Tee=a("a"),$Rr=o("TFMobileViTForImageClassification"),kRr=o(" (MobileViT model)"),SRr=l(),j5=a("li"),swe=a("strong"),RRr=o("regnet"),PRr=o(" \u2014 "),Mee=a("a"),BRr=o("TFRegNetForImageClassification"),IRr=o(" (RegNet model)"),NRr=l(),D5=a("li"),lwe=a("strong"),qRr=o("resnet"),jRr=o(" \u2014 "),Eee=a("a"),DRr=o("TFResNetForImageClassification"),GRr=o(" (ResNet model)"),ORr=l(),G5=a("li"),iwe=a("strong"),VRr=o("segformer"),XRr=o(" \u2014 "),Cee=a("a"),zRr=o("TFSegformerForImageClassification"),QRr=o(" (SegFormer model)"),WRr=l(),O5=a("li"),dwe=a("strong"),URr=o("swin"),HRr=o(" \u2014 "),wee=a("a"),JRr=o("TFSwinForImageClassification"),YRr=o(" (Swin Transformer model)"),KRr=l(),V5=a("li"),cwe=a("strong"),ZRr=o("vit"),ePr=o(" \u2014 "),Aee=a("a"),oPr=o("TFViTForImageClassification"),rPr=o(" (ViT model)"),tPr=l(),F(X5.$$.fragment),qYe=l(),Yc=a("h2"),z5=a("a"),mwe=a("span"),F(Ek.$$.fragment),aPr=l(),fwe=a("span"),nPr=o("TFAutoModelForSemanticSegmentation"),jYe=l(),cr=a("div"),F(Ck.$$.fragment),sPr=l(),Kc=a("p"),lPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yee=a("a"),iPr=o("from_pretrained()"),dPr=o(" class method or the "),Lee=a("a"),cPr=o("from_config()"),mPr=o(` class
method.`),fPr=l(),wk=a("p"),gPr=o("This class cannot be instantiated directly using "),gwe=a("code"),hPr=o("__init__()"),uPr=o(" (throws an error)."),pPr=l(),Wt=a("div"),F(Ak.$$.fragment),_Pr=l(),hwe=a("p"),bPr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),vPr=l(),Zc=a("p"),FPr=o(`Note:
Loading a model from its configuration file does `),uwe=a("strong"),TPr=o("not"),MPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=a("a"),EPr=o("from_pretrained()"),CPr=o(" to load the model weights."),wPr=l(),F(Q5.$$.fragment),APr=l(),Dr=a("div"),F(yk.$$.fragment),yPr=l(),pwe=a("p"),LPr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),xPr=l(),Ln=a("p"),$Pr=o("The model class to instantiate is selected based on the "),_we=a("code"),kPr=o("model_type"),SPr=o(` property of the config object (either
passed as an argument or loaded from `),bwe=a("code"),RPr=o("pretrained_model_name_or_path"),PPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vwe=a("code"),BPr=o("pretrained_model_name_or_path"),IPr=o(":"),NPr=l(),em=a("ul"),W5=a("li"),Fwe=a("strong"),qPr=o("data2vec-vision"),jPr=o(" \u2014 "),$ee=a("a"),DPr=o("TFData2VecVisionForSemanticSegmentation"),GPr=o(" (Data2VecVision model)"),OPr=l(),U5=a("li"),Twe=a("strong"),VPr=o("mobilevit"),XPr=o(" \u2014 "),kee=a("a"),zPr=o("TFMobileViTForSemanticSegmentation"),QPr=o(" (MobileViT model)"),WPr=l(),H5=a("li"),Mwe=a("strong"),UPr=o("segformer"),HPr=o(" \u2014 "),See=a("a"),JPr=o("TFSegformerForSemanticSegmentation"),YPr=o(" (SegFormer model)"),KPr=l(),F(J5.$$.fragment),DYe=l(),om=a("h2"),Y5=a("a"),Ewe=a("span"),F(Lk.$$.fragment),ZPr=l(),Cwe=a("span"),eBr=o("TFAutoModelForMaskedLM"),GYe=l(),mr=a("div"),F(xk.$$.fragment),oBr=l(),rm=a("p"),rBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ree=a("a"),tBr=o("from_pretrained()"),aBr=o(" class method or the "),Pee=a("a"),nBr=o("from_config()"),sBr=o(` class
method.`),lBr=l(),$k=a("p"),iBr=o("This class cannot be instantiated directly using "),wwe=a("code"),dBr=o("__init__()"),cBr=o(" (throws an error)."),mBr=l(),Ut=a("div"),F(kk.$$.fragment),fBr=l(),Awe=a("p"),gBr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hBr=l(),tm=a("p"),uBr=o(`Note:
Loading a model from its configuration file does `),ywe=a("strong"),pBr=o("not"),_Br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=a("a"),bBr=o("from_pretrained()"),vBr=o(" to load the model weights."),FBr=l(),F(K5.$$.fragment),TBr=l(),Gr=a("div"),F(Sk.$$.fragment),MBr=l(),Lwe=a("p"),EBr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),CBr=l(),xn=a("p"),wBr=o("The model class to instantiate is selected based on the "),xwe=a("code"),ABr=o("model_type"),yBr=o(` property of the config object (either
passed as an argument or loaded from `),$we=a("code"),LBr=o("pretrained_model_name_or_path"),xBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=a("code"),$Br=o("pretrained_model_name_or_path"),kBr=o(":"),SBr=l(),fe=a("ul"),Z5=a("li"),Swe=a("strong"),RBr=o("albert"),PBr=o(" \u2014 "),Iee=a("a"),BBr=o("TFAlbertForMaskedLM"),IBr=o(" (ALBERT model)"),NBr=l(),e0=a("li"),Rwe=a("strong"),qBr=o("bert"),jBr=o(" \u2014 "),Nee=a("a"),DBr=o("TFBertForMaskedLM"),GBr=o(" (BERT model)"),OBr=l(),o0=a("li"),Pwe=a("strong"),VBr=o("camembert"),XBr=o(" \u2014 "),qee=a("a"),zBr=o("TFCamembertForMaskedLM"),QBr=o(" (CamemBERT model)"),WBr=l(),r0=a("li"),Bwe=a("strong"),UBr=o("convbert"),HBr=o(" \u2014 "),jee=a("a"),JBr=o("TFConvBertForMaskedLM"),YBr=o(" (ConvBERT model)"),KBr=l(),t0=a("li"),Iwe=a("strong"),ZBr=o("deberta"),eIr=o(" \u2014 "),Dee=a("a"),oIr=o("TFDebertaForMaskedLM"),rIr=o(" (DeBERTa model)"),tIr=l(),a0=a("li"),Nwe=a("strong"),aIr=o("deberta-v2"),nIr=o(" \u2014 "),Gee=a("a"),sIr=o("TFDebertaV2ForMaskedLM"),lIr=o(" (DeBERTa-v2 model)"),iIr=l(),n0=a("li"),qwe=a("strong"),dIr=o("distilbert"),cIr=o(" \u2014 "),Oee=a("a"),mIr=o("TFDistilBertForMaskedLM"),fIr=o(" (DistilBERT model)"),gIr=l(),s0=a("li"),jwe=a("strong"),hIr=o("electra"),uIr=o(" \u2014 "),Vee=a("a"),pIr=o("TFElectraForMaskedLM"),_Ir=o(" (ELECTRA model)"),bIr=l(),l0=a("li"),Dwe=a("strong"),vIr=o("flaubert"),FIr=o(" \u2014 "),Xee=a("a"),TIr=o("TFFlaubertWithLMHeadModel"),MIr=o(" (FlauBERT model)"),EIr=l(),i0=a("li"),Gwe=a("strong"),CIr=o("funnel"),wIr=o(" \u2014 "),zee=a("a"),AIr=o("TFFunnelForMaskedLM"),yIr=o(" (Funnel Transformer model)"),LIr=l(),d0=a("li"),Owe=a("strong"),xIr=o("layoutlm"),$Ir=o(" \u2014 "),Qee=a("a"),kIr=o("TFLayoutLMForMaskedLM"),SIr=o(" (LayoutLM model)"),RIr=l(),c0=a("li"),Vwe=a("strong"),PIr=o("longformer"),BIr=o(" \u2014 "),Wee=a("a"),IIr=o("TFLongformerForMaskedLM"),NIr=o(" (Longformer model)"),qIr=l(),m0=a("li"),Xwe=a("strong"),jIr=o("mobilebert"),DIr=o(" \u2014 "),Uee=a("a"),GIr=o("TFMobileBertForMaskedLM"),OIr=o(" (MobileBERT model)"),VIr=l(),f0=a("li"),zwe=a("strong"),XIr=o("mpnet"),zIr=o(" \u2014 "),Hee=a("a"),QIr=o("TFMPNetForMaskedLM"),WIr=o(" (MPNet model)"),UIr=l(),g0=a("li"),Qwe=a("strong"),HIr=o("rembert"),JIr=o(" \u2014 "),Jee=a("a"),YIr=o("TFRemBertForMaskedLM"),KIr=o(" (RemBERT model)"),ZIr=l(),h0=a("li"),Wwe=a("strong"),eNr=o("roberta"),oNr=o(" \u2014 "),Yee=a("a"),rNr=o("TFRobertaForMaskedLM"),tNr=o(" (RoBERTa model)"),aNr=l(),u0=a("li"),Uwe=a("strong"),nNr=o("roformer"),sNr=o(" \u2014 "),Kee=a("a"),lNr=o("TFRoFormerForMaskedLM"),iNr=o(" (RoFormer model)"),dNr=l(),p0=a("li"),Hwe=a("strong"),cNr=o("tapas"),mNr=o(" \u2014 "),Zee=a("a"),fNr=o("TFTapasForMaskedLM"),gNr=o(" (TAPAS model)"),hNr=l(),_0=a("li"),Jwe=a("strong"),uNr=o("xlm"),pNr=o(" \u2014 "),eoe=a("a"),_Nr=o("TFXLMWithLMHeadModel"),bNr=o(" (XLM model)"),vNr=l(),b0=a("li"),Ywe=a("strong"),FNr=o("xlm-roberta"),TNr=o(" \u2014 "),ooe=a("a"),MNr=o("TFXLMRobertaForMaskedLM"),ENr=o(" (XLM-RoBERTa model)"),CNr=l(),F(v0.$$.fragment),OYe=l(),am=a("h2"),F0=a("a"),Kwe=a("span"),F(Rk.$$.fragment),wNr=l(),Zwe=a("span"),ANr=o("TFAutoModelForSeq2SeqLM"),VYe=l(),fr=a("div"),F(Pk.$$.fragment),yNr=l(),nm=a("p"),LNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),roe=a("a"),xNr=o("from_pretrained()"),$Nr=o(" class method or the "),toe=a("a"),kNr=o("from_config()"),SNr=o(` class
method.`),RNr=l(),Bk=a("p"),PNr=o("This class cannot be instantiated directly using "),eAe=a("code"),BNr=o("__init__()"),INr=o(" (throws an error)."),NNr=l(),Ht=a("div"),F(Ik.$$.fragment),qNr=l(),oAe=a("p"),jNr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DNr=l(),sm=a("p"),GNr=o(`Note:
Loading a model from its configuration file does `),rAe=a("strong"),ONr=o("not"),VNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aoe=a("a"),XNr=o("from_pretrained()"),zNr=o(" to load the model weights."),QNr=l(),F(T0.$$.fragment),WNr=l(),Or=a("div"),F(Nk.$$.fragment),UNr=l(),tAe=a("p"),HNr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JNr=l(),$n=a("p"),YNr=o("The model class to instantiate is selected based on the "),aAe=a("code"),KNr=o("model_type"),ZNr=o(` property of the config object (either
passed as an argument or loaded from `),nAe=a("code"),eqr=o("pretrained_model_name_or_path"),oqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sAe=a("code"),rqr=o("pretrained_model_name_or_path"),tqr=o(":"),aqr=l(),Le=a("ul"),M0=a("li"),lAe=a("strong"),nqr=o("bart"),sqr=o(" \u2014 "),noe=a("a"),lqr=o("TFBartForConditionalGeneration"),iqr=o(" (BART model)"),dqr=l(),E0=a("li"),iAe=a("strong"),cqr=o("blenderbot"),mqr=o(" \u2014 "),soe=a("a"),fqr=o("TFBlenderbotForConditionalGeneration"),gqr=o(" (Blenderbot model)"),hqr=l(),C0=a("li"),dAe=a("strong"),uqr=o("blenderbot-small"),pqr=o(" \u2014 "),loe=a("a"),_qr=o("TFBlenderbotSmallForConditionalGeneration"),bqr=o(" (BlenderbotSmall model)"),vqr=l(),w0=a("li"),cAe=a("strong"),Fqr=o("encoder-decoder"),Tqr=o(" \u2014 "),ioe=a("a"),Mqr=o("TFEncoderDecoderModel"),Eqr=o(" (Encoder decoder model)"),Cqr=l(),A0=a("li"),mAe=a("strong"),wqr=o("led"),Aqr=o(" \u2014 "),doe=a("a"),yqr=o("TFLEDForConditionalGeneration"),Lqr=o(" (LED model)"),xqr=l(),y0=a("li"),fAe=a("strong"),$qr=o("marian"),kqr=o(" \u2014 "),coe=a("a"),Sqr=o("TFMarianMTModel"),Rqr=o(" (Marian model)"),Pqr=l(),L0=a("li"),gAe=a("strong"),Bqr=o("mbart"),Iqr=o(" \u2014 "),moe=a("a"),Nqr=o("TFMBartForConditionalGeneration"),qqr=o(" (mBART model)"),jqr=l(),x0=a("li"),hAe=a("strong"),Dqr=o("mt5"),Gqr=o(" \u2014 "),foe=a("a"),Oqr=o("TFMT5ForConditionalGeneration"),Vqr=o(" (MT5 model)"),Xqr=l(),$0=a("li"),uAe=a("strong"),zqr=o("pegasus"),Qqr=o(" \u2014 "),goe=a("a"),Wqr=o("TFPegasusForConditionalGeneration"),Uqr=o(" (Pegasus model)"),Hqr=l(),k0=a("li"),pAe=a("strong"),Jqr=o("t5"),Yqr=o(" \u2014 "),hoe=a("a"),Kqr=o("TFT5ForConditionalGeneration"),Zqr=o(" (T5 model)"),ejr=l(),F(S0.$$.fragment),XYe=l(),lm=a("h2"),R0=a("a"),_Ae=a("span"),F(qk.$$.fragment),ojr=l(),bAe=a("span"),rjr=o("TFAutoModelForSequenceClassification"),zYe=l(),gr=a("div"),F(jk.$$.fragment),tjr=l(),im=a("p"),ajr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uoe=a("a"),njr=o("from_pretrained()"),sjr=o(" class method or the "),poe=a("a"),ljr=o("from_config()"),ijr=o(` class
method.`),djr=l(),Dk=a("p"),cjr=o("This class cannot be instantiated directly using "),vAe=a("code"),mjr=o("__init__()"),fjr=o(" (throws an error)."),gjr=l(),Jt=a("div"),F(Gk.$$.fragment),hjr=l(),FAe=a("p"),ujr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pjr=l(),dm=a("p"),_jr=o(`Note:
Loading a model from its configuration file does `),TAe=a("strong"),bjr=o("not"),vjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" to load the model weights."),Mjr=l(),F(P0.$$.fragment),Ejr=l(),Vr=a("div"),F(Ok.$$.fragment),Cjr=l(),MAe=a("p"),wjr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ajr=l(),kn=a("p"),yjr=o("The model class to instantiate is selected based on the "),EAe=a("code"),Ljr=o("model_type"),xjr=o(` property of the config object (either
passed as an argument or loaded from `),CAe=a("code"),$jr=o("pretrained_model_name_or_path"),kjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wAe=a("code"),Sjr=o("pretrained_model_name_or_path"),Rjr=o(":"),Pjr=l(),re=a("ul"),B0=a("li"),AAe=a("strong"),Bjr=o("albert"),Ijr=o(" \u2014 "),boe=a("a"),Njr=o("TFAlbertForSequenceClassification"),qjr=o(" (ALBERT model)"),jjr=l(),I0=a("li"),yAe=a("strong"),Djr=o("bert"),Gjr=o(" \u2014 "),voe=a("a"),Ojr=o("TFBertForSequenceClassification"),Vjr=o(" (BERT model)"),Xjr=l(),N0=a("li"),LAe=a("strong"),zjr=o("camembert"),Qjr=o(" \u2014 "),Foe=a("a"),Wjr=o("TFCamembertForSequenceClassification"),Ujr=o(" (CamemBERT model)"),Hjr=l(),q0=a("li"),xAe=a("strong"),Jjr=o("convbert"),Yjr=o(" \u2014 "),Toe=a("a"),Kjr=o("TFConvBertForSequenceClassification"),Zjr=o(" (ConvBERT model)"),eDr=l(),j0=a("li"),$Ae=a("strong"),oDr=o("ctrl"),rDr=o(" \u2014 "),Moe=a("a"),tDr=o("TFCTRLForSequenceClassification"),aDr=o(" (CTRL model)"),nDr=l(),D0=a("li"),kAe=a("strong"),sDr=o("deberta"),lDr=o(" \u2014 "),Eoe=a("a"),iDr=o("TFDebertaForSequenceClassification"),dDr=o(" (DeBERTa model)"),cDr=l(),G0=a("li"),SAe=a("strong"),mDr=o("deberta-v2"),fDr=o(" \u2014 "),Coe=a("a"),gDr=o("TFDebertaV2ForSequenceClassification"),hDr=o(" (DeBERTa-v2 model)"),uDr=l(),O0=a("li"),RAe=a("strong"),pDr=o("distilbert"),_Dr=o(" \u2014 "),woe=a("a"),bDr=o("TFDistilBertForSequenceClassification"),vDr=o(" (DistilBERT model)"),FDr=l(),V0=a("li"),PAe=a("strong"),TDr=o("electra"),MDr=o(" \u2014 "),Aoe=a("a"),EDr=o("TFElectraForSequenceClassification"),CDr=o(" (ELECTRA model)"),wDr=l(),X0=a("li"),BAe=a("strong"),ADr=o("flaubert"),yDr=o(" \u2014 "),yoe=a("a"),LDr=o("TFFlaubertForSequenceClassification"),xDr=o(" (FlauBERT model)"),$Dr=l(),z0=a("li"),IAe=a("strong"),kDr=o("funnel"),SDr=o(" \u2014 "),Loe=a("a"),RDr=o("TFFunnelForSequenceClassification"),PDr=o(" (Funnel Transformer model)"),BDr=l(),Q0=a("li"),NAe=a("strong"),IDr=o("gpt2"),NDr=o(" \u2014 "),xoe=a("a"),qDr=o("TFGPT2ForSequenceClassification"),jDr=o(" (OpenAI GPT-2 model)"),DDr=l(),W0=a("li"),qAe=a("strong"),GDr=o("gptj"),ODr=o(" \u2014 "),$oe=a("a"),VDr=o("TFGPTJForSequenceClassification"),XDr=o(" (GPT-J model)"),zDr=l(),U0=a("li"),jAe=a("strong"),QDr=o("layoutlm"),WDr=o(" \u2014 "),koe=a("a"),UDr=o("TFLayoutLMForSequenceClassification"),HDr=o(" (LayoutLM model)"),JDr=l(),H0=a("li"),DAe=a("strong"),YDr=o("layoutlmv3"),KDr=o(" \u2014 "),Soe=a("a"),ZDr=o("TFLayoutLMv3ForSequenceClassification"),eGr=o(" (LayoutLMv3 model)"),oGr=l(),J0=a("li"),GAe=a("strong"),rGr=o("longformer"),tGr=o(" \u2014 "),Roe=a("a"),aGr=o("TFLongformerForSequenceClassification"),nGr=o(" (Longformer model)"),sGr=l(),Y0=a("li"),OAe=a("strong"),lGr=o("mobilebert"),iGr=o(" \u2014 "),Poe=a("a"),dGr=o("TFMobileBertForSequenceClassification"),cGr=o(" (MobileBERT model)"),mGr=l(),K0=a("li"),VAe=a("strong"),fGr=o("mpnet"),gGr=o(" \u2014 "),Boe=a("a"),hGr=o("TFMPNetForSequenceClassification"),uGr=o(" (MPNet model)"),pGr=l(),Z0=a("li"),XAe=a("strong"),_Gr=o("openai-gpt"),bGr=o(" \u2014 "),Ioe=a("a"),vGr=o("TFOpenAIGPTForSequenceClassification"),FGr=o(" (OpenAI GPT model)"),TGr=l(),ew=a("li"),zAe=a("strong"),MGr=o("rembert"),EGr=o(" \u2014 "),Noe=a("a"),CGr=o("TFRemBertForSequenceClassification"),wGr=o(" (RemBERT model)"),AGr=l(),ow=a("li"),QAe=a("strong"),yGr=o("roberta"),LGr=o(" \u2014 "),qoe=a("a"),xGr=o("TFRobertaForSequenceClassification"),$Gr=o(" (RoBERTa model)"),kGr=l(),rw=a("li"),WAe=a("strong"),SGr=o("roformer"),RGr=o(" \u2014 "),joe=a("a"),PGr=o("TFRoFormerForSequenceClassification"),BGr=o(" (RoFormer model)"),IGr=l(),tw=a("li"),UAe=a("strong"),NGr=o("tapas"),qGr=o(" \u2014 "),Doe=a("a"),jGr=o("TFTapasForSequenceClassification"),DGr=o(" (TAPAS model)"),GGr=l(),aw=a("li"),HAe=a("strong"),OGr=o("transfo-xl"),VGr=o(" \u2014 "),Goe=a("a"),XGr=o("TFTransfoXLForSequenceClassification"),zGr=o(" (Transformer-XL model)"),QGr=l(),nw=a("li"),JAe=a("strong"),WGr=o("xlm"),UGr=o(" \u2014 "),Ooe=a("a"),HGr=o("TFXLMForSequenceClassification"),JGr=o(" (XLM model)"),YGr=l(),sw=a("li"),YAe=a("strong"),KGr=o("xlm-roberta"),ZGr=o(" \u2014 "),Voe=a("a"),eOr=o("TFXLMRobertaForSequenceClassification"),oOr=o(" (XLM-RoBERTa model)"),rOr=l(),lw=a("li"),KAe=a("strong"),tOr=o("xlnet"),aOr=o(" \u2014 "),Xoe=a("a"),nOr=o("TFXLNetForSequenceClassification"),sOr=o(" (XLNet model)"),lOr=l(),F(iw.$$.fragment),QYe=l(),cm=a("h2"),dw=a("a"),ZAe=a("span"),F(Vk.$$.fragment),iOr=l(),e6e=a("span"),dOr=o("TFAutoModelForMultipleChoice"),WYe=l(),hr=a("div"),F(Xk.$$.fragment),cOr=l(),mm=a("p"),mOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zoe=a("a"),fOr=o("from_pretrained()"),gOr=o(" class method or the "),Qoe=a("a"),hOr=o("from_config()"),uOr=o(` class
method.`),pOr=l(),zk=a("p"),_Or=o("This class cannot be instantiated directly using "),o6e=a("code"),bOr=o("__init__()"),vOr=o(" (throws an error)."),FOr=l(),Yt=a("div"),F(Qk.$$.fragment),TOr=l(),r6e=a("p"),MOr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),EOr=l(),fm=a("p"),COr=o(`Note:
Loading a model from its configuration file does `),t6e=a("strong"),wOr=o("not"),AOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Woe=a("a"),yOr=o("from_pretrained()"),LOr=o(" to load the model weights."),xOr=l(),F(cw.$$.fragment),$Or=l(),Xr=a("div"),F(Wk.$$.fragment),kOr=l(),a6e=a("p"),SOr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ROr=l(),Sn=a("p"),POr=o("The model class to instantiate is selected based on the "),n6e=a("code"),BOr=o("model_type"),IOr=o(` property of the config object (either
passed as an argument or loaded from `),s6e=a("code"),NOr=o("pretrained_model_name_or_path"),qOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=a("code"),jOr=o("pretrained_model_name_or_path"),DOr=o(":"),GOr=l(),ve=a("ul"),mw=a("li"),i6e=a("strong"),OOr=o("albert"),VOr=o(" \u2014 "),Uoe=a("a"),XOr=o("TFAlbertForMultipleChoice"),zOr=o(" (ALBERT model)"),QOr=l(),fw=a("li"),d6e=a("strong"),WOr=o("bert"),UOr=o(" \u2014 "),Hoe=a("a"),HOr=o("TFBertForMultipleChoice"),JOr=o(" (BERT model)"),YOr=l(),gw=a("li"),c6e=a("strong"),KOr=o("camembert"),ZOr=o(" \u2014 "),Joe=a("a"),eVr=o("TFCamembertForMultipleChoice"),oVr=o(" (CamemBERT model)"),rVr=l(),hw=a("li"),m6e=a("strong"),tVr=o("convbert"),aVr=o(" \u2014 "),Yoe=a("a"),nVr=o("TFConvBertForMultipleChoice"),sVr=o(" (ConvBERT model)"),lVr=l(),uw=a("li"),f6e=a("strong"),iVr=o("distilbert"),dVr=o(" \u2014 "),Koe=a("a"),cVr=o("TFDistilBertForMultipleChoice"),mVr=o(" (DistilBERT model)"),fVr=l(),pw=a("li"),g6e=a("strong"),gVr=o("electra"),hVr=o(" \u2014 "),Zoe=a("a"),uVr=o("TFElectraForMultipleChoice"),pVr=o(" (ELECTRA model)"),_Vr=l(),_w=a("li"),h6e=a("strong"),bVr=o("flaubert"),vVr=o(" \u2014 "),ere=a("a"),FVr=o("TFFlaubertForMultipleChoice"),TVr=o(" (FlauBERT model)"),MVr=l(),bw=a("li"),u6e=a("strong"),EVr=o("funnel"),CVr=o(" \u2014 "),ore=a("a"),wVr=o("TFFunnelForMultipleChoice"),AVr=o(" (Funnel Transformer model)"),yVr=l(),vw=a("li"),p6e=a("strong"),LVr=o("longformer"),xVr=o(" \u2014 "),rre=a("a"),$Vr=o("TFLongformerForMultipleChoice"),kVr=o(" (Longformer model)"),SVr=l(),Fw=a("li"),_6e=a("strong"),RVr=o("mobilebert"),PVr=o(" \u2014 "),tre=a("a"),BVr=o("TFMobileBertForMultipleChoice"),IVr=o(" (MobileBERT model)"),NVr=l(),Tw=a("li"),b6e=a("strong"),qVr=o("mpnet"),jVr=o(" \u2014 "),are=a("a"),DVr=o("TFMPNetForMultipleChoice"),GVr=o(" (MPNet model)"),OVr=l(),Mw=a("li"),v6e=a("strong"),VVr=o("rembert"),XVr=o(" \u2014 "),nre=a("a"),zVr=o("TFRemBertForMultipleChoice"),QVr=o(" (RemBERT model)"),WVr=l(),Ew=a("li"),F6e=a("strong"),UVr=o("roberta"),HVr=o(" \u2014 "),sre=a("a"),JVr=o("TFRobertaForMultipleChoice"),YVr=o(" (RoBERTa model)"),KVr=l(),Cw=a("li"),T6e=a("strong"),ZVr=o("roformer"),eXr=o(" \u2014 "),lre=a("a"),oXr=o("TFRoFormerForMultipleChoice"),rXr=o(" (RoFormer model)"),tXr=l(),ww=a("li"),M6e=a("strong"),aXr=o("xlm"),nXr=o(" \u2014 "),ire=a("a"),sXr=o("TFXLMForMultipleChoice"),lXr=o(" (XLM model)"),iXr=l(),Aw=a("li"),E6e=a("strong"),dXr=o("xlm-roberta"),cXr=o(" \u2014 "),dre=a("a"),mXr=o("TFXLMRobertaForMultipleChoice"),fXr=o(" (XLM-RoBERTa model)"),gXr=l(),yw=a("li"),C6e=a("strong"),hXr=o("xlnet"),uXr=o(" \u2014 "),cre=a("a"),pXr=o("TFXLNetForMultipleChoice"),_Xr=o(" (XLNet model)"),bXr=l(),F(Lw.$$.fragment),UYe=l(),gm=a("h2"),xw=a("a"),w6e=a("span"),F(Uk.$$.fragment),vXr=l(),A6e=a("span"),FXr=o("TFAutoModelForNextSentencePrediction"),HYe=l(),ur=a("div"),F(Hk.$$.fragment),TXr=l(),hm=a("p"),MXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mre=a("a"),EXr=o("from_pretrained()"),CXr=o(" class method or the "),fre=a("a"),wXr=o("from_config()"),AXr=o(` class
method.`),yXr=l(),Jk=a("p"),LXr=o("This class cannot be instantiated directly using "),y6e=a("code"),xXr=o("__init__()"),$Xr=o(" (throws an error)."),kXr=l(),Kt=a("div"),F(Yk.$$.fragment),SXr=l(),L6e=a("p"),RXr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),PXr=l(),um=a("p"),BXr=o(`Note:
Loading a model from its configuration file does `),x6e=a("strong"),IXr=o("not"),NXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=a("a"),qXr=o("from_pretrained()"),jXr=o(" to load the model weights."),DXr=l(),F($w.$$.fragment),GXr=l(),zr=a("div"),F(Kk.$$.fragment),OXr=l(),$6e=a("p"),VXr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),XXr=l(),Rn=a("p"),zXr=o("The model class to instantiate is selected based on the "),k6e=a("code"),QXr=o("model_type"),WXr=o(` property of the config object (either
passed as an argument or loaded from `),S6e=a("code"),UXr=o("pretrained_model_name_or_path"),HXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=a("code"),JXr=o("pretrained_model_name_or_path"),YXr=o(":"),KXr=l(),Zk=a("ul"),kw=a("li"),P6e=a("strong"),ZXr=o("bert"),ezr=o(" \u2014 "),hre=a("a"),ozr=o("TFBertForNextSentencePrediction"),rzr=o(" (BERT model)"),tzr=l(),Sw=a("li"),B6e=a("strong"),azr=o("mobilebert"),nzr=o(" \u2014 "),ure=a("a"),szr=o("TFMobileBertForNextSentencePrediction"),lzr=o(" (MobileBERT model)"),izr=l(),F(Rw.$$.fragment),JYe=l(),pm=a("h2"),Pw=a("a"),I6e=a("span"),F(eS.$$.fragment),dzr=l(),N6e=a("span"),czr=o("TFAutoModelForTableQuestionAnswering"),YYe=l(),pr=a("div"),F(oS.$$.fragment),mzr=l(),_m=a("p"),fzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pre=a("a"),gzr=o("from_pretrained()"),hzr=o(" class method or the "),_re=a("a"),uzr=o("from_config()"),pzr=o(` class
method.`),_zr=l(),rS=a("p"),bzr=o("This class cannot be instantiated directly using "),q6e=a("code"),vzr=o("__init__()"),Fzr=o(" (throws an error)."),Tzr=l(),Zt=a("div"),F(tS.$$.fragment),Mzr=l(),j6e=a("p"),Ezr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Czr=l(),bm=a("p"),wzr=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),Azr=o("not"),yzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=a("a"),Lzr=o("from_pretrained()"),xzr=o(" to load the model weights."),$zr=l(),F(Bw.$$.fragment),kzr=l(),Qr=a("div"),F(aS.$$.fragment),Szr=l(),G6e=a("p"),Rzr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Pzr=l(),Pn=a("p"),Bzr=o("The model class to instantiate is selected based on the "),O6e=a("code"),Izr=o("model_type"),Nzr=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),qzr=o("pretrained_model_name_or_path"),jzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),Dzr=o("pretrained_model_name_or_path"),Gzr=o(":"),Ozr=l(),z6e=a("ul"),Iw=a("li"),Q6e=a("strong"),Vzr=o("tapas"),Xzr=o(" \u2014 "),vre=a("a"),zzr=o("TFTapasForQuestionAnswering"),Qzr=o(" (TAPAS model)"),Wzr=l(),F(Nw.$$.fragment),KYe=l(),vm=a("h2"),qw=a("a"),W6e=a("span"),F(nS.$$.fragment),Uzr=l(),U6e=a("span"),Hzr=o("TFAutoModelForDocumentQuestionAnswering"),ZYe=l(),_r=a("div"),F(sS.$$.fragment),Jzr=l(),Fm=a("p"),Yzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Fre=a("a"),Kzr=o("from_pretrained()"),Zzr=o(" class method or the "),Tre=a("a"),eQr=o("from_config()"),oQr=o(` class
method.`),rQr=l(),lS=a("p"),tQr=o("This class cannot be instantiated directly using "),H6e=a("code"),aQr=o("__init__()"),nQr=o(" (throws an error)."),sQr=l(),ea=a("div"),F(iS.$$.fragment),lQr=l(),J6e=a("p"),iQr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),dQr=l(),Tm=a("p"),cQr=o(`Note:
Loading a model from its configuration file does `),Y6e=a("strong"),mQr=o("not"),fQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=a("a"),gQr=o("from_pretrained()"),hQr=o(" to load the model weights."),uQr=l(),F(jw.$$.fragment),pQr=l(),Wr=a("div"),F(dS.$$.fragment),_Qr=l(),K6e=a("p"),bQr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),vQr=l(),Bn=a("p"),FQr=o("The model class to instantiate is selected based on the "),Z6e=a("code"),TQr=o("model_type"),MQr=o(` property of the config object (either
passed as an argument or loaded from `),e7e=a("code"),EQr=o("pretrained_model_name_or_path"),CQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=a("code"),wQr=o("pretrained_model_name_or_path"),AQr=o(":"),yQr=l(),r7e=a("ul"),Dw=a("li"),t7e=a("strong"),LQr=o("layoutlm"),xQr=o(" \u2014 "),Ere=a("a"),$Qr=o("TFLayoutLMForQuestionAnswering"),kQr=o(" (LayoutLM model)"),SQr=l(),F(Gw.$$.fragment),eKe=l(),Mm=a("h2"),Ow=a("a"),a7e=a("span"),F(cS.$$.fragment),RQr=l(),n7e=a("span"),PQr=o("TFAutoModelForTokenClassification"),oKe=l(),br=a("div"),F(mS.$$.fragment),BQr=l(),Em=a("p"),IQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Cre=a("a"),NQr=o("from_pretrained()"),qQr=o(" class method or the "),wre=a("a"),jQr=o("from_config()"),DQr=o(` class
method.`),GQr=l(),fS=a("p"),OQr=o("This class cannot be instantiated directly using "),s7e=a("code"),VQr=o("__init__()"),XQr=o(" (throws an error)."),zQr=l(),oa=a("div"),F(gS.$$.fragment),QQr=l(),l7e=a("p"),WQr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UQr=l(),Cm=a("p"),HQr=o(`Note:
Loading a model from its configuration file does `),i7e=a("strong"),JQr=o("not"),YQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=a("a"),KQr=o("from_pretrained()"),ZQr=o(" to load the model weights."),eWr=l(),F(Vw.$$.fragment),oWr=l(),Ur=a("div"),F(hS.$$.fragment),rWr=l(),d7e=a("p"),tWr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),aWr=l(),In=a("p"),nWr=o("The model class to instantiate is selected based on the "),c7e=a("code"),sWr=o("model_type"),lWr=o(` property of the config object (either
passed as an argument or loaded from `),m7e=a("code"),iWr=o("pretrained_model_name_or_path"),dWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=a("code"),cWr=o("pretrained_model_name_or_path"),mWr=o(":"),fWr=l(),ie=a("ul"),Xw=a("li"),g7e=a("strong"),gWr=o("albert"),hWr=o(" \u2014 "),yre=a("a"),uWr=o("TFAlbertForTokenClassification"),pWr=o(" (ALBERT model)"),_Wr=l(),zw=a("li"),h7e=a("strong"),bWr=o("bert"),vWr=o(" \u2014 "),Lre=a("a"),FWr=o("TFBertForTokenClassification"),TWr=o(" (BERT model)"),MWr=l(),Qw=a("li"),u7e=a("strong"),EWr=o("camembert"),CWr=o(" \u2014 "),xre=a("a"),wWr=o("TFCamembertForTokenClassification"),AWr=o(" (CamemBERT model)"),yWr=l(),Ww=a("li"),p7e=a("strong"),LWr=o("convbert"),xWr=o(" \u2014 "),$re=a("a"),$Wr=o("TFConvBertForTokenClassification"),kWr=o(" (ConvBERT model)"),SWr=l(),Uw=a("li"),_7e=a("strong"),RWr=o("deberta"),PWr=o(" \u2014 "),kre=a("a"),BWr=o("TFDebertaForTokenClassification"),IWr=o(" (DeBERTa model)"),NWr=l(),Hw=a("li"),b7e=a("strong"),qWr=o("deberta-v2"),jWr=o(" \u2014 "),Sre=a("a"),DWr=o("TFDebertaV2ForTokenClassification"),GWr=o(" (DeBERTa-v2 model)"),OWr=l(),Jw=a("li"),v7e=a("strong"),VWr=o("distilbert"),XWr=o(" \u2014 "),Rre=a("a"),zWr=o("TFDistilBertForTokenClassification"),QWr=o(" (DistilBERT model)"),WWr=l(),Yw=a("li"),F7e=a("strong"),UWr=o("electra"),HWr=o(" \u2014 "),Pre=a("a"),JWr=o("TFElectraForTokenClassification"),YWr=o(" (ELECTRA model)"),KWr=l(),Kw=a("li"),T7e=a("strong"),ZWr=o("flaubert"),eUr=o(" \u2014 "),Bre=a("a"),oUr=o("TFFlaubertForTokenClassification"),rUr=o(" (FlauBERT model)"),tUr=l(),Zw=a("li"),M7e=a("strong"),aUr=o("funnel"),nUr=o(" \u2014 "),Ire=a("a"),sUr=o("TFFunnelForTokenClassification"),lUr=o(" (Funnel Transformer model)"),iUr=l(),eA=a("li"),E7e=a("strong"),dUr=o("layoutlm"),cUr=o(" \u2014 "),Nre=a("a"),mUr=o("TFLayoutLMForTokenClassification"),fUr=o(" (LayoutLM model)"),gUr=l(),oA=a("li"),C7e=a("strong"),hUr=o("layoutlmv3"),uUr=o(" \u2014 "),qre=a("a"),pUr=o("TFLayoutLMv3ForTokenClassification"),_Ur=o(" (LayoutLMv3 model)"),bUr=l(),rA=a("li"),w7e=a("strong"),vUr=o("longformer"),FUr=o(" \u2014 "),jre=a("a"),TUr=o("TFLongformerForTokenClassification"),MUr=o(" (Longformer model)"),EUr=l(),tA=a("li"),A7e=a("strong"),CUr=o("mobilebert"),wUr=o(" \u2014 "),Dre=a("a"),AUr=o("TFMobileBertForTokenClassification"),yUr=o(" (MobileBERT model)"),LUr=l(),aA=a("li"),y7e=a("strong"),xUr=o("mpnet"),$Ur=o(" \u2014 "),Gre=a("a"),kUr=o("TFMPNetForTokenClassification"),SUr=o(" (MPNet model)"),RUr=l(),nA=a("li"),L7e=a("strong"),PUr=o("rembert"),BUr=o(" \u2014 "),Ore=a("a"),IUr=o("TFRemBertForTokenClassification"),NUr=o(" (RemBERT model)"),qUr=l(),sA=a("li"),x7e=a("strong"),jUr=o("roberta"),DUr=o(" \u2014 "),Vre=a("a"),GUr=o("TFRobertaForTokenClassification"),OUr=o(" (RoBERTa model)"),VUr=l(),lA=a("li"),$7e=a("strong"),XUr=o("roformer"),zUr=o(" \u2014 "),Xre=a("a"),QUr=o("TFRoFormerForTokenClassification"),WUr=o(" (RoFormer model)"),UUr=l(),iA=a("li"),k7e=a("strong"),HUr=o("xlm"),JUr=o(" \u2014 "),zre=a("a"),YUr=o("TFXLMForTokenClassification"),KUr=o(" (XLM model)"),ZUr=l(),dA=a("li"),S7e=a("strong"),eHr=o("xlm-roberta"),oHr=o(" \u2014 "),Qre=a("a"),rHr=o("TFXLMRobertaForTokenClassification"),tHr=o(" (XLM-RoBERTa model)"),aHr=l(),cA=a("li"),R7e=a("strong"),nHr=o("xlnet"),sHr=o(" \u2014 "),Wre=a("a"),lHr=o("TFXLNetForTokenClassification"),iHr=o(" (XLNet model)"),dHr=l(),F(mA.$$.fragment),rKe=l(),wm=a("h2"),fA=a("a"),P7e=a("span"),F(uS.$$.fragment),cHr=l(),B7e=a("span"),mHr=o("TFAutoModelForQuestionAnswering"),tKe=l(),vr=a("div"),F(pS.$$.fragment),fHr=l(),Am=a("p"),gHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ure=a("a"),hHr=o("from_pretrained()"),uHr=o(" class method or the "),Hre=a("a"),pHr=o("from_config()"),_Hr=o(` class
method.`),bHr=l(),_S=a("p"),vHr=o("This class cannot be instantiated directly using "),I7e=a("code"),FHr=o("__init__()"),THr=o(" (throws an error)."),MHr=l(),ra=a("div"),F(bS.$$.fragment),EHr=l(),N7e=a("p"),CHr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wHr=l(),ym=a("p"),AHr=o(`Note:
Loading a model from its configuration file does `),q7e=a("strong"),yHr=o("not"),LHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=a("a"),xHr=o("from_pretrained()"),$Hr=o(" to load the model weights."),kHr=l(),F(gA.$$.fragment),SHr=l(),Hr=a("div"),F(vS.$$.fragment),RHr=l(),j7e=a("p"),PHr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BHr=l(),Nn=a("p"),IHr=o("The model class to instantiate is selected based on the "),D7e=a("code"),NHr=o("model_type"),qHr=o(` property of the config object (either
passed as an argument or loaded from `),G7e=a("code"),jHr=o("pretrained_model_name_or_path"),DHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=a("code"),GHr=o("pretrained_model_name_or_path"),OHr=o(":"),VHr=l(),de=a("ul"),hA=a("li"),V7e=a("strong"),XHr=o("albert"),zHr=o(" \u2014 "),Yre=a("a"),QHr=o("TFAlbertForQuestionAnswering"),WHr=o(" (ALBERT model)"),UHr=l(),uA=a("li"),X7e=a("strong"),HHr=o("bert"),JHr=o(" \u2014 "),Kre=a("a"),YHr=o("TFBertForQuestionAnswering"),KHr=o(" (BERT model)"),ZHr=l(),pA=a("li"),z7e=a("strong"),eJr=o("camembert"),oJr=o(" \u2014 "),Zre=a("a"),rJr=o("TFCamembertForQuestionAnswering"),tJr=o(" (CamemBERT model)"),aJr=l(),_A=a("li"),Q7e=a("strong"),nJr=o("convbert"),sJr=o(" \u2014 "),ete=a("a"),lJr=o("TFConvBertForQuestionAnswering"),iJr=o(" (ConvBERT model)"),dJr=l(),bA=a("li"),W7e=a("strong"),cJr=o("deberta"),mJr=o(" \u2014 "),ote=a("a"),fJr=o("TFDebertaForQuestionAnswering"),gJr=o(" (DeBERTa model)"),hJr=l(),vA=a("li"),U7e=a("strong"),uJr=o("deberta-v2"),pJr=o(" \u2014 "),rte=a("a"),_Jr=o("TFDebertaV2ForQuestionAnswering"),bJr=o(" (DeBERTa-v2 model)"),vJr=l(),FA=a("li"),H7e=a("strong"),FJr=o("distilbert"),TJr=o(" \u2014 "),tte=a("a"),MJr=o("TFDistilBertForQuestionAnswering"),EJr=o(" (DistilBERT model)"),CJr=l(),TA=a("li"),J7e=a("strong"),wJr=o("electra"),AJr=o(" \u2014 "),ate=a("a"),yJr=o("TFElectraForQuestionAnswering"),LJr=o(" (ELECTRA model)"),xJr=l(),MA=a("li"),Y7e=a("strong"),$Jr=o("flaubert"),kJr=o(" \u2014 "),nte=a("a"),SJr=o("TFFlaubertForQuestionAnsweringSimple"),RJr=o(" (FlauBERT model)"),PJr=l(),EA=a("li"),K7e=a("strong"),BJr=o("funnel"),IJr=o(" \u2014 "),ste=a("a"),NJr=o("TFFunnelForQuestionAnswering"),qJr=o(" (Funnel Transformer model)"),jJr=l(),CA=a("li"),Z7e=a("strong"),DJr=o("gptj"),GJr=o(" \u2014 "),lte=a("a"),OJr=o("TFGPTJForQuestionAnswering"),VJr=o(" (GPT-J model)"),XJr=l(),wA=a("li"),eye=a("strong"),zJr=o("layoutlmv3"),QJr=o(" \u2014 "),ite=a("a"),WJr=o("TFLayoutLMv3ForQuestionAnswering"),UJr=o(" (LayoutLMv3 model)"),HJr=l(),AA=a("li"),oye=a("strong"),JJr=o("longformer"),YJr=o(" \u2014 "),dte=a("a"),KJr=o("TFLongformerForQuestionAnswering"),ZJr=o(" (Longformer model)"),eYr=l(),yA=a("li"),rye=a("strong"),oYr=o("mobilebert"),rYr=o(" \u2014 "),cte=a("a"),tYr=o("TFMobileBertForQuestionAnswering"),aYr=o(" (MobileBERT model)"),nYr=l(),LA=a("li"),tye=a("strong"),sYr=o("mpnet"),lYr=o(" \u2014 "),mte=a("a"),iYr=o("TFMPNetForQuestionAnswering"),dYr=o(" (MPNet model)"),cYr=l(),xA=a("li"),aye=a("strong"),mYr=o("rembert"),fYr=o(" \u2014 "),fte=a("a"),gYr=o("TFRemBertForQuestionAnswering"),hYr=o(" (RemBERT model)"),uYr=l(),$A=a("li"),nye=a("strong"),pYr=o("roberta"),_Yr=o(" \u2014 "),gte=a("a"),bYr=o("TFRobertaForQuestionAnswering"),vYr=o(" (RoBERTa model)"),FYr=l(),kA=a("li"),sye=a("strong"),TYr=o("roformer"),MYr=o(" \u2014 "),hte=a("a"),EYr=o("TFRoFormerForQuestionAnswering"),CYr=o(" (RoFormer model)"),wYr=l(),SA=a("li"),lye=a("strong"),AYr=o("xlm"),yYr=o(" \u2014 "),ute=a("a"),LYr=o("TFXLMForQuestionAnsweringSimple"),xYr=o(" (XLM model)"),$Yr=l(),RA=a("li"),iye=a("strong"),kYr=o("xlm-roberta"),SYr=o(" \u2014 "),pte=a("a"),RYr=o("TFXLMRobertaForQuestionAnswering"),PYr=o(" (XLM-RoBERTa model)"),BYr=l(),PA=a("li"),dye=a("strong"),IYr=o("xlnet"),NYr=o(" \u2014 "),_te=a("a"),qYr=o("TFXLNetForQuestionAnsweringSimple"),jYr=o(" (XLNet model)"),DYr=l(),F(BA.$$.fragment),aKe=l(),Lm=a("h2"),IA=a("a"),cye=a("span"),F(FS.$$.fragment),GYr=l(),mye=a("span"),OYr=o("TFAutoModelForVision2Seq"),nKe=l(),Fr=a("div"),F(TS.$$.fragment),VYr=l(),xm=a("p"),XYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bte=a("a"),zYr=o("from_pretrained()"),QYr=o(" class method or the "),vte=a("a"),WYr=o("from_config()"),UYr=o(` class
method.`),HYr=l(),MS=a("p"),JYr=o("This class cannot be instantiated directly using "),fye=a("code"),YYr=o("__init__()"),KYr=o(" (throws an error)."),ZYr=l(),ta=a("div"),F(ES.$$.fragment),eKr=l(),gye=a("p"),oKr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rKr=l(),$m=a("p"),tKr=o(`Note:
Loading a model from its configuration file does `),hye=a("strong"),aKr=o("not"),nKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fte=a("a"),sKr=o("from_pretrained()"),lKr=o(" to load the model weights."),iKr=l(),F(NA.$$.fragment),dKr=l(),Jr=a("div"),F(CS.$$.fragment),cKr=l(),uye=a("p"),mKr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fKr=l(),qn=a("p"),gKr=o("The model class to instantiate is selected based on the "),pye=a("code"),hKr=o("model_type"),uKr=o(` property of the config object (either
passed as an argument or loaded from `),_ye=a("code"),pKr=o("pretrained_model_name_or_path"),_Kr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bye=a("code"),bKr=o("pretrained_model_name_or_path"),vKr=o(":"),FKr=l(),vye=a("ul"),qA=a("li"),Fye=a("strong"),TKr=o("vision-encoder-decoder"),MKr=o(" \u2014 "),Tte=a("a"),EKr=o("TFVisionEncoderDecoderModel"),CKr=o(" (Vision Encoder decoder model)"),wKr=l(),F(jA.$$.fragment),sKe=l(),km=a("h2"),DA=a("a"),Tye=a("span"),F(wS.$$.fragment),AKr=l(),Mye=a("span"),yKr=o("TFAutoModelForSpeechSeq2Seq"),lKe=l(),Tr=a("div"),F(AS.$$.fragment),LKr=l(),Sm=a("p"),xKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mte=a("a"),$Kr=o("from_pretrained()"),kKr=o(" class method or the "),Ete=a("a"),SKr=o("from_config()"),RKr=o(` class
method.`),PKr=l(),yS=a("p"),BKr=o("This class cannot be instantiated directly using "),Eye=a("code"),IKr=o("__init__()"),NKr=o(" (throws an error)."),qKr=l(),aa=a("div"),F(LS.$$.fragment),jKr=l(),Cye=a("p"),DKr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),GKr=l(),Rm=a("p"),OKr=o(`Note:
Loading a model from its configuration file does `),wye=a("strong"),VKr=o("not"),XKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cte=a("a"),zKr=o("from_pretrained()"),QKr=o(" to load the model weights."),WKr=l(),F(GA.$$.fragment),UKr=l(),Yr=a("div"),F(xS.$$.fragment),HKr=l(),Aye=a("p"),JKr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),YKr=l(),jn=a("p"),KKr=o("The model class to instantiate is selected based on the "),yye=a("code"),ZKr=o("model_type"),eZr=o(` property of the config object (either
passed as an argument or loaded from `),Lye=a("code"),oZr=o("pretrained_model_name_or_path"),rZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xye=a("code"),tZr=o("pretrained_model_name_or_path"),aZr=o(":"),nZr=l(),$ye=a("ul"),OA=a("li"),kye=a("strong"),sZr=o("speech_to_text"),lZr=o(" \u2014 "),wte=a("a"),iZr=o("TFSpeech2TextForConditionalGeneration"),dZr=o(" (Speech2Text model)"),cZr=l(),F(VA.$$.fragment),iKe=l(),Pm=a("h2"),XA=a("a"),Sye=a("span"),F($S.$$.fragment),mZr=l(),Rye=a("span"),fZr=o("FlaxAutoModel"),dKe=l(),Mr=a("div"),F(kS.$$.fragment),gZr=l(),Bm=a("p"),hZr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ate=a("a"),uZr=o("from_pretrained()"),pZr=o(" class method or the "),yte=a("a"),_Zr=o("from_config()"),bZr=o(` class
method.`),vZr=l(),SS=a("p"),FZr=o("This class cannot be instantiated directly using "),Pye=a("code"),TZr=o("__init__()"),MZr=o(" (throws an error)."),EZr=l(),na=a("div"),F(RS.$$.fragment),CZr=l(),Bye=a("p"),wZr=o("Instantiates one of the base model classes of the library from a configuration."),AZr=l(),Im=a("p"),yZr=o(`Note:
Loading a model from its configuration file does `),Iye=a("strong"),LZr=o("not"),xZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lte=a("a"),$Zr=o("from_pretrained()"),kZr=o(" to load the model weights."),SZr=l(),F(zA.$$.fragment),RZr=l(),Kr=a("div"),F(PS.$$.fragment),PZr=l(),Nye=a("p"),BZr=o("Instantiate one of the base model classes of the library from a pretrained model."),IZr=l(),Dn=a("p"),NZr=o("The model class to instantiate is selected based on the "),qye=a("code"),qZr=o("model_type"),jZr=o(` property of the config object (either
passed as an argument or loaded from `),jye=a("code"),DZr=o("pretrained_model_name_or_path"),GZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dye=a("code"),OZr=o("pretrained_model_name_or_path"),VZr=o(":"),XZr=l(),te=a("ul"),QA=a("li"),Gye=a("strong"),zZr=o("albert"),QZr=o(" \u2014 "),xte=a("a"),WZr=o("FlaxAlbertModel"),UZr=o(" (ALBERT model)"),HZr=l(),WA=a("li"),Oye=a("strong"),JZr=o("bart"),YZr=o(" \u2014 "),$te=a("a"),KZr=o("FlaxBartModel"),ZZr=o(" (BART model)"),eet=l(),UA=a("li"),Vye=a("strong"),oet=o("beit"),ret=o(" \u2014 "),kte=a("a"),tet=o("FlaxBeitModel"),aet=o(" (BEiT model)"),net=l(),HA=a("li"),Xye=a("strong"),set=o("bert"),iet=o(" \u2014 "),Ste=a("a"),det=o("FlaxBertModel"),cet=o(" (BERT model)"),met=l(),JA=a("li"),zye=a("strong"),fet=o("big_bird"),get=o(" \u2014 "),Rte=a("a"),het=o("FlaxBigBirdModel"),uet=o(" (BigBird model)"),pet=l(),YA=a("li"),Qye=a("strong"),_et=o("blenderbot"),bet=o(" \u2014 "),Pte=a("a"),vet=o("FlaxBlenderbotModel"),Fet=o(" (Blenderbot model)"),Tet=l(),KA=a("li"),Wye=a("strong"),Met=o("blenderbot-small"),Eet=o(" \u2014 "),Bte=a("a"),Cet=o("FlaxBlenderbotSmallModel"),wet=o(" (BlenderbotSmall model)"),Aet=l(),ZA=a("li"),Uye=a("strong"),yet=o("clip"),Let=o(" \u2014 "),Ite=a("a"),xet=o("FlaxCLIPModel"),$et=o(" (CLIP model)"),ket=l(),e6=a("li"),Hye=a("strong"),Set=o("distilbert"),Ret=o(" \u2014 "),Nte=a("a"),Pet=o("FlaxDistilBertModel"),Bet=o(" (DistilBERT model)"),Iet=l(),o6=a("li"),Jye=a("strong"),Net=o("electra"),qet=o(" \u2014 "),qte=a("a"),jet=o("FlaxElectraModel"),Det=o(" (ELECTRA model)"),Get=l(),r6=a("li"),Yye=a("strong"),Oet=o("gpt2"),Vet=o(" \u2014 "),jte=a("a"),Xet=o("FlaxGPT2Model"),zet=o(" (OpenAI GPT-2 model)"),Qet=l(),t6=a("li"),Kye=a("strong"),Wet=o("gpt_neo"),Uet=o(" \u2014 "),Dte=a("a"),Het=o("FlaxGPTNeoModel"),Jet=o(" (GPT Neo model)"),Yet=l(),a6=a("li"),Zye=a("strong"),Ket=o("gptj"),Zet=o(" \u2014 "),Gte=a("a"),eot=o("FlaxGPTJModel"),oot=o(" (GPT-J model)"),rot=l(),n6=a("li"),eLe=a("strong"),tot=o("longt5"),aot=o(" \u2014 "),Ote=a("a"),not=o("FlaxLongT5Model"),sot=o(" (LongT5 model)"),lot=l(),s6=a("li"),oLe=a("strong"),iot=o("marian"),dot=o(" \u2014 "),Vte=a("a"),cot=o("FlaxMarianModel"),mot=o(" (Marian model)"),fot=l(),l6=a("li"),rLe=a("strong"),got=o("mbart"),hot=o(" \u2014 "),Xte=a("a"),uot=o("FlaxMBartModel"),pot=o(" (mBART model)"),_ot=l(),i6=a("li"),tLe=a("strong"),bot=o("mt5"),vot=o(" \u2014 "),zte=a("a"),Fot=o("FlaxMT5Model"),Tot=o(" (MT5 model)"),Mot=l(),d6=a("li"),aLe=a("strong"),Eot=o("opt"),Cot=o(" \u2014 "),Qte=a("a"),wot=o("FlaxOPTModel"),Aot=o(" (OPT model)"),yot=l(),c6=a("li"),nLe=a("strong"),Lot=o("pegasus"),xot=o(" \u2014 "),Wte=a("a"),$ot=o("FlaxPegasusModel"),kot=o(" (Pegasus model)"),Sot=l(),m6=a("li"),sLe=a("strong"),Rot=o("roberta"),Pot=o(" \u2014 "),Ute=a("a"),Bot=o("FlaxRobertaModel"),Iot=o(" (RoBERTa model)"),Not=l(),f6=a("li"),lLe=a("strong"),qot=o("roformer"),jot=o(" \u2014 "),Hte=a("a"),Dot=o("FlaxRoFormerModel"),Got=o(" (RoFormer model)"),Oot=l(),g6=a("li"),iLe=a("strong"),Vot=o("t5"),Xot=o(" \u2014 "),Jte=a("a"),zot=o("FlaxT5Model"),Qot=o(" (T5 model)"),Wot=l(),h6=a("li"),dLe=a("strong"),Uot=o("vision-text-dual-encoder"),Hot=o(" \u2014 "),Yte=a("a"),Jot=o("FlaxVisionTextDualEncoderModel"),Yot=o(" (VisionTextDualEncoder model)"),Kot=l(),u6=a("li"),cLe=a("strong"),Zot=o("vit"),ert=o(" \u2014 "),Kte=a("a"),ort=o("FlaxViTModel"),rrt=o(" (ViT model)"),trt=l(),p6=a("li"),mLe=a("strong"),art=o("wav2vec2"),nrt=o(" \u2014 "),Zte=a("a"),srt=o("FlaxWav2Vec2Model"),lrt=o(" (Wav2Vec2 model)"),irt=l(),_6=a("li"),fLe=a("strong"),drt=o("xglm"),crt=o(" \u2014 "),eae=a("a"),mrt=o("FlaxXGLMModel"),frt=o(" (XGLM model)"),grt=l(),b6=a("li"),gLe=a("strong"),hrt=o("xlm-roberta"),urt=o(" \u2014 "),oae=a("a"),prt=o("FlaxXLMRobertaModel"),_rt=o(" (XLM-RoBERTa model)"),brt=l(),F(v6.$$.fragment),cKe=l(),Nm=a("h2"),F6=a("a"),hLe=a("span"),F(BS.$$.fragment),vrt=l(),uLe=a("span"),Frt=o("FlaxAutoModelForCausalLM"),mKe=l(),Er=a("div"),F(IS.$$.fragment),Trt=l(),qm=a("p"),Mrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rae=a("a"),Ert=o("from_pretrained()"),Crt=o(" class method or the "),tae=a("a"),wrt=o("from_config()"),Art=o(` class
method.`),yrt=l(),NS=a("p"),Lrt=o("This class cannot be instantiated directly using "),pLe=a("code"),xrt=o("__init__()"),$rt=o(" (throws an error)."),krt=l(),sa=a("div"),F(qS.$$.fragment),Srt=l(),_Le=a("p"),Rrt=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Prt=l(),jm=a("p"),Brt=o(`Note:
Loading a model from its configuration file does `),bLe=a("strong"),Irt=o("not"),Nrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aae=a("a"),qrt=o("from_pretrained()"),jrt=o(" to load the model weights."),Drt=l(),F(T6.$$.fragment),Grt=l(),Zr=a("div"),F(jS.$$.fragment),Ort=l(),vLe=a("p"),Vrt=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xrt=l(),Gn=a("p"),zrt=o("The model class to instantiate is selected based on the "),FLe=a("code"),Qrt=o("model_type"),Wrt=o(` property of the config object (either
passed as an argument or loaded from `),TLe=a("code"),Urt=o("pretrained_model_name_or_path"),Hrt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MLe=a("code"),Jrt=o("pretrained_model_name_or_path"),Yrt=o(":"),Krt=l(),xe=a("ul"),M6=a("li"),ELe=a("strong"),Zrt=o("bart"),ett=o(" \u2014 "),nae=a("a"),ott=o("FlaxBartForCausalLM"),rtt=o(" (BART model)"),ttt=l(),E6=a("li"),CLe=a("strong"),att=o("bert"),ntt=o(" \u2014 "),sae=a("a"),stt=o("FlaxBertForCausalLM"),ltt=o(" (BERT model)"),itt=l(),C6=a("li"),wLe=a("strong"),dtt=o("big_bird"),ctt=o(" \u2014 "),lae=a("a"),mtt=o("FlaxBigBirdForCausalLM"),ftt=o(" (BigBird model)"),gtt=l(),w6=a("li"),ALe=a("strong"),htt=o("electra"),utt=o(" \u2014 "),iae=a("a"),ptt=o("FlaxElectraForCausalLM"),_tt=o(" (ELECTRA model)"),btt=l(),A6=a("li"),yLe=a("strong"),vtt=o("gpt2"),Ftt=o(" \u2014 "),dae=a("a"),Ttt=o("FlaxGPT2LMHeadModel"),Mtt=o(" (OpenAI GPT-2 model)"),Ett=l(),y6=a("li"),LLe=a("strong"),Ctt=o("gpt_neo"),wtt=o(" \u2014 "),cae=a("a"),Att=o("FlaxGPTNeoForCausalLM"),ytt=o(" (GPT Neo model)"),Ltt=l(),L6=a("li"),xLe=a("strong"),xtt=o("gptj"),$tt=o(" \u2014 "),mae=a("a"),ktt=o("FlaxGPTJForCausalLM"),Stt=o(" (GPT-J model)"),Rtt=l(),x6=a("li"),$Le=a("strong"),Ptt=o("opt"),Btt=o(" \u2014 "),fae=a("a"),Itt=o("FlaxOPTForCausalLM"),Ntt=o(" (OPT model)"),qtt=l(),$6=a("li"),kLe=a("strong"),jtt=o("roberta"),Dtt=o(" \u2014 "),gae=a("a"),Gtt=o("FlaxRobertaForCausalLM"),Ott=o(" (RoBERTa model)"),Vtt=l(),k6=a("li"),SLe=a("strong"),Xtt=o("xglm"),ztt=o(" \u2014 "),hae=a("a"),Qtt=o("FlaxXGLMForCausalLM"),Wtt=o(" (XGLM model)"),Utt=l(),F(S6.$$.fragment),fKe=l(),Dm=a("h2"),R6=a("a"),RLe=a("span"),F(DS.$$.fragment),Htt=l(),PLe=a("span"),Jtt=o("FlaxAutoModelForPreTraining"),gKe=l(),Cr=a("div"),F(GS.$$.fragment),Ytt=l(),Gm=a("p"),Ktt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uae=a("a"),Ztt=o("from_pretrained()"),eat=o(" class method or the "),pae=a("a"),oat=o("from_config()"),rat=o(` class
method.`),tat=l(),OS=a("p"),aat=o("This class cannot be instantiated directly using "),BLe=a("code"),nat=o("__init__()"),sat=o(" (throws an error)."),lat=l(),la=a("div"),F(VS.$$.fragment),iat=l(),ILe=a("p"),dat=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cat=l(),Om=a("p"),mat=o(`Note:
Loading a model from its configuration file does `),NLe=a("strong"),fat=o("not"),gat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ae=a("a"),hat=o("from_pretrained()"),uat=o(" to load the model weights."),pat=l(),F(P6.$$.fragment),_at=l(),et=a("div"),F(XS.$$.fragment),bat=l(),qLe=a("p"),vat=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Fat=l(),On=a("p"),Tat=o("The model class to instantiate is selected based on the "),jLe=a("code"),Mat=o("model_type"),Eat=o(` property of the config object (either
passed as an argument or loaded from `),DLe=a("code"),Cat=o("pretrained_model_name_or_path"),wat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GLe=a("code"),Aat=o("pretrained_model_name_or_path"),yat=o(":"),Lat=l(),Ee=a("ul"),B6=a("li"),OLe=a("strong"),xat=o("albert"),$at=o(" \u2014 "),bae=a("a"),kat=o("FlaxAlbertForPreTraining"),Sat=o(" (ALBERT model)"),Rat=l(),I6=a("li"),VLe=a("strong"),Pat=o("bart"),Bat=o(" \u2014 "),vae=a("a"),Iat=o("FlaxBartForConditionalGeneration"),Nat=o(" (BART model)"),qat=l(),N6=a("li"),XLe=a("strong"),jat=o("bert"),Dat=o(" \u2014 "),Fae=a("a"),Gat=o("FlaxBertForPreTraining"),Oat=o(" (BERT model)"),Vat=l(),q6=a("li"),zLe=a("strong"),Xat=o("big_bird"),zat=o(" \u2014 "),Tae=a("a"),Qat=o("FlaxBigBirdForPreTraining"),Wat=o(" (BigBird model)"),Uat=l(),j6=a("li"),QLe=a("strong"),Hat=o("electra"),Jat=o(" \u2014 "),Mae=a("a"),Yat=o("FlaxElectraForPreTraining"),Kat=o(" (ELECTRA model)"),Zat=l(),D6=a("li"),WLe=a("strong"),ent=o("longt5"),ont=o(" \u2014 "),Eae=a("a"),rnt=o("FlaxLongT5ForConditionalGeneration"),tnt=o(" (LongT5 model)"),ant=l(),G6=a("li"),ULe=a("strong"),nnt=o("mbart"),snt=o(" \u2014 "),Cae=a("a"),lnt=o("FlaxMBartForConditionalGeneration"),int=o(" (mBART model)"),dnt=l(),O6=a("li"),HLe=a("strong"),cnt=o("mt5"),mnt=o(" \u2014 "),wae=a("a"),fnt=o("FlaxMT5ForConditionalGeneration"),gnt=o(" (MT5 model)"),hnt=l(),V6=a("li"),JLe=a("strong"),unt=o("roberta"),pnt=o(" \u2014 "),Aae=a("a"),_nt=o("FlaxRobertaForMaskedLM"),bnt=o(" (RoBERTa model)"),vnt=l(),X6=a("li"),YLe=a("strong"),Fnt=o("roformer"),Tnt=o(" \u2014 "),yae=a("a"),Mnt=o("FlaxRoFormerForMaskedLM"),Ent=o(" (RoFormer model)"),Cnt=l(),z6=a("li"),KLe=a("strong"),wnt=o("t5"),Ant=o(" \u2014 "),Lae=a("a"),ynt=o("FlaxT5ForConditionalGeneration"),Lnt=o(" (T5 model)"),xnt=l(),Q6=a("li"),ZLe=a("strong"),$nt=o("wav2vec2"),knt=o(" \u2014 "),xae=a("a"),Snt=o("FlaxWav2Vec2ForPreTraining"),Rnt=o(" (Wav2Vec2 model)"),Pnt=l(),W6=a("li"),e8e=a("strong"),Bnt=o("xlm-roberta"),Int=o(" \u2014 "),$ae=a("a"),Nnt=o("FlaxXLMRobertaForMaskedLM"),qnt=o(" (XLM-RoBERTa model)"),jnt=l(),F(U6.$$.fragment),hKe=l(),Vm=a("h2"),H6=a("a"),o8e=a("span"),F(zS.$$.fragment),Dnt=l(),r8e=a("span"),Gnt=o("FlaxAutoModelForMaskedLM"),uKe=l(),wr=a("div"),F(QS.$$.fragment),Ont=l(),Xm=a("p"),Vnt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kae=a("a"),Xnt=o("from_pretrained()"),znt=o(" class method or the "),Sae=a("a"),Qnt=o("from_config()"),Wnt=o(` class
method.`),Unt=l(),WS=a("p"),Hnt=o("This class cannot be instantiated directly using "),t8e=a("code"),Jnt=o("__init__()"),Ynt=o(" (throws an error)."),Knt=l(),ia=a("div"),F(US.$$.fragment),Znt=l(),a8e=a("p"),est=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ost=l(),zm=a("p"),rst=o(`Note:
Loading a model from its configuration file does `),n8e=a("strong"),tst=o("not"),ast=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rae=a("a"),nst=o("from_pretrained()"),sst=o(" to load the model weights."),lst=l(),F(J6.$$.fragment),ist=l(),ot=a("div"),F(HS.$$.fragment),dst=l(),s8e=a("p"),cst=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mst=l(),Vn=a("p"),fst=o("The model class to instantiate is selected based on the "),l8e=a("code"),gst=o("model_type"),hst=o(` property of the config object (either
passed as an argument or loaded from `),i8e=a("code"),ust=o("pretrained_model_name_or_path"),pst=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d8e=a("code"),_st=o("pretrained_model_name_or_path"),bst=o(":"),vst=l(),$e=a("ul"),Y6=a("li"),c8e=a("strong"),Fst=o("albert"),Tst=o(" \u2014 "),Pae=a("a"),Mst=o("FlaxAlbertForMaskedLM"),Est=o(" (ALBERT model)"),Cst=l(),K6=a("li"),m8e=a("strong"),wst=o("bart"),Ast=o(" \u2014 "),Bae=a("a"),yst=o("FlaxBartForConditionalGeneration"),Lst=o(" (BART model)"),xst=l(),Z6=a("li"),f8e=a("strong"),$st=o("bert"),kst=o(" \u2014 "),Iae=a("a"),Sst=o("FlaxBertForMaskedLM"),Rst=o(" (BERT model)"),Pst=l(),e7=a("li"),g8e=a("strong"),Bst=o("big_bird"),Ist=o(" \u2014 "),Nae=a("a"),Nst=o("FlaxBigBirdForMaskedLM"),qst=o(" (BigBird model)"),jst=l(),o7=a("li"),h8e=a("strong"),Dst=o("distilbert"),Gst=o(" \u2014 "),qae=a("a"),Ost=o("FlaxDistilBertForMaskedLM"),Vst=o(" (DistilBERT model)"),Xst=l(),r7=a("li"),u8e=a("strong"),zst=o("electra"),Qst=o(" \u2014 "),jae=a("a"),Wst=o("FlaxElectraForMaskedLM"),Ust=o(" (ELECTRA model)"),Hst=l(),t7=a("li"),p8e=a("strong"),Jst=o("mbart"),Yst=o(" \u2014 "),Dae=a("a"),Kst=o("FlaxMBartForConditionalGeneration"),Zst=o(" (mBART model)"),elt=l(),a7=a("li"),_8e=a("strong"),olt=o("roberta"),rlt=o(" \u2014 "),Gae=a("a"),tlt=o("FlaxRobertaForMaskedLM"),alt=o(" (RoBERTa model)"),nlt=l(),n7=a("li"),b8e=a("strong"),slt=o("roformer"),llt=o(" \u2014 "),Oae=a("a"),ilt=o("FlaxRoFormerForMaskedLM"),dlt=o(" (RoFormer model)"),clt=l(),s7=a("li"),v8e=a("strong"),mlt=o("xlm-roberta"),flt=o(" \u2014 "),Vae=a("a"),glt=o("FlaxXLMRobertaForMaskedLM"),hlt=o(" (XLM-RoBERTa model)"),ult=l(),F(l7.$$.fragment),pKe=l(),Qm=a("h2"),i7=a("a"),F8e=a("span"),F(JS.$$.fragment),plt=l(),T8e=a("span"),_lt=o("FlaxAutoModelForSeq2SeqLM"),_Ke=l(),Ar=a("div"),F(YS.$$.fragment),blt=l(),Wm=a("p"),vlt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Xae=a("a"),Flt=o("from_pretrained()"),Tlt=o(" class method or the "),zae=a("a"),Mlt=o("from_config()"),Elt=o(` class
method.`),Clt=l(),KS=a("p"),wlt=o("This class cannot be instantiated directly using "),M8e=a("code"),Alt=o("__init__()"),ylt=o(" (throws an error)."),Llt=l(),da=a("div"),F(ZS.$$.fragment),xlt=l(),E8e=a("p"),$lt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),klt=l(),Um=a("p"),Slt=o(`Note:
Loading a model from its configuration file does `),C8e=a("strong"),Rlt=o("not"),Plt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qae=a("a"),Blt=o("from_pretrained()"),Ilt=o(" to load the model weights."),Nlt=l(),F(d7.$$.fragment),qlt=l(),rt=a("div"),F(eR.$$.fragment),jlt=l(),w8e=a("p"),Dlt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Glt=l(),Xn=a("p"),Olt=o("The model class to instantiate is selected based on the "),A8e=a("code"),Vlt=o("model_type"),Xlt=o(` property of the config object (either
passed as an argument or loaded from `),y8e=a("code"),zlt=o("pretrained_model_name_or_path"),Qlt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L8e=a("code"),Wlt=o("pretrained_model_name_or_path"),Ult=o(":"),Hlt=l(),ke=a("ul"),c7=a("li"),x8e=a("strong"),Jlt=o("bart"),Ylt=o(" \u2014 "),Wae=a("a"),Klt=o("FlaxBartForConditionalGeneration"),Zlt=o(" (BART model)"),eit=l(),m7=a("li"),$8e=a("strong"),oit=o("blenderbot"),rit=o(" \u2014 "),Uae=a("a"),tit=o("FlaxBlenderbotForConditionalGeneration"),ait=o(" (Blenderbot model)"),nit=l(),f7=a("li"),k8e=a("strong"),sit=o("blenderbot-small"),lit=o(" \u2014 "),Hae=a("a"),iit=o("FlaxBlenderbotSmallForConditionalGeneration"),dit=o(" (BlenderbotSmall model)"),cit=l(),g7=a("li"),S8e=a("strong"),mit=o("encoder-decoder"),fit=o(" \u2014 "),Jae=a("a"),git=o("FlaxEncoderDecoderModel"),hit=o(" (Encoder decoder model)"),uit=l(),h7=a("li"),R8e=a("strong"),pit=o("longt5"),_it=o(" \u2014 "),Yae=a("a"),bit=o("FlaxLongT5ForConditionalGeneration"),vit=o(" (LongT5 model)"),Fit=l(),u7=a("li"),P8e=a("strong"),Tit=o("marian"),Mit=o(" \u2014 "),Kae=a("a"),Eit=o("FlaxMarianMTModel"),Cit=o(" (Marian model)"),wit=l(),p7=a("li"),B8e=a("strong"),Ait=o("mbart"),yit=o(" \u2014 "),Zae=a("a"),Lit=o("FlaxMBartForConditionalGeneration"),xit=o(" (mBART model)"),$it=l(),_7=a("li"),I8e=a("strong"),kit=o("mt5"),Sit=o(" \u2014 "),ene=a("a"),Rit=o("FlaxMT5ForConditionalGeneration"),Pit=o(" (MT5 model)"),Bit=l(),b7=a("li"),N8e=a("strong"),Iit=o("pegasus"),Nit=o(" \u2014 "),one=a("a"),qit=o("FlaxPegasusForConditionalGeneration"),jit=o(" (Pegasus model)"),Dit=l(),v7=a("li"),q8e=a("strong"),Git=o("t5"),Oit=o(" \u2014 "),rne=a("a"),Vit=o("FlaxT5ForConditionalGeneration"),Xit=o(" (T5 model)"),zit=l(),F(F7.$$.fragment),bKe=l(),Hm=a("h2"),T7=a("a"),j8e=a("span"),F(oR.$$.fragment),Qit=l(),D8e=a("span"),Wit=o("FlaxAutoModelForSequenceClassification"),vKe=l(),yr=a("div"),F(rR.$$.fragment),Uit=l(),Jm=a("p"),Hit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tne=a("a"),Jit=o("from_pretrained()"),Yit=o(" class method or the "),ane=a("a"),Kit=o("from_config()"),Zit=o(` class
method.`),edt=l(),tR=a("p"),odt=o("This class cannot be instantiated directly using "),G8e=a("code"),rdt=o("__init__()"),tdt=o(" (throws an error)."),adt=l(),ca=a("div"),F(aR.$$.fragment),ndt=l(),O8e=a("p"),sdt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ldt=l(),Ym=a("p"),idt=o(`Note:
Loading a model from its configuration file does `),V8e=a("strong"),ddt=o("not"),cdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nne=a("a"),mdt=o("from_pretrained()"),fdt=o(" to load the model weights."),gdt=l(),F(M7.$$.fragment),hdt=l(),tt=a("div"),F(nR.$$.fragment),udt=l(),X8e=a("p"),pdt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_dt=l(),zn=a("p"),bdt=o("The model class to instantiate is selected based on the "),z8e=a("code"),vdt=o("model_type"),Fdt=o(` property of the config object (either
passed as an argument or loaded from `),Q8e=a("code"),Tdt=o("pretrained_model_name_or_path"),Mdt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W8e=a("code"),Edt=o("pretrained_model_name_or_path"),Cdt=o(":"),wdt=l(),Se=a("ul"),E7=a("li"),U8e=a("strong"),Adt=o("albert"),ydt=o(" \u2014 "),sne=a("a"),Ldt=o("FlaxAlbertForSequenceClassification"),xdt=o(" (ALBERT model)"),$dt=l(),C7=a("li"),H8e=a("strong"),kdt=o("bart"),Sdt=o(" \u2014 "),lne=a("a"),Rdt=o("FlaxBartForSequenceClassification"),Pdt=o(" (BART model)"),Bdt=l(),w7=a("li"),J8e=a("strong"),Idt=o("bert"),Ndt=o(" \u2014 "),ine=a("a"),qdt=o("FlaxBertForSequenceClassification"),jdt=o(" (BERT model)"),Ddt=l(),A7=a("li"),Y8e=a("strong"),Gdt=o("big_bird"),Odt=o(" \u2014 "),dne=a("a"),Vdt=o("FlaxBigBirdForSequenceClassification"),Xdt=o(" (BigBird model)"),zdt=l(),y7=a("li"),K8e=a("strong"),Qdt=o("distilbert"),Wdt=o(" \u2014 "),cne=a("a"),Udt=o("FlaxDistilBertForSequenceClassification"),Hdt=o(" (DistilBERT model)"),Jdt=l(),L7=a("li"),Z8e=a("strong"),Ydt=o("electra"),Kdt=o(" \u2014 "),mne=a("a"),Zdt=o("FlaxElectraForSequenceClassification"),ect=o(" (ELECTRA model)"),oct=l(),x7=a("li"),e9e=a("strong"),rct=o("mbart"),tct=o(" \u2014 "),fne=a("a"),act=o("FlaxMBartForSequenceClassification"),nct=o(" (mBART model)"),sct=l(),$7=a("li"),o9e=a("strong"),lct=o("roberta"),ict=o(" \u2014 "),gne=a("a"),dct=o("FlaxRobertaForSequenceClassification"),cct=o(" (RoBERTa model)"),mct=l(),k7=a("li"),r9e=a("strong"),fct=o("roformer"),gct=o(" \u2014 "),hne=a("a"),hct=o("FlaxRoFormerForSequenceClassification"),uct=o(" (RoFormer model)"),pct=l(),S7=a("li"),t9e=a("strong"),_ct=o("xlm-roberta"),bct=o(" \u2014 "),une=a("a"),vct=o("FlaxXLMRobertaForSequenceClassification"),Fct=o(" (XLM-RoBERTa model)"),Tct=l(),F(R7.$$.fragment),FKe=l(),Km=a("h2"),P7=a("a"),a9e=a("span"),F(sR.$$.fragment),Mct=l(),n9e=a("span"),Ect=o("FlaxAutoModelForQuestionAnswering"),TKe=l(),Lr=a("div"),F(lR.$$.fragment),Cct=l(),Zm=a("p"),wct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pne=a("a"),Act=o("from_pretrained()"),yct=o(" class method or the "),_ne=a("a"),Lct=o("from_config()"),xct=o(` class
method.`),$ct=l(),iR=a("p"),kct=o("This class cannot be instantiated directly using "),s9e=a("code"),Sct=o("__init__()"),Rct=o(" (throws an error)."),Pct=l(),ma=a("div"),F(dR.$$.fragment),Bct=l(),l9e=a("p"),Ict=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Nct=l(),ef=a("p"),qct=o(`Note:
Loading a model from its configuration file does `),i9e=a("strong"),jct=o("not"),Dct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bne=a("a"),Gct=o("from_pretrained()"),Oct=o(" to load the model weights."),Vct=l(),F(B7.$$.fragment),Xct=l(),at=a("div"),F(cR.$$.fragment),zct=l(),d9e=a("p"),Qct=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Wct=l(),Qn=a("p"),Uct=o("The model class to instantiate is selected based on the "),c9e=a("code"),Hct=o("model_type"),Jct=o(` property of the config object (either
passed as an argument or loaded from `),m9e=a("code"),Yct=o("pretrained_model_name_or_path"),Kct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=a("code"),Zct=o("pretrained_model_name_or_path"),emt=o(":"),omt=l(),Re=a("ul"),I7=a("li"),g9e=a("strong"),rmt=o("albert"),tmt=o(" \u2014 "),vne=a("a"),amt=o("FlaxAlbertForQuestionAnswering"),nmt=o(" (ALBERT model)"),smt=l(),N7=a("li"),h9e=a("strong"),lmt=o("bart"),imt=o(" \u2014 "),Fne=a("a"),dmt=o("FlaxBartForQuestionAnswering"),cmt=o(" (BART model)"),mmt=l(),q7=a("li"),u9e=a("strong"),fmt=o("bert"),gmt=o(" \u2014 "),Tne=a("a"),hmt=o("FlaxBertForQuestionAnswering"),umt=o(" (BERT model)"),pmt=l(),j7=a("li"),p9e=a("strong"),_mt=o("big_bird"),bmt=o(" \u2014 "),Mne=a("a"),vmt=o("FlaxBigBirdForQuestionAnswering"),Fmt=o(" (BigBird model)"),Tmt=l(),D7=a("li"),_9e=a("strong"),Mmt=o("distilbert"),Emt=o(" \u2014 "),Ene=a("a"),Cmt=o("FlaxDistilBertForQuestionAnswering"),wmt=o(" (DistilBERT model)"),Amt=l(),G7=a("li"),b9e=a("strong"),ymt=o("electra"),Lmt=o(" \u2014 "),Cne=a("a"),xmt=o("FlaxElectraForQuestionAnswering"),$mt=o(" (ELECTRA model)"),kmt=l(),O7=a("li"),v9e=a("strong"),Smt=o("mbart"),Rmt=o(" \u2014 "),wne=a("a"),Pmt=o("FlaxMBartForQuestionAnswering"),Bmt=o(" (mBART model)"),Imt=l(),V7=a("li"),F9e=a("strong"),Nmt=o("roberta"),qmt=o(" \u2014 "),Ane=a("a"),jmt=o("FlaxRobertaForQuestionAnswering"),Dmt=o(" (RoBERTa model)"),Gmt=l(),X7=a("li"),T9e=a("strong"),Omt=o("roformer"),Vmt=o(" \u2014 "),yne=a("a"),Xmt=o("FlaxRoFormerForQuestionAnswering"),zmt=o(" (RoFormer model)"),Qmt=l(),z7=a("li"),M9e=a("strong"),Wmt=o("xlm-roberta"),Umt=o(" \u2014 "),Lne=a("a"),Hmt=o("FlaxXLMRobertaForQuestionAnswering"),Jmt=o(" (XLM-RoBERTa model)"),Ymt=l(),F(Q7.$$.fragment),MKe=l(),of=a("h2"),W7=a("a"),E9e=a("span"),F(mR.$$.fragment),Kmt=l(),C9e=a("span"),Zmt=o("FlaxAutoModelForTokenClassification"),EKe=l(),xr=a("div"),F(fR.$$.fragment),eft=l(),rf=a("p"),oft=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xne=a("a"),rft=o("from_pretrained()"),tft=o(" class method or the "),$ne=a("a"),aft=o("from_config()"),nft=o(` class
method.`),sft=l(),gR=a("p"),lft=o("This class cannot be instantiated directly using "),w9e=a("code"),ift=o("__init__()"),dft=o(" (throws an error)."),cft=l(),fa=a("div"),F(hR.$$.fragment),mft=l(),A9e=a("p"),fft=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gft=l(),tf=a("p"),hft=o(`Note:
Loading a model from its configuration file does `),y9e=a("strong"),uft=o("not"),pft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kne=a("a"),_ft=o("from_pretrained()"),bft=o(" to load the model weights."),vft=l(),F(U7.$$.fragment),Fft=l(),nt=a("div"),F(uR.$$.fragment),Tft=l(),L9e=a("p"),Mft=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Eft=l(),Wn=a("p"),Cft=o("The model class to instantiate is selected based on the "),x9e=a("code"),wft=o("model_type"),Aft=o(` property of the config object (either
passed as an argument or loaded from `),$9e=a("code"),yft=o("pretrained_model_name_or_path"),Lft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k9e=a("code"),xft=o("pretrained_model_name_or_path"),$ft=o(":"),kft=l(),Xe=a("ul"),H7=a("li"),S9e=a("strong"),Sft=o("albert"),Rft=o(" \u2014 "),Sne=a("a"),Pft=o("FlaxAlbertForTokenClassification"),Bft=o(" (ALBERT model)"),Ift=l(),J7=a("li"),R9e=a("strong"),Nft=o("bert"),qft=o(" \u2014 "),Rne=a("a"),jft=o("FlaxBertForTokenClassification"),Dft=o(" (BERT model)"),Gft=l(),Y7=a("li"),P9e=a("strong"),Oft=o("big_bird"),Vft=o(" \u2014 "),Pne=a("a"),Xft=o("FlaxBigBirdForTokenClassification"),zft=o(" (BigBird model)"),Qft=l(),K7=a("li"),B9e=a("strong"),Wft=o("distilbert"),Uft=o(" \u2014 "),Bne=a("a"),Hft=o("FlaxDistilBertForTokenClassification"),Jft=o(" (DistilBERT model)"),Yft=l(),Z7=a("li"),I9e=a("strong"),Kft=o("electra"),Zft=o(" \u2014 "),Ine=a("a"),egt=o("FlaxElectraForTokenClassification"),ogt=o(" (ELECTRA model)"),rgt=l(),ey=a("li"),N9e=a("strong"),tgt=o("roberta"),agt=o(" \u2014 "),Nne=a("a"),ngt=o("FlaxRobertaForTokenClassification"),sgt=o(" (RoBERTa model)"),lgt=l(),oy=a("li"),q9e=a("strong"),igt=o("roformer"),dgt=o(" \u2014 "),qne=a("a"),cgt=o("FlaxRoFormerForTokenClassification"),mgt=o(" (RoFormer model)"),fgt=l(),ry=a("li"),j9e=a("strong"),ggt=o("xlm-roberta"),hgt=o(" \u2014 "),jne=a("a"),ugt=o("FlaxXLMRobertaForTokenClassification"),pgt=o(" (XLM-RoBERTa model)"),_gt=l(),F(ty.$$.fragment),CKe=l(),af=a("h2"),ay=a("a"),D9e=a("span"),F(pR.$$.fragment),bgt=l(),G9e=a("span"),vgt=o("FlaxAutoModelForMultipleChoice"),wKe=l(),$r=a("div"),F(_R.$$.fragment),Fgt=l(),nf=a("p"),Tgt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Dne=a("a"),Mgt=o("from_pretrained()"),Egt=o(" class method or the "),Gne=a("a"),Cgt=o("from_config()"),wgt=o(` class
method.`),Agt=l(),bR=a("p"),ygt=o("This class cannot be instantiated directly using "),O9e=a("code"),Lgt=o("__init__()"),xgt=o(" (throws an error)."),$gt=l(),ga=a("div"),F(vR.$$.fragment),kgt=l(),V9e=a("p"),Sgt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Rgt=l(),sf=a("p"),Pgt=o(`Note:
Loading a model from its configuration file does `),X9e=a("strong"),Bgt=o("not"),Igt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),One=a("a"),Ngt=o("from_pretrained()"),qgt=o(" to load the model weights."),jgt=l(),F(ny.$$.fragment),Dgt=l(),st=a("div"),F(FR.$$.fragment),Ggt=l(),z9e=a("p"),Ogt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vgt=l(),Un=a("p"),Xgt=o("The model class to instantiate is selected based on the "),Q9e=a("code"),zgt=o("model_type"),Qgt=o(` property of the config object (either
passed as an argument or loaded from `),W9e=a("code"),Wgt=o("pretrained_model_name_or_path"),Ugt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U9e=a("code"),Hgt=o("pretrained_model_name_or_path"),Jgt=o(":"),Ygt=l(),ze=a("ul"),sy=a("li"),H9e=a("strong"),Kgt=o("albert"),Zgt=o(" \u2014 "),Vne=a("a"),eht=o("FlaxAlbertForMultipleChoice"),oht=o(" (ALBERT model)"),rht=l(),ly=a("li"),J9e=a("strong"),tht=o("bert"),aht=o(" \u2014 "),Xne=a("a"),nht=o("FlaxBertForMultipleChoice"),sht=o(" (BERT model)"),lht=l(),iy=a("li"),Y9e=a("strong"),iht=o("big_bird"),dht=o(" \u2014 "),zne=a("a"),cht=o("FlaxBigBirdForMultipleChoice"),mht=o(" (BigBird model)"),fht=l(),dy=a("li"),K9e=a("strong"),ght=o("distilbert"),hht=o(" \u2014 "),Qne=a("a"),uht=o("FlaxDistilBertForMultipleChoice"),pht=o(" (DistilBERT model)"),_ht=l(),cy=a("li"),Z9e=a("strong"),bht=o("electra"),vht=o(" \u2014 "),Wne=a("a"),Fht=o("FlaxElectraForMultipleChoice"),Tht=o(" (ELECTRA model)"),Mht=l(),my=a("li"),exe=a("strong"),Eht=o("roberta"),Cht=o(" \u2014 "),Une=a("a"),wht=o("FlaxRobertaForMultipleChoice"),Aht=o(" (RoBERTa model)"),yht=l(),fy=a("li"),oxe=a("strong"),Lht=o("roformer"),xht=o(" \u2014 "),Hne=a("a"),$ht=o("FlaxRoFormerForMultipleChoice"),kht=o(" (RoFormer model)"),Sht=l(),gy=a("li"),rxe=a("strong"),Rht=o("xlm-roberta"),Pht=o(" \u2014 "),Jne=a("a"),Bht=o("FlaxXLMRobertaForMultipleChoice"),Iht=o(" (XLM-RoBERTa model)"),Nht=l(),F(hy.$$.fragment),AKe=l(),lf=a("h2"),uy=a("a"),txe=a("span"),F(TR.$$.fragment),qht=l(),axe=a("span"),jht=o("FlaxAutoModelForNextSentencePrediction"),yKe=l(),kr=a("div"),F(MR.$$.fragment),Dht=l(),df=a("p"),Ght=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yne=a("a"),Oht=o("from_pretrained()"),Vht=o(" class method or the "),Kne=a("a"),Xht=o("from_config()"),zht=o(` class
method.`),Qht=l(),ER=a("p"),Wht=o("This class cannot be instantiated directly using "),nxe=a("code"),Uht=o("__init__()"),Hht=o(" (throws an error)."),Jht=l(),ha=a("div"),F(CR.$$.fragment),Yht=l(),sxe=a("p"),Kht=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Zht=l(),cf=a("p"),eut=o(`Note:
Loading a model from its configuration file does `),lxe=a("strong"),out=o("not"),rut=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zne=a("a"),tut=o("from_pretrained()"),aut=o(" to load the model weights."),nut=l(),F(py.$$.fragment),sut=l(),lt=a("div"),F(wR.$$.fragment),lut=l(),ixe=a("p"),iut=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dut=l(),Hn=a("p"),cut=o("The model class to instantiate is selected based on the "),dxe=a("code"),mut=o("model_type"),fut=o(` property of the config object (either
passed as an argument or loaded from `),cxe=a("code"),gut=o("pretrained_model_name_or_path"),hut=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mxe=a("code"),uut=o("pretrained_model_name_or_path"),put=o(":"),_ut=l(),fxe=a("ul"),_y=a("li"),gxe=a("strong"),but=o("bert"),vut=o(" \u2014 "),ese=a("a"),Fut=o("FlaxBertForNextSentencePrediction"),Tut=o(" (BERT model)"),Mut=l(),F(by.$$.fragment),LKe=l(),mf=a("h2"),vy=a("a"),hxe=a("span"),F(AR.$$.fragment),Eut=l(),uxe=a("span"),Cut=o("FlaxAutoModelForImageClassification"),xKe=l(),Sr=a("div"),F(yR.$$.fragment),wut=l(),ff=a("p"),Aut=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ose=a("a"),yut=o("from_pretrained()"),Lut=o(" class method or the "),rse=a("a"),xut=o("from_config()"),$ut=o(` class
method.`),kut=l(),LR=a("p"),Sut=o("This class cannot be instantiated directly using "),pxe=a("code"),Rut=o("__init__()"),Put=o(" (throws an error)."),But=l(),ua=a("div"),F(xR.$$.fragment),Iut=l(),_xe=a("p"),Nut=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qut=l(),gf=a("p"),jut=o(`Note:
Loading a model from its configuration file does `),bxe=a("strong"),Dut=o("not"),Gut=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tse=a("a"),Out=o("from_pretrained()"),Vut=o(" to load the model weights."),Xut=l(),F(Fy.$$.fragment),zut=l(),it=a("div"),F($R.$$.fragment),Qut=l(),vxe=a("p"),Wut=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Uut=l(),Jn=a("p"),Hut=o("The model class to instantiate is selected based on the "),Fxe=a("code"),Jut=o("model_type"),Yut=o(` property of the config object (either
passed as an argument or loaded from `),Txe=a("code"),Kut=o("pretrained_model_name_or_path"),Zut=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mxe=a("code"),ept=o("pretrained_model_name_or_path"),opt=o(":"),rpt=l(),kR=a("ul"),Ty=a("li"),Exe=a("strong"),tpt=o("beit"),apt=o(" \u2014 "),ase=a("a"),npt=o("FlaxBeitForImageClassification"),spt=o(" (BEiT model)"),lpt=l(),My=a("li"),Cxe=a("strong"),ipt=o("vit"),dpt=o(" \u2014 "),nse=a("a"),cpt=o("FlaxViTForImageClassification"),mpt=o(" (ViT model)"),fpt=l(),F(Ey.$$.fragment),$Ke=l(),hf=a("h2"),Cy=a("a"),wxe=a("span"),F(SR.$$.fragment),gpt=l(),Axe=a("span"),hpt=o("FlaxAutoModelForVision2Seq"),kKe=l(),Rr=a("div"),F(RR.$$.fragment),upt=l(),uf=a("p"),ppt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sse=a("a"),_pt=o("from_pretrained()"),bpt=o(" class method or the "),lse=a("a"),vpt=o("from_config()"),Fpt=o(` class
method.`),Tpt=l(),PR=a("p"),Mpt=o("This class cannot be instantiated directly using "),yxe=a("code"),Ept=o("__init__()"),Cpt=o(" (throws an error)."),wpt=l(),pa=a("div"),F(BR.$$.fragment),Apt=l(),Lxe=a("p"),ypt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Lpt=l(),pf=a("p"),xpt=o(`Note:
Loading a model from its configuration file does `),xxe=a("strong"),$pt=o("not"),kpt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ise=a("a"),Spt=o("from_pretrained()"),Rpt=o(" to load the model weights."),Ppt=l(),F(wy.$$.fragment),Bpt=l(),dt=a("div"),F(IR.$$.fragment),Ipt=l(),$xe=a("p"),Npt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qpt=l(),Yn=a("p"),jpt=o("The model class to instantiate is selected based on the "),kxe=a("code"),Dpt=o("model_type"),Gpt=o(` property of the config object (either
passed as an argument or loaded from `),Sxe=a("code"),Opt=o("pretrained_model_name_or_path"),Vpt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rxe=a("code"),Xpt=o("pretrained_model_name_or_path"),zpt=o(":"),Qpt=l(),Pxe=a("ul"),Ay=a("li"),Bxe=a("strong"),Wpt=o("vision-encoder-decoder"),Upt=o(" \u2014 "),dse=a("a"),Hpt=o("FlaxVisionEncoderDecoderModel"),Jpt=o(" (Vision Encoder decoder model)"),Ypt=l(),F(yy.$$.fragment),this.h()},l(m){const _=_da('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var NR=s(u);f=n(NR,"A",{id:!0,class:!0,href:!0});var Ixe=s(f);p=n(Ixe,"SPAN",{});var Nxe=s(p);T(d.$$.fragment,Nxe),Nxe.forEach(t),Ixe.forEach(t),h=i(NR),yo=n(NR,"SPAN",{});var qxe=s(yo);ed=r(qxe,"Auto Classes"),qxe.forEach(t),NR.forEach(t),Ff=i(m),ut=n(m,"P",{});var qR=s(ut);od=r(qR,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),rd=n(qR,"CODE",{});var jxe=s(rd);t9=r(jxe,"from_pretrained()"),jxe.forEach(t),Tf=r(qR,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qR.forEach(t),Ve=i(m),Ue=n(m,"P",{});var Kn=s(Ue);td=r(Kn,"Instantiating one of "),Zn=n(Kn,"A",{href:!0});var Dxe=s(Zn);a9=r(Dxe,"AutoConfig"),Dxe.forEach(t),es=r(Kn,", "),os=n(Kn,"A",{href:!0});var Gxe=s(os);n9=r(Gxe,"AutoModel"),Gxe.forEach(t),ad=r(Kn,`, and
`),rs=n(Kn,"A",{href:!0});var Oxe=s(rs);s9=r(Oxe,"AutoTokenizer"),Oxe.forEach(t),nd=r(Kn," will directly create a class of the relevant architecture. For instance"),Kn.forEach(t),Mf=i(m),T(Qa.$$.fragment,m),He=i(m),Ae=n(m,"P",{});var jR=s(Ae);sB=r(jR,"will create a model that is an instance of "),sd=n(jR,"A",{href:!0});var Vxe=s(sd);lB=r(Vxe,"BertModel"),Vxe.forEach(t),iB=r(jR,"."),jR.forEach(t),Lo=i(m),Wa=n(m,"P",{});var DR=s(Wa);dB=r(DR,"There is one class of "),Ef=n(DR,"CODE",{});var Xxe=s(Ef);cB=r(Xxe,"AutoModel"),Xxe.forEach(t),Jeo=r(DR," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),DR.forEach(t),vJe=i(m),ld=n(m,"H2",{class:!0});var GR=s(ld);Cf=n(GR,"A",{id:!0,class:!0,href:!0});var zxe=s(Cf);gie=n(zxe,"SPAN",{});var Qxe=s(gie);T(l9.$$.fragment,Qxe),Qxe.forEach(t),zxe.forEach(t),Yeo=i(GR),hie=n(GR,"SPAN",{});var Wxe=s(hie);Keo=r(Wxe,"Extending the Auto Classes"),Wxe.forEach(t),GR.forEach(t),FJe=i(m),ts=n(m,"P",{});var _f=s(ts);Zeo=r(_f,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),uie=n(_f,"CODE",{});var Uxe=s(uie);eoo=r(Uxe,"NewModel"),Uxe.forEach(t),ooo=r(_f,", make sure you have a "),pie=n(_f,"CODE",{});var Hxe=s(pie);roo=r(Hxe,"NewModelConfig"),Hxe.forEach(t),too=r(_f,` then you can add those to the auto
classes like this:`),_f.forEach(t),TJe=i(m),T(i9.$$.fragment,m),MJe=i(m),mB=n(m,"P",{});var Jxe=s(mB);aoo=r(Jxe,"You will then be able to use the auto classes like you would usually do!"),Jxe.forEach(t),EJe=i(m),T(wf.$$.fragment,m),CJe=i(m),id=n(m,"H2",{class:!0});var OR=s(id);Af=n(OR,"A",{id:!0,class:!0,href:!0});var Yxe=s(Af);_ie=n(Yxe,"SPAN",{});var Kxe=s(_ie);T(d9.$$.fragment,Kxe),Kxe.forEach(t),Yxe.forEach(t),noo=i(OR),bie=n(OR,"SPAN",{});var Zxe=s(bie);soo=r(Zxe,"AutoConfig"),Zxe.forEach(t),OR.forEach(t),wJe=i(m),xo=n(m,"DIV",{class:!0});var gt=s(xo);T(c9.$$.fragment,gt),loo=i(gt),m9=n(gt,"P",{});var VR=s(m9);ioo=r(VR,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),fB=n(VR,"A",{href:!0});var e$e=s(fB);doo=r(e$e,"from_pretrained()"),e$e.forEach(t),coo=r(VR," class method."),VR.forEach(t),moo=i(gt),f9=n(gt,"P",{});var XR=s(f9);foo=r(XR,"This class cannot be instantiated directly using "),vie=n(XR,"CODE",{});var o$e=s(vie);goo=r(o$e,"__init__()"),o$e.forEach(t),hoo=r(XR," (throws an error)."),XR.forEach(t),uoo=i(gt),Pr=n(gt,"DIV",{class:!0});var ht=s(Pr);T(g9.$$.fragment,ht),poo=i(ht),Fie=n(ht,"P",{});var r$e=s(Fie);_oo=r(r$e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),r$e.forEach(t),boo=i(ht),dd=n(ht,"P",{});var bf=s(dd);voo=r(bf,"The configuration class to instantiate is selected based on the "),Tie=n(bf,"CODE",{});var t$e=s(Tie);Foo=r(t$e,"model_type"),t$e.forEach(t),Too=r(bf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Mie=n(bf,"CODE",{});var a$e=s(Mie);Moo=r(a$e,"pretrained_model_name_or_path"),a$e.forEach(t),Eoo=r(bf,":"),bf.forEach(t),Coo=i(ht),A=n(ht,"UL",{});var y=s(A);yf=n(y,"LI",{});var Ly=s(yf);Eie=n(Ly,"STRONG",{});var n$e=s(Eie);woo=r(n$e,"albert"),n$e.forEach(t),Aoo=r(Ly," \u2014 "),gB=n(Ly,"A",{href:!0});var s$e=s(gB);yoo=r(s$e,"AlbertConfig"),s$e.forEach(t),Loo=r(Ly," (ALBERT model)"),Ly.forEach(t),xoo=i(y),Lf=n(y,"LI",{});var xy=s(Lf);Cie=n(xy,"STRONG",{});var l$e=s(Cie);$oo=r(l$e,"bart"),l$e.forEach(t),koo=r(xy," \u2014 "),hB=n(xy,"A",{href:!0});var i$e=s(hB);Soo=r(i$e,"BartConfig"),i$e.forEach(t),Roo=r(xy," (BART model)"),xy.forEach(t),Poo=i(y),xf=n(y,"LI",{});var $y=s(xf);wie=n($y,"STRONG",{});var d$e=s(wie);Boo=r(d$e,"beit"),d$e.forEach(t),Ioo=r($y," \u2014 "),uB=n($y,"A",{href:!0});var c$e=s(uB);Noo=r(c$e,"BeitConfig"),c$e.forEach(t),qoo=r($y," (BEiT model)"),$y.forEach(t),joo=i(y),$f=n(y,"LI",{});var ky=s($f);Aie=n(ky,"STRONG",{});var m$e=s(Aie);Doo=r(m$e,"bert"),m$e.forEach(t),Goo=r(ky," \u2014 "),pB=n(ky,"A",{href:!0});var f$e=s(pB);Ooo=r(f$e,"BertConfig"),f$e.forEach(t),Voo=r(ky," (BERT model)"),ky.forEach(t),Xoo=i(y),kf=n(y,"LI",{});var Sy=s(kf);yie=n(Sy,"STRONG",{});var g$e=s(yie);zoo=r(g$e,"bert-generation"),g$e.forEach(t),Qoo=r(Sy," \u2014 "),_B=n(Sy,"A",{href:!0});var h$e=s(_B);Woo=r(h$e,"BertGenerationConfig"),h$e.forEach(t),Uoo=r(Sy," (Bert Generation model)"),Sy.forEach(t),Hoo=i(y),Sf=n(y,"LI",{});var Ry=s(Sf);Lie=n(Ry,"STRONG",{});var u$e=s(Lie);Joo=r(u$e,"big_bird"),u$e.forEach(t),Yoo=r(Ry," \u2014 "),bB=n(Ry,"A",{href:!0});var p$e=s(bB);Koo=r(p$e,"BigBirdConfig"),p$e.forEach(t),Zoo=r(Ry," (BigBird model)"),Ry.forEach(t),ero=i(y),Rf=n(y,"LI",{});var Py=s(Rf);xie=n(Py,"STRONG",{});var _$e=s(xie);oro=r(_$e,"bigbird_pegasus"),_$e.forEach(t),rro=r(Py," \u2014 "),vB=n(Py,"A",{href:!0});var b$e=s(vB);tro=r(b$e,"BigBirdPegasusConfig"),b$e.forEach(t),aro=r(Py," (BigBird-Pegasus model)"),Py.forEach(t),nro=i(y),Pf=n(y,"LI",{});var By=s(Pf);$ie=n(By,"STRONG",{});var v$e=s($ie);sro=r(v$e,"blenderbot"),v$e.forEach(t),lro=r(By," \u2014 "),FB=n(By,"A",{href:!0});var F$e=s(FB);iro=r(F$e,"BlenderbotConfig"),F$e.forEach(t),dro=r(By," (Blenderbot model)"),By.forEach(t),cro=i(y),Bf=n(y,"LI",{});var Iy=s(Bf);kie=n(Iy,"STRONG",{});var T$e=s(kie);mro=r(T$e,"blenderbot-small"),T$e.forEach(t),fro=r(Iy," \u2014 "),TB=n(Iy,"A",{href:!0});var M$e=s(TB);gro=r(M$e,"BlenderbotSmallConfig"),M$e.forEach(t),hro=r(Iy," (BlenderbotSmall model)"),Iy.forEach(t),uro=i(y),If=n(y,"LI",{});var Ny=s(If);Sie=n(Ny,"STRONG",{});var E$e=s(Sie);pro=r(E$e,"bloom"),E$e.forEach(t),_ro=r(Ny," \u2014 "),MB=n(Ny,"A",{href:!0});var C$e=s(MB);bro=r(C$e,"BloomConfig"),C$e.forEach(t),vro=r(Ny," (BLOOM model)"),Ny.forEach(t),Fro=i(y),Nf=n(y,"LI",{});var qy=s(Nf);Rie=n(qy,"STRONG",{});var w$e=s(Rie);Tro=r(w$e,"camembert"),w$e.forEach(t),Mro=r(qy," \u2014 "),EB=n(qy,"A",{href:!0});var A$e=s(EB);Ero=r(A$e,"CamembertConfig"),A$e.forEach(t),Cro=r(qy," (CamemBERT model)"),qy.forEach(t),wro=i(y),qf=n(y,"LI",{});var jy=s(qf);Pie=n(jy,"STRONG",{});var y$e=s(Pie);Aro=r(y$e,"canine"),y$e.forEach(t),yro=r(jy," \u2014 "),CB=n(jy,"A",{href:!0});var L$e=s(CB);Lro=r(L$e,"CanineConfig"),L$e.forEach(t),xro=r(jy," (CANINE model)"),jy.forEach(t),$ro=i(y),jf=n(y,"LI",{});var Dy=s(jf);Bie=n(Dy,"STRONG",{});var x$e=s(Bie);kro=r(x$e,"clip"),x$e.forEach(t),Sro=r(Dy," \u2014 "),wB=n(Dy,"A",{href:!0});var $$e=s(wB);Rro=r($$e,"CLIPConfig"),$$e.forEach(t),Pro=r(Dy," (CLIP model)"),Dy.forEach(t),Bro=i(y),Df=n(y,"LI",{});var Gy=s(Df);Iie=n(Gy,"STRONG",{});var k$e=s(Iie);Iro=r(k$e,"codegen"),k$e.forEach(t),Nro=r(Gy," \u2014 "),AB=n(Gy,"A",{href:!0});var S$e=s(AB);qro=r(S$e,"CodeGenConfig"),S$e.forEach(t),jro=r(Gy," (CodeGen model)"),Gy.forEach(t),Dro=i(y),Gf=n(y,"LI",{});var Oy=s(Gf);Nie=n(Oy,"STRONG",{});var R$e=s(Nie);Gro=r(R$e,"convbert"),R$e.forEach(t),Oro=r(Oy," \u2014 "),yB=n(Oy,"A",{href:!0});var P$e=s(yB);Vro=r(P$e,"ConvBertConfig"),P$e.forEach(t),Xro=r(Oy," (ConvBERT model)"),Oy.forEach(t),zro=i(y),Of=n(y,"LI",{});var Vy=s(Of);qie=n(Vy,"STRONG",{});var B$e=s(qie);Qro=r(B$e,"convnext"),B$e.forEach(t),Wro=r(Vy," \u2014 "),LB=n(Vy,"A",{href:!0});var I$e=s(LB);Uro=r(I$e,"ConvNextConfig"),I$e.forEach(t),Hro=r(Vy," (ConvNeXT model)"),Vy.forEach(t),Jro=i(y),Vf=n(y,"LI",{});var Xy=s(Vf);jie=n(Xy,"STRONG",{});var N$e=s(jie);Yro=r(N$e,"ctrl"),N$e.forEach(t),Kro=r(Xy," \u2014 "),xB=n(Xy,"A",{href:!0});var q$e=s(xB);Zro=r(q$e,"CTRLConfig"),q$e.forEach(t),eto=r(Xy," (CTRL model)"),Xy.forEach(t),oto=i(y),Xf=n(y,"LI",{});var zy=s(Xf);Die=n(zy,"STRONG",{});var j$e=s(Die);rto=r(j$e,"cvt"),j$e.forEach(t),tto=r(zy," \u2014 "),$B=n(zy,"A",{href:!0});var D$e=s($B);ato=r(D$e,"CvtConfig"),D$e.forEach(t),nto=r(zy," (CvT model)"),zy.forEach(t),sto=i(y),zf=n(y,"LI",{});var Qy=s(zf);Gie=n(Qy,"STRONG",{});var G$e=s(Gie);lto=r(G$e,"data2vec-audio"),G$e.forEach(t),ito=r(Qy," \u2014 "),kB=n(Qy,"A",{href:!0});var O$e=s(kB);dto=r(O$e,"Data2VecAudioConfig"),O$e.forEach(t),cto=r(Qy," (Data2VecAudio model)"),Qy.forEach(t),mto=i(y),Qf=n(y,"LI",{});var Wy=s(Qf);Oie=n(Wy,"STRONG",{});var V$e=s(Oie);fto=r(V$e,"data2vec-text"),V$e.forEach(t),gto=r(Wy," \u2014 "),SB=n(Wy,"A",{href:!0});var X$e=s(SB);hto=r(X$e,"Data2VecTextConfig"),X$e.forEach(t),uto=r(Wy," (Data2VecText model)"),Wy.forEach(t),pto=i(y),Wf=n(y,"LI",{});var Uy=s(Wf);Vie=n(Uy,"STRONG",{});var z$e=s(Vie);_to=r(z$e,"data2vec-vision"),z$e.forEach(t),bto=r(Uy," \u2014 "),RB=n(Uy,"A",{href:!0});var Q$e=s(RB);vto=r(Q$e,"Data2VecVisionConfig"),Q$e.forEach(t),Fto=r(Uy," (Data2VecVision model)"),Uy.forEach(t),Tto=i(y),Uf=n(y,"LI",{});var Hy=s(Uf);Xie=n(Hy,"STRONG",{});var W$e=s(Xie);Mto=r(W$e,"deberta"),W$e.forEach(t),Eto=r(Hy," \u2014 "),PB=n(Hy,"A",{href:!0});var U$e=s(PB);Cto=r(U$e,"DebertaConfig"),U$e.forEach(t),wto=r(Hy," (DeBERTa model)"),Hy.forEach(t),Ato=i(y),Hf=n(y,"LI",{});var Jy=s(Hf);zie=n(Jy,"STRONG",{});var H$e=s(zie);yto=r(H$e,"deberta-v2"),H$e.forEach(t),Lto=r(Jy," \u2014 "),BB=n(Jy,"A",{href:!0});var J$e=s(BB);xto=r(J$e,"DebertaV2Config"),J$e.forEach(t),$to=r(Jy," (DeBERTa-v2 model)"),Jy.forEach(t),kto=i(y),Jf=n(y,"LI",{});var Yy=s(Jf);Qie=n(Yy,"STRONG",{});var Y$e=s(Qie);Sto=r(Y$e,"decision_transformer"),Y$e.forEach(t),Rto=r(Yy," \u2014 "),IB=n(Yy,"A",{href:!0});var K$e=s(IB);Pto=r(K$e,"DecisionTransformerConfig"),K$e.forEach(t),Bto=r(Yy," (Decision Transformer model)"),Yy.forEach(t),Ito=i(y),Yf=n(y,"LI",{});var Ky=s(Yf);Wie=n(Ky,"STRONG",{});var Z$e=s(Wie);Nto=r(Z$e,"deit"),Z$e.forEach(t),qto=r(Ky," \u2014 "),NB=n(Ky,"A",{href:!0});var eke=s(NB);jto=r(eke,"DeiTConfig"),eke.forEach(t),Dto=r(Ky," (DeiT model)"),Ky.forEach(t),Gto=i(y),Kf=n(y,"LI",{});var Zy=s(Kf);Uie=n(Zy,"STRONG",{});var oke=s(Uie);Oto=r(oke,"detr"),oke.forEach(t),Vto=r(Zy," \u2014 "),qB=n(Zy,"A",{href:!0});var rke=s(qB);Xto=r(rke,"DetrConfig"),rke.forEach(t),zto=r(Zy," (DETR model)"),Zy.forEach(t),Qto=i(y),Zf=n(y,"LI",{});var tke=s(Zf);Hie=n(tke,"STRONG",{});var Zpt=s(Hie);Wto=r(Zpt,"distilbert"),Zpt.forEach(t),Uto=r(tke," \u2014 "),jB=n(tke,"A",{href:!0});var e_t=s(jB);Hto=r(e_t,"DistilBertConfig"),e_t.forEach(t),Jto=r(tke," (DistilBERT model)"),tke.forEach(t),Yto=i(y),eg=n(y,"LI",{});var ake=s(eg);Jie=n(ake,"STRONG",{});var o_t=s(Jie);Kto=r(o_t,"donut-swin"),o_t.forEach(t),Zto=r(ake," \u2014 "),DB=n(ake,"A",{href:!0});var r_t=s(DB);eao=r(r_t,"DonutSwinConfig"),r_t.forEach(t),oao=r(ake," (DonutSwin model)"),ake.forEach(t),rao=i(y),og=n(y,"LI",{});var nke=s(og);Yie=n(nke,"STRONG",{});var t_t=s(Yie);tao=r(t_t,"dpr"),t_t.forEach(t),aao=r(nke," \u2014 "),GB=n(nke,"A",{href:!0});var a_t=s(GB);nao=r(a_t,"DPRConfig"),a_t.forEach(t),sao=r(nke," (DPR model)"),nke.forEach(t),lao=i(y),rg=n(y,"LI",{});var ske=s(rg);Kie=n(ske,"STRONG",{});var n_t=s(Kie);iao=r(n_t,"dpt"),n_t.forEach(t),dao=r(ske," \u2014 "),OB=n(ske,"A",{href:!0});var s_t=s(OB);cao=r(s_t,"DPTConfig"),s_t.forEach(t),mao=r(ske," (DPT model)"),ske.forEach(t),fao=i(y),tg=n(y,"LI",{});var lke=s(tg);Zie=n(lke,"STRONG",{});var l_t=s(Zie);gao=r(l_t,"electra"),l_t.forEach(t),hao=r(lke," \u2014 "),VB=n(lke,"A",{href:!0});var i_t=s(VB);uao=r(i_t,"ElectraConfig"),i_t.forEach(t),pao=r(lke," (ELECTRA model)"),lke.forEach(t),_ao=i(y),ag=n(y,"LI",{});var ike=s(ag);ede=n(ike,"STRONG",{});var d_t=s(ede);bao=r(d_t,"encoder-decoder"),d_t.forEach(t),vao=r(ike," \u2014 "),XB=n(ike,"A",{href:!0});var c_t=s(XB);Fao=r(c_t,"EncoderDecoderConfig"),c_t.forEach(t),Tao=r(ike," (Encoder decoder model)"),ike.forEach(t),Mao=i(y),ng=n(y,"LI",{});var dke=s(ng);ode=n(dke,"STRONG",{});var m_t=s(ode);Eao=r(m_t,"flaubert"),m_t.forEach(t),Cao=r(dke," \u2014 "),zB=n(dke,"A",{href:!0});var f_t=s(zB);wao=r(f_t,"FlaubertConfig"),f_t.forEach(t),Aao=r(dke," (FlauBERT model)"),dke.forEach(t),yao=i(y),sg=n(y,"LI",{});var cke=s(sg);rde=n(cke,"STRONG",{});var g_t=s(rde);Lao=r(g_t,"flava"),g_t.forEach(t),xao=r(cke," \u2014 "),QB=n(cke,"A",{href:!0});var h_t=s(QB);$ao=r(h_t,"FlavaConfig"),h_t.forEach(t),kao=r(cke," (FLAVA model)"),cke.forEach(t),Sao=i(y),lg=n(y,"LI",{});var mke=s(lg);tde=n(mke,"STRONG",{});var u_t=s(tde);Rao=r(u_t,"fnet"),u_t.forEach(t),Pao=r(mke," \u2014 "),WB=n(mke,"A",{href:!0});var p_t=s(WB);Bao=r(p_t,"FNetConfig"),p_t.forEach(t),Iao=r(mke," (FNet model)"),mke.forEach(t),Nao=i(y),ig=n(y,"LI",{});var fke=s(ig);ade=n(fke,"STRONG",{});var __t=s(ade);qao=r(__t,"fsmt"),__t.forEach(t),jao=r(fke," \u2014 "),UB=n(fke,"A",{href:!0});var b_t=s(UB);Dao=r(b_t,"FSMTConfig"),b_t.forEach(t),Gao=r(fke," (FairSeq Machine-Translation model)"),fke.forEach(t),Oao=i(y),dg=n(y,"LI",{});var gke=s(dg);nde=n(gke,"STRONG",{});var v_t=s(nde);Vao=r(v_t,"funnel"),v_t.forEach(t),Xao=r(gke," \u2014 "),HB=n(gke,"A",{href:!0});var F_t=s(HB);zao=r(F_t,"FunnelConfig"),F_t.forEach(t),Qao=r(gke," (Funnel Transformer model)"),gke.forEach(t),Wao=i(y),cg=n(y,"LI",{});var hke=s(cg);sde=n(hke,"STRONG",{});var T_t=s(sde);Uao=r(T_t,"glpn"),T_t.forEach(t),Hao=r(hke," \u2014 "),JB=n(hke,"A",{href:!0});var M_t=s(JB);Jao=r(M_t,"GLPNConfig"),M_t.forEach(t),Yao=r(hke," (GLPN model)"),hke.forEach(t),Kao=i(y),mg=n(y,"LI",{});var uke=s(mg);lde=n(uke,"STRONG",{});var E_t=s(lde);Zao=r(E_t,"gpt2"),E_t.forEach(t),eno=r(uke," \u2014 "),YB=n(uke,"A",{href:!0});var C_t=s(YB);ono=r(C_t,"GPT2Config"),C_t.forEach(t),rno=r(uke," (OpenAI GPT-2 model)"),uke.forEach(t),tno=i(y),fg=n(y,"LI",{});var pke=s(fg);ide=n(pke,"STRONG",{});var w_t=s(ide);ano=r(w_t,"gpt_neo"),w_t.forEach(t),nno=r(pke," \u2014 "),KB=n(pke,"A",{href:!0});var A_t=s(KB);sno=r(A_t,"GPTNeoConfig"),A_t.forEach(t),lno=r(pke," (GPT Neo model)"),pke.forEach(t),ino=i(y),gg=n(y,"LI",{});var _ke=s(gg);dde=n(_ke,"STRONG",{});var y_t=s(dde);dno=r(y_t,"gpt_neox"),y_t.forEach(t),cno=r(_ke," \u2014 "),ZB=n(_ke,"A",{href:!0});var L_t=s(ZB);mno=r(L_t,"GPTNeoXConfig"),L_t.forEach(t),fno=r(_ke," (GPT NeoX model)"),_ke.forEach(t),gno=i(y),hg=n(y,"LI",{});var bke=s(hg);cde=n(bke,"STRONG",{});var x_t=s(cde);hno=r(x_t,"gptj"),x_t.forEach(t),uno=r(bke," \u2014 "),eI=n(bke,"A",{href:!0});var $_t=s(eI);pno=r($_t,"GPTJConfig"),$_t.forEach(t),_no=r(bke," (GPT-J model)"),bke.forEach(t),bno=i(y),ug=n(y,"LI",{});var vke=s(ug);mde=n(vke,"STRONG",{});var k_t=s(mde);vno=r(k_t,"groupvit"),k_t.forEach(t),Fno=r(vke," \u2014 "),oI=n(vke,"A",{href:!0});var S_t=s(oI);Tno=r(S_t,"GroupViTConfig"),S_t.forEach(t),Mno=r(vke," (GroupViT model)"),vke.forEach(t),Eno=i(y),pg=n(y,"LI",{});var Fke=s(pg);fde=n(Fke,"STRONG",{});var R_t=s(fde);Cno=r(R_t,"hubert"),R_t.forEach(t),wno=r(Fke," \u2014 "),rI=n(Fke,"A",{href:!0});var P_t=s(rI);Ano=r(P_t,"HubertConfig"),P_t.forEach(t),yno=r(Fke," (Hubert model)"),Fke.forEach(t),Lno=i(y),_g=n(y,"LI",{});var Tke=s(_g);gde=n(Tke,"STRONG",{});var B_t=s(gde);xno=r(B_t,"ibert"),B_t.forEach(t),$no=r(Tke," \u2014 "),tI=n(Tke,"A",{href:!0});var I_t=s(tI);kno=r(I_t,"IBertConfig"),I_t.forEach(t),Sno=r(Tke," (I-BERT model)"),Tke.forEach(t),Rno=i(y),bg=n(y,"LI",{});var Mke=s(bg);hde=n(Mke,"STRONG",{});var N_t=s(hde);Pno=r(N_t,"imagegpt"),N_t.forEach(t),Bno=r(Mke," \u2014 "),aI=n(Mke,"A",{href:!0});var q_t=s(aI);Ino=r(q_t,"ImageGPTConfig"),q_t.forEach(t),Nno=r(Mke," (ImageGPT model)"),Mke.forEach(t),qno=i(y),vg=n(y,"LI",{});var Eke=s(vg);ude=n(Eke,"STRONG",{});var j_t=s(ude);jno=r(j_t,"layoutlm"),j_t.forEach(t),Dno=r(Eke," \u2014 "),nI=n(Eke,"A",{href:!0});var D_t=s(nI);Gno=r(D_t,"LayoutLMConfig"),D_t.forEach(t),Ono=r(Eke," (LayoutLM model)"),Eke.forEach(t),Vno=i(y),Fg=n(y,"LI",{});var Cke=s(Fg);pde=n(Cke,"STRONG",{});var G_t=s(pde);Xno=r(G_t,"layoutlmv2"),G_t.forEach(t),zno=r(Cke," \u2014 "),sI=n(Cke,"A",{href:!0});var O_t=s(sI);Qno=r(O_t,"LayoutLMv2Config"),O_t.forEach(t),Wno=r(Cke," (LayoutLMv2 model)"),Cke.forEach(t),Uno=i(y),Tg=n(y,"LI",{});var wke=s(Tg);_de=n(wke,"STRONG",{});var V_t=s(_de);Hno=r(V_t,"layoutlmv3"),V_t.forEach(t),Jno=r(wke," \u2014 "),lI=n(wke,"A",{href:!0});var X_t=s(lI);Yno=r(X_t,"LayoutLMv3Config"),X_t.forEach(t),Kno=r(wke," (LayoutLMv3 model)"),wke.forEach(t),Zno=i(y),Mg=n(y,"LI",{});var Ake=s(Mg);bde=n(Ake,"STRONG",{});var z_t=s(bde);eso=r(z_t,"led"),z_t.forEach(t),oso=r(Ake," \u2014 "),iI=n(Ake,"A",{href:!0});var Q_t=s(iI);rso=r(Q_t,"LEDConfig"),Q_t.forEach(t),tso=r(Ake," (LED model)"),Ake.forEach(t),aso=i(y),Eg=n(y,"LI",{});var yke=s(Eg);vde=n(yke,"STRONG",{});var W_t=s(vde);nso=r(W_t,"levit"),W_t.forEach(t),sso=r(yke," \u2014 "),dI=n(yke,"A",{href:!0});var U_t=s(dI);lso=r(U_t,"LevitConfig"),U_t.forEach(t),iso=r(yke," (LeViT model)"),yke.forEach(t),dso=i(y),Cg=n(y,"LI",{});var Lke=s(Cg);Fde=n(Lke,"STRONG",{});var H_t=s(Fde);cso=r(H_t,"longformer"),H_t.forEach(t),mso=r(Lke," \u2014 "),cI=n(Lke,"A",{href:!0});var J_t=s(cI);fso=r(J_t,"LongformerConfig"),J_t.forEach(t),gso=r(Lke," (Longformer model)"),Lke.forEach(t),hso=i(y),wg=n(y,"LI",{});var xke=s(wg);Tde=n(xke,"STRONG",{});var Y_t=s(Tde);uso=r(Y_t,"longt5"),Y_t.forEach(t),pso=r(xke," \u2014 "),mI=n(xke,"A",{href:!0});var K_t=s(mI);_so=r(K_t,"LongT5Config"),K_t.forEach(t),bso=r(xke," (LongT5 model)"),xke.forEach(t),vso=i(y),Ag=n(y,"LI",{});var $ke=s(Ag);Mde=n($ke,"STRONG",{});var Z_t=s(Mde);Fso=r(Z_t,"luke"),Z_t.forEach(t),Tso=r($ke," \u2014 "),fI=n($ke,"A",{href:!0});var ebt=s(fI);Mso=r(ebt,"LukeConfig"),ebt.forEach(t),Eso=r($ke," (LUKE model)"),$ke.forEach(t),Cso=i(y),yg=n(y,"LI",{});var kke=s(yg);Ede=n(kke,"STRONG",{});var obt=s(Ede);wso=r(obt,"lxmert"),obt.forEach(t),Aso=r(kke," \u2014 "),gI=n(kke,"A",{href:!0});var rbt=s(gI);yso=r(rbt,"LxmertConfig"),rbt.forEach(t),Lso=r(kke," (LXMERT model)"),kke.forEach(t),xso=i(y),Lg=n(y,"LI",{});var Ske=s(Lg);Cde=n(Ske,"STRONG",{});var tbt=s(Cde);$so=r(tbt,"m2m_100"),tbt.forEach(t),kso=r(Ske," \u2014 "),hI=n(Ske,"A",{href:!0});var abt=s(hI);Sso=r(abt,"M2M100Config"),abt.forEach(t),Rso=r(Ske," (M2M100 model)"),Ske.forEach(t),Pso=i(y),xg=n(y,"LI",{});var Rke=s(xg);wde=n(Rke,"STRONG",{});var nbt=s(wde);Bso=r(nbt,"marian"),nbt.forEach(t),Iso=r(Rke," \u2014 "),uI=n(Rke,"A",{href:!0});var sbt=s(uI);Nso=r(sbt,"MarianConfig"),sbt.forEach(t),qso=r(Rke," (Marian model)"),Rke.forEach(t),jso=i(y),$g=n(y,"LI",{});var Pke=s($g);Ade=n(Pke,"STRONG",{});var lbt=s(Ade);Dso=r(lbt,"maskformer"),lbt.forEach(t),Gso=r(Pke," \u2014 "),pI=n(Pke,"A",{href:!0});var ibt=s(pI);Oso=r(ibt,"MaskFormerConfig"),ibt.forEach(t),Vso=r(Pke," (MaskFormer model)"),Pke.forEach(t),Xso=i(y),kg=n(y,"LI",{});var Bke=s(kg);yde=n(Bke,"STRONG",{});var dbt=s(yde);zso=r(dbt,"mbart"),dbt.forEach(t),Qso=r(Bke," \u2014 "),_I=n(Bke,"A",{href:!0});var cbt=s(_I);Wso=r(cbt,"MBartConfig"),cbt.forEach(t),Uso=r(Bke," (mBART model)"),Bke.forEach(t),Hso=i(y),Sg=n(y,"LI",{});var Ike=s(Sg);Lde=n(Ike,"STRONG",{});var mbt=s(Lde);Jso=r(mbt,"mctct"),mbt.forEach(t),Yso=r(Ike," \u2014 "),bI=n(Ike,"A",{href:!0});var fbt=s(bI);Kso=r(fbt,"MCTCTConfig"),fbt.forEach(t),Zso=r(Ike," (M-CTC-T model)"),Ike.forEach(t),elo=i(y),Rg=n(y,"LI",{});var Nke=s(Rg);xde=n(Nke,"STRONG",{});var gbt=s(xde);olo=r(gbt,"megatron-bert"),gbt.forEach(t),rlo=r(Nke," \u2014 "),vI=n(Nke,"A",{href:!0});var hbt=s(vI);tlo=r(hbt,"MegatronBertConfig"),hbt.forEach(t),alo=r(Nke," (Megatron-BERT model)"),Nke.forEach(t),nlo=i(y),Pg=n(y,"LI",{});var qke=s(Pg);$de=n(qke,"STRONG",{});var ubt=s($de);slo=r(ubt,"mobilebert"),ubt.forEach(t),llo=r(qke," \u2014 "),FI=n(qke,"A",{href:!0});var pbt=s(FI);ilo=r(pbt,"MobileBertConfig"),pbt.forEach(t),dlo=r(qke," (MobileBERT model)"),qke.forEach(t),clo=i(y),Bg=n(y,"LI",{});var jke=s(Bg);kde=n(jke,"STRONG",{});var _bt=s(kde);mlo=r(_bt,"mobilevit"),_bt.forEach(t),flo=r(jke," \u2014 "),TI=n(jke,"A",{href:!0});var bbt=s(TI);glo=r(bbt,"MobileViTConfig"),bbt.forEach(t),hlo=r(jke," (MobileViT model)"),jke.forEach(t),ulo=i(y),Ig=n(y,"LI",{});var Dke=s(Ig);Sde=n(Dke,"STRONG",{});var vbt=s(Sde);plo=r(vbt,"mpnet"),vbt.forEach(t),_lo=r(Dke," \u2014 "),MI=n(Dke,"A",{href:!0});var Fbt=s(MI);blo=r(Fbt,"MPNetConfig"),Fbt.forEach(t),vlo=r(Dke," (MPNet model)"),Dke.forEach(t),Flo=i(y),Ng=n(y,"LI",{});var Gke=s(Ng);Rde=n(Gke,"STRONG",{});var Tbt=s(Rde);Tlo=r(Tbt,"mt5"),Tbt.forEach(t),Mlo=r(Gke," \u2014 "),EI=n(Gke,"A",{href:!0});var Mbt=s(EI);Elo=r(Mbt,"MT5Config"),Mbt.forEach(t),Clo=r(Gke," (MT5 model)"),Gke.forEach(t),wlo=i(y),qg=n(y,"LI",{});var Oke=s(qg);Pde=n(Oke,"STRONG",{});var Ebt=s(Pde);Alo=r(Ebt,"mvp"),Ebt.forEach(t),ylo=r(Oke," \u2014 "),CI=n(Oke,"A",{href:!0});var Cbt=s(CI);Llo=r(Cbt,"MvpConfig"),Cbt.forEach(t),xlo=r(Oke," (MVP model)"),Oke.forEach(t),$lo=i(y),jg=n(y,"LI",{});var Vke=s(jg);Bde=n(Vke,"STRONG",{});var wbt=s(Bde);klo=r(wbt,"nezha"),wbt.forEach(t),Slo=r(Vke," \u2014 "),wI=n(Vke,"A",{href:!0});var Abt=s(wI);Rlo=r(Abt,"NezhaConfig"),Abt.forEach(t),Plo=r(Vke," (Nezha model)"),Vke.forEach(t),Blo=i(y),Dg=n(y,"LI",{});var Xke=s(Dg);Ide=n(Xke,"STRONG",{});var ybt=s(Ide);Ilo=r(ybt,"nystromformer"),ybt.forEach(t),Nlo=r(Xke," \u2014 "),AI=n(Xke,"A",{href:!0});var Lbt=s(AI);qlo=r(Lbt,"NystromformerConfig"),Lbt.forEach(t),jlo=r(Xke," (Nystr\xF6mformer model)"),Xke.forEach(t),Dlo=i(y),Gg=n(y,"LI",{});var zke=s(Gg);Nde=n(zke,"STRONG",{});var xbt=s(Nde);Glo=r(xbt,"openai-gpt"),xbt.forEach(t),Olo=r(zke," \u2014 "),yI=n(zke,"A",{href:!0});var $bt=s(yI);Vlo=r($bt,"OpenAIGPTConfig"),$bt.forEach(t),Xlo=r(zke," (OpenAI GPT model)"),zke.forEach(t),zlo=i(y),Og=n(y,"LI",{});var Qke=s(Og);qde=n(Qke,"STRONG",{});var kbt=s(qde);Qlo=r(kbt,"opt"),kbt.forEach(t),Wlo=r(Qke," \u2014 "),LI=n(Qke,"A",{href:!0});var Sbt=s(LI);Ulo=r(Sbt,"OPTConfig"),Sbt.forEach(t),Hlo=r(Qke," (OPT model)"),Qke.forEach(t),Jlo=i(y),Vg=n(y,"LI",{});var Wke=s(Vg);jde=n(Wke,"STRONG",{});var Rbt=s(jde);Ylo=r(Rbt,"owlvit"),Rbt.forEach(t),Klo=r(Wke," \u2014 "),xI=n(Wke,"A",{href:!0});var Pbt=s(xI);Zlo=r(Pbt,"OwlViTConfig"),Pbt.forEach(t),eio=r(Wke," (OWL-ViT model)"),Wke.forEach(t),oio=i(y),Xg=n(y,"LI",{});var Uke=s(Xg);Dde=n(Uke,"STRONG",{});var Bbt=s(Dde);rio=r(Bbt,"pegasus"),Bbt.forEach(t),tio=r(Uke," \u2014 "),$I=n(Uke,"A",{href:!0});var Ibt=s($I);aio=r(Ibt,"PegasusConfig"),Ibt.forEach(t),nio=r(Uke," (Pegasus model)"),Uke.forEach(t),sio=i(y),zg=n(y,"LI",{});var Hke=s(zg);Gde=n(Hke,"STRONG",{});var Nbt=s(Gde);lio=r(Nbt,"pegasus_x"),Nbt.forEach(t),iio=r(Hke," \u2014 "),kI=n(Hke,"A",{href:!0});var qbt=s(kI);dio=r(qbt,"PegasusXConfig"),qbt.forEach(t),cio=r(Hke," (PEGASUS-X model)"),Hke.forEach(t),mio=i(y),Qg=n(y,"LI",{});var Jke=s(Qg);Ode=n(Jke,"STRONG",{});var jbt=s(Ode);fio=r(jbt,"perceiver"),jbt.forEach(t),gio=r(Jke," \u2014 "),SI=n(Jke,"A",{href:!0});var Dbt=s(SI);hio=r(Dbt,"PerceiverConfig"),Dbt.forEach(t),uio=r(Jke," (Perceiver model)"),Jke.forEach(t),pio=i(y),Wg=n(y,"LI",{});var Yke=s(Wg);Vde=n(Yke,"STRONG",{});var Gbt=s(Vde);_io=r(Gbt,"plbart"),Gbt.forEach(t),bio=r(Yke," \u2014 "),RI=n(Yke,"A",{href:!0});var Obt=s(RI);vio=r(Obt,"PLBartConfig"),Obt.forEach(t),Fio=r(Yke," (PLBart model)"),Yke.forEach(t),Tio=i(y),Ug=n(y,"LI",{});var Kke=s(Ug);Xde=n(Kke,"STRONG",{});var Vbt=s(Xde);Mio=r(Vbt,"poolformer"),Vbt.forEach(t),Eio=r(Kke," \u2014 "),PI=n(Kke,"A",{href:!0});var Xbt=s(PI);Cio=r(Xbt,"PoolFormerConfig"),Xbt.forEach(t),wio=r(Kke," (PoolFormer model)"),Kke.forEach(t),Aio=i(y),Hg=n(y,"LI",{});var Zke=s(Hg);zde=n(Zke,"STRONG",{});var zbt=s(zde);yio=r(zbt,"prophetnet"),zbt.forEach(t),Lio=r(Zke," \u2014 "),BI=n(Zke,"A",{href:!0});var Qbt=s(BI);xio=r(Qbt,"ProphetNetConfig"),Qbt.forEach(t),$io=r(Zke," (ProphetNet model)"),Zke.forEach(t),kio=i(y),Jg=n(y,"LI",{});var eSe=s(Jg);Qde=n(eSe,"STRONG",{});var Wbt=s(Qde);Sio=r(Wbt,"qdqbert"),Wbt.forEach(t),Rio=r(eSe," \u2014 "),II=n(eSe,"A",{href:!0});var Ubt=s(II);Pio=r(Ubt,"QDQBertConfig"),Ubt.forEach(t),Bio=r(eSe," (QDQBert model)"),eSe.forEach(t),Iio=i(y),Yg=n(y,"LI",{});var oSe=s(Yg);Wde=n(oSe,"STRONG",{});var Hbt=s(Wde);Nio=r(Hbt,"rag"),Hbt.forEach(t),qio=r(oSe," \u2014 "),NI=n(oSe,"A",{href:!0});var Jbt=s(NI);jio=r(Jbt,"RagConfig"),Jbt.forEach(t),Dio=r(oSe," (RAG model)"),oSe.forEach(t),Gio=i(y),Kg=n(y,"LI",{});var rSe=s(Kg);Ude=n(rSe,"STRONG",{});var Ybt=s(Ude);Oio=r(Ybt,"realm"),Ybt.forEach(t),Vio=r(rSe," \u2014 "),qI=n(rSe,"A",{href:!0});var Kbt=s(qI);Xio=r(Kbt,"RealmConfig"),Kbt.forEach(t),zio=r(rSe," (REALM model)"),rSe.forEach(t),Qio=i(y),Zg=n(y,"LI",{});var tSe=s(Zg);Hde=n(tSe,"STRONG",{});var Zbt=s(Hde);Wio=r(Zbt,"reformer"),Zbt.forEach(t),Uio=r(tSe," \u2014 "),jI=n(tSe,"A",{href:!0});var e2t=s(jI);Hio=r(e2t,"ReformerConfig"),e2t.forEach(t),Jio=r(tSe," (Reformer model)"),tSe.forEach(t),Yio=i(y),eh=n(y,"LI",{});var aSe=s(eh);Jde=n(aSe,"STRONG",{});var o2t=s(Jde);Kio=r(o2t,"regnet"),o2t.forEach(t),Zio=r(aSe," \u2014 "),DI=n(aSe,"A",{href:!0});var r2t=s(DI);edo=r(r2t,"RegNetConfig"),r2t.forEach(t),odo=r(aSe," (RegNet model)"),aSe.forEach(t),rdo=i(y),oh=n(y,"LI",{});var nSe=s(oh);Yde=n(nSe,"STRONG",{});var t2t=s(Yde);tdo=r(t2t,"rembert"),t2t.forEach(t),ado=r(nSe," \u2014 "),GI=n(nSe,"A",{href:!0});var a2t=s(GI);ndo=r(a2t,"RemBertConfig"),a2t.forEach(t),sdo=r(nSe," (RemBERT model)"),nSe.forEach(t),ldo=i(y),rh=n(y,"LI",{});var sSe=s(rh);Kde=n(sSe,"STRONG",{});var n2t=s(Kde);ido=r(n2t,"resnet"),n2t.forEach(t),ddo=r(sSe," \u2014 "),OI=n(sSe,"A",{href:!0});var s2t=s(OI);cdo=r(s2t,"ResNetConfig"),s2t.forEach(t),mdo=r(sSe," (ResNet model)"),sSe.forEach(t),fdo=i(y),th=n(y,"LI",{});var lSe=s(th);Zde=n(lSe,"STRONG",{});var l2t=s(Zde);gdo=r(l2t,"retribert"),l2t.forEach(t),hdo=r(lSe," \u2014 "),VI=n(lSe,"A",{href:!0});var i2t=s(VI);udo=r(i2t,"RetriBertConfig"),i2t.forEach(t),pdo=r(lSe," (RetriBERT model)"),lSe.forEach(t),_do=i(y),ah=n(y,"LI",{});var iSe=s(ah);ece=n(iSe,"STRONG",{});var d2t=s(ece);bdo=r(d2t,"roberta"),d2t.forEach(t),vdo=r(iSe," \u2014 "),XI=n(iSe,"A",{href:!0});var c2t=s(XI);Fdo=r(c2t,"RobertaConfig"),c2t.forEach(t),Tdo=r(iSe," (RoBERTa model)"),iSe.forEach(t),Mdo=i(y),nh=n(y,"LI",{});var dSe=s(nh);oce=n(dSe,"STRONG",{});var m2t=s(oce);Edo=r(m2t,"roformer"),m2t.forEach(t),Cdo=r(dSe," \u2014 "),zI=n(dSe,"A",{href:!0});var f2t=s(zI);wdo=r(f2t,"RoFormerConfig"),f2t.forEach(t),Ado=r(dSe," (RoFormer model)"),dSe.forEach(t),ydo=i(y),sh=n(y,"LI",{});var cSe=s(sh);rce=n(cSe,"STRONG",{});var g2t=s(rce);Ldo=r(g2t,"segformer"),g2t.forEach(t),xdo=r(cSe," \u2014 "),QI=n(cSe,"A",{href:!0});var h2t=s(QI);$do=r(h2t,"SegformerConfig"),h2t.forEach(t),kdo=r(cSe," (SegFormer model)"),cSe.forEach(t),Sdo=i(y),lh=n(y,"LI",{});var mSe=s(lh);tce=n(mSe,"STRONG",{});var u2t=s(tce);Rdo=r(u2t,"sew"),u2t.forEach(t),Pdo=r(mSe," \u2014 "),WI=n(mSe,"A",{href:!0});var p2t=s(WI);Bdo=r(p2t,"SEWConfig"),p2t.forEach(t),Ido=r(mSe," (SEW model)"),mSe.forEach(t),Ndo=i(y),ih=n(y,"LI",{});var fSe=s(ih);ace=n(fSe,"STRONG",{});var _2t=s(ace);qdo=r(_2t,"sew-d"),_2t.forEach(t),jdo=r(fSe," \u2014 "),UI=n(fSe,"A",{href:!0});var b2t=s(UI);Ddo=r(b2t,"SEWDConfig"),b2t.forEach(t),Gdo=r(fSe," (SEW-D model)"),fSe.forEach(t),Odo=i(y),dh=n(y,"LI",{});var gSe=s(dh);nce=n(gSe,"STRONG",{});var v2t=s(nce);Vdo=r(v2t,"speech-encoder-decoder"),v2t.forEach(t),Xdo=r(gSe," \u2014 "),HI=n(gSe,"A",{href:!0});var F2t=s(HI);zdo=r(F2t,"SpeechEncoderDecoderConfig"),F2t.forEach(t),Qdo=r(gSe," (Speech Encoder decoder model)"),gSe.forEach(t),Wdo=i(y),ch=n(y,"LI",{});var hSe=s(ch);sce=n(hSe,"STRONG",{});var T2t=s(sce);Udo=r(T2t,"speech_to_text"),T2t.forEach(t),Hdo=r(hSe," \u2014 "),JI=n(hSe,"A",{href:!0});var M2t=s(JI);Jdo=r(M2t,"Speech2TextConfig"),M2t.forEach(t),Ydo=r(hSe," (Speech2Text model)"),hSe.forEach(t),Kdo=i(y),mh=n(y,"LI",{});var uSe=s(mh);lce=n(uSe,"STRONG",{});var E2t=s(lce);Zdo=r(E2t,"speech_to_text_2"),E2t.forEach(t),eco=r(uSe," \u2014 "),YI=n(uSe,"A",{href:!0});var C2t=s(YI);oco=r(C2t,"Speech2Text2Config"),C2t.forEach(t),rco=r(uSe," (Speech2Text2 model)"),uSe.forEach(t),tco=i(y),fh=n(y,"LI",{});var pSe=s(fh);ice=n(pSe,"STRONG",{});var w2t=s(ice);aco=r(w2t,"splinter"),w2t.forEach(t),nco=r(pSe," \u2014 "),KI=n(pSe,"A",{href:!0});var A2t=s(KI);sco=r(A2t,"SplinterConfig"),A2t.forEach(t),lco=r(pSe," (Splinter model)"),pSe.forEach(t),ico=i(y),gh=n(y,"LI",{});var _Se=s(gh);dce=n(_Se,"STRONG",{});var y2t=s(dce);dco=r(y2t,"squeezebert"),y2t.forEach(t),cco=r(_Se," \u2014 "),ZI=n(_Se,"A",{href:!0});var L2t=s(ZI);mco=r(L2t,"SqueezeBertConfig"),L2t.forEach(t),fco=r(_Se," (SqueezeBERT model)"),_Se.forEach(t),gco=i(y),hh=n(y,"LI",{});var bSe=s(hh);cce=n(bSe,"STRONG",{});var x2t=s(cce);hco=r(x2t,"swin"),x2t.forEach(t),uco=r(bSe," \u2014 "),eN=n(bSe,"A",{href:!0});var $2t=s(eN);pco=r($2t,"SwinConfig"),$2t.forEach(t),_co=r(bSe," (Swin Transformer model)"),bSe.forEach(t),bco=i(y),uh=n(y,"LI",{});var vSe=s(uh);mce=n(vSe,"STRONG",{});var k2t=s(mce);vco=r(k2t,"swinv2"),k2t.forEach(t),Fco=r(vSe," \u2014 "),oN=n(vSe,"A",{href:!0});var S2t=s(oN);Tco=r(S2t,"Swinv2Config"),S2t.forEach(t),Mco=r(vSe," (Swin Transformer V2 model)"),vSe.forEach(t),Eco=i(y),ph=n(y,"LI",{});var FSe=s(ph);fce=n(FSe,"STRONG",{});var R2t=s(fce);Cco=r(R2t,"t5"),R2t.forEach(t),wco=r(FSe," \u2014 "),rN=n(FSe,"A",{href:!0});var P2t=s(rN);Aco=r(P2t,"T5Config"),P2t.forEach(t),yco=r(FSe," (T5 model)"),FSe.forEach(t),Lco=i(y),_h=n(y,"LI",{});var TSe=s(_h);gce=n(TSe,"STRONG",{});var B2t=s(gce);xco=r(B2t,"tapas"),B2t.forEach(t),$co=r(TSe," \u2014 "),tN=n(TSe,"A",{href:!0});var I2t=s(tN);kco=r(I2t,"TapasConfig"),I2t.forEach(t),Sco=r(TSe," (TAPAS model)"),TSe.forEach(t),Rco=i(y),bh=n(y,"LI",{});var MSe=s(bh);hce=n(MSe,"STRONG",{});var N2t=s(hce);Pco=r(N2t,"trajectory_transformer"),N2t.forEach(t),Bco=r(MSe," \u2014 "),aN=n(MSe,"A",{href:!0});var q2t=s(aN);Ico=r(q2t,"TrajectoryTransformerConfig"),q2t.forEach(t),Nco=r(MSe," (Trajectory Transformer model)"),MSe.forEach(t),qco=i(y),vh=n(y,"LI",{});var ESe=s(vh);uce=n(ESe,"STRONG",{});var j2t=s(uce);jco=r(j2t,"transfo-xl"),j2t.forEach(t),Dco=r(ESe," \u2014 "),nN=n(ESe,"A",{href:!0});var D2t=s(nN);Gco=r(D2t,"TransfoXLConfig"),D2t.forEach(t),Oco=r(ESe," (Transformer-XL model)"),ESe.forEach(t),Vco=i(y),Fh=n(y,"LI",{});var CSe=s(Fh);pce=n(CSe,"STRONG",{});var G2t=s(pce);Xco=r(G2t,"trocr"),G2t.forEach(t),zco=r(CSe," \u2014 "),sN=n(CSe,"A",{href:!0});var O2t=s(sN);Qco=r(O2t,"TrOCRConfig"),O2t.forEach(t),Wco=r(CSe," (TrOCR model)"),CSe.forEach(t),Uco=i(y),Th=n(y,"LI",{});var wSe=s(Th);_ce=n(wSe,"STRONG",{});var V2t=s(_ce);Hco=r(V2t,"unispeech"),V2t.forEach(t),Jco=r(wSe," \u2014 "),lN=n(wSe,"A",{href:!0});var X2t=s(lN);Yco=r(X2t,"UniSpeechConfig"),X2t.forEach(t),Kco=r(wSe," (UniSpeech model)"),wSe.forEach(t),Zco=i(y),Mh=n(y,"LI",{});var ASe=s(Mh);bce=n(ASe,"STRONG",{});var z2t=s(bce);emo=r(z2t,"unispeech-sat"),z2t.forEach(t),omo=r(ASe," \u2014 "),iN=n(ASe,"A",{href:!0});var Q2t=s(iN);rmo=r(Q2t,"UniSpeechSatConfig"),Q2t.forEach(t),tmo=r(ASe," (UniSpeechSat model)"),ASe.forEach(t),amo=i(y),Eh=n(y,"LI",{});var ySe=s(Eh);vce=n(ySe,"STRONG",{});var W2t=s(vce);nmo=r(W2t,"van"),W2t.forEach(t),smo=r(ySe," \u2014 "),dN=n(ySe,"A",{href:!0});var U2t=s(dN);lmo=r(U2t,"VanConfig"),U2t.forEach(t),imo=r(ySe," (VAN model)"),ySe.forEach(t),dmo=i(y),Ch=n(y,"LI",{});var LSe=s(Ch);Fce=n(LSe,"STRONG",{});var H2t=s(Fce);cmo=r(H2t,"videomae"),H2t.forEach(t),mmo=r(LSe," \u2014 "),cN=n(LSe,"A",{href:!0});var J2t=s(cN);fmo=r(J2t,"VideoMAEConfig"),J2t.forEach(t),gmo=r(LSe," (VideoMAE model)"),LSe.forEach(t),hmo=i(y),wh=n(y,"LI",{});var xSe=s(wh);Tce=n(xSe,"STRONG",{});var Y2t=s(Tce);umo=r(Y2t,"vilt"),Y2t.forEach(t),pmo=r(xSe," \u2014 "),mN=n(xSe,"A",{href:!0});var K2t=s(mN);_mo=r(K2t,"ViltConfig"),K2t.forEach(t),bmo=r(xSe," (ViLT model)"),xSe.forEach(t),vmo=i(y),Ah=n(y,"LI",{});var $Se=s(Ah);Mce=n($Se,"STRONG",{});var Z2t=s(Mce);Fmo=r(Z2t,"vision-encoder-decoder"),Z2t.forEach(t),Tmo=r($Se," \u2014 "),fN=n($Se,"A",{href:!0});var evt=s(fN);Mmo=r(evt,"VisionEncoderDecoderConfig"),evt.forEach(t),Emo=r($Se," (Vision Encoder decoder model)"),$Se.forEach(t),Cmo=i(y),yh=n(y,"LI",{});var kSe=s(yh);Ece=n(kSe,"STRONG",{});var ovt=s(Ece);wmo=r(ovt,"vision-text-dual-encoder"),ovt.forEach(t),Amo=r(kSe," \u2014 "),gN=n(kSe,"A",{href:!0});var rvt=s(gN);ymo=r(rvt,"VisionTextDualEncoderConfig"),rvt.forEach(t),Lmo=r(kSe," (VisionTextDualEncoder model)"),kSe.forEach(t),xmo=i(y),Lh=n(y,"LI",{});var SSe=s(Lh);Cce=n(SSe,"STRONG",{});var tvt=s(Cce);$mo=r(tvt,"visual_bert"),tvt.forEach(t),kmo=r(SSe," \u2014 "),hN=n(SSe,"A",{href:!0});var avt=s(hN);Smo=r(avt,"VisualBertConfig"),avt.forEach(t),Rmo=r(SSe," (VisualBERT model)"),SSe.forEach(t),Pmo=i(y),xh=n(y,"LI",{});var RSe=s(xh);wce=n(RSe,"STRONG",{});var nvt=s(wce);Bmo=r(nvt,"vit"),nvt.forEach(t),Imo=r(RSe," \u2014 "),uN=n(RSe,"A",{href:!0});var svt=s(uN);Nmo=r(svt,"ViTConfig"),svt.forEach(t),qmo=r(RSe," (ViT model)"),RSe.forEach(t),jmo=i(y),$h=n(y,"LI",{});var PSe=s($h);Ace=n(PSe,"STRONG",{});var lvt=s(Ace);Dmo=r(lvt,"vit_mae"),lvt.forEach(t),Gmo=r(PSe," \u2014 "),pN=n(PSe,"A",{href:!0});var ivt=s(pN);Omo=r(ivt,"ViTMAEConfig"),ivt.forEach(t),Vmo=r(PSe," (ViTMAE model)"),PSe.forEach(t),Xmo=i(y),kh=n(y,"LI",{});var BSe=s(kh);yce=n(BSe,"STRONG",{});var dvt=s(yce);zmo=r(dvt,"wav2vec2"),dvt.forEach(t),Qmo=r(BSe," \u2014 "),_N=n(BSe,"A",{href:!0});var cvt=s(_N);Wmo=r(cvt,"Wav2Vec2Config"),cvt.forEach(t),Umo=r(BSe," (Wav2Vec2 model)"),BSe.forEach(t),Hmo=i(y),Sh=n(y,"LI",{});var ISe=s(Sh);Lce=n(ISe,"STRONG",{});var mvt=s(Lce);Jmo=r(mvt,"wav2vec2-conformer"),mvt.forEach(t),Ymo=r(ISe," \u2014 "),bN=n(ISe,"A",{href:!0});var fvt=s(bN);Kmo=r(fvt,"Wav2Vec2ConformerConfig"),fvt.forEach(t),Zmo=r(ISe," (Wav2Vec2-Conformer model)"),ISe.forEach(t),efo=i(y),Rh=n(y,"LI",{});var NSe=s(Rh);xce=n(NSe,"STRONG",{});var gvt=s(xce);ofo=r(gvt,"wavlm"),gvt.forEach(t),rfo=r(NSe," \u2014 "),vN=n(NSe,"A",{href:!0});var hvt=s(vN);tfo=r(hvt,"WavLMConfig"),hvt.forEach(t),afo=r(NSe," (WavLM model)"),NSe.forEach(t),nfo=i(y),Ph=n(y,"LI",{});var qSe=s(Ph);$ce=n(qSe,"STRONG",{});var uvt=s($ce);sfo=r(uvt,"xglm"),uvt.forEach(t),lfo=r(qSe," \u2014 "),FN=n(qSe,"A",{href:!0});var pvt=s(FN);ifo=r(pvt,"XGLMConfig"),pvt.forEach(t),dfo=r(qSe," (XGLM model)"),qSe.forEach(t),cfo=i(y),Bh=n(y,"LI",{});var jSe=s(Bh);kce=n(jSe,"STRONG",{});var _vt=s(kce);mfo=r(_vt,"xlm"),_vt.forEach(t),ffo=r(jSe," \u2014 "),TN=n(jSe,"A",{href:!0});var bvt=s(TN);gfo=r(bvt,"XLMConfig"),bvt.forEach(t),hfo=r(jSe," (XLM model)"),jSe.forEach(t),ufo=i(y),Ih=n(y,"LI",{});var DSe=s(Ih);Sce=n(DSe,"STRONG",{});var vvt=s(Sce);pfo=r(vvt,"xlm-prophetnet"),vvt.forEach(t),_fo=r(DSe," \u2014 "),MN=n(DSe,"A",{href:!0});var Fvt=s(MN);bfo=r(Fvt,"XLMProphetNetConfig"),Fvt.forEach(t),vfo=r(DSe," (XLM-ProphetNet model)"),DSe.forEach(t),Ffo=i(y),Nh=n(y,"LI",{});var GSe=s(Nh);Rce=n(GSe,"STRONG",{});var Tvt=s(Rce);Tfo=r(Tvt,"xlm-roberta"),Tvt.forEach(t),Mfo=r(GSe," \u2014 "),EN=n(GSe,"A",{href:!0});var Mvt=s(EN);Efo=r(Mvt,"XLMRobertaConfig"),Mvt.forEach(t),Cfo=r(GSe," (XLM-RoBERTa model)"),GSe.forEach(t),wfo=i(y),qh=n(y,"LI",{});var OSe=s(qh);Pce=n(OSe,"STRONG",{});var Evt=s(Pce);Afo=r(Evt,"xlm-roberta-xl"),Evt.forEach(t),yfo=r(OSe," \u2014 "),CN=n(OSe,"A",{href:!0});var Cvt=s(CN);Lfo=r(Cvt,"XLMRobertaXLConfig"),Cvt.forEach(t),xfo=r(OSe," (XLM-RoBERTa-XL model)"),OSe.forEach(t),$fo=i(y),jh=n(y,"LI",{});var VSe=s(jh);Bce=n(VSe,"STRONG",{});var wvt=s(Bce);kfo=r(wvt,"xlnet"),wvt.forEach(t),Sfo=r(VSe," \u2014 "),wN=n(VSe,"A",{href:!0});var Avt=s(wN);Rfo=r(Avt,"XLNetConfig"),Avt.forEach(t),Pfo=r(VSe," (XLNet model)"),VSe.forEach(t),Bfo=i(y),Dh=n(y,"LI",{});var XSe=s(Dh);Ice=n(XSe,"STRONG",{});var yvt=s(Ice);Ifo=r(yvt,"yolos"),yvt.forEach(t),Nfo=r(XSe," \u2014 "),AN=n(XSe,"A",{href:!0});var Lvt=s(AN);qfo=r(Lvt,"YolosConfig"),Lvt.forEach(t),jfo=r(XSe," (YOLOS model)"),XSe.forEach(t),Dfo=i(y),Gh=n(y,"LI",{});var zSe=s(Gh);Nce=n(zSe,"STRONG",{});var xvt=s(Nce);Gfo=r(xvt,"yoso"),xvt.forEach(t),Ofo=r(zSe," \u2014 "),yN=n(zSe,"A",{href:!0});var $vt=s(yN);Vfo=r($vt,"YosoConfig"),$vt.forEach(t),Xfo=r(zSe," (YOSO model)"),zSe.forEach(t),y.forEach(t),zfo=i(ht),T(Oh.$$.fragment,ht),ht.forEach(t),Qfo=i(gt),Vh=n(gt,"DIV",{class:!0});var RKe=s(Vh);T(h9.$$.fragment,RKe),Wfo=i(RKe),qce=n(RKe,"P",{});var kvt=s(qce);Ufo=r(kvt,"Register a new configuration for this class."),kvt.forEach(t),RKe.forEach(t),gt.forEach(t),AJe=i(m),cd=n(m,"H2",{class:!0});var PKe=s(cd);Xh=n(PKe,"A",{id:!0,class:!0,href:!0});var Svt=s(Xh);jce=n(Svt,"SPAN",{});var Rvt=s(jce);T(u9.$$.fragment,Rvt),Rvt.forEach(t),Svt.forEach(t),Hfo=i(PKe),Dce=n(PKe,"SPAN",{});var Pvt=s(Dce);Jfo=r(Pvt,"AutoTokenizer"),Pvt.forEach(t),PKe.forEach(t),yJe=i(m),$o=n(m,"DIV",{class:!0});var vl=s($o);T(p9.$$.fragment,vl),Yfo=i(vl),_9=n(vl,"P",{});var BKe=s(_9);Kfo=r(BKe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),LN=n(BKe,"A",{href:!0});var Bvt=s(LN);Zfo=r(Bvt,"AutoTokenizer.from_pretrained()"),Bvt.forEach(t),ego=r(BKe," class method."),BKe.forEach(t),ogo=i(vl),b9=n(vl,"P",{});var IKe=s(b9);rgo=r(IKe,"This class cannot be instantiated directly using "),Gce=n(IKe,"CODE",{});var Ivt=s(Gce);tgo=r(Ivt,"__init__()"),Ivt.forEach(t),ago=r(IKe," (throws an error)."),IKe.forEach(t),ngo=i(vl),Br=n(vl,"DIV",{class:!0});var Fl=s(Br);T(v9.$$.fragment,Fl),sgo=i(Fl),Oce=n(Fl,"P",{});var Nvt=s(Oce);lgo=r(Nvt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Nvt.forEach(t),igo=i(Fl),Ua=n(Fl,"P",{});var eL=s(Ua);dgo=r(eL,"The tokenizer class to instantiate is selected based on the "),Vce=n(eL,"CODE",{});var qvt=s(Vce);cgo=r(qvt,"model_type"),qvt.forEach(t),mgo=r(eL,` property of the config object (either
passed as an argument or loaded from `),Xce=n(eL,"CODE",{});var jvt=s(Xce);fgo=r(jvt,"pretrained_model_name_or_path"),jvt.forEach(t),ggo=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=n(eL,"CODE",{});var Dvt=s(zce);hgo=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),ugo=r(eL,":"),eL.forEach(t),pgo=i(Fl),k=n(Fl,"UL",{});var S=s(k);as=n(S,"LI",{});var zR=s(as);Qce=n(zR,"STRONG",{});var Gvt=s(Qce);_go=r(Gvt,"albert"),Gvt.forEach(t),bgo=r(zR," \u2014 "),xN=n(zR,"A",{href:!0});var Ovt=s(xN);vgo=r(Ovt,"AlbertTokenizer"),Ovt.forEach(t),Fgo=r(zR," or "),$N=n(zR,"A",{href:!0});var Vvt=s($N);Tgo=r(Vvt,"AlbertTokenizerFast"),Vvt.forEach(t),Mgo=r(zR," (ALBERT model)"),zR.forEach(t),Ego=i(S),ns=n(S,"LI",{});var QR=s(ns);Wce=n(QR,"STRONG",{});var Xvt=s(Wce);Cgo=r(Xvt,"bart"),Xvt.forEach(t),wgo=r(QR," \u2014 "),kN=n(QR,"A",{href:!0});var zvt=s(kN);Ago=r(zvt,"BartTokenizer"),zvt.forEach(t),ygo=r(QR," or "),SN=n(QR,"A",{href:!0});var Qvt=s(SN);Lgo=r(Qvt,"BartTokenizerFast"),Qvt.forEach(t),xgo=r(QR," (BART model)"),QR.forEach(t),$go=i(S),ss=n(S,"LI",{});var WR=s(ss);Uce=n(WR,"STRONG",{});var Wvt=s(Uce);kgo=r(Wvt,"barthez"),Wvt.forEach(t),Sgo=r(WR," \u2014 "),RN=n(WR,"A",{href:!0});var Uvt=s(RN);Rgo=r(Uvt,"BarthezTokenizer"),Uvt.forEach(t),Pgo=r(WR," or "),PN=n(WR,"A",{href:!0});var Hvt=s(PN);Bgo=r(Hvt,"BarthezTokenizerFast"),Hvt.forEach(t),Igo=r(WR," (BARThez model)"),WR.forEach(t),Ngo=i(S),zh=n(S,"LI",{});var QSe=s(zh);Hce=n(QSe,"STRONG",{});var Jvt=s(Hce);qgo=r(Jvt,"bartpho"),Jvt.forEach(t),jgo=r(QSe," \u2014 "),BN=n(QSe,"A",{href:!0});var Yvt=s(BN);Dgo=r(Yvt,"BartphoTokenizer"),Yvt.forEach(t),Ggo=r(QSe," (BARTpho model)"),QSe.forEach(t),Ogo=i(S),ls=n(S,"LI",{});var UR=s(ls);Jce=n(UR,"STRONG",{});var Kvt=s(Jce);Vgo=r(Kvt,"bert"),Kvt.forEach(t),Xgo=r(UR," \u2014 "),IN=n(UR,"A",{href:!0});var Zvt=s(IN);zgo=r(Zvt,"BertTokenizer"),Zvt.forEach(t),Qgo=r(UR," or "),NN=n(UR,"A",{href:!0});var e1t=s(NN);Wgo=r(e1t,"BertTokenizerFast"),e1t.forEach(t),Ugo=r(UR," (BERT model)"),UR.forEach(t),Hgo=i(S),Qh=n(S,"LI",{});var WSe=s(Qh);Yce=n(WSe,"STRONG",{});var o1t=s(Yce);Jgo=r(o1t,"bert-generation"),o1t.forEach(t),Ygo=r(WSe," \u2014 "),qN=n(WSe,"A",{href:!0});var r1t=s(qN);Kgo=r(r1t,"BertGenerationTokenizer"),r1t.forEach(t),Zgo=r(WSe," (Bert Generation model)"),WSe.forEach(t),eho=i(S),Wh=n(S,"LI",{});var USe=s(Wh);Kce=n(USe,"STRONG",{});var t1t=s(Kce);oho=r(t1t,"bert-japanese"),t1t.forEach(t),rho=r(USe," \u2014 "),jN=n(USe,"A",{href:!0});var a1t=s(jN);tho=r(a1t,"BertJapaneseTokenizer"),a1t.forEach(t),aho=r(USe," (BertJapanese model)"),USe.forEach(t),nho=i(S),Uh=n(S,"LI",{});var HSe=s(Uh);Zce=n(HSe,"STRONG",{});var n1t=s(Zce);sho=r(n1t,"bertweet"),n1t.forEach(t),lho=r(HSe," \u2014 "),DN=n(HSe,"A",{href:!0});var s1t=s(DN);iho=r(s1t,"BertweetTokenizer"),s1t.forEach(t),dho=r(HSe," (BERTweet model)"),HSe.forEach(t),cho=i(S),is=n(S,"LI",{});var HR=s(is);eme=n(HR,"STRONG",{});var l1t=s(eme);mho=r(l1t,"big_bird"),l1t.forEach(t),fho=r(HR," \u2014 "),GN=n(HR,"A",{href:!0});var i1t=s(GN);gho=r(i1t,"BigBirdTokenizer"),i1t.forEach(t),hho=r(HR," or "),ON=n(HR,"A",{href:!0});var d1t=s(ON);uho=r(d1t,"BigBirdTokenizerFast"),d1t.forEach(t),pho=r(HR," (BigBird model)"),HR.forEach(t),_ho=i(S),ds=n(S,"LI",{});var JR=s(ds);ome=n(JR,"STRONG",{});var c1t=s(ome);bho=r(c1t,"bigbird_pegasus"),c1t.forEach(t),vho=r(JR," \u2014 "),VN=n(JR,"A",{href:!0});var m1t=s(VN);Fho=r(m1t,"PegasusTokenizer"),m1t.forEach(t),Tho=r(JR," or "),XN=n(JR,"A",{href:!0});var f1t=s(XN);Mho=r(f1t,"PegasusTokenizerFast"),f1t.forEach(t),Eho=r(JR," (BigBird-Pegasus model)"),JR.forEach(t),Cho=i(S),cs=n(S,"LI",{});var YR=s(cs);rme=n(YR,"STRONG",{});var g1t=s(rme);who=r(g1t,"blenderbot"),g1t.forEach(t),Aho=r(YR," \u2014 "),zN=n(YR,"A",{href:!0});var h1t=s(zN);yho=r(h1t,"BlenderbotTokenizer"),h1t.forEach(t),Lho=r(YR," or "),QN=n(YR,"A",{href:!0});var u1t=s(QN);xho=r(u1t,"BlenderbotTokenizerFast"),u1t.forEach(t),$ho=r(YR," (Blenderbot model)"),YR.forEach(t),kho=i(S),Hh=n(S,"LI",{});var JSe=s(Hh);tme=n(JSe,"STRONG",{});var p1t=s(tme);Sho=r(p1t,"blenderbot-small"),p1t.forEach(t),Rho=r(JSe," \u2014 "),WN=n(JSe,"A",{href:!0});var _1t=s(WN);Pho=r(_1t,"BlenderbotSmallTokenizer"),_1t.forEach(t),Bho=r(JSe," (BlenderbotSmall model)"),JSe.forEach(t),Iho=i(S),Jh=n(S,"LI",{});var YSe=s(Jh);ame=n(YSe,"STRONG",{});var b1t=s(ame);Nho=r(b1t,"bloom"),b1t.forEach(t),qho=r(YSe," \u2014 "),UN=n(YSe,"A",{href:!0});var v1t=s(UN);jho=r(v1t,"BloomTokenizerFast"),v1t.forEach(t),Dho=r(YSe," (BLOOM model)"),YSe.forEach(t),Gho=i(S),Yh=n(S,"LI",{});var KSe=s(Yh);nme=n(KSe,"STRONG",{});var F1t=s(nme);Oho=r(F1t,"byt5"),F1t.forEach(t),Vho=r(KSe," \u2014 "),HN=n(KSe,"A",{href:!0});var T1t=s(HN);Xho=r(T1t,"ByT5Tokenizer"),T1t.forEach(t),zho=r(KSe," (ByT5 model)"),KSe.forEach(t),Qho=i(S),ms=n(S,"LI",{});var KR=s(ms);sme=n(KR,"STRONG",{});var M1t=s(sme);Who=r(M1t,"camembert"),M1t.forEach(t),Uho=r(KR," \u2014 "),JN=n(KR,"A",{href:!0});var E1t=s(JN);Hho=r(E1t,"CamembertTokenizer"),E1t.forEach(t),Jho=r(KR," or "),YN=n(KR,"A",{href:!0});var C1t=s(YN);Yho=r(C1t,"CamembertTokenizerFast"),C1t.forEach(t),Kho=r(KR," (CamemBERT model)"),KR.forEach(t),Zho=i(S),Kh=n(S,"LI",{});var ZSe=s(Kh);lme=n(ZSe,"STRONG",{});var w1t=s(lme);euo=r(w1t,"canine"),w1t.forEach(t),ouo=r(ZSe," \u2014 "),KN=n(ZSe,"A",{href:!0});var A1t=s(KN);ruo=r(A1t,"CanineTokenizer"),A1t.forEach(t),tuo=r(ZSe," (CANINE model)"),ZSe.forEach(t),auo=i(S),fs=n(S,"LI",{});var ZR=s(fs);ime=n(ZR,"STRONG",{});var y1t=s(ime);nuo=r(y1t,"clip"),y1t.forEach(t),suo=r(ZR," \u2014 "),ZN=n(ZR,"A",{href:!0});var L1t=s(ZN);luo=r(L1t,"CLIPTokenizer"),L1t.forEach(t),iuo=r(ZR," or "),eq=n(ZR,"A",{href:!0});var x1t=s(eq);duo=r(x1t,"CLIPTokenizerFast"),x1t.forEach(t),cuo=r(ZR," (CLIP model)"),ZR.forEach(t),muo=i(S),gs=n(S,"LI",{});var eP=s(gs);dme=n(eP,"STRONG",{});var $1t=s(dme);fuo=r($1t,"codegen"),$1t.forEach(t),guo=r(eP," \u2014 "),oq=n(eP,"A",{href:!0});var k1t=s(oq);huo=r(k1t,"CodeGenTokenizer"),k1t.forEach(t),uuo=r(eP," or "),rq=n(eP,"A",{href:!0});var S1t=s(rq);puo=r(S1t,"CodeGenTokenizerFast"),S1t.forEach(t),_uo=r(eP," (CodeGen model)"),eP.forEach(t),buo=i(S),hs=n(S,"LI",{});var oP=s(hs);cme=n(oP,"STRONG",{});var R1t=s(cme);vuo=r(R1t,"convbert"),R1t.forEach(t),Fuo=r(oP," \u2014 "),tq=n(oP,"A",{href:!0});var P1t=s(tq);Tuo=r(P1t,"ConvBertTokenizer"),P1t.forEach(t),Muo=r(oP," or "),aq=n(oP,"A",{href:!0});var B1t=s(aq);Euo=r(B1t,"ConvBertTokenizerFast"),B1t.forEach(t),Cuo=r(oP," (ConvBERT model)"),oP.forEach(t),wuo=i(S),us=n(S,"LI",{});var rP=s(us);mme=n(rP,"STRONG",{});var I1t=s(mme);Auo=r(I1t,"cpm"),I1t.forEach(t),yuo=r(rP," \u2014 "),nq=n(rP,"A",{href:!0});var N1t=s(nq);Luo=r(N1t,"CpmTokenizer"),N1t.forEach(t),xuo=r(rP," or "),sq=n(rP,"A",{href:!0});var q1t=s(sq);$uo=r(q1t,"CpmTokenizerFast"),q1t.forEach(t),kuo=r(rP," (CPM model)"),rP.forEach(t),Suo=i(S),Zh=n(S,"LI",{});var eRe=s(Zh);fme=n(eRe,"STRONG",{});var j1t=s(fme);Ruo=r(j1t,"ctrl"),j1t.forEach(t),Puo=r(eRe," \u2014 "),lq=n(eRe,"A",{href:!0});var D1t=s(lq);Buo=r(D1t,"CTRLTokenizer"),D1t.forEach(t),Iuo=r(eRe," (CTRL model)"),eRe.forEach(t),Nuo=i(S),ps=n(S,"LI",{});var tP=s(ps);gme=n(tP,"STRONG",{});var G1t=s(gme);quo=r(G1t,"data2vec-text"),G1t.forEach(t),juo=r(tP," \u2014 "),iq=n(tP,"A",{href:!0});var O1t=s(iq);Duo=r(O1t,"RobertaTokenizer"),O1t.forEach(t),Guo=r(tP," or "),dq=n(tP,"A",{href:!0});var V1t=s(dq);Ouo=r(V1t,"RobertaTokenizerFast"),V1t.forEach(t),Vuo=r(tP," (Data2VecText model)"),tP.forEach(t),Xuo=i(S),_s=n(S,"LI",{});var aP=s(_s);hme=n(aP,"STRONG",{});var X1t=s(hme);zuo=r(X1t,"deberta"),X1t.forEach(t),Quo=r(aP," \u2014 "),cq=n(aP,"A",{href:!0});var z1t=s(cq);Wuo=r(z1t,"DebertaTokenizer"),z1t.forEach(t),Uuo=r(aP," or "),mq=n(aP,"A",{href:!0});var Q1t=s(mq);Huo=r(Q1t,"DebertaTokenizerFast"),Q1t.forEach(t),Juo=r(aP," (DeBERTa model)"),aP.forEach(t),Yuo=i(S),bs=n(S,"LI",{});var nP=s(bs);ume=n(nP,"STRONG",{});var W1t=s(ume);Kuo=r(W1t,"deberta-v2"),W1t.forEach(t),Zuo=r(nP," \u2014 "),fq=n(nP,"A",{href:!0});var U1t=s(fq);epo=r(U1t,"DebertaV2Tokenizer"),U1t.forEach(t),opo=r(nP," or "),gq=n(nP,"A",{href:!0});var H1t=s(gq);rpo=r(H1t,"DebertaV2TokenizerFast"),H1t.forEach(t),tpo=r(nP," (DeBERTa-v2 model)"),nP.forEach(t),apo=i(S),vs=n(S,"LI",{});var sP=s(vs);pme=n(sP,"STRONG",{});var J1t=s(pme);npo=r(J1t,"distilbert"),J1t.forEach(t),spo=r(sP," \u2014 "),hq=n(sP,"A",{href:!0});var Y1t=s(hq);lpo=r(Y1t,"DistilBertTokenizer"),Y1t.forEach(t),ipo=r(sP," or "),uq=n(sP,"A",{href:!0});var K1t=s(uq);dpo=r(K1t,"DistilBertTokenizerFast"),K1t.forEach(t),cpo=r(sP," (DistilBERT model)"),sP.forEach(t),mpo=i(S),Fs=n(S,"LI",{});var lP=s(Fs);_me=n(lP,"STRONG",{});var Z1t=s(_me);fpo=r(Z1t,"dpr"),Z1t.forEach(t),gpo=r(lP," \u2014 "),pq=n(lP,"A",{href:!0});var eFt=s(pq);hpo=r(eFt,"DPRQuestionEncoderTokenizer"),eFt.forEach(t),upo=r(lP," or "),_q=n(lP,"A",{href:!0});var oFt=s(_q);ppo=r(oFt,"DPRQuestionEncoderTokenizerFast"),oFt.forEach(t),_po=r(lP," (DPR model)"),lP.forEach(t),bpo=i(S),Ts=n(S,"LI",{});var iP=s(Ts);bme=n(iP,"STRONG",{});var rFt=s(bme);vpo=r(rFt,"electra"),rFt.forEach(t),Fpo=r(iP," \u2014 "),bq=n(iP,"A",{href:!0});var tFt=s(bq);Tpo=r(tFt,"ElectraTokenizer"),tFt.forEach(t),Mpo=r(iP," or "),vq=n(iP,"A",{href:!0});var aFt=s(vq);Epo=r(aFt,"ElectraTokenizerFast"),aFt.forEach(t),Cpo=r(iP," (ELECTRA model)"),iP.forEach(t),wpo=i(S),eu=n(S,"LI",{});var oRe=s(eu);vme=n(oRe,"STRONG",{});var nFt=s(vme);Apo=r(nFt,"flaubert"),nFt.forEach(t),ypo=r(oRe," \u2014 "),Fq=n(oRe,"A",{href:!0});var sFt=s(Fq);Lpo=r(sFt,"FlaubertTokenizer"),sFt.forEach(t),xpo=r(oRe," (FlauBERT model)"),oRe.forEach(t),$po=i(S),Ms=n(S,"LI",{});var dP=s(Ms);Fme=n(dP,"STRONG",{});var lFt=s(Fme);kpo=r(lFt,"fnet"),lFt.forEach(t),Spo=r(dP," \u2014 "),Tq=n(dP,"A",{href:!0});var iFt=s(Tq);Rpo=r(iFt,"FNetTokenizer"),iFt.forEach(t),Ppo=r(dP," or "),Mq=n(dP,"A",{href:!0});var dFt=s(Mq);Bpo=r(dFt,"FNetTokenizerFast"),dFt.forEach(t),Ipo=r(dP," (FNet model)"),dP.forEach(t),Npo=i(S),ou=n(S,"LI",{});var rRe=s(ou);Tme=n(rRe,"STRONG",{});var cFt=s(Tme);qpo=r(cFt,"fsmt"),cFt.forEach(t),jpo=r(rRe," \u2014 "),Eq=n(rRe,"A",{href:!0});var mFt=s(Eq);Dpo=r(mFt,"FSMTTokenizer"),mFt.forEach(t),Gpo=r(rRe," (FairSeq Machine-Translation model)"),rRe.forEach(t),Opo=i(S),Es=n(S,"LI",{});var cP=s(Es);Mme=n(cP,"STRONG",{});var fFt=s(Mme);Vpo=r(fFt,"funnel"),fFt.forEach(t),Xpo=r(cP," \u2014 "),Cq=n(cP,"A",{href:!0});var gFt=s(Cq);zpo=r(gFt,"FunnelTokenizer"),gFt.forEach(t),Qpo=r(cP," or "),wq=n(cP,"A",{href:!0});var hFt=s(wq);Wpo=r(hFt,"FunnelTokenizerFast"),hFt.forEach(t),Upo=r(cP," (Funnel Transformer model)"),cP.forEach(t),Hpo=i(S),Cs=n(S,"LI",{});var mP=s(Cs);Eme=n(mP,"STRONG",{});var uFt=s(Eme);Jpo=r(uFt,"gpt2"),uFt.forEach(t),Ypo=r(mP," \u2014 "),Aq=n(mP,"A",{href:!0});var pFt=s(Aq);Kpo=r(pFt,"GPT2Tokenizer"),pFt.forEach(t),Zpo=r(mP," or "),yq=n(mP,"A",{href:!0});var _Ft=s(yq);e_o=r(_Ft,"GPT2TokenizerFast"),_Ft.forEach(t),o_o=r(mP," (OpenAI GPT-2 model)"),mP.forEach(t),r_o=i(S),ws=n(S,"LI",{});var fP=s(ws);Cme=n(fP,"STRONG",{});var bFt=s(Cme);t_o=r(bFt,"gpt_neo"),bFt.forEach(t),a_o=r(fP," \u2014 "),Lq=n(fP,"A",{href:!0});var vFt=s(Lq);n_o=r(vFt,"GPT2Tokenizer"),vFt.forEach(t),s_o=r(fP," or "),xq=n(fP,"A",{href:!0});var FFt=s(xq);l_o=r(FFt,"GPT2TokenizerFast"),FFt.forEach(t),i_o=r(fP," (GPT Neo model)"),fP.forEach(t),d_o=i(S),ru=n(S,"LI",{});var tRe=s(ru);wme=n(tRe,"STRONG",{});var TFt=s(wme);c_o=r(TFt,"gpt_neox"),TFt.forEach(t),m_o=r(tRe," \u2014 "),$q=n(tRe,"A",{href:!0});var MFt=s($q);f_o=r(MFt,"GPTNeoXTokenizerFast"),MFt.forEach(t),g_o=r(tRe," (GPT NeoX model)"),tRe.forEach(t),h_o=i(S),As=n(S,"LI",{});var gP=s(As);Ame=n(gP,"STRONG",{});var EFt=s(Ame);u_o=r(EFt,"gptj"),EFt.forEach(t),p_o=r(gP," \u2014 "),kq=n(gP,"A",{href:!0});var CFt=s(kq);__o=r(CFt,"GPT2Tokenizer"),CFt.forEach(t),b_o=r(gP," or "),Sq=n(gP,"A",{href:!0});var wFt=s(Sq);v_o=r(wFt,"GPT2TokenizerFast"),wFt.forEach(t),F_o=r(gP," (GPT-J model)"),gP.forEach(t),T_o=i(S),ys=n(S,"LI",{});var hP=s(ys);yme=n(hP,"STRONG",{});var AFt=s(yme);M_o=r(AFt,"groupvit"),AFt.forEach(t),E_o=r(hP," \u2014 "),Rq=n(hP,"A",{href:!0});var yFt=s(Rq);C_o=r(yFt,"CLIPTokenizer"),yFt.forEach(t),w_o=r(hP," or "),Pq=n(hP,"A",{href:!0});var LFt=s(Pq);A_o=r(LFt,"CLIPTokenizerFast"),LFt.forEach(t),y_o=r(hP," (GroupViT model)"),hP.forEach(t),L_o=i(S),Ls=n(S,"LI",{});var uP=s(Ls);Lme=n(uP,"STRONG",{});var xFt=s(Lme);x_o=r(xFt,"herbert"),xFt.forEach(t),$_o=r(uP," \u2014 "),Bq=n(uP,"A",{href:!0});var $Ft=s(Bq);k_o=r($Ft,"HerbertTokenizer"),$Ft.forEach(t),S_o=r(uP," or "),Iq=n(uP,"A",{href:!0});var kFt=s(Iq);R_o=r(kFt,"HerbertTokenizerFast"),kFt.forEach(t),P_o=r(uP," (HerBERT model)"),uP.forEach(t),B_o=i(S),tu=n(S,"LI",{});var aRe=s(tu);xme=n(aRe,"STRONG",{});var SFt=s(xme);I_o=r(SFt,"hubert"),SFt.forEach(t),N_o=r(aRe," \u2014 "),Nq=n(aRe,"A",{href:!0});var RFt=s(Nq);q_o=r(RFt,"Wav2Vec2CTCTokenizer"),RFt.forEach(t),j_o=r(aRe," (Hubert model)"),aRe.forEach(t),D_o=i(S),xs=n(S,"LI",{});var pP=s(xs);$me=n(pP,"STRONG",{});var PFt=s($me);G_o=r(PFt,"ibert"),PFt.forEach(t),O_o=r(pP," \u2014 "),qq=n(pP,"A",{href:!0});var BFt=s(qq);V_o=r(BFt,"RobertaTokenizer"),BFt.forEach(t),X_o=r(pP," or "),jq=n(pP,"A",{href:!0});var IFt=s(jq);z_o=r(IFt,"RobertaTokenizerFast"),IFt.forEach(t),Q_o=r(pP," (I-BERT model)"),pP.forEach(t),W_o=i(S),$s=n(S,"LI",{});var _P=s($s);kme=n(_P,"STRONG",{});var NFt=s(kme);U_o=r(NFt,"layoutlm"),NFt.forEach(t),H_o=r(_P," \u2014 "),Dq=n(_P,"A",{href:!0});var qFt=s(Dq);J_o=r(qFt,"LayoutLMTokenizer"),qFt.forEach(t),Y_o=r(_P," or "),Gq=n(_P,"A",{href:!0});var jFt=s(Gq);K_o=r(jFt,"LayoutLMTokenizerFast"),jFt.forEach(t),Z_o=r(_P," (LayoutLM model)"),_P.forEach(t),ebo=i(S),ks=n(S,"LI",{});var bP=s(ks);Sme=n(bP,"STRONG",{});var DFt=s(Sme);obo=r(DFt,"layoutlmv2"),DFt.forEach(t),rbo=r(bP," \u2014 "),Oq=n(bP,"A",{href:!0});var GFt=s(Oq);tbo=r(GFt,"LayoutLMv2Tokenizer"),GFt.forEach(t),abo=r(bP," or "),Vq=n(bP,"A",{href:!0});var OFt=s(Vq);nbo=r(OFt,"LayoutLMv2TokenizerFast"),OFt.forEach(t),sbo=r(bP," (LayoutLMv2 model)"),bP.forEach(t),lbo=i(S),Ss=n(S,"LI",{});var vP=s(Ss);Rme=n(vP,"STRONG",{});var VFt=s(Rme);ibo=r(VFt,"layoutlmv3"),VFt.forEach(t),dbo=r(vP," \u2014 "),Xq=n(vP,"A",{href:!0});var XFt=s(Xq);cbo=r(XFt,"LayoutLMv3Tokenizer"),XFt.forEach(t),mbo=r(vP," or "),zq=n(vP,"A",{href:!0});var zFt=s(zq);fbo=r(zFt,"LayoutLMv3TokenizerFast"),zFt.forEach(t),gbo=r(vP," (LayoutLMv3 model)"),vP.forEach(t),hbo=i(S),Rs=n(S,"LI",{});var FP=s(Rs);Pme=n(FP,"STRONG",{});var QFt=s(Pme);ubo=r(QFt,"layoutxlm"),QFt.forEach(t),pbo=r(FP," \u2014 "),Qq=n(FP,"A",{href:!0});var WFt=s(Qq);_bo=r(WFt,"LayoutXLMTokenizer"),WFt.forEach(t),bbo=r(FP," or "),Wq=n(FP,"A",{href:!0});var UFt=s(Wq);vbo=r(UFt,"LayoutXLMTokenizerFast"),UFt.forEach(t),Fbo=r(FP," (LayoutXLM model)"),FP.forEach(t),Tbo=i(S),Ps=n(S,"LI",{});var TP=s(Ps);Bme=n(TP,"STRONG",{});var HFt=s(Bme);Mbo=r(HFt,"led"),HFt.forEach(t),Ebo=r(TP," \u2014 "),Uq=n(TP,"A",{href:!0});var JFt=s(Uq);Cbo=r(JFt,"LEDTokenizer"),JFt.forEach(t),wbo=r(TP," or "),Hq=n(TP,"A",{href:!0});var YFt=s(Hq);Abo=r(YFt,"LEDTokenizerFast"),YFt.forEach(t),ybo=r(TP," (LED model)"),TP.forEach(t),Lbo=i(S),Bs=n(S,"LI",{});var MP=s(Bs);Ime=n(MP,"STRONG",{});var KFt=s(Ime);xbo=r(KFt,"longformer"),KFt.forEach(t),$bo=r(MP," \u2014 "),Jq=n(MP,"A",{href:!0});var ZFt=s(Jq);kbo=r(ZFt,"LongformerTokenizer"),ZFt.forEach(t),Sbo=r(MP," or "),Yq=n(MP,"A",{href:!0});var eTt=s(Yq);Rbo=r(eTt,"LongformerTokenizerFast"),eTt.forEach(t),Pbo=r(MP," (Longformer model)"),MP.forEach(t),Bbo=i(S),Is=n(S,"LI",{});var EP=s(Is);Nme=n(EP,"STRONG",{});var oTt=s(Nme);Ibo=r(oTt,"longt5"),oTt.forEach(t),Nbo=r(EP," \u2014 "),Kq=n(EP,"A",{href:!0});var rTt=s(Kq);qbo=r(rTt,"T5Tokenizer"),rTt.forEach(t),jbo=r(EP," or "),Zq=n(EP,"A",{href:!0});var tTt=s(Zq);Dbo=r(tTt,"T5TokenizerFast"),tTt.forEach(t),Gbo=r(EP," (LongT5 model)"),EP.forEach(t),Obo=i(S),au=n(S,"LI",{});var nRe=s(au);qme=n(nRe,"STRONG",{});var aTt=s(qme);Vbo=r(aTt,"luke"),aTt.forEach(t),Xbo=r(nRe," \u2014 "),ej=n(nRe,"A",{href:!0});var nTt=s(ej);zbo=r(nTt,"LukeTokenizer"),nTt.forEach(t),Qbo=r(nRe," (LUKE model)"),nRe.forEach(t),Wbo=i(S),Ns=n(S,"LI",{});var CP=s(Ns);jme=n(CP,"STRONG",{});var sTt=s(jme);Ubo=r(sTt,"lxmert"),sTt.forEach(t),Hbo=r(CP," \u2014 "),oj=n(CP,"A",{href:!0});var lTt=s(oj);Jbo=r(lTt,"LxmertTokenizer"),lTt.forEach(t),Ybo=r(CP," or "),rj=n(CP,"A",{href:!0});var iTt=s(rj);Kbo=r(iTt,"LxmertTokenizerFast"),iTt.forEach(t),Zbo=r(CP," (LXMERT model)"),CP.forEach(t),e2o=i(S),nu=n(S,"LI",{});var sRe=s(nu);Dme=n(sRe,"STRONG",{});var dTt=s(Dme);o2o=r(dTt,"m2m_100"),dTt.forEach(t),r2o=r(sRe," \u2014 "),tj=n(sRe,"A",{href:!0});var cTt=s(tj);t2o=r(cTt,"M2M100Tokenizer"),cTt.forEach(t),a2o=r(sRe," (M2M100 model)"),sRe.forEach(t),n2o=i(S),su=n(S,"LI",{});var lRe=s(su);Gme=n(lRe,"STRONG",{});var mTt=s(Gme);s2o=r(mTt,"marian"),mTt.forEach(t),l2o=r(lRe," \u2014 "),aj=n(lRe,"A",{href:!0});var fTt=s(aj);i2o=r(fTt,"MarianTokenizer"),fTt.forEach(t),d2o=r(lRe," (Marian model)"),lRe.forEach(t),c2o=i(S),qs=n(S,"LI",{});var wP=s(qs);Ome=n(wP,"STRONG",{});var gTt=s(Ome);m2o=r(gTt,"mbart"),gTt.forEach(t),f2o=r(wP," \u2014 "),nj=n(wP,"A",{href:!0});var hTt=s(nj);g2o=r(hTt,"MBartTokenizer"),hTt.forEach(t),h2o=r(wP," or "),sj=n(wP,"A",{href:!0});var uTt=s(sj);u2o=r(uTt,"MBartTokenizerFast"),uTt.forEach(t),p2o=r(wP," (mBART model)"),wP.forEach(t),_2o=i(S),js=n(S,"LI",{});var AP=s(js);Vme=n(AP,"STRONG",{});var pTt=s(Vme);b2o=r(pTt,"mbart50"),pTt.forEach(t),v2o=r(AP," \u2014 "),lj=n(AP,"A",{href:!0});var _Tt=s(lj);F2o=r(_Tt,"MBart50Tokenizer"),_Tt.forEach(t),T2o=r(AP," or "),ij=n(AP,"A",{href:!0});var bTt=s(ij);M2o=r(bTt,"MBart50TokenizerFast"),bTt.forEach(t),E2o=r(AP," (mBART-50 model)"),AP.forEach(t),C2o=i(S),Ds=n(S,"LI",{});var yP=s(Ds);Xme=n(yP,"STRONG",{});var vTt=s(Xme);w2o=r(vTt,"megatron-bert"),vTt.forEach(t),A2o=r(yP," \u2014 "),dj=n(yP,"A",{href:!0});var FTt=s(dj);y2o=r(FTt,"BertTokenizer"),FTt.forEach(t),L2o=r(yP," or "),cj=n(yP,"A",{href:!0});var TTt=s(cj);x2o=r(TTt,"BertTokenizerFast"),TTt.forEach(t),$2o=r(yP," (Megatron-BERT model)"),yP.forEach(t),k2o=i(S),lu=n(S,"LI",{});var iRe=s(lu);zme=n(iRe,"STRONG",{});var MTt=s(zme);S2o=r(MTt,"mluke"),MTt.forEach(t),R2o=r(iRe," \u2014 "),mj=n(iRe,"A",{href:!0});var ETt=s(mj);P2o=r(ETt,"MLukeTokenizer"),ETt.forEach(t),B2o=r(iRe," (mLUKE model)"),iRe.forEach(t),I2o=i(S),Gs=n(S,"LI",{});var LP=s(Gs);Qme=n(LP,"STRONG",{});var CTt=s(Qme);N2o=r(CTt,"mobilebert"),CTt.forEach(t),q2o=r(LP," \u2014 "),fj=n(LP,"A",{href:!0});var wTt=s(fj);j2o=r(wTt,"MobileBertTokenizer"),wTt.forEach(t),D2o=r(LP," or "),gj=n(LP,"A",{href:!0});var ATt=s(gj);G2o=r(ATt,"MobileBertTokenizerFast"),ATt.forEach(t),O2o=r(LP," (MobileBERT model)"),LP.forEach(t),V2o=i(S),Os=n(S,"LI",{});var xP=s(Os);Wme=n(xP,"STRONG",{});var yTt=s(Wme);X2o=r(yTt,"mpnet"),yTt.forEach(t),z2o=r(xP," \u2014 "),hj=n(xP,"A",{href:!0});var LTt=s(hj);Q2o=r(LTt,"MPNetTokenizer"),LTt.forEach(t),W2o=r(xP," or "),uj=n(xP,"A",{href:!0});var xTt=s(uj);U2o=r(xTt,"MPNetTokenizerFast"),xTt.forEach(t),H2o=r(xP," (MPNet model)"),xP.forEach(t),J2o=i(S),Vs=n(S,"LI",{});var $P=s(Vs);Ume=n($P,"STRONG",{});var $Tt=s(Ume);Y2o=r($Tt,"mt5"),$Tt.forEach(t),K2o=r($P," \u2014 "),pj=n($P,"A",{href:!0});var kTt=s(pj);Z2o=r(kTt,"MT5Tokenizer"),kTt.forEach(t),evo=r($P," or "),_j=n($P,"A",{href:!0});var STt=s(_j);ovo=r(STt,"MT5TokenizerFast"),STt.forEach(t),rvo=r($P," (MT5 model)"),$P.forEach(t),tvo=i(S),Xs=n(S,"LI",{});var kP=s(Xs);Hme=n(kP,"STRONG",{});var RTt=s(Hme);avo=r(RTt,"mvp"),RTt.forEach(t),nvo=r(kP," \u2014 "),bj=n(kP,"A",{href:!0});var PTt=s(bj);svo=r(PTt,"MvpTokenizer"),PTt.forEach(t),lvo=r(kP," or "),vj=n(kP,"A",{href:!0});var BTt=s(vj);ivo=r(BTt,"MvpTokenizerFast"),BTt.forEach(t),dvo=r(kP," (MVP model)"),kP.forEach(t),cvo=i(S),zs=n(S,"LI",{});var SP=s(zs);Jme=n(SP,"STRONG",{});var ITt=s(Jme);mvo=r(ITt,"nezha"),ITt.forEach(t),fvo=r(SP," \u2014 "),Fj=n(SP,"A",{href:!0});var NTt=s(Fj);gvo=r(NTt,"BertTokenizer"),NTt.forEach(t),hvo=r(SP," or "),Tj=n(SP,"A",{href:!0});var qTt=s(Tj);uvo=r(qTt,"BertTokenizerFast"),qTt.forEach(t),pvo=r(SP," (Nezha model)"),SP.forEach(t),_vo=i(S),Qs=n(S,"LI",{});var RP=s(Qs);Yme=n(RP,"STRONG",{});var jTt=s(Yme);bvo=r(jTt,"nllb"),jTt.forEach(t),vvo=r(RP," \u2014 "),Mj=n(RP,"A",{href:!0});var DTt=s(Mj);Fvo=r(DTt,"NllbTokenizer"),DTt.forEach(t),Tvo=r(RP," or "),Ej=n(RP,"A",{href:!0});var GTt=s(Ej);Mvo=r(GTt,"NllbTokenizerFast"),GTt.forEach(t),Evo=r(RP," (NLLB model)"),RP.forEach(t),Cvo=i(S),Ws=n(S,"LI",{});var PP=s(Ws);Kme=n(PP,"STRONG",{});var OTt=s(Kme);wvo=r(OTt,"nystromformer"),OTt.forEach(t),Avo=r(PP," \u2014 "),Cj=n(PP,"A",{href:!0});var VTt=s(Cj);yvo=r(VTt,"AlbertTokenizer"),VTt.forEach(t),Lvo=r(PP," or "),wj=n(PP,"A",{href:!0});var XTt=s(wj);xvo=r(XTt,"AlbertTokenizerFast"),XTt.forEach(t),$vo=r(PP," (Nystr\xF6mformer model)"),PP.forEach(t),kvo=i(S),Us=n(S,"LI",{});var BP=s(Us);Zme=n(BP,"STRONG",{});var zTt=s(Zme);Svo=r(zTt,"openai-gpt"),zTt.forEach(t),Rvo=r(BP," \u2014 "),Aj=n(BP,"A",{href:!0});var QTt=s(Aj);Pvo=r(QTt,"OpenAIGPTTokenizer"),QTt.forEach(t),Bvo=r(BP," or "),yj=n(BP,"A",{href:!0});var WTt=s(yj);Ivo=r(WTt,"OpenAIGPTTokenizerFast"),WTt.forEach(t),Nvo=r(BP," (OpenAI GPT model)"),BP.forEach(t),qvo=i(S),iu=n(S,"LI",{});var dRe=s(iu);efe=n(dRe,"STRONG",{});var UTt=s(efe);jvo=r(UTt,"opt"),UTt.forEach(t),Dvo=r(dRe," \u2014 "),Lj=n(dRe,"A",{href:!0});var HTt=s(Lj);Gvo=r(HTt,"GPT2Tokenizer"),HTt.forEach(t),Ovo=r(dRe," (OPT model)"),dRe.forEach(t),Vvo=i(S),Hs=n(S,"LI",{});var IP=s(Hs);ofe=n(IP,"STRONG",{});var JTt=s(ofe);Xvo=r(JTt,"owlvit"),JTt.forEach(t),zvo=r(IP," \u2014 "),xj=n(IP,"A",{href:!0});var YTt=s(xj);Qvo=r(YTt,"CLIPTokenizer"),YTt.forEach(t),Wvo=r(IP," or "),$j=n(IP,"A",{href:!0});var KTt=s($j);Uvo=r(KTt,"CLIPTokenizerFast"),KTt.forEach(t),Hvo=r(IP," (OWL-ViT model)"),IP.forEach(t),Jvo=i(S),Js=n(S,"LI",{});var NP=s(Js);rfe=n(NP,"STRONG",{});var ZTt=s(rfe);Yvo=r(ZTt,"pegasus"),ZTt.forEach(t),Kvo=r(NP," \u2014 "),kj=n(NP,"A",{href:!0});var eMt=s(kj);Zvo=r(eMt,"PegasusTokenizer"),eMt.forEach(t),e1o=r(NP," or "),Sj=n(NP,"A",{href:!0});var oMt=s(Sj);o1o=r(oMt,"PegasusTokenizerFast"),oMt.forEach(t),r1o=r(NP," (Pegasus model)"),NP.forEach(t),t1o=i(S),du=n(S,"LI",{});var cRe=s(du);tfe=n(cRe,"STRONG",{});var rMt=s(tfe);a1o=r(rMt,"perceiver"),rMt.forEach(t),n1o=r(cRe," \u2014 "),Rj=n(cRe,"A",{href:!0});var tMt=s(Rj);s1o=r(tMt,"PerceiverTokenizer"),tMt.forEach(t),l1o=r(cRe," (Perceiver model)"),cRe.forEach(t),i1o=i(S),cu=n(S,"LI",{});var mRe=s(cu);afe=n(mRe,"STRONG",{});var aMt=s(afe);d1o=r(aMt,"phobert"),aMt.forEach(t),c1o=r(mRe," \u2014 "),Pj=n(mRe,"A",{href:!0});var nMt=s(Pj);m1o=r(nMt,"PhobertTokenizer"),nMt.forEach(t),f1o=r(mRe," (PhoBERT model)"),mRe.forEach(t),g1o=i(S),mu=n(S,"LI",{});var fRe=s(mu);nfe=n(fRe,"STRONG",{});var sMt=s(nfe);h1o=r(sMt,"plbart"),sMt.forEach(t),u1o=r(fRe," \u2014 "),Bj=n(fRe,"A",{href:!0});var lMt=s(Bj);p1o=r(lMt,"PLBartTokenizer"),lMt.forEach(t),_1o=r(fRe," (PLBart model)"),fRe.forEach(t),b1o=i(S),fu=n(S,"LI",{});var gRe=s(fu);sfe=n(gRe,"STRONG",{});var iMt=s(sfe);v1o=r(iMt,"prophetnet"),iMt.forEach(t),F1o=r(gRe," \u2014 "),Ij=n(gRe,"A",{href:!0});var dMt=s(Ij);T1o=r(dMt,"ProphetNetTokenizer"),dMt.forEach(t),M1o=r(gRe," (ProphetNet model)"),gRe.forEach(t),E1o=i(S),Ys=n(S,"LI",{});var qP=s(Ys);lfe=n(qP,"STRONG",{});var cMt=s(lfe);C1o=r(cMt,"qdqbert"),cMt.forEach(t),w1o=r(qP," \u2014 "),Nj=n(qP,"A",{href:!0});var mMt=s(Nj);A1o=r(mMt,"BertTokenizer"),mMt.forEach(t),y1o=r(qP," or "),qj=n(qP,"A",{href:!0});var fMt=s(qj);L1o=r(fMt,"BertTokenizerFast"),fMt.forEach(t),x1o=r(qP," (QDQBert model)"),qP.forEach(t),$1o=i(S),gu=n(S,"LI",{});var hRe=s(gu);ife=n(hRe,"STRONG",{});var gMt=s(ife);k1o=r(gMt,"rag"),gMt.forEach(t),S1o=r(hRe," \u2014 "),jj=n(hRe,"A",{href:!0});var hMt=s(jj);R1o=r(hMt,"RagTokenizer"),hMt.forEach(t),P1o=r(hRe," (RAG model)"),hRe.forEach(t),B1o=i(S),Ks=n(S,"LI",{});var jP=s(Ks);dfe=n(jP,"STRONG",{});var uMt=s(dfe);I1o=r(uMt,"realm"),uMt.forEach(t),N1o=r(jP," \u2014 "),Dj=n(jP,"A",{href:!0});var pMt=s(Dj);q1o=r(pMt,"RealmTokenizer"),pMt.forEach(t),j1o=r(jP," or "),Gj=n(jP,"A",{href:!0});var _Mt=s(Gj);D1o=r(_Mt,"RealmTokenizerFast"),_Mt.forEach(t),G1o=r(jP," (REALM model)"),jP.forEach(t),O1o=i(S),Zs=n(S,"LI",{});var DP=s(Zs);cfe=n(DP,"STRONG",{});var bMt=s(cfe);V1o=r(bMt,"reformer"),bMt.forEach(t),X1o=r(DP," \u2014 "),Oj=n(DP,"A",{href:!0});var vMt=s(Oj);z1o=r(vMt,"ReformerTokenizer"),vMt.forEach(t),Q1o=r(DP," or "),Vj=n(DP,"A",{href:!0});var FMt=s(Vj);W1o=r(FMt,"ReformerTokenizerFast"),FMt.forEach(t),U1o=r(DP," (Reformer model)"),DP.forEach(t),H1o=i(S),el=n(S,"LI",{});var GP=s(el);mfe=n(GP,"STRONG",{});var TMt=s(mfe);J1o=r(TMt,"rembert"),TMt.forEach(t),Y1o=r(GP," \u2014 "),Xj=n(GP,"A",{href:!0});var MMt=s(Xj);K1o=r(MMt,"RemBertTokenizer"),MMt.forEach(t),Z1o=r(GP," or "),zj=n(GP,"A",{href:!0});var EMt=s(zj);eFo=r(EMt,"RemBertTokenizerFast"),EMt.forEach(t),oFo=r(GP," (RemBERT model)"),GP.forEach(t),rFo=i(S),ol=n(S,"LI",{});var OP=s(ol);ffe=n(OP,"STRONG",{});var CMt=s(ffe);tFo=r(CMt,"retribert"),CMt.forEach(t),aFo=r(OP," \u2014 "),Qj=n(OP,"A",{href:!0});var wMt=s(Qj);nFo=r(wMt,"RetriBertTokenizer"),wMt.forEach(t),sFo=r(OP," or "),Wj=n(OP,"A",{href:!0});var AMt=s(Wj);lFo=r(AMt,"RetriBertTokenizerFast"),AMt.forEach(t),iFo=r(OP," (RetriBERT model)"),OP.forEach(t),dFo=i(S),rl=n(S,"LI",{});var VP=s(rl);gfe=n(VP,"STRONG",{});var yMt=s(gfe);cFo=r(yMt,"roberta"),yMt.forEach(t),mFo=r(VP," \u2014 "),Uj=n(VP,"A",{href:!0});var LMt=s(Uj);fFo=r(LMt,"RobertaTokenizer"),LMt.forEach(t),gFo=r(VP," or "),Hj=n(VP,"A",{href:!0});var xMt=s(Hj);hFo=r(xMt,"RobertaTokenizerFast"),xMt.forEach(t),uFo=r(VP," (RoBERTa model)"),VP.forEach(t),pFo=i(S),tl=n(S,"LI",{});var XP=s(tl);hfe=n(XP,"STRONG",{});var $Mt=s(hfe);_Fo=r($Mt,"roformer"),$Mt.forEach(t),bFo=r(XP," \u2014 "),Jj=n(XP,"A",{href:!0});var kMt=s(Jj);vFo=r(kMt,"RoFormerTokenizer"),kMt.forEach(t),FFo=r(XP," or "),Yj=n(XP,"A",{href:!0});var SMt=s(Yj);TFo=r(SMt,"RoFormerTokenizerFast"),SMt.forEach(t),MFo=r(XP," (RoFormer model)"),XP.forEach(t),EFo=i(S),hu=n(S,"LI",{});var uRe=s(hu);ufe=n(uRe,"STRONG",{});var RMt=s(ufe);CFo=r(RMt,"speech_to_text"),RMt.forEach(t),wFo=r(uRe," \u2014 "),Kj=n(uRe,"A",{href:!0});var PMt=s(Kj);AFo=r(PMt,"Speech2TextTokenizer"),PMt.forEach(t),yFo=r(uRe," (Speech2Text model)"),uRe.forEach(t),LFo=i(S),uu=n(S,"LI",{});var pRe=s(uu);pfe=n(pRe,"STRONG",{});var BMt=s(pfe);xFo=r(BMt,"speech_to_text_2"),BMt.forEach(t),$Fo=r(pRe," \u2014 "),Zj=n(pRe,"A",{href:!0});var IMt=s(Zj);kFo=r(IMt,"Speech2Text2Tokenizer"),IMt.forEach(t),SFo=r(pRe," (Speech2Text2 model)"),pRe.forEach(t),RFo=i(S),al=n(S,"LI",{});var zP=s(al);_fe=n(zP,"STRONG",{});var NMt=s(_fe);PFo=r(NMt,"splinter"),NMt.forEach(t),BFo=r(zP," \u2014 "),eD=n(zP,"A",{href:!0});var qMt=s(eD);IFo=r(qMt,"SplinterTokenizer"),qMt.forEach(t),NFo=r(zP," or "),oD=n(zP,"A",{href:!0});var jMt=s(oD);qFo=r(jMt,"SplinterTokenizerFast"),jMt.forEach(t),jFo=r(zP," (Splinter model)"),zP.forEach(t),DFo=i(S),nl=n(S,"LI",{});var QP=s(nl);bfe=n(QP,"STRONG",{});var DMt=s(bfe);GFo=r(DMt,"squeezebert"),DMt.forEach(t),OFo=r(QP," \u2014 "),rD=n(QP,"A",{href:!0});var GMt=s(rD);VFo=r(GMt,"SqueezeBertTokenizer"),GMt.forEach(t),XFo=r(QP," or "),tD=n(QP,"A",{href:!0});var OMt=s(tD);zFo=r(OMt,"SqueezeBertTokenizerFast"),OMt.forEach(t),QFo=r(QP," (SqueezeBERT model)"),QP.forEach(t),WFo=i(S),sl=n(S,"LI",{});var WP=s(sl);vfe=n(WP,"STRONG",{});var VMt=s(vfe);UFo=r(VMt,"t5"),VMt.forEach(t),HFo=r(WP," \u2014 "),aD=n(WP,"A",{href:!0});var XMt=s(aD);JFo=r(XMt,"T5Tokenizer"),XMt.forEach(t),YFo=r(WP," or "),nD=n(WP,"A",{href:!0});var zMt=s(nD);KFo=r(zMt,"T5TokenizerFast"),zMt.forEach(t),ZFo=r(WP," (T5 model)"),WP.forEach(t),eTo=i(S),pu=n(S,"LI",{});var _Re=s(pu);Ffe=n(_Re,"STRONG",{});var QMt=s(Ffe);oTo=r(QMt,"tapas"),QMt.forEach(t),rTo=r(_Re," \u2014 "),sD=n(_Re,"A",{href:!0});var WMt=s(sD);tTo=r(WMt,"TapasTokenizer"),WMt.forEach(t),aTo=r(_Re," (TAPAS model)"),_Re.forEach(t),nTo=i(S),_u=n(S,"LI",{});var bRe=s(_u);Tfe=n(bRe,"STRONG",{});var UMt=s(Tfe);sTo=r(UMt,"tapex"),UMt.forEach(t),lTo=r(bRe," \u2014 "),lD=n(bRe,"A",{href:!0});var HMt=s(lD);iTo=r(HMt,"TapexTokenizer"),HMt.forEach(t),dTo=r(bRe," (TAPEX model)"),bRe.forEach(t),cTo=i(S),bu=n(S,"LI",{});var vRe=s(bu);Mfe=n(vRe,"STRONG",{});var JMt=s(Mfe);mTo=r(JMt,"transfo-xl"),JMt.forEach(t),fTo=r(vRe," \u2014 "),iD=n(vRe,"A",{href:!0});var YMt=s(iD);gTo=r(YMt,"TransfoXLTokenizer"),YMt.forEach(t),hTo=r(vRe," (Transformer-XL model)"),vRe.forEach(t),uTo=i(S),ll=n(S,"LI",{});var UP=s(ll);Efe=n(UP,"STRONG",{});var KMt=s(Efe);pTo=r(KMt,"vilt"),KMt.forEach(t),_To=r(UP," \u2014 "),dD=n(UP,"A",{href:!0});var ZMt=s(dD);bTo=r(ZMt,"BertTokenizer"),ZMt.forEach(t),vTo=r(UP," or "),cD=n(UP,"A",{href:!0});var eEt=s(cD);FTo=r(eEt,"BertTokenizerFast"),eEt.forEach(t),TTo=r(UP," (ViLT model)"),UP.forEach(t),MTo=i(S),il=n(S,"LI",{});var HP=s(il);Cfe=n(HP,"STRONG",{});var oEt=s(Cfe);ETo=r(oEt,"visual_bert"),oEt.forEach(t),CTo=r(HP," \u2014 "),mD=n(HP,"A",{href:!0});var rEt=s(mD);wTo=r(rEt,"BertTokenizer"),rEt.forEach(t),ATo=r(HP," or "),fD=n(HP,"A",{href:!0});var tEt=s(fD);yTo=r(tEt,"BertTokenizerFast"),tEt.forEach(t),LTo=r(HP," (VisualBERT model)"),HP.forEach(t),xTo=i(S),vu=n(S,"LI",{});var FRe=s(vu);wfe=n(FRe,"STRONG",{});var aEt=s(wfe);$To=r(aEt,"wav2vec2"),aEt.forEach(t),kTo=r(FRe," \u2014 "),gD=n(FRe,"A",{href:!0});var nEt=s(gD);STo=r(nEt,"Wav2Vec2CTCTokenizer"),nEt.forEach(t),RTo=r(FRe," (Wav2Vec2 model)"),FRe.forEach(t),PTo=i(S),Fu=n(S,"LI",{});var TRe=s(Fu);Afe=n(TRe,"STRONG",{});var sEt=s(Afe);BTo=r(sEt,"wav2vec2-conformer"),sEt.forEach(t),ITo=r(TRe," \u2014 "),hD=n(TRe,"A",{href:!0});var lEt=s(hD);NTo=r(lEt,"Wav2Vec2CTCTokenizer"),lEt.forEach(t),qTo=r(TRe," (Wav2Vec2-Conformer model)"),TRe.forEach(t),jTo=i(S),Tu=n(S,"LI",{});var MRe=s(Tu);yfe=n(MRe,"STRONG",{});var iEt=s(yfe);DTo=r(iEt,"wav2vec2_phoneme"),iEt.forEach(t),GTo=r(MRe," \u2014 "),uD=n(MRe,"A",{href:!0});var dEt=s(uD);OTo=r(dEt,"Wav2Vec2PhonemeCTCTokenizer"),dEt.forEach(t),VTo=r(MRe," (Wav2Vec2Phoneme model)"),MRe.forEach(t),XTo=i(S),dl=n(S,"LI",{});var JP=s(dl);Lfe=n(JP,"STRONG",{});var cEt=s(Lfe);zTo=r(cEt,"xglm"),cEt.forEach(t),QTo=r(JP," \u2014 "),pD=n(JP,"A",{href:!0});var mEt=s(pD);WTo=r(mEt,"XGLMTokenizer"),mEt.forEach(t),UTo=r(JP," or "),_D=n(JP,"A",{href:!0});var fEt=s(_D);HTo=r(fEt,"XGLMTokenizerFast"),fEt.forEach(t),JTo=r(JP," (XGLM model)"),JP.forEach(t),YTo=i(S),Mu=n(S,"LI",{});var ERe=s(Mu);xfe=n(ERe,"STRONG",{});var gEt=s(xfe);KTo=r(gEt,"xlm"),gEt.forEach(t),ZTo=r(ERe," \u2014 "),bD=n(ERe,"A",{href:!0});var hEt=s(bD);eMo=r(hEt,"XLMTokenizer"),hEt.forEach(t),oMo=r(ERe," (XLM model)"),ERe.forEach(t),rMo=i(S),Eu=n(S,"LI",{});var CRe=s(Eu);$fe=n(CRe,"STRONG",{});var uEt=s($fe);tMo=r(uEt,"xlm-prophetnet"),uEt.forEach(t),aMo=r(CRe," \u2014 "),vD=n(CRe,"A",{href:!0});var pEt=s(vD);nMo=r(pEt,"XLMProphetNetTokenizer"),pEt.forEach(t),sMo=r(CRe," (XLM-ProphetNet model)"),CRe.forEach(t),lMo=i(S),cl=n(S,"LI",{});var YP=s(cl);kfe=n(YP,"STRONG",{});var _Et=s(kfe);iMo=r(_Et,"xlm-roberta"),_Et.forEach(t),dMo=r(YP," \u2014 "),FD=n(YP,"A",{href:!0});var bEt=s(FD);cMo=r(bEt,"XLMRobertaTokenizer"),bEt.forEach(t),mMo=r(YP," or "),TD=n(YP,"A",{href:!0});var vEt=s(TD);fMo=r(vEt,"XLMRobertaTokenizerFast"),vEt.forEach(t),gMo=r(YP," (XLM-RoBERTa model)"),YP.forEach(t),hMo=i(S),ml=n(S,"LI",{});var KP=s(ml);Sfe=n(KP,"STRONG",{});var FEt=s(Sfe);uMo=r(FEt,"xlm-roberta-xl"),FEt.forEach(t),pMo=r(KP," \u2014 "),MD=n(KP,"A",{href:!0});var TEt=s(MD);_Mo=r(TEt,"RobertaTokenizer"),TEt.forEach(t),bMo=r(KP," or "),ED=n(KP,"A",{href:!0});var MEt=s(ED);vMo=r(MEt,"RobertaTokenizerFast"),MEt.forEach(t),FMo=r(KP," (XLM-RoBERTa-XL model)"),KP.forEach(t),TMo=i(S),fl=n(S,"LI",{});var ZP=s(fl);Rfe=n(ZP,"STRONG",{});var EEt=s(Rfe);MMo=r(EEt,"xlnet"),EEt.forEach(t),EMo=r(ZP," \u2014 "),CD=n(ZP,"A",{href:!0});var CEt=s(CD);CMo=r(CEt,"XLNetTokenizer"),CEt.forEach(t),wMo=r(ZP," or "),wD=n(ZP,"A",{href:!0});var wEt=s(wD);AMo=r(wEt,"XLNetTokenizerFast"),wEt.forEach(t),yMo=r(ZP," (XLNet model)"),ZP.forEach(t),LMo=i(S),gl=n(S,"LI",{});var eB=s(gl);Pfe=n(eB,"STRONG",{});var AEt=s(Pfe);xMo=r(AEt,"yoso"),AEt.forEach(t),$Mo=r(eB," \u2014 "),AD=n(eB,"A",{href:!0});var yEt=s(AD);kMo=r(yEt,"AlbertTokenizer"),yEt.forEach(t),SMo=r(eB," or "),yD=n(eB,"A",{href:!0});var LEt=s(yD);RMo=r(LEt,"AlbertTokenizerFast"),LEt.forEach(t),PMo=r(eB," (YOSO model)"),eB.forEach(t),S.forEach(t),BMo=i(Fl),T(Cu.$$.fragment,Fl),Fl.forEach(t),IMo=i(vl),wu=n(vl,"DIV",{class:!0});var NKe=s(wu);T(F9.$$.fragment,NKe),NMo=i(NKe),Bfe=n(NKe,"P",{});var xEt=s(Bfe);qMo=r(xEt,"Register a new tokenizer in this mapping."),xEt.forEach(t),NKe.forEach(t),vl.forEach(t),LJe=i(m),md=n(m,"H2",{class:!0});var qKe=s(md);Au=n(qKe,"A",{id:!0,class:!0,href:!0});var $Et=s(Au);Ife=n($Et,"SPAN",{});var kEt=s(Ife);T(T9.$$.fragment,kEt),kEt.forEach(t),$Et.forEach(t),jMo=i(qKe),Nfe=n(qKe,"SPAN",{});var SEt=s(Nfe);DMo=r(SEt,"AutoFeatureExtractor"),SEt.forEach(t),qKe.forEach(t),xJe=i(m),ko=n(m,"DIV",{class:!0});var Tl=s(ko);T(M9.$$.fragment,Tl),GMo=i(Tl),E9=n(Tl,"P",{});var jKe=s(E9);OMo=r(jKe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),LD=n(jKe,"A",{href:!0});var REt=s(LD);VMo=r(REt,"AutoFeatureExtractor.from_pretrained()"),REt.forEach(t),XMo=r(jKe," class method."),jKe.forEach(t),zMo=i(Tl),C9=n(Tl,"P",{});var DKe=s(C9);QMo=r(DKe,"This class cannot be instantiated directly using "),qfe=n(DKe,"CODE",{});var PEt=s(qfe);WMo=r(PEt,"__init__()"),PEt.forEach(t),UMo=r(DKe," (throws an error)."),DKe.forEach(t),HMo=i(Tl),Je=n(Tl,"DIV",{class:!0});var _a=s(Je);T(w9.$$.fragment,_a),JMo=i(_a),jfe=n(_a,"P",{});var BEt=s(jfe);YMo=r(BEt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),BEt.forEach(t),KMo=i(_a),Ha=n(_a,"P",{});var oL=s(Ha);ZMo=r(oL,"The feature extractor class to instantiate is selected based on the "),Dfe=n(oL,"CODE",{});var IEt=s(Dfe);eEo=r(IEt,"model_type"),IEt.forEach(t),oEo=r(oL,` property of the config object
(either passed as an argument or loaded from `),Gfe=n(oL,"CODE",{});var NEt=s(Gfe);rEo=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),tEo=r(oL,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ofe=n(oL,"CODE",{});var qEt=s(Ofe);aEo=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),nEo=r(oL,":"),oL.forEach(t),sEo=i(_a),W=n(_a,"UL",{});var J=s(W);yu=n(J,"LI",{});var wRe=s(yu);Vfe=n(wRe,"STRONG",{});var jEt=s(Vfe);lEo=r(jEt,"beit"),jEt.forEach(t),iEo=r(wRe," \u2014 "),xD=n(wRe,"A",{href:!0});var DEt=s(xD);dEo=r(DEt,"BeitFeatureExtractor"),DEt.forEach(t),cEo=r(wRe," (BEiT model)"),wRe.forEach(t),mEo=i(J),Lu=n(J,"LI",{});var ARe=s(Lu);Xfe=n(ARe,"STRONG",{});var GEt=s(Xfe);fEo=r(GEt,"clip"),GEt.forEach(t),gEo=r(ARe," \u2014 "),$D=n(ARe,"A",{href:!0});var OEt=s($D);hEo=r(OEt,"CLIPFeatureExtractor"),OEt.forEach(t),uEo=r(ARe," (CLIP model)"),ARe.forEach(t),pEo=i(J),xu=n(J,"LI",{});var yRe=s(xu);zfe=n(yRe,"STRONG",{});var VEt=s(zfe);_Eo=r(VEt,"convnext"),VEt.forEach(t),bEo=r(yRe," \u2014 "),kD=n(yRe,"A",{href:!0});var XEt=s(kD);vEo=r(XEt,"ConvNextFeatureExtractor"),XEt.forEach(t),FEo=r(yRe," (ConvNeXT model)"),yRe.forEach(t),TEo=i(J),$u=n(J,"LI",{});var LRe=s($u);Qfe=n(LRe,"STRONG",{});var zEt=s(Qfe);MEo=r(zEt,"cvt"),zEt.forEach(t),EEo=r(LRe," \u2014 "),SD=n(LRe,"A",{href:!0});var QEt=s(SD);CEo=r(QEt,"ConvNextFeatureExtractor"),QEt.forEach(t),wEo=r(LRe," (CvT model)"),LRe.forEach(t),AEo=i(J),ku=n(J,"LI",{});var xRe=s(ku);Wfe=n(xRe,"STRONG",{});var WEt=s(Wfe);yEo=r(WEt,"data2vec-audio"),WEt.forEach(t),LEo=r(xRe," \u2014 "),RD=n(xRe,"A",{href:!0});var UEt=s(RD);xEo=r(UEt,"Wav2Vec2FeatureExtractor"),UEt.forEach(t),$Eo=r(xRe," (Data2VecAudio model)"),xRe.forEach(t),kEo=i(J),Su=n(J,"LI",{});var $Re=s(Su);Ufe=n($Re,"STRONG",{});var HEt=s(Ufe);SEo=r(HEt,"data2vec-vision"),HEt.forEach(t),REo=r($Re," \u2014 "),PD=n($Re,"A",{href:!0});var JEt=s(PD);PEo=r(JEt,"BeitFeatureExtractor"),JEt.forEach(t),BEo=r($Re," (Data2VecVision model)"),$Re.forEach(t),IEo=i(J),Ru=n(J,"LI",{});var kRe=s(Ru);Hfe=n(kRe,"STRONG",{});var YEt=s(Hfe);NEo=r(YEt,"deit"),YEt.forEach(t),qEo=r(kRe," \u2014 "),BD=n(kRe,"A",{href:!0});var KEt=s(BD);jEo=r(KEt,"DeiTFeatureExtractor"),KEt.forEach(t),DEo=r(kRe," (DeiT model)"),kRe.forEach(t),GEo=i(J),Pu=n(J,"LI",{});var SRe=s(Pu);Jfe=n(SRe,"STRONG",{});var ZEt=s(Jfe);OEo=r(ZEt,"detr"),ZEt.forEach(t),VEo=r(SRe," \u2014 "),ID=n(SRe,"A",{href:!0});var e4t=s(ID);XEo=r(e4t,"DetrFeatureExtractor"),e4t.forEach(t),zEo=r(SRe," (DETR model)"),SRe.forEach(t),QEo=i(J),Bu=n(J,"LI",{});var RRe=s(Bu);Yfe=n(RRe,"STRONG",{});var o4t=s(Yfe);WEo=r(o4t,"donut"),o4t.forEach(t),UEo=r(RRe," \u2014 "),ND=n(RRe,"A",{href:!0});var r4t=s(ND);HEo=r(r4t,"DonutFeatureExtractor"),r4t.forEach(t),JEo=r(RRe," (Donut model)"),RRe.forEach(t),YEo=i(J),Iu=n(J,"LI",{});var PRe=s(Iu);Kfe=n(PRe,"STRONG",{});var t4t=s(Kfe);KEo=r(t4t,"dpt"),t4t.forEach(t),ZEo=r(PRe," \u2014 "),qD=n(PRe,"A",{href:!0});var a4t=s(qD);e4o=r(a4t,"DPTFeatureExtractor"),a4t.forEach(t),o4o=r(PRe," (DPT model)"),PRe.forEach(t),r4o=i(J),Nu=n(J,"LI",{});var BRe=s(Nu);Zfe=n(BRe,"STRONG",{});var n4t=s(Zfe);t4o=r(n4t,"flava"),n4t.forEach(t),a4o=r(BRe," \u2014 "),jD=n(BRe,"A",{href:!0});var s4t=s(jD);n4o=r(s4t,"FlavaFeatureExtractor"),s4t.forEach(t),s4o=r(BRe," (FLAVA model)"),BRe.forEach(t),l4o=i(J),qu=n(J,"LI",{});var IRe=s(qu);ege=n(IRe,"STRONG",{});var l4t=s(ege);i4o=r(l4t,"glpn"),l4t.forEach(t),d4o=r(IRe," \u2014 "),DD=n(IRe,"A",{href:!0});var i4t=s(DD);c4o=r(i4t,"GLPNFeatureExtractor"),i4t.forEach(t),m4o=r(IRe," (GLPN model)"),IRe.forEach(t),f4o=i(J),ju=n(J,"LI",{});var NRe=s(ju);oge=n(NRe,"STRONG",{});var d4t=s(oge);g4o=r(d4t,"groupvit"),d4t.forEach(t),h4o=r(NRe," \u2014 "),GD=n(NRe,"A",{href:!0});var c4t=s(GD);u4o=r(c4t,"CLIPFeatureExtractor"),c4t.forEach(t),p4o=r(NRe," (GroupViT model)"),NRe.forEach(t),_4o=i(J),Du=n(J,"LI",{});var qRe=s(Du);rge=n(qRe,"STRONG",{});var m4t=s(rge);b4o=r(m4t,"hubert"),m4t.forEach(t),v4o=r(qRe," \u2014 "),OD=n(qRe,"A",{href:!0});var f4t=s(OD);F4o=r(f4t,"Wav2Vec2FeatureExtractor"),f4t.forEach(t),T4o=r(qRe," (Hubert model)"),qRe.forEach(t),M4o=i(J),Gu=n(J,"LI",{});var jRe=s(Gu);tge=n(jRe,"STRONG",{});var g4t=s(tge);E4o=r(g4t,"imagegpt"),g4t.forEach(t),C4o=r(jRe," \u2014 "),VD=n(jRe,"A",{href:!0});var h4t=s(VD);w4o=r(h4t,"ImageGPTFeatureExtractor"),h4t.forEach(t),A4o=r(jRe," (ImageGPT model)"),jRe.forEach(t),y4o=i(J),Ou=n(J,"LI",{});var DRe=s(Ou);age=n(DRe,"STRONG",{});var u4t=s(age);L4o=r(u4t,"layoutlmv2"),u4t.forEach(t),x4o=r(DRe," \u2014 "),XD=n(DRe,"A",{href:!0});var p4t=s(XD);$4o=r(p4t,"LayoutLMv2FeatureExtractor"),p4t.forEach(t),k4o=r(DRe," (LayoutLMv2 model)"),DRe.forEach(t),S4o=i(J),Vu=n(J,"LI",{});var GRe=s(Vu);nge=n(GRe,"STRONG",{});var _4t=s(nge);R4o=r(_4t,"layoutlmv3"),_4t.forEach(t),P4o=r(GRe," \u2014 "),zD=n(GRe,"A",{href:!0});var b4t=s(zD);B4o=r(b4t,"LayoutLMv3FeatureExtractor"),b4t.forEach(t),I4o=r(GRe," (LayoutLMv3 model)"),GRe.forEach(t),N4o=i(J),Xu=n(J,"LI",{});var ORe=s(Xu);sge=n(ORe,"STRONG",{});var v4t=s(sge);q4o=r(v4t,"levit"),v4t.forEach(t),j4o=r(ORe," \u2014 "),QD=n(ORe,"A",{href:!0});var F4t=s(QD);D4o=r(F4t,"LevitFeatureExtractor"),F4t.forEach(t),G4o=r(ORe," (LeViT model)"),ORe.forEach(t),O4o=i(J),zu=n(J,"LI",{});var VRe=s(zu);lge=n(VRe,"STRONG",{});var T4t=s(lge);V4o=r(T4t,"maskformer"),T4t.forEach(t),X4o=r(VRe," \u2014 "),WD=n(VRe,"A",{href:!0});var M4t=s(WD);z4o=r(M4t,"MaskFormerFeatureExtractor"),M4t.forEach(t),Q4o=r(VRe," (MaskFormer model)"),VRe.forEach(t),W4o=i(J),Qu=n(J,"LI",{});var XRe=s(Qu);ige=n(XRe,"STRONG",{});var E4t=s(ige);U4o=r(E4t,"mctct"),E4t.forEach(t),H4o=r(XRe," \u2014 "),UD=n(XRe,"A",{href:!0});var C4t=s(UD);J4o=r(C4t,"MCTCTFeatureExtractor"),C4t.forEach(t),Y4o=r(XRe," (M-CTC-T model)"),XRe.forEach(t),K4o=i(J),Wu=n(J,"LI",{});var zRe=s(Wu);dge=n(zRe,"STRONG",{});var w4t=s(dge);Z4o=r(w4t,"mobilevit"),w4t.forEach(t),eCo=r(zRe," \u2014 "),HD=n(zRe,"A",{href:!0});var A4t=s(HD);oCo=r(A4t,"MobileViTFeatureExtractor"),A4t.forEach(t),rCo=r(zRe," (MobileViT model)"),zRe.forEach(t),tCo=i(J),Uu=n(J,"LI",{});var QRe=s(Uu);cge=n(QRe,"STRONG",{});var y4t=s(cge);aCo=r(y4t,"owlvit"),y4t.forEach(t),nCo=r(QRe," \u2014 "),JD=n(QRe,"A",{href:!0});var L4t=s(JD);sCo=r(L4t,"OwlViTFeatureExtractor"),L4t.forEach(t),lCo=r(QRe," (OWL-ViT model)"),QRe.forEach(t),iCo=i(J),Hu=n(J,"LI",{});var WRe=s(Hu);mge=n(WRe,"STRONG",{});var x4t=s(mge);dCo=r(x4t,"perceiver"),x4t.forEach(t),cCo=r(WRe," \u2014 "),YD=n(WRe,"A",{href:!0});var $4t=s(YD);mCo=r($4t,"PerceiverFeatureExtractor"),$4t.forEach(t),fCo=r(WRe," (Perceiver model)"),WRe.forEach(t),gCo=i(J),Ju=n(J,"LI",{});var URe=s(Ju);fge=n(URe,"STRONG",{});var k4t=s(fge);hCo=r(k4t,"poolformer"),k4t.forEach(t),uCo=r(URe," \u2014 "),KD=n(URe,"A",{href:!0});var S4t=s(KD);pCo=r(S4t,"PoolFormerFeatureExtractor"),S4t.forEach(t),_Co=r(URe," (PoolFormer model)"),URe.forEach(t),bCo=i(J),Yu=n(J,"LI",{});var HRe=s(Yu);gge=n(HRe,"STRONG",{});var R4t=s(gge);vCo=r(R4t,"regnet"),R4t.forEach(t),FCo=r(HRe," \u2014 "),ZD=n(HRe,"A",{href:!0});var P4t=s(ZD);TCo=r(P4t,"ConvNextFeatureExtractor"),P4t.forEach(t),MCo=r(HRe," (RegNet model)"),HRe.forEach(t),ECo=i(J),Ku=n(J,"LI",{});var JRe=s(Ku);hge=n(JRe,"STRONG",{});var B4t=s(hge);CCo=r(B4t,"resnet"),B4t.forEach(t),wCo=r(JRe," \u2014 "),eG=n(JRe,"A",{href:!0});var I4t=s(eG);ACo=r(I4t,"ConvNextFeatureExtractor"),I4t.forEach(t),yCo=r(JRe," (ResNet model)"),JRe.forEach(t),LCo=i(J),Zu=n(J,"LI",{});var YRe=s(Zu);uge=n(YRe,"STRONG",{});var N4t=s(uge);xCo=r(N4t,"segformer"),N4t.forEach(t),$Co=r(YRe," \u2014 "),oG=n(YRe,"A",{href:!0});var q4t=s(oG);kCo=r(q4t,"SegformerFeatureExtractor"),q4t.forEach(t),SCo=r(YRe," (SegFormer model)"),YRe.forEach(t),RCo=i(J),ep=n(J,"LI",{});var KRe=s(ep);pge=n(KRe,"STRONG",{});var j4t=s(pge);PCo=r(j4t,"speech_to_text"),j4t.forEach(t),BCo=r(KRe," \u2014 "),rG=n(KRe,"A",{href:!0});var D4t=s(rG);ICo=r(D4t,"Speech2TextFeatureExtractor"),D4t.forEach(t),NCo=r(KRe," (Speech2Text model)"),KRe.forEach(t),qCo=i(J),op=n(J,"LI",{});var ZRe=s(op);_ge=n(ZRe,"STRONG",{});var G4t=s(_ge);jCo=r(G4t,"swin"),G4t.forEach(t),DCo=r(ZRe," \u2014 "),tG=n(ZRe,"A",{href:!0});var O4t=s(tG);GCo=r(O4t,"ViTFeatureExtractor"),O4t.forEach(t),OCo=r(ZRe," (Swin Transformer model)"),ZRe.forEach(t),VCo=i(J),rp=n(J,"LI",{});var ePe=s(rp);bge=n(ePe,"STRONG",{});var V4t=s(bge);XCo=r(V4t,"swinv2"),V4t.forEach(t),zCo=r(ePe," \u2014 "),aG=n(ePe,"A",{href:!0});var X4t=s(aG);QCo=r(X4t,"ViTFeatureExtractor"),X4t.forEach(t),WCo=r(ePe," (Swin Transformer V2 model)"),ePe.forEach(t),UCo=i(J),tp=n(J,"LI",{});var oPe=s(tp);vge=n(oPe,"STRONG",{});var z4t=s(vge);HCo=r(z4t,"van"),z4t.forEach(t),JCo=r(oPe," \u2014 "),nG=n(oPe,"A",{href:!0});var Q4t=s(nG);YCo=r(Q4t,"ConvNextFeatureExtractor"),Q4t.forEach(t),KCo=r(oPe," (VAN model)"),oPe.forEach(t),ZCo=i(J),ap=n(J,"LI",{});var rPe=s(ap);Fge=n(rPe,"STRONG",{});var W4t=s(Fge);e3o=r(W4t,"videomae"),W4t.forEach(t),o3o=r(rPe," \u2014 "),sG=n(rPe,"A",{href:!0});var U4t=s(sG);r3o=r(U4t,"VideoMAEFeatureExtractor"),U4t.forEach(t),t3o=r(rPe," (VideoMAE model)"),rPe.forEach(t),a3o=i(J),np=n(J,"LI",{});var tPe=s(np);Tge=n(tPe,"STRONG",{});var H4t=s(Tge);n3o=r(H4t,"vilt"),H4t.forEach(t),s3o=r(tPe," \u2014 "),lG=n(tPe,"A",{href:!0});var J4t=s(lG);l3o=r(J4t,"ViltFeatureExtractor"),J4t.forEach(t),i3o=r(tPe," (ViLT model)"),tPe.forEach(t),d3o=i(J),sp=n(J,"LI",{});var aPe=s(sp);Mge=n(aPe,"STRONG",{});var Y4t=s(Mge);c3o=r(Y4t,"vit"),Y4t.forEach(t),m3o=r(aPe," \u2014 "),iG=n(aPe,"A",{href:!0});var K4t=s(iG);f3o=r(K4t,"ViTFeatureExtractor"),K4t.forEach(t),g3o=r(aPe," (ViT model)"),aPe.forEach(t),h3o=i(J),lp=n(J,"LI",{});var nPe=s(lp);Ege=n(nPe,"STRONG",{});var Z4t=s(Ege);u3o=r(Z4t,"vit_mae"),Z4t.forEach(t),p3o=r(nPe," \u2014 "),dG=n(nPe,"A",{href:!0});var eCt=s(dG);_3o=r(eCt,"ViTFeatureExtractor"),eCt.forEach(t),b3o=r(nPe," (ViTMAE model)"),nPe.forEach(t),v3o=i(J),ip=n(J,"LI",{});var sPe=s(ip);Cge=n(sPe,"STRONG",{});var oCt=s(Cge);F3o=r(oCt,"wav2vec2"),oCt.forEach(t),T3o=r(sPe," \u2014 "),cG=n(sPe,"A",{href:!0});var rCt=s(cG);M3o=r(rCt,"Wav2Vec2FeatureExtractor"),rCt.forEach(t),E3o=r(sPe," (Wav2Vec2 model)"),sPe.forEach(t),C3o=i(J),dp=n(J,"LI",{});var lPe=s(dp);wge=n(lPe,"STRONG",{});var tCt=s(wge);w3o=r(tCt,"wav2vec2-conformer"),tCt.forEach(t),A3o=r(lPe," \u2014 "),mG=n(lPe,"A",{href:!0});var aCt=s(mG);y3o=r(aCt,"Wav2Vec2FeatureExtractor"),aCt.forEach(t),L3o=r(lPe," (Wav2Vec2-Conformer model)"),lPe.forEach(t),x3o=i(J),cp=n(J,"LI",{});var iPe=s(cp);Age=n(iPe,"STRONG",{});var nCt=s(Age);$3o=r(nCt,"yolos"),nCt.forEach(t),k3o=r(iPe," \u2014 "),fG=n(iPe,"A",{href:!0});var sCt=s(fG);S3o=r(sCt,"YolosFeatureExtractor"),sCt.forEach(t),R3o=r(iPe," (YOLOS model)"),iPe.forEach(t),J.forEach(t),P3o=i(_a),T(mp.$$.fragment,_a),B3o=i(_a),T(fp.$$.fragment,_a),_a.forEach(t),I3o=i(Tl),gp=n(Tl,"DIV",{class:!0});var GKe=s(gp);T(A9.$$.fragment,GKe),N3o=i(GKe),yge=n(GKe,"P",{});var lCt=s(yge);q3o=r(lCt,"Register a new feature extractor for this class."),lCt.forEach(t),GKe.forEach(t),Tl.forEach(t),$Je=i(m),fd=n(m,"H2",{class:!0});var OKe=s(fd);hp=n(OKe,"A",{id:!0,class:!0,href:!0});var iCt=s(hp);Lge=n(iCt,"SPAN",{});var dCt=s(Lge);T(y9.$$.fragment,dCt),dCt.forEach(t),iCt.forEach(t),j3o=i(OKe),xge=n(OKe,"SPAN",{});var cCt=s(xge);D3o=r(cCt,"AutoProcessor"),cCt.forEach(t),OKe.forEach(t),kJe=i(m),So=n(m,"DIV",{class:!0});var Ml=s(So);T(L9.$$.fragment,Ml),G3o=i(Ml),x9=n(Ml,"P",{});var VKe=s(x9);O3o=r(VKe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),gG=n(VKe,"A",{href:!0});var mCt=s(gG);V3o=r(mCt,"AutoProcessor.from_pretrained()"),mCt.forEach(t),X3o=r(VKe," class method."),VKe.forEach(t),z3o=i(Ml),$9=n(Ml,"P",{});var XKe=s($9);Q3o=r(XKe,"This class cannot be instantiated directly using "),$ge=n(XKe,"CODE",{});var fCt=s($ge);W3o=r(fCt,"__init__()"),fCt.forEach(t),U3o=r(XKe," (throws an error)."),XKe.forEach(t),H3o=i(Ml),Ye=n(Ml,"DIV",{class:!0});var ba=s(Ye);T(k9.$$.fragment,ba),J3o=i(ba),kge=n(ba,"P",{});var gCt=s(kge);Y3o=r(gCt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),gCt.forEach(t),K3o=i(ba),gd=n(ba,"P",{});var cse=s(gd);Z3o=r(cse,"The processor class to instantiate is selected based on the "),Sge=n(cse,"CODE",{});var hCt=s(Sge);e5o=r(hCt,"model_type"),hCt.forEach(t),o5o=r(cse,` property of the config object (either
passed as an argument or loaded from `),Rge=n(cse,"CODE",{});var uCt=s(Rge);r5o=r(uCt,"pretrained_model_name_or_path"),uCt.forEach(t),t5o=r(cse," if possible):"),cse.forEach(t),a5o=i(ba),ce=n(ba,"UL",{});var ue=s(ce);up=n(ue,"LI",{});var dPe=s(up);Pge=n(dPe,"STRONG",{});var pCt=s(Pge);n5o=r(pCt,"clip"),pCt.forEach(t),s5o=r(dPe," \u2014 "),hG=n(dPe,"A",{href:!0});var _Ct=s(hG);l5o=r(_Ct,"CLIPProcessor"),_Ct.forEach(t),i5o=r(dPe," (CLIP model)"),dPe.forEach(t),d5o=i(ue),pp=n(ue,"LI",{});var cPe=s(pp);Bge=n(cPe,"STRONG",{});var bCt=s(Bge);c5o=r(bCt,"donut"),bCt.forEach(t),m5o=r(cPe," \u2014 "),uG=n(cPe,"A",{href:!0});var vCt=s(uG);f5o=r(vCt,"DonutProcessor"),vCt.forEach(t),g5o=r(cPe," (Donut model)"),cPe.forEach(t),h5o=i(ue),_p=n(ue,"LI",{});var mPe=s(_p);Ige=n(mPe,"STRONG",{});var FCt=s(Ige);u5o=r(FCt,"flava"),FCt.forEach(t),p5o=r(mPe," \u2014 "),pG=n(mPe,"A",{href:!0});var TCt=s(pG);_5o=r(TCt,"FlavaProcessor"),TCt.forEach(t),b5o=r(mPe," (FLAVA model)"),mPe.forEach(t),v5o=i(ue),bp=n(ue,"LI",{});var fPe=s(bp);Nge=n(fPe,"STRONG",{});var MCt=s(Nge);F5o=r(MCt,"groupvit"),MCt.forEach(t),T5o=r(fPe," \u2014 "),_G=n(fPe,"A",{href:!0});var ECt=s(_G);M5o=r(ECt,"CLIPProcessor"),ECt.forEach(t),E5o=r(fPe," (GroupViT model)"),fPe.forEach(t),C5o=i(ue),vp=n(ue,"LI",{});var gPe=s(vp);qge=n(gPe,"STRONG",{});var CCt=s(qge);w5o=r(CCt,"layoutlmv2"),CCt.forEach(t),A5o=r(gPe," \u2014 "),bG=n(gPe,"A",{href:!0});var wCt=s(bG);y5o=r(wCt,"LayoutLMv2Processor"),wCt.forEach(t),L5o=r(gPe," (LayoutLMv2 model)"),gPe.forEach(t),x5o=i(ue),Fp=n(ue,"LI",{});var hPe=s(Fp);jge=n(hPe,"STRONG",{});var ACt=s(jge);$5o=r(ACt,"layoutlmv3"),ACt.forEach(t),k5o=r(hPe," \u2014 "),vG=n(hPe,"A",{href:!0});var yCt=s(vG);S5o=r(yCt,"LayoutLMv3Processor"),yCt.forEach(t),R5o=r(hPe," (LayoutLMv3 model)"),hPe.forEach(t),P5o=i(ue),Tp=n(ue,"LI",{});var uPe=s(Tp);Dge=n(uPe,"STRONG",{});var LCt=s(Dge);B5o=r(LCt,"layoutxlm"),LCt.forEach(t),I5o=r(uPe," \u2014 "),FG=n(uPe,"A",{href:!0});var xCt=s(FG);N5o=r(xCt,"LayoutXLMProcessor"),xCt.forEach(t),q5o=r(uPe," (LayoutXLM model)"),uPe.forEach(t),j5o=i(ue),Mp=n(ue,"LI",{});var pPe=s(Mp);Gge=n(pPe,"STRONG",{});var $Ct=s(Gge);D5o=r($Ct,"owlvit"),$Ct.forEach(t),G5o=r(pPe," \u2014 "),TG=n(pPe,"A",{href:!0});var kCt=s(TG);O5o=r(kCt,"OwlViTProcessor"),kCt.forEach(t),V5o=r(pPe," (OWL-ViT model)"),pPe.forEach(t),X5o=i(ue),Ep=n(ue,"LI",{});var _Pe=s(Ep);Oge=n(_Pe,"STRONG",{});var SCt=s(Oge);z5o=r(SCt,"sew"),SCt.forEach(t),Q5o=r(_Pe," \u2014 "),MG=n(_Pe,"A",{href:!0});var RCt=s(MG);W5o=r(RCt,"Wav2Vec2Processor"),RCt.forEach(t),U5o=r(_Pe," (SEW model)"),_Pe.forEach(t),H5o=i(ue),Cp=n(ue,"LI",{});var bPe=s(Cp);Vge=n(bPe,"STRONG",{});var PCt=s(Vge);J5o=r(PCt,"sew-d"),PCt.forEach(t),Y5o=r(bPe," \u2014 "),EG=n(bPe,"A",{href:!0});var BCt=s(EG);K5o=r(BCt,"Wav2Vec2Processor"),BCt.forEach(t),Z5o=r(bPe," (SEW-D model)"),bPe.forEach(t),e0o=i(ue),wp=n(ue,"LI",{});var vPe=s(wp);Xge=n(vPe,"STRONG",{});var ICt=s(Xge);o0o=r(ICt,"speech_to_text"),ICt.forEach(t),r0o=r(vPe," \u2014 "),CG=n(vPe,"A",{href:!0});var NCt=s(CG);t0o=r(NCt,"Speech2TextProcessor"),NCt.forEach(t),a0o=r(vPe," (Speech2Text model)"),vPe.forEach(t),n0o=i(ue),Ap=n(ue,"LI",{});var FPe=s(Ap);zge=n(FPe,"STRONG",{});var qCt=s(zge);s0o=r(qCt,"speech_to_text_2"),qCt.forEach(t),l0o=r(FPe," \u2014 "),wG=n(FPe,"A",{href:!0});var jCt=s(wG);i0o=r(jCt,"Speech2Text2Processor"),jCt.forEach(t),d0o=r(FPe," (Speech2Text2 model)"),FPe.forEach(t),c0o=i(ue),yp=n(ue,"LI",{});var TPe=s(yp);Qge=n(TPe,"STRONG",{});var DCt=s(Qge);m0o=r(DCt,"trocr"),DCt.forEach(t),f0o=r(TPe," \u2014 "),AG=n(TPe,"A",{href:!0});var GCt=s(AG);g0o=r(GCt,"TrOCRProcessor"),GCt.forEach(t),h0o=r(TPe," (TrOCR model)"),TPe.forEach(t),u0o=i(ue),Lp=n(ue,"LI",{});var MPe=s(Lp);Wge=n(MPe,"STRONG",{});var OCt=s(Wge);p0o=r(OCt,"unispeech"),OCt.forEach(t),_0o=r(MPe," \u2014 "),yG=n(MPe,"A",{href:!0});var VCt=s(yG);b0o=r(VCt,"Wav2Vec2Processor"),VCt.forEach(t),v0o=r(MPe," (UniSpeech model)"),MPe.forEach(t),F0o=i(ue),xp=n(ue,"LI",{});var EPe=s(xp);Uge=n(EPe,"STRONG",{});var XCt=s(Uge);T0o=r(XCt,"unispeech-sat"),XCt.forEach(t),M0o=r(EPe," \u2014 "),LG=n(EPe,"A",{href:!0});var zCt=s(LG);E0o=r(zCt,"Wav2Vec2Processor"),zCt.forEach(t),C0o=r(EPe," (UniSpeechSat model)"),EPe.forEach(t),w0o=i(ue),$p=n(ue,"LI",{});var CPe=s($p);Hge=n(CPe,"STRONG",{});var QCt=s(Hge);A0o=r(QCt,"vilt"),QCt.forEach(t),y0o=r(CPe," \u2014 "),xG=n(CPe,"A",{href:!0});var WCt=s(xG);L0o=r(WCt,"ViltProcessor"),WCt.forEach(t),x0o=r(CPe," (ViLT model)"),CPe.forEach(t),$0o=i(ue),kp=n(ue,"LI",{});var wPe=s(kp);Jge=n(wPe,"STRONG",{});var UCt=s(Jge);k0o=r(UCt,"vision-text-dual-encoder"),UCt.forEach(t),S0o=r(wPe," \u2014 "),$G=n(wPe,"A",{href:!0});var HCt=s($G);R0o=r(HCt,"VisionTextDualEncoderProcessor"),HCt.forEach(t),P0o=r(wPe," (VisionTextDualEncoder model)"),wPe.forEach(t),B0o=i(ue),Sp=n(ue,"LI",{});var APe=s(Sp);Yge=n(APe,"STRONG",{});var JCt=s(Yge);I0o=r(JCt,"wav2vec2"),JCt.forEach(t),N0o=r(APe," \u2014 "),kG=n(APe,"A",{href:!0});var YCt=s(kG);q0o=r(YCt,"Wav2Vec2Processor"),YCt.forEach(t),j0o=r(APe," (Wav2Vec2 model)"),APe.forEach(t),D0o=i(ue),Rp=n(ue,"LI",{});var yPe=s(Rp);Kge=n(yPe,"STRONG",{});var KCt=s(Kge);G0o=r(KCt,"wav2vec2-conformer"),KCt.forEach(t),O0o=r(yPe," \u2014 "),SG=n(yPe,"A",{href:!0});var ZCt=s(SG);V0o=r(ZCt,"Wav2Vec2Processor"),ZCt.forEach(t),X0o=r(yPe," (Wav2Vec2-Conformer model)"),yPe.forEach(t),z0o=i(ue),Pp=n(ue,"LI",{});var LPe=s(Pp);Zge=n(LPe,"STRONG",{});var e3t=s(Zge);Q0o=r(e3t,"wavlm"),e3t.forEach(t),W0o=r(LPe," \u2014 "),RG=n(LPe,"A",{href:!0});var o3t=s(RG);U0o=r(o3t,"Wav2Vec2Processor"),o3t.forEach(t),H0o=r(LPe," (WavLM model)"),LPe.forEach(t),ue.forEach(t),J0o=i(ba),T(Bp.$$.fragment,ba),Y0o=i(ba),T(Ip.$$.fragment,ba),ba.forEach(t),K0o=i(Ml),Np=n(Ml,"DIV",{class:!0});var zKe=s(Np);T(S9.$$.fragment,zKe),Z0o=i(zKe),ehe=n(zKe,"P",{});var r3t=s(ehe);ewo=r(r3t,"Register a new processor for this class."),r3t.forEach(t),zKe.forEach(t),Ml.forEach(t),SJe=i(m),hd=n(m,"H2",{class:!0});var QKe=s(hd);qp=n(QKe,"A",{id:!0,class:!0,href:!0});var t3t=s(qp);ohe=n(t3t,"SPAN",{});var a3t=s(ohe);T(R9.$$.fragment,a3t),a3t.forEach(t),t3t.forEach(t),owo=i(QKe),rhe=n(QKe,"SPAN",{});var n3t=s(rhe);rwo=r(n3t,"AutoModel"),n3t.forEach(t),QKe.forEach(t),RJe=i(m),Ro=n(m,"DIV",{class:!0});var El=s(Ro);T(P9.$$.fragment,El),two=i(El),ud=n(El,"P",{});var mse=s(ud);awo=r(mse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PG=n(mse,"A",{href:!0});var s3t=s(PG);nwo=r(s3t,"from_pretrained()"),s3t.forEach(t),swo=r(mse," class method or the "),BG=n(mse,"A",{href:!0});var l3t=s(BG);lwo=r(l3t,"from_config()"),l3t.forEach(t),iwo=r(mse,` class
method.`),mse.forEach(t),dwo=i(El),B9=n(El,"P",{});var WKe=s(B9);cwo=r(WKe,"This class cannot be instantiated directly using "),the=n(WKe,"CODE",{});var i3t=s(the);mwo=r(i3t,"__init__()"),i3t.forEach(t),fwo=r(WKe," (throws an error)."),WKe.forEach(t),gwo=i(El),pt=n(El,"DIV",{class:!0});var rL=s(pt);T(I9.$$.fragment,rL),hwo=i(rL),ahe=n(rL,"P",{});var d3t=s(ahe);uwo=r(d3t,"Instantiates one of the base model classes of the library from a configuration."),d3t.forEach(t),pwo=i(rL),pd=n(rL,"P",{});var fse=s(pd);_wo=r(fse,`Note:
Loading a model from its configuration file does `),nhe=n(fse,"STRONG",{});var c3t=s(nhe);bwo=r(c3t,"not"),c3t.forEach(t),vwo=r(fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(fse,"A",{href:!0});var m3t=s(IG);Fwo=r(m3t,"from_pretrained()"),m3t.forEach(t),Two=r(fse," to load the model weights."),fse.forEach(t),Mwo=i(rL),T(jp.$$.fragment,rL),rL.forEach(t),Ewo=i(El),Ke=n(El,"DIV",{class:!0});var va=s(Ke);T(N9.$$.fragment,va),Cwo=i(va),she=n(va,"P",{});var f3t=s(she);wwo=r(f3t,"Instantiate one of the base model classes of the library from a pretrained model."),f3t.forEach(t),Awo=i(va),Ja=n(va,"P",{});var tL=s(Ja);ywo=r(tL,"The model class to instantiate is selected based on the "),lhe=n(tL,"CODE",{});var g3t=s(lhe);Lwo=r(g3t,"model_type"),g3t.forEach(t),xwo=r(tL,` property of the config object (either
passed as an argument or loaded from `),ihe=n(tL,"CODE",{});var h3t=s(ihe);$wo=r(h3t,"pretrained_model_name_or_path"),h3t.forEach(t),kwo=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=n(tL,"CODE",{});var u3t=s(dhe);Swo=r(u3t,"pretrained_model_name_or_path"),u3t.forEach(t),Rwo=r(tL,":"),tL.forEach(t),Pwo=i(va),L=n(va,"UL",{});var x=s(L);Dp=n(x,"LI",{});var xPe=s(Dp);che=n(xPe,"STRONG",{});var p3t=s(che);Bwo=r(p3t,"albert"),p3t.forEach(t),Iwo=r(xPe," \u2014 "),NG=n(xPe,"A",{href:!0});var _3t=s(NG);Nwo=r(_3t,"AlbertModel"),_3t.forEach(t),qwo=r(xPe," (ALBERT model)"),xPe.forEach(t),jwo=i(x),Gp=n(x,"LI",{});var $Pe=s(Gp);mhe=n($Pe,"STRONG",{});var b3t=s(mhe);Dwo=r(b3t,"bart"),b3t.forEach(t),Gwo=r($Pe," \u2014 "),qG=n($Pe,"A",{href:!0});var v3t=s(qG);Owo=r(v3t,"BartModel"),v3t.forEach(t),Vwo=r($Pe," (BART model)"),$Pe.forEach(t),Xwo=i(x),Op=n(x,"LI",{});var kPe=s(Op);fhe=n(kPe,"STRONG",{});var F3t=s(fhe);zwo=r(F3t,"beit"),F3t.forEach(t),Qwo=r(kPe," \u2014 "),jG=n(kPe,"A",{href:!0});var T3t=s(jG);Wwo=r(T3t,"BeitModel"),T3t.forEach(t),Uwo=r(kPe," (BEiT model)"),kPe.forEach(t),Hwo=i(x),Vp=n(x,"LI",{});var SPe=s(Vp);ghe=n(SPe,"STRONG",{});var M3t=s(ghe);Jwo=r(M3t,"bert"),M3t.forEach(t),Ywo=r(SPe," \u2014 "),DG=n(SPe,"A",{href:!0});var E3t=s(DG);Kwo=r(E3t,"BertModel"),E3t.forEach(t),Zwo=r(SPe," (BERT model)"),SPe.forEach(t),eAo=i(x),Xp=n(x,"LI",{});var RPe=s(Xp);hhe=n(RPe,"STRONG",{});var C3t=s(hhe);oAo=r(C3t,"bert-generation"),C3t.forEach(t),rAo=r(RPe," \u2014 "),GG=n(RPe,"A",{href:!0});var w3t=s(GG);tAo=r(w3t,"BertGenerationEncoder"),w3t.forEach(t),aAo=r(RPe," (Bert Generation model)"),RPe.forEach(t),nAo=i(x),zp=n(x,"LI",{});var PPe=s(zp);uhe=n(PPe,"STRONG",{});var A3t=s(uhe);sAo=r(A3t,"big_bird"),A3t.forEach(t),lAo=r(PPe," \u2014 "),OG=n(PPe,"A",{href:!0});var y3t=s(OG);iAo=r(y3t,"BigBirdModel"),y3t.forEach(t),dAo=r(PPe," (BigBird model)"),PPe.forEach(t),cAo=i(x),Qp=n(x,"LI",{});var BPe=s(Qp);phe=n(BPe,"STRONG",{});var L3t=s(phe);mAo=r(L3t,"bigbird_pegasus"),L3t.forEach(t),fAo=r(BPe," \u2014 "),VG=n(BPe,"A",{href:!0});var x3t=s(VG);gAo=r(x3t,"BigBirdPegasusModel"),x3t.forEach(t),hAo=r(BPe," (BigBird-Pegasus model)"),BPe.forEach(t),uAo=i(x),Wp=n(x,"LI",{});var IPe=s(Wp);_he=n(IPe,"STRONG",{});var $3t=s(_he);pAo=r($3t,"blenderbot"),$3t.forEach(t),_Ao=r(IPe," \u2014 "),XG=n(IPe,"A",{href:!0});var k3t=s(XG);bAo=r(k3t,"BlenderbotModel"),k3t.forEach(t),vAo=r(IPe," (Blenderbot model)"),IPe.forEach(t),FAo=i(x),Up=n(x,"LI",{});var NPe=s(Up);bhe=n(NPe,"STRONG",{});var S3t=s(bhe);TAo=r(S3t,"blenderbot-small"),S3t.forEach(t),MAo=r(NPe," \u2014 "),zG=n(NPe,"A",{href:!0});var R3t=s(zG);EAo=r(R3t,"BlenderbotSmallModel"),R3t.forEach(t),CAo=r(NPe," (BlenderbotSmall model)"),NPe.forEach(t),wAo=i(x),Hp=n(x,"LI",{});var qPe=s(Hp);vhe=n(qPe,"STRONG",{});var P3t=s(vhe);AAo=r(P3t,"bloom"),P3t.forEach(t),yAo=r(qPe," \u2014 "),QG=n(qPe,"A",{href:!0});var B3t=s(QG);LAo=r(B3t,"BloomModel"),B3t.forEach(t),xAo=r(qPe," (BLOOM model)"),qPe.forEach(t),$Ao=i(x),Jp=n(x,"LI",{});var jPe=s(Jp);Fhe=n(jPe,"STRONG",{});var I3t=s(Fhe);kAo=r(I3t,"camembert"),I3t.forEach(t),SAo=r(jPe," \u2014 "),WG=n(jPe,"A",{href:!0});var N3t=s(WG);RAo=r(N3t,"CamembertModel"),N3t.forEach(t),PAo=r(jPe," (CamemBERT model)"),jPe.forEach(t),BAo=i(x),Yp=n(x,"LI",{});var DPe=s(Yp);The=n(DPe,"STRONG",{});var q3t=s(The);IAo=r(q3t,"canine"),q3t.forEach(t),NAo=r(DPe," \u2014 "),UG=n(DPe,"A",{href:!0});var j3t=s(UG);qAo=r(j3t,"CanineModel"),j3t.forEach(t),jAo=r(DPe," (CANINE model)"),DPe.forEach(t),DAo=i(x),Kp=n(x,"LI",{});var GPe=s(Kp);Mhe=n(GPe,"STRONG",{});var D3t=s(Mhe);GAo=r(D3t,"clip"),D3t.forEach(t),OAo=r(GPe," \u2014 "),HG=n(GPe,"A",{href:!0});var G3t=s(HG);VAo=r(G3t,"CLIPModel"),G3t.forEach(t),XAo=r(GPe," (CLIP model)"),GPe.forEach(t),zAo=i(x),Zp=n(x,"LI",{});var OPe=s(Zp);Ehe=n(OPe,"STRONG",{});var O3t=s(Ehe);QAo=r(O3t,"codegen"),O3t.forEach(t),WAo=r(OPe," \u2014 "),JG=n(OPe,"A",{href:!0});var V3t=s(JG);UAo=r(V3t,"CodeGenModel"),V3t.forEach(t),HAo=r(OPe," (CodeGen model)"),OPe.forEach(t),JAo=i(x),e_=n(x,"LI",{});var VPe=s(e_);Che=n(VPe,"STRONG",{});var X3t=s(Che);YAo=r(X3t,"convbert"),X3t.forEach(t),KAo=r(VPe," \u2014 "),YG=n(VPe,"A",{href:!0});var z3t=s(YG);ZAo=r(z3t,"ConvBertModel"),z3t.forEach(t),e6o=r(VPe," (ConvBERT model)"),VPe.forEach(t),o6o=i(x),o_=n(x,"LI",{});var XPe=s(o_);whe=n(XPe,"STRONG",{});var Q3t=s(whe);r6o=r(Q3t,"convnext"),Q3t.forEach(t),t6o=r(XPe," \u2014 "),KG=n(XPe,"A",{href:!0});var W3t=s(KG);a6o=r(W3t,"ConvNextModel"),W3t.forEach(t),n6o=r(XPe," (ConvNeXT model)"),XPe.forEach(t),s6o=i(x),r_=n(x,"LI",{});var zPe=s(r_);Ahe=n(zPe,"STRONG",{});var U3t=s(Ahe);l6o=r(U3t,"ctrl"),U3t.forEach(t),i6o=r(zPe," \u2014 "),ZG=n(zPe,"A",{href:!0});var H3t=s(ZG);d6o=r(H3t,"CTRLModel"),H3t.forEach(t),c6o=r(zPe," (CTRL model)"),zPe.forEach(t),m6o=i(x),t_=n(x,"LI",{});var QPe=s(t_);yhe=n(QPe,"STRONG",{});var J3t=s(yhe);f6o=r(J3t,"cvt"),J3t.forEach(t),g6o=r(QPe," \u2014 "),eO=n(QPe,"A",{href:!0});var Y3t=s(eO);h6o=r(Y3t,"CvtModel"),Y3t.forEach(t),u6o=r(QPe," (CvT model)"),QPe.forEach(t),p6o=i(x),a_=n(x,"LI",{});var WPe=s(a_);Lhe=n(WPe,"STRONG",{});var K3t=s(Lhe);_6o=r(K3t,"data2vec-audio"),K3t.forEach(t),b6o=r(WPe," \u2014 "),oO=n(WPe,"A",{href:!0});var Z3t=s(oO);v6o=r(Z3t,"Data2VecAudioModel"),Z3t.forEach(t),F6o=r(WPe," (Data2VecAudio model)"),WPe.forEach(t),T6o=i(x),n_=n(x,"LI",{});var UPe=s(n_);xhe=n(UPe,"STRONG",{});var e5t=s(xhe);M6o=r(e5t,"data2vec-text"),e5t.forEach(t),E6o=r(UPe," \u2014 "),rO=n(UPe,"A",{href:!0});var o5t=s(rO);C6o=r(o5t,"Data2VecTextModel"),o5t.forEach(t),w6o=r(UPe," (Data2VecText model)"),UPe.forEach(t),A6o=i(x),s_=n(x,"LI",{});var HPe=s(s_);$he=n(HPe,"STRONG",{});var r5t=s($he);y6o=r(r5t,"data2vec-vision"),r5t.forEach(t),L6o=r(HPe," \u2014 "),tO=n(HPe,"A",{href:!0});var t5t=s(tO);x6o=r(t5t,"Data2VecVisionModel"),t5t.forEach(t),$6o=r(HPe," (Data2VecVision model)"),HPe.forEach(t),k6o=i(x),l_=n(x,"LI",{});var JPe=s(l_);khe=n(JPe,"STRONG",{});var a5t=s(khe);S6o=r(a5t,"deberta"),a5t.forEach(t),R6o=r(JPe," \u2014 "),aO=n(JPe,"A",{href:!0});var n5t=s(aO);P6o=r(n5t,"DebertaModel"),n5t.forEach(t),B6o=r(JPe," (DeBERTa model)"),JPe.forEach(t),I6o=i(x),i_=n(x,"LI",{});var YPe=s(i_);She=n(YPe,"STRONG",{});var s5t=s(She);N6o=r(s5t,"deberta-v2"),s5t.forEach(t),q6o=r(YPe," \u2014 "),nO=n(YPe,"A",{href:!0});var l5t=s(nO);j6o=r(l5t,"DebertaV2Model"),l5t.forEach(t),D6o=r(YPe," (DeBERTa-v2 model)"),YPe.forEach(t),G6o=i(x),d_=n(x,"LI",{});var KPe=s(d_);Rhe=n(KPe,"STRONG",{});var i5t=s(Rhe);O6o=r(i5t,"decision_transformer"),i5t.forEach(t),V6o=r(KPe," \u2014 "),sO=n(KPe,"A",{href:!0});var d5t=s(sO);X6o=r(d5t,"DecisionTransformerModel"),d5t.forEach(t),z6o=r(KPe," (Decision Transformer model)"),KPe.forEach(t),Q6o=i(x),c_=n(x,"LI",{});var ZPe=s(c_);Phe=n(ZPe,"STRONG",{});var c5t=s(Phe);W6o=r(c5t,"deit"),c5t.forEach(t),U6o=r(ZPe," \u2014 "),lO=n(ZPe,"A",{href:!0});var m5t=s(lO);H6o=r(m5t,"DeiTModel"),m5t.forEach(t),J6o=r(ZPe," (DeiT model)"),ZPe.forEach(t),Y6o=i(x),m_=n(x,"LI",{});var eBe=s(m_);Bhe=n(eBe,"STRONG",{});var f5t=s(Bhe);K6o=r(f5t,"detr"),f5t.forEach(t),Z6o=r(eBe," \u2014 "),iO=n(eBe,"A",{href:!0});var g5t=s(iO);e7o=r(g5t,"DetrModel"),g5t.forEach(t),o7o=r(eBe," (DETR model)"),eBe.forEach(t),r7o=i(x),f_=n(x,"LI",{});var oBe=s(f_);Ihe=n(oBe,"STRONG",{});var h5t=s(Ihe);t7o=r(h5t,"distilbert"),h5t.forEach(t),a7o=r(oBe," \u2014 "),dO=n(oBe,"A",{href:!0});var u5t=s(dO);n7o=r(u5t,"DistilBertModel"),u5t.forEach(t),s7o=r(oBe," (DistilBERT model)"),oBe.forEach(t),l7o=i(x),g_=n(x,"LI",{});var rBe=s(g_);Nhe=n(rBe,"STRONG",{});var p5t=s(Nhe);i7o=r(p5t,"donut-swin"),p5t.forEach(t),d7o=r(rBe," \u2014 "),cO=n(rBe,"A",{href:!0});var _5t=s(cO);c7o=r(_5t,"DonutSwinModel"),_5t.forEach(t),m7o=r(rBe," (DonutSwin model)"),rBe.forEach(t),f7o=i(x),h_=n(x,"LI",{});var tBe=s(h_);qhe=n(tBe,"STRONG",{});var b5t=s(qhe);g7o=r(b5t,"dpr"),b5t.forEach(t),h7o=r(tBe," \u2014 "),mO=n(tBe,"A",{href:!0});var v5t=s(mO);u7o=r(v5t,"DPRQuestionEncoder"),v5t.forEach(t),p7o=r(tBe," (DPR model)"),tBe.forEach(t),_7o=i(x),u_=n(x,"LI",{});var aBe=s(u_);jhe=n(aBe,"STRONG",{});var F5t=s(jhe);b7o=r(F5t,"dpt"),F5t.forEach(t),v7o=r(aBe," \u2014 "),fO=n(aBe,"A",{href:!0});var T5t=s(fO);F7o=r(T5t,"DPTModel"),T5t.forEach(t),T7o=r(aBe," (DPT model)"),aBe.forEach(t),M7o=i(x),p_=n(x,"LI",{});var nBe=s(p_);Dhe=n(nBe,"STRONG",{});var M5t=s(Dhe);E7o=r(M5t,"electra"),M5t.forEach(t),C7o=r(nBe," \u2014 "),gO=n(nBe,"A",{href:!0});var E5t=s(gO);w7o=r(E5t,"ElectraModel"),E5t.forEach(t),A7o=r(nBe," (ELECTRA model)"),nBe.forEach(t),y7o=i(x),__=n(x,"LI",{});var sBe=s(__);Ghe=n(sBe,"STRONG",{});var C5t=s(Ghe);L7o=r(C5t,"flaubert"),C5t.forEach(t),x7o=r(sBe," \u2014 "),hO=n(sBe,"A",{href:!0});var w5t=s(hO);$7o=r(w5t,"FlaubertModel"),w5t.forEach(t),k7o=r(sBe," (FlauBERT model)"),sBe.forEach(t),S7o=i(x),b_=n(x,"LI",{});var lBe=s(b_);Ohe=n(lBe,"STRONG",{});var A5t=s(Ohe);R7o=r(A5t,"flava"),A5t.forEach(t),P7o=r(lBe," \u2014 "),uO=n(lBe,"A",{href:!0});var y5t=s(uO);B7o=r(y5t,"FlavaModel"),y5t.forEach(t),I7o=r(lBe," (FLAVA model)"),lBe.forEach(t),N7o=i(x),v_=n(x,"LI",{});var iBe=s(v_);Vhe=n(iBe,"STRONG",{});var L5t=s(Vhe);q7o=r(L5t,"fnet"),L5t.forEach(t),j7o=r(iBe," \u2014 "),pO=n(iBe,"A",{href:!0});var x5t=s(pO);D7o=r(x5t,"FNetModel"),x5t.forEach(t),G7o=r(iBe," (FNet model)"),iBe.forEach(t),O7o=i(x),F_=n(x,"LI",{});var dBe=s(F_);Xhe=n(dBe,"STRONG",{});var $5t=s(Xhe);V7o=r($5t,"fsmt"),$5t.forEach(t),X7o=r(dBe," \u2014 "),_O=n(dBe,"A",{href:!0});var k5t=s(_O);z7o=r(k5t,"FSMTModel"),k5t.forEach(t),Q7o=r(dBe," (FairSeq Machine-Translation model)"),dBe.forEach(t),W7o=i(x),hl=n(x,"LI",{});var oB=s(hl);zhe=n(oB,"STRONG",{});var S5t=s(zhe);U7o=r(S5t,"funnel"),S5t.forEach(t),H7o=r(oB," \u2014 "),bO=n(oB,"A",{href:!0});var R5t=s(bO);J7o=r(R5t,"FunnelModel"),R5t.forEach(t),Y7o=r(oB," or "),vO=n(oB,"A",{href:!0});var P5t=s(vO);K7o=r(P5t,"FunnelBaseModel"),P5t.forEach(t),Z7o=r(oB," (Funnel Transformer model)"),oB.forEach(t),eyo=i(x),T_=n(x,"LI",{});var cBe=s(T_);Qhe=n(cBe,"STRONG",{});var B5t=s(Qhe);oyo=r(B5t,"glpn"),B5t.forEach(t),ryo=r(cBe," \u2014 "),FO=n(cBe,"A",{href:!0});var I5t=s(FO);tyo=r(I5t,"GLPNModel"),I5t.forEach(t),ayo=r(cBe," (GLPN model)"),cBe.forEach(t),nyo=i(x),M_=n(x,"LI",{});var mBe=s(M_);Whe=n(mBe,"STRONG",{});var N5t=s(Whe);syo=r(N5t,"gpt2"),N5t.forEach(t),lyo=r(mBe," \u2014 "),TO=n(mBe,"A",{href:!0});var q5t=s(TO);iyo=r(q5t,"GPT2Model"),q5t.forEach(t),dyo=r(mBe," (OpenAI GPT-2 model)"),mBe.forEach(t),cyo=i(x),E_=n(x,"LI",{});var fBe=s(E_);Uhe=n(fBe,"STRONG",{});var j5t=s(Uhe);myo=r(j5t,"gpt_neo"),j5t.forEach(t),fyo=r(fBe," \u2014 "),MO=n(fBe,"A",{href:!0});var D5t=s(MO);gyo=r(D5t,"GPTNeoModel"),D5t.forEach(t),hyo=r(fBe," (GPT Neo model)"),fBe.forEach(t),uyo=i(x),C_=n(x,"LI",{});var gBe=s(C_);Hhe=n(gBe,"STRONG",{});var G5t=s(Hhe);pyo=r(G5t,"gpt_neox"),G5t.forEach(t),_yo=r(gBe," \u2014 "),EO=n(gBe,"A",{href:!0});var O5t=s(EO);byo=r(O5t,"GPTNeoXModel"),O5t.forEach(t),vyo=r(gBe," (GPT NeoX model)"),gBe.forEach(t),Fyo=i(x),w_=n(x,"LI",{});var hBe=s(w_);Jhe=n(hBe,"STRONG",{});var V5t=s(Jhe);Tyo=r(V5t,"gptj"),V5t.forEach(t),Myo=r(hBe," \u2014 "),CO=n(hBe,"A",{href:!0});var X5t=s(CO);Eyo=r(X5t,"GPTJModel"),X5t.forEach(t),Cyo=r(hBe," (GPT-J model)"),hBe.forEach(t),wyo=i(x),A_=n(x,"LI",{});var uBe=s(A_);Yhe=n(uBe,"STRONG",{});var z5t=s(Yhe);Ayo=r(z5t,"groupvit"),z5t.forEach(t),yyo=r(uBe," \u2014 "),wO=n(uBe,"A",{href:!0});var Q5t=s(wO);Lyo=r(Q5t,"GroupViTModel"),Q5t.forEach(t),xyo=r(uBe," (GroupViT model)"),uBe.forEach(t),$yo=i(x),y_=n(x,"LI",{});var pBe=s(y_);Khe=n(pBe,"STRONG",{});var W5t=s(Khe);kyo=r(W5t,"hubert"),W5t.forEach(t),Syo=r(pBe," \u2014 "),AO=n(pBe,"A",{href:!0});var U5t=s(AO);Ryo=r(U5t,"HubertModel"),U5t.forEach(t),Pyo=r(pBe," (Hubert model)"),pBe.forEach(t),Byo=i(x),L_=n(x,"LI",{});var _Be=s(L_);Zhe=n(_Be,"STRONG",{});var H5t=s(Zhe);Iyo=r(H5t,"ibert"),H5t.forEach(t),Nyo=r(_Be," \u2014 "),yO=n(_Be,"A",{href:!0});var J5t=s(yO);qyo=r(J5t,"IBertModel"),J5t.forEach(t),jyo=r(_Be," (I-BERT model)"),_Be.forEach(t),Dyo=i(x),x_=n(x,"LI",{});var bBe=s(x_);eue=n(bBe,"STRONG",{});var Y5t=s(eue);Gyo=r(Y5t,"imagegpt"),Y5t.forEach(t),Oyo=r(bBe," \u2014 "),LO=n(bBe,"A",{href:!0});var K5t=s(LO);Vyo=r(K5t,"ImageGPTModel"),K5t.forEach(t),Xyo=r(bBe," (ImageGPT model)"),bBe.forEach(t),zyo=i(x),$_=n(x,"LI",{});var vBe=s($_);oue=n(vBe,"STRONG",{});var Z5t=s(oue);Qyo=r(Z5t,"layoutlm"),Z5t.forEach(t),Wyo=r(vBe," \u2014 "),xO=n(vBe,"A",{href:!0});var e0t=s(xO);Uyo=r(e0t,"LayoutLMModel"),e0t.forEach(t),Hyo=r(vBe," (LayoutLM model)"),vBe.forEach(t),Jyo=i(x),k_=n(x,"LI",{});var FBe=s(k_);rue=n(FBe,"STRONG",{});var o0t=s(rue);Yyo=r(o0t,"layoutlmv2"),o0t.forEach(t),Kyo=r(FBe," \u2014 "),$O=n(FBe,"A",{href:!0});var r0t=s($O);Zyo=r(r0t,"LayoutLMv2Model"),r0t.forEach(t),eLo=r(FBe," (LayoutLMv2 model)"),FBe.forEach(t),oLo=i(x),S_=n(x,"LI",{});var TBe=s(S_);tue=n(TBe,"STRONG",{});var t0t=s(tue);rLo=r(t0t,"layoutlmv3"),t0t.forEach(t),tLo=r(TBe," \u2014 "),kO=n(TBe,"A",{href:!0});var a0t=s(kO);aLo=r(a0t,"LayoutLMv3Model"),a0t.forEach(t),nLo=r(TBe," (LayoutLMv3 model)"),TBe.forEach(t),sLo=i(x),R_=n(x,"LI",{});var MBe=s(R_);aue=n(MBe,"STRONG",{});var n0t=s(aue);lLo=r(n0t,"led"),n0t.forEach(t),iLo=r(MBe," \u2014 "),SO=n(MBe,"A",{href:!0});var s0t=s(SO);dLo=r(s0t,"LEDModel"),s0t.forEach(t),cLo=r(MBe," (LED model)"),MBe.forEach(t),mLo=i(x),P_=n(x,"LI",{});var EBe=s(P_);nue=n(EBe,"STRONG",{});var l0t=s(nue);fLo=r(l0t,"levit"),l0t.forEach(t),gLo=r(EBe," \u2014 "),RO=n(EBe,"A",{href:!0});var i0t=s(RO);hLo=r(i0t,"LevitModel"),i0t.forEach(t),uLo=r(EBe," (LeViT model)"),EBe.forEach(t),pLo=i(x),B_=n(x,"LI",{});var CBe=s(B_);sue=n(CBe,"STRONG",{});var d0t=s(sue);_Lo=r(d0t,"longformer"),d0t.forEach(t),bLo=r(CBe," \u2014 "),PO=n(CBe,"A",{href:!0});var c0t=s(PO);vLo=r(c0t,"LongformerModel"),c0t.forEach(t),FLo=r(CBe," (Longformer model)"),CBe.forEach(t),TLo=i(x),I_=n(x,"LI",{});var wBe=s(I_);lue=n(wBe,"STRONG",{});var m0t=s(lue);MLo=r(m0t,"longt5"),m0t.forEach(t),ELo=r(wBe," \u2014 "),BO=n(wBe,"A",{href:!0});var f0t=s(BO);CLo=r(f0t,"LongT5Model"),f0t.forEach(t),wLo=r(wBe," (LongT5 model)"),wBe.forEach(t),ALo=i(x),N_=n(x,"LI",{});var ABe=s(N_);iue=n(ABe,"STRONG",{});var g0t=s(iue);yLo=r(g0t,"luke"),g0t.forEach(t),LLo=r(ABe," \u2014 "),IO=n(ABe,"A",{href:!0});var h0t=s(IO);xLo=r(h0t,"LukeModel"),h0t.forEach(t),$Lo=r(ABe," (LUKE model)"),ABe.forEach(t),kLo=i(x),q_=n(x,"LI",{});var yBe=s(q_);due=n(yBe,"STRONG",{});var u0t=s(due);SLo=r(u0t,"lxmert"),u0t.forEach(t),RLo=r(yBe," \u2014 "),NO=n(yBe,"A",{href:!0});var p0t=s(NO);PLo=r(p0t,"LxmertModel"),p0t.forEach(t),BLo=r(yBe," (LXMERT model)"),yBe.forEach(t),ILo=i(x),j_=n(x,"LI",{});var LBe=s(j_);cue=n(LBe,"STRONG",{});var _0t=s(cue);NLo=r(_0t,"m2m_100"),_0t.forEach(t),qLo=r(LBe," \u2014 "),qO=n(LBe,"A",{href:!0});var b0t=s(qO);jLo=r(b0t,"M2M100Model"),b0t.forEach(t),DLo=r(LBe," (M2M100 model)"),LBe.forEach(t),GLo=i(x),D_=n(x,"LI",{});var xBe=s(D_);mue=n(xBe,"STRONG",{});var v0t=s(mue);OLo=r(v0t,"marian"),v0t.forEach(t),VLo=r(xBe," \u2014 "),jO=n(xBe,"A",{href:!0});var F0t=s(jO);XLo=r(F0t,"MarianModel"),F0t.forEach(t),zLo=r(xBe," (Marian model)"),xBe.forEach(t),QLo=i(x),G_=n(x,"LI",{});var $Be=s(G_);fue=n($Be,"STRONG",{});var T0t=s(fue);WLo=r(T0t,"maskformer"),T0t.forEach(t),ULo=r($Be," \u2014 "),DO=n($Be,"A",{href:!0});var M0t=s(DO);HLo=r(M0t,"MaskFormerModel"),M0t.forEach(t),JLo=r($Be," (MaskFormer model)"),$Be.forEach(t),YLo=i(x),O_=n(x,"LI",{});var kBe=s(O_);gue=n(kBe,"STRONG",{});var E0t=s(gue);KLo=r(E0t,"mbart"),E0t.forEach(t),ZLo=r(kBe," \u2014 "),GO=n(kBe,"A",{href:!0});var C0t=s(GO);e8o=r(C0t,"MBartModel"),C0t.forEach(t),o8o=r(kBe," (mBART model)"),kBe.forEach(t),r8o=i(x),V_=n(x,"LI",{});var SBe=s(V_);hue=n(SBe,"STRONG",{});var w0t=s(hue);t8o=r(w0t,"mctct"),w0t.forEach(t),a8o=r(SBe," \u2014 "),OO=n(SBe,"A",{href:!0});var A0t=s(OO);n8o=r(A0t,"MCTCTModel"),A0t.forEach(t),s8o=r(SBe," (M-CTC-T model)"),SBe.forEach(t),l8o=i(x),X_=n(x,"LI",{});var RBe=s(X_);uue=n(RBe,"STRONG",{});var y0t=s(uue);i8o=r(y0t,"megatron-bert"),y0t.forEach(t),d8o=r(RBe," \u2014 "),VO=n(RBe,"A",{href:!0});var L0t=s(VO);c8o=r(L0t,"MegatronBertModel"),L0t.forEach(t),m8o=r(RBe," (Megatron-BERT model)"),RBe.forEach(t),f8o=i(x),z_=n(x,"LI",{});var PBe=s(z_);pue=n(PBe,"STRONG",{});var x0t=s(pue);g8o=r(x0t,"mobilebert"),x0t.forEach(t),h8o=r(PBe," \u2014 "),XO=n(PBe,"A",{href:!0});var $0t=s(XO);u8o=r($0t,"MobileBertModel"),$0t.forEach(t),p8o=r(PBe," (MobileBERT model)"),PBe.forEach(t),_8o=i(x),Q_=n(x,"LI",{});var BBe=s(Q_);_ue=n(BBe,"STRONG",{});var k0t=s(_ue);b8o=r(k0t,"mobilevit"),k0t.forEach(t),v8o=r(BBe," \u2014 "),zO=n(BBe,"A",{href:!0});var S0t=s(zO);F8o=r(S0t,"MobileViTModel"),S0t.forEach(t),T8o=r(BBe," (MobileViT model)"),BBe.forEach(t),M8o=i(x),W_=n(x,"LI",{});var IBe=s(W_);bue=n(IBe,"STRONG",{});var R0t=s(bue);E8o=r(R0t,"mpnet"),R0t.forEach(t),C8o=r(IBe," \u2014 "),QO=n(IBe,"A",{href:!0});var P0t=s(QO);w8o=r(P0t,"MPNetModel"),P0t.forEach(t),A8o=r(IBe," (MPNet model)"),IBe.forEach(t),y8o=i(x),U_=n(x,"LI",{});var NBe=s(U_);vue=n(NBe,"STRONG",{});var B0t=s(vue);L8o=r(B0t,"mt5"),B0t.forEach(t),x8o=r(NBe," \u2014 "),WO=n(NBe,"A",{href:!0});var I0t=s(WO);$8o=r(I0t,"MT5Model"),I0t.forEach(t),k8o=r(NBe," (MT5 model)"),NBe.forEach(t),S8o=i(x),H_=n(x,"LI",{});var qBe=s(H_);Fue=n(qBe,"STRONG",{});var N0t=s(Fue);R8o=r(N0t,"mvp"),N0t.forEach(t),P8o=r(qBe," \u2014 "),UO=n(qBe,"A",{href:!0});var q0t=s(UO);B8o=r(q0t,"MvpModel"),q0t.forEach(t),I8o=r(qBe," (MVP model)"),qBe.forEach(t),N8o=i(x),J_=n(x,"LI",{});var jBe=s(J_);Tue=n(jBe,"STRONG",{});var j0t=s(Tue);q8o=r(j0t,"nezha"),j0t.forEach(t),j8o=r(jBe," \u2014 "),HO=n(jBe,"A",{href:!0});var D0t=s(HO);D8o=r(D0t,"NezhaModel"),D0t.forEach(t),G8o=r(jBe," (Nezha model)"),jBe.forEach(t),O8o=i(x),Y_=n(x,"LI",{});var DBe=s(Y_);Mue=n(DBe,"STRONG",{});var G0t=s(Mue);V8o=r(G0t,"nllb"),G0t.forEach(t),X8o=r(DBe," \u2014 "),JO=n(DBe,"A",{href:!0});var O0t=s(JO);z8o=r(O0t,"M2M100Model"),O0t.forEach(t),Q8o=r(DBe," (NLLB model)"),DBe.forEach(t),W8o=i(x),K_=n(x,"LI",{});var GBe=s(K_);Eue=n(GBe,"STRONG",{});var V0t=s(Eue);U8o=r(V0t,"nystromformer"),V0t.forEach(t),H8o=r(GBe," \u2014 "),YO=n(GBe,"A",{href:!0});var X0t=s(YO);J8o=r(X0t,"NystromformerModel"),X0t.forEach(t),Y8o=r(GBe," (Nystr\xF6mformer model)"),GBe.forEach(t),K8o=i(x),Z_=n(x,"LI",{});var OBe=s(Z_);Cue=n(OBe,"STRONG",{});var z0t=s(Cue);Z8o=r(z0t,"openai-gpt"),z0t.forEach(t),e9o=r(OBe," \u2014 "),KO=n(OBe,"A",{href:!0});var Q0t=s(KO);o9o=r(Q0t,"OpenAIGPTModel"),Q0t.forEach(t),r9o=r(OBe," (OpenAI GPT model)"),OBe.forEach(t),t9o=i(x),eb=n(x,"LI",{});var VBe=s(eb);wue=n(VBe,"STRONG",{});var W0t=s(wue);a9o=r(W0t,"opt"),W0t.forEach(t),n9o=r(VBe," \u2014 "),ZO=n(VBe,"A",{href:!0});var U0t=s(ZO);s9o=r(U0t,"OPTModel"),U0t.forEach(t),l9o=r(VBe," (OPT model)"),VBe.forEach(t),i9o=i(x),ob=n(x,"LI",{});var XBe=s(ob);Aue=n(XBe,"STRONG",{});var H0t=s(Aue);d9o=r(H0t,"owlvit"),H0t.forEach(t),c9o=r(XBe," \u2014 "),eV=n(XBe,"A",{href:!0});var J0t=s(eV);m9o=r(J0t,"OwlViTModel"),J0t.forEach(t),f9o=r(XBe," (OWL-ViT model)"),XBe.forEach(t),g9o=i(x),rb=n(x,"LI",{});var zBe=s(rb);yue=n(zBe,"STRONG",{});var Y0t=s(yue);h9o=r(Y0t,"pegasus"),Y0t.forEach(t),u9o=r(zBe," \u2014 "),oV=n(zBe,"A",{href:!0});var K0t=s(oV);p9o=r(K0t,"PegasusModel"),K0t.forEach(t),_9o=r(zBe," (Pegasus model)"),zBe.forEach(t),b9o=i(x),tb=n(x,"LI",{});var QBe=s(tb);Lue=n(QBe,"STRONG",{});var Z0t=s(Lue);v9o=r(Z0t,"pegasus_x"),Z0t.forEach(t),F9o=r(QBe," \u2014 "),rV=n(QBe,"A",{href:!0});var ewt=s(rV);T9o=r(ewt,"PegasusXModel"),ewt.forEach(t),M9o=r(QBe," (PEGASUS-X model)"),QBe.forEach(t),E9o=i(x),ab=n(x,"LI",{});var WBe=s(ab);xue=n(WBe,"STRONG",{});var owt=s(xue);C9o=r(owt,"perceiver"),owt.forEach(t),w9o=r(WBe," \u2014 "),tV=n(WBe,"A",{href:!0});var rwt=s(tV);A9o=r(rwt,"PerceiverModel"),rwt.forEach(t),y9o=r(WBe," (Perceiver model)"),WBe.forEach(t),L9o=i(x),nb=n(x,"LI",{});var UBe=s(nb);$ue=n(UBe,"STRONG",{});var twt=s($ue);x9o=r(twt,"plbart"),twt.forEach(t),$9o=r(UBe," \u2014 "),aV=n(UBe,"A",{href:!0});var awt=s(aV);k9o=r(awt,"PLBartModel"),awt.forEach(t),S9o=r(UBe," (PLBart model)"),UBe.forEach(t),R9o=i(x),sb=n(x,"LI",{});var HBe=s(sb);kue=n(HBe,"STRONG",{});var nwt=s(kue);P9o=r(nwt,"poolformer"),nwt.forEach(t),B9o=r(HBe," \u2014 "),nV=n(HBe,"A",{href:!0});var swt=s(nV);I9o=r(swt,"PoolFormerModel"),swt.forEach(t),N9o=r(HBe," (PoolFormer model)"),HBe.forEach(t),q9o=i(x),lb=n(x,"LI",{});var JBe=s(lb);Sue=n(JBe,"STRONG",{});var lwt=s(Sue);j9o=r(lwt,"prophetnet"),lwt.forEach(t),D9o=r(JBe," \u2014 "),sV=n(JBe,"A",{href:!0});var iwt=s(sV);G9o=r(iwt,"ProphetNetModel"),iwt.forEach(t),O9o=r(JBe," (ProphetNet model)"),JBe.forEach(t),V9o=i(x),ib=n(x,"LI",{});var YBe=s(ib);Rue=n(YBe,"STRONG",{});var dwt=s(Rue);X9o=r(dwt,"qdqbert"),dwt.forEach(t),z9o=r(YBe," \u2014 "),lV=n(YBe,"A",{href:!0});var cwt=s(lV);Q9o=r(cwt,"QDQBertModel"),cwt.forEach(t),W9o=r(YBe," (QDQBert model)"),YBe.forEach(t),U9o=i(x),db=n(x,"LI",{});var KBe=s(db);Pue=n(KBe,"STRONG",{});var mwt=s(Pue);H9o=r(mwt,"reformer"),mwt.forEach(t),J9o=r(KBe," \u2014 "),iV=n(KBe,"A",{href:!0});var fwt=s(iV);Y9o=r(fwt,"ReformerModel"),fwt.forEach(t),K9o=r(KBe," (Reformer model)"),KBe.forEach(t),Z9o=i(x),cb=n(x,"LI",{});var ZBe=s(cb);Bue=n(ZBe,"STRONG",{});var gwt=s(Bue);exo=r(gwt,"regnet"),gwt.forEach(t),oxo=r(ZBe," \u2014 "),dV=n(ZBe,"A",{href:!0});var hwt=s(dV);rxo=r(hwt,"RegNetModel"),hwt.forEach(t),txo=r(ZBe," (RegNet model)"),ZBe.forEach(t),axo=i(x),mb=n(x,"LI",{});var eIe=s(mb);Iue=n(eIe,"STRONG",{});var uwt=s(Iue);nxo=r(uwt,"rembert"),uwt.forEach(t),sxo=r(eIe," \u2014 "),cV=n(eIe,"A",{href:!0});var pwt=s(cV);lxo=r(pwt,"RemBertModel"),pwt.forEach(t),ixo=r(eIe," (RemBERT model)"),eIe.forEach(t),dxo=i(x),fb=n(x,"LI",{});var oIe=s(fb);Nue=n(oIe,"STRONG",{});var _wt=s(Nue);cxo=r(_wt,"resnet"),_wt.forEach(t),mxo=r(oIe," \u2014 "),mV=n(oIe,"A",{href:!0});var bwt=s(mV);fxo=r(bwt,"ResNetModel"),bwt.forEach(t),gxo=r(oIe," (ResNet model)"),oIe.forEach(t),hxo=i(x),gb=n(x,"LI",{});var rIe=s(gb);que=n(rIe,"STRONG",{});var vwt=s(que);uxo=r(vwt,"retribert"),vwt.forEach(t),pxo=r(rIe," \u2014 "),fV=n(rIe,"A",{href:!0});var Fwt=s(fV);_xo=r(Fwt,"RetriBertModel"),Fwt.forEach(t),bxo=r(rIe," (RetriBERT model)"),rIe.forEach(t),vxo=i(x),hb=n(x,"LI",{});var tIe=s(hb);jue=n(tIe,"STRONG",{});var Twt=s(jue);Fxo=r(Twt,"roberta"),Twt.forEach(t),Txo=r(tIe," \u2014 "),gV=n(tIe,"A",{href:!0});var Mwt=s(gV);Mxo=r(Mwt,"RobertaModel"),Mwt.forEach(t),Exo=r(tIe," (RoBERTa model)"),tIe.forEach(t),Cxo=i(x),ub=n(x,"LI",{});var aIe=s(ub);Due=n(aIe,"STRONG",{});var Ewt=s(Due);wxo=r(Ewt,"roformer"),Ewt.forEach(t),Axo=r(aIe," \u2014 "),hV=n(aIe,"A",{href:!0});var Cwt=s(hV);yxo=r(Cwt,"RoFormerModel"),Cwt.forEach(t),Lxo=r(aIe," (RoFormer model)"),aIe.forEach(t),xxo=i(x),pb=n(x,"LI",{});var nIe=s(pb);Gue=n(nIe,"STRONG",{});var wwt=s(Gue);$xo=r(wwt,"segformer"),wwt.forEach(t),kxo=r(nIe," \u2014 "),uV=n(nIe,"A",{href:!0});var Awt=s(uV);Sxo=r(Awt,"SegformerModel"),Awt.forEach(t),Rxo=r(nIe," (SegFormer model)"),nIe.forEach(t),Pxo=i(x),_b=n(x,"LI",{});var sIe=s(_b);Oue=n(sIe,"STRONG",{});var ywt=s(Oue);Bxo=r(ywt,"sew"),ywt.forEach(t),Ixo=r(sIe," \u2014 "),pV=n(sIe,"A",{href:!0});var Lwt=s(pV);Nxo=r(Lwt,"SEWModel"),Lwt.forEach(t),qxo=r(sIe," (SEW model)"),sIe.forEach(t),jxo=i(x),bb=n(x,"LI",{});var lIe=s(bb);Vue=n(lIe,"STRONG",{});var xwt=s(Vue);Dxo=r(xwt,"sew-d"),xwt.forEach(t),Gxo=r(lIe," \u2014 "),_V=n(lIe,"A",{href:!0});var $wt=s(_V);Oxo=r($wt,"SEWDModel"),$wt.forEach(t),Vxo=r(lIe," (SEW-D model)"),lIe.forEach(t),Xxo=i(x),vb=n(x,"LI",{});var iIe=s(vb);Xue=n(iIe,"STRONG",{});var kwt=s(Xue);zxo=r(kwt,"speech_to_text"),kwt.forEach(t),Qxo=r(iIe," \u2014 "),bV=n(iIe,"A",{href:!0});var Swt=s(bV);Wxo=r(Swt,"Speech2TextModel"),Swt.forEach(t),Uxo=r(iIe," (Speech2Text model)"),iIe.forEach(t),Hxo=i(x),Fb=n(x,"LI",{});var dIe=s(Fb);zue=n(dIe,"STRONG",{});var Rwt=s(zue);Jxo=r(Rwt,"splinter"),Rwt.forEach(t),Yxo=r(dIe," \u2014 "),vV=n(dIe,"A",{href:!0});var Pwt=s(vV);Kxo=r(Pwt,"SplinterModel"),Pwt.forEach(t),Zxo=r(dIe," (Splinter model)"),dIe.forEach(t),e$o=i(x),Tb=n(x,"LI",{});var cIe=s(Tb);Que=n(cIe,"STRONG",{});var Bwt=s(Que);o$o=r(Bwt,"squeezebert"),Bwt.forEach(t),r$o=r(cIe," \u2014 "),FV=n(cIe,"A",{href:!0});var Iwt=s(FV);t$o=r(Iwt,"SqueezeBertModel"),Iwt.forEach(t),a$o=r(cIe," (SqueezeBERT model)"),cIe.forEach(t),n$o=i(x),Mb=n(x,"LI",{});var mIe=s(Mb);Wue=n(mIe,"STRONG",{});var Nwt=s(Wue);s$o=r(Nwt,"swin"),Nwt.forEach(t),l$o=r(mIe," \u2014 "),TV=n(mIe,"A",{href:!0});var qwt=s(TV);i$o=r(qwt,"SwinModel"),qwt.forEach(t),d$o=r(mIe," (Swin Transformer model)"),mIe.forEach(t),c$o=i(x),Eb=n(x,"LI",{});var fIe=s(Eb);Uue=n(fIe,"STRONG",{});var jwt=s(Uue);m$o=r(jwt,"swinv2"),jwt.forEach(t),f$o=r(fIe," \u2014 "),MV=n(fIe,"A",{href:!0});var Dwt=s(MV);g$o=r(Dwt,"Swinv2Model"),Dwt.forEach(t),h$o=r(fIe," (Swin Transformer V2 model)"),fIe.forEach(t),u$o=i(x),Cb=n(x,"LI",{});var gIe=s(Cb);Hue=n(gIe,"STRONG",{});var Gwt=s(Hue);p$o=r(Gwt,"t5"),Gwt.forEach(t),_$o=r(gIe," \u2014 "),EV=n(gIe,"A",{href:!0});var Owt=s(EV);b$o=r(Owt,"T5Model"),Owt.forEach(t),v$o=r(gIe," (T5 model)"),gIe.forEach(t),F$o=i(x),wb=n(x,"LI",{});var hIe=s(wb);Jue=n(hIe,"STRONG",{});var Vwt=s(Jue);T$o=r(Vwt,"tapas"),Vwt.forEach(t),M$o=r(hIe," \u2014 "),CV=n(hIe,"A",{href:!0});var Xwt=s(CV);E$o=r(Xwt,"TapasModel"),Xwt.forEach(t),C$o=r(hIe," (TAPAS model)"),hIe.forEach(t),w$o=i(x),Ab=n(x,"LI",{});var uIe=s(Ab);Yue=n(uIe,"STRONG",{});var zwt=s(Yue);A$o=r(zwt,"trajectory_transformer"),zwt.forEach(t),y$o=r(uIe," \u2014 "),wV=n(uIe,"A",{href:!0});var Qwt=s(wV);L$o=r(Qwt,"TrajectoryTransformerModel"),Qwt.forEach(t),x$o=r(uIe," (Trajectory Transformer model)"),uIe.forEach(t),$$o=i(x),yb=n(x,"LI",{});var pIe=s(yb);Kue=n(pIe,"STRONG",{});var Wwt=s(Kue);k$o=r(Wwt,"transfo-xl"),Wwt.forEach(t),S$o=r(pIe," \u2014 "),AV=n(pIe,"A",{href:!0});var Uwt=s(AV);R$o=r(Uwt,"TransfoXLModel"),Uwt.forEach(t),P$o=r(pIe," (Transformer-XL model)"),pIe.forEach(t),B$o=i(x),Lb=n(x,"LI",{});var _Ie=s(Lb);Zue=n(_Ie,"STRONG",{});var Hwt=s(Zue);I$o=r(Hwt,"unispeech"),Hwt.forEach(t),N$o=r(_Ie," \u2014 "),yV=n(_Ie,"A",{href:!0});var Jwt=s(yV);q$o=r(Jwt,"UniSpeechModel"),Jwt.forEach(t),j$o=r(_Ie," (UniSpeech model)"),_Ie.forEach(t),D$o=i(x),xb=n(x,"LI",{});var bIe=s(xb);epe=n(bIe,"STRONG",{});var Ywt=s(epe);G$o=r(Ywt,"unispeech-sat"),Ywt.forEach(t),O$o=r(bIe," \u2014 "),LV=n(bIe,"A",{href:!0});var Kwt=s(LV);V$o=r(Kwt,"UniSpeechSatModel"),Kwt.forEach(t),X$o=r(bIe," (UniSpeechSat model)"),bIe.forEach(t),z$o=i(x),$b=n(x,"LI",{});var vIe=s($b);ope=n(vIe,"STRONG",{});var Zwt=s(ope);Q$o=r(Zwt,"van"),Zwt.forEach(t),W$o=r(vIe," \u2014 "),xV=n(vIe,"A",{href:!0});var eAt=s(xV);U$o=r(eAt,"VanModel"),eAt.forEach(t),H$o=r(vIe," (VAN model)"),vIe.forEach(t),J$o=i(x),kb=n(x,"LI",{});var FIe=s(kb);rpe=n(FIe,"STRONG",{});var oAt=s(rpe);Y$o=r(oAt,"videomae"),oAt.forEach(t),K$o=r(FIe," \u2014 "),$V=n(FIe,"A",{href:!0});var rAt=s($V);Z$o=r(rAt,"VideoMAEModel"),rAt.forEach(t),eko=r(FIe," (VideoMAE model)"),FIe.forEach(t),oko=i(x),Sb=n(x,"LI",{});var TIe=s(Sb);tpe=n(TIe,"STRONG",{});var tAt=s(tpe);rko=r(tAt,"vilt"),tAt.forEach(t),tko=r(TIe," \u2014 "),kV=n(TIe,"A",{href:!0});var aAt=s(kV);ako=r(aAt,"ViltModel"),aAt.forEach(t),nko=r(TIe," (ViLT model)"),TIe.forEach(t),sko=i(x),Rb=n(x,"LI",{});var MIe=s(Rb);ape=n(MIe,"STRONG",{});var nAt=s(ape);lko=r(nAt,"vision-text-dual-encoder"),nAt.forEach(t),iko=r(MIe," \u2014 "),SV=n(MIe,"A",{href:!0});var sAt=s(SV);dko=r(sAt,"VisionTextDualEncoderModel"),sAt.forEach(t),cko=r(MIe," (VisionTextDualEncoder model)"),MIe.forEach(t),mko=i(x),Pb=n(x,"LI",{});var EIe=s(Pb);npe=n(EIe,"STRONG",{});var lAt=s(npe);fko=r(lAt,"visual_bert"),lAt.forEach(t),gko=r(EIe," \u2014 "),RV=n(EIe,"A",{href:!0});var iAt=s(RV);hko=r(iAt,"VisualBertModel"),iAt.forEach(t),uko=r(EIe," (VisualBERT model)"),EIe.forEach(t),pko=i(x),Bb=n(x,"LI",{});var CIe=s(Bb);spe=n(CIe,"STRONG",{});var dAt=s(spe);_ko=r(dAt,"vit"),dAt.forEach(t),bko=r(CIe," \u2014 "),PV=n(CIe,"A",{href:!0});var cAt=s(PV);vko=r(cAt,"ViTModel"),cAt.forEach(t),Fko=r(CIe," (ViT model)"),CIe.forEach(t),Tko=i(x),Ib=n(x,"LI",{});var wIe=s(Ib);lpe=n(wIe,"STRONG",{});var mAt=s(lpe);Mko=r(mAt,"vit_mae"),mAt.forEach(t),Eko=r(wIe," \u2014 "),BV=n(wIe,"A",{href:!0});var fAt=s(BV);Cko=r(fAt,"ViTMAEModel"),fAt.forEach(t),wko=r(wIe," (ViTMAE model)"),wIe.forEach(t),Ako=i(x),Nb=n(x,"LI",{});var AIe=s(Nb);ipe=n(AIe,"STRONG",{});var gAt=s(ipe);yko=r(gAt,"wav2vec2"),gAt.forEach(t),Lko=r(AIe," \u2014 "),IV=n(AIe,"A",{href:!0});var hAt=s(IV);xko=r(hAt,"Wav2Vec2Model"),hAt.forEach(t),$ko=r(AIe," (Wav2Vec2 model)"),AIe.forEach(t),kko=i(x),qb=n(x,"LI",{});var yIe=s(qb);dpe=n(yIe,"STRONG",{});var uAt=s(dpe);Sko=r(uAt,"wav2vec2-conformer"),uAt.forEach(t),Rko=r(yIe," \u2014 "),NV=n(yIe,"A",{href:!0});var pAt=s(NV);Pko=r(pAt,"Wav2Vec2ConformerModel"),pAt.forEach(t),Bko=r(yIe," (Wav2Vec2-Conformer model)"),yIe.forEach(t),Iko=i(x),jb=n(x,"LI",{});var LIe=s(jb);cpe=n(LIe,"STRONG",{});var _At=s(cpe);Nko=r(_At,"wavlm"),_At.forEach(t),qko=r(LIe," \u2014 "),qV=n(LIe,"A",{href:!0});var bAt=s(qV);jko=r(bAt,"WavLMModel"),bAt.forEach(t),Dko=r(LIe," (WavLM model)"),LIe.forEach(t),Gko=i(x),Db=n(x,"LI",{});var xIe=s(Db);mpe=n(xIe,"STRONG",{});var vAt=s(mpe);Oko=r(vAt,"xglm"),vAt.forEach(t),Vko=r(xIe," \u2014 "),jV=n(xIe,"A",{href:!0});var FAt=s(jV);Xko=r(FAt,"XGLMModel"),FAt.forEach(t),zko=r(xIe," (XGLM model)"),xIe.forEach(t),Qko=i(x),Gb=n(x,"LI",{});var $Ie=s(Gb);fpe=n($Ie,"STRONG",{});var TAt=s(fpe);Wko=r(TAt,"xlm"),TAt.forEach(t),Uko=r($Ie," \u2014 "),DV=n($Ie,"A",{href:!0});var MAt=s(DV);Hko=r(MAt,"XLMModel"),MAt.forEach(t),Jko=r($Ie," (XLM model)"),$Ie.forEach(t),Yko=i(x),Ob=n(x,"LI",{});var kIe=s(Ob);gpe=n(kIe,"STRONG",{});var EAt=s(gpe);Kko=r(EAt,"xlm-prophetnet"),EAt.forEach(t),Zko=r(kIe," \u2014 "),GV=n(kIe,"A",{href:!0});var CAt=s(GV);eSo=r(CAt,"XLMProphetNetModel"),CAt.forEach(t),oSo=r(kIe," (XLM-ProphetNet model)"),kIe.forEach(t),rSo=i(x),Vb=n(x,"LI",{});var SIe=s(Vb);hpe=n(SIe,"STRONG",{});var wAt=s(hpe);tSo=r(wAt,"xlm-roberta"),wAt.forEach(t),aSo=r(SIe," \u2014 "),OV=n(SIe,"A",{href:!0});var AAt=s(OV);nSo=r(AAt,"XLMRobertaModel"),AAt.forEach(t),sSo=r(SIe," (XLM-RoBERTa model)"),SIe.forEach(t),lSo=i(x),Xb=n(x,"LI",{});var RIe=s(Xb);upe=n(RIe,"STRONG",{});var yAt=s(upe);iSo=r(yAt,"xlm-roberta-xl"),yAt.forEach(t),dSo=r(RIe," \u2014 "),VV=n(RIe,"A",{href:!0});var LAt=s(VV);cSo=r(LAt,"XLMRobertaXLModel"),LAt.forEach(t),mSo=r(RIe," (XLM-RoBERTa-XL model)"),RIe.forEach(t),fSo=i(x),zb=n(x,"LI",{});var PIe=s(zb);ppe=n(PIe,"STRONG",{});var xAt=s(ppe);gSo=r(xAt,"xlnet"),xAt.forEach(t),hSo=r(PIe," \u2014 "),XV=n(PIe,"A",{href:!0});var $At=s(XV);uSo=r($At,"XLNetModel"),$At.forEach(t),pSo=r(PIe," (XLNet model)"),PIe.forEach(t),_So=i(x),Qb=n(x,"LI",{});var BIe=s(Qb);_pe=n(BIe,"STRONG",{});var kAt=s(_pe);bSo=r(kAt,"yolos"),kAt.forEach(t),vSo=r(BIe," \u2014 "),zV=n(BIe,"A",{href:!0});var SAt=s(zV);FSo=r(SAt,"YolosModel"),SAt.forEach(t),TSo=r(BIe," (YOLOS model)"),BIe.forEach(t),MSo=i(x),Wb=n(x,"LI",{});var IIe=s(Wb);bpe=n(IIe,"STRONG",{});var RAt=s(bpe);ESo=r(RAt,"yoso"),RAt.forEach(t),CSo=r(IIe," \u2014 "),QV=n(IIe,"A",{href:!0});var PAt=s(QV);wSo=r(PAt,"YosoModel"),PAt.forEach(t),ASo=r(IIe," (YOSO model)"),IIe.forEach(t),x.forEach(t),ySo=i(va),Ub=n(va,"P",{});var NIe=s(Ub);LSo=r(NIe,"The model is set in evaluation mode by default using "),vpe=n(NIe,"CODE",{});var BAt=s(vpe);xSo=r(BAt,"model.eval()"),BAt.forEach(t),$So=r(NIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=n(NIe,"CODE",{});var IAt=s(Fpe);kSo=r(IAt,"model.train()"),IAt.forEach(t),NIe.forEach(t),SSo=i(va),T(Hb.$$.fragment,va),va.forEach(t),El.forEach(t),PJe=i(m),_d=n(m,"H2",{class:!0});var UKe=s(_d);Jb=n(UKe,"A",{id:!0,class:!0,href:!0});var NAt=s(Jb);Tpe=n(NAt,"SPAN",{});var qAt=s(Tpe);T(q9.$$.fragment,qAt),qAt.forEach(t),NAt.forEach(t),RSo=i(UKe),Mpe=n(UKe,"SPAN",{});var jAt=s(Mpe);PSo=r(jAt,"AutoModelForPreTraining"),jAt.forEach(t),UKe.forEach(t),BJe=i(m),Po=n(m,"DIV",{class:!0});var Cl=s(Po);T(j9.$$.fragment,Cl),BSo=i(Cl),bd=n(Cl,"P",{});var gse=s(bd);ISo=r(gse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WV=n(gse,"A",{href:!0});var DAt=s(WV);NSo=r(DAt,"from_pretrained()"),DAt.forEach(t),qSo=r(gse," class method or the "),UV=n(gse,"A",{href:!0});var GAt=s(UV);jSo=r(GAt,"from_config()"),GAt.forEach(t),DSo=r(gse,` class
method.`),gse.forEach(t),GSo=i(Cl),D9=n(Cl,"P",{});var HKe=s(D9);OSo=r(HKe,"This class cannot be instantiated directly using "),Epe=n(HKe,"CODE",{});var OAt=s(Epe);VSo=r(OAt,"__init__()"),OAt.forEach(t),XSo=r(HKe," (throws an error)."),HKe.forEach(t),zSo=i(Cl),_t=n(Cl,"DIV",{class:!0});var aL=s(_t);T(G9.$$.fragment,aL),QSo=i(aL),Cpe=n(aL,"P",{});var VAt=s(Cpe);WSo=r(VAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VAt.forEach(t),USo=i(aL),vd=n(aL,"P",{});var hse=s(vd);HSo=r(hse,`Note:
Loading a model from its configuration file does `),wpe=n(hse,"STRONG",{});var XAt=s(wpe);JSo=r(XAt,"not"),XAt.forEach(t),YSo=r(hse,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(hse,"A",{href:!0});var zAt=s(HV);KSo=r(zAt,"from_pretrained()"),zAt.forEach(t),ZSo=r(hse," to load the model weights."),hse.forEach(t),eRo=i(aL),T(Yb.$$.fragment,aL),aL.forEach(t),oRo=i(Cl),Ze=n(Cl,"DIV",{class:!0});var Fa=s(Ze);T(O9.$$.fragment,Fa),rRo=i(Fa),Ape=n(Fa,"P",{});var QAt=s(Ape);tRo=r(QAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),QAt.forEach(t),aRo=i(Fa),Ya=n(Fa,"P",{});var nL=s(Ya);nRo=r(nL,"The model class to instantiate is selected based on the "),ype=n(nL,"CODE",{});var WAt=s(ype);sRo=r(WAt,"model_type"),WAt.forEach(t),lRo=r(nL,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(nL,"CODE",{});var UAt=s(Lpe);iRo=r(UAt,"pretrained_model_name_or_path"),UAt.forEach(t),dRo=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=n(nL,"CODE",{});var HAt=s(xpe);cRo=r(HAt,"pretrained_model_name_or_path"),HAt.forEach(t),mRo=r(nL,":"),nL.forEach(t),fRo=i(Fa),G=n(Fa,"UL",{});var O=s(G);Kb=n(O,"LI",{});var qIe=s(Kb);$pe=n(qIe,"STRONG",{});var JAt=s($pe);gRo=r(JAt,"albert"),JAt.forEach(t),hRo=r(qIe," \u2014 "),JV=n(qIe,"A",{href:!0});var YAt=s(JV);uRo=r(YAt,"AlbertForPreTraining"),YAt.forEach(t),pRo=r(qIe," (ALBERT model)"),qIe.forEach(t),_Ro=i(O),Zb=n(O,"LI",{});var jIe=s(Zb);kpe=n(jIe,"STRONG",{});var KAt=s(kpe);bRo=r(KAt,"bart"),KAt.forEach(t),vRo=r(jIe," \u2014 "),YV=n(jIe,"A",{href:!0});var ZAt=s(YV);FRo=r(ZAt,"BartForConditionalGeneration"),ZAt.forEach(t),TRo=r(jIe," (BART model)"),jIe.forEach(t),MRo=i(O),e2=n(O,"LI",{});var DIe=s(e2);Spe=n(DIe,"STRONG",{});var e6t=s(Spe);ERo=r(e6t,"bert"),e6t.forEach(t),CRo=r(DIe," \u2014 "),KV=n(DIe,"A",{href:!0});var o6t=s(KV);wRo=r(o6t,"BertForPreTraining"),o6t.forEach(t),ARo=r(DIe," (BERT model)"),DIe.forEach(t),yRo=i(O),o2=n(O,"LI",{});var GIe=s(o2);Rpe=n(GIe,"STRONG",{});var r6t=s(Rpe);LRo=r(r6t,"big_bird"),r6t.forEach(t),xRo=r(GIe," \u2014 "),ZV=n(GIe,"A",{href:!0});var t6t=s(ZV);$Ro=r(t6t,"BigBirdForPreTraining"),t6t.forEach(t),kRo=r(GIe," (BigBird model)"),GIe.forEach(t),SRo=i(O),r2=n(O,"LI",{});var OIe=s(r2);Ppe=n(OIe,"STRONG",{});var a6t=s(Ppe);RRo=r(a6t,"bloom"),a6t.forEach(t),PRo=r(OIe," \u2014 "),eX=n(OIe,"A",{href:!0});var n6t=s(eX);BRo=r(n6t,"BloomForCausalLM"),n6t.forEach(t),IRo=r(OIe," (BLOOM model)"),OIe.forEach(t),NRo=i(O),t2=n(O,"LI",{});var VIe=s(t2);Bpe=n(VIe,"STRONG",{});var s6t=s(Bpe);qRo=r(s6t,"camembert"),s6t.forEach(t),jRo=r(VIe," \u2014 "),oX=n(VIe,"A",{href:!0});var l6t=s(oX);DRo=r(l6t,"CamembertForMaskedLM"),l6t.forEach(t),GRo=r(VIe," (CamemBERT model)"),VIe.forEach(t),ORo=i(O),a2=n(O,"LI",{});var XIe=s(a2);Ipe=n(XIe,"STRONG",{});var i6t=s(Ipe);VRo=r(i6t,"ctrl"),i6t.forEach(t),XRo=r(XIe," \u2014 "),rX=n(XIe,"A",{href:!0});var d6t=s(rX);zRo=r(d6t,"CTRLLMHeadModel"),d6t.forEach(t),QRo=r(XIe," (CTRL model)"),XIe.forEach(t),WRo=i(O),n2=n(O,"LI",{});var zIe=s(n2);Npe=n(zIe,"STRONG",{});var c6t=s(Npe);URo=r(c6t,"data2vec-text"),c6t.forEach(t),HRo=r(zIe," \u2014 "),tX=n(zIe,"A",{href:!0});var m6t=s(tX);JRo=r(m6t,"Data2VecTextForMaskedLM"),m6t.forEach(t),YRo=r(zIe," (Data2VecText model)"),zIe.forEach(t),KRo=i(O),s2=n(O,"LI",{});var QIe=s(s2);qpe=n(QIe,"STRONG",{});var f6t=s(qpe);ZRo=r(f6t,"deberta"),f6t.forEach(t),ePo=r(QIe," \u2014 "),aX=n(QIe,"A",{href:!0});var g6t=s(aX);oPo=r(g6t,"DebertaForMaskedLM"),g6t.forEach(t),rPo=r(QIe," (DeBERTa model)"),QIe.forEach(t),tPo=i(O),l2=n(O,"LI",{});var WIe=s(l2);jpe=n(WIe,"STRONG",{});var h6t=s(jpe);aPo=r(h6t,"deberta-v2"),h6t.forEach(t),nPo=r(WIe," \u2014 "),nX=n(WIe,"A",{href:!0});var u6t=s(nX);sPo=r(u6t,"DebertaV2ForMaskedLM"),u6t.forEach(t),lPo=r(WIe," (DeBERTa-v2 model)"),WIe.forEach(t),iPo=i(O),i2=n(O,"LI",{});var UIe=s(i2);Dpe=n(UIe,"STRONG",{});var p6t=s(Dpe);dPo=r(p6t,"distilbert"),p6t.forEach(t),cPo=r(UIe," \u2014 "),sX=n(UIe,"A",{href:!0});var _6t=s(sX);mPo=r(_6t,"DistilBertForMaskedLM"),_6t.forEach(t),fPo=r(UIe," (DistilBERT model)"),UIe.forEach(t),gPo=i(O),d2=n(O,"LI",{});var HIe=s(d2);Gpe=n(HIe,"STRONG",{});var b6t=s(Gpe);hPo=r(b6t,"electra"),b6t.forEach(t),uPo=r(HIe," \u2014 "),lX=n(HIe,"A",{href:!0});var v6t=s(lX);pPo=r(v6t,"ElectraForPreTraining"),v6t.forEach(t),_Po=r(HIe," (ELECTRA model)"),HIe.forEach(t),bPo=i(O),c2=n(O,"LI",{});var JIe=s(c2);Ope=n(JIe,"STRONG",{});var F6t=s(Ope);vPo=r(F6t,"flaubert"),F6t.forEach(t),FPo=r(JIe," \u2014 "),iX=n(JIe,"A",{href:!0});var T6t=s(iX);TPo=r(T6t,"FlaubertWithLMHeadModel"),T6t.forEach(t),MPo=r(JIe," (FlauBERT model)"),JIe.forEach(t),EPo=i(O),m2=n(O,"LI",{});var YIe=s(m2);Vpe=n(YIe,"STRONG",{});var M6t=s(Vpe);CPo=r(M6t,"flava"),M6t.forEach(t),wPo=r(YIe," \u2014 "),dX=n(YIe,"A",{href:!0});var E6t=s(dX);APo=r(E6t,"FlavaForPreTraining"),E6t.forEach(t),yPo=r(YIe," (FLAVA model)"),YIe.forEach(t),LPo=i(O),f2=n(O,"LI",{});var KIe=s(f2);Xpe=n(KIe,"STRONG",{});var C6t=s(Xpe);xPo=r(C6t,"fnet"),C6t.forEach(t),$Po=r(KIe," \u2014 "),cX=n(KIe,"A",{href:!0});var w6t=s(cX);kPo=r(w6t,"FNetForPreTraining"),w6t.forEach(t),SPo=r(KIe," (FNet model)"),KIe.forEach(t),RPo=i(O),g2=n(O,"LI",{});var ZIe=s(g2);zpe=n(ZIe,"STRONG",{});var A6t=s(zpe);PPo=r(A6t,"fsmt"),A6t.forEach(t),BPo=r(ZIe," \u2014 "),mX=n(ZIe,"A",{href:!0});var y6t=s(mX);IPo=r(y6t,"FSMTForConditionalGeneration"),y6t.forEach(t),NPo=r(ZIe," (FairSeq Machine-Translation model)"),ZIe.forEach(t),qPo=i(O),h2=n(O,"LI",{});var eNe=s(h2);Qpe=n(eNe,"STRONG",{});var L6t=s(Qpe);jPo=r(L6t,"funnel"),L6t.forEach(t),DPo=r(eNe," \u2014 "),fX=n(eNe,"A",{href:!0});var x6t=s(fX);GPo=r(x6t,"FunnelForPreTraining"),x6t.forEach(t),OPo=r(eNe," (Funnel Transformer model)"),eNe.forEach(t),VPo=i(O),u2=n(O,"LI",{});var oNe=s(u2);Wpe=n(oNe,"STRONG",{});var $6t=s(Wpe);XPo=r($6t,"gpt2"),$6t.forEach(t),zPo=r(oNe," \u2014 "),gX=n(oNe,"A",{href:!0});var k6t=s(gX);QPo=r(k6t,"GPT2LMHeadModel"),k6t.forEach(t),WPo=r(oNe," (OpenAI GPT-2 model)"),oNe.forEach(t),UPo=i(O),p2=n(O,"LI",{});var rNe=s(p2);Upe=n(rNe,"STRONG",{});var S6t=s(Upe);HPo=r(S6t,"ibert"),S6t.forEach(t),JPo=r(rNe," \u2014 "),hX=n(rNe,"A",{href:!0});var R6t=s(hX);YPo=r(R6t,"IBertForMaskedLM"),R6t.forEach(t),KPo=r(rNe," (I-BERT model)"),rNe.forEach(t),ZPo=i(O),_2=n(O,"LI",{});var tNe=s(_2);Hpe=n(tNe,"STRONG",{});var P6t=s(Hpe);eBo=r(P6t,"layoutlm"),P6t.forEach(t),oBo=r(tNe," \u2014 "),uX=n(tNe,"A",{href:!0});var B6t=s(uX);rBo=r(B6t,"LayoutLMForMaskedLM"),B6t.forEach(t),tBo=r(tNe," (LayoutLM model)"),tNe.forEach(t),aBo=i(O),b2=n(O,"LI",{});var aNe=s(b2);Jpe=n(aNe,"STRONG",{});var I6t=s(Jpe);nBo=r(I6t,"longformer"),I6t.forEach(t),sBo=r(aNe," \u2014 "),pX=n(aNe,"A",{href:!0});var N6t=s(pX);lBo=r(N6t,"LongformerForMaskedLM"),N6t.forEach(t),iBo=r(aNe," (Longformer model)"),aNe.forEach(t),dBo=i(O),v2=n(O,"LI",{});var nNe=s(v2);Ype=n(nNe,"STRONG",{});var q6t=s(Ype);cBo=r(q6t,"luke"),q6t.forEach(t),mBo=r(nNe," \u2014 "),_X=n(nNe,"A",{href:!0});var j6t=s(_X);fBo=r(j6t,"LukeForMaskedLM"),j6t.forEach(t),gBo=r(nNe," (LUKE model)"),nNe.forEach(t),hBo=i(O),F2=n(O,"LI",{});var sNe=s(F2);Kpe=n(sNe,"STRONG",{});var D6t=s(Kpe);uBo=r(D6t,"lxmert"),D6t.forEach(t),pBo=r(sNe," \u2014 "),bX=n(sNe,"A",{href:!0});var G6t=s(bX);_Bo=r(G6t,"LxmertForPreTraining"),G6t.forEach(t),bBo=r(sNe," (LXMERT model)"),sNe.forEach(t),vBo=i(O),T2=n(O,"LI",{});var lNe=s(T2);Zpe=n(lNe,"STRONG",{});var O6t=s(Zpe);FBo=r(O6t,"megatron-bert"),O6t.forEach(t),TBo=r(lNe," \u2014 "),vX=n(lNe,"A",{href:!0});var V6t=s(vX);MBo=r(V6t,"MegatronBertForPreTraining"),V6t.forEach(t),EBo=r(lNe," (Megatron-BERT model)"),lNe.forEach(t),CBo=i(O),M2=n(O,"LI",{});var iNe=s(M2);e_e=n(iNe,"STRONG",{});var X6t=s(e_e);wBo=r(X6t,"mobilebert"),X6t.forEach(t),ABo=r(iNe," \u2014 "),FX=n(iNe,"A",{href:!0});var z6t=s(FX);yBo=r(z6t,"MobileBertForPreTraining"),z6t.forEach(t),LBo=r(iNe," (MobileBERT model)"),iNe.forEach(t),xBo=i(O),E2=n(O,"LI",{});var dNe=s(E2);o_e=n(dNe,"STRONG",{});var Q6t=s(o_e);$Bo=r(Q6t,"mpnet"),Q6t.forEach(t),kBo=r(dNe," \u2014 "),TX=n(dNe,"A",{href:!0});var W6t=s(TX);SBo=r(W6t,"MPNetForMaskedLM"),W6t.forEach(t),RBo=r(dNe," (MPNet model)"),dNe.forEach(t),PBo=i(O),C2=n(O,"LI",{});var cNe=s(C2);r_e=n(cNe,"STRONG",{});var U6t=s(r_e);BBo=r(U6t,"mvp"),U6t.forEach(t),IBo=r(cNe," \u2014 "),MX=n(cNe,"A",{href:!0});var H6t=s(MX);NBo=r(H6t,"MvpForConditionalGeneration"),H6t.forEach(t),qBo=r(cNe," (MVP model)"),cNe.forEach(t),jBo=i(O),w2=n(O,"LI",{});var mNe=s(w2);t_e=n(mNe,"STRONG",{});var J6t=s(t_e);DBo=r(J6t,"nezha"),J6t.forEach(t),GBo=r(mNe," \u2014 "),EX=n(mNe,"A",{href:!0});var Y6t=s(EX);OBo=r(Y6t,"NezhaForPreTraining"),Y6t.forEach(t),VBo=r(mNe," (Nezha model)"),mNe.forEach(t),XBo=i(O),A2=n(O,"LI",{});var fNe=s(A2);a_e=n(fNe,"STRONG",{});var K6t=s(a_e);zBo=r(K6t,"openai-gpt"),K6t.forEach(t),QBo=r(fNe," \u2014 "),CX=n(fNe,"A",{href:!0});var Z6t=s(CX);WBo=r(Z6t,"OpenAIGPTLMHeadModel"),Z6t.forEach(t),UBo=r(fNe," (OpenAI GPT model)"),fNe.forEach(t),HBo=i(O),y2=n(O,"LI",{});var gNe=s(y2);n_e=n(gNe,"STRONG",{});var e7t=s(n_e);JBo=r(e7t,"retribert"),e7t.forEach(t),YBo=r(gNe," \u2014 "),wX=n(gNe,"A",{href:!0});var o7t=s(wX);KBo=r(o7t,"RetriBertModel"),o7t.forEach(t),ZBo=r(gNe," (RetriBERT model)"),gNe.forEach(t),eIo=i(O),L2=n(O,"LI",{});var hNe=s(L2);s_e=n(hNe,"STRONG",{});var r7t=s(s_e);oIo=r(r7t,"roberta"),r7t.forEach(t),rIo=r(hNe," \u2014 "),AX=n(hNe,"A",{href:!0});var t7t=s(AX);tIo=r(t7t,"RobertaForMaskedLM"),t7t.forEach(t),aIo=r(hNe," (RoBERTa model)"),hNe.forEach(t),nIo=i(O),x2=n(O,"LI",{});var uNe=s(x2);l_e=n(uNe,"STRONG",{});var a7t=s(l_e);sIo=r(a7t,"splinter"),a7t.forEach(t),lIo=r(uNe," \u2014 "),yX=n(uNe,"A",{href:!0});var n7t=s(yX);iIo=r(n7t,"SplinterForPreTraining"),n7t.forEach(t),dIo=r(uNe," (Splinter model)"),uNe.forEach(t),cIo=i(O),$2=n(O,"LI",{});var pNe=s($2);i_e=n(pNe,"STRONG",{});var s7t=s(i_e);mIo=r(s7t,"squeezebert"),s7t.forEach(t),fIo=r(pNe," \u2014 "),LX=n(pNe,"A",{href:!0});var l7t=s(LX);gIo=r(l7t,"SqueezeBertForMaskedLM"),l7t.forEach(t),hIo=r(pNe," (SqueezeBERT model)"),pNe.forEach(t),uIo=i(O),k2=n(O,"LI",{});var _Ne=s(k2);d_e=n(_Ne,"STRONG",{});var i7t=s(d_e);pIo=r(i7t,"t5"),i7t.forEach(t),_Io=r(_Ne," \u2014 "),xX=n(_Ne,"A",{href:!0});var d7t=s(xX);bIo=r(d7t,"T5ForConditionalGeneration"),d7t.forEach(t),vIo=r(_Ne," (T5 model)"),_Ne.forEach(t),FIo=i(O),S2=n(O,"LI",{});var bNe=s(S2);c_e=n(bNe,"STRONG",{});var c7t=s(c_e);TIo=r(c7t,"tapas"),c7t.forEach(t),MIo=r(bNe," \u2014 "),$X=n(bNe,"A",{href:!0});var m7t=s($X);EIo=r(m7t,"TapasForMaskedLM"),m7t.forEach(t),CIo=r(bNe," (TAPAS model)"),bNe.forEach(t),wIo=i(O),R2=n(O,"LI",{});var vNe=s(R2);m_e=n(vNe,"STRONG",{});var f7t=s(m_e);AIo=r(f7t,"transfo-xl"),f7t.forEach(t),yIo=r(vNe," \u2014 "),kX=n(vNe,"A",{href:!0});var g7t=s(kX);LIo=r(g7t,"TransfoXLLMHeadModel"),g7t.forEach(t),xIo=r(vNe," (Transformer-XL model)"),vNe.forEach(t),$Io=i(O),P2=n(O,"LI",{});var FNe=s(P2);f_e=n(FNe,"STRONG",{});var h7t=s(f_e);kIo=r(h7t,"unispeech"),h7t.forEach(t),SIo=r(FNe," \u2014 "),SX=n(FNe,"A",{href:!0});var u7t=s(SX);RIo=r(u7t,"UniSpeechForPreTraining"),u7t.forEach(t),PIo=r(FNe," (UniSpeech model)"),FNe.forEach(t),BIo=i(O),B2=n(O,"LI",{});var TNe=s(B2);g_e=n(TNe,"STRONG",{});var p7t=s(g_e);IIo=r(p7t,"unispeech-sat"),p7t.forEach(t),NIo=r(TNe," \u2014 "),RX=n(TNe,"A",{href:!0});var _7t=s(RX);qIo=r(_7t,"UniSpeechSatForPreTraining"),_7t.forEach(t),jIo=r(TNe," (UniSpeechSat model)"),TNe.forEach(t),DIo=i(O),I2=n(O,"LI",{});var MNe=s(I2);h_e=n(MNe,"STRONG",{});var b7t=s(h_e);GIo=r(b7t,"videomae"),b7t.forEach(t),OIo=r(MNe," \u2014 "),PX=n(MNe,"A",{href:!0});var v7t=s(PX);VIo=r(v7t,"VideoMAEForPreTraining"),v7t.forEach(t),XIo=r(MNe," (VideoMAE model)"),MNe.forEach(t),zIo=i(O),N2=n(O,"LI",{});var ENe=s(N2);u_e=n(ENe,"STRONG",{});var F7t=s(u_e);QIo=r(F7t,"visual_bert"),F7t.forEach(t),WIo=r(ENe," \u2014 "),BX=n(ENe,"A",{href:!0});var T7t=s(BX);UIo=r(T7t,"VisualBertForPreTraining"),T7t.forEach(t),HIo=r(ENe," (VisualBERT model)"),ENe.forEach(t),JIo=i(O),q2=n(O,"LI",{});var CNe=s(q2);p_e=n(CNe,"STRONG",{});var M7t=s(p_e);YIo=r(M7t,"vit_mae"),M7t.forEach(t),KIo=r(CNe," \u2014 "),IX=n(CNe,"A",{href:!0});var E7t=s(IX);ZIo=r(E7t,"ViTMAEForPreTraining"),E7t.forEach(t),eNo=r(CNe," (ViTMAE model)"),CNe.forEach(t),oNo=i(O),j2=n(O,"LI",{});var wNe=s(j2);__e=n(wNe,"STRONG",{});var C7t=s(__e);rNo=r(C7t,"wav2vec2"),C7t.forEach(t),tNo=r(wNe," \u2014 "),NX=n(wNe,"A",{href:!0});var w7t=s(NX);aNo=r(w7t,"Wav2Vec2ForPreTraining"),w7t.forEach(t),nNo=r(wNe," (Wav2Vec2 model)"),wNe.forEach(t),sNo=i(O),D2=n(O,"LI",{});var ANe=s(D2);b_e=n(ANe,"STRONG",{});var A7t=s(b_e);lNo=r(A7t,"wav2vec2-conformer"),A7t.forEach(t),iNo=r(ANe," \u2014 "),qX=n(ANe,"A",{href:!0});var y7t=s(qX);dNo=r(y7t,"Wav2Vec2ConformerForPreTraining"),y7t.forEach(t),cNo=r(ANe," (Wav2Vec2-Conformer model)"),ANe.forEach(t),mNo=i(O),G2=n(O,"LI",{});var yNe=s(G2);v_e=n(yNe,"STRONG",{});var L7t=s(v_e);fNo=r(L7t,"xlm"),L7t.forEach(t),gNo=r(yNe," \u2014 "),jX=n(yNe,"A",{href:!0});var x7t=s(jX);hNo=r(x7t,"XLMWithLMHeadModel"),x7t.forEach(t),uNo=r(yNe," (XLM model)"),yNe.forEach(t),pNo=i(O),O2=n(O,"LI",{});var LNe=s(O2);F_e=n(LNe,"STRONG",{});var $7t=s(F_e);_No=r($7t,"xlm-roberta"),$7t.forEach(t),bNo=r(LNe," \u2014 "),DX=n(LNe,"A",{href:!0});var k7t=s(DX);vNo=r(k7t,"XLMRobertaForMaskedLM"),k7t.forEach(t),FNo=r(LNe," (XLM-RoBERTa model)"),LNe.forEach(t),TNo=i(O),V2=n(O,"LI",{});var xNe=s(V2);T_e=n(xNe,"STRONG",{});var S7t=s(T_e);MNo=r(S7t,"xlm-roberta-xl"),S7t.forEach(t),ENo=r(xNe," \u2014 "),GX=n(xNe,"A",{href:!0});var R7t=s(GX);CNo=r(R7t,"XLMRobertaXLForMaskedLM"),R7t.forEach(t),wNo=r(xNe," (XLM-RoBERTa-XL model)"),xNe.forEach(t),ANo=i(O),X2=n(O,"LI",{});var $Ne=s(X2);M_e=n($Ne,"STRONG",{});var P7t=s(M_e);yNo=r(P7t,"xlnet"),P7t.forEach(t),LNo=r($Ne," \u2014 "),OX=n($Ne,"A",{href:!0});var B7t=s(OX);xNo=r(B7t,"XLNetLMHeadModel"),B7t.forEach(t),$No=r($Ne," (XLNet model)"),$Ne.forEach(t),O.forEach(t),kNo=i(Fa),z2=n(Fa,"P",{});var kNe=s(z2);SNo=r(kNe,"The model is set in evaluation mode by default using "),E_e=n(kNe,"CODE",{});var I7t=s(E_e);RNo=r(I7t,"model.eval()"),I7t.forEach(t),PNo=r(kNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=n(kNe,"CODE",{});var N7t=s(C_e);BNo=r(N7t,"model.train()"),N7t.forEach(t),kNe.forEach(t),INo=i(Fa),T(Q2.$$.fragment,Fa),Fa.forEach(t),Cl.forEach(t),IJe=i(m),Fd=n(m,"H2",{class:!0});var JKe=s(Fd);W2=n(JKe,"A",{id:!0,class:!0,href:!0});var q7t=s(W2);w_e=n(q7t,"SPAN",{});var j7t=s(w_e);T(V9.$$.fragment,j7t),j7t.forEach(t),q7t.forEach(t),NNo=i(JKe),A_e=n(JKe,"SPAN",{});var D7t=s(A_e);qNo=r(D7t,"AutoModelForCausalLM"),D7t.forEach(t),JKe.forEach(t),NJe=i(m),Bo=n(m,"DIV",{class:!0});var wl=s(Bo);T(X9.$$.fragment,wl),jNo=i(wl),Td=n(wl,"P",{});var use=s(Td);DNo=r(use,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VX=n(use,"A",{href:!0});var G7t=s(VX);GNo=r(G7t,"from_pretrained()"),G7t.forEach(t),ONo=r(use," class method or the "),XX=n(use,"A",{href:!0});var O7t=s(XX);VNo=r(O7t,"from_config()"),O7t.forEach(t),XNo=r(use,` class
method.`),use.forEach(t),zNo=i(wl),z9=n(wl,"P",{});var YKe=s(z9);QNo=r(YKe,"This class cannot be instantiated directly using "),y_e=n(YKe,"CODE",{});var V7t=s(y_e);WNo=r(V7t,"__init__()"),V7t.forEach(t),UNo=r(YKe," (throws an error)."),YKe.forEach(t),HNo=i(wl),bt=n(wl,"DIV",{class:!0});var sL=s(bt);T(Q9.$$.fragment,sL),JNo=i(sL),L_e=n(sL,"P",{});var X7t=s(L_e);YNo=r(X7t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),X7t.forEach(t),KNo=i(sL),Md=n(sL,"P",{});var pse=s(Md);ZNo=r(pse,`Note:
Loading a model from its configuration file does `),x_e=n(pse,"STRONG",{});var z7t=s(x_e);eqo=r(z7t,"not"),z7t.forEach(t),oqo=r(pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(pse,"A",{href:!0});var Q7t=s(zX);rqo=r(Q7t,"from_pretrained()"),Q7t.forEach(t),tqo=r(pse," to load the model weights."),pse.forEach(t),aqo=i(sL),T(U2.$$.fragment,sL),sL.forEach(t),nqo=i(wl),eo=n(wl,"DIV",{class:!0});var Ta=s(eo);T(W9.$$.fragment,Ta),sqo=i(Ta),$_e=n(Ta,"P",{});var W7t=s($_e);lqo=r(W7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),W7t.forEach(t),iqo=i(Ta),Ka=n(Ta,"P",{});var lL=s(Ka);dqo=r(lL,"The model class to instantiate is selected based on the "),k_e=n(lL,"CODE",{});var U7t=s(k_e);cqo=r(U7t,"model_type"),U7t.forEach(t),mqo=r(lL,` property of the config object (either
passed as an argument or loaded from `),S_e=n(lL,"CODE",{});var H7t=s(S_e);fqo=r(H7t,"pretrained_model_name_or_path"),H7t.forEach(t),gqo=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R_e=n(lL,"CODE",{});var J7t=s(R_e);hqo=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),uqo=r(lL,":"),lL.forEach(t),pqo=i(Ta),z=n(Ta,"UL",{});var Q=s(z);H2=n(Q,"LI",{});var SNe=s(H2);P_e=n(SNe,"STRONG",{});var Y7t=s(P_e);_qo=r(Y7t,"bart"),Y7t.forEach(t),bqo=r(SNe," \u2014 "),QX=n(SNe,"A",{href:!0});var K7t=s(QX);vqo=r(K7t,"BartForCausalLM"),K7t.forEach(t),Fqo=r(SNe," (BART model)"),SNe.forEach(t),Tqo=i(Q),J2=n(Q,"LI",{});var RNe=s(J2);B_e=n(RNe,"STRONG",{});var Z7t=s(B_e);Mqo=r(Z7t,"bert"),Z7t.forEach(t),Eqo=r(RNe," \u2014 "),WX=n(RNe,"A",{href:!0});var eyt=s(WX);Cqo=r(eyt,"BertLMHeadModel"),eyt.forEach(t),wqo=r(RNe," (BERT model)"),RNe.forEach(t),Aqo=i(Q),Y2=n(Q,"LI",{});var PNe=s(Y2);I_e=n(PNe,"STRONG",{});var oyt=s(I_e);yqo=r(oyt,"bert-generation"),oyt.forEach(t),Lqo=r(PNe," \u2014 "),UX=n(PNe,"A",{href:!0});var ryt=s(UX);xqo=r(ryt,"BertGenerationDecoder"),ryt.forEach(t),$qo=r(PNe," (Bert Generation model)"),PNe.forEach(t),kqo=i(Q),K2=n(Q,"LI",{});var BNe=s(K2);N_e=n(BNe,"STRONG",{});var tyt=s(N_e);Sqo=r(tyt,"big_bird"),tyt.forEach(t),Rqo=r(BNe," \u2014 "),HX=n(BNe,"A",{href:!0});var ayt=s(HX);Pqo=r(ayt,"BigBirdForCausalLM"),ayt.forEach(t),Bqo=r(BNe," (BigBird model)"),BNe.forEach(t),Iqo=i(Q),Z2=n(Q,"LI",{});var INe=s(Z2);q_e=n(INe,"STRONG",{});var nyt=s(q_e);Nqo=r(nyt,"bigbird_pegasus"),nyt.forEach(t),qqo=r(INe," \u2014 "),JX=n(INe,"A",{href:!0});var syt=s(JX);jqo=r(syt,"BigBirdPegasusForCausalLM"),syt.forEach(t),Dqo=r(INe," (BigBird-Pegasus model)"),INe.forEach(t),Gqo=i(Q),ev=n(Q,"LI",{});var NNe=s(ev);j_e=n(NNe,"STRONG",{});var lyt=s(j_e);Oqo=r(lyt,"blenderbot"),lyt.forEach(t),Vqo=r(NNe," \u2014 "),YX=n(NNe,"A",{href:!0});var iyt=s(YX);Xqo=r(iyt,"BlenderbotForCausalLM"),iyt.forEach(t),zqo=r(NNe," (Blenderbot model)"),NNe.forEach(t),Qqo=i(Q),ov=n(Q,"LI",{});var qNe=s(ov);D_e=n(qNe,"STRONG",{});var dyt=s(D_e);Wqo=r(dyt,"blenderbot-small"),dyt.forEach(t),Uqo=r(qNe," \u2014 "),KX=n(qNe,"A",{href:!0});var cyt=s(KX);Hqo=r(cyt,"BlenderbotSmallForCausalLM"),cyt.forEach(t),Jqo=r(qNe," (BlenderbotSmall model)"),qNe.forEach(t),Yqo=i(Q),rv=n(Q,"LI",{});var jNe=s(rv);G_e=n(jNe,"STRONG",{});var myt=s(G_e);Kqo=r(myt,"bloom"),myt.forEach(t),Zqo=r(jNe," \u2014 "),ZX=n(jNe,"A",{href:!0});var fyt=s(ZX);ejo=r(fyt,"BloomForCausalLM"),fyt.forEach(t),ojo=r(jNe," (BLOOM model)"),jNe.forEach(t),rjo=i(Q),tv=n(Q,"LI",{});var DNe=s(tv);O_e=n(DNe,"STRONG",{});var gyt=s(O_e);tjo=r(gyt,"camembert"),gyt.forEach(t),ajo=r(DNe," \u2014 "),ez=n(DNe,"A",{href:!0});var hyt=s(ez);njo=r(hyt,"CamembertForCausalLM"),hyt.forEach(t),sjo=r(DNe," (CamemBERT model)"),DNe.forEach(t),ljo=i(Q),av=n(Q,"LI",{});var GNe=s(av);V_e=n(GNe,"STRONG",{});var uyt=s(V_e);ijo=r(uyt,"codegen"),uyt.forEach(t),djo=r(GNe," \u2014 "),oz=n(GNe,"A",{href:!0});var pyt=s(oz);cjo=r(pyt,"CodeGenForCausalLM"),pyt.forEach(t),mjo=r(GNe," (CodeGen model)"),GNe.forEach(t),fjo=i(Q),nv=n(Q,"LI",{});var ONe=s(nv);X_e=n(ONe,"STRONG",{});var _yt=s(X_e);gjo=r(_yt,"ctrl"),_yt.forEach(t),hjo=r(ONe," \u2014 "),rz=n(ONe,"A",{href:!0});var byt=s(rz);ujo=r(byt,"CTRLLMHeadModel"),byt.forEach(t),pjo=r(ONe," (CTRL model)"),ONe.forEach(t),_jo=i(Q),sv=n(Q,"LI",{});var VNe=s(sv);z_e=n(VNe,"STRONG",{});var vyt=s(z_e);bjo=r(vyt,"data2vec-text"),vyt.forEach(t),vjo=r(VNe," \u2014 "),tz=n(VNe,"A",{href:!0});var Fyt=s(tz);Fjo=r(Fyt,"Data2VecTextForCausalLM"),Fyt.forEach(t),Tjo=r(VNe," (Data2VecText model)"),VNe.forEach(t),Mjo=i(Q),lv=n(Q,"LI",{});var XNe=s(lv);Q_e=n(XNe,"STRONG",{});var Tyt=s(Q_e);Ejo=r(Tyt,"electra"),Tyt.forEach(t),Cjo=r(XNe," \u2014 "),az=n(XNe,"A",{href:!0});var Myt=s(az);wjo=r(Myt,"ElectraForCausalLM"),Myt.forEach(t),Ajo=r(XNe," (ELECTRA model)"),XNe.forEach(t),yjo=i(Q),iv=n(Q,"LI",{});var zNe=s(iv);W_e=n(zNe,"STRONG",{});var Eyt=s(W_e);Ljo=r(Eyt,"gpt2"),Eyt.forEach(t),xjo=r(zNe," \u2014 "),nz=n(zNe,"A",{href:!0});var Cyt=s(nz);$jo=r(Cyt,"GPT2LMHeadModel"),Cyt.forEach(t),kjo=r(zNe," (OpenAI GPT-2 model)"),zNe.forEach(t),Sjo=i(Q),dv=n(Q,"LI",{});var QNe=s(dv);U_e=n(QNe,"STRONG",{});var wyt=s(U_e);Rjo=r(wyt,"gpt_neo"),wyt.forEach(t),Pjo=r(QNe," \u2014 "),sz=n(QNe,"A",{href:!0});var Ayt=s(sz);Bjo=r(Ayt,"GPTNeoForCausalLM"),Ayt.forEach(t),Ijo=r(QNe," (GPT Neo model)"),QNe.forEach(t),Njo=i(Q),cv=n(Q,"LI",{});var WNe=s(cv);H_e=n(WNe,"STRONG",{});var yyt=s(H_e);qjo=r(yyt,"gpt_neox"),yyt.forEach(t),jjo=r(WNe," \u2014 "),lz=n(WNe,"A",{href:!0});var Lyt=s(lz);Djo=r(Lyt,"GPTNeoXForCausalLM"),Lyt.forEach(t),Gjo=r(WNe," (GPT NeoX model)"),WNe.forEach(t),Ojo=i(Q),mv=n(Q,"LI",{});var UNe=s(mv);J_e=n(UNe,"STRONG",{});var xyt=s(J_e);Vjo=r(xyt,"gptj"),xyt.forEach(t),Xjo=r(UNe," \u2014 "),iz=n(UNe,"A",{href:!0});var $yt=s(iz);zjo=r($yt,"GPTJForCausalLM"),$yt.forEach(t),Qjo=r(UNe," (GPT-J model)"),UNe.forEach(t),Wjo=i(Q),fv=n(Q,"LI",{});var HNe=s(fv);Y_e=n(HNe,"STRONG",{});var kyt=s(Y_e);Ujo=r(kyt,"marian"),kyt.forEach(t),Hjo=r(HNe," \u2014 "),dz=n(HNe,"A",{href:!0});var Syt=s(dz);Jjo=r(Syt,"MarianForCausalLM"),Syt.forEach(t),Yjo=r(HNe," (Marian model)"),HNe.forEach(t),Kjo=i(Q),gv=n(Q,"LI",{});var JNe=s(gv);K_e=n(JNe,"STRONG",{});var Ryt=s(K_e);Zjo=r(Ryt,"mbart"),Ryt.forEach(t),eDo=r(JNe," \u2014 "),cz=n(JNe,"A",{href:!0});var Pyt=s(cz);oDo=r(Pyt,"MBartForCausalLM"),Pyt.forEach(t),rDo=r(JNe," (mBART model)"),JNe.forEach(t),tDo=i(Q),hv=n(Q,"LI",{});var YNe=s(hv);Z_e=n(YNe,"STRONG",{});var Byt=s(Z_e);aDo=r(Byt,"megatron-bert"),Byt.forEach(t),nDo=r(YNe," \u2014 "),mz=n(YNe,"A",{href:!0});var Iyt=s(mz);sDo=r(Iyt,"MegatronBertForCausalLM"),Iyt.forEach(t),lDo=r(YNe," (Megatron-BERT model)"),YNe.forEach(t),iDo=i(Q),uv=n(Q,"LI",{});var KNe=s(uv);ebe=n(KNe,"STRONG",{});var Nyt=s(ebe);dDo=r(Nyt,"mvp"),Nyt.forEach(t),cDo=r(KNe," \u2014 "),fz=n(KNe,"A",{href:!0});var qyt=s(fz);mDo=r(qyt,"MvpForCausalLM"),qyt.forEach(t),fDo=r(KNe," (MVP model)"),KNe.forEach(t),gDo=i(Q),pv=n(Q,"LI",{});var ZNe=s(pv);obe=n(ZNe,"STRONG",{});var jyt=s(obe);hDo=r(jyt,"openai-gpt"),jyt.forEach(t),uDo=r(ZNe," \u2014 "),gz=n(ZNe,"A",{href:!0});var Dyt=s(gz);pDo=r(Dyt,"OpenAIGPTLMHeadModel"),Dyt.forEach(t),_Do=r(ZNe," (OpenAI GPT model)"),ZNe.forEach(t),bDo=i(Q),_v=n(Q,"LI",{});var eqe=s(_v);rbe=n(eqe,"STRONG",{});var Gyt=s(rbe);vDo=r(Gyt,"opt"),Gyt.forEach(t),FDo=r(eqe," \u2014 "),hz=n(eqe,"A",{href:!0});var Oyt=s(hz);TDo=r(Oyt,"OPTForCausalLM"),Oyt.forEach(t),MDo=r(eqe," (OPT model)"),eqe.forEach(t),EDo=i(Q),bv=n(Q,"LI",{});var oqe=s(bv);tbe=n(oqe,"STRONG",{});var Vyt=s(tbe);CDo=r(Vyt,"pegasus"),Vyt.forEach(t),wDo=r(oqe," \u2014 "),uz=n(oqe,"A",{href:!0});var Xyt=s(uz);ADo=r(Xyt,"PegasusForCausalLM"),Xyt.forEach(t),yDo=r(oqe," (Pegasus model)"),oqe.forEach(t),LDo=i(Q),vv=n(Q,"LI",{});var rqe=s(vv);abe=n(rqe,"STRONG",{});var zyt=s(abe);xDo=r(zyt,"plbart"),zyt.forEach(t),$Do=r(rqe," \u2014 "),pz=n(rqe,"A",{href:!0});var Qyt=s(pz);kDo=r(Qyt,"PLBartForCausalLM"),Qyt.forEach(t),SDo=r(rqe," (PLBart model)"),rqe.forEach(t),RDo=i(Q),Fv=n(Q,"LI",{});var tqe=s(Fv);nbe=n(tqe,"STRONG",{});var Wyt=s(nbe);PDo=r(Wyt,"prophetnet"),Wyt.forEach(t),BDo=r(tqe," \u2014 "),_z=n(tqe,"A",{href:!0});var Uyt=s(_z);IDo=r(Uyt,"ProphetNetForCausalLM"),Uyt.forEach(t),NDo=r(tqe," (ProphetNet model)"),tqe.forEach(t),qDo=i(Q),Tv=n(Q,"LI",{});var aqe=s(Tv);sbe=n(aqe,"STRONG",{});var Hyt=s(sbe);jDo=r(Hyt,"qdqbert"),Hyt.forEach(t),DDo=r(aqe," \u2014 "),bz=n(aqe,"A",{href:!0});var Jyt=s(bz);GDo=r(Jyt,"QDQBertLMHeadModel"),Jyt.forEach(t),ODo=r(aqe," (QDQBert model)"),aqe.forEach(t),VDo=i(Q),Mv=n(Q,"LI",{});var nqe=s(Mv);lbe=n(nqe,"STRONG",{});var Yyt=s(lbe);XDo=r(Yyt,"reformer"),Yyt.forEach(t),zDo=r(nqe," \u2014 "),vz=n(nqe,"A",{href:!0});var Kyt=s(vz);QDo=r(Kyt,"ReformerModelWithLMHead"),Kyt.forEach(t),WDo=r(nqe," (Reformer model)"),nqe.forEach(t),UDo=i(Q),Ev=n(Q,"LI",{});var sqe=s(Ev);ibe=n(sqe,"STRONG",{});var Zyt=s(ibe);HDo=r(Zyt,"rembert"),Zyt.forEach(t),JDo=r(sqe," \u2014 "),Fz=n(sqe,"A",{href:!0});var eLt=s(Fz);YDo=r(eLt,"RemBertForCausalLM"),eLt.forEach(t),KDo=r(sqe," (RemBERT model)"),sqe.forEach(t),ZDo=i(Q),Cv=n(Q,"LI",{});var lqe=s(Cv);dbe=n(lqe,"STRONG",{});var oLt=s(dbe);eGo=r(oLt,"roberta"),oLt.forEach(t),oGo=r(lqe," \u2014 "),Tz=n(lqe,"A",{href:!0});var rLt=s(Tz);rGo=r(rLt,"RobertaForCausalLM"),rLt.forEach(t),tGo=r(lqe," (RoBERTa model)"),lqe.forEach(t),aGo=i(Q),wv=n(Q,"LI",{});var iqe=s(wv);cbe=n(iqe,"STRONG",{});var tLt=s(cbe);nGo=r(tLt,"roformer"),tLt.forEach(t),sGo=r(iqe," \u2014 "),Mz=n(iqe,"A",{href:!0});var aLt=s(Mz);lGo=r(aLt,"RoFormerForCausalLM"),aLt.forEach(t),iGo=r(iqe," (RoFormer model)"),iqe.forEach(t),dGo=i(Q),Av=n(Q,"LI",{});var dqe=s(Av);mbe=n(dqe,"STRONG",{});var nLt=s(mbe);cGo=r(nLt,"speech_to_text_2"),nLt.forEach(t),mGo=r(dqe," \u2014 "),Ez=n(dqe,"A",{href:!0});var sLt=s(Ez);fGo=r(sLt,"Speech2Text2ForCausalLM"),sLt.forEach(t),gGo=r(dqe," (Speech2Text2 model)"),dqe.forEach(t),hGo=i(Q),yv=n(Q,"LI",{});var cqe=s(yv);fbe=n(cqe,"STRONG",{});var lLt=s(fbe);uGo=r(lLt,"transfo-xl"),lLt.forEach(t),pGo=r(cqe," \u2014 "),Cz=n(cqe,"A",{href:!0});var iLt=s(Cz);_Go=r(iLt,"TransfoXLLMHeadModel"),iLt.forEach(t),bGo=r(cqe," (Transformer-XL model)"),cqe.forEach(t),vGo=i(Q),Lv=n(Q,"LI",{});var mqe=s(Lv);gbe=n(mqe,"STRONG",{});var dLt=s(gbe);FGo=r(dLt,"trocr"),dLt.forEach(t),TGo=r(mqe," \u2014 "),wz=n(mqe,"A",{href:!0});var cLt=s(wz);MGo=r(cLt,"TrOCRForCausalLM"),cLt.forEach(t),EGo=r(mqe," (TrOCR model)"),mqe.forEach(t),CGo=i(Q),xv=n(Q,"LI",{});var fqe=s(xv);hbe=n(fqe,"STRONG",{});var mLt=s(hbe);wGo=r(mLt,"xglm"),mLt.forEach(t),AGo=r(fqe," \u2014 "),Az=n(fqe,"A",{href:!0});var fLt=s(Az);yGo=r(fLt,"XGLMForCausalLM"),fLt.forEach(t),LGo=r(fqe," (XGLM model)"),fqe.forEach(t),xGo=i(Q),$v=n(Q,"LI",{});var gqe=s($v);ube=n(gqe,"STRONG",{});var gLt=s(ube);$Go=r(gLt,"xlm"),gLt.forEach(t),kGo=r(gqe," \u2014 "),yz=n(gqe,"A",{href:!0});var hLt=s(yz);SGo=r(hLt,"XLMWithLMHeadModel"),hLt.forEach(t),RGo=r(gqe," (XLM model)"),gqe.forEach(t),PGo=i(Q),kv=n(Q,"LI",{});var hqe=s(kv);pbe=n(hqe,"STRONG",{});var uLt=s(pbe);BGo=r(uLt,"xlm-prophetnet"),uLt.forEach(t),IGo=r(hqe," \u2014 "),Lz=n(hqe,"A",{href:!0});var pLt=s(Lz);NGo=r(pLt,"XLMProphetNetForCausalLM"),pLt.forEach(t),qGo=r(hqe," (XLM-ProphetNet model)"),hqe.forEach(t),jGo=i(Q),Sv=n(Q,"LI",{});var uqe=s(Sv);_be=n(uqe,"STRONG",{});var _Lt=s(_be);DGo=r(_Lt,"xlm-roberta"),_Lt.forEach(t),GGo=r(uqe," \u2014 "),xz=n(uqe,"A",{href:!0});var bLt=s(xz);OGo=r(bLt,"XLMRobertaForCausalLM"),bLt.forEach(t),VGo=r(uqe," (XLM-RoBERTa model)"),uqe.forEach(t),XGo=i(Q),Rv=n(Q,"LI",{});var pqe=s(Rv);bbe=n(pqe,"STRONG",{});var vLt=s(bbe);zGo=r(vLt,"xlm-roberta-xl"),vLt.forEach(t),QGo=r(pqe," \u2014 "),$z=n(pqe,"A",{href:!0});var FLt=s($z);WGo=r(FLt,"XLMRobertaXLForCausalLM"),FLt.forEach(t),UGo=r(pqe," (XLM-RoBERTa-XL model)"),pqe.forEach(t),HGo=i(Q),Pv=n(Q,"LI",{});var _qe=s(Pv);vbe=n(_qe,"STRONG",{});var TLt=s(vbe);JGo=r(TLt,"xlnet"),TLt.forEach(t),YGo=r(_qe," \u2014 "),kz=n(_qe,"A",{href:!0});var MLt=s(kz);KGo=r(MLt,"XLNetLMHeadModel"),MLt.forEach(t),ZGo=r(_qe," (XLNet model)"),_qe.forEach(t),Q.forEach(t),eOo=i(Ta),Bv=n(Ta,"P",{});var bqe=s(Bv);oOo=r(bqe,"The model is set in evaluation mode by default using "),Fbe=n(bqe,"CODE",{});var ELt=s(Fbe);rOo=r(ELt,"model.eval()"),ELt.forEach(t),tOo=r(bqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tbe=n(bqe,"CODE",{});var CLt=s(Tbe);aOo=r(CLt,"model.train()"),CLt.forEach(t),bqe.forEach(t),nOo=i(Ta),T(Iv.$$.fragment,Ta),Ta.forEach(t),wl.forEach(t),qJe=i(m),Ed=n(m,"H2",{class:!0});var KKe=s(Ed);Nv=n(KKe,"A",{id:!0,class:!0,href:!0});var wLt=s(Nv);Mbe=n(wLt,"SPAN",{});var ALt=s(Mbe);T(U9.$$.fragment,ALt),ALt.forEach(t),wLt.forEach(t),sOo=i(KKe),Ebe=n(KKe,"SPAN",{});var yLt=s(Ebe);lOo=r(yLt,"AutoModelForMaskedLM"),yLt.forEach(t),KKe.forEach(t),jJe=i(m),Io=n(m,"DIV",{class:!0});var Al=s(Io);T(H9.$$.fragment,Al),iOo=i(Al),Cd=n(Al,"P",{});var _se=s(Cd);dOo=r(_se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Sz=n(_se,"A",{href:!0});var LLt=s(Sz);cOo=r(LLt,"from_pretrained()"),LLt.forEach(t),mOo=r(_se," class method or the "),Rz=n(_se,"A",{href:!0});var xLt=s(Rz);fOo=r(xLt,"from_config()"),xLt.forEach(t),gOo=r(_se,` class
method.`),_se.forEach(t),hOo=i(Al),J9=n(Al,"P",{});var ZKe=s(J9);uOo=r(ZKe,"This class cannot be instantiated directly using "),Cbe=n(ZKe,"CODE",{});var $Lt=s(Cbe);pOo=r($Lt,"__init__()"),$Lt.forEach(t),_Oo=r(ZKe," (throws an error)."),ZKe.forEach(t),bOo=i(Al),vt=n(Al,"DIV",{class:!0});var iL=s(vt);T(Y9.$$.fragment,iL),vOo=i(iL),wbe=n(iL,"P",{});var kLt=s(wbe);FOo=r(kLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kLt.forEach(t),TOo=i(iL),wd=n(iL,"P",{});var bse=s(wd);MOo=r(bse,`Note:
Loading a model from its configuration file does `),Abe=n(bse,"STRONG",{});var SLt=s(Abe);EOo=r(SLt,"not"),SLt.forEach(t),COo=r(bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(bse,"A",{href:!0});var RLt=s(Pz);wOo=r(RLt,"from_pretrained()"),RLt.forEach(t),AOo=r(bse," to load the model weights."),bse.forEach(t),yOo=i(iL),T(qv.$$.fragment,iL),iL.forEach(t),LOo=i(Al),oo=n(Al,"DIV",{class:!0});var Ma=s(oo);T(K9.$$.fragment,Ma),xOo=i(Ma),ybe=n(Ma,"P",{});var PLt=s(ybe);$Oo=r(PLt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PLt.forEach(t),kOo=i(Ma),Za=n(Ma,"P",{});var dL=s(Za);SOo=r(dL,"The model class to instantiate is selected based on the "),Lbe=n(dL,"CODE",{});var BLt=s(Lbe);ROo=r(BLt,"model_type"),BLt.forEach(t),POo=r(dL,` property of the config object (either
passed as an argument or loaded from `),xbe=n(dL,"CODE",{});var ILt=s(xbe);BOo=r(ILt,"pretrained_model_name_or_path"),ILt.forEach(t),IOo=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=n(dL,"CODE",{});var NLt=s($be);NOo=r(NLt,"pretrained_model_name_or_path"),NLt.forEach(t),qOo=r(dL,":"),dL.forEach(t),jOo=i(Ma),U=n(Ma,"UL",{});var Y=s(U);jv=n(Y,"LI",{});var vqe=s(jv);kbe=n(vqe,"STRONG",{});var qLt=s(kbe);DOo=r(qLt,"albert"),qLt.forEach(t),GOo=r(vqe," \u2014 "),Bz=n(vqe,"A",{href:!0});var jLt=s(Bz);OOo=r(jLt,"AlbertForMaskedLM"),jLt.forEach(t),VOo=r(vqe," (ALBERT model)"),vqe.forEach(t),XOo=i(Y),Dv=n(Y,"LI",{});var Fqe=s(Dv);Sbe=n(Fqe,"STRONG",{});var DLt=s(Sbe);zOo=r(DLt,"bart"),DLt.forEach(t),QOo=r(Fqe," \u2014 "),Iz=n(Fqe,"A",{href:!0});var GLt=s(Iz);WOo=r(GLt,"BartForConditionalGeneration"),GLt.forEach(t),UOo=r(Fqe," (BART model)"),Fqe.forEach(t),HOo=i(Y),Gv=n(Y,"LI",{});var Tqe=s(Gv);Rbe=n(Tqe,"STRONG",{});var OLt=s(Rbe);JOo=r(OLt,"bert"),OLt.forEach(t),YOo=r(Tqe," \u2014 "),Nz=n(Tqe,"A",{href:!0});var VLt=s(Nz);KOo=r(VLt,"BertForMaskedLM"),VLt.forEach(t),ZOo=r(Tqe," (BERT model)"),Tqe.forEach(t),eVo=i(Y),Ov=n(Y,"LI",{});var Mqe=s(Ov);Pbe=n(Mqe,"STRONG",{});var XLt=s(Pbe);oVo=r(XLt,"big_bird"),XLt.forEach(t),rVo=r(Mqe," \u2014 "),qz=n(Mqe,"A",{href:!0});var zLt=s(qz);tVo=r(zLt,"BigBirdForMaskedLM"),zLt.forEach(t),aVo=r(Mqe," (BigBird model)"),Mqe.forEach(t),nVo=i(Y),Vv=n(Y,"LI",{});var Eqe=s(Vv);Bbe=n(Eqe,"STRONG",{});var QLt=s(Bbe);sVo=r(QLt,"camembert"),QLt.forEach(t),lVo=r(Eqe," \u2014 "),jz=n(Eqe,"A",{href:!0});var WLt=s(jz);iVo=r(WLt,"CamembertForMaskedLM"),WLt.forEach(t),dVo=r(Eqe," (CamemBERT model)"),Eqe.forEach(t),cVo=i(Y),Xv=n(Y,"LI",{});var Cqe=s(Xv);Ibe=n(Cqe,"STRONG",{});var ULt=s(Ibe);mVo=r(ULt,"convbert"),ULt.forEach(t),fVo=r(Cqe," \u2014 "),Dz=n(Cqe,"A",{href:!0});var HLt=s(Dz);gVo=r(HLt,"ConvBertForMaskedLM"),HLt.forEach(t),hVo=r(Cqe," (ConvBERT model)"),Cqe.forEach(t),uVo=i(Y),zv=n(Y,"LI",{});var wqe=s(zv);Nbe=n(wqe,"STRONG",{});var JLt=s(Nbe);pVo=r(JLt,"data2vec-text"),JLt.forEach(t),_Vo=r(wqe," \u2014 "),Gz=n(wqe,"A",{href:!0});var YLt=s(Gz);bVo=r(YLt,"Data2VecTextForMaskedLM"),YLt.forEach(t),vVo=r(wqe," (Data2VecText model)"),wqe.forEach(t),FVo=i(Y),Qv=n(Y,"LI",{});var Aqe=s(Qv);qbe=n(Aqe,"STRONG",{});var KLt=s(qbe);TVo=r(KLt,"deberta"),KLt.forEach(t),MVo=r(Aqe," \u2014 "),Oz=n(Aqe,"A",{href:!0});var ZLt=s(Oz);EVo=r(ZLt,"DebertaForMaskedLM"),ZLt.forEach(t),CVo=r(Aqe," (DeBERTa model)"),Aqe.forEach(t),wVo=i(Y),Wv=n(Y,"LI",{});var yqe=s(Wv);jbe=n(yqe,"STRONG",{});var e8t=s(jbe);AVo=r(e8t,"deberta-v2"),e8t.forEach(t),yVo=r(yqe," \u2014 "),Vz=n(yqe,"A",{href:!0});var o8t=s(Vz);LVo=r(o8t,"DebertaV2ForMaskedLM"),o8t.forEach(t),xVo=r(yqe," (DeBERTa-v2 model)"),yqe.forEach(t),$Vo=i(Y),Uv=n(Y,"LI",{});var Lqe=s(Uv);Dbe=n(Lqe,"STRONG",{});var r8t=s(Dbe);kVo=r(r8t,"distilbert"),r8t.forEach(t),SVo=r(Lqe," \u2014 "),Xz=n(Lqe,"A",{href:!0});var t8t=s(Xz);RVo=r(t8t,"DistilBertForMaskedLM"),t8t.forEach(t),PVo=r(Lqe," (DistilBERT model)"),Lqe.forEach(t),BVo=i(Y),Hv=n(Y,"LI",{});var xqe=s(Hv);Gbe=n(xqe,"STRONG",{});var a8t=s(Gbe);IVo=r(a8t,"electra"),a8t.forEach(t),NVo=r(xqe," \u2014 "),zz=n(xqe,"A",{href:!0});var n8t=s(zz);qVo=r(n8t,"ElectraForMaskedLM"),n8t.forEach(t),jVo=r(xqe," (ELECTRA model)"),xqe.forEach(t),DVo=i(Y),Jv=n(Y,"LI",{});var $qe=s(Jv);Obe=n($qe,"STRONG",{});var s8t=s(Obe);GVo=r(s8t,"flaubert"),s8t.forEach(t),OVo=r($qe," \u2014 "),Qz=n($qe,"A",{href:!0});var l8t=s(Qz);VVo=r(l8t,"FlaubertWithLMHeadModel"),l8t.forEach(t),XVo=r($qe," (FlauBERT model)"),$qe.forEach(t),zVo=i(Y),Yv=n(Y,"LI",{});var kqe=s(Yv);Vbe=n(kqe,"STRONG",{});var i8t=s(Vbe);QVo=r(i8t,"fnet"),i8t.forEach(t),WVo=r(kqe," \u2014 "),Wz=n(kqe,"A",{href:!0});var d8t=s(Wz);UVo=r(d8t,"FNetForMaskedLM"),d8t.forEach(t),HVo=r(kqe," (FNet model)"),kqe.forEach(t),JVo=i(Y),Kv=n(Y,"LI",{});var Sqe=s(Kv);Xbe=n(Sqe,"STRONG",{});var c8t=s(Xbe);YVo=r(c8t,"funnel"),c8t.forEach(t),KVo=r(Sqe," \u2014 "),Uz=n(Sqe,"A",{href:!0});var m8t=s(Uz);ZVo=r(m8t,"FunnelForMaskedLM"),m8t.forEach(t),eXo=r(Sqe," (Funnel Transformer model)"),Sqe.forEach(t),oXo=i(Y),Zv=n(Y,"LI",{});var Rqe=s(Zv);zbe=n(Rqe,"STRONG",{});var f8t=s(zbe);rXo=r(f8t,"ibert"),f8t.forEach(t),tXo=r(Rqe," \u2014 "),Hz=n(Rqe,"A",{href:!0});var g8t=s(Hz);aXo=r(g8t,"IBertForMaskedLM"),g8t.forEach(t),nXo=r(Rqe," (I-BERT model)"),Rqe.forEach(t),sXo=i(Y),e1=n(Y,"LI",{});var Pqe=s(e1);Qbe=n(Pqe,"STRONG",{});var h8t=s(Qbe);lXo=r(h8t,"layoutlm"),h8t.forEach(t),iXo=r(Pqe," \u2014 "),Jz=n(Pqe,"A",{href:!0});var u8t=s(Jz);dXo=r(u8t,"LayoutLMForMaskedLM"),u8t.forEach(t),cXo=r(Pqe," (LayoutLM model)"),Pqe.forEach(t),mXo=i(Y),o1=n(Y,"LI",{});var Bqe=s(o1);Wbe=n(Bqe,"STRONG",{});var p8t=s(Wbe);fXo=r(p8t,"longformer"),p8t.forEach(t),gXo=r(Bqe," \u2014 "),Yz=n(Bqe,"A",{href:!0});var _8t=s(Yz);hXo=r(_8t,"LongformerForMaskedLM"),_8t.forEach(t),uXo=r(Bqe," (Longformer model)"),Bqe.forEach(t),pXo=i(Y),r1=n(Y,"LI",{});var Iqe=s(r1);Ube=n(Iqe,"STRONG",{});var b8t=s(Ube);_Xo=r(b8t,"luke"),b8t.forEach(t),bXo=r(Iqe," \u2014 "),Kz=n(Iqe,"A",{href:!0});var v8t=s(Kz);vXo=r(v8t,"LukeForMaskedLM"),v8t.forEach(t),FXo=r(Iqe," (LUKE model)"),Iqe.forEach(t),TXo=i(Y),t1=n(Y,"LI",{});var Nqe=s(t1);Hbe=n(Nqe,"STRONG",{});var F8t=s(Hbe);MXo=r(F8t,"mbart"),F8t.forEach(t),EXo=r(Nqe," \u2014 "),Zz=n(Nqe,"A",{href:!0});var T8t=s(Zz);CXo=r(T8t,"MBartForConditionalGeneration"),T8t.forEach(t),wXo=r(Nqe," (mBART model)"),Nqe.forEach(t),AXo=i(Y),a1=n(Y,"LI",{});var qqe=s(a1);Jbe=n(qqe,"STRONG",{});var M8t=s(Jbe);yXo=r(M8t,"megatron-bert"),M8t.forEach(t),LXo=r(qqe," \u2014 "),eQ=n(qqe,"A",{href:!0});var E8t=s(eQ);xXo=r(E8t,"MegatronBertForMaskedLM"),E8t.forEach(t),$Xo=r(qqe," (Megatron-BERT model)"),qqe.forEach(t),kXo=i(Y),n1=n(Y,"LI",{});var jqe=s(n1);Ybe=n(jqe,"STRONG",{});var C8t=s(Ybe);SXo=r(C8t,"mobilebert"),C8t.forEach(t),RXo=r(jqe," \u2014 "),oQ=n(jqe,"A",{href:!0});var w8t=s(oQ);PXo=r(w8t,"MobileBertForMaskedLM"),w8t.forEach(t),BXo=r(jqe," (MobileBERT model)"),jqe.forEach(t),IXo=i(Y),s1=n(Y,"LI",{});var Dqe=s(s1);Kbe=n(Dqe,"STRONG",{});var A8t=s(Kbe);NXo=r(A8t,"mpnet"),A8t.forEach(t),qXo=r(Dqe," \u2014 "),rQ=n(Dqe,"A",{href:!0});var y8t=s(rQ);jXo=r(y8t,"MPNetForMaskedLM"),y8t.forEach(t),DXo=r(Dqe," (MPNet model)"),Dqe.forEach(t),GXo=i(Y),l1=n(Y,"LI",{});var Gqe=s(l1);Zbe=n(Gqe,"STRONG",{});var L8t=s(Zbe);OXo=r(L8t,"mvp"),L8t.forEach(t),VXo=r(Gqe," \u2014 "),tQ=n(Gqe,"A",{href:!0});var x8t=s(tQ);XXo=r(x8t,"MvpForConditionalGeneration"),x8t.forEach(t),zXo=r(Gqe," (MVP model)"),Gqe.forEach(t),QXo=i(Y),i1=n(Y,"LI",{});var Oqe=s(i1);e2e=n(Oqe,"STRONG",{});var $8t=s(e2e);WXo=r($8t,"nezha"),$8t.forEach(t),UXo=r(Oqe," \u2014 "),aQ=n(Oqe,"A",{href:!0});var k8t=s(aQ);HXo=r(k8t,"NezhaForMaskedLM"),k8t.forEach(t),JXo=r(Oqe," (Nezha model)"),Oqe.forEach(t),YXo=i(Y),d1=n(Y,"LI",{});var Vqe=s(d1);o2e=n(Vqe,"STRONG",{});var S8t=s(o2e);KXo=r(S8t,"nystromformer"),S8t.forEach(t),ZXo=r(Vqe," \u2014 "),nQ=n(Vqe,"A",{href:!0});var R8t=s(nQ);ezo=r(R8t,"NystromformerForMaskedLM"),R8t.forEach(t),ozo=r(Vqe," (Nystr\xF6mformer model)"),Vqe.forEach(t),rzo=i(Y),c1=n(Y,"LI",{});var Xqe=s(c1);r2e=n(Xqe,"STRONG",{});var P8t=s(r2e);tzo=r(P8t,"perceiver"),P8t.forEach(t),azo=r(Xqe," \u2014 "),sQ=n(Xqe,"A",{href:!0});var B8t=s(sQ);nzo=r(B8t,"PerceiverForMaskedLM"),B8t.forEach(t),szo=r(Xqe," (Perceiver model)"),Xqe.forEach(t),lzo=i(Y),m1=n(Y,"LI",{});var zqe=s(m1);t2e=n(zqe,"STRONG",{});var I8t=s(t2e);izo=r(I8t,"qdqbert"),I8t.forEach(t),dzo=r(zqe," \u2014 "),lQ=n(zqe,"A",{href:!0});var N8t=s(lQ);czo=r(N8t,"QDQBertForMaskedLM"),N8t.forEach(t),mzo=r(zqe," (QDQBert model)"),zqe.forEach(t),fzo=i(Y),f1=n(Y,"LI",{});var Qqe=s(f1);a2e=n(Qqe,"STRONG",{});var q8t=s(a2e);gzo=r(q8t,"reformer"),q8t.forEach(t),hzo=r(Qqe," \u2014 "),iQ=n(Qqe,"A",{href:!0});var j8t=s(iQ);uzo=r(j8t,"ReformerForMaskedLM"),j8t.forEach(t),pzo=r(Qqe," (Reformer model)"),Qqe.forEach(t),_zo=i(Y),g1=n(Y,"LI",{});var Wqe=s(g1);n2e=n(Wqe,"STRONG",{});var D8t=s(n2e);bzo=r(D8t,"rembert"),D8t.forEach(t),vzo=r(Wqe," \u2014 "),dQ=n(Wqe,"A",{href:!0});var G8t=s(dQ);Fzo=r(G8t,"RemBertForMaskedLM"),G8t.forEach(t),Tzo=r(Wqe," (RemBERT model)"),Wqe.forEach(t),Mzo=i(Y),h1=n(Y,"LI",{});var Uqe=s(h1);s2e=n(Uqe,"STRONG",{});var O8t=s(s2e);Ezo=r(O8t,"roberta"),O8t.forEach(t),Czo=r(Uqe," \u2014 "),cQ=n(Uqe,"A",{href:!0});var V8t=s(cQ);wzo=r(V8t,"RobertaForMaskedLM"),V8t.forEach(t),Azo=r(Uqe," (RoBERTa model)"),Uqe.forEach(t),yzo=i(Y),u1=n(Y,"LI",{});var Hqe=s(u1);l2e=n(Hqe,"STRONG",{});var X8t=s(l2e);Lzo=r(X8t,"roformer"),X8t.forEach(t),xzo=r(Hqe," \u2014 "),mQ=n(Hqe,"A",{href:!0});var z8t=s(mQ);$zo=r(z8t,"RoFormerForMaskedLM"),z8t.forEach(t),kzo=r(Hqe," (RoFormer model)"),Hqe.forEach(t),Szo=i(Y),p1=n(Y,"LI",{});var Jqe=s(p1);i2e=n(Jqe,"STRONG",{});var Q8t=s(i2e);Rzo=r(Q8t,"squeezebert"),Q8t.forEach(t),Pzo=r(Jqe," \u2014 "),fQ=n(Jqe,"A",{href:!0});var W8t=s(fQ);Bzo=r(W8t,"SqueezeBertForMaskedLM"),W8t.forEach(t),Izo=r(Jqe," (SqueezeBERT model)"),Jqe.forEach(t),Nzo=i(Y),_1=n(Y,"LI",{});var Yqe=s(_1);d2e=n(Yqe,"STRONG",{});var U8t=s(d2e);qzo=r(U8t,"tapas"),U8t.forEach(t),jzo=r(Yqe," \u2014 "),gQ=n(Yqe,"A",{href:!0});var H8t=s(gQ);Dzo=r(H8t,"TapasForMaskedLM"),H8t.forEach(t),Gzo=r(Yqe," (TAPAS model)"),Yqe.forEach(t),Ozo=i(Y),b1=n(Y,"LI",{});var Kqe=s(b1);c2e=n(Kqe,"STRONG",{});var J8t=s(c2e);Vzo=r(J8t,"wav2vec2"),J8t.forEach(t),Xzo=r(Kqe," \u2014 "),m2e=n(Kqe,"CODE",{});var Y8t=s(m2e);zzo=r(Y8t,"Wav2Vec2ForMaskedLM"),Y8t.forEach(t),Qzo=r(Kqe," (Wav2Vec2 model)"),Kqe.forEach(t),Wzo=i(Y),v1=n(Y,"LI",{});var Zqe=s(v1);f2e=n(Zqe,"STRONG",{});var K8t=s(f2e);Uzo=r(K8t,"xlm"),K8t.forEach(t),Hzo=r(Zqe," \u2014 "),hQ=n(Zqe,"A",{href:!0});var Z8t=s(hQ);Jzo=r(Z8t,"XLMWithLMHeadModel"),Z8t.forEach(t),Yzo=r(Zqe," (XLM model)"),Zqe.forEach(t),Kzo=i(Y),F1=n(Y,"LI",{});var eje=s(F1);g2e=n(eje,"STRONG",{});var e9t=s(g2e);Zzo=r(e9t,"xlm-roberta"),e9t.forEach(t),eQo=r(eje," \u2014 "),uQ=n(eje,"A",{href:!0});var o9t=s(uQ);oQo=r(o9t,"XLMRobertaForMaskedLM"),o9t.forEach(t),rQo=r(eje," (XLM-RoBERTa model)"),eje.forEach(t),tQo=i(Y),T1=n(Y,"LI",{});var oje=s(T1);h2e=n(oje,"STRONG",{});var r9t=s(h2e);aQo=r(r9t,"xlm-roberta-xl"),r9t.forEach(t),nQo=r(oje," \u2014 "),pQ=n(oje,"A",{href:!0});var t9t=s(pQ);sQo=r(t9t,"XLMRobertaXLForMaskedLM"),t9t.forEach(t),lQo=r(oje," (XLM-RoBERTa-XL model)"),oje.forEach(t),iQo=i(Y),M1=n(Y,"LI",{});var rje=s(M1);u2e=n(rje,"STRONG",{});var a9t=s(u2e);dQo=r(a9t,"yoso"),a9t.forEach(t),cQo=r(rje," \u2014 "),_Q=n(rje,"A",{href:!0});var n9t=s(_Q);mQo=r(n9t,"YosoForMaskedLM"),n9t.forEach(t),fQo=r(rje," (YOSO model)"),rje.forEach(t),Y.forEach(t),gQo=i(Ma),E1=n(Ma,"P",{});var tje=s(E1);hQo=r(tje,"The model is set in evaluation mode by default using "),p2e=n(tje,"CODE",{});var s9t=s(p2e);uQo=r(s9t,"model.eval()"),s9t.forEach(t),pQo=r(tje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_2e=n(tje,"CODE",{});var l9t=s(_2e);_Qo=r(l9t,"model.train()"),l9t.forEach(t),tje.forEach(t),bQo=i(Ma),T(C1.$$.fragment,Ma),Ma.forEach(t),Al.forEach(t),DJe=i(m),Ad=n(m,"H2",{class:!0});var eZe=s(Ad);w1=n(eZe,"A",{id:!0,class:!0,href:!0});var i9t=s(w1);b2e=n(i9t,"SPAN",{});var d9t=s(b2e);T(Z9.$$.fragment,d9t),d9t.forEach(t),i9t.forEach(t),vQo=i(eZe),v2e=n(eZe,"SPAN",{});var c9t=s(v2e);FQo=r(c9t,"AutoModelForSeq2SeqLM"),c9t.forEach(t),eZe.forEach(t),GJe=i(m),No=n(m,"DIV",{class:!0});var yl=s(No);T(ex.$$.fragment,yl),TQo=i(yl),yd=n(yl,"P",{});var vse=s(yd);MQo=r(vse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),bQ=n(vse,"A",{href:!0});var m9t=s(bQ);EQo=r(m9t,"from_pretrained()"),m9t.forEach(t),CQo=r(vse," class method or the "),vQ=n(vse,"A",{href:!0});var f9t=s(vQ);wQo=r(f9t,"from_config()"),f9t.forEach(t),AQo=r(vse,` class
method.`),vse.forEach(t),yQo=i(yl),ox=n(yl,"P",{});var oZe=s(ox);LQo=r(oZe,"This class cannot be instantiated directly using "),F2e=n(oZe,"CODE",{});var g9t=s(F2e);xQo=r(g9t,"__init__()"),g9t.forEach(t),$Qo=r(oZe," (throws an error)."),oZe.forEach(t),kQo=i(yl),Ft=n(yl,"DIV",{class:!0});var cL=s(Ft);T(rx.$$.fragment,cL),SQo=i(cL),T2e=n(cL,"P",{});var h9t=s(T2e);RQo=r(h9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h9t.forEach(t),PQo=i(cL),Ld=n(cL,"P",{});var Fse=s(Ld);BQo=r(Fse,`Note:
Loading a model from its configuration file does `),M2e=n(Fse,"STRONG",{});var u9t=s(M2e);IQo=r(u9t,"not"),u9t.forEach(t),NQo=r(Fse,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(Fse,"A",{href:!0});var p9t=s(FQ);qQo=r(p9t,"from_pretrained()"),p9t.forEach(t),jQo=r(Fse," to load the model weights."),Fse.forEach(t),DQo=i(cL),T(A1.$$.fragment,cL),cL.forEach(t),GQo=i(yl),ro=n(yl,"DIV",{class:!0});var Ea=s(ro);T(tx.$$.fragment,Ea),OQo=i(Ea),E2e=n(Ea,"P",{});var _9t=s(E2e);VQo=r(_9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_9t.forEach(t),XQo=i(Ea),en=n(Ea,"P",{});var mL=s(en);zQo=r(mL,"The model class to instantiate is selected based on the "),C2e=n(mL,"CODE",{});var b9t=s(C2e);QQo=r(b9t,"model_type"),b9t.forEach(t),WQo=r(mL,` property of the config object (either
passed as an argument or loaded from `),w2e=n(mL,"CODE",{});var v9t=s(w2e);UQo=r(v9t,"pretrained_model_name_or_path"),v9t.forEach(t),HQo=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(mL,"CODE",{});var F9t=s(A2e);JQo=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),YQo=r(mL,":"),mL.forEach(t),KQo=i(Ea),me=n(Ea,"UL",{});var pe=s(me);y1=n(pe,"LI",{});var aje=s(y1);y2e=n(aje,"STRONG",{});var T9t=s(y2e);ZQo=r(T9t,"bart"),T9t.forEach(t),eWo=r(aje," \u2014 "),TQ=n(aje,"A",{href:!0});var M9t=s(TQ);oWo=r(M9t,"BartForConditionalGeneration"),M9t.forEach(t),rWo=r(aje," (BART model)"),aje.forEach(t),tWo=i(pe),L1=n(pe,"LI",{});var nje=s(L1);L2e=n(nje,"STRONG",{});var E9t=s(L2e);aWo=r(E9t,"bigbird_pegasus"),E9t.forEach(t),nWo=r(nje," \u2014 "),MQ=n(nje,"A",{href:!0});var C9t=s(MQ);sWo=r(C9t,"BigBirdPegasusForConditionalGeneration"),C9t.forEach(t),lWo=r(nje," (BigBird-Pegasus model)"),nje.forEach(t),iWo=i(pe),x1=n(pe,"LI",{});var sje=s(x1);x2e=n(sje,"STRONG",{});var w9t=s(x2e);dWo=r(w9t,"blenderbot"),w9t.forEach(t),cWo=r(sje," \u2014 "),EQ=n(sje,"A",{href:!0});var A9t=s(EQ);mWo=r(A9t,"BlenderbotForConditionalGeneration"),A9t.forEach(t),fWo=r(sje," (Blenderbot model)"),sje.forEach(t),gWo=i(pe),$1=n(pe,"LI",{});var lje=s($1);$2e=n(lje,"STRONG",{});var y9t=s($2e);hWo=r(y9t,"blenderbot-small"),y9t.forEach(t),uWo=r(lje," \u2014 "),CQ=n(lje,"A",{href:!0});var L9t=s(CQ);pWo=r(L9t,"BlenderbotSmallForConditionalGeneration"),L9t.forEach(t),_Wo=r(lje," (BlenderbotSmall model)"),lje.forEach(t),bWo=i(pe),k1=n(pe,"LI",{});var ije=s(k1);k2e=n(ije,"STRONG",{});var x9t=s(k2e);vWo=r(x9t,"encoder-decoder"),x9t.forEach(t),FWo=r(ije," \u2014 "),wQ=n(ije,"A",{href:!0});var $9t=s(wQ);TWo=r($9t,"EncoderDecoderModel"),$9t.forEach(t),MWo=r(ije," (Encoder decoder model)"),ije.forEach(t),EWo=i(pe),S1=n(pe,"LI",{});var dje=s(S1);S2e=n(dje,"STRONG",{});var k9t=s(S2e);CWo=r(k9t,"fsmt"),k9t.forEach(t),wWo=r(dje," \u2014 "),AQ=n(dje,"A",{href:!0});var S9t=s(AQ);AWo=r(S9t,"FSMTForConditionalGeneration"),S9t.forEach(t),yWo=r(dje," (FairSeq Machine-Translation model)"),dje.forEach(t),LWo=i(pe),R1=n(pe,"LI",{});var cje=s(R1);R2e=n(cje,"STRONG",{});var R9t=s(R2e);xWo=r(R9t,"led"),R9t.forEach(t),$Wo=r(cje," \u2014 "),yQ=n(cje,"A",{href:!0});var P9t=s(yQ);kWo=r(P9t,"LEDForConditionalGeneration"),P9t.forEach(t),SWo=r(cje," (LED model)"),cje.forEach(t),RWo=i(pe),P1=n(pe,"LI",{});var mje=s(P1);P2e=n(mje,"STRONG",{});var B9t=s(P2e);PWo=r(B9t,"longt5"),B9t.forEach(t),BWo=r(mje," \u2014 "),LQ=n(mje,"A",{href:!0});var I9t=s(LQ);IWo=r(I9t,"LongT5ForConditionalGeneration"),I9t.forEach(t),NWo=r(mje," (LongT5 model)"),mje.forEach(t),qWo=i(pe),B1=n(pe,"LI",{});var fje=s(B1);B2e=n(fje,"STRONG",{});var N9t=s(B2e);jWo=r(N9t,"m2m_100"),N9t.forEach(t),DWo=r(fje," \u2014 "),xQ=n(fje,"A",{href:!0});var q9t=s(xQ);GWo=r(q9t,"M2M100ForConditionalGeneration"),q9t.forEach(t),OWo=r(fje," (M2M100 model)"),fje.forEach(t),VWo=i(pe),I1=n(pe,"LI",{});var gje=s(I1);I2e=n(gje,"STRONG",{});var j9t=s(I2e);XWo=r(j9t,"marian"),j9t.forEach(t),zWo=r(gje," \u2014 "),$Q=n(gje,"A",{href:!0});var D9t=s($Q);QWo=r(D9t,"MarianMTModel"),D9t.forEach(t),WWo=r(gje," (Marian model)"),gje.forEach(t),UWo=i(pe),N1=n(pe,"LI",{});var hje=s(N1);N2e=n(hje,"STRONG",{});var G9t=s(N2e);HWo=r(G9t,"mbart"),G9t.forEach(t),JWo=r(hje," \u2014 "),kQ=n(hje,"A",{href:!0});var O9t=s(kQ);YWo=r(O9t,"MBartForConditionalGeneration"),O9t.forEach(t),KWo=r(hje," (mBART model)"),hje.forEach(t),ZWo=i(pe),q1=n(pe,"LI",{});var uje=s(q1);q2e=n(uje,"STRONG",{});var V9t=s(q2e);eUo=r(V9t,"mt5"),V9t.forEach(t),oUo=r(uje," \u2014 "),SQ=n(uje,"A",{href:!0});var X9t=s(SQ);rUo=r(X9t,"MT5ForConditionalGeneration"),X9t.forEach(t),tUo=r(uje," (MT5 model)"),uje.forEach(t),aUo=i(pe),j1=n(pe,"LI",{});var pje=s(j1);j2e=n(pje,"STRONG",{});var z9t=s(j2e);nUo=r(z9t,"mvp"),z9t.forEach(t),sUo=r(pje," \u2014 "),RQ=n(pje,"A",{href:!0});var Q9t=s(RQ);lUo=r(Q9t,"MvpForConditionalGeneration"),Q9t.forEach(t),iUo=r(pje," (MVP model)"),pje.forEach(t),dUo=i(pe),D1=n(pe,"LI",{});var _je=s(D1);D2e=n(_je,"STRONG",{});var W9t=s(D2e);cUo=r(W9t,"nllb"),W9t.forEach(t),mUo=r(_je," \u2014 "),PQ=n(_je,"A",{href:!0});var U9t=s(PQ);fUo=r(U9t,"M2M100ForConditionalGeneration"),U9t.forEach(t),gUo=r(_je," (NLLB model)"),_je.forEach(t),hUo=i(pe),G1=n(pe,"LI",{});var bje=s(G1);G2e=n(bje,"STRONG",{});var H9t=s(G2e);uUo=r(H9t,"pegasus"),H9t.forEach(t),pUo=r(bje," \u2014 "),BQ=n(bje,"A",{href:!0});var J9t=s(BQ);_Uo=r(J9t,"PegasusForConditionalGeneration"),J9t.forEach(t),bUo=r(bje," (Pegasus model)"),bje.forEach(t),vUo=i(pe),O1=n(pe,"LI",{});var vje=s(O1);O2e=n(vje,"STRONG",{});var Y9t=s(O2e);FUo=r(Y9t,"pegasus_x"),Y9t.forEach(t),TUo=r(vje," \u2014 "),IQ=n(vje,"A",{href:!0});var K9t=s(IQ);MUo=r(K9t,"PegasusXForConditionalGeneration"),K9t.forEach(t),EUo=r(vje," (PEGASUS-X model)"),vje.forEach(t),CUo=i(pe),V1=n(pe,"LI",{});var Fje=s(V1);V2e=n(Fje,"STRONG",{});var Z9t=s(V2e);wUo=r(Z9t,"plbart"),Z9t.forEach(t),AUo=r(Fje," \u2014 "),NQ=n(Fje,"A",{href:!0});var ext=s(NQ);yUo=r(ext,"PLBartForConditionalGeneration"),ext.forEach(t),LUo=r(Fje," (PLBart model)"),Fje.forEach(t),xUo=i(pe),X1=n(pe,"LI",{});var Tje=s(X1);X2e=n(Tje,"STRONG",{});var oxt=s(X2e);$Uo=r(oxt,"prophetnet"),oxt.forEach(t),kUo=r(Tje," \u2014 "),qQ=n(Tje,"A",{href:!0});var rxt=s(qQ);SUo=r(rxt,"ProphetNetForConditionalGeneration"),rxt.forEach(t),RUo=r(Tje," (ProphetNet model)"),Tje.forEach(t),PUo=i(pe),z1=n(pe,"LI",{});var Mje=s(z1);z2e=n(Mje,"STRONG",{});var txt=s(z2e);BUo=r(txt,"t5"),txt.forEach(t),IUo=r(Mje," \u2014 "),jQ=n(Mje,"A",{href:!0});var axt=s(jQ);NUo=r(axt,"T5ForConditionalGeneration"),axt.forEach(t),qUo=r(Mje," (T5 model)"),Mje.forEach(t),jUo=i(pe),Q1=n(pe,"LI",{});var Eje=s(Q1);Q2e=n(Eje,"STRONG",{});var nxt=s(Q2e);DUo=r(nxt,"xlm-prophetnet"),nxt.forEach(t),GUo=r(Eje," \u2014 "),DQ=n(Eje,"A",{href:!0});var sxt=s(DQ);OUo=r(sxt,"XLMProphetNetForConditionalGeneration"),sxt.forEach(t),VUo=r(Eje," (XLM-ProphetNet model)"),Eje.forEach(t),pe.forEach(t),XUo=i(Ea),W1=n(Ea,"P",{});var Cje=s(W1);zUo=r(Cje,"The model is set in evaluation mode by default using "),W2e=n(Cje,"CODE",{});var lxt=s(W2e);QUo=r(lxt,"model.eval()"),lxt.forEach(t),WUo=r(Cje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U2e=n(Cje,"CODE",{});var ixt=s(U2e);UUo=r(ixt,"model.train()"),ixt.forEach(t),Cje.forEach(t),HUo=i(Ea),T(U1.$$.fragment,Ea),Ea.forEach(t),yl.forEach(t),OJe=i(m),xd=n(m,"H2",{class:!0});var rZe=s(xd);H1=n(rZe,"A",{id:!0,class:!0,href:!0});var dxt=s(H1);H2e=n(dxt,"SPAN",{});var cxt=s(H2e);T(ax.$$.fragment,cxt),cxt.forEach(t),dxt.forEach(t),JUo=i(rZe),J2e=n(rZe,"SPAN",{});var mxt=s(J2e);YUo=r(mxt,"AutoModelForSequenceClassification"),mxt.forEach(t),rZe.forEach(t),VJe=i(m),qo=n(m,"DIV",{class:!0});var Ll=s(qo);T(nx.$$.fragment,Ll),KUo=i(Ll),$d=n(Ll,"P",{});var Tse=s($d);ZUo=r(Tse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GQ=n(Tse,"A",{href:!0});var fxt=s(GQ);eHo=r(fxt,"from_pretrained()"),fxt.forEach(t),oHo=r(Tse," class method or the "),OQ=n(Tse,"A",{href:!0});var gxt=s(OQ);rHo=r(gxt,"from_config()"),gxt.forEach(t),tHo=r(Tse,` class
method.`),Tse.forEach(t),aHo=i(Ll),sx=n(Ll,"P",{});var tZe=s(sx);nHo=r(tZe,"This class cannot be instantiated directly using "),Y2e=n(tZe,"CODE",{});var hxt=s(Y2e);sHo=r(hxt,"__init__()"),hxt.forEach(t),lHo=r(tZe," (throws an error)."),tZe.forEach(t),iHo=i(Ll),Tt=n(Ll,"DIV",{class:!0});var fL=s(Tt);T(lx.$$.fragment,fL),dHo=i(fL),K2e=n(fL,"P",{});var uxt=s(K2e);cHo=r(uxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uxt.forEach(t),mHo=i(fL),kd=n(fL,"P",{});var Mse=s(kd);fHo=r(Mse,`Note:
Loading a model from its configuration file does `),Z2e=n(Mse,"STRONG",{});var pxt=s(Z2e);gHo=r(pxt,"not"),pxt.forEach(t),hHo=r(Mse,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(Mse,"A",{href:!0});var _xt=s(VQ);uHo=r(_xt,"from_pretrained()"),_xt.forEach(t),pHo=r(Mse," to load the model weights."),Mse.forEach(t),_Ho=i(fL),T(J1.$$.fragment,fL),fL.forEach(t),bHo=i(Ll),to=n(Ll,"DIV",{class:!0});var Ca=s(to);T(ix.$$.fragment,Ca),vHo=i(Ca),eve=n(Ca,"P",{});var bxt=s(eve);FHo=r(bxt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bxt.forEach(t),THo=i(Ca),on=n(Ca,"P",{});var gL=s(on);MHo=r(gL,"The model class to instantiate is selected based on the "),ove=n(gL,"CODE",{});var vxt=s(ove);EHo=r(vxt,"model_type"),vxt.forEach(t),CHo=r(gL,` property of the config object (either
passed as an argument or loaded from `),rve=n(gL,"CODE",{});var Fxt=s(rve);wHo=r(Fxt,"pretrained_model_name_or_path"),Fxt.forEach(t),AHo=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=n(gL,"CODE",{});var Txt=s(tve);yHo=r(Txt,"pretrained_model_name_or_path"),Txt.forEach(t),LHo=r(gL,":"),gL.forEach(t),xHo=i(Ca),j=n(Ca,"UL",{});var D=s(j);Y1=n(D,"LI",{});var wje=s(Y1);ave=n(wje,"STRONG",{});var Mxt=s(ave);$Ho=r(Mxt,"albert"),Mxt.forEach(t),kHo=r(wje," \u2014 "),XQ=n(wje,"A",{href:!0});var Ext=s(XQ);SHo=r(Ext,"AlbertForSequenceClassification"),Ext.forEach(t),RHo=r(wje," (ALBERT model)"),wje.forEach(t),PHo=i(D),K1=n(D,"LI",{});var Aje=s(K1);nve=n(Aje,"STRONG",{});var Cxt=s(nve);BHo=r(Cxt,"bart"),Cxt.forEach(t),IHo=r(Aje," \u2014 "),zQ=n(Aje,"A",{href:!0});var wxt=s(zQ);NHo=r(wxt,"BartForSequenceClassification"),wxt.forEach(t),qHo=r(Aje," (BART model)"),Aje.forEach(t),jHo=i(D),Z1=n(D,"LI",{});var yje=s(Z1);sve=n(yje,"STRONG",{});var Axt=s(sve);DHo=r(Axt,"bert"),Axt.forEach(t),GHo=r(yje," \u2014 "),QQ=n(yje,"A",{href:!0});var yxt=s(QQ);OHo=r(yxt,"BertForSequenceClassification"),yxt.forEach(t),VHo=r(yje," (BERT model)"),yje.forEach(t),XHo=i(D),eF=n(D,"LI",{});var Lje=s(eF);lve=n(Lje,"STRONG",{});var Lxt=s(lve);zHo=r(Lxt,"big_bird"),Lxt.forEach(t),QHo=r(Lje," \u2014 "),WQ=n(Lje,"A",{href:!0});var xxt=s(WQ);WHo=r(xxt,"BigBirdForSequenceClassification"),xxt.forEach(t),UHo=r(Lje," (BigBird model)"),Lje.forEach(t),HHo=i(D),oF=n(D,"LI",{});var xje=s(oF);ive=n(xje,"STRONG",{});var $xt=s(ive);JHo=r($xt,"bigbird_pegasus"),$xt.forEach(t),YHo=r(xje," \u2014 "),UQ=n(xje,"A",{href:!0});var kxt=s(UQ);KHo=r(kxt,"BigBirdPegasusForSequenceClassification"),kxt.forEach(t),ZHo=r(xje," (BigBird-Pegasus model)"),xje.forEach(t),eJo=i(D),rF=n(D,"LI",{});var $je=s(rF);dve=n($je,"STRONG",{});var Sxt=s(dve);oJo=r(Sxt,"bloom"),Sxt.forEach(t),rJo=r($je," \u2014 "),HQ=n($je,"A",{href:!0});var Rxt=s(HQ);tJo=r(Rxt,"BloomForSequenceClassification"),Rxt.forEach(t),aJo=r($je," (BLOOM model)"),$je.forEach(t),nJo=i(D),tF=n(D,"LI",{});var kje=s(tF);cve=n(kje,"STRONG",{});var Pxt=s(cve);sJo=r(Pxt,"camembert"),Pxt.forEach(t),lJo=r(kje," \u2014 "),JQ=n(kje,"A",{href:!0});var Bxt=s(JQ);iJo=r(Bxt,"CamembertForSequenceClassification"),Bxt.forEach(t),dJo=r(kje," (CamemBERT model)"),kje.forEach(t),cJo=i(D),aF=n(D,"LI",{});var Sje=s(aF);mve=n(Sje,"STRONG",{});var Ixt=s(mve);mJo=r(Ixt,"canine"),Ixt.forEach(t),fJo=r(Sje," \u2014 "),YQ=n(Sje,"A",{href:!0});var Nxt=s(YQ);gJo=r(Nxt,"CanineForSequenceClassification"),Nxt.forEach(t),hJo=r(Sje," (CANINE model)"),Sje.forEach(t),uJo=i(D),nF=n(D,"LI",{});var Rje=s(nF);fve=n(Rje,"STRONG",{});var qxt=s(fve);pJo=r(qxt,"convbert"),qxt.forEach(t),_Jo=r(Rje," \u2014 "),KQ=n(Rje,"A",{href:!0});var jxt=s(KQ);bJo=r(jxt,"ConvBertForSequenceClassification"),jxt.forEach(t),vJo=r(Rje," (ConvBERT model)"),Rje.forEach(t),FJo=i(D),sF=n(D,"LI",{});var Pje=s(sF);gve=n(Pje,"STRONG",{});var Dxt=s(gve);TJo=r(Dxt,"ctrl"),Dxt.forEach(t),MJo=r(Pje," \u2014 "),ZQ=n(Pje,"A",{href:!0});var Gxt=s(ZQ);EJo=r(Gxt,"CTRLForSequenceClassification"),Gxt.forEach(t),CJo=r(Pje," (CTRL model)"),Pje.forEach(t),wJo=i(D),lF=n(D,"LI",{});var Bje=s(lF);hve=n(Bje,"STRONG",{});var Oxt=s(hve);AJo=r(Oxt,"data2vec-text"),Oxt.forEach(t),yJo=r(Bje," \u2014 "),eW=n(Bje,"A",{href:!0});var Vxt=s(eW);LJo=r(Vxt,"Data2VecTextForSequenceClassification"),Vxt.forEach(t),xJo=r(Bje," (Data2VecText model)"),Bje.forEach(t),$Jo=i(D),iF=n(D,"LI",{});var Ije=s(iF);uve=n(Ije,"STRONG",{});var Xxt=s(uve);kJo=r(Xxt,"deberta"),Xxt.forEach(t),SJo=r(Ije," \u2014 "),oW=n(Ije,"A",{href:!0});var zxt=s(oW);RJo=r(zxt,"DebertaForSequenceClassification"),zxt.forEach(t),PJo=r(Ije," (DeBERTa model)"),Ije.forEach(t),BJo=i(D),dF=n(D,"LI",{});var Nje=s(dF);pve=n(Nje,"STRONG",{});var Qxt=s(pve);IJo=r(Qxt,"deberta-v2"),Qxt.forEach(t),NJo=r(Nje," \u2014 "),rW=n(Nje,"A",{href:!0});var Wxt=s(rW);qJo=r(Wxt,"DebertaV2ForSequenceClassification"),Wxt.forEach(t),jJo=r(Nje," (DeBERTa-v2 model)"),Nje.forEach(t),DJo=i(D),cF=n(D,"LI",{});var qje=s(cF);_ve=n(qje,"STRONG",{});var Uxt=s(_ve);GJo=r(Uxt,"distilbert"),Uxt.forEach(t),OJo=r(qje," \u2014 "),tW=n(qje,"A",{href:!0});var Hxt=s(tW);VJo=r(Hxt,"DistilBertForSequenceClassification"),Hxt.forEach(t),XJo=r(qje," (DistilBERT model)"),qje.forEach(t),zJo=i(D),mF=n(D,"LI",{});var jje=s(mF);bve=n(jje,"STRONG",{});var Jxt=s(bve);QJo=r(Jxt,"electra"),Jxt.forEach(t),WJo=r(jje," \u2014 "),aW=n(jje,"A",{href:!0});var Yxt=s(aW);UJo=r(Yxt,"ElectraForSequenceClassification"),Yxt.forEach(t),HJo=r(jje," (ELECTRA model)"),jje.forEach(t),JJo=i(D),fF=n(D,"LI",{});var Dje=s(fF);vve=n(Dje,"STRONG",{});var Kxt=s(vve);YJo=r(Kxt,"flaubert"),Kxt.forEach(t),KJo=r(Dje," \u2014 "),nW=n(Dje,"A",{href:!0});var Zxt=s(nW);ZJo=r(Zxt,"FlaubertForSequenceClassification"),Zxt.forEach(t),eYo=r(Dje," (FlauBERT model)"),Dje.forEach(t),oYo=i(D),gF=n(D,"LI",{});var Gje=s(gF);Fve=n(Gje,"STRONG",{});var e$t=s(Fve);rYo=r(e$t,"fnet"),e$t.forEach(t),tYo=r(Gje," \u2014 "),sW=n(Gje,"A",{href:!0});var o$t=s(sW);aYo=r(o$t,"FNetForSequenceClassification"),o$t.forEach(t),nYo=r(Gje," (FNet model)"),Gje.forEach(t),sYo=i(D),hF=n(D,"LI",{});var Oje=s(hF);Tve=n(Oje,"STRONG",{});var r$t=s(Tve);lYo=r(r$t,"funnel"),r$t.forEach(t),iYo=r(Oje," \u2014 "),lW=n(Oje,"A",{href:!0});var t$t=s(lW);dYo=r(t$t,"FunnelForSequenceClassification"),t$t.forEach(t),cYo=r(Oje," (Funnel Transformer model)"),Oje.forEach(t),mYo=i(D),uF=n(D,"LI",{});var Vje=s(uF);Mve=n(Vje,"STRONG",{});var a$t=s(Mve);fYo=r(a$t,"gpt2"),a$t.forEach(t),gYo=r(Vje," \u2014 "),iW=n(Vje,"A",{href:!0});var n$t=s(iW);hYo=r(n$t,"GPT2ForSequenceClassification"),n$t.forEach(t),uYo=r(Vje," (OpenAI GPT-2 model)"),Vje.forEach(t),pYo=i(D),pF=n(D,"LI",{});var Xje=s(pF);Eve=n(Xje,"STRONG",{});var s$t=s(Eve);_Yo=r(s$t,"gpt_neo"),s$t.forEach(t),bYo=r(Xje," \u2014 "),dW=n(Xje,"A",{href:!0});var l$t=s(dW);vYo=r(l$t,"GPTNeoForSequenceClassification"),l$t.forEach(t),FYo=r(Xje," (GPT Neo model)"),Xje.forEach(t),TYo=i(D),_F=n(D,"LI",{});var zje=s(_F);Cve=n(zje,"STRONG",{});var i$t=s(Cve);MYo=r(i$t,"gptj"),i$t.forEach(t),EYo=r(zje," \u2014 "),cW=n(zje,"A",{href:!0});var d$t=s(cW);CYo=r(d$t,"GPTJForSequenceClassification"),d$t.forEach(t),wYo=r(zje," (GPT-J model)"),zje.forEach(t),AYo=i(D),bF=n(D,"LI",{});var Qje=s(bF);wve=n(Qje,"STRONG",{});var c$t=s(wve);yYo=r(c$t,"ibert"),c$t.forEach(t),LYo=r(Qje," \u2014 "),mW=n(Qje,"A",{href:!0});var m$t=s(mW);xYo=r(m$t,"IBertForSequenceClassification"),m$t.forEach(t),$Yo=r(Qje," (I-BERT model)"),Qje.forEach(t),kYo=i(D),vF=n(D,"LI",{});var Wje=s(vF);Ave=n(Wje,"STRONG",{});var f$t=s(Ave);SYo=r(f$t,"layoutlm"),f$t.forEach(t),RYo=r(Wje," \u2014 "),fW=n(Wje,"A",{href:!0});var g$t=s(fW);PYo=r(g$t,"LayoutLMForSequenceClassification"),g$t.forEach(t),BYo=r(Wje," (LayoutLM model)"),Wje.forEach(t),IYo=i(D),FF=n(D,"LI",{});var Uje=s(FF);yve=n(Uje,"STRONG",{});var h$t=s(yve);NYo=r(h$t,"layoutlmv2"),h$t.forEach(t),qYo=r(Uje," \u2014 "),gW=n(Uje,"A",{href:!0});var u$t=s(gW);jYo=r(u$t,"LayoutLMv2ForSequenceClassification"),u$t.forEach(t),DYo=r(Uje," (LayoutLMv2 model)"),Uje.forEach(t),GYo=i(D),TF=n(D,"LI",{});var Hje=s(TF);Lve=n(Hje,"STRONG",{});var p$t=s(Lve);OYo=r(p$t,"layoutlmv3"),p$t.forEach(t),VYo=r(Hje," \u2014 "),hW=n(Hje,"A",{href:!0});var _$t=s(hW);XYo=r(_$t,"LayoutLMv3ForSequenceClassification"),_$t.forEach(t),zYo=r(Hje," (LayoutLMv3 model)"),Hje.forEach(t),QYo=i(D),MF=n(D,"LI",{});var Jje=s(MF);xve=n(Jje,"STRONG",{});var b$t=s(xve);WYo=r(b$t,"led"),b$t.forEach(t),UYo=r(Jje," \u2014 "),uW=n(Jje,"A",{href:!0});var v$t=s(uW);HYo=r(v$t,"LEDForSequenceClassification"),v$t.forEach(t),JYo=r(Jje," (LED model)"),Jje.forEach(t),YYo=i(D),EF=n(D,"LI",{});var Yje=s(EF);$ve=n(Yje,"STRONG",{});var F$t=s($ve);KYo=r(F$t,"longformer"),F$t.forEach(t),ZYo=r(Yje," \u2014 "),pW=n(Yje,"A",{href:!0});var T$t=s(pW);eKo=r(T$t,"LongformerForSequenceClassification"),T$t.forEach(t),oKo=r(Yje," (Longformer model)"),Yje.forEach(t),rKo=i(D),CF=n(D,"LI",{});var Kje=s(CF);kve=n(Kje,"STRONG",{});var M$t=s(kve);tKo=r(M$t,"luke"),M$t.forEach(t),aKo=r(Kje," \u2014 "),_W=n(Kje,"A",{href:!0});var E$t=s(_W);nKo=r(E$t,"LukeForSequenceClassification"),E$t.forEach(t),sKo=r(Kje," (LUKE model)"),Kje.forEach(t),lKo=i(D),wF=n(D,"LI",{});var Zje=s(wF);Sve=n(Zje,"STRONG",{});var C$t=s(Sve);iKo=r(C$t,"mbart"),C$t.forEach(t),dKo=r(Zje," \u2014 "),bW=n(Zje,"A",{href:!0});var w$t=s(bW);cKo=r(w$t,"MBartForSequenceClassification"),w$t.forEach(t),mKo=r(Zje," (mBART model)"),Zje.forEach(t),fKo=i(D),AF=n(D,"LI",{});var eDe=s(AF);Rve=n(eDe,"STRONG",{});var A$t=s(Rve);gKo=r(A$t,"megatron-bert"),A$t.forEach(t),hKo=r(eDe," \u2014 "),vW=n(eDe,"A",{href:!0});var y$t=s(vW);uKo=r(y$t,"MegatronBertForSequenceClassification"),y$t.forEach(t),pKo=r(eDe," (Megatron-BERT model)"),eDe.forEach(t),_Ko=i(D),yF=n(D,"LI",{});var oDe=s(yF);Pve=n(oDe,"STRONG",{});var L$t=s(Pve);bKo=r(L$t,"mobilebert"),L$t.forEach(t),vKo=r(oDe," \u2014 "),FW=n(oDe,"A",{href:!0});var x$t=s(FW);FKo=r(x$t,"MobileBertForSequenceClassification"),x$t.forEach(t),TKo=r(oDe," (MobileBERT model)"),oDe.forEach(t),MKo=i(D),LF=n(D,"LI",{});var rDe=s(LF);Bve=n(rDe,"STRONG",{});var $$t=s(Bve);EKo=r($$t,"mpnet"),$$t.forEach(t),CKo=r(rDe," \u2014 "),TW=n(rDe,"A",{href:!0});var k$t=s(TW);wKo=r(k$t,"MPNetForSequenceClassification"),k$t.forEach(t),AKo=r(rDe," (MPNet model)"),rDe.forEach(t),yKo=i(D),xF=n(D,"LI",{});var tDe=s(xF);Ive=n(tDe,"STRONG",{});var S$t=s(Ive);LKo=r(S$t,"mvp"),S$t.forEach(t),xKo=r(tDe," \u2014 "),MW=n(tDe,"A",{href:!0});var R$t=s(MW);$Ko=r(R$t,"MvpForSequenceClassification"),R$t.forEach(t),kKo=r(tDe," (MVP model)"),tDe.forEach(t),SKo=i(D),$F=n(D,"LI",{});var aDe=s($F);Nve=n(aDe,"STRONG",{});var P$t=s(Nve);RKo=r(P$t,"nezha"),P$t.forEach(t),PKo=r(aDe," \u2014 "),EW=n(aDe,"A",{href:!0});var B$t=s(EW);BKo=r(B$t,"NezhaForSequenceClassification"),B$t.forEach(t),IKo=r(aDe," (Nezha model)"),aDe.forEach(t),NKo=i(D),kF=n(D,"LI",{});var nDe=s(kF);qve=n(nDe,"STRONG",{});var I$t=s(qve);qKo=r(I$t,"nystromformer"),I$t.forEach(t),jKo=r(nDe," \u2014 "),CW=n(nDe,"A",{href:!0});var N$t=s(CW);DKo=r(N$t,"NystromformerForSequenceClassification"),N$t.forEach(t),GKo=r(nDe," (Nystr\xF6mformer model)"),nDe.forEach(t),OKo=i(D),SF=n(D,"LI",{});var sDe=s(SF);jve=n(sDe,"STRONG",{});var q$t=s(jve);VKo=r(q$t,"openai-gpt"),q$t.forEach(t),XKo=r(sDe," \u2014 "),wW=n(sDe,"A",{href:!0});var j$t=s(wW);zKo=r(j$t,"OpenAIGPTForSequenceClassification"),j$t.forEach(t),QKo=r(sDe," (OpenAI GPT model)"),sDe.forEach(t),WKo=i(D),RF=n(D,"LI",{});var lDe=s(RF);Dve=n(lDe,"STRONG",{});var D$t=s(Dve);UKo=r(D$t,"opt"),D$t.forEach(t),HKo=r(lDe," \u2014 "),AW=n(lDe,"A",{href:!0});var G$t=s(AW);JKo=r(G$t,"OPTForSequenceClassification"),G$t.forEach(t),YKo=r(lDe," (OPT model)"),lDe.forEach(t),KKo=i(D),PF=n(D,"LI",{});var iDe=s(PF);Gve=n(iDe,"STRONG",{});var O$t=s(Gve);ZKo=r(O$t,"perceiver"),O$t.forEach(t),eZo=r(iDe," \u2014 "),yW=n(iDe,"A",{href:!0});var V$t=s(yW);oZo=r(V$t,"PerceiverForSequenceClassification"),V$t.forEach(t),rZo=r(iDe," (Perceiver model)"),iDe.forEach(t),tZo=i(D),BF=n(D,"LI",{});var dDe=s(BF);Ove=n(dDe,"STRONG",{});var X$t=s(Ove);aZo=r(X$t,"plbart"),X$t.forEach(t),nZo=r(dDe," \u2014 "),LW=n(dDe,"A",{href:!0});var z$t=s(LW);sZo=r(z$t,"PLBartForSequenceClassification"),z$t.forEach(t),lZo=r(dDe," (PLBart model)"),dDe.forEach(t),iZo=i(D),IF=n(D,"LI",{});var cDe=s(IF);Vve=n(cDe,"STRONG",{});var Q$t=s(Vve);dZo=r(Q$t,"qdqbert"),Q$t.forEach(t),cZo=r(cDe," \u2014 "),xW=n(cDe,"A",{href:!0});var W$t=s(xW);mZo=r(W$t,"QDQBertForSequenceClassification"),W$t.forEach(t),fZo=r(cDe," (QDQBert model)"),cDe.forEach(t),gZo=i(D),NF=n(D,"LI",{});var mDe=s(NF);Xve=n(mDe,"STRONG",{});var U$t=s(Xve);hZo=r(U$t,"reformer"),U$t.forEach(t),uZo=r(mDe," \u2014 "),$W=n(mDe,"A",{href:!0});var H$t=s($W);pZo=r(H$t,"ReformerForSequenceClassification"),H$t.forEach(t),_Zo=r(mDe," (Reformer model)"),mDe.forEach(t),bZo=i(D),qF=n(D,"LI",{});var fDe=s(qF);zve=n(fDe,"STRONG",{});var J$t=s(zve);vZo=r(J$t,"rembert"),J$t.forEach(t),FZo=r(fDe," \u2014 "),kW=n(fDe,"A",{href:!0});var Y$t=s(kW);TZo=r(Y$t,"RemBertForSequenceClassification"),Y$t.forEach(t),MZo=r(fDe," (RemBERT model)"),fDe.forEach(t),EZo=i(D),jF=n(D,"LI",{});var gDe=s(jF);Qve=n(gDe,"STRONG",{});var K$t=s(Qve);CZo=r(K$t,"roberta"),K$t.forEach(t),wZo=r(gDe," \u2014 "),SW=n(gDe,"A",{href:!0});var Z$t=s(SW);AZo=r(Z$t,"RobertaForSequenceClassification"),Z$t.forEach(t),yZo=r(gDe," (RoBERTa model)"),gDe.forEach(t),LZo=i(D),DF=n(D,"LI",{});var hDe=s(DF);Wve=n(hDe,"STRONG",{});var ekt=s(Wve);xZo=r(ekt,"roformer"),ekt.forEach(t),$Zo=r(hDe," \u2014 "),RW=n(hDe,"A",{href:!0});var okt=s(RW);kZo=r(okt,"RoFormerForSequenceClassification"),okt.forEach(t),SZo=r(hDe," (RoFormer model)"),hDe.forEach(t),RZo=i(D),GF=n(D,"LI",{});var uDe=s(GF);Uve=n(uDe,"STRONG",{});var rkt=s(Uve);PZo=r(rkt,"squeezebert"),rkt.forEach(t),BZo=r(uDe," \u2014 "),PW=n(uDe,"A",{href:!0});var tkt=s(PW);IZo=r(tkt,"SqueezeBertForSequenceClassification"),tkt.forEach(t),NZo=r(uDe," (SqueezeBERT model)"),uDe.forEach(t),qZo=i(D),OF=n(D,"LI",{});var pDe=s(OF);Hve=n(pDe,"STRONG",{});var akt=s(Hve);jZo=r(akt,"tapas"),akt.forEach(t),DZo=r(pDe," \u2014 "),BW=n(pDe,"A",{href:!0});var nkt=s(BW);GZo=r(nkt,"TapasForSequenceClassification"),nkt.forEach(t),OZo=r(pDe," (TAPAS model)"),pDe.forEach(t),VZo=i(D),VF=n(D,"LI",{});var _De=s(VF);Jve=n(_De,"STRONG",{});var skt=s(Jve);XZo=r(skt,"transfo-xl"),skt.forEach(t),zZo=r(_De," \u2014 "),IW=n(_De,"A",{href:!0});var lkt=s(IW);QZo=r(lkt,"TransfoXLForSequenceClassification"),lkt.forEach(t),WZo=r(_De," (Transformer-XL model)"),_De.forEach(t),UZo=i(D),XF=n(D,"LI",{});var bDe=s(XF);Yve=n(bDe,"STRONG",{});var ikt=s(Yve);HZo=r(ikt,"xlm"),ikt.forEach(t),JZo=r(bDe," \u2014 "),NW=n(bDe,"A",{href:!0});var dkt=s(NW);YZo=r(dkt,"XLMForSequenceClassification"),dkt.forEach(t),KZo=r(bDe," (XLM model)"),bDe.forEach(t),ZZo=i(D),zF=n(D,"LI",{});var vDe=s(zF);Kve=n(vDe,"STRONG",{});var ckt=s(Kve);eer=r(ckt,"xlm-roberta"),ckt.forEach(t),oer=r(vDe," \u2014 "),qW=n(vDe,"A",{href:!0});var mkt=s(qW);rer=r(mkt,"XLMRobertaForSequenceClassification"),mkt.forEach(t),ter=r(vDe," (XLM-RoBERTa model)"),vDe.forEach(t),aer=i(D),QF=n(D,"LI",{});var FDe=s(QF);Zve=n(FDe,"STRONG",{});var fkt=s(Zve);ner=r(fkt,"xlm-roberta-xl"),fkt.forEach(t),ser=r(FDe," \u2014 "),jW=n(FDe,"A",{href:!0});var gkt=s(jW);ler=r(gkt,"XLMRobertaXLForSequenceClassification"),gkt.forEach(t),ier=r(FDe," (XLM-RoBERTa-XL model)"),FDe.forEach(t),der=i(D),WF=n(D,"LI",{});var TDe=s(WF);e1e=n(TDe,"STRONG",{});var hkt=s(e1e);cer=r(hkt,"xlnet"),hkt.forEach(t),mer=r(TDe," \u2014 "),DW=n(TDe,"A",{href:!0});var ukt=s(DW);fer=r(ukt,"XLNetForSequenceClassification"),ukt.forEach(t),ger=r(TDe," (XLNet model)"),TDe.forEach(t),her=i(D),UF=n(D,"LI",{});var MDe=s(UF);o1e=n(MDe,"STRONG",{});var pkt=s(o1e);uer=r(pkt,"yoso"),pkt.forEach(t),per=r(MDe," \u2014 "),GW=n(MDe,"A",{href:!0});var _kt=s(GW);_er=r(_kt,"YosoForSequenceClassification"),_kt.forEach(t),ber=r(MDe," (YOSO model)"),MDe.forEach(t),D.forEach(t),ver=i(Ca),HF=n(Ca,"P",{});var EDe=s(HF);Fer=r(EDe,"The model is set in evaluation mode by default using "),r1e=n(EDe,"CODE",{});var bkt=s(r1e);Ter=r(bkt,"model.eval()"),bkt.forEach(t),Mer=r(EDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t1e=n(EDe,"CODE",{});var vkt=s(t1e);Eer=r(vkt,"model.train()"),vkt.forEach(t),EDe.forEach(t),Cer=i(Ca),T(JF.$$.fragment,Ca),Ca.forEach(t),Ll.forEach(t),XJe=i(m),Sd=n(m,"H2",{class:!0});var aZe=s(Sd);YF=n(aZe,"A",{id:!0,class:!0,href:!0});var Fkt=s(YF);a1e=n(Fkt,"SPAN",{});var Tkt=s(a1e);T(dx.$$.fragment,Tkt),Tkt.forEach(t),Fkt.forEach(t),wer=i(aZe),n1e=n(aZe,"SPAN",{});var Mkt=s(n1e);Aer=r(Mkt,"AutoModelForMultipleChoice"),Mkt.forEach(t),aZe.forEach(t),zJe=i(m),jo=n(m,"DIV",{class:!0});var xl=s(jo);T(cx.$$.fragment,xl),yer=i(xl),Rd=n(xl,"P",{});var Ese=s(Rd);Ler=r(Ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OW=n(Ese,"A",{href:!0});var Ekt=s(OW);xer=r(Ekt,"from_pretrained()"),Ekt.forEach(t),$er=r(Ese," class method or the "),VW=n(Ese,"A",{href:!0});var Ckt=s(VW);ker=r(Ckt,"from_config()"),Ckt.forEach(t),Ser=r(Ese,` class
method.`),Ese.forEach(t),Rer=i(xl),mx=n(xl,"P",{});var nZe=s(mx);Per=r(nZe,"This class cannot be instantiated directly using "),s1e=n(nZe,"CODE",{});var wkt=s(s1e);Ber=r(wkt,"__init__()"),wkt.forEach(t),Ier=r(nZe," (throws an error)."),nZe.forEach(t),Ner=i(xl),Mt=n(xl,"DIV",{class:!0});var hL=s(Mt);T(fx.$$.fragment,hL),qer=i(hL),l1e=n(hL,"P",{});var Akt=s(l1e);jer=r(Akt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Akt.forEach(t),Der=i(hL),Pd=n(hL,"P",{});var Cse=s(Pd);Ger=r(Cse,`Note:
Loading a model from its configuration file does `),i1e=n(Cse,"STRONG",{});var ykt=s(i1e);Oer=r(ykt,"not"),ykt.forEach(t),Ver=r(Cse,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(Cse,"A",{href:!0});var Lkt=s(XW);Xer=r(Lkt,"from_pretrained()"),Lkt.forEach(t),zer=r(Cse," to load the model weights."),Cse.forEach(t),Qer=i(hL),T(KF.$$.fragment,hL),hL.forEach(t),Wer=i(xl),ao=n(xl,"DIV",{class:!0});var wa=s(ao);T(gx.$$.fragment,wa),Uer=i(wa),d1e=n(wa,"P",{});var xkt=s(d1e);Her=r(xkt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xkt.forEach(t),Jer=i(wa),rn=n(wa,"P",{});var uL=s(rn);Yer=r(uL,"The model class to instantiate is selected based on the "),c1e=n(uL,"CODE",{});var $kt=s(c1e);Ker=r($kt,"model_type"),$kt.forEach(t),Zer=r(uL,` property of the config object (either
passed as an argument or loaded from `),m1e=n(uL,"CODE",{});var kkt=s(m1e);eor=r(kkt,"pretrained_model_name_or_path"),kkt.forEach(t),oor=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f1e=n(uL,"CODE",{});var Skt=s(f1e);ror=r(Skt,"pretrained_model_name_or_path"),Skt.forEach(t),tor=r(uL,":"),uL.forEach(t),aor=i(wa),Z=n(wa,"UL",{});var ee=s(Z);ZF=n(ee,"LI",{});var CDe=s(ZF);g1e=n(CDe,"STRONG",{});var Rkt=s(g1e);nor=r(Rkt,"albert"),Rkt.forEach(t),sor=r(CDe," \u2014 "),zW=n(CDe,"A",{href:!0});var Pkt=s(zW);lor=r(Pkt,"AlbertForMultipleChoice"),Pkt.forEach(t),ior=r(CDe," (ALBERT model)"),CDe.forEach(t),dor=i(ee),eT=n(ee,"LI",{});var wDe=s(eT);h1e=n(wDe,"STRONG",{});var Bkt=s(h1e);cor=r(Bkt,"bert"),Bkt.forEach(t),mor=r(wDe," \u2014 "),QW=n(wDe,"A",{href:!0});var Ikt=s(QW);gor=r(Ikt,"BertForMultipleChoice"),Ikt.forEach(t),hor=r(wDe," (BERT model)"),wDe.forEach(t),uor=i(ee),oT=n(ee,"LI",{});var ADe=s(oT);u1e=n(ADe,"STRONG",{});var Nkt=s(u1e);por=r(Nkt,"big_bird"),Nkt.forEach(t),_or=r(ADe," \u2014 "),WW=n(ADe,"A",{href:!0});var qkt=s(WW);bor=r(qkt,"BigBirdForMultipleChoice"),qkt.forEach(t),vor=r(ADe," (BigBird model)"),ADe.forEach(t),For=i(ee),rT=n(ee,"LI",{});var yDe=s(rT);p1e=n(yDe,"STRONG",{});var jkt=s(p1e);Tor=r(jkt,"camembert"),jkt.forEach(t),Mor=r(yDe," \u2014 "),UW=n(yDe,"A",{href:!0});var Dkt=s(UW);Eor=r(Dkt,"CamembertForMultipleChoice"),Dkt.forEach(t),Cor=r(yDe," (CamemBERT model)"),yDe.forEach(t),wor=i(ee),tT=n(ee,"LI",{});var LDe=s(tT);_1e=n(LDe,"STRONG",{});var Gkt=s(_1e);Aor=r(Gkt,"canine"),Gkt.forEach(t),yor=r(LDe," \u2014 "),HW=n(LDe,"A",{href:!0});var Okt=s(HW);Lor=r(Okt,"CanineForMultipleChoice"),Okt.forEach(t),xor=r(LDe," (CANINE model)"),LDe.forEach(t),$or=i(ee),aT=n(ee,"LI",{});var xDe=s(aT);b1e=n(xDe,"STRONG",{});var Vkt=s(b1e);kor=r(Vkt,"convbert"),Vkt.forEach(t),Sor=r(xDe," \u2014 "),JW=n(xDe,"A",{href:!0});var Xkt=s(JW);Ror=r(Xkt,"ConvBertForMultipleChoice"),Xkt.forEach(t),Por=r(xDe," (ConvBERT model)"),xDe.forEach(t),Bor=i(ee),nT=n(ee,"LI",{});var $De=s(nT);v1e=n($De,"STRONG",{});var zkt=s(v1e);Ior=r(zkt,"data2vec-text"),zkt.forEach(t),Nor=r($De," \u2014 "),YW=n($De,"A",{href:!0});var Qkt=s(YW);qor=r(Qkt,"Data2VecTextForMultipleChoice"),Qkt.forEach(t),jor=r($De," (Data2VecText model)"),$De.forEach(t),Dor=i(ee),sT=n(ee,"LI",{});var kDe=s(sT);F1e=n(kDe,"STRONG",{});var Wkt=s(F1e);Gor=r(Wkt,"deberta-v2"),Wkt.forEach(t),Oor=r(kDe," \u2014 "),KW=n(kDe,"A",{href:!0});var Ukt=s(KW);Vor=r(Ukt,"DebertaV2ForMultipleChoice"),Ukt.forEach(t),Xor=r(kDe," (DeBERTa-v2 model)"),kDe.forEach(t),zor=i(ee),lT=n(ee,"LI",{});var SDe=s(lT);T1e=n(SDe,"STRONG",{});var Hkt=s(T1e);Qor=r(Hkt,"distilbert"),Hkt.forEach(t),Wor=r(SDe," \u2014 "),ZW=n(SDe,"A",{href:!0});var Jkt=s(ZW);Uor=r(Jkt,"DistilBertForMultipleChoice"),Jkt.forEach(t),Hor=r(SDe," (DistilBERT model)"),SDe.forEach(t),Jor=i(ee),iT=n(ee,"LI",{});var RDe=s(iT);M1e=n(RDe,"STRONG",{});var Ykt=s(M1e);Yor=r(Ykt,"electra"),Ykt.forEach(t),Kor=r(RDe," \u2014 "),eU=n(RDe,"A",{href:!0});var Kkt=s(eU);Zor=r(Kkt,"ElectraForMultipleChoice"),Kkt.forEach(t),err=r(RDe," (ELECTRA model)"),RDe.forEach(t),orr=i(ee),dT=n(ee,"LI",{});var PDe=s(dT);E1e=n(PDe,"STRONG",{});var Zkt=s(E1e);rrr=r(Zkt,"flaubert"),Zkt.forEach(t),trr=r(PDe," \u2014 "),oU=n(PDe,"A",{href:!0});var eSt=s(oU);arr=r(eSt,"FlaubertForMultipleChoice"),eSt.forEach(t),nrr=r(PDe," (FlauBERT model)"),PDe.forEach(t),srr=i(ee),cT=n(ee,"LI",{});var BDe=s(cT);C1e=n(BDe,"STRONG",{});var oSt=s(C1e);lrr=r(oSt,"fnet"),oSt.forEach(t),irr=r(BDe," \u2014 "),rU=n(BDe,"A",{href:!0});var rSt=s(rU);drr=r(rSt,"FNetForMultipleChoice"),rSt.forEach(t),crr=r(BDe," (FNet model)"),BDe.forEach(t),mrr=i(ee),mT=n(ee,"LI",{});var IDe=s(mT);w1e=n(IDe,"STRONG",{});var tSt=s(w1e);frr=r(tSt,"funnel"),tSt.forEach(t),grr=r(IDe," \u2014 "),tU=n(IDe,"A",{href:!0});var aSt=s(tU);hrr=r(aSt,"FunnelForMultipleChoice"),aSt.forEach(t),urr=r(IDe," (Funnel Transformer model)"),IDe.forEach(t),prr=i(ee),fT=n(ee,"LI",{});var NDe=s(fT);A1e=n(NDe,"STRONG",{});var nSt=s(A1e);_rr=r(nSt,"ibert"),nSt.forEach(t),brr=r(NDe," \u2014 "),aU=n(NDe,"A",{href:!0});var sSt=s(aU);vrr=r(sSt,"IBertForMultipleChoice"),sSt.forEach(t),Frr=r(NDe," (I-BERT model)"),NDe.forEach(t),Trr=i(ee),gT=n(ee,"LI",{});var qDe=s(gT);y1e=n(qDe,"STRONG",{});var lSt=s(y1e);Mrr=r(lSt,"longformer"),lSt.forEach(t),Err=r(qDe," \u2014 "),nU=n(qDe,"A",{href:!0});var iSt=s(nU);Crr=r(iSt,"LongformerForMultipleChoice"),iSt.forEach(t),wrr=r(qDe," (Longformer model)"),qDe.forEach(t),Arr=i(ee),hT=n(ee,"LI",{});var jDe=s(hT);L1e=n(jDe,"STRONG",{});var dSt=s(L1e);yrr=r(dSt,"luke"),dSt.forEach(t),Lrr=r(jDe," \u2014 "),sU=n(jDe,"A",{href:!0});var cSt=s(sU);xrr=r(cSt,"LukeForMultipleChoice"),cSt.forEach(t),$rr=r(jDe," (LUKE model)"),jDe.forEach(t),krr=i(ee),uT=n(ee,"LI",{});var DDe=s(uT);x1e=n(DDe,"STRONG",{});var mSt=s(x1e);Srr=r(mSt,"megatron-bert"),mSt.forEach(t),Rrr=r(DDe," \u2014 "),lU=n(DDe,"A",{href:!0});var fSt=s(lU);Prr=r(fSt,"MegatronBertForMultipleChoice"),fSt.forEach(t),Brr=r(DDe," (Megatron-BERT model)"),DDe.forEach(t),Irr=i(ee),pT=n(ee,"LI",{});var GDe=s(pT);$1e=n(GDe,"STRONG",{});var gSt=s($1e);Nrr=r(gSt,"mobilebert"),gSt.forEach(t),qrr=r(GDe," \u2014 "),iU=n(GDe,"A",{href:!0});var hSt=s(iU);jrr=r(hSt,"MobileBertForMultipleChoice"),hSt.forEach(t),Drr=r(GDe," (MobileBERT model)"),GDe.forEach(t),Grr=i(ee),_T=n(ee,"LI",{});var ODe=s(_T);k1e=n(ODe,"STRONG",{});var uSt=s(k1e);Orr=r(uSt,"mpnet"),uSt.forEach(t),Vrr=r(ODe," \u2014 "),dU=n(ODe,"A",{href:!0});var pSt=s(dU);Xrr=r(pSt,"MPNetForMultipleChoice"),pSt.forEach(t),zrr=r(ODe," (MPNet model)"),ODe.forEach(t),Qrr=i(ee),bT=n(ee,"LI",{});var VDe=s(bT);S1e=n(VDe,"STRONG",{});var _St=s(S1e);Wrr=r(_St,"nezha"),_St.forEach(t),Urr=r(VDe," \u2014 "),cU=n(VDe,"A",{href:!0});var bSt=s(cU);Hrr=r(bSt,"NezhaForMultipleChoice"),bSt.forEach(t),Jrr=r(VDe," (Nezha model)"),VDe.forEach(t),Yrr=i(ee),vT=n(ee,"LI",{});var XDe=s(vT);R1e=n(XDe,"STRONG",{});var vSt=s(R1e);Krr=r(vSt,"nystromformer"),vSt.forEach(t),Zrr=r(XDe," \u2014 "),mU=n(XDe,"A",{href:!0});var FSt=s(mU);etr=r(FSt,"NystromformerForMultipleChoice"),FSt.forEach(t),otr=r(XDe," (Nystr\xF6mformer model)"),XDe.forEach(t),rtr=i(ee),FT=n(ee,"LI",{});var zDe=s(FT);P1e=n(zDe,"STRONG",{});var TSt=s(P1e);ttr=r(TSt,"qdqbert"),TSt.forEach(t),atr=r(zDe," \u2014 "),fU=n(zDe,"A",{href:!0});var MSt=s(fU);ntr=r(MSt,"QDQBertForMultipleChoice"),MSt.forEach(t),str=r(zDe," (QDQBert model)"),zDe.forEach(t),ltr=i(ee),TT=n(ee,"LI",{});var QDe=s(TT);B1e=n(QDe,"STRONG",{});var ESt=s(B1e);itr=r(ESt,"rembert"),ESt.forEach(t),dtr=r(QDe," \u2014 "),gU=n(QDe,"A",{href:!0});var CSt=s(gU);ctr=r(CSt,"RemBertForMultipleChoice"),CSt.forEach(t),mtr=r(QDe," (RemBERT model)"),QDe.forEach(t),ftr=i(ee),MT=n(ee,"LI",{});var WDe=s(MT);I1e=n(WDe,"STRONG",{});var wSt=s(I1e);gtr=r(wSt,"roberta"),wSt.forEach(t),htr=r(WDe," \u2014 "),hU=n(WDe,"A",{href:!0});var ASt=s(hU);utr=r(ASt,"RobertaForMultipleChoice"),ASt.forEach(t),ptr=r(WDe," (RoBERTa model)"),WDe.forEach(t),_tr=i(ee),ET=n(ee,"LI",{});var UDe=s(ET);N1e=n(UDe,"STRONG",{});var ySt=s(N1e);btr=r(ySt,"roformer"),ySt.forEach(t),vtr=r(UDe," \u2014 "),uU=n(UDe,"A",{href:!0});var LSt=s(uU);Ftr=r(LSt,"RoFormerForMultipleChoice"),LSt.forEach(t),Ttr=r(UDe," (RoFormer model)"),UDe.forEach(t),Mtr=i(ee),CT=n(ee,"LI",{});var HDe=s(CT);q1e=n(HDe,"STRONG",{});var xSt=s(q1e);Etr=r(xSt,"squeezebert"),xSt.forEach(t),Ctr=r(HDe," \u2014 "),pU=n(HDe,"A",{href:!0});var $St=s(pU);wtr=r($St,"SqueezeBertForMultipleChoice"),$St.forEach(t),Atr=r(HDe," (SqueezeBERT model)"),HDe.forEach(t),ytr=i(ee),wT=n(ee,"LI",{});var JDe=s(wT);j1e=n(JDe,"STRONG",{});var kSt=s(j1e);Ltr=r(kSt,"xlm"),kSt.forEach(t),xtr=r(JDe," \u2014 "),_U=n(JDe,"A",{href:!0});var SSt=s(_U);$tr=r(SSt,"XLMForMultipleChoice"),SSt.forEach(t),ktr=r(JDe," (XLM model)"),JDe.forEach(t),Str=i(ee),AT=n(ee,"LI",{});var YDe=s(AT);D1e=n(YDe,"STRONG",{});var RSt=s(D1e);Rtr=r(RSt,"xlm-roberta"),RSt.forEach(t),Ptr=r(YDe," \u2014 "),bU=n(YDe,"A",{href:!0});var PSt=s(bU);Btr=r(PSt,"XLMRobertaForMultipleChoice"),PSt.forEach(t),Itr=r(YDe," (XLM-RoBERTa model)"),YDe.forEach(t),Ntr=i(ee),yT=n(ee,"LI",{});var KDe=s(yT);G1e=n(KDe,"STRONG",{});var BSt=s(G1e);qtr=r(BSt,"xlm-roberta-xl"),BSt.forEach(t),jtr=r(KDe," \u2014 "),vU=n(KDe,"A",{href:!0});var ISt=s(vU);Dtr=r(ISt,"XLMRobertaXLForMultipleChoice"),ISt.forEach(t),Gtr=r(KDe," (XLM-RoBERTa-XL model)"),KDe.forEach(t),Otr=i(ee),LT=n(ee,"LI",{});var ZDe=s(LT);O1e=n(ZDe,"STRONG",{});var NSt=s(O1e);Vtr=r(NSt,"xlnet"),NSt.forEach(t),Xtr=r(ZDe," \u2014 "),FU=n(ZDe,"A",{href:!0});var qSt=s(FU);ztr=r(qSt,"XLNetForMultipleChoice"),qSt.forEach(t),Qtr=r(ZDe," (XLNet model)"),ZDe.forEach(t),Wtr=i(ee),xT=n(ee,"LI",{});var eGe=s(xT);V1e=n(eGe,"STRONG",{});var jSt=s(V1e);Utr=r(jSt,"yoso"),jSt.forEach(t),Htr=r(eGe," \u2014 "),TU=n(eGe,"A",{href:!0});var DSt=s(TU);Jtr=r(DSt,"YosoForMultipleChoice"),DSt.forEach(t),Ytr=r(eGe," (YOSO model)"),eGe.forEach(t),ee.forEach(t),Ktr=i(wa),$T=n(wa,"P",{});var oGe=s($T);Ztr=r(oGe,"The model is set in evaluation mode by default using "),X1e=n(oGe,"CODE",{});var GSt=s(X1e);ear=r(GSt,"model.eval()"),GSt.forEach(t),oar=r(oGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z1e=n(oGe,"CODE",{});var OSt=s(z1e);rar=r(OSt,"model.train()"),OSt.forEach(t),oGe.forEach(t),tar=i(wa),T(kT.$$.fragment,wa),wa.forEach(t),xl.forEach(t),QJe=i(m),Bd=n(m,"H2",{class:!0});var sZe=s(Bd);ST=n(sZe,"A",{id:!0,class:!0,href:!0});var VSt=s(ST);Q1e=n(VSt,"SPAN",{});var XSt=s(Q1e);T(hx.$$.fragment,XSt),XSt.forEach(t),VSt.forEach(t),aar=i(sZe),W1e=n(sZe,"SPAN",{});var zSt=s(W1e);nar=r(zSt,"AutoModelForNextSentencePrediction"),zSt.forEach(t),sZe.forEach(t),WJe=i(m),Do=n(m,"DIV",{class:!0});var $l=s(Do);T(ux.$$.fragment,$l),sar=i($l),Id=n($l,"P",{});var wse=s(Id);lar=r(wse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MU=n(wse,"A",{href:!0});var QSt=s(MU);iar=r(QSt,"from_pretrained()"),QSt.forEach(t),dar=r(wse," class method or the "),EU=n(wse,"A",{href:!0});var WSt=s(EU);car=r(WSt,"from_config()"),WSt.forEach(t),mar=r(wse,` class
method.`),wse.forEach(t),far=i($l),px=n($l,"P",{});var lZe=s(px);gar=r(lZe,"This class cannot be instantiated directly using "),U1e=n(lZe,"CODE",{});var USt=s(U1e);har=r(USt,"__init__()"),USt.forEach(t),uar=r(lZe," (throws an error)."),lZe.forEach(t),par=i($l),Et=n($l,"DIV",{class:!0});var pL=s(Et);T(_x.$$.fragment,pL),_ar=i(pL),H1e=n(pL,"P",{});var HSt=s(H1e);bar=r(HSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HSt.forEach(t),Far=i(pL),Nd=n(pL,"P",{});var Ase=s(Nd);Tar=r(Ase,`Note:
Loading a model from its configuration file does `),J1e=n(Ase,"STRONG",{});var JSt=s(J1e);Mar=r(JSt,"not"),JSt.forEach(t),Ear=r(Ase,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(Ase,"A",{href:!0});var YSt=s(CU);Car=r(YSt,"from_pretrained()"),YSt.forEach(t),war=r(Ase," to load the model weights."),Ase.forEach(t),Aar=i(pL),T(RT.$$.fragment,pL),pL.forEach(t),yar=i($l),no=n($l,"DIV",{class:!0});var Aa=s(no);T(bx.$$.fragment,Aa),Lar=i(Aa),Y1e=n(Aa,"P",{});var KSt=s(Y1e);xar=r(KSt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),KSt.forEach(t),$ar=i(Aa),tn=n(Aa,"P",{});var _L=s(tn);kar=r(_L,"The model class to instantiate is selected based on the "),K1e=n(_L,"CODE",{});var ZSt=s(K1e);Sar=r(ZSt,"model_type"),ZSt.forEach(t),Rar=r(_L,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(_L,"CODE",{});var eRt=s(Z1e);Par=r(eRt,"pretrained_model_name_or_path"),eRt.forEach(t),Bar=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eFe=n(_L,"CODE",{});var oRt=s(eFe);Iar=r(oRt,"pretrained_model_name_or_path"),oRt.forEach(t),Nar=r(_L,":"),_L.forEach(t),qar=i(Aa),Go=n(Aa,"UL",{});var ya=s(Go);PT=n(ya,"LI",{});var rGe=s(PT);oFe=n(rGe,"STRONG",{});var rRt=s(oFe);jar=r(rRt,"bert"),rRt.forEach(t),Dar=r(rGe," \u2014 "),wU=n(rGe,"A",{href:!0});var tRt=s(wU);Gar=r(tRt,"BertForNextSentencePrediction"),tRt.forEach(t),Oar=r(rGe," (BERT model)"),rGe.forEach(t),Var=i(ya),BT=n(ya,"LI",{});var tGe=s(BT);rFe=n(tGe,"STRONG",{});var aRt=s(rFe);Xar=r(aRt,"fnet"),aRt.forEach(t),zar=r(tGe," \u2014 "),AU=n(tGe,"A",{href:!0});var nRt=s(AU);Qar=r(nRt,"FNetForNextSentencePrediction"),nRt.forEach(t),War=r(tGe," (FNet model)"),tGe.forEach(t),Uar=i(ya),IT=n(ya,"LI",{});var aGe=s(IT);tFe=n(aGe,"STRONG",{});var sRt=s(tFe);Har=r(sRt,"megatron-bert"),sRt.forEach(t),Jar=r(aGe," \u2014 "),yU=n(aGe,"A",{href:!0});var lRt=s(yU);Yar=r(lRt,"MegatronBertForNextSentencePrediction"),lRt.forEach(t),Kar=r(aGe," (Megatron-BERT model)"),aGe.forEach(t),Zar=i(ya),NT=n(ya,"LI",{});var nGe=s(NT);aFe=n(nGe,"STRONG",{});var iRt=s(aFe);enr=r(iRt,"mobilebert"),iRt.forEach(t),onr=r(nGe," \u2014 "),LU=n(nGe,"A",{href:!0});var dRt=s(LU);rnr=r(dRt,"MobileBertForNextSentencePrediction"),dRt.forEach(t),tnr=r(nGe," (MobileBERT model)"),nGe.forEach(t),anr=i(ya),qT=n(ya,"LI",{});var sGe=s(qT);nFe=n(sGe,"STRONG",{});var cRt=s(nFe);nnr=r(cRt,"nezha"),cRt.forEach(t),snr=r(sGe," \u2014 "),xU=n(sGe,"A",{href:!0});var mRt=s(xU);lnr=r(mRt,"NezhaForNextSentencePrediction"),mRt.forEach(t),inr=r(sGe," (Nezha model)"),sGe.forEach(t),dnr=i(ya),jT=n(ya,"LI",{});var lGe=s(jT);sFe=n(lGe,"STRONG",{});var fRt=s(sFe);cnr=r(fRt,"qdqbert"),fRt.forEach(t),mnr=r(lGe," \u2014 "),$U=n(lGe,"A",{href:!0});var gRt=s($U);fnr=r(gRt,"QDQBertForNextSentencePrediction"),gRt.forEach(t),gnr=r(lGe," (QDQBert model)"),lGe.forEach(t),ya.forEach(t),hnr=i(Aa),DT=n(Aa,"P",{});var iGe=s(DT);unr=r(iGe,"The model is set in evaluation mode by default using "),lFe=n(iGe,"CODE",{});var hRt=s(lFe);pnr=r(hRt,"model.eval()"),hRt.forEach(t),_nr=r(iGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iFe=n(iGe,"CODE",{});var uRt=s(iFe);bnr=r(uRt,"model.train()"),uRt.forEach(t),iGe.forEach(t),vnr=i(Aa),T(GT.$$.fragment,Aa),Aa.forEach(t),$l.forEach(t),UJe=i(m),qd=n(m,"H2",{class:!0});var iZe=s(qd);OT=n(iZe,"A",{id:!0,class:!0,href:!0});var pRt=s(OT);dFe=n(pRt,"SPAN",{});var _Rt=s(dFe);T(vx.$$.fragment,_Rt),_Rt.forEach(t),pRt.forEach(t),Fnr=i(iZe),cFe=n(iZe,"SPAN",{});var bRt=s(cFe);Tnr=r(bRt,"AutoModelForTokenClassification"),bRt.forEach(t),iZe.forEach(t),HJe=i(m),Oo=n(m,"DIV",{class:!0});var kl=s(Oo);T(Fx.$$.fragment,kl),Mnr=i(kl),jd=n(kl,"P",{});var yse=s(jd);Enr=r(yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kU=n(yse,"A",{href:!0});var vRt=s(kU);Cnr=r(vRt,"from_pretrained()"),vRt.forEach(t),wnr=r(yse," class method or the "),SU=n(yse,"A",{href:!0});var FRt=s(SU);Anr=r(FRt,"from_config()"),FRt.forEach(t),ynr=r(yse,` class
method.`),yse.forEach(t),Lnr=i(kl),Tx=n(kl,"P",{});var dZe=s(Tx);xnr=r(dZe,"This class cannot be instantiated directly using "),mFe=n(dZe,"CODE",{});var TRt=s(mFe);$nr=r(TRt,"__init__()"),TRt.forEach(t),knr=r(dZe," (throws an error)."),dZe.forEach(t),Snr=i(kl),Ct=n(kl,"DIV",{class:!0});var bL=s(Ct);T(Mx.$$.fragment,bL),Rnr=i(bL),fFe=n(bL,"P",{});var MRt=s(fFe);Pnr=r(MRt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),MRt.forEach(t),Bnr=i(bL),Dd=n(bL,"P",{});var Lse=s(Dd);Inr=r(Lse,`Note:
Loading a model from its configuration file does `),gFe=n(Lse,"STRONG",{});var ERt=s(gFe);Nnr=r(ERt,"not"),ERt.forEach(t),qnr=r(Lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),RU=n(Lse,"A",{href:!0});var CRt=s(RU);jnr=r(CRt,"from_pretrained()"),CRt.forEach(t),Dnr=r(Lse," to load the model weights."),Lse.forEach(t),Gnr=i(bL),T(VT.$$.fragment,bL),bL.forEach(t),Onr=i(kl),so=n(kl,"DIV",{class:!0});var La=s(so);T(Ex.$$.fragment,La),Vnr=i(La),hFe=n(La,"P",{});var wRt=s(hFe);Xnr=r(wRt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wRt.forEach(t),znr=i(La),an=n(La,"P",{});var vL=s(an);Qnr=r(vL,"The model class to instantiate is selected based on the "),uFe=n(vL,"CODE",{});var ARt=s(uFe);Wnr=r(ARt,"model_type"),ARt.forEach(t),Unr=r(vL,` property of the config object (either
passed as an argument or loaded from `),pFe=n(vL,"CODE",{});var yRt=s(pFe);Hnr=r(yRt,"pretrained_model_name_or_path"),yRt.forEach(t),Jnr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Fe=n(vL,"CODE",{});var LRt=s(_Fe);Ynr=r(LRt,"pretrained_model_name_or_path"),LRt.forEach(t),Knr=r(vL,":"),vL.forEach(t),Znr=i(La),H=n(La,"UL",{});var K=s(H);XT=n(K,"LI",{});var dGe=s(XT);bFe=n(dGe,"STRONG",{});var xRt=s(bFe);esr=r(xRt,"albert"),xRt.forEach(t),osr=r(dGe," \u2014 "),PU=n(dGe,"A",{href:!0});var $Rt=s(PU);rsr=r($Rt,"AlbertForTokenClassification"),$Rt.forEach(t),tsr=r(dGe," (ALBERT model)"),dGe.forEach(t),asr=i(K),zT=n(K,"LI",{});var cGe=s(zT);vFe=n(cGe,"STRONG",{});var kRt=s(vFe);nsr=r(kRt,"bert"),kRt.forEach(t),ssr=r(cGe," \u2014 "),BU=n(cGe,"A",{href:!0});var SRt=s(BU);lsr=r(SRt,"BertForTokenClassification"),SRt.forEach(t),isr=r(cGe," (BERT model)"),cGe.forEach(t),dsr=i(K),QT=n(K,"LI",{});var mGe=s(QT);FFe=n(mGe,"STRONG",{});var RRt=s(FFe);csr=r(RRt,"big_bird"),RRt.forEach(t),msr=r(mGe," \u2014 "),IU=n(mGe,"A",{href:!0});var PRt=s(IU);fsr=r(PRt,"BigBirdForTokenClassification"),PRt.forEach(t),gsr=r(mGe," (BigBird model)"),mGe.forEach(t),hsr=i(K),WT=n(K,"LI",{});var fGe=s(WT);TFe=n(fGe,"STRONG",{});var BRt=s(TFe);usr=r(BRt,"bloom"),BRt.forEach(t),psr=r(fGe," \u2014 "),NU=n(fGe,"A",{href:!0});var IRt=s(NU);_sr=r(IRt,"BloomForTokenClassification"),IRt.forEach(t),bsr=r(fGe," (BLOOM model)"),fGe.forEach(t),vsr=i(K),UT=n(K,"LI",{});var gGe=s(UT);MFe=n(gGe,"STRONG",{});var NRt=s(MFe);Fsr=r(NRt,"camembert"),NRt.forEach(t),Tsr=r(gGe," \u2014 "),qU=n(gGe,"A",{href:!0});var qRt=s(qU);Msr=r(qRt,"CamembertForTokenClassification"),qRt.forEach(t),Esr=r(gGe," (CamemBERT model)"),gGe.forEach(t),Csr=i(K),HT=n(K,"LI",{});var hGe=s(HT);EFe=n(hGe,"STRONG",{});var jRt=s(EFe);wsr=r(jRt,"canine"),jRt.forEach(t),Asr=r(hGe," \u2014 "),jU=n(hGe,"A",{href:!0});var DRt=s(jU);ysr=r(DRt,"CanineForTokenClassification"),DRt.forEach(t),Lsr=r(hGe," (CANINE model)"),hGe.forEach(t),xsr=i(K),JT=n(K,"LI",{});var uGe=s(JT);CFe=n(uGe,"STRONG",{});var GRt=s(CFe);$sr=r(GRt,"convbert"),GRt.forEach(t),ksr=r(uGe," \u2014 "),DU=n(uGe,"A",{href:!0});var ORt=s(DU);Ssr=r(ORt,"ConvBertForTokenClassification"),ORt.forEach(t),Rsr=r(uGe," (ConvBERT model)"),uGe.forEach(t),Psr=i(K),YT=n(K,"LI",{});var pGe=s(YT);wFe=n(pGe,"STRONG",{});var VRt=s(wFe);Bsr=r(VRt,"data2vec-text"),VRt.forEach(t),Isr=r(pGe," \u2014 "),GU=n(pGe,"A",{href:!0});var XRt=s(GU);Nsr=r(XRt,"Data2VecTextForTokenClassification"),XRt.forEach(t),qsr=r(pGe," (Data2VecText model)"),pGe.forEach(t),jsr=i(K),KT=n(K,"LI",{});var _Ge=s(KT);AFe=n(_Ge,"STRONG",{});var zRt=s(AFe);Dsr=r(zRt,"deberta"),zRt.forEach(t),Gsr=r(_Ge," \u2014 "),OU=n(_Ge,"A",{href:!0});var QRt=s(OU);Osr=r(QRt,"DebertaForTokenClassification"),QRt.forEach(t),Vsr=r(_Ge," (DeBERTa model)"),_Ge.forEach(t),Xsr=i(K),ZT=n(K,"LI",{});var bGe=s(ZT);yFe=n(bGe,"STRONG",{});var WRt=s(yFe);zsr=r(WRt,"deberta-v2"),WRt.forEach(t),Qsr=r(bGe," \u2014 "),VU=n(bGe,"A",{href:!0});var URt=s(VU);Wsr=r(URt,"DebertaV2ForTokenClassification"),URt.forEach(t),Usr=r(bGe," (DeBERTa-v2 model)"),bGe.forEach(t),Hsr=i(K),eM=n(K,"LI",{});var vGe=s(eM);LFe=n(vGe,"STRONG",{});var HRt=s(LFe);Jsr=r(HRt,"distilbert"),HRt.forEach(t),Ysr=r(vGe," \u2014 "),XU=n(vGe,"A",{href:!0});var JRt=s(XU);Ksr=r(JRt,"DistilBertForTokenClassification"),JRt.forEach(t),Zsr=r(vGe," (DistilBERT model)"),vGe.forEach(t),elr=i(K),oM=n(K,"LI",{});var FGe=s(oM);xFe=n(FGe,"STRONG",{});var YRt=s(xFe);olr=r(YRt,"electra"),YRt.forEach(t),rlr=r(FGe," \u2014 "),zU=n(FGe,"A",{href:!0});var KRt=s(zU);tlr=r(KRt,"ElectraForTokenClassification"),KRt.forEach(t),alr=r(FGe," (ELECTRA model)"),FGe.forEach(t),nlr=i(K),rM=n(K,"LI",{});var TGe=s(rM);$Fe=n(TGe,"STRONG",{});var ZRt=s($Fe);slr=r(ZRt,"flaubert"),ZRt.forEach(t),llr=r(TGe," \u2014 "),QU=n(TGe,"A",{href:!0});var ePt=s(QU);ilr=r(ePt,"FlaubertForTokenClassification"),ePt.forEach(t),dlr=r(TGe," (FlauBERT model)"),TGe.forEach(t),clr=i(K),tM=n(K,"LI",{});var MGe=s(tM);kFe=n(MGe,"STRONG",{});var oPt=s(kFe);mlr=r(oPt,"fnet"),oPt.forEach(t),flr=r(MGe," \u2014 "),WU=n(MGe,"A",{href:!0});var rPt=s(WU);glr=r(rPt,"FNetForTokenClassification"),rPt.forEach(t),hlr=r(MGe," (FNet model)"),MGe.forEach(t),ulr=i(K),aM=n(K,"LI",{});var EGe=s(aM);SFe=n(EGe,"STRONG",{});var tPt=s(SFe);plr=r(tPt,"funnel"),tPt.forEach(t),_lr=r(EGe," \u2014 "),UU=n(EGe,"A",{href:!0});var aPt=s(UU);blr=r(aPt,"FunnelForTokenClassification"),aPt.forEach(t),vlr=r(EGe," (Funnel Transformer model)"),EGe.forEach(t),Flr=i(K),nM=n(K,"LI",{});var CGe=s(nM);RFe=n(CGe,"STRONG",{});var nPt=s(RFe);Tlr=r(nPt,"gpt2"),nPt.forEach(t),Mlr=r(CGe," \u2014 "),HU=n(CGe,"A",{href:!0});var sPt=s(HU);Elr=r(sPt,"GPT2ForTokenClassification"),sPt.forEach(t),Clr=r(CGe," (OpenAI GPT-2 model)"),CGe.forEach(t),wlr=i(K),sM=n(K,"LI",{});var wGe=s(sM);PFe=n(wGe,"STRONG",{});var lPt=s(PFe);Alr=r(lPt,"ibert"),lPt.forEach(t),ylr=r(wGe," \u2014 "),JU=n(wGe,"A",{href:!0});var iPt=s(JU);Llr=r(iPt,"IBertForTokenClassification"),iPt.forEach(t),xlr=r(wGe," (I-BERT model)"),wGe.forEach(t),$lr=i(K),lM=n(K,"LI",{});var AGe=s(lM);BFe=n(AGe,"STRONG",{});var dPt=s(BFe);klr=r(dPt,"layoutlm"),dPt.forEach(t),Slr=r(AGe," \u2014 "),YU=n(AGe,"A",{href:!0});var cPt=s(YU);Rlr=r(cPt,"LayoutLMForTokenClassification"),cPt.forEach(t),Plr=r(AGe," (LayoutLM model)"),AGe.forEach(t),Blr=i(K),iM=n(K,"LI",{});var yGe=s(iM);IFe=n(yGe,"STRONG",{});var mPt=s(IFe);Ilr=r(mPt,"layoutlmv2"),mPt.forEach(t),Nlr=r(yGe," \u2014 "),KU=n(yGe,"A",{href:!0});var fPt=s(KU);qlr=r(fPt,"LayoutLMv2ForTokenClassification"),fPt.forEach(t),jlr=r(yGe," (LayoutLMv2 model)"),yGe.forEach(t),Dlr=i(K),dM=n(K,"LI",{});var LGe=s(dM);NFe=n(LGe,"STRONG",{});var gPt=s(NFe);Glr=r(gPt,"layoutlmv3"),gPt.forEach(t),Olr=r(LGe," \u2014 "),ZU=n(LGe,"A",{href:!0});var hPt=s(ZU);Vlr=r(hPt,"LayoutLMv3ForTokenClassification"),hPt.forEach(t),Xlr=r(LGe," (LayoutLMv3 model)"),LGe.forEach(t),zlr=i(K),cM=n(K,"LI",{});var xGe=s(cM);qFe=n(xGe,"STRONG",{});var uPt=s(qFe);Qlr=r(uPt,"longformer"),uPt.forEach(t),Wlr=r(xGe," \u2014 "),eH=n(xGe,"A",{href:!0});var pPt=s(eH);Ulr=r(pPt,"LongformerForTokenClassification"),pPt.forEach(t),Hlr=r(xGe," (Longformer model)"),xGe.forEach(t),Jlr=i(K),mM=n(K,"LI",{});var $Ge=s(mM);jFe=n($Ge,"STRONG",{});var _Pt=s(jFe);Ylr=r(_Pt,"luke"),_Pt.forEach(t),Klr=r($Ge," \u2014 "),oH=n($Ge,"A",{href:!0});var bPt=s(oH);Zlr=r(bPt,"LukeForTokenClassification"),bPt.forEach(t),eir=r($Ge," (LUKE model)"),$Ge.forEach(t),oir=i(K),fM=n(K,"LI",{});var kGe=s(fM);DFe=n(kGe,"STRONG",{});var vPt=s(DFe);rir=r(vPt,"megatron-bert"),vPt.forEach(t),tir=r(kGe," \u2014 "),rH=n(kGe,"A",{href:!0});var FPt=s(rH);air=r(FPt,"MegatronBertForTokenClassification"),FPt.forEach(t),nir=r(kGe," (Megatron-BERT model)"),kGe.forEach(t),sir=i(K),gM=n(K,"LI",{});var SGe=s(gM);GFe=n(SGe,"STRONG",{});var TPt=s(GFe);lir=r(TPt,"mobilebert"),TPt.forEach(t),iir=r(SGe," \u2014 "),tH=n(SGe,"A",{href:!0});var MPt=s(tH);dir=r(MPt,"MobileBertForTokenClassification"),MPt.forEach(t),cir=r(SGe," (MobileBERT model)"),SGe.forEach(t),mir=i(K),hM=n(K,"LI",{});var RGe=s(hM);OFe=n(RGe,"STRONG",{});var EPt=s(OFe);fir=r(EPt,"mpnet"),EPt.forEach(t),gir=r(RGe," \u2014 "),aH=n(RGe,"A",{href:!0});var CPt=s(aH);hir=r(CPt,"MPNetForTokenClassification"),CPt.forEach(t),uir=r(RGe," (MPNet model)"),RGe.forEach(t),pir=i(K),uM=n(K,"LI",{});var PGe=s(uM);VFe=n(PGe,"STRONG",{});var wPt=s(VFe);_ir=r(wPt,"nezha"),wPt.forEach(t),bir=r(PGe," \u2014 "),nH=n(PGe,"A",{href:!0});var APt=s(nH);vir=r(APt,"NezhaForTokenClassification"),APt.forEach(t),Fir=r(PGe," (Nezha model)"),PGe.forEach(t),Tir=i(K),pM=n(K,"LI",{});var BGe=s(pM);XFe=n(BGe,"STRONG",{});var yPt=s(XFe);Mir=r(yPt,"nystromformer"),yPt.forEach(t),Eir=r(BGe," \u2014 "),sH=n(BGe,"A",{href:!0});var LPt=s(sH);Cir=r(LPt,"NystromformerForTokenClassification"),LPt.forEach(t),wir=r(BGe," (Nystr\xF6mformer model)"),BGe.forEach(t),Air=i(K),_M=n(K,"LI",{});var IGe=s(_M);zFe=n(IGe,"STRONG",{});var xPt=s(zFe);yir=r(xPt,"qdqbert"),xPt.forEach(t),Lir=r(IGe," \u2014 "),lH=n(IGe,"A",{href:!0});var $Pt=s(lH);xir=r($Pt,"QDQBertForTokenClassification"),$Pt.forEach(t),$ir=r(IGe," (QDQBert model)"),IGe.forEach(t),kir=i(K),bM=n(K,"LI",{});var NGe=s(bM);QFe=n(NGe,"STRONG",{});var kPt=s(QFe);Sir=r(kPt,"rembert"),kPt.forEach(t),Rir=r(NGe," \u2014 "),iH=n(NGe,"A",{href:!0});var SPt=s(iH);Pir=r(SPt,"RemBertForTokenClassification"),SPt.forEach(t),Bir=r(NGe," (RemBERT model)"),NGe.forEach(t),Iir=i(K),vM=n(K,"LI",{});var qGe=s(vM);WFe=n(qGe,"STRONG",{});var RPt=s(WFe);Nir=r(RPt,"roberta"),RPt.forEach(t),qir=r(qGe," \u2014 "),dH=n(qGe,"A",{href:!0});var PPt=s(dH);jir=r(PPt,"RobertaForTokenClassification"),PPt.forEach(t),Dir=r(qGe," (RoBERTa model)"),qGe.forEach(t),Gir=i(K),FM=n(K,"LI",{});var jGe=s(FM);UFe=n(jGe,"STRONG",{});var BPt=s(UFe);Oir=r(BPt,"roformer"),BPt.forEach(t),Vir=r(jGe," \u2014 "),cH=n(jGe,"A",{href:!0});var IPt=s(cH);Xir=r(IPt,"RoFormerForTokenClassification"),IPt.forEach(t),zir=r(jGe," (RoFormer model)"),jGe.forEach(t),Qir=i(K),TM=n(K,"LI",{});var DGe=s(TM);HFe=n(DGe,"STRONG",{});var NPt=s(HFe);Wir=r(NPt,"squeezebert"),NPt.forEach(t),Uir=r(DGe," \u2014 "),mH=n(DGe,"A",{href:!0});var qPt=s(mH);Hir=r(qPt,"SqueezeBertForTokenClassification"),qPt.forEach(t),Jir=r(DGe," (SqueezeBERT model)"),DGe.forEach(t),Yir=i(K),MM=n(K,"LI",{});var GGe=s(MM);JFe=n(GGe,"STRONG",{});var jPt=s(JFe);Kir=r(jPt,"xlm"),jPt.forEach(t),Zir=r(GGe," \u2014 "),fH=n(GGe,"A",{href:!0});var DPt=s(fH);edr=r(DPt,"XLMForTokenClassification"),DPt.forEach(t),odr=r(GGe," (XLM model)"),GGe.forEach(t),rdr=i(K),EM=n(K,"LI",{});var OGe=s(EM);YFe=n(OGe,"STRONG",{});var GPt=s(YFe);tdr=r(GPt,"xlm-roberta"),GPt.forEach(t),adr=r(OGe," \u2014 "),gH=n(OGe,"A",{href:!0});var OPt=s(gH);ndr=r(OPt,"XLMRobertaForTokenClassification"),OPt.forEach(t),sdr=r(OGe," (XLM-RoBERTa model)"),OGe.forEach(t),ldr=i(K),CM=n(K,"LI",{});var VGe=s(CM);KFe=n(VGe,"STRONG",{});var VPt=s(KFe);idr=r(VPt,"xlm-roberta-xl"),VPt.forEach(t),ddr=r(VGe," \u2014 "),hH=n(VGe,"A",{href:!0});var XPt=s(hH);cdr=r(XPt,"XLMRobertaXLForTokenClassification"),XPt.forEach(t),mdr=r(VGe," (XLM-RoBERTa-XL model)"),VGe.forEach(t),fdr=i(K),wM=n(K,"LI",{});var XGe=s(wM);ZFe=n(XGe,"STRONG",{});var zPt=s(ZFe);gdr=r(zPt,"xlnet"),zPt.forEach(t),hdr=r(XGe," \u2014 "),uH=n(XGe,"A",{href:!0});var QPt=s(uH);udr=r(QPt,"XLNetForTokenClassification"),QPt.forEach(t),pdr=r(XGe," (XLNet model)"),XGe.forEach(t),_dr=i(K),AM=n(K,"LI",{});var zGe=s(AM);eTe=n(zGe,"STRONG",{});var WPt=s(eTe);bdr=r(WPt,"yoso"),WPt.forEach(t),vdr=r(zGe," \u2014 "),pH=n(zGe,"A",{href:!0});var UPt=s(pH);Fdr=r(UPt,"YosoForTokenClassification"),UPt.forEach(t),Tdr=r(zGe," (YOSO model)"),zGe.forEach(t),K.forEach(t),Mdr=i(La),yM=n(La,"P",{});var QGe=s(yM);Edr=r(QGe,"The model is set in evaluation mode by default using "),oTe=n(QGe,"CODE",{});var HPt=s(oTe);Cdr=r(HPt,"model.eval()"),HPt.forEach(t),wdr=r(QGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rTe=n(QGe,"CODE",{});var JPt=s(rTe);Adr=r(JPt,"model.train()"),JPt.forEach(t),QGe.forEach(t),ydr=i(La),T(LM.$$.fragment,La),La.forEach(t),kl.forEach(t),JJe=i(m),Gd=n(m,"H2",{class:!0});var cZe=s(Gd);xM=n(cZe,"A",{id:!0,class:!0,href:!0});var YPt=s(xM);tTe=n(YPt,"SPAN",{});var KPt=s(tTe);T(Cx.$$.fragment,KPt),KPt.forEach(t),YPt.forEach(t),Ldr=i(cZe),aTe=n(cZe,"SPAN",{});var ZPt=s(aTe);xdr=r(ZPt,"AutoModelForQuestionAnswering"),ZPt.forEach(t),cZe.forEach(t),YJe=i(m),Vo=n(m,"DIV",{class:!0});var Sl=s(Vo);T(wx.$$.fragment,Sl),$dr=i(Sl),Od=n(Sl,"P",{});var xse=s(Od);kdr=r(xse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_H=n(xse,"A",{href:!0});var eBt=s(_H);Sdr=r(eBt,"from_pretrained()"),eBt.forEach(t),Rdr=r(xse," class method or the "),bH=n(xse,"A",{href:!0});var oBt=s(bH);Pdr=r(oBt,"from_config()"),oBt.forEach(t),Bdr=r(xse,` class
method.`),xse.forEach(t),Idr=i(Sl),Ax=n(Sl,"P",{});var mZe=s(Ax);Ndr=r(mZe,"This class cannot be instantiated directly using "),nTe=n(mZe,"CODE",{});var rBt=s(nTe);qdr=r(rBt,"__init__()"),rBt.forEach(t),jdr=r(mZe," (throws an error)."),mZe.forEach(t),Ddr=i(Sl),wt=n(Sl,"DIV",{class:!0});var FL=s(wt);T(yx.$$.fragment,FL),Gdr=i(FL),sTe=n(FL,"P",{});var tBt=s(sTe);Odr=r(tBt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tBt.forEach(t),Vdr=i(FL),Vd=n(FL,"P",{});var $se=s(Vd);Xdr=r($se,`Note:
Loading a model from its configuration file does `),lTe=n($se,"STRONG",{});var aBt=s(lTe);zdr=r(aBt,"not"),aBt.forEach(t),Qdr=r($se,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n($se,"A",{href:!0});var nBt=s(vH);Wdr=r(nBt,"from_pretrained()"),nBt.forEach(t),Udr=r($se," to load the model weights."),$se.forEach(t),Hdr=i(FL),T($M.$$.fragment,FL),FL.forEach(t),Jdr=i(Sl),lo=n(Sl,"DIV",{class:!0});var xa=s(lo);T(Lx.$$.fragment,xa),Ydr=i(xa),iTe=n(xa,"P",{});var sBt=s(iTe);Kdr=r(sBt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sBt.forEach(t),Zdr=i(xa),nn=n(xa,"P",{});var TL=s(nn);ecr=r(TL,"The model class to instantiate is selected based on the "),dTe=n(TL,"CODE",{});var lBt=s(dTe);ocr=r(lBt,"model_type"),lBt.forEach(t),rcr=r(TL,` property of the config object (either
passed as an argument or loaded from `),cTe=n(TL,"CODE",{});var iBt=s(cTe);tcr=r(iBt,"pretrained_model_name_or_path"),iBt.forEach(t),acr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=n(TL,"CODE",{});var dBt=s(mTe);ncr=r(dBt,"pretrained_model_name_or_path"),dBt.forEach(t),scr=r(TL,":"),TL.forEach(t),lcr=i(xa),V=n(xa,"UL",{});var X=s(V);kM=n(X,"LI",{});var WGe=s(kM);fTe=n(WGe,"STRONG",{});var cBt=s(fTe);icr=r(cBt,"albert"),cBt.forEach(t),dcr=r(WGe," \u2014 "),FH=n(WGe,"A",{href:!0});var mBt=s(FH);ccr=r(mBt,"AlbertForQuestionAnswering"),mBt.forEach(t),mcr=r(WGe," (ALBERT model)"),WGe.forEach(t),fcr=i(X),SM=n(X,"LI",{});var UGe=s(SM);gTe=n(UGe,"STRONG",{});var fBt=s(gTe);gcr=r(fBt,"bart"),fBt.forEach(t),hcr=r(UGe," \u2014 "),TH=n(UGe,"A",{href:!0});var gBt=s(TH);ucr=r(gBt,"BartForQuestionAnswering"),gBt.forEach(t),pcr=r(UGe," (BART model)"),UGe.forEach(t),_cr=i(X),RM=n(X,"LI",{});var HGe=s(RM);hTe=n(HGe,"STRONG",{});var hBt=s(hTe);bcr=r(hBt,"bert"),hBt.forEach(t),vcr=r(HGe," \u2014 "),MH=n(HGe,"A",{href:!0});var uBt=s(MH);Fcr=r(uBt,"BertForQuestionAnswering"),uBt.forEach(t),Tcr=r(HGe," (BERT model)"),HGe.forEach(t),Mcr=i(X),PM=n(X,"LI",{});var JGe=s(PM);uTe=n(JGe,"STRONG",{});var pBt=s(uTe);Ecr=r(pBt,"big_bird"),pBt.forEach(t),Ccr=r(JGe," \u2014 "),EH=n(JGe,"A",{href:!0});var _Bt=s(EH);wcr=r(_Bt,"BigBirdForQuestionAnswering"),_Bt.forEach(t),Acr=r(JGe," (BigBird model)"),JGe.forEach(t),ycr=i(X),BM=n(X,"LI",{});var YGe=s(BM);pTe=n(YGe,"STRONG",{});var bBt=s(pTe);Lcr=r(bBt,"bigbird_pegasus"),bBt.forEach(t),xcr=r(YGe," \u2014 "),CH=n(YGe,"A",{href:!0});var vBt=s(CH);$cr=r(vBt,"BigBirdPegasusForQuestionAnswering"),vBt.forEach(t),kcr=r(YGe," (BigBird-Pegasus model)"),YGe.forEach(t),Scr=i(X),IM=n(X,"LI",{});var KGe=s(IM);_Te=n(KGe,"STRONG",{});var FBt=s(_Te);Rcr=r(FBt,"camembert"),FBt.forEach(t),Pcr=r(KGe," \u2014 "),wH=n(KGe,"A",{href:!0});var TBt=s(wH);Bcr=r(TBt,"CamembertForQuestionAnswering"),TBt.forEach(t),Icr=r(KGe," (CamemBERT model)"),KGe.forEach(t),Ncr=i(X),NM=n(X,"LI",{});var ZGe=s(NM);bTe=n(ZGe,"STRONG",{});var MBt=s(bTe);qcr=r(MBt,"canine"),MBt.forEach(t),jcr=r(ZGe," \u2014 "),AH=n(ZGe,"A",{href:!0});var EBt=s(AH);Dcr=r(EBt,"CanineForQuestionAnswering"),EBt.forEach(t),Gcr=r(ZGe," (CANINE model)"),ZGe.forEach(t),Ocr=i(X),qM=n(X,"LI",{});var eOe=s(qM);vTe=n(eOe,"STRONG",{});var CBt=s(vTe);Vcr=r(CBt,"convbert"),CBt.forEach(t),Xcr=r(eOe," \u2014 "),yH=n(eOe,"A",{href:!0});var wBt=s(yH);zcr=r(wBt,"ConvBertForQuestionAnswering"),wBt.forEach(t),Qcr=r(eOe," (ConvBERT model)"),eOe.forEach(t),Wcr=i(X),jM=n(X,"LI",{});var oOe=s(jM);FTe=n(oOe,"STRONG",{});var ABt=s(FTe);Ucr=r(ABt,"data2vec-text"),ABt.forEach(t),Hcr=r(oOe," \u2014 "),LH=n(oOe,"A",{href:!0});var yBt=s(LH);Jcr=r(yBt,"Data2VecTextForQuestionAnswering"),yBt.forEach(t),Ycr=r(oOe," (Data2VecText model)"),oOe.forEach(t),Kcr=i(X),DM=n(X,"LI",{});var rOe=s(DM);TTe=n(rOe,"STRONG",{});var LBt=s(TTe);Zcr=r(LBt,"deberta"),LBt.forEach(t),emr=r(rOe," \u2014 "),xH=n(rOe,"A",{href:!0});var xBt=s(xH);omr=r(xBt,"DebertaForQuestionAnswering"),xBt.forEach(t),rmr=r(rOe," (DeBERTa model)"),rOe.forEach(t),tmr=i(X),GM=n(X,"LI",{});var tOe=s(GM);MTe=n(tOe,"STRONG",{});var $Bt=s(MTe);amr=r($Bt,"deberta-v2"),$Bt.forEach(t),nmr=r(tOe," \u2014 "),$H=n(tOe,"A",{href:!0});var kBt=s($H);smr=r(kBt,"DebertaV2ForQuestionAnswering"),kBt.forEach(t),lmr=r(tOe," (DeBERTa-v2 model)"),tOe.forEach(t),imr=i(X),OM=n(X,"LI",{});var aOe=s(OM);ETe=n(aOe,"STRONG",{});var SBt=s(ETe);dmr=r(SBt,"distilbert"),SBt.forEach(t),cmr=r(aOe," \u2014 "),kH=n(aOe,"A",{href:!0});var RBt=s(kH);mmr=r(RBt,"DistilBertForQuestionAnswering"),RBt.forEach(t),fmr=r(aOe," (DistilBERT model)"),aOe.forEach(t),gmr=i(X),VM=n(X,"LI",{});var nOe=s(VM);CTe=n(nOe,"STRONG",{});var PBt=s(CTe);hmr=r(PBt,"electra"),PBt.forEach(t),umr=r(nOe," \u2014 "),SH=n(nOe,"A",{href:!0});var BBt=s(SH);pmr=r(BBt,"ElectraForQuestionAnswering"),BBt.forEach(t),_mr=r(nOe," (ELECTRA model)"),nOe.forEach(t),bmr=i(X),XM=n(X,"LI",{});var sOe=s(XM);wTe=n(sOe,"STRONG",{});var IBt=s(wTe);vmr=r(IBt,"flaubert"),IBt.forEach(t),Fmr=r(sOe," \u2014 "),RH=n(sOe,"A",{href:!0});var NBt=s(RH);Tmr=r(NBt,"FlaubertForQuestionAnsweringSimple"),NBt.forEach(t),Mmr=r(sOe," (FlauBERT model)"),sOe.forEach(t),Emr=i(X),zM=n(X,"LI",{});var lOe=s(zM);ATe=n(lOe,"STRONG",{});var qBt=s(ATe);Cmr=r(qBt,"fnet"),qBt.forEach(t),wmr=r(lOe," \u2014 "),PH=n(lOe,"A",{href:!0});var jBt=s(PH);Amr=r(jBt,"FNetForQuestionAnswering"),jBt.forEach(t),ymr=r(lOe," (FNet model)"),lOe.forEach(t),Lmr=i(X),QM=n(X,"LI",{});var iOe=s(QM);yTe=n(iOe,"STRONG",{});var DBt=s(yTe);xmr=r(DBt,"funnel"),DBt.forEach(t),$mr=r(iOe," \u2014 "),BH=n(iOe,"A",{href:!0});var GBt=s(BH);kmr=r(GBt,"FunnelForQuestionAnswering"),GBt.forEach(t),Smr=r(iOe," (Funnel Transformer model)"),iOe.forEach(t),Rmr=i(X),WM=n(X,"LI",{});var dOe=s(WM);LTe=n(dOe,"STRONG",{});var OBt=s(LTe);Pmr=r(OBt,"gptj"),OBt.forEach(t),Bmr=r(dOe," \u2014 "),IH=n(dOe,"A",{href:!0});var VBt=s(IH);Imr=r(VBt,"GPTJForQuestionAnswering"),VBt.forEach(t),Nmr=r(dOe," (GPT-J model)"),dOe.forEach(t),qmr=i(X),UM=n(X,"LI",{});var cOe=s(UM);xTe=n(cOe,"STRONG",{});var XBt=s(xTe);jmr=r(XBt,"ibert"),XBt.forEach(t),Dmr=r(cOe," \u2014 "),NH=n(cOe,"A",{href:!0});var zBt=s(NH);Gmr=r(zBt,"IBertForQuestionAnswering"),zBt.forEach(t),Omr=r(cOe," (I-BERT model)"),cOe.forEach(t),Vmr=i(X),HM=n(X,"LI",{});var mOe=s(HM);$Te=n(mOe,"STRONG",{});var QBt=s($Te);Xmr=r(QBt,"layoutlmv2"),QBt.forEach(t),zmr=r(mOe," \u2014 "),qH=n(mOe,"A",{href:!0});var WBt=s(qH);Qmr=r(WBt,"LayoutLMv2ForQuestionAnswering"),WBt.forEach(t),Wmr=r(mOe," (LayoutLMv2 model)"),mOe.forEach(t),Umr=i(X),JM=n(X,"LI",{});var fOe=s(JM);kTe=n(fOe,"STRONG",{});var UBt=s(kTe);Hmr=r(UBt,"layoutlmv3"),UBt.forEach(t),Jmr=r(fOe," \u2014 "),jH=n(fOe,"A",{href:!0});var HBt=s(jH);Ymr=r(HBt,"LayoutLMv3ForQuestionAnswering"),HBt.forEach(t),Kmr=r(fOe," (LayoutLMv3 model)"),fOe.forEach(t),Zmr=i(X),YM=n(X,"LI",{});var gOe=s(YM);STe=n(gOe,"STRONG",{});var JBt=s(STe);efr=r(JBt,"led"),JBt.forEach(t),ofr=r(gOe," \u2014 "),DH=n(gOe,"A",{href:!0});var YBt=s(DH);rfr=r(YBt,"LEDForQuestionAnswering"),YBt.forEach(t),tfr=r(gOe," (LED model)"),gOe.forEach(t),afr=i(X),KM=n(X,"LI",{});var hOe=s(KM);RTe=n(hOe,"STRONG",{});var KBt=s(RTe);nfr=r(KBt,"longformer"),KBt.forEach(t),sfr=r(hOe," \u2014 "),GH=n(hOe,"A",{href:!0});var ZBt=s(GH);lfr=r(ZBt,"LongformerForQuestionAnswering"),ZBt.forEach(t),ifr=r(hOe," (Longformer model)"),hOe.forEach(t),dfr=i(X),ZM=n(X,"LI",{});var uOe=s(ZM);PTe=n(uOe,"STRONG",{});var eIt=s(PTe);cfr=r(eIt,"luke"),eIt.forEach(t),mfr=r(uOe," \u2014 "),OH=n(uOe,"A",{href:!0});var oIt=s(OH);ffr=r(oIt,"LukeForQuestionAnswering"),oIt.forEach(t),gfr=r(uOe," (LUKE model)"),uOe.forEach(t),hfr=i(X),eE=n(X,"LI",{});var pOe=s(eE);BTe=n(pOe,"STRONG",{});var rIt=s(BTe);ufr=r(rIt,"lxmert"),rIt.forEach(t),pfr=r(pOe," \u2014 "),VH=n(pOe,"A",{href:!0});var tIt=s(VH);_fr=r(tIt,"LxmertForQuestionAnswering"),tIt.forEach(t),bfr=r(pOe," (LXMERT model)"),pOe.forEach(t),vfr=i(X),oE=n(X,"LI",{});var _Oe=s(oE);ITe=n(_Oe,"STRONG",{});var aIt=s(ITe);Ffr=r(aIt,"mbart"),aIt.forEach(t),Tfr=r(_Oe," \u2014 "),XH=n(_Oe,"A",{href:!0});var nIt=s(XH);Mfr=r(nIt,"MBartForQuestionAnswering"),nIt.forEach(t),Efr=r(_Oe," (mBART model)"),_Oe.forEach(t),Cfr=i(X),rE=n(X,"LI",{});var bOe=s(rE);NTe=n(bOe,"STRONG",{});var sIt=s(NTe);wfr=r(sIt,"megatron-bert"),sIt.forEach(t),Afr=r(bOe," \u2014 "),zH=n(bOe,"A",{href:!0});var lIt=s(zH);yfr=r(lIt,"MegatronBertForQuestionAnswering"),lIt.forEach(t),Lfr=r(bOe," (Megatron-BERT model)"),bOe.forEach(t),xfr=i(X),tE=n(X,"LI",{});var vOe=s(tE);qTe=n(vOe,"STRONG",{});var iIt=s(qTe);$fr=r(iIt,"mobilebert"),iIt.forEach(t),kfr=r(vOe," \u2014 "),QH=n(vOe,"A",{href:!0});var dIt=s(QH);Sfr=r(dIt,"MobileBertForQuestionAnswering"),dIt.forEach(t),Rfr=r(vOe," (MobileBERT model)"),vOe.forEach(t),Pfr=i(X),aE=n(X,"LI",{});var FOe=s(aE);jTe=n(FOe,"STRONG",{});var cIt=s(jTe);Bfr=r(cIt,"mpnet"),cIt.forEach(t),Ifr=r(FOe," \u2014 "),WH=n(FOe,"A",{href:!0});var mIt=s(WH);Nfr=r(mIt,"MPNetForQuestionAnswering"),mIt.forEach(t),qfr=r(FOe," (MPNet model)"),FOe.forEach(t),jfr=i(X),nE=n(X,"LI",{});var TOe=s(nE);DTe=n(TOe,"STRONG",{});var fIt=s(DTe);Dfr=r(fIt,"mvp"),fIt.forEach(t),Gfr=r(TOe," \u2014 "),UH=n(TOe,"A",{href:!0});var gIt=s(UH);Ofr=r(gIt,"MvpForQuestionAnswering"),gIt.forEach(t),Vfr=r(TOe," (MVP model)"),TOe.forEach(t),Xfr=i(X),sE=n(X,"LI",{});var MOe=s(sE);GTe=n(MOe,"STRONG",{});var hIt=s(GTe);zfr=r(hIt,"nezha"),hIt.forEach(t),Qfr=r(MOe," \u2014 "),HH=n(MOe,"A",{href:!0});var uIt=s(HH);Wfr=r(uIt,"NezhaForQuestionAnswering"),uIt.forEach(t),Ufr=r(MOe," (Nezha model)"),MOe.forEach(t),Hfr=i(X),lE=n(X,"LI",{});var EOe=s(lE);OTe=n(EOe,"STRONG",{});var pIt=s(OTe);Jfr=r(pIt,"nystromformer"),pIt.forEach(t),Yfr=r(EOe," \u2014 "),JH=n(EOe,"A",{href:!0});var _It=s(JH);Kfr=r(_It,"NystromformerForQuestionAnswering"),_It.forEach(t),Zfr=r(EOe," (Nystr\xF6mformer model)"),EOe.forEach(t),egr=i(X),iE=n(X,"LI",{});var COe=s(iE);VTe=n(COe,"STRONG",{});var bIt=s(VTe);ogr=r(bIt,"qdqbert"),bIt.forEach(t),rgr=r(COe," \u2014 "),YH=n(COe,"A",{href:!0});var vIt=s(YH);tgr=r(vIt,"QDQBertForQuestionAnswering"),vIt.forEach(t),agr=r(COe," (QDQBert model)"),COe.forEach(t),ngr=i(X),dE=n(X,"LI",{});var wOe=s(dE);XTe=n(wOe,"STRONG",{});var FIt=s(XTe);sgr=r(FIt,"reformer"),FIt.forEach(t),lgr=r(wOe," \u2014 "),KH=n(wOe,"A",{href:!0});var TIt=s(KH);igr=r(TIt,"ReformerForQuestionAnswering"),TIt.forEach(t),dgr=r(wOe," (Reformer model)"),wOe.forEach(t),cgr=i(X),cE=n(X,"LI",{});var AOe=s(cE);zTe=n(AOe,"STRONG",{});var MIt=s(zTe);mgr=r(MIt,"rembert"),MIt.forEach(t),fgr=r(AOe," \u2014 "),ZH=n(AOe,"A",{href:!0});var EIt=s(ZH);ggr=r(EIt,"RemBertForQuestionAnswering"),EIt.forEach(t),hgr=r(AOe," (RemBERT model)"),AOe.forEach(t),ugr=i(X),mE=n(X,"LI",{});var yOe=s(mE);QTe=n(yOe,"STRONG",{});var CIt=s(QTe);pgr=r(CIt,"roberta"),CIt.forEach(t),_gr=r(yOe," \u2014 "),eJ=n(yOe,"A",{href:!0});var wIt=s(eJ);bgr=r(wIt,"RobertaForQuestionAnswering"),wIt.forEach(t),vgr=r(yOe," (RoBERTa model)"),yOe.forEach(t),Fgr=i(X),fE=n(X,"LI",{});var LOe=s(fE);WTe=n(LOe,"STRONG",{});var AIt=s(WTe);Tgr=r(AIt,"roformer"),AIt.forEach(t),Mgr=r(LOe," \u2014 "),oJ=n(LOe,"A",{href:!0});var yIt=s(oJ);Egr=r(yIt,"RoFormerForQuestionAnswering"),yIt.forEach(t),Cgr=r(LOe," (RoFormer model)"),LOe.forEach(t),wgr=i(X),gE=n(X,"LI",{});var xOe=s(gE);UTe=n(xOe,"STRONG",{});var LIt=s(UTe);Agr=r(LIt,"splinter"),LIt.forEach(t),ygr=r(xOe," \u2014 "),rJ=n(xOe,"A",{href:!0});var xIt=s(rJ);Lgr=r(xIt,"SplinterForQuestionAnswering"),xIt.forEach(t),xgr=r(xOe," (Splinter model)"),xOe.forEach(t),$gr=i(X),hE=n(X,"LI",{});var $Oe=s(hE);HTe=n($Oe,"STRONG",{});var $It=s(HTe);kgr=r($It,"squeezebert"),$It.forEach(t),Sgr=r($Oe," \u2014 "),tJ=n($Oe,"A",{href:!0});var kIt=s(tJ);Rgr=r(kIt,"SqueezeBertForQuestionAnswering"),kIt.forEach(t),Pgr=r($Oe," (SqueezeBERT model)"),$Oe.forEach(t),Bgr=i(X),uE=n(X,"LI",{});var kOe=s(uE);JTe=n(kOe,"STRONG",{});var SIt=s(JTe);Igr=r(SIt,"xlm"),SIt.forEach(t),Ngr=r(kOe," \u2014 "),aJ=n(kOe,"A",{href:!0});var RIt=s(aJ);qgr=r(RIt,"XLMForQuestionAnsweringSimple"),RIt.forEach(t),jgr=r(kOe," (XLM model)"),kOe.forEach(t),Dgr=i(X),pE=n(X,"LI",{});var SOe=s(pE);YTe=n(SOe,"STRONG",{});var PIt=s(YTe);Ggr=r(PIt,"xlm-roberta"),PIt.forEach(t),Ogr=r(SOe," \u2014 "),nJ=n(SOe,"A",{href:!0});var BIt=s(nJ);Vgr=r(BIt,"XLMRobertaForQuestionAnswering"),BIt.forEach(t),Xgr=r(SOe," (XLM-RoBERTa model)"),SOe.forEach(t),zgr=i(X),_E=n(X,"LI",{});var ROe=s(_E);KTe=n(ROe,"STRONG",{});var IIt=s(KTe);Qgr=r(IIt,"xlm-roberta-xl"),IIt.forEach(t),Wgr=r(ROe," \u2014 "),sJ=n(ROe,"A",{href:!0});var NIt=s(sJ);Ugr=r(NIt,"XLMRobertaXLForQuestionAnswering"),NIt.forEach(t),Hgr=r(ROe," (XLM-RoBERTa-XL model)"),ROe.forEach(t),Jgr=i(X),bE=n(X,"LI",{});var POe=s(bE);ZTe=n(POe,"STRONG",{});var qIt=s(ZTe);Ygr=r(qIt,"xlnet"),qIt.forEach(t),Kgr=r(POe," \u2014 "),lJ=n(POe,"A",{href:!0});var jIt=s(lJ);Zgr=r(jIt,"XLNetForQuestionAnsweringSimple"),jIt.forEach(t),ehr=r(POe," (XLNet model)"),POe.forEach(t),ohr=i(X),vE=n(X,"LI",{});var BOe=s(vE);eMe=n(BOe,"STRONG",{});var DIt=s(eMe);rhr=r(DIt,"yoso"),DIt.forEach(t),thr=r(BOe," \u2014 "),iJ=n(BOe,"A",{href:!0});var GIt=s(iJ);ahr=r(GIt,"YosoForQuestionAnswering"),GIt.forEach(t),nhr=r(BOe," (YOSO model)"),BOe.forEach(t),X.forEach(t),shr=i(xa),FE=n(xa,"P",{});var IOe=s(FE);lhr=r(IOe,"The model is set in evaluation mode by default using "),oMe=n(IOe,"CODE",{});var OIt=s(oMe);ihr=r(OIt,"model.eval()"),OIt.forEach(t),dhr=r(IOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rMe=n(IOe,"CODE",{});var VIt=s(rMe);chr=r(VIt,"model.train()"),VIt.forEach(t),IOe.forEach(t),mhr=i(xa),T(TE.$$.fragment,xa),xa.forEach(t),Sl.forEach(t),KJe=i(m),Xd=n(m,"H2",{class:!0});var fZe=s(Xd);ME=n(fZe,"A",{id:!0,class:!0,href:!0});var XIt=s(ME);tMe=n(XIt,"SPAN",{});var zIt=s(tMe);T(xx.$$.fragment,zIt),zIt.forEach(t),XIt.forEach(t),fhr=i(fZe),aMe=n(fZe,"SPAN",{});var QIt=s(aMe);ghr=r(QIt,"AutoModelForTableQuestionAnswering"),QIt.forEach(t),fZe.forEach(t),ZJe=i(m),Xo=n(m,"DIV",{class:!0});var Rl=s(Xo);T($x.$$.fragment,Rl),hhr=i(Rl),zd=n(Rl,"P",{});var kse=s(zd);uhr=r(kse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dJ=n(kse,"A",{href:!0});var WIt=s(dJ);phr=r(WIt,"from_pretrained()"),WIt.forEach(t),_hr=r(kse," class method or the "),cJ=n(kse,"A",{href:!0});var UIt=s(cJ);bhr=r(UIt,"from_config()"),UIt.forEach(t),vhr=r(kse,` class
method.`),kse.forEach(t),Fhr=i(Rl),kx=n(Rl,"P",{});var gZe=s(kx);Thr=r(gZe,"This class cannot be instantiated directly using "),nMe=n(gZe,"CODE",{});var HIt=s(nMe);Mhr=r(HIt,"__init__()"),HIt.forEach(t),Ehr=r(gZe," (throws an error)."),gZe.forEach(t),Chr=i(Rl),At=n(Rl,"DIV",{class:!0});var ML=s(At);T(Sx.$$.fragment,ML),whr=i(ML),sMe=n(ML,"P",{});var JIt=s(sMe);Ahr=r(JIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JIt.forEach(t),yhr=i(ML),Qd=n(ML,"P",{});var Sse=s(Qd);Lhr=r(Sse,`Note:
Loading a model from its configuration file does `),lMe=n(Sse,"STRONG",{});var YIt=s(lMe);xhr=r(YIt,"not"),YIt.forEach(t),$hr=r(Sse,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(Sse,"A",{href:!0});var KIt=s(mJ);khr=r(KIt,"from_pretrained()"),KIt.forEach(t),Shr=r(Sse," to load the model weights."),Sse.forEach(t),Rhr=i(ML),T(EE.$$.fragment,ML),ML.forEach(t),Phr=i(Rl),io=n(Rl,"DIV",{class:!0});var $a=s(io);T(Rx.$$.fragment,$a),Bhr=i($a),iMe=n($a,"P",{});var ZIt=s(iMe);Ihr=r(ZIt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZIt.forEach(t),Nhr=i($a),sn=n($a,"P",{});var EL=s(sn);qhr=r(EL,"The model class to instantiate is selected based on the "),dMe=n(EL,"CODE",{});var eNt=s(dMe);jhr=r(eNt,"model_type"),eNt.forEach(t),Dhr=r(EL,` property of the config object (either
passed as an argument or loaded from `),cMe=n(EL,"CODE",{});var oNt=s(cMe);Ghr=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),Ohr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mMe=n(EL,"CODE",{});var rNt=s(mMe);Vhr=r(rNt,"pretrained_model_name_or_path"),rNt.forEach(t),Xhr=r(EL,":"),EL.forEach(t),zhr=i($a),fMe=n($a,"UL",{});var tNt=s(fMe);CE=n(tNt,"LI",{});var NOe=s(CE);gMe=n(NOe,"STRONG",{});var aNt=s(gMe);Qhr=r(aNt,"tapas"),aNt.forEach(t),Whr=r(NOe," \u2014 "),fJ=n(NOe,"A",{href:!0});var nNt=s(fJ);Uhr=r(nNt,"TapasForQuestionAnswering"),nNt.forEach(t),Hhr=r(NOe," (TAPAS model)"),NOe.forEach(t),tNt.forEach(t),Jhr=i($a),wE=n($a,"P",{});var qOe=s(wE);Yhr=r(qOe,"The model is set in evaluation mode by default using "),hMe=n(qOe,"CODE",{});var sNt=s(hMe);Khr=r(sNt,"model.eval()"),sNt.forEach(t),Zhr=r(qOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uMe=n(qOe,"CODE",{});var lNt=s(uMe);eur=r(lNt,"model.train()"),lNt.forEach(t),qOe.forEach(t),our=i($a),T(AE.$$.fragment,$a),$a.forEach(t),Rl.forEach(t),eYe=i(m),Wd=n(m,"H2",{class:!0});var hZe=s(Wd);yE=n(hZe,"A",{id:!0,class:!0,href:!0});var iNt=s(yE);pMe=n(iNt,"SPAN",{});var dNt=s(pMe);T(Px.$$.fragment,dNt),dNt.forEach(t),iNt.forEach(t),rur=i(hZe),_Me=n(hZe,"SPAN",{});var cNt=s(_Me);tur=r(cNt,"AutoModelForDocumentQuestionAnswering"),cNt.forEach(t),hZe.forEach(t),oYe=i(m),zo=n(m,"DIV",{class:!0});var Pl=s(zo);T(Bx.$$.fragment,Pl),aur=i(Pl),Ud=n(Pl,"P",{});var Rse=s(Ud);nur=r(Rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),gJ=n(Rse,"A",{href:!0});var mNt=s(gJ);sur=r(mNt,"from_pretrained()"),mNt.forEach(t),lur=r(Rse," class method or the "),hJ=n(Rse,"A",{href:!0});var fNt=s(hJ);iur=r(fNt,"from_config()"),fNt.forEach(t),dur=r(Rse,` class
method.`),Rse.forEach(t),cur=i(Pl),Ix=n(Pl,"P",{});var uZe=s(Ix);mur=r(uZe,"This class cannot be instantiated directly using "),bMe=n(uZe,"CODE",{});var gNt=s(bMe);fur=r(gNt,"__init__()"),gNt.forEach(t),gur=r(uZe," (throws an error)."),uZe.forEach(t),hur=i(Pl),yt=n(Pl,"DIV",{class:!0});var CL=s(yt);T(Nx.$$.fragment,CL),uur=i(CL),vMe=n(CL,"P",{});var hNt=s(vMe);pur=r(hNt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),hNt.forEach(t),_ur=i(CL),Hd=n(CL,"P",{});var Pse=s(Hd);bur=r(Pse,`Note:
Loading a model from its configuration file does `),FMe=n(Pse,"STRONG",{});var uNt=s(FMe);vur=r(uNt,"not"),uNt.forEach(t),Fur=r(Pse,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n(Pse,"A",{href:!0});var pNt=s(uJ);Tur=r(pNt,"from_pretrained()"),pNt.forEach(t),Mur=r(Pse," to load the model weights."),Pse.forEach(t),Eur=i(CL),T(LE.$$.fragment,CL),CL.forEach(t),Cur=i(Pl),co=n(Pl,"DIV",{class:!0});var ka=s(co);T(qx.$$.fragment,ka),wur=i(ka),TMe=n(ka,"P",{});var _Nt=s(TMe);Aur=r(_Nt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),_Nt.forEach(t),yur=i(ka),ln=n(ka,"P",{});var wL=s(ln);Lur=r(wL,"The model class to instantiate is selected based on the "),MMe=n(wL,"CODE",{});var bNt=s(MMe);xur=r(bNt,"model_type"),bNt.forEach(t),$ur=r(wL,` property of the config object (either
passed as an argument or loaded from `),EMe=n(wL,"CODE",{});var vNt=s(EMe);kur=r(vNt,"pretrained_model_name_or_path"),vNt.forEach(t),Sur=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CMe=n(wL,"CODE",{});var FNt=s(CMe);Rur=r(FNt,"pretrained_model_name_or_path"),FNt.forEach(t),Pur=r(wL,":"),wL.forEach(t),Bur=i(ka),Jd=n(ka,"UL",{});var Bse=s(Jd);xE=n(Bse,"LI",{});var jOe=s(xE);wMe=n(jOe,"STRONG",{});var TNt=s(wMe);Iur=r(TNt,"layoutlm"),TNt.forEach(t),Nur=r(jOe," \u2014 "),pJ=n(jOe,"A",{href:!0});var MNt=s(pJ);qur=r(MNt,"LayoutLMForQuestionAnswering"),MNt.forEach(t),jur=r(jOe," (LayoutLM model)"),jOe.forEach(t),Dur=i(Bse),$E=n(Bse,"LI",{});var DOe=s($E);AMe=n(DOe,"STRONG",{});var ENt=s(AMe);Gur=r(ENt,"layoutlmv2"),ENt.forEach(t),Our=r(DOe," \u2014 "),_J=n(DOe,"A",{href:!0});var CNt=s(_J);Vur=r(CNt,"LayoutLMv2ForQuestionAnswering"),CNt.forEach(t),Xur=r(DOe," (LayoutLMv2 model)"),DOe.forEach(t),zur=i(Bse),kE=n(Bse,"LI",{});var GOe=s(kE);yMe=n(GOe,"STRONG",{});var wNt=s(yMe);Qur=r(wNt,"layoutlmv3"),wNt.forEach(t),Wur=r(GOe," \u2014 "),bJ=n(GOe,"A",{href:!0});var ANt=s(bJ);Uur=r(ANt,"LayoutLMv3ForQuestionAnswering"),ANt.forEach(t),Hur=r(GOe," (LayoutLMv3 model)"),GOe.forEach(t),Bse.forEach(t),Jur=i(ka),SE=n(ka,"P",{});var OOe=s(SE);Yur=r(OOe,"The model is set in evaluation mode by default using "),LMe=n(OOe,"CODE",{});var yNt=s(LMe);Kur=r(yNt,"model.eval()"),yNt.forEach(t),Zur=r(OOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xMe=n(OOe,"CODE",{});var LNt=s(xMe);epr=r(LNt,"model.train()"),LNt.forEach(t),OOe.forEach(t),opr=i(ka),T(RE.$$.fragment,ka),ka.forEach(t),Pl.forEach(t),rYe=i(m),Yd=n(m,"H2",{class:!0});var pZe=s(Yd);PE=n(pZe,"A",{id:!0,class:!0,href:!0});var xNt=s(PE);$Me=n(xNt,"SPAN",{});var $Nt=s($Me);T(jx.$$.fragment,$Nt),$Nt.forEach(t),xNt.forEach(t),rpr=i(pZe),kMe=n(pZe,"SPAN",{});var kNt=s(kMe);tpr=r(kNt,"AutoModelForImageClassification"),kNt.forEach(t),pZe.forEach(t),tYe=i(m),Qo=n(m,"DIV",{class:!0});var Bl=s(Qo);T(Dx.$$.fragment,Bl),apr=i(Bl),Kd=n(Bl,"P",{});var Ise=s(Kd);npr=r(Ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vJ=n(Ise,"A",{href:!0});var SNt=s(vJ);spr=r(SNt,"from_pretrained()"),SNt.forEach(t),lpr=r(Ise," class method or the "),FJ=n(Ise,"A",{href:!0});var RNt=s(FJ);ipr=r(RNt,"from_config()"),RNt.forEach(t),dpr=r(Ise,` class
method.`),Ise.forEach(t),cpr=i(Bl),Gx=n(Bl,"P",{});var _Ze=s(Gx);mpr=r(_Ze,"This class cannot be instantiated directly using "),SMe=n(_Ze,"CODE",{});var PNt=s(SMe);fpr=r(PNt,"__init__()"),PNt.forEach(t),gpr=r(_Ze," (throws an error)."),_Ze.forEach(t),hpr=i(Bl),Lt=n(Bl,"DIV",{class:!0});var AL=s(Lt);T(Ox.$$.fragment,AL),upr=i(AL),RMe=n(AL,"P",{});var BNt=s(RMe);ppr=r(BNt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BNt.forEach(t),_pr=i(AL),Zd=n(AL,"P",{});var Nse=s(Zd);bpr=r(Nse,`Note:
Loading a model from its configuration file does `),PMe=n(Nse,"STRONG",{});var INt=s(PMe);vpr=r(INt,"not"),INt.forEach(t),Fpr=r(Nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(Nse,"A",{href:!0});var NNt=s(TJ);Tpr=r(NNt,"from_pretrained()"),NNt.forEach(t),Mpr=r(Nse," to load the model weights."),Nse.forEach(t),Epr=i(AL),T(BE.$$.fragment,AL),AL.forEach(t),Cpr=i(Bl),mo=n(Bl,"DIV",{class:!0});var Sa=s(mo);T(Vx.$$.fragment,Sa),wpr=i(Sa),BMe=n(Sa,"P",{});var qNt=s(BMe);Apr=r(qNt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qNt.forEach(t),ypr=i(Sa),dn=n(Sa,"P",{});var yL=s(dn);Lpr=r(yL,"The model class to instantiate is selected based on the "),IMe=n(yL,"CODE",{});var jNt=s(IMe);xpr=r(jNt,"model_type"),jNt.forEach(t),$pr=r(yL,` property of the config object (either
passed as an argument or loaded from `),NMe=n(yL,"CODE",{});var DNt=s(NMe);kpr=r(DNt,"pretrained_model_name_or_path"),DNt.forEach(t),Spr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qMe=n(yL,"CODE",{});var GNt=s(qMe);Rpr=r(GNt,"pretrained_model_name_or_path"),GNt.forEach(t),Ppr=r(yL,":"),yL.forEach(t),Bpr=i(Sa),be=n(Sa,"UL",{});var Fe=s(be);IE=n(Fe,"LI",{});var VOe=s(IE);jMe=n(VOe,"STRONG",{});var ONt=s(jMe);Ipr=r(ONt,"beit"),ONt.forEach(t),Npr=r(VOe," \u2014 "),MJ=n(VOe,"A",{href:!0});var VNt=s(MJ);qpr=r(VNt,"BeitForImageClassification"),VNt.forEach(t),jpr=r(VOe," (BEiT model)"),VOe.forEach(t),Dpr=i(Fe),NE=n(Fe,"LI",{});var XOe=s(NE);DMe=n(XOe,"STRONG",{});var XNt=s(DMe);Gpr=r(XNt,"convnext"),XNt.forEach(t),Opr=r(XOe," \u2014 "),EJ=n(XOe,"A",{href:!0});var zNt=s(EJ);Vpr=r(zNt,"ConvNextForImageClassification"),zNt.forEach(t),Xpr=r(XOe," (ConvNeXT model)"),XOe.forEach(t),zpr=i(Fe),qE=n(Fe,"LI",{});var zOe=s(qE);GMe=n(zOe,"STRONG",{});var QNt=s(GMe);Qpr=r(QNt,"cvt"),QNt.forEach(t),Wpr=r(zOe," \u2014 "),CJ=n(zOe,"A",{href:!0});var WNt=s(CJ);Upr=r(WNt,"CvtForImageClassification"),WNt.forEach(t),Hpr=r(zOe," (CvT model)"),zOe.forEach(t),Jpr=i(Fe),jE=n(Fe,"LI",{});var QOe=s(jE);OMe=n(QOe,"STRONG",{});var UNt=s(OMe);Ypr=r(UNt,"data2vec-vision"),UNt.forEach(t),Kpr=r(QOe," \u2014 "),wJ=n(QOe,"A",{href:!0});var HNt=s(wJ);Zpr=r(HNt,"Data2VecVisionForImageClassification"),HNt.forEach(t),e_r=r(QOe," (Data2VecVision model)"),QOe.forEach(t),o_r=i(Fe),ul=n(Fe,"LI",{});var rB=s(ul);VMe=n(rB,"STRONG",{});var JNt=s(VMe);r_r=r(JNt,"deit"),JNt.forEach(t),t_r=r(rB," \u2014 "),AJ=n(rB,"A",{href:!0});var YNt=s(AJ);a_r=r(YNt,"DeiTForImageClassification"),YNt.forEach(t),n_r=r(rB," or "),yJ=n(rB,"A",{href:!0});var KNt=s(yJ);s_r=r(KNt,"DeiTForImageClassificationWithTeacher"),KNt.forEach(t),l_r=r(rB," (DeiT model)"),rB.forEach(t),i_r=i(Fe),DE=n(Fe,"LI",{});var WOe=s(DE);XMe=n(WOe,"STRONG",{});var ZNt=s(XMe);d_r=r(ZNt,"imagegpt"),ZNt.forEach(t),c_r=r(WOe," \u2014 "),LJ=n(WOe,"A",{href:!0});var eqt=s(LJ);m_r=r(eqt,"ImageGPTForImageClassification"),eqt.forEach(t),f_r=r(WOe," (ImageGPT model)"),WOe.forEach(t),g_r=i(Fe),pl=n(Fe,"LI",{});var tB=s(pl);zMe=n(tB,"STRONG",{});var oqt=s(zMe);h_r=r(oqt,"levit"),oqt.forEach(t),u_r=r(tB," \u2014 "),xJ=n(tB,"A",{href:!0});var rqt=s(xJ);p_r=r(rqt,"LevitForImageClassification"),rqt.forEach(t),__r=r(tB," or "),$J=n(tB,"A",{href:!0});var tqt=s($J);b_r=r(tqt,"LevitForImageClassificationWithTeacher"),tqt.forEach(t),v_r=r(tB," (LeViT model)"),tB.forEach(t),F_r=i(Fe),GE=n(Fe,"LI",{});var UOe=s(GE);QMe=n(UOe,"STRONG",{});var aqt=s(QMe);T_r=r(aqt,"mobilevit"),aqt.forEach(t),M_r=r(UOe," \u2014 "),kJ=n(UOe,"A",{href:!0});var nqt=s(kJ);E_r=r(nqt,"MobileViTForImageClassification"),nqt.forEach(t),C_r=r(UOe," (MobileViT model)"),UOe.forEach(t),w_r=i(Fe),xt=n(Fe,"LI",{});var vf=s(xt);WMe=n(vf,"STRONG",{});var sqt=s(WMe);A_r=r(sqt,"perceiver"),sqt.forEach(t),y_r=r(vf," \u2014 "),SJ=n(vf,"A",{href:!0});var lqt=s(SJ);L_r=r(lqt,"PerceiverForImageClassificationLearned"),lqt.forEach(t),x_r=r(vf," or "),RJ=n(vf,"A",{href:!0});var iqt=s(RJ);$_r=r(iqt,"PerceiverForImageClassificationFourier"),iqt.forEach(t),k_r=r(vf," or "),PJ=n(vf,"A",{href:!0});var dqt=s(PJ);S_r=r(dqt,"PerceiverForImageClassificationConvProcessing"),dqt.forEach(t),R_r=r(vf," (Perceiver model)"),vf.forEach(t),P_r=i(Fe),OE=n(Fe,"LI",{});var HOe=s(OE);UMe=n(HOe,"STRONG",{});var cqt=s(UMe);B_r=r(cqt,"poolformer"),cqt.forEach(t),I_r=r(HOe," \u2014 "),BJ=n(HOe,"A",{href:!0});var mqt=s(BJ);N_r=r(mqt,"PoolFormerForImageClassification"),mqt.forEach(t),q_r=r(HOe," (PoolFormer model)"),HOe.forEach(t),j_r=i(Fe),VE=n(Fe,"LI",{});var JOe=s(VE);HMe=n(JOe,"STRONG",{});var fqt=s(HMe);D_r=r(fqt,"regnet"),fqt.forEach(t),G_r=r(JOe," \u2014 "),IJ=n(JOe,"A",{href:!0});var gqt=s(IJ);O_r=r(gqt,"RegNetForImageClassification"),gqt.forEach(t),V_r=r(JOe," (RegNet model)"),JOe.forEach(t),X_r=i(Fe),XE=n(Fe,"LI",{});var YOe=s(XE);JMe=n(YOe,"STRONG",{});var hqt=s(JMe);z_r=r(hqt,"resnet"),hqt.forEach(t),Q_r=r(YOe," \u2014 "),NJ=n(YOe,"A",{href:!0});var uqt=s(NJ);W_r=r(uqt,"ResNetForImageClassification"),uqt.forEach(t),U_r=r(YOe," (ResNet model)"),YOe.forEach(t),H_r=i(Fe),zE=n(Fe,"LI",{});var KOe=s(zE);YMe=n(KOe,"STRONG",{});var pqt=s(YMe);J_r=r(pqt,"segformer"),pqt.forEach(t),Y_r=r(KOe," \u2014 "),qJ=n(KOe,"A",{href:!0});var _qt=s(qJ);K_r=r(_qt,"SegformerForImageClassification"),_qt.forEach(t),Z_r=r(KOe," (SegFormer model)"),KOe.forEach(t),ebr=i(Fe),QE=n(Fe,"LI",{});var ZOe=s(QE);KMe=n(ZOe,"STRONG",{});var bqt=s(KMe);obr=r(bqt,"swin"),bqt.forEach(t),rbr=r(ZOe," \u2014 "),jJ=n(ZOe,"A",{href:!0});var vqt=s(jJ);tbr=r(vqt,"SwinForImageClassification"),vqt.forEach(t),abr=r(ZOe," (Swin Transformer model)"),ZOe.forEach(t),nbr=i(Fe),WE=n(Fe,"LI",{});var eVe=s(WE);ZMe=n(eVe,"STRONG",{});var Fqt=s(ZMe);sbr=r(Fqt,"swinv2"),Fqt.forEach(t),lbr=r(eVe," \u2014 "),DJ=n(eVe,"A",{href:!0});var Tqt=s(DJ);ibr=r(Tqt,"Swinv2ForImageClassification"),Tqt.forEach(t),dbr=r(eVe," (Swin Transformer V2 model)"),eVe.forEach(t),cbr=i(Fe),UE=n(Fe,"LI",{});var oVe=s(UE);eEe=n(oVe,"STRONG",{});var Mqt=s(eEe);mbr=r(Mqt,"van"),Mqt.forEach(t),fbr=r(oVe," \u2014 "),GJ=n(oVe,"A",{href:!0});var Eqt=s(GJ);gbr=r(Eqt,"VanForImageClassification"),Eqt.forEach(t),hbr=r(oVe," (VAN model)"),oVe.forEach(t),ubr=i(Fe),HE=n(Fe,"LI",{});var rVe=s(HE);oEe=n(rVe,"STRONG",{});var Cqt=s(oEe);pbr=r(Cqt,"vit"),Cqt.forEach(t),_br=r(rVe," \u2014 "),OJ=n(rVe,"A",{href:!0});var wqt=s(OJ);bbr=r(wqt,"ViTForImageClassification"),wqt.forEach(t),vbr=r(rVe," (ViT model)"),rVe.forEach(t),Fe.forEach(t),Fbr=i(Sa),JE=n(Sa,"P",{});var tVe=s(JE);Tbr=r(tVe,"The model is set in evaluation mode by default using "),rEe=n(tVe,"CODE",{});var Aqt=s(rEe);Mbr=r(Aqt,"model.eval()"),Aqt.forEach(t),Ebr=r(tVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tEe=n(tVe,"CODE",{});var yqt=s(tEe);Cbr=r(yqt,"model.train()"),yqt.forEach(t),tVe.forEach(t),wbr=i(Sa),T(YE.$$.fragment,Sa),Sa.forEach(t),Bl.forEach(t),aYe=i(m),ec=n(m,"H2",{class:!0});var bZe=s(ec);KE=n(bZe,"A",{id:!0,class:!0,href:!0});var Lqt=s(KE);aEe=n(Lqt,"SPAN",{});var xqt=s(aEe);T(Xx.$$.fragment,xqt),xqt.forEach(t),Lqt.forEach(t),Abr=i(bZe),nEe=n(bZe,"SPAN",{});var $qt=s(nEe);ybr=r($qt,"AutoModelForVideoClassification"),$qt.forEach(t),bZe.forEach(t),nYe=i(m),Wo=n(m,"DIV",{class:!0});var Il=s(Wo);T(zx.$$.fragment,Il),Lbr=i(Il),oc=n(Il,"P",{});var qse=s(oc);xbr=r(qse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),VJ=n(qse,"A",{href:!0});var kqt=s(VJ);$br=r(kqt,"from_pretrained()"),kqt.forEach(t),kbr=r(qse," class method or the "),XJ=n(qse,"A",{href:!0});var Sqt=s(XJ);Sbr=r(Sqt,"from_config()"),Sqt.forEach(t),Rbr=r(qse,` class
method.`),qse.forEach(t),Pbr=i(Il),Qx=n(Il,"P",{});var vZe=s(Qx);Bbr=r(vZe,"This class cannot be instantiated directly using "),sEe=n(vZe,"CODE",{});var Rqt=s(sEe);Ibr=r(Rqt,"__init__()"),Rqt.forEach(t),Nbr=r(vZe," (throws an error)."),vZe.forEach(t),qbr=i(Il),$t=n(Il,"DIV",{class:!0});var LL=s($t);T(Wx.$$.fragment,LL),jbr=i(LL),lEe=n(LL,"P",{});var Pqt=s(lEe);Dbr=r(Pqt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),Pqt.forEach(t),Gbr=i(LL),rc=n(LL,"P",{});var jse=s(rc);Obr=r(jse,`Note:
Loading a model from its configuration file does `),iEe=n(jse,"STRONG",{});var Bqt=s(iEe);Vbr=r(Bqt,"not"),Bqt.forEach(t),Xbr=r(jse,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(jse,"A",{href:!0});var Iqt=s(zJ);zbr=r(Iqt,"from_pretrained()"),Iqt.forEach(t),Qbr=r(jse," to load the model weights."),jse.forEach(t),Wbr=i(LL),T(ZE.$$.fragment,LL),LL.forEach(t),Ubr=i(Il),fo=n(Il,"DIV",{class:!0});var Ra=s(fo);T(Ux.$$.fragment,Ra),Hbr=i(Ra),dEe=n(Ra,"P",{});var Nqt=s(dEe);Jbr=r(Nqt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Nqt.forEach(t),Ybr=i(Ra),cn=n(Ra,"P",{});var xL=s(cn);Kbr=r(xL,"The model class to instantiate is selected based on the "),cEe=n(xL,"CODE",{});var qqt=s(cEe);Zbr=r(qqt,"model_type"),qqt.forEach(t),e2r=r(xL,` property of the config object (either
passed as an argument or loaded from `),mEe=n(xL,"CODE",{});var jqt=s(mEe);o2r=r(jqt,"pretrained_model_name_or_path"),jqt.forEach(t),r2r=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fEe=n(xL,"CODE",{});var Dqt=s(fEe);t2r=r(Dqt,"pretrained_model_name_or_path"),Dqt.forEach(t),a2r=r(xL,":"),xL.forEach(t),n2r=i(Ra),gEe=n(Ra,"UL",{});var Gqt=s(gEe);e4=n(Gqt,"LI",{});var aVe=s(e4);hEe=n(aVe,"STRONG",{});var Oqt=s(hEe);s2r=r(Oqt,"videomae"),Oqt.forEach(t),l2r=r(aVe," \u2014 "),QJ=n(aVe,"A",{href:!0});var Vqt=s(QJ);i2r=r(Vqt,"VideoMAEForVideoClassification"),Vqt.forEach(t),d2r=r(aVe," (VideoMAE model)"),aVe.forEach(t),Gqt.forEach(t),c2r=i(Ra),o4=n(Ra,"P",{});var nVe=s(o4);m2r=r(nVe,"The model is set in evaluation mode by default using "),uEe=n(nVe,"CODE",{});var Xqt=s(uEe);f2r=r(Xqt,"model.eval()"),Xqt.forEach(t),g2r=r(nVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pEe=n(nVe,"CODE",{});var zqt=s(pEe);h2r=r(zqt,"model.train()"),zqt.forEach(t),nVe.forEach(t),u2r=i(Ra),T(r4.$$.fragment,Ra),Ra.forEach(t),Il.forEach(t),sYe=i(m),tc=n(m,"H2",{class:!0});var FZe=s(tc);t4=n(FZe,"A",{id:!0,class:!0,href:!0});var Qqt=s(t4);_Ee=n(Qqt,"SPAN",{});var Wqt=s(_Ee);T(Hx.$$.fragment,Wqt),Wqt.forEach(t),Qqt.forEach(t),p2r=i(FZe),bEe=n(FZe,"SPAN",{});var Uqt=s(bEe);_2r=r(Uqt,"AutoModelForVision2Seq"),Uqt.forEach(t),FZe.forEach(t),lYe=i(m),Uo=n(m,"DIV",{class:!0});var Nl=s(Uo);T(Jx.$$.fragment,Nl),b2r=i(Nl),ac=n(Nl,"P",{});var Dse=s(ac);v2r=r(Dse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WJ=n(Dse,"A",{href:!0});var Hqt=s(WJ);F2r=r(Hqt,"from_pretrained()"),Hqt.forEach(t),T2r=r(Dse," class method or the "),UJ=n(Dse,"A",{href:!0});var Jqt=s(UJ);M2r=r(Jqt,"from_config()"),Jqt.forEach(t),E2r=r(Dse,` class
method.`),Dse.forEach(t),C2r=i(Nl),Yx=n(Nl,"P",{});var TZe=s(Yx);w2r=r(TZe,"This class cannot be instantiated directly using "),vEe=n(TZe,"CODE",{});var Yqt=s(vEe);A2r=r(Yqt,"__init__()"),Yqt.forEach(t),y2r=r(TZe," (throws an error)."),TZe.forEach(t),L2r=i(Nl),kt=n(Nl,"DIV",{class:!0});var $L=s(kt);T(Kx.$$.fragment,$L),x2r=i($L),FEe=n($L,"P",{});var Kqt=s(FEe);$2r=r(Kqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Kqt.forEach(t),k2r=i($L),nc=n($L,"P",{});var Gse=s(nc);S2r=r(Gse,`Note:
Loading a model from its configuration file does `),TEe=n(Gse,"STRONG",{});var Zqt=s(TEe);R2r=r(Zqt,"not"),Zqt.forEach(t),P2r=r(Gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),HJ=n(Gse,"A",{href:!0});var ejt=s(HJ);B2r=r(ejt,"from_pretrained()"),ejt.forEach(t),I2r=r(Gse," to load the model weights."),Gse.forEach(t),N2r=i($L),T(a4.$$.fragment,$L),$L.forEach(t),q2r=i(Nl),go=n(Nl,"DIV",{class:!0});var Pa=s(go);T(Zx.$$.fragment,Pa),j2r=i(Pa),MEe=n(Pa,"P",{});var ojt=s(MEe);D2r=r(ojt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ojt.forEach(t),G2r=i(Pa),mn=n(Pa,"P",{});var kL=s(mn);O2r=r(kL,"The model class to instantiate is selected based on the "),EEe=n(kL,"CODE",{});var rjt=s(EEe);V2r=r(rjt,"model_type"),rjt.forEach(t),X2r=r(kL,` property of the config object (either
passed as an argument or loaded from `),CEe=n(kL,"CODE",{});var tjt=s(CEe);z2r=r(tjt,"pretrained_model_name_or_path"),tjt.forEach(t),Q2r=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=n(kL,"CODE",{});var ajt=s(wEe);W2r=r(ajt,"pretrained_model_name_or_path"),ajt.forEach(t),U2r=r(kL,":"),kL.forEach(t),H2r=i(Pa),AEe=n(Pa,"UL",{});var njt=s(AEe);n4=n(njt,"LI",{});var sVe=s(n4);yEe=n(sVe,"STRONG",{});var sjt=s(yEe);J2r=r(sjt,"vision-encoder-decoder"),sjt.forEach(t),Y2r=r(sVe," \u2014 "),JJ=n(sVe,"A",{href:!0});var ljt=s(JJ);K2r=r(ljt,"VisionEncoderDecoderModel"),ljt.forEach(t),Z2r=r(sVe," (Vision Encoder decoder model)"),sVe.forEach(t),njt.forEach(t),evr=i(Pa),s4=n(Pa,"P",{});var lVe=s(s4);ovr=r(lVe,"The model is set in evaluation mode by default using "),LEe=n(lVe,"CODE",{});var ijt=s(LEe);rvr=r(ijt,"model.eval()"),ijt.forEach(t),tvr=r(lVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xEe=n(lVe,"CODE",{});var djt=s(xEe);avr=r(djt,"model.train()"),djt.forEach(t),lVe.forEach(t),nvr=i(Pa),T(l4.$$.fragment,Pa),Pa.forEach(t),Nl.forEach(t),iYe=i(m),sc=n(m,"H2",{class:!0});var MZe=s(sc);i4=n(MZe,"A",{id:!0,class:!0,href:!0});var cjt=s(i4);$Ee=n(cjt,"SPAN",{});var mjt=s($Ee);T(e$.$$.fragment,mjt),mjt.forEach(t),cjt.forEach(t),svr=i(MZe),kEe=n(MZe,"SPAN",{});var fjt=s(kEe);lvr=r(fjt,"AutoModelForVisualQuestionAnswering"),fjt.forEach(t),MZe.forEach(t),dYe=i(m),Ho=n(m,"DIV",{class:!0});var ql=s(Ho);T(o$.$$.fragment,ql),ivr=i(ql),lc=n(ql,"P",{});var Ose=s(lc);dvr=r(Ose,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),YJ=n(Ose,"A",{href:!0});var gjt=s(YJ);cvr=r(gjt,"from_pretrained()"),gjt.forEach(t),mvr=r(Ose," class method or the "),KJ=n(Ose,"A",{href:!0});var hjt=s(KJ);fvr=r(hjt,"from_config()"),hjt.forEach(t),gvr=r(Ose,` class
method.`),Ose.forEach(t),hvr=i(ql),r$=n(ql,"P",{});var EZe=s(r$);uvr=r(EZe,"This class cannot be instantiated directly using "),SEe=n(EZe,"CODE",{});var ujt=s(SEe);pvr=r(ujt,"__init__()"),ujt.forEach(t),_vr=r(EZe," (throws an error)."),EZe.forEach(t),bvr=i(ql),St=n(ql,"DIV",{class:!0});var SL=s(St);T(t$.$$.fragment,SL),vvr=i(SL),REe=n(SL,"P",{});var pjt=s(REe);Fvr=r(pjt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),pjt.forEach(t),Tvr=i(SL),ic=n(SL,"P",{});var Vse=s(ic);Mvr=r(Vse,`Note:
Loading a model from its configuration file does `),PEe=n(Vse,"STRONG",{});var _jt=s(PEe);Evr=r(_jt,"not"),_jt.forEach(t),Cvr=r(Vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(Vse,"A",{href:!0});var bjt=s(ZJ);wvr=r(bjt,"from_pretrained()"),bjt.forEach(t),Avr=r(Vse," to load the model weights."),Vse.forEach(t),yvr=i(SL),T(d4.$$.fragment,SL),SL.forEach(t),Lvr=i(ql),ho=n(ql,"DIV",{class:!0});var Ba=s(ho);T(a$.$$.fragment,Ba),xvr=i(Ba),BEe=n(Ba,"P",{});var vjt=s(BEe);$vr=r(vjt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),vjt.forEach(t),kvr=i(Ba),fn=n(Ba,"P",{});var RL=s(fn);Svr=r(RL,"The model class to instantiate is selected based on the "),IEe=n(RL,"CODE",{});var Fjt=s(IEe);Rvr=r(Fjt,"model_type"),Fjt.forEach(t),Pvr=r(RL,` property of the config object (either
passed as an argument or loaded from `),NEe=n(RL,"CODE",{});var Tjt=s(NEe);Bvr=r(Tjt,"pretrained_model_name_or_path"),Tjt.forEach(t),Ivr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=n(RL,"CODE",{});var Mjt=s(qEe);Nvr=r(Mjt,"pretrained_model_name_or_path"),Mjt.forEach(t),qvr=r(RL,":"),RL.forEach(t),jvr=i(Ba),jEe=n(Ba,"UL",{});var Ejt=s(jEe);c4=n(Ejt,"LI",{});var iVe=s(c4);DEe=n(iVe,"STRONG",{});var Cjt=s(DEe);Dvr=r(Cjt,"vilt"),Cjt.forEach(t),Gvr=r(iVe," \u2014 "),eY=n(iVe,"A",{href:!0});var wjt=s(eY);Ovr=r(wjt,"ViltForQuestionAnswering"),wjt.forEach(t),Vvr=r(iVe," (ViLT model)"),iVe.forEach(t),Ejt.forEach(t),Xvr=i(Ba),m4=n(Ba,"P",{});var dVe=s(m4);zvr=r(dVe,"The model is set in evaluation mode by default using "),GEe=n(dVe,"CODE",{});var Ajt=s(GEe);Qvr=r(Ajt,"model.eval()"),Ajt.forEach(t),Wvr=r(dVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OEe=n(dVe,"CODE",{});var yjt=s(OEe);Uvr=r(yjt,"model.train()"),yjt.forEach(t),dVe.forEach(t),Hvr=i(Ba),T(f4.$$.fragment,Ba),Ba.forEach(t),ql.forEach(t),cYe=i(m),dc=n(m,"H2",{class:!0});var CZe=s(dc);g4=n(CZe,"A",{id:!0,class:!0,href:!0});var Ljt=s(g4);VEe=n(Ljt,"SPAN",{});var xjt=s(VEe);T(n$.$$.fragment,xjt),xjt.forEach(t),Ljt.forEach(t),Jvr=i(CZe),XEe=n(CZe,"SPAN",{});var $jt=s(XEe);Yvr=r($jt,"AutoModelForAudioClassification"),$jt.forEach(t),CZe.forEach(t),mYe=i(m),Jo=n(m,"DIV",{class:!0});var jl=s(Jo);T(s$.$$.fragment,jl),Kvr=i(jl),cc=n(jl,"P",{});var Xse=s(cc);Zvr=r(Xse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oY=n(Xse,"A",{href:!0});var kjt=s(oY);e1r=r(kjt,"from_pretrained()"),kjt.forEach(t),o1r=r(Xse," class method or the "),rY=n(Xse,"A",{href:!0});var Sjt=s(rY);r1r=r(Sjt,"from_config()"),Sjt.forEach(t),t1r=r(Xse,` class
method.`),Xse.forEach(t),a1r=i(jl),l$=n(jl,"P",{});var wZe=s(l$);n1r=r(wZe,"This class cannot be instantiated directly using "),zEe=n(wZe,"CODE",{});var Rjt=s(zEe);s1r=r(Rjt,"__init__()"),Rjt.forEach(t),l1r=r(wZe," (throws an error)."),wZe.forEach(t),i1r=i(jl),Rt=n(jl,"DIV",{class:!0});var PL=s(Rt);T(i$.$$.fragment,PL),d1r=i(PL),QEe=n(PL,"P",{});var Pjt=s(QEe);c1r=r(Pjt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Pjt.forEach(t),m1r=i(PL),mc=n(PL,"P",{});var zse=s(mc);f1r=r(zse,`Note:
Loading a model from its configuration file does `),WEe=n(zse,"STRONG",{});var Bjt=s(WEe);g1r=r(Bjt,"not"),Bjt.forEach(t),h1r=r(zse,` load the model weights. It only affects the
model\u2019s configuration. Use `),tY=n(zse,"A",{href:!0});var Ijt=s(tY);u1r=r(Ijt,"from_pretrained()"),Ijt.forEach(t),p1r=r(zse," to load the model weights."),zse.forEach(t),_1r=i(PL),T(h4.$$.fragment,PL),PL.forEach(t),b1r=i(jl),uo=n(jl,"DIV",{class:!0});var Ia=s(uo);T(d$.$$.fragment,Ia),v1r=i(Ia),UEe=n(Ia,"P",{});var Njt=s(UEe);F1r=r(Njt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Njt.forEach(t),T1r=i(Ia),gn=n(Ia,"P",{});var BL=s(gn);M1r=r(BL,"The model class to instantiate is selected based on the "),HEe=n(BL,"CODE",{});var qjt=s(HEe);E1r=r(qjt,"model_type"),qjt.forEach(t),C1r=r(BL,` property of the config object (either
passed as an argument or loaded from `),JEe=n(BL,"CODE",{});var jjt=s(JEe);w1r=r(jjt,"pretrained_model_name_or_path"),jjt.forEach(t),A1r=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YEe=n(BL,"CODE",{});var Djt=s(YEe);y1r=r(Djt,"pretrained_model_name_or_path"),Djt.forEach(t),L1r=r(BL,":"),BL.forEach(t),x1r=i(Ia),Pe=n(Ia,"UL",{});var Qe=s(Pe);u4=n(Qe,"LI",{});var cVe=s(u4);KEe=n(cVe,"STRONG",{});var Gjt=s(KEe);$1r=r(Gjt,"data2vec-audio"),Gjt.forEach(t),k1r=r(cVe," \u2014 "),aY=n(cVe,"A",{href:!0});var Ojt=s(aY);S1r=r(Ojt,"Data2VecAudioForSequenceClassification"),Ojt.forEach(t),R1r=r(cVe," (Data2VecAudio model)"),cVe.forEach(t),P1r=i(Qe),p4=n(Qe,"LI",{});var mVe=s(p4);ZEe=n(mVe,"STRONG",{});var Vjt=s(ZEe);B1r=r(Vjt,"hubert"),Vjt.forEach(t),I1r=r(mVe," \u2014 "),nY=n(mVe,"A",{href:!0});var Xjt=s(nY);N1r=r(Xjt,"HubertForSequenceClassification"),Xjt.forEach(t),q1r=r(mVe," (Hubert model)"),mVe.forEach(t),j1r=i(Qe),_4=n(Qe,"LI",{});var fVe=s(_4);e4e=n(fVe,"STRONG",{});var zjt=s(e4e);D1r=r(zjt,"sew"),zjt.forEach(t),G1r=r(fVe," \u2014 "),sY=n(fVe,"A",{href:!0});var Qjt=s(sY);O1r=r(Qjt,"SEWForSequenceClassification"),Qjt.forEach(t),V1r=r(fVe," (SEW model)"),fVe.forEach(t),X1r=i(Qe),b4=n(Qe,"LI",{});var gVe=s(b4);o4e=n(gVe,"STRONG",{});var Wjt=s(o4e);z1r=r(Wjt,"sew-d"),Wjt.forEach(t),Q1r=r(gVe," \u2014 "),lY=n(gVe,"A",{href:!0});var Ujt=s(lY);W1r=r(Ujt,"SEWDForSequenceClassification"),Ujt.forEach(t),U1r=r(gVe," (SEW-D model)"),gVe.forEach(t),H1r=i(Qe),v4=n(Qe,"LI",{});var hVe=s(v4);r4e=n(hVe,"STRONG",{});var Hjt=s(r4e);J1r=r(Hjt,"unispeech"),Hjt.forEach(t),Y1r=r(hVe," \u2014 "),iY=n(hVe,"A",{href:!0});var Jjt=s(iY);K1r=r(Jjt,"UniSpeechForSequenceClassification"),Jjt.forEach(t),Z1r=r(hVe," (UniSpeech model)"),hVe.forEach(t),eFr=i(Qe),F4=n(Qe,"LI",{});var uVe=s(F4);t4e=n(uVe,"STRONG",{});var Yjt=s(t4e);oFr=r(Yjt,"unispeech-sat"),Yjt.forEach(t),rFr=r(uVe," \u2014 "),dY=n(uVe,"A",{href:!0});var Kjt=s(dY);tFr=r(Kjt,"UniSpeechSatForSequenceClassification"),Kjt.forEach(t),aFr=r(uVe," (UniSpeechSat model)"),uVe.forEach(t),nFr=i(Qe),T4=n(Qe,"LI",{});var pVe=s(T4);a4e=n(pVe,"STRONG",{});var Zjt=s(a4e);sFr=r(Zjt,"wav2vec2"),Zjt.forEach(t),lFr=r(pVe," \u2014 "),cY=n(pVe,"A",{href:!0});var eDt=s(cY);iFr=r(eDt,"Wav2Vec2ForSequenceClassification"),eDt.forEach(t),dFr=r(pVe," (Wav2Vec2 model)"),pVe.forEach(t),cFr=i(Qe),M4=n(Qe,"LI",{});var _Ve=s(M4);n4e=n(_Ve,"STRONG",{});var oDt=s(n4e);mFr=r(oDt,"wav2vec2-conformer"),oDt.forEach(t),fFr=r(_Ve," \u2014 "),mY=n(_Ve,"A",{href:!0});var rDt=s(mY);gFr=r(rDt,"Wav2Vec2ConformerForSequenceClassification"),rDt.forEach(t),hFr=r(_Ve," (Wav2Vec2-Conformer model)"),_Ve.forEach(t),uFr=i(Qe),E4=n(Qe,"LI",{});var bVe=s(E4);s4e=n(bVe,"STRONG",{});var tDt=s(s4e);pFr=r(tDt,"wavlm"),tDt.forEach(t),_Fr=r(bVe," \u2014 "),fY=n(bVe,"A",{href:!0});var aDt=s(fY);bFr=r(aDt,"WavLMForSequenceClassification"),aDt.forEach(t),vFr=r(bVe," (WavLM model)"),bVe.forEach(t),Qe.forEach(t),FFr=i(Ia),C4=n(Ia,"P",{});var vVe=s(C4);TFr=r(vVe,"The model is set in evaluation mode by default using "),l4e=n(vVe,"CODE",{});var nDt=s(l4e);MFr=r(nDt,"model.eval()"),nDt.forEach(t),EFr=r(vVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i4e=n(vVe,"CODE",{});var sDt=s(i4e);CFr=r(sDt,"model.train()"),sDt.forEach(t),vVe.forEach(t),wFr=i(Ia),T(w4.$$.fragment,Ia),Ia.forEach(t),jl.forEach(t),fYe=i(m),fc=n(m,"H2",{class:!0});var AZe=s(fc);A4=n(AZe,"A",{id:!0,class:!0,href:!0});var lDt=s(A4);d4e=n(lDt,"SPAN",{});var iDt=s(d4e);T(c$.$$.fragment,iDt),iDt.forEach(t),lDt.forEach(t),AFr=i(AZe),c4e=n(AZe,"SPAN",{});var dDt=s(c4e);yFr=r(dDt,"AutoModelForAudioFrameClassification"),dDt.forEach(t),AZe.forEach(t),gYe=i(m),Yo=n(m,"DIV",{class:!0});var Dl=s(Yo);T(m$.$$.fragment,Dl),LFr=i(Dl),gc=n(Dl,"P",{});var Qse=s(gc);xFr=r(Qse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gY=n(Qse,"A",{href:!0});var cDt=s(gY);$Fr=r(cDt,"from_pretrained()"),cDt.forEach(t),kFr=r(Qse," class method or the "),hY=n(Qse,"A",{href:!0});var mDt=s(hY);SFr=r(mDt,"from_config()"),mDt.forEach(t),RFr=r(Qse,` class
method.`),Qse.forEach(t),PFr=i(Dl),f$=n(Dl,"P",{});var yZe=s(f$);BFr=r(yZe,"This class cannot be instantiated directly using "),m4e=n(yZe,"CODE",{});var fDt=s(m4e);IFr=r(fDt,"__init__()"),fDt.forEach(t),NFr=r(yZe," (throws an error)."),yZe.forEach(t),qFr=i(Dl),Pt=n(Dl,"DIV",{class:!0});var IL=s(Pt);T(g$.$$.fragment,IL),jFr=i(IL),f4e=n(IL,"P",{});var gDt=s(f4e);DFr=r(gDt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),gDt.forEach(t),GFr=i(IL),hc=n(IL,"P",{});var Wse=s(hc);OFr=r(Wse,`Note:
Loading a model from its configuration file does `),g4e=n(Wse,"STRONG",{});var hDt=s(g4e);VFr=r(hDt,"not"),hDt.forEach(t),XFr=r(Wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),uY=n(Wse,"A",{href:!0});var uDt=s(uY);zFr=r(uDt,"from_pretrained()"),uDt.forEach(t),QFr=r(Wse," to load the model weights."),Wse.forEach(t),WFr=i(IL),T(y4.$$.fragment,IL),IL.forEach(t),UFr=i(Dl),po=n(Dl,"DIV",{class:!0});var Na=s(po);T(h$.$$.fragment,Na),HFr=i(Na),h4e=n(Na,"P",{});var pDt=s(h4e);JFr=r(pDt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pDt.forEach(t),YFr=i(Na),hn=n(Na,"P",{});var NL=s(hn);KFr=r(NL,"The model class to instantiate is selected based on the "),u4e=n(NL,"CODE",{});var _Dt=s(u4e);ZFr=r(_Dt,"model_type"),_Dt.forEach(t),eTr=r(NL,` property of the config object (either
passed as an argument or loaded from `),p4e=n(NL,"CODE",{});var bDt=s(p4e);oTr=r(bDt,"pretrained_model_name_or_path"),bDt.forEach(t),rTr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=n(NL,"CODE",{});var vDt=s(_4e);tTr=r(vDt,"pretrained_model_name_or_path"),vDt.forEach(t),aTr=r(NL,":"),NL.forEach(t),nTr=i(Na),ct=n(Na,"UL",{});var Gl=s(ct);L4=n(Gl,"LI",{});var FVe=s(L4);b4e=n(FVe,"STRONG",{});var FDt=s(b4e);sTr=r(FDt,"data2vec-audio"),FDt.forEach(t),lTr=r(FVe," \u2014 "),pY=n(FVe,"A",{href:!0});var TDt=s(pY);iTr=r(TDt,"Data2VecAudioForAudioFrameClassification"),TDt.forEach(t),dTr=r(FVe," (Data2VecAudio model)"),FVe.forEach(t),cTr=i(Gl),x4=n(Gl,"LI",{});var TVe=s(x4);v4e=n(TVe,"STRONG",{});var MDt=s(v4e);mTr=r(MDt,"unispeech-sat"),MDt.forEach(t),fTr=r(TVe," \u2014 "),_Y=n(TVe,"A",{href:!0});var EDt=s(_Y);gTr=r(EDt,"UniSpeechSatForAudioFrameClassification"),EDt.forEach(t),hTr=r(TVe," (UniSpeechSat model)"),TVe.forEach(t),uTr=i(Gl),$4=n(Gl,"LI",{});var MVe=s($4);F4e=n(MVe,"STRONG",{});var CDt=s(F4e);pTr=r(CDt,"wav2vec2"),CDt.forEach(t),_Tr=r(MVe," \u2014 "),bY=n(MVe,"A",{href:!0});var wDt=s(bY);bTr=r(wDt,"Wav2Vec2ForAudioFrameClassification"),wDt.forEach(t),vTr=r(MVe," (Wav2Vec2 model)"),MVe.forEach(t),FTr=i(Gl),k4=n(Gl,"LI",{});var EVe=s(k4);T4e=n(EVe,"STRONG",{});var ADt=s(T4e);TTr=r(ADt,"wav2vec2-conformer"),ADt.forEach(t),MTr=r(EVe," \u2014 "),vY=n(EVe,"A",{href:!0});var yDt=s(vY);ETr=r(yDt,"Wav2Vec2ConformerForAudioFrameClassification"),yDt.forEach(t),CTr=r(EVe," (Wav2Vec2-Conformer model)"),EVe.forEach(t),wTr=i(Gl),S4=n(Gl,"LI",{});var CVe=s(S4);M4e=n(CVe,"STRONG",{});var LDt=s(M4e);ATr=r(LDt,"wavlm"),LDt.forEach(t),yTr=r(CVe," \u2014 "),FY=n(CVe,"A",{href:!0});var xDt=s(FY);LTr=r(xDt,"WavLMForAudioFrameClassification"),xDt.forEach(t),xTr=r(CVe," (WavLM model)"),CVe.forEach(t),Gl.forEach(t),$Tr=i(Na),R4=n(Na,"P",{});var wVe=s(R4);kTr=r(wVe,"The model is set in evaluation mode by default using "),E4e=n(wVe,"CODE",{});var $Dt=s(E4e);STr=r($Dt,"model.eval()"),$Dt.forEach(t),RTr=r(wVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C4e=n(wVe,"CODE",{});var kDt=s(C4e);PTr=r(kDt,"model.train()"),kDt.forEach(t),wVe.forEach(t),BTr=i(Na),T(P4.$$.fragment,Na),Na.forEach(t),Dl.forEach(t),hYe=i(m),uc=n(m,"H2",{class:!0});var LZe=s(uc);B4=n(LZe,"A",{id:!0,class:!0,href:!0});var SDt=s(B4);w4e=n(SDt,"SPAN",{});var RDt=s(w4e);T(u$.$$.fragment,RDt),RDt.forEach(t),SDt.forEach(t),ITr=i(LZe),A4e=n(LZe,"SPAN",{});var PDt=s(A4e);NTr=r(PDt,"AutoModelForCTC"),PDt.forEach(t),LZe.forEach(t),uYe=i(m),Ko=n(m,"DIV",{class:!0});var Ol=s(Ko);T(p$.$$.fragment,Ol),qTr=i(Ol),pc=n(Ol,"P",{});var Use=s(pc);jTr=r(Use,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),TY=n(Use,"A",{href:!0});var BDt=s(TY);DTr=r(BDt,"from_pretrained()"),BDt.forEach(t),GTr=r(Use," class method or the "),MY=n(Use,"A",{href:!0});var IDt=s(MY);OTr=r(IDt,"from_config()"),IDt.forEach(t),VTr=r(Use,` class
method.`),Use.forEach(t),XTr=i(Ol),_$=n(Ol,"P",{});var xZe=s(_$);zTr=r(xZe,"This class cannot be instantiated directly using "),y4e=n(xZe,"CODE",{});var NDt=s(y4e);QTr=r(NDt,"__init__()"),NDt.forEach(t),WTr=r(xZe," (throws an error)."),xZe.forEach(t),UTr=i(Ol),Bt=n(Ol,"DIV",{class:!0});var qL=s(Bt);T(b$.$$.fragment,qL),HTr=i(qL),L4e=n(qL,"P",{});var qDt=s(L4e);JTr=r(qDt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),qDt.forEach(t),YTr=i(qL),_c=n(qL,"P",{});var Hse=s(_c);KTr=r(Hse,`Note:
Loading a model from its configuration file does `),x4e=n(Hse,"STRONG",{});var jDt=s(x4e);ZTr=r(jDt,"not"),jDt.forEach(t),eMr=r(Hse,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(Hse,"A",{href:!0});var DDt=s(EY);oMr=r(DDt,"from_pretrained()"),DDt.forEach(t),rMr=r(Hse," to load the model weights."),Hse.forEach(t),tMr=i(qL),T(I4.$$.fragment,qL),qL.forEach(t),aMr=i(Ol),_o=n(Ol,"DIV",{class:!0});var qa=s(_o);T(v$.$$.fragment,qa),nMr=i(qa),$4e=n(qa,"P",{});var GDt=s($4e);sMr=r(GDt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),GDt.forEach(t),lMr=i(qa),un=n(qa,"P",{});var jL=s(un);iMr=r(jL,"The model class to instantiate is selected based on the "),k4e=n(jL,"CODE",{});var ODt=s(k4e);dMr=r(ODt,"model_type"),ODt.forEach(t),cMr=r(jL,` property of the config object (either
passed as an argument or loaded from `),S4e=n(jL,"CODE",{});var VDt=s(S4e);mMr=r(VDt,"pretrained_model_name_or_path"),VDt.forEach(t),fMr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=n(jL,"CODE",{});var XDt=s(R4e);gMr=r(XDt,"pretrained_model_name_or_path"),XDt.forEach(t),hMr=r(jL,":"),jL.forEach(t),uMr=i(qa),ye=n(qa,"UL",{});var Ie=s(ye);N4=n(Ie,"LI",{});var AVe=s(N4);P4e=n(AVe,"STRONG",{});var zDt=s(P4e);pMr=r(zDt,"data2vec-audio"),zDt.forEach(t),_Mr=r(AVe," \u2014 "),CY=n(AVe,"A",{href:!0});var QDt=s(CY);bMr=r(QDt,"Data2VecAudioForCTC"),QDt.forEach(t),vMr=r(AVe," (Data2VecAudio model)"),AVe.forEach(t),FMr=i(Ie),q4=n(Ie,"LI",{});var yVe=s(q4);B4e=n(yVe,"STRONG",{});var WDt=s(B4e);TMr=r(WDt,"hubert"),WDt.forEach(t),MMr=r(yVe," \u2014 "),wY=n(yVe,"A",{href:!0});var UDt=s(wY);EMr=r(UDt,"HubertForCTC"),UDt.forEach(t),CMr=r(yVe," (Hubert model)"),yVe.forEach(t),wMr=i(Ie),j4=n(Ie,"LI",{});var LVe=s(j4);I4e=n(LVe,"STRONG",{});var HDt=s(I4e);AMr=r(HDt,"mctct"),HDt.forEach(t),yMr=r(LVe," \u2014 "),AY=n(LVe,"A",{href:!0});var JDt=s(AY);LMr=r(JDt,"MCTCTForCTC"),JDt.forEach(t),xMr=r(LVe," (M-CTC-T model)"),LVe.forEach(t),$Mr=i(Ie),D4=n(Ie,"LI",{});var xVe=s(D4);N4e=n(xVe,"STRONG",{});var YDt=s(N4e);kMr=r(YDt,"sew"),YDt.forEach(t),SMr=r(xVe," \u2014 "),yY=n(xVe,"A",{href:!0});var KDt=s(yY);RMr=r(KDt,"SEWForCTC"),KDt.forEach(t),PMr=r(xVe," (SEW model)"),xVe.forEach(t),BMr=i(Ie),G4=n(Ie,"LI",{});var $Ve=s(G4);q4e=n($Ve,"STRONG",{});var ZDt=s(q4e);IMr=r(ZDt,"sew-d"),ZDt.forEach(t),NMr=r($Ve," \u2014 "),LY=n($Ve,"A",{href:!0});var eGt=s(LY);qMr=r(eGt,"SEWDForCTC"),eGt.forEach(t),jMr=r($Ve," (SEW-D model)"),$Ve.forEach(t),DMr=i(Ie),O4=n(Ie,"LI",{});var kVe=s(O4);j4e=n(kVe,"STRONG",{});var oGt=s(j4e);GMr=r(oGt,"unispeech"),oGt.forEach(t),OMr=r(kVe," \u2014 "),xY=n(kVe,"A",{href:!0});var rGt=s(xY);VMr=r(rGt,"UniSpeechForCTC"),rGt.forEach(t),XMr=r(kVe," (UniSpeech model)"),kVe.forEach(t),zMr=i(Ie),V4=n(Ie,"LI",{});var SVe=s(V4);D4e=n(SVe,"STRONG",{});var tGt=s(D4e);QMr=r(tGt,"unispeech-sat"),tGt.forEach(t),WMr=r(SVe," \u2014 "),$Y=n(SVe,"A",{href:!0});var aGt=s($Y);UMr=r(aGt,"UniSpeechSatForCTC"),aGt.forEach(t),HMr=r(SVe," (UniSpeechSat model)"),SVe.forEach(t),JMr=i(Ie),X4=n(Ie,"LI",{});var RVe=s(X4);G4e=n(RVe,"STRONG",{});var nGt=s(G4e);YMr=r(nGt,"wav2vec2"),nGt.forEach(t),KMr=r(RVe," \u2014 "),kY=n(RVe,"A",{href:!0});var sGt=s(kY);ZMr=r(sGt,"Wav2Vec2ForCTC"),sGt.forEach(t),eEr=r(RVe," (Wav2Vec2 model)"),RVe.forEach(t),oEr=i(Ie),z4=n(Ie,"LI",{});var PVe=s(z4);O4e=n(PVe,"STRONG",{});var lGt=s(O4e);rEr=r(lGt,"wav2vec2-conformer"),lGt.forEach(t),tEr=r(PVe," \u2014 "),SY=n(PVe,"A",{href:!0});var iGt=s(SY);aEr=r(iGt,"Wav2Vec2ConformerForCTC"),iGt.forEach(t),nEr=r(PVe," (Wav2Vec2-Conformer model)"),PVe.forEach(t),sEr=i(Ie),Q4=n(Ie,"LI",{});var BVe=s(Q4);V4e=n(BVe,"STRONG",{});var dGt=s(V4e);lEr=r(dGt,"wavlm"),dGt.forEach(t),iEr=r(BVe," \u2014 "),RY=n(BVe,"A",{href:!0});var cGt=s(RY);dEr=r(cGt,"WavLMForCTC"),cGt.forEach(t),cEr=r(BVe," (WavLM model)"),BVe.forEach(t),Ie.forEach(t),mEr=i(qa),W4=n(qa,"P",{});var IVe=s(W4);fEr=r(IVe,"The model is set in evaluation mode by default using "),X4e=n(IVe,"CODE",{});var mGt=s(X4e);gEr=r(mGt,"model.eval()"),mGt.forEach(t),hEr=r(IVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),z4e=n(IVe,"CODE",{});var fGt=s(z4e);uEr=r(fGt,"model.train()"),fGt.forEach(t),IVe.forEach(t),pEr=i(qa),T(U4.$$.fragment,qa),qa.forEach(t),Ol.forEach(t),pYe=i(m),bc=n(m,"H2",{class:!0});var $Ze=s(bc);H4=n($Ze,"A",{id:!0,class:!0,href:!0});var gGt=s(H4);Q4e=n(gGt,"SPAN",{});var hGt=s(Q4e);T(F$.$$.fragment,hGt),hGt.forEach(t),gGt.forEach(t),_Er=i($Ze),W4e=n($Ze,"SPAN",{});var uGt=s(W4e);bEr=r(uGt,"AutoModelForSpeechSeq2Seq"),uGt.forEach(t),$Ze.forEach(t),_Ye=i(m),Zo=n(m,"DIV",{class:!0});var Vl=s(Zo);T(T$.$$.fragment,Vl),vEr=i(Vl),vc=n(Vl,"P",{});var Jse=s(vc);FEr=r(Jse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PY=n(Jse,"A",{href:!0});var pGt=s(PY);TEr=r(pGt,"from_pretrained()"),pGt.forEach(t),MEr=r(Jse," class method or the "),BY=n(Jse,"A",{href:!0});var _Gt=s(BY);EEr=r(_Gt,"from_config()"),_Gt.forEach(t),CEr=r(Jse,` class
method.`),Jse.forEach(t),wEr=i(Vl),M$=n(Vl,"P",{});var kZe=s(M$);AEr=r(kZe,"This class cannot be instantiated directly using "),U4e=n(kZe,"CODE",{});var bGt=s(U4e);yEr=r(bGt,"__init__()"),bGt.forEach(t),LEr=r(kZe," (throws an error)."),kZe.forEach(t),xEr=i(Vl),It=n(Vl,"DIV",{class:!0});var DL=s(It);T(E$.$$.fragment,DL),$Er=i(DL),H4e=n(DL,"P",{});var vGt=s(H4e);kEr=r(vGt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vGt.forEach(t),SEr=i(DL),Fc=n(DL,"P",{});var Yse=s(Fc);REr=r(Yse,`Note:
Loading a model from its configuration file does `),J4e=n(Yse,"STRONG",{});var FGt=s(J4e);PEr=r(FGt,"not"),FGt.forEach(t),BEr=r(Yse,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(Yse,"A",{href:!0});var TGt=s(IY);IEr=r(TGt,"from_pretrained()"),TGt.forEach(t),NEr=r(Yse," to load the model weights."),Yse.forEach(t),qEr=i(DL),T(J4.$$.fragment,DL),DL.forEach(t),jEr=i(Vl),bo=n(Vl,"DIV",{class:!0});var ja=s(bo);T(C$.$$.fragment,ja),DEr=i(ja),Y4e=n(ja,"P",{});var MGt=s(Y4e);GEr=r(MGt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),MGt.forEach(t),OEr=i(ja),pn=n(ja,"P",{});var GL=s(pn);VEr=r(GL,"The model class to instantiate is selected based on the "),K4e=n(GL,"CODE",{});var EGt=s(K4e);XEr=r(EGt,"model_type"),EGt.forEach(t),zEr=r(GL,` property of the config object (either
passed as an argument or loaded from `),Z4e=n(GL,"CODE",{});var CGt=s(Z4e);QEr=r(CGt,"pretrained_model_name_or_path"),CGt.forEach(t),WEr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eCe=n(GL,"CODE",{});var wGt=s(eCe);UEr=r(wGt,"pretrained_model_name_or_path"),wGt.forEach(t),HEr=r(GL,":"),GL.forEach(t),JEr=i(ja),w$=n(ja,"UL",{});var SZe=s(w$);Y4=n(SZe,"LI",{});var NVe=s(Y4);oCe=n(NVe,"STRONG",{});var AGt=s(oCe);YEr=r(AGt,"speech-encoder-decoder"),AGt.forEach(t),KEr=r(NVe," \u2014 "),NY=n(NVe,"A",{href:!0});var yGt=s(NY);ZEr=r(yGt,"SpeechEncoderDecoderModel"),yGt.forEach(t),e4r=r(NVe," (Speech Encoder decoder model)"),NVe.forEach(t),o4r=i(SZe),K4=n(SZe,"LI",{});var qVe=s(K4);rCe=n(qVe,"STRONG",{});var LGt=s(rCe);r4r=r(LGt,"speech_to_text"),LGt.forEach(t),t4r=r(qVe," \u2014 "),qY=n(qVe,"A",{href:!0});var xGt=s(qY);a4r=r(xGt,"Speech2TextForConditionalGeneration"),xGt.forEach(t),n4r=r(qVe," (Speech2Text model)"),qVe.forEach(t),SZe.forEach(t),s4r=i(ja),Z4=n(ja,"P",{});var jVe=s(Z4);l4r=r(jVe,"The model is set in evaluation mode by default using "),tCe=n(jVe,"CODE",{});var $Gt=s(tCe);i4r=r($Gt,"model.eval()"),$Gt.forEach(t),d4r=r(jVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aCe=n(jVe,"CODE",{});var kGt=s(aCe);c4r=r(kGt,"model.train()"),kGt.forEach(t),jVe.forEach(t),m4r=i(ja),T(eC.$$.fragment,ja),ja.forEach(t),Vl.forEach(t),bYe=i(m),Tc=n(m,"H2",{class:!0});var RZe=s(Tc);oC=n(RZe,"A",{id:!0,class:!0,href:!0});var SGt=s(oC);nCe=n(SGt,"SPAN",{});var RGt=s(nCe);T(A$.$$.fragment,RGt),RGt.forEach(t),SGt.forEach(t),f4r=i(RZe),sCe=n(RZe,"SPAN",{});var PGt=s(sCe);g4r=r(PGt,"AutoModelForAudioXVector"),PGt.forEach(t),RZe.forEach(t),vYe=i(m),er=n(m,"DIV",{class:!0});var Xl=s(er);T(y$.$$.fragment,Xl),h4r=i(Xl),Mc=n(Xl,"P",{});var Kse=s(Mc);u4r=r(Kse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jY=n(Kse,"A",{href:!0});var BGt=s(jY);p4r=r(BGt,"from_pretrained()"),BGt.forEach(t),_4r=r(Kse," class method or the "),DY=n(Kse,"A",{href:!0});var IGt=s(DY);b4r=r(IGt,"from_config()"),IGt.forEach(t),v4r=r(Kse,` class
method.`),Kse.forEach(t),F4r=i(Xl),L$=n(Xl,"P",{});var PZe=s(L$);T4r=r(PZe,"This class cannot be instantiated directly using "),lCe=n(PZe,"CODE",{});var NGt=s(lCe);M4r=r(NGt,"__init__()"),NGt.forEach(t),E4r=r(PZe," (throws an error)."),PZe.forEach(t),C4r=i(Xl),Nt=n(Xl,"DIV",{class:!0});var OL=s(Nt);T(x$.$$.fragment,OL),w4r=i(OL),iCe=n(OL,"P",{});var qGt=s(iCe);A4r=r(qGt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qGt.forEach(t),y4r=i(OL),Ec=n(OL,"P",{});var Zse=s(Ec);L4r=r(Zse,`Note:
Loading a model from its configuration file does `),dCe=n(Zse,"STRONG",{});var jGt=s(dCe);x4r=r(jGt,"not"),jGt.forEach(t),$4r=r(Zse,` load the model weights. It only affects the
model\u2019s configuration. Use `),GY=n(Zse,"A",{href:!0});var DGt=s(GY);k4r=r(DGt,"from_pretrained()"),DGt.forEach(t),S4r=r(Zse," to load the model weights."),Zse.forEach(t),R4r=i(OL),T(rC.$$.fragment,OL),OL.forEach(t),P4r=i(Xl),vo=n(Xl,"DIV",{class:!0});var Da=s(vo);T($$.$$.fragment,Da),B4r=i(Da),cCe=n(Da,"P",{});var GGt=s(cCe);I4r=r(GGt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),GGt.forEach(t),N4r=i(Da),_n=n(Da,"P",{});var VL=s(_n);q4r=r(VL,"The model class to instantiate is selected based on the "),mCe=n(VL,"CODE",{});var OGt=s(mCe);j4r=r(OGt,"model_type"),OGt.forEach(t),D4r=r(VL,` property of the config object (either
passed as an argument or loaded from `),fCe=n(VL,"CODE",{});var VGt=s(fCe);G4r=r(VGt,"pretrained_model_name_or_path"),VGt.forEach(t),O4r=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=n(VL,"CODE",{});var XGt=s(gCe);V4r=r(XGt,"pretrained_model_name_or_path"),XGt.forEach(t),X4r=r(VL,":"),VL.forEach(t),z4r=i(Da),mt=n(Da,"UL",{});var zl=s(mt);tC=n(zl,"LI",{});var DVe=s(tC);hCe=n(DVe,"STRONG",{});var zGt=s(hCe);Q4r=r(zGt,"data2vec-audio"),zGt.forEach(t),W4r=r(DVe," \u2014 "),OY=n(DVe,"A",{href:!0});var QGt=s(OY);U4r=r(QGt,"Data2VecAudioForXVector"),QGt.forEach(t),H4r=r(DVe," (Data2VecAudio model)"),DVe.forEach(t),J4r=i(zl),aC=n(zl,"LI",{});var GVe=s(aC);uCe=n(GVe,"STRONG",{});var WGt=s(uCe);Y4r=r(WGt,"unispeech-sat"),WGt.forEach(t),K4r=r(GVe," \u2014 "),VY=n(GVe,"A",{href:!0});var UGt=s(VY);Z4r=r(UGt,"UniSpeechSatForXVector"),UGt.forEach(t),eCr=r(GVe," (UniSpeechSat model)"),GVe.forEach(t),oCr=i(zl),nC=n(zl,"LI",{});var OVe=s(nC);pCe=n(OVe,"STRONG",{});var HGt=s(pCe);rCr=r(HGt,"wav2vec2"),HGt.forEach(t),tCr=r(OVe," \u2014 "),XY=n(OVe,"A",{href:!0});var JGt=s(XY);aCr=r(JGt,"Wav2Vec2ForXVector"),JGt.forEach(t),nCr=r(OVe," (Wav2Vec2 model)"),OVe.forEach(t),sCr=i(zl),sC=n(zl,"LI",{});var VVe=s(sC);_Ce=n(VVe,"STRONG",{});var YGt=s(_Ce);lCr=r(YGt,"wav2vec2-conformer"),YGt.forEach(t),iCr=r(VVe," \u2014 "),zY=n(VVe,"A",{href:!0});var KGt=s(zY);dCr=r(KGt,"Wav2Vec2ConformerForXVector"),KGt.forEach(t),cCr=r(VVe," (Wav2Vec2-Conformer model)"),VVe.forEach(t),mCr=i(zl),lC=n(zl,"LI",{});var XVe=s(lC);bCe=n(XVe,"STRONG",{});var ZGt=s(bCe);fCr=r(ZGt,"wavlm"),ZGt.forEach(t),gCr=r(XVe," \u2014 "),QY=n(XVe,"A",{href:!0});var eOt=s(QY);hCr=r(eOt,"WavLMForXVector"),eOt.forEach(t),uCr=r(XVe," (WavLM model)"),XVe.forEach(t),zl.forEach(t),pCr=i(Da),iC=n(Da,"P",{});var zVe=s(iC);_Cr=r(zVe,"The model is set in evaluation mode by default using "),vCe=n(zVe,"CODE",{});var oOt=s(vCe);bCr=r(oOt,"model.eval()"),oOt.forEach(t),vCr=r(zVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),FCe=n(zVe,"CODE",{});var rOt=s(FCe);FCr=r(rOt,"model.train()"),rOt.forEach(t),zVe.forEach(t),TCr=i(Da),T(dC.$$.fragment,Da),Da.forEach(t),Xl.forEach(t),FYe=i(m),Cc=n(m,"H2",{class:!0});var BZe=s(Cc);cC=n(BZe,"A",{id:!0,class:!0,href:!0});var tOt=s(cC);TCe=n(tOt,"SPAN",{});var aOt=s(TCe);T(k$.$$.fragment,aOt),aOt.forEach(t),tOt.forEach(t),MCr=i(BZe),MCe=n(BZe,"SPAN",{});var nOt=s(MCe);ECr=r(nOt,"AutoModelForMaskedImageModeling"),nOt.forEach(t),BZe.forEach(t),TYe=i(m),or=n(m,"DIV",{class:!0});var Ql=s(or);T(S$.$$.fragment,Ql),CCr=i(Ql),wc=n(Ql,"P",{});var ele=s(wc);wCr=r(ele,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),WY=n(ele,"A",{href:!0});var sOt=s(WY);ACr=r(sOt,"from_pretrained()"),sOt.forEach(t),yCr=r(ele," class method or the "),UY=n(ele,"A",{href:!0});var lOt=s(UY);LCr=r(lOt,"from_config()"),lOt.forEach(t),xCr=r(ele,` class
method.`),ele.forEach(t),$Cr=i(Ql),R$=n(Ql,"P",{});var IZe=s(R$);kCr=r(IZe,"This class cannot be instantiated directly using "),ECe=n(IZe,"CODE",{});var iOt=s(ECe);SCr=r(iOt,"__init__()"),iOt.forEach(t),RCr=r(IZe," (throws an error)."),IZe.forEach(t),PCr=i(Ql),qt=n(Ql,"DIV",{class:!0});var XL=s(qt);T(P$.$$.fragment,XL),BCr=i(XL),CCe=n(XL,"P",{});var dOt=s(CCe);ICr=r(dOt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),dOt.forEach(t),NCr=i(XL),Ac=n(XL,"P",{});var ole=s(Ac);qCr=r(ole,`Note:
Loading a model from its configuration file does `),wCe=n(ole,"STRONG",{});var cOt=s(wCe);jCr=r(cOt,"not"),cOt.forEach(t),DCr=r(ole,` load the model weights. It only affects the
model\u2019s configuration. Use `),HY=n(ole,"A",{href:!0});var mOt=s(HY);GCr=r(mOt,"from_pretrained()"),mOt.forEach(t),OCr=r(ole," to load the model weights."),ole.forEach(t),VCr=i(XL),T(mC.$$.fragment,XL),XL.forEach(t),XCr=i(Ql),Fo=n(Ql,"DIV",{class:!0});var Ga=s(Fo);T(B$.$$.fragment,Ga),zCr=i(Ga),ACe=n(Ga,"P",{});var fOt=s(ACe);QCr=r(fOt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fOt.forEach(t),WCr=i(Ga),bn=n(Ga,"P",{});var zL=s(bn);UCr=r(zL,"The model class to instantiate is selected based on the "),yCe=n(zL,"CODE",{});var gOt=s(yCe);HCr=r(gOt,"model_type"),gOt.forEach(t),JCr=r(zL,` property of the config object (either
passed as an argument or loaded from `),LCe=n(zL,"CODE",{});var hOt=s(LCe);YCr=r(hOt,"pretrained_model_name_or_path"),hOt.forEach(t),KCr=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xCe=n(zL,"CODE",{});var uOt=s(xCe);ZCr=r(uOt,"pretrained_model_name_or_path"),uOt.forEach(t),e3r=r(zL,":"),zL.forEach(t),o3r=i(Ga),vn=n(Ga,"UL",{});var QL=s(vn);fC=n(QL,"LI",{});var QVe=s(fC);$Ce=n(QVe,"STRONG",{});var pOt=s($Ce);r3r=r(pOt,"deit"),pOt.forEach(t),t3r=r(QVe," \u2014 "),JY=n(QVe,"A",{href:!0});var _Ot=s(JY);a3r=r(_Ot,"DeiTForMaskedImageModeling"),_Ot.forEach(t),n3r=r(QVe," (DeiT model)"),QVe.forEach(t),s3r=i(QL),gC=n(QL,"LI",{});var WVe=s(gC);kCe=n(WVe,"STRONG",{});var bOt=s(kCe);l3r=r(bOt,"swin"),bOt.forEach(t),i3r=r(WVe," \u2014 "),YY=n(WVe,"A",{href:!0});var vOt=s(YY);d3r=r(vOt,"SwinForMaskedImageModeling"),vOt.forEach(t),c3r=r(WVe," (Swin Transformer model)"),WVe.forEach(t),m3r=i(QL),hC=n(QL,"LI",{});var UVe=s(hC);SCe=n(UVe,"STRONG",{});var FOt=s(SCe);f3r=r(FOt,"swinv2"),FOt.forEach(t),g3r=r(UVe," \u2014 "),KY=n(UVe,"A",{href:!0});var TOt=s(KY);h3r=r(TOt,"Swinv2ForMaskedImageModeling"),TOt.forEach(t),u3r=r(UVe," (Swin Transformer V2 model)"),UVe.forEach(t),p3r=i(QL),uC=n(QL,"LI",{});var HVe=s(uC);RCe=n(HVe,"STRONG",{});var MOt=s(RCe);_3r=r(MOt,"vit"),MOt.forEach(t),b3r=r(HVe," \u2014 "),ZY=n(HVe,"A",{href:!0});var EOt=s(ZY);v3r=r(EOt,"ViTForMaskedImageModeling"),EOt.forEach(t),F3r=r(HVe," (ViT model)"),HVe.forEach(t),QL.forEach(t),T3r=i(Ga),pC=n(Ga,"P",{});var JVe=s(pC);M3r=r(JVe,"The model is set in evaluation mode by default using "),PCe=n(JVe,"CODE",{});var COt=s(PCe);E3r=r(COt,"model.eval()"),COt.forEach(t),C3r=r(JVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BCe=n(JVe,"CODE",{});var wOt=s(BCe);w3r=r(wOt,"model.train()"),wOt.forEach(t),JVe.forEach(t),A3r=i(Ga),T(_C.$$.fragment,Ga),Ga.forEach(t),Ql.forEach(t),MYe=i(m),yc=n(m,"H2",{class:!0});var NZe=s(yc);bC=n(NZe,"A",{id:!0,class:!0,href:!0});var AOt=s(bC);ICe=n(AOt,"SPAN",{});var yOt=s(ICe);T(I$.$$.fragment,yOt),yOt.forEach(t),AOt.forEach(t),y3r=i(NZe),NCe=n(NZe,"SPAN",{});var LOt=s(NCe);L3r=r(LOt,"AutoModelForObjectDetection"),LOt.forEach(t),NZe.forEach(t),EYe=i(m),rr=n(m,"DIV",{class:!0});var Wl=s(rr);T(N$.$$.fragment,Wl),x3r=i(Wl),Lc=n(Wl,"P",{});var rle=s(Lc);$3r=r(rle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eK=n(rle,"A",{href:!0});var xOt=s(eK);k3r=r(xOt,"from_pretrained()"),xOt.forEach(t),S3r=r(rle," class method or the "),oK=n(rle,"A",{href:!0});var $Ot=s(oK);R3r=r($Ot,"from_config()"),$Ot.forEach(t),P3r=r(rle,` class
method.`),rle.forEach(t),B3r=i(Wl),q$=n(Wl,"P",{});var qZe=s(q$);I3r=r(qZe,"This class cannot be instantiated directly using "),qCe=n(qZe,"CODE",{});var kOt=s(qCe);N3r=r(kOt,"__init__()"),kOt.forEach(t),q3r=r(qZe," (throws an error)."),qZe.forEach(t),j3r=i(Wl),jt=n(Wl,"DIV",{class:!0});var WL=s(jt);T(j$.$$.fragment,WL),D3r=i(WL),jCe=n(WL,"P",{});var SOt=s(jCe);G3r=r(SOt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),SOt.forEach(t),O3r=i(WL),xc=n(WL,"P",{});var tle=s(xc);V3r=r(tle,`Note:
Loading a model from its configuration file does `),DCe=n(tle,"STRONG",{});var ROt=s(DCe);X3r=r(ROt,"not"),ROt.forEach(t),z3r=r(tle,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(tle,"A",{href:!0});var POt=s(rK);Q3r=r(POt,"from_pretrained()"),POt.forEach(t),W3r=r(tle," to load the model weights."),tle.forEach(t),U3r=i(WL),T(vC.$$.fragment,WL),WL.forEach(t),H3r=i(Wl),To=n(Wl,"DIV",{class:!0});var Oa=s(To);T(D$.$$.fragment,Oa),J3r=i(Oa),GCe=n(Oa,"P",{});var BOt=s(GCe);Y3r=r(BOt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),BOt.forEach(t),K3r=i(Oa),Fn=n(Oa,"P",{});var UL=s(Fn);Z3r=r(UL,"The model class to instantiate is selected based on the "),OCe=n(UL,"CODE",{});var IOt=s(OCe);e5r=r(IOt,"model_type"),IOt.forEach(t),o5r=r(UL,` property of the config object (either
passed as an argument or loaded from `),VCe=n(UL,"CODE",{});var NOt=s(VCe);r5r=r(NOt,"pretrained_model_name_or_path"),NOt.forEach(t),t5r=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XCe=n(UL,"CODE",{});var qOt=s(XCe);a5r=r(qOt,"pretrained_model_name_or_path"),qOt.forEach(t),n5r=r(UL,":"),UL.forEach(t),s5r=i(Oa),G$=n(Oa,"UL",{});var jZe=s(G$);FC=n(jZe,"LI",{});var YVe=s(FC);zCe=n(YVe,"STRONG",{});var jOt=s(zCe);l5r=r(jOt,"detr"),jOt.forEach(t),i5r=r(YVe," \u2014 "),tK=n(YVe,"A",{href:!0});var DOt=s(tK);d5r=r(DOt,"DetrForObjectDetection"),DOt.forEach(t),c5r=r(YVe," (DETR model)"),YVe.forEach(t),m5r=i(jZe),TC=n(jZe,"LI",{});var KVe=s(TC);QCe=n(KVe,"STRONG",{});var GOt=s(QCe);f5r=r(GOt,"yolos"),GOt.forEach(t),g5r=r(KVe," \u2014 "),aK=n(KVe,"A",{href:!0});var OOt=s(aK);h5r=r(OOt,"YolosForObjectDetection"),OOt.forEach(t),u5r=r(KVe," (YOLOS model)"),KVe.forEach(t),jZe.forEach(t),p5r=i(Oa),MC=n(Oa,"P",{});var ZVe=s(MC);_5r=r(ZVe,"The model is set in evaluation mode by default using "),WCe=n(ZVe,"CODE",{});var VOt=s(WCe);b5r=r(VOt,"model.eval()"),VOt.forEach(t),v5r=r(ZVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UCe=n(ZVe,"CODE",{});var XOt=s(UCe);F5r=r(XOt,"model.train()"),XOt.forEach(t),ZVe.forEach(t),T5r=i(Oa),T(EC.$$.fragment,Oa),Oa.forEach(t),Wl.forEach(t),CYe=i(m),$c=n(m,"H2",{class:!0});var DZe=s($c);CC=n(DZe,"A",{id:!0,class:!0,href:!0});var zOt=s(CC);HCe=n(zOt,"SPAN",{});var QOt=s(HCe);T(O$.$$.fragment,QOt),QOt.forEach(t),zOt.forEach(t),M5r=i(DZe),JCe=n(DZe,"SPAN",{});var WOt=s(JCe);E5r=r(WOt,"AutoModelForImageSegmentation"),WOt.forEach(t),DZe.forEach(t),wYe=i(m),tr=n(m,"DIV",{class:!0});var Ul=s(tr);T(V$.$$.fragment,Ul),C5r=i(Ul),kc=n(Ul,"P",{});var ale=s(kc);w5r=r(ale,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nK=n(ale,"A",{href:!0});var UOt=s(nK);A5r=r(UOt,"from_pretrained()"),UOt.forEach(t),y5r=r(ale," class method or the "),sK=n(ale,"A",{href:!0});var HOt=s(sK);L5r=r(HOt,"from_config()"),HOt.forEach(t),x5r=r(ale,` class
method.`),ale.forEach(t),$5r=i(Ul),X$=n(Ul,"P",{});var GZe=s(X$);k5r=r(GZe,"This class cannot be instantiated directly using "),YCe=n(GZe,"CODE",{});var JOt=s(YCe);S5r=r(JOt,"__init__()"),JOt.forEach(t),R5r=r(GZe," (throws an error)."),GZe.forEach(t),P5r=i(Ul),Dt=n(Ul,"DIV",{class:!0});var HL=s(Dt);T(z$.$$.fragment,HL),B5r=i(HL),KCe=n(HL,"P",{});var YOt=s(KCe);I5r=r(YOt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),YOt.forEach(t),N5r=i(HL),Sc=n(HL,"P",{});var nle=s(Sc);q5r=r(nle,`Note:
Loading a model from its configuration file does `),ZCe=n(nle,"STRONG",{});var KOt=s(ZCe);j5r=r(KOt,"not"),KOt.forEach(t),D5r=r(nle,` load the model weights. It only affects the
model\u2019s configuration. Use `),lK=n(nle,"A",{href:!0});var ZOt=s(lK);G5r=r(ZOt,"from_pretrained()"),ZOt.forEach(t),O5r=r(nle," to load the model weights."),nle.forEach(t),V5r=i(HL),T(wC.$$.fragment,HL),HL.forEach(t),X5r=i(Ul),Mo=n(Ul,"DIV",{class:!0});var Va=s(Mo);T(Q$.$$.fragment,Va),z5r=i(Va),e3e=n(Va,"P",{});var eVt=s(e3e);Q5r=r(eVt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),eVt.forEach(t),W5r=i(Va),Tn=n(Va,"P",{});var JL=s(Tn);U5r=r(JL,"The model class to instantiate is selected based on the "),o3e=n(JL,"CODE",{});var oVt=s(o3e);H5r=r(oVt,"model_type"),oVt.forEach(t),J5r=r(JL,` property of the config object (either
passed as an argument or loaded from `),r3e=n(JL,"CODE",{});var rVt=s(r3e);Y5r=r(rVt,"pretrained_model_name_or_path"),rVt.forEach(t),K5r=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t3e=n(JL,"CODE",{});var tVt=s(t3e);Z5r=r(tVt,"pretrained_model_name_or_path"),tVt.forEach(t),e0r=r(JL,":"),JL.forEach(t),o0r=i(Va),a3e=n(Va,"UL",{});var aVt=s(a3e);AC=n(aVt,"LI",{});var eXe=s(AC);n3e=n(eXe,"STRONG",{});var nVt=s(n3e);r0r=r(nVt,"detr"),nVt.forEach(t),t0r=r(eXe," \u2014 "),iK=n(eXe,"A",{href:!0});var sVt=s(iK);a0r=r(sVt,"DetrForSegmentation"),sVt.forEach(t),n0r=r(eXe," (DETR model)"),eXe.forEach(t),aVt.forEach(t),s0r=i(Va),yC=n(Va,"P",{});var oXe=s(yC);l0r=r(oXe,"The model is set in evaluation mode by default using "),s3e=n(oXe,"CODE",{});var lVt=s(s3e);i0r=r(lVt,"model.eval()"),lVt.forEach(t),d0r=r(oXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l3e=n(oXe,"CODE",{});var iVt=s(l3e);c0r=r(iVt,"model.train()"),iVt.forEach(t),oXe.forEach(t),m0r=i(Va),T(LC.$$.fragment,Va),Va.forEach(t),Ul.forEach(t),AYe=i(m),Rc=n(m,"H2",{class:!0});var OZe=s(Rc);xC=n(OZe,"A",{id:!0,class:!0,href:!0});var dVt=s(xC);i3e=n(dVt,"SPAN",{});var cVt=s(i3e);T(W$.$$.fragment,cVt),cVt.forEach(t),dVt.forEach(t),f0r=i(OZe),d3e=n(OZe,"SPAN",{});var mVt=s(d3e);g0r=r(mVt,"AutoModelForSemanticSegmentation"),mVt.forEach(t),OZe.forEach(t),yYe=i(m),ar=n(m,"DIV",{class:!0});var Hl=s(ar);T(U$.$$.fragment,Hl),h0r=i(Hl),Pc=n(Hl,"P",{});var sle=s(Pc);u0r=r(sle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dK=n(sle,"A",{href:!0});var fVt=s(dK);p0r=r(fVt,"from_pretrained()"),fVt.forEach(t),_0r=r(sle," class method or the "),cK=n(sle,"A",{href:!0});var gVt=s(cK);b0r=r(gVt,"from_config()"),gVt.forEach(t),v0r=r(sle,` class
method.`),sle.forEach(t),F0r=i(Hl),H$=n(Hl,"P",{});var VZe=s(H$);T0r=r(VZe,"This class cannot be instantiated directly using "),c3e=n(VZe,"CODE",{});var hVt=s(c3e);M0r=r(hVt,"__init__()"),hVt.forEach(t),E0r=r(VZe," (throws an error)."),VZe.forEach(t),C0r=i(Hl),Gt=n(Hl,"DIV",{class:!0});var YL=s(Gt);T(J$.$$.fragment,YL),w0r=i(YL),m3e=n(YL,"P",{});var uVt=s(m3e);A0r=r(uVt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),uVt.forEach(t),y0r=i(YL),Bc=n(YL,"P",{});var lle=s(Bc);L0r=r(lle,`Note:
Loading a model from its configuration file does `),f3e=n(lle,"STRONG",{});var pVt=s(f3e);x0r=r(pVt,"not"),pVt.forEach(t),$0r=r(lle,` load the model weights. It only affects the
model\u2019s configuration. Use `),mK=n(lle,"A",{href:!0});var _Vt=s(mK);k0r=r(_Vt,"from_pretrained()"),_Vt.forEach(t),S0r=r(lle," to load the model weights."),lle.forEach(t),R0r=i(YL),T($C.$$.fragment,YL),YL.forEach(t),P0r=i(Hl),Eo=n(Hl,"DIV",{class:!0});var Xa=s(Eo);T(Y$.$$.fragment,Xa),B0r=i(Xa),g3e=n(Xa,"P",{});var bVt=s(g3e);I0r=r(bVt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),bVt.forEach(t),N0r=i(Xa),Mn=n(Xa,"P",{});var KL=s(Mn);q0r=r(KL,"The model class to instantiate is selected based on the "),h3e=n(KL,"CODE",{});var vVt=s(h3e);j0r=r(vVt,"model_type"),vVt.forEach(t),D0r=r(KL,` property of the config object (either
passed as an argument or loaded from `),u3e=n(KL,"CODE",{});var FVt=s(u3e);G0r=r(FVt,"pretrained_model_name_or_path"),FVt.forEach(t),O0r=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=n(KL,"CODE",{});var TVt=s(p3e);V0r=r(TVt,"pretrained_model_name_or_path"),TVt.forEach(t),X0r=r(KL,":"),KL.forEach(t),z0r=i(Xa),ft=n(Xa,"UL",{});var Jl=s(ft);kC=n(Jl,"LI",{});var rXe=s(kC);_3e=n(rXe,"STRONG",{});var MVt=s(_3e);Q0r=r(MVt,"beit"),MVt.forEach(t),W0r=r(rXe," \u2014 "),fK=n(rXe,"A",{href:!0});var EVt=s(fK);U0r=r(EVt,"BeitForSemanticSegmentation"),EVt.forEach(t),H0r=r(rXe," (BEiT model)"),rXe.forEach(t),J0r=i(Jl),SC=n(Jl,"LI",{});var tXe=s(SC);b3e=n(tXe,"STRONG",{});var CVt=s(b3e);Y0r=r(CVt,"data2vec-vision"),CVt.forEach(t),K0r=r(tXe," \u2014 "),gK=n(tXe,"A",{href:!0});var wVt=s(gK);Z0r=r(wVt,"Data2VecVisionForSemanticSegmentation"),wVt.forEach(t),ewr=r(tXe," (Data2VecVision model)"),tXe.forEach(t),owr=i(Jl),RC=n(Jl,"LI",{});var aXe=s(RC);v3e=n(aXe,"STRONG",{});var AVt=s(v3e);rwr=r(AVt,"dpt"),AVt.forEach(t),twr=r(aXe," \u2014 "),hK=n(aXe,"A",{href:!0});var yVt=s(hK);awr=r(yVt,"DPTForSemanticSegmentation"),yVt.forEach(t),nwr=r(aXe," (DPT model)"),aXe.forEach(t),swr=i(Jl),PC=n(Jl,"LI",{});var nXe=s(PC);F3e=n(nXe,"STRONG",{});var LVt=s(F3e);lwr=r(LVt,"mobilevit"),LVt.forEach(t),iwr=r(nXe," \u2014 "),uK=n(nXe,"A",{href:!0});var xVt=s(uK);dwr=r(xVt,"MobileViTForSemanticSegmentation"),xVt.forEach(t),cwr=r(nXe," (MobileViT model)"),nXe.forEach(t),mwr=i(Jl),BC=n(Jl,"LI",{});var sXe=s(BC);T3e=n(sXe,"STRONG",{});var $Vt=s(T3e);fwr=r($Vt,"segformer"),$Vt.forEach(t),gwr=r(sXe," \u2014 "),pK=n(sXe,"A",{href:!0});var kVt=s(pK);hwr=r(kVt,"SegformerForSemanticSegmentation"),kVt.forEach(t),uwr=r(sXe," (SegFormer model)"),sXe.forEach(t),Jl.forEach(t),pwr=i(Xa),IC=n(Xa,"P",{});var lXe=s(IC);_wr=r(lXe,"The model is set in evaluation mode by default using "),M3e=n(lXe,"CODE",{});var SVt=s(M3e);bwr=r(SVt,"model.eval()"),SVt.forEach(t),vwr=r(lXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E3e=n(lXe,"CODE",{});var RVt=s(E3e);Fwr=r(RVt,"model.train()"),RVt.forEach(t),lXe.forEach(t),Twr=i(Xa),T(NC.$$.fragment,Xa),Xa.forEach(t),Hl.forEach(t),LYe=i(m),Ic=n(m,"H2",{class:!0});var XZe=s(Ic);qC=n(XZe,"A",{id:!0,class:!0,href:!0});var PVt=s(qC);C3e=n(PVt,"SPAN",{});var BVt=s(C3e);T(K$.$$.fragment,BVt),BVt.forEach(t),PVt.forEach(t),Mwr=i(XZe),w3e=n(XZe,"SPAN",{});var IVt=s(w3e);Ewr=r(IVt,"AutoModelForInstanceSegmentation"),IVt.forEach(t),XZe.forEach(t),xYe=i(m),nr=n(m,"DIV",{class:!0});var Yl=s(nr);T(Z$.$$.fragment,Yl),Cwr=i(Yl),Nc=n(Yl,"P",{});var ile=s(Nc);wwr=r(ile,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_K=n(ile,"A",{href:!0});var NVt=s(_K);Awr=r(NVt,"from_pretrained()"),NVt.forEach(t),ywr=r(ile," class method or the "),bK=n(ile,"A",{href:!0});var qVt=s(bK);Lwr=r(qVt,"from_config()"),qVt.forEach(t),xwr=r(ile,` class
method.`),ile.forEach(t),$wr=i(Yl),ek=n(Yl,"P",{});var zZe=s(ek);kwr=r(zZe,"This class cannot be instantiated directly using "),A3e=n(zZe,"CODE",{});var jVt=s(A3e);Swr=r(jVt,"__init__()"),jVt.forEach(t),Rwr=r(zZe," (throws an error)."),zZe.forEach(t),Pwr=i(Yl),Ot=n(Yl,"DIV",{class:!0});var ZL=s(Ot);T(ok.$$.fragment,ZL),Bwr=i(ZL),y3e=n(ZL,"P",{});var DVt=s(y3e);Iwr=r(DVt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),DVt.forEach(t),Nwr=i(ZL),qc=n(ZL,"P",{});var dle=s(qc);qwr=r(dle,`Note:
Loading a model from its configuration file does `),L3e=n(dle,"STRONG",{});var GVt=s(L3e);jwr=r(GVt,"not"),GVt.forEach(t),Dwr=r(dle,` load the model weights. It only affects the
model\u2019s configuration. Use `),vK=n(dle,"A",{href:!0});var OVt=s(vK);Gwr=r(OVt,"from_pretrained()"),OVt.forEach(t),Owr=r(dle," to load the model weights."),dle.forEach(t),Vwr=i(ZL),T(jC.$$.fragment,ZL),ZL.forEach(t),Xwr=i(Yl),Co=n(Yl,"DIV",{class:!0});var za=s(Co);T(rk.$$.fragment,za),zwr=i(za),x3e=n(za,"P",{});var VVt=s(x3e);Qwr=r(VVt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),VVt.forEach(t),Wwr=i(za),En=n(za,"P",{});var e8=s(En);Uwr=r(e8,"The model class to instantiate is selected based on the "),$3e=n(e8,"CODE",{});var XVt=s($3e);Hwr=r(XVt,"model_type"),XVt.forEach(t),Jwr=r(e8,` property of the config object (either
passed as an argument or loaded from `),k3e=n(e8,"CODE",{});var zVt=s(k3e);Ywr=r(zVt,"pretrained_model_name_or_path"),zVt.forEach(t),Kwr=r(e8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S3e=n(e8,"CODE",{});var QVt=s(S3e);Zwr=r(QVt,"pretrained_model_name_or_path"),QVt.forEach(t),eAr=r(e8,":"),e8.forEach(t),oAr=i(za),R3e=n(za,"UL",{});var WVt=s(R3e);DC=n(WVt,"LI",{});var iXe=s(DC);P3e=n(iXe,"STRONG",{});var UVt=s(P3e);rAr=r(UVt,"maskformer"),UVt.forEach(t),tAr=r(iXe," \u2014 "),FK=n(iXe,"A",{href:!0});var HVt=s(FK);aAr=r(HVt,"MaskFormerForInstanceSegmentation"),HVt.forEach(t),nAr=r(iXe," (MaskFormer model)"),iXe.forEach(t),WVt.forEach(t),sAr=i(za),GC=n(za,"P",{});var dXe=s(GC);lAr=r(dXe,"The model is set in evaluation mode by default using "),B3e=n(dXe,"CODE",{});var JVt=s(B3e);iAr=r(JVt,"model.eval()"),JVt.forEach(t),dAr=r(dXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I3e=n(dXe,"CODE",{});var YVt=s(I3e);cAr=r(YVt,"model.train()"),YVt.forEach(t),dXe.forEach(t),mAr=i(za),T(OC.$$.fragment,za),za.forEach(t),Yl.forEach(t),$Ye=i(m),jc=n(m,"H2",{class:!0});var QZe=s(jc);VC=n(QZe,"A",{id:!0,class:!0,href:!0});var KVt=s(VC);N3e=n(KVt,"SPAN",{});var ZVt=s(N3e);T(tk.$$.fragment,ZVt),ZVt.forEach(t),KVt.forEach(t),fAr=i(QZe),q3e=n(QZe,"SPAN",{});var eXt=s(q3e);gAr=r(eXt,"TFAutoModel"),eXt.forEach(t),QZe.forEach(t),kYe=i(m),sr=n(m,"DIV",{class:!0});var Kl=s(sr);T(ak.$$.fragment,Kl),hAr=i(Kl),Dc=n(Kl,"P",{});var cle=s(Dc);uAr=r(cle,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TK=n(cle,"A",{href:!0});var oXt=s(TK);pAr=r(oXt,"from_pretrained()"),oXt.forEach(t),_Ar=r(cle," class method or the "),MK=n(cle,"A",{href:!0});var rXt=s(MK);bAr=r(rXt,"from_config()"),rXt.forEach(t),vAr=r(cle,` class
method.`),cle.forEach(t),FAr=i(Kl),nk=n(Kl,"P",{});var WZe=s(nk);TAr=r(WZe,"This class cannot be instantiated directly using "),j3e=n(WZe,"CODE",{});var tXt=s(j3e);MAr=r(tXt,"__init__()"),tXt.forEach(t),EAr=r(WZe," (throws an error)."),WZe.forEach(t),CAr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var o8=s(Vt);T(sk.$$.fragment,o8),wAr=i(o8),D3e=n(o8,"P",{});var aXt=s(D3e);AAr=r(aXt,"Instantiates one of the base model classes of the library from a configuration."),aXt.forEach(t),yAr=i(o8),Gc=n(o8,"P",{});var mle=s(Gc);LAr=r(mle,`Note:
Loading a model from its configuration file does `),G3e=n(mle,"STRONG",{});var nXt=s(G3e);xAr=r(nXt,"not"),nXt.forEach(t),$Ar=r(mle,` load the model weights. It only affects the
model\u2019s configuration. Use `),EK=n(mle,"A",{href:!0});var sXt=s(EK);kAr=r(sXt,"from_pretrained()"),sXt.forEach(t),SAr=r(mle," to load the model weights."),mle.forEach(t),RAr=i(o8),T(XC.$$.fragment,o8),o8.forEach(t),PAr=i(Kl),Ir=n(Kl,"DIV",{class:!0});var Zl=s(Ir);T(lk.$$.fragment,Zl),BAr=i(Zl),O3e=n(Zl,"P",{});var lXt=s(O3e);IAr=r(lXt,"Instantiate one of the base model classes of the library from a pretrained model."),lXt.forEach(t),NAr=i(Zl),Cn=n(Zl,"P",{});var r8=s(Cn);qAr=r(r8,"The model class to instantiate is selected based on the "),V3e=n(r8,"CODE",{});var iXt=s(V3e);jAr=r(iXt,"model_type"),iXt.forEach(t),DAr=r(r8,` property of the config object (either
passed as an argument or loaded from `),X3e=n(r8,"CODE",{});var dXt=s(X3e);GAr=r(dXt,"pretrained_model_name_or_path"),dXt.forEach(t),OAr=r(r8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z3e=n(r8,"CODE",{});var cXt=s(z3e);VAr=r(cXt,"pretrained_model_name_or_path"),cXt.forEach(t),XAr=r(r8,":"),r8.forEach(t),zAr=i(Zl),N=n(Zl,"UL",{});var q=s(N);zC=n(q,"LI",{});var cXe=s(zC);Q3e=n(cXe,"STRONG",{});var mXt=s(Q3e);QAr=r(mXt,"albert"),mXt.forEach(t),WAr=r(cXe," \u2014 "),CK=n(cXe,"A",{href:!0});var fXt=s(CK);UAr=r(fXt,"TFAlbertModel"),fXt.forEach(t),HAr=r(cXe," (ALBERT model)"),cXe.forEach(t),JAr=i(q),QC=n(q,"LI",{});var mXe=s(QC);W3e=n(mXe,"STRONG",{});var gXt=s(W3e);YAr=r(gXt,"bart"),gXt.forEach(t),KAr=r(mXe," \u2014 "),wK=n(mXe,"A",{href:!0});var hXt=s(wK);ZAr=r(hXt,"TFBartModel"),hXt.forEach(t),e6r=r(mXe," (BART model)"),mXe.forEach(t),o6r=i(q),WC=n(q,"LI",{});var fXe=s(WC);U3e=n(fXe,"STRONG",{});var uXt=s(U3e);r6r=r(uXt,"bert"),uXt.forEach(t),t6r=r(fXe," \u2014 "),AK=n(fXe,"A",{href:!0});var pXt=s(AK);a6r=r(pXt,"TFBertModel"),pXt.forEach(t),n6r=r(fXe," (BERT model)"),fXe.forEach(t),s6r=i(q),UC=n(q,"LI",{});var gXe=s(UC);H3e=n(gXe,"STRONG",{});var _Xt=s(H3e);l6r=r(_Xt,"blenderbot"),_Xt.forEach(t),i6r=r(gXe," \u2014 "),yK=n(gXe,"A",{href:!0});var bXt=s(yK);d6r=r(bXt,"TFBlenderbotModel"),bXt.forEach(t),c6r=r(gXe," (Blenderbot model)"),gXe.forEach(t),m6r=i(q),HC=n(q,"LI",{});var hXe=s(HC);J3e=n(hXe,"STRONG",{});var vXt=s(J3e);f6r=r(vXt,"blenderbot-small"),vXt.forEach(t),g6r=r(hXe," \u2014 "),LK=n(hXe,"A",{href:!0});var FXt=s(LK);h6r=r(FXt,"TFBlenderbotSmallModel"),FXt.forEach(t),u6r=r(hXe," (BlenderbotSmall model)"),hXe.forEach(t),p6r=i(q),JC=n(q,"LI",{});var uXe=s(JC);Y3e=n(uXe,"STRONG",{});var TXt=s(Y3e);_6r=r(TXt,"camembert"),TXt.forEach(t),b6r=r(uXe," \u2014 "),xK=n(uXe,"A",{href:!0});var MXt=s(xK);v6r=r(MXt,"TFCamembertModel"),MXt.forEach(t),F6r=r(uXe," (CamemBERT model)"),uXe.forEach(t),T6r=i(q),YC=n(q,"LI",{});var pXe=s(YC);K3e=n(pXe,"STRONG",{});var EXt=s(K3e);M6r=r(EXt,"clip"),EXt.forEach(t),E6r=r(pXe," \u2014 "),$K=n(pXe,"A",{href:!0});var CXt=s($K);C6r=r(CXt,"TFCLIPModel"),CXt.forEach(t),w6r=r(pXe," (CLIP model)"),pXe.forEach(t),A6r=i(q),KC=n(q,"LI",{});var _Xe=s(KC);Z3e=n(_Xe,"STRONG",{});var wXt=s(Z3e);y6r=r(wXt,"convbert"),wXt.forEach(t),L6r=r(_Xe," \u2014 "),kK=n(_Xe,"A",{href:!0});var AXt=s(kK);x6r=r(AXt,"TFConvBertModel"),AXt.forEach(t),$6r=r(_Xe," (ConvBERT model)"),_Xe.forEach(t),k6r=i(q),ZC=n(q,"LI",{});var bXe=s(ZC);e5e=n(bXe,"STRONG",{});var yXt=s(e5e);S6r=r(yXt,"convnext"),yXt.forEach(t),R6r=r(bXe," \u2014 "),SK=n(bXe,"A",{href:!0});var LXt=s(SK);P6r=r(LXt,"TFConvNextModel"),LXt.forEach(t),B6r=r(bXe," (ConvNeXT model)"),bXe.forEach(t),I6r=i(q),e3=n(q,"LI",{});var vXe=s(e3);o5e=n(vXe,"STRONG",{});var xXt=s(o5e);N6r=r(xXt,"ctrl"),xXt.forEach(t),q6r=r(vXe," \u2014 "),RK=n(vXe,"A",{href:!0});var $Xt=s(RK);j6r=r($Xt,"TFCTRLModel"),$Xt.forEach(t),D6r=r(vXe," (CTRL model)"),vXe.forEach(t),G6r=i(q),o3=n(q,"LI",{});var FXe=s(o3);r5e=n(FXe,"STRONG",{});var kXt=s(r5e);O6r=r(kXt,"data2vec-vision"),kXt.forEach(t),V6r=r(FXe," \u2014 "),PK=n(FXe,"A",{href:!0});var SXt=s(PK);X6r=r(SXt,"TFData2VecVisionModel"),SXt.forEach(t),z6r=r(FXe," (Data2VecVision model)"),FXe.forEach(t),Q6r=i(q),r3=n(q,"LI",{});var TXe=s(r3);t5e=n(TXe,"STRONG",{});var RXt=s(t5e);W6r=r(RXt,"deberta"),RXt.forEach(t),U6r=r(TXe," \u2014 "),BK=n(TXe,"A",{href:!0});var PXt=s(BK);H6r=r(PXt,"TFDebertaModel"),PXt.forEach(t),J6r=r(TXe," (DeBERTa model)"),TXe.forEach(t),Y6r=i(q),t3=n(q,"LI",{});var MXe=s(t3);a5e=n(MXe,"STRONG",{});var BXt=s(a5e);K6r=r(BXt,"deberta-v2"),BXt.forEach(t),Z6r=r(MXe," \u2014 "),IK=n(MXe,"A",{href:!0});var IXt=s(IK);e7r=r(IXt,"TFDebertaV2Model"),IXt.forEach(t),o7r=r(MXe," (DeBERTa-v2 model)"),MXe.forEach(t),r7r=i(q),a3=n(q,"LI",{});var EXe=s(a3);n5e=n(EXe,"STRONG",{});var NXt=s(n5e);t7r=r(NXt,"deit"),NXt.forEach(t),a7r=r(EXe," \u2014 "),NK=n(EXe,"A",{href:!0});var qXt=s(NK);n7r=r(qXt,"TFDeiTModel"),qXt.forEach(t),s7r=r(EXe," (DeiT model)"),EXe.forEach(t),l7r=i(q),n3=n(q,"LI",{});var CXe=s(n3);s5e=n(CXe,"STRONG",{});var jXt=s(s5e);i7r=r(jXt,"distilbert"),jXt.forEach(t),d7r=r(CXe," \u2014 "),qK=n(CXe,"A",{href:!0});var DXt=s(qK);c7r=r(DXt,"TFDistilBertModel"),DXt.forEach(t),m7r=r(CXe," (DistilBERT model)"),CXe.forEach(t),f7r=i(q),s3=n(q,"LI",{});var wXe=s(s3);l5e=n(wXe,"STRONG",{});var GXt=s(l5e);g7r=r(GXt,"dpr"),GXt.forEach(t),h7r=r(wXe," \u2014 "),jK=n(wXe,"A",{href:!0});var OXt=s(jK);u7r=r(OXt,"TFDPRQuestionEncoder"),OXt.forEach(t),p7r=r(wXe," (DPR model)"),wXe.forEach(t),_7r=i(q),l3=n(q,"LI",{});var AXe=s(l3);i5e=n(AXe,"STRONG",{});var VXt=s(i5e);b7r=r(VXt,"electra"),VXt.forEach(t),v7r=r(AXe," \u2014 "),DK=n(AXe,"A",{href:!0});var XXt=s(DK);F7r=r(XXt,"TFElectraModel"),XXt.forEach(t),T7r=r(AXe," (ELECTRA model)"),AXe.forEach(t),M7r=i(q),i3=n(q,"LI",{});var yXe=s(i3);d5e=n(yXe,"STRONG",{});var zXt=s(d5e);E7r=r(zXt,"flaubert"),zXt.forEach(t),C7r=r(yXe," \u2014 "),GK=n(yXe,"A",{href:!0});var QXt=s(GK);w7r=r(QXt,"TFFlaubertModel"),QXt.forEach(t),A7r=r(yXe," (FlauBERT model)"),yXe.forEach(t),y7r=i(q),_l=n(q,"LI",{});var aB=s(_l);c5e=n(aB,"STRONG",{});var WXt=s(c5e);L7r=r(WXt,"funnel"),WXt.forEach(t),x7r=r(aB," \u2014 "),OK=n(aB,"A",{href:!0});var UXt=s(OK);$7r=r(UXt,"TFFunnelModel"),UXt.forEach(t),k7r=r(aB," or "),VK=n(aB,"A",{href:!0});var HXt=s(VK);S7r=r(HXt,"TFFunnelBaseModel"),HXt.forEach(t),R7r=r(aB," (Funnel Transformer model)"),aB.forEach(t),P7r=i(q),d3=n(q,"LI",{});var LXe=s(d3);m5e=n(LXe,"STRONG",{});var JXt=s(m5e);B7r=r(JXt,"gpt2"),JXt.forEach(t),I7r=r(LXe," \u2014 "),XK=n(LXe,"A",{href:!0});var YXt=s(XK);N7r=r(YXt,"TFGPT2Model"),YXt.forEach(t),q7r=r(LXe," (OpenAI GPT-2 model)"),LXe.forEach(t),j7r=i(q),c3=n(q,"LI",{});var xXe=s(c3);f5e=n(xXe,"STRONG",{});var KXt=s(f5e);D7r=r(KXt,"gptj"),KXt.forEach(t),G7r=r(xXe," \u2014 "),zK=n(xXe,"A",{href:!0});var ZXt=s(zK);O7r=r(ZXt,"TFGPTJModel"),ZXt.forEach(t),V7r=r(xXe," (GPT-J model)"),xXe.forEach(t),X7r=i(q),m3=n(q,"LI",{});var $Xe=s(m3);g5e=n($Xe,"STRONG",{});var ezt=s(g5e);z7r=r(ezt,"hubert"),ezt.forEach(t),Q7r=r($Xe," \u2014 "),QK=n($Xe,"A",{href:!0});var ozt=s(QK);W7r=r(ozt,"TFHubertModel"),ozt.forEach(t),U7r=r($Xe," (Hubert model)"),$Xe.forEach(t),H7r=i(q),f3=n(q,"LI",{});var kXe=s(f3);h5e=n(kXe,"STRONG",{});var rzt=s(h5e);J7r=r(rzt,"layoutlm"),rzt.forEach(t),Y7r=r(kXe," \u2014 "),WK=n(kXe,"A",{href:!0});var tzt=s(WK);K7r=r(tzt,"TFLayoutLMModel"),tzt.forEach(t),Z7r=r(kXe," (LayoutLM model)"),kXe.forEach(t),eyr=i(q),g3=n(q,"LI",{});var SXe=s(g3);u5e=n(SXe,"STRONG",{});var azt=s(u5e);oyr=r(azt,"layoutlmv3"),azt.forEach(t),ryr=r(SXe," \u2014 "),UK=n(SXe,"A",{href:!0});var nzt=s(UK);tyr=r(nzt,"TFLayoutLMv3Model"),nzt.forEach(t),ayr=r(SXe," (LayoutLMv3 model)"),SXe.forEach(t),nyr=i(q),h3=n(q,"LI",{});var RXe=s(h3);p5e=n(RXe,"STRONG",{});var szt=s(p5e);syr=r(szt,"led"),szt.forEach(t),lyr=r(RXe," \u2014 "),HK=n(RXe,"A",{href:!0});var lzt=s(HK);iyr=r(lzt,"TFLEDModel"),lzt.forEach(t),dyr=r(RXe," (LED model)"),RXe.forEach(t),cyr=i(q),u3=n(q,"LI",{});var PXe=s(u3);_5e=n(PXe,"STRONG",{});var izt=s(_5e);myr=r(izt,"longformer"),izt.forEach(t),fyr=r(PXe," \u2014 "),JK=n(PXe,"A",{href:!0});var dzt=s(JK);gyr=r(dzt,"TFLongformerModel"),dzt.forEach(t),hyr=r(PXe," (Longformer model)"),PXe.forEach(t),uyr=i(q),p3=n(q,"LI",{});var BXe=s(p3);b5e=n(BXe,"STRONG",{});var czt=s(b5e);pyr=r(czt,"lxmert"),czt.forEach(t),_yr=r(BXe," \u2014 "),YK=n(BXe,"A",{href:!0});var mzt=s(YK);byr=r(mzt,"TFLxmertModel"),mzt.forEach(t),vyr=r(BXe," (LXMERT model)"),BXe.forEach(t),Fyr=i(q),_3=n(q,"LI",{});var IXe=s(_3);v5e=n(IXe,"STRONG",{});var fzt=s(v5e);Tyr=r(fzt,"marian"),fzt.forEach(t),Myr=r(IXe," \u2014 "),KK=n(IXe,"A",{href:!0});var gzt=s(KK);Eyr=r(gzt,"TFMarianModel"),gzt.forEach(t),Cyr=r(IXe," (Marian model)"),IXe.forEach(t),wyr=i(q),b3=n(q,"LI",{});var NXe=s(b3);F5e=n(NXe,"STRONG",{});var hzt=s(F5e);Ayr=r(hzt,"mbart"),hzt.forEach(t),yyr=r(NXe," \u2014 "),ZK=n(NXe,"A",{href:!0});var uzt=s(ZK);Lyr=r(uzt,"TFMBartModel"),uzt.forEach(t),xyr=r(NXe," (mBART model)"),NXe.forEach(t),$yr=i(q),v3=n(q,"LI",{});var qXe=s(v3);T5e=n(qXe,"STRONG",{});var pzt=s(T5e);kyr=r(pzt,"mobilebert"),pzt.forEach(t),Syr=r(qXe," \u2014 "),eZ=n(qXe,"A",{href:!0});var _zt=s(eZ);Ryr=r(_zt,"TFMobileBertModel"),_zt.forEach(t),Pyr=r(qXe," (MobileBERT model)"),qXe.forEach(t),Byr=i(q),F3=n(q,"LI",{});var jXe=s(F3);M5e=n(jXe,"STRONG",{});var bzt=s(M5e);Iyr=r(bzt,"mobilevit"),bzt.forEach(t),Nyr=r(jXe," \u2014 "),oZ=n(jXe,"A",{href:!0});var vzt=s(oZ);qyr=r(vzt,"TFMobileViTModel"),vzt.forEach(t),jyr=r(jXe," (MobileViT model)"),jXe.forEach(t),Dyr=i(q),T3=n(q,"LI",{});var DXe=s(T3);E5e=n(DXe,"STRONG",{});var Fzt=s(E5e);Gyr=r(Fzt,"mpnet"),Fzt.forEach(t),Oyr=r(DXe," \u2014 "),rZ=n(DXe,"A",{href:!0});var Tzt=s(rZ);Vyr=r(Tzt,"TFMPNetModel"),Tzt.forEach(t),Xyr=r(DXe," (MPNet model)"),DXe.forEach(t),zyr=i(q),M3=n(q,"LI",{});var GXe=s(M3);C5e=n(GXe,"STRONG",{});var Mzt=s(C5e);Qyr=r(Mzt,"mt5"),Mzt.forEach(t),Wyr=r(GXe," \u2014 "),tZ=n(GXe,"A",{href:!0});var Ezt=s(tZ);Uyr=r(Ezt,"TFMT5Model"),Ezt.forEach(t),Hyr=r(GXe," (MT5 model)"),GXe.forEach(t),Jyr=i(q),E3=n(q,"LI",{});var OXe=s(E3);w5e=n(OXe,"STRONG",{});var Czt=s(w5e);Yyr=r(Czt,"openai-gpt"),Czt.forEach(t),Kyr=r(OXe," \u2014 "),aZ=n(OXe,"A",{href:!0});var wzt=s(aZ);Zyr=r(wzt,"TFOpenAIGPTModel"),wzt.forEach(t),eLr=r(OXe," (OpenAI GPT model)"),OXe.forEach(t),oLr=i(q),C3=n(q,"LI",{});var VXe=s(C3);A5e=n(VXe,"STRONG",{});var Azt=s(A5e);rLr=r(Azt,"opt"),Azt.forEach(t),tLr=r(VXe," \u2014 "),nZ=n(VXe,"A",{href:!0});var yzt=s(nZ);aLr=r(yzt,"TFOPTModel"),yzt.forEach(t),nLr=r(VXe," (OPT model)"),VXe.forEach(t),sLr=i(q),w3=n(q,"LI",{});var XXe=s(w3);y5e=n(XXe,"STRONG",{});var Lzt=s(y5e);lLr=r(Lzt,"pegasus"),Lzt.forEach(t),iLr=r(XXe," \u2014 "),sZ=n(XXe,"A",{href:!0});var xzt=s(sZ);dLr=r(xzt,"TFPegasusModel"),xzt.forEach(t),cLr=r(XXe," (Pegasus model)"),XXe.forEach(t),mLr=i(q),A3=n(q,"LI",{});var zXe=s(A3);L5e=n(zXe,"STRONG",{});var $zt=s(L5e);fLr=r($zt,"regnet"),$zt.forEach(t),gLr=r(zXe," \u2014 "),lZ=n(zXe,"A",{href:!0});var kzt=s(lZ);hLr=r(kzt,"TFRegNetModel"),kzt.forEach(t),uLr=r(zXe," (RegNet model)"),zXe.forEach(t),pLr=i(q),y3=n(q,"LI",{});var QXe=s(y3);x5e=n(QXe,"STRONG",{});var Szt=s(x5e);_Lr=r(Szt,"rembert"),Szt.forEach(t),bLr=r(QXe," \u2014 "),iZ=n(QXe,"A",{href:!0});var Rzt=s(iZ);vLr=r(Rzt,"TFRemBertModel"),Rzt.forEach(t),FLr=r(QXe," (RemBERT model)"),QXe.forEach(t),TLr=i(q),L3=n(q,"LI",{});var WXe=s(L3);$5e=n(WXe,"STRONG",{});var Pzt=s($5e);MLr=r(Pzt,"resnet"),Pzt.forEach(t),ELr=r(WXe," \u2014 "),dZ=n(WXe,"A",{href:!0});var Bzt=s(dZ);CLr=r(Bzt,"TFResNetModel"),Bzt.forEach(t),wLr=r(WXe," (ResNet model)"),WXe.forEach(t),ALr=i(q),x3=n(q,"LI",{});var UXe=s(x3);k5e=n(UXe,"STRONG",{});var Izt=s(k5e);yLr=r(Izt,"roberta"),Izt.forEach(t),LLr=r(UXe," \u2014 "),cZ=n(UXe,"A",{href:!0});var Nzt=s(cZ);xLr=r(Nzt,"TFRobertaModel"),Nzt.forEach(t),$Lr=r(UXe," (RoBERTa model)"),UXe.forEach(t),kLr=i(q),$3=n(q,"LI",{});var HXe=s($3);S5e=n(HXe,"STRONG",{});var qzt=s(S5e);SLr=r(qzt,"roformer"),qzt.forEach(t),RLr=r(HXe," \u2014 "),mZ=n(HXe,"A",{href:!0});var jzt=s(mZ);PLr=r(jzt,"TFRoFormerModel"),jzt.forEach(t),BLr=r(HXe," (RoFormer model)"),HXe.forEach(t),ILr=i(q),k3=n(q,"LI",{});var JXe=s(k3);R5e=n(JXe,"STRONG",{});var Dzt=s(R5e);NLr=r(Dzt,"segformer"),Dzt.forEach(t),qLr=r(JXe," \u2014 "),fZ=n(JXe,"A",{href:!0});var Gzt=s(fZ);jLr=r(Gzt,"TFSegformerModel"),Gzt.forEach(t),DLr=r(JXe," (SegFormer model)"),JXe.forEach(t),GLr=i(q),S3=n(q,"LI",{});var YXe=s(S3);P5e=n(YXe,"STRONG",{});var Ozt=s(P5e);OLr=r(Ozt,"speech_to_text"),Ozt.forEach(t),VLr=r(YXe," \u2014 "),gZ=n(YXe,"A",{href:!0});var Vzt=s(gZ);XLr=r(Vzt,"TFSpeech2TextModel"),Vzt.forEach(t),zLr=r(YXe," (Speech2Text model)"),YXe.forEach(t),QLr=i(q),R3=n(q,"LI",{});var KXe=s(R3);B5e=n(KXe,"STRONG",{});var Xzt=s(B5e);WLr=r(Xzt,"swin"),Xzt.forEach(t),ULr=r(KXe," \u2014 "),hZ=n(KXe,"A",{href:!0});var zzt=s(hZ);HLr=r(zzt,"TFSwinModel"),zzt.forEach(t),JLr=r(KXe," (Swin Transformer model)"),KXe.forEach(t),YLr=i(q),P3=n(q,"LI",{});var ZXe=s(P3);I5e=n(ZXe,"STRONG",{});var Qzt=s(I5e);KLr=r(Qzt,"t5"),Qzt.forEach(t),ZLr=r(ZXe," \u2014 "),uZ=n(ZXe,"A",{href:!0});var Wzt=s(uZ);e8r=r(Wzt,"TFT5Model"),Wzt.forEach(t),o8r=r(ZXe," (T5 model)"),ZXe.forEach(t),r8r=i(q),B3=n(q,"LI",{});var eze=s(B3);N5e=n(eze,"STRONG",{});var Uzt=s(N5e);t8r=r(Uzt,"tapas"),Uzt.forEach(t),a8r=r(eze," \u2014 "),pZ=n(eze,"A",{href:!0});var Hzt=s(pZ);n8r=r(Hzt,"TFTapasModel"),Hzt.forEach(t),s8r=r(eze," (TAPAS model)"),eze.forEach(t),l8r=i(q),I3=n(q,"LI",{});var oze=s(I3);q5e=n(oze,"STRONG",{});var Jzt=s(q5e);i8r=r(Jzt,"transfo-xl"),Jzt.forEach(t),d8r=r(oze," \u2014 "),_Z=n(oze,"A",{href:!0});var Yzt=s(_Z);c8r=r(Yzt,"TFTransfoXLModel"),Yzt.forEach(t),m8r=r(oze," (Transformer-XL model)"),oze.forEach(t),f8r=i(q),N3=n(q,"LI",{});var rze=s(N3);j5e=n(rze,"STRONG",{});var Kzt=s(j5e);g8r=r(Kzt,"vit"),Kzt.forEach(t),h8r=r(rze," \u2014 "),bZ=n(rze,"A",{href:!0});var Zzt=s(bZ);u8r=r(Zzt,"TFViTModel"),Zzt.forEach(t),p8r=r(rze," (ViT model)"),rze.forEach(t),_8r=i(q),q3=n(q,"LI",{});var tze=s(q3);D5e=n(tze,"STRONG",{});var eQt=s(D5e);b8r=r(eQt,"vit_mae"),eQt.forEach(t),v8r=r(tze," \u2014 "),vZ=n(tze,"A",{href:!0});var oQt=s(vZ);F8r=r(oQt,"TFViTMAEModel"),oQt.forEach(t),T8r=r(tze," (ViTMAE model)"),tze.forEach(t),M8r=i(q),j3=n(q,"LI",{});var aze=s(j3);G5e=n(aze,"STRONG",{});var rQt=s(G5e);E8r=r(rQt,"wav2vec2"),rQt.forEach(t),C8r=r(aze," \u2014 "),FZ=n(aze,"A",{href:!0});var tQt=s(FZ);w8r=r(tQt,"TFWav2Vec2Model"),tQt.forEach(t),A8r=r(aze," (Wav2Vec2 model)"),aze.forEach(t),y8r=i(q),D3=n(q,"LI",{});var nze=s(D3);O5e=n(nze,"STRONG",{});var aQt=s(O5e);L8r=r(aQt,"xglm"),aQt.forEach(t),x8r=r(nze," \u2014 "),TZ=n(nze,"A",{href:!0});var nQt=s(TZ);$8r=r(nQt,"TFXGLMModel"),nQt.forEach(t),k8r=r(nze," (XGLM model)"),nze.forEach(t),S8r=i(q),G3=n(q,"LI",{});var sze=s(G3);V5e=n(sze,"STRONG",{});var sQt=s(V5e);R8r=r(sQt,"xlm"),sQt.forEach(t),P8r=r(sze," \u2014 "),MZ=n(sze,"A",{href:!0});var lQt=s(MZ);B8r=r(lQt,"TFXLMModel"),lQt.forEach(t),I8r=r(sze," (XLM model)"),sze.forEach(t),N8r=i(q),O3=n(q,"LI",{});var lze=s(O3);X5e=n(lze,"STRONG",{});var iQt=s(X5e);q8r=r(iQt,"xlm-roberta"),iQt.forEach(t),j8r=r(lze," \u2014 "),EZ=n(lze,"A",{href:!0});var dQt=s(EZ);D8r=r(dQt,"TFXLMRobertaModel"),dQt.forEach(t),G8r=r(lze," (XLM-RoBERTa model)"),lze.forEach(t),O8r=i(q),V3=n(q,"LI",{});var ize=s(V3);z5e=n(ize,"STRONG",{});var cQt=s(z5e);V8r=r(cQt,"xlnet"),cQt.forEach(t),X8r=r(ize," \u2014 "),CZ=n(ize,"A",{href:!0});var mQt=s(CZ);z8r=r(mQt,"TFXLNetModel"),mQt.forEach(t),Q8r=r(ize," (XLNet model)"),ize.forEach(t),q.forEach(t),W8r=i(Zl),T(X3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),SYe=i(m),Oc=n(m,"H2",{class:!0});var UZe=s(Oc);z3=n(UZe,"A",{id:!0,class:!0,href:!0});var fQt=s(z3);Q5e=n(fQt,"SPAN",{});var gQt=s(Q5e);T(ik.$$.fragment,gQt),gQt.forEach(t),fQt.forEach(t),U8r=i(UZe),W5e=n(UZe,"SPAN",{});var hQt=s(W5e);H8r=r(hQt,"TFAutoModelForPreTraining"),hQt.forEach(t),UZe.forEach(t),RYe=i(m),lr=n(m,"DIV",{class:!0});var ei=s(lr);T(dk.$$.fragment,ei),J8r=i(ei),Vc=n(ei,"P",{});var fle=s(Vc);Y8r=r(fle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wZ=n(fle,"A",{href:!0});var uQt=s(wZ);K8r=r(uQt,"from_pretrained()"),uQt.forEach(t),Z8r=r(fle," class method or the "),AZ=n(fle,"A",{href:!0});var pQt=s(AZ);e9r=r(pQt,"from_config()"),pQt.forEach(t),o9r=r(fle,` class
method.`),fle.forEach(t),r9r=i(ei),ck=n(ei,"P",{});var HZe=s(ck);t9r=r(HZe,"This class cannot be instantiated directly using "),U5e=n(HZe,"CODE",{});var _Qt=s(U5e);a9r=r(_Qt,"__init__()"),_Qt.forEach(t),n9r=r(HZe," (throws an error)."),HZe.forEach(t),s9r=i(ei),Xt=n(ei,"DIV",{class:!0});var t8=s(Xt);T(mk.$$.fragment,t8),l9r=i(t8),H5e=n(t8,"P",{});var bQt=s(H5e);i9r=r(bQt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bQt.forEach(t),d9r=i(t8),Xc=n(t8,"P",{});var gle=s(Xc);c9r=r(gle,`Note:
Loading a model from its configuration file does `),J5e=n(gle,"STRONG",{});var vQt=s(J5e);m9r=r(vQt,"not"),vQt.forEach(t),f9r=r(gle,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(gle,"A",{href:!0});var FQt=s(yZ);g9r=r(FQt,"from_pretrained()"),FQt.forEach(t),h9r=r(gle," to load the model weights."),gle.forEach(t),u9r=i(t8),T(Q3.$$.fragment,t8),t8.forEach(t),p9r=i(ei),Nr=n(ei,"DIV",{class:!0});var oi=s(Nr);T(fk.$$.fragment,oi),_9r=i(oi),Y5e=n(oi,"P",{});var TQt=s(Y5e);b9r=r(TQt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TQt.forEach(t),v9r=i(oi),wn=n(oi,"P",{});var a8=s(wn);F9r=r(a8,"The model class to instantiate is selected based on the "),K5e=n(a8,"CODE",{});var MQt=s(K5e);T9r=r(MQt,"model_type"),MQt.forEach(t),M9r=r(a8,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(a8,"CODE",{});var EQt=s(Z5e);E9r=r(EQt,"pretrained_model_name_or_path"),EQt.forEach(t),C9r=r(a8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=n(a8,"CODE",{});var CQt=s(e0e);w9r=r(CQt,"pretrained_model_name_or_path"),CQt.forEach(t),A9r=r(a8,":"),a8.forEach(t),y9r=i(oi),se=n(oi,"UL",{});var le=s(se);W3=n(le,"LI",{});var dze=s(W3);o0e=n(dze,"STRONG",{});var wQt=s(o0e);L9r=r(wQt,"albert"),wQt.forEach(t),x9r=r(dze," \u2014 "),LZ=n(dze,"A",{href:!0});var AQt=s(LZ);$9r=r(AQt,"TFAlbertForPreTraining"),AQt.forEach(t),k9r=r(dze," (ALBERT model)"),dze.forEach(t),S9r=i(le),U3=n(le,"LI",{});var cze=s(U3);r0e=n(cze,"STRONG",{});var yQt=s(r0e);R9r=r(yQt,"bart"),yQt.forEach(t),P9r=r(cze," \u2014 "),xZ=n(cze,"A",{href:!0});var LQt=s(xZ);B9r=r(LQt,"TFBartForConditionalGeneration"),LQt.forEach(t),I9r=r(cze," (BART model)"),cze.forEach(t),N9r=i(le),H3=n(le,"LI",{});var mze=s(H3);t0e=n(mze,"STRONG",{});var xQt=s(t0e);q9r=r(xQt,"bert"),xQt.forEach(t),j9r=r(mze," \u2014 "),$Z=n(mze,"A",{href:!0});var $Qt=s($Z);D9r=r($Qt,"TFBertForPreTraining"),$Qt.forEach(t),G9r=r(mze," (BERT model)"),mze.forEach(t),O9r=i(le),J3=n(le,"LI",{});var fze=s(J3);a0e=n(fze,"STRONG",{});var kQt=s(a0e);V9r=r(kQt,"camembert"),kQt.forEach(t),X9r=r(fze," \u2014 "),kZ=n(fze,"A",{href:!0});var SQt=s(kZ);z9r=r(SQt,"TFCamembertForMaskedLM"),SQt.forEach(t),Q9r=r(fze," (CamemBERT model)"),fze.forEach(t),W9r=i(le),Y3=n(le,"LI",{});var gze=s(Y3);n0e=n(gze,"STRONG",{});var RQt=s(n0e);U9r=r(RQt,"ctrl"),RQt.forEach(t),H9r=r(gze," \u2014 "),SZ=n(gze,"A",{href:!0});var PQt=s(SZ);J9r=r(PQt,"TFCTRLLMHeadModel"),PQt.forEach(t),Y9r=r(gze," (CTRL model)"),gze.forEach(t),K9r=i(le),K3=n(le,"LI",{});var hze=s(K3);s0e=n(hze,"STRONG",{});var BQt=s(s0e);Z9r=r(BQt,"distilbert"),BQt.forEach(t),exr=r(hze," \u2014 "),RZ=n(hze,"A",{href:!0});var IQt=s(RZ);oxr=r(IQt,"TFDistilBertForMaskedLM"),IQt.forEach(t),rxr=r(hze," (DistilBERT model)"),hze.forEach(t),txr=i(le),Z3=n(le,"LI",{});var uze=s(Z3);l0e=n(uze,"STRONG",{});var NQt=s(l0e);axr=r(NQt,"electra"),NQt.forEach(t),nxr=r(uze," \u2014 "),PZ=n(uze,"A",{href:!0});var qQt=s(PZ);sxr=r(qQt,"TFElectraForPreTraining"),qQt.forEach(t),lxr=r(uze," (ELECTRA model)"),uze.forEach(t),ixr=i(le),e5=n(le,"LI",{});var pze=s(e5);i0e=n(pze,"STRONG",{});var jQt=s(i0e);dxr=r(jQt,"flaubert"),jQt.forEach(t),cxr=r(pze," \u2014 "),BZ=n(pze,"A",{href:!0});var DQt=s(BZ);mxr=r(DQt,"TFFlaubertWithLMHeadModel"),DQt.forEach(t),fxr=r(pze," (FlauBERT model)"),pze.forEach(t),gxr=i(le),o5=n(le,"LI",{});var _ze=s(o5);d0e=n(_ze,"STRONG",{});var GQt=s(d0e);hxr=r(GQt,"funnel"),GQt.forEach(t),uxr=r(_ze," \u2014 "),IZ=n(_ze,"A",{href:!0});var OQt=s(IZ);pxr=r(OQt,"TFFunnelForPreTraining"),OQt.forEach(t),_xr=r(_ze," (Funnel Transformer model)"),_ze.forEach(t),bxr=i(le),r5=n(le,"LI",{});var bze=s(r5);c0e=n(bze,"STRONG",{});var VQt=s(c0e);vxr=r(VQt,"gpt2"),VQt.forEach(t),Fxr=r(bze," \u2014 "),NZ=n(bze,"A",{href:!0});var XQt=s(NZ);Txr=r(XQt,"TFGPT2LMHeadModel"),XQt.forEach(t),Mxr=r(bze," (OpenAI GPT-2 model)"),bze.forEach(t),Exr=i(le),t5=n(le,"LI",{});var vze=s(t5);m0e=n(vze,"STRONG",{});var zQt=s(m0e);Cxr=r(zQt,"layoutlm"),zQt.forEach(t),wxr=r(vze," \u2014 "),qZ=n(vze,"A",{href:!0});var QQt=s(qZ);Axr=r(QQt,"TFLayoutLMForMaskedLM"),QQt.forEach(t),yxr=r(vze," (LayoutLM model)"),vze.forEach(t),Lxr=i(le),a5=n(le,"LI",{});var Fze=s(a5);f0e=n(Fze,"STRONG",{});var WQt=s(f0e);xxr=r(WQt,"lxmert"),WQt.forEach(t),$xr=r(Fze," \u2014 "),jZ=n(Fze,"A",{href:!0});var UQt=s(jZ);kxr=r(UQt,"TFLxmertForPreTraining"),UQt.forEach(t),Sxr=r(Fze," (LXMERT model)"),Fze.forEach(t),Rxr=i(le),n5=n(le,"LI",{});var Tze=s(n5);g0e=n(Tze,"STRONG",{});var HQt=s(g0e);Pxr=r(HQt,"mobilebert"),HQt.forEach(t),Bxr=r(Tze," \u2014 "),DZ=n(Tze,"A",{href:!0});var JQt=s(DZ);Ixr=r(JQt,"TFMobileBertForPreTraining"),JQt.forEach(t),Nxr=r(Tze," (MobileBERT model)"),Tze.forEach(t),qxr=i(le),s5=n(le,"LI",{});var Mze=s(s5);h0e=n(Mze,"STRONG",{});var YQt=s(h0e);jxr=r(YQt,"mpnet"),YQt.forEach(t),Dxr=r(Mze," \u2014 "),GZ=n(Mze,"A",{href:!0});var KQt=s(GZ);Gxr=r(KQt,"TFMPNetForMaskedLM"),KQt.forEach(t),Oxr=r(Mze," (MPNet model)"),Mze.forEach(t),Vxr=i(le),l5=n(le,"LI",{});var Eze=s(l5);u0e=n(Eze,"STRONG",{});var ZQt=s(u0e);Xxr=r(ZQt,"openai-gpt"),ZQt.forEach(t),zxr=r(Eze," \u2014 "),OZ=n(Eze,"A",{href:!0});var eWt=s(OZ);Qxr=r(eWt,"TFOpenAIGPTLMHeadModel"),eWt.forEach(t),Wxr=r(Eze," (OpenAI GPT model)"),Eze.forEach(t),Uxr=i(le),i5=n(le,"LI",{});var Cze=s(i5);p0e=n(Cze,"STRONG",{});var oWt=s(p0e);Hxr=r(oWt,"roberta"),oWt.forEach(t),Jxr=r(Cze," \u2014 "),VZ=n(Cze,"A",{href:!0});var rWt=s(VZ);Yxr=r(rWt,"TFRobertaForMaskedLM"),rWt.forEach(t),Kxr=r(Cze," (RoBERTa model)"),Cze.forEach(t),Zxr=i(le),d5=n(le,"LI",{});var wze=s(d5);_0e=n(wze,"STRONG",{});var tWt=s(_0e);e$r=r(tWt,"t5"),tWt.forEach(t),o$r=r(wze," \u2014 "),XZ=n(wze,"A",{href:!0});var aWt=s(XZ);r$r=r(aWt,"TFT5ForConditionalGeneration"),aWt.forEach(t),t$r=r(wze," (T5 model)"),wze.forEach(t),a$r=i(le),c5=n(le,"LI",{});var Aze=s(c5);b0e=n(Aze,"STRONG",{});var nWt=s(b0e);n$r=r(nWt,"tapas"),nWt.forEach(t),s$r=r(Aze," \u2014 "),zZ=n(Aze,"A",{href:!0});var sWt=s(zZ);l$r=r(sWt,"TFTapasForMaskedLM"),sWt.forEach(t),i$r=r(Aze," (TAPAS model)"),Aze.forEach(t),d$r=i(le),m5=n(le,"LI",{});var yze=s(m5);v0e=n(yze,"STRONG",{});var lWt=s(v0e);c$r=r(lWt,"transfo-xl"),lWt.forEach(t),m$r=r(yze," \u2014 "),QZ=n(yze,"A",{href:!0});var iWt=s(QZ);f$r=r(iWt,"TFTransfoXLLMHeadModel"),iWt.forEach(t),g$r=r(yze," (Transformer-XL model)"),yze.forEach(t),h$r=i(le),f5=n(le,"LI",{});var Lze=s(f5);F0e=n(Lze,"STRONG",{});var dWt=s(F0e);u$r=r(dWt,"vit_mae"),dWt.forEach(t),p$r=r(Lze," \u2014 "),WZ=n(Lze,"A",{href:!0});var cWt=s(WZ);_$r=r(cWt,"TFViTMAEForPreTraining"),cWt.forEach(t),b$r=r(Lze," (ViTMAE model)"),Lze.forEach(t),v$r=i(le),g5=n(le,"LI",{});var xze=s(g5);T0e=n(xze,"STRONG",{});var mWt=s(T0e);F$r=r(mWt,"xlm"),mWt.forEach(t),T$r=r(xze," \u2014 "),UZ=n(xze,"A",{href:!0});var fWt=s(UZ);M$r=r(fWt,"TFXLMWithLMHeadModel"),fWt.forEach(t),E$r=r(xze," (XLM model)"),xze.forEach(t),C$r=i(le),h5=n(le,"LI",{});var $ze=s(h5);M0e=n($ze,"STRONG",{});var gWt=s(M0e);w$r=r(gWt,"xlm-roberta"),gWt.forEach(t),A$r=r($ze," \u2014 "),HZ=n($ze,"A",{href:!0});var hWt=s(HZ);y$r=r(hWt,"TFXLMRobertaForMaskedLM"),hWt.forEach(t),L$r=r($ze," (XLM-RoBERTa model)"),$ze.forEach(t),x$r=i(le),u5=n(le,"LI",{});var kze=s(u5);E0e=n(kze,"STRONG",{});var uWt=s(E0e);$$r=r(uWt,"xlnet"),uWt.forEach(t),k$r=r(kze," \u2014 "),JZ=n(kze,"A",{href:!0});var pWt=s(JZ);S$r=r(pWt,"TFXLNetLMHeadModel"),pWt.forEach(t),R$r=r(kze," (XLNet model)"),kze.forEach(t),le.forEach(t),P$r=i(oi),T(p5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),PYe=i(m),zc=n(m,"H2",{class:!0});var JZe=s(zc);_5=n(JZe,"A",{id:!0,class:!0,href:!0});var _Wt=s(_5);C0e=n(_Wt,"SPAN",{});var bWt=s(C0e);T(gk.$$.fragment,bWt),bWt.forEach(t),_Wt.forEach(t),B$r=i(JZe),w0e=n(JZe,"SPAN",{});var vWt=s(w0e);I$r=r(vWt,"TFAutoModelForCausalLM"),vWt.forEach(t),JZe.forEach(t),BYe=i(m),ir=n(m,"DIV",{class:!0});var ri=s(ir);T(hk.$$.fragment,ri),N$r=i(ri),Qc=n(ri,"P",{});var hle=s(Qc);q$r=r(hle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YZ=n(hle,"A",{href:!0});var FWt=s(YZ);j$r=r(FWt,"from_pretrained()"),FWt.forEach(t),D$r=r(hle," class method or the "),KZ=n(hle,"A",{href:!0});var TWt=s(KZ);G$r=r(TWt,"from_config()"),TWt.forEach(t),O$r=r(hle,` class
method.`),hle.forEach(t),V$r=i(ri),uk=n(ri,"P",{});var YZe=s(uk);X$r=r(YZe,"This class cannot be instantiated directly using "),A0e=n(YZe,"CODE",{});var MWt=s(A0e);z$r=r(MWt,"__init__()"),MWt.forEach(t),Q$r=r(YZe," (throws an error)."),YZe.forEach(t),W$r=i(ri),zt=n(ri,"DIV",{class:!0});var n8=s(zt);T(pk.$$.fragment,n8),U$r=i(n8),y0e=n(n8,"P",{});var EWt=s(y0e);H$r=r(EWt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EWt.forEach(t),J$r=i(n8),Wc=n(n8,"P",{});var ule=s(Wc);Y$r=r(ule,`Note:
Loading a model from its configuration file does `),L0e=n(ule,"STRONG",{});var CWt=s(L0e);K$r=r(CWt,"not"),CWt.forEach(t),Z$r=r(ule,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZZ=n(ule,"A",{href:!0});var wWt=s(ZZ);ekr=r(wWt,"from_pretrained()"),wWt.forEach(t),okr=r(ule," to load the model weights."),ule.forEach(t),rkr=i(n8),T(b5.$$.fragment,n8),n8.forEach(t),tkr=i(ri),qr=n(ri,"DIV",{class:!0});var ti=s(qr);T(_k.$$.fragment,ti),akr=i(ti),x0e=n(ti,"P",{});var AWt=s(x0e);nkr=r(AWt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AWt.forEach(t),skr=i(ti),An=n(ti,"P",{});var s8=s(An);lkr=r(s8,"The model class to instantiate is selected based on the "),$0e=n(s8,"CODE",{});var yWt=s($0e);ikr=r(yWt,"model_type"),yWt.forEach(t),dkr=r(s8,` property of the config object (either
passed as an argument or loaded from `),k0e=n(s8,"CODE",{});var LWt=s(k0e);ckr=r(LWt,"pretrained_model_name_or_path"),LWt.forEach(t),mkr=r(s8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S0e=n(s8,"CODE",{});var xWt=s(S0e);fkr=r(xWt,"pretrained_model_name_or_path"),xWt.forEach(t),gkr=r(s8,":"),s8.forEach(t),hkr=i(ti),Me=n(ti,"UL",{});var Ce=s(Me);v5=n(Ce,"LI",{});var Sze=s(v5);R0e=n(Sze,"STRONG",{});var $Wt=s(R0e);ukr=r($Wt,"bert"),$Wt.forEach(t),pkr=r(Sze," \u2014 "),eee=n(Sze,"A",{href:!0});var kWt=s(eee);_kr=r(kWt,"TFBertLMHeadModel"),kWt.forEach(t),bkr=r(Sze," (BERT model)"),Sze.forEach(t),vkr=i(Ce),F5=n(Ce,"LI",{});var Rze=s(F5);P0e=n(Rze,"STRONG",{});var SWt=s(P0e);Fkr=r(SWt,"camembert"),SWt.forEach(t),Tkr=r(Rze," \u2014 "),oee=n(Rze,"A",{href:!0});var RWt=s(oee);Mkr=r(RWt,"TFCamembertForCausalLM"),RWt.forEach(t),Ekr=r(Rze," (CamemBERT model)"),Rze.forEach(t),Ckr=i(Ce),T5=n(Ce,"LI",{});var Pze=s(T5);B0e=n(Pze,"STRONG",{});var PWt=s(B0e);wkr=r(PWt,"ctrl"),PWt.forEach(t),Akr=r(Pze," \u2014 "),ree=n(Pze,"A",{href:!0});var BWt=s(ree);ykr=r(BWt,"TFCTRLLMHeadModel"),BWt.forEach(t),Lkr=r(Pze," (CTRL model)"),Pze.forEach(t),xkr=i(Ce),M5=n(Ce,"LI",{});var Bze=s(M5);I0e=n(Bze,"STRONG",{});var IWt=s(I0e);$kr=r(IWt,"gpt2"),IWt.forEach(t),kkr=r(Bze," \u2014 "),tee=n(Bze,"A",{href:!0});var NWt=s(tee);Skr=r(NWt,"TFGPT2LMHeadModel"),NWt.forEach(t),Rkr=r(Bze," (OpenAI GPT-2 model)"),Bze.forEach(t),Pkr=i(Ce),E5=n(Ce,"LI",{});var Ize=s(E5);N0e=n(Ize,"STRONG",{});var qWt=s(N0e);Bkr=r(qWt,"gptj"),qWt.forEach(t),Ikr=r(Ize," \u2014 "),aee=n(Ize,"A",{href:!0});var jWt=s(aee);Nkr=r(jWt,"TFGPTJForCausalLM"),jWt.forEach(t),qkr=r(Ize," (GPT-J model)"),Ize.forEach(t),jkr=i(Ce),C5=n(Ce,"LI",{});var Nze=s(C5);q0e=n(Nze,"STRONG",{});var DWt=s(q0e);Dkr=r(DWt,"openai-gpt"),DWt.forEach(t),Gkr=r(Nze," \u2014 "),nee=n(Nze,"A",{href:!0});var GWt=s(nee);Okr=r(GWt,"TFOpenAIGPTLMHeadModel"),GWt.forEach(t),Vkr=r(Nze," (OpenAI GPT model)"),Nze.forEach(t),Xkr=i(Ce),w5=n(Ce,"LI",{});var qze=s(w5);j0e=n(qze,"STRONG",{});var OWt=s(j0e);zkr=r(OWt,"opt"),OWt.forEach(t),Qkr=r(qze," \u2014 "),see=n(qze,"A",{href:!0});var VWt=s(see);Wkr=r(VWt,"TFOPTForCausalLM"),VWt.forEach(t),Ukr=r(qze," (OPT model)"),qze.forEach(t),Hkr=i(Ce),A5=n(Ce,"LI",{});var jze=s(A5);D0e=n(jze,"STRONG",{});var XWt=s(D0e);Jkr=r(XWt,"rembert"),XWt.forEach(t),Ykr=r(jze," \u2014 "),lee=n(jze,"A",{href:!0});var zWt=s(lee);Kkr=r(zWt,"TFRemBertForCausalLM"),zWt.forEach(t),Zkr=r(jze," (RemBERT model)"),jze.forEach(t),eSr=i(Ce),y5=n(Ce,"LI",{});var Dze=s(y5);G0e=n(Dze,"STRONG",{});var QWt=s(G0e);oSr=r(QWt,"roberta"),QWt.forEach(t),rSr=r(Dze," \u2014 "),iee=n(Dze,"A",{href:!0});var WWt=s(iee);tSr=r(WWt,"TFRobertaForCausalLM"),WWt.forEach(t),aSr=r(Dze," (RoBERTa model)"),Dze.forEach(t),nSr=i(Ce),L5=n(Ce,"LI",{});var Gze=s(L5);O0e=n(Gze,"STRONG",{});var UWt=s(O0e);sSr=r(UWt,"roformer"),UWt.forEach(t),lSr=r(Gze," \u2014 "),dee=n(Gze,"A",{href:!0});var HWt=s(dee);iSr=r(HWt,"TFRoFormerForCausalLM"),HWt.forEach(t),dSr=r(Gze," (RoFormer model)"),Gze.forEach(t),cSr=i(Ce),x5=n(Ce,"LI",{});var Oze=s(x5);V0e=n(Oze,"STRONG",{});var JWt=s(V0e);mSr=r(JWt,"transfo-xl"),JWt.forEach(t),fSr=r(Oze," \u2014 "),cee=n(Oze,"A",{href:!0});var YWt=s(cee);gSr=r(YWt,"TFTransfoXLLMHeadModel"),YWt.forEach(t),hSr=r(Oze," (Transformer-XL model)"),Oze.forEach(t),uSr=i(Ce),$5=n(Ce,"LI",{});var Vze=s($5);X0e=n(Vze,"STRONG",{});var KWt=s(X0e);pSr=r(KWt,"xglm"),KWt.forEach(t),_Sr=r(Vze," \u2014 "),mee=n(Vze,"A",{href:!0});var ZWt=s(mee);bSr=r(ZWt,"TFXGLMForCausalLM"),ZWt.forEach(t),vSr=r(Vze," (XGLM model)"),Vze.forEach(t),FSr=i(Ce),k5=n(Ce,"LI",{});var Xze=s(k5);z0e=n(Xze,"STRONG",{});var eUt=s(z0e);TSr=r(eUt,"xlm"),eUt.forEach(t),MSr=r(Xze," \u2014 "),fee=n(Xze,"A",{href:!0});var oUt=s(fee);ESr=r(oUt,"TFXLMWithLMHeadModel"),oUt.forEach(t),CSr=r(Xze," (XLM model)"),Xze.forEach(t),wSr=i(Ce),S5=n(Ce,"LI",{});var zze=s(S5);Q0e=n(zze,"STRONG",{});var rUt=s(Q0e);ASr=r(rUt,"xlnet"),rUt.forEach(t),ySr=r(zze," \u2014 "),gee=n(zze,"A",{href:!0});var tUt=s(gee);LSr=r(tUt,"TFXLNetLMHeadModel"),tUt.forEach(t),xSr=r(zze," (XLNet model)"),zze.forEach(t),Ce.forEach(t),$Sr=i(ti),T(R5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),IYe=i(m),Uc=n(m,"H2",{class:!0});var KZe=s(Uc);P5=n(KZe,"A",{id:!0,class:!0,href:!0});var aUt=s(P5);W0e=n(aUt,"SPAN",{});var nUt=s(W0e);T(bk.$$.fragment,nUt),nUt.forEach(t),aUt.forEach(t),kSr=i(KZe),U0e=n(KZe,"SPAN",{});var sUt=s(U0e);SSr=r(sUt,"TFAutoModelForImageClassification"),sUt.forEach(t),KZe.forEach(t),NYe=i(m),dr=n(m,"DIV",{class:!0});var ai=s(dr);T(vk.$$.fragment,ai),RSr=i(ai),Hc=n(ai,"P",{});var ple=s(Hc);PSr=r(ple,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hee=n(ple,"A",{href:!0});var lUt=s(hee);BSr=r(lUt,"from_pretrained()"),lUt.forEach(t),ISr=r(ple," class method or the "),uee=n(ple,"A",{href:!0});var iUt=s(uee);NSr=r(iUt,"from_config()"),iUt.forEach(t),qSr=r(ple,` class
method.`),ple.forEach(t),jSr=i(ai),Fk=n(ai,"P",{});var ZZe=s(Fk);DSr=r(ZZe,"This class cannot be instantiated directly using "),H0e=n(ZZe,"CODE",{});var dUt=s(H0e);GSr=r(dUt,"__init__()"),dUt.forEach(t),OSr=r(ZZe," (throws an error)."),ZZe.forEach(t),VSr=i(ai),Qt=n(ai,"DIV",{class:!0});var l8=s(Qt);T(Tk.$$.fragment,l8),XSr=i(l8),J0e=n(l8,"P",{});var cUt=s(J0e);zSr=r(cUt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cUt.forEach(t),QSr=i(l8),Jc=n(l8,"P",{});var _le=s(Jc);WSr=r(_le,`Note:
Loading a model from its configuration file does `),Y0e=n(_le,"STRONG",{});var mUt=s(Y0e);USr=r(mUt,"not"),mUt.forEach(t),HSr=r(_le,` load the model weights. It only affects the
model\u2019s configuration. Use `),pee=n(_le,"A",{href:!0});var fUt=s(pee);JSr=r(fUt,"from_pretrained()"),fUt.forEach(t),YSr=r(_le," to load the model weights."),_le.forEach(t),KSr=i(l8),T(B5.$$.fragment,l8),l8.forEach(t),ZSr=i(ai),jr=n(ai,"DIV",{class:!0});var ni=s(jr);T(Mk.$$.fragment,ni),eRr=i(ni),K0e=n(ni,"P",{});var gUt=s(K0e);oRr=r(gUt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gUt.forEach(t),rRr=i(ni),yn=n(ni,"P",{});var i8=s(yn);tRr=r(i8,"The model class to instantiate is selected based on the "),Z0e=n(i8,"CODE",{});var hUt=s(Z0e);aRr=r(hUt,"model_type"),hUt.forEach(t),nRr=r(i8,` property of the config object (either
passed as an argument or loaded from `),ewe=n(i8,"CODE",{});var uUt=s(ewe);sRr=r(uUt,"pretrained_model_name_or_path"),uUt.forEach(t),lRr=r(i8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),owe=n(i8,"CODE",{});var pUt=s(owe);iRr=r(pUt,"pretrained_model_name_or_path"),pUt.forEach(t),dRr=r(i8,":"),i8.forEach(t),cRr=i(ni),Be=n(ni,"UL",{});var We=s(Be);I5=n(We,"LI",{});var Qze=s(I5);rwe=n(Qze,"STRONG",{});var _Ut=s(rwe);mRr=r(_Ut,"convnext"),_Ut.forEach(t),fRr=r(Qze," \u2014 "),_ee=n(Qze,"A",{href:!0});var bUt=s(_ee);gRr=r(bUt,"TFConvNextForImageClassification"),bUt.forEach(t),hRr=r(Qze," (ConvNeXT model)"),Qze.forEach(t),uRr=i(We),N5=n(We,"LI",{});var Wze=s(N5);twe=n(Wze,"STRONG",{});var vUt=s(twe);pRr=r(vUt,"data2vec-vision"),vUt.forEach(t),_Rr=r(Wze," \u2014 "),bee=n(Wze,"A",{href:!0});var FUt=s(bee);bRr=r(FUt,"TFData2VecVisionForImageClassification"),FUt.forEach(t),vRr=r(Wze," (Data2VecVision model)"),Wze.forEach(t),FRr=i(We),bl=n(We,"LI",{});var nB=s(bl);awe=n(nB,"STRONG",{});var TUt=s(awe);TRr=r(TUt,"deit"),TUt.forEach(t),MRr=r(nB," \u2014 "),vee=n(nB,"A",{href:!0});var MUt=s(vee);ERr=r(MUt,"TFDeiTForImageClassification"),MUt.forEach(t),CRr=r(nB," or "),Fee=n(nB,"A",{href:!0});var EUt=s(Fee);wRr=r(EUt,"TFDeiTForImageClassificationWithTeacher"),EUt.forEach(t),ARr=r(nB," (DeiT model)"),nB.forEach(t),yRr=i(We),q5=n(We,"LI",{});var Uze=s(q5);nwe=n(Uze,"STRONG",{});var CUt=s(nwe);LRr=r(CUt,"mobilevit"),CUt.forEach(t),xRr=r(Uze," \u2014 "),Tee=n(Uze,"A",{href:!0});var wUt=s(Tee);$Rr=r(wUt,"TFMobileViTForImageClassification"),wUt.forEach(t),kRr=r(Uze," (MobileViT model)"),Uze.forEach(t),SRr=i(We),j5=n(We,"LI",{});var Hze=s(j5);swe=n(Hze,"STRONG",{});var AUt=s(swe);RRr=r(AUt,"regnet"),AUt.forEach(t),PRr=r(Hze," \u2014 "),Mee=n(Hze,"A",{href:!0});var yUt=s(Mee);BRr=r(yUt,"TFRegNetForImageClassification"),yUt.forEach(t),IRr=r(Hze," (RegNet model)"),Hze.forEach(t),NRr=i(We),D5=n(We,"LI",{});var Jze=s(D5);lwe=n(Jze,"STRONG",{});var LUt=s(lwe);qRr=r(LUt,"resnet"),LUt.forEach(t),jRr=r(Jze," \u2014 "),Eee=n(Jze,"A",{href:!0});var xUt=s(Eee);DRr=r(xUt,"TFResNetForImageClassification"),xUt.forEach(t),GRr=r(Jze," (ResNet model)"),Jze.forEach(t),ORr=i(We),G5=n(We,"LI",{});var Yze=s(G5);iwe=n(Yze,"STRONG",{});var $Ut=s(iwe);VRr=r($Ut,"segformer"),$Ut.forEach(t),XRr=r(Yze," \u2014 "),Cee=n(Yze,"A",{href:!0});var kUt=s(Cee);zRr=r(kUt,"TFSegformerForImageClassification"),kUt.forEach(t),QRr=r(Yze," (SegFormer model)"),Yze.forEach(t),WRr=i(We),O5=n(We,"LI",{});var Kze=s(O5);dwe=n(Kze,"STRONG",{});var SUt=s(dwe);URr=r(SUt,"swin"),SUt.forEach(t),HRr=r(Kze," \u2014 "),wee=n(Kze,"A",{href:!0});var RUt=s(wee);JRr=r(RUt,"TFSwinForImageClassification"),RUt.forEach(t),YRr=r(Kze," (Swin Transformer model)"),Kze.forEach(t),KRr=i(We),V5=n(We,"LI",{});var Zze=s(V5);cwe=n(Zze,"STRONG",{});var PUt=s(cwe);ZRr=r(PUt,"vit"),PUt.forEach(t),ePr=r(Zze," \u2014 "),Aee=n(Zze,"A",{href:!0});var BUt=s(Aee);oPr=r(BUt,"TFViTForImageClassification"),BUt.forEach(t),rPr=r(Zze," (ViT model)"),Zze.forEach(t),We.forEach(t),tPr=i(ni),T(X5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),qYe=i(m),Yc=n(m,"H2",{class:!0});var eeo=s(Yc);z5=n(eeo,"A",{id:!0,class:!0,href:!0});var IUt=s(z5);mwe=n(IUt,"SPAN",{});var NUt=s(mwe);T(Ek.$$.fragment,NUt),NUt.forEach(t),IUt.forEach(t),aPr=i(eeo),fwe=n(eeo,"SPAN",{});var qUt=s(fwe);nPr=r(qUt,"TFAutoModelForSemanticSegmentation"),qUt.forEach(t),eeo.forEach(t),jYe=i(m),cr=n(m,"DIV",{class:!0});var si=s(cr);T(Ck.$$.fragment,si),sPr=i(si),Kc=n(si,"P",{});var ble=s(Kc);lPr=r(ble,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yee=n(ble,"A",{href:!0});var jUt=s(yee);iPr=r(jUt,"from_pretrained()"),jUt.forEach(t),dPr=r(ble," class method or the "),Lee=n(ble,"A",{href:!0});var DUt=s(Lee);cPr=r(DUt,"from_config()"),DUt.forEach(t),mPr=r(ble,` class
method.`),ble.forEach(t),fPr=i(si),wk=n(si,"P",{});var oeo=s(wk);gPr=r(oeo,"This class cannot be instantiated directly using "),gwe=n(oeo,"CODE",{});var GUt=s(gwe);hPr=r(GUt,"__init__()"),GUt.forEach(t),uPr=r(oeo," (throws an error)."),oeo.forEach(t),pPr=i(si),Wt=n(si,"DIV",{class:!0});var d8=s(Wt);T(Ak.$$.fragment,d8),_Pr=i(d8),hwe=n(d8,"P",{});var OUt=s(hwe);bPr=r(OUt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),OUt.forEach(t),vPr=i(d8),Zc=n(d8,"P",{});var vle=s(Zc);FPr=r(vle,`Note:
Loading a model from its configuration file does `),uwe=n(vle,"STRONG",{});var VUt=s(uwe);TPr=r(VUt,"not"),VUt.forEach(t),MPr=r(vle,` load the model weights. It only affects the
model\u2019s configuration. Use `),xee=n(vle,"A",{href:!0});var XUt=s(xee);EPr=r(XUt,"from_pretrained()"),XUt.forEach(t),CPr=r(vle," to load the model weights."),vle.forEach(t),wPr=i(d8),T(Q5.$$.fragment,d8),d8.forEach(t),APr=i(si),Dr=n(si,"DIV",{class:!0});var li=s(Dr);T(yk.$$.fragment,li),yPr=i(li),pwe=n(li,"P",{});var zUt=s(pwe);LPr=r(zUt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zUt.forEach(t),xPr=i(li),Ln=n(li,"P",{});var c8=s(Ln);$Pr=r(c8,"The model class to instantiate is selected based on the "),_we=n(c8,"CODE",{});var QUt=s(_we);kPr=r(QUt,"model_type"),QUt.forEach(t),SPr=r(c8,` property of the config object (either
passed as an argument or loaded from `),bwe=n(c8,"CODE",{});var WUt=s(bwe);RPr=r(WUt,"pretrained_model_name_or_path"),WUt.forEach(t),PPr=r(c8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vwe=n(c8,"CODE",{});var UUt=s(vwe);BPr=r(UUt,"pretrained_model_name_or_path"),UUt.forEach(t),IPr=r(c8,":"),c8.forEach(t),NPr=i(li),em=n(li,"UL",{});var Fle=s(em);W5=n(Fle,"LI",{});var eQe=s(W5);Fwe=n(eQe,"STRONG",{});var HUt=s(Fwe);qPr=r(HUt,"data2vec-vision"),HUt.forEach(t),jPr=r(eQe," \u2014 "),$ee=n(eQe,"A",{href:!0});var JUt=s($ee);DPr=r(JUt,"TFData2VecVisionForSemanticSegmentation"),JUt.forEach(t),GPr=r(eQe," (Data2VecVision model)"),eQe.forEach(t),OPr=i(Fle),U5=n(Fle,"LI",{});var oQe=s(U5);Twe=n(oQe,"STRONG",{});var YUt=s(Twe);VPr=r(YUt,"mobilevit"),YUt.forEach(t),XPr=r(oQe," \u2014 "),kee=n(oQe,"A",{href:!0});var KUt=s(kee);zPr=r(KUt,"TFMobileViTForSemanticSegmentation"),KUt.forEach(t),QPr=r(oQe," (MobileViT model)"),oQe.forEach(t),WPr=i(Fle),H5=n(Fle,"LI",{});var rQe=s(H5);Mwe=n(rQe,"STRONG",{});var ZUt=s(Mwe);UPr=r(ZUt,"segformer"),ZUt.forEach(t),HPr=r(rQe," \u2014 "),See=n(rQe,"A",{href:!0});var eHt=s(See);JPr=r(eHt,"TFSegformerForSemanticSegmentation"),eHt.forEach(t),YPr=r(rQe," (SegFormer model)"),rQe.forEach(t),Fle.forEach(t),KPr=i(li),T(J5.$$.fragment,li),li.forEach(t),si.forEach(t),DYe=i(m),om=n(m,"H2",{class:!0});var reo=s(om);Y5=n(reo,"A",{id:!0,class:!0,href:!0});var oHt=s(Y5);Ewe=n(oHt,"SPAN",{});var rHt=s(Ewe);T(Lk.$$.fragment,rHt),rHt.forEach(t),oHt.forEach(t),ZPr=i(reo),Cwe=n(reo,"SPAN",{});var tHt=s(Cwe);eBr=r(tHt,"TFAutoModelForMaskedLM"),tHt.forEach(t),reo.forEach(t),GYe=i(m),mr=n(m,"DIV",{class:!0});var ii=s(mr);T(xk.$$.fragment,ii),oBr=i(ii),rm=n(ii,"P",{});var Tle=s(rm);rBr=r(Tle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Ree=n(Tle,"A",{href:!0});var aHt=s(Ree);tBr=r(aHt,"from_pretrained()"),aHt.forEach(t),aBr=r(Tle," class method or the "),Pee=n(Tle,"A",{href:!0});var nHt=s(Pee);nBr=r(nHt,"from_config()"),nHt.forEach(t),sBr=r(Tle,` class
method.`),Tle.forEach(t),lBr=i(ii),$k=n(ii,"P",{});var teo=s($k);iBr=r(teo,"This class cannot be instantiated directly using "),wwe=n(teo,"CODE",{});var sHt=s(wwe);dBr=r(sHt,"__init__()"),sHt.forEach(t),cBr=r(teo," (throws an error)."),teo.forEach(t),mBr=i(ii),Ut=n(ii,"DIV",{class:!0});var m8=s(Ut);T(kk.$$.fragment,m8),fBr=i(m8),Awe=n(m8,"P",{});var lHt=s(Awe);gBr=r(lHt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lHt.forEach(t),hBr=i(m8),tm=n(m8,"P",{});var Mle=s(tm);uBr=r(Mle,`Note:
Loading a model from its configuration file does `),ywe=n(Mle,"STRONG",{});var iHt=s(ywe);pBr=r(iHt,"not"),iHt.forEach(t),_Br=r(Mle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=n(Mle,"A",{href:!0});var dHt=s(Bee);bBr=r(dHt,"from_pretrained()"),dHt.forEach(t),vBr=r(Mle," to load the model weights."),Mle.forEach(t),FBr=i(m8),T(K5.$$.fragment,m8),m8.forEach(t),TBr=i(ii),Gr=n(ii,"DIV",{class:!0});var di=s(Gr);T(Sk.$$.fragment,di),MBr=i(di),Lwe=n(di,"P",{});var cHt=s(Lwe);EBr=r(cHt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cHt.forEach(t),CBr=i(di),xn=n(di,"P",{});var f8=s(xn);wBr=r(f8,"The model class to instantiate is selected based on the "),xwe=n(f8,"CODE",{});var mHt=s(xwe);ABr=r(mHt,"model_type"),mHt.forEach(t),yBr=r(f8,` property of the config object (either
passed as an argument or loaded from `),$we=n(f8,"CODE",{});var fHt=s($we);LBr=r(fHt,"pretrained_model_name_or_path"),fHt.forEach(t),xBr=r(f8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kwe=n(f8,"CODE",{});var gHt=s(kwe);$Br=r(gHt,"pretrained_model_name_or_path"),gHt.forEach(t),kBr=r(f8,":"),f8.forEach(t),SBr=i(di),fe=n(di,"UL",{});var _e=s(fe);Z5=n(_e,"LI",{});var tQe=s(Z5);Swe=n(tQe,"STRONG",{});var hHt=s(Swe);RBr=r(hHt,"albert"),hHt.forEach(t),PBr=r(tQe," \u2014 "),Iee=n(tQe,"A",{href:!0});var uHt=s(Iee);BBr=r(uHt,"TFAlbertForMaskedLM"),uHt.forEach(t),IBr=r(tQe," (ALBERT model)"),tQe.forEach(t),NBr=i(_e),e0=n(_e,"LI",{});var aQe=s(e0);Rwe=n(aQe,"STRONG",{});var pHt=s(Rwe);qBr=r(pHt,"bert"),pHt.forEach(t),jBr=r(aQe," \u2014 "),Nee=n(aQe,"A",{href:!0});var _Ht=s(Nee);DBr=r(_Ht,"TFBertForMaskedLM"),_Ht.forEach(t),GBr=r(aQe," (BERT model)"),aQe.forEach(t),OBr=i(_e),o0=n(_e,"LI",{});var nQe=s(o0);Pwe=n(nQe,"STRONG",{});var bHt=s(Pwe);VBr=r(bHt,"camembert"),bHt.forEach(t),XBr=r(nQe," \u2014 "),qee=n(nQe,"A",{href:!0});var vHt=s(qee);zBr=r(vHt,"TFCamembertForMaskedLM"),vHt.forEach(t),QBr=r(nQe," (CamemBERT model)"),nQe.forEach(t),WBr=i(_e),r0=n(_e,"LI",{});var sQe=s(r0);Bwe=n(sQe,"STRONG",{});var FHt=s(Bwe);UBr=r(FHt,"convbert"),FHt.forEach(t),HBr=r(sQe," \u2014 "),jee=n(sQe,"A",{href:!0});var THt=s(jee);JBr=r(THt,"TFConvBertForMaskedLM"),THt.forEach(t),YBr=r(sQe," (ConvBERT model)"),sQe.forEach(t),KBr=i(_e),t0=n(_e,"LI",{});var lQe=s(t0);Iwe=n(lQe,"STRONG",{});var MHt=s(Iwe);ZBr=r(MHt,"deberta"),MHt.forEach(t),eIr=r(lQe," \u2014 "),Dee=n(lQe,"A",{href:!0});var EHt=s(Dee);oIr=r(EHt,"TFDebertaForMaskedLM"),EHt.forEach(t),rIr=r(lQe," (DeBERTa model)"),lQe.forEach(t),tIr=i(_e),a0=n(_e,"LI",{});var iQe=s(a0);Nwe=n(iQe,"STRONG",{});var CHt=s(Nwe);aIr=r(CHt,"deberta-v2"),CHt.forEach(t),nIr=r(iQe," \u2014 "),Gee=n(iQe,"A",{href:!0});var wHt=s(Gee);sIr=r(wHt,"TFDebertaV2ForMaskedLM"),wHt.forEach(t),lIr=r(iQe," (DeBERTa-v2 model)"),iQe.forEach(t),iIr=i(_e),n0=n(_e,"LI",{});var dQe=s(n0);qwe=n(dQe,"STRONG",{});var AHt=s(qwe);dIr=r(AHt,"distilbert"),AHt.forEach(t),cIr=r(dQe," \u2014 "),Oee=n(dQe,"A",{href:!0});var yHt=s(Oee);mIr=r(yHt,"TFDistilBertForMaskedLM"),yHt.forEach(t),fIr=r(dQe," (DistilBERT model)"),dQe.forEach(t),gIr=i(_e),s0=n(_e,"LI",{});var cQe=s(s0);jwe=n(cQe,"STRONG",{});var LHt=s(jwe);hIr=r(LHt,"electra"),LHt.forEach(t),uIr=r(cQe," \u2014 "),Vee=n(cQe,"A",{href:!0});var xHt=s(Vee);pIr=r(xHt,"TFElectraForMaskedLM"),xHt.forEach(t),_Ir=r(cQe," (ELECTRA model)"),cQe.forEach(t),bIr=i(_e),l0=n(_e,"LI",{});var mQe=s(l0);Dwe=n(mQe,"STRONG",{});var $Ht=s(Dwe);vIr=r($Ht,"flaubert"),$Ht.forEach(t),FIr=r(mQe," \u2014 "),Xee=n(mQe,"A",{href:!0});var kHt=s(Xee);TIr=r(kHt,"TFFlaubertWithLMHeadModel"),kHt.forEach(t),MIr=r(mQe," (FlauBERT model)"),mQe.forEach(t),EIr=i(_e),i0=n(_e,"LI",{});var fQe=s(i0);Gwe=n(fQe,"STRONG",{});var SHt=s(Gwe);CIr=r(SHt,"funnel"),SHt.forEach(t),wIr=r(fQe," \u2014 "),zee=n(fQe,"A",{href:!0});var RHt=s(zee);AIr=r(RHt,"TFFunnelForMaskedLM"),RHt.forEach(t),yIr=r(fQe," (Funnel Transformer model)"),fQe.forEach(t),LIr=i(_e),d0=n(_e,"LI",{});var gQe=s(d0);Owe=n(gQe,"STRONG",{});var PHt=s(Owe);xIr=r(PHt,"layoutlm"),PHt.forEach(t),$Ir=r(gQe," \u2014 "),Qee=n(gQe,"A",{href:!0});var BHt=s(Qee);kIr=r(BHt,"TFLayoutLMForMaskedLM"),BHt.forEach(t),SIr=r(gQe," (LayoutLM model)"),gQe.forEach(t),RIr=i(_e),c0=n(_e,"LI",{});var hQe=s(c0);Vwe=n(hQe,"STRONG",{});var IHt=s(Vwe);PIr=r(IHt,"longformer"),IHt.forEach(t),BIr=r(hQe," \u2014 "),Wee=n(hQe,"A",{href:!0});var NHt=s(Wee);IIr=r(NHt,"TFLongformerForMaskedLM"),NHt.forEach(t),NIr=r(hQe," (Longformer model)"),hQe.forEach(t),qIr=i(_e),m0=n(_e,"LI",{});var uQe=s(m0);Xwe=n(uQe,"STRONG",{});var qHt=s(Xwe);jIr=r(qHt,"mobilebert"),qHt.forEach(t),DIr=r(uQe," \u2014 "),Uee=n(uQe,"A",{href:!0});var jHt=s(Uee);GIr=r(jHt,"TFMobileBertForMaskedLM"),jHt.forEach(t),OIr=r(uQe," (MobileBERT model)"),uQe.forEach(t),VIr=i(_e),f0=n(_e,"LI",{});var pQe=s(f0);zwe=n(pQe,"STRONG",{});var DHt=s(zwe);XIr=r(DHt,"mpnet"),DHt.forEach(t),zIr=r(pQe," \u2014 "),Hee=n(pQe,"A",{href:!0});var GHt=s(Hee);QIr=r(GHt,"TFMPNetForMaskedLM"),GHt.forEach(t),WIr=r(pQe," (MPNet model)"),pQe.forEach(t),UIr=i(_e),g0=n(_e,"LI",{});var _Qe=s(g0);Qwe=n(_Qe,"STRONG",{});var OHt=s(Qwe);HIr=r(OHt,"rembert"),OHt.forEach(t),JIr=r(_Qe," \u2014 "),Jee=n(_Qe,"A",{href:!0});var VHt=s(Jee);YIr=r(VHt,"TFRemBertForMaskedLM"),VHt.forEach(t),KIr=r(_Qe," (RemBERT model)"),_Qe.forEach(t),ZIr=i(_e),h0=n(_e,"LI",{});var bQe=s(h0);Wwe=n(bQe,"STRONG",{});var XHt=s(Wwe);eNr=r(XHt,"roberta"),XHt.forEach(t),oNr=r(bQe," \u2014 "),Yee=n(bQe,"A",{href:!0});var zHt=s(Yee);rNr=r(zHt,"TFRobertaForMaskedLM"),zHt.forEach(t),tNr=r(bQe," (RoBERTa model)"),bQe.forEach(t),aNr=i(_e),u0=n(_e,"LI",{});var vQe=s(u0);Uwe=n(vQe,"STRONG",{});var QHt=s(Uwe);nNr=r(QHt,"roformer"),QHt.forEach(t),sNr=r(vQe," \u2014 "),Kee=n(vQe,"A",{href:!0});var WHt=s(Kee);lNr=r(WHt,"TFRoFormerForMaskedLM"),WHt.forEach(t),iNr=r(vQe," (RoFormer model)"),vQe.forEach(t),dNr=i(_e),p0=n(_e,"LI",{});var FQe=s(p0);Hwe=n(FQe,"STRONG",{});var UHt=s(Hwe);cNr=r(UHt,"tapas"),UHt.forEach(t),mNr=r(FQe," \u2014 "),Zee=n(FQe,"A",{href:!0});var HHt=s(Zee);fNr=r(HHt,"TFTapasForMaskedLM"),HHt.forEach(t),gNr=r(FQe," (TAPAS model)"),FQe.forEach(t),hNr=i(_e),_0=n(_e,"LI",{});var TQe=s(_0);Jwe=n(TQe,"STRONG",{});var JHt=s(Jwe);uNr=r(JHt,"xlm"),JHt.forEach(t),pNr=r(TQe," \u2014 "),eoe=n(TQe,"A",{href:!0});var YHt=s(eoe);_Nr=r(YHt,"TFXLMWithLMHeadModel"),YHt.forEach(t),bNr=r(TQe," (XLM model)"),TQe.forEach(t),vNr=i(_e),b0=n(_e,"LI",{});var MQe=s(b0);Ywe=n(MQe,"STRONG",{});var KHt=s(Ywe);FNr=r(KHt,"xlm-roberta"),KHt.forEach(t),TNr=r(MQe," \u2014 "),ooe=n(MQe,"A",{href:!0});var ZHt=s(ooe);MNr=r(ZHt,"TFXLMRobertaForMaskedLM"),ZHt.forEach(t),ENr=r(MQe," (XLM-RoBERTa model)"),MQe.forEach(t),_e.forEach(t),CNr=i(di),T(v0.$$.fragment,di),di.forEach(t),ii.forEach(t),OYe=i(m),am=n(m,"H2",{class:!0});var aeo=s(am);F0=n(aeo,"A",{id:!0,class:!0,href:!0});var eJt=s(F0);Kwe=n(eJt,"SPAN",{});var oJt=s(Kwe);T(Rk.$$.fragment,oJt),oJt.forEach(t),eJt.forEach(t),wNr=i(aeo),Zwe=n(aeo,"SPAN",{});var rJt=s(Zwe);ANr=r(rJt,"TFAutoModelForSeq2SeqLM"),rJt.forEach(t),aeo.forEach(t),VYe=i(m),fr=n(m,"DIV",{class:!0});var ci=s(fr);T(Pk.$$.fragment,ci),yNr=i(ci),nm=n(ci,"P",{});var Ele=s(nm);LNr=r(Ele,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),roe=n(Ele,"A",{href:!0});var tJt=s(roe);xNr=r(tJt,"from_pretrained()"),tJt.forEach(t),$Nr=r(Ele," class method or the "),toe=n(Ele,"A",{href:!0});var aJt=s(toe);kNr=r(aJt,"from_config()"),aJt.forEach(t),SNr=r(Ele,` class
method.`),Ele.forEach(t),RNr=i(ci),Bk=n(ci,"P",{});var neo=s(Bk);PNr=r(neo,"This class cannot be instantiated directly using "),eAe=n(neo,"CODE",{});var nJt=s(eAe);BNr=r(nJt,"__init__()"),nJt.forEach(t),INr=r(neo," (throws an error)."),neo.forEach(t),NNr=i(ci),Ht=n(ci,"DIV",{class:!0});var g8=s(Ht);T(Ik.$$.fragment,g8),qNr=i(g8),oAe=n(g8,"P",{});var sJt=s(oAe);jNr=r(sJt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sJt.forEach(t),DNr=i(g8),sm=n(g8,"P",{});var Cle=s(sm);GNr=r(Cle,`Note:
Loading a model from its configuration file does `),rAe=n(Cle,"STRONG",{});var lJt=s(rAe);ONr=r(lJt,"not"),lJt.forEach(t),VNr=r(Cle,` load the model weights. It only affects the
model\u2019s configuration. Use `),aoe=n(Cle,"A",{href:!0});var iJt=s(aoe);XNr=r(iJt,"from_pretrained()"),iJt.forEach(t),zNr=r(Cle," to load the model weights."),Cle.forEach(t),QNr=i(g8),T(T0.$$.fragment,g8),g8.forEach(t),WNr=i(ci),Or=n(ci,"DIV",{class:!0});var mi=s(Or);T(Nk.$$.fragment,mi),UNr=i(mi),tAe=n(mi,"P",{});var dJt=s(tAe);HNr=r(dJt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dJt.forEach(t),JNr=i(mi),$n=n(mi,"P",{});var h8=s($n);YNr=r(h8,"The model class to instantiate is selected based on the "),aAe=n(h8,"CODE",{});var cJt=s(aAe);KNr=r(cJt,"model_type"),cJt.forEach(t),ZNr=r(h8,` property of the config object (either
passed as an argument or loaded from `),nAe=n(h8,"CODE",{});var mJt=s(nAe);eqr=r(mJt,"pretrained_model_name_or_path"),mJt.forEach(t),oqr=r(h8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sAe=n(h8,"CODE",{});var fJt=s(sAe);rqr=r(fJt,"pretrained_model_name_or_path"),fJt.forEach(t),tqr=r(h8,":"),h8.forEach(t),aqr=i(mi),Le=n(mi,"UL",{});var Ne=s(Le);M0=n(Ne,"LI",{});var EQe=s(M0);lAe=n(EQe,"STRONG",{});var gJt=s(lAe);nqr=r(gJt,"bart"),gJt.forEach(t),sqr=r(EQe," \u2014 "),noe=n(EQe,"A",{href:!0});var hJt=s(noe);lqr=r(hJt,"TFBartForConditionalGeneration"),hJt.forEach(t),iqr=r(EQe," (BART model)"),EQe.forEach(t),dqr=i(Ne),E0=n(Ne,"LI",{});var CQe=s(E0);iAe=n(CQe,"STRONG",{});var uJt=s(iAe);cqr=r(uJt,"blenderbot"),uJt.forEach(t),mqr=r(CQe," \u2014 "),soe=n(CQe,"A",{href:!0});var pJt=s(soe);fqr=r(pJt,"TFBlenderbotForConditionalGeneration"),pJt.forEach(t),gqr=r(CQe," (Blenderbot model)"),CQe.forEach(t),hqr=i(Ne),C0=n(Ne,"LI",{});var wQe=s(C0);dAe=n(wQe,"STRONG",{});var _Jt=s(dAe);uqr=r(_Jt,"blenderbot-small"),_Jt.forEach(t),pqr=r(wQe," \u2014 "),loe=n(wQe,"A",{href:!0});var bJt=s(loe);_qr=r(bJt,"TFBlenderbotSmallForConditionalGeneration"),bJt.forEach(t),bqr=r(wQe," (BlenderbotSmall model)"),wQe.forEach(t),vqr=i(Ne),w0=n(Ne,"LI",{});var AQe=s(w0);cAe=n(AQe,"STRONG",{});var vJt=s(cAe);Fqr=r(vJt,"encoder-decoder"),vJt.forEach(t),Tqr=r(AQe," \u2014 "),ioe=n(AQe,"A",{href:!0});var FJt=s(ioe);Mqr=r(FJt,"TFEncoderDecoderModel"),FJt.forEach(t),Eqr=r(AQe," (Encoder decoder model)"),AQe.forEach(t),Cqr=i(Ne),A0=n(Ne,"LI",{});var yQe=s(A0);mAe=n(yQe,"STRONG",{});var TJt=s(mAe);wqr=r(TJt,"led"),TJt.forEach(t),Aqr=r(yQe," \u2014 "),doe=n(yQe,"A",{href:!0});var MJt=s(doe);yqr=r(MJt,"TFLEDForConditionalGeneration"),MJt.forEach(t),Lqr=r(yQe," (LED model)"),yQe.forEach(t),xqr=i(Ne),y0=n(Ne,"LI",{});var LQe=s(y0);fAe=n(LQe,"STRONG",{});var EJt=s(fAe);$qr=r(EJt,"marian"),EJt.forEach(t),kqr=r(LQe," \u2014 "),coe=n(LQe,"A",{href:!0});var CJt=s(coe);Sqr=r(CJt,"TFMarianMTModel"),CJt.forEach(t),Rqr=r(LQe," (Marian model)"),LQe.forEach(t),Pqr=i(Ne),L0=n(Ne,"LI",{});var xQe=s(L0);gAe=n(xQe,"STRONG",{});var wJt=s(gAe);Bqr=r(wJt,"mbart"),wJt.forEach(t),Iqr=r(xQe," \u2014 "),moe=n(xQe,"A",{href:!0});var AJt=s(moe);Nqr=r(AJt,"TFMBartForConditionalGeneration"),AJt.forEach(t),qqr=r(xQe," (mBART model)"),xQe.forEach(t),jqr=i(Ne),x0=n(Ne,"LI",{});var $Qe=s(x0);hAe=n($Qe,"STRONG",{});var yJt=s(hAe);Dqr=r(yJt,"mt5"),yJt.forEach(t),Gqr=r($Qe," \u2014 "),foe=n($Qe,"A",{href:!0});var LJt=s(foe);Oqr=r(LJt,"TFMT5ForConditionalGeneration"),LJt.forEach(t),Vqr=r($Qe," (MT5 model)"),$Qe.forEach(t),Xqr=i(Ne),$0=n(Ne,"LI",{});var kQe=s($0);uAe=n(kQe,"STRONG",{});var xJt=s(uAe);zqr=r(xJt,"pegasus"),xJt.forEach(t),Qqr=r(kQe," \u2014 "),goe=n(kQe,"A",{href:!0});var $Jt=s(goe);Wqr=r($Jt,"TFPegasusForConditionalGeneration"),$Jt.forEach(t),Uqr=r(kQe," (Pegasus model)"),kQe.forEach(t),Hqr=i(Ne),k0=n(Ne,"LI",{});var SQe=s(k0);pAe=n(SQe,"STRONG",{});var kJt=s(pAe);Jqr=r(kJt,"t5"),kJt.forEach(t),Yqr=r(SQe," \u2014 "),hoe=n(SQe,"A",{href:!0});var SJt=s(hoe);Kqr=r(SJt,"TFT5ForConditionalGeneration"),SJt.forEach(t),Zqr=r(SQe," (T5 model)"),SQe.forEach(t),Ne.forEach(t),ejr=i(mi),T(S0.$$.fragment,mi),mi.forEach(t),ci.forEach(t),XYe=i(m),lm=n(m,"H2",{class:!0});var seo=s(lm);R0=n(seo,"A",{id:!0,class:!0,href:!0});var RJt=s(R0);_Ae=n(RJt,"SPAN",{});var PJt=s(_Ae);T(qk.$$.fragment,PJt),PJt.forEach(t),RJt.forEach(t),ojr=i(seo),bAe=n(seo,"SPAN",{});var BJt=s(bAe);rjr=r(BJt,"TFAutoModelForSequenceClassification"),BJt.forEach(t),seo.forEach(t),zYe=i(m),gr=n(m,"DIV",{class:!0});var fi=s(gr);T(jk.$$.fragment,fi),tjr=i(fi),im=n(fi,"P",{});var wle=s(im);ajr=r(wle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uoe=n(wle,"A",{href:!0});var IJt=s(uoe);njr=r(IJt,"from_pretrained()"),IJt.forEach(t),sjr=r(wle," class method or the "),poe=n(wle,"A",{href:!0});var NJt=s(poe);ljr=r(NJt,"from_config()"),NJt.forEach(t),ijr=r(wle,` class
method.`),wle.forEach(t),djr=i(fi),Dk=n(fi,"P",{});var leo=s(Dk);cjr=r(leo,"This class cannot be instantiated directly using "),vAe=n(leo,"CODE",{});var qJt=s(vAe);mjr=r(qJt,"__init__()"),qJt.forEach(t),fjr=r(leo," (throws an error)."),leo.forEach(t),gjr=i(fi),Jt=n(fi,"DIV",{class:!0});var u8=s(Jt);T(Gk.$$.fragment,u8),hjr=i(u8),FAe=n(u8,"P",{});var jJt=s(FAe);ujr=r(jJt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jJt.forEach(t),pjr=i(u8),dm=n(u8,"P",{});var Ale=s(dm);_jr=r(Ale,`Note:
Loading a model from its configuration file does `),TAe=n(Ale,"STRONG",{});var DJt=s(TAe);bjr=r(DJt,"not"),DJt.forEach(t),vjr=r(Ale,` load the model weights. It only affects the
model\u2019s configuration. Use `),_oe=n(Ale,"A",{href:!0});var GJt=s(_oe);Fjr=r(GJt,"from_pretrained()"),GJt.forEach(t),Tjr=r(Ale," to load the model weights."),Ale.forEach(t),Mjr=i(u8),T(P0.$$.fragment,u8),u8.forEach(t),Ejr=i(fi),Vr=n(fi,"DIV",{class:!0});var gi=s(Vr);T(Ok.$$.fragment,gi),Cjr=i(gi),MAe=n(gi,"P",{});var OJt=s(MAe);wjr=r(OJt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),OJt.forEach(t),Ajr=i(gi),kn=n(gi,"P",{});var p8=s(kn);yjr=r(p8,"The model class to instantiate is selected based on the "),EAe=n(p8,"CODE",{});var VJt=s(EAe);Ljr=r(VJt,"model_type"),VJt.forEach(t),xjr=r(p8,` property of the config object (either
passed as an argument or loaded from `),CAe=n(p8,"CODE",{});var XJt=s(CAe);$jr=r(XJt,"pretrained_model_name_or_path"),XJt.forEach(t),kjr=r(p8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wAe=n(p8,"CODE",{});var zJt=s(wAe);Sjr=r(zJt,"pretrained_model_name_or_path"),zJt.forEach(t),Rjr=r(p8,":"),p8.forEach(t),Pjr=i(gi),re=n(gi,"UL",{});var ae=s(re);B0=n(ae,"LI",{});var RQe=s(B0);AAe=n(RQe,"STRONG",{});var QJt=s(AAe);Bjr=r(QJt,"albert"),QJt.forEach(t),Ijr=r(RQe," \u2014 "),boe=n(RQe,"A",{href:!0});var WJt=s(boe);Njr=r(WJt,"TFAlbertForSequenceClassification"),WJt.forEach(t),qjr=r(RQe," (ALBERT model)"),RQe.forEach(t),jjr=i(ae),I0=n(ae,"LI",{});var PQe=s(I0);yAe=n(PQe,"STRONG",{});var UJt=s(yAe);Djr=r(UJt,"bert"),UJt.forEach(t),Gjr=r(PQe," \u2014 "),voe=n(PQe,"A",{href:!0});var HJt=s(voe);Ojr=r(HJt,"TFBertForSequenceClassification"),HJt.forEach(t),Vjr=r(PQe," (BERT model)"),PQe.forEach(t),Xjr=i(ae),N0=n(ae,"LI",{});var BQe=s(N0);LAe=n(BQe,"STRONG",{});var JJt=s(LAe);zjr=r(JJt,"camembert"),JJt.forEach(t),Qjr=r(BQe," \u2014 "),Foe=n(BQe,"A",{href:!0});var YJt=s(Foe);Wjr=r(YJt,"TFCamembertForSequenceClassification"),YJt.forEach(t),Ujr=r(BQe," (CamemBERT model)"),BQe.forEach(t),Hjr=i(ae),q0=n(ae,"LI",{});var IQe=s(q0);xAe=n(IQe,"STRONG",{});var KJt=s(xAe);Jjr=r(KJt,"convbert"),KJt.forEach(t),Yjr=r(IQe," \u2014 "),Toe=n(IQe,"A",{href:!0});var ZJt=s(Toe);Kjr=r(ZJt,"TFConvBertForSequenceClassification"),ZJt.forEach(t),Zjr=r(IQe," (ConvBERT model)"),IQe.forEach(t),eDr=i(ae),j0=n(ae,"LI",{});var NQe=s(j0);$Ae=n(NQe,"STRONG",{});var eYt=s($Ae);oDr=r(eYt,"ctrl"),eYt.forEach(t),rDr=r(NQe," \u2014 "),Moe=n(NQe,"A",{href:!0});var oYt=s(Moe);tDr=r(oYt,"TFCTRLForSequenceClassification"),oYt.forEach(t),aDr=r(NQe," (CTRL model)"),NQe.forEach(t),nDr=i(ae),D0=n(ae,"LI",{});var qQe=s(D0);kAe=n(qQe,"STRONG",{});var rYt=s(kAe);sDr=r(rYt,"deberta"),rYt.forEach(t),lDr=r(qQe," \u2014 "),Eoe=n(qQe,"A",{href:!0});var tYt=s(Eoe);iDr=r(tYt,"TFDebertaForSequenceClassification"),tYt.forEach(t),dDr=r(qQe," (DeBERTa model)"),qQe.forEach(t),cDr=i(ae),G0=n(ae,"LI",{});var jQe=s(G0);SAe=n(jQe,"STRONG",{});var aYt=s(SAe);mDr=r(aYt,"deberta-v2"),aYt.forEach(t),fDr=r(jQe," \u2014 "),Coe=n(jQe,"A",{href:!0});var nYt=s(Coe);gDr=r(nYt,"TFDebertaV2ForSequenceClassification"),nYt.forEach(t),hDr=r(jQe," (DeBERTa-v2 model)"),jQe.forEach(t),uDr=i(ae),O0=n(ae,"LI",{});var DQe=s(O0);RAe=n(DQe,"STRONG",{});var sYt=s(RAe);pDr=r(sYt,"distilbert"),sYt.forEach(t),_Dr=r(DQe," \u2014 "),woe=n(DQe,"A",{href:!0});var lYt=s(woe);bDr=r(lYt,"TFDistilBertForSequenceClassification"),lYt.forEach(t),vDr=r(DQe," (DistilBERT model)"),DQe.forEach(t),FDr=i(ae),V0=n(ae,"LI",{});var GQe=s(V0);PAe=n(GQe,"STRONG",{});var iYt=s(PAe);TDr=r(iYt,"electra"),iYt.forEach(t),MDr=r(GQe," \u2014 "),Aoe=n(GQe,"A",{href:!0});var dYt=s(Aoe);EDr=r(dYt,"TFElectraForSequenceClassification"),dYt.forEach(t),CDr=r(GQe," (ELECTRA model)"),GQe.forEach(t),wDr=i(ae),X0=n(ae,"LI",{});var OQe=s(X0);BAe=n(OQe,"STRONG",{});var cYt=s(BAe);ADr=r(cYt,"flaubert"),cYt.forEach(t),yDr=r(OQe," \u2014 "),yoe=n(OQe,"A",{href:!0});var mYt=s(yoe);LDr=r(mYt,"TFFlaubertForSequenceClassification"),mYt.forEach(t),xDr=r(OQe," (FlauBERT model)"),OQe.forEach(t),$Dr=i(ae),z0=n(ae,"LI",{});var VQe=s(z0);IAe=n(VQe,"STRONG",{});var fYt=s(IAe);kDr=r(fYt,"funnel"),fYt.forEach(t),SDr=r(VQe," \u2014 "),Loe=n(VQe,"A",{href:!0});var gYt=s(Loe);RDr=r(gYt,"TFFunnelForSequenceClassification"),gYt.forEach(t),PDr=r(VQe," (Funnel Transformer model)"),VQe.forEach(t),BDr=i(ae),Q0=n(ae,"LI",{});var XQe=s(Q0);NAe=n(XQe,"STRONG",{});var hYt=s(NAe);IDr=r(hYt,"gpt2"),hYt.forEach(t),NDr=r(XQe," \u2014 "),xoe=n(XQe,"A",{href:!0});var uYt=s(xoe);qDr=r(uYt,"TFGPT2ForSequenceClassification"),uYt.forEach(t),jDr=r(XQe," (OpenAI GPT-2 model)"),XQe.forEach(t),DDr=i(ae),W0=n(ae,"LI",{});var zQe=s(W0);qAe=n(zQe,"STRONG",{});var pYt=s(qAe);GDr=r(pYt,"gptj"),pYt.forEach(t),ODr=r(zQe," \u2014 "),$oe=n(zQe,"A",{href:!0});var _Yt=s($oe);VDr=r(_Yt,"TFGPTJForSequenceClassification"),_Yt.forEach(t),XDr=r(zQe," (GPT-J model)"),zQe.forEach(t),zDr=i(ae),U0=n(ae,"LI",{});var QQe=s(U0);jAe=n(QQe,"STRONG",{});var bYt=s(jAe);QDr=r(bYt,"layoutlm"),bYt.forEach(t),WDr=r(QQe," \u2014 "),koe=n(QQe,"A",{href:!0});var vYt=s(koe);UDr=r(vYt,"TFLayoutLMForSequenceClassification"),vYt.forEach(t),HDr=r(QQe," (LayoutLM model)"),QQe.forEach(t),JDr=i(ae),H0=n(ae,"LI",{});var WQe=s(H0);DAe=n(WQe,"STRONG",{});var FYt=s(DAe);YDr=r(FYt,"layoutlmv3"),FYt.forEach(t),KDr=r(WQe," \u2014 "),Soe=n(WQe,"A",{href:!0});var TYt=s(Soe);ZDr=r(TYt,"TFLayoutLMv3ForSequenceClassification"),TYt.forEach(t),eGr=r(WQe," (LayoutLMv3 model)"),WQe.forEach(t),oGr=i(ae),J0=n(ae,"LI",{});var UQe=s(J0);GAe=n(UQe,"STRONG",{});var MYt=s(GAe);rGr=r(MYt,"longformer"),MYt.forEach(t),tGr=r(UQe," \u2014 "),Roe=n(UQe,"A",{href:!0});var EYt=s(Roe);aGr=r(EYt,"TFLongformerForSequenceClassification"),EYt.forEach(t),nGr=r(UQe," (Longformer model)"),UQe.forEach(t),sGr=i(ae),Y0=n(ae,"LI",{});var HQe=s(Y0);OAe=n(HQe,"STRONG",{});var CYt=s(OAe);lGr=r(CYt,"mobilebert"),CYt.forEach(t),iGr=r(HQe," \u2014 "),Poe=n(HQe,"A",{href:!0});var wYt=s(Poe);dGr=r(wYt,"TFMobileBertForSequenceClassification"),wYt.forEach(t),cGr=r(HQe," (MobileBERT model)"),HQe.forEach(t),mGr=i(ae),K0=n(ae,"LI",{});var JQe=s(K0);VAe=n(JQe,"STRONG",{});var AYt=s(VAe);fGr=r(AYt,"mpnet"),AYt.forEach(t),gGr=r(JQe," \u2014 "),Boe=n(JQe,"A",{href:!0});var yYt=s(Boe);hGr=r(yYt,"TFMPNetForSequenceClassification"),yYt.forEach(t),uGr=r(JQe," (MPNet model)"),JQe.forEach(t),pGr=i(ae),Z0=n(ae,"LI",{});var YQe=s(Z0);XAe=n(YQe,"STRONG",{});var LYt=s(XAe);_Gr=r(LYt,"openai-gpt"),LYt.forEach(t),bGr=r(YQe," \u2014 "),Ioe=n(YQe,"A",{href:!0});var xYt=s(Ioe);vGr=r(xYt,"TFOpenAIGPTForSequenceClassification"),xYt.forEach(t),FGr=r(YQe," (OpenAI GPT model)"),YQe.forEach(t),TGr=i(ae),ew=n(ae,"LI",{});var KQe=s(ew);zAe=n(KQe,"STRONG",{});var $Yt=s(zAe);MGr=r($Yt,"rembert"),$Yt.forEach(t),EGr=r(KQe," \u2014 "),Noe=n(KQe,"A",{href:!0});var kYt=s(Noe);CGr=r(kYt,"TFRemBertForSequenceClassification"),kYt.forEach(t),wGr=r(KQe," (RemBERT model)"),KQe.forEach(t),AGr=i(ae),ow=n(ae,"LI",{});var ZQe=s(ow);QAe=n(ZQe,"STRONG",{});var SYt=s(QAe);yGr=r(SYt,"roberta"),SYt.forEach(t),LGr=r(ZQe," \u2014 "),qoe=n(ZQe,"A",{href:!0});var RYt=s(qoe);xGr=r(RYt,"TFRobertaForSequenceClassification"),RYt.forEach(t),$Gr=r(ZQe," (RoBERTa model)"),ZQe.forEach(t),kGr=i(ae),rw=n(ae,"LI",{});var eWe=s(rw);WAe=n(eWe,"STRONG",{});var PYt=s(WAe);SGr=r(PYt,"roformer"),PYt.forEach(t),RGr=r(eWe," \u2014 "),joe=n(eWe,"A",{href:!0});var BYt=s(joe);PGr=r(BYt,"TFRoFormerForSequenceClassification"),BYt.forEach(t),BGr=r(eWe," (RoFormer model)"),eWe.forEach(t),IGr=i(ae),tw=n(ae,"LI",{});var oWe=s(tw);UAe=n(oWe,"STRONG",{});var IYt=s(UAe);NGr=r(IYt,"tapas"),IYt.forEach(t),qGr=r(oWe," \u2014 "),Doe=n(oWe,"A",{href:!0});var NYt=s(Doe);jGr=r(NYt,"TFTapasForSequenceClassification"),NYt.forEach(t),DGr=r(oWe," (TAPAS model)"),oWe.forEach(t),GGr=i(ae),aw=n(ae,"LI",{});var rWe=s(aw);HAe=n(rWe,"STRONG",{});var qYt=s(HAe);OGr=r(qYt,"transfo-xl"),qYt.forEach(t),VGr=r(rWe," \u2014 "),Goe=n(rWe,"A",{href:!0});var jYt=s(Goe);XGr=r(jYt,"TFTransfoXLForSequenceClassification"),jYt.forEach(t),zGr=r(rWe," (Transformer-XL model)"),rWe.forEach(t),QGr=i(ae),nw=n(ae,"LI",{});var tWe=s(nw);JAe=n(tWe,"STRONG",{});var DYt=s(JAe);WGr=r(DYt,"xlm"),DYt.forEach(t),UGr=r(tWe," \u2014 "),Ooe=n(tWe,"A",{href:!0});var GYt=s(Ooe);HGr=r(GYt,"TFXLMForSequenceClassification"),GYt.forEach(t),JGr=r(tWe," (XLM model)"),tWe.forEach(t),YGr=i(ae),sw=n(ae,"LI",{});var aWe=s(sw);YAe=n(aWe,"STRONG",{});var OYt=s(YAe);KGr=r(OYt,"xlm-roberta"),OYt.forEach(t),ZGr=r(aWe," \u2014 "),Voe=n(aWe,"A",{href:!0});var VYt=s(Voe);eOr=r(VYt,"TFXLMRobertaForSequenceClassification"),VYt.forEach(t),oOr=r(aWe," (XLM-RoBERTa model)"),aWe.forEach(t),rOr=i(ae),lw=n(ae,"LI",{});var nWe=s(lw);KAe=n(nWe,"STRONG",{});var XYt=s(KAe);tOr=r(XYt,"xlnet"),XYt.forEach(t),aOr=r(nWe," \u2014 "),Xoe=n(nWe,"A",{href:!0});var zYt=s(Xoe);nOr=r(zYt,"TFXLNetForSequenceClassification"),zYt.forEach(t),sOr=r(nWe," (XLNet model)"),nWe.forEach(t),ae.forEach(t),lOr=i(gi),T(iw.$$.fragment,gi),gi.forEach(t),fi.forEach(t),QYe=i(m),cm=n(m,"H2",{class:!0});var ieo=s(cm);dw=n(ieo,"A",{id:!0,class:!0,href:!0});var QYt=s(dw);ZAe=n(QYt,"SPAN",{});var WYt=s(ZAe);T(Vk.$$.fragment,WYt),WYt.forEach(t),QYt.forEach(t),iOr=i(ieo),e6e=n(ieo,"SPAN",{});var UYt=s(e6e);dOr=r(UYt,"TFAutoModelForMultipleChoice"),UYt.forEach(t),ieo.forEach(t),WYe=i(m),hr=n(m,"DIV",{class:!0});var hi=s(hr);T(Xk.$$.fragment,hi),cOr=i(hi),mm=n(hi,"P",{});var yle=s(mm);mOr=r(yle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zoe=n(yle,"A",{href:!0});var HYt=s(zoe);fOr=r(HYt,"from_pretrained()"),HYt.forEach(t),gOr=r(yle," class method or the "),Qoe=n(yle,"A",{href:!0});var JYt=s(Qoe);hOr=r(JYt,"from_config()"),JYt.forEach(t),uOr=r(yle,` class
method.`),yle.forEach(t),pOr=i(hi),zk=n(hi,"P",{});var deo=s(zk);_Or=r(deo,"This class cannot be instantiated directly using "),o6e=n(deo,"CODE",{});var YYt=s(o6e);bOr=r(YYt,"__init__()"),YYt.forEach(t),vOr=r(deo," (throws an error)."),deo.forEach(t),FOr=i(hi),Yt=n(hi,"DIV",{class:!0});var _8=s(Yt);T(Qk.$$.fragment,_8),TOr=i(_8),r6e=n(_8,"P",{});var KYt=s(r6e);MOr=r(KYt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),KYt.forEach(t),EOr=i(_8),fm=n(_8,"P",{});var Lle=s(fm);COr=r(Lle,`Note:
Loading a model from its configuration file does `),t6e=n(Lle,"STRONG",{});var ZYt=s(t6e);wOr=r(ZYt,"not"),ZYt.forEach(t),AOr=r(Lle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Woe=n(Lle,"A",{href:!0});var eKt=s(Woe);yOr=r(eKt,"from_pretrained()"),eKt.forEach(t),LOr=r(Lle," to load the model weights."),Lle.forEach(t),xOr=i(_8),T(cw.$$.fragment,_8),_8.forEach(t),$Or=i(hi),Xr=n(hi,"DIV",{class:!0});var ui=s(Xr);T(Wk.$$.fragment,ui),kOr=i(ui),a6e=n(ui,"P",{});var oKt=s(a6e);SOr=r(oKt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oKt.forEach(t),ROr=i(ui),Sn=n(ui,"P",{});var b8=s(Sn);POr=r(b8,"The model class to instantiate is selected based on the "),n6e=n(b8,"CODE",{});var rKt=s(n6e);BOr=r(rKt,"model_type"),rKt.forEach(t),IOr=r(b8,` property of the config object (either
passed as an argument or loaded from `),s6e=n(b8,"CODE",{});var tKt=s(s6e);NOr=r(tKt,"pretrained_model_name_or_path"),tKt.forEach(t),qOr=r(b8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l6e=n(b8,"CODE",{});var aKt=s(l6e);jOr=r(aKt,"pretrained_model_name_or_path"),aKt.forEach(t),DOr=r(b8,":"),b8.forEach(t),GOr=i(ui),ve=n(ui,"UL",{});var Te=s(ve);mw=n(Te,"LI",{});var sWe=s(mw);i6e=n(sWe,"STRONG",{});var nKt=s(i6e);OOr=r(nKt,"albert"),nKt.forEach(t),VOr=r(sWe," \u2014 "),Uoe=n(sWe,"A",{href:!0});var sKt=s(Uoe);XOr=r(sKt,"TFAlbertForMultipleChoice"),sKt.forEach(t),zOr=r(sWe," (ALBERT model)"),sWe.forEach(t),QOr=i(Te),fw=n(Te,"LI",{});var lWe=s(fw);d6e=n(lWe,"STRONG",{});var lKt=s(d6e);WOr=r(lKt,"bert"),lKt.forEach(t),UOr=r(lWe," \u2014 "),Hoe=n(lWe,"A",{href:!0});var iKt=s(Hoe);HOr=r(iKt,"TFBertForMultipleChoice"),iKt.forEach(t),JOr=r(lWe," (BERT model)"),lWe.forEach(t),YOr=i(Te),gw=n(Te,"LI",{});var iWe=s(gw);c6e=n(iWe,"STRONG",{});var dKt=s(c6e);KOr=r(dKt,"camembert"),dKt.forEach(t),ZOr=r(iWe," \u2014 "),Joe=n(iWe,"A",{href:!0});var cKt=s(Joe);eVr=r(cKt,"TFCamembertForMultipleChoice"),cKt.forEach(t),oVr=r(iWe," (CamemBERT model)"),iWe.forEach(t),rVr=i(Te),hw=n(Te,"LI",{});var dWe=s(hw);m6e=n(dWe,"STRONG",{});var mKt=s(m6e);tVr=r(mKt,"convbert"),mKt.forEach(t),aVr=r(dWe," \u2014 "),Yoe=n(dWe,"A",{href:!0});var fKt=s(Yoe);nVr=r(fKt,"TFConvBertForMultipleChoice"),fKt.forEach(t),sVr=r(dWe," (ConvBERT model)"),dWe.forEach(t),lVr=i(Te),uw=n(Te,"LI",{});var cWe=s(uw);f6e=n(cWe,"STRONG",{});var gKt=s(f6e);iVr=r(gKt,"distilbert"),gKt.forEach(t),dVr=r(cWe," \u2014 "),Koe=n(cWe,"A",{href:!0});var hKt=s(Koe);cVr=r(hKt,"TFDistilBertForMultipleChoice"),hKt.forEach(t),mVr=r(cWe," (DistilBERT model)"),cWe.forEach(t),fVr=i(Te),pw=n(Te,"LI",{});var mWe=s(pw);g6e=n(mWe,"STRONG",{});var uKt=s(g6e);gVr=r(uKt,"electra"),uKt.forEach(t),hVr=r(mWe," \u2014 "),Zoe=n(mWe,"A",{href:!0});var pKt=s(Zoe);uVr=r(pKt,"TFElectraForMultipleChoice"),pKt.forEach(t),pVr=r(mWe," (ELECTRA model)"),mWe.forEach(t),_Vr=i(Te),_w=n(Te,"LI",{});var fWe=s(_w);h6e=n(fWe,"STRONG",{});var _Kt=s(h6e);bVr=r(_Kt,"flaubert"),_Kt.forEach(t),vVr=r(fWe," \u2014 "),ere=n(fWe,"A",{href:!0});var bKt=s(ere);FVr=r(bKt,"TFFlaubertForMultipleChoice"),bKt.forEach(t),TVr=r(fWe," (FlauBERT model)"),fWe.forEach(t),MVr=i(Te),bw=n(Te,"LI",{});var gWe=s(bw);u6e=n(gWe,"STRONG",{});var vKt=s(u6e);EVr=r(vKt,"funnel"),vKt.forEach(t),CVr=r(gWe," \u2014 "),ore=n(gWe,"A",{href:!0});var FKt=s(ore);wVr=r(FKt,"TFFunnelForMultipleChoice"),FKt.forEach(t),AVr=r(gWe," (Funnel Transformer model)"),gWe.forEach(t),yVr=i(Te),vw=n(Te,"LI",{});var hWe=s(vw);p6e=n(hWe,"STRONG",{});var TKt=s(p6e);LVr=r(TKt,"longformer"),TKt.forEach(t),xVr=r(hWe," \u2014 "),rre=n(hWe,"A",{href:!0});var MKt=s(rre);$Vr=r(MKt,"TFLongformerForMultipleChoice"),MKt.forEach(t),kVr=r(hWe," (Longformer model)"),hWe.forEach(t),SVr=i(Te),Fw=n(Te,"LI",{});var uWe=s(Fw);_6e=n(uWe,"STRONG",{});var EKt=s(_6e);RVr=r(EKt,"mobilebert"),EKt.forEach(t),PVr=r(uWe," \u2014 "),tre=n(uWe,"A",{href:!0});var CKt=s(tre);BVr=r(CKt,"TFMobileBertForMultipleChoice"),CKt.forEach(t),IVr=r(uWe," (MobileBERT model)"),uWe.forEach(t),NVr=i(Te),Tw=n(Te,"LI",{});var pWe=s(Tw);b6e=n(pWe,"STRONG",{});var wKt=s(b6e);qVr=r(wKt,"mpnet"),wKt.forEach(t),jVr=r(pWe," \u2014 "),are=n(pWe,"A",{href:!0});var AKt=s(are);DVr=r(AKt,"TFMPNetForMultipleChoice"),AKt.forEach(t),GVr=r(pWe," (MPNet model)"),pWe.forEach(t),OVr=i(Te),Mw=n(Te,"LI",{});var _We=s(Mw);v6e=n(_We,"STRONG",{});var yKt=s(v6e);VVr=r(yKt,"rembert"),yKt.forEach(t),XVr=r(_We," \u2014 "),nre=n(_We,"A",{href:!0});var LKt=s(nre);zVr=r(LKt,"TFRemBertForMultipleChoice"),LKt.forEach(t),QVr=r(_We," (RemBERT model)"),_We.forEach(t),WVr=i(Te),Ew=n(Te,"LI",{});var bWe=s(Ew);F6e=n(bWe,"STRONG",{});var xKt=s(F6e);UVr=r(xKt,"roberta"),xKt.forEach(t),HVr=r(bWe," \u2014 "),sre=n(bWe,"A",{href:!0});var $Kt=s(sre);JVr=r($Kt,"TFRobertaForMultipleChoice"),$Kt.forEach(t),YVr=r(bWe," (RoBERTa model)"),bWe.forEach(t),KVr=i(Te),Cw=n(Te,"LI",{});var vWe=s(Cw);T6e=n(vWe,"STRONG",{});var kKt=s(T6e);ZVr=r(kKt,"roformer"),kKt.forEach(t),eXr=r(vWe," \u2014 "),lre=n(vWe,"A",{href:!0});var SKt=s(lre);oXr=r(SKt,"TFRoFormerForMultipleChoice"),SKt.forEach(t),rXr=r(vWe," (RoFormer model)"),vWe.forEach(t),tXr=i(Te),ww=n(Te,"LI",{});var FWe=s(ww);M6e=n(FWe,"STRONG",{});var RKt=s(M6e);aXr=r(RKt,"xlm"),RKt.forEach(t),nXr=r(FWe," \u2014 "),ire=n(FWe,"A",{href:!0});var PKt=s(ire);sXr=r(PKt,"TFXLMForMultipleChoice"),PKt.forEach(t),lXr=r(FWe," (XLM model)"),FWe.forEach(t),iXr=i(Te),Aw=n(Te,"LI",{});var TWe=s(Aw);E6e=n(TWe,"STRONG",{});var BKt=s(E6e);dXr=r(BKt,"xlm-roberta"),BKt.forEach(t),cXr=r(TWe," \u2014 "),dre=n(TWe,"A",{href:!0});var IKt=s(dre);mXr=r(IKt,"TFXLMRobertaForMultipleChoice"),IKt.forEach(t),fXr=r(TWe," (XLM-RoBERTa model)"),TWe.forEach(t),gXr=i(Te),yw=n(Te,"LI",{});var MWe=s(yw);C6e=n(MWe,"STRONG",{});var NKt=s(C6e);hXr=r(NKt,"xlnet"),NKt.forEach(t),uXr=r(MWe," \u2014 "),cre=n(MWe,"A",{href:!0});var qKt=s(cre);pXr=r(qKt,"TFXLNetForMultipleChoice"),qKt.forEach(t),_Xr=r(MWe," (XLNet model)"),MWe.forEach(t),Te.forEach(t),bXr=i(ui),T(Lw.$$.fragment,ui),ui.forEach(t),hi.forEach(t),UYe=i(m),gm=n(m,"H2",{class:!0});var ceo=s(gm);xw=n(ceo,"A",{id:!0,class:!0,href:!0});var jKt=s(xw);w6e=n(jKt,"SPAN",{});var DKt=s(w6e);T(Uk.$$.fragment,DKt),DKt.forEach(t),jKt.forEach(t),vXr=i(ceo),A6e=n(ceo,"SPAN",{});var GKt=s(A6e);FXr=r(GKt,"TFAutoModelForNextSentencePrediction"),GKt.forEach(t),ceo.forEach(t),HYe=i(m),ur=n(m,"DIV",{class:!0});var pi=s(ur);T(Hk.$$.fragment,pi),TXr=i(pi),hm=n(pi,"P",{});var xle=s(hm);MXr=r(xle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),mre=n(xle,"A",{href:!0});var OKt=s(mre);EXr=r(OKt,"from_pretrained()"),OKt.forEach(t),CXr=r(xle," class method or the "),fre=n(xle,"A",{href:!0});var VKt=s(fre);wXr=r(VKt,"from_config()"),VKt.forEach(t),AXr=r(xle,` class
method.`),xle.forEach(t),yXr=i(pi),Jk=n(pi,"P",{});var meo=s(Jk);LXr=r(meo,"This class cannot be instantiated directly using "),y6e=n(meo,"CODE",{});var XKt=s(y6e);xXr=r(XKt,"__init__()"),XKt.forEach(t),$Xr=r(meo," (throws an error)."),meo.forEach(t),kXr=i(pi),Kt=n(pi,"DIV",{class:!0});var v8=s(Kt);T(Yk.$$.fragment,v8),SXr=i(v8),L6e=n(v8,"P",{});var zKt=s(L6e);RXr=r(zKt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zKt.forEach(t),PXr=i(v8),um=n(v8,"P",{});var $le=s(um);BXr=r($le,`Note:
Loading a model from its configuration file does `),x6e=n($le,"STRONG",{});var QKt=s(x6e);IXr=r(QKt,"not"),QKt.forEach(t),NXr=r($le,` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=n($le,"A",{href:!0});var WKt=s(gre);qXr=r(WKt,"from_pretrained()"),WKt.forEach(t),jXr=r($le," to load the model weights."),$le.forEach(t),DXr=i(v8),T($w.$$.fragment,v8),v8.forEach(t),GXr=i(pi),zr=n(pi,"DIV",{class:!0});var _i=s(zr);T(Kk.$$.fragment,_i),OXr=i(_i),$6e=n(_i,"P",{});var UKt=s($6e);VXr=r(UKt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),UKt.forEach(t),XXr=i(_i),Rn=n(_i,"P",{});var F8=s(Rn);zXr=r(F8,"The model class to instantiate is selected based on the "),k6e=n(F8,"CODE",{});var HKt=s(k6e);QXr=r(HKt,"model_type"),HKt.forEach(t),WXr=r(F8,` property of the config object (either
passed as an argument or loaded from `),S6e=n(F8,"CODE",{});var JKt=s(S6e);UXr=r(JKt,"pretrained_model_name_or_path"),JKt.forEach(t),HXr=r(F8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=n(F8,"CODE",{});var YKt=s(R6e);JXr=r(YKt,"pretrained_model_name_or_path"),YKt.forEach(t),YXr=r(F8,":"),F8.forEach(t),KXr=i(_i),Zk=n(_i,"UL",{});var feo=s(Zk);kw=n(feo,"LI",{});var EWe=s(kw);P6e=n(EWe,"STRONG",{});var KKt=s(P6e);ZXr=r(KKt,"bert"),KKt.forEach(t),ezr=r(EWe," \u2014 "),hre=n(EWe,"A",{href:!0});var ZKt=s(hre);ozr=r(ZKt,"TFBertForNextSentencePrediction"),ZKt.forEach(t),rzr=r(EWe," (BERT model)"),EWe.forEach(t),tzr=i(feo),Sw=n(feo,"LI",{});var CWe=s(Sw);B6e=n(CWe,"STRONG",{});var eZt=s(B6e);azr=r(eZt,"mobilebert"),eZt.forEach(t),nzr=r(CWe," \u2014 "),ure=n(CWe,"A",{href:!0});var oZt=s(ure);szr=r(oZt,"TFMobileBertForNextSentencePrediction"),oZt.forEach(t),lzr=r(CWe," (MobileBERT model)"),CWe.forEach(t),feo.forEach(t),izr=i(_i),T(Rw.$$.fragment,_i),_i.forEach(t),pi.forEach(t),JYe=i(m),pm=n(m,"H2",{class:!0});var geo=s(pm);Pw=n(geo,"A",{id:!0,class:!0,href:!0});var rZt=s(Pw);I6e=n(rZt,"SPAN",{});var tZt=s(I6e);T(eS.$$.fragment,tZt),tZt.forEach(t),rZt.forEach(t),dzr=i(geo),N6e=n(geo,"SPAN",{});var aZt=s(N6e);czr=r(aZt,"TFAutoModelForTableQuestionAnswering"),aZt.forEach(t),geo.forEach(t),YYe=i(m),pr=n(m,"DIV",{class:!0});var bi=s(pr);T(oS.$$.fragment,bi),mzr=i(bi),_m=n(bi,"P",{});var kle=s(_m);fzr=r(kle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pre=n(kle,"A",{href:!0});var nZt=s(pre);gzr=r(nZt,"from_pretrained()"),nZt.forEach(t),hzr=r(kle," class method or the "),_re=n(kle,"A",{href:!0});var sZt=s(_re);uzr=r(sZt,"from_config()"),sZt.forEach(t),pzr=r(kle,` class
method.`),kle.forEach(t),_zr=i(bi),rS=n(bi,"P",{});var heo=s(rS);bzr=r(heo,"This class cannot be instantiated directly using "),q6e=n(heo,"CODE",{});var lZt=s(q6e);vzr=r(lZt,"__init__()"),lZt.forEach(t),Fzr=r(heo," (throws an error)."),heo.forEach(t),Tzr=i(bi),Zt=n(bi,"DIV",{class:!0});var T8=s(Zt);T(tS.$$.fragment,T8),Mzr=i(T8),j6e=n(T8,"P",{});var iZt=s(j6e);Ezr=r(iZt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iZt.forEach(t),Czr=i(T8),bm=n(T8,"P",{});var Sle=s(bm);wzr=r(Sle,`Note:
Loading a model from its configuration file does `),D6e=n(Sle,"STRONG",{});var dZt=s(D6e);Azr=r(dZt,"not"),dZt.forEach(t),yzr=r(Sle,` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=n(Sle,"A",{href:!0});var cZt=s(bre);Lzr=r(cZt,"from_pretrained()"),cZt.forEach(t),xzr=r(Sle," to load the model weights."),Sle.forEach(t),$zr=i(T8),T(Bw.$$.fragment,T8),T8.forEach(t),kzr=i(bi),Qr=n(bi,"DIV",{class:!0});var vi=s(Qr);T(aS.$$.fragment,vi),Szr=i(vi),G6e=n(vi,"P",{});var mZt=s(G6e);Rzr=r(mZt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mZt.forEach(t),Pzr=i(vi),Pn=n(vi,"P",{});var M8=s(Pn);Bzr=r(M8,"The model class to instantiate is selected based on the "),O6e=n(M8,"CODE",{});var fZt=s(O6e);Izr=r(fZt,"model_type"),fZt.forEach(t),Nzr=r(M8,` property of the config object (either
passed as an argument or loaded from `),V6e=n(M8,"CODE",{});var gZt=s(V6e);qzr=r(gZt,"pretrained_model_name_or_path"),gZt.forEach(t),jzr=r(M8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(M8,"CODE",{});var hZt=s(X6e);Dzr=r(hZt,"pretrained_model_name_or_path"),hZt.forEach(t),Gzr=r(M8,":"),M8.forEach(t),Ozr=i(vi),z6e=n(vi,"UL",{});var uZt=s(z6e);Iw=n(uZt,"LI",{});var wWe=s(Iw);Q6e=n(wWe,"STRONG",{});var pZt=s(Q6e);Vzr=r(pZt,"tapas"),pZt.forEach(t),Xzr=r(wWe," \u2014 "),vre=n(wWe,"A",{href:!0});var _Zt=s(vre);zzr=r(_Zt,"TFTapasForQuestionAnswering"),_Zt.forEach(t),Qzr=r(wWe," (TAPAS model)"),wWe.forEach(t),uZt.forEach(t),Wzr=i(vi),T(Nw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),KYe=i(m),vm=n(m,"H2",{class:!0});var ueo=s(vm);qw=n(ueo,"A",{id:!0,class:!0,href:!0});var bZt=s(qw);W6e=n(bZt,"SPAN",{});var vZt=s(W6e);T(nS.$$.fragment,vZt),vZt.forEach(t),bZt.forEach(t),Uzr=i(ueo),U6e=n(ueo,"SPAN",{});var FZt=s(U6e);Hzr=r(FZt,"TFAutoModelForDocumentQuestionAnswering"),FZt.forEach(t),ueo.forEach(t),ZYe=i(m),_r=n(m,"DIV",{class:!0});var Fi=s(_r);T(sS.$$.fragment,Fi),Jzr=i(Fi),Fm=n(Fi,"P",{});var Rle=s(Fm);Yzr=r(Rle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),Fre=n(Rle,"A",{href:!0});var TZt=s(Fre);Kzr=r(TZt,"from_pretrained()"),TZt.forEach(t),Zzr=r(Rle," class method or the "),Tre=n(Rle,"A",{href:!0});var MZt=s(Tre);eQr=r(MZt,"from_config()"),MZt.forEach(t),oQr=r(Rle,` class
method.`),Rle.forEach(t),rQr=i(Fi),lS=n(Fi,"P",{});var peo=s(lS);tQr=r(peo,"This class cannot be instantiated directly using "),H6e=n(peo,"CODE",{});var EZt=s(H6e);aQr=r(EZt,"__init__()"),EZt.forEach(t),nQr=r(peo," (throws an error)."),peo.forEach(t),sQr=i(Fi),ea=n(Fi,"DIV",{class:!0});var E8=s(ea);T(iS.$$.fragment,E8),lQr=i(E8),J6e=n(E8,"P",{});var CZt=s(J6e);iQr=r(CZt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),CZt.forEach(t),dQr=i(E8),Tm=n(E8,"P",{});var Ple=s(Tm);cQr=r(Ple,`Note:
Loading a model from its configuration file does `),Y6e=n(Ple,"STRONG",{});var wZt=s(Y6e);mQr=r(wZt,"not"),wZt.forEach(t),fQr=r(Ple,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=n(Ple,"A",{href:!0});var AZt=s(Mre);gQr=r(AZt,"from_pretrained()"),AZt.forEach(t),hQr=r(Ple," to load the model weights."),Ple.forEach(t),uQr=i(E8),T(jw.$$.fragment,E8),E8.forEach(t),pQr=i(Fi),Wr=n(Fi,"DIV",{class:!0});var Ti=s(Wr);T(dS.$$.fragment,Ti),_Qr=i(Ti),K6e=n(Ti,"P",{});var yZt=s(K6e);bQr=r(yZt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),yZt.forEach(t),vQr=i(Ti),Bn=n(Ti,"P",{});var C8=s(Bn);FQr=r(C8,"The model class to instantiate is selected based on the "),Z6e=n(C8,"CODE",{});var LZt=s(Z6e);TQr=r(LZt,"model_type"),LZt.forEach(t),MQr=r(C8,` property of the config object (either
passed as an argument or loaded from `),e7e=n(C8,"CODE",{});var xZt=s(e7e);EQr=r(xZt,"pretrained_model_name_or_path"),xZt.forEach(t),CQr=r(C8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o7e=n(C8,"CODE",{});var $Zt=s(o7e);wQr=r($Zt,"pretrained_model_name_or_path"),$Zt.forEach(t),AQr=r(C8,":"),C8.forEach(t),yQr=i(Ti),r7e=n(Ti,"UL",{});var kZt=s(r7e);Dw=n(kZt,"LI",{});var AWe=s(Dw);t7e=n(AWe,"STRONG",{});var SZt=s(t7e);LQr=r(SZt,"layoutlm"),SZt.forEach(t),xQr=r(AWe," \u2014 "),Ere=n(AWe,"A",{href:!0});var RZt=s(Ere);$Qr=r(RZt,"TFLayoutLMForQuestionAnswering"),RZt.forEach(t),kQr=r(AWe," (LayoutLM model)"),AWe.forEach(t),kZt.forEach(t),SQr=i(Ti),T(Gw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),eKe=i(m),Mm=n(m,"H2",{class:!0});var _eo=s(Mm);Ow=n(_eo,"A",{id:!0,class:!0,href:!0});var PZt=s(Ow);a7e=n(PZt,"SPAN",{});var BZt=s(a7e);T(cS.$$.fragment,BZt),BZt.forEach(t),PZt.forEach(t),RQr=i(_eo),n7e=n(_eo,"SPAN",{});var IZt=s(n7e);PQr=r(IZt,"TFAutoModelForTokenClassification"),IZt.forEach(t),_eo.forEach(t),oKe=i(m),br=n(m,"DIV",{class:!0});var Mi=s(br);T(mS.$$.fragment,Mi),BQr=i(Mi),Em=n(Mi,"P",{});var Ble=s(Em);IQr=r(Ble,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Cre=n(Ble,"A",{href:!0});var NZt=s(Cre);NQr=r(NZt,"from_pretrained()"),NZt.forEach(t),qQr=r(Ble," class method or the "),wre=n(Ble,"A",{href:!0});var qZt=s(wre);jQr=r(qZt,"from_config()"),qZt.forEach(t),DQr=r(Ble,` class
method.`),Ble.forEach(t),GQr=i(Mi),fS=n(Mi,"P",{});var beo=s(fS);OQr=r(beo,"This class cannot be instantiated directly using "),s7e=n(beo,"CODE",{});var jZt=s(s7e);VQr=r(jZt,"__init__()"),jZt.forEach(t),XQr=r(beo," (throws an error)."),beo.forEach(t),zQr=i(Mi),oa=n(Mi,"DIV",{class:!0});var w8=s(oa);T(gS.$$.fragment,w8),QQr=i(w8),l7e=n(w8,"P",{});var DZt=s(l7e);WQr=r(DZt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DZt.forEach(t),UQr=i(w8),Cm=n(w8,"P",{});var Ile=s(Cm);HQr=r(Ile,`Note:
Loading a model from its configuration file does `),i7e=n(Ile,"STRONG",{});var GZt=s(i7e);JQr=r(GZt,"not"),GZt.forEach(t),YQr=r(Ile,` load the model weights. It only affects the
model\u2019s configuration. Use `),Are=n(Ile,"A",{href:!0});var OZt=s(Are);KQr=r(OZt,"from_pretrained()"),OZt.forEach(t),ZQr=r(Ile," to load the model weights."),Ile.forEach(t),eWr=i(w8),T(Vw.$$.fragment,w8),w8.forEach(t),oWr=i(Mi),Ur=n(Mi,"DIV",{class:!0});var Ei=s(Ur);T(hS.$$.fragment,Ei),rWr=i(Ei),d7e=n(Ei,"P",{});var VZt=s(d7e);tWr=r(VZt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VZt.forEach(t),aWr=i(Ei),In=n(Ei,"P",{});var A8=s(In);nWr=r(A8,"The model class to instantiate is selected based on the "),c7e=n(A8,"CODE",{});var XZt=s(c7e);sWr=r(XZt,"model_type"),XZt.forEach(t),lWr=r(A8,` property of the config object (either
passed as an argument or loaded from `),m7e=n(A8,"CODE",{});var zZt=s(m7e);iWr=r(zZt,"pretrained_model_name_or_path"),zZt.forEach(t),dWr=r(A8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f7e=n(A8,"CODE",{});var QZt=s(f7e);cWr=r(QZt,"pretrained_model_name_or_path"),QZt.forEach(t),mWr=r(A8,":"),A8.forEach(t),fWr=i(Ei),ie=n(Ei,"UL",{});var ge=s(ie);Xw=n(ge,"LI",{});var yWe=s(Xw);g7e=n(yWe,"STRONG",{});var WZt=s(g7e);gWr=r(WZt,"albert"),WZt.forEach(t),hWr=r(yWe," \u2014 "),yre=n(yWe,"A",{href:!0});var UZt=s(yre);uWr=r(UZt,"TFAlbertForTokenClassification"),UZt.forEach(t),pWr=r(yWe," (ALBERT model)"),yWe.forEach(t),_Wr=i(ge),zw=n(ge,"LI",{});var LWe=s(zw);h7e=n(LWe,"STRONG",{});var HZt=s(h7e);bWr=r(HZt,"bert"),HZt.forEach(t),vWr=r(LWe," \u2014 "),Lre=n(LWe,"A",{href:!0});var JZt=s(Lre);FWr=r(JZt,"TFBertForTokenClassification"),JZt.forEach(t),TWr=r(LWe," (BERT model)"),LWe.forEach(t),MWr=i(ge),Qw=n(ge,"LI",{});var xWe=s(Qw);u7e=n(xWe,"STRONG",{});var YZt=s(u7e);EWr=r(YZt,"camembert"),YZt.forEach(t),CWr=r(xWe," \u2014 "),xre=n(xWe,"A",{href:!0});var KZt=s(xre);wWr=r(KZt,"TFCamembertForTokenClassification"),KZt.forEach(t),AWr=r(xWe," (CamemBERT model)"),xWe.forEach(t),yWr=i(ge),Ww=n(ge,"LI",{});var $We=s(Ww);p7e=n($We,"STRONG",{});var ZZt=s(p7e);LWr=r(ZZt,"convbert"),ZZt.forEach(t),xWr=r($We," \u2014 "),$re=n($We,"A",{href:!0});var eea=s($re);$Wr=r(eea,"TFConvBertForTokenClassification"),eea.forEach(t),kWr=r($We," (ConvBERT model)"),$We.forEach(t),SWr=i(ge),Uw=n(ge,"LI",{});var kWe=s(Uw);_7e=n(kWe,"STRONG",{});var oea=s(_7e);RWr=r(oea,"deberta"),oea.forEach(t),PWr=r(kWe," \u2014 "),kre=n(kWe,"A",{href:!0});var rea=s(kre);BWr=r(rea,"TFDebertaForTokenClassification"),rea.forEach(t),IWr=r(kWe," (DeBERTa model)"),kWe.forEach(t),NWr=i(ge),Hw=n(ge,"LI",{});var SWe=s(Hw);b7e=n(SWe,"STRONG",{});var tea=s(b7e);qWr=r(tea,"deberta-v2"),tea.forEach(t),jWr=r(SWe," \u2014 "),Sre=n(SWe,"A",{href:!0});var aea=s(Sre);DWr=r(aea,"TFDebertaV2ForTokenClassification"),aea.forEach(t),GWr=r(SWe," (DeBERTa-v2 model)"),SWe.forEach(t),OWr=i(ge),Jw=n(ge,"LI",{});var RWe=s(Jw);v7e=n(RWe,"STRONG",{});var nea=s(v7e);VWr=r(nea,"distilbert"),nea.forEach(t),XWr=r(RWe," \u2014 "),Rre=n(RWe,"A",{href:!0});var sea=s(Rre);zWr=r(sea,"TFDistilBertForTokenClassification"),sea.forEach(t),QWr=r(RWe," (DistilBERT model)"),RWe.forEach(t),WWr=i(ge),Yw=n(ge,"LI",{});var PWe=s(Yw);F7e=n(PWe,"STRONG",{});var lea=s(F7e);UWr=r(lea,"electra"),lea.forEach(t),HWr=r(PWe," \u2014 "),Pre=n(PWe,"A",{href:!0});var iea=s(Pre);JWr=r(iea,"TFElectraForTokenClassification"),iea.forEach(t),YWr=r(PWe," (ELECTRA model)"),PWe.forEach(t),KWr=i(ge),Kw=n(ge,"LI",{});var BWe=s(Kw);T7e=n(BWe,"STRONG",{});var dea=s(T7e);ZWr=r(dea,"flaubert"),dea.forEach(t),eUr=r(BWe," \u2014 "),Bre=n(BWe,"A",{href:!0});var cea=s(Bre);oUr=r(cea,"TFFlaubertForTokenClassification"),cea.forEach(t),rUr=r(BWe," (FlauBERT model)"),BWe.forEach(t),tUr=i(ge),Zw=n(ge,"LI",{});var IWe=s(Zw);M7e=n(IWe,"STRONG",{});var mea=s(M7e);aUr=r(mea,"funnel"),mea.forEach(t),nUr=r(IWe," \u2014 "),Ire=n(IWe,"A",{href:!0});var fea=s(Ire);sUr=r(fea,"TFFunnelForTokenClassification"),fea.forEach(t),lUr=r(IWe," (Funnel Transformer model)"),IWe.forEach(t),iUr=i(ge),eA=n(ge,"LI",{});var NWe=s(eA);E7e=n(NWe,"STRONG",{});var gea=s(E7e);dUr=r(gea,"layoutlm"),gea.forEach(t),cUr=r(NWe," \u2014 "),Nre=n(NWe,"A",{href:!0});var hea=s(Nre);mUr=r(hea,"TFLayoutLMForTokenClassification"),hea.forEach(t),fUr=r(NWe," (LayoutLM model)"),NWe.forEach(t),gUr=i(ge),oA=n(ge,"LI",{});var qWe=s(oA);C7e=n(qWe,"STRONG",{});var uea=s(C7e);hUr=r(uea,"layoutlmv3"),uea.forEach(t),uUr=r(qWe," \u2014 "),qre=n(qWe,"A",{href:!0});var pea=s(qre);pUr=r(pea,"TFLayoutLMv3ForTokenClassification"),pea.forEach(t),_Ur=r(qWe," (LayoutLMv3 model)"),qWe.forEach(t),bUr=i(ge),rA=n(ge,"LI",{});var jWe=s(rA);w7e=n(jWe,"STRONG",{});var _ea=s(w7e);vUr=r(_ea,"longformer"),_ea.forEach(t),FUr=r(jWe," \u2014 "),jre=n(jWe,"A",{href:!0});var bea=s(jre);TUr=r(bea,"TFLongformerForTokenClassification"),bea.forEach(t),MUr=r(jWe," (Longformer model)"),jWe.forEach(t),EUr=i(ge),tA=n(ge,"LI",{});var DWe=s(tA);A7e=n(DWe,"STRONG",{});var vea=s(A7e);CUr=r(vea,"mobilebert"),vea.forEach(t),wUr=r(DWe," \u2014 "),Dre=n(DWe,"A",{href:!0});var Fea=s(Dre);AUr=r(Fea,"TFMobileBertForTokenClassification"),Fea.forEach(t),yUr=r(DWe," (MobileBERT model)"),DWe.forEach(t),LUr=i(ge),aA=n(ge,"LI",{});var GWe=s(aA);y7e=n(GWe,"STRONG",{});var Tea=s(y7e);xUr=r(Tea,"mpnet"),Tea.forEach(t),$Ur=r(GWe," \u2014 "),Gre=n(GWe,"A",{href:!0});var Mea=s(Gre);kUr=r(Mea,"TFMPNetForTokenClassification"),Mea.forEach(t),SUr=r(GWe," (MPNet model)"),GWe.forEach(t),RUr=i(ge),nA=n(ge,"LI",{});var OWe=s(nA);L7e=n(OWe,"STRONG",{});var Eea=s(L7e);PUr=r(Eea,"rembert"),Eea.forEach(t),BUr=r(OWe," \u2014 "),Ore=n(OWe,"A",{href:!0});var Cea=s(Ore);IUr=r(Cea,"TFRemBertForTokenClassification"),Cea.forEach(t),NUr=r(OWe," (RemBERT model)"),OWe.forEach(t),qUr=i(ge),sA=n(ge,"LI",{});var VWe=s(sA);x7e=n(VWe,"STRONG",{});var wea=s(x7e);jUr=r(wea,"roberta"),wea.forEach(t),DUr=r(VWe," \u2014 "),Vre=n(VWe,"A",{href:!0});var Aea=s(Vre);GUr=r(Aea,"TFRobertaForTokenClassification"),Aea.forEach(t),OUr=r(VWe," (RoBERTa model)"),VWe.forEach(t),VUr=i(ge),lA=n(ge,"LI",{});var XWe=s(lA);$7e=n(XWe,"STRONG",{});var yea=s($7e);XUr=r(yea,"roformer"),yea.forEach(t),zUr=r(XWe," \u2014 "),Xre=n(XWe,"A",{href:!0});var Lea=s(Xre);QUr=r(Lea,"TFRoFormerForTokenClassification"),Lea.forEach(t),WUr=r(XWe," (RoFormer model)"),XWe.forEach(t),UUr=i(ge),iA=n(ge,"LI",{});var zWe=s(iA);k7e=n(zWe,"STRONG",{});var xea=s(k7e);HUr=r(xea,"xlm"),xea.forEach(t),JUr=r(zWe," \u2014 "),zre=n(zWe,"A",{href:!0});var $ea=s(zre);YUr=r($ea,"TFXLMForTokenClassification"),$ea.forEach(t),KUr=r(zWe," (XLM model)"),zWe.forEach(t),ZUr=i(ge),dA=n(ge,"LI",{});var QWe=s(dA);S7e=n(QWe,"STRONG",{});var kea=s(S7e);eHr=r(kea,"xlm-roberta"),kea.forEach(t),oHr=r(QWe," \u2014 "),Qre=n(QWe,"A",{href:!0});var Sea=s(Qre);rHr=r(Sea,"TFXLMRobertaForTokenClassification"),Sea.forEach(t),tHr=r(QWe," (XLM-RoBERTa model)"),QWe.forEach(t),aHr=i(ge),cA=n(ge,"LI",{});var WWe=s(cA);R7e=n(WWe,"STRONG",{});var Rea=s(R7e);nHr=r(Rea,"xlnet"),Rea.forEach(t),sHr=r(WWe," \u2014 "),Wre=n(WWe,"A",{href:!0});var Pea=s(Wre);lHr=r(Pea,"TFXLNetForTokenClassification"),Pea.forEach(t),iHr=r(WWe," (XLNet model)"),WWe.forEach(t),ge.forEach(t),dHr=i(Ei),T(mA.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),rKe=i(m),wm=n(m,"H2",{class:!0});var veo=s(wm);fA=n(veo,"A",{id:!0,class:!0,href:!0});var Bea=s(fA);P7e=n(Bea,"SPAN",{});var Iea=s(P7e);T(uS.$$.fragment,Iea),Iea.forEach(t),Bea.forEach(t),cHr=i(veo),B7e=n(veo,"SPAN",{});var Nea=s(B7e);mHr=r(Nea,"TFAutoModelForQuestionAnswering"),Nea.forEach(t),veo.forEach(t),tKe=i(m),vr=n(m,"DIV",{class:!0});var Ci=s(vr);T(pS.$$.fragment,Ci),fHr=i(Ci),Am=n(Ci,"P",{});var Nle=s(Am);gHr=r(Nle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ure=n(Nle,"A",{href:!0});var qea=s(Ure);hHr=r(qea,"from_pretrained()"),qea.forEach(t),uHr=r(Nle," class method or the "),Hre=n(Nle,"A",{href:!0});var jea=s(Hre);pHr=r(jea,"from_config()"),jea.forEach(t),_Hr=r(Nle,` class
method.`),Nle.forEach(t),bHr=i(Ci),_S=n(Ci,"P",{});var Feo=s(_S);vHr=r(Feo,"This class cannot be instantiated directly using "),I7e=n(Feo,"CODE",{});var Dea=s(I7e);FHr=r(Dea,"__init__()"),Dea.forEach(t),THr=r(Feo," (throws an error)."),Feo.forEach(t),MHr=i(Ci),ra=n(Ci,"DIV",{class:!0});var y8=s(ra);T(bS.$$.fragment,y8),EHr=i(y8),N7e=n(y8,"P",{});var Gea=s(N7e);CHr=r(Gea,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gea.forEach(t),wHr=i(y8),ym=n(y8,"P",{});var qle=s(ym);AHr=r(qle,`Note:
Loading a model from its configuration file does `),q7e=n(qle,"STRONG",{});var Oea=s(q7e);yHr=r(Oea,"not"),Oea.forEach(t),LHr=r(qle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=n(qle,"A",{href:!0});var Vea=s(Jre);xHr=r(Vea,"from_pretrained()"),Vea.forEach(t),$Hr=r(qle," to load the model weights."),qle.forEach(t),kHr=i(y8),T(gA.$$.fragment,y8),y8.forEach(t),SHr=i(Ci),Hr=n(Ci,"DIV",{class:!0});var wi=s(Hr);T(vS.$$.fragment,wi),RHr=i(wi),j7e=n(wi,"P",{});var Xea=s(j7e);PHr=r(Xea,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xea.forEach(t),BHr=i(wi),Nn=n(wi,"P",{});var L8=s(Nn);IHr=r(L8,"The model class to instantiate is selected based on the "),D7e=n(L8,"CODE",{});var zea=s(D7e);NHr=r(zea,"model_type"),zea.forEach(t),qHr=r(L8,` property of the config object (either
passed as an argument or loaded from `),G7e=n(L8,"CODE",{});var Qea=s(G7e);jHr=r(Qea,"pretrained_model_name_or_path"),Qea.forEach(t),DHr=r(L8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=n(L8,"CODE",{});var Wea=s(O7e);GHr=r(Wea,"pretrained_model_name_or_path"),Wea.forEach(t),OHr=r(L8,":"),L8.forEach(t),VHr=i(wi),de=n(wi,"UL",{});var he=s(de);hA=n(he,"LI",{});var UWe=s(hA);V7e=n(UWe,"STRONG",{});var Uea=s(V7e);XHr=r(Uea,"albert"),Uea.forEach(t),zHr=r(UWe," \u2014 "),Yre=n(UWe,"A",{href:!0});var Hea=s(Yre);QHr=r(Hea,"TFAlbertForQuestionAnswering"),Hea.forEach(t),WHr=r(UWe," (ALBERT model)"),UWe.forEach(t),UHr=i(he),uA=n(he,"LI",{});var HWe=s(uA);X7e=n(HWe,"STRONG",{});var Jea=s(X7e);HHr=r(Jea,"bert"),Jea.forEach(t),JHr=r(HWe," \u2014 "),Kre=n(HWe,"A",{href:!0});var Yea=s(Kre);YHr=r(Yea,"TFBertForQuestionAnswering"),Yea.forEach(t),KHr=r(HWe," (BERT model)"),HWe.forEach(t),ZHr=i(he),pA=n(he,"LI",{});var JWe=s(pA);z7e=n(JWe,"STRONG",{});var Kea=s(z7e);eJr=r(Kea,"camembert"),Kea.forEach(t),oJr=r(JWe," \u2014 "),Zre=n(JWe,"A",{href:!0});var Zea=s(Zre);rJr=r(Zea,"TFCamembertForQuestionAnswering"),Zea.forEach(t),tJr=r(JWe," (CamemBERT model)"),JWe.forEach(t),aJr=i(he),_A=n(he,"LI",{});var YWe=s(_A);Q7e=n(YWe,"STRONG",{});var eoa=s(Q7e);nJr=r(eoa,"convbert"),eoa.forEach(t),sJr=r(YWe," \u2014 "),ete=n(YWe,"A",{href:!0});var ooa=s(ete);lJr=r(ooa,"TFConvBertForQuestionAnswering"),ooa.forEach(t),iJr=r(YWe," (ConvBERT model)"),YWe.forEach(t),dJr=i(he),bA=n(he,"LI",{});var KWe=s(bA);W7e=n(KWe,"STRONG",{});var roa=s(W7e);cJr=r(roa,"deberta"),roa.forEach(t),mJr=r(KWe," \u2014 "),ote=n(KWe,"A",{href:!0});var toa=s(ote);fJr=r(toa,"TFDebertaForQuestionAnswering"),toa.forEach(t),gJr=r(KWe," (DeBERTa model)"),KWe.forEach(t),hJr=i(he),vA=n(he,"LI",{});var ZWe=s(vA);U7e=n(ZWe,"STRONG",{});var aoa=s(U7e);uJr=r(aoa,"deberta-v2"),aoa.forEach(t),pJr=r(ZWe," \u2014 "),rte=n(ZWe,"A",{href:!0});var noa=s(rte);_Jr=r(noa,"TFDebertaV2ForQuestionAnswering"),noa.forEach(t),bJr=r(ZWe," (DeBERTa-v2 model)"),ZWe.forEach(t),vJr=i(he),FA=n(he,"LI",{});var eUe=s(FA);H7e=n(eUe,"STRONG",{});var soa=s(H7e);FJr=r(soa,"distilbert"),soa.forEach(t),TJr=r(eUe," \u2014 "),tte=n(eUe,"A",{href:!0});var loa=s(tte);MJr=r(loa,"TFDistilBertForQuestionAnswering"),loa.forEach(t),EJr=r(eUe," (DistilBERT model)"),eUe.forEach(t),CJr=i(he),TA=n(he,"LI",{});var oUe=s(TA);J7e=n(oUe,"STRONG",{});var ioa=s(J7e);wJr=r(ioa,"electra"),ioa.forEach(t),AJr=r(oUe," \u2014 "),ate=n(oUe,"A",{href:!0});var doa=s(ate);yJr=r(doa,"TFElectraForQuestionAnswering"),doa.forEach(t),LJr=r(oUe," (ELECTRA model)"),oUe.forEach(t),xJr=i(he),MA=n(he,"LI",{});var rUe=s(MA);Y7e=n(rUe,"STRONG",{});var coa=s(Y7e);$Jr=r(coa,"flaubert"),coa.forEach(t),kJr=r(rUe," \u2014 "),nte=n(rUe,"A",{href:!0});var moa=s(nte);SJr=r(moa,"TFFlaubertForQuestionAnsweringSimple"),moa.forEach(t),RJr=r(rUe," (FlauBERT model)"),rUe.forEach(t),PJr=i(he),EA=n(he,"LI",{});var tUe=s(EA);K7e=n(tUe,"STRONG",{});var foa=s(K7e);BJr=r(foa,"funnel"),foa.forEach(t),IJr=r(tUe," \u2014 "),ste=n(tUe,"A",{href:!0});var goa=s(ste);NJr=r(goa,"TFFunnelForQuestionAnswering"),goa.forEach(t),qJr=r(tUe," (Funnel Transformer model)"),tUe.forEach(t),jJr=i(he),CA=n(he,"LI",{});var aUe=s(CA);Z7e=n(aUe,"STRONG",{});var hoa=s(Z7e);DJr=r(hoa,"gptj"),hoa.forEach(t),GJr=r(aUe," \u2014 "),lte=n(aUe,"A",{href:!0});var uoa=s(lte);OJr=r(uoa,"TFGPTJForQuestionAnswering"),uoa.forEach(t),VJr=r(aUe," (GPT-J model)"),aUe.forEach(t),XJr=i(he),wA=n(he,"LI",{});var nUe=s(wA);eye=n(nUe,"STRONG",{});var poa=s(eye);zJr=r(poa,"layoutlmv3"),poa.forEach(t),QJr=r(nUe," \u2014 "),ite=n(nUe,"A",{href:!0});var _oa=s(ite);WJr=r(_oa,"TFLayoutLMv3ForQuestionAnswering"),_oa.forEach(t),UJr=r(nUe," (LayoutLMv3 model)"),nUe.forEach(t),HJr=i(he),AA=n(he,"LI",{});var sUe=s(AA);oye=n(sUe,"STRONG",{});var boa=s(oye);JJr=r(boa,"longformer"),boa.forEach(t),YJr=r(sUe," \u2014 "),dte=n(sUe,"A",{href:!0});var voa=s(dte);KJr=r(voa,"TFLongformerForQuestionAnswering"),voa.forEach(t),ZJr=r(sUe," (Longformer model)"),sUe.forEach(t),eYr=i(he),yA=n(he,"LI",{});var lUe=s(yA);rye=n(lUe,"STRONG",{});var Foa=s(rye);oYr=r(Foa,"mobilebert"),Foa.forEach(t),rYr=r(lUe," \u2014 "),cte=n(lUe,"A",{href:!0});var Toa=s(cte);tYr=r(Toa,"TFMobileBertForQuestionAnswering"),Toa.forEach(t),aYr=r(lUe," (MobileBERT model)"),lUe.forEach(t),nYr=i(he),LA=n(he,"LI",{});var iUe=s(LA);tye=n(iUe,"STRONG",{});var Moa=s(tye);sYr=r(Moa,"mpnet"),Moa.forEach(t),lYr=r(iUe," \u2014 "),mte=n(iUe,"A",{href:!0});var Eoa=s(mte);iYr=r(Eoa,"TFMPNetForQuestionAnswering"),Eoa.forEach(t),dYr=r(iUe," (MPNet model)"),iUe.forEach(t),cYr=i(he),xA=n(he,"LI",{});var dUe=s(xA);aye=n(dUe,"STRONG",{});var Coa=s(aye);mYr=r(Coa,"rembert"),Coa.forEach(t),fYr=r(dUe," \u2014 "),fte=n(dUe,"A",{href:!0});var woa=s(fte);gYr=r(woa,"TFRemBertForQuestionAnswering"),woa.forEach(t),hYr=r(dUe," (RemBERT model)"),dUe.forEach(t),uYr=i(he),$A=n(he,"LI",{});var cUe=s($A);nye=n(cUe,"STRONG",{});var Aoa=s(nye);pYr=r(Aoa,"roberta"),Aoa.forEach(t),_Yr=r(cUe," \u2014 "),gte=n(cUe,"A",{href:!0});var yoa=s(gte);bYr=r(yoa,"TFRobertaForQuestionAnswering"),yoa.forEach(t),vYr=r(cUe," (RoBERTa model)"),cUe.forEach(t),FYr=i(he),kA=n(he,"LI",{});var mUe=s(kA);sye=n(mUe,"STRONG",{});var Loa=s(sye);TYr=r(Loa,"roformer"),Loa.forEach(t),MYr=r(mUe," \u2014 "),hte=n(mUe,"A",{href:!0});var xoa=s(hte);EYr=r(xoa,"TFRoFormerForQuestionAnswering"),xoa.forEach(t),CYr=r(mUe," (RoFormer model)"),mUe.forEach(t),wYr=i(he),SA=n(he,"LI",{});var fUe=s(SA);lye=n(fUe,"STRONG",{});var $oa=s(lye);AYr=r($oa,"xlm"),$oa.forEach(t),yYr=r(fUe," \u2014 "),ute=n(fUe,"A",{href:!0});var koa=s(ute);LYr=r(koa,"TFXLMForQuestionAnsweringSimple"),koa.forEach(t),xYr=r(fUe," (XLM model)"),fUe.forEach(t),$Yr=i(he),RA=n(he,"LI",{});var gUe=s(RA);iye=n(gUe,"STRONG",{});var Soa=s(iye);kYr=r(Soa,"xlm-roberta"),Soa.forEach(t),SYr=r(gUe," \u2014 "),pte=n(gUe,"A",{href:!0});var Roa=s(pte);RYr=r(Roa,"TFXLMRobertaForQuestionAnswering"),Roa.forEach(t),PYr=r(gUe," (XLM-RoBERTa model)"),gUe.forEach(t),BYr=i(he),PA=n(he,"LI",{});var hUe=s(PA);dye=n(hUe,"STRONG",{});var Poa=s(dye);IYr=r(Poa,"xlnet"),Poa.forEach(t),NYr=r(hUe," \u2014 "),_te=n(hUe,"A",{href:!0});var Boa=s(_te);qYr=r(Boa,"TFXLNetForQuestionAnsweringSimple"),Boa.forEach(t),jYr=r(hUe," (XLNet model)"),hUe.forEach(t),he.forEach(t),DYr=i(wi),T(BA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),aKe=i(m),Lm=n(m,"H2",{class:!0});var Teo=s(Lm);IA=n(Teo,"A",{id:!0,class:!0,href:!0});var Ioa=s(IA);cye=n(Ioa,"SPAN",{});var Noa=s(cye);T(FS.$$.fragment,Noa),Noa.forEach(t),Ioa.forEach(t),GYr=i(Teo),mye=n(Teo,"SPAN",{});var qoa=s(mye);OYr=r(qoa,"TFAutoModelForVision2Seq"),qoa.forEach(t),Teo.forEach(t),nKe=i(m),Fr=n(m,"DIV",{class:!0});var Ai=s(Fr);T(TS.$$.fragment,Ai),VYr=i(Ai),xm=n(Ai,"P",{});var jle=s(xm);XYr=r(jle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bte=n(jle,"A",{href:!0});var joa=s(bte);zYr=r(joa,"from_pretrained()"),joa.forEach(t),QYr=r(jle," class method or the "),vte=n(jle,"A",{href:!0});var Doa=s(vte);WYr=r(Doa,"from_config()"),Doa.forEach(t),UYr=r(jle,` class
method.`),jle.forEach(t),HYr=i(Ai),MS=n(Ai,"P",{});var Meo=s(MS);JYr=r(Meo,"This class cannot be instantiated directly using "),fye=n(Meo,"CODE",{});var Goa=s(fye);YYr=r(Goa,"__init__()"),Goa.forEach(t),KYr=r(Meo," (throws an error)."),Meo.forEach(t),ZYr=i(Ai),ta=n(Ai,"DIV",{class:!0});var x8=s(ta);T(ES.$$.fragment,x8),eKr=i(x8),gye=n(x8,"P",{});var Ooa=s(gye);oKr=r(Ooa,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ooa.forEach(t),rKr=i(x8),$m=n(x8,"P",{});var Dle=s($m);tKr=r(Dle,`Note:
Loading a model from its configuration file does `),hye=n(Dle,"STRONG",{});var Voa=s(hye);aKr=r(Voa,"not"),Voa.forEach(t),nKr=r(Dle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fte=n(Dle,"A",{href:!0});var Xoa=s(Fte);sKr=r(Xoa,"from_pretrained()"),Xoa.forEach(t),lKr=r(Dle," to load the model weights."),Dle.forEach(t),iKr=i(x8),T(NA.$$.fragment,x8),x8.forEach(t),dKr=i(Ai),Jr=n(Ai,"DIV",{class:!0});var yi=s(Jr);T(CS.$$.fragment,yi),cKr=i(yi),uye=n(yi,"P",{});var zoa=s(uye);mKr=r(zoa,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zoa.forEach(t),fKr=i(yi),qn=n(yi,"P",{});var $8=s(qn);gKr=r($8,"The model class to instantiate is selected based on the "),pye=n($8,"CODE",{});var Qoa=s(pye);hKr=r(Qoa,"model_type"),Qoa.forEach(t),uKr=r($8,` property of the config object (either
passed as an argument or loaded from `),_ye=n($8,"CODE",{});var Woa=s(_ye);pKr=r(Woa,"pretrained_model_name_or_path"),Woa.forEach(t),_Kr=r($8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bye=n($8,"CODE",{});var Uoa=s(bye);bKr=r(Uoa,"pretrained_model_name_or_path"),Uoa.forEach(t),vKr=r($8,":"),$8.forEach(t),FKr=i(yi),vye=n(yi,"UL",{});var Hoa=s(vye);qA=n(Hoa,"LI",{});var uUe=s(qA);Fye=n(uUe,"STRONG",{});var Joa=s(Fye);TKr=r(Joa,"vision-encoder-decoder"),Joa.forEach(t),MKr=r(uUe," \u2014 "),Tte=n(uUe,"A",{href:!0});var Yoa=s(Tte);EKr=r(Yoa,"TFVisionEncoderDecoderModel"),Yoa.forEach(t),CKr=r(uUe," (Vision Encoder decoder model)"),uUe.forEach(t),Hoa.forEach(t),wKr=i(yi),T(jA.$$.fragment,yi),yi.forEach(t),Ai.forEach(t),sKe=i(m),km=n(m,"H2",{class:!0});var Eeo=s(km);DA=n(Eeo,"A",{id:!0,class:!0,href:!0});var Koa=s(DA);Tye=n(Koa,"SPAN",{});var Zoa=s(Tye);T(wS.$$.fragment,Zoa),Zoa.forEach(t),Koa.forEach(t),AKr=i(Eeo),Mye=n(Eeo,"SPAN",{});var era=s(Mye);yKr=r(era,"TFAutoModelForSpeechSeq2Seq"),era.forEach(t),Eeo.forEach(t),lKe=i(m),Tr=n(m,"DIV",{class:!0});var Li=s(Tr);T(AS.$$.fragment,Li),LKr=i(Li),Sm=n(Li,"P",{});var Gle=s(Sm);xKr=r(Gle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mte=n(Gle,"A",{href:!0});var ora=s(Mte);$Kr=r(ora,"from_pretrained()"),ora.forEach(t),kKr=r(Gle," class method or the "),Ete=n(Gle,"A",{href:!0});var rra=s(Ete);SKr=r(rra,"from_config()"),rra.forEach(t),RKr=r(Gle,` class
method.`),Gle.forEach(t),PKr=i(Li),yS=n(Li,"P",{});var Ceo=s(yS);BKr=r(Ceo,"This class cannot be instantiated directly using "),Eye=n(Ceo,"CODE",{});var tra=s(Eye);IKr=r(tra,"__init__()"),tra.forEach(t),NKr=r(Ceo," (throws an error)."),Ceo.forEach(t),qKr=i(Li),aa=n(Li,"DIV",{class:!0});var k8=s(aa);T(LS.$$.fragment,k8),jKr=i(k8),Cye=n(k8,"P",{});var ara=s(Cye);DKr=r(ara,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ara.forEach(t),GKr=i(k8),Rm=n(k8,"P",{});var Ole=s(Rm);OKr=r(Ole,`Note:
Loading a model from its configuration file does `),wye=n(Ole,"STRONG",{});var nra=s(wye);VKr=r(nra,"not"),nra.forEach(t),XKr=r(Ole,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cte=n(Ole,"A",{href:!0});var sra=s(Cte);zKr=r(sra,"from_pretrained()"),sra.forEach(t),QKr=r(Ole," to load the model weights."),Ole.forEach(t),WKr=i(k8),T(GA.$$.fragment,k8),k8.forEach(t),UKr=i(Li),Yr=n(Li,"DIV",{class:!0});var xi=s(Yr);T(xS.$$.fragment,xi),HKr=i(xi),Aye=n(xi,"P",{});var lra=s(Aye);JKr=r(lra,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lra.forEach(t),YKr=i(xi),jn=n(xi,"P",{});var S8=s(jn);KKr=r(S8,"The model class to instantiate is selected based on the "),yye=n(S8,"CODE",{});var ira=s(yye);ZKr=r(ira,"model_type"),ira.forEach(t),eZr=r(S8,` property of the config object (either
passed as an argument or loaded from `),Lye=n(S8,"CODE",{});var dra=s(Lye);oZr=r(dra,"pretrained_model_name_or_path"),dra.forEach(t),rZr=r(S8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xye=n(S8,"CODE",{});var cra=s(xye);tZr=r(cra,"pretrained_model_name_or_path"),cra.forEach(t),aZr=r(S8,":"),S8.forEach(t),nZr=i(xi),$ye=n(xi,"UL",{});var mra=s($ye);OA=n(mra,"LI",{});var pUe=s(OA);kye=n(pUe,"STRONG",{});var fra=s(kye);sZr=r(fra,"speech_to_text"),fra.forEach(t),lZr=r(pUe," \u2014 "),wte=n(pUe,"A",{href:!0});var gra=s(wte);iZr=r(gra,"TFSpeech2TextForConditionalGeneration"),gra.forEach(t),dZr=r(pUe," (Speech2Text model)"),pUe.forEach(t),mra.forEach(t),cZr=i(xi),T(VA.$$.fragment,xi),xi.forEach(t),Li.forEach(t),iKe=i(m),Pm=n(m,"H2",{class:!0});var weo=s(Pm);XA=n(weo,"A",{id:!0,class:!0,href:!0});var hra=s(XA);Sye=n(hra,"SPAN",{});var ura=s(Sye);T($S.$$.fragment,ura),ura.forEach(t),hra.forEach(t),mZr=i(weo),Rye=n(weo,"SPAN",{});var pra=s(Rye);fZr=r(pra,"FlaxAutoModel"),pra.forEach(t),weo.forEach(t),dKe=i(m),Mr=n(m,"DIV",{class:!0});var $i=s(Mr);T(kS.$$.fragment,$i),gZr=i($i),Bm=n($i,"P",{});var Vle=s(Bm);hZr=r(Vle,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Ate=n(Vle,"A",{href:!0});var _ra=s(Ate);uZr=r(_ra,"from_pretrained()"),_ra.forEach(t),pZr=r(Vle," class method or the "),yte=n(Vle,"A",{href:!0});var bra=s(yte);_Zr=r(bra,"from_config()"),bra.forEach(t),bZr=r(Vle,` class
method.`),Vle.forEach(t),vZr=i($i),SS=n($i,"P",{});var Aeo=s(SS);FZr=r(Aeo,"This class cannot be instantiated directly using "),Pye=n(Aeo,"CODE",{});var vra=s(Pye);TZr=r(vra,"__init__()"),vra.forEach(t),MZr=r(Aeo," (throws an error)."),Aeo.forEach(t),EZr=i($i),na=n($i,"DIV",{class:!0});var R8=s(na);T(RS.$$.fragment,R8),CZr=i(R8),Bye=n(R8,"P",{});var Fra=s(Bye);wZr=r(Fra,"Instantiates one of the base model classes of the library from a configuration."),Fra.forEach(t),AZr=i(R8),Im=n(R8,"P",{});var Xle=s(Im);yZr=r(Xle,`Note:
Loading a model from its configuration file does `),Iye=n(Xle,"STRONG",{});var Tra=s(Iye);LZr=r(Tra,"not"),Tra.forEach(t),xZr=r(Xle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lte=n(Xle,"A",{href:!0});var Mra=s(Lte);$Zr=r(Mra,"from_pretrained()"),Mra.forEach(t),kZr=r(Xle," to load the model weights."),Xle.forEach(t),SZr=i(R8),T(zA.$$.fragment,R8),R8.forEach(t),RZr=i($i),Kr=n($i,"DIV",{class:!0});var ki=s(Kr);T(PS.$$.fragment,ki),PZr=i(ki),Nye=n(ki,"P",{});var Era=s(Nye);BZr=r(Era,"Instantiate one of the base model classes of the library from a pretrained model."),Era.forEach(t),IZr=i(ki),Dn=n(ki,"P",{});var P8=s(Dn);NZr=r(P8,"The model class to instantiate is selected based on the "),qye=n(P8,"CODE",{});var Cra=s(qye);qZr=r(Cra,"model_type"),Cra.forEach(t),jZr=r(P8,` property of the config object (either
passed as an argument or loaded from `),jye=n(P8,"CODE",{});var wra=s(jye);DZr=r(wra,"pretrained_model_name_or_path"),wra.forEach(t),GZr=r(P8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dye=n(P8,"CODE",{});var Ara=s(Dye);OZr=r(Ara,"pretrained_model_name_or_path"),Ara.forEach(t),VZr=r(P8,":"),P8.forEach(t),XZr=i(ki),te=n(ki,"UL",{});var ne=s(te);QA=n(ne,"LI",{});var _Ue=s(QA);Gye=n(_Ue,"STRONG",{});var yra=s(Gye);zZr=r(yra,"albert"),yra.forEach(t),QZr=r(_Ue," \u2014 "),xte=n(_Ue,"A",{href:!0});var Lra=s(xte);WZr=r(Lra,"FlaxAlbertModel"),Lra.forEach(t),UZr=r(_Ue," (ALBERT model)"),_Ue.forEach(t),HZr=i(ne),WA=n(ne,"LI",{});var bUe=s(WA);Oye=n(bUe,"STRONG",{});var xra=s(Oye);JZr=r(xra,"bart"),xra.forEach(t),YZr=r(bUe," \u2014 "),$te=n(bUe,"A",{href:!0});var $ra=s($te);KZr=r($ra,"FlaxBartModel"),$ra.forEach(t),ZZr=r(bUe," (BART model)"),bUe.forEach(t),eet=i(ne),UA=n(ne,"LI",{});var vUe=s(UA);Vye=n(vUe,"STRONG",{});var kra=s(Vye);oet=r(kra,"beit"),kra.forEach(t),ret=r(vUe," \u2014 "),kte=n(vUe,"A",{href:!0});var Sra=s(kte);tet=r(Sra,"FlaxBeitModel"),Sra.forEach(t),aet=r(vUe," (BEiT model)"),vUe.forEach(t),net=i(ne),HA=n(ne,"LI",{});var FUe=s(HA);Xye=n(FUe,"STRONG",{});var Rra=s(Xye);set=r(Rra,"bert"),Rra.forEach(t),iet=r(FUe," \u2014 "),Ste=n(FUe,"A",{href:!0});var Pra=s(Ste);det=r(Pra,"FlaxBertModel"),Pra.forEach(t),cet=r(FUe," (BERT model)"),FUe.forEach(t),met=i(ne),JA=n(ne,"LI",{});var TUe=s(JA);zye=n(TUe,"STRONG",{});var Bra=s(zye);fet=r(Bra,"big_bird"),Bra.forEach(t),get=r(TUe," \u2014 "),Rte=n(TUe,"A",{href:!0});var Ira=s(Rte);het=r(Ira,"FlaxBigBirdModel"),Ira.forEach(t),uet=r(TUe," (BigBird model)"),TUe.forEach(t),pet=i(ne),YA=n(ne,"LI",{});var MUe=s(YA);Qye=n(MUe,"STRONG",{});var Nra=s(Qye);_et=r(Nra,"blenderbot"),Nra.forEach(t),bet=r(MUe," \u2014 "),Pte=n(MUe,"A",{href:!0});var qra=s(Pte);vet=r(qra,"FlaxBlenderbotModel"),qra.forEach(t),Fet=r(MUe," (Blenderbot model)"),MUe.forEach(t),Tet=i(ne),KA=n(ne,"LI",{});var EUe=s(KA);Wye=n(EUe,"STRONG",{});var jra=s(Wye);Met=r(jra,"blenderbot-small"),jra.forEach(t),Eet=r(EUe," \u2014 "),Bte=n(EUe,"A",{href:!0});var Dra=s(Bte);Cet=r(Dra,"FlaxBlenderbotSmallModel"),Dra.forEach(t),wet=r(EUe," (BlenderbotSmall model)"),EUe.forEach(t),Aet=i(ne),ZA=n(ne,"LI",{});var CUe=s(ZA);Uye=n(CUe,"STRONG",{});var Gra=s(Uye);yet=r(Gra,"clip"),Gra.forEach(t),Let=r(CUe," \u2014 "),Ite=n(CUe,"A",{href:!0});var Ora=s(Ite);xet=r(Ora,"FlaxCLIPModel"),Ora.forEach(t),$et=r(CUe," (CLIP model)"),CUe.forEach(t),ket=i(ne),e6=n(ne,"LI",{});var wUe=s(e6);Hye=n(wUe,"STRONG",{});var Vra=s(Hye);Set=r(Vra,"distilbert"),Vra.forEach(t),Ret=r(wUe," \u2014 "),Nte=n(wUe,"A",{href:!0});var Xra=s(Nte);Pet=r(Xra,"FlaxDistilBertModel"),Xra.forEach(t),Bet=r(wUe," (DistilBERT model)"),wUe.forEach(t),Iet=i(ne),o6=n(ne,"LI",{});var AUe=s(o6);Jye=n(AUe,"STRONG",{});var zra=s(Jye);Net=r(zra,"electra"),zra.forEach(t),qet=r(AUe," \u2014 "),qte=n(AUe,"A",{href:!0});var Qra=s(qte);jet=r(Qra,"FlaxElectraModel"),Qra.forEach(t),Det=r(AUe," (ELECTRA model)"),AUe.forEach(t),Get=i(ne),r6=n(ne,"LI",{});var yUe=s(r6);Yye=n(yUe,"STRONG",{});var Wra=s(Yye);Oet=r(Wra,"gpt2"),Wra.forEach(t),Vet=r(yUe," \u2014 "),jte=n(yUe,"A",{href:!0});var Ura=s(jte);Xet=r(Ura,"FlaxGPT2Model"),Ura.forEach(t),zet=r(yUe," (OpenAI GPT-2 model)"),yUe.forEach(t),Qet=i(ne),t6=n(ne,"LI",{});var LUe=s(t6);Kye=n(LUe,"STRONG",{});var Hra=s(Kye);Wet=r(Hra,"gpt_neo"),Hra.forEach(t),Uet=r(LUe," \u2014 "),Dte=n(LUe,"A",{href:!0});var Jra=s(Dte);Het=r(Jra,"FlaxGPTNeoModel"),Jra.forEach(t),Jet=r(LUe," (GPT Neo model)"),LUe.forEach(t),Yet=i(ne),a6=n(ne,"LI",{});var xUe=s(a6);Zye=n(xUe,"STRONG",{});var Yra=s(Zye);Ket=r(Yra,"gptj"),Yra.forEach(t),Zet=r(xUe," \u2014 "),Gte=n(xUe,"A",{href:!0});var Kra=s(Gte);eot=r(Kra,"FlaxGPTJModel"),Kra.forEach(t),oot=r(xUe," (GPT-J model)"),xUe.forEach(t),rot=i(ne),n6=n(ne,"LI",{});var $Ue=s(n6);eLe=n($Ue,"STRONG",{});var Zra=s(eLe);tot=r(Zra,"longt5"),Zra.forEach(t),aot=r($Ue," \u2014 "),Ote=n($Ue,"A",{href:!0});var eta=s(Ote);not=r(eta,"FlaxLongT5Model"),eta.forEach(t),sot=r($Ue," (LongT5 model)"),$Ue.forEach(t),lot=i(ne),s6=n(ne,"LI",{});var kUe=s(s6);oLe=n(kUe,"STRONG",{});var ota=s(oLe);iot=r(ota,"marian"),ota.forEach(t),dot=r(kUe," \u2014 "),Vte=n(kUe,"A",{href:!0});var rta=s(Vte);cot=r(rta,"FlaxMarianModel"),rta.forEach(t),mot=r(kUe," (Marian model)"),kUe.forEach(t),fot=i(ne),l6=n(ne,"LI",{});var SUe=s(l6);rLe=n(SUe,"STRONG",{});var tta=s(rLe);got=r(tta,"mbart"),tta.forEach(t),hot=r(SUe," \u2014 "),Xte=n(SUe,"A",{href:!0});var ata=s(Xte);uot=r(ata,"FlaxMBartModel"),ata.forEach(t),pot=r(SUe," (mBART model)"),SUe.forEach(t),_ot=i(ne),i6=n(ne,"LI",{});var RUe=s(i6);tLe=n(RUe,"STRONG",{});var nta=s(tLe);bot=r(nta,"mt5"),nta.forEach(t),vot=r(RUe," \u2014 "),zte=n(RUe,"A",{href:!0});var sta=s(zte);Fot=r(sta,"FlaxMT5Model"),sta.forEach(t),Tot=r(RUe," (MT5 model)"),RUe.forEach(t),Mot=i(ne),d6=n(ne,"LI",{});var PUe=s(d6);aLe=n(PUe,"STRONG",{});var lta=s(aLe);Eot=r(lta,"opt"),lta.forEach(t),Cot=r(PUe," \u2014 "),Qte=n(PUe,"A",{href:!0});var ita=s(Qte);wot=r(ita,"FlaxOPTModel"),ita.forEach(t),Aot=r(PUe," (OPT model)"),PUe.forEach(t),yot=i(ne),c6=n(ne,"LI",{});var BUe=s(c6);nLe=n(BUe,"STRONG",{});var dta=s(nLe);Lot=r(dta,"pegasus"),dta.forEach(t),xot=r(BUe," \u2014 "),Wte=n(BUe,"A",{href:!0});var cta=s(Wte);$ot=r(cta,"FlaxPegasusModel"),cta.forEach(t),kot=r(BUe," (Pegasus model)"),BUe.forEach(t),Sot=i(ne),m6=n(ne,"LI",{});var IUe=s(m6);sLe=n(IUe,"STRONG",{});var mta=s(sLe);Rot=r(mta,"roberta"),mta.forEach(t),Pot=r(IUe," \u2014 "),Ute=n(IUe,"A",{href:!0});var fta=s(Ute);Bot=r(fta,"FlaxRobertaModel"),fta.forEach(t),Iot=r(IUe," (RoBERTa model)"),IUe.forEach(t),Not=i(ne),f6=n(ne,"LI",{});var NUe=s(f6);lLe=n(NUe,"STRONG",{});var gta=s(lLe);qot=r(gta,"roformer"),gta.forEach(t),jot=r(NUe," \u2014 "),Hte=n(NUe,"A",{href:!0});var hta=s(Hte);Dot=r(hta,"FlaxRoFormerModel"),hta.forEach(t),Got=r(NUe," (RoFormer model)"),NUe.forEach(t),Oot=i(ne),g6=n(ne,"LI",{});var qUe=s(g6);iLe=n(qUe,"STRONG",{});var uta=s(iLe);Vot=r(uta,"t5"),uta.forEach(t),Xot=r(qUe," \u2014 "),Jte=n(qUe,"A",{href:!0});var pta=s(Jte);zot=r(pta,"FlaxT5Model"),pta.forEach(t),Qot=r(qUe," (T5 model)"),qUe.forEach(t),Wot=i(ne),h6=n(ne,"LI",{});var jUe=s(h6);dLe=n(jUe,"STRONG",{});var _ta=s(dLe);Uot=r(_ta,"vision-text-dual-encoder"),_ta.forEach(t),Hot=r(jUe," \u2014 "),Yte=n(jUe,"A",{href:!0});var bta=s(Yte);Jot=r(bta,"FlaxVisionTextDualEncoderModel"),bta.forEach(t),Yot=r(jUe," (VisionTextDualEncoder model)"),jUe.forEach(t),Kot=i(ne),u6=n(ne,"LI",{});var DUe=s(u6);cLe=n(DUe,"STRONG",{});var vta=s(cLe);Zot=r(vta,"vit"),vta.forEach(t),ert=r(DUe," \u2014 "),Kte=n(DUe,"A",{href:!0});var Fta=s(Kte);ort=r(Fta,"FlaxViTModel"),Fta.forEach(t),rrt=r(DUe," (ViT model)"),DUe.forEach(t),trt=i(ne),p6=n(ne,"LI",{});var GUe=s(p6);mLe=n(GUe,"STRONG",{});var Tta=s(mLe);art=r(Tta,"wav2vec2"),Tta.forEach(t),nrt=r(GUe," \u2014 "),Zte=n(GUe,"A",{href:!0});var Mta=s(Zte);srt=r(Mta,"FlaxWav2Vec2Model"),Mta.forEach(t),lrt=r(GUe," (Wav2Vec2 model)"),GUe.forEach(t),irt=i(ne),_6=n(ne,"LI",{});var OUe=s(_6);fLe=n(OUe,"STRONG",{});var Eta=s(fLe);drt=r(Eta,"xglm"),Eta.forEach(t),crt=r(OUe," \u2014 "),eae=n(OUe,"A",{href:!0});var Cta=s(eae);mrt=r(Cta,"FlaxXGLMModel"),Cta.forEach(t),frt=r(OUe," (XGLM model)"),OUe.forEach(t),grt=i(ne),b6=n(ne,"LI",{});var VUe=s(b6);gLe=n(VUe,"STRONG",{});var wta=s(gLe);hrt=r(wta,"xlm-roberta"),wta.forEach(t),urt=r(VUe," \u2014 "),oae=n(VUe,"A",{href:!0});var Ata=s(oae);prt=r(Ata,"FlaxXLMRobertaModel"),Ata.forEach(t),_rt=r(VUe," (XLM-RoBERTa model)"),VUe.forEach(t),ne.forEach(t),brt=i(ki),T(v6.$$.fragment,ki),ki.forEach(t),$i.forEach(t),cKe=i(m),Nm=n(m,"H2",{class:!0});var yeo=s(Nm);F6=n(yeo,"A",{id:!0,class:!0,href:!0});var yta=s(F6);hLe=n(yta,"SPAN",{});var Lta=s(hLe);T(BS.$$.fragment,Lta),Lta.forEach(t),yta.forEach(t),vrt=i(yeo),uLe=n(yeo,"SPAN",{});var xta=s(uLe);Frt=r(xta,"FlaxAutoModelForCausalLM"),xta.forEach(t),yeo.forEach(t),mKe=i(m),Er=n(m,"DIV",{class:!0});var Si=s(Er);T(IS.$$.fragment,Si),Trt=i(Si),qm=n(Si,"P",{});var zle=s(qm);Mrt=r(zle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rae=n(zle,"A",{href:!0});var $ta=s(rae);Ert=r($ta,"from_pretrained()"),$ta.forEach(t),Crt=r(zle," class method or the "),tae=n(zle,"A",{href:!0});var kta=s(tae);wrt=r(kta,"from_config()"),kta.forEach(t),Art=r(zle,` class
method.`),zle.forEach(t),yrt=i(Si),NS=n(Si,"P",{});var Leo=s(NS);Lrt=r(Leo,"This class cannot be instantiated directly using "),pLe=n(Leo,"CODE",{});var Sta=s(pLe);xrt=r(Sta,"__init__()"),Sta.forEach(t),$rt=r(Leo," (throws an error)."),Leo.forEach(t),krt=i(Si),sa=n(Si,"DIV",{class:!0});var B8=s(sa);T(qS.$$.fragment,B8),Srt=i(B8),_Le=n(B8,"P",{});var Rta=s(_Le);Rrt=r(Rta,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rta.forEach(t),Prt=i(B8),jm=n(B8,"P",{});var Qle=s(jm);Brt=r(Qle,`Note:
Loading a model from its configuration file does `),bLe=n(Qle,"STRONG",{});var Pta=s(bLe);Irt=r(Pta,"not"),Pta.forEach(t),Nrt=r(Qle,` load the model weights. It only affects the
model\u2019s configuration. Use `),aae=n(Qle,"A",{href:!0});var Bta=s(aae);qrt=r(Bta,"from_pretrained()"),Bta.forEach(t),jrt=r(Qle," to load the model weights."),Qle.forEach(t),Drt=i(B8),T(T6.$$.fragment,B8),B8.forEach(t),Grt=i(Si),Zr=n(Si,"DIV",{class:!0});var Ri=s(Zr);T(jS.$$.fragment,Ri),Ort=i(Ri),vLe=n(Ri,"P",{});var Ita=s(vLe);Vrt=r(Ita,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ita.forEach(t),Xrt=i(Ri),Gn=n(Ri,"P",{});var I8=s(Gn);zrt=r(I8,"The model class to instantiate is selected based on the "),FLe=n(I8,"CODE",{});var Nta=s(FLe);Qrt=r(Nta,"model_type"),Nta.forEach(t),Wrt=r(I8,` property of the config object (either
passed as an argument or loaded from `),TLe=n(I8,"CODE",{});var qta=s(TLe);Urt=r(qta,"pretrained_model_name_or_path"),qta.forEach(t),Hrt=r(I8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MLe=n(I8,"CODE",{});var jta=s(MLe);Jrt=r(jta,"pretrained_model_name_or_path"),jta.forEach(t),Yrt=r(I8,":"),I8.forEach(t),Krt=i(Ri),xe=n(Ri,"UL",{});var qe=s(xe);M6=n(qe,"LI",{});var XUe=s(M6);ELe=n(XUe,"STRONG",{});var Dta=s(ELe);Zrt=r(Dta,"bart"),Dta.forEach(t),ett=r(XUe," \u2014 "),nae=n(XUe,"A",{href:!0});var Gta=s(nae);ott=r(Gta,"FlaxBartForCausalLM"),Gta.forEach(t),rtt=r(XUe," (BART model)"),XUe.forEach(t),ttt=i(qe),E6=n(qe,"LI",{});var zUe=s(E6);CLe=n(zUe,"STRONG",{});var Ota=s(CLe);att=r(Ota,"bert"),Ota.forEach(t),ntt=r(zUe," \u2014 "),sae=n(zUe,"A",{href:!0});var Vta=s(sae);stt=r(Vta,"FlaxBertForCausalLM"),Vta.forEach(t),ltt=r(zUe," (BERT model)"),zUe.forEach(t),itt=i(qe),C6=n(qe,"LI",{});var QUe=s(C6);wLe=n(QUe,"STRONG",{});var Xta=s(wLe);dtt=r(Xta,"big_bird"),Xta.forEach(t),ctt=r(QUe," \u2014 "),lae=n(QUe,"A",{href:!0});var zta=s(lae);mtt=r(zta,"FlaxBigBirdForCausalLM"),zta.forEach(t),ftt=r(QUe," (BigBird model)"),QUe.forEach(t),gtt=i(qe),w6=n(qe,"LI",{});var WUe=s(w6);ALe=n(WUe,"STRONG",{});var Qta=s(ALe);htt=r(Qta,"electra"),Qta.forEach(t),utt=r(WUe," \u2014 "),iae=n(WUe,"A",{href:!0});var Wta=s(iae);ptt=r(Wta,"FlaxElectraForCausalLM"),Wta.forEach(t),_tt=r(WUe," (ELECTRA model)"),WUe.forEach(t),btt=i(qe),A6=n(qe,"LI",{});var UUe=s(A6);yLe=n(UUe,"STRONG",{});var Uta=s(yLe);vtt=r(Uta,"gpt2"),Uta.forEach(t),Ftt=r(UUe," \u2014 "),dae=n(UUe,"A",{href:!0});var Hta=s(dae);Ttt=r(Hta,"FlaxGPT2LMHeadModel"),Hta.forEach(t),Mtt=r(UUe," (OpenAI GPT-2 model)"),UUe.forEach(t),Ett=i(qe),y6=n(qe,"LI",{});var HUe=s(y6);LLe=n(HUe,"STRONG",{});var Jta=s(LLe);Ctt=r(Jta,"gpt_neo"),Jta.forEach(t),wtt=r(HUe," \u2014 "),cae=n(HUe,"A",{href:!0});var Yta=s(cae);Att=r(Yta,"FlaxGPTNeoForCausalLM"),Yta.forEach(t),ytt=r(HUe," (GPT Neo model)"),HUe.forEach(t),Ltt=i(qe),L6=n(qe,"LI",{});var JUe=s(L6);xLe=n(JUe,"STRONG",{});var Kta=s(xLe);xtt=r(Kta,"gptj"),Kta.forEach(t),$tt=r(JUe," \u2014 "),mae=n(JUe,"A",{href:!0});var Zta=s(mae);ktt=r(Zta,"FlaxGPTJForCausalLM"),Zta.forEach(t),Stt=r(JUe," (GPT-J model)"),JUe.forEach(t),Rtt=i(qe),x6=n(qe,"LI",{});var YUe=s(x6);$Le=n(YUe,"STRONG",{});var eaa=s($Le);Ptt=r(eaa,"opt"),eaa.forEach(t),Btt=r(YUe," \u2014 "),fae=n(YUe,"A",{href:!0});var oaa=s(fae);Itt=r(oaa,"FlaxOPTForCausalLM"),oaa.forEach(t),Ntt=r(YUe," (OPT model)"),YUe.forEach(t),qtt=i(qe),$6=n(qe,"LI",{});var KUe=s($6);kLe=n(KUe,"STRONG",{});var raa=s(kLe);jtt=r(raa,"roberta"),raa.forEach(t),Dtt=r(KUe," \u2014 "),gae=n(KUe,"A",{href:!0});var taa=s(gae);Gtt=r(taa,"FlaxRobertaForCausalLM"),taa.forEach(t),Ott=r(KUe," (RoBERTa model)"),KUe.forEach(t),Vtt=i(qe),k6=n(qe,"LI",{});var ZUe=s(k6);SLe=n(ZUe,"STRONG",{});var aaa=s(SLe);Xtt=r(aaa,"xglm"),aaa.forEach(t),ztt=r(ZUe," \u2014 "),hae=n(ZUe,"A",{href:!0});var naa=s(hae);Qtt=r(naa,"FlaxXGLMForCausalLM"),naa.forEach(t),Wtt=r(ZUe," (XGLM model)"),ZUe.forEach(t),qe.forEach(t),Utt=i(Ri),T(S6.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),fKe=i(m),Dm=n(m,"H2",{class:!0});var xeo=s(Dm);R6=n(xeo,"A",{id:!0,class:!0,href:!0});var saa=s(R6);RLe=n(saa,"SPAN",{});var laa=s(RLe);T(DS.$$.fragment,laa),laa.forEach(t),saa.forEach(t),Htt=i(xeo),PLe=n(xeo,"SPAN",{});var iaa=s(PLe);Jtt=r(iaa,"FlaxAutoModelForPreTraining"),iaa.forEach(t),xeo.forEach(t),gKe=i(m),Cr=n(m,"DIV",{class:!0});var Pi=s(Cr);T(GS.$$.fragment,Pi),Ytt=i(Pi),Gm=n(Pi,"P",{});var Wle=s(Gm);Ktt=r(Wle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uae=n(Wle,"A",{href:!0});var daa=s(uae);Ztt=r(daa,"from_pretrained()"),daa.forEach(t),eat=r(Wle," class method or the "),pae=n(Wle,"A",{href:!0});var caa=s(pae);oat=r(caa,"from_config()"),caa.forEach(t),rat=r(Wle,` class
method.`),Wle.forEach(t),tat=i(Pi),OS=n(Pi,"P",{});var $eo=s(OS);aat=r($eo,"This class cannot be instantiated directly using "),BLe=n($eo,"CODE",{});var maa=s(BLe);nat=r(maa,"__init__()"),maa.forEach(t),sat=r($eo," (throws an error)."),$eo.forEach(t),lat=i(Pi),la=n(Pi,"DIV",{class:!0});var N8=s(la);T(VS.$$.fragment,N8),iat=i(N8),ILe=n(N8,"P",{});var faa=s(ILe);dat=r(faa,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),faa.forEach(t),cat=i(N8),Om=n(N8,"P",{});var Ule=s(Om);mat=r(Ule,`Note:
Loading a model from its configuration file does `),NLe=n(Ule,"STRONG",{});var gaa=s(NLe);fat=r(gaa,"not"),gaa.forEach(t),gat=r(Ule,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ae=n(Ule,"A",{href:!0});var haa=s(_ae);hat=r(haa,"from_pretrained()"),haa.forEach(t),uat=r(Ule," to load the model weights."),Ule.forEach(t),pat=i(N8),T(P6.$$.fragment,N8),N8.forEach(t),_at=i(Pi),et=n(Pi,"DIV",{class:!0});var Bi=s(et);T(XS.$$.fragment,Bi),bat=i(Bi),qLe=n(Bi,"P",{});var uaa=s(qLe);vat=r(uaa,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uaa.forEach(t),Fat=i(Bi),On=n(Bi,"P",{});var q8=s(On);Tat=r(q8,"The model class to instantiate is selected based on the "),jLe=n(q8,"CODE",{});var paa=s(jLe);Mat=r(paa,"model_type"),paa.forEach(t),Eat=r(q8,` property of the config object (either
passed as an argument or loaded from `),DLe=n(q8,"CODE",{});var _aa=s(DLe);Cat=r(_aa,"pretrained_model_name_or_path"),_aa.forEach(t),wat=r(q8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GLe=n(q8,"CODE",{});var baa=s(GLe);Aat=r(baa,"pretrained_model_name_or_path"),baa.forEach(t),yat=r(q8,":"),q8.forEach(t),Lat=i(Bi),Ee=n(Bi,"UL",{});var we=s(Ee);B6=n(we,"LI",{});var eHe=s(B6);OLe=n(eHe,"STRONG",{});var vaa=s(OLe);xat=r(vaa,"albert"),vaa.forEach(t),$at=r(eHe," \u2014 "),bae=n(eHe,"A",{href:!0});var Faa=s(bae);kat=r(Faa,"FlaxAlbertForPreTraining"),Faa.forEach(t),Sat=r(eHe," (ALBERT model)"),eHe.forEach(t),Rat=i(we),I6=n(we,"LI",{});var oHe=s(I6);VLe=n(oHe,"STRONG",{});var Taa=s(VLe);Pat=r(Taa,"bart"),Taa.forEach(t),Bat=r(oHe," \u2014 "),vae=n(oHe,"A",{href:!0});var Maa=s(vae);Iat=r(Maa,"FlaxBartForConditionalGeneration"),Maa.forEach(t),Nat=r(oHe," (BART model)"),oHe.forEach(t),qat=i(we),N6=n(we,"LI",{});var rHe=s(N6);XLe=n(rHe,"STRONG",{});var Eaa=s(XLe);jat=r(Eaa,"bert"),Eaa.forEach(t),Dat=r(rHe," \u2014 "),Fae=n(rHe,"A",{href:!0});var Caa=s(Fae);Gat=r(Caa,"FlaxBertForPreTraining"),Caa.forEach(t),Oat=r(rHe," (BERT model)"),rHe.forEach(t),Vat=i(we),q6=n(we,"LI",{});var tHe=s(q6);zLe=n(tHe,"STRONG",{});var waa=s(zLe);Xat=r(waa,"big_bird"),waa.forEach(t),zat=r(tHe," \u2014 "),Tae=n(tHe,"A",{href:!0});var Aaa=s(Tae);Qat=r(Aaa,"FlaxBigBirdForPreTraining"),Aaa.forEach(t),Wat=r(tHe," (BigBird model)"),tHe.forEach(t),Uat=i(we),j6=n(we,"LI",{});var aHe=s(j6);QLe=n(aHe,"STRONG",{});var yaa=s(QLe);Hat=r(yaa,"electra"),yaa.forEach(t),Jat=r(aHe," \u2014 "),Mae=n(aHe,"A",{href:!0});var Laa=s(Mae);Yat=r(Laa,"FlaxElectraForPreTraining"),Laa.forEach(t),Kat=r(aHe," (ELECTRA model)"),aHe.forEach(t),Zat=i(we),D6=n(we,"LI",{});var nHe=s(D6);WLe=n(nHe,"STRONG",{});var xaa=s(WLe);ent=r(xaa,"longt5"),xaa.forEach(t),ont=r(nHe," \u2014 "),Eae=n(nHe,"A",{href:!0});var $aa=s(Eae);rnt=r($aa,"FlaxLongT5ForConditionalGeneration"),$aa.forEach(t),tnt=r(nHe," (LongT5 model)"),nHe.forEach(t),ant=i(we),G6=n(we,"LI",{});var sHe=s(G6);ULe=n(sHe,"STRONG",{});var kaa=s(ULe);nnt=r(kaa,"mbart"),kaa.forEach(t),snt=r(sHe," \u2014 "),Cae=n(sHe,"A",{href:!0});var Saa=s(Cae);lnt=r(Saa,"FlaxMBartForConditionalGeneration"),Saa.forEach(t),int=r(sHe," (mBART model)"),sHe.forEach(t),dnt=i(we),O6=n(we,"LI",{});var lHe=s(O6);HLe=n(lHe,"STRONG",{});var Raa=s(HLe);cnt=r(Raa,"mt5"),Raa.forEach(t),mnt=r(lHe," \u2014 "),wae=n(lHe,"A",{href:!0});var Paa=s(wae);fnt=r(Paa,"FlaxMT5ForConditionalGeneration"),Paa.forEach(t),gnt=r(lHe," (MT5 model)"),lHe.forEach(t),hnt=i(we),V6=n(we,"LI",{});var iHe=s(V6);JLe=n(iHe,"STRONG",{});var Baa=s(JLe);unt=r(Baa,"roberta"),Baa.forEach(t),pnt=r(iHe," \u2014 "),Aae=n(iHe,"A",{href:!0});var Iaa=s(Aae);_nt=r(Iaa,"FlaxRobertaForMaskedLM"),Iaa.forEach(t),bnt=r(iHe," (RoBERTa model)"),iHe.forEach(t),vnt=i(we),X6=n(we,"LI",{});var dHe=s(X6);YLe=n(dHe,"STRONG",{});var Naa=s(YLe);Fnt=r(Naa,"roformer"),Naa.forEach(t),Tnt=r(dHe," \u2014 "),yae=n(dHe,"A",{href:!0});var qaa=s(yae);Mnt=r(qaa,"FlaxRoFormerForMaskedLM"),qaa.forEach(t),Ent=r(dHe," (RoFormer model)"),dHe.forEach(t),Cnt=i(we),z6=n(we,"LI",{});var cHe=s(z6);KLe=n(cHe,"STRONG",{});var jaa=s(KLe);wnt=r(jaa,"t5"),jaa.forEach(t),Ant=r(cHe," \u2014 "),Lae=n(cHe,"A",{href:!0});var Daa=s(Lae);ynt=r(Daa,"FlaxT5ForConditionalGeneration"),Daa.forEach(t),Lnt=r(cHe," (T5 model)"),cHe.forEach(t),xnt=i(we),Q6=n(we,"LI",{});var mHe=s(Q6);ZLe=n(mHe,"STRONG",{});var Gaa=s(ZLe);$nt=r(Gaa,"wav2vec2"),Gaa.forEach(t),knt=r(mHe," \u2014 "),xae=n(mHe,"A",{href:!0});var Oaa=s(xae);Snt=r(Oaa,"FlaxWav2Vec2ForPreTraining"),Oaa.forEach(t),Rnt=r(mHe," (Wav2Vec2 model)"),mHe.forEach(t),Pnt=i(we),W6=n(we,"LI",{});var fHe=s(W6);e8e=n(fHe,"STRONG",{});var Vaa=s(e8e);Bnt=r(Vaa,"xlm-roberta"),Vaa.forEach(t),Int=r(fHe," \u2014 "),$ae=n(fHe,"A",{href:!0});var Xaa=s($ae);Nnt=r(Xaa,"FlaxXLMRobertaForMaskedLM"),Xaa.forEach(t),qnt=r(fHe," (XLM-RoBERTa model)"),fHe.forEach(t),we.forEach(t),jnt=i(Bi),T(U6.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),hKe=i(m),Vm=n(m,"H2",{class:!0});var keo=s(Vm);H6=n(keo,"A",{id:!0,class:!0,href:!0});var zaa=s(H6);o8e=n(zaa,"SPAN",{});var Qaa=s(o8e);T(zS.$$.fragment,Qaa),Qaa.forEach(t),zaa.forEach(t),Dnt=i(keo),r8e=n(keo,"SPAN",{});var Waa=s(r8e);Gnt=r(Waa,"FlaxAutoModelForMaskedLM"),Waa.forEach(t),keo.forEach(t),uKe=i(m),wr=n(m,"DIV",{class:!0});var Ii=s(wr);T(QS.$$.fragment,Ii),Ont=i(Ii),Xm=n(Ii,"P",{});var Hle=s(Xm);Vnt=r(Hle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kae=n(Hle,"A",{href:!0});var Uaa=s(kae);Xnt=r(Uaa,"from_pretrained()"),Uaa.forEach(t),znt=r(Hle," class method or the "),Sae=n(Hle,"A",{href:!0});var Haa=s(Sae);Qnt=r(Haa,"from_config()"),Haa.forEach(t),Wnt=r(Hle,` class
method.`),Hle.forEach(t),Unt=i(Ii),WS=n(Ii,"P",{});var Seo=s(WS);Hnt=r(Seo,"This class cannot be instantiated directly using "),t8e=n(Seo,"CODE",{});var Jaa=s(t8e);Jnt=r(Jaa,"__init__()"),Jaa.forEach(t),Ynt=r(Seo," (throws an error)."),Seo.forEach(t),Knt=i(Ii),ia=n(Ii,"DIV",{class:!0});var j8=s(ia);T(US.$$.fragment,j8),Znt=i(j8),a8e=n(j8,"P",{});var Yaa=s(a8e);est=r(Yaa,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Yaa.forEach(t),ost=i(j8),zm=n(j8,"P",{});var Jle=s(zm);rst=r(Jle,`Note:
Loading a model from its configuration file does `),n8e=n(Jle,"STRONG",{});var Kaa=s(n8e);tst=r(Kaa,"not"),Kaa.forEach(t),ast=r(Jle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rae=n(Jle,"A",{href:!0});var Zaa=s(Rae);nst=r(Zaa,"from_pretrained()"),Zaa.forEach(t),sst=r(Jle," to load the model weights."),Jle.forEach(t),lst=i(j8),T(J6.$$.fragment,j8),j8.forEach(t),ist=i(Ii),ot=n(Ii,"DIV",{class:!0});var Ni=s(ot);T(HS.$$.fragment,Ni),dst=i(Ni),s8e=n(Ni,"P",{});var ena=s(s8e);cst=r(ena,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ena.forEach(t),mst=i(Ni),Vn=n(Ni,"P",{});var D8=s(Vn);fst=r(D8,"The model class to instantiate is selected based on the "),l8e=n(D8,"CODE",{});var ona=s(l8e);gst=r(ona,"model_type"),ona.forEach(t),hst=r(D8,` property of the config object (either
passed as an argument or loaded from `),i8e=n(D8,"CODE",{});var rna=s(i8e);ust=r(rna,"pretrained_model_name_or_path"),rna.forEach(t),pst=r(D8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d8e=n(D8,"CODE",{});var tna=s(d8e);_st=r(tna,"pretrained_model_name_or_path"),tna.forEach(t),bst=r(D8,":"),D8.forEach(t),vst=i(Ni),$e=n(Ni,"UL",{});var je=s($e);Y6=n(je,"LI",{});var gHe=s(Y6);c8e=n(gHe,"STRONG",{});var ana=s(c8e);Fst=r(ana,"albert"),ana.forEach(t),Tst=r(gHe," \u2014 "),Pae=n(gHe,"A",{href:!0});var nna=s(Pae);Mst=r(nna,"FlaxAlbertForMaskedLM"),nna.forEach(t),Est=r(gHe," (ALBERT model)"),gHe.forEach(t),Cst=i(je),K6=n(je,"LI",{});var hHe=s(K6);m8e=n(hHe,"STRONG",{});var sna=s(m8e);wst=r(sna,"bart"),sna.forEach(t),Ast=r(hHe," \u2014 "),Bae=n(hHe,"A",{href:!0});var lna=s(Bae);yst=r(lna,"FlaxBartForConditionalGeneration"),lna.forEach(t),Lst=r(hHe," (BART model)"),hHe.forEach(t),xst=i(je),Z6=n(je,"LI",{});var uHe=s(Z6);f8e=n(uHe,"STRONG",{});var ina=s(f8e);$st=r(ina,"bert"),ina.forEach(t),kst=r(uHe," \u2014 "),Iae=n(uHe,"A",{href:!0});var dna=s(Iae);Sst=r(dna,"FlaxBertForMaskedLM"),dna.forEach(t),Rst=r(uHe," (BERT model)"),uHe.forEach(t),Pst=i(je),e7=n(je,"LI",{});var pHe=s(e7);g8e=n(pHe,"STRONG",{});var cna=s(g8e);Bst=r(cna,"big_bird"),cna.forEach(t),Ist=r(pHe," \u2014 "),Nae=n(pHe,"A",{href:!0});var mna=s(Nae);Nst=r(mna,"FlaxBigBirdForMaskedLM"),mna.forEach(t),qst=r(pHe," (BigBird model)"),pHe.forEach(t),jst=i(je),o7=n(je,"LI",{});var _He=s(o7);h8e=n(_He,"STRONG",{});var fna=s(h8e);Dst=r(fna,"distilbert"),fna.forEach(t),Gst=r(_He," \u2014 "),qae=n(_He,"A",{href:!0});var gna=s(qae);Ost=r(gna,"FlaxDistilBertForMaskedLM"),gna.forEach(t),Vst=r(_He," (DistilBERT model)"),_He.forEach(t),Xst=i(je),r7=n(je,"LI",{});var bHe=s(r7);u8e=n(bHe,"STRONG",{});var hna=s(u8e);zst=r(hna,"electra"),hna.forEach(t),Qst=r(bHe," \u2014 "),jae=n(bHe,"A",{href:!0});var una=s(jae);Wst=r(una,"FlaxElectraForMaskedLM"),una.forEach(t),Ust=r(bHe," (ELECTRA model)"),bHe.forEach(t),Hst=i(je),t7=n(je,"LI",{});var vHe=s(t7);p8e=n(vHe,"STRONG",{});var pna=s(p8e);Jst=r(pna,"mbart"),pna.forEach(t),Yst=r(vHe," \u2014 "),Dae=n(vHe,"A",{href:!0});var _na=s(Dae);Kst=r(_na,"FlaxMBartForConditionalGeneration"),_na.forEach(t),Zst=r(vHe," (mBART model)"),vHe.forEach(t),elt=i(je),a7=n(je,"LI",{});var FHe=s(a7);_8e=n(FHe,"STRONG",{});var bna=s(_8e);olt=r(bna,"roberta"),bna.forEach(t),rlt=r(FHe," \u2014 "),Gae=n(FHe,"A",{href:!0});var vna=s(Gae);tlt=r(vna,"FlaxRobertaForMaskedLM"),vna.forEach(t),alt=r(FHe," (RoBERTa model)"),FHe.forEach(t),nlt=i(je),n7=n(je,"LI",{});var THe=s(n7);b8e=n(THe,"STRONG",{});var Fna=s(b8e);slt=r(Fna,"roformer"),Fna.forEach(t),llt=r(THe," \u2014 "),Oae=n(THe,"A",{href:!0});var Tna=s(Oae);ilt=r(Tna,"FlaxRoFormerForMaskedLM"),Tna.forEach(t),dlt=r(THe," (RoFormer model)"),THe.forEach(t),clt=i(je),s7=n(je,"LI",{});var MHe=s(s7);v8e=n(MHe,"STRONG",{});var Mna=s(v8e);mlt=r(Mna,"xlm-roberta"),Mna.forEach(t),flt=r(MHe," \u2014 "),Vae=n(MHe,"A",{href:!0});var Ena=s(Vae);glt=r(Ena,"FlaxXLMRobertaForMaskedLM"),Ena.forEach(t),hlt=r(MHe," (XLM-RoBERTa model)"),MHe.forEach(t),je.forEach(t),ult=i(Ni),T(l7.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),pKe=i(m),Qm=n(m,"H2",{class:!0});var Reo=s(Qm);i7=n(Reo,"A",{id:!0,class:!0,href:!0});var Cna=s(i7);F8e=n(Cna,"SPAN",{});var wna=s(F8e);T(JS.$$.fragment,wna),wna.forEach(t),Cna.forEach(t),plt=i(Reo),T8e=n(Reo,"SPAN",{});var Ana=s(T8e);_lt=r(Ana,"FlaxAutoModelForSeq2SeqLM"),Ana.forEach(t),Reo.forEach(t),_Ke=i(m),Ar=n(m,"DIV",{class:!0});var qi=s(Ar);T(YS.$$.fragment,qi),blt=i(qi),Wm=n(qi,"P",{});var Yle=s(Wm);vlt=r(Yle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Xae=n(Yle,"A",{href:!0});var yna=s(Xae);Flt=r(yna,"from_pretrained()"),yna.forEach(t),Tlt=r(Yle," class method or the "),zae=n(Yle,"A",{href:!0});var Lna=s(zae);Mlt=r(Lna,"from_config()"),Lna.forEach(t),Elt=r(Yle,` class
method.`),Yle.forEach(t),Clt=i(qi),KS=n(qi,"P",{});var Peo=s(KS);wlt=r(Peo,"This class cannot be instantiated directly using "),M8e=n(Peo,"CODE",{});var xna=s(M8e);Alt=r(xna,"__init__()"),xna.forEach(t),ylt=r(Peo," (throws an error)."),Peo.forEach(t),Llt=i(qi),da=n(qi,"DIV",{class:!0});var G8=s(da);T(ZS.$$.fragment,G8),xlt=i(G8),E8e=n(G8,"P",{});var $na=s(E8e);$lt=r($na,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$na.forEach(t),klt=i(G8),Um=n(G8,"P",{});var Kle=s(Um);Slt=r(Kle,`Note:
Loading a model from its configuration file does `),C8e=n(Kle,"STRONG",{});var kna=s(C8e);Rlt=r(kna,"not"),kna.forEach(t),Plt=r(Kle,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qae=n(Kle,"A",{href:!0});var Sna=s(Qae);Blt=r(Sna,"from_pretrained()"),Sna.forEach(t),Ilt=r(Kle," to load the model weights."),Kle.forEach(t),Nlt=i(G8),T(d7.$$.fragment,G8),G8.forEach(t),qlt=i(qi),rt=n(qi,"DIV",{class:!0});var ji=s(rt);T(eR.$$.fragment,ji),jlt=i(ji),w8e=n(ji,"P",{});var Rna=s(w8e);Dlt=r(Rna,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rna.forEach(t),Glt=i(ji),Xn=n(ji,"P",{});var O8=s(Xn);Olt=r(O8,"The model class to instantiate is selected based on the "),A8e=n(O8,"CODE",{});var Pna=s(A8e);Vlt=r(Pna,"model_type"),Pna.forEach(t),Xlt=r(O8,` property of the config object (either
passed as an argument or loaded from `),y8e=n(O8,"CODE",{});var Bna=s(y8e);zlt=r(Bna,"pretrained_model_name_or_path"),Bna.forEach(t),Qlt=r(O8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L8e=n(O8,"CODE",{});var Ina=s(L8e);Wlt=r(Ina,"pretrained_model_name_or_path"),Ina.forEach(t),Ult=r(O8,":"),O8.forEach(t),Hlt=i(ji),ke=n(ji,"UL",{});var De=s(ke);c7=n(De,"LI",{});var EHe=s(c7);x8e=n(EHe,"STRONG",{});var Nna=s(x8e);Jlt=r(Nna,"bart"),Nna.forEach(t),Ylt=r(EHe," \u2014 "),Wae=n(EHe,"A",{href:!0});var qna=s(Wae);Klt=r(qna,"FlaxBartForConditionalGeneration"),qna.forEach(t),Zlt=r(EHe," (BART model)"),EHe.forEach(t),eit=i(De),m7=n(De,"LI",{});var CHe=s(m7);$8e=n(CHe,"STRONG",{});var jna=s($8e);oit=r(jna,"blenderbot"),jna.forEach(t),rit=r(CHe," \u2014 "),Uae=n(CHe,"A",{href:!0});var Dna=s(Uae);tit=r(Dna,"FlaxBlenderbotForConditionalGeneration"),Dna.forEach(t),ait=r(CHe," (Blenderbot model)"),CHe.forEach(t),nit=i(De),f7=n(De,"LI",{});var wHe=s(f7);k8e=n(wHe,"STRONG",{});var Gna=s(k8e);sit=r(Gna,"blenderbot-small"),Gna.forEach(t),lit=r(wHe," \u2014 "),Hae=n(wHe,"A",{href:!0});var Ona=s(Hae);iit=r(Ona,"FlaxBlenderbotSmallForConditionalGeneration"),Ona.forEach(t),dit=r(wHe," (BlenderbotSmall model)"),wHe.forEach(t),cit=i(De),g7=n(De,"LI",{});var AHe=s(g7);S8e=n(AHe,"STRONG",{});var Vna=s(S8e);mit=r(Vna,"encoder-decoder"),Vna.forEach(t),fit=r(AHe," \u2014 "),Jae=n(AHe,"A",{href:!0});var Xna=s(Jae);git=r(Xna,"FlaxEncoderDecoderModel"),Xna.forEach(t),hit=r(AHe," (Encoder decoder model)"),AHe.forEach(t),uit=i(De),h7=n(De,"LI",{});var yHe=s(h7);R8e=n(yHe,"STRONG",{});var zna=s(R8e);pit=r(zna,"longt5"),zna.forEach(t),_it=r(yHe," \u2014 "),Yae=n(yHe,"A",{href:!0});var Qna=s(Yae);bit=r(Qna,"FlaxLongT5ForConditionalGeneration"),Qna.forEach(t),vit=r(yHe," (LongT5 model)"),yHe.forEach(t),Fit=i(De),u7=n(De,"LI",{});var LHe=s(u7);P8e=n(LHe,"STRONG",{});var Wna=s(P8e);Tit=r(Wna,"marian"),Wna.forEach(t),Mit=r(LHe," \u2014 "),Kae=n(LHe,"A",{href:!0});var Una=s(Kae);Eit=r(Una,"FlaxMarianMTModel"),Una.forEach(t),Cit=r(LHe," (Marian model)"),LHe.forEach(t),wit=i(De),p7=n(De,"LI",{});var xHe=s(p7);B8e=n(xHe,"STRONG",{});var Hna=s(B8e);Ait=r(Hna,"mbart"),Hna.forEach(t),yit=r(xHe," \u2014 "),Zae=n(xHe,"A",{href:!0});var Jna=s(Zae);Lit=r(Jna,"FlaxMBartForConditionalGeneration"),Jna.forEach(t),xit=r(xHe," (mBART model)"),xHe.forEach(t),$it=i(De),_7=n(De,"LI",{});var $He=s(_7);I8e=n($He,"STRONG",{});var Yna=s(I8e);kit=r(Yna,"mt5"),Yna.forEach(t),Sit=r($He," \u2014 "),ene=n($He,"A",{href:!0});var Kna=s(ene);Rit=r(Kna,"FlaxMT5ForConditionalGeneration"),Kna.forEach(t),Pit=r($He," (MT5 model)"),$He.forEach(t),Bit=i(De),b7=n(De,"LI",{});var kHe=s(b7);N8e=n(kHe,"STRONG",{});var Zna=s(N8e);Iit=r(Zna,"pegasus"),Zna.forEach(t),Nit=r(kHe," \u2014 "),one=n(kHe,"A",{href:!0});var esa=s(one);qit=r(esa,"FlaxPegasusForConditionalGeneration"),esa.forEach(t),jit=r(kHe," (Pegasus model)"),kHe.forEach(t),Dit=i(De),v7=n(De,"LI",{});var SHe=s(v7);q8e=n(SHe,"STRONG",{});var osa=s(q8e);Git=r(osa,"t5"),osa.forEach(t),Oit=r(SHe," \u2014 "),rne=n(SHe,"A",{href:!0});var rsa=s(rne);Vit=r(rsa,"FlaxT5ForConditionalGeneration"),rsa.forEach(t),Xit=r(SHe," (T5 model)"),SHe.forEach(t),De.forEach(t),zit=i(ji),T(F7.$$.fragment,ji),ji.forEach(t),qi.forEach(t),bKe=i(m),Hm=n(m,"H2",{class:!0});var Beo=s(Hm);T7=n(Beo,"A",{id:!0,class:!0,href:!0});var tsa=s(T7);j8e=n(tsa,"SPAN",{});var asa=s(j8e);T(oR.$$.fragment,asa),asa.forEach(t),tsa.forEach(t),Qit=i(Beo),D8e=n(Beo,"SPAN",{});var nsa=s(D8e);Wit=r(nsa,"FlaxAutoModelForSequenceClassification"),nsa.forEach(t),Beo.forEach(t),vKe=i(m),yr=n(m,"DIV",{class:!0});var Di=s(yr);T(rR.$$.fragment,Di),Uit=i(Di),Jm=n(Di,"P",{});var Zle=s(Jm);Hit=r(Zle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),tne=n(Zle,"A",{href:!0});var ssa=s(tne);Jit=r(ssa,"from_pretrained()"),ssa.forEach(t),Yit=r(Zle," class method or the "),ane=n(Zle,"A",{href:!0});var lsa=s(ane);Kit=r(lsa,"from_config()"),lsa.forEach(t),Zit=r(Zle,` class
method.`),Zle.forEach(t),edt=i(Di),tR=n(Di,"P",{});var Ieo=s(tR);odt=r(Ieo,"This class cannot be instantiated directly using "),G8e=n(Ieo,"CODE",{});var isa=s(G8e);rdt=r(isa,"__init__()"),isa.forEach(t),tdt=r(Ieo," (throws an error)."),Ieo.forEach(t),adt=i(Di),ca=n(Di,"DIV",{class:!0});var V8=s(ca);T(aR.$$.fragment,V8),ndt=i(V8),O8e=n(V8,"P",{});var dsa=s(O8e);sdt=r(dsa,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dsa.forEach(t),ldt=i(V8),Ym=n(V8,"P",{});var eie=s(Ym);idt=r(eie,`Note:
Loading a model from its configuration file does `),V8e=n(eie,"STRONG",{});var csa=s(V8e);ddt=r(csa,"not"),csa.forEach(t),cdt=r(eie,` load the model weights. It only affects the
model\u2019s configuration. Use `),nne=n(eie,"A",{href:!0});var msa=s(nne);mdt=r(msa,"from_pretrained()"),msa.forEach(t),fdt=r(eie," to load the model weights."),eie.forEach(t),gdt=i(V8),T(M7.$$.fragment,V8),V8.forEach(t),hdt=i(Di),tt=n(Di,"DIV",{class:!0});var Gi=s(tt);T(nR.$$.fragment,Gi),udt=i(Gi),X8e=n(Gi,"P",{});var fsa=s(X8e);pdt=r(fsa,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fsa.forEach(t),_dt=i(Gi),zn=n(Gi,"P",{});var X8=s(zn);bdt=r(X8,"The model class to instantiate is selected based on the "),z8e=n(X8,"CODE",{});var gsa=s(z8e);vdt=r(gsa,"model_type"),gsa.forEach(t),Fdt=r(X8,` property of the config object (either
passed as an argument or loaded from `),Q8e=n(X8,"CODE",{});var hsa=s(Q8e);Tdt=r(hsa,"pretrained_model_name_or_path"),hsa.forEach(t),Mdt=r(X8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W8e=n(X8,"CODE",{});var usa=s(W8e);Edt=r(usa,"pretrained_model_name_or_path"),usa.forEach(t),Cdt=r(X8,":"),X8.forEach(t),wdt=i(Gi),Se=n(Gi,"UL",{});var Ge=s(Se);E7=n(Ge,"LI",{});var RHe=s(E7);U8e=n(RHe,"STRONG",{});var psa=s(U8e);Adt=r(psa,"albert"),psa.forEach(t),ydt=r(RHe," \u2014 "),sne=n(RHe,"A",{href:!0});var _sa=s(sne);Ldt=r(_sa,"FlaxAlbertForSequenceClassification"),_sa.forEach(t),xdt=r(RHe," (ALBERT model)"),RHe.forEach(t),$dt=i(Ge),C7=n(Ge,"LI",{});var PHe=s(C7);H8e=n(PHe,"STRONG",{});var bsa=s(H8e);kdt=r(bsa,"bart"),bsa.forEach(t),Sdt=r(PHe," \u2014 "),lne=n(PHe,"A",{href:!0});var vsa=s(lne);Rdt=r(vsa,"FlaxBartForSequenceClassification"),vsa.forEach(t),Pdt=r(PHe," (BART model)"),PHe.forEach(t),Bdt=i(Ge),w7=n(Ge,"LI",{});var BHe=s(w7);J8e=n(BHe,"STRONG",{});var Fsa=s(J8e);Idt=r(Fsa,"bert"),Fsa.forEach(t),Ndt=r(BHe," \u2014 "),ine=n(BHe,"A",{href:!0});var Tsa=s(ine);qdt=r(Tsa,"FlaxBertForSequenceClassification"),Tsa.forEach(t),jdt=r(BHe," (BERT model)"),BHe.forEach(t),Ddt=i(Ge),A7=n(Ge,"LI",{});var IHe=s(A7);Y8e=n(IHe,"STRONG",{});var Msa=s(Y8e);Gdt=r(Msa,"big_bird"),Msa.forEach(t),Odt=r(IHe," \u2014 "),dne=n(IHe,"A",{href:!0});var Esa=s(dne);Vdt=r(Esa,"FlaxBigBirdForSequenceClassification"),Esa.forEach(t),Xdt=r(IHe," (BigBird model)"),IHe.forEach(t),zdt=i(Ge),y7=n(Ge,"LI",{});var NHe=s(y7);K8e=n(NHe,"STRONG",{});var Csa=s(K8e);Qdt=r(Csa,"distilbert"),Csa.forEach(t),Wdt=r(NHe," \u2014 "),cne=n(NHe,"A",{href:!0});var wsa=s(cne);Udt=r(wsa,"FlaxDistilBertForSequenceClassification"),wsa.forEach(t),Hdt=r(NHe," (DistilBERT model)"),NHe.forEach(t),Jdt=i(Ge),L7=n(Ge,"LI",{});var qHe=s(L7);Z8e=n(qHe,"STRONG",{});var Asa=s(Z8e);Ydt=r(Asa,"electra"),Asa.forEach(t),Kdt=r(qHe," \u2014 "),mne=n(qHe,"A",{href:!0});var ysa=s(mne);Zdt=r(ysa,"FlaxElectraForSequenceClassification"),ysa.forEach(t),ect=r(qHe," (ELECTRA model)"),qHe.forEach(t),oct=i(Ge),x7=n(Ge,"LI",{});var jHe=s(x7);e9e=n(jHe,"STRONG",{});var Lsa=s(e9e);rct=r(Lsa,"mbart"),Lsa.forEach(t),tct=r(jHe," \u2014 "),fne=n(jHe,"A",{href:!0});var xsa=s(fne);act=r(xsa,"FlaxMBartForSequenceClassification"),xsa.forEach(t),nct=r(jHe," (mBART model)"),jHe.forEach(t),sct=i(Ge),$7=n(Ge,"LI",{});var DHe=s($7);o9e=n(DHe,"STRONG",{});var $sa=s(o9e);lct=r($sa,"roberta"),$sa.forEach(t),ict=r(DHe," \u2014 "),gne=n(DHe,"A",{href:!0});var ksa=s(gne);dct=r(ksa,"FlaxRobertaForSequenceClassification"),ksa.forEach(t),cct=r(DHe," (RoBERTa model)"),DHe.forEach(t),mct=i(Ge),k7=n(Ge,"LI",{});var GHe=s(k7);r9e=n(GHe,"STRONG",{});var Ssa=s(r9e);fct=r(Ssa,"roformer"),Ssa.forEach(t),gct=r(GHe," \u2014 "),hne=n(GHe,"A",{href:!0});var Rsa=s(hne);hct=r(Rsa,"FlaxRoFormerForSequenceClassification"),Rsa.forEach(t),uct=r(GHe," (RoFormer model)"),GHe.forEach(t),pct=i(Ge),S7=n(Ge,"LI",{});var OHe=s(S7);t9e=n(OHe,"STRONG",{});var Psa=s(t9e);_ct=r(Psa,"xlm-roberta"),Psa.forEach(t),bct=r(OHe," \u2014 "),une=n(OHe,"A",{href:!0});var Bsa=s(une);vct=r(Bsa,"FlaxXLMRobertaForSequenceClassification"),Bsa.forEach(t),Fct=r(OHe," (XLM-RoBERTa model)"),OHe.forEach(t),Ge.forEach(t),Tct=i(Gi),T(R7.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),FKe=i(m),Km=n(m,"H2",{class:!0});var Neo=s(Km);P7=n(Neo,"A",{id:!0,class:!0,href:!0});var Isa=s(P7);a9e=n(Isa,"SPAN",{});var Nsa=s(a9e);T(sR.$$.fragment,Nsa),Nsa.forEach(t),Isa.forEach(t),Mct=i(Neo),n9e=n(Neo,"SPAN",{});var qsa=s(n9e);Ect=r(qsa,"FlaxAutoModelForQuestionAnswering"),qsa.forEach(t),Neo.forEach(t),TKe=i(m),Lr=n(m,"DIV",{class:!0});var Oi=s(Lr);T(lR.$$.fragment,Oi),Cct=i(Oi),Zm=n(Oi,"P",{});var oie=s(Zm);wct=r(oie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pne=n(oie,"A",{href:!0});var jsa=s(pne);Act=r(jsa,"from_pretrained()"),jsa.forEach(t),yct=r(oie," class method or the "),_ne=n(oie,"A",{href:!0});var Dsa=s(_ne);Lct=r(Dsa,"from_config()"),Dsa.forEach(t),xct=r(oie,` class
method.`),oie.forEach(t),$ct=i(Oi),iR=n(Oi,"P",{});var qeo=s(iR);kct=r(qeo,"This class cannot be instantiated directly using "),s9e=n(qeo,"CODE",{});var Gsa=s(s9e);Sct=r(Gsa,"__init__()"),Gsa.forEach(t),Rct=r(qeo," (throws an error)."),qeo.forEach(t),Pct=i(Oi),ma=n(Oi,"DIV",{class:!0});var z8=s(ma);T(dR.$$.fragment,z8),Bct=i(z8),l9e=n(z8,"P",{});var Osa=s(l9e);Ict=r(Osa,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Osa.forEach(t),Nct=i(z8),ef=n(z8,"P",{});var rie=s(ef);qct=r(rie,`Note:
Loading a model from its configuration file does `),i9e=n(rie,"STRONG",{});var Vsa=s(i9e);jct=r(Vsa,"not"),Vsa.forEach(t),Dct=r(rie,` load the model weights. It only affects the
model\u2019s configuration. Use `),bne=n(rie,"A",{href:!0});var Xsa=s(bne);Gct=r(Xsa,"from_pretrained()"),Xsa.forEach(t),Oct=r(rie," to load the model weights."),rie.forEach(t),Vct=i(z8),T(B7.$$.fragment,z8),z8.forEach(t),Xct=i(Oi),at=n(Oi,"DIV",{class:!0});var Vi=s(at);T(cR.$$.fragment,Vi),zct=i(Vi),d9e=n(Vi,"P",{});var zsa=s(d9e);Qct=r(zsa,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zsa.forEach(t),Wct=i(Vi),Qn=n(Vi,"P",{});var Q8=s(Qn);Uct=r(Q8,"The model class to instantiate is selected based on the "),c9e=n(Q8,"CODE",{});var Qsa=s(c9e);Hct=r(Qsa,"model_type"),Qsa.forEach(t),Jct=r(Q8,` property of the config object (either
passed as an argument or loaded from `),m9e=n(Q8,"CODE",{});var Wsa=s(m9e);Yct=r(Wsa,"pretrained_model_name_or_path"),Wsa.forEach(t),Kct=r(Q8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=n(Q8,"CODE",{});var Usa=s(f9e);Zct=r(Usa,"pretrained_model_name_or_path"),Usa.forEach(t),emt=r(Q8,":"),Q8.forEach(t),omt=i(Vi),Re=n(Vi,"UL",{});var Oe=s(Re);I7=n(Oe,"LI",{});var VHe=s(I7);g9e=n(VHe,"STRONG",{});var Hsa=s(g9e);rmt=r(Hsa,"albert"),Hsa.forEach(t),tmt=r(VHe," \u2014 "),vne=n(VHe,"A",{href:!0});var Jsa=s(vne);amt=r(Jsa,"FlaxAlbertForQuestionAnswering"),Jsa.forEach(t),nmt=r(VHe," (ALBERT model)"),VHe.forEach(t),smt=i(Oe),N7=n(Oe,"LI",{});var XHe=s(N7);h9e=n(XHe,"STRONG",{});var Ysa=s(h9e);lmt=r(Ysa,"bart"),Ysa.forEach(t),imt=r(XHe," \u2014 "),Fne=n(XHe,"A",{href:!0});var Ksa=s(Fne);dmt=r(Ksa,"FlaxBartForQuestionAnswering"),Ksa.forEach(t),cmt=r(XHe," (BART model)"),XHe.forEach(t),mmt=i(Oe),q7=n(Oe,"LI",{});var zHe=s(q7);u9e=n(zHe,"STRONG",{});var Zsa=s(u9e);fmt=r(Zsa,"bert"),Zsa.forEach(t),gmt=r(zHe," \u2014 "),Tne=n(zHe,"A",{href:!0});var ela=s(Tne);hmt=r(ela,"FlaxBertForQuestionAnswering"),ela.forEach(t),umt=r(zHe," (BERT model)"),zHe.forEach(t),pmt=i(Oe),j7=n(Oe,"LI",{});var QHe=s(j7);p9e=n(QHe,"STRONG",{});var ola=s(p9e);_mt=r(ola,"big_bird"),ola.forEach(t),bmt=r(QHe," \u2014 "),Mne=n(QHe,"A",{href:!0});var rla=s(Mne);vmt=r(rla,"FlaxBigBirdForQuestionAnswering"),rla.forEach(t),Fmt=r(QHe," (BigBird model)"),QHe.forEach(t),Tmt=i(Oe),D7=n(Oe,"LI",{});var WHe=s(D7);_9e=n(WHe,"STRONG",{});var tla=s(_9e);Mmt=r(tla,"distilbert"),tla.forEach(t),Emt=r(WHe," \u2014 "),Ene=n(WHe,"A",{href:!0});var ala=s(Ene);Cmt=r(ala,"FlaxDistilBertForQuestionAnswering"),ala.forEach(t),wmt=r(WHe," (DistilBERT model)"),WHe.forEach(t),Amt=i(Oe),G7=n(Oe,"LI",{});var UHe=s(G7);b9e=n(UHe,"STRONG",{});var nla=s(b9e);ymt=r(nla,"electra"),nla.forEach(t),Lmt=r(UHe," \u2014 "),Cne=n(UHe,"A",{href:!0});var sla=s(Cne);xmt=r(sla,"FlaxElectraForQuestionAnswering"),sla.forEach(t),$mt=r(UHe," (ELECTRA model)"),UHe.forEach(t),kmt=i(Oe),O7=n(Oe,"LI",{});var HHe=s(O7);v9e=n(HHe,"STRONG",{});var lla=s(v9e);Smt=r(lla,"mbart"),lla.forEach(t),Rmt=r(HHe," \u2014 "),wne=n(HHe,"A",{href:!0});var ila=s(wne);Pmt=r(ila,"FlaxMBartForQuestionAnswering"),ila.forEach(t),Bmt=r(HHe," (mBART model)"),HHe.forEach(t),Imt=i(Oe),V7=n(Oe,"LI",{});var JHe=s(V7);F9e=n(JHe,"STRONG",{});var dla=s(F9e);Nmt=r(dla,"roberta"),dla.forEach(t),qmt=r(JHe," \u2014 "),Ane=n(JHe,"A",{href:!0});var cla=s(Ane);jmt=r(cla,"FlaxRobertaForQuestionAnswering"),cla.forEach(t),Dmt=r(JHe," (RoBERTa model)"),JHe.forEach(t),Gmt=i(Oe),X7=n(Oe,"LI",{});var YHe=s(X7);T9e=n(YHe,"STRONG",{});var mla=s(T9e);Omt=r(mla,"roformer"),mla.forEach(t),Vmt=r(YHe," \u2014 "),yne=n(YHe,"A",{href:!0});var fla=s(yne);Xmt=r(fla,"FlaxRoFormerForQuestionAnswering"),fla.forEach(t),zmt=r(YHe," (RoFormer model)"),YHe.forEach(t),Qmt=i(Oe),z7=n(Oe,"LI",{});var KHe=s(z7);M9e=n(KHe,"STRONG",{});var gla=s(M9e);Wmt=r(gla,"xlm-roberta"),gla.forEach(t),Umt=r(KHe," \u2014 "),Lne=n(KHe,"A",{href:!0});var hla=s(Lne);Hmt=r(hla,"FlaxXLMRobertaForQuestionAnswering"),hla.forEach(t),Jmt=r(KHe," (XLM-RoBERTa model)"),KHe.forEach(t),Oe.forEach(t),Ymt=i(Vi),T(Q7.$$.fragment,Vi),Vi.forEach(t),Oi.forEach(t),MKe=i(m),of=n(m,"H2",{class:!0});var jeo=s(of);W7=n(jeo,"A",{id:!0,class:!0,href:!0});var ula=s(W7);E9e=n(ula,"SPAN",{});var pla=s(E9e);T(mR.$$.fragment,pla),pla.forEach(t),ula.forEach(t),Kmt=i(jeo),C9e=n(jeo,"SPAN",{});var _la=s(C9e);Zmt=r(_la,"FlaxAutoModelForTokenClassification"),_la.forEach(t),jeo.forEach(t),EKe=i(m),xr=n(m,"DIV",{class:!0});var Xi=s(xr);T(fR.$$.fragment,Xi),eft=i(Xi),rf=n(Xi,"P",{});var tie=s(rf);oft=r(tie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xne=n(tie,"A",{href:!0});var bla=s(xne);rft=r(bla,"from_pretrained()"),bla.forEach(t),tft=r(tie," class method or the "),$ne=n(tie,"A",{href:!0});var vla=s($ne);aft=r(vla,"from_config()"),vla.forEach(t),nft=r(tie,` class
method.`),tie.forEach(t),sft=i(Xi),gR=n(Xi,"P",{});var Deo=s(gR);lft=r(Deo,"This class cannot be instantiated directly using "),w9e=n(Deo,"CODE",{});var Fla=s(w9e);ift=r(Fla,"__init__()"),Fla.forEach(t),dft=r(Deo," (throws an error)."),Deo.forEach(t),cft=i(Xi),fa=n(Xi,"DIV",{class:!0});var W8=s(fa);T(hR.$$.fragment,W8),mft=i(W8),A9e=n(W8,"P",{});var Tla=s(A9e);fft=r(Tla,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Tla.forEach(t),gft=i(W8),tf=n(W8,"P",{});var aie=s(tf);hft=r(aie,`Note:
Loading a model from its configuration file does `),y9e=n(aie,"STRONG",{});var Mla=s(y9e);uft=r(Mla,"not"),Mla.forEach(t),pft=r(aie,` load the model weights. It only affects the
model\u2019s configuration. Use `),kne=n(aie,"A",{href:!0});var Ela=s(kne);_ft=r(Ela,"from_pretrained()"),Ela.forEach(t),bft=r(aie," to load the model weights."),aie.forEach(t),vft=i(W8),T(U7.$$.fragment,W8),W8.forEach(t),Fft=i(Xi),nt=n(Xi,"DIV",{class:!0});var zi=s(nt);T(uR.$$.fragment,zi),Tft=i(zi),L9e=n(zi,"P",{});var Cla=s(L9e);Mft=r(Cla,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cla.forEach(t),Eft=i(zi),Wn=n(zi,"P",{});var U8=s(Wn);Cft=r(U8,"The model class to instantiate is selected based on the "),x9e=n(U8,"CODE",{});var wla=s(x9e);wft=r(wla,"model_type"),wla.forEach(t),Aft=r(U8,` property of the config object (either
passed as an argument or loaded from `),$9e=n(U8,"CODE",{});var Ala=s($9e);yft=r(Ala,"pretrained_model_name_or_path"),Ala.forEach(t),Lft=r(U8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k9e=n(U8,"CODE",{});var yla=s(k9e);xft=r(yla,"pretrained_model_name_or_path"),yla.forEach(t),$ft=r(U8,":"),U8.forEach(t),kft=i(zi),Xe=n(zi,"UL",{});var wo=s(Xe);H7=n(wo,"LI",{});var ZHe=s(H7);S9e=n(ZHe,"STRONG",{});var Lla=s(S9e);Sft=r(Lla,"albert"),Lla.forEach(t),Rft=r(ZHe," \u2014 "),Sne=n(ZHe,"A",{href:!0});var xla=s(Sne);Pft=r(xla,"FlaxAlbertForTokenClassification"),xla.forEach(t),Bft=r(ZHe," (ALBERT model)"),ZHe.forEach(t),Ift=i(wo),J7=n(wo,"LI",{});var eJe=s(J7);R9e=n(eJe,"STRONG",{});var $la=s(R9e);Nft=r($la,"bert"),$la.forEach(t),qft=r(eJe," \u2014 "),Rne=n(eJe,"A",{href:!0});var kla=s(Rne);jft=r(kla,"FlaxBertForTokenClassification"),kla.forEach(t),Dft=r(eJe," (BERT model)"),eJe.forEach(t),Gft=i(wo),Y7=n(wo,"LI",{});var oJe=s(Y7);P9e=n(oJe,"STRONG",{});var Sla=s(P9e);Oft=r(Sla,"big_bird"),Sla.forEach(t),Vft=r(oJe," \u2014 "),Pne=n(oJe,"A",{href:!0});var Rla=s(Pne);Xft=r(Rla,"FlaxBigBirdForTokenClassification"),Rla.forEach(t),zft=r(oJe," (BigBird model)"),oJe.forEach(t),Qft=i(wo),K7=n(wo,"LI",{});var rJe=s(K7);B9e=n(rJe,"STRONG",{});var Pla=s(B9e);Wft=r(Pla,"distilbert"),Pla.forEach(t),Uft=r(rJe," \u2014 "),Bne=n(rJe,"A",{href:!0});var Bla=s(Bne);Hft=r(Bla,"FlaxDistilBertForTokenClassification"),Bla.forEach(t),Jft=r(rJe," (DistilBERT model)"),rJe.forEach(t),Yft=i(wo),Z7=n(wo,"LI",{});var tJe=s(Z7);I9e=n(tJe,"STRONG",{});var Ila=s(I9e);Kft=r(Ila,"electra"),Ila.forEach(t),Zft=r(tJe," \u2014 "),Ine=n(tJe,"A",{href:!0});var Nla=s(Ine);egt=r(Nla,"FlaxElectraForTokenClassification"),Nla.forEach(t),ogt=r(tJe," (ELECTRA model)"),tJe.forEach(t),rgt=i(wo),ey=n(wo,"LI",{});var aJe=s(ey);N9e=n(aJe,"STRONG",{});var qla=s(N9e);tgt=r(qla,"roberta"),qla.forEach(t),agt=r(aJe," \u2014 "),Nne=n(aJe,"A",{href:!0});var jla=s(Nne);ngt=r(jla,"FlaxRobertaForTokenClassification"),jla.forEach(t),sgt=r(aJe," (RoBERTa model)"),aJe.forEach(t),lgt=i(wo),oy=n(wo,"LI",{});var nJe=s(oy);q9e=n(nJe,"STRONG",{});var Dla=s(q9e);igt=r(Dla,"roformer"),Dla.forEach(t),dgt=r(nJe," \u2014 "),qne=n(nJe,"A",{href:!0});var Gla=s(qne);cgt=r(Gla,"FlaxRoFormerForTokenClassification"),Gla.forEach(t),mgt=r(nJe," (RoFormer model)"),nJe.forEach(t),fgt=i(wo),ry=n(wo,"LI",{});var sJe=s(ry);j9e=n(sJe,"STRONG",{});var Ola=s(j9e);ggt=r(Ola,"xlm-roberta"),Ola.forEach(t),hgt=r(sJe," \u2014 "),jne=n(sJe,"A",{href:!0});var Vla=s(jne);ugt=r(Vla,"FlaxXLMRobertaForTokenClassification"),Vla.forEach(t),pgt=r(sJe," (XLM-RoBERTa model)"),sJe.forEach(t),wo.forEach(t),_gt=i(zi),T(ty.$$.fragment,zi),zi.forEach(t),Xi.forEach(t),CKe=i(m),af=n(m,"H2",{class:!0});var Geo=s(af);ay=n(Geo,"A",{id:!0,class:!0,href:!0});var Xla=s(ay);D9e=n(Xla,"SPAN",{});var zla=s(D9e);T(pR.$$.fragment,zla),zla.forEach(t),Xla.forEach(t),bgt=i(Geo),G9e=n(Geo,"SPAN",{});var Qla=s(G9e);vgt=r(Qla,"FlaxAutoModelForMultipleChoice"),Qla.forEach(t),Geo.forEach(t),wKe=i(m),$r=n(m,"DIV",{class:!0});var Qi=s($r);T(_R.$$.fragment,Qi),Fgt=i(Qi),nf=n(Qi,"P",{});var nie=s(nf);Tgt=r(nie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Dne=n(nie,"A",{href:!0});var Wla=s(Dne);Mgt=r(Wla,"from_pretrained()"),Wla.forEach(t),Egt=r(nie," class method or the "),Gne=n(nie,"A",{href:!0});var Ula=s(Gne);Cgt=r(Ula,"from_config()"),Ula.forEach(t),wgt=r(nie,` class
method.`),nie.forEach(t),Agt=i(Qi),bR=n(Qi,"P",{});var Oeo=s(bR);ygt=r(Oeo,"This class cannot be instantiated directly using "),O9e=n(Oeo,"CODE",{});var Hla=s(O9e);Lgt=r(Hla,"__init__()"),Hla.forEach(t),xgt=r(Oeo," (throws an error)."),Oeo.forEach(t),$gt=i(Qi),ga=n(Qi,"DIV",{class:!0});var H8=s(ga);T(vR.$$.fragment,H8),kgt=i(H8),V9e=n(H8,"P",{});var Jla=s(V9e);Sgt=r(Jla,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jla.forEach(t),Rgt=i(H8),sf=n(H8,"P",{});var sie=s(sf);Pgt=r(sie,`Note:
Loading a model from its configuration file does `),X9e=n(sie,"STRONG",{});var Yla=s(X9e);Bgt=r(Yla,"not"),Yla.forEach(t),Igt=r(sie,` load the model weights. It only affects the
model\u2019s configuration. Use `),One=n(sie,"A",{href:!0});var Kla=s(One);Ngt=r(Kla,"from_pretrained()"),Kla.forEach(t),qgt=r(sie," to load the model weights."),sie.forEach(t),jgt=i(H8),T(ny.$$.fragment,H8),H8.forEach(t),Dgt=i(Qi),st=n(Qi,"DIV",{class:!0});var Wi=s(st);T(FR.$$.fragment,Wi),Ggt=i(Wi),z9e=n(Wi,"P",{});var Zla=s(z9e);Ogt=r(Zla,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zla.forEach(t),Vgt=i(Wi),Un=n(Wi,"P",{});var J8=s(Un);Xgt=r(J8,"The model class to instantiate is selected based on the "),Q9e=n(J8,"CODE",{});var eia=s(Q9e);zgt=r(eia,"model_type"),eia.forEach(t),Qgt=r(J8,` property of the config object (either
passed as an argument or loaded from `),W9e=n(J8,"CODE",{});var oia=s(W9e);Wgt=r(oia,"pretrained_model_name_or_path"),oia.forEach(t),Ugt=r(J8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U9e=n(J8,"CODE",{});var ria=s(U9e);Hgt=r(ria,"pretrained_model_name_or_path"),ria.forEach(t),Jgt=r(J8,":"),J8.forEach(t),Ygt=i(Wi),ze=n(Wi,"UL",{});var Ao=s(ze);sy=n(Ao,"LI",{});var lJe=s(sy);H9e=n(lJe,"STRONG",{});var tia=s(H9e);Kgt=r(tia,"albert"),tia.forEach(t),Zgt=r(lJe," \u2014 "),Vne=n(lJe,"A",{href:!0});var aia=s(Vne);eht=r(aia,"FlaxAlbertForMultipleChoice"),aia.forEach(t),oht=r(lJe," (ALBERT model)"),lJe.forEach(t),rht=i(Ao),ly=n(Ao,"LI",{});var iJe=s(ly);J9e=n(iJe,"STRONG",{});var nia=s(J9e);tht=r(nia,"bert"),nia.forEach(t),aht=r(iJe," \u2014 "),Xne=n(iJe,"A",{href:!0});var sia=s(Xne);nht=r(sia,"FlaxBertForMultipleChoice"),sia.forEach(t),sht=r(iJe," (BERT model)"),iJe.forEach(t),lht=i(Ao),iy=n(Ao,"LI",{});var dJe=s(iy);Y9e=n(dJe,"STRONG",{});var lia=s(Y9e);iht=r(lia,"big_bird"),lia.forEach(t),dht=r(dJe," \u2014 "),zne=n(dJe,"A",{href:!0});var iia=s(zne);cht=r(iia,"FlaxBigBirdForMultipleChoice"),iia.forEach(t),mht=r(dJe," (BigBird model)"),dJe.forEach(t),fht=i(Ao),dy=n(Ao,"LI",{});var cJe=s(dy);K9e=n(cJe,"STRONG",{});var dia=s(K9e);ght=r(dia,"distilbert"),dia.forEach(t),hht=r(cJe," \u2014 "),Qne=n(cJe,"A",{href:!0});var cia=s(Qne);uht=r(cia,"FlaxDistilBertForMultipleChoice"),cia.forEach(t),pht=r(cJe," (DistilBERT model)"),cJe.forEach(t),_ht=i(Ao),cy=n(Ao,"LI",{});var mJe=s(cy);Z9e=n(mJe,"STRONG",{});var mia=s(Z9e);bht=r(mia,"electra"),mia.forEach(t),vht=r(mJe," \u2014 "),Wne=n(mJe,"A",{href:!0});var fia=s(Wne);Fht=r(fia,"FlaxElectraForMultipleChoice"),fia.forEach(t),Tht=r(mJe," (ELECTRA model)"),mJe.forEach(t),Mht=i(Ao),my=n(Ao,"LI",{});var fJe=s(my);exe=n(fJe,"STRONG",{});var gia=s(exe);Eht=r(gia,"roberta"),gia.forEach(t),Cht=r(fJe," \u2014 "),Une=n(fJe,"A",{href:!0});var hia=s(Une);wht=r(hia,"FlaxRobertaForMultipleChoice"),hia.forEach(t),Aht=r(fJe," (RoBERTa model)"),fJe.forEach(t),yht=i(Ao),fy=n(Ao,"LI",{});var gJe=s(fy);oxe=n(gJe,"STRONG",{});var uia=s(oxe);Lht=r(uia,"roformer"),uia.forEach(t),xht=r(gJe," \u2014 "),Hne=n(gJe,"A",{href:!0});var pia=s(Hne);$ht=r(pia,"FlaxRoFormerForMultipleChoice"),pia.forEach(t),kht=r(gJe," (RoFormer model)"),gJe.forEach(t),Sht=i(Ao),gy=n(Ao,"LI",{});var hJe=s(gy);rxe=n(hJe,"STRONG",{});var _ia=s(rxe);Rht=r(_ia,"xlm-roberta"),_ia.forEach(t),Pht=r(hJe," \u2014 "),Jne=n(hJe,"A",{href:!0});var bia=s(Jne);Bht=r(bia,"FlaxXLMRobertaForMultipleChoice"),bia.forEach(t),Iht=r(hJe," (XLM-RoBERTa model)"),hJe.forEach(t),Ao.forEach(t),Nht=i(Wi),T(hy.$$.fragment,Wi),Wi.forEach(t),Qi.forEach(t),AKe=i(m),lf=n(m,"H2",{class:!0});var Veo=s(lf);uy=n(Veo,"A",{id:!0,class:!0,href:!0});var via=s(uy);txe=n(via,"SPAN",{});var Fia=s(txe);T(TR.$$.fragment,Fia),Fia.forEach(t),via.forEach(t),qht=i(Veo),axe=n(Veo,"SPAN",{});var Tia=s(axe);jht=r(Tia,"FlaxAutoModelForNextSentencePrediction"),Tia.forEach(t),Veo.forEach(t),yKe=i(m),kr=n(m,"DIV",{class:!0});var Ui=s(kr);T(MR.$$.fragment,Ui),Dht=i(Ui),df=n(Ui,"P",{});var lie=s(df);Ght=r(lie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Yne=n(lie,"A",{href:!0});var Mia=s(Yne);Oht=r(Mia,"from_pretrained()"),Mia.forEach(t),Vht=r(lie," class method or the "),Kne=n(lie,"A",{href:!0});var Eia=s(Kne);Xht=r(Eia,"from_config()"),Eia.forEach(t),zht=r(lie,` class
method.`),lie.forEach(t),Qht=i(Ui),ER=n(Ui,"P",{});var Xeo=s(ER);Wht=r(Xeo,"This class cannot be instantiated directly using "),nxe=n(Xeo,"CODE",{});var Cia=s(nxe);Uht=r(Cia,"__init__()"),Cia.forEach(t),Hht=r(Xeo," (throws an error)."),Xeo.forEach(t),Jht=i(Ui),ha=n(Ui,"DIV",{class:!0});var Y8=s(ha);T(CR.$$.fragment,Y8),Yht=i(Y8),sxe=n(Y8,"P",{});var wia=s(sxe);Kht=r(wia,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wia.forEach(t),Zht=i(Y8),cf=n(Y8,"P",{});var iie=s(cf);eut=r(iie,`Note:
Loading a model from its configuration file does `),lxe=n(iie,"STRONG",{});var Aia=s(lxe);out=r(Aia,"not"),Aia.forEach(t),rut=r(iie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zne=n(iie,"A",{href:!0});var yia=s(Zne);tut=r(yia,"from_pretrained()"),yia.forEach(t),aut=r(iie," to load the model weights."),iie.forEach(t),nut=i(Y8),T(py.$$.fragment,Y8),Y8.forEach(t),sut=i(Ui),lt=n(Ui,"DIV",{class:!0});var Hi=s(lt);T(wR.$$.fragment,Hi),lut=i(Hi),ixe=n(Hi,"P",{});var Lia=s(ixe);iut=r(Lia,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Lia.forEach(t),dut=i(Hi),Hn=n(Hi,"P",{});var K8=s(Hn);cut=r(K8,"The model class to instantiate is selected based on the "),dxe=n(K8,"CODE",{});var xia=s(dxe);mut=r(xia,"model_type"),xia.forEach(t),fut=r(K8,` property of the config object (either
passed as an argument or loaded from `),cxe=n(K8,"CODE",{});var $ia=s(cxe);gut=r($ia,"pretrained_model_name_or_path"),$ia.forEach(t),hut=r(K8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mxe=n(K8,"CODE",{});var kia=s(mxe);uut=r(kia,"pretrained_model_name_or_path"),kia.forEach(t),put=r(K8,":"),K8.forEach(t),_ut=i(Hi),fxe=n(Hi,"UL",{});var Sia=s(fxe);_y=n(Sia,"LI",{});var uJe=s(_y);gxe=n(uJe,"STRONG",{});var Ria=s(gxe);but=r(Ria,"bert"),Ria.forEach(t),vut=r(uJe," \u2014 "),ese=n(uJe,"A",{href:!0});var Pia=s(ese);Fut=r(Pia,"FlaxBertForNextSentencePrediction"),Pia.forEach(t),Tut=r(uJe," (BERT model)"),uJe.forEach(t),Sia.forEach(t),Mut=i(Hi),T(by.$$.fragment,Hi),Hi.forEach(t),Ui.forEach(t),LKe=i(m),mf=n(m,"H2",{class:!0});var zeo=s(mf);vy=n(zeo,"A",{id:!0,class:!0,href:!0});var Bia=s(vy);hxe=n(Bia,"SPAN",{});var Iia=s(hxe);T(AR.$$.fragment,Iia),Iia.forEach(t),Bia.forEach(t),Eut=i(zeo),uxe=n(zeo,"SPAN",{});var Nia=s(uxe);Cut=r(Nia,"FlaxAutoModelForImageClassification"),Nia.forEach(t),zeo.forEach(t),xKe=i(m),Sr=n(m,"DIV",{class:!0});var Ji=s(Sr);T(yR.$$.fragment,Ji),wut=i(Ji),ff=n(Ji,"P",{});var die=s(ff);Aut=r(die,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ose=n(die,"A",{href:!0});var qia=s(ose);yut=r(qia,"from_pretrained()"),qia.forEach(t),Lut=r(die," class method or the "),rse=n(die,"A",{href:!0});var jia=s(rse);xut=r(jia,"from_config()"),jia.forEach(t),$ut=r(die,` class
method.`),die.forEach(t),kut=i(Ji),LR=n(Ji,"P",{});var Qeo=s(LR);Sut=r(Qeo,"This class cannot be instantiated directly using "),pxe=n(Qeo,"CODE",{});var Dia=s(pxe);Rut=r(Dia,"__init__()"),Dia.forEach(t),Put=r(Qeo," (throws an error)."),Qeo.forEach(t),But=i(Ji),ua=n(Ji,"DIV",{class:!0});var Z8=s(ua);T(xR.$$.fragment,Z8),Iut=i(Z8),_xe=n(Z8,"P",{});var Gia=s(_xe);Nut=r(Gia,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Gia.forEach(t),qut=i(Z8),gf=n(Z8,"P",{});var cie=s(gf);jut=r(cie,`Note:
Loading a model from its configuration file does `),bxe=n(cie,"STRONG",{});var Oia=s(bxe);Dut=r(Oia,"not"),Oia.forEach(t),Gut=r(cie,` load the model weights. It only affects the
model\u2019s configuration. Use `),tse=n(cie,"A",{href:!0});var Via=s(tse);Out=r(Via,"from_pretrained()"),Via.forEach(t),Vut=r(cie," to load the model weights."),cie.forEach(t),Xut=i(Z8),T(Fy.$$.fragment,Z8),Z8.forEach(t),zut=i(Ji),it=n(Ji,"DIV",{class:!0});var Yi=s(it);T($R.$$.fragment,Yi),Qut=i(Yi),vxe=n(Yi,"P",{});var Xia=s(vxe);Wut=r(Xia,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xia.forEach(t),Uut=i(Yi),Jn=n(Yi,"P",{});var e9=s(Jn);Hut=r(e9,"The model class to instantiate is selected based on the "),Fxe=n(e9,"CODE",{});var zia=s(Fxe);Jut=r(zia,"model_type"),zia.forEach(t),Yut=r(e9,` property of the config object (either
passed as an argument or loaded from `),Txe=n(e9,"CODE",{});var Qia=s(Txe);Kut=r(Qia,"pretrained_model_name_or_path"),Qia.forEach(t),Zut=r(e9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mxe=n(e9,"CODE",{});var Wia=s(Mxe);ept=r(Wia,"pretrained_model_name_or_path"),Wia.forEach(t),opt=r(e9,":"),e9.forEach(t),rpt=i(Yi),kR=n(Yi,"UL",{});var Weo=s(kR);Ty=n(Weo,"LI",{});var pJe=s(Ty);Exe=n(pJe,"STRONG",{});var Uia=s(Exe);tpt=r(Uia,"beit"),Uia.forEach(t),apt=r(pJe," \u2014 "),ase=n(pJe,"A",{href:!0});var Hia=s(ase);npt=r(Hia,"FlaxBeitForImageClassification"),Hia.forEach(t),spt=r(pJe," (BEiT model)"),pJe.forEach(t),lpt=i(Weo),My=n(Weo,"LI",{});var _Je=s(My);Cxe=n(_Je,"STRONG",{});var Jia=s(Cxe);ipt=r(Jia,"vit"),Jia.forEach(t),dpt=r(_Je," \u2014 "),nse=n(_Je,"A",{href:!0});var Yia=s(nse);cpt=r(Yia,"FlaxViTForImageClassification"),Yia.forEach(t),mpt=r(_Je," (ViT model)"),_Je.forEach(t),Weo.forEach(t),fpt=i(Yi),T(Ey.$$.fragment,Yi),Yi.forEach(t),Ji.forEach(t),$Ke=i(m),hf=n(m,"H2",{class:!0});var Ueo=s(hf);Cy=n(Ueo,"A",{id:!0,class:!0,href:!0});var Kia=s(Cy);wxe=n(Kia,"SPAN",{});var Zia=s(wxe);T(SR.$$.fragment,Zia),Zia.forEach(t),Kia.forEach(t),gpt=i(Ueo),Axe=n(Ueo,"SPAN",{});var eda=s(Axe);hpt=r(eda,"FlaxAutoModelForVision2Seq"),eda.forEach(t),Ueo.forEach(t),kKe=i(m),Rr=n(m,"DIV",{class:!0});var Ki=s(Rr);T(RR.$$.fragment,Ki),upt=i(Ki),uf=n(Ki,"P",{});var mie=s(uf);ppt=r(mie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sse=n(mie,"A",{href:!0});var oda=s(sse);_pt=r(oda,"from_pretrained()"),oda.forEach(t),bpt=r(mie," class method or the "),lse=n(mie,"A",{href:!0});var rda=s(lse);vpt=r(rda,"from_config()"),rda.forEach(t),Fpt=r(mie,` class
method.`),mie.forEach(t),Tpt=i(Ki),PR=n(Ki,"P",{});var Heo=s(PR);Mpt=r(Heo,"This class cannot be instantiated directly using "),yxe=n(Heo,"CODE",{});var tda=s(yxe);Ept=r(tda,"__init__()"),tda.forEach(t),Cpt=r(Heo," (throws an error)."),Heo.forEach(t),wpt=i(Ki),pa=n(Ki,"DIV",{class:!0});var o9=s(pa);T(BR.$$.fragment,o9),Apt=i(o9),Lxe=n(o9,"P",{});var ada=s(Lxe);ypt=r(ada,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ada.forEach(t),Lpt=i(o9),pf=n(o9,"P",{});var fie=s(pf);xpt=r(fie,`Note:
Loading a model from its configuration file does `),xxe=n(fie,"STRONG",{});var nda=s(xxe);$pt=r(nda,"not"),nda.forEach(t),kpt=r(fie,` load the model weights. It only affects the
model\u2019s configuration. Use `),ise=n(fie,"A",{href:!0});var sda=s(ise);Spt=r(sda,"from_pretrained()"),sda.forEach(t),Rpt=r(fie," to load the model weights."),fie.forEach(t),Ppt=i(o9),T(wy.$$.fragment,o9),o9.forEach(t),Bpt=i(Ki),dt=n(Ki,"DIV",{class:!0});var Zi=s(dt);T(IR.$$.fragment,Zi),Ipt=i(Zi),$xe=n(Zi,"P",{});var lda=s($xe);Npt=r(lda,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lda.forEach(t),qpt=i(Zi),Yn=n(Zi,"P",{});var r9=s(Yn);jpt=r(r9,"The model class to instantiate is selected based on the "),kxe=n(r9,"CODE",{});var ida=s(kxe);Dpt=r(ida,"model_type"),ida.forEach(t),Gpt=r(r9,` property of the config object (either
passed as an argument or loaded from `),Sxe=n(r9,"CODE",{});var dda=s(Sxe);Opt=r(dda,"pretrained_model_name_or_path"),dda.forEach(t),Vpt=r(r9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rxe=n(r9,"CODE",{});var cda=s(Rxe);Xpt=r(cda,"pretrained_model_name_or_path"),cda.forEach(t),zpt=r(r9,":"),r9.forEach(t),Qpt=i(Zi),Pxe=n(Zi,"UL",{});var mda=s(Pxe);Ay=n(mda,"LI",{});var bJe=s(Ay);Bxe=n(bJe,"STRONG",{});var fda=s(Bxe);Wpt=r(fda,"vision-encoder-decoder"),fda.forEach(t),Upt=r(bJe," \u2014 "),dse=n(bJe,"A",{href:!0});var gda=s(dse);Hpt=r(gda,"FlaxVisionEncoderDecoderModel"),gda.forEach(t),Jpt=r(bJe," (Vision Encoder decoder model)"),bJe.forEach(t),mda.forEach(t),Ypt=i(Zi),T(yy.$$.fragment,Zi),Zi.forEach(t),Ki.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(yma)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Zn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(os,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(rs,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(sd,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Cf,"id","extending-the-auto-classes"),c(Cf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cf,"href","#extending-the-auto-classes"),c(ld,"class","relative group"),c(Af,"id","transformers.AutoConfig"),c(Af,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Af,"href","#transformers.AutoConfig"),c(id,"class","relative group"),c(fB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(gB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(hB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(uB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(pB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(_B,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(bB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(vB,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(FB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(TB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(MB,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(EB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(CB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(wB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(AB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(yB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(LB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(xB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c($B,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(kB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(SB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(RB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(PB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(BB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(IB,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(NB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(qB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(jB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(DB,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),c(GB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(OB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(VB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(XB,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(zB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(QB,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(WB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(UB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(HB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(JB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(YB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(KB,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(ZB,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(eI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(oI,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(rI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(tI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(aI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(nI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(sI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(lI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(iI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(dI,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(cI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(mI,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(fI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(gI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(hI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(uI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(pI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(_I,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(bI,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(vI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(FI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(TI,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(MI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(EI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(CI,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(wI,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(AI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(yI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(LI,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(xI,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c($I,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(kI,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),c(SI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(RI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(PI,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(BI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(II,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(NI,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(qI,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(jI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(DI,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(GI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(OI,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(VI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(XI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(zI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(QI,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(WI,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(UI,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(HI,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(JI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(YI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(KI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(ZI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(eN,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(oN,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(rN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(tN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(aN,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(nN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(sN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(lN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(iN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(dN,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(cN,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(mN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(fN,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(gN,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(hN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(uN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(pN,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(_N,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(bN,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(vN,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(FN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(TN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(MN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(EN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(CN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(wN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(AN,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(yN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"id","transformers.AutoTokenizer"),c(Xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xh,"href","#transformers.AutoTokenizer"),c(cd,"class","relative group"),c(LN,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(xN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c($N,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(SN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(RN,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(PN,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(BN,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(IN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(NN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(qN,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(jN,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(DN,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(GN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(ON,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(VN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(XN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(zN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(QN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(WN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(UN,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(HN,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(JN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(YN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(KN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(ZN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(eq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(oq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(rq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(tq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(aq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(nq,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(sq,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(lq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(iq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(mq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(fq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(gq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(hq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(uq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(pq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(_q,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(bq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(vq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(Fq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(Tq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(Mq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(Eq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(Cq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(wq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(Aq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Lq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($q,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(kq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Sq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Rq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Pq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Bq,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Iq,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Nq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Dq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Gq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(Oq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(Vq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(Xq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(zq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(Qq,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Wq,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Uq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(Hq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(Jq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Yq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Kq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(Zq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(ej,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(oj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(rj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(tj,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(aj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(nj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(sj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(lj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(ij,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(dj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(cj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(mj,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(fj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(gj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(hj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(uj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(pj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(_j,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(bj,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(vj,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(Fj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Tj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Mj,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(Ej,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(Cj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(wj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Aj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(yj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(Lj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c($j,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(kj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Sj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Rj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(Pj,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Bj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(Ij,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(Nj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(qj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(jj,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(Dj,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(Gj,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Oj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(Vj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Xj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(zj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Qj,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Wj,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Uj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Hj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Jj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Yj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Kj,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Zj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(eD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(oD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(rD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(tD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(aD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(nD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(sD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(lD,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(iD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(dD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(cD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(mD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(fD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(gD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(hD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(uD,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(pD,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(_D,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(bD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(vD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(FD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(TD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(MD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ED,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(CD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(wD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(AD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(yD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Au,"id","transformers.AutoFeatureExtractor"),c(Au,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Au,"href","#transformers.AutoFeatureExtractor"),c(md,"class","relative group"),c(LD,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(xD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c($D,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(kD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(SD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(RD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(PD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(BD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(ID,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(ND,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(qD,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(jD,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(DD,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(GD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(OD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(VD,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(XD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(zD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(QD,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(WD,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(UD,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(HD,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(JD,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(YD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(KD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(ZD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(rG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(tG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sG,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(lG,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(iG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fG,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hp,"id","transformers.AutoProcessor"),c(hp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hp,"href","#transformers.AutoProcessor"),c(fd,"class","relative group"),c(gG,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(hG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(uG,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),c(pG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(_G,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(bG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(vG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(FG,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(TG,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(MG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(wG,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(AG,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(yG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xG,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c($G,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(kG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Np,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qp,"id","transformers.AutoModel"),c(qp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qp,"href","#transformers.AutoModel"),c(hd,"class","relative group"),c(PG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(qG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(jG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(DG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(GG,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(OG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(VG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(XG,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(zG,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(QG,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(WG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(UG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(HG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(JG,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(YG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(KG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(ZG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(eO,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(oO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(rO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(tO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(aO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(nO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(sO,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(lO,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(iO,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(dO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(cO,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),c(mO,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(fO,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(gO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(hO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(uO,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(pO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(_O,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(bO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(vO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(FO,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(TO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(MO,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(EO,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(CO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(wO,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(AO,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(yO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(LO,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(xO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c($O,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(kO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(SO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(RO,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(PO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(BO,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(IO,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(NO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(qO,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(jO,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(DO,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(GO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(OO,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(VO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(XO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(zO,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(QO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(WO,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(UO,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(HO,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(JO,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(YO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(KO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(ZO,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(eV,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(oV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(rV,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),c(tV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(aV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(nV,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(sV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(lV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(iV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(dV,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(cV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(mV,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(fV,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(gV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(hV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(uV,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(pV,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(_V,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(bV,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(vV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(FV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(TV,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(MV,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(EV,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(CV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(wV,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(AV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(yV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(LV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(xV,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c($V,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(kV,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(SV,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(RV,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(PV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(BV,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(IV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(NV,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(qV,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(jV,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(DV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(GV,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(OV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(VV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(XV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(zV,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(QV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jb,"id","transformers.AutoModelForPreTraining"),c(Jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jb,"href","#transformers.AutoModelForPreTraining"),c(_d,"class","relative group"),c(WV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(YV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(KV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(ZV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(eX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(oX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(rX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(tX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(aX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(nX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(sX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(lX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(iX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(dX,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(cX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(mX,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(fX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(gX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(hX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(uX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(pX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(_X,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(bX,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(vX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(FX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(TX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(MX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(EX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(CX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(wX,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(AX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(LX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(xX,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c($X,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(kX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(SX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(RX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(PX,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(BX,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(IX,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(NX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(qX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(jX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(DX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(GX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(OX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W2,"id","transformers.AutoModelForCausalLM"),c(W2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W2,"href","#transformers.AutoModelForCausalLM"),c(Fd,"class","relative group"),c(VX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(WX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(UX,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(HX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(JX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(YX,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(KX,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(ZX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(ez,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(oz,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(rz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(tz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(az,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(nz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(sz,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(lz,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(iz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(dz,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(cz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(mz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(fz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(gz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(hz,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(uz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(pz,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(_z,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(bz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(vz,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Fz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Tz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Mz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Ez,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Cz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wz,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Az,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(yz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Lz,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(xz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c($z,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(kz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForMaskedLM"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForMaskedLM"),c(Ed,"class","relative group"),c(Sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Iz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Nz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(qz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(jz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Dz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(Gz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Oz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Vz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Xz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(zz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Qz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Wz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Uz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(Hz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Jz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Yz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Kz,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(Zz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(eQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(oQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(rQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(aQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(nQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(sQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(lQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(iQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(dQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(cQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(mQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(fQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(gQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(pQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_Q,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w1,"id","transformers.AutoModelForSeq2SeqLM"),c(w1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ad,"class","relative group"),c(bQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(MQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(EQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(CQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(wQ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(AQ,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yQ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(LQ,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(xQ,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c($Q,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(kQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(SQ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(RQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(PQ,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(BQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(IQ,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),c(NQ,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(qQ,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(jQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(DQ,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H1,"id","transformers.AutoModelForSequenceClassification"),c(H1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H1,"href","#transformers.AutoModelForSequenceClassification"),c(xd,"class","relative group"),c(GQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(zQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(QQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(WQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(UQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(HQ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(JQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(YQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(KQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(ZQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(eW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(oW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(rW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(tW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(aW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(nW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(sW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(lW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(iW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(dW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(cW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(mW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(fW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(gW,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(hW,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(uW,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(_W,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(bW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(vW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(FW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(TW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(MW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(EW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(CW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(AW,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c($W,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(RW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(PW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(BW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(IW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(NW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(qW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(jW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(DW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YF,"id","transformers.AutoModelForMultipleChoice"),c(YF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YF,"href","#transformers.AutoModelForMultipleChoice"),c(Sd,"class","relative group"),c(OW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(QW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(WW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(UW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(HW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(JW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(YW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(KW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(ZW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(eU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(oU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(rU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(tU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(aU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(nU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(sU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(lU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(iU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(dU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(cU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(mU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(fU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(gU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(hU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(uU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(pU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(_U,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(bU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(vU,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(FU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(TU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.AutoModelForNextSentencePrediction"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.AutoModelForNextSentencePrediction"),c(Bd,"class","relative group"),c(MU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(AU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(yU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(LU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(xU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c($U,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForTokenClassification"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForTokenClassification"),c(qd,"class","relative group"),c(kU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(BU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(IU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(NU,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(qU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(jU,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(DU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(GU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(OU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(VU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(XU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(zU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(QU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(WU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(UU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(HU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(JU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(YU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(KU,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(ZU,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(eH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(oH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(rH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(tH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(aH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(nH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(sH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(iH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(dH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(cH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(mH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(fH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(gH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(hH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(uH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(pH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.AutoModelForQuestionAnswering"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.AutoModelForQuestionAnswering"),c(Gd,"class","relative group"),c(_H,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(TH,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(MH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(EH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(CH,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(wH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(AH,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(yH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(LH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(xH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c($H,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(kH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(SH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(RH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(PH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(BH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(IH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(NH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(qH,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(jH,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(DH,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(GH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(OH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(VH,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(XH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(zH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(QH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(WH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(UH,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(HH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(JH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(YH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(KH,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(ZH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(eJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(oJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(rJ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(tJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(aJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(nJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(sJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(lJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(iJ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.AutoModelForTableQuestionAnswering"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Xd,"class","relative group"),c(dJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.AutoModelForDocumentQuestionAnswering"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.AutoModelForDocumentQuestionAnswering"),c(Wd,"class","relative group"),c(gJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),c(_J,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(bJ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PE,"id","transformers.AutoModelForImageClassification"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.AutoModelForImageClassification"),c(Yd,"class","relative group"),c(vJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(EJ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(CJ,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(wJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(AJ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(yJ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(LJ,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(xJ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c($J,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(kJ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(SJ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(RJ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(PJ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(BJ,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(IJ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(NJ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(qJ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(jJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(DJ,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(GJ,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(OJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KE,"id","transformers.AutoModelForVideoClassification"),c(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KE,"href","#transformers.AutoModelForVideoClassification"),c(ec,"class","relative group"),c(VJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t4,"id","transformers.AutoModelForVision2Seq"),c(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t4,"href","#transformers.AutoModelForVision2Seq"),c(tc,"class","relative group"),c(WJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i4,"id","transformers.AutoModelForVisualQuestionAnswering"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(sc,"class","relative group"),c(YJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g4,"id","transformers.AutoModelForAudioClassification"),c(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g4,"href","#transformers.AutoModelForAudioClassification"),c(dc,"class","relative group"),c(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(nY,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(sY,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(lY,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(iY,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(dY,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(cY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(mY,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(fY,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.AutoModelForAudioFrameClassification"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.AutoModelForAudioFrameClassification"),c(fc,"class","relative group"),c(gY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(_Y,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(bY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(vY,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(FY,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B4,"id","transformers.AutoModelForCTC"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.AutoModelForCTC"),c(uc,"class","relative group"),c(TY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(wY,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(AY,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(yY,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(LY,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(xY,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c($Y,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(kY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(SY,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(RY,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.AutoModelForSpeechSeq2Seq"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bc,"class","relative group"),c(PY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NY,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(qY,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.AutoModelForAudioXVector"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.AutoModelForAudioXVector"),c(Tc,"class","relative group"),c(jY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(VY,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(XY,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(zY,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(QY,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cC,"id","transformers.AutoModelForMaskedImageModeling"),c(cC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cC,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cc,"class","relative group"),c(WY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(YY,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(KY,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(ZY,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.AutoModelForObjectDetection"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.AutoModelForObjectDetection"),c(yc,"class","relative group"),c(eK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(aK,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CC,"id","transformers.AutoModelForImageSegmentation"),c(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CC,"href","#transformers.AutoModelForImageSegmentation"),c($c,"class","relative group"),c(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iK,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xC,"id","transformers.AutoModelForSemanticSegmentation"),c(xC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xC,"href","#transformers.AutoModelForSemanticSegmentation"),c(Rc,"class","relative group"),c(dK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(gK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(hK,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(uK,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(pK,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qC,"id","transformers.AutoModelForInstanceSegmentation"),c(qC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qC,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ic,"class","relative group"),c(_K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FK,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.TFAutoModel"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.TFAutoModel"),c(jc,"class","relative group"),c(TK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(wK,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(AK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(yK,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(LK,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(xK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c($K,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(kK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(SK,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(RK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(PK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(BK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(IK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(NK,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(qK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(jK,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(DK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(GK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(OK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(VK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(XK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(zK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(QK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(WK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(UK,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(HK,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(JK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(YK,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(KK,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(ZK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(eZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(oZ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(rZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(tZ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(aZ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(nZ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(sZ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(lZ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(iZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(dZ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(cZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(mZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(fZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(gZ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(hZ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(uZ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(pZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(_Z,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(bZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(vZ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(FZ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(TZ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),c(MZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(EZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(CZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z3,"id","transformers.TFAutoModelForPreTraining"),c(z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z3,"href","#transformers.TFAutoModelForPreTraining"),c(Oc,"class","relative group"),c(wZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(xZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c($Z,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(kZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(SZ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(RZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(PZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(BZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(IZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(NZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(qZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(jZ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(DZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(GZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(OZ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(VZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(XZ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(zZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(QZ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(WZ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(UZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(JZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.TFAutoModelForCausalLM"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.TFAutoModelForCausalLM"),c(zc,"class","relative group"),c(YZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(oee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(ree,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(tee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(aee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(nee,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(see,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(lee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(iee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(dee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(cee,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(mee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(fee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(gee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.TFAutoModelForImageClassification"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.TFAutoModelForImageClassification"),c(Uc,"class","relative group"),c(hee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_ee,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(bee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(vee,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(Fee,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(Tee,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(Mee,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(Eee,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(Cee,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(wee,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(Aee,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z5,"id","transformers.TFAutoModelForSemanticSegmentation"),c(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z5,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Yc,"class","relative group"),c(yee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($ee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(kee,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c(See,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y5,"id","transformers.TFAutoModelForMaskedLM"),c(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y5,"href","#transformers.TFAutoModelForMaskedLM"),c(om,"class","relative group"),c(Ree,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Nee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(qee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(jee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Dee,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(Gee,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(Oee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Vee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(Xee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(zee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(Qee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Wee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(Uee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(Hee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Jee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(Yee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Kee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(Zee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(eoe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(ooe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F0,"id","transformers.TFAutoModelForSeq2SeqLM"),c(F0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F0,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(am,"class","relative group"),c(roe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(toe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(noe,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(soe,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(loe,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(ioe,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(doe,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(coe,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(moe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(foe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(goe,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(hoe,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R0,"id","transformers.TFAutoModelForSequenceClassification"),c(R0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R0,"href","#transformers.TFAutoModelForSequenceClassification"),c(lm,"class","relative group"),c(uoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_oe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(boe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(voe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(Foe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(Toe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(Moe,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(Eoe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(Coe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(woe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(Aoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(yoe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(Loe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(xoe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c($oe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(koe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Soe,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c(Roe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(Poe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Boe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Ioe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Noe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(qoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(joe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Doe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Goe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Ooe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Voe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(Xoe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dw,"id","transformers.TFAutoModelForMultipleChoice"),c(dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dw,"href","#transformers.TFAutoModelForMultipleChoice"),c(cm,"class","relative group"),c(zoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Woe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Hoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Joe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(Yoe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(Koe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Zoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(ere,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(ore,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(rre,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(tre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(are,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(nre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(sre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(lre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(ire,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(dre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(cre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xw,"id","transformers.TFAutoModelForNextSentencePrediction"),c(xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xw,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(gm,"class","relative group"),c(mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hre,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(ure,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pm,"class","relative group"),c(pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vre,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qw,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),c(qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qw,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),c(vm,"class","relative group"),c(Fre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ere,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ow,"id","transformers.TFAutoModelForTokenClassification"),c(Ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ow,"href","#transformers.TFAutoModelForTokenClassification"),c(Mm,"class","relative group"),c(Cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Are,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yre,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Lre,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(xre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c($re,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(kre,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(Sre,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(Rre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Pre,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(Bre,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(Ire,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Nre,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(qre,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(jre,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Dre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Gre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Ore,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Vre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Xre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(zre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Qre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Wre,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fA,"id","transformers.TFAutoModelForQuestionAnswering"),c(fA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fA,"href","#transformers.TFAutoModelForQuestionAnswering"),c(wm,"class","relative group"),c(Ure,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yre,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Kre,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Zre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(ete,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(ote,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(rte,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(tte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(ate,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(nte,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(ste,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(lte,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(ite,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(dte,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(cte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(mte,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(fte,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(gte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(hte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(ute,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(pte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(_te,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IA,"id","transformers.TFAutoModelForVision2Seq"),c(IA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IA,"href","#transformers.TFAutoModelForVision2Seq"),c(Lm,"class","relative group"),c(bte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tte,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DA,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(DA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DA,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(km,"class","relative group"),c(Mte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ete,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wte,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XA,"id","transformers.FlaxAutoModel"),c(XA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XA,"href","#transformers.FlaxAutoModel"),c(Pm,"class","relative group"),c(Ate,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c($te,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(kte,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(Ste,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(Rte,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Pte,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Bte,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(Ite,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(Nte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(qte,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(jte,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Dte,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Gte,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(Ote,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Vte,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(Xte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(zte,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Qte,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(Wte,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Ute,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Hte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Jte,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(Yte,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Kte,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(Zte,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(eae,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(oae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F6,"id","transformers.FlaxAutoModelForCausalLM"),c(F6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F6,"href","#transformers.FlaxAutoModelForCausalLM"),c(Nm,"class","relative group"),c(rae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(sae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(lae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(iae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(dae,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(cae,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(mae,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(fae,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(gae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(hae,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R6,"id","transformers.FlaxAutoModelForPreTraining"),c(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R6,"href","#transformers.FlaxAutoModelForPreTraining"),c(Dm,"class","relative group"),c(uae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_ae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(vae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Fae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Tae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Mae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Eae,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Cae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(wae,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Aae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(yae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Lae,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(xae,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c($ae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H6,"id","transformers.FlaxAutoModelForMaskedLM"),c(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H6,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Vm,"class","relative group"),c(kae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Bae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Iae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Nae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(qae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(jae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Dae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Gae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Oae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Vae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i7,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i7,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Qm,"class","relative group"),c(Xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Uae,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Hae,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Jae,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Yae,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Kae,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Zae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ene,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(one,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(rne,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.FlaxAutoModelForSequenceClassification"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Hm,"class","relative group"),c(tne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ane,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(lne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(ine,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(dne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(cne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(mne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(fne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(gne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(hne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(une,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P7,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(P7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P7,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Km,"class","relative group"),c(pne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_ne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Fne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Tne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Mne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Ene,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(Cne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(wne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Ane,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(yne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Lne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W7,"id","transformers.FlaxAutoModelForTokenClassification"),c(W7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W7,"href","#transformers.FlaxAutoModelForTokenClassification"),c(of,"class","relative group"),c(xne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($ne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Rne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Pne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Bne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Ine,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Nne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(qne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(jne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ay,"id","transformers.FlaxAutoModelForMultipleChoice"),c(ay,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ay,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(af,"class","relative group"),c(Dne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(One,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Xne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(zne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Qne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Wne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Une,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Hne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Jne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uy,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(uy,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uy,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(lf,"class","relative group"),c(Yne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ese,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vy,"id","transformers.FlaxAutoModelForImageClassification"),c(vy,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vy,"href","#transformers.FlaxAutoModelForImageClassification"),c(mf,"class","relative group"),c(ose,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ase,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(nse,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cy,"id","transformers.FlaxAutoModelForVision2Seq"),c(Cy,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cy,"href","#transformers.FlaxAutoModelForVision2Seq"),c(hf,"class","relative group"),c(sse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ise,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dse,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,yo),e(yo,ed),b(m,Ff,_),b(m,ut,_),e(ut,od),e(ut,rd),e(rd,t9),e(ut,Tf),b(m,Ve,_),b(m,Ue,_),e(Ue,td),e(Ue,Zn),e(Zn,a9),e(Ue,es),e(Ue,os),e(os,n9),e(Ue,ad),e(Ue,rs),e(rs,s9),e(Ue,nd),b(m,Mf,_),M(Qa,m,_),b(m,He,_),b(m,Ae,_),e(Ae,sB),e(Ae,sd),e(sd,lB),e(Ae,iB),b(m,Lo,_),b(m,Wa,_),e(Wa,dB),e(Wa,Ef),e(Ef,cB),e(Wa,Jeo),b(m,vJe,_),b(m,ld,_),e(ld,Cf),e(Cf,gie),M(l9,gie,null),e(ld,Yeo),e(ld,hie),e(hie,Keo),b(m,FJe,_),b(m,ts,_),e(ts,Zeo),e(ts,uie),e(uie,eoo),e(ts,ooo),e(ts,pie),e(pie,roo),e(ts,too),b(m,TJe,_),M(i9,m,_),b(m,MJe,_),b(m,mB,_),e(mB,aoo),b(m,EJe,_),M(wf,m,_),b(m,CJe,_),b(m,id,_),e(id,Af),e(Af,_ie),M(d9,_ie,null),e(id,noo),e(id,bie),e(bie,soo),b(m,wJe,_),b(m,xo,_),M(c9,xo,null),e(xo,loo),e(xo,m9),e(m9,ioo),e(m9,fB),e(fB,doo),e(m9,coo),e(xo,moo),e(xo,f9),e(f9,foo),e(f9,vie),e(vie,goo),e(f9,hoo),e(xo,uoo),e(xo,Pr),M(g9,Pr,null),e(Pr,poo),e(Pr,Fie),e(Fie,_oo),e(Pr,boo),e(Pr,dd),e(dd,voo),e(dd,Tie),e(Tie,Foo),e(dd,Too),e(dd,Mie),e(Mie,Moo),e(dd,Eoo),e(Pr,Coo),e(Pr,A),e(A,yf),e(yf,Eie),e(Eie,woo),e(yf,Aoo),e(yf,gB),e(gB,yoo),e(yf,Loo),e(A,xoo),e(A,Lf),e(Lf,Cie),e(Cie,$oo),e(Lf,koo),e(Lf,hB),e(hB,Soo),e(Lf,Roo),e(A,Poo),e(A,xf),e(xf,wie),e(wie,Boo),e(xf,Ioo),e(xf,uB),e(uB,Noo),e(xf,qoo),e(A,joo),e(A,$f),e($f,Aie),e(Aie,Doo),e($f,Goo),e($f,pB),e(pB,Ooo),e($f,Voo),e(A,Xoo),e(A,kf),e(kf,yie),e(yie,zoo),e(kf,Qoo),e(kf,_B),e(_B,Woo),e(kf,Uoo),e(A,Hoo),e(A,Sf),e(Sf,Lie),e(Lie,Joo),e(Sf,Yoo),e(Sf,bB),e(bB,Koo),e(Sf,Zoo),e(A,ero),e(A,Rf),e(Rf,xie),e(xie,oro),e(Rf,rro),e(Rf,vB),e(vB,tro),e(Rf,aro),e(A,nro),e(A,Pf),e(Pf,$ie),e($ie,sro),e(Pf,lro),e(Pf,FB),e(FB,iro),e(Pf,dro),e(A,cro),e(A,Bf),e(Bf,kie),e(kie,mro),e(Bf,fro),e(Bf,TB),e(TB,gro),e(Bf,hro),e(A,uro),e(A,If),e(If,Sie),e(Sie,pro),e(If,_ro),e(If,MB),e(MB,bro),e(If,vro),e(A,Fro),e(A,Nf),e(Nf,Rie),e(Rie,Tro),e(Nf,Mro),e(Nf,EB),e(EB,Ero),e(Nf,Cro),e(A,wro),e(A,qf),e(qf,Pie),e(Pie,Aro),e(qf,yro),e(qf,CB),e(CB,Lro),e(qf,xro),e(A,$ro),e(A,jf),e(jf,Bie),e(Bie,kro),e(jf,Sro),e(jf,wB),e(wB,Rro),e(jf,Pro),e(A,Bro),e(A,Df),e(Df,Iie),e(Iie,Iro),e(Df,Nro),e(Df,AB),e(AB,qro),e(Df,jro),e(A,Dro),e(A,Gf),e(Gf,Nie),e(Nie,Gro),e(Gf,Oro),e(Gf,yB),e(yB,Vro),e(Gf,Xro),e(A,zro),e(A,Of),e(Of,qie),e(qie,Qro),e(Of,Wro),e(Of,LB),e(LB,Uro),e(Of,Hro),e(A,Jro),e(A,Vf),e(Vf,jie),e(jie,Yro),e(Vf,Kro),e(Vf,xB),e(xB,Zro),e(Vf,eto),e(A,oto),e(A,Xf),e(Xf,Die),e(Die,rto),e(Xf,tto),e(Xf,$B),e($B,ato),e(Xf,nto),e(A,sto),e(A,zf),e(zf,Gie),e(Gie,lto),e(zf,ito),e(zf,kB),e(kB,dto),e(zf,cto),e(A,mto),e(A,Qf),e(Qf,Oie),e(Oie,fto),e(Qf,gto),e(Qf,SB),e(SB,hto),e(Qf,uto),e(A,pto),e(A,Wf),e(Wf,Vie),e(Vie,_to),e(Wf,bto),e(Wf,RB),e(RB,vto),e(Wf,Fto),e(A,Tto),e(A,Uf),e(Uf,Xie),e(Xie,Mto),e(Uf,Eto),e(Uf,PB),e(PB,Cto),e(Uf,wto),e(A,Ato),e(A,Hf),e(Hf,zie),e(zie,yto),e(Hf,Lto),e(Hf,BB),e(BB,xto),e(Hf,$to),e(A,kto),e(A,Jf),e(Jf,Qie),e(Qie,Sto),e(Jf,Rto),e(Jf,IB),e(IB,Pto),e(Jf,Bto),e(A,Ito),e(A,Yf),e(Yf,Wie),e(Wie,Nto),e(Yf,qto),e(Yf,NB),e(NB,jto),e(Yf,Dto),e(A,Gto),e(A,Kf),e(Kf,Uie),e(Uie,Oto),e(Kf,Vto),e(Kf,qB),e(qB,Xto),e(Kf,zto),e(A,Qto),e(A,Zf),e(Zf,Hie),e(Hie,Wto),e(Zf,Uto),e(Zf,jB),e(jB,Hto),e(Zf,Jto),e(A,Yto),e(A,eg),e(eg,Jie),e(Jie,Kto),e(eg,Zto),e(eg,DB),e(DB,eao),e(eg,oao),e(A,rao),e(A,og),e(og,Yie),e(Yie,tao),e(og,aao),e(og,GB),e(GB,nao),e(og,sao),e(A,lao),e(A,rg),e(rg,Kie),e(Kie,iao),e(rg,dao),e(rg,OB),e(OB,cao),e(rg,mao),e(A,fao),e(A,tg),e(tg,Zie),e(Zie,gao),e(tg,hao),e(tg,VB),e(VB,uao),e(tg,pao),e(A,_ao),e(A,ag),e(ag,ede),e(ede,bao),e(ag,vao),e(ag,XB),e(XB,Fao),e(ag,Tao),e(A,Mao),e(A,ng),e(ng,ode),e(ode,Eao),e(ng,Cao),e(ng,zB),e(zB,wao),e(ng,Aao),e(A,yao),e(A,sg),e(sg,rde),e(rde,Lao),e(sg,xao),e(sg,QB),e(QB,$ao),e(sg,kao),e(A,Sao),e(A,lg),e(lg,tde),e(tde,Rao),e(lg,Pao),e(lg,WB),e(WB,Bao),e(lg,Iao),e(A,Nao),e(A,ig),e(ig,ade),e(ade,qao),e(ig,jao),e(ig,UB),e(UB,Dao),e(ig,Gao),e(A,Oao),e(A,dg),e(dg,nde),e(nde,Vao),e(dg,Xao),e(dg,HB),e(HB,zao),e(dg,Qao),e(A,Wao),e(A,cg),e(cg,sde),e(sde,Uao),e(cg,Hao),e(cg,JB),e(JB,Jao),e(cg,Yao),e(A,Kao),e(A,mg),e(mg,lde),e(lde,Zao),e(mg,eno),e(mg,YB),e(YB,ono),e(mg,rno),e(A,tno),e(A,fg),e(fg,ide),e(ide,ano),e(fg,nno),e(fg,KB),e(KB,sno),e(fg,lno),e(A,ino),e(A,gg),e(gg,dde),e(dde,dno),e(gg,cno),e(gg,ZB),e(ZB,mno),e(gg,fno),e(A,gno),e(A,hg),e(hg,cde),e(cde,hno),e(hg,uno),e(hg,eI),e(eI,pno),e(hg,_no),e(A,bno),e(A,ug),e(ug,mde),e(mde,vno),e(ug,Fno),e(ug,oI),e(oI,Tno),e(ug,Mno),e(A,Eno),e(A,pg),e(pg,fde),e(fde,Cno),e(pg,wno),e(pg,rI),e(rI,Ano),e(pg,yno),e(A,Lno),e(A,_g),e(_g,gde),e(gde,xno),e(_g,$no),e(_g,tI),e(tI,kno),e(_g,Sno),e(A,Rno),e(A,bg),e(bg,hde),e(hde,Pno),e(bg,Bno),e(bg,aI),e(aI,Ino),e(bg,Nno),e(A,qno),e(A,vg),e(vg,ude),e(ude,jno),e(vg,Dno),e(vg,nI),e(nI,Gno),e(vg,Ono),e(A,Vno),e(A,Fg),e(Fg,pde),e(pde,Xno),e(Fg,zno),e(Fg,sI),e(sI,Qno),e(Fg,Wno),e(A,Uno),e(A,Tg),e(Tg,_de),e(_de,Hno),e(Tg,Jno),e(Tg,lI),e(lI,Yno),e(Tg,Kno),e(A,Zno),e(A,Mg),e(Mg,bde),e(bde,eso),e(Mg,oso),e(Mg,iI),e(iI,rso),e(Mg,tso),e(A,aso),e(A,Eg),e(Eg,vde),e(vde,nso),e(Eg,sso),e(Eg,dI),e(dI,lso),e(Eg,iso),e(A,dso),e(A,Cg),e(Cg,Fde),e(Fde,cso),e(Cg,mso),e(Cg,cI),e(cI,fso),e(Cg,gso),e(A,hso),e(A,wg),e(wg,Tde),e(Tde,uso),e(wg,pso),e(wg,mI),e(mI,_so),e(wg,bso),e(A,vso),e(A,Ag),e(Ag,Mde),e(Mde,Fso),e(Ag,Tso),e(Ag,fI),e(fI,Mso),e(Ag,Eso),e(A,Cso),e(A,yg),e(yg,Ede),e(Ede,wso),e(yg,Aso),e(yg,gI),e(gI,yso),e(yg,Lso),e(A,xso),e(A,Lg),e(Lg,Cde),e(Cde,$so),e(Lg,kso),e(Lg,hI),e(hI,Sso),e(Lg,Rso),e(A,Pso),e(A,xg),e(xg,wde),e(wde,Bso),e(xg,Iso),e(xg,uI),e(uI,Nso),e(xg,qso),e(A,jso),e(A,$g),e($g,Ade),e(Ade,Dso),e($g,Gso),e($g,pI),e(pI,Oso),e($g,Vso),e(A,Xso),e(A,kg),e(kg,yde),e(yde,zso),e(kg,Qso),e(kg,_I),e(_I,Wso),e(kg,Uso),e(A,Hso),e(A,Sg),e(Sg,Lde),e(Lde,Jso),e(Sg,Yso),e(Sg,bI),e(bI,Kso),e(Sg,Zso),e(A,elo),e(A,Rg),e(Rg,xde),e(xde,olo),e(Rg,rlo),e(Rg,vI),e(vI,tlo),e(Rg,alo),e(A,nlo),e(A,Pg),e(Pg,$de),e($de,slo),e(Pg,llo),e(Pg,FI),e(FI,ilo),e(Pg,dlo),e(A,clo),e(A,Bg),e(Bg,kde),e(kde,mlo),e(Bg,flo),e(Bg,TI),e(TI,glo),e(Bg,hlo),e(A,ulo),e(A,Ig),e(Ig,Sde),e(Sde,plo),e(Ig,_lo),e(Ig,MI),e(MI,blo),e(Ig,vlo),e(A,Flo),e(A,Ng),e(Ng,Rde),e(Rde,Tlo),e(Ng,Mlo),e(Ng,EI),e(EI,Elo),e(Ng,Clo),e(A,wlo),e(A,qg),e(qg,Pde),e(Pde,Alo),e(qg,ylo),e(qg,CI),e(CI,Llo),e(qg,xlo),e(A,$lo),e(A,jg),e(jg,Bde),e(Bde,klo),e(jg,Slo),e(jg,wI),e(wI,Rlo),e(jg,Plo),e(A,Blo),e(A,Dg),e(Dg,Ide),e(Ide,Ilo),e(Dg,Nlo),e(Dg,AI),e(AI,qlo),e(Dg,jlo),e(A,Dlo),e(A,Gg),e(Gg,Nde),e(Nde,Glo),e(Gg,Olo),e(Gg,yI),e(yI,Vlo),e(Gg,Xlo),e(A,zlo),e(A,Og),e(Og,qde),e(qde,Qlo),e(Og,Wlo),e(Og,LI),e(LI,Ulo),e(Og,Hlo),e(A,Jlo),e(A,Vg),e(Vg,jde),e(jde,Ylo),e(Vg,Klo),e(Vg,xI),e(xI,Zlo),e(Vg,eio),e(A,oio),e(A,Xg),e(Xg,Dde),e(Dde,rio),e(Xg,tio),e(Xg,$I),e($I,aio),e(Xg,nio),e(A,sio),e(A,zg),e(zg,Gde),e(Gde,lio),e(zg,iio),e(zg,kI),e(kI,dio),e(zg,cio),e(A,mio),e(A,Qg),e(Qg,Ode),e(Ode,fio),e(Qg,gio),e(Qg,SI),e(SI,hio),e(Qg,uio),e(A,pio),e(A,Wg),e(Wg,Vde),e(Vde,_io),e(Wg,bio),e(Wg,RI),e(RI,vio),e(Wg,Fio),e(A,Tio),e(A,Ug),e(Ug,Xde),e(Xde,Mio),e(Ug,Eio),e(Ug,PI),e(PI,Cio),e(Ug,wio),e(A,Aio),e(A,Hg),e(Hg,zde),e(zde,yio),e(Hg,Lio),e(Hg,BI),e(BI,xio),e(Hg,$io),e(A,kio),e(A,Jg),e(Jg,Qde),e(Qde,Sio),e(Jg,Rio),e(Jg,II),e(II,Pio),e(Jg,Bio),e(A,Iio),e(A,Yg),e(Yg,Wde),e(Wde,Nio),e(Yg,qio),e(Yg,NI),e(NI,jio),e(Yg,Dio),e(A,Gio),e(A,Kg),e(Kg,Ude),e(Ude,Oio),e(Kg,Vio),e(Kg,qI),e(qI,Xio),e(Kg,zio),e(A,Qio),e(A,Zg),e(Zg,Hde),e(Hde,Wio),e(Zg,Uio),e(Zg,jI),e(jI,Hio),e(Zg,Jio),e(A,Yio),e(A,eh),e(eh,Jde),e(Jde,Kio),e(eh,Zio),e(eh,DI),e(DI,edo),e(eh,odo),e(A,rdo),e(A,oh),e(oh,Yde),e(Yde,tdo),e(oh,ado),e(oh,GI),e(GI,ndo),e(oh,sdo),e(A,ldo),e(A,rh),e(rh,Kde),e(Kde,ido),e(rh,ddo),e(rh,OI),e(OI,cdo),e(rh,mdo),e(A,fdo),e(A,th),e(th,Zde),e(Zde,gdo),e(th,hdo),e(th,VI),e(VI,udo),e(th,pdo),e(A,_do),e(A,ah),e(ah,ece),e(ece,bdo),e(ah,vdo),e(ah,XI),e(XI,Fdo),e(ah,Tdo),e(A,Mdo),e(A,nh),e(nh,oce),e(oce,Edo),e(nh,Cdo),e(nh,zI),e(zI,wdo),e(nh,Ado),e(A,ydo),e(A,sh),e(sh,rce),e(rce,Ldo),e(sh,xdo),e(sh,QI),e(QI,$do),e(sh,kdo),e(A,Sdo),e(A,lh),e(lh,tce),e(tce,Rdo),e(lh,Pdo),e(lh,WI),e(WI,Bdo),e(lh,Ido),e(A,Ndo),e(A,ih),e(ih,ace),e(ace,qdo),e(ih,jdo),e(ih,UI),e(UI,Ddo),e(ih,Gdo),e(A,Odo),e(A,dh),e(dh,nce),e(nce,Vdo),e(dh,Xdo),e(dh,HI),e(HI,zdo),e(dh,Qdo),e(A,Wdo),e(A,ch),e(ch,sce),e(sce,Udo),e(ch,Hdo),e(ch,JI),e(JI,Jdo),e(ch,Ydo),e(A,Kdo),e(A,mh),e(mh,lce),e(lce,Zdo),e(mh,eco),e(mh,YI),e(YI,oco),e(mh,rco),e(A,tco),e(A,fh),e(fh,ice),e(ice,aco),e(fh,nco),e(fh,KI),e(KI,sco),e(fh,lco),e(A,ico),e(A,gh),e(gh,dce),e(dce,dco),e(gh,cco),e(gh,ZI),e(ZI,mco),e(gh,fco),e(A,gco),e(A,hh),e(hh,cce),e(cce,hco),e(hh,uco),e(hh,eN),e(eN,pco),e(hh,_co),e(A,bco),e(A,uh),e(uh,mce),e(mce,vco),e(uh,Fco),e(uh,oN),e(oN,Tco),e(uh,Mco),e(A,Eco),e(A,ph),e(ph,fce),e(fce,Cco),e(ph,wco),e(ph,rN),e(rN,Aco),e(ph,yco),e(A,Lco),e(A,_h),e(_h,gce),e(gce,xco),e(_h,$co),e(_h,tN),e(tN,kco),e(_h,Sco),e(A,Rco),e(A,bh),e(bh,hce),e(hce,Pco),e(bh,Bco),e(bh,aN),e(aN,Ico),e(bh,Nco),e(A,qco),e(A,vh),e(vh,uce),e(uce,jco),e(vh,Dco),e(vh,nN),e(nN,Gco),e(vh,Oco),e(A,Vco),e(A,Fh),e(Fh,pce),e(pce,Xco),e(Fh,zco),e(Fh,sN),e(sN,Qco),e(Fh,Wco),e(A,Uco),e(A,Th),e(Th,_ce),e(_ce,Hco),e(Th,Jco),e(Th,lN),e(lN,Yco),e(Th,Kco),e(A,Zco),e(A,Mh),e(Mh,bce),e(bce,emo),e(Mh,omo),e(Mh,iN),e(iN,rmo),e(Mh,tmo),e(A,amo),e(A,Eh),e(Eh,vce),e(vce,nmo),e(Eh,smo),e(Eh,dN),e(dN,lmo),e(Eh,imo),e(A,dmo),e(A,Ch),e(Ch,Fce),e(Fce,cmo),e(Ch,mmo),e(Ch,cN),e(cN,fmo),e(Ch,gmo),e(A,hmo),e(A,wh),e(wh,Tce),e(Tce,umo),e(wh,pmo),e(wh,mN),e(mN,_mo),e(wh,bmo),e(A,vmo),e(A,Ah),e(Ah,Mce),e(Mce,Fmo),e(Ah,Tmo),e(Ah,fN),e(fN,Mmo),e(Ah,Emo),e(A,Cmo),e(A,yh),e(yh,Ece),e(Ece,wmo),e(yh,Amo),e(yh,gN),e(gN,ymo),e(yh,Lmo),e(A,xmo),e(A,Lh),e(Lh,Cce),e(Cce,$mo),e(Lh,kmo),e(Lh,hN),e(hN,Smo),e(Lh,Rmo),e(A,Pmo),e(A,xh),e(xh,wce),e(wce,Bmo),e(xh,Imo),e(xh,uN),e(uN,Nmo),e(xh,qmo),e(A,jmo),e(A,$h),e($h,Ace),e(Ace,Dmo),e($h,Gmo),e($h,pN),e(pN,Omo),e($h,Vmo),e(A,Xmo),e(A,kh),e(kh,yce),e(yce,zmo),e(kh,Qmo),e(kh,_N),e(_N,Wmo),e(kh,Umo),e(A,Hmo),e(A,Sh),e(Sh,Lce),e(Lce,Jmo),e(Sh,Ymo),e(Sh,bN),e(bN,Kmo),e(Sh,Zmo),e(A,efo),e(A,Rh),e(Rh,xce),e(xce,ofo),e(Rh,rfo),e(Rh,vN),e(vN,tfo),e(Rh,afo),e(A,nfo),e(A,Ph),e(Ph,$ce),e($ce,sfo),e(Ph,lfo),e(Ph,FN),e(FN,ifo),e(Ph,dfo),e(A,cfo),e(A,Bh),e(Bh,kce),e(kce,mfo),e(Bh,ffo),e(Bh,TN),e(TN,gfo),e(Bh,hfo),e(A,ufo),e(A,Ih),e(Ih,Sce),e(Sce,pfo),e(Ih,_fo),e(Ih,MN),e(MN,bfo),e(Ih,vfo),e(A,Ffo),e(A,Nh),e(Nh,Rce),e(Rce,Tfo),e(Nh,Mfo),e(Nh,EN),e(EN,Efo),e(Nh,Cfo),e(A,wfo),e(A,qh),e(qh,Pce),e(Pce,Afo),e(qh,yfo),e(qh,CN),e(CN,Lfo),e(qh,xfo),e(A,$fo),e(A,jh),e(jh,Bce),e(Bce,kfo),e(jh,Sfo),e(jh,wN),e(wN,Rfo),e(jh,Pfo),e(A,Bfo),e(A,Dh),e(Dh,Ice),e(Ice,Ifo),e(Dh,Nfo),e(Dh,AN),e(AN,qfo),e(Dh,jfo),e(A,Dfo),e(A,Gh),e(Gh,Nce),e(Nce,Gfo),e(Gh,Ofo),e(Gh,yN),e(yN,Vfo),e(Gh,Xfo),e(Pr,zfo),M(Oh,Pr,null),e(xo,Qfo),e(xo,Vh),M(h9,Vh,null),e(Vh,Wfo),e(Vh,qce),e(qce,Ufo),b(m,AJe,_),b(m,cd,_),e(cd,Xh),e(Xh,jce),M(u9,jce,null),e(cd,Hfo),e(cd,Dce),e(Dce,Jfo),b(m,yJe,_),b(m,$o,_),M(p9,$o,null),e($o,Yfo),e($o,_9),e(_9,Kfo),e(_9,LN),e(LN,Zfo),e(_9,ego),e($o,ogo),e($o,b9),e(b9,rgo),e(b9,Gce),e(Gce,tgo),e(b9,ago),e($o,ngo),e($o,Br),M(v9,Br,null),e(Br,sgo),e(Br,Oce),e(Oce,lgo),e(Br,igo),e(Br,Ua),e(Ua,dgo),e(Ua,Vce),e(Vce,cgo),e(Ua,mgo),e(Ua,Xce),e(Xce,fgo),e(Ua,ggo),e(Ua,zce),e(zce,hgo),e(Ua,ugo),e(Br,pgo),e(Br,k),e(k,as),e(as,Qce),e(Qce,_go),e(as,bgo),e(as,xN),e(xN,vgo),e(as,Fgo),e(as,$N),e($N,Tgo),e(as,Mgo),e(k,Ego),e(k,ns),e(ns,Wce),e(Wce,Cgo),e(ns,wgo),e(ns,kN),e(kN,Ago),e(ns,ygo),e(ns,SN),e(SN,Lgo),e(ns,xgo),e(k,$go),e(k,ss),e(ss,Uce),e(Uce,kgo),e(ss,Sgo),e(ss,RN),e(RN,Rgo),e(ss,Pgo),e(ss,PN),e(PN,Bgo),e(ss,Igo),e(k,Ngo),e(k,zh),e(zh,Hce),e(Hce,qgo),e(zh,jgo),e(zh,BN),e(BN,Dgo),e(zh,Ggo),e(k,Ogo),e(k,ls),e(ls,Jce),e(Jce,Vgo),e(ls,Xgo),e(ls,IN),e(IN,zgo),e(ls,Qgo),e(ls,NN),e(NN,Wgo),e(ls,Ugo),e(k,Hgo),e(k,Qh),e(Qh,Yce),e(Yce,Jgo),e(Qh,Ygo),e(Qh,qN),e(qN,Kgo),e(Qh,Zgo),e(k,eho),e(k,Wh),e(Wh,Kce),e(Kce,oho),e(Wh,rho),e(Wh,jN),e(jN,tho),e(Wh,aho),e(k,nho),e(k,Uh),e(Uh,Zce),e(Zce,sho),e(Uh,lho),e(Uh,DN),e(DN,iho),e(Uh,dho),e(k,cho),e(k,is),e(is,eme),e(eme,mho),e(is,fho),e(is,GN),e(GN,gho),e(is,hho),e(is,ON),e(ON,uho),e(is,pho),e(k,_ho),e(k,ds),e(ds,ome),e(ome,bho),e(ds,vho),e(ds,VN),e(VN,Fho),e(ds,Tho),e(ds,XN),e(XN,Mho),e(ds,Eho),e(k,Cho),e(k,cs),e(cs,rme),e(rme,who),e(cs,Aho),e(cs,zN),e(zN,yho),e(cs,Lho),e(cs,QN),e(QN,xho),e(cs,$ho),e(k,kho),e(k,Hh),e(Hh,tme),e(tme,Sho),e(Hh,Rho),e(Hh,WN),e(WN,Pho),e(Hh,Bho),e(k,Iho),e(k,Jh),e(Jh,ame),e(ame,Nho),e(Jh,qho),e(Jh,UN),e(UN,jho),e(Jh,Dho),e(k,Gho),e(k,Yh),e(Yh,nme),e(nme,Oho),e(Yh,Vho),e(Yh,HN),e(HN,Xho),e(Yh,zho),e(k,Qho),e(k,ms),e(ms,sme),e(sme,Who),e(ms,Uho),e(ms,JN),e(JN,Hho),e(ms,Jho),e(ms,YN),e(YN,Yho),e(ms,Kho),e(k,Zho),e(k,Kh),e(Kh,lme),e(lme,euo),e(Kh,ouo),e(Kh,KN),e(KN,ruo),e(Kh,tuo),e(k,auo),e(k,fs),e(fs,ime),e(ime,nuo),e(fs,suo),e(fs,ZN),e(ZN,luo),e(fs,iuo),e(fs,eq),e(eq,duo),e(fs,cuo),e(k,muo),e(k,gs),e(gs,dme),e(dme,fuo),e(gs,guo),e(gs,oq),e(oq,huo),e(gs,uuo),e(gs,rq),e(rq,puo),e(gs,_uo),e(k,buo),e(k,hs),e(hs,cme),e(cme,vuo),e(hs,Fuo),e(hs,tq),e(tq,Tuo),e(hs,Muo),e(hs,aq),e(aq,Euo),e(hs,Cuo),e(k,wuo),e(k,us),e(us,mme),e(mme,Auo),e(us,yuo),e(us,nq),e(nq,Luo),e(us,xuo),e(us,sq),e(sq,$uo),e(us,kuo),e(k,Suo),e(k,Zh),e(Zh,fme),e(fme,Ruo),e(Zh,Puo),e(Zh,lq),e(lq,Buo),e(Zh,Iuo),e(k,Nuo),e(k,ps),e(ps,gme),e(gme,quo),e(ps,juo),e(ps,iq),e(iq,Duo),e(ps,Guo),e(ps,dq),e(dq,Ouo),e(ps,Vuo),e(k,Xuo),e(k,_s),e(_s,hme),e(hme,zuo),e(_s,Quo),e(_s,cq),e(cq,Wuo),e(_s,Uuo),e(_s,mq),e(mq,Huo),e(_s,Juo),e(k,Yuo),e(k,bs),e(bs,ume),e(ume,Kuo),e(bs,Zuo),e(bs,fq),e(fq,epo),e(bs,opo),e(bs,gq),e(gq,rpo),e(bs,tpo),e(k,apo),e(k,vs),e(vs,pme),e(pme,npo),e(vs,spo),e(vs,hq),e(hq,lpo),e(vs,ipo),e(vs,uq),e(uq,dpo),e(vs,cpo),e(k,mpo),e(k,Fs),e(Fs,_me),e(_me,fpo),e(Fs,gpo),e(Fs,pq),e(pq,hpo),e(Fs,upo),e(Fs,_q),e(_q,ppo),e(Fs,_po),e(k,bpo),e(k,Ts),e(Ts,bme),e(bme,vpo),e(Ts,Fpo),e(Ts,bq),e(bq,Tpo),e(Ts,Mpo),e(Ts,vq),e(vq,Epo),e(Ts,Cpo),e(k,wpo),e(k,eu),e(eu,vme),e(vme,Apo),e(eu,ypo),e(eu,Fq),e(Fq,Lpo),e(eu,xpo),e(k,$po),e(k,Ms),e(Ms,Fme),e(Fme,kpo),e(Ms,Spo),e(Ms,Tq),e(Tq,Rpo),e(Ms,Ppo),e(Ms,Mq),e(Mq,Bpo),e(Ms,Ipo),e(k,Npo),e(k,ou),e(ou,Tme),e(Tme,qpo),e(ou,jpo),e(ou,Eq),e(Eq,Dpo),e(ou,Gpo),e(k,Opo),e(k,Es),e(Es,Mme),e(Mme,Vpo),e(Es,Xpo),e(Es,Cq),e(Cq,zpo),e(Es,Qpo),e(Es,wq),e(wq,Wpo),e(Es,Upo),e(k,Hpo),e(k,Cs),e(Cs,Eme),e(Eme,Jpo),e(Cs,Ypo),e(Cs,Aq),e(Aq,Kpo),e(Cs,Zpo),e(Cs,yq),e(yq,e_o),e(Cs,o_o),e(k,r_o),e(k,ws),e(ws,Cme),e(Cme,t_o),e(ws,a_o),e(ws,Lq),e(Lq,n_o),e(ws,s_o),e(ws,xq),e(xq,l_o),e(ws,i_o),e(k,d_o),e(k,ru),e(ru,wme),e(wme,c_o),e(ru,m_o),e(ru,$q),e($q,f_o),e(ru,g_o),e(k,h_o),e(k,As),e(As,Ame),e(Ame,u_o),e(As,p_o),e(As,kq),e(kq,__o),e(As,b_o),e(As,Sq),e(Sq,v_o),e(As,F_o),e(k,T_o),e(k,ys),e(ys,yme),e(yme,M_o),e(ys,E_o),e(ys,Rq),e(Rq,C_o),e(ys,w_o),e(ys,Pq),e(Pq,A_o),e(ys,y_o),e(k,L_o),e(k,Ls),e(Ls,Lme),e(Lme,x_o),e(Ls,$_o),e(Ls,Bq),e(Bq,k_o),e(Ls,S_o),e(Ls,Iq),e(Iq,R_o),e(Ls,P_o),e(k,B_o),e(k,tu),e(tu,xme),e(xme,I_o),e(tu,N_o),e(tu,Nq),e(Nq,q_o),e(tu,j_o),e(k,D_o),e(k,xs),e(xs,$me),e($me,G_o),e(xs,O_o),e(xs,qq),e(qq,V_o),e(xs,X_o),e(xs,jq),e(jq,z_o),e(xs,Q_o),e(k,W_o),e(k,$s),e($s,kme),e(kme,U_o),e($s,H_o),e($s,Dq),e(Dq,J_o),e($s,Y_o),e($s,Gq),e(Gq,K_o),e($s,Z_o),e(k,ebo),e(k,ks),e(ks,Sme),e(Sme,obo),e(ks,rbo),e(ks,Oq),e(Oq,tbo),e(ks,abo),e(ks,Vq),e(Vq,nbo),e(ks,sbo),e(k,lbo),e(k,Ss),e(Ss,Rme),e(Rme,ibo),e(Ss,dbo),e(Ss,Xq),e(Xq,cbo),e(Ss,mbo),e(Ss,zq),e(zq,fbo),e(Ss,gbo),e(k,hbo),e(k,Rs),e(Rs,Pme),e(Pme,ubo),e(Rs,pbo),e(Rs,Qq),e(Qq,_bo),e(Rs,bbo),e(Rs,Wq),e(Wq,vbo),e(Rs,Fbo),e(k,Tbo),e(k,Ps),e(Ps,Bme),e(Bme,Mbo),e(Ps,Ebo),e(Ps,Uq),e(Uq,Cbo),e(Ps,wbo),e(Ps,Hq),e(Hq,Abo),e(Ps,ybo),e(k,Lbo),e(k,Bs),e(Bs,Ime),e(Ime,xbo),e(Bs,$bo),e(Bs,Jq),e(Jq,kbo),e(Bs,Sbo),e(Bs,Yq),e(Yq,Rbo),e(Bs,Pbo),e(k,Bbo),e(k,Is),e(Is,Nme),e(Nme,Ibo),e(Is,Nbo),e(Is,Kq),e(Kq,qbo),e(Is,jbo),e(Is,Zq),e(Zq,Dbo),e(Is,Gbo),e(k,Obo),e(k,au),e(au,qme),e(qme,Vbo),e(au,Xbo),e(au,ej),e(ej,zbo),e(au,Qbo),e(k,Wbo),e(k,Ns),e(Ns,jme),e(jme,Ubo),e(Ns,Hbo),e(Ns,oj),e(oj,Jbo),e(Ns,Ybo),e(Ns,rj),e(rj,Kbo),e(Ns,Zbo),e(k,e2o),e(k,nu),e(nu,Dme),e(Dme,o2o),e(nu,r2o),e(nu,tj),e(tj,t2o),e(nu,a2o),e(k,n2o),e(k,su),e(su,Gme),e(Gme,s2o),e(su,l2o),e(su,aj),e(aj,i2o),e(su,d2o),e(k,c2o),e(k,qs),e(qs,Ome),e(Ome,m2o),e(qs,f2o),e(qs,nj),e(nj,g2o),e(qs,h2o),e(qs,sj),e(sj,u2o),e(qs,p2o),e(k,_2o),e(k,js),e(js,Vme),e(Vme,b2o),e(js,v2o),e(js,lj),e(lj,F2o),e(js,T2o),e(js,ij),e(ij,M2o),e(js,E2o),e(k,C2o),e(k,Ds),e(Ds,Xme),e(Xme,w2o),e(Ds,A2o),e(Ds,dj),e(dj,y2o),e(Ds,L2o),e(Ds,cj),e(cj,x2o),e(Ds,$2o),e(k,k2o),e(k,lu),e(lu,zme),e(zme,S2o),e(lu,R2o),e(lu,mj),e(mj,P2o),e(lu,B2o),e(k,I2o),e(k,Gs),e(Gs,Qme),e(Qme,N2o),e(Gs,q2o),e(Gs,fj),e(fj,j2o),e(Gs,D2o),e(Gs,gj),e(gj,G2o),e(Gs,O2o),e(k,V2o),e(k,Os),e(Os,Wme),e(Wme,X2o),e(Os,z2o),e(Os,hj),e(hj,Q2o),e(Os,W2o),e(Os,uj),e(uj,U2o),e(Os,H2o),e(k,J2o),e(k,Vs),e(Vs,Ume),e(Ume,Y2o),e(Vs,K2o),e(Vs,pj),e(pj,Z2o),e(Vs,evo),e(Vs,_j),e(_j,ovo),e(Vs,rvo),e(k,tvo),e(k,Xs),e(Xs,Hme),e(Hme,avo),e(Xs,nvo),e(Xs,bj),e(bj,svo),e(Xs,lvo),e(Xs,vj),e(vj,ivo),e(Xs,dvo),e(k,cvo),e(k,zs),e(zs,Jme),e(Jme,mvo),e(zs,fvo),e(zs,Fj),e(Fj,gvo),e(zs,hvo),e(zs,Tj),e(Tj,uvo),e(zs,pvo),e(k,_vo),e(k,Qs),e(Qs,Yme),e(Yme,bvo),e(Qs,vvo),e(Qs,Mj),e(Mj,Fvo),e(Qs,Tvo),e(Qs,Ej),e(Ej,Mvo),e(Qs,Evo),e(k,Cvo),e(k,Ws),e(Ws,Kme),e(Kme,wvo),e(Ws,Avo),e(Ws,Cj),e(Cj,yvo),e(Ws,Lvo),e(Ws,wj),e(wj,xvo),e(Ws,$vo),e(k,kvo),e(k,Us),e(Us,Zme),e(Zme,Svo),e(Us,Rvo),e(Us,Aj),e(Aj,Pvo),e(Us,Bvo),e(Us,yj),e(yj,Ivo),e(Us,Nvo),e(k,qvo),e(k,iu),e(iu,efe),e(efe,jvo),e(iu,Dvo),e(iu,Lj),e(Lj,Gvo),e(iu,Ovo),e(k,Vvo),e(k,Hs),e(Hs,ofe),e(ofe,Xvo),e(Hs,zvo),e(Hs,xj),e(xj,Qvo),e(Hs,Wvo),e(Hs,$j),e($j,Uvo),e(Hs,Hvo),e(k,Jvo),e(k,Js),e(Js,rfe),e(rfe,Yvo),e(Js,Kvo),e(Js,kj),e(kj,Zvo),e(Js,e1o),e(Js,Sj),e(Sj,o1o),e(Js,r1o),e(k,t1o),e(k,du),e(du,tfe),e(tfe,a1o),e(du,n1o),e(du,Rj),e(Rj,s1o),e(du,l1o),e(k,i1o),e(k,cu),e(cu,afe),e(afe,d1o),e(cu,c1o),e(cu,Pj),e(Pj,m1o),e(cu,f1o),e(k,g1o),e(k,mu),e(mu,nfe),e(nfe,h1o),e(mu,u1o),e(mu,Bj),e(Bj,p1o),e(mu,_1o),e(k,b1o),e(k,fu),e(fu,sfe),e(sfe,v1o),e(fu,F1o),e(fu,Ij),e(Ij,T1o),e(fu,M1o),e(k,E1o),e(k,Ys),e(Ys,lfe),e(lfe,C1o),e(Ys,w1o),e(Ys,Nj),e(Nj,A1o),e(Ys,y1o),e(Ys,qj),e(qj,L1o),e(Ys,x1o),e(k,$1o),e(k,gu),e(gu,ife),e(ife,k1o),e(gu,S1o),e(gu,jj),e(jj,R1o),e(gu,P1o),e(k,B1o),e(k,Ks),e(Ks,dfe),e(dfe,I1o),e(Ks,N1o),e(Ks,Dj),e(Dj,q1o),e(Ks,j1o),e(Ks,Gj),e(Gj,D1o),e(Ks,G1o),e(k,O1o),e(k,Zs),e(Zs,cfe),e(cfe,V1o),e(Zs,X1o),e(Zs,Oj),e(Oj,z1o),e(Zs,Q1o),e(Zs,Vj),e(Vj,W1o),e(Zs,U1o),e(k,H1o),e(k,el),e(el,mfe),e(mfe,J1o),e(el,Y1o),e(el,Xj),e(Xj,K1o),e(el,Z1o),e(el,zj),e(zj,eFo),e(el,oFo),e(k,rFo),e(k,ol),e(ol,ffe),e(ffe,tFo),e(ol,aFo),e(ol,Qj),e(Qj,nFo),e(ol,sFo),e(ol,Wj),e(Wj,lFo),e(ol,iFo),e(k,dFo),e(k,rl),e(rl,gfe),e(gfe,cFo),e(rl,mFo),e(rl,Uj),e(Uj,fFo),e(rl,gFo),e(rl,Hj),e(Hj,hFo),e(rl,uFo),e(k,pFo),e(k,tl),e(tl,hfe),e(hfe,_Fo),e(tl,bFo),e(tl,Jj),e(Jj,vFo),e(tl,FFo),e(tl,Yj),e(Yj,TFo),e(tl,MFo),e(k,EFo),e(k,hu),e(hu,ufe),e(ufe,CFo),e(hu,wFo),e(hu,Kj),e(Kj,AFo),e(hu,yFo),e(k,LFo),e(k,uu),e(uu,pfe),e(pfe,xFo),e(uu,$Fo),e(uu,Zj),e(Zj,kFo),e(uu,SFo),e(k,RFo),e(k,al),e(al,_fe),e(_fe,PFo),e(al,BFo),e(al,eD),e(eD,IFo),e(al,NFo),e(al,oD),e(oD,qFo),e(al,jFo),e(k,DFo),e(k,nl),e(nl,bfe),e(bfe,GFo),e(nl,OFo),e(nl,rD),e(rD,VFo),e(nl,XFo),e(nl,tD),e(tD,zFo),e(nl,QFo),e(k,WFo),e(k,sl),e(sl,vfe),e(vfe,UFo),e(sl,HFo),e(sl,aD),e(aD,JFo),e(sl,YFo),e(sl,nD),e(nD,KFo),e(sl,ZFo),e(k,eTo),e(k,pu),e(pu,Ffe),e(Ffe,oTo),e(pu,rTo),e(pu,sD),e(sD,tTo),e(pu,aTo),e(k,nTo),e(k,_u),e(_u,Tfe),e(Tfe,sTo),e(_u,lTo),e(_u,lD),e(lD,iTo),e(_u,dTo),e(k,cTo),e(k,bu),e(bu,Mfe),e(Mfe,mTo),e(bu,fTo),e(bu,iD),e(iD,gTo),e(bu,hTo),e(k,uTo),e(k,ll),e(ll,Efe),e(Efe,pTo),e(ll,_To),e(ll,dD),e(dD,bTo),e(ll,vTo),e(ll,cD),e(cD,FTo),e(ll,TTo),e(k,MTo),e(k,il),e(il,Cfe),e(Cfe,ETo),e(il,CTo),e(il,mD),e(mD,wTo),e(il,ATo),e(il,fD),e(fD,yTo),e(il,LTo),e(k,xTo),e(k,vu),e(vu,wfe),e(wfe,$To),e(vu,kTo),e(vu,gD),e(gD,STo),e(vu,RTo),e(k,PTo),e(k,Fu),e(Fu,Afe),e(Afe,BTo),e(Fu,ITo),e(Fu,hD),e(hD,NTo),e(Fu,qTo),e(k,jTo),e(k,Tu),e(Tu,yfe),e(yfe,DTo),e(Tu,GTo),e(Tu,uD),e(uD,OTo),e(Tu,VTo),e(k,XTo),e(k,dl),e(dl,Lfe),e(Lfe,zTo),e(dl,QTo),e(dl,pD),e(pD,WTo),e(dl,UTo),e(dl,_D),e(_D,HTo),e(dl,JTo),e(k,YTo),e(k,Mu),e(Mu,xfe),e(xfe,KTo),e(Mu,ZTo),e(Mu,bD),e(bD,eMo),e(Mu,oMo),e(k,rMo),e(k,Eu),e(Eu,$fe),e($fe,tMo),e(Eu,aMo),e(Eu,vD),e(vD,nMo),e(Eu,sMo),e(k,lMo),e(k,cl),e(cl,kfe),e(kfe,iMo),e(cl,dMo),e(cl,FD),e(FD,cMo),e(cl,mMo),e(cl,TD),e(TD,fMo),e(cl,gMo),e(k,hMo),e(k,ml),e(ml,Sfe),e(Sfe,uMo),e(ml,pMo),e(ml,MD),e(MD,_Mo),e(ml,bMo),e(ml,ED),e(ED,vMo),e(ml,FMo),e(k,TMo),e(k,fl),e(fl,Rfe),e(Rfe,MMo),e(fl,EMo),e(fl,CD),e(CD,CMo),e(fl,wMo),e(fl,wD),e(wD,AMo),e(fl,yMo),e(k,LMo),e(k,gl),e(gl,Pfe),e(Pfe,xMo),e(gl,$Mo),e(gl,AD),e(AD,kMo),e(gl,SMo),e(gl,yD),e(yD,RMo),e(gl,PMo),e(Br,BMo),M(Cu,Br,null),e($o,IMo),e($o,wu),M(F9,wu,null),e(wu,NMo),e(wu,Bfe),e(Bfe,qMo),b(m,LJe,_),b(m,md,_),e(md,Au),e(Au,Ife),M(T9,Ife,null),e(md,jMo),e(md,Nfe),e(Nfe,DMo),b(m,xJe,_),b(m,ko,_),M(M9,ko,null),e(ko,GMo),e(ko,E9),e(E9,OMo),e(E9,LD),e(LD,VMo),e(E9,XMo),e(ko,zMo),e(ko,C9),e(C9,QMo),e(C9,qfe),e(qfe,WMo),e(C9,UMo),e(ko,HMo),e(ko,Je),M(w9,Je,null),e(Je,JMo),e(Je,jfe),e(jfe,YMo),e(Je,KMo),e(Je,Ha),e(Ha,ZMo),e(Ha,Dfe),e(Dfe,eEo),e(Ha,oEo),e(Ha,Gfe),e(Gfe,rEo),e(Ha,tEo),e(Ha,Ofe),e(Ofe,aEo),e(Ha,nEo),e(Je,sEo),e(Je,W),e(W,yu),e(yu,Vfe),e(Vfe,lEo),e(yu,iEo),e(yu,xD),e(xD,dEo),e(yu,cEo),e(W,mEo),e(W,Lu),e(Lu,Xfe),e(Xfe,fEo),e(Lu,gEo),e(Lu,$D),e($D,hEo),e(Lu,uEo),e(W,pEo),e(W,xu),e(xu,zfe),e(zfe,_Eo),e(xu,bEo),e(xu,kD),e(kD,vEo),e(xu,FEo),e(W,TEo),e(W,$u),e($u,Qfe),e(Qfe,MEo),e($u,EEo),e($u,SD),e(SD,CEo),e($u,wEo),e(W,AEo),e(W,ku),e(ku,Wfe),e(Wfe,yEo),e(ku,LEo),e(ku,RD),e(RD,xEo),e(ku,$Eo),e(W,kEo),e(W,Su),e(Su,Ufe),e(Ufe,SEo),e(Su,REo),e(Su,PD),e(PD,PEo),e(Su,BEo),e(W,IEo),e(W,Ru),e(Ru,Hfe),e(Hfe,NEo),e(Ru,qEo),e(Ru,BD),e(BD,jEo),e(Ru,DEo),e(W,GEo),e(W,Pu),e(Pu,Jfe),e(Jfe,OEo),e(Pu,VEo),e(Pu,ID),e(ID,XEo),e(Pu,zEo),e(W,QEo),e(W,Bu),e(Bu,Yfe),e(Yfe,WEo),e(Bu,UEo),e(Bu,ND),e(ND,HEo),e(Bu,JEo),e(W,YEo),e(W,Iu),e(Iu,Kfe),e(Kfe,KEo),e(Iu,ZEo),e(Iu,qD),e(qD,e4o),e(Iu,o4o),e(W,r4o),e(W,Nu),e(Nu,Zfe),e(Zfe,t4o),e(Nu,a4o),e(Nu,jD),e(jD,n4o),e(Nu,s4o),e(W,l4o),e(W,qu),e(qu,ege),e(ege,i4o),e(qu,d4o),e(qu,DD),e(DD,c4o),e(qu,m4o),e(W,f4o),e(W,ju),e(ju,oge),e(oge,g4o),e(ju,h4o),e(ju,GD),e(GD,u4o),e(ju,p4o),e(W,_4o),e(W,Du),e(Du,rge),e(rge,b4o),e(Du,v4o),e(Du,OD),e(OD,F4o),e(Du,T4o),e(W,M4o),e(W,Gu),e(Gu,tge),e(tge,E4o),e(Gu,C4o),e(Gu,VD),e(VD,w4o),e(Gu,A4o),e(W,y4o),e(W,Ou),e(Ou,age),e(age,L4o),e(Ou,x4o),e(Ou,XD),e(XD,$4o),e(Ou,k4o),e(W,S4o),e(W,Vu),e(Vu,nge),e(nge,R4o),e(Vu,P4o),e(Vu,zD),e(zD,B4o),e(Vu,I4o),e(W,N4o),e(W,Xu),e(Xu,sge),e(sge,q4o),e(Xu,j4o),e(Xu,QD),e(QD,D4o),e(Xu,G4o),e(W,O4o),e(W,zu),e(zu,lge),e(lge,V4o),e(zu,X4o),e(zu,WD),e(WD,z4o),e(zu,Q4o),e(W,W4o),e(W,Qu),e(Qu,ige),e(ige,U4o),e(Qu,H4o),e(Qu,UD),e(UD,J4o),e(Qu,Y4o),e(W,K4o),e(W,Wu),e(Wu,dge),e(dge,Z4o),e(Wu,eCo),e(Wu,HD),e(HD,oCo),e(Wu,rCo),e(W,tCo),e(W,Uu),e(Uu,cge),e(cge,aCo),e(Uu,nCo),e(Uu,JD),e(JD,sCo),e(Uu,lCo),e(W,iCo),e(W,Hu),e(Hu,mge),e(mge,dCo),e(Hu,cCo),e(Hu,YD),e(YD,mCo),e(Hu,fCo),e(W,gCo),e(W,Ju),e(Ju,fge),e(fge,hCo),e(Ju,uCo),e(Ju,KD),e(KD,pCo),e(Ju,_Co),e(W,bCo),e(W,Yu),e(Yu,gge),e(gge,vCo),e(Yu,FCo),e(Yu,ZD),e(ZD,TCo),e(Yu,MCo),e(W,ECo),e(W,Ku),e(Ku,hge),e(hge,CCo),e(Ku,wCo),e(Ku,eG),e(eG,ACo),e(Ku,yCo),e(W,LCo),e(W,Zu),e(Zu,uge),e(uge,xCo),e(Zu,$Co),e(Zu,oG),e(oG,kCo),e(Zu,SCo),e(W,RCo),e(W,ep),e(ep,pge),e(pge,PCo),e(ep,BCo),e(ep,rG),e(rG,ICo),e(ep,NCo),e(W,qCo),e(W,op),e(op,_ge),e(_ge,jCo),e(op,DCo),e(op,tG),e(tG,GCo),e(op,OCo),e(W,VCo),e(W,rp),e(rp,bge),e(bge,XCo),e(rp,zCo),e(rp,aG),e(aG,QCo),e(rp,WCo),e(W,UCo),e(W,tp),e(tp,vge),e(vge,HCo),e(tp,JCo),e(tp,nG),e(nG,YCo),e(tp,KCo),e(W,ZCo),e(W,ap),e(ap,Fge),e(Fge,e3o),e(ap,o3o),e(ap,sG),e(sG,r3o),e(ap,t3o),e(W,a3o),e(W,np),e(np,Tge),e(Tge,n3o),e(np,s3o),e(np,lG),e(lG,l3o),e(np,i3o),e(W,d3o),e(W,sp),e(sp,Mge),e(Mge,c3o),e(sp,m3o),e(sp,iG),e(iG,f3o),e(sp,g3o),e(W,h3o),e(W,lp),e(lp,Ege),e(Ege,u3o),e(lp,p3o),e(lp,dG),e(dG,_3o),e(lp,b3o),e(W,v3o),e(W,ip),e(ip,Cge),e(Cge,F3o),e(ip,T3o),e(ip,cG),e(cG,M3o),e(ip,E3o),e(W,C3o),e(W,dp),e(dp,wge),e(wge,w3o),e(dp,A3o),e(dp,mG),e(mG,y3o),e(dp,L3o),e(W,x3o),e(W,cp),e(cp,Age),e(Age,$3o),e(cp,k3o),e(cp,fG),e(fG,S3o),e(cp,R3o),e(Je,P3o),M(mp,Je,null),e(Je,B3o),M(fp,Je,null),e(ko,I3o),e(ko,gp),M(A9,gp,null),e(gp,N3o),e(gp,yge),e(yge,q3o),b(m,$Je,_),b(m,fd,_),e(fd,hp),e(hp,Lge),M(y9,Lge,null),e(fd,j3o),e(fd,xge),e(xge,D3o),b(m,kJe,_),b(m,So,_),M(L9,So,null),e(So,G3o),e(So,x9),e(x9,O3o),e(x9,gG),e(gG,V3o),e(x9,X3o),e(So,z3o),e(So,$9),e($9,Q3o),e($9,$ge),e($ge,W3o),e($9,U3o),e(So,H3o),e(So,Ye),M(k9,Ye,null),e(Ye,J3o),e(Ye,kge),e(kge,Y3o),e(Ye,K3o),e(Ye,gd),e(gd,Z3o),e(gd,Sge),e(Sge,e5o),e(gd,o5o),e(gd,Rge),e(Rge,r5o),e(gd,t5o),e(Ye,a5o),e(Ye,ce),e(ce,up),e(up,Pge),e(Pge,n5o),e(up,s5o),e(up,hG),e(hG,l5o),e(up,i5o),e(ce,d5o),e(ce,pp),e(pp,Bge),e(Bge,c5o),e(pp,m5o),e(pp,uG),e(uG,f5o),e(pp,g5o),e(ce,h5o),e(ce,_p),e(_p,Ige),e(Ige,u5o),e(_p,p5o),e(_p,pG),e(pG,_5o),e(_p,b5o),e(ce,v5o),e(ce,bp),e(bp,Nge),e(Nge,F5o),e(bp,T5o),e(bp,_G),e(_G,M5o),e(bp,E5o),e(ce,C5o),e(ce,vp),e(vp,qge),e(qge,w5o),e(vp,A5o),e(vp,bG),e(bG,y5o),e(vp,L5o),e(ce,x5o),e(ce,Fp),e(Fp,jge),e(jge,$5o),e(Fp,k5o),e(Fp,vG),e(vG,S5o),e(Fp,R5o),e(ce,P5o),e(ce,Tp),e(Tp,Dge),e(Dge,B5o),e(Tp,I5o),e(Tp,FG),e(FG,N5o),e(Tp,q5o),e(ce,j5o),e(ce,Mp),e(Mp,Gge),e(Gge,D5o),e(Mp,G5o),e(Mp,TG),e(TG,O5o),e(Mp,V5o),e(ce,X5o),e(ce,Ep),e(Ep,Oge),e(Oge,z5o),e(Ep,Q5o),e(Ep,MG),e(MG,W5o),e(Ep,U5o),e(ce,H5o),e(ce,Cp),e(Cp,Vge),e(Vge,J5o),e(Cp,Y5o),e(Cp,EG),e(EG,K5o),e(Cp,Z5o),e(ce,e0o),e(ce,wp),e(wp,Xge),e(Xge,o0o),e(wp,r0o),e(wp,CG),e(CG,t0o),e(wp,a0o),e(ce,n0o),e(ce,Ap),e(Ap,zge),e(zge,s0o),e(Ap,l0o),e(Ap,wG),e(wG,i0o),e(Ap,d0o),e(ce,c0o),e(ce,yp),e(yp,Qge),e(Qge,m0o),e(yp,f0o),e(yp,AG),e(AG,g0o),e(yp,h0o),e(ce,u0o),e(ce,Lp),e(Lp,Wge),e(Wge,p0o),e(Lp,_0o),e(Lp,yG),e(yG,b0o),e(Lp,v0o),e(ce,F0o),e(ce,xp),e(xp,Uge),e(Uge,T0o),e(xp,M0o),e(xp,LG),e(LG,E0o),e(xp,C0o),e(ce,w0o),e(ce,$p),e($p,Hge),e(Hge,A0o),e($p,y0o),e($p,xG),e(xG,L0o),e($p,x0o),e(ce,$0o),e(ce,kp),e(kp,Jge),e(Jge,k0o),e(kp,S0o),e(kp,$G),e($G,R0o),e(kp,P0o),e(ce,B0o),e(ce,Sp),e(Sp,Yge),e(Yge,I0o),e(Sp,N0o),e(Sp,kG),e(kG,q0o),e(Sp,j0o),e(ce,D0o),e(ce,Rp),e(Rp,Kge),e(Kge,G0o),e(Rp,O0o),e(Rp,SG),e(SG,V0o),e(Rp,X0o),e(ce,z0o),e(ce,Pp),e(Pp,Zge),e(Zge,Q0o),e(Pp,W0o),e(Pp,RG),e(RG,U0o),e(Pp,H0o),e(Ye,J0o),M(Bp,Ye,null),e(Ye,Y0o),M(Ip,Ye,null),e(So,K0o),e(So,Np),M(S9,Np,null),e(Np,Z0o),e(Np,ehe),e(ehe,ewo),b(m,SJe,_),b(m,hd,_),e(hd,qp),e(qp,ohe),M(R9,ohe,null),e(hd,owo),e(hd,rhe),e(rhe,rwo),b(m,RJe,_),b(m,Ro,_),M(P9,Ro,null),e(Ro,two),e(Ro,ud),e(ud,awo),e(ud,PG),e(PG,nwo),e(ud,swo),e(ud,BG),e(BG,lwo),e(ud,iwo),e(Ro,dwo),e(Ro,B9),e(B9,cwo),e(B9,the),e(the,mwo),e(B9,fwo),e(Ro,gwo),e(Ro,pt),M(I9,pt,null),e(pt,hwo),e(pt,ahe),e(ahe,uwo),e(pt,pwo),e(pt,pd),e(pd,_wo),e(pd,nhe),e(nhe,bwo),e(pd,vwo),e(pd,IG),e(IG,Fwo),e(pd,Two),e(pt,Mwo),M(jp,pt,null),e(Ro,Ewo),e(Ro,Ke),M(N9,Ke,null),e(Ke,Cwo),e(Ke,she),e(she,wwo),e(Ke,Awo),e(Ke,Ja),e(Ja,ywo),e(Ja,lhe),e(lhe,Lwo),e(Ja,xwo),e(Ja,ihe),e(ihe,$wo),e(Ja,kwo),e(Ja,dhe),e(dhe,Swo),e(Ja,Rwo),e(Ke,Pwo),e(Ke,L),e(L,Dp),e(Dp,che),e(che,Bwo),e(Dp,Iwo),e(Dp,NG),e(NG,Nwo),e(Dp,qwo),e(L,jwo),e(L,Gp),e(Gp,mhe),e(mhe,Dwo),e(Gp,Gwo),e(Gp,qG),e(qG,Owo),e(Gp,Vwo),e(L,Xwo),e(L,Op),e(Op,fhe),e(fhe,zwo),e(Op,Qwo),e(Op,jG),e(jG,Wwo),e(Op,Uwo),e(L,Hwo),e(L,Vp),e(Vp,ghe),e(ghe,Jwo),e(Vp,Ywo),e(Vp,DG),e(DG,Kwo),e(Vp,Zwo),e(L,eAo),e(L,Xp),e(Xp,hhe),e(hhe,oAo),e(Xp,rAo),e(Xp,GG),e(GG,tAo),e(Xp,aAo),e(L,nAo),e(L,zp),e(zp,uhe),e(uhe,sAo),e(zp,lAo),e(zp,OG),e(OG,iAo),e(zp,dAo),e(L,cAo),e(L,Qp),e(Qp,phe),e(phe,mAo),e(Qp,fAo),e(Qp,VG),e(VG,gAo),e(Qp,hAo),e(L,uAo),e(L,Wp),e(Wp,_he),e(_he,pAo),e(Wp,_Ao),e(Wp,XG),e(XG,bAo),e(Wp,vAo),e(L,FAo),e(L,Up),e(Up,bhe),e(bhe,TAo),e(Up,MAo),e(Up,zG),e(zG,EAo),e(Up,CAo),e(L,wAo),e(L,Hp),e(Hp,vhe),e(vhe,AAo),e(Hp,yAo),e(Hp,QG),e(QG,LAo),e(Hp,xAo),e(L,$Ao),e(L,Jp),e(Jp,Fhe),e(Fhe,kAo),e(Jp,SAo),e(Jp,WG),e(WG,RAo),e(Jp,PAo),e(L,BAo),e(L,Yp),e(Yp,The),e(The,IAo),e(Yp,NAo),e(Yp,UG),e(UG,qAo),e(Yp,jAo),e(L,DAo),e(L,Kp),e(Kp,Mhe),e(Mhe,GAo),e(Kp,OAo),e(Kp,HG),e(HG,VAo),e(Kp,XAo),e(L,zAo),e(L,Zp),e(Zp,Ehe),e(Ehe,QAo),e(Zp,WAo),e(Zp,JG),e(JG,UAo),e(Zp,HAo),e(L,JAo),e(L,e_),e(e_,Che),e(Che,YAo),e(e_,KAo),e(e_,YG),e(YG,ZAo),e(e_,e6o),e(L,o6o),e(L,o_),e(o_,whe),e(whe,r6o),e(o_,t6o),e(o_,KG),e(KG,a6o),e(o_,n6o),e(L,s6o),e(L,r_),e(r_,Ahe),e(Ahe,l6o),e(r_,i6o),e(r_,ZG),e(ZG,d6o),e(r_,c6o),e(L,m6o),e(L,t_),e(t_,yhe),e(yhe,f6o),e(t_,g6o),e(t_,eO),e(eO,h6o),e(t_,u6o),e(L,p6o),e(L,a_),e(a_,Lhe),e(Lhe,_6o),e(a_,b6o),e(a_,oO),e(oO,v6o),e(a_,F6o),e(L,T6o),e(L,n_),e(n_,xhe),e(xhe,M6o),e(n_,E6o),e(n_,rO),e(rO,C6o),e(n_,w6o),e(L,A6o),e(L,s_),e(s_,$he),e($he,y6o),e(s_,L6o),e(s_,tO),e(tO,x6o),e(s_,$6o),e(L,k6o),e(L,l_),e(l_,khe),e(khe,S6o),e(l_,R6o),e(l_,aO),e(aO,P6o),e(l_,B6o),e(L,I6o),e(L,i_),e(i_,She),e(She,N6o),e(i_,q6o),e(i_,nO),e(nO,j6o),e(i_,D6o),e(L,G6o),e(L,d_),e(d_,Rhe),e(Rhe,O6o),e(d_,V6o),e(d_,sO),e(sO,X6o),e(d_,z6o),e(L,Q6o),e(L,c_),e(c_,Phe),e(Phe,W6o),e(c_,U6o),e(c_,lO),e(lO,H6o),e(c_,J6o),e(L,Y6o),e(L,m_),e(m_,Bhe),e(Bhe,K6o),e(m_,Z6o),e(m_,iO),e(iO,e7o),e(m_,o7o),e(L,r7o),e(L,f_),e(f_,Ihe),e(Ihe,t7o),e(f_,a7o),e(f_,dO),e(dO,n7o),e(f_,s7o),e(L,l7o),e(L,g_),e(g_,Nhe),e(Nhe,i7o),e(g_,d7o),e(g_,cO),e(cO,c7o),e(g_,m7o),e(L,f7o),e(L,h_),e(h_,qhe),e(qhe,g7o),e(h_,h7o),e(h_,mO),e(mO,u7o),e(h_,p7o),e(L,_7o),e(L,u_),e(u_,jhe),e(jhe,b7o),e(u_,v7o),e(u_,fO),e(fO,F7o),e(u_,T7o),e(L,M7o),e(L,p_),e(p_,Dhe),e(Dhe,E7o),e(p_,C7o),e(p_,gO),e(gO,w7o),e(p_,A7o),e(L,y7o),e(L,__),e(__,Ghe),e(Ghe,L7o),e(__,x7o),e(__,hO),e(hO,$7o),e(__,k7o),e(L,S7o),e(L,b_),e(b_,Ohe),e(Ohe,R7o),e(b_,P7o),e(b_,uO),e(uO,B7o),e(b_,I7o),e(L,N7o),e(L,v_),e(v_,Vhe),e(Vhe,q7o),e(v_,j7o),e(v_,pO),e(pO,D7o),e(v_,G7o),e(L,O7o),e(L,F_),e(F_,Xhe),e(Xhe,V7o),e(F_,X7o),e(F_,_O),e(_O,z7o),e(F_,Q7o),e(L,W7o),e(L,hl),e(hl,zhe),e(zhe,U7o),e(hl,H7o),e(hl,bO),e(bO,J7o),e(hl,Y7o),e(hl,vO),e(vO,K7o),e(hl,Z7o),e(L,eyo),e(L,T_),e(T_,Qhe),e(Qhe,oyo),e(T_,ryo),e(T_,FO),e(FO,tyo),e(T_,ayo),e(L,nyo),e(L,M_),e(M_,Whe),e(Whe,syo),e(M_,lyo),e(M_,TO),e(TO,iyo),e(M_,dyo),e(L,cyo),e(L,E_),e(E_,Uhe),e(Uhe,myo),e(E_,fyo),e(E_,MO),e(MO,gyo),e(E_,hyo),e(L,uyo),e(L,C_),e(C_,Hhe),e(Hhe,pyo),e(C_,_yo),e(C_,EO),e(EO,byo),e(C_,vyo),e(L,Fyo),e(L,w_),e(w_,Jhe),e(Jhe,Tyo),e(w_,Myo),e(w_,CO),e(CO,Eyo),e(w_,Cyo),e(L,wyo),e(L,A_),e(A_,Yhe),e(Yhe,Ayo),e(A_,yyo),e(A_,wO),e(wO,Lyo),e(A_,xyo),e(L,$yo),e(L,y_),e(y_,Khe),e(Khe,kyo),e(y_,Syo),e(y_,AO),e(AO,Ryo),e(y_,Pyo),e(L,Byo),e(L,L_),e(L_,Zhe),e(Zhe,Iyo),e(L_,Nyo),e(L_,yO),e(yO,qyo),e(L_,jyo),e(L,Dyo),e(L,x_),e(x_,eue),e(eue,Gyo),e(x_,Oyo),e(x_,LO),e(LO,Vyo),e(x_,Xyo),e(L,zyo),e(L,$_),e($_,oue),e(oue,Qyo),e($_,Wyo),e($_,xO),e(xO,Uyo),e($_,Hyo),e(L,Jyo),e(L,k_),e(k_,rue),e(rue,Yyo),e(k_,Kyo),e(k_,$O),e($O,Zyo),e(k_,eLo),e(L,oLo),e(L,S_),e(S_,tue),e(tue,rLo),e(S_,tLo),e(S_,kO),e(kO,aLo),e(S_,nLo),e(L,sLo),e(L,R_),e(R_,aue),e(aue,lLo),e(R_,iLo),e(R_,SO),e(SO,dLo),e(R_,cLo),e(L,mLo),e(L,P_),e(P_,nue),e(nue,fLo),e(P_,gLo),e(P_,RO),e(RO,hLo),e(P_,uLo),e(L,pLo),e(L,B_),e(B_,sue),e(sue,_Lo),e(B_,bLo),e(B_,PO),e(PO,vLo),e(B_,FLo),e(L,TLo),e(L,I_),e(I_,lue),e(lue,MLo),e(I_,ELo),e(I_,BO),e(BO,CLo),e(I_,wLo),e(L,ALo),e(L,N_),e(N_,iue),e(iue,yLo),e(N_,LLo),e(N_,IO),e(IO,xLo),e(N_,$Lo),e(L,kLo),e(L,q_),e(q_,due),e(due,SLo),e(q_,RLo),e(q_,NO),e(NO,PLo),e(q_,BLo),e(L,ILo),e(L,j_),e(j_,cue),e(cue,NLo),e(j_,qLo),e(j_,qO),e(qO,jLo),e(j_,DLo),e(L,GLo),e(L,D_),e(D_,mue),e(mue,OLo),e(D_,VLo),e(D_,jO),e(jO,XLo),e(D_,zLo),e(L,QLo),e(L,G_),e(G_,fue),e(fue,WLo),e(G_,ULo),e(G_,DO),e(DO,HLo),e(G_,JLo),e(L,YLo),e(L,O_),e(O_,gue),e(gue,KLo),e(O_,ZLo),e(O_,GO),e(GO,e8o),e(O_,o8o),e(L,r8o),e(L,V_),e(V_,hue),e(hue,t8o),e(V_,a8o),e(V_,OO),e(OO,n8o),e(V_,s8o),e(L,l8o),e(L,X_),e(X_,uue),e(uue,i8o),e(X_,d8o),e(X_,VO),e(VO,c8o),e(X_,m8o),e(L,f8o),e(L,z_),e(z_,pue),e(pue,g8o),e(z_,h8o),e(z_,XO),e(XO,u8o),e(z_,p8o),e(L,_8o),e(L,Q_),e(Q_,_ue),e(_ue,b8o),e(Q_,v8o),e(Q_,zO),e(zO,F8o),e(Q_,T8o),e(L,M8o),e(L,W_),e(W_,bue),e(bue,E8o),e(W_,C8o),e(W_,QO),e(QO,w8o),e(W_,A8o),e(L,y8o),e(L,U_),e(U_,vue),e(vue,L8o),e(U_,x8o),e(U_,WO),e(WO,$8o),e(U_,k8o),e(L,S8o),e(L,H_),e(H_,Fue),e(Fue,R8o),e(H_,P8o),e(H_,UO),e(UO,B8o),e(H_,I8o),e(L,N8o),e(L,J_),e(J_,Tue),e(Tue,q8o),e(J_,j8o),e(J_,HO),e(HO,D8o),e(J_,G8o),e(L,O8o),e(L,Y_),e(Y_,Mue),e(Mue,V8o),e(Y_,X8o),e(Y_,JO),e(JO,z8o),e(Y_,Q8o),e(L,W8o),e(L,K_),e(K_,Eue),e(Eue,U8o),e(K_,H8o),e(K_,YO),e(YO,J8o),e(K_,Y8o),e(L,K8o),e(L,Z_),e(Z_,Cue),e(Cue,Z8o),e(Z_,e9o),e(Z_,KO),e(KO,o9o),e(Z_,r9o),e(L,t9o),e(L,eb),e(eb,wue),e(wue,a9o),e(eb,n9o),e(eb,ZO),e(ZO,s9o),e(eb,l9o),e(L,i9o),e(L,ob),e(ob,Aue),e(Aue,d9o),e(ob,c9o),e(ob,eV),e(eV,m9o),e(ob,f9o),e(L,g9o),e(L,rb),e(rb,yue),e(yue,h9o),e(rb,u9o),e(rb,oV),e(oV,p9o),e(rb,_9o),e(L,b9o),e(L,tb),e(tb,Lue),e(Lue,v9o),e(tb,F9o),e(tb,rV),e(rV,T9o),e(tb,M9o),e(L,E9o),e(L,ab),e(ab,xue),e(xue,C9o),e(ab,w9o),e(ab,tV),e(tV,A9o),e(ab,y9o),e(L,L9o),e(L,nb),e(nb,$ue),e($ue,x9o),e(nb,$9o),e(nb,aV),e(aV,k9o),e(nb,S9o),e(L,R9o),e(L,sb),e(sb,kue),e(kue,P9o),e(sb,B9o),e(sb,nV),e(nV,I9o),e(sb,N9o),e(L,q9o),e(L,lb),e(lb,Sue),e(Sue,j9o),e(lb,D9o),e(lb,sV),e(sV,G9o),e(lb,O9o),e(L,V9o),e(L,ib),e(ib,Rue),e(Rue,X9o),e(ib,z9o),e(ib,lV),e(lV,Q9o),e(ib,W9o),e(L,U9o),e(L,db),e(db,Pue),e(Pue,H9o),e(db,J9o),e(db,iV),e(iV,Y9o),e(db,K9o),e(L,Z9o),e(L,cb),e(cb,Bue),e(Bue,exo),e(cb,oxo),e(cb,dV),e(dV,rxo),e(cb,txo),e(L,axo),e(L,mb),e(mb,Iue),e(Iue,nxo),e(mb,sxo),e(mb,cV),e(cV,lxo),e(mb,ixo),e(L,dxo),e(L,fb),e(fb,Nue),e(Nue,cxo),e(fb,mxo),e(fb,mV),e(mV,fxo),e(fb,gxo),e(L,hxo),e(L,gb),e(gb,que),e(que,uxo),e(gb,pxo),e(gb,fV),e(fV,_xo),e(gb,bxo),e(L,vxo),e(L,hb),e(hb,jue),e(jue,Fxo),e(hb,Txo),e(hb,gV),e(gV,Mxo),e(hb,Exo),e(L,Cxo),e(L,ub),e(ub,Due),e(Due,wxo),e(ub,Axo),e(ub,hV),e(hV,yxo),e(ub,Lxo),e(L,xxo),e(L,pb),e(pb,Gue),e(Gue,$xo),e(pb,kxo),e(pb,uV),e(uV,Sxo),e(pb,Rxo),e(L,Pxo),e(L,_b),e(_b,Oue),e(Oue,Bxo),e(_b,Ixo),e(_b,pV),e(pV,Nxo),e(_b,qxo),e(L,jxo),e(L,bb),e(bb,Vue),e(Vue,Dxo),e(bb,Gxo),e(bb,_V),e(_V,Oxo),e(bb,Vxo),e(L,Xxo),e(L,vb),e(vb,Xue),e(Xue,zxo),e(vb,Qxo),e(vb,bV),e(bV,Wxo),e(vb,Uxo),e(L,Hxo),e(L,Fb),e(Fb,zue),e(zue,Jxo),e(Fb,Yxo),e(Fb,vV),e(vV,Kxo),e(Fb,Zxo),e(L,e$o),e(L,Tb),e(Tb,Que),e(Que,o$o),e(Tb,r$o),e(Tb,FV),e(FV,t$o),e(Tb,a$o),e(L,n$o),e(L,Mb),e(Mb,Wue),e(Wue,s$o),e(Mb,l$o),e(Mb,TV),e(TV,i$o),e(Mb,d$o),e(L,c$o),e(L,Eb),e(Eb,Uue),e(Uue,m$o),e(Eb,f$o),e(Eb,MV),e(MV,g$o),e(Eb,h$o),e(L,u$o),e(L,Cb),e(Cb,Hue),e(Hue,p$o),e(Cb,_$o),e(Cb,EV),e(EV,b$o),e(Cb,v$o),e(L,F$o),e(L,wb),e(wb,Jue),e(Jue,T$o),e(wb,M$o),e(wb,CV),e(CV,E$o),e(wb,C$o),e(L,w$o),e(L,Ab),e(Ab,Yue),e(Yue,A$o),e(Ab,y$o),e(Ab,wV),e(wV,L$o),e(Ab,x$o),e(L,$$o),e(L,yb),e(yb,Kue),e(Kue,k$o),e(yb,S$o),e(yb,AV),e(AV,R$o),e(yb,P$o),e(L,B$o),e(L,Lb),e(Lb,Zue),e(Zue,I$o),e(Lb,N$o),e(Lb,yV),e(yV,q$o),e(Lb,j$o),e(L,D$o),e(L,xb),e(xb,epe),e(epe,G$o),e(xb,O$o),e(xb,LV),e(LV,V$o),e(xb,X$o),e(L,z$o),e(L,$b),e($b,ope),e(ope,Q$o),e($b,W$o),e($b,xV),e(xV,U$o),e($b,H$o),e(L,J$o),e(L,kb),e(kb,rpe),e(rpe,Y$o),e(kb,K$o),e(kb,$V),e($V,Z$o),e(kb,eko),e(L,oko),e(L,Sb),e(Sb,tpe),e(tpe,rko),e(Sb,tko),e(Sb,kV),e(kV,ako),e(Sb,nko),e(L,sko),e(L,Rb),e(Rb,ape),e(ape,lko),e(Rb,iko),e(Rb,SV),e(SV,dko),e(Rb,cko),e(L,mko),e(L,Pb),e(Pb,npe),e(npe,fko),e(Pb,gko),e(Pb,RV),e(RV,hko),e(Pb,uko),e(L,pko),e(L,Bb),e(Bb,spe),e(spe,_ko),e(Bb,bko),e(Bb,PV),e(PV,vko),e(Bb,Fko),e(L,Tko),e(L,Ib),e(Ib,lpe),e(lpe,Mko),e(Ib,Eko),e(Ib,BV),e(BV,Cko),e(Ib,wko),e(L,Ako),e(L,Nb),e(Nb,ipe),e(ipe,yko),e(Nb,Lko),e(Nb,IV),e(IV,xko),e(Nb,$ko),e(L,kko),e(L,qb),e(qb,dpe),e(dpe,Sko),e(qb,Rko),e(qb,NV),e(NV,Pko),e(qb,Bko),e(L,Iko),e(L,jb),e(jb,cpe),e(cpe,Nko),e(jb,qko),e(jb,qV),e(qV,jko),e(jb,Dko),e(L,Gko),e(L,Db),e(Db,mpe),e(mpe,Oko),e(Db,Vko),e(Db,jV),e(jV,Xko),e(Db,zko),e(L,Qko),e(L,Gb),e(Gb,fpe),e(fpe,Wko),e(Gb,Uko),e(Gb,DV),e(DV,Hko),e(Gb,Jko),e(L,Yko),e(L,Ob),e(Ob,gpe),e(gpe,Kko),e(Ob,Zko),e(Ob,GV),e(GV,eSo),e(Ob,oSo),e(L,rSo),e(L,Vb),e(Vb,hpe),e(hpe,tSo),e(Vb,aSo),e(Vb,OV),e(OV,nSo),e(Vb,sSo),e(L,lSo),e(L,Xb),e(Xb,upe),e(upe,iSo),e(Xb,dSo),e(Xb,VV),e(VV,cSo),e(Xb,mSo),e(L,fSo),e(L,zb),e(zb,ppe),e(ppe,gSo),e(zb,hSo),e(zb,XV),e(XV,uSo),e(zb,pSo),e(L,_So),e(L,Qb),e(Qb,_pe),e(_pe,bSo),e(Qb,vSo),e(Qb,zV),e(zV,FSo),e(Qb,TSo),e(L,MSo),e(L,Wb),e(Wb,bpe),e(bpe,ESo),e(Wb,CSo),e(Wb,QV),e(QV,wSo),e(Wb,ASo),e(Ke,ySo),e(Ke,Ub),e(Ub,LSo),e(Ub,vpe),e(vpe,xSo),e(Ub,$So),e(Ub,Fpe),e(Fpe,kSo),e(Ke,SSo),M(Hb,Ke,null),b(m,PJe,_),b(m,_d,_),e(_d,Jb),e(Jb,Tpe),M(q9,Tpe,null),e(_d,RSo),e(_d,Mpe),e(Mpe,PSo),b(m,BJe,_),b(m,Po,_),M(j9,Po,null),e(Po,BSo),e(Po,bd),e(bd,ISo),e(bd,WV),e(WV,NSo),e(bd,qSo),e(bd,UV),e(UV,jSo),e(bd,DSo),e(Po,GSo),e(Po,D9),e(D9,OSo),e(D9,Epe),e(Epe,VSo),e(D9,XSo),e(Po,zSo),e(Po,_t),M(G9,_t,null),e(_t,QSo),e(_t,Cpe),e(Cpe,WSo),e(_t,USo),e(_t,vd),e(vd,HSo),e(vd,wpe),e(wpe,JSo),e(vd,YSo),e(vd,HV),e(HV,KSo),e(vd,ZSo),e(_t,eRo),M(Yb,_t,null),e(Po,oRo),e(Po,Ze),M(O9,Ze,null),e(Ze,rRo),e(Ze,Ape),e(Ape,tRo),e(Ze,aRo),e(Ze,Ya),e(Ya,nRo),e(Ya,ype),e(ype,sRo),e(Ya,lRo),e(Ya,Lpe),e(Lpe,iRo),e(Ya,dRo),e(Ya,xpe),e(xpe,cRo),e(Ya,mRo),e(Ze,fRo),e(Ze,G),e(G,Kb),e(Kb,$pe),e($pe,gRo),e(Kb,hRo),e(Kb,JV),e(JV,uRo),e(Kb,pRo),e(G,_Ro),e(G,Zb),e(Zb,kpe),e(kpe,bRo),e(Zb,vRo),e(Zb,YV),e(YV,FRo),e(Zb,TRo),e(G,MRo),e(G,e2),e(e2,Spe),e(Spe,ERo),e(e2,CRo),e(e2,KV),e(KV,wRo),e(e2,ARo),e(G,yRo),e(G,o2),e(o2,Rpe),e(Rpe,LRo),e(o2,xRo),e(o2,ZV),e(ZV,$Ro),e(o2,kRo),e(G,SRo),e(G,r2),e(r2,Ppe),e(Ppe,RRo),e(r2,PRo),e(r2,eX),e(eX,BRo),e(r2,IRo),e(G,NRo),e(G,t2),e(t2,Bpe),e(Bpe,qRo),e(t2,jRo),e(t2,oX),e(oX,DRo),e(t2,GRo),e(G,ORo),e(G,a2),e(a2,Ipe),e(Ipe,VRo),e(a2,XRo),e(a2,rX),e(rX,zRo),e(a2,QRo),e(G,WRo),e(G,n2),e(n2,Npe),e(Npe,URo),e(n2,HRo),e(n2,tX),e(tX,JRo),e(n2,YRo),e(G,KRo),e(G,s2),e(s2,qpe),e(qpe,ZRo),e(s2,ePo),e(s2,aX),e(aX,oPo),e(s2,rPo),e(G,tPo),e(G,l2),e(l2,jpe),e(jpe,aPo),e(l2,nPo),e(l2,nX),e(nX,sPo),e(l2,lPo),e(G,iPo),e(G,i2),e(i2,Dpe),e(Dpe,dPo),e(i2,cPo),e(i2,sX),e(sX,mPo),e(i2,fPo),e(G,gPo),e(G,d2),e(d2,Gpe),e(Gpe,hPo),e(d2,uPo),e(d2,lX),e(lX,pPo),e(d2,_Po),e(G,bPo),e(G,c2),e(c2,Ope),e(Ope,vPo),e(c2,FPo),e(c2,iX),e(iX,TPo),e(c2,MPo),e(G,EPo),e(G,m2),e(m2,Vpe),e(Vpe,CPo),e(m2,wPo),e(m2,dX),e(dX,APo),e(m2,yPo),e(G,LPo),e(G,f2),e(f2,Xpe),e(Xpe,xPo),e(f2,$Po),e(f2,cX),e(cX,kPo),e(f2,SPo),e(G,RPo),e(G,g2),e(g2,zpe),e(zpe,PPo),e(g2,BPo),e(g2,mX),e(mX,IPo),e(g2,NPo),e(G,qPo),e(G,h2),e(h2,Qpe),e(Qpe,jPo),e(h2,DPo),e(h2,fX),e(fX,GPo),e(h2,OPo),e(G,VPo),e(G,u2),e(u2,Wpe),e(Wpe,XPo),e(u2,zPo),e(u2,gX),e(gX,QPo),e(u2,WPo),e(G,UPo),e(G,p2),e(p2,Upe),e(Upe,HPo),e(p2,JPo),e(p2,hX),e(hX,YPo),e(p2,KPo),e(G,ZPo),e(G,_2),e(_2,Hpe),e(Hpe,eBo),e(_2,oBo),e(_2,uX),e(uX,rBo),e(_2,tBo),e(G,aBo),e(G,b2),e(b2,Jpe),e(Jpe,nBo),e(b2,sBo),e(b2,pX),e(pX,lBo),e(b2,iBo),e(G,dBo),e(G,v2),e(v2,Ype),e(Ype,cBo),e(v2,mBo),e(v2,_X),e(_X,fBo),e(v2,gBo),e(G,hBo),e(G,F2),e(F2,Kpe),e(Kpe,uBo),e(F2,pBo),e(F2,bX),e(bX,_Bo),e(F2,bBo),e(G,vBo),e(G,T2),e(T2,Zpe),e(Zpe,FBo),e(T2,TBo),e(T2,vX),e(vX,MBo),e(T2,EBo),e(G,CBo),e(G,M2),e(M2,e_e),e(e_e,wBo),e(M2,ABo),e(M2,FX),e(FX,yBo),e(M2,LBo),e(G,xBo),e(G,E2),e(E2,o_e),e(o_e,$Bo),e(E2,kBo),e(E2,TX),e(TX,SBo),e(E2,RBo),e(G,PBo),e(G,C2),e(C2,r_e),e(r_e,BBo),e(C2,IBo),e(C2,MX),e(MX,NBo),e(C2,qBo),e(G,jBo),e(G,w2),e(w2,t_e),e(t_e,DBo),e(w2,GBo),e(w2,EX),e(EX,OBo),e(w2,VBo),e(G,XBo),e(G,A2),e(A2,a_e),e(a_e,zBo),e(A2,QBo),e(A2,CX),e(CX,WBo),e(A2,UBo),e(G,HBo),e(G,y2),e(y2,n_e),e(n_e,JBo),e(y2,YBo),e(y2,wX),e(wX,KBo),e(y2,ZBo),e(G,eIo),e(G,L2),e(L2,s_e),e(s_e,oIo),e(L2,rIo),e(L2,AX),e(AX,tIo),e(L2,aIo),e(G,nIo),e(G,x2),e(x2,l_e),e(l_e,sIo),e(x2,lIo),e(x2,yX),e(yX,iIo),e(x2,dIo),e(G,cIo),e(G,$2),e($2,i_e),e(i_e,mIo),e($2,fIo),e($2,LX),e(LX,gIo),e($2,hIo),e(G,uIo),e(G,k2),e(k2,d_e),e(d_e,pIo),e(k2,_Io),e(k2,xX),e(xX,bIo),e(k2,vIo),e(G,FIo),e(G,S2),e(S2,c_e),e(c_e,TIo),e(S2,MIo),e(S2,$X),e($X,EIo),e(S2,CIo),e(G,wIo),e(G,R2),e(R2,m_e),e(m_e,AIo),e(R2,yIo),e(R2,kX),e(kX,LIo),e(R2,xIo),e(G,$Io),e(G,P2),e(P2,f_e),e(f_e,kIo),e(P2,SIo),e(P2,SX),e(SX,RIo),e(P2,PIo),e(G,BIo),e(G,B2),e(B2,g_e),e(g_e,IIo),e(B2,NIo),e(B2,RX),e(RX,qIo),e(B2,jIo),e(G,DIo),e(G,I2),e(I2,h_e),e(h_e,GIo),e(I2,OIo),e(I2,PX),e(PX,VIo),e(I2,XIo),e(G,zIo),e(G,N2),e(N2,u_e),e(u_e,QIo),e(N2,WIo),e(N2,BX),e(BX,UIo),e(N2,HIo),e(G,JIo),e(G,q2),e(q2,p_e),e(p_e,YIo),e(q2,KIo),e(q2,IX),e(IX,ZIo),e(q2,eNo),e(G,oNo),e(G,j2),e(j2,__e),e(__e,rNo),e(j2,tNo),e(j2,NX),e(NX,aNo),e(j2,nNo),e(G,sNo),e(G,D2),e(D2,b_e),e(b_e,lNo),e(D2,iNo),e(D2,qX),e(qX,dNo),e(D2,cNo),e(G,mNo),e(G,G2),e(G2,v_e),e(v_e,fNo),e(G2,gNo),e(G2,jX),e(jX,hNo),e(G2,uNo),e(G,pNo),e(G,O2),e(O2,F_e),e(F_e,_No),e(O2,bNo),e(O2,DX),e(DX,vNo),e(O2,FNo),e(G,TNo),e(G,V2),e(V2,T_e),e(T_e,MNo),e(V2,ENo),e(V2,GX),e(GX,CNo),e(V2,wNo),e(G,ANo),e(G,X2),e(X2,M_e),e(M_e,yNo),e(X2,LNo),e(X2,OX),e(OX,xNo),e(X2,$No),e(Ze,kNo),e(Ze,z2),e(z2,SNo),e(z2,E_e),e(E_e,RNo),e(z2,PNo),e(z2,C_e),e(C_e,BNo),e(Ze,INo),M(Q2,Ze,null),b(m,IJe,_),b(m,Fd,_),e(Fd,W2),e(W2,w_e),M(V9,w_e,null),e(Fd,NNo),e(Fd,A_e),e(A_e,qNo),b(m,NJe,_),b(m,Bo,_),M(X9,Bo,null),e(Bo,jNo),e(Bo,Td),e(Td,DNo),e(Td,VX),e(VX,GNo),e(Td,ONo),e(Td,XX),e(XX,VNo),e(Td,XNo),e(Bo,zNo),e(Bo,z9),e(z9,QNo),e(z9,y_e),e(y_e,WNo),e(z9,UNo),e(Bo,HNo),e(Bo,bt),M(Q9,bt,null),e(bt,JNo),e(bt,L_e),e(L_e,YNo),e(bt,KNo),e(bt,Md),e(Md,ZNo),e(Md,x_e),e(x_e,eqo),e(Md,oqo),e(Md,zX),e(zX,rqo),e(Md,tqo),e(bt,aqo),M(U2,bt,null),e(Bo,nqo),e(Bo,eo),M(W9,eo,null),e(eo,sqo),e(eo,$_e),e($_e,lqo),e(eo,iqo),e(eo,Ka),e(Ka,dqo),e(Ka,k_e),e(k_e,cqo),e(Ka,mqo),e(Ka,S_e),e(S_e,fqo),e(Ka,gqo),e(Ka,R_e),e(R_e,hqo),e(Ka,uqo),e(eo,pqo),e(eo,z),e(z,H2),e(H2,P_e),e(P_e,_qo),e(H2,bqo),e(H2,QX),e(QX,vqo),e(H2,Fqo),e(z,Tqo),e(z,J2),e(J2,B_e),e(B_e,Mqo),e(J2,Eqo),e(J2,WX),e(WX,Cqo),e(J2,wqo),e(z,Aqo),e(z,Y2),e(Y2,I_e),e(I_e,yqo),e(Y2,Lqo),e(Y2,UX),e(UX,xqo),e(Y2,$qo),e(z,kqo),e(z,K2),e(K2,N_e),e(N_e,Sqo),e(K2,Rqo),e(K2,HX),e(HX,Pqo),e(K2,Bqo),e(z,Iqo),e(z,Z2),e(Z2,q_e),e(q_e,Nqo),e(Z2,qqo),e(Z2,JX),e(JX,jqo),e(Z2,Dqo),e(z,Gqo),e(z,ev),e(ev,j_e),e(j_e,Oqo),e(ev,Vqo),e(ev,YX),e(YX,Xqo),e(ev,zqo),e(z,Qqo),e(z,ov),e(ov,D_e),e(D_e,Wqo),e(ov,Uqo),e(ov,KX),e(KX,Hqo),e(ov,Jqo),e(z,Yqo),e(z,rv),e(rv,G_e),e(G_e,Kqo),e(rv,Zqo),e(rv,ZX),e(ZX,ejo),e(rv,ojo),e(z,rjo),e(z,tv),e(tv,O_e),e(O_e,tjo),e(tv,ajo),e(tv,ez),e(ez,njo),e(tv,sjo),e(z,ljo),e(z,av),e(av,V_e),e(V_e,ijo),e(av,djo),e(av,oz),e(oz,cjo),e(av,mjo),e(z,fjo),e(z,nv),e(nv,X_e),e(X_e,gjo),e(nv,hjo),e(nv,rz),e(rz,ujo),e(nv,pjo),e(z,_jo),e(z,sv),e(sv,z_e),e(z_e,bjo),e(sv,vjo),e(sv,tz),e(tz,Fjo),e(sv,Tjo),e(z,Mjo),e(z,lv),e(lv,Q_e),e(Q_e,Ejo),e(lv,Cjo),e(lv,az),e(az,wjo),e(lv,Ajo),e(z,yjo),e(z,iv),e(iv,W_e),e(W_e,Ljo),e(iv,xjo),e(iv,nz),e(nz,$jo),e(iv,kjo),e(z,Sjo),e(z,dv),e(dv,U_e),e(U_e,Rjo),e(dv,Pjo),e(dv,sz),e(sz,Bjo),e(dv,Ijo),e(z,Njo),e(z,cv),e(cv,H_e),e(H_e,qjo),e(cv,jjo),e(cv,lz),e(lz,Djo),e(cv,Gjo),e(z,Ojo),e(z,mv),e(mv,J_e),e(J_e,Vjo),e(mv,Xjo),e(mv,iz),e(iz,zjo),e(mv,Qjo),e(z,Wjo),e(z,fv),e(fv,Y_e),e(Y_e,Ujo),e(fv,Hjo),e(fv,dz),e(dz,Jjo),e(fv,Yjo),e(z,Kjo),e(z,gv),e(gv,K_e),e(K_e,Zjo),e(gv,eDo),e(gv,cz),e(cz,oDo),e(gv,rDo),e(z,tDo),e(z,hv),e(hv,Z_e),e(Z_e,aDo),e(hv,nDo),e(hv,mz),e(mz,sDo),e(hv,lDo),e(z,iDo),e(z,uv),e(uv,ebe),e(ebe,dDo),e(uv,cDo),e(uv,fz),e(fz,mDo),e(uv,fDo),e(z,gDo),e(z,pv),e(pv,obe),e(obe,hDo),e(pv,uDo),e(pv,gz),e(gz,pDo),e(pv,_Do),e(z,bDo),e(z,_v),e(_v,rbe),e(rbe,vDo),e(_v,FDo),e(_v,hz),e(hz,TDo),e(_v,MDo),e(z,EDo),e(z,bv),e(bv,tbe),e(tbe,CDo),e(bv,wDo),e(bv,uz),e(uz,ADo),e(bv,yDo),e(z,LDo),e(z,vv),e(vv,abe),e(abe,xDo),e(vv,$Do),e(vv,pz),e(pz,kDo),e(vv,SDo),e(z,RDo),e(z,Fv),e(Fv,nbe),e(nbe,PDo),e(Fv,BDo),e(Fv,_z),e(_z,IDo),e(Fv,NDo),e(z,qDo),e(z,Tv),e(Tv,sbe),e(sbe,jDo),e(Tv,DDo),e(Tv,bz),e(bz,GDo),e(Tv,ODo),e(z,VDo),e(z,Mv),e(Mv,lbe),e(lbe,XDo),e(Mv,zDo),e(Mv,vz),e(vz,QDo),e(Mv,WDo),e(z,UDo),e(z,Ev),e(Ev,ibe),e(ibe,HDo),e(Ev,JDo),e(Ev,Fz),e(Fz,YDo),e(Ev,KDo),e(z,ZDo),e(z,Cv),e(Cv,dbe),e(dbe,eGo),e(Cv,oGo),e(Cv,Tz),e(Tz,rGo),e(Cv,tGo),e(z,aGo),e(z,wv),e(wv,cbe),e(cbe,nGo),e(wv,sGo),e(wv,Mz),e(Mz,lGo),e(wv,iGo),e(z,dGo),e(z,Av),e(Av,mbe),e(mbe,cGo),e(Av,mGo),e(Av,Ez),e(Ez,fGo),e(Av,gGo),e(z,hGo),e(z,yv),e(yv,fbe),e(fbe,uGo),e(yv,pGo),e(yv,Cz),e(Cz,_Go),e(yv,bGo),e(z,vGo),e(z,Lv),e(Lv,gbe),e(gbe,FGo),e(Lv,TGo),e(Lv,wz),e(wz,MGo),e(Lv,EGo),e(z,CGo),e(z,xv),e(xv,hbe),e(hbe,wGo),e(xv,AGo),e(xv,Az),e(Az,yGo),e(xv,LGo),e(z,xGo),e(z,$v),e($v,ube),e(ube,$Go),e($v,kGo),e($v,yz),e(yz,SGo),e($v,RGo),e(z,PGo),e(z,kv),e(kv,pbe),e(pbe,BGo),e(kv,IGo),e(kv,Lz),e(Lz,NGo),e(kv,qGo),e(z,jGo),e(z,Sv),e(Sv,_be),e(_be,DGo),e(Sv,GGo),e(Sv,xz),e(xz,OGo),e(Sv,VGo),e(z,XGo),e(z,Rv),e(Rv,bbe),e(bbe,zGo),e(Rv,QGo),e(Rv,$z),e($z,WGo),e(Rv,UGo),e(z,HGo),e(z,Pv),e(Pv,vbe),e(vbe,JGo),e(Pv,YGo),e(Pv,kz),e(kz,KGo),e(Pv,ZGo),e(eo,eOo),e(eo,Bv),e(Bv,oOo),e(Bv,Fbe),e(Fbe,rOo),e(Bv,tOo),e(Bv,Tbe),e(Tbe,aOo),e(eo,nOo),M(Iv,eo,null),b(m,qJe,_),b(m,Ed,_),e(Ed,Nv),e(Nv,Mbe),M(U9,Mbe,null),e(Ed,sOo),e(Ed,Ebe),e(Ebe,lOo),b(m,jJe,_),b(m,Io,_),M(H9,Io,null),e(Io,iOo),e(Io,Cd),e(Cd,dOo),e(Cd,Sz),e(Sz,cOo),e(Cd,mOo),e(Cd,Rz),e(Rz,fOo),e(Cd,gOo),e(Io,hOo),e(Io,J9),e(J9,uOo),e(J9,Cbe),e(Cbe,pOo),e(J9,_Oo),e(Io,bOo),e(Io,vt),M(Y9,vt,null),e(vt,vOo),e(vt,wbe),e(wbe,FOo),e(vt,TOo),e(vt,wd),e(wd,MOo),e(wd,Abe),e(Abe,EOo),e(wd,COo),e(wd,Pz),e(Pz,wOo),e(wd,AOo),e(vt,yOo),M(qv,vt,null),e(Io,LOo),e(Io,oo),M(K9,oo,null),e(oo,xOo),e(oo,ybe),e(ybe,$Oo),e(oo,kOo),e(oo,Za),e(Za,SOo),e(Za,Lbe),e(Lbe,ROo),e(Za,POo),e(Za,xbe),e(xbe,BOo),e(Za,IOo),e(Za,$be),e($be,NOo),e(Za,qOo),e(oo,jOo),e(oo,U),e(U,jv),e(jv,kbe),e(kbe,DOo),e(jv,GOo),e(jv,Bz),e(Bz,OOo),e(jv,VOo),e(U,XOo),e(U,Dv),e(Dv,Sbe),e(Sbe,zOo),e(Dv,QOo),e(Dv,Iz),e(Iz,WOo),e(Dv,UOo),e(U,HOo),e(U,Gv),e(Gv,Rbe),e(Rbe,JOo),e(Gv,YOo),e(Gv,Nz),e(Nz,KOo),e(Gv,ZOo),e(U,eVo),e(U,Ov),e(Ov,Pbe),e(Pbe,oVo),e(Ov,rVo),e(Ov,qz),e(qz,tVo),e(Ov,aVo),e(U,nVo),e(U,Vv),e(Vv,Bbe),e(Bbe,sVo),e(Vv,lVo),e(Vv,jz),e(jz,iVo),e(Vv,dVo),e(U,cVo),e(U,Xv),e(Xv,Ibe),e(Ibe,mVo),e(Xv,fVo),e(Xv,Dz),e(Dz,gVo),e(Xv,hVo),e(U,uVo),e(U,zv),e(zv,Nbe),e(Nbe,pVo),e(zv,_Vo),e(zv,Gz),e(Gz,bVo),e(zv,vVo),e(U,FVo),e(U,Qv),e(Qv,qbe),e(qbe,TVo),e(Qv,MVo),e(Qv,Oz),e(Oz,EVo),e(Qv,CVo),e(U,wVo),e(U,Wv),e(Wv,jbe),e(jbe,AVo),e(Wv,yVo),e(Wv,Vz),e(Vz,LVo),e(Wv,xVo),e(U,$Vo),e(U,Uv),e(Uv,Dbe),e(Dbe,kVo),e(Uv,SVo),e(Uv,Xz),e(Xz,RVo),e(Uv,PVo),e(U,BVo),e(U,Hv),e(Hv,Gbe),e(Gbe,IVo),e(Hv,NVo),e(Hv,zz),e(zz,qVo),e(Hv,jVo),e(U,DVo),e(U,Jv),e(Jv,Obe),e(Obe,GVo),e(Jv,OVo),e(Jv,Qz),e(Qz,VVo),e(Jv,XVo),e(U,zVo),e(U,Yv),e(Yv,Vbe),e(Vbe,QVo),e(Yv,WVo),e(Yv,Wz),e(Wz,UVo),e(Yv,HVo),e(U,JVo),e(U,Kv),e(Kv,Xbe),e(Xbe,YVo),e(Kv,KVo),e(Kv,Uz),e(Uz,ZVo),e(Kv,eXo),e(U,oXo),e(U,Zv),e(Zv,zbe),e(zbe,rXo),e(Zv,tXo),e(Zv,Hz),e(Hz,aXo),e(Zv,nXo),e(U,sXo),e(U,e1),e(e1,Qbe),e(Qbe,lXo),e(e1,iXo),e(e1,Jz),e(Jz,dXo),e(e1,cXo),e(U,mXo),e(U,o1),e(o1,Wbe),e(Wbe,fXo),e(o1,gXo),e(o1,Yz),e(Yz,hXo),e(o1,uXo),e(U,pXo),e(U,r1),e(r1,Ube),e(Ube,_Xo),e(r1,bXo),e(r1,Kz),e(Kz,vXo),e(r1,FXo),e(U,TXo),e(U,t1),e(t1,Hbe),e(Hbe,MXo),e(t1,EXo),e(t1,Zz),e(Zz,CXo),e(t1,wXo),e(U,AXo),e(U,a1),e(a1,Jbe),e(Jbe,yXo),e(a1,LXo),e(a1,eQ),e(eQ,xXo),e(a1,$Xo),e(U,kXo),e(U,n1),e(n1,Ybe),e(Ybe,SXo),e(n1,RXo),e(n1,oQ),e(oQ,PXo),e(n1,BXo),e(U,IXo),e(U,s1),e(s1,Kbe),e(Kbe,NXo),e(s1,qXo),e(s1,rQ),e(rQ,jXo),e(s1,DXo),e(U,GXo),e(U,l1),e(l1,Zbe),e(Zbe,OXo),e(l1,VXo),e(l1,tQ),e(tQ,XXo),e(l1,zXo),e(U,QXo),e(U,i1),e(i1,e2e),e(e2e,WXo),e(i1,UXo),e(i1,aQ),e(aQ,HXo),e(i1,JXo),e(U,YXo),e(U,d1),e(d1,o2e),e(o2e,KXo),e(d1,ZXo),e(d1,nQ),e(nQ,ezo),e(d1,ozo),e(U,rzo),e(U,c1),e(c1,r2e),e(r2e,tzo),e(c1,azo),e(c1,sQ),e(sQ,nzo),e(c1,szo),e(U,lzo),e(U,m1),e(m1,t2e),e(t2e,izo),e(m1,dzo),e(m1,lQ),e(lQ,czo),e(m1,mzo),e(U,fzo),e(U,f1),e(f1,a2e),e(a2e,gzo),e(f1,hzo),e(f1,iQ),e(iQ,uzo),e(f1,pzo),e(U,_zo),e(U,g1),e(g1,n2e),e(n2e,bzo),e(g1,vzo),e(g1,dQ),e(dQ,Fzo),e(g1,Tzo),e(U,Mzo),e(U,h1),e(h1,s2e),e(s2e,Ezo),e(h1,Czo),e(h1,cQ),e(cQ,wzo),e(h1,Azo),e(U,yzo),e(U,u1),e(u1,l2e),e(l2e,Lzo),e(u1,xzo),e(u1,mQ),e(mQ,$zo),e(u1,kzo),e(U,Szo),e(U,p1),e(p1,i2e),e(i2e,Rzo),e(p1,Pzo),e(p1,fQ),e(fQ,Bzo),e(p1,Izo),e(U,Nzo),e(U,_1),e(_1,d2e),e(d2e,qzo),e(_1,jzo),e(_1,gQ),e(gQ,Dzo),e(_1,Gzo),e(U,Ozo),e(U,b1),e(b1,c2e),e(c2e,Vzo),e(b1,Xzo),e(b1,m2e),e(m2e,zzo),e(b1,Qzo),e(U,Wzo),e(U,v1),e(v1,f2e),e(f2e,Uzo),e(v1,Hzo),e(v1,hQ),e(hQ,Jzo),e(v1,Yzo),e(U,Kzo),e(U,F1),e(F1,g2e),e(g2e,Zzo),e(F1,eQo),e(F1,uQ),e(uQ,oQo),e(F1,rQo),e(U,tQo),e(U,T1),e(T1,h2e),e(h2e,aQo),e(T1,nQo),e(T1,pQ),e(pQ,sQo),e(T1,lQo),e(U,iQo),e(U,M1),e(M1,u2e),e(u2e,dQo),e(M1,cQo),e(M1,_Q),e(_Q,mQo),e(M1,fQo),e(oo,gQo),e(oo,E1),e(E1,hQo),e(E1,p2e),e(p2e,uQo),e(E1,pQo),e(E1,_2e),e(_2e,_Qo),e(oo,bQo),M(C1,oo,null),b(m,DJe,_),b(m,Ad,_),e(Ad,w1),e(w1,b2e),M(Z9,b2e,null),e(Ad,vQo),e(Ad,v2e),e(v2e,FQo),b(m,GJe,_),b(m,No,_),M(ex,No,null),e(No,TQo),e(No,yd),e(yd,MQo),e(yd,bQ),e(bQ,EQo),e(yd,CQo),e(yd,vQ),e(vQ,wQo),e(yd,AQo),e(No,yQo),e(No,ox),e(ox,LQo),e(ox,F2e),e(F2e,xQo),e(ox,$Qo),e(No,kQo),e(No,Ft),M(rx,Ft,null),e(Ft,SQo),e(Ft,T2e),e(T2e,RQo),e(Ft,PQo),e(Ft,Ld),e(Ld,BQo),e(Ld,M2e),e(M2e,IQo),e(Ld,NQo),e(Ld,FQ),e(FQ,qQo),e(Ld,jQo),e(Ft,DQo),M(A1,Ft,null),e(No,GQo),e(No,ro),M(tx,ro,null),e(ro,OQo),e(ro,E2e),e(E2e,VQo),e(ro,XQo),e(ro,en),e(en,zQo),e(en,C2e),e(C2e,QQo),e(en,WQo),e(en,w2e),e(w2e,UQo),e(en,HQo),e(en,A2e),e(A2e,JQo),e(en,YQo),e(ro,KQo),e(ro,me),e(me,y1),e(y1,y2e),e(y2e,ZQo),e(y1,eWo),e(y1,TQ),e(TQ,oWo),e(y1,rWo),e(me,tWo),e(me,L1),e(L1,L2e),e(L2e,aWo),e(L1,nWo),e(L1,MQ),e(MQ,sWo),e(L1,lWo),e(me,iWo),e(me,x1),e(x1,x2e),e(x2e,dWo),e(x1,cWo),e(x1,EQ),e(EQ,mWo),e(x1,fWo),e(me,gWo),e(me,$1),e($1,$2e),e($2e,hWo),e($1,uWo),e($1,CQ),e(CQ,pWo),e($1,_Wo),e(me,bWo),e(me,k1),e(k1,k2e),e(k2e,vWo),e(k1,FWo),e(k1,wQ),e(wQ,TWo),e(k1,MWo),e(me,EWo),e(me,S1),e(S1,S2e),e(S2e,CWo),e(S1,wWo),e(S1,AQ),e(AQ,AWo),e(S1,yWo),e(me,LWo),e(me,R1),e(R1,R2e),e(R2e,xWo),e(R1,$Wo),e(R1,yQ),e(yQ,kWo),e(R1,SWo),e(me,RWo),e(me,P1),e(P1,P2e),e(P2e,PWo),e(P1,BWo),e(P1,LQ),e(LQ,IWo),e(P1,NWo),e(me,qWo),e(me,B1),e(B1,B2e),e(B2e,jWo),e(B1,DWo),e(B1,xQ),e(xQ,GWo),e(B1,OWo),e(me,VWo),e(me,I1),e(I1,I2e),e(I2e,XWo),e(I1,zWo),e(I1,$Q),e($Q,QWo),e(I1,WWo),e(me,UWo),e(me,N1),e(N1,N2e),e(N2e,HWo),e(N1,JWo),e(N1,kQ),e(kQ,YWo),e(N1,KWo),e(me,ZWo),e(me,q1),e(q1,q2e),e(q2e,eUo),e(q1,oUo),e(q1,SQ),e(SQ,rUo),e(q1,tUo),e(me,aUo),e(me,j1),e(j1,j2e),e(j2e,nUo),e(j1,sUo),e(j1,RQ),e(RQ,lUo),e(j1,iUo),e(me,dUo),e(me,D1),e(D1,D2e),e(D2e,cUo),e(D1,mUo),e(D1,PQ),e(PQ,fUo),e(D1,gUo),e(me,hUo),e(me,G1),e(G1,G2e),e(G2e,uUo),e(G1,pUo),e(G1,BQ),e(BQ,_Uo),e(G1,bUo),e(me,vUo),e(me,O1),e(O1,O2e),e(O2e,FUo),e(O1,TUo),e(O1,IQ),e(IQ,MUo),e(O1,EUo),e(me,CUo),e(me,V1),e(V1,V2e),e(V2e,wUo),e(V1,AUo),e(V1,NQ),e(NQ,yUo),e(V1,LUo),e(me,xUo),e(me,X1),e(X1,X2e),e(X2e,$Uo),e(X1,kUo),e(X1,qQ),e(qQ,SUo),e(X1,RUo),e(me,PUo),e(me,z1),e(z1,z2e),e(z2e,BUo),e(z1,IUo),e(z1,jQ),e(jQ,NUo),e(z1,qUo),e(me,jUo),e(me,Q1),e(Q1,Q2e),e(Q2e,DUo),e(Q1,GUo),e(Q1,DQ),e(DQ,OUo),e(Q1,VUo),e(ro,XUo),e(ro,W1),e(W1,zUo),e(W1,W2e),e(W2e,QUo),e(W1,WUo),e(W1,U2e),e(U2e,UUo),e(ro,HUo),M(U1,ro,null),b(m,OJe,_),b(m,xd,_),e(xd,H1),e(H1,H2e),M(ax,H2e,null),e(xd,JUo),e(xd,J2e),e(J2e,YUo),b(m,VJe,_),b(m,qo,_),M(nx,qo,null),e(qo,KUo),e(qo,$d),e($d,ZUo),e($d,GQ),e(GQ,eHo),e($d,oHo),e($d,OQ),e(OQ,rHo),e($d,tHo),e(qo,aHo),e(qo,sx),e(sx,nHo),e(sx,Y2e),e(Y2e,sHo),e(sx,lHo),e(qo,iHo),e(qo,Tt),M(lx,Tt,null),e(Tt,dHo),e(Tt,K2e),e(K2e,cHo),e(Tt,mHo),e(Tt,kd),e(kd,fHo),e(kd,Z2e),e(Z2e,gHo),e(kd,hHo),e(kd,VQ),e(VQ,uHo),e(kd,pHo),e(Tt,_Ho),M(J1,Tt,null),e(qo,bHo),e(qo,to),M(ix,to,null),e(to,vHo),e(to,eve),e(eve,FHo),e(to,THo),e(to,on),e(on,MHo),e(on,ove),e(ove,EHo),e(on,CHo),e(on,rve),e(rve,wHo),e(on,AHo),e(on,tve),e(tve,yHo),e(on,LHo),e(to,xHo),e(to,j),e(j,Y1),e(Y1,ave),e(ave,$Ho),e(Y1,kHo),e(Y1,XQ),e(XQ,SHo),e(Y1,RHo),e(j,PHo),e(j,K1),e(K1,nve),e(nve,BHo),e(K1,IHo),e(K1,zQ),e(zQ,NHo),e(K1,qHo),e(j,jHo),e(j,Z1),e(Z1,sve),e(sve,DHo),e(Z1,GHo),e(Z1,QQ),e(QQ,OHo),e(Z1,VHo),e(j,XHo),e(j,eF),e(eF,lve),e(lve,zHo),e(eF,QHo),e(eF,WQ),e(WQ,WHo),e(eF,UHo),e(j,HHo),e(j,oF),e(oF,ive),e(ive,JHo),e(oF,YHo),e(oF,UQ),e(UQ,KHo),e(oF,ZHo),e(j,eJo),e(j,rF),e(rF,dve),e(dve,oJo),e(rF,rJo),e(rF,HQ),e(HQ,tJo),e(rF,aJo),e(j,nJo),e(j,tF),e(tF,cve),e(cve,sJo),e(tF,lJo),e(tF,JQ),e(JQ,iJo),e(tF,dJo),e(j,cJo),e(j,aF),e(aF,mve),e(mve,mJo),e(aF,fJo),e(aF,YQ),e(YQ,gJo),e(aF,hJo),e(j,uJo),e(j,nF),e(nF,fve),e(fve,pJo),e(nF,_Jo),e(nF,KQ),e(KQ,bJo),e(nF,vJo),e(j,FJo),e(j,sF),e(sF,gve),e(gve,TJo),e(sF,MJo),e(sF,ZQ),e(ZQ,EJo),e(sF,CJo),e(j,wJo),e(j,lF),e(lF,hve),e(hve,AJo),e(lF,yJo),e(lF,eW),e(eW,LJo),e(lF,xJo),e(j,$Jo),e(j,iF),e(iF,uve),e(uve,kJo),e(iF,SJo),e(iF,oW),e(oW,RJo),e(iF,PJo),e(j,BJo),e(j,dF),e(dF,pve),e(pve,IJo),e(dF,NJo),e(dF,rW),e(rW,qJo),e(dF,jJo),e(j,DJo),e(j,cF),e(cF,_ve),e(_ve,GJo),e(cF,OJo),e(cF,tW),e(tW,VJo),e(cF,XJo),e(j,zJo),e(j,mF),e(mF,bve),e(bve,QJo),e(mF,WJo),e(mF,aW),e(aW,UJo),e(mF,HJo),e(j,JJo),e(j,fF),e(fF,vve),e(vve,YJo),e(fF,KJo),e(fF,nW),e(nW,ZJo),e(fF,eYo),e(j,oYo),e(j,gF),e(gF,Fve),e(Fve,rYo),e(gF,tYo),e(gF,sW),e(sW,aYo),e(gF,nYo),e(j,sYo),e(j,hF),e(hF,Tve),e(Tve,lYo),e(hF,iYo),e(hF,lW),e(lW,dYo),e(hF,cYo),e(j,mYo),e(j,uF),e(uF,Mve),e(Mve,fYo),e(uF,gYo),e(uF,iW),e(iW,hYo),e(uF,uYo),e(j,pYo),e(j,pF),e(pF,Eve),e(Eve,_Yo),e(pF,bYo),e(pF,dW),e(dW,vYo),e(pF,FYo),e(j,TYo),e(j,_F),e(_F,Cve),e(Cve,MYo),e(_F,EYo),e(_F,cW),e(cW,CYo),e(_F,wYo),e(j,AYo),e(j,bF),e(bF,wve),e(wve,yYo),e(bF,LYo),e(bF,mW),e(mW,xYo),e(bF,$Yo),e(j,kYo),e(j,vF),e(vF,Ave),e(Ave,SYo),e(vF,RYo),e(vF,fW),e(fW,PYo),e(vF,BYo),e(j,IYo),e(j,FF),e(FF,yve),e(yve,NYo),e(FF,qYo),e(FF,gW),e(gW,jYo),e(FF,DYo),e(j,GYo),e(j,TF),e(TF,Lve),e(Lve,OYo),e(TF,VYo),e(TF,hW),e(hW,XYo),e(TF,zYo),e(j,QYo),e(j,MF),e(MF,xve),e(xve,WYo),e(MF,UYo),e(MF,uW),e(uW,HYo),e(MF,JYo),e(j,YYo),e(j,EF),e(EF,$ve),e($ve,KYo),e(EF,ZYo),e(EF,pW),e(pW,eKo),e(EF,oKo),e(j,rKo),e(j,CF),e(CF,kve),e(kve,tKo),e(CF,aKo),e(CF,_W),e(_W,nKo),e(CF,sKo),e(j,lKo),e(j,wF),e(wF,Sve),e(Sve,iKo),e(wF,dKo),e(wF,bW),e(bW,cKo),e(wF,mKo),e(j,fKo),e(j,AF),e(AF,Rve),e(Rve,gKo),e(AF,hKo),e(AF,vW),e(vW,uKo),e(AF,pKo),e(j,_Ko),e(j,yF),e(yF,Pve),e(Pve,bKo),e(yF,vKo),e(yF,FW),e(FW,FKo),e(yF,TKo),e(j,MKo),e(j,LF),e(LF,Bve),e(Bve,EKo),e(LF,CKo),e(LF,TW),e(TW,wKo),e(LF,AKo),e(j,yKo),e(j,xF),e(xF,Ive),e(Ive,LKo),e(xF,xKo),e(xF,MW),e(MW,$Ko),e(xF,kKo),e(j,SKo),e(j,$F),e($F,Nve),e(Nve,RKo),e($F,PKo),e($F,EW),e(EW,BKo),e($F,IKo),e(j,NKo),e(j,kF),e(kF,qve),e(qve,qKo),e(kF,jKo),e(kF,CW),e(CW,DKo),e(kF,GKo),e(j,OKo),e(j,SF),e(SF,jve),e(jve,VKo),e(SF,XKo),e(SF,wW),e(wW,zKo),e(SF,QKo),e(j,WKo),e(j,RF),e(RF,Dve),e(Dve,UKo),e(RF,HKo),e(RF,AW),e(AW,JKo),e(RF,YKo),e(j,KKo),e(j,PF),e(PF,Gve),e(Gve,ZKo),e(PF,eZo),e(PF,yW),e(yW,oZo),e(PF,rZo),e(j,tZo),e(j,BF),e(BF,Ove),e(Ove,aZo),e(BF,nZo),e(BF,LW),e(LW,sZo),e(BF,lZo),e(j,iZo),e(j,IF),e(IF,Vve),e(Vve,dZo),e(IF,cZo),e(IF,xW),e(xW,mZo),e(IF,fZo),e(j,gZo),e(j,NF),e(NF,Xve),e(Xve,hZo),e(NF,uZo),e(NF,$W),e($W,pZo),e(NF,_Zo),e(j,bZo),e(j,qF),e(qF,zve),e(zve,vZo),e(qF,FZo),e(qF,kW),e(kW,TZo),e(qF,MZo),e(j,EZo),e(j,jF),e(jF,Qve),e(Qve,CZo),e(jF,wZo),e(jF,SW),e(SW,AZo),e(jF,yZo),e(j,LZo),e(j,DF),e(DF,Wve),e(Wve,xZo),e(DF,$Zo),e(DF,RW),e(RW,kZo),e(DF,SZo),e(j,RZo),e(j,GF),e(GF,Uve),e(Uve,PZo),e(GF,BZo),e(GF,PW),e(PW,IZo),e(GF,NZo),e(j,qZo),e(j,OF),e(OF,Hve),e(Hve,jZo),e(OF,DZo),e(OF,BW),e(BW,GZo),e(OF,OZo),e(j,VZo),e(j,VF),e(VF,Jve),e(Jve,XZo),e(VF,zZo),e(VF,IW),e(IW,QZo),e(VF,WZo),e(j,UZo),e(j,XF),e(XF,Yve),e(Yve,HZo),e(XF,JZo),e(XF,NW),e(NW,YZo),e(XF,KZo),e(j,ZZo),e(j,zF),e(zF,Kve),e(Kve,eer),e(zF,oer),e(zF,qW),e(qW,rer),e(zF,ter),e(j,aer),e(j,QF),e(QF,Zve),e(Zve,ner),e(QF,ser),e(QF,jW),e(jW,ler),e(QF,ier),e(j,der),e(j,WF),e(WF,e1e),e(e1e,cer),e(WF,mer),e(WF,DW),e(DW,fer),e(WF,ger),e(j,her),e(j,UF),e(UF,o1e),e(o1e,uer),e(UF,per),e(UF,GW),e(GW,_er),e(UF,ber),e(to,ver),e(to,HF),e(HF,Fer),e(HF,r1e),e(r1e,Ter),e(HF,Mer),e(HF,t1e),e(t1e,Eer),e(to,Cer),M(JF,to,null),b(m,XJe,_),b(m,Sd,_),e(Sd,YF),e(YF,a1e),M(dx,a1e,null),e(Sd,wer),e(Sd,n1e),e(n1e,Aer),b(m,zJe,_),b(m,jo,_),M(cx,jo,null),e(jo,yer),e(jo,Rd),e(Rd,Ler),e(Rd,OW),e(OW,xer),e(Rd,$er),e(Rd,VW),e(VW,ker),e(Rd,Ser),e(jo,Rer),e(jo,mx),e(mx,Per),e(mx,s1e),e(s1e,Ber),e(mx,Ier),e(jo,Ner),e(jo,Mt),M(fx,Mt,null),e(Mt,qer),e(Mt,l1e),e(l1e,jer),e(Mt,Der),e(Mt,Pd),e(Pd,Ger),e(Pd,i1e),e(i1e,Oer),e(Pd,Ver),e(Pd,XW),e(XW,Xer),e(Pd,zer),e(Mt,Qer),M(KF,Mt,null),e(jo,Wer),e(jo,ao),M(gx,ao,null),e(ao,Uer),e(ao,d1e),e(d1e,Her),e(ao,Jer),e(ao,rn),e(rn,Yer),e(rn,c1e),e(c1e,Ker),e(rn,Zer),e(rn,m1e),e(m1e,eor),e(rn,oor),e(rn,f1e),e(f1e,ror),e(rn,tor),e(ao,aor),e(ao,Z),e(Z,ZF),e(ZF,g1e),e(g1e,nor),e(ZF,sor),e(ZF,zW),e(zW,lor),e(ZF,ior),e(Z,dor),e(Z,eT),e(eT,h1e),e(h1e,cor),e(eT,mor),e(eT,QW),e(QW,gor),e(eT,hor),e(Z,uor),e(Z,oT),e(oT,u1e),e(u1e,por),e(oT,_or),e(oT,WW),e(WW,bor),e(oT,vor),e(Z,For),e(Z,rT),e(rT,p1e),e(p1e,Tor),e(rT,Mor),e(rT,UW),e(UW,Eor),e(rT,Cor),e(Z,wor),e(Z,tT),e(tT,_1e),e(_1e,Aor),e(tT,yor),e(tT,HW),e(HW,Lor),e(tT,xor),e(Z,$or),e(Z,aT),e(aT,b1e),e(b1e,kor),e(aT,Sor),e(aT,JW),e(JW,Ror),e(aT,Por),e(Z,Bor),e(Z,nT),e(nT,v1e),e(v1e,Ior),e(nT,Nor),e(nT,YW),e(YW,qor),e(nT,jor),e(Z,Dor),e(Z,sT),e(sT,F1e),e(F1e,Gor),e(sT,Oor),e(sT,KW),e(KW,Vor),e(sT,Xor),e(Z,zor),e(Z,lT),e(lT,T1e),e(T1e,Qor),e(lT,Wor),e(lT,ZW),e(ZW,Uor),e(lT,Hor),e(Z,Jor),e(Z,iT),e(iT,M1e),e(M1e,Yor),e(iT,Kor),e(iT,eU),e(eU,Zor),e(iT,err),e(Z,orr),e(Z,dT),e(dT,E1e),e(E1e,rrr),e(dT,trr),e(dT,oU),e(oU,arr),e(dT,nrr),e(Z,srr),e(Z,cT),e(cT,C1e),e(C1e,lrr),e(cT,irr),e(cT,rU),e(rU,drr),e(cT,crr),e(Z,mrr),e(Z,mT),e(mT,w1e),e(w1e,frr),e(mT,grr),e(mT,tU),e(tU,hrr),e(mT,urr),e(Z,prr),e(Z,fT),e(fT,A1e),e(A1e,_rr),e(fT,brr),e(fT,aU),e(aU,vrr),e(fT,Frr),e(Z,Trr),e(Z,gT),e(gT,y1e),e(y1e,Mrr),e(gT,Err),e(gT,nU),e(nU,Crr),e(gT,wrr),e(Z,Arr),e(Z,hT),e(hT,L1e),e(L1e,yrr),e(hT,Lrr),e(hT,sU),e(sU,xrr),e(hT,$rr),e(Z,krr),e(Z,uT),e(uT,x1e),e(x1e,Srr),e(uT,Rrr),e(uT,lU),e(lU,Prr),e(uT,Brr),e(Z,Irr),e(Z,pT),e(pT,$1e),e($1e,Nrr),e(pT,qrr),e(pT,iU),e(iU,jrr),e(pT,Drr),e(Z,Grr),e(Z,_T),e(_T,k1e),e(k1e,Orr),e(_T,Vrr),e(_T,dU),e(dU,Xrr),e(_T,zrr),e(Z,Qrr),e(Z,bT),e(bT,S1e),e(S1e,Wrr),e(bT,Urr),e(bT,cU),e(cU,Hrr),e(bT,Jrr),e(Z,Yrr),e(Z,vT),e(vT,R1e),e(R1e,Krr),e(vT,Zrr),e(vT,mU),e(mU,etr),e(vT,otr),e(Z,rtr),e(Z,FT),e(FT,P1e),e(P1e,ttr),e(FT,atr),e(FT,fU),e(fU,ntr),e(FT,str),e(Z,ltr),e(Z,TT),e(TT,B1e),e(B1e,itr),e(TT,dtr),e(TT,gU),e(gU,ctr),e(TT,mtr),e(Z,ftr),e(Z,MT),e(MT,I1e),e(I1e,gtr),e(MT,htr),e(MT,hU),e(hU,utr),e(MT,ptr),e(Z,_tr),e(Z,ET),e(ET,N1e),e(N1e,btr),e(ET,vtr),e(ET,uU),e(uU,Ftr),e(ET,Ttr),e(Z,Mtr),e(Z,CT),e(CT,q1e),e(q1e,Etr),e(CT,Ctr),e(CT,pU),e(pU,wtr),e(CT,Atr),e(Z,ytr),e(Z,wT),e(wT,j1e),e(j1e,Ltr),e(wT,xtr),e(wT,_U),e(_U,$tr),e(wT,ktr),e(Z,Str),e(Z,AT),e(AT,D1e),e(D1e,Rtr),e(AT,Ptr),e(AT,bU),e(bU,Btr),e(AT,Itr),e(Z,Ntr),e(Z,yT),e(yT,G1e),e(G1e,qtr),e(yT,jtr),e(yT,vU),e(vU,Dtr),e(yT,Gtr),e(Z,Otr),e(Z,LT),e(LT,O1e),e(O1e,Vtr),e(LT,Xtr),e(LT,FU),e(FU,ztr),e(LT,Qtr),e(Z,Wtr),e(Z,xT),e(xT,V1e),e(V1e,Utr),e(xT,Htr),e(xT,TU),e(TU,Jtr),e(xT,Ytr),e(ao,Ktr),e(ao,$T),e($T,Ztr),e($T,X1e),e(X1e,ear),e($T,oar),e($T,z1e),e(z1e,rar),e(ao,tar),M(kT,ao,null),b(m,QJe,_),b(m,Bd,_),e(Bd,ST),e(ST,Q1e),M(hx,Q1e,null),e(Bd,aar),e(Bd,W1e),e(W1e,nar),b(m,WJe,_),b(m,Do,_),M(ux,Do,null),e(Do,sar),e(Do,Id),e(Id,lar),e(Id,MU),e(MU,iar),e(Id,dar),e(Id,EU),e(EU,car),e(Id,mar),e(Do,far),e(Do,px),e(px,gar),e(px,U1e),e(U1e,har),e(px,uar),e(Do,par),e(Do,Et),M(_x,Et,null),e(Et,_ar),e(Et,H1e),e(H1e,bar),e(Et,Far),e(Et,Nd),e(Nd,Tar),e(Nd,J1e),e(J1e,Mar),e(Nd,Ear),e(Nd,CU),e(CU,Car),e(Nd,war),e(Et,Aar),M(RT,Et,null),e(Do,yar),e(Do,no),M(bx,no,null),e(no,Lar),e(no,Y1e),e(Y1e,xar),e(no,$ar),e(no,tn),e(tn,kar),e(tn,K1e),e(K1e,Sar),e(tn,Rar),e(tn,Z1e),e(Z1e,Par),e(tn,Bar),e(tn,eFe),e(eFe,Iar),e(tn,Nar),e(no,qar),e(no,Go),e(Go,PT),e(PT,oFe),e(oFe,jar),e(PT,Dar),e(PT,wU),e(wU,Gar),e(PT,Oar),e(Go,Var),e(Go,BT),e(BT,rFe),e(rFe,Xar),e(BT,zar),e(BT,AU),e(AU,Qar),e(BT,War),e(Go,Uar),e(Go,IT),e(IT,tFe),e(tFe,Har),e(IT,Jar),e(IT,yU),e(yU,Yar),e(IT,Kar),e(Go,Zar),e(Go,NT),e(NT,aFe),e(aFe,enr),e(NT,onr),e(NT,LU),e(LU,rnr),e(NT,tnr),e(Go,anr),e(Go,qT),e(qT,nFe),e(nFe,nnr),e(qT,snr),e(qT,xU),e(xU,lnr),e(qT,inr),e(Go,dnr),e(Go,jT),e(jT,sFe),e(sFe,cnr),e(jT,mnr),e(jT,$U),e($U,fnr),e(jT,gnr),e(no,hnr),e(no,DT),e(DT,unr),e(DT,lFe),e(lFe,pnr),e(DT,_nr),e(DT,iFe),e(iFe,bnr),e(no,vnr),M(GT,no,null),b(m,UJe,_),b(m,qd,_),e(qd,OT),e(OT,dFe),M(vx,dFe,null),e(qd,Fnr),e(qd,cFe),e(cFe,Tnr),b(m,HJe,_),b(m,Oo,_),M(Fx,Oo,null),e(Oo,Mnr),e(Oo,jd),e(jd,Enr),e(jd,kU),e(kU,Cnr),e(jd,wnr),e(jd,SU),e(SU,Anr),e(jd,ynr),e(Oo,Lnr),e(Oo,Tx),e(Tx,xnr),e(Tx,mFe),e(mFe,$nr),e(Tx,knr),e(Oo,Snr),e(Oo,Ct),M(Mx,Ct,null),e(Ct,Rnr),e(Ct,fFe),e(fFe,Pnr),e(Ct,Bnr),e(Ct,Dd),e(Dd,Inr),e(Dd,gFe),e(gFe,Nnr),e(Dd,qnr),e(Dd,RU),e(RU,jnr),e(Dd,Dnr),e(Ct,Gnr),M(VT,Ct,null),e(Oo,Onr),e(Oo,so),M(Ex,so,null),e(so,Vnr),e(so,hFe),e(hFe,Xnr),e(so,znr),e(so,an),e(an,Qnr),e(an,uFe),e(uFe,Wnr),e(an,Unr),e(an,pFe),e(pFe,Hnr),e(an,Jnr),e(an,_Fe),e(_Fe,Ynr),e(an,Knr),e(so,Znr),e(so,H),e(H,XT),e(XT,bFe),e(bFe,esr),e(XT,osr),e(XT,PU),e(PU,rsr),e(XT,tsr),e(H,asr),e(H,zT),e(zT,vFe),e(vFe,nsr),e(zT,ssr),e(zT,BU),e(BU,lsr),e(zT,isr),e(H,dsr),e(H,QT),e(QT,FFe),e(FFe,csr),e(QT,msr),e(QT,IU),e(IU,fsr),e(QT,gsr),e(H,hsr),e(H,WT),e(WT,TFe),e(TFe,usr),e(WT,psr),e(WT,NU),e(NU,_sr),e(WT,bsr),e(H,vsr),e(H,UT),e(UT,MFe),e(MFe,Fsr),e(UT,Tsr),e(UT,qU),e(qU,Msr),e(UT,Esr),e(H,Csr),e(H,HT),e(HT,EFe),e(EFe,wsr),e(HT,Asr),e(HT,jU),e(jU,ysr),e(HT,Lsr),e(H,xsr),e(H,JT),e(JT,CFe),e(CFe,$sr),e(JT,ksr),e(JT,DU),e(DU,Ssr),e(JT,Rsr),e(H,Psr),e(H,YT),e(YT,wFe),e(wFe,Bsr),e(YT,Isr),e(YT,GU),e(GU,Nsr),e(YT,qsr),e(H,jsr),e(H,KT),e(KT,AFe),e(AFe,Dsr),e(KT,Gsr),e(KT,OU),e(OU,Osr),e(KT,Vsr),e(H,Xsr),e(H,ZT),e(ZT,yFe),e(yFe,zsr),e(ZT,Qsr),e(ZT,VU),e(VU,Wsr),e(ZT,Usr),e(H,Hsr),e(H,eM),e(eM,LFe),e(LFe,Jsr),e(eM,Ysr),e(eM,XU),e(XU,Ksr),e(eM,Zsr),e(H,elr),e(H,oM),e(oM,xFe),e(xFe,olr),e(oM,rlr),e(oM,zU),e(zU,tlr),e(oM,alr),e(H,nlr),e(H,rM),e(rM,$Fe),e($Fe,slr),e(rM,llr),e(rM,QU),e(QU,ilr),e(rM,dlr),e(H,clr),e(H,tM),e(tM,kFe),e(kFe,mlr),e(tM,flr),e(tM,WU),e(WU,glr),e(tM,hlr),e(H,ulr),e(H,aM),e(aM,SFe),e(SFe,plr),e(aM,_lr),e(aM,UU),e(UU,blr),e(aM,vlr),e(H,Flr),e(H,nM),e(nM,RFe),e(RFe,Tlr),e(nM,Mlr),e(nM,HU),e(HU,Elr),e(nM,Clr),e(H,wlr),e(H,sM),e(sM,PFe),e(PFe,Alr),e(sM,ylr),e(sM,JU),e(JU,Llr),e(sM,xlr),e(H,$lr),e(H,lM),e(lM,BFe),e(BFe,klr),e(lM,Slr),e(lM,YU),e(YU,Rlr),e(lM,Plr),e(H,Blr),e(H,iM),e(iM,IFe),e(IFe,Ilr),e(iM,Nlr),e(iM,KU),e(KU,qlr),e(iM,jlr),e(H,Dlr),e(H,dM),e(dM,NFe),e(NFe,Glr),e(dM,Olr),e(dM,ZU),e(ZU,Vlr),e(dM,Xlr),e(H,zlr),e(H,cM),e(cM,qFe),e(qFe,Qlr),e(cM,Wlr),e(cM,eH),e(eH,Ulr),e(cM,Hlr),e(H,Jlr),e(H,mM),e(mM,jFe),e(jFe,Ylr),e(mM,Klr),e(mM,oH),e(oH,Zlr),e(mM,eir),e(H,oir),e(H,fM),e(fM,DFe),e(DFe,rir),e(fM,tir),e(fM,rH),e(rH,air),e(fM,nir),e(H,sir),e(H,gM),e(gM,GFe),e(GFe,lir),e(gM,iir),e(gM,tH),e(tH,dir),e(gM,cir),e(H,mir),e(H,hM),e(hM,OFe),e(OFe,fir),e(hM,gir),e(hM,aH),e(aH,hir),e(hM,uir),e(H,pir),e(H,uM),e(uM,VFe),e(VFe,_ir),e(uM,bir),e(uM,nH),e(nH,vir),e(uM,Fir),e(H,Tir),e(H,pM),e(pM,XFe),e(XFe,Mir),e(pM,Eir),e(pM,sH),e(sH,Cir),e(pM,wir),e(H,Air),e(H,_M),e(_M,zFe),e(zFe,yir),e(_M,Lir),e(_M,lH),e(lH,xir),e(_M,$ir),e(H,kir),e(H,bM),e(bM,QFe),e(QFe,Sir),e(bM,Rir),e(bM,iH),e(iH,Pir),e(bM,Bir),e(H,Iir),e(H,vM),e(vM,WFe),e(WFe,Nir),e(vM,qir),e(vM,dH),e(dH,jir),e(vM,Dir),e(H,Gir),e(H,FM),e(FM,UFe),e(UFe,Oir),e(FM,Vir),e(FM,cH),e(cH,Xir),e(FM,zir),e(H,Qir),e(H,TM),e(TM,HFe),e(HFe,Wir),e(TM,Uir),e(TM,mH),e(mH,Hir),e(TM,Jir),e(H,Yir),e(H,MM),e(MM,JFe),e(JFe,Kir),e(MM,Zir),e(MM,fH),e(fH,edr),e(MM,odr),e(H,rdr),e(H,EM),e(EM,YFe),e(YFe,tdr),e(EM,adr),e(EM,gH),e(gH,ndr),e(EM,sdr),e(H,ldr),e(H,CM),e(CM,KFe),e(KFe,idr),e(CM,ddr),e(CM,hH),e(hH,cdr),e(CM,mdr),e(H,fdr),e(H,wM),e(wM,ZFe),e(ZFe,gdr),e(wM,hdr),e(wM,uH),e(uH,udr),e(wM,pdr),e(H,_dr),e(H,AM),e(AM,eTe),e(eTe,bdr),e(AM,vdr),e(AM,pH),e(pH,Fdr),e(AM,Tdr),e(so,Mdr),e(so,yM),e(yM,Edr),e(yM,oTe),e(oTe,Cdr),e(yM,wdr),e(yM,rTe),e(rTe,Adr),e(so,ydr),M(LM,so,null),b(m,JJe,_),b(m,Gd,_),e(Gd,xM),e(xM,tTe),M(Cx,tTe,null),e(Gd,Ldr),e(Gd,aTe),e(aTe,xdr),b(m,YJe,_),b(m,Vo,_),M(wx,Vo,null),e(Vo,$dr),e(Vo,Od),e(Od,kdr),e(Od,_H),e(_H,Sdr),e(Od,Rdr),e(Od,bH),e(bH,Pdr),e(Od,Bdr),e(Vo,Idr),e(Vo,Ax),e(Ax,Ndr),e(Ax,nTe),e(nTe,qdr),e(Ax,jdr),e(Vo,Ddr),e(Vo,wt),M(yx,wt,null),e(wt,Gdr),e(wt,sTe),e(sTe,Odr),e(wt,Vdr),e(wt,Vd),e(Vd,Xdr),e(Vd,lTe),e(lTe,zdr),e(Vd,Qdr),e(Vd,vH),e(vH,Wdr),e(Vd,Udr),e(wt,Hdr),M($M,wt,null),e(Vo,Jdr),e(Vo,lo),M(Lx,lo,null),e(lo,Ydr),e(lo,iTe),e(iTe,Kdr),e(lo,Zdr),e(lo,nn),e(nn,ecr),e(nn,dTe),e(dTe,ocr),e(nn,rcr),e(nn,cTe),e(cTe,tcr),e(nn,acr),e(nn,mTe),e(mTe,ncr),e(nn,scr),e(lo,lcr),e(lo,V),e(V,kM),e(kM,fTe),e(fTe,icr),e(kM,dcr),e(kM,FH),e(FH,ccr),e(kM,mcr),e(V,fcr),e(V,SM),e(SM,gTe),e(gTe,gcr),e(SM,hcr),e(SM,TH),e(TH,ucr),e(SM,pcr),e(V,_cr),e(V,RM),e(RM,hTe),e(hTe,bcr),e(RM,vcr),e(RM,MH),e(MH,Fcr),e(RM,Tcr),e(V,Mcr),e(V,PM),e(PM,uTe),e(uTe,Ecr),e(PM,Ccr),e(PM,EH),e(EH,wcr),e(PM,Acr),e(V,ycr),e(V,BM),e(BM,pTe),e(pTe,Lcr),e(BM,xcr),e(BM,CH),e(CH,$cr),e(BM,kcr),e(V,Scr),e(V,IM),e(IM,_Te),e(_Te,Rcr),e(IM,Pcr),e(IM,wH),e(wH,Bcr),e(IM,Icr),e(V,Ncr),e(V,NM),e(NM,bTe),e(bTe,qcr),e(NM,jcr),e(NM,AH),e(AH,Dcr),e(NM,Gcr),e(V,Ocr),e(V,qM),e(qM,vTe),e(vTe,Vcr),e(qM,Xcr),e(qM,yH),e(yH,zcr),e(qM,Qcr),e(V,Wcr),e(V,jM),e(jM,FTe),e(FTe,Ucr),e(jM,Hcr),e(jM,LH),e(LH,Jcr),e(jM,Ycr),e(V,Kcr),e(V,DM),e(DM,TTe),e(TTe,Zcr),e(DM,emr),e(DM,xH),e(xH,omr),e(DM,rmr),e(V,tmr),e(V,GM),e(GM,MTe),e(MTe,amr),e(GM,nmr),e(GM,$H),e($H,smr),e(GM,lmr),e(V,imr),e(V,OM),e(OM,ETe),e(ETe,dmr),e(OM,cmr),e(OM,kH),e(kH,mmr),e(OM,fmr),e(V,gmr),e(V,VM),e(VM,CTe),e(CTe,hmr),e(VM,umr),e(VM,SH),e(SH,pmr),e(VM,_mr),e(V,bmr),e(V,XM),e(XM,wTe),e(wTe,vmr),e(XM,Fmr),e(XM,RH),e(RH,Tmr),e(XM,Mmr),e(V,Emr),e(V,zM),e(zM,ATe),e(ATe,Cmr),e(zM,wmr),e(zM,PH),e(PH,Amr),e(zM,ymr),e(V,Lmr),e(V,QM),e(QM,yTe),e(yTe,xmr),e(QM,$mr),e(QM,BH),e(BH,kmr),e(QM,Smr),e(V,Rmr),e(V,WM),e(WM,LTe),e(LTe,Pmr),e(WM,Bmr),e(WM,IH),e(IH,Imr),e(WM,Nmr),e(V,qmr),e(V,UM),e(UM,xTe),e(xTe,jmr),e(UM,Dmr),e(UM,NH),e(NH,Gmr),e(UM,Omr),e(V,Vmr),e(V,HM),e(HM,$Te),e($Te,Xmr),e(HM,zmr),e(HM,qH),e(qH,Qmr),e(HM,Wmr),e(V,Umr),e(V,JM),e(JM,kTe),e(kTe,Hmr),e(JM,Jmr),e(JM,jH),e(jH,Ymr),e(JM,Kmr),e(V,Zmr),e(V,YM),e(YM,STe),e(STe,efr),e(YM,ofr),e(YM,DH),e(DH,rfr),e(YM,tfr),e(V,afr),e(V,KM),e(KM,RTe),e(RTe,nfr),e(KM,sfr),e(KM,GH),e(GH,lfr),e(KM,ifr),e(V,dfr),e(V,ZM),e(ZM,PTe),e(PTe,cfr),e(ZM,mfr),e(ZM,OH),e(OH,ffr),e(ZM,gfr),e(V,hfr),e(V,eE),e(eE,BTe),e(BTe,ufr),e(eE,pfr),e(eE,VH),e(VH,_fr),e(eE,bfr),e(V,vfr),e(V,oE),e(oE,ITe),e(ITe,Ffr),e(oE,Tfr),e(oE,XH),e(XH,Mfr),e(oE,Efr),e(V,Cfr),e(V,rE),e(rE,NTe),e(NTe,wfr),e(rE,Afr),e(rE,zH),e(zH,yfr),e(rE,Lfr),e(V,xfr),e(V,tE),e(tE,qTe),e(qTe,$fr),e(tE,kfr),e(tE,QH),e(QH,Sfr),e(tE,Rfr),e(V,Pfr),e(V,aE),e(aE,jTe),e(jTe,Bfr),e(aE,Ifr),e(aE,WH),e(WH,Nfr),e(aE,qfr),e(V,jfr),e(V,nE),e(nE,DTe),e(DTe,Dfr),e(nE,Gfr),e(nE,UH),e(UH,Ofr),e(nE,Vfr),e(V,Xfr),e(V,sE),e(sE,GTe),e(GTe,zfr),e(sE,Qfr),e(sE,HH),e(HH,Wfr),e(sE,Ufr),e(V,Hfr),e(V,lE),e(lE,OTe),e(OTe,Jfr),e(lE,Yfr),e(lE,JH),e(JH,Kfr),e(lE,Zfr),e(V,egr),e(V,iE),e(iE,VTe),e(VTe,ogr),e(iE,rgr),e(iE,YH),e(YH,tgr),e(iE,agr),e(V,ngr),e(V,dE),e(dE,XTe),e(XTe,sgr),e(dE,lgr),e(dE,KH),e(KH,igr),e(dE,dgr),e(V,cgr),e(V,cE),e(cE,zTe),e(zTe,mgr),e(cE,fgr),e(cE,ZH),e(ZH,ggr),e(cE,hgr),e(V,ugr),e(V,mE),e(mE,QTe),e(QTe,pgr),e(mE,_gr),e(mE,eJ),e(eJ,bgr),e(mE,vgr),e(V,Fgr),e(V,fE),e(fE,WTe),e(WTe,Tgr),e(fE,Mgr),e(fE,oJ),e(oJ,Egr),e(fE,Cgr),e(V,wgr),e(V,gE),e(gE,UTe),e(UTe,Agr),e(gE,ygr),e(gE,rJ),e(rJ,Lgr),e(gE,xgr),e(V,$gr),e(V,hE),e(hE,HTe),e(HTe,kgr),e(hE,Sgr),e(hE,tJ),e(tJ,Rgr),e(hE,Pgr),e(V,Bgr),e(V,uE),e(uE,JTe),e(JTe,Igr),e(uE,Ngr),e(uE,aJ),e(aJ,qgr),e(uE,jgr),e(V,Dgr),e(V,pE),e(pE,YTe),e(YTe,Ggr),e(pE,Ogr),e(pE,nJ),e(nJ,Vgr),e(pE,Xgr),e(V,zgr),e(V,_E),e(_E,KTe),e(KTe,Qgr),e(_E,Wgr),e(_E,sJ),e(sJ,Ugr),e(_E,Hgr),e(V,Jgr),e(V,bE),e(bE,ZTe),e(ZTe,Ygr),e(bE,Kgr),e(bE,lJ),e(lJ,Zgr),e(bE,ehr),e(V,ohr),e(V,vE),e(vE,eMe),e(eMe,rhr),e(vE,thr),e(vE,iJ),e(iJ,ahr),e(vE,nhr),e(lo,shr),e(lo,FE),e(FE,lhr),e(FE,oMe),e(oMe,ihr),e(FE,dhr),e(FE,rMe),e(rMe,chr),e(lo,mhr),M(TE,lo,null),b(m,KJe,_),b(m,Xd,_),e(Xd,ME),e(ME,tMe),M(xx,tMe,null),e(Xd,fhr),e(Xd,aMe),e(aMe,ghr),b(m,ZJe,_),b(m,Xo,_),M($x,Xo,null),e(Xo,hhr),e(Xo,zd),e(zd,uhr),e(zd,dJ),e(dJ,phr),e(zd,_hr),e(zd,cJ),e(cJ,bhr),e(zd,vhr),e(Xo,Fhr),e(Xo,kx),e(kx,Thr),e(kx,nMe),e(nMe,Mhr),e(kx,Ehr),e(Xo,Chr),e(Xo,At),M(Sx,At,null),e(At,whr),e(At,sMe),e(sMe,Ahr),e(At,yhr),e(At,Qd),e(Qd,Lhr),e(Qd,lMe),e(lMe,xhr),e(Qd,$hr),e(Qd,mJ),e(mJ,khr),e(Qd,Shr),e(At,Rhr),M(EE,At,null),e(Xo,Phr),e(Xo,io),M(Rx,io,null),e(io,Bhr),e(io,iMe),e(iMe,Ihr),e(io,Nhr),e(io,sn),e(sn,qhr),e(sn,dMe),e(dMe,jhr),e(sn,Dhr),e(sn,cMe),e(cMe,Ghr),e(sn,Ohr),e(sn,mMe),e(mMe,Vhr),e(sn,Xhr),e(io,zhr),e(io,fMe),e(fMe,CE),e(CE,gMe),e(gMe,Qhr),e(CE,Whr),e(CE,fJ),e(fJ,Uhr),e(CE,Hhr),e(io,Jhr),e(io,wE),e(wE,Yhr),e(wE,hMe),e(hMe,Khr),e(wE,Zhr),e(wE,uMe),e(uMe,eur),e(io,our),M(AE,io,null),b(m,eYe,_),b(m,Wd,_),e(Wd,yE),e(yE,pMe),M(Px,pMe,null),e(Wd,rur),e(Wd,_Me),e(_Me,tur),b(m,oYe,_),b(m,zo,_),M(Bx,zo,null),e(zo,aur),e(zo,Ud),e(Ud,nur),e(Ud,gJ),e(gJ,sur),e(Ud,lur),e(Ud,hJ),e(hJ,iur),e(Ud,dur),e(zo,cur),e(zo,Ix),e(Ix,mur),e(Ix,bMe),e(bMe,fur),e(Ix,gur),e(zo,hur),e(zo,yt),M(Nx,yt,null),e(yt,uur),e(yt,vMe),e(vMe,pur),e(yt,_ur),e(yt,Hd),e(Hd,bur),e(Hd,FMe),e(FMe,vur),e(Hd,Fur),e(Hd,uJ),e(uJ,Tur),e(Hd,Mur),e(yt,Eur),M(LE,yt,null),e(zo,Cur),e(zo,co),M(qx,co,null),e(co,wur),e(co,TMe),e(TMe,Aur),e(co,yur),e(co,ln),e(ln,Lur),e(ln,MMe),e(MMe,xur),e(ln,$ur),e(ln,EMe),e(EMe,kur),e(ln,Sur),e(ln,CMe),e(CMe,Rur),e(ln,Pur),e(co,Bur),e(co,Jd),e(Jd,xE),e(xE,wMe),e(wMe,Iur),e(xE,Nur),e(xE,pJ),e(pJ,qur),e(xE,jur),e(Jd,Dur),e(Jd,$E),e($E,AMe),e(AMe,Gur),e($E,Our),e($E,_J),e(_J,Vur),e($E,Xur),e(Jd,zur),e(Jd,kE),e(kE,yMe),e(yMe,Qur),e(kE,Wur),e(kE,bJ),e(bJ,Uur),e(kE,Hur),e(co,Jur),e(co,SE),e(SE,Yur),e(SE,LMe),e(LMe,Kur),e(SE,Zur),e(SE,xMe),e(xMe,epr),e(co,opr),M(RE,co,null),b(m,rYe,_),b(m,Yd,_),e(Yd,PE),e(PE,$Me),M(jx,$Me,null),e(Yd,rpr),e(Yd,kMe),e(kMe,tpr),b(m,tYe,_),b(m,Qo,_),M(Dx,Qo,null),e(Qo,apr),e(Qo,Kd),e(Kd,npr),e(Kd,vJ),e(vJ,spr),e(Kd,lpr),e(Kd,FJ),e(FJ,ipr),e(Kd,dpr),e(Qo,cpr),e(Qo,Gx),e(Gx,mpr),e(Gx,SMe),e(SMe,fpr),e(Gx,gpr),e(Qo,hpr),e(Qo,Lt),M(Ox,Lt,null),e(Lt,upr),e(Lt,RMe),e(RMe,ppr),e(Lt,_pr),e(Lt,Zd),e(Zd,bpr),e(Zd,PMe),e(PMe,vpr),e(Zd,Fpr),e(Zd,TJ),e(TJ,Tpr),e(Zd,Mpr),e(Lt,Epr),M(BE,Lt,null),e(Qo,Cpr),e(Qo,mo),M(Vx,mo,null),e(mo,wpr),e(mo,BMe),e(BMe,Apr),e(mo,ypr),e(mo,dn),e(dn,Lpr),e(dn,IMe),e(IMe,xpr),e(dn,$pr),e(dn,NMe),e(NMe,kpr),e(dn,Spr),e(dn,qMe),e(qMe,Rpr),e(dn,Ppr),e(mo,Bpr),e(mo,be),e(be,IE),e(IE,jMe),e(jMe,Ipr),e(IE,Npr),e(IE,MJ),e(MJ,qpr),e(IE,jpr),e(be,Dpr),e(be,NE),e(NE,DMe),e(DMe,Gpr),e(NE,Opr),e(NE,EJ),e(EJ,Vpr),e(NE,Xpr),e(be,zpr),e(be,qE),e(qE,GMe),e(GMe,Qpr),e(qE,Wpr),e(qE,CJ),e(CJ,Upr),e(qE,Hpr),e(be,Jpr),e(be,jE),e(jE,OMe),e(OMe,Ypr),e(jE,Kpr),e(jE,wJ),e(wJ,Zpr),e(jE,e_r),e(be,o_r),e(be,ul),e(ul,VMe),e(VMe,r_r),e(ul,t_r),e(ul,AJ),e(AJ,a_r),e(ul,n_r),e(ul,yJ),e(yJ,s_r),e(ul,l_r),e(be,i_r),e(be,DE),e(DE,XMe),e(XMe,d_r),e(DE,c_r),e(DE,LJ),e(LJ,m_r),e(DE,f_r),e(be,g_r),e(be,pl),e(pl,zMe),e(zMe,h_r),e(pl,u_r),e(pl,xJ),e(xJ,p_r),e(pl,__r),e(pl,$J),e($J,b_r),e(pl,v_r),e(be,F_r),e(be,GE),e(GE,QMe),e(QMe,T_r),e(GE,M_r),e(GE,kJ),e(kJ,E_r),e(GE,C_r),e(be,w_r),e(be,xt),e(xt,WMe),e(WMe,A_r),e(xt,y_r),e(xt,SJ),e(SJ,L_r),e(xt,x_r),e(xt,RJ),e(RJ,$_r),e(xt,k_r),e(xt,PJ),e(PJ,S_r),e(xt,R_r),e(be,P_r),e(be,OE),e(OE,UMe),e(UMe,B_r),e(OE,I_r),e(OE,BJ),e(BJ,N_r),e(OE,q_r),e(be,j_r),e(be,VE),e(VE,HMe),e(HMe,D_r),e(VE,G_r),e(VE,IJ),e(IJ,O_r),e(VE,V_r),e(be,X_r),e(be,XE),e(XE,JMe),e(JMe,z_r),e(XE,Q_r),e(XE,NJ),e(NJ,W_r),e(XE,U_r),e(be,H_r),e(be,zE),e(zE,YMe),e(YMe,J_r),e(zE,Y_r),e(zE,qJ),e(qJ,K_r),e(zE,Z_r),e(be,ebr),e(be,QE),e(QE,KMe),e(KMe,obr),e(QE,rbr),e(QE,jJ),e(jJ,tbr),e(QE,abr),e(be,nbr),e(be,WE),e(WE,ZMe),e(ZMe,sbr),e(WE,lbr),e(WE,DJ),e(DJ,ibr),e(WE,dbr),e(be,cbr),e(be,UE),e(UE,eEe),e(eEe,mbr),e(UE,fbr),e(UE,GJ),e(GJ,gbr),e(UE,hbr),e(be,ubr),e(be,HE),e(HE,oEe),e(oEe,pbr),e(HE,_br),e(HE,OJ),e(OJ,bbr),e(HE,vbr),e(mo,Fbr),e(mo,JE),e(JE,Tbr),e(JE,rEe),e(rEe,Mbr),e(JE,Ebr),e(JE,tEe),e(tEe,Cbr),e(mo,wbr),M(YE,mo,null),b(m,aYe,_),b(m,ec,_),e(ec,KE),e(KE,aEe),M(Xx,aEe,null),e(ec,Abr),e(ec,nEe),e(nEe,ybr),b(m,nYe,_),b(m,Wo,_),M(zx,Wo,null),e(Wo,Lbr),e(Wo,oc),e(oc,xbr),e(oc,VJ),e(VJ,$br),e(oc,kbr),e(oc,XJ),e(XJ,Sbr),e(oc,Rbr),e(Wo,Pbr),e(Wo,Qx),e(Qx,Bbr),e(Qx,sEe),e(sEe,Ibr),e(Qx,Nbr),e(Wo,qbr),e(Wo,$t),M(Wx,$t,null),e($t,jbr),e($t,lEe),e(lEe,Dbr),e($t,Gbr),e($t,rc),e(rc,Obr),e(rc,iEe),e(iEe,Vbr),e(rc,Xbr),e(rc,zJ),e(zJ,zbr),e(rc,Qbr),e($t,Wbr),M(ZE,$t,null),e(Wo,Ubr),e(Wo,fo),M(Ux,fo,null),e(fo,Hbr),e(fo,dEe),e(dEe,Jbr),e(fo,Ybr),e(fo,cn),e(cn,Kbr),e(cn,cEe),e(cEe,Zbr),e(cn,e2r),e(cn,mEe),e(mEe,o2r),e(cn,r2r),e(cn,fEe),e(fEe,t2r),e(cn,a2r),e(fo,n2r),e(fo,gEe),e(gEe,e4),e(e4,hEe),e(hEe,s2r),e(e4,l2r),e(e4,QJ),e(QJ,i2r),e(e4,d2r),e(fo,c2r),e(fo,o4),e(o4,m2r),e(o4,uEe),e(uEe,f2r),e(o4,g2r),e(o4,pEe),e(pEe,h2r),e(fo,u2r),M(r4,fo,null),b(m,sYe,_),b(m,tc,_),e(tc,t4),e(t4,_Ee),M(Hx,_Ee,null),e(tc,p2r),e(tc,bEe),e(bEe,_2r),b(m,lYe,_),b(m,Uo,_),M(Jx,Uo,null),e(Uo,b2r),e(Uo,ac),e(ac,v2r),e(ac,WJ),e(WJ,F2r),e(ac,T2r),e(ac,UJ),e(UJ,M2r),e(ac,E2r),e(Uo,C2r),e(Uo,Yx),e(Yx,w2r),e(Yx,vEe),e(vEe,A2r),e(Yx,y2r),e(Uo,L2r),e(Uo,kt),M(Kx,kt,null),e(kt,x2r),e(kt,FEe),e(FEe,$2r),e(kt,k2r),e(kt,nc),e(nc,S2r),e(nc,TEe),e(TEe,R2r),e(nc,P2r),e(nc,HJ),e(HJ,B2r),e(nc,I2r),e(kt,N2r),M(a4,kt,null),e(Uo,q2r),e(Uo,go),M(Zx,go,null),e(go,j2r),e(go,MEe),e(MEe,D2r),e(go,G2r),e(go,mn),e(mn,O2r),e(mn,EEe),e(EEe,V2r),e(mn,X2r),e(mn,CEe),e(CEe,z2r),e(mn,Q2r),e(mn,wEe),e(wEe,W2r),e(mn,U2r),e(go,H2r),e(go,AEe),e(AEe,n4),e(n4,yEe),e(yEe,J2r),e(n4,Y2r),e(n4,JJ),e(JJ,K2r),e(n4,Z2r),e(go,evr),e(go,s4),e(s4,ovr),e(s4,LEe),e(LEe,rvr),e(s4,tvr),e(s4,xEe),e(xEe,avr),e(go,nvr),M(l4,go,null),b(m,iYe,_),b(m,sc,_),e(sc,i4),e(i4,$Ee),M(e$,$Ee,null),e(sc,svr),e(sc,kEe),e(kEe,lvr),b(m,dYe,_),b(m,Ho,_),M(o$,Ho,null),e(Ho,ivr),e(Ho,lc),e(lc,dvr),e(lc,YJ),e(YJ,cvr),e(lc,mvr),e(lc,KJ),e(KJ,fvr),e(lc,gvr),e(Ho,hvr),e(Ho,r$),e(r$,uvr),e(r$,SEe),e(SEe,pvr),e(r$,_vr),e(Ho,bvr),e(Ho,St),M(t$,St,null),e(St,vvr),e(St,REe),e(REe,Fvr),e(St,Tvr),e(St,ic),e(ic,Mvr),e(ic,PEe),e(PEe,Evr),e(ic,Cvr),e(ic,ZJ),e(ZJ,wvr),e(ic,Avr),e(St,yvr),M(d4,St,null),e(Ho,Lvr),e(Ho,ho),M(a$,ho,null),e(ho,xvr),e(ho,BEe),e(BEe,$vr),e(ho,kvr),e(ho,fn),e(fn,Svr),e(fn,IEe),e(IEe,Rvr),e(fn,Pvr),e(fn,NEe),e(NEe,Bvr),e(fn,Ivr),e(fn,qEe),e(qEe,Nvr),e(fn,qvr),e(ho,jvr),e(ho,jEe),e(jEe,c4),e(c4,DEe),e(DEe,Dvr),e(c4,Gvr),e(c4,eY),e(eY,Ovr),e(c4,Vvr),e(ho,Xvr),e(ho,m4),e(m4,zvr),e(m4,GEe),e(GEe,Qvr),e(m4,Wvr),e(m4,OEe),e(OEe,Uvr),e(ho,Hvr),M(f4,ho,null),b(m,cYe,_),b(m,dc,_),e(dc,g4),e(g4,VEe),M(n$,VEe,null),e(dc,Jvr),e(dc,XEe),e(XEe,Yvr),b(m,mYe,_),b(m,Jo,_),M(s$,Jo,null),e(Jo,Kvr),e(Jo,cc),e(cc,Zvr),e(cc,oY),e(oY,e1r),e(cc,o1r),e(cc,rY),e(rY,r1r),e(cc,t1r),e(Jo,a1r),e(Jo,l$),e(l$,n1r),e(l$,zEe),e(zEe,s1r),e(l$,l1r),e(Jo,i1r),e(Jo,Rt),M(i$,Rt,null),e(Rt,d1r),e(Rt,QEe),e(QEe,c1r),e(Rt,m1r),e(Rt,mc),e(mc,f1r),e(mc,WEe),e(WEe,g1r),e(mc,h1r),e(mc,tY),e(tY,u1r),e(mc,p1r),e(Rt,_1r),M(h4,Rt,null),e(Jo,b1r),e(Jo,uo),M(d$,uo,null),e(uo,v1r),e(uo,UEe),e(UEe,F1r),e(uo,T1r),e(uo,gn),e(gn,M1r),e(gn,HEe),e(HEe,E1r),e(gn,C1r),e(gn,JEe),e(JEe,w1r),e(gn,A1r),e(gn,YEe),e(YEe,y1r),e(gn,L1r),e(uo,x1r),e(uo,Pe),e(Pe,u4),e(u4,KEe),e(KEe,$1r),e(u4,k1r),e(u4,aY),e(aY,S1r),e(u4,R1r),e(Pe,P1r),e(Pe,p4),e(p4,ZEe),e(ZEe,B1r),e(p4,I1r),e(p4,nY),e(nY,N1r),e(p4,q1r),e(Pe,j1r),e(Pe,_4),e(_4,e4e),e(e4e,D1r),e(_4,G1r),e(_4,sY),e(sY,O1r),e(_4,V1r),e(Pe,X1r),e(Pe,b4),e(b4,o4e),e(o4e,z1r),e(b4,Q1r),e(b4,lY),e(lY,W1r),e(b4,U1r),e(Pe,H1r),e(Pe,v4),e(v4,r4e),e(r4e,J1r),e(v4,Y1r),e(v4,iY),e(iY,K1r),e(v4,Z1r),e(Pe,eFr),e(Pe,F4),e(F4,t4e),e(t4e,oFr),e(F4,rFr),e(F4,dY),e(dY,tFr),e(F4,aFr),e(Pe,nFr),e(Pe,T4),e(T4,a4e),e(a4e,sFr),e(T4,lFr),e(T4,cY),e(cY,iFr),e(T4,dFr),e(Pe,cFr),e(Pe,M4),e(M4,n4e),e(n4e,mFr),e(M4,fFr),e(M4,mY),e(mY,gFr),e(M4,hFr),e(Pe,uFr),e(Pe,E4),e(E4,s4e),e(s4e,pFr),e(E4,_Fr),e(E4,fY),e(fY,bFr),e(E4,vFr),e(uo,FFr),e(uo,C4),e(C4,TFr),e(C4,l4e),e(l4e,MFr),e(C4,EFr),e(C4,i4e),e(i4e,CFr),e(uo,wFr),M(w4,uo,null),b(m,fYe,_),b(m,fc,_),e(fc,A4),e(A4,d4e),M(c$,d4e,null),e(fc,AFr),e(fc,c4e),e(c4e,yFr),b(m,gYe,_),b(m,Yo,_),M(m$,Yo,null),e(Yo,LFr),e(Yo,gc),e(gc,xFr),e(gc,gY),e(gY,$Fr),e(gc,kFr),e(gc,hY),e(hY,SFr),e(gc,RFr),e(Yo,PFr),e(Yo,f$),e(f$,BFr),e(f$,m4e),e(m4e,IFr),e(f$,NFr),e(Yo,qFr),e(Yo,Pt),M(g$,Pt,null),e(Pt,jFr),e(Pt,f4e),e(f4e,DFr),e(Pt,GFr),e(Pt,hc),e(hc,OFr),e(hc,g4e),e(g4e,VFr),e(hc,XFr),e(hc,uY),e(uY,zFr),e(hc,QFr),e(Pt,WFr),M(y4,Pt,null),e(Yo,UFr),e(Yo,po),M(h$,po,null),e(po,HFr),e(po,h4e),e(h4e,JFr),e(po,YFr),e(po,hn),e(hn,KFr),e(hn,u4e),e(u4e,ZFr),e(hn,eTr),e(hn,p4e),e(p4e,oTr),e(hn,rTr),e(hn,_4e),e(_4e,tTr),e(hn,aTr),e(po,nTr),e(po,ct),e(ct,L4),e(L4,b4e),e(b4e,sTr),e(L4,lTr),e(L4,pY),e(pY,iTr),e(L4,dTr),e(ct,cTr),e(ct,x4),e(x4,v4e),e(v4e,mTr),e(x4,fTr),e(x4,_Y),e(_Y,gTr),e(x4,hTr),e(ct,uTr),e(ct,$4),e($4,F4e),e(F4e,pTr),e($4,_Tr),e($4,bY),e(bY,bTr),e($4,vTr),e(ct,FTr),e(ct,k4),e(k4,T4e),e(T4e,TTr),e(k4,MTr),e(k4,vY),e(vY,ETr),e(k4,CTr),e(ct,wTr),e(ct,S4),e(S4,M4e),e(M4e,ATr),e(S4,yTr),e(S4,FY),e(FY,LTr),e(S4,xTr),e(po,$Tr),e(po,R4),e(R4,kTr),e(R4,E4e),e(E4e,STr),e(R4,RTr),e(R4,C4e),e(C4e,PTr),e(po,BTr),M(P4,po,null),b(m,hYe,_),b(m,uc,_),e(uc,B4),e(B4,w4e),M(u$,w4e,null),e(uc,ITr),e(uc,A4e),e(A4e,NTr),b(m,uYe,_),b(m,Ko,_),M(p$,Ko,null),e(Ko,qTr),e(Ko,pc),e(pc,jTr),e(pc,TY),e(TY,DTr),e(pc,GTr),e(pc,MY),e(MY,OTr),e(pc,VTr),e(Ko,XTr),e(Ko,_$),e(_$,zTr),e(_$,y4e),e(y4e,QTr),e(_$,WTr),e(Ko,UTr),e(Ko,Bt),M(b$,Bt,null),e(Bt,HTr),e(Bt,L4e),e(L4e,JTr),e(Bt,YTr),e(Bt,_c),e(_c,KTr),e(_c,x4e),e(x4e,ZTr),e(_c,eMr),e(_c,EY),e(EY,oMr),e(_c,rMr),e(Bt,tMr),M(I4,Bt,null),e(Ko,aMr),e(Ko,_o),M(v$,_o,null),e(_o,nMr),e(_o,$4e),e($4e,sMr),e(_o,lMr),e(_o,un),e(un,iMr),e(un,k4e),e(k4e,dMr),e(un,cMr),e(un,S4e),e(S4e,mMr),e(un,fMr),e(un,R4e),e(R4e,gMr),e(un,hMr),e(_o,uMr),e(_o,ye),e(ye,N4),e(N4,P4e),e(P4e,pMr),e(N4,_Mr),e(N4,CY),e(CY,bMr),e(N4,vMr),e(ye,FMr),e(ye,q4),e(q4,B4e),e(B4e,TMr),e(q4,MMr),e(q4,wY),e(wY,EMr),e(q4,CMr),e(ye,wMr),e(ye,j4),e(j4,I4e),e(I4e,AMr),e(j4,yMr),e(j4,AY),e(AY,LMr),e(j4,xMr),e(ye,$Mr),e(ye,D4),e(D4,N4e),e(N4e,kMr),e(D4,SMr),e(D4,yY),e(yY,RMr),e(D4,PMr),e(ye,BMr),e(ye,G4),e(G4,q4e),e(q4e,IMr),e(G4,NMr),e(G4,LY),e(LY,qMr),e(G4,jMr),e(ye,DMr),e(ye,O4),e(O4,j4e),e(j4e,GMr),e(O4,OMr),e(O4,xY),e(xY,VMr),e(O4,XMr),e(ye,zMr),e(ye,V4),e(V4,D4e),e(D4e,QMr),e(V4,WMr),e(V4,$Y),e($Y,UMr),e(V4,HMr),e(ye,JMr),e(ye,X4),e(X4,G4e),e(G4e,YMr),e(X4,KMr),e(X4,kY),e(kY,ZMr),e(X4,eEr),e(ye,oEr),e(ye,z4),e(z4,O4e),e(O4e,rEr),e(z4,tEr),e(z4,SY),e(SY,aEr),e(z4,nEr),e(ye,sEr),e(ye,Q4),e(Q4,V4e),e(V4e,lEr),e(Q4,iEr),e(Q4,RY),e(RY,dEr),e(Q4,cEr),e(_o,mEr),e(_o,W4),e(W4,fEr),e(W4,X4e),e(X4e,gEr),e(W4,hEr),e(W4,z4e),e(z4e,uEr),e(_o,pEr),M(U4,_o,null),b(m,pYe,_),b(m,bc,_),e(bc,H4),e(H4,Q4e),M(F$,Q4e,null),e(bc,_Er),e(bc,W4e),e(W4e,bEr),b(m,_Ye,_),b(m,Zo,_),M(T$,Zo,null),e(Zo,vEr),e(Zo,vc),e(vc,FEr),e(vc,PY),e(PY,TEr),e(vc,MEr),e(vc,BY),e(BY,EEr),e(vc,CEr),e(Zo,wEr),e(Zo,M$),e(M$,AEr),e(M$,U4e),e(U4e,yEr),e(M$,LEr),e(Zo,xEr),e(Zo,It),M(E$,It,null),e(It,$Er),e(It,H4e),e(H4e,kEr),e(It,SEr),e(It,Fc),e(Fc,REr),e(Fc,J4e),e(J4e,PEr),e(Fc,BEr),e(Fc,IY),e(IY,IEr),e(Fc,NEr),e(It,qEr),M(J4,It,null),e(Zo,jEr),e(Zo,bo),M(C$,bo,null),e(bo,DEr),e(bo,Y4e),e(Y4e,GEr),e(bo,OEr),e(bo,pn),e(pn,VEr),e(pn,K4e),e(K4e,XEr),e(pn,zEr),e(pn,Z4e),e(Z4e,QEr),e(pn,WEr),e(pn,eCe),e(eCe,UEr),e(pn,HEr),e(bo,JEr),e(bo,w$),e(w$,Y4),e(Y4,oCe),e(oCe,YEr),e(Y4,KEr),e(Y4,NY),e(NY,ZEr),e(Y4,e4r),e(w$,o4r),e(w$,K4),e(K4,rCe),e(rCe,r4r),e(K4,t4r),e(K4,qY),e(qY,a4r),e(K4,n4r),e(bo,s4r),e(bo,Z4),e(Z4,l4r),e(Z4,tCe),e(tCe,i4r),e(Z4,d4r),e(Z4,aCe),e(aCe,c4r),e(bo,m4r),M(eC,bo,null),b(m,bYe,_),b(m,Tc,_),e(Tc,oC),e(oC,nCe),M(A$,nCe,null),e(Tc,f4r),e(Tc,sCe),e(sCe,g4r),b(m,vYe,_),b(m,er,_),M(y$,er,null),e(er,h4r),e(er,Mc),e(Mc,u4r),e(Mc,jY),e(jY,p4r),e(Mc,_4r),e(Mc,DY),e(DY,b4r),e(Mc,v4r),e(er,F4r),e(er,L$),e(L$,T4r),e(L$,lCe),e(lCe,M4r),e(L$,E4r),e(er,C4r),e(er,Nt),M(x$,Nt,null),e(Nt,w4r),e(Nt,iCe),e(iCe,A4r),e(Nt,y4r),e(Nt,Ec),e(Ec,L4r),e(Ec,dCe),e(dCe,x4r),e(Ec,$4r),e(Ec,GY),e(GY,k4r),e(Ec,S4r),e(Nt,R4r),M(rC,Nt,null),e(er,P4r),e(er,vo),M($$,vo,null),e(vo,B4r),e(vo,cCe),e(cCe,I4r),e(vo,N4r),e(vo,_n),e(_n,q4r),e(_n,mCe),e(mCe,j4r),e(_n,D4r),e(_n,fCe),e(fCe,G4r),e(_n,O4r),e(_n,gCe),e(gCe,V4r),e(_n,X4r),e(vo,z4r),e(vo,mt),e(mt,tC),e(tC,hCe),e(hCe,Q4r),e(tC,W4r),e(tC,OY),e(OY,U4r),e(tC,H4r),e(mt,J4r),e(mt,aC),e(aC,uCe),e(uCe,Y4r),e(aC,K4r),e(aC,VY),e(VY,Z4r),e(aC,eCr),e(mt,oCr),e(mt,nC),e(nC,pCe),e(pCe,rCr),e(nC,tCr),e(nC,XY),e(XY,aCr),e(nC,nCr),e(mt,sCr),e(mt,sC),e(sC,_Ce),e(_Ce,lCr),e(sC,iCr),e(sC,zY),e(zY,dCr),e(sC,cCr),e(mt,mCr),e(mt,lC),e(lC,bCe),e(bCe,fCr),e(lC,gCr),e(lC,QY),e(QY,hCr),e(lC,uCr),e(vo,pCr),e(vo,iC),e(iC,_Cr),e(iC,vCe),e(vCe,bCr),e(iC,vCr),e(iC,FCe),e(FCe,FCr),e(vo,TCr),M(dC,vo,null),b(m,FYe,_),b(m,Cc,_),e(Cc,cC),e(cC,TCe),M(k$,TCe,null),e(Cc,MCr),e(Cc,MCe),e(MCe,ECr),b(m,TYe,_),b(m,or,_),M(S$,or,null),e(or,CCr),e(or,wc),e(wc,wCr),e(wc,WY),e(WY,ACr),e(wc,yCr),e(wc,UY),e(UY,LCr),e(wc,xCr),e(or,$Cr),e(or,R$),e(R$,kCr),e(R$,ECe),e(ECe,SCr),e(R$,RCr),e(or,PCr),e(or,qt),M(P$,qt,null),e(qt,BCr),e(qt,CCe),e(CCe,ICr),e(qt,NCr),e(qt,Ac),e(Ac,qCr),e(Ac,wCe),e(wCe,jCr),e(Ac,DCr),e(Ac,HY),e(HY,GCr),e(Ac,OCr),e(qt,VCr),M(mC,qt,null),e(or,XCr),e(or,Fo),M(B$,Fo,null),e(Fo,zCr),e(Fo,ACe),e(ACe,QCr),e(Fo,WCr),e(Fo,bn),e(bn,UCr),e(bn,yCe),e(yCe,HCr),e(bn,JCr),e(bn,LCe),e(LCe,YCr),e(bn,KCr),e(bn,xCe),e(xCe,ZCr),e(bn,e3r),e(Fo,o3r),e(Fo,vn),e(vn,fC),e(fC,$Ce),e($Ce,r3r),e(fC,t3r),e(fC,JY),e(JY,a3r),e(fC,n3r),e(vn,s3r),e(vn,gC),e(gC,kCe),e(kCe,l3r),e(gC,i3r),e(gC,YY),e(YY,d3r),e(gC,c3r),e(vn,m3r),e(vn,hC),e(hC,SCe),e(SCe,f3r),e(hC,g3r),e(hC,KY),e(KY,h3r),e(hC,u3r),e(vn,p3r),e(vn,uC),e(uC,RCe),e(RCe,_3r),e(uC,b3r),e(uC,ZY),e(ZY,v3r),e(uC,F3r),e(Fo,T3r),e(Fo,pC),e(pC,M3r),e(pC,PCe),e(PCe,E3r),e(pC,C3r),e(pC,BCe),e(BCe,w3r),e(Fo,A3r),M(_C,Fo,null),b(m,MYe,_),b(m,yc,_),e(yc,bC),e(bC,ICe),M(I$,ICe,null),e(yc,y3r),e(yc,NCe),e(NCe,L3r),b(m,EYe,_),b(m,rr,_),M(N$,rr,null),e(rr,x3r),e(rr,Lc),e(Lc,$3r),e(Lc,eK),e(eK,k3r),e(Lc,S3r),e(Lc,oK),e(oK,R3r),e(Lc,P3r),e(rr,B3r),e(rr,q$),e(q$,I3r),e(q$,qCe),e(qCe,N3r),e(q$,q3r),e(rr,j3r),e(rr,jt),M(j$,jt,null),e(jt,D3r),e(jt,jCe),e(jCe,G3r),e(jt,O3r),e(jt,xc),e(xc,V3r),e(xc,DCe),e(DCe,X3r),e(xc,z3r),e(xc,rK),e(rK,Q3r),e(xc,W3r),e(jt,U3r),M(vC,jt,null),e(rr,H3r),e(rr,To),M(D$,To,null),e(To,J3r),e(To,GCe),e(GCe,Y3r),e(To,K3r),e(To,Fn),e(Fn,Z3r),e(Fn,OCe),e(OCe,e5r),e(Fn,o5r),e(Fn,VCe),e(VCe,r5r),e(Fn,t5r),e(Fn,XCe),e(XCe,a5r),e(Fn,n5r),e(To,s5r),e(To,G$),e(G$,FC),e(FC,zCe),e(zCe,l5r),e(FC,i5r),e(FC,tK),e(tK,d5r),e(FC,c5r),e(G$,m5r),e(G$,TC),e(TC,QCe),e(QCe,f5r),e(TC,g5r),e(TC,aK),e(aK,h5r),e(TC,u5r),e(To,p5r),e(To,MC),e(MC,_5r),e(MC,WCe),e(WCe,b5r),e(MC,v5r),e(MC,UCe),e(UCe,F5r),e(To,T5r),M(EC,To,null),b(m,CYe,_),b(m,$c,_),e($c,CC),e(CC,HCe),M(O$,HCe,null),e($c,M5r),e($c,JCe),e(JCe,E5r),b(m,wYe,_),b(m,tr,_),M(V$,tr,null),e(tr,C5r),e(tr,kc),e(kc,w5r),e(kc,nK),e(nK,A5r),e(kc,y5r),e(kc,sK),e(sK,L5r),e(kc,x5r),e(tr,$5r),e(tr,X$),e(X$,k5r),e(X$,YCe),e(YCe,S5r),e(X$,R5r),e(tr,P5r),e(tr,Dt),M(z$,Dt,null),e(Dt,B5r),e(Dt,KCe),e(KCe,I5r),e(Dt,N5r),e(Dt,Sc),e(Sc,q5r),e(Sc,ZCe),e(ZCe,j5r),e(Sc,D5r),e(Sc,lK),e(lK,G5r),e(Sc,O5r),e(Dt,V5r),M(wC,Dt,null),e(tr,X5r),e(tr,Mo),M(Q$,Mo,null),e(Mo,z5r),e(Mo,e3e),e(e3e,Q5r),e(Mo,W5r),e(Mo,Tn),e(Tn,U5r),e(Tn,o3e),e(o3e,H5r),e(Tn,J5r),e(Tn,r3e),e(r3e,Y5r),e(Tn,K5r),e(Tn,t3e),e(t3e,Z5r),e(Tn,e0r),e(Mo,o0r),e(Mo,a3e),e(a3e,AC),e(AC,n3e),e(n3e,r0r),e(AC,t0r),e(AC,iK),e(iK,a0r),e(AC,n0r),e(Mo,s0r),e(Mo,yC),e(yC,l0r),e(yC,s3e),e(s3e,i0r),e(yC,d0r),e(yC,l3e),e(l3e,c0r),e(Mo,m0r),M(LC,Mo,null),b(m,AYe,_),b(m,Rc,_),e(Rc,xC),e(xC,i3e),M(W$,i3e,null),e(Rc,f0r),e(Rc,d3e),e(d3e,g0r),b(m,yYe,_),b(m,ar,_),M(U$,ar,null),e(ar,h0r),e(ar,Pc),e(Pc,u0r),e(Pc,dK),e(dK,p0r),e(Pc,_0r),e(Pc,cK),e(cK,b0r),e(Pc,v0r),e(ar,F0r),e(ar,H$),e(H$,T0r),e(H$,c3e),e(c3e,M0r),e(H$,E0r),e(ar,C0r),e(ar,Gt),M(J$,Gt,null),e(Gt,w0r),e(Gt,m3e),e(m3e,A0r),e(Gt,y0r),e(Gt,Bc),e(Bc,L0r),e(Bc,f3e),e(f3e,x0r),e(Bc,$0r),e(Bc,mK),e(mK,k0r),e(Bc,S0r),e(Gt,R0r),M($C,Gt,null),e(ar,P0r),e(ar,Eo),M(Y$,Eo,null),e(Eo,B0r),e(Eo,g3e),e(g3e,I0r),e(Eo,N0r),e(Eo,Mn),e(Mn,q0r),e(Mn,h3e),e(h3e,j0r),e(Mn,D0r),e(Mn,u3e),e(u3e,G0r),e(Mn,O0r),e(Mn,p3e),e(p3e,V0r),e(Mn,X0r),e(Eo,z0r),e(Eo,ft),e(ft,kC),e(kC,_3e),e(_3e,Q0r),e(kC,W0r),e(kC,fK),e(fK,U0r),e(kC,H0r),e(ft,J0r),e(ft,SC),e(SC,b3e),e(b3e,Y0r),e(SC,K0r),e(SC,gK),e(gK,Z0r),e(SC,ewr),e(ft,owr),e(ft,RC),e(RC,v3e),e(v3e,rwr),e(RC,twr),e(RC,hK),e(hK,awr),e(RC,nwr),e(ft,swr),e(ft,PC),e(PC,F3e),e(F3e,lwr),e(PC,iwr),e(PC,uK),e(uK,dwr),e(PC,cwr),e(ft,mwr),e(ft,BC),e(BC,T3e),e(T3e,fwr),e(BC,gwr),e(BC,pK),e(pK,hwr),e(BC,uwr),e(Eo,pwr),e(Eo,IC),e(IC,_wr),e(IC,M3e),e(M3e,bwr),e(IC,vwr),e(IC,E3e),e(E3e,Fwr),e(Eo,Twr),M(NC,Eo,null),b(m,LYe,_),b(m,Ic,_),e(Ic,qC),e(qC,C3e),M(K$,C3e,null),e(Ic,Mwr),e(Ic,w3e),e(w3e,Ewr),b(m,xYe,_),b(m,nr,_),M(Z$,nr,null),e(nr,Cwr),e(nr,Nc),e(Nc,wwr),e(Nc,_K),e(_K,Awr),e(Nc,ywr),e(Nc,bK),e(bK,Lwr),e(Nc,xwr),e(nr,$wr),e(nr,ek),e(ek,kwr),e(ek,A3e),e(A3e,Swr),e(ek,Rwr),e(nr,Pwr),e(nr,Ot),M(ok,Ot,null),e(Ot,Bwr),e(Ot,y3e),e(y3e,Iwr),e(Ot,Nwr),e(Ot,qc),e(qc,qwr),e(qc,L3e),e(L3e,jwr),e(qc,Dwr),e(qc,vK),e(vK,Gwr),e(qc,Owr),e(Ot,Vwr),M(jC,Ot,null),e(nr,Xwr),e(nr,Co),M(rk,Co,null),e(Co,zwr),e(Co,x3e),e(x3e,Qwr),e(Co,Wwr),e(Co,En),e(En,Uwr),e(En,$3e),e($3e,Hwr),e(En,Jwr),e(En,k3e),e(k3e,Ywr),e(En,Kwr),e(En,S3e),e(S3e,Zwr),e(En,eAr),e(Co,oAr),e(Co,R3e),e(R3e,DC),e(DC,P3e),e(P3e,rAr),e(DC,tAr),e(DC,FK),e(FK,aAr),e(DC,nAr),e(Co,sAr),e(Co,GC),e(GC,lAr),e(GC,B3e),e(B3e,iAr),e(GC,dAr),e(GC,I3e),e(I3e,cAr),e(Co,mAr),M(OC,Co,null),b(m,$Ye,_),b(m,jc,_),e(jc,VC),e(VC,N3e),M(tk,N3e,null),e(jc,fAr),e(jc,q3e),e(q3e,gAr),b(m,kYe,_),b(m,sr,_),M(ak,sr,null),e(sr,hAr),e(sr,Dc),e(Dc,uAr),e(Dc,TK),e(TK,pAr),e(Dc,_Ar),e(Dc,MK),e(MK,bAr),e(Dc,vAr),e(sr,FAr),e(sr,nk),e(nk,TAr),e(nk,j3e),e(j3e,MAr),e(nk,EAr),e(sr,CAr),e(sr,Vt),M(sk,Vt,null),e(Vt,wAr),e(Vt,D3e),e(D3e,AAr),e(Vt,yAr),e(Vt,Gc),e(Gc,LAr),e(Gc,G3e),e(G3e,xAr),e(Gc,$Ar),e(Gc,EK),e(EK,kAr),e(Gc,SAr),e(Vt,RAr),M(XC,Vt,null),e(sr,PAr),e(sr,Ir),M(lk,Ir,null),e(Ir,BAr),e(Ir,O3e),e(O3e,IAr),e(Ir,NAr),e(Ir,Cn),e(Cn,qAr),e(Cn,V3e),e(V3e,jAr),e(Cn,DAr),e(Cn,X3e),e(X3e,GAr),e(Cn,OAr),e(Cn,z3e),e(z3e,VAr),e(Cn,XAr),e(Ir,zAr),e(Ir,N),e(N,zC),e(zC,Q3e),e(Q3e,QAr),e(zC,WAr),e(zC,CK),e(CK,UAr),e(zC,HAr),e(N,JAr),e(N,QC),e(QC,W3e),e(W3e,YAr),e(QC,KAr),e(QC,wK),e(wK,ZAr),e(QC,e6r),e(N,o6r),e(N,WC),e(WC,U3e),e(U3e,r6r),e(WC,t6r),e(WC,AK),e(AK,a6r),e(WC,n6r),e(N,s6r),e(N,UC),e(UC,H3e),e(H3e,l6r),e(UC,i6r),e(UC,yK),e(yK,d6r),e(UC,c6r),e(N,m6r),e(N,HC),e(HC,J3e),e(J3e,f6r),e(HC,g6r),e(HC,LK),e(LK,h6r),e(HC,u6r),e(N,p6r),e(N,JC),e(JC,Y3e),e(Y3e,_6r),e(JC,b6r),e(JC,xK),e(xK,v6r),e(JC,F6r),e(N,T6r),e(N,YC),e(YC,K3e),e(K3e,M6r),e(YC,E6r),e(YC,$K),e($K,C6r),e(YC,w6r),e(N,A6r),e(N,KC),e(KC,Z3e),e(Z3e,y6r),e(KC,L6r),e(KC,kK),e(kK,x6r),e(KC,$6r),e(N,k6r),e(N,ZC),e(ZC,e5e),e(e5e,S6r),e(ZC,R6r),e(ZC,SK),e(SK,P6r),e(ZC,B6r),e(N,I6r),e(N,e3),e(e3,o5e),e(o5e,N6r),e(e3,q6r),e(e3,RK),e(RK,j6r),e(e3,D6r),e(N,G6r),e(N,o3),e(o3,r5e),e(r5e,O6r),e(o3,V6r),e(o3,PK),e(PK,X6r),e(o3,z6r),e(N,Q6r),e(N,r3),e(r3,t5e),e(t5e,W6r),e(r3,U6r),e(r3,BK),e(BK,H6r),e(r3,J6r),e(N,Y6r),e(N,t3),e(t3,a5e),e(a5e,K6r),e(t3,Z6r),e(t3,IK),e(IK,e7r),e(t3,o7r),e(N,r7r),e(N,a3),e(a3,n5e),e(n5e,t7r),e(a3,a7r),e(a3,NK),e(NK,n7r),e(a3,s7r),e(N,l7r),e(N,n3),e(n3,s5e),e(s5e,i7r),e(n3,d7r),e(n3,qK),e(qK,c7r),e(n3,m7r),e(N,f7r),e(N,s3),e(s3,l5e),e(l5e,g7r),e(s3,h7r),e(s3,jK),e(jK,u7r),e(s3,p7r),e(N,_7r),e(N,l3),e(l3,i5e),e(i5e,b7r),e(l3,v7r),e(l3,DK),e(DK,F7r),e(l3,T7r),e(N,M7r),e(N,i3),e(i3,d5e),e(d5e,E7r),e(i3,C7r),e(i3,GK),e(GK,w7r),e(i3,A7r),e(N,y7r),e(N,_l),e(_l,c5e),e(c5e,L7r),e(_l,x7r),e(_l,OK),e(OK,$7r),e(_l,k7r),e(_l,VK),e(VK,S7r),e(_l,R7r),e(N,P7r),e(N,d3),e(d3,m5e),e(m5e,B7r),e(d3,I7r),e(d3,XK),e(XK,N7r),e(d3,q7r),e(N,j7r),e(N,c3),e(c3,f5e),e(f5e,D7r),e(c3,G7r),e(c3,zK),e(zK,O7r),e(c3,V7r),e(N,X7r),e(N,m3),e(m3,g5e),e(g5e,z7r),e(m3,Q7r),e(m3,QK),e(QK,W7r),e(m3,U7r),e(N,H7r),e(N,f3),e(f3,h5e),e(h5e,J7r),e(f3,Y7r),e(f3,WK),e(WK,K7r),e(f3,Z7r),e(N,eyr),e(N,g3),e(g3,u5e),e(u5e,oyr),e(g3,ryr),e(g3,UK),e(UK,tyr),e(g3,ayr),e(N,nyr),e(N,h3),e(h3,p5e),e(p5e,syr),e(h3,lyr),e(h3,HK),e(HK,iyr),e(h3,dyr),e(N,cyr),e(N,u3),e(u3,_5e),e(_5e,myr),e(u3,fyr),e(u3,JK),e(JK,gyr),e(u3,hyr),e(N,uyr),e(N,p3),e(p3,b5e),e(b5e,pyr),e(p3,_yr),e(p3,YK),e(YK,byr),e(p3,vyr),e(N,Fyr),e(N,_3),e(_3,v5e),e(v5e,Tyr),e(_3,Myr),e(_3,KK),e(KK,Eyr),e(_3,Cyr),e(N,wyr),e(N,b3),e(b3,F5e),e(F5e,Ayr),e(b3,yyr),e(b3,ZK),e(ZK,Lyr),e(b3,xyr),e(N,$yr),e(N,v3),e(v3,T5e),e(T5e,kyr),e(v3,Syr),e(v3,eZ),e(eZ,Ryr),e(v3,Pyr),e(N,Byr),e(N,F3),e(F3,M5e),e(M5e,Iyr),e(F3,Nyr),e(F3,oZ),e(oZ,qyr),e(F3,jyr),e(N,Dyr),e(N,T3),e(T3,E5e),e(E5e,Gyr),e(T3,Oyr),e(T3,rZ),e(rZ,Vyr),e(T3,Xyr),e(N,zyr),e(N,M3),e(M3,C5e),e(C5e,Qyr),e(M3,Wyr),e(M3,tZ),e(tZ,Uyr),e(M3,Hyr),e(N,Jyr),e(N,E3),e(E3,w5e),e(w5e,Yyr),e(E3,Kyr),e(E3,aZ),e(aZ,Zyr),e(E3,eLr),e(N,oLr),e(N,C3),e(C3,A5e),e(A5e,rLr),e(C3,tLr),e(C3,nZ),e(nZ,aLr),e(C3,nLr),e(N,sLr),e(N,w3),e(w3,y5e),e(y5e,lLr),e(w3,iLr),e(w3,sZ),e(sZ,dLr),e(w3,cLr),e(N,mLr),e(N,A3),e(A3,L5e),e(L5e,fLr),e(A3,gLr),e(A3,lZ),e(lZ,hLr),e(A3,uLr),e(N,pLr),e(N,y3),e(y3,x5e),e(x5e,_Lr),e(y3,bLr),e(y3,iZ),e(iZ,vLr),e(y3,FLr),e(N,TLr),e(N,L3),e(L3,$5e),e($5e,MLr),e(L3,ELr),e(L3,dZ),e(dZ,CLr),e(L3,wLr),e(N,ALr),e(N,x3),e(x3,k5e),e(k5e,yLr),e(x3,LLr),e(x3,cZ),e(cZ,xLr),e(x3,$Lr),e(N,kLr),e(N,$3),e($3,S5e),e(S5e,SLr),e($3,RLr),e($3,mZ),e(mZ,PLr),e($3,BLr),e(N,ILr),e(N,k3),e(k3,R5e),e(R5e,NLr),e(k3,qLr),e(k3,fZ),e(fZ,jLr),e(k3,DLr),e(N,GLr),e(N,S3),e(S3,P5e),e(P5e,OLr),e(S3,VLr),e(S3,gZ),e(gZ,XLr),e(S3,zLr),e(N,QLr),e(N,R3),e(R3,B5e),e(B5e,WLr),e(R3,ULr),e(R3,hZ),e(hZ,HLr),e(R3,JLr),e(N,YLr),e(N,P3),e(P3,I5e),e(I5e,KLr),e(P3,ZLr),e(P3,uZ),e(uZ,e8r),e(P3,o8r),e(N,r8r),e(N,B3),e(B3,N5e),e(N5e,t8r),e(B3,a8r),e(B3,pZ),e(pZ,n8r),e(B3,s8r),e(N,l8r),e(N,I3),e(I3,q5e),e(q5e,i8r),e(I3,d8r),e(I3,_Z),e(_Z,c8r),e(I3,m8r),e(N,f8r),e(N,N3),e(N3,j5e),e(j5e,g8r),e(N3,h8r),e(N3,bZ),e(bZ,u8r),e(N3,p8r),e(N,_8r),e(N,q3),e(q3,D5e),e(D5e,b8r),e(q3,v8r),e(q3,vZ),e(vZ,F8r),e(q3,T8r),e(N,M8r),e(N,j3),e(j3,G5e),e(G5e,E8r),e(j3,C8r),e(j3,FZ),e(FZ,w8r),e(j3,A8r),e(N,y8r),e(N,D3),e(D3,O5e),e(O5e,L8r),e(D3,x8r),e(D3,TZ),e(TZ,$8r),e(D3,k8r),e(N,S8r),e(N,G3),e(G3,V5e),e(V5e,R8r),e(G3,P8r),e(G3,MZ),e(MZ,B8r),e(G3,I8r),e(N,N8r),e(N,O3),e(O3,X5e),e(X5e,q8r),e(O3,j8r),e(O3,EZ),e(EZ,D8r),e(O3,G8r),e(N,O8r),e(N,V3),e(V3,z5e),e(z5e,V8r),e(V3,X8r),e(V3,CZ),e(CZ,z8r),e(V3,Q8r),e(Ir,W8r),M(X3,Ir,null),b(m,SYe,_),b(m,Oc,_),e(Oc,z3),e(z3,Q5e),M(ik,Q5e,null),e(Oc,U8r),e(Oc,W5e),e(W5e,H8r),b(m,RYe,_),b(m,lr,_),M(dk,lr,null),e(lr,J8r),e(lr,Vc),e(Vc,Y8r),e(Vc,wZ),e(wZ,K8r),e(Vc,Z8r),e(Vc,AZ),e(AZ,e9r),e(Vc,o9r),e(lr,r9r),e(lr,ck),e(ck,t9r),e(ck,U5e),e(U5e,a9r),e(ck,n9r),e(lr,s9r),e(lr,Xt),M(mk,Xt,null),e(Xt,l9r),e(Xt,H5e),e(H5e,i9r),e(Xt,d9r),e(Xt,Xc),e(Xc,c9r),e(Xc,J5e),e(J5e,m9r),e(Xc,f9r),e(Xc,yZ),e(yZ,g9r),e(Xc,h9r),e(Xt,u9r),M(Q3,Xt,null),e(lr,p9r),e(lr,Nr),M(fk,Nr,null),e(Nr,_9r),e(Nr,Y5e),e(Y5e,b9r),e(Nr,v9r),e(Nr,wn),e(wn,F9r),e(wn,K5e),e(K5e,T9r),e(wn,M9r),e(wn,Z5e),e(Z5e,E9r),e(wn,C9r),e(wn,e0e),e(e0e,w9r),e(wn,A9r),e(Nr,y9r),e(Nr,se),e(se,W3),e(W3,o0e),e(o0e,L9r),e(W3,x9r),e(W3,LZ),e(LZ,$9r),e(W3,k9r),e(se,S9r),e(se,U3),e(U3,r0e),e(r0e,R9r),e(U3,P9r),e(U3,xZ),e(xZ,B9r),e(U3,I9r),e(se,N9r),e(se,H3),e(H3,t0e),e(t0e,q9r),e(H3,j9r),e(H3,$Z),e($Z,D9r),e(H3,G9r),e(se,O9r),e(se,J3),e(J3,a0e),e(a0e,V9r),e(J3,X9r),e(J3,kZ),e(kZ,z9r),e(J3,Q9r),e(se,W9r),e(se,Y3),e(Y3,n0e),e(n0e,U9r),e(Y3,H9r),e(Y3,SZ),e(SZ,J9r),e(Y3,Y9r),e(se,K9r),e(se,K3),e(K3,s0e),e(s0e,Z9r),e(K3,exr),e(K3,RZ),e(RZ,oxr),e(K3,rxr),e(se,txr),e(se,Z3),e(Z3,l0e),e(l0e,axr),e(Z3,nxr),e(Z3,PZ),e(PZ,sxr),e(Z3,lxr),e(se,ixr),e(se,e5),e(e5,i0e),e(i0e,dxr),e(e5,cxr),e(e5,BZ),e(BZ,mxr),e(e5,fxr),e(se,gxr),e(se,o5),e(o5,d0e),e(d0e,hxr),e(o5,uxr),e(o5,IZ),e(IZ,pxr),e(o5,_xr),e(se,bxr),e(se,r5),e(r5,c0e),e(c0e,vxr),e(r5,Fxr),e(r5,NZ),e(NZ,Txr),e(r5,Mxr),e(se,Exr),e(se,t5),e(t5,m0e),e(m0e,Cxr),e(t5,wxr),e(t5,qZ),e(qZ,Axr),e(t5,yxr),e(se,Lxr),e(se,a5),e(a5,f0e),e(f0e,xxr),e(a5,$xr),e(a5,jZ),e(jZ,kxr),e(a5,Sxr),e(se,Rxr),e(se,n5),e(n5,g0e),e(g0e,Pxr),e(n5,Bxr),e(n5,DZ),e(DZ,Ixr),e(n5,Nxr),e(se,qxr),e(se,s5),e(s5,h0e),e(h0e,jxr),e(s5,Dxr),e(s5,GZ),e(GZ,Gxr),e(s5,Oxr),e(se,Vxr),e(se,l5),e(l5,u0e),e(u0e,Xxr),e(l5,zxr),e(l5,OZ),e(OZ,Qxr),e(l5,Wxr),e(se,Uxr),e(se,i5),e(i5,p0e),e(p0e,Hxr),e(i5,Jxr),e(i5,VZ),e(VZ,Yxr),e(i5,Kxr),e(se,Zxr),e(se,d5),e(d5,_0e),e(_0e,e$r),e(d5,o$r),e(d5,XZ),e(XZ,r$r),e(d5,t$r),e(se,a$r),e(se,c5),e(c5,b0e),e(b0e,n$r),e(c5,s$r),e(c5,zZ),e(zZ,l$r),e(c5,i$r),e(se,d$r),e(se,m5),e(m5,v0e),e(v0e,c$r),e(m5,m$r),e(m5,QZ),e(QZ,f$r),e(m5,g$r),e(se,h$r),e(se,f5),e(f5,F0e),e(F0e,u$r),e(f5,p$r),e(f5,WZ),e(WZ,_$r),e(f5,b$r),e(se,v$r),e(se,g5),e(g5,T0e),e(T0e,F$r),e(g5,T$r),e(g5,UZ),e(UZ,M$r),e(g5,E$r),e(se,C$r),e(se,h5),e(h5,M0e),e(M0e,w$r),e(h5,A$r),e(h5,HZ),e(HZ,y$r),e(h5,L$r),e(se,x$r),e(se,u5),e(u5,E0e),e(E0e,$$r),e(u5,k$r),e(u5,JZ),e(JZ,S$r),e(u5,R$r),e(Nr,P$r),M(p5,Nr,null),b(m,PYe,_),b(m,zc,_),e(zc,_5),e(_5,C0e),M(gk,C0e,null),e(zc,B$r),e(zc,w0e),e(w0e,I$r),b(m,BYe,_),b(m,ir,_),M(hk,ir,null),e(ir,N$r),e(ir,Qc),e(Qc,q$r),e(Qc,YZ),e(YZ,j$r),e(Qc,D$r),e(Qc,KZ),e(KZ,G$r),e(Qc,O$r),e(ir,V$r),e(ir,uk),e(uk,X$r),e(uk,A0e),e(A0e,z$r),e(uk,Q$r),e(ir,W$r),e(ir,zt),M(pk,zt,null),e(zt,U$r),e(zt,y0e),e(y0e,H$r),e(zt,J$r),e(zt,Wc),e(Wc,Y$r),e(Wc,L0e),e(L0e,K$r),e(Wc,Z$r),e(Wc,ZZ),e(ZZ,ekr),e(Wc,okr),e(zt,rkr),M(b5,zt,null),e(ir,tkr),e(ir,qr),M(_k,qr,null),e(qr,akr),e(qr,x0e),e(x0e,nkr),e(qr,skr),e(qr,An),e(An,lkr),e(An,$0e),e($0e,ikr),e(An,dkr),e(An,k0e),e(k0e,ckr),e(An,mkr),e(An,S0e),e(S0e,fkr),e(An,gkr),e(qr,hkr),e(qr,Me),e(Me,v5),e(v5,R0e),e(R0e,ukr),e(v5,pkr),e(v5,eee),e(eee,_kr),e(v5,bkr),e(Me,vkr),e(Me,F5),e(F5,P0e),e(P0e,Fkr),e(F5,Tkr),e(F5,oee),e(oee,Mkr),e(F5,Ekr),e(Me,Ckr),e(Me,T5),e(T5,B0e),e(B0e,wkr),e(T5,Akr),e(T5,ree),e(ree,ykr),e(T5,Lkr),e(Me,xkr),e(Me,M5),e(M5,I0e),e(I0e,$kr),e(M5,kkr),e(M5,tee),e(tee,Skr),e(M5,Rkr),e(Me,Pkr),e(Me,E5),e(E5,N0e),e(N0e,Bkr),e(E5,Ikr),e(E5,aee),e(aee,Nkr),e(E5,qkr),e(Me,jkr),e(Me,C5),e(C5,q0e),e(q0e,Dkr),e(C5,Gkr),e(C5,nee),e(nee,Okr),e(C5,Vkr),e(Me,Xkr),e(Me,w5),e(w5,j0e),e(j0e,zkr),e(w5,Qkr),e(w5,see),e(see,Wkr),e(w5,Ukr),e(Me,Hkr),e(Me,A5),e(A5,D0e),e(D0e,Jkr),e(A5,Ykr),e(A5,lee),e(lee,Kkr),e(A5,Zkr),e(Me,eSr),e(Me,y5),e(y5,G0e),e(G0e,oSr),e(y5,rSr),e(y5,iee),e(iee,tSr),e(y5,aSr),e(Me,nSr),e(Me,L5),e(L5,O0e),e(O0e,sSr),e(L5,lSr),e(L5,dee),e(dee,iSr),e(L5,dSr),e(Me,cSr),e(Me,x5),e(x5,V0e),e(V0e,mSr),e(x5,fSr),e(x5,cee),e(cee,gSr),e(x5,hSr),e(Me,uSr),e(Me,$5),e($5,X0e),e(X0e,pSr),e($5,_Sr),e($5,mee),e(mee,bSr),e($5,vSr),e(Me,FSr),e(Me,k5),e(k5,z0e),e(z0e,TSr),e(k5,MSr),e(k5,fee),e(fee,ESr),e(k5,CSr),e(Me,wSr),e(Me,S5),e(S5,Q0e),e(Q0e,ASr),e(S5,ySr),e(S5,gee),e(gee,LSr),e(S5,xSr),e(qr,$Sr),M(R5,qr,null),b(m,IYe,_),b(m,Uc,_),e(Uc,P5),e(P5,W0e),M(bk,W0e,null),e(Uc,kSr),e(Uc,U0e),e(U0e,SSr),b(m,NYe,_),b(m,dr,_),M(vk,dr,null),e(dr,RSr),e(dr,Hc),e(Hc,PSr),e(Hc,hee),e(hee,BSr),e(Hc,ISr),e(Hc,uee),e(uee,NSr),e(Hc,qSr),e(dr,jSr),e(dr,Fk),e(Fk,DSr),e(Fk,H0e),e(H0e,GSr),e(Fk,OSr),e(dr,VSr),e(dr,Qt),M(Tk,Qt,null),e(Qt,XSr),e(Qt,J0e),e(J0e,zSr),e(Qt,QSr),e(Qt,Jc),e(Jc,WSr),e(Jc,Y0e),e(Y0e,USr),e(Jc,HSr),e(Jc,pee),e(pee,JSr),e(Jc,YSr),e(Qt,KSr),M(B5,Qt,null),e(dr,ZSr),e(dr,jr),M(Mk,jr,null),e(jr,eRr),e(jr,K0e),e(K0e,oRr),e(jr,rRr),e(jr,yn),e(yn,tRr),e(yn,Z0e),e(Z0e,aRr),e(yn,nRr),e(yn,ewe),e(ewe,sRr),e(yn,lRr),e(yn,owe),e(owe,iRr),e(yn,dRr),e(jr,cRr),e(jr,Be),e(Be,I5),e(I5,rwe),e(rwe,mRr),e(I5,fRr),e(I5,_ee),e(_ee,gRr),e(I5,hRr),e(Be,uRr),e(Be,N5),e(N5,twe),e(twe,pRr),e(N5,_Rr),e(N5,bee),e(bee,bRr),e(N5,vRr),e(Be,FRr),e(Be,bl),e(bl,awe),e(awe,TRr),e(bl,MRr),e(bl,vee),e(vee,ERr),e(bl,CRr),e(bl,Fee),e(Fee,wRr),e(bl,ARr),e(Be,yRr),e(Be,q5),e(q5,nwe),e(nwe,LRr),e(q5,xRr),e(q5,Tee),e(Tee,$Rr),e(q5,kRr),e(Be,SRr),e(Be,j5),e(j5,swe),e(swe,RRr),e(j5,PRr),e(j5,Mee),e(Mee,BRr),e(j5,IRr),e(Be,NRr),e(Be,D5),e(D5,lwe),e(lwe,qRr),e(D5,jRr),e(D5,Eee),e(Eee,DRr),e(D5,GRr),e(Be,ORr),e(Be,G5),e(G5,iwe),e(iwe,VRr),e(G5,XRr),e(G5,Cee),e(Cee,zRr),e(G5,QRr),e(Be,WRr),e(Be,O5),e(O5,dwe),e(dwe,URr),e(O5,HRr),e(O5,wee),e(wee,JRr),e(O5,YRr),e(Be,KRr),e(Be,V5),e(V5,cwe),e(cwe,ZRr),e(V5,ePr),e(V5,Aee),e(Aee,oPr),e(V5,rPr),e(jr,tPr),M(X5,jr,null),b(m,qYe,_),b(m,Yc,_),e(Yc,z5),e(z5,mwe),M(Ek,mwe,null),e(Yc,aPr),e(Yc,fwe),e(fwe,nPr),b(m,jYe,_),b(m,cr,_),M(Ck,cr,null),e(cr,sPr),e(cr,Kc),e(Kc,lPr),e(Kc,yee),e(yee,iPr),e(Kc,dPr),e(Kc,Lee),e(Lee,cPr),e(Kc,mPr),e(cr,fPr),e(cr,wk),e(wk,gPr),e(wk,gwe),e(gwe,hPr),e(wk,uPr),e(cr,pPr),e(cr,Wt),M(Ak,Wt,null),e(Wt,_Pr),e(Wt,hwe),e(hwe,bPr),e(Wt,vPr),e(Wt,Zc),e(Zc,FPr),e(Zc,uwe),e(uwe,TPr),e(Zc,MPr),e(Zc,xee),e(xee,EPr),e(Zc,CPr),e(Wt,wPr),M(Q5,Wt,null),e(cr,APr),e(cr,Dr),M(yk,Dr,null),e(Dr,yPr),e(Dr,pwe),e(pwe,LPr),e(Dr,xPr),e(Dr,Ln),e(Ln,$Pr),e(Ln,_we),e(_we,kPr),e(Ln,SPr),e(Ln,bwe),e(bwe,RPr),e(Ln,PPr),e(Ln,vwe),e(vwe,BPr),e(Ln,IPr),e(Dr,NPr),e(Dr,em),e(em,W5),e(W5,Fwe),e(Fwe,qPr),e(W5,jPr),e(W5,$ee),e($ee,DPr),e(W5,GPr),e(em,OPr),e(em,U5),e(U5,Twe),e(Twe,VPr),e(U5,XPr),e(U5,kee),e(kee,zPr),e(U5,QPr),e(em,WPr),e(em,H5),e(H5,Mwe),e(Mwe,UPr),e(H5,HPr),e(H5,See),e(See,JPr),e(H5,YPr),e(Dr,KPr),M(J5,Dr,null),b(m,DYe,_),b(m,om,_),e(om,Y5),e(Y5,Ewe),M(Lk,Ewe,null),e(om,ZPr),e(om,Cwe),e(Cwe,eBr),b(m,GYe,_),b(m,mr,_),M(xk,mr,null),e(mr,oBr),e(mr,rm),e(rm,rBr),e(rm,Ree),e(Ree,tBr),e(rm,aBr),e(rm,Pee),e(Pee,nBr),e(rm,sBr),e(mr,lBr),e(mr,$k),e($k,iBr),e($k,wwe),e(wwe,dBr),e($k,cBr),e(mr,mBr),e(mr,Ut),M(kk,Ut,null),e(Ut,fBr),e(Ut,Awe),e(Awe,gBr),e(Ut,hBr),e(Ut,tm),e(tm,uBr),e(tm,ywe),e(ywe,pBr),e(tm,_Br),e(tm,Bee),e(Bee,bBr),e(tm,vBr),e(Ut,FBr),M(K5,Ut,null),e(mr,TBr),e(mr,Gr),M(Sk,Gr,null),e(Gr,MBr),e(Gr,Lwe),e(Lwe,EBr),e(Gr,CBr),e(Gr,xn),e(xn,wBr),e(xn,xwe),e(xwe,ABr),e(xn,yBr),e(xn,$we),e($we,LBr),e(xn,xBr),e(xn,kwe),e(kwe,$Br),e(xn,kBr),e(Gr,SBr),e(Gr,fe),e(fe,Z5),e(Z5,Swe),e(Swe,RBr),e(Z5,PBr),e(Z5,Iee),e(Iee,BBr),e(Z5,IBr),e(fe,NBr),e(fe,e0),e(e0,Rwe),e(Rwe,qBr),e(e0,jBr),e(e0,Nee),e(Nee,DBr),e(e0,GBr),e(fe,OBr),e(fe,o0),e(o0,Pwe),e(Pwe,VBr),e(o0,XBr),e(o0,qee),e(qee,zBr),e(o0,QBr),e(fe,WBr),e(fe,r0),e(r0,Bwe),e(Bwe,UBr),e(r0,HBr),e(r0,jee),e(jee,JBr),e(r0,YBr),e(fe,KBr),e(fe,t0),e(t0,Iwe),e(Iwe,ZBr),e(t0,eIr),e(t0,Dee),e(Dee,oIr),e(t0,rIr),e(fe,tIr),e(fe,a0),e(a0,Nwe),e(Nwe,aIr),e(a0,nIr),e(a0,Gee),e(Gee,sIr),e(a0,lIr),e(fe,iIr),e(fe,n0),e(n0,qwe),e(qwe,dIr),e(n0,cIr),e(n0,Oee),e(Oee,mIr),e(n0,fIr),e(fe,gIr),e(fe,s0),e(s0,jwe),e(jwe,hIr),e(s0,uIr),e(s0,Vee),e(Vee,pIr),e(s0,_Ir),e(fe,bIr),e(fe,l0),e(l0,Dwe),e(Dwe,vIr),e(l0,FIr),e(l0,Xee),e(Xee,TIr),e(l0,MIr),e(fe,EIr),e(fe,i0),e(i0,Gwe),e(Gwe,CIr),e(i0,wIr),e(i0,zee),e(zee,AIr),e(i0,yIr),e(fe,LIr),e(fe,d0),e(d0,Owe),e(Owe,xIr),e(d0,$Ir),e(d0,Qee),e(Qee,kIr),e(d0,SIr),e(fe,RIr),e(fe,c0),e(c0,Vwe),e(Vwe,PIr),e(c0,BIr),e(c0,Wee),e(Wee,IIr),e(c0,NIr),e(fe,qIr),e(fe,m0),e(m0,Xwe),e(Xwe,jIr),e(m0,DIr),e(m0,Uee),e(Uee,GIr),e(m0,OIr),e(fe,VIr),e(fe,f0),e(f0,zwe),e(zwe,XIr),e(f0,zIr),e(f0,Hee),e(Hee,QIr),e(f0,WIr),e(fe,UIr),e(fe,g0),e(g0,Qwe),e(Qwe,HIr),e(g0,JIr),e(g0,Jee),e(Jee,YIr),e(g0,KIr),e(fe,ZIr),e(fe,h0),e(h0,Wwe),e(Wwe,eNr),e(h0,oNr),e(h0,Yee),e(Yee,rNr),e(h0,tNr),e(fe,aNr),e(fe,u0),e(u0,Uwe),e(Uwe,nNr),e(u0,sNr),e(u0,Kee),e(Kee,lNr),e(u0,iNr),e(fe,dNr),e(fe,p0),e(p0,Hwe),e(Hwe,cNr),e(p0,mNr),e(p0,Zee),e(Zee,fNr),e(p0,gNr),e(fe,hNr),e(fe,_0),e(_0,Jwe),e(Jwe,uNr),e(_0,pNr),e(_0,eoe),e(eoe,_Nr),e(_0,bNr),e(fe,vNr),e(fe,b0),e(b0,Ywe),e(Ywe,FNr),e(b0,TNr),e(b0,ooe),e(ooe,MNr),e(b0,ENr),e(Gr,CNr),M(v0,Gr,null),b(m,OYe,_),b(m,am,_),e(am,F0),e(F0,Kwe),M(Rk,Kwe,null),e(am,wNr),e(am,Zwe),e(Zwe,ANr),b(m,VYe,_),b(m,fr,_),M(Pk,fr,null),e(fr,yNr),e(fr,nm),e(nm,LNr),e(nm,roe),e(roe,xNr),e(nm,$Nr),e(nm,toe),e(toe,kNr),e(nm,SNr),e(fr,RNr),e(fr,Bk),e(Bk,PNr),e(Bk,eAe),e(eAe,BNr),e(Bk,INr),e(fr,NNr),e(fr,Ht),M(Ik,Ht,null),e(Ht,qNr),e(Ht,oAe),e(oAe,jNr),e(Ht,DNr),e(Ht,sm),e(sm,GNr),e(sm,rAe),e(rAe,ONr),e(sm,VNr),e(sm,aoe),e(aoe,XNr),e(sm,zNr),e(Ht,QNr),M(T0,Ht,null),e(fr,WNr),e(fr,Or),M(Nk,Or,null),e(Or,UNr),e(Or,tAe),e(tAe,HNr),e(Or,JNr),e(Or,$n),e($n,YNr),e($n,aAe),e(aAe,KNr),e($n,ZNr),e($n,nAe),e(nAe,eqr),e($n,oqr),e($n,sAe),e(sAe,rqr),e($n,tqr),e(Or,aqr),e(Or,Le),e(Le,M0),e(M0,lAe),e(lAe,nqr),e(M0,sqr),e(M0,noe),e(noe,lqr),e(M0,iqr),e(Le,dqr),e(Le,E0),e(E0,iAe),e(iAe,cqr),e(E0,mqr),e(E0,soe),e(soe,fqr),e(E0,gqr),e(Le,hqr),e(Le,C0),e(C0,dAe),e(dAe,uqr),e(C0,pqr),e(C0,loe),e(loe,_qr),e(C0,bqr),e(Le,vqr),e(Le,w0),e(w0,cAe),e(cAe,Fqr),e(w0,Tqr),e(w0,ioe),e(ioe,Mqr),e(w0,Eqr),e(Le,Cqr),e(Le,A0),e(A0,mAe),e(mAe,wqr),e(A0,Aqr),e(A0,doe),e(doe,yqr),e(A0,Lqr),e(Le,xqr),e(Le,y0),e(y0,fAe),e(fAe,$qr),e(y0,kqr),e(y0,coe),e(coe,Sqr),e(y0,Rqr),e(Le,Pqr),e(Le,L0),e(L0,gAe),e(gAe,Bqr),e(L0,Iqr),e(L0,moe),e(moe,Nqr),e(L0,qqr),e(Le,jqr),e(Le,x0),e(x0,hAe),e(hAe,Dqr),e(x0,Gqr),e(x0,foe),e(foe,Oqr),e(x0,Vqr),e(Le,Xqr),e(Le,$0),e($0,uAe),e(uAe,zqr),e($0,Qqr),e($0,goe),e(goe,Wqr),e($0,Uqr),e(Le,Hqr),e(Le,k0),e(k0,pAe),e(pAe,Jqr),e(k0,Yqr),e(k0,hoe),e(hoe,Kqr),e(k0,Zqr),e(Or,ejr),M(S0,Or,null),b(m,XYe,_),b(m,lm,_),e(lm,R0),e(R0,_Ae),M(qk,_Ae,null),e(lm,ojr),e(lm,bAe),e(bAe,rjr),b(m,zYe,_),b(m,gr,_),M(jk,gr,null),e(gr,tjr),e(gr,im),e(im,ajr),e(im,uoe),e(uoe,njr),e(im,sjr),e(im,poe),e(poe,ljr),e(im,ijr),e(gr,djr),e(gr,Dk),e(Dk,cjr),e(Dk,vAe),e(vAe,mjr),e(Dk,fjr),e(gr,gjr),e(gr,Jt),M(Gk,Jt,null),e(Jt,hjr),e(Jt,FAe),e(FAe,ujr),e(Jt,pjr),e(Jt,dm),e(dm,_jr),e(dm,TAe),e(TAe,bjr),e(dm,vjr),e(dm,_oe),e(_oe,Fjr),e(dm,Tjr),e(Jt,Mjr),M(P0,Jt,null),e(gr,Ejr),e(gr,Vr),M(Ok,Vr,null),e(Vr,Cjr),e(Vr,MAe),e(MAe,wjr),e(Vr,Ajr),e(Vr,kn),e(kn,yjr),e(kn,EAe),e(EAe,Ljr),e(kn,xjr),e(kn,CAe),e(CAe,$jr),e(kn,kjr),e(kn,wAe),e(wAe,Sjr),e(kn,Rjr),e(Vr,Pjr),e(Vr,re),e(re,B0),e(B0,AAe),e(AAe,Bjr),e(B0,Ijr),e(B0,boe),e(boe,Njr),e(B0,qjr),e(re,jjr),e(re,I0),e(I0,yAe),e(yAe,Djr),e(I0,Gjr),e(I0,voe),e(voe,Ojr),e(I0,Vjr),e(re,Xjr),e(re,N0),e(N0,LAe),e(LAe,zjr),e(N0,Qjr),e(N0,Foe),e(Foe,Wjr),e(N0,Ujr),e(re,Hjr),e(re,q0),e(q0,xAe),e(xAe,Jjr),e(q0,Yjr),e(q0,Toe),e(Toe,Kjr),e(q0,Zjr),e(re,eDr),e(re,j0),e(j0,$Ae),e($Ae,oDr),e(j0,rDr),e(j0,Moe),e(Moe,tDr),e(j0,aDr),e(re,nDr),e(re,D0),e(D0,kAe),e(kAe,sDr),e(D0,lDr),e(D0,Eoe),e(Eoe,iDr),e(D0,dDr),e(re,cDr),e(re,G0),e(G0,SAe),e(SAe,mDr),e(G0,fDr),e(G0,Coe),e(Coe,gDr),e(G0,hDr),e(re,uDr),e(re,O0),e(O0,RAe),e(RAe,pDr),e(O0,_Dr),e(O0,woe),e(woe,bDr),e(O0,vDr),e(re,FDr),e(re,V0),e(V0,PAe),e(PAe,TDr),e(V0,MDr),e(V0,Aoe),e(Aoe,EDr),e(V0,CDr),e(re,wDr),e(re,X0),e(X0,BAe),e(BAe,ADr),e(X0,yDr),e(X0,yoe),e(yoe,LDr),e(X0,xDr),e(re,$Dr),e(re,z0),e(z0,IAe),e(IAe,kDr),e(z0,SDr),e(z0,Loe),e(Loe,RDr),e(z0,PDr),e(re,BDr),e(re,Q0),e(Q0,NAe),e(NAe,IDr),e(Q0,NDr),e(Q0,xoe),e(xoe,qDr),e(Q0,jDr),e(re,DDr),e(re,W0),e(W0,qAe),e(qAe,GDr),e(W0,ODr),e(W0,$oe),e($oe,VDr),e(W0,XDr),e(re,zDr),e(re,U0),e(U0,jAe),e(jAe,QDr),e(U0,WDr),e(U0,koe),e(koe,UDr),e(U0,HDr),e(re,JDr),e(re,H0),e(H0,DAe),e(DAe,YDr),e(H0,KDr),e(H0,Soe),e(Soe,ZDr),e(H0,eGr),e(re,oGr),e(re,J0),e(J0,GAe),e(GAe,rGr),e(J0,tGr),e(J0,Roe),e(Roe,aGr),e(J0,nGr),e(re,sGr),e(re,Y0),e(Y0,OAe),e(OAe,lGr),e(Y0,iGr),e(Y0,Poe),e(Poe,dGr),e(Y0,cGr),e(re,mGr),e(re,K0),e(K0,VAe),e(VAe,fGr),e(K0,gGr),e(K0,Boe),e(Boe,hGr),e(K0,uGr),e(re,pGr),e(re,Z0),e(Z0,XAe),e(XAe,_Gr),e(Z0,bGr),e(Z0,Ioe),e(Ioe,vGr),e(Z0,FGr),e(re,TGr),e(re,ew),e(ew,zAe),e(zAe,MGr),e(ew,EGr),e(ew,Noe),e(Noe,CGr),e(ew,wGr),e(re,AGr),e(re,ow),e(ow,QAe),e(QAe,yGr),e(ow,LGr),e(ow,qoe),e(qoe,xGr),e(ow,$Gr),e(re,kGr),e(re,rw),e(rw,WAe),e(WAe,SGr),e(rw,RGr),e(rw,joe),e(joe,PGr),e(rw,BGr),e(re,IGr),e(re,tw),e(tw,UAe),e(UAe,NGr),e(tw,qGr),e(tw,Doe),e(Doe,jGr),e(tw,DGr),e(re,GGr),e(re,aw),e(aw,HAe),e(HAe,OGr),e(aw,VGr),e(aw,Goe),e(Goe,XGr),e(aw,zGr),e(re,QGr),e(re,nw),e(nw,JAe),e(JAe,WGr),e(nw,UGr),e(nw,Ooe),e(Ooe,HGr),e(nw,JGr),e(re,YGr),e(re,sw),e(sw,YAe),e(YAe,KGr),e(sw,ZGr),e(sw,Voe),e(Voe,eOr),e(sw,oOr),e(re,rOr),e(re,lw),e(lw,KAe),e(KAe,tOr),e(lw,aOr),e(lw,Xoe),e(Xoe,nOr),e(lw,sOr),e(Vr,lOr),M(iw,Vr,null),b(m,QYe,_),b(m,cm,_),e(cm,dw),e(dw,ZAe),M(Vk,ZAe,null),e(cm,iOr),e(cm,e6e),e(e6e,dOr),b(m,WYe,_),b(m,hr,_),M(Xk,hr,null),e(hr,cOr),e(hr,mm),e(mm,mOr),e(mm,zoe),e(zoe,fOr),e(mm,gOr),e(mm,Qoe),e(Qoe,hOr),e(mm,uOr),e(hr,pOr),e(hr,zk),e(zk,_Or),e(zk,o6e),e(o6e,bOr),e(zk,vOr),e(hr,FOr),e(hr,Yt),M(Qk,Yt,null),e(Yt,TOr),e(Yt,r6e),e(r6e,MOr),e(Yt,EOr),e(Yt,fm),e(fm,COr),e(fm,t6e),e(t6e,wOr),e(fm,AOr),e(fm,Woe),e(Woe,yOr),e(fm,LOr),e(Yt,xOr),M(cw,Yt,null),e(hr,$Or),e(hr,Xr),M(Wk,Xr,null),e(Xr,kOr),e(Xr,a6e),e(a6e,SOr),e(Xr,ROr),e(Xr,Sn),e(Sn,POr),e(Sn,n6e),e(n6e,BOr),e(Sn,IOr),e(Sn,s6e),e(s6e,NOr),e(Sn,qOr),e(Sn,l6e),e(l6e,jOr),e(Sn,DOr),e(Xr,GOr),e(Xr,ve),e(ve,mw),e(mw,i6e),e(i6e,OOr),e(mw,VOr),e(mw,Uoe),e(Uoe,XOr),e(mw,zOr),e(ve,QOr),e(ve,fw),e(fw,d6e),e(d6e,WOr),e(fw,UOr),e(fw,Hoe),e(Hoe,HOr),e(fw,JOr),e(ve,YOr),e(ve,gw),e(gw,c6e),e(c6e,KOr),e(gw,ZOr),e(gw,Joe),e(Joe,eVr),e(gw,oVr),e(ve,rVr),e(ve,hw),e(hw,m6e),e(m6e,tVr),e(hw,aVr),e(hw,Yoe),e(Yoe,nVr),e(hw,sVr),e(ve,lVr),e(ve,uw),e(uw,f6e),e(f6e,iVr),e(uw,dVr),e(uw,Koe),e(Koe,cVr),e(uw,mVr),e(ve,fVr),e(ve,pw),e(pw,g6e),e(g6e,gVr),e(pw,hVr),e(pw,Zoe),e(Zoe,uVr),e(pw,pVr),e(ve,_Vr),e(ve,_w),e(_w,h6e),e(h6e,bVr),e(_w,vVr),e(_w,ere),e(ere,FVr),e(_w,TVr),e(ve,MVr),e(ve,bw),e(bw,u6e),e(u6e,EVr),e(bw,CVr),e(bw,ore),e(ore,wVr),e(bw,AVr),e(ve,yVr),e(ve,vw),e(vw,p6e),e(p6e,LVr),e(vw,xVr),e(vw,rre),e(rre,$Vr),e(vw,kVr),e(ve,SVr),e(ve,Fw),e(Fw,_6e),e(_6e,RVr),e(Fw,PVr),e(Fw,tre),e(tre,BVr),e(Fw,IVr),e(ve,NVr),e(ve,Tw),e(Tw,b6e),e(b6e,qVr),e(Tw,jVr),e(Tw,are),e(are,DVr),e(Tw,GVr),e(ve,OVr),e(ve,Mw),e(Mw,v6e),e(v6e,VVr),e(Mw,XVr),e(Mw,nre),e(nre,zVr),e(Mw,QVr),e(ve,WVr),e(ve,Ew),e(Ew,F6e),e(F6e,UVr),e(Ew,HVr),e(Ew,sre),e(sre,JVr),e(Ew,YVr),e(ve,KVr),e(ve,Cw),e(Cw,T6e),e(T6e,ZVr),e(Cw,eXr),e(Cw,lre),e(lre,oXr),e(Cw,rXr),e(ve,tXr),e(ve,ww),e(ww,M6e),e(M6e,aXr),e(ww,nXr),e(ww,ire),e(ire,sXr),e(ww,lXr),e(ve,iXr),e(ve,Aw),e(Aw,E6e),e(E6e,dXr),e(Aw,cXr),e(Aw,dre),e(dre,mXr),e(Aw,fXr),e(ve,gXr),e(ve,yw),e(yw,C6e),e(C6e,hXr),e(yw,uXr),e(yw,cre),e(cre,pXr),e(yw,_Xr),e(Xr,bXr),M(Lw,Xr,null),b(m,UYe,_),b(m,gm,_),e(gm,xw),e(xw,w6e),M(Uk,w6e,null),e(gm,vXr),e(gm,A6e),e(A6e,FXr),b(m,HYe,_),b(m,ur,_),M(Hk,ur,null),e(ur,TXr),e(ur,hm),e(hm,MXr),e(hm,mre),e(mre,EXr),e(hm,CXr),e(hm,fre),e(fre,wXr),e(hm,AXr),e(ur,yXr),e(ur,Jk),e(Jk,LXr),e(Jk,y6e),e(y6e,xXr),e(Jk,$Xr),e(ur,kXr),e(ur,Kt),M(Yk,Kt,null),e(Kt,SXr),e(Kt,L6e),e(L6e,RXr),e(Kt,PXr),e(Kt,um),e(um,BXr),e(um,x6e),e(x6e,IXr),e(um,NXr),e(um,gre),e(gre,qXr),e(um,jXr),e(Kt,DXr),M($w,Kt,null),e(ur,GXr),e(ur,zr),M(Kk,zr,null),e(zr,OXr),e(zr,$6e),e($6e,VXr),e(zr,XXr),e(zr,Rn),e(Rn,zXr),e(Rn,k6e),e(k6e,QXr),e(Rn,WXr),e(Rn,S6e),e(S6e,UXr),e(Rn,HXr),e(Rn,R6e),e(R6e,JXr),e(Rn,YXr),e(zr,KXr),e(zr,Zk),e(Zk,kw),e(kw,P6e),e(P6e,ZXr),e(kw,ezr),e(kw,hre),e(hre,ozr),e(kw,rzr),e(Zk,tzr),e(Zk,Sw),e(Sw,B6e),e(B6e,azr),e(Sw,nzr),e(Sw,ure),e(ure,szr),e(Sw,lzr),e(zr,izr),M(Rw,zr,null),b(m,JYe,_),b(m,pm,_),e(pm,Pw),e(Pw,I6e),M(eS,I6e,null),e(pm,dzr),e(pm,N6e),e(N6e,czr),b(m,YYe,_),b(m,pr,_),M(oS,pr,null),e(pr,mzr),e(pr,_m),e(_m,fzr),e(_m,pre),e(pre,gzr),e(_m,hzr),e(_m,_re),e(_re,uzr),e(_m,pzr),e(pr,_zr),e(pr,rS),e(rS,bzr),e(rS,q6e),e(q6e,vzr),e(rS,Fzr),e(pr,Tzr),e(pr,Zt),M(tS,Zt,null),e(Zt,Mzr),e(Zt,j6e),e(j6e,Ezr),e(Zt,Czr),e(Zt,bm),e(bm,wzr),e(bm,D6e),e(D6e,Azr),e(bm,yzr),e(bm,bre),e(bre,Lzr),e(bm,xzr),e(Zt,$zr),M(Bw,Zt,null),e(pr,kzr),e(pr,Qr),M(aS,Qr,null),e(Qr,Szr),e(Qr,G6e),e(G6e,Rzr),e(Qr,Pzr),e(Qr,Pn),e(Pn,Bzr),e(Pn,O6e),e(O6e,Izr),e(Pn,Nzr),e(Pn,V6e),e(V6e,qzr),e(Pn,jzr),e(Pn,X6e),e(X6e,Dzr),e(Pn,Gzr),e(Qr,Ozr),e(Qr,z6e),e(z6e,Iw),e(Iw,Q6e),e(Q6e,Vzr),e(Iw,Xzr),e(Iw,vre),e(vre,zzr),e(Iw,Qzr),e(Qr,Wzr),M(Nw,Qr,null),b(m,KYe,_),b(m,vm,_),e(vm,qw),e(qw,W6e),M(nS,W6e,null),e(vm,Uzr),e(vm,U6e),e(U6e,Hzr),b(m,ZYe,_),b(m,_r,_),M(sS,_r,null),e(_r,Jzr),e(_r,Fm),e(Fm,Yzr),e(Fm,Fre),e(Fre,Kzr),e(Fm,Zzr),e(Fm,Tre),e(Tre,eQr),e(Fm,oQr),e(_r,rQr),e(_r,lS),e(lS,tQr),e(lS,H6e),e(H6e,aQr),e(lS,nQr),e(_r,sQr),e(_r,ea),M(iS,ea,null),e(ea,lQr),e(ea,J6e),e(J6e,iQr),e(ea,dQr),e(ea,Tm),e(Tm,cQr),e(Tm,Y6e),e(Y6e,mQr),e(Tm,fQr),e(Tm,Mre),e(Mre,gQr),e(Tm,hQr),e(ea,uQr),M(jw,ea,null),e(_r,pQr),e(_r,Wr),M(dS,Wr,null),e(Wr,_Qr),e(Wr,K6e),e(K6e,bQr),e(Wr,vQr),e(Wr,Bn),e(Bn,FQr),e(Bn,Z6e),e(Z6e,TQr),e(Bn,MQr),e(Bn,e7e),e(e7e,EQr),e(Bn,CQr),e(Bn,o7e),e(o7e,wQr),e(Bn,AQr),e(Wr,yQr),e(Wr,r7e),e(r7e,Dw),e(Dw,t7e),e(t7e,LQr),e(Dw,xQr),e(Dw,Ere),e(Ere,$Qr),e(Dw,kQr),e(Wr,SQr),M(Gw,Wr,null),b(m,eKe,_),b(m,Mm,_),e(Mm,Ow),e(Ow,a7e),M(cS,a7e,null),e(Mm,RQr),e(Mm,n7e),e(n7e,PQr),b(m,oKe,_),b(m,br,_),M(mS,br,null),e(br,BQr),e(br,Em),e(Em,IQr),e(Em,Cre),e(Cre,NQr),e(Em,qQr),e(Em,wre),e(wre,jQr),e(Em,DQr),e(br,GQr),e(br,fS),e(fS,OQr),e(fS,s7e),e(s7e,VQr),e(fS,XQr),e(br,zQr),e(br,oa),M(gS,oa,null),e(oa,QQr),e(oa,l7e),e(l7e,WQr),e(oa,UQr),e(oa,Cm),e(Cm,HQr),e(Cm,i7e),e(i7e,JQr),e(Cm,YQr),e(Cm,Are),e(Are,KQr),e(Cm,ZQr),e(oa,eWr),M(Vw,oa,null),e(br,oWr),e(br,Ur),M(hS,Ur,null),e(Ur,rWr),e(Ur,d7e),e(d7e,tWr),e(Ur,aWr),e(Ur,In),e(In,nWr),e(In,c7e),e(c7e,sWr),e(In,lWr),e(In,m7e),e(m7e,iWr),e(In,dWr),e(In,f7e),e(f7e,cWr),e(In,mWr),e(Ur,fWr),e(Ur,ie),e(ie,Xw),e(Xw,g7e),e(g7e,gWr),e(Xw,hWr),e(Xw,yre),e(yre,uWr),e(Xw,pWr),e(ie,_Wr),e(ie,zw),e(zw,h7e),e(h7e,bWr),e(zw,vWr),e(zw,Lre),e(Lre,FWr),e(zw,TWr),e(ie,MWr),e(ie,Qw),e(Qw,u7e),e(u7e,EWr),e(Qw,CWr),e(Qw,xre),e(xre,wWr),e(Qw,AWr),e(ie,yWr),e(ie,Ww),e(Ww,p7e),e(p7e,LWr),e(Ww,xWr),e(Ww,$re),e($re,$Wr),e(Ww,kWr),e(ie,SWr),e(ie,Uw),e(Uw,_7e),e(_7e,RWr),e(Uw,PWr),e(Uw,kre),e(kre,BWr),e(Uw,IWr),e(ie,NWr),e(ie,Hw),e(Hw,b7e),e(b7e,qWr),e(Hw,jWr),e(Hw,Sre),e(Sre,DWr),e(Hw,GWr),e(ie,OWr),e(ie,Jw),e(Jw,v7e),e(v7e,VWr),e(Jw,XWr),e(Jw,Rre),e(Rre,zWr),e(Jw,QWr),e(ie,WWr),e(ie,Yw),e(Yw,F7e),e(F7e,UWr),e(Yw,HWr),e(Yw,Pre),e(Pre,JWr),e(Yw,YWr),e(ie,KWr),e(ie,Kw),e(Kw,T7e),e(T7e,ZWr),e(Kw,eUr),e(Kw,Bre),e(Bre,oUr),e(Kw,rUr),e(ie,tUr),e(ie,Zw),e(Zw,M7e),e(M7e,aUr),e(Zw,nUr),e(Zw,Ire),e(Ire,sUr),e(Zw,lUr),e(ie,iUr),e(ie,eA),e(eA,E7e),e(E7e,dUr),e(eA,cUr),e(eA,Nre),e(Nre,mUr),e(eA,fUr),e(ie,gUr),e(ie,oA),e(oA,C7e),e(C7e,hUr),e(oA,uUr),e(oA,qre),e(qre,pUr),e(oA,_Ur),e(ie,bUr),e(ie,rA),e(rA,w7e),e(w7e,vUr),e(rA,FUr),e(rA,jre),e(jre,TUr),e(rA,MUr),e(ie,EUr),e(ie,tA),e(tA,A7e),e(A7e,CUr),e(tA,wUr),e(tA,Dre),e(Dre,AUr),e(tA,yUr),e(ie,LUr),e(ie,aA),e(aA,y7e),e(y7e,xUr),e(aA,$Ur),e(aA,Gre),e(Gre,kUr),e(aA,SUr),e(ie,RUr),e(ie,nA),e(nA,L7e),e(L7e,PUr),e(nA,BUr),e(nA,Ore),e(Ore,IUr),e(nA,NUr),e(ie,qUr),e(ie,sA),e(sA,x7e),e(x7e,jUr),e(sA,DUr),e(sA,Vre),e(Vre,GUr),e(sA,OUr),e(ie,VUr),e(ie,lA),e(lA,$7e),e($7e,XUr),e(lA,zUr),e(lA,Xre),e(Xre,QUr),e(lA,WUr),e(ie,UUr),e(ie,iA),e(iA,k7e),e(k7e,HUr),e(iA,JUr),e(iA,zre),e(zre,YUr),e(iA,KUr),e(ie,ZUr),e(ie,dA),e(dA,S7e),e(S7e,eHr),e(dA,oHr),e(dA,Qre),e(Qre,rHr),e(dA,tHr),e(ie,aHr),e(ie,cA),e(cA,R7e),e(R7e,nHr),e(cA,sHr),e(cA,Wre),e(Wre,lHr),e(cA,iHr),e(Ur,dHr),M(mA,Ur,null),b(m,rKe,_),b(m,wm,_),e(wm,fA),e(fA,P7e),M(uS,P7e,null),e(wm,cHr),e(wm,B7e),e(B7e,mHr),b(m,tKe,_),b(m,vr,_),M(pS,vr,null),e(vr,fHr),e(vr,Am),e(Am,gHr),e(Am,Ure),e(Ure,hHr),e(Am,uHr),e(Am,Hre),e(Hre,pHr),e(Am,_Hr),e(vr,bHr),e(vr,_S),e(_S,vHr),e(_S,I7e),e(I7e,FHr),e(_S,THr),e(vr,MHr),e(vr,ra),M(bS,ra,null),e(ra,EHr),e(ra,N7e),e(N7e,CHr),e(ra,wHr),e(ra,ym),e(ym,AHr),e(ym,q7e),e(q7e,yHr),e(ym,LHr),e(ym,Jre),e(Jre,xHr),e(ym,$Hr),e(ra,kHr),M(gA,ra,null),e(vr,SHr),e(vr,Hr),M(vS,Hr,null),e(Hr,RHr),e(Hr,j7e),e(j7e,PHr),e(Hr,BHr),e(Hr,Nn),e(Nn,IHr),e(Nn,D7e),e(D7e,NHr),e(Nn,qHr),e(Nn,G7e),e(G7e,jHr),e(Nn,DHr),e(Nn,O7e),e(O7e,GHr),e(Nn,OHr),e(Hr,VHr),e(Hr,de),e(de,hA),e(hA,V7e),e(V7e,XHr),e(hA,zHr),e(hA,Yre),e(Yre,QHr),e(hA,WHr),e(de,UHr),e(de,uA),e(uA,X7e),e(X7e,HHr),e(uA,JHr),e(uA,Kre),e(Kre,YHr),e(uA,KHr),e(de,ZHr),e(de,pA),e(pA,z7e),e(z7e,eJr),e(pA,oJr),e(pA,Zre),e(Zre,rJr),e(pA,tJr),e(de,aJr),e(de,_A),e(_A,Q7e),e(Q7e,nJr),e(_A,sJr),e(_A,ete),e(ete,lJr),e(_A,iJr),e(de,dJr),e(de,bA),e(bA,W7e),e(W7e,cJr),e(bA,mJr),e(bA,ote),e(ote,fJr),e(bA,gJr),e(de,hJr),e(de,vA),e(vA,U7e),e(U7e,uJr),e(vA,pJr),e(vA,rte),e(rte,_Jr),e(vA,bJr),e(de,vJr),e(de,FA),e(FA,H7e),e(H7e,FJr),e(FA,TJr),e(FA,tte),e(tte,MJr),e(FA,EJr),e(de,CJr),e(de,TA),e(TA,J7e),e(J7e,wJr),e(TA,AJr),e(TA,ate),e(ate,yJr),e(TA,LJr),e(de,xJr),e(de,MA),e(MA,Y7e),e(Y7e,$Jr),e(MA,kJr),e(MA,nte),e(nte,SJr),e(MA,RJr),e(de,PJr),e(de,EA),e(EA,K7e),e(K7e,BJr),e(EA,IJr),e(EA,ste),e(ste,NJr),e(EA,qJr),e(de,jJr),e(de,CA),e(CA,Z7e),e(Z7e,DJr),e(CA,GJr),e(CA,lte),e(lte,OJr),e(CA,VJr),e(de,XJr),e(de,wA),e(wA,eye),e(eye,zJr),e(wA,QJr),e(wA,ite),e(ite,WJr),e(wA,UJr),e(de,HJr),e(de,AA),e(AA,oye),e(oye,JJr),e(AA,YJr),e(AA,dte),e(dte,KJr),e(AA,ZJr),e(de,eYr),e(de,yA),e(yA,rye),e(rye,oYr),e(yA,rYr),e(yA,cte),e(cte,tYr),e(yA,aYr),e(de,nYr),e(de,LA),e(LA,tye),e(tye,sYr),e(LA,lYr),e(LA,mte),e(mte,iYr),e(LA,dYr),e(de,cYr),e(de,xA),e(xA,aye),e(aye,mYr),e(xA,fYr),e(xA,fte),e(fte,gYr),e(xA,hYr),e(de,uYr),e(de,$A),e($A,nye),e(nye,pYr),e($A,_Yr),e($A,gte),e(gte,bYr),e($A,vYr),e(de,FYr),e(de,kA),e(kA,sye),e(sye,TYr),e(kA,MYr),e(kA,hte),e(hte,EYr),e(kA,CYr),e(de,wYr),e(de,SA),e(SA,lye),e(lye,AYr),e(SA,yYr),e(SA,ute),e(ute,LYr),e(SA,xYr),e(de,$Yr),e(de,RA),e(RA,iye),e(iye,kYr),e(RA,SYr),e(RA,pte),e(pte,RYr),e(RA,PYr),e(de,BYr),e(de,PA),e(PA,dye),e(dye,IYr),e(PA,NYr),e(PA,_te),e(_te,qYr),e(PA,jYr),e(Hr,DYr),M(BA,Hr,null),b(m,aKe,_),b(m,Lm,_),e(Lm,IA),e(IA,cye),M(FS,cye,null),e(Lm,GYr),e(Lm,mye),e(mye,OYr),b(m,nKe,_),b(m,Fr,_),M(TS,Fr,null),e(Fr,VYr),e(Fr,xm),e(xm,XYr),e(xm,bte),e(bte,zYr),e(xm,QYr),e(xm,vte),e(vte,WYr),e(xm,UYr),e(Fr,HYr),e(Fr,MS),e(MS,JYr),e(MS,fye),e(fye,YYr),e(MS,KYr),e(Fr,ZYr),e(Fr,ta),M(ES,ta,null),e(ta,eKr),e(ta,gye),e(gye,oKr),e(ta,rKr),e(ta,$m),e($m,tKr),e($m,hye),e(hye,aKr),e($m,nKr),e($m,Fte),e(Fte,sKr),e($m,lKr),e(ta,iKr),M(NA,ta,null),e(Fr,dKr),e(Fr,Jr),M(CS,Jr,null),e(Jr,cKr),e(Jr,uye),e(uye,mKr),e(Jr,fKr),e(Jr,qn),e(qn,gKr),e(qn,pye),e(pye,hKr),e(qn,uKr),e(qn,_ye),e(_ye,pKr),e(qn,_Kr),e(qn,bye),e(bye,bKr),e(qn,vKr),e(Jr,FKr),e(Jr,vye),e(vye,qA),e(qA,Fye),e(Fye,TKr),e(qA,MKr),e(qA,Tte),e(Tte,EKr),e(qA,CKr),e(Jr,wKr),M(jA,Jr,null),b(m,sKe,_),b(m,km,_),e(km,DA),e(DA,Tye),M(wS,Tye,null),e(km,AKr),e(km,Mye),e(Mye,yKr),b(m,lKe,_),b(m,Tr,_),M(AS,Tr,null),e(Tr,LKr),e(Tr,Sm),e(Sm,xKr),e(Sm,Mte),e(Mte,$Kr),e(Sm,kKr),e(Sm,Ete),e(Ete,SKr),e(Sm,RKr),e(Tr,PKr),e(Tr,yS),e(yS,BKr),e(yS,Eye),e(Eye,IKr),e(yS,NKr),e(Tr,qKr),e(Tr,aa),M(LS,aa,null),e(aa,jKr),e(aa,Cye),e(Cye,DKr),e(aa,GKr),e(aa,Rm),e(Rm,OKr),e(Rm,wye),e(wye,VKr),e(Rm,XKr),e(Rm,Cte),e(Cte,zKr),e(Rm,QKr),e(aa,WKr),M(GA,aa,null),e(Tr,UKr),e(Tr,Yr),M(xS,Yr,null),e(Yr,HKr),e(Yr,Aye),e(Aye,JKr),e(Yr,YKr),e(Yr,jn),e(jn,KKr),e(jn,yye),e(yye,ZKr),e(jn,eZr),e(jn,Lye),e(Lye,oZr),e(jn,rZr),e(jn,xye),e(xye,tZr),e(jn,aZr),e(Yr,nZr),e(Yr,$ye),e($ye,OA),e(OA,kye),e(kye,sZr),e(OA,lZr),e(OA,wte),e(wte,iZr),e(OA,dZr),e(Yr,cZr),M(VA,Yr,null),b(m,iKe,_),b(m,Pm,_),e(Pm,XA),e(XA,Sye),M($S,Sye,null),e(Pm,mZr),e(Pm,Rye),e(Rye,fZr),b(m,dKe,_),b(m,Mr,_),M(kS,Mr,null),e(Mr,gZr),e(Mr,Bm),e(Bm,hZr),e(Bm,Ate),e(Ate,uZr),e(Bm,pZr),e(Bm,yte),e(yte,_Zr),e(Bm,bZr),e(Mr,vZr),e(Mr,SS),e(SS,FZr),e(SS,Pye),e(Pye,TZr),e(SS,MZr),e(Mr,EZr),e(Mr,na),M(RS,na,null),e(na,CZr),e(na,Bye),e(Bye,wZr),e(na,AZr),e(na,Im),e(Im,yZr),e(Im,Iye),e(Iye,LZr),e(Im,xZr),e(Im,Lte),e(Lte,$Zr),e(Im,kZr),e(na,SZr),M(zA,na,null),e(Mr,RZr),e(Mr,Kr),M(PS,Kr,null),e(Kr,PZr),e(Kr,Nye),e(Nye,BZr),e(Kr,IZr),e(Kr,Dn),e(Dn,NZr),e(Dn,qye),e(qye,qZr),e(Dn,jZr),e(Dn,jye),e(jye,DZr),e(Dn,GZr),e(Dn,Dye),e(Dye,OZr),e(Dn,VZr),e(Kr,XZr),e(Kr,te),e(te,QA),e(QA,Gye),e(Gye,zZr),e(QA,QZr),e(QA,xte),e(xte,WZr),e(QA,UZr),e(te,HZr),e(te,WA),e(WA,Oye),e(Oye,JZr),e(WA,YZr),e(WA,$te),e($te,KZr),e(WA,ZZr),e(te,eet),e(te,UA),e(UA,Vye),e(Vye,oet),e(UA,ret),e(UA,kte),e(kte,tet),e(UA,aet),e(te,net),e(te,HA),e(HA,Xye),e(Xye,set),e(HA,iet),e(HA,Ste),e(Ste,det),e(HA,cet),e(te,met),e(te,JA),e(JA,zye),e(zye,fet),e(JA,get),e(JA,Rte),e(Rte,het),e(JA,uet),e(te,pet),e(te,YA),e(YA,Qye),e(Qye,_et),e(YA,bet),e(YA,Pte),e(Pte,vet),e(YA,Fet),e(te,Tet),e(te,KA),e(KA,Wye),e(Wye,Met),e(KA,Eet),e(KA,Bte),e(Bte,Cet),e(KA,wet),e(te,Aet),e(te,ZA),e(ZA,Uye),e(Uye,yet),e(ZA,Let),e(ZA,Ite),e(Ite,xet),e(ZA,$et),e(te,ket),e(te,e6),e(e6,Hye),e(Hye,Set),e(e6,Ret),e(e6,Nte),e(Nte,Pet),e(e6,Bet),e(te,Iet),e(te,o6),e(o6,Jye),e(Jye,Net),e(o6,qet),e(o6,qte),e(qte,jet),e(o6,Det),e(te,Get),e(te,r6),e(r6,Yye),e(Yye,Oet),e(r6,Vet),e(r6,jte),e(jte,Xet),e(r6,zet),e(te,Qet),e(te,t6),e(t6,Kye),e(Kye,Wet),e(t6,Uet),e(t6,Dte),e(Dte,Het),e(t6,Jet),e(te,Yet),e(te,a6),e(a6,Zye),e(Zye,Ket),e(a6,Zet),e(a6,Gte),e(Gte,eot),e(a6,oot),e(te,rot),e(te,n6),e(n6,eLe),e(eLe,tot),e(n6,aot),e(n6,Ote),e(Ote,not),e(n6,sot),e(te,lot),e(te,s6),e(s6,oLe),e(oLe,iot),e(s6,dot),e(s6,Vte),e(Vte,cot),e(s6,mot),e(te,fot),e(te,l6),e(l6,rLe),e(rLe,got),e(l6,hot),e(l6,Xte),e(Xte,uot),e(l6,pot),e(te,_ot),e(te,i6),e(i6,tLe),e(tLe,bot),e(i6,vot),e(i6,zte),e(zte,Fot),e(i6,Tot),e(te,Mot),e(te,d6),e(d6,aLe),e(aLe,Eot),e(d6,Cot),e(d6,Qte),e(Qte,wot),e(d6,Aot),e(te,yot),e(te,c6),e(c6,nLe),e(nLe,Lot),e(c6,xot),e(c6,Wte),e(Wte,$ot),e(c6,kot),e(te,Sot),e(te,m6),e(m6,sLe),e(sLe,Rot),e(m6,Pot),e(m6,Ute),e(Ute,Bot),e(m6,Iot),e(te,Not),e(te,f6),e(f6,lLe),e(lLe,qot),e(f6,jot),e(f6,Hte),e(Hte,Dot),e(f6,Got),e(te,Oot),e(te,g6),e(g6,iLe),e(iLe,Vot),e(g6,Xot),e(g6,Jte),e(Jte,zot),e(g6,Qot),e(te,Wot),e(te,h6),e(h6,dLe),e(dLe,Uot),e(h6,Hot),e(h6,Yte),e(Yte,Jot),e(h6,Yot),e(te,Kot),e(te,u6),e(u6,cLe),e(cLe,Zot),e(u6,ert),e(u6,Kte),e(Kte,ort),e(u6,rrt),e(te,trt),e(te,p6),e(p6,mLe),e(mLe,art),e(p6,nrt),e(p6,Zte),e(Zte,srt),e(p6,lrt),e(te,irt),e(te,_6),e(_6,fLe),e(fLe,drt),e(_6,crt),e(_6,eae),e(eae,mrt),e(_6,frt),e(te,grt),e(te,b6),e(b6,gLe),e(gLe,hrt),e(b6,urt),e(b6,oae),e(oae,prt),e(b6,_rt),e(Kr,brt),M(v6,Kr,null),b(m,cKe,_),b(m,Nm,_),e(Nm,F6),e(F6,hLe),M(BS,hLe,null),e(Nm,vrt),e(Nm,uLe),e(uLe,Frt),b(m,mKe,_),b(m,Er,_),M(IS,Er,null),e(Er,Trt),e(Er,qm),e(qm,Mrt),e(qm,rae),e(rae,Ert),e(qm,Crt),e(qm,tae),e(tae,wrt),e(qm,Art),e(Er,yrt),e(Er,NS),e(NS,Lrt),e(NS,pLe),e(pLe,xrt),e(NS,$rt),e(Er,krt),e(Er,sa),M(qS,sa,null),e(sa,Srt),e(sa,_Le),e(_Le,Rrt),e(sa,Prt),e(sa,jm),e(jm,Brt),e(jm,bLe),e(bLe,Irt),e(jm,Nrt),e(jm,aae),e(aae,qrt),e(jm,jrt),e(sa,Drt),M(T6,sa,null),e(Er,Grt),e(Er,Zr),M(jS,Zr,null),e(Zr,Ort),e(Zr,vLe),e(vLe,Vrt),e(Zr,Xrt),e(Zr,Gn),e(Gn,zrt),e(Gn,FLe),e(FLe,Qrt),e(Gn,Wrt),e(Gn,TLe),e(TLe,Urt),e(Gn,Hrt),e(Gn,MLe),e(MLe,Jrt),e(Gn,Yrt),e(Zr,Krt),e(Zr,xe),e(xe,M6),e(M6,ELe),e(ELe,Zrt),e(M6,ett),e(M6,nae),e(nae,ott),e(M6,rtt),e(xe,ttt),e(xe,E6),e(E6,CLe),e(CLe,att),e(E6,ntt),e(E6,sae),e(sae,stt),e(E6,ltt),e(xe,itt),e(xe,C6),e(C6,wLe),e(wLe,dtt),e(C6,ctt),e(C6,lae),e(lae,mtt),e(C6,ftt),e(xe,gtt),e(xe,w6),e(w6,ALe),e(ALe,htt),e(w6,utt),e(w6,iae),e(iae,ptt),e(w6,_tt),e(xe,btt),e(xe,A6),e(A6,yLe),e(yLe,vtt),e(A6,Ftt),e(A6,dae),e(dae,Ttt),e(A6,Mtt),e(xe,Ett),e(xe,y6),e(y6,LLe),e(LLe,Ctt),e(y6,wtt),e(y6,cae),e(cae,Att),e(y6,ytt),e(xe,Ltt),e(xe,L6),e(L6,xLe),e(xLe,xtt),e(L6,$tt),e(L6,mae),e(mae,ktt),e(L6,Stt),e(xe,Rtt),e(xe,x6),e(x6,$Le),e($Le,Ptt),e(x6,Btt),e(x6,fae),e(fae,Itt),e(x6,Ntt),e(xe,qtt),e(xe,$6),e($6,kLe),e(kLe,jtt),e($6,Dtt),e($6,gae),e(gae,Gtt),e($6,Ott),e(xe,Vtt),e(xe,k6),e(k6,SLe),e(SLe,Xtt),e(k6,ztt),e(k6,hae),e(hae,Qtt),e(k6,Wtt),e(Zr,Utt),M(S6,Zr,null),b(m,fKe,_),b(m,Dm,_),e(Dm,R6),e(R6,RLe),M(DS,RLe,null),e(Dm,Htt),e(Dm,PLe),e(PLe,Jtt),b(m,gKe,_),b(m,Cr,_),M(GS,Cr,null),e(Cr,Ytt),e(Cr,Gm),e(Gm,Ktt),e(Gm,uae),e(uae,Ztt),e(Gm,eat),e(Gm,pae),e(pae,oat),e(Gm,rat),e(Cr,tat),e(Cr,OS),e(OS,aat),e(OS,BLe),e(BLe,nat),e(OS,sat),e(Cr,lat),e(Cr,la),M(VS,la,null),e(la,iat),e(la,ILe),e(ILe,dat),e(la,cat),e(la,Om),e(Om,mat),e(Om,NLe),e(NLe,fat),e(Om,gat),e(Om,_ae),e(_ae,hat),e(Om,uat),e(la,pat),M(P6,la,null),e(Cr,_at),e(Cr,et),M(XS,et,null),e(et,bat),e(et,qLe),e(qLe,vat),e(et,Fat),e(et,On),e(On,Tat),e(On,jLe),e(jLe,Mat),e(On,Eat),e(On,DLe),e(DLe,Cat),e(On,wat),e(On,GLe),e(GLe,Aat),e(On,yat),e(et,Lat),e(et,Ee),e(Ee,B6),e(B6,OLe),e(OLe,xat),e(B6,$at),e(B6,bae),e(bae,kat),e(B6,Sat),e(Ee,Rat),e(Ee,I6),e(I6,VLe),e(VLe,Pat),e(I6,Bat),e(I6,vae),e(vae,Iat),e(I6,Nat),e(Ee,qat),e(Ee,N6),e(N6,XLe),e(XLe,jat),e(N6,Dat),e(N6,Fae),e(Fae,Gat),e(N6,Oat),e(Ee,Vat),e(Ee,q6),e(q6,zLe),e(zLe,Xat),e(q6,zat),e(q6,Tae),e(Tae,Qat),e(q6,Wat),e(Ee,Uat),e(Ee,j6),e(j6,QLe),e(QLe,Hat),e(j6,Jat),e(j6,Mae),e(Mae,Yat),e(j6,Kat),e(Ee,Zat),e(Ee,D6),e(D6,WLe),e(WLe,ent),e(D6,ont),e(D6,Eae),e(Eae,rnt),e(D6,tnt),e(Ee,ant),e(Ee,G6),e(G6,ULe),e(ULe,nnt),e(G6,snt),e(G6,Cae),e(Cae,lnt),e(G6,int),e(Ee,dnt),e(Ee,O6),e(O6,HLe),e(HLe,cnt),e(O6,mnt),e(O6,wae),e(wae,fnt),e(O6,gnt),e(Ee,hnt),e(Ee,V6),e(V6,JLe),e(JLe,unt),e(V6,pnt),e(V6,Aae),e(Aae,_nt),e(V6,bnt),e(Ee,vnt),e(Ee,X6),e(X6,YLe),e(YLe,Fnt),e(X6,Tnt),e(X6,yae),e(yae,Mnt),e(X6,Ent),e(Ee,Cnt),e(Ee,z6),e(z6,KLe),e(KLe,wnt),e(z6,Ant),e(z6,Lae),e(Lae,ynt),e(z6,Lnt),e(Ee,xnt),e(Ee,Q6),e(Q6,ZLe),e(ZLe,$nt),e(Q6,knt),e(Q6,xae),e(xae,Snt),e(Q6,Rnt),e(Ee,Pnt),e(Ee,W6),e(W6,e8e),e(e8e,Bnt),e(W6,Int),e(W6,$ae),e($ae,Nnt),e(W6,qnt),e(et,jnt),M(U6,et,null),b(m,hKe,_),b(m,Vm,_),e(Vm,H6),e(H6,o8e),M(zS,o8e,null),e(Vm,Dnt),e(Vm,r8e),e(r8e,Gnt),b(m,uKe,_),b(m,wr,_),M(QS,wr,null),e(wr,Ont),e(wr,Xm),e(Xm,Vnt),e(Xm,kae),e(kae,Xnt),e(Xm,znt),e(Xm,Sae),e(Sae,Qnt),e(Xm,Wnt),e(wr,Unt),e(wr,WS),e(WS,Hnt),e(WS,t8e),e(t8e,Jnt),e(WS,Ynt),e(wr,Knt),e(wr,ia),M(US,ia,null),e(ia,Znt),e(ia,a8e),e(a8e,est),e(ia,ost),e(ia,zm),e(zm,rst),e(zm,n8e),e(n8e,tst),e(zm,ast),e(zm,Rae),e(Rae,nst),e(zm,sst),e(ia,lst),M(J6,ia,null),e(wr,ist),e(wr,ot),M(HS,ot,null),e(ot,dst),e(ot,s8e),e(s8e,cst),e(ot,mst),e(ot,Vn),e(Vn,fst),e(Vn,l8e),e(l8e,gst),e(Vn,hst),e(Vn,i8e),e(i8e,ust),e(Vn,pst),e(Vn,d8e),e(d8e,_st),e(Vn,bst),e(ot,vst),e(ot,$e),e($e,Y6),e(Y6,c8e),e(c8e,Fst),e(Y6,Tst),e(Y6,Pae),e(Pae,Mst),e(Y6,Est),e($e,Cst),e($e,K6),e(K6,m8e),e(m8e,wst),e(K6,Ast),e(K6,Bae),e(Bae,yst),e(K6,Lst),e($e,xst),e($e,Z6),e(Z6,f8e),e(f8e,$st),e(Z6,kst),e(Z6,Iae),e(Iae,Sst),e(Z6,Rst),e($e,Pst),e($e,e7),e(e7,g8e),e(g8e,Bst),e(e7,Ist),e(e7,Nae),e(Nae,Nst),e(e7,qst),e($e,jst),e($e,o7),e(o7,h8e),e(h8e,Dst),e(o7,Gst),e(o7,qae),e(qae,Ost),e(o7,Vst),e($e,Xst),e($e,r7),e(r7,u8e),e(u8e,zst),e(r7,Qst),e(r7,jae),e(jae,Wst),e(r7,Ust),e($e,Hst),e($e,t7),e(t7,p8e),e(p8e,Jst),e(t7,Yst),e(t7,Dae),e(Dae,Kst),e(t7,Zst),e($e,elt),e($e,a7),e(a7,_8e),e(_8e,olt),e(a7,rlt),e(a7,Gae),e(Gae,tlt),e(a7,alt),e($e,nlt),e($e,n7),e(n7,b8e),e(b8e,slt),e(n7,llt),e(n7,Oae),e(Oae,ilt),e(n7,dlt),e($e,clt),e($e,s7),e(s7,v8e),e(v8e,mlt),e(s7,flt),e(s7,Vae),e(Vae,glt),e(s7,hlt),e(ot,ult),M(l7,ot,null),b(m,pKe,_),b(m,Qm,_),e(Qm,i7),e(i7,F8e),M(JS,F8e,null),e(Qm,plt),e(Qm,T8e),e(T8e,_lt),b(m,_Ke,_),b(m,Ar,_),M(YS,Ar,null),e(Ar,blt),e(Ar,Wm),e(Wm,vlt),e(Wm,Xae),e(Xae,Flt),e(Wm,Tlt),e(Wm,zae),e(zae,Mlt),e(Wm,Elt),e(Ar,Clt),e(Ar,KS),e(KS,wlt),e(KS,M8e),e(M8e,Alt),e(KS,ylt),e(Ar,Llt),e(Ar,da),M(ZS,da,null),e(da,xlt),e(da,E8e),e(E8e,$lt),e(da,klt),e(da,Um),e(Um,Slt),e(Um,C8e),e(C8e,Rlt),e(Um,Plt),e(Um,Qae),e(Qae,Blt),e(Um,Ilt),e(da,Nlt),M(d7,da,null),e(Ar,qlt),e(Ar,rt),M(eR,rt,null),e(rt,jlt),e(rt,w8e),e(w8e,Dlt),e(rt,Glt),e(rt,Xn),e(Xn,Olt),e(Xn,A8e),e(A8e,Vlt),e(Xn,Xlt),e(Xn,y8e),e(y8e,zlt),e(Xn,Qlt),e(Xn,L8e),e(L8e,Wlt),e(Xn,Ult),e(rt,Hlt),e(rt,ke),e(ke,c7),e(c7,x8e),e(x8e,Jlt),e(c7,Ylt),e(c7,Wae),e(Wae,Klt),e(c7,Zlt),e(ke,eit),e(ke,m7),e(m7,$8e),e($8e,oit),e(m7,rit),e(m7,Uae),e(Uae,tit),e(m7,ait),e(ke,nit),e(ke,f7),e(f7,k8e),e(k8e,sit),e(f7,lit),e(f7,Hae),e(Hae,iit),e(f7,dit),e(ke,cit),e(ke,g7),e(g7,S8e),e(S8e,mit),e(g7,fit),e(g7,Jae),e(Jae,git),e(g7,hit),e(ke,uit),e(ke,h7),e(h7,R8e),e(R8e,pit),e(h7,_it),e(h7,Yae),e(Yae,bit),e(h7,vit),e(ke,Fit),e(ke,u7),e(u7,P8e),e(P8e,Tit),e(u7,Mit),e(u7,Kae),e(Kae,Eit),e(u7,Cit),e(ke,wit),e(ke,p7),e(p7,B8e),e(B8e,Ait),e(p7,yit),e(p7,Zae),e(Zae,Lit),e(p7,xit),e(ke,$it),e(ke,_7),e(_7,I8e),e(I8e,kit),e(_7,Sit),e(_7,ene),e(ene,Rit),e(_7,Pit),e(ke,Bit),e(ke,b7),e(b7,N8e),e(N8e,Iit),e(b7,Nit),e(b7,one),e(one,qit),e(b7,jit),e(ke,Dit),e(ke,v7),e(v7,q8e),e(q8e,Git),e(v7,Oit),e(v7,rne),e(rne,Vit),e(v7,Xit),e(rt,zit),M(F7,rt,null),b(m,bKe,_),b(m,Hm,_),e(Hm,T7),e(T7,j8e),M(oR,j8e,null),e(Hm,Qit),e(Hm,D8e),e(D8e,Wit),b(m,vKe,_),b(m,yr,_),M(rR,yr,null),e(yr,Uit),e(yr,Jm),e(Jm,Hit),e(Jm,tne),e(tne,Jit),e(Jm,Yit),e(Jm,ane),e(ane,Kit),e(Jm,Zit),e(yr,edt),e(yr,tR),e(tR,odt),e(tR,G8e),e(G8e,rdt),e(tR,tdt),e(yr,adt),e(yr,ca),M(aR,ca,null),e(ca,ndt),e(ca,O8e),e(O8e,sdt),e(ca,ldt),e(ca,Ym),e(Ym,idt),e(Ym,V8e),e(V8e,ddt),e(Ym,cdt),e(Ym,nne),e(nne,mdt),e(Ym,fdt),e(ca,gdt),M(M7,ca,null),e(yr,hdt),e(yr,tt),M(nR,tt,null),e(tt,udt),e(tt,X8e),e(X8e,pdt),e(tt,_dt),e(tt,zn),e(zn,bdt),e(zn,z8e),e(z8e,vdt),e(zn,Fdt),e(zn,Q8e),e(Q8e,Tdt),e(zn,Mdt),e(zn,W8e),e(W8e,Edt),e(zn,Cdt),e(tt,wdt),e(tt,Se),e(Se,E7),e(E7,U8e),e(U8e,Adt),e(E7,ydt),e(E7,sne),e(sne,Ldt),e(E7,xdt),e(Se,$dt),e(Se,C7),e(C7,H8e),e(H8e,kdt),e(C7,Sdt),e(C7,lne),e(lne,Rdt),e(C7,Pdt),e(Se,Bdt),e(Se,w7),e(w7,J8e),e(J8e,Idt),e(w7,Ndt),e(w7,ine),e(ine,qdt),e(w7,jdt),e(Se,Ddt),e(Se,A7),e(A7,Y8e),e(Y8e,Gdt),e(A7,Odt),e(A7,dne),e(dne,Vdt),e(A7,Xdt),e(Se,zdt),e(Se,y7),e(y7,K8e),e(K8e,Qdt),e(y7,Wdt),e(y7,cne),e(cne,Udt),e(y7,Hdt),e(Se,Jdt),e(Se,L7),e(L7,Z8e),e(Z8e,Ydt),e(L7,Kdt),e(L7,mne),e(mne,Zdt),e(L7,ect),e(Se,oct),e(Se,x7),e(x7,e9e),e(e9e,rct),e(x7,tct),e(x7,fne),e(fne,act),e(x7,nct),e(Se,sct),e(Se,$7),e($7,o9e),e(o9e,lct),e($7,ict),e($7,gne),e(gne,dct),e($7,cct),e(Se,mct),e(Se,k7),e(k7,r9e),e(r9e,fct),e(k7,gct),e(k7,hne),e(hne,hct),e(k7,uct),e(Se,pct),e(Se,S7),e(S7,t9e),e(t9e,_ct),e(S7,bct),e(S7,une),e(une,vct),e(S7,Fct),e(tt,Tct),M(R7,tt,null),b(m,FKe,_),b(m,Km,_),e(Km,P7),e(P7,a9e),M(sR,a9e,null),e(Km,Mct),e(Km,n9e),e(n9e,Ect),b(m,TKe,_),b(m,Lr,_),M(lR,Lr,null),e(Lr,Cct),e(Lr,Zm),e(Zm,wct),e(Zm,pne),e(pne,Act),e(Zm,yct),e(Zm,_ne),e(_ne,Lct),e(Zm,xct),e(Lr,$ct),e(Lr,iR),e(iR,kct),e(iR,s9e),e(s9e,Sct),e(iR,Rct),e(Lr,Pct),e(Lr,ma),M(dR,ma,null),e(ma,Bct),e(ma,l9e),e(l9e,Ict),e(ma,Nct),e(ma,ef),e(ef,qct),e(ef,i9e),e(i9e,jct),e(ef,Dct),e(ef,bne),e(bne,Gct),e(ef,Oct),e(ma,Vct),M(B7,ma,null),e(Lr,Xct),e(Lr,at),M(cR,at,null),e(at,zct),e(at,d9e),e(d9e,Qct),e(at,Wct),e(at,Qn),e(Qn,Uct),e(Qn,c9e),e(c9e,Hct),e(Qn,Jct),e(Qn,m9e),e(m9e,Yct),e(Qn,Kct),e(Qn,f9e),e(f9e,Zct),e(Qn,emt),e(at,omt),e(at,Re),e(Re,I7),e(I7,g9e),e(g9e,rmt),e(I7,tmt),e(I7,vne),e(vne,amt),e(I7,nmt),e(Re,smt),e(Re,N7),e(N7,h9e),e(h9e,lmt),e(N7,imt),e(N7,Fne),e(Fne,dmt),e(N7,cmt),e(Re,mmt),e(Re,q7),e(q7,u9e),e(u9e,fmt),e(q7,gmt),e(q7,Tne),e(Tne,hmt),e(q7,umt),e(Re,pmt),e(Re,j7),e(j7,p9e),e(p9e,_mt),e(j7,bmt),e(j7,Mne),e(Mne,vmt),e(j7,Fmt),e(Re,Tmt),e(Re,D7),e(D7,_9e),e(_9e,Mmt),e(D7,Emt),e(D7,Ene),e(Ene,Cmt),e(D7,wmt),e(Re,Amt),e(Re,G7),e(G7,b9e),e(b9e,ymt),e(G7,Lmt),e(G7,Cne),e(Cne,xmt),e(G7,$mt),e(Re,kmt),e(Re,O7),e(O7,v9e),e(v9e,Smt),e(O7,Rmt),e(O7,wne),e(wne,Pmt),e(O7,Bmt),e(Re,Imt),e(Re,V7),e(V7,F9e),e(F9e,Nmt),e(V7,qmt),e(V7,Ane),e(Ane,jmt),e(V7,Dmt),e(Re,Gmt),e(Re,X7),e(X7,T9e),e(T9e,Omt),e(X7,Vmt),e(X7,yne),e(yne,Xmt),e(X7,zmt),e(Re,Qmt),e(Re,z7),e(z7,M9e),e(M9e,Wmt),e(z7,Umt),e(z7,Lne),e(Lne,Hmt),e(z7,Jmt),e(at,Ymt),M(Q7,at,null),b(m,MKe,_),b(m,of,_),e(of,W7),e(W7,E9e),M(mR,E9e,null),e(of,Kmt),e(of,C9e),e(C9e,Zmt),b(m,EKe,_),b(m,xr,_),M(fR,xr,null),e(xr,eft),e(xr,rf),e(rf,oft),e(rf,xne),e(xne,rft),e(rf,tft),e(rf,$ne),e($ne,aft),e(rf,nft),e(xr,sft),e(xr,gR),e(gR,lft),e(gR,w9e),e(w9e,ift),e(gR,dft),e(xr,cft),e(xr,fa),M(hR,fa,null),e(fa,mft),e(fa,A9e),e(A9e,fft),e(fa,gft),e(fa,tf),e(tf,hft),e(tf,y9e),e(y9e,uft),e(tf,pft),e(tf,kne),e(kne,_ft),e(tf,bft),e(fa,vft),M(U7,fa,null),e(xr,Fft),e(xr,nt),M(uR,nt,null),e(nt,Tft),e(nt,L9e),e(L9e,Mft),e(nt,Eft),e(nt,Wn),e(Wn,Cft),e(Wn,x9e),e(x9e,wft),e(Wn,Aft),e(Wn,$9e),e($9e,yft),e(Wn,Lft),e(Wn,k9e),e(k9e,xft),e(Wn,$ft),e(nt,kft),e(nt,Xe),e(Xe,H7),e(H7,S9e),e(S9e,Sft),e(H7,Rft),e(H7,Sne),e(Sne,Pft),e(H7,Bft),e(Xe,Ift),e(Xe,J7),e(J7,R9e),e(R9e,Nft),e(J7,qft),e(J7,Rne),e(Rne,jft),e(J7,Dft),e(Xe,Gft),e(Xe,Y7),e(Y7,P9e),e(P9e,Oft),e(Y7,Vft),e(Y7,Pne),e(Pne,Xft),e(Y7,zft),e(Xe,Qft),e(Xe,K7),e(K7,B9e),e(B9e,Wft),e(K7,Uft),e(K7,Bne),e(Bne,Hft),e(K7,Jft),e(Xe,Yft),e(Xe,Z7),e(Z7,I9e),e(I9e,Kft),e(Z7,Zft),e(Z7,Ine),e(Ine,egt),e(Z7,ogt),e(Xe,rgt),e(Xe,ey),e(ey,N9e),e(N9e,tgt),e(ey,agt),e(ey,Nne),e(Nne,ngt),e(ey,sgt),e(Xe,lgt),e(Xe,oy),e(oy,q9e),e(q9e,igt),e(oy,dgt),e(oy,qne),e(qne,cgt),e(oy,mgt),e(Xe,fgt),e(Xe,ry),e(ry,j9e),e(j9e,ggt),e(ry,hgt),e(ry,jne),e(jne,ugt),e(ry,pgt),e(nt,_gt),M(ty,nt,null),b(m,CKe,_),b(m,af,_),e(af,ay),e(ay,D9e),M(pR,D9e,null),e(af,bgt),e(af,G9e),e(G9e,vgt),b(m,wKe,_),b(m,$r,_),M(_R,$r,null),e($r,Fgt),e($r,nf),e(nf,Tgt),e(nf,Dne),e(Dne,Mgt),e(nf,Egt),e(nf,Gne),e(Gne,Cgt),e(nf,wgt),e($r,Agt),e($r,bR),e(bR,ygt),e(bR,O9e),e(O9e,Lgt),e(bR,xgt),e($r,$gt),e($r,ga),M(vR,ga,null),e(ga,kgt),e(ga,V9e),e(V9e,Sgt),e(ga,Rgt),e(ga,sf),e(sf,Pgt),e(sf,X9e),e(X9e,Bgt),e(sf,Igt),e(sf,One),e(One,Ngt),e(sf,qgt),e(ga,jgt),M(ny,ga,null),e($r,Dgt),e($r,st),M(FR,st,null),e(st,Ggt),e(st,z9e),e(z9e,Ogt),e(st,Vgt),e(st,Un),e(Un,Xgt),e(Un,Q9e),e(Q9e,zgt),e(Un,Qgt),e(Un,W9e),e(W9e,Wgt),e(Un,Ugt),e(Un,U9e),e(U9e,Hgt),e(Un,Jgt),e(st,Ygt),e(st,ze),e(ze,sy),e(sy,H9e),e(H9e,Kgt),e(sy,Zgt),e(sy,Vne),e(Vne,eht),e(sy,oht),e(ze,rht),e(ze,ly),e(ly,J9e),e(J9e,tht),e(ly,aht),e(ly,Xne),e(Xne,nht),e(ly,sht),e(ze,lht),e(ze,iy),e(iy,Y9e),e(Y9e,iht),e(iy,dht),e(iy,zne),e(zne,cht),e(iy,mht),e(ze,fht),e(ze,dy),e(dy,K9e),e(K9e,ght),e(dy,hht),e(dy,Qne),e(Qne,uht),e(dy,pht),e(ze,_ht),e(ze,cy),e(cy,Z9e),e(Z9e,bht),e(cy,vht),e(cy,Wne),e(Wne,Fht),e(cy,Tht),e(ze,Mht),e(ze,my),e(my,exe),e(exe,Eht),e(my,Cht),e(my,Une),e(Une,wht),e(my,Aht),e(ze,yht),e(ze,fy),e(fy,oxe),e(oxe,Lht),e(fy,xht),e(fy,Hne),e(Hne,$ht),e(fy,kht),e(ze,Sht),e(ze,gy),e(gy,rxe),e(rxe,Rht),e(gy,Pht),e(gy,Jne),e(Jne,Bht),e(gy,Iht),e(st,Nht),M(hy,st,null),b(m,AKe,_),b(m,lf,_),e(lf,uy),e(uy,txe),M(TR,txe,null),e(lf,qht),e(lf,axe),e(axe,jht),b(m,yKe,_),b(m,kr,_),M(MR,kr,null),e(kr,Dht),e(kr,df),e(df,Ght),e(df,Yne),e(Yne,Oht),e(df,Vht),e(df,Kne),e(Kne,Xht),e(df,zht),e(kr,Qht),e(kr,ER),e(ER,Wht),e(ER,nxe),e(nxe,Uht),e(ER,Hht),e(kr,Jht),e(kr,ha),M(CR,ha,null),e(ha,Yht),e(ha,sxe),e(sxe,Kht),e(ha,Zht),e(ha,cf),e(cf,eut),e(cf,lxe),e(lxe,out),e(cf,rut),e(cf,Zne),e(Zne,tut),e(cf,aut),e(ha,nut),M(py,ha,null),e(kr,sut),e(kr,lt),M(wR,lt,null),e(lt,lut),e(lt,ixe),e(ixe,iut),e(lt,dut),e(lt,Hn),e(Hn,cut),e(Hn,dxe),e(dxe,mut),e(Hn,fut),e(Hn,cxe),e(cxe,gut),e(Hn,hut),e(Hn,mxe),e(mxe,uut),e(Hn,put),e(lt,_ut),e(lt,fxe),e(fxe,_y),e(_y,gxe),e(gxe,but),e(_y,vut),e(_y,ese),e(ese,Fut),e(_y,Tut),e(lt,Mut),M(by,lt,null),b(m,LKe,_),b(m,mf,_),e(mf,vy),e(vy,hxe),M(AR,hxe,null),e(mf,Eut),e(mf,uxe),e(uxe,Cut),b(m,xKe,_),b(m,Sr,_),M(yR,Sr,null),e(Sr,wut),e(Sr,ff),e(ff,Aut),e(ff,ose),e(ose,yut),e(ff,Lut),e(ff,rse),e(rse,xut),e(ff,$ut),e(Sr,kut),e(Sr,LR),e(LR,Sut),e(LR,pxe),e(pxe,Rut),e(LR,Put),e(Sr,But),e(Sr,ua),M(xR,ua,null),e(ua,Iut),e(ua,_xe),e(_xe,Nut),e(ua,qut),e(ua,gf),e(gf,jut),e(gf,bxe),e(bxe,Dut),e(gf,Gut),e(gf,tse),e(tse,Out),e(gf,Vut),e(ua,Xut),M(Fy,ua,null),e(Sr,zut),e(Sr,it),M($R,it,null),e(it,Qut),e(it,vxe),e(vxe,Wut),e(it,Uut),e(it,Jn),e(Jn,Hut),e(Jn,Fxe),e(Fxe,Jut),e(Jn,Yut),e(Jn,Txe),e(Txe,Kut),e(Jn,Zut),e(Jn,Mxe),e(Mxe,ept),e(Jn,opt),e(it,rpt),e(it,kR),e(kR,Ty),e(Ty,Exe),e(Exe,tpt),e(Ty,apt),e(Ty,ase),e(ase,npt),e(Ty,spt),e(kR,lpt),e(kR,My),e(My,Cxe),e(Cxe,ipt),e(My,dpt),e(My,nse),e(nse,cpt),e(My,mpt),e(it,fpt),M(Ey,it,null),b(m,$Ke,_),b(m,hf,_),e(hf,Cy),e(Cy,wxe),M(SR,wxe,null),e(hf,gpt),e(hf,Axe),e(Axe,hpt),b(m,kKe,_),b(m,Rr,_),M(RR,Rr,null),e(Rr,upt),e(Rr,uf),e(uf,ppt),e(uf,sse),e(sse,_pt),e(uf,bpt),e(uf,lse),e(lse,vpt),e(uf,Fpt),e(Rr,Tpt),e(Rr,PR),e(PR,Mpt),e(PR,yxe),e(yxe,Ept),e(PR,Cpt),e(Rr,wpt),e(Rr,pa),M(BR,pa,null),e(pa,Apt),e(pa,Lxe),e(Lxe,ypt),e(pa,Lpt),e(pa,pf),e(pf,xpt),e(pf,xxe),e(xxe,$pt),e(pf,kpt),e(pf,ise),e(ise,Spt),e(pf,Rpt),e(pa,Ppt),M(wy,pa,null),e(Rr,Bpt),e(Rr,dt),M(IR,dt,null),e(dt,Ipt),e(dt,$xe),e($xe,Npt),e(dt,qpt),e(dt,Yn),e(Yn,jpt),e(Yn,kxe),e(kxe,Dpt),e(Yn,Gpt),e(Yn,Sxe),e(Sxe,Opt),e(Yn,Vpt),e(Yn,Rxe),e(Rxe,Xpt),e(Yn,zpt),e(dt,Qpt),e(dt,Pxe),e(Pxe,Ay),e(Ay,Bxe),e(Bxe,Wpt),e(Ay,Upt),e(Ay,dse),e(dse,Hpt),e(Ay,Jpt),e(dt,Ypt),M(yy,dt,null),SKe=!0},p(m,[_]){const NR={};_&2&&(NR.$$scope={dirty:_,ctx:m}),wf.$set(NR);const Ixe={};_&2&&(Ixe.$$scope={dirty:_,ctx:m}),Oh.$set(Ixe);const Nxe={};_&2&&(Nxe.$$scope={dirty:_,ctx:m}),Cu.$set(Nxe);const qxe={};_&2&&(qxe.$$scope={dirty:_,ctx:m}),mp.$set(qxe);const qR={};_&2&&(qR.$$scope={dirty:_,ctx:m}),fp.$set(qR);const jxe={};_&2&&(jxe.$$scope={dirty:_,ctx:m}),Bp.$set(jxe);const Kn={};_&2&&(Kn.$$scope={dirty:_,ctx:m}),Ip.$set(Kn);const Dxe={};_&2&&(Dxe.$$scope={dirty:_,ctx:m}),jp.$set(Dxe);const Gxe={};_&2&&(Gxe.$$scope={dirty:_,ctx:m}),Hb.$set(Gxe);const Oxe={};_&2&&(Oxe.$$scope={dirty:_,ctx:m}),Yb.$set(Oxe);const jR={};_&2&&(jR.$$scope={dirty:_,ctx:m}),Q2.$set(jR);const Vxe={};_&2&&(Vxe.$$scope={dirty:_,ctx:m}),U2.$set(Vxe);const DR={};_&2&&(DR.$$scope={dirty:_,ctx:m}),Iv.$set(DR);const Xxe={};_&2&&(Xxe.$$scope={dirty:_,ctx:m}),qv.$set(Xxe);const GR={};_&2&&(GR.$$scope={dirty:_,ctx:m}),C1.$set(GR);const zxe={};_&2&&(zxe.$$scope={dirty:_,ctx:m}),A1.$set(zxe);const Qxe={};_&2&&(Qxe.$$scope={dirty:_,ctx:m}),U1.$set(Qxe);const Wxe={};_&2&&(Wxe.$$scope={dirty:_,ctx:m}),J1.$set(Wxe);const _f={};_&2&&(_f.$$scope={dirty:_,ctx:m}),JF.$set(_f);const Uxe={};_&2&&(Uxe.$$scope={dirty:_,ctx:m}),KF.$set(Uxe);const Hxe={};_&2&&(Hxe.$$scope={dirty:_,ctx:m}),kT.$set(Hxe);const Jxe={};_&2&&(Jxe.$$scope={dirty:_,ctx:m}),RT.$set(Jxe);const OR={};_&2&&(OR.$$scope={dirty:_,ctx:m}),GT.$set(OR);const Yxe={};_&2&&(Yxe.$$scope={dirty:_,ctx:m}),VT.$set(Yxe);const Kxe={};_&2&&(Kxe.$$scope={dirty:_,ctx:m}),LM.$set(Kxe);const Zxe={};_&2&&(Zxe.$$scope={dirty:_,ctx:m}),$M.$set(Zxe);const gt={};_&2&&(gt.$$scope={dirty:_,ctx:m}),TE.$set(gt);const VR={};_&2&&(VR.$$scope={dirty:_,ctx:m}),EE.$set(VR);const e$e={};_&2&&(e$e.$$scope={dirty:_,ctx:m}),AE.$set(e$e);const XR={};_&2&&(XR.$$scope={dirty:_,ctx:m}),LE.$set(XR);const o$e={};_&2&&(o$e.$$scope={dirty:_,ctx:m}),RE.$set(o$e);const ht={};_&2&&(ht.$$scope={dirty:_,ctx:m}),BE.$set(ht);const r$e={};_&2&&(r$e.$$scope={dirty:_,ctx:m}),YE.$set(r$e);const bf={};_&2&&(bf.$$scope={dirty:_,ctx:m}),ZE.$set(bf);const t$e={};_&2&&(t$e.$$scope={dirty:_,ctx:m}),r4.$set(t$e);const a$e={};_&2&&(a$e.$$scope={dirty:_,ctx:m}),a4.$set(a$e);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),l4.$set(y);const Ly={};_&2&&(Ly.$$scope={dirty:_,ctx:m}),d4.$set(Ly);const n$e={};_&2&&(n$e.$$scope={dirty:_,ctx:m}),f4.$set(n$e);const s$e={};_&2&&(s$e.$$scope={dirty:_,ctx:m}),h4.$set(s$e);const xy={};_&2&&(xy.$$scope={dirty:_,ctx:m}),w4.$set(xy);const l$e={};_&2&&(l$e.$$scope={dirty:_,ctx:m}),y4.$set(l$e);const i$e={};_&2&&(i$e.$$scope={dirty:_,ctx:m}),P4.$set(i$e);const $y={};_&2&&($y.$$scope={dirty:_,ctx:m}),I4.$set($y);const d$e={};_&2&&(d$e.$$scope={dirty:_,ctx:m}),U4.$set(d$e);const c$e={};_&2&&(c$e.$$scope={dirty:_,ctx:m}),J4.$set(c$e);const ky={};_&2&&(ky.$$scope={dirty:_,ctx:m}),eC.$set(ky);const m$e={};_&2&&(m$e.$$scope={dirty:_,ctx:m}),rC.$set(m$e);const f$e={};_&2&&(f$e.$$scope={dirty:_,ctx:m}),dC.$set(f$e);const Sy={};_&2&&(Sy.$$scope={dirty:_,ctx:m}),mC.$set(Sy);const g$e={};_&2&&(g$e.$$scope={dirty:_,ctx:m}),_C.$set(g$e);const h$e={};_&2&&(h$e.$$scope={dirty:_,ctx:m}),vC.$set(h$e);const Ry={};_&2&&(Ry.$$scope={dirty:_,ctx:m}),EC.$set(Ry);const u$e={};_&2&&(u$e.$$scope={dirty:_,ctx:m}),wC.$set(u$e);const p$e={};_&2&&(p$e.$$scope={dirty:_,ctx:m}),LC.$set(p$e);const Py={};_&2&&(Py.$$scope={dirty:_,ctx:m}),$C.$set(Py);const _$e={};_&2&&(_$e.$$scope={dirty:_,ctx:m}),NC.$set(_$e);const b$e={};_&2&&(b$e.$$scope={dirty:_,ctx:m}),jC.$set(b$e);const By={};_&2&&(By.$$scope={dirty:_,ctx:m}),OC.$set(By);const v$e={};_&2&&(v$e.$$scope={dirty:_,ctx:m}),XC.$set(v$e);const F$e={};_&2&&(F$e.$$scope={dirty:_,ctx:m}),X3.$set(F$e);const Iy={};_&2&&(Iy.$$scope={dirty:_,ctx:m}),Q3.$set(Iy);const T$e={};_&2&&(T$e.$$scope={dirty:_,ctx:m}),p5.$set(T$e);const M$e={};_&2&&(M$e.$$scope={dirty:_,ctx:m}),b5.$set(M$e);const Ny={};_&2&&(Ny.$$scope={dirty:_,ctx:m}),R5.$set(Ny);const E$e={};_&2&&(E$e.$$scope={dirty:_,ctx:m}),B5.$set(E$e);const C$e={};_&2&&(C$e.$$scope={dirty:_,ctx:m}),X5.$set(C$e);const qy={};_&2&&(qy.$$scope={dirty:_,ctx:m}),Q5.$set(qy);const w$e={};_&2&&(w$e.$$scope={dirty:_,ctx:m}),J5.$set(w$e);const A$e={};_&2&&(A$e.$$scope={dirty:_,ctx:m}),K5.$set(A$e);const jy={};_&2&&(jy.$$scope={dirty:_,ctx:m}),v0.$set(jy);const y$e={};_&2&&(y$e.$$scope={dirty:_,ctx:m}),T0.$set(y$e);const L$e={};_&2&&(L$e.$$scope={dirty:_,ctx:m}),S0.$set(L$e);const Dy={};_&2&&(Dy.$$scope={dirty:_,ctx:m}),P0.$set(Dy);const x$e={};_&2&&(x$e.$$scope={dirty:_,ctx:m}),iw.$set(x$e);const $$e={};_&2&&($$e.$$scope={dirty:_,ctx:m}),cw.$set($$e);const Gy={};_&2&&(Gy.$$scope={dirty:_,ctx:m}),Lw.$set(Gy);const k$e={};_&2&&(k$e.$$scope={dirty:_,ctx:m}),$w.$set(k$e);const S$e={};_&2&&(S$e.$$scope={dirty:_,ctx:m}),Rw.$set(S$e);const Oy={};_&2&&(Oy.$$scope={dirty:_,ctx:m}),Bw.$set(Oy);const R$e={};_&2&&(R$e.$$scope={dirty:_,ctx:m}),Nw.$set(R$e);const P$e={};_&2&&(P$e.$$scope={dirty:_,ctx:m}),jw.$set(P$e);const Vy={};_&2&&(Vy.$$scope={dirty:_,ctx:m}),Gw.$set(Vy);const B$e={};_&2&&(B$e.$$scope={dirty:_,ctx:m}),Vw.$set(B$e);const I$e={};_&2&&(I$e.$$scope={dirty:_,ctx:m}),mA.$set(I$e);const Xy={};_&2&&(Xy.$$scope={dirty:_,ctx:m}),gA.$set(Xy);const N$e={};_&2&&(N$e.$$scope={dirty:_,ctx:m}),BA.$set(N$e);const q$e={};_&2&&(q$e.$$scope={dirty:_,ctx:m}),NA.$set(q$e);const zy={};_&2&&(zy.$$scope={dirty:_,ctx:m}),jA.$set(zy);const j$e={};_&2&&(j$e.$$scope={dirty:_,ctx:m}),GA.$set(j$e);const D$e={};_&2&&(D$e.$$scope={dirty:_,ctx:m}),VA.$set(D$e);const Qy={};_&2&&(Qy.$$scope={dirty:_,ctx:m}),zA.$set(Qy);const G$e={};_&2&&(G$e.$$scope={dirty:_,ctx:m}),v6.$set(G$e);const O$e={};_&2&&(O$e.$$scope={dirty:_,ctx:m}),T6.$set(O$e);const Wy={};_&2&&(Wy.$$scope={dirty:_,ctx:m}),S6.$set(Wy);const V$e={};_&2&&(V$e.$$scope={dirty:_,ctx:m}),P6.$set(V$e);const X$e={};_&2&&(X$e.$$scope={dirty:_,ctx:m}),U6.$set(X$e);const Uy={};_&2&&(Uy.$$scope={dirty:_,ctx:m}),J6.$set(Uy);const z$e={};_&2&&(z$e.$$scope={dirty:_,ctx:m}),l7.$set(z$e);const Q$e={};_&2&&(Q$e.$$scope={dirty:_,ctx:m}),d7.$set(Q$e);const Hy={};_&2&&(Hy.$$scope={dirty:_,ctx:m}),F7.$set(Hy);const W$e={};_&2&&(W$e.$$scope={dirty:_,ctx:m}),M7.$set(W$e);const U$e={};_&2&&(U$e.$$scope={dirty:_,ctx:m}),R7.$set(U$e);const Jy={};_&2&&(Jy.$$scope={dirty:_,ctx:m}),B7.$set(Jy);const H$e={};_&2&&(H$e.$$scope={dirty:_,ctx:m}),Q7.$set(H$e);const J$e={};_&2&&(J$e.$$scope={dirty:_,ctx:m}),U7.$set(J$e);const Yy={};_&2&&(Yy.$$scope={dirty:_,ctx:m}),ty.$set(Yy);const Y$e={};_&2&&(Y$e.$$scope={dirty:_,ctx:m}),ny.$set(Y$e);const K$e={};_&2&&(K$e.$$scope={dirty:_,ctx:m}),hy.$set(K$e);const Ky={};_&2&&(Ky.$$scope={dirty:_,ctx:m}),py.$set(Ky);const Z$e={};_&2&&(Z$e.$$scope={dirty:_,ctx:m}),by.$set(Z$e);const eke={};_&2&&(eke.$$scope={dirty:_,ctx:m}),Fy.$set(eke);const Zy={};_&2&&(Zy.$$scope={dirty:_,ctx:m}),Ey.$set(Zy);const oke={};_&2&&(oke.$$scope={dirty:_,ctx:m}),wy.$set(oke);const rke={};_&2&&(rke.$$scope={dirty:_,ctx:m}),yy.$set(rke)},i(m){SKe||(E(d.$$.fragment,m),E(Qa.$$.fragment,m),E(l9.$$.fragment,m),E(i9.$$.fragment,m),E(wf.$$.fragment,m),E(d9.$$.fragment,m),E(c9.$$.fragment,m),E(g9.$$.fragment,m),E(Oh.$$.fragment,m),E(h9.$$.fragment,m),E(u9.$$.fragment,m),E(p9.$$.fragment,m),E(v9.$$.fragment,m),E(Cu.$$.fragment,m),E(F9.$$.fragment,m),E(T9.$$.fragment,m),E(M9.$$.fragment,m),E(w9.$$.fragment,m),E(mp.$$.fragment,m),E(fp.$$.fragment,m),E(A9.$$.fragment,m),E(y9.$$.fragment,m),E(L9.$$.fragment,m),E(k9.$$.fragment,m),E(Bp.$$.fragment,m),E(Ip.$$.fragment,m),E(S9.$$.fragment,m),E(R9.$$.fragment,m),E(P9.$$.fragment,m),E(I9.$$.fragment,m),E(jp.$$.fragment,m),E(N9.$$.fragment,m),E(Hb.$$.fragment,m),E(q9.$$.fragment,m),E(j9.$$.fragment,m),E(G9.$$.fragment,m),E(Yb.$$.fragment,m),E(O9.$$.fragment,m),E(Q2.$$.fragment,m),E(V9.$$.fragment,m),E(X9.$$.fragment,m),E(Q9.$$.fragment,m),E(U2.$$.fragment,m),E(W9.$$.fragment,m),E(Iv.$$.fragment,m),E(U9.$$.fragment,m),E(H9.$$.fragment,m),E(Y9.$$.fragment,m),E(qv.$$.fragment,m),E(K9.$$.fragment,m),E(C1.$$.fragment,m),E(Z9.$$.fragment,m),E(ex.$$.fragment,m),E(rx.$$.fragment,m),E(A1.$$.fragment,m),E(tx.$$.fragment,m),E(U1.$$.fragment,m),E(ax.$$.fragment,m),E(nx.$$.fragment,m),E(lx.$$.fragment,m),E(J1.$$.fragment,m),E(ix.$$.fragment,m),E(JF.$$.fragment,m),E(dx.$$.fragment,m),E(cx.$$.fragment,m),E(fx.$$.fragment,m),E(KF.$$.fragment,m),E(gx.$$.fragment,m),E(kT.$$.fragment,m),E(hx.$$.fragment,m),E(ux.$$.fragment,m),E(_x.$$.fragment,m),E(RT.$$.fragment,m),E(bx.$$.fragment,m),E(GT.$$.fragment,m),E(vx.$$.fragment,m),E(Fx.$$.fragment,m),E(Mx.$$.fragment,m),E(VT.$$.fragment,m),E(Ex.$$.fragment,m),E(LM.$$.fragment,m),E(Cx.$$.fragment,m),E(wx.$$.fragment,m),E(yx.$$.fragment,m),E($M.$$.fragment,m),E(Lx.$$.fragment,m),E(TE.$$.fragment,m),E(xx.$$.fragment,m),E($x.$$.fragment,m),E(Sx.$$.fragment,m),E(EE.$$.fragment,m),E(Rx.$$.fragment,m),E(AE.$$.fragment,m),E(Px.$$.fragment,m),E(Bx.$$.fragment,m),E(Nx.$$.fragment,m),E(LE.$$.fragment,m),E(qx.$$.fragment,m),E(RE.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(BE.$$.fragment,m),E(Vx.$$.fragment,m),E(YE.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(ZE.$$.fragment,m),E(Ux.$$.fragment,m),E(r4.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(a4.$$.fragment,m),E(Zx.$$.fragment,m),E(l4.$$.fragment,m),E(e$.$$.fragment,m),E(o$.$$.fragment,m),E(t$.$$.fragment,m),E(d4.$$.fragment,m),E(a$.$$.fragment,m),E(f4.$$.fragment,m),E(n$.$$.fragment,m),E(s$.$$.fragment,m),E(i$.$$.fragment,m),E(h4.$$.fragment,m),E(d$.$$.fragment,m),E(w4.$$.fragment,m),E(c$.$$.fragment,m),E(m$.$$.fragment,m),E(g$.$$.fragment,m),E(y4.$$.fragment,m),E(h$.$$.fragment,m),E(P4.$$.fragment,m),E(u$.$$.fragment,m),E(p$.$$.fragment,m),E(b$.$$.fragment,m),E(I4.$$.fragment,m),E(v$.$$.fragment,m),E(U4.$$.fragment,m),E(F$.$$.fragment,m),E(T$.$$.fragment,m),E(E$.$$.fragment,m),E(J4.$$.fragment,m),E(C$.$$.fragment,m),E(eC.$$.fragment,m),E(A$.$$.fragment,m),E(y$.$$.fragment,m),E(x$.$$.fragment,m),E(rC.$$.fragment,m),E($$.$$.fragment,m),E(dC.$$.fragment,m),E(k$.$$.fragment,m),E(S$.$$.fragment,m),E(P$.$$.fragment,m),E(mC.$$.fragment,m),E(B$.$$.fragment,m),E(_C.$$.fragment,m),E(I$.$$.fragment,m),E(N$.$$.fragment,m),E(j$.$$.fragment,m),E(vC.$$.fragment,m),E(D$.$$.fragment,m),E(EC.$$.fragment,m),E(O$.$$.fragment,m),E(V$.$$.fragment,m),E(z$.$$.fragment,m),E(wC.$$.fragment,m),E(Q$.$$.fragment,m),E(LC.$$.fragment,m),E(W$.$$.fragment,m),E(U$.$$.fragment,m),E(J$.$$.fragment,m),E($C.$$.fragment,m),E(Y$.$$.fragment,m),E(NC.$$.fragment,m),E(K$.$$.fragment,m),E(Z$.$$.fragment,m),E(ok.$$.fragment,m),E(jC.$$.fragment,m),E(rk.$$.fragment,m),E(OC.$$.fragment,m),E(tk.$$.fragment,m),E(ak.$$.fragment,m),E(sk.$$.fragment,m),E(XC.$$.fragment,m),E(lk.$$.fragment,m),E(X3.$$.fragment,m),E(ik.$$.fragment,m),E(dk.$$.fragment,m),E(mk.$$.fragment,m),E(Q3.$$.fragment,m),E(fk.$$.fragment,m),E(p5.$$.fragment,m),E(gk.$$.fragment,m),E(hk.$$.fragment,m),E(pk.$$.fragment,m),E(b5.$$.fragment,m),E(_k.$$.fragment,m),E(R5.$$.fragment,m),E(bk.$$.fragment,m),E(vk.$$.fragment,m),E(Tk.$$.fragment,m),E(B5.$$.fragment,m),E(Mk.$$.fragment,m),E(X5.$$.fragment,m),E(Ek.$$.fragment,m),E(Ck.$$.fragment,m),E(Ak.$$.fragment,m),E(Q5.$$.fragment,m),E(yk.$$.fragment,m),E(J5.$$.fragment,m),E(Lk.$$.fragment,m),E(xk.$$.fragment,m),E(kk.$$.fragment,m),E(K5.$$.fragment,m),E(Sk.$$.fragment,m),E(v0.$$.fragment,m),E(Rk.$$.fragment,m),E(Pk.$$.fragment,m),E(Ik.$$.fragment,m),E(T0.$$.fragment,m),E(Nk.$$.fragment,m),E(S0.$$.fragment,m),E(qk.$$.fragment,m),E(jk.$$.fragment,m),E(Gk.$$.fragment,m),E(P0.$$.fragment,m),E(Ok.$$.fragment,m),E(iw.$$.fragment,m),E(Vk.$$.fragment,m),E(Xk.$$.fragment,m),E(Qk.$$.fragment,m),E(cw.$$.fragment,m),E(Wk.$$.fragment,m),E(Lw.$$.fragment,m),E(Uk.$$.fragment,m),E(Hk.$$.fragment,m),E(Yk.$$.fragment,m),E($w.$$.fragment,m),E(Kk.$$.fragment,m),E(Rw.$$.fragment,m),E(eS.$$.fragment,m),E(oS.$$.fragment,m),E(tS.$$.fragment,m),E(Bw.$$.fragment,m),E(aS.$$.fragment,m),E(Nw.$$.fragment,m),E(nS.$$.fragment,m),E(sS.$$.fragment,m),E(iS.$$.fragment,m),E(jw.$$.fragment,m),E(dS.$$.fragment,m),E(Gw.$$.fragment,m),E(cS.$$.fragment,m),E(mS.$$.fragment,m),E(gS.$$.fragment,m),E(Vw.$$.fragment,m),E(hS.$$.fragment,m),E(mA.$$.fragment,m),E(uS.$$.fragment,m),E(pS.$$.fragment,m),E(bS.$$.fragment,m),E(gA.$$.fragment,m),E(vS.$$.fragment,m),E(BA.$$.fragment,m),E(FS.$$.fragment,m),E(TS.$$.fragment,m),E(ES.$$.fragment,m),E(NA.$$.fragment,m),E(CS.$$.fragment,m),E(jA.$$.fragment,m),E(wS.$$.fragment,m),E(AS.$$.fragment,m),E(LS.$$.fragment,m),E(GA.$$.fragment,m),E(xS.$$.fragment,m),E(VA.$$.fragment,m),E($S.$$.fragment,m),E(kS.$$.fragment,m),E(RS.$$.fragment,m),E(zA.$$.fragment,m),E(PS.$$.fragment,m),E(v6.$$.fragment,m),E(BS.$$.fragment,m),E(IS.$$.fragment,m),E(qS.$$.fragment,m),E(T6.$$.fragment,m),E(jS.$$.fragment,m),E(S6.$$.fragment,m),E(DS.$$.fragment,m),E(GS.$$.fragment,m),E(VS.$$.fragment,m),E(P6.$$.fragment,m),E(XS.$$.fragment,m),E(U6.$$.fragment,m),E(zS.$$.fragment,m),E(QS.$$.fragment,m),E(US.$$.fragment,m),E(J6.$$.fragment,m),E(HS.$$.fragment,m),E(l7.$$.fragment,m),E(JS.$$.fragment,m),E(YS.$$.fragment,m),E(ZS.$$.fragment,m),E(d7.$$.fragment,m),E(eR.$$.fragment,m),E(F7.$$.fragment,m),E(oR.$$.fragment,m),E(rR.$$.fragment,m),E(aR.$$.fragment,m),E(M7.$$.fragment,m),E(nR.$$.fragment,m),E(R7.$$.fragment,m),E(sR.$$.fragment,m),E(lR.$$.fragment,m),E(dR.$$.fragment,m),E(B7.$$.fragment,m),E(cR.$$.fragment,m),E(Q7.$$.fragment,m),E(mR.$$.fragment,m),E(fR.$$.fragment,m),E(hR.$$.fragment,m),E(U7.$$.fragment,m),E(uR.$$.fragment,m),E(ty.$$.fragment,m),E(pR.$$.fragment,m),E(_R.$$.fragment,m),E(vR.$$.fragment,m),E(ny.$$.fragment,m),E(FR.$$.fragment,m),E(hy.$$.fragment,m),E(TR.$$.fragment,m),E(MR.$$.fragment,m),E(CR.$$.fragment,m),E(py.$$.fragment,m),E(wR.$$.fragment,m),E(by.$$.fragment,m),E(AR.$$.fragment,m),E(yR.$$.fragment,m),E(xR.$$.fragment,m),E(Fy.$$.fragment,m),E($R.$$.fragment,m),E(Ey.$$.fragment,m),E(SR.$$.fragment,m),E(RR.$$.fragment,m),E(BR.$$.fragment,m),E(wy.$$.fragment,m),E(IR.$$.fragment,m),E(yy.$$.fragment,m),SKe=!0)},o(m){C(d.$$.fragment,m),C(Qa.$$.fragment,m),C(l9.$$.fragment,m),C(i9.$$.fragment,m),C(wf.$$.fragment,m),C(d9.$$.fragment,m),C(c9.$$.fragment,m),C(g9.$$.fragment,m),C(Oh.$$.fragment,m),C(h9.$$.fragment,m),C(u9.$$.fragment,m),C(p9.$$.fragment,m),C(v9.$$.fragment,m),C(Cu.$$.fragment,m),C(F9.$$.fragment,m),C(T9.$$.fragment,m),C(M9.$$.fragment,m),C(w9.$$.fragment,m),C(mp.$$.fragment,m),C(fp.$$.fragment,m),C(A9.$$.fragment,m),C(y9.$$.fragment,m),C(L9.$$.fragment,m),C(k9.$$.fragment,m),C(Bp.$$.fragment,m),C(Ip.$$.fragment,m),C(S9.$$.fragment,m),C(R9.$$.fragment,m),C(P9.$$.fragment,m),C(I9.$$.fragment,m),C(jp.$$.fragment,m),C(N9.$$.fragment,m),C(Hb.$$.fragment,m),C(q9.$$.fragment,m),C(j9.$$.fragment,m),C(G9.$$.fragment,m),C(Yb.$$.fragment,m),C(O9.$$.fragment,m),C(Q2.$$.fragment,m),C(V9.$$.fragment,m),C(X9.$$.fragment,m),C(Q9.$$.fragment,m),C(U2.$$.fragment,m),C(W9.$$.fragment,m),C(Iv.$$.fragment,m),C(U9.$$.fragment,m),C(H9.$$.fragment,m),C(Y9.$$.fragment,m),C(qv.$$.fragment,m),C(K9.$$.fragment,m),C(C1.$$.fragment,m),C(Z9.$$.fragment,m),C(ex.$$.fragment,m),C(rx.$$.fragment,m),C(A1.$$.fragment,m),C(tx.$$.fragment,m),C(U1.$$.fragment,m),C(ax.$$.fragment,m),C(nx.$$.fragment,m),C(lx.$$.fragment,m),C(J1.$$.fragment,m),C(ix.$$.fragment,m),C(JF.$$.fragment,m),C(dx.$$.fragment,m),C(cx.$$.fragment,m),C(fx.$$.fragment,m),C(KF.$$.fragment,m),C(gx.$$.fragment,m),C(kT.$$.fragment,m),C(hx.$$.fragment,m),C(ux.$$.fragment,m),C(_x.$$.fragment,m),C(RT.$$.fragment,m),C(bx.$$.fragment,m),C(GT.$$.fragment,m),C(vx.$$.fragment,m),C(Fx.$$.fragment,m),C(Mx.$$.fragment,m),C(VT.$$.fragment,m),C(Ex.$$.fragment,m),C(LM.$$.fragment,m),C(Cx.$$.fragment,m),C(wx.$$.fragment,m),C(yx.$$.fragment,m),C($M.$$.fragment,m),C(Lx.$$.fragment,m),C(TE.$$.fragment,m),C(xx.$$.fragment,m),C($x.$$.fragment,m),C(Sx.$$.fragment,m),C(EE.$$.fragment,m),C(Rx.$$.fragment,m),C(AE.$$.fragment,m),C(Px.$$.fragment,m),C(Bx.$$.fragment,m),C(Nx.$$.fragment,m),C(LE.$$.fragment,m),C(qx.$$.fragment,m),C(RE.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(BE.$$.fragment,m),C(Vx.$$.fragment,m),C(YE.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(ZE.$$.fragment,m),C(Ux.$$.fragment,m),C(r4.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(a4.$$.fragment,m),C(Zx.$$.fragment,m),C(l4.$$.fragment,m),C(e$.$$.fragment,m),C(o$.$$.fragment,m),C(t$.$$.fragment,m),C(d4.$$.fragment,m),C(a$.$$.fragment,m),C(f4.$$.fragment,m),C(n$.$$.fragment,m),C(s$.$$.fragment,m),C(i$.$$.fragment,m),C(h4.$$.fragment,m),C(d$.$$.fragment,m),C(w4.$$.fragment,m),C(c$.$$.fragment,m),C(m$.$$.fragment,m),C(g$.$$.fragment,m),C(y4.$$.fragment,m),C(h$.$$.fragment,m),C(P4.$$.fragment,m),C(u$.$$.fragment,m),C(p$.$$.fragment,m),C(b$.$$.fragment,m),C(I4.$$.fragment,m),C(v$.$$.fragment,m),C(U4.$$.fragment,m),C(F$.$$.fragment,m),C(T$.$$.fragment,m),C(E$.$$.fragment,m),C(J4.$$.fragment,m),C(C$.$$.fragment,m),C(eC.$$.fragment,m),C(A$.$$.fragment,m),C(y$.$$.fragment,m),C(x$.$$.fragment,m),C(rC.$$.fragment,m),C($$.$$.fragment,m),C(dC.$$.fragment,m),C(k$.$$.fragment,m),C(S$.$$.fragment,m),C(P$.$$.fragment,m),C(mC.$$.fragment,m),C(B$.$$.fragment,m),C(_C.$$.fragment,m),C(I$.$$.fragment,m),C(N$.$$.fragment,m),C(j$.$$.fragment,m),C(vC.$$.fragment,m),C(D$.$$.fragment,m),C(EC.$$.fragment,m),C(O$.$$.fragment,m),C(V$.$$.fragment,m),C(z$.$$.fragment,m),C(wC.$$.fragment,m),C(Q$.$$.fragment,m),C(LC.$$.fragment,m),C(W$.$$.fragment,m),C(U$.$$.fragment,m),C(J$.$$.fragment,m),C($C.$$.fragment,m),C(Y$.$$.fragment,m),C(NC.$$.fragment,m),C(K$.$$.fragment,m),C(Z$.$$.fragment,m),C(ok.$$.fragment,m),C(jC.$$.fragment,m),C(rk.$$.fragment,m),C(OC.$$.fragment,m),C(tk.$$.fragment,m),C(ak.$$.fragment,m),C(sk.$$.fragment,m),C(XC.$$.fragment,m),C(lk.$$.fragment,m),C(X3.$$.fragment,m),C(ik.$$.fragment,m),C(dk.$$.fragment,m),C(mk.$$.fragment,m),C(Q3.$$.fragment,m),C(fk.$$.fragment,m),C(p5.$$.fragment,m),C(gk.$$.fragment,m),C(hk.$$.fragment,m),C(pk.$$.fragment,m),C(b5.$$.fragment,m),C(_k.$$.fragment,m),C(R5.$$.fragment,m),C(bk.$$.fragment,m),C(vk.$$.fragment,m),C(Tk.$$.fragment,m),C(B5.$$.fragment,m),C(Mk.$$.fragment,m),C(X5.$$.fragment,m),C(Ek.$$.fragment,m),C(Ck.$$.fragment,m),C(Ak.$$.fragment,m),C(Q5.$$.fragment,m),C(yk.$$.fragment,m),C(J5.$$.fragment,m),C(Lk.$$.fragment,m),C(xk.$$.fragment,m),C(kk.$$.fragment,m),C(K5.$$.fragment,m),C(Sk.$$.fragment,m),C(v0.$$.fragment,m),C(Rk.$$.fragment,m),C(Pk.$$.fragment,m),C(Ik.$$.fragment,m),C(T0.$$.fragment,m),C(Nk.$$.fragment,m),C(S0.$$.fragment,m),C(qk.$$.fragment,m),C(jk.$$.fragment,m),C(Gk.$$.fragment,m),C(P0.$$.fragment,m),C(Ok.$$.fragment,m),C(iw.$$.fragment,m),C(Vk.$$.fragment,m),C(Xk.$$.fragment,m),C(Qk.$$.fragment,m),C(cw.$$.fragment,m),C(Wk.$$.fragment,m),C(Lw.$$.fragment,m),C(Uk.$$.fragment,m),C(Hk.$$.fragment,m),C(Yk.$$.fragment,m),C($w.$$.fragment,m),C(Kk.$$.fragment,m),C(Rw.$$.fragment,m),C(eS.$$.fragment,m),C(oS.$$.fragment,m),C(tS.$$.fragment,m),C(Bw.$$.fragment,m),C(aS.$$.fragment,m),C(Nw.$$.fragment,m),C(nS.$$.fragment,m),C(sS.$$.fragment,m),C(iS.$$.fragment,m),C(jw.$$.fragment,m),C(dS.$$.fragment,m),C(Gw.$$.fragment,m),C(cS.$$.fragment,m),C(mS.$$.fragment,m),C(gS.$$.fragment,m),C(Vw.$$.fragment,m),C(hS.$$.fragment,m),C(mA.$$.fragment,m),C(uS.$$.fragment,m),C(pS.$$.fragment,m),C(bS.$$.fragment,m),C(gA.$$.fragment,m),C(vS.$$.fragment,m),C(BA.$$.fragment,m),C(FS.$$.fragment,m),C(TS.$$.fragment,m),C(ES.$$.fragment,m),C(NA.$$.fragment,m),C(CS.$$.fragment,m),C(jA.$$.fragment,m),C(wS.$$.fragment,m),C(AS.$$.fragment,m),C(LS.$$.fragment,m),C(GA.$$.fragment,m),C(xS.$$.fragment,m),C(VA.$$.fragment,m),C($S.$$.fragment,m),C(kS.$$.fragment,m),C(RS.$$.fragment,m),C(zA.$$.fragment,m),C(PS.$$.fragment,m),C(v6.$$.fragment,m),C(BS.$$.fragment,m),C(IS.$$.fragment,m),C(qS.$$.fragment,m),C(T6.$$.fragment,m),C(jS.$$.fragment,m),C(S6.$$.fragment,m),C(DS.$$.fragment,m),C(GS.$$.fragment,m),C(VS.$$.fragment,m),C(P6.$$.fragment,m),C(XS.$$.fragment,m),C(U6.$$.fragment,m),C(zS.$$.fragment,m),C(QS.$$.fragment,m),C(US.$$.fragment,m),C(J6.$$.fragment,m),C(HS.$$.fragment,m),C(l7.$$.fragment,m),C(JS.$$.fragment,m),C(YS.$$.fragment,m),C(ZS.$$.fragment,m),C(d7.$$.fragment,m),C(eR.$$.fragment,m),C(F7.$$.fragment,m),C(oR.$$.fragment,m),C(rR.$$.fragment,m),C(aR.$$.fragment,m),C(M7.$$.fragment,m),C(nR.$$.fragment,m),C(R7.$$.fragment,m),C(sR.$$.fragment,m),C(lR.$$.fragment,m),C(dR.$$.fragment,m),C(B7.$$.fragment,m),C(cR.$$.fragment,m),C(Q7.$$.fragment,m),C(mR.$$.fragment,m),C(fR.$$.fragment,m),C(hR.$$.fragment,m),C(U7.$$.fragment,m),C(uR.$$.fragment,m),C(ty.$$.fragment,m),C(pR.$$.fragment,m),C(_R.$$.fragment,m),C(vR.$$.fragment,m),C(ny.$$.fragment,m),C(FR.$$.fragment,m),C(hy.$$.fragment,m),C(TR.$$.fragment,m),C(MR.$$.fragment,m),C(CR.$$.fragment,m),C(py.$$.fragment,m),C(wR.$$.fragment,m),C(by.$$.fragment,m),C(AR.$$.fragment,m),C(yR.$$.fragment,m),C(xR.$$.fragment,m),C(Fy.$$.fragment,m),C($R.$$.fragment,m),C(Ey.$$.fragment,m),C(SR.$$.fragment,m),C(RR.$$.fragment,m),C(BR.$$.fragment,m),C(wy.$$.fragment,m),C(IR.$$.fragment,m),C(yy.$$.fragment,m),SKe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Ff),m&&t(ut),m&&t(Ve),m&&t(Ue),m&&t(Mf),w(Qa,m),m&&t(He),m&&t(Ae),m&&t(Lo),m&&t(Wa),m&&t(vJe),m&&t(ld),w(l9),m&&t(FJe),m&&t(ts),m&&t(TJe),w(i9,m),m&&t(MJe),m&&t(mB),m&&t(EJe),w(wf,m),m&&t(CJe),m&&t(id),w(d9),m&&t(wJe),m&&t(xo),w(c9),w(g9),w(Oh),w(h9),m&&t(AJe),m&&t(cd),w(u9),m&&t(yJe),m&&t($o),w(p9),w(v9),w(Cu),w(F9),m&&t(LJe),m&&t(md),w(T9),m&&t(xJe),m&&t(ko),w(M9),w(w9),w(mp),w(fp),w(A9),m&&t($Je),m&&t(fd),w(y9),m&&t(kJe),m&&t(So),w(L9),w(k9),w(Bp),w(Ip),w(S9),m&&t(SJe),m&&t(hd),w(R9),m&&t(RJe),m&&t(Ro),w(P9),w(I9),w(jp),w(N9),w(Hb),m&&t(PJe),m&&t(_d),w(q9),m&&t(BJe),m&&t(Po),w(j9),w(G9),w(Yb),w(O9),w(Q2),m&&t(IJe),m&&t(Fd),w(V9),m&&t(NJe),m&&t(Bo),w(X9),w(Q9),w(U2),w(W9),w(Iv),m&&t(qJe),m&&t(Ed),w(U9),m&&t(jJe),m&&t(Io),w(H9),w(Y9),w(qv),w(K9),w(C1),m&&t(DJe),m&&t(Ad),w(Z9),m&&t(GJe),m&&t(No),w(ex),w(rx),w(A1),w(tx),w(U1),m&&t(OJe),m&&t(xd),w(ax),m&&t(VJe),m&&t(qo),w(nx),w(lx),w(J1),w(ix),w(JF),m&&t(XJe),m&&t(Sd),w(dx),m&&t(zJe),m&&t(jo),w(cx),w(fx),w(KF),w(gx),w(kT),m&&t(QJe),m&&t(Bd),w(hx),m&&t(WJe),m&&t(Do),w(ux),w(_x),w(RT),w(bx),w(GT),m&&t(UJe),m&&t(qd),w(vx),m&&t(HJe),m&&t(Oo),w(Fx),w(Mx),w(VT),w(Ex),w(LM),m&&t(JJe),m&&t(Gd),w(Cx),m&&t(YJe),m&&t(Vo),w(wx),w(yx),w($M),w(Lx),w(TE),m&&t(KJe),m&&t(Xd),w(xx),m&&t(ZJe),m&&t(Xo),w($x),w(Sx),w(EE),w(Rx),w(AE),m&&t(eYe),m&&t(Wd),w(Px),m&&t(oYe),m&&t(zo),w(Bx),w(Nx),w(LE),w(qx),w(RE),m&&t(rYe),m&&t(Yd),w(jx),m&&t(tYe),m&&t(Qo),w(Dx),w(Ox),w(BE),w(Vx),w(YE),m&&t(aYe),m&&t(ec),w(Xx),m&&t(nYe),m&&t(Wo),w(zx),w(Wx),w(ZE),w(Ux),w(r4),m&&t(sYe),m&&t(tc),w(Hx),m&&t(lYe),m&&t(Uo),w(Jx),w(Kx),w(a4),w(Zx),w(l4),m&&t(iYe),m&&t(sc),w(e$),m&&t(dYe),m&&t(Ho),w(o$),w(t$),w(d4),w(a$),w(f4),m&&t(cYe),m&&t(dc),w(n$),m&&t(mYe),m&&t(Jo),w(s$),w(i$),w(h4),w(d$),w(w4),m&&t(fYe),m&&t(fc),w(c$),m&&t(gYe),m&&t(Yo),w(m$),w(g$),w(y4),w(h$),w(P4),m&&t(hYe),m&&t(uc),w(u$),m&&t(uYe),m&&t(Ko),w(p$),w(b$),w(I4),w(v$),w(U4),m&&t(pYe),m&&t(bc),w(F$),m&&t(_Ye),m&&t(Zo),w(T$),w(E$),w(J4),w(C$),w(eC),m&&t(bYe),m&&t(Tc),w(A$),m&&t(vYe),m&&t(er),w(y$),w(x$),w(rC),w($$),w(dC),m&&t(FYe),m&&t(Cc),w(k$),m&&t(TYe),m&&t(or),w(S$),w(P$),w(mC),w(B$),w(_C),m&&t(MYe),m&&t(yc),w(I$),m&&t(EYe),m&&t(rr),w(N$),w(j$),w(vC),w(D$),w(EC),m&&t(CYe),m&&t($c),w(O$),m&&t(wYe),m&&t(tr),w(V$),w(z$),w(wC),w(Q$),w(LC),m&&t(AYe),m&&t(Rc),w(W$),m&&t(yYe),m&&t(ar),w(U$),w(J$),w($C),w(Y$),w(NC),m&&t(LYe),m&&t(Ic),w(K$),m&&t(xYe),m&&t(nr),w(Z$),w(ok),w(jC),w(rk),w(OC),m&&t($Ye),m&&t(jc),w(tk),m&&t(kYe),m&&t(sr),w(ak),w(sk),w(XC),w(lk),w(X3),m&&t(SYe),m&&t(Oc),w(ik),m&&t(RYe),m&&t(lr),w(dk),w(mk),w(Q3),w(fk),w(p5),m&&t(PYe),m&&t(zc),w(gk),m&&t(BYe),m&&t(ir),w(hk),w(pk),w(b5),w(_k),w(R5),m&&t(IYe),m&&t(Uc),w(bk),m&&t(NYe),m&&t(dr),w(vk),w(Tk),w(B5),w(Mk),w(X5),m&&t(qYe),m&&t(Yc),w(Ek),m&&t(jYe),m&&t(cr),w(Ck),w(Ak),w(Q5),w(yk),w(J5),m&&t(DYe),m&&t(om),w(Lk),m&&t(GYe),m&&t(mr),w(xk),w(kk),w(K5),w(Sk),w(v0),m&&t(OYe),m&&t(am),w(Rk),m&&t(VYe),m&&t(fr),w(Pk),w(Ik),w(T0),w(Nk),w(S0),m&&t(XYe),m&&t(lm),w(qk),m&&t(zYe),m&&t(gr),w(jk),w(Gk),w(P0),w(Ok),w(iw),m&&t(QYe),m&&t(cm),w(Vk),m&&t(WYe),m&&t(hr),w(Xk),w(Qk),w(cw),w(Wk),w(Lw),m&&t(UYe),m&&t(gm),w(Uk),m&&t(HYe),m&&t(ur),w(Hk),w(Yk),w($w),w(Kk),w(Rw),m&&t(JYe),m&&t(pm),w(eS),m&&t(YYe),m&&t(pr),w(oS),w(tS),w(Bw),w(aS),w(Nw),m&&t(KYe),m&&t(vm),w(nS),m&&t(ZYe),m&&t(_r),w(sS),w(iS),w(jw),w(dS),w(Gw),m&&t(eKe),m&&t(Mm),w(cS),m&&t(oKe),m&&t(br),w(mS),w(gS),w(Vw),w(hS),w(mA),m&&t(rKe),m&&t(wm),w(uS),m&&t(tKe),m&&t(vr),w(pS),w(bS),w(gA),w(vS),w(BA),m&&t(aKe),m&&t(Lm),w(FS),m&&t(nKe),m&&t(Fr),w(TS),w(ES),w(NA),w(CS),w(jA),m&&t(sKe),m&&t(km),w(wS),m&&t(lKe),m&&t(Tr),w(AS),w(LS),w(GA),w(xS),w(VA),m&&t(iKe),m&&t(Pm),w($S),m&&t(dKe),m&&t(Mr),w(kS),w(RS),w(zA),w(PS),w(v6),m&&t(cKe),m&&t(Nm),w(BS),m&&t(mKe),m&&t(Er),w(IS),w(qS),w(T6),w(jS),w(S6),m&&t(fKe),m&&t(Dm),w(DS),m&&t(gKe),m&&t(Cr),w(GS),w(VS),w(P6),w(XS),w(U6),m&&t(hKe),m&&t(Vm),w(zS),m&&t(uKe),m&&t(wr),w(QS),w(US),w(J6),w(HS),w(l7),m&&t(pKe),m&&t(Qm),w(JS),m&&t(_Ke),m&&t(Ar),w(YS),w(ZS),w(d7),w(eR),w(F7),m&&t(bKe),m&&t(Hm),w(oR),m&&t(vKe),m&&t(yr),w(rR),w(aR),w(M7),w(nR),w(R7),m&&t(FKe),m&&t(Km),w(sR),m&&t(TKe),m&&t(Lr),w(lR),w(dR),w(B7),w(cR),w(Q7),m&&t(MKe),m&&t(of),w(mR),m&&t(EKe),m&&t(xr),w(fR),w(hR),w(U7),w(uR),w(ty),m&&t(CKe),m&&t(af),w(pR),m&&t(wKe),m&&t($r),w(_R),w(vR),w(ny),w(FR),w(hy),m&&t(AKe),m&&t(lf),w(TR),m&&t(yKe),m&&t(kr),w(MR),w(CR),w(py),w(wR),w(by),m&&t(LKe),m&&t(mf),w(AR),m&&t(xKe),m&&t(Sr),w(yR),w(xR),w(Fy),w($R),w(Ey),m&&t($Ke),m&&t(hf),w(SR),m&&t(kKe),m&&t(Rr),w(RR),w(BR),w(wy),w(IR),w(yy)}}}const yma={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Lma($){return bda(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Bma extends hda{constructor(g){super();uda(this,g,Lma,Ama,pda,{})}}export{Bma as default,yma as metadata};
