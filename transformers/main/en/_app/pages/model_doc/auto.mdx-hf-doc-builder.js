import{S as d2a,i as c2a,s as m2a,e as a,k as l,w as F,t as o,M as f2a,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as g2a,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as gMt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function h2a($){let g,v,u,f,p,d,h,yo,td,Ef,pt,ad,nd,U9,Cf,Ve,He,sd,es,H9,os,rs,J9,ld,ts,Y9,id,wf,Qa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),yo=o(`, make sure its
`),td=a("code"),Ef=o("model_type"),pt=o(" attribute is set to the same key you use when registering the config (here "),ad=a("code"),nd=o('"new-model"'),U9=o(")."),Cf=l(),Ve=a("p"),He=o("Likewise, if your "),sd=a("code"),es=o("NewModel"),H9=o(" is a subclass of "),os=a("a"),rs=o("PreTrainedModel"),J9=o(`, make sure its
`),ld=a("code"),ts=o("config_class"),Y9=o(` attribute is set to the same class you use when registering the model (here
`),id=a("code"),wf=o("NewModelConfig"),Qa=o(")."),this.h()},l(Je){g=n(Je,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var KB=s(u);f=r(KB,"NewModelConfig"),KB.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var dd=s(d);h=r(dd,"PretrainedConfig"),dd.forEach(t),yo=r(Ae,`, make sure its
`),td=n(Ae,"CODE",{});var ZB=s(td);Ef=r(ZB,"model_type"),ZB.forEach(t),pt=r(Ae," attribute is set to the same key you use when registering the config (here "),ad=n(Ae,"CODE",{});var eI=s(ad);nd=r(eI,'"new-model"'),eI.forEach(t),U9=r(Ae,")."),Ae.forEach(t),Cf=i(Je),Ve=n(Je,"P",{});var xo=s(Ve);He=r(xo,"Likewise, if your "),sd=n(xo,"CODE",{});var Wa=s(sd);es=r(Wa,"NewModel"),Wa.forEach(t),H9=r(xo," is a subclass of "),os=n(xo,"A",{href:!0});var oI=s(os);rs=r(oI,"PreTrainedModel"),oI.forEach(t),J9=r(xo,`, make sure its
`),ld=n(xo,"CODE",{});var Af=s(ld);ts=r(Af,"config_class"),Af.forEach(t),Y9=r(xo,` attribute is set to the same class you use when registering the model (here
`),id=n(xo,"CODE",{});var rI=s(id);wf=r(rI,"NewModelConfig"),rI.forEach(t),Qa=r(xo,")."),xo.forEach(t),this.h()},h(){c(os,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Je,Ae){b(Je,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,yo),e(g,td),e(td,Ef),e(g,pt),e(g,ad),e(ad,nd),e(g,U9),b(Je,Cf,Ae),b(Je,Ve,Ae),e(Ve,He),e(Ve,sd),e(sd,es),e(Ve,H9),e(Ve,os),e(os,rs),e(Ve,J9),e(Ve,ld),e(ld,ts),e(Ve,Y9),e(Ve,id),e(id,wf),e(Ve,Qa)},d(Je){Je&&t(g),Je&&t(Cf),Je&&t(Ve)}}}function u2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _2a($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function b2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v2a($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var yo=s(u);f=r(yo,"use_auth_token=True"),yo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function F2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = AutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = AutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/layoutlm_tf_model_config.json")
model = AutoModelForDocumentQuestionAnswering.from_pretrained(
    "./tf_model/layoutlm_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/layoutlm_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/layoutlm_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z2a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function f1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function g1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function h1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function u1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function b1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function F1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")
model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForDocumentQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3")

# Update configuration during loading
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained("impira/layoutlm-document-qa", revision="52e01b3", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/layoutlm_pt_model_config.json")
model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
    "./pt_model/layoutlm_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForDocumentQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;impira/layoutlm-document-qa&quot;</span>, revision=<span class="hljs-string">&quot;52e01b3&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/layoutlm_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForDocumentQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/layoutlm_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z1a($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _ba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fba($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:q,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tba($){let g,v,u,f,p,d,h,yo,td,Ef,pt,ad,nd,U9,Cf,Ve,He,sd,es,H9,os,rs,J9,ld,ts,Y9,id,wf,Qa,Je,Ae,KB,dd,ZB,eI,xo,Wa,oI,Af,rI,iao,SZe,cd,Lf,Jde,K9,dao,Yde,cao,RZe,as,mao,Kde,fao,gao,Zde,hao,uao,PZe,Z9,BZe,tI,pao,IZe,yf,NZe,md,xf,ece,ex,_ao,oce,bao,qZe,$o,ox,vao,rx,Fao,aI,Tao,Mao,Eao,tx,Cao,rce,wao,Aao,Lao,Pr,ax,yao,tce,xao,$ao,fd,kao,ace,Sao,Rao,nce,Pao,Bao,Iao,A,$f,sce,Nao,qao,nI,jao,Dao,Gao,kf,lce,Oao,Vao,sI,Xao,zao,Qao,Sf,ice,Wao,Uao,lI,Hao,Jao,Yao,Rf,dce,Kao,Zao,iI,eno,ono,rno,Pf,cce,tno,ano,dI,nno,sno,lno,Bf,mce,ino,dno,cI,cno,mno,fno,If,fce,gno,hno,mI,uno,pno,_no,Nf,gce,bno,vno,fI,Fno,Tno,Mno,qf,hce,Eno,Cno,gI,wno,Ano,Lno,jf,uce,yno,xno,hI,$no,kno,Sno,Df,pce,Rno,Pno,uI,Bno,Ino,Nno,Gf,_ce,qno,jno,pI,Dno,Gno,Ono,Of,bce,Vno,Xno,_I,zno,Qno,Wno,Vf,vce,Uno,Hno,bI,Jno,Yno,Kno,Xf,Fce,Zno,eso,vI,oso,rso,tso,zf,Tce,aso,nso,FI,sso,lso,iso,Qf,Mce,dso,cso,TI,mso,fso,gso,Wf,Ece,hso,uso,MI,pso,_so,bso,Uf,Cce,vso,Fso,EI,Tso,Mso,Eso,Hf,wce,Cso,wso,CI,Aso,Lso,yso,Jf,Ace,xso,$so,wI,kso,Sso,Rso,Yf,Lce,Pso,Bso,AI,Iso,Nso,qso,Kf,yce,jso,Dso,LI,Gso,Oso,Vso,Zf,xce,Xso,zso,yI,Qso,Wso,Uso,eg,$ce,Hso,Jso,xI,Yso,Kso,Zso,og,kce,elo,olo,$I,rlo,tlo,alo,rg,Sce,nlo,slo,kI,llo,ilo,dlo,tg,Rce,clo,mlo,SI,flo,glo,hlo,ag,Pce,ulo,plo,RI,_lo,blo,vlo,ng,Bce,Flo,Tlo,PI,Mlo,Elo,Clo,sg,Ice,wlo,Alo,BI,Llo,ylo,xlo,lg,Nce,$lo,klo,II,Slo,Rlo,Plo,ig,qce,Blo,Ilo,NI,Nlo,qlo,jlo,dg,jce,Dlo,Glo,qI,Olo,Vlo,Xlo,cg,Dce,zlo,Qlo,jI,Wlo,Ulo,Hlo,mg,Gce,Jlo,Ylo,DI,Klo,Zlo,eio,fg,Oce,oio,rio,GI,tio,aio,nio,gg,Vce,sio,lio,OI,iio,dio,cio,hg,Xce,mio,fio,VI,gio,hio,uio,ug,zce,pio,_io,XI,bio,vio,Fio,pg,Qce,Tio,Mio,zI,Eio,Cio,wio,_g,Wce,Aio,Lio,QI,yio,xio,$io,bg,Uce,kio,Sio,WI,Rio,Pio,Bio,vg,Hce,Iio,Nio,UI,qio,jio,Dio,Fg,Jce,Gio,Oio,HI,Vio,Xio,zio,Tg,Yce,Qio,Wio,JI,Uio,Hio,Jio,Mg,Kce,Yio,Kio,YI,Zio,edo,odo,Eg,Zce,rdo,tdo,KI,ado,ndo,sdo,Cg,eme,ldo,ido,ZI,ddo,cdo,mdo,wg,ome,fdo,gdo,eN,hdo,udo,pdo,Ag,rme,_do,bdo,oN,vdo,Fdo,Tdo,Lg,tme,Mdo,Edo,rN,Cdo,wdo,Ado,yg,ame,Ldo,ydo,tN,xdo,$do,kdo,xg,nme,Sdo,Rdo,aN,Pdo,Bdo,Ido,$g,sme,Ndo,qdo,nN,jdo,Ddo,Gdo,kg,lme,Odo,Vdo,sN,Xdo,zdo,Qdo,Sg,ime,Wdo,Udo,lN,Hdo,Jdo,Ydo,Rg,dme,Kdo,Zdo,iN,eco,oco,rco,Pg,cme,tco,aco,dN,nco,sco,lco,Bg,mme,ico,dco,cN,cco,mco,fco,Ig,fme,gco,hco,mN,uco,pco,_co,Ng,gme,bco,vco,fN,Fco,Tco,Mco,qg,hme,Eco,Cco,gN,wco,Aco,Lco,jg,ume,yco,xco,hN,$co,kco,Sco,Dg,pme,Rco,Pco,uN,Bco,Ico,Nco,Gg,_me,qco,jco,pN,Dco,Gco,Oco,Og,bme,Vco,Xco,_N,zco,Qco,Wco,Vg,vme,Uco,Hco,bN,Jco,Yco,Kco,Xg,Fme,Zco,emo,vN,omo,rmo,tmo,zg,Tme,amo,nmo,FN,smo,lmo,imo,Qg,Mme,dmo,cmo,TN,mmo,fmo,gmo,Wg,Eme,hmo,umo,MN,pmo,_mo,bmo,Ug,Cme,vmo,Fmo,EN,Tmo,Mmo,Emo,Hg,wme,Cmo,wmo,CN,Amo,Lmo,ymo,Jg,Ame,xmo,$mo,wN,kmo,Smo,Rmo,Yg,Lme,Pmo,Bmo,AN,Imo,Nmo,qmo,Kg,yme,jmo,Dmo,LN,Gmo,Omo,Vmo,Zg,xme,Xmo,zmo,yN,Qmo,Wmo,Umo,eh,$me,Hmo,Jmo,xN,Ymo,Kmo,Zmo,oh,kme,efo,ofo,$N,rfo,tfo,afo,rh,Sme,nfo,sfo,kN,lfo,ifo,dfo,th,Rme,cfo,mfo,SN,ffo,gfo,hfo,ah,Pme,ufo,pfo,RN,_fo,bfo,vfo,nh,Bme,Ffo,Tfo,PN,Mfo,Efo,Cfo,sh,Ime,wfo,Afo,BN,Lfo,yfo,xfo,lh,Nme,$fo,kfo,IN,Sfo,Rfo,Pfo,ih,qme,Bfo,Ifo,NN,Nfo,qfo,jfo,dh,jme,Dfo,Gfo,qN,Ofo,Vfo,Xfo,ch,Dme,zfo,Qfo,jN,Wfo,Ufo,Hfo,mh,Gme,Jfo,Yfo,DN,Kfo,Zfo,ego,fh,Ome,ogo,rgo,GN,tgo,ago,ngo,gh,Vme,sgo,lgo,ON,igo,dgo,cgo,hh,Xme,mgo,fgo,VN,ggo,hgo,ugo,uh,zme,pgo,_go,XN,bgo,vgo,Fgo,ph,Qme,Tgo,Mgo,zN,Ego,Cgo,wgo,_h,Wme,Ago,Lgo,QN,ygo,xgo,$go,bh,Ume,kgo,Sgo,WN,Rgo,Pgo,Bgo,vh,Hme,Igo,Ngo,UN,qgo,jgo,Dgo,Fh,Jme,Ggo,Ogo,HN,Vgo,Xgo,zgo,Th,Yme,Qgo,Wgo,JN,Ugo,Hgo,Jgo,Mh,Kme,Ygo,Kgo,YN,Zgo,eho,oho,Eh,Zme,rho,tho,KN,aho,nho,sho,Ch,efe,lho,iho,ZN,dho,cho,mho,wh,ofe,fho,gho,eq,hho,uho,pho,Ah,rfe,_ho,bho,oq,vho,Fho,Tho,Lh,tfe,Mho,Eho,rq,Cho,who,Aho,yh,afe,Lho,yho,tq,xho,$ho,kho,xh,nfe,Sho,Rho,aq,Pho,Bho,Iho,$h,sfe,Nho,qho,nq,jho,Dho,Gho,kh,lfe,Oho,Vho,sq,Xho,zho,Qho,Sh,ife,Who,Uho,lq,Hho,Jho,Yho,Rh,dfe,Kho,Zho,iq,euo,ouo,ruo,Ph,cfe,tuo,auo,dq,nuo,suo,luo,Bh,mfe,iuo,duo,cq,cuo,muo,fuo,Ih,ffe,guo,huo,mq,uuo,puo,_uo,Nh,gfe,buo,vuo,fq,Fuo,Tuo,Muo,qh,hfe,Euo,Cuo,gq,wuo,Auo,Luo,jh,ufe,yuo,xuo,hq,$uo,kuo,Suo,Dh,pfe,Ruo,Puo,uq,Buo,Iuo,Nuo,Gh,_fe,quo,juo,pq,Duo,Guo,Ouo,Oh,bfe,Vuo,Xuo,_q,zuo,Quo,Wuo,Vh,vfe,Uuo,Huo,bq,Juo,Yuo,Kuo,Xh,Ffe,Zuo,epo,vq,opo,rpo,tpo,zh,Tfe,apo,npo,Fq,spo,lpo,ipo,Qh,Mfe,dpo,cpo,Tq,mpo,fpo,gpo,Wh,Efe,hpo,upo,Mq,ppo,_po,bpo,Uh,Cfe,vpo,Fpo,Eq,Tpo,Mpo,Epo,Hh,wfe,Cpo,wpo,Cq,Apo,Lpo,ypo,Jh,Afe,xpo,$po,wq,kpo,Spo,Rpo,Yh,Lfe,Ppo,Bpo,Aq,Ipo,Npo,qpo,Kh,yfe,jpo,Dpo,Lq,Gpo,Opo,Vpo,Zh,Xpo,eu,nx,zpo,xfe,Qpo,jZe,gd,ou,$fe,sx,Wpo,kfe,Upo,DZe,ko,lx,Hpo,ix,Jpo,yq,Ypo,Kpo,Zpo,dx,e_o,Sfe,o_o,r_o,t_o,Br,cx,a_o,Rfe,n_o,s_o,Ua,l_o,Pfe,i_o,d_o,Bfe,c_o,m_o,Ife,f_o,g_o,h_o,k,ns,Nfe,u_o,p_o,xq,__o,b_o,$q,v_o,F_o,T_o,ss,qfe,M_o,E_o,kq,C_o,w_o,Sq,A_o,L_o,y_o,ls,jfe,x_o,$_o,Rq,k_o,S_o,Pq,R_o,P_o,B_o,ru,Dfe,I_o,N_o,Bq,q_o,j_o,D_o,is,Gfe,G_o,O_o,Iq,V_o,X_o,Nq,z_o,Q_o,W_o,tu,Ofe,U_o,H_o,qq,J_o,Y_o,K_o,au,Vfe,Z_o,e2o,jq,o2o,r2o,t2o,nu,Xfe,a2o,n2o,Dq,s2o,l2o,i2o,ds,zfe,d2o,c2o,Gq,m2o,f2o,Oq,g2o,h2o,u2o,cs,Qfe,p2o,_2o,Vq,b2o,v2o,Xq,F2o,T2o,M2o,ms,Wfe,E2o,C2o,zq,w2o,A2o,Qq,L2o,y2o,x2o,su,Ufe,$2o,k2o,Wq,S2o,R2o,P2o,lu,Hfe,B2o,I2o,Uq,N2o,q2o,j2o,iu,Jfe,D2o,G2o,Hq,O2o,V2o,X2o,fs,Yfe,z2o,Q2o,Jq,W2o,U2o,Yq,H2o,J2o,Y2o,du,Kfe,K2o,Z2o,Kq,e1o,o1o,r1o,gs,Zfe,t1o,a1o,Zq,n1o,s1o,ej,l1o,i1o,d1o,hs,ege,c1o,m1o,oj,f1o,g1o,rj,h1o,u1o,p1o,us,oge,_1o,b1o,tj,v1o,F1o,aj,T1o,M1o,E1o,ps,rge,C1o,w1o,nj,A1o,L1o,sj,y1o,x1o,$1o,cu,tge,k1o,S1o,lj,R1o,P1o,B1o,_s,age,I1o,N1o,ij,q1o,j1o,dj,D1o,G1o,O1o,bs,nge,V1o,X1o,cj,z1o,Q1o,mj,W1o,U1o,H1o,vs,sge,J1o,Y1o,fj,K1o,Z1o,gj,ebo,obo,rbo,Fs,lge,tbo,abo,hj,nbo,sbo,uj,lbo,ibo,dbo,Ts,ige,cbo,mbo,pj,fbo,gbo,_j,hbo,ubo,pbo,Ms,dge,_bo,bbo,bj,vbo,Fbo,vj,Tbo,Mbo,Ebo,Es,cge,Cbo,wbo,Fj,Abo,Lbo,Tj,ybo,xbo,$bo,mu,mge,kbo,Sbo,Mj,Rbo,Pbo,Bbo,Cs,fge,Ibo,Nbo,Ej,qbo,jbo,Cj,Dbo,Gbo,Obo,fu,gge,Vbo,Xbo,wj,zbo,Qbo,Wbo,ws,hge,Ubo,Hbo,Aj,Jbo,Ybo,Lj,Kbo,Zbo,evo,As,uge,ovo,rvo,yj,tvo,avo,xj,nvo,svo,lvo,Ls,pge,ivo,dvo,$j,cvo,mvo,kj,fvo,gvo,hvo,gu,_ge,uvo,pvo,Sj,_vo,bvo,vvo,hu,bge,Fvo,Tvo,Rj,Mvo,Evo,Cvo,ys,vge,wvo,Avo,Pj,Lvo,yvo,Bj,xvo,$vo,kvo,xs,Fge,Svo,Rvo,Ij,Pvo,Bvo,Nj,Ivo,Nvo,qvo,$s,Tge,jvo,Dvo,qj,Gvo,Ovo,jj,Vvo,Xvo,zvo,uu,Mge,Qvo,Wvo,Dj,Uvo,Hvo,Jvo,ks,Ege,Yvo,Kvo,Gj,Zvo,eFo,Oj,oFo,rFo,tFo,Ss,Cge,aFo,nFo,Vj,sFo,lFo,Xj,iFo,dFo,cFo,Rs,wge,mFo,fFo,zj,gFo,hFo,Qj,uFo,pFo,_Fo,Ps,Age,bFo,vFo,Wj,FFo,TFo,Uj,MFo,EFo,CFo,Bs,Lge,wFo,AFo,Hj,LFo,yFo,Jj,xFo,$Fo,kFo,Is,yge,SFo,RFo,Yj,PFo,BFo,Kj,IFo,NFo,qFo,Ns,xge,jFo,DFo,Zj,GFo,OFo,eD,VFo,XFo,zFo,qs,$ge,QFo,WFo,oD,UFo,HFo,rD,JFo,YFo,KFo,pu,kge,ZFo,eTo,tD,oTo,rTo,tTo,js,Sge,aTo,nTo,aD,sTo,lTo,nD,iTo,dTo,cTo,_u,Rge,mTo,fTo,sD,gTo,hTo,uTo,bu,Pge,pTo,_To,lD,bTo,vTo,FTo,Ds,Bge,TTo,MTo,iD,ETo,CTo,dD,wTo,ATo,LTo,Gs,Ige,yTo,xTo,cD,$To,kTo,mD,STo,RTo,PTo,Os,Nge,BTo,ITo,fD,NTo,qTo,gD,jTo,DTo,GTo,vu,qge,OTo,VTo,hD,XTo,zTo,QTo,Vs,jge,WTo,UTo,uD,HTo,JTo,pD,YTo,KTo,ZTo,Xs,Dge,eMo,oMo,_D,rMo,tMo,bD,aMo,nMo,sMo,zs,Gge,lMo,iMo,vD,dMo,cMo,FD,mMo,fMo,gMo,Qs,Oge,hMo,uMo,TD,pMo,_Mo,MD,bMo,vMo,FMo,Ws,Vge,TMo,MMo,ED,EMo,CMo,CD,wMo,AMo,LMo,Us,Xge,yMo,xMo,wD,$Mo,kMo,AD,SMo,RMo,PMo,Hs,zge,BMo,IMo,LD,NMo,qMo,yD,jMo,DMo,GMo,Js,Qge,OMo,VMo,xD,XMo,zMo,$D,QMo,WMo,UMo,Fu,Wge,HMo,JMo,kD,YMo,KMo,ZMo,Ys,Uge,eEo,oEo,SD,rEo,tEo,RD,aEo,nEo,sEo,Ks,Hge,lEo,iEo,PD,dEo,cEo,BD,mEo,fEo,gEo,Tu,Jge,hEo,uEo,ID,pEo,_Eo,bEo,Mu,Yge,vEo,FEo,ND,TEo,MEo,EEo,Eu,Kge,CEo,wEo,qD,AEo,LEo,yEo,Cu,Zge,xEo,$Eo,jD,kEo,SEo,REo,Zs,ehe,PEo,BEo,DD,IEo,NEo,GD,qEo,jEo,DEo,wu,ohe,GEo,OEo,OD,VEo,XEo,zEo,el,rhe,QEo,WEo,VD,UEo,HEo,XD,JEo,YEo,KEo,ol,the,ZEo,e4o,zD,o4o,r4o,QD,t4o,a4o,n4o,rl,ahe,s4o,l4o,WD,i4o,d4o,UD,c4o,m4o,f4o,tl,nhe,g4o,h4o,HD,u4o,p4o,JD,_4o,b4o,v4o,al,she,F4o,T4o,YD,M4o,E4o,KD,C4o,w4o,A4o,nl,lhe,L4o,y4o,ZD,x4o,$4o,eG,k4o,S4o,R4o,Au,ihe,P4o,B4o,oG,I4o,N4o,q4o,Lu,dhe,j4o,D4o,rG,G4o,O4o,V4o,sl,che,X4o,z4o,tG,Q4o,W4o,aG,U4o,H4o,J4o,ll,mhe,Y4o,K4o,nG,Z4o,eCo,sG,oCo,rCo,tCo,il,fhe,aCo,nCo,lG,sCo,lCo,iG,iCo,dCo,cCo,yu,ghe,mCo,fCo,dG,gCo,hCo,uCo,xu,hhe,pCo,_Co,cG,bCo,vCo,FCo,$u,uhe,TCo,MCo,mG,ECo,CCo,wCo,dl,phe,ACo,LCo,fG,yCo,xCo,gG,$Co,kCo,SCo,cl,_he,RCo,PCo,hG,BCo,ICo,uG,NCo,qCo,jCo,ku,bhe,DCo,GCo,pG,OCo,VCo,XCo,Su,vhe,zCo,QCo,_G,WCo,UCo,HCo,Ru,Fhe,JCo,YCo,bG,KCo,ZCo,e3o,ml,The,o3o,r3o,vG,t3o,a3o,FG,n3o,s3o,l3o,fl,Mhe,i3o,d3o,TG,c3o,m3o,MG,f3o,g3o,h3o,Pu,Ehe,u3o,p3o,EG,_3o,b3o,v3o,Bu,Che,F3o,T3o,CG,M3o,E3o,C3o,gl,whe,w3o,A3o,wG,L3o,y3o,AG,x3o,$3o,k3o,hl,Ahe,S3o,R3o,LG,P3o,B3o,yG,I3o,N3o,q3o,ul,Lhe,j3o,D3o,xG,G3o,O3o,$G,V3o,X3o,z3o,pl,yhe,Q3o,W3o,kG,U3o,H3o,SG,J3o,Y3o,K3o,Iu,Z3o,Nu,mx,e5o,xhe,o5o,GZe,hd,qu,$he,fx,r5o,khe,t5o,OZe,So,gx,a5o,hx,n5o,RG,s5o,l5o,i5o,ux,d5o,She,c5o,m5o,f5o,Ye,px,g5o,Rhe,h5o,u5o,Ha,p5o,Phe,_5o,b5o,Bhe,v5o,F5o,Ihe,T5o,M5o,E5o,z,ju,Nhe,C5o,w5o,PG,A5o,L5o,y5o,Du,qhe,x5o,$5o,BG,k5o,S5o,R5o,Gu,jhe,P5o,B5o,IG,I5o,N5o,q5o,Ou,Dhe,j5o,D5o,NG,G5o,O5o,V5o,Vu,Ghe,X5o,z5o,qG,Q5o,W5o,U5o,Xu,Ohe,H5o,J5o,jG,Y5o,K5o,Z5o,zu,Vhe,e0o,o0o,DG,r0o,t0o,a0o,Qu,Xhe,n0o,s0o,GG,l0o,i0o,d0o,Wu,zhe,c0o,m0o,OG,f0o,g0o,h0o,Uu,Qhe,u0o,p0o,VG,_0o,b0o,v0o,Hu,Whe,F0o,T0o,XG,M0o,E0o,C0o,Ju,Uhe,w0o,A0o,zG,L0o,y0o,x0o,Yu,Hhe,$0o,k0o,QG,S0o,R0o,P0o,Ku,Jhe,B0o,I0o,WG,N0o,q0o,j0o,Zu,Yhe,D0o,G0o,UG,O0o,V0o,X0o,ep,Khe,z0o,Q0o,HG,W0o,U0o,H0o,op,Zhe,J0o,Y0o,JG,K0o,Z0o,ewo,rp,eue,owo,rwo,YG,two,awo,nwo,tp,oue,swo,lwo,KG,iwo,dwo,cwo,ap,rue,mwo,fwo,ZG,gwo,hwo,uwo,np,tue,pwo,_wo,eO,bwo,vwo,Fwo,sp,aue,Two,Mwo,oO,Ewo,Cwo,wwo,lp,nue,Awo,Lwo,rO,ywo,xwo,$wo,ip,sue,kwo,Swo,tO,Rwo,Pwo,Bwo,dp,lue,Iwo,Nwo,aO,qwo,jwo,Dwo,cp,iue,Gwo,Owo,nO,Vwo,Xwo,zwo,mp,due,Qwo,Wwo,sO,Uwo,Hwo,Jwo,fp,cue,Ywo,Kwo,lO,Zwo,eAo,oAo,gp,mue,rAo,tAo,iO,aAo,nAo,sAo,hp,fue,lAo,iAo,dO,dAo,cAo,mAo,up,gue,fAo,gAo,cO,hAo,uAo,pAo,pp,hue,_Ao,bAo,mO,vAo,FAo,TAo,_p,uue,MAo,EAo,fO,CAo,wAo,AAo,bp,pue,LAo,yAo,gO,xAo,$Ao,kAo,vp,_ue,SAo,RAo,hO,PAo,BAo,IAo,Fp,bue,NAo,qAo,uO,jAo,DAo,GAo,Tp,vue,OAo,VAo,pO,XAo,zAo,QAo,Mp,Fue,WAo,UAo,_O,HAo,JAo,YAo,Ep,Tue,KAo,ZAo,bO,e6o,o6o,r6o,Cp,Mue,t6o,a6o,vO,n6o,s6o,l6o,wp,Eue,i6o,d6o,FO,c6o,m6o,f6o,Ap,Cue,g6o,h6o,TO,u6o,p6o,_6o,Lp,b6o,yp,v6o,xp,_x,F6o,wue,T6o,VZe,ud,$p,Aue,bx,M6o,Lue,E6o,XZe,Ro,vx,C6o,Fx,w6o,MO,A6o,L6o,y6o,Tx,x6o,yue,$6o,k6o,S6o,Ke,Mx,R6o,xue,P6o,B6o,pd,I6o,$ue,N6o,q6o,kue,j6o,D6o,G6o,le,kp,Sue,O6o,V6o,EO,X6o,z6o,Q6o,Sp,Rue,W6o,U6o,CO,H6o,J6o,Y6o,Rp,Pue,K6o,Z6o,wO,e7o,o7o,r7o,Pp,Bue,t7o,a7o,AO,n7o,s7o,l7o,Bp,Iue,i7o,d7o,LO,c7o,m7o,f7o,Ip,Nue,g7o,h7o,yO,u7o,p7o,_7o,Np,que,b7o,v7o,xO,F7o,T7o,M7o,qp,jue,E7o,C7o,$O,w7o,A7o,L7o,jp,Due,y7o,x7o,kO,$7o,k7o,S7o,Dp,Gue,R7o,P7o,SO,B7o,I7o,N7o,Gp,Oue,q7o,j7o,RO,D7o,G7o,O7o,Op,Vue,V7o,X7o,PO,z7o,Q7o,W7o,Vp,Xue,U7o,H7o,BO,J7o,Y7o,K7o,Xp,zue,Z7o,eLo,IO,oLo,rLo,tLo,zp,Que,aLo,nLo,NO,sLo,lLo,iLo,Qp,Wue,dLo,cLo,qO,mLo,fLo,gLo,Wp,Uue,hLo,uLo,jO,pLo,_Lo,bLo,Up,Hue,vLo,FLo,DO,TLo,MLo,ELo,Hp,Jue,CLo,wLo,GO,ALo,LLo,yLo,Jp,Yue,xLo,$Lo,OO,kLo,SLo,RLo,Yp,Kue,PLo,BLo,VO,ILo,NLo,qLo,Kp,Zue,jLo,DLo,XO,GLo,OLo,VLo,Zp,XLo,e_,zLo,o_,Ex,QLo,epe,WLo,zZe,_d,r_,ope,Cx,ULo,rpe,HLo,QZe,Po,wx,JLo,bd,YLo,zO,KLo,ZLo,QO,eyo,oyo,ryo,Ax,tyo,tpe,ayo,nyo,syo,_t,Lx,lyo,ape,iyo,dyo,vd,cyo,npe,myo,fyo,WO,gyo,hyo,uyo,t_,pyo,Ze,yx,_yo,spe,byo,vyo,Ja,Fyo,lpe,Tyo,Myo,ipe,Eyo,Cyo,dpe,wyo,Ayo,Lyo,y,a_,cpe,yyo,xyo,UO,$yo,kyo,Syo,n_,mpe,Ryo,Pyo,HO,Byo,Iyo,Nyo,s_,fpe,qyo,jyo,JO,Dyo,Gyo,Oyo,l_,gpe,Vyo,Xyo,YO,zyo,Qyo,Wyo,i_,hpe,Uyo,Hyo,KO,Jyo,Yyo,Kyo,d_,upe,Zyo,e8o,ZO,o8o,r8o,t8o,c_,ppe,a8o,n8o,eV,s8o,l8o,i8o,m_,_pe,d8o,c8o,oV,m8o,f8o,g8o,f_,bpe,h8o,u8o,rV,p8o,_8o,b8o,g_,vpe,v8o,F8o,tV,T8o,M8o,E8o,h_,Fpe,C8o,w8o,aV,A8o,L8o,y8o,u_,Tpe,x8o,$8o,nV,k8o,S8o,R8o,p_,Mpe,P8o,B8o,sV,I8o,N8o,q8o,__,Epe,j8o,D8o,lV,G8o,O8o,V8o,b_,Cpe,X8o,z8o,iV,Q8o,W8o,U8o,v_,wpe,H8o,J8o,dV,Y8o,K8o,Z8o,F_,Ape,e9o,o9o,cV,r9o,t9o,a9o,T_,Lpe,n9o,s9o,mV,l9o,i9o,d9o,M_,ype,c9o,m9o,fV,f9o,g9o,h9o,E_,xpe,u9o,p9o,gV,_9o,b9o,v9o,C_,$pe,F9o,T9o,hV,M9o,E9o,C9o,w_,kpe,w9o,A9o,uV,L9o,y9o,x9o,A_,Spe,$9o,k9o,pV,S9o,R9o,P9o,L_,Rpe,B9o,I9o,_V,N9o,q9o,j9o,y_,Ppe,D9o,G9o,bV,O9o,V9o,X9o,x_,Bpe,z9o,Q9o,vV,W9o,U9o,H9o,$_,Ipe,J9o,Y9o,FV,K9o,Z9o,exo,k_,Npe,oxo,rxo,TV,txo,axo,nxo,S_,qpe,sxo,lxo,MV,ixo,dxo,cxo,R_,jpe,mxo,fxo,EV,gxo,hxo,uxo,P_,Dpe,pxo,_xo,CV,bxo,vxo,Fxo,B_,Gpe,Txo,Mxo,wV,Exo,Cxo,wxo,I_,Ope,Axo,Lxo,AV,yxo,xxo,$xo,N_,Vpe,kxo,Sxo,LV,Rxo,Pxo,Bxo,q_,Xpe,Ixo,Nxo,yV,qxo,jxo,Dxo,j_,zpe,Gxo,Oxo,xV,Vxo,Xxo,zxo,D_,Qpe,Qxo,Wxo,$V,Uxo,Hxo,Jxo,G_,Wpe,Yxo,Kxo,kV,Zxo,e$o,o$o,O_,Upe,r$o,t$o,SV,a$o,n$o,s$o,_l,Hpe,l$o,i$o,RV,d$o,c$o,PV,m$o,f$o,g$o,V_,Jpe,h$o,u$o,BV,p$o,_$o,b$o,X_,Ype,v$o,F$o,IV,T$o,M$o,E$o,z_,Kpe,C$o,w$o,NV,A$o,L$o,y$o,Q_,Zpe,x$o,$$o,qV,k$o,S$o,R$o,W_,e_e,P$o,B$o,jV,I$o,N$o,q$o,U_,o_e,j$o,D$o,DV,G$o,O$o,V$o,H_,r_e,X$o,z$o,GV,Q$o,W$o,U$o,J_,t_e,H$o,J$o,OV,Y$o,K$o,Z$o,Y_,a_e,eko,oko,VV,rko,tko,ako,K_,n_e,nko,sko,XV,lko,iko,dko,Z_,s_e,cko,mko,zV,fko,gko,hko,e2,l_e,uko,pko,QV,_ko,bko,vko,o2,i_e,Fko,Tko,WV,Mko,Eko,Cko,r2,d_e,wko,Ako,UV,Lko,yko,xko,t2,c_e,$ko,kko,HV,Sko,Rko,Pko,a2,m_e,Bko,Iko,JV,Nko,qko,jko,n2,f_e,Dko,Gko,YV,Oko,Vko,Xko,s2,g_e,zko,Qko,KV,Wko,Uko,Hko,l2,h_e,Jko,Yko,ZV,Kko,Zko,eSo,i2,u_e,oSo,rSo,eX,tSo,aSo,nSo,d2,p_e,sSo,lSo,oX,iSo,dSo,cSo,c2,__e,mSo,fSo,rX,gSo,hSo,uSo,m2,b_e,pSo,_So,tX,bSo,vSo,FSo,f2,v_e,TSo,MSo,aX,ESo,CSo,wSo,g2,F_e,ASo,LSo,nX,ySo,xSo,$So,h2,T_e,kSo,SSo,sX,RSo,PSo,BSo,u2,M_e,ISo,NSo,lX,qSo,jSo,DSo,p2,E_e,GSo,OSo,iX,VSo,XSo,zSo,_2,C_e,QSo,WSo,dX,USo,HSo,JSo,b2,w_e,YSo,KSo,cX,ZSo,eRo,oRo,v2,A_e,rRo,tRo,mX,aRo,nRo,sRo,F2,L_e,lRo,iRo,fX,dRo,cRo,mRo,T2,y_e,fRo,gRo,gX,hRo,uRo,pRo,M2,x_e,_Ro,bRo,hX,vRo,FRo,TRo,E2,$_e,MRo,ERo,uX,CRo,wRo,ARo,C2,k_e,LRo,yRo,pX,xRo,$Ro,kRo,w2,S_e,SRo,RRo,_X,PRo,BRo,IRo,A2,R_e,NRo,qRo,bX,jRo,DRo,GRo,L2,P_e,ORo,VRo,vX,XRo,zRo,QRo,y2,B_e,WRo,URo,FX,HRo,JRo,YRo,x2,I_e,KRo,ZRo,TX,ePo,oPo,rPo,$2,N_e,tPo,aPo,MX,nPo,sPo,lPo,k2,q_e,iPo,dPo,EX,cPo,mPo,fPo,S2,j_e,gPo,hPo,CX,uPo,pPo,_Po,R2,D_e,bPo,vPo,wX,FPo,TPo,MPo,P2,G_e,EPo,CPo,AX,wPo,APo,LPo,B2,O_e,yPo,xPo,LX,$Po,kPo,SPo,I2,V_e,RPo,PPo,yX,BPo,IPo,NPo,N2,X_e,qPo,jPo,xX,DPo,GPo,OPo,q2,z_e,VPo,XPo,$X,zPo,QPo,WPo,j2,Q_e,UPo,HPo,kX,JPo,YPo,KPo,D2,W_e,ZPo,eBo,SX,oBo,rBo,tBo,G2,U_e,aBo,nBo,RX,sBo,lBo,iBo,O2,H_e,dBo,cBo,PX,mBo,fBo,gBo,V2,J_e,hBo,uBo,BX,pBo,_Bo,bBo,X2,Y_e,vBo,FBo,IX,TBo,MBo,EBo,z2,K_e,CBo,wBo,NX,ABo,LBo,yBo,Q2,Z_e,xBo,$Bo,qX,kBo,SBo,RBo,W2,e2e,PBo,BBo,jX,IBo,NBo,qBo,U2,o2e,jBo,DBo,DX,GBo,OBo,VBo,H2,r2e,XBo,zBo,GX,QBo,WBo,UBo,J2,t2e,HBo,JBo,OX,YBo,KBo,ZBo,Y2,a2e,eIo,oIo,VX,rIo,tIo,aIo,K2,n2e,nIo,sIo,XX,lIo,iIo,dIo,Z2,s2e,cIo,mIo,zX,fIo,gIo,hIo,e1,l2e,uIo,pIo,QX,_Io,bIo,vIo,o1,i2e,FIo,TIo,WX,MIo,EIo,CIo,r1,d2e,wIo,AIo,UX,LIo,yIo,xIo,t1,c2e,$Io,kIo,HX,SIo,RIo,PIo,a1,m2e,BIo,IIo,JX,NIo,qIo,jIo,n1,f2e,DIo,GIo,YX,OIo,VIo,XIo,s1,g2e,zIo,QIo,KX,WIo,UIo,HIo,l1,h2e,JIo,YIo,ZX,KIo,ZIo,eNo,i1,u2e,oNo,rNo,ez,tNo,aNo,nNo,d1,p2e,sNo,lNo,oz,iNo,dNo,cNo,c1,_2e,mNo,fNo,rz,gNo,hNo,uNo,m1,b2e,pNo,_No,tz,bNo,vNo,FNo,f1,v2e,TNo,MNo,az,ENo,CNo,wNo,g1,F2e,ANo,LNo,nz,yNo,xNo,$No,h1,T2e,kNo,SNo,sz,RNo,PNo,BNo,u1,M2e,INo,NNo,lz,qNo,jNo,DNo,p1,E2e,GNo,ONo,iz,VNo,XNo,zNo,_1,C2e,QNo,WNo,dz,UNo,HNo,JNo,b1,w2e,YNo,KNo,cz,ZNo,eqo,oqo,v1,A2e,rqo,tqo,mz,aqo,nqo,sqo,F1,lqo,L2e,iqo,dqo,y2e,cqo,mqo,T1,WZe,Fd,M1,x2e,xx,fqo,$2e,gqo,UZe,Bo,$x,hqo,Td,uqo,fz,pqo,_qo,gz,bqo,vqo,Fqo,kx,Tqo,k2e,Mqo,Eqo,Cqo,bt,Sx,wqo,S2e,Aqo,Lqo,Md,yqo,R2e,xqo,$qo,hz,kqo,Sqo,Rqo,E1,Pqo,eo,Rx,Bqo,P2e,Iqo,Nqo,Ya,qqo,B2e,jqo,Dqo,I2e,Gqo,Oqo,N2e,Vqo,Xqo,zqo,G,C1,q2e,Qqo,Wqo,uz,Uqo,Hqo,Jqo,w1,j2e,Yqo,Kqo,pz,Zqo,ejo,ojo,A1,D2e,rjo,tjo,_z,ajo,njo,sjo,L1,G2e,ljo,ijo,bz,djo,cjo,mjo,y1,O2e,fjo,gjo,vz,hjo,ujo,pjo,x1,V2e,_jo,bjo,Fz,vjo,Fjo,Tjo,$1,X2e,Mjo,Ejo,Tz,Cjo,wjo,Ajo,k1,z2e,Ljo,yjo,Mz,xjo,$jo,kjo,S1,Q2e,Sjo,Rjo,Ez,Pjo,Bjo,Ijo,R1,W2e,Njo,qjo,Cz,jjo,Djo,Gjo,P1,U2e,Ojo,Vjo,wz,Xjo,zjo,Qjo,B1,H2e,Wjo,Ujo,Az,Hjo,Jjo,Yjo,I1,J2e,Kjo,Zjo,Lz,eDo,oDo,rDo,N1,Y2e,tDo,aDo,yz,nDo,sDo,lDo,q1,K2e,iDo,dDo,xz,cDo,mDo,fDo,j1,Z2e,gDo,hDo,$z,uDo,pDo,_Do,D1,e1e,bDo,vDo,kz,FDo,TDo,MDo,G1,o1e,EDo,CDo,Sz,wDo,ADo,LDo,O1,r1e,yDo,xDo,Rz,$Do,kDo,SDo,V1,t1e,RDo,PDo,Pz,BDo,IDo,NDo,X1,a1e,qDo,jDo,Bz,DDo,GDo,ODo,z1,n1e,VDo,XDo,Iz,zDo,QDo,WDo,Q1,s1e,UDo,HDo,Nz,JDo,YDo,KDo,W1,l1e,ZDo,eGo,qz,oGo,rGo,tGo,U1,i1e,aGo,nGo,jz,sGo,lGo,iGo,H1,d1e,dGo,cGo,Dz,mGo,fGo,gGo,J1,c1e,hGo,uGo,Gz,pGo,_Go,bGo,Y1,m1e,vGo,FGo,Oz,TGo,MGo,EGo,K1,f1e,CGo,wGo,Vz,AGo,LGo,yGo,Z1,g1e,xGo,$Go,Xz,kGo,SGo,RGo,eb,h1e,PGo,BGo,zz,IGo,NGo,qGo,ob,u1e,jGo,DGo,Qz,GGo,OGo,VGo,rb,p1e,XGo,zGo,Wz,QGo,WGo,UGo,tb,_1e,HGo,JGo,Uz,YGo,KGo,ZGo,ab,b1e,eOo,oOo,Hz,rOo,tOo,aOo,nb,v1e,nOo,sOo,Jz,lOo,iOo,dOo,sb,F1e,cOo,mOo,Yz,fOo,gOo,hOo,lb,T1e,uOo,pOo,Kz,_Oo,bOo,vOo,ib,M1e,FOo,TOo,Zz,MOo,EOo,COo,db,E1e,wOo,AOo,eQ,LOo,yOo,xOo,cb,C1e,$Oo,kOo,oQ,SOo,ROo,POo,mb,w1e,BOo,IOo,rQ,NOo,qOo,jOo,fb,A1e,DOo,GOo,tQ,OOo,VOo,XOo,gb,L1e,zOo,QOo,aQ,WOo,UOo,HOo,hb,y1e,JOo,YOo,nQ,KOo,ZOo,eVo,ub,x1e,oVo,rVo,sQ,tVo,aVo,nVo,pb,$1e,sVo,lVo,lQ,iVo,dVo,cVo,_b,k1e,mVo,fVo,iQ,gVo,hVo,uVo,bb,pVo,S1e,_Vo,bVo,R1e,vVo,FVo,vb,HZe,Ed,Fb,P1e,Px,TVo,B1e,MVo,JZe,Io,Bx,EVo,Cd,CVo,dQ,wVo,AVo,cQ,LVo,yVo,xVo,Ix,$Vo,I1e,kVo,SVo,RVo,vt,Nx,PVo,N1e,BVo,IVo,wd,NVo,q1e,qVo,jVo,mQ,DVo,GVo,OVo,Tb,VVo,oo,qx,XVo,j1e,zVo,QVo,Ka,WVo,D1e,UVo,HVo,G1e,JVo,YVo,O1e,KVo,ZVo,eXo,Q,Mb,V1e,oXo,rXo,fQ,tXo,aXo,nXo,Eb,X1e,sXo,lXo,gQ,iXo,dXo,cXo,Cb,z1e,mXo,fXo,hQ,gXo,hXo,uXo,wb,Q1e,pXo,_Xo,uQ,bXo,vXo,FXo,Ab,W1e,TXo,MXo,pQ,EXo,CXo,wXo,Lb,U1e,AXo,LXo,_Q,yXo,xXo,$Xo,yb,H1e,kXo,SXo,bQ,RXo,PXo,BXo,xb,J1e,IXo,NXo,vQ,qXo,jXo,DXo,$b,Y1e,GXo,OXo,FQ,VXo,XXo,zXo,kb,K1e,QXo,WXo,TQ,UXo,HXo,JXo,Sb,Z1e,YXo,KXo,MQ,ZXo,ezo,ozo,Rb,ebe,rzo,tzo,EQ,azo,nzo,szo,Pb,obe,lzo,izo,CQ,dzo,czo,mzo,Bb,rbe,fzo,gzo,wQ,hzo,uzo,pzo,Ib,tbe,_zo,bzo,AQ,vzo,Fzo,Tzo,Nb,abe,Mzo,Ezo,LQ,Czo,wzo,Azo,qb,nbe,Lzo,yzo,yQ,xzo,$zo,kzo,jb,sbe,Szo,Rzo,xQ,Pzo,Bzo,Izo,Db,lbe,Nzo,qzo,$Q,jzo,Dzo,Gzo,Gb,ibe,Ozo,Vzo,kQ,Xzo,zzo,Qzo,Ob,dbe,Wzo,Uzo,SQ,Hzo,Jzo,Yzo,Vb,cbe,Kzo,Zzo,RQ,eQo,oQo,rQo,Xb,mbe,tQo,aQo,PQ,nQo,sQo,lQo,zb,fbe,iQo,dQo,BQ,cQo,mQo,fQo,Qb,gbe,gQo,hQo,IQ,uQo,pQo,_Qo,Wb,hbe,bQo,vQo,NQ,FQo,TQo,MQo,Ub,ube,EQo,CQo,qQ,wQo,AQo,LQo,Hb,pbe,yQo,xQo,jQ,$Qo,kQo,SQo,Jb,_be,RQo,PQo,DQ,BQo,IQo,NQo,Yb,bbe,qQo,jQo,GQ,DQo,GQo,OQo,Kb,vbe,VQo,XQo,OQ,zQo,QQo,WQo,Zb,Fbe,UQo,HQo,VQ,JQo,YQo,KQo,ev,Tbe,ZQo,eWo,XQ,oWo,rWo,tWo,ov,Mbe,aWo,nWo,zQ,sWo,lWo,iWo,rv,Ebe,dWo,cWo,QQ,mWo,fWo,gWo,tv,Cbe,hWo,uWo,WQ,pWo,_Wo,bWo,av,wbe,vWo,FWo,UQ,TWo,MWo,EWo,nv,Abe,CWo,wWo,HQ,AWo,LWo,yWo,sv,Lbe,xWo,$Wo,JQ,kWo,SWo,RWo,lv,ybe,PWo,BWo,YQ,IWo,NWo,qWo,iv,xbe,jWo,DWo,KQ,GWo,OWo,VWo,dv,$be,XWo,zWo,ZQ,QWo,WWo,UWo,cv,HWo,kbe,JWo,YWo,Sbe,KWo,ZWo,mv,YZe,Ad,fv,Rbe,jx,eUo,Pbe,oUo,KZe,No,Dx,rUo,Ld,tUo,eW,aUo,nUo,oW,sUo,lUo,iUo,Gx,dUo,Bbe,cUo,mUo,fUo,Ft,Ox,gUo,Ibe,hUo,uUo,yd,pUo,Nbe,_Uo,bUo,rW,vUo,FUo,TUo,gv,MUo,ro,Vx,EUo,qbe,CUo,wUo,Za,AUo,jbe,LUo,yUo,Dbe,xUo,$Uo,Gbe,kUo,SUo,RUo,J,hv,Obe,PUo,BUo,tW,IUo,NUo,qUo,uv,Vbe,jUo,DUo,aW,GUo,OUo,VUo,pv,Xbe,XUo,zUo,nW,QUo,WUo,UUo,_v,zbe,HUo,JUo,sW,YUo,KUo,ZUo,bv,Qbe,eHo,oHo,lW,rHo,tHo,aHo,vv,Wbe,nHo,sHo,iW,lHo,iHo,dHo,Fv,Ube,cHo,mHo,dW,fHo,gHo,hHo,Tv,Hbe,uHo,pHo,cW,_Ho,bHo,vHo,Mv,Jbe,FHo,THo,mW,MHo,EHo,CHo,Ev,Ybe,wHo,AHo,fW,LHo,yHo,xHo,Cv,Kbe,$Ho,kHo,gW,SHo,RHo,PHo,wv,Zbe,BHo,IHo,hW,NHo,qHo,jHo,Av,eve,DHo,GHo,uW,OHo,VHo,XHo,Lv,ove,zHo,QHo,pW,WHo,UHo,HHo,yv,rve,JHo,YHo,_W,KHo,ZHo,eJo,xv,tve,oJo,rJo,bW,tJo,aJo,nJo,$v,ave,sJo,lJo,vW,iJo,dJo,cJo,kv,nve,mJo,fJo,FW,gJo,hJo,uJo,Sv,sve,pJo,_Jo,TW,bJo,vJo,FJo,Rv,lve,TJo,MJo,MW,EJo,CJo,wJo,Pv,ive,AJo,LJo,EW,yJo,xJo,$Jo,Bv,dve,kJo,SJo,CW,RJo,PJo,BJo,Iv,cve,IJo,NJo,wW,qJo,jJo,DJo,Nv,mve,GJo,OJo,AW,VJo,XJo,zJo,qv,fve,QJo,WJo,LW,UJo,HJo,JJo,jv,gve,YJo,KJo,yW,ZJo,eYo,oYo,Dv,hve,rYo,tYo,xW,aYo,nYo,sYo,Gv,uve,lYo,iYo,$W,dYo,cYo,mYo,Ov,pve,fYo,gYo,kW,hYo,uYo,pYo,Vv,_ve,_Yo,bYo,SW,vYo,FYo,TYo,Xv,bve,MYo,EYo,RW,CYo,wYo,AYo,zv,vve,LYo,yYo,PW,xYo,$Yo,kYo,Qv,Fve,SYo,RYo,BW,PYo,BYo,IYo,Wv,Tve,NYo,qYo,IW,jYo,DYo,GYo,Uv,Mve,OYo,VYo,Eve,XYo,zYo,QYo,Hv,Cve,WYo,UYo,NW,HYo,JYo,YYo,Jv,wve,KYo,ZYo,qW,eKo,oKo,rKo,Yv,Ave,tKo,aKo,jW,nKo,sKo,lKo,Kv,Lve,iKo,dKo,DW,cKo,mKo,fKo,Zv,gKo,yve,hKo,uKo,xve,pKo,_Ko,eF,ZZe,xd,oF,$ve,Xx,bKo,kve,vKo,eeo,qo,zx,FKo,$d,TKo,GW,MKo,EKo,OW,CKo,wKo,AKo,Qx,LKo,Sve,yKo,xKo,$Ko,Tt,Wx,kKo,Rve,SKo,RKo,kd,PKo,Pve,BKo,IKo,VW,NKo,qKo,jKo,rF,DKo,to,Ux,GKo,Bve,OKo,VKo,en,XKo,Ive,zKo,QKo,Nve,WKo,UKo,qve,HKo,JKo,YKo,fe,tF,jve,KKo,ZKo,XW,eZo,oZo,rZo,aF,Dve,tZo,aZo,zW,nZo,sZo,lZo,nF,Gve,iZo,dZo,QW,cZo,mZo,fZo,sF,Ove,gZo,hZo,WW,uZo,pZo,_Zo,lF,Vve,bZo,vZo,UW,FZo,TZo,MZo,iF,Xve,EZo,CZo,HW,wZo,AZo,LZo,dF,zve,yZo,xZo,JW,$Zo,kZo,SZo,cF,Qve,RZo,PZo,YW,BZo,IZo,NZo,mF,Wve,qZo,jZo,KW,DZo,GZo,OZo,fF,Uve,VZo,XZo,ZW,zZo,QZo,WZo,gF,Hve,UZo,HZo,eU,JZo,YZo,KZo,hF,Jve,ZZo,eer,oU,oer,rer,ter,uF,Yve,aer,ner,rU,ser,ler,ier,pF,Kve,der,cer,tU,mer,fer,ger,_F,Zve,her,uer,aU,per,_er,ber,bF,eFe,ver,Fer,nU,Ter,Mer,Eer,vF,oFe,Cer,wer,sU,Aer,Ler,yer,FF,rFe,xer,$er,lU,ker,Ser,Rer,TF,tFe,Per,Ber,iU,Ier,Ner,qer,MF,aFe,jer,Der,dU,Ger,Oer,Ver,EF,Xer,nFe,zer,Qer,sFe,Wer,Uer,CF,oeo,Sd,wF,lFe,Hx,Her,iFe,Jer,reo,jo,Jx,Yer,Rd,Ker,cU,Zer,eor,mU,oor,ror,tor,Yx,aor,dFe,nor,sor,lor,Mt,Kx,ior,cFe,dor,cor,Pd,mor,mFe,gor,hor,fU,uor,por,_or,AF,bor,ao,Zx,vor,fFe,For,Tor,on,Mor,gFe,Eor,Cor,hFe,wor,Aor,uFe,Lor,yor,xor,B,LF,pFe,$or,kor,gU,Sor,Ror,Por,yF,_Fe,Bor,Ior,hU,Nor,qor,jor,xF,bFe,Dor,Gor,uU,Oor,Vor,Xor,$F,vFe,zor,Qor,pU,Wor,Uor,Hor,kF,FFe,Jor,Yor,_U,Kor,Zor,err,SF,TFe,orr,rrr,bU,trr,arr,nrr,RF,MFe,srr,lrr,vU,irr,drr,crr,PF,EFe,mrr,frr,FU,grr,hrr,urr,BF,CFe,prr,_rr,TU,brr,vrr,Frr,IF,wFe,Trr,Mrr,MU,Err,Crr,wrr,NF,AFe,Arr,Lrr,EU,yrr,xrr,$rr,qF,LFe,krr,Srr,CU,Rrr,Prr,Brr,jF,yFe,Irr,Nrr,wU,qrr,jrr,Drr,DF,xFe,Grr,Orr,AU,Vrr,Xrr,zrr,GF,$Fe,Qrr,Wrr,LU,Urr,Hrr,Jrr,OF,kFe,Yrr,Krr,yU,Zrr,etr,otr,VF,SFe,rtr,ttr,xU,atr,ntr,str,XF,RFe,ltr,itr,$U,dtr,ctr,mtr,zF,PFe,ftr,gtr,kU,htr,utr,ptr,QF,BFe,_tr,btr,SU,vtr,Ftr,Ttr,WF,IFe,Mtr,Etr,RU,Ctr,wtr,Atr,UF,NFe,Ltr,ytr,PU,xtr,$tr,ktr,HF,qFe,Str,Rtr,BU,Ptr,Btr,Itr,JF,jFe,Ntr,qtr,IU,jtr,Dtr,Gtr,YF,DFe,Otr,Vtr,NU,Xtr,ztr,Qtr,KF,GFe,Wtr,Utr,qU,Htr,Jtr,Ytr,ZF,OFe,Ktr,Ztr,jU,ear,oar,rar,eT,VFe,tar,aar,DU,nar,sar,lar,oT,XFe,iar,dar,GU,car,mar,far,rT,zFe,gar,har,OU,uar,par,_ar,tT,QFe,bar,Far,VU,Tar,Mar,Ear,aT,WFe,Car,war,XU,Aar,Lar,yar,nT,UFe,xar,$ar,zU,kar,Sar,Rar,sT,HFe,Par,Bar,QU,Iar,Nar,qar,lT,JFe,jar,Dar,WU,Gar,Oar,Var,iT,YFe,Xar,zar,UU,Qar,War,Uar,dT,KFe,Har,Jar,HU,Yar,Kar,Zar,cT,ZFe,enr,onr,JU,rnr,tnr,anr,mT,eTe,nnr,snr,YU,lnr,inr,dnr,fT,oTe,cnr,mnr,KU,fnr,gnr,hnr,gT,rTe,unr,pnr,ZU,_nr,bnr,vnr,hT,tTe,Fnr,Tnr,eH,Mnr,Enr,Cnr,uT,aTe,wnr,Anr,oH,Lnr,ynr,xnr,pT,nTe,$nr,knr,rH,Snr,Rnr,Pnr,_T,sTe,Bnr,Inr,tH,Nnr,qnr,jnr,bT,lTe,Dnr,Gnr,aH,Onr,Vnr,Xnr,vT,iTe,znr,Qnr,nH,Wnr,Unr,Hnr,FT,dTe,Jnr,Ynr,sH,Knr,Znr,esr,TT,cTe,osr,rsr,lH,tsr,asr,nsr,MT,mTe,ssr,lsr,iH,isr,dsr,csr,ET,fTe,msr,fsr,dH,gsr,hsr,usr,CT,gTe,psr,_sr,cH,bsr,vsr,Fsr,wT,hTe,Tsr,Msr,mH,Esr,Csr,wsr,AT,uTe,Asr,Lsr,fH,ysr,xsr,$sr,LT,pTe,ksr,Ssr,gH,Rsr,Psr,Bsr,yT,Isr,_Te,Nsr,qsr,bTe,jsr,Dsr,xT,teo,Bd,$T,vTe,e$,Gsr,FTe,Osr,aeo,Do,o$,Vsr,Id,Xsr,hH,zsr,Qsr,uH,Wsr,Usr,Hsr,r$,Jsr,TTe,Ysr,Ksr,Zsr,Et,t$,elr,MTe,olr,rlr,Nd,tlr,ETe,alr,nlr,pH,slr,llr,ilr,kT,dlr,no,a$,clr,CTe,mlr,flr,rn,glr,wTe,hlr,ulr,ATe,plr,_lr,LTe,blr,vlr,Flr,Z,ST,yTe,Tlr,Mlr,_H,Elr,Clr,wlr,RT,xTe,Alr,Llr,bH,ylr,xlr,$lr,PT,$Te,klr,Slr,vH,Rlr,Plr,Blr,BT,kTe,Ilr,Nlr,FH,qlr,jlr,Dlr,IT,STe,Glr,Olr,TH,Vlr,Xlr,zlr,NT,RTe,Qlr,Wlr,MH,Ulr,Hlr,Jlr,qT,PTe,Ylr,Klr,EH,Zlr,eir,oir,jT,BTe,rir,tir,CH,air,nir,sir,DT,ITe,lir,iir,wH,dir,cir,mir,GT,NTe,fir,gir,AH,hir,uir,pir,OT,qTe,_ir,bir,LH,vir,Fir,Tir,VT,jTe,Mir,Eir,yH,Cir,wir,Air,XT,DTe,Lir,yir,xH,xir,$ir,kir,zT,GTe,Sir,Rir,$H,Pir,Bir,Iir,QT,OTe,Nir,qir,kH,jir,Dir,Gir,WT,VTe,Oir,Vir,SH,Xir,zir,Qir,UT,XTe,Wir,Uir,RH,Hir,Jir,Yir,HT,zTe,Kir,Zir,PH,edr,odr,rdr,JT,QTe,tdr,adr,BH,ndr,sdr,ldr,YT,WTe,idr,ddr,IH,cdr,mdr,fdr,KT,UTe,gdr,hdr,NH,udr,pdr,_dr,ZT,HTe,bdr,vdr,qH,Fdr,Tdr,Mdr,eM,JTe,Edr,Cdr,jH,wdr,Adr,Ldr,oM,YTe,ydr,xdr,DH,$dr,kdr,Sdr,rM,KTe,Rdr,Pdr,GH,Bdr,Idr,Ndr,tM,ZTe,qdr,jdr,OH,Ddr,Gdr,Odr,aM,eMe,Vdr,Xdr,VH,zdr,Qdr,Wdr,nM,oMe,Udr,Hdr,XH,Jdr,Ydr,Kdr,sM,rMe,Zdr,ecr,zH,ocr,rcr,tcr,lM,tMe,acr,ncr,QH,scr,lcr,icr,iM,aMe,dcr,ccr,WH,mcr,fcr,gcr,dM,nMe,hcr,ucr,UH,pcr,_cr,bcr,cM,vcr,sMe,Fcr,Tcr,lMe,Mcr,Ecr,mM,neo,qd,fM,iMe,n$,Ccr,dMe,wcr,seo,Go,s$,Acr,jd,Lcr,HH,ycr,xcr,JH,$cr,kcr,Scr,l$,Rcr,cMe,Pcr,Bcr,Icr,Ct,i$,Ncr,mMe,qcr,jcr,Dd,Dcr,fMe,Gcr,Ocr,YH,Vcr,Xcr,zcr,gM,Qcr,so,d$,Wcr,gMe,Ucr,Hcr,tn,Jcr,hMe,Ycr,Kcr,uMe,Zcr,emr,pMe,omr,rmr,tmr,Ue,hM,_Me,amr,nmr,KH,smr,lmr,imr,uM,bMe,dmr,cmr,ZH,mmr,fmr,gmr,pM,vMe,hmr,umr,eJ,pmr,_mr,bmr,_M,FMe,vmr,Fmr,oJ,Tmr,Mmr,Emr,bM,TMe,Cmr,wmr,rJ,Amr,Lmr,ymr,vM,MMe,xmr,$mr,tJ,kmr,Smr,Rmr,FM,EMe,Pmr,Bmr,aJ,Imr,Nmr,qmr,TM,jmr,CMe,Dmr,Gmr,wMe,Omr,Vmr,MM,leo,Gd,EM,AMe,c$,Xmr,LMe,zmr,ieo,Oo,m$,Qmr,Od,Wmr,nJ,Umr,Hmr,sJ,Jmr,Ymr,Kmr,f$,Zmr,yMe,efr,ofr,rfr,wt,g$,tfr,xMe,afr,nfr,Vd,sfr,$Me,lfr,ifr,lJ,dfr,cfr,mfr,CM,ffr,lo,h$,gfr,kMe,hfr,ufr,an,pfr,SMe,_fr,bfr,RMe,vfr,Ffr,PMe,Tfr,Mfr,Efr,H,wM,BMe,Cfr,wfr,iJ,Afr,Lfr,yfr,AM,IMe,xfr,$fr,dJ,kfr,Sfr,Rfr,LM,NMe,Pfr,Bfr,cJ,Ifr,Nfr,qfr,yM,qMe,jfr,Dfr,mJ,Gfr,Ofr,Vfr,xM,jMe,Xfr,zfr,fJ,Qfr,Wfr,Ufr,$M,DMe,Hfr,Jfr,gJ,Yfr,Kfr,Zfr,kM,GMe,egr,ogr,hJ,rgr,tgr,agr,SM,OMe,ngr,sgr,uJ,lgr,igr,dgr,RM,VMe,cgr,mgr,pJ,fgr,ggr,hgr,PM,XMe,ugr,pgr,_J,_gr,bgr,vgr,BM,zMe,Fgr,Tgr,bJ,Mgr,Egr,Cgr,IM,QMe,wgr,Agr,vJ,Lgr,ygr,xgr,NM,WMe,$gr,kgr,FJ,Sgr,Rgr,Pgr,qM,UMe,Bgr,Igr,TJ,Ngr,qgr,jgr,jM,HMe,Dgr,Ggr,MJ,Ogr,Vgr,Xgr,DM,JMe,zgr,Qgr,EJ,Wgr,Ugr,Hgr,GM,YMe,Jgr,Ygr,CJ,Kgr,Zgr,ehr,OM,KMe,ohr,rhr,wJ,thr,ahr,nhr,VM,ZMe,shr,lhr,AJ,ihr,dhr,chr,XM,eEe,mhr,fhr,LJ,ghr,hhr,uhr,zM,oEe,phr,_hr,yJ,bhr,vhr,Fhr,QM,rEe,Thr,Mhr,xJ,Ehr,Chr,whr,WM,tEe,Ahr,Lhr,$J,yhr,xhr,$hr,UM,aEe,khr,Shr,kJ,Rhr,Phr,Bhr,HM,nEe,Ihr,Nhr,SJ,qhr,jhr,Dhr,JM,sEe,Ghr,Ohr,RJ,Vhr,Xhr,zhr,YM,lEe,Qhr,Whr,PJ,Uhr,Hhr,Jhr,KM,iEe,Yhr,Khr,BJ,Zhr,eur,our,ZM,dEe,rur,tur,IJ,aur,nur,sur,eE,cEe,lur,iur,NJ,dur,cur,mur,oE,mEe,fur,gur,qJ,hur,uur,pur,rE,fEe,_ur,bur,jJ,vur,Fur,Tur,tE,gEe,Mur,Eur,DJ,Cur,wur,Aur,aE,hEe,Lur,yur,GJ,xur,$ur,kur,nE,uEe,Sur,Rur,OJ,Pur,Bur,Iur,sE,pEe,Nur,qur,VJ,jur,Dur,Gur,lE,_Ee,Our,Vur,XJ,Xur,zur,Qur,iE,bEe,Wur,Uur,zJ,Hur,Jur,Yur,dE,vEe,Kur,Zur,QJ,epr,opr,rpr,cE,FEe,tpr,apr,WJ,npr,spr,lpr,mE,ipr,TEe,dpr,cpr,MEe,mpr,fpr,fE,deo,Xd,gE,EEe,u$,gpr,CEe,hpr,ceo,Vo,p$,upr,zd,ppr,UJ,_pr,bpr,HJ,vpr,Fpr,Tpr,_$,Mpr,wEe,Epr,Cpr,wpr,At,b$,Apr,AEe,Lpr,ypr,Qd,xpr,LEe,$pr,kpr,JJ,Spr,Rpr,Ppr,hE,Bpr,io,v$,Ipr,yEe,Npr,qpr,nn,jpr,xEe,Dpr,Gpr,$Ee,Opr,Vpr,kEe,Xpr,zpr,Qpr,V,uE,SEe,Wpr,Upr,YJ,Hpr,Jpr,Ypr,pE,REe,Kpr,Zpr,KJ,e_r,o_r,r_r,_E,PEe,t_r,a_r,ZJ,n_r,s_r,l_r,bE,BEe,i_r,d_r,eY,c_r,m_r,f_r,vE,IEe,g_r,h_r,oY,u_r,p_r,__r,FE,NEe,b_r,v_r,rY,F_r,T_r,M_r,TE,qEe,E_r,C_r,tY,w_r,A_r,L_r,ME,jEe,y_r,x_r,aY,$_r,k_r,S_r,EE,DEe,R_r,P_r,nY,B_r,I_r,N_r,CE,GEe,q_r,j_r,sY,D_r,G_r,O_r,wE,OEe,V_r,X_r,lY,z_r,Q_r,W_r,AE,VEe,U_r,H_r,iY,J_r,Y_r,K_r,LE,XEe,Z_r,e2r,dY,o2r,r2r,t2r,yE,zEe,a2r,n2r,cY,s2r,l2r,i2r,xE,QEe,d2r,c2r,mY,m2r,f2r,g2r,$E,WEe,h2r,u2r,fY,p2r,_2r,b2r,kE,UEe,v2r,F2r,gY,T2r,M2r,E2r,SE,HEe,C2r,w2r,hY,A2r,L2r,y2r,RE,JEe,x2r,$2r,uY,k2r,S2r,R2r,PE,YEe,P2r,B2r,pY,I2r,N2r,q2r,BE,KEe,j2r,D2r,_Y,G2r,O2r,V2r,IE,ZEe,X2r,z2r,bY,Q2r,W2r,U2r,NE,e4e,H2r,J2r,vY,Y2r,K2r,Z2r,qE,o4e,e1r,o1r,FY,r1r,t1r,a1r,jE,r4e,n1r,s1r,TY,l1r,i1r,d1r,DE,t4e,c1r,m1r,MY,f1r,g1r,h1r,GE,a4e,u1r,p1r,EY,_1r,b1r,v1r,OE,n4e,F1r,T1r,CY,M1r,E1r,C1r,VE,s4e,w1r,A1r,wY,L1r,y1r,x1r,XE,l4e,$1r,k1r,AY,S1r,R1r,P1r,zE,i4e,B1r,I1r,LY,N1r,q1r,j1r,QE,d4e,D1r,G1r,yY,O1r,V1r,X1r,WE,c4e,z1r,Q1r,xY,W1r,U1r,H1r,UE,m4e,J1r,Y1r,$Y,K1r,Z1r,ebr,HE,f4e,obr,rbr,kY,tbr,abr,nbr,JE,g4e,sbr,lbr,SY,ibr,dbr,cbr,YE,h4e,mbr,fbr,RY,gbr,hbr,ubr,KE,u4e,pbr,_br,PY,bbr,vbr,Fbr,ZE,p4e,Tbr,Mbr,BY,Ebr,Cbr,wbr,e4,_4e,Abr,Lbr,IY,ybr,xbr,$br,o4,b4e,kbr,Sbr,NY,Rbr,Pbr,Bbr,r4,v4e,Ibr,Nbr,qY,qbr,jbr,Dbr,t4,F4e,Gbr,Obr,jY,Vbr,Xbr,zbr,a4,T4e,Qbr,Wbr,DY,Ubr,Hbr,Jbr,n4,M4e,Ybr,Kbr,GY,Zbr,evr,ovr,s4,rvr,E4e,tvr,avr,C4e,nvr,svr,l4,meo,Wd,i4,w4e,F$,lvr,A4e,ivr,feo,Xo,T$,dvr,Ud,cvr,OY,mvr,fvr,VY,gvr,hvr,uvr,M$,pvr,L4e,_vr,bvr,vvr,Lt,E$,Fvr,y4e,Tvr,Mvr,Hd,Evr,x4e,Cvr,wvr,XY,Avr,Lvr,yvr,d4,xvr,co,C$,$vr,$4e,kvr,Svr,sn,Rvr,k4e,Pvr,Bvr,S4e,Ivr,Nvr,R4e,qvr,jvr,Dvr,P4e,c4,B4e,Gvr,Ovr,zY,Vvr,Xvr,zvr,m4,Qvr,I4e,Wvr,Uvr,N4e,Hvr,Jvr,f4,geo,Jd,g4,q4e,w$,Yvr,j4e,Kvr,heo,zo,A$,Zvr,Yd,eFr,QY,oFr,rFr,WY,tFr,aFr,nFr,L$,sFr,D4e,lFr,iFr,dFr,yt,y$,cFr,G4e,mFr,fFr,Kd,gFr,O4e,hFr,uFr,UY,pFr,_Fr,bFr,h4,vFr,mo,x$,FFr,V4e,TFr,MFr,ln,EFr,X4e,CFr,wFr,z4e,AFr,LFr,Q4e,yFr,xFr,$Fr,Zd,u4,W4e,kFr,SFr,HY,RFr,PFr,BFr,p4,U4e,IFr,NFr,JY,qFr,jFr,DFr,_4,H4e,GFr,OFr,YY,VFr,XFr,zFr,b4,QFr,J4e,WFr,UFr,Y4e,HFr,JFr,v4,ueo,ec,F4,K4e,$$,YFr,Z4e,KFr,peo,Qo,k$,ZFr,oc,eTr,KY,oTr,rTr,ZY,tTr,aTr,nTr,S$,sTr,eCe,lTr,iTr,dTr,xt,R$,cTr,oCe,mTr,fTr,rc,gTr,rCe,hTr,uTr,eK,pTr,_Tr,bTr,T4,vTr,fo,P$,FTr,tCe,TTr,MTr,dn,ETr,aCe,CTr,wTr,nCe,ATr,LTr,sCe,yTr,xTr,$Tr,be,M4,lCe,kTr,STr,oK,RTr,PTr,BTr,E4,iCe,ITr,NTr,rK,qTr,jTr,DTr,C4,dCe,GTr,OTr,tK,VTr,XTr,zTr,w4,cCe,QTr,WTr,aK,UTr,HTr,JTr,bl,mCe,YTr,KTr,nK,ZTr,eMr,sK,oMr,rMr,tMr,A4,fCe,aMr,nMr,lK,sMr,lMr,iMr,vl,gCe,dMr,cMr,iK,mMr,fMr,dK,gMr,hMr,uMr,L4,hCe,pMr,_Mr,cK,bMr,vMr,FMr,$t,uCe,TMr,MMr,mK,EMr,CMr,fK,wMr,AMr,gK,LMr,yMr,xMr,y4,pCe,$Mr,kMr,hK,SMr,RMr,PMr,x4,_Ce,BMr,IMr,uK,NMr,qMr,jMr,$4,bCe,DMr,GMr,pK,OMr,VMr,XMr,k4,vCe,zMr,QMr,_K,WMr,UMr,HMr,S4,FCe,JMr,YMr,bK,KMr,ZMr,eEr,R4,TCe,oEr,rEr,vK,tEr,aEr,nEr,P4,MCe,sEr,lEr,FK,iEr,dEr,cEr,B4,ECe,mEr,fEr,TK,gEr,hEr,uEr,I4,CCe,pEr,_Er,MK,bEr,vEr,FEr,N4,TEr,wCe,MEr,EEr,ACe,CEr,wEr,q4,_eo,tc,j4,LCe,B$,AEr,yCe,LEr,beo,Wo,I$,yEr,ac,xEr,EK,$Er,kEr,CK,SEr,REr,PEr,N$,BEr,xCe,IEr,NEr,qEr,kt,q$,jEr,$Ce,DEr,GEr,nc,OEr,kCe,VEr,XEr,wK,zEr,QEr,WEr,D4,UEr,go,j$,HEr,SCe,JEr,YEr,cn,KEr,RCe,ZEr,e4r,PCe,o4r,r4r,BCe,t4r,a4r,n4r,ICe,G4,NCe,s4r,l4r,AK,i4r,d4r,c4r,O4,m4r,qCe,f4r,g4r,jCe,h4r,u4r,V4,veo,sc,X4,DCe,D$,p4r,GCe,_4r,Feo,Uo,G$,b4r,lc,v4r,LK,F4r,T4r,yK,M4r,E4r,C4r,O$,w4r,OCe,A4r,L4r,y4r,St,V$,x4r,VCe,$4r,k4r,ic,S4r,XCe,R4r,P4r,xK,B4r,I4r,N4r,z4,q4r,ho,X$,j4r,zCe,D4r,G4r,mn,O4r,QCe,V4r,X4r,WCe,z4r,Q4r,UCe,W4r,U4r,H4r,HCe,Q4,JCe,J4r,Y4r,$K,K4r,Z4r,eCr,W4,oCr,YCe,rCr,tCr,KCe,aCr,nCr,U4,Teo,dc,H4,ZCe,z$,sCr,e3e,lCr,Meo,Ho,Q$,iCr,cc,dCr,kK,cCr,mCr,SK,fCr,gCr,hCr,W$,uCr,o3e,pCr,_Cr,bCr,Rt,U$,vCr,r3e,FCr,TCr,mc,MCr,t3e,ECr,CCr,RK,wCr,ACr,LCr,J4,yCr,uo,H$,xCr,a3e,$Cr,kCr,fn,SCr,n3e,RCr,PCr,s3e,BCr,ICr,l3e,NCr,qCr,jCr,i3e,Y4,d3e,DCr,GCr,PK,OCr,VCr,XCr,K4,zCr,c3e,QCr,WCr,m3e,UCr,HCr,Z4,Eeo,fc,eC,f3e,J$,JCr,g3e,YCr,Ceo,Jo,Y$,KCr,gc,ZCr,BK,e3r,o3r,IK,r3r,t3r,a3r,K$,n3r,h3e,s3r,l3r,i3r,Pt,Z$,d3r,u3e,c3r,m3r,hc,f3r,p3e,g3r,h3r,NK,u3r,p3r,_3r,oC,b3r,po,ek,v3r,_3e,F3r,T3r,gn,M3r,b3e,E3r,C3r,v3e,w3r,A3r,F3e,L3r,y3r,x3r,Pe,rC,T3e,$3r,k3r,qK,S3r,R3r,P3r,tC,M3e,B3r,I3r,jK,N3r,q3r,j3r,aC,E3e,D3r,G3r,DK,O3r,V3r,X3r,nC,C3e,z3r,Q3r,GK,W3r,U3r,H3r,sC,w3e,J3r,Y3r,OK,K3r,Z3r,e5r,lC,A3e,o5r,r5r,VK,t5r,a5r,n5r,iC,L3e,s5r,l5r,XK,i5r,d5r,c5r,dC,y3e,m5r,f5r,zK,g5r,h5r,u5r,cC,x3e,p5r,_5r,QK,b5r,v5r,F5r,mC,T5r,$3e,M5r,E5r,k3e,C5r,w5r,fC,weo,uc,gC,S3e,ok,A5r,R3e,L5r,Aeo,Yo,rk,y5r,pc,x5r,WK,$5r,k5r,UK,S5r,R5r,P5r,tk,B5r,P3e,I5r,N5r,q5r,Bt,ak,j5r,B3e,D5r,G5r,_c,O5r,I3e,V5r,X5r,HK,z5r,Q5r,W5r,hC,U5r,_o,nk,H5r,N3e,J5r,Y5r,hn,K5r,q3e,Z5r,e0r,j3e,o0r,r0r,D3e,t0r,a0r,n0r,mt,uC,G3e,s0r,l0r,JK,i0r,d0r,c0r,pC,O3e,m0r,f0r,YK,g0r,h0r,u0r,_C,V3e,p0r,_0r,KK,b0r,v0r,F0r,bC,X3e,T0r,M0r,ZK,E0r,C0r,w0r,vC,z3e,A0r,L0r,eZ,y0r,x0r,$0r,FC,k0r,Q3e,S0r,R0r,W3e,P0r,B0r,TC,Leo,bc,MC,U3e,sk,I0r,H3e,N0r,yeo,Ko,lk,q0r,vc,j0r,oZ,D0r,G0r,rZ,O0r,V0r,X0r,ik,z0r,J3e,Q0r,W0r,U0r,It,dk,H0r,Y3e,J0r,Y0r,Fc,K0r,K3e,Z0r,ewr,tZ,owr,rwr,twr,EC,awr,bo,ck,nwr,Z3e,swr,lwr,un,iwr,e5e,dwr,cwr,o5e,mwr,fwr,r5e,gwr,hwr,uwr,Le,CC,t5e,pwr,_wr,aZ,bwr,vwr,Fwr,wC,a5e,Twr,Mwr,nZ,Ewr,Cwr,wwr,AC,n5e,Awr,Lwr,sZ,ywr,xwr,$wr,LC,s5e,kwr,Swr,lZ,Rwr,Pwr,Bwr,yC,l5e,Iwr,Nwr,iZ,qwr,jwr,Dwr,xC,i5e,Gwr,Owr,dZ,Vwr,Xwr,zwr,$C,d5e,Qwr,Wwr,cZ,Uwr,Hwr,Jwr,kC,c5e,Ywr,Kwr,mZ,Zwr,eAr,oAr,SC,m5e,rAr,tAr,fZ,aAr,nAr,sAr,RC,f5e,lAr,iAr,gZ,dAr,cAr,mAr,PC,fAr,g5e,gAr,hAr,h5e,uAr,pAr,BC,xeo,Tc,IC,u5e,mk,_Ar,p5e,bAr,$eo,Zo,fk,vAr,Mc,FAr,hZ,TAr,MAr,uZ,EAr,CAr,wAr,gk,AAr,_5e,LAr,yAr,xAr,Nt,hk,$Ar,b5e,kAr,SAr,Ec,RAr,v5e,PAr,BAr,pZ,IAr,NAr,qAr,NC,jAr,vo,uk,DAr,F5e,GAr,OAr,pn,VAr,T5e,XAr,zAr,M5e,QAr,WAr,E5e,UAr,HAr,JAr,pk,qC,C5e,YAr,KAr,_Z,ZAr,e6r,o6r,jC,w5e,r6r,t6r,bZ,a6r,n6r,s6r,DC,l6r,A5e,i6r,d6r,L5e,c6r,m6r,GC,keo,Cc,OC,y5e,_k,f6r,x5e,g6r,Seo,er,bk,h6r,wc,u6r,vZ,p6r,_6r,FZ,b6r,v6r,F6r,vk,T6r,$5e,M6r,E6r,C6r,qt,Fk,w6r,k5e,A6r,L6r,Ac,y6r,S5e,x6r,$6r,TZ,k6r,S6r,R6r,VC,P6r,Fo,Tk,B6r,R5e,I6r,N6r,_n,q6r,P5e,j6r,D6r,B5e,G6r,O6r,I5e,V6r,X6r,z6r,ft,XC,N5e,Q6r,W6r,MZ,U6r,H6r,J6r,zC,q5e,Y6r,K6r,EZ,Z6r,e7r,o7r,QC,j5e,r7r,t7r,CZ,a7r,n7r,s7r,WC,D5e,l7r,i7r,wZ,d7r,c7r,m7r,UC,G5e,f7r,g7r,AZ,h7r,u7r,p7r,HC,_7r,O5e,b7r,v7r,V5e,F7r,T7r,JC,Reo,Lc,YC,X5e,Mk,M7r,z5e,E7r,Peo,or,Ek,C7r,yc,w7r,LZ,A7r,L7r,yZ,y7r,x7r,$7r,Ck,k7r,Q5e,S7r,R7r,P7r,jt,wk,B7r,W5e,I7r,N7r,xc,q7r,U5e,j7r,D7r,xZ,G7r,O7r,V7r,KC,X7r,To,Ak,z7r,H5e,Q7r,W7r,bn,U7r,J5e,H7r,J7r,Y5e,Y7r,K7r,K5e,Z7r,eLr,oLr,vn,ZC,Z5e,rLr,tLr,$Z,aLr,nLr,sLr,e3,e0e,lLr,iLr,kZ,dLr,cLr,mLr,o3,o0e,fLr,gLr,SZ,hLr,uLr,pLr,r3,r0e,_Lr,bLr,RZ,vLr,FLr,TLr,t3,MLr,t0e,ELr,CLr,a0e,wLr,ALr,a3,Beo,$c,n3,n0e,Lk,LLr,s0e,yLr,Ieo,rr,yk,xLr,kc,$Lr,PZ,kLr,SLr,BZ,RLr,PLr,BLr,xk,ILr,l0e,NLr,qLr,jLr,Dt,$k,DLr,i0e,GLr,OLr,Sc,VLr,d0e,XLr,zLr,IZ,QLr,WLr,ULr,s3,HLr,Mo,kk,JLr,c0e,YLr,KLr,Fn,ZLr,m0e,eyr,oyr,f0e,ryr,tyr,g0e,ayr,nyr,syr,Tn,l3,h0e,lyr,iyr,NZ,dyr,cyr,myr,i3,u0e,fyr,gyr,qZ,hyr,uyr,pyr,d3,p0e,_yr,byr,jZ,vyr,Fyr,Tyr,c3,_0e,Myr,Eyr,DZ,Cyr,wyr,Ayr,m3,Lyr,b0e,yyr,xyr,v0e,$yr,kyr,f3,Neo,Rc,g3,F0e,Sk,Syr,T0e,Ryr,qeo,tr,Rk,Pyr,Pc,Byr,GZ,Iyr,Nyr,OZ,qyr,jyr,Dyr,Pk,Gyr,M0e,Oyr,Vyr,Xyr,Gt,Bk,zyr,E0e,Qyr,Wyr,Bc,Uyr,C0e,Hyr,Jyr,VZ,Yyr,Kyr,Zyr,h3,e8r,Eo,Ik,o8r,w0e,r8r,t8r,Mn,a8r,A0e,n8r,s8r,L0e,l8r,i8r,y0e,d8r,c8r,m8r,x0e,u3,$0e,f8r,g8r,XZ,h8r,u8r,p8r,p3,_8r,k0e,b8r,v8r,S0e,F8r,T8r,_3,jeo,Ic,b3,R0e,Nk,M8r,P0e,E8r,Deo,ar,qk,C8r,Nc,w8r,zZ,A8r,L8r,QZ,y8r,x8r,$8r,jk,k8r,B0e,S8r,R8r,P8r,Ot,Dk,B8r,I0e,I8r,N8r,qc,q8r,N0e,j8r,D8r,WZ,G8r,O8r,V8r,v3,X8r,Co,Gk,z8r,q0e,Q8r,W8r,En,U8r,j0e,H8r,J8r,D0e,Y8r,K8r,G0e,Z8r,e9r,o9r,gt,F3,O0e,r9r,t9r,UZ,a9r,n9r,s9r,T3,V0e,l9r,i9r,HZ,d9r,c9r,m9r,M3,X0e,f9r,g9r,JZ,h9r,u9r,p9r,E3,z0e,_9r,b9r,YZ,v9r,F9r,T9r,C3,Q0e,M9r,E9r,KZ,C9r,w9r,A9r,w3,L9r,W0e,y9r,x9r,U0e,$9r,k9r,A3,Geo,jc,L3,H0e,Ok,S9r,J0e,R9r,Oeo,nr,Vk,P9r,Dc,B9r,ZZ,I9r,N9r,eee,q9r,j9r,D9r,Xk,G9r,Y0e,O9r,V9r,X9r,Vt,zk,z9r,K0e,Q9r,W9r,Gc,U9r,Z0e,H9r,J9r,oee,Y9r,K9r,Z9r,y3,exr,wo,Qk,oxr,ewe,rxr,txr,Cn,axr,owe,nxr,sxr,rwe,lxr,ixr,twe,dxr,cxr,mxr,awe,x3,nwe,fxr,gxr,ree,hxr,uxr,pxr,$3,_xr,swe,bxr,vxr,lwe,Fxr,Txr,k3,Veo,Oc,S3,iwe,Wk,Mxr,dwe,Exr,Xeo,sr,Uk,Cxr,Vc,wxr,tee,Axr,Lxr,aee,yxr,xxr,$xr,Hk,kxr,cwe,Sxr,Rxr,Pxr,Xt,Jk,Bxr,mwe,Ixr,Nxr,Xc,qxr,fwe,jxr,Dxr,nee,Gxr,Oxr,Vxr,R3,Xxr,Ir,Yk,zxr,gwe,Qxr,Wxr,wn,Uxr,hwe,Hxr,Jxr,uwe,Yxr,Kxr,pwe,Zxr,e$r,o$r,I,P3,_we,r$r,t$r,see,a$r,n$r,s$r,B3,bwe,l$r,i$r,lee,d$r,c$r,m$r,I3,vwe,f$r,g$r,iee,h$r,u$r,p$r,N3,Fwe,_$r,b$r,dee,v$r,F$r,T$r,q3,Twe,M$r,E$r,cee,C$r,w$r,A$r,j3,Mwe,L$r,y$r,mee,x$r,$$r,k$r,D3,Ewe,S$r,R$r,fee,P$r,B$r,I$r,G3,Cwe,N$r,q$r,gee,j$r,D$r,G$r,O3,wwe,O$r,V$r,hee,X$r,z$r,Q$r,V3,Awe,W$r,U$r,uee,H$r,J$r,Y$r,X3,Lwe,K$r,Z$r,pee,ekr,okr,rkr,z3,ywe,tkr,akr,_ee,nkr,skr,lkr,Q3,xwe,ikr,dkr,bee,ckr,mkr,fkr,W3,$we,gkr,hkr,vee,ukr,pkr,_kr,U3,kwe,bkr,vkr,Fee,Fkr,Tkr,Mkr,H3,Swe,Ekr,Ckr,Tee,wkr,Akr,Lkr,J3,Rwe,ykr,xkr,Mee,$kr,kkr,Skr,Y3,Pwe,Rkr,Pkr,Eee,Bkr,Ikr,Nkr,Fl,Bwe,qkr,jkr,Cee,Dkr,Gkr,wee,Okr,Vkr,Xkr,K3,Iwe,zkr,Qkr,Aee,Wkr,Ukr,Hkr,Z3,Nwe,Jkr,Ykr,Lee,Kkr,Zkr,eSr,e5,qwe,oSr,rSr,yee,tSr,aSr,nSr,o5,jwe,sSr,lSr,xee,iSr,dSr,cSr,r5,Dwe,mSr,fSr,$ee,gSr,hSr,uSr,t5,Gwe,pSr,_Sr,kee,bSr,vSr,FSr,a5,Owe,TSr,MSr,See,ESr,CSr,wSr,n5,Vwe,ASr,LSr,Ree,ySr,xSr,$Sr,s5,Xwe,kSr,SSr,Pee,RSr,PSr,BSr,l5,zwe,ISr,NSr,Bee,qSr,jSr,DSr,i5,Qwe,GSr,OSr,Iee,VSr,XSr,zSr,d5,Wwe,QSr,WSr,Nee,USr,HSr,JSr,c5,Uwe,YSr,KSr,qee,ZSr,eRr,oRr,m5,Hwe,rRr,tRr,jee,aRr,nRr,sRr,f5,Jwe,lRr,iRr,Dee,dRr,cRr,mRr,g5,Ywe,fRr,gRr,Gee,hRr,uRr,pRr,h5,Kwe,_Rr,bRr,Oee,vRr,FRr,TRr,u5,Zwe,MRr,ERr,Vee,CRr,wRr,ARr,p5,eAe,LRr,yRr,Xee,xRr,$Rr,kRr,_5,oAe,SRr,RRr,zee,PRr,BRr,IRr,b5,rAe,NRr,qRr,Qee,jRr,DRr,GRr,v5,tAe,ORr,VRr,Wee,XRr,zRr,QRr,F5,aAe,WRr,URr,Uee,HRr,JRr,YRr,T5,nAe,KRr,ZRr,Hee,ePr,oPr,rPr,M5,sAe,tPr,aPr,Jee,nPr,sPr,lPr,E5,lAe,iPr,dPr,Yee,cPr,mPr,fPr,C5,iAe,gPr,hPr,Kee,uPr,pPr,_Pr,w5,dAe,bPr,vPr,Zee,FPr,TPr,MPr,A5,cAe,EPr,CPr,eoe,wPr,APr,LPr,L5,mAe,yPr,xPr,ooe,$Pr,kPr,SPr,y5,fAe,RPr,PPr,roe,BPr,IPr,NPr,x5,gAe,qPr,jPr,toe,DPr,GPr,OPr,$5,hAe,VPr,XPr,aoe,zPr,QPr,WPr,k5,uAe,UPr,HPr,noe,JPr,YPr,KPr,S5,pAe,ZPr,eBr,soe,oBr,rBr,tBr,R5,_Ae,aBr,nBr,loe,sBr,lBr,iBr,P5,zeo,zc,B5,bAe,Kk,dBr,vAe,cBr,Qeo,lr,Zk,mBr,Qc,fBr,ioe,gBr,hBr,doe,uBr,pBr,_Br,eS,bBr,FAe,vBr,FBr,TBr,zt,oS,MBr,TAe,EBr,CBr,Wc,wBr,MAe,ABr,LBr,coe,yBr,xBr,$Br,I5,kBr,Nr,rS,SBr,EAe,RBr,PBr,An,BBr,CAe,IBr,NBr,wAe,qBr,jBr,AAe,DBr,GBr,OBr,se,N5,LAe,VBr,XBr,moe,zBr,QBr,WBr,q5,yAe,UBr,HBr,foe,JBr,YBr,KBr,j5,xAe,ZBr,eIr,goe,oIr,rIr,tIr,D5,$Ae,aIr,nIr,hoe,sIr,lIr,iIr,G5,kAe,dIr,cIr,uoe,mIr,fIr,gIr,O5,SAe,hIr,uIr,poe,pIr,_Ir,bIr,V5,RAe,vIr,FIr,_oe,TIr,MIr,EIr,X5,PAe,CIr,wIr,boe,AIr,LIr,yIr,z5,BAe,xIr,$Ir,voe,kIr,SIr,RIr,Q5,IAe,PIr,BIr,Foe,IIr,NIr,qIr,W5,NAe,jIr,DIr,Toe,GIr,OIr,VIr,U5,qAe,XIr,zIr,Moe,QIr,WIr,UIr,H5,jAe,HIr,JIr,Eoe,YIr,KIr,ZIr,J5,DAe,eNr,oNr,Coe,rNr,tNr,aNr,Y5,GAe,nNr,sNr,woe,lNr,iNr,dNr,K5,OAe,cNr,mNr,Aoe,fNr,gNr,hNr,Z5,VAe,uNr,pNr,Loe,_Nr,bNr,vNr,e0,XAe,FNr,TNr,yoe,MNr,ENr,CNr,o0,zAe,wNr,ANr,xoe,LNr,yNr,xNr,r0,QAe,$Nr,kNr,$oe,SNr,RNr,PNr,t0,WAe,BNr,INr,koe,NNr,qNr,jNr,a0,UAe,DNr,GNr,Soe,ONr,VNr,XNr,n0,HAe,zNr,QNr,Roe,WNr,UNr,HNr,s0,Weo,Uc,l0,JAe,tS,JNr,YAe,YNr,Ueo,ir,aS,KNr,Hc,ZNr,Poe,eqr,oqr,Boe,rqr,tqr,aqr,nS,nqr,KAe,sqr,lqr,iqr,Qt,sS,dqr,ZAe,cqr,mqr,Jc,fqr,e6e,gqr,hqr,Ioe,uqr,pqr,_qr,i0,bqr,qr,lS,vqr,o6e,Fqr,Tqr,Ln,Mqr,r6e,Eqr,Cqr,t6e,wqr,Aqr,a6e,Lqr,yqr,xqr,Me,d0,n6e,$qr,kqr,Noe,Sqr,Rqr,Pqr,c0,s6e,Bqr,Iqr,qoe,Nqr,qqr,jqr,m0,l6e,Dqr,Gqr,joe,Oqr,Vqr,Xqr,f0,i6e,zqr,Qqr,Doe,Wqr,Uqr,Hqr,g0,d6e,Jqr,Yqr,Goe,Kqr,Zqr,ejr,h0,c6e,ojr,rjr,Ooe,tjr,ajr,njr,u0,m6e,sjr,ljr,Voe,ijr,djr,cjr,p0,f6e,mjr,fjr,Xoe,gjr,hjr,ujr,_0,g6e,pjr,_jr,zoe,bjr,vjr,Fjr,b0,h6e,Tjr,Mjr,Qoe,Ejr,Cjr,wjr,v0,u6e,Ajr,Ljr,Woe,yjr,xjr,$jr,F0,p6e,kjr,Sjr,Uoe,Rjr,Pjr,Bjr,T0,_6e,Ijr,Njr,Hoe,qjr,jjr,Djr,M0,b6e,Gjr,Ojr,Joe,Vjr,Xjr,zjr,E0,Heo,Yc,C0,v6e,iS,Qjr,F6e,Wjr,Jeo,dr,dS,Ujr,Kc,Hjr,Yoe,Jjr,Yjr,Koe,Kjr,Zjr,eDr,cS,oDr,T6e,rDr,tDr,aDr,Wt,mS,nDr,M6e,sDr,lDr,Zc,iDr,E6e,dDr,cDr,Zoe,mDr,fDr,gDr,w0,hDr,jr,fS,uDr,C6e,pDr,_Dr,yn,bDr,w6e,vDr,FDr,A6e,TDr,MDr,L6e,EDr,CDr,wDr,Be,A0,y6e,ADr,LDr,ere,yDr,xDr,$Dr,L0,x6e,kDr,SDr,ore,RDr,PDr,BDr,Tl,$6e,IDr,NDr,rre,qDr,jDr,tre,DDr,GDr,ODr,y0,k6e,VDr,XDr,are,zDr,QDr,WDr,x0,S6e,UDr,HDr,nre,JDr,YDr,KDr,$0,R6e,ZDr,eGr,sre,oGr,rGr,tGr,k0,P6e,aGr,nGr,lre,sGr,lGr,iGr,S0,B6e,dGr,cGr,ire,mGr,fGr,gGr,R0,I6e,hGr,uGr,dre,pGr,_Gr,bGr,P0,Yeo,em,B0,N6e,gS,vGr,q6e,FGr,Keo,cr,hS,TGr,om,MGr,cre,EGr,CGr,mre,wGr,AGr,LGr,uS,yGr,j6e,xGr,$Gr,kGr,Ut,pS,SGr,D6e,RGr,PGr,rm,BGr,G6e,IGr,NGr,fre,qGr,jGr,DGr,I0,GGr,Dr,_S,OGr,O6e,VGr,XGr,xn,zGr,V6e,QGr,WGr,X6e,UGr,HGr,z6e,JGr,YGr,KGr,tm,N0,Q6e,ZGr,eOr,gre,oOr,rOr,tOr,q0,W6e,aOr,nOr,hre,sOr,lOr,iOr,j0,U6e,dOr,cOr,ure,mOr,fOr,gOr,D0,Zeo,am,G0,H6e,bS,hOr,J6e,uOr,eoo,mr,vS,pOr,nm,_Or,pre,bOr,vOr,_re,FOr,TOr,MOr,FS,EOr,Y6e,COr,wOr,AOr,Ht,TS,LOr,K6e,yOr,xOr,sm,$Or,Z6e,kOr,SOr,bre,ROr,POr,BOr,O0,IOr,Gr,MS,NOr,e7e,qOr,jOr,$n,DOr,o7e,GOr,OOr,r7e,VOr,XOr,t7e,zOr,QOr,WOr,ge,V0,a7e,UOr,HOr,vre,JOr,YOr,KOr,X0,n7e,ZOr,eVr,Fre,oVr,rVr,tVr,z0,s7e,aVr,nVr,Tre,sVr,lVr,iVr,Q0,l7e,dVr,cVr,Mre,mVr,fVr,gVr,W0,i7e,hVr,uVr,Ere,pVr,_Vr,bVr,U0,d7e,vVr,FVr,Cre,TVr,MVr,EVr,H0,c7e,CVr,wVr,wre,AVr,LVr,yVr,J0,m7e,xVr,$Vr,Are,kVr,SVr,RVr,Y0,f7e,PVr,BVr,Lre,IVr,NVr,qVr,K0,g7e,jVr,DVr,yre,GVr,OVr,VVr,Z0,h7e,XVr,zVr,xre,QVr,WVr,UVr,ew,u7e,HVr,JVr,$re,YVr,KVr,ZVr,ow,p7e,eXr,oXr,kre,rXr,tXr,aXr,rw,_7e,nXr,sXr,Sre,lXr,iXr,dXr,tw,b7e,cXr,mXr,Rre,fXr,gXr,hXr,aw,v7e,uXr,pXr,Pre,_Xr,bXr,vXr,nw,F7e,FXr,TXr,Bre,MXr,EXr,CXr,sw,T7e,wXr,AXr,Ire,LXr,yXr,xXr,lw,M7e,$Xr,kXr,Nre,SXr,RXr,PXr,iw,E7e,BXr,IXr,qre,NXr,qXr,jXr,dw,ooo,lm,cw,C7e,ES,DXr,w7e,GXr,roo,fr,CS,OXr,im,VXr,jre,XXr,zXr,Dre,QXr,WXr,UXr,wS,HXr,A7e,JXr,YXr,KXr,Jt,AS,ZXr,L7e,ezr,ozr,dm,rzr,y7e,tzr,azr,Gre,nzr,szr,lzr,mw,izr,Or,LS,dzr,x7e,czr,mzr,kn,fzr,$7e,gzr,hzr,k7e,uzr,pzr,S7e,_zr,bzr,vzr,ye,fw,R7e,Fzr,Tzr,Ore,Mzr,Ezr,Czr,gw,P7e,wzr,Azr,Vre,Lzr,yzr,xzr,hw,B7e,$zr,kzr,Xre,Szr,Rzr,Pzr,uw,I7e,Bzr,Izr,zre,Nzr,qzr,jzr,pw,N7e,Dzr,Gzr,Qre,Ozr,Vzr,Xzr,_w,q7e,zzr,Qzr,Wre,Wzr,Uzr,Hzr,bw,j7e,Jzr,Yzr,Ure,Kzr,Zzr,eQr,vw,D7e,oQr,rQr,Hre,tQr,aQr,nQr,Fw,G7e,sQr,lQr,Jre,iQr,dQr,cQr,Tw,O7e,mQr,fQr,Yre,gQr,hQr,uQr,Mw,too,cm,Ew,V7e,yS,pQr,X7e,_Qr,aoo,gr,xS,bQr,mm,vQr,Kre,FQr,TQr,Zre,MQr,EQr,CQr,$S,wQr,z7e,AQr,LQr,yQr,Yt,kS,xQr,Q7e,$Qr,kQr,fm,SQr,W7e,RQr,PQr,ete,BQr,IQr,NQr,Cw,qQr,Vr,SS,jQr,U7e,DQr,GQr,Sn,OQr,H7e,VQr,XQr,J7e,zQr,QQr,Y7e,WQr,UQr,HQr,re,ww,K7e,JQr,YQr,ote,KQr,ZQr,eWr,Aw,Z7e,oWr,rWr,rte,tWr,aWr,nWr,Lw,eLe,sWr,lWr,tte,iWr,dWr,cWr,yw,oLe,mWr,fWr,ate,gWr,hWr,uWr,xw,rLe,pWr,_Wr,nte,bWr,vWr,FWr,$w,tLe,TWr,MWr,ste,EWr,CWr,wWr,kw,aLe,AWr,LWr,lte,yWr,xWr,$Wr,Sw,nLe,kWr,SWr,ite,RWr,PWr,BWr,Rw,sLe,IWr,NWr,dte,qWr,jWr,DWr,Pw,lLe,GWr,OWr,cte,VWr,XWr,zWr,Bw,iLe,QWr,WWr,mte,UWr,HWr,JWr,Iw,dLe,YWr,KWr,fte,ZWr,eUr,oUr,Nw,cLe,rUr,tUr,gte,aUr,nUr,sUr,qw,mLe,lUr,iUr,hte,dUr,cUr,mUr,jw,fLe,fUr,gUr,ute,hUr,uUr,pUr,Dw,gLe,_Ur,bUr,pte,vUr,FUr,TUr,Gw,hLe,MUr,EUr,_te,CUr,wUr,AUr,Ow,uLe,LUr,yUr,bte,xUr,$Ur,kUr,Vw,pLe,SUr,RUr,vte,PUr,BUr,IUr,Xw,_Le,NUr,qUr,Fte,jUr,DUr,GUr,zw,bLe,OUr,VUr,Tte,XUr,zUr,QUr,Qw,vLe,WUr,UUr,Mte,HUr,JUr,YUr,Ww,FLe,KUr,ZUr,Ete,eHr,oHr,rHr,Uw,TLe,tHr,aHr,Cte,nHr,sHr,lHr,Hw,MLe,iHr,dHr,wte,cHr,mHr,fHr,Jw,ELe,gHr,hHr,Ate,uHr,pHr,_Hr,Yw,CLe,bHr,vHr,Lte,FHr,THr,MHr,Kw,noo,gm,Zw,wLe,RS,EHr,ALe,CHr,soo,hr,PS,wHr,hm,AHr,yte,LHr,yHr,xte,xHr,$Hr,kHr,BS,SHr,LLe,RHr,PHr,BHr,Kt,IS,IHr,yLe,NHr,qHr,um,jHr,xLe,DHr,GHr,$te,OHr,VHr,XHr,eA,zHr,Xr,NS,QHr,$Le,WHr,UHr,Rn,HHr,kLe,JHr,YHr,SLe,KHr,ZHr,RLe,eJr,oJr,rJr,ve,oA,PLe,tJr,aJr,kte,nJr,sJr,lJr,rA,BLe,iJr,dJr,Ste,cJr,mJr,fJr,tA,ILe,gJr,hJr,Rte,uJr,pJr,_Jr,aA,NLe,bJr,vJr,Pte,FJr,TJr,MJr,nA,qLe,EJr,CJr,Bte,wJr,AJr,LJr,sA,jLe,yJr,xJr,Ite,$Jr,kJr,SJr,lA,DLe,RJr,PJr,Nte,BJr,IJr,NJr,iA,GLe,qJr,jJr,qte,DJr,GJr,OJr,dA,OLe,VJr,XJr,jte,zJr,QJr,WJr,cA,VLe,UJr,HJr,Dte,JJr,YJr,KJr,mA,XLe,ZJr,eYr,Gte,oYr,rYr,tYr,fA,zLe,aYr,nYr,Ote,sYr,lYr,iYr,gA,QLe,dYr,cYr,Vte,mYr,fYr,gYr,hA,WLe,hYr,uYr,Xte,pYr,_Yr,bYr,uA,ULe,vYr,FYr,zte,TYr,MYr,EYr,pA,HLe,CYr,wYr,Qte,AYr,LYr,yYr,_A,JLe,xYr,$Yr,Wte,kYr,SYr,RYr,bA,loo,pm,vA,YLe,qS,PYr,KLe,BYr,ioo,ur,jS,IYr,_m,NYr,Ute,qYr,jYr,Hte,DYr,GYr,OYr,DS,VYr,ZLe,XYr,zYr,QYr,Zt,GS,WYr,eye,UYr,HYr,bm,JYr,oye,YYr,KYr,Jte,ZYr,eKr,oKr,FA,rKr,zr,OS,tKr,rye,aKr,nKr,Pn,sKr,tye,lKr,iKr,aye,dKr,cKr,nye,mKr,fKr,gKr,VS,TA,sye,hKr,uKr,Yte,pKr,_Kr,bKr,MA,lye,vKr,FKr,Kte,TKr,MKr,EKr,EA,doo,vm,CA,iye,XS,CKr,dye,wKr,coo,pr,zS,AKr,Fm,LKr,Zte,yKr,xKr,eae,$Kr,kKr,SKr,QS,RKr,cye,PKr,BKr,IKr,ea,WS,NKr,mye,qKr,jKr,Tm,DKr,fye,GKr,OKr,oae,VKr,XKr,zKr,wA,QKr,Qr,US,WKr,gye,UKr,HKr,Bn,JKr,hye,YKr,KKr,uye,ZKr,eZr,pye,oZr,rZr,tZr,_ye,AA,bye,aZr,nZr,rae,sZr,lZr,iZr,LA,moo,Mm,yA,vye,HS,dZr,Fye,cZr,foo,_r,JS,mZr,Em,fZr,tae,gZr,hZr,aae,uZr,pZr,_Zr,YS,bZr,Tye,vZr,FZr,TZr,oa,KS,MZr,Mye,EZr,CZr,Cm,wZr,Eye,AZr,LZr,nae,yZr,xZr,$Zr,xA,kZr,Wr,ZS,SZr,Cye,RZr,PZr,In,BZr,wye,IZr,NZr,Aye,qZr,jZr,Lye,DZr,GZr,OZr,yye,$A,xye,VZr,XZr,sae,zZr,QZr,WZr,kA,goo,wm,SA,$ye,eR,UZr,kye,HZr,hoo,br,oR,JZr,Am,YZr,lae,KZr,ZZr,iae,eet,oet,ret,rR,tet,Sye,aet,net,set,ra,tR,iet,Rye,det,cet,Lm,met,Pye,fet,get,dae,het,uet,pet,RA,_et,Ur,aR,bet,Bye,vet,Fet,Nn,Tet,Iye,Met,Eet,Nye,Cet,wet,qye,Aet,Let,yet,de,PA,jye,xet,$et,cae,ket,Set,Ret,BA,Dye,Pet,Bet,mae,Iet,Net,qet,IA,Gye,jet,Det,fae,Get,Oet,Vet,NA,Oye,Xet,zet,gae,Qet,Wet,Uet,qA,Vye,Het,Jet,hae,Yet,Ket,Zet,jA,Xye,eot,oot,uae,rot,tot,aot,DA,zye,not,sot,pae,lot,iot,dot,GA,Qye,cot,mot,_ae,fot,got,hot,OA,Wye,uot,pot,bae,_ot,bot,vot,VA,Uye,Fot,Tot,vae,Mot,Eot,Cot,XA,Hye,wot,Aot,Fae,Lot,yot,xot,zA,Jye,$ot,kot,Tae,Sot,Rot,Pot,QA,Yye,Bot,Iot,Mae,Not,qot,jot,WA,Kye,Dot,Got,Eae,Oot,Vot,Xot,UA,Zye,zot,Qot,Cae,Wot,Uot,Hot,HA,e8e,Jot,Yot,wae,Kot,Zot,ert,JA,o8e,ort,rrt,Aae,trt,art,nrt,YA,r8e,srt,lrt,Lae,irt,drt,crt,KA,t8e,mrt,frt,yae,grt,hrt,urt,ZA,a8e,prt,_rt,xae,brt,vrt,Frt,e6,n8e,Trt,Mrt,$ae,Ert,Crt,wrt,o6,uoo,ym,r6,s8e,nR,Art,l8e,Lrt,poo,vr,sR,yrt,xm,xrt,kae,$rt,krt,Sae,Srt,Rrt,Prt,lR,Brt,i8e,Irt,Nrt,qrt,ta,iR,jrt,d8e,Drt,Grt,$m,Ort,c8e,Vrt,Xrt,Rae,zrt,Qrt,Wrt,t6,Urt,Hr,dR,Hrt,m8e,Jrt,Yrt,qn,Krt,f8e,Zrt,ett,g8e,ott,rtt,h8e,ttt,att,ntt,ce,a6,u8e,stt,ltt,Pae,itt,dtt,ctt,n6,p8e,mtt,ftt,Bae,gtt,htt,utt,s6,_8e,ptt,_tt,Iae,btt,vtt,Ftt,l6,b8e,Ttt,Mtt,Nae,Ett,Ctt,wtt,i6,v8e,Att,Ltt,qae,ytt,xtt,$tt,d6,F8e,ktt,Stt,jae,Rtt,Ptt,Btt,c6,T8e,Itt,Ntt,Dae,qtt,jtt,Dtt,m6,M8e,Gtt,Ott,Gae,Vtt,Xtt,ztt,f6,E8e,Qtt,Wtt,Oae,Utt,Htt,Jtt,g6,C8e,Ytt,Ktt,Vae,Ztt,eat,oat,h6,w8e,rat,tat,Xae,aat,nat,sat,u6,A8e,lat,iat,zae,dat,cat,mat,p6,L8e,fat,gat,Qae,hat,uat,pat,_6,y8e,_at,bat,Wae,vat,Fat,Tat,b6,x8e,Mat,Eat,Uae,Cat,wat,Aat,v6,$8e,Lat,yat,Hae,xat,$at,kat,F6,k8e,Sat,Rat,Jae,Pat,Bat,Iat,T6,S8e,Nat,qat,Yae,jat,Dat,Gat,M6,R8e,Oat,Vat,Kae,Xat,zat,Qat,E6,P8e,Wat,Uat,Zae,Hat,Jat,Yat,C6,B8e,Kat,Zat,ene,ent,ont,rnt,w6,_oo,km,A6,I8e,cR,tnt,N8e,ant,boo,Fr,mR,nnt,Sm,snt,one,lnt,int,rne,dnt,cnt,mnt,fR,fnt,q8e,gnt,hnt,unt,aa,gR,pnt,j8e,_nt,bnt,Rm,vnt,D8e,Fnt,Tnt,tne,Mnt,Ent,Cnt,L6,wnt,Jr,hR,Ant,G8e,Lnt,ynt,jn,xnt,O8e,$nt,knt,V8e,Snt,Rnt,X8e,Pnt,Bnt,Int,z8e,y6,Q8e,Nnt,qnt,ane,jnt,Dnt,Gnt,x6,voo,Pm,$6,W8e,uR,Ont,U8e,Vnt,Foo,Tr,pR,Xnt,Bm,znt,nne,Qnt,Wnt,sne,Unt,Hnt,Jnt,_R,Ynt,H8e,Knt,Znt,est,na,bR,ost,J8e,rst,tst,Im,ast,Y8e,nst,sst,lne,lst,ist,dst,k6,cst,Yr,vR,mst,K8e,fst,gst,Dn,hst,Z8e,ust,pst,e9e,_st,bst,o9e,vst,Fst,Tst,r9e,S6,t9e,Mst,Est,ine,Cst,wst,Ast,R6,Too,Nm,P6,a9e,FR,Lst,n9e,yst,Moo,Mr,TR,xst,qm,$st,dne,kst,Sst,cne,Rst,Pst,Bst,MR,Ist,s9e,Nst,qst,jst,sa,ER,Dst,l9e,Gst,Ost,jm,Vst,i9e,Xst,zst,mne,Qst,Wst,Ust,B6,Hst,Kr,CR,Jst,d9e,Yst,Kst,Gn,Zst,c9e,elt,olt,m9e,rlt,tlt,f9e,alt,nlt,slt,te,I6,g9e,llt,ilt,fne,dlt,clt,mlt,N6,h9e,flt,glt,gne,hlt,ult,plt,q6,u9e,_lt,blt,hne,vlt,Flt,Tlt,j6,p9e,Mlt,Elt,une,Clt,wlt,Alt,D6,_9e,Llt,ylt,pne,xlt,$lt,klt,G6,b9e,Slt,Rlt,_ne,Plt,Blt,Ilt,O6,v9e,Nlt,qlt,bne,jlt,Dlt,Glt,V6,F9e,Olt,Vlt,vne,Xlt,zlt,Qlt,X6,T9e,Wlt,Ult,Fne,Hlt,Jlt,Ylt,z6,M9e,Klt,Zlt,Tne,eit,oit,rit,Q6,E9e,tit,ait,Mne,nit,sit,lit,W6,C9e,iit,dit,Ene,cit,mit,fit,U6,w9e,git,hit,Cne,uit,pit,_it,H6,A9e,bit,vit,wne,Fit,Tit,Mit,J6,L9e,Eit,Cit,Ane,wit,Ait,Lit,Y6,y9e,yit,xit,Lne,$it,kit,Sit,K6,x9e,Rit,Pit,yne,Bit,Iit,Nit,Z6,$9e,qit,jit,xne,Dit,Git,Oit,e7,k9e,Vit,Xit,$ne,zit,Qit,Wit,o7,S9e,Uit,Hit,kne,Jit,Yit,Kit,r7,R9e,Zit,edt,Sne,odt,rdt,tdt,t7,P9e,adt,ndt,Rne,sdt,ldt,idt,a7,B9e,ddt,cdt,Pne,mdt,fdt,gdt,n7,I9e,hdt,udt,Bne,pdt,_dt,bdt,s7,N9e,vdt,Fdt,Ine,Tdt,Mdt,Edt,l7,q9e,Cdt,wdt,Nne,Adt,Ldt,ydt,i7,j9e,xdt,$dt,qne,kdt,Sdt,Rdt,d7,Eoo,Dm,c7,D9e,wR,Pdt,G9e,Bdt,Coo,Er,AR,Idt,Gm,Ndt,jne,qdt,jdt,Dne,Ddt,Gdt,Odt,LR,Vdt,O9e,Xdt,zdt,Qdt,la,yR,Wdt,V9e,Udt,Hdt,Om,Jdt,X9e,Ydt,Kdt,Gne,Zdt,ect,oct,m7,rct,Zr,xR,tct,z9e,act,nct,On,sct,Q9e,lct,ict,W9e,dct,cct,U9e,mct,fct,gct,xe,f7,H9e,hct,uct,One,pct,_ct,bct,g7,J9e,vct,Fct,Vne,Tct,Mct,Ect,h7,Y9e,Cct,wct,Xne,Act,Lct,yct,u7,K9e,xct,$ct,zne,kct,Sct,Rct,p7,Z9e,Pct,Bct,Qne,Ict,Nct,qct,_7,exe,jct,Dct,Wne,Gct,Oct,Vct,b7,oxe,Xct,zct,Une,Qct,Wct,Uct,v7,rxe,Hct,Jct,Hne,Yct,Kct,Zct,F7,txe,emt,omt,Jne,rmt,tmt,amt,T7,axe,nmt,smt,Yne,lmt,imt,dmt,M7,woo,Vm,E7,nxe,$R,cmt,sxe,mmt,Aoo,Cr,kR,fmt,Xm,gmt,Kne,hmt,umt,Zne,pmt,_mt,bmt,SR,vmt,lxe,Fmt,Tmt,Mmt,ia,RR,Emt,ixe,Cmt,wmt,zm,Amt,dxe,Lmt,ymt,ese,xmt,$mt,kmt,C7,Smt,et,PR,Rmt,cxe,Pmt,Bmt,Vn,Imt,mxe,Nmt,qmt,fxe,jmt,Dmt,gxe,Gmt,Omt,Vmt,Ee,w7,hxe,Xmt,zmt,ose,Qmt,Wmt,Umt,A7,uxe,Hmt,Jmt,rse,Ymt,Kmt,Zmt,L7,pxe,eft,oft,tse,rft,tft,aft,y7,_xe,nft,sft,ase,lft,ift,dft,x7,bxe,cft,mft,nse,fft,gft,hft,$7,vxe,uft,pft,sse,_ft,bft,vft,k7,Fxe,Fft,Tft,lse,Mft,Eft,Cft,S7,Txe,wft,Aft,ise,Lft,yft,xft,R7,Mxe,$ft,kft,dse,Sft,Rft,Pft,P7,Exe,Bft,Ift,cse,Nft,qft,jft,B7,Cxe,Dft,Gft,mse,Oft,Vft,Xft,I7,wxe,zft,Qft,fse,Wft,Uft,Hft,N7,Axe,Jft,Yft,gse,Kft,Zft,egt,q7,Loo,Qm,j7,Lxe,BR,ogt,yxe,rgt,yoo,wr,IR,tgt,Wm,agt,hse,ngt,sgt,use,lgt,igt,dgt,NR,cgt,xxe,mgt,fgt,ggt,da,qR,hgt,$xe,ugt,pgt,Um,_gt,kxe,bgt,vgt,pse,Fgt,Tgt,Mgt,D7,Egt,ot,jR,Cgt,Sxe,wgt,Agt,Xn,Lgt,Rxe,ygt,xgt,Pxe,$gt,kgt,Bxe,Sgt,Rgt,Pgt,$e,G7,Ixe,Bgt,Igt,_se,Ngt,qgt,jgt,O7,Nxe,Dgt,Ggt,bse,Ogt,Vgt,Xgt,V7,qxe,zgt,Qgt,vse,Wgt,Ugt,Hgt,X7,jxe,Jgt,Ygt,Fse,Kgt,Zgt,eht,z7,Dxe,oht,rht,Tse,tht,aht,nht,Q7,Gxe,sht,lht,Mse,iht,dht,cht,W7,Oxe,mht,fht,Ese,ght,hht,uht,U7,Vxe,pht,_ht,Cse,bht,vht,Fht,H7,Xxe,Tht,Mht,wse,Eht,Cht,wht,J7,zxe,Aht,Lht,Ase,yht,xht,$ht,Y7,xoo,Hm,K7,Qxe,DR,kht,Wxe,Sht,$oo,Ar,GR,Rht,Jm,Pht,Lse,Bht,Iht,yse,Nht,qht,jht,OR,Dht,Uxe,Ght,Oht,Vht,ca,VR,Xht,Hxe,zht,Qht,Ym,Wht,Jxe,Uht,Hht,xse,Jht,Yht,Kht,Z7,Zht,rt,XR,eut,Yxe,out,rut,zn,tut,Kxe,aut,nut,Zxe,sut,lut,e$e,iut,dut,cut,ke,eL,o$e,mut,fut,$se,gut,hut,uut,oL,r$e,put,_ut,kse,but,vut,Fut,rL,t$e,Tut,Mut,Sse,Eut,Cut,wut,tL,a$e,Aut,Lut,Rse,yut,xut,$ut,aL,n$e,kut,Sut,Pse,Rut,Put,But,nL,s$e,Iut,Nut,Bse,qut,jut,Dut,sL,l$e,Gut,Out,Ise,Vut,Xut,zut,lL,i$e,Qut,Wut,Nse,Uut,Hut,Jut,iL,d$e,Yut,Kut,qse,Zut,ept,opt,dL,c$e,rpt,tpt,jse,apt,npt,spt,cL,koo,Km,mL,m$e,zR,lpt,f$e,ipt,Soo,Lr,QR,dpt,Zm,cpt,Dse,mpt,fpt,Gse,gpt,hpt,upt,WR,ppt,g$e,_pt,bpt,vpt,ma,UR,Fpt,h$e,Tpt,Mpt,ef,Ept,u$e,Cpt,wpt,Ose,Apt,Lpt,ypt,fL,xpt,tt,HR,$pt,p$e,kpt,Spt,Qn,Rpt,_$e,Ppt,Bpt,b$e,Ipt,Npt,v$e,qpt,jpt,Dpt,Se,gL,F$e,Gpt,Opt,Vse,Vpt,Xpt,zpt,hL,T$e,Qpt,Wpt,Xse,Upt,Hpt,Jpt,uL,M$e,Ypt,Kpt,zse,Zpt,e_t,o_t,pL,E$e,r_t,t_t,Qse,a_t,n_t,s_t,_L,C$e,l_t,i_t,Wse,d_t,c_t,m_t,bL,w$e,f_t,g_t,Use,h_t,u_t,p_t,vL,A$e,__t,b_t,Hse,v_t,F_t,T_t,FL,L$e,M_t,E_t,Jse,C_t,w_t,A_t,TL,y$e,L_t,y_t,Yse,x_t,$_t,k_t,ML,x$e,S_t,R_t,Kse,P_t,B_t,I_t,EL,Roo,of,CL,$$e,JR,N_t,k$e,q_t,Poo,yr,YR,j_t,rf,D_t,Zse,G_t,O_t,ele,V_t,X_t,z_t,KR,Q_t,S$e,W_t,U_t,H_t,fa,ZR,J_t,R$e,Y_t,K_t,tf,Z_t,P$e,e2t,o2t,ole,r2t,t2t,a2t,wL,n2t,at,eP,s2t,B$e,l2t,i2t,Wn,d2t,I$e,c2t,m2t,N$e,f2t,g2t,q$e,h2t,u2t,p2t,Re,AL,j$e,_2t,b2t,rle,v2t,F2t,T2t,LL,D$e,M2t,E2t,tle,C2t,w2t,A2t,yL,G$e,L2t,y2t,ale,x2t,$2t,k2t,xL,O$e,S2t,R2t,nle,P2t,B2t,I2t,$L,V$e,N2t,q2t,sle,j2t,D2t,G2t,kL,X$e,O2t,V2t,lle,X2t,z2t,Q2t,SL,z$e,W2t,U2t,ile,H2t,J2t,Y2t,RL,Q$e,K2t,Z2t,dle,e1t,o1t,r1t,PL,W$e,t1t,a1t,cle,n1t,s1t,l1t,BL,U$e,i1t,d1t,mle,c1t,m1t,f1t,IL,Boo,af,NL,H$e,oP,g1t,J$e,h1t,Ioo,xr,rP,u1t,nf,p1t,fle,_1t,b1t,gle,v1t,F1t,T1t,tP,M1t,Y$e,E1t,C1t,w1t,ga,aP,A1t,K$e,L1t,y1t,sf,x1t,Z$e,$1t,k1t,hle,S1t,R1t,P1t,qL,B1t,nt,nP,I1t,eke,N1t,q1t,Un,j1t,oke,D1t,G1t,rke,O1t,V1t,tke,X1t,z1t,Q1t,Xe,jL,ake,W1t,U1t,ule,H1t,J1t,Y1t,DL,nke,K1t,Z1t,ple,ebt,obt,rbt,GL,ske,tbt,abt,_le,nbt,sbt,lbt,OL,lke,ibt,dbt,ble,cbt,mbt,fbt,VL,ike,gbt,hbt,vle,ubt,pbt,_bt,XL,dke,bbt,vbt,Fle,Fbt,Tbt,Mbt,zL,cke,Ebt,Cbt,Tle,wbt,Abt,Lbt,QL,mke,ybt,xbt,Mle,$bt,kbt,Sbt,WL,Noo,lf,UL,fke,sP,Rbt,gke,Pbt,qoo,$r,lP,Bbt,df,Ibt,Ele,Nbt,qbt,Cle,jbt,Dbt,Gbt,iP,Obt,hke,Vbt,Xbt,zbt,ha,dP,Qbt,uke,Wbt,Ubt,cf,Hbt,pke,Jbt,Ybt,wle,Kbt,Zbt,evt,HL,ovt,st,cP,rvt,_ke,tvt,avt,Hn,nvt,bke,svt,lvt,vke,ivt,dvt,Fke,cvt,mvt,fvt,ze,JL,Tke,gvt,hvt,Ale,uvt,pvt,_vt,YL,Mke,bvt,vvt,Lle,Fvt,Tvt,Mvt,KL,Eke,Evt,Cvt,yle,wvt,Avt,Lvt,ZL,Cke,yvt,xvt,xle,$vt,kvt,Svt,ey,wke,Rvt,Pvt,$le,Bvt,Ivt,Nvt,oy,Ake,qvt,jvt,kle,Dvt,Gvt,Ovt,ry,Lke,Vvt,Xvt,Sle,zvt,Qvt,Wvt,ty,yke,Uvt,Hvt,Rle,Jvt,Yvt,Kvt,ay,joo,mf,ny,xke,mP,Zvt,$ke,eFt,Doo,kr,fP,oFt,ff,rFt,Ple,tFt,aFt,Ble,nFt,sFt,lFt,gP,iFt,kke,dFt,cFt,mFt,ua,hP,fFt,Ske,gFt,hFt,gf,uFt,Rke,pFt,_Ft,Ile,bFt,vFt,FFt,sy,TFt,lt,uP,MFt,Pke,EFt,CFt,Jn,wFt,Bke,AFt,LFt,Ike,yFt,xFt,Nke,$Ft,kFt,SFt,qke,ly,jke,RFt,PFt,Nle,BFt,IFt,NFt,iy,Goo,hf,dy,Dke,pP,qFt,Gke,jFt,Ooo,Sr,_P,DFt,uf,GFt,qle,OFt,VFt,jle,XFt,zFt,QFt,bP,WFt,Oke,UFt,HFt,JFt,pa,vP,YFt,Vke,KFt,ZFt,pf,eTt,Xke,oTt,rTt,Dle,tTt,aTt,nTt,cy,sTt,it,FP,lTt,zke,iTt,dTt,Yn,cTt,Qke,mTt,fTt,Wke,gTt,hTt,Uke,uTt,pTt,_Tt,TP,my,Hke,bTt,vTt,Gle,FTt,TTt,MTt,fy,Jke,ETt,CTt,Ole,wTt,ATt,LTt,gy,Voo,_f,hy,Yke,MP,yTt,Kke,xTt,Xoo,Rr,EP,$Tt,bf,kTt,Vle,STt,RTt,Xle,PTt,BTt,ITt,CP,NTt,Zke,qTt,jTt,DTt,_a,wP,GTt,eSe,OTt,VTt,vf,XTt,oSe,zTt,QTt,zle,WTt,UTt,HTt,uy,JTt,dt,AP,YTt,rSe,KTt,ZTt,Kn,eMt,tSe,oMt,rMt,aSe,tMt,aMt,nSe,nMt,sMt,lMt,sSe,py,lSe,iMt,dMt,Qle,cMt,mMt,fMt,_y,zoo;return d=new oe({}),Qa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),K9=new oe({}),Z9=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),yf=new gMt({props:{warning:!0,$$slots:{default:[h2a]},$$scope:{ctx:$}}}),ex=new oe({}),ox=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L653"}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L676"}}),Zh=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[u2a]},$$scope:{ctx:$}}}),nx=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L799"}}),sx=new oe({}),lx=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L427"}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L441"}}),Iu=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[p2a]},$$scope:{ctx:$}}}),mx=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L642"}}),fx=new oe({}),gx=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L202"}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L216"}}),Lp=new gMt({props:{$$slots:{default:[_2a]},$$scope:{ctx:$}}}),yp=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[b2a]},$$scope:{ctx:$}}}),_x=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L343"}}),bx=new oe({}),vx=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L95"}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L109"}}),Zp=new gMt({props:{$$slots:{default:[v2a]},$$scope:{ctx:$}}}),e_=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[F2a]},$$scope:{ctx:$}}}),Ex=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L276"}}),Cx=new oe({}),wx=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L858"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel">ConditionalDetrModel</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel">DeformableDetrModel</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel">ErnieModel</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmModel">EsmModel</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel">GPTNeoXJapaneseModel</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel">MarkupLMModel</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel">PegasusXModel</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel">ViTMSNModel</a> (ViTMSN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig">XCLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel">XCLIPModel</a> (X-CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t_=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[T2a]},$$scope:{ctx:$}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T1=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[M2a]},$$scope:{ctx:$}}}),xx=new oe({}),$x=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L865"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining">ErnieForPreTraining</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E1=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[E2a]},$$scope:{ctx:$}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vb=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[C2a]},$$scope:{ctx:$}}}),Px=new oe({}),Bx=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L880"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM">ErnieForCausalLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig">GPTNeoXJapaneseConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM">GPTNeoXJapaneseForCausalLM</a> (GPT NeoX Japanese model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Tb=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[w2a]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[A2a]},$$scope:{ctx:$}}}),jx=new oe({}),Dx=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L887"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM">ErnieForMaskedLM</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gv=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[L2a]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[y2a]},$$scope:{ctx:$}}}),Xx=new oe({}),zx=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L894"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig">PegasusXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration">PegasusXForConditionalGeneration</a> (PEGASUS-X model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[x2a]},$$scope:{ctx:$}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CF=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$2a]},$$scope:{ctx:$}}}),Hx=new oe({}),Jx=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L903"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification">ErnieForSequenceClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification">EsmForSequenceClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification">MarkupLMForSequenceClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AF=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[k2a]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[S2a]},$$scope:{ctx:$}}}),e$=new oe({}),o$=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L959"}}),t$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice">ErnieForMultipleChoice</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[R2a]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[P2a]},$$scope:{ctx:$}}}),n$=new oe({}),s$=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L966"}}),i$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction">ErnieForNextSentencePrediction</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gM=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[B2a]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[I2a]},$$scope:{ctx:$}}}),c$=new oe({}),m$=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L952"}}),g$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification">ErnieForTokenClassification</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig">EsmConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification">EsmForTokenClassification</a> (ESM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification">MarkupLMForTokenClassification</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[N2a]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fE=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[q2a]},$$scope:{ctx:$}}}),u$=new oe({}),p$=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L912"}}),b$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig">ErnieConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering">ErnieForQuestionAnswering</a> (ERNIE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig">MarkupLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering">MarkupLMForQuestionAnswering</a> (MarkupLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[j2a]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l4=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[D2a]},$$scope:{ctx:$}}}),F$=new oe({}),T$=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L919"}}),E$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d4=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[G2a]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f4=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[O2a]},$$scope:{ctx:$}}}),w$=new oe({}),A$=new R({props:{name:"class transformers.AutoModelForDocumentQuestionAnswering",anchor:"transformers.AutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L941"}}),y$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering">LayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h4=new N({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[V2a]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new N({props:{anchor:"transformers.AutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[X2a]},$$scope:{ctx:$}}}),$$=new oe({}),k$=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L975"}}),R$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig">ViTMSNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification">ViTMSNForImageClassification</a> (ViTMSN model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[z2a]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Q2a]},$$scope:{ctx:$}}}),B$=new oe({}),I$=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1014"}}),q$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D4=new N({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[W2a]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new N({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[U2a]},$$scope:{ctx:$}}}),D$=new oe({}),G$=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1021"}}),V$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[H2a]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U4=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[J2a]},$$scope:{ctx:$}}}),z$=new oe({}),Q$=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L930"}}),U$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Y2a]},$$scope:{ctx:$}}}),H$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[K2a]},$$scope:{ctx:$}}}),J$=new oe({}),Y$=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1028"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Z2a]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[e1a]},$$scope:{ctx:$}}}),ok=new oe({}),rk=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1051"}}),ak=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[o1a]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TC=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[r1a]},$$scope:{ctx:$}}}),sk=new oe({}),lk=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1035"}}),dk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[t1a]},$$scope:{ctx:$}}}),ck=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BC=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[a1a]},$$scope:{ctx:$}}}),mk=new oe({}),fk=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1042"}}),hk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NC=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[n1a]},$$scope:{ctx:$}}}),uk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[s1a]},$$scope:{ctx:$}}}),_k=new oe({}),bk=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1060"}}),Fk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[l1a]},$$scope:{ctx:$}}}),Tk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[i1a]},$$scope:{ctx:$}}}),Mk=new oe({}),Ek=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1067"}}),wk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[d1a]},$$scope:{ctx:$}}}),Ak=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[c1a]},$$scope:{ctx:$}}}),Lk=new oe({}),yk=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1007"}}),$k=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig">ConditionalDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection">ConditionalDetrForObjectDetection</a> (Conditional DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig">DeformableDetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection">DeformableDetrForObjectDetection</a> (Deformable DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[m1a]},$$scope:{ctx:$}}}),kk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[f1a]},$$scope:{ctx:$}}}),Sk=new oe({}),Rk=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L982"}}),Bk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h3=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[g1a]},$$scope:{ctx:$}}}),Ik=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_3=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[h1a]},$$scope:{ctx:$}}}),Nk=new oe({}),qk=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L989"}}),Dk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[u1a]},$$scope:{ctx:$}}}),Gk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A3=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[p1a]},$$scope:{ctx:$}}}),Ok=new oe({}),Vk=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L998"}}),zk=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[_1a]},$$scope:{ctx:$}}}),Qk=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[b1a]},$$scope:{ctx:$}}}),Wk=new oe({}),Uk=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),Jk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel">TFGroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel">TFMobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R3=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[v1a]},$$scope:{ctx:$}}}),Yk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[F1a]},$$scope:{ctx:$}}}),Kk=new oe({}),Zk=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),oS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[T1a]},$$scope:{ctx:$}}}),rS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s0=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[M1a]},$$scope:{ctx:$}}}),tS=new oe({}),aS=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),sS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i0=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[E1a]},$$scope:{ctx:$}}}),lS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[C1a]},$$scope:{ctx:$}}}),iS=new oe({}),dS=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),mS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification">TFMobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[w1a]},$$scope:{ctx:$}}}),fS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P0=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[A1a]},$$scope:{ctx:$}}}),gS=new oe({}),hS=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L481"}}),pS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation">TFMobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new N({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[L1a]},$$scope:{ctx:$}}}),_S=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new N({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[y1a]},$$scope:{ctx:$}}}),bS=new oe({}),vS=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L497"}}),TS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O0=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[x1a]},$$scope:{ctx:$}}}),MS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$1a]},$$scope:{ctx:$}}}),ES=new oe({}),CS=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),AS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mw=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[k1a]},$$scope:{ctx:$}}}),LS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[S1a]},$$scope:{ctx:$}}}),yS=new oe({}),xS=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L513"}}),kS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[R1a]},$$scope:{ctx:$}}}),SS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Kw=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[P1a]},$$scope:{ctx:$}}}),RS=new oe({}),PS=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L560"}}),IS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eA=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[B1a]},$$scope:{ctx:$}}}),NS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bA=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[I1a]},$$scope:{ctx:$}}}),qS=new oe({}),jS=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L567"}}),GS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FA=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[N1a]},$$scope:{ctx:$}}}),OS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EA=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[q1a]},$$scope:{ctx:$}}}),XS=new oe({}),zS=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L540"}}),WS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wA=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[j1a]},$$scope:{ctx:$}}}),US=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LA=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[D1a]},$$scope:{ctx:$}}}),HS=new oe({}),JS=new R({props:{name:"class transformers.TFAutoModelForDocumentQuestionAnswering",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L529"}}),KS=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering">TFLayoutLMForQuestionAnswering</a> (LayoutLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xA=new N({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_config.example",$$slots:{default:[G1a]},$$scope:{ctx:$}}}),ZS=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kA=new N({props:{anchor:"transformers.TFAutoModelForDocumentQuestionAnswering.from_pretrained.example",$$slots:{default:[O1a]},$$scope:{ctx:$}}}),eR=new oe({}),oR=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L551"}}),tR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RA=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[V1a]},$$scope:{ctx:$}}}),aR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o6=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[X1a]},$$scope:{ctx:$}}}),nR=new oe({}),sR=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),iR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t6=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[z1a]},$$scope:{ctx:$}}}),dR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w6=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Q1a]},$$scope:{ctx:$}}}),cR=new oe({}),mR=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),gR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L6=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[W1a]},$$scope:{ctx:$}}}),hR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x6=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[U1a]},$$scope:{ctx:$}}}),uR=new oe({}),pR=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L576"}}),bR=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k6=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[H1a]},$$scope:{ctx:$}}}),vR=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R6=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[J1a]},$$scope:{ctx:$}}}),FR=new oe({}),TR=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),ER=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B6=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Y1a]},$$scope:{ctx:$}}}),CR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d7=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[K1a]},$$scope:{ctx:$}}}),wR=new oe({}),AR=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),yR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m7=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Z1a]},$$scope:{ctx:$}}}),xR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M7=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[eba]},$$scope:{ctx:$}}}),$R=new oe({}),kR=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),RR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C7=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[oba]},$$scope:{ctx:$}}}),PR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q7=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[rba]},$$scope:{ctx:$}}}),BR=new oe({}),IR=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),qR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D7=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[tba]},$$scope:{ctx:$}}}),jR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y7=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[aba]},$$scope:{ctx:$}}}),DR=new oe({}),GR=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),VR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z7=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[nba]},$$scope:{ctx:$}}}),XR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),cL=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[sba]},$$scope:{ctx:$}}}),zR=new oe({}),QR=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),UR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fL=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[lba]},$$scope:{ctx:$}}}),HR=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EL=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[iba]},$$scope:{ctx:$}}}),JR=new oe({}),YR=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),ZR=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wL=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[dba]},$$scope:{ctx:$}}}),eP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IL=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[cba]},$$scope:{ctx:$}}}),oP=new oe({}),rP=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),aP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qL=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[mba]},$$scope:{ctx:$}}}),nP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WL=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[fba]},$$scope:{ctx:$}}}),sP=new oe({}),lP=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),dP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HL=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[gba]},$$scope:{ctx:$}}}),cP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ay=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hba]},$$scope:{ctx:$}}}),mP=new oe({}),fP=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),hP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sy=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[uba]},$$scope:{ctx:$}}}),uP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iy=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[pba]},$$scope:{ctx:$}}}),pP=new oe({}),_P=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),vP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cy=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[_ba]},$$scope:{ctx:$}}}),FP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gy=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[bba]},$$scope:{ctx:$}}}),MP=new oe({}),EP=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),wP=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uy=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[vba]},$$scope:{ctx:$}}}),AP=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_y=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Fba]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),yo=a("span"),td=o("Auto Classes"),Ef=l(),pt=a("p"),ad=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),nd=a("code"),U9=o("from_pretrained()"),Cf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ve=l(),He=a("p"),sd=o("Instantiating one of "),es=a("a"),H9=o("AutoConfig"),os=o(", "),rs=a("a"),J9=o("AutoModel"),ld=o(`, and
`),ts=a("a"),Y9=o("AutoTokenizer"),id=o(" will directly create a class of the relevant architecture. For instance"),wf=l(),F(Qa.$$.fragment),Je=l(),Ae=a("p"),KB=o("will create a model that is an instance of "),dd=a("a"),ZB=o("BertModel"),eI=o("."),xo=l(),Wa=a("p"),oI=o("There is one class of "),Af=a("code"),rI=o("AutoModel"),iao=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),SZe=l(),cd=a("h2"),Lf=a("a"),Jde=a("span"),F(K9.$$.fragment),dao=l(),Yde=a("span"),cao=o("Extending the Auto Classes"),RZe=l(),as=a("p"),mao=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Kde=a("code"),fao=o("NewModel"),gao=o(", make sure you have a "),Zde=a("code"),hao=o("NewModelConfig"),uao=o(` then you can add those to the auto
classes like this:`),PZe=l(),F(Z9.$$.fragment),BZe=l(),tI=a("p"),pao=o("You will then be able to use the auto classes like you would usually do!"),IZe=l(),F(yf.$$.fragment),NZe=l(),md=a("h2"),xf=a("a"),ece=a("span"),F(ex.$$.fragment),_ao=l(),oce=a("span"),bao=o("AutoConfig"),qZe=l(),$o=a("div"),F(ox.$$.fragment),vao=l(),rx=a("p"),Fao=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),aI=a("a"),Tao=o("from_pretrained()"),Mao=o(" class method."),Eao=l(),tx=a("p"),Cao=o("This class cannot be instantiated directly using "),rce=a("code"),wao=o("__init__()"),Aao=o(" (throws an error)."),Lao=l(),Pr=a("div"),F(ax.$$.fragment),yao=l(),tce=a("p"),xao=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),$ao=l(),fd=a("p"),kao=o("The configuration class to instantiate is selected based on the "),ace=a("code"),Sao=o("model_type"),Rao=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nce=a("code"),Pao=o("pretrained_model_name_or_path"),Bao=o(":"),Iao=l(),A=a("ul"),$f=a("li"),sce=a("strong"),Nao=o("albert"),qao=o(" \u2014 "),nI=a("a"),jao=o("AlbertConfig"),Dao=o(" (ALBERT model)"),Gao=l(),kf=a("li"),lce=a("strong"),Oao=o("bart"),Vao=o(" \u2014 "),sI=a("a"),Xao=o("BartConfig"),zao=o(" (BART model)"),Qao=l(),Sf=a("li"),ice=a("strong"),Wao=o("beit"),Uao=o(" \u2014 "),lI=a("a"),Hao=o("BeitConfig"),Jao=o(" (BEiT model)"),Yao=l(),Rf=a("li"),dce=a("strong"),Kao=o("bert"),Zao=o(" \u2014 "),iI=a("a"),eno=o("BertConfig"),ono=o(" (BERT model)"),rno=l(),Pf=a("li"),cce=a("strong"),tno=o("bert-generation"),ano=o(" \u2014 "),dI=a("a"),nno=o("BertGenerationConfig"),sno=o(" (Bert Generation model)"),lno=l(),Bf=a("li"),mce=a("strong"),ino=o("big_bird"),dno=o(" \u2014 "),cI=a("a"),cno=o("BigBirdConfig"),mno=o(" (BigBird model)"),fno=l(),If=a("li"),fce=a("strong"),gno=o("bigbird_pegasus"),hno=o(" \u2014 "),mI=a("a"),uno=o("BigBirdPegasusConfig"),pno=o(" (BigBird-Pegasus model)"),_no=l(),Nf=a("li"),gce=a("strong"),bno=o("blenderbot"),vno=o(" \u2014 "),fI=a("a"),Fno=o("BlenderbotConfig"),Tno=o(" (Blenderbot model)"),Mno=l(),qf=a("li"),hce=a("strong"),Eno=o("blenderbot-small"),Cno=o(" \u2014 "),gI=a("a"),wno=o("BlenderbotSmallConfig"),Ano=o(" (BlenderbotSmall model)"),Lno=l(),jf=a("li"),uce=a("strong"),yno=o("bloom"),xno=o(" \u2014 "),hI=a("a"),$no=o("BloomConfig"),kno=o(" (BLOOM model)"),Sno=l(),Df=a("li"),pce=a("strong"),Rno=o("camembert"),Pno=o(" \u2014 "),uI=a("a"),Bno=o("CamembertConfig"),Ino=o(" (CamemBERT model)"),Nno=l(),Gf=a("li"),_ce=a("strong"),qno=o("canine"),jno=o(" \u2014 "),pI=a("a"),Dno=o("CanineConfig"),Gno=o(" (CANINE model)"),Ono=l(),Of=a("li"),bce=a("strong"),Vno=o("clip"),Xno=o(" \u2014 "),_I=a("a"),zno=o("CLIPConfig"),Qno=o(" (CLIP model)"),Wno=l(),Vf=a("li"),vce=a("strong"),Uno=o("codegen"),Hno=o(" \u2014 "),bI=a("a"),Jno=o("CodeGenConfig"),Yno=o(" (CodeGen model)"),Kno=l(),Xf=a("li"),Fce=a("strong"),Zno=o("conditional_detr"),eso=o(" \u2014 "),vI=a("a"),oso=o("ConditionalDetrConfig"),rso=o(" (Conditional DETR model)"),tso=l(),zf=a("li"),Tce=a("strong"),aso=o("convbert"),nso=o(" \u2014 "),FI=a("a"),sso=o("ConvBertConfig"),lso=o(" (ConvBERT model)"),iso=l(),Qf=a("li"),Mce=a("strong"),dso=o("convnext"),cso=o(" \u2014 "),TI=a("a"),mso=o("ConvNextConfig"),fso=o(" (ConvNeXT model)"),gso=l(),Wf=a("li"),Ece=a("strong"),hso=o("ctrl"),uso=o(" \u2014 "),MI=a("a"),pso=o("CTRLConfig"),_so=o(" (CTRL model)"),bso=l(),Uf=a("li"),Cce=a("strong"),vso=o("cvt"),Fso=o(" \u2014 "),EI=a("a"),Tso=o("CvtConfig"),Mso=o(" (CvT model)"),Eso=l(),Hf=a("li"),wce=a("strong"),Cso=o("data2vec-audio"),wso=o(" \u2014 "),CI=a("a"),Aso=o("Data2VecAudioConfig"),Lso=o(" (Data2VecAudio model)"),yso=l(),Jf=a("li"),Ace=a("strong"),xso=o("data2vec-text"),$so=o(" \u2014 "),wI=a("a"),kso=o("Data2VecTextConfig"),Sso=o(" (Data2VecText model)"),Rso=l(),Yf=a("li"),Lce=a("strong"),Pso=o("data2vec-vision"),Bso=o(" \u2014 "),AI=a("a"),Iso=o("Data2VecVisionConfig"),Nso=o(" (Data2VecVision model)"),qso=l(),Kf=a("li"),yce=a("strong"),jso=o("deberta"),Dso=o(" \u2014 "),LI=a("a"),Gso=o("DebertaConfig"),Oso=o(" (DeBERTa model)"),Vso=l(),Zf=a("li"),xce=a("strong"),Xso=o("deberta-v2"),zso=o(" \u2014 "),yI=a("a"),Qso=o("DebertaV2Config"),Wso=o(" (DeBERTa-v2 model)"),Uso=l(),eg=a("li"),$ce=a("strong"),Hso=o("decision_transformer"),Jso=o(" \u2014 "),xI=a("a"),Yso=o("DecisionTransformerConfig"),Kso=o(" (Decision Transformer model)"),Zso=l(),og=a("li"),kce=a("strong"),elo=o("deformable_detr"),olo=o(" \u2014 "),$I=a("a"),rlo=o("DeformableDetrConfig"),tlo=o(" (Deformable DETR model)"),alo=l(),rg=a("li"),Sce=a("strong"),nlo=o("deit"),slo=o(" \u2014 "),kI=a("a"),llo=o("DeiTConfig"),ilo=o(" (DeiT model)"),dlo=l(),tg=a("li"),Rce=a("strong"),clo=o("detr"),mlo=o(" \u2014 "),SI=a("a"),flo=o("DetrConfig"),glo=o(" (DETR model)"),hlo=l(),ag=a("li"),Pce=a("strong"),ulo=o("distilbert"),plo=o(" \u2014 "),RI=a("a"),_lo=o("DistilBertConfig"),blo=o(" (DistilBERT model)"),vlo=l(),ng=a("li"),Bce=a("strong"),Flo=o("donut-swin"),Tlo=o(" \u2014 "),PI=a("a"),Mlo=o("DonutSwinConfig"),Elo=o(" (DonutSwin model)"),Clo=l(),sg=a("li"),Ice=a("strong"),wlo=o("dpr"),Alo=o(" \u2014 "),BI=a("a"),Llo=o("DPRConfig"),ylo=o(" (DPR model)"),xlo=l(),lg=a("li"),Nce=a("strong"),$lo=o("dpt"),klo=o(" \u2014 "),II=a("a"),Slo=o("DPTConfig"),Rlo=o(" (DPT model)"),Plo=l(),ig=a("li"),qce=a("strong"),Blo=o("electra"),Ilo=o(" \u2014 "),NI=a("a"),Nlo=o("ElectraConfig"),qlo=o(" (ELECTRA model)"),jlo=l(),dg=a("li"),jce=a("strong"),Dlo=o("encoder-decoder"),Glo=o(" \u2014 "),qI=a("a"),Olo=o("EncoderDecoderConfig"),Vlo=o(" (Encoder decoder model)"),Xlo=l(),cg=a("li"),Dce=a("strong"),zlo=o("ernie"),Qlo=o(" \u2014 "),jI=a("a"),Wlo=o("ErnieConfig"),Ulo=o(" (ERNIE model)"),Hlo=l(),mg=a("li"),Gce=a("strong"),Jlo=o("esm"),Ylo=o(" \u2014 "),DI=a("a"),Klo=o("EsmConfig"),Zlo=o(" (ESM model)"),eio=l(),fg=a("li"),Oce=a("strong"),oio=o("flaubert"),rio=o(" \u2014 "),GI=a("a"),tio=o("FlaubertConfig"),aio=o(" (FlauBERT model)"),nio=l(),gg=a("li"),Vce=a("strong"),sio=o("flava"),lio=o(" \u2014 "),OI=a("a"),iio=o("FlavaConfig"),dio=o(" (FLAVA model)"),cio=l(),hg=a("li"),Xce=a("strong"),mio=o("fnet"),fio=o(" \u2014 "),VI=a("a"),gio=o("FNetConfig"),hio=o(" (FNet model)"),uio=l(),ug=a("li"),zce=a("strong"),pio=o("fsmt"),_io=o(" \u2014 "),XI=a("a"),bio=o("FSMTConfig"),vio=o(" (FairSeq Machine-Translation model)"),Fio=l(),pg=a("li"),Qce=a("strong"),Tio=o("funnel"),Mio=o(" \u2014 "),zI=a("a"),Eio=o("FunnelConfig"),Cio=o(" (Funnel Transformer model)"),wio=l(),_g=a("li"),Wce=a("strong"),Aio=o("glpn"),Lio=o(" \u2014 "),QI=a("a"),yio=o("GLPNConfig"),xio=o(" (GLPN model)"),$io=l(),bg=a("li"),Uce=a("strong"),kio=o("gpt2"),Sio=o(" \u2014 "),WI=a("a"),Rio=o("GPT2Config"),Pio=o(" (OpenAI GPT-2 model)"),Bio=l(),vg=a("li"),Hce=a("strong"),Iio=o("gpt_neo"),Nio=o(" \u2014 "),UI=a("a"),qio=o("GPTNeoConfig"),jio=o(" (GPT Neo model)"),Dio=l(),Fg=a("li"),Jce=a("strong"),Gio=o("gpt_neox"),Oio=o(" \u2014 "),HI=a("a"),Vio=o("GPTNeoXConfig"),Xio=o(" (GPT NeoX model)"),zio=l(),Tg=a("li"),Yce=a("strong"),Qio=o("gpt_neox_japanese"),Wio=o(" \u2014 "),JI=a("a"),Uio=o("GPTNeoXJapaneseConfig"),Hio=o(" (GPT NeoX Japanese model)"),Jio=l(),Mg=a("li"),Kce=a("strong"),Yio=o("gptj"),Kio=o(" \u2014 "),YI=a("a"),Zio=o("GPTJConfig"),edo=o(" (GPT-J model)"),odo=l(),Eg=a("li"),Zce=a("strong"),rdo=o("groupvit"),tdo=o(" \u2014 "),KI=a("a"),ado=o("GroupViTConfig"),ndo=o(" (GroupViT model)"),sdo=l(),Cg=a("li"),eme=a("strong"),ldo=o("hubert"),ido=o(" \u2014 "),ZI=a("a"),ddo=o("HubertConfig"),cdo=o(" (Hubert model)"),mdo=l(),wg=a("li"),ome=a("strong"),fdo=o("ibert"),gdo=o(" \u2014 "),eN=a("a"),hdo=o("IBertConfig"),udo=o(" (I-BERT model)"),pdo=l(),Ag=a("li"),rme=a("strong"),_do=o("imagegpt"),bdo=o(" \u2014 "),oN=a("a"),vdo=o("ImageGPTConfig"),Fdo=o(" (ImageGPT model)"),Tdo=l(),Lg=a("li"),tme=a("strong"),Mdo=o("layoutlm"),Edo=o(" \u2014 "),rN=a("a"),Cdo=o("LayoutLMConfig"),wdo=o(" (LayoutLM model)"),Ado=l(),yg=a("li"),ame=a("strong"),Ldo=o("layoutlmv2"),ydo=o(" \u2014 "),tN=a("a"),xdo=o("LayoutLMv2Config"),$do=o(" (LayoutLMv2 model)"),kdo=l(),xg=a("li"),nme=a("strong"),Sdo=o("layoutlmv3"),Rdo=o(" \u2014 "),aN=a("a"),Pdo=o("LayoutLMv3Config"),Bdo=o(" (LayoutLMv3 model)"),Ido=l(),$g=a("li"),sme=a("strong"),Ndo=o("led"),qdo=o(" \u2014 "),nN=a("a"),jdo=o("LEDConfig"),Ddo=o(" (LED model)"),Gdo=l(),kg=a("li"),lme=a("strong"),Odo=o("levit"),Vdo=o(" \u2014 "),sN=a("a"),Xdo=o("LevitConfig"),zdo=o(" (LeViT model)"),Qdo=l(),Sg=a("li"),ime=a("strong"),Wdo=o("longformer"),Udo=o(" \u2014 "),lN=a("a"),Hdo=o("LongformerConfig"),Jdo=o(" (Longformer model)"),Ydo=l(),Rg=a("li"),dme=a("strong"),Kdo=o("longt5"),Zdo=o(" \u2014 "),iN=a("a"),eco=o("LongT5Config"),oco=o(" (LongT5 model)"),rco=l(),Pg=a("li"),cme=a("strong"),tco=o("luke"),aco=o(" \u2014 "),dN=a("a"),nco=o("LukeConfig"),sco=o(" (LUKE model)"),lco=l(),Bg=a("li"),mme=a("strong"),ico=o("lxmert"),dco=o(" \u2014 "),cN=a("a"),cco=o("LxmertConfig"),mco=o(" (LXMERT model)"),fco=l(),Ig=a("li"),fme=a("strong"),gco=o("m2m_100"),hco=o(" \u2014 "),mN=a("a"),uco=o("M2M100Config"),pco=o(" (M2M100 model)"),_co=l(),Ng=a("li"),gme=a("strong"),bco=o("marian"),vco=o(" \u2014 "),fN=a("a"),Fco=o("MarianConfig"),Tco=o(" (Marian model)"),Mco=l(),qg=a("li"),hme=a("strong"),Eco=o("markuplm"),Cco=o(" \u2014 "),gN=a("a"),wco=o("MarkupLMConfig"),Aco=o(" (MarkupLM model)"),Lco=l(),jg=a("li"),ume=a("strong"),yco=o("maskformer"),xco=o(" \u2014 "),hN=a("a"),$co=o("MaskFormerConfig"),kco=o(" (MaskFormer model)"),Sco=l(),Dg=a("li"),pme=a("strong"),Rco=o("mbart"),Pco=o(" \u2014 "),uN=a("a"),Bco=o("MBartConfig"),Ico=o(" (mBART model)"),Nco=l(),Gg=a("li"),_me=a("strong"),qco=o("mctct"),jco=o(" \u2014 "),pN=a("a"),Dco=o("MCTCTConfig"),Gco=o(" (M-CTC-T model)"),Oco=l(),Og=a("li"),bme=a("strong"),Vco=o("megatron-bert"),Xco=o(" \u2014 "),_N=a("a"),zco=o("MegatronBertConfig"),Qco=o(" (Megatron-BERT model)"),Wco=l(),Vg=a("li"),vme=a("strong"),Uco=o("mobilebert"),Hco=o(" \u2014 "),bN=a("a"),Jco=o("MobileBertConfig"),Yco=o(" (MobileBERT model)"),Kco=l(),Xg=a("li"),Fme=a("strong"),Zco=o("mobilevit"),emo=o(" \u2014 "),vN=a("a"),omo=o("MobileViTConfig"),rmo=o(" (MobileViT model)"),tmo=l(),zg=a("li"),Tme=a("strong"),amo=o("mpnet"),nmo=o(" \u2014 "),FN=a("a"),smo=o("MPNetConfig"),lmo=o(" (MPNet model)"),imo=l(),Qg=a("li"),Mme=a("strong"),dmo=o("mt5"),cmo=o(" \u2014 "),TN=a("a"),mmo=o("MT5Config"),fmo=o(" (MT5 model)"),gmo=l(),Wg=a("li"),Eme=a("strong"),hmo=o("mvp"),umo=o(" \u2014 "),MN=a("a"),pmo=o("MvpConfig"),_mo=o(" (MVP model)"),bmo=l(),Ug=a("li"),Cme=a("strong"),vmo=o("nezha"),Fmo=o(" \u2014 "),EN=a("a"),Tmo=o("NezhaConfig"),Mmo=o(" (Nezha model)"),Emo=l(),Hg=a("li"),wme=a("strong"),Cmo=o("nystromformer"),wmo=o(" \u2014 "),CN=a("a"),Amo=o("NystromformerConfig"),Lmo=o(" (Nystr\xF6mformer model)"),ymo=l(),Jg=a("li"),Ame=a("strong"),xmo=o("openai-gpt"),$mo=o(" \u2014 "),wN=a("a"),kmo=o("OpenAIGPTConfig"),Smo=o(" (OpenAI GPT model)"),Rmo=l(),Yg=a("li"),Lme=a("strong"),Pmo=o("opt"),Bmo=o(" \u2014 "),AN=a("a"),Imo=o("OPTConfig"),Nmo=o(" (OPT model)"),qmo=l(),Kg=a("li"),yme=a("strong"),jmo=o("owlvit"),Dmo=o(" \u2014 "),LN=a("a"),Gmo=o("OwlViTConfig"),Omo=o(" (OWL-ViT model)"),Vmo=l(),Zg=a("li"),xme=a("strong"),Xmo=o("pegasus"),zmo=o(" \u2014 "),yN=a("a"),Qmo=o("PegasusConfig"),Wmo=o(" (Pegasus model)"),Umo=l(),eh=a("li"),$me=a("strong"),Hmo=o("pegasus_x"),Jmo=o(" \u2014 "),xN=a("a"),Ymo=o("PegasusXConfig"),Kmo=o(" (PEGASUS-X model)"),Zmo=l(),oh=a("li"),kme=a("strong"),efo=o("perceiver"),ofo=o(" \u2014 "),$N=a("a"),rfo=o("PerceiverConfig"),tfo=o(" (Perceiver model)"),afo=l(),rh=a("li"),Sme=a("strong"),nfo=o("plbart"),sfo=o(" \u2014 "),kN=a("a"),lfo=o("PLBartConfig"),ifo=o(" (PLBart model)"),dfo=l(),th=a("li"),Rme=a("strong"),cfo=o("poolformer"),mfo=o(" \u2014 "),SN=a("a"),ffo=o("PoolFormerConfig"),gfo=o(" (PoolFormer model)"),hfo=l(),ah=a("li"),Pme=a("strong"),ufo=o("prophetnet"),pfo=o(" \u2014 "),RN=a("a"),_fo=o("ProphetNetConfig"),bfo=o(" (ProphetNet model)"),vfo=l(),nh=a("li"),Bme=a("strong"),Ffo=o("qdqbert"),Tfo=o(" \u2014 "),PN=a("a"),Mfo=o("QDQBertConfig"),Efo=o(" (QDQBert model)"),Cfo=l(),sh=a("li"),Ime=a("strong"),wfo=o("rag"),Afo=o(" \u2014 "),BN=a("a"),Lfo=o("RagConfig"),yfo=o(" (RAG model)"),xfo=l(),lh=a("li"),Nme=a("strong"),$fo=o("realm"),kfo=o(" \u2014 "),IN=a("a"),Sfo=o("RealmConfig"),Rfo=o(" (REALM model)"),Pfo=l(),ih=a("li"),qme=a("strong"),Bfo=o("reformer"),Ifo=o(" \u2014 "),NN=a("a"),Nfo=o("ReformerConfig"),qfo=o(" (Reformer model)"),jfo=l(),dh=a("li"),jme=a("strong"),Dfo=o("regnet"),Gfo=o(" \u2014 "),qN=a("a"),Ofo=o("RegNetConfig"),Vfo=o(" (RegNet model)"),Xfo=l(),ch=a("li"),Dme=a("strong"),zfo=o("rembert"),Qfo=o(" \u2014 "),jN=a("a"),Wfo=o("RemBertConfig"),Ufo=o(" (RemBERT model)"),Hfo=l(),mh=a("li"),Gme=a("strong"),Jfo=o("resnet"),Yfo=o(" \u2014 "),DN=a("a"),Kfo=o("ResNetConfig"),Zfo=o(" (ResNet model)"),ego=l(),fh=a("li"),Ome=a("strong"),ogo=o("retribert"),rgo=o(" \u2014 "),GN=a("a"),tgo=o("RetriBertConfig"),ago=o(" (RetriBERT model)"),ngo=l(),gh=a("li"),Vme=a("strong"),sgo=o("roberta"),lgo=o(" \u2014 "),ON=a("a"),igo=o("RobertaConfig"),dgo=o(" (RoBERTa model)"),cgo=l(),hh=a("li"),Xme=a("strong"),mgo=o("roformer"),fgo=o(" \u2014 "),VN=a("a"),ggo=o("RoFormerConfig"),hgo=o(" (RoFormer model)"),ugo=l(),uh=a("li"),zme=a("strong"),pgo=o("segformer"),_go=o(" \u2014 "),XN=a("a"),bgo=o("SegformerConfig"),vgo=o(" (SegFormer model)"),Fgo=l(),ph=a("li"),Qme=a("strong"),Tgo=o("sew"),Mgo=o(" \u2014 "),zN=a("a"),Ego=o("SEWConfig"),Cgo=o(" (SEW model)"),wgo=l(),_h=a("li"),Wme=a("strong"),Ago=o("sew-d"),Lgo=o(" \u2014 "),QN=a("a"),ygo=o("SEWDConfig"),xgo=o(" (SEW-D model)"),$go=l(),bh=a("li"),Ume=a("strong"),kgo=o("speech-encoder-decoder"),Sgo=o(" \u2014 "),WN=a("a"),Rgo=o("SpeechEncoderDecoderConfig"),Pgo=o(" (Speech Encoder decoder model)"),Bgo=l(),vh=a("li"),Hme=a("strong"),Igo=o("speech_to_text"),Ngo=o(" \u2014 "),UN=a("a"),qgo=o("Speech2TextConfig"),jgo=o(" (Speech2Text model)"),Dgo=l(),Fh=a("li"),Jme=a("strong"),Ggo=o("speech_to_text_2"),Ogo=o(" \u2014 "),HN=a("a"),Vgo=o("Speech2Text2Config"),Xgo=o(" (Speech2Text2 model)"),zgo=l(),Th=a("li"),Yme=a("strong"),Qgo=o("splinter"),Wgo=o(" \u2014 "),JN=a("a"),Ugo=o("SplinterConfig"),Hgo=o(" (Splinter model)"),Jgo=l(),Mh=a("li"),Kme=a("strong"),Ygo=o("squeezebert"),Kgo=o(" \u2014 "),YN=a("a"),Zgo=o("SqueezeBertConfig"),eho=o(" (SqueezeBERT model)"),oho=l(),Eh=a("li"),Zme=a("strong"),rho=o("swin"),tho=o(" \u2014 "),KN=a("a"),aho=o("SwinConfig"),nho=o(" (Swin Transformer model)"),sho=l(),Ch=a("li"),efe=a("strong"),lho=o("swinv2"),iho=o(" \u2014 "),ZN=a("a"),dho=o("Swinv2Config"),cho=o(" (Swin Transformer V2 model)"),mho=l(),wh=a("li"),ofe=a("strong"),fho=o("t5"),gho=o(" \u2014 "),eq=a("a"),hho=o("T5Config"),uho=o(" (T5 model)"),pho=l(),Ah=a("li"),rfe=a("strong"),_ho=o("tapas"),bho=o(" \u2014 "),oq=a("a"),vho=o("TapasConfig"),Fho=o(" (TAPAS model)"),Tho=l(),Lh=a("li"),tfe=a("strong"),Mho=o("trajectory_transformer"),Eho=o(" \u2014 "),rq=a("a"),Cho=o("TrajectoryTransformerConfig"),who=o(" (Trajectory Transformer model)"),Aho=l(),yh=a("li"),afe=a("strong"),Lho=o("transfo-xl"),yho=o(" \u2014 "),tq=a("a"),xho=o("TransfoXLConfig"),$ho=o(" (Transformer-XL model)"),kho=l(),xh=a("li"),nfe=a("strong"),Sho=o("trocr"),Rho=o(" \u2014 "),aq=a("a"),Pho=o("TrOCRConfig"),Bho=o(" (TrOCR model)"),Iho=l(),$h=a("li"),sfe=a("strong"),Nho=o("unispeech"),qho=o(" \u2014 "),nq=a("a"),jho=o("UniSpeechConfig"),Dho=o(" (UniSpeech model)"),Gho=l(),kh=a("li"),lfe=a("strong"),Oho=o("unispeech-sat"),Vho=o(" \u2014 "),sq=a("a"),Xho=o("UniSpeechSatConfig"),zho=o(" (UniSpeechSat model)"),Qho=l(),Sh=a("li"),ife=a("strong"),Who=o("van"),Uho=o(" \u2014 "),lq=a("a"),Hho=o("VanConfig"),Jho=o(" (VAN model)"),Yho=l(),Rh=a("li"),dfe=a("strong"),Kho=o("videomae"),Zho=o(" \u2014 "),iq=a("a"),euo=o("VideoMAEConfig"),ouo=o(" (VideoMAE model)"),ruo=l(),Ph=a("li"),cfe=a("strong"),tuo=o("vilt"),auo=o(" \u2014 "),dq=a("a"),nuo=o("ViltConfig"),suo=o(" (ViLT model)"),luo=l(),Bh=a("li"),mfe=a("strong"),iuo=o("vision-encoder-decoder"),duo=o(" \u2014 "),cq=a("a"),cuo=o("VisionEncoderDecoderConfig"),muo=o(" (Vision Encoder decoder model)"),fuo=l(),Ih=a("li"),ffe=a("strong"),guo=o("vision-text-dual-encoder"),huo=o(" \u2014 "),mq=a("a"),uuo=o("VisionTextDualEncoderConfig"),puo=o(" (VisionTextDualEncoder model)"),_uo=l(),Nh=a("li"),gfe=a("strong"),buo=o("visual_bert"),vuo=o(" \u2014 "),fq=a("a"),Fuo=o("VisualBertConfig"),Tuo=o(" (VisualBERT model)"),Muo=l(),qh=a("li"),hfe=a("strong"),Euo=o("vit"),Cuo=o(" \u2014 "),gq=a("a"),wuo=o("ViTConfig"),Auo=o(" (ViT model)"),Luo=l(),jh=a("li"),ufe=a("strong"),yuo=o("vit_mae"),xuo=o(" \u2014 "),hq=a("a"),$uo=o("ViTMAEConfig"),kuo=o(" (ViTMAE model)"),Suo=l(),Dh=a("li"),pfe=a("strong"),Ruo=o("vit_msn"),Puo=o(" \u2014 "),uq=a("a"),Buo=o("ViTMSNConfig"),Iuo=o(" (ViTMSN model)"),Nuo=l(),Gh=a("li"),_fe=a("strong"),quo=o("wav2vec2"),juo=o(" \u2014 "),pq=a("a"),Duo=o("Wav2Vec2Config"),Guo=o(" (Wav2Vec2 model)"),Ouo=l(),Oh=a("li"),bfe=a("strong"),Vuo=o("wav2vec2-conformer"),Xuo=o(" \u2014 "),_q=a("a"),zuo=o("Wav2Vec2ConformerConfig"),Quo=o(" (Wav2Vec2-Conformer model)"),Wuo=l(),Vh=a("li"),vfe=a("strong"),Uuo=o("wavlm"),Huo=o(" \u2014 "),bq=a("a"),Juo=o("WavLMConfig"),Yuo=o(" (WavLM model)"),Kuo=l(),Xh=a("li"),Ffe=a("strong"),Zuo=o("xclip"),epo=o(" \u2014 "),vq=a("a"),opo=o("XCLIPConfig"),rpo=o(" (X-CLIP model)"),tpo=l(),zh=a("li"),Tfe=a("strong"),apo=o("xglm"),npo=o(" \u2014 "),Fq=a("a"),spo=o("XGLMConfig"),lpo=o(" (XGLM model)"),ipo=l(),Qh=a("li"),Mfe=a("strong"),dpo=o("xlm"),cpo=o(" \u2014 "),Tq=a("a"),mpo=o("XLMConfig"),fpo=o(" (XLM model)"),gpo=l(),Wh=a("li"),Efe=a("strong"),hpo=o("xlm-prophetnet"),upo=o(" \u2014 "),Mq=a("a"),ppo=o("XLMProphetNetConfig"),_po=o(" (XLM-ProphetNet model)"),bpo=l(),Uh=a("li"),Cfe=a("strong"),vpo=o("xlm-roberta"),Fpo=o(" \u2014 "),Eq=a("a"),Tpo=o("XLMRobertaConfig"),Mpo=o(" (XLM-RoBERTa model)"),Epo=l(),Hh=a("li"),wfe=a("strong"),Cpo=o("xlm-roberta-xl"),wpo=o(" \u2014 "),Cq=a("a"),Apo=o("XLMRobertaXLConfig"),Lpo=o(" (XLM-RoBERTa-XL model)"),ypo=l(),Jh=a("li"),Afe=a("strong"),xpo=o("xlnet"),$po=o(" \u2014 "),wq=a("a"),kpo=o("XLNetConfig"),Spo=o(" (XLNet model)"),Rpo=l(),Yh=a("li"),Lfe=a("strong"),Ppo=o("yolos"),Bpo=o(" \u2014 "),Aq=a("a"),Ipo=o("YolosConfig"),Npo=o(" (YOLOS model)"),qpo=l(),Kh=a("li"),yfe=a("strong"),jpo=o("yoso"),Dpo=o(" \u2014 "),Lq=a("a"),Gpo=o("YosoConfig"),Opo=o(" (YOSO model)"),Vpo=l(),F(Zh.$$.fragment),Xpo=l(),eu=a("div"),F(nx.$$.fragment),zpo=l(),xfe=a("p"),Qpo=o("Register a new configuration for this class."),jZe=l(),gd=a("h2"),ou=a("a"),$fe=a("span"),F(sx.$$.fragment),Wpo=l(),kfe=a("span"),Upo=o("AutoTokenizer"),DZe=l(),ko=a("div"),F(lx.$$.fragment),Hpo=l(),ix=a("p"),Jpo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yq=a("a"),Ypo=o("AutoTokenizer.from_pretrained()"),Kpo=o(" class method."),Zpo=l(),dx=a("p"),e_o=o("This class cannot be instantiated directly using "),Sfe=a("code"),o_o=o("__init__()"),r_o=o(" (throws an error)."),t_o=l(),Br=a("div"),F(cx.$$.fragment),a_o=l(),Rfe=a("p"),n_o=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),s_o=l(),Ua=a("p"),l_o=o("The tokenizer class to instantiate is selected based on the "),Pfe=a("code"),i_o=o("model_type"),d_o=o(` property of the config object (either
passed as an argument or loaded from `),Bfe=a("code"),c_o=o("pretrained_model_name_or_path"),m_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=a("code"),f_o=o("pretrained_model_name_or_path"),g_o=o(":"),h_o=l(),k=a("ul"),ns=a("li"),Nfe=a("strong"),u_o=o("albert"),p_o=o(" \u2014 "),xq=a("a"),__o=o("AlbertTokenizer"),b_o=o(" or "),$q=a("a"),v_o=o("AlbertTokenizerFast"),F_o=o(" (ALBERT model)"),T_o=l(),ss=a("li"),qfe=a("strong"),M_o=o("bart"),E_o=o(" \u2014 "),kq=a("a"),C_o=o("BartTokenizer"),w_o=o(" or "),Sq=a("a"),A_o=o("BartTokenizerFast"),L_o=o(" (BART model)"),y_o=l(),ls=a("li"),jfe=a("strong"),x_o=o("barthez"),$_o=o(" \u2014 "),Rq=a("a"),k_o=o("BarthezTokenizer"),S_o=o(" or "),Pq=a("a"),R_o=o("BarthezTokenizerFast"),P_o=o(" (BARThez model)"),B_o=l(),ru=a("li"),Dfe=a("strong"),I_o=o("bartpho"),N_o=o(" \u2014 "),Bq=a("a"),q_o=o("BartphoTokenizer"),j_o=o(" (BARTpho model)"),D_o=l(),is=a("li"),Gfe=a("strong"),G_o=o("bert"),O_o=o(" \u2014 "),Iq=a("a"),V_o=o("BertTokenizer"),X_o=o(" or "),Nq=a("a"),z_o=o("BertTokenizerFast"),Q_o=o(" (BERT model)"),W_o=l(),tu=a("li"),Ofe=a("strong"),U_o=o("bert-generation"),H_o=o(" \u2014 "),qq=a("a"),J_o=o("BertGenerationTokenizer"),Y_o=o(" (Bert Generation model)"),K_o=l(),au=a("li"),Vfe=a("strong"),Z_o=o("bert-japanese"),e2o=o(" \u2014 "),jq=a("a"),o2o=o("BertJapaneseTokenizer"),r2o=o(" (BertJapanese model)"),t2o=l(),nu=a("li"),Xfe=a("strong"),a2o=o("bertweet"),n2o=o(" \u2014 "),Dq=a("a"),s2o=o("BertweetTokenizer"),l2o=o(" (BERTweet model)"),i2o=l(),ds=a("li"),zfe=a("strong"),d2o=o("big_bird"),c2o=o(" \u2014 "),Gq=a("a"),m2o=o("BigBirdTokenizer"),f2o=o(" or "),Oq=a("a"),g2o=o("BigBirdTokenizerFast"),h2o=o(" (BigBird model)"),u2o=l(),cs=a("li"),Qfe=a("strong"),p2o=o("bigbird_pegasus"),_2o=o(" \u2014 "),Vq=a("a"),b2o=o("PegasusTokenizer"),v2o=o(" or "),Xq=a("a"),F2o=o("PegasusTokenizerFast"),T2o=o(" (BigBird-Pegasus model)"),M2o=l(),ms=a("li"),Wfe=a("strong"),E2o=o("blenderbot"),C2o=o(" \u2014 "),zq=a("a"),w2o=o("BlenderbotTokenizer"),A2o=o(" or "),Qq=a("a"),L2o=o("BlenderbotTokenizerFast"),y2o=o(" (Blenderbot model)"),x2o=l(),su=a("li"),Ufe=a("strong"),$2o=o("blenderbot-small"),k2o=o(" \u2014 "),Wq=a("a"),S2o=o("BlenderbotSmallTokenizer"),R2o=o(" (BlenderbotSmall model)"),P2o=l(),lu=a("li"),Hfe=a("strong"),B2o=o("bloom"),I2o=o(" \u2014 "),Uq=a("a"),N2o=o("BloomTokenizerFast"),q2o=o(" (BLOOM model)"),j2o=l(),iu=a("li"),Jfe=a("strong"),D2o=o("byt5"),G2o=o(" \u2014 "),Hq=a("a"),O2o=o("ByT5Tokenizer"),V2o=o(" (ByT5 model)"),X2o=l(),fs=a("li"),Yfe=a("strong"),z2o=o("camembert"),Q2o=o(" \u2014 "),Jq=a("a"),W2o=o("CamembertTokenizer"),U2o=o(" or "),Yq=a("a"),H2o=o("CamembertTokenizerFast"),J2o=o(" (CamemBERT model)"),Y2o=l(),du=a("li"),Kfe=a("strong"),K2o=o("canine"),Z2o=o(" \u2014 "),Kq=a("a"),e1o=o("CanineTokenizer"),o1o=o(" (CANINE model)"),r1o=l(),gs=a("li"),Zfe=a("strong"),t1o=o("clip"),a1o=o(" \u2014 "),Zq=a("a"),n1o=o("CLIPTokenizer"),s1o=o(" or "),ej=a("a"),l1o=o("CLIPTokenizerFast"),i1o=o(" (CLIP model)"),d1o=l(),hs=a("li"),ege=a("strong"),c1o=o("codegen"),m1o=o(" \u2014 "),oj=a("a"),f1o=o("CodeGenTokenizer"),g1o=o(" or "),rj=a("a"),h1o=o("CodeGenTokenizerFast"),u1o=o(" (CodeGen model)"),p1o=l(),us=a("li"),oge=a("strong"),_1o=o("convbert"),b1o=o(" \u2014 "),tj=a("a"),v1o=o("ConvBertTokenizer"),F1o=o(" or "),aj=a("a"),T1o=o("ConvBertTokenizerFast"),M1o=o(" (ConvBERT model)"),E1o=l(),ps=a("li"),rge=a("strong"),C1o=o("cpm"),w1o=o(" \u2014 "),nj=a("a"),A1o=o("CpmTokenizer"),L1o=o(" or "),sj=a("a"),y1o=o("CpmTokenizerFast"),x1o=o(" (CPM model)"),$1o=l(),cu=a("li"),tge=a("strong"),k1o=o("ctrl"),S1o=o(" \u2014 "),lj=a("a"),R1o=o("CTRLTokenizer"),P1o=o(" (CTRL model)"),B1o=l(),_s=a("li"),age=a("strong"),I1o=o("data2vec-text"),N1o=o(" \u2014 "),ij=a("a"),q1o=o("RobertaTokenizer"),j1o=o(" or "),dj=a("a"),D1o=o("RobertaTokenizerFast"),G1o=o(" (Data2VecText model)"),O1o=l(),bs=a("li"),nge=a("strong"),V1o=o("deberta"),X1o=o(" \u2014 "),cj=a("a"),z1o=o("DebertaTokenizer"),Q1o=o(" or "),mj=a("a"),W1o=o("DebertaTokenizerFast"),U1o=o(" (DeBERTa model)"),H1o=l(),vs=a("li"),sge=a("strong"),J1o=o("deberta-v2"),Y1o=o(" \u2014 "),fj=a("a"),K1o=o("DebertaV2Tokenizer"),Z1o=o(" or "),gj=a("a"),ebo=o("DebertaV2TokenizerFast"),obo=o(" (DeBERTa-v2 model)"),rbo=l(),Fs=a("li"),lge=a("strong"),tbo=o("distilbert"),abo=o(" \u2014 "),hj=a("a"),nbo=o("DistilBertTokenizer"),sbo=o(" or "),uj=a("a"),lbo=o("DistilBertTokenizerFast"),ibo=o(" (DistilBERT model)"),dbo=l(),Ts=a("li"),ige=a("strong"),cbo=o("dpr"),mbo=o(" \u2014 "),pj=a("a"),fbo=o("DPRQuestionEncoderTokenizer"),gbo=o(" or "),_j=a("a"),hbo=o("DPRQuestionEncoderTokenizerFast"),ubo=o(" (DPR model)"),pbo=l(),Ms=a("li"),dge=a("strong"),_bo=o("electra"),bbo=o(" \u2014 "),bj=a("a"),vbo=o("ElectraTokenizer"),Fbo=o(" or "),vj=a("a"),Tbo=o("ElectraTokenizerFast"),Mbo=o(" (ELECTRA model)"),Ebo=l(),Es=a("li"),cge=a("strong"),Cbo=o("ernie"),wbo=o(" \u2014 "),Fj=a("a"),Abo=o("BertTokenizer"),Lbo=o(" or "),Tj=a("a"),ybo=o("BertTokenizerFast"),xbo=o(" (ERNIE model)"),$bo=l(),mu=a("li"),mge=a("strong"),kbo=o("flaubert"),Sbo=o(" \u2014 "),Mj=a("a"),Rbo=o("FlaubertTokenizer"),Pbo=o(" (FlauBERT model)"),Bbo=l(),Cs=a("li"),fge=a("strong"),Ibo=o("fnet"),Nbo=o(" \u2014 "),Ej=a("a"),qbo=o("FNetTokenizer"),jbo=o(" or "),Cj=a("a"),Dbo=o("FNetTokenizerFast"),Gbo=o(" (FNet model)"),Obo=l(),fu=a("li"),gge=a("strong"),Vbo=o("fsmt"),Xbo=o(" \u2014 "),wj=a("a"),zbo=o("FSMTTokenizer"),Qbo=o(" (FairSeq Machine-Translation model)"),Wbo=l(),ws=a("li"),hge=a("strong"),Ubo=o("funnel"),Hbo=o(" \u2014 "),Aj=a("a"),Jbo=o("FunnelTokenizer"),Ybo=o(" or "),Lj=a("a"),Kbo=o("FunnelTokenizerFast"),Zbo=o(" (Funnel Transformer model)"),evo=l(),As=a("li"),uge=a("strong"),ovo=o("gpt2"),rvo=o(" \u2014 "),yj=a("a"),tvo=o("GPT2Tokenizer"),avo=o(" or "),xj=a("a"),nvo=o("GPT2TokenizerFast"),svo=o(" (OpenAI GPT-2 model)"),lvo=l(),Ls=a("li"),pge=a("strong"),ivo=o("gpt_neo"),dvo=o(" \u2014 "),$j=a("a"),cvo=o("GPT2Tokenizer"),mvo=o(" or "),kj=a("a"),fvo=o("GPT2TokenizerFast"),gvo=o(" (GPT Neo model)"),hvo=l(),gu=a("li"),_ge=a("strong"),uvo=o("gpt_neox"),pvo=o(" \u2014 "),Sj=a("a"),_vo=o("GPTNeoXTokenizerFast"),bvo=o(" (GPT NeoX model)"),vvo=l(),hu=a("li"),bge=a("strong"),Fvo=o("gpt_neox_japanese"),Tvo=o(" \u2014 "),Rj=a("a"),Mvo=o("GPTNeoXJapaneseTokenizer"),Evo=o(" (GPT NeoX Japanese model)"),Cvo=l(),ys=a("li"),vge=a("strong"),wvo=o("gptj"),Avo=o(" \u2014 "),Pj=a("a"),Lvo=o("GPT2Tokenizer"),yvo=o(" or "),Bj=a("a"),xvo=o("GPT2TokenizerFast"),$vo=o(" (GPT-J model)"),kvo=l(),xs=a("li"),Fge=a("strong"),Svo=o("groupvit"),Rvo=o(" \u2014 "),Ij=a("a"),Pvo=o("CLIPTokenizer"),Bvo=o(" or "),Nj=a("a"),Ivo=o("CLIPTokenizerFast"),Nvo=o(" (GroupViT model)"),qvo=l(),$s=a("li"),Tge=a("strong"),jvo=o("herbert"),Dvo=o(" \u2014 "),qj=a("a"),Gvo=o("HerbertTokenizer"),Ovo=o(" or "),jj=a("a"),Vvo=o("HerbertTokenizerFast"),Xvo=o(" (HerBERT model)"),zvo=l(),uu=a("li"),Mge=a("strong"),Qvo=o("hubert"),Wvo=o(" \u2014 "),Dj=a("a"),Uvo=o("Wav2Vec2CTCTokenizer"),Hvo=o(" (Hubert model)"),Jvo=l(),ks=a("li"),Ege=a("strong"),Yvo=o("ibert"),Kvo=o(" \u2014 "),Gj=a("a"),Zvo=o("RobertaTokenizer"),eFo=o(" or "),Oj=a("a"),oFo=o("RobertaTokenizerFast"),rFo=o(" (I-BERT model)"),tFo=l(),Ss=a("li"),Cge=a("strong"),aFo=o("layoutlm"),nFo=o(" \u2014 "),Vj=a("a"),sFo=o("LayoutLMTokenizer"),lFo=o(" or "),Xj=a("a"),iFo=o("LayoutLMTokenizerFast"),dFo=o(" (LayoutLM model)"),cFo=l(),Rs=a("li"),wge=a("strong"),mFo=o("layoutlmv2"),fFo=o(" \u2014 "),zj=a("a"),gFo=o("LayoutLMv2Tokenizer"),hFo=o(" or "),Qj=a("a"),uFo=o("LayoutLMv2TokenizerFast"),pFo=o(" (LayoutLMv2 model)"),_Fo=l(),Ps=a("li"),Age=a("strong"),bFo=o("layoutlmv3"),vFo=o(" \u2014 "),Wj=a("a"),FFo=o("LayoutLMv3Tokenizer"),TFo=o(" or "),Uj=a("a"),MFo=o("LayoutLMv3TokenizerFast"),EFo=o(" (LayoutLMv3 model)"),CFo=l(),Bs=a("li"),Lge=a("strong"),wFo=o("layoutxlm"),AFo=o(" \u2014 "),Hj=a("a"),LFo=o("LayoutXLMTokenizer"),yFo=o(" or "),Jj=a("a"),xFo=o("LayoutXLMTokenizerFast"),$Fo=o(" (LayoutXLM model)"),kFo=l(),Is=a("li"),yge=a("strong"),SFo=o("led"),RFo=o(" \u2014 "),Yj=a("a"),PFo=o("LEDTokenizer"),BFo=o(" or "),Kj=a("a"),IFo=o("LEDTokenizerFast"),NFo=o(" (LED model)"),qFo=l(),Ns=a("li"),xge=a("strong"),jFo=o("longformer"),DFo=o(" \u2014 "),Zj=a("a"),GFo=o("LongformerTokenizer"),OFo=o(" or "),eD=a("a"),VFo=o("LongformerTokenizerFast"),XFo=o(" (Longformer model)"),zFo=l(),qs=a("li"),$ge=a("strong"),QFo=o("longt5"),WFo=o(" \u2014 "),oD=a("a"),UFo=o("T5Tokenizer"),HFo=o(" or "),rD=a("a"),JFo=o("T5TokenizerFast"),YFo=o(" (LongT5 model)"),KFo=l(),pu=a("li"),kge=a("strong"),ZFo=o("luke"),eTo=o(" \u2014 "),tD=a("a"),oTo=o("LukeTokenizer"),rTo=o(" (LUKE model)"),tTo=l(),js=a("li"),Sge=a("strong"),aTo=o("lxmert"),nTo=o(" \u2014 "),aD=a("a"),sTo=o("LxmertTokenizer"),lTo=o(" or "),nD=a("a"),iTo=o("LxmertTokenizerFast"),dTo=o(" (LXMERT model)"),cTo=l(),_u=a("li"),Rge=a("strong"),mTo=o("m2m_100"),fTo=o(" \u2014 "),sD=a("a"),gTo=o("M2M100Tokenizer"),hTo=o(" (M2M100 model)"),uTo=l(),bu=a("li"),Pge=a("strong"),pTo=o("marian"),_To=o(" \u2014 "),lD=a("a"),bTo=o("MarianTokenizer"),vTo=o(" (Marian model)"),FTo=l(),Ds=a("li"),Bge=a("strong"),TTo=o("mbart"),MTo=o(" \u2014 "),iD=a("a"),ETo=o("MBartTokenizer"),CTo=o(" or "),dD=a("a"),wTo=o("MBartTokenizerFast"),ATo=o(" (mBART model)"),LTo=l(),Gs=a("li"),Ige=a("strong"),yTo=o("mbart50"),xTo=o(" \u2014 "),cD=a("a"),$To=o("MBart50Tokenizer"),kTo=o(" or "),mD=a("a"),STo=o("MBart50TokenizerFast"),RTo=o(" (mBART-50 model)"),PTo=l(),Os=a("li"),Nge=a("strong"),BTo=o("megatron-bert"),ITo=o(" \u2014 "),fD=a("a"),NTo=o("BertTokenizer"),qTo=o(" or "),gD=a("a"),jTo=o("BertTokenizerFast"),DTo=o(" (Megatron-BERT model)"),GTo=l(),vu=a("li"),qge=a("strong"),OTo=o("mluke"),VTo=o(" \u2014 "),hD=a("a"),XTo=o("MLukeTokenizer"),zTo=o(" (mLUKE model)"),QTo=l(),Vs=a("li"),jge=a("strong"),WTo=o("mobilebert"),UTo=o(" \u2014 "),uD=a("a"),HTo=o("MobileBertTokenizer"),JTo=o(" or "),pD=a("a"),YTo=o("MobileBertTokenizerFast"),KTo=o(" (MobileBERT model)"),ZTo=l(),Xs=a("li"),Dge=a("strong"),eMo=o("mpnet"),oMo=o(" \u2014 "),_D=a("a"),rMo=o("MPNetTokenizer"),tMo=o(" or "),bD=a("a"),aMo=o("MPNetTokenizerFast"),nMo=o(" (MPNet model)"),sMo=l(),zs=a("li"),Gge=a("strong"),lMo=o("mt5"),iMo=o(" \u2014 "),vD=a("a"),dMo=o("MT5Tokenizer"),cMo=o(" or "),FD=a("a"),mMo=o("MT5TokenizerFast"),fMo=o(" (MT5 model)"),gMo=l(),Qs=a("li"),Oge=a("strong"),hMo=o("mvp"),uMo=o(" \u2014 "),TD=a("a"),pMo=o("MvpTokenizer"),_Mo=o(" or "),MD=a("a"),bMo=o("MvpTokenizerFast"),vMo=o(" (MVP model)"),FMo=l(),Ws=a("li"),Vge=a("strong"),TMo=o("nezha"),MMo=o(" \u2014 "),ED=a("a"),EMo=o("BertTokenizer"),CMo=o(" or "),CD=a("a"),wMo=o("BertTokenizerFast"),AMo=o(" (Nezha model)"),LMo=l(),Us=a("li"),Xge=a("strong"),yMo=o("nllb"),xMo=o(" \u2014 "),wD=a("a"),$Mo=o("NllbTokenizer"),kMo=o(" or "),AD=a("a"),SMo=o("NllbTokenizerFast"),RMo=o(" (NLLB model)"),PMo=l(),Hs=a("li"),zge=a("strong"),BMo=o("nystromformer"),IMo=o(" \u2014 "),LD=a("a"),NMo=o("AlbertTokenizer"),qMo=o(" or "),yD=a("a"),jMo=o("AlbertTokenizerFast"),DMo=o(" (Nystr\xF6mformer model)"),GMo=l(),Js=a("li"),Qge=a("strong"),OMo=o("openai-gpt"),VMo=o(" \u2014 "),xD=a("a"),XMo=o("OpenAIGPTTokenizer"),zMo=o(" or "),$D=a("a"),QMo=o("OpenAIGPTTokenizerFast"),WMo=o(" (OpenAI GPT model)"),UMo=l(),Fu=a("li"),Wge=a("strong"),HMo=o("opt"),JMo=o(" \u2014 "),kD=a("a"),YMo=o("GPT2Tokenizer"),KMo=o(" (OPT model)"),ZMo=l(),Ys=a("li"),Uge=a("strong"),eEo=o("owlvit"),oEo=o(" \u2014 "),SD=a("a"),rEo=o("CLIPTokenizer"),tEo=o(" or "),RD=a("a"),aEo=o("CLIPTokenizerFast"),nEo=o(" (OWL-ViT model)"),sEo=l(),Ks=a("li"),Hge=a("strong"),lEo=o("pegasus"),iEo=o(" \u2014 "),PD=a("a"),dEo=o("PegasusTokenizer"),cEo=o(" or "),BD=a("a"),mEo=o("PegasusTokenizerFast"),fEo=o(" (Pegasus model)"),gEo=l(),Tu=a("li"),Jge=a("strong"),hEo=o("perceiver"),uEo=o(" \u2014 "),ID=a("a"),pEo=o("PerceiverTokenizer"),_Eo=o(" (Perceiver model)"),bEo=l(),Mu=a("li"),Yge=a("strong"),vEo=o("phobert"),FEo=o(" \u2014 "),ND=a("a"),TEo=o("PhobertTokenizer"),MEo=o(" (PhoBERT model)"),EEo=l(),Eu=a("li"),Kge=a("strong"),CEo=o("plbart"),wEo=o(" \u2014 "),qD=a("a"),AEo=o("PLBartTokenizer"),LEo=o(" (PLBart model)"),yEo=l(),Cu=a("li"),Zge=a("strong"),xEo=o("prophetnet"),$Eo=o(" \u2014 "),jD=a("a"),kEo=o("ProphetNetTokenizer"),SEo=o(" (ProphetNet model)"),REo=l(),Zs=a("li"),ehe=a("strong"),PEo=o("qdqbert"),BEo=o(" \u2014 "),DD=a("a"),IEo=o("BertTokenizer"),NEo=o(" or "),GD=a("a"),qEo=o("BertTokenizerFast"),jEo=o(" (QDQBert model)"),DEo=l(),wu=a("li"),ohe=a("strong"),GEo=o("rag"),OEo=o(" \u2014 "),OD=a("a"),VEo=o("RagTokenizer"),XEo=o(" (RAG model)"),zEo=l(),el=a("li"),rhe=a("strong"),QEo=o("realm"),WEo=o(" \u2014 "),VD=a("a"),UEo=o("RealmTokenizer"),HEo=o(" or "),XD=a("a"),JEo=o("RealmTokenizerFast"),YEo=o(" (REALM model)"),KEo=l(),ol=a("li"),the=a("strong"),ZEo=o("reformer"),e4o=o(" \u2014 "),zD=a("a"),o4o=o("ReformerTokenizer"),r4o=o(" or "),QD=a("a"),t4o=o("ReformerTokenizerFast"),a4o=o(" (Reformer model)"),n4o=l(),rl=a("li"),ahe=a("strong"),s4o=o("rembert"),l4o=o(" \u2014 "),WD=a("a"),i4o=o("RemBertTokenizer"),d4o=o(" or "),UD=a("a"),c4o=o("RemBertTokenizerFast"),m4o=o(" (RemBERT model)"),f4o=l(),tl=a("li"),nhe=a("strong"),g4o=o("retribert"),h4o=o(" \u2014 "),HD=a("a"),u4o=o("RetriBertTokenizer"),p4o=o(" or "),JD=a("a"),_4o=o("RetriBertTokenizerFast"),b4o=o(" (RetriBERT model)"),v4o=l(),al=a("li"),she=a("strong"),F4o=o("roberta"),T4o=o(" \u2014 "),YD=a("a"),M4o=o("RobertaTokenizer"),E4o=o(" or "),KD=a("a"),C4o=o("RobertaTokenizerFast"),w4o=o(" (RoBERTa model)"),A4o=l(),nl=a("li"),lhe=a("strong"),L4o=o("roformer"),y4o=o(" \u2014 "),ZD=a("a"),x4o=o("RoFormerTokenizer"),$4o=o(" or "),eG=a("a"),k4o=o("RoFormerTokenizerFast"),S4o=o(" (RoFormer model)"),R4o=l(),Au=a("li"),ihe=a("strong"),P4o=o("speech_to_text"),B4o=o(" \u2014 "),oG=a("a"),I4o=o("Speech2TextTokenizer"),N4o=o(" (Speech2Text model)"),q4o=l(),Lu=a("li"),dhe=a("strong"),j4o=o("speech_to_text_2"),D4o=o(" \u2014 "),rG=a("a"),G4o=o("Speech2Text2Tokenizer"),O4o=o(" (Speech2Text2 model)"),V4o=l(),sl=a("li"),che=a("strong"),X4o=o("splinter"),z4o=o(" \u2014 "),tG=a("a"),Q4o=o("SplinterTokenizer"),W4o=o(" or "),aG=a("a"),U4o=o("SplinterTokenizerFast"),H4o=o(" (Splinter model)"),J4o=l(),ll=a("li"),mhe=a("strong"),Y4o=o("squeezebert"),K4o=o(" \u2014 "),nG=a("a"),Z4o=o("SqueezeBertTokenizer"),eCo=o(" or "),sG=a("a"),oCo=o("SqueezeBertTokenizerFast"),rCo=o(" (SqueezeBERT model)"),tCo=l(),il=a("li"),fhe=a("strong"),aCo=o("t5"),nCo=o(" \u2014 "),lG=a("a"),sCo=o("T5Tokenizer"),lCo=o(" or "),iG=a("a"),iCo=o("T5TokenizerFast"),dCo=o(" (T5 model)"),cCo=l(),yu=a("li"),ghe=a("strong"),mCo=o("tapas"),fCo=o(" \u2014 "),dG=a("a"),gCo=o("TapasTokenizer"),hCo=o(" (TAPAS model)"),uCo=l(),xu=a("li"),hhe=a("strong"),pCo=o("tapex"),_Co=o(" \u2014 "),cG=a("a"),bCo=o("TapexTokenizer"),vCo=o(" (TAPEX model)"),FCo=l(),$u=a("li"),uhe=a("strong"),TCo=o("transfo-xl"),MCo=o(" \u2014 "),mG=a("a"),ECo=o("TransfoXLTokenizer"),CCo=o(" (Transformer-XL model)"),wCo=l(),dl=a("li"),phe=a("strong"),ACo=o("vilt"),LCo=o(" \u2014 "),fG=a("a"),yCo=o("BertTokenizer"),xCo=o(" or "),gG=a("a"),$Co=o("BertTokenizerFast"),kCo=o(" (ViLT model)"),SCo=l(),cl=a("li"),_he=a("strong"),RCo=o("visual_bert"),PCo=o(" \u2014 "),hG=a("a"),BCo=o("BertTokenizer"),ICo=o(" or "),uG=a("a"),NCo=o("BertTokenizerFast"),qCo=o(" (VisualBERT model)"),jCo=l(),ku=a("li"),bhe=a("strong"),DCo=o("wav2vec2"),GCo=o(" \u2014 "),pG=a("a"),OCo=o("Wav2Vec2CTCTokenizer"),VCo=o(" (Wav2Vec2 model)"),XCo=l(),Su=a("li"),vhe=a("strong"),zCo=o("wav2vec2-conformer"),QCo=o(" \u2014 "),_G=a("a"),WCo=o("Wav2Vec2CTCTokenizer"),UCo=o(" (Wav2Vec2-Conformer model)"),HCo=l(),Ru=a("li"),Fhe=a("strong"),JCo=o("wav2vec2_phoneme"),YCo=o(" \u2014 "),bG=a("a"),KCo=o("Wav2Vec2PhonemeCTCTokenizer"),ZCo=o(" (Wav2Vec2Phoneme model)"),e3o=l(),ml=a("li"),The=a("strong"),o3o=o("xclip"),r3o=o(" \u2014 "),vG=a("a"),t3o=o("CLIPTokenizer"),a3o=o(" or "),FG=a("a"),n3o=o("CLIPTokenizerFast"),s3o=o(" (X-CLIP model)"),l3o=l(),fl=a("li"),Mhe=a("strong"),i3o=o("xglm"),d3o=o(" \u2014 "),TG=a("a"),c3o=o("XGLMTokenizer"),m3o=o(" or "),MG=a("a"),f3o=o("XGLMTokenizerFast"),g3o=o(" (XGLM model)"),h3o=l(),Pu=a("li"),Ehe=a("strong"),u3o=o("xlm"),p3o=o(" \u2014 "),EG=a("a"),_3o=o("XLMTokenizer"),b3o=o(" (XLM model)"),v3o=l(),Bu=a("li"),Che=a("strong"),F3o=o("xlm-prophetnet"),T3o=o(" \u2014 "),CG=a("a"),M3o=o("XLMProphetNetTokenizer"),E3o=o(" (XLM-ProphetNet model)"),C3o=l(),gl=a("li"),whe=a("strong"),w3o=o("xlm-roberta"),A3o=o(" \u2014 "),wG=a("a"),L3o=o("XLMRobertaTokenizer"),y3o=o(" or "),AG=a("a"),x3o=o("XLMRobertaTokenizerFast"),$3o=o(" (XLM-RoBERTa model)"),k3o=l(),hl=a("li"),Ahe=a("strong"),S3o=o("xlm-roberta-xl"),R3o=o(" \u2014 "),LG=a("a"),P3o=o("XLMRobertaTokenizer"),B3o=o(" or "),yG=a("a"),I3o=o("XLMRobertaTokenizerFast"),N3o=o(" (XLM-RoBERTa-XL model)"),q3o=l(),ul=a("li"),Lhe=a("strong"),j3o=o("xlnet"),D3o=o(" \u2014 "),xG=a("a"),G3o=o("XLNetTokenizer"),O3o=o(" or "),$G=a("a"),V3o=o("XLNetTokenizerFast"),X3o=o(" (XLNet model)"),z3o=l(),pl=a("li"),yhe=a("strong"),Q3o=o("yoso"),W3o=o(" \u2014 "),kG=a("a"),U3o=o("AlbertTokenizer"),H3o=o(" or "),SG=a("a"),J3o=o("AlbertTokenizerFast"),Y3o=o(" (YOSO model)"),K3o=l(),F(Iu.$$.fragment),Z3o=l(),Nu=a("div"),F(mx.$$.fragment),e5o=l(),xhe=a("p"),o5o=o("Register a new tokenizer in this mapping."),GZe=l(),hd=a("h2"),qu=a("a"),$he=a("span"),F(fx.$$.fragment),r5o=l(),khe=a("span"),t5o=o("AutoFeatureExtractor"),OZe=l(),So=a("div"),F(gx.$$.fragment),a5o=l(),hx=a("p"),n5o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),RG=a("a"),s5o=o("AutoFeatureExtractor.from_pretrained()"),l5o=o(" class method."),i5o=l(),ux=a("p"),d5o=o("This class cannot be instantiated directly using "),She=a("code"),c5o=o("__init__()"),m5o=o(" (throws an error)."),f5o=l(),Ye=a("div"),F(px.$$.fragment),g5o=l(),Rhe=a("p"),h5o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),u5o=l(),Ha=a("p"),p5o=o("The feature extractor class to instantiate is selected based on the "),Phe=a("code"),_5o=o("model_type"),b5o=o(` property of the config object
(either passed as an argument or loaded from `),Bhe=a("code"),v5o=o("pretrained_model_name_or_path"),F5o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ihe=a("code"),T5o=o("pretrained_model_name_or_path"),M5o=o(":"),E5o=l(),z=a("ul"),ju=a("li"),Nhe=a("strong"),C5o=o("beit"),w5o=o(" \u2014 "),PG=a("a"),A5o=o("BeitFeatureExtractor"),L5o=o(" (BEiT model)"),y5o=l(),Du=a("li"),qhe=a("strong"),x5o=o("clip"),$5o=o(" \u2014 "),BG=a("a"),k5o=o("CLIPFeatureExtractor"),S5o=o(" (CLIP model)"),R5o=l(),Gu=a("li"),jhe=a("strong"),P5o=o("conditional_detr"),B5o=o(" \u2014 "),IG=a("a"),I5o=o("ConditionalDetrFeatureExtractor"),N5o=o(" (Conditional DETR model)"),q5o=l(),Ou=a("li"),Dhe=a("strong"),j5o=o("convnext"),D5o=o(" \u2014 "),NG=a("a"),G5o=o("ConvNextFeatureExtractor"),O5o=o(" (ConvNeXT model)"),V5o=l(),Vu=a("li"),Ghe=a("strong"),X5o=o("cvt"),z5o=o(" \u2014 "),qG=a("a"),Q5o=o("ConvNextFeatureExtractor"),W5o=o(" (CvT model)"),U5o=l(),Xu=a("li"),Ohe=a("strong"),H5o=o("data2vec-audio"),J5o=o(" \u2014 "),jG=a("a"),Y5o=o("Wav2Vec2FeatureExtractor"),K5o=o(" (Data2VecAudio model)"),Z5o=l(),zu=a("li"),Vhe=a("strong"),e0o=o("data2vec-vision"),o0o=o(" \u2014 "),DG=a("a"),r0o=o("BeitFeatureExtractor"),t0o=o(" (Data2VecVision model)"),a0o=l(),Qu=a("li"),Xhe=a("strong"),n0o=o("deformable_detr"),s0o=o(" \u2014 "),GG=a("a"),l0o=o("DeformableDetrFeatureExtractor"),i0o=o(" (Deformable DETR model)"),d0o=l(),Wu=a("li"),zhe=a("strong"),c0o=o("deit"),m0o=o(" \u2014 "),OG=a("a"),f0o=o("DeiTFeatureExtractor"),g0o=o(" (DeiT model)"),h0o=l(),Uu=a("li"),Qhe=a("strong"),u0o=o("detr"),p0o=o(" \u2014 "),VG=a("a"),_0o=o("DetrFeatureExtractor"),b0o=o(" (DETR model)"),v0o=l(),Hu=a("li"),Whe=a("strong"),F0o=o("donut"),T0o=o(" \u2014 "),XG=a("a"),M0o=o("DonutFeatureExtractor"),E0o=o(" (Donut model)"),C0o=l(),Ju=a("li"),Uhe=a("strong"),w0o=o("dpt"),A0o=o(" \u2014 "),zG=a("a"),L0o=o("DPTFeatureExtractor"),y0o=o(" (DPT model)"),x0o=l(),Yu=a("li"),Hhe=a("strong"),$0o=o("flava"),k0o=o(" \u2014 "),QG=a("a"),S0o=o("FlavaFeatureExtractor"),R0o=o(" (FLAVA model)"),P0o=l(),Ku=a("li"),Jhe=a("strong"),B0o=o("glpn"),I0o=o(" \u2014 "),WG=a("a"),N0o=o("GLPNFeatureExtractor"),q0o=o(" (GLPN model)"),j0o=l(),Zu=a("li"),Yhe=a("strong"),D0o=o("groupvit"),G0o=o(" \u2014 "),UG=a("a"),O0o=o("CLIPFeatureExtractor"),V0o=o(" (GroupViT model)"),X0o=l(),ep=a("li"),Khe=a("strong"),z0o=o("hubert"),Q0o=o(" \u2014 "),HG=a("a"),W0o=o("Wav2Vec2FeatureExtractor"),U0o=o(" (Hubert model)"),H0o=l(),op=a("li"),Zhe=a("strong"),J0o=o("imagegpt"),Y0o=o(" \u2014 "),JG=a("a"),K0o=o("ImageGPTFeatureExtractor"),Z0o=o(" (ImageGPT model)"),ewo=l(),rp=a("li"),eue=a("strong"),owo=o("layoutlmv2"),rwo=o(" \u2014 "),YG=a("a"),two=o("LayoutLMv2FeatureExtractor"),awo=o(" (LayoutLMv2 model)"),nwo=l(),tp=a("li"),oue=a("strong"),swo=o("layoutlmv3"),lwo=o(" \u2014 "),KG=a("a"),iwo=o("LayoutLMv3FeatureExtractor"),dwo=o(" (LayoutLMv3 model)"),cwo=l(),ap=a("li"),rue=a("strong"),mwo=o("levit"),fwo=o(" \u2014 "),ZG=a("a"),gwo=o("LevitFeatureExtractor"),hwo=o(" (LeViT model)"),uwo=l(),np=a("li"),tue=a("strong"),pwo=o("maskformer"),_wo=o(" \u2014 "),eO=a("a"),bwo=o("MaskFormerFeatureExtractor"),vwo=o(" (MaskFormer model)"),Fwo=l(),sp=a("li"),aue=a("strong"),Two=o("mctct"),Mwo=o(" \u2014 "),oO=a("a"),Ewo=o("MCTCTFeatureExtractor"),Cwo=o(" (M-CTC-T model)"),wwo=l(),lp=a("li"),nue=a("strong"),Awo=o("mobilevit"),Lwo=o(" \u2014 "),rO=a("a"),ywo=o("MobileViTFeatureExtractor"),xwo=o(" (MobileViT model)"),$wo=l(),ip=a("li"),sue=a("strong"),kwo=o("owlvit"),Swo=o(" \u2014 "),tO=a("a"),Rwo=o("OwlViTFeatureExtractor"),Pwo=o(" (OWL-ViT model)"),Bwo=l(),dp=a("li"),lue=a("strong"),Iwo=o("perceiver"),Nwo=o(" \u2014 "),aO=a("a"),qwo=o("PerceiverFeatureExtractor"),jwo=o(" (Perceiver model)"),Dwo=l(),cp=a("li"),iue=a("strong"),Gwo=o("poolformer"),Owo=o(" \u2014 "),nO=a("a"),Vwo=o("PoolFormerFeatureExtractor"),Xwo=o(" (PoolFormer model)"),zwo=l(),mp=a("li"),due=a("strong"),Qwo=o("regnet"),Wwo=o(" \u2014 "),sO=a("a"),Uwo=o("ConvNextFeatureExtractor"),Hwo=o(" (RegNet model)"),Jwo=l(),fp=a("li"),cue=a("strong"),Ywo=o("resnet"),Kwo=o(" \u2014 "),lO=a("a"),Zwo=o("ConvNextFeatureExtractor"),eAo=o(" (ResNet model)"),oAo=l(),gp=a("li"),mue=a("strong"),rAo=o("segformer"),tAo=o(" \u2014 "),iO=a("a"),aAo=o("SegformerFeatureExtractor"),nAo=o(" (SegFormer model)"),sAo=l(),hp=a("li"),fue=a("strong"),lAo=o("speech_to_text"),iAo=o(" \u2014 "),dO=a("a"),dAo=o("Speech2TextFeatureExtractor"),cAo=o(" (Speech2Text model)"),mAo=l(),up=a("li"),gue=a("strong"),fAo=o("swin"),gAo=o(" \u2014 "),cO=a("a"),hAo=o("ViTFeatureExtractor"),uAo=o(" (Swin Transformer model)"),pAo=l(),pp=a("li"),hue=a("strong"),_Ao=o("swinv2"),bAo=o(" \u2014 "),mO=a("a"),vAo=o("ViTFeatureExtractor"),FAo=o(" (Swin Transformer V2 model)"),TAo=l(),_p=a("li"),uue=a("strong"),MAo=o("van"),EAo=o(" \u2014 "),fO=a("a"),CAo=o("ConvNextFeatureExtractor"),wAo=o(" (VAN model)"),AAo=l(),bp=a("li"),pue=a("strong"),LAo=o("videomae"),yAo=o(" \u2014 "),gO=a("a"),xAo=o("VideoMAEFeatureExtractor"),$Ao=o(" (VideoMAE model)"),kAo=l(),vp=a("li"),_ue=a("strong"),SAo=o("vilt"),RAo=o(" \u2014 "),hO=a("a"),PAo=o("ViltFeatureExtractor"),BAo=o(" (ViLT model)"),IAo=l(),Fp=a("li"),bue=a("strong"),NAo=o("vit"),qAo=o(" \u2014 "),uO=a("a"),jAo=o("ViTFeatureExtractor"),DAo=o(" (ViT model)"),GAo=l(),Tp=a("li"),vue=a("strong"),OAo=o("vit_mae"),VAo=o(" \u2014 "),pO=a("a"),XAo=o("ViTFeatureExtractor"),zAo=o(" (ViTMAE model)"),QAo=l(),Mp=a("li"),Fue=a("strong"),WAo=o("vit_msn"),UAo=o(" \u2014 "),_O=a("a"),HAo=o("ViTFeatureExtractor"),JAo=o(" (ViTMSN model)"),YAo=l(),Ep=a("li"),Tue=a("strong"),KAo=o("wav2vec2"),ZAo=o(" \u2014 "),bO=a("a"),e6o=o("Wav2Vec2FeatureExtractor"),o6o=o(" (Wav2Vec2 model)"),r6o=l(),Cp=a("li"),Mue=a("strong"),t6o=o("wav2vec2-conformer"),a6o=o(" \u2014 "),vO=a("a"),n6o=o("Wav2Vec2FeatureExtractor"),s6o=o(" (Wav2Vec2-Conformer model)"),l6o=l(),wp=a("li"),Eue=a("strong"),i6o=o("xclip"),d6o=o(" \u2014 "),FO=a("a"),c6o=o("CLIPFeatureExtractor"),m6o=o(" (X-CLIP model)"),f6o=l(),Ap=a("li"),Cue=a("strong"),g6o=o("yolos"),h6o=o(" \u2014 "),TO=a("a"),u6o=o("YolosFeatureExtractor"),p6o=o(" (YOLOS model)"),_6o=l(),F(Lp.$$.fragment),b6o=l(),F(yp.$$.fragment),v6o=l(),xp=a("div"),F(_x.$$.fragment),F6o=l(),wue=a("p"),T6o=o("Register a new feature extractor for this class."),VZe=l(),ud=a("h2"),$p=a("a"),Aue=a("span"),F(bx.$$.fragment),M6o=l(),Lue=a("span"),E6o=o("AutoProcessor"),XZe=l(),Ro=a("div"),F(vx.$$.fragment),C6o=l(),Fx=a("p"),w6o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MO=a("a"),A6o=o("AutoProcessor.from_pretrained()"),L6o=o(" class method."),y6o=l(),Tx=a("p"),x6o=o("This class cannot be instantiated directly using "),yue=a("code"),$6o=o("__init__()"),k6o=o(" (throws an error)."),S6o=l(),Ke=a("div"),F(Mx.$$.fragment),R6o=l(),xue=a("p"),P6o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),B6o=l(),pd=a("p"),I6o=o("The processor class to instantiate is selected based on the "),$ue=a("code"),N6o=o("model_type"),q6o=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),j6o=o("pretrained_model_name_or_path"),D6o=o(" if possible):"),G6o=l(),le=a("ul"),kp=a("li"),Sue=a("strong"),O6o=o("clip"),V6o=o(" \u2014 "),EO=a("a"),X6o=o("CLIPProcessor"),z6o=o(" (CLIP model)"),Q6o=l(),Sp=a("li"),Rue=a("strong"),W6o=o("donut"),U6o=o(" \u2014 "),CO=a("a"),H6o=o("DonutProcessor"),J6o=o(" (Donut model)"),Y6o=l(),Rp=a("li"),Pue=a("strong"),K6o=o("flava"),Z6o=o(" \u2014 "),wO=a("a"),e7o=o("FlavaProcessor"),o7o=o(" (FLAVA model)"),r7o=l(),Pp=a("li"),Bue=a("strong"),t7o=o("groupvit"),a7o=o(" \u2014 "),AO=a("a"),n7o=o("CLIPProcessor"),s7o=o(" (GroupViT model)"),l7o=l(),Bp=a("li"),Iue=a("strong"),i7o=o("layoutlmv2"),d7o=o(" \u2014 "),LO=a("a"),c7o=o("LayoutLMv2Processor"),m7o=o(" (LayoutLMv2 model)"),f7o=l(),Ip=a("li"),Nue=a("strong"),g7o=o("layoutlmv3"),h7o=o(" \u2014 "),yO=a("a"),u7o=o("LayoutLMv3Processor"),p7o=o(" (LayoutLMv3 model)"),_7o=l(),Np=a("li"),que=a("strong"),b7o=o("layoutxlm"),v7o=o(" \u2014 "),xO=a("a"),F7o=o("LayoutXLMProcessor"),T7o=o(" (LayoutXLM model)"),M7o=l(),qp=a("li"),jue=a("strong"),E7o=o("markuplm"),C7o=o(" \u2014 "),$O=a("a"),w7o=o("MarkupLMProcessor"),A7o=o(" (MarkupLM model)"),L7o=l(),jp=a("li"),Due=a("strong"),y7o=o("owlvit"),x7o=o(" \u2014 "),kO=a("a"),$7o=o("OwlViTProcessor"),k7o=o(" (OWL-ViT model)"),S7o=l(),Dp=a("li"),Gue=a("strong"),R7o=o("sew"),P7o=o(" \u2014 "),SO=a("a"),B7o=o("Wav2Vec2Processor"),I7o=o(" (SEW model)"),N7o=l(),Gp=a("li"),Oue=a("strong"),q7o=o("sew-d"),j7o=o(" \u2014 "),RO=a("a"),D7o=o("Wav2Vec2Processor"),G7o=o(" (SEW-D model)"),O7o=l(),Op=a("li"),Vue=a("strong"),V7o=o("speech_to_text"),X7o=o(" \u2014 "),PO=a("a"),z7o=o("Speech2TextProcessor"),Q7o=o(" (Speech2Text model)"),W7o=l(),Vp=a("li"),Xue=a("strong"),U7o=o("speech_to_text_2"),H7o=o(" \u2014 "),BO=a("a"),J7o=o("Speech2Text2Processor"),Y7o=o(" (Speech2Text2 model)"),K7o=l(),Xp=a("li"),zue=a("strong"),Z7o=o("trocr"),eLo=o(" \u2014 "),IO=a("a"),oLo=o("TrOCRProcessor"),rLo=o(" (TrOCR model)"),tLo=l(),zp=a("li"),Que=a("strong"),aLo=o("unispeech"),nLo=o(" \u2014 "),NO=a("a"),sLo=o("Wav2Vec2Processor"),lLo=o(" (UniSpeech model)"),iLo=l(),Qp=a("li"),Wue=a("strong"),dLo=o("unispeech-sat"),cLo=o(" \u2014 "),qO=a("a"),mLo=o("Wav2Vec2Processor"),fLo=o(" (UniSpeechSat model)"),gLo=l(),Wp=a("li"),Uue=a("strong"),hLo=o("vilt"),uLo=o(" \u2014 "),jO=a("a"),pLo=o("ViltProcessor"),_Lo=o(" (ViLT model)"),bLo=l(),Up=a("li"),Hue=a("strong"),vLo=o("vision-text-dual-encoder"),FLo=o(" \u2014 "),DO=a("a"),TLo=o("VisionTextDualEncoderProcessor"),MLo=o(" (VisionTextDualEncoder model)"),ELo=l(),Hp=a("li"),Jue=a("strong"),CLo=o("wav2vec2"),wLo=o(" \u2014 "),GO=a("a"),ALo=o("Wav2Vec2Processor"),LLo=o(" (Wav2Vec2 model)"),yLo=l(),Jp=a("li"),Yue=a("strong"),xLo=o("wav2vec2-conformer"),$Lo=o(" \u2014 "),OO=a("a"),kLo=o("Wav2Vec2Processor"),SLo=o(" (Wav2Vec2-Conformer model)"),RLo=l(),Yp=a("li"),Kue=a("strong"),PLo=o("wavlm"),BLo=o(" \u2014 "),VO=a("a"),ILo=o("Wav2Vec2Processor"),NLo=o(" (WavLM model)"),qLo=l(),Kp=a("li"),Zue=a("strong"),jLo=o("xclip"),DLo=o(" \u2014 "),XO=a("a"),GLo=o("CLIPProcessor"),OLo=o(" (X-CLIP model)"),VLo=l(),F(Zp.$$.fragment),XLo=l(),F(e_.$$.fragment),zLo=l(),o_=a("div"),F(Ex.$$.fragment),QLo=l(),epe=a("p"),WLo=o("Register a new processor for this class."),zZe=l(),_d=a("h2"),r_=a("a"),ope=a("span"),F(Cx.$$.fragment),ULo=l(),rpe=a("span"),HLo=o("AutoModel"),QZe=l(),Po=a("div"),F(wx.$$.fragment),JLo=l(),bd=a("p"),YLo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zO=a("a"),KLo=o("from_pretrained()"),ZLo=o(" class method or the "),QO=a("a"),eyo=o("from_config()"),oyo=o(` class
method.`),ryo=l(),Ax=a("p"),tyo=o("This class cannot be instantiated directly using "),tpe=a("code"),ayo=o("__init__()"),nyo=o(" (throws an error)."),syo=l(),_t=a("div"),F(Lx.$$.fragment),lyo=l(),ape=a("p"),iyo=o("Instantiates one of the base model classes of the library from a configuration."),dyo=l(),vd=a("p"),cyo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),myo=o("not"),fyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),gyo=o("from_pretrained()"),hyo=o(" to load the model weights."),uyo=l(),F(t_.$$.fragment),pyo=l(),Ze=a("div"),F(yx.$$.fragment),_yo=l(),spe=a("p"),byo=o("Instantiate one of the base model classes of the library from a pretrained model."),vyo=l(),Ja=a("p"),Fyo=o("The model class to instantiate is selected based on the "),lpe=a("code"),Tyo=o("model_type"),Myo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),Eyo=o("pretrained_model_name_or_path"),Cyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),wyo=o("pretrained_model_name_or_path"),Ayo=o(":"),Lyo=l(),y=a("ul"),a_=a("li"),cpe=a("strong"),yyo=o("albert"),xyo=o(" \u2014 "),UO=a("a"),$yo=o("AlbertModel"),kyo=o(" (ALBERT model)"),Syo=l(),n_=a("li"),mpe=a("strong"),Ryo=o("bart"),Pyo=o(" \u2014 "),HO=a("a"),Byo=o("BartModel"),Iyo=o(" (BART model)"),Nyo=l(),s_=a("li"),fpe=a("strong"),qyo=o("beit"),jyo=o(" \u2014 "),JO=a("a"),Dyo=o("BeitModel"),Gyo=o(" (BEiT model)"),Oyo=l(),l_=a("li"),gpe=a("strong"),Vyo=o("bert"),Xyo=o(" \u2014 "),YO=a("a"),zyo=o("BertModel"),Qyo=o(" (BERT model)"),Wyo=l(),i_=a("li"),hpe=a("strong"),Uyo=o("bert-generation"),Hyo=o(" \u2014 "),KO=a("a"),Jyo=o("BertGenerationEncoder"),Yyo=o(" (Bert Generation model)"),Kyo=l(),d_=a("li"),upe=a("strong"),Zyo=o("big_bird"),e8o=o(" \u2014 "),ZO=a("a"),o8o=o("BigBirdModel"),r8o=o(" (BigBird model)"),t8o=l(),c_=a("li"),ppe=a("strong"),a8o=o("bigbird_pegasus"),n8o=o(" \u2014 "),eV=a("a"),s8o=o("BigBirdPegasusModel"),l8o=o(" (BigBird-Pegasus model)"),i8o=l(),m_=a("li"),_pe=a("strong"),d8o=o("blenderbot"),c8o=o(" \u2014 "),oV=a("a"),m8o=o("BlenderbotModel"),f8o=o(" (Blenderbot model)"),g8o=l(),f_=a("li"),bpe=a("strong"),h8o=o("blenderbot-small"),u8o=o(" \u2014 "),rV=a("a"),p8o=o("BlenderbotSmallModel"),_8o=o(" (BlenderbotSmall model)"),b8o=l(),g_=a("li"),vpe=a("strong"),v8o=o("bloom"),F8o=o(" \u2014 "),tV=a("a"),T8o=o("BloomModel"),M8o=o(" (BLOOM model)"),E8o=l(),h_=a("li"),Fpe=a("strong"),C8o=o("camembert"),w8o=o(" \u2014 "),aV=a("a"),A8o=o("CamembertModel"),L8o=o(" (CamemBERT model)"),y8o=l(),u_=a("li"),Tpe=a("strong"),x8o=o("canine"),$8o=o(" \u2014 "),nV=a("a"),k8o=o("CanineModel"),S8o=o(" (CANINE model)"),R8o=l(),p_=a("li"),Mpe=a("strong"),P8o=o("clip"),B8o=o(" \u2014 "),sV=a("a"),I8o=o("CLIPModel"),N8o=o(" (CLIP model)"),q8o=l(),__=a("li"),Epe=a("strong"),j8o=o("codegen"),D8o=o(" \u2014 "),lV=a("a"),G8o=o("CodeGenModel"),O8o=o(" (CodeGen model)"),V8o=l(),b_=a("li"),Cpe=a("strong"),X8o=o("conditional_detr"),z8o=o(" \u2014 "),iV=a("a"),Q8o=o("ConditionalDetrModel"),W8o=o(" (Conditional DETR model)"),U8o=l(),v_=a("li"),wpe=a("strong"),H8o=o("convbert"),J8o=o(" \u2014 "),dV=a("a"),Y8o=o("ConvBertModel"),K8o=o(" (ConvBERT model)"),Z8o=l(),F_=a("li"),Ape=a("strong"),e9o=o("convnext"),o9o=o(" \u2014 "),cV=a("a"),r9o=o("ConvNextModel"),t9o=o(" (ConvNeXT model)"),a9o=l(),T_=a("li"),Lpe=a("strong"),n9o=o("ctrl"),s9o=o(" \u2014 "),mV=a("a"),l9o=o("CTRLModel"),i9o=o(" (CTRL model)"),d9o=l(),M_=a("li"),ype=a("strong"),c9o=o("cvt"),m9o=o(" \u2014 "),fV=a("a"),f9o=o("CvtModel"),g9o=o(" (CvT model)"),h9o=l(),E_=a("li"),xpe=a("strong"),u9o=o("data2vec-audio"),p9o=o(" \u2014 "),gV=a("a"),_9o=o("Data2VecAudioModel"),b9o=o(" (Data2VecAudio model)"),v9o=l(),C_=a("li"),$pe=a("strong"),F9o=o("data2vec-text"),T9o=o(" \u2014 "),hV=a("a"),M9o=o("Data2VecTextModel"),E9o=o(" (Data2VecText model)"),C9o=l(),w_=a("li"),kpe=a("strong"),w9o=o("data2vec-vision"),A9o=o(" \u2014 "),uV=a("a"),L9o=o("Data2VecVisionModel"),y9o=o(" (Data2VecVision model)"),x9o=l(),A_=a("li"),Spe=a("strong"),$9o=o("deberta"),k9o=o(" \u2014 "),pV=a("a"),S9o=o("DebertaModel"),R9o=o(" (DeBERTa model)"),P9o=l(),L_=a("li"),Rpe=a("strong"),B9o=o("deberta-v2"),I9o=o(" \u2014 "),_V=a("a"),N9o=o("DebertaV2Model"),q9o=o(" (DeBERTa-v2 model)"),j9o=l(),y_=a("li"),Ppe=a("strong"),D9o=o("decision_transformer"),G9o=o(" \u2014 "),bV=a("a"),O9o=o("DecisionTransformerModel"),V9o=o(" (Decision Transformer model)"),X9o=l(),x_=a("li"),Bpe=a("strong"),z9o=o("deformable_detr"),Q9o=o(" \u2014 "),vV=a("a"),W9o=o("DeformableDetrModel"),U9o=o(" (Deformable DETR model)"),H9o=l(),$_=a("li"),Ipe=a("strong"),J9o=o("deit"),Y9o=o(" \u2014 "),FV=a("a"),K9o=o("DeiTModel"),Z9o=o(" (DeiT model)"),exo=l(),k_=a("li"),Npe=a("strong"),oxo=o("detr"),rxo=o(" \u2014 "),TV=a("a"),txo=o("DetrModel"),axo=o(" (DETR model)"),nxo=l(),S_=a("li"),qpe=a("strong"),sxo=o("distilbert"),lxo=o(" \u2014 "),MV=a("a"),ixo=o("DistilBertModel"),dxo=o(" (DistilBERT model)"),cxo=l(),R_=a("li"),jpe=a("strong"),mxo=o("donut-swin"),fxo=o(" \u2014 "),EV=a("a"),gxo=o("DonutSwinModel"),hxo=o(" (DonutSwin model)"),uxo=l(),P_=a("li"),Dpe=a("strong"),pxo=o("dpr"),_xo=o(" \u2014 "),CV=a("a"),bxo=o("DPRQuestionEncoder"),vxo=o(" (DPR model)"),Fxo=l(),B_=a("li"),Gpe=a("strong"),Txo=o("dpt"),Mxo=o(" \u2014 "),wV=a("a"),Exo=o("DPTModel"),Cxo=o(" (DPT model)"),wxo=l(),I_=a("li"),Ope=a("strong"),Axo=o("electra"),Lxo=o(" \u2014 "),AV=a("a"),yxo=o("ElectraModel"),xxo=o(" (ELECTRA model)"),$xo=l(),N_=a("li"),Vpe=a("strong"),kxo=o("ernie"),Sxo=o(" \u2014 "),LV=a("a"),Rxo=o("ErnieModel"),Pxo=o(" (ERNIE model)"),Bxo=l(),q_=a("li"),Xpe=a("strong"),Ixo=o("esm"),Nxo=o(" \u2014 "),yV=a("a"),qxo=o("EsmModel"),jxo=o(" (ESM model)"),Dxo=l(),j_=a("li"),zpe=a("strong"),Gxo=o("flaubert"),Oxo=o(" \u2014 "),xV=a("a"),Vxo=o("FlaubertModel"),Xxo=o(" (FlauBERT model)"),zxo=l(),D_=a("li"),Qpe=a("strong"),Qxo=o("flava"),Wxo=o(" \u2014 "),$V=a("a"),Uxo=o("FlavaModel"),Hxo=o(" (FLAVA model)"),Jxo=l(),G_=a("li"),Wpe=a("strong"),Yxo=o("fnet"),Kxo=o(" \u2014 "),kV=a("a"),Zxo=o("FNetModel"),e$o=o(" (FNet model)"),o$o=l(),O_=a("li"),Upe=a("strong"),r$o=o("fsmt"),t$o=o(" \u2014 "),SV=a("a"),a$o=o("FSMTModel"),n$o=o(" (FairSeq Machine-Translation model)"),s$o=l(),_l=a("li"),Hpe=a("strong"),l$o=o("funnel"),i$o=o(" \u2014 "),RV=a("a"),d$o=o("FunnelModel"),c$o=o(" or "),PV=a("a"),m$o=o("FunnelBaseModel"),f$o=o(" (Funnel Transformer model)"),g$o=l(),V_=a("li"),Jpe=a("strong"),h$o=o("glpn"),u$o=o(" \u2014 "),BV=a("a"),p$o=o("GLPNModel"),_$o=o(" (GLPN model)"),b$o=l(),X_=a("li"),Ype=a("strong"),v$o=o("gpt2"),F$o=o(" \u2014 "),IV=a("a"),T$o=o("GPT2Model"),M$o=o(" (OpenAI GPT-2 model)"),E$o=l(),z_=a("li"),Kpe=a("strong"),C$o=o("gpt_neo"),w$o=o(" \u2014 "),NV=a("a"),A$o=o("GPTNeoModel"),L$o=o(" (GPT Neo model)"),y$o=l(),Q_=a("li"),Zpe=a("strong"),x$o=o("gpt_neox"),$$o=o(" \u2014 "),qV=a("a"),k$o=o("GPTNeoXModel"),S$o=o(" (GPT NeoX model)"),R$o=l(),W_=a("li"),e_e=a("strong"),P$o=o("gpt_neox_japanese"),B$o=o(" \u2014 "),jV=a("a"),I$o=o("GPTNeoXJapaneseModel"),N$o=o(" (GPT NeoX Japanese model)"),q$o=l(),U_=a("li"),o_e=a("strong"),j$o=o("gptj"),D$o=o(" \u2014 "),DV=a("a"),G$o=o("GPTJModel"),O$o=o(" (GPT-J model)"),V$o=l(),H_=a("li"),r_e=a("strong"),X$o=o("groupvit"),z$o=o(" \u2014 "),GV=a("a"),Q$o=o("GroupViTModel"),W$o=o(" (GroupViT model)"),U$o=l(),J_=a("li"),t_e=a("strong"),H$o=o("hubert"),J$o=o(" \u2014 "),OV=a("a"),Y$o=o("HubertModel"),K$o=o(" (Hubert model)"),Z$o=l(),Y_=a("li"),a_e=a("strong"),eko=o("ibert"),oko=o(" \u2014 "),VV=a("a"),rko=o("IBertModel"),tko=o(" (I-BERT model)"),ako=l(),K_=a("li"),n_e=a("strong"),nko=o("imagegpt"),sko=o(" \u2014 "),XV=a("a"),lko=o("ImageGPTModel"),iko=o(" (ImageGPT model)"),dko=l(),Z_=a("li"),s_e=a("strong"),cko=o("layoutlm"),mko=o(" \u2014 "),zV=a("a"),fko=o("LayoutLMModel"),gko=o(" (LayoutLM model)"),hko=l(),e2=a("li"),l_e=a("strong"),uko=o("layoutlmv2"),pko=o(" \u2014 "),QV=a("a"),_ko=o("LayoutLMv2Model"),bko=o(" (LayoutLMv2 model)"),vko=l(),o2=a("li"),i_e=a("strong"),Fko=o("layoutlmv3"),Tko=o(" \u2014 "),WV=a("a"),Mko=o("LayoutLMv3Model"),Eko=o(" (LayoutLMv3 model)"),Cko=l(),r2=a("li"),d_e=a("strong"),wko=o("led"),Ako=o(" \u2014 "),UV=a("a"),Lko=o("LEDModel"),yko=o(" (LED model)"),xko=l(),t2=a("li"),c_e=a("strong"),$ko=o("levit"),kko=o(" \u2014 "),HV=a("a"),Sko=o("LevitModel"),Rko=o(" (LeViT model)"),Pko=l(),a2=a("li"),m_e=a("strong"),Bko=o("longformer"),Iko=o(" \u2014 "),JV=a("a"),Nko=o("LongformerModel"),qko=o(" (Longformer model)"),jko=l(),n2=a("li"),f_e=a("strong"),Dko=o("longt5"),Gko=o(" \u2014 "),YV=a("a"),Oko=o("LongT5Model"),Vko=o(" (LongT5 model)"),Xko=l(),s2=a("li"),g_e=a("strong"),zko=o("luke"),Qko=o(" \u2014 "),KV=a("a"),Wko=o("LukeModel"),Uko=o(" (LUKE model)"),Hko=l(),l2=a("li"),h_e=a("strong"),Jko=o("lxmert"),Yko=o(" \u2014 "),ZV=a("a"),Kko=o("LxmertModel"),Zko=o(" (LXMERT model)"),eSo=l(),i2=a("li"),u_e=a("strong"),oSo=o("m2m_100"),rSo=o(" \u2014 "),eX=a("a"),tSo=o("M2M100Model"),aSo=o(" (M2M100 model)"),nSo=l(),d2=a("li"),p_e=a("strong"),sSo=o("marian"),lSo=o(" \u2014 "),oX=a("a"),iSo=o("MarianModel"),dSo=o(" (Marian model)"),cSo=l(),c2=a("li"),__e=a("strong"),mSo=o("markuplm"),fSo=o(" \u2014 "),rX=a("a"),gSo=o("MarkupLMModel"),hSo=o(" (MarkupLM model)"),uSo=l(),m2=a("li"),b_e=a("strong"),pSo=o("maskformer"),_So=o(" \u2014 "),tX=a("a"),bSo=o("MaskFormerModel"),vSo=o(" (MaskFormer model)"),FSo=l(),f2=a("li"),v_e=a("strong"),TSo=o("mbart"),MSo=o(" \u2014 "),aX=a("a"),ESo=o("MBartModel"),CSo=o(" (mBART model)"),wSo=l(),g2=a("li"),F_e=a("strong"),ASo=o("mctct"),LSo=o(" \u2014 "),nX=a("a"),ySo=o("MCTCTModel"),xSo=o(" (M-CTC-T model)"),$So=l(),h2=a("li"),T_e=a("strong"),kSo=o("megatron-bert"),SSo=o(" \u2014 "),sX=a("a"),RSo=o("MegatronBertModel"),PSo=o(" (Megatron-BERT model)"),BSo=l(),u2=a("li"),M_e=a("strong"),ISo=o("mobilebert"),NSo=o(" \u2014 "),lX=a("a"),qSo=o("MobileBertModel"),jSo=o(" (MobileBERT model)"),DSo=l(),p2=a("li"),E_e=a("strong"),GSo=o("mobilevit"),OSo=o(" \u2014 "),iX=a("a"),VSo=o("MobileViTModel"),XSo=o(" (MobileViT model)"),zSo=l(),_2=a("li"),C_e=a("strong"),QSo=o("mpnet"),WSo=o(" \u2014 "),dX=a("a"),USo=o("MPNetModel"),HSo=o(" (MPNet model)"),JSo=l(),b2=a("li"),w_e=a("strong"),YSo=o("mt5"),KSo=o(" \u2014 "),cX=a("a"),ZSo=o("MT5Model"),eRo=o(" (MT5 model)"),oRo=l(),v2=a("li"),A_e=a("strong"),rRo=o("mvp"),tRo=o(" \u2014 "),mX=a("a"),aRo=o("MvpModel"),nRo=o(" (MVP model)"),sRo=l(),F2=a("li"),L_e=a("strong"),lRo=o("nezha"),iRo=o(" \u2014 "),fX=a("a"),dRo=o("NezhaModel"),cRo=o(" (Nezha model)"),mRo=l(),T2=a("li"),y_e=a("strong"),fRo=o("nllb"),gRo=o(" \u2014 "),gX=a("a"),hRo=o("M2M100Model"),uRo=o(" (NLLB model)"),pRo=l(),M2=a("li"),x_e=a("strong"),_Ro=o("nystromformer"),bRo=o(" \u2014 "),hX=a("a"),vRo=o("NystromformerModel"),FRo=o(" (Nystr\xF6mformer model)"),TRo=l(),E2=a("li"),$_e=a("strong"),MRo=o("openai-gpt"),ERo=o(" \u2014 "),uX=a("a"),CRo=o("OpenAIGPTModel"),wRo=o(" (OpenAI GPT model)"),ARo=l(),C2=a("li"),k_e=a("strong"),LRo=o("opt"),yRo=o(" \u2014 "),pX=a("a"),xRo=o("OPTModel"),$Ro=o(" (OPT model)"),kRo=l(),w2=a("li"),S_e=a("strong"),SRo=o("owlvit"),RRo=o(" \u2014 "),_X=a("a"),PRo=o("OwlViTModel"),BRo=o(" (OWL-ViT model)"),IRo=l(),A2=a("li"),R_e=a("strong"),NRo=o("pegasus"),qRo=o(" \u2014 "),bX=a("a"),jRo=o("PegasusModel"),DRo=o(" (Pegasus model)"),GRo=l(),L2=a("li"),P_e=a("strong"),ORo=o("pegasus_x"),VRo=o(" \u2014 "),vX=a("a"),XRo=o("PegasusXModel"),zRo=o(" (PEGASUS-X model)"),QRo=l(),y2=a("li"),B_e=a("strong"),WRo=o("perceiver"),URo=o(" \u2014 "),FX=a("a"),HRo=o("PerceiverModel"),JRo=o(" (Perceiver model)"),YRo=l(),x2=a("li"),I_e=a("strong"),KRo=o("plbart"),ZRo=o(" \u2014 "),TX=a("a"),ePo=o("PLBartModel"),oPo=o(" (PLBart model)"),rPo=l(),$2=a("li"),N_e=a("strong"),tPo=o("poolformer"),aPo=o(" \u2014 "),MX=a("a"),nPo=o("PoolFormerModel"),sPo=o(" (PoolFormer model)"),lPo=l(),k2=a("li"),q_e=a("strong"),iPo=o("prophetnet"),dPo=o(" \u2014 "),EX=a("a"),cPo=o("ProphetNetModel"),mPo=o(" (ProphetNet model)"),fPo=l(),S2=a("li"),j_e=a("strong"),gPo=o("qdqbert"),hPo=o(" \u2014 "),CX=a("a"),uPo=o("QDQBertModel"),pPo=o(" (QDQBert model)"),_Po=l(),R2=a("li"),D_e=a("strong"),bPo=o("reformer"),vPo=o(" \u2014 "),wX=a("a"),FPo=o("ReformerModel"),TPo=o(" (Reformer model)"),MPo=l(),P2=a("li"),G_e=a("strong"),EPo=o("regnet"),CPo=o(" \u2014 "),AX=a("a"),wPo=o("RegNetModel"),APo=o(" (RegNet model)"),LPo=l(),B2=a("li"),O_e=a("strong"),yPo=o("rembert"),xPo=o(" \u2014 "),LX=a("a"),$Po=o("RemBertModel"),kPo=o(" (RemBERT model)"),SPo=l(),I2=a("li"),V_e=a("strong"),RPo=o("resnet"),PPo=o(" \u2014 "),yX=a("a"),BPo=o("ResNetModel"),IPo=o(" (ResNet model)"),NPo=l(),N2=a("li"),X_e=a("strong"),qPo=o("retribert"),jPo=o(" \u2014 "),xX=a("a"),DPo=o("RetriBertModel"),GPo=o(" (RetriBERT model)"),OPo=l(),q2=a("li"),z_e=a("strong"),VPo=o("roberta"),XPo=o(" \u2014 "),$X=a("a"),zPo=o("RobertaModel"),QPo=o(" (RoBERTa model)"),WPo=l(),j2=a("li"),Q_e=a("strong"),UPo=o("roformer"),HPo=o(" \u2014 "),kX=a("a"),JPo=o("RoFormerModel"),YPo=o(" (RoFormer model)"),KPo=l(),D2=a("li"),W_e=a("strong"),ZPo=o("segformer"),eBo=o(" \u2014 "),SX=a("a"),oBo=o("SegformerModel"),rBo=o(" (SegFormer model)"),tBo=l(),G2=a("li"),U_e=a("strong"),aBo=o("sew"),nBo=o(" \u2014 "),RX=a("a"),sBo=o("SEWModel"),lBo=o(" (SEW model)"),iBo=l(),O2=a("li"),H_e=a("strong"),dBo=o("sew-d"),cBo=o(" \u2014 "),PX=a("a"),mBo=o("SEWDModel"),fBo=o(" (SEW-D model)"),gBo=l(),V2=a("li"),J_e=a("strong"),hBo=o("speech_to_text"),uBo=o(" \u2014 "),BX=a("a"),pBo=o("Speech2TextModel"),_Bo=o(" (Speech2Text model)"),bBo=l(),X2=a("li"),Y_e=a("strong"),vBo=o("splinter"),FBo=o(" \u2014 "),IX=a("a"),TBo=o("SplinterModel"),MBo=o(" (Splinter model)"),EBo=l(),z2=a("li"),K_e=a("strong"),CBo=o("squeezebert"),wBo=o(" \u2014 "),NX=a("a"),ABo=o("SqueezeBertModel"),LBo=o(" (SqueezeBERT model)"),yBo=l(),Q2=a("li"),Z_e=a("strong"),xBo=o("swin"),$Bo=o(" \u2014 "),qX=a("a"),kBo=o("SwinModel"),SBo=o(" (Swin Transformer model)"),RBo=l(),W2=a("li"),e2e=a("strong"),PBo=o("swinv2"),BBo=o(" \u2014 "),jX=a("a"),IBo=o("Swinv2Model"),NBo=o(" (Swin Transformer V2 model)"),qBo=l(),U2=a("li"),o2e=a("strong"),jBo=o("t5"),DBo=o(" \u2014 "),DX=a("a"),GBo=o("T5Model"),OBo=o(" (T5 model)"),VBo=l(),H2=a("li"),r2e=a("strong"),XBo=o("tapas"),zBo=o(" \u2014 "),GX=a("a"),QBo=o("TapasModel"),WBo=o(" (TAPAS model)"),UBo=l(),J2=a("li"),t2e=a("strong"),HBo=o("trajectory_transformer"),JBo=o(" \u2014 "),OX=a("a"),YBo=o("TrajectoryTransformerModel"),KBo=o(" (Trajectory Transformer model)"),ZBo=l(),Y2=a("li"),a2e=a("strong"),eIo=o("transfo-xl"),oIo=o(" \u2014 "),VX=a("a"),rIo=o("TransfoXLModel"),tIo=o(" (Transformer-XL model)"),aIo=l(),K2=a("li"),n2e=a("strong"),nIo=o("unispeech"),sIo=o(" \u2014 "),XX=a("a"),lIo=o("UniSpeechModel"),iIo=o(" (UniSpeech model)"),dIo=l(),Z2=a("li"),s2e=a("strong"),cIo=o("unispeech-sat"),mIo=o(" \u2014 "),zX=a("a"),fIo=o("UniSpeechSatModel"),gIo=o(" (UniSpeechSat model)"),hIo=l(),e1=a("li"),l2e=a("strong"),uIo=o("van"),pIo=o(" \u2014 "),QX=a("a"),_Io=o("VanModel"),bIo=o(" (VAN model)"),vIo=l(),o1=a("li"),i2e=a("strong"),FIo=o("videomae"),TIo=o(" \u2014 "),WX=a("a"),MIo=o("VideoMAEModel"),EIo=o(" (VideoMAE model)"),CIo=l(),r1=a("li"),d2e=a("strong"),wIo=o("vilt"),AIo=o(" \u2014 "),UX=a("a"),LIo=o("ViltModel"),yIo=o(" (ViLT model)"),xIo=l(),t1=a("li"),c2e=a("strong"),$Io=o("vision-text-dual-encoder"),kIo=o(" \u2014 "),HX=a("a"),SIo=o("VisionTextDualEncoderModel"),RIo=o(" (VisionTextDualEncoder model)"),PIo=l(),a1=a("li"),m2e=a("strong"),BIo=o("visual_bert"),IIo=o(" \u2014 "),JX=a("a"),NIo=o("VisualBertModel"),qIo=o(" (VisualBERT model)"),jIo=l(),n1=a("li"),f2e=a("strong"),DIo=o("vit"),GIo=o(" \u2014 "),YX=a("a"),OIo=o("ViTModel"),VIo=o(" (ViT model)"),XIo=l(),s1=a("li"),g2e=a("strong"),zIo=o("vit_mae"),QIo=o(" \u2014 "),KX=a("a"),WIo=o("ViTMAEModel"),UIo=o(" (ViTMAE model)"),HIo=l(),l1=a("li"),h2e=a("strong"),JIo=o("vit_msn"),YIo=o(" \u2014 "),ZX=a("a"),KIo=o("ViTMSNModel"),ZIo=o(" (ViTMSN model)"),eNo=l(),i1=a("li"),u2e=a("strong"),oNo=o("wav2vec2"),rNo=o(" \u2014 "),ez=a("a"),tNo=o("Wav2Vec2Model"),aNo=o(" (Wav2Vec2 model)"),nNo=l(),d1=a("li"),p2e=a("strong"),sNo=o("wav2vec2-conformer"),lNo=o(" \u2014 "),oz=a("a"),iNo=o("Wav2Vec2ConformerModel"),dNo=o(" (Wav2Vec2-Conformer model)"),cNo=l(),c1=a("li"),_2e=a("strong"),mNo=o("wavlm"),fNo=o(" \u2014 "),rz=a("a"),gNo=o("WavLMModel"),hNo=o(" (WavLM model)"),uNo=l(),m1=a("li"),b2e=a("strong"),pNo=o("xclip"),_No=o(" \u2014 "),tz=a("a"),bNo=o("XCLIPModel"),vNo=o(" (X-CLIP model)"),FNo=l(),f1=a("li"),v2e=a("strong"),TNo=o("xglm"),MNo=o(" \u2014 "),az=a("a"),ENo=o("XGLMModel"),CNo=o(" (XGLM model)"),wNo=l(),g1=a("li"),F2e=a("strong"),ANo=o("xlm"),LNo=o(" \u2014 "),nz=a("a"),yNo=o("XLMModel"),xNo=o(" (XLM model)"),$No=l(),h1=a("li"),T2e=a("strong"),kNo=o("xlm-prophetnet"),SNo=o(" \u2014 "),sz=a("a"),RNo=o("XLMProphetNetModel"),PNo=o(" (XLM-ProphetNet model)"),BNo=l(),u1=a("li"),M2e=a("strong"),INo=o("xlm-roberta"),NNo=o(" \u2014 "),lz=a("a"),qNo=o("XLMRobertaModel"),jNo=o(" (XLM-RoBERTa model)"),DNo=l(),p1=a("li"),E2e=a("strong"),GNo=o("xlm-roberta-xl"),ONo=o(" \u2014 "),iz=a("a"),VNo=o("XLMRobertaXLModel"),XNo=o(" (XLM-RoBERTa-XL model)"),zNo=l(),_1=a("li"),C2e=a("strong"),QNo=o("xlnet"),WNo=o(" \u2014 "),dz=a("a"),UNo=o("XLNetModel"),HNo=o(" (XLNet model)"),JNo=l(),b1=a("li"),w2e=a("strong"),YNo=o("yolos"),KNo=o(" \u2014 "),cz=a("a"),ZNo=o("YolosModel"),eqo=o(" (YOLOS model)"),oqo=l(),v1=a("li"),A2e=a("strong"),rqo=o("yoso"),tqo=o(" \u2014 "),mz=a("a"),aqo=o("YosoModel"),nqo=o(" (YOSO model)"),sqo=l(),F1=a("p"),lqo=o("The model is set in evaluation mode by default using "),L2e=a("code"),iqo=o("model.eval()"),dqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y2e=a("code"),cqo=o("model.train()"),mqo=l(),F(T1.$$.fragment),WZe=l(),Fd=a("h2"),M1=a("a"),x2e=a("span"),F(xx.$$.fragment),fqo=l(),$2e=a("span"),gqo=o("AutoModelForPreTraining"),UZe=l(),Bo=a("div"),F($x.$$.fragment),hqo=l(),Td=a("p"),uqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fz=a("a"),pqo=o("from_pretrained()"),_qo=o(" class method or the "),gz=a("a"),bqo=o("from_config()"),vqo=o(` class
method.`),Fqo=l(),kx=a("p"),Tqo=o("This class cannot be instantiated directly using "),k2e=a("code"),Mqo=o("__init__()"),Eqo=o(" (throws an error)."),Cqo=l(),bt=a("div"),F(Sx.$$.fragment),wqo=l(),S2e=a("p"),Aqo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lqo=l(),Md=a("p"),yqo=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),xqo=o("not"),$qo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=a("a"),kqo=o("from_pretrained()"),Sqo=o(" to load the model weights."),Rqo=l(),F(E1.$$.fragment),Pqo=l(),eo=a("div"),F(Rx.$$.fragment),Bqo=l(),P2e=a("p"),Iqo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Nqo=l(),Ya=a("p"),qqo=o("The model class to instantiate is selected based on the "),B2e=a("code"),jqo=o("model_type"),Dqo=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),Gqo=o("pretrained_model_name_or_path"),Oqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),Vqo=o("pretrained_model_name_or_path"),Xqo=o(":"),zqo=l(),G=a("ul"),C1=a("li"),q2e=a("strong"),Qqo=o("albert"),Wqo=o(" \u2014 "),uz=a("a"),Uqo=o("AlbertForPreTraining"),Hqo=o(" (ALBERT model)"),Jqo=l(),w1=a("li"),j2e=a("strong"),Yqo=o("bart"),Kqo=o(" \u2014 "),pz=a("a"),Zqo=o("BartForConditionalGeneration"),ejo=o(" (BART model)"),ojo=l(),A1=a("li"),D2e=a("strong"),rjo=o("bert"),tjo=o(" \u2014 "),_z=a("a"),ajo=o("BertForPreTraining"),njo=o(" (BERT model)"),sjo=l(),L1=a("li"),G2e=a("strong"),ljo=o("big_bird"),ijo=o(" \u2014 "),bz=a("a"),djo=o("BigBirdForPreTraining"),cjo=o(" (BigBird model)"),mjo=l(),y1=a("li"),O2e=a("strong"),fjo=o("bloom"),gjo=o(" \u2014 "),vz=a("a"),hjo=o("BloomForCausalLM"),ujo=o(" (BLOOM model)"),pjo=l(),x1=a("li"),V2e=a("strong"),_jo=o("camembert"),bjo=o(" \u2014 "),Fz=a("a"),vjo=o("CamembertForMaskedLM"),Fjo=o(" (CamemBERT model)"),Tjo=l(),$1=a("li"),X2e=a("strong"),Mjo=o("ctrl"),Ejo=o(" \u2014 "),Tz=a("a"),Cjo=o("CTRLLMHeadModel"),wjo=o(" (CTRL model)"),Ajo=l(),k1=a("li"),z2e=a("strong"),Ljo=o("data2vec-text"),yjo=o(" \u2014 "),Mz=a("a"),xjo=o("Data2VecTextForMaskedLM"),$jo=o(" (Data2VecText model)"),kjo=l(),S1=a("li"),Q2e=a("strong"),Sjo=o("deberta"),Rjo=o(" \u2014 "),Ez=a("a"),Pjo=o("DebertaForMaskedLM"),Bjo=o(" (DeBERTa model)"),Ijo=l(),R1=a("li"),W2e=a("strong"),Njo=o("deberta-v2"),qjo=o(" \u2014 "),Cz=a("a"),jjo=o("DebertaV2ForMaskedLM"),Djo=o(" (DeBERTa-v2 model)"),Gjo=l(),P1=a("li"),U2e=a("strong"),Ojo=o("distilbert"),Vjo=o(" \u2014 "),wz=a("a"),Xjo=o("DistilBertForMaskedLM"),zjo=o(" (DistilBERT model)"),Qjo=l(),B1=a("li"),H2e=a("strong"),Wjo=o("electra"),Ujo=o(" \u2014 "),Az=a("a"),Hjo=o("ElectraForPreTraining"),Jjo=o(" (ELECTRA model)"),Yjo=l(),I1=a("li"),J2e=a("strong"),Kjo=o("ernie"),Zjo=o(" \u2014 "),Lz=a("a"),eDo=o("ErnieForPreTraining"),oDo=o(" (ERNIE model)"),rDo=l(),N1=a("li"),Y2e=a("strong"),tDo=o("flaubert"),aDo=o(" \u2014 "),yz=a("a"),nDo=o("FlaubertWithLMHeadModel"),sDo=o(" (FlauBERT model)"),lDo=l(),q1=a("li"),K2e=a("strong"),iDo=o("flava"),dDo=o(" \u2014 "),xz=a("a"),cDo=o("FlavaForPreTraining"),mDo=o(" (FLAVA model)"),fDo=l(),j1=a("li"),Z2e=a("strong"),gDo=o("fnet"),hDo=o(" \u2014 "),$z=a("a"),uDo=o("FNetForPreTraining"),pDo=o(" (FNet model)"),_Do=l(),D1=a("li"),e1e=a("strong"),bDo=o("fsmt"),vDo=o(" \u2014 "),kz=a("a"),FDo=o("FSMTForConditionalGeneration"),TDo=o(" (FairSeq Machine-Translation model)"),MDo=l(),G1=a("li"),o1e=a("strong"),EDo=o("funnel"),CDo=o(" \u2014 "),Sz=a("a"),wDo=o("FunnelForPreTraining"),ADo=o(" (Funnel Transformer model)"),LDo=l(),O1=a("li"),r1e=a("strong"),yDo=o("gpt2"),xDo=o(" \u2014 "),Rz=a("a"),$Do=o("GPT2LMHeadModel"),kDo=o(" (OpenAI GPT-2 model)"),SDo=l(),V1=a("li"),t1e=a("strong"),RDo=o("ibert"),PDo=o(" \u2014 "),Pz=a("a"),BDo=o("IBertForMaskedLM"),IDo=o(" (I-BERT model)"),NDo=l(),X1=a("li"),a1e=a("strong"),qDo=o("layoutlm"),jDo=o(" \u2014 "),Bz=a("a"),DDo=o("LayoutLMForMaskedLM"),GDo=o(" (LayoutLM model)"),ODo=l(),z1=a("li"),n1e=a("strong"),VDo=o("longformer"),XDo=o(" \u2014 "),Iz=a("a"),zDo=o("LongformerForMaskedLM"),QDo=o(" (Longformer model)"),WDo=l(),Q1=a("li"),s1e=a("strong"),UDo=o("luke"),HDo=o(" \u2014 "),Nz=a("a"),JDo=o("LukeForMaskedLM"),YDo=o(" (LUKE model)"),KDo=l(),W1=a("li"),l1e=a("strong"),ZDo=o("lxmert"),eGo=o(" \u2014 "),qz=a("a"),oGo=o("LxmertForPreTraining"),rGo=o(" (LXMERT model)"),tGo=l(),U1=a("li"),i1e=a("strong"),aGo=o("megatron-bert"),nGo=o(" \u2014 "),jz=a("a"),sGo=o("MegatronBertForPreTraining"),lGo=o(" (Megatron-BERT model)"),iGo=l(),H1=a("li"),d1e=a("strong"),dGo=o("mobilebert"),cGo=o(" \u2014 "),Dz=a("a"),mGo=o("MobileBertForPreTraining"),fGo=o(" (MobileBERT model)"),gGo=l(),J1=a("li"),c1e=a("strong"),hGo=o("mpnet"),uGo=o(" \u2014 "),Gz=a("a"),pGo=o("MPNetForMaskedLM"),_Go=o(" (MPNet model)"),bGo=l(),Y1=a("li"),m1e=a("strong"),vGo=o("mvp"),FGo=o(" \u2014 "),Oz=a("a"),TGo=o("MvpForConditionalGeneration"),MGo=o(" (MVP model)"),EGo=l(),K1=a("li"),f1e=a("strong"),CGo=o("nezha"),wGo=o(" \u2014 "),Vz=a("a"),AGo=o("NezhaForPreTraining"),LGo=o(" (Nezha model)"),yGo=l(),Z1=a("li"),g1e=a("strong"),xGo=o("openai-gpt"),$Go=o(" \u2014 "),Xz=a("a"),kGo=o("OpenAIGPTLMHeadModel"),SGo=o(" (OpenAI GPT model)"),RGo=l(),eb=a("li"),h1e=a("strong"),PGo=o("retribert"),BGo=o(" \u2014 "),zz=a("a"),IGo=o("RetriBertModel"),NGo=o(" (RetriBERT model)"),qGo=l(),ob=a("li"),u1e=a("strong"),jGo=o("roberta"),DGo=o(" \u2014 "),Qz=a("a"),GGo=o("RobertaForMaskedLM"),OGo=o(" (RoBERTa model)"),VGo=l(),rb=a("li"),p1e=a("strong"),XGo=o("splinter"),zGo=o(" \u2014 "),Wz=a("a"),QGo=o("SplinterForPreTraining"),WGo=o(" (Splinter model)"),UGo=l(),tb=a("li"),_1e=a("strong"),HGo=o("squeezebert"),JGo=o(" \u2014 "),Uz=a("a"),YGo=o("SqueezeBertForMaskedLM"),KGo=o(" (SqueezeBERT model)"),ZGo=l(),ab=a("li"),b1e=a("strong"),eOo=o("t5"),oOo=o(" \u2014 "),Hz=a("a"),rOo=o("T5ForConditionalGeneration"),tOo=o(" (T5 model)"),aOo=l(),nb=a("li"),v1e=a("strong"),nOo=o("tapas"),sOo=o(" \u2014 "),Jz=a("a"),lOo=o("TapasForMaskedLM"),iOo=o(" (TAPAS model)"),dOo=l(),sb=a("li"),F1e=a("strong"),cOo=o("transfo-xl"),mOo=o(" \u2014 "),Yz=a("a"),fOo=o("TransfoXLLMHeadModel"),gOo=o(" (Transformer-XL model)"),hOo=l(),lb=a("li"),T1e=a("strong"),uOo=o("unispeech"),pOo=o(" \u2014 "),Kz=a("a"),_Oo=o("UniSpeechForPreTraining"),bOo=o(" (UniSpeech model)"),vOo=l(),ib=a("li"),M1e=a("strong"),FOo=o("unispeech-sat"),TOo=o(" \u2014 "),Zz=a("a"),MOo=o("UniSpeechSatForPreTraining"),EOo=o(" (UniSpeechSat model)"),COo=l(),db=a("li"),E1e=a("strong"),wOo=o("videomae"),AOo=o(" \u2014 "),eQ=a("a"),LOo=o("VideoMAEForPreTraining"),yOo=o(" (VideoMAE model)"),xOo=l(),cb=a("li"),C1e=a("strong"),$Oo=o("visual_bert"),kOo=o(" \u2014 "),oQ=a("a"),SOo=o("VisualBertForPreTraining"),ROo=o(" (VisualBERT model)"),POo=l(),mb=a("li"),w1e=a("strong"),BOo=o("vit_mae"),IOo=o(" \u2014 "),rQ=a("a"),NOo=o("ViTMAEForPreTraining"),qOo=o(" (ViTMAE model)"),jOo=l(),fb=a("li"),A1e=a("strong"),DOo=o("wav2vec2"),GOo=o(" \u2014 "),tQ=a("a"),OOo=o("Wav2Vec2ForPreTraining"),VOo=o(" (Wav2Vec2 model)"),XOo=l(),gb=a("li"),L1e=a("strong"),zOo=o("wav2vec2-conformer"),QOo=o(" \u2014 "),aQ=a("a"),WOo=o("Wav2Vec2ConformerForPreTraining"),UOo=o(" (Wav2Vec2-Conformer model)"),HOo=l(),hb=a("li"),y1e=a("strong"),JOo=o("xlm"),YOo=o(" \u2014 "),nQ=a("a"),KOo=o("XLMWithLMHeadModel"),ZOo=o(" (XLM model)"),eVo=l(),ub=a("li"),x1e=a("strong"),oVo=o("xlm-roberta"),rVo=o(" \u2014 "),sQ=a("a"),tVo=o("XLMRobertaForMaskedLM"),aVo=o(" (XLM-RoBERTa model)"),nVo=l(),pb=a("li"),$1e=a("strong"),sVo=o("xlm-roberta-xl"),lVo=o(" \u2014 "),lQ=a("a"),iVo=o("XLMRobertaXLForMaskedLM"),dVo=o(" (XLM-RoBERTa-XL model)"),cVo=l(),_b=a("li"),k1e=a("strong"),mVo=o("xlnet"),fVo=o(" \u2014 "),iQ=a("a"),gVo=o("XLNetLMHeadModel"),hVo=o(" (XLNet model)"),uVo=l(),bb=a("p"),pVo=o("The model is set in evaluation mode by default using "),S1e=a("code"),_Vo=o("model.eval()"),bVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R1e=a("code"),vVo=o("model.train()"),FVo=l(),F(vb.$$.fragment),HZe=l(),Ed=a("h2"),Fb=a("a"),P1e=a("span"),F(Px.$$.fragment),TVo=l(),B1e=a("span"),MVo=o("AutoModelForCausalLM"),JZe=l(),Io=a("div"),F(Bx.$$.fragment),EVo=l(),Cd=a("p"),CVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dQ=a("a"),wVo=o("from_pretrained()"),AVo=o(" class method or the "),cQ=a("a"),LVo=o("from_config()"),yVo=o(` class
method.`),xVo=l(),Ix=a("p"),$Vo=o("This class cannot be instantiated directly using "),I1e=a("code"),kVo=o("__init__()"),SVo=o(" (throws an error)."),RVo=l(),vt=a("div"),F(Nx.$$.fragment),PVo=l(),N1e=a("p"),BVo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),IVo=l(),wd=a("p"),NVo=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),qVo=o("not"),jVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=a("a"),DVo=o("from_pretrained()"),GVo=o(" to load the model weights."),OVo=l(),F(Tb.$$.fragment),VVo=l(),oo=a("div"),F(qx.$$.fragment),XVo=l(),j1e=a("p"),zVo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QVo=l(),Ka=a("p"),WVo=o("The model class to instantiate is selected based on the "),D1e=a("code"),UVo=o("model_type"),HVo=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),JVo=o("pretrained_model_name_or_path"),YVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(":"),eXo=l(),Q=a("ul"),Mb=a("li"),V1e=a("strong"),oXo=o("bart"),rXo=o(" \u2014 "),fQ=a("a"),tXo=o("BartForCausalLM"),aXo=o(" (BART model)"),nXo=l(),Eb=a("li"),X1e=a("strong"),sXo=o("bert"),lXo=o(" \u2014 "),gQ=a("a"),iXo=o("BertLMHeadModel"),dXo=o(" (BERT model)"),cXo=l(),Cb=a("li"),z1e=a("strong"),mXo=o("bert-generation"),fXo=o(" \u2014 "),hQ=a("a"),gXo=o("BertGenerationDecoder"),hXo=o(" (Bert Generation model)"),uXo=l(),wb=a("li"),Q1e=a("strong"),pXo=o("big_bird"),_Xo=o(" \u2014 "),uQ=a("a"),bXo=o("BigBirdForCausalLM"),vXo=o(" (BigBird model)"),FXo=l(),Ab=a("li"),W1e=a("strong"),TXo=o("bigbird_pegasus"),MXo=o(" \u2014 "),pQ=a("a"),EXo=o("BigBirdPegasusForCausalLM"),CXo=o(" (BigBird-Pegasus model)"),wXo=l(),Lb=a("li"),U1e=a("strong"),AXo=o("blenderbot"),LXo=o(" \u2014 "),_Q=a("a"),yXo=o("BlenderbotForCausalLM"),xXo=o(" (Blenderbot model)"),$Xo=l(),yb=a("li"),H1e=a("strong"),kXo=o("blenderbot-small"),SXo=o(" \u2014 "),bQ=a("a"),RXo=o("BlenderbotSmallForCausalLM"),PXo=o(" (BlenderbotSmall model)"),BXo=l(),xb=a("li"),J1e=a("strong"),IXo=o("bloom"),NXo=o(" \u2014 "),vQ=a("a"),qXo=o("BloomForCausalLM"),jXo=o(" (BLOOM model)"),DXo=l(),$b=a("li"),Y1e=a("strong"),GXo=o("camembert"),OXo=o(" \u2014 "),FQ=a("a"),VXo=o("CamembertForCausalLM"),XXo=o(" (CamemBERT model)"),zXo=l(),kb=a("li"),K1e=a("strong"),QXo=o("codegen"),WXo=o(" \u2014 "),TQ=a("a"),UXo=o("CodeGenForCausalLM"),HXo=o(" (CodeGen model)"),JXo=l(),Sb=a("li"),Z1e=a("strong"),YXo=o("ctrl"),KXo=o(" \u2014 "),MQ=a("a"),ZXo=o("CTRLLMHeadModel"),ezo=o(" (CTRL model)"),ozo=l(),Rb=a("li"),ebe=a("strong"),rzo=o("data2vec-text"),tzo=o(" \u2014 "),EQ=a("a"),azo=o("Data2VecTextForCausalLM"),nzo=o(" (Data2VecText model)"),szo=l(),Pb=a("li"),obe=a("strong"),lzo=o("electra"),izo=o(" \u2014 "),CQ=a("a"),dzo=o("ElectraForCausalLM"),czo=o(" (ELECTRA model)"),mzo=l(),Bb=a("li"),rbe=a("strong"),fzo=o("ernie"),gzo=o(" \u2014 "),wQ=a("a"),hzo=o("ErnieForCausalLM"),uzo=o(" (ERNIE model)"),pzo=l(),Ib=a("li"),tbe=a("strong"),_zo=o("gpt2"),bzo=o(" \u2014 "),AQ=a("a"),vzo=o("GPT2LMHeadModel"),Fzo=o(" (OpenAI GPT-2 model)"),Tzo=l(),Nb=a("li"),abe=a("strong"),Mzo=o("gpt_neo"),Ezo=o(" \u2014 "),LQ=a("a"),Czo=o("GPTNeoForCausalLM"),wzo=o(" (GPT Neo model)"),Azo=l(),qb=a("li"),nbe=a("strong"),Lzo=o("gpt_neox"),yzo=o(" \u2014 "),yQ=a("a"),xzo=o("GPTNeoXForCausalLM"),$zo=o(" (GPT NeoX model)"),kzo=l(),jb=a("li"),sbe=a("strong"),Szo=o("gpt_neox_japanese"),Rzo=o(" \u2014 "),xQ=a("a"),Pzo=o("GPTNeoXJapaneseForCausalLM"),Bzo=o(" (GPT NeoX Japanese model)"),Izo=l(),Db=a("li"),lbe=a("strong"),Nzo=o("gptj"),qzo=o(" \u2014 "),$Q=a("a"),jzo=o("GPTJForCausalLM"),Dzo=o(" (GPT-J model)"),Gzo=l(),Gb=a("li"),ibe=a("strong"),Ozo=o("marian"),Vzo=o(" \u2014 "),kQ=a("a"),Xzo=o("MarianForCausalLM"),zzo=o(" (Marian model)"),Qzo=l(),Ob=a("li"),dbe=a("strong"),Wzo=o("mbart"),Uzo=o(" \u2014 "),SQ=a("a"),Hzo=o("MBartForCausalLM"),Jzo=o(" (mBART model)"),Yzo=l(),Vb=a("li"),cbe=a("strong"),Kzo=o("megatron-bert"),Zzo=o(" \u2014 "),RQ=a("a"),eQo=o("MegatronBertForCausalLM"),oQo=o(" (Megatron-BERT model)"),rQo=l(),Xb=a("li"),mbe=a("strong"),tQo=o("mvp"),aQo=o(" \u2014 "),PQ=a("a"),nQo=o("MvpForCausalLM"),sQo=o(" (MVP model)"),lQo=l(),zb=a("li"),fbe=a("strong"),iQo=o("openai-gpt"),dQo=o(" \u2014 "),BQ=a("a"),cQo=o("OpenAIGPTLMHeadModel"),mQo=o(" (OpenAI GPT model)"),fQo=l(),Qb=a("li"),gbe=a("strong"),gQo=o("opt"),hQo=o(" \u2014 "),IQ=a("a"),uQo=o("OPTForCausalLM"),pQo=o(" (OPT model)"),_Qo=l(),Wb=a("li"),hbe=a("strong"),bQo=o("pegasus"),vQo=o(" \u2014 "),NQ=a("a"),FQo=o("PegasusForCausalLM"),TQo=o(" (Pegasus model)"),MQo=l(),Ub=a("li"),ube=a("strong"),EQo=o("plbart"),CQo=o(" \u2014 "),qQ=a("a"),wQo=o("PLBartForCausalLM"),AQo=o(" (PLBart model)"),LQo=l(),Hb=a("li"),pbe=a("strong"),yQo=o("prophetnet"),xQo=o(" \u2014 "),jQ=a("a"),$Qo=o("ProphetNetForCausalLM"),kQo=o(" (ProphetNet model)"),SQo=l(),Jb=a("li"),_be=a("strong"),RQo=o("qdqbert"),PQo=o(" \u2014 "),DQ=a("a"),BQo=o("QDQBertLMHeadModel"),IQo=o(" (QDQBert model)"),NQo=l(),Yb=a("li"),bbe=a("strong"),qQo=o("reformer"),jQo=o(" \u2014 "),GQ=a("a"),DQo=o("ReformerModelWithLMHead"),GQo=o(" (Reformer model)"),OQo=l(),Kb=a("li"),vbe=a("strong"),VQo=o("rembert"),XQo=o(" \u2014 "),OQ=a("a"),zQo=o("RemBertForCausalLM"),QQo=o(" (RemBERT model)"),WQo=l(),Zb=a("li"),Fbe=a("strong"),UQo=o("roberta"),HQo=o(" \u2014 "),VQ=a("a"),JQo=o("RobertaForCausalLM"),YQo=o(" (RoBERTa model)"),KQo=l(),ev=a("li"),Tbe=a("strong"),ZQo=o("roformer"),eWo=o(" \u2014 "),XQ=a("a"),oWo=o("RoFormerForCausalLM"),rWo=o(" (RoFormer model)"),tWo=l(),ov=a("li"),Mbe=a("strong"),aWo=o("speech_to_text_2"),nWo=o(" \u2014 "),zQ=a("a"),sWo=o("Speech2Text2ForCausalLM"),lWo=o(" (Speech2Text2 model)"),iWo=l(),rv=a("li"),Ebe=a("strong"),dWo=o("transfo-xl"),cWo=o(" \u2014 "),QQ=a("a"),mWo=o("TransfoXLLMHeadModel"),fWo=o(" (Transformer-XL model)"),gWo=l(),tv=a("li"),Cbe=a("strong"),hWo=o("trocr"),uWo=o(" \u2014 "),WQ=a("a"),pWo=o("TrOCRForCausalLM"),_Wo=o(" (TrOCR model)"),bWo=l(),av=a("li"),wbe=a("strong"),vWo=o("xglm"),FWo=o(" \u2014 "),UQ=a("a"),TWo=o("XGLMForCausalLM"),MWo=o(" (XGLM model)"),EWo=l(),nv=a("li"),Abe=a("strong"),CWo=o("xlm"),wWo=o(" \u2014 "),HQ=a("a"),AWo=o("XLMWithLMHeadModel"),LWo=o(" (XLM model)"),yWo=l(),sv=a("li"),Lbe=a("strong"),xWo=o("xlm-prophetnet"),$Wo=o(" \u2014 "),JQ=a("a"),kWo=o("XLMProphetNetForCausalLM"),SWo=o(" (XLM-ProphetNet model)"),RWo=l(),lv=a("li"),ybe=a("strong"),PWo=o("xlm-roberta"),BWo=o(" \u2014 "),YQ=a("a"),IWo=o("XLMRobertaForCausalLM"),NWo=o(" (XLM-RoBERTa model)"),qWo=l(),iv=a("li"),xbe=a("strong"),jWo=o("xlm-roberta-xl"),DWo=o(" \u2014 "),KQ=a("a"),GWo=o("XLMRobertaXLForCausalLM"),OWo=o(" (XLM-RoBERTa-XL model)"),VWo=l(),dv=a("li"),$be=a("strong"),XWo=o("xlnet"),zWo=o(" \u2014 "),ZQ=a("a"),QWo=o("XLNetLMHeadModel"),WWo=o(" (XLNet model)"),UWo=l(),cv=a("p"),HWo=o("The model is set in evaluation mode by default using "),kbe=a("code"),JWo=o("model.eval()"),YWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=a("code"),KWo=o("model.train()"),ZWo=l(),F(mv.$$.fragment),YZe=l(),Ad=a("h2"),fv=a("a"),Rbe=a("span"),F(jx.$$.fragment),eUo=l(),Pbe=a("span"),oUo=o("AutoModelForMaskedLM"),KZe=l(),No=a("div"),F(Dx.$$.fragment),rUo=l(),Ld=a("p"),tUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eW=a("a"),aUo=o("from_pretrained()"),nUo=o(" class method or the "),oW=a("a"),sUo=o("from_config()"),lUo=o(` class
method.`),iUo=l(),Gx=a("p"),dUo=o("This class cannot be instantiated directly using "),Bbe=a("code"),cUo=o("__init__()"),mUo=o(" (throws an error)."),fUo=l(),Ft=a("div"),F(Ox.$$.fragment),gUo=l(),Ibe=a("p"),hUo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uUo=l(),yd=a("p"),pUo=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),_Uo=o("not"),bUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),vUo=o("from_pretrained()"),FUo=o(" to load the model weights."),TUo=l(),F(gv.$$.fragment),MUo=l(),ro=a("div"),F(Vx.$$.fragment),EUo=l(),qbe=a("p"),CUo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wUo=l(),Za=a("p"),AUo=o("The model class to instantiate is selected based on the "),jbe=a("code"),LUo=o("model_type"),yUo=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),xUo=o("pretrained_model_name_or_path"),$Uo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),kUo=o("pretrained_model_name_or_path"),SUo=o(":"),RUo=l(),J=a("ul"),hv=a("li"),Obe=a("strong"),PUo=o("albert"),BUo=o(" \u2014 "),tW=a("a"),IUo=o("AlbertForMaskedLM"),NUo=o(" (ALBERT model)"),qUo=l(),uv=a("li"),Vbe=a("strong"),jUo=o("bart"),DUo=o(" \u2014 "),aW=a("a"),GUo=o("BartForConditionalGeneration"),OUo=o(" (BART model)"),VUo=l(),pv=a("li"),Xbe=a("strong"),XUo=o("bert"),zUo=o(" \u2014 "),nW=a("a"),QUo=o("BertForMaskedLM"),WUo=o(" (BERT model)"),UUo=l(),_v=a("li"),zbe=a("strong"),HUo=o("big_bird"),JUo=o(" \u2014 "),sW=a("a"),YUo=o("BigBirdForMaskedLM"),KUo=o(" (BigBird model)"),ZUo=l(),bv=a("li"),Qbe=a("strong"),eHo=o("camembert"),oHo=o(" \u2014 "),lW=a("a"),rHo=o("CamembertForMaskedLM"),tHo=o(" (CamemBERT model)"),aHo=l(),vv=a("li"),Wbe=a("strong"),nHo=o("convbert"),sHo=o(" \u2014 "),iW=a("a"),lHo=o("ConvBertForMaskedLM"),iHo=o(" (ConvBERT model)"),dHo=l(),Fv=a("li"),Ube=a("strong"),cHo=o("data2vec-text"),mHo=o(" \u2014 "),dW=a("a"),fHo=o("Data2VecTextForMaskedLM"),gHo=o(" (Data2VecText model)"),hHo=l(),Tv=a("li"),Hbe=a("strong"),uHo=o("deberta"),pHo=o(" \u2014 "),cW=a("a"),_Ho=o("DebertaForMaskedLM"),bHo=o(" (DeBERTa model)"),vHo=l(),Mv=a("li"),Jbe=a("strong"),FHo=o("deberta-v2"),THo=o(" \u2014 "),mW=a("a"),MHo=o("DebertaV2ForMaskedLM"),EHo=o(" (DeBERTa-v2 model)"),CHo=l(),Ev=a("li"),Ybe=a("strong"),wHo=o("distilbert"),AHo=o(" \u2014 "),fW=a("a"),LHo=o("DistilBertForMaskedLM"),yHo=o(" (DistilBERT model)"),xHo=l(),Cv=a("li"),Kbe=a("strong"),$Ho=o("electra"),kHo=o(" \u2014 "),gW=a("a"),SHo=o("ElectraForMaskedLM"),RHo=o(" (ELECTRA model)"),PHo=l(),wv=a("li"),Zbe=a("strong"),BHo=o("ernie"),IHo=o(" \u2014 "),hW=a("a"),NHo=o("ErnieForMaskedLM"),qHo=o(" (ERNIE model)"),jHo=l(),Av=a("li"),eve=a("strong"),DHo=o("flaubert"),GHo=o(" \u2014 "),uW=a("a"),OHo=o("FlaubertWithLMHeadModel"),VHo=o(" (FlauBERT model)"),XHo=l(),Lv=a("li"),ove=a("strong"),zHo=o("fnet"),QHo=o(" \u2014 "),pW=a("a"),WHo=o("FNetForMaskedLM"),UHo=o(" (FNet model)"),HHo=l(),yv=a("li"),rve=a("strong"),JHo=o("funnel"),YHo=o(" \u2014 "),_W=a("a"),KHo=o("FunnelForMaskedLM"),ZHo=o(" (Funnel Transformer model)"),eJo=l(),xv=a("li"),tve=a("strong"),oJo=o("ibert"),rJo=o(" \u2014 "),bW=a("a"),tJo=o("IBertForMaskedLM"),aJo=o(" (I-BERT model)"),nJo=l(),$v=a("li"),ave=a("strong"),sJo=o("layoutlm"),lJo=o(" \u2014 "),vW=a("a"),iJo=o("LayoutLMForMaskedLM"),dJo=o(" (LayoutLM model)"),cJo=l(),kv=a("li"),nve=a("strong"),mJo=o("longformer"),fJo=o(" \u2014 "),FW=a("a"),gJo=o("LongformerForMaskedLM"),hJo=o(" (Longformer model)"),uJo=l(),Sv=a("li"),sve=a("strong"),pJo=o("luke"),_Jo=o(" \u2014 "),TW=a("a"),bJo=o("LukeForMaskedLM"),vJo=o(" (LUKE model)"),FJo=l(),Rv=a("li"),lve=a("strong"),TJo=o("mbart"),MJo=o(" \u2014 "),MW=a("a"),EJo=o("MBartForConditionalGeneration"),CJo=o(" (mBART model)"),wJo=l(),Pv=a("li"),ive=a("strong"),AJo=o("megatron-bert"),LJo=o(" \u2014 "),EW=a("a"),yJo=o("MegatronBertForMaskedLM"),xJo=o(" (Megatron-BERT model)"),$Jo=l(),Bv=a("li"),dve=a("strong"),kJo=o("mobilebert"),SJo=o(" \u2014 "),CW=a("a"),RJo=o("MobileBertForMaskedLM"),PJo=o(" (MobileBERT model)"),BJo=l(),Iv=a("li"),cve=a("strong"),IJo=o("mpnet"),NJo=o(" \u2014 "),wW=a("a"),qJo=o("MPNetForMaskedLM"),jJo=o(" (MPNet model)"),DJo=l(),Nv=a("li"),mve=a("strong"),GJo=o("mvp"),OJo=o(" \u2014 "),AW=a("a"),VJo=o("MvpForConditionalGeneration"),XJo=o(" (MVP model)"),zJo=l(),qv=a("li"),fve=a("strong"),QJo=o("nezha"),WJo=o(" \u2014 "),LW=a("a"),UJo=o("NezhaForMaskedLM"),HJo=o(" (Nezha model)"),JJo=l(),jv=a("li"),gve=a("strong"),YJo=o("nystromformer"),KJo=o(" \u2014 "),yW=a("a"),ZJo=o("NystromformerForMaskedLM"),eYo=o(" (Nystr\xF6mformer model)"),oYo=l(),Dv=a("li"),hve=a("strong"),rYo=o("perceiver"),tYo=o(" \u2014 "),xW=a("a"),aYo=o("PerceiverForMaskedLM"),nYo=o(" (Perceiver model)"),sYo=l(),Gv=a("li"),uve=a("strong"),lYo=o("qdqbert"),iYo=o(" \u2014 "),$W=a("a"),dYo=o("QDQBertForMaskedLM"),cYo=o(" (QDQBert model)"),mYo=l(),Ov=a("li"),pve=a("strong"),fYo=o("reformer"),gYo=o(" \u2014 "),kW=a("a"),hYo=o("ReformerForMaskedLM"),uYo=o(" (Reformer model)"),pYo=l(),Vv=a("li"),_ve=a("strong"),_Yo=o("rembert"),bYo=o(" \u2014 "),SW=a("a"),vYo=o("RemBertForMaskedLM"),FYo=o(" (RemBERT model)"),TYo=l(),Xv=a("li"),bve=a("strong"),MYo=o("roberta"),EYo=o(" \u2014 "),RW=a("a"),CYo=o("RobertaForMaskedLM"),wYo=o(" (RoBERTa model)"),AYo=l(),zv=a("li"),vve=a("strong"),LYo=o("roformer"),yYo=o(" \u2014 "),PW=a("a"),xYo=o("RoFormerForMaskedLM"),$Yo=o(" (RoFormer model)"),kYo=l(),Qv=a("li"),Fve=a("strong"),SYo=o("squeezebert"),RYo=o(" \u2014 "),BW=a("a"),PYo=o("SqueezeBertForMaskedLM"),BYo=o(" (SqueezeBERT model)"),IYo=l(),Wv=a("li"),Tve=a("strong"),NYo=o("tapas"),qYo=o(" \u2014 "),IW=a("a"),jYo=o("TapasForMaskedLM"),DYo=o(" (TAPAS model)"),GYo=l(),Uv=a("li"),Mve=a("strong"),OYo=o("wav2vec2"),VYo=o(" \u2014 "),Eve=a("code"),XYo=o("Wav2Vec2ForMaskedLM"),zYo=o(" (Wav2Vec2 model)"),QYo=l(),Hv=a("li"),Cve=a("strong"),WYo=o("xlm"),UYo=o(" \u2014 "),NW=a("a"),HYo=o("XLMWithLMHeadModel"),JYo=o(" (XLM model)"),YYo=l(),Jv=a("li"),wve=a("strong"),KYo=o("xlm-roberta"),ZYo=o(" \u2014 "),qW=a("a"),eKo=o("XLMRobertaForMaskedLM"),oKo=o(" (XLM-RoBERTa model)"),rKo=l(),Yv=a("li"),Ave=a("strong"),tKo=o("xlm-roberta-xl"),aKo=o(" \u2014 "),jW=a("a"),nKo=o("XLMRobertaXLForMaskedLM"),sKo=o(" (XLM-RoBERTa-XL model)"),lKo=l(),Kv=a("li"),Lve=a("strong"),iKo=o("yoso"),dKo=o(" \u2014 "),DW=a("a"),cKo=o("YosoForMaskedLM"),mKo=o(" (YOSO model)"),fKo=l(),Zv=a("p"),gKo=o("The model is set in evaluation mode by default using "),yve=a("code"),hKo=o("model.eval()"),uKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=a("code"),pKo=o("model.train()"),_Ko=l(),F(eF.$$.fragment),ZZe=l(),xd=a("h2"),oF=a("a"),$ve=a("span"),F(Xx.$$.fragment),bKo=l(),kve=a("span"),vKo=o("AutoModelForSeq2SeqLM"),eeo=l(),qo=a("div"),F(zx.$$.fragment),FKo=l(),$d=a("p"),TKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GW=a("a"),MKo=o("from_pretrained()"),EKo=o(" class method or the "),OW=a("a"),CKo=o("from_config()"),wKo=o(` class
method.`),AKo=l(),Qx=a("p"),LKo=o("This class cannot be instantiated directly using "),Sve=a("code"),yKo=o("__init__()"),xKo=o(" (throws an error)."),$Ko=l(),Tt=a("div"),F(Wx.$$.fragment),kKo=l(),Rve=a("p"),SKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),RKo=l(),kd=a("p"),PKo=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),BKo=o("not"),IKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),NKo=o("from_pretrained()"),qKo=o(" to load the model weights."),jKo=l(),F(rF.$$.fragment),DKo=l(),to=a("div"),F(Ux.$$.fragment),GKo=l(),Bve=a("p"),OKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VKo=l(),en=a("p"),XKo=o("The model class to instantiate is selected based on the "),Ive=a("code"),zKo=o("model_type"),QKo=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),WKo=o("pretrained_model_name_or_path"),UKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=a("code"),HKo=o("pretrained_model_name_or_path"),JKo=o(":"),YKo=l(),fe=a("ul"),tF=a("li"),jve=a("strong"),KKo=o("bart"),ZKo=o(" \u2014 "),XW=a("a"),eZo=o("BartForConditionalGeneration"),oZo=o(" (BART model)"),rZo=l(),aF=a("li"),Dve=a("strong"),tZo=o("bigbird_pegasus"),aZo=o(" \u2014 "),zW=a("a"),nZo=o("BigBirdPegasusForConditionalGeneration"),sZo=o(" (BigBird-Pegasus model)"),lZo=l(),nF=a("li"),Gve=a("strong"),iZo=o("blenderbot"),dZo=o(" \u2014 "),QW=a("a"),cZo=o("BlenderbotForConditionalGeneration"),mZo=o(" (Blenderbot model)"),fZo=l(),sF=a("li"),Ove=a("strong"),gZo=o("blenderbot-small"),hZo=o(" \u2014 "),WW=a("a"),uZo=o("BlenderbotSmallForConditionalGeneration"),pZo=o(" (BlenderbotSmall model)"),_Zo=l(),lF=a("li"),Vve=a("strong"),bZo=o("encoder-decoder"),vZo=o(" \u2014 "),UW=a("a"),FZo=o("EncoderDecoderModel"),TZo=o(" (Encoder decoder model)"),MZo=l(),iF=a("li"),Xve=a("strong"),EZo=o("fsmt"),CZo=o(" \u2014 "),HW=a("a"),wZo=o("FSMTForConditionalGeneration"),AZo=o(" (FairSeq Machine-Translation model)"),LZo=l(),dF=a("li"),zve=a("strong"),yZo=o("led"),xZo=o(" \u2014 "),JW=a("a"),$Zo=o("LEDForConditionalGeneration"),kZo=o(" (LED model)"),SZo=l(),cF=a("li"),Qve=a("strong"),RZo=o("longt5"),PZo=o(" \u2014 "),YW=a("a"),BZo=o("LongT5ForConditionalGeneration"),IZo=o(" (LongT5 model)"),NZo=l(),mF=a("li"),Wve=a("strong"),qZo=o("m2m_100"),jZo=o(" \u2014 "),KW=a("a"),DZo=o("M2M100ForConditionalGeneration"),GZo=o(" (M2M100 model)"),OZo=l(),fF=a("li"),Uve=a("strong"),VZo=o("marian"),XZo=o(" \u2014 "),ZW=a("a"),zZo=o("MarianMTModel"),QZo=o(" (Marian model)"),WZo=l(),gF=a("li"),Hve=a("strong"),UZo=o("mbart"),HZo=o(" \u2014 "),eU=a("a"),JZo=o("MBartForConditionalGeneration"),YZo=o(" (mBART model)"),KZo=l(),hF=a("li"),Jve=a("strong"),ZZo=o("mt5"),eer=o(" \u2014 "),oU=a("a"),oer=o("MT5ForConditionalGeneration"),rer=o(" (MT5 model)"),ter=l(),uF=a("li"),Yve=a("strong"),aer=o("mvp"),ner=o(" \u2014 "),rU=a("a"),ser=o("MvpForConditionalGeneration"),ler=o(" (MVP model)"),ier=l(),pF=a("li"),Kve=a("strong"),der=o("nllb"),cer=o(" \u2014 "),tU=a("a"),mer=o("M2M100ForConditionalGeneration"),fer=o(" (NLLB model)"),ger=l(),_F=a("li"),Zve=a("strong"),her=o("pegasus"),uer=o(" \u2014 "),aU=a("a"),per=o("PegasusForConditionalGeneration"),_er=o(" (Pegasus model)"),ber=l(),bF=a("li"),eFe=a("strong"),ver=o("pegasus_x"),Fer=o(" \u2014 "),nU=a("a"),Ter=o("PegasusXForConditionalGeneration"),Mer=o(" (PEGASUS-X model)"),Eer=l(),vF=a("li"),oFe=a("strong"),Cer=o("plbart"),wer=o(" \u2014 "),sU=a("a"),Aer=o("PLBartForConditionalGeneration"),Ler=o(" (PLBart model)"),yer=l(),FF=a("li"),rFe=a("strong"),xer=o("prophetnet"),$er=o(" \u2014 "),lU=a("a"),ker=o("ProphetNetForConditionalGeneration"),Ser=o(" (ProphetNet model)"),Rer=l(),TF=a("li"),tFe=a("strong"),Per=o("t5"),Ber=o(" \u2014 "),iU=a("a"),Ier=o("T5ForConditionalGeneration"),Ner=o(" (T5 model)"),qer=l(),MF=a("li"),aFe=a("strong"),jer=o("xlm-prophetnet"),Der=o(" \u2014 "),dU=a("a"),Ger=o("XLMProphetNetForConditionalGeneration"),Oer=o(" (XLM-ProphetNet model)"),Ver=l(),EF=a("p"),Xer=o("The model is set in evaluation mode by default using "),nFe=a("code"),zer=o("model.eval()"),Qer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=a("code"),Wer=o("model.train()"),Uer=l(),F(CF.$$.fragment),oeo=l(),Sd=a("h2"),wF=a("a"),lFe=a("span"),F(Hx.$$.fragment),Her=l(),iFe=a("span"),Jer=o("AutoModelForSequenceClassification"),reo=l(),jo=a("div"),F(Jx.$$.fragment),Yer=l(),Rd=a("p"),Ker=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cU=a("a"),Zer=o("from_pretrained()"),eor=o(" class method or the "),mU=a("a"),oor=o("from_config()"),ror=o(` class
method.`),tor=l(),Yx=a("p"),aor=o("This class cannot be instantiated directly using "),dFe=a("code"),nor=o("__init__()"),sor=o(" (throws an error)."),lor=l(),Mt=a("div"),F(Kx.$$.fragment),ior=l(),cFe=a("p"),dor=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cor=l(),Pd=a("p"),mor=o(`Note:
Loading a model from its configuration file does `),mFe=a("strong"),gor=o("not"),hor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),uor=o("from_pretrained()"),por=o(" to load the model weights."),_or=l(),F(AF.$$.fragment),bor=l(),ao=a("div"),F(Zx.$$.fragment),vor=l(),fFe=a("p"),For=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Tor=l(),on=a("p"),Mor=o("The model class to instantiate is selected based on the "),gFe=a("code"),Eor=o("model_type"),Cor=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),wor=o("pretrained_model_name_or_path"),Aor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=a("code"),Lor=o("pretrained_model_name_or_path"),yor=o(":"),xor=l(),B=a("ul"),LF=a("li"),pFe=a("strong"),$or=o("albert"),kor=o(" \u2014 "),gU=a("a"),Sor=o("AlbertForSequenceClassification"),Ror=o(" (ALBERT model)"),Por=l(),yF=a("li"),_Fe=a("strong"),Bor=o("bart"),Ior=o(" \u2014 "),hU=a("a"),Nor=o("BartForSequenceClassification"),qor=o(" (BART model)"),jor=l(),xF=a("li"),bFe=a("strong"),Dor=o("bert"),Gor=o(" \u2014 "),uU=a("a"),Oor=o("BertForSequenceClassification"),Vor=o(" (BERT model)"),Xor=l(),$F=a("li"),vFe=a("strong"),zor=o("big_bird"),Qor=o(" \u2014 "),pU=a("a"),Wor=o("BigBirdForSequenceClassification"),Uor=o(" (BigBird model)"),Hor=l(),kF=a("li"),FFe=a("strong"),Jor=o("bigbird_pegasus"),Yor=o(" \u2014 "),_U=a("a"),Kor=o("BigBirdPegasusForSequenceClassification"),Zor=o(" (BigBird-Pegasus model)"),err=l(),SF=a("li"),TFe=a("strong"),orr=o("bloom"),rrr=o(" \u2014 "),bU=a("a"),trr=o("BloomForSequenceClassification"),arr=o(" (BLOOM model)"),nrr=l(),RF=a("li"),MFe=a("strong"),srr=o("camembert"),lrr=o(" \u2014 "),vU=a("a"),irr=o("CamembertForSequenceClassification"),drr=o(" (CamemBERT model)"),crr=l(),PF=a("li"),EFe=a("strong"),mrr=o("canine"),frr=o(" \u2014 "),FU=a("a"),grr=o("CanineForSequenceClassification"),hrr=o(" (CANINE model)"),urr=l(),BF=a("li"),CFe=a("strong"),prr=o("convbert"),_rr=o(" \u2014 "),TU=a("a"),brr=o("ConvBertForSequenceClassification"),vrr=o(" (ConvBERT model)"),Frr=l(),IF=a("li"),wFe=a("strong"),Trr=o("ctrl"),Mrr=o(" \u2014 "),MU=a("a"),Err=o("CTRLForSequenceClassification"),Crr=o(" (CTRL model)"),wrr=l(),NF=a("li"),AFe=a("strong"),Arr=o("data2vec-text"),Lrr=o(" \u2014 "),EU=a("a"),yrr=o("Data2VecTextForSequenceClassification"),xrr=o(" (Data2VecText model)"),$rr=l(),qF=a("li"),LFe=a("strong"),krr=o("deberta"),Srr=o(" \u2014 "),CU=a("a"),Rrr=o("DebertaForSequenceClassification"),Prr=o(" (DeBERTa model)"),Brr=l(),jF=a("li"),yFe=a("strong"),Irr=o("deberta-v2"),Nrr=o(" \u2014 "),wU=a("a"),qrr=o("DebertaV2ForSequenceClassification"),jrr=o(" (DeBERTa-v2 model)"),Drr=l(),DF=a("li"),xFe=a("strong"),Grr=o("distilbert"),Orr=o(" \u2014 "),AU=a("a"),Vrr=o("DistilBertForSequenceClassification"),Xrr=o(" (DistilBERT model)"),zrr=l(),GF=a("li"),$Fe=a("strong"),Qrr=o("electra"),Wrr=o(" \u2014 "),LU=a("a"),Urr=o("ElectraForSequenceClassification"),Hrr=o(" (ELECTRA model)"),Jrr=l(),OF=a("li"),kFe=a("strong"),Yrr=o("ernie"),Krr=o(" \u2014 "),yU=a("a"),Zrr=o("ErnieForSequenceClassification"),etr=o(" (ERNIE model)"),otr=l(),VF=a("li"),SFe=a("strong"),rtr=o("esm"),ttr=o(" \u2014 "),xU=a("a"),atr=o("EsmForSequenceClassification"),ntr=o(" (ESM model)"),str=l(),XF=a("li"),RFe=a("strong"),ltr=o("flaubert"),itr=o(" \u2014 "),$U=a("a"),dtr=o("FlaubertForSequenceClassification"),ctr=o(" (FlauBERT model)"),mtr=l(),zF=a("li"),PFe=a("strong"),ftr=o("fnet"),gtr=o(" \u2014 "),kU=a("a"),htr=o("FNetForSequenceClassification"),utr=o(" (FNet model)"),ptr=l(),QF=a("li"),BFe=a("strong"),_tr=o("funnel"),btr=o(" \u2014 "),SU=a("a"),vtr=o("FunnelForSequenceClassification"),Ftr=o(" (Funnel Transformer model)"),Ttr=l(),WF=a("li"),IFe=a("strong"),Mtr=o("gpt2"),Etr=o(" \u2014 "),RU=a("a"),Ctr=o("GPT2ForSequenceClassification"),wtr=o(" (OpenAI GPT-2 model)"),Atr=l(),UF=a("li"),NFe=a("strong"),Ltr=o("gpt_neo"),ytr=o(" \u2014 "),PU=a("a"),xtr=o("GPTNeoForSequenceClassification"),$tr=o(" (GPT Neo model)"),ktr=l(),HF=a("li"),qFe=a("strong"),Str=o("gptj"),Rtr=o(" \u2014 "),BU=a("a"),Ptr=o("GPTJForSequenceClassification"),Btr=o(" (GPT-J model)"),Itr=l(),JF=a("li"),jFe=a("strong"),Ntr=o("ibert"),qtr=o(" \u2014 "),IU=a("a"),jtr=o("IBertForSequenceClassification"),Dtr=o(" (I-BERT model)"),Gtr=l(),YF=a("li"),DFe=a("strong"),Otr=o("layoutlm"),Vtr=o(" \u2014 "),NU=a("a"),Xtr=o("LayoutLMForSequenceClassification"),ztr=o(" (LayoutLM model)"),Qtr=l(),KF=a("li"),GFe=a("strong"),Wtr=o("layoutlmv2"),Utr=o(" \u2014 "),qU=a("a"),Htr=o("LayoutLMv2ForSequenceClassification"),Jtr=o(" (LayoutLMv2 model)"),Ytr=l(),ZF=a("li"),OFe=a("strong"),Ktr=o("layoutlmv3"),Ztr=o(" \u2014 "),jU=a("a"),ear=o("LayoutLMv3ForSequenceClassification"),oar=o(" (LayoutLMv3 model)"),rar=l(),eT=a("li"),VFe=a("strong"),tar=o("led"),aar=o(" \u2014 "),DU=a("a"),nar=o("LEDForSequenceClassification"),sar=o(" (LED model)"),lar=l(),oT=a("li"),XFe=a("strong"),iar=o("longformer"),dar=o(" \u2014 "),GU=a("a"),car=o("LongformerForSequenceClassification"),mar=o(" (Longformer model)"),far=l(),rT=a("li"),zFe=a("strong"),gar=o("luke"),har=o(" \u2014 "),OU=a("a"),uar=o("LukeForSequenceClassification"),par=o(" (LUKE model)"),_ar=l(),tT=a("li"),QFe=a("strong"),bar=o("markuplm"),Far=o(" \u2014 "),VU=a("a"),Tar=o("MarkupLMForSequenceClassification"),Mar=o(" (MarkupLM model)"),Ear=l(),aT=a("li"),WFe=a("strong"),Car=o("mbart"),war=o(" \u2014 "),XU=a("a"),Aar=o("MBartForSequenceClassification"),Lar=o(" (mBART model)"),yar=l(),nT=a("li"),UFe=a("strong"),xar=o("megatron-bert"),$ar=o(" \u2014 "),zU=a("a"),kar=o("MegatronBertForSequenceClassification"),Sar=o(" (Megatron-BERT model)"),Rar=l(),sT=a("li"),HFe=a("strong"),Par=o("mobilebert"),Bar=o(" \u2014 "),QU=a("a"),Iar=o("MobileBertForSequenceClassification"),Nar=o(" (MobileBERT model)"),qar=l(),lT=a("li"),JFe=a("strong"),jar=o("mpnet"),Dar=o(" \u2014 "),WU=a("a"),Gar=o("MPNetForSequenceClassification"),Oar=o(" (MPNet model)"),Var=l(),iT=a("li"),YFe=a("strong"),Xar=o("mvp"),zar=o(" \u2014 "),UU=a("a"),Qar=o("MvpForSequenceClassification"),War=o(" (MVP model)"),Uar=l(),dT=a("li"),KFe=a("strong"),Har=o("nezha"),Jar=o(" \u2014 "),HU=a("a"),Yar=o("NezhaForSequenceClassification"),Kar=o(" (Nezha model)"),Zar=l(),cT=a("li"),ZFe=a("strong"),enr=o("nystromformer"),onr=o(" \u2014 "),JU=a("a"),rnr=o("NystromformerForSequenceClassification"),tnr=o(" (Nystr\xF6mformer model)"),anr=l(),mT=a("li"),eTe=a("strong"),nnr=o("openai-gpt"),snr=o(" \u2014 "),YU=a("a"),lnr=o("OpenAIGPTForSequenceClassification"),inr=o(" (OpenAI GPT model)"),dnr=l(),fT=a("li"),oTe=a("strong"),cnr=o("opt"),mnr=o(" \u2014 "),KU=a("a"),fnr=o("OPTForSequenceClassification"),gnr=o(" (OPT model)"),hnr=l(),gT=a("li"),rTe=a("strong"),unr=o("perceiver"),pnr=o(" \u2014 "),ZU=a("a"),_nr=o("PerceiverForSequenceClassification"),bnr=o(" (Perceiver model)"),vnr=l(),hT=a("li"),tTe=a("strong"),Fnr=o("plbart"),Tnr=o(" \u2014 "),eH=a("a"),Mnr=o("PLBartForSequenceClassification"),Enr=o(" (PLBart model)"),Cnr=l(),uT=a("li"),aTe=a("strong"),wnr=o("qdqbert"),Anr=o(" \u2014 "),oH=a("a"),Lnr=o("QDQBertForSequenceClassification"),ynr=o(" (QDQBert model)"),xnr=l(),pT=a("li"),nTe=a("strong"),$nr=o("reformer"),knr=o(" \u2014 "),rH=a("a"),Snr=o("ReformerForSequenceClassification"),Rnr=o(" (Reformer model)"),Pnr=l(),_T=a("li"),sTe=a("strong"),Bnr=o("rembert"),Inr=o(" \u2014 "),tH=a("a"),Nnr=o("RemBertForSequenceClassification"),qnr=o(" (RemBERT model)"),jnr=l(),bT=a("li"),lTe=a("strong"),Dnr=o("roberta"),Gnr=o(" \u2014 "),aH=a("a"),Onr=o("RobertaForSequenceClassification"),Vnr=o(" (RoBERTa model)"),Xnr=l(),vT=a("li"),iTe=a("strong"),znr=o("roformer"),Qnr=o(" \u2014 "),nH=a("a"),Wnr=o("RoFormerForSequenceClassification"),Unr=o(" (RoFormer model)"),Hnr=l(),FT=a("li"),dTe=a("strong"),Jnr=o("squeezebert"),Ynr=o(" \u2014 "),sH=a("a"),Knr=o("SqueezeBertForSequenceClassification"),Znr=o(" (SqueezeBERT model)"),esr=l(),TT=a("li"),cTe=a("strong"),osr=o("tapas"),rsr=o(" \u2014 "),lH=a("a"),tsr=o("TapasForSequenceClassification"),asr=o(" (TAPAS model)"),nsr=l(),MT=a("li"),mTe=a("strong"),ssr=o("transfo-xl"),lsr=o(" \u2014 "),iH=a("a"),isr=o("TransfoXLForSequenceClassification"),dsr=o(" (Transformer-XL model)"),csr=l(),ET=a("li"),fTe=a("strong"),msr=o("xlm"),fsr=o(" \u2014 "),dH=a("a"),gsr=o("XLMForSequenceClassification"),hsr=o(" (XLM model)"),usr=l(),CT=a("li"),gTe=a("strong"),psr=o("xlm-roberta"),_sr=o(" \u2014 "),cH=a("a"),bsr=o("XLMRobertaForSequenceClassification"),vsr=o(" (XLM-RoBERTa model)"),Fsr=l(),wT=a("li"),hTe=a("strong"),Tsr=o("xlm-roberta-xl"),Msr=o(" \u2014 "),mH=a("a"),Esr=o("XLMRobertaXLForSequenceClassification"),Csr=o(" (XLM-RoBERTa-XL model)"),wsr=l(),AT=a("li"),uTe=a("strong"),Asr=o("xlnet"),Lsr=o(" \u2014 "),fH=a("a"),ysr=o("XLNetForSequenceClassification"),xsr=o(" (XLNet model)"),$sr=l(),LT=a("li"),pTe=a("strong"),ksr=o("yoso"),Ssr=o(" \u2014 "),gH=a("a"),Rsr=o("YosoForSequenceClassification"),Psr=o(" (YOSO model)"),Bsr=l(),yT=a("p"),Isr=o("The model is set in evaluation mode by default using "),_Te=a("code"),Nsr=o("model.eval()"),qsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bTe=a("code"),jsr=o("model.train()"),Dsr=l(),F(xT.$$.fragment),teo=l(),Bd=a("h2"),$T=a("a"),vTe=a("span"),F(e$.$$.fragment),Gsr=l(),FTe=a("span"),Osr=o("AutoModelForMultipleChoice"),aeo=l(),Do=a("div"),F(o$.$$.fragment),Vsr=l(),Id=a("p"),Xsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hH=a("a"),zsr=o("from_pretrained()"),Qsr=o(" class method or the "),uH=a("a"),Wsr=o("from_config()"),Usr=o(` class
method.`),Hsr=l(),r$=a("p"),Jsr=o("This class cannot be instantiated directly using "),TTe=a("code"),Ysr=o("__init__()"),Ksr=o(" (throws an error)."),Zsr=l(),Et=a("div"),F(t$.$$.fragment),elr=l(),MTe=a("p"),olr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rlr=l(),Nd=a("p"),tlr=o(`Note:
Loading a model from its configuration file does `),ETe=a("strong"),alr=o("not"),nlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),slr=o("from_pretrained()"),llr=o(" to load the model weights."),ilr=l(),F(kT.$$.fragment),dlr=l(),no=a("div"),F(a$.$$.fragment),clr=l(),CTe=a("p"),mlr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),flr=l(),rn=a("p"),glr=o("The model class to instantiate is selected based on the "),wTe=a("code"),hlr=o("model_type"),ulr=o(` property of the config object (either
passed as an argument or loaded from `),ATe=a("code"),plr=o("pretrained_model_name_or_path"),_lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=a("code"),blr=o("pretrained_model_name_or_path"),vlr=o(":"),Flr=l(),Z=a("ul"),ST=a("li"),yTe=a("strong"),Tlr=o("albert"),Mlr=o(" \u2014 "),_H=a("a"),Elr=o("AlbertForMultipleChoice"),Clr=o(" (ALBERT model)"),wlr=l(),RT=a("li"),xTe=a("strong"),Alr=o("bert"),Llr=o(" \u2014 "),bH=a("a"),ylr=o("BertForMultipleChoice"),xlr=o(" (BERT model)"),$lr=l(),PT=a("li"),$Te=a("strong"),klr=o("big_bird"),Slr=o(" \u2014 "),vH=a("a"),Rlr=o("BigBirdForMultipleChoice"),Plr=o(" (BigBird model)"),Blr=l(),BT=a("li"),kTe=a("strong"),Ilr=o("camembert"),Nlr=o(" \u2014 "),FH=a("a"),qlr=o("CamembertForMultipleChoice"),jlr=o(" (CamemBERT model)"),Dlr=l(),IT=a("li"),STe=a("strong"),Glr=o("canine"),Olr=o(" \u2014 "),TH=a("a"),Vlr=o("CanineForMultipleChoice"),Xlr=o(" (CANINE model)"),zlr=l(),NT=a("li"),RTe=a("strong"),Qlr=o("convbert"),Wlr=o(" \u2014 "),MH=a("a"),Ulr=o("ConvBertForMultipleChoice"),Hlr=o(" (ConvBERT model)"),Jlr=l(),qT=a("li"),PTe=a("strong"),Ylr=o("data2vec-text"),Klr=o(" \u2014 "),EH=a("a"),Zlr=o("Data2VecTextForMultipleChoice"),eir=o(" (Data2VecText model)"),oir=l(),jT=a("li"),BTe=a("strong"),rir=o("deberta-v2"),tir=o(" \u2014 "),CH=a("a"),air=o("DebertaV2ForMultipleChoice"),nir=o(" (DeBERTa-v2 model)"),sir=l(),DT=a("li"),ITe=a("strong"),lir=o("distilbert"),iir=o(" \u2014 "),wH=a("a"),dir=o("DistilBertForMultipleChoice"),cir=o(" (DistilBERT model)"),mir=l(),GT=a("li"),NTe=a("strong"),fir=o("electra"),gir=o(" \u2014 "),AH=a("a"),hir=o("ElectraForMultipleChoice"),uir=o(" (ELECTRA model)"),pir=l(),OT=a("li"),qTe=a("strong"),_ir=o("ernie"),bir=o(" \u2014 "),LH=a("a"),vir=o("ErnieForMultipleChoice"),Fir=o(" (ERNIE model)"),Tir=l(),VT=a("li"),jTe=a("strong"),Mir=o("flaubert"),Eir=o(" \u2014 "),yH=a("a"),Cir=o("FlaubertForMultipleChoice"),wir=o(" (FlauBERT model)"),Air=l(),XT=a("li"),DTe=a("strong"),Lir=o("fnet"),yir=o(" \u2014 "),xH=a("a"),xir=o("FNetForMultipleChoice"),$ir=o(" (FNet model)"),kir=l(),zT=a("li"),GTe=a("strong"),Sir=o("funnel"),Rir=o(" \u2014 "),$H=a("a"),Pir=o("FunnelForMultipleChoice"),Bir=o(" (Funnel Transformer model)"),Iir=l(),QT=a("li"),OTe=a("strong"),Nir=o("ibert"),qir=o(" \u2014 "),kH=a("a"),jir=o("IBertForMultipleChoice"),Dir=o(" (I-BERT model)"),Gir=l(),WT=a("li"),VTe=a("strong"),Oir=o("longformer"),Vir=o(" \u2014 "),SH=a("a"),Xir=o("LongformerForMultipleChoice"),zir=o(" (Longformer model)"),Qir=l(),UT=a("li"),XTe=a("strong"),Wir=o("luke"),Uir=o(" \u2014 "),RH=a("a"),Hir=o("LukeForMultipleChoice"),Jir=o(" (LUKE model)"),Yir=l(),HT=a("li"),zTe=a("strong"),Kir=o("megatron-bert"),Zir=o(" \u2014 "),PH=a("a"),edr=o("MegatronBertForMultipleChoice"),odr=o(" (Megatron-BERT model)"),rdr=l(),JT=a("li"),QTe=a("strong"),tdr=o("mobilebert"),adr=o(" \u2014 "),BH=a("a"),ndr=o("MobileBertForMultipleChoice"),sdr=o(" (MobileBERT model)"),ldr=l(),YT=a("li"),WTe=a("strong"),idr=o("mpnet"),ddr=o(" \u2014 "),IH=a("a"),cdr=o("MPNetForMultipleChoice"),mdr=o(" (MPNet model)"),fdr=l(),KT=a("li"),UTe=a("strong"),gdr=o("nezha"),hdr=o(" \u2014 "),NH=a("a"),udr=o("NezhaForMultipleChoice"),pdr=o(" (Nezha model)"),_dr=l(),ZT=a("li"),HTe=a("strong"),bdr=o("nystromformer"),vdr=o(" \u2014 "),qH=a("a"),Fdr=o("NystromformerForMultipleChoice"),Tdr=o(" (Nystr\xF6mformer model)"),Mdr=l(),eM=a("li"),JTe=a("strong"),Edr=o("qdqbert"),Cdr=o(" \u2014 "),jH=a("a"),wdr=o("QDQBertForMultipleChoice"),Adr=o(" (QDQBert model)"),Ldr=l(),oM=a("li"),YTe=a("strong"),ydr=o("rembert"),xdr=o(" \u2014 "),DH=a("a"),$dr=o("RemBertForMultipleChoice"),kdr=o(" (RemBERT model)"),Sdr=l(),rM=a("li"),KTe=a("strong"),Rdr=o("roberta"),Pdr=o(" \u2014 "),GH=a("a"),Bdr=o("RobertaForMultipleChoice"),Idr=o(" (RoBERTa model)"),Ndr=l(),tM=a("li"),ZTe=a("strong"),qdr=o("roformer"),jdr=o(" \u2014 "),OH=a("a"),Ddr=o("RoFormerForMultipleChoice"),Gdr=o(" (RoFormer model)"),Odr=l(),aM=a("li"),eMe=a("strong"),Vdr=o("squeezebert"),Xdr=o(" \u2014 "),VH=a("a"),zdr=o("SqueezeBertForMultipleChoice"),Qdr=o(" (SqueezeBERT model)"),Wdr=l(),nM=a("li"),oMe=a("strong"),Udr=o("xlm"),Hdr=o(" \u2014 "),XH=a("a"),Jdr=o("XLMForMultipleChoice"),Ydr=o(" (XLM model)"),Kdr=l(),sM=a("li"),rMe=a("strong"),Zdr=o("xlm-roberta"),ecr=o(" \u2014 "),zH=a("a"),ocr=o("XLMRobertaForMultipleChoice"),rcr=o(" (XLM-RoBERTa model)"),tcr=l(),lM=a("li"),tMe=a("strong"),acr=o("xlm-roberta-xl"),ncr=o(" \u2014 "),QH=a("a"),scr=o("XLMRobertaXLForMultipleChoice"),lcr=o(" (XLM-RoBERTa-XL model)"),icr=l(),iM=a("li"),aMe=a("strong"),dcr=o("xlnet"),ccr=o(" \u2014 "),WH=a("a"),mcr=o("XLNetForMultipleChoice"),fcr=o(" (XLNet model)"),gcr=l(),dM=a("li"),nMe=a("strong"),hcr=o("yoso"),ucr=o(" \u2014 "),UH=a("a"),pcr=o("YosoForMultipleChoice"),_cr=o(" (YOSO model)"),bcr=l(),cM=a("p"),vcr=o("The model is set in evaluation mode by default using "),sMe=a("code"),Fcr=o("model.eval()"),Tcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lMe=a("code"),Mcr=o("model.train()"),Ecr=l(),F(mM.$$.fragment),neo=l(),qd=a("h2"),fM=a("a"),iMe=a("span"),F(n$.$$.fragment),Ccr=l(),dMe=a("span"),wcr=o("AutoModelForNextSentencePrediction"),seo=l(),Go=a("div"),F(s$.$$.fragment),Acr=l(),jd=a("p"),Lcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HH=a("a"),ycr=o("from_pretrained()"),xcr=o(" class method or the "),JH=a("a"),$cr=o("from_config()"),kcr=o(` class
method.`),Scr=l(),l$=a("p"),Rcr=o("This class cannot be instantiated directly using "),cMe=a("code"),Pcr=o("__init__()"),Bcr=o(" (throws an error)."),Icr=l(),Ct=a("div"),F(i$.$$.fragment),Ncr=l(),mMe=a("p"),qcr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jcr=l(),Dd=a("p"),Dcr=o(`Note:
Loading a model from its configuration file does `),fMe=a("strong"),Gcr=o("not"),Ocr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),Vcr=o("from_pretrained()"),Xcr=o(" to load the model weights."),zcr=l(),F(gM.$$.fragment),Qcr=l(),so=a("div"),F(d$.$$.fragment),Wcr=l(),gMe=a("p"),Ucr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Hcr=l(),tn=a("p"),Jcr=o("The model class to instantiate is selected based on the "),hMe=a("code"),Ycr=o("model_type"),Kcr=o(` property of the config object (either
passed as an argument or loaded from `),uMe=a("code"),Zcr=o("pretrained_model_name_or_path"),emr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),omr=o("pretrained_model_name_or_path"),rmr=o(":"),tmr=l(),Ue=a("ul"),hM=a("li"),_Me=a("strong"),amr=o("bert"),nmr=o(" \u2014 "),KH=a("a"),smr=o("BertForNextSentencePrediction"),lmr=o(" (BERT model)"),imr=l(),uM=a("li"),bMe=a("strong"),dmr=o("ernie"),cmr=o(" \u2014 "),ZH=a("a"),mmr=o("ErnieForNextSentencePrediction"),fmr=o(" (ERNIE model)"),gmr=l(),pM=a("li"),vMe=a("strong"),hmr=o("fnet"),umr=o(" \u2014 "),eJ=a("a"),pmr=o("FNetForNextSentencePrediction"),_mr=o(" (FNet model)"),bmr=l(),_M=a("li"),FMe=a("strong"),vmr=o("megatron-bert"),Fmr=o(" \u2014 "),oJ=a("a"),Tmr=o("MegatronBertForNextSentencePrediction"),Mmr=o(" (Megatron-BERT model)"),Emr=l(),bM=a("li"),TMe=a("strong"),Cmr=o("mobilebert"),wmr=o(" \u2014 "),rJ=a("a"),Amr=o("MobileBertForNextSentencePrediction"),Lmr=o(" (MobileBERT model)"),ymr=l(),vM=a("li"),MMe=a("strong"),xmr=o("nezha"),$mr=o(" \u2014 "),tJ=a("a"),kmr=o("NezhaForNextSentencePrediction"),Smr=o(" (Nezha model)"),Rmr=l(),FM=a("li"),EMe=a("strong"),Pmr=o("qdqbert"),Bmr=o(" \u2014 "),aJ=a("a"),Imr=o("QDQBertForNextSentencePrediction"),Nmr=o(" (QDQBert model)"),qmr=l(),TM=a("p"),jmr=o("The model is set in evaluation mode by default using "),CMe=a("code"),Dmr=o("model.eval()"),Gmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wMe=a("code"),Omr=o("model.train()"),Vmr=l(),F(MM.$$.fragment),leo=l(),Gd=a("h2"),EM=a("a"),AMe=a("span"),F(c$.$$.fragment),Xmr=l(),LMe=a("span"),zmr=o("AutoModelForTokenClassification"),ieo=l(),Oo=a("div"),F(m$.$$.fragment),Qmr=l(),Od=a("p"),Wmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nJ=a("a"),Umr=o("from_pretrained()"),Hmr=o(" class method or the "),sJ=a("a"),Jmr=o("from_config()"),Ymr=o(` class
method.`),Kmr=l(),f$=a("p"),Zmr=o("This class cannot be instantiated directly using "),yMe=a("code"),efr=o("__init__()"),ofr=o(" (throws an error)."),rfr=l(),wt=a("div"),F(g$.$$.fragment),tfr=l(),xMe=a("p"),afr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nfr=l(),Vd=a("p"),sfr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),lfr=o("not"),ifr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=a("a"),dfr=o("from_pretrained()"),cfr=o(" to load the model weights."),mfr=l(),F(CM.$$.fragment),ffr=l(),lo=a("div"),F(h$.$$.fragment),gfr=l(),kMe=a("p"),hfr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ufr=l(),an=a("p"),pfr=o("The model class to instantiate is selected based on the "),SMe=a("code"),_fr=o("model_type"),bfr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),vfr=o("pretrained_model_name_or_path"),Ffr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),Tfr=o("pretrained_model_name_or_path"),Mfr=o(":"),Efr=l(),H=a("ul"),wM=a("li"),BMe=a("strong"),Cfr=o("albert"),wfr=o(" \u2014 "),iJ=a("a"),Afr=o("AlbertForTokenClassification"),Lfr=o(" (ALBERT model)"),yfr=l(),AM=a("li"),IMe=a("strong"),xfr=o("bert"),$fr=o(" \u2014 "),dJ=a("a"),kfr=o("BertForTokenClassification"),Sfr=o(" (BERT model)"),Rfr=l(),LM=a("li"),NMe=a("strong"),Pfr=o("big_bird"),Bfr=o(" \u2014 "),cJ=a("a"),Ifr=o("BigBirdForTokenClassification"),Nfr=o(" (BigBird model)"),qfr=l(),yM=a("li"),qMe=a("strong"),jfr=o("bloom"),Dfr=o(" \u2014 "),mJ=a("a"),Gfr=o("BloomForTokenClassification"),Ofr=o(" (BLOOM model)"),Vfr=l(),xM=a("li"),jMe=a("strong"),Xfr=o("camembert"),zfr=o(" \u2014 "),fJ=a("a"),Qfr=o("CamembertForTokenClassification"),Wfr=o(" (CamemBERT model)"),Ufr=l(),$M=a("li"),DMe=a("strong"),Hfr=o("canine"),Jfr=o(" \u2014 "),gJ=a("a"),Yfr=o("CanineForTokenClassification"),Kfr=o(" (CANINE model)"),Zfr=l(),kM=a("li"),GMe=a("strong"),egr=o("convbert"),ogr=o(" \u2014 "),hJ=a("a"),rgr=o("ConvBertForTokenClassification"),tgr=o(" (ConvBERT model)"),agr=l(),SM=a("li"),OMe=a("strong"),ngr=o("data2vec-text"),sgr=o(" \u2014 "),uJ=a("a"),lgr=o("Data2VecTextForTokenClassification"),igr=o(" (Data2VecText model)"),dgr=l(),RM=a("li"),VMe=a("strong"),cgr=o("deberta"),mgr=o(" \u2014 "),pJ=a("a"),fgr=o("DebertaForTokenClassification"),ggr=o(" (DeBERTa model)"),hgr=l(),PM=a("li"),XMe=a("strong"),ugr=o("deberta-v2"),pgr=o(" \u2014 "),_J=a("a"),_gr=o("DebertaV2ForTokenClassification"),bgr=o(" (DeBERTa-v2 model)"),vgr=l(),BM=a("li"),zMe=a("strong"),Fgr=o("distilbert"),Tgr=o(" \u2014 "),bJ=a("a"),Mgr=o("DistilBertForTokenClassification"),Egr=o(" (DistilBERT model)"),Cgr=l(),IM=a("li"),QMe=a("strong"),wgr=o("electra"),Agr=o(" \u2014 "),vJ=a("a"),Lgr=o("ElectraForTokenClassification"),ygr=o(" (ELECTRA model)"),xgr=l(),NM=a("li"),WMe=a("strong"),$gr=o("ernie"),kgr=o(" \u2014 "),FJ=a("a"),Sgr=o("ErnieForTokenClassification"),Rgr=o(" (ERNIE model)"),Pgr=l(),qM=a("li"),UMe=a("strong"),Bgr=o("esm"),Igr=o(" \u2014 "),TJ=a("a"),Ngr=o("EsmForTokenClassification"),qgr=o(" (ESM model)"),jgr=l(),jM=a("li"),HMe=a("strong"),Dgr=o("flaubert"),Ggr=o(" \u2014 "),MJ=a("a"),Ogr=o("FlaubertForTokenClassification"),Vgr=o(" (FlauBERT model)"),Xgr=l(),DM=a("li"),JMe=a("strong"),zgr=o("fnet"),Qgr=o(" \u2014 "),EJ=a("a"),Wgr=o("FNetForTokenClassification"),Ugr=o(" (FNet model)"),Hgr=l(),GM=a("li"),YMe=a("strong"),Jgr=o("funnel"),Ygr=o(" \u2014 "),CJ=a("a"),Kgr=o("FunnelForTokenClassification"),Zgr=o(" (Funnel Transformer model)"),ehr=l(),OM=a("li"),KMe=a("strong"),ohr=o("gpt2"),rhr=o(" \u2014 "),wJ=a("a"),thr=o("GPT2ForTokenClassification"),ahr=o(" (OpenAI GPT-2 model)"),nhr=l(),VM=a("li"),ZMe=a("strong"),shr=o("ibert"),lhr=o(" \u2014 "),AJ=a("a"),ihr=o("IBertForTokenClassification"),dhr=o(" (I-BERT model)"),chr=l(),XM=a("li"),eEe=a("strong"),mhr=o("layoutlm"),fhr=o(" \u2014 "),LJ=a("a"),ghr=o("LayoutLMForTokenClassification"),hhr=o(" (LayoutLM model)"),uhr=l(),zM=a("li"),oEe=a("strong"),phr=o("layoutlmv2"),_hr=o(" \u2014 "),yJ=a("a"),bhr=o("LayoutLMv2ForTokenClassification"),vhr=o(" (LayoutLMv2 model)"),Fhr=l(),QM=a("li"),rEe=a("strong"),Thr=o("layoutlmv3"),Mhr=o(" \u2014 "),xJ=a("a"),Ehr=o("LayoutLMv3ForTokenClassification"),Chr=o(" (LayoutLMv3 model)"),whr=l(),WM=a("li"),tEe=a("strong"),Ahr=o("longformer"),Lhr=o(" \u2014 "),$J=a("a"),yhr=o("LongformerForTokenClassification"),xhr=o(" (Longformer model)"),$hr=l(),UM=a("li"),aEe=a("strong"),khr=o("luke"),Shr=o(" \u2014 "),kJ=a("a"),Rhr=o("LukeForTokenClassification"),Phr=o(" (LUKE model)"),Bhr=l(),HM=a("li"),nEe=a("strong"),Ihr=o("markuplm"),Nhr=o(" \u2014 "),SJ=a("a"),qhr=o("MarkupLMForTokenClassification"),jhr=o(" (MarkupLM model)"),Dhr=l(),JM=a("li"),sEe=a("strong"),Ghr=o("megatron-bert"),Ohr=o(" \u2014 "),RJ=a("a"),Vhr=o("MegatronBertForTokenClassification"),Xhr=o(" (Megatron-BERT model)"),zhr=l(),YM=a("li"),lEe=a("strong"),Qhr=o("mobilebert"),Whr=o(" \u2014 "),PJ=a("a"),Uhr=o("MobileBertForTokenClassification"),Hhr=o(" (MobileBERT model)"),Jhr=l(),KM=a("li"),iEe=a("strong"),Yhr=o("mpnet"),Khr=o(" \u2014 "),BJ=a("a"),Zhr=o("MPNetForTokenClassification"),eur=o(" (MPNet model)"),our=l(),ZM=a("li"),dEe=a("strong"),rur=o("nezha"),tur=o(" \u2014 "),IJ=a("a"),aur=o("NezhaForTokenClassification"),nur=o(" (Nezha model)"),sur=l(),eE=a("li"),cEe=a("strong"),lur=o("nystromformer"),iur=o(" \u2014 "),NJ=a("a"),dur=o("NystromformerForTokenClassification"),cur=o(" (Nystr\xF6mformer model)"),mur=l(),oE=a("li"),mEe=a("strong"),fur=o("qdqbert"),gur=o(" \u2014 "),qJ=a("a"),hur=o("QDQBertForTokenClassification"),uur=o(" (QDQBert model)"),pur=l(),rE=a("li"),fEe=a("strong"),_ur=o("rembert"),bur=o(" \u2014 "),jJ=a("a"),vur=o("RemBertForTokenClassification"),Fur=o(" (RemBERT model)"),Tur=l(),tE=a("li"),gEe=a("strong"),Mur=o("roberta"),Eur=o(" \u2014 "),DJ=a("a"),Cur=o("RobertaForTokenClassification"),wur=o(" (RoBERTa model)"),Aur=l(),aE=a("li"),hEe=a("strong"),Lur=o("roformer"),yur=o(" \u2014 "),GJ=a("a"),xur=o("RoFormerForTokenClassification"),$ur=o(" (RoFormer model)"),kur=l(),nE=a("li"),uEe=a("strong"),Sur=o("squeezebert"),Rur=o(" \u2014 "),OJ=a("a"),Pur=o("SqueezeBertForTokenClassification"),Bur=o(" (SqueezeBERT model)"),Iur=l(),sE=a("li"),pEe=a("strong"),Nur=o("xlm"),qur=o(" \u2014 "),VJ=a("a"),jur=o("XLMForTokenClassification"),Dur=o(" (XLM model)"),Gur=l(),lE=a("li"),_Ee=a("strong"),Our=o("xlm-roberta"),Vur=o(" \u2014 "),XJ=a("a"),Xur=o("XLMRobertaForTokenClassification"),zur=o(" (XLM-RoBERTa model)"),Qur=l(),iE=a("li"),bEe=a("strong"),Wur=o("xlm-roberta-xl"),Uur=o(" \u2014 "),zJ=a("a"),Hur=o("XLMRobertaXLForTokenClassification"),Jur=o(" (XLM-RoBERTa-XL model)"),Yur=l(),dE=a("li"),vEe=a("strong"),Kur=o("xlnet"),Zur=o(" \u2014 "),QJ=a("a"),epr=o("XLNetForTokenClassification"),opr=o(" (XLNet model)"),rpr=l(),cE=a("li"),FEe=a("strong"),tpr=o("yoso"),apr=o(" \u2014 "),WJ=a("a"),npr=o("YosoForTokenClassification"),spr=o(" (YOSO model)"),lpr=l(),mE=a("p"),ipr=o("The model is set in evaluation mode by default using "),TEe=a("code"),dpr=o("model.eval()"),cpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MEe=a("code"),mpr=o("model.train()"),fpr=l(),F(fE.$$.fragment),deo=l(),Xd=a("h2"),gE=a("a"),EEe=a("span"),F(u$.$$.fragment),gpr=l(),CEe=a("span"),hpr=o("AutoModelForQuestionAnswering"),ceo=l(),Vo=a("div"),F(p$.$$.fragment),upr=l(),zd=a("p"),ppr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UJ=a("a"),_pr=o("from_pretrained()"),bpr=o(" class method or the "),HJ=a("a"),vpr=o("from_config()"),Fpr=o(` class
method.`),Tpr=l(),_$=a("p"),Mpr=o("This class cannot be instantiated directly using "),wEe=a("code"),Epr=o("__init__()"),Cpr=o(" (throws an error)."),wpr=l(),At=a("div"),F(b$.$$.fragment),Apr=l(),AEe=a("p"),Lpr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ypr=l(),Qd=a("p"),xpr=o(`Note:
Loading a model from its configuration file does `),LEe=a("strong"),$pr=o("not"),kpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),Spr=o("from_pretrained()"),Rpr=o(" to load the model weights."),Ppr=l(),F(hE.$$.fragment),Bpr=l(),io=a("div"),F(v$.$$.fragment),Ipr=l(),yEe=a("p"),Npr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qpr=l(),nn=a("p"),jpr=o("The model class to instantiate is selected based on the "),xEe=a("code"),Dpr=o("model_type"),Gpr=o(` property of the config object (either
passed as an argument or loaded from `),$Ee=a("code"),Opr=o("pretrained_model_name_or_path"),Vpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=a("code"),Xpr=o("pretrained_model_name_or_path"),zpr=o(":"),Qpr=l(),V=a("ul"),uE=a("li"),SEe=a("strong"),Wpr=o("albert"),Upr=o(" \u2014 "),YJ=a("a"),Hpr=o("AlbertForQuestionAnswering"),Jpr=o(" (ALBERT model)"),Ypr=l(),pE=a("li"),REe=a("strong"),Kpr=o("bart"),Zpr=o(" \u2014 "),KJ=a("a"),e_r=o("BartForQuestionAnswering"),o_r=o(" (BART model)"),r_r=l(),_E=a("li"),PEe=a("strong"),t_r=o("bert"),a_r=o(" \u2014 "),ZJ=a("a"),n_r=o("BertForQuestionAnswering"),s_r=o(" (BERT model)"),l_r=l(),bE=a("li"),BEe=a("strong"),i_r=o("big_bird"),d_r=o(" \u2014 "),eY=a("a"),c_r=o("BigBirdForQuestionAnswering"),m_r=o(" (BigBird model)"),f_r=l(),vE=a("li"),IEe=a("strong"),g_r=o("bigbird_pegasus"),h_r=o(" \u2014 "),oY=a("a"),u_r=o("BigBirdPegasusForQuestionAnswering"),p_r=o(" (BigBird-Pegasus model)"),__r=l(),FE=a("li"),NEe=a("strong"),b_r=o("camembert"),v_r=o(" \u2014 "),rY=a("a"),F_r=o("CamembertForQuestionAnswering"),T_r=o(" (CamemBERT model)"),M_r=l(),TE=a("li"),qEe=a("strong"),E_r=o("canine"),C_r=o(" \u2014 "),tY=a("a"),w_r=o("CanineForQuestionAnswering"),A_r=o(" (CANINE model)"),L_r=l(),ME=a("li"),jEe=a("strong"),y_r=o("convbert"),x_r=o(" \u2014 "),aY=a("a"),$_r=o("ConvBertForQuestionAnswering"),k_r=o(" (ConvBERT model)"),S_r=l(),EE=a("li"),DEe=a("strong"),R_r=o("data2vec-text"),P_r=o(" \u2014 "),nY=a("a"),B_r=o("Data2VecTextForQuestionAnswering"),I_r=o(" (Data2VecText model)"),N_r=l(),CE=a("li"),GEe=a("strong"),q_r=o("deberta"),j_r=o(" \u2014 "),sY=a("a"),D_r=o("DebertaForQuestionAnswering"),G_r=o(" (DeBERTa model)"),O_r=l(),wE=a("li"),OEe=a("strong"),V_r=o("deberta-v2"),X_r=o(" \u2014 "),lY=a("a"),z_r=o("DebertaV2ForQuestionAnswering"),Q_r=o(" (DeBERTa-v2 model)"),W_r=l(),AE=a("li"),VEe=a("strong"),U_r=o("distilbert"),H_r=o(" \u2014 "),iY=a("a"),J_r=o("DistilBertForQuestionAnswering"),Y_r=o(" (DistilBERT model)"),K_r=l(),LE=a("li"),XEe=a("strong"),Z_r=o("electra"),e2r=o(" \u2014 "),dY=a("a"),o2r=o("ElectraForQuestionAnswering"),r2r=o(" (ELECTRA model)"),t2r=l(),yE=a("li"),zEe=a("strong"),a2r=o("ernie"),n2r=o(" \u2014 "),cY=a("a"),s2r=o("ErnieForQuestionAnswering"),l2r=o(" (ERNIE model)"),i2r=l(),xE=a("li"),QEe=a("strong"),d2r=o("flaubert"),c2r=o(" \u2014 "),mY=a("a"),m2r=o("FlaubertForQuestionAnsweringSimple"),f2r=o(" (FlauBERT model)"),g2r=l(),$E=a("li"),WEe=a("strong"),h2r=o("fnet"),u2r=o(" \u2014 "),fY=a("a"),p2r=o("FNetForQuestionAnswering"),_2r=o(" (FNet model)"),b2r=l(),kE=a("li"),UEe=a("strong"),v2r=o("funnel"),F2r=o(" \u2014 "),gY=a("a"),T2r=o("FunnelForQuestionAnswering"),M2r=o(" (Funnel Transformer model)"),E2r=l(),SE=a("li"),HEe=a("strong"),C2r=o("gptj"),w2r=o(" \u2014 "),hY=a("a"),A2r=o("GPTJForQuestionAnswering"),L2r=o(" (GPT-J model)"),y2r=l(),RE=a("li"),JEe=a("strong"),x2r=o("ibert"),$2r=o(" \u2014 "),uY=a("a"),k2r=o("IBertForQuestionAnswering"),S2r=o(" (I-BERT model)"),R2r=l(),PE=a("li"),YEe=a("strong"),P2r=o("layoutlmv2"),B2r=o(" \u2014 "),pY=a("a"),I2r=o("LayoutLMv2ForQuestionAnswering"),N2r=o(" (LayoutLMv2 model)"),q2r=l(),BE=a("li"),KEe=a("strong"),j2r=o("layoutlmv3"),D2r=o(" \u2014 "),_Y=a("a"),G2r=o("LayoutLMv3ForQuestionAnswering"),O2r=o(" (LayoutLMv3 model)"),V2r=l(),IE=a("li"),ZEe=a("strong"),X2r=o("led"),z2r=o(" \u2014 "),bY=a("a"),Q2r=o("LEDForQuestionAnswering"),W2r=o(" (LED model)"),U2r=l(),NE=a("li"),e4e=a("strong"),H2r=o("longformer"),J2r=o(" \u2014 "),vY=a("a"),Y2r=o("LongformerForQuestionAnswering"),K2r=o(" (Longformer model)"),Z2r=l(),qE=a("li"),o4e=a("strong"),e1r=o("luke"),o1r=o(" \u2014 "),FY=a("a"),r1r=o("LukeForQuestionAnswering"),t1r=o(" (LUKE model)"),a1r=l(),jE=a("li"),r4e=a("strong"),n1r=o("lxmert"),s1r=o(" \u2014 "),TY=a("a"),l1r=o("LxmertForQuestionAnswering"),i1r=o(" (LXMERT model)"),d1r=l(),DE=a("li"),t4e=a("strong"),c1r=o("markuplm"),m1r=o(" \u2014 "),MY=a("a"),f1r=o("MarkupLMForQuestionAnswering"),g1r=o(" (MarkupLM model)"),h1r=l(),GE=a("li"),a4e=a("strong"),u1r=o("mbart"),p1r=o(" \u2014 "),EY=a("a"),_1r=o("MBartForQuestionAnswering"),b1r=o(" (mBART model)"),v1r=l(),OE=a("li"),n4e=a("strong"),F1r=o("megatron-bert"),T1r=o(" \u2014 "),CY=a("a"),M1r=o("MegatronBertForQuestionAnswering"),E1r=o(" (Megatron-BERT model)"),C1r=l(),VE=a("li"),s4e=a("strong"),w1r=o("mobilebert"),A1r=o(" \u2014 "),wY=a("a"),L1r=o("MobileBertForQuestionAnswering"),y1r=o(" (MobileBERT model)"),x1r=l(),XE=a("li"),l4e=a("strong"),$1r=o("mpnet"),k1r=o(" \u2014 "),AY=a("a"),S1r=o("MPNetForQuestionAnswering"),R1r=o(" (MPNet model)"),P1r=l(),zE=a("li"),i4e=a("strong"),B1r=o("mvp"),I1r=o(" \u2014 "),LY=a("a"),N1r=o("MvpForQuestionAnswering"),q1r=o(" (MVP model)"),j1r=l(),QE=a("li"),d4e=a("strong"),D1r=o("nezha"),G1r=o(" \u2014 "),yY=a("a"),O1r=o("NezhaForQuestionAnswering"),V1r=o(" (Nezha model)"),X1r=l(),WE=a("li"),c4e=a("strong"),z1r=o("nystromformer"),Q1r=o(" \u2014 "),xY=a("a"),W1r=o("NystromformerForQuestionAnswering"),U1r=o(" (Nystr\xF6mformer model)"),H1r=l(),UE=a("li"),m4e=a("strong"),J1r=o("qdqbert"),Y1r=o(" \u2014 "),$Y=a("a"),K1r=o("QDQBertForQuestionAnswering"),Z1r=o(" (QDQBert model)"),ebr=l(),HE=a("li"),f4e=a("strong"),obr=o("reformer"),rbr=o(" \u2014 "),kY=a("a"),tbr=o("ReformerForQuestionAnswering"),abr=o(" (Reformer model)"),nbr=l(),JE=a("li"),g4e=a("strong"),sbr=o("rembert"),lbr=o(" \u2014 "),SY=a("a"),ibr=o("RemBertForQuestionAnswering"),dbr=o(" (RemBERT model)"),cbr=l(),YE=a("li"),h4e=a("strong"),mbr=o("roberta"),fbr=o(" \u2014 "),RY=a("a"),gbr=o("RobertaForQuestionAnswering"),hbr=o(" (RoBERTa model)"),ubr=l(),KE=a("li"),u4e=a("strong"),pbr=o("roformer"),_br=o(" \u2014 "),PY=a("a"),bbr=o("RoFormerForQuestionAnswering"),vbr=o(" (RoFormer model)"),Fbr=l(),ZE=a("li"),p4e=a("strong"),Tbr=o("splinter"),Mbr=o(" \u2014 "),BY=a("a"),Ebr=o("SplinterForQuestionAnswering"),Cbr=o(" (Splinter model)"),wbr=l(),e4=a("li"),_4e=a("strong"),Abr=o("squeezebert"),Lbr=o(" \u2014 "),IY=a("a"),ybr=o("SqueezeBertForQuestionAnswering"),xbr=o(" (SqueezeBERT model)"),$br=l(),o4=a("li"),b4e=a("strong"),kbr=o("xlm"),Sbr=o(" \u2014 "),NY=a("a"),Rbr=o("XLMForQuestionAnsweringSimple"),Pbr=o(" (XLM model)"),Bbr=l(),r4=a("li"),v4e=a("strong"),Ibr=o("xlm-roberta"),Nbr=o(" \u2014 "),qY=a("a"),qbr=o("XLMRobertaForQuestionAnswering"),jbr=o(" (XLM-RoBERTa model)"),Dbr=l(),t4=a("li"),F4e=a("strong"),Gbr=o("xlm-roberta-xl"),Obr=o(" \u2014 "),jY=a("a"),Vbr=o("XLMRobertaXLForQuestionAnswering"),Xbr=o(" (XLM-RoBERTa-XL model)"),zbr=l(),a4=a("li"),T4e=a("strong"),Qbr=o("xlnet"),Wbr=o(" \u2014 "),DY=a("a"),Ubr=o("XLNetForQuestionAnsweringSimple"),Hbr=o(" (XLNet model)"),Jbr=l(),n4=a("li"),M4e=a("strong"),Ybr=o("yoso"),Kbr=o(" \u2014 "),GY=a("a"),Zbr=o("YosoForQuestionAnswering"),evr=o(" (YOSO model)"),ovr=l(),s4=a("p"),rvr=o("The model is set in evaluation mode by default using "),E4e=a("code"),tvr=o("model.eval()"),avr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C4e=a("code"),nvr=o("model.train()"),svr=l(),F(l4.$$.fragment),meo=l(),Wd=a("h2"),i4=a("a"),w4e=a("span"),F(F$.$$.fragment),lvr=l(),A4e=a("span"),ivr=o("AutoModelForTableQuestionAnswering"),feo=l(),Xo=a("div"),F(T$.$$.fragment),dvr=l(),Ud=a("p"),cvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OY=a("a"),mvr=o("from_pretrained()"),fvr=o(" class method or the "),VY=a("a"),gvr=o("from_config()"),hvr=o(` class
method.`),uvr=l(),M$=a("p"),pvr=o("This class cannot be instantiated directly using "),L4e=a("code"),_vr=o("__init__()"),bvr=o(" (throws an error)."),vvr=l(),Lt=a("div"),F(E$.$$.fragment),Fvr=l(),y4e=a("p"),Tvr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Mvr=l(),Hd=a("p"),Evr=o(`Note:
Loading a model from its configuration file does `),x4e=a("strong"),Cvr=o("not"),wvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),Avr=o("from_pretrained()"),Lvr=o(" to load the model weights."),yvr=l(),F(d4.$$.fragment),xvr=l(),co=a("div"),F(C$.$$.fragment),$vr=l(),$4e=a("p"),kvr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Svr=l(),sn=a("p"),Rvr=o("The model class to instantiate is selected based on the "),k4e=a("code"),Pvr=o("model_type"),Bvr=o(` property of the config object (either
passed as an argument or loaded from `),S4e=a("code"),Ivr=o("pretrained_model_name_or_path"),Nvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=a("code"),qvr=o("pretrained_model_name_or_path"),jvr=o(":"),Dvr=l(),P4e=a("ul"),c4=a("li"),B4e=a("strong"),Gvr=o("tapas"),Ovr=o(" \u2014 "),zY=a("a"),Vvr=o("TapasForQuestionAnswering"),Xvr=o(" (TAPAS model)"),zvr=l(),m4=a("p"),Qvr=o("The model is set in evaluation mode by default using "),I4e=a("code"),Wvr=o("model.eval()"),Uvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N4e=a("code"),Hvr=o("model.train()"),Jvr=l(),F(f4.$$.fragment),geo=l(),Jd=a("h2"),g4=a("a"),q4e=a("span"),F(w$.$$.fragment),Yvr=l(),j4e=a("span"),Kvr=o("AutoModelForDocumentQuestionAnswering"),heo=l(),zo=a("div"),F(A$.$$.fragment),Zvr=l(),Yd=a("p"),eFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),QY=a("a"),oFr=o("from_pretrained()"),rFr=o(" class method or the "),WY=a("a"),tFr=o("from_config()"),aFr=o(` class
method.`),nFr=l(),L$=a("p"),sFr=o("This class cannot be instantiated directly using "),D4e=a("code"),lFr=o("__init__()"),iFr=o(" (throws an error)."),dFr=l(),yt=a("div"),F(y$.$$.fragment),cFr=l(),G4e=a("p"),mFr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),fFr=l(),Kd=a("p"),gFr=o(`Note:
Loading a model from its configuration file does `),O4e=a("strong"),hFr=o("not"),uFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),pFr=o("from_pretrained()"),_Fr=o(" to load the model weights."),bFr=l(),F(h4.$$.fragment),vFr=l(),mo=a("div"),F(x$.$$.fragment),FFr=l(),V4e=a("p"),TFr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),MFr=l(),ln=a("p"),EFr=o("The model class to instantiate is selected based on the "),X4e=a("code"),CFr=o("model_type"),wFr=o(` property of the config object (either
passed as an argument or loaded from `),z4e=a("code"),AFr=o("pretrained_model_name_or_path"),LFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),yFr=o("pretrained_model_name_or_path"),xFr=o(":"),$Fr=l(),Zd=a("ul"),u4=a("li"),W4e=a("strong"),kFr=o("layoutlm"),SFr=o(" \u2014 "),HY=a("a"),RFr=o("LayoutLMForQuestionAnswering"),PFr=o(" (LayoutLM model)"),BFr=l(),p4=a("li"),U4e=a("strong"),IFr=o("layoutlmv2"),NFr=o(" \u2014 "),JY=a("a"),qFr=o("LayoutLMv2ForQuestionAnswering"),jFr=o(" (LayoutLMv2 model)"),DFr=l(),_4=a("li"),H4e=a("strong"),GFr=o("layoutlmv3"),OFr=o(" \u2014 "),YY=a("a"),VFr=o("LayoutLMv3ForQuestionAnswering"),XFr=o(" (LayoutLMv3 model)"),zFr=l(),b4=a("p"),QFr=o("The model is set in evaluation mode by default using "),J4e=a("code"),WFr=o("model.eval()"),UFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=a("code"),HFr=o("model.train()"),JFr=l(),F(v4.$$.fragment),ueo=l(),ec=a("h2"),F4=a("a"),K4e=a("span"),F($$.$$.fragment),YFr=l(),Z4e=a("span"),KFr=o("AutoModelForImageClassification"),peo=l(),Qo=a("div"),F(k$.$$.fragment),ZFr=l(),oc=a("p"),eTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KY=a("a"),oTr=o("from_pretrained()"),rTr=o(" class method or the "),ZY=a("a"),tTr=o("from_config()"),aTr=o(` class
method.`),nTr=l(),S$=a("p"),sTr=o("This class cannot be instantiated directly using "),eCe=a("code"),lTr=o("__init__()"),iTr=o(" (throws an error)."),dTr=l(),xt=a("div"),F(R$.$$.fragment),cTr=l(),oCe=a("p"),mTr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fTr=l(),rc=a("p"),gTr=o(`Note:
Loading a model from its configuration file does `),rCe=a("strong"),hTr=o("not"),uTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),pTr=o("from_pretrained()"),_Tr=o(" to load the model weights."),bTr=l(),F(T4.$$.fragment),vTr=l(),fo=a("div"),F(P$.$$.fragment),FTr=l(),tCe=a("p"),TTr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MTr=l(),dn=a("p"),ETr=o("The model class to instantiate is selected based on the "),aCe=a("code"),CTr=o("model_type"),wTr=o(` property of the config object (either
passed as an argument or loaded from `),nCe=a("code"),ATr=o("pretrained_model_name_or_path"),LTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=a("code"),yTr=o("pretrained_model_name_or_path"),xTr=o(":"),$Tr=l(),be=a("ul"),M4=a("li"),lCe=a("strong"),kTr=o("beit"),STr=o(" \u2014 "),oK=a("a"),RTr=o("BeitForImageClassification"),PTr=o(" (BEiT model)"),BTr=l(),E4=a("li"),iCe=a("strong"),ITr=o("convnext"),NTr=o(" \u2014 "),rK=a("a"),qTr=o("ConvNextForImageClassification"),jTr=o(" (ConvNeXT model)"),DTr=l(),C4=a("li"),dCe=a("strong"),GTr=o("cvt"),OTr=o(" \u2014 "),tK=a("a"),VTr=o("CvtForImageClassification"),XTr=o(" (CvT model)"),zTr=l(),w4=a("li"),cCe=a("strong"),QTr=o("data2vec-vision"),WTr=o(" \u2014 "),aK=a("a"),UTr=o("Data2VecVisionForImageClassification"),HTr=o(" (Data2VecVision model)"),JTr=l(),bl=a("li"),mCe=a("strong"),YTr=o("deit"),KTr=o(" \u2014 "),nK=a("a"),ZTr=o("DeiTForImageClassification"),eMr=o(" or "),sK=a("a"),oMr=o("DeiTForImageClassificationWithTeacher"),rMr=o(" (DeiT model)"),tMr=l(),A4=a("li"),fCe=a("strong"),aMr=o("imagegpt"),nMr=o(" \u2014 "),lK=a("a"),sMr=o("ImageGPTForImageClassification"),lMr=o(" (ImageGPT model)"),iMr=l(),vl=a("li"),gCe=a("strong"),dMr=o("levit"),cMr=o(" \u2014 "),iK=a("a"),mMr=o("LevitForImageClassification"),fMr=o(" or "),dK=a("a"),gMr=o("LevitForImageClassificationWithTeacher"),hMr=o(" (LeViT model)"),uMr=l(),L4=a("li"),hCe=a("strong"),pMr=o("mobilevit"),_Mr=o(" \u2014 "),cK=a("a"),bMr=o("MobileViTForImageClassification"),vMr=o(" (MobileViT model)"),FMr=l(),$t=a("li"),uCe=a("strong"),TMr=o("perceiver"),MMr=o(" \u2014 "),mK=a("a"),EMr=o("PerceiverForImageClassificationLearned"),CMr=o(" or "),fK=a("a"),wMr=o("PerceiverForImageClassificationFourier"),AMr=o(" or "),gK=a("a"),LMr=o("PerceiverForImageClassificationConvProcessing"),yMr=o(" (Perceiver model)"),xMr=l(),y4=a("li"),pCe=a("strong"),$Mr=o("poolformer"),kMr=o(" \u2014 "),hK=a("a"),SMr=o("PoolFormerForImageClassification"),RMr=o(" (PoolFormer model)"),PMr=l(),x4=a("li"),_Ce=a("strong"),BMr=o("regnet"),IMr=o(" \u2014 "),uK=a("a"),NMr=o("RegNetForImageClassification"),qMr=o(" (RegNet model)"),jMr=l(),$4=a("li"),bCe=a("strong"),DMr=o("resnet"),GMr=o(" \u2014 "),pK=a("a"),OMr=o("ResNetForImageClassification"),VMr=o(" (ResNet model)"),XMr=l(),k4=a("li"),vCe=a("strong"),zMr=o("segformer"),QMr=o(" \u2014 "),_K=a("a"),WMr=o("SegformerForImageClassification"),UMr=o(" (SegFormer model)"),HMr=l(),S4=a("li"),FCe=a("strong"),JMr=o("swin"),YMr=o(" \u2014 "),bK=a("a"),KMr=o("SwinForImageClassification"),ZMr=o(" (Swin Transformer model)"),eEr=l(),R4=a("li"),TCe=a("strong"),oEr=o("swinv2"),rEr=o(" \u2014 "),vK=a("a"),tEr=o("Swinv2ForImageClassification"),aEr=o(" (Swin Transformer V2 model)"),nEr=l(),P4=a("li"),MCe=a("strong"),sEr=o("van"),lEr=o(" \u2014 "),FK=a("a"),iEr=o("VanForImageClassification"),dEr=o(" (VAN model)"),cEr=l(),B4=a("li"),ECe=a("strong"),mEr=o("vit"),fEr=o(" \u2014 "),TK=a("a"),gEr=o("ViTForImageClassification"),hEr=o(" (ViT model)"),uEr=l(),I4=a("li"),CCe=a("strong"),pEr=o("vit_msn"),_Er=o(" \u2014 "),MK=a("a"),bEr=o("ViTMSNForImageClassification"),vEr=o(" (ViTMSN model)"),FEr=l(),N4=a("p"),TEr=o("The model is set in evaluation mode by default using "),wCe=a("code"),MEr=o("model.eval()"),EEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ACe=a("code"),CEr=o("model.train()"),wEr=l(),F(q4.$$.fragment),_eo=l(),tc=a("h2"),j4=a("a"),LCe=a("span"),F(B$.$$.fragment),AEr=l(),yCe=a("span"),LEr=o("AutoModelForVideoClassification"),beo=l(),Wo=a("div"),F(I$.$$.fragment),yEr=l(),ac=a("p"),xEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),EK=a("a"),$Er=o("from_pretrained()"),kEr=o(" class method or the "),CK=a("a"),SEr=o("from_config()"),REr=o(` class
method.`),PEr=l(),N$=a("p"),BEr=o("This class cannot be instantiated directly using "),xCe=a("code"),IEr=o("__init__()"),NEr=o(" (throws an error)."),qEr=l(),kt=a("div"),F(q$.$$.fragment),jEr=l(),$Ce=a("p"),DEr=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),GEr=l(),nc=a("p"),OEr=o(`Note:
Loading a model from its configuration file does `),kCe=a("strong"),VEr=o("not"),XEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=a("a"),zEr=o("from_pretrained()"),QEr=o(" to load the model weights."),WEr=l(),F(D4.$$.fragment),UEr=l(),go=a("div"),F(j$.$$.fragment),HEr=l(),SCe=a("p"),JEr=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),YEr=l(),cn=a("p"),KEr=o("The model class to instantiate is selected based on the "),RCe=a("code"),ZEr=o("model_type"),e4r=o(` property of the config object (either
passed as an argument or loaded from `),PCe=a("code"),o4r=o("pretrained_model_name_or_path"),r4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BCe=a("code"),t4r=o("pretrained_model_name_or_path"),a4r=o(":"),n4r=l(),ICe=a("ul"),G4=a("li"),NCe=a("strong"),s4r=o("videomae"),l4r=o(" \u2014 "),AK=a("a"),i4r=o("VideoMAEForVideoClassification"),d4r=o(" (VideoMAE model)"),c4r=l(),O4=a("p"),m4r=o("The model is set in evaluation mode by default using "),qCe=a("code"),f4r=o("model.eval()"),g4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jCe=a("code"),h4r=o("model.train()"),u4r=l(),F(V4.$$.fragment),veo=l(),sc=a("h2"),X4=a("a"),DCe=a("span"),F(D$.$$.fragment),p4r=l(),GCe=a("span"),_4r=o("AutoModelForVision2Seq"),Feo=l(),Uo=a("div"),F(G$.$$.fragment),b4r=l(),lc=a("p"),v4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LK=a("a"),F4r=o("from_pretrained()"),T4r=o(" class method or the "),yK=a("a"),M4r=o("from_config()"),E4r=o(` class
method.`),C4r=l(),O$=a("p"),w4r=o("This class cannot be instantiated directly using "),OCe=a("code"),A4r=o("__init__()"),L4r=o(" (throws an error)."),y4r=l(),St=a("div"),F(V$.$$.fragment),x4r=l(),VCe=a("p"),$4r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),k4r=l(),ic=a("p"),S4r=o(`Note:
Loading a model from its configuration file does `),XCe=a("strong"),R4r=o("not"),P4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=a("a"),B4r=o("from_pretrained()"),I4r=o(" to load the model weights."),N4r=l(),F(z4.$$.fragment),q4r=l(),ho=a("div"),F(X$.$$.fragment),j4r=l(),zCe=a("p"),D4r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),G4r=l(),mn=a("p"),O4r=o("The model class to instantiate is selected based on the "),QCe=a("code"),V4r=o("model_type"),X4r=o(` property of the config object (either
passed as an argument or loaded from `),WCe=a("code"),z4r=o("pretrained_model_name_or_path"),Q4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UCe=a("code"),W4r=o("pretrained_model_name_or_path"),U4r=o(":"),H4r=l(),HCe=a("ul"),Q4=a("li"),JCe=a("strong"),J4r=o("vision-encoder-decoder"),Y4r=o(" \u2014 "),$K=a("a"),K4r=o("VisionEncoderDecoderModel"),Z4r=o(" (Vision Encoder decoder model)"),eCr=l(),W4=a("p"),oCr=o("The model is set in evaluation mode by default using "),YCe=a("code"),rCr=o("model.eval()"),tCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KCe=a("code"),aCr=o("model.train()"),nCr=l(),F(U4.$$.fragment),Teo=l(),dc=a("h2"),H4=a("a"),ZCe=a("span"),F(z$.$$.fragment),sCr=l(),e3e=a("span"),lCr=o("AutoModelForVisualQuestionAnswering"),Meo=l(),Ho=a("div"),F(Q$.$$.fragment),iCr=l(),cc=a("p"),dCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),kK=a("a"),cCr=o("from_pretrained()"),mCr=o(" class method or the "),SK=a("a"),fCr=o("from_config()"),gCr=o(` class
method.`),hCr=l(),W$=a("p"),uCr=o("This class cannot be instantiated directly using "),o3e=a("code"),pCr=o("__init__()"),_Cr=o(" (throws an error)."),bCr=l(),Rt=a("div"),F(U$.$$.fragment),vCr=l(),r3e=a("p"),FCr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),TCr=l(),mc=a("p"),MCr=o(`Note:
Loading a model from its configuration file does `),t3e=a("strong"),ECr=o("not"),CCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("a"),wCr=o("from_pretrained()"),ACr=o(" to load the model weights."),LCr=l(),F(J4.$$.fragment),yCr=l(),uo=a("div"),F(H$.$$.fragment),xCr=l(),a3e=a("p"),$Cr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),kCr=l(),fn=a("p"),SCr=o("The model class to instantiate is selected based on the "),n3e=a("code"),RCr=o("model_type"),PCr=o(` property of the config object (either
passed as an argument or loaded from `),s3e=a("code"),BCr=o("pretrained_model_name_or_path"),ICr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=a("code"),NCr=o("pretrained_model_name_or_path"),qCr=o(":"),jCr=l(),i3e=a("ul"),Y4=a("li"),d3e=a("strong"),DCr=o("vilt"),GCr=o(" \u2014 "),PK=a("a"),OCr=o("ViltForQuestionAnswering"),VCr=o(" (ViLT model)"),XCr=l(),K4=a("p"),zCr=o("The model is set in evaluation mode by default using "),c3e=a("code"),QCr=o("model.eval()"),WCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m3e=a("code"),UCr=o("model.train()"),HCr=l(),F(Z4.$$.fragment),Eeo=l(),fc=a("h2"),eC=a("a"),f3e=a("span"),F(J$.$$.fragment),JCr=l(),g3e=a("span"),YCr=o("AutoModelForAudioClassification"),Ceo=l(),Jo=a("div"),F(Y$.$$.fragment),KCr=l(),gc=a("p"),ZCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),BK=a("a"),e3r=o("from_pretrained()"),o3r=o(" class method or the "),IK=a("a"),r3r=o("from_config()"),t3r=o(` class
method.`),a3r=l(),K$=a("p"),n3r=o("This class cannot be instantiated directly using "),h3e=a("code"),s3r=o("__init__()"),l3r=o(" (throws an error)."),i3r=l(),Pt=a("div"),F(Z$.$$.fragment),d3r=l(),u3e=a("p"),c3r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),m3r=l(),hc=a("p"),f3r=o(`Note:
Loading a model from its configuration file does `),p3e=a("strong"),g3r=o("not"),h3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=a("a"),u3r=o("from_pretrained()"),p3r=o(" to load the model weights."),_3r=l(),F(oC.$$.fragment),b3r=l(),po=a("div"),F(ek.$$.fragment),v3r=l(),_3e=a("p"),F3r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),T3r=l(),gn=a("p"),M3r=o("The model class to instantiate is selected based on the "),b3e=a("code"),E3r=o("model_type"),C3r=o(` property of the config object (either
passed as an argument or loaded from `),v3e=a("code"),w3r=o("pretrained_model_name_or_path"),A3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=a("code"),L3r=o("pretrained_model_name_or_path"),y3r=o(":"),x3r=l(),Pe=a("ul"),rC=a("li"),T3e=a("strong"),$3r=o("data2vec-audio"),k3r=o(" \u2014 "),qK=a("a"),S3r=o("Data2VecAudioForSequenceClassification"),R3r=o(" (Data2VecAudio model)"),P3r=l(),tC=a("li"),M3e=a("strong"),B3r=o("hubert"),I3r=o(" \u2014 "),jK=a("a"),N3r=o("HubertForSequenceClassification"),q3r=o(" (Hubert model)"),j3r=l(),aC=a("li"),E3e=a("strong"),D3r=o("sew"),G3r=o(" \u2014 "),DK=a("a"),O3r=o("SEWForSequenceClassification"),V3r=o(" (SEW model)"),X3r=l(),nC=a("li"),C3e=a("strong"),z3r=o("sew-d"),Q3r=o(" \u2014 "),GK=a("a"),W3r=o("SEWDForSequenceClassification"),U3r=o(" (SEW-D model)"),H3r=l(),sC=a("li"),w3e=a("strong"),J3r=o("unispeech"),Y3r=o(" \u2014 "),OK=a("a"),K3r=o("UniSpeechForSequenceClassification"),Z3r=o(" (UniSpeech model)"),e5r=l(),lC=a("li"),A3e=a("strong"),o5r=o("unispeech-sat"),r5r=o(" \u2014 "),VK=a("a"),t5r=o("UniSpeechSatForSequenceClassification"),a5r=o(" (UniSpeechSat model)"),n5r=l(),iC=a("li"),L3e=a("strong"),s5r=o("wav2vec2"),l5r=o(" \u2014 "),XK=a("a"),i5r=o("Wav2Vec2ForSequenceClassification"),d5r=o(" (Wav2Vec2 model)"),c5r=l(),dC=a("li"),y3e=a("strong"),m5r=o("wav2vec2-conformer"),f5r=o(" \u2014 "),zK=a("a"),g5r=o("Wav2Vec2ConformerForSequenceClassification"),h5r=o(" (Wav2Vec2-Conformer model)"),u5r=l(),cC=a("li"),x3e=a("strong"),p5r=o("wavlm"),_5r=o(" \u2014 "),QK=a("a"),b5r=o("WavLMForSequenceClassification"),v5r=o(" (WavLM model)"),F5r=l(),mC=a("p"),T5r=o("The model is set in evaluation mode by default using "),$3e=a("code"),M5r=o("model.eval()"),E5r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k3e=a("code"),C5r=o("model.train()"),w5r=l(),F(fC.$$.fragment),weo=l(),uc=a("h2"),gC=a("a"),S3e=a("span"),F(ok.$$.fragment),A5r=l(),R3e=a("span"),L5r=o("AutoModelForAudioFrameClassification"),Aeo=l(),Yo=a("div"),F(rk.$$.fragment),y5r=l(),pc=a("p"),x5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),WK=a("a"),$5r=o("from_pretrained()"),k5r=o(" class method or the "),UK=a("a"),S5r=o("from_config()"),R5r=o(` class
method.`),P5r=l(),tk=a("p"),B5r=o("This class cannot be instantiated directly using "),P3e=a("code"),I5r=o("__init__()"),N5r=o(" (throws an error)."),q5r=l(),Bt=a("div"),F(ak.$$.fragment),j5r=l(),B3e=a("p"),D5r=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),G5r=l(),_c=a("p"),O5r=o(`Note:
Loading a model from its configuration file does `),I3e=a("strong"),V5r=o("not"),X5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=a("a"),z5r=o("from_pretrained()"),Q5r=o(" to load the model weights."),W5r=l(),F(hC.$$.fragment),U5r=l(),_o=a("div"),F(nk.$$.fragment),H5r=l(),N3e=a("p"),J5r=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Y5r=l(),hn=a("p"),K5r=o("The model class to instantiate is selected based on the "),q3e=a("code"),Z5r=o("model_type"),e0r=o(` property of the config object (either
passed as an argument or loaded from `),j3e=a("code"),o0r=o("pretrained_model_name_or_path"),r0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D3e=a("code"),t0r=o("pretrained_model_name_or_path"),a0r=o(":"),n0r=l(),mt=a("ul"),uC=a("li"),G3e=a("strong"),s0r=o("data2vec-audio"),l0r=o(" \u2014 "),JK=a("a"),i0r=o("Data2VecAudioForAudioFrameClassification"),d0r=o(" (Data2VecAudio model)"),c0r=l(),pC=a("li"),O3e=a("strong"),m0r=o("unispeech-sat"),f0r=o(" \u2014 "),YK=a("a"),g0r=o("UniSpeechSatForAudioFrameClassification"),h0r=o(" (UniSpeechSat model)"),u0r=l(),_C=a("li"),V3e=a("strong"),p0r=o("wav2vec2"),_0r=o(" \u2014 "),KK=a("a"),b0r=o("Wav2Vec2ForAudioFrameClassification"),v0r=o(" (Wav2Vec2 model)"),F0r=l(),bC=a("li"),X3e=a("strong"),T0r=o("wav2vec2-conformer"),M0r=o(" \u2014 "),ZK=a("a"),E0r=o("Wav2Vec2ConformerForAudioFrameClassification"),C0r=o(" (Wav2Vec2-Conformer model)"),w0r=l(),vC=a("li"),z3e=a("strong"),A0r=o("wavlm"),L0r=o(" \u2014 "),eZ=a("a"),y0r=o("WavLMForAudioFrameClassification"),x0r=o(" (WavLM model)"),$0r=l(),FC=a("p"),k0r=o("The model is set in evaluation mode by default using "),Q3e=a("code"),S0r=o("model.eval()"),R0r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W3e=a("code"),P0r=o("model.train()"),B0r=l(),F(TC.$$.fragment),Leo=l(),bc=a("h2"),MC=a("a"),U3e=a("span"),F(sk.$$.fragment),I0r=l(),H3e=a("span"),N0r=o("AutoModelForCTC"),yeo=l(),Ko=a("div"),F(lk.$$.fragment),q0r=l(),vc=a("p"),j0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oZ=a("a"),D0r=o("from_pretrained()"),G0r=o(" class method or the "),rZ=a("a"),O0r=o("from_config()"),V0r=o(` class
method.`),X0r=l(),ik=a("p"),z0r=o("This class cannot be instantiated directly using "),J3e=a("code"),Q0r=o("__init__()"),W0r=o(" (throws an error)."),U0r=l(),It=a("div"),F(dk.$$.fragment),H0r=l(),Y3e=a("p"),J0r=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Y0r=l(),Fc=a("p"),K0r=o(`Note:
Loading a model from its configuration file does `),K3e=a("strong"),Z0r=o("not"),ewr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),owr=o("from_pretrained()"),rwr=o(" to load the model weights."),twr=l(),F(EC.$$.fragment),awr=l(),bo=a("div"),F(ck.$$.fragment),nwr=l(),Z3e=a("p"),swr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),lwr=l(),un=a("p"),iwr=o("The model class to instantiate is selected based on the "),e5e=a("code"),dwr=o("model_type"),cwr=o(` property of the config object (either
passed as an argument or loaded from `),o5e=a("code"),mwr=o("pretrained_model_name_or_path"),fwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=a("code"),gwr=o("pretrained_model_name_or_path"),hwr=o(":"),uwr=l(),Le=a("ul"),CC=a("li"),t5e=a("strong"),pwr=o("data2vec-audio"),_wr=o(" \u2014 "),aZ=a("a"),bwr=o("Data2VecAudioForCTC"),vwr=o(" (Data2VecAudio model)"),Fwr=l(),wC=a("li"),a5e=a("strong"),Twr=o("hubert"),Mwr=o(" \u2014 "),nZ=a("a"),Ewr=o("HubertForCTC"),Cwr=o(" (Hubert model)"),wwr=l(),AC=a("li"),n5e=a("strong"),Awr=o("mctct"),Lwr=o(" \u2014 "),sZ=a("a"),ywr=o("MCTCTForCTC"),xwr=o(" (M-CTC-T model)"),$wr=l(),LC=a("li"),s5e=a("strong"),kwr=o("sew"),Swr=o(" \u2014 "),lZ=a("a"),Rwr=o("SEWForCTC"),Pwr=o(" (SEW model)"),Bwr=l(),yC=a("li"),l5e=a("strong"),Iwr=o("sew-d"),Nwr=o(" \u2014 "),iZ=a("a"),qwr=o("SEWDForCTC"),jwr=o(" (SEW-D model)"),Dwr=l(),xC=a("li"),i5e=a("strong"),Gwr=o("unispeech"),Owr=o(" \u2014 "),dZ=a("a"),Vwr=o("UniSpeechForCTC"),Xwr=o(" (UniSpeech model)"),zwr=l(),$C=a("li"),d5e=a("strong"),Qwr=o("unispeech-sat"),Wwr=o(" \u2014 "),cZ=a("a"),Uwr=o("UniSpeechSatForCTC"),Hwr=o(" (UniSpeechSat model)"),Jwr=l(),kC=a("li"),c5e=a("strong"),Ywr=o("wav2vec2"),Kwr=o(" \u2014 "),mZ=a("a"),Zwr=o("Wav2Vec2ForCTC"),eAr=o(" (Wav2Vec2 model)"),oAr=l(),SC=a("li"),m5e=a("strong"),rAr=o("wav2vec2-conformer"),tAr=o(" \u2014 "),fZ=a("a"),aAr=o("Wav2Vec2ConformerForCTC"),nAr=o(" (Wav2Vec2-Conformer model)"),sAr=l(),RC=a("li"),f5e=a("strong"),lAr=o("wavlm"),iAr=o(" \u2014 "),gZ=a("a"),dAr=o("WavLMForCTC"),cAr=o(" (WavLM model)"),mAr=l(),PC=a("p"),fAr=o("The model is set in evaluation mode by default using "),g5e=a("code"),gAr=o("model.eval()"),hAr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h5e=a("code"),uAr=o("model.train()"),pAr=l(),F(BC.$$.fragment),xeo=l(),Tc=a("h2"),IC=a("a"),u5e=a("span"),F(mk.$$.fragment),_Ar=l(),p5e=a("span"),bAr=o("AutoModelForSpeechSeq2Seq"),$eo=l(),Zo=a("div"),F(fk.$$.fragment),vAr=l(),Mc=a("p"),FAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hZ=a("a"),TAr=o("from_pretrained()"),MAr=o(" class method or the "),uZ=a("a"),EAr=o("from_config()"),CAr=o(` class
method.`),wAr=l(),gk=a("p"),AAr=o("This class cannot be instantiated directly using "),_5e=a("code"),LAr=o("__init__()"),yAr=o(" (throws an error)."),xAr=l(),Nt=a("div"),F(hk.$$.fragment),$Ar=l(),b5e=a("p"),kAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),SAr=l(),Ec=a("p"),RAr=o(`Note:
Loading a model from its configuration file does `),v5e=a("strong"),PAr=o("not"),BAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=a("a"),IAr=o("from_pretrained()"),NAr=o(" to load the model weights."),qAr=l(),F(NC.$$.fragment),jAr=l(),vo=a("div"),F(uk.$$.fragment),DAr=l(),F5e=a("p"),GAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),OAr=l(),pn=a("p"),VAr=o("The model class to instantiate is selected based on the "),T5e=a("code"),XAr=o("model_type"),zAr=o(` property of the config object (either
passed as an argument or loaded from `),M5e=a("code"),QAr=o("pretrained_model_name_or_path"),WAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=a("code"),UAr=o("pretrained_model_name_or_path"),HAr=o(":"),JAr=l(),pk=a("ul"),qC=a("li"),C5e=a("strong"),YAr=o("speech-encoder-decoder"),KAr=o(" \u2014 "),_Z=a("a"),ZAr=o("SpeechEncoderDecoderModel"),e6r=o(" (Speech Encoder decoder model)"),o6r=l(),jC=a("li"),w5e=a("strong"),r6r=o("speech_to_text"),t6r=o(" \u2014 "),bZ=a("a"),a6r=o("Speech2TextForConditionalGeneration"),n6r=o(" (Speech2Text model)"),s6r=l(),DC=a("p"),l6r=o("The model is set in evaluation mode by default using "),A5e=a("code"),i6r=o("model.eval()"),d6r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L5e=a("code"),c6r=o("model.train()"),m6r=l(),F(GC.$$.fragment),keo=l(),Cc=a("h2"),OC=a("a"),y5e=a("span"),F(_k.$$.fragment),f6r=l(),x5e=a("span"),g6r=o("AutoModelForAudioXVector"),Seo=l(),er=a("div"),F(bk.$$.fragment),h6r=l(),wc=a("p"),u6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vZ=a("a"),p6r=o("from_pretrained()"),_6r=o(" class method or the "),FZ=a("a"),b6r=o("from_config()"),v6r=o(` class
method.`),F6r=l(),vk=a("p"),T6r=o("This class cannot be instantiated directly using "),$5e=a("code"),M6r=o("__init__()"),E6r=o(" (throws an error)."),C6r=l(),qt=a("div"),F(Fk.$$.fragment),w6r=l(),k5e=a("p"),A6r=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),L6r=l(),Ac=a("p"),y6r=o(`Note:
Loading a model from its configuration file does `),S5e=a("strong"),x6r=o("not"),$6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),k6r=o("from_pretrained()"),S6r=o(" to load the model weights."),R6r=l(),F(VC.$$.fragment),P6r=l(),Fo=a("div"),F(Tk.$$.fragment),B6r=l(),R5e=a("p"),I6r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),N6r=l(),_n=a("p"),q6r=o("The model class to instantiate is selected based on the "),P5e=a("code"),j6r=o("model_type"),D6r=o(` property of the config object (either
passed as an argument or loaded from `),B5e=a("code"),G6r=o("pretrained_model_name_or_path"),O6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=a("code"),V6r=o("pretrained_model_name_or_path"),X6r=o(":"),z6r=l(),ft=a("ul"),XC=a("li"),N5e=a("strong"),Q6r=o("data2vec-audio"),W6r=o(" \u2014 "),MZ=a("a"),U6r=o("Data2VecAudioForXVector"),H6r=o(" (Data2VecAudio model)"),J6r=l(),zC=a("li"),q5e=a("strong"),Y6r=o("unispeech-sat"),K6r=o(" \u2014 "),EZ=a("a"),Z6r=o("UniSpeechSatForXVector"),e7r=o(" (UniSpeechSat model)"),o7r=l(),QC=a("li"),j5e=a("strong"),r7r=o("wav2vec2"),t7r=o(" \u2014 "),CZ=a("a"),a7r=o("Wav2Vec2ForXVector"),n7r=o(" (Wav2Vec2 model)"),s7r=l(),WC=a("li"),D5e=a("strong"),l7r=o("wav2vec2-conformer"),i7r=o(" \u2014 "),wZ=a("a"),d7r=o("Wav2Vec2ConformerForXVector"),c7r=o(" (Wav2Vec2-Conformer model)"),m7r=l(),UC=a("li"),G5e=a("strong"),f7r=o("wavlm"),g7r=o(" \u2014 "),AZ=a("a"),h7r=o("WavLMForXVector"),u7r=o(" (WavLM model)"),p7r=l(),HC=a("p"),_7r=o("The model is set in evaluation mode by default using "),O5e=a("code"),b7r=o("model.eval()"),v7r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V5e=a("code"),F7r=o("model.train()"),T7r=l(),F(JC.$$.fragment),Reo=l(),Lc=a("h2"),YC=a("a"),X5e=a("span"),F(Mk.$$.fragment),M7r=l(),z5e=a("span"),E7r=o("AutoModelForMaskedImageModeling"),Peo=l(),or=a("div"),F(Ek.$$.fragment),C7r=l(),yc=a("p"),w7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LZ=a("a"),A7r=o("from_pretrained()"),L7r=o(" class method or the "),yZ=a("a"),y7r=o("from_config()"),x7r=o(` class
method.`),$7r=l(),Ck=a("p"),k7r=o("This class cannot be instantiated directly using "),Q5e=a("code"),S7r=o("__init__()"),R7r=o(" (throws an error)."),P7r=l(),jt=a("div"),F(wk.$$.fragment),B7r=l(),W5e=a("p"),I7r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),N7r=l(),xc=a("p"),q7r=o(`Note:
Loading a model from its configuration file does `),U5e=a("strong"),j7r=o("not"),D7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=a("a"),G7r=o("from_pretrained()"),O7r=o(" to load the model weights."),V7r=l(),F(KC.$$.fragment),X7r=l(),To=a("div"),F(Ak.$$.fragment),z7r=l(),H5e=a("p"),Q7r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),W7r=l(),bn=a("p"),U7r=o("The model class to instantiate is selected based on the "),J5e=a("code"),H7r=o("model_type"),J7r=o(` property of the config object (either
passed as an argument or loaded from `),Y5e=a("code"),Y7r=o("pretrained_model_name_or_path"),K7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=a("code"),Z7r=o("pretrained_model_name_or_path"),eLr=o(":"),oLr=l(),vn=a("ul"),ZC=a("li"),Z5e=a("strong"),rLr=o("deit"),tLr=o(" \u2014 "),$Z=a("a"),aLr=o("DeiTForMaskedImageModeling"),nLr=o(" (DeiT model)"),sLr=l(),e3=a("li"),e0e=a("strong"),lLr=o("swin"),iLr=o(" \u2014 "),kZ=a("a"),dLr=o("SwinForMaskedImageModeling"),cLr=o(" (Swin Transformer model)"),mLr=l(),o3=a("li"),o0e=a("strong"),fLr=o("swinv2"),gLr=o(" \u2014 "),SZ=a("a"),hLr=o("Swinv2ForMaskedImageModeling"),uLr=o(" (Swin Transformer V2 model)"),pLr=l(),r3=a("li"),r0e=a("strong"),_Lr=o("vit"),bLr=o(" \u2014 "),RZ=a("a"),vLr=o("ViTForMaskedImageModeling"),FLr=o(" (ViT model)"),TLr=l(),t3=a("p"),MLr=o("The model is set in evaluation mode by default using "),t0e=a("code"),ELr=o("model.eval()"),CLr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a0e=a("code"),wLr=o("model.train()"),ALr=l(),F(a3.$$.fragment),Beo=l(),$c=a("h2"),n3=a("a"),n0e=a("span"),F(Lk.$$.fragment),LLr=l(),s0e=a("span"),yLr=o("AutoModelForObjectDetection"),Ieo=l(),rr=a("div"),F(yk.$$.fragment),xLr=l(),kc=a("p"),$Lr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PZ=a("a"),kLr=o("from_pretrained()"),SLr=o(" class method or the "),BZ=a("a"),RLr=o("from_config()"),PLr=o(` class
method.`),BLr=l(),xk=a("p"),ILr=o("This class cannot be instantiated directly using "),l0e=a("code"),NLr=o("__init__()"),qLr=o(" (throws an error)."),jLr=l(),Dt=a("div"),F($k.$$.fragment),DLr=l(),i0e=a("p"),GLr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),OLr=l(),Sc=a("p"),VLr=o(`Note:
Loading a model from its configuration file does `),d0e=a("strong"),XLr=o("not"),zLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IZ=a("a"),QLr=o("from_pretrained()"),WLr=o(" to load the model weights."),ULr=l(),F(s3.$$.fragment),HLr=l(),Mo=a("div"),F(kk.$$.fragment),JLr=l(),c0e=a("p"),YLr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),KLr=l(),Fn=a("p"),ZLr=o("The model class to instantiate is selected based on the "),m0e=a("code"),eyr=o("model_type"),oyr=o(` property of the config object (either
passed as an argument or loaded from `),f0e=a("code"),ryr=o("pretrained_model_name_or_path"),tyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=a("code"),ayr=o("pretrained_model_name_or_path"),nyr=o(":"),syr=l(),Tn=a("ul"),l3=a("li"),h0e=a("strong"),lyr=o("conditional_detr"),iyr=o(" \u2014 "),NZ=a("a"),dyr=o("ConditionalDetrForObjectDetection"),cyr=o(" (Conditional DETR model)"),myr=l(),i3=a("li"),u0e=a("strong"),fyr=o("deformable_detr"),gyr=o(" \u2014 "),qZ=a("a"),hyr=o("DeformableDetrForObjectDetection"),uyr=o(" (Deformable DETR model)"),pyr=l(),d3=a("li"),p0e=a("strong"),_yr=o("detr"),byr=o(" \u2014 "),jZ=a("a"),vyr=o("DetrForObjectDetection"),Fyr=o(" (DETR model)"),Tyr=l(),c3=a("li"),_0e=a("strong"),Myr=o("yolos"),Eyr=o(" \u2014 "),DZ=a("a"),Cyr=o("YolosForObjectDetection"),wyr=o(" (YOLOS model)"),Ayr=l(),m3=a("p"),Lyr=o("The model is set in evaluation mode by default using "),b0e=a("code"),yyr=o("model.eval()"),xyr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v0e=a("code"),$yr=o("model.train()"),kyr=l(),F(f3.$$.fragment),Neo=l(),Rc=a("h2"),g3=a("a"),F0e=a("span"),F(Sk.$$.fragment),Syr=l(),T0e=a("span"),Ryr=o("AutoModelForImageSegmentation"),qeo=l(),tr=a("div"),F(Rk.$$.fragment),Pyr=l(),Pc=a("p"),Byr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),GZ=a("a"),Iyr=o("from_pretrained()"),Nyr=o(" class method or the "),OZ=a("a"),qyr=o("from_config()"),jyr=o(` class
method.`),Dyr=l(),Pk=a("p"),Gyr=o("This class cannot be instantiated directly using "),M0e=a("code"),Oyr=o("__init__()"),Vyr=o(" (throws an error)."),Xyr=l(),Gt=a("div"),F(Bk.$$.fragment),zyr=l(),E0e=a("p"),Qyr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Wyr=l(),Bc=a("p"),Uyr=o(`Note:
Loading a model from its configuration file does `),C0e=a("strong"),Hyr=o("not"),Jyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=a("a"),Yyr=o("from_pretrained()"),Kyr=o(" to load the model weights."),Zyr=l(),F(h3.$$.fragment),e8r=l(),Eo=a("div"),F(Ik.$$.fragment),o8r=l(),w0e=a("p"),r8r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),t8r=l(),Mn=a("p"),a8r=o("The model class to instantiate is selected based on the "),A0e=a("code"),n8r=o("model_type"),s8r=o(` property of the config object (either
passed as an argument or loaded from `),L0e=a("code"),l8r=o("pretrained_model_name_or_path"),i8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=a("code"),d8r=o("pretrained_model_name_or_path"),c8r=o(":"),m8r=l(),x0e=a("ul"),u3=a("li"),$0e=a("strong"),f8r=o("detr"),g8r=o(" \u2014 "),XZ=a("a"),h8r=o("DetrForSegmentation"),u8r=o(" (DETR model)"),p8r=l(),p3=a("p"),_8r=o("The model is set in evaluation mode by default using "),k0e=a("code"),b8r=o("model.eval()"),v8r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S0e=a("code"),F8r=o("model.train()"),T8r=l(),F(_3.$$.fragment),jeo=l(),Ic=a("h2"),b3=a("a"),R0e=a("span"),F(Nk.$$.fragment),M8r=l(),P0e=a("span"),E8r=o("AutoModelForSemanticSegmentation"),Deo=l(),ar=a("div"),F(qk.$$.fragment),C8r=l(),Nc=a("p"),w8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),zZ=a("a"),A8r=o("from_pretrained()"),L8r=o(" class method or the "),QZ=a("a"),y8r=o("from_config()"),x8r=o(` class
method.`),$8r=l(),jk=a("p"),k8r=o("This class cannot be instantiated directly using "),B0e=a("code"),S8r=o("__init__()"),R8r=o(" (throws an error)."),P8r=l(),Ot=a("div"),F(Dk.$$.fragment),B8r=l(),I0e=a("p"),I8r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),N8r=l(),qc=a("p"),q8r=o(`Note:
Loading a model from its configuration file does `),N0e=a("strong"),j8r=o("not"),D8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=a("a"),G8r=o("from_pretrained()"),O8r=o(" to load the model weights."),V8r=l(),F(v3.$$.fragment),X8r=l(),Co=a("div"),F(Gk.$$.fragment),z8r=l(),q0e=a("p"),Q8r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),W8r=l(),En=a("p"),U8r=o("The model class to instantiate is selected based on the "),j0e=a("code"),H8r=o("model_type"),J8r=o(` property of the config object (either
passed as an argument or loaded from `),D0e=a("code"),Y8r=o("pretrained_model_name_or_path"),K8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=a("code"),Z8r=o("pretrained_model_name_or_path"),e9r=o(":"),o9r=l(),gt=a("ul"),F3=a("li"),O0e=a("strong"),r9r=o("beit"),t9r=o(" \u2014 "),UZ=a("a"),a9r=o("BeitForSemanticSegmentation"),n9r=o(" (BEiT model)"),s9r=l(),T3=a("li"),V0e=a("strong"),l9r=o("data2vec-vision"),i9r=o(" \u2014 "),HZ=a("a"),d9r=o("Data2VecVisionForSemanticSegmentation"),c9r=o(" (Data2VecVision model)"),m9r=l(),M3=a("li"),X0e=a("strong"),f9r=o("dpt"),g9r=o(" \u2014 "),JZ=a("a"),h9r=o("DPTForSemanticSegmentation"),u9r=o(" (DPT model)"),p9r=l(),E3=a("li"),z0e=a("strong"),_9r=o("mobilevit"),b9r=o(" \u2014 "),YZ=a("a"),v9r=o("MobileViTForSemanticSegmentation"),F9r=o(" (MobileViT model)"),T9r=l(),C3=a("li"),Q0e=a("strong"),M9r=o("segformer"),E9r=o(" \u2014 "),KZ=a("a"),C9r=o("SegformerForSemanticSegmentation"),w9r=o(" (SegFormer model)"),A9r=l(),w3=a("p"),L9r=o("The model is set in evaluation mode by default using "),W0e=a("code"),y9r=o("model.eval()"),x9r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U0e=a("code"),$9r=o("model.train()"),k9r=l(),F(A3.$$.fragment),Geo=l(),jc=a("h2"),L3=a("a"),H0e=a("span"),F(Ok.$$.fragment),S9r=l(),J0e=a("span"),R9r=o("AutoModelForInstanceSegmentation"),Oeo=l(),nr=a("div"),F(Vk.$$.fragment),P9r=l(),Dc=a("p"),B9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),ZZ=a("a"),I9r=o("from_pretrained()"),N9r=o(" class method or the "),eee=a("a"),q9r=o("from_config()"),j9r=o(` class
method.`),D9r=l(),Xk=a("p"),G9r=o("This class cannot be instantiated directly using "),Y0e=a("code"),O9r=o("__init__()"),V9r=o(" (throws an error)."),X9r=l(),Vt=a("div"),F(zk.$$.fragment),z9r=l(),K0e=a("p"),Q9r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),W9r=l(),Gc=a("p"),U9r=o(`Note:
Loading a model from its configuration file does `),Z0e=a("strong"),H9r=o("not"),J9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),Y9r=o("from_pretrained()"),K9r=o(" to load the model weights."),Z9r=l(),F(y3.$$.fragment),exr=l(),wo=a("div"),F(Qk.$$.fragment),oxr=l(),ewe=a("p"),rxr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),txr=l(),Cn=a("p"),axr=o("The model class to instantiate is selected based on the "),owe=a("code"),nxr=o("model_type"),sxr=o(` property of the config object (either
passed as an argument or loaded from `),rwe=a("code"),lxr=o("pretrained_model_name_or_path"),ixr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),twe=a("code"),dxr=o("pretrained_model_name_or_path"),cxr=o(":"),mxr=l(),awe=a("ul"),x3=a("li"),nwe=a("strong"),fxr=o("maskformer"),gxr=o(" \u2014 "),ree=a("a"),hxr=o("MaskFormerForInstanceSegmentation"),uxr=o(" (MaskFormer model)"),pxr=l(),$3=a("p"),_xr=o("The model is set in evaluation mode by default using "),swe=a("code"),bxr=o("model.eval()"),vxr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lwe=a("code"),Fxr=o("model.train()"),Txr=l(),F(k3.$$.fragment),Veo=l(),Oc=a("h2"),S3=a("a"),iwe=a("span"),F(Wk.$$.fragment),Mxr=l(),dwe=a("span"),Exr=o("TFAutoModel"),Xeo=l(),sr=a("div"),F(Uk.$$.fragment),Cxr=l(),Vc=a("p"),wxr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tee=a("a"),Axr=o("from_pretrained()"),Lxr=o(" class method or the "),aee=a("a"),yxr=o("from_config()"),xxr=o(` class
method.`),$xr=l(),Hk=a("p"),kxr=o("This class cannot be instantiated directly using "),cwe=a("code"),Sxr=o("__init__()"),Rxr=o(" (throws an error)."),Pxr=l(),Xt=a("div"),F(Jk.$$.fragment),Bxr=l(),mwe=a("p"),Ixr=o("Instantiates one of the base model classes of the library from a configuration."),Nxr=l(),Xc=a("p"),qxr=o(`Note:
Loading a model from its configuration file does `),fwe=a("strong"),jxr=o("not"),Dxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=a("a"),Gxr=o("from_pretrained()"),Oxr=o(" to load the model weights."),Vxr=l(),F(R3.$$.fragment),Xxr=l(),Ir=a("div"),F(Yk.$$.fragment),zxr=l(),gwe=a("p"),Qxr=o("Instantiate one of the base model classes of the library from a pretrained model."),Wxr=l(),wn=a("p"),Uxr=o("The model class to instantiate is selected based on the "),hwe=a("code"),Hxr=o("model_type"),Jxr=o(` property of the config object (either
passed as an argument or loaded from `),uwe=a("code"),Yxr=o("pretrained_model_name_or_path"),Kxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pwe=a("code"),Zxr=o("pretrained_model_name_or_path"),e$r=o(":"),o$r=l(),I=a("ul"),P3=a("li"),_we=a("strong"),r$r=o("albert"),t$r=o(" \u2014 "),see=a("a"),a$r=o("TFAlbertModel"),n$r=o(" (ALBERT model)"),s$r=l(),B3=a("li"),bwe=a("strong"),l$r=o("bart"),i$r=o(" \u2014 "),lee=a("a"),d$r=o("TFBartModel"),c$r=o(" (BART model)"),m$r=l(),I3=a("li"),vwe=a("strong"),f$r=o("bert"),g$r=o(" \u2014 "),iee=a("a"),h$r=o("TFBertModel"),u$r=o(" (BERT model)"),p$r=l(),N3=a("li"),Fwe=a("strong"),_$r=o("blenderbot"),b$r=o(" \u2014 "),dee=a("a"),v$r=o("TFBlenderbotModel"),F$r=o(" (Blenderbot model)"),T$r=l(),q3=a("li"),Twe=a("strong"),M$r=o("blenderbot-small"),E$r=o(" \u2014 "),cee=a("a"),C$r=o("TFBlenderbotSmallModel"),w$r=o(" (BlenderbotSmall model)"),A$r=l(),j3=a("li"),Mwe=a("strong"),L$r=o("camembert"),y$r=o(" \u2014 "),mee=a("a"),x$r=o("TFCamembertModel"),$$r=o(" (CamemBERT model)"),k$r=l(),D3=a("li"),Ewe=a("strong"),S$r=o("clip"),R$r=o(" \u2014 "),fee=a("a"),P$r=o("TFCLIPModel"),B$r=o(" (CLIP model)"),I$r=l(),G3=a("li"),Cwe=a("strong"),N$r=o("convbert"),q$r=o(" \u2014 "),gee=a("a"),j$r=o("TFConvBertModel"),D$r=o(" (ConvBERT model)"),G$r=l(),O3=a("li"),wwe=a("strong"),O$r=o("convnext"),V$r=o(" \u2014 "),hee=a("a"),X$r=o("TFConvNextModel"),z$r=o(" (ConvNeXT model)"),Q$r=l(),V3=a("li"),Awe=a("strong"),W$r=o("ctrl"),U$r=o(" \u2014 "),uee=a("a"),H$r=o("TFCTRLModel"),J$r=o(" (CTRL model)"),Y$r=l(),X3=a("li"),Lwe=a("strong"),K$r=o("data2vec-vision"),Z$r=o(" \u2014 "),pee=a("a"),ekr=o("TFData2VecVisionModel"),okr=o(" (Data2VecVision model)"),rkr=l(),z3=a("li"),ywe=a("strong"),tkr=o("deberta"),akr=o(" \u2014 "),_ee=a("a"),nkr=o("TFDebertaModel"),skr=o(" (DeBERTa model)"),lkr=l(),Q3=a("li"),xwe=a("strong"),ikr=o("deberta-v2"),dkr=o(" \u2014 "),bee=a("a"),ckr=o("TFDebertaV2Model"),mkr=o(" (DeBERTa-v2 model)"),fkr=l(),W3=a("li"),$we=a("strong"),gkr=o("deit"),hkr=o(" \u2014 "),vee=a("a"),ukr=o("TFDeiTModel"),pkr=o(" (DeiT model)"),_kr=l(),U3=a("li"),kwe=a("strong"),bkr=o("distilbert"),vkr=o(" \u2014 "),Fee=a("a"),Fkr=o("TFDistilBertModel"),Tkr=o(" (DistilBERT model)"),Mkr=l(),H3=a("li"),Swe=a("strong"),Ekr=o("dpr"),Ckr=o(" \u2014 "),Tee=a("a"),wkr=o("TFDPRQuestionEncoder"),Akr=o(" (DPR model)"),Lkr=l(),J3=a("li"),Rwe=a("strong"),ykr=o("electra"),xkr=o(" \u2014 "),Mee=a("a"),$kr=o("TFElectraModel"),kkr=o(" (ELECTRA model)"),Skr=l(),Y3=a("li"),Pwe=a("strong"),Rkr=o("flaubert"),Pkr=o(" \u2014 "),Eee=a("a"),Bkr=o("TFFlaubertModel"),Ikr=o(" (FlauBERT model)"),Nkr=l(),Fl=a("li"),Bwe=a("strong"),qkr=o("funnel"),jkr=o(" \u2014 "),Cee=a("a"),Dkr=o("TFFunnelModel"),Gkr=o(" or "),wee=a("a"),Okr=o("TFFunnelBaseModel"),Vkr=o(" (Funnel Transformer model)"),Xkr=l(),K3=a("li"),Iwe=a("strong"),zkr=o("gpt2"),Qkr=o(" \u2014 "),Aee=a("a"),Wkr=o("TFGPT2Model"),Ukr=o(" (OpenAI GPT-2 model)"),Hkr=l(),Z3=a("li"),Nwe=a("strong"),Jkr=o("gptj"),Ykr=o(" \u2014 "),Lee=a("a"),Kkr=o("TFGPTJModel"),Zkr=o(" (GPT-J model)"),eSr=l(),e5=a("li"),qwe=a("strong"),oSr=o("groupvit"),rSr=o(" \u2014 "),yee=a("a"),tSr=o("TFGroupViTModel"),aSr=o(" (GroupViT model)"),nSr=l(),o5=a("li"),jwe=a("strong"),sSr=o("hubert"),lSr=o(" \u2014 "),xee=a("a"),iSr=o("TFHubertModel"),dSr=o(" (Hubert model)"),cSr=l(),r5=a("li"),Dwe=a("strong"),mSr=o("layoutlm"),fSr=o(" \u2014 "),$ee=a("a"),gSr=o("TFLayoutLMModel"),hSr=o(" (LayoutLM model)"),uSr=l(),t5=a("li"),Gwe=a("strong"),pSr=o("layoutlmv3"),_Sr=o(" \u2014 "),kee=a("a"),bSr=o("TFLayoutLMv3Model"),vSr=o(" (LayoutLMv3 model)"),FSr=l(),a5=a("li"),Owe=a("strong"),TSr=o("led"),MSr=o(" \u2014 "),See=a("a"),ESr=o("TFLEDModel"),CSr=o(" (LED model)"),wSr=l(),n5=a("li"),Vwe=a("strong"),ASr=o("longformer"),LSr=o(" \u2014 "),Ree=a("a"),ySr=o("TFLongformerModel"),xSr=o(" (Longformer model)"),$Sr=l(),s5=a("li"),Xwe=a("strong"),kSr=o("lxmert"),SSr=o(" \u2014 "),Pee=a("a"),RSr=o("TFLxmertModel"),PSr=o(" (LXMERT model)"),BSr=l(),l5=a("li"),zwe=a("strong"),ISr=o("marian"),NSr=o(" \u2014 "),Bee=a("a"),qSr=o("TFMarianModel"),jSr=o(" (Marian model)"),DSr=l(),i5=a("li"),Qwe=a("strong"),GSr=o("mbart"),OSr=o(" \u2014 "),Iee=a("a"),VSr=o("TFMBartModel"),XSr=o(" (mBART model)"),zSr=l(),d5=a("li"),Wwe=a("strong"),QSr=o("mobilebert"),WSr=o(" \u2014 "),Nee=a("a"),USr=o("TFMobileBertModel"),HSr=o(" (MobileBERT model)"),JSr=l(),c5=a("li"),Uwe=a("strong"),YSr=o("mobilevit"),KSr=o(" \u2014 "),qee=a("a"),ZSr=o("TFMobileViTModel"),eRr=o(" (MobileViT model)"),oRr=l(),m5=a("li"),Hwe=a("strong"),rRr=o("mpnet"),tRr=o(" \u2014 "),jee=a("a"),aRr=o("TFMPNetModel"),nRr=o(" (MPNet model)"),sRr=l(),f5=a("li"),Jwe=a("strong"),lRr=o("mt5"),iRr=o(" \u2014 "),Dee=a("a"),dRr=o("TFMT5Model"),cRr=o(" (MT5 model)"),mRr=l(),g5=a("li"),Ywe=a("strong"),fRr=o("openai-gpt"),gRr=o(" \u2014 "),Gee=a("a"),hRr=o("TFOpenAIGPTModel"),uRr=o(" (OpenAI GPT model)"),pRr=l(),h5=a("li"),Kwe=a("strong"),_Rr=o("opt"),bRr=o(" \u2014 "),Oee=a("a"),vRr=o("TFOPTModel"),FRr=o(" (OPT model)"),TRr=l(),u5=a("li"),Zwe=a("strong"),MRr=o("pegasus"),ERr=o(" \u2014 "),Vee=a("a"),CRr=o("TFPegasusModel"),wRr=o(" (Pegasus model)"),ARr=l(),p5=a("li"),eAe=a("strong"),LRr=o("regnet"),yRr=o(" \u2014 "),Xee=a("a"),xRr=o("TFRegNetModel"),$Rr=o(" (RegNet model)"),kRr=l(),_5=a("li"),oAe=a("strong"),SRr=o("rembert"),RRr=o(" \u2014 "),zee=a("a"),PRr=o("TFRemBertModel"),BRr=o(" (RemBERT model)"),IRr=l(),b5=a("li"),rAe=a("strong"),NRr=o("resnet"),qRr=o(" \u2014 "),Qee=a("a"),jRr=o("TFResNetModel"),DRr=o(" (ResNet model)"),GRr=l(),v5=a("li"),tAe=a("strong"),ORr=o("roberta"),VRr=o(" \u2014 "),Wee=a("a"),XRr=o("TFRobertaModel"),zRr=o(" (RoBERTa model)"),QRr=l(),F5=a("li"),aAe=a("strong"),WRr=o("roformer"),URr=o(" \u2014 "),Uee=a("a"),HRr=o("TFRoFormerModel"),JRr=o(" (RoFormer model)"),YRr=l(),T5=a("li"),nAe=a("strong"),KRr=o("segformer"),ZRr=o(" \u2014 "),Hee=a("a"),ePr=o("TFSegformerModel"),oPr=o(" (SegFormer model)"),rPr=l(),M5=a("li"),sAe=a("strong"),tPr=o("speech_to_text"),aPr=o(" \u2014 "),Jee=a("a"),nPr=o("TFSpeech2TextModel"),sPr=o(" (Speech2Text model)"),lPr=l(),E5=a("li"),lAe=a("strong"),iPr=o("swin"),dPr=o(" \u2014 "),Yee=a("a"),cPr=o("TFSwinModel"),mPr=o(" (Swin Transformer model)"),fPr=l(),C5=a("li"),iAe=a("strong"),gPr=o("t5"),hPr=o(" \u2014 "),Kee=a("a"),uPr=o("TFT5Model"),pPr=o(" (T5 model)"),_Pr=l(),w5=a("li"),dAe=a("strong"),bPr=o("tapas"),vPr=o(" \u2014 "),Zee=a("a"),FPr=o("TFTapasModel"),TPr=o(" (TAPAS model)"),MPr=l(),A5=a("li"),cAe=a("strong"),EPr=o("transfo-xl"),CPr=o(" \u2014 "),eoe=a("a"),wPr=o("TFTransfoXLModel"),APr=o(" (Transformer-XL model)"),LPr=l(),L5=a("li"),mAe=a("strong"),yPr=o("vit"),xPr=o(" \u2014 "),ooe=a("a"),$Pr=o("TFViTModel"),kPr=o(" (ViT model)"),SPr=l(),y5=a("li"),fAe=a("strong"),RPr=o("vit_mae"),PPr=o(" \u2014 "),roe=a("a"),BPr=o("TFViTMAEModel"),IPr=o(" (ViTMAE model)"),NPr=l(),x5=a("li"),gAe=a("strong"),qPr=o("wav2vec2"),jPr=o(" \u2014 "),toe=a("a"),DPr=o("TFWav2Vec2Model"),GPr=o(" (Wav2Vec2 model)"),OPr=l(),$5=a("li"),hAe=a("strong"),VPr=o("xglm"),XPr=o(" \u2014 "),aoe=a("a"),zPr=o("TFXGLMModel"),QPr=o(" (XGLM model)"),WPr=l(),k5=a("li"),uAe=a("strong"),UPr=o("xlm"),HPr=o(" \u2014 "),noe=a("a"),JPr=o("TFXLMModel"),YPr=o(" (XLM model)"),KPr=l(),S5=a("li"),pAe=a("strong"),ZPr=o("xlm-roberta"),eBr=o(" \u2014 "),soe=a("a"),oBr=o("TFXLMRobertaModel"),rBr=o(" (XLM-RoBERTa model)"),tBr=l(),R5=a("li"),_Ae=a("strong"),aBr=o("xlnet"),nBr=o(" \u2014 "),loe=a("a"),sBr=o("TFXLNetModel"),lBr=o(" (XLNet model)"),iBr=l(),F(P5.$$.fragment),zeo=l(),zc=a("h2"),B5=a("a"),bAe=a("span"),F(Kk.$$.fragment),dBr=l(),vAe=a("span"),cBr=o("TFAutoModelForPreTraining"),Qeo=l(),lr=a("div"),F(Zk.$$.fragment),mBr=l(),Qc=a("p"),fBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ioe=a("a"),gBr=o("from_pretrained()"),hBr=o(" class method or the "),doe=a("a"),uBr=o("from_config()"),pBr=o(` class
method.`),_Br=l(),eS=a("p"),bBr=o("This class cannot be instantiated directly using "),FAe=a("code"),vBr=o("__init__()"),FBr=o(" (throws an error)."),TBr=l(),zt=a("div"),F(oS.$$.fragment),MBr=l(),TAe=a("p"),EBr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),CBr=l(),Wc=a("p"),wBr=o(`Note:
Loading a model from its configuration file does `),MAe=a("strong"),ABr=o("not"),LBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=a("a"),yBr=o("from_pretrained()"),xBr=o(" to load the model weights."),$Br=l(),F(I5.$$.fragment),kBr=l(),Nr=a("div"),F(rS.$$.fragment),SBr=l(),EAe=a("p"),RBr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),PBr=l(),An=a("p"),BBr=o("The model class to instantiate is selected based on the "),CAe=a("code"),IBr=o("model_type"),NBr=o(` property of the config object (either
passed as an argument or loaded from `),wAe=a("code"),qBr=o("pretrained_model_name_or_path"),jBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AAe=a("code"),DBr=o("pretrained_model_name_or_path"),GBr=o(":"),OBr=l(),se=a("ul"),N5=a("li"),LAe=a("strong"),VBr=o("albert"),XBr=o(" \u2014 "),moe=a("a"),zBr=o("TFAlbertForPreTraining"),QBr=o(" (ALBERT model)"),WBr=l(),q5=a("li"),yAe=a("strong"),UBr=o("bart"),HBr=o(" \u2014 "),foe=a("a"),JBr=o("TFBartForConditionalGeneration"),YBr=o(" (BART model)"),KBr=l(),j5=a("li"),xAe=a("strong"),ZBr=o("bert"),eIr=o(" \u2014 "),goe=a("a"),oIr=o("TFBertForPreTraining"),rIr=o(" (BERT model)"),tIr=l(),D5=a("li"),$Ae=a("strong"),aIr=o("camembert"),nIr=o(" \u2014 "),hoe=a("a"),sIr=o("TFCamembertForMaskedLM"),lIr=o(" (CamemBERT model)"),iIr=l(),G5=a("li"),kAe=a("strong"),dIr=o("ctrl"),cIr=o(" \u2014 "),uoe=a("a"),mIr=o("TFCTRLLMHeadModel"),fIr=o(" (CTRL model)"),gIr=l(),O5=a("li"),SAe=a("strong"),hIr=o("distilbert"),uIr=o(" \u2014 "),poe=a("a"),pIr=o("TFDistilBertForMaskedLM"),_Ir=o(" (DistilBERT model)"),bIr=l(),V5=a("li"),RAe=a("strong"),vIr=o("electra"),FIr=o(" \u2014 "),_oe=a("a"),TIr=o("TFElectraForPreTraining"),MIr=o(" (ELECTRA model)"),EIr=l(),X5=a("li"),PAe=a("strong"),CIr=o("flaubert"),wIr=o(" \u2014 "),boe=a("a"),AIr=o("TFFlaubertWithLMHeadModel"),LIr=o(" (FlauBERT model)"),yIr=l(),z5=a("li"),BAe=a("strong"),xIr=o("funnel"),$Ir=o(" \u2014 "),voe=a("a"),kIr=o("TFFunnelForPreTraining"),SIr=o(" (Funnel Transformer model)"),RIr=l(),Q5=a("li"),IAe=a("strong"),PIr=o("gpt2"),BIr=o(" \u2014 "),Foe=a("a"),IIr=o("TFGPT2LMHeadModel"),NIr=o(" (OpenAI GPT-2 model)"),qIr=l(),W5=a("li"),NAe=a("strong"),jIr=o("layoutlm"),DIr=o(" \u2014 "),Toe=a("a"),GIr=o("TFLayoutLMForMaskedLM"),OIr=o(" (LayoutLM model)"),VIr=l(),U5=a("li"),qAe=a("strong"),XIr=o("lxmert"),zIr=o(" \u2014 "),Moe=a("a"),QIr=o("TFLxmertForPreTraining"),WIr=o(" (LXMERT model)"),UIr=l(),H5=a("li"),jAe=a("strong"),HIr=o("mobilebert"),JIr=o(" \u2014 "),Eoe=a("a"),YIr=o("TFMobileBertForPreTraining"),KIr=o(" (MobileBERT model)"),ZIr=l(),J5=a("li"),DAe=a("strong"),eNr=o("mpnet"),oNr=o(" \u2014 "),Coe=a("a"),rNr=o("TFMPNetForMaskedLM"),tNr=o(" (MPNet model)"),aNr=l(),Y5=a("li"),GAe=a("strong"),nNr=o("openai-gpt"),sNr=o(" \u2014 "),woe=a("a"),lNr=o("TFOpenAIGPTLMHeadModel"),iNr=o(" (OpenAI GPT model)"),dNr=l(),K5=a("li"),OAe=a("strong"),cNr=o("roberta"),mNr=o(" \u2014 "),Aoe=a("a"),fNr=o("TFRobertaForMaskedLM"),gNr=o(" (RoBERTa model)"),hNr=l(),Z5=a("li"),VAe=a("strong"),uNr=o("t5"),pNr=o(" \u2014 "),Loe=a("a"),_Nr=o("TFT5ForConditionalGeneration"),bNr=o(" (T5 model)"),vNr=l(),e0=a("li"),XAe=a("strong"),FNr=o("tapas"),TNr=o(" \u2014 "),yoe=a("a"),MNr=o("TFTapasForMaskedLM"),ENr=o(" (TAPAS model)"),CNr=l(),o0=a("li"),zAe=a("strong"),wNr=o("transfo-xl"),ANr=o(" \u2014 "),xoe=a("a"),LNr=o("TFTransfoXLLMHeadModel"),yNr=o(" (Transformer-XL model)"),xNr=l(),r0=a("li"),QAe=a("strong"),$Nr=o("vit_mae"),kNr=o(" \u2014 "),$oe=a("a"),SNr=o("TFViTMAEForPreTraining"),RNr=o(" (ViTMAE model)"),PNr=l(),t0=a("li"),WAe=a("strong"),BNr=o("xlm"),INr=o(" \u2014 "),koe=a("a"),NNr=o("TFXLMWithLMHeadModel"),qNr=o(" (XLM model)"),jNr=l(),a0=a("li"),UAe=a("strong"),DNr=o("xlm-roberta"),GNr=o(" \u2014 "),Soe=a("a"),ONr=o("TFXLMRobertaForMaskedLM"),VNr=o(" (XLM-RoBERTa model)"),XNr=l(),n0=a("li"),HAe=a("strong"),zNr=o("xlnet"),QNr=o(" \u2014 "),Roe=a("a"),WNr=o("TFXLNetLMHeadModel"),UNr=o(" (XLNet model)"),HNr=l(),F(s0.$$.fragment),Weo=l(),Uc=a("h2"),l0=a("a"),JAe=a("span"),F(tS.$$.fragment),JNr=l(),YAe=a("span"),YNr=o("TFAutoModelForCausalLM"),Ueo=l(),ir=a("div"),F(aS.$$.fragment),KNr=l(),Hc=a("p"),ZNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Poe=a("a"),eqr=o("from_pretrained()"),oqr=o(" class method or the "),Boe=a("a"),rqr=o("from_config()"),tqr=o(` class
method.`),aqr=l(),nS=a("p"),nqr=o("This class cannot be instantiated directly using "),KAe=a("code"),sqr=o("__init__()"),lqr=o(" (throws an error)."),iqr=l(),Qt=a("div"),F(sS.$$.fragment),dqr=l(),ZAe=a("p"),cqr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mqr=l(),Jc=a("p"),fqr=o(`Note:
Loading a model from its configuration file does `),e6e=a("strong"),gqr=o("not"),hqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ioe=a("a"),uqr=o("from_pretrained()"),pqr=o(" to load the model weights."),_qr=l(),F(i0.$$.fragment),bqr=l(),qr=a("div"),F(lS.$$.fragment),vqr=l(),o6e=a("p"),Fqr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tqr=l(),Ln=a("p"),Mqr=o("The model class to instantiate is selected based on the "),r6e=a("code"),Eqr=o("model_type"),Cqr=o(` property of the config object (either
passed as an argument or loaded from `),t6e=a("code"),wqr=o("pretrained_model_name_or_path"),Aqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=a("code"),Lqr=o("pretrained_model_name_or_path"),yqr=o(":"),xqr=l(),Me=a("ul"),d0=a("li"),n6e=a("strong"),$qr=o("bert"),kqr=o(" \u2014 "),Noe=a("a"),Sqr=o("TFBertLMHeadModel"),Rqr=o(" (BERT model)"),Pqr=l(),c0=a("li"),s6e=a("strong"),Bqr=o("camembert"),Iqr=o(" \u2014 "),qoe=a("a"),Nqr=o("TFCamembertForCausalLM"),qqr=o(" (CamemBERT model)"),jqr=l(),m0=a("li"),l6e=a("strong"),Dqr=o("ctrl"),Gqr=o(" \u2014 "),joe=a("a"),Oqr=o("TFCTRLLMHeadModel"),Vqr=o(" (CTRL model)"),Xqr=l(),f0=a("li"),i6e=a("strong"),zqr=o("gpt2"),Qqr=o(" \u2014 "),Doe=a("a"),Wqr=o("TFGPT2LMHeadModel"),Uqr=o(" (OpenAI GPT-2 model)"),Hqr=l(),g0=a("li"),d6e=a("strong"),Jqr=o("gptj"),Yqr=o(" \u2014 "),Goe=a("a"),Kqr=o("TFGPTJForCausalLM"),Zqr=o(" (GPT-J model)"),ejr=l(),h0=a("li"),c6e=a("strong"),ojr=o("openai-gpt"),rjr=o(" \u2014 "),Ooe=a("a"),tjr=o("TFOpenAIGPTLMHeadModel"),ajr=o(" (OpenAI GPT model)"),njr=l(),u0=a("li"),m6e=a("strong"),sjr=o("opt"),ljr=o(" \u2014 "),Voe=a("a"),ijr=o("TFOPTForCausalLM"),djr=o(" (OPT model)"),cjr=l(),p0=a("li"),f6e=a("strong"),mjr=o("rembert"),fjr=o(" \u2014 "),Xoe=a("a"),gjr=o("TFRemBertForCausalLM"),hjr=o(" (RemBERT model)"),ujr=l(),_0=a("li"),g6e=a("strong"),pjr=o("roberta"),_jr=o(" \u2014 "),zoe=a("a"),bjr=o("TFRobertaForCausalLM"),vjr=o(" (RoBERTa model)"),Fjr=l(),b0=a("li"),h6e=a("strong"),Tjr=o("roformer"),Mjr=o(" \u2014 "),Qoe=a("a"),Ejr=o("TFRoFormerForCausalLM"),Cjr=o(" (RoFormer model)"),wjr=l(),v0=a("li"),u6e=a("strong"),Ajr=o("transfo-xl"),Ljr=o(" \u2014 "),Woe=a("a"),yjr=o("TFTransfoXLLMHeadModel"),xjr=o(" (Transformer-XL model)"),$jr=l(),F0=a("li"),p6e=a("strong"),kjr=o("xglm"),Sjr=o(" \u2014 "),Uoe=a("a"),Rjr=o("TFXGLMForCausalLM"),Pjr=o(" (XGLM model)"),Bjr=l(),T0=a("li"),_6e=a("strong"),Ijr=o("xlm"),Njr=o(" \u2014 "),Hoe=a("a"),qjr=o("TFXLMWithLMHeadModel"),jjr=o(" (XLM model)"),Djr=l(),M0=a("li"),b6e=a("strong"),Gjr=o("xlnet"),Ojr=o(" \u2014 "),Joe=a("a"),Vjr=o("TFXLNetLMHeadModel"),Xjr=o(" (XLNet model)"),zjr=l(),F(E0.$$.fragment),Heo=l(),Yc=a("h2"),C0=a("a"),v6e=a("span"),F(iS.$$.fragment),Qjr=l(),F6e=a("span"),Wjr=o("TFAutoModelForImageClassification"),Jeo=l(),dr=a("div"),F(dS.$$.fragment),Ujr=l(),Kc=a("p"),Hjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Yoe=a("a"),Jjr=o("from_pretrained()"),Yjr=o(" class method or the "),Koe=a("a"),Kjr=o("from_config()"),Zjr=o(` class
method.`),eDr=l(),cS=a("p"),oDr=o("This class cannot be instantiated directly using "),T6e=a("code"),rDr=o("__init__()"),tDr=o(" (throws an error)."),aDr=l(),Wt=a("div"),F(mS.$$.fragment),nDr=l(),M6e=a("p"),sDr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lDr=l(),Zc=a("p"),iDr=o(`Note:
Loading a model from its configuration file does `),E6e=a("strong"),dDr=o("not"),cDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=a("a"),mDr=o("from_pretrained()"),fDr=o(" to load the model weights."),gDr=l(),F(w0.$$.fragment),hDr=l(),jr=a("div"),F(fS.$$.fragment),uDr=l(),C6e=a("p"),pDr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Dr=l(),yn=a("p"),bDr=o("The model class to instantiate is selected based on the "),w6e=a("code"),vDr=o("model_type"),FDr=o(` property of the config object (either
passed as an argument or loaded from `),A6e=a("code"),TDr=o("pretrained_model_name_or_path"),MDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=a("code"),EDr=o("pretrained_model_name_or_path"),CDr=o(":"),wDr=l(),Be=a("ul"),A0=a("li"),y6e=a("strong"),ADr=o("convnext"),LDr=o(" \u2014 "),ere=a("a"),yDr=o("TFConvNextForImageClassification"),xDr=o(" (ConvNeXT model)"),$Dr=l(),L0=a("li"),x6e=a("strong"),kDr=o("data2vec-vision"),SDr=o(" \u2014 "),ore=a("a"),RDr=o("TFData2VecVisionForImageClassification"),PDr=o(" (Data2VecVision model)"),BDr=l(),Tl=a("li"),$6e=a("strong"),IDr=o("deit"),NDr=o(" \u2014 "),rre=a("a"),qDr=o("TFDeiTForImageClassification"),jDr=o(" or "),tre=a("a"),DDr=o("TFDeiTForImageClassificationWithTeacher"),GDr=o(" (DeiT model)"),ODr=l(),y0=a("li"),k6e=a("strong"),VDr=o("mobilevit"),XDr=o(" \u2014 "),are=a("a"),zDr=o("TFMobileViTForImageClassification"),QDr=o(" (MobileViT model)"),WDr=l(),x0=a("li"),S6e=a("strong"),UDr=o("regnet"),HDr=o(" \u2014 "),nre=a("a"),JDr=o("TFRegNetForImageClassification"),YDr=o(" (RegNet model)"),KDr=l(),$0=a("li"),R6e=a("strong"),ZDr=o("resnet"),eGr=o(" \u2014 "),sre=a("a"),oGr=o("TFResNetForImageClassification"),rGr=o(" (ResNet model)"),tGr=l(),k0=a("li"),P6e=a("strong"),aGr=o("segformer"),nGr=o(" \u2014 "),lre=a("a"),sGr=o("TFSegformerForImageClassification"),lGr=o(" (SegFormer model)"),iGr=l(),S0=a("li"),B6e=a("strong"),dGr=o("swin"),cGr=o(" \u2014 "),ire=a("a"),mGr=o("TFSwinForImageClassification"),fGr=o(" (Swin Transformer model)"),gGr=l(),R0=a("li"),I6e=a("strong"),hGr=o("vit"),uGr=o(" \u2014 "),dre=a("a"),pGr=o("TFViTForImageClassification"),_Gr=o(" (ViT model)"),bGr=l(),F(P0.$$.fragment),Yeo=l(),em=a("h2"),B0=a("a"),N6e=a("span"),F(gS.$$.fragment),vGr=l(),q6e=a("span"),FGr=o("TFAutoModelForSemanticSegmentation"),Keo=l(),cr=a("div"),F(hS.$$.fragment),TGr=l(),om=a("p"),MGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cre=a("a"),EGr=o("from_pretrained()"),CGr=o(" class method or the "),mre=a("a"),wGr=o("from_config()"),AGr=o(` class
method.`),LGr=l(),uS=a("p"),yGr=o("This class cannot be instantiated directly using "),j6e=a("code"),xGr=o("__init__()"),$Gr=o(" (throws an error)."),kGr=l(),Ut=a("div"),F(pS.$$.fragment),SGr=l(),D6e=a("p"),RGr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),PGr=l(),rm=a("p"),BGr=o(`Note:
Loading a model from its configuration file does `),G6e=a("strong"),IGr=o("not"),NGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=a("a"),qGr=o("from_pretrained()"),jGr=o(" to load the model weights."),DGr=l(),F(I0.$$.fragment),GGr=l(),Dr=a("div"),F(_S.$$.fragment),OGr=l(),O6e=a("p"),VGr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),XGr=l(),xn=a("p"),zGr=o("The model class to instantiate is selected based on the "),V6e=a("code"),QGr=o("model_type"),WGr=o(` property of the config object (either
passed as an argument or loaded from `),X6e=a("code"),UGr=o("pretrained_model_name_or_path"),HGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=a("code"),JGr=o("pretrained_model_name_or_path"),YGr=o(":"),KGr=l(),tm=a("ul"),N0=a("li"),Q6e=a("strong"),ZGr=o("data2vec-vision"),eOr=o(" \u2014 "),gre=a("a"),oOr=o("TFData2VecVisionForSemanticSegmentation"),rOr=o(" (Data2VecVision model)"),tOr=l(),q0=a("li"),W6e=a("strong"),aOr=o("mobilevit"),nOr=o(" \u2014 "),hre=a("a"),sOr=o("TFMobileViTForSemanticSegmentation"),lOr=o(" (MobileViT model)"),iOr=l(),j0=a("li"),U6e=a("strong"),dOr=o("segformer"),cOr=o(" \u2014 "),ure=a("a"),mOr=o("TFSegformerForSemanticSegmentation"),fOr=o(" (SegFormer model)"),gOr=l(),F(D0.$$.fragment),Zeo=l(),am=a("h2"),G0=a("a"),H6e=a("span"),F(bS.$$.fragment),hOr=l(),J6e=a("span"),uOr=o("TFAutoModelForMaskedLM"),eoo=l(),mr=a("div"),F(vS.$$.fragment),pOr=l(),nm=a("p"),_Or=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pre=a("a"),bOr=o("from_pretrained()"),vOr=o(" class method or the "),_re=a("a"),FOr=o("from_config()"),TOr=o(` class
method.`),MOr=l(),FS=a("p"),EOr=o("This class cannot be instantiated directly using "),Y6e=a("code"),COr=o("__init__()"),wOr=o(" (throws an error)."),AOr=l(),Ht=a("div"),F(TS.$$.fragment),LOr=l(),K6e=a("p"),yOr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xOr=l(),sm=a("p"),$Or=o(`Note:
Loading a model from its configuration file does `),Z6e=a("strong"),kOr=o("not"),SOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=a("a"),ROr=o("from_pretrained()"),POr=o(" to load the model weights."),BOr=l(),F(O0.$$.fragment),IOr=l(),Gr=a("div"),F(MS.$$.fragment),NOr=l(),e7e=a("p"),qOr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jOr=l(),$n=a("p"),DOr=o("The model class to instantiate is selected based on the "),o7e=a("code"),GOr=o("model_type"),OOr=o(` property of the config object (either
passed as an argument or loaded from `),r7e=a("code"),VOr=o("pretrained_model_name_or_path"),XOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=a("code"),zOr=o("pretrained_model_name_or_path"),QOr=o(":"),WOr=l(),ge=a("ul"),V0=a("li"),a7e=a("strong"),UOr=o("albert"),HOr=o(" \u2014 "),vre=a("a"),JOr=o("TFAlbertForMaskedLM"),YOr=o(" (ALBERT model)"),KOr=l(),X0=a("li"),n7e=a("strong"),ZOr=o("bert"),eVr=o(" \u2014 "),Fre=a("a"),oVr=o("TFBertForMaskedLM"),rVr=o(" (BERT model)"),tVr=l(),z0=a("li"),s7e=a("strong"),aVr=o("camembert"),nVr=o(" \u2014 "),Tre=a("a"),sVr=o("TFCamembertForMaskedLM"),lVr=o(" (CamemBERT model)"),iVr=l(),Q0=a("li"),l7e=a("strong"),dVr=o("convbert"),cVr=o(" \u2014 "),Mre=a("a"),mVr=o("TFConvBertForMaskedLM"),fVr=o(" (ConvBERT model)"),gVr=l(),W0=a("li"),i7e=a("strong"),hVr=o("deberta"),uVr=o(" \u2014 "),Ere=a("a"),pVr=o("TFDebertaForMaskedLM"),_Vr=o(" (DeBERTa model)"),bVr=l(),U0=a("li"),d7e=a("strong"),vVr=o("deberta-v2"),FVr=o(" \u2014 "),Cre=a("a"),TVr=o("TFDebertaV2ForMaskedLM"),MVr=o(" (DeBERTa-v2 model)"),EVr=l(),H0=a("li"),c7e=a("strong"),CVr=o("distilbert"),wVr=o(" \u2014 "),wre=a("a"),AVr=o("TFDistilBertForMaskedLM"),LVr=o(" (DistilBERT model)"),yVr=l(),J0=a("li"),m7e=a("strong"),xVr=o("electra"),$Vr=o(" \u2014 "),Are=a("a"),kVr=o("TFElectraForMaskedLM"),SVr=o(" (ELECTRA model)"),RVr=l(),Y0=a("li"),f7e=a("strong"),PVr=o("flaubert"),BVr=o(" \u2014 "),Lre=a("a"),IVr=o("TFFlaubertWithLMHeadModel"),NVr=o(" (FlauBERT model)"),qVr=l(),K0=a("li"),g7e=a("strong"),jVr=o("funnel"),DVr=o(" \u2014 "),yre=a("a"),GVr=o("TFFunnelForMaskedLM"),OVr=o(" (Funnel Transformer model)"),VVr=l(),Z0=a("li"),h7e=a("strong"),XVr=o("layoutlm"),zVr=o(" \u2014 "),xre=a("a"),QVr=o("TFLayoutLMForMaskedLM"),WVr=o(" (LayoutLM model)"),UVr=l(),ew=a("li"),u7e=a("strong"),HVr=o("longformer"),JVr=o(" \u2014 "),$re=a("a"),YVr=o("TFLongformerForMaskedLM"),KVr=o(" (Longformer model)"),ZVr=l(),ow=a("li"),p7e=a("strong"),eXr=o("mobilebert"),oXr=o(" \u2014 "),kre=a("a"),rXr=o("TFMobileBertForMaskedLM"),tXr=o(" (MobileBERT model)"),aXr=l(),rw=a("li"),_7e=a("strong"),nXr=o("mpnet"),sXr=o(" \u2014 "),Sre=a("a"),lXr=o("TFMPNetForMaskedLM"),iXr=o(" (MPNet model)"),dXr=l(),tw=a("li"),b7e=a("strong"),cXr=o("rembert"),mXr=o(" \u2014 "),Rre=a("a"),fXr=o("TFRemBertForMaskedLM"),gXr=o(" (RemBERT model)"),hXr=l(),aw=a("li"),v7e=a("strong"),uXr=o("roberta"),pXr=o(" \u2014 "),Pre=a("a"),_Xr=o("TFRobertaForMaskedLM"),bXr=o(" (RoBERTa model)"),vXr=l(),nw=a("li"),F7e=a("strong"),FXr=o("roformer"),TXr=o(" \u2014 "),Bre=a("a"),MXr=o("TFRoFormerForMaskedLM"),EXr=o(" (RoFormer model)"),CXr=l(),sw=a("li"),T7e=a("strong"),wXr=o("tapas"),AXr=o(" \u2014 "),Ire=a("a"),LXr=o("TFTapasForMaskedLM"),yXr=o(" (TAPAS model)"),xXr=l(),lw=a("li"),M7e=a("strong"),$Xr=o("xlm"),kXr=o(" \u2014 "),Nre=a("a"),SXr=o("TFXLMWithLMHeadModel"),RXr=o(" (XLM model)"),PXr=l(),iw=a("li"),E7e=a("strong"),BXr=o("xlm-roberta"),IXr=o(" \u2014 "),qre=a("a"),NXr=o("TFXLMRobertaForMaskedLM"),qXr=o(" (XLM-RoBERTa model)"),jXr=l(),F(dw.$$.fragment),ooo=l(),lm=a("h2"),cw=a("a"),C7e=a("span"),F(ES.$$.fragment),DXr=l(),w7e=a("span"),GXr=o("TFAutoModelForSeq2SeqLM"),roo=l(),fr=a("div"),F(CS.$$.fragment),OXr=l(),im=a("p"),VXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jre=a("a"),XXr=o("from_pretrained()"),zXr=o(" class method or the "),Dre=a("a"),QXr=o("from_config()"),WXr=o(` class
method.`),UXr=l(),wS=a("p"),HXr=o("This class cannot be instantiated directly using "),A7e=a("code"),JXr=o("__init__()"),YXr=o(" (throws an error)."),KXr=l(),Jt=a("div"),F(AS.$$.fragment),ZXr=l(),L7e=a("p"),ezr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ozr=l(),dm=a("p"),rzr=o(`Note:
Loading a model from its configuration file does `),y7e=a("strong"),tzr=o("not"),azr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gre=a("a"),nzr=o("from_pretrained()"),szr=o(" to load the model weights."),lzr=l(),F(mw.$$.fragment),izr=l(),Or=a("div"),F(LS.$$.fragment),dzr=l(),x7e=a("p"),czr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mzr=l(),kn=a("p"),fzr=o("The model class to instantiate is selected based on the "),$7e=a("code"),gzr=o("model_type"),hzr=o(` property of the config object (either
passed as an argument or loaded from `),k7e=a("code"),uzr=o("pretrained_model_name_or_path"),pzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=a("code"),_zr=o("pretrained_model_name_or_path"),bzr=o(":"),vzr=l(),ye=a("ul"),fw=a("li"),R7e=a("strong"),Fzr=o("bart"),Tzr=o(" \u2014 "),Ore=a("a"),Mzr=o("TFBartForConditionalGeneration"),Ezr=o(" (BART model)"),Czr=l(),gw=a("li"),P7e=a("strong"),wzr=o("blenderbot"),Azr=o(" \u2014 "),Vre=a("a"),Lzr=o("TFBlenderbotForConditionalGeneration"),yzr=o(" (Blenderbot model)"),xzr=l(),hw=a("li"),B7e=a("strong"),$zr=o("blenderbot-small"),kzr=o(" \u2014 "),Xre=a("a"),Szr=o("TFBlenderbotSmallForConditionalGeneration"),Rzr=o(" (BlenderbotSmall model)"),Pzr=l(),uw=a("li"),I7e=a("strong"),Bzr=o("encoder-decoder"),Izr=o(" \u2014 "),zre=a("a"),Nzr=o("TFEncoderDecoderModel"),qzr=o(" (Encoder decoder model)"),jzr=l(),pw=a("li"),N7e=a("strong"),Dzr=o("led"),Gzr=o(" \u2014 "),Qre=a("a"),Ozr=o("TFLEDForConditionalGeneration"),Vzr=o(" (LED model)"),Xzr=l(),_w=a("li"),q7e=a("strong"),zzr=o("marian"),Qzr=o(" \u2014 "),Wre=a("a"),Wzr=o("TFMarianMTModel"),Uzr=o(" (Marian model)"),Hzr=l(),bw=a("li"),j7e=a("strong"),Jzr=o("mbart"),Yzr=o(" \u2014 "),Ure=a("a"),Kzr=o("TFMBartForConditionalGeneration"),Zzr=o(" (mBART model)"),eQr=l(),vw=a("li"),D7e=a("strong"),oQr=o("mt5"),rQr=o(" \u2014 "),Hre=a("a"),tQr=o("TFMT5ForConditionalGeneration"),aQr=o(" (MT5 model)"),nQr=l(),Fw=a("li"),G7e=a("strong"),sQr=o("pegasus"),lQr=o(" \u2014 "),Jre=a("a"),iQr=o("TFPegasusForConditionalGeneration"),dQr=o(" (Pegasus model)"),cQr=l(),Tw=a("li"),O7e=a("strong"),mQr=o("t5"),fQr=o(" \u2014 "),Yre=a("a"),gQr=o("TFT5ForConditionalGeneration"),hQr=o(" (T5 model)"),uQr=l(),F(Mw.$$.fragment),too=l(),cm=a("h2"),Ew=a("a"),V7e=a("span"),F(yS.$$.fragment),pQr=l(),X7e=a("span"),_Qr=o("TFAutoModelForSequenceClassification"),aoo=l(),gr=a("div"),F(xS.$$.fragment),bQr=l(),mm=a("p"),vQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Kre=a("a"),FQr=o("from_pretrained()"),TQr=o(" class method or the "),Zre=a("a"),MQr=o("from_config()"),EQr=o(` class
method.`),CQr=l(),$S=a("p"),wQr=o("This class cannot be instantiated directly using "),z7e=a("code"),AQr=o("__init__()"),LQr=o(" (throws an error)."),yQr=l(),Yt=a("div"),F(kS.$$.fragment),xQr=l(),Q7e=a("p"),$Qr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kQr=l(),fm=a("p"),SQr=o(`Note:
Loading a model from its configuration file does `),W7e=a("strong"),RQr=o("not"),PQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=a("a"),BQr=o("from_pretrained()"),IQr=o(" to load the model weights."),NQr=l(),F(Cw.$$.fragment),qQr=l(),Vr=a("div"),F(SS.$$.fragment),jQr=l(),U7e=a("p"),DQr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),GQr=l(),Sn=a("p"),OQr=o("The model class to instantiate is selected based on the "),H7e=a("code"),VQr=o("model_type"),XQr=o(` property of the config object (either
passed as an argument or loaded from `),J7e=a("code"),zQr=o("pretrained_model_name_or_path"),QQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=a("code"),WQr=o("pretrained_model_name_or_path"),UQr=o(":"),HQr=l(),re=a("ul"),ww=a("li"),K7e=a("strong"),JQr=o("albert"),YQr=o(" \u2014 "),ote=a("a"),KQr=o("TFAlbertForSequenceClassification"),ZQr=o(" (ALBERT model)"),eWr=l(),Aw=a("li"),Z7e=a("strong"),oWr=o("bert"),rWr=o(" \u2014 "),rte=a("a"),tWr=o("TFBertForSequenceClassification"),aWr=o(" (BERT model)"),nWr=l(),Lw=a("li"),eLe=a("strong"),sWr=o("camembert"),lWr=o(" \u2014 "),tte=a("a"),iWr=o("TFCamembertForSequenceClassification"),dWr=o(" (CamemBERT model)"),cWr=l(),yw=a("li"),oLe=a("strong"),mWr=o("convbert"),fWr=o(" \u2014 "),ate=a("a"),gWr=o("TFConvBertForSequenceClassification"),hWr=o(" (ConvBERT model)"),uWr=l(),xw=a("li"),rLe=a("strong"),pWr=o("ctrl"),_Wr=o(" \u2014 "),nte=a("a"),bWr=o("TFCTRLForSequenceClassification"),vWr=o(" (CTRL model)"),FWr=l(),$w=a("li"),tLe=a("strong"),TWr=o("deberta"),MWr=o(" \u2014 "),ste=a("a"),EWr=o("TFDebertaForSequenceClassification"),CWr=o(" (DeBERTa model)"),wWr=l(),kw=a("li"),aLe=a("strong"),AWr=o("deberta-v2"),LWr=o(" \u2014 "),lte=a("a"),yWr=o("TFDebertaV2ForSequenceClassification"),xWr=o(" (DeBERTa-v2 model)"),$Wr=l(),Sw=a("li"),nLe=a("strong"),kWr=o("distilbert"),SWr=o(" \u2014 "),ite=a("a"),RWr=o("TFDistilBertForSequenceClassification"),PWr=o(" (DistilBERT model)"),BWr=l(),Rw=a("li"),sLe=a("strong"),IWr=o("electra"),NWr=o(" \u2014 "),dte=a("a"),qWr=o("TFElectraForSequenceClassification"),jWr=o(" (ELECTRA model)"),DWr=l(),Pw=a("li"),lLe=a("strong"),GWr=o("flaubert"),OWr=o(" \u2014 "),cte=a("a"),VWr=o("TFFlaubertForSequenceClassification"),XWr=o(" (FlauBERT model)"),zWr=l(),Bw=a("li"),iLe=a("strong"),QWr=o("funnel"),WWr=o(" \u2014 "),mte=a("a"),UWr=o("TFFunnelForSequenceClassification"),HWr=o(" (Funnel Transformer model)"),JWr=l(),Iw=a("li"),dLe=a("strong"),YWr=o("gpt2"),KWr=o(" \u2014 "),fte=a("a"),ZWr=o("TFGPT2ForSequenceClassification"),eUr=o(" (OpenAI GPT-2 model)"),oUr=l(),Nw=a("li"),cLe=a("strong"),rUr=o("gptj"),tUr=o(" \u2014 "),gte=a("a"),aUr=o("TFGPTJForSequenceClassification"),nUr=o(" (GPT-J model)"),sUr=l(),qw=a("li"),mLe=a("strong"),lUr=o("layoutlm"),iUr=o(" \u2014 "),hte=a("a"),dUr=o("TFLayoutLMForSequenceClassification"),cUr=o(" (LayoutLM model)"),mUr=l(),jw=a("li"),fLe=a("strong"),fUr=o("layoutlmv3"),gUr=o(" \u2014 "),ute=a("a"),hUr=o("TFLayoutLMv3ForSequenceClassification"),uUr=o(" (LayoutLMv3 model)"),pUr=l(),Dw=a("li"),gLe=a("strong"),_Ur=o("longformer"),bUr=o(" \u2014 "),pte=a("a"),vUr=o("TFLongformerForSequenceClassification"),FUr=o(" (Longformer model)"),TUr=l(),Gw=a("li"),hLe=a("strong"),MUr=o("mobilebert"),EUr=o(" \u2014 "),_te=a("a"),CUr=o("TFMobileBertForSequenceClassification"),wUr=o(" (MobileBERT model)"),AUr=l(),Ow=a("li"),uLe=a("strong"),LUr=o("mpnet"),yUr=o(" \u2014 "),bte=a("a"),xUr=o("TFMPNetForSequenceClassification"),$Ur=o(" (MPNet model)"),kUr=l(),Vw=a("li"),pLe=a("strong"),SUr=o("openai-gpt"),RUr=o(" \u2014 "),vte=a("a"),PUr=o("TFOpenAIGPTForSequenceClassification"),BUr=o(" (OpenAI GPT model)"),IUr=l(),Xw=a("li"),_Le=a("strong"),NUr=o("rembert"),qUr=o(" \u2014 "),Fte=a("a"),jUr=o("TFRemBertForSequenceClassification"),DUr=o(" (RemBERT model)"),GUr=l(),zw=a("li"),bLe=a("strong"),OUr=o("roberta"),VUr=o(" \u2014 "),Tte=a("a"),XUr=o("TFRobertaForSequenceClassification"),zUr=o(" (RoBERTa model)"),QUr=l(),Qw=a("li"),vLe=a("strong"),WUr=o("roformer"),UUr=o(" \u2014 "),Mte=a("a"),HUr=o("TFRoFormerForSequenceClassification"),JUr=o(" (RoFormer model)"),YUr=l(),Ww=a("li"),FLe=a("strong"),KUr=o("tapas"),ZUr=o(" \u2014 "),Ete=a("a"),eHr=o("TFTapasForSequenceClassification"),oHr=o(" (TAPAS model)"),rHr=l(),Uw=a("li"),TLe=a("strong"),tHr=o("transfo-xl"),aHr=o(" \u2014 "),Cte=a("a"),nHr=o("TFTransfoXLForSequenceClassification"),sHr=o(" (Transformer-XL model)"),lHr=l(),Hw=a("li"),MLe=a("strong"),iHr=o("xlm"),dHr=o(" \u2014 "),wte=a("a"),cHr=o("TFXLMForSequenceClassification"),mHr=o(" (XLM model)"),fHr=l(),Jw=a("li"),ELe=a("strong"),gHr=o("xlm-roberta"),hHr=o(" \u2014 "),Ate=a("a"),uHr=o("TFXLMRobertaForSequenceClassification"),pHr=o(" (XLM-RoBERTa model)"),_Hr=l(),Yw=a("li"),CLe=a("strong"),bHr=o("xlnet"),vHr=o(" \u2014 "),Lte=a("a"),FHr=o("TFXLNetForSequenceClassification"),THr=o(" (XLNet model)"),MHr=l(),F(Kw.$$.fragment),noo=l(),gm=a("h2"),Zw=a("a"),wLe=a("span"),F(RS.$$.fragment),EHr=l(),ALe=a("span"),CHr=o("TFAutoModelForMultipleChoice"),soo=l(),hr=a("div"),F(PS.$$.fragment),wHr=l(),hm=a("p"),AHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yte=a("a"),LHr=o("from_pretrained()"),yHr=o(" class method or the "),xte=a("a"),xHr=o("from_config()"),$Hr=o(` class
method.`),kHr=l(),BS=a("p"),SHr=o("This class cannot be instantiated directly using "),LLe=a("code"),RHr=o("__init__()"),PHr=o(" (throws an error)."),BHr=l(),Kt=a("div"),F(IS.$$.fragment),IHr=l(),yLe=a("p"),NHr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qHr=l(),um=a("p"),jHr=o(`Note:
Loading a model from its configuration file does `),xLe=a("strong"),DHr=o("not"),GHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$te=a("a"),OHr=o("from_pretrained()"),VHr=o(" to load the model weights."),XHr=l(),F(eA.$$.fragment),zHr=l(),Xr=a("div"),F(NS.$$.fragment),QHr=l(),$Le=a("p"),WHr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),UHr=l(),Rn=a("p"),HHr=o("The model class to instantiate is selected based on the "),kLe=a("code"),JHr=o("model_type"),YHr=o(` property of the config object (either
passed as an argument or loaded from `),SLe=a("code"),KHr=o("pretrained_model_name_or_path"),ZHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RLe=a("code"),eJr=o("pretrained_model_name_or_path"),oJr=o(":"),rJr=l(),ve=a("ul"),oA=a("li"),PLe=a("strong"),tJr=o("albert"),aJr=o(" \u2014 "),kte=a("a"),nJr=o("TFAlbertForMultipleChoice"),sJr=o(" (ALBERT model)"),lJr=l(),rA=a("li"),BLe=a("strong"),iJr=o("bert"),dJr=o(" \u2014 "),Ste=a("a"),cJr=o("TFBertForMultipleChoice"),mJr=o(" (BERT model)"),fJr=l(),tA=a("li"),ILe=a("strong"),gJr=o("camembert"),hJr=o(" \u2014 "),Rte=a("a"),uJr=o("TFCamembertForMultipleChoice"),pJr=o(" (CamemBERT model)"),_Jr=l(),aA=a("li"),NLe=a("strong"),bJr=o("convbert"),vJr=o(" \u2014 "),Pte=a("a"),FJr=o("TFConvBertForMultipleChoice"),TJr=o(" (ConvBERT model)"),MJr=l(),nA=a("li"),qLe=a("strong"),EJr=o("distilbert"),CJr=o(" \u2014 "),Bte=a("a"),wJr=o("TFDistilBertForMultipleChoice"),AJr=o(" (DistilBERT model)"),LJr=l(),sA=a("li"),jLe=a("strong"),yJr=o("electra"),xJr=o(" \u2014 "),Ite=a("a"),$Jr=o("TFElectraForMultipleChoice"),kJr=o(" (ELECTRA model)"),SJr=l(),lA=a("li"),DLe=a("strong"),RJr=o("flaubert"),PJr=o(" \u2014 "),Nte=a("a"),BJr=o("TFFlaubertForMultipleChoice"),IJr=o(" (FlauBERT model)"),NJr=l(),iA=a("li"),GLe=a("strong"),qJr=o("funnel"),jJr=o(" \u2014 "),qte=a("a"),DJr=o("TFFunnelForMultipleChoice"),GJr=o(" (Funnel Transformer model)"),OJr=l(),dA=a("li"),OLe=a("strong"),VJr=o("longformer"),XJr=o(" \u2014 "),jte=a("a"),zJr=o("TFLongformerForMultipleChoice"),QJr=o(" (Longformer model)"),WJr=l(),cA=a("li"),VLe=a("strong"),UJr=o("mobilebert"),HJr=o(" \u2014 "),Dte=a("a"),JJr=o("TFMobileBertForMultipleChoice"),YJr=o(" (MobileBERT model)"),KJr=l(),mA=a("li"),XLe=a("strong"),ZJr=o("mpnet"),eYr=o(" \u2014 "),Gte=a("a"),oYr=o("TFMPNetForMultipleChoice"),rYr=o(" (MPNet model)"),tYr=l(),fA=a("li"),zLe=a("strong"),aYr=o("rembert"),nYr=o(" \u2014 "),Ote=a("a"),sYr=o("TFRemBertForMultipleChoice"),lYr=o(" (RemBERT model)"),iYr=l(),gA=a("li"),QLe=a("strong"),dYr=o("roberta"),cYr=o(" \u2014 "),Vte=a("a"),mYr=o("TFRobertaForMultipleChoice"),fYr=o(" (RoBERTa model)"),gYr=l(),hA=a("li"),WLe=a("strong"),hYr=o("roformer"),uYr=o(" \u2014 "),Xte=a("a"),pYr=o("TFRoFormerForMultipleChoice"),_Yr=o(" (RoFormer model)"),bYr=l(),uA=a("li"),ULe=a("strong"),vYr=o("xlm"),FYr=o(" \u2014 "),zte=a("a"),TYr=o("TFXLMForMultipleChoice"),MYr=o(" (XLM model)"),EYr=l(),pA=a("li"),HLe=a("strong"),CYr=o("xlm-roberta"),wYr=o(" \u2014 "),Qte=a("a"),AYr=o("TFXLMRobertaForMultipleChoice"),LYr=o(" (XLM-RoBERTa model)"),yYr=l(),_A=a("li"),JLe=a("strong"),xYr=o("xlnet"),$Yr=o(" \u2014 "),Wte=a("a"),kYr=o("TFXLNetForMultipleChoice"),SYr=o(" (XLNet model)"),RYr=l(),F(bA.$$.fragment),loo=l(),pm=a("h2"),vA=a("a"),YLe=a("span"),F(qS.$$.fragment),PYr=l(),KLe=a("span"),BYr=o("TFAutoModelForNextSentencePrediction"),ioo=l(),ur=a("div"),F(jS.$$.fragment),IYr=l(),_m=a("p"),NYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ute=a("a"),qYr=o("from_pretrained()"),jYr=o(" class method or the "),Hte=a("a"),DYr=o("from_config()"),GYr=o(` class
method.`),OYr=l(),DS=a("p"),VYr=o("This class cannot be instantiated directly using "),ZLe=a("code"),XYr=o("__init__()"),zYr=o(" (throws an error)."),QYr=l(),Zt=a("div"),F(GS.$$.fragment),WYr=l(),eye=a("p"),UYr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HYr=l(),bm=a("p"),JYr=o(`Note:
Loading a model from its configuration file does `),oye=a("strong"),YYr=o("not"),KYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=a("a"),ZYr=o("from_pretrained()"),eKr=o(" to load the model weights."),oKr=l(),F(FA.$$.fragment),rKr=l(),zr=a("div"),F(OS.$$.fragment),tKr=l(),rye=a("p"),aKr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nKr=l(),Pn=a("p"),sKr=o("The model class to instantiate is selected based on the "),tye=a("code"),lKr=o("model_type"),iKr=o(` property of the config object (either
passed as an argument or loaded from `),aye=a("code"),dKr=o("pretrained_model_name_or_path"),cKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nye=a("code"),mKr=o("pretrained_model_name_or_path"),fKr=o(":"),gKr=l(),VS=a("ul"),TA=a("li"),sye=a("strong"),hKr=o("bert"),uKr=o(" \u2014 "),Yte=a("a"),pKr=o("TFBertForNextSentencePrediction"),_Kr=o(" (BERT model)"),bKr=l(),MA=a("li"),lye=a("strong"),vKr=o("mobilebert"),FKr=o(" \u2014 "),Kte=a("a"),TKr=o("TFMobileBertForNextSentencePrediction"),MKr=o(" (MobileBERT model)"),EKr=l(),F(EA.$$.fragment),doo=l(),vm=a("h2"),CA=a("a"),iye=a("span"),F(XS.$$.fragment),CKr=l(),dye=a("span"),wKr=o("TFAutoModelForTableQuestionAnswering"),coo=l(),pr=a("div"),F(zS.$$.fragment),AKr=l(),Fm=a("p"),LKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Zte=a("a"),yKr=o("from_pretrained()"),xKr=o(" class method or the "),eae=a("a"),$Kr=o("from_config()"),kKr=o(` class
method.`),SKr=l(),QS=a("p"),RKr=o("This class cannot be instantiated directly using "),cye=a("code"),PKr=o("__init__()"),BKr=o(" (throws an error)."),IKr=l(),ea=a("div"),F(WS.$$.fragment),NKr=l(),mye=a("p"),qKr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),jKr=l(),Tm=a("p"),DKr=o(`Note:
Loading a model from its configuration file does `),fye=a("strong"),GKr=o("not"),OKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oae=a("a"),VKr=o("from_pretrained()"),XKr=o(" to load the model weights."),zKr=l(),F(wA.$$.fragment),QKr=l(),Qr=a("div"),F(US.$$.fragment),WKr=l(),gye=a("p"),UKr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HKr=l(),Bn=a("p"),JKr=o("The model class to instantiate is selected based on the "),hye=a("code"),YKr=o("model_type"),KKr=o(` property of the config object (either
passed as an argument or loaded from `),uye=a("code"),ZKr=o("pretrained_model_name_or_path"),eZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pye=a("code"),oZr=o("pretrained_model_name_or_path"),rZr=o(":"),tZr=l(),_ye=a("ul"),AA=a("li"),bye=a("strong"),aZr=o("tapas"),nZr=o(" \u2014 "),rae=a("a"),sZr=o("TFTapasForQuestionAnswering"),lZr=o(" (TAPAS model)"),iZr=l(),F(LA.$$.fragment),moo=l(),Mm=a("h2"),yA=a("a"),vye=a("span"),F(HS.$$.fragment),dZr=l(),Fye=a("span"),cZr=o("TFAutoModelForDocumentQuestionAnswering"),foo=l(),_r=a("div"),F(JS.$$.fragment),mZr=l(),Em=a("p"),fZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),tae=a("a"),gZr=o("from_pretrained()"),hZr=o(" class method or the "),aae=a("a"),uZr=o("from_config()"),pZr=o(` class
method.`),_Zr=l(),YS=a("p"),bZr=o("This class cannot be instantiated directly using "),Tye=a("code"),vZr=o("__init__()"),FZr=o(" (throws an error)."),TZr=l(),oa=a("div"),F(KS.$$.fragment),MZr=l(),Mye=a("p"),EZr=o("Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),CZr=l(),Cm=a("p"),wZr=o(`Note:
Loading a model from its configuration file does `),Eye=a("strong"),AZr=o("not"),LZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nae=a("a"),yZr=o("from_pretrained()"),xZr=o(" to load the model weights."),$Zr=l(),F(xA.$$.fragment),kZr=l(),Wr=a("div"),F(ZS.$$.fragment),SZr=l(),Cye=a("p"),RZr=o("Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),PZr=l(),In=a("p"),BZr=o("The model class to instantiate is selected based on the "),wye=a("code"),IZr=o("model_type"),NZr=o(` property of the config object (either
passed as an argument or loaded from `),Aye=a("code"),qZr=o("pretrained_model_name_or_path"),jZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lye=a("code"),DZr=o("pretrained_model_name_or_path"),GZr=o(":"),OZr=l(),yye=a("ul"),$A=a("li"),xye=a("strong"),VZr=o("layoutlm"),XZr=o(" \u2014 "),sae=a("a"),zZr=o("TFLayoutLMForQuestionAnswering"),QZr=o(" (LayoutLM model)"),WZr=l(),F(kA.$$.fragment),goo=l(),wm=a("h2"),SA=a("a"),$ye=a("span"),F(eR.$$.fragment),UZr=l(),kye=a("span"),HZr=o("TFAutoModelForTokenClassification"),hoo=l(),br=a("div"),F(oR.$$.fragment),JZr=l(),Am=a("p"),YZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lae=a("a"),KZr=o("from_pretrained()"),ZZr=o(" class method or the "),iae=a("a"),eet=o("from_config()"),oet=o(` class
method.`),ret=l(),rR=a("p"),tet=o("This class cannot be instantiated directly using "),Sye=a("code"),aet=o("__init__()"),net=o(" (throws an error)."),set=l(),ra=a("div"),F(tR.$$.fragment),iet=l(),Rye=a("p"),det=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cet=l(),Lm=a("p"),met=o(`Note:
Loading a model from its configuration file does `),Pye=a("strong"),fet=o("not"),get=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=a("a"),het=o("from_pretrained()"),uet=o(" to load the model weights."),pet=l(),F(RA.$$.fragment),_et=l(),Ur=a("div"),F(aR.$$.fragment),bet=l(),Bye=a("p"),vet=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fet=l(),Nn=a("p"),Tet=o("The model class to instantiate is selected based on the "),Iye=a("code"),Met=o("model_type"),Eet=o(` property of the config object (either
passed as an argument or loaded from `),Nye=a("code"),Cet=o("pretrained_model_name_or_path"),wet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qye=a("code"),Aet=o("pretrained_model_name_or_path"),Let=o(":"),yet=l(),de=a("ul"),PA=a("li"),jye=a("strong"),xet=o("albert"),$et=o(" \u2014 "),cae=a("a"),ket=o("TFAlbertForTokenClassification"),Set=o(" (ALBERT model)"),Ret=l(),BA=a("li"),Dye=a("strong"),Pet=o("bert"),Bet=o(" \u2014 "),mae=a("a"),Iet=o("TFBertForTokenClassification"),Net=o(" (BERT model)"),qet=l(),IA=a("li"),Gye=a("strong"),jet=o("camembert"),Det=o(" \u2014 "),fae=a("a"),Get=o("TFCamembertForTokenClassification"),Oet=o(" (CamemBERT model)"),Vet=l(),NA=a("li"),Oye=a("strong"),Xet=o("convbert"),zet=o(" \u2014 "),gae=a("a"),Qet=o("TFConvBertForTokenClassification"),Wet=o(" (ConvBERT model)"),Uet=l(),qA=a("li"),Vye=a("strong"),Het=o("deberta"),Jet=o(" \u2014 "),hae=a("a"),Yet=o("TFDebertaForTokenClassification"),Ket=o(" (DeBERTa model)"),Zet=l(),jA=a("li"),Xye=a("strong"),eot=o("deberta-v2"),oot=o(" \u2014 "),uae=a("a"),rot=o("TFDebertaV2ForTokenClassification"),tot=o(" (DeBERTa-v2 model)"),aot=l(),DA=a("li"),zye=a("strong"),not=o("distilbert"),sot=o(" \u2014 "),pae=a("a"),lot=o("TFDistilBertForTokenClassification"),iot=o(" (DistilBERT model)"),dot=l(),GA=a("li"),Qye=a("strong"),cot=o("electra"),mot=o(" \u2014 "),_ae=a("a"),fot=o("TFElectraForTokenClassification"),got=o(" (ELECTRA model)"),hot=l(),OA=a("li"),Wye=a("strong"),uot=o("flaubert"),pot=o(" \u2014 "),bae=a("a"),_ot=o("TFFlaubertForTokenClassification"),bot=o(" (FlauBERT model)"),vot=l(),VA=a("li"),Uye=a("strong"),Fot=o("funnel"),Tot=o(" \u2014 "),vae=a("a"),Mot=o("TFFunnelForTokenClassification"),Eot=o(" (Funnel Transformer model)"),Cot=l(),XA=a("li"),Hye=a("strong"),wot=o("layoutlm"),Aot=o(" \u2014 "),Fae=a("a"),Lot=o("TFLayoutLMForTokenClassification"),yot=o(" (LayoutLM model)"),xot=l(),zA=a("li"),Jye=a("strong"),$ot=o("layoutlmv3"),kot=o(" \u2014 "),Tae=a("a"),Sot=o("TFLayoutLMv3ForTokenClassification"),Rot=o(" (LayoutLMv3 model)"),Pot=l(),QA=a("li"),Yye=a("strong"),Bot=o("longformer"),Iot=o(" \u2014 "),Mae=a("a"),Not=o("TFLongformerForTokenClassification"),qot=o(" (Longformer model)"),jot=l(),WA=a("li"),Kye=a("strong"),Dot=o("mobilebert"),Got=o(" \u2014 "),Eae=a("a"),Oot=o("TFMobileBertForTokenClassification"),Vot=o(" (MobileBERT model)"),Xot=l(),UA=a("li"),Zye=a("strong"),zot=o("mpnet"),Qot=o(" \u2014 "),Cae=a("a"),Wot=o("TFMPNetForTokenClassification"),Uot=o(" (MPNet model)"),Hot=l(),HA=a("li"),e8e=a("strong"),Jot=o("rembert"),Yot=o(" \u2014 "),wae=a("a"),Kot=o("TFRemBertForTokenClassification"),Zot=o(" (RemBERT model)"),ert=l(),JA=a("li"),o8e=a("strong"),ort=o("roberta"),rrt=o(" \u2014 "),Aae=a("a"),trt=o("TFRobertaForTokenClassification"),art=o(" (RoBERTa model)"),nrt=l(),YA=a("li"),r8e=a("strong"),srt=o("roformer"),lrt=o(" \u2014 "),Lae=a("a"),irt=o("TFRoFormerForTokenClassification"),drt=o(" (RoFormer model)"),crt=l(),KA=a("li"),t8e=a("strong"),mrt=o("xlm"),frt=o(" \u2014 "),yae=a("a"),grt=o("TFXLMForTokenClassification"),hrt=o(" (XLM model)"),urt=l(),ZA=a("li"),a8e=a("strong"),prt=o("xlm-roberta"),_rt=o(" \u2014 "),xae=a("a"),brt=o("TFXLMRobertaForTokenClassification"),vrt=o(" (XLM-RoBERTa model)"),Frt=l(),e6=a("li"),n8e=a("strong"),Trt=o("xlnet"),Mrt=o(" \u2014 "),$ae=a("a"),Ert=o("TFXLNetForTokenClassification"),Crt=o(" (XLNet model)"),wrt=l(),F(o6.$$.fragment),uoo=l(),ym=a("h2"),r6=a("a"),s8e=a("span"),F(nR.$$.fragment),Art=l(),l8e=a("span"),Lrt=o("TFAutoModelForQuestionAnswering"),poo=l(),vr=a("div"),F(sR.$$.fragment),yrt=l(),xm=a("p"),xrt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kae=a("a"),$rt=o("from_pretrained()"),krt=o(" class method or the "),Sae=a("a"),Srt=o("from_config()"),Rrt=o(` class
method.`),Prt=l(),lR=a("p"),Brt=o("This class cannot be instantiated directly using "),i8e=a("code"),Irt=o("__init__()"),Nrt=o(" (throws an error)."),qrt=l(),ta=a("div"),F(iR.$$.fragment),jrt=l(),d8e=a("p"),Drt=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Grt=l(),$m=a("p"),Ort=o(`Note:
Loading a model from its configuration file does `),c8e=a("strong"),Vrt=o("not"),Xrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rae=a("a"),zrt=o("from_pretrained()"),Qrt=o(" to load the model weights."),Wrt=l(),F(t6.$$.fragment),Urt=l(),Hr=a("div"),F(dR.$$.fragment),Hrt=l(),m8e=a("p"),Jrt=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Yrt=l(),qn=a("p"),Krt=o("The model class to instantiate is selected based on the "),f8e=a("code"),Zrt=o("model_type"),ett=o(` property of the config object (either
passed as an argument or loaded from `),g8e=a("code"),ott=o("pretrained_model_name_or_path"),rtt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=a("code"),ttt=o("pretrained_model_name_or_path"),att=o(":"),ntt=l(),ce=a("ul"),a6=a("li"),u8e=a("strong"),stt=o("albert"),ltt=o(" \u2014 "),Pae=a("a"),itt=o("TFAlbertForQuestionAnswering"),dtt=o(" (ALBERT model)"),ctt=l(),n6=a("li"),p8e=a("strong"),mtt=o("bert"),ftt=o(" \u2014 "),Bae=a("a"),gtt=o("TFBertForQuestionAnswering"),htt=o(" (BERT model)"),utt=l(),s6=a("li"),_8e=a("strong"),ptt=o("camembert"),_tt=o(" \u2014 "),Iae=a("a"),btt=o("TFCamembertForQuestionAnswering"),vtt=o(" (CamemBERT model)"),Ftt=l(),l6=a("li"),b8e=a("strong"),Ttt=o("convbert"),Mtt=o(" \u2014 "),Nae=a("a"),Ett=o("TFConvBertForQuestionAnswering"),Ctt=o(" (ConvBERT model)"),wtt=l(),i6=a("li"),v8e=a("strong"),Att=o("deberta"),Ltt=o(" \u2014 "),qae=a("a"),ytt=o("TFDebertaForQuestionAnswering"),xtt=o(" (DeBERTa model)"),$tt=l(),d6=a("li"),F8e=a("strong"),ktt=o("deberta-v2"),Stt=o(" \u2014 "),jae=a("a"),Rtt=o("TFDebertaV2ForQuestionAnswering"),Ptt=o(" (DeBERTa-v2 model)"),Btt=l(),c6=a("li"),T8e=a("strong"),Itt=o("distilbert"),Ntt=o(" \u2014 "),Dae=a("a"),qtt=o("TFDistilBertForQuestionAnswering"),jtt=o(" (DistilBERT model)"),Dtt=l(),m6=a("li"),M8e=a("strong"),Gtt=o("electra"),Ott=o(" \u2014 "),Gae=a("a"),Vtt=o("TFElectraForQuestionAnswering"),Xtt=o(" (ELECTRA model)"),ztt=l(),f6=a("li"),E8e=a("strong"),Qtt=o("flaubert"),Wtt=o(" \u2014 "),Oae=a("a"),Utt=o("TFFlaubertForQuestionAnsweringSimple"),Htt=o(" (FlauBERT model)"),Jtt=l(),g6=a("li"),C8e=a("strong"),Ytt=o("funnel"),Ktt=o(" \u2014 "),Vae=a("a"),Ztt=o("TFFunnelForQuestionAnswering"),eat=o(" (Funnel Transformer model)"),oat=l(),h6=a("li"),w8e=a("strong"),rat=o("gptj"),tat=o(" \u2014 "),Xae=a("a"),aat=o("TFGPTJForQuestionAnswering"),nat=o(" (GPT-J model)"),sat=l(),u6=a("li"),A8e=a("strong"),lat=o("layoutlmv3"),iat=o(" \u2014 "),zae=a("a"),dat=o("TFLayoutLMv3ForQuestionAnswering"),cat=o(" (LayoutLMv3 model)"),mat=l(),p6=a("li"),L8e=a("strong"),fat=o("longformer"),gat=o(" \u2014 "),Qae=a("a"),hat=o("TFLongformerForQuestionAnswering"),uat=o(" (Longformer model)"),pat=l(),_6=a("li"),y8e=a("strong"),_at=o("mobilebert"),bat=o(" \u2014 "),Wae=a("a"),vat=o("TFMobileBertForQuestionAnswering"),Fat=o(" (MobileBERT model)"),Tat=l(),b6=a("li"),x8e=a("strong"),Mat=o("mpnet"),Eat=o(" \u2014 "),Uae=a("a"),Cat=o("TFMPNetForQuestionAnswering"),wat=o(" (MPNet model)"),Aat=l(),v6=a("li"),$8e=a("strong"),Lat=o("rembert"),yat=o(" \u2014 "),Hae=a("a"),xat=o("TFRemBertForQuestionAnswering"),$at=o(" (RemBERT model)"),kat=l(),F6=a("li"),k8e=a("strong"),Sat=o("roberta"),Rat=o(" \u2014 "),Jae=a("a"),Pat=o("TFRobertaForQuestionAnswering"),Bat=o(" (RoBERTa model)"),Iat=l(),T6=a("li"),S8e=a("strong"),Nat=o("roformer"),qat=o(" \u2014 "),Yae=a("a"),jat=o("TFRoFormerForQuestionAnswering"),Dat=o(" (RoFormer model)"),Gat=l(),M6=a("li"),R8e=a("strong"),Oat=o("xlm"),Vat=o(" \u2014 "),Kae=a("a"),Xat=o("TFXLMForQuestionAnsweringSimple"),zat=o(" (XLM model)"),Qat=l(),E6=a("li"),P8e=a("strong"),Wat=o("xlm-roberta"),Uat=o(" \u2014 "),Zae=a("a"),Hat=o("TFXLMRobertaForQuestionAnswering"),Jat=o(" (XLM-RoBERTa model)"),Yat=l(),C6=a("li"),B8e=a("strong"),Kat=o("xlnet"),Zat=o(" \u2014 "),ene=a("a"),ent=o("TFXLNetForQuestionAnsweringSimple"),ont=o(" (XLNet model)"),rnt=l(),F(w6.$$.fragment),_oo=l(),km=a("h2"),A6=a("a"),I8e=a("span"),F(cR.$$.fragment),tnt=l(),N8e=a("span"),ant=o("TFAutoModelForVision2Seq"),boo=l(),Fr=a("div"),F(mR.$$.fragment),nnt=l(),Sm=a("p"),snt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),one=a("a"),lnt=o("from_pretrained()"),int=o(" class method or the "),rne=a("a"),dnt=o("from_config()"),cnt=o(` class
method.`),mnt=l(),fR=a("p"),fnt=o("This class cannot be instantiated directly using "),q8e=a("code"),gnt=o("__init__()"),hnt=o(" (throws an error)."),unt=l(),aa=a("div"),F(gR.$$.fragment),pnt=l(),j8e=a("p"),_nt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bnt=l(),Rm=a("p"),vnt=o(`Note:
Loading a model from its configuration file does `),D8e=a("strong"),Fnt=o("not"),Tnt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tne=a("a"),Mnt=o("from_pretrained()"),Ent=o(" to load the model weights."),Cnt=l(),F(L6.$$.fragment),wnt=l(),Jr=a("div"),F(hR.$$.fragment),Ant=l(),G8e=a("p"),Lnt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ynt=l(),jn=a("p"),xnt=o("The model class to instantiate is selected based on the "),O8e=a("code"),$nt=o("model_type"),knt=o(` property of the config object (either
passed as an argument or loaded from `),V8e=a("code"),Snt=o("pretrained_model_name_or_path"),Rnt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X8e=a("code"),Pnt=o("pretrained_model_name_or_path"),Bnt=o(":"),Int=l(),z8e=a("ul"),y6=a("li"),Q8e=a("strong"),Nnt=o("vision-encoder-decoder"),qnt=o(" \u2014 "),ane=a("a"),jnt=o("TFVisionEncoderDecoderModel"),Dnt=o(" (Vision Encoder decoder model)"),Gnt=l(),F(x6.$$.fragment),voo=l(),Pm=a("h2"),$6=a("a"),W8e=a("span"),F(uR.$$.fragment),Ont=l(),U8e=a("span"),Vnt=o("TFAutoModelForSpeechSeq2Seq"),Foo=l(),Tr=a("div"),F(pR.$$.fragment),Xnt=l(),Bm=a("p"),znt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nne=a("a"),Qnt=o("from_pretrained()"),Wnt=o(" class method or the "),sne=a("a"),Unt=o("from_config()"),Hnt=o(` class
method.`),Jnt=l(),_R=a("p"),Ynt=o("This class cannot be instantiated directly using "),H8e=a("code"),Knt=o("__init__()"),Znt=o(" (throws an error)."),est=l(),na=a("div"),F(bR.$$.fragment),ost=l(),J8e=a("p"),rst=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tst=l(),Im=a("p"),ast=o(`Note:
Loading a model from its configuration file does `),Y8e=a("strong"),nst=o("not"),sst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lne=a("a"),lst=o("from_pretrained()"),ist=o(" to load the model weights."),dst=l(),F(k6.$$.fragment),cst=l(),Yr=a("div"),F(vR.$$.fragment),mst=l(),K8e=a("p"),fst=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gst=l(),Dn=a("p"),hst=o("The model class to instantiate is selected based on the "),Z8e=a("code"),ust=o("model_type"),pst=o(` property of the config object (either
passed as an argument or loaded from `),e9e=a("code"),_st=o("pretrained_model_name_or_path"),bst=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=a("code"),vst=o("pretrained_model_name_or_path"),Fst=o(":"),Tst=l(),r9e=a("ul"),S6=a("li"),t9e=a("strong"),Mst=o("speech_to_text"),Est=o(" \u2014 "),ine=a("a"),Cst=o("TFSpeech2TextForConditionalGeneration"),wst=o(" (Speech2Text model)"),Ast=l(),F(R6.$$.fragment),Too=l(),Nm=a("h2"),P6=a("a"),a9e=a("span"),F(FR.$$.fragment),Lst=l(),n9e=a("span"),yst=o("FlaxAutoModel"),Moo=l(),Mr=a("div"),F(TR.$$.fragment),xst=l(),qm=a("p"),$st=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dne=a("a"),kst=o("from_pretrained()"),Sst=o(" class method or the "),cne=a("a"),Rst=o("from_config()"),Pst=o(` class
method.`),Bst=l(),MR=a("p"),Ist=o("This class cannot be instantiated directly using "),s9e=a("code"),Nst=o("__init__()"),qst=o(" (throws an error)."),jst=l(),sa=a("div"),F(ER.$$.fragment),Dst=l(),l9e=a("p"),Gst=o("Instantiates one of the base model classes of the library from a configuration."),Ost=l(),jm=a("p"),Vst=o(`Note:
Loading a model from its configuration file does `),i9e=a("strong"),Xst=o("not"),zst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mne=a("a"),Qst=o("from_pretrained()"),Wst=o(" to load the model weights."),Ust=l(),F(B6.$$.fragment),Hst=l(),Kr=a("div"),F(CR.$$.fragment),Jst=l(),d9e=a("p"),Yst=o("Instantiate one of the base model classes of the library from a pretrained model."),Kst=l(),Gn=a("p"),Zst=o("The model class to instantiate is selected based on the "),c9e=a("code"),elt=o("model_type"),olt=o(` property of the config object (either
passed as an argument or loaded from `),m9e=a("code"),rlt=o("pretrained_model_name_or_path"),tlt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=a("code"),alt=o("pretrained_model_name_or_path"),nlt=o(":"),slt=l(),te=a("ul"),I6=a("li"),g9e=a("strong"),llt=o("albert"),ilt=o(" \u2014 "),fne=a("a"),dlt=o("FlaxAlbertModel"),clt=o(" (ALBERT model)"),mlt=l(),N6=a("li"),h9e=a("strong"),flt=o("bart"),glt=o(" \u2014 "),gne=a("a"),hlt=o("FlaxBartModel"),ult=o(" (BART model)"),plt=l(),q6=a("li"),u9e=a("strong"),_lt=o("beit"),blt=o(" \u2014 "),hne=a("a"),vlt=o("FlaxBeitModel"),Flt=o(" (BEiT model)"),Tlt=l(),j6=a("li"),p9e=a("strong"),Mlt=o("bert"),Elt=o(" \u2014 "),une=a("a"),Clt=o("FlaxBertModel"),wlt=o(" (BERT model)"),Alt=l(),D6=a("li"),_9e=a("strong"),Llt=o("big_bird"),ylt=o(" \u2014 "),pne=a("a"),xlt=o("FlaxBigBirdModel"),$lt=o(" (BigBird model)"),klt=l(),G6=a("li"),b9e=a("strong"),Slt=o("blenderbot"),Rlt=o(" \u2014 "),_ne=a("a"),Plt=o("FlaxBlenderbotModel"),Blt=o(" (Blenderbot model)"),Ilt=l(),O6=a("li"),v9e=a("strong"),Nlt=o("blenderbot-small"),qlt=o(" \u2014 "),bne=a("a"),jlt=o("FlaxBlenderbotSmallModel"),Dlt=o(" (BlenderbotSmall model)"),Glt=l(),V6=a("li"),F9e=a("strong"),Olt=o("clip"),Vlt=o(" \u2014 "),vne=a("a"),Xlt=o("FlaxCLIPModel"),zlt=o(" (CLIP model)"),Qlt=l(),X6=a("li"),T9e=a("strong"),Wlt=o("distilbert"),Ult=o(" \u2014 "),Fne=a("a"),Hlt=o("FlaxDistilBertModel"),Jlt=o(" (DistilBERT model)"),Ylt=l(),z6=a("li"),M9e=a("strong"),Klt=o("electra"),Zlt=o(" \u2014 "),Tne=a("a"),eit=o("FlaxElectraModel"),oit=o(" (ELECTRA model)"),rit=l(),Q6=a("li"),E9e=a("strong"),tit=o("gpt2"),ait=o(" \u2014 "),Mne=a("a"),nit=o("FlaxGPT2Model"),sit=o(" (OpenAI GPT-2 model)"),lit=l(),W6=a("li"),C9e=a("strong"),iit=o("gpt_neo"),dit=o(" \u2014 "),Ene=a("a"),cit=o("FlaxGPTNeoModel"),mit=o(" (GPT Neo model)"),fit=l(),U6=a("li"),w9e=a("strong"),git=o("gptj"),hit=o(" \u2014 "),Cne=a("a"),uit=o("FlaxGPTJModel"),pit=o(" (GPT-J model)"),_it=l(),H6=a("li"),A9e=a("strong"),bit=o("longt5"),vit=o(" \u2014 "),wne=a("a"),Fit=o("FlaxLongT5Model"),Tit=o(" (LongT5 model)"),Mit=l(),J6=a("li"),L9e=a("strong"),Eit=o("marian"),Cit=o(" \u2014 "),Ane=a("a"),wit=o("FlaxMarianModel"),Ait=o(" (Marian model)"),Lit=l(),Y6=a("li"),y9e=a("strong"),yit=o("mbart"),xit=o(" \u2014 "),Lne=a("a"),$it=o("FlaxMBartModel"),kit=o(" (mBART model)"),Sit=l(),K6=a("li"),x9e=a("strong"),Rit=o("mt5"),Pit=o(" \u2014 "),yne=a("a"),Bit=o("FlaxMT5Model"),Iit=o(" (MT5 model)"),Nit=l(),Z6=a("li"),$9e=a("strong"),qit=o("opt"),jit=o(" \u2014 "),xne=a("a"),Dit=o("FlaxOPTModel"),Git=o(" (OPT model)"),Oit=l(),e7=a("li"),k9e=a("strong"),Vit=o("pegasus"),Xit=o(" \u2014 "),$ne=a("a"),zit=o("FlaxPegasusModel"),Qit=o(" (Pegasus model)"),Wit=l(),o7=a("li"),S9e=a("strong"),Uit=o("roberta"),Hit=o(" \u2014 "),kne=a("a"),Jit=o("FlaxRobertaModel"),Yit=o(" (RoBERTa model)"),Kit=l(),r7=a("li"),R9e=a("strong"),Zit=o("roformer"),edt=o(" \u2014 "),Sne=a("a"),odt=o("FlaxRoFormerModel"),rdt=o(" (RoFormer model)"),tdt=l(),t7=a("li"),P9e=a("strong"),adt=o("t5"),ndt=o(" \u2014 "),Rne=a("a"),sdt=o("FlaxT5Model"),ldt=o(" (T5 model)"),idt=l(),a7=a("li"),B9e=a("strong"),ddt=o("vision-text-dual-encoder"),cdt=o(" \u2014 "),Pne=a("a"),mdt=o("FlaxVisionTextDualEncoderModel"),fdt=o(" (VisionTextDualEncoder model)"),gdt=l(),n7=a("li"),I9e=a("strong"),hdt=o("vit"),udt=o(" \u2014 "),Bne=a("a"),pdt=o("FlaxViTModel"),_dt=o(" (ViT model)"),bdt=l(),s7=a("li"),N9e=a("strong"),vdt=o("wav2vec2"),Fdt=o(" \u2014 "),Ine=a("a"),Tdt=o("FlaxWav2Vec2Model"),Mdt=o(" (Wav2Vec2 model)"),Edt=l(),l7=a("li"),q9e=a("strong"),Cdt=o("xglm"),wdt=o(" \u2014 "),Nne=a("a"),Adt=o("FlaxXGLMModel"),Ldt=o(" (XGLM model)"),ydt=l(),i7=a("li"),j9e=a("strong"),xdt=o("xlm-roberta"),$dt=o(" \u2014 "),qne=a("a"),kdt=o("FlaxXLMRobertaModel"),Sdt=o(" (XLM-RoBERTa model)"),Rdt=l(),F(d7.$$.fragment),Eoo=l(),Dm=a("h2"),c7=a("a"),D9e=a("span"),F(wR.$$.fragment),Pdt=l(),G9e=a("span"),Bdt=o("FlaxAutoModelForCausalLM"),Coo=l(),Er=a("div"),F(AR.$$.fragment),Idt=l(),Gm=a("p"),Ndt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jne=a("a"),qdt=o("from_pretrained()"),jdt=o(" class method or the "),Dne=a("a"),Ddt=o("from_config()"),Gdt=o(` class
method.`),Odt=l(),LR=a("p"),Vdt=o("This class cannot be instantiated directly using "),O9e=a("code"),Xdt=o("__init__()"),zdt=o(" (throws an error)."),Qdt=l(),la=a("div"),F(yR.$$.fragment),Wdt=l(),V9e=a("p"),Udt=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Hdt=l(),Om=a("p"),Jdt=o(`Note:
Loading a model from its configuration file does `),X9e=a("strong"),Ydt=o("not"),Kdt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gne=a("a"),Zdt=o("from_pretrained()"),ect=o(" to load the model weights."),oct=l(),F(m7.$$.fragment),rct=l(),Zr=a("div"),F(xR.$$.fragment),tct=l(),z9e=a("p"),act=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nct=l(),On=a("p"),sct=o("The model class to instantiate is selected based on the "),Q9e=a("code"),lct=o("model_type"),ict=o(` property of the config object (either
passed as an argument or loaded from `),W9e=a("code"),dct=o("pretrained_model_name_or_path"),cct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U9e=a("code"),mct=o("pretrained_model_name_or_path"),fct=o(":"),gct=l(),xe=a("ul"),f7=a("li"),H9e=a("strong"),hct=o("bart"),uct=o(" \u2014 "),One=a("a"),pct=o("FlaxBartForCausalLM"),_ct=o(" (BART model)"),bct=l(),g7=a("li"),J9e=a("strong"),vct=o("bert"),Fct=o(" \u2014 "),Vne=a("a"),Tct=o("FlaxBertForCausalLM"),Mct=o(" (BERT model)"),Ect=l(),h7=a("li"),Y9e=a("strong"),Cct=o("big_bird"),wct=o(" \u2014 "),Xne=a("a"),Act=o("FlaxBigBirdForCausalLM"),Lct=o(" (BigBird model)"),yct=l(),u7=a("li"),K9e=a("strong"),xct=o("electra"),$ct=o(" \u2014 "),zne=a("a"),kct=o("FlaxElectraForCausalLM"),Sct=o(" (ELECTRA model)"),Rct=l(),p7=a("li"),Z9e=a("strong"),Pct=o("gpt2"),Bct=o(" \u2014 "),Qne=a("a"),Ict=o("FlaxGPT2LMHeadModel"),Nct=o(" (OpenAI GPT-2 model)"),qct=l(),_7=a("li"),exe=a("strong"),jct=o("gpt_neo"),Dct=o(" \u2014 "),Wne=a("a"),Gct=o("FlaxGPTNeoForCausalLM"),Oct=o(" (GPT Neo model)"),Vct=l(),b7=a("li"),oxe=a("strong"),Xct=o("gptj"),zct=o(" \u2014 "),Une=a("a"),Qct=o("FlaxGPTJForCausalLM"),Wct=o(" (GPT-J model)"),Uct=l(),v7=a("li"),rxe=a("strong"),Hct=o("opt"),Jct=o(" \u2014 "),Hne=a("a"),Yct=o("FlaxOPTForCausalLM"),Kct=o(" (OPT model)"),Zct=l(),F7=a("li"),txe=a("strong"),emt=o("roberta"),omt=o(" \u2014 "),Jne=a("a"),rmt=o("FlaxRobertaForCausalLM"),tmt=o(" (RoBERTa model)"),amt=l(),T7=a("li"),axe=a("strong"),nmt=o("xglm"),smt=o(" \u2014 "),Yne=a("a"),lmt=o("FlaxXGLMForCausalLM"),imt=o(" (XGLM model)"),dmt=l(),F(M7.$$.fragment),woo=l(),Vm=a("h2"),E7=a("a"),nxe=a("span"),F($R.$$.fragment),cmt=l(),sxe=a("span"),mmt=o("FlaxAutoModelForPreTraining"),Aoo=l(),Cr=a("div"),F(kR.$$.fragment),fmt=l(),Xm=a("p"),gmt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kne=a("a"),hmt=o("from_pretrained()"),umt=o(" class method or the "),Zne=a("a"),pmt=o("from_config()"),_mt=o(` class
method.`),bmt=l(),SR=a("p"),vmt=o("This class cannot be instantiated directly using "),lxe=a("code"),Fmt=o("__init__()"),Tmt=o(" (throws an error)."),Mmt=l(),ia=a("div"),F(RR.$$.fragment),Emt=l(),ixe=a("p"),Cmt=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wmt=l(),zm=a("p"),Amt=o(`Note:
Loading a model from its configuration file does `),dxe=a("strong"),Lmt=o("not"),ymt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ese=a("a"),xmt=o("from_pretrained()"),$mt=o(" to load the model weights."),kmt=l(),F(C7.$$.fragment),Smt=l(),et=a("div"),F(PR.$$.fragment),Rmt=l(),cxe=a("p"),Pmt=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Bmt=l(),Vn=a("p"),Imt=o("The model class to instantiate is selected based on the "),mxe=a("code"),Nmt=o("model_type"),qmt=o(` property of the config object (either
passed as an argument or loaded from `),fxe=a("code"),jmt=o("pretrained_model_name_or_path"),Dmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gxe=a("code"),Gmt=o("pretrained_model_name_or_path"),Omt=o(":"),Vmt=l(),Ee=a("ul"),w7=a("li"),hxe=a("strong"),Xmt=o("albert"),zmt=o(" \u2014 "),ose=a("a"),Qmt=o("FlaxAlbertForPreTraining"),Wmt=o(" (ALBERT model)"),Umt=l(),A7=a("li"),uxe=a("strong"),Hmt=o("bart"),Jmt=o(" \u2014 "),rse=a("a"),Ymt=o("FlaxBartForConditionalGeneration"),Kmt=o(" (BART model)"),Zmt=l(),L7=a("li"),pxe=a("strong"),eft=o("bert"),oft=o(" \u2014 "),tse=a("a"),rft=o("FlaxBertForPreTraining"),tft=o(" (BERT model)"),aft=l(),y7=a("li"),_xe=a("strong"),nft=o("big_bird"),sft=o(" \u2014 "),ase=a("a"),lft=o("FlaxBigBirdForPreTraining"),ift=o(" (BigBird model)"),dft=l(),x7=a("li"),bxe=a("strong"),cft=o("electra"),mft=o(" \u2014 "),nse=a("a"),fft=o("FlaxElectraForPreTraining"),gft=o(" (ELECTRA model)"),hft=l(),$7=a("li"),vxe=a("strong"),uft=o("longt5"),pft=o(" \u2014 "),sse=a("a"),_ft=o("FlaxLongT5ForConditionalGeneration"),bft=o(" (LongT5 model)"),vft=l(),k7=a("li"),Fxe=a("strong"),Fft=o("mbart"),Tft=o(" \u2014 "),lse=a("a"),Mft=o("FlaxMBartForConditionalGeneration"),Eft=o(" (mBART model)"),Cft=l(),S7=a("li"),Txe=a("strong"),wft=o("mt5"),Aft=o(" \u2014 "),ise=a("a"),Lft=o("FlaxMT5ForConditionalGeneration"),yft=o(" (MT5 model)"),xft=l(),R7=a("li"),Mxe=a("strong"),$ft=o("roberta"),kft=o(" \u2014 "),dse=a("a"),Sft=o("FlaxRobertaForMaskedLM"),Rft=o(" (RoBERTa model)"),Pft=l(),P7=a("li"),Exe=a("strong"),Bft=o("roformer"),Ift=o(" \u2014 "),cse=a("a"),Nft=o("FlaxRoFormerForMaskedLM"),qft=o(" (RoFormer model)"),jft=l(),B7=a("li"),Cxe=a("strong"),Dft=o("t5"),Gft=o(" \u2014 "),mse=a("a"),Oft=o("FlaxT5ForConditionalGeneration"),Vft=o(" (T5 model)"),Xft=l(),I7=a("li"),wxe=a("strong"),zft=o("wav2vec2"),Qft=o(" \u2014 "),fse=a("a"),Wft=o("FlaxWav2Vec2ForPreTraining"),Uft=o(" (Wav2Vec2 model)"),Hft=l(),N7=a("li"),Axe=a("strong"),Jft=o("xlm-roberta"),Yft=o(" \u2014 "),gse=a("a"),Kft=o("FlaxXLMRobertaForMaskedLM"),Zft=o(" (XLM-RoBERTa model)"),egt=l(),F(q7.$$.fragment),Loo=l(),Qm=a("h2"),j7=a("a"),Lxe=a("span"),F(BR.$$.fragment),ogt=l(),yxe=a("span"),rgt=o("FlaxAutoModelForMaskedLM"),yoo=l(),wr=a("div"),F(IR.$$.fragment),tgt=l(),Wm=a("p"),agt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hse=a("a"),ngt=o("from_pretrained()"),sgt=o(" class method or the "),use=a("a"),lgt=o("from_config()"),igt=o(` class
method.`),dgt=l(),NR=a("p"),cgt=o("This class cannot be instantiated directly using "),xxe=a("code"),mgt=o("__init__()"),fgt=o(" (throws an error)."),ggt=l(),da=a("div"),F(qR.$$.fragment),hgt=l(),$xe=a("p"),ugt=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pgt=l(),Um=a("p"),_gt=o(`Note:
Loading a model from its configuration file does `),kxe=a("strong"),bgt=o("not"),vgt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pse=a("a"),Fgt=o("from_pretrained()"),Tgt=o(" to load the model weights."),Mgt=l(),F(D7.$$.fragment),Egt=l(),ot=a("div"),F(jR.$$.fragment),Cgt=l(),Sxe=a("p"),wgt=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Agt=l(),Xn=a("p"),Lgt=o("The model class to instantiate is selected based on the "),Rxe=a("code"),ygt=o("model_type"),xgt=o(` property of the config object (either
passed as an argument or loaded from `),Pxe=a("code"),$gt=o("pretrained_model_name_or_path"),kgt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bxe=a("code"),Sgt=o("pretrained_model_name_or_path"),Rgt=o(":"),Pgt=l(),$e=a("ul"),G7=a("li"),Ixe=a("strong"),Bgt=o("albert"),Igt=o(" \u2014 "),_se=a("a"),Ngt=o("FlaxAlbertForMaskedLM"),qgt=o(" (ALBERT model)"),jgt=l(),O7=a("li"),Nxe=a("strong"),Dgt=o("bart"),Ggt=o(" \u2014 "),bse=a("a"),Ogt=o("FlaxBartForConditionalGeneration"),Vgt=o(" (BART model)"),Xgt=l(),V7=a("li"),qxe=a("strong"),zgt=o("bert"),Qgt=o(" \u2014 "),vse=a("a"),Wgt=o("FlaxBertForMaskedLM"),Ugt=o(" (BERT model)"),Hgt=l(),X7=a("li"),jxe=a("strong"),Jgt=o("big_bird"),Ygt=o(" \u2014 "),Fse=a("a"),Kgt=o("FlaxBigBirdForMaskedLM"),Zgt=o(" (BigBird model)"),eht=l(),z7=a("li"),Dxe=a("strong"),oht=o("distilbert"),rht=o(" \u2014 "),Tse=a("a"),tht=o("FlaxDistilBertForMaskedLM"),aht=o(" (DistilBERT model)"),nht=l(),Q7=a("li"),Gxe=a("strong"),sht=o("electra"),lht=o(" \u2014 "),Mse=a("a"),iht=o("FlaxElectraForMaskedLM"),dht=o(" (ELECTRA model)"),cht=l(),W7=a("li"),Oxe=a("strong"),mht=o("mbart"),fht=o(" \u2014 "),Ese=a("a"),ght=o("FlaxMBartForConditionalGeneration"),hht=o(" (mBART model)"),uht=l(),U7=a("li"),Vxe=a("strong"),pht=o("roberta"),_ht=o(" \u2014 "),Cse=a("a"),bht=o("FlaxRobertaForMaskedLM"),vht=o(" (RoBERTa model)"),Fht=l(),H7=a("li"),Xxe=a("strong"),Tht=o("roformer"),Mht=o(" \u2014 "),wse=a("a"),Eht=o("FlaxRoFormerForMaskedLM"),Cht=o(" (RoFormer model)"),wht=l(),J7=a("li"),zxe=a("strong"),Aht=o("xlm-roberta"),Lht=o(" \u2014 "),Ase=a("a"),yht=o("FlaxXLMRobertaForMaskedLM"),xht=o(" (XLM-RoBERTa model)"),$ht=l(),F(Y7.$$.fragment),xoo=l(),Hm=a("h2"),K7=a("a"),Qxe=a("span"),F(DR.$$.fragment),kht=l(),Wxe=a("span"),Sht=o("FlaxAutoModelForSeq2SeqLM"),$oo=l(),Ar=a("div"),F(GR.$$.fragment),Rht=l(),Jm=a("p"),Pht=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Lse=a("a"),Bht=o("from_pretrained()"),Iht=o(" class method or the "),yse=a("a"),Nht=o("from_config()"),qht=o(` class
method.`),jht=l(),OR=a("p"),Dht=o("This class cannot be instantiated directly using "),Uxe=a("code"),Ght=o("__init__()"),Oht=o(" (throws an error)."),Vht=l(),ca=a("div"),F(VR.$$.fragment),Xht=l(),Hxe=a("p"),zht=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Qht=l(),Ym=a("p"),Wht=o(`Note:
Loading a model from its configuration file does `),Jxe=a("strong"),Uht=o("not"),Hht=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xse=a("a"),Jht=o("from_pretrained()"),Yht=o(" to load the model weights."),Kht=l(),F(Z7.$$.fragment),Zht=l(),rt=a("div"),F(XR.$$.fragment),eut=l(),Yxe=a("p"),out=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rut=l(),zn=a("p"),tut=o("The model class to instantiate is selected based on the "),Kxe=a("code"),aut=o("model_type"),nut=o(` property of the config object (either
passed as an argument or loaded from `),Zxe=a("code"),sut=o("pretrained_model_name_or_path"),lut=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e$e=a("code"),iut=o("pretrained_model_name_or_path"),dut=o(":"),cut=l(),ke=a("ul"),eL=a("li"),o$e=a("strong"),mut=o("bart"),fut=o(" \u2014 "),$se=a("a"),gut=o("FlaxBartForConditionalGeneration"),hut=o(" (BART model)"),uut=l(),oL=a("li"),r$e=a("strong"),put=o("blenderbot"),_ut=o(" \u2014 "),kse=a("a"),but=o("FlaxBlenderbotForConditionalGeneration"),vut=o(" (Blenderbot model)"),Fut=l(),rL=a("li"),t$e=a("strong"),Tut=o("blenderbot-small"),Mut=o(" \u2014 "),Sse=a("a"),Eut=o("FlaxBlenderbotSmallForConditionalGeneration"),Cut=o(" (BlenderbotSmall model)"),wut=l(),tL=a("li"),a$e=a("strong"),Aut=o("encoder-decoder"),Lut=o(" \u2014 "),Rse=a("a"),yut=o("FlaxEncoderDecoderModel"),xut=o(" (Encoder decoder model)"),$ut=l(),aL=a("li"),n$e=a("strong"),kut=o("longt5"),Sut=o(" \u2014 "),Pse=a("a"),Rut=o("FlaxLongT5ForConditionalGeneration"),Put=o(" (LongT5 model)"),But=l(),nL=a("li"),s$e=a("strong"),Iut=o("marian"),Nut=o(" \u2014 "),Bse=a("a"),qut=o("FlaxMarianMTModel"),jut=o(" (Marian model)"),Dut=l(),sL=a("li"),l$e=a("strong"),Gut=o("mbart"),Out=o(" \u2014 "),Ise=a("a"),Vut=o("FlaxMBartForConditionalGeneration"),Xut=o(" (mBART model)"),zut=l(),lL=a("li"),i$e=a("strong"),Qut=o("mt5"),Wut=o(" \u2014 "),Nse=a("a"),Uut=o("FlaxMT5ForConditionalGeneration"),Hut=o(" (MT5 model)"),Jut=l(),iL=a("li"),d$e=a("strong"),Yut=o("pegasus"),Kut=o(" \u2014 "),qse=a("a"),Zut=o("FlaxPegasusForConditionalGeneration"),ept=o(" (Pegasus model)"),opt=l(),dL=a("li"),c$e=a("strong"),rpt=o("t5"),tpt=o(" \u2014 "),jse=a("a"),apt=o("FlaxT5ForConditionalGeneration"),npt=o(" (T5 model)"),spt=l(),F(cL.$$.fragment),koo=l(),Km=a("h2"),mL=a("a"),m$e=a("span"),F(zR.$$.fragment),lpt=l(),f$e=a("span"),ipt=o("FlaxAutoModelForSequenceClassification"),Soo=l(),Lr=a("div"),F(QR.$$.fragment),dpt=l(),Zm=a("p"),cpt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Dse=a("a"),mpt=o("from_pretrained()"),fpt=o(" class method or the "),Gse=a("a"),gpt=o("from_config()"),hpt=o(` class
method.`),upt=l(),WR=a("p"),ppt=o("This class cannot be instantiated directly using "),g$e=a("code"),_pt=o("__init__()"),bpt=o(" (throws an error)."),vpt=l(),ma=a("div"),F(UR.$$.fragment),Fpt=l(),h$e=a("p"),Tpt=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Mpt=l(),ef=a("p"),Ept=o(`Note:
Loading a model from its configuration file does `),u$e=a("strong"),Cpt=o("not"),wpt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ose=a("a"),Apt=o("from_pretrained()"),Lpt=o(" to load the model weights."),ypt=l(),F(fL.$$.fragment),xpt=l(),tt=a("div"),F(HR.$$.fragment),$pt=l(),p$e=a("p"),kpt=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Spt=l(),Qn=a("p"),Rpt=o("The model class to instantiate is selected based on the "),_$e=a("code"),Ppt=o("model_type"),Bpt=o(` property of the config object (either
passed as an argument or loaded from `),b$e=a("code"),Ipt=o("pretrained_model_name_or_path"),Npt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v$e=a("code"),qpt=o("pretrained_model_name_or_path"),jpt=o(":"),Dpt=l(),Se=a("ul"),gL=a("li"),F$e=a("strong"),Gpt=o("albert"),Opt=o(" \u2014 "),Vse=a("a"),Vpt=o("FlaxAlbertForSequenceClassification"),Xpt=o(" (ALBERT model)"),zpt=l(),hL=a("li"),T$e=a("strong"),Qpt=o("bart"),Wpt=o(" \u2014 "),Xse=a("a"),Upt=o("FlaxBartForSequenceClassification"),Hpt=o(" (BART model)"),Jpt=l(),uL=a("li"),M$e=a("strong"),Ypt=o("bert"),Kpt=o(" \u2014 "),zse=a("a"),Zpt=o("FlaxBertForSequenceClassification"),e_t=o(" (BERT model)"),o_t=l(),pL=a("li"),E$e=a("strong"),r_t=o("big_bird"),t_t=o(" \u2014 "),Qse=a("a"),a_t=o("FlaxBigBirdForSequenceClassification"),n_t=o(" (BigBird model)"),s_t=l(),_L=a("li"),C$e=a("strong"),l_t=o("distilbert"),i_t=o(" \u2014 "),Wse=a("a"),d_t=o("FlaxDistilBertForSequenceClassification"),c_t=o(" (DistilBERT model)"),m_t=l(),bL=a("li"),w$e=a("strong"),f_t=o("electra"),g_t=o(" \u2014 "),Use=a("a"),h_t=o("FlaxElectraForSequenceClassification"),u_t=o(" (ELECTRA model)"),p_t=l(),vL=a("li"),A$e=a("strong"),__t=o("mbart"),b_t=o(" \u2014 "),Hse=a("a"),v_t=o("FlaxMBartForSequenceClassification"),F_t=o(" (mBART model)"),T_t=l(),FL=a("li"),L$e=a("strong"),M_t=o("roberta"),E_t=o(" \u2014 "),Jse=a("a"),C_t=o("FlaxRobertaForSequenceClassification"),w_t=o(" (RoBERTa model)"),A_t=l(),TL=a("li"),y$e=a("strong"),L_t=o("roformer"),y_t=o(" \u2014 "),Yse=a("a"),x_t=o("FlaxRoFormerForSequenceClassification"),$_t=o(" (RoFormer model)"),k_t=l(),ML=a("li"),x$e=a("strong"),S_t=o("xlm-roberta"),R_t=o(" \u2014 "),Kse=a("a"),P_t=o("FlaxXLMRobertaForSequenceClassification"),B_t=o(" (XLM-RoBERTa model)"),I_t=l(),F(EL.$$.fragment),Roo=l(),of=a("h2"),CL=a("a"),$$e=a("span"),F(JR.$$.fragment),N_t=l(),k$e=a("span"),q_t=o("FlaxAutoModelForQuestionAnswering"),Poo=l(),yr=a("div"),F(YR.$$.fragment),j_t=l(),rf=a("p"),D_t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Zse=a("a"),G_t=o("from_pretrained()"),O_t=o(" class method or the "),ele=a("a"),V_t=o("from_config()"),X_t=o(` class
method.`),z_t=l(),KR=a("p"),Q_t=o("This class cannot be instantiated directly using "),S$e=a("code"),W_t=o("__init__()"),U_t=o(" (throws an error)."),H_t=l(),fa=a("div"),F(ZR.$$.fragment),J_t=l(),R$e=a("p"),Y_t=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),K_t=l(),tf=a("p"),Z_t=o(`Note:
Loading a model from its configuration file does `),P$e=a("strong"),e2t=o("not"),o2t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=a("a"),r2t=o("from_pretrained()"),t2t=o(" to load the model weights."),a2t=l(),F(wL.$$.fragment),n2t=l(),at=a("div"),F(eP.$$.fragment),s2t=l(),B$e=a("p"),l2t=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),i2t=l(),Wn=a("p"),d2t=o("The model class to instantiate is selected based on the "),I$e=a("code"),c2t=o("model_type"),m2t=o(` property of the config object (either
passed as an argument or loaded from `),N$e=a("code"),f2t=o("pretrained_model_name_or_path"),g2t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q$e=a("code"),h2t=o("pretrained_model_name_or_path"),u2t=o(":"),p2t=l(),Re=a("ul"),AL=a("li"),j$e=a("strong"),_2t=o("albert"),b2t=o(" \u2014 "),rle=a("a"),v2t=o("FlaxAlbertForQuestionAnswering"),F2t=o(" (ALBERT model)"),T2t=l(),LL=a("li"),D$e=a("strong"),M2t=o("bart"),E2t=o(" \u2014 "),tle=a("a"),C2t=o("FlaxBartForQuestionAnswering"),w2t=o(" (BART model)"),A2t=l(),yL=a("li"),G$e=a("strong"),L2t=o("bert"),y2t=o(" \u2014 "),ale=a("a"),x2t=o("FlaxBertForQuestionAnswering"),$2t=o(" (BERT model)"),k2t=l(),xL=a("li"),O$e=a("strong"),S2t=o("big_bird"),R2t=o(" \u2014 "),nle=a("a"),P2t=o("FlaxBigBirdForQuestionAnswering"),B2t=o(" (BigBird model)"),I2t=l(),$L=a("li"),V$e=a("strong"),N2t=o("distilbert"),q2t=o(" \u2014 "),sle=a("a"),j2t=o("FlaxDistilBertForQuestionAnswering"),D2t=o(" (DistilBERT model)"),G2t=l(),kL=a("li"),X$e=a("strong"),O2t=o("electra"),V2t=o(" \u2014 "),lle=a("a"),X2t=o("FlaxElectraForQuestionAnswering"),z2t=o(" (ELECTRA model)"),Q2t=l(),SL=a("li"),z$e=a("strong"),W2t=o("mbart"),U2t=o(" \u2014 "),ile=a("a"),H2t=o("FlaxMBartForQuestionAnswering"),J2t=o(" (mBART model)"),Y2t=l(),RL=a("li"),Q$e=a("strong"),K2t=o("roberta"),Z2t=o(" \u2014 "),dle=a("a"),e1t=o("FlaxRobertaForQuestionAnswering"),o1t=o(" (RoBERTa model)"),r1t=l(),PL=a("li"),W$e=a("strong"),t1t=o("roformer"),a1t=o(" \u2014 "),cle=a("a"),n1t=o("FlaxRoFormerForQuestionAnswering"),s1t=o(" (RoFormer model)"),l1t=l(),BL=a("li"),U$e=a("strong"),i1t=o("xlm-roberta"),d1t=o(" \u2014 "),mle=a("a"),c1t=o("FlaxXLMRobertaForQuestionAnswering"),m1t=o(" (XLM-RoBERTa model)"),f1t=l(),F(IL.$$.fragment),Boo=l(),af=a("h2"),NL=a("a"),H$e=a("span"),F(oP.$$.fragment),g1t=l(),J$e=a("span"),h1t=o("FlaxAutoModelForTokenClassification"),Ioo=l(),xr=a("div"),F(rP.$$.fragment),u1t=l(),nf=a("p"),p1t=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fle=a("a"),_1t=o("from_pretrained()"),b1t=o(" class method or the "),gle=a("a"),v1t=o("from_config()"),F1t=o(` class
method.`),T1t=l(),tP=a("p"),M1t=o("This class cannot be instantiated directly using "),Y$e=a("code"),E1t=o("__init__()"),C1t=o(" (throws an error)."),w1t=l(),ga=a("div"),F(aP.$$.fragment),A1t=l(),K$e=a("p"),L1t=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),y1t=l(),sf=a("p"),x1t=o(`Note:
Loading a model from its configuration file does `),Z$e=a("strong"),$1t=o("not"),k1t=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hle=a("a"),S1t=o("from_pretrained()"),R1t=o(" to load the model weights."),P1t=l(),F(qL.$$.fragment),B1t=l(),nt=a("div"),F(nP.$$.fragment),I1t=l(),eke=a("p"),N1t=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),q1t=l(),Un=a("p"),j1t=o("The model class to instantiate is selected based on the "),oke=a("code"),D1t=o("model_type"),G1t=o(` property of the config object (either
passed as an argument or loaded from `),rke=a("code"),O1t=o("pretrained_model_name_or_path"),V1t=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tke=a("code"),X1t=o("pretrained_model_name_or_path"),z1t=o(":"),Q1t=l(),Xe=a("ul"),jL=a("li"),ake=a("strong"),W1t=o("albert"),U1t=o(" \u2014 "),ule=a("a"),H1t=o("FlaxAlbertForTokenClassification"),J1t=o(" (ALBERT model)"),Y1t=l(),DL=a("li"),nke=a("strong"),K1t=o("bert"),Z1t=o(" \u2014 "),ple=a("a"),ebt=o("FlaxBertForTokenClassification"),obt=o(" (BERT model)"),rbt=l(),GL=a("li"),ske=a("strong"),tbt=o("big_bird"),abt=o(" \u2014 "),_le=a("a"),nbt=o("FlaxBigBirdForTokenClassification"),sbt=o(" (BigBird model)"),lbt=l(),OL=a("li"),lke=a("strong"),ibt=o("distilbert"),dbt=o(" \u2014 "),ble=a("a"),cbt=o("FlaxDistilBertForTokenClassification"),mbt=o(" (DistilBERT model)"),fbt=l(),VL=a("li"),ike=a("strong"),gbt=o("electra"),hbt=o(" \u2014 "),vle=a("a"),ubt=o("FlaxElectraForTokenClassification"),pbt=o(" (ELECTRA model)"),_bt=l(),XL=a("li"),dke=a("strong"),bbt=o("roberta"),vbt=o(" \u2014 "),Fle=a("a"),Fbt=o("FlaxRobertaForTokenClassification"),Tbt=o(" (RoBERTa model)"),Mbt=l(),zL=a("li"),cke=a("strong"),Ebt=o("roformer"),Cbt=o(" \u2014 "),Tle=a("a"),wbt=o("FlaxRoFormerForTokenClassification"),Abt=o(" (RoFormer model)"),Lbt=l(),QL=a("li"),mke=a("strong"),ybt=o("xlm-roberta"),xbt=o(" \u2014 "),Mle=a("a"),$bt=o("FlaxXLMRobertaForTokenClassification"),kbt=o(" (XLM-RoBERTa model)"),Sbt=l(),F(WL.$$.fragment),Noo=l(),lf=a("h2"),UL=a("a"),fke=a("span"),F(sP.$$.fragment),Rbt=l(),gke=a("span"),Pbt=o("FlaxAutoModelForMultipleChoice"),qoo=l(),$r=a("div"),F(lP.$$.fragment),Bbt=l(),df=a("p"),Ibt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ele=a("a"),Nbt=o("from_pretrained()"),qbt=o(" class method or the "),Cle=a("a"),jbt=o("from_config()"),Dbt=o(` class
method.`),Gbt=l(),iP=a("p"),Obt=o("This class cannot be instantiated directly using "),hke=a("code"),Vbt=o("__init__()"),Xbt=o(" (throws an error)."),zbt=l(),ha=a("div"),F(dP.$$.fragment),Qbt=l(),uke=a("p"),Wbt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ubt=l(),cf=a("p"),Hbt=o(`Note:
Loading a model from its configuration file does `),pke=a("strong"),Jbt=o("not"),Ybt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wle=a("a"),Kbt=o("from_pretrained()"),Zbt=o(" to load the model weights."),evt=l(),F(HL.$$.fragment),ovt=l(),st=a("div"),F(cP.$$.fragment),rvt=l(),_ke=a("p"),tvt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),avt=l(),Hn=a("p"),nvt=o("The model class to instantiate is selected based on the "),bke=a("code"),svt=o("model_type"),lvt=o(` property of the config object (either
passed as an argument or loaded from `),vke=a("code"),ivt=o("pretrained_model_name_or_path"),dvt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fke=a("code"),cvt=o("pretrained_model_name_or_path"),mvt=o(":"),fvt=l(),ze=a("ul"),JL=a("li"),Tke=a("strong"),gvt=o("albert"),hvt=o(" \u2014 "),Ale=a("a"),uvt=o("FlaxAlbertForMultipleChoice"),pvt=o(" (ALBERT model)"),_vt=l(),YL=a("li"),Mke=a("strong"),bvt=o("bert"),vvt=o(" \u2014 "),Lle=a("a"),Fvt=o("FlaxBertForMultipleChoice"),Tvt=o(" (BERT model)"),Mvt=l(),KL=a("li"),Eke=a("strong"),Evt=o("big_bird"),Cvt=o(" \u2014 "),yle=a("a"),wvt=o("FlaxBigBirdForMultipleChoice"),Avt=o(" (BigBird model)"),Lvt=l(),ZL=a("li"),Cke=a("strong"),yvt=o("distilbert"),xvt=o(" \u2014 "),xle=a("a"),$vt=o("FlaxDistilBertForMultipleChoice"),kvt=o(" (DistilBERT model)"),Svt=l(),ey=a("li"),wke=a("strong"),Rvt=o("electra"),Pvt=o(" \u2014 "),$le=a("a"),Bvt=o("FlaxElectraForMultipleChoice"),Ivt=o(" (ELECTRA model)"),Nvt=l(),oy=a("li"),Ake=a("strong"),qvt=o("roberta"),jvt=o(" \u2014 "),kle=a("a"),Dvt=o("FlaxRobertaForMultipleChoice"),Gvt=o(" (RoBERTa model)"),Ovt=l(),ry=a("li"),Lke=a("strong"),Vvt=o("roformer"),Xvt=o(" \u2014 "),Sle=a("a"),zvt=o("FlaxRoFormerForMultipleChoice"),Qvt=o(" (RoFormer model)"),Wvt=l(),ty=a("li"),yke=a("strong"),Uvt=o("xlm-roberta"),Hvt=o(" \u2014 "),Rle=a("a"),Jvt=o("FlaxXLMRobertaForMultipleChoice"),Yvt=o(" (XLM-RoBERTa model)"),Kvt=l(),F(ay.$$.fragment),joo=l(),mf=a("h2"),ny=a("a"),xke=a("span"),F(mP.$$.fragment),Zvt=l(),$ke=a("span"),eFt=o("FlaxAutoModelForNextSentencePrediction"),Doo=l(),kr=a("div"),F(fP.$$.fragment),oFt=l(),ff=a("p"),rFt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ple=a("a"),tFt=o("from_pretrained()"),aFt=o(" class method or the "),Ble=a("a"),nFt=o("from_config()"),sFt=o(` class
method.`),lFt=l(),gP=a("p"),iFt=o("This class cannot be instantiated directly using "),kke=a("code"),dFt=o("__init__()"),cFt=o(" (throws an error)."),mFt=l(),ua=a("div"),F(hP.$$.fragment),fFt=l(),Ske=a("p"),gFt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hFt=l(),gf=a("p"),uFt=o(`Note:
Loading a model from its configuration file does `),Rke=a("strong"),pFt=o("not"),_Ft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ile=a("a"),bFt=o("from_pretrained()"),vFt=o(" to load the model weights."),FFt=l(),F(sy.$$.fragment),TFt=l(),lt=a("div"),F(uP.$$.fragment),MFt=l(),Pke=a("p"),EFt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CFt=l(),Jn=a("p"),wFt=o("The model class to instantiate is selected based on the "),Bke=a("code"),AFt=o("model_type"),LFt=o(` property of the config object (either
passed as an argument or loaded from `),Ike=a("code"),yFt=o("pretrained_model_name_or_path"),xFt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nke=a("code"),$Ft=o("pretrained_model_name_or_path"),kFt=o(":"),SFt=l(),qke=a("ul"),ly=a("li"),jke=a("strong"),RFt=o("bert"),PFt=o(" \u2014 "),Nle=a("a"),BFt=o("FlaxBertForNextSentencePrediction"),IFt=o(" (BERT model)"),NFt=l(),F(iy.$$.fragment),Goo=l(),hf=a("h2"),dy=a("a"),Dke=a("span"),F(pP.$$.fragment),qFt=l(),Gke=a("span"),jFt=o("FlaxAutoModelForImageClassification"),Ooo=l(),Sr=a("div"),F(_P.$$.fragment),DFt=l(),uf=a("p"),GFt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qle=a("a"),OFt=o("from_pretrained()"),VFt=o(" class method or the "),jle=a("a"),XFt=o("from_config()"),zFt=o(` class
method.`),QFt=l(),bP=a("p"),WFt=o("This class cannot be instantiated directly using "),Oke=a("code"),UFt=o("__init__()"),HFt=o(" (throws an error)."),JFt=l(),pa=a("div"),F(vP.$$.fragment),YFt=l(),Vke=a("p"),KFt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZFt=l(),pf=a("p"),eTt=o(`Note:
Loading a model from its configuration file does `),Xke=a("strong"),oTt=o("not"),rTt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dle=a("a"),tTt=o("from_pretrained()"),aTt=o(" to load the model weights."),nTt=l(),F(cy.$$.fragment),sTt=l(),it=a("div"),F(FP.$$.fragment),lTt=l(),zke=a("p"),iTt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dTt=l(),Yn=a("p"),cTt=o("The model class to instantiate is selected based on the "),Qke=a("code"),mTt=o("model_type"),fTt=o(` property of the config object (either
passed as an argument or loaded from `),Wke=a("code"),gTt=o("pretrained_model_name_or_path"),hTt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uke=a("code"),uTt=o("pretrained_model_name_or_path"),pTt=o(":"),_Tt=l(),TP=a("ul"),my=a("li"),Hke=a("strong"),bTt=o("beit"),vTt=o(" \u2014 "),Gle=a("a"),FTt=o("FlaxBeitForImageClassification"),TTt=o(" (BEiT model)"),MTt=l(),fy=a("li"),Jke=a("strong"),ETt=o("vit"),CTt=o(" \u2014 "),Ole=a("a"),wTt=o("FlaxViTForImageClassification"),ATt=o(" (ViT model)"),LTt=l(),F(gy.$$.fragment),Voo=l(),_f=a("h2"),hy=a("a"),Yke=a("span"),F(MP.$$.fragment),yTt=l(),Kke=a("span"),xTt=o("FlaxAutoModelForVision2Seq"),Xoo=l(),Rr=a("div"),F(EP.$$.fragment),$Tt=l(),bf=a("p"),kTt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Vle=a("a"),STt=o("from_pretrained()"),RTt=o(" class method or the "),Xle=a("a"),PTt=o("from_config()"),BTt=o(` class
method.`),ITt=l(),CP=a("p"),NTt=o("This class cannot be instantiated directly using "),Zke=a("code"),qTt=o("__init__()"),jTt=o(" (throws an error)."),DTt=l(),_a=a("div"),F(wP.$$.fragment),GTt=l(),eSe=a("p"),OTt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VTt=l(),vf=a("p"),XTt=o(`Note:
Loading a model from its configuration file does `),oSe=a("strong"),zTt=o("not"),QTt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zle=a("a"),WTt=o("from_pretrained()"),UTt=o(" to load the model weights."),HTt=l(),F(uy.$$.fragment),JTt=l(),dt=a("div"),F(AP.$$.fragment),YTt=l(),rSe=a("p"),KTt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZTt=l(),Kn=a("p"),eMt=o("The model class to instantiate is selected based on the "),tSe=a("code"),oMt=o("model_type"),rMt=o(` property of the config object (either
passed as an argument or loaded from `),aSe=a("code"),tMt=o("pretrained_model_name_or_path"),aMt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nSe=a("code"),nMt=o("pretrained_model_name_or_path"),sMt=o(":"),lMt=l(),sSe=a("ul"),py=a("li"),lSe=a("strong"),iMt=o("vision-encoder-decoder"),dMt=o(" \u2014 "),Qle=a("a"),cMt=o("FlaxVisionEncoderDecoderModel"),mMt=o(" (Vision Encoder decoder model)"),fMt=l(),F(_y.$$.fragment),this.h()},l(m){const _=f2a('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var LP=s(u);f=n(LP,"A",{id:!0,class:!0,href:!0});var iSe=s(f);p=n(iSe,"SPAN",{});var dSe=s(p);T(d.$$.fragment,dSe),dSe.forEach(t),iSe.forEach(t),h=i(LP),yo=n(LP,"SPAN",{});var cSe=s(yo);td=r(cSe,"Auto Classes"),cSe.forEach(t),LP.forEach(t),Ef=i(m),pt=n(m,"P",{});var yP=s(pt);ad=r(yP,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),nd=n(yP,"CODE",{});var mSe=s(nd);U9=r(mSe,"from_pretrained()"),mSe.forEach(t),Cf=r(yP,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),yP.forEach(t),Ve=i(m),He=n(m,"P",{});var Zn=s(He);sd=r(Zn,"Instantiating one of "),es=n(Zn,"A",{href:!0});var fSe=s(es);H9=r(fSe,"AutoConfig"),fSe.forEach(t),os=r(Zn,", "),rs=n(Zn,"A",{href:!0});var gSe=s(rs);J9=r(gSe,"AutoModel"),gSe.forEach(t),ld=r(Zn,`, and
`),ts=n(Zn,"A",{href:!0});var hSe=s(ts);Y9=r(hSe,"AutoTokenizer"),hSe.forEach(t),id=r(Zn," will directly create a class of the relevant architecture. For instance"),Zn.forEach(t),wf=i(m),T(Qa.$$.fragment,m),Je=i(m),Ae=n(m,"P",{});var xP=s(Ae);KB=r(xP,"will create a model that is an instance of "),dd=n(xP,"A",{href:!0});var uSe=s(dd);ZB=r(uSe,"BertModel"),uSe.forEach(t),eI=r(xP,"."),xP.forEach(t),xo=i(m),Wa=n(m,"P",{});var $P=s(Wa);oI=r($P,"There is one class of "),Af=n($P,"CODE",{});var pSe=s(Af);rI=r(pSe,"AutoModel"),pSe.forEach(t),iao=r($P," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$P.forEach(t),SZe=i(m),cd=n(m,"H2",{class:!0});var kP=s(cd);Lf=n(kP,"A",{id:!0,class:!0,href:!0});var _Se=s(Lf);Jde=n(_Se,"SPAN",{});var bSe=s(Jde);T(K9.$$.fragment,bSe),bSe.forEach(t),_Se.forEach(t),dao=i(kP),Yde=n(kP,"SPAN",{});var vSe=s(Yde);cao=r(vSe,"Extending the Auto Classes"),vSe.forEach(t),kP.forEach(t),RZe=i(m),as=n(m,"P",{});var Ff=s(as);mao=r(Ff,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Kde=n(Ff,"CODE",{});var FSe=s(Kde);fao=r(FSe,"NewModel"),FSe.forEach(t),gao=r(Ff,", make sure you have a "),Zde=n(Ff,"CODE",{});var TSe=s(Zde);hao=r(TSe,"NewModelConfig"),TSe.forEach(t),uao=r(Ff,` then you can add those to the auto
classes like this:`),Ff.forEach(t),PZe=i(m),T(Z9.$$.fragment,m),BZe=i(m),tI=n(m,"P",{});var MSe=s(tI);pao=r(MSe,"You will then be able to use the auto classes like you would usually do!"),MSe.forEach(t),IZe=i(m),T(yf.$$.fragment,m),NZe=i(m),md=n(m,"H2",{class:!0});var SP=s(md);xf=n(SP,"A",{id:!0,class:!0,href:!0});var ESe=s(xf);ece=n(ESe,"SPAN",{});var CSe=s(ece);T(ex.$$.fragment,CSe),CSe.forEach(t),ESe.forEach(t),_ao=i(SP),oce=n(SP,"SPAN",{});var wSe=s(oce);bao=r(wSe,"AutoConfig"),wSe.forEach(t),SP.forEach(t),qZe=i(m),$o=n(m,"DIV",{class:!0});var ht=s($o);T(ox.$$.fragment,ht),vao=i(ht),rx=n(ht,"P",{});var RP=s(rx);Fao=r(RP,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),aI=n(RP,"A",{href:!0});var ASe=s(aI);Tao=r(ASe,"from_pretrained()"),ASe.forEach(t),Mao=r(RP," class method."),RP.forEach(t),Eao=i(ht),tx=n(ht,"P",{});var PP=s(tx);Cao=r(PP,"This class cannot be instantiated directly using "),rce=n(PP,"CODE",{});var LSe=s(rce);wao=r(LSe,"__init__()"),LSe.forEach(t),Aao=r(PP," (throws an error)."),PP.forEach(t),Lao=i(ht),Pr=n(ht,"DIV",{class:!0});var ut=s(Pr);T(ax.$$.fragment,ut),yao=i(ut),tce=n(ut,"P",{});var ySe=s(tce);xao=r(ySe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ySe.forEach(t),$ao=i(ut),fd=n(ut,"P",{});var Tf=s(fd);kao=r(Tf,"The configuration class to instantiate is selected based on the "),ace=n(Tf,"CODE",{});var xSe=s(ace);Sao=r(xSe,"model_type"),xSe.forEach(t),Rao=r(Tf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),nce=n(Tf,"CODE",{});var $Se=s(nce);Pao=r($Se,"pretrained_model_name_or_path"),$Se.forEach(t),Bao=r(Tf,":"),Tf.forEach(t),Iao=i(ut),A=n(ut,"UL",{});var L=s(A);$f=n(L,"LI",{});var by=s($f);sce=n(by,"STRONG",{});var kSe=s(sce);Nao=r(kSe,"albert"),kSe.forEach(t),qao=r(by," \u2014 "),nI=n(by,"A",{href:!0});var SSe=s(nI);jao=r(SSe,"AlbertConfig"),SSe.forEach(t),Dao=r(by," (ALBERT model)"),by.forEach(t),Gao=i(L),kf=n(L,"LI",{});var vy=s(kf);lce=n(vy,"STRONG",{});var RSe=s(lce);Oao=r(RSe,"bart"),RSe.forEach(t),Vao=r(vy," \u2014 "),sI=n(vy,"A",{href:!0});var PSe=s(sI);Xao=r(PSe,"BartConfig"),PSe.forEach(t),zao=r(vy," (BART model)"),vy.forEach(t),Qao=i(L),Sf=n(L,"LI",{});var Fy=s(Sf);ice=n(Fy,"STRONG",{});var BSe=s(ice);Wao=r(BSe,"beit"),BSe.forEach(t),Uao=r(Fy," \u2014 "),lI=n(Fy,"A",{href:!0});var ISe=s(lI);Hao=r(ISe,"BeitConfig"),ISe.forEach(t),Jao=r(Fy," (BEiT model)"),Fy.forEach(t),Yao=i(L),Rf=n(L,"LI",{});var Ty=s(Rf);dce=n(Ty,"STRONG",{});var NSe=s(dce);Kao=r(NSe,"bert"),NSe.forEach(t),Zao=r(Ty," \u2014 "),iI=n(Ty,"A",{href:!0});var qSe=s(iI);eno=r(qSe,"BertConfig"),qSe.forEach(t),ono=r(Ty," (BERT model)"),Ty.forEach(t),rno=i(L),Pf=n(L,"LI",{});var My=s(Pf);cce=n(My,"STRONG",{});var jSe=s(cce);tno=r(jSe,"bert-generation"),jSe.forEach(t),ano=r(My," \u2014 "),dI=n(My,"A",{href:!0});var DSe=s(dI);nno=r(DSe,"BertGenerationConfig"),DSe.forEach(t),sno=r(My," (Bert Generation model)"),My.forEach(t),lno=i(L),Bf=n(L,"LI",{});var Ey=s(Bf);mce=n(Ey,"STRONG",{});var GSe=s(mce);ino=r(GSe,"big_bird"),GSe.forEach(t),dno=r(Ey," \u2014 "),cI=n(Ey,"A",{href:!0});var OSe=s(cI);cno=r(OSe,"BigBirdConfig"),OSe.forEach(t),mno=r(Ey," (BigBird model)"),Ey.forEach(t),fno=i(L),If=n(L,"LI",{});var Cy=s(If);fce=n(Cy,"STRONG",{});var VSe=s(fce);gno=r(VSe,"bigbird_pegasus"),VSe.forEach(t),hno=r(Cy," \u2014 "),mI=n(Cy,"A",{href:!0});var XSe=s(mI);uno=r(XSe,"BigBirdPegasusConfig"),XSe.forEach(t),pno=r(Cy," (BigBird-Pegasus model)"),Cy.forEach(t),_no=i(L),Nf=n(L,"LI",{});var wy=s(Nf);gce=n(wy,"STRONG",{});var zSe=s(gce);bno=r(zSe,"blenderbot"),zSe.forEach(t),vno=r(wy," \u2014 "),fI=n(wy,"A",{href:!0});var QSe=s(fI);Fno=r(QSe,"BlenderbotConfig"),QSe.forEach(t),Tno=r(wy," (Blenderbot model)"),wy.forEach(t),Mno=i(L),qf=n(L,"LI",{});var Ay=s(qf);hce=n(Ay,"STRONG",{});var WSe=s(hce);Eno=r(WSe,"blenderbot-small"),WSe.forEach(t),Cno=r(Ay," \u2014 "),gI=n(Ay,"A",{href:!0});var USe=s(gI);wno=r(USe,"BlenderbotSmallConfig"),USe.forEach(t),Ano=r(Ay," (BlenderbotSmall model)"),Ay.forEach(t),Lno=i(L),jf=n(L,"LI",{});var Ly=s(jf);uce=n(Ly,"STRONG",{});var HSe=s(uce);yno=r(HSe,"bloom"),HSe.forEach(t),xno=r(Ly," \u2014 "),hI=n(Ly,"A",{href:!0});var JSe=s(hI);$no=r(JSe,"BloomConfig"),JSe.forEach(t),kno=r(Ly," (BLOOM model)"),Ly.forEach(t),Sno=i(L),Df=n(L,"LI",{});var yy=s(Df);pce=n(yy,"STRONG",{});var YSe=s(pce);Rno=r(YSe,"camembert"),YSe.forEach(t),Pno=r(yy," \u2014 "),uI=n(yy,"A",{href:!0});var KSe=s(uI);Bno=r(KSe,"CamembertConfig"),KSe.forEach(t),Ino=r(yy," (CamemBERT model)"),yy.forEach(t),Nno=i(L),Gf=n(L,"LI",{});var xy=s(Gf);_ce=n(xy,"STRONG",{});var ZSe=s(_ce);qno=r(ZSe,"canine"),ZSe.forEach(t),jno=r(xy," \u2014 "),pI=n(xy,"A",{href:!0});var eRe=s(pI);Dno=r(eRe,"CanineConfig"),eRe.forEach(t),Gno=r(xy," (CANINE model)"),xy.forEach(t),Ono=i(L),Of=n(L,"LI",{});var $y=s(Of);bce=n($y,"STRONG",{});var oRe=s(bce);Vno=r(oRe,"clip"),oRe.forEach(t),Xno=r($y," \u2014 "),_I=n($y,"A",{href:!0});var rRe=s(_I);zno=r(rRe,"CLIPConfig"),rRe.forEach(t),Qno=r($y," (CLIP model)"),$y.forEach(t),Wno=i(L),Vf=n(L,"LI",{});var ky=s(Vf);vce=n(ky,"STRONG",{});var tRe=s(vce);Uno=r(tRe,"codegen"),tRe.forEach(t),Hno=r(ky," \u2014 "),bI=n(ky,"A",{href:!0});var aRe=s(bI);Jno=r(aRe,"CodeGenConfig"),aRe.forEach(t),Yno=r(ky," (CodeGen model)"),ky.forEach(t),Kno=i(L),Xf=n(L,"LI",{});var Sy=s(Xf);Fce=n(Sy,"STRONG",{});var nRe=s(Fce);Zno=r(nRe,"conditional_detr"),nRe.forEach(t),eso=r(Sy," \u2014 "),vI=n(Sy,"A",{href:!0});var sRe=s(vI);oso=r(sRe,"ConditionalDetrConfig"),sRe.forEach(t),rso=r(Sy," (Conditional DETR model)"),Sy.forEach(t),tso=i(L),zf=n(L,"LI",{});var Ry=s(zf);Tce=n(Ry,"STRONG",{});var lRe=s(Tce);aso=r(lRe,"convbert"),lRe.forEach(t),nso=r(Ry," \u2014 "),FI=n(Ry,"A",{href:!0});var iRe=s(FI);sso=r(iRe,"ConvBertConfig"),iRe.forEach(t),lso=r(Ry," (ConvBERT model)"),Ry.forEach(t),iso=i(L),Qf=n(L,"LI",{});var Py=s(Qf);Mce=n(Py,"STRONG",{});var dRe=s(Mce);dso=r(dRe,"convnext"),dRe.forEach(t),cso=r(Py," \u2014 "),TI=n(Py,"A",{href:!0});var cRe=s(TI);mso=r(cRe,"ConvNextConfig"),cRe.forEach(t),fso=r(Py," (ConvNeXT model)"),Py.forEach(t),gso=i(L),Wf=n(L,"LI",{});var By=s(Wf);Ece=n(By,"STRONG",{});var mRe=s(Ece);hso=r(mRe,"ctrl"),mRe.forEach(t),uso=r(By," \u2014 "),MI=n(By,"A",{href:!0});var fRe=s(MI);pso=r(fRe,"CTRLConfig"),fRe.forEach(t),_so=r(By," (CTRL model)"),By.forEach(t),bso=i(L),Uf=n(L,"LI",{});var Iy=s(Uf);Cce=n(Iy,"STRONG",{});var gRe=s(Cce);vso=r(gRe,"cvt"),gRe.forEach(t),Fso=r(Iy," \u2014 "),EI=n(Iy,"A",{href:!0});var hRe=s(EI);Tso=r(hRe,"CvtConfig"),hRe.forEach(t),Mso=r(Iy," (CvT model)"),Iy.forEach(t),Eso=i(L),Hf=n(L,"LI",{});var Ny=s(Hf);wce=n(Ny,"STRONG",{});var uRe=s(wce);Cso=r(uRe,"data2vec-audio"),uRe.forEach(t),wso=r(Ny," \u2014 "),CI=n(Ny,"A",{href:!0});var pRe=s(CI);Aso=r(pRe,"Data2VecAudioConfig"),pRe.forEach(t),Lso=r(Ny," (Data2VecAudio model)"),Ny.forEach(t),yso=i(L),Jf=n(L,"LI",{});var qy=s(Jf);Ace=n(qy,"STRONG",{});var _Re=s(Ace);xso=r(_Re,"data2vec-text"),_Re.forEach(t),$so=r(qy," \u2014 "),wI=n(qy,"A",{href:!0});var bRe=s(wI);kso=r(bRe,"Data2VecTextConfig"),bRe.forEach(t),Sso=r(qy," (Data2VecText model)"),qy.forEach(t),Rso=i(L),Yf=n(L,"LI",{});var jy=s(Yf);Lce=n(jy,"STRONG",{});var vRe=s(Lce);Pso=r(vRe,"data2vec-vision"),vRe.forEach(t),Bso=r(jy," \u2014 "),AI=n(jy,"A",{href:!0});var FRe=s(AI);Iso=r(FRe,"Data2VecVisionConfig"),FRe.forEach(t),Nso=r(jy," (Data2VecVision model)"),jy.forEach(t),qso=i(L),Kf=n(L,"LI",{});var Dy=s(Kf);yce=n(Dy,"STRONG",{});var TRe=s(yce);jso=r(TRe,"deberta"),TRe.forEach(t),Dso=r(Dy," \u2014 "),LI=n(Dy,"A",{href:!0});var MRe=s(LI);Gso=r(MRe,"DebertaConfig"),MRe.forEach(t),Oso=r(Dy," (DeBERTa model)"),Dy.forEach(t),Vso=i(L),Zf=n(L,"LI",{});var Gy=s(Zf);xce=n(Gy,"STRONG",{});var ERe=s(xce);Xso=r(ERe,"deberta-v2"),ERe.forEach(t),zso=r(Gy," \u2014 "),yI=n(Gy,"A",{href:!0});var CRe=s(yI);Qso=r(CRe,"DebertaV2Config"),CRe.forEach(t),Wso=r(Gy," (DeBERTa-v2 model)"),Gy.forEach(t),Uso=i(L),eg=n(L,"LI",{});var Oy=s(eg);$ce=n(Oy,"STRONG",{});var wRe=s($ce);Hso=r(wRe,"decision_transformer"),wRe.forEach(t),Jso=r(Oy," \u2014 "),xI=n(Oy,"A",{href:!0});var ARe=s(xI);Yso=r(ARe,"DecisionTransformerConfig"),ARe.forEach(t),Kso=r(Oy," (Decision Transformer model)"),Oy.forEach(t),Zso=i(L),og=n(L,"LI",{});var Vy=s(og);kce=n(Vy,"STRONG",{});var LRe=s(kce);elo=r(LRe,"deformable_detr"),LRe.forEach(t),olo=r(Vy," \u2014 "),$I=n(Vy,"A",{href:!0});var yRe=s($I);rlo=r(yRe,"DeformableDetrConfig"),yRe.forEach(t),tlo=r(Vy," (Deformable DETR model)"),Vy.forEach(t),alo=i(L),rg=n(L,"LI",{});var xRe=s(rg);Sce=n(xRe,"STRONG",{});var hMt=s(Sce);nlo=r(hMt,"deit"),hMt.forEach(t),slo=r(xRe," \u2014 "),kI=n(xRe,"A",{href:!0});var uMt=s(kI);llo=r(uMt,"DeiTConfig"),uMt.forEach(t),ilo=r(xRe," (DeiT model)"),xRe.forEach(t),dlo=i(L),tg=n(L,"LI",{});var $Re=s(tg);Rce=n($Re,"STRONG",{});var pMt=s(Rce);clo=r(pMt,"detr"),pMt.forEach(t),mlo=r($Re," \u2014 "),SI=n($Re,"A",{href:!0});var _Mt=s(SI);flo=r(_Mt,"DetrConfig"),_Mt.forEach(t),glo=r($Re," (DETR model)"),$Re.forEach(t),hlo=i(L),ag=n(L,"LI",{});var kRe=s(ag);Pce=n(kRe,"STRONG",{});var bMt=s(Pce);ulo=r(bMt,"distilbert"),bMt.forEach(t),plo=r(kRe," \u2014 "),RI=n(kRe,"A",{href:!0});var vMt=s(RI);_lo=r(vMt,"DistilBertConfig"),vMt.forEach(t),blo=r(kRe," (DistilBERT model)"),kRe.forEach(t),vlo=i(L),ng=n(L,"LI",{});var SRe=s(ng);Bce=n(SRe,"STRONG",{});var FMt=s(Bce);Flo=r(FMt,"donut-swin"),FMt.forEach(t),Tlo=r(SRe," \u2014 "),PI=n(SRe,"A",{href:!0});var TMt=s(PI);Mlo=r(TMt,"DonutSwinConfig"),TMt.forEach(t),Elo=r(SRe," (DonutSwin model)"),SRe.forEach(t),Clo=i(L),sg=n(L,"LI",{});var RRe=s(sg);Ice=n(RRe,"STRONG",{});var MMt=s(Ice);wlo=r(MMt,"dpr"),MMt.forEach(t),Alo=r(RRe," \u2014 "),BI=n(RRe,"A",{href:!0});var EMt=s(BI);Llo=r(EMt,"DPRConfig"),EMt.forEach(t),ylo=r(RRe," (DPR model)"),RRe.forEach(t),xlo=i(L),lg=n(L,"LI",{});var PRe=s(lg);Nce=n(PRe,"STRONG",{});var CMt=s(Nce);$lo=r(CMt,"dpt"),CMt.forEach(t),klo=r(PRe," \u2014 "),II=n(PRe,"A",{href:!0});var wMt=s(II);Slo=r(wMt,"DPTConfig"),wMt.forEach(t),Rlo=r(PRe," (DPT model)"),PRe.forEach(t),Plo=i(L),ig=n(L,"LI",{});var BRe=s(ig);qce=n(BRe,"STRONG",{});var AMt=s(qce);Blo=r(AMt,"electra"),AMt.forEach(t),Ilo=r(BRe," \u2014 "),NI=n(BRe,"A",{href:!0});var LMt=s(NI);Nlo=r(LMt,"ElectraConfig"),LMt.forEach(t),qlo=r(BRe," (ELECTRA model)"),BRe.forEach(t),jlo=i(L),dg=n(L,"LI",{});var IRe=s(dg);jce=n(IRe,"STRONG",{});var yMt=s(jce);Dlo=r(yMt,"encoder-decoder"),yMt.forEach(t),Glo=r(IRe," \u2014 "),qI=n(IRe,"A",{href:!0});var xMt=s(qI);Olo=r(xMt,"EncoderDecoderConfig"),xMt.forEach(t),Vlo=r(IRe," (Encoder decoder model)"),IRe.forEach(t),Xlo=i(L),cg=n(L,"LI",{});var NRe=s(cg);Dce=n(NRe,"STRONG",{});var $Mt=s(Dce);zlo=r($Mt,"ernie"),$Mt.forEach(t),Qlo=r(NRe," \u2014 "),jI=n(NRe,"A",{href:!0});var kMt=s(jI);Wlo=r(kMt,"ErnieConfig"),kMt.forEach(t),Ulo=r(NRe," (ERNIE model)"),NRe.forEach(t),Hlo=i(L),mg=n(L,"LI",{});var qRe=s(mg);Gce=n(qRe,"STRONG",{});var SMt=s(Gce);Jlo=r(SMt,"esm"),SMt.forEach(t),Ylo=r(qRe," \u2014 "),DI=n(qRe,"A",{href:!0});var RMt=s(DI);Klo=r(RMt,"EsmConfig"),RMt.forEach(t),Zlo=r(qRe," (ESM model)"),qRe.forEach(t),eio=i(L),fg=n(L,"LI",{});var jRe=s(fg);Oce=n(jRe,"STRONG",{});var PMt=s(Oce);oio=r(PMt,"flaubert"),PMt.forEach(t),rio=r(jRe," \u2014 "),GI=n(jRe,"A",{href:!0});var BMt=s(GI);tio=r(BMt,"FlaubertConfig"),BMt.forEach(t),aio=r(jRe," (FlauBERT model)"),jRe.forEach(t),nio=i(L),gg=n(L,"LI",{});var DRe=s(gg);Vce=n(DRe,"STRONG",{});var IMt=s(Vce);sio=r(IMt,"flava"),IMt.forEach(t),lio=r(DRe," \u2014 "),OI=n(DRe,"A",{href:!0});var NMt=s(OI);iio=r(NMt,"FlavaConfig"),NMt.forEach(t),dio=r(DRe," (FLAVA model)"),DRe.forEach(t),cio=i(L),hg=n(L,"LI",{});var GRe=s(hg);Xce=n(GRe,"STRONG",{});var qMt=s(Xce);mio=r(qMt,"fnet"),qMt.forEach(t),fio=r(GRe," \u2014 "),VI=n(GRe,"A",{href:!0});var jMt=s(VI);gio=r(jMt,"FNetConfig"),jMt.forEach(t),hio=r(GRe," (FNet model)"),GRe.forEach(t),uio=i(L),ug=n(L,"LI",{});var ORe=s(ug);zce=n(ORe,"STRONG",{});var DMt=s(zce);pio=r(DMt,"fsmt"),DMt.forEach(t),_io=r(ORe," \u2014 "),XI=n(ORe,"A",{href:!0});var GMt=s(XI);bio=r(GMt,"FSMTConfig"),GMt.forEach(t),vio=r(ORe," (FairSeq Machine-Translation model)"),ORe.forEach(t),Fio=i(L),pg=n(L,"LI",{});var VRe=s(pg);Qce=n(VRe,"STRONG",{});var OMt=s(Qce);Tio=r(OMt,"funnel"),OMt.forEach(t),Mio=r(VRe," \u2014 "),zI=n(VRe,"A",{href:!0});var VMt=s(zI);Eio=r(VMt,"FunnelConfig"),VMt.forEach(t),Cio=r(VRe," (Funnel Transformer model)"),VRe.forEach(t),wio=i(L),_g=n(L,"LI",{});var XRe=s(_g);Wce=n(XRe,"STRONG",{});var XMt=s(Wce);Aio=r(XMt,"glpn"),XMt.forEach(t),Lio=r(XRe," \u2014 "),QI=n(XRe,"A",{href:!0});var zMt=s(QI);yio=r(zMt,"GLPNConfig"),zMt.forEach(t),xio=r(XRe," (GLPN model)"),XRe.forEach(t),$io=i(L),bg=n(L,"LI",{});var zRe=s(bg);Uce=n(zRe,"STRONG",{});var QMt=s(Uce);kio=r(QMt,"gpt2"),QMt.forEach(t),Sio=r(zRe," \u2014 "),WI=n(zRe,"A",{href:!0});var WMt=s(WI);Rio=r(WMt,"GPT2Config"),WMt.forEach(t),Pio=r(zRe," (OpenAI GPT-2 model)"),zRe.forEach(t),Bio=i(L),vg=n(L,"LI",{});var QRe=s(vg);Hce=n(QRe,"STRONG",{});var UMt=s(Hce);Iio=r(UMt,"gpt_neo"),UMt.forEach(t),Nio=r(QRe," \u2014 "),UI=n(QRe,"A",{href:!0});var HMt=s(UI);qio=r(HMt,"GPTNeoConfig"),HMt.forEach(t),jio=r(QRe," (GPT Neo model)"),QRe.forEach(t),Dio=i(L),Fg=n(L,"LI",{});var WRe=s(Fg);Jce=n(WRe,"STRONG",{});var JMt=s(Jce);Gio=r(JMt,"gpt_neox"),JMt.forEach(t),Oio=r(WRe," \u2014 "),HI=n(WRe,"A",{href:!0});var YMt=s(HI);Vio=r(YMt,"GPTNeoXConfig"),YMt.forEach(t),Xio=r(WRe," (GPT NeoX model)"),WRe.forEach(t),zio=i(L),Tg=n(L,"LI",{});var URe=s(Tg);Yce=n(URe,"STRONG",{});var KMt=s(Yce);Qio=r(KMt,"gpt_neox_japanese"),KMt.forEach(t),Wio=r(URe," \u2014 "),JI=n(URe,"A",{href:!0});var ZMt=s(JI);Uio=r(ZMt,"GPTNeoXJapaneseConfig"),ZMt.forEach(t),Hio=r(URe," (GPT NeoX Japanese model)"),URe.forEach(t),Jio=i(L),Mg=n(L,"LI",{});var HRe=s(Mg);Kce=n(HRe,"STRONG",{});var eEt=s(Kce);Yio=r(eEt,"gptj"),eEt.forEach(t),Kio=r(HRe," \u2014 "),YI=n(HRe,"A",{href:!0});var oEt=s(YI);Zio=r(oEt,"GPTJConfig"),oEt.forEach(t),edo=r(HRe," (GPT-J model)"),HRe.forEach(t),odo=i(L),Eg=n(L,"LI",{});var JRe=s(Eg);Zce=n(JRe,"STRONG",{});var rEt=s(Zce);rdo=r(rEt,"groupvit"),rEt.forEach(t),tdo=r(JRe," \u2014 "),KI=n(JRe,"A",{href:!0});var tEt=s(KI);ado=r(tEt,"GroupViTConfig"),tEt.forEach(t),ndo=r(JRe," (GroupViT model)"),JRe.forEach(t),sdo=i(L),Cg=n(L,"LI",{});var YRe=s(Cg);eme=n(YRe,"STRONG",{});var aEt=s(eme);ldo=r(aEt,"hubert"),aEt.forEach(t),ido=r(YRe," \u2014 "),ZI=n(YRe,"A",{href:!0});var nEt=s(ZI);ddo=r(nEt,"HubertConfig"),nEt.forEach(t),cdo=r(YRe," (Hubert model)"),YRe.forEach(t),mdo=i(L),wg=n(L,"LI",{});var KRe=s(wg);ome=n(KRe,"STRONG",{});var sEt=s(ome);fdo=r(sEt,"ibert"),sEt.forEach(t),gdo=r(KRe," \u2014 "),eN=n(KRe,"A",{href:!0});var lEt=s(eN);hdo=r(lEt,"IBertConfig"),lEt.forEach(t),udo=r(KRe," (I-BERT model)"),KRe.forEach(t),pdo=i(L),Ag=n(L,"LI",{});var ZRe=s(Ag);rme=n(ZRe,"STRONG",{});var iEt=s(rme);_do=r(iEt,"imagegpt"),iEt.forEach(t),bdo=r(ZRe," \u2014 "),oN=n(ZRe,"A",{href:!0});var dEt=s(oN);vdo=r(dEt,"ImageGPTConfig"),dEt.forEach(t),Fdo=r(ZRe," (ImageGPT model)"),ZRe.forEach(t),Tdo=i(L),Lg=n(L,"LI",{});var ePe=s(Lg);tme=n(ePe,"STRONG",{});var cEt=s(tme);Mdo=r(cEt,"layoutlm"),cEt.forEach(t),Edo=r(ePe," \u2014 "),rN=n(ePe,"A",{href:!0});var mEt=s(rN);Cdo=r(mEt,"LayoutLMConfig"),mEt.forEach(t),wdo=r(ePe," (LayoutLM model)"),ePe.forEach(t),Ado=i(L),yg=n(L,"LI",{});var oPe=s(yg);ame=n(oPe,"STRONG",{});var fEt=s(ame);Ldo=r(fEt,"layoutlmv2"),fEt.forEach(t),ydo=r(oPe," \u2014 "),tN=n(oPe,"A",{href:!0});var gEt=s(tN);xdo=r(gEt,"LayoutLMv2Config"),gEt.forEach(t),$do=r(oPe," (LayoutLMv2 model)"),oPe.forEach(t),kdo=i(L),xg=n(L,"LI",{});var rPe=s(xg);nme=n(rPe,"STRONG",{});var hEt=s(nme);Sdo=r(hEt,"layoutlmv3"),hEt.forEach(t),Rdo=r(rPe," \u2014 "),aN=n(rPe,"A",{href:!0});var uEt=s(aN);Pdo=r(uEt,"LayoutLMv3Config"),uEt.forEach(t),Bdo=r(rPe," (LayoutLMv3 model)"),rPe.forEach(t),Ido=i(L),$g=n(L,"LI",{});var tPe=s($g);sme=n(tPe,"STRONG",{});var pEt=s(sme);Ndo=r(pEt,"led"),pEt.forEach(t),qdo=r(tPe," \u2014 "),nN=n(tPe,"A",{href:!0});var _Et=s(nN);jdo=r(_Et,"LEDConfig"),_Et.forEach(t),Ddo=r(tPe," (LED model)"),tPe.forEach(t),Gdo=i(L),kg=n(L,"LI",{});var aPe=s(kg);lme=n(aPe,"STRONG",{});var bEt=s(lme);Odo=r(bEt,"levit"),bEt.forEach(t),Vdo=r(aPe," \u2014 "),sN=n(aPe,"A",{href:!0});var vEt=s(sN);Xdo=r(vEt,"LevitConfig"),vEt.forEach(t),zdo=r(aPe," (LeViT model)"),aPe.forEach(t),Qdo=i(L),Sg=n(L,"LI",{});var nPe=s(Sg);ime=n(nPe,"STRONG",{});var FEt=s(ime);Wdo=r(FEt,"longformer"),FEt.forEach(t),Udo=r(nPe," \u2014 "),lN=n(nPe,"A",{href:!0});var TEt=s(lN);Hdo=r(TEt,"LongformerConfig"),TEt.forEach(t),Jdo=r(nPe," (Longformer model)"),nPe.forEach(t),Ydo=i(L),Rg=n(L,"LI",{});var sPe=s(Rg);dme=n(sPe,"STRONG",{});var MEt=s(dme);Kdo=r(MEt,"longt5"),MEt.forEach(t),Zdo=r(sPe," \u2014 "),iN=n(sPe,"A",{href:!0});var EEt=s(iN);eco=r(EEt,"LongT5Config"),EEt.forEach(t),oco=r(sPe," (LongT5 model)"),sPe.forEach(t),rco=i(L),Pg=n(L,"LI",{});var lPe=s(Pg);cme=n(lPe,"STRONG",{});var CEt=s(cme);tco=r(CEt,"luke"),CEt.forEach(t),aco=r(lPe," \u2014 "),dN=n(lPe,"A",{href:!0});var wEt=s(dN);nco=r(wEt,"LukeConfig"),wEt.forEach(t),sco=r(lPe," (LUKE model)"),lPe.forEach(t),lco=i(L),Bg=n(L,"LI",{});var iPe=s(Bg);mme=n(iPe,"STRONG",{});var AEt=s(mme);ico=r(AEt,"lxmert"),AEt.forEach(t),dco=r(iPe," \u2014 "),cN=n(iPe,"A",{href:!0});var LEt=s(cN);cco=r(LEt,"LxmertConfig"),LEt.forEach(t),mco=r(iPe," (LXMERT model)"),iPe.forEach(t),fco=i(L),Ig=n(L,"LI",{});var dPe=s(Ig);fme=n(dPe,"STRONG",{});var yEt=s(fme);gco=r(yEt,"m2m_100"),yEt.forEach(t),hco=r(dPe," \u2014 "),mN=n(dPe,"A",{href:!0});var xEt=s(mN);uco=r(xEt,"M2M100Config"),xEt.forEach(t),pco=r(dPe," (M2M100 model)"),dPe.forEach(t),_co=i(L),Ng=n(L,"LI",{});var cPe=s(Ng);gme=n(cPe,"STRONG",{});var $Et=s(gme);bco=r($Et,"marian"),$Et.forEach(t),vco=r(cPe," \u2014 "),fN=n(cPe,"A",{href:!0});var kEt=s(fN);Fco=r(kEt,"MarianConfig"),kEt.forEach(t),Tco=r(cPe," (Marian model)"),cPe.forEach(t),Mco=i(L),qg=n(L,"LI",{});var mPe=s(qg);hme=n(mPe,"STRONG",{});var SEt=s(hme);Eco=r(SEt,"markuplm"),SEt.forEach(t),Cco=r(mPe," \u2014 "),gN=n(mPe,"A",{href:!0});var REt=s(gN);wco=r(REt,"MarkupLMConfig"),REt.forEach(t),Aco=r(mPe," (MarkupLM model)"),mPe.forEach(t),Lco=i(L),jg=n(L,"LI",{});var fPe=s(jg);ume=n(fPe,"STRONG",{});var PEt=s(ume);yco=r(PEt,"maskformer"),PEt.forEach(t),xco=r(fPe," \u2014 "),hN=n(fPe,"A",{href:!0});var BEt=s(hN);$co=r(BEt,"MaskFormerConfig"),BEt.forEach(t),kco=r(fPe," (MaskFormer model)"),fPe.forEach(t),Sco=i(L),Dg=n(L,"LI",{});var gPe=s(Dg);pme=n(gPe,"STRONG",{});var IEt=s(pme);Rco=r(IEt,"mbart"),IEt.forEach(t),Pco=r(gPe," \u2014 "),uN=n(gPe,"A",{href:!0});var NEt=s(uN);Bco=r(NEt,"MBartConfig"),NEt.forEach(t),Ico=r(gPe," (mBART model)"),gPe.forEach(t),Nco=i(L),Gg=n(L,"LI",{});var hPe=s(Gg);_me=n(hPe,"STRONG",{});var qEt=s(_me);qco=r(qEt,"mctct"),qEt.forEach(t),jco=r(hPe," \u2014 "),pN=n(hPe,"A",{href:!0});var jEt=s(pN);Dco=r(jEt,"MCTCTConfig"),jEt.forEach(t),Gco=r(hPe," (M-CTC-T model)"),hPe.forEach(t),Oco=i(L),Og=n(L,"LI",{});var uPe=s(Og);bme=n(uPe,"STRONG",{});var DEt=s(bme);Vco=r(DEt,"megatron-bert"),DEt.forEach(t),Xco=r(uPe," \u2014 "),_N=n(uPe,"A",{href:!0});var GEt=s(_N);zco=r(GEt,"MegatronBertConfig"),GEt.forEach(t),Qco=r(uPe," (Megatron-BERT model)"),uPe.forEach(t),Wco=i(L),Vg=n(L,"LI",{});var pPe=s(Vg);vme=n(pPe,"STRONG",{});var OEt=s(vme);Uco=r(OEt,"mobilebert"),OEt.forEach(t),Hco=r(pPe," \u2014 "),bN=n(pPe,"A",{href:!0});var VEt=s(bN);Jco=r(VEt,"MobileBertConfig"),VEt.forEach(t),Yco=r(pPe," (MobileBERT model)"),pPe.forEach(t),Kco=i(L),Xg=n(L,"LI",{});var _Pe=s(Xg);Fme=n(_Pe,"STRONG",{});var XEt=s(Fme);Zco=r(XEt,"mobilevit"),XEt.forEach(t),emo=r(_Pe," \u2014 "),vN=n(_Pe,"A",{href:!0});var zEt=s(vN);omo=r(zEt,"MobileViTConfig"),zEt.forEach(t),rmo=r(_Pe," (MobileViT model)"),_Pe.forEach(t),tmo=i(L),zg=n(L,"LI",{});var bPe=s(zg);Tme=n(bPe,"STRONG",{});var QEt=s(Tme);amo=r(QEt,"mpnet"),QEt.forEach(t),nmo=r(bPe," \u2014 "),FN=n(bPe,"A",{href:!0});var WEt=s(FN);smo=r(WEt,"MPNetConfig"),WEt.forEach(t),lmo=r(bPe," (MPNet model)"),bPe.forEach(t),imo=i(L),Qg=n(L,"LI",{});var vPe=s(Qg);Mme=n(vPe,"STRONG",{});var UEt=s(Mme);dmo=r(UEt,"mt5"),UEt.forEach(t),cmo=r(vPe," \u2014 "),TN=n(vPe,"A",{href:!0});var HEt=s(TN);mmo=r(HEt,"MT5Config"),HEt.forEach(t),fmo=r(vPe," (MT5 model)"),vPe.forEach(t),gmo=i(L),Wg=n(L,"LI",{});var FPe=s(Wg);Eme=n(FPe,"STRONG",{});var JEt=s(Eme);hmo=r(JEt,"mvp"),JEt.forEach(t),umo=r(FPe," \u2014 "),MN=n(FPe,"A",{href:!0});var YEt=s(MN);pmo=r(YEt,"MvpConfig"),YEt.forEach(t),_mo=r(FPe," (MVP model)"),FPe.forEach(t),bmo=i(L),Ug=n(L,"LI",{});var TPe=s(Ug);Cme=n(TPe,"STRONG",{});var KEt=s(Cme);vmo=r(KEt,"nezha"),KEt.forEach(t),Fmo=r(TPe," \u2014 "),EN=n(TPe,"A",{href:!0});var ZEt=s(EN);Tmo=r(ZEt,"NezhaConfig"),ZEt.forEach(t),Mmo=r(TPe," (Nezha model)"),TPe.forEach(t),Emo=i(L),Hg=n(L,"LI",{});var MPe=s(Hg);wme=n(MPe,"STRONG",{});var e4t=s(wme);Cmo=r(e4t,"nystromformer"),e4t.forEach(t),wmo=r(MPe," \u2014 "),CN=n(MPe,"A",{href:!0});var o4t=s(CN);Amo=r(o4t,"NystromformerConfig"),o4t.forEach(t),Lmo=r(MPe," (Nystr\xF6mformer model)"),MPe.forEach(t),ymo=i(L),Jg=n(L,"LI",{});var EPe=s(Jg);Ame=n(EPe,"STRONG",{});var r4t=s(Ame);xmo=r(r4t,"openai-gpt"),r4t.forEach(t),$mo=r(EPe," \u2014 "),wN=n(EPe,"A",{href:!0});var t4t=s(wN);kmo=r(t4t,"OpenAIGPTConfig"),t4t.forEach(t),Smo=r(EPe," (OpenAI GPT model)"),EPe.forEach(t),Rmo=i(L),Yg=n(L,"LI",{});var CPe=s(Yg);Lme=n(CPe,"STRONG",{});var a4t=s(Lme);Pmo=r(a4t,"opt"),a4t.forEach(t),Bmo=r(CPe," \u2014 "),AN=n(CPe,"A",{href:!0});var n4t=s(AN);Imo=r(n4t,"OPTConfig"),n4t.forEach(t),Nmo=r(CPe," (OPT model)"),CPe.forEach(t),qmo=i(L),Kg=n(L,"LI",{});var wPe=s(Kg);yme=n(wPe,"STRONG",{});var s4t=s(yme);jmo=r(s4t,"owlvit"),s4t.forEach(t),Dmo=r(wPe," \u2014 "),LN=n(wPe,"A",{href:!0});var l4t=s(LN);Gmo=r(l4t,"OwlViTConfig"),l4t.forEach(t),Omo=r(wPe," (OWL-ViT model)"),wPe.forEach(t),Vmo=i(L),Zg=n(L,"LI",{});var APe=s(Zg);xme=n(APe,"STRONG",{});var i4t=s(xme);Xmo=r(i4t,"pegasus"),i4t.forEach(t),zmo=r(APe," \u2014 "),yN=n(APe,"A",{href:!0});var d4t=s(yN);Qmo=r(d4t,"PegasusConfig"),d4t.forEach(t),Wmo=r(APe," (Pegasus model)"),APe.forEach(t),Umo=i(L),eh=n(L,"LI",{});var LPe=s(eh);$me=n(LPe,"STRONG",{});var c4t=s($me);Hmo=r(c4t,"pegasus_x"),c4t.forEach(t),Jmo=r(LPe," \u2014 "),xN=n(LPe,"A",{href:!0});var m4t=s(xN);Ymo=r(m4t,"PegasusXConfig"),m4t.forEach(t),Kmo=r(LPe," (PEGASUS-X model)"),LPe.forEach(t),Zmo=i(L),oh=n(L,"LI",{});var yPe=s(oh);kme=n(yPe,"STRONG",{});var f4t=s(kme);efo=r(f4t,"perceiver"),f4t.forEach(t),ofo=r(yPe," \u2014 "),$N=n(yPe,"A",{href:!0});var g4t=s($N);rfo=r(g4t,"PerceiverConfig"),g4t.forEach(t),tfo=r(yPe," (Perceiver model)"),yPe.forEach(t),afo=i(L),rh=n(L,"LI",{});var xPe=s(rh);Sme=n(xPe,"STRONG",{});var h4t=s(Sme);nfo=r(h4t,"plbart"),h4t.forEach(t),sfo=r(xPe," \u2014 "),kN=n(xPe,"A",{href:!0});var u4t=s(kN);lfo=r(u4t,"PLBartConfig"),u4t.forEach(t),ifo=r(xPe," (PLBart model)"),xPe.forEach(t),dfo=i(L),th=n(L,"LI",{});var $Pe=s(th);Rme=n($Pe,"STRONG",{});var p4t=s(Rme);cfo=r(p4t,"poolformer"),p4t.forEach(t),mfo=r($Pe," \u2014 "),SN=n($Pe,"A",{href:!0});var _4t=s(SN);ffo=r(_4t,"PoolFormerConfig"),_4t.forEach(t),gfo=r($Pe," (PoolFormer model)"),$Pe.forEach(t),hfo=i(L),ah=n(L,"LI",{});var kPe=s(ah);Pme=n(kPe,"STRONG",{});var b4t=s(Pme);ufo=r(b4t,"prophetnet"),b4t.forEach(t),pfo=r(kPe," \u2014 "),RN=n(kPe,"A",{href:!0});var v4t=s(RN);_fo=r(v4t,"ProphetNetConfig"),v4t.forEach(t),bfo=r(kPe," (ProphetNet model)"),kPe.forEach(t),vfo=i(L),nh=n(L,"LI",{});var SPe=s(nh);Bme=n(SPe,"STRONG",{});var F4t=s(Bme);Ffo=r(F4t,"qdqbert"),F4t.forEach(t),Tfo=r(SPe," \u2014 "),PN=n(SPe,"A",{href:!0});var T4t=s(PN);Mfo=r(T4t,"QDQBertConfig"),T4t.forEach(t),Efo=r(SPe," (QDQBert model)"),SPe.forEach(t),Cfo=i(L),sh=n(L,"LI",{});var RPe=s(sh);Ime=n(RPe,"STRONG",{});var M4t=s(Ime);wfo=r(M4t,"rag"),M4t.forEach(t),Afo=r(RPe," \u2014 "),BN=n(RPe,"A",{href:!0});var E4t=s(BN);Lfo=r(E4t,"RagConfig"),E4t.forEach(t),yfo=r(RPe," (RAG model)"),RPe.forEach(t),xfo=i(L),lh=n(L,"LI",{});var PPe=s(lh);Nme=n(PPe,"STRONG",{});var C4t=s(Nme);$fo=r(C4t,"realm"),C4t.forEach(t),kfo=r(PPe," \u2014 "),IN=n(PPe,"A",{href:!0});var w4t=s(IN);Sfo=r(w4t,"RealmConfig"),w4t.forEach(t),Rfo=r(PPe," (REALM model)"),PPe.forEach(t),Pfo=i(L),ih=n(L,"LI",{});var BPe=s(ih);qme=n(BPe,"STRONG",{});var A4t=s(qme);Bfo=r(A4t,"reformer"),A4t.forEach(t),Ifo=r(BPe," \u2014 "),NN=n(BPe,"A",{href:!0});var L4t=s(NN);Nfo=r(L4t,"ReformerConfig"),L4t.forEach(t),qfo=r(BPe," (Reformer model)"),BPe.forEach(t),jfo=i(L),dh=n(L,"LI",{});var IPe=s(dh);jme=n(IPe,"STRONG",{});var y4t=s(jme);Dfo=r(y4t,"regnet"),y4t.forEach(t),Gfo=r(IPe," \u2014 "),qN=n(IPe,"A",{href:!0});var x4t=s(qN);Ofo=r(x4t,"RegNetConfig"),x4t.forEach(t),Vfo=r(IPe," (RegNet model)"),IPe.forEach(t),Xfo=i(L),ch=n(L,"LI",{});var NPe=s(ch);Dme=n(NPe,"STRONG",{});var $4t=s(Dme);zfo=r($4t,"rembert"),$4t.forEach(t),Qfo=r(NPe," \u2014 "),jN=n(NPe,"A",{href:!0});var k4t=s(jN);Wfo=r(k4t,"RemBertConfig"),k4t.forEach(t),Ufo=r(NPe," (RemBERT model)"),NPe.forEach(t),Hfo=i(L),mh=n(L,"LI",{});var qPe=s(mh);Gme=n(qPe,"STRONG",{});var S4t=s(Gme);Jfo=r(S4t,"resnet"),S4t.forEach(t),Yfo=r(qPe," \u2014 "),DN=n(qPe,"A",{href:!0});var R4t=s(DN);Kfo=r(R4t,"ResNetConfig"),R4t.forEach(t),Zfo=r(qPe," (ResNet model)"),qPe.forEach(t),ego=i(L),fh=n(L,"LI",{});var jPe=s(fh);Ome=n(jPe,"STRONG",{});var P4t=s(Ome);ogo=r(P4t,"retribert"),P4t.forEach(t),rgo=r(jPe," \u2014 "),GN=n(jPe,"A",{href:!0});var B4t=s(GN);tgo=r(B4t,"RetriBertConfig"),B4t.forEach(t),ago=r(jPe," (RetriBERT model)"),jPe.forEach(t),ngo=i(L),gh=n(L,"LI",{});var DPe=s(gh);Vme=n(DPe,"STRONG",{});var I4t=s(Vme);sgo=r(I4t,"roberta"),I4t.forEach(t),lgo=r(DPe," \u2014 "),ON=n(DPe,"A",{href:!0});var N4t=s(ON);igo=r(N4t,"RobertaConfig"),N4t.forEach(t),dgo=r(DPe," (RoBERTa model)"),DPe.forEach(t),cgo=i(L),hh=n(L,"LI",{});var GPe=s(hh);Xme=n(GPe,"STRONG",{});var q4t=s(Xme);mgo=r(q4t,"roformer"),q4t.forEach(t),fgo=r(GPe," \u2014 "),VN=n(GPe,"A",{href:!0});var j4t=s(VN);ggo=r(j4t,"RoFormerConfig"),j4t.forEach(t),hgo=r(GPe," (RoFormer model)"),GPe.forEach(t),ugo=i(L),uh=n(L,"LI",{});var OPe=s(uh);zme=n(OPe,"STRONG",{});var D4t=s(zme);pgo=r(D4t,"segformer"),D4t.forEach(t),_go=r(OPe," \u2014 "),XN=n(OPe,"A",{href:!0});var G4t=s(XN);bgo=r(G4t,"SegformerConfig"),G4t.forEach(t),vgo=r(OPe," (SegFormer model)"),OPe.forEach(t),Fgo=i(L),ph=n(L,"LI",{});var VPe=s(ph);Qme=n(VPe,"STRONG",{});var O4t=s(Qme);Tgo=r(O4t,"sew"),O4t.forEach(t),Mgo=r(VPe," \u2014 "),zN=n(VPe,"A",{href:!0});var V4t=s(zN);Ego=r(V4t,"SEWConfig"),V4t.forEach(t),Cgo=r(VPe," (SEW model)"),VPe.forEach(t),wgo=i(L),_h=n(L,"LI",{});var XPe=s(_h);Wme=n(XPe,"STRONG",{});var X4t=s(Wme);Ago=r(X4t,"sew-d"),X4t.forEach(t),Lgo=r(XPe," \u2014 "),QN=n(XPe,"A",{href:!0});var z4t=s(QN);ygo=r(z4t,"SEWDConfig"),z4t.forEach(t),xgo=r(XPe," (SEW-D model)"),XPe.forEach(t),$go=i(L),bh=n(L,"LI",{});var zPe=s(bh);Ume=n(zPe,"STRONG",{});var Q4t=s(Ume);kgo=r(Q4t,"speech-encoder-decoder"),Q4t.forEach(t),Sgo=r(zPe," \u2014 "),WN=n(zPe,"A",{href:!0});var W4t=s(WN);Rgo=r(W4t,"SpeechEncoderDecoderConfig"),W4t.forEach(t),Pgo=r(zPe," (Speech Encoder decoder model)"),zPe.forEach(t),Bgo=i(L),vh=n(L,"LI",{});var QPe=s(vh);Hme=n(QPe,"STRONG",{});var U4t=s(Hme);Igo=r(U4t,"speech_to_text"),U4t.forEach(t),Ngo=r(QPe," \u2014 "),UN=n(QPe,"A",{href:!0});var H4t=s(UN);qgo=r(H4t,"Speech2TextConfig"),H4t.forEach(t),jgo=r(QPe," (Speech2Text model)"),QPe.forEach(t),Dgo=i(L),Fh=n(L,"LI",{});var WPe=s(Fh);Jme=n(WPe,"STRONG",{});var J4t=s(Jme);Ggo=r(J4t,"speech_to_text_2"),J4t.forEach(t),Ogo=r(WPe," \u2014 "),HN=n(WPe,"A",{href:!0});var Y4t=s(HN);Vgo=r(Y4t,"Speech2Text2Config"),Y4t.forEach(t),Xgo=r(WPe," (Speech2Text2 model)"),WPe.forEach(t),zgo=i(L),Th=n(L,"LI",{});var UPe=s(Th);Yme=n(UPe,"STRONG",{});var K4t=s(Yme);Qgo=r(K4t,"splinter"),K4t.forEach(t),Wgo=r(UPe," \u2014 "),JN=n(UPe,"A",{href:!0});var Z4t=s(JN);Ugo=r(Z4t,"SplinterConfig"),Z4t.forEach(t),Hgo=r(UPe," (Splinter model)"),UPe.forEach(t),Jgo=i(L),Mh=n(L,"LI",{});var HPe=s(Mh);Kme=n(HPe,"STRONG",{});var eCt=s(Kme);Ygo=r(eCt,"squeezebert"),eCt.forEach(t),Kgo=r(HPe," \u2014 "),YN=n(HPe,"A",{href:!0});var oCt=s(YN);Zgo=r(oCt,"SqueezeBertConfig"),oCt.forEach(t),eho=r(HPe," (SqueezeBERT model)"),HPe.forEach(t),oho=i(L),Eh=n(L,"LI",{});var JPe=s(Eh);Zme=n(JPe,"STRONG",{});var rCt=s(Zme);rho=r(rCt,"swin"),rCt.forEach(t),tho=r(JPe," \u2014 "),KN=n(JPe,"A",{href:!0});var tCt=s(KN);aho=r(tCt,"SwinConfig"),tCt.forEach(t),nho=r(JPe," (Swin Transformer model)"),JPe.forEach(t),sho=i(L),Ch=n(L,"LI",{});var YPe=s(Ch);efe=n(YPe,"STRONG",{});var aCt=s(efe);lho=r(aCt,"swinv2"),aCt.forEach(t),iho=r(YPe," \u2014 "),ZN=n(YPe,"A",{href:!0});var nCt=s(ZN);dho=r(nCt,"Swinv2Config"),nCt.forEach(t),cho=r(YPe," (Swin Transformer V2 model)"),YPe.forEach(t),mho=i(L),wh=n(L,"LI",{});var KPe=s(wh);ofe=n(KPe,"STRONG",{});var sCt=s(ofe);fho=r(sCt,"t5"),sCt.forEach(t),gho=r(KPe," \u2014 "),eq=n(KPe,"A",{href:!0});var lCt=s(eq);hho=r(lCt,"T5Config"),lCt.forEach(t),uho=r(KPe," (T5 model)"),KPe.forEach(t),pho=i(L),Ah=n(L,"LI",{});var ZPe=s(Ah);rfe=n(ZPe,"STRONG",{});var iCt=s(rfe);_ho=r(iCt,"tapas"),iCt.forEach(t),bho=r(ZPe," \u2014 "),oq=n(ZPe,"A",{href:!0});var dCt=s(oq);vho=r(dCt,"TapasConfig"),dCt.forEach(t),Fho=r(ZPe," (TAPAS model)"),ZPe.forEach(t),Tho=i(L),Lh=n(L,"LI",{});var eBe=s(Lh);tfe=n(eBe,"STRONG",{});var cCt=s(tfe);Mho=r(cCt,"trajectory_transformer"),cCt.forEach(t),Eho=r(eBe," \u2014 "),rq=n(eBe,"A",{href:!0});var mCt=s(rq);Cho=r(mCt,"TrajectoryTransformerConfig"),mCt.forEach(t),who=r(eBe," (Trajectory Transformer model)"),eBe.forEach(t),Aho=i(L),yh=n(L,"LI",{});var oBe=s(yh);afe=n(oBe,"STRONG",{});var fCt=s(afe);Lho=r(fCt,"transfo-xl"),fCt.forEach(t),yho=r(oBe," \u2014 "),tq=n(oBe,"A",{href:!0});var gCt=s(tq);xho=r(gCt,"TransfoXLConfig"),gCt.forEach(t),$ho=r(oBe," (Transformer-XL model)"),oBe.forEach(t),kho=i(L),xh=n(L,"LI",{});var rBe=s(xh);nfe=n(rBe,"STRONG",{});var hCt=s(nfe);Sho=r(hCt,"trocr"),hCt.forEach(t),Rho=r(rBe," \u2014 "),aq=n(rBe,"A",{href:!0});var uCt=s(aq);Pho=r(uCt,"TrOCRConfig"),uCt.forEach(t),Bho=r(rBe," (TrOCR model)"),rBe.forEach(t),Iho=i(L),$h=n(L,"LI",{});var tBe=s($h);sfe=n(tBe,"STRONG",{});var pCt=s(sfe);Nho=r(pCt,"unispeech"),pCt.forEach(t),qho=r(tBe," \u2014 "),nq=n(tBe,"A",{href:!0});var _Ct=s(nq);jho=r(_Ct,"UniSpeechConfig"),_Ct.forEach(t),Dho=r(tBe," (UniSpeech model)"),tBe.forEach(t),Gho=i(L),kh=n(L,"LI",{});var aBe=s(kh);lfe=n(aBe,"STRONG",{});var bCt=s(lfe);Oho=r(bCt,"unispeech-sat"),bCt.forEach(t),Vho=r(aBe," \u2014 "),sq=n(aBe,"A",{href:!0});var vCt=s(sq);Xho=r(vCt,"UniSpeechSatConfig"),vCt.forEach(t),zho=r(aBe," (UniSpeechSat model)"),aBe.forEach(t),Qho=i(L),Sh=n(L,"LI",{});var nBe=s(Sh);ife=n(nBe,"STRONG",{});var FCt=s(ife);Who=r(FCt,"van"),FCt.forEach(t),Uho=r(nBe," \u2014 "),lq=n(nBe,"A",{href:!0});var TCt=s(lq);Hho=r(TCt,"VanConfig"),TCt.forEach(t),Jho=r(nBe," (VAN model)"),nBe.forEach(t),Yho=i(L),Rh=n(L,"LI",{});var sBe=s(Rh);dfe=n(sBe,"STRONG",{});var MCt=s(dfe);Kho=r(MCt,"videomae"),MCt.forEach(t),Zho=r(sBe," \u2014 "),iq=n(sBe,"A",{href:!0});var ECt=s(iq);euo=r(ECt,"VideoMAEConfig"),ECt.forEach(t),ouo=r(sBe," (VideoMAE model)"),sBe.forEach(t),ruo=i(L),Ph=n(L,"LI",{});var lBe=s(Ph);cfe=n(lBe,"STRONG",{});var CCt=s(cfe);tuo=r(CCt,"vilt"),CCt.forEach(t),auo=r(lBe," \u2014 "),dq=n(lBe,"A",{href:!0});var wCt=s(dq);nuo=r(wCt,"ViltConfig"),wCt.forEach(t),suo=r(lBe," (ViLT model)"),lBe.forEach(t),luo=i(L),Bh=n(L,"LI",{});var iBe=s(Bh);mfe=n(iBe,"STRONG",{});var ACt=s(mfe);iuo=r(ACt,"vision-encoder-decoder"),ACt.forEach(t),duo=r(iBe," \u2014 "),cq=n(iBe,"A",{href:!0});var LCt=s(cq);cuo=r(LCt,"VisionEncoderDecoderConfig"),LCt.forEach(t),muo=r(iBe," (Vision Encoder decoder model)"),iBe.forEach(t),fuo=i(L),Ih=n(L,"LI",{});var dBe=s(Ih);ffe=n(dBe,"STRONG",{});var yCt=s(ffe);guo=r(yCt,"vision-text-dual-encoder"),yCt.forEach(t),huo=r(dBe," \u2014 "),mq=n(dBe,"A",{href:!0});var xCt=s(mq);uuo=r(xCt,"VisionTextDualEncoderConfig"),xCt.forEach(t),puo=r(dBe," (VisionTextDualEncoder model)"),dBe.forEach(t),_uo=i(L),Nh=n(L,"LI",{});var cBe=s(Nh);gfe=n(cBe,"STRONG",{});var $Ct=s(gfe);buo=r($Ct,"visual_bert"),$Ct.forEach(t),vuo=r(cBe," \u2014 "),fq=n(cBe,"A",{href:!0});var kCt=s(fq);Fuo=r(kCt,"VisualBertConfig"),kCt.forEach(t),Tuo=r(cBe," (VisualBERT model)"),cBe.forEach(t),Muo=i(L),qh=n(L,"LI",{});var mBe=s(qh);hfe=n(mBe,"STRONG",{});var SCt=s(hfe);Euo=r(SCt,"vit"),SCt.forEach(t),Cuo=r(mBe," \u2014 "),gq=n(mBe,"A",{href:!0});var RCt=s(gq);wuo=r(RCt,"ViTConfig"),RCt.forEach(t),Auo=r(mBe," (ViT model)"),mBe.forEach(t),Luo=i(L),jh=n(L,"LI",{});var fBe=s(jh);ufe=n(fBe,"STRONG",{});var PCt=s(ufe);yuo=r(PCt,"vit_mae"),PCt.forEach(t),xuo=r(fBe," \u2014 "),hq=n(fBe,"A",{href:!0});var BCt=s(hq);$uo=r(BCt,"ViTMAEConfig"),BCt.forEach(t),kuo=r(fBe," (ViTMAE model)"),fBe.forEach(t),Suo=i(L),Dh=n(L,"LI",{});var gBe=s(Dh);pfe=n(gBe,"STRONG",{});var ICt=s(pfe);Ruo=r(ICt,"vit_msn"),ICt.forEach(t),Puo=r(gBe," \u2014 "),uq=n(gBe,"A",{href:!0});var NCt=s(uq);Buo=r(NCt,"ViTMSNConfig"),NCt.forEach(t),Iuo=r(gBe," (ViTMSN model)"),gBe.forEach(t),Nuo=i(L),Gh=n(L,"LI",{});var hBe=s(Gh);_fe=n(hBe,"STRONG",{});var qCt=s(_fe);quo=r(qCt,"wav2vec2"),qCt.forEach(t),juo=r(hBe," \u2014 "),pq=n(hBe,"A",{href:!0});var jCt=s(pq);Duo=r(jCt,"Wav2Vec2Config"),jCt.forEach(t),Guo=r(hBe," (Wav2Vec2 model)"),hBe.forEach(t),Ouo=i(L),Oh=n(L,"LI",{});var uBe=s(Oh);bfe=n(uBe,"STRONG",{});var DCt=s(bfe);Vuo=r(DCt,"wav2vec2-conformer"),DCt.forEach(t),Xuo=r(uBe," \u2014 "),_q=n(uBe,"A",{href:!0});var GCt=s(_q);zuo=r(GCt,"Wav2Vec2ConformerConfig"),GCt.forEach(t),Quo=r(uBe," (Wav2Vec2-Conformer model)"),uBe.forEach(t),Wuo=i(L),Vh=n(L,"LI",{});var pBe=s(Vh);vfe=n(pBe,"STRONG",{});var OCt=s(vfe);Uuo=r(OCt,"wavlm"),OCt.forEach(t),Huo=r(pBe," \u2014 "),bq=n(pBe,"A",{href:!0});var VCt=s(bq);Juo=r(VCt,"WavLMConfig"),VCt.forEach(t),Yuo=r(pBe," (WavLM model)"),pBe.forEach(t),Kuo=i(L),Xh=n(L,"LI",{});var _Be=s(Xh);Ffe=n(_Be,"STRONG",{});var XCt=s(Ffe);Zuo=r(XCt,"xclip"),XCt.forEach(t),epo=r(_Be," \u2014 "),vq=n(_Be,"A",{href:!0});var zCt=s(vq);opo=r(zCt,"XCLIPConfig"),zCt.forEach(t),rpo=r(_Be," (X-CLIP model)"),_Be.forEach(t),tpo=i(L),zh=n(L,"LI",{});var bBe=s(zh);Tfe=n(bBe,"STRONG",{});var QCt=s(Tfe);apo=r(QCt,"xglm"),QCt.forEach(t),npo=r(bBe," \u2014 "),Fq=n(bBe,"A",{href:!0});var WCt=s(Fq);spo=r(WCt,"XGLMConfig"),WCt.forEach(t),lpo=r(bBe," (XGLM model)"),bBe.forEach(t),ipo=i(L),Qh=n(L,"LI",{});var vBe=s(Qh);Mfe=n(vBe,"STRONG",{});var UCt=s(Mfe);dpo=r(UCt,"xlm"),UCt.forEach(t),cpo=r(vBe," \u2014 "),Tq=n(vBe,"A",{href:!0});var HCt=s(Tq);mpo=r(HCt,"XLMConfig"),HCt.forEach(t),fpo=r(vBe," (XLM model)"),vBe.forEach(t),gpo=i(L),Wh=n(L,"LI",{});var FBe=s(Wh);Efe=n(FBe,"STRONG",{});var JCt=s(Efe);hpo=r(JCt,"xlm-prophetnet"),JCt.forEach(t),upo=r(FBe," \u2014 "),Mq=n(FBe,"A",{href:!0});var YCt=s(Mq);ppo=r(YCt,"XLMProphetNetConfig"),YCt.forEach(t),_po=r(FBe," (XLM-ProphetNet model)"),FBe.forEach(t),bpo=i(L),Uh=n(L,"LI",{});var TBe=s(Uh);Cfe=n(TBe,"STRONG",{});var KCt=s(Cfe);vpo=r(KCt,"xlm-roberta"),KCt.forEach(t),Fpo=r(TBe," \u2014 "),Eq=n(TBe,"A",{href:!0});var ZCt=s(Eq);Tpo=r(ZCt,"XLMRobertaConfig"),ZCt.forEach(t),Mpo=r(TBe," (XLM-RoBERTa model)"),TBe.forEach(t),Epo=i(L),Hh=n(L,"LI",{});var MBe=s(Hh);wfe=n(MBe,"STRONG",{});var e3t=s(wfe);Cpo=r(e3t,"xlm-roberta-xl"),e3t.forEach(t),wpo=r(MBe," \u2014 "),Cq=n(MBe,"A",{href:!0});var o3t=s(Cq);Apo=r(o3t,"XLMRobertaXLConfig"),o3t.forEach(t),Lpo=r(MBe," (XLM-RoBERTa-XL model)"),MBe.forEach(t),ypo=i(L),Jh=n(L,"LI",{});var EBe=s(Jh);Afe=n(EBe,"STRONG",{});var r3t=s(Afe);xpo=r(r3t,"xlnet"),r3t.forEach(t),$po=r(EBe," \u2014 "),wq=n(EBe,"A",{href:!0});var t3t=s(wq);kpo=r(t3t,"XLNetConfig"),t3t.forEach(t),Spo=r(EBe," (XLNet model)"),EBe.forEach(t),Rpo=i(L),Yh=n(L,"LI",{});var CBe=s(Yh);Lfe=n(CBe,"STRONG",{});var a3t=s(Lfe);Ppo=r(a3t,"yolos"),a3t.forEach(t),Bpo=r(CBe," \u2014 "),Aq=n(CBe,"A",{href:!0});var n3t=s(Aq);Ipo=r(n3t,"YolosConfig"),n3t.forEach(t),Npo=r(CBe," (YOLOS model)"),CBe.forEach(t),qpo=i(L),Kh=n(L,"LI",{});var wBe=s(Kh);yfe=n(wBe,"STRONG",{});var s3t=s(yfe);jpo=r(s3t,"yoso"),s3t.forEach(t),Dpo=r(wBe," \u2014 "),Lq=n(wBe,"A",{href:!0});var l3t=s(Lq);Gpo=r(l3t,"YosoConfig"),l3t.forEach(t),Opo=r(wBe," (YOSO model)"),wBe.forEach(t),L.forEach(t),Vpo=i(ut),T(Zh.$$.fragment,ut),ut.forEach(t),Xpo=i(ht),eu=n(ht,"DIV",{class:!0});var Qoo=s(eu);T(nx.$$.fragment,Qoo),zpo=i(Qoo),xfe=n(Qoo,"P",{});var i3t=s(xfe);Qpo=r(i3t,"Register a new configuration for this class."),i3t.forEach(t),Qoo.forEach(t),ht.forEach(t),jZe=i(m),gd=n(m,"H2",{class:!0});var Woo=s(gd);ou=n(Woo,"A",{id:!0,class:!0,href:!0});var d3t=s(ou);$fe=n(d3t,"SPAN",{});var c3t=s($fe);T(sx.$$.fragment,c3t),c3t.forEach(t),d3t.forEach(t),Wpo=i(Woo),kfe=n(Woo,"SPAN",{});var m3t=s(kfe);Upo=r(m3t,"AutoTokenizer"),m3t.forEach(t),Woo.forEach(t),DZe=i(m),ko=n(m,"DIV",{class:!0});var Ml=s(ko);T(lx.$$.fragment,Ml),Hpo=i(Ml),ix=n(Ml,"P",{});var Uoo=s(ix);Jpo=r(Uoo,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yq=n(Uoo,"A",{href:!0});var f3t=s(yq);Ypo=r(f3t,"AutoTokenizer.from_pretrained()"),f3t.forEach(t),Kpo=r(Uoo," class method."),Uoo.forEach(t),Zpo=i(Ml),dx=n(Ml,"P",{});var Hoo=s(dx);e_o=r(Hoo,"This class cannot be instantiated directly using "),Sfe=n(Hoo,"CODE",{});var g3t=s(Sfe);o_o=r(g3t,"__init__()"),g3t.forEach(t),r_o=r(Hoo," (throws an error)."),Hoo.forEach(t),t_o=i(Ml),Br=n(Ml,"DIV",{class:!0});var El=s(Br);T(cx.$$.fragment,El),a_o=i(El),Rfe=n(El,"P",{});var h3t=s(Rfe);n_o=r(h3t,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),h3t.forEach(t),s_o=i(El),Ua=n(El,"P",{});var Xy=s(Ua);l_o=r(Xy,"The tokenizer class to instantiate is selected based on the "),Pfe=n(Xy,"CODE",{});var u3t=s(Pfe);i_o=r(u3t,"model_type"),u3t.forEach(t),d_o=r(Xy,` property of the config object (either
passed as an argument or loaded from `),Bfe=n(Xy,"CODE",{});var p3t=s(Bfe);c_o=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),m_o=r(Xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=n(Xy,"CODE",{});var _3t=s(Ife);f_o=r(_3t,"pretrained_model_name_or_path"),_3t.forEach(t),g_o=r(Xy,":"),Xy.forEach(t),h_o=i(El),k=n(El,"UL",{});var S=s(k);ns=n(S,"LI",{});var BP=s(ns);Nfe=n(BP,"STRONG",{});var b3t=s(Nfe);u_o=r(b3t,"albert"),b3t.forEach(t),p_o=r(BP," \u2014 "),xq=n(BP,"A",{href:!0});var v3t=s(xq);__o=r(v3t,"AlbertTokenizer"),v3t.forEach(t),b_o=r(BP," or "),$q=n(BP,"A",{href:!0});var F3t=s($q);v_o=r(F3t,"AlbertTokenizerFast"),F3t.forEach(t),F_o=r(BP," (ALBERT model)"),BP.forEach(t),T_o=i(S),ss=n(S,"LI",{});var IP=s(ss);qfe=n(IP,"STRONG",{});var T3t=s(qfe);M_o=r(T3t,"bart"),T3t.forEach(t),E_o=r(IP," \u2014 "),kq=n(IP,"A",{href:!0});var M3t=s(kq);C_o=r(M3t,"BartTokenizer"),M3t.forEach(t),w_o=r(IP," or "),Sq=n(IP,"A",{href:!0});var E3t=s(Sq);A_o=r(E3t,"BartTokenizerFast"),E3t.forEach(t),L_o=r(IP," (BART model)"),IP.forEach(t),y_o=i(S),ls=n(S,"LI",{});var NP=s(ls);jfe=n(NP,"STRONG",{});var C3t=s(jfe);x_o=r(C3t,"barthez"),C3t.forEach(t),$_o=r(NP," \u2014 "),Rq=n(NP,"A",{href:!0});var w3t=s(Rq);k_o=r(w3t,"BarthezTokenizer"),w3t.forEach(t),S_o=r(NP," or "),Pq=n(NP,"A",{href:!0});var A3t=s(Pq);R_o=r(A3t,"BarthezTokenizerFast"),A3t.forEach(t),P_o=r(NP," (BARThez model)"),NP.forEach(t),B_o=i(S),ru=n(S,"LI",{});var ABe=s(ru);Dfe=n(ABe,"STRONG",{});var L3t=s(Dfe);I_o=r(L3t,"bartpho"),L3t.forEach(t),N_o=r(ABe," \u2014 "),Bq=n(ABe,"A",{href:!0});var y3t=s(Bq);q_o=r(y3t,"BartphoTokenizer"),y3t.forEach(t),j_o=r(ABe," (BARTpho model)"),ABe.forEach(t),D_o=i(S),is=n(S,"LI",{});var qP=s(is);Gfe=n(qP,"STRONG",{});var x3t=s(Gfe);G_o=r(x3t,"bert"),x3t.forEach(t),O_o=r(qP," \u2014 "),Iq=n(qP,"A",{href:!0});var $3t=s(Iq);V_o=r($3t,"BertTokenizer"),$3t.forEach(t),X_o=r(qP," or "),Nq=n(qP,"A",{href:!0});var k3t=s(Nq);z_o=r(k3t,"BertTokenizerFast"),k3t.forEach(t),Q_o=r(qP," (BERT model)"),qP.forEach(t),W_o=i(S),tu=n(S,"LI",{});var LBe=s(tu);Ofe=n(LBe,"STRONG",{});var S3t=s(Ofe);U_o=r(S3t,"bert-generation"),S3t.forEach(t),H_o=r(LBe," \u2014 "),qq=n(LBe,"A",{href:!0});var R3t=s(qq);J_o=r(R3t,"BertGenerationTokenizer"),R3t.forEach(t),Y_o=r(LBe," (Bert Generation model)"),LBe.forEach(t),K_o=i(S),au=n(S,"LI",{});var yBe=s(au);Vfe=n(yBe,"STRONG",{});var P3t=s(Vfe);Z_o=r(P3t,"bert-japanese"),P3t.forEach(t),e2o=r(yBe," \u2014 "),jq=n(yBe,"A",{href:!0});var B3t=s(jq);o2o=r(B3t,"BertJapaneseTokenizer"),B3t.forEach(t),r2o=r(yBe," (BertJapanese model)"),yBe.forEach(t),t2o=i(S),nu=n(S,"LI",{});var xBe=s(nu);Xfe=n(xBe,"STRONG",{});var I3t=s(Xfe);a2o=r(I3t,"bertweet"),I3t.forEach(t),n2o=r(xBe," \u2014 "),Dq=n(xBe,"A",{href:!0});var N3t=s(Dq);s2o=r(N3t,"BertweetTokenizer"),N3t.forEach(t),l2o=r(xBe," (BERTweet model)"),xBe.forEach(t),i2o=i(S),ds=n(S,"LI",{});var jP=s(ds);zfe=n(jP,"STRONG",{});var q3t=s(zfe);d2o=r(q3t,"big_bird"),q3t.forEach(t),c2o=r(jP," \u2014 "),Gq=n(jP,"A",{href:!0});var j3t=s(Gq);m2o=r(j3t,"BigBirdTokenizer"),j3t.forEach(t),f2o=r(jP," or "),Oq=n(jP,"A",{href:!0});var D3t=s(Oq);g2o=r(D3t,"BigBirdTokenizerFast"),D3t.forEach(t),h2o=r(jP," (BigBird model)"),jP.forEach(t),u2o=i(S),cs=n(S,"LI",{});var DP=s(cs);Qfe=n(DP,"STRONG",{});var G3t=s(Qfe);p2o=r(G3t,"bigbird_pegasus"),G3t.forEach(t),_2o=r(DP," \u2014 "),Vq=n(DP,"A",{href:!0});var O3t=s(Vq);b2o=r(O3t,"PegasusTokenizer"),O3t.forEach(t),v2o=r(DP," or "),Xq=n(DP,"A",{href:!0});var V3t=s(Xq);F2o=r(V3t,"PegasusTokenizerFast"),V3t.forEach(t),T2o=r(DP," (BigBird-Pegasus model)"),DP.forEach(t),M2o=i(S),ms=n(S,"LI",{});var GP=s(ms);Wfe=n(GP,"STRONG",{});var X3t=s(Wfe);E2o=r(X3t,"blenderbot"),X3t.forEach(t),C2o=r(GP," \u2014 "),zq=n(GP,"A",{href:!0});var z3t=s(zq);w2o=r(z3t,"BlenderbotTokenizer"),z3t.forEach(t),A2o=r(GP," or "),Qq=n(GP,"A",{href:!0});var Q3t=s(Qq);L2o=r(Q3t,"BlenderbotTokenizerFast"),Q3t.forEach(t),y2o=r(GP," (Blenderbot model)"),GP.forEach(t),x2o=i(S),su=n(S,"LI",{});var $Be=s(su);Ufe=n($Be,"STRONG",{});var W3t=s(Ufe);$2o=r(W3t,"blenderbot-small"),W3t.forEach(t),k2o=r($Be," \u2014 "),Wq=n($Be,"A",{href:!0});var U3t=s(Wq);S2o=r(U3t,"BlenderbotSmallTokenizer"),U3t.forEach(t),R2o=r($Be," (BlenderbotSmall model)"),$Be.forEach(t),P2o=i(S),lu=n(S,"LI",{});var kBe=s(lu);Hfe=n(kBe,"STRONG",{});var H3t=s(Hfe);B2o=r(H3t,"bloom"),H3t.forEach(t),I2o=r(kBe," \u2014 "),Uq=n(kBe,"A",{href:!0});var J3t=s(Uq);N2o=r(J3t,"BloomTokenizerFast"),J3t.forEach(t),q2o=r(kBe," (BLOOM model)"),kBe.forEach(t),j2o=i(S),iu=n(S,"LI",{});var SBe=s(iu);Jfe=n(SBe,"STRONG",{});var Y3t=s(Jfe);D2o=r(Y3t,"byt5"),Y3t.forEach(t),G2o=r(SBe," \u2014 "),Hq=n(SBe,"A",{href:!0});var K3t=s(Hq);O2o=r(K3t,"ByT5Tokenizer"),K3t.forEach(t),V2o=r(SBe," (ByT5 model)"),SBe.forEach(t),X2o=i(S),fs=n(S,"LI",{});var OP=s(fs);Yfe=n(OP,"STRONG",{});var Z3t=s(Yfe);z2o=r(Z3t,"camembert"),Z3t.forEach(t),Q2o=r(OP," \u2014 "),Jq=n(OP,"A",{href:!0});var e5t=s(Jq);W2o=r(e5t,"CamembertTokenizer"),e5t.forEach(t),U2o=r(OP," or "),Yq=n(OP,"A",{href:!0});var o5t=s(Yq);H2o=r(o5t,"CamembertTokenizerFast"),o5t.forEach(t),J2o=r(OP," (CamemBERT model)"),OP.forEach(t),Y2o=i(S),du=n(S,"LI",{});var RBe=s(du);Kfe=n(RBe,"STRONG",{});var r5t=s(Kfe);K2o=r(r5t,"canine"),r5t.forEach(t),Z2o=r(RBe," \u2014 "),Kq=n(RBe,"A",{href:!0});var t5t=s(Kq);e1o=r(t5t,"CanineTokenizer"),t5t.forEach(t),o1o=r(RBe," (CANINE model)"),RBe.forEach(t),r1o=i(S),gs=n(S,"LI",{});var VP=s(gs);Zfe=n(VP,"STRONG",{});var a5t=s(Zfe);t1o=r(a5t,"clip"),a5t.forEach(t),a1o=r(VP," \u2014 "),Zq=n(VP,"A",{href:!0});var n5t=s(Zq);n1o=r(n5t,"CLIPTokenizer"),n5t.forEach(t),s1o=r(VP," or "),ej=n(VP,"A",{href:!0});var s5t=s(ej);l1o=r(s5t,"CLIPTokenizerFast"),s5t.forEach(t),i1o=r(VP," (CLIP model)"),VP.forEach(t),d1o=i(S),hs=n(S,"LI",{});var XP=s(hs);ege=n(XP,"STRONG",{});var l5t=s(ege);c1o=r(l5t,"codegen"),l5t.forEach(t),m1o=r(XP," \u2014 "),oj=n(XP,"A",{href:!0});var i5t=s(oj);f1o=r(i5t,"CodeGenTokenizer"),i5t.forEach(t),g1o=r(XP," or "),rj=n(XP,"A",{href:!0});var d5t=s(rj);h1o=r(d5t,"CodeGenTokenizerFast"),d5t.forEach(t),u1o=r(XP," (CodeGen model)"),XP.forEach(t),p1o=i(S),us=n(S,"LI",{});var zP=s(us);oge=n(zP,"STRONG",{});var c5t=s(oge);_1o=r(c5t,"convbert"),c5t.forEach(t),b1o=r(zP," \u2014 "),tj=n(zP,"A",{href:!0});var m5t=s(tj);v1o=r(m5t,"ConvBertTokenizer"),m5t.forEach(t),F1o=r(zP," or "),aj=n(zP,"A",{href:!0});var f5t=s(aj);T1o=r(f5t,"ConvBertTokenizerFast"),f5t.forEach(t),M1o=r(zP," (ConvBERT model)"),zP.forEach(t),E1o=i(S),ps=n(S,"LI",{});var QP=s(ps);rge=n(QP,"STRONG",{});var g5t=s(rge);C1o=r(g5t,"cpm"),g5t.forEach(t),w1o=r(QP," \u2014 "),nj=n(QP,"A",{href:!0});var h5t=s(nj);A1o=r(h5t,"CpmTokenizer"),h5t.forEach(t),L1o=r(QP," or "),sj=n(QP,"A",{href:!0});var u5t=s(sj);y1o=r(u5t,"CpmTokenizerFast"),u5t.forEach(t),x1o=r(QP," (CPM model)"),QP.forEach(t),$1o=i(S),cu=n(S,"LI",{});var PBe=s(cu);tge=n(PBe,"STRONG",{});var p5t=s(tge);k1o=r(p5t,"ctrl"),p5t.forEach(t),S1o=r(PBe," \u2014 "),lj=n(PBe,"A",{href:!0});var _5t=s(lj);R1o=r(_5t,"CTRLTokenizer"),_5t.forEach(t),P1o=r(PBe," (CTRL model)"),PBe.forEach(t),B1o=i(S),_s=n(S,"LI",{});var WP=s(_s);age=n(WP,"STRONG",{});var b5t=s(age);I1o=r(b5t,"data2vec-text"),b5t.forEach(t),N1o=r(WP," \u2014 "),ij=n(WP,"A",{href:!0});var v5t=s(ij);q1o=r(v5t,"RobertaTokenizer"),v5t.forEach(t),j1o=r(WP," or "),dj=n(WP,"A",{href:!0});var F5t=s(dj);D1o=r(F5t,"RobertaTokenizerFast"),F5t.forEach(t),G1o=r(WP," (Data2VecText model)"),WP.forEach(t),O1o=i(S),bs=n(S,"LI",{});var UP=s(bs);nge=n(UP,"STRONG",{});var T5t=s(nge);V1o=r(T5t,"deberta"),T5t.forEach(t),X1o=r(UP," \u2014 "),cj=n(UP,"A",{href:!0});var M5t=s(cj);z1o=r(M5t,"DebertaTokenizer"),M5t.forEach(t),Q1o=r(UP," or "),mj=n(UP,"A",{href:!0});var E5t=s(mj);W1o=r(E5t,"DebertaTokenizerFast"),E5t.forEach(t),U1o=r(UP," (DeBERTa model)"),UP.forEach(t),H1o=i(S),vs=n(S,"LI",{});var HP=s(vs);sge=n(HP,"STRONG",{});var C5t=s(sge);J1o=r(C5t,"deberta-v2"),C5t.forEach(t),Y1o=r(HP," \u2014 "),fj=n(HP,"A",{href:!0});var w5t=s(fj);K1o=r(w5t,"DebertaV2Tokenizer"),w5t.forEach(t),Z1o=r(HP," or "),gj=n(HP,"A",{href:!0});var A5t=s(gj);ebo=r(A5t,"DebertaV2TokenizerFast"),A5t.forEach(t),obo=r(HP," (DeBERTa-v2 model)"),HP.forEach(t),rbo=i(S),Fs=n(S,"LI",{});var JP=s(Fs);lge=n(JP,"STRONG",{});var L5t=s(lge);tbo=r(L5t,"distilbert"),L5t.forEach(t),abo=r(JP," \u2014 "),hj=n(JP,"A",{href:!0});var y5t=s(hj);nbo=r(y5t,"DistilBertTokenizer"),y5t.forEach(t),sbo=r(JP," or "),uj=n(JP,"A",{href:!0});var x5t=s(uj);lbo=r(x5t,"DistilBertTokenizerFast"),x5t.forEach(t),ibo=r(JP," (DistilBERT model)"),JP.forEach(t),dbo=i(S),Ts=n(S,"LI",{});var YP=s(Ts);ige=n(YP,"STRONG",{});var $5t=s(ige);cbo=r($5t,"dpr"),$5t.forEach(t),mbo=r(YP," \u2014 "),pj=n(YP,"A",{href:!0});var k5t=s(pj);fbo=r(k5t,"DPRQuestionEncoderTokenizer"),k5t.forEach(t),gbo=r(YP," or "),_j=n(YP,"A",{href:!0});var S5t=s(_j);hbo=r(S5t,"DPRQuestionEncoderTokenizerFast"),S5t.forEach(t),ubo=r(YP," (DPR model)"),YP.forEach(t),pbo=i(S),Ms=n(S,"LI",{});var KP=s(Ms);dge=n(KP,"STRONG",{});var R5t=s(dge);_bo=r(R5t,"electra"),R5t.forEach(t),bbo=r(KP," \u2014 "),bj=n(KP,"A",{href:!0});var P5t=s(bj);vbo=r(P5t,"ElectraTokenizer"),P5t.forEach(t),Fbo=r(KP," or "),vj=n(KP,"A",{href:!0});var B5t=s(vj);Tbo=r(B5t,"ElectraTokenizerFast"),B5t.forEach(t),Mbo=r(KP," (ELECTRA model)"),KP.forEach(t),Ebo=i(S),Es=n(S,"LI",{});var ZP=s(Es);cge=n(ZP,"STRONG",{});var I5t=s(cge);Cbo=r(I5t,"ernie"),I5t.forEach(t),wbo=r(ZP," \u2014 "),Fj=n(ZP,"A",{href:!0});var N5t=s(Fj);Abo=r(N5t,"BertTokenizer"),N5t.forEach(t),Lbo=r(ZP," or "),Tj=n(ZP,"A",{href:!0});var q5t=s(Tj);ybo=r(q5t,"BertTokenizerFast"),q5t.forEach(t),xbo=r(ZP," (ERNIE model)"),ZP.forEach(t),$bo=i(S),mu=n(S,"LI",{});var BBe=s(mu);mge=n(BBe,"STRONG",{});var j5t=s(mge);kbo=r(j5t,"flaubert"),j5t.forEach(t),Sbo=r(BBe," \u2014 "),Mj=n(BBe,"A",{href:!0});var D5t=s(Mj);Rbo=r(D5t,"FlaubertTokenizer"),D5t.forEach(t),Pbo=r(BBe," (FlauBERT model)"),BBe.forEach(t),Bbo=i(S),Cs=n(S,"LI",{});var eB=s(Cs);fge=n(eB,"STRONG",{});var G5t=s(fge);Ibo=r(G5t,"fnet"),G5t.forEach(t),Nbo=r(eB," \u2014 "),Ej=n(eB,"A",{href:!0});var O5t=s(Ej);qbo=r(O5t,"FNetTokenizer"),O5t.forEach(t),jbo=r(eB," or "),Cj=n(eB,"A",{href:!0});var V5t=s(Cj);Dbo=r(V5t,"FNetTokenizerFast"),V5t.forEach(t),Gbo=r(eB," (FNet model)"),eB.forEach(t),Obo=i(S),fu=n(S,"LI",{});var IBe=s(fu);gge=n(IBe,"STRONG",{});var X5t=s(gge);Vbo=r(X5t,"fsmt"),X5t.forEach(t),Xbo=r(IBe," \u2014 "),wj=n(IBe,"A",{href:!0});var z5t=s(wj);zbo=r(z5t,"FSMTTokenizer"),z5t.forEach(t),Qbo=r(IBe," (FairSeq Machine-Translation model)"),IBe.forEach(t),Wbo=i(S),ws=n(S,"LI",{});var oB=s(ws);hge=n(oB,"STRONG",{});var Q5t=s(hge);Ubo=r(Q5t,"funnel"),Q5t.forEach(t),Hbo=r(oB," \u2014 "),Aj=n(oB,"A",{href:!0});var W5t=s(Aj);Jbo=r(W5t,"FunnelTokenizer"),W5t.forEach(t),Ybo=r(oB," or "),Lj=n(oB,"A",{href:!0});var U5t=s(Lj);Kbo=r(U5t,"FunnelTokenizerFast"),U5t.forEach(t),Zbo=r(oB," (Funnel Transformer model)"),oB.forEach(t),evo=i(S),As=n(S,"LI",{});var rB=s(As);uge=n(rB,"STRONG",{});var H5t=s(uge);ovo=r(H5t,"gpt2"),H5t.forEach(t),rvo=r(rB," \u2014 "),yj=n(rB,"A",{href:!0});var J5t=s(yj);tvo=r(J5t,"GPT2Tokenizer"),J5t.forEach(t),avo=r(rB," or "),xj=n(rB,"A",{href:!0});var Y5t=s(xj);nvo=r(Y5t,"GPT2TokenizerFast"),Y5t.forEach(t),svo=r(rB," (OpenAI GPT-2 model)"),rB.forEach(t),lvo=i(S),Ls=n(S,"LI",{});var tB=s(Ls);pge=n(tB,"STRONG",{});var K5t=s(pge);ivo=r(K5t,"gpt_neo"),K5t.forEach(t),dvo=r(tB," \u2014 "),$j=n(tB,"A",{href:!0});var Z5t=s($j);cvo=r(Z5t,"GPT2Tokenizer"),Z5t.forEach(t),mvo=r(tB," or "),kj=n(tB,"A",{href:!0});var e0t=s(kj);fvo=r(e0t,"GPT2TokenizerFast"),e0t.forEach(t),gvo=r(tB," (GPT Neo model)"),tB.forEach(t),hvo=i(S),gu=n(S,"LI",{});var NBe=s(gu);_ge=n(NBe,"STRONG",{});var o0t=s(_ge);uvo=r(o0t,"gpt_neox"),o0t.forEach(t),pvo=r(NBe," \u2014 "),Sj=n(NBe,"A",{href:!0});var r0t=s(Sj);_vo=r(r0t,"GPTNeoXTokenizerFast"),r0t.forEach(t),bvo=r(NBe," (GPT NeoX model)"),NBe.forEach(t),vvo=i(S),hu=n(S,"LI",{});var qBe=s(hu);bge=n(qBe,"STRONG",{});var t0t=s(bge);Fvo=r(t0t,"gpt_neox_japanese"),t0t.forEach(t),Tvo=r(qBe," \u2014 "),Rj=n(qBe,"A",{href:!0});var a0t=s(Rj);Mvo=r(a0t,"GPTNeoXJapaneseTokenizer"),a0t.forEach(t),Evo=r(qBe," (GPT NeoX Japanese model)"),qBe.forEach(t),Cvo=i(S),ys=n(S,"LI",{});var aB=s(ys);vge=n(aB,"STRONG",{});var n0t=s(vge);wvo=r(n0t,"gptj"),n0t.forEach(t),Avo=r(aB," \u2014 "),Pj=n(aB,"A",{href:!0});var s0t=s(Pj);Lvo=r(s0t,"GPT2Tokenizer"),s0t.forEach(t),yvo=r(aB," or "),Bj=n(aB,"A",{href:!0});var l0t=s(Bj);xvo=r(l0t,"GPT2TokenizerFast"),l0t.forEach(t),$vo=r(aB," (GPT-J model)"),aB.forEach(t),kvo=i(S),xs=n(S,"LI",{});var nB=s(xs);Fge=n(nB,"STRONG",{});var i0t=s(Fge);Svo=r(i0t,"groupvit"),i0t.forEach(t),Rvo=r(nB," \u2014 "),Ij=n(nB,"A",{href:!0});var d0t=s(Ij);Pvo=r(d0t,"CLIPTokenizer"),d0t.forEach(t),Bvo=r(nB," or "),Nj=n(nB,"A",{href:!0});var c0t=s(Nj);Ivo=r(c0t,"CLIPTokenizerFast"),c0t.forEach(t),Nvo=r(nB," (GroupViT model)"),nB.forEach(t),qvo=i(S),$s=n(S,"LI",{});var sB=s($s);Tge=n(sB,"STRONG",{});var m0t=s(Tge);jvo=r(m0t,"herbert"),m0t.forEach(t),Dvo=r(sB," \u2014 "),qj=n(sB,"A",{href:!0});var f0t=s(qj);Gvo=r(f0t,"HerbertTokenizer"),f0t.forEach(t),Ovo=r(sB," or "),jj=n(sB,"A",{href:!0});var g0t=s(jj);Vvo=r(g0t,"HerbertTokenizerFast"),g0t.forEach(t),Xvo=r(sB," (HerBERT model)"),sB.forEach(t),zvo=i(S),uu=n(S,"LI",{});var jBe=s(uu);Mge=n(jBe,"STRONG",{});var h0t=s(Mge);Qvo=r(h0t,"hubert"),h0t.forEach(t),Wvo=r(jBe," \u2014 "),Dj=n(jBe,"A",{href:!0});var u0t=s(Dj);Uvo=r(u0t,"Wav2Vec2CTCTokenizer"),u0t.forEach(t),Hvo=r(jBe," (Hubert model)"),jBe.forEach(t),Jvo=i(S),ks=n(S,"LI",{});var lB=s(ks);Ege=n(lB,"STRONG",{});var p0t=s(Ege);Yvo=r(p0t,"ibert"),p0t.forEach(t),Kvo=r(lB," \u2014 "),Gj=n(lB,"A",{href:!0});var _0t=s(Gj);Zvo=r(_0t,"RobertaTokenizer"),_0t.forEach(t),eFo=r(lB," or "),Oj=n(lB,"A",{href:!0});var b0t=s(Oj);oFo=r(b0t,"RobertaTokenizerFast"),b0t.forEach(t),rFo=r(lB," (I-BERT model)"),lB.forEach(t),tFo=i(S),Ss=n(S,"LI",{});var iB=s(Ss);Cge=n(iB,"STRONG",{});var v0t=s(Cge);aFo=r(v0t,"layoutlm"),v0t.forEach(t),nFo=r(iB," \u2014 "),Vj=n(iB,"A",{href:!0});var F0t=s(Vj);sFo=r(F0t,"LayoutLMTokenizer"),F0t.forEach(t),lFo=r(iB," or "),Xj=n(iB,"A",{href:!0});var T0t=s(Xj);iFo=r(T0t,"LayoutLMTokenizerFast"),T0t.forEach(t),dFo=r(iB," (LayoutLM model)"),iB.forEach(t),cFo=i(S),Rs=n(S,"LI",{});var dB=s(Rs);wge=n(dB,"STRONG",{});var M0t=s(wge);mFo=r(M0t,"layoutlmv2"),M0t.forEach(t),fFo=r(dB," \u2014 "),zj=n(dB,"A",{href:!0});var E0t=s(zj);gFo=r(E0t,"LayoutLMv2Tokenizer"),E0t.forEach(t),hFo=r(dB," or "),Qj=n(dB,"A",{href:!0});var C0t=s(Qj);uFo=r(C0t,"LayoutLMv2TokenizerFast"),C0t.forEach(t),pFo=r(dB," (LayoutLMv2 model)"),dB.forEach(t),_Fo=i(S),Ps=n(S,"LI",{});var cB=s(Ps);Age=n(cB,"STRONG",{});var w0t=s(Age);bFo=r(w0t,"layoutlmv3"),w0t.forEach(t),vFo=r(cB," \u2014 "),Wj=n(cB,"A",{href:!0});var A0t=s(Wj);FFo=r(A0t,"LayoutLMv3Tokenizer"),A0t.forEach(t),TFo=r(cB," or "),Uj=n(cB,"A",{href:!0});var L0t=s(Uj);MFo=r(L0t,"LayoutLMv3TokenizerFast"),L0t.forEach(t),EFo=r(cB," (LayoutLMv3 model)"),cB.forEach(t),CFo=i(S),Bs=n(S,"LI",{});var mB=s(Bs);Lge=n(mB,"STRONG",{});var y0t=s(Lge);wFo=r(y0t,"layoutxlm"),y0t.forEach(t),AFo=r(mB," \u2014 "),Hj=n(mB,"A",{href:!0});var x0t=s(Hj);LFo=r(x0t,"LayoutXLMTokenizer"),x0t.forEach(t),yFo=r(mB," or "),Jj=n(mB,"A",{href:!0});var $0t=s(Jj);xFo=r($0t,"LayoutXLMTokenizerFast"),$0t.forEach(t),$Fo=r(mB," (LayoutXLM model)"),mB.forEach(t),kFo=i(S),Is=n(S,"LI",{});var fB=s(Is);yge=n(fB,"STRONG",{});var k0t=s(yge);SFo=r(k0t,"led"),k0t.forEach(t),RFo=r(fB," \u2014 "),Yj=n(fB,"A",{href:!0});var S0t=s(Yj);PFo=r(S0t,"LEDTokenizer"),S0t.forEach(t),BFo=r(fB," or "),Kj=n(fB,"A",{href:!0});var R0t=s(Kj);IFo=r(R0t,"LEDTokenizerFast"),R0t.forEach(t),NFo=r(fB," (LED model)"),fB.forEach(t),qFo=i(S),Ns=n(S,"LI",{});var gB=s(Ns);xge=n(gB,"STRONG",{});var P0t=s(xge);jFo=r(P0t,"longformer"),P0t.forEach(t),DFo=r(gB," \u2014 "),Zj=n(gB,"A",{href:!0});var B0t=s(Zj);GFo=r(B0t,"LongformerTokenizer"),B0t.forEach(t),OFo=r(gB," or "),eD=n(gB,"A",{href:!0});var I0t=s(eD);VFo=r(I0t,"LongformerTokenizerFast"),I0t.forEach(t),XFo=r(gB," (Longformer model)"),gB.forEach(t),zFo=i(S),qs=n(S,"LI",{});var hB=s(qs);$ge=n(hB,"STRONG",{});var N0t=s($ge);QFo=r(N0t,"longt5"),N0t.forEach(t),WFo=r(hB," \u2014 "),oD=n(hB,"A",{href:!0});var q0t=s(oD);UFo=r(q0t,"T5Tokenizer"),q0t.forEach(t),HFo=r(hB," or "),rD=n(hB,"A",{href:!0});var j0t=s(rD);JFo=r(j0t,"T5TokenizerFast"),j0t.forEach(t),YFo=r(hB," (LongT5 model)"),hB.forEach(t),KFo=i(S),pu=n(S,"LI",{});var DBe=s(pu);kge=n(DBe,"STRONG",{});var D0t=s(kge);ZFo=r(D0t,"luke"),D0t.forEach(t),eTo=r(DBe," \u2014 "),tD=n(DBe,"A",{href:!0});var G0t=s(tD);oTo=r(G0t,"LukeTokenizer"),G0t.forEach(t),rTo=r(DBe," (LUKE model)"),DBe.forEach(t),tTo=i(S),js=n(S,"LI",{});var uB=s(js);Sge=n(uB,"STRONG",{});var O0t=s(Sge);aTo=r(O0t,"lxmert"),O0t.forEach(t),nTo=r(uB," \u2014 "),aD=n(uB,"A",{href:!0});var V0t=s(aD);sTo=r(V0t,"LxmertTokenizer"),V0t.forEach(t),lTo=r(uB," or "),nD=n(uB,"A",{href:!0});var X0t=s(nD);iTo=r(X0t,"LxmertTokenizerFast"),X0t.forEach(t),dTo=r(uB," (LXMERT model)"),uB.forEach(t),cTo=i(S),_u=n(S,"LI",{});var GBe=s(_u);Rge=n(GBe,"STRONG",{});var z0t=s(Rge);mTo=r(z0t,"m2m_100"),z0t.forEach(t),fTo=r(GBe," \u2014 "),sD=n(GBe,"A",{href:!0});var Q0t=s(sD);gTo=r(Q0t,"M2M100Tokenizer"),Q0t.forEach(t),hTo=r(GBe," (M2M100 model)"),GBe.forEach(t),uTo=i(S),bu=n(S,"LI",{});var OBe=s(bu);Pge=n(OBe,"STRONG",{});var W0t=s(Pge);pTo=r(W0t,"marian"),W0t.forEach(t),_To=r(OBe," \u2014 "),lD=n(OBe,"A",{href:!0});var U0t=s(lD);bTo=r(U0t,"MarianTokenizer"),U0t.forEach(t),vTo=r(OBe," (Marian model)"),OBe.forEach(t),FTo=i(S),Ds=n(S,"LI",{});var pB=s(Ds);Bge=n(pB,"STRONG",{});var H0t=s(Bge);TTo=r(H0t,"mbart"),H0t.forEach(t),MTo=r(pB," \u2014 "),iD=n(pB,"A",{href:!0});var J0t=s(iD);ETo=r(J0t,"MBartTokenizer"),J0t.forEach(t),CTo=r(pB," or "),dD=n(pB,"A",{href:!0});var Y0t=s(dD);wTo=r(Y0t,"MBartTokenizerFast"),Y0t.forEach(t),ATo=r(pB," (mBART model)"),pB.forEach(t),LTo=i(S),Gs=n(S,"LI",{});var _B=s(Gs);Ige=n(_B,"STRONG",{});var K0t=s(Ige);yTo=r(K0t,"mbart50"),K0t.forEach(t),xTo=r(_B," \u2014 "),cD=n(_B,"A",{href:!0});var Z0t=s(cD);$To=r(Z0t,"MBart50Tokenizer"),Z0t.forEach(t),kTo=r(_B," or "),mD=n(_B,"A",{href:!0});var ewt=s(mD);STo=r(ewt,"MBart50TokenizerFast"),ewt.forEach(t),RTo=r(_B," (mBART-50 model)"),_B.forEach(t),PTo=i(S),Os=n(S,"LI",{});var bB=s(Os);Nge=n(bB,"STRONG",{});var owt=s(Nge);BTo=r(owt,"megatron-bert"),owt.forEach(t),ITo=r(bB," \u2014 "),fD=n(bB,"A",{href:!0});var rwt=s(fD);NTo=r(rwt,"BertTokenizer"),rwt.forEach(t),qTo=r(bB," or "),gD=n(bB,"A",{href:!0});var twt=s(gD);jTo=r(twt,"BertTokenizerFast"),twt.forEach(t),DTo=r(bB," (Megatron-BERT model)"),bB.forEach(t),GTo=i(S),vu=n(S,"LI",{});var VBe=s(vu);qge=n(VBe,"STRONG",{});var awt=s(qge);OTo=r(awt,"mluke"),awt.forEach(t),VTo=r(VBe," \u2014 "),hD=n(VBe,"A",{href:!0});var nwt=s(hD);XTo=r(nwt,"MLukeTokenizer"),nwt.forEach(t),zTo=r(VBe," (mLUKE model)"),VBe.forEach(t),QTo=i(S),Vs=n(S,"LI",{});var vB=s(Vs);jge=n(vB,"STRONG",{});var swt=s(jge);WTo=r(swt,"mobilebert"),swt.forEach(t),UTo=r(vB," \u2014 "),uD=n(vB,"A",{href:!0});var lwt=s(uD);HTo=r(lwt,"MobileBertTokenizer"),lwt.forEach(t),JTo=r(vB," or "),pD=n(vB,"A",{href:!0});var iwt=s(pD);YTo=r(iwt,"MobileBertTokenizerFast"),iwt.forEach(t),KTo=r(vB," (MobileBERT model)"),vB.forEach(t),ZTo=i(S),Xs=n(S,"LI",{});var FB=s(Xs);Dge=n(FB,"STRONG",{});var dwt=s(Dge);eMo=r(dwt,"mpnet"),dwt.forEach(t),oMo=r(FB," \u2014 "),_D=n(FB,"A",{href:!0});var cwt=s(_D);rMo=r(cwt,"MPNetTokenizer"),cwt.forEach(t),tMo=r(FB," or "),bD=n(FB,"A",{href:!0});var mwt=s(bD);aMo=r(mwt,"MPNetTokenizerFast"),mwt.forEach(t),nMo=r(FB," (MPNet model)"),FB.forEach(t),sMo=i(S),zs=n(S,"LI",{});var TB=s(zs);Gge=n(TB,"STRONG",{});var fwt=s(Gge);lMo=r(fwt,"mt5"),fwt.forEach(t),iMo=r(TB," \u2014 "),vD=n(TB,"A",{href:!0});var gwt=s(vD);dMo=r(gwt,"MT5Tokenizer"),gwt.forEach(t),cMo=r(TB," or "),FD=n(TB,"A",{href:!0});var hwt=s(FD);mMo=r(hwt,"MT5TokenizerFast"),hwt.forEach(t),fMo=r(TB," (MT5 model)"),TB.forEach(t),gMo=i(S),Qs=n(S,"LI",{});var MB=s(Qs);Oge=n(MB,"STRONG",{});var uwt=s(Oge);hMo=r(uwt,"mvp"),uwt.forEach(t),uMo=r(MB," \u2014 "),TD=n(MB,"A",{href:!0});var pwt=s(TD);pMo=r(pwt,"MvpTokenizer"),pwt.forEach(t),_Mo=r(MB," or "),MD=n(MB,"A",{href:!0});var _wt=s(MD);bMo=r(_wt,"MvpTokenizerFast"),_wt.forEach(t),vMo=r(MB," (MVP model)"),MB.forEach(t),FMo=i(S),Ws=n(S,"LI",{});var EB=s(Ws);Vge=n(EB,"STRONG",{});var bwt=s(Vge);TMo=r(bwt,"nezha"),bwt.forEach(t),MMo=r(EB," \u2014 "),ED=n(EB,"A",{href:!0});var vwt=s(ED);EMo=r(vwt,"BertTokenizer"),vwt.forEach(t),CMo=r(EB," or "),CD=n(EB,"A",{href:!0});var Fwt=s(CD);wMo=r(Fwt,"BertTokenizerFast"),Fwt.forEach(t),AMo=r(EB," (Nezha model)"),EB.forEach(t),LMo=i(S),Us=n(S,"LI",{});var CB=s(Us);Xge=n(CB,"STRONG",{});var Twt=s(Xge);yMo=r(Twt,"nllb"),Twt.forEach(t),xMo=r(CB," \u2014 "),wD=n(CB,"A",{href:!0});var Mwt=s(wD);$Mo=r(Mwt,"NllbTokenizer"),Mwt.forEach(t),kMo=r(CB," or "),AD=n(CB,"A",{href:!0});var Ewt=s(AD);SMo=r(Ewt,"NllbTokenizerFast"),Ewt.forEach(t),RMo=r(CB," (NLLB model)"),CB.forEach(t),PMo=i(S),Hs=n(S,"LI",{});var wB=s(Hs);zge=n(wB,"STRONG",{});var Cwt=s(zge);BMo=r(Cwt,"nystromformer"),Cwt.forEach(t),IMo=r(wB," \u2014 "),LD=n(wB,"A",{href:!0});var wwt=s(LD);NMo=r(wwt,"AlbertTokenizer"),wwt.forEach(t),qMo=r(wB," or "),yD=n(wB,"A",{href:!0});var Awt=s(yD);jMo=r(Awt,"AlbertTokenizerFast"),Awt.forEach(t),DMo=r(wB," (Nystr\xF6mformer model)"),wB.forEach(t),GMo=i(S),Js=n(S,"LI",{});var AB=s(Js);Qge=n(AB,"STRONG",{});var Lwt=s(Qge);OMo=r(Lwt,"openai-gpt"),Lwt.forEach(t),VMo=r(AB," \u2014 "),xD=n(AB,"A",{href:!0});var ywt=s(xD);XMo=r(ywt,"OpenAIGPTTokenizer"),ywt.forEach(t),zMo=r(AB," or "),$D=n(AB,"A",{href:!0});var xwt=s($D);QMo=r(xwt,"OpenAIGPTTokenizerFast"),xwt.forEach(t),WMo=r(AB," (OpenAI GPT model)"),AB.forEach(t),UMo=i(S),Fu=n(S,"LI",{});var XBe=s(Fu);Wge=n(XBe,"STRONG",{});var $wt=s(Wge);HMo=r($wt,"opt"),$wt.forEach(t),JMo=r(XBe," \u2014 "),kD=n(XBe,"A",{href:!0});var kwt=s(kD);YMo=r(kwt,"GPT2Tokenizer"),kwt.forEach(t),KMo=r(XBe," (OPT model)"),XBe.forEach(t),ZMo=i(S),Ys=n(S,"LI",{});var LB=s(Ys);Uge=n(LB,"STRONG",{});var Swt=s(Uge);eEo=r(Swt,"owlvit"),Swt.forEach(t),oEo=r(LB," \u2014 "),SD=n(LB,"A",{href:!0});var Rwt=s(SD);rEo=r(Rwt,"CLIPTokenizer"),Rwt.forEach(t),tEo=r(LB," or "),RD=n(LB,"A",{href:!0});var Pwt=s(RD);aEo=r(Pwt,"CLIPTokenizerFast"),Pwt.forEach(t),nEo=r(LB," (OWL-ViT model)"),LB.forEach(t),sEo=i(S),Ks=n(S,"LI",{});var yB=s(Ks);Hge=n(yB,"STRONG",{});var Bwt=s(Hge);lEo=r(Bwt,"pegasus"),Bwt.forEach(t),iEo=r(yB," \u2014 "),PD=n(yB,"A",{href:!0});var Iwt=s(PD);dEo=r(Iwt,"PegasusTokenizer"),Iwt.forEach(t),cEo=r(yB," or "),BD=n(yB,"A",{href:!0});var Nwt=s(BD);mEo=r(Nwt,"PegasusTokenizerFast"),Nwt.forEach(t),fEo=r(yB," (Pegasus model)"),yB.forEach(t),gEo=i(S),Tu=n(S,"LI",{});var zBe=s(Tu);Jge=n(zBe,"STRONG",{});var qwt=s(Jge);hEo=r(qwt,"perceiver"),qwt.forEach(t),uEo=r(zBe," \u2014 "),ID=n(zBe,"A",{href:!0});var jwt=s(ID);pEo=r(jwt,"PerceiverTokenizer"),jwt.forEach(t),_Eo=r(zBe," (Perceiver model)"),zBe.forEach(t),bEo=i(S),Mu=n(S,"LI",{});var QBe=s(Mu);Yge=n(QBe,"STRONG",{});var Dwt=s(Yge);vEo=r(Dwt,"phobert"),Dwt.forEach(t),FEo=r(QBe," \u2014 "),ND=n(QBe,"A",{href:!0});var Gwt=s(ND);TEo=r(Gwt,"PhobertTokenizer"),Gwt.forEach(t),MEo=r(QBe," (PhoBERT model)"),QBe.forEach(t),EEo=i(S),Eu=n(S,"LI",{});var WBe=s(Eu);Kge=n(WBe,"STRONG",{});var Owt=s(Kge);CEo=r(Owt,"plbart"),Owt.forEach(t),wEo=r(WBe," \u2014 "),qD=n(WBe,"A",{href:!0});var Vwt=s(qD);AEo=r(Vwt,"PLBartTokenizer"),Vwt.forEach(t),LEo=r(WBe," (PLBart model)"),WBe.forEach(t),yEo=i(S),Cu=n(S,"LI",{});var UBe=s(Cu);Zge=n(UBe,"STRONG",{});var Xwt=s(Zge);xEo=r(Xwt,"prophetnet"),Xwt.forEach(t),$Eo=r(UBe," \u2014 "),jD=n(UBe,"A",{href:!0});var zwt=s(jD);kEo=r(zwt,"ProphetNetTokenizer"),zwt.forEach(t),SEo=r(UBe," (ProphetNet model)"),UBe.forEach(t),REo=i(S),Zs=n(S,"LI",{});var xB=s(Zs);ehe=n(xB,"STRONG",{});var Qwt=s(ehe);PEo=r(Qwt,"qdqbert"),Qwt.forEach(t),BEo=r(xB," \u2014 "),DD=n(xB,"A",{href:!0});var Wwt=s(DD);IEo=r(Wwt,"BertTokenizer"),Wwt.forEach(t),NEo=r(xB," or "),GD=n(xB,"A",{href:!0});var Uwt=s(GD);qEo=r(Uwt,"BertTokenizerFast"),Uwt.forEach(t),jEo=r(xB," (QDQBert model)"),xB.forEach(t),DEo=i(S),wu=n(S,"LI",{});var HBe=s(wu);ohe=n(HBe,"STRONG",{});var Hwt=s(ohe);GEo=r(Hwt,"rag"),Hwt.forEach(t),OEo=r(HBe," \u2014 "),OD=n(HBe,"A",{href:!0});var Jwt=s(OD);VEo=r(Jwt,"RagTokenizer"),Jwt.forEach(t),XEo=r(HBe," (RAG model)"),HBe.forEach(t),zEo=i(S),el=n(S,"LI",{});var $B=s(el);rhe=n($B,"STRONG",{});var Ywt=s(rhe);QEo=r(Ywt,"realm"),Ywt.forEach(t),WEo=r($B," \u2014 "),VD=n($B,"A",{href:!0});var Kwt=s(VD);UEo=r(Kwt,"RealmTokenizer"),Kwt.forEach(t),HEo=r($B," or "),XD=n($B,"A",{href:!0});var Zwt=s(XD);JEo=r(Zwt,"RealmTokenizerFast"),Zwt.forEach(t),YEo=r($B," (REALM model)"),$B.forEach(t),KEo=i(S),ol=n(S,"LI",{});var kB=s(ol);the=n(kB,"STRONG",{});var eAt=s(the);ZEo=r(eAt,"reformer"),eAt.forEach(t),e4o=r(kB," \u2014 "),zD=n(kB,"A",{href:!0});var oAt=s(zD);o4o=r(oAt,"ReformerTokenizer"),oAt.forEach(t),r4o=r(kB," or "),QD=n(kB,"A",{href:!0});var rAt=s(QD);t4o=r(rAt,"ReformerTokenizerFast"),rAt.forEach(t),a4o=r(kB," (Reformer model)"),kB.forEach(t),n4o=i(S),rl=n(S,"LI",{});var SB=s(rl);ahe=n(SB,"STRONG",{});var tAt=s(ahe);s4o=r(tAt,"rembert"),tAt.forEach(t),l4o=r(SB," \u2014 "),WD=n(SB,"A",{href:!0});var aAt=s(WD);i4o=r(aAt,"RemBertTokenizer"),aAt.forEach(t),d4o=r(SB," or "),UD=n(SB,"A",{href:!0});var nAt=s(UD);c4o=r(nAt,"RemBertTokenizerFast"),nAt.forEach(t),m4o=r(SB," (RemBERT model)"),SB.forEach(t),f4o=i(S),tl=n(S,"LI",{});var RB=s(tl);nhe=n(RB,"STRONG",{});var sAt=s(nhe);g4o=r(sAt,"retribert"),sAt.forEach(t),h4o=r(RB," \u2014 "),HD=n(RB,"A",{href:!0});var lAt=s(HD);u4o=r(lAt,"RetriBertTokenizer"),lAt.forEach(t),p4o=r(RB," or "),JD=n(RB,"A",{href:!0});var iAt=s(JD);_4o=r(iAt,"RetriBertTokenizerFast"),iAt.forEach(t),b4o=r(RB," (RetriBERT model)"),RB.forEach(t),v4o=i(S),al=n(S,"LI",{});var PB=s(al);she=n(PB,"STRONG",{});var dAt=s(she);F4o=r(dAt,"roberta"),dAt.forEach(t),T4o=r(PB," \u2014 "),YD=n(PB,"A",{href:!0});var cAt=s(YD);M4o=r(cAt,"RobertaTokenizer"),cAt.forEach(t),E4o=r(PB," or "),KD=n(PB,"A",{href:!0});var mAt=s(KD);C4o=r(mAt,"RobertaTokenizerFast"),mAt.forEach(t),w4o=r(PB," (RoBERTa model)"),PB.forEach(t),A4o=i(S),nl=n(S,"LI",{});var BB=s(nl);lhe=n(BB,"STRONG",{});var fAt=s(lhe);L4o=r(fAt,"roformer"),fAt.forEach(t),y4o=r(BB," \u2014 "),ZD=n(BB,"A",{href:!0});var gAt=s(ZD);x4o=r(gAt,"RoFormerTokenizer"),gAt.forEach(t),$4o=r(BB," or "),eG=n(BB,"A",{href:!0});var hAt=s(eG);k4o=r(hAt,"RoFormerTokenizerFast"),hAt.forEach(t),S4o=r(BB," (RoFormer model)"),BB.forEach(t),R4o=i(S),Au=n(S,"LI",{});var JBe=s(Au);ihe=n(JBe,"STRONG",{});var uAt=s(ihe);P4o=r(uAt,"speech_to_text"),uAt.forEach(t),B4o=r(JBe," \u2014 "),oG=n(JBe,"A",{href:!0});var pAt=s(oG);I4o=r(pAt,"Speech2TextTokenizer"),pAt.forEach(t),N4o=r(JBe," (Speech2Text model)"),JBe.forEach(t),q4o=i(S),Lu=n(S,"LI",{});var YBe=s(Lu);dhe=n(YBe,"STRONG",{});var _At=s(dhe);j4o=r(_At,"speech_to_text_2"),_At.forEach(t),D4o=r(YBe," \u2014 "),rG=n(YBe,"A",{href:!0});var bAt=s(rG);G4o=r(bAt,"Speech2Text2Tokenizer"),bAt.forEach(t),O4o=r(YBe," (Speech2Text2 model)"),YBe.forEach(t),V4o=i(S),sl=n(S,"LI",{});var IB=s(sl);che=n(IB,"STRONG",{});var vAt=s(che);X4o=r(vAt,"splinter"),vAt.forEach(t),z4o=r(IB," \u2014 "),tG=n(IB,"A",{href:!0});var FAt=s(tG);Q4o=r(FAt,"SplinterTokenizer"),FAt.forEach(t),W4o=r(IB," or "),aG=n(IB,"A",{href:!0});var TAt=s(aG);U4o=r(TAt,"SplinterTokenizerFast"),TAt.forEach(t),H4o=r(IB," (Splinter model)"),IB.forEach(t),J4o=i(S),ll=n(S,"LI",{});var NB=s(ll);mhe=n(NB,"STRONG",{});var MAt=s(mhe);Y4o=r(MAt,"squeezebert"),MAt.forEach(t),K4o=r(NB," \u2014 "),nG=n(NB,"A",{href:!0});var EAt=s(nG);Z4o=r(EAt,"SqueezeBertTokenizer"),EAt.forEach(t),eCo=r(NB," or "),sG=n(NB,"A",{href:!0});var CAt=s(sG);oCo=r(CAt,"SqueezeBertTokenizerFast"),CAt.forEach(t),rCo=r(NB," (SqueezeBERT model)"),NB.forEach(t),tCo=i(S),il=n(S,"LI",{});var qB=s(il);fhe=n(qB,"STRONG",{});var wAt=s(fhe);aCo=r(wAt,"t5"),wAt.forEach(t),nCo=r(qB," \u2014 "),lG=n(qB,"A",{href:!0});var AAt=s(lG);sCo=r(AAt,"T5Tokenizer"),AAt.forEach(t),lCo=r(qB," or "),iG=n(qB,"A",{href:!0});var LAt=s(iG);iCo=r(LAt,"T5TokenizerFast"),LAt.forEach(t),dCo=r(qB," (T5 model)"),qB.forEach(t),cCo=i(S),yu=n(S,"LI",{});var KBe=s(yu);ghe=n(KBe,"STRONG",{});var yAt=s(ghe);mCo=r(yAt,"tapas"),yAt.forEach(t),fCo=r(KBe," \u2014 "),dG=n(KBe,"A",{href:!0});var xAt=s(dG);gCo=r(xAt,"TapasTokenizer"),xAt.forEach(t),hCo=r(KBe," (TAPAS model)"),KBe.forEach(t),uCo=i(S),xu=n(S,"LI",{});var ZBe=s(xu);hhe=n(ZBe,"STRONG",{});var $At=s(hhe);pCo=r($At,"tapex"),$At.forEach(t),_Co=r(ZBe," \u2014 "),cG=n(ZBe,"A",{href:!0});var kAt=s(cG);bCo=r(kAt,"TapexTokenizer"),kAt.forEach(t),vCo=r(ZBe," (TAPEX model)"),ZBe.forEach(t),FCo=i(S),$u=n(S,"LI",{});var eIe=s($u);uhe=n(eIe,"STRONG",{});var SAt=s(uhe);TCo=r(SAt,"transfo-xl"),SAt.forEach(t),MCo=r(eIe," \u2014 "),mG=n(eIe,"A",{href:!0});var RAt=s(mG);ECo=r(RAt,"TransfoXLTokenizer"),RAt.forEach(t),CCo=r(eIe," (Transformer-XL model)"),eIe.forEach(t),wCo=i(S),dl=n(S,"LI",{});var jB=s(dl);phe=n(jB,"STRONG",{});var PAt=s(phe);ACo=r(PAt,"vilt"),PAt.forEach(t),LCo=r(jB," \u2014 "),fG=n(jB,"A",{href:!0});var BAt=s(fG);yCo=r(BAt,"BertTokenizer"),BAt.forEach(t),xCo=r(jB," or "),gG=n(jB,"A",{href:!0});var IAt=s(gG);$Co=r(IAt,"BertTokenizerFast"),IAt.forEach(t),kCo=r(jB," (ViLT model)"),jB.forEach(t),SCo=i(S),cl=n(S,"LI",{});var DB=s(cl);_he=n(DB,"STRONG",{});var NAt=s(_he);RCo=r(NAt,"visual_bert"),NAt.forEach(t),PCo=r(DB," \u2014 "),hG=n(DB,"A",{href:!0});var qAt=s(hG);BCo=r(qAt,"BertTokenizer"),qAt.forEach(t),ICo=r(DB," or "),uG=n(DB,"A",{href:!0});var jAt=s(uG);NCo=r(jAt,"BertTokenizerFast"),jAt.forEach(t),qCo=r(DB," (VisualBERT model)"),DB.forEach(t),jCo=i(S),ku=n(S,"LI",{});var oIe=s(ku);bhe=n(oIe,"STRONG",{});var DAt=s(bhe);DCo=r(DAt,"wav2vec2"),DAt.forEach(t),GCo=r(oIe," \u2014 "),pG=n(oIe,"A",{href:!0});var GAt=s(pG);OCo=r(GAt,"Wav2Vec2CTCTokenizer"),GAt.forEach(t),VCo=r(oIe," (Wav2Vec2 model)"),oIe.forEach(t),XCo=i(S),Su=n(S,"LI",{});var rIe=s(Su);vhe=n(rIe,"STRONG",{});var OAt=s(vhe);zCo=r(OAt,"wav2vec2-conformer"),OAt.forEach(t),QCo=r(rIe," \u2014 "),_G=n(rIe,"A",{href:!0});var VAt=s(_G);WCo=r(VAt,"Wav2Vec2CTCTokenizer"),VAt.forEach(t),UCo=r(rIe," (Wav2Vec2-Conformer model)"),rIe.forEach(t),HCo=i(S),Ru=n(S,"LI",{});var tIe=s(Ru);Fhe=n(tIe,"STRONG",{});var XAt=s(Fhe);JCo=r(XAt,"wav2vec2_phoneme"),XAt.forEach(t),YCo=r(tIe," \u2014 "),bG=n(tIe,"A",{href:!0});var zAt=s(bG);KCo=r(zAt,"Wav2Vec2PhonemeCTCTokenizer"),zAt.forEach(t),ZCo=r(tIe," (Wav2Vec2Phoneme model)"),tIe.forEach(t),e3o=i(S),ml=n(S,"LI",{});var GB=s(ml);The=n(GB,"STRONG",{});var QAt=s(The);o3o=r(QAt,"xclip"),QAt.forEach(t),r3o=r(GB," \u2014 "),vG=n(GB,"A",{href:!0});var WAt=s(vG);t3o=r(WAt,"CLIPTokenizer"),WAt.forEach(t),a3o=r(GB," or "),FG=n(GB,"A",{href:!0});var UAt=s(FG);n3o=r(UAt,"CLIPTokenizerFast"),UAt.forEach(t),s3o=r(GB," (X-CLIP model)"),GB.forEach(t),l3o=i(S),fl=n(S,"LI",{});var OB=s(fl);Mhe=n(OB,"STRONG",{});var HAt=s(Mhe);i3o=r(HAt,"xglm"),HAt.forEach(t),d3o=r(OB," \u2014 "),TG=n(OB,"A",{href:!0});var JAt=s(TG);c3o=r(JAt,"XGLMTokenizer"),JAt.forEach(t),m3o=r(OB," or "),MG=n(OB,"A",{href:!0});var YAt=s(MG);f3o=r(YAt,"XGLMTokenizerFast"),YAt.forEach(t),g3o=r(OB," (XGLM model)"),OB.forEach(t),h3o=i(S),Pu=n(S,"LI",{});var aIe=s(Pu);Ehe=n(aIe,"STRONG",{});var KAt=s(Ehe);u3o=r(KAt,"xlm"),KAt.forEach(t),p3o=r(aIe," \u2014 "),EG=n(aIe,"A",{href:!0});var ZAt=s(EG);_3o=r(ZAt,"XLMTokenizer"),ZAt.forEach(t),b3o=r(aIe," (XLM model)"),aIe.forEach(t),v3o=i(S),Bu=n(S,"LI",{});var nIe=s(Bu);Che=n(nIe,"STRONG",{});var e6t=s(Che);F3o=r(e6t,"xlm-prophetnet"),e6t.forEach(t),T3o=r(nIe," \u2014 "),CG=n(nIe,"A",{href:!0});var o6t=s(CG);M3o=r(o6t,"XLMProphetNetTokenizer"),o6t.forEach(t),E3o=r(nIe," (XLM-ProphetNet model)"),nIe.forEach(t),C3o=i(S),gl=n(S,"LI",{});var VB=s(gl);whe=n(VB,"STRONG",{});var r6t=s(whe);w3o=r(r6t,"xlm-roberta"),r6t.forEach(t),A3o=r(VB," \u2014 "),wG=n(VB,"A",{href:!0});var t6t=s(wG);L3o=r(t6t,"XLMRobertaTokenizer"),t6t.forEach(t),y3o=r(VB," or "),AG=n(VB,"A",{href:!0});var a6t=s(AG);x3o=r(a6t,"XLMRobertaTokenizerFast"),a6t.forEach(t),$3o=r(VB," (XLM-RoBERTa model)"),VB.forEach(t),k3o=i(S),hl=n(S,"LI",{});var XB=s(hl);Ahe=n(XB,"STRONG",{});var n6t=s(Ahe);S3o=r(n6t,"xlm-roberta-xl"),n6t.forEach(t),R3o=r(XB," \u2014 "),LG=n(XB,"A",{href:!0});var s6t=s(LG);P3o=r(s6t,"XLMRobertaTokenizer"),s6t.forEach(t),B3o=r(XB," or "),yG=n(XB,"A",{href:!0});var l6t=s(yG);I3o=r(l6t,"XLMRobertaTokenizerFast"),l6t.forEach(t),N3o=r(XB," (XLM-RoBERTa-XL model)"),XB.forEach(t),q3o=i(S),ul=n(S,"LI",{});var zB=s(ul);Lhe=n(zB,"STRONG",{});var i6t=s(Lhe);j3o=r(i6t,"xlnet"),i6t.forEach(t),D3o=r(zB," \u2014 "),xG=n(zB,"A",{href:!0});var d6t=s(xG);G3o=r(d6t,"XLNetTokenizer"),d6t.forEach(t),O3o=r(zB," or "),$G=n(zB,"A",{href:!0});var c6t=s($G);V3o=r(c6t,"XLNetTokenizerFast"),c6t.forEach(t),X3o=r(zB," (XLNet model)"),zB.forEach(t),z3o=i(S),pl=n(S,"LI",{});var QB=s(pl);yhe=n(QB,"STRONG",{});var m6t=s(yhe);Q3o=r(m6t,"yoso"),m6t.forEach(t),W3o=r(QB," \u2014 "),kG=n(QB,"A",{href:!0});var f6t=s(kG);U3o=r(f6t,"AlbertTokenizer"),f6t.forEach(t),H3o=r(QB," or "),SG=n(QB,"A",{href:!0});var g6t=s(SG);J3o=r(g6t,"AlbertTokenizerFast"),g6t.forEach(t),Y3o=r(QB," (YOSO model)"),QB.forEach(t),S.forEach(t),K3o=i(El),T(Iu.$$.fragment,El),El.forEach(t),Z3o=i(Ml),Nu=n(Ml,"DIV",{class:!0});var Joo=s(Nu);T(mx.$$.fragment,Joo),e5o=i(Joo),xhe=n(Joo,"P",{});var h6t=s(xhe);o5o=r(h6t,"Register a new tokenizer in this mapping."),h6t.forEach(t),Joo.forEach(t),Ml.forEach(t),GZe=i(m),hd=n(m,"H2",{class:!0});var Yoo=s(hd);qu=n(Yoo,"A",{id:!0,class:!0,href:!0});var u6t=s(qu);$he=n(u6t,"SPAN",{});var p6t=s($he);T(fx.$$.fragment,p6t),p6t.forEach(t),u6t.forEach(t),r5o=i(Yoo),khe=n(Yoo,"SPAN",{});var _6t=s(khe);t5o=r(_6t,"AutoFeatureExtractor"),_6t.forEach(t),Yoo.forEach(t),OZe=i(m),So=n(m,"DIV",{class:!0});var Cl=s(So);T(gx.$$.fragment,Cl),a5o=i(Cl),hx=n(Cl,"P",{});var Koo=s(hx);n5o=r(Koo,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),RG=n(Koo,"A",{href:!0});var b6t=s(RG);s5o=r(b6t,"AutoFeatureExtractor.from_pretrained()"),b6t.forEach(t),l5o=r(Koo," class method."),Koo.forEach(t),i5o=i(Cl),ux=n(Cl,"P",{});var Zoo=s(ux);d5o=r(Zoo,"This class cannot be instantiated directly using "),She=n(Zoo,"CODE",{});var v6t=s(She);c5o=r(v6t,"__init__()"),v6t.forEach(t),m5o=r(Zoo," (throws an error)."),Zoo.forEach(t),f5o=i(Cl),Ye=n(Cl,"DIV",{class:!0});var ba=s(Ye);T(px.$$.fragment,ba),g5o=i(ba),Rhe=n(ba,"P",{});var F6t=s(Rhe);h5o=r(F6t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),F6t.forEach(t),u5o=i(ba),Ha=n(ba,"P",{});var zy=s(Ha);p5o=r(zy,"The feature extractor class to instantiate is selected based on the "),Phe=n(zy,"CODE",{});var T6t=s(Phe);_5o=r(T6t,"model_type"),T6t.forEach(t),b5o=r(zy,` property of the config object
(either passed as an argument or loaded from `),Bhe=n(zy,"CODE",{});var M6t=s(Bhe);v5o=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),F5o=r(zy,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ihe=n(zy,"CODE",{});var E6t=s(Ihe);T5o=r(E6t,"pretrained_model_name_or_path"),E6t.forEach(t),M5o=r(zy,":"),zy.forEach(t),E5o=i(ba),z=n(ba,"UL",{});var W=s(z);ju=n(W,"LI",{});var sIe=s(ju);Nhe=n(sIe,"STRONG",{});var C6t=s(Nhe);C5o=r(C6t,"beit"),C6t.forEach(t),w5o=r(sIe," \u2014 "),PG=n(sIe,"A",{href:!0});var w6t=s(PG);A5o=r(w6t,"BeitFeatureExtractor"),w6t.forEach(t),L5o=r(sIe," (BEiT model)"),sIe.forEach(t),y5o=i(W),Du=n(W,"LI",{});var lIe=s(Du);qhe=n(lIe,"STRONG",{});var A6t=s(qhe);x5o=r(A6t,"clip"),A6t.forEach(t),$5o=r(lIe," \u2014 "),BG=n(lIe,"A",{href:!0});var L6t=s(BG);k5o=r(L6t,"CLIPFeatureExtractor"),L6t.forEach(t),S5o=r(lIe," (CLIP model)"),lIe.forEach(t),R5o=i(W),Gu=n(W,"LI",{});var iIe=s(Gu);jhe=n(iIe,"STRONG",{});var y6t=s(jhe);P5o=r(y6t,"conditional_detr"),y6t.forEach(t),B5o=r(iIe," \u2014 "),IG=n(iIe,"A",{href:!0});var x6t=s(IG);I5o=r(x6t,"ConditionalDetrFeatureExtractor"),x6t.forEach(t),N5o=r(iIe," (Conditional DETR model)"),iIe.forEach(t),q5o=i(W),Ou=n(W,"LI",{});var dIe=s(Ou);Dhe=n(dIe,"STRONG",{});var $6t=s(Dhe);j5o=r($6t,"convnext"),$6t.forEach(t),D5o=r(dIe," \u2014 "),NG=n(dIe,"A",{href:!0});var k6t=s(NG);G5o=r(k6t,"ConvNextFeatureExtractor"),k6t.forEach(t),O5o=r(dIe," (ConvNeXT model)"),dIe.forEach(t),V5o=i(W),Vu=n(W,"LI",{});var cIe=s(Vu);Ghe=n(cIe,"STRONG",{});var S6t=s(Ghe);X5o=r(S6t,"cvt"),S6t.forEach(t),z5o=r(cIe," \u2014 "),qG=n(cIe,"A",{href:!0});var R6t=s(qG);Q5o=r(R6t,"ConvNextFeatureExtractor"),R6t.forEach(t),W5o=r(cIe," (CvT model)"),cIe.forEach(t),U5o=i(W),Xu=n(W,"LI",{});var mIe=s(Xu);Ohe=n(mIe,"STRONG",{});var P6t=s(Ohe);H5o=r(P6t,"data2vec-audio"),P6t.forEach(t),J5o=r(mIe," \u2014 "),jG=n(mIe,"A",{href:!0});var B6t=s(jG);Y5o=r(B6t,"Wav2Vec2FeatureExtractor"),B6t.forEach(t),K5o=r(mIe," (Data2VecAudio model)"),mIe.forEach(t),Z5o=i(W),zu=n(W,"LI",{});var fIe=s(zu);Vhe=n(fIe,"STRONG",{});var I6t=s(Vhe);e0o=r(I6t,"data2vec-vision"),I6t.forEach(t),o0o=r(fIe," \u2014 "),DG=n(fIe,"A",{href:!0});var N6t=s(DG);r0o=r(N6t,"BeitFeatureExtractor"),N6t.forEach(t),t0o=r(fIe," (Data2VecVision model)"),fIe.forEach(t),a0o=i(W),Qu=n(W,"LI",{});var gIe=s(Qu);Xhe=n(gIe,"STRONG",{});var q6t=s(Xhe);n0o=r(q6t,"deformable_detr"),q6t.forEach(t),s0o=r(gIe," \u2014 "),GG=n(gIe,"A",{href:!0});var j6t=s(GG);l0o=r(j6t,"DeformableDetrFeatureExtractor"),j6t.forEach(t),i0o=r(gIe," (Deformable DETR model)"),gIe.forEach(t),d0o=i(W),Wu=n(W,"LI",{});var hIe=s(Wu);zhe=n(hIe,"STRONG",{});var D6t=s(zhe);c0o=r(D6t,"deit"),D6t.forEach(t),m0o=r(hIe," \u2014 "),OG=n(hIe,"A",{href:!0});var G6t=s(OG);f0o=r(G6t,"DeiTFeatureExtractor"),G6t.forEach(t),g0o=r(hIe," (DeiT model)"),hIe.forEach(t),h0o=i(W),Uu=n(W,"LI",{});var uIe=s(Uu);Qhe=n(uIe,"STRONG",{});var O6t=s(Qhe);u0o=r(O6t,"detr"),O6t.forEach(t),p0o=r(uIe," \u2014 "),VG=n(uIe,"A",{href:!0});var V6t=s(VG);_0o=r(V6t,"DetrFeatureExtractor"),V6t.forEach(t),b0o=r(uIe," (DETR model)"),uIe.forEach(t),v0o=i(W),Hu=n(W,"LI",{});var pIe=s(Hu);Whe=n(pIe,"STRONG",{});var X6t=s(Whe);F0o=r(X6t,"donut"),X6t.forEach(t),T0o=r(pIe," \u2014 "),XG=n(pIe,"A",{href:!0});var z6t=s(XG);M0o=r(z6t,"DonutFeatureExtractor"),z6t.forEach(t),E0o=r(pIe," (Donut model)"),pIe.forEach(t),C0o=i(W),Ju=n(W,"LI",{});var _Ie=s(Ju);Uhe=n(_Ie,"STRONG",{});var Q6t=s(Uhe);w0o=r(Q6t,"dpt"),Q6t.forEach(t),A0o=r(_Ie," \u2014 "),zG=n(_Ie,"A",{href:!0});var W6t=s(zG);L0o=r(W6t,"DPTFeatureExtractor"),W6t.forEach(t),y0o=r(_Ie," (DPT model)"),_Ie.forEach(t),x0o=i(W),Yu=n(W,"LI",{});var bIe=s(Yu);Hhe=n(bIe,"STRONG",{});var U6t=s(Hhe);$0o=r(U6t,"flava"),U6t.forEach(t),k0o=r(bIe," \u2014 "),QG=n(bIe,"A",{href:!0});var H6t=s(QG);S0o=r(H6t,"FlavaFeatureExtractor"),H6t.forEach(t),R0o=r(bIe," (FLAVA model)"),bIe.forEach(t),P0o=i(W),Ku=n(W,"LI",{});var vIe=s(Ku);Jhe=n(vIe,"STRONG",{});var J6t=s(Jhe);B0o=r(J6t,"glpn"),J6t.forEach(t),I0o=r(vIe," \u2014 "),WG=n(vIe,"A",{href:!0});var Y6t=s(WG);N0o=r(Y6t,"GLPNFeatureExtractor"),Y6t.forEach(t),q0o=r(vIe," (GLPN model)"),vIe.forEach(t),j0o=i(W),Zu=n(W,"LI",{});var FIe=s(Zu);Yhe=n(FIe,"STRONG",{});var K6t=s(Yhe);D0o=r(K6t,"groupvit"),K6t.forEach(t),G0o=r(FIe," \u2014 "),UG=n(FIe,"A",{href:!0});var Z6t=s(UG);O0o=r(Z6t,"CLIPFeatureExtractor"),Z6t.forEach(t),V0o=r(FIe," (GroupViT model)"),FIe.forEach(t),X0o=i(W),ep=n(W,"LI",{});var TIe=s(ep);Khe=n(TIe,"STRONG",{});var e7t=s(Khe);z0o=r(e7t,"hubert"),e7t.forEach(t),Q0o=r(TIe," \u2014 "),HG=n(TIe,"A",{href:!0});var o7t=s(HG);W0o=r(o7t,"Wav2Vec2FeatureExtractor"),o7t.forEach(t),U0o=r(TIe," (Hubert model)"),TIe.forEach(t),H0o=i(W),op=n(W,"LI",{});var MIe=s(op);Zhe=n(MIe,"STRONG",{});var r7t=s(Zhe);J0o=r(r7t,"imagegpt"),r7t.forEach(t),Y0o=r(MIe," \u2014 "),JG=n(MIe,"A",{href:!0});var t7t=s(JG);K0o=r(t7t,"ImageGPTFeatureExtractor"),t7t.forEach(t),Z0o=r(MIe," (ImageGPT model)"),MIe.forEach(t),ewo=i(W),rp=n(W,"LI",{});var EIe=s(rp);eue=n(EIe,"STRONG",{});var a7t=s(eue);owo=r(a7t,"layoutlmv2"),a7t.forEach(t),rwo=r(EIe," \u2014 "),YG=n(EIe,"A",{href:!0});var n7t=s(YG);two=r(n7t,"LayoutLMv2FeatureExtractor"),n7t.forEach(t),awo=r(EIe," (LayoutLMv2 model)"),EIe.forEach(t),nwo=i(W),tp=n(W,"LI",{});var CIe=s(tp);oue=n(CIe,"STRONG",{});var s7t=s(oue);swo=r(s7t,"layoutlmv3"),s7t.forEach(t),lwo=r(CIe," \u2014 "),KG=n(CIe,"A",{href:!0});var l7t=s(KG);iwo=r(l7t,"LayoutLMv3FeatureExtractor"),l7t.forEach(t),dwo=r(CIe," (LayoutLMv3 model)"),CIe.forEach(t),cwo=i(W),ap=n(W,"LI",{});var wIe=s(ap);rue=n(wIe,"STRONG",{});var i7t=s(rue);mwo=r(i7t,"levit"),i7t.forEach(t),fwo=r(wIe," \u2014 "),ZG=n(wIe,"A",{href:!0});var d7t=s(ZG);gwo=r(d7t,"LevitFeatureExtractor"),d7t.forEach(t),hwo=r(wIe," (LeViT model)"),wIe.forEach(t),uwo=i(W),np=n(W,"LI",{});var AIe=s(np);tue=n(AIe,"STRONG",{});var c7t=s(tue);pwo=r(c7t,"maskformer"),c7t.forEach(t),_wo=r(AIe," \u2014 "),eO=n(AIe,"A",{href:!0});var m7t=s(eO);bwo=r(m7t,"MaskFormerFeatureExtractor"),m7t.forEach(t),vwo=r(AIe," (MaskFormer model)"),AIe.forEach(t),Fwo=i(W),sp=n(W,"LI",{});var LIe=s(sp);aue=n(LIe,"STRONG",{});var f7t=s(aue);Two=r(f7t,"mctct"),f7t.forEach(t),Mwo=r(LIe," \u2014 "),oO=n(LIe,"A",{href:!0});var g7t=s(oO);Ewo=r(g7t,"MCTCTFeatureExtractor"),g7t.forEach(t),Cwo=r(LIe," (M-CTC-T model)"),LIe.forEach(t),wwo=i(W),lp=n(W,"LI",{});var yIe=s(lp);nue=n(yIe,"STRONG",{});var h7t=s(nue);Awo=r(h7t,"mobilevit"),h7t.forEach(t),Lwo=r(yIe," \u2014 "),rO=n(yIe,"A",{href:!0});var u7t=s(rO);ywo=r(u7t,"MobileViTFeatureExtractor"),u7t.forEach(t),xwo=r(yIe," (MobileViT model)"),yIe.forEach(t),$wo=i(W),ip=n(W,"LI",{});var xIe=s(ip);sue=n(xIe,"STRONG",{});var p7t=s(sue);kwo=r(p7t,"owlvit"),p7t.forEach(t),Swo=r(xIe," \u2014 "),tO=n(xIe,"A",{href:!0});var _7t=s(tO);Rwo=r(_7t,"OwlViTFeatureExtractor"),_7t.forEach(t),Pwo=r(xIe," (OWL-ViT model)"),xIe.forEach(t),Bwo=i(W),dp=n(W,"LI",{});var $Ie=s(dp);lue=n($Ie,"STRONG",{});var b7t=s(lue);Iwo=r(b7t,"perceiver"),b7t.forEach(t),Nwo=r($Ie," \u2014 "),aO=n($Ie,"A",{href:!0});var v7t=s(aO);qwo=r(v7t,"PerceiverFeatureExtractor"),v7t.forEach(t),jwo=r($Ie," (Perceiver model)"),$Ie.forEach(t),Dwo=i(W),cp=n(W,"LI",{});var kIe=s(cp);iue=n(kIe,"STRONG",{});var F7t=s(iue);Gwo=r(F7t,"poolformer"),F7t.forEach(t),Owo=r(kIe," \u2014 "),nO=n(kIe,"A",{href:!0});var T7t=s(nO);Vwo=r(T7t,"PoolFormerFeatureExtractor"),T7t.forEach(t),Xwo=r(kIe," (PoolFormer model)"),kIe.forEach(t),zwo=i(W),mp=n(W,"LI",{});var SIe=s(mp);due=n(SIe,"STRONG",{});var M7t=s(due);Qwo=r(M7t,"regnet"),M7t.forEach(t),Wwo=r(SIe," \u2014 "),sO=n(SIe,"A",{href:!0});var E7t=s(sO);Uwo=r(E7t,"ConvNextFeatureExtractor"),E7t.forEach(t),Hwo=r(SIe," (RegNet model)"),SIe.forEach(t),Jwo=i(W),fp=n(W,"LI",{});var RIe=s(fp);cue=n(RIe,"STRONG",{});var C7t=s(cue);Ywo=r(C7t,"resnet"),C7t.forEach(t),Kwo=r(RIe," \u2014 "),lO=n(RIe,"A",{href:!0});var w7t=s(lO);Zwo=r(w7t,"ConvNextFeatureExtractor"),w7t.forEach(t),eAo=r(RIe," (ResNet model)"),RIe.forEach(t),oAo=i(W),gp=n(W,"LI",{});var PIe=s(gp);mue=n(PIe,"STRONG",{});var A7t=s(mue);rAo=r(A7t,"segformer"),A7t.forEach(t),tAo=r(PIe," \u2014 "),iO=n(PIe,"A",{href:!0});var L7t=s(iO);aAo=r(L7t,"SegformerFeatureExtractor"),L7t.forEach(t),nAo=r(PIe," (SegFormer model)"),PIe.forEach(t),sAo=i(W),hp=n(W,"LI",{});var BIe=s(hp);fue=n(BIe,"STRONG",{});var y7t=s(fue);lAo=r(y7t,"speech_to_text"),y7t.forEach(t),iAo=r(BIe," \u2014 "),dO=n(BIe,"A",{href:!0});var x7t=s(dO);dAo=r(x7t,"Speech2TextFeatureExtractor"),x7t.forEach(t),cAo=r(BIe," (Speech2Text model)"),BIe.forEach(t),mAo=i(W),up=n(W,"LI",{});var IIe=s(up);gue=n(IIe,"STRONG",{});var $7t=s(gue);fAo=r($7t,"swin"),$7t.forEach(t),gAo=r(IIe," \u2014 "),cO=n(IIe,"A",{href:!0});var k7t=s(cO);hAo=r(k7t,"ViTFeatureExtractor"),k7t.forEach(t),uAo=r(IIe," (Swin Transformer model)"),IIe.forEach(t),pAo=i(W),pp=n(W,"LI",{});var NIe=s(pp);hue=n(NIe,"STRONG",{});var S7t=s(hue);_Ao=r(S7t,"swinv2"),S7t.forEach(t),bAo=r(NIe," \u2014 "),mO=n(NIe,"A",{href:!0});var R7t=s(mO);vAo=r(R7t,"ViTFeatureExtractor"),R7t.forEach(t),FAo=r(NIe," (Swin Transformer V2 model)"),NIe.forEach(t),TAo=i(W),_p=n(W,"LI",{});var qIe=s(_p);uue=n(qIe,"STRONG",{});var P7t=s(uue);MAo=r(P7t,"van"),P7t.forEach(t),EAo=r(qIe," \u2014 "),fO=n(qIe,"A",{href:!0});var B7t=s(fO);CAo=r(B7t,"ConvNextFeatureExtractor"),B7t.forEach(t),wAo=r(qIe," (VAN model)"),qIe.forEach(t),AAo=i(W),bp=n(W,"LI",{});var jIe=s(bp);pue=n(jIe,"STRONG",{});var I7t=s(pue);LAo=r(I7t,"videomae"),I7t.forEach(t),yAo=r(jIe," \u2014 "),gO=n(jIe,"A",{href:!0});var N7t=s(gO);xAo=r(N7t,"VideoMAEFeatureExtractor"),N7t.forEach(t),$Ao=r(jIe," (VideoMAE model)"),jIe.forEach(t),kAo=i(W),vp=n(W,"LI",{});var DIe=s(vp);_ue=n(DIe,"STRONG",{});var q7t=s(_ue);SAo=r(q7t,"vilt"),q7t.forEach(t),RAo=r(DIe," \u2014 "),hO=n(DIe,"A",{href:!0});var j7t=s(hO);PAo=r(j7t,"ViltFeatureExtractor"),j7t.forEach(t),BAo=r(DIe," (ViLT model)"),DIe.forEach(t),IAo=i(W),Fp=n(W,"LI",{});var GIe=s(Fp);bue=n(GIe,"STRONG",{});var D7t=s(bue);NAo=r(D7t,"vit"),D7t.forEach(t),qAo=r(GIe," \u2014 "),uO=n(GIe,"A",{href:!0});var G7t=s(uO);jAo=r(G7t,"ViTFeatureExtractor"),G7t.forEach(t),DAo=r(GIe," (ViT model)"),GIe.forEach(t),GAo=i(W),Tp=n(W,"LI",{});var OIe=s(Tp);vue=n(OIe,"STRONG",{});var O7t=s(vue);OAo=r(O7t,"vit_mae"),O7t.forEach(t),VAo=r(OIe," \u2014 "),pO=n(OIe,"A",{href:!0});var V7t=s(pO);XAo=r(V7t,"ViTFeatureExtractor"),V7t.forEach(t),zAo=r(OIe," (ViTMAE model)"),OIe.forEach(t),QAo=i(W),Mp=n(W,"LI",{});var VIe=s(Mp);Fue=n(VIe,"STRONG",{});var X7t=s(Fue);WAo=r(X7t,"vit_msn"),X7t.forEach(t),UAo=r(VIe," \u2014 "),_O=n(VIe,"A",{href:!0});var z7t=s(_O);HAo=r(z7t,"ViTFeatureExtractor"),z7t.forEach(t),JAo=r(VIe," (ViTMSN model)"),VIe.forEach(t),YAo=i(W),Ep=n(W,"LI",{});var XIe=s(Ep);Tue=n(XIe,"STRONG",{});var Q7t=s(Tue);KAo=r(Q7t,"wav2vec2"),Q7t.forEach(t),ZAo=r(XIe," \u2014 "),bO=n(XIe,"A",{href:!0});var W7t=s(bO);e6o=r(W7t,"Wav2Vec2FeatureExtractor"),W7t.forEach(t),o6o=r(XIe," (Wav2Vec2 model)"),XIe.forEach(t),r6o=i(W),Cp=n(W,"LI",{});var zIe=s(Cp);Mue=n(zIe,"STRONG",{});var U7t=s(Mue);t6o=r(U7t,"wav2vec2-conformer"),U7t.forEach(t),a6o=r(zIe," \u2014 "),vO=n(zIe,"A",{href:!0});var H7t=s(vO);n6o=r(H7t,"Wav2Vec2FeatureExtractor"),H7t.forEach(t),s6o=r(zIe," (Wav2Vec2-Conformer model)"),zIe.forEach(t),l6o=i(W),wp=n(W,"LI",{});var QIe=s(wp);Eue=n(QIe,"STRONG",{});var J7t=s(Eue);i6o=r(J7t,"xclip"),J7t.forEach(t),d6o=r(QIe," \u2014 "),FO=n(QIe,"A",{href:!0});var Y7t=s(FO);c6o=r(Y7t,"CLIPFeatureExtractor"),Y7t.forEach(t),m6o=r(QIe," (X-CLIP model)"),QIe.forEach(t),f6o=i(W),Ap=n(W,"LI",{});var WIe=s(Ap);Cue=n(WIe,"STRONG",{});var K7t=s(Cue);g6o=r(K7t,"yolos"),K7t.forEach(t),h6o=r(WIe," \u2014 "),TO=n(WIe,"A",{href:!0});var Z7t=s(TO);u6o=r(Z7t,"YolosFeatureExtractor"),Z7t.forEach(t),p6o=r(WIe," (YOLOS model)"),WIe.forEach(t),W.forEach(t),_6o=i(ba),T(Lp.$$.fragment,ba),b6o=i(ba),T(yp.$$.fragment,ba),ba.forEach(t),v6o=i(Cl),xp=n(Cl,"DIV",{class:!0});var ero=s(xp);T(_x.$$.fragment,ero),F6o=i(ero),wue=n(ero,"P",{});var eLt=s(wue);T6o=r(eLt,"Register a new feature extractor for this class."),eLt.forEach(t),ero.forEach(t),Cl.forEach(t),VZe=i(m),ud=n(m,"H2",{class:!0});var oro=s(ud);$p=n(oro,"A",{id:!0,class:!0,href:!0});var oLt=s($p);Aue=n(oLt,"SPAN",{});var rLt=s(Aue);T(bx.$$.fragment,rLt),rLt.forEach(t),oLt.forEach(t),M6o=i(oro),Lue=n(oro,"SPAN",{});var tLt=s(Lue);E6o=r(tLt,"AutoProcessor"),tLt.forEach(t),oro.forEach(t),XZe=i(m),Ro=n(m,"DIV",{class:!0});var wl=s(Ro);T(vx.$$.fragment,wl),C6o=i(wl),Fx=n(wl,"P",{});var rro=s(Fx);w6o=r(rro,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MO=n(rro,"A",{href:!0});var aLt=s(MO);A6o=r(aLt,"AutoProcessor.from_pretrained()"),aLt.forEach(t),L6o=r(rro," class method."),rro.forEach(t),y6o=i(wl),Tx=n(wl,"P",{});var tro=s(Tx);x6o=r(tro,"This class cannot be instantiated directly using "),yue=n(tro,"CODE",{});var nLt=s(yue);$6o=r(nLt,"__init__()"),nLt.forEach(t),k6o=r(tro," (throws an error)."),tro.forEach(t),S6o=i(wl),Ke=n(wl,"DIV",{class:!0});var va=s(Ke);T(Mx.$$.fragment,va),R6o=i(va),xue=n(va,"P",{});var sLt=s(xue);P6o=r(sLt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),sLt.forEach(t),B6o=i(va),pd=n(va,"P",{});var Wle=s(pd);I6o=r(Wle,"The processor class to instantiate is selected based on the "),$ue=n(Wle,"CODE",{});var lLt=s($ue);N6o=r(lLt,"model_type"),lLt.forEach(t),q6o=r(Wle,` property of the config object (either
passed as an argument or loaded from `),kue=n(Wle,"CODE",{});var iLt=s(kue);j6o=r(iLt,"pretrained_model_name_or_path"),iLt.forEach(t),D6o=r(Wle," if possible):"),Wle.forEach(t),G6o=i(va),le=n(va,"UL",{});var me=s(le);kp=n(me,"LI",{});var UIe=s(kp);Sue=n(UIe,"STRONG",{});var dLt=s(Sue);O6o=r(dLt,"clip"),dLt.forEach(t),V6o=r(UIe," \u2014 "),EO=n(UIe,"A",{href:!0});var cLt=s(EO);X6o=r(cLt,"CLIPProcessor"),cLt.forEach(t),z6o=r(UIe," (CLIP model)"),UIe.forEach(t),Q6o=i(me),Sp=n(me,"LI",{});var HIe=s(Sp);Rue=n(HIe,"STRONG",{});var mLt=s(Rue);W6o=r(mLt,"donut"),mLt.forEach(t),U6o=r(HIe," \u2014 "),CO=n(HIe,"A",{href:!0});var fLt=s(CO);H6o=r(fLt,"DonutProcessor"),fLt.forEach(t),J6o=r(HIe," (Donut model)"),HIe.forEach(t),Y6o=i(me),Rp=n(me,"LI",{});var JIe=s(Rp);Pue=n(JIe,"STRONG",{});var gLt=s(Pue);K6o=r(gLt,"flava"),gLt.forEach(t),Z6o=r(JIe," \u2014 "),wO=n(JIe,"A",{href:!0});var hLt=s(wO);e7o=r(hLt,"FlavaProcessor"),hLt.forEach(t),o7o=r(JIe," (FLAVA model)"),JIe.forEach(t),r7o=i(me),Pp=n(me,"LI",{});var YIe=s(Pp);Bue=n(YIe,"STRONG",{});var uLt=s(Bue);t7o=r(uLt,"groupvit"),uLt.forEach(t),a7o=r(YIe," \u2014 "),AO=n(YIe,"A",{href:!0});var pLt=s(AO);n7o=r(pLt,"CLIPProcessor"),pLt.forEach(t),s7o=r(YIe," (GroupViT model)"),YIe.forEach(t),l7o=i(me),Bp=n(me,"LI",{});var KIe=s(Bp);Iue=n(KIe,"STRONG",{});var _Lt=s(Iue);i7o=r(_Lt,"layoutlmv2"),_Lt.forEach(t),d7o=r(KIe," \u2014 "),LO=n(KIe,"A",{href:!0});var bLt=s(LO);c7o=r(bLt,"LayoutLMv2Processor"),bLt.forEach(t),m7o=r(KIe," (LayoutLMv2 model)"),KIe.forEach(t),f7o=i(me),Ip=n(me,"LI",{});var ZIe=s(Ip);Nue=n(ZIe,"STRONG",{});var vLt=s(Nue);g7o=r(vLt,"layoutlmv3"),vLt.forEach(t),h7o=r(ZIe," \u2014 "),yO=n(ZIe,"A",{href:!0});var FLt=s(yO);u7o=r(FLt,"LayoutLMv3Processor"),FLt.forEach(t),p7o=r(ZIe," (LayoutLMv3 model)"),ZIe.forEach(t),_7o=i(me),Np=n(me,"LI",{});var eNe=s(Np);que=n(eNe,"STRONG",{});var TLt=s(que);b7o=r(TLt,"layoutxlm"),TLt.forEach(t),v7o=r(eNe," \u2014 "),xO=n(eNe,"A",{href:!0});var MLt=s(xO);F7o=r(MLt,"LayoutXLMProcessor"),MLt.forEach(t),T7o=r(eNe," (LayoutXLM model)"),eNe.forEach(t),M7o=i(me),qp=n(me,"LI",{});var oNe=s(qp);jue=n(oNe,"STRONG",{});var ELt=s(jue);E7o=r(ELt,"markuplm"),ELt.forEach(t),C7o=r(oNe," \u2014 "),$O=n(oNe,"A",{href:!0});var CLt=s($O);w7o=r(CLt,"MarkupLMProcessor"),CLt.forEach(t),A7o=r(oNe," (MarkupLM model)"),oNe.forEach(t),L7o=i(me),jp=n(me,"LI",{});var rNe=s(jp);Due=n(rNe,"STRONG",{});var wLt=s(Due);y7o=r(wLt,"owlvit"),wLt.forEach(t),x7o=r(rNe," \u2014 "),kO=n(rNe,"A",{href:!0});var ALt=s(kO);$7o=r(ALt,"OwlViTProcessor"),ALt.forEach(t),k7o=r(rNe," (OWL-ViT model)"),rNe.forEach(t),S7o=i(me),Dp=n(me,"LI",{});var tNe=s(Dp);Gue=n(tNe,"STRONG",{});var LLt=s(Gue);R7o=r(LLt,"sew"),LLt.forEach(t),P7o=r(tNe," \u2014 "),SO=n(tNe,"A",{href:!0});var yLt=s(SO);B7o=r(yLt,"Wav2Vec2Processor"),yLt.forEach(t),I7o=r(tNe," (SEW model)"),tNe.forEach(t),N7o=i(me),Gp=n(me,"LI",{});var aNe=s(Gp);Oue=n(aNe,"STRONG",{});var xLt=s(Oue);q7o=r(xLt,"sew-d"),xLt.forEach(t),j7o=r(aNe," \u2014 "),RO=n(aNe,"A",{href:!0});var $Lt=s(RO);D7o=r($Lt,"Wav2Vec2Processor"),$Lt.forEach(t),G7o=r(aNe," (SEW-D model)"),aNe.forEach(t),O7o=i(me),Op=n(me,"LI",{});var nNe=s(Op);Vue=n(nNe,"STRONG",{});var kLt=s(Vue);V7o=r(kLt,"speech_to_text"),kLt.forEach(t),X7o=r(nNe," \u2014 "),PO=n(nNe,"A",{href:!0});var SLt=s(PO);z7o=r(SLt,"Speech2TextProcessor"),SLt.forEach(t),Q7o=r(nNe," (Speech2Text model)"),nNe.forEach(t),W7o=i(me),Vp=n(me,"LI",{});var sNe=s(Vp);Xue=n(sNe,"STRONG",{});var RLt=s(Xue);U7o=r(RLt,"speech_to_text_2"),RLt.forEach(t),H7o=r(sNe," \u2014 "),BO=n(sNe,"A",{href:!0});var PLt=s(BO);J7o=r(PLt,"Speech2Text2Processor"),PLt.forEach(t),Y7o=r(sNe," (Speech2Text2 model)"),sNe.forEach(t),K7o=i(me),Xp=n(me,"LI",{});var lNe=s(Xp);zue=n(lNe,"STRONG",{});var BLt=s(zue);Z7o=r(BLt,"trocr"),BLt.forEach(t),eLo=r(lNe," \u2014 "),IO=n(lNe,"A",{href:!0});var ILt=s(IO);oLo=r(ILt,"TrOCRProcessor"),ILt.forEach(t),rLo=r(lNe," (TrOCR model)"),lNe.forEach(t),tLo=i(me),zp=n(me,"LI",{});var iNe=s(zp);Que=n(iNe,"STRONG",{});var NLt=s(Que);aLo=r(NLt,"unispeech"),NLt.forEach(t),nLo=r(iNe," \u2014 "),NO=n(iNe,"A",{href:!0});var qLt=s(NO);sLo=r(qLt,"Wav2Vec2Processor"),qLt.forEach(t),lLo=r(iNe," (UniSpeech model)"),iNe.forEach(t),iLo=i(me),Qp=n(me,"LI",{});var dNe=s(Qp);Wue=n(dNe,"STRONG",{});var jLt=s(Wue);dLo=r(jLt,"unispeech-sat"),jLt.forEach(t),cLo=r(dNe," \u2014 "),qO=n(dNe,"A",{href:!0});var DLt=s(qO);mLo=r(DLt,"Wav2Vec2Processor"),DLt.forEach(t),fLo=r(dNe," (UniSpeechSat model)"),dNe.forEach(t),gLo=i(me),Wp=n(me,"LI",{});var cNe=s(Wp);Uue=n(cNe,"STRONG",{});var GLt=s(Uue);hLo=r(GLt,"vilt"),GLt.forEach(t),uLo=r(cNe," \u2014 "),jO=n(cNe,"A",{href:!0});var OLt=s(jO);pLo=r(OLt,"ViltProcessor"),OLt.forEach(t),_Lo=r(cNe," (ViLT model)"),cNe.forEach(t),bLo=i(me),Up=n(me,"LI",{});var mNe=s(Up);Hue=n(mNe,"STRONG",{});var VLt=s(Hue);vLo=r(VLt,"vision-text-dual-encoder"),VLt.forEach(t),FLo=r(mNe," \u2014 "),DO=n(mNe,"A",{href:!0});var XLt=s(DO);TLo=r(XLt,"VisionTextDualEncoderProcessor"),XLt.forEach(t),MLo=r(mNe," (VisionTextDualEncoder model)"),mNe.forEach(t),ELo=i(me),Hp=n(me,"LI",{});var fNe=s(Hp);Jue=n(fNe,"STRONG",{});var zLt=s(Jue);CLo=r(zLt,"wav2vec2"),zLt.forEach(t),wLo=r(fNe," \u2014 "),GO=n(fNe,"A",{href:!0});var QLt=s(GO);ALo=r(QLt,"Wav2Vec2Processor"),QLt.forEach(t),LLo=r(fNe," (Wav2Vec2 model)"),fNe.forEach(t),yLo=i(me),Jp=n(me,"LI",{});var gNe=s(Jp);Yue=n(gNe,"STRONG",{});var WLt=s(Yue);xLo=r(WLt,"wav2vec2-conformer"),WLt.forEach(t),$Lo=r(gNe," \u2014 "),OO=n(gNe,"A",{href:!0});var ULt=s(OO);kLo=r(ULt,"Wav2Vec2Processor"),ULt.forEach(t),SLo=r(gNe," (Wav2Vec2-Conformer model)"),gNe.forEach(t),RLo=i(me),Yp=n(me,"LI",{});var hNe=s(Yp);Kue=n(hNe,"STRONG",{});var HLt=s(Kue);PLo=r(HLt,"wavlm"),HLt.forEach(t),BLo=r(hNe," \u2014 "),VO=n(hNe,"A",{href:!0});var JLt=s(VO);ILo=r(JLt,"Wav2Vec2Processor"),JLt.forEach(t),NLo=r(hNe," (WavLM model)"),hNe.forEach(t),qLo=i(me),Kp=n(me,"LI",{});var uNe=s(Kp);Zue=n(uNe,"STRONG",{});var YLt=s(Zue);jLo=r(YLt,"xclip"),YLt.forEach(t),DLo=r(uNe," \u2014 "),XO=n(uNe,"A",{href:!0});var KLt=s(XO);GLo=r(KLt,"CLIPProcessor"),KLt.forEach(t),OLo=r(uNe," (X-CLIP model)"),uNe.forEach(t),me.forEach(t),VLo=i(va),T(Zp.$$.fragment,va),XLo=i(va),T(e_.$$.fragment,va),va.forEach(t),zLo=i(wl),o_=n(wl,"DIV",{class:!0});var aro=s(o_);T(Ex.$$.fragment,aro),QLo=i(aro),epe=n(aro,"P",{});var ZLt=s(epe);WLo=r(ZLt,"Register a new processor for this class."),ZLt.forEach(t),aro.forEach(t),wl.forEach(t),zZe=i(m),_d=n(m,"H2",{class:!0});var nro=s(_d);r_=n(nro,"A",{id:!0,class:!0,href:!0});var eyt=s(r_);ope=n(eyt,"SPAN",{});var oyt=s(ope);T(Cx.$$.fragment,oyt),oyt.forEach(t),eyt.forEach(t),ULo=i(nro),rpe=n(nro,"SPAN",{});var ryt=s(rpe);HLo=r(ryt,"AutoModel"),ryt.forEach(t),nro.forEach(t),QZe=i(m),Po=n(m,"DIV",{class:!0});var Al=s(Po);T(wx.$$.fragment,Al),JLo=i(Al),bd=n(Al,"P",{});var Ule=s(bd);YLo=r(Ule,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zO=n(Ule,"A",{href:!0});var tyt=s(zO);KLo=r(tyt,"from_pretrained()"),tyt.forEach(t),ZLo=r(Ule," class method or the "),QO=n(Ule,"A",{href:!0});var ayt=s(QO);eyo=r(ayt,"from_config()"),ayt.forEach(t),oyo=r(Ule,` class
method.`),Ule.forEach(t),ryo=i(Al),Ax=n(Al,"P",{});var sro=s(Ax);tyo=r(sro,"This class cannot be instantiated directly using "),tpe=n(sro,"CODE",{});var nyt=s(tpe);ayo=r(nyt,"__init__()"),nyt.forEach(t),nyo=r(sro," (throws an error)."),sro.forEach(t),syo=i(Al),_t=n(Al,"DIV",{class:!0});var Qy=s(_t);T(Lx.$$.fragment,Qy),lyo=i(Qy),ape=n(Qy,"P",{});var syt=s(ape);iyo=r(syt,"Instantiates one of the base model classes of the library from a configuration."),syt.forEach(t),dyo=i(Qy),vd=n(Qy,"P",{});var Hle=s(vd);cyo=r(Hle,`Note:
Loading a model from its configuration file does `),npe=n(Hle,"STRONG",{});var lyt=s(npe);myo=r(lyt,"not"),lyt.forEach(t),fyo=r(Hle,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(Hle,"A",{href:!0});var iyt=s(WO);gyo=r(iyt,"from_pretrained()"),iyt.forEach(t),hyo=r(Hle," to load the model weights."),Hle.forEach(t),uyo=i(Qy),T(t_.$$.fragment,Qy),Qy.forEach(t),pyo=i(Al),Ze=n(Al,"DIV",{class:!0});var Fa=s(Ze);T(yx.$$.fragment,Fa),_yo=i(Fa),spe=n(Fa,"P",{});var dyt=s(spe);byo=r(dyt,"Instantiate one of the base model classes of the library from a pretrained model."),dyt.forEach(t),vyo=i(Fa),Ja=n(Fa,"P",{});var Wy=s(Ja);Fyo=r(Wy,"The model class to instantiate is selected based on the "),lpe=n(Wy,"CODE",{});var cyt=s(lpe);Tyo=r(cyt,"model_type"),cyt.forEach(t),Myo=r(Wy,` property of the config object (either
passed as an argument or loaded from `),ipe=n(Wy,"CODE",{});var myt=s(ipe);Eyo=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),Cyo=r(Wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(Wy,"CODE",{});var fyt=s(dpe);wyo=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),Ayo=r(Wy,":"),Wy.forEach(t),Lyo=i(Fa),y=n(Fa,"UL",{});var x=s(y);a_=n(x,"LI",{});var pNe=s(a_);cpe=n(pNe,"STRONG",{});var gyt=s(cpe);yyo=r(gyt,"albert"),gyt.forEach(t),xyo=r(pNe," \u2014 "),UO=n(pNe,"A",{href:!0});var hyt=s(UO);$yo=r(hyt,"AlbertModel"),hyt.forEach(t),kyo=r(pNe," (ALBERT model)"),pNe.forEach(t),Syo=i(x),n_=n(x,"LI",{});var _Ne=s(n_);mpe=n(_Ne,"STRONG",{});var uyt=s(mpe);Ryo=r(uyt,"bart"),uyt.forEach(t),Pyo=r(_Ne," \u2014 "),HO=n(_Ne,"A",{href:!0});var pyt=s(HO);Byo=r(pyt,"BartModel"),pyt.forEach(t),Iyo=r(_Ne," (BART model)"),_Ne.forEach(t),Nyo=i(x),s_=n(x,"LI",{});var bNe=s(s_);fpe=n(bNe,"STRONG",{});var _yt=s(fpe);qyo=r(_yt,"beit"),_yt.forEach(t),jyo=r(bNe," \u2014 "),JO=n(bNe,"A",{href:!0});var byt=s(JO);Dyo=r(byt,"BeitModel"),byt.forEach(t),Gyo=r(bNe," (BEiT model)"),bNe.forEach(t),Oyo=i(x),l_=n(x,"LI",{});var vNe=s(l_);gpe=n(vNe,"STRONG",{});var vyt=s(gpe);Vyo=r(vyt,"bert"),vyt.forEach(t),Xyo=r(vNe," \u2014 "),YO=n(vNe,"A",{href:!0});var Fyt=s(YO);zyo=r(Fyt,"BertModel"),Fyt.forEach(t),Qyo=r(vNe," (BERT model)"),vNe.forEach(t),Wyo=i(x),i_=n(x,"LI",{});var FNe=s(i_);hpe=n(FNe,"STRONG",{});var Tyt=s(hpe);Uyo=r(Tyt,"bert-generation"),Tyt.forEach(t),Hyo=r(FNe," \u2014 "),KO=n(FNe,"A",{href:!0});var Myt=s(KO);Jyo=r(Myt,"BertGenerationEncoder"),Myt.forEach(t),Yyo=r(FNe," (Bert Generation model)"),FNe.forEach(t),Kyo=i(x),d_=n(x,"LI",{});var TNe=s(d_);upe=n(TNe,"STRONG",{});var Eyt=s(upe);Zyo=r(Eyt,"big_bird"),Eyt.forEach(t),e8o=r(TNe," \u2014 "),ZO=n(TNe,"A",{href:!0});var Cyt=s(ZO);o8o=r(Cyt,"BigBirdModel"),Cyt.forEach(t),r8o=r(TNe," (BigBird model)"),TNe.forEach(t),t8o=i(x),c_=n(x,"LI",{});var MNe=s(c_);ppe=n(MNe,"STRONG",{});var wyt=s(ppe);a8o=r(wyt,"bigbird_pegasus"),wyt.forEach(t),n8o=r(MNe," \u2014 "),eV=n(MNe,"A",{href:!0});var Ayt=s(eV);s8o=r(Ayt,"BigBirdPegasusModel"),Ayt.forEach(t),l8o=r(MNe," (BigBird-Pegasus model)"),MNe.forEach(t),i8o=i(x),m_=n(x,"LI",{});var ENe=s(m_);_pe=n(ENe,"STRONG",{});var Lyt=s(_pe);d8o=r(Lyt,"blenderbot"),Lyt.forEach(t),c8o=r(ENe," \u2014 "),oV=n(ENe,"A",{href:!0});var yyt=s(oV);m8o=r(yyt,"BlenderbotModel"),yyt.forEach(t),f8o=r(ENe," (Blenderbot model)"),ENe.forEach(t),g8o=i(x),f_=n(x,"LI",{});var CNe=s(f_);bpe=n(CNe,"STRONG",{});var xyt=s(bpe);h8o=r(xyt,"blenderbot-small"),xyt.forEach(t),u8o=r(CNe," \u2014 "),rV=n(CNe,"A",{href:!0});var $yt=s(rV);p8o=r($yt,"BlenderbotSmallModel"),$yt.forEach(t),_8o=r(CNe," (BlenderbotSmall model)"),CNe.forEach(t),b8o=i(x),g_=n(x,"LI",{});var wNe=s(g_);vpe=n(wNe,"STRONG",{});var kyt=s(vpe);v8o=r(kyt,"bloom"),kyt.forEach(t),F8o=r(wNe," \u2014 "),tV=n(wNe,"A",{href:!0});var Syt=s(tV);T8o=r(Syt,"BloomModel"),Syt.forEach(t),M8o=r(wNe," (BLOOM model)"),wNe.forEach(t),E8o=i(x),h_=n(x,"LI",{});var ANe=s(h_);Fpe=n(ANe,"STRONG",{});var Ryt=s(Fpe);C8o=r(Ryt,"camembert"),Ryt.forEach(t),w8o=r(ANe," \u2014 "),aV=n(ANe,"A",{href:!0});var Pyt=s(aV);A8o=r(Pyt,"CamembertModel"),Pyt.forEach(t),L8o=r(ANe," (CamemBERT model)"),ANe.forEach(t),y8o=i(x),u_=n(x,"LI",{});var LNe=s(u_);Tpe=n(LNe,"STRONG",{});var Byt=s(Tpe);x8o=r(Byt,"canine"),Byt.forEach(t),$8o=r(LNe," \u2014 "),nV=n(LNe,"A",{href:!0});var Iyt=s(nV);k8o=r(Iyt,"CanineModel"),Iyt.forEach(t),S8o=r(LNe," (CANINE model)"),LNe.forEach(t),R8o=i(x),p_=n(x,"LI",{});var yNe=s(p_);Mpe=n(yNe,"STRONG",{});var Nyt=s(Mpe);P8o=r(Nyt,"clip"),Nyt.forEach(t),B8o=r(yNe," \u2014 "),sV=n(yNe,"A",{href:!0});var qyt=s(sV);I8o=r(qyt,"CLIPModel"),qyt.forEach(t),N8o=r(yNe," (CLIP model)"),yNe.forEach(t),q8o=i(x),__=n(x,"LI",{});var xNe=s(__);Epe=n(xNe,"STRONG",{});var jyt=s(Epe);j8o=r(jyt,"codegen"),jyt.forEach(t),D8o=r(xNe," \u2014 "),lV=n(xNe,"A",{href:!0});var Dyt=s(lV);G8o=r(Dyt,"CodeGenModel"),Dyt.forEach(t),O8o=r(xNe," (CodeGen model)"),xNe.forEach(t),V8o=i(x),b_=n(x,"LI",{});var $Ne=s(b_);Cpe=n($Ne,"STRONG",{});var Gyt=s(Cpe);X8o=r(Gyt,"conditional_detr"),Gyt.forEach(t),z8o=r($Ne," \u2014 "),iV=n($Ne,"A",{href:!0});var Oyt=s(iV);Q8o=r(Oyt,"ConditionalDetrModel"),Oyt.forEach(t),W8o=r($Ne," (Conditional DETR model)"),$Ne.forEach(t),U8o=i(x),v_=n(x,"LI",{});var kNe=s(v_);wpe=n(kNe,"STRONG",{});var Vyt=s(wpe);H8o=r(Vyt,"convbert"),Vyt.forEach(t),J8o=r(kNe," \u2014 "),dV=n(kNe,"A",{href:!0});var Xyt=s(dV);Y8o=r(Xyt,"ConvBertModel"),Xyt.forEach(t),K8o=r(kNe," (ConvBERT model)"),kNe.forEach(t),Z8o=i(x),F_=n(x,"LI",{});var SNe=s(F_);Ape=n(SNe,"STRONG",{});var zyt=s(Ape);e9o=r(zyt,"convnext"),zyt.forEach(t),o9o=r(SNe," \u2014 "),cV=n(SNe,"A",{href:!0});var Qyt=s(cV);r9o=r(Qyt,"ConvNextModel"),Qyt.forEach(t),t9o=r(SNe," (ConvNeXT model)"),SNe.forEach(t),a9o=i(x),T_=n(x,"LI",{});var RNe=s(T_);Lpe=n(RNe,"STRONG",{});var Wyt=s(Lpe);n9o=r(Wyt,"ctrl"),Wyt.forEach(t),s9o=r(RNe," \u2014 "),mV=n(RNe,"A",{href:!0});var Uyt=s(mV);l9o=r(Uyt,"CTRLModel"),Uyt.forEach(t),i9o=r(RNe," (CTRL model)"),RNe.forEach(t),d9o=i(x),M_=n(x,"LI",{});var PNe=s(M_);ype=n(PNe,"STRONG",{});var Hyt=s(ype);c9o=r(Hyt,"cvt"),Hyt.forEach(t),m9o=r(PNe," \u2014 "),fV=n(PNe,"A",{href:!0});var Jyt=s(fV);f9o=r(Jyt,"CvtModel"),Jyt.forEach(t),g9o=r(PNe," (CvT model)"),PNe.forEach(t),h9o=i(x),E_=n(x,"LI",{});var BNe=s(E_);xpe=n(BNe,"STRONG",{});var Yyt=s(xpe);u9o=r(Yyt,"data2vec-audio"),Yyt.forEach(t),p9o=r(BNe," \u2014 "),gV=n(BNe,"A",{href:!0});var Kyt=s(gV);_9o=r(Kyt,"Data2VecAudioModel"),Kyt.forEach(t),b9o=r(BNe," (Data2VecAudio model)"),BNe.forEach(t),v9o=i(x),C_=n(x,"LI",{});var INe=s(C_);$pe=n(INe,"STRONG",{});var Zyt=s($pe);F9o=r(Zyt,"data2vec-text"),Zyt.forEach(t),T9o=r(INe," \u2014 "),hV=n(INe,"A",{href:!0});var e8t=s(hV);M9o=r(e8t,"Data2VecTextModel"),e8t.forEach(t),E9o=r(INe," (Data2VecText model)"),INe.forEach(t),C9o=i(x),w_=n(x,"LI",{});var NNe=s(w_);kpe=n(NNe,"STRONG",{});var o8t=s(kpe);w9o=r(o8t,"data2vec-vision"),o8t.forEach(t),A9o=r(NNe," \u2014 "),uV=n(NNe,"A",{href:!0});var r8t=s(uV);L9o=r(r8t,"Data2VecVisionModel"),r8t.forEach(t),y9o=r(NNe," (Data2VecVision model)"),NNe.forEach(t),x9o=i(x),A_=n(x,"LI",{});var qNe=s(A_);Spe=n(qNe,"STRONG",{});var t8t=s(Spe);$9o=r(t8t,"deberta"),t8t.forEach(t),k9o=r(qNe," \u2014 "),pV=n(qNe,"A",{href:!0});var a8t=s(pV);S9o=r(a8t,"DebertaModel"),a8t.forEach(t),R9o=r(qNe," (DeBERTa model)"),qNe.forEach(t),P9o=i(x),L_=n(x,"LI",{});var jNe=s(L_);Rpe=n(jNe,"STRONG",{});var n8t=s(Rpe);B9o=r(n8t,"deberta-v2"),n8t.forEach(t),I9o=r(jNe," \u2014 "),_V=n(jNe,"A",{href:!0});var s8t=s(_V);N9o=r(s8t,"DebertaV2Model"),s8t.forEach(t),q9o=r(jNe," (DeBERTa-v2 model)"),jNe.forEach(t),j9o=i(x),y_=n(x,"LI",{});var DNe=s(y_);Ppe=n(DNe,"STRONG",{});var l8t=s(Ppe);D9o=r(l8t,"decision_transformer"),l8t.forEach(t),G9o=r(DNe," \u2014 "),bV=n(DNe,"A",{href:!0});var i8t=s(bV);O9o=r(i8t,"DecisionTransformerModel"),i8t.forEach(t),V9o=r(DNe," (Decision Transformer model)"),DNe.forEach(t),X9o=i(x),x_=n(x,"LI",{});var GNe=s(x_);Bpe=n(GNe,"STRONG",{});var d8t=s(Bpe);z9o=r(d8t,"deformable_detr"),d8t.forEach(t),Q9o=r(GNe," \u2014 "),vV=n(GNe,"A",{href:!0});var c8t=s(vV);W9o=r(c8t,"DeformableDetrModel"),c8t.forEach(t),U9o=r(GNe," (Deformable DETR model)"),GNe.forEach(t),H9o=i(x),$_=n(x,"LI",{});var ONe=s($_);Ipe=n(ONe,"STRONG",{});var m8t=s(Ipe);J9o=r(m8t,"deit"),m8t.forEach(t),Y9o=r(ONe," \u2014 "),FV=n(ONe,"A",{href:!0});var f8t=s(FV);K9o=r(f8t,"DeiTModel"),f8t.forEach(t),Z9o=r(ONe," (DeiT model)"),ONe.forEach(t),exo=i(x),k_=n(x,"LI",{});var VNe=s(k_);Npe=n(VNe,"STRONG",{});var g8t=s(Npe);oxo=r(g8t,"detr"),g8t.forEach(t),rxo=r(VNe," \u2014 "),TV=n(VNe,"A",{href:!0});var h8t=s(TV);txo=r(h8t,"DetrModel"),h8t.forEach(t),axo=r(VNe," (DETR model)"),VNe.forEach(t),nxo=i(x),S_=n(x,"LI",{});var XNe=s(S_);qpe=n(XNe,"STRONG",{});var u8t=s(qpe);sxo=r(u8t,"distilbert"),u8t.forEach(t),lxo=r(XNe," \u2014 "),MV=n(XNe,"A",{href:!0});var p8t=s(MV);ixo=r(p8t,"DistilBertModel"),p8t.forEach(t),dxo=r(XNe," (DistilBERT model)"),XNe.forEach(t),cxo=i(x),R_=n(x,"LI",{});var zNe=s(R_);jpe=n(zNe,"STRONG",{});var _8t=s(jpe);mxo=r(_8t,"donut-swin"),_8t.forEach(t),fxo=r(zNe," \u2014 "),EV=n(zNe,"A",{href:!0});var b8t=s(EV);gxo=r(b8t,"DonutSwinModel"),b8t.forEach(t),hxo=r(zNe," (DonutSwin model)"),zNe.forEach(t),uxo=i(x),P_=n(x,"LI",{});var QNe=s(P_);Dpe=n(QNe,"STRONG",{});var v8t=s(Dpe);pxo=r(v8t,"dpr"),v8t.forEach(t),_xo=r(QNe," \u2014 "),CV=n(QNe,"A",{href:!0});var F8t=s(CV);bxo=r(F8t,"DPRQuestionEncoder"),F8t.forEach(t),vxo=r(QNe," (DPR model)"),QNe.forEach(t),Fxo=i(x),B_=n(x,"LI",{});var WNe=s(B_);Gpe=n(WNe,"STRONG",{});var T8t=s(Gpe);Txo=r(T8t,"dpt"),T8t.forEach(t),Mxo=r(WNe," \u2014 "),wV=n(WNe,"A",{href:!0});var M8t=s(wV);Exo=r(M8t,"DPTModel"),M8t.forEach(t),Cxo=r(WNe," (DPT model)"),WNe.forEach(t),wxo=i(x),I_=n(x,"LI",{});var UNe=s(I_);Ope=n(UNe,"STRONG",{});var E8t=s(Ope);Axo=r(E8t,"electra"),E8t.forEach(t),Lxo=r(UNe," \u2014 "),AV=n(UNe,"A",{href:!0});var C8t=s(AV);yxo=r(C8t,"ElectraModel"),C8t.forEach(t),xxo=r(UNe," (ELECTRA model)"),UNe.forEach(t),$xo=i(x),N_=n(x,"LI",{});var HNe=s(N_);Vpe=n(HNe,"STRONG",{});var w8t=s(Vpe);kxo=r(w8t,"ernie"),w8t.forEach(t),Sxo=r(HNe," \u2014 "),LV=n(HNe,"A",{href:!0});var A8t=s(LV);Rxo=r(A8t,"ErnieModel"),A8t.forEach(t),Pxo=r(HNe," (ERNIE model)"),HNe.forEach(t),Bxo=i(x),q_=n(x,"LI",{});var JNe=s(q_);Xpe=n(JNe,"STRONG",{});var L8t=s(Xpe);Ixo=r(L8t,"esm"),L8t.forEach(t),Nxo=r(JNe," \u2014 "),yV=n(JNe,"A",{href:!0});var y8t=s(yV);qxo=r(y8t,"EsmModel"),y8t.forEach(t),jxo=r(JNe," (ESM model)"),JNe.forEach(t),Dxo=i(x),j_=n(x,"LI",{});var YNe=s(j_);zpe=n(YNe,"STRONG",{});var x8t=s(zpe);Gxo=r(x8t,"flaubert"),x8t.forEach(t),Oxo=r(YNe," \u2014 "),xV=n(YNe,"A",{href:!0});var $8t=s(xV);Vxo=r($8t,"FlaubertModel"),$8t.forEach(t),Xxo=r(YNe," (FlauBERT model)"),YNe.forEach(t),zxo=i(x),D_=n(x,"LI",{});var KNe=s(D_);Qpe=n(KNe,"STRONG",{});var k8t=s(Qpe);Qxo=r(k8t,"flava"),k8t.forEach(t),Wxo=r(KNe," \u2014 "),$V=n(KNe,"A",{href:!0});var S8t=s($V);Uxo=r(S8t,"FlavaModel"),S8t.forEach(t),Hxo=r(KNe," (FLAVA model)"),KNe.forEach(t),Jxo=i(x),G_=n(x,"LI",{});var ZNe=s(G_);Wpe=n(ZNe,"STRONG",{});var R8t=s(Wpe);Yxo=r(R8t,"fnet"),R8t.forEach(t),Kxo=r(ZNe," \u2014 "),kV=n(ZNe,"A",{href:!0});var P8t=s(kV);Zxo=r(P8t,"FNetModel"),P8t.forEach(t),e$o=r(ZNe," (FNet model)"),ZNe.forEach(t),o$o=i(x),O_=n(x,"LI",{});var eqe=s(O_);Upe=n(eqe,"STRONG",{});var B8t=s(Upe);r$o=r(B8t,"fsmt"),B8t.forEach(t),t$o=r(eqe," \u2014 "),SV=n(eqe,"A",{href:!0});var I8t=s(SV);a$o=r(I8t,"FSMTModel"),I8t.forEach(t),n$o=r(eqe," (FairSeq Machine-Translation model)"),eqe.forEach(t),s$o=i(x),_l=n(x,"LI",{});var WB=s(_l);Hpe=n(WB,"STRONG",{});var N8t=s(Hpe);l$o=r(N8t,"funnel"),N8t.forEach(t),i$o=r(WB," \u2014 "),RV=n(WB,"A",{href:!0});var q8t=s(RV);d$o=r(q8t,"FunnelModel"),q8t.forEach(t),c$o=r(WB," or "),PV=n(WB,"A",{href:!0});var j8t=s(PV);m$o=r(j8t,"FunnelBaseModel"),j8t.forEach(t),f$o=r(WB," (Funnel Transformer model)"),WB.forEach(t),g$o=i(x),V_=n(x,"LI",{});var oqe=s(V_);Jpe=n(oqe,"STRONG",{});var D8t=s(Jpe);h$o=r(D8t,"glpn"),D8t.forEach(t),u$o=r(oqe," \u2014 "),BV=n(oqe,"A",{href:!0});var G8t=s(BV);p$o=r(G8t,"GLPNModel"),G8t.forEach(t),_$o=r(oqe," (GLPN model)"),oqe.forEach(t),b$o=i(x),X_=n(x,"LI",{});var rqe=s(X_);Ype=n(rqe,"STRONG",{});var O8t=s(Ype);v$o=r(O8t,"gpt2"),O8t.forEach(t),F$o=r(rqe," \u2014 "),IV=n(rqe,"A",{href:!0});var V8t=s(IV);T$o=r(V8t,"GPT2Model"),V8t.forEach(t),M$o=r(rqe," (OpenAI GPT-2 model)"),rqe.forEach(t),E$o=i(x),z_=n(x,"LI",{});var tqe=s(z_);Kpe=n(tqe,"STRONG",{});var X8t=s(Kpe);C$o=r(X8t,"gpt_neo"),X8t.forEach(t),w$o=r(tqe," \u2014 "),NV=n(tqe,"A",{href:!0});var z8t=s(NV);A$o=r(z8t,"GPTNeoModel"),z8t.forEach(t),L$o=r(tqe," (GPT Neo model)"),tqe.forEach(t),y$o=i(x),Q_=n(x,"LI",{});var aqe=s(Q_);Zpe=n(aqe,"STRONG",{});var Q8t=s(Zpe);x$o=r(Q8t,"gpt_neox"),Q8t.forEach(t),$$o=r(aqe," \u2014 "),qV=n(aqe,"A",{href:!0});var W8t=s(qV);k$o=r(W8t,"GPTNeoXModel"),W8t.forEach(t),S$o=r(aqe," (GPT NeoX model)"),aqe.forEach(t),R$o=i(x),W_=n(x,"LI",{});var nqe=s(W_);e_e=n(nqe,"STRONG",{});var U8t=s(e_e);P$o=r(U8t,"gpt_neox_japanese"),U8t.forEach(t),B$o=r(nqe," \u2014 "),jV=n(nqe,"A",{href:!0});var H8t=s(jV);I$o=r(H8t,"GPTNeoXJapaneseModel"),H8t.forEach(t),N$o=r(nqe," (GPT NeoX Japanese model)"),nqe.forEach(t),q$o=i(x),U_=n(x,"LI",{});var sqe=s(U_);o_e=n(sqe,"STRONG",{});var J8t=s(o_e);j$o=r(J8t,"gptj"),J8t.forEach(t),D$o=r(sqe," \u2014 "),DV=n(sqe,"A",{href:!0});var Y8t=s(DV);G$o=r(Y8t,"GPTJModel"),Y8t.forEach(t),O$o=r(sqe," (GPT-J model)"),sqe.forEach(t),V$o=i(x),H_=n(x,"LI",{});var lqe=s(H_);r_e=n(lqe,"STRONG",{});var K8t=s(r_e);X$o=r(K8t,"groupvit"),K8t.forEach(t),z$o=r(lqe," \u2014 "),GV=n(lqe,"A",{href:!0});var Z8t=s(GV);Q$o=r(Z8t,"GroupViTModel"),Z8t.forEach(t),W$o=r(lqe," (GroupViT model)"),lqe.forEach(t),U$o=i(x),J_=n(x,"LI",{});var iqe=s(J_);t_e=n(iqe,"STRONG",{});var e9t=s(t_e);H$o=r(e9t,"hubert"),e9t.forEach(t),J$o=r(iqe," \u2014 "),OV=n(iqe,"A",{href:!0});var o9t=s(OV);Y$o=r(o9t,"HubertModel"),o9t.forEach(t),K$o=r(iqe," (Hubert model)"),iqe.forEach(t),Z$o=i(x),Y_=n(x,"LI",{});var dqe=s(Y_);a_e=n(dqe,"STRONG",{});var r9t=s(a_e);eko=r(r9t,"ibert"),r9t.forEach(t),oko=r(dqe," \u2014 "),VV=n(dqe,"A",{href:!0});var t9t=s(VV);rko=r(t9t,"IBertModel"),t9t.forEach(t),tko=r(dqe," (I-BERT model)"),dqe.forEach(t),ako=i(x),K_=n(x,"LI",{});var cqe=s(K_);n_e=n(cqe,"STRONG",{});var a9t=s(n_e);nko=r(a9t,"imagegpt"),a9t.forEach(t),sko=r(cqe," \u2014 "),XV=n(cqe,"A",{href:!0});var n9t=s(XV);lko=r(n9t,"ImageGPTModel"),n9t.forEach(t),iko=r(cqe," (ImageGPT model)"),cqe.forEach(t),dko=i(x),Z_=n(x,"LI",{});var mqe=s(Z_);s_e=n(mqe,"STRONG",{});var s9t=s(s_e);cko=r(s9t,"layoutlm"),s9t.forEach(t),mko=r(mqe," \u2014 "),zV=n(mqe,"A",{href:!0});var l9t=s(zV);fko=r(l9t,"LayoutLMModel"),l9t.forEach(t),gko=r(mqe," (LayoutLM model)"),mqe.forEach(t),hko=i(x),e2=n(x,"LI",{});var fqe=s(e2);l_e=n(fqe,"STRONG",{});var i9t=s(l_e);uko=r(i9t,"layoutlmv2"),i9t.forEach(t),pko=r(fqe," \u2014 "),QV=n(fqe,"A",{href:!0});var d9t=s(QV);_ko=r(d9t,"LayoutLMv2Model"),d9t.forEach(t),bko=r(fqe," (LayoutLMv2 model)"),fqe.forEach(t),vko=i(x),o2=n(x,"LI",{});var gqe=s(o2);i_e=n(gqe,"STRONG",{});var c9t=s(i_e);Fko=r(c9t,"layoutlmv3"),c9t.forEach(t),Tko=r(gqe," \u2014 "),WV=n(gqe,"A",{href:!0});var m9t=s(WV);Mko=r(m9t,"LayoutLMv3Model"),m9t.forEach(t),Eko=r(gqe," (LayoutLMv3 model)"),gqe.forEach(t),Cko=i(x),r2=n(x,"LI",{});var hqe=s(r2);d_e=n(hqe,"STRONG",{});var f9t=s(d_e);wko=r(f9t,"led"),f9t.forEach(t),Ako=r(hqe," \u2014 "),UV=n(hqe,"A",{href:!0});var g9t=s(UV);Lko=r(g9t,"LEDModel"),g9t.forEach(t),yko=r(hqe," (LED model)"),hqe.forEach(t),xko=i(x),t2=n(x,"LI",{});var uqe=s(t2);c_e=n(uqe,"STRONG",{});var h9t=s(c_e);$ko=r(h9t,"levit"),h9t.forEach(t),kko=r(uqe," \u2014 "),HV=n(uqe,"A",{href:!0});var u9t=s(HV);Sko=r(u9t,"LevitModel"),u9t.forEach(t),Rko=r(uqe," (LeViT model)"),uqe.forEach(t),Pko=i(x),a2=n(x,"LI",{});var pqe=s(a2);m_e=n(pqe,"STRONG",{});var p9t=s(m_e);Bko=r(p9t,"longformer"),p9t.forEach(t),Iko=r(pqe," \u2014 "),JV=n(pqe,"A",{href:!0});var _9t=s(JV);Nko=r(_9t,"LongformerModel"),_9t.forEach(t),qko=r(pqe," (Longformer model)"),pqe.forEach(t),jko=i(x),n2=n(x,"LI",{});var _qe=s(n2);f_e=n(_qe,"STRONG",{});var b9t=s(f_e);Dko=r(b9t,"longt5"),b9t.forEach(t),Gko=r(_qe," \u2014 "),YV=n(_qe,"A",{href:!0});var v9t=s(YV);Oko=r(v9t,"LongT5Model"),v9t.forEach(t),Vko=r(_qe," (LongT5 model)"),_qe.forEach(t),Xko=i(x),s2=n(x,"LI",{});var bqe=s(s2);g_e=n(bqe,"STRONG",{});var F9t=s(g_e);zko=r(F9t,"luke"),F9t.forEach(t),Qko=r(bqe," \u2014 "),KV=n(bqe,"A",{href:!0});var T9t=s(KV);Wko=r(T9t,"LukeModel"),T9t.forEach(t),Uko=r(bqe," (LUKE model)"),bqe.forEach(t),Hko=i(x),l2=n(x,"LI",{});var vqe=s(l2);h_e=n(vqe,"STRONG",{});var M9t=s(h_e);Jko=r(M9t,"lxmert"),M9t.forEach(t),Yko=r(vqe," \u2014 "),ZV=n(vqe,"A",{href:!0});var E9t=s(ZV);Kko=r(E9t,"LxmertModel"),E9t.forEach(t),Zko=r(vqe," (LXMERT model)"),vqe.forEach(t),eSo=i(x),i2=n(x,"LI",{});var Fqe=s(i2);u_e=n(Fqe,"STRONG",{});var C9t=s(u_e);oSo=r(C9t,"m2m_100"),C9t.forEach(t),rSo=r(Fqe," \u2014 "),eX=n(Fqe,"A",{href:!0});var w9t=s(eX);tSo=r(w9t,"M2M100Model"),w9t.forEach(t),aSo=r(Fqe," (M2M100 model)"),Fqe.forEach(t),nSo=i(x),d2=n(x,"LI",{});var Tqe=s(d2);p_e=n(Tqe,"STRONG",{});var A9t=s(p_e);sSo=r(A9t,"marian"),A9t.forEach(t),lSo=r(Tqe," \u2014 "),oX=n(Tqe,"A",{href:!0});var L9t=s(oX);iSo=r(L9t,"MarianModel"),L9t.forEach(t),dSo=r(Tqe," (Marian model)"),Tqe.forEach(t),cSo=i(x),c2=n(x,"LI",{});var Mqe=s(c2);__e=n(Mqe,"STRONG",{});var y9t=s(__e);mSo=r(y9t,"markuplm"),y9t.forEach(t),fSo=r(Mqe," \u2014 "),rX=n(Mqe,"A",{href:!0});var x9t=s(rX);gSo=r(x9t,"MarkupLMModel"),x9t.forEach(t),hSo=r(Mqe," (MarkupLM model)"),Mqe.forEach(t),uSo=i(x),m2=n(x,"LI",{});var Eqe=s(m2);b_e=n(Eqe,"STRONG",{});var $9t=s(b_e);pSo=r($9t,"maskformer"),$9t.forEach(t),_So=r(Eqe," \u2014 "),tX=n(Eqe,"A",{href:!0});var k9t=s(tX);bSo=r(k9t,"MaskFormerModel"),k9t.forEach(t),vSo=r(Eqe," (MaskFormer model)"),Eqe.forEach(t),FSo=i(x),f2=n(x,"LI",{});var Cqe=s(f2);v_e=n(Cqe,"STRONG",{});var S9t=s(v_e);TSo=r(S9t,"mbart"),S9t.forEach(t),MSo=r(Cqe," \u2014 "),aX=n(Cqe,"A",{href:!0});var R9t=s(aX);ESo=r(R9t,"MBartModel"),R9t.forEach(t),CSo=r(Cqe," (mBART model)"),Cqe.forEach(t),wSo=i(x),g2=n(x,"LI",{});var wqe=s(g2);F_e=n(wqe,"STRONG",{});var P9t=s(F_e);ASo=r(P9t,"mctct"),P9t.forEach(t),LSo=r(wqe," \u2014 "),nX=n(wqe,"A",{href:!0});var B9t=s(nX);ySo=r(B9t,"MCTCTModel"),B9t.forEach(t),xSo=r(wqe," (M-CTC-T model)"),wqe.forEach(t),$So=i(x),h2=n(x,"LI",{});var Aqe=s(h2);T_e=n(Aqe,"STRONG",{});var I9t=s(T_e);kSo=r(I9t,"megatron-bert"),I9t.forEach(t),SSo=r(Aqe," \u2014 "),sX=n(Aqe,"A",{href:!0});var N9t=s(sX);RSo=r(N9t,"MegatronBertModel"),N9t.forEach(t),PSo=r(Aqe," (Megatron-BERT model)"),Aqe.forEach(t),BSo=i(x),u2=n(x,"LI",{});var Lqe=s(u2);M_e=n(Lqe,"STRONG",{});var q9t=s(M_e);ISo=r(q9t,"mobilebert"),q9t.forEach(t),NSo=r(Lqe," \u2014 "),lX=n(Lqe,"A",{href:!0});var j9t=s(lX);qSo=r(j9t,"MobileBertModel"),j9t.forEach(t),jSo=r(Lqe," (MobileBERT model)"),Lqe.forEach(t),DSo=i(x),p2=n(x,"LI",{});var yqe=s(p2);E_e=n(yqe,"STRONG",{});var D9t=s(E_e);GSo=r(D9t,"mobilevit"),D9t.forEach(t),OSo=r(yqe," \u2014 "),iX=n(yqe,"A",{href:!0});var G9t=s(iX);VSo=r(G9t,"MobileViTModel"),G9t.forEach(t),XSo=r(yqe," (MobileViT model)"),yqe.forEach(t),zSo=i(x),_2=n(x,"LI",{});var xqe=s(_2);C_e=n(xqe,"STRONG",{});var O9t=s(C_e);QSo=r(O9t,"mpnet"),O9t.forEach(t),WSo=r(xqe," \u2014 "),dX=n(xqe,"A",{href:!0});var V9t=s(dX);USo=r(V9t,"MPNetModel"),V9t.forEach(t),HSo=r(xqe," (MPNet model)"),xqe.forEach(t),JSo=i(x),b2=n(x,"LI",{});var $qe=s(b2);w_e=n($qe,"STRONG",{});var X9t=s(w_e);YSo=r(X9t,"mt5"),X9t.forEach(t),KSo=r($qe," \u2014 "),cX=n($qe,"A",{href:!0});var z9t=s(cX);ZSo=r(z9t,"MT5Model"),z9t.forEach(t),eRo=r($qe," (MT5 model)"),$qe.forEach(t),oRo=i(x),v2=n(x,"LI",{});var kqe=s(v2);A_e=n(kqe,"STRONG",{});var Q9t=s(A_e);rRo=r(Q9t,"mvp"),Q9t.forEach(t),tRo=r(kqe," \u2014 "),mX=n(kqe,"A",{href:!0});var W9t=s(mX);aRo=r(W9t,"MvpModel"),W9t.forEach(t),nRo=r(kqe," (MVP model)"),kqe.forEach(t),sRo=i(x),F2=n(x,"LI",{});var Sqe=s(F2);L_e=n(Sqe,"STRONG",{});var U9t=s(L_e);lRo=r(U9t,"nezha"),U9t.forEach(t),iRo=r(Sqe," \u2014 "),fX=n(Sqe,"A",{href:!0});var H9t=s(fX);dRo=r(H9t,"NezhaModel"),H9t.forEach(t),cRo=r(Sqe," (Nezha model)"),Sqe.forEach(t),mRo=i(x),T2=n(x,"LI",{});var Rqe=s(T2);y_e=n(Rqe,"STRONG",{});var J9t=s(y_e);fRo=r(J9t,"nllb"),J9t.forEach(t),gRo=r(Rqe," \u2014 "),gX=n(Rqe,"A",{href:!0});var Y9t=s(gX);hRo=r(Y9t,"M2M100Model"),Y9t.forEach(t),uRo=r(Rqe," (NLLB model)"),Rqe.forEach(t),pRo=i(x),M2=n(x,"LI",{});var Pqe=s(M2);x_e=n(Pqe,"STRONG",{});var K9t=s(x_e);_Ro=r(K9t,"nystromformer"),K9t.forEach(t),bRo=r(Pqe," \u2014 "),hX=n(Pqe,"A",{href:!0});var Z9t=s(hX);vRo=r(Z9t,"NystromformerModel"),Z9t.forEach(t),FRo=r(Pqe," (Nystr\xF6mformer model)"),Pqe.forEach(t),TRo=i(x),E2=n(x,"LI",{});var Bqe=s(E2);$_e=n(Bqe,"STRONG",{});var ext=s($_e);MRo=r(ext,"openai-gpt"),ext.forEach(t),ERo=r(Bqe," \u2014 "),uX=n(Bqe,"A",{href:!0});var oxt=s(uX);CRo=r(oxt,"OpenAIGPTModel"),oxt.forEach(t),wRo=r(Bqe," (OpenAI GPT model)"),Bqe.forEach(t),ARo=i(x),C2=n(x,"LI",{});var Iqe=s(C2);k_e=n(Iqe,"STRONG",{});var rxt=s(k_e);LRo=r(rxt,"opt"),rxt.forEach(t),yRo=r(Iqe," \u2014 "),pX=n(Iqe,"A",{href:!0});var txt=s(pX);xRo=r(txt,"OPTModel"),txt.forEach(t),$Ro=r(Iqe," (OPT model)"),Iqe.forEach(t),kRo=i(x),w2=n(x,"LI",{});var Nqe=s(w2);S_e=n(Nqe,"STRONG",{});var axt=s(S_e);SRo=r(axt,"owlvit"),axt.forEach(t),RRo=r(Nqe," \u2014 "),_X=n(Nqe,"A",{href:!0});var nxt=s(_X);PRo=r(nxt,"OwlViTModel"),nxt.forEach(t),BRo=r(Nqe," (OWL-ViT model)"),Nqe.forEach(t),IRo=i(x),A2=n(x,"LI",{});var qqe=s(A2);R_e=n(qqe,"STRONG",{});var sxt=s(R_e);NRo=r(sxt,"pegasus"),sxt.forEach(t),qRo=r(qqe," \u2014 "),bX=n(qqe,"A",{href:!0});var lxt=s(bX);jRo=r(lxt,"PegasusModel"),lxt.forEach(t),DRo=r(qqe," (Pegasus model)"),qqe.forEach(t),GRo=i(x),L2=n(x,"LI",{});var jqe=s(L2);P_e=n(jqe,"STRONG",{});var ixt=s(P_e);ORo=r(ixt,"pegasus_x"),ixt.forEach(t),VRo=r(jqe," \u2014 "),vX=n(jqe,"A",{href:!0});var dxt=s(vX);XRo=r(dxt,"PegasusXModel"),dxt.forEach(t),zRo=r(jqe," (PEGASUS-X model)"),jqe.forEach(t),QRo=i(x),y2=n(x,"LI",{});var Dqe=s(y2);B_e=n(Dqe,"STRONG",{});var cxt=s(B_e);WRo=r(cxt,"perceiver"),cxt.forEach(t),URo=r(Dqe," \u2014 "),FX=n(Dqe,"A",{href:!0});var mxt=s(FX);HRo=r(mxt,"PerceiverModel"),mxt.forEach(t),JRo=r(Dqe," (Perceiver model)"),Dqe.forEach(t),YRo=i(x),x2=n(x,"LI",{});var Gqe=s(x2);I_e=n(Gqe,"STRONG",{});var fxt=s(I_e);KRo=r(fxt,"plbart"),fxt.forEach(t),ZRo=r(Gqe," \u2014 "),TX=n(Gqe,"A",{href:!0});var gxt=s(TX);ePo=r(gxt,"PLBartModel"),gxt.forEach(t),oPo=r(Gqe," (PLBart model)"),Gqe.forEach(t),rPo=i(x),$2=n(x,"LI",{});var Oqe=s($2);N_e=n(Oqe,"STRONG",{});var hxt=s(N_e);tPo=r(hxt,"poolformer"),hxt.forEach(t),aPo=r(Oqe," \u2014 "),MX=n(Oqe,"A",{href:!0});var uxt=s(MX);nPo=r(uxt,"PoolFormerModel"),uxt.forEach(t),sPo=r(Oqe," (PoolFormer model)"),Oqe.forEach(t),lPo=i(x),k2=n(x,"LI",{});var Vqe=s(k2);q_e=n(Vqe,"STRONG",{});var pxt=s(q_e);iPo=r(pxt,"prophetnet"),pxt.forEach(t),dPo=r(Vqe," \u2014 "),EX=n(Vqe,"A",{href:!0});var _xt=s(EX);cPo=r(_xt,"ProphetNetModel"),_xt.forEach(t),mPo=r(Vqe," (ProphetNet model)"),Vqe.forEach(t),fPo=i(x),S2=n(x,"LI",{});var Xqe=s(S2);j_e=n(Xqe,"STRONG",{});var bxt=s(j_e);gPo=r(bxt,"qdqbert"),bxt.forEach(t),hPo=r(Xqe," \u2014 "),CX=n(Xqe,"A",{href:!0});var vxt=s(CX);uPo=r(vxt,"QDQBertModel"),vxt.forEach(t),pPo=r(Xqe," (QDQBert model)"),Xqe.forEach(t),_Po=i(x),R2=n(x,"LI",{});var zqe=s(R2);D_e=n(zqe,"STRONG",{});var Fxt=s(D_e);bPo=r(Fxt,"reformer"),Fxt.forEach(t),vPo=r(zqe," \u2014 "),wX=n(zqe,"A",{href:!0});var Txt=s(wX);FPo=r(Txt,"ReformerModel"),Txt.forEach(t),TPo=r(zqe," (Reformer model)"),zqe.forEach(t),MPo=i(x),P2=n(x,"LI",{});var Qqe=s(P2);G_e=n(Qqe,"STRONG",{});var Mxt=s(G_e);EPo=r(Mxt,"regnet"),Mxt.forEach(t),CPo=r(Qqe," \u2014 "),AX=n(Qqe,"A",{href:!0});var Ext=s(AX);wPo=r(Ext,"RegNetModel"),Ext.forEach(t),APo=r(Qqe," (RegNet model)"),Qqe.forEach(t),LPo=i(x),B2=n(x,"LI",{});var Wqe=s(B2);O_e=n(Wqe,"STRONG",{});var Cxt=s(O_e);yPo=r(Cxt,"rembert"),Cxt.forEach(t),xPo=r(Wqe," \u2014 "),LX=n(Wqe,"A",{href:!0});var wxt=s(LX);$Po=r(wxt,"RemBertModel"),wxt.forEach(t),kPo=r(Wqe," (RemBERT model)"),Wqe.forEach(t),SPo=i(x),I2=n(x,"LI",{});var Uqe=s(I2);V_e=n(Uqe,"STRONG",{});var Axt=s(V_e);RPo=r(Axt,"resnet"),Axt.forEach(t),PPo=r(Uqe," \u2014 "),yX=n(Uqe,"A",{href:!0});var Lxt=s(yX);BPo=r(Lxt,"ResNetModel"),Lxt.forEach(t),IPo=r(Uqe," (ResNet model)"),Uqe.forEach(t),NPo=i(x),N2=n(x,"LI",{});var Hqe=s(N2);X_e=n(Hqe,"STRONG",{});var yxt=s(X_e);qPo=r(yxt,"retribert"),yxt.forEach(t),jPo=r(Hqe," \u2014 "),xX=n(Hqe,"A",{href:!0});var xxt=s(xX);DPo=r(xxt,"RetriBertModel"),xxt.forEach(t),GPo=r(Hqe," (RetriBERT model)"),Hqe.forEach(t),OPo=i(x),q2=n(x,"LI",{});var Jqe=s(q2);z_e=n(Jqe,"STRONG",{});var $xt=s(z_e);VPo=r($xt,"roberta"),$xt.forEach(t),XPo=r(Jqe," \u2014 "),$X=n(Jqe,"A",{href:!0});var kxt=s($X);zPo=r(kxt,"RobertaModel"),kxt.forEach(t),QPo=r(Jqe," (RoBERTa model)"),Jqe.forEach(t),WPo=i(x),j2=n(x,"LI",{});var Yqe=s(j2);Q_e=n(Yqe,"STRONG",{});var Sxt=s(Q_e);UPo=r(Sxt,"roformer"),Sxt.forEach(t),HPo=r(Yqe," \u2014 "),kX=n(Yqe,"A",{href:!0});var Rxt=s(kX);JPo=r(Rxt,"RoFormerModel"),Rxt.forEach(t),YPo=r(Yqe," (RoFormer model)"),Yqe.forEach(t),KPo=i(x),D2=n(x,"LI",{});var Kqe=s(D2);W_e=n(Kqe,"STRONG",{});var Pxt=s(W_e);ZPo=r(Pxt,"segformer"),Pxt.forEach(t),eBo=r(Kqe," \u2014 "),SX=n(Kqe,"A",{href:!0});var Bxt=s(SX);oBo=r(Bxt,"SegformerModel"),Bxt.forEach(t),rBo=r(Kqe," (SegFormer model)"),Kqe.forEach(t),tBo=i(x),G2=n(x,"LI",{});var Zqe=s(G2);U_e=n(Zqe,"STRONG",{});var Ixt=s(U_e);aBo=r(Ixt,"sew"),Ixt.forEach(t),nBo=r(Zqe," \u2014 "),RX=n(Zqe,"A",{href:!0});var Nxt=s(RX);sBo=r(Nxt,"SEWModel"),Nxt.forEach(t),lBo=r(Zqe," (SEW model)"),Zqe.forEach(t),iBo=i(x),O2=n(x,"LI",{});var eje=s(O2);H_e=n(eje,"STRONG",{});var qxt=s(H_e);dBo=r(qxt,"sew-d"),qxt.forEach(t),cBo=r(eje," \u2014 "),PX=n(eje,"A",{href:!0});var jxt=s(PX);mBo=r(jxt,"SEWDModel"),jxt.forEach(t),fBo=r(eje," (SEW-D model)"),eje.forEach(t),gBo=i(x),V2=n(x,"LI",{});var oje=s(V2);J_e=n(oje,"STRONG",{});var Dxt=s(J_e);hBo=r(Dxt,"speech_to_text"),Dxt.forEach(t),uBo=r(oje," \u2014 "),BX=n(oje,"A",{href:!0});var Gxt=s(BX);pBo=r(Gxt,"Speech2TextModel"),Gxt.forEach(t),_Bo=r(oje," (Speech2Text model)"),oje.forEach(t),bBo=i(x),X2=n(x,"LI",{});var rje=s(X2);Y_e=n(rje,"STRONG",{});var Oxt=s(Y_e);vBo=r(Oxt,"splinter"),Oxt.forEach(t),FBo=r(rje," \u2014 "),IX=n(rje,"A",{href:!0});var Vxt=s(IX);TBo=r(Vxt,"SplinterModel"),Vxt.forEach(t),MBo=r(rje," (Splinter model)"),rje.forEach(t),EBo=i(x),z2=n(x,"LI",{});var tje=s(z2);K_e=n(tje,"STRONG",{});var Xxt=s(K_e);CBo=r(Xxt,"squeezebert"),Xxt.forEach(t),wBo=r(tje," \u2014 "),NX=n(tje,"A",{href:!0});var zxt=s(NX);ABo=r(zxt,"SqueezeBertModel"),zxt.forEach(t),LBo=r(tje," (SqueezeBERT model)"),tje.forEach(t),yBo=i(x),Q2=n(x,"LI",{});var aje=s(Q2);Z_e=n(aje,"STRONG",{});var Qxt=s(Z_e);xBo=r(Qxt,"swin"),Qxt.forEach(t),$Bo=r(aje," \u2014 "),qX=n(aje,"A",{href:!0});var Wxt=s(qX);kBo=r(Wxt,"SwinModel"),Wxt.forEach(t),SBo=r(aje," (Swin Transformer model)"),aje.forEach(t),RBo=i(x),W2=n(x,"LI",{});var nje=s(W2);e2e=n(nje,"STRONG",{});var Uxt=s(e2e);PBo=r(Uxt,"swinv2"),Uxt.forEach(t),BBo=r(nje," \u2014 "),jX=n(nje,"A",{href:!0});var Hxt=s(jX);IBo=r(Hxt,"Swinv2Model"),Hxt.forEach(t),NBo=r(nje," (Swin Transformer V2 model)"),nje.forEach(t),qBo=i(x),U2=n(x,"LI",{});var sje=s(U2);o2e=n(sje,"STRONG",{});var Jxt=s(o2e);jBo=r(Jxt,"t5"),Jxt.forEach(t),DBo=r(sje," \u2014 "),DX=n(sje,"A",{href:!0});var Yxt=s(DX);GBo=r(Yxt,"T5Model"),Yxt.forEach(t),OBo=r(sje," (T5 model)"),sje.forEach(t),VBo=i(x),H2=n(x,"LI",{});var lje=s(H2);r2e=n(lje,"STRONG",{});var Kxt=s(r2e);XBo=r(Kxt,"tapas"),Kxt.forEach(t),zBo=r(lje," \u2014 "),GX=n(lje,"A",{href:!0});var Zxt=s(GX);QBo=r(Zxt,"TapasModel"),Zxt.forEach(t),WBo=r(lje," (TAPAS model)"),lje.forEach(t),UBo=i(x),J2=n(x,"LI",{});var ije=s(J2);t2e=n(ije,"STRONG",{});var e$t=s(t2e);HBo=r(e$t,"trajectory_transformer"),e$t.forEach(t),JBo=r(ije," \u2014 "),OX=n(ije,"A",{href:!0});var o$t=s(OX);YBo=r(o$t,"TrajectoryTransformerModel"),o$t.forEach(t),KBo=r(ije," (Trajectory Transformer model)"),ije.forEach(t),ZBo=i(x),Y2=n(x,"LI",{});var dje=s(Y2);a2e=n(dje,"STRONG",{});var r$t=s(a2e);eIo=r(r$t,"transfo-xl"),r$t.forEach(t),oIo=r(dje," \u2014 "),VX=n(dje,"A",{href:!0});var t$t=s(VX);rIo=r(t$t,"TransfoXLModel"),t$t.forEach(t),tIo=r(dje," (Transformer-XL model)"),dje.forEach(t),aIo=i(x),K2=n(x,"LI",{});var cje=s(K2);n2e=n(cje,"STRONG",{});var a$t=s(n2e);nIo=r(a$t,"unispeech"),a$t.forEach(t),sIo=r(cje," \u2014 "),XX=n(cje,"A",{href:!0});var n$t=s(XX);lIo=r(n$t,"UniSpeechModel"),n$t.forEach(t),iIo=r(cje," (UniSpeech model)"),cje.forEach(t),dIo=i(x),Z2=n(x,"LI",{});var mje=s(Z2);s2e=n(mje,"STRONG",{});var s$t=s(s2e);cIo=r(s$t,"unispeech-sat"),s$t.forEach(t),mIo=r(mje," \u2014 "),zX=n(mje,"A",{href:!0});var l$t=s(zX);fIo=r(l$t,"UniSpeechSatModel"),l$t.forEach(t),gIo=r(mje," (UniSpeechSat model)"),mje.forEach(t),hIo=i(x),e1=n(x,"LI",{});var fje=s(e1);l2e=n(fje,"STRONG",{});var i$t=s(l2e);uIo=r(i$t,"van"),i$t.forEach(t),pIo=r(fje," \u2014 "),QX=n(fje,"A",{href:!0});var d$t=s(QX);_Io=r(d$t,"VanModel"),d$t.forEach(t),bIo=r(fje," (VAN model)"),fje.forEach(t),vIo=i(x),o1=n(x,"LI",{});var gje=s(o1);i2e=n(gje,"STRONG",{});var c$t=s(i2e);FIo=r(c$t,"videomae"),c$t.forEach(t),TIo=r(gje," \u2014 "),WX=n(gje,"A",{href:!0});var m$t=s(WX);MIo=r(m$t,"VideoMAEModel"),m$t.forEach(t),EIo=r(gje," (VideoMAE model)"),gje.forEach(t),CIo=i(x),r1=n(x,"LI",{});var hje=s(r1);d2e=n(hje,"STRONG",{});var f$t=s(d2e);wIo=r(f$t,"vilt"),f$t.forEach(t),AIo=r(hje," \u2014 "),UX=n(hje,"A",{href:!0});var g$t=s(UX);LIo=r(g$t,"ViltModel"),g$t.forEach(t),yIo=r(hje," (ViLT model)"),hje.forEach(t),xIo=i(x),t1=n(x,"LI",{});var uje=s(t1);c2e=n(uje,"STRONG",{});var h$t=s(c2e);$Io=r(h$t,"vision-text-dual-encoder"),h$t.forEach(t),kIo=r(uje," \u2014 "),HX=n(uje,"A",{href:!0});var u$t=s(HX);SIo=r(u$t,"VisionTextDualEncoderModel"),u$t.forEach(t),RIo=r(uje," (VisionTextDualEncoder model)"),uje.forEach(t),PIo=i(x),a1=n(x,"LI",{});var pje=s(a1);m2e=n(pje,"STRONG",{});var p$t=s(m2e);BIo=r(p$t,"visual_bert"),p$t.forEach(t),IIo=r(pje," \u2014 "),JX=n(pje,"A",{href:!0});var _$t=s(JX);NIo=r(_$t,"VisualBertModel"),_$t.forEach(t),qIo=r(pje," (VisualBERT model)"),pje.forEach(t),jIo=i(x),n1=n(x,"LI",{});var _je=s(n1);f2e=n(_je,"STRONG",{});var b$t=s(f2e);DIo=r(b$t,"vit"),b$t.forEach(t),GIo=r(_je," \u2014 "),YX=n(_je,"A",{href:!0});var v$t=s(YX);OIo=r(v$t,"ViTModel"),v$t.forEach(t),VIo=r(_je," (ViT model)"),_je.forEach(t),XIo=i(x),s1=n(x,"LI",{});var bje=s(s1);g2e=n(bje,"STRONG",{});var F$t=s(g2e);zIo=r(F$t,"vit_mae"),F$t.forEach(t),QIo=r(bje," \u2014 "),KX=n(bje,"A",{href:!0});var T$t=s(KX);WIo=r(T$t,"ViTMAEModel"),T$t.forEach(t),UIo=r(bje," (ViTMAE model)"),bje.forEach(t),HIo=i(x),l1=n(x,"LI",{});var vje=s(l1);h2e=n(vje,"STRONG",{});var M$t=s(h2e);JIo=r(M$t,"vit_msn"),M$t.forEach(t),YIo=r(vje," \u2014 "),ZX=n(vje,"A",{href:!0});var E$t=s(ZX);KIo=r(E$t,"ViTMSNModel"),E$t.forEach(t),ZIo=r(vje," (ViTMSN model)"),vje.forEach(t),eNo=i(x),i1=n(x,"LI",{});var Fje=s(i1);u2e=n(Fje,"STRONG",{});var C$t=s(u2e);oNo=r(C$t,"wav2vec2"),C$t.forEach(t),rNo=r(Fje," \u2014 "),ez=n(Fje,"A",{href:!0});var w$t=s(ez);tNo=r(w$t,"Wav2Vec2Model"),w$t.forEach(t),aNo=r(Fje," (Wav2Vec2 model)"),Fje.forEach(t),nNo=i(x),d1=n(x,"LI",{});var Tje=s(d1);p2e=n(Tje,"STRONG",{});var A$t=s(p2e);sNo=r(A$t,"wav2vec2-conformer"),A$t.forEach(t),lNo=r(Tje," \u2014 "),oz=n(Tje,"A",{href:!0});var L$t=s(oz);iNo=r(L$t,"Wav2Vec2ConformerModel"),L$t.forEach(t),dNo=r(Tje," (Wav2Vec2-Conformer model)"),Tje.forEach(t),cNo=i(x),c1=n(x,"LI",{});var Mje=s(c1);_2e=n(Mje,"STRONG",{});var y$t=s(_2e);mNo=r(y$t,"wavlm"),y$t.forEach(t),fNo=r(Mje," \u2014 "),rz=n(Mje,"A",{href:!0});var x$t=s(rz);gNo=r(x$t,"WavLMModel"),x$t.forEach(t),hNo=r(Mje," (WavLM model)"),Mje.forEach(t),uNo=i(x),m1=n(x,"LI",{});var Eje=s(m1);b2e=n(Eje,"STRONG",{});var $$t=s(b2e);pNo=r($$t,"xclip"),$$t.forEach(t),_No=r(Eje," \u2014 "),tz=n(Eje,"A",{href:!0});var k$t=s(tz);bNo=r(k$t,"XCLIPModel"),k$t.forEach(t),vNo=r(Eje," (X-CLIP model)"),Eje.forEach(t),FNo=i(x),f1=n(x,"LI",{});var Cje=s(f1);v2e=n(Cje,"STRONG",{});var S$t=s(v2e);TNo=r(S$t,"xglm"),S$t.forEach(t),MNo=r(Cje," \u2014 "),az=n(Cje,"A",{href:!0});var R$t=s(az);ENo=r(R$t,"XGLMModel"),R$t.forEach(t),CNo=r(Cje," (XGLM model)"),Cje.forEach(t),wNo=i(x),g1=n(x,"LI",{});var wje=s(g1);F2e=n(wje,"STRONG",{});var P$t=s(F2e);ANo=r(P$t,"xlm"),P$t.forEach(t),LNo=r(wje," \u2014 "),nz=n(wje,"A",{href:!0});var B$t=s(nz);yNo=r(B$t,"XLMModel"),B$t.forEach(t),xNo=r(wje," (XLM model)"),wje.forEach(t),$No=i(x),h1=n(x,"LI",{});var Aje=s(h1);T2e=n(Aje,"STRONG",{});var I$t=s(T2e);kNo=r(I$t,"xlm-prophetnet"),I$t.forEach(t),SNo=r(Aje," \u2014 "),sz=n(Aje,"A",{href:!0});var N$t=s(sz);RNo=r(N$t,"XLMProphetNetModel"),N$t.forEach(t),PNo=r(Aje," (XLM-ProphetNet model)"),Aje.forEach(t),BNo=i(x),u1=n(x,"LI",{});var Lje=s(u1);M2e=n(Lje,"STRONG",{});var q$t=s(M2e);INo=r(q$t,"xlm-roberta"),q$t.forEach(t),NNo=r(Lje," \u2014 "),lz=n(Lje,"A",{href:!0});var j$t=s(lz);qNo=r(j$t,"XLMRobertaModel"),j$t.forEach(t),jNo=r(Lje," (XLM-RoBERTa model)"),Lje.forEach(t),DNo=i(x),p1=n(x,"LI",{});var yje=s(p1);E2e=n(yje,"STRONG",{});var D$t=s(E2e);GNo=r(D$t,"xlm-roberta-xl"),D$t.forEach(t),ONo=r(yje," \u2014 "),iz=n(yje,"A",{href:!0});var G$t=s(iz);VNo=r(G$t,"XLMRobertaXLModel"),G$t.forEach(t),XNo=r(yje," (XLM-RoBERTa-XL model)"),yje.forEach(t),zNo=i(x),_1=n(x,"LI",{});var xje=s(_1);C2e=n(xje,"STRONG",{});var O$t=s(C2e);QNo=r(O$t,"xlnet"),O$t.forEach(t),WNo=r(xje," \u2014 "),dz=n(xje,"A",{href:!0});var V$t=s(dz);UNo=r(V$t,"XLNetModel"),V$t.forEach(t),HNo=r(xje," (XLNet model)"),xje.forEach(t),JNo=i(x),b1=n(x,"LI",{});var $je=s(b1);w2e=n($je,"STRONG",{});var X$t=s(w2e);YNo=r(X$t,"yolos"),X$t.forEach(t),KNo=r($je," \u2014 "),cz=n($je,"A",{href:!0});var z$t=s(cz);ZNo=r(z$t,"YolosModel"),z$t.forEach(t),eqo=r($je," (YOLOS model)"),$je.forEach(t),oqo=i(x),v1=n(x,"LI",{});var kje=s(v1);A2e=n(kje,"STRONG",{});var Q$t=s(A2e);rqo=r(Q$t,"yoso"),Q$t.forEach(t),tqo=r(kje," \u2014 "),mz=n(kje,"A",{href:!0});var W$t=s(mz);aqo=r(W$t,"YosoModel"),W$t.forEach(t),nqo=r(kje," (YOSO model)"),kje.forEach(t),x.forEach(t),sqo=i(Fa),F1=n(Fa,"P",{});var Sje=s(F1);lqo=r(Sje,"The model is set in evaluation mode by default using "),L2e=n(Sje,"CODE",{});var U$t=s(L2e);iqo=r(U$t,"model.eval()"),U$t.forEach(t),dqo=r(Sje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),y2e=n(Sje,"CODE",{});var H$t=s(y2e);cqo=r(H$t,"model.train()"),H$t.forEach(t),Sje.forEach(t),mqo=i(Fa),T(T1.$$.fragment,Fa),Fa.forEach(t),Al.forEach(t),WZe=i(m),Fd=n(m,"H2",{class:!0});var lro=s(Fd);M1=n(lro,"A",{id:!0,class:!0,href:!0});var J$t=s(M1);x2e=n(J$t,"SPAN",{});var Y$t=s(x2e);T(xx.$$.fragment,Y$t),Y$t.forEach(t),J$t.forEach(t),fqo=i(lro),$2e=n(lro,"SPAN",{});var K$t=s($2e);gqo=r(K$t,"AutoModelForPreTraining"),K$t.forEach(t),lro.forEach(t),UZe=i(m),Bo=n(m,"DIV",{class:!0});var Ll=s(Bo);T($x.$$.fragment,Ll),hqo=i(Ll),Td=n(Ll,"P",{});var Jle=s(Td);uqo=r(Jle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fz=n(Jle,"A",{href:!0});var Z$t=s(fz);pqo=r(Z$t,"from_pretrained()"),Z$t.forEach(t),_qo=r(Jle," class method or the "),gz=n(Jle,"A",{href:!0});var ekt=s(gz);bqo=r(ekt,"from_config()"),ekt.forEach(t),vqo=r(Jle,` class
method.`),Jle.forEach(t),Fqo=i(Ll),kx=n(Ll,"P",{});var iro=s(kx);Tqo=r(iro,"This class cannot be instantiated directly using "),k2e=n(iro,"CODE",{});var okt=s(k2e);Mqo=r(okt,"__init__()"),okt.forEach(t),Eqo=r(iro," (throws an error)."),iro.forEach(t),Cqo=i(Ll),bt=n(Ll,"DIV",{class:!0});var Uy=s(bt);T(Sx.$$.fragment,Uy),wqo=i(Uy),S2e=n(Uy,"P",{});var rkt=s(S2e);Aqo=r(rkt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rkt.forEach(t),Lqo=i(Uy),Md=n(Uy,"P",{});var Yle=s(Md);yqo=r(Yle,`Note:
Loading a model from its configuration file does `),R2e=n(Yle,"STRONG",{});var tkt=s(R2e);xqo=r(tkt,"not"),tkt.forEach(t),$qo=r(Yle,` load the model weights. It only affects the
model\u2019s configuration. Use `),hz=n(Yle,"A",{href:!0});var akt=s(hz);kqo=r(akt,"from_pretrained()"),akt.forEach(t),Sqo=r(Yle," to load the model weights."),Yle.forEach(t),Rqo=i(Uy),T(E1.$$.fragment,Uy),Uy.forEach(t),Pqo=i(Ll),eo=n(Ll,"DIV",{class:!0});var Ta=s(eo);T(Rx.$$.fragment,Ta),Bqo=i(Ta),P2e=n(Ta,"P",{});var nkt=s(P2e);Iqo=r(nkt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nkt.forEach(t),Nqo=i(Ta),Ya=n(Ta,"P",{});var Hy=s(Ya);qqo=r(Hy,"The model class to instantiate is selected based on the "),B2e=n(Hy,"CODE",{});var skt=s(B2e);jqo=r(skt,"model_type"),skt.forEach(t),Dqo=r(Hy,` property of the config object (either
passed as an argument or loaded from `),I2e=n(Hy,"CODE",{});var lkt=s(I2e);Gqo=r(lkt,"pretrained_model_name_or_path"),lkt.forEach(t),Oqo=r(Hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(Hy,"CODE",{});var ikt=s(N2e);Vqo=r(ikt,"pretrained_model_name_or_path"),ikt.forEach(t),Xqo=r(Hy,":"),Hy.forEach(t),zqo=i(Ta),G=n(Ta,"UL",{});var O=s(G);C1=n(O,"LI",{});var Rje=s(C1);q2e=n(Rje,"STRONG",{});var dkt=s(q2e);Qqo=r(dkt,"albert"),dkt.forEach(t),Wqo=r(Rje," \u2014 "),uz=n(Rje,"A",{href:!0});var ckt=s(uz);Uqo=r(ckt,"AlbertForPreTraining"),ckt.forEach(t),Hqo=r(Rje," (ALBERT model)"),Rje.forEach(t),Jqo=i(O),w1=n(O,"LI",{});var Pje=s(w1);j2e=n(Pje,"STRONG",{});var mkt=s(j2e);Yqo=r(mkt,"bart"),mkt.forEach(t),Kqo=r(Pje," \u2014 "),pz=n(Pje,"A",{href:!0});var fkt=s(pz);Zqo=r(fkt,"BartForConditionalGeneration"),fkt.forEach(t),ejo=r(Pje," (BART model)"),Pje.forEach(t),ojo=i(O),A1=n(O,"LI",{});var Bje=s(A1);D2e=n(Bje,"STRONG",{});var gkt=s(D2e);rjo=r(gkt,"bert"),gkt.forEach(t),tjo=r(Bje," \u2014 "),_z=n(Bje,"A",{href:!0});var hkt=s(_z);ajo=r(hkt,"BertForPreTraining"),hkt.forEach(t),njo=r(Bje," (BERT model)"),Bje.forEach(t),sjo=i(O),L1=n(O,"LI",{});var Ije=s(L1);G2e=n(Ije,"STRONG",{});var ukt=s(G2e);ljo=r(ukt,"big_bird"),ukt.forEach(t),ijo=r(Ije," \u2014 "),bz=n(Ije,"A",{href:!0});var pkt=s(bz);djo=r(pkt,"BigBirdForPreTraining"),pkt.forEach(t),cjo=r(Ije," (BigBird model)"),Ije.forEach(t),mjo=i(O),y1=n(O,"LI",{});var Nje=s(y1);O2e=n(Nje,"STRONG",{});var _kt=s(O2e);fjo=r(_kt,"bloom"),_kt.forEach(t),gjo=r(Nje," \u2014 "),vz=n(Nje,"A",{href:!0});var bkt=s(vz);hjo=r(bkt,"BloomForCausalLM"),bkt.forEach(t),ujo=r(Nje," (BLOOM model)"),Nje.forEach(t),pjo=i(O),x1=n(O,"LI",{});var qje=s(x1);V2e=n(qje,"STRONG",{});var vkt=s(V2e);_jo=r(vkt,"camembert"),vkt.forEach(t),bjo=r(qje," \u2014 "),Fz=n(qje,"A",{href:!0});var Fkt=s(Fz);vjo=r(Fkt,"CamembertForMaskedLM"),Fkt.forEach(t),Fjo=r(qje," (CamemBERT model)"),qje.forEach(t),Tjo=i(O),$1=n(O,"LI",{});var jje=s($1);X2e=n(jje,"STRONG",{});var Tkt=s(X2e);Mjo=r(Tkt,"ctrl"),Tkt.forEach(t),Ejo=r(jje," \u2014 "),Tz=n(jje,"A",{href:!0});var Mkt=s(Tz);Cjo=r(Mkt,"CTRLLMHeadModel"),Mkt.forEach(t),wjo=r(jje," (CTRL model)"),jje.forEach(t),Ajo=i(O),k1=n(O,"LI",{});var Dje=s(k1);z2e=n(Dje,"STRONG",{});var Ekt=s(z2e);Ljo=r(Ekt,"data2vec-text"),Ekt.forEach(t),yjo=r(Dje," \u2014 "),Mz=n(Dje,"A",{href:!0});var Ckt=s(Mz);xjo=r(Ckt,"Data2VecTextForMaskedLM"),Ckt.forEach(t),$jo=r(Dje," (Data2VecText model)"),Dje.forEach(t),kjo=i(O),S1=n(O,"LI",{});var Gje=s(S1);Q2e=n(Gje,"STRONG",{});var wkt=s(Q2e);Sjo=r(wkt,"deberta"),wkt.forEach(t),Rjo=r(Gje," \u2014 "),Ez=n(Gje,"A",{href:!0});var Akt=s(Ez);Pjo=r(Akt,"DebertaForMaskedLM"),Akt.forEach(t),Bjo=r(Gje," (DeBERTa model)"),Gje.forEach(t),Ijo=i(O),R1=n(O,"LI",{});var Oje=s(R1);W2e=n(Oje,"STRONG",{});var Lkt=s(W2e);Njo=r(Lkt,"deberta-v2"),Lkt.forEach(t),qjo=r(Oje," \u2014 "),Cz=n(Oje,"A",{href:!0});var ykt=s(Cz);jjo=r(ykt,"DebertaV2ForMaskedLM"),ykt.forEach(t),Djo=r(Oje," (DeBERTa-v2 model)"),Oje.forEach(t),Gjo=i(O),P1=n(O,"LI",{});var Vje=s(P1);U2e=n(Vje,"STRONG",{});var xkt=s(U2e);Ojo=r(xkt,"distilbert"),xkt.forEach(t),Vjo=r(Vje," \u2014 "),wz=n(Vje,"A",{href:!0});var $kt=s(wz);Xjo=r($kt,"DistilBertForMaskedLM"),$kt.forEach(t),zjo=r(Vje," (DistilBERT model)"),Vje.forEach(t),Qjo=i(O),B1=n(O,"LI",{});var Xje=s(B1);H2e=n(Xje,"STRONG",{});var kkt=s(H2e);Wjo=r(kkt,"electra"),kkt.forEach(t),Ujo=r(Xje," \u2014 "),Az=n(Xje,"A",{href:!0});var Skt=s(Az);Hjo=r(Skt,"ElectraForPreTraining"),Skt.forEach(t),Jjo=r(Xje," (ELECTRA model)"),Xje.forEach(t),Yjo=i(O),I1=n(O,"LI",{});var zje=s(I1);J2e=n(zje,"STRONG",{});var Rkt=s(J2e);Kjo=r(Rkt,"ernie"),Rkt.forEach(t),Zjo=r(zje," \u2014 "),Lz=n(zje,"A",{href:!0});var Pkt=s(Lz);eDo=r(Pkt,"ErnieForPreTraining"),Pkt.forEach(t),oDo=r(zje," (ERNIE model)"),zje.forEach(t),rDo=i(O),N1=n(O,"LI",{});var Qje=s(N1);Y2e=n(Qje,"STRONG",{});var Bkt=s(Y2e);tDo=r(Bkt,"flaubert"),Bkt.forEach(t),aDo=r(Qje," \u2014 "),yz=n(Qje,"A",{href:!0});var Ikt=s(yz);nDo=r(Ikt,"FlaubertWithLMHeadModel"),Ikt.forEach(t),sDo=r(Qje," (FlauBERT model)"),Qje.forEach(t),lDo=i(O),q1=n(O,"LI",{});var Wje=s(q1);K2e=n(Wje,"STRONG",{});var Nkt=s(K2e);iDo=r(Nkt,"flava"),Nkt.forEach(t),dDo=r(Wje," \u2014 "),xz=n(Wje,"A",{href:!0});var qkt=s(xz);cDo=r(qkt,"FlavaForPreTraining"),qkt.forEach(t),mDo=r(Wje," (FLAVA model)"),Wje.forEach(t),fDo=i(O),j1=n(O,"LI",{});var Uje=s(j1);Z2e=n(Uje,"STRONG",{});var jkt=s(Z2e);gDo=r(jkt,"fnet"),jkt.forEach(t),hDo=r(Uje," \u2014 "),$z=n(Uje,"A",{href:!0});var Dkt=s($z);uDo=r(Dkt,"FNetForPreTraining"),Dkt.forEach(t),pDo=r(Uje," (FNet model)"),Uje.forEach(t),_Do=i(O),D1=n(O,"LI",{});var Hje=s(D1);e1e=n(Hje,"STRONG",{});var Gkt=s(e1e);bDo=r(Gkt,"fsmt"),Gkt.forEach(t),vDo=r(Hje," \u2014 "),kz=n(Hje,"A",{href:!0});var Okt=s(kz);FDo=r(Okt,"FSMTForConditionalGeneration"),Okt.forEach(t),TDo=r(Hje," (FairSeq Machine-Translation model)"),Hje.forEach(t),MDo=i(O),G1=n(O,"LI",{});var Jje=s(G1);o1e=n(Jje,"STRONG",{});var Vkt=s(o1e);EDo=r(Vkt,"funnel"),Vkt.forEach(t),CDo=r(Jje," \u2014 "),Sz=n(Jje,"A",{href:!0});var Xkt=s(Sz);wDo=r(Xkt,"FunnelForPreTraining"),Xkt.forEach(t),ADo=r(Jje," (Funnel Transformer model)"),Jje.forEach(t),LDo=i(O),O1=n(O,"LI",{});var Yje=s(O1);r1e=n(Yje,"STRONG",{});var zkt=s(r1e);yDo=r(zkt,"gpt2"),zkt.forEach(t),xDo=r(Yje," \u2014 "),Rz=n(Yje,"A",{href:!0});var Qkt=s(Rz);$Do=r(Qkt,"GPT2LMHeadModel"),Qkt.forEach(t),kDo=r(Yje," (OpenAI GPT-2 model)"),Yje.forEach(t),SDo=i(O),V1=n(O,"LI",{});var Kje=s(V1);t1e=n(Kje,"STRONG",{});var Wkt=s(t1e);RDo=r(Wkt,"ibert"),Wkt.forEach(t),PDo=r(Kje," \u2014 "),Pz=n(Kje,"A",{href:!0});var Ukt=s(Pz);BDo=r(Ukt,"IBertForMaskedLM"),Ukt.forEach(t),IDo=r(Kje," (I-BERT model)"),Kje.forEach(t),NDo=i(O),X1=n(O,"LI",{});var Zje=s(X1);a1e=n(Zje,"STRONG",{});var Hkt=s(a1e);qDo=r(Hkt,"layoutlm"),Hkt.forEach(t),jDo=r(Zje," \u2014 "),Bz=n(Zje,"A",{href:!0});var Jkt=s(Bz);DDo=r(Jkt,"LayoutLMForMaskedLM"),Jkt.forEach(t),GDo=r(Zje," (LayoutLM model)"),Zje.forEach(t),ODo=i(O),z1=n(O,"LI",{});var eDe=s(z1);n1e=n(eDe,"STRONG",{});var Ykt=s(n1e);VDo=r(Ykt,"longformer"),Ykt.forEach(t),XDo=r(eDe," \u2014 "),Iz=n(eDe,"A",{href:!0});var Kkt=s(Iz);zDo=r(Kkt,"LongformerForMaskedLM"),Kkt.forEach(t),QDo=r(eDe," (Longformer model)"),eDe.forEach(t),WDo=i(O),Q1=n(O,"LI",{});var oDe=s(Q1);s1e=n(oDe,"STRONG",{});var Zkt=s(s1e);UDo=r(Zkt,"luke"),Zkt.forEach(t),HDo=r(oDe," \u2014 "),Nz=n(oDe,"A",{href:!0});var eSt=s(Nz);JDo=r(eSt,"LukeForMaskedLM"),eSt.forEach(t),YDo=r(oDe," (LUKE model)"),oDe.forEach(t),KDo=i(O),W1=n(O,"LI",{});var rDe=s(W1);l1e=n(rDe,"STRONG",{});var oSt=s(l1e);ZDo=r(oSt,"lxmert"),oSt.forEach(t),eGo=r(rDe," \u2014 "),qz=n(rDe,"A",{href:!0});var rSt=s(qz);oGo=r(rSt,"LxmertForPreTraining"),rSt.forEach(t),rGo=r(rDe," (LXMERT model)"),rDe.forEach(t),tGo=i(O),U1=n(O,"LI",{});var tDe=s(U1);i1e=n(tDe,"STRONG",{});var tSt=s(i1e);aGo=r(tSt,"megatron-bert"),tSt.forEach(t),nGo=r(tDe," \u2014 "),jz=n(tDe,"A",{href:!0});var aSt=s(jz);sGo=r(aSt,"MegatronBertForPreTraining"),aSt.forEach(t),lGo=r(tDe," (Megatron-BERT model)"),tDe.forEach(t),iGo=i(O),H1=n(O,"LI",{});var aDe=s(H1);d1e=n(aDe,"STRONG",{});var nSt=s(d1e);dGo=r(nSt,"mobilebert"),nSt.forEach(t),cGo=r(aDe," \u2014 "),Dz=n(aDe,"A",{href:!0});var sSt=s(Dz);mGo=r(sSt,"MobileBertForPreTraining"),sSt.forEach(t),fGo=r(aDe," (MobileBERT model)"),aDe.forEach(t),gGo=i(O),J1=n(O,"LI",{});var nDe=s(J1);c1e=n(nDe,"STRONG",{});var lSt=s(c1e);hGo=r(lSt,"mpnet"),lSt.forEach(t),uGo=r(nDe," \u2014 "),Gz=n(nDe,"A",{href:!0});var iSt=s(Gz);pGo=r(iSt,"MPNetForMaskedLM"),iSt.forEach(t),_Go=r(nDe," (MPNet model)"),nDe.forEach(t),bGo=i(O),Y1=n(O,"LI",{});var sDe=s(Y1);m1e=n(sDe,"STRONG",{});var dSt=s(m1e);vGo=r(dSt,"mvp"),dSt.forEach(t),FGo=r(sDe," \u2014 "),Oz=n(sDe,"A",{href:!0});var cSt=s(Oz);TGo=r(cSt,"MvpForConditionalGeneration"),cSt.forEach(t),MGo=r(sDe," (MVP model)"),sDe.forEach(t),EGo=i(O),K1=n(O,"LI",{});var lDe=s(K1);f1e=n(lDe,"STRONG",{});var mSt=s(f1e);CGo=r(mSt,"nezha"),mSt.forEach(t),wGo=r(lDe," \u2014 "),Vz=n(lDe,"A",{href:!0});var fSt=s(Vz);AGo=r(fSt,"NezhaForPreTraining"),fSt.forEach(t),LGo=r(lDe," (Nezha model)"),lDe.forEach(t),yGo=i(O),Z1=n(O,"LI",{});var iDe=s(Z1);g1e=n(iDe,"STRONG",{});var gSt=s(g1e);xGo=r(gSt,"openai-gpt"),gSt.forEach(t),$Go=r(iDe," \u2014 "),Xz=n(iDe,"A",{href:!0});var hSt=s(Xz);kGo=r(hSt,"OpenAIGPTLMHeadModel"),hSt.forEach(t),SGo=r(iDe," (OpenAI GPT model)"),iDe.forEach(t),RGo=i(O),eb=n(O,"LI",{});var dDe=s(eb);h1e=n(dDe,"STRONG",{});var uSt=s(h1e);PGo=r(uSt,"retribert"),uSt.forEach(t),BGo=r(dDe," \u2014 "),zz=n(dDe,"A",{href:!0});var pSt=s(zz);IGo=r(pSt,"RetriBertModel"),pSt.forEach(t),NGo=r(dDe," (RetriBERT model)"),dDe.forEach(t),qGo=i(O),ob=n(O,"LI",{});var cDe=s(ob);u1e=n(cDe,"STRONG",{});var _St=s(u1e);jGo=r(_St,"roberta"),_St.forEach(t),DGo=r(cDe," \u2014 "),Qz=n(cDe,"A",{href:!0});var bSt=s(Qz);GGo=r(bSt,"RobertaForMaskedLM"),bSt.forEach(t),OGo=r(cDe," (RoBERTa model)"),cDe.forEach(t),VGo=i(O),rb=n(O,"LI",{});var mDe=s(rb);p1e=n(mDe,"STRONG",{});var vSt=s(p1e);XGo=r(vSt,"splinter"),vSt.forEach(t),zGo=r(mDe," \u2014 "),Wz=n(mDe,"A",{href:!0});var FSt=s(Wz);QGo=r(FSt,"SplinterForPreTraining"),FSt.forEach(t),WGo=r(mDe," (Splinter model)"),mDe.forEach(t),UGo=i(O),tb=n(O,"LI",{});var fDe=s(tb);_1e=n(fDe,"STRONG",{});var TSt=s(_1e);HGo=r(TSt,"squeezebert"),TSt.forEach(t),JGo=r(fDe," \u2014 "),Uz=n(fDe,"A",{href:!0});var MSt=s(Uz);YGo=r(MSt,"SqueezeBertForMaskedLM"),MSt.forEach(t),KGo=r(fDe," (SqueezeBERT model)"),fDe.forEach(t),ZGo=i(O),ab=n(O,"LI",{});var gDe=s(ab);b1e=n(gDe,"STRONG",{});var ESt=s(b1e);eOo=r(ESt,"t5"),ESt.forEach(t),oOo=r(gDe," \u2014 "),Hz=n(gDe,"A",{href:!0});var CSt=s(Hz);rOo=r(CSt,"T5ForConditionalGeneration"),CSt.forEach(t),tOo=r(gDe," (T5 model)"),gDe.forEach(t),aOo=i(O),nb=n(O,"LI",{});var hDe=s(nb);v1e=n(hDe,"STRONG",{});var wSt=s(v1e);nOo=r(wSt,"tapas"),wSt.forEach(t),sOo=r(hDe," \u2014 "),Jz=n(hDe,"A",{href:!0});var ASt=s(Jz);lOo=r(ASt,"TapasForMaskedLM"),ASt.forEach(t),iOo=r(hDe," (TAPAS model)"),hDe.forEach(t),dOo=i(O),sb=n(O,"LI",{});var uDe=s(sb);F1e=n(uDe,"STRONG",{});var LSt=s(F1e);cOo=r(LSt,"transfo-xl"),LSt.forEach(t),mOo=r(uDe," \u2014 "),Yz=n(uDe,"A",{href:!0});var ySt=s(Yz);fOo=r(ySt,"TransfoXLLMHeadModel"),ySt.forEach(t),gOo=r(uDe," (Transformer-XL model)"),uDe.forEach(t),hOo=i(O),lb=n(O,"LI",{});var pDe=s(lb);T1e=n(pDe,"STRONG",{});var xSt=s(T1e);uOo=r(xSt,"unispeech"),xSt.forEach(t),pOo=r(pDe," \u2014 "),Kz=n(pDe,"A",{href:!0});var $St=s(Kz);_Oo=r($St,"UniSpeechForPreTraining"),$St.forEach(t),bOo=r(pDe," (UniSpeech model)"),pDe.forEach(t),vOo=i(O),ib=n(O,"LI",{});var _De=s(ib);M1e=n(_De,"STRONG",{});var kSt=s(M1e);FOo=r(kSt,"unispeech-sat"),kSt.forEach(t),TOo=r(_De," \u2014 "),Zz=n(_De,"A",{href:!0});var SSt=s(Zz);MOo=r(SSt,"UniSpeechSatForPreTraining"),SSt.forEach(t),EOo=r(_De," (UniSpeechSat model)"),_De.forEach(t),COo=i(O),db=n(O,"LI",{});var bDe=s(db);E1e=n(bDe,"STRONG",{});var RSt=s(E1e);wOo=r(RSt,"videomae"),RSt.forEach(t),AOo=r(bDe," \u2014 "),eQ=n(bDe,"A",{href:!0});var PSt=s(eQ);LOo=r(PSt,"VideoMAEForPreTraining"),PSt.forEach(t),yOo=r(bDe," (VideoMAE model)"),bDe.forEach(t),xOo=i(O),cb=n(O,"LI",{});var vDe=s(cb);C1e=n(vDe,"STRONG",{});var BSt=s(C1e);$Oo=r(BSt,"visual_bert"),BSt.forEach(t),kOo=r(vDe," \u2014 "),oQ=n(vDe,"A",{href:!0});var ISt=s(oQ);SOo=r(ISt,"VisualBertForPreTraining"),ISt.forEach(t),ROo=r(vDe," (VisualBERT model)"),vDe.forEach(t),POo=i(O),mb=n(O,"LI",{});var FDe=s(mb);w1e=n(FDe,"STRONG",{});var NSt=s(w1e);BOo=r(NSt,"vit_mae"),NSt.forEach(t),IOo=r(FDe," \u2014 "),rQ=n(FDe,"A",{href:!0});var qSt=s(rQ);NOo=r(qSt,"ViTMAEForPreTraining"),qSt.forEach(t),qOo=r(FDe," (ViTMAE model)"),FDe.forEach(t),jOo=i(O),fb=n(O,"LI",{});var TDe=s(fb);A1e=n(TDe,"STRONG",{});var jSt=s(A1e);DOo=r(jSt,"wav2vec2"),jSt.forEach(t),GOo=r(TDe," \u2014 "),tQ=n(TDe,"A",{href:!0});var DSt=s(tQ);OOo=r(DSt,"Wav2Vec2ForPreTraining"),DSt.forEach(t),VOo=r(TDe," (Wav2Vec2 model)"),TDe.forEach(t),XOo=i(O),gb=n(O,"LI",{});var MDe=s(gb);L1e=n(MDe,"STRONG",{});var GSt=s(L1e);zOo=r(GSt,"wav2vec2-conformer"),GSt.forEach(t),QOo=r(MDe," \u2014 "),aQ=n(MDe,"A",{href:!0});var OSt=s(aQ);WOo=r(OSt,"Wav2Vec2ConformerForPreTraining"),OSt.forEach(t),UOo=r(MDe," (Wav2Vec2-Conformer model)"),MDe.forEach(t),HOo=i(O),hb=n(O,"LI",{});var EDe=s(hb);y1e=n(EDe,"STRONG",{});var VSt=s(y1e);JOo=r(VSt,"xlm"),VSt.forEach(t),YOo=r(EDe," \u2014 "),nQ=n(EDe,"A",{href:!0});var XSt=s(nQ);KOo=r(XSt,"XLMWithLMHeadModel"),XSt.forEach(t),ZOo=r(EDe," (XLM model)"),EDe.forEach(t),eVo=i(O),ub=n(O,"LI",{});var CDe=s(ub);x1e=n(CDe,"STRONG",{});var zSt=s(x1e);oVo=r(zSt,"xlm-roberta"),zSt.forEach(t),rVo=r(CDe," \u2014 "),sQ=n(CDe,"A",{href:!0});var QSt=s(sQ);tVo=r(QSt,"XLMRobertaForMaskedLM"),QSt.forEach(t),aVo=r(CDe," (XLM-RoBERTa model)"),CDe.forEach(t),nVo=i(O),pb=n(O,"LI",{});var wDe=s(pb);$1e=n(wDe,"STRONG",{});var WSt=s($1e);sVo=r(WSt,"xlm-roberta-xl"),WSt.forEach(t),lVo=r(wDe," \u2014 "),lQ=n(wDe,"A",{href:!0});var USt=s(lQ);iVo=r(USt,"XLMRobertaXLForMaskedLM"),USt.forEach(t),dVo=r(wDe," (XLM-RoBERTa-XL model)"),wDe.forEach(t),cVo=i(O),_b=n(O,"LI",{});var ADe=s(_b);k1e=n(ADe,"STRONG",{});var HSt=s(k1e);mVo=r(HSt,"xlnet"),HSt.forEach(t),fVo=r(ADe," \u2014 "),iQ=n(ADe,"A",{href:!0});var JSt=s(iQ);gVo=r(JSt,"XLNetLMHeadModel"),JSt.forEach(t),hVo=r(ADe," (XLNet model)"),ADe.forEach(t),O.forEach(t),uVo=i(Ta),bb=n(Ta,"P",{});var LDe=s(bb);pVo=r(LDe,"The model is set in evaluation mode by default using "),S1e=n(LDe,"CODE",{});var YSt=s(S1e);_Vo=r(YSt,"model.eval()"),YSt.forEach(t),bVo=r(LDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R1e=n(LDe,"CODE",{});var KSt=s(R1e);vVo=r(KSt,"model.train()"),KSt.forEach(t),LDe.forEach(t),FVo=i(Ta),T(vb.$$.fragment,Ta),Ta.forEach(t),Ll.forEach(t),HZe=i(m),Ed=n(m,"H2",{class:!0});var dro=s(Ed);Fb=n(dro,"A",{id:!0,class:!0,href:!0});var ZSt=s(Fb);P1e=n(ZSt,"SPAN",{});var eRt=s(P1e);T(Px.$$.fragment,eRt),eRt.forEach(t),ZSt.forEach(t),TVo=i(dro),B1e=n(dro,"SPAN",{});var oRt=s(B1e);MVo=r(oRt,"AutoModelForCausalLM"),oRt.forEach(t),dro.forEach(t),JZe=i(m),Io=n(m,"DIV",{class:!0});var yl=s(Io);T(Bx.$$.fragment,yl),EVo=i(yl),Cd=n(yl,"P",{});var Kle=s(Cd);CVo=r(Kle,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),dQ=n(Kle,"A",{href:!0});var rRt=s(dQ);wVo=r(rRt,"from_pretrained()"),rRt.forEach(t),AVo=r(Kle," class method or the "),cQ=n(Kle,"A",{href:!0});var tRt=s(cQ);LVo=r(tRt,"from_config()"),tRt.forEach(t),yVo=r(Kle,` class
method.`),Kle.forEach(t),xVo=i(yl),Ix=n(yl,"P",{});var cro=s(Ix);$Vo=r(cro,"This class cannot be instantiated directly using "),I1e=n(cro,"CODE",{});var aRt=s(I1e);kVo=r(aRt,"__init__()"),aRt.forEach(t),SVo=r(cro," (throws an error)."),cro.forEach(t),RVo=i(yl),vt=n(yl,"DIV",{class:!0});var Jy=s(vt);T(Nx.$$.fragment,Jy),PVo=i(Jy),N1e=n(Jy,"P",{});var nRt=s(N1e);BVo=r(nRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nRt.forEach(t),IVo=i(Jy),wd=n(Jy,"P",{});var Zle=s(wd);NVo=r(Zle,`Note:
Loading a model from its configuration file does `),q1e=n(Zle,"STRONG",{});var sRt=s(q1e);qVo=r(sRt,"not"),sRt.forEach(t),jVo=r(Zle,` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=n(Zle,"A",{href:!0});var lRt=s(mQ);DVo=r(lRt,"from_pretrained()"),lRt.forEach(t),GVo=r(Zle," to load the model weights."),Zle.forEach(t),OVo=i(Jy),T(Tb.$$.fragment,Jy),Jy.forEach(t),VVo=i(yl),oo=n(yl,"DIV",{class:!0});var Ma=s(oo);T(qx.$$.fragment,Ma),XVo=i(Ma),j1e=n(Ma,"P",{});var iRt=s(j1e);zVo=r(iRt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iRt.forEach(t),QVo=i(Ma),Ka=n(Ma,"P",{});var Yy=s(Ka);WVo=r(Yy,"The model class to instantiate is selected based on the "),D1e=n(Yy,"CODE",{});var dRt=s(D1e);UVo=r(dRt,"model_type"),dRt.forEach(t),HVo=r(Yy,` property of the config object (either
passed as an argument or loaded from `),G1e=n(Yy,"CODE",{});var cRt=s(G1e);JVo=r(cRt,"pretrained_model_name_or_path"),cRt.forEach(t),YVo=r(Yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(Yy,"CODE",{});var mRt=s(O1e);KVo=r(mRt,"pretrained_model_name_or_path"),mRt.forEach(t),ZVo=r(Yy,":"),Yy.forEach(t),eXo=i(Ma),Q=n(Ma,"UL",{});var U=s(Q);Mb=n(U,"LI",{});var yDe=s(Mb);V1e=n(yDe,"STRONG",{});var fRt=s(V1e);oXo=r(fRt,"bart"),fRt.forEach(t),rXo=r(yDe," \u2014 "),fQ=n(yDe,"A",{href:!0});var gRt=s(fQ);tXo=r(gRt,"BartForCausalLM"),gRt.forEach(t),aXo=r(yDe," (BART model)"),yDe.forEach(t),nXo=i(U),Eb=n(U,"LI",{});var xDe=s(Eb);X1e=n(xDe,"STRONG",{});var hRt=s(X1e);sXo=r(hRt,"bert"),hRt.forEach(t),lXo=r(xDe," \u2014 "),gQ=n(xDe,"A",{href:!0});var uRt=s(gQ);iXo=r(uRt,"BertLMHeadModel"),uRt.forEach(t),dXo=r(xDe," (BERT model)"),xDe.forEach(t),cXo=i(U),Cb=n(U,"LI",{});var $De=s(Cb);z1e=n($De,"STRONG",{});var pRt=s(z1e);mXo=r(pRt,"bert-generation"),pRt.forEach(t),fXo=r($De," \u2014 "),hQ=n($De,"A",{href:!0});var _Rt=s(hQ);gXo=r(_Rt,"BertGenerationDecoder"),_Rt.forEach(t),hXo=r($De," (Bert Generation model)"),$De.forEach(t),uXo=i(U),wb=n(U,"LI",{});var kDe=s(wb);Q1e=n(kDe,"STRONG",{});var bRt=s(Q1e);pXo=r(bRt,"big_bird"),bRt.forEach(t),_Xo=r(kDe," \u2014 "),uQ=n(kDe,"A",{href:!0});var vRt=s(uQ);bXo=r(vRt,"BigBirdForCausalLM"),vRt.forEach(t),vXo=r(kDe," (BigBird model)"),kDe.forEach(t),FXo=i(U),Ab=n(U,"LI",{});var SDe=s(Ab);W1e=n(SDe,"STRONG",{});var FRt=s(W1e);TXo=r(FRt,"bigbird_pegasus"),FRt.forEach(t),MXo=r(SDe," \u2014 "),pQ=n(SDe,"A",{href:!0});var TRt=s(pQ);EXo=r(TRt,"BigBirdPegasusForCausalLM"),TRt.forEach(t),CXo=r(SDe," (BigBird-Pegasus model)"),SDe.forEach(t),wXo=i(U),Lb=n(U,"LI",{});var RDe=s(Lb);U1e=n(RDe,"STRONG",{});var MRt=s(U1e);AXo=r(MRt,"blenderbot"),MRt.forEach(t),LXo=r(RDe," \u2014 "),_Q=n(RDe,"A",{href:!0});var ERt=s(_Q);yXo=r(ERt,"BlenderbotForCausalLM"),ERt.forEach(t),xXo=r(RDe," (Blenderbot model)"),RDe.forEach(t),$Xo=i(U),yb=n(U,"LI",{});var PDe=s(yb);H1e=n(PDe,"STRONG",{});var CRt=s(H1e);kXo=r(CRt,"blenderbot-small"),CRt.forEach(t),SXo=r(PDe," \u2014 "),bQ=n(PDe,"A",{href:!0});var wRt=s(bQ);RXo=r(wRt,"BlenderbotSmallForCausalLM"),wRt.forEach(t),PXo=r(PDe," (BlenderbotSmall model)"),PDe.forEach(t),BXo=i(U),xb=n(U,"LI",{});var BDe=s(xb);J1e=n(BDe,"STRONG",{});var ARt=s(J1e);IXo=r(ARt,"bloom"),ARt.forEach(t),NXo=r(BDe," \u2014 "),vQ=n(BDe,"A",{href:!0});var LRt=s(vQ);qXo=r(LRt,"BloomForCausalLM"),LRt.forEach(t),jXo=r(BDe," (BLOOM model)"),BDe.forEach(t),DXo=i(U),$b=n(U,"LI",{});var IDe=s($b);Y1e=n(IDe,"STRONG",{});var yRt=s(Y1e);GXo=r(yRt,"camembert"),yRt.forEach(t),OXo=r(IDe," \u2014 "),FQ=n(IDe,"A",{href:!0});var xRt=s(FQ);VXo=r(xRt,"CamembertForCausalLM"),xRt.forEach(t),XXo=r(IDe," (CamemBERT model)"),IDe.forEach(t),zXo=i(U),kb=n(U,"LI",{});var NDe=s(kb);K1e=n(NDe,"STRONG",{});var $Rt=s(K1e);QXo=r($Rt,"codegen"),$Rt.forEach(t),WXo=r(NDe," \u2014 "),TQ=n(NDe,"A",{href:!0});var kRt=s(TQ);UXo=r(kRt,"CodeGenForCausalLM"),kRt.forEach(t),HXo=r(NDe," (CodeGen model)"),NDe.forEach(t),JXo=i(U),Sb=n(U,"LI",{});var qDe=s(Sb);Z1e=n(qDe,"STRONG",{});var SRt=s(Z1e);YXo=r(SRt,"ctrl"),SRt.forEach(t),KXo=r(qDe," \u2014 "),MQ=n(qDe,"A",{href:!0});var RRt=s(MQ);ZXo=r(RRt,"CTRLLMHeadModel"),RRt.forEach(t),ezo=r(qDe," (CTRL model)"),qDe.forEach(t),ozo=i(U),Rb=n(U,"LI",{});var jDe=s(Rb);ebe=n(jDe,"STRONG",{});var PRt=s(ebe);rzo=r(PRt,"data2vec-text"),PRt.forEach(t),tzo=r(jDe," \u2014 "),EQ=n(jDe,"A",{href:!0});var BRt=s(EQ);azo=r(BRt,"Data2VecTextForCausalLM"),BRt.forEach(t),nzo=r(jDe," (Data2VecText model)"),jDe.forEach(t),szo=i(U),Pb=n(U,"LI",{});var DDe=s(Pb);obe=n(DDe,"STRONG",{});var IRt=s(obe);lzo=r(IRt,"electra"),IRt.forEach(t),izo=r(DDe," \u2014 "),CQ=n(DDe,"A",{href:!0});var NRt=s(CQ);dzo=r(NRt,"ElectraForCausalLM"),NRt.forEach(t),czo=r(DDe," (ELECTRA model)"),DDe.forEach(t),mzo=i(U),Bb=n(U,"LI",{});var GDe=s(Bb);rbe=n(GDe,"STRONG",{});var qRt=s(rbe);fzo=r(qRt,"ernie"),qRt.forEach(t),gzo=r(GDe," \u2014 "),wQ=n(GDe,"A",{href:!0});var jRt=s(wQ);hzo=r(jRt,"ErnieForCausalLM"),jRt.forEach(t),uzo=r(GDe," (ERNIE model)"),GDe.forEach(t),pzo=i(U),Ib=n(U,"LI",{});var ODe=s(Ib);tbe=n(ODe,"STRONG",{});var DRt=s(tbe);_zo=r(DRt,"gpt2"),DRt.forEach(t),bzo=r(ODe," \u2014 "),AQ=n(ODe,"A",{href:!0});var GRt=s(AQ);vzo=r(GRt,"GPT2LMHeadModel"),GRt.forEach(t),Fzo=r(ODe," (OpenAI GPT-2 model)"),ODe.forEach(t),Tzo=i(U),Nb=n(U,"LI",{});var VDe=s(Nb);abe=n(VDe,"STRONG",{});var ORt=s(abe);Mzo=r(ORt,"gpt_neo"),ORt.forEach(t),Ezo=r(VDe," \u2014 "),LQ=n(VDe,"A",{href:!0});var VRt=s(LQ);Czo=r(VRt,"GPTNeoForCausalLM"),VRt.forEach(t),wzo=r(VDe," (GPT Neo model)"),VDe.forEach(t),Azo=i(U),qb=n(U,"LI",{});var XDe=s(qb);nbe=n(XDe,"STRONG",{});var XRt=s(nbe);Lzo=r(XRt,"gpt_neox"),XRt.forEach(t),yzo=r(XDe," \u2014 "),yQ=n(XDe,"A",{href:!0});var zRt=s(yQ);xzo=r(zRt,"GPTNeoXForCausalLM"),zRt.forEach(t),$zo=r(XDe," (GPT NeoX model)"),XDe.forEach(t),kzo=i(U),jb=n(U,"LI",{});var zDe=s(jb);sbe=n(zDe,"STRONG",{});var QRt=s(sbe);Szo=r(QRt,"gpt_neox_japanese"),QRt.forEach(t),Rzo=r(zDe," \u2014 "),xQ=n(zDe,"A",{href:!0});var WRt=s(xQ);Pzo=r(WRt,"GPTNeoXJapaneseForCausalLM"),WRt.forEach(t),Bzo=r(zDe," (GPT NeoX Japanese model)"),zDe.forEach(t),Izo=i(U),Db=n(U,"LI",{});var QDe=s(Db);lbe=n(QDe,"STRONG",{});var URt=s(lbe);Nzo=r(URt,"gptj"),URt.forEach(t),qzo=r(QDe," \u2014 "),$Q=n(QDe,"A",{href:!0});var HRt=s($Q);jzo=r(HRt,"GPTJForCausalLM"),HRt.forEach(t),Dzo=r(QDe," (GPT-J model)"),QDe.forEach(t),Gzo=i(U),Gb=n(U,"LI",{});var WDe=s(Gb);ibe=n(WDe,"STRONG",{});var JRt=s(ibe);Ozo=r(JRt,"marian"),JRt.forEach(t),Vzo=r(WDe," \u2014 "),kQ=n(WDe,"A",{href:!0});var YRt=s(kQ);Xzo=r(YRt,"MarianForCausalLM"),YRt.forEach(t),zzo=r(WDe," (Marian model)"),WDe.forEach(t),Qzo=i(U),Ob=n(U,"LI",{});var UDe=s(Ob);dbe=n(UDe,"STRONG",{});var KRt=s(dbe);Wzo=r(KRt,"mbart"),KRt.forEach(t),Uzo=r(UDe," \u2014 "),SQ=n(UDe,"A",{href:!0});var ZRt=s(SQ);Hzo=r(ZRt,"MBartForCausalLM"),ZRt.forEach(t),Jzo=r(UDe," (mBART model)"),UDe.forEach(t),Yzo=i(U),Vb=n(U,"LI",{});var HDe=s(Vb);cbe=n(HDe,"STRONG",{});var ePt=s(cbe);Kzo=r(ePt,"megatron-bert"),ePt.forEach(t),Zzo=r(HDe," \u2014 "),RQ=n(HDe,"A",{href:!0});var oPt=s(RQ);eQo=r(oPt,"MegatronBertForCausalLM"),oPt.forEach(t),oQo=r(HDe," (Megatron-BERT model)"),HDe.forEach(t),rQo=i(U),Xb=n(U,"LI",{});var JDe=s(Xb);mbe=n(JDe,"STRONG",{});var rPt=s(mbe);tQo=r(rPt,"mvp"),rPt.forEach(t),aQo=r(JDe," \u2014 "),PQ=n(JDe,"A",{href:!0});var tPt=s(PQ);nQo=r(tPt,"MvpForCausalLM"),tPt.forEach(t),sQo=r(JDe," (MVP model)"),JDe.forEach(t),lQo=i(U),zb=n(U,"LI",{});var YDe=s(zb);fbe=n(YDe,"STRONG",{});var aPt=s(fbe);iQo=r(aPt,"openai-gpt"),aPt.forEach(t),dQo=r(YDe," \u2014 "),BQ=n(YDe,"A",{href:!0});var nPt=s(BQ);cQo=r(nPt,"OpenAIGPTLMHeadModel"),nPt.forEach(t),mQo=r(YDe," (OpenAI GPT model)"),YDe.forEach(t),fQo=i(U),Qb=n(U,"LI",{});var KDe=s(Qb);gbe=n(KDe,"STRONG",{});var sPt=s(gbe);gQo=r(sPt,"opt"),sPt.forEach(t),hQo=r(KDe," \u2014 "),IQ=n(KDe,"A",{href:!0});var lPt=s(IQ);uQo=r(lPt,"OPTForCausalLM"),lPt.forEach(t),pQo=r(KDe," (OPT model)"),KDe.forEach(t),_Qo=i(U),Wb=n(U,"LI",{});var ZDe=s(Wb);hbe=n(ZDe,"STRONG",{});var iPt=s(hbe);bQo=r(iPt,"pegasus"),iPt.forEach(t),vQo=r(ZDe," \u2014 "),NQ=n(ZDe,"A",{href:!0});var dPt=s(NQ);FQo=r(dPt,"PegasusForCausalLM"),dPt.forEach(t),TQo=r(ZDe," (Pegasus model)"),ZDe.forEach(t),MQo=i(U),Ub=n(U,"LI",{});var eGe=s(Ub);ube=n(eGe,"STRONG",{});var cPt=s(ube);EQo=r(cPt,"plbart"),cPt.forEach(t),CQo=r(eGe," \u2014 "),qQ=n(eGe,"A",{href:!0});var mPt=s(qQ);wQo=r(mPt,"PLBartForCausalLM"),mPt.forEach(t),AQo=r(eGe," (PLBart model)"),eGe.forEach(t),LQo=i(U),Hb=n(U,"LI",{});var oGe=s(Hb);pbe=n(oGe,"STRONG",{});var fPt=s(pbe);yQo=r(fPt,"prophetnet"),fPt.forEach(t),xQo=r(oGe," \u2014 "),jQ=n(oGe,"A",{href:!0});var gPt=s(jQ);$Qo=r(gPt,"ProphetNetForCausalLM"),gPt.forEach(t),kQo=r(oGe," (ProphetNet model)"),oGe.forEach(t),SQo=i(U),Jb=n(U,"LI",{});var rGe=s(Jb);_be=n(rGe,"STRONG",{});var hPt=s(_be);RQo=r(hPt,"qdqbert"),hPt.forEach(t),PQo=r(rGe," \u2014 "),DQ=n(rGe,"A",{href:!0});var uPt=s(DQ);BQo=r(uPt,"QDQBertLMHeadModel"),uPt.forEach(t),IQo=r(rGe," (QDQBert model)"),rGe.forEach(t),NQo=i(U),Yb=n(U,"LI",{});var tGe=s(Yb);bbe=n(tGe,"STRONG",{});var pPt=s(bbe);qQo=r(pPt,"reformer"),pPt.forEach(t),jQo=r(tGe," \u2014 "),GQ=n(tGe,"A",{href:!0});var _Pt=s(GQ);DQo=r(_Pt,"ReformerModelWithLMHead"),_Pt.forEach(t),GQo=r(tGe," (Reformer model)"),tGe.forEach(t),OQo=i(U),Kb=n(U,"LI",{});var aGe=s(Kb);vbe=n(aGe,"STRONG",{});var bPt=s(vbe);VQo=r(bPt,"rembert"),bPt.forEach(t),XQo=r(aGe," \u2014 "),OQ=n(aGe,"A",{href:!0});var vPt=s(OQ);zQo=r(vPt,"RemBertForCausalLM"),vPt.forEach(t),QQo=r(aGe," (RemBERT model)"),aGe.forEach(t),WQo=i(U),Zb=n(U,"LI",{});var nGe=s(Zb);Fbe=n(nGe,"STRONG",{});var FPt=s(Fbe);UQo=r(FPt,"roberta"),FPt.forEach(t),HQo=r(nGe," \u2014 "),VQ=n(nGe,"A",{href:!0});var TPt=s(VQ);JQo=r(TPt,"RobertaForCausalLM"),TPt.forEach(t),YQo=r(nGe," (RoBERTa model)"),nGe.forEach(t),KQo=i(U),ev=n(U,"LI",{});var sGe=s(ev);Tbe=n(sGe,"STRONG",{});var MPt=s(Tbe);ZQo=r(MPt,"roformer"),MPt.forEach(t),eWo=r(sGe," \u2014 "),XQ=n(sGe,"A",{href:!0});var EPt=s(XQ);oWo=r(EPt,"RoFormerForCausalLM"),EPt.forEach(t),rWo=r(sGe," (RoFormer model)"),sGe.forEach(t),tWo=i(U),ov=n(U,"LI",{});var lGe=s(ov);Mbe=n(lGe,"STRONG",{});var CPt=s(Mbe);aWo=r(CPt,"speech_to_text_2"),CPt.forEach(t),nWo=r(lGe," \u2014 "),zQ=n(lGe,"A",{href:!0});var wPt=s(zQ);sWo=r(wPt,"Speech2Text2ForCausalLM"),wPt.forEach(t),lWo=r(lGe," (Speech2Text2 model)"),lGe.forEach(t),iWo=i(U),rv=n(U,"LI",{});var iGe=s(rv);Ebe=n(iGe,"STRONG",{});var APt=s(Ebe);dWo=r(APt,"transfo-xl"),APt.forEach(t),cWo=r(iGe," \u2014 "),QQ=n(iGe,"A",{href:!0});var LPt=s(QQ);mWo=r(LPt,"TransfoXLLMHeadModel"),LPt.forEach(t),fWo=r(iGe," (Transformer-XL model)"),iGe.forEach(t),gWo=i(U),tv=n(U,"LI",{});var dGe=s(tv);Cbe=n(dGe,"STRONG",{});var yPt=s(Cbe);hWo=r(yPt,"trocr"),yPt.forEach(t),uWo=r(dGe," \u2014 "),WQ=n(dGe,"A",{href:!0});var xPt=s(WQ);pWo=r(xPt,"TrOCRForCausalLM"),xPt.forEach(t),_Wo=r(dGe," (TrOCR model)"),dGe.forEach(t),bWo=i(U),av=n(U,"LI",{});var cGe=s(av);wbe=n(cGe,"STRONG",{});var $Pt=s(wbe);vWo=r($Pt,"xglm"),$Pt.forEach(t),FWo=r(cGe," \u2014 "),UQ=n(cGe,"A",{href:!0});var kPt=s(UQ);TWo=r(kPt,"XGLMForCausalLM"),kPt.forEach(t),MWo=r(cGe," (XGLM model)"),cGe.forEach(t),EWo=i(U),nv=n(U,"LI",{});var mGe=s(nv);Abe=n(mGe,"STRONG",{});var SPt=s(Abe);CWo=r(SPt,"xlm"),SPt.forEach(t),wWo=r(mGe," \u2014 "),HQ=n(mGe,"A",{href:!0});var RPt=s(HQ);AWo=r(RPt,"XLMWithLMHeadModel"),RPt.forEach(t),LWo=r(mGe," (XLM model)"),mGe.forEach(t),yWo=i(U),sv=n(U,"LI",{});var fGe=s(sv);Lbe=n(fGe,"STRONG",{});var PPt=s(Lbe);xWo=r(PPt,"xlm-prophetnet"),PPt.forEach(t),$Wo=r(fGe," \u2014 "),JQ=n(fGe,"A",{href:!0});var BPt=s(JQ);kWo=r(BPt,"XLMProphetNetForCausalLM"),BPt.forEach(t),SWo=r(fGe," (XLM-ProphetNet model)"),fGe.forEach(t),RWo=i(U),lv=n(U,"LI",{});var gGe=s(lv);ybe=n(gGe,"STRONG",{});var IPt=s(ybe);PWo=r(IPt,"xlm-roberta"),IPt.forEach(t),BWo=r(gGe," \u2014 "),YQ=n(gGe,"A",{href:!0});var NPt=s(YQ);IWo=r(NPt,"XLMRobertaForCausalLM"),NPt.forEach(t),NWo=r(gGe," (XLM-RoBERTa model)"),gGe.forEach(t),qWo=i(U),iv=n(U,"LI",{});var hGe=s(iv);xbe=n(hGe,"STRONG",{});var qPt=s(xbe);jWo=r(qPt,"xlm-roberta-xl"),qPt.forEach(t),DWo=r(hGe," \u2014 "),KQ=n(hGe,"A",{href:!0});var jPt=s(KQ);GWo=r(jPt,"XLMRobertaXLForCausalLM"),jPt.forEach(t),OWo=r(hGe," (XLM-RoBERTa-XL model)"),hGe.forEach(t),VWo=i(U),dv=n(U,"LI",{});var uGe=s(dv);$be=n(uGe,"STRONG",{});var DPt=s($be);XWo=r(DPt,"xlnet"),DPt.forEach(t),zWo=r(uGe," \u2014 "),ZQ=n(uGe,"A",{href:!0});var GPt=s(ZQ);QWo=r(GPt,"XLNetLMHeadModel"),GPt.forEach(t),WWo=r(uGe," (XLNet model)"),uGe.forEach(t),U.forEach(t),UWo=i(Ma),cv=n(Ma,"P",{});var pGe=s(cv);HWo=r(pGe,"The model is set in evaluation mode by default using "),kbe=n(pGe,"CODE",{});var OPt=s(kbe);JWo=r(OPt,"model.eval()"),OPt.forEach(t),YWo=r(pGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sbe=n(pGe,"CODE",{});var VPt=s(Sbe);KWo=r(VPt,"model.train()"),VPt.forEach(t),pGe.forEach(t),ZWo=i(Ma),T(mv.$$.fragment,Ma),Ma.forEach(t),yl.forEach(t),YZe=i(m),Ad=n(m,"H2",{class:!0});var mro=s(Ad);fv=n(mro,"A",{id:!0,class:!0,href:!0});var XPt=s(fv);Rbe=n(XPt,"SPAN",{});var zPt=s(Rbe);T(jx.$$.fragment,zPt),zPt.forEach(t),XPt.forEach(t),eUo=i(mro),Pbe=n(mro,"SPAN",{});var QPt=s(Pbe);oUo=r(QPt,"AutoModelForMaskedLM"),QPt.forEach(t),mro.forEach(t),KZe=i(m),No=n(m,"DIV",{class:!0});var xl=s(No);T(Dx.$$.fragment,xl),rUo=i(xl),Ld=n(xl,"P",{});var eie=s(Ld);tUo=r(eie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eW=n(eie,"A",{href:!0});var WPt=s(eW);aUo=r(WPt,"from_pretrained()"),WPt.forEach(t),nUo=r(eie," class method or the "),oW=n(eie,"A",{href:!0});var UPt=s(oW);sUo=r(UPt,"from_config()"),UPt.forEach(t),lUo=r(eie,` class
method.`),eie.forEach(t),iUo=i(xl),Gx=n(xl,"P",{});var fro=s(Gx);dUo=r(fro,"This class cannot be instantiated directly using "),Bbe=n(fro,"CODE",{});var HPt=s(Bbe);cUo=r(HPt,"__init__()"),HPt.forEach(t),mUo=r(fro," (throws an error)."),fro.forEach(t),fUo=i(xl),Ft=n(xl,"DIV",{class:!0});var Ky=s(Ft);T(Ox.$$.fragment,Ky),gUo=i(Ky),Ibe=n(Ky,"P",{});var JPt=s(Ibe);hUo=r(JPt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JPt.forEach(t),uUo=i(Ky),yd=n(Ky,"P",{});var oie=s(yd);pUo=r(oie,`Note:
Loading a model from its configuration file does `),Nbe=n(oie,"STRONG",{});var YPt=s(Nbe);_Uo=r(YPt,"not"),YPt.forEach(t),bUo=r(oie,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(oie,"A",{href:!0});var KPt=s(rW);vUo=r(KPt,"from_pretrained()"),KPt.forEach(t),FUo=r(oie," to load the model weights."),oie.forEach(t),TUo=i(Ky),T(gv.$$.fragment,Ky),Ky.forEach(t),MUo=i(xl),ro=n(xl,"DIV",{class:!0});var Ea=s(ro);T(Vx.$$.fragment,Ea),EUo=i(Ea),qbe=n(Ea,"P",{});var ZPt=s(qbe);CUo=r(ZPt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZPt.forEach(t),wUo=i(Ea),Za=n(Ea,"P",{});var Zy=s(Za);AUo=r(Zy,"The model class to instantiate is selected based on the "),jbe=n(Zy,"CODE",{});var eBt=s(jbe);LUo=r(eBt,"model_type"),eBt.forEach(t),yUo=r(Zy,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(Zy,"CODE",{});var oBt=s(Dbe);xUo=r(oBt,"pretrained_model_name_or_path"),oBt.forEach(t),$Uo=r(Zy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(Zy,"CODE",{});var rBt=s(Gbe);kUo=r(rBt,"pretrained_model_name_or_path"),rBt.forEach(t),SUo=r(Zy,":"),Zy.forEach(t),RUo=i(Ea),J=n(Ea,"UL",{});var K=s(J);hv=n(K,"LI",{});var _Ge=s(hv);Obe=n(_Ge,"STRONG",{});var tBt=s(Obe);PUo=r(tBt,"albert"),tBt.forEach(t),BUo=r(_Ge," \u2014 "),tW=n(_Ge,"A",{href:!0});var aBt=s(tW);IUo=r(aBt,"AlbertForMaskedLM"),aBt.forEach(t),NUo=r(_Ge," (ALBERT model)"),_Ge.forEach(t),qUo=i(K),uv=n(K,"LI",{});var bGe=s(uv);Vbe=n(bGe,"STRONG",{});var nBt=s(Vbe);jUo=r(nBt,"bart"),nBt.forEach(t),DUo=r(bGe," \u2014 "),aW=n(bGe,"A",{href:!0});var sBt=s(aW);GUo=r(sBt,"BartForConditionalGeneration"),sBt.forEach(t),OUo=r(bGe," (BART model)"),bGe.forEach(t),VUo=i(K),pv=n(K,"LI",{});var vGe=s(pv);Xbe=n(vGe,"STRONG",{});var lBt=s(Xbe);XUo=r(lBt,"bert"),lBt.forEach(t),zUo=r(vGe," \u2014 "),nW=n(vGe,"A",{href:!0});var iBt=s(nW);QUo=r(iBt,"BertForMaskedLM"),iBt.forEach(t),WUo=r(vGe," (BERT model)"),vGe.forEach(t),UUo=i(K),_v=n(K,"LI",{});var FGe=s(_v);zbe=n(FGe,"STRONG",{});var dBt=s(zbe);HUo=r(dBt,"big_bird"),dBt.forEach(t),JUo=r(FGe," \u2014 "),sW=n(FGe,"A",{href:!0});var cBt=s(sW);YUo=r(cBt,"BigBirdForMaskedLM"),cBt.forEach(t),KUo=r(FGe," (BigBird model)"),FGe.forEach(t),ZUo=i(K),bv=n(K,"LI",{});var TGe=s(bv);Qbe=n(TGe,"STRONG",{});var mBt=s(Qbe);eHo=r(mBt,"camembert"),mBt.forEach(t),oHo=r(TGe," \u2014 "),lW=n(TGe,"A",{href:!0});var fBt=s(lW);rHo=r(fBt,"CamembertForMaskedLM"),fBt.forEach(t),tHo=r(TGe," (CamemBERT model)"),TGe.forEach(t),aHo=i(K),vv=n(K,"LI",{});var MGe=s(vv);Wbe=n(MGe,"STRONG",{});var gBt=s(Wbe);nHo=r(gBt,"convbert"),gBt.forEach(t),sHo=r(MGe," \u2014 "),iW=n(MGe,"A",{href:!0});var hBt=s(iW);lHo=r(hBt,"ConvBertForMaskedLM"),hBt.forEach(t),iHo=r(MGe," (ConvBERT model)"),MGe.forEach(t),dHo=i(K),Fv=n(K,"LI",{});var EGe=s(Fv);Ube=n(EGe,"STRONG",{});var uBt=s(Ube);cHo=r(uBt,"data2vec-text"),uBt.forEach(t),mHo=r(EGe," \u2014 "),dW=n(EGe,"A",{href:!0});var pBt=s(dW);fHo=r(pBt,"Data2VecTextForMaskedLM"),pBt.forEach(t),gHo=r(EGe," (Data2VecText model)"),EGe.forEach(t),hHo=i(K),Tv=n(K,"LI",{});var CGe=s(Tv);Hbe=n(CGe,"STRONG",{});var _Bt=s(Hbe);uHo=r(_Bt,"deberta"),_Bt.forEach(t),pHo=r(CGe," \u2014 "),cW=n(CGe,"A",{href:!0});var bBt=s(cW);_Ho=r(bBt,"DebertaForMaskedLM"),bBt.forEach(t),bHo=r(CGe," (DeBERTa model)"),CGe.forEach(t),vHo=i(K),Mv=n(K,"LI",{});var wGe=s(Mv);Jbe=n(wGe,"STRONG",{});var vBt=s(Jbe);FHo=r(vBt,"deberta-v2"),vBt.forEach(t),THo=r(wGe," \u2014 "),mW=n(wGe,"A",{href:!0});var FBt=s(mW);MHo=r(FBt,"DebertaV2ForMaskedLM"),FBt.forEach(t),EHo=r(wGe," (DeBERTa-v2 model)"),wGe.forEach(t),CHo=i(K),Ev=n(K,"LI",{});var AGe=s(Ev);Ybe=n(AGe,"STRONG",{});var TBt=s(Ybe);wHo=r(TBt,"distilbert"),TBt.forEach(t),AHo=r(AGe," \u2014 "),fW=n(AGe,"A",{href:!0});var MBt=s(fW);LHo=r(MBt,"DistilBertForMaskedLM"),MBt.forEach(t),yHo=r(AGe," (DistilBERT model)"),AGe.forEach(t),xHo=i(K),Cv=n(K,"LI",{});var LGe=s(Cv);Kbe=n(LGe,"STRONG",{});var EBt=s(Kbe);$Ho=r(EBt,"electra"),EBt.forEach(t),kHo=r(LGe," \u2014 "),gW=n(LGe,"A",{href:!0});var CBt=s(gW);SHo=r(CBt,"ElectraForMaskedLM"),CBt.forEach(t),RHo=r(LGe," (ELECTRA model)"),LGe.forEach(t),PHo=i(K),wv=n(K,"LI",{});var yGe=s(wv);Zbe=n(yGe,"STRONG",{});var wBt=s(Zbe);BHo=r(wBt,"ernie"),wBt.forEach(t),IHo=r(yGe," \u2014 "),hW=n(yGe,"A",{href:!0});var ABt=s(hW);NHo=r(ABt,"ErnieForMaskedLM"),ABt.forEach(t),qHo=r(yGe," (ERNIE model)"),yGe.forEach(t),jHo=i(K),Av=n(K,"LI",{});var xGe=s(Av);eve=n(xGe,"STRONG",{});var LBt=s(eve);DHo=r(LBt,"flaubert"),LBt.forEach(t),GHo=r(xGe," \u2014 "),uW=n(xGe,"A",{href:!0});var yBt=s(uW);OHo=r(yBt,"FlaubertWithLMHeadModel"),yBt.forEach(t),VHo=r(xGe," (FlauBERT model)"),xGe.forEach(t),XHo=i(K),Lv=n(K,"LI",{});var $Ge=s(Lv);ove=n($Ge,"STRONG",{});var xBt=s(ove);zHo=r(xBt,"fnet"),xBt.forEach(t),QHo=r($Ge," \u2014 "),pW=n($Ge,"A",{href:!0});var $Bt=s(pW);WHo=r($Bt,"FNetForMaskedLM"),$Bt.forEach(t),UHo=r($Ge," (FNet model)"),$Ge.forEach(t),HHo=i(K),yv=n(K,"LI",{});var kGe=s(yv);rve=n(kGe,"STRONG",{});var kBt=s(rve);JHo=r(kBt,"funnel"),kBt.forEach(t),YHo=r(kGe," \u2014 "),_W=n(kGe,"A",{href:!0});var SBt=s(_W);KHo=r(SBt,"FunnelForMaskedLM"),SBt.forEach(t),ZHo=r(kGe," (Funnel Transformer model)"),kGe.forEach(t),eJo=i(K),xv=n(K,"LI",{});var SGe=s(xv);tve=n(SGe,"STRONG",{});var RBt=s(tve);oJo=r(RBt,"ibert"),RBt.forEach(t),rJo=r(SGe," \u2014 "),bW=n(SGe,"A",{href:!0});var PBt=s(bW);tJo=r(PBt,"IBertForMaskedLM"),PBt.forEach(t),aJo=r(SGe," (I-BERT model)"),SGe.forEach(t),nJo=i(K),$v=n(K,"LI",{});var RGe=s($v);ave=n(RGe,"STRONG",{});var BBt=s(ave);sJo=r(BBt,"layoutlm"),BBt.forEach(t),lJo=r(RGe," \u2014 "),vW=n(RGe,"A",{href:!0});var IBt=s(vW);iJo=r(IBt,"LayoutLMForMaskedLM"),IBt.forEach(t),dJo=r(RGe," (LayoutLM model)"),RGe.forEach(t),cJo=i(K),kv=n(K,"LI",{});var PGe=s(kv);nve=n(PGe,"STRONG",{});var NBt=s(nve);mJo=r(NBt,"longformer"),NBt.forEach(t),fJo=r(PGe," \u2014 "),FW=n(PGe,"A",{href:!0});var qBt=s(FW);gJo=r(qBt,"LongformerForMaskedLM"),qBt.forEach(t),hJo=r(PGe," (Longformer model)"),PGe.forEach(t),uJo=i(K),Sv=n(K,"LI",{});var BGe=s(Sv);sve=n(BGe,"STRONG",{});var jBt=s(sve);pJo=r(jBt,"luke"),jBt.forEach(t),_Jo=r(BGe," \u2014 "),TW=n(BGe,"A",{href:!0});var DBt=s(TW);bJo=r(DBt,"LukeForMaskedLM"),DBt.forEach(t),vJo=r(BGe," (LUKE model)"),BGe.forEach(t),FJo=i(K),Rv=n(K,"LI",{});var IGe=s(Rv);lve=n(IGe,"STRONG",{});var GBt=s(lve);TJo=r(GBt,"mbart"),GBt.forEach(t),MJo=r(IGe," \u2014 "),MW=n(IGe,"A",{href:!0});var OBt=s(MW);EJo=r(OBt,"MBartForConditionalGeneration"),OBt.forEach(t),CJo=r(IGe," (mBART model)"),IGe.forEach(t),wJo=i(K),Pv=n(K,"LI",{});var NGe=s(Pv);ive=n(NGe,"STRONG",{});var VBt=s(ive);AJo=r(VBt,"megatron-bert"),VBt.forEach(t),LJo=r(NGe," \u2014 "),EW=n(NGe,"A",{href:!0});var XBt=s(EW);yJo=r(XBt,"MegatronBertForMaskedLM"),XBt.forEach(t),xJo=r(NGe," (Megatron-BERT model)"),NGe.forEach(t),$Jo=i(K),Bv=n(K,"LI",{});var qGe=s(Bv);dve=n(qGe,"STRONG",{});var zBt=s(dve);kJo=r(zBt,"mobilebert"),zBt.forEach(t),SJo=r(qGe," \u2014 "),CW=n(qGe,"A",{href:!0});var QBt=s(CW);RJo=r(QBt,"MobileBertForMaskedLM"),QBt.forEach(t),PJo=r(qGe," (MobileBERT model)"),qGe.forEach(t),BJo=i(K),Iv=n(K,"LI",{});var jGe=s(Iv);cve=n(jGe,"STRONG",{});var WBt=s(cve);IJo=r(WBt,"mpnet"),WBt.forEach(t),NJo=r(jGe," \u2014 "),wW=n(jGe,"A",{href:!0});var UBt=s(wW);qJo=r(UBt,"MPNetForMaskedLM"),UBt.forEach(t),jJo=r(jGe," (MPNet model)"),jGe.forEach(t),DJo=i(K),Nv=n(K,"LI",{});var DGe=s(Nv);mve=n(DGe,"STRONG",{});var HBt=s(mve);GJo=r(HBt,"mvp"),HBt.forEach(t),OJo=r(DGe," \u2014 "),AW=n(DGe,"A",{href:!0});var JBt=s(AW);VJo=r(JBt,"MvpForConditionalGeneration"),JBt.forEach(t),XJo=r(DGe," (MVP model)"),DGe.forEach(t),zJo=i(K),qv=n(K,"LI",{});var GGe=s(qv);fve=n(GGe,"STRONG",{});var YBt=s(fve);QJo=r(YBt,"nezha"),YBt.forEach(t),WJo=r(GGe," \u2014 "),LW=n(GGe,"A",{href:!0});var KBt=s(LW);UJo=r(KBt,"NezhaForMaskedLM"),KBt.forEach(t),HJo=r(GGe," (Nezha model)"),GGe.forEach(t),JJo=i(K),jv=n(K,"LI",{});var OGe=s(jv);gve=n(OGe,"STRONG",{});var ZBt=s(gve);YJo=r(ZBt,"nystromformer"),ZBt.forEach(t),KJo=r(OGe," \u2014 "),yW=n(OGe,"A",{href:!0});var eIt=s(yW);ZJo=r(eIt,"NystromformerForMaskedLM"),eIt.forEach(t),eYo=r(OGe," (Nystr\xF6mformer model)"),OGe.forEach(t),oYo=i(K),Dv=n(K,"LI",{});var VGe=s(Dv);hve=n(VGe,"STRONG",{});var oIt=s(hve);rYo=r(oIt,"perceiver"),oIt.forEach(t),tYo=r(VGe," \u2014 "),xW=n(VGe,"A",{href:!0});var rIt=s(xW);aYo=r(rIt,"PerceiverForMaskedLM"),rIt.forEach(t),nYo=r(VGe," (Perceiver model)"),VGe.forEach(t),sYo=i(K),Gv=n(K,"LI",{});var XGe=s(Gv);uve=n(XGe,"STRONG",{});var tIt=s(uve);lYo=r(tIt,"qdqbert"),tIt.forEach(t),iYo=r(XGe," \u2014 "),$W=n(XGe,"A",{href:!0});var aIt=s($W);dYo=r(aIt,"QDQBertForMaskedLM"),aIt.forEach(t),cYo=r(XGe," (QDQBert model)"),XGe.forEach(t),mYo=i(K),Ov=n(K,"LI",{});var zGe=s(Ov);pve=n(zGe,"STRONG",{});var nIt=s(pve);fYo=r(nIt,"reformer"),nIt.forEach(t),gYo=r(zGe," \u2014 "),kW=n(zGe,"A",{href:!0});var sIt=s(kW);hYo=r(sIt,"ReformerForMaskedLM"),sIt.forEach(t),uYo=r(zGe," (Reformer model)"),zGe.forEach(t),pYo=i(K),Vv=n(K,"LI",{});var QGe=s(Vv);_ve=n(QGe,"STRONG",{});var lIt=s(_ve);_Yo=r(lIt,"rembert"),lIt.forEach(t),bYo=r(QGe," \u2014 "),SW=n(QGe,"A",{href:!0});var iIt=s(SW);vYo=r(iIt,"RemBertForMaskedLM"),iIt.forEach(t),FYo=r(QGe," (RemBERT model)"),QGe.forEach(t),TYo=i(K),Xv=n(K,"LI",{});var WGe=s(Xv);bve=n(WGe,"STRONG",{});var dIt=s(bve);MYo=r(dIt,"roberta"),dIt.forEach(t),EYo=r(WGe," \u2014 "),RW=n(WGe,"A",{href:!0});var cIt=s(RW);CYo=r(cIt,"RobertaForMaskedLM"),cIt.forEach(t),wYo=r(WGe," (RoBERTa model)"),WGe.forEach(t),AYo=i(K),zv=n(K,"LI",{});var UGe=s(zv);vve=n(UGe,"STRONG",{});var mIt=s(vve);LYo=r(mIt,"roformer"),mIt.forEach(t),yYo=r(UGe," \u2014 "),PW=n(UGe,"A",{href:!0});var fIt=s(PW);xYo=r(fIt,"RoFormerForMaskedLM"),fIt.forEach(t),$Yo=r(UGe," (RoFormer model)"),UGe.forEach(t),kYo=i(K),Qv=n(K,"LI",{});var HGe=s(Qv);Fve=n(HGe,"STRONG",{});var gIt=s(Fve);SYo=r(gIt,"squeezebert"),gIt.forEach(t),RYo=r(HGe," \u2014 "),BW=n(HGe,"A",{href:!0});var hIt=s(BW);PYo=r(hIt,"SqueezeBertForMaskedLM"),hIt.forEach(t),BYo=r(HGe," (SqueezeBERT model)"),HGe.forEach(t),IYo=i(K),Wv=n(K,"LI",{});var JGe=s(Wv);Tve=n(JGe,"STRONG",{});var uIt=s(Tve);NYo=r(uIt,"tapas"),uIt.forEach(t),qYo=r(JGe," \u2014 "),IW=n(JGe,"A",{href:!0});var pIt=s(IW);jYo=r(pIt,"TapasForMaskedLM"),pIt.forEach(t),DYo=r(JGe," (TAPAS model)"),JGe.forEach(t),GYo=i(K),Uv=n(K,"LI",{});var YGe=s(Uv);Mve=n(YGe,"STRONG",{});var _It=s(Mve);OYo=r(_It,"wav2vec2"),_It.forEach(t),VYo=r(YGe," \u2014 "),Eve=n(YGe,"CODE",{});var bIt=s(Eve);XYo=r(bIt,"Wav2Vec2ForMaskedLM"),bIt.forEach(t),zYo=r(YGe," (Wav2Vec2 model)"),YGe.forEach(t),QYo=i(K),Hv=n(K,"LI",{});var KGe=s(Hv);Cve=n(KGe,"STRONG",{});var vIt=s(Cve);WYo=r(vIt,"xlm"),vIt.forEach(t),UYo=r(KGe," \u2014 "),NW=n(KGe,"A",{href:!0});var FIt=s(NW);HYo=r(FIt,"XLMWithLMHeadModel"),FIt.forEach(t),JYo=r(KGe," (XLM model)"),KGe.forEach(t),YYo=i(K),Jv=n(K,"LI",{});var ZGe=s(Jv);wve=n(ZGe,"STRONG",{});var TIt=s(wve);KYo=r(TIt,"xlm-roberta"),TIt.forEach(t),ZYo=r(ZGe," \u2014 "),qW=n(ZGe,"A",{href:!0});var MIt=s(qW);eKo=r(MIt,"XLMRobertaForMaskedLM"),MIt.forEach(t),oKo=r(ZGe," (XLM-RoBERTa model)"),ZGe.forEach(t),rKo=i(K),Yv=n(K,"LI",{});var eOe=s(Yv);Ave=n(eOe,"STRONG",{});var EIt=s(Ave);tKo=r(EIt,"xlm-roberta-xl"),EIt.forEach(t),aKo=r(eOe," \u2014 "),jW=n(eOe,"A",{href:!0});var CIt=s(jW);nKo=r(CIt,"XLMRobertaXLForMaskedLM"),CIt.forEach(t),sKo=r(eOe," (XLM-RoBERTa-XL model)"),eOe.forEach(t),lKo=i(K),Kv=n(K,"LI",{});var oOe=s(Kv);Lve=n(oOe,"STRONG",{});var wIt=s(Lve);iKo=r(wIt,"yoso"),wIt.forEach(t),dKo=r(oOe," \u2014 "),DW=n(oOe,"A",{href:!0});var AIt=s(DW);cKo=r(AIt,"YosoForMaskedLM"),AIt.forEach(t),mKo=r(oOe," (YOSO model)"),oOe.forEach(t),K.forEach(t),fKo=i(Ea),Zv=n(Ea,"P",{});var rOe=s(Zv);gKo=r(rOe,"The model is set in evaluation mode by default using "),yve=n(rOe,"CODE",{});var LIt=s(yve);hKo=r(LIt,"model.eval()"),LIt.forEach(t),uKo=r(rOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xve=n(rOe,"CODE",{});var yIt=s(xve);pKo=r(yIt,"model.train()"),yIt.forEach(t),rOe.forEach(t),_Ko=i(Ea),T(eF.$$.fragment,Ea),Ea.forEach(t),xl.forEach(t),ZZe=i(m),xd=n(m,"H2",{class:!0});var gro=s(xd);oF=n(gro,"A",{id:!0,class:!0,href:!0});var xIt=s(oF);$ve=n(xIt,"SPAN",{});var $It=s($ve);T(Xx.$$.fragment,$It),$It.forEach(t),xIt.forEach(t),bKo=i(gro),kve=n(gro,"SPAN",{});var kIt=s(kve);vKo=r(kIt,"AutoModelForSeq2SeqLM"),kIt.forEach(t),gro.forEach(t),eeo=i(m),qo=n(m,"DIV",{class:!0});var $l=s(qo);T(zx.$$.fragment,$l),FKo=i($l),$d=n($l,"P",{});var rie=s($d);TKo=r(rie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),GW=n(rie,"A",{href:!0});var SIt=s(GW);MKo=r(SIt,"from_pretrained()"),SIt.forEach(t),EKo=r(rie," class method or the "),OW=n(rie,"A",{href:!0});var RIt=s(OW);CKo=r(RIt,"from_config()"),RIt.forEach(t),wKo=r(rie,` class
method.`),rie.forEach(t),AKo=i($l),Qx=n($l,"P",{});var hro=s(Qx);LKo=r(hro,"This class cannot be instantiated directly using "),Sve=n(hro,"CODE",{});var PIt=s(Sve);yKo=r(PIt,"__init__()"),PIt.forEach(t),xKo=r(hro," (throws an error)."),hro.forEach(t),$Ko=i($l),Tt=n($l,"DIV",{class:!0});var e8=s(Tt);T(Wx.$$.fragment,e8),kKo=i(e8),Rve=n(e8,"P",{});var BIt=s(Rve);SKo=r(BIt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BIt.forEach(t),RKo=i(e8),kd=n(e8,"P",{});var tie=s(kd);PKo=r(tie,`Note:
Loading a model from its configuration file does `),Pve=n(tie,"STRONG",{});var IIt=s(Pve);BKo=r(IIt,"not"),IIt.forEach(t),IKo=r(tie,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(tie,"A",{href:!0});var NIt=s(VW);NKo=r(NIt,"from_pretrained()"),NIt.forEach(t),qKo=r(tie," to load the model weights."),tie.forEach(t),jKo=i(e8),T(rF.$$.fragment,e8),e8.forEach(t),DKo=i($l),to=n($l,"DIV",{class:!0});var Ca=s(to);T(Ux.$$.fragment,Ca),GKo=i(Ca),Bve=n(Ca,"P",{});var qIt=s(Bve);OKo=r(qIt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qIt.forEach(t),VKo=i(Ca),en=n(Ca,"P",{});var o8=s(en);XKo=r(o8,"The model class to instantiate is selected based on the "),Ive=n(o8,"CODE",{});var jIt=s(Ive);zKo=r(jIt,"model_type"),jIt.forEach(t),QKo=r(o8,` property of the config object (either
passed as an argument or loaded from `),Nve=n(o8,"CODE",{});var DIt=s(Nve);WKo=r(DIt,"pretrained_model_name_or_path"),DIt.forEach(t),UKo=r(o8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qve=n(o8,"CODE",{});var GIt=s(qve);HKo=r(GIt,"pretrained_model_name_or_path"),GIt.forEach(t),JKo=r(o8,":"),o8.forEach(t),YKo=i(Ca),fe=n(Ca,"UL",{});var pe=s(fe);tF=n(pe,"LI",{});var tOe=s(tF);jve=n(tOe,"STRONG",{});var OIt=s(jve);KKo=r(OIt,"bart"),OIt.forEach(t),ZKo=r(tOe," \u2014 "),XW=n(tOe,"A",{href:!0});var VIt=s(XW);eZo=r(VIt,"BartForConditionalGeneration"),VIt.forEach(t),oZo=r(tOe," (BART model)"),tOe.forEach(t),rZo=i(pe),aF=n(pe,"LI",{});var aOe=s(aF);Dve=n(aOe,"STRONG",{});var XIt=s(Dve);tZo=r(XIt,"bigbird_pegasus"),XIt.forEach(t),aZo=r(aOe," \u2014 "),zW=n(aOe,"A",{href:!0});var zIt=s(zW);nZo=r(zIt,"BigBirdPegasusForConditionalGeneration"),zIt.forEach(t),sZo=r(aOe," (BigBird-Pegasus model)"),aOe.forEach(t),lZo=i(pe),nF=n(pe,"LI",{});var nOe=s(nF);Gve=n(nOe,"STRONG",{});var QIt=s(Gve);iZo=r(QIt,"blenderbot"),QIt.forEach(t),dZo=r(nOe," \u2014 "),QW=n(nOe,"A",{href:!0});var WIt=s(QW);cZo=r(WIt,"BlenderbotForConditionalGeneration"),WIt.forEach(t),mZo=r(nOe," (Blenderbot model)"),nOe.forEach(t),fZo=i(pe),sF=n(pe,"LI",{});var sOe=s(sF);Ove=n(sOe,"STRONG",{});var UIt=s(Ove);gZo=r(UIt,"blenderbot-small"),UIt.forEach(t),hZo=r(sOe," \u2014 "),WW=n(sOe,"A",{href:!0});var HIt=s(WW);uZo=r(HIt,"BlenderbotSmallForConditionalGeneration"),HIt.forEach(t),pZo=r(sOe," (BlenderbotSmall model)"),sOe.forEach(t),_Zo=i(pe),lF=n(pe,"LI",{});var lOe=s(lF);Vve=n(lOe,"STRONG",{});var JIt=s(Vve);bZo=r(JIt,"encoder-decoder"),JIt.forEach(t),vZo=r(lOe," \u2014 "),UW=n(lOe,"A",{href:!0});var YIt=s(UW);FZo=r(YIt,"EncoderDecoderModel"),YIt.forEach(t),TZo=r(lOe," (Encoder decoder model)"),lOe.forEach(t),MZo=i(pe),iF=n(pe,"LI",{});var iOe=s(iF);Xve=n(iOe,"STRONG",{});var KIt=s(Xve);EZo=r(KIt,"fsmt"),KIt.forEach(t),CZo=r(iOe," \u2014 "),HW=n(iOe,"A",{href:!0});var ZIt=s(HW);wZo=r(ZIt,"FSMTForConditionalGeneration"),ZIt.forEach(t),AZo=r(iOe," (FairSeq Machine-Translation model)"),iOe.forEach(t),LZo=i(pe),dF=n(pe,"LI",{});var dOe=s(dF);zve=n(dOe,"STRONG",{});var eNt=s(zve);yZo=r(eNt,"led"),eNt.forEach(t),xZo=r(dOe," \u2014 "),JW=n(dOe,"A",{href:!0});var oNt=s(JW);$Zo=r(oNt,"LEDForConditionalGeneration"),oNt.forEach(t),kZo=r(dOe," (LED model)"),dOe.forEach(t),SZo=i(pe),cF=n(pe,"LI",{});var cOe=s(cF);Qve=n(cOe,"STRONG",{});var rNt=s(Qve);RZo=r(rNt,"longt5"),rNt.forEach(t),PZo=r(cOe," \u2014 "),YW=n(cOe,"A",{href:!0});var tNt=s(YW);BZo=r(tNt,"LongT5ForConditionalGeneration"),tNt.forEach(t),IZo=r(cOe," (LongT5 model)"),cOe.forEach(t),NZo=i(pe),mF=n(pe,"LI",{});var mOe=s(mF);Wve=n(mOe,"STRONG",{});var aNt=s(Wve);qZo=r(aNt,"m2m_100"),aNt.forEach(t),jZo=r(mOe," \u2014 "),KW=n(mOe,"A",{href:!0});var nNt=s(KW);DZo=r(nNt,"M2M100ForConditionalGeneration"),nNt.forEach(t),GZo=r(mOe," (M2M100 model)"),mOe.forEach(t),OZo=i(pe),fF=n(pe,"LI",{});var fOe=s(fF);Uve=n(fOe,"STRONG",{});var sNt=s(Uve);VZo=r(sNt,"marian"),sNt.forEach(t),XZo=r(fOe," \u2014 "),ZW=n(fOe,"A",{href:!0});var lNt=s(ZW);zZo=r(lNt,"MarianMTModel"),lNt.forEach(t),QZo=r(fOe," (Marian model)"),fOe.forEach(t),WZo=i(pe),gF=n(pe,"LI",{});var gOe=s(gF);Hve=n(gOe,"STRONG",{});var iNt=s(Hve);UZo=r(iNt,"mbart"),iNt.forEach(t),HZo=r(gOe," \u2014 "),eU=n(gOe,"A",{href:!0});var dNt=s(eU);JZo=r(dNt,"MBartForConditionalGeneration"),dNt.forEach(t),YZo=r(gOe," (mBART model)"),gOe.forEach(t),KZo=i(pe),hF=n(pe,"LI",{});var hOe=s(hF);Jve=n(hOe,"STRONG",{});var cNt=s(Jve);ZZo=r(cNt,"mt5"),cNt.forEach(t),eer=r(hOe," \u2014 "),oU=n(hOe,"A",{href:!0});var mNt=s(oU);oer=r(mNt,"MT5ForConditionalGeneration"),mNt.forEach(t),rer=r(hOe," (MT5 model)"),hOe.forEach(t),ter=i(pe),uF=n(pe,"LI",{});var uOe=s(uF);Yve=n(uOe,"STRONG",{});var fNt=s(Yve);aer=r(fNt,"mvp"),fNt.forEach(t),ner=r(uOe," \u2014 "),rU=n(uOe,"A",{href:!0});var gNt=s(rU);ser=r(gNt,"MvpForConditionalGeneration"),gNt.forEach(t),ler=r(uOe," (MVP model)"),uOe.forEach(t),ier=i(pe),pF=n(pe,"LI",{});var pOe=s(pF);Kve=n(pOe,"STRONG",{});var hNt=s(Kve);der=r(hNt,"nllb"),hNt.forEach(t),cer=r(pOe," \u2014 "),tU=n(pOe,"A",{href:!0});var uNt=s(tU);mer=r(uNt,"M2M100ForConditionalGeneration"),uNt.forEach(t),fer=r(pOe," (NLLB model)"),pOe.forEach(t),ger=i(pe),_F=n(pe,"LI",{});var _Oe=s(_F);Zve=n(_Oe,"STRONG",{});var pNt=s(Zve);her=r(pNt,"pegasus"),pNt.forEach(t),uer=r(_Oe," \u2014 "),aU=n(_Oe,"A",{href:!0});var _Nt=s(aU);per=r(_Nt,"PegasusForConditionalGeneration"),_Nt.forEach(t),_er=r(_Oe," (Pegasus model)"),_Oe.forEach(t),ber=i(pe),bF=n(pe,"LI",{});var bOe=s(bF);eFe=n(bOe,"STRONG",{});var bNt=s(eFe);ver=r(bNt,"pegasus_x"),bNt.forEach(t),Fer=r(bOe," \u2014 "),nU=n(bOe,"A",{href:!0});var vNt=s(nU);Ter=r(vNt,"PegasusXForConditionalGeneration"),vNt.forEach(t),Mer=r(bOe," (PEGASUS-X model)"),bOe.forEach(t),Eer=i(pe),vF=n(pe,"LI",{});var vOe=s(vF);oFe=n(vOe,"STRONG",{});var FNt=s(oFe);Cer=r(FNt,"plbart"),FNt.forEach(t),wer=r(vOe," \u2014 "),sU=n(vOe,"A",{href:!0});var TNt=s(sU);Aer=r(TNt,"PLBartForConditionalGeneration"),TNt.forEach(t),Ler=r(vOe," (PLBart model)"),vOe.forEach(t),yer=i(pe),FF=n(pe,"LI",{});var FOe=s(FF);rFe=n(FOe,"STRONG",{});var MNt=s(rFe);xer=r(MNt,"prophetnet"),MNt.forEach(t),$er=r(FOe," \u2014 "),lU=n(FOe,"A",{href:!0});var ENt=s(lU);ker=r(ENt,"ProphetNetForConditionalGeneration"),ENt.forEach(t),Ser=r(FOe," (ProphetNet model)"),FOe.forEach(t),Rer=i(pe),TF=n(pe,"LI",{});var TOe=s(TF);tFe=n(TOe,"STRONG",{});var CNt=s(tFe);Per=r(CNt,"t5"),CNt.forEach(t),Ber=r(TOe," \u2014 "),iU=n(TOe,"A",{href:!0});var wNt=s(iU);Ier=r(wNt,"T5ForConditionalGeneration"),wNt.forEach(t),Ner=r(TOe," (T5 model)"),TOe.forEach(t),qer=i(pe),MF=n(pe,"LI",{});var MOe=s(MF);aFe=n(MOe,"STRONG",{});var ANt=s(aFe);jer=r(ANt,"xlm-prophetnet"),ANt.forEach(t),Der=r(MOe," \u2014 "),dU=n(MOe,"A",{href:!0});var LNt=s(dU);Ger=r(LNt,"XLMProphetNetForConditionalGeneration"),LNt.forEach(t),Oer=r(MOe," (XLM-ProphetNet model)"),MOe.forEach(t),pe.forEach(t),Ver=i(Ca),EF=n(Ca,"P",{});var EOe=s(EF);Xer=r(EOe,"The model is set in evaluation mode by default using "),nFe=n(EOe,"CODE",{});var yNt=s(nFe);zer=r(yNt,"model.eval()"),yNt.forEach(t),Qer=r(EOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sFe=n(EOe,"CODE",{});var xNt=s(sFe);Wer=r(xNt,"model.train()"),xNt.forEach(t),EOe.forEach(t),Uer=i(Ca),T(CF.$$.fragment,Ca),Ca.forEach(t),$l.forEach(t),oeo=i(m),Sd=n(m,"H2",{class:!0});var uro=s(Sd);wF=n(uro,"A",{id:!0,class:!0,href:!0});var $Nt=s(wF);lFe=n($Nt,"SPAN",{});var kNt=s(lFe);T(Hx.$$.fragment,kNt),kNt.forEach(t),$Nt.forEach(t),Her=i(uro),iFe=n(uro,"SPAN",{});var SNt=s(iFe);Jer=r(SNt,"AutoModelForSequenceClassification"),SNt.forEach(t),uro.forEach(t),reo=i(m),jo=n(m,"DIV",{class:!0});var kl=s(jo);T(Jx.$$.fragment,kl),Yer=i(kl),Rd=n(kl,"P",{});var aie=s(Rd);Ker=r(aie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cU=n(aie,"A",{href:!0});var RNt=s(cU);Zer=r(RNt,"from_pretrained()"),RNt.forEach(t),eor=r(aie," class method or the "),mU=n(aie,"A",{href:!0});var PNt=s(mU);oor=r(PNt,"from_config()"),PNt.forEach(t),ror=r(aie,` class
method.`),aie.forEach(t),tor=i(kl),Yx=n(kl,"P",{});var pro=s(Yx);aor=r(pro,"This class cannot be instantiated directly using "),dFe=n(pro,"CODE",{});var BNt=s(dFe);nor=r(BNt,"__init__()"),BNt.forEach(t),sor=r(pro," (throws an error)."),pro.forEach(t),lor=i(kl),Mt=n(kl,"DIV",{class:!0});var r8=s(Mt);T(Kx.$$.fragment,r8),ior=i(r8),cFe=n(r8,"P",{});var INt=s(cFe);dor=r(INt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),INt.forEach(t),cor=i(r8),Pd=n(r8,"P",{});var nie=s(Pd);mor=r(nie,`Note:
Loading a model from its configuration file does `),mFe=n(nie,"STRONG",{});var NNt=s(mFe);gor=r(NNt,"not"),NNt.forEach(t),hor=r(nie,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(nie,"A",{href:!0});var qNt=s(fU);uor=r(qNt,"from_pretrained()"),qNt.forEach(t),por=r(nie," to load the model weights."),nie.forEach(t),_or=i(r8),T(AF.$$.fragment,r8),r8.forEach(t),bor=i(kl),ao=n(kl,"DIV",{class:!0});var wa=s(ao);T(Zx.$$.fragment,wa),vor=i(wa),fFe=n(wa,"P",{});var jNt=s(fFe);For=r(jNt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jNt.forEach(t),Tor=i(wa),on=n(wa,"P",{});var t8=s(on);Mor=r(t8,"The model class to instantiate is selected based on the "),gFe=n(t8,"CODE",{});var DNt=s(gFe);Eor=r(DNt,"model_type"),DNt.forEach(t),Cor=r(t8,` property of the config object (either
passed as an argument or loaded from `),hFe=n(t8,"CODE",{});var GNt=s(hFe);wor=r(GNt,"pretrained_model_name_or_path"),GNt.forEach(t),Aor=r(t8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uFe=n(t8,"CODE",{});var ONt=s(uFe);Lor=r(ONt,"pretrained_model_name_or_path"),ONt.forEach(t),yor=r(t8,":"),t8.forEach(t),xor=i(wa),B=n(wa,"UL",{});var j=s(B);LF=n(j,"LI",{});var COe=s(LF);pFe=n(COe,"STRONG",{});var VNt=s(pFe);$or=r(VNt,"albert"),VNt.forEach(t),kor=r(COe," \u2014 "),gU=n(COe,"A",{href:!0});var XNt=s(gU);Sor=r(XNt,"AlbertForSequenceClassification"),XNt.forEach(t),Ror=r(COe," (ALBERT model)"),COe.forEach(t),Por=i(j),yF=n(j,"LI",{});var wOe=s(yF);_Fe=n(wOe,"STRONG",{});var zNt=s(_Fe);Bor=r(zNt,"bart"),zNt.forEach(t),Ior=r(wOe," \u2014 "),hU=n(wOe,"A",{href:!0});var QNt=s(hU);Nor=r(QNt,"BartForSequenceClassification"),QNt.forEach(t),qor=r(wOe," (BART model)"),wOe.forEach(t),jor=i(j),xF=n(j,"LI",{});var AOe=s(xF);bFe=n(AOe,"STRONG",{});var WNt=s(bFe);Dor=r(WNt,"bert"),WNt.forEach(t),Gor=r(AOe," \u2014 "),uU=n(AOe,"A",{href:!0});var UNt=s(uU);Oor=r(UNt,"BertForSequenceClassification"),UNt.forEach(t),Vor=r(AOe," (BERT model)"),AOe.forEach(t),Xor=i(j),$F=n(j,"LI",{});var LOe=s($F);vFe=n(LOe,"STRONG",{});var HNt=s(vFe);zor=r(HNt,"big_bird"),HNt.forEach(t),Qor=r(LOe," \u2014 "),pU=n(LOe,"A",{href:!0});var JNt=s(pU);Wor=r(JNt,"BigBirdForSequenceClassification"),JNt.forEach(t),Uor=r(LOe," (BigBird model)"),LOe.forEach(t),Hor=i(j),kF=n(j,"LI",{});var yOe=s(kF);FFe=n(yOe,"STRONG",{});var YNt=s(FFe);Jor=r(YNt,"bigbird_pegasus"),YNt.forEach(t),Yor=r(yOe," \u2014 "),_U=n(yOe,"A",{href:!0});var KNt=s(_U);Kor=r(KNt,"BigBirdPegasusForSequenceClassification"),KNt.forEach(t),Zor=r(yOe," (BigBird-Pegasus model)"),yOe.forEach(t),err=i(j),SF=n(j,"LI",{});var xOe=s(SF);TFe=n(xOe,"STRONG",{});var ZNt=s(TFe);orr=r(ZNt,"bloom"),ZNt.forEach(t),rrr=r(xOe," \u2014 "),bU=n(xOe,"A",{href:!0});var eqt=s(bU);trr=r(eqt,"BloomForSequenceClassification"),eqt.forEach(t),arr=r(xOe," (BLOOM model)"),xOe.forEach(t),nrr=i(j),RF=n(j,"LI",{});var $Oe=s(RF);MFe=n($Oe,"STRONG",{});var oqt=s(MFe);srr=r(oqt,"camembert"),oqt.forEach(t),lrr=r($Oe," \u2014 "),vU=n($Oe,"A",{href:!0});var rqt=s(vU);irr=r(rqt,"CamembertForSequenceClassification"),rqt.forEach(t),drr=r($Oe," (CamemBERT model)"),$Oe.forEach(t),crr=i(j),PF=n(j,"LI",{});var kOe=s(PF);EFe=n(kOe,"STRONG",{});var tqt=s(EFe);mrr=r(tqt,"canine"),tqt.forEach(t),frr=r(kOe," \u2014 "),FU=n(kOe,"A",{href:!0});var aqt=s(FU);grr=r(aqt,"CanineForSequenceClassification"),aqt.forEach(t),hrr=r(kOe," (CANINE model)"),kOe.forEach(t),urr=i(j),BF=n(j,"LI",{});var SOe=s(BF);CFe=n(SOe,"STRONG",{});var nqt=s(CFe);prr=r(nqt,"convbert"),nqt.forEach(t),_rr=r(SOe," \u2014 "),TU=n(SOe,"A",{href:!0});var sqt=s(TU);brr=r(sqt,"ConvBertForSequenceClassification"),sqt.forEach(t),vrr=r(SOe," (ConvBERT model)"),SOe.forEach(t),Frr=i(j),IF=n(j,"LI",{});var ROe=s(IF);wFe=n(ROe,"STRONG",{});var lqt=s(wFe);Trr=r(lqt,"ctrl"),lqt.forEach(t),Mrr=r(ROe," \u2014 "),MU=n(ROe,"A",{href:!0});var iqt=s(MU);Err=r(iqt,"CTRLForSequenceClassification"),iqt.forEach(t),Crr=r(ROe," (CTRL model)"),ROe.forEach(t),wrr=i(j),NF=n(j,"LI",{});var POe=s(NF);AFe=n(POe,"STRONG",{});var dqt=s(AFe);Arr=r(dqt,"data2vec-text"),dqt.forEach(t),Lrr=r(POe," \u2014 "),EU=n(POe,"A",{href:!0});var cqt=s(EU);yrr=r(cqt,"Data2VecTextForSequenceClassification"),cqt.forEach(t),xrr=r(POe," (Data2VecText model)"),POe.forEach(t),$rr=i(j),qF=n(j,"LI",{});var BOe=s(qF);LFe=n(BOe,"STRONG",{});var mqt=s(LFe);krr=r(mqt,"deberta"),mqt.forEach(t),Srr=r(BOe," \u2014 "),CU=n(BOe,"A",{href:!0});var fqt=s(CU);Rrr=r(fqt,"DebertaForSequenceClassification"),fqt.forEach(t),Prr=r(BOe," (DeBERTa model)"),BOe.forEach(t),Brr=i(j),jF=n(j,"LI",{});var IOe=s(jF);yFe=n(IOe,"STRONG",{});var gqt=s(yFe);Irr=r(gqt,"deberta-v2"),gqt.forEach(t),Nrr=r(IOe," \u2014 "),wU=n(IOe,"A",{href:!0});var hqt=s(wU);qrr=r(hqt,"DebertaV2ForSequenceClassification"),hqt.forEach(t),jrr=r(IOe," (DeBERTa-v2 model)"),IOe.forEach(t),Drr=i(j),DF=n(j,"LI",{});var NOe=s(DF);xFe=n(NOe,"STRONG",{});var uqt=s(xFe);Grr=r(uqt,"distilbert"),uqt.forEach(t),Orr=r(NOe," \u2014 "),AU=n(NOe,"A",{href:!0});var pqt=s(AU);Vrr=r(pqt,"DistilBertForSequenceClassification"),pqt.forEach(t),Xrr=r(NOe," (DistilBERT model)"),NOe.forEach(t),zrr=i(j),GF=n(j,"LI",{});var qOe=s(GF);$Fe=n(qOe,"STRONG",{});var _qt=s($Fe);Qrr=r(_qt,"electra"),_qt.forEach(t),Wrr=r(qOe," \u2014 "),LU=n(qOe,"A",{href:!0});var bqt=s(LU);Urr=r(bqt,"ElectraForSequenceClassification"),bqt.forEach(t),Hrr=r(qOe," (ELECTRA model)"),qOe.forEach(t),Jrr=i(j),OF=n(j,"LI",{});var jOe=s(OF);kFe=n(jOe,"STRONG",{});var vqt=s(kFe);Yrr=r(vqt,"ernie"),vqt.forEach(t),Krr=r(jOe," \u2014 "),yU=n(jOe,"A",{href:!0});var Fqt=s(yU);Zrr=r(Fqt,"ErnieForSequenceClassification"),Fqt.forEach(t),etr=r(jOe," (ERNIE model)"),jOe.forEach(t),otr=i(j),VF=n(j,"LI",{});var DOe=s(VF);SFe=n(DOe,"STRONG",{});var Tqt=s(SFe);rtr=r(Tqt,"esm"),Tqt.forEach(t),ttr=r(DOe," \u2014 "),xU=n(DOe,"A",{href:!0});var Mqt=s(xU);atr=r(Mqt,"EsmForSequenceClassification"),Mqt.forEach(t),ntr=r(DOe," (ESM model)"),DOe.forEach(t),str=i(j),XF=n(j,"LI",{});var GOe=s(XF);RFe=n(GOe,"STRONG",{});var Eqt=s(RFe);ltr=r(Eqt,"flaubert"),Eqt.forEach(t),itr=r(GOe," \u2014 "),$U=n(GOe,"A",{href:!0});var Cqt=s($U);dtr=r(Cqt,"FlaubertForSequenceClassification"),Cqt.forEach(t),ctr=r(GOe," (FlauBERT model)"),GOe.forEach(t),mtr=i(j),zF=n(j,"LI",{});var OOe=s(zF);PFe=n(OOe,"STRONG",{});var wqt=s(PFe);ftr=r(wqt,"fnet"),wqt.forEach(t),gtr=r(OOe," \u2014 "),kU=n(OOe,"A",{href:!0});var Aqt=s(kU);htr=r(Aqt,"FNetForSequenceClassification"),Aqt.forEach(t),utr=r(OOe," (FNet model)"),OOe.forEach(t),ptr=i(j),QF=n(j,"LI",{});var VOe=s(QF);BFe=n(VOe,"STRONG",{});var Lqt=s(BFe);_tr=r(Lqt,"funnel"),Lqt.forEach(t),btr=r(VOe," \u2014 "),SU=n(VOe,"A",{href:!0});var yqt=s(SU);vtr=r(yqt,"FunnelForSequenceClassification"),yqt.forEach(t),Ftr=r(VOe," (Funnel Transformer model)"),VOe.forEach(t),Ttr=i(j),WF=n(j,"LI",{});var XOe=s(WF);IFe=n(XOe,"STRONG",{});var xqt=s(IFe);Mtr=r(xqt,"gpt2"),xqt.forEach(t),Etr=r(XOe," \u2014 "),RU=n(XOe,"A",{href:!0});var $qt=s(RU);Ctr=r($qt,"GPT2ForSequenceClassification"),$qt.forEach(t),wtr=r(XOe," (OpenAI GPT-2 model)"),XOe.forEach(t),Atr=i(j),UF=n(j,"LI",{});var zOe=s(UF);NFe=n(zOe,"STRONG",{});var kqt=s(NFe);Ltr=r(kqt,"gpt_neo"),kqt.forEach(t),ytr=r(zOe," \u2014 "),PU=n(zOe,"A",{href:!0});var Sqt=s(PU);xtr=r(Sqt,"GPTNeoForSequenceClassification"),Sqt.forEach(t),$tr=r(zOe," (GPT Neo model)"),zOe.forEach(t),ktr=i(j),HF=n(j,"LI",{});var QOe=s(HF);qFe=n(QOe,"STRONG",{});var Rqt=s(qFe);Str=r(Rqt,"gptj"),Rqt.forEach(t),Rtr=r(QOe," \u2014 "),BU=n(QOe,"A",{href:!0});var Pqt=s(BU);Ptr=r(Pqt,"GPTJForSequenceClassification"),Pqt.forEach(t),Btr=r(QOe," (GPT-J model)"),QOe.forEach(t),Itr=i(j),JF=n(j,"LI",{});var WOe=s(JF);jFe=n(WOe,"STRONG",{});var Bqt=s(jFe);Ntr=r(Bqt,"ibert"),Bqt.forEach(t),qtr=r(WOe," \u2014 "),IU=n(WOe,"A",{href:!0});var Iqt=s(IU);jtr=r(Iqt,"IBertForSequenceClassification"),Iqt.forEach(t),Dtr=r(WOe," (I-BERT model)"),WOe.forEach(t),Gtr=i(j),YF=n(j,"LI",{});var UOe=s(YF);DFe=n(UOe,"STRONG",{});var Nqt=s(DFe);Otr=r(Nqt,"layoutlm"),Nqt.forEach(t),Vtr=r(UOe," \u2014 "),NU=n(UOe,"A",{href:!0});var qqt=s(NU);Xtr=r(qqt,"LayoutLMForSequenceClassification"),qqt.forEach(t),ztr=r(UOe," (LayoutLM model)"),UOe.forEach(t),Qtr=i(j),KF=n(j,"LI",{});var HOe=s(KF);GFe=n(HOe,"STRONG",{});var jqt=s(GFe);Wtr=r(jqt,"layoutlmv2"),jqt.forEach(t),Utr=r(HOe," \u2014 "),qU=n(HOe,"A",{href:!0});var Dqt=s(qU);Htr=r(Dqt,"LayoutLMv2ForSequenceClassification"),Dqt.forEach(t),Jtr=r(HOe," (LayoutLMv2 model)"),HOe.forEach(t),Ytr=i(j),ZF=n(j,"LI",{});var JOe=s(ZF);OFe=n(JOe,"STRONG",{});var Gqt=s(OFe);Ktr=r(Gqt,"layoutlmv3"),Gqt.forEach(t),Ztr=r(JOe," \u2014 "),jU=n(JOe,"A",{href:!0});var Oqt=s(jU);ear=r(Oqt,"LayoutLMv3ForSequenceClassification"),Oqt.forEach(t),oar=r(JOe," (LayoutLMv3 model)"),JOe.forEach(t),rar=i(j),eT=n(j,"LI",{});var YOe=s(eT);VFe=n(YOe,"STRONG",{});var Vqt=s(VFe);tar=r(Vqt,"led"),Vqt.forEach(t),aar=r(YOe," \u2014 "),DU=n(YOe,"A",{href:!0});var Xqt=s(DU);nar=r(Xqt,"LEDForSequenceClassification"),Xqt.forEach(t),sar=r(YOe," (LED model)"),YOe.forEach(t),lar=i(j),oT=n(j,"LI",{});var KOe=s(oT);XFe=n(KOe,"STRONG",{});var zqt=s(XFe);iar=r(zqt,"longformer"),zqt.forEach(t),dar=r(KOe," \u2014 "),GU=n(KOe,"A",{href:!0});var Qqt=s(GU);car=r(Qqt,"LongformerForSequenceClassification"),Qqt.forEach(t),mar=r(KOe," (Longformer model)"),KOe.forEach(t),far=i(j),rT=n(j,"LI",{});var ZOe=s(rT);zFe=n(ZOe,"STRONG",{});var Wqt=s(zFe);gar=r(Wqt,"luke"),Wqt.forEach(t),har=r(ZOe," \u2014 "),OU=n(ZOe,"A",{href:!0});var Uqt=s(OU);uar=r(Uqt,"LukeForSequenceClassification"),Uqt.forEach(t),par=r(ZOe," (LUKE model)"),ZOe.forEach(t),_ar=i(j),tT=n(j,"LI",{});var eVe=s(tT);QFe=n(eVe,"STRONG",{});var Hqt=s(QFe);bar=r(Hqt,"markuplm"),Hqt.forEach(t),Far=r(eVe," \u2014 "),VU=n(eVe,"A",{href:!0});var Jqt=s(VU);Tar=r(Jqt,"MarkupLMForSequenceClassification"),Jqt.forEach(t),Mar=r(eVe," (MarkupLM model)"),eVe.forEach(t),Ear=i(j),aT=n(j,"LI",{});var oVe=s(aT);WFe=n(oVe,"STRONG",{});var Yqt=s(WFe);Car=r(Yqt,"mbart"),Yqt.forEach(t),war=r(oVe," \u2014 "),XU=n(oVe,"A",{href:!0});var Kqt=s(XU);Aar=r(Kqt,"MBartForSequenceClassification"),Kqt.forEach(t),Lar=r(oVe," (mBART model)"),oVe.forEach(t),yar=i(j),nT=n(j,"LI",{});var rVe=s(nT);UFe=n(rVe,"STRONG",{});var Zqt=s(UFe);xar=r(Zqt,"megatron-bert"),Zqt.forEach(t),$ar=r(rVe," \u2014 "),zU=n(rVe,"A",{href:!0});var ejt=s(zU);kar=r(ejt,"MegatronBertForSequenceClassification"),ejt.forEach(t),Sar=r(rVe," (Megatron-BERT model)"),rVe.forEach(t),Rar=i(j),sT=n(j,"LI",{});var tVe=s(sT);HFe=n(tVe,"STRONG",{});var ojt=s(HFe);Par=r(ojt,"mobilebert"),ojt.forEach(t),Bar=r(tVe," \u2014 "),QU=n(tVe,"A",{href:!0});var rjt=s(QU);Iar=r(rjt,"MobileBertForSequenceClassification"),rjt.forEach(t),Nar=r(tVe," (MobileBERT model)"),tVe.forEach(t),qar=i(j),lT=n(j,"LI",{});var aVe=s(lT);JFe=n(aVe,"STRONG",{});var tjt=s(JFe);jar=r(tjt,"mpnet"),tjt.forEach(t),Dar=r(aVe," \u2014 "),WU=n(aVe,"A",{href:!0});var ajt=s(WU);Gar=r(ajt,"MPNetForSequenceClassification"),ajt.forEach(t),Oar=r(aVe," (MPNet model)"),aVe.forEach(t),Var=i(j),iT=n(j,"LI",{});var nVe=s(iT);YFe=n(nVe,"STRONG",{});var njt=s(YFe);Xar=r(njt,"mvp"),njt.forEach(t),zar=r(nVe," \u2014 "),UU=n(nVe,"A",{href:!0});var sjt=s(UU);Qar=r(sjt,"MvpForSequenceClassification"),sjt.forEach(t),War=r(nVe," (MVP model)"),nVe.forEach(t),Uar=i(j),dT=n(j,"LI",{});var sVe=s(dT);KFe=n(sVe,"STRONG",{});var ljt=s(KFe);Har=r(ljt,"nezha"),ljt.forEach(t),Jar=r(sVe," \u2014 "),HU=n(sVe,"A",{href:!0});var ijt=s(HU);Yar=r(ijt,"NezhaForSequenceClassification"),ijt.forEach(t),Kar=r(sVe," (Nezha model)"),sVe.forEach(t),Zar=i(j),cT=n(j,"LI",{});var lVe=s(cT);ZFe=n(lVe,"STRONG",{});var djt=s(ZFe);enr=r(djt,"nystromformer"),djt.forEach(t),onr=r(lVe," \u2014 "),JU=n(lVe,"A",{href:!0});var cjt=s(JU);rnr=r(cjt,"NystromformerForSequenceClassification"),cjt.forEach(t),tnr=r(lVe," (Nystr\xF6mformer model)"),lVe.forEach(t),anr=i(j),mT=n(j,"LI",{});var iVe=s(mT);eTe=n(iVe,"STRONG",{});var mjt=s(eTe);nnr=r(mjt,"openai-gpt"),mjt.forEach(t),snr=r(iVe," \u2014 "),YU=n(iVe,"A",{href:!0});var fjt=s(YU);lnr=r(fjt,"OpenAIGPTForSequenceClassification"),fjt.forEach(t),inr=r(iVe," (OpenAI GPT model)"),iVe.forEach(t),dnr=i(j),fT=n(j,"LI",{});var dVe=s(fT);oTe=n(dVe,"STRONG",{});var gjt=s(oTe);cnr=r(gjt,"opt"),gjt.forEach(t),mnr=r(dVe," \u2014 "),KU=n(dVe,"A",{href:!0});var hjt=s(KU);fnr=r(hjt,"OPTForSequenceClassification"),hjt.forEach(t),gnr=r(dVe," (OPT model)"),dVe.forEach(t),hnr=i(j),gT=n(j,"LI",{});var cVe=s(gT);rTe=n(cVe,"STRONG",{});var ujt=s(rTe);unr=r(ujt,"perceiver"),ujt.forEach(t),pnr=r(cVe," \u2014 "),ZU=n(cVe,"A",{href:!0});var pjt=s(ZU);_nr=r(pjt,"PerceiverForSequenceClassification"),pjt.forEach(t),bnr=r(cVe," (Perceiver model)"),cVe.forEach(t),vnr=i(j),hT=n(j,"LI",{});var mVe=s(hT);tTe=n(mVe,"STRONG",{});var _jt=s(tTe);Fnr=r(_jt,"plbart"),_jt.forEach(t),Tnr=r(mVe," \u2014 "),eH=n(mVe,"A",{href:!0});var bjt=s(eH);Mnr=r(bjt,"PLBartForSequenceClassification"),bjt.forEach(t),Enr=r(mVe," (PLBart model)"),mVe.forEach(t),Cnr=i(j),uT=n(j,"LI",{});var fVe=s(uT);aTe=n(fVe,"STRONG",{});var vjt=s(aTe);wnr=r(vjt,"qdqbert"),vjt.forEach(t),Anr=r(fVe," \u2014 "),oH=n(fVe,"A",{href:!0});var Fjt=s(oH);Lnr=r(Fjt,"QDQBertForSequenceClassification"),Fjt.forEach(t),ynr=r(fVe," (QDQBert model)"),fVe.forEach(t),xnr=i(j),pT=n(j,"LI",{});var gVe=s(pT);nTe=n(gVe,"STRONG",{});var Tjt=s(nTe);$nr=r(Tjt,"reformer"),Tjt.forEach(t),knr=r(gVe," \u2014 "),rH=n(gVe,"A",{href:!0});var Mjt=s(rH);Snr=r(Mjt,"ReformerForSequenceClassification"),Mjt.forEach(t),Rnr=r(gVe," (Reformer model)"),gVe.forEach(t),Pnr=i(j),_T=n(j,"LI",{});var hVe=s(_T);sTe=n(hVe,"STRONG",{});var Ejt=s(sTe);Bnr=r(Ejt,"rembert"),Ejt.forEach(t),Inr=r(hVe," \u2014 "),tH=n(hVe,"A",{href:!0});var Cjt=s(tH);Nnr=r(Cjt,"RemBertForSequenceClassification"),Cjt.forEach(t),qnr=r(hVe," (RemBERT model)"),hVe.forEach(t),jnr=i(j),bT=n(j,"LI",{});var uVe=s(bT);lTe=n(uVe,"STRONG",{});var wjt=s(lTe);Dnr=r(wjt,"roberta"),wjt.forEach(t),Gnr=r(uVe," \u2014 "),aH=n(uVe,"A",{href:!0});var Ajt=s(aH);Onr=r(Ajt,"RobertaForSequenceClassification"),Ajt.forEach(t),Vnr=r(uVe," (RoBERTa model)"),uVe.forEach(t),Xnr=i(j),vT=n(j,"LI",{});var pVe=s(vT);iTe=n(pVe,"STRONG",{});var Ljt=s(iTe);znr=r(Ljt,"roformer"),Ljt.forEach(t),Qnr=r(pVe," \u2014 "),nH=n(pVe,"A",{href:!0});var yjt=s(nH);Wnr=r(yjt,"RoFormerForSequenceClassification"),yjt.forEach(t),Unr=r(pVe," (RoFormer model)"),pVe.forEach(t),Hnr=i(j),FT=n(j,"LI",{});var _Ve=s(FT);dTe=n(_Ve,"STRONG",{});var xjt=s(dTe);Jnr=r(xjt,"squeezebert"),xjt.forEach(t),Ynr=r(_Ve," \u2014 "),sH=n(_Ve,"A",{href:!0});var $jt=s(sH);Knr=r($jt,"SqueezeBertForSequenceClassification"),$jt.forEach(t),Znr=r(_Ve," (SqueezeBERT model)"),_Ve.forEach(t),esr=i(j),TT=n(j,"LI",{});var bVe=s(TT);cTe=n(bVe,"STRONG",{});var kjt=s(cTe);osr=r(kjt,"tapas"),kjt.forEach(t),rsr=r(bVe," \u2014 "),lH=n(bVe,"A",{href:!0});var Sjt=s(lH);tsr=r(Sjt,"TapasForSequenceClassification"),Sjt.forEach(t),asr=r(bVe," (TAPAS model)"),bVe.forEach(t),nsr=i(j),MT=n(j,"LI",{});var vVe=s(MT);mTe=n(vVe,"STRONG",{});var Rjt=s(mTe);ssr=r(Rjt,"transfo-xl"),Rjt.forEach(t),lsr=r(vVe," \u2014 "),iH=n(vVe,"A",{href:!0});var Pjt=s(iH);isr=r(Pjt,"TransfoXLForSequenceClassification"),Pjt.forEach(t),dsr=r(vVe," (Transformer-XL model)"),vVe.forEach(t),csr=i(j),ET=n(j,"LI",{});var FVe=s(ET);fTe=n(FVe,"STRONG",{});var Bjt=s(fTe);msr=r(Bjt,"xlm"),Bjt.forEach(t),fsr=r(FVe," \u2014 "),dH=n(FVe,"A",{href:!0});var Ijt=s(dH);gsr=r(Ijt,"XLMForSequenceClassification"),Ijt.forEach(t),hsr=r(FVe," (XLM model)"),FVe.forEach(t),usr=i(j),CT=n(j,"LI",{});var TVe=s(CT);gTe=n(TVe,"STRONG",{});var Njt=s(gTe);psr=r(Njt,"xlm-roberta"),Njt.forEach(t),_sr=r(TVe," \u2014 "),cH=n(TVe,"A",{href:!0});var qjt=s(cH);bsr=r(qjt,"XLMRobertaForSequenceClassification"),qjt.forEach(t),vsr=r(TVe," (XLM-RoBERTa model)"),TVe.forEach(t),Fsr=i(j),wT=n(j,"LI",{});var MVe=s(wT);hTe=n(MVe,"STRONG",{});var jjt=s(hTe);Tsr=r(jjt,"xlm-roberta-xl"),jjt.forEach(t),Msr=r(MVe," \u2014 "),mH=n(MVe,"A",{href:!0});var Djt=s(mH);Esr=r(Djt,"XLMRobertaXLForSequenceClassification"),Djt.forEach(t),Csr=r(MVe," (XLM-RoBERTa-XL model)"),MVe.forEach(t),wsr=i(j),AT=n(j,"LI",{});var EVe=s(AT);uTe=n(EVe,"STRONG",{});var Gjt=s(uTe);Asr=r(Gjt,"xlnet"),Gjt.forEach(t),Lsr=r(EVe," \u2014 "),fH=n(EVe,"A",{href:!0});var Ojt=s(fH);ysr=r(Ojt,"XLNetForSequenceClassification"),Ojt.forEach(t),xsr=r(EVe," (XLNet model)"),EVe.forEach(t),$sr=i(j),LT=n(j,"LI",{});var CVe=s(LT);pTe=n(CVe,"STRONG",{});var Vjt=s(pTe);ksr=r(Vjt,"yoso"),Vjt.forEach(t),Ssr=r(CVe," \u2014 "),gH=n(CVe,"A",{href:!0});var Xjt=s(gH);Rsr=r(Xjt,"YosoForSequenceClassification"),Xjt.forEach(t),Psr=r(CVe," (YOSO model)"),CVe.forEach(t),j.forEach(t),Bsr=i(wa),yT=n(wa,"P",{});var wVe=s(yT);Isr=r(wVe,"The model is set in evaluation mode by default using "),_Te=n(wVe,"CODE",{});var zjt=s(_Te);Nsr=r(zjt,"model.eval()"),zjt.forEach(t),qsr=r(wVe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bTe=n(wVe,"CODE",{});var Qjt=s(bTe);jsr=r(Qjt,"model.train()"),Qjt.forEach(t),wVe.forEach(t),Dsr=i(wa),T(xT.$$.fragment,wa),wa.forEach(t),kl.forEach(t),teo=i(m),Bd=n(m,"H2",{class:!0});var _ro=s(Bd);$T=n(_ro,"A",{id:!0,class:!0,href:!0});var Wjt=s($T);vTe=n(Wjt,"SPAN",{});var Ujt=s(vTe);T(e$.$$.fragment,Ujt),Ujt.forEach(t),Wjt.forEach(t),Gsr=i(_ro),FTe=n(_ro,"SPAN",{});var Hjt=s(FTe);Osr=r(Hjt,"AutoModelForMultipleChoice"),Hjt.forEach(t),_ro.forEach(t),aeo=i(m),Do=n(m,"DIV",{class:!0});var Sl=s(Do);T(o$.$$.fragment,Sl),Vsr=i(Sl),Id=n(Sl,"P",{});var sie=s(Id);Xsr=r(sie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hH=n(sie,"A",{href:!0});var Jjt=s(hH);zsr=r(Jjt,"from_pretrained()"),Jjt.forEach(t),Qsr=r(sie," class method or the "),uH=n(sie,"A",{href:!0});var Yjt=s(uH);Wsr=r(Yjt,"from_config()"),Yjt.forEach(t),Usr=r(sie,` class
method.`),sie.forEach(t),Hsr=i(Sl),r$=n(Sl,"P",{});var bro=s(r$);Jsr=r(bro,"This class cannot be instantiated directly using "),TTe=n(bro,"CODE",{});var Kjt=s(TTe);Ysr=r(Kjt,"__init__()"),Kjt.forEach(t),Ksr=r(bro," (throws an error)."),bro.forEach(t),Zsr=i(Sl),Et=n(Sl,"DIV",{class:!0});var a8=s(Et);T(t$.$$.fragment,a8),elr=i(a8),MTe=n(a8,"P",{});var Zjt=s(MTe);olr=r(Zjt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zjt.forEach(t),rlr=i(a8),Nd=n(a8,"P",{});var lie=s(Nd);tlr=r(lie,`Note:
Loading a model from its configuration file does `),ETe=n(lie,"STRONG",{});var eDt=s(ETe);alr=r(eDt,"not"),eDt.forEach(t),nlr=r(lie,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(lie,"A",{href:!0});var oDt=s(pH);slr=r(oDt,"from_pretrained()"),oDt.forEach(t),llr=r(lie," to load the model weights."),lie.forEach(t),ilr=i(a8),T(kT.$$.fragment,a8),a8.forEach(t),dlr=i(Sl),no=n(Sl,"DIV",{class:!0});var Aa=s(no);T(a$.$$.fragment,Aa),clr=i(Aa),CTe=n(Aa,"P",{});var rDt=s(CTe);mlr=r(rDt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rDt.forEach(t),flr=i(Aa),rn=n(Aa,"P",{});var n8=s(rn);glr=r(n8,"The model class to instantiate is selected based on the "),wTe=n(n8,"CODE",{});var tDt=s(wTe);hlr=r(tDt,"model_type"),tDt.forEach(t),ulr=r(n8,` property of the config object (either
passed as an argument or loaded from `),ATe=n(n8,"CODE",{});var aDt=s(ATe);plr=r(aDt,"pretrained_model_name_or_path"),aDt.forEach(t),_lr=r(n8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=n(n8,"CODE",{});var nDt=s(LTe);blr=r(nDt,"pretrained_model_name_or_path"),nDt.forEach(t),vlr=r(n8,":"),n8.forEach(t),Flr=i(Aa),Z=n(Aa,"UL",{});var ee=s(Z);ST=n(ee,"LI",{});var AVe=s(ST);yTe=n(AVe,"STRONG",{});var sDt=s(yTe);Tlr=r(sDt,"albert"),sDt.forEach(t),Mlr=r(AVe," \u2014 "),_H=n(AVe,"A",{href:!0});var lDt=s(_H);Elr=r(lDt,"AlbertForMultipleChoice"),lDt.forEach(t),Clr=r(AVe," (ALBERT model)"),AVe.forEach(t),wlr=i(ee),RT=n(ee,"LI",{});var LVe=s(RT);xTe=n(LVe,"STRONG",{});var iDt=s(xTe);Alr=r(iDt,"bert"),iDt.forEach(t),Llr=r(LVe," \u2014 "),bH=n(LVe,"A",{href:!0});var dDt=s(bH);ylr=r(dDt,"BertForMultipleChoice"),dDt.forEach(t),xlr=r(LVe," (BERT model)"),LVe.forEach(t),$lr=i(ee),PT=n(ee,"LI",{});var yVe=s(PT);$Te=n(yVe,"STRONG",{});var cDt=s($Te);klr=r(cDt,"big_bird"),cDt.forEach(t),Slr=r(yVe," \u2014 "),vH=n(yVe,"A",{href:!0});var mDt=s(vH);Rlr=r(mDt,"BigBirdForMultipleChoice"),mDt.forEach(t),Plr=r(yVe," (BigBird model)"),yVe.forEach(t),Blr=i(ee),BT=n(ee,"LI",{});var xVe=s(BT);kTe=n(xVe,"STRONG",{});var fDt=s(kTe);Ilr=r(fDt,"camembert"),fDt.forEach(t),Nlr=r(xVe," \u2014 "),FH=n(xVe,"A",{href:!0});var gDt=s(FH);qlr=r(gDt,"CamembertForMultipleChoice"),gDt.forEach(t),jlr=r(xVe," (CamemBERT model)"),xVe.forEach(t),Dlr=i(ee),IT=n(ee,"LI",{});var $Ve=s(IT);STe=n($Ve,"STRONG",{});var hDt=s(STe);Glr=r(hDt,"canine"),hDt.forEach(t),Olr=r($Ve," \u2014 "),TH=n($Ve,"A",{href:!0});var uDt=s(TH);Vlr=r(uDt,"CanineForMultipleChoice"),uDt.forEach(t),Xlr=r($Ve," (CANINE model)"),$Ve.forEach(t),zlr=i(ee),NT=n(ee,"LI",{});var kVe=s(NT);RTe=n(kVe,"STRONG",{});var pDt=s(RTe);Qlr=r(pDt,"convbert"),pDt.forEach(t),Wlr=r(kVe," \u2014 "),MH=n(kVe,"A",{href:!0});var _Dt=s(MH);Ulr=r(_Dt,"ConvBertForMultipleChoice"),_Dt.forEach(t),Hlr=r(kVe," (ConvBERT model)"),kVe.forEach(t),Jlr=i(ee),qT=n(ee,"LI",{});var SVe=s(qT);PTe=n(SVe,"STRONG",{});var bDt=s(PTe);Ylr=r(bDt,"data2vec-text"),bDt.forEach(t),Klr=r(SVe," \u2014 "),EH=n(SVe,"A",{href:!0});var vDt=s(EH);Zlr=r(vDt,"Data2VecTextForMultipleChoice"),vDt.forEach(t),eir=r(SVe," (Data2VecText model)"),SVe.forEach(t),oir=i(ee),jT=n(ee,"LI",{});var RVe=s(jT);BTe=n(RVe,"STRONG",{});var FDt=s(BTe);rir=r(FDt,"deberta-v2"),FDt.forEach(t),tir=r(RVe," \u2014 "),CH=n(RVe,"A",{href:!0});var TDt=s(CH);air=r(TDt,"DebertaV2ForMultipleChoice"),TDt.forEach(t),nir=r(RVe," (DeBERTa-v2 model)"),RVe.forEach(t),sir=i(ee),DT=n(ee,"LI",{});var PVe=s(DT);ITe=n(PVe,"STRONG",{});var MDt=s(ITe);lir=r(MDt,"distilbert"),MDt.forEach(t),iir=r(PVe," \u2014 "),wH=n(PVe,"A",{href:!0});var EDt=s(wH);dir=r(EDt,"DistilBertForMultipleChoice"),EDt.forEach(t),cir=r(PVe," (DistilBERT model)"),PVe.forEach(t),mir=i(ee),GT=n(ee,"LI",{});var BVe=s(GT);NTe=n(BVe,"STRONG",{});var CDt=s(NTe);fir=r(CDt,"electra"),CDt.forEach(t),gir=r(BVe," \u2014 "),AH=n(BVe,"A",{href:!0});var wDt=s(AH);hir=r(wDt,"ElectraForMultipleChoice"),wDt.forEach(t),uir=r(BVe," (ELECTRA model)"),BVe.forEach(t),pir=i(ee),OT=n(ee,"LI",{});var IVe=s(OT);qTe=n(IVe,"STRONG",{});var ADt=s(qTe);_ir=r(ADt,"ernie"),ADt.forEach(t),bir=r(IVe," \u2014 "),LH=n(IVe,"A",{href:!0});var LDt=s(LH);vir=r(LDt,"ErnieForMultipleChoice"),LDt.forEach(t),Fir=r(IVe," (ERNIE model)"),IVe.forEach(t),Tir=i(ee),VT=n(ee,"LI",{});var NVe=s(VT);jTe=n(NVe,"STRONG",{});var yDt=s(jTe);Mir=r(yDt,"flaubert"),yDt.forEach(t),Eir=r(NVe," \u2014 "),yH=n(NVe,"A",{href:!0});var xDt=s(yH);Cir=r(xDt,"FlaubertForMultipleChoice"),xDt.forEach(t),wir=r(NVe," (FlauBERT model)"),NVe.forEach(t),Air=i(ee),XT=n(ee,"LI",{});var qVe=s(XT);DTe=n(qVe,"STRONG",{});var $Dt=s(DTe);Lir=r($Dt,"fnet"),$Dt.forEach(t),yir=r(qVe," \u2014 "),xH=n(qVe,"A",{href:!0});var kDt=s(xH);xir=r(kDt,"FNetForMultipleChoice"),kDt.forEach(t),$ir=r(qVe," (FNet model)"),qVe.forEach(t),kir=i(ee),zT=n(ee,"LI",{});var jVe=s(zT);GTe=n(jVe,"STRONG",{});var SDt=s(GTe);Sir=r(SDt,"funnel"),SDt.forEach(t),Rir=r(jVe," \u2014 "),$H=n(jVe,"A",{href:!0});var RDt=s($H);Pir=r(RDt,"FunnelForMultipleChoice"),RDt.forEach(t),Bir=r(jVe," (Funnel Transformer model)"),jVe.forEach(t),Iir=i(ee),QT=n(ee,"LI",{});var DVe=s(QT);OTe=n(DVe,"STRONG",{});var PDt=s(OTe);Nir=r(PDt,"ibert"),PDt.forEach(t),qir=r(DVe," \u2014 "),kH=n(DVe,"A",{href:!0});var BDt=s(kH);jir=r(BDt,"IBertForMultipleChoice"),BDt.forEach(t),Dir=r(DVe," (I-BERT model)"),DVe.forEach(t),Gir=i(ee),WT=n(ee,"LI",{});var GVe=s(WT);VTe=n(GVe,"STRONG",{});var IDt=s(VTe);Oir=r(IDt,"longformer"),IDt.forEach(t),Vir=r(GVe," \u2014 "),SH=n(GVe,"A",{href:!0});var NDt=s(SH);Xir=r(NDt,"LongformerForMultipleChoice"),NDt.forEach(t),zir=r(GVe," (Longformer model)"),GVe.forEach(t),Qir=i(ee),UT=n(ee,"LI",{});var OVe=s(UT);XTe=n(OVe,"STRONG",{});var qDt=s(XTe);Wir=r(qDt,"luke"),qDt.forEach(t),Uir=r(OVe," \u2014 "),RH=n(OVe,"A",{href:!0});var jDt=s(RH);Hir=r(jDt,"LukeForMultipleChoice"),jDt.forEach(t),Jir=r(OVe," (LUKE model)"),OVe.forEach(t),Yir=i(ee),HT=n(ee,"LI",{});var VVe=s(HT);zTe=n(VVe,"STRONG",{});var DDt=s(zTe);Kir=r(DDt,"megatron-bert"),DDt.forEach(t),Zir=r(VVe," \u2014 "),PH=n(VVe,"A",{href:!0});var GDt=s(PH);edr=r(GDt,"MegatronBertForMultipleChoice"),GDt.forEach(t),odr=r(VVe," (Megatron-BERT model)"),VVe.forEach(t),rdr=i(ee),JT=n(ee,"LI",{});var XVe=s(JT);QTe=n(XVe,"STRONG",{});var ODt=s(QTe);tdr=r(ODt,"mobilebert"),ODt.forEach(t),adr=r(XVe," \u2014 "),BH=n(XVe,"A",{href:!0});var VDt=s(BH);ndr=r(VDt,"MobileBertForMultipleChoice"),VDt.forEach(t),sdr=r(XVe," (MobileBERT model)"),XVe.forEach(t),ldr=i(ee),YT=n(ee,"LI",{});var zVe=s(YT);WTe=n(zVe,"STRONG",{});var XDt=s(WTe);idr=r(XDt,"mpnet"),XDt.forEach(t),ddr=r(zVe," \u2014 "),IH=n(zVe,"A",{href:!0});var zDt=s(IH);cdr=r(zDt,"MPNetForMultipleChoice"),zDt.forEach(t),mdr=r(zVe," (MPNet model)"),zVe.forEach(t),fdr=i(ee),KT=n(ee,"LI",{});var QVe=s(KT);UTe=n(QVe,"STRONG",{});var QDt=s(UTe);gdr=r(QDt,"nezha"),QDt.forEach(t),hdr=r(QVe," \u2014 "),NH=n(QVe,"A",{href:!0});var WDt=s(NH);udr=r(WDt,"NezhaForMultipleChoice"),WDt.forEach(t),pdr=r(QVe," (Nezha model)"),QVe.forEach(t),_dr=i(ee),ZT=n(ee,"LI",{});var WVe=s(ZT);HTe=n(WVe,"STRONG",{});var UDt=s(HTe);bdr=r(UDt,"nystromformer"),UDt.forEach(t),vdr=r(WVe," \u2014 "),qH=n(WVe,"A",{href:!0});var HDt=s(qH);Fdr=r(HDt,"NystromformerForMultipleChoice"),HDt.forEach(t),Tdr=r(WVe," (Nystr\xF6mformer model)"),WVe.forEach(t),Mdr=i(ee),eM=n(ee,"LI",{});var UVe=s(eM);JTe=n(UVe,"STRONG",{});var JDt=s(JTe);Edr=r(JDt,"qdqbert"),JDt.forEach(t),Cdr=r(UVe," \u2014 "),jH=n(UVe,"A",{href:!0});var YDt=s(jH);wdr=r(YDt,"QDQBertForMultipleChoice"),YDt.forEach(t),Adr=r(UVe," (QDQBert model)"),UVe.forEach(t),Ldr=i(ee),oM=n(ee,"LI",{});var HVe=s(oM);YTe=n(HVe,"STRONG",{});var KDt=s(YTe);ydr=r(KDt,"rembert"),KDt.forEach(t),xdr=r(HVe," \u2014 "),DH=n(HVe,"A",{href:!0});var ZDt=s(DH);$dr=r(ZDt,"RemBertForMultipleChoice"),ZDt.forEach(t),kdr=r(HVe," (RemBERT model)"),HVe.forEach(t),Sdr=i(ee),rM=n(ee,"LI",{});var JVe=s(rM);KTe=n(JVe,"STRONG",{});var eGt=s(KTe);Rdr=r(eGt,"roberta"),eGt.forEach(t),Pdr=r(JVe," \u2014 "),GH=n(JVe,"A",{href:!0});var oGt=s(GH);Bdr=r(oGt,"RobertaForMultipleChoice"),oGt.forEach(t),Idr=r(JVe," (RoBERTa model)"),JVe.forEach(t),Ndr=i(ee),tM=n(ee,"LI",{});var YVe=s(tM);ZTe=n(YVe,"STRONG",{});var rGt=s(ZTe);qdr=r(rGt,"roformer"),rGt.forEach(t),jdr=r(YVe," \u2014 "),OH=n(YVe,"A",{href:!0});var tGt=s(OH);Ddr=r(tGt,"RoFormerForMultipleChoice"),tGt.forEach(t),Gdr=r(YVe," (RoFormer model)"),YVe.forEach(t),Odr=i(ee),aM=n(ee,"LI",{});var KVe=s(aM);eMe=n(KVe,"STRONG",{});var aGt=s(eMe);Vdr=r(aGt,"squeezebert"),aGt.forEach(t),Xdr=r(KVe," \u2014 "),VH=n(KVe,"A",{href:!0});var nGt=s(VH);zdr=r(nGt,"SqueezeBertForMultipleChoice"),nGt.forEach(t),Qdr=r(KVe," (SqueezeBERT model)"),KVe.forEach(t),Wdr=i(ee),nM=n(ee,"LI",{});var ZVe=s(nM);oMe=n(ZVe,"STRONG",{});var sGt=s(oMe);Udr=r(sGt,"xlm"),sGt.forEach(t),Hdr=r(ZVe," \u2014 "),XH=n(ZVe,"A",{href:!0});var lGt=s(XH);Jdr=r(lGt,"XLMForMultipleChoice"),lGt.forEach(t),Ydr=r(ZVe," (XLM model)"),ZVe.forEach(t),Kdr=i(ee),sM=n(ee,"LI",{});var eXe=s(sM);rMe=n(eXe,"STRONG",{});var iGt=s(rMe);Zdr=r(iGt,"xlm-roberta"),iGt.forEach(t),ecr=r(eXe," \u2014 "),zH=n(eXe,"A",{href:!0});var dGt=s(zH);ocr=r(dGt,"XLMRobertaForMultipleChoice"),dGt.forEach(t),rcr=r(eXe," (XLM-RoBERTa model)"),eXe.forEach(t),tcr=i(ee),lM=n(ee,"LI",{});var oXe=s(lM);tMe=n(oXe,"STRONG",{});var cGt=s(tMe);acr=r(cGt,"xlm-roberta-xl"),cGt.forEach(t),ncr=r(oXe," \u2014 "),QH=n(oXe,"A",{href:!0});var mGt=s(QH);scr=r(mGt,"XLMRobertaXLForMultipleChoice"),mGt.forEach(t),lcr=r(oXe," (XLM-RoBERTa-XL model)"),oXe.forEach(t),icr=i(ee),iM=n(ee,"LI",{});var rXe=s(iM);aMe=n(rXe,"STRONG",{});var fGt=s(aMe);dcr=r(fGt,"xlnet"),fGt.forEach(t),ccr=r(rXe," \u2014 "),WH=n(rXe,"A",{href:!0});var gGt=s(WH);mcr=r(gGt,"XLNetForMultipleChoice"),gGt.forEach(t),fcr=r(rXe," (XLNet model)"),rXe.forEach(t),gcr=i(ee),dM=n(ee,"LI",{});var tXe=s(dM);nMe=n(tXe,"STRONG",{});var hGt=s(nMe);hcr=r(hGt,"yoso"),hGt.forEach(t),ucr=r(tXe," \u2014 "),UH=n(tXe,"A",{href:!0});var uGt=s(UH);pcr=r(uGt,"YosoForMultipleChoice"),uGt.forEach(t),_cr=r(tXe," (YOSO model)"),tXe.forEach(t),ee.forEach(t),bcr=i(Aa),cM=n(Aa,"P",{});var aXe=s(cM);vcr=r(aXe,"The model is set in evaluation mode by default using "),sMe=n(aXe,"CODE",{});var pGt=s(sMe);Fcr=r(pGt,"model.eval()"),pGt.forEach(t),Tcr=r(aXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lMe=n(aXe,"CODE",{});var _Gt=s(lMe);Mcr=r(_Gt,"model.train()"),_Gt.forEach(t),aXe.forEach(t),Ecr=i(Aa),T(mM.$$.fragment,Aa),Aa.forEach(t),Sl.forEach(t),neo=i(m),qd=n(m,"H2",{class:!0});var vro=s(qd);fM=n(vro,"A",{id:!0,class:!0,href:!0});var bGt=s(fM);iMe=n(bGt,"SPAN",{});var vGt=s(iMe);T(n$.$$.fragment,vGt),vGt.forEach(t),bGt.forEach(t),Ccr=i(vro),dMe=n(vro,"SPAN",{});var FGt=s(dMe);wcr=r(FGt,"AutoModelForNextSentencePrediction"),FGt.forEach(t),vro.forEach(t),seo=i(m),Go=n(m,"DIV",{class:!0});var Rl=s(Go);T(s$.$$.fragment,Rl),Acr=i(Rl),jd=n(Rl,"P",{});var iie=s(jd);Lcr=r(iie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HH=n(iie,"A",{href:!0});var TGt=s(HH);ycr=r(TGt,"from_pretrained()"),TGt.forEach(t),xcr=r(iie," class method or the "),JH=n(iie,"A",{href:!0});var MGt=s(JH);$cr=r(MGt,"from_config()"),MGt.forEach(t),kcr=r(iie,` class
method.`),iie.forEach(t),Scr=i(Rl),l$=n(Rl,"P",{});var Fro=s(l$);Rcr=r(Fro,"This class cannot be instantiated directly using "),cMe=n(Fro,"CODE",{});var EGt=s(cMe);Pcr=r(EGt,"__init__()"),EGt.forEach(t),Bcr=r(Fro," (throws an error)."),Fro.forEach(t),Icr=i(Rl),Ct=n(Rl,"DIV",{class:!0});var s8=s(Ct);T(i$.$$.fragment,s8),Ncr=i(s8),mMe=n(s8,"P",{});var CGt=s(mMe);qcr=r(CGt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CGt.forEach(t),jcr=i(s8),Dd=n(s8,"P",{});var die=s(Dd);Dcr=r(die,`Note:
Loading a model from its configuration file does `),fMe=n(die,"STRONG",{});var wGt=s(fMe);Gcr=r(wGt,"not"),wGt.forEach(t),Ocr=r(die,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(die,"A",{href:!0});var AGt=s(YH);Vcr=r(AGt,"from_pretrained()"),AGt.forEach(t),Xcr=r(die," to load the model weights."),die.forEach(t),zcr=i(s8),T(gM.$$.fragment,s8),s8.forEach(t),Qcr=i(Rl),so=n(Rl,"DIV",{class:!0});var La=s(so);T(d$.$$.fragment,La),Wcr=i(La),gMe=n(La,"P",{});var LGt=s(gMe);Ucr=r(LGt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LGt.forEach(t),Hcr=i(La),tn=n(La,"P",{});var l8=s(tn);Jcr=r(l8,"The model class to instantiate is selected based on the "),hMe=n(l8,"CODE",{});var yGt=s(hMe);Ycr=r(yGt,"model_type"),yGt.forEach(t),Kcr=r(l8,` property of the config object (either
passed as an argument or loaded from `),uMe=n(l8,"CODE",{});var xGt=s(uMe);Zcr=r(xGt,"pretrained_model_name_or_path"),xGt.forEach(t),emr=r(l8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(l8,"CODE",{});var $Gt=s(pMe);omr=r($Gt,"pretrained_model_name_or_path"),$Gt.forEach(t),rmr=r(l8,":"),l8.forEach(t),tmr=i(La),Ue=n(La,"UL",{});var ct=s(Ue);hM=n(ct,"LI",{});var nXe=s(hM);_Me=n(nXe,"STRONG",{});var kGt=s(_Me);amr=r(kGt,"bert"),kGt.forEach(t),nmr=r(nXe," \u2014 "),KH=n(nXe,"A",{href:!0});var SGt=s(KH);smr=r(SGt,"BertForNextSentencePrediction"),SGt.forEach(t),lmr=r(nXe," (BERT model)"),nXe.forEach(t),imr=i(ct),uM=n(ct,"LI",{});var sXe=s(uM);bMe=n(sXe,"STRONG",{});var RGt=s(bMe);dmr=r(RGt,"ernie"),RGt.forEach(t),cmr=r(sXe," \u2014 "),ZH=n(sXe,"A",{href:!0});var PGt=s(ZH);mmr=r(PGt,"ErnieForNextSentencePrediction"),PGt.forEach(t),fmr=r(sXe," (ERNIE model)"),sXe.forEach(t),gmr=i(ct),pM=n(ct,"LI",{});var lXe=s(pM);vMe=n(lXe,"STRONG",{});var BGt=s(vMe);hmr=r(BGt,"fnet"),BGt.forEach(t),umr=r(lXe," \u2014 "),eJ=n(lXe,"A",{href:!0});var IGt=s(eJ);pmr=r(IGt,"FNetForNextSentencePrediction"),IGt.forEach(t),_mr=r(lXe," (FNet model)"),lXe.forEach(t),bmr=i(ct),_M=n(ct,"LI",{});var iXe=s(_M);FMe=n(iXe,"STRONG",{});var NGt=s(FMe);vmr=r(NGt,"megatron-bert"),NGt.forEach(t),Fmr=r(iXe," \u2014 "),oJ=n(iXe,"A",{href:!0});var qGt=s(oJ);Tmr=r(qGt,"MegatronBertForNextSentencePrediction"),qGt.forEach(t),Mmr=r(iXe," (Megatron-BERT model)"),iXe.forEach(t),Emr=i(ct),bM=n(ct,"LI",{});var dXe=s(bM);TMe=n(dXe,"STRONG",{});var jGt=s(TMe);Cmr=r(jGt,"mobilebert"),jGt.forEach(t),wmr=r(dXe," \u2014 "),rJ=n(dXe,"A",{href:!0});var DGt=s(rJ);Amr=r(DGt,"MobileBertForNextSentencePrediction"),DGt.forEach(t),Lmr=r(dXe," (MobileBERT model)"),dXe.forEach(t),ymr=i(ct),vM=n(ct,"LI",{});var cXe=s(vM);MMe=n(cXe,"STRONG",{});var GGt=s(MMe);xmr=r(GGt,"nezha"),GGt.forEach(t),$mr=r(cXe," \u2014 "),tJ=n(cXe,"A",{href:!0});var OGt=s(tJ);kmr=r(OGt,"NezhaForNextSentencePrediction"),OGt.forEach(t),Smr=r(cXe," (Nezha model)"),cXe.forEach(t),Rmr=i(ct),FM=n(ct,"LI",{});var mXe=s(FM);EMe=n(mXe,"STRONG",{});var VGt=s(EMe);Pmr=r(VGt,"qdqbert"),VGt.forEach(t),Bmr=r(mXe," \u2014 "),aJ=n(mXe,"A",{href:!0});var XGt=s(aJ);Imr=r(XGt,"QDQBertForNextSentencePrediction"),XGt.forEach(t),Nmr=r(mXe," (QDQBert model)"),mXe.forEach(t),ct.forEach(t),qmr=i(La),TM=n(La,"P",{});var fXe=s(TM);jmr=r(fXe,"The model is set in evaluation mode by default using "),CMe=n(fXe,"CODE",{});var zGt=s(CMe);Dmr=r(zGt,"model.eval()"),zGt.forEach(t),Gmr=r(fXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wMe=n(fXe,"CODE",{});var QGt=s(wMe);Omr=r(QGt,"model.train()"),QGt.forEach(t),fXe.forEach(t),Vmr=i(La),T(MM.$$.fragment,La),La.forEach(t),Rl.forEach(t),leo=i(m),Gd=n(m,"H2",{class:!0});var Tro=s(Gd);EM=n(Tro,"A",{id:!0,class:!0,href:!0});var WGt=s(EM);AMe=n(WGt,"SPAN",{});var UGt=s(AMe);T(c$.$$.fragment,UGt),UGt.forEach(t),WGt.forEach(t),Xmr=i(Tro),LMe=n(Tro,"SPAN",{});var HGt=s(LMe);zmr=r(HGt,"AutoModelForTokenClassification"),HGt.forEach(t),Tro.forEach(t),ieo=i(m),Oo=n(m,"DIV",{class:!0});var Pl=s(Oo);T(m$.$$.fragment,Pl),Qmr=i(Pl),Od=n(Pl,"P",{});var cie=s(Od);Wmr=r(cie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nJ=n(cie,"A",{href:!0});var JGt=s(nJ);Umr=r(JGt,"from_pretrained()"),JGt.forEach(t),Hmr=r(cie," class method or the "),sJ=n(cie,"A",{href:!0});var YGt=s(sJ);Jmr=r(YGt,"from_config()"),YGt.forEach(t),Ymr=r(cie,` class
method.`),cie.forEach(t),Kmr=i(Pl),f$=n(Pl,"P",{});var Mro=s(f$);Zmr=r(Mro,"This class cannot be instantiated directly using "),yMe=n(Mro,"CODE",{});var KGt=s(yMe);efr=r(KGt,"__init__()"),KGt.forEach(t),ofr=r(Mro," (throws an error)."),Mro.forEach(t),rfr=i(Pl),wt=n(Pl,"DIV",{class:!0});var i8=s(wt);T(g$.$$.fragment,i8),tfr=i(i8),xMe=n(i8,"P",{});var ZGt=s(xMe);afr=r(ZGt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ZGt.forEach(t),nfr=i(i8),Vd=n(i8,"P",{});var mie=s(Vd);sfr=r(mie,`Note:
Loading a model from its configuration file does `),$Me=n(mie,"STRONG",{});var eOt=s($Me);lfr=r(eOt,"not"),eOt.forEach(t),ifr=r(mie,` load the model weights. It only affects the
model\u2019s configuration. Use `),lJ=n(mie,"A",{href:!0});var oOt=s(lJ);dfr=r(oOt,"from_pretrained()"),oOt.forEach(t),cfr=r(mie," to load the model weights."),mie.forEach(t),mfr=i(i8),T(CM.$$.fragment,i8),i8.forEach(t),ffr=i(Pl),lo=n(Pl,"DIV",{class:!0});var ya=s(lo);T(h$.$$.fragment,ya),gfr=i(ya),kMe=n(ya,"P",{});var rOt=s(kMe);hfr=r(rOt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rOt.forEach(t),ufr=i(ya),an=n(ya,"P",{});var d8=s(an);pfr=r(d8,"The model class to instantiate is selected based on the "),SMe=n(d8,"CODE",{});var tOt=s(SMe);_fr=r(tOt,"model_type"),tOt.forEach(t),bfr=r(d8,` property of the config object (either
passed as an argument or loaded from `),RMe=n(d8,"CODE",{});var aOt=s(RMe);vfr=r(aOt,"pretrained_model_name_or_path"),aOt.forEach(t),Ffr=r(d8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(d8,"CODE",{});var nOt=s(PMe);Tfr=r(nOt,"pretrained_model_name_or_path"),nOt.forEach(t),Mfr=r(d8,":"),d8.forEach(t),Efr=i(ya),H=n(ya,"UL",{});var Y=s(H);wM=n(Y,"LI",{});var gXe=s(wM);BMe=n(gXe,"STRONG",{});var sOt=s(BMe);Cfr=r(sOt,"albert"),sOt.forEach(t),wfr=r(gXe," \u2014 "),iJ=n(gXe,"A",{href:!0});var lOt=s(iJ);Afr=r(lOt,"AlbertForTokenClassification"),lOt.forEach(t),Lfr=r(gXe," (ALBERT model)"),gXe.forEach(t),yfr=i(Y),AM=n(Y,"LI",{});var hXe=s(AM);IMe=n(hXe,"STRONG",{});var iOt=s(IMe);xfr=r(iOt,"bert"),iOt.forEach(t),$fr=r(hXe," \u2014 "),dJ=n(hXe,"A",{href:!0});var dOt=s(dJ);kfr=r(dOt,"BertForTokenClassification"),dOt.forEach(t),Sfr=r(hXe," (BERT model)"),hXe.forEach(t),Rfr=i(Y),LM=n(Y,"LI",{});var uXe=s(LM);NMe=n(uXe,"STRONG",{});var cOt=s(NMe);Pfr=r(cOt,"big_bird"),cOt.forEach(t),Bfr=r(uXe," \u2014 "),cJ=n(uXe,"A",{href:!0});var mOt=s(cJ);Ifr=r(mOt,"BigBirdForTokenClassification"),mOt.forEach(t),Nfr=r(uXe," (BigBird model)"),uXe.forEach(t),qfr=i(Y),yM=n(Y,"LI",{});var pXe=s(yM);qMe=n(pXe,"STRONG",{});var fOt=s(qMe);jfr=r(fOt,"bloom"),fOt.forEach(t),Dfr=r(pXe," \u2014 "),mJ=n(pXe,"A",{href:!0});var gOt=s(mJ);Gfr=r(gOt,"BloomForTokenClassification"),gOt.forEach(t),Ofr=r(pXe," (BLOOM model)"),pXe.forEach(t),Vfr=i(Y),xM=n(Y,"LI",{});var _Xe=s(xM);jMe=n(_Xe,"STRONG",{});var hOt=s(jMe);Xfr=r(hOt,"camembert"),hOt.forEach(t),zfr=r(_Xe," \u2014 "),fJ=n(_Xe,"A",{href:!0});var uOt=s(fJ);Qfr=r(uOt,"CamembertForTokenClassification"),uOt.forEach(t),Wfr=r(_Xe," (CamemBERT model)"),_Xe.forEach(t),Ufr=i(Y),$M=n(Y,"LI",{});var bXe=s($M);DMe=n(bXe,"STRONG",{});var pOt=s(DMe);Hfr=r(pOt,"canine"),pOt.forEach(t),Jfr=r(bXe," \u2014 "),gJ=n(bXe,"A",{href:!0});var _Ot=s(gJ);Yfr=r(_Ot,"CanineForTokenClassification"),_Ot.forEach(t),Kfr=r(bXe," (CANINE model)"),bXe.forEach(t),Zfr=i(Y),kM=n(Y,"LI",{});var vXe=s(kM);GMe=n(vXe,"STRONG",{});var bOt=s(GMe);egr=r(bOt,"convbert"),bOt.forEach(t),ogr=r(vXe," \u2014 "),hJ=n(vXe,"A",{href:!0});var vOt=s(hJ);rgr=r(vOt,"ConvBertForTokenClassification"),vOt.forEach(t),tgr=r(vXe," (ConvBERT model)"),vXe.forEach(t),agr=i(Y),SM=n(Y,"LI",{});var FXe=s(SM);OMe=n(FXe,"STRONG",{});var FOt=s(OMe);ngr=r(FOt,"data2vec-text"),FOt.forEach(t),sgr=r(FXe," \u2014 "),uJ=n(FXe,"A",{href:!0});var TOt=s(uJ);lgr=r(TOt,"Data2VecTextForTokenClassification"),TOt.forEach(t),igr=r(FXe," (Data2VecText model)"),FXe.forEach(t),dgr=i(Y),RM=n(Y,"LI",{});var TXe=s(RM);VMe=n(TXe,"STRONG",{});var MOt=s(VMe);cgr=r(MOt,"deberta"),MOt.forEach(t),mgr=r(TXe," \u2014 "),pJ=n(TXe,"A",{href:!0});var EOt=s(pJ);fgr=r(EOt,"DebertaForTokenClassification"),EOt.forEach(t),ggr=r(TXe," (DeBERTa model)"),TXe.forEach(t),hgr=i(Y),PM=n(Y,"LI",{});var MXe=s(PM);XMe=n(MXe,"STRONG",{});var COt=s(XMe);ugr=r(COt,"deberta-v2"),COt.forEach(t),pgr=r(MXe," \u2014 "),_J=n(MXe,"A",{href:!0});var wOt=s(_J);_gr=r(wOt,"DebertaV2ForTokenClassification"),wOt.forEach(t),bgr=r(MXe," (DeBERTa-v2 model)"),MXe.forEach(t),vgr=i(Y),BM=n(Y,"LI",{});var EXe=s(BM);zMe=n(EXe,"STRONG",{});var AOt=s(zMe);Fgr=r(AOt,"distilbert"),AOt.forEach(t),Tgr=r(EXe," \u2014 "),bJ=n(EXe,"A",{href:!0});var LOt=s(bJ);Mgr=r(LOt,"DistilBertForTokenClassification"),LOt.forEach(t),Egr=r(EXe," (DistilBERT model)"),EXe.forEach(t),Cgr=i(Y),IM=n(Y,"LI",{});var CXe=s(IM);QMe=n(CXe,"STRONG",{});var yOt=s(QMe);wgr=r(yOt,"electra"),yOt.forEach(t),Agr=r(CXe," \u2014 "),vJ=n(CXe,"A",{href:!0});var xOt=s(vJ);Lgr=r(xOt,"ElectraForTokenClassification"),xOt.forEach(t),ygr=r(CXe," (ELECTRA model)"),CXe.forEach(t),xgr=i(Y),NM=n(Y,"LI",{});var wXe=s(NM);WMe=n(wXe,"STRONG",{});var $Ot=s(WMe);$gr=r($Ot,"ernie"),$Ot.forEach(t),kgr=r(wXe," \u2014 "),FJ=n(wXe,"A",{href:!0});var kOt=s(FJ);Sgr=r(kOt,"ErnieForTokenClassification"),kOt.forEach(t),Rgr=r(wXe," (ERNIE model)"),wXe.forEach(t),Pgr=i(Y),qM=n(Y,"LI",{});var AXe=s(qM);UMe=n(AXe,"STRONG",{});var SOt=s(UMe);Bgr=r(SOt,"esm"),SOt.forEach(t),Igr=r(AXe," \u2014 "),TJ=n(AXe,"A",{href:!0});var ROt=s(TJ);Ngr=r(ROt,"EsmForTokenClassification"),ROt.forEach(t),qgr=r(AXe," (ESM model)"),AXe.forEach(t),jgr=i(Y),jM=n(Y,"LI",{});var LXe=s(jM);HMe=n(LXe,"STRONG",{});var POt=s(HMe);Dgr=r(POt,"flaubert"),POt.forEach(t),Ggr=r(LXe," \u2014 "),MJ=n(LXe,"A",{href:!0});var BOt=s(MJ);Ogr=r(BOt,"FlaubertForTokenClassification"),BOt.forEach(t),Vgr=r(LXe," (FlauBERT model)"),LXe.forEach(t),Xgr=i(Y),DM=n(Y,"LI",{});var yXe=s(DM);JMe=n(yXe,"STRONG",{});var IOt=s(JMe);zgr=r(IOt,"fnet"),IOt.forEach(t),Qgr=r(yXe," \u2014 "),EJ=n(yXe,"A",{href:!0});var NOt=s(EJ);Wgr=r(NOt,"FNetForTokenClassification"),NOt.forEach(t),Ugr=r(yXe," (FNet model)"),yXe.forEach(t),Hgr=i(Y),GM=n(Y,"LI",{});var xXe=s(GM);YMe=n(xXe,"STRONG",{});var qOt=s(YMe);Jgr=r(qOt,"funnel"),qOt.forEach(t),Ygr=r(xXe," \u2014 "),CJ=n(xXe,"A",{href:!0});var jOt=s(CJ);Kgr=r(jOt,"FunnelForTokenClassification"),jOt.forEach(t),Zgr=r(xXe," (Funnel Transformer model)"),xXe.forEach(t),ehr=i(Y),OM=n(Y,"LI",{});var $Xe=s(OM);KMe=n($Xe,"STRONG",{});var DOt=s(KMe);ohr=r(DOt,"gpt2"),DOt.forEach(t),rhr=r($Xe," \u2014 "),wJ=n($Xe,"A",{href:!0});var GOt=s(wJ);thr=r(GOt,"GPT2ForTokenClassification"),GOt.forEach(t),ahr=r($Xe," (OpenAI GPT-2 model)"),$Xe.forEach(t),nhr=i(Y),VM=n(Y,"LI",{});var kXe=s(VM);ZMe=n(kXe,"STRONG",{});var OOt=s(ZMe);shr=r(OOt,"ibert"),OOt.forEach(t),lhr=r(kXe," \u2014 "),AJ=n(kXe,"A",{href:!0});var VOt=s(AJ);ihr=r(VOt,"IBertForTokenClassification"),VOt.forEach(t),dhr=r(kXe," (I-BERT model)"),kXe.forEach(t),chr=i(Y),XM=n(Y,"LI",{});var SXe=s(XM);eEe=n(SXe,"STRONG",{});var XOt=s(eEe);mhr=r(XOt,"layoutlm"),XOt.forEach(t),fhr=r(SXe," \u2014 "),LJ=n(SXe,"A",{href:!0});var zOt=s(LJ);ghr=r(zOt,"LayoutLMForTokenClassification"),zOt.forEach(t),hhr=r(SXe," (LayoutLM model)"),SXe.forEach(t),uhr=i(Y),zM=n(Y,"LI",{});var RXe=s(zM);oEe=n(RXe,"STRONG",{});var QOt=s(oEe);phr=r(QOt,"layoutlmv2"),QOt.forEach(t),_hr=r(RXe," \u2014 "),yJ=n(RXe,"A",{href:!0});var WOt=s(yJ);bhr=r(WOt,"LayoutLMv2ForTokenClassification"),WOt.forEach(t),vhr=r(RXe," (LayoutLMv2 model)"),RXe.forEach(t),Fhr=i(Y),QM=n(Y,"LI",{});var PXe=s(QM);rEe=n(PXe,"STRONG",{});var UOt=s(rEe);Thr=r(UOt,"layoutlmv3"),UOt.forEach(t),Mhr=r(PXe," \u2014 "),xJ=n(PXe,"A",{href:!0});var HOt=s(xJ);Ehr=r(HOt,"LayoutLMv3ForTokenClassification"),HOt.forEach(t),Chr=r(PXe," (LayoutLMv3 model)"),PXe.forEach(t),whr=i(Y),WM=n(Y,"LI",{});var BXe=s(WM);tEe=n(BXe,"STRONG",{});var JOt=s(tEe);Ahr=r(JOt,"longformer"),JOt.forEach(t),Lhr=r(BXe," \u2014 "),$J=n(BXe,"A",{href:!0});var YOt=s($J);yhr=r(YOt,"LongformerForTokenClassification"),YOt.forEach(t),xhr=r(BXe," (Longformer model)"),BXe.forEach(t),$hr=i(Y),UM=n(Y,"LI",{});var IXe=s(UM);aEe=n(IXe,"STRONG",{});var KOt=s(aEe);khr=r(KOt,"luke"),KOt.forEach(t),Shr=r(IXe," \u2014 "),kJ=n(IXe,"A",{href:!0});var ZOt=s(kJ);Rhr=r(ZOt,"LukeForTokenClassification"),ZOt.forEach(t),Phr=r(IXe," (LUKE model)"),IXe.forEach(t),Bhr=i(Y),HM=n(Y,"LI",{});var NXe=s(HM);nEe=n(NXe,"STRONG",{});var eVt=s(nEe);Ihr=r(eVt,"markuplm"),eVt.forEach(t),Nhr=r(NXe," \u2014 "),SJ=n(NXe,"A",{href:!0});var oVt=s(SJ);qhr=r(oVt,"MarkupLMForTokenClassification"),oVt.forEach(t),jhr=r(NXe," (MarkupLM model)"),NXe.forEach(t),Dhr=i(Y),JM=n(Y,"LI",{});var qXe=s(JM);sEe=n(qXe,"STRONG",{});var rVt=s(sEe);Ghr=r(rVt,"megatron-bert"),rVt.forEach(t),Ohr=r(qXe," \u2014 "),RJ=n(qXe,"A",{href:!0});var tVt=s(RJ);Vhr=r(tVt,"MegatronBertForTokenClassification"),tVt.forEach(t),Xhr=r(qXe," (Megatron-BERT model)"),qXe.forEach(t),zhr=i(Y),YM=n(Y,"LI",{});var jXe=s(YM);lEe=n(jXe,"STRONG",{});var aVt=s(lEe);Qhr=r(aVt,"mobilebert"),aVt.forEach(t),Whr=r(jXe," \u2014 "),PJ=n(jXe,"A",{href:!0});var nVt=s(PJ);Uhr=r(nVt,"MobileBertForTokenClassification"),nVt.forEach(t),Hhr=r(jXe," (MobileBERT model)"),jXe.forEach(t),Jhr=i(Y),KM=n(Y,"LI",{});var DXe=s(KM);iEe=n(DXe,"STRONG",{});var sVt=s(iEe);Yhr=r(sVt,"mpnet"),sVt.forEach(t),Khr=r(DXe," \u2014 "),BJ=n(DXe,"A",{href:!0});var lVt=s(BJ);Zhr=r(lVt,"MPNetForTokenClassification"),lVt.forEach(t),eur=r(DXe," (MPNet model)"),DXe.forEach(t),our=i(Y),ZM=n(Y,"LI",{});var GXe=s(ZM);dEe=n(GXe,"STRONG",{});var iVt=s(dEe);rur=r(iVt,"nezha"),iVt.forEach(t),tur=r(GXe," \u2014 "),IJ=n(GXe,"A",{href:!0});var dVt=s(IJ);aur=r(dVt,"NezhaForTokenClassification"),dVt.forEach(t),nur=r(GXe," (Nezha model)"),GXe.forEach(t),sur=i(Y),eE=n(Y,"LI",{});var OXe=s(eE);cEe=n(OXe,"STRONG",{});var cVt=s(cEe);lur=r(cVt,"nystromformer"),cVt.forEach(t),iur=r(OXe," \u2014 "),NJ=n(OXe,"A",{href:!0});var mVt=s(NJ);dur=r(mVt,"NystromformerForTokenClassification"),mVt.forEach(t),cur=r(OXe," (Nystr\xF6mformer model)"),OXe.forEach(t),mur=i(Y),oE=n(Y,"LI",{});var VXe=s(oE);mEe=n(VXe,"STRONG",{});var fVt=s(mEe);fur=r(fVt,"qdqbert"),fVt.forEach(t),gur=r(VXe," \u2014 "),qJ=n(VXe,"A",{href:!0});var gVt=s(qJ);hur=r(gVt,"QDQBertForTokenClassification"),gVt.forEach(t),uur=r(VXe," (QDQBert model)"),VXe.forEach(t),pur=i(Y),rE=n(Y,"LI",{});var XXe=s(rE);fEe=n(XXe,"STRONG",{});var hVt=s(fEe);_ur=r(hVt,"rembert"),hVt.forEach(t),bur=r(XXe," \u2014 "),jJ=n(XXe,"A",{href:!0});var uVt=s(jJ);vur=r(uVt,"RemBertForTokenClassification"),uVt.forEach(t),Fur=r(XXe," (RemBERT model)"),XXe.forEach(t),Tur=i(Y),tE=n(Y,"LI",{});var zXe=s(tE);gEe=n(zXe,"STRONG",{});var pVt=s(gEe);Mur=r(pVt,"roberta"),pVt.forEach(t),Eur=r(zXe," \u2014 "),DJ=n(zXe,"A",{href:!0});var _Vt=s(DJ);Cur=r(_Vt,"RobertaForTokenClassification"),_Vt.forEach(t),wur=r(zXe," (RoBERTa model)"),zXe.forEach(t),Aur=i(Y),aE=n(Y,"LI",{});var QXe=s(aE);hEe=n(QXe,"STRONG",{});var bVt=s(hEe);Lur=r(bVt,"roformer"),bVt.forEach(t),yur=r(QXe," \u2014 "),GJ=n(QXe,"A",{href:!0});var vVt=s(GJ);xur=r(vVt,"RoFormerForTokenClassification"),vVt.forEach(t),$ur=r(QXe," (RoFormer model)"),QXe.forEach(t),kur=i(Y),nE=n(Y,"LI",{});var WXe=s(nE);uEe=n(WXe,"STRONG",{});var FVt=s(uEe);Sur=r(FVt,"squeezebert"),FVt.forEach(t),Rur=r(WXe," \u2014 "),OJ=n(WXe,"A",{href:!0});var TVt=s(OJ);Pur=r(TVt,"SqueezeBertForTokenClassification"),TVt.forEach(t),Bur=r(WXe," (SqueezeBERT model)"),WXe.forEach(t),Iur=i(Y),sE=n(Y,"LI",{});var UXe=s(sE);pEe=n(UXe,"STRONG",{});var MVt=s(pEe);Nur=r(MVt,"xlm"),MVt.forEach(t),qur=r(UXe," \u2014 "),VJ=n(UXe,"A",{href:!0});var EVt=s(VJ);jur=r(EVt,"XLMForTokenClassification"),EVt.forEach(t),Dur=r(UXe," (XLM model)"),UXe.forEach(t),Gur=i(Y),lE=n(Y,"LI",{});var HXe=s(lE);_Ee=n(HXe,"STRONG",{});var CVt=s(_Ee);Our=r(CVt,"xlm-roberta"),CVt.forEach(t),Vur=r(HXe," \u2014 "),XJ=n(HXe,"A",{href:!0});var wVt=s(XJ);Xur=r(wVt,"XLMRobertaForTokenClassification"),wVt.forEach(t),zur=r(HXe," (XLM-RoBERTa model)"),HXe.forEach(t),Qur=i(Y),iE=n(Y,"LI",{});var JXe=s(iE);bEe=n(JXe,"STRONG",{});var AVt=s(bEe);Wur=r(AVt,"xlm-roberta-xl"),AVt.forEach(t),Uur=r(JXe," \u2014 "),zJ=n(JXe,"A",{href:!0});var LVt=s(zJ);Hur=r(LVt,"XLMRobertaXLForTokenClassification"),LVt.forEach(t),Jur=r(JXe," (XLM-RoBERTa-XL model)"),JXe.forEach(t),Yur=i(Y),dE=n(Y,"LI",{});var YXe=s(dE);vEe=n(YXe,"STRONG",{});var yVt=s(vEe);Kur=r(yVt,"xlnet"),yVt.forEach(t),Zur=r(YXe," \u2014 "),QJ=n(YXe,"A",{href:!0});var xVt=s(QJ);epr=r(xVt,"XLNetForTokenClassification"),xVt.forEach(t),opr=r(YXe," (XLNet model)"),YXe.forEach(t),rpr=i(Y),cE=n(Y,"LI",{});var KXe=s(cE);FEe=n(KXe,"STRONG",{});var $Vt=s(FEe);tpr=r($Vt,"yoso"),$Vt.forEach(t),apr=r(KXe," \u2014 "),WJ=n(KXe,"A",{href:!0});var kVt=s(WJ);npr=r(kVt,"YosoForTokenClassification"),kVt.forEach(t),spr=r(KXe," (YOSO model)"),KXe.forEach(t),Y.forEach(t),lpr=i(ya),mE=n(ya,"P",{});var ZXe=s(mE);ipr=r(ZXe,"The model is set in evaluation mode by default using "),TEe=n(ZXe,"CODE",{});var SVt=s(TEe);dpr=r(SVt,"model.eval()"),SVt.forEach(t),cpr=r(ZXe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MEe=n(ZXe,"CODE",{});var RVt=s(MEe);mpr=r(RVt,"model.train()"),RVt.forEach(t),ZXe.forEach(t),fpr=i(ya),T(fE.$$.fragment,ya),ya.forEach(t),Pl.forEach(t),deo=i(m),Xd=n(m,"H2",{class:!0});var Ero=s(Xd);gE=n(Ero,"A",{id:!0,class:!0,href:!0});var PVt=s(gE);EEe=n(PVt,"SPAN",{});var BVt=s(EEe);T(u$.$$.fragment,BVt),BVt.forEach(t),PVt.forEach(t),gpr=i(Ero),CEe=n(Ero,"SPAN",{});var IVt=s(CEe);hpr=r(IVt,"AutoModelForQuestionAnswering"),IVt.forEach(t),Ero.forEach(t),ceo=i(m),Vo=n(m,"DIV",{class:!0});var Bl=s(Vo);T(p$.$$.fragment,Bl),upr=i(Bl),zd=n(Bl,"P",{});var fie=s(zd);ppr=r(fie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),UJ=n(fie,"A",{href:!0});var NVt=s(UJ);_pr=r(NVt,"from_pretrained()"),NVt.forEach(t),bpr=r(fie," class method or the "),HJ=n(fie,"A",{href:!0});var qVt=s(HJ);vpr=r(qVt,"from_config()"),qVt.forEach(t),Fpr=r(fie,` class
method.`),fie.forEach(t),Tpr=i(Bl),_$=n(Bl,"P",{});var Cro=s(_$);Mpr=r(Cro,"This class cannot be instantiated directly using "),wEe=n(Cro,"CODE",{});var jVt=s(wEe);Epr=r(jVt,"__init__()"),jVt.forEach(t),Cpr=r(Cro," (throws an error)."),Cro.forEach(t),wpr=i(Bl),At=n(Bl,"DIV",{class:!0});var c8=s(At);T(b$.$$.fragment,c8),Apr=i(c8),AEe=n(c8,"P",{});var DVt=s(AEe);Lpr=r(DVt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DVt.forEach(t),ypr=i(c8),Qd=n(c8,"P",{});var gie=s(Qd);xpr=r(gie,`Note:
Loading a model from its configuration file does `),LEe=n(gie,"STRONG",{});var GVt=s(LEe);$pr=r(GVt,"not"),GVt.forEach(t),kpr=r(gie,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(gie,"A",{href:!0});var OVt=s(JJ);Spr=r(OVt,"from_pretrained()"),OVt.forEach(t),Rpr=r(gie," to load the model weights."),gie.forEach(t),Ppr=i(c8),T(hE.$$.fragment,c8),c8.forEach(t),Bpr=i(Bl),io=n(Bl,"DIV",{class:!0});var xa=s(io);T(v$.$$.fragment,xa),Ipr=i(xa),yEe=n(xa,"P",{});var VVt=s(yEe);Npr=r(VVt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VVt.forEach(t),qpr=i(xa),nn=n(xa,"P",{});var m8=s(nn);jpr=r(m8,"The model class to instantiate is selected based on the "),xEe=n(m8,"CODE",{});var XVt=s(xEe);Dpr=r(XVt,"model_type"),XVt.forEach(t),Gpr=r(m8,` property of the config object (either
passed as an argument or loaded from `),$Ee=n(m8,"CODE",{});var zVt=s($Ee);Opr=r(zVt,"pretrained_model_name_or_path"),zVt.forEach(t),Vpr=r(m8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=n(m8,"CODE",{});var QVt=s(kEe);Xpr=r(QVt,"pretrained_model_name_or_path"),QVt.forEach(t),zpr=r(m8,":"),m8.forEach(t),Qpr=i(xa),V=n(xa,"UL",{});var X=s(V);uE=n(X,"LI",{});var eze=s(uE);SEe=n(eze,"STRONG",{});var WVt=s(SEe);Wpr=r(WVt,"albert"),WVt.forEach(t),Upr=r(eze," \u2014 "),YJ=n(eze,"A",{href:!0});var UVt=s(YJ);Hpr=r(UVt,"AlbertForQuestionAnswering"),UVt.forEach(t),Jpr=r(eze," (ALBERT model)"),eze.forEach(t),Ypr=i(X),pE=n(X,"LI",{});var oze=s(pE);REe=n(oze,"STRONG",{});var HVt=s(REe);Kpr=r(HVt,"bart"),HVt.forEach(t),Zpr=r(oze," \u2014 "),KJ=n(oze,"A",{href:!0});var JVt=s(KJ);e_r=r(JVt,"BartForQuestionAnswering"),JVt.forEach(t),o_r=r(oze," (BART model)"),oze.forEach(t),r_r=i(X),_E=n(X,"LI",{});var rze=s(_E);PEe=n(rze,"STRONG",{});var YVt=s(PEe);t_r=r(YVt,"bert"),YVt.forEach(t),a_r=r(rze," \u2014 "),ZJ=n(rze,"A",{href:!0});var KVt=s(ZJ);n_r=r(KVt,"BertForQuestionAnswering"),KVt.forEach(t),s_r=r(rze," (BERT model)"),rze.forEach(t),l_r=i(X),bE=n(X,"LI",{});var tze=s(bE);BEe=n(tze,"STRONG",{});var ZVt=s(BEe);i_r=r(ZVt,"big_bird"),ZVt.forEach(t),d_r=r(tze," \u2014 "),eY=n(tze,"A",{href:!0});var eXt=s(eY);c_r=r(eXt,"BigBirdForQuestionAnswering"),eXt.forEach(t),m_r=r(tze," (BigBird model)"),tze.forEach(t),f_r=i(X),vE=n(X,"LI",{});var aze=s(vE);IEe=n(aze,"STRONG",{});var oXt=s(IEe);g_r=r(oXt,"bigbird_pegasus"),oXt.forEach(t),h_r=r(aze," \u2014 "),oY=n(aze,"A",{href:!0});var rXt=s(oY);u_r=r(rXt,"BigBirdPegasusForQuestionAnswering"),rXt.forEach(t),p_r=r(aze," (BigBird-Pegasus model)"),aze.forEach(t),__r=i(X),FE=n(X,"LI",{});var nze=s(FE);NEe=n(nze,"STRONG",{});var tXt=s(NEe);b_r=r(tXt,"camembert"),tXt.forEach(t),v_r=r(nze," \u2014 "),rY=n(nze,"A",{href:!0});var aXt=s(rY);F_r=r(aXt,"CamembertForQuestionAnswering"),aXt.forEach(t),T_r=r(nze," (CamemBERT model)"),nze.forEach(t),M_r=i(X),TE=n(X,"LI",{});var sze=s(TE);qEe=n(sze,"STRONG",{});var nXt=s(qEe);E_r=r(nXt,"canine"),nXt.forEach(t),C_r=r(sze," \u2014 "),tY=n(sze,"A",{href:!0});var sXt=s(tY);w_r=r(sXt,"CanineForQuestionAnswering"),sXt.forEach(t),A_r=r(sze," (CANINE model)"),sze.forEach(t),L_r=i(X),ME=n(X,"LI",{});var lze=s(ME);jEe=n(lze,"STRONG",{});var lXt=s(jEe);y_r=r(lXt,"convbert"),lXt.forEach(t),x_r=r(lze," \u2014 "),aY=n(lze,"A",{href:!0});var iXt=s(aY);$_r=r(iXt,"ConvBertForQuestionAnswering"),iXt.forEach(t),k_r=r(lze," (ConvBERT model)"),lze.forEach(t),S_r=i(X),EE=n(X,"LI",{});var ize=s(EE);DEe=n(ize,"STRONG",{});var dXt=s(DEe);R_r=r(dXt,"data2vec-text"),dXt.forEach(t),P_r=r(ize," \u2014 "),nY=n(ize,"A",{href:!0});var cXt=s(nY);B_r=r(cXt,"Data2VecTextForQuestionAnswering"),cXt.forEach(t),I_r=r(ize," (Data2VecText model)"),ize.forEach(t),N_r=i(X),CE=n(X,"LI",{});var dze=s(CE);GEe=n(dze,"STRONG",{});var mXt=s(GEe);q_r=r(mXt,"deberta"),mXt.forEach(t),j_r=r(dze," \u2014 "),sY=n(dze,"A",{href:!0});var fXt=s(sY);D_r=r(fXt,"DebertaForQuestionAnswering"),fXt.forEach(t),G_r=r(dze," (DeBERTa model)"),dze.forEach(t),O_r=i(X),wE=n(X,"LI",{});var cze=s(wE);OEe=n(cze,"STRONG",{});var gXt=s(OEe);V_r=r(gXt,"deberta-v2"),gXt.forEach(t),X_r=r(cze," \u2014 "),lY=n(cze,"A",{href:!0});var hXt=s(lY);z_r=r(hXt,"DebertaV2ForQuestionAnswering"),hXt.forEach(t),Q_r=r(cze," (DeBERTa-v2 model)"),cze.forEach(t),W_r=i(X),AE=n(X,"LI",{});var mze=s(AE);VEe=n(mze,"STRONG",{});var uXt=s(VEe);U_r=r(uXt,"distilbert"),uXt.forEach(t),H_r=r(mze," \u2014 "),iY=n(mze,"A",{href:!0});var pXt=s(iY);J_r=r(pXt,"DistilBertForQuestionAnswering"),pXt.forEach(t),Y_r=r(mze," (DistilBERT model)"),mze.forEach(t),K_r=i(X),LE=n(X,"LI",{});var fze=s(LE);XEe=n(fze,"STRONG",{});var _Xt=s(XEe);Z_r=r(_Xt,"electra"),_Xt.forEach(t),e2r=r(fze," \u2014 "),dY=n(fze,"A",{href:!0});var bXt=s(dY);o2r=r(bXt,"ElectraForQuestionAnswering"),bXt.forEach(t),r2r=r(fze," (ELECTRA model)"),fze.forEach(t),t2r=i(X),yE=n(X,"LI",{});var gze=s(yE);zEe=n(gze,"STRONG",{});var vXt=s(zEe);a2r=r(vXt,"ernie"),vXt.forEach(t),n2r=r(gze," \u2014 "),cY=n(gze,"A",{href:!0});var FXt=s(cY);s2r=r(FXt,"ErnieForQuestionAnswering"),FXt.forEach(t),l2r=r(gze," (ERNIE model)"),gze.forEach(t),i2r=i(X),xE=n(X,"LI",{});var hze=s(xE);QEe=n(hze,"STRONG",{});var TXt=s(QEe);d2r=r(TXt,"flaubert"),TXt.forEach(t),c2r=r(hze," \u2014 "),mY=n(hze,"A",{href:!0});var MXt=s(mY);m2r=r(MXt,"FlaubertForQuestionAnsweringSimple"),MXt.forEach(t),f2r=r(hze," (FlauBERT model)"),hze.forEach(t),g2r=i(X),$E=n(X,"LI",{});var uze=s($E);WEe=n(uze,"STRONG",{});var EXt=s(WEe);h2r=r(EXt,"fnet"),EXt.forEach(t),u2r=r(uze," \u2014 "),fY=n(uze,"A",{href:!0});var CXt=s(fY);p2r=r(CXt,"FNetForQuestionAnswering"),CXt.forEach(t),_2r=r(uze," (FNet model)"),uze.forEach(t),b2r=i(X),kE=n(X,"LI",{});var pze=s(kE);UEe=n(pze,"STRONG",{});var wXt=s(UEe);v2r=r(wXt,"funnel"),wXt.forEach(t),F2r=r(pze," \u2014 "),gY=n(pze,"A",{href:!0});var AXt=s(gY);T2r=r(AXt,"FunnelForQuestionAnswering"),AXt.forEach(t),M2r=r(pze," (Funnel Transformer model)"),pze.forEach(t),E2r=i(X),SE=n(X,"LI",{});var _ze=s(SE);HEe=n(_ze,"STRONG",{});var LXt=s(HEe);C2r=r(LXt,"gptj"),LXt.forEach(t),w2r=r(_ze," \u2014 "),hY=n(_ze,"A",{href:!0});var yXt=s(hY);A2r=r(yXt,"GPTJForQuestionAnswering"),yXt.forEach(t),L2r=r(_ze," (GPT-J model)"),_ze.forEach(t),y2r=i(X),RE=n(X,"LI",{});var bze=s(RE);JEe=n(bze,"STRONG",{});var xXt=s(JEe);x2r=r(xXt,"ibert"),xXt.forEach(t),$2r=r(bze," \u2014 "),uY=n(bze,"A",{href:!0});var $Xt=s(uY);k2r=r($Xt,"IBertForQuestionAnswering"),$Xt.forEach(t),S2r=r(bze," (I-BERT model)"),bze.forEach(t),R2r=i(X),PE=n(X,"LI",{});var vze=s(PE);YEe=n(vze,"STRONG",{});var kXt=s(YEe);P2r=r(kXt,"layoutlmv2"),kXt.forEach(t),B2r=r(vze," \u2014 "),pY=n(vze,"A",{href:!0});var SXt=s(pY);I2r=r(SXt,"LayoutLMv2ForQuestionAnswering"),SXt.forEach(t),N2r=r(vze," (LayoutLMv2 model)"),vze.forEach(t),q2r=i(X),BE=n(X,"LI",{});var Fze=s(BE);KEe=n(Fze,"STRONG",{});var RXt=s(KEe);j2r=r(RXt,"layoutlmv3"),RXt.forEach(t),D2r=r(Fze," \u2014 "),_Y=n(Fze,"A",{href:!0});var PXt=s(_Y);G2r=r(PXt,"LayoutLMv3ForQuestionAnswering"),PXt.forEach(t),O2r=r(Fze," (LayoutLMv3 model)"),Fze.forEach(t),V2r=i(X),IE=n(X,"LI",{});var Tze=s(IE);ZEe=n(Tze,"STRONG",{});var BXt=s(ZEe);X2r=r(BXt,"led"),BXt.forEach(t),z2r=r(Tze," \u2014 "),bY=n(Tze,"A",{href:!0});var IXt=s(bY);Q2r=r(IXt,"LEDForQuestionAnswering"),IXt.forEach(t),W2r=r(Tze," (LED model)"),Tze.forEach(t),U2r=i(X),NE=n(X,"LI",{});var Mze=s(NE);e4e=n(Mze,"STRONG",{});var NXt=s(e4e);H2r=r(NXt,"longformer"),NXt.forEach(t),J2r=r(Mze," \u2014 "),vY=n(Mze,"A",{href:!0});var qXt=s(vY);Y2r=r(qXt,"LongformerForQuestionAnswering"),qXt.forEach(t),K2r=r(Mze," (Longformer model)"),Mze.forEach(t),Z2r=i(X),qE=n(X,"LI",{});var Eze=s(qE);o4e=n(Eze,"STRONG",{});var jXt=s(o4e);e1r=r(jXt,"luke"),jXt.forEach(t),o1r=r(Eze," \u2014 "),FY=n(Eze,"A",{href:!0});var DXt=s(FY);r1r=r(DXt,"LukeForQuestionAnswering"),DXt.forEach(t),t1r=r(Eze," (LUKE model)"),Eze.forEach(t),a1r=i(X),jE=n(X,"LI",{});var Cze=s(jE);r4e=n(Cze,"STRONG",{});var GXt=s(r4e);n1r=r(GXt,"lxmert"),GXt.forEach(t),s1r=r(Cze," \u2014 "),TY=n(Cze,"A",{href:!0});var OXt=s(TY);l1r=r(OXt,"LxmertForQuestionAnswering"),OXt.forEach(t),i1r=r(Cze," (LXMERT model)"),Cze.forEach(t),d1r=i(X),DE=n(X,"LI",{});var wze=s(DE);t4e=n(wze,"STRONG",{});var VXt=s(t4e);c1r=r(VXt,"markuplm"),VXt.forEach(t),m1r=r(wze," \u2014 "),MY=n(wze,"A",{href:!0});var XXt=s(MY);f1r=r(XXt,"MarkupLMForQuestionAnswering"),XXt.forEach(t),g1r=r(wze," (MarkupLM model)"),wze.forEach(t),h1r=i(X),GE=n(X,"LI",{});var Aze=s(GE);a4e=n(Aze,"STRONG",{});var zXt=s(a4e);u1r=r(zXt,"mbart"),zXt.forEach(t),p1r=r(Aze," \u2014 "),EY=n(Aze,"A",{href:!0});var QXt=s(EY);_1r=r(QXt,"MBartForQuestionAnswering"),QXt.forEach(t),b1r=r(Aze," (mBART model)"),Aze.forEach(t),v1r=i(X),OE=n(X,"LI",{});var Lze=s(OE);n4e=n(Lze,"STRONG",{});var WXt=s(n4e);F1r=r(WXt,"megatron-bert"),WXt.forEach(t),T1r=r(Lze," \u2014 "),CY=n(Lze,"A",{href:!0});var UXt=s(CY);M1r=r(UXt,"MegatronBertForQuestionAnswering"),UXt.forEach(t),E1r=r(Lze," (Megatron-BERT model)"),Lze.forEach(t),C1r=i(X),VE=n(X,"LI",{});var yze=s(VE);s4e=n(yze,"STRONG",{});var HXt=s(s4e);w1r=r(HXt,"mobilebert"),HXt.forEach(t),A1r=r(yze," \u2014 "),wY=n(yze,"A",{href:!0});var JXt=s(wY);L1r=r(JXt,"MobileBertForQuestionAnswering"),JXt.forEach(t),y1r=r(yze," (MobileBERT model)"),yze.forEach(t),x1r=i(X),XE=n(X,"LI",{});var xze=s(XE);l4e=n(xze,"STRONG",{});var YXt=s(l4e);$1r=r(YXt,"mpnet"),YXt.forEach(t),k1r=r(xze," \u2014 "),AY=n(xze,"A",{href:!0});var KXt=s(AY);S1r=r(KXt,"MPNetForQuestionAnswering"),KXt.forEach(t),R1r=r(xze," (MPNet model)"),xze.forEach(t),P1r=i(X),zE=n(X,"LI",{});var $ze=s(zE);i4e=n($ze,"STRONG",{});var ZXt=s(i4e);B1r=r(ZXt,"mvp"),ZXt.forEach(t),I1r=r($ze," \u2014 "),LY=n($ze,"A",{href:!0});var ezt=s(LY);N1r=r(ezt,"MvpForQuestionAnswering"),ezt.forEach(t),q1r=r($ze," (MVP model)"),$ze.forEach(t),j1r=i(X),QE=n(X,"LI",{});var kze=s(QE);d4e=n(kze,"STRONG",{});var ozt=s(d4e);D1r=r(ozt,"nezha"),ozt.forEach(t),G1r=r(kze," \u2014 "),yY=n(kze,"A",{href:!0});var rzt=s(yY);O1r=r(rzt,"NezhaForQuestionAnswering"),rzt.forEach(t),V1r=r(kze," (Nezha model)"),kze.forEach(t),X1r=i(X),WE=n(X,"LI",{});var Sze=s(WE);c4e=n(Sze,"STRONG",{});var tzt=s(c4e);z1r=r(tzt,"nystromformer"),tzt.forEach(t),Q1r=r(Sze," \u2014 "),xY=n(Sze,"A",{href:!0});var azt=s(xY);W1r=r(azt,"NystromformerForQuestionAnswering"),azt.forEach(t),U1r=r(Sze," (Nystr\xF6mformer model)"),Sze.forEach(t),H1r=i(X),UE=n(X,"LI",{});var Rze=s(UE);m4e=n(Rze,"STRONG",{});var nzt=s(m4e);J1r=r(nzt,"qdqbert"),nzt.forEach(t),Y1r=r(Rze," \u2014 "),$Y=n(Rze,"A",{href:!0});var szt=s($Y);K1r=r(szt,"QDQBertForQuestionAnswering"),szt.forEach(t),Z1r=r(Rze," (QDQBert model)"),Rze.forEach(t),ebr=i(X),HE=n(X,"LI",{});var Pze=s(HE);f4e=n(Pze,"STRONG",{});var lzt=s(f4e);obr=r(lzt,"reformer"),lzt.forEach(t),rbr=r(Pze," \u2014 "),kY=n(Pze,"A",{href:!0});var izt=s(kY);tbr=r(izt,"ReformerForQuestionAnswering"),izt.forEach(t),abr=r(Pze," (Reformer model)"),Pze.forEach(t),nbr=i(X),JE=n(X,"LI",{});var Bze=s(JE);g4e=n(Bze,"STRONG",{});var dzt=s(g4e);sbr=r(dzt,"rembert"),dzt.forEach(t),lbr=r(Bze," \u2014 "),SY=n(Bze,"A",{href:!0});var czt=s(SY);ibr=r(czt,"RemBertForQuestionAnswering"),czt.forEach(t),dbr=r(Bze," (RemBERT model)"),Bze.forEach(t),cbr=i(X),YE=n(X,"LI",{});var Ize=s(YE);h4e=n(Ize,"STRONG",{});var mzt=s(h4e);mbr=r(mzt,"roberta"),mzt.forEach(t),fbr=r(Ize," \u2014 "),RY=n(Ize,"A",{href:!0});var fzt=s(RY);gbr=r(fzt,"RobertaForQuestionAnswering"),fzt.forEach(t),hbr=r(Ize," (RoBERTa model)"),Ize.forEach(t),ubr=i(X),KE=n(X,"LI",{});var Nze=s(KE);u4e=n(Nze,"STRONG",{});var gzt=s(u4e);pbr=r(gzt,"roformer"),gzt.forEach(t),_br=r(Nze," \u2014 "),PY=n(Nze,"A",{href:!0});var hzt=s(PY);bbr=r(hzt,"RoFormerForQuestionAnswering"),hzt.forEach(t),vbr=r(Nze," (RoFormer model)"),Nze.forEach(t),Fbr=i(X),ZE=n(X,"LI",{});var qze=s(ZE);p4e=n(qze,"STRONG",{});var uzt=s(p4e);Tbr=r(uzt,"splinter"),uzt.forEach(t),Mbr=r(qze," \u2014 "),BY=n(qze,"A",{href:!0});var pzt=s(BY);Ebr=r(pzt,"SplinterForQuestionAnswering"),pzt.forEach(t),Cbr=r(qze," (Splinter model)"),qze.forEach(t),wbr=i(X),e4=n(X,"LI",{});var jze=s(e4);_4e=n(jze,"STRONG",{});var _zt=s(_4e);Abr=r(_zt,"squeezebert"),_zt.forEach(t),Lbr=r(jze," \u2014 "),IY=n(jze,"A",{href:!0});var bzt=s(IY);ybr=r(bzt,"SqueezeBertForQuestionAnswering"),bzt.forEach(t),xbr=r(jze," (SqueezeBERT model)"),jze.forEach(t),$br=i(X),o4=n(X,"LI",{});var Dze=s(o4);b4e=n(Dze,"STRONG",{});var vzt=s(b4e);kbr=r(vzt,"xlm"),vzt.forEach(t),Sbr=r(Dze," \u2014 "),NY=n(Dze,"A",{href:!0});var Fzt=s(NY);Rbr=r(Fzt,"XLMForQuestionAnsweringSimple"),Fzt.forEach(t),Pbr=r(Dze," (XLM model)"),Dze.forEach(t),Bbr=i(X),r4=n(X,"LI",{});var Gze=s(r4);v4e=n(Gze,"STRONG",{});var Tzt=s(v4e);Ibr=r(Tzt,"xlm-roberta"),Tzt.forEach(t),Nbr=r(Gze," \u2014 "),qY=n(Gze,"A",{href:!0});var Mzt=s(qY);qbr=r(Mzt,"XLMRobertaForQuestionAnswering"),Mzt.forEach(t),jbr=r(Gze," (XLM-RoBERTa model)"),Gze.forEach(t),Dbr=i(X),t4=n(X,"LI",{});var Oze=s(t4);F4e=n(Oze,"STRONG",{});var Ezt=s(F4e);Gbr=r(Ezt,"xlm-roberta-xl"),Ezt.forEach(t),Obr=r(Oze," \u2014 "),jY=n(Oze,"A",{href:!0});var Czt=s(jY);Vbr=r(Czt,"XLMRobertaXLForQuestionAnswering"),Czt.forEach(t),Xbr=r(Oze," (XLM-RoBERTa-XL model)"),Oze.forEach(t),zbr=i(X),a4=n(X,"LI",{});var Vze=s(a4);T4e=n(Vze,"STRONG",{});var wzt=s(T4e);Qbr=r(wzt,"xlnet"),wzt.forEach(t),Wbr=r(Vze," \u2014 "),DY=n(Vze,"A",{href:!0});var Azt=s(DY);Ubr=r(Azt,"XLNetForQuestionAnsweringSimple"),Azt.forEach(t),Hbr=r(Vze," (XLNet model)"),Vze.forEach(t),Jbr=i(X),n4=n(X,"LI",{});var Xze=s(n4);M4e=n(Xze,"STRONG",{});var Lzt=s(M4e);Ybr=r(Lzt,"yoso"),Lzt.forEach(t),Kbr=r(Xze," \u2014 "),GY=n(Xze,"A",{href:!0});var yzt=s(GY);Zbr=r(yzt,"YosoForQuestionAnswering"),yzt.forEach(t),evr=r(Xze," (YOSO model)"),Xze.forEach(t),X.forEach(t),ovr=i(xa),s4=n(xa,"P",{});var zze=s(s4);rvr=r(zze,"The model is set in evaluation mode by default using "),E4e=n(zze,"CODE",{});var xzt=s(E4e);tvr=r(xzt,"model.eval()"),xzt.forEach(t),avr=r(zze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C4e=n(zze,"CODE",{});var $zt=s(C4e);nvr=r($zt,"model.train()"),$zt.forEach(t),zze.forEach(t),svr=i(xa),T(l4.$$.fragment,xa),xa.forEach(t),Bl.forEach(t),meo=i(m),Wd=n(m,"H2",{class:!0});var wro=s(Wd);i4=n(wro,"A",{id:!0,class:!0,href:!0});var kzt=s(i4);w4e=n(kzt,"SPAN",{});var Szt=s(w4e);T(F$.$$.fragment,Szt),Szt.forEach(t),kzt.forEach(t),lvr=i(wro),A4e=n(wro,"SPAN",{});var Rzt=s(A4e);ivr=r(Rzt,"AutoModelForTableQuestionAnswering"),Rzt.forEach(t),wro.forEach(t),feo=i(m),Xo=n(m,"DIV",{class:!0});var Il=s(Xo);T(T$.$$.fragment,Il),dvr=i(Il),Ud=n(Il,"P",{});var hie=s(Ud);cvr=r(hie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OY=n(hie,"A",{href:!0});var Pzt=s(OY);mvr=r(Pzt,"from_pretrained()"),Pzt.forEach(t),fvr=r(hie," class method or the "),VY=n(hie,"A",{href:!0});var Bzt=s(VY);gvr=r(Bzt,"from_config()"),Bzt.forEach(t),hvr=r(hie,` class
method.`),hie.forEach(t),uvr=i(Il),M$=n(Il,"P",{});var Aro=s(M$);pvr=r(Aro,"This class cannot be instantiated directly using "),L4e=n(Aro,"CODE",{});var Izt=s(L4e);_vr=r(Izt,"__init__()"),Izt.forEach(t),bvr=r(Aro," (throws an error)."),Aro.forEach(t),vvr=i(Il),Lt=n(Il,"DIV",{class:!0});var f8=s(Lt);T(E$.$$.fragment,f8),Fvr=i(f8),y4e=n(f8,"P",{});var Nzt=s(y4e);Tvr=r(Nzt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Nzt.forEach(t),Mvr=i(f8),Hd=n(f8,"P",{});var uie=s(Hd);Evr=r(uie,`Note:
Loading a model from its configuration file does `),x4e=n(uie,"STRONG",{});var qzt=s(x4e);Cvr=r(qzt,"not"),qzt.forEach(t),wvr=r(uie,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(uie,"A",{href:!0});var jzt=s(XY);Avr=r(jzt,"from_pretrained()"),jzt.forEach(t),Lvr=r(uie," to load the model weights."),uie.forEach(t),yvr=i(f8),T(d4.$$.fragment,f8),f8.forEach(t),xvr=i(Il),co=n(Il,"DIV",{class:!0});var $a=s(co);T(C$.$$.fragment,$a),$vr=i($a),$4e=n($a,"P",{});var Dzt=s($4e);kvr=r(Dzt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Dzt.forEach(t),Svr=i($a),sn=n($a,"P",{});var g8=s(sn);Rvr=r(g8,"The model class to instantiate is selected based on the "),k4e=n(g8,"CODE",{});var Gzt=s(k4e);Pvr=r(Gzt,"model_type"),Gzt.forEach(t),Bvr=r(g8,` property of the config object (either
passed as an argument or loaded from `),S4e=n(g8,"CODE",{});var Ozt=s(S4e);Ivr=r(Ozt,"pretrained_model_name_or_path"),Ozt.forEach(t),Nvr=r(g8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=n(g8,"CODE",{});var Vzt=s(R4e);qvr=r(Vzt,"pretrained_model_name_or_path"),Vzt.forEach(t),jvr=r(g8,":"),g8.forEach(t),Dvr=i($a),P4e=n($a,"UL",{});var Xzt=s(P4e);c4=n(Xzt,"LI",{});var Qze=s(c4);B4e=n(Qze,"STRONG",{});var zzt=s(B4e);Gvr=r(zzt,"tapas"),zzt.forEach(t),Ovr=r(Qze," \u2014 "),zY=n(Qze,"A",{href:!0});var Qzt=s(zY);Vvr=r(Qzt,"TapasForQuestionAnswering"),Qzt.forEach(t),Xvr=r(Qze," (TAPAS model)"),Qze.forEach(t),Xzt.forEach(t),zvr=i($a),m4=n($a,"P",{});var Wze=s(m4);Qvr=r(Wze,"The model is set in evaluation mode by default using "),I4e=n(Wze,"CODE",{});var Wzt=s(I4e);Wvr=r(Wzt,"model.eval()"),Wzt.forEach(t),Uvr=r(Wze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N4e=n(Wze,"CODE",{});var Uzt=s(N4e);Hvr=r(Uzt,"model.train()"),Uzt.forEach(t),Wze.forEach(t),Jvr=i($a),T(f4.$$.fragment,$a),$a.forEach(t),Il.forEach(t),geo=i(m),Jd=n(m,"H2",{class:!0});var Lro=s(Jd);g4=n(Lro,"A",{id:!0,class:!0,href:!0});var Hzt=s(g4);q4e=n(Hzt,"SPAN",{});var Jzt=s(q4e);T(w$.$$.fragment,Jzt),Jzt.forEach(t),Hzt.forEach(t),Yvr=i(Lro),j4e=n(Lro,"SPAN",{});var Yzt=s(j4e);Kvr=r(Yzt,"AutoModelForDocumentQuestionAnswering"),Yzt.forEach(t),Lro.forEach(t),heo=i(m),zo=n(m,"DIV",{class:!0});var Nl=s(zo);T(A$.$$.fragment,Nl),Zvr=i(Nl),Yd=n(Nl,"P",{});var pie=s(Yd);eFr=r(pie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),QY=n(pie,"A",{href:!0});var Kzt=s(QY);oFr=r(Kzt,"from_pretrained()"),Kzt.forEach(t),rFr=r(pie," class method or the "),WY=n(pie,"A",{href:!0});var Zzt=s(WY);tFr=r(Zzt,"from_config()"),Zzt.forEach(t),aFr=r(pie,` class
method.`),pie.forEach(t),nFr=i(Nl),L$=n(Nl,"P",{});var yro=s(L$);sFr=r(yro,"This class cannot be instantiated directly using "),D4e=n(yro,"CODE",{});var eQt=s(D4e);lFr=r(eQt,"__init__()"),eQt.forEach(t),iFr=r(yro," (throws an error)."),yro.forEach(t),dFr=i(Nl),yt=n(Nl,"DIV",{class:!0});var h8=s(yt);T(y$.$$.fragment,h8),cFr=i(h8),G4e=n(h8,"P",{});var oQt=s(G4e);mFr=r(oQt,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),oQt.forEach(t),fFr=i(h8),Kd=n(h8,"P",{});var _ie=s(Kd);gFr=r(_ie,`Note:
Loading a model from its configuration file does `),O4e=n(_ie,"STRONG",{});var rQt=s(O4e);hFr=r(rQt,"not"),rQt.forEach(t),uFr=r(_ie,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(_ie,"A",{href:!0});var tQt=s(UY);pFr=r(tQt,"from_pretrained()"),tQt.forEach(t),_Fr=r(_ie," to load the model weights."),_ie.forEach(t),bFr=i(h8),T(h4.$$.fragment,h8),h8.forEach(t),vFr=i(Nl),mo=n(Nl,"DIV",{class:!0});var ka=s(mo);T(x$.$$.fragment,ka),FFr=i(ka),V4e=n(ka,"P",{});var aQt=s(V4e);TFr=r(aQt,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),aQt.forEach(t),MFr=i(ka),ln=n(ka,"P",{});var u8=s(ln);EFr=r(u8,"The model class to instantiate is selected based on the "),X4e=n(u8,"CODE",{});var nQt=s(X4e);CFr=r(nQt,"model_type"),nQt.forEach(t),wFr=r(u8,` property of the config object (either
passed as an argument or loaded from `),z4e=n(u8,"CODE",{});var sQt=s(z4e);AFr=r(sQt,"pretrained_model_name_or_path"),sQt.forEach(t),LFr=r(u8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(u8,"CODE",{});var lQt=s(Q4e);yFr=r(lQt,"pretrained_model_name_or_path"),lQt.forEach(t),xFr=r(u8,":"),u8.forEach(t),$Fr=i(ka),Zd=n(ka,"UL",{});var bie=s(Zd);u4=n(bie,"LI",{});var Uze=s(u4);W4e=n(Uze,"STRONG",{});var iQt=s(W4e);kFr=r(iQt,"layoutlm"),iQt.forEach(t),SFr=r(Uze," \u2014 "),HY=n(Uze,"A",{href:!0});var dQt=s(HY);RFr=r(dQt,"LayoutLMForQuestionAnswering"),dQt.forEach(t),PFr=r(Uze," (LayoutLM model)"),Uze.forEach(t),BFr=i(bie),p4=n(bie,"LI",{});var Hze=s(p4);U4e=n(Hze,"STRONG",{});var cQt=s(U4e);IFr=r(cQt,"layoutlmv2"),cQt.forEach(t),NFr=r(Hze," \u2014 "),JY=n(Hze,"A",{href:!0});var mQt=s(JY);qFr=r(mQt,"LayoutLMv2ForQuestionAnswering"),mQt.forEach(t),jFr=r(Hze," (LayoutLMv2 model)"),Hze.forEach(t),DFr=i(bie),_4=n(bie,"LI",{});var Jze=s(_4);H4e=n(Jze,"STRONG",{});var fQt=s(H4e);GFr=r(fQt,"layoutlmv3"),fQt.forEach(t),OFr=r(Jze," \u2014 "),YY=n(Jze,"A",{href:!0});var gQt=s(YY);VFr=r(gQt,"LayoutLMv3ForQuestionAnswering"),gQt.forEach(t),XFr=r(Jze," (LayoutLMv3 model)"),Jze.forEach(t),bie.forEach(t),zFr=i(ka),b4=n(ka,"P",{});var Yze=s(b4);QFr=r(Yze,"The model is set in evaluation mode by default using "),J4e=n(Yze,"CODE",{});var hQt=s(J4e);WFr=r(hQt,"model.eval()"),hQt.forEach(t),UFr=r(Yze,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y4e=n(Yze,"CODE",{});var uQt=s(Y4e);HFr=r(uQt,"model.train()"),uQt.forEach(t),Yze.forEach(t),JFr=i(ka),T(v4.$$.fragment,ka),ka.forEach(t),Nl.forEach(t),ueo=i(m),ec=n(m,"H2",{class:!0});var xro=s(ec);F4=n(xro,"A",{id:!0,class:!0,href:!0});var pQt=s(F4);K4e=n(pQt,"SPAN",{});var _Qt=s(K4e);T($$.$$.fragment,_Qt),_Qt.forEach(t),pQt.forEach(t),YFr=i(xro),Z4e=n(xro,"SPAN",{});var bQt=s(Z4e);KFr=r(bQt,"AutoModelForImageClassification"),bQt.forEach(t),xro.forEach(t),peo=i(m),Qo=n(m,"DIV",{class:!0});var ql=s(Qo);T(k$.$$.fragment,ql),ZFr=i(ql),oc=n(ql,"P",{});var vie=s(oc);eTr=r(vie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KY=n(vie,"A",{href:!0});var vQt=s(KY);oTr=r(vQt,"from_pretrained()"),vQt.forEach(t),rTr=r(vie," class method or the "),ZY=n(vie,"A",{href:!0});var FQt=s(ZY);tTr=r(FQt,"from_config()"),FQt.forEach(t),aTr=r(vie,` class
method.`),vie.forEach(t),nTr=i(ql),S$=n(ql,"P",{});var $ro=s(S$);sTr=r($ro,"This class cannot be instantiated directly using "),eCe=n($ro,"CODE",{});var TQt=s(eCe);lTr=r(TQt,"__init__()"),TQt.forEach(t),iTr=r($ro," (throws an error)."),$ro.forEach(t),dTr=i(ql),xt=n(ql,"DIV",{class:!0});var p8=s(xt);T(R$.$$.fragment,p8),cTr=i(p8),oCe=n(p8,"P",{});var MQt=s(oCe);mTr=r(MQt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),MQt.forEach(t),fTr=i(p8),rc=n(p8,"P",{});var Fie=s(rc);gTr=r(Fie,`Note:
Loading a model from its configuration file does `),rCe=n(Fie,"STRONG",{});var EQt=s(rCe);hTr=r(EQt,"not"),EQt.forEach(t),uTr=r(Fie,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(Fie,"A",{href:!0});var CQt=s(eK);pTr=r(CQt,"from_pretrained()"),CQt.forEach(t),_Tr=r(Fie," to load the model weights."),Fie.forEach(t),bTr=i(p8),T(T4.$$.fragment,p8),p8.forEach(t),vTr=i(ql),fo=n(ql,"DIV",{class:!0});var Sa=s(fo);T(P$.$$.fragment,Sa),FTr=i(Sa),tCe=n(Sa,"P",{});var wQt=s(tCe);TTr=r(wQt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wQt.forEach(t),MTr=i(Sa),dn=n(Sa,"P",{});var _8=s(dn);ETr=r(_8,"The model class to instantiate is selected based on the "),aCe=n(_8,"CODE",{});var AQt=s(aCe);CTr=r(AQt,"model_type"),AQt.forEach(t),wTr=r(_8,` property of the config object (either
passed as an argument or loaded from `),nCe=n(_8,"CODE",{});var LQt=s(nCe);ATr=r(LQt,"pretrained_model_name_or_path"),LQt.forEach(t),LTr=r(_8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sCe=n(_8,"CODE",{});var yQt=s(sCe);yTr=r(yQt,"pretrained_model_name_or_path"),yQt.forEach(t),xTr=r(_8,":"),_8.forEach(t),$Tr=i(Sa),be=n(Sa,"UL",{});var Fe=s(be);M4=n(Fe,"LI",{});var Kze=s(M4);lCe=n(Kze,"STRONG",{});var xQt=s(lCe);kTr=r(xQt,"beit"),xQt.forEach(t),STr=r(Kze," \u2014 "),oK=n(Kze,"A",{href:!0});var $Qt=s(oK);RTr=r($Qt,"BeitForImageClassification"),$Qt.forEach(t),PTr=r(Kze," (BEiT model)"),Kze.forEach(t),BTr=i(Fe),E4=n(Fe,"LI",{});var Zze=s(E4);iCe=n(Zze,"STRONG",{});var kQt=s(iCe);ITr=r(kQt,"convnext"),kQt.forEach(t),NTr=r(Zze," \u2014 "),rK=n(Zze,"A",{href:!0});var SQt=s(rK);qTr=r(SQt,"ConvNextForImageClassification"),SQt.forEach(t),jTr=r(Zze," (ConvNeXT model)"),Zze.forEach(t),DTr=i(Fe),C4=n(Fe,"LI",{});var eQe=s(C4);dCe=n(eQe,"STRONG",{});var RQt=s(dCe);GTr=r(RQt,"cvt"),RQt.forEach(t),OTr=r(eQe," \u2014 "),tK=n(eQe,"A",{href:!0});var PQt=s(tK);VTr=r(PQt,"CvtForImageClassification"),PQt.forEach(t),XTr=r(eQe," (CvT model)"),eQe.forEach(t),zTr=i(Fe),w4=n(Fe,"LI",{});var oQe=s(w4);cCe=n(oQe,"STRONG",{});var BQt=s(cCe);QTr=r(BQt,"data2vec-vision"),BQt.forEach(t),WTr=r(oQe," \u2014 "),aK=n(oQe,"A",{href:!0});var IQt=s(aK);UTr=r(IQt,"Data2VecVisionForImageClassification"),IQt.forEach(t),HTr=r(oQe," (Data2VecVision model)"),oQe.forEach(t),JTr=i(Fe),bl=n(Fe,"LI",{});var UB=s(bl);mCe=n(UB,"STRONG",{});var NQt=s(mCe);YTr=r(NQt,"deit"),NQt.forEach(t),KTr=r(UB," \u2014 "),nK=n(UB,"A",{href:!0});var qQt=s(nK);ZTr=r(qQt,"DeiTForImageClassification"),qQt.forEach(t),eMr=r(UB," or "),sK=n(UB,"A",{href:!0});var jQt=s(sK);oMr=r(jQt,"DeiTForImageClassificationWithTeacher"),jQt.forEach(t),rMr=r(UB," (DeiT model)"),UB.forEach(t),tMr=i(Fe),A4=n(Fe,"LI",{});var rQe=s(A4);fCe=n(rQe,"STRONG",{});var DQt=s(fCe);aMr=r(DQt,"imagegpt"),DQt.forEach(t),nMr=r(rQe," \u2014 "),lK=n(rQe,"A",{href:!0});var GQt=s(lK);sMr=r(GQt,"ImageGPTForImageClassification"),GQt.forEach(t),lMr=r(rQe," (ImageGPT model)"),rQe.forEach(t),iMr=i(Fe),vl=n(Fe,"LI",{});var HB=s(vl);gCe=n(HB,"STRONG",{});var OQt=s(gCe);dMr=r(OQt,"levit"),OQt.forEach(t),cMr=r(HB," \u2014 "),iK=n(HB,"A",{href:!0});var VQt=s(iK);mMr=r(VQt,"LevitForImageClassification"),VQt.forEach(t),fMr=r(HB," or "),dK=n(HB,"A",{href:!0});var XQt=s(dK);gMr=r(XQt,"LevitForImageClassificationWithTeacher"),XQt.forEach(t),hMr=r(HB," (LeViT model)"),HB.forEach(t),uMr=i(Fe),L4=n(Fe,"LI",{});var tQe=s(L4);hCe=n(tQe,"STRONG",{});var zQt=s(hCe);pMr=r(zQt,"mobilevit"),zQt.forEach(t),_Mr=r(tQe," \u2014 "),cK=n(tQe,"A",{href:!0});var QQt=s(cK);bMr=r(QQt,"MobileViTForImageClassification"),QQt.forEach(t),vMr=r(tQe," (MobileViT model)"),tQe.forEach(t),FMr=i(Fe),$t=n(Fe,"LI",{});var Mf=s($t);uCe=n(Mf,"STRONG",{});var WQt=s(uCe);TMr=r(WQt,"perceiver"),WQt.forEach(t),MMr=r(Mf," \u2014 "),mK=n(Mf,"A",{href:!0});var UQt=s(mK);EMr=r(UQt,"PerceiverForImageClassificationLearned"),UQt.forEach(t),CMr=r(Mf," or "),fK=n(Mf,"A",{href:!0});var HQt=s(fK);wMr=r(HQt,"PerceiverForImageClassificationFourier"),HQt.forEach(t),AMr=r(Mf," or "),gK=n(Mf,"A",{href:!0});var JQt=s(gK);LMr=r(JQt,"PerceiverForImageClassificationConvProcessing"),JQt.forEach(t),yMr=r(Mf," (Perceiver model)"),Mf.forEach(t),xMr=i(Fe),y4=n(Fe,"LI",{});var aQe=s(y4);pCe=n(aQe,"STRONG",{});var YQt=s(pCe);$Mr=r(YQt,"poolformer"),YQt.forEach(t),kMr=r(aQe," \u2014 "),hK=n(aQe,"A",{href:!0});var KQt=s(hK);SMr=r(KQt,"PoolFormerForImageClassification"),KQt.forEach(t),RMr=r(aQe," (PoolFormer model)"),aQe.forEach(t),PMr=i(Fe),x4=n(Fe,"LI",{});var nQe=s(x4);_Ce=n(nQe,"STRONG",{});var ZQt=s(_Ce);BMr=r(ZQt,"regnet"),ZQt.forEach(t),IMr=r(nQe," \u2014 "),uK=n(nQe,"A",{href:!0});var eWt=s(uK);NMr=r(eWt,"RegNetForImageClassification"),eWt.forEach(t),qMr=r(nQe," (RegNet model)"),nQe.forEach(t),jMr=i(Fe),$4=n(Fe,"LI",{});var sQe=s($4);bCe=n(sQe,"STRONG",{});var oWt=s(bCe);DMr=r(oWt,"resnet"),oWt.forEach(t),GMr=r(sQe," \u2014 "),pK=n(sQe,"A",{href:!0});var rWt=s(pK);OMr=r(rWt,"ResNetForImageClassification"),rWt.forEach(t),VMr=r(sQe," (ResNet model)"),sQe.forEach(t),XMr=i(Fe),k4=n(Fe,"LI",{});var lQe=s(k4);vCe=n(lQe,"STRONG",{});var tWt=s(vCe);zMr=r(tWt,"segformer"),tWt.forEach(t),QMr=r(lQe," \u2014 "),_K=n(lQe,"A",{href:!0});var aWt=s(_K);WMr=r(aWt,"SegformerForImageClassification"),aWt.forEach(t),UMr=r(lQe," (SegFormer model)"),lQe.forEach(t),HMr=i(Fe),S4=n(Fe,"LI",{});var iQe=s(S4);FCe=n(iQe,"STRONG",{});var nWt=s(FCe);JMr=r(nWt,"swin"),nWt.forEach(t),YMr=r(iQe," \u2014 "),bK=n(iQe,"A",{href:!0});var sWt=s(bK);KMr=r(sWt,"SwinForImageClassification"),sWt.forEach(t),ZMr=r(iQe," (Swin Transformer model)"),iQe.forEach(t),eEr=i(Fe),R4=n(Fe,"LI",{});var dQe=s(R4);TCe=n(dQe,"STRONG",{});var lWt=s(TCe);oEr=r(lWt,"swinv2"),lWt.forEach(t),rEr=r(dQe," \u2014 "),vK=n(dQe,"A",{href:!0});var iWt=s(vK);tEr=r(iWt,"Swinv2ForImageClassification"),iWt.forEach(t),aEr=r(dQe," (Swin Transformer V2 model)"),dQe.forEach(t),nEr=i(Fe),P4=n(Fe,"LI",{});var cQe=s(P4);MCe=n(cQe,"STRONG",{});var dWt=s(MCe);sEr=r(dWt,"van"),dWt.forEach(t),lEr=r(cQe," \u2014 "),FK=n(cQe,"A",{href:!0});var cWt=s(FK);iEr=r(cWt,"VanForImageClassification"),cWt.forEach(t),dEr=r(cQe," (VAN model)"),cQe.forEach(t),cEr=i(Fe),B4=n(Fe,"LI",{});var mQe=s(B4);ECe=n(mQe,"STRONG",{});var mWt=s(ECe);mEr=r(mWt,"vit"),mWt.forEach(t),fEr=r(mQe," \u2014 "),TK=n(mQe,"A",{href:!0});var fWt=s(TK);gEr=r(fWt,"ViTForImageClassification"),fWt.forEach(t),hEr=r(mQe," (ViT model)"),mQe.forEach(t),uEr=i(Fe),I4=n(Fe,"LI",{});var fQe=s(I4);CCe=n(fQe,"STRONG",{});var gWt=s(CCe);pEr=r(gWt,"vit_msn"),gWt.forEach(t),_Er=r(fQe," \u2014 "),MK=n(fQe,"A",{href:!0});var hWt=s(MK);bEr=r(hWt,"ViTMSNForImageClassification"),hWt.forEach(t),vEr=r(fQe," (ViTMSN model)"),fQe.forEach(t),Fe.forEach(t),FEr=i(Sa),N4=n(Sa,"P",{});var gQe=s(N4);TEr=r(gQe,"The model is set in evaluation mode by default using "),wCe=n(gQe,"CODE",{});var uWt=s(wCe);MEr=r(uWt,"model.eval()"),uWt.forEach(t),EEr=r(gQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ACe=n(gQe,"CODE",{});var pWt=s(ACe);CEr=r(pWt,"model.train()"),pWt.forEach(t),gQe.forEach(t),wEr=i(Sa),T(q4.$$.fragment,Sa),Sa.forEach(t),ql.forEach(t),_eo=i(m),tc=n(m,"H2",{class:!0});var kro=s(tc);j4=n(kro,"A",{id:!0,class:!0,href:!0});var _Wt=s(j4);LCe=n(_Wt,"SPAN",{});var bWt=s(LCe);T(B$.$$.fragment,bWt),bWt.forEach(t),_Wt.forEach(t),AEr=i(kro),yCe=n(kro,"SPAN",{});var vWt=s(yCe);LEr=r(vWt,"AutoModelForVideoClassification"),vWt.forEach(t),kro.forEach(t),beo=i(m),Wo=n(m,"DIV",{class:!0});var jl=s(Wo);T(I$.$$.fragment,jl),yEr=i(jl),ac=n(jl,"P",{});var Tie=s(ac);xEr=r(Tie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),EK=n(Tie,"A",{href:!0});var FWt=s(EK);$Er=r(FWt,"from_pretrained()"),FWt.forEach(t),kEr=r(Tie," class method or the "),CK=n(Tie,"A",{href:!0});var TWt=s(CK);SEr=r(TWt,"from_config()"),TWt.forEach(t),REr=r(Tie,` class
method.`),Tie.forEach(t),PEr=i(jl),N$=n(jl,"P",{});var Sro=s(N$);BEr=r(Sro,"This class cannot be instantiated directly using "),xCe=n(Sro,"CODE",{});var MWt=s(xCe);IEr=r(MWt,"__init__()"),MWt.forEach(t),NEr=r(Sro," (throws an error)."),Sro.forEach(t),qEr=i(jl),kt=n(jl,"DIV",{class:!0});var b8=s(kt);T(q$.$$.fragment,b8),jEr=i(b8),$Ce=n(b8,"P",{});var EWt=s($Ce);DEr=r(EWt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),EWt.forEach(t),GEr=i(b8),nc=n(b8,"P",{});var Mie=s(nc);OEr=r(Mie,`Note:
Loading a model from its configuration file does `),kCe=n(Mie,"STRONG",{});var CWt=s(kCe);VEr=r(CWt,"not"),CWt.forEach(t),XEr=r(Mie,` load the model weights. It only affects the
model\u2019s configuration. Use `),wK=n(Mie,"A",{href:!0});var wWt=s(wK);zEr=r(wWt,"from_pretrained()"),wWt.forEach(t),QEr=r(Mie," to load the model weights."),Mie.forEach(t),WEr=i(b8),T(D4.$$.fragment,b8),b8.forEach(t),UEr=i(jl),go=n(jl,"DIV",{class:!0});var Ra=s(go);T(j$.$$.fragment,Ra),HEr=i(Ra),SCe=n(Ra,"P",{});var AWt=s(SCe);JEr=r(AWt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),AWt.forEach(t),YEr=i(Ra),cn=n(Ra,"P",{});var v8=s(cn);KEr=r(v8,"The model class to instantiate is selected based on the "),RCe=n(v8,"CODE",{});var LWt=s(RCe);ZEr=r(LWt,"model_type"),LWt.forEach(t),e4r=r(v8,` property of the config object (either
passed as an argument or loaded from `),PCe=n(v8,"CODE",{});var yWt=s(PCe);o4r=r(yWt,"pretrained_model_name_or_path"),yWt.forEach(t),r4r=r(v8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BCe=n(v8,"CODE",{});var xWt=s(BCe);t4r=r(xWt,"pretrained_model_name_or_path"),xWt.forEach(t),a4r=r(v8,":"),v8.forEach(t),n4r=i(Ra),ICe=n(Ra,"UL",{});var $Wt=s(ICe);G4=n($Wt,"LI",{});var hQe=s(G4);NCe=n(hQe,"STRONG",{});var kWt=s(NCe);s4r=r(kWt,"videomae"),kWt.forEach(t),l4r=r(hQe," \u2014 "),AK=n(hQe,"A",{href:!0});var SWt=s(AK);i4r=r(SWt,"VideoMAEForVideoClassification"),SWt.forEach(t),d4r=r(hQe," (VideoMAE model)"),hQe.forEach(t),$Wt.forEach(t),c4r=i(Ra),O4=n(Ra,"P",{});var uQe=s(O4);m4r=r(uQe,"The model is set in evaluation mode by default using "),qCe=n(uQe,"CODE",{});var RWt=s(qCe);f4r=r(RWt,"model.eval()"),RWt.forEach(t),g4r=r(uQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jCe=n(uQe,"CODE",{});var PWt=s(jCe);h4r=r(PWt,"model.train()"),PWt.forEach(t),uQe.forEach(t),u4r=i(Ra),T(V4.$$.fragment,Ra),Ra.forEach(t),jl.forEach(t),veo=i(m),sc=n(m,"H2",{class:!0});var Rro=s(sc);X4=n(Rro,"A",{id:!0,class:!0,href:!0});var BWt=s(X4);DCe=n(BWt,"SPAN",{});var IWt=s(DCe);T(D$.$$.fragment,IWt),IWt.forEach(t),BWt.forEach(t),p4r=i(Rro),GCe=n(Rro,"SPAN",{});var NWt=s(GCe);_4r=r(NWt,"AutoModelForVision2Seq"),NWt.forEach(t),Rro.forEach(t),Feo=i(m),Uo=n(m,"DIV",{class:!0});var Dl=s(Uo);T(G$.$$.fragment,Dl),b4r=i(Dl),lc=n(Dl,"P",{});var Eie=s(lc);v4r=r(Eie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LK=n(Eie,"A",{href:!0});var qWt=s(LK);F4r=r(qWt,"from_pretrained()"),qWt.forEach(t),T4r=r(Eie," class method or the "),yK=n(Eie,"A",{href:!0});var jWt=s(yK);M4r=r(jWt,"from_config()"),jWt.forEach(t),E4r=r(Eie,` class
method.`),Eie.forEach(t),C4r=i(Dl),O$=n(Dl,"P",{});var Pro=s(O$);w4r=r(Pro,"This class cannot be instantiated directly using "),OCe=n(Pro,"CODE",{});var DWt=s(OCe);A4r=r(DWt,"__init__()"),DWt.forEach(t),L4r=r(Pro," (throws an error)."),Pro.forEach(t),y4r=i(Dl),St=n(Dl,"DIV",{class:!0});var F8=s(St);T(V$.$$.fragment,F8),x4r=i(F8),VCe=n(F8,"P",{});var GWt=s(VCe);$4r=r(GWt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GWt.forEach(t),k4r=i(F8),ic=n(F8,"P",{});var Cie=s(ic);S4r=r(Cie,`Note:
Loading a model from its configuration file does `),XCe=n(Cie,"STRONG",{});var OWt=s(XCe);R4r=r(OWt,"not"),OWt.forEach(t),P4r=r(Cie,` load the model weights. It only affects the
model\u2019s configuration. Use `),xK=n(Cie,"A",{href:!0});var VWt=s(xK);B4r=r(VWt,"from_pretrained()"),VWt.forEach(t),I4r=r(Cie," to load the model weights."),Cie.forEach(t),N4r=i(F8),T(z4.$$.fragment,F8),F8.forEach(t),q4r=i(Dl),ho=n(Dl,"DIV",{class:!0});var Pa=s(ho);T(X$.$$.fragment,Pa),j4r=i(Pa),zCe=n(Pa,"P",{});var XWt=s(zCe);D4r=r(XWt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XWt.forEach(t),G4r=i(Pa),mn=n(Pa,"P",{});var T8=s(mn);O4r=r(T8,"The model class to instantiate is selected based on the "),QCe=n(T8,"CODE",{});var zWt=s(QCe);V4r=r(zWt,"model_type"),zWt.forEach(t),X4r=r(T8,` property of the config object (either
passed as an argument or loaded from `),WCe=n(T8,"CODE",{});var QWt=s(WCe);z4r=r(QWt,"pretrained_model_name_or_path"),QWt.forEach(t),Q4r=r(T8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UCe=n(T8,"CODE",{});var WWt=s(UCe);W4r=r(WWt,"pretrained_model_name_or_path"),WWt.forEach(t),U4r=r(T8,":"),T8.forEach(t),H4r=i(Pa),HCe=n(Pa,"UL",{});var UWt=s(HCe);Q4=n(UWt,"LI",{});var pQe=s(Q4);JCe=n(pQe,"STRONG",{});var HWt=s(JCe);J4r=r(HWt,"vision-encoder-decoder"),HWt.forEach(t),Y4r=r(pQe," \u2014 "),$K=n(pQe,"A",{href:!0});var JWt=s($K);K4r=r(JWt,"VisionEncoderDecoderModel"),JWt.forEach(t),Z4r=r(pQe," (Vision Encoder decoder model)"),pQe.forEach(t),UWt.forEach(t),eCr=i(Pa),W4=n(Pa,"P",{});var _Qe=s(W4);oCr=r(_Qe,"The model is set in evaluation mode by default using "),YCe=n(_Qe,"CODE",{});var YWt=s(YCe);rCr=r(YWt,"model.eval()"),YWt.forEach(t),tCr=r(_Qe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KCe=n(_Qe,"CODE",{});var KWt=s(KCe);aCr=r(KWt,"model.train()"),KWt.forEach(t),_Qe.forEach(t),nCr=i(Pa),T(U4.$$.fragment,Pa),Pa.forEach(t),Dl.forEach(t),Teo=i(m),dc=n(m,"H2",{class:!0});var Bro=s(dc);H4=n(Bro,"A",{id:!0,class:!0,href:!0});var ZWt=s(H4);ZCe=n(ZWt,"SPAN",{});var eUt=s(ZCe);T(z$.$$.fragment,eUt),eUt.forEach(t),ZWt.forEach(t),sCr=i(Bro),e3e=n(Bro,"SPAN",{});var oUt=s(e3e);lCr=r(oUt,"AutoModelForVisualQuestionAnswering"),oUt.forEach(t),Bro.forEach(t),Meo=i(m),Ho=n(m,"DIV",{class:!0});var Gl=s(Ho);T(Q$.$$.fragment,Gl),iCr=i(Gl),cc=n(Gl,"P",{});var wie=s(cc);dCr=r(wie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),kK=n(wie,"A",{href:!0});var rUt=s(kK);cCr=r(rUt,"from_pretrained()"),rUt.forEach(t),mCr=r(wie," class method or the "),SK=n(wie,"A",{href:!0});var tUt=s(SK);fCr=r(tUt,"from_config()"),tUt.forEach(t),gCr=r(wie,` class
method.`),wie.forEach(t),hCr=i(Gl),W$=n(Gl,"P",{});var Iro=s(W$);uCr=r(Iro,"This class cannot be instantiated directly using "),o3e=n(Iro,"CODE",{});var aUt=s(o3e);pCr=r(aUt,"__init__()"),aUt.forEach(t),_Cr=r(Iro," (throws an error)."),Iro.forEach(t),bCr=i(Gl),Rt=n(Gl,"DIV",{class:!0});var M8=s(Rt);T(U$.$$.fragment,M8),vCr=i(M8),r3e=n(M8,"P",{});var nUt=s(r3e);FCr=r(nUt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),nUt.forEach(t),TCr=i(M8),mc=n(M8,"P",{});var Aie=s(mc);MCr=r(Aie,`Note:
Loading a model from its configuration file does `),t3e=n(Aie,"STRONG",{});var sUt=s(t3e);ECr=r(sUt,"not"),sUt.forEach(t),CCr=r(Aie,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(Aie,"A",{href:!0});var lUt=s(RK);wCr=r(lUt,"from_pretrained()"),lUt.forEach(t),ACr=r(Aie," to load the model weights."),Aie.forEach(t),LCr=i(M8),T(J4.$$.fragment,M8),M8.forEach(t),yCr=i(Gl),uo=n(Gl,"DIV",{class:!0});var Ba=s(uo);T(H$.$$.fragment,Ba),xCr=i(Ba),a3e=n(Ba,"P",{});var iUt=s(a3e);$Cr=r(iUt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),iUt.forEach(t),kCr=i(Ba),fn=n(Ba,"P",{});var E8=s(fn);SCr=r(E8,"The model class to instantiate is selected based on the "),n3e=n(E8,"CODE",{});var dUt=s(n3e);RCr=r(dUt,"model_type"),dUt.forEach(t),PCr=r(E8,` property of the config object (either
passed as an argument or loaded from `),s3e=n(E8,"CODE",{});var cUt=s(s3e);BCr=r(cUt,"pretrained_model_name_or_path"),cUt.forEach(t),ICr=r(E8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l3e=n(E8,"CODE",{});var mUt=s(l3e);NCr=r(mUt,"pretrained_model_name_or_path"),mUt.forEach(t),qCr=r(E8,":"),E8.forEach(t),jCr=i(Ba),i3e=n(Ba,"UL",{});var fUt=s(i3e);Y4=n(fUt,"LI",{});var bQe=s(Y4);d3e=n(bQe,"STRONG",{});var gUt=s(d3e);DCr=r(gUt,"vilt"),gUt.forEach(t),GCr=r(bQe," \u2014 "),PK=n(bQe,"A",{href:!0});var hUt=s(PK);OCr=r(hUt,"ViltForQuestionAnswering"),hUt.forEach(t),VCr=r(bQe," (ViLT model)"),bQe.forEach(t),fUt.forEach(t),XCr=i(Ba),K4=n(Ba,"P",{});var vQe=s(K4);zCr=r(vQe,"The model is set in evaluation mode by default using "),c3e=n(vQe,"CODE",{});var uUt=s(c3e);QCr=r(uUt,"model.eval()"),uUt.forEach(t),WCr=r(vQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m3e=n(vQe,"CODE",{});var pUt=s(m3e);UCr=r(pUt,"model.train()"),pUt.forEach(t),vQe.forEach(t),HCr=i(Ba),T(Z4.$$.fragment,Ba),Ba.forEach(t),Gl.forEach(t),Eeo=i(m),fc=n(m,"H2",{class:!0});var Nro=s(fc);eC=n(Nro,"A",{id:!0,class:!0,href:!0});var _Ut=s(eC);f3e=n(_Ut,"SPAN",{});var bUt=s(f3e);T(J$.$$.fragment,bUt),bUt.forEach(t),_Ut.forEach(t),JCr=i(Nro),g3e=n(Nro,"SPAN",{});var vUt=s(g3e);YCr=r(vUt,"AutoModelForAudioClassification"),vUt.forEach(t),Nro.forEach(t),Ceo=i(m),Jo=n(m,"DIV",{class:!0});var Ol=s(Jo);T(Y$.$$.fragment,Ol),KCr=i(Ol),gc=n(Ol,"P",{});var Lie=s(gc);ZCr=r(Lie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),BK=n(Lie,"A",{href:!0});var FUt=s(BK);e3r=r(FUt,"from_pretrained()"),FUt.forEach(t),o3r=r(Lie," class method or the "),IK=n(Lie,"A",{href:!0});var TUt=s(IK);r3r=r(TUt,"from_config()"),TUt.forEach(t),t3r=r(Lie,` class
method.`),Lie.forEach(t),a3r=i(Ol),K$=n(Ol,"P",{});var qro=s(K$);n3r=r(qro,"This class cannot be instantiated directly using "),h3e=n(qro,"CODE",{});var MUt=s(h3e);s3r=r(MUt,"__init__()"),MUt.forEach(t),l3r=r(qro," (throws an error)."),qro.forEach(t),i3r=i(Ol),Pt=n(Ol,"DIV",{class:!0});var C8=s(Pt);T(Z$.$$.fragment,C8),d3r=i(C8),u3e=n(C8,"P",{});var EUt=s(u3e);c3r=r(EUt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),EUt.forEach(t),m3r=i(C8),hc=n(C8,"P",{});var yie=s(hc);f3r=r(yie,`Note:
Loading a model from its configuration file does `),p3e=n(yie,"STRONG",{});var CUt=s(p3e);g3r=r(CUt,"not"),CUt.forEach(t),h3r=r(yie,` load the model weights. It only affects the
model\u2019s configuration. Use `),NK=n(yie,"A",{href:!0});var wUt=s(NK);u3r=r(wUt,"from_pretrained()"),wUt.forEach(t),p3r=r(yie," to load the model weights."),yie.forEach(t),_3r=i(C8),T(oC.$$.fragment,C8),C8.forEach(t),b3r=i(Ol),po=n(Ol,"DIV",{class:!0});var Ia=s(po);T(ek.$$.fragment,Ia),v3r=i(Ia),_3e=n(Ia,"P",{});var AUt=s(_3e);F3r=r(AUt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),AUt.forEach(t),T3r=i(Ia),gn=n(Ia,"P",{});var w8=s(gn);M3r=r(w8,"The model class to instantiate is selected based on the "),b3e=n(w8,"CODE",{});var LUt=s(b3e);E3r=r(LUt,"model_type"),LUt.forEach(t),C3r=r(w8,` property of the config object (either
passed as an argument or loaded from `),v3e=n(w8,"CODE",{});var yUt=s(v3e);w3r=r(yUt,"pretrained_model_name_or_path"),yUt.forEach(t),A3r=r(w8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F3e=n(w8,"CODE",{});var xUt=s(F3e);L3r=r(xUt,"pretrained_model_name_or_path"),xUt.forEach(t),y3r=r(w8,":"),w8.forEach(t),x3r=i(Ia),Pe=n(Ia,"UL",{});var Qe=s(Pe);rC=n(Qe,"LI",{});var FQe=s(rC);T3e=n(FQe,"STRONG",{});var $Ut=s(T3e);$3r=r($Ut,"data2vec-audio"),$Ut.forEach(t),k3r=r(FQe," \u2014 "),qK=n(FQe,"A",{href:!0});var kUt=s(qK);S3r=r(kUt,"Data2VecAudioForSequenceClassification"),kUt.forEach(t),R3r=r(FQe," (Data2VecAudio model)"),FQe.forEach(t),P3r=i(Qe),tC=n(Qe,"LI",{});var TQe=s(tC);M3e=n(TQe,"STRONG",{});var SUt=s(M3e);B3r=r(SUt,"hubert"),SUt.forEach(t),I3r=r(TQe," \u2014 "),jK=n(TQe,"A",{href:!0});var RUt=s(jK);N3r=r(RUt,"HubertForSequenceClassification"),RUt.forEach(t),q3r=r(TQe," (Hubert model)"),TQe.forEach(t),j3r=i(Qe),aC=n(Qe,"LI",{});var MQe=s(aC);E3e=n(MQe,"STRONG",{});var PUt=s(E3e);D3r=r(PUt,"sew"),PUt.forEach(t),G3r=r(MQe," \u2014 "),DK=n(MQe,"A",{href:!0});var BUt=s(DK);O3r=r(BUt,"SEWForSequenceClassification"),BUt.forEach(t),V3r=r(MQe," (SEW model)"),MQe.forEach(t),X3r=i(Qe),nC=n(Qe,"LI",{});var EQe=s(nC);C3e=n(EQe,"STRONG",{});var IUt=s(C3e);z3r=r(IUt,"sew-d"),IUt.forEach(t),Q3r=r(EQe," \u2014 "),GK=n(EQe,"A",{href:!0});var NUt=s(GK);W3r=r(NUt,"SEWDForSequenceClassification"),NUt.forEach(t),U3r=r(EQe," (SEW-D model)"),EQe.forEach(t),H3r=i(Qe),sC=n(Qe,"LI",{});var CQe=s(sC);w3e=n(CQe,"STRONG",{});var qUt=s(w3e);J3r=r(qUt,"unispeech"),qUt.forEach(t),Y3r=r(CQe," \u2014 "),OK=n(CQe,"A",{href:!0});var jUt=s(OK);K3r=r(jUt,"UniSpeechForSequenceClassification"),jUt.forEach(t),Z3r=r(CQe," (UniSpeech model)"),CQe.forEach(t),e5r=i(Qe),lC=n(Qe,"LI",{});var wQe=s(lC);A3e=n(wQe,"STRONG",{});var DUt=s(A3e);o5r=r(DUt,"unispeech-sat"),DUt.forEach(t),r5r=r(wQe," \u2014 "),VK=n(wQe,"A",{href:!0});var GUt=s(VK);t5r=r(GUt,"UniSpeechSatForSequenceClassification"),GUt.forEach(t),a5r=r(wQe," (UniSpeechSat model)"),wQe.forEach(t),n5r=i(Qe),iC=n(Qe,"LI",{});var AQe=s(iC);L3e=n(AQe,"STRONG",{});var OUt=s(L3e);s5r=r(OUt,"wav2vec2"),OUt.forEach(t),l5r=r(AQe," \u2014 "),XK=n(AQe,"A",{href:!0});var VUt=s(XK);i5r=r(VUt,"Wav2Vec2ForSequenceClassification"),VUt.forEach(t),d5r=r(AQe," (Wav2Vec2 model)"),AQe.forEach(t),c5r=i(Qe),dC=n(Qe,"LI",{});var LQe=s(dC);y3e=n(LQe,"STRONG",{});var XUt=s(y3e);m5r=r(XUt,"wav2vec2-conformer"),XUt.forEach(t),f5r=r(LQe," \u2014 "),zK=n(LQe,"A",{href:!0});var zUt=s(zK);g5r=r(zUt,"Wav2Vec2ConformerForSequenceClassification"),zUt.forEach(t),h5r=r(LQe," (Wav2Vec2-Conformer model)"),LQe.forEach(t),u5r=i(Qe),cC=n(Qe,"LI",{});var yQe=s(cC);x3e=n(yQe,"STRONG",{});var QUt=s(x3e);p5r=r(QUt,"wavlm"),QUt.forEach(t),_5r=r(yQe," \u2014 "),QK=n(yQe,"A",{href:!0});var WUt=s(QK);b5r=r(WUt,"WavLMForSequenceClassification"),WUt.forEach(t),v5r=r(yQe," (WavLM model)"),yQe.forEach(t),Qe.forEach(t),F5r=i(Ia),mC=n(Ia,"P",{});var xQe=s(mC);T5r=r(xQe,"The model is set in evaluation mode by default using "),$3e=n(xQe,"CODE",{});var UUt=s($3e);M5r=r(UUt,"model.eval()"),UUt.forEach(t),E5r=r(xQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),k3e=n(xQe,"CODE",{});var HUt=s(k3e);C5r=r(HUt,"model.train()"),HUt.forEach(t),xQe.forEach(t),w5r=i(Ia),T(fC.$$.fragment,Ia),Ia.forEach(t),Ol.forEach(t),weo=i(m),uc=n(m,"H2",{class:!0});var jro=s(uc);gC=n(jro,"A",{id:!0,class:!0,href:!0});var JUt=s(gC);S3e=n(JUt,"SPAN",{});var YUt=s(S3e);T(ok.$$.fragment,YUt),YUt.forEach(t),JUt.forEach(t),A5r=i(jro),R3e=n(jro,"SPAN",{});var KUt=s(R3e);L5r=r(KUt,"AutoModelForAudioFrameClassification"),KUt.forEach(t),jro.forEach(t),Aeo=i(m),Yo=n(m,"DIV",{class:!0});var Vl=s(Yo);T(rk.$$.fragment,Vl),y5r=i(Vl),pc=n(Vl,"P",{});var xie=s(pc);x5r=r(xie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),WK=n(xie,"A",{href:!0});var ZUt=s(WK);$5r=r(ZUt,"from_pretrained()"),ZUt.forEach(t),k5r=r(xie," class method or the "),UK=n(xie,"A",{href:!0});var eHt=s(UK);S5r=r(eHt,"from_config()"),eHt.forEach(t),R5r=r(xie,` class
method.`),xie.forEach(t),P5r=i(Vl),tk=n(Vl,"P",{});var Dro=s(tk);B5r=r(Dro,"This class cannot be instantiated directly using "),P3e=n(Dro,"CODE",{});var oHt=s(P3e);I5r=r(oHt,"__init__()"),oHt.forEach(t),N5r=r(Dro," (throws an error)."),Dro.forEach(t),q5r=i(Vl),Bt=n(Vl,"DIV",{class:!0});var A8=s(Bt);T(ak.$$.fragment,A8),j5r=i(A8),B3e=n(A8,"P",{});var rHt=s(B3e);D5r=r(rHt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),rHt.forEach(t),G5r=i(A8),_c=n(A8,"P",{});var $ie=s(_c);O5r=r($ie,`Note:
Loading a model from its configuration file does `),I3e=n($ie,"STRONG",{});var tHt=s(I3e);V5r=r(tHt,"not"),tHt.forEach(t),X5r=r($ie,` load the model weights. It only affects the
model\u2019s configuration. Use `),HK=n($ie,"A",{href:!0});var aHt=s(HK);z5r=r(aHt,"from_pretrained()"),aHt.forEach(t),Q5r=r($ie," to load the model weights."),$ie.forEach(t),W5r=i(A8),T(hC.$$.fragment,A8),A8.forEach(t),U5r=i(Vl),_o=n(Vl,"DIV",{class:!0});var Na=s(_o);T(nk.$$.fragment,Na),H5r=i(Na),N3e=n(Na,"P",{});var nHt=s(N3e);J5r=r(nHt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),nHt.forEach(t),Y5r=i(Na),hn=n(Na,"P",{});var L8=s(hn);K5r=r(L8,"The model class to instantiate is selected based on the "),q3e=n(L8,"CODE",{});var sHt=s(q3e);Z5r=r(sHt,"model_type"),sHt.forEach(t),e0r=r(L8,` property of the config object (either
passed as an argument or loaded from `),j3e=n(L8,"CODE",{});var lHt=s(j3e);o0r=r(lHt,"pretrained_model_name_or_path"),lHt.forEach(t),r0r=r(L8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D3e=n(L8,"CODE",{});var iHt=s(D3e);t0r=r(iHt,"pretrained_model_name_or_path"),iHt.forEach(t),a0r=r(L8,":"),L8.forEach(t),n0r=i(Na),mt=n(Na,"UL",{});var Xl=s(mt);uC=n(Xl,"LI",{});var $Qe=s(uC);G3e=n($Qe,"STRONG",{});var dHt=s(G3e);s0r=r(dHt,"data2vec-audio"),dHt.forEach(t),l0r=r($Qe," \u2014 "),JK=n($Qe,"A",{href:!0});var cHt=s(JK);i0r=r(cHt,"Data2VecAudioForAudioFrameClassification"),cHt.forEach(t),d0r=r($Qe," (Data2VecAudio model)"),$Qe.forEach(t),c0r=i(Xl),pC=n(Xl,"LI",{});var kQe=s(pC);O3e=n(kQe,"STRONG",{});var mHt=s(O3e);m0r=r(mHt,"unispeech-sat"),mHt.forEach(t),f0r=r(kQe," \u2014 "),YK=n(kQe,"A",{href:!0});var fHt=s(YK);g0r=r(fHt,"UniSpeechSatForAudioFrameClassification"),fHt.forEach(t),h0r=r(kQe," (UniSpeechSat model)"),kQe.forEach(t),u0r=i(Xl),_C=n(Xl,"LI",{});var SQe=s(_C);V3e=n(SQe,"STRONG",{});var gHt=s(V3e);p0r=r(gHt,"wav2vec2"),gHt.forEach(t),_0r=r(SQe," \u2014 "),KK=n(SQe,"A",{href:!0});var hHt=s(KK);b0r=r(hHt,"Wav2Vec2ForAudioFrameClassification"),hHt.forEach(t),v0r=r(SQe," (Wav2Vec2 model)"),SQe.forEach(t),F0r=i(Xl),bC=n(Xl,"LI",{});var RQe=s(bC);X3e=n(RQe,"STRONG",{});var uHt=s(X3e);T0r=r(uHt,"wav2vec2-conformer"),uHt.forEach(t),M0r=r(RQe," \u2014 "),ZK=n(RQe,"A",{href:!0});var pHt=s(ZK);E0r=r(pHt,"Wav2Vec2ConformerForAudioFrameClassification"),pHt.forEach(t),C0r=r(RQe," (Wav2Vec2-Conformer model)"),RQe.forEach(t),w0r=i(Xl),vC=n(Xl,"LI",{});var PQe=s(vC);z3e=n(PQe,"STRONG",{});var _Ht=s(z3e);A0r=r(_Ht,"wavlm"),_Ht.forEach(t),L0r=r(PQe," \u2014 "),eZ=n(PQe,"A",{href:!0});var bHt=s(eZ);y0r=r(bHt,"WavLMForAudioFrameClassification"),bHt.forEach(t),x0r=r(PQe," (WavLM model)"),PQe.forEach(t),Xl.forEach(t),$0r=i(Na),FC=n(Na,"P",{});var BQe=s(FC);k0r=r(BQe,"The model is set in evaluation mode by default using "),Q3e=n(BQe,"CODE",{});var vHt=s(Q3e);S0r=r(vHt,"model.eval()"),vHt.forEach(t),R0r=r(BQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W3e=n(BQe,"CODE",{});var FHt=s(W3e);P0r=r(FHt,"model.train()"),FHt.forEach(t),BQe.forEach(t),B0r=i(Na),T(TC.$$.fragment,Na),Na.forEach(t),Vl.forEach(t),Leo=i(m),bc=n(m,"H2",{class:!0});var Gro=s(bc);MC=n(Gro,"A",{id:!0,class:!0,href:!0});var THt=s(MC);U3e=n(THt,"SPAN",{});var MHt=s(U3e);T(sk.$$.fragment,MHt),MHt.forEach(t),THt.forEach(t),I0r=i(Gro),H3e=n(Gro,"SPAN",{});var EHt=s(H3e);N0r=r(EHt,"AutoModelForCTC"),EHt.forEach(t),Gro.forEach(t),yeo=i(m),Ko=n(m,"DIV",{class:!0});var zl=s(Ko);T(lk.$$.fragment,zl),q0r=i(zl),vc=n(zl,"P",{});var kie=s(vc);j0r=r(kie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),oZ=n(kie,"A",{href:!0});var CHt=s(oZ);D0r=r(CHt,"from_pretrained()"),CHt.forEach(t),G0r=r(kie," class method or the "),rZ=n(kie,"A",{href:!0});var wHt=s(rZ);O0r=r(wHt,"from_config()"),wHt.forEach(t),V0r=r(kie,` class
method.`),kie.forEach(t),X0r=i(zl),ik=n(zl,"P",{});var Oro=s(ik);z0r=r(Oro,"This class cannot be instantiated directly using "),J3e=n(Oro,"CODE",{});var AHt=s(J3e);Q0r=r(AHt,"__init__()"),AHt.forEach(t),W0r=r(Oro," (throws an error)."),Oro.forEach(t),U0r=i(zl),It=n(zl,"DIV",{class:!0});var y8=s(It);T(dk.$$.fragment,y8),H0r=i(y8),Y3e=n(y8,"P",{});var LHt=s(Y3e);J0r=r(LHt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),LHt.forEach(t),Y0r=i(y8),Fc=n(y8,"P",{});var Sie=s(Fc);K0r=r(Sie,`Note:
Loading a model from its configuration file does `),K3e=n(Sie,"STRONG",{});var yHt=s(K3e);Z0r=r(yHt,"not"),yHt.forEach(t),ewr=r(Sie,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(Sie,"A",{href:!0});var xHt=s(tZ);owr=r(xHt,"from_pretrained()"),xHt.forEach(t),rwr=r(Sie," to load the model weights."),Sie.forEach(t),twr=i(y8),T(EC.$$.fragment,y8),y8.forEach(t),awr=i(zl),bo=n(zl,"DIV",{class:!0});var qa=s(bo);T(ck.$$.fragment,qa),nwr=i(qa),Z3e=n(qa,"P",{});var $Ht=s(Z3e);swr=r($Ht,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$Ht.forEach(t),lwr=i(qa),un=n(qa,"P",{});var x8=s(un);iwr=r(x8,"The model class to instantiate is selected based on the "),e5e=n(x8,"CODE",{});var kHt=s(e5e);dwr=r(kHt,"model_type"),kHt.forEach(t),cwr=r(x8,` property of the config object (either
passed as an argument or loaded from `),o5e=n(x8,"CODE",{});var SHt=s(o5e);mwr=r(SHt,"pretrained_model_name_or_path"),SHt.forEach(t),fwr=r(x8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=n(x8,"CODE",{});var RHt=s(r5e);gwr=r(RHt,"pretrained_model_name_or_path"),RHt.forEach(t),hwr=r(x8,":"),x8.forEach(t),uwr=i(qa),Le=n(qa,"UL",{});var Ie=s(Le);CC=n(Ie,"LI",{});var IQe=s(CC);t5e=n(IQe,"STRONG",{});var PHt=s(t5e);pwr=r(PHt,"data2vec-audio"),PHt.forEach(t),_wr=r(IQe," \u2014 "),aZ=n(IQe,"A",{href:!0});var BHt=s(aZ);bwr=r(BHt,"Data2VecAudioForCTC"),BHt.forEach(t),vwr=r(IQe," (Data2VecAudio model)"),IQe.forEach(t),Fwr=i(Ie),wC=n(Ie,"LI",{});var NQe=s(wC);a5e=n(NQe,"STRONG",{});var IHt=s(a5e);Twr=r(IHt,"hubert"),IHt.forEach(t),Mwr=r(NQe," \u2014 "),nZ=n(NQe,"A",{href:!0});var NHt=s(nZ);Ewr=r(NHt,"HubertForCTC"),NHt.forEach(t),Cwr=r(NQe," (Hubert model)"),NQe.forEach(t),wwr=i(Ie),AC=n(Ie,"LI",{});var qQe=s(AC);n5e=n(qQe,"STRONG",{});var qHt=s(n5e);Awr=r(qHt,"mctct"),qHt.forEach(t),Lwr=r(qQe," \u2014 "),sZ=n(qQe,"A",{href:!0});var jHt=s(sZ);ywr=r(jHt,"MCTCTForCTC"),jHt.forEach(t),xwr=r(qQe," (M-CTC-T model)"),qQe.forEach(t),$wr=i(Ie),LC=n(Ie,"LI",{});var jQe=s(LC);s5e=n(jQe,"STRONG",{});var DHt=s(s5e);kwr=r(DHt,"sew"),DHt.forEach(t),Swr=r(jQe," \u2014 "),lZ=n(jQe,"A",{href:!0});var GHt=s(lZ);Rwr=r(GHt,"SEWForCTC"),GHt.forEach(t),Pwr=r(jQe," (SEW model)"),jQe.forEach(t),Bwr=i(Ie),yC=n(Ie,"LI",{});var DQe=s(yC);l5e=n(DQe,"STRONG",{});var OHt=s(l5e);Iwr=r(OHt,"sew-d"),OHt.forEach(t),Nwr=r(DQe," \u2014 "),iZ=n(DQe,"A",{href:!0});var VHt=s(iZ);qwr=r(VHt,"SEWDForCTC"),VHt.forEach(t),jwr=r(DQe," (SEW-D model)"),DQe.forEach(t),Dwr=i(Ie),xC=n(Ie,"LI",{});var GQe=s(xC);i5e=n(GQe,"STRONG",{});var XHt=s(i5e);Gwr=r(XHt,"unispeech"),XHt.forEach(t),Owr=r(GQe," \u2014 "),dZ=n(GQe,"A",{href:!0});var zHt=s(dZ);Vwr=r(zHt,"UniSpeechForCTC"),zHt.forEach(t),Xwr=r(GQe," (UniSpeech model)"),GQe.forEach(t),zwr=i(Ie),$C=n(Ie,"LI",{});var OQe=s($C);d5e=n(OQe,"STRONG",{});var QHt=s(d5e);Qwr=r(QHt,"unispeech-sat"),QHt.forEach(t),Wwr=r(OQe," \u2014 "),cZ=n(OQe,"A",{href:!0});var WHt=s(cZ);Uwr=r(WHt,"UniSpeechSatForCTC"),WHt.forEach(t),Hwr=r(OQe," (UniSpeechSat model)"),OQe.forEach(t),Jwr=i(Ie),kC=n(Ie,"LI",{});var VQe=s(kC);c5e=n(VQe,"STRONG",{});var UHt=s(c5e);Ywr=r(UHt,"wav2vec2"),UHt.forEach(t),Kwr=r(VQe," \u2014 "),mZ=n(VQe,"A",{href:!0});var HHt=s(mZ);Zwr=r(HHt,"Wav2Vec2ForCTC"),HHt.forEach(t),eAr=r(VQe," (Wav2Vec2 model)"),VQe.forEach(t),oAr=i(Ie),SC=n(Ie,"LI",{});var XQe=s(SC);m5e=n(XQe,"STRONG",{});var JHt=s(m5e);rAr=r(JHt,"wav2vec2-conformer"),JHt.forEach(t),tAr=r(XQe," \u2014 "),fZ=n(XQe,"A",{href:!0});var YHt=s(fZ);aAr=r(YHt,"Wav2Vec2ConformerForCTC"),YHt.forEach(t),nAr=r(XQe," (Wav2Vec2-Conformer model)"),XQe.forEach(t),sAr=i(Ie),RC=n(Ie,"LI",{});var zQe=s(RC);f5e=n(zQe,"STRONG",{});var KHt=s(f5e);lAr=r(KHt,"wavlm"),KHt.forEach(t),iAr=r(zQe," \u2014 "),gZ=n(zQe,"A",{href:!0});var ZHt=s(gZ);dAr=r(ZHt,"WavLMForCTC"),ZHt.forEach(t),cAr=r(zQe," (WavLM model)"),zQe.forEach(t),Ie.forEach(t),mAr=i(qa),PC=n(qa,"P",{});var QQe=s(PC);fAr=r(QQe,"The model is set in evaluation mode by default using "),g5e=n(QQe,"CODE",{});var eJt=s(g5e);gAr=r(eJt,"model.eval()"),eJt.forEach(t),hAr=r(QQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h5e=n(QQe,"CODE",{});var oJt=s(h5e);uAr=r(oJt,"model.train()"),oJt.forEach(t),QQe.forEach(t),pAr=i(qa),T(BC.$$.fragment,qa),qa.forEach(t),zl.forEach(t),xeo=i(m),Tc=n(m,"H2",{class:!0});var Vro=s(Tc);IC=n(Vro,"A",{id:!0,class:!0,href:!0});var rJt=s(IC);u5e=n(rJt,"SPAN",{});var tJt=s(u5e);T(mk.$$.fragment,tJt),tJt.forEach(t),rJt.forEach(t),_Ar=i(Vro),p5e=n(Vro,"SPAN",{});var aJt=s(p5e);bAr=r(aJt,"AutoModelForSpeechSeq2Seq"),aJt.forEach(t),Vro.forEach(t),$eo=i(m),Zo=n(m,"DIV",{class:!0});var Ql=s(Zo);T(fk.$$.fragment,Ql),vAr=i(Ql),Mc=n(Ql,"P",{});var Rie=s(Mc);FAr=r(Rie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hZ=n(Rie,"A",{href:!0});var nJt=s(hZ);TAr=r(nJt,"from_pretrained()"),nJt.forEach(t),MAr=r(Rie," class method or the "),uZ=n(Rie,"A",{href:!0});var sJt=s(uZ);EAr=r(sJt,"from_config()"),sJt.forEach(t),CAr=r(Rie,` class
method.`),Rie.forEach(t),wAr=i(Ql),gk=n(Ql,"P",{});var Xro=s(gk);AAr=r(Xro,"This class cannot be instantiated directly using "),_5e=n(Xro,"CODE",{});var lJt=s(_5e);LAr=r(lJt,"__init__()"),lJt.forEach(t),yAr=r(Xro," (throws an error)."),Xro.forEach(t),xAr=i(Ql),Nt=n(Ql,"DIV",{class:!0});var $8=s(Nt);T(hk.$$.fragment,$8),$Ar=i($8),b5e=n($8,"P",{});var iJt=s(b5e);kAr=r(iJt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),iJt.forEach(t),SAr=i($8),Ec=n($8,"P",{});var Pie=s(Ec);RAr=r(Pie,`Note:
Loading a model from its configuration file does `),v5e=n(Pie,"STRONG",{});var dJt=s(v5e);PAr=r(dJt,"not"),dJt.forEach(t),BAr=r(Pie,` load the model weights. It only affects the
model\u2019s configuration. Use `),pZ=n(Pie,"A",{href:!0});var cJt=s(pZ);IAr=r(cJt,"from_pretrained()"),cJt.forEach(t),NAr=r(Pie," to load the model weights."),Pie.forEach(t),qAr=i($8),T(NC.$$.fragment,$8),$8.forEach(t),jAr=i(Ql),vo=n(Ql,"DIV",{class:!0});var ja=s(vo);T(uk.$$.fragment,ja),DAr=i(ja),F5e=n(ja,"P",{});var mJt=s(F5e);GAr=r(mJt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mJt.forEach(t),OAr=i(ja),pn=n(ja,"P",{});var k8=s(pn);VAr=r(k8,"The model class to instantiate is selected based on the "),T5e=n(k8,"CODE",{});var fJt=s(T5e);XAr=r(fJt,"model_type"),fJt.forEach(t),zAr=r(k8,` property of the config object (either
passed as an argument or loaded from `),M5e=n(k8,"CODE",{});var gJt=s(M5e);QAr=r(gJt,"pretrained_model_name_or_path"),gJt.forEach(t),WAr=r(k8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=n(k8,"CODE",{});var hJt=s(E5e);UAr=r(hJt,"pretrained_model_name_or_path"),hJt.forEach(t),HAr=r(k8,":"),k8.forEach(t),JAr=i(ja),pk=n(ja,"UL",{});var zro=s(pk);qC=n(zro,"LI",{});var WQe=s(qC);C5e=n(WQe,"STRONG",{});var uJt=s(C5e);YAr=r(uJt,"speech-encoder-decoder"),uJt.forEach(t),KAr=r(WQe," \u2014 "),_Z=n(WQe,"A",{href:!0});var pJt=s(_Z);ZAr=r(pJt,"SpeechEncoderDecoderModel"),pJt.forEach(t),e6r=r(WQe," (Speech Encoder decoder model)"),WQe.forEach(t),o6r=i(zro),jC=n(zro,"LI",{});var UQe=s(jC);w5e=n(UQe,"STRONG",{});var _Jt=s(w5e);r6r=r(_Jt,"speech_to_text"),_Jt.forEach(t),t6r=r(UQe," \u2014 "),bZ=n(UQe,"A",{href:!0});var bJt=s(bZ);a6r=r(bJt,"Speech2TextForConditionalGeneration"),bJt.forEach(t),n6r=r(UQe," (Speech2Text model)"),UQe.forEach(t),zro.forEach(t),s6r=i(ja),DC=n(ja,"P",{});var HQe=s(DC);l6r=r(HQe,"The model is set in evaluation mode by default using "),A5e=n(HQe,"CODE",{});var vJt=s(A5e);i6r=r(vJt,"model.eval()"),vJt.forEach(t),d6r=r(HQe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L5e=n(HQe,"CODE",{});var FJt=s(L5e);c6r=r(FJt,"model.train()"),FJt.forEach(t),HQe.forEach(t),m6r=i(ja),T(GC.$$.fragment,ja),ja.forEach(t),Ql.forEach(t),keo=i(m),Cc=n(m,"H2",{class:!0});var Qro=s(Cc);OC=n(Qro,"A",{id:!0,class:!0,href:!0});var TJt=s(OC);y5e=n(TJt,"SPAN",{});var MJt=s(y5e);T(_k.$$.fragment,MJt),MJt.forEach(t),TJt.forEach(t),f6r=i(Qro),x5e=n(Qro,"SPAN",{});var EJt=s(x5e);g6r=r(EJt,"AutoModelForAudioXVector"),EJt.forEach(t),Qro.forEach(t),Seo=i(m),er=n(m,"DIV",{class:!0});var Wl=s(er);T(bk.$$.fragment,Wl),h6r=i(Wl),wc=n(Wl,"P",{});var Bie=s(wc);u6r=r(Bie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vZ=n(Bie,"A",{href:!0});var CJt=s(vZ);p6r=r(CJt,"from_pretrained()"),CJt.forEach(t),_6r=r(Bie," class method or the "),FZ=n(Bie,"A",{href:!0});var wJt=s(FZ);b6r=r(wJt,"from_config()"),wJt.forEach(t),v6r=r(Bie,` class
method.`),Bie.forEach(t),F6r=i(Wl),vk=n(Wl,"P",{});var Wro=s(vk);T6r=r(Wro,"This class cannot be instantiated directly using "),$5e=n(Wro,"CODE",{});var AJt=s($5e);M6r=r(AJt,"__init__()"),AJt.forEach(t),E6r=r(Wro," (throws an error)."),Wro.forEach(t),C6r=i(Wl),qt=n(Wl,"DIV",{class:!0});var S8=s(qt);T(Fk.$$.fragment,S8),w6r=i(S8),k5e=n(S8,"P",{});var LJt=s(k5e);A6r=r(LJt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),LJt.forEach(t),L6r=i(S8),Ac=n(S8,"P",{});var Iie=s(Ac);y6r=r(Iie,`Note:
Loading a model from its configuration file does `),S5e=n(Iie,"STRONG",{});var yJt=s(S5e);x6r=r(yJt,"not"),yJt.forEach(t),$6r=r(Iie,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(Iie,"A",{href:!0});var xJt=s(TZ);k6r=r(xJt,"from_pretrained()"),xJt.forEach(t),S6r=r(Iie," to load the model weights."),Iie.forEach(t),R6r=i(S8),T(VC.$$.fragment,S8),S8.forEach(t),P6r=i(Wl),Fo=n(Wl,"DIV",{class:!0});var Da=s(Fo);T(Tk.$$.fragment,Da),B6r=i(Da),R5e=n(Da,"P",{});var $Jt=s(R5e);I6r=r($Jt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),$Jt.forEach(t),N6r=i(Da),_n=n(Da,"P",{});var R8=s(_n);q6r=r(R8,"The model class to instantiate is selected based on the "),P5e=n(R8,"CODE",{});var kJt=s(P5e);j6r=r(kJt,"model_type"),kJt.forEach(t),D6r=r(R8,` property of the config object (either
passed as an argument or loaded from `),B5e=n(R8,"CODE",{});var SJt=s(B5e);G6r=r(SJt,"pretrained_model_name_or_path"),SJt.forEach(t),O6r=r(R8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=n(R8,"CODE",{});var RJt=s(I5e);V6r=r(RJt,"pretrained_model_name_or_path"),RJt.forEach(t),X6r=r(R8,":"),R8.forEach(t),z6r=i(Da),ft=n(Da,"UL",{});var Ul=s(ft);XC=n(Ul,"LI",{});var JQe=s(XC);N5e=n(JQe,"STRONG",{});var PJt=s(N5e);Q6r=r(PJt,"data2vec-audio"),PJt.forEach(t),W6r=r(JQe," \u2014 "),MZ=n(JQe,"A",{href:!0});var BJt=s(MZ);U6r=r(BJt,"Data2VecAudioForXVector"),BJt.forEach(t),H6r=r(JQe," (Data2VecAudio model)"),JQe.forEach(t),J6r=i(Ul),zC=n(Ul,"LI",{});var YQe=s(zC);q5e=n(YQe,"STRONG",{});var IJt=s(q5e);Y6r=r(IJt,"unispeech-sat"),IJt.forEach(t),K6r=r(YQe," \u2014 "),EZ=n(YQe,"A",{href:!0});var NJt=s(EZ);Z6r=r(NJt,"UniSpeechSatForXVector"),NJt.forEach(t),e7r=r(YQe," (UniSpeechSat model)"),YQe.forEach(t),o7r=i(Ul),QC=n(Ul,"LI",{});var KQe=s(QC);j5e=n(KQe,"STRONG",{});var qJt=s(j5e);r7r=r(qJt,"wav2vec2"),qJt.forEach(t),t7r=r(KQe," \u2014 "),CZ=n(KQe,"A",{href:!0});var jJt=s(CZ);a7r=r(jJt,"Wav2Vec2ForXVector"),jJt.forEach(t),n7r=r(KQe," (Wav2Vec2 model)"),KQe.forEach(t),s7r=i(Ul),WC=n(Ul,"LI",{});var ZQe=s(WC);D5e=n(ZQe,"STRONG",{});var DJt=s(D5e);l7r=r(DJt,"wav2vec2-conformer"),DJt.forEach(t),i7r=r(ZQe," \u2014 "),wZ=n(ZQe,"A",{href:!0});var GJt=s(wZ);d7r=r(GJt,"Wav2Vec2ConformerForXVector"),GJt.forEach(t),c7r=r(ZQe," (Wav2Vec2-Conformer model)"),ZQe.forEach(t),m7r=i(Ul),UC=n(Ul,"LI",{});var eWe=s(UC);G5e=n(eWe,"STRONG",{});var OJt=s(G5e);f7r=r(OJt,"wavlm"),OJt.forEach(t),g7r=r(eWe," \u2014 "),AZ=n(eWe,"A",{href:!0});var VJt=s(AZ);h7r=r(VJt,"WavLMForXVector"),VJt.forEach(t),u7r=r(eWe," (WavLM model)"),eWe.forEach(t),Ul.forEach(t),p7r=i(Da),HC=n(Da,"P",{});var oWe=s(HC);_7r=r(oWe,"The model is set in evaluation mode by default using "),O5e=n(oWe,"CODE",{});var XJt=s(O5e);b7r=r(XJt,"model.eval()"),XJt.forEach(t),v7r=r(oWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V5e=n(oWe,"CODE",{});var zJt=s(V5e);F7r=r(zJt,"model.train()"),zJt.forEach(t),oWe.forEach(t),T7r=i(Da),T(JC.$$.fragment,Da),Da.forEach(t),Wl.forEach(t),Reo=i(m),Lc=n(m,"H2",{class:!0});var Uro=s(Lc);YC=n(Uro,"A",{id:!0,class:!0,href:!0});var QJt=s(YC);X5e=n(QJt,"SPAN",{});var WJt=s(X5e);T(Mk.$$.fragment,WJt),WJt.forEach(t),QJt.forEach(t),M7r=i(Uro),z5e=n(Uro,"SPAN",{});var UJt=s(z5e);E7r=r(UJt,"AutoModelForMaskedImageModeling"),UJt.forEach(t),Uro.forEach(t),Peo=i(m),or=n(m,"DIV",{class:!0});var Hl=s(or);T(Ek.$$.fragment,Hl),C7r=i(Hl),yc=n(Hl,"P",{});var Nie=s(yc);w7r=r(Nie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LZ=n(Nie,"A",{href:!0});var HJt=s(LZ);A7r=r(HJt,"from_pretrained()"),HJt.forEach(t),L7r=r(Nie," class method or the "),yZ=n(Nie,"A",{href:!0});var JJt=s(yZ);y7r=r(JJt,"from_config()"),JJt.forEach(t),x7r=r(Nie,` class
method.`),Nie.forEach(t),$7r=i(Hl),Ck=n(Hl,"P",{});var Hro=s(Ck);k7r=r(Hro,"This class cannot be instantiated directly using "),Q5e=n(Hro,"CODE",{});var YJt=s(Q5e);S7r=r(YJt,"__init__()"),YJt.forEach(t),R7r=r(Hro," (throws an error)."),Hro.forEach(t),P7r=i(Hl),jt=n(Hl,"DIV",{class:!0});var P8=s(jt);T(wk.$$.fragment,P8),B7r=i(P8),W5e=n(P8,"P",{});var KJt=s(W5e);I7r=r(KJt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),KJt.forEach(t),N7r=i(P8),xc=n(P8,"P",{});var qie=s(xc);q7r=r(qie,`Note:
Loading a model from its configuration file does `),U5e=n(qie,"STRONG",{});var ZJt=s(U5e);j7r=r(ZJt,"not"),ZJt.forEach(t),D7r=r(qie,` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=n(qie,"A",{href:!0});var eYt=s(xZ);G7r=r(eYt,"from_pretrained()"),eYt.forEach(t),O7r=r(qie," to load the model weights."),qie.forEach(t),V7r=i(P8),T(KC.$$.fragment,P8),P8.forEach(t),X7r=i(Hl),To=n(Hl,"DIV",{class:!0});var Ga=s(To);T(Ak.$$.fragment,Ga),z7r=i(Ga),H5e=n(Ga,"P",{});var oYt=s(H5e);Q7r=r(oYt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),oYt.forEach(t),W7r=i(Ga),bn=n(Ga,"P",{});var B8=s(bn);U7r=r(B8,"The model class to instantiate is selected based on the "),J5e=n(B8,"CODE",{});var rYt=s(J5e);H7r=r(rYt,"model_type"),rYt.forEach(t),J7r=r(B8,` property of the config object (either
passed as an argument or loaded from `),Y5e=n(B8,"CODE",{});var tYt=s(Y5e);Y7r=r(tYt,"pretrained_model_name_or_path"),tYt.forEach(t),K7r=r(B8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K5e=n(B8,"CODE",{});var aYt=s(K5e);Z7r=r(aYt,"pretrained_model_name_or_path"),aYt.forEach(t),eLr=r(B8,":"),B8.forEach(t),oLr=i(Ga),vn=n(Ga,"UL",{});var I8=s(vn);ZC=n(I8,"LI",{});var rWe=s(ZC);Z5e=n(rWe,"STRONG",{});var nYt=s(Z5e);rLr=r(nYt,"deit"),nYt.forEach(t),tLr=r(rWe," \u2014 "),$Z=n(rWe,"A",{href:!0});var sYt=s($Z);aLr=r(sYt,"DeiTForMaskedImageModeling"),sYt.forEach(t),nLr=r(rWe," (DeiT model)"),rWe.forEach(t),sLr=i(I8),e3=n(I8,"LI",{});var tWe=s(e3);e0e=n(tWe,"STRONG",{});var lYt=s(e0e);lLr=r(lYt,"swin"),lYt.forEach(t),iLr=r(tWe," \u2014 "),kZ=n(tWe,"A",{href:!0});var iYt=s(kZ);dLr=r(iYt,"SwinForMaskedImageModeling"),iYt.forEach(t),cLr=r(tWe," (Swin Transformer model)"),tWe.forEach(t),mLr=i(I8),o3=n(I8,"LI",{});var aWe=s(o3);o0e=n(aWe,"STRONG",{});var dYt=s(o0e);fLr=r(dYt,"swinv2"),dYt.forEach(t),gLr=r(aWe," \u2014 "),SZ=n(aWe,"A",{href:!0});var cYt=s(SZ);hLr=r(cYt,"Swinv2ForMaskedImageModeling"),cYt.forEach(t),uLr=r(aWe," (Swin Transformer V2 model)"),aWe.forEach(t),pLr=i(I8),r3=n(I8,"LI",{});var nWe=s(r3);r0e=n(nWe,"STRONG",{});var mYt=s(r0e);_Lr=r(mYt,"vit"),mYt.forEach(t),bLr=r(nWe," \u2014 "),RZ=n(nWe,"A",{href:!0});var fYt=s(RZ);vLr=r(fYt,"ViTForMaskedImageModeling"),fYt.forEach(t),FLr=r(nWe," (ViT model)"),nWe.forEach(t),I8.forEach(t),TLr=i(Ga),t3=n(Ga,"P",{});var sWe=s(t3);MLr=r(sWe,"The model is set in evaluation mode by default using "),t0e=n(sWe,"CODE",{});var gYt=s(t0e);ELr=r(gYt,"model.eval()"),gYt.forEach(t),CLr=r(sWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a0e=n(sWe,"CODE",{});var hYt=s(a0e);wLr=r(hYt,"model.train()"),hYt.forEach(t),sWe.forEach(t),ALr=i(Ga),T(a3.$$.fragment,Ga),Ga.forEach(t),Hl.forEach(t),Beo=i(m),$c=n(m,"H2",{class:!0});var Jro=s($c);n3=n(Jro,"A",{id:!0,class:!0,href:!0});var uYt=s(n3);n0e=n(uYt,"SPAN",{});var pYt=s(n0e);T(Lk.$$.fragment,pYt),pYt.forEach(t),uYt.forEach(t),LLr=i(Jro),s0e=n(Jro,"SPAN",{});var _Yt=s(s0e);yLr=r(_Yt,"AutoModelForObjectDetection"),_Yt.forEach(t),Jro.forEach(t),Ieo=i(m),rr=n(m,"DIV",{class:!0});var Jl=s(rr);T(yk.$$.fragment,Jl),xLr=i(Jl),kc=n(Jl,"P",{});var jie=s(kc);$Lr=r(jie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PZ=n(jie,"A",{href:!0});var bYt=s(PZ);kLr=r(bYt,"from_pretrained()"),bYt.forEach(t),SLr=r(jie," class method or the "),BZ=n(jie,"A",{href:!0});var vYt=s(BZ);RLr=r(vYt,"from_config()"),vYt.forEach(t),PLr=r(jie,` class
method.`),jie.forEach(t),BLr=i(Jl),xk=n(Jl,"P",{});var Yro=s(xk);ILr=r(Yro,"This class cannot be instantiated directly using "),l0e=n(Yro,"CODE",{});var FYt=s(l0e);NLr=r(FYt,"__init__()"),FYt.forEach(t),qLr=r(Yro," (throws an error)."),Yro.forEach(t),jLr=i(Jl),Dt=n(Jl,"DIV",{class:!0});var N8=s(Dt);T($k.$$.fragment,N8),DLr=i(N8),i0e=n(N8,"P",{});var TYt=s(i0e);GLr=r(TYt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),TYt.forEach(t),OLr=i(N8),Sc=n(N8,"P",{});var Die=s(Sc);VLr=r(Die,`Note:
Loading a model from its configuration file does `),d0e=n(Die,"STRONG",{});var MYt=s(d0e);XLr=r(MYt,"not"),MYt.forEach(t),zLr=r(Die,` load the model weights. It only affects the
model\u2019s configuration. Use `),IZ=n(Die,"A",{href:!0});var EYt=s(IZ);QLr=r(EYt,"from_pretrained()"),EYt.forEach(t),WLr=r(Die," to load the model weights."),Die.forEach(t),ULr=i(N8),T(s3.$$.fragment,N8),N8.forEach(t),HLr=i(Jl),Mo=n(Jl,"DIV",{class:!0});var Oa=s(Mo);T(kk.$$.fragment,Oa),JLr=i(Oa),c0e=n(Oa,"P",{});var CYt=s(c0e);YLr=r(CYt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),CYt.forEach(t),KLr=i(Oa),Fn=n(Oa,"P",{});var q8=s(Fn);ZLr=r(q8,"The model class to instantiate is selected based on the "),m0e=n(q8,"CODE",{});var wYt=s(m0e);eyr=r(wYt,"model_type"),wYt.forEach(t),oyr=r(q8,` property of the config object (either
passed as an argument or loaded from `),f0e=n(q8,"CODE",{});var AYt=s(f0e);ryr=r(AYt,"pretrained_model_name_or_path"),AYt.forEach(t),tyr=r(q8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g0e=n(q8,"CODE",{});var LYt=s(g0e);ayr=r(LYt,"pretrained_model_name_or_path"),LYt.forEach(t),nyr=r(q8,":"),q8.forEach(t),syr=i(Oa),Tn=n(Oa,"UL",{});var j8=s(Tn);l3=n(j8,"LI",{});var lWe=s(l3);h0e=n(lWe,"STRONG",{});var yYt=s(h0e);lyr=r(yYt,"conditional_detr"),yYt.forEach(t),iyr=r(lWe," \u2014 "),NZ=n(lWe,"A",{href:!0});var xYt=s(NZ);dyr=r(xYt,"ConditionalDetrForObjectDetection"),xYt.forEach(t),cyr=r(lWe," (Conditional DETR model)"),lWe.forEach(t),myr=i(j8),i3=n(j8,"LI",{});var iWe=s(i3);u0e=n(iWe,"STRONG",{});var $Yt=s(u0e);fyr=r($Yt,"deformable_detr"),$Yt.forEach(t),gyr=r(iWe," \u2014 "),qZ=n(iWe,"A",{href:!0});var kYt=s(qZ);hyr=r(kYt,"DeformableDetrForObjectDetection"),kYt.forEach(t),uyr=r(iWe," (Deformable DETR model)"),iWe.forEach(t),pyr=i(j8),d3=n(j8,"LI",{});var dWe=s(d3);p0e=n(dWe,"STRONG",{});var SYt=s(p0e);_yr=r(SYt,"detr"),SYt.forEach(t),byr=r(dWe," \u2014 "),jZ=n(dWe,"A",{href:!0});var RYt=s(jZ);vyr=r(RYt,"DetrForObjectDetection"),RYt.forEach(t),Fyr=r(dWe," (DETR model)"),dWe.forEach(t),Tyr=i(j8),c3=n(j8,"LI",{});var cWe=s(c3);_0e=n(cWe,"STRONG",{});var PYt=s(_0e);Myr=r(PYt,"yolos"),PYt.forEach(t),Eyr=r(cWe," \u2014 "),DZ=n(cWe,"A",{href:!0});var BYt=s(DZ);Cyr=r(BYt,"YolosForObjectDetection"),BYt.forEach(t),wyr=r(cWe," (YOLOS model)"),cWe.forEach(t),j8.forEach(t),Ayr=i(Oa),m3=n(Oa,"P",{});var mWe=s(m3);Lyr=r(mWe,"The model is set in evaluation mode by default using "),b0e=n(mWe,"CODE",{});var IYt=s(b0e);yyr=r(IYt,"model.eval()"),IYt.forEach(t),xyr=r(mWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v0e=n(mWe,"CODE",{});var NYt=s(v0e);$yr=r(NYt,"model.train()"),NYt.forEach(t),mWe.forEach(t),kyr=i(Oa),T(f3.$$.fragment,Oa),Oa.forEach(t),Jl.forEach(t),Neo=i(m),Rc=n(m,"H2",{class:!0});var Kro=s(Rc);g3=n(Kro,"A",{id:!0,class:!0,href:!0});var qYt=s(g3);F0e=n(qYt,"SPAN",{});var jYt=s(F0e);T(Sk.$$.fragment,jYt),jYt.forEach(t),qYt.forEach(t),Syr=i(Kro),T0e=n(Kro,"SPAN",{});var DYt=s(T0e);Ryr=r(DYt,"AutoModelForImageSegmentation"),DYt.forEach(t),Kro.forEach(t),qeo=i(m),tr=n(m,"DIV",{class:!0});var Yl=s(tr);T(Rk.$$.fragment,Yl),Pyr=i(Yl),Pc=n(Yl,"P",{});var Gie=s(Pc);Byr=r(Gie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),GZ=n(Gie,"A",{href:!0});var GYt=s(GZ);Iyr=r(GYt,"from_pretrained()"),GYt.forEach(t),Nyr=r(Gie," class method or the "),OZ=n(Gie,"A",{href:!0});var OYt=s(OZ);qyr=r(OYt,"from_config()"),OYt.forEach(t),jyr=r(Gie,` class
method.`),Gie.forEach(t),Dyr=i(Yl),Pk=n(Yl,"P",{});var Zro=s(Pk);Gyr=r(Zro,"This class cannot be instantiated directly using "),M0e=n(Zro,"CODE",{});var VYt=s(M0e);Oyr=r(VYt,"__init__()"),VYt.forEach(t),Vyr=r(Zro," (throws an error)."),Zro.forEach(t),Xyr=i(Yl),Gt=n(Yl,"DIV",{class:!0});var D8=s(Gt);T(Bk.$$.fragment,D8),zyr=i(D8),E0e=n(D8,"P",{});var XYt=s(E0e);Qyr=r(XYt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),XYt.forEach(t),Wyr=i(D8),Bc=n(D8,"P",{});var Oie=s(Bc);Uyr=r(Oie,`Note:
Loading a model from its configuration file does `),C0e=n(Oie,"STRONG",{});var zYt=s(C0e);Hyr=r(zYt,"not"),zYt.forEach(t),Jyr=r(Oie,` load the model weights. It only affects the
model\u2019s configuration. Use `),VZ=n(Oie,"A",{href:!0});var QYt=s(VZ);Yyr=r(QYt,"from_pretrained()"),QYt.forEach(t),Kyr=r(Oie," to load the model weights."),Oie.forEach(t),Zyr=i(D8),T(h3.$$.fragment,D8),D8.forEach(t),e8r=i(Yl),Eo=n(Yl,"DIV",{class:!0});var Va=s(Eo);T(Ik.$$.fragment,Va),o8r=i(Va),w0e=n(Va,"P",{});var WYt=s(w0e);r8r=r(WYt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),WYt.forEach(t),t8r=i(Va),Mn=n(Va,"P",{});var G8=s(Mn);a8r=r(G8,"The model class to instantiate is selected based on the "),A0e=n(G8,"CODE",{});var UYt=s(A0e);n8r=r(UYt,"model_type"),UYt.forEach(t),s8r=r(G8,` property of the config object (either
passed as an argument or loaded from `),L0e=n(G8,"CODE",{});var HYt=s(L0e);l8r=r(HYt,"pretrained_model_name_or_path"),HYt.forEach(t),i8r=r(G8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y0e=n(G8,"CODE",{});var JYt=s(y0e);d8r=r(JYt,"pretrained_model_name_or_path"),JYt.forEach(t),c8r=r(G8,":"),G8.forEach(t),m8r=i(Va),x0e=n(Va,"UL",{});var YYt=s(x0e);u3=n(YYt,"LI",{});var fWe=s(u3);$0e=n(fWe,"STRONG",{});var KYt=s($0e);f8r=r(KYt,"detr"),KYt.forEach(t),g8r=r(fWe," \u2014 "),XZ=n(fWe,"A",{href:!0});var ZYt=s(XZ);h8r=r(ZYt,"DetrForSegmentation"),ZYt.forEach(t),u8r=r(fWe," (DETR model)"),fWe.forEach(t),YYt.forEach(t),p8r=i(Va),p3=n(Va,"P",{});var gWe=s(p3);_8r=r(gWe,"The model is set in evaluation mode by default using "),k0e=n(gWe,"CODE",{});var eKt=s(k0e);b8r=r(eKt,"model.eval()"),eKt.forEach(t),v8r=r(gWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),S0e=n(gWe,"CODE",{});var oKt=s(S0e);F8r=r(oKt,"model.train()"),oKt.forEach(t),gWe.forEach(t),T8r=i(Va),T(_3.$$.fragment,Va),Va.forEach(t),Yl.forEach(t),jeo=i(m),Ic=n(m,"H2",{class:!0});var eto=s(Ic);b3=n(eto,"A",{id:!0,class:!0,href:!0});var rKt=s(b3);R0e=n(rKt,"SPAN",{});var tKt=s(R0e);T(Nk.$$.fragment,tKt),tKt.forEach(t),rKt.forEach(t),M8r=i(eto),P0e=n(eto,"SPAN",{});var aKt=s(P0e);E8r=r(aKt,"AutoModelForSemanticSegmentation"),aKt.forEach(t),eto.forEach(t),Deo=i(m),ar=n(m,"DIV",{class:!0});var Kl=s(ar);T(qk.$$.fragment,Kl),C8r=i(Kl),Nc=n(Kl,"P",{});var Vie=s(Nc);w8r=r(Vie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),zZ=n(Vie,"A",{href:!0});var nKt=s(zZ);A8r=r(nKt,"from_pretrained()"),nKt.forEach(t),L8r=r(Vie," class method or the "),QZ=n(Vie,"A",{href:!0});var sKt=s(QZ);y8r=r(sKt,"from_config()"),sKt.forEach(t),x8r=r(Vie,` class
method.`),Vie.forEach(t),$8r=i(Kl),jk=n(Kl,"P",{});var oto=s(jk);k8r=r(oto,"This class cannot be instantiated directly using "),B0e=n(oto,"CODE",{});var lKt=s(B0e);S8r=r(lKt,"__init__()"),lKt.forEach(t),R8r=r(oto," (throws an error)."),oto.forEach(t),P8r=i(Kl),Ot=n(Kl,"DIV",{class:!0});var O8=s(Ot);T(Dk.$$.fragment,O8),B8r=i(O8),I0e=n(O8,"P",{});var iKt=s(I0e);I8r=r(iKt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),iKt.forEach(t),N8r=i(O8),qc=n(O8,"P",{});var Xie=s(qc);q8r=r(Xie,`Note:
Loading a model from its configuration file does `),N0e=n(Xie,"STRONG",{});var dKt=s(N0e);j8r=r(dKt,"not"),dKt.forEach(t),D8r=r(Xie,` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=n(Xie,"A",{href:!0});var cKt=s(WZ);G8r=r(cKt,"from_pretrained()"),cKt.forEach(t),O8r=r(Xie," to load the model weights."),Xie.forEach(t),V8r=i(O8),T(v3.$$.fragment,O8),O8.forEach(t),X8r=i(Kl),Co=n(Kl,"DIV",{class:!0});var Xa=s(Co);T(Gk.$$.fragment,Xa),z8r=i(Xa),q0e=n(Xa,"P",{});var mKt=s(q0e);Q8r=r(mKt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mKt.forEach(t),W8r=i(Xa),En=n(Xa,"P",{});var V8=s(En);U8r=r(V8,"The model class to instantiate is selected based on the "),j0e=n(V8,"CODE",{});var fKt=s(j0e);H8r=r(fKt,"model_type"),fKt.forEach(t),J8r=r(V8,` property of the config object (either
passed as an argument or loaded from `),D0e=n(V8,"CODE",{});var gKt=s(D0e);Y8r=r(gKt,"pretrained_model_name_or_path"),gKt.forEach(t),K8r=r(V8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G0e=n(V8,"CODE",{});var hKt=s(G0e);Z8r=r(hKt,"pretrained_model_name_or_path"),hKt.forEach(t),e9r=r(V8,":"),V8.forEach(t),o9r=i(Xa),gt=n(Xa,"UL",{});var Zl=s(gt);F3=n(Zl,"LI",{});var hWe=s(F3);O0e=n(hWe,"STRONG",{});var uKt=s(O0e);r9r=r(uKt,"beit"),uKt.forEach(t),t9r=r(hWe," \u2014 "),UZ=n(hWe,"A",{href:!0});var pKt=s(UZ);a9r=r(pKt,"BeitForSemanticSegmentation"),pKt.forEach(t),n9r=r(hWe," (BEiT model)"),hWe.forEach(t),s9r=i(Zl),T3=n(Zl,"LI",{});var uWe=s(T3);V0e=n(uWe,"STRONG",{});var _Kt=s(V0e);l9r=r(_Kt,"data2vec-vision"),_Kt.forEach(t),i9r=r(uWe," \u2014 "),HZ=n(uWe,"A",{href:!0});var bKt=s(HZ);d9r=r(bKt,"Data2VecVisionForSemanticSegmentation"),bKt.forEach(t),c9r=r(uWe," (Data2VecVision model)"),uWe.forEach(t),m9r=i(Zl),M3=n(Zl,"LI",{});var pWe=s(M3);X0e=n(pWe,"STRONG",{});var vKt=s(X0e);f9r=r(vKt,"dpt"),vKt.forEach(t),g9r=r(pWe," \u2014 "),JZ=n(pWe,"A",{href:!0});var FKt=s(JZ);h9r=r(FKt,"DPTForSemanticSegmentation"),FKt.forEach(t),u9r=r(pWe," (DPT model)"),pWe.forEach(t),p9r=i(Zl),E3=n(Zl,"LI",{});var _We=s(E3);z0e=n(_We,"STRONG",{});var TKt=s(z0e);_9r=r(TKt,"mobilevit"),TKt.forEach(t),b9r=r(_We," \u2014 "),YZ=n(_We,"A",{href:!0});var MKt=s(YZ);v9r=r(MKt,"MobileViTForSemanticSegmentation"),MKt.forEach(t),F9r=r(_We," (MobileViT model)"),_We.forEach(t),T9r=i(Zl),C3=n(Zl,"LI",{});var bWe=s(C3);Q0e=n(bWe,"STRONG",{});var EKt=s(Q0e);M9r=r(EKt,"segformer"),EKt.forEach(t),E9r=r(bWe," \u2014 "),KZ=n(bWe,"A",{href:!0});var CKt=s(KZ);C9r=r(CKt,"SegformerForSemanticSegmentation"),CKt.forEach(t),w9r=r(bWe," (SegFormer model)"),bWe.forEach(t),Zl.forEach(t),A9r=i(Xa),w3=n(Xa,"P",{});var vWe=s(w3);L9r=r(vWe,"The model is set in evaluation mode by default using "),W0e=n(vWe,"CODE",{});var wKt=s(W0e);y9r=r(wKt,"model.eval()"),wKt.forEach(t),x9r=r(vWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U0e=n(vWe,"CODE",{});var AKt=s(U0e);$9r=r(AKt,"model.train()"),AKt.forEach(t),vWe.forEach(t),k9r=i(Xa),T(A3.$$.fragment,Xa),Xa.forEach(t),Kl.forEach(t),Geo=i(m),jc=n(m,"H2",{class:!0});var rto=s(jc);L3=n(rto,"A",{id:!0,class:!0,href:!0});var LKt=s(L3);H0e=n(LKt,"SPAN",{});var yKt=s(H0e);T(Ok.$$.fragment,yKt),yKt.forEach(t),LKt.forEach(t),S9r=i(rto),J0e=n(rto,"SPAN",{});var xKt=s(J0e);R9r=r(xKt,"AutoModelForInstanceSegmentation"),xKt.forEach(t),rto.forEach(t),Oeo=i(m),nr=n(m,"DIV",{class:!0});var ei=s(nr);T(Vk.$$.fragment,ei),P9r=i(ei),Dc=n(ei,"P",{});var zie=s(Dc);B9r=r(zie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),ZZ=n(zie,"A",{href:!0});var $Kt=s(ZZ);I9r=r($Kt,"from_pretrained()"),$Kt.forEach(t),N9r=r(zie," class method or the "),eee=n(zie,"A",{href:!0});var kKt=s(eee);q9r=r(kKt,"from_config()"),kKt.forEach(t),j9r=r(zie,` class
method.`),zie.forEach(t),D9r=i(ei),Xk=n(ei,"P",{});var tto=s(Xk);G9r=r(tto,"This class cannot be instantiated directly using "),Y0e=n(tto,"CODE",{});var SKt=s(Y0e);O9r=r(SKt,"__init__()"),SKt.forEach(t),V9r=r(tto," (throws an error)."),tto.forEach(t),X9r=i(ei),Vt=n(ei,"DIV",{class:!0});var X8=s(Vt);T(zk.$$.fragment,X8),z9r=i(X8),K0e=n(X8,"P",{});var RKt=s(K0e);Q9r=r(RKt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),RKt.forEach(t),W9r=i(X8),Gc=n(X8,"P",{});var Qie=s(Gc);U9r=r(Qie,`Note:
Loading a model from its configuration file does `),Z0e=n(Qie,"STRONG",{});var PKt=s(Z0e);H9r=r(PKt,"not"),PKt.forEach(t),J9r=r(Qie,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(Qie,"A",{href:!0});var BKt=s(oee);Y9r=r(BKt,"from_pretrained()"),BKt.forEach(t),K9r=r(Qie," to load the model weights."),Qie.forEach(t),Z9r=i(X8),T(y3.$$.fragment,X8),X8.forEach(t),exr=i(ei),wo=n(ei,"DIV",{class:!0});var za=s(wo);T(Qk.$$.fragment,za),oxr=i(za),ewe=n(za,"P",{});var IKt=s(ewe);rxr=r(IKt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),IKt.forEach(t),txr=i(za),Cn=n(za,"P",{});var z8=s(Cn);axr=r(z8,"The model class to instantiate is selected based on the "),owe=n(z8,"CODE",{});var NKt=s(owe);nxr=r(NKt,"model_type"),NKt.forEach(t),sxr=r(z8,` property of the config object (either
passed as an argument or loaded from `),rwe=n(z8,"CODE",{});var qKt=s(rwe);lxr=r(qKt,"pretrained_model_name_or_path"),qKt.forEach(t),ixr=r(z8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),twe=n(z8,"CODE",{});var jKt=s(twe);dxr=r(jKt,"pretrained_model_name_or_path"),jKt.forEach(t),cxr=r(z8,":"),z8.forEach(t),mxr=i(za),awe=n(za,"UL",{});var DKt=s(awe);x3=n(DKt,"LI",{});var FWe=s(x3);nwe=n(FWe,"STRONG",{});var GKt=s(nwe);fxr=r(GKt,"maskformer"),GKt.forEach(t),gxr=r(FWe," \u2014 "),ree=n(FWe,"A",{href:!0});var OKt=s(ree);hxr=r(OKt,"MaskFormerForInstanceSegmentation"),OKt.forEach(t),uxr=r(FWe," (MaskFormer model)"),FWe.forEach(t),DKt.forEach(t),pxr=i(za),$3=n(za,"P",{});var TWe=s($3);_xr=r(TWe,"The model is set in evaluation mode by default using "),swe=n(TWe,"CODE",{});var VKt=s(swe);bxr=r(VKt,"model.eval()"),VKt.forEach(t),vxr=r(TWe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lwe=n(TWe,"CODE",{});var XKt=s(lwe);Fxr=r(XKt,"model.train()"),XKt.forEach(t),TWe.forEach(t),Txr=i(za),T(k3.$$.fragment,za),za.forEach(t),ei.forEach(t),Veo=i(m),Oc=n(m,"H2",{class:!0});var ato=s(Oc);S3=n(ato,"A",{id:!0,class:!0,href:!0});var zKt=s(S3);iwe=n(zKt,"SPAN",{});var QKt=s(iwe);T(Wk.$$.fragment,QKt),QKt.forEach(t),zKt.forEach(t),Mxr=i(ato),dwe=n(ato,"SPAN",{});var WKt=s(dwe);Exr=r(WKt,"TFAutoModel"),WKt.forEach(t),ato.forEach(t),Xeo=i(m),sr=n(m,"DIV",{class:!0});var oi=s(sr);T(Uk.$$.fragment,oi),Cxr=i(oi),Vc=n(oi,"P",{});var Wie=s(Vc);wxr=r(Wie,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tee=n(Wie,"A",{href:!0});var UKt=s(tee);Axr=r(UKt,"from_pretrained()"),UKt.forEach(t),Lxr=r(Wie," class method or the "),aee=n(Wie,"A",{href:!0});var HKt=s(aee);yxr=r(HKt,"from_config()"),HKt.forEach(t),xxr=r(Wie,` class
method.`),Wie.forEach(t),$xr=i(oi),Hk=n(oi,"P",{});var nto=s(Hk);kxr=r(nto,"This class cannot be instantiated directly using "),cwe=n(nto,"CODE",{});var JKt=s(cwe);Sxr=r(JKt,"__init__()"),JKt.forEach(t),Rxr=r(nto," (throws an error)."),nto.forEach(t),Pxr=i(oi),Xt=n(oi,"DIV",{class:!0});var Q8=s(Xt);T(Jk.$$.fragment,Q8),Bxr=i(Q8),mwe=n(Q8,"P",{});var YKt=s(mwe);Ixr=r(YKt,"Instantiates one of the base model classes of the library from a configuration."),YKt.forEach(t),Nxr=i(Q8),Xc=n(Q8,"P",{});var Uie=s(Xc);qxr=r(Uie,`Note:
Loading a model from its configuration file does `),fwe=n(Uie,"STRONG",{});var KKt=s(fwe);jxr=r(KKt,"not"),KKt.forEach(t),Dxr=r(Uie,` load the model weights. It only affects the
model\u2019s configuration. Use `),nee=n(Uie,"A",{href:!0});var ZKt=s(nee);Gxr=r(ZKt,"from_pretrained()"),ZKt.forEach(t),Oxr=r(Uie," to load the model weights."),Uie.forEach(t),Vxr=i(Q8),T(R3.$$.fragment,Q8),Q8.forEach(t),Xxr=i(oi),Ir=n(oi,"DIV",{class:!0});var ri=s(Ir);T(Yk.$$.fragment,ri),zxr=i(ri),gwe=n(ri,"P",{});var eZt=s(gwe);Qxr=r(eZt,"Instantiate one of the base model classes of the library from a pretrained model."),eZt.forEach(t),Wxr=i(ri),wn=n(ri,"P",{});var W8=s(wn);Uxr=r(W8,"The model class to instantiate is selected based on the "),hwe=n(W8,"CODE",{});var oZt=s(hwe);Hxr=r(oZt,"model_type"),oZt.forEach(t),Jxr=r(W8,` property of the config object (either
passed as an argument or loaded from `),uwe=n(W8,"CODE",{});var rZt=s(uwe);Yxr=r(rZt,"pretrained_model_name_or_path"),rZt.forEach(t),Kxr=r(W8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pwe=n(W8,"CODE",{});var tZt=s(pwe);Zxr=r(tZt,"pretrained_model_name_or_path"),tZt.forEach(t),e$r=r(W8,":"),W8.forEach(t),o$r=i(ri),I=n(ri,"UL",{});var D=s(I);P3=n(D,"LI",{});var MWe=s(P3);_we=n(MWe,"STRONG",{});var aZt=s(_we);r$r=r(aZt,"albert"),aZt.forEach(t),t$r=r(MWe," \u2014 "),see=n(MWe,"A",{href:!0});var nZt=s(see);a$r=r(nZt,"TFAlbertModel"),nZt.forEach(t),n$r=r(MWe," (ALBERT model)"),MWe.forEach(t),s$r=i(D),B3=n(D,"LI",{});var EWe=s(B3);bwe=n(EWe,"STRONG",{});var sZt=s(bwe);l$r=r(sZt,"bart"),sZt.forEach(t),i$r=r(EWe," \u2014 "),lee=n(EWe,"A",{href:!0});var lZt=s(lee);d$r=r(lZt,"TFBartModel"),lZt.forEach(t),c$r=r(EWe," (BART model)"),EWe.forEach(t),m$r=i(D),I3=n(D,"LI",{});var CWe=s(I3);vwe=n(CWe,"STRONG",{});var iZt=s(vwe);f$r=r(iZt,"bert"),iZt.forEach(t),g$r=r(CWe," \u2014 "),iee=n(CWe,"A",{href:!0});var dZt=s(iee);h$r=r(dZt,"TFBertModel"),dZt.forEach(t),u$r=r(CWe," (BERT model)"),CWe.forEach(t),p$r=i(D),N3=n(D,"LI",{});var wWe=s(N3);Fwe=n(wWe,"STRONG",{});var cZt=s(Fwe);_$r=r(cZt,"blenderbot"),cZt.forEach(t),b$r=r(wWe," \u2014 "),dee=n(wWe,"A",{href:!0});var mZt=s(dee);v$r=r(mZt,"TFBlenderbotModel"),mZt.forEach(t),F$r=r(wWe," (Blenderbot model)"),wWe.forEach(t),T$r=i(D),q3=n(D,"LI",{});var AWe=s(q3);Twe=n(AWe,"STRONG",{});var fZt=s(Twe);M$r=r(fZt,"blenderbot-small"),fZt.forEach(t),E$r=r(AWe," \u2014 "),cee=n(AWe,"A",{href:!0});var gZt=s(cee);C$r=r(gZt,"TFBlenderbotSmallModel"),gZt.forEach(t),w$r=r(AWe," (BlenderbotSmall model)"),AWe.forEach(t),A$r=i(D),j3=n(D,"LI",{});var LWe=s(j3);Mwe=n(LWe,"STRONG",{});var hZt=s(Mwe);L$r=r(hZt,"camembert"),hZt.forEach(t),y$r=r(LWe," \u2014 "),mee=n(LWe,"A",{href:!0});var uZt=s(mee);x$r=r(uZt,"TFCamembertModel"),uZt.forEach(t),$$r=r(LWe," (CamemBERT model)"),LWe.forEach(t),k$r=i(D),D3=n(D,"LI",{});var yWe=s(D3);Ewe=n(yWe,"STRONG",{});var pZt=s(Ewe);S$r=r(pZt,"clip"),pZt.forEach(t),R$r=r(yWe," \u2014 "),fee=n(yWe,"A",{href:!0});var _Zt=s(fee);P$r=r(_Zt,"TFCLIPModel"),_Zt.forEach(t),B$r=r(yWe," (CLIP model)"),yWe.forEach(t),I$r=i(D),G3=n(D,"LI",{});var xWe=s(G3);Cwe=n(xWe,"STRONG",{});var bZt=s(Cwe);N$r=r(bZt,"convbert"),bZt.forEach(t),q$r=r(xWe," \u2014 "),gee=n(xWe,"A",{href:!0});var vZt=s(gee);j$r=r(vZt,"TFConvBertModel"),vZt.forEach(t),D$r=r(xWe," (ConvBERT model)"),xWe.forEach(t),G$r=i(D),O3=n(D,"LI",{});var $We=s(O3);wwe=n($We,"STRONG",{});var FZt=s(wwe);O$r=r(FZt,"convnext"),FZt.forEach(t),V$r=r($We," \u2014 "),hee=n($We,"A",{href:!0});var TZt=s(hee);X$r=r(TZt,"TFConvNextModel"),TZt.forEach(t),z$r=r($We," (ConvNeXT model)"),$We.forEach(t),Q$r=i(D),V3=n(D,"LI",{});var kWe=s(V3);Awe=n(kWe,"STRONG",{});var MZt=s(Awe);W$r=r(MZt,"ctrl"),MZt.forEach(t),U$r=r(kWe," \u2014 "),uee=n(kWe,"A",{href:!0});var EZt=s(uee);H$r=r(EZt,"TFCTRLModel"),EZt.forEach(t),J$r=r(kWe," (CTRL model)"),kWe.forEach(t),Y$r=i(D),X3=n(D,"LI",{});var SWe=s(X3);Lwe=n(SWe,"STRONG",{});var CZt=s(Lwe);K$r=r(CZt,"data2vec-vision"),CZt.forEach(t),Z$r=r(SWe," \u2014 "),pee=n(SWe,"A",{href:!0});var wZt=s(pee);ekr=r(wZt,"TFData2VecVisionModel"),wZt.forEach(t),okr=r(SWe," (Data2VecVision model)"),SWe.forEach(t),rkr=i(D),z3=n(D,"LI",{});var RWe=s(z3);ywe=n(RWe,"STRONG",{});var AZt=s(ywe);tkr=r(AZt,"deberta"),AZt.forEach(t),akr=r(RWe," \u2014 "),_ee=n(RWe,"A",{href:!0});var LZt=s(_ee);nkr=r(LZt,"TFDebertaModel"),LZt.forEach(t),skr=r(RWe," (DeBERTa model)"),RWe.forEach(t),lkr=i(D),Q3=n(D,"LI",{});var PWe=s(Q3);xwe=n(PWe,"STRONG",{});var yZt=s(xwe);ikr=r(yZt,"deberta-v2"),yZt.forEach(t),dkr=r(PWe," \u2014 "),bee=n(PWe,"A",{href:!0});var xZt=s(bee);ckr=r(xZt,"TFDebertaV2Model"),xZt.forEach(t),mkr=r(PWe," (DeBERTa-v2 model)"),PWe.forEach(t),fkr=i(D),W3=n(D,"LI",{});var BWe=s(W3);$we=n(BWe,"STRONG",{});var $Zt=s($we);gkr=r($Zt,"deit"),$Zt.forEach(t),hkr=r(BWe," \u2014 "),vee=n(BWe,"A",{href:!0});var kZt=s(vee);ukr=r(kZt,"TFDeiTModel"),kZt.forEach(t),pkr=r(BWe," (DeiT model)"),BWe.forEach(t),_kr=i(D),U3=n(D,"LI",{});var IWe=s(U3);kwe=n(IWe,"STRONG",{});var SZt=s(kwe);bkr=r(SZt,"distilbert"),SZt.forEach(t),vkr=r(IWe," \u2014 "),Fee=n(IWe,"A",{href:!0});var RZt=s(Fee);Fkr=r(RZt,"TFDistilBertModel"),RZt.forEach(t),Tkr=r(IWe," (DistilBERT model)"),IWe.forEach(t),Mkr=i(D),H3=n(D,"LI",{});var NWe=s(H3);Swe=n(NWe,"STRONG",{});var PZt=s(Swe);Ekr=r(PZt,"dpr"),PZt.forEach(t),Ckr=r(NWe," \u2014 "),Tee=n(NWe,"A",{href:!0});var BZt=s(Tee);wkr=r(BZt,"TFDPRQuestionEncoder"),BZt.forEach(t),Akr=r(NWe," (DPR model)"),NWe.forEach(t),Lkr=i(D),J3=n(D,"LI",{});var qWe=s(J3);Rwe=n(qWe,"STRONG",{});var IZt=s(Rwe);ykr=r(IZt,"electra"),IZt.forEach(t),xkr=r(qWe," \u2014 "),Mee=n(qWe,"A",{href:!0});var NZt=s(Mee);$kr=r(NZt,"TFElectraModel"),NZt.forEach(t),kkr=r(qWe," (ELECTRA model)"),qWe.forEach(t),Skr=i(D),Y3=n(D,"LI",{});var jWe=s(Y3);Pwe=n(jWe,"STRONG",{});var qZt=s(Pwe);Rkr=r(qZt,"flaubert"),qZt.forEach(t),Pkr=r(jWe," \u2014 "),Eee=n(jWe,"A",{href:!0});var jZt=s(Eee);Bkr=r(jZt,"TFFlaubertModel"),jZt.forEach(t),Ikr=r(jWe," (FlauBERT model)"),jWe.forEach(t),Nkr=i(D),Fl=n(D,"LI",{});var JB=s(Fl);Bwe=n(JB,"STRONG",{});var DZt=s(Bwe);qkr=r(DZt,"funnel"),DZt.forEach(t),jkr=r(JB," \u2014 "),Cee=n(JB,"A",{href:!0});var GZt=s(Cee);Dkr=r(GZt,"TFFunnelModel"),GZt.forEach(t),Gkr=r(JB," or "),wee=n(JB,"A",{href:!0});var OZt=s(wee);Okr=r(OZt,"TFFunnelBaseModel"),OZt.forEach(t),Vkr=r(JB," (Funnel Transformer model)"),JB.forEach(t),Xkr=i(D),K3=n(D,"LI",{});var DWe=s(K3);Iwe=n(DWe,"STRONG",{});var VZt=s(Iwe);zkr=r(VZt,"gpt2"),VZt.forEach(t),Qkr=r(DWe," \u2014 "),Aee=n(DWe,"A",{href:!0});var XZt=s(Aee);Wkr=r(XZt,"TFGPT2Model"),XZt.forEach(t),Ukr=r(DWe," (OpenAI GPT-2 model)"),DWe.forEach(t),Hkr=i(D),Z3=n(D,"LI",{});var GWe=s(Z3);Nwe=n(GWe,"STRONG",{});var zZt=s(Nwe);Jkr=r(zZt,"gptj"),zZt.forEach(t),Ykr=r(GWe," \u2014 "),Lee=n(GWe,"A",{href:!0});var QZt=s(Lee);Kkr=r(QZt,"TFGPTJModel"),QZt.forEach(t),Zkr=r(GWe," (GPT-J model)"),GWe.forEach(t),eSr=i(D),e5=n(D,"LI",{});var OWe=s(e5);qwe=n(OWe,"STRONG",{});var WZt=s(qwe);oSr=r(WZt,"groupvit"),WZt.forEach(t),rSr=r(OWe," \u2014 "),yee=n(OWe,"A",{href:!0});var UZt=s(yee);tSr=r(UZt,"TFGroupViTModel"),UZt.forEach(t),aSr=r(OWe," (GroupViT model)"),OWe.forEach(t),nSr=i(D),o5=n(D,"LI",{});var VWe=s(o5);jwe=n(VWe,"STRONG",{});var HZt=s(jwe);sSr=r(HZt,"hubert"),HZt.forEach(t),lSr=r(VWe," \u2014 "),xee=n(VWe,"A",{href:!0});var JZt=s(xee);iSr=r(JZt,"TFHubertModel"),JZt.forEach(t),dSr=r(VWe," (Hubert model)"),VWe.forEach(t),cSr=i(D),r5=n(D,"LI",{});var XWe=s(r5);Dwe=n(XWe,"STRONG",{});var YZt=s(Dwe);mSr=r(YZt,"layoutlm"),YZt.forEach(t),fSr=r(XWe," \u2014 "),$ee=n(XWe,"A",{href:!0});var KZt=s($ee);gSr=r(KZt,"TFLayoutLMModel"),KZt.forEach(t),hSr=r(XWe," (LayoutLM model)"),XWe.forEach(t),uSr=i(D),t5=n(D,"LI",{});var zWe=s(t5);Gwe=n(zWe,"STRONG",{});var ZZt=s(Gwe);pSr=r(ZZt,"layoutlmv3"),ZZt.forEach(t),_Sr=r(zWe," \u2014 "),kee=n(zWe,"A",{href:!0});var eea=s(kee);bSr=r(eea,"TFLayoutLMv3Model"),eea.forEach(t),vSr=r(zWe," (LayoutLMv3 model)"),zWe.forEach(t),FSr=i(D),a5=n(D,"LI",{});var QWe=s(a5);Owe=n(QWe,"STRONG",{});var oea=s(Owe);TSr=r(oea,"led"),oea.forEach(t),MSr=r(QWe," \u2014 "),See=n(QWe,"A",{href:!0});var rea=s(See);ESr=r(rea,"TFLEDModel"),rea.forEach(t),CSr=r(QWe," (LED model)"),QWe.forEach(t),wSr=i(D),n5=n(D,"LI",{});var WWe=s(n5);Vwe=n(WWe,"STRONG",{});var tea=s(Vwe);ASr=r(tea,"longformer"),tea.forEach(t),LSr=r(WWe," \u2014 "),Ree=n(WWe,"A",{href:!0});var aea=s(Ree);ySr=r(aea,"TFLongformerModel"),aea.forEach(t),xSr=r(WWe," (Longformer model)"),WWe.forEach(t),$Sr=i(D),s5=n(D,"LI",{});var UWe=s(s5);Xwe=n(UWe,"STRONG",{});var nea=s(Xwe);kSr=r(nea,"lxmert"),nea.forEach(t),SSr=r(UWe," \u2014 "),Pee=n(UWe,"A",{href:!0});var sea=s(Pee);RSr=r(sea,"TFLxmertModel"),sea.forEach(t),PSr=r(UWe," (LXMERT model)"),UWe.forEach(t),BSr=i(D),l5=n(D,"LI",{});var HWe=s(l5);zwe=n(HWe,"STRONG",{});var lea=s(zwe);ISr=r(lea,"marian"),lea.forEach(t),NSr=r(HWe," \u2014 "),Bee=n(HWe,"A",{href:!0});var iea=s(Bee);qSr=r(iea,"TFMarianModel"),iea.forEach(t),jSr=r(HWe," (Marian model)"),HWe.forEach(t),DSr=i(D),i5=n(D,"LI",{});var JWe=s(i5);Qwe=n(JWe,"STRONG",{});var dea=s(Qwe);GSr=r(dea,"mbart"),dea.forEach(t),OSr=r(JWe," \u2014 "),Iee=n(JWe,"A",{href:!0});var cea=s(Iee);VSr=r(cea,"TFMBartModel"),cea.forEach(t),XSr=r(JWe," (mBART model)"),JWe.forEach(t),zSr=i(D),d5=n(D,"LI",{});var YWe=s(d5);Wwe=n(YWe,"STRONG",{});var mea=s(Wwe);QSr=r(mea,"mobilebert"),mea.forEach(t),WSr=r(YWe," \u2014 "),Nee=n(YWe,"A",{href:!0});var fea=s(Nee);USr=r(fea,"TFMobileBertModel"),fea.forEach(t),HSr=r(YWe," (MobileBERT model)"),YWe.forEach(t),JSr=i(D),c5=n(D,"LI",{});var KWe=s(c5);Uwe=n(KWe,"STRONG",{});var gea=s(Uwe);YSr=r(gea,"mobilevit"),gea.forEach(t),KSr=r(KWe," \u2014 "),qee=n(KWe,"A",{href:!0});var hea=s(qee);ZSr=r(hea,"TFMobileViTModel"),hea.forEach(t),eRr=r(KWe," (MobileViT model)"),KWe.forEach(t),oRr=i(D),m5=n(D,"LI",{});var ZWe=s(m5);Hwe=n(ZWe,"STRONG",{});var uea=s(Hwe);rRr=r(uea,"mpnet"),uea.forEach(t),tRr=r(ZWe," \u2014 "),jee=n(ZWe,"A",{href:!0});var pea=s(jee);aRr=r(pea,"TFMPNetModel"),pea.forEach(t),nRr=r(ZWe," (MPNet model)"),ZWe.forEach(t),sRr=i(D),f5=n(D,"LI",{});var eUe=s(f5);Jwe=n(eUe,"STRONG",{});var _ea=s(Jwe);lRr=r(_ea,"mt5"),_ea.forEach(t),iRr=r(eUe," \u2014 "),Dee=n(eUe,"A",{href:!0});var bea=s(Dee);dRr=r(bea,"TFMT5Model"),bea.forEach(t),cRr=r(eUe," (MT5 model)"),eUe.forEach(t),mRr=i(D),g5=n(D,"LI",{});var oUe=s(g5);Ywe=n(oUe,"STRONG",{});var vea=s(Ywe);fRr=r(vea,"openai-gpt"),vea.forEach(t),gRr=r(oUe," \u2014 "),Gee=n(oUe,"A",{href:!0});var Fea=s(Gee);hRr=r(Fea,"TFOpenAIGPTModel"),Fea.forEach(t),uRr=r(oUe," (OpenAI GPT model)"),oUe.forEach(t),pRr=i(D),h5=n(D,"LI",{});var rUe=s(h5);Kwe=n(rUe,"STRONG",{});var Tea=s(Kwe);_Rr=r(Tea,"opt"),Tea.forEach(t),bRr=r(rUe," \u2014 "),Oee=n(rUe,"A",{href:!0});var Mea=s(Oee);vRr=r(Mea,"TFOPTModel"),Mea.forEach(t),FRr=r(rUe," (OPT model)"),rUe.forEach(t),TRr=i(D),u5=n(D,"LI",{});var tUe=s(u5);Zwe=n(tUe,"STRONG",{});var Eea=s(Zwe);MRr=r(Eea,"pegasus"),Eea.forEach(t),ERr=r(tUe," \u2014 "),Vee=n(tUe,"A",{href:!0});var Cea=s(Vee);CRr=r(Cea,"TFPegasusModel"),Cea.forEach(t),wRr=r(tUe," (Pegasus model)"),tUe.forEach(t),ARr=i(D),p5=n(D,"LI",{});var aUe=s(p5);eAe=n(aUe,"STRONG",{});var wea=s(eAe);LRr=r(wea,"regnet"),wea.forEach(t),yRr=r(aUe," \u2014 "),Xee=n(aUe,"A",{href:!0});var Aea=s(Xee);xRr=r(Aea,"TFRegNetModel"),Aea.forEach(t),$Rr=r(aUe," (RegNet model)"),aUe.forEach(t),kRr=i(D),_5=n(D,"LI",{});var nUe=s(_5);oAe=n(nUe,"STRONG",{});var Lea=s(oAe);SRr=r(Lea,"rembert"),Lea.forEach(t),RRr=r(nUe," \u2014 "),zee=n(nUe,"A",{href:!0});var yea=s(zee);PRr=r(yea,"TFRemBertModel"),yea.forEach(t),BRr=r(nUe," (RemBERT model)"),nUe.forEach(t),IRr=i(D),b5=n(D,"LI",{});var sUe=s(b5);rAe=n(sUe,"STRONG",{});var xea=s(rAe);NRr=r(xea,"resnet"),xea.forEach(t),qRr=r(sUe," \u2014 "),Qee=n(sUe,"A",{href:!0});var $ea=s(Qee);jRr=r($ea,"TFResNetModel"),$ea.forEach(t),DRr=r(sUe," (ResNet model)"),sUe.forEach(t),GRr=i(D),v5=n(D,"LI",{});var lUe=s(v5);tAe=n(lUe,"STRONG",{});var kea=s(tAe);ORr=r(kea,"roberta"),kea.forEach(t),VRr=r(lUe," \u2014 "),Wee=n(lUe,"A",{href:!0});var Sea=s(Wee);XRr=r(Sea,"TFRobertaModel"),Sea.forEach(t),zRr=r(lUe," (RoBERTa model)"),lUe.forEach(t),QRr=i(D),F5=n(D,"LI",{});var iUe=s(F5);aAe=n(iUe,"STRONG",{});var Rea=s(aAe);WRr=r(Rea,"roformer"),Rea.forEach(t),URr=r(iUe," \u2014 "),Uee=n(iUe,"A",{href:!0});var Pea=s(Uee);HRr=r(Pea,"TFRoFormerModel"),Pea.forEach(t),JRr=r(iUe," (RoFormer model)"),iUe.forEach(t),YRr=i(D),T5=n(D,"LI",{});var dUe=s(T5);nAe=n(dUe,"STRONG",{});var Bea=s(nAe);KRr=r(Bea,"segformer"),Bea.forEach(t),ZRr=r(dUe," \u2014 "),Hee=n(dUe,"A",{href:!0});var Iea=s(Hee);ePr=r(Iea,"TFSegformerModel"),Iea.forEach(t),oPr=r(dUe," (SegFormer model)"),dUe.forEach(t),rPr=i(D),M5=n(D,"LI",{});var cUe=s(M5);sAe=n(cUe,"STRONG",{});var Nea=s(sAe);tPr=r(Nea,"speech_to_text"),Nea.forEach(t),aPr=r(cUe," \u2014 "),Jee=n(cUe,"A",{href:!0});var qea=s(Jee);nPr=r(qea,"TFSpeech2TextModel"),qea.forEach(t),sPr=r(cUe," (Speech2Text model)"),cUe.forEach(t),lPr=i(D),E5=n(D,"LI",{});var mUe=s(E5);lAe=n(mUe,"STRONG",{});var jea=s(lAe);iPr=r(jea,"swin"),jea.forEach(t),dPr=r(mUe," \u2014 "),Yee=n(mUe,"A",{href:!0});var Dea=s(Yee);cPr=r(Dea,"TFSwinModel"),Dea.forEach(t),mPr=r(mUe," (Swin Transformer model)"),mUe.forEach(t),fPr=i(D),C5=n(D,"LI",{});var fUe=s(C5);iAe=n(fUe,"STRONG",{});var Gea=s(iAe);gPr=r(Gea,"t5"),Gea.forEach(t),hPr=r(fUe," \u2014 "),Kee=n(fUe,"A",{href:!0});var Oea=s(Kee);uPr=r(Oea,"TFT5Model"),Oea.forEach(t),pPr=r(fUe," (T5 model)"),fUe.forEach(t),_Pr=i(D),w5=n(D,"LI",{});var gUe=s(w5);dAe=n(gUe,"STRONG",{});var Vea=s(dAe);bPr=r(Vea,"tapas"),Vea.forEach(t),vPr=r(gUe," \u2014 "),Zee=n(gUe,"A",{href:!0});var Xea=s(Zee);FPr=r(Xea,"TFTapasModel"),Xea.forEach(t),TPr=r(gUe," (TAPAS model)"),gUe.forEach(t),MPr=i(D),A5=n(D,"LI",{});var hUe=s(A5);cAe=n(hUe,"STRONG",{});var zea=s(cAe);EPr=r(zea,"transfo-xl"),zea.forEach(t),CPr=r(hUe," \u2014 "),eoe=n(hUe,"A",{href:!0});var Qea=s(eoe);wPr=r(Qea,"TFTransfoXLModel"),Qea.forEach(t),APr=r(hUe," (Transformer-XL model)"),hUe.forEach(t),LPr=i(D),L5=n(D,"LI",{});var uUe=s(L5);mAe=n(uUe,"STRONG",{});var Wea=s(mAe);yPr=r(Wea,"vit"),Wea.forEach(t),xPr=r(uUe," \u2014 "),ooe=n(uUe,"A",{href:!0});var Uea=s(ooe);$Pr=r(Uea,"TFViTModel"),Uea.forEach(t),kPr=r(uUe," (ViT model)"),uUe.forEach(t),SPr=i(D),y5=n(D,"LI",{});var pUe=s(y5);fAe=n(pUe,"STRONG",{});var Hea=s(fAe);RPr=r(Hea,"vit_mae"),Hea.forEach(t),PPr=r(pUe," \u2014 "),roe=n(pUe,"A",{href:!0});var Jea=s(roe);BPr=r(Jea,"TFViTMAEModel"),Jea.forEach(t),IPr=r(pUe," (ViTMAE model)"),pUe.forEach(t),NPr=i(D),x5=n(D,"LI",{});var _Ue=s(x5);gAe=n(_Ue,"STRONG",{});var Yea=s(gAe);qPr=r(Yea,"wav2vec2"),Yea.forEach(t),jPr=r(_Ue," \u2014 "),toe=n(_Ue,"A",{href:!0});var Kea=s(toe);DPr=r(Kea,"TFWav2Vec2Model"),Kea.forEach(t),GPr=r(_Ue," (Wav2Vec2 model)"),_Ue.forEach(t),OPr=i(D),$5=n(D,"LI",{});var bUe=s($5);hAe=n(bUe,"STRONG",{});var Zea=s(hAe);VPr=r(Zea,"xglm"),Zea.forEach(t),XPr=r(bUe," \u2014 "),aoe=n(bUe,"A",{href:!0});var eoa=s(aoe);zPr=r(eoa,"TFXGLMModel"),eoa.forEach(t),QPr=r(bUe," (XGLM model)"),bUe.forEach(t),WPr=i(D),k5=n(D,"LI",{});var vUe=s(k5);uAe=n(vUe,"STRONG",{});var ooa=s(uAe);UPr=r(ooa,"xlm"),ooa.forEach(t),HPr=r(vUe," \u2014 "),noe=n(vUe,"A",{href:!0});var roa=s(noe);JPr=r(roa,"TFXLMModel"),roa.forEach(t),YPr=r(vUe," (XLM model)"),vUe.forEach(t),KPr=i(D),S5=n(D,"LI",{});var FUe=s(S5);pAe=n(FUe,"STRONG",{});var toa=s(pAe);ZPr=r(toa,"xlm-roberta"),toa.forEach(t),eBr=r(FUe," \u2014 "),soe=n(FUe,"A",{href:!0});var aoa=s(soe);oBr=r(aoa,"TFXLMRobertaModel"),aoa.forEach(t),rBr=r(FUe," (XLM-RoBERTa model)"),FUe.forEach(t),tBr=i(D),R5=n(D,"LI",{});var TUe=s(R5);_Ae=n(TUe,"STRONG",{});var noa=s(_Ae);aBr=r(noa,"xlnet"),noa.forEach(t),nBr=r(TUe," \u2014 "),loe=n(TUe,"A",{href:!0});var soa=s(loe);sBr=r(soa,"TFXLNetModel"),soa.forEach(t),lBr=r(TUe," (XLNet model)"),TUe.forEach(t),D.forEach(t),iBr=i(ri),T(P5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),zeo=i(m),zc=n(m,"H2",{class:!0});var sto=s(zc);B5=n(sto,"A",{id:!0,class:!0,href:!0});var loa=s(B5);bAe=n(loa,"SPAN",{});var ioa=s(bAe);T(Kk.$$.fragment,ioa),ioa.forEach(t),loa.forEach(t),dBr=i(sto),vAe=n(sto,"SPAN",{});var doa=s(vAe);cBr=r(doa,"TFAutoModelForPreTraining"),doa.forEach(t),sto.forEach(t),Qeo=i(m),lr=n(m,"DIV",{class:!0});var ti=s(lr);T(Zk.$$.fragment,ti),mBr=i(ti),Qc=n(ti,"P",{});var Hie=s(Qc);fBr=r(Hie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ioe=n(Hie,"A",{href:!0});var coa=s(ioe);gBr=r(coa,"from_pretrained()"),coa.forEach(t),hBr=r(Hie," class method or the "),doe=n(Hie,"A",{href:!0});var moa=s(doe);uBr=r(moa,"from_config()"),moa.forEach(t),pBr=r(Hie,` class
method.`),Hie.forEach(t),_Br=i(ti),eS=n(ti,"P",{});var lto=s(eS);bBr=r(lto,"This class cannot be instantiated directly using "),FAe=n(lto,"CODE",{});var foa=s(FAe);vBr=r(foa,"__init__()"),foa.forEach(t),FBr=r(lto," (throws an error)."),lto.forEach(t),TBr=i(ti),zt=n(ti,"DIV",{class:!0});var U8=s(zt);T(oS.$$.fragment,U8),MBr=i(U8),TAe=n(U8,"P",{});var goa=s(TAe);EBr=r(goa,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),goa.forEach(t),CBr=i(U8),Wc=n(U8,"P",{});var Jie=s(Wc);wBr=r(Jie,`Note:
Loading a model from its configuration file does `),MAe=n(Jie,"STRONG",{});var hoa=s(MAe);ABr=r(hoa,"not"),hoa.forEach(t),LBr=r(Jie,` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=n(Jie,"A",{href:!0});var uoa=s(coe);yBr=r(uoa,"from_pretrained()"),uoa.forEach(t),xBr=r(Jie," to load the model weights."),Jie.forEach(t),$Br=i(U8),T(I5.$$.fragment,U8),U8.forEach(t),kBr=i(ti),Nr=n(ti,"DIV",{class:!0});var ai=s(Nr);T(rS.$$.fragment,ai),SBr=i(ai),EAe=n(ai,"P",{});var poa=s(EAe);RBr=r(poa,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),poa.forEach(t),PBr=i(ai),An=n(ai,"P",{});var H8=s(An);BBr=r(H8,"The model class to instantiate is selected based on the "),CAe=n(H8,"CODE",{});var _oa=s(CAe);IBr=r(_oa,"model_type"),_oa.forEach(t),NBr=r(H8,` property of the config object (either
passed as an argument or loaded from `),wAe=n(H8,"CODE",{});var boa=s(wAe);qBr=r(boa,"pretrained_model_name_or_path"),boa.forEach(t),jBr=r(H8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AAe=n(H8,"CODE",{});var voa=s(AAe);DBr=r(voa,"pretrained_model_name_or_path"),voa.forEach(t),GBr=r(H8,":"),H8.forEach(t),OBr=i(ai),se=n(ai,"UL",{});var ie=s(se);N5=n(ie,"LI",{});var MUe=s(N5);LAe=n(MUe,"STRONG",{});var Foa=s(LAe);VBr=r(Foa,"albert"),Foa.forEach(t),XBr=r(MUe," \u2014 "),moe=n(MUe,"A",{href:!0});var Toa=s(moe);zBr=r(Toa,"TFAlbertForPreTraining"),Toa.forEach(t),QBr=r(MUe," (ALBERT model)"),MUe.forEach(t),WBr=i(ie),q5=n(ie,"LI",{});var EUe=s(q5);yAe=n(EUe,"STRONG",{});var Moa=s(yAe);UBr=r(Moa,"bart"),Moa.forEach(t),HBr=r(EUe," \u2014 "),foe=n(EUe,"A",{href:!0});var Eoa=s(foe);JBr=r(Eoa,"TFBartForConditionalGeneration"),Eoa.forEach(t),YBr=r(EUe," (BART model)"),EUe.forEach(t),KBr=i(ie),j5=n(ie,"LI",{});var CUe=s(j5);xAe=n(CUe,"STRONG",{});var Coa=s(xAe);ZBr=r(Coa,"bert"),Coa.forEach(t),eIr=r(CUe," \u2014 "),goe=n(CUe,"A",{href:!0});var woa=s(goe);oIr=r(woa,"TFBertForPreTraining"),woa.forEach(t),rIr=r(CUe," (BERT model)"),CUe.forEach(t),tIr=i(ie),D5=n(ie,"LI",{});var wUe=s(D5);$Ae=n(wUe,"STRONG",{});var Aoa=s($Ae);aIr=r(Aoa,"camembert"),Aoa.forEach(t),nIr=r(wUe," \u2014 "),hoe=n(wUe,"A",{href:!0});var Loa=s(hoe);sIr=r(Loa,"TFCamembertForMaskedLM"),Loa.forEach(t),lIr=r(wUe," (CamemBERT model)"),wUe.forEach(t),iIr=i(ie),G5=n(ie,"LI",{});var AUe=s(G5);kAe=n(AUe,"STRONG",{});var yoa=s(kAe);dIr=r(yoa,"ctrl"),yoa.forEach(t),cIr=r(AUe," \u2014 "),uoe=n(AUe,"A",{href:!0});var xoa=s(uoe);mIr=r(xoa,"TFCTRLLMHeadModel"),xoa.forEach(t),fIr=r(AUe," (CTRL model)"),AUe.forEach(t),gIr=i(ie),O5=n(ie,"LI",{});var LUe=s(O5);SAe=n(LUe,"STRONG",{});var $oa=s(SAe);hIr=r($oa,"distilbert"),$oa.forEach(t),uIr=r(LUe," \u2014 "),poe=n(LUe,"A",{href:!0});var koa=s(poe);pIr=r(koa,"TFDistilBertForMaskedLM"),koa.forEach(t),_Ir=r(LUe," (DistilBERT model)"),LUe.forEach(t),bIr=i(ie),V5=n(ie,"LI",{});var yUe=s(V5);RAe=n(yUe,"STRONG",{});var Soa=s(RAe);vIr=r(Soa,"electra"),Soa.forEach(t),FIr=r(yUe," \u2014 "),_oe=n(yUe,"A",{href:!0});var Roa=s(_oe);TIr=r(Roa,"TFElectraForPreTraining"),Roa.forEach(t),MIr=r(yUe," (ELECTRA model)"),yUe.forEach(t),EIr=i(ie),X5=n(ie,"LI",{});var xUe=s(X5);PAe=n(xUe,"STRONG",{});var Poa=s(PAe);CIr=r(Poa,"flaubert"),Poa.forEach(t),wIr=r(xUe," \u2014 "),boe=n(xUe,"A",{href:!0});var Boa=s(boe);AIr=r(Boa,"TFFlaubertWithLMHeadModel"),Boa.forEach(t),LIr=r(xUe," (FlauBERT model)"),xUe.forEach(t),yIr=i(ie),z5=n(ie,"LI",{});var $Ue=s(z5);BAe=n($Ue,"STRONG",{});var Ioa=s(BAe);xIr=r(Ioa,"funnel"),Ioa.forEach(t),$Ir=r($Ue," \u2014 "),voe=n($Ue,"A",{href:!0});var Noa=s(voe);kIr=r(Noa,"TFFunnelForPreTraining"),Noa.forEach(t),SIr=r($Ue," (Funnel Transformer model)"),$Ue.forEach(t),RIr=i(ie),Q5=n(ie,"LI",{});var kUe=s(Q5);IAe=n(kUe,"STRONG",{});var qoa=s(IAe);PIr=r(qoa,"gpt2"),qoa.forEach(t),BIr=r(kUe," \u2014 "),Foe=n(kUe,"A",{href:!0});var joa=s(Foe);IIr=r(joa,"TFGPT2LMHeadModel"),joa.forEach(t),NIr=r(kUe," (OpenAI GPT-2 model)"),kUe.forEach(t),qIr=i(ie),W5=n(ie,"LI",{});var SUe=s(W5);NAe=n(SUe,"STRONG",{});var Doa=s(NAe);jIr=r(Doa,"layoutlm"),Doa.forEach(t),DIr=r(SUe," \u2014 "),Toe=n(SUe,"A",{href:!0});var Goa=s(Toe);GIr=r(Goa,"TFLayoutLMForMaskedLM"),Goa.forEach(t),OIr=r(SUe," (LayoutLM model)"),SUe.forEach(t),VIr=i(ie),U5=n(ie,"LI",{});var RUe=s(U5);qAe=n(RUe,"STRONG",{});var Ooa=s(qAe);XIr=r(Ooa,"lxmert"),Ooa.forEach(t),zIr=r(RUe," \u2014 "),Moe=n(RUe,"A",{href:!0});var Voa=s(Moe);QIr=r(Voa,"TFLxmertForPreTraining"),Voa.forEach(t),WIr=r(RUe," (LXMERT model)"),RUe.forEach(t),UIr=i(ie),H5=n(ie,"LI",{});var PUe=s(H5);jAe=n(PUe,"STRONG",{});var Xoa=s(jAe);HIr=r(Xoa,"mobilebert"),Xoa.forEach(t),JIr=r(PUe," \u2014 "),Eoe=n(PUe,"A",{href:!0});var zoa=s(Eoe);YIr=r(zoa,"TFMobileBertForPreTraining"),zoa.forEach(t),KIr=r(PUe," (MobileBERT model)"),PUe.forEach(t),ZIr=i(ie),J5=n(ie,"LI",{});var BUe=s(J5);DAe=n(BUe,"STRONG",{});var Qoa=s(DAe);eNr=r(Qoa,"mpnet"),Qoa.forEach(t),oNr=r(BUe," \u2014 "),Coe=n(BUe,"A",{href:!0});var Woa=s(Coe);rNr=r(Woa,"TFMPNetForMaskedLM"),Woa.forEach(t),tNr=r(BUe," (MPNet model)"),BUe.forEach(t),aNr=i(ie),Y5=n(ie,"LI",{});var IUe=s(Y5);GAe=n(IUe,"STRONG",{});var Uoa=s(GAe);nNr=r(Uoa,"openai-gpt"),Uoa.forEach(t),sNr=r(IUe," \u2014 "),woe=n(IUe,"A",{href:!0});var Hoa=s(woe);lNr=r(Hoa,"TFOpenAIGPTLMHeadModel"),Hoa.forEach(t),iNr=r(IUe," (OpenAI GPT model)"),IUe.forEach(t),dNr=i(ie),K5=n(ie,"LI",{});var NUe=s(K5);OAe=n(NUe,"STRONG",{});var Joa=s(OAe);cNr=r(Joa,"roberta"),Joa.forEach(t),mNr=r(NUe," \u2014 "),Aoe=n(NUe,"A",{href:!0});var Yoa=s(Aoe);fNr=r(Yoa,"TFRobertaForMaskedLM"),Yoa.forEach(t),gNr=r(NUe," (RoBERTa model)"),NUe.forEach(t),hNr=i(ie),Z5=n(ie,"LI",{});var qUe=s(Z5);VAe=n(qUe,"STRONG",{});var Koa=s(VAe);uNr=r(Koa,"t5"),Koa.forEach(t),pNr=r(qUe," \u2014 "),Loe=n(qUe,"A",{href:!0});var Zoa=s(Loe);_Nr=r(Zoa,"TFT5ForConditionalGeneration"),Zoa.forEach(t),bNr=r(qUe," (T5 model)"),qUe.forEach(t),vNr=i(ie),e0=n(ie,"LI",{});var jUe=s(e0);XAe=n(jUe,"STRONG",{});var era=s(XAe);FNr=r(era,"tapas"),era.forEach(t),TNr=r(jUe," \u2014 "),yoe=n(jUe,"A",{href:!0});var ora=s(yoe);MNr=r(ora,"TFTapasForMaskedLM"),ora.forEach(t),ENr=r(jUe," (TAPAS model)"),jUe.forEach(t),CNr=i(ie),o0=n(ie,"LI",{});var DUe=s(o0);zAe=n(DUe,"STRONG",{});var rra=s(zAe);wNr=r(rra,"transfo-xl"),rra.forEach(t),ANr=r(DUe," \u2014 "),xoe=n(DUe,"A",{href:!0});var tra=s(xoe);LNr=r(tra,"TFTransfoXLLMHeadModel"),tra.forEach(t),yNr=r(DUe," (Transformer-XL model)"),DUe.forEach(t),xNr=i(ie),r0=n(ie,"LI",{});var GUe=s(r0);QAe=n(GUe,"STRONG",{});var ara=s(QAe);$Nr=r(ara,"vit_mae"),ara.forEach(t),kNr=r(GUe," \u2014 "),$oe=n(GUe,"A",{href:!0});var nra=s($oe);SNr=r(nra,"TFViTMAEForPreTraining"),nra.forEach(t),RNr=r(GUe," (ViTMAE model)"),GUe.forEach(t),PNr=i(ie),t0=n(ie,"LI",{});var OUe=s(t0);WAe=n(OUe,"STRONG",{});var sra=s(WAe);BNr=r(sra,"xlm"),sra.forEach(t),INr=r(OUe," \u2014 "),koe=n(OUe,"A",{href:!0});var lra=s(koe);NNr=r(lra,"TFXLMWithLMHeadModel"),lra.forEach(t),qNr=r(OUe," (XLM model)"),OUe.forEach(t),jNr=i(ie),a0=n(ie,"LI",{});var VUe=s(a0);UAe=n(VUe,"STRONG",{});var ira=s(UAe);DNr=r(ira,"xlm-roberta"),ira.forEach(t),GNr=r(VUe," \u2014 "),Soe=n(VUe,"A",{href:!0});var dra=s(Soe);ONr=r(dra,"TFXLMRobertaForMaskedLM"),dra.forEach(t),VNr=r(VUe," (XLM-RoBERTa model)"),VUe.forEach(t),XNr=i(ie),n0=n(ie,"LI",{});var XUe=s(n0);HAe=n(XUe,"STRONG",{});var cra=s(HAe);zNr=r(cra,"xlnet"),cra.forEach(t),QNr=r(XUe," \u2014 "),Roe=n(XUe,"A",{href:!0});var mra=s(Roe);WNr=r(mra,"TFXLNetLMHeadModel"),mra.forEach(t),UNr=r(XUe," (XLNet model)"),XUe.forEach(t),ie.forEach(t),HNr=i(ai),T(s0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Weo=i(m),Uc=n(m,"H2",{class:!0});var ito=s(Uc);l0=n(ito,"A",{id:!0,class:!0,href:!0});var fra=s(l0);JAe=n(fra,"SPAN",{});var gra=s(JAe);T(tS.$$.fragment,gra),gra.forEach(t),fra.forEach(t),JNr=i(ito),YAe=n(ito,"SPAN",{});var hra=s(YAe);YNr=r(hra,"TFAutoModelForCausalLM"),hra.forEach(t),ito.forEach(t),Ueo=i(m),ir=n(m,"DIV",{class:!0});var ni=s(ir);T(aS.$$.fragment,ni),KNr=i(ni),Hc=n(ni,"P",{});var Yie=s(Hc);ZNr=r(Yie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Poe=n(Yie,"A",{href:!0});var ura=s(Poe);eqr=r(ura,"from_pretrained()"),ura.forEach(t),oqr=r(Yie," class method or the "),Boe=n(Yie,"A",{href:!0});var pra=s(Boe);rqr=r(pra,"from_config()"),pra.forEach(t),tqr=r(Yie,` class
method.`),Yie.forEach(t),aqr=i(ni),nS=n(ni,"P",{});var dto=s(nS);nqr=r(dto,"This class cannot be instantiated directly using "),KAe=n(dto,"CODE",{});var _ra=s(KAe);sqr=r(_ra,"__init__()"),_ra.forEach(t),lqr=r(dto," (throws an error)."),dto.forEach(t),iqr=i(ni),Qt=n(ni,"DIV",{class:!0});var J8=s(Qt);T(sS.$$.fragment,J8),dqr=i(J8),ZAe=n(J8,"P",{});var bra=s(ZAe);cqr=r(bra,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bra.forEach(t),mqr=i(J8),Jc=n(J8,"P",{});var Kie=s(Jc);fqr=r(Kie,`Note:
Loading a model from its configuration file does `),e6e=n(Kie,"STRONG",{});var vra=s(e6e);gqr=r(vra,"not"),vra.forEach(t),hqr=r(Kie,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ioe=n(Kie,"A",{href:!0});var Fra=s(Ioe);uqr=r(Fra,"from_pretrained()"),Fra.forEach(t),pqr=r(Kie," to load the model weights."),Kie.forEach(t),_qr=i(J8),T(i0.$$.fragment,J8),J8.forEach(t),bqr=i(ni),qr=n(ni,"DIV",{class:!0});var si=s(qr);T(lS.$$.fragment,si),vqr=i(si),o6e=n(si,"P",{});var Tra=s(o6e);Fqr=r(Tra,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tra.forEach(t),Tqr=i(si),Ln=n(si,"P",{});var Y8=s(Ln);Mqr=r(Y8,"The model class to instantiate is selected based on the "),r6e=n(Y8,"CODE",{});var Mra=s(r6e);Eqr=r(Mra,"model_type"),Mra.forEach(t),Cqr=r(Y8,` property of the config object (either
passed as an argument or loaded from `),t6e=n(Y8,"CODE",{});var Era=s(t6e);wqr=r(Era,"pretrained_model_name_or_path"),Era.forEach(t),Aqr=r(Y8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=n(Y8,"CODE",{});var Cra=s(a6e);Lqr=r(Cra,"pretrained_model_name_or_path"),Cra.forEach(t),yqr=r(Y8,":"),Y8.forEach(t),xqr=i(si),Me=n(si,"UL",{});var Ce=s(Me);d0=n(Ce,"LI",{});var zUe=s(d0);n6e=n(zUe,"STRONG",{});var wra=s(n6e);$qr=r(wra,"bert"),wra.forEach(t),kqr=r(zUe," \u2014 "),Noe=n(zUe,"A",{href:!0});var Ara=s(Noe);Sqr=r(Ara,"TFBertLMHeadModel"),Ara.forEach(t),Rqr=r(zUe," (BERT model)"),zUe.forEach(t),Pqr=i(Ce),c0=n(Ce,"LI",{});var QUe=s(c0);s6e=n(QUe,"STRONG",{});var Lra=s(s6e);Bqr=r(Lra,"camembert"),Lra.forEach(t),Iqr=r(QUe," \u2014 "),qoe=n(QUe,"A",{href:!0});var yra=s(qoe);Nqr=r(yra,"TFCamembertForCausalLM"),yra.forEach(t),qqr=r(QUe," (CamemBERT model)"),QUe.forEach(t),jqr=i(Ce),m0=n(Ce,"LI",{});var WUe=s(m0);l6e=n(WUe,"STRONG",{});var xra=s(l6e);Dqr=r(xra,"ctrl"),xra.forEach(t),Gqr=r(WUe," \u2014 "),joe=n(WUe,"A",{href:!0});var $ra=s(joe);Oqr=r($ra,"TFCTRLLMHeadModel"),$ra.forEach(t),Vqr=r(WUe," (CTRL model)"),WUe.forEach(t),Xqr=i(Ce),f0=n(Ce,"LI",{});var UUe=s(f0);i6e=n(UUe,"STRONG",{});var kra=s(i6e);zqr=r(kra,"gpt2"),kra.forEach(t),Qqr=r(UUe," \u2014 "),Doe=n(UUe,"A",{href:!0});var Sra=s(Doe);Wqr=r(Sra,"TFGPT2LMHeadModel"),Sra.forEach(t),Uqr=r(UUe," (OpenAI GPT-2 model)"),UUe.forEach(t),Hqr=i(Ce),g0=n(Ce,"LI",{});var HUe=s(g0);d6e=n(HUe,"STRONG",{});var Rra=s(d6e);Jqr=r(Rra,"gptj"),Rra.forEach(t),Yqr=r(HUe," \u2014 "),Goe=n(HUe,"A",{href:!0});var Pra=s(Goe);Kqr=r(Pra,"TFGPTJForCausalLM"),Pra.forEach(t),Zqr=r(HUe," (GPT-J model)"),HUe.forEach(t),ejr=i(Ce),h0=n(Ce,"LI",{});var JUe=s(h0);c6e=n(JUe,"STRONG",{});var Bra=s(c6e);ojr=r(Bra,"openai-gpt"),Bra.forEach(t),rjr=r(JUe," \u2014 "),Ooe=n(JUe,"A",{href:!0});var Ira=s(Ooe);tjr=r(Ira,"TFOpenAIGPTLMHeadModel"),Ira.forEach(t),ajr=r(JUe," (OpenAI GPT model)"),JUe.forEach(t),njr=i(Ce),u0=n(Ce,"LI",{});var YUe=s(u0);m6e=n(YUe,"STRONG",{});var Nra=s(m6e);sjr=r(Nra,"opt"),Nra.forEach(t),ljr=r(YUe," \u2014 "),Voe=n(YUe,"A",{href:!0});var qra=s(Voe);ijr=r(qra,"TFOPTForCausalLM"),qra.forEach(t),djr=r(YUe," (OPT model)"),YUe.forEach(t),cjr=i(Ce),p0=n(Ce,"LI",{});var KUe=s(p0);f6e=n(KUe,"STRONG",{});var jra=s(f6e);mjr=r(jra,"rembert"),jra.forEach(t),fjr=r(KUe," \u2014 "),Xoe=n(KUe,"A",{href:!0});var Dra=s(Xoe);gjr=r(Dra,"TFRemBertForCausalLM"),Dra.forEach(t),hjr=r(KUe," (RemBERT model)"),KUe.forEach(t),ujr=i(Ce),_0=n(Ce,"LI",{});var ZUe=s(_0);g6e=n(ZUe,"STRONG",{});var Gra=s(g6e);pjr=r(Gra,"roberta"),Gra.forEach(t),_jr=r(ZUe," \u2014 "),zoe=n(ZUe,"A",{href:!0});var Ora=s(zoe);bjr=r(Ora,"TFRobertaForCausalLM"),Ora.forEach(t),vjr=r(ZUe," (RoBERTa model)"),ZUe.forEach(t),Fjr=i(Ce),b0=n(Ce,"LI",{});var eHe=s(b0);h6e=n(eHe,"STRONG",{});var Vra=s(h6e);Tjr=r(Vra,"roformer"),Vra.forEach(t),Mjr=r(eHe," \u2014 "),Qoe=n(eHe,"A",{href:!0});var Xra=s(Qoe);Ejr=r(Xra,"TFRoFormerForCausalLM"),Xra.forEach(t),Cjr=r(eHe," (RoFormer model)"),eHe.forEach(t),wjr=i(Ce),v0=n(Ce,"LI",{});var oHe=s(v0);u6e=n(oHe,"STRONG",{});var zra=s(u6e);Ajr=r(zra,"transfo-xl"),zra.forEach(t),Ljr=r(oHe," \u2014 "),Woe=n(oHe,"A",{href:!0});var Qra=s(Woe);yjr=r(Qra,"TFTransfoXLLMHeadModel"),Qra.forEach(t),xjr=r(oHe," (Transformer-XL model)"),oHe.forEach(t),$jr=i(Ce),F0=n(Ce,"LI",{});var rHe=s(F0);p6e=n(rHe,"STRONG",{});var Wra=s(p6e);kjr=r(Wra,"xglm"),Wra.forEach(t),Sjr=r(rHe," \u2014 "),Uoe=n(rHe,"A",{href:!0});var Ura=s(Uoe);Rjr=r(Ura,"TFXGLMForCausalLM"),Ura.forEach(t),Pjr=r(rHe," (XGLM model)"),rHe.forEach(t),Bjr=i(Ce),T0=n(Ce,"LI",{});var tHe=s(T0);_6e=n(tHe,"STRONG",{});var Hra=s(_6e);Ijr=r(Hra,"xlm"),Hra.forEach(t),Njr=r(tHe," \u2014 "),Hoe=n(tHe,"A",{href:!0});var Jra=s(Hoe);qjr=r(Jra,"TFXLMWithLMHeadModel"),Jra.forEach(t),jjr=r(tHe," (XLM model)"),tHe.forEach(t),Djr=i(Ce),M0=n(Ce,"LI",{});var aHe=s(M0);b6e=n(aHe,"STRONG",{});var Yra=s(b6e);Gjr=r(Yra,"xlnet"),Yra.forEach(t),Ojr=r(aHe," \u2014 "),Joe=n(aHe,"A",{href:!0});var Kra=s(Joe);Vjr=r(Kra,"TFXLNetLMHeadModel"),Kra.forEach(t),Xjr=r(aHe," (XLNet model)"),aHe.forEach(t),Ce.forEach(t),zjr=i(si),T(E0.$$.fragment,si),si.forEach(t),ni.forEach(t),Heo=i(m),Yc=n(m,"H2",{class:!0});var cto=s(Yc);C0=n(cto,"A",{id:!0,class:!0,href:!0});var Zra=s(C0);v6e=n(Zra,"SPAN",{});var eta=s(v6e);T(iS.$$.fragment,eta),eta.forEach(t),Zra.forEach(t),Qjr=i(cto),F6e=n(cto,"SPAN",{});var ota=s(F6e);Wjr=r(ota,"TFAutoModelForImageClassification"),ota.forEach(t),cto.forEach(t),Jeo=i(m),dr=n(m,"DIV",{class:!0});var li=s(dr);T(dS.$$.fragment,li),Ujr=i(li),Kc=n(li,"P",{});var Zie=s(Kc);Hjr=r(Zie,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Yoe=n(Zie,"A",{href:!0});var rta=s(Yoe);Jjr=r(rta,"from_pretrained()"),rta.forEach(t),Yjr=r(Zie," class method or the "),Koe=n(Zie,"A",{href:!0});var tta=s(Koe);Kjr=r(tta,"from_config()"),tta.forEach(t),Zjr=r(Zie,` class
method.`),Zie.forEach(t),eDr=i(li),cS=n(li,"P",{});var mto=s(cS);oDr=r(mto,"This class cannot be instantiated directly using "),T6e=n(mto,"CODE",{});var ata=s(T6e);rDr=r(ata,"__init__()"),ata.forEach(t),tDr=r(mto," (throws an error)."),mto.forEach(t),aDr=i(li),Wt=n(li,"DIV",{class:!0});var K8=s(Wt);T(mS.$$.fragment,K8),nDr=i(K8),M6e=n(K8,"P",{});var nta=s(M6e);sDr=r(nta,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nta.forEach(t),lDr=i(K8),Zc=n(K8,"P",{});var ede=s(Zc);iDr=r(ede,`Note:
Loading a model from its configuration file does `),E6e=n(ede,"STRONG",{});var sta=s(E6e);dDr=r(sta,"not"),sta.forEach(t),cDr=r(ede,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zoe=n(ede,"A",{href:!0});var lta=s(Zoe);mDr=r(lta,"from_pretrained()"),lta.forEach(t),fDr=r(ede," to load the model weights."),ede.forEach(t),gDr=i(K8),T(w0.$$.fragment,K8),K8.forEach(t),hDr=i(li),jr=n(li,"DIV",{class:!0});var ii=s(jr);T(fS.$$.fragment,ii),uDr=i(ii),C6e=n(ii,"P",{});var ita=s(C6e);pDr=r(ita,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ita.forEach(t),_Dr=i(ii),yn=n(ii,"P",{});var Z8=s(yn);bDr=r(Z8,"The model class to instantiate is selected based on the "),w6e=n(Z8,"CODE",{});var dta=s(w6e);vDr=r(dta,"model_type"),dta.forEach(t),FDr=r(Z8,` property of the config object (either
passed as an argument or loaded from `),A6e=n(Z8,"CODE",{});var cta=s(A6e);TDr=r(cta,"pretrained_model_name_or_path"),cta.forEach(t),MDr=r(Z8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=n(Z8,"CODE",{});var mta=s(L6e);EDr=r(mta,"pretrained_model_name_or_path"),mta.forEach(t),CDr=r(Z8,":"),Z8.forEach(t),wDr=i(ii),Be=n(ii,"UL",{});var We=s(Be);A0=n(We,"LI",{});var nHe=s(A0);y6e=n(nHe,"STRONG",{});var fta=s(y6e);ADr=r(fta,"convnext"),fta.forEach(t),LDr=r(nHe," \u2014 "),ere=n(nHe,"A",{href:!0});var gta=s(ere);yDr=r(gta,"TFConvNextForImageClassification"),gta.forEach(t),xDr=r(nHe," (ConvNeXT model)"),nHe.forEach(t),$Dr=i(We),L0=n(We,"LI",{});var sHe=s(L0);x6e=n(sHe,"STRONG",{});var hta=s(x6e);kDr=r(hta,"data2vec-vision"),hta.forEach(t),SDr=r(sHe," \u2014 "),ore=n(sHe,"A",{href:!0});var uta=s(ore);RDr=r(uta,"TFData2VecVisionForImageClassification"),uta.forEach(t),PDr=r(sHe," (Data2VecVision model)"),sHe.forEach(t),BDr=i(We),Tl=n(We,"LI",{});var YB=s(Tl);$6e=n(YB,"STRONG",{});var pta=s($6e);IDr=r(pta,"deit"),pta.forEach(t),NDr=r(YB," \u2014 "),rre=n(YB,"A",{href:!0});var _ta=s(rre);qDr=r(_ta,"TFDeiTForImageClassification"),_ta.forEach(t),jDr=r(YB," or "),tre=n(YB,"A",{href:!0});var bta=s(tre);DDr=r(bta,"TFDeiTForImageClassificationWithTeacher"),bta.forEach(t),GDr=r(YB," (DeiT model)"),YB.forEach(t),ODr=i(We),y0=n(We,"LI",{});var lHe=s(y0);k6e=n(lHe,"STRONG",{});var vta=s(k6e);VDr=r(vta,"mobilevit"),vta.forEach(t),XDr=r(lHe," \u2014 "),are=n(lHe,"A",{href:!0});var Fta=s(are);zDr=r(Fta,"TFMobileViTForImageClassification"),Fta.forEach(t),QDr=r(lHe," (MobileViT model)"),lHe.forEach(t),WDr=i(We),x0=n(We,"LI",{});var iHe=s(x0);S6e=n(iHe,"STRONG",{});var Tta=s(S6e);UDr=r(Tta,"regnet"),Tta.forEach(t),HDr=r(iHe," \u2014 "),nre=n(iHe,"A",{href:!0});var Mta=s(nre);JDr=r(Mta,"TFRegNetForImageClassification"),Mta.forEach(t),YDr=r(iHe," (RegNet model)"),iHe.forEach(t),KDr=i(We),$0=n(We,"LI",{});var dHe=s($0);R6e=n(dHe,"STRONG",{});var Eta=s(R6e);ZDr=r(Eta,"resnet"),Eta.forEach(t),eGr=r(dHe," \u2014 "),sre=n(dHe,"A",{href:!0});var Cta=s(sre);oGr=r(Cta,"TFResNetForImageClassification"),Cta.forEach(t),rGr=r(dHe," (ResNet model)"),dHe.forEach(t),tGr=i(We),k0=n(We,"LI",{});var cHe=s(k0);P6e=n(cHe,"STRONG",{});var wta=s(P6e);aGr=r(wta,"segformer"),wta.forEach(t),nGr=r(cHe," \u2014 "),lre=n(cHe,"A",{href:!0});var Ata=s(lre);sGr=r(Ata,"TFSegformerForImageClassification"),Ata.forEach(t),lGr=r(cHe," (SegFormer model)"),cHe.forEach(t),iGr=i(We),S0=n(We,"LI",{});var mHe=s(S0);B6e=n(mHe,"STRONG",{});var Lta=s(B6e);dGr=r(Lta,"swin"),Lta.forEach(t),cGr=r(mHe," \u2014 "),ire=n(mHe,"A",{href:!0});var yta=s(ire);mGr=r(yta,"TFSwinForImageClassification"),yta.forEach(t),fGr=r(mHe," (Swin Transformer model)"),mHe.forEach(t),gGr=i(We),R0=n(We,"LI",{});var fHe=s(R0);I6e=n(fHe,"STRONG",{});var xta=s(I6e);hGr=r(xta,"vit"),xta.forEach(t),uGr=r(fHe," \u2014 "),dre=n(fHe,"A",{href:!0});var $ta=s(dre);pGr=r($ta,"TFViTForImageClassification"),$ta.forEach(t),_Gr=r(fHe," (ViT model)"),fHe.forEach(t),We.forEach(t),bGr=i(ii),T(P0.$$.fragment,ii),ii.forEach(t),li.forEach(t),Yeo=i(m),em=n(m,"H2",{class:!0});var fto=s(em);B0=n(fto,"A",{id:!0,class:!0,href:!0});var kta=s(B0);N6e=n(kta,"SPAN",{});var Sta=s(N6e);T(gS.$$.fragment,Sta),Sta.forEach(t),kta.forEach(t),vGr=i(fto),q6e=n(fto,"SPAN",{});var Rta=s(q6e);FGr=r(Rta,"TFAutoModelForSemanticSegmentation"),Rta.forEach(t),fto.forEach(t),Keo=i(m),cr=n(m,"DIV",{class:!0});var di=s(cr);T(hS.$$.fragment,di),TGr=i(di),om=n(di,"P",{});var ode=s(om);MGr=r(ode,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cre=n(ode,"A",{href:!0});var Pta=s(cre);EGr=r(Pta,"from_pretrained()"),Pta.forEach(t),CGr=r(ode," class method or the "),mre=n(ode,"A",{href:!0});var Bta=s(mre);wGr=r(Bta,"from_config()"),Bta.forEach(t),AGr=r(ode,` class
method.`),ode.forEach(t),LGr=i(di),uS=n(di,"P",{});var gto=s(uS);yGr=r(gto,"This class cannot be instantiated directly using "),j6e=n(gto,"CODE",{});var Ita=s(j6e);xGr=r(Ita,"__init__()"),Ita.forEach(t),$Gr=r(gto," (throws an error)."),gto.forEach(t),kGr=i(di),Ut=n(di,"DIV",{class:!0});var e9=s(Ut);T(pS.$$.fragment,e9),SGr=i(e9),D6e=n(e9,"P",{});var Nta=s(D6e);RGr=r(Nta,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Nta.forEach(t),PGr=i(e9),rm=n(e9,"P",{});var rde=s(rm);BGr=r(rde,`Note:
Loading a model from its configuration file does `),G6e=n(rde,"STRONG",{});var qta=s(G6e);IGr=r(qta,"not"),qta.forEach(t),NGr=r(rde,` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=n(rde,"A",{href:!0});var jta=s(fre);qGr=r(jta,"from_pretrained()"),jta.forEach(t),jGr=r(rde," to load the model weights."),rde.forEach(t),DGr=i(e9),T(I0.$$.fragment,e9),e9.forEach(t),GGr=i(di),Dr=n(di,"DIV",{class:!0});var ci=s(Dr);T(_S.$$.fragment,ci),OGr=i(ci),O6e=n(ci,"P",{});var Dta=s(O6e);VGr=r(Dta,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Dta.forEach(t),XGr=i(ci),xn=n(ci,"P",{});var o9=s(xn);zGr=r(o9,"The model class to instantiate is selected based on the "),V6e=n(o9,"CODE",{});var Gta=s(V6e);QGr=r(Gta,"model_type"),Gta.forEach(t),WGr=r(o9,` property of the config object (either
passed as an argument or loaded from `),X6e=n(o9,"CODE",{});var Ota=s(X6e);UGr=r(Ota,"pretrained_model_name_or_path"),Ota.forEach(t),HGr=r(o9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z6e=n(o9,"CODE",{});var Vta=s(z6e);JGr=r(Vta,"pretrained_model_name_or_path"),Vta.forEach(t),YGr=r(o9,":"),o9.forEach(t),KGr=i(ci),tm=n(ci,"UL",{});var tde=s(tm);N0=n(tde,"LI",{});var gHe=s(N0);Q6e=n(gHe,"STRONG",{});var Xta=s(Q6e);ZGr=r(Xta,"data2vec-vision"),Xta.forEach(t),eOr=r(gHe," \u2014 "),gre=n(gHe,"A",{href:!0});var zta=s(gre);oOr=r(zta,"TFData2VecVisionForSemanticSegmentation"),zta.forEach(t),rOr=r(gHe," (Data2VecVision model)"),gHe.forEach(t),tOr=i(tde),q0=n(tde,"LI",{});var hHe=s(q0);W6e=n(hHe,"STRONG",{});var Qta=s(W6e);aOr=r(Qta,"mobilevit"),Qta.forEach(t),nOr=r(hHe," \u2014 "),hre=n(hHe,"A",{href:!0});var Wta=s(hre);sOr=r(Wta,"TFMobileViTForSemanticSegmentation"),Wta.forEach(t),lOr=r(hHe," (MobileViT model)"),hHe.forEach(t),iOr=i(tde),j0=n(tde,"LI",{});var uHe=s(j0);U6e=n(uHe,"STRONG",{});var Uta=s(U6e);dOr=r(Uta,"segformer"),Uta.forEach(t),cOr=r(uHe," \u2014 "),ure=n(uHe,"A",{href:!0});var Hta=s(ure);mOr=r(Hta,"TFSegformerForSemanticSegmentation"),Hta.forEach(t),fOr=r(uHe," (SegFormer model)"),uHe.forEach(t),tde.forEach(t),gOr=i(ci),T(D0.$$.fragment,ci),ci.forEach(t),di.forEach(t),Zeo=i(m),am=n(m,"H2",{class:!0});var hto=s(am);G0=n(hto,"A",{id:!0,class:!0,href:!0});var Jta=s(G0);H6e=n(Jta,"SPAN",{});var Yta=s(H6e);T(bS.$$.fragment,Yta),Yta.forEach(t),Jta.forEach(t),hOr=i(hto),J6e=n(hto,"SPAN",{});var Kta=s(J6e);uOr=r(Kta,"TFAutoModelForMaskedLM"),Kta.forEach(t),hto.forEach(t),eoo=i(m),mr=n(m,"DIV",{class:!0});var mi=s(mr);T(vS.$$.fragment,mi),pOr=i(mi),nm=n(mi,"P",{});var ade=s(nm);_Or=r(ade,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pre=n(ade,"A",{href:!0});var Zta=s(pre);bOr=r(Zta,"from_pretrained()"),Zta.forEach(t),vOr=r(ade," class method or the "),_re=n(ade,"A",{href:!0});var eaa=s(_re);FOr=r(eaa,"from_config()"),eaa.forEach(t),TOr=r(ade,` class
method.`),ade.forEach(t),MOr=i(mi),FS=n(mi,"P",{});var uto=s(FS);EOr=r(uto,"This class cannot be instantiated directly using "),Y6e=n(uto,"CODE",{});var oaa=s(Y6e);COr=r(oaa,"__init__()"),oaa.forEach(t),wOr=r(uto," (throws an error)."),uto.forEach(t),AOr=i(mi),Ht=n(mi,"DIV",{class:!0});var r9=s(Ht);T(TS.$$.fragment,r9),LOr=i(r9),K6e=n(r9,"P",{});var raa=s(K6e);yOr=r(raa,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),raa.forEach(t),xOr=i(r9),sm=n(r9,"P",{});var nde=s(sm);$Or=r(nde,`Note:
Loading a model from its configuration file does `),Z6e=n(nde,"STRONG",{});var taa=s(Z6e);kOr=r(taa,"not"),taa.forEach(t),SOr=r(nde,` load the model weights. It only affects the
model\u2019s configuration. Use `),bre=n(nde,"A",{href:!0});var aaa=s(bre);ROr=r(aaa,"from_pretrained()"),aaa.forEach(t),POr=r(nde," to load the model weights."),nde.forEach(t),BOr=i(r9),T(O0.$$.fragment,r9),r9.forEach(t),IOr=i(mi),Gr=n(mi,"DIV",{class:!0});var fi=s(Gr);T(MS.$$.fragment,fi),NOr=i(fi),e7e=n(fi,"P",{});var naa=s(e7e);qOr=r(naa,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),naa.forEach(t),jOr=i(fi),$n=n(fi,"P",{});var t9=s($n);DOr=r(t9,"The model class to instantiate is selected based on the "),o7e=n(t9,"CODE",{});var saa=s(o7e);GOr=r(saa,"model_type"),saa.forEach(t),OOr=r(t9,` property of the config object (either
passed as an argument or loaded from `),r7e=n(t9,"CODE",{});var laa=s(r7e);VOr=r(laa,"pretrained_model_name_or_path"),laa.forEach(t),XOr=r(t9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t7e=n(t9,"CODE",{});var iaa=s(t7e);zOr=r(iaa,"pretrained_model_name_or_path"),iaa.forEach(t),QOr=r(t9,":"),t9.forEach(t),WOr=i(fi),ge=n(fi,"UL",{});var _e=s(ge);V0=n(_e,"LI",{});var pHe=s(V0);a7e=n(pHe,"STRONG",{});var daa=s(a7e);UOr=r(daa,"albert"),daa.forEach(t),HOr=r(pHe," \u2014 "),vre=n(pHe,"A",{href:!0});var caa=s(vre);JOr=r(caa,"TFAlbertForMaskedLM"),caa.forEach(t),YOr=r(pHe," (ALBERT model)"),pHe.forEach(t),KOr=i(_e),X0=n(_e,"LI",{});var _He=s(X0);n7e=n(_He,"STRONG",{});var maa=s(n7e);ZOr=r(maa,"bert"),maa.forEach(t),eVr=r(_He," \u2014 "),Fre=n(_He,"A",{href:!0});var faa=s(Fre);oVr=r(faa,"TFBertForMaskedLM"),faa.forEach(t),rVr=r(_He," (BERT model)"),_He.forEach(t),tVr=i(_e),z0=n(_e,"LI",{});var bHe=s(z0);s7e=n(bHe,"STRONG",{});var gaa=s(s7e);aVr=r(gaa,"camembert"),gaa.forEach(t),nVr=r(bHe," \u2014 "),Tre=n(bHe,"A",{href:!0});var haa=s(Tre);sVr=r(haa,"TFCamembertForMaskedLM"),haa.forEach(t),lVr=r(bHe," (CamemBERT model)"),bHe.forEach(t),iVr=i(_e),Q0=n(_e,"LI",{});var vHe=s(Q0);l7e=n(vHe,"STRONG",{});var uaa=s(l7e);dVr=r(uaa,"convbert"),uaa.forEach(t),cVr=r(vHe," \u2014 "),Mre=n(vHe,"A",{href:!0});var paa=s(Mre);mVr=r(paa,"TFConvBertForMaskedLM"),paa.forEach(t),fVr=r(vHe," (ConvBERT model)"),vHe.forEach(t),gVr=i(_e),W0=n(_e,"LI",{});var FHe=s(W0);i7e=n(FHe,"STRONG",{});var _aa=s(i7e);hVr=r(_aa,"deberta"),_aa.forEach(t),uVr=r(FHe," \u2014 "),Ere=n(FHe,"A",{href:!0});var baa=s(Ere);pVr=r(baa,"TFDebertaForMaskedLM"),baa.forEach(t),_Vr=r(FHe," (DeBERTa model)"),FHe.forEach(t),bVr=i(_e),U0=n(_e,"LI",{});var THe=s(U0);d7e=n(THe,"STRONG",{});var vaa=s(d7e);vVr=r(vaa,"deberta-v2"),vaa.forEach(t),FVr=r(THe," \u2014 "),Cre=n(THe,"A",{href:!0});var Faa=s(Cre);TVr=r(Faa,"TFDebertaV2ForMaskedLM"),Faa.forEach(t),MVr=r(THe," (DeBERTa-v2 model)"),THe.forEach(t),EVr=i(_e),H0=n(_e,"LI",{});var MHe=s(H0);c7e=n(MHe,"STRONG",{});var Taa=s(c7e);CVr=r(Taa,"distilbert"),Taa.forEach(t),wVr=r(MHe," \u2014 "),wre=n(MHe,"A",{href:!0});var Maa=s(wre);AVr=r(Maa,"TFDistilBertForMaskedLM"),Maa.forEach(t),LVr=r(MHe," (DistilBERT model)"),MHe.forEach(t),yVr=i(_e),J0=n(_e,"LI",{});var EHe=s(J0);m7e=n(EHe,"STRONG",{});var Eaa=s(m7e);xVr=r(Eaa,"electra"),Eaa.forEach(t),$Vr=r(EHe," \u2014 "),Are=n(EHe,"A",{href:!0});var Caa=s(Are);kVr=r(Caa,"TFElectraForMaskedLM"),Caa.forEach(t),SVr=r(EHe," (ELECTRA model)"),EHe.forEach(t),RVr=i(_e),Y0=n(_e,"LI",{});var CHe=s(Y0);f7e=n(CHe,"STRONG",{});var waa=s(f7e);PVr=r(waa,"flaubert"),waa.forEach(t),BVr=r(CHe," \u2014 "),Lre=n(CHe,"A",{href:!0});var Aaa=s(Lre);IVr=r(Aaa,"TFFlaubertWithLMHeadModel"),Aaa.forEach(t),NVr=r(CHe," (FlauBERT model)"),CHe.forEach(t),qVr=i(_e),K0=n(_e,"LI",{});var wHe=s(K0);g7e=n(wHe,"STRONG",{});var Laa=s(g7e);jVr=r(Laa,"funnel"),Laa.forEach(t),DVr=r(wHe," \u2014 "),yre=n(wHe,"A",{href:!0});var yaa=s(yre);GVr=r(yaa,"TFFunnelForMaskedLM"),yaa.forEach(t),OVr=r(wHe," (Funnel Transformer model)"),wHe.forEach(t),VVr=i(_e),Z0=n(_e,"LI",{});var AHe=s(Z0);h7e=n(AHe,"STRONG",{});var xaa=s(h7e);XVr=r(xaa,"layoutlm"),xaa.forEach(t),zVr=r(AHe," \u2014 "),xre=n(AHe,"A",{href:!0});var $aa=s(xre);QVr=r($aa,"TFLayoutLMForMaskedLM"),$aa.forEach(t),WVr=r(AHe," (LayoutLM model)"),AHe.forEach(t),UVr=i(_e),ew=n(_e,"LI",{});var LHe=s(ew);u7e=n(LHe,"STRONG",{});var kaa=s(u7e);HVr=r(kaa,"longformer"),kaa.forEach(t),JVr=r(LHe," \u2014 "),$re=n(LHe,"A",{href:!0});var Saa=s($re);YVr=r(Saa,"TFLongformerForMaskedLM"),Saa.forEach(t),KVr=r(LHe," (Longformer model)"),LHe.forEach(t),ZVr=i(_e),ow=n(_e,"LI",{});var yHe=s(ow);p7e=n(yHe,"STRONG",{});var Raa=s(p7e);eXr=r(Raa,"mobilebert"),Raa.forEach(t),oXr=r(yHe," \u2014 "),kre=n(yHe,"A",{href:!0});var Paa=s(kre);rXr=r(Paa,"TFMobileBertForMaskedLM"),Paa.forEach(t),tXr=r(yHe," (MobileBERT model)"),yHe.forEach(t),aXr=i(_e),rw=n(_e,"LI",{});var xHe=s(rw);_7e=n(xHe,"STRONG",{});var Baa=s(_7e);nXr=r(Baa,"mpnet"),Baa.forEach(t),sXr=r(xHe," \u2014 "),Sre=n(xHe,"A",{href:!0});var Iaa=s(Sre);lXr=r(Iaa,"TFMPNetForMaskedLM"),Iaa.forEach(t),iXr=r(xHe," (MPNet model)"),xHe.forEach(t),dXr=i(_e),tw=n(_e,"LI",{});var $He=s(tw);b7e=n($He,"STRONG",{});var Naa=s(b7e);cXr=r(Naa,"rembert"),Naa.forEach(t),mXr=r($He," \u2014 "),Rre=n($He,"A",{href:!0});var qaa=s(Rre);fXr=r(qaa,"TFRemBertForMaskedLM"),qaa.forEach(t),gXr=r($He," (RemBERT model)"),$He.forEach(t),hXr=i(_e),aw=n(_e,"LI",{});var kHe=s(aw);v7e=n(kHe,"STRONG",{});var jaa=s(v7e);uXr=r(jaa,"roberta"),jaa.forEach(t),pXr=r(kHe," \u2014 "),Pre=n(kHe,"A",{href:!0});var Daa=s(Pre);_Xr=r(Daa,"TFRobertaForMaskedLM"),Daa.forEach(t),bXr=r(kHe," (RoBERTa model)"),kHe.forEach(t),vXr=i(_e),nw=n(_e,"LI",{});var SHe=s(nw);F7e=n(SHe,"STRONG",{});var Gaa=s(F7e);FXr=r(Gaa,"roformer"),Gaa.forEach(t),TXr=r(SHe," \u2014 "),Bre=n(SHe,"A",{href:!0});var Oaa=s(Bre);MXr=r(Oaa,"TFRoFormerForMaskedLM"),Oaa.forEach(t),EXr=r(SHe," (RoFormer model)"),SHe.forEach(t),CXr=i(_e),sw=n(_e,"LI",{});var RHe=s(sw);T7e=n(RHe,"STRONG",{});var Vaa=s(T7e);wXr=r(Vaa,"tapas"),Vaa.forEach(t),AXr=r(RHe," \u2014 "),Ire=n(RHe,"A",{href:!0});var Xaa=s(Ire);LXr=r(Xaa,"TFTapasForMaskedLM"),Xaa.forEach(t),yXr=r(RHe," (TAPAS model)"),RHe.forEach(t),xXr=i(_e),lw=n(_e,"LI",{});var PHe=s(lw);M7e=n(PHe,"STRONG",{});var zaa=s(M7e);$Xr=r(zaa,"xlm"),zaa.forEach(t),kXr=r(PHe," \u2014 "),Nre=n(PHe,"A",{href:!0});var Qaa=s(Nre);SXr=r(Qaa,"TFXLMWithLMHeadModel"),Qaa.forEach(t),RXr=r(PHe," (XLM model)"),PHe.forEach(t),PXr=i(_e),iw=n(_e,"LI",{});var BHe=s(iw);E7e=n(BHe,"STRONG",{});var Waa=s(E7e);BXr=r(Waa,"xlm-roberta"),Waa.forEach(t),IXr=r(BHe," \u2014 "),qre=n(BHe,"A",{href:!0});var Uaa=s(qre);NXr=r(Uaa,"TFXLMRobertaForMaskedLM"),Uaa.forEach(t),qXr=r(BHe," (XLM-RoBERTa model)"),BHe.forEach(t),_e.forEach(t),jXr=i(fi),T(dw.$$.fragment,fi),fi.forEach(t),mi.forEach(t),ooo=i(m),lm=n(m,"H2",{class:!0});var pto=s(lm);cw=n(pto,"A",{id:!0,class:!0,href:!0});var Haa=s(cw);C7e=n(Haa,"SPAN",{});var Jaa=s(C7e);T(ES.$$.fragment,Jaa),Jaa.forEach(t),Haa.forEach(t),DXr=i(pto),w7e=n(pto,"SPAN",{});var Yaa=s(w7e);GXr=r(Yaa,"TFAutoModelForSeq2SeqLM"),Yaa.forEach(t),pto.forEach(t),roo=i(m),fr=n(m,"DIV",{class:!0});var gi=s(fr);T(CS.$$.fragment,gi),OXr=i(gi),im=n(gi,"P",{});var sde=s(im);VXr=r(sde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jre=n(sde,"A",{href:!0});var Kaa=s(jre);XXr=r(Kaa,"from_pretrained()"),Kaa.forEach(t),zXr=r(sde," class method or the "),Dre=n(sde,"A",{href:!0});var Zaa=s(Dre);QXr=r(Zaa,"from_config()"),Zaa.forEach(t),WXr=r(sde,` class
method.`),sde.forEach(t),UXr=i(gi),wS=n(gi,"P",{});var _to=s(wS);HXr=r(_to,"This class cannot be instantiated directly using "),A7e=n(_to,"CODE",{});var ena=s(A7e);JXr=r(ena,"__init__()"),ena.forEach(t),YXr=r(_to," (throws an error)."),_to.forEach(t),KXr=i(gi),Jt=n(gi,"DIV",{class:!0});var a9=s(Jt);T(AS.$$.fragment,a9),ZXr=i(a9),L7e=n(a9,"P",{});var ona=s(L7e);ezr=r(ona,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ona.forEach(t),ozr=i(a9),dm=n(a9,"P",{});var lde=s(dm);rzr=r(lde,`Note:
Loading a model from its configuration file does `),y7e=n(lde,"STRONG",{});var rna=s(y7e);tzr=r(rna,"not"),rna.forEach(t),azr=r(lde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gre=n(lde,"A",{href:!0});var tna=s(Gre);nzr=r(tna,"from_pretrained()"),tna.forEach(t),szr=r(lde," to load the model weights."),lde.forEach(t),lzr=i(a9),T(mw.$$.fragment,a9),a9.forEach(t),izr=i(gi),Or=n(gi,"DIV",{class:!0});var hi=s(Or);T(LS.$$.fragment,hi),dzr=i(hi),x7e=n(hi,"P",{});var ana=s(x7e);czr=r(ana,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ana.forEach(t),mzr=i(hi),kn=n(hi,"P",{});var n9=s(kn);fzr=r(n9,"The model class to instantiate is selected based on the "),$7e=n(n9,"CODE",{});var nna=s($7e);gzr=r(nna,"model_type"),nna.forEach(t),hzr=r(n9,` property of the config object (either
passed as an argument or loaded from `),k7e=n(n9,"CODE",{});var sna=s(k7e);uzr=r(sna,"pretrained_model_name_or_path"),sna.forEach(t),pzr=r(n9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=n(n9,"CODE",{});var lna=s(S7e);_zr=r(lna,"pretrained_model_name_or_path"),lna.forEach(t),bzr=r(n9,":"),n9.forEach(t),vzr=i(hi),ye=n(hi,"UL",{});var Ne=s(ye);fw=n(Ne,"LI",{});var IHe=s(fw);R7e=n(IHe,"STRONG",{});var ina=s(R7e);Fzr=r(ina,"bart"),ina.forEach(t),Tzr=r(IHe," \u2014 "),Ore=n(IHe,"A",{href:!0});var dna=s(Ore);Mzr=r(dna,"TFBartForConditionalGeneration"),dna.forEach(t),Ezr=r(IHe," (BART model)"),IHe.forEach(t),Czr=i(Ne),gw=n(Ne,"LI",{});var NHe=s(gw);P7e=n(NHe,"STRONG",{});var cna=s(P7e);wzr=r(cna,"blenderbot"),cna.forEach(t),Azr=r(NHe," \u2014 "),Vre=n(NHe,"A",{href:!0});var mna=s(Vre);Lzr=r(mna,"TFBlenderbotForConditionalGeneration"),mna.forEach(t),yzr=r(NHe," (Blenderbot model)"),NHe.forEach(t),xzr=i(Ne),hw=n(Ne,"LI",{});var qHe=s(hw);B7e=n(qHe,"STRONG",{});var fna=s(B7e);$zr=r(fna,"blenderbot-small"),fna.forEach(t),kzr=r(qHe," \u2014 "),Xre=n(qHe,"A",{href:!0});var gna=s(Xre);Szr=r(gna,"TFBlenderbotSmallForConditionalGeneration"),gna.forEach(t),Rzr=r(qHe," (BlenderbotSmall model)"),qHe.forEach(t),Pzr=i(Ne),uw=n(Ne,"LI",{});var jHe=s(uw);I7e=n(jHe,"STRONG",{});var hna=s(I7e);Bzr=r(hna,"encoder-decoder"),hna.forEach(t),Izr=r(jHe," \u2014 "),zre=n(jHe,"A",{href:!0});var una=s(zre);Nzr=r(una,"TFEncoderDecoderModel"),una.forEach(t),qzr=r(jHe," (Encoder decoder model)"),jHe.forEach(t),jzr=i(Ne),pw=n(Ne,"LI",{});var DHe=s(pw);N7e=n(DHe,"STRONG",{});var pna=s(N7e);Dzr=r(pna,"led"),pna.forEach(t),Gzr=r(DHe," \u2014 "),Qre=n(DHe,"A",{href:!0});var _na=s(Qre);Ozr=r(_na,"TFLEDForConditionalGeneration"),_na.forEach(t),Vzr=r(DHe," (LED model)"),DHe.forEach(t),Xzr=i(Ne),_w=n(Ne,"LI",{});var GHe=s(_w);q7e=n(GHe,"STRONG",{});var bna=s(q7e);zzr=r(bna,"marian"),bna.forEach(t),Qzr=r(GHe," \u2014 "),Wre=n(GHe,"A",{href:!0});var vna=s(Wre);Wzr=r(vna,"TFMarianMTModel"),vna.forEach(t),Uzr=r(GHe," (Marian model)"),GHe.forEach(t),Hzr=i(Ne),bw=n(Ne,"LI",{});var OHe=s(bw);j7e=n(OHe,"STRONG",{});var Fna=s(j7e);Jzr=r(Fna,"mbart"),Fna.forEach(t),Yzr=r(OHe," \u2014 "),Ure=n(OHe,"A",{href:!0});var Tna=s(Ure);Kzr=r(Tna,"TFMBartForConditionalGeneration"),Tna.forEach(t),Zzr=r(OHe," (mBART model)"),OHe.forEach(t),eQr=i(Ne),vw=n(Ne,"LI",{});var VHe=s(vw);D7e=n(VHe,"STRONG",{});var Mna=s(D7e);oQr=r(Mna,"mt5"),Mna.forEach(t),rQr=r(VHe," \u2014 "),Hre=n(VHe,"A",{href:!0});var Ena=s(Hre);tQr=r(Ena,"TFMT5ForConditionalGeneration"),Ena.forEach(t),aQr=r(VHe," (MT5 model)"),VHe.forEach(t),nQr=i(Ne),Fw=n(Ne,"LI",{});var XHe=s(Fw);G7e=n(XHe,"STRONG",{});var Cna=s(G7e);sQr=r(Cna,"pegasus"),Cna.forEach(t),lQr=r(XHe," \u2014 "),Jre=n(XHe,"A",{href:!0});var wna=s(Jre);iQr=r(wna,"TFPegasusForConditionalGeneration"),wna.forEach(t),dQr=r(XHe," (Pegasus model)"),XHe.forEach(t),cQr=i(Ne),Tw=n(Ne,"LI",{});var zHe=s(Tw);O7e=n(zHe,"STRONG",{});var Ana=s(O7e);mQr=r(Ana,"t5"),Ana.forEach(t),fQr=r(zHe," \u2014 "),Yre=n(zHe,"A",{href:!0});var Lna=s(Yre);gQr=r(Lna,"TFT5ForConditionalGeneration"),Lna.forEach(t),hQr=r(zHe," (T5 model)"),zHe.forEach(t),Ne.forEach(t),uQr=i(hi),T(Mw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),too=i(m),cm=n(m,"H2",{class:!0});var bto=s(cm);Ew=n(bto,"A",{id:!0,class:!0,href:!0});var yna=s(Ew);V7e=n(yna,"SPAN",{});var xna=s(V7e);T(yS.$$.fragment,xna),xna.forEach(t),yna.forEach(t),pQr=i(bto),X7e=n(bto,"SPAN",{});var $na=s(X7e);_Qr=r($na,"TFAutoModelForSequenceClassification"),$na.forEach(t),bto.forEach(t),aoo=i(m),gr=n(m,"DIV",{class:!0});var ui=s(gr);T(xS.$$.fragment,ui),bQr=i(ui),mm=n(ui,"P",{});var ide=s(mm);vQr=r(ide,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Kre=n(ide,"A",{href:!0});var kna=s(Kre);FQr=r(kna,"from_pretrained()"),kna.forEach(t),TQr=r(ide," class method or the "),Zre=n(ide,"A",{href:!0});var Sna=s(Zre);MQr=r(Sna,"from_config()"),Sna.forEach(t),EQr=r(ide,` class
method.`),ide.forEach(t),CQr=i(ui),$S=n(ui,"P",{});var vto=s($S);wQr=r(vto,"This class cannot be instantiated directly using "),z7e=n(vto,"CODE",{});var Rna=s(z7e);AQr=r(Rna,"__init__()"),Rna.forEach(t),LQr=r(vto," (throws an error)."),vto.forEach(t),yQr=i(ui),Yt=n(ui,"DIV",{class:!0});var s9=s(Yt);T(kS.$$.fragment,s9),xQr=i(s9),Q7e=n(s9,"P",{});var Pna=s(Q7e);$Qr=r(Pna,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Pna.forEach(t),kQr=i(s9),fm=n(s9,"P",{});var dde=s(fm);SQr=r(dde,`Note:
Loading a model from its configuration file does `),W7e=n(dde,"STRONG",{});var Bna=s(W7e);RQr=r(Bna,"not"),Bna.forEach(t),PQr=r(dde,` load the model weights. It only affects the
model\u2019s configuration. Use `),ete=n(dde,"A",{href:!0});var Ina=s(ete);BQr=r(Ina,"from_pretrained()"),Ina.forEach(t),IQr=r(dde," to load the model weights."),dde.forEach(t),NQr=i(s9),T(Cw.$$.fragment,s9),s9.forEach(t),qQr=i(ui),Vr=n(ui,"DIV",{class:!0});var pi=s(Vr);T(SS.$$.fragment,pi),jQr=i(pi),U7e=n(pi,"P",{});var Nna=s(U7e);DQr=r(Nna,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Nna.forEach(t),GQr=i(pi),Sn=n(pi,"P",{});var l9=s(Sn);OQr=r(l9,"The model class to instantiate is selected based on the "),H7e=n(l9,"CODE",{});var qna=s(H7e);VQr=r(qna,"model_type"),qna.forEach(t),XQr=r(l9,` property of the config object (either
passed as an argument or loaded from `),J7e=n(l9,"CODE",{});var jna=s(J7e);zQr=r(jna,"pretrained_model_name_or_path"),jna.forEach(t),QQr=r(l9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y7e=n(l9,"CODE",{});var Dna=s(Y7e);WQr=r(Dna,"pretrained_model_name_or_path"),Dna.forEach(t),UQr=r(l9,":"),l9.forEach(t),HQr=i(pi),re=n(pi,"UL",{});var ae=s(re);ww=n(ae,"LI",{});var QHe=s(ww);K7e=n(QHe,"STRONG",{});var Gna=s(K7e);JQr=r(Gna,"albert"),Gna.forEach(t),YQr=r(QHe," \u2014 "),ote=n(QHe,"A",{href:!0});var Ona=s(ote);KQr=r(Ona,"TFAlbertForSequenceClassification"),Ona.forEach(t),ZQr=r(QHe," (ALBERT model)"),QHe.forEach(t),eWr=i(ae),Aw=n(ae,"LI",{});var WHe=s(Aw);Z7e=n(WHe,"STRONG",{});var Vna=s(Z7e);oWr=r(Vna,"bert"),Vna.forEach(t),rWr=r(WHe," \u2014 "),rte=n(WHe,"A",{href:!0});var Xna=s(rte);tWr=r(Xna,"TFBertForSequenceClassification"),Xna.forEach(t),aWr=r(WHe," (BERT model)"),WHe.forEach(t),nWr=i(ae),Lw=n(ae,"LI",{});var UHe=s(Lw);eLe=n(UHe,"STRONG",{});var zna=s(eLe);sWr=r(zna,"camembert"),zna.forEach(t),lWr=r(UHe," \u2014 "),tte=n(UHe,"A",{href:!0});var Qna=s(tte);iWr=r(Qna,"TFCamembertForSequenceClassification"),Qna.forEach(t),dWr=r(UHe," (CamemBERT model)"),UHe.forEach(t),cWr=i(ae),yw=n(ae,"LI",{});var HHe=s(yw);oLe=n(HHe,"STRONG",{});var Wna=s(oLe);mWr=r(Wna,"convbert"),Wna.forEach(t),fWr=r(HHe," \u2014 "),ate=n(HHe,"A",{href:!0});var Una=s(ate);gWr=r(Una,"TFConvBertForSequenceClassification"),Una.forEach(t),hWr=r(HHe," (ConvBERT model)"),HHe.forEach(t),uWr=i(ae),xw=n(ae,"LI",{});var JHe=s(xw);rLe=n(JHe,"STRONG",{});var Hna=s(rLe);pWr=r(Hna,"ctrl"),Hna.forEach(t),_Wr=r(JHe," \u2014 "),nte=n(JHe,"A",{href:!0});var Jna=s(nte);bWr=r(Jna,"TFCTRLForSequenceClassification"),Jna.forEach(t),vWr=r(JHe," (CTRL model)"),JHe.forEach(t),FWr=i(ae),$w=n(ae,"LI",{});var YHe=s($w);tLe=n(YHe,"STRONG",{});var Yna=s(tLe);TWr=r(Yna,"deberta"),Yna.forEach(t),MWr=r(YHe," \u2014 "),ste=n(YHe,"A",{href:!0});var Kna=s(ste);EWr=r(Kna,"TFDebertaForSequenceClassification"),Kna.forEach(t),CWr=r(YHe," (DeBERTa model)"),YHe.forEach(t),wWr=i(ae),kw=n(ae,"LI",{});var KHe=s(kw);aLe=n(KHe,"STRONG",{});var Zna=s(aLe);AWr=r(Zna,"deberta-v2"),Zna.forEach(t),LWr=r(KHe," \u2014 "),lte=n(KHe,"A",{href:!0});var esa=s(lte);yWr=r(esa,"TFDebertaV2ForSequenceClassification"),esa.forEach(t),xWr=r(KHe," (DeBERTa-v2 model)"),KHe.forEach(t),$Wr=i(ae),Sw=n(ae,"LI",{});var ZHe=s(Sw);nLe=n(ZHe,"STRONG",{});var osa=s(nLe);kWr=r(osa,"distilbert"),osa.forEach(t),SWr=r(ZHe," \u2014 "),ite=n(ZHe,"A",{href:!0});var rsa=s(ite);RWr=r(rsa,"TFDistilBertForSequenceClassification"),rsa.forEach(t),PWr=r(ZHe," (DistilBERT model)"),ZHe.forEach(t),BWr=i(ae),Rw=n(ae,"LI",{});var eJe=s(Rw);sLe=n(eJe,"STRONG",{});var tsa=s(sLe);IWr=r(tsa,"electra"),tsa.forEach(t),NWr=r(eJe," \u2014 "),dte=n(eJe,"A",{href:!0});var asa=s(dte);qWr=r(asa,"TFElectraForSequenceClassification"),asa.forEach(t),jWr=r(eJe," (ELECTRA model)"),eJe.forEach(t),DWr=i(ae),Pw=n(ae,"LI",{});var oJe=s(Pw);lLe=n(oJe,"STRONG",{});var nsa=s(lLe);GWr=r(nsa,"flaubert"),nsa.forEach(t),OWr=r(oJe," \u2014 "),cte=n(oJe,"A",{href:!0});var ssa=s(cte);VWr=r(ssa,"TFFlaubertForSequenceClassification"),ssa.forEach(t),XWr=r(oJe," (FlauBERT model)"),oJe.forEach(t),zWr=i(ae),Bw=n(ae,"LI",{});var rJe=s(Bw);iLe=n(rJe,"STRONG",{});var lsa=s(iLe);QWr=r(lsa,"funnel"),lsa.forEach(t),WWr=r(rJe," \u2014 "),mte=n(rJe,"A",{href:!0});var isa=s(mte);UWr=r(isa,"TFFunnelForSequenceClassification"),isa.forEach(t),HWr=r(rJe," (Funnel Transformer model)"),rJe.forEach(t),JWr=i(ae),Iw=n(ae,"LI",{});var tJe=s(Iw);dLe=n(tJe,"STRONG",{});var dsa=s(dLe);YWr=r(dsa,"gpt2"),dsa.forEach(t),KWr=r(tJe," \u2014 "),fte=n(tJe,"A",{href:!0});var csa=s(fte);ZWr=r(csa,"TFGPT2ForSequenceClassification"),csa.forEach(t),eUr=r(tJe," (OpenAI GPT-2 model)"),tJe.forEach(t),oUr=i(ae),Nw=n(ae,"LI",{});var aJe=s(Nw);cLe=n(aJe,"STRONG",{});var msa=s(cLe);rUr=r(msa,"gptj"),msa.forEach(t),tUr=r(aJe," \u2014 "),gte=n(aJe,"A",{href:!0});var fsa=s(gte);aUr=r(fsa,"TFGPTJForSequenceClassification"),fsa.forEach(t),nUr=r(aJe," (GPT-J model)"),aJe.forEach(t),sUr=i(ae),qw=n(ae,"LI",{});var nJe=s(qw);mLe=n(nJe,"STRONG",{});var gsa=s(mLe);lUr=r(gsa,"layoutlm"),gsa.forEach(t),iUr=r(nJe," \u2014 "),hte=n(nJe,"A",{href:!0});var hsa=s(hte);dUr=r(hsa,"TFLayoutLMForSequenceClassification"),hsa.forEach(t),cUr=r(nJe," (LayoutLM model)"),nJe.forEach(t),mUr=i(ae),jw=n(ae,"LI",{});var sJe=s(jw);fLe=n(sJe,"STRONG",{});var usa=s(fLe);fUr=r(usa,"layoutlmv3"),usa.forEach(t),gUr=r(sJe," \u2014 "),ute=n(sJe,"A",{href:!0});var psa=s(ute);hUr=r(psa,"TFLayoutLMv3ForSequenceClassification"),psa.forEach(t),uUr=r(sJe," (LayoutLMv3 model)"),sJe.forEach(t),pUr=i(ae),Dw=n(ae,"LI",{});var lJe=s(Dw);gLe=n(lJe,"STRONG",{});var _sa=s(gLe);_Ur=r(_sa,"longformer"),_sa.forEach(t),bUr=r(lJe," \u2014 "),pte=n(lJe,"A",{href:!0});var bsa=s(pte);vUr=r(bsa,"TFLongformerForSequenceClassification"),bsa.forEach(t),FUr=r(lJe," (Longformer model)"),lJe.forEach(t),TUr=i(ae),Gw=n(ae,"LI",{});var iJe=s(Gw);hLe=n(iJe,"STRONG",{});var vsa=s(hLe);MUr=r(vsa,"mobilebert"),vsa.forEach(t),EUr=r(iJe," \u2014 "),_te=n(iJe,"A",{href:!0});var Fsa=s(_te);CUr=r(Fsa,"TFMobileBertForSequenceClassification"),Fsa.forEach(t),wUr=r(iJe," (MobileBERT model)"),iJe.forEach(t),AUr=i(ae),Ow=n(ae,"LI",{});var dJe=s(Ow);uLe=n(dJe,"STRONG",{});var Tsa=s(uLe);LUr=r(Tsa,"mpnet"),Tsa.forEach(t),yUr=r(dJe," \u2014 "),bte=n(dJe,"A",{href:!0});var Msa=s(bte);xUr=r(Msa,"TFMPNetForSequenceClassification"),Msa.forEach(t),$Ur=r(dJe," (MPNet model)"),dJe.forEach(t),kUr=i(ae),Vw=n(ae,"LI",{});var cJe=s(Vw);pLe=n(cJe,"STRONG",{});var Esa=s(pLe);SUr=r(Esa,"openai-gpt"),Esa.forEach(t),RUr=r(cJe," \u2014 "),vte=n(cJe,"A",{href:!0});var Csa=s(vte);PUr=r(Csa,"TFOpenAIGPTForSequenceClassification"),Csa.forEach(t),BUr=r(cJe," (OpenAI GPT model)"),cJe.forEach(t),IUr=i(ae),Xw=n(ae,"LI",{});var mJe=s(Xw);_Le=n(mJe,"STRONG",{});var wsa=s(_Le);NUr=r(wsa,"rembert"),wsa.forEach(t),qUr=r(mJe," \u2014 "),Fte=n(mJe,"A",{href:!0});var Asa=s(Fte);jUr=r(Asa,"TFRemBertForSequenceClassification"),Asa.forEach(t),DUr=r(mJe," (RemBERT model)"),mJe.forEach(t),GUr=i(ae),zw=n(ae,"LI",{});var fJe=s(zw);bLe=n(fJe,"STRONG",{});var Lsa=s(bLe);OUr=r(Lsa,"roberta"),Lsa.forEach(t),VUr=r(fJe," \u2014 "),Tte=n(fJe,"A",{href:!0});var ysa=s(Tte);XUr=r(ysa,"TFRobertaForSequenceClassification"),ysa.forEach(t),zUr=r(fJe," (RoBERTa model)"),fJe.forEach(t),QUr=i(ae),Qw=n(ae,"LI",{});var gJe=s(Qw);vLe=n(gJe,"STRONG",{});var xsa=s(vLe);WUr=r(xsa,"roformer"),xsa.forEach(t),UUr=r(gJe," \u2014 "),Mte=n(gJe,"A",{href:!0});var $sa=s(Mte);HUr=r($sa,"TFRoFormerForSequenceClassification"),$sa.forEach(t),JUr=r(gJe," (RoFormer model)"),gJe.forEach(t),YUr=i(ae),Ww=n(ae,"LI",{});var hJe=s(Ww);FLe=n(hJe,"STRONG",{});var ksa=s(FLe);KUr=r(ksa,"tapas"),ksa.forEach(t),ZUr=r(hJe," \u2014 "),Ete=n(hJe,"A",{href:!0});var Ssa=s(Ete);eHr=r(Ssa,"TFTapasForSequenceClassification"),Ssa.forEach(t),oHr=r(hJe," (TAPAS model)"),hJe.forEach(t),rHr=i(ae),Uw=n(ae,"LI",{});var uJe=s(Uw);TLe=n(uJe,"STRONG",{});var Rsa=s(TLe);tHr=r(Rsa,"transfo-xl"),Rsa.forEach(t),aHr=r(uJe," \u2014 "),Cte=n(uJe,"A",{href:!0});var Psa=s(Cte);nHr=r(Psa,"TFTransfoXLForSequenceClassification"),Psa.forEach(t),sHr=r(uJe," (Transformer-XL model)"),uJe.forEach(t),lHr=i(ae),Hw=n(ae,"LI",{});var pJe=s(Hw);MLe=n(pJe,"STRONG",{});var Bsa=s(MLe);iHr=r(Bsa,"xlm"),Bsa.forEach(t),dHr=r(pJe," \u2014 "),wte=n(pJe,"A",{href:!0});var Isa=s(wte);cHr=r(Isa,"TFXLMForSequenceClassification"),Isa.forEach(t),mHr=r(pJe," (XLM model)"),pJe.forEach(t),fHr=i(ae),Jw=n(ae,"LI",{});var _Je=s(Jw);ELe=n(_Je,"STRONG",{});var Nsa=s(ELe);gHr=r(Nsa,"xlm-roberta"),Nsa.forEach(t),hHr=r(_Je," \u2014 "),Ate=n(_Je,"A",{href:!0});var qsa=s(Ate);uHr=r(qsa,"TFXLMRobertaForSequenceClassification"),qsa.forEach(t),pHr=r(_Je," (XLM-RoBERTa model)"),_Je.forEach(t),_Hr=i(ae),Yw=n(ae,"LI",{});var bJe=s(Yw);CLe=n(bJe,"STRONG",{});var jsa=s(CLe);bHr=r(jsa,"xlnet"),jsa.forEach(t),vHr=r(bJe," \u2014 "),Lte=n(bJe,"A",{href:!0});var Dsa=s(Lte);FHr=r(Dsa,"TFXLNetForSequenceClassification"),Dsa.forEach(t),THr=r(bJe," (XLNet model)"),bJe.forEach(t),ae.forEach(t),MHr=i(pi),T(Kw.$$.fragment,pi),pi.forEach(t),ui.forEach(t),noo=i(m),gm=n(m,"H2",{class:!0});var Fto=s(gm);Zw=n(Fto,"A",{id:!0,class:!0,href:!0});var Gsa=s(Zw);wLe=n(Gsa,"SPAN",{});var Osa=s(wLe);T(RS.$$.fragment,Osa),Osa.forEach(t),Gsa.forEach(t),EHr=i(Fto),ALe=n(Fto,"SPAN",{});var Vsa=s(ALe);CHr=r(Vsa,"TFAutoModelForMultipleChoice"),Vsa.forEach(t),Fto.forEach(t),soo=i(m),hr=n(m,"DIV",{class:!0});var _i=s(hr);T(PS.$$.fragment,_i),wHr=i(_i),hm=n(_i,"P",{});var cde=s(hm);AHr=r(cde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yte=n(cde,"A",{href:!0});var Xsa=s(yte);LHr=r(Xsa,"from_pretrained()"),Xsa.forEach(t),yHr=r(cde," class method or the "),xte=n(cde,"A",{href:!0});var zsa=s(xte);xHr=r(zsa,"from_config()"),zsa.forEach(t),$Hr=r(cde,` class
method.`),cde.forEach(t),kHr=i(_i),BS=n(_i,"P",{});var Tto=s(BS);SHr=r(Tto,"This class cannot be instantiated directly using "),LLe=n(Tto,"CODE",{});var Qsa=s(LLe);RHr=r(Qsa,"__init__()"),Qsa.forEach(t),PHr=r(Tto," (throws an error)."),Tto.forEach(t),BHr=i(_i),Kt=n(_i,"DIV",{class:!0});var i9=s(Kt);T(IS.$$.fragment,i9),IHr=i(i9),yLe=n(i9,"P",{});var Wsa=s(yLe);NHr=r(Wsa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Wsa.forEach(t),qHr=i(i9),um=n(i9,"P",{});var mde=s(um);jHr=r(mde,`Note:
Loading a model from its configuration file does `),xLe=n(mde,"STRONG",{});var Usa=s(xLe);DHr=r(Usa,"not"),Usa.forEach(t),GHr=r(mde,` load the model weights. It only affects the
model\u2019s configuration. Use `),$te=n(mde,"A",{href:!0});var Hsa=s($te);OHr=r(Hsa,"from_pretrained()"),Hsa.forEach(t),VHr=r(mde," to load the model weights."),mde.forEach(t),XHr=i(i9),T(eA.$$.fragment,i9),i9.forEach(t),zHr=i(_i),Xr=n(_i,"DIV",{class:!0});var bi=s(Xr);T(NS.$$.fragment,bi),QHr=i(bi),$Le=n(bi,"P",{});var Jsa=s($Le);WHr=r(Jsa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Jsa.forEach(t),UHr=i(bi),Rn=n(bi,"P",{});var d9=s(Rn);HHr=r(d9,"The model class to instantiate is selected based on the "),kLe=n(d9,"CODE",{});var Ysa=s(kLe);JHr=r(Ysa,"model_type"),Ysa.forEach(t),YHr=r(d9,` property of the config object (either
passed as an argument or loaded from `),SLe=n(d9,"CODE",{});var Ksa=s(SLe);KHr=r(Ksa,"pretrained_model_name_or_path"),Ksa.forEach(t),ZHr=r(d9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RLe=n(d9,"CODE",{});var Zsa=s(RLe);eJr=r(Zsa,"pretrained_model_name_or_path"),Zsa.forEach(t),oJr=r(d9,":"),d9.forEach(t),rJr=i(bi),ve=n(bi,"UL",{});var Te=s(ve);oA=n(Te,"LI",{});var vJe=s(oA);PLe=n(vJe,"STRONG",{});var ela=s(PLe);tJr=r(ela,"albert"),ela.forEach(t),aJr=r(vJe," \u2014 "),kte=n(vJe,"A",{href:!0});var ola=s(kte);nJr=r(ola,"TFAlbertForMultipleChoice"),ola.forEach(t),sJr=r(vJe," (ALBERT model)"),vJe.forEach(t),lJr=i(Te),rA=n(Te,"LI",{});var FJe=s(rA);BLe=n(FJe,"STRONG",{});var rla=s(BLe);iJr=r(rla,"bert"),rla.forEach(t),dJr=r(FJe," \u2014 "),Ste=n(FJe,"A",{href:!0});var tla=s(Ste);cJr=r(tla,"TFBertForMultipleChoice"),tla.forEach(t),mJr=r(FJe," (BERT model)"),FJe.forEach(t),fJr=i(Te),tA=n(Te,"LI",{});var TJe=s(tA);ILe=n(TJe,"STRONG",{});var ala=s(ILe);gJr=r(ala,"camembert"),ala.forEach(t),hJr=r(TJe," \u2014 "),Rte=n(TJe,"A",{href:!0});var nla=s(Rte);uJr=r(nla,"TFCamembertForMultipleChoice"),nla.forEach(t),pJr=r(TJe," (CamemBERT model)"),TJe.forEach(t),_Jr=i(Te),aA=n(Te,"LI",{});var MJe=s(aA);NLe=n(MJe,"STRONG",{});var sla=s(NLe);bJr=r(sla,"convbert"),sla.forEach(t),vJr=r(MJe," \u2014 "),Pte=n(MJe,"A",{href:!0});var lla=s(Pte);FJr=r(lla,"TFConvBertForMultipleChoice"),lla.forEach(t),TJr=r(MJe," (ConvBERT model)"),MJe.forEach(t),MJr=i(Te),nA=n(Te,"LI",{});var EJe=s(nA);qLe=n(EJe,"STRONG",{});var ila=s(qLe);EJr=r(ila,"distilbert"),ila.forEach(t),CJr=r(EJe," \u2014 "),Bte=n(EJe,"A",{href:!0});var dla=s(Bte);wJr=r(dla,"TFDistilBertForMultipleChoice"),dla.forEach(t),AJr=r(EJe," (DistilBERT model)"),EJe.forEach(t),LJr=i(Te),sA=n(Te,"LI",{});var CJe=s(sA);jLe=n(CJe,"STRONG",{});var cla=s(jLe);yJr=r(cla,"electra"),cla.forEach(t),xJr=r(CJe," \u2014 "),Ite=n(CJe,"A",{href:!0});var mla=s(Ite);$Jr=r(mla,"TFElectraForMultipleChoice"),mla.forEach(t),kJr=r(CJe," (ELECTRA model)"),CJe.forEach(t),SJr=i(Te),lA=n(Te,"LI",{});var wJe=s(lA);DLe=n(wJe,"STRONG",{});var fla=s(DLe);RJr=r(fla,"flaubert"),fla.forEach(t),PJr=r(wJe," \u2014 "),Nte=n(wJe,"A",{href:!0});var gla=s(Nte);BJr=r(gla,"TFFlaubertForMultipleChoice"),gla.forEach(t),IJr=r(wJe," (FlauBERT model)"),wJe.forEach(t),NJr=i(Te),iA=n(Te,"LI",{});var AJe=s(iA);GLe=n(AJe,"STRONG",{});var hla=s(GLe);qJr=r(hla,"funnel"),hla.forEach(t),jJr=r(AJe," \u2014 "),qte=n(AJe,"A",{href:!0});var ula=s(qte);DJr=r(ula,"TFFunnelForMultipleChoice"),ula.forEach(t),GJr=r(AJe," (Funnel Transformer model)"),AJe.forEach(t),OJr=i(Te),dA=n(Te,"LI",{});var LJe=s(dA);OLe=n(LJe,"STRONG",{});var pla=s(OLe);VJr=r(pla,"longformer"),pla.forEach(t),XJr=r(LJe," \u2014 "),jte=n(LJe,"A",{href:!0});var _la=s(jte);zJr=r(_la,"TFLongformerForMultipleChoice"),_la.forEach(t),QJr=r(LJe," (Longformer model)"),LJe.forEach(t),WJr=i(Te),cA=n(Te,"LI",{});var yJe=s(cA);VLe=n(yJe,"STRONG",{});var bla=s(VLe);UJr=r(bla,"mobilebert"),bla.forEach(t),HJr=r(yJe," \u2014 "),Dte=n(yJe,"A",{href:!0});var vla=s(Dte);JJr=r(vla,"TFMobileBertForMultipleChoice"),vla.forEach(t),YJr=r(yJe," (MobileBERT model)"),yJe.forEach(t),KJr=i(Te),mA=n(Te,"LI",{});var xJe=s(mA);XLe=n(xJe,"STRONG",{});var Fla=s(XLe);ZJr=r(Fla,"mpnet"),Fla.forEach(t),eYr=r(xJe," \u2014 "),Gte=n(xJe,"A",{href:!0});var Tla=s(Gte);oYr=r(Tla,"TFMPNetForMultipleChoice"),Tla.forEach(t),rYr=r(xJe," (MPNet model)"),xJe.forEach(t),tYr=i(Te),fA=n(Te,"LI",{});var $Je=s(fA);zLe=n($Je,"STRONG",{});var Mla=s(zLe);aYr=r(Mla,"rembert"),Mla.forEach(t),nYr=r($Je," \u2014 "),Ote=n($Je,"A",{href:!0});var Ela=s(Ote);sYr=r(Ela,"TFRemBertForMultipleChoice"),Ela.forEach(t),lYr=r($Je," (RemBERT model)"),$Je.forEach(t),iYr=i(Te),gA=n(Te,"LI",{});var kJe=s(gA);QLe=n(kJe,"STRONG",{});var Cla=s(QLe);dYr=r(Cla,"roberta"),Cla.forEach(t),cYr=r(kJe," \u2014 "),Vte=n(kJe,"A",{href:!0});var wla=s(Vte);mYr=r(wla,"TFRobertaForMultipleChoice"),wla.forEach(t),fYr=r(kJe," (RoBERTa model)"),kJe.forEach(t),gYr=i(Te),hA=n(Te,"LI",{});var SJe=s(hA);WLe=n(SJe,"STRONG",{});var Ala=s(WLe);hYr=r(Ala,"roformer"),Ala.forEach(t),uYr=r(SJe," \u2014 "),Xte=n(SJe,"A",{href:!0});var Lla=s(Xte);pYr=r(Lla,"TFRoFormerForMultipleChoice"),Lla.forEach(t),_Yr=r(SJe," (RoFormer model)"),SJe.forEach(t),bYr=i(Te),uA=n(Te,"LI",{});var RJe=s(uA);ULe=n(RJe,"STRONG",{});var yla=s(ULe);vYr=r(yla,"xlm"),yla.forEach(t),FYr=r(RJe," \u2014 "),zte=n(RJe,"A",{href:!0});var xla=s(zte);TYr=r(xla,"TFXLMForMultipleChoice"),xla.forEach(t),MYr=r(RJe," (XLM model)"),RJe.forEach(t),EYr=i(Te),pA=n(Te,"LI",{});var PJe=s(pA);HLe=n(PJe,"STRONG",{});var $la=s(HLe);CYr=r($la,"xlm-roberta"),$la.forEach(t),wYr=r(PJe," \u2014 "),Qte=n(PJe,"A",{href:!0});var kla=s(Qte);AYr=r(kla,"TFXLMRobertaForMultipleChoice"),kla.forEach(t),LYr=r(PJe," (XLM-RoBERTa model)"),PJe.forEach(t),yYr=i(Te),_A=n(Te,"LI",{});var BJe=s(_A);JLe=n(BJe,"STRONG",{});var Sla=s(JLe);xYr=r(Sla,"xlnet"),Sla.forEach(t),$Yr=r(BJe," \u2014 "),Wte=n(BJe,"A",{href:!0});var Rla=s(Wte);kYr=r(Rla,"TFXLNetForMultipleChoice"),Rla.forEach(t),SYr=r(BJe," (XLNet model)"),BJe.forEach(t),Te.forEach(t),RYr=i(bi),T(bA.$$.fragment,bi),bi.forEach(t),_i.forEach(t),loo=i(m),pm=n(m,"H2",{class:!0});var Mto=s(pm);vA=n(Mto,"A",{id:!0,class:!0,href:!0});var Pla=s(vA);YLe=n(Pla,"SPAN",{});var Bla=s(YLe);T(qS.$$.fragment,Bla),Bla.forEach(t),Pla.forEach(t),PYr=i(Mto),KLe=n(Mto,"SPAN",{});var Ila=s(KLe);BYr=r(Ila,"TFAutoModelForNextSentencePrediction"),Ila.forEach(t),Mto.forEach(t),ioo=i(m),ur=n(m,"DIV",{class:!0});var vi=s(ur);T(jS.$$.fragment,vi),IYr=i(vi),_m=n(vi,"P",{});var fde=s(_m);NYr=r(fde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ute=n(fde,"A",{href:!0});var Nla=s(Ute);qYr=r(Nla,"from_pretrained()"),Nla.forEach(t),jYr=r(fde," class method or the "),Hte=n(fde,"A",{href:!0});var qla=s(Hte);DYr=r(qla,"from_config()"),qla.forEach(t),GYr=r(fde,` class
method.`),fde.forEach(t),OYr=i(vi),DS=n(vi,"P",{});var Eto=s(DS);VYr=r(Eto,"This class cannot be instantiated directly using "),ZLe=n(Eto,"CODE",{});var jla=s(ZLe);XYr=r(jla,"__init__()"),jla.forEach(t),zYr=r(Eto," (throws an error)."),Eto.forEach(t),QYr=i(vi),Zt=n(vi,"DIV",{class:!0});var c9=s(Zt);T(GS.$$.fragment,c9),WYr=i(c9),eye=n(c9,"P",{});var Dla=s(eye);UYr=r(Dla,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Dla.forEach(t),HYr=i(c9),bm=n(c9,"P",{});var gde=s(bm);JYr=r(gde,`Note:
Loading a model from its configuration file does `),oye=n(gde,"STRONG",{});var Gla=s(oye);YYr=r(Gla,"not"),Gla.forEach(t),KYr=r(gde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jte=n(gde,"A",{href:!0});var Ola=s(Jte);ZYr=r(Ola,"from_pretrained()"),Ola.forEach(t),eKr=r(gde," to load the model weights."),gde.forEach(t),oKr=i(c9),T(FA.$$.fragment,c9),c9.forEach(t),rKr=i(vi),zr=n(vi,"DIV",{class:!0});var Fi=s(zr);T(OS.$$.fragment,Fi),tKr=i(Fi),rye=n(Fi,"P",{});var Vla=s(rye);aKr=r(Vla,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vla.forEach(t),nKr=i(Fi),Pn=n(Fi,"P",{});var m9=s(Pn);sKr=r(m9,"The model class to instantiate is selected based on the "),tye=n(m9,"CODE",{});var Xla=s(tye);lKr=r(Xla,"model_type"),Xla.forEach(t),iKr=r(m9,` property of the config object (either
passed as an argument or loaded from `),aye=n(m9,"CODE",{});var zla=s(aye);dKr=r(zla,"pretrained_model_name_or_path"),zla.forEach(t),cKr=r(m9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nye=n(m9,"CODE",{});var Qla=s(nye);mKr=r(Qla,"pretrained_model_name_or_path"),Qla.forEach(t),fKr=r(m9,":"),m9.forEach(t),gKr=i(Fi),VS=n(Fi,"UL",{});var Cto=s(VS);TA=n(Cto,"LI",{});var IJe=s(TA);sye=n(IJe,"STRONG",{});var Wla=s(sye);hKr=r(Wla,"bert"),Wla.forEach(t),uKr=r(IJe," \u2014 "),Yte=n(IJe,"A",{href:!0});var Ula=s(Yte);pKr=r(Ula,"TFBertForNextSentencePrediction"),Ula.forEach(t),_Kr=r(IJe," (BERT model)"),IJe.forEach(t),bKr=i(Cto),MA=n(Cto,"LI",{});var NJe=s(MA);lye=n(NJe,"STRONG",{});var Hla=s(lye);vKr=r(Hla,"mobilebert"),Hla.forEach(t),FKr=r(NJe," \u2014 "),Kte=n(NJe,"A",{href:!0});var Jla=s(Kte);TKr=r(Jla,"TFMobileBertForNextSentencePrediction"),Jla.forEach(t),MKr=r(NJe," (MobileBERT model)"),NJe.forEach(t),Cto.forEach(t),EKr=i(Fi),T(EA.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),doo=i(m),vm=n(m,"H2",{class:!0});var wto=s(vm);CA=n(wto,"A",{id:!0,class:!0,href:!0});var Yla=s(CA);iye=n(Yla,"SPAN",{});var Kla=s(iye);T(XS.$$.fragment,Kla),Kla.forEach(t),Yla.forEach(t),CKr=i(wto),dye=n(wto,"SPAN",{});var Zla=s(dye);wKr=r(Zla,"TFAutoModelForTableQuestionAnswering"),Zla.forEach(t),wto.forEach(t),coo=i(m),pr=n(m,"DIV",{class:!0});var Ti=s(pr);T(zS.$$.fragment,Ti),AKr=i(Ti),Fm=n(Ti,"P",{});var hde=s(Fm);LKr=r(hde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Zte=n(hde,"A",{href:!0});var eia=s(Zte);yKr=r(eia,"from_pretrained()"),eia.forEach(t),xKr=r(hde," class method or the "),eae=n(hde,"A",{href:!0});var oia=s(eae);$Kr=r(oia,"from_config()"),oia.forEach(t),kKr=r(hde,` class
method.`),hde.forEach(t),SKr=i(Ti),QS=n(Ti,"P",{});var Ato=s(QS);RKr=r(Ato,"This class cannot be instantiated directly using "),cye=n(Ato,"CODE",{});var ria=s(cye);PKr=r(ria,"__init__()"),ria.forEach(t),BKr=r(Ato," (throws an error)."),Ato.forEach(t),IKr=i(Ti),ea=n(Ti,"DIV",{class:!0});var f9=s(ea);T(WS.$$.fragment,f9),NKr=i(f9),mye=n(f9,"P",{});var tia=s(mye);qKr=r(tia,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),tia.forEach(t),jKr=i(f9),Tm=n(f9,"P",{});var ude=s(Tm);DKr=r(ude,`Note:
Loading a model from its configuration file does `),fye=n(ude,"STRONG",{});var aia=s(fye);GKr=r(aia,"not"),aia.forEach(t),OKr=r(ude,` load the model weights. It only affects the
model\u2019s configuration. Use `),oae=n(ude,"A",{href:!0});var nia=s(oae);VKr=r(nia,"from_pretrained()"),nia.forEach(t),XKr=r(ude," to load the model weights."),ude.forEach(t),zKr=i(f9),T(wA.$$.fragment,f9),f9.forEach(t),QKr=i(Ti),Qr=n(Ti,"DIV",{class:!0});var Mi=s(Qr);T(US.$$.fragment,Mi),WKr=i(Mi),gye=n(Mi,"P",{});var sia=s(gye);UKr=r(sia,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sia.forEach(t),HKr=i(Mi),Bn=n(Mi,"P",{});var g9=s(Bn);JKr=r(g9,"The model class to instantiate is selected based on the "),hye=n(g9,"CODE",{});var lia=s(hye);YKr=r(lia,"model_type"),lia.forEach(t),KKr=r(g9,` property of the config object (either
passed as an argument or loaded from `),uye=n(g9,"CODE",{});var iia=s(uye);ZKr=r(iia,"pretrained_model_name_or_path"),iia.forEach(t),eZr=r(g9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pye=n(g9,"CODE",{});var dia=s(pye);oZr=r(dia,"pretrained_model_name_or_path"),dia.forEach(t),rZr=r(g9,":"),g9.forEach(t),tZr=i(Mi),_ye=n(Mi,"UL",{});var cia=s(_ye);AA=n(cia,"LI",{});var qJe=s(AA);bye=n(qJe,"STRONG",{});var mia=s(bye);aZr=r(mia,"tapas"),mia.forEach(t),nZr=r(qJe," \u2014 "),rae=n(qJe,"A",{href:!0});var fia=s(rae);sZr=r(fia,"TFTapasForQuestionAnswering"),fia.forEach(t),lZr=r(qJe," (TAPAS model)"),qJe.forEach(t),cia.forEach(t),iZr=i(Mi),T(LA.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),moo=i(m),Mm=n(m,"H2",{class:!0});var Lto=s(Mm);yA=n(Lto,"A",{id:!0,class:!0,href:!0});var gia=s(yA);vye=n(gia,"SPAN",{});var hia=s(vye);T(HS.$$.fragment,hia),hia.forEach(t),gia.forEach(t),dZr=i(Lto),Fye=n(Lto,"SPAN",{});var uia=s(Fye);cZr=r(uia,"TFAutoModelForDocumentQuestionAnswering"),uia.forEach(t),Lto.forEach(t),foo=i(m),_r=n(m,"DIV",{class:!0});var Ei=s(_r);T(JS.$$.fragment,Ei),mZr=i(Ei),Em=n(Ei,"P",{});var pde=s(Em);fZr=r(pde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a document question answering head) when created
with the `),tae=n(pde,"A",{href:!0});var pia=s(tae);gZr=r(pia,"from_pretrained()"),pia.forEach(t),hZr=r(pde," class method or the "),aae=n(pde,"A",{href:!0});var _ia=s(aae);uZr=r(_ia,"from_config()"),_ia.forEach(t),pZr=r(pde,` class
method.`),pde.forEach(t),_Zr=i(Ei),YS=n(Ei,"P",{});var yto=s(YS);bZr=r(yto,"This class cannot be instantiated directly using "),Tye=n(yto,"CODE",{});var bia=s(Tye);vZr=r(bia,"__init__()"),bia.forEach(t),FZr=r(yto," (throws an error)."),yto.forEach(t),TZr=i(Ei),oa=n(Ei,"DIV",{class:!0});var h9=s(oa);T(KS.$$.fragment,h9),MZr=i(h9),Mye=n(h9,"P",{});var via=s(Mye);EZr=r(via,"Instantiates one of the model classes of the library (with a document question answering head) from a configuration."),via.forEach(t),CZr=i(h9),Cm=n(h9,"P",{});var _de=s(Cm);wZr=r(_de,`Note:
Loading a model from its configuration file does `),Eye=n(_de,"STRONG",{});var Fia=s(Eye);AZr=r(Fia,"not"),Fia.forEach(t),LZr=r(_de,` load the model weights. It only affects the
model\u2019s configuration. Use `),nae=n(_de,"A",{href:!0});var Tia=s(nae);yZr=r(Tia,"from_pretrained()"),Tia.forEach(t),xZr=r(_de," to load the model weights."),_de.forEach(t),$Zr=i(h9),T(xA.$$.fragment,h9),h9.forEach(t),kZr=i(Ei),Wr=n(Ei,"DIV",{class:!0});var Ci=s(Wr);T(ZS.$$.fragment,Ci),SZr=i(Ci),Cye=n(Ci,"P",{});var Mia=s(Cye);RZr=r(Mia,"Instantiate one of the model classes of the library (with a document question answering head) from a pretrained model."),Mia.forEach(t),PZr=i(Ci),In=n(Ci,"P",{});var u9=s(In);BZr=r(u9,"The model class to instantiate is selected based on the "),wye=n(u9,"CODE",{});var Eia=s(wye);IZr=r(Eia,"model_type"),Eia.forEach(t),NZr=r(u9,` property of the config object (either
passed as an argument or loaded from `),Aye=n(u9,"CODE",{});var Cia=s(Aye);qZr=r(Cia,"pretrained_model_name_or_path"),Cia.forEach(t),jZr=r(u9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lye=n(u9,"CODE",{});var wia=s(Lye);DZr=r(wia,"pretrained_model_name_or_path"),wia.forEach(t),GZr=r(u9,":"),u9.forEach(t),OZr=i(Ci),yye=n(Ci,"UL",{});var Aia=s(yye);$A=n(Aia,"LI",{});var jJe=s($A);xye=n(jJe,"STRONG",{});var Lia=s(xye);VZr=r(Lia,"layoutlm"),Lia.forEach(t),XZr=r(jJe," \u2014 "),sae=n(jJe,"A",{href:!0});var yia=s(sae);zZr=r(yia,"TFLayoutLMForQuestionAnswering"),yia.forEach(t),QZr=r(jJe," (LayoutLM model)"),jJe.forEach(t),Aia.forEach(t),WZr=i(Ci),T(kA.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),goo=i(m),wm=n(m,"H2",{class:!0});var xto=s(wm);SA=n(xto,"A",{id:!0,class:!0,href:!0});var xia=s(SA);$ye=n(xia,"SPAN",{});var $ia=s($ye);T(eR.$$.fragment,$ia),$ia.forEach(t),xia.forEach(t),UZr=i(xto),kye=n(xto,"SPAN",{});var kia=s(kye);HZr=r(kia,"TFAutoModelForTokenClassification"),kia.forEach(t),xto.forEach(t),hoo=i(m),br=n(m,"DIV",{class:!0});var wi=s(br);T(oR.$$.fragment,wi),JZr=i(wi),Am=n(wi,"P",{});var bde=s(Am);YZr=r(bde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lae=n(bde,"A",{href:!0});var Sia=s(lae);KZr=r(Sia,"from_pretrained()"),Sia.forEach(t),ZZr=r(bde," class method or the "),iae=n(bde,"A",{href:!0});var Ria=s(iae);eet=r(Ria,"from_config()"),Ria.forEach(t),oet=r(bde,` class
method.`),bde.forEach(t),ret=i(wi),rR=n(wi,"P",{});var $to=s(rR);tet=r($to,"This class cannot be instantiated directly using "),Sye=n($to,"CODE",{});var Pia=s(Sye);aet=r(Pia,"__init__()"),Pia.forEach(t),net=r($to," (throws an error)."),$to.forEach(t),set=i(wi),ra=n(wi,"DIV",{class:!0});var p9=s(ra);T(tR.$$.fragment,p9),iet=i(p9),Rye=n(p9,"P",{});var Bia=s(Rye);det=r(Bia,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Bia.forEach(t),cet=i(p9),Lm=n(p9,"P",{});var vde=s(Lm);met=r(vde,`Note:
Loading a model from its configuration file does `),Pye=n(vde,"STRONG",{});var Iia=s(Pye);fet=r(Iia,"not"),Iia.forEach(t),get=r(vde,` load the model weights. It only affects the
model\u2019s configuration. Use `),dae=n(vde,"A",{href:!0});var Nia=s(dae);het=r(Nia,"from_pretrained()"),Nia.forEach(t),uet=r(vde," to load the model weights."),vde.forEach(t),pet=i(p9),T(RA.$$.fragment,p9),p9.forEach(t),_et=i(wi),Ur=n(wi,"DIV",{class:!0});var Ai=s(Ur);T(aR.$$.fragment,Ai),bet=i(Ai),Bye=n(Ai,"P",{});var qia=s(Bye);vet=r(qia,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qia.forEach(t),Fet=i(Ai),Nn=n(Ai,"P",{});var _9=s(Nn);Tet=r(_9,"The model class to instantiate is selected based on the "),Iye=n(_9,"CODE",{});var jia=s(Iye);Met=r(jia,"model_type"),jia.forEach(t),Eet=r(_9,` property of the config object (either
passed as an argument or loaded from `),Nye=n(_9,"CODE",{});var Dia=s(Nye);Cet=r(Dia,"pretrained_model_name_or_path"),Dia.forEach(t),wet=r(_9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qye=n(_9,"CODE",{});var Gia=s(qye);Aet=r(Gia,"pretrained_model_name_or_path"),Gia.forEach(t),Let=r(_9,":"),_9.forEach(t),yet=i(Ai),de=n(Ai,"UL",{});var he=s(de);PA=n(he,"LI",{});var DJe=s(PA);jye=n(DJe,"STRONG",{});var Oia=s(jye);xet=r(Oia,"albert"),Oia.forEach(t),$et=r(DJe," \u2014 "),cae=n(DJe,"A",{href:!0});var Via=s(cae);ket=r(Via,"TFAlbertForTokenClassification"),Via.forEach(t),Set=r(DJe," (ALBERT model)"),DJe.forEach(t),Ret=i(he),BA=n(he,"LI",{});var GJe=s(BA);Dye=n(GJe,"STRONG",{});var Xia=s(Dye);Pet=r(Xia,"bert"),Xia.forEach(t),Bet=r(GJe," \u2014 "),mae=n(GJe,"A",{href:!0});var zia=s(mae);Iet=r(zia,"TFBertForTokenClassification"),zia.forEach(t),Net=r(GJe," (BERT model)"),GJe.forEach(t),qet=i(he),IA=n(he,"LI",{});var OJe=s(IA);Gye=n(OJe,"STRONG",{});var Qia=s(Gye);jet=r(Qia,"camembert"),Qia.forEach(t),Det=r(OJe," \u2014 "),fae=n(OJe,"A",{href:!0});var Wia=s(fae);Get=r(Wia,"TFCamembertForTokenClassification"),Wia.forEach(t),Oet=r(OJe," (CamemBERT model)"),OJe.forEach(t),Vet=i(he),NA=n(he,"LI",{});var VJe=s(NA);Oye=n(VJe,"STRONG",{});var Uia=s(Oye);Xet=r(Uia,"convbert"),Uia.forEach(t),zet=r(VJe," \u2014 "),gae=n(VJe,"A",{href:!0});var Hia=s(gae);Qet=r(Hia,"TFConvBertForTokenClassification"),Hia.forEach(t),Wet=r(VJe," (ConvBERT model)"),VJe.forEach(t),Uet=i(he),qA=n(he,"LI",{});var XJe=s(qA);Vye=n(XJe,"STRONG",{});var Jia=s(Vye);Het=r(Jia,"deberta"),Jia.forEach(t),Jet=r(XJe," \u2014 "),hae=n(XJe,"A",{href:!0});var Yia=s(hae);Yet=r(Yia,"TFDebertaForTokenClassification"),Yia.forEach(t),Ket=r(XJe," (DeBERTa model)"),XJe.forEach(t),Zet=i(he),jA=n(he,"LI",{});var zJe=s(jA);Xye=n(zJe,"STRONG",{});var Kia=s(Xye);eot=r(Kia,"deberta-v2"),Kia.forEach(t),oot=r(zJe," \u2014 "),uae=n(zJe,"A",{href:!0});var Zia=s(uae);rot=r(Zia,"TFDebertaV2ForTokenClassification"),Zia.forEach(t),tot=r(zJe," (DeBERTa-v2 model)"),zJe.forEach(t),aot=i(he),DA=n(he,"LI",{});var QJe=s(DA);zye=n(QJe,"STRONG",{});var eda=s(zye);not=r(eda,"distilbert"),eda.forEach(t),sot=r(QJe," \u2014 "),pae=n(QJe,"A",{href:!0});var oda=s(pae);lot=r(oda,"TFDistilBertForTokenClassification"),oda.forEach(t),iot=r(QJe," (DistilBERT model)"),QJe.forEach(t),dot=i(he),GA=n(he,"LI",{});var WJe=s(GA);Qye=n(WJe,"STRONG",{});var rda=s(Qye);cot=r(rda,"electra"),rda.forEach(t),mot=r(WJe," \u2014 "),_ae=n(WJe,"A",{href:!0});var tda=s(_ae);fot=r(tda,"TFElectraForTokenClassification"),tda.forEach(t),got=r(WJe," (ELECTRA model)"),WJe.forEach(t),hot=i(he),OA=n(he,"LI",{});var UJe=s(OA);Wye=n(UJe,"STRONG",{});var ada=s(Wye);uot=r(ada,"flaubert"),ada.forEach(t),pot=r(UJe," \u2014 "),bae=n(UJe,"A",{href:!0});var nda=s(bae);_ot=r(nda,"TFFlaubertForTokenClassification"),nda.forEach(t),bot=r(UJe," (FlauBERT model)"),UJe.forEach(t),vot=i(he),VA=n(he,"LI",{});var HJe=s(VA);Uye=n(HJe,"STRONG",{});var sda=s(Uye);Fot=r(sda,"funnel"),sda.forEach(t),Tot=r(HJe," \u2014 "),vae=n(HJe,"A",{href:!0});var lda=s(vae);Mot=r(lda,"TFFunnelForTokenClassification"),lda.forEach(t),Eot=r(HJe," (Funnel Transformer model)"),HJe.forEach(t),Cot=i(he),XA=n(he,"LI",{});var JJe=s(XA);Hye=n(JJe,"STRONG",{});var ida=s(Hye);wot=r(ida,"layoutlm"),ida.forEach(t),Aot=r(JJe," \u2014 "),Fae=n(JJe,"A",{href:!0});var dda=s(Fae);Lot=r(dda,"TFLayoutLMForTokenClassification"),dda.forEach(t),yot=r(JJe," (LayoutLM model)"),JJe.forEach(t),xot=i(he),zA=n(he,"LI",{});var YJe=s(zA);Jye=n(YJe,"STRONG",{});var cda=s(Jye);$ot=r(cda,"layoutlmv3"),cda.forEach(t),kot=r(YJe," \u2014 "),Tae=n(YJe,"A",{href:!0});var mda=s(Tae);Sot=r(mda,"TFLayoutLMv3ForTokenClassification"),mda.forEach(t),Rot=r(YJe," (LayoutLMv3 model)"),YJe.forEach(t),Pot=i(he),QA=n(he,"LI",{});var KJe=s(QA);Yye=n(KJe,"STRONG",{});var fda=s(Yye);Bot=r(fda,"longformer"),fda.forEach(t),Iot=r(KJe," \u2014 "),Mae=n(KJe,"A",{href:!0});var gda=s(Mae);Not=r(gda,"TFLongformerForTokenClassification"),gda.forEach(t),qot=r(KJe," (Longformer model)"),KJe.forEach(t),jot=i(he),WA=n(he,"LI",{});var ZJe=s(WA);Kye=n(ZJe,"STRONG",{});var hda=s(Kye);Dot=r(hda,"mobilebert"),hda.forEach(t),Got=r(ZJe," \u2014 "),Eae=n(ZJe,"A",{href:!0});var uda=s(Eae);Oot=r(uda,"TFMobileBertForTokenClassification"),uda.forEach(t),Vot=r(ZJe," (MobileBERT model)"),ZJe.forEach(t),Xot=i(he),UA=n(he,"LI",{});var eYe=s(UA);Zye=n(eYe,"STRONG",{});var pda=s(Zye);zot=r(pda,"mpnet"),pda.forEach(t),Qot=r(eYe," \u2014 "),Cae=n(eYe,"A",{href:!0});var _da=s(Cae);Wot=r(_da,"TFMPNetForTokenClassification"),_da.forEach(t),Uot=r(eYe," (MPNet model)"),eYe.forEach(t),Hot=i(he),HA=n(he,"LI",{});var oYe=s(HA);e8e=n(oYe,"STRONG",{});var bda=s(e8e);Jot=r(bda,"rembert"),bda.forEach(t),Yot=r(oYe," \u2014 "),wae=n(oYe,"A",{href:!0});var vda=s(wae);Kot=r(vda,"TFRemBertForTokenClassification"),vda.forEach(t),Zot=r(oYe," (RemBERT model)"),oYe.forEach(t),ert=i(he),JA=n(he,"LI",{});var rYe=s(JA);o8e=n(rYe,"STRONG",{});var Fda=s(o8e);ort=r(Fda,"roberta"),Fda.forEach(t),rrt=r(rYe," \u2014 "),Aae=n(rYe,"A",{href:!0});var Tda=s(Aae);trt=r(Tda,"TFRobertaForTokenClassification"),Tda.forEach(t),art=r(rYe," (RoBERTa model)"),rYe.forEach(t),nrt=i(he),YA=n(he,"LI",{});var tYe=s(YA);r8e=n(tYe,"STRONG",{});var Mda=s(r8e);srt=r(Mda,"roformer"),Mda.forEach(t),lrt=r(tYe," \u2014 "),Lae=n(tYe,"A",{href:!0});var Eda=s(Lae);irt=r(Eda,"TFRoFormerForTokenClassification"),Eda.forEach(t),drt=r(tYe," (RoFormer model)"),tYe.forEach(t),crt=i(he),KA=n(he,"LI",{});var aYe=s(KA);t8e=n(aYe,"STRONG",{});var Cda=s(t8e);mrt=r(Cda,"xlm"),Cda.forEach(t),frt=r(aYe," \u2014 "),yae=n(aYe,"A",{href:!0});var wda=s(yae);grt=r(wda,"TFXLMForTokenClassification"),wda.forEach(t),hrt=r(aYe," (XLM model)"),aYe.forEach(t),urt=i(he),ZA=n(he,"LI",{});var nYe=s(ZA);a8e=n(nYe,"STRONG",{});var Ada=s(a8e);prt=r(Ada,"xlm-roberta"),Ada.forEach(t),_rt=r(nYe," \u2014 "),xae=n(nYe,"A",{href:!0});var Lda=s(xae);brt=r(Lda,"TFXLMRobertaForTokenClassification"),Lda.forEach(t),vrt=r(nYe," (XLM-RoBERTa model)"),nYe.forEach(t),Frt=i(he),e6=n(he,"LI",{});var sYe=s(e6);n8e=n(sYe,"STRONG",{});var yda=s(n8e);Trt=r(yda,"xlnet"),yda.forEach(t),Mrt=r(sYe," \u2014 "),$ae=n(sYe,"A",{href:!0});var xda=s($ae);Ert=r(xda,"TFXLNetForTokenClassification"),xda.forEach(t),Crt=r(sYe," (XLNet model)"),sYe.forEach(t),he.forEach(t),wrt=i(Ai),T(o6.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),uoo=i(m),ym=n(m,"H2",{class:!0});var kto=s(ym);r6=n(kto,"A",{id:!0,class:!0,href:!0});var $da=s(r6);s8e=n($da,"SPAN",{});var kda=s(s8e);T(nR.$$.fragment,kda),kda.forEach(t),$da.forEach(t),Art=i(kto),l8e=n(kto,"SPAN",{});var Sda=s(l8e);Lrt=r(Sda,"TFAutoModelForQuestionAnswering"),Sda.forEach(t),kto.forEach(t),poo=i(m),vr=n(m,"DIV",{class:!0});var Li=s(vr);T(sR.$$.fragment,Li),yrt=i(Li),xm=n(Li,"P",{});var Fde=s(xm);xrt=r(Fde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kae=n(Fde,"A",{href:!0});var Rda=s(kae);$rt=r(Rda,"from_pretrained()"),Rda.forEach(t),krt=r(Fde," class method or the "),Sae=n(Fde,"A",{href:!0});var Pda=s(Sae);Srt=r(Pda,"from_config()"),Pda.forEach(t),Rrt=r(Fde,` class
method.`),Fde.forEach(t),Prt=i(Li),lR=n(Li,"P",{});var Sto=s(lR);Brt=r(Sto,"This class cannot be instantiated directly using "),i8e=n(Sto,"CODE",{});var Bda=s(i8e);Irt=r(Bda,"__init__()"),Bda.forEach(t),Nrt=r(Sto," (throws an error)."),Sto.forEach(t),qrt=i(Li),ta=n(Li,"DIV",{class:!0});var b9=s(ta);T(iR.$$.fragment,b9),jrt=i(b9),d8e=n(b9,"P",{});var Ida=s(d8e);Drt=r(Ida,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ida.forEach(t),Grt=i(b9),$m=n(b9,"P",{});var Tde=s($m);Ort=r(Tde,`Note:
Loading a model from its configuration file does `),c8e=n(Tde,"STRONG",{});var Nda=s(c8e);Vrt=r(Nda,"not"),Nda.forEach(t),Xrt=r(Tde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rae=n(Tde,"A",{href:!0});var qda=s(Rae);zrt=r(qda,"from_pretrained()"),qda.forEach(t),Qrt=r(Tde," to load the model weights."),Tde.forEach(t),Wrt=i(b9),T(t6.$$.fragment,b9),b9.forEach(t),Urt=i(Li),Hr=n(Li,"DIV",{class:!0});var yi=s(Hr);T(dR.$$.fragment,yi),Hrt=i(yi),m8e=n(yi,"P",{});var jda=s(m8e);Jrt=r(jda,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jda.forEach(t),Yrt=i(yi),qn=n(yi,"P",{});var v9=s(qn);Krt=r(v9,"The model class to instantiate is selected based on the "),f8e=n(v9,"CODE",{});var Dda=s(f8e);Zrt=r(Dda,"model_type"),Dda.forEach(t),ett=r(v9,` property of the config object (either
passed as an argument or loaded from `),g8e=n(v9,"CODE",{});var Gda=s(g8e);ott=r(Gda,"pretrained_model_name_or_path"),Gda.forEach(t),rtt=r(v9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h8e=n(v9,"CODE",{});var Oda=s(h8e);ttt=r(Oda,"pretrained_model_name_or_path"),Oda.forEach(t),att=r(v9,":"),v9.forEach(t),ntt=i(yi),ce=n(yi,"UL",{});var ue=s(ce);a6=n(ue,"LI",{});var lYe=s(a6);u8e=n(lYe,"STRONG",{});var Vda=s(u8e);stt=r(Vda,"albert"),Vda.forEach(t),ltt=r(lYe," \u2014 "),Pae=n(lYe,"A",{href:!0});var Xda=s(Pae);itt=r(Xda,"TFAlbertForQuestionAnswering"),Xda.forEach(t),dtt=r(lYe," (ALBERT model)"),lYe.forEach(t),ctt=i(ue),n6=n(ue,"LI",{});var iYe=s(n6);p8e=n(iYe,"STRONG",{});var zda=s(p8e);mtt=r(zda,"bert"),zda.forEach(t),ftt=r(iYe," \u2014 "),Bae=n(iYe,"A",{href:!0});var Qda=s(Bae);gtt=r(Qda,"TFBertForQuestionAnswering"),Qda.forEach(t),htt=r(iYe," (BERT model)"),iYe.forEach(t),utt=i(ue),s6=n(ue,"LI",{});var dYe=s(s6);_8e=n(dYe,"STRONG",{});var Wda=s(_8e);ptt=r(Wda,"camembert"),Wda.forEach(t),_tt=r(dYe," \u2014 "),Iae=n(dYe,"A",{href:!0});var Uda=s(Iae);btt=r(Uda,"TFCamembertForQuestionAnswering"),Uda.forEach(t),vtt=r(dYe," (CamemBERT model)"),dYe.forEach(t),Ftt=i(ue),l6=n(ue,"LI",{});var cYe=s(l6);b8e=n(cYe,"STRONG",{});var Hda=s(b8e);Ttt=r(Hda,"convbert"),Hda.forEach(t),Mtt=r(cYe," \u2014 "),Nae=n(cYe,"A",{href:!0});var Jda=s(Nae);Ett=r(Jda,"TFConvBertForQuestionAnswering"),Jda.forEach(t),Ctt=r(cYe," (ConvBERT model)"),cYe.forEach(t),wtt=i(ue),i6=n(ue,"LI",{});var mYe=s(i6);v8e=n(mYe,"STRONG",{});var Yda=s(v8e);Att=r(Yda,"deberta"),Yda.forEach(t),Ltt=r(mYe," \u2014 "),qae=n(mYe,"A",{href:!0});var Kda=s(qae);ytt=r(Kda,"TFDebertaForQuestionAnswering"),Kda.forEach(t),xtt=r(mYe," (DeBERTa model)"),mYe.forEach(t),$tt=i(ue),d6=n(ue,"LI",{});var fYe=s(d6);F8e=n(fYe,"STRONG",{});var Zda=s(F8e);ktt=r(Zda,"deberta-v2"),Zda.forEach(t),Stt=r(fYe," \u2014 "),jae=n(fYe,"A",{href:!0});var eca=s(jae);Rtt=r(eca,"TFDebertaV2ForQuestionAnswering"),eca.forEach(t),Ptt=r(fYe," (DeBERTa-v2 model)"),fYe.forEach(t),Btt=i(ue),c6=n(ue,"LI",{});var gYe=s(c6);T8e=n(gYe,"STRONG",{});var oca=s(T8e);Itt=r(oca,"distilbert"),oca.forEach(t),Ntt=r(gYe," \u2014 "),Dae=n(gYe,"A",{href:!0});var rca=s(Dae);qtt=r(rca,"TFDistilBertForQuestionAnswering"),rca.forEach(t),jtt=r(gYe," (DistilBERT model)"),gYe.forEach(t),Dtt=i(ue),m6=n(ue,"LI",{});var hYe=s(m6);M8e=n(hYe,"STRONG",{});var tca=s(M8e);Gtt=r(tca,"electra"),tca.forEach(t),Ott=r(hYe," \u2014 "),Gae=n(hYe,"A",{href:!0});var aca=s(Gae);Vtt=r(aca,"TFElectraForQuestionAnswering"),aca.forEach(t),Xtt=r(hYe," (ELECTRA model)"),hYe.forEach(t),ztt=i(ue),f6=n(ue,"LI",{});var uYe=s(f6);E8e=n(uYe,"STRONG",{});var nca=s(E8e);Qtt=r(nca,"flaubert"),nca.forEach(t),Wtt=r(uYe," \u2014 "),Oae=n(uYe,"A",{href:!0});var sca=s(Oae);Utt=r(sca,"TFFlaubertForQuestionAnsweringSimple"),sca.forEach(t),Htt=r(uYe," (FlauBERT model)"),uYe.forEach(t),Jtt=i(ue),g6=n(ue,"LI",{});var pYe=s(g6);C8e=n(pYe,"STRONG",{});var lca=s(C8e);Ytt=r(lca,"funnel"),lca.forEach(t),Ktt=r(pYe," \u2014 "),Vae=n(pYe,"A",{href:!0});var ica=s(Vae);Ztt=r(ica,"TFFunnelForQuestionAnswering"),ica.forEach(t),eat=r(pYe," (Funnel Transformer model)"),pYe.forEach(t),oat=i(ue),h6=n(ue,"LI",{});var _Ye=s(h6);w8e=n(_Ye,"STRONG",{});var dca=s(w8e);rat=r(dca,"gptj"),dca.forEach(t),tat=r(_Ye," \u2014 "),Xae=n(_Ye,"A",{href:!0});var cca=s(Xae);aat=r(cca,"TFGPTJForQuestionAnswering"),cca.forEach(t),nat=r(_Ye," (GPT-J model)"),_Ye.forEach(t),sat=i(ue),u6=n(ue,"LI",{});var bYe=s(u6);A8e=n(bYe,"STRONG",{});var mca=s(A8e);lat=r(mca,"layoutlmv3"),mca.forEach(t),iat=r(bYe," \u2014 "),zae=n(bYe,"A",{href:!0});var fca=s(zae);dat=r(fca,"TFLayoutLMv3ForQuestionAnswering"),fca.forEach(t),cat=r(bYe," (LayoutLMv3 model)"),bYe.forEach(t),mat=i(ue),p6=n(ue,"LI",{});var vYe=s(p6);L8e=n(vYe,"STRONG",{});var gca=s(L8e);fat=r(gca,"longformer"),gca.forEach(t),gat=r(vYe," \u2014 "),Qae=n(vYe,"A",{href:!0});var hca=s(Qae);hat=r(hca,"TFLongformerForQuestionAnswering"),hca.forEach(t),uat=r(vYe," (Longformer model)"),vYe.forEach(t),pat=i(ue),_6=n(ue,"LI",{});var FYe=s(_6);y8e=n(FYe,"STRONG",{});var uca=s(y8e);_at=r(uca,"mobilebert"),uca.forEach(t),bat=r(FYe," \u2014 "),Wae=n(FYe,"A",{href:!0});var pca=s(Wae);vat=r(pca,"TFMobileBertForQuestionAnswering"),pca.forEach(t),Fat=r(FYe," (MobileBERT model)"),FYe.forEach(t),Tat=i(ue),b6=n(ue,"LI",{});var TYe=s(b6);x8e=n(TYe,"STRONG",{});var _ca=s(x8e);Mat=r(_ca,"mpnet"),_ca.forEach(t),Eat=r(TYe," \u2014 "),Uae=n(TYe,"A",{href:!0});var bca=s(Uae);Cat=r(bca,"TFMPNetForQuestionAnswering"),bca.forEach(t),wat=r(TYe," (MPNet model)"),TYe.forEach(t),Aat=i(ue),v6=n(ue,"LI",{});var MYe=s(v6);$8e=n(MYe,"STRONG",{});var vca=s($8e);Lat=r(vca,"rembert"),vca.forEach(t),yat=r(MYe," \u2014 "),Hae=n(MYe,"A",{href:!0});var Fca=s(Hae);xat=r(Fca,"TFRemBertForQuestionAnswering"),Fca.forEach(t),$at=r(MYe," (RemBERT model)"),MYe.forEach(t),kat=i(ue),F6=n(ue,"LI",{});var EYe=s(F6);k8e=n(EYe,"STRONG",{});var Tca=s(k8e);Sat=r(Tca,"roberta"),Tca.forEach(t),Rat=r(EYe," \u2014 "),Jae=n(EYe,"A",{href:!0});var Mca=s(Jae);Pat=r(Mca,"TFRobertaForQuestionAnswering"),Mca.forEach(t),Bat=r(EYe," (RoBERTa model)"),EYe.forEach(t),Iat=i(ue),T6=n(ue,"LI",{});var CYe=s(T6);S8e=n(CYe,"STRONG",{});var Eca=s(S8e);Nat=r(Eca,"roformer"),Eca.forEach(t),qat=r(CYe," \u2014 "),Yae=n(CYe,"A",{href:!0});var Cca=s(Yae);jat=r(Cca,"TFRoFormerForQuestionAnswering"),Cca.forEach(t),Dat=r(CYe," (RoFormer model)"),CYe.forEach(t),Gat=i(ue),M6=n(ue,"LI",{});var wYe=s(M6);R8e=n(wYe,"STRONG",{});var wca=s(R8e);Oat=r(wca,"xlm"),wca.forEach(t),Vat=r(wYe," \u2014 "),Kae=n(wYe,"A",{href:!0});var Aca=s(Kae);Xat=r(Aca,"TFXLMForQuestionAnsweringSimple"),Aca.forEach(t),zat=r(wYe," (XLM model)"),wYe.forEach(t),Qat=i(ue),E6=n(ue,"LI",{});var AYe=s(E6);P8e=n(AYe,"STRONG",{});var Lca=s(P8e);Wat=r(Lca,"xlm-roberta"),Lca.forEach(t),Uat=r(AYe," \u2014 "),Zae=n(AYe,"A",{href:!0});var yca=s(Zae);Hat=r(yca,"TFXLMRobertaForQuestionAnswering"),yca.forEach(t),Jat=r(AYe," (XLM-RoBERTa model)"),AYe.forEach(t),Yat=i(ue),C6=n(ue,"LI",{});var LYe=s(C6);B8e=n(LYe,"STRONG",{});var xca=s(B8e);Kat=r(xca,"xlnet"),xca.forEach(t),Zat=r(LYe," \u2014 "),ene=n(LYe,"A",{href:!0});var $ca=s(ene);ent=r($ca,"TFXLNetForQuestionAnsweringSimple"),$ca.forEach(t),ont=r(LYe," (XLNet model)"),LYe.forEach(t),ue.forEach(t),rnt=i(yi),T(w6.$$.fragment,yi),yi.forEach(t),Li.forEach(t),_oo=i(m),km=n(m,"H2",{class:!0});var Rto=s(km);A6=n(Rto,"A",{id:!0,class:!0,href:!0});var kca=s(A6);I8e=n(kca,"SPAN",{});var Sca=s(I8e);T(cR.$$.fragment,Sca),Sca.forEach(t),kca.forEach(t),tnt=i(Rto),N8e=n(Rto,"SPAN",{});var Rca=s(N8e);ant=r(Rca,"TFAutoModelForVision2Seq"),Rca.forEach(t),Rto.forEach(t),boo=i(m),Fr=n(m,"DIV",{class:!0});var xi=s(Fr);T(mR.$$.fragment,xi),nnt=i(xi),Sm=n(xi,"P",{});var Mde=s(Sm);snt=r(Mde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),one=n(Mde,"A",{href:!0});var Pca=s(one);lnt=r(Pca,"from_pretrained()"),Pca.forEach(t),int=r(Mde," class method or the "),rne=n(Mde,"A",{href:!0});var Bca=s(rne);dnt=r(Bca,"from_config()"),Bca.forEach(t),cnt=r(Mde,` class
method.`),Mde.forEach(t),mnt=i(xi),fR=n(xi,"P",{});var Pto=s(fR);fnt=r(Pto,"This class cannot be instantiated directly using "),q8e=n(Pto,"CODE",{});var Ica=s(q8e);gnt=r(Ica,"__init__()"),Ica.forEach(t),hnt=r(Pto," (throws an error)."),Pto.forEach(t),unt=i(xi),aa=n(xi,"DIV",{class:!0});var F9=s(aa);T(gR.$$.fragment,F9),pnt=i(F9),j8e=n(F9,"P",{});var Nca=s(j8e);_nt=r(Nca,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Nca.forEach(t),bnt=i(F9),Rm=n(F9,"P",{});var Ede=s(Rm);vnt=r(Ede,`Note:
Loading a model from its configuration file does `),D8e=n(Ede,"STRONG",{});var qca=s(D8e);Fnt=r(qca,"not"),qca.forEach(t),Tnt=r(Ede,` load the model weights. It only affects the
model\u2019s configuration. Use `),tne=n(Ede,"A",{href:!0});var jca=s(tne);Mnt=r(jca,"from_pretrained()"),jca.forEach(t),Ent=r(Ede," to load the model weights."),Ede.forEach(t),Cnt=i(F9),T(L6.$$.fragment,F9),F9.forEach(t),wnt=i(xi),Jr=n(xi,"DIV",{class:!0});var $i=s(Jr);T(hR.$$.fragment,$i),Ant=i($i),G8e=n($i,"P",{});var Dca=s(G8e);Lnt=r(Dca,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Dca.forEach(t),ynt=i($i),jn=n($i,"P",{});var T9=s(jn);xnt=r(T9,"The model class to instantiate is selected based on the "),O8e=n(T9,"CODE",{});var Gca=s(O8e);$nt=r(Gca,"model_type"),Gca.forEach(t),knt=r(T9,` property of the config object (either
passed as an argument or loaded from `),V8e=n(T9,"CODE",{});var Oca=s(V8e);Snt=r(Oca,"pretrained_model_name_or_path"),Oca.forEach(t),Rnt=r(T9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X8e=n(T9,"CODE",{});var Vca=s(X8e);Pnt=r(Vca,"pretrained_model_name_or_path"),Vca.forEach(t),Bnt=r(T9,":"),T9.forEach(t),Int=i($i),z8e=n($i,"UL",{});var Xca=s(z8e);y6=n(Xca,"LI",{});var yYe=s(y6);Q8e=n(yYe,"STRONG",{});var zca=s(Q8e);Nnt=r(zca,"vision-encoder-decoder"),zca.forEach(t),qnt=r(yYe," \u2014 "),ane=n(yYe,"A",{href:!0});var Qca=s(ane);jnt=r(Qca,"TFVisionEncoderDecoderModel"),Qca.forEach(t),Dnt=r(yYe," (Vision Encoder decoder model)"),yYe.forEach(t),Xca.forEach(t),Gnt=i($i),T(x6.$$.fragment,$i),$i.forEach(t),xi.forEach(t),voo=i(m),Pm=n(m,"H2",{class:!0});var Bto=s(Pm);$6=n(Bto,"A",{id:!0,class:!0,href:!0});var Wca=s($6);W8e=n(Wca,"SPAN",{});var Uca=s(W8e);T(uR.$$.fragment,Uca),Uca.forEach(t),Wca.forEach(t),Ont=i(Bto),U8e=n(Bto,"SPAN",{});var Hca=s(U8e);Vnt=r(Hca,"TFAutoModelForSpeechSeq2Seq"),Hca.forEach(t),Bto.forEach(t),Foo=i(m),Tr=n(m,"DIV",{class:!0});var ki=s(Tr);T(pR.$$.fragment,ki),Xnt=i(ki),Bm=n(ki,"P",{});var Cde=s(Bm);znt=r(Cde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nne=n(Cde,"A",{href:!0});var Jca=s(nne);Qnt=r(Jca,"from_pretrained()"),Jca.forEach(t),Wnt=r(Cde," class method or the "),sne=n(Cde,"A",{href:!0});var Yca=s(sne);Unt=r(Yca,"from_config()"),Yca.forEach(t),Hnt=r(Cde,` class
method.`),Cde.forEach(t),Jnt=i(ki),_R=n(ki,"P",{});var Ito=s(_R);Ynt=r(Ito,"This class cannot be instantiated directly using "),H8e=n(Ito,"CODE",{});var Kca=s(H8e);Knt=r(Kca,"__init__()"),Kca.forEach(t),Znt=r(Ito," (throws an error)."),Ito.forEach(t),est=i(ki),na=n(ki,"DIV",{class:!0});var M9=s(na);T(bR.$$.fragment,M9),ost=i(M9),J8e=n(M9,"P",{});var Zca=s(J8e);rst=r(Zca,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Zca.forEach(t),tst=i(M9),Im=n(M9,"P",{});var wde=s(Im);ast=r(wde,`Note:
Loading a model from its configuration file does `),Y8e=n(wde,"STRONG",{});var ema=s(Y8e);nst=r(ema,"not"),ema.forEach(t),sst=r(wde,` load the model weights. It only affects the
model\u2019s configuration. Use `),lne=n(wde,"A",{href:!0});var oma=s(lne);lst=r(oma,"from_pretrained()"),oma.forEach(t),ist=r(wde," to load the model weights."),wde.forEach(t),dst=i(M9),T(k6.$$.fragment,M9),M9.forEach(t),cst=i(ki),Yr=n(ki,"DIV",{class:!0});var Si=s(Yr);T(vR.$$.fragment,Si),mst=i(Si),K8e=n(Si,"P",{});var rma=s(K8e);fst=r(rma,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),rma.forEach(t),gst=i(Si),Dn=n(Si,"P",{});var E9=s(Dn);hst=r(E9,"The model class to instantiate is selected based on the "),Z8e=n(E9,"CODE",{});var tma=s(Z8e);ust=r(tma,"model_type"),tma.forEach(t),pst=r(E9,` property of the config object (either
passed as an argument or loaded from `),e9e=n(E9,"CODE",{});var ama=s(e9e);_st=r(ama,"pretrained_model_name_or_path"),ama.forEach(t),bst=r(E9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o9e=n(E9,"CODE",{});var nma=s(o9e);vst=r(nma,"pretrained_model_name_or_path"),nma.forEach(t),Fst=r(E9,":"),E9.forEach(t),Tst=i(Si),r9e=n(Si,"UL",{});var sma=s(r9e);S6=n(sma,"LI",{});var xYe=s(S6);t9e=n(xYe,"STRONG",{});var lma=s(t9e);Mst=r(lma,"speech_to_text"),lma.forEach(t),Est=r(xYe," \u2014 "),ine=n(xYe,"A",{href:!0});var ima=s(ine);Cst=r(ima,"TFSpeech2TextForConditionalGeneration"),ima.forEach(t),wst=r(xYe," (Speech2Text model)"),xYe.forEach(t),sma.forEach(t),Ast=i(Si),T(R6.$$.fragment,Si),Si.forEach(t),ki.forEach(t),Too=i(m),Nm=n(m,"H2",{class:!0});var Nto=s(Nm);P6=n(Nto,"A",{id:!0,class:!0,href:!0});var dma=s(P6);a9e=n(dma,"SPAN",{});var cma=s(a9e);T(FR.$$.fragment,cma),cma.forEach(t),dma.forEach(t),Lst=i(Nto),n9e=n(Nto,"SPAN",{});var mma=s(n9e);yst=r(mma,"FlaxAutoModel"),mma.forEach(t),Nto.forEach(t),Moo=i(m),Mr=n(m,"DIV",{class:!0});var Ri=s(Mr);T(TR.$$.fragment,Ri),xst=i(Ri),qm=n(Ri,"P",{});var Ade=s(qm);$st=r(Ade,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dne=n(Ade,"A",{href:!0});var fma=s(dne);kst=r(fma,"from_pretrained()"),fma.forEach(t),Sst=r(Ade," class method or the "),cne=n(Ade,"A",{href:!0});var gma=s(cne);Rst=r(gma,"from_config()"),gma.forEach(t),Pst=r(Ade,` class
method.`),Ade.forEach(t),Bst=i(Ri),MR=n(Ri,"P",{});var qto=s(MR);Ist=r(qto,"This class cannot be instantiated directly using "),s9e=n(qto,"CODE",{});var hma=s(s9e);Nst=r(hma,"__init__()"),hma.forEach(t),qst=r(qto," (throws an error)."),qto.forEach(t),jst=i(Ri),sa=n(Ri,"DIV",{class:!0});var C9=s(sa);T(ER.$$.fragment,C9),Dst=i(C9),l9e=n(C9,"P",{});var uma=s(l9e);Gst=r(uma,"Instantiates one of the base model classes of the library from a configuration."),uma.forEach(t),Ost=i(C9),jm=n(C9,"P",{});var Lde=s(jm);Vst=r(Lde,`Note:
Loading a model from its configuration file does `),i9e=n(Lde,"STRONG",{});var pma=s(i9e);Xst=r(pma,"not"),pma.forEach(t),zst=r(Lde,` load the model weights. It only affects the
model\u2019s configuration. Use `),mne=n(Lde,"A",{href:!0});var _ma=s(mne);Qst=r(_ma,"from_pretrained()"),_ma.forEach(t),Wst=r(Lde," to load the model weights."),Lde.forEach(t),Ust=i(C9),T(B6.$$.fragment,C9),C9.forEach(t),Hst=i(Ri),Kr=n(Ri,"DIV",{class:!0});var Pi=s(Kr);T(CR.$$.fragment,Pi),Jst=i(Pi),d9e=n(Pi,"P",{});var bma=s(d9e);Yst=r(bma,"Instantiate one of the base model classes of the library from a pretrained model."),bma.forEach(t),Kst=i(Pi),Gn=n(Pi,"P",{});var w9=s(Gn);Zst=r(w9,"The model class to instantiate is selected based on the "),c9e=n(w9,"CODE",{});var vma=s(c9e);elt=r(vma,"model_type"),vma.forEach(t),olt=r(w9,` property of the config object (either
passed as an argument or loaded from `),m9e=n(w9,"CODE",{});var Fma=s(m9e);rlt=r(Fma,"pretrained_model_name_or_path"),Fma.forEach(t),tlt=r(w9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=n(w9,"CODE",{});var Tma=s(f9e);alt=r(Tma,"pretrained_model_name_or_path"),Tma.forEach(t),nlt=r(w9,":"),w9.forEach(t),slt=i(Pi),te=n(Pi,"UL",{});var ne=s(te);I6=n(ne,"LI",{});var $Ye=s(I6);g9e=n($Ye,"STRONG",{});var Mma=s(g9e);llt=r(Mma,"albert"),Mma.forEach(t),ilt=r($Ye," \u2014 "),fne=n($Ye,"A",{href:!0});var Ema=s(fne);dlt=r(Ema,"FlaxAlbertModel"),Ema.forEach(t),clt=r($Ye," (ALBERT model)"),$Ye.forEach(t),mlt=i(ne),N6=n(ne,"LI",{});var kYe=s(N6);h9e=n(kYe,"STRONG",{});var Cma=s(h9e);flt=r(Cma,"bart"),Cma.forEach(t),glt=r(kYe," \u2014 "),gne=n(kYe,"A",{href:!0});var wma=s(gne);hlt=r(wma,"FlaxBartModel"),wma.forEach(t),ult=r(kYe," (BART model)"),kYe.forEach(t),plt=i(ne),q6=n(ne,"LI",{});var SYe=s(q6);u9e=n(SYe,"STRONG",{});var Ama=s(u9e);_lt=r(Ama,"beit"),Ama.forEach(t),blt=r(SYe," \u2014 "),hne=n(SYe,"A",{href:!0});var Lma=s(hne);vlt=r(Lma,"FlaxBeitModel"),Lma.forEach(t),Flt=r(SYe," (BEiT model)"),SYe.forEach(t),Tlt=i(ne),j6=n(ne,"LI",{});var RYe=s(j6);p9e=n(RYe,"STRONG",{});var yma=s(p9e);Mlt=r(yma,"bert"),yma.forEach(t),Elt=r(RYe," \u2014 "),une=n(RYe,"A",{href:!0});var xma=s(une);Clt=r(xma,"FlaxBertModel"),xma.forEach(t),wlt=r(RYe," (BERT model)"),RYe.forEach(t),Alt=i(ne),D6=n(ne,"LI",{});var PYe=s(D6);_9e=n(PYe,"STRONG",{});var $ma=s(_9e);Llt=r($ma,"big_bird"),$ma.forEach(t),ylt=r(PYe," \u2014 "),pne=n(PYe,"A",{href:!0});var kma=s(pne);xlt=r(kma,"FlaxBigBirdModel"),kma.forEach(t),$lt=r(PYe," (BigBird model)"),PYe.forEach(t),klt=i(ne),G6=n(ne,"LI",{});var BYe=s(G6);b9e=n(BYe,"STRONG",{});var Sma=s(b9e);Slt=r(Sma,"blenderbot"),Sma.forEach(t),Rlt=r(BYe," \u2014 "),_ne=n(BYe,"A",{href:!0});var Rma=s(_ne);Plt=r(Rma,"FlaxBlenderbotModel"),Rma.forEach(t),Blt=r(BYe," (Blenderbot model)"),BYe.forEach(t),Ilt=i(ne),O6=n(ne,"LI",{});var IYe=s(O6);v9e=n(IYe,"STRONG",{});var Pma=s(v9e);Nlt=r(Pma,"blenderbot-small"),Pma.forEach(t),qlt=r(IYe," \u2014 "),bne=n(IYe,"A",{href:!0});var Bma=s(bne);jlt=r(Bma,"FlaxBlenderbotSmallModel"),Bma.forEach(t),Dlt=r(IYe," (BlenderbotSmall model)"),IYe.forEach(t),Glt=i(ne),V6=n(ne,"LI",{});var NYe=s(V6);F9e=n(NYe,"STRONG",{});var Ima=s(F9e);Olt=r(Ima,"clip"),Ima.forEach(t),Vlt=r(NYe," \u2014 "),vne=n(NYe,"A",{href:!0});var Nma=s(vne);Xlt=r(Nma,"FlaxCLIPModel"),Nma.forEach(t),zlt=r(NYe," (CLIP model)"),NYe.forEach(t),Qlt=i(ne),X6=n(ne,"LI",{});var qYe=s(X6);T9e=n(qYe,"STRONG",{});var qma=s(T9e);Wlt=r(qma,"distilbert"),qma.forEach(t),Ult=r(qYe," \u2014 "),Fne=n(qYe,"A",{href:!0});var jma=s(Fne);Hlt=r(jma,"FlaxDistilBertModel"),jma.forEach(t),Jlt=r(qYe," (DistilBERT model)"),qYe.forEach(t),Ylt=i(ne),z6=n(ne,"LI",{});var jYe=s(z6);M9e=n(jYe,"STRONG",{});var Dma=s(M9e);Klt=r(Dma,"electra"),Dma.forEach(t),Zlt=r(jYe," \u2014 "),Tne=n(jYe,"A",{href:!0});var Gma=s(Tne);eit=r(Gma,"FlaxElectraModel"),Gma.forEach(t),oit=r(jYe," (ELECTRA model)"),jYe.forEach(t),rit=i(ne),Q6=n(ne,"LI",{});var DYe=s(Q6);E9e=n(DYe,"STRONG",{});var Oma=s(E9e);tit=r(Oma,"gpt2"),Oma.forEach(t),ait=r(DYe," \u2014 "),Mne=n(DYe,"A",{href:!0});var Vma=s(Mne);nit=r(Vma,"FlaxGPT2Model"),Vma.forEach(t),sit=r(DYe," (OpenAI GPT-2 model)"),DYe.forEach(t),lit=i(ne),W6=n(ne,"LI",{});var GYe=s(W6);C9e=n(GYe,"STRONG",{});var Xma=s(C9e);iit=r(Xma,"gpt_neo"),Xma.forEach(t),dit=r(GYe," \u2014 "),Ene=n(GYe,"A",{href:!0});var zma=s(Ene);cit=r(zma,"FlaxGPTNeoModel"),zma.forEach(t),mit=r(GYe," (GPT Neo model)"),GYe.forEach(t),fit=i(ne),U6=n(ne,"LI",{});var OYe=s(U6);w9e=n(OYe,"STRONG",{});var Qma=s(w9e);git=r(Qma,"gptj"),Qma.forEach(t),hit=r(OYe," \u2014 "),Cne=n(OYe,"A",{href:!0});var Wma=s(Cne);uit=r(Wma,"FlaxGPTJModel"),Wma.forEach(t),pit=r(OYe," (GPT-J model)"),OYe.forEach(t),_it=i(ne),H6=n(ne,"LI",{});var VYe=s(H6);A9e=n(VYe,"STRONG",{});var Uma=s(A9e);bit=r(Uma,"longt5"),Uma.forEach(t),vit=r(VYe," \u2014 "),wne=n(VYe,"A",{href:!0});var Hma=s(wne);Fit=r(Hma,"FlaxLongT5Model"),Hma.forEach(t),Tit=r(VYe," (LongT5 model)"),VYe.forEach(t),Mit=i(ne),J6=n(ne,"LI",{});var XYe=s(J6);L9e=n(XYe,"STRONG",{});var Jma=s(L9e);Eit=r(Jma,"marian"),Jma.forEach(t),Cit=r(XYe," \u2014 "),Ane=n(XYe,"A",{href:!0});var Yma=s(Ane);wit=r(Yma,"FlaxMarianModel"),Yma.forEach(t),Ait=r(XYe," (Marian model)"),XYe.forEach(t),Lit=i(ne),Y6=n(ne,"LI",{});var zYe=s(Y6);y9e=n(zYe,"STRONG",{});var Kma=s(y9e);yit=r(Kma,"mbart"),Kma.forEach(t),xit=r(zYe," \u2014 "),Lne=n(zYe,"A",{href:!0});var Zma=s(Lne);$it=r(Zma,"FlaxMBartModel"),Zma.forEach(t),kit=r(zYe," (mBART model)"),zYe.forEach(t),Sit=i(ne),K6=n(ne,"LI",{});var QYe=s(K6);x9e=n(QYe,"STRONG",{});var efa=s(x9e);Rit=r(efa,"mt5"),efa.forEach(t),Pit=r(QYe," \u2014 "),yne=n(QYe,"A",{href:!0});var ofa=s(yne);Bit=r(ofa,"FlaxMT5Model"),ofa.forEach(t),Iit=r(QYe," (MT5 model)"),QYe.forEach(t),Nit=i(ne),Z6=n(ne,"LI",{});var WYe=s(Z6);$9e=n(WYe,"STRONG",{});var rfa=s($9e);qit=r(rfa,"opt"),rfa.forEach(t),jit=r(WYe," \u2014 "),xne=n(WYe,"A",{href:!0});var tfa=s(xne);Dit=r(tfa,"FlaxOPTModel"),tfa.forEach(t),Git=r(WYe," (OPT model)"),WYe.forEach(t),Oit=i(ne),e7=n(ne,"LI",{});var UYe=s(e7);k9e=n(UYe,"STRONG",{});var afa=s(k9e);Vit=r(afa,"pegasus"),afa.forEach(t),Xit=r(UYe," \u2014 "),$ne=n(UYe,"A",{href:!0});var nfa=s($ne);zit=r(nfa,"FlaxPegasusModel"),nfa.forEach(t),Qit=r(UYe," (Pegasus model)"),UYe.forEach(t),Wit=i(ne),o7=n(ne,"LI",{});var HYe=s(o7);S9e=n(HYe,"STRONG",{});var sfa=s(S9e);Uit=r(sfa,"roberta"),sfa.forEach(t),Hit=r(HYe," \u2014 "),kne=n(HYe,"A",{href:!0});var lfa=s(kne);Jit=r(lfa,"FlaxRobertaModel"),lfa.forEach(t),Yit=r(HYe," (RoBERTa model)"),HYe.forEach(t),Kit=i(ne),r7=n(ne,"LI",{});var JYe=s(r7);R9e=n(JYe,"STRONG",{});var ifa=s(R9e);Zit=r(ifa,"roformer"),ifa.forEach(t),edt=r(JYe," \u2014 "),Sne=n(JYe,"A",{href:!0});var dfa=s(Sne);odt=r(dfa,"FlaxRoFormerModel"),dfa.forEach(t),rdt=r(JYe," (RoFormer model)"),JYe.forEach(t),tdt=i(ne),t7=n(ne,"LI",{});var YYe=s(t7);P9e=n(YYe,"STRONG",{});var cfa=s(P9e);adt=r(cfa,"t5"),cfa.forEach(t),ndt=r(YYe," \u2014 "),Rne=n(YYe,"A",{href:!0});var mfa=s(Rne);sdt=r(mfa,"FlaxT5Model"),mfa.forEach(t),ldt=r(YYe," (T5 model)"),YYe.forEach(t),idt=i(ne),a7=n(ne,"LI",{});var KYe=s(a7);B9e=n(KYe,"STRONG",{});var ffa=s(B9e);ddt=r(ffa,"vision-text-dual-encoder"),ffa.forEach(t),cdt=r(KYe," \u2014 "),Pne=n(KYe,"A",{href:!0});var gfa=s(Pne);mdt=r(gfa,"FlaxVisionTextDualEncoderModel"),gfa.forEach(t),fdt=r(KYe," (VisionTextDualEncoder model)"),KYe.forEach(t),gdt=i(ne),n7=n(ne,"LI",{});var ZYe=s(n7);I9e=n(ZYe,"STRONG",{});var hfa=s(I9e);hdt=r(hfa,"vit"),hfa.forEach(t),udt=r(ZYe," \u2014 "),Bne=n(ZYe,"A",{href:!0});var ufa=s(Bne);pdt=r(ufa,"FlaxViTModel"),ufa.forEach(t),_dt=r(ZYe," (ViT model)"),ZYe.forEach(t),bdt=i(ne),s7=n(ne,"LI",{});var eKe=s(s7);N9e=n(eKe,"STRONG",{});var pfa=s(N9e);vdt=r(pfa,"wav2vec2"),pfa.forEach(t),Fdt=r(eKe," \u2014 "),Ine=n(eKe,"A",{href:!0});var _fa=s(Ine);Tdt=r(_fa,"FlaxWav2Vec2Model"),_fa.forEach(t),Mdt=r(eKe," (Wav2Vec2 model)"),eKe.forEach(t),Edt=i(ne),l7=n(ne,"LI",{});var oKe=s(l7);q9e=n(oKe,"STRONG",{});var bfa=s(q9e);Cdt=r(bfa,"xglm"),bfa.forEach(t),wdt=r(oKe," \u2014 "),Nne=n(oKe,"A",{href:!0});var vfa=s(Nne);Adt=r(vfa,"FlaxXGLMModel"),vfa.forEach(t),Ldt=r(oKe," (XGLM model)"),oKe.forEach(t),ydt=i(ne),i7=n(ne,"LI",{});var rKe=s(i7);j9e=n(rKe,"STRONG",{});var Ffa=s(j9e);xdt=r(Ffa,"xlm-roberta"),Ffa.forEach(t),$dt=r(rKe," \u2014 "),qne=n(rKe,"A",{href:!0});var Tfa=s(qne);kdt=r(Tfa,"FlaxXLMRobertaModel"),Tfa.forEach(t),Sdt=r(rKe," (XLM-RoBERTa model)"),rKe.forEach(t),ne.forEach(t),Rdt=i(Pi),T(d7.$$.fragment,Pi),Pi.forEach(t),Ri.forEach(t),Eoo=i(m),Dm=n(m,"H2",{class:!0});var jto=s(Dm);c7=n(jto,"A",{id:!0,class:!0,href:!0});var Mfa=s(c7);D9e=n(Mfa,"SPAN",{});var Efa=s(D9e);T(wR.$$.fragment,Efa),Efa.forEach(t),Mfa.forEach(t),Pdt=i(jto),G9e=n(jto,"SPAN",{});var Cfa=s(G9e);Bdt=r(Cfa,"FlaxAutoModelForCausalLM"),Cfa.forEach(t),jto.forEach(t),Coo=i(m),Er=n(m,"DIV",{class:!0});var Bi=s(Er);T(AR.$$.fragment,Bi),Idt=i(Bi),Gm=n(Bi,"P",{});var yde=s(Gm);Ndt=r(yde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jne=n(yde,"A",{href:!0});var wfa=s(jne);qdt=r(wfa,"from_pretrained()"),wfa.forEach(t),jdt=r(yde," class method or the "),Dne=n(yde,"A",{href:!0});var Afa=s(Dne);Ddt=r(Afa,"from_config()"),Afa.forEach(t),Gdt=r(yde,` class
method.`),yde.forEach(t),Odt=i(Bi),LR=n(Bi,"P",{});var Dto=s(LR);Vdt=r(Dto,"This class cannot be instantiated directly using "),O9e=n(Dto,"CODE",{});var Lfa=s(O9e);Xdt=r(Lfa,"__init__()"),Lfa.forEach(t),zdt=r(Dto," (throws an error)."),Dto.forEach(t),Qdt=i(Bi),la=n(Bi,"DIV",{class:!0});var A9=s(la);T(yR.$$.fragment,A9),Wdt=i(A9),V9e=n(A9,"P",{});var yfa=s(V9e);Udt=r(yfa,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yfa.forEach(t),Hdt=i(A9),Om=n(A9,"P",{});var xde=s(Om);Jdt=r(xde,`Note:
Loading a model from its configuration file does `),X9e=n(xde,"STRONG",{});var xfa=s(X9e);Ydt=r(xfa,"not"),xfa.forEach(t),Kdt=r(xde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gne=n(xde,"A",{href:!0});var $fa=s(Gne);Zdt=r($fa,"from_pretrained()"),$fa.forEach(t),ect=r(xde," to load the model weights."),xde.forEach(t),oct=i(A9),T(m7.$$.fragment,A9),A9.forEach(t),rct=i(Bi),Zr=n(Bi,"DIV",{class:!0});var Ii=s(Zr);T(xR.$$.fragment,Ii),tct=i(Ii),z9e=n(Ii,"P",{});var kfa=s(z9e);act=r(kfa,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kfa.forEach(t),nct=i(Ii),On=n(Ii,"P",{});var L9=s(On);sct=r(L9,"The model class to instantiate is selected based on the "),Q9e=n(L9,"CODE",{});var Sfa=s(Q9e);lct=r(Sfa,"model_type"),Sfa.forEach(t),ict=r(L9,` property of the config object (either
passed as an argument or loaded from `),W9e=n(L9,"CODE",{});var Rfa=s(W9e);dct=r(Rfa,"pretrained_model_name_or_path"),Rfa.forEach(t),cct=r(L9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U9e=n(L9,"CODE",{});var Pfa=s(U9e);mct=r(Pfa,"pretrained_model_name_or_path"),Pfa.forEach(t),fct=r(L9,":"),L9.forEach(t),gct=i(Ii),xe=n(Ii,"UL",{});var qe=s(xe);f7=n(qe,"LI",{});var tKe=s(f7);H9e=n(tKe,"STRONG",{});var Bfa=s(H9e);hct=r(Bfa,"bart"),Bfa.forEach(t),uct=r(tKe," \u2014 "),One=n(tKe,"A",{href:!0});var Ifa=s(One);pct=r(Ifa,"FlaxBartForCausalLM"),Ifa.forEach(t),_ct=r(tKe," (BART model)"),tKe.forEach(t),bct=i(qe),g7=n(qe,"LI",{});var aKe=s(g7);J9e=n(aKe,"STRONG",{});var Nfa=s(J9e);vct=r(Nfa,"bert"),Nfa.forEach(t),Fct=r(aKe," \u2014 "),Vne=n(aKe,"A",{href:!0});var qfa=s(Vne);Tct=r(qfa,"FlaxBertForCausalLM"),qfa.forEach(t),Mct=r(aKe," (BERT model)"),aKe.forEach(t),Ect=i(qe),h7=n(qe,"LI",{});var nKe=s(h7);Y9e=n(nKe,"STRONG",{});var jfa=s(Y9e);Cct=r(jfa,"big_bird"),jfa.forEach(t),wct=r(nKe," \u2014 "),Xne=n(nKe,"A",{href:!0});var Dfa=s(Xne);Act=r(Dfa,"FlaxBigBirdForCausalLM"),Dfa.forEach(t),Lct=r(nKe," (BigBird model)"),nKe.forEach(t),yct=i(qe),u7=n(qe,"LI",{});var sKe=s(u7);K9e=n(sKe,"STRONG",{});var Gfa=s(K9e);xct=r(Gfa,"electra"),Gfa.forEach(t),$ct=r(sKe," \u2014 "),zne=n(sKe,"A",{href:!0});var Ofa=s(zne);kct=r(Ofa,"FlaxElectraForCausalLM"),Ofa.forEach(t),Sct=r(sKe," (ELECTRA model)"),sKe.forEach(t),Rct=i(qe),p7=n(qe,"LI",{});var lKe=s(p7);Z9e=n(lKe,"STRONG",{});var Vfa=s(Z9e);Pct=r(Vfa,"gpt2"),Vfa.forEach(t),Bct=r(lKe," \u2014 "),Qne=n(lKe,"A",{href:!0});var Xfa=s(Qne);Ict=r(Xfa,"FlaxGPT2LMHeadModel"),Xfa.forEach(t),Nct=r(lKe," (OpenAI GPT-2 model)"),lKe.forEach(t),qct=i(qe),_7=n(qe,"LI",{});var iKe=s(_7);exe=n(iKe,"STRONG",{});var zfa=s(exe);jct=r(zfa,"gpt_neo"),zfa.forEach(t),Dct=r(iKe," \u2014 "),Wne=n(iKe,"A",{href:!0});var Qfa=s(Wne);Gct=r(Qfa,"FlaxGPTNeoForCausalLM"),Qfa.forEach(t),Oct=r(iKe," (GPT Neo model)"),iKe.forEach(t),Vct=i(qe),b7=n(qe,"LI",{});var dKe=s(b7);oxe=n(dKe,"STRONG",{});var Wfa=s(oxe);Xct=r(Wfa,"gptj"),Wfa.forEach(t),zct=r(dKe," \u2014 "),Une=n(dKe,"A",{href:!0});var Ufa=s(Une);Qct=r(Ufa,"FlaxGPTJForCausalLM"),Ufa.forEach(t),Wct=r(dKe," (GPT-J model)"),dKe.forEach(t),Uct=i(qe),v7=n(qe,"LI",{});var cKe=s(v7);rxe=n(cKe,"STRONG",{});var Hfa=s(rxe);Hct=r(Hfa,"opt"),Hfa.forEach(t),Jct=r(cKe," \u2014 "),Hne=n(cKe,"A",{href:!0});var Jfa=s(Hne);Yct=r(Jfa,"FlaxOPTForCausalLM"),Jfa.forEach(t),Kct=r(cKe," (OPT model)"),cKe.forEach(t),Zct=i(qe),F7=n(qe,"LI",{});var mKe=s(F7);txe=n(mKe,"STRONG",{});var Yfa=s(txe);emt=r(Yfa,"roberta"),Yfa.forEach(t),omt=r(mKe," \u2014 "),Jne=n(mKe,"A",{href:!0});var Kfa=s(Jne);rmt=r(Kfa,"FlaxRobertaForCausalLM"),Kfa.forEach(t),tmt=r(mKe," (RoBERTa model)"),mKe.forEach(t),amt=i(qe),T7=n(qe,"LI",{});var fKe=s(T7);axe=n(fKe,"STRONG",{});var Zfa=s(axe);nmt=r(Zfa,"xglm"),Zfa.forEach(t),smt=r(fKe," \u2014 "),Yne=n(fKe,"A",{href:!0});var ega=s(Yne);lmt=r(ega,"FlaxXGLMForCausalLM"),ega.forEach(t),imt=r(fKe," (XGLM model)"),fKe.forEach(t),qe.forEach(t),dmt=i(Ii),T(M7.$$.fragment,Ii),Ii.forEach(t),Bi.forEach(t),woo=i(m),Vm=n(m,"H2",{class:!0});var Gto=s(Vm);E7=n(Gto,"A",{id:!0,class:!0,href:!0});var oga=s(E7);nxe=n(oga,"SPAN",{});var rga=s(nxe);T($R.$$.fragment,rga),rga.forEach(t),oga.forEach(t),cmt=i(Gto),sxe=n(Gto,"SPAN",{});var tga=s(sxe);mmt=r(tga,"FlaxAutoModelForPreTraining"),tga.forEach(t),Gto.forEach(t),Aoo=i(m),Cr=n(m,"DIV",{class:!0});var Ni=s(Cr);T(kR.$$.fragment,Ni),fmt=i(Ni),Xm=n(Ni,"P",{});var $de=s(Xm);gmt=r($de,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Kne=n($de,"A",{href:!0});var aga=s(Kne);hmt=r(aga,"from_pretrained()"),aga.forEach(t),umt=r($de," class method or the "),Zne=n($de,"A",{href:!0});var nga=s(Zne);pmt=r(nga,"from_config()"),nga.forEach(t),_mt=r($de,` class
method.`),$de.forEach(t),bmt=i(Ni),SR=n(Ni,"P",{});var Oto=s(SR);vmt=r(Oto,"This class cannot be instantiated directly using "),lxe=n(Oto,"CODE",{});var sga=s(lxe);Fmt=r(sga,"__init__()"),sga.forEach(t),Tmt=r(Oto," (throws an error)."),Oto.forEach(t),Mmt=i(Ni),ia=n(Ni,"DIV",{class:!0});var y9=s(ia);T(RR.$$.fragment,y9),Emt=i(y9),ixe=n(y9,"P",{});var lga=s(ixe);Cmt=r(lga,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lga.forEach(t),wmt=i(y9),zm=n(y9,"P",{});var kde=s(zm);Amt=r(kde,`Note:
Loading a model from its configuration file does `),dxe=n(kde,"STRONG",{});var iga=s(dxe);Lmt=r(iga,"not"),iga.forEach(t),ymt=r(kde,` load the model weights. It only affects the
model\u2019s configuration. Use `),ese=n(kde,"A",{href:!0});var dga=s(ese);xmt=r(dga,"from_pretrained()"),dga.forEach(t),$mt=r(kde," to load the model weights."),kde.forEach(t),kmt=i(y9),T(C7.$$.fragment,y9),y9.forEach(t),Smt=i(Ni),et=n(Ni,"DIV",{class:!0});var qi=s(et);T(PR.$$.fragment,qi),Rmt=i(qi),cxe=n(qi,"P",{});var cga=s(cxe);Pmt=r(cga,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cga.forEach(t),Bmt=i(qi),Vn=n(qi,"P",{});var x9=s(Vn);Imt=r(x9,"The model class to instantiate is selected based on the "),mxe=n(x9,"CODE",{});var mga=s(mxe);Nmt=r(mga,"model_type"),mga.forEach(t),qmt=r(x9,` property of the config object (either
passed as an argument or loaded from `),fxe=n(x9,"CODE",{});var fga=s(fxe);jmt=r(fga,"pretrained_model_name_or_path"),fga.forEach(t),Dmt=r(x9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gxe=n(x9,"CODE",{});var gga=s(gxe);Gmt=r(gga,"pretrained_model_name_or_path"),gga.forEach(t),Omt=r(x9,":"),x9.forEach(t),Vmt=i(qi),Ee=n(qi,"UL",{});var we=s(Ee);w7=n(we,"LI",{});var gKe=s(w7);hxe=n(gKe,"STRONG",{});var hga=s(hxe);Xmt=r(hga,"albert"),hga.forEach(t),zmt=r(gKe," \u2014 "),ose=n(gKe,"A",{href:!0});var uga=s(ose);Qmt=r(uga,"FlaxAlbertForPreTraining"),uga.forEach(t),Wmt=r(gKe," (ALBERT model)"),gKe.forEach(t),Umt=i(we),A7=n(we,"LI",{});var hKe=s(A7);uxe=n(hKe,"STRONG",{});var pga=s(uxe);Hmt=r(pga,"bart"),pga.forEach(t),Jmt=r(hKe," \u2014 "),rse=n(hKe,"A",{href:!0});var _ga=s(rse);Ymt=r(_ga,"FlaxBartForConditionalGeneration"),_ga.forEach(t),Kmt=r(hKe," (BART model)"),hKe.forEach(t),Zmt=i(we),L7=n(we,"LI",{});var uKe=s(L7);pxe=n(uKe,"STRONG",{});var bga=s(pxe);eft=r(bga,"bert"),bga.forEach(t),oft=r(uKe," \u2014 "),tse=n(uKe,"A",{href:!0});var vga=s(tse);rft=r(vga,"FlaxBertForPreTraining"),vga.forEach(t),tft=r(uKe," (BERT model)"),uKe.forEach(t),aft=i(we),y7=n(we,"LI",{});var pKe=s(y7);_xe=n(pKe,"STRONG",{});var Fga=s(_xe);nft=r(Fga,"big_bird"),Fga.forEach(t),sft=r(pKe," \u2014 "),ase=n(pKe,"A",{href:!0});var Tga=s(ase);lft=r(Tga,"FlaxBigBirdForPreTraining"),Tga.forEach(t),ift=r(pKe," (BigBird model)"),pKe.forEach(t),dft=i(we),x7=n(we,"LI",{});var _Ke=s(x7);bxe=n(_Ke,"STRONG",{});var Mga=s(bxe);cft=r(Mga,"electra"),Mga.forEach(t),mft=r(_Ke," \u2014 "),nse=n(_Ke,"A",{href:!0});var Ega=s(nse);fft=r(Ega,"FlaxElectraForPreTraining"),Ega.forEach(t),gft=r(_Ke," (ELECTRA model)"),_Ke.forEach(t),hft=i(we),$7=n(we,"LI",{});var bKe=s($7);vxe=n(bKe,"STRONG",{});var Cga=s(vxe);uft=r(Cga,"longt5"),Cga.forEach(t),pft=r(bKe," \u2014 "),sse=n(bKe,"A",{href:!0});var wga=s(sse);_ft=r(wga,"FlaxLongT5ForConditionalGeneration"),wga.forEach(t),bft=r(bKe," (LongT5 model)"),bKe.forEach(t),vft=i(we),k7=n(we,"LI",{});var vKe=s(k7);Fxe=n(vKe,"STRONG",{});var Aga=s(Fxe);Fft=r(Aga,"mbart"),Aga.forEach(t),Tft=r(vKe," \u2014 "),lse=n(vKe,"A",{href:!0});var Lga=s(lse);Mft=r(Lga,"FlaxMBartForConditionalGeneration"),Lga.forEach(t),Eft=r(vKe," (mBART model)"),vKe.forEach(t),Cft=i(we),S7=n(we,"LI",{});var FKe=s(S7);Txe=n(FKe,"STRONG",{});var yga=s(Txe);wft=r(yga,"mt5"),yga.forEach(t),Aft=r(FKe," \u2014 "),ise=n(FKe,"A",{href:!0});var xga=s(ise);Lft=r(xga,"FlaxMT5ForConditionalGeneration"),xga.forEach(t),yft=r(FKe," (MT5 model)"),FKe.forEach(t),xft=i(we),R7=n(we,"LI",{});var TKe=s(R7);Mxe=n(TKe,"STRONG",{});var $ga=s(Mxe);$ft=r($ga,"roberta"),$ga.forEach(t),kft=r(TKe," \u2014 "),dse=n(TKe,"A",{href:!0});var kga=s(dse);Sft=r(kga,"FlaxRobertaForMaskedLM"),kga.forEach(t),Rft=r(TKe," (RoBERTa model)"),TKe.forEach(t),Pft=i(we),P7=n(we,"LI",{});var MKe=s(P7);Exe=n(MKe,"STRONG",{});var Sga=s(Exe);Bft=r(Sga,"roformer"),Sga.forEach(t),Ift=r(MKe," \u2014 "),cse=n(MKe,"A",{href:!0});var Rga=s(cse);Nft=r(Rga,"FlaxRoFormerForMaskedLM"),Rga.forEach(t),qft=r(MKe," (RoFormer model)"),MKe.forEach(t),jft=i(we),B7=n(we,"LI",{});var EKe=s(B7);Cxe=n(EKe,"STRONG",{});var Pga=s(Cxe);Dft=r(Pga,"t5"),Pga.forEach(t),Gft=r(EKe," \u2014 "),mse=n(EKe,"A",{href:!0});var Bga=s(mse);Oft=r(Bga,"FlaxT5ForConditionalGeneration"),Bga.forEach(t),Vft=r(EKe," (T5 model)"),EKe.forEach(t),Xft=i(we),I7=n(we,"LI",{});var CKe=s(I7);wxe=n(CKe,"STRONG",{});var Iga=s(wxe);zft=r(Iga,"wav2vec2"),Iga.forEach(t),Qft=r(CKe," \u2014 "),fse=n(CKe,"A",{href:!0});var Nga=s(fse);Wft=r(Nga,"FlaxWav2Vec2ForPreTraining"),Nga.forEach(t),Uft=r(CKe," (Wav2Vec2 model)"),CKe.forEach(t),Hft=i(we),N7=n(we,"LI",{});var wKe=s(N7);Axe=n(wKe,"STRONG",{});var qga=s(Axe);Jft=r(qga,"xlm-roberta"),qga.forEach(t),Yft=r(wKe," \u2014 "),gse=n(wKe,"A",{href:!0});var jga=s(gse);Kft=r(jga,"FlaxXLMRobertaForMaskedLM"),jga.forEach(t),Zft=r(wKe," (XLM-RoBERTa model)"),wKe.forEach(t),we.forEach(t),egt=i(qi),T(q7.$$.fragment,qi),qi.forEach(t),Ni.forEach(t),Loo=i(m),Qm=n(m,"H2",{class:!0});var Vto=s(Qm);j7=n(Vto,"A",{id:!0,class:!0,href:!0});var Dga=s(j7);Lxe=n(Dga,"SPAN",{});var Gga=s(Lxe);T(BR.$$.fragment,Gga),Gga.forEach(t),Dga.forEach(t),ogt=i(Vto),yxe=n(Vto,"SPAN",{});var Oga=s(yxe);rgt=r(Oga,"FlaxAutoModelForMaskedLM"),Oga.forEach(t),Vto.forEach(t),yoo=i(m),wr=n(m,"DIV",{class:!0});var ji=s(wr);T(IR.$$.fragment,ji),tgt=i(ji),Wm=n(ji,"P",{});var Sde=s(Wm);agt=r(Sde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hse=n(Sde,"A",{href:!0});var Vga=s(hse);ngt=r(Vga,"from_pretrained()"),Vga.forEach(t),sgt=r(Sde," class method or the "),use=n(Sde,"A",{href:!0});var Xga=s(use);lgt=r(Xga,"from_config()"),Xga.forEach(t),igt=r(Sde,` class
method.`),Sde.forEach(t),dgt=i(ji),NR=n(ji,"P",{});var Xto=s(NR);cgt=r(Xto,"This class cannot be instantiated directly using "),xxe=n(Xto,"CODE",{});var zga=s(xxe);mgt=r(zga,"__init__()"),zga.forEach(t),fgt=r(Xto," (throws an error)."),Xto.forEach(t),ggt=i(ji),da=n(ji,"DIV",{class:!0});var $9=s(da);T(qR.$$.fragment,$9),hgt=i($9),$xe=n($9,"P",{});var Qga=s($xe);ugt=r(Qga,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Qga.forEach(t),pgt=i($9),Um=n($9,"P",{});var Rde=s(Um);_gt=r(Rde,`Note:
Loading a model from its configuration file does `),kxe=n(Rde,"STRONG",{});var Wga=s(kxe);bgt=r(Wga,"not"),Wga.forEach(t),vgt=r(Rde,` load the model weights. It only affects the
model\u2019s configuration. Use `),pse=n(Rde,"A",{href:!0});var Uga=s(pse);Fgt=r(Uga,"from_pretrained()"),Uga.forEach(t),Tgt=r(Rde," to load the model weights."),Rde.forEach(t),Mgt=i($9),T(D7.$$.fragment,$9),$9.forEach(t),Egt=i(ji),ot=n(ji,"DIV",{class:!0});var Di=s(ot);T(jR.$$.fragment,Di),Cgt=i(Di),Sxe=n(Di,"P",{});var Hga=s(Sxe);wgt=r(Hga,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Hga.forEach(t),Agt=i(Di),Xn=n(Di,"P",{});var k9=s(Xn);Lgt=r(k9,"The model class to instantiate is selected based on the "),Rxe=n(k9,"CODE",{});var Jga=s(Rxe);ygt=r(Jga,"model_type"),Jga.forEach(t),xgt=r(k9,` property of the config object (either
passed as an argument or loaded from `),Pxe=n(k9,"CODE",{});var Yga=s(Pxe);$gt=r(Yga,"pretrained_model_name_or_path"),Yga.forEach(t),kgt=r(k9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bxe=n(k9,"CODE",{});var Kga=s(Bxe);Sgt=r(Kga,"pretrained_model_name_or_path"),Kga.forEach(t),Rgt=r(k9,":"),k9.forEach(t),Pgt=i(Di),$e=n(Di,"UL",{});var je=s($e);G7=n(je,"LI",{});var AKe=s(G7);Ixe=n(AKe,"STRONG",{});var Zga=s(Ixe);Bgt=r(Zga,"albert"),Zga.forEach(t),Igt=r(AKe," \u2014 "),_se=n(AKe,"A",{href:!0});var eha=s(_se);Ngt=r(eha,"FlaxAlbertForMaskedLM"),eha.forEach(t),qgt=r(AKe," (ALBERT model)"),AKe.forEach(t),jgt=i(je),O7=n(je,"LI",{});var LKe=s(O7);Nxe=n(LKe,"STRONG",{});var oha=s(Nxe);Dgt=r(oha,"bart"),oha.forEach(t),Ggt=r(LKe," \u2014 "),bse=n(LKe,"A",{href:!0});var rha=s(bse);Ogt=r(rha,"FlaxBartForConditionalGeneration"),rha.forEach(t),Vgt=r(LKe," (BART model)"),LKe.forEach(t),Xgt=i(je),V7=n(je,"LI",{});var yKe=s(V7);qxe=n(yKe,"STRONG",{});var tha=s(qxe);zgt=r(tha,"bert"),tha.forEach(t),Qgt=r(yKe," \u2014 "),vse=n(yKe,"A",{href:!0});var aha=s(vse);Wgt=r(aha,"FlaxBertForMaskedLM"),aha.forEach(t),Ugt=r(yKe," (BERT model)"),yKe.forEach(t),Hgt=i(je),X7=n(je,"LI",{});var xKe=s(X7);jxe=n(xKe,"STRONG",{});var nha=s(jxe);Jgt=r(nha,"big_bird"),nha.forEach(t),Ygt=r(xKe," \u2014 "),Fse=n(xKe,"A",{href:!0});var sha=s(Fse);Kgt=r(sha,"FlaxBigBirdForMaskedLM"),sha.forEach(t),Zgt=r(xKe," (BigBird model)"),xKe.forEach(t),eht=i(je),z7=n(je,"LI",{});var $Ke=s(z7);Dxe=n($Ke,"STRONG",{});var lha=s(Dxe);oht=r(lha,"distilbert"),lha.forEach(t),rht=r($Ke," \u2014 "),Tse=n($Ke,"A",{href:!0});var iha=s(Tse);tht=r(iha,"FlaxDistilBertForMaskedLM"),iha.forEach(t),aht=r($Ke," (DistilBERT model)"),$Ke.forEach(t),nht=i(je),Q7=n(je,"LI",{});var kKe=s(Q7);Gxe=n(kKe,"STRONG",{});var dha=s(Gxe);sht=r(dha,"electra"),dha.forEach(t),lht=r(kKe," \u2014 "),Mse=n(kKe,"A",{href:!0});var cha=s(Mse);iht=r(cha,"FlaxElectraForMaskedLM"),cha.forEach(t),dht=r(kKe," (ELECTRA model)"),kKe.forEach(t),cht=i(je),W7=n(je,"LI",{});var SKe=s(W7);Oxe=n(SKe,"STRONG",{});var mha=s(Oxe);mht=r(mha,"mbart"),mha.forEach(t),fht=r(SKe," \u2014 "),Ese=n(SKe,"A",{href:!0});var fha=s(Ese);ght=r(fha,"FlaxMBartForConditionalGeneration"),fha.forEach(t),hht=r(SKe," (mBART model)"),SKe.forEach(t),uht=i(je),U7=n(je,"LI",{});var RKe=s(U7);Vxe=n(RKe,"STRONG",{});var gha=s(Vxe);pht=r(gha,"roberta"),gha.forEach(t),_ht=r(RKe," \u2014 "),Cse=n(RKe,"A",{href:!0});var hha=s(Cse);bht=r(hha,"FlaxRobertaForMaskedLM"),hha.forEach(t),vht=r(RKe," (RoBERTa model)"),RKe.forEach(t),Fht=i(je),H7=n(je,"LI",{});var PKe=s(H7);Xxe=n(PKe,"STRONG",{});var uha=s(Xxe);Tht=r(uha,"roformer"),uha.forEach(t),Mht=r(PKe," \u2014 "),wse=n(PKe,"A",{href:!0});var pha=s(wse);Eht=r(pha,"FlaxRoFormerForMaskedLM"),pha.forEach(t),Cht=r(PKe," (RoFormer model)"),PKe.forEach(t),wht=i(je),J7=n(je,"LI",{});var BKe=s(J7);zxe=n(BKe,"STRONG",{});var _ha=s(zxe);Aht=r(_ha,"xlm-roberta"),_ha.forEach(t),Lht=r(BKe," \u2014 "),Ase=n(BKe,"A",{href:!0});var bha=s(Ase);yht=r(bha,"FlaxXLMRobertaForMaskedLM"),bha.forEach(t),xht=r(BKe," (XLM-RoBERTa model)"),BKe.forEach(t),je.forEach(t),$ht=i(Di),T(Y7.$$.fragment,Di),Di.forEach(t),ji.forEach(t),xoo=i(m),Hm=n(m,"H2",{class:!0});var zto=s(Hm);K7=n(zto,"A",{id:!0,class:!0,href:!0});var vha=s(K7);Qxe=n(vha,"SPAN",{});var Fha=s(Qxe);T(DR.$$.fragment,Fha),Fha.forEach(t),vha.forEach(t),kht=i(zto),Wxe=n(zto,"SPAN",{});var Tha=s(Wxe);Sht=r(Tha,"FlaxAutoModelForSeq2SeqLM"),Tha.forEach(t),zto.forEach(t),$oo=i(m),Ar=n(m,"DIV",{class:!0});var Gi=s(Ar);T(GR.$$.fragment,Gi),Rht=i(Gi),Jm=n(Gi,"P",{});var Pde=s(Jm);Pht=r(Pde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Lse=n(Pde,"A",{href:!0});var Mha=s(Lse);Bht=r(Mha,"from_pretrained()"),Mha.forEach(t),Iht=r(Pde," class method or the "),yse=n(Pde,"A",{href:!0});var Eha=s(yse);Nht=r(Eha,"from_config()"),Eha.forEach(t),qht=r(Pde,` class
method.`),Pde.forEach(t),jht=i(Gi),OR=n(Gi,"P",{});var Qto=s(OR);Dht=r(Qto,"This class cannot be instantiated directly using "),Uxe=n(Qto,"CODE",{});var Cha=s(Uxe);Ght=r(Cha,"__init__()"),Cha.forEach(t),Oht=r(Qto," (throws an error)."),Qto.forEach(t),Vht=i(Gi),ca=n(Gi,"DIV",{class:!0});var S9=s(ca);T(VR.$$.fragment,S9),Xht=i(S9),Hxe=n(S9,"P",{});var wha=s(Hxe);zht=r(wha,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wha.forEach(t),Qht=i(S9),Ym=n(S9,"P",{});var Bde=s(Ym);Wht=r(Bde,`Note:
Loading a model from its configuration file does `),Jxe=n(Bde,"STRONG",{});var Aha=s(Jxe);Uht=r(Aha,"not"),Aha.forEach(t),Hht=r(Bde,` load the model weights. It only affects the
model\u2019s configuration. Use `),xse=n(Bde,"A",{href:!0});var Lha=s(xse);Jht=r(Lha,"from_pretrained()"),Lha.forEach(t),Yht=r(Bde," to load the model weights."),Bde.forEach(t),Kht=i(S9),T(Z7.$$.fragment,S9),S9.forEach(t),Zht=i(Gi),rt=n(Gi,"DIV",{class:!0});var Oi=s(rt);T(XR.$$.fragment,Oi),eut=i(Oi),Yxe=n(Oi,"P",{});var yha=s(Yxe);out=r(yha,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yha.forEach(t),rut=i(Oi),zn=n(Oi,"P",{});var R9=s(zn);tut=r(R9,"The model class to instantiate is selected based on the "),Kxe=n(R9,"CODE",{});var xha=s(Kxe);aut=r(xha,"model_type"),xha.forEach(t),nut=r(R9,` property of the config object (either
passed as an argument or loaded from `),Zxe=n(R9,"CODE",{});var $ha=s(Zxe);sut=r($ha,"pretrained_model_name_or_path"),$ha.forEach(t),lut=r(R9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e$e=n(R9,"CODE",{});var kha=s(e$e);iut=r(kha,"pretrained_model_name_or_path"),kha.forEach(t),dut=r(R9,":"),R9.forEach(t),cut=i(Oi),ke=n(Oi,"UL",{});var De=s(ke);eL=n(De,"LI",{});var IKe=s(eL);o$e=n(IKe,"STRONG",{});var Sha=s(o$e);mut=r(Sha,"bart"),Sha.forEach(t),fut=r(IKe," \u2014 "),$se=n(IKe,"A",{href:!0});var Rha=s($se);gut=r(Rha,"FlaxBartForConditionalGeneration"),Rha.forEach(t),hut=r(IKe," (BART model)"),IKe.forEach(t),uut=i(De),oL=n(De,"LI",{});var NKe=s(oL);r$e=n(NKe,"STRONG",{});var Pha=s(r$e);put=r(Pha,"blenderbot"),Pha.forEach(t),_ut=r(NKe," \u2014 "),kse=n(NKe,"A",{href:!0});var Bha=s(kse);but=r(Bha,"FlaxBlenderbotForConditionalGeneration"),Bha.forEach(t),vut=r(NKe," (Blenderbot model)"),NKe.forEach(t),Fut=i(De),rL=n(De,"LI",{});var qKe=s(rL);t$e=n(qKe,"STRONG",{});var Iha=s(t$e);Tut=r(Iha,"blenderbot-small"),Iha.forEach(t),Mut=r(qKe," \u2014 "),Sse=n(qKe,"A",{href:!0});var Nha=s(Sse);Eut=r(Nha,"FlaxBlenderbotSmallForConditionalGeneration"),Nha.forEach(t),Cut=r(qKe," (BlenderbotSmall model)"),qKe.forEach(t),wut=i(De),tL=n(De,"LI",{});var jKe=s(tL);a$e=n(jKe,"STRONG",{});var qha=s(a$e);Aut=r(qha,"encoder-decoder"),qha.forEach(t),Lut=r(jKe," \u2014 "),Rse=n(jKe,"A",{href:!0});var jha=s(Rse);yut=r(jha,"FlaxEncoderDecoderModel"),jha.forEach(t),xut=r(jKe," (Encoder decoder model)"),jKe.forEach(t),$ut=i(De),aL=n(De,"LI",{});var DKe=s(aL);n$e=n(DKe,"STRONG",{});var Dha=s(n$e);kut=r(Dha,"longt5"),Dha.forEach(t),Sut=r(DKe," \u2014 "),Pse=n(DKe,"A",{href:!0});var Gha=s(Pse);Rut=r(Gha,"FlaxLongT5ForConditionalGeneration"),Gha.forEach(t),Put=r(DKe," (LongT5 model)"),DKe.forEach(t),But=i(De),nL=n(De,"LI",{});var GKe=s(nL);s$e=n(GKe,"STRONG",{});var Oha=s(s$e);Iut=r(Oha,"marian"),Oha.forEach(t),Nut=r(GKe," \u2014 "),Bse=n(GKe,"A",{href:!0});var Vha=s(Bse);qut=r(Vha,"FlaxMarianMTModel"),Vha.forEach(t),jut=r(GKe," (Marian model)"),GKe.forEach(t),Dut=i(De),sL=n(De,"LI",{});var OKe=s(sL);l$e=n(OKe,"STRONG",{});var Xha=s(l$e);Gut=r(Xha,"mbart"),Xha.forEach(t),Out=r(OKe," \u2014 "),Ise=n(OKe,"A",{href:!0});var zha=s(Ise);Vut=r(zha,"FlaxMBartForConditionalGeneration"),zha.forEach(t),Xut=r(OKe," (mBART model)"),OKe.forEach(t),zut=i(De),lL=n(De,"LI",{});var VKe=s(lL);i$e=n(VKe,"STRONG",{});var Qha=s(i$e);Qut=r(Qha,"mt5"),Qha.forEach(t),Wut=r(VKe," \u2014 "),Nse=n(VKe,"A",{href:!0});var Wha=s(Nse);Uut=r(Wha,"FlaxMT5ForConditionalGeneration"),Wha.forEach(t),Hut=r(VKe," (MT5 model)"),VKe.forEach(t),Jut=i(De),iL=n(De,"LI",{});var XKe=s(iL);d$e=n(XKe,"STRONG",{});var Uha=s(d$e);Yut=r(Uha,"pegasus"),Uha.forEach(t),Kut=r(XKe," \u2014 "),qse=n(XKe,"A",{href:!0});var Hha=s(qse);Zut=r(Hha,"FlaxPegasusForConditionalGeneration"),Hha.forEach(t),ept=r(XKe," (Pegasus model)"),XKe.forEach(t),opt=i(De),dL=n(De,"LI",{});var zKe=s(dL);c$e=n(zKe,"STRONG",{});var Jha=s(c$e);rpt=r(Jha,"t5"),Jha.forEach(t),tpt=r(zKe," \u2014 "),jse=n(zKe,"A",{href:!0});var Yha=s(jse);apt=r(Yha,"FlaxT5ForConditionalGeneration"),Yha.forEach(t),npt=r(zKe," (T5 model)"),zKe.forEach(t),De.forEach(t),spt=i(Oi),T(cL.$$.fragment,Oi),Oi.forEach(t),Gi.forEach(t),koo=i(m),Km=n(m,"H2",{class:!0});var Wto=s(Km);mL=n(Wto,"A",{id:!0,class:!0,href:!0});var Kha=s(mL);m$e=n(Kha,"SPAN",{});var Zha=s(m$e);T(zR.$$.fragment,Zha),Zha.forEach(t),Kha.forEach(t),lpt=i(Wto),f$e=n(Wto,"SPAN",{});var eua=s(f$e);ipt=r(eua,"FlaxAutoModelForSequenceClassification"),eua.forEach(t),Wto.forEach(t),Soo=i(m),Lr=n(m,"DIV",{class:!0});var Vi=s(Lr);T(QR.$$.fragment,Vi),dpt=i(Vi),Zm=n(Vi,"P",{});var Ide=s(Zm);cpt=r(Ide,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Dse=n(Ide,"A",{href:!0});var oua=s(Dse);mpt=r(oua,"from_pretrained()"),oua.forEach(t),fpt=r(Ide," class method or the "),Gse=n(Ide,"A",{href:!0});var rua=s(Gse);gpt=r(rua,"from_config()"),rua.forEach(t),hpt=r(Ide,` class
method.`),Ide.forEach(t),upt=i(Vi),WR=n(Vi,"P",{});var Uto=s(WR);ppt=r(Uto,"This class cannot be instantiated directly using "),g$e=n(Uto,"CODE",{});var tua=s(g$e);_pt=r(tua,"__init__()"),tua.forEach(t),bpt=r(Uto," (throws an error)."),Uto.forEach(t),vpt=i(Vi),ma=n(Vi,"DIV",{class:!0});var P9=s(ma);T(UR.$$.fragment,P9),Fpt=i(P9),h$e=n(P9,"P",{});var aua=s(h$e);Tpt=r(aua,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aua.forEach(t),Mpt=i(P9),ef=n(P9,"P",{});var Nde=s(ef);Ept=r(Nde,`Note:
Loading a model from its configuration file does `),u$e=n(Nde,"STRONG",{});var nua=s(u$e);Cpt=r(nua,"not"),nua.forEach(t),wpt=r(Nde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ose=n(Nde,"A",{href:!0});var sua=s(Ose);Apt=r(sua,"from_pretrained()"),sua.forEach(t),Lpt=r(Nde," to load the model weights."),Nde.forEach(t),ypt=i(P9),T(fL.$$.fragment,P9),P9.forEach(t),xpt=i(Vi),tt=n(Vi,"DIV",{class:!0});var Xi=s(tt);T(HR.$$.fragment,Xi),$pt=i(Xi),p$e=n(Xi,"P",{});var lua=s(p$e);kpt=r(lua,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lua.forEach(t),Spt=i(Xi),Qn=n(Xi,"P",{});var B9=s(Qn);Rpt=r(B9,"The model class to instantiate is selected based on the "),_$e=n(B9,"CODE",{});var iua=s(_$e);Ppt=r(iua,"model_type"),iua.forEach(t),Bpt=r(B9,` property of the config object (either
passed as an argument or loaded from `),b$e=n(B9,"CODE",{});var dua=s(b$e);Ipt=r(dua,"pretrained_model_name_or_path"),dua.forEach(t),Npt=r(B9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v$e=n(B9,"CODE",{});var cua=s(v$e);qpt=r(cua,"pretrained_model_name_or_path"),cua.forEach(t),jpt=r(B9,":"),B9.forEach(t),Dpt=i(Xi),Se=n(Xi,"UL",{});var Ge=s(Se);gL=n(Ge,"LI",{});var QKe=s(gL);F$e=n(QKe,"STRONG",{});var mua=s(F$e);Gpt=r(mua,"albert"),mua.forEach(t),Opt=r(QKe," \u2014 "),Vse=n(QKe,"A",{href:!0});var fua=s(Vse);Vpt=r(fua,"FlaxAlbertForSequenceClassification"),fua.forEach(t),Xpt=r(QKe," (ALBERT model)"),QKe.forEach(t),zpt=i(Ge),hL=n(Ge,"LI",{});var WKe=s(hL);T$e=n(WKe,"STRONG",{});var gua=s(T$e);Qpt=r(gua,"bart"),gua.forEach(t),Wpt=r(WKe," \u2014 "),Xse=n(WKe,"A",{href:!0});var hua=s(Xse);Upt=r(hua,"FlaxBartForSequenceClassification"),hua.forEach(t),Hpt=r(WKe," (BART model)"),WKe.forEach(t),Jpt=i(Ge),uL=n(Ge,"LI",{});var UKe=s(uL);M$e=n(UKe,"STRONG",{});var uua=s(M$e);Ypt=r(uua,"bert"),uua.forEach(t),Kpt=r(UKe," \u2014 "),zse=n(UKe,"A",{href:!0});var pua=s(zse);Zpt=r(pua,"FlaxBertForSequenceClassification"),pua.forEach(t),e_t=r(UKe," (BERT model)"),UKe.forEach(t),o_t=i(Ge),pL=n(Ge,"LI",{});var HKe=s(pL);E$e=n(HKe,"STRONG",{});var _ua=s(E$e);r_t=r(_ua,"big_bird"),_ua.forEach(t),t_t=r(HKe," \u2014 "),Qse=n(HKe,"A",{href:!0});var bua=s(Qse);a_t=r(bua,"FlaxBigBirdForSequenceClassification"),bua.forEach(t),n_t=r(HKe," (BigBird model)"),HKe.forEach(t),s_t=i(Ge),_L=n(Ge,"LI",{});var JKe=s(_L);C$e=n(JKe,"STRONG",{});var vua=s(C$e);l_t=r(vua,"distilbert"),vua.forEach(t),i_t=r(JKe," \u2014 "),Wse=n(JKe,"A",{href:!0});var Fua=s(Wse);d_t=r(Fua,"FlaxDistilBertForSequenceClassification"),Fua.forEach(t),c_t=r(JKe," (DistilBERT model)"),JKe.forEach(t),m_t=i(Ge),bL=n(Ge,"LI",{});var YKe=s(bL);w$e=n(YKe,"STRONG",{});var Tua=s(w$e);f_t=r(Tua,"electra"),Tua.forEach(t),g_t=r(YKe," \u2014 "),Use=n(YKe,"A",{href:!0});var Mua=s(Use);h_t=r(Mua,"FlaxElectraForSequenceClassification"),Mua.forEach(t),u_t=r(YKe," (ELECTRA model)"),YKe.forEach(t),p_t=i(Ge),vL=n(Ge,"LI",{});var KKe=s(vL);A$e=n(KKe,"STRONG",{});var Eua=s(A$e);__t=r(Eua,"mbart"),Eua.forEach(t),b_t=r(KKe," \u2014 "),Hse=n(KKe,"A",{href:!0});var Cua=s(Hse);v_t=r(Cua,"FlaxMBartForSequenceClassification"),Cua.forEach(t),F_t=r(KKe," (mBART model)"),KKe.forEach(t),T_t=i(Ge),FL=n(Ge,"LI",{});var ZKe=s(FL);L$e=n(ZKe,"STRONG",{});var wua=s(L$e);M_t=r(wua,"roberta"),wua.forEach(t),E_t=r(ZKe," \u2014 "),Jse=n(ZKe,"A",{href:!0});var Aua=s(Jse);C_t=r(Aua,"FlaxRobertaForSequenceClassification"),Aua.forEach(t),w_t=r(ZKe," (RoBERTa model)"),ZKe.forEach(t),A_t=i(Ge),TL=n(Ge,"LI",{});var eZe=s(TL);y$e=n(eZe,"STRONG",{});var Lua=s(y$e);L_t=r(Lua,"roformer"),Lua.forEach(t),y_t=r(eZe," \u2014 "),Yse=n(eZe,"A",{href:!0});var yua=s(Yse);x_t=r(yua,"FlaxRoFormerForSequenceClassification"),yua.forEach(t),$_t=r(eZe," (RoFormer model)"),eZe.forEach(t),k_t=i(Ge),ML=n(Ge,"LI",{});var oZe=s(ML);x$e=n(oZe,"STRONG",{});var xua=s(x$e);S_t=r(xua,"xlm-roberta"),xua.forEach(t),R_t=r(oZe," \u2014 "),Kse=n(oZe,"A",{href:!0});var $ua=s(Kse);P_t=r($ua,"FlaxXLMRobertaForSequenceClassification"),$ua.forEach(t),B_t=r(oZe," (XLM-RoBERTa model)"),oZe.forEach(t),Ge.forEach(t),I_t=i(Xi),T(EL.$$.fragment,Xi),Xi.forEach(t),Vi.forEach(t),Roo=i(m),of=n(m,"H2",{class:!0});var Hto=s(of);CL=n(Hto,"A",{id:!0,class:!0,href:!0});var kua=s(CL);$$e=n(kua,"SPAN",{});var Sua=s($$e);T(JR.$$.fragment,Sua),Sua.forEach(t),kua.forEach(t),N_t=i(Hto),k$e=n(Hto,"SPAN",{});var Rua=s(k$e);q_t=r(Rua,"FlaxAutoModelForQuestionAnswering"),Rua.forEach(t),Hto.forEach(t),Poo=i(m),yr=n(m,"DIV",{class:!0});var zi=s(yr);T(YR.$$.fragment,zi),j_t=i(zi),rf=n(zi,"P",{});var qde=s(rf);D_t=r(qde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Zse=n(qde,"A",{href:!0});var Pua=s(Zse);G_t=r(Pua,"from_pretrained()"),Pua.forEach(t),O_t=r(qde," class method or the "),ele=n(qde,"A",{href:!0});var Bua=s(ele);V_t=r(Bua,"from_config()"),Bua.forEach(t),X_t=r(qde,` class
method.`),qde.forEach(t),z_t=i(zi),KR=n(zi,"P",{});var Jto=s(KR);Q_t=r(Jto,"This class cannot be instantiated directly using "),S$e=n(Jto,"CODE",{});var Iua=s(S$e);W_t=r(Iua,"__init__()"),Iua.forEach(t),U_t=r(Jto," (throws an error)."),Jto.forEach(t),H_t=i(zi),fa=n(zi,"DIV",{class:!0});var I9=s(fa);T(ZR.$$.fragment,I9),J_t=i(I9),R$e=n(I9,"P",{});var Nua=s(R$e);Y_t=r(Nua,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Nua.forEach(t),K_t=i(I9),tf=n(I9,"P",{});var jde=s(tf);Z_t=r(jde,`Note:
Loading a model from its configuration file does `),P$e=n(jde,"STRONG",{});var qua=s(P$e);e2t=r(qua,"not"),qua.forEach(t),o2t=r(jde,` load the model weights. It only affects the
model\u2019s configuration. Use `),ole=n(jde,"A",{href:!0});var jua=s(ole);r2t=r(jua,"from_pretrained()"),jua.forEach(t),t2t=r(jde," to load the model weights."),jde.forEach(t),a2t=i(I9),T(wL.$$.fragment,I9),I9.forEach(t),n2t=i(zi),at=n(zi,"DIV",{class:!0});var Qi=s(at);T(eP.$$.fragment,Qi),s2t=i(Qi),B$e=n(Qi,"P",{});var Dua=s(B$e);l2t=r(Dua,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Dua.forEach(t),i2t=i(Qi),Wn=n(Qi,"P",{});var N9=s(Wn);d2t=r(N9,"The model class to instantiate is selected based on the "),I$e=n(N9,"CODE",{});var Gua=s(I$e);c2t=r(Gua,"model_type"),Gua.forEach(t),m2t=r(N9,` property of the config object (either
passed as an argument or loaded from `),N$e=n(N9,"CODE",{});var Oua=s(N$e);f2t=r(Oua,"pretrained_model_name_or_path"),Oua.forEach(t),g2t=r(N9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q$e=n(N9,"CODE",{});var Vua=s(q$e);h2t=r(Vua,"pretrained_model_name_or_path"),Vua.forEach(t),u2t=r(N9,":"),N9.forEach(t),p2t=i(Qi),Re=n(Qi,"UL",{});var Oe=s(Re);AL=n(Oe,"LI",{});var rZe=s(AL);j$e=n(rZe,"STRONG",{});var Xua=s(j$e);_2t=r(Xua,"albert"),Xua.forEach(t),b2t=r(rZe," \u2014 "),rle=n(rZe,"A",{href:!0});var zua=s(rle);v2t=r(zua,"FlaxAlbertForQuestionAnswering"),zua.forEach(t),F2t=r(rZe," (ALBERT model)"),rZe.forEach(t),T2t=i(Oe),LL=n(Oe,"LI",{});var tZe=s(LL);D$e=n(tZe,"STRONG",{});var Qua=s(D$e);M2t=r(Qua,"bart"),Qua.forEach(t),E2t=r(tZe," \u2014 "),tle=n(tZe,"A",{href:!0});var Wua=s(tle);C2t=r(Wua,"FlaxBartForQuestionAnswering"),Wua.forEach(t),w2t=r(tZe," (BART model)"),tZe.forEach(t),A2t=i(Oe),yL=n(Oe,"LI",{});var aZe=s(yL);G$e=n(aZe,"STRONG",{});var Uua=s(G$e);L2t=r(Uua,"bert"),Uua.forEach(t),y2t=r(aZe," \u2014 "),ale=n(aZe,"A",{href:!0});var Hua=s(ale);x2t=r(Hua,"FlaxBertForQuestionAnswering"),Hua.forEach(t),$2t=r(aZe," (BERT model)"),aZe.forEach(t),k2t=i(Oe),xL=n(Oe,"LI",{});var nZe=s(xL);O$e=n(nZe,"STRONG",{});var Jua=s(O$e);S2t=r(Jua,"big_bird"),Jua.forEach(t),R2t=r(nZe," \u2014 "),nle=n(nZe,"A",{href:!0});var Yua=s(nle);P2t=r(Yua,"FlaxBigBirdForQuestionAnswering"),Yua.forEach(t),B2t=r(nZe," (BigBird model)"),nZe.forEach(t),I2t=i(Oe),$L=n(Oe,"LI",{});var sZe=s($L);V$e=n(sZe,"STRONG",{});var Kua=s(V$e);N2t=r(Kua,"distilbert"),Kua.forEach(t),q2t=r(sZe," \u2014 "),sle=n(sZe,"A",{href:!0});var Zua=s(sle);j2t=r(Zua,"FlaxDistilBertForQuestionAnswering"),Zua.forEach(t),D2t=r(sZe," (DistilBERT model)"),sZe.forEach(t),G2t=i(Oe),kL=n(Oe,"LI",{});var lZe=s(kL);X$e=n(lZe,"STRONG",{});var epa=s(X$e);O2t=r(epa,"electra"),epa.forEach(t),V2t=r(lZe," \u2014 "),lle=n(lZe,"A",{href:!0});var opa=s(lle);X2t=r(opa,"FlaxElectraForQuestionAnswering"),opa.forEach(t),z2t=r(lZe," (ELECTRA model)"),lZe.forEach(t),Q2t=i(Oe),SL=n(Oe,"LI",{});var iZe=s(SL);z$e=n(iZe,"STRONG",{});var rpa=s(z$e);W2t=r(rpa,"mbart"),rpa.forEach(t),U2t=r(iZe," \u2014 "),ile=n(iZe,"A",{href:!0});var tpa=s(ile);H2t=r(tpa,"FlaxMBartForQuestionAnswering"),tpa.forEach(t),J2t=r(iZe," (mBART model)"),iZe.forEach(t),Y2t=i(Oe),RL=n(Oe,"LI",{});var dZe=s(RL);Q$e=n(dZe,"STRONG",{});var apa=s(Q$e);K2t=r(apa,"roberta"),apa.forEach(t),Z2t=r(dZe," \u2014 "),dle=n(dZe,"A",{href:!0});var npa=s(dle);e1t=r(npa,"FlaxRobertaForQuestionAnswering"),npa.forEach(t),o1t=r(dZe," (RoBERTa model)"),dZe.forEach(t),r1t=i(Oe),PL=n(Oe,"LI",{});var cZe=s(PL);W$e=n(cZe,"STRONG",{});var spa=s(W$e);t1t=r(spa,"roformer"),spa.forEach(t),a1t=r(cZe," \u2014 "),cle=n(cZe,"A",{href:!0});var lpa=s(cle);n1t=r(lpa,"FlaxRoFormerForQuestionAnswering"),lpa.forEach(t),s1t=r(cZe," (RoFormer model)"),cZe.forEach(t),l1t=i(Oe),BL=n(Oe,"LI",{});var mZe=s(BL);U$e=n(mZe,"STRONG",{});var ipa=s(U$e);i1t=r(ipa,"xlm-roberta"),ipa.forEach(t),d1t=r(mZe," \u2014 "),mle=n(mZe,"A",{href:!0});var dpa=s(mle);c1t=r(dpa,"FlaxXLMRobertaForQuestionAnswering"),dpa.forEach(t),m1t=r(mZe," (XLM-RoBERTa model)"),mZe.forEach(t),Oe.forEach(t),f1t=i(Qi),T(IL.$$.fragment,Qi),Qi.forEach(t),zi.forEach(t),Boo=i(m),af=n(m,"H2",{class:!0});var Yto=s(af);NL=n(Yto,"A",{id:!0,class:!0,href:!0});var cpa=s(NL);H$e=n(cpa,"SPAN",{});var mpa=s(H$e);T(oP.$$.fragment,mpa),mpa.forEach(t),cpa.forEach(t),g1t=i(Yto),J$e=n(Yto,"SPAN",{});var fpa=s(J$e);h1t=r(fpa,"FlaxAutoModelForTokenClassification"),fpa.forEach(t),Yto.forEach(t),Ioo=i(m),xr=n(m,"DIV",{class:!0});var Wi=s(xr);T(rP.$$.fragment,Wi),u1t=i(Wi),nf=n(Wi,"P",{});var Dde=s(nf);p1t=r(Dde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fle=n(Dde,"A",{href:!0});var gpa=s(fle);_1t=r(gpa,"from_pretrained()"),gpa.forEach(t),b1t=r(Dde," class method or the "),gle=n(Dde,"A",{href:!0});var hpa=s(gle);v1t=r(hpa,"from_config()"),hpa.forEach(t),F1t=r(Dde,` class
method.`),Dde.forEach(t),T1t=i(Wi),tP=n(Wi,"P",{});var Kto=s(tP);M1t=r(Kto,"This class cannot be instantiated directly using "),Y$e=n(Kto,"CODE",{});var upa=s(Y$e);E1t=r(upa,"__init__()"),upa.forEach(t),C1t=r(Kto," (throws an error)."),Kto.forEach(t),w1t=i(Wi),ga=n(Wi,"DIV",{class:!0});var q9=s(ga);T(aP.$$.fragment,q9),A1t=i(q9),K$e=n(q9,"P",{});var ppa=s(K$e);L1t=r(ppa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ppa.forEach(t),y1t=i(q9),sf=n(q9,"P",{});var Gde=s(sf);x1t=r(Gde,`Note:
Loading a model from its configuration file does `),Z$e=n(Gde,"STRONG",{});var _pa=s(Z$e);$1t=r(_pa,"not"),_pa.forEach(t),k1t=r(Gde,` load the model weights. It only affects the
model\u2019s configuration. Use `),hle=n(Gde,"A",{href:!0});var bpa=s(hle);S1t=r(bpa,"from_pretrained()"),bpa.forEach(t),R1t=r(Gde," to load the model weights."),Gde.forEach(t),P1t=i(q9),T(qL.$$.fragment,q9),q9.forEach(t),B1t=i(Wi),nt=n(Wi,"DIV",{class:!0});var Ui=s(nt);T(nP.$$.fragment,Ui),I1t=i(Ui),eke=n(Ui,"P",{});var vpa=s(eke);N1t=r(vpa,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vpa.forEach(t),q1t=i(Ui),Un=n(Ui,"P",{});var j9=s(Un);j1t=r(j9,"The model class to instantiate is selected based on the "),oke=n(j9,"CODE",{});var Fpa=s(oke);D1t=r(Fpa,"model_type"),Fpa.forEach(t),G1t=r(j9,` property of the config object (either
passed as an argument or loaded from `),rke=n(j9,"CODE",{});var Tpa=s(rke);O1t=r(Tpa,"pretrained_model_name_or_path"),Tpa.forEach(t),V1t=r(j9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tke=n(j9,"CODE",{});var Mpa=s(tke);X1t=r(Mpa,"pretrained_model_name_or_path"),Mpa.forEach(t),z1t=r(j9,":"),j9.forEach(t),Q1t=i(Ui),Xe=n(Ui,"UL",{});var Ao=s(Xe);jL=n(Ao,"LI",{});var fZe=s(jL);ake=n(fZe,"STRONG",{});var Epa=s(ake);W1t=r(Epa,"albert"),Epa.forEach(t),U1t=r(fZe," \u2014 "),ule=n(fZe,"A",{href:!0});var Cpa=s(ule);H1t=r(Cpa,"FlaxAlbertForTokenClassification"),Cpa.forEach(t),J1t=r(fZe," (ALBERT model)"),fZe.forEach(t),Y1t=i(Ao),DL=n(Ao,"LI",{});var gZe=s(DL);nke=n(gZe,"STRONG",{});var wpa=s(nke);K1t=r(wpa,"bert"),wpa.forEach(t),Z1t=r(gZe," \u2014 "),ple=n(gZe,"A",{href:!0});var Apa=s(ple);ebt=r(Apa,"FlaxBertForTokenClassification"),Apa.forEach(t),obt=r(gZe," (BERT model)"),gZe.forEach(t),rbt=i(Ao),GL=n(Ao,"LI",{});var hZe=s(GL);ske=n(hZe,"STRONG",{});var Lpa=s(ske);tbt=r(Lpa,"big_bird"),Lpa.forEach(t),abt=r(hZe," \u2014 "),_le=n(hZe,"A",{href:!0});var ypa=s(_le);nbt=r(ypa,"FlaxBigBirdForTokenClassification"),ypa.forEach(t),sbt=r(hZe," (BigBird model)"),hZe.forEach(t),lbt=i(Ao),OL=n(Ao,"LI",{});var uZe=s(OL);lke=n(uZe,"STRONG",{});var xpa=s(lke);ibt=r(xpa,"distilbert"),xpa.forEach(t),dbt=r(uZe," \u2014 "),ble=n(uZe,"A",{href:!0});var $pa=s(ble);cbt=r($pa,"FlaxDistilBertForTokenClassification"),$pa.forEach(t),mbt=r(uZe," (DistilBERT model)"),uZe.forEach(t),fbt=i(Ao),VL=n(Ao,"LI",{});var pZe=s(VL);ike=n(pZe,"STRONG",{});var kpa=s(ike);gbt=r(kpa,"electra"),kpa.forEach(t),hbt=r(pZe," \u2014 "),vle=n(pZe,"A",{href:!0});var Spa=s(vle);ubt=r(Spa,"FlaxElectraForTokenClassification"),Spa.forEach(t),pbt=r(pZe," (ELECTRA model)"),pZe.forEach(t),_bt=i(Ao),XL=n(Ao,"LI",{});var _Ze=s(XL);dke=n(_Ze,"STRONG",{});var Rpa=s(dke);bbt=r(Rpa,"roberta"),Rpa.forEach(t),vbt=r(_Ze," \u2014 "),Fle=n(_Ze,"A",{href:!0});var Ppa=s(Fle);Fbt=r(Ppa,"FlaxRobertaForTokenClassification"),Ppa.forEach(t),Tbt=r(_Ze," (RoBERTa model)"),_Ze.forEach(t),Mbt=i(Ao),zL=n(Ao,"LI",{});var bZe=s(zL);cke=n(bZe,"STRONG",{});var Bpa=s(cke);Ebt=r(Bpa,"roformer"),Bpa.forEach(t),Cbt=r(bZe," \u2014 "),Tle=n(bZe,"A",{href:!0});var Ipa=s(Tle);wbt=r(Ipa,"FlaxRoFormerForTokenClassification"),Ipa.forEach(t),Abt=r(bZe," (RoFormer model)"),bZe.forEach(t),Lbt=i(Ao),QL=n(Ao,"LI",{});var vZe=s(QL);mke=n(vZe,"STRONG",{});var Npa=s(mke);ybt=r(Npa,"xlm-roberta"),Npa.forEach(t),xbt=r(vZe," \u2014 "),Mle=n(vZe,"A",{href:!0});var qpa=s(Mle);$bt=r(qpa,"FlaxXLMRobertaForTokenClassification"),qpa.forEach(t),kbt=r(vZe," (XLM-RoBERTa model)"),vZe.forEach(t),Ao.forEach(t),Sbt=i(Ui),T(WL.$$.fragment,Ui),Ui.forEach(t),Wi.forEach(t),Noo=i(m),lf=n(m,"H2",{class:!0});var Zto=s(lf);UL=n(Zto,"A",{id:!0,class:!0,href:!0});var jpa=s(UL);fke=n(jpa,"SPAN",{});var Dpa=s(fke);T(sP.$$.fragment,Dpa),Dpa.forEach(t),jpa.forEach(t),Rbt=i(Zto),gke=n(Zto,"SPAN",{});var Gpa=s(gke);Pbt=r(Gpa,"FlaxAutoModelForMultipleChoice"),Gpa.forEach(t),Zto.forEach(t),qoo=i(m),$r=n(m,"DIV",{class:!0});var Hi=s($r);T(lP.$$.fragment,Hi),Bbt=i(Hi),df=n(Hi,"P",{});var Ode=s(df);Ibt=r(Ode,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Ele=n(Ode,"A",{href:!0});var Opa=s(Ele);Nbt=r(Opa,"from_pretrained()"),Opa.forEach(t),qbt=r(Ode," class method or the "),Cle=n(Ode,"A",{href:!0});var Vpa=s(Cle);jbt=r(Vpa,"from_config()"),Vpa.forEach(t),Dbt=r(Ode,` class
method.`),Ode.forEach(t),Gbt=i(Hi),iP=n(Hi,"P",{});var eao=s(iP);Obt=r(eao,"This class cannot be instantiated directly using "),hke=n(eao,"CODE",{});var Xpa=s(hke);Vbt=r(Xpa,"__init__()"),Xpa.forEach(t),Xbt=r(eao," (throws an error)."),eao.forEach(t),zbt=i(Hi),ha=n(Hi,"DIV",{class:!0});var D9=s(ha);T(dP.$$.fragment,D9),Qbt=i(D9),uke=n(D9,"P",{});var zpa=s(uke);Wbt=r(zpa,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zpa.forEach(t),Ubt=i(D9),cf=n(D9,"P",{});var Vde=s(cf);Hbt=r(Vde,`Note:
Loading a model from its configuration file does `),pke=n(Vde,"STRONG",{});var Qpa=s(pke);Jbt=r(Qpa,"not"),Qpa.forEach(t),Ybt=r(Vde,` load the model weights. It only affects the
model\u2019s configuration. Use `),wle=n(Vde,"A",{href:!0});var Wpa=s(wle);Kbt=r(Wpa,"from_pretrained()"),Wpa.forEach(t),Zbt=r(Vde," to load the model weights."),Vde.forEach(t),evt=i(D9),T(HL.$$.fragment,D9),D9.forEach(t),ovt=i(Hi),st=n(Hi,"DIV",{class:!0});var Ji=s(st);T(cP.$$.fragment,Ji),rvt=i(Ji),_ke=n(Ji,"P",{});var Upa=s(_ke);tvt=r(Upa,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Upa.forEach(t),avt=i(Ji),Hn=n(Ji,"P",{});var G9=s(Hn);nvt=r(G9,"The model class to instantiate is selected based on the "),bke=n(G9,"CODE",{});var Hpa=s(bke);svt=r(Hpa,"model_type"),Hpa.forEach(t),lvt=r(G9,` property of the config object (either
passed as an argument or loaded from `),vke=n(G9,"CODE",{});var Jpa=s(vke);ivt=r(Jpa,"pretrained_model_name_or_path"),Jpa.forEach(t),dvt=r(G9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fke=n(G9,"CODE",{});var Ypa=s(Fke);cvt=r(Ypa,"pretrained_model_name_or_path"),Ypa.forEach(t),mvt=r(G9,":"),G9.forEach(t),fvt=i(Ji),ze=n(Ji,"UL",{});var Lo=s(ze);JL=n(Lo,"LI",{});var FZe=s(JL);Tke=n(FZe,"STRONG",{});var Kpa=s(Tke);gvt=r(Kpa,"albert"),Kpa.forEach(t),hvt=r(FZe," \u2014 "),Ale=n(FZe,"A",{href:!0});var Zpa=s(Ale);uvt=r(Zpa,"FlaxAlbertForMultipleChoice"),Zpa.forEach(t),pvt=r(FZe," (ALBERT model)"),FZe.forEach(t),_vt=i(Lo),YL=n(Lo,"LI",{});var TZe=s(YL);Mke=n(TZe,"STRONG",{});var e_a=s(Mke);bvt=r(e_a,"bert"),e_a.forEach(t),vvt=r(TZe," \u2014 "),Lle=n(TZe,"A",{href:!0});var o_a=s(Lle);Fvt=r(o_a,"FlaxBertForMultipleChoice"),o_a.forEach(t),Tvt=r(TZe," (BERT model)"),TZe.forEach(t),Mvt=i(Lo),KL=n(Lo,"LI",{});var MZe=s(KL);Eke=n(MZe,"STRONG",{});var r_a=s(Eke);Evt=r(r_a,"big_bird"),r_a.forEach(t),Cvt=r(MZe," \u2014 "),yle=n(MZe,"A",{href:!0});var t_a=s(yle);wvt=r(t_a,"FlaxBigBirdForMultipleChoice"),t_a.forEach(t),Avt=r(MZe," (BigBird model)"),MZe.forEach(t),Lvt=i(Lo),ZL=n(Lo,"LI",{});var EZe=s(ZL);Cke=n(EZe,"STRONG",{});var a_a=s(Cke);yvt=r(a_a,"distilbert"),a_a.forEach(t),xvt=r(EZe," \u2014 "),xle=n(EZe,"A",{href:!0});var n_a=s(xle);$vt=r(n_a,"FlaxDistilBertForMultipleChoice"),n_a.forEach(t),kvt=r(EZe," (DistilBERT model)"),EZe.forEach(t),Svt=i(Lo),ey=n(Lo,"LI",{});var CZe=s(ey);wke=n(CZe,"STRONG",{});var s_a=s(wke);Rvt=r(s_a,"electra"),s_a.forEach(t),Pvt=r(CZe," \u2014 "),$le=n(CZe,"A",{href:!0});var l_a=s($le);Bvt=r(l_a,"FlaxElectraForMultipleChoice"),l_a.forEach(t),Ivt=r(CZe," (ELECTRA model)"),CZe.forEach(t),Nvt=i(Lo),oy=n(Lo,"LI",{});var wZe=s(oy);Ake=n(wZe,"STRONG",{});var i_a=s(Ake);qvt=r(i_a,"roberta"),i_a.forEach(t),jvt=r(wZe," \u2014 "),kle=n(wZe,"A",{href:!0});var d_a=s(kle);Dvt=r(d_a,"FlaxRobertaForMultipleChoice"),d_a.forEach(t),Gvt=r(wZe," (RoBERTa model)"),wZe.forEach(t),Ovt=i(Lo),ry=n(Lo,"LI",{});var AZe=s(ry);Lke=n(AZe,"STRONG",{});var c_a=s(Lke);Vvt=r(c_a,"roformer"),c_a.forEach(t),Xvt=r(AZe," \u2014 "),Sle=n(AZe,"A",{href:!0});var m_a=s(Sle);zvt=r(m_a,"FlaxRoFormerForMultipleChoice"),m_a.forEach(t),Qvt=r(AZe," (RoFormer model)"),AZe.forEach(t),Wvt=i(Lo),ty=n(Lo,"LI",{});var LZe=s(ty);yke=n(LZe,"STRONG",{});var f_a=s(yke);Uvt=r(f_a,"xlm-roberta"),f_a.forEach(t),Hvt=r(LZe," \u2014 "),Rle=n(LZe,"A",{href:!0});var g_a=s(Rle);Jvt=r(g_a,"FlaxXLMRobertaForMultipleChoice"),g_a.forEach(t),Yvt=r(LZe," (XLM-RoBERTa model)"),LZe.forEach(t),Lo.forEach(t),Kvt=i(Ji),T(ay.$$.fragment,Ji),Ji.forEach(t),Hi.forEach(t),joo=i(m),mf=n(m,"H2",{class:!0});var oao=s(mf);ny=n(oao,"A",{id:!0,class:!0,href:!0});var h_a=s(ny);xke=n(h_a,"SPAN",{});var u_a=s(xke);T(mP.$$.fragment,u_a),u_a.forEach(t),h_a.forEach(t),Zvt=i(oao),$ke=n(oao,"SPAN",{});var p_a=s($ke);eFt=r(p_a,"FlaxAutoModelForNextSentencePrediction"),p_a.forEach(t),oao.forEach(t),Doo=i(m),kr=n(m,"DIV",{class:!0});var Yi=s(kr);T(fP.$$.fragment,Yi),oFt=i(Yi),ff=n(Yi,"P",{});var Xde=s(ff);rFt=r(Xde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ple=n(Xde,"A",{href:!0});var __a=s(Ple);tFt=r(__a,"from_pretrained()"),__a.forEach(t),aFt=r(Xde," class method or the "),Ble=n(Xde,"A",{href:!0});var b_a=s(Ble);nFt=r(b_a,"from_config()"),b_a.forEach(t),sFt=r(Xde,` class
method.`),Xde.forEach(t),lFt=i(Yi),gP=n(Yi,"P",{});var rao=s(gP);iFt=r(rao,"This class cannot be instantiated directly using "),kke=n(rao,"CODE",{});var v_a=s(kke);dFt=r(v_a,"__init__()"),v_a.forEach(t),cFt=r(rao," (throws an error)."),rao.forEach(t),mFt=i(Yi),ua=n(Yi,"DIV",{class:!0});var O9=s(ua);T(hP.$$.fragment,O9),fFt=i(O9),Ske=n(O9,"P",{});var F_a=s(Ske);gFt=r(F_a,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),F_a.forEach(t),hFt=i(O9),gf=n(O9,"P",{});var zde=s(gf);uFt=r(zde,`Note:
Loading a model from its configuration file does `),Rke=n(zde,"STRONG",{});var T_a=s(Rke);pFt=r(T_a,"not"),T_a.forEach(t),_Ft=r(zde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ile=n(zde,"A",{href:!0});var M_a=s(Ile);bFt=r(M_a,"from_pretrained()"),M_a.forEach(t),vFt=r(zde," to load the model weights."),zde.forEach(t),FFt=i(O9),T(sy.$$.fragment,O9),O9.forEach(t),TFt=i(Yi),lt=n(Yi,"DIV",{class:!0});var Ki=s(lt);T(uP.$$.fragment,Ki),MFt=i(Ki),Pke=n(Ki,"P",{});var E_a=s(Pke);EFt=r(E_a,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),E_a.forEach(t),CFt=i(Ki),Jn=n(Ki,"P",{});var V9=s(Jn);wFt=r(V9,"The model class to instantiate is selected based on the "),Bke=n(V9,"CODE",{});var C_a=s(Bke);AFt=r(C_a,"model_type"),C_a.forEach(t),LFt=r(V9,` property of the config object (either
passed as an argument or loaded from `),Ike=n(V9,"CODE",{});var w_a=s(Ike);yFt=r(w_a,"pretrained_model_name_or_path"),w_a.forEach(t),xFt=r(V9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nke=n(V9,"CODE",{});var A_a=s(Nke);$Ft=r(A_a,"pretrained_model_name_or_path"),A_a.forEach(t),kFt=r(V9,":"),V9.forEach(t),SFt=i(Ki),qke=n(Ki,"UL",{});var L_a=s(qke);ly=n(L_a,"LI",{});var yZe=s(ly);jke=n(yZe,"STRONG",{});var y_a=s(jke);RFt=r(y_a,"bert"),y_a.forEach(t),PFt=r(yZe," \u2014 "),Nle=n(yZe,"A",{href:!0});var x_a=s(Nle);BFt=r(x_a,"FlaxBertForNextSentencePrediction"),x_a.forEach(t),IFt=r(yZe," (BERT model)"),yZe.forEach(t),L_a.forEach(t),NFt=i(Ki),T(iy.$$.fragment,Ki),Ki.forEach(t),Yi.forEach(t),Goo=i(m),hf=n(m,"H2",{class:!0});var tao=s(hf);dy=n(tao,"A",{id:!0,class:!0,href:!0});var $_a=s(dy);Dke=n($_a,"SPAN",{});var k_a=s(Dke);T(pP.$$.fragment,k_a),k_a.forEach(t),$_a.forEach(t),qFt=i(tao),Gke=n(tao,"SPAN",{});var S_a=s(Gke);jFt=r(S_a,"FlaxAutoModelForImageClassification"),S_a.forEach(t),tao.forEach(t),Ooo=i(m),Sr=n(m,"DIV",{class:!0});var Zi=s(Sr);T(_P.$$.fragment,Zi),DFt=i(Zi),uf=n(Zi,"P",{});var Qde=s(uf);GFt=r(Qde,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qle=n(Qde,"A",{href:!0});var R_a=s(qle);OFt=r(R_a,"from_pretrained()"),R_a.forEach(t),VFt=r(Qde," class method or the "),jle=n(Qde,"A",{href:!0});var P_a=s(jle);XFt=r(P_a,"from_config()"),P_a.forEach(t),zFt=r(Qde,` class
method.`),Qde.forEach(t),QFt=i(Zi),bP=n(Zi,"P",{});var aao=s(bP);WFt=r(aao,"This class cannot be instantiated directly using "),Oke=n(aao,"CODE",{});var B_a=s(Oke);UFt=r(B_a,"__init__()"),B_a.forEach(t),HFt=r(aao," (throws an error)."),aao.forEach(t),JFt=i(Zi),pa=n(Zi,"DIV",{class:!0});var X9=s(pa);T(vP.$$.fragment,X9),YFt=i(X9),Vke=n(X9,"P",{});var I_a=s(Vke);KFt=r(I_a,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),I_a.forEach(t),ZFt=i(X9),pf=n(X9,"P",{});var Wde=s(pf);eTt=r(Wde,`Note:
Loading a model from its configuration file does `),Xke=n(Wde,"STRONG",{});var N_a=s(Xke);oTt=r(N_a,"not"),N_a.forEach(t),rTt=r(Wde,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dle=n(Wde,"A",{href:!0});var q_a=s(Dle);tTt=r(q_a,"from_pretrained()"),q_a.forEach(t),aTt=r(Wde," to load the model weights."),Wde.forEach(t),nTt=i(X9),T(cy.$$.fragment,X9),X9.forEach(t),sTt=i(Zi),it=n(Zi,"DIV",{class:!0});var ed=s(it);T(FP.$$.fragment,ed),lTt=i(ed),zke=n(ed,"P",{});var j_a=s(zke);iTt=r(j_a,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),j_a.forEach(t),dTt=i(ed),Yn=n(ed,"P",{});var z9=s(Yn);cTt=r(z9,"The model class to instantiate is selected based on the "),Qke=n(z9,"CODE",{});var D_a=s(Qke);mTt=r(D_a,"model_type"),D_a.forEach(t),fTt=r(z9,` property of the config object (either
passed as an argument or loaded from `),Wke=n(z9,"CODE",{});var G_a=s(Wke);gTt=r(G_a,"pretrained_model_name_or_path"),G_a.forEach(t),hTt=r(z9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uke=n(z9,"CODE",{});var O_a=s(Uke);uTt=r(O_a,"pretrained_model_name_or_path"),O_a.forEach(t),pTt=r(z9,":"),z9.forEach(t),_Tt=i(ed),TP=n(ed,"UL",{});var nao=s(TP);my=n(nao,"LI",{});var xZe=s(my);Hke=n(xZe,"STRONG",{});var V_a=s(Hke);bTt=r(V_a,"beit"),V_a.forEach(t),vTt=r(xZe," \u2014 "),Gle=n(xZe,"A",{href:!0});var X_a=s(Gle);FTt=r(X_a,"FlaxBeitForImageClassification"),X_a.forEach(t),TTt=r(xZe," (BEiT model)"),xZe.forEach(t),MTt=i(nao),fy=n(nao,"LI",{});var $Ze=s(fy);Jke=n($Ze,"STRONG",{});var z_a=s(Jke);ETt=r(z_a,"vit"),z_a.forEach(t),CTt=r($Ze," \u2014 "),Ole=n($Ze,"A",{href:!0});var Q_a=s(Ole);wTt=r(Q_a,"FlaxViTForImageClassification"),Q_a.forEach(t),ATt=r($Ze," (ViT model)"),$Ze.forEach(t),nao.forEach(t),LTt=i(ed),T(gy.$$.fragment,ed),ed.forEach(t),Zi.forEach(t),Voo=i(m),_f=n(m,"H2",{class:!0});var sao=s(_f);hy=n(sao,"A",{id:!0,class:!0,href:!0});var W_a=s(hy);Yke=n(W_a,"SPAN",{});var U_a=s(Yke);T(MP.$$.fragment,U_a),U_a.forEach(t),W_a.forEach(t),yTt=i(sao),Kke=n(sao,"SPAN",{});var H_a=s(Kke);xTt=r(H_a,"FlaxAutoModelForVision2Seq"),H_a.forEach(t),sao.forEach(t),Xoo=i(m),Rr=n(m,"DIV",{class:!0});var od=s(Rr);T(EP.$$.fragment,od),$Tt=i(od),bf=n(od,"P",{});var Ude=s(bf);kTt=r(Ude,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Vle=n(Ude,"A",{href:!0});var J_a=s(Vle);STt=r(J_a,"from_pretrained()"),J_a.forEach(t),RTt=r(Ude," class method or the "),Xle=n(Ude,"A",{href:!0});var Y_a=s(Xle);PTt=r(Y_a,"from_config()"),Y_a.forEach(t),BTt=r(Ude,` class
method.`),Ude.forEach(t),ITt=i(od),CP=n(od,"P",{});var lao=s(CP);NTt=r(lao,"This class cannot be instantiated directly using "),Zke=n(lao,"CODE",{});var K_a=s(Zke);qTt=r(K_a,"__init__()"),K_a.forEach(t),jTt=r(lao," (throws an error)."),lao.forEach(t),DTt=i(od),_a=n(od,"DIV",{class:!0});var Q9=s(_a);T(wP.$$.fragment,Q9),GTt=i(Q9),eSe=n(Q9,"P",{});var Z_a=s(eSe);OTt=r(Z_a,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Z_a.forEach(t),VTt=i(Q9),vf=n(Q9,"P",{});var Hde=s(vf);XTt=r(Hde,`Note:
Loading a model from its configuration file does `),oSe=n(Hde,"STRONG",{});var e2a=s(oSe);zTt=r(e2a,"not"),e2a.forEach(t),QTt=r(Hde,` load the model weights. It only affects the
model\u2019s configuration. Use `),zle=n(Hde,"A",{href:!0});var o2a=s(zle);WTt=r(o2a,"from_pretrained()"),o2a.forEach(t),UTt=r(Hde," to load the model weights."),Hde.forEach(t),HTt=i(Q9),T(uy.$$.fragment,Q9),Q9.forEach(t),JTt=i(od),dt=n(od,"DIV",{class:!0});var rd=s(dt);T(AP.$$.fragment,rd),YTt=i(rd),rSe=n(rd,"P",{});var r2a=s(rSe);KTt=r(r2a,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),r2a.forEach(t),ZTt=i(rd),Kn=n(rd,"P",{});var W9=s(Kn);eMt=r(W9,"The model class to instantiate is selected based on the "),tSe=n(W9,"CODE",{});var t2a=s(tSe);oMt=r(t2a,"model_type"),t2a.forEach(t),rMt=r(W9,` property of the config object (either
passed as an argument or loaded from `),aSe=n(W9,"CODE",{});var a2a=s(aSe);tMt=r(a2a,"pretrained_model_name_or_path"),a2a.forEach(t),aMt=r(W9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nSe=n(W9,"CODE",{});var n2a=s(nSe);nMt=r(n2a,"pretrained_model_name_or_path"),n2a.forEach(t),sMt=r(W9,":"),W9.forEach(t),lMt=i(rd),sSe=n(rd,"UL",{});var s2a=s(sSe);py=n(s2a,"LI",{});var kZe=s(py);lSe=n(kZe,"STRONG",{});var l2a=s(lSe);iMt=r(l2a,"vision-encoder-decoder"),l2a.forEach(t),dMt=r(kZe," \u2014 "),Qle=n(kZe,"A",{href:!0});var i2a=s(Qle);cMt=r(i2a,"FlaxVisionEncoderDecoderModel"),i2a.forEach(t),mMt=r(kZe," (Vision Encoder decoder model)"),kZe.forEach(t),s2a.forEach(t),fMt=i(rd),T(_y.$$.fragment,rd),rd.forEach(t),od.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Mba)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(es,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(rs,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(ts,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(dd,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Lf,"id","extending-the-auto-classes"),c(Lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lf,"href","#extending-the-auto-classes"),c(cd,"class","relative group"),c(xf,"id","transformers.AutoConfig"),c(xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xf,"href","#transformers.AutoConfig"),c(md,"class","relative group"),c(aI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(nI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(sI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(lI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(iI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(dI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(cI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(mI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(fI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(gI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(hI,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(uI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(pI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(_I,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(bI,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(vI,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig"),c(FI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(TI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(MI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(EI,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(CI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(wI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(AI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(LI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(yI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(xI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c($I,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrConfig"),c(kI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(SI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(RI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(PI,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),c(BI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(II,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(NI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(qI,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(jI,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieConfig"),c(DI,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmConfig"),c(GI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(OI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(VI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(XI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(zI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(QI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(WI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(UI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(HI,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(JI,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseConfig"),c(YI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(KI,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(ZI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(eN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(oN,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(rN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(tN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(aN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(nN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(sN,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(lN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(iN,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(dN,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(cN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(mN,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(fN,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(gN,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMConfig"),c(hN,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(uN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(pN,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(_N,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(bN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(vN,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(FN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(TN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(MN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(EN,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(CN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(wN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(AN,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(LN,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(yN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(xN,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXConfig"),c($N,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(kN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(SN,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(RN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(PN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(BN,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(IN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(NN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(qN,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(jN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(DN,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(GN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(ON,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(VN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(XN,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(zN,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(QN,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(WN,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(UN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(HN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(JN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(YN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(KN,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(ZN,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(eq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(oq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(rq,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(tq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(aq,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(nq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(sq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(lq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(iq,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(dq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(cq,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(mq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(fq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(gq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(hq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(uq,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNConfig"),c(pq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(_q,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(bq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(vq,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPConfig"),c(Fq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(Tq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(Mq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Eq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Cq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(wq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(Aq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(Lq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ou,"id","transformers.AutoTokenizer"),c(ou,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ou,"href","#transformers.AutoTokenizer"),c(gd,"class","relative group"),c(yq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(xq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c($q,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(Sq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(Rq,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Pq,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Bq,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Iq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Nq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(qq,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(jq,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Dq,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Gq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Oq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Vq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Xq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(zq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Qq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Wq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Uq,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(Hq,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Jq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Yq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Kq,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(Zq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(ej,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(oj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(rj,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(tj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(aj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(nj,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(sj,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(lj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(ij,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(mj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(fj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(gj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(hj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(uj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(pj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(_j,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(bj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(vj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(Fj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Tj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Mj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(Ej,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(Cj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(wj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(Aj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(Lj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(yj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($j,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Sj,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(Rj,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseTokenizer"),c(Pj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Bj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Ij,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Nj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(qj,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(jj,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Dj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Gj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Oj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Vj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Xj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(zj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(Qj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(Wj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(Uj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(Hj,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Jj,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Yj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(Kj,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(Zj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(eD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(oD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(rD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(tD,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(aD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(nD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(sD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(lD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(iD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(dD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(cD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(mD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(fD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(gD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(hD,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(uD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(pD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(_D,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(bD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(vD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(FD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(TD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(MD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(ED,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(CD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(wD,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(AD,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(LD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(yD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(xD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c($D,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(kD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(SD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(RD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(PD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(BD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ID,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ND,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(qD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(jD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(DD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(GD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(OD,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(VD,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(XD,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(zD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(QD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(WD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(UD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(HD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(JD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(YD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(eG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(oG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(rG,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(tG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(aG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(nG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(sG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(lG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(iG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(dG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(cG,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(mG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(fG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(gG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(hG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(uG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(pG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(_G,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(bG,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(vG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(FG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(TG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(MG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(EG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(CG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(wG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(AG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(LG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(yG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(xG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c($G,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(kG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(SG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qu,"id","transformers.AutoFeatureExtractor"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoFeatureExtractor"),c(hd,"class","relative group"),c(RG,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(PG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(BG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(IG,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor"),c(NG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(jG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(DG,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(GG,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrFeatureExtractor"),c(OG,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(VG,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(XG,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(zG,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(QG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(WG,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(UG,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(HG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JG,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(YG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(KG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(ZG,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(eO,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(oO,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(rO,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(tO,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(aO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(nO,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(sO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iO,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(dO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(cO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(mO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(fO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gO,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(hO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(uO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(pO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_O,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(vO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(TO,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($p,"id","transformers.AutoProcessor"),c($p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($p,"href","#transformers.AutoProcessor"),c(ud,"class","relative group"),c(MO,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(EO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(CO,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),c(wO,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(AO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(LO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(yO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(xO,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c($O,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMProcessor"),c(kO,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(SO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(BO,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(IO,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(NO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(DO,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(GO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XO,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r_,"id","transformers.AutoModel"),c(r_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r_,"href","#transformers.AutoModel"),c(_d,"class","relative group"),c(zO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(HO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(JO,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(YO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(KO,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(ZO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(eV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(oV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(rV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(tV,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(aV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(nV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(sV,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(lV,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(iV,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrModel"),c(dV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(cV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(mV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(fV,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(gV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(hV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(uV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(pV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(_V,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(bV,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(vV,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrModel"),c(FV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(TV,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(MV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(EV,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),c(CV,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(wV,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(AV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(LV,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieModel"),c(yV,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmModel"),c(xV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c($V,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(kV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(SV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(RV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(PV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(BV,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(IV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(NV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(qV,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(jV,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseModel"),c(DV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(GV,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(OV,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(VV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(XV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(zV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(QV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(WV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(UV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(HV,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(JV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(YV,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(KV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(ZV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(eX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(oX,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(rX,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMModel"),c(tX,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(aX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(nX,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(sX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(lX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(iX,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(dX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(cX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(mX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(fX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(gX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(hX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(uX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(pX,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(_X,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(bX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(vX,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXModel"),c(FX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(TX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(MX,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(EX,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(CX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(wX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(AX,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(LX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(yX,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(xX,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c($X,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(kX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(SX,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(RX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(PX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(BX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(IX,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(NX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(qX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(jX,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(DX,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(GX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(OX,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(VX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(XX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(zX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(QX,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(WX,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(UX,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(HX,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(JX,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(YX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(KX,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(ZX,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNModel"),c(ez,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(oz,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(rz,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(tz,"href","/docs/transformers/main/en/model_doc/xclip#transformers.XCLIPModel"),c(az,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(nz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(sz,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(lz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(iz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(dz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(cz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(mz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M1,"id","transformers.AutoModelForPreTraining"),c(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M1,"href","#transformers.AutoModelForPreTraining"),c(Fd,"class","relative group"),c(fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(pz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(_z,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(bz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(vz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Fz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Tz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Mz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Ez,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Cz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(wz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Az,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Lz,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForPreTraining"),c(yz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(xz,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c($z,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(kz,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Sz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Rz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Pz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Bz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Iz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Nz,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(qz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(jz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Dz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Gz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Oz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Vz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(Xz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(zz,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(Qz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Wz,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(Uz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Hz,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Jz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Yz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Kz,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Zz,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(eQ,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(oQ,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(rQ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(tQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(aQ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(nQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(iQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fb,"id","transformers.AutoModelForCausalLM"),c(Fb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fb,"href","#transformers.AutoModelForCausalLM"),c(Ed,"class","relative group"),c(dQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(gQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(hQ,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(uQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(pQ,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(_Q,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(bQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(vQ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(FQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(TQ,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(EQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(CQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(wQ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForCausalLM"),c(AQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(LQ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/gpt_neox_japanese#transformers.GPTNeoXJapaneseForCausalLM"),c($Q,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(kQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(SQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(RQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(PQ,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(BQ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(IQ,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(NQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(qQ,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(jQ,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(DQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(GQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(OQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(VQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(XQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(zQ,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(QQ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(WQ,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(UQ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(HQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(JQ,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(YQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(KQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(ZQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fv,"id","transformers.AutoModelForMaskedLM"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForMaskedLM"),c(Ad,"class","relative group"),c(eW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(aW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(sW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(lW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(iW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(dW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(cW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(mW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(fW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(gW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(hW,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMaskedLM"),c(uW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(pW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(_W,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(bW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(FW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TW,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(MW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(EW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(CW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(wW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(AW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(LW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(yW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(xW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c($W,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(kW,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(SW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(RW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(PW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(BW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(IW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(NW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForSeq2SeqLM"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForSeq2SeqLM"),c(xd,"class","relative group"),c(GW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zW,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(QW,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(WW,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(UW,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(HW,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(JW,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(YW,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(KW,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(ZW,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(eU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(oU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(rU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(tU,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(aU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(nU,"href","/docs/transformers/main/en/model_doc/pegasus_x#transformers.PegasusXForConditionalGeneration"),c(sU,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(lU,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(iU,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(dU,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wF,"id","transformers.AutoModelForSequenceClassification"),c(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wF,"href","#transformers.AutoModelForSequenceClassification"),c(Sd,"class","relative group"),c(cU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(hU,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(uU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(pU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(_U,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(bU,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(vU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(FU,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(TU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(MU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(EU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(CU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(wU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(AU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(LU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(yU,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForSequenceClassification"),c(xU,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForSequenceClassification"),c($U,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(kU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(SU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(RU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(PU,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(BU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(IU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(NU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(qU,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(jU,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(DU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(GU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(OU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(VU,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForSequenceClassification"),c(XU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(zU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(QU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(WU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(UU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(HU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(JU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(YU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(KU,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(ZU,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(eH,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(oH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(rH,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(tH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(aH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(nH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(sH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(iH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(dH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(cH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(mH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(fH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(gH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($T,"id","transformers.AutoModelForMultipleChoice"),c($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($T,"href","#transformers.AutoModelForMultipleChoice"),c(Bd,"class","relative group"),c(hH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(bH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(vH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(FH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(TH,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(MH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(EH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(CH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(wH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(AH,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(LH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForMultipleChoice"),c(yH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(xH,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c($H,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(kH,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(SH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(RH,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(PH,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(BH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(IH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(NH,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(qH,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(jH,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(DH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(GH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(OH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(VH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(XH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(zH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(QH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(WH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(UH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.AutoModelForNextSentencePrediction"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.AutoModelForNextSentencePrediction"),c(qd,"class","relative group"),c(HH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(ZH,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForNextSentencePrediction"),c(eJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(oJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(rJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(tJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(aJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.AutoModelForTokenClassification"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.AutoModelForTokenClassification"),c(Gd,"class","relative group"),c(nJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(dJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(cJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(mJ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(fJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(gJ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(hJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(uJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(pJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(_J,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(bJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(vJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(FJ,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForTokenClassification"),c(TJ,"href","/docs/transformers/main/en/model_doc/esm#transformers.EsmForTokenClassification"),c(MJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(EJ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(CJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(wJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(AJ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(LJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(yJ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(xJ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c($J,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(kJ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(SJ,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForTokenClassification"),c(RJ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(PJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(BJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(IJ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(NJ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(qJ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(jJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(DJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(GJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(OJ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(VJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(XJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(zJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(QJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(WJ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.AutoModelForQuestionAnswering"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.AutoModelForQuestionAnswering"),c(Xd,"class","relative group"),c(UJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(KJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(ZJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(eY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(oY,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(rY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(tY,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(aY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(nY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(sY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(lY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(iY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(dY,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(cY,"href","/docs/transformers/main/en/model_doc/ernie#transformers.ErnieForQuestionAnswering"),c(mY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(fY,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(gY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(hY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(uY,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(pY,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(_Y,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(bY,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(vY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(FY,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(TY,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(MY,"href","/docs/transformers/main/en/model_doc/markuplm#transformers.MarkupLMForQuestionAnswering"),c(EY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(CY,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(wY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(AY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(LY,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(yY,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(xY,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c($Y,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(kY,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(SY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(RY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(PY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(BY,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(IY,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(NY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(qY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(jY,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(DY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(GY,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i4,"id","transformers.AutoModelForTableQuestionAnswering"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Wd,"class","relative group"),c(OY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g4,"id","transformers.AutoModelForDocumentQuestionAnswering"),c(g4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g4,"href","#transformers.AutoModelForDocumentQuestionAnswering"),c(Jd,"class","relative group"),c(QY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForQuestionAnswering"),c(JY,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(YY,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.AutoModelForImageClassification"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.AutoModelForImageClassification"),c(ec,"class","relative group"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(rK,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(tK,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(aK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(nK,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(sK,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(lK,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(iK,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(cK,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(fK,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(gK,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(hK,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(uK,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(pK,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(_K,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(bK,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(vK,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(FK,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(TK,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(MK,"href","/docs/transformers/main/en/model_doc/vit_msn#transformers.ViTMSNForImageClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j4,"id","transformers.AutoModelForVideoClassification"),c(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j4,"href","#transformers.AutoModelForVideoClassification"),c(tc,"class","relative group"),c(EK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AK,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.AutoModelForVision2Seq"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.AutoModelForVision2Seq"),c(sc,"class","relative group"),c(LK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($K,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.AutoModelForVisualQuestionAnswering"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(dc,"class","relative group"),c(kK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.AutoModelForAudioClassification"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.AutoModelForAudioClassification"),c(fc,"class","relative group"),c(BK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(jK,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(DK,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(GK,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(OK,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(VK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(XK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(zK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(QK,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.AutoModelForAudioFrameClassification"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.AutoModelForAudioFrameClassification"),c(uc,"class","relative group"),c(WK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JK,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(YK,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(KK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(ZK,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(eZ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MC,"id","transformers.AutoModelForCTC"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.AutoModelForCTC"),c(bc,"class","relative group"),c(oZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(nZ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(sZ,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(lZ,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(iZ,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(dZ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(cZ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(mZ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(fZ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(gZ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IC,"id","transformers.AutoModelForSpeechSeq2Seq"),c(IC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IC,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Tc,"class","relative group"),c(hZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Z,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(bZ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.AutoModelForAudioXVector"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.AutoModelForAudioXVector"),c(Cc,"class","relative group"),c(vZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(EZ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(CZ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(wZ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(AZ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YC,"id","transformers.AutoModelForMaskedImageModeling"),c(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YC,"href","#transformers.AutoModelForMaskedImageModeling"),c(Lc,"class","relative group"),c(LZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Z,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(kZ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(SZ,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(RZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.AutoModelForObjectDetection"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.AutoModelForObjectDetection"),c($c,"class","relative group"),c(PZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NZ,"href","/docs/transformers/main/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection"),c(qZ,"href","/docs/transformers/main/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection"),c(jZ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(DZ,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g3,"id","transformers.AutoModelForImageSegmentation"),c(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g3,"href","#transformers.AutoModelForImageSegmentation"),c(Rc,"class","relative group"),c(GZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XZ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b3,"id","transformers.AutoModelForSemanticSegmentation"),c(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b3,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ic,"class","relative group"),c(zZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(HZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(JZ,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(YZ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(KZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L3,"id","transformers.AutoModelForInstanceSegmentation"),c(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L3,"href","#transformers.AutoModelForInstanceSegmentation"),c(jc,"class","relative group"),c(ZZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S3,"id","transformers.TFAutoModel"),c(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S3,"href","#transformers.TFAutoModel"),c(Oc,"class","relative group"),c(tee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(see,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(lee,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(iee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(dee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(cee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(mee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(fee,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(gee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(hee,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(uee,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(pee,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(_ee,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(bee,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(vee,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(Fee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Tee,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Mee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(Eee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Cee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(wee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Aee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Lee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(yee,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.TFGroupViTModel"),c(xee,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c($ee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(kee,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(See,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(Ree,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(Pee,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Bee,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(Iee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(Nee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(qee,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTModel"),c(jee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Dee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(Gee,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Oee,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(Vee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Xee,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(zee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(Qee,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(Wee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(Uee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Hee,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(Jee,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Yee,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(Kee,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(Zee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(eoe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(ooe,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(roe,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(toe,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(aoe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),c(noe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(soe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(loe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.TFAutoModelForPreTraining"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.TFAutoModelForPreTraining"),c(zc,"class","relative group"),c(ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(doe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(coe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(moe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(foe,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(goe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(hoe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uoe,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(poe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(_oe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(boe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(voe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Foe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Toe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Moe,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Eoe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Coe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(woe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Aoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Loe,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yoe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xoe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c($oe,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(koe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Soe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Roe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l0,"id","transformers.TFAutoModelForCausalLM"),c(l0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l0,"href","#transformers.TFAutoModelForCausalLM"),c(Uc,"class","relative group"),c(Poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Noe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(qoe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(joe,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Doe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Goe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Ooe,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Voe,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(Xoe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(zoe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Qoe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Woe,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Uoe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(Hoe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Joe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C0,"id","transformers.TFAutoModelForImageClassification"),c(C0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C0,"href","#transformers.TFAutoModelForImageClassification"),c(Yc,"class","relative group"),c(Yoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Koe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ere,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(ore,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(rre,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(tre,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(are,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForImageClassification"),c(nre,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(sre,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(lre,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(ire,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(dre,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.TFAutoModelForSemanticSegmentation"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(em,"class","relative group"),c(cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gre,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(hre,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.TFMobileViTForSemanticSegmentation"),c(ure,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G0,"id","transformers.TFAutoModelForMaskedLM"),c(G0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G0,"href","#transformers.TFAutoModelForMaskedLM"),c(am,"class","relative group"),c(pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_re,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vre,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Fre,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Tre,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Mre,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Ere,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(Cre,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(wre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Are,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(Lre,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yre,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(xre,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($re,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(kre,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(Sre,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Rre,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(Pre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Bre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(Ire,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Nre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cw,"id","transformers.TFAutoModelForSeq2SeqLM"),c(cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cw,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(lm,"class","relative group"),c(jre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ore,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Vre,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(Xre,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(zre,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(Qre,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(Wre,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(Ure,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(Hre,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(Jre,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(Yre,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ew,"id","transformers.TFAutoModelForSequenceClassification"),c(Ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ew,"href","#transformers.TFAutoModelForSequenceClassification"),c(cm,"class","relative group"),c(Kre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ete,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ote,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(rte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(tte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(ate,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(nte,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(ste,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(lte,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(ite,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(dte,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(cte,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(mte,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(fte,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(gte,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(hte,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(ute,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c(pte,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(_te,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(bte,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(vte,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(Fte,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(Tte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(Mte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(Ete,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(Cte,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(wte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Ate,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(Lte,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zw,"id","transformers.TFAutoModelForMultipleChoice"),c(Zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zw,"href","#transformers.TFAutoModelForMultipleChoice"),c(gm,"class","relative group"),c(yte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($te,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kte,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Ste,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Rte,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(Pte,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(Bte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Ite,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(Nte,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(qte,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(jte,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Dte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(Gte,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Ote,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Vte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Xte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(zte,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(Qte,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Wte,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vA,"id","transformers.TFAutoModelForNextSentencePrediction"),c(vA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vA,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(pm,"class","relative group"),c(Ute,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yte,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(Kte,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CA,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(CA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CA,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(vm,"class","relative group"),c(Zte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rae,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yA,"id","transformers.TFAutoModelForDocumentQuestionAnswering"),c(yA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yA,"href","#transformers.TFAutoModelForDocumentQuestionAnswering"),c(Mm,"class","relative group"),c(tae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sae,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForQuestionAnswering"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SA,"id","transformers.TFAutoModelForTokenClassification"),c(SA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SA,"href","#transformers.TFAutoModelForTokenClassification"),c(wm,"class","relative group"),c(lae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cae,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(mae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(fae,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(gae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(hae,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(uae,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(pae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(_ae,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(bae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(vae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Fae,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Tae,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(Mae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Eae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Cae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(wae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Aae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Lae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(yae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(xae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c($ae,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r6,"id","transformers.TFAutoModelForQuestionAnswering"),c(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r6,"href","#transformers.TFAutoModelForQuestionAnswering"),c(ym,"class","relative group"),c(kae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pae,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Bae,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Iae,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Nae,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(qae,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(jae,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Dae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Gae,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Oae,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Vae,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Xae,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(zae,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(Qae,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Wae,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Uae,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(Hae,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Jae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Yae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Kae,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(Zae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(ene,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A6,"id","transformers.TFAutoModelForVision2Seq"),c(A6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A6,"href","#transformers.TFAutoModelForVision2Seq"),c(km,"class","relative group"),c(one,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ane,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($6,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c($6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($6,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Pm,"class","relative group"),c(nne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ine,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P6,"id","transformers.FlaxAutoModel"),c(P6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P6,"href","#transformers.FlaxAutoModel"),c(Nm,"class","relative group"),c(dne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fne,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(gne,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(hne,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(une,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(pne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(_ne,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(bne,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(vne,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(Fne,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(Tne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(Mne,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Ene,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(Cne,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(wne,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(Ane,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(Lne,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(yne,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(xne,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c($ne,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(kne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Sne,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Rne,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(Pne,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(Bne,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(Ine,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Nne,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(qne,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c7,"id","transformers.FlaxAutoModelForCausalLM"),c(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c7,"href","#transformers.FlaxAutoModelForCausalLM"),c(Dm,"class","relative group"),c(jne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(One,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Vne,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Xne,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(zne,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Qne,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Wne,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Une,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Hne,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Jne,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(Yne,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E7,"id","transformers.FlaxAutoModelForPreTraining"),c(E7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E7,"href","#transformers.FlaxAutoModelForPreTraining"),c(Vm,"class","relative group"),c(Kne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zne,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ese,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ose,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(rse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(ase,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(nse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(sse,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(lse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ise,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(dse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(cse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(mse,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(fse,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(gse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j7,"id","transformers.FlaxAutoModelForMaskedLM"),c(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j7,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Qm,"class","relative group"),c(hse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(use,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_se,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(bse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Fse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Tse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Mse,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Ese,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Cse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(wse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ase,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K7,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(K7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K7,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Hm,"class","relative group"),c(Lse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($se,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(kse,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Sse,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Rse,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Pse,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(Bse,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Ise,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Nse,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(qse,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(jse,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mL,"id","transformers.FlaxAutoModelForSequenceClassification"),c(mL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mL,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Km,"class","relative group"),c(Dse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ose,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vse,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Xse,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(zse,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Qse,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Wse,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Use,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Hse,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Jse,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Yse,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Kse,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CL,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(CL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CL,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(of,"class","relative group"),c(Zse,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ele,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ole,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rle,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(tle,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(ale,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(nle,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(sle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(lle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(ile,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(dle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(cle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(mle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NL,"id","transformers.FlaxAutoModelForTokenClassification"),c(NL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NL,"href","#transformers.FlaxAutoModelForTokenClassification"),c(af,"class","relative group"),c(fle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ule,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(ple,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(_le,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(ble,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(vle,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Fle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Tle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Mle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UL,"id","transformers.FlaxAutoModelForMultipleChoice"),c(UL,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UL,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(lf,"class","relative group"),c(Ele,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ale,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Lle,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(yle,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(xle,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c($le,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(kle,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Sle,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Rle,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ny,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(ny,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ny,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(mf,"class","relative group"),c(Ple,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ble,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ile,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nle,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dy,"id","transformers.FlaxAutoModelForImageClassification"),c(dy,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dy,"href","#transformers.FlaxAutoModelForImageClassification"),c(hf,"class","relative group"),c(qle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gle,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Ole,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hy,"id","transformers.FlaxAutoModelForVision2Seq"),c(hy,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hy,"href","#transformers.FlaxAutoModelForVision2Seq"),c(_f,"class","relative group"),c(Vle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zle,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qle,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,yo),e(yo,td),b(m,Ef,_),b(m,pt,_),e(pt,ad),e(pt,nd),e(nd,U9),e(pt,Cf),b(m,Ve,_),b(m,He,_),e(He,sd),e(He,es),e(es,H9),e(He,os),e(He,rs),e(rs,J9),e(He,ld),e(He,ts),e(ts,Y9),e(He,id),b(m,wf,_),M(Qa,m,_),b(m,Je,_),b(m,Ae,_),e(Ae,KB),e(Ae,dd),e(dd,ZB),e(Ae,eI),b(m,xo,_),b(m,Wa,_),e(Wa,oI),e(Wa,Af),e(Af,rI),e(Wa,iao),b(m,SZe,_),b(m,cd,_),e(cd,Lf),e(Lf,Jde),M(K9,Jde,null),e(cd,dao),e(cd,Yde),e(Yde,cao),b(m,RZe,_),b(m,as,_),e(as,mao),e(as,Kde),e(Kde,fao),e(as,gao),e(as,Zde),e(Zde,hao),e(as,uao),b(m,PZe,_),M(Z9,m,_),b(m,BZe,_),b(m,tI,_),e(tI,pao),b(m,IZe,_),M(yf,m,_),b(m,NZe,_),b(m,md,_),e(md,xf),e(xf,ece),M(ex,ece,null),e(md,_ao),e(md,oce),e(oce,bao),b(m,qZe,_),b(m,$o,_),M(ox,$o,null),e($o,vao),e($o,rx),e(rx,Fao),e(rx,aI),e(aI,Tao),e(rx,Mao),e($o,Eao),e($o,tx),e(tx,Cao),e(tx,rce),e(rce,wao),e(tx,Aao),e($o,Lao),e($o,Pr),M(ax,Pr,null),e(Pr,yao),e(Pr,tce),e(tce,xao),e(Pr,$ao),e(Pr,fd),e(fd,kao),e(fd,ace),e(ace,Sao),e(fd,Rao),e(fd,nce),e(nce,Pao),e(fd,Bao),e(Pr,Iao),e(Pr,A),e(A,$f),e($f,sce),e(sce,Nao),e($f,qao),e($f,nI),e(nI,jao),e($f,Dao),e(A,Gao),e(A,kf),e(kf,lce),e(lce,Oao),e(kf,Vao),e(kf,sI),e(sI,Xao),e(kf,zao),e(A,Qao),e(A,Sf),e(Sf,ice),e(ice,Wao),e(Sf,Uao),e(Sf,lI),e(lI,Hao),e(Sf,Jao),e(A,Yao),e(A,Rf),e(Rf,dce),e(dce,Kao),e(Rf,Zao),e(Rf,iI),e(iI,eno),e(Rf,ono),e(A,rno),e(A,Pf),e(Pf,cce),e(cce,tno),e(Pf,ano),e(Pf,dI),e(dI,nno),e(Pf,sno),e(A,lno),e(A,Bf),e(Bf,mce),e(mce,ino),e(Bf,dno),e(Bf,cI),e(cI,cno),e(Bf,mno),e(A,fno),e(A,If),e(If,fce),e(fce,gno),e(If,hno),e(If,mI),e(mI,uno),e(If,pno),e(A,_no),e(A,Nf),e(Nf,gce),e(gce,bno),e(Nf,vno),e(Nf,fI),e(fI,Fno),e(Nf,Tno),e(A,Mno),e(A,qf),e(qf,hce),e(hce,Eno),e(qf,Cno),e(qf,gI),e(gI,wno),e(qf,Ano),e(A,Lno),e(A,jf),e(jf,uce),e(uce,yno),e(jf,xno),e(jf,hI),e(hI,$no),e(jf,kno),e(A,Sno),e(A,Df),e(Df,pce),e(pce,Rno),e(Df,Pno),e(Df,uI),e(uI,Bno),e(Df,Ino),e(A,Nno),e(A,Gf),e(Gf,_ce),e(_ce,qno),e(Gf,jno),e(Gf,pI),e(pI,Dno),e(Gf,Gno),e(A,Ono),e(A,Of),e(Of,bce),e(bce,Vno),e(Of,Xno),e(Of,_I),e(_I,zno),e(Of,Qno),e(A,Wno),e(A,Vf),e(Vf,vce),e(vce,Uno),e(Vf,Hno),e(Vf,bI),e(bI,Jno),e(Vf,Yno),e(A,Kno),e(A,Xf),e(Xf,Fce),e(Fce,Zno),e(Xf,eso),e(Xf,vI),e(vI,oso),e(Xf,rso),e(A,tso),e(A,zf),e(zf,Tce),e(Tce,aso),e(zf,nso),e(zf,FI),e(FI,sso),e(zf,lso),e(A,iso),e(A,Qf),e(Qf,Mce),e(Mce,dso),e(Qf,cso),e(Qf,TI),e(TI,mso),e(Qf,fso),e(A,gso),e(A,Wf),e(Wf,Ece),e(Ece,hso),e(Wf,uso),e(Wf,MI),e(MI,pso),e(Wf,_so),e(A,bso),e(A,Uf),e(Uf,Cce),e(Cce,vso),e(Uf,Fso),e(Uf,EI),e(EI,Tso),e(Uf,Mso),e(A,Eso),e(A,Hf),e(Hf,wce),e(wce,Cso),e(Hf,wso),e(Hf,CI),e(CI,Aso),e(Hf,Lso),e(A,yso),e(A,Jf),e(Jf,Ace),e(Ace,xso),e(Jf,$so),e(Jf,wI),e(wI,kso),e(Jf,Sso),e(A,Rso),e(A,Yf),e(Yf,Lce),e(Lce,Pso),e(Yf,Bso),e(Yf,AI),e(AI,Iso),e(Yf,Nso),e(A,qso),e(A,Kf),e(Kf,yce),e(yce,jso),e(Kf,Dso),e(Kf,LI),e(LI,Gso),e(Kf,Oso),e(A,Vso),e(A,Zf),e(Zf,xce),e(xce,Xso),e(Zf,zso),e(Zf,yI),e(yI,Qso),e(Zf,Wso),e(A,Uso),e(A,eg),e(eg,$ce),e($ce,Hso),e(eg,Jso),e(eg,xI),e(xI,Yso),e(eg,Kso),e(A,Zso),e(A,og),e(og,kce),e(kce,elo),e(og,olo),e(og,$I),e($I,rlo),e(og,tlo),e(A,alo),e(A,rg),e(rg,Sce),e(Sce,nlo),e(rg,slo),e(rg,kI),e(kI,llo),e(rg,ilo),e(A,dlo),e(A,tg),e(tg,Rce),e(Rce,clo),e(tg,mlo),e(tg,SI),e(SI,flo),e(tg,glo),e(A,hlo),e(A,ag),e(ag,Pce),e(Pce,ulo),e(ag,plo),e(ag,RI),e(RI,_lo),e(ag,blo),e(A,vlo),e(A,ng),e(ng,Bce),e(Bce,Flo),e(ng,Tlo),e(ng,PI),e(PI,Mlo),e(ng,Elo),e(A,Clo),e(A,sg),e(sg,Ice),e(Ice,wlo),e(sg,Alo),e(sg,BI),e(BI,Llo),e(sg,ylo),e(A,xlo),e(A,lg),e(lg,Nce),e(Nce,$lo),e(lg,klo),e(lg,II),e(II,Slo),e(lg,Rlo),e(A,Plo),e(A,ig),e(ig,qce),e(qce,Blo),e(ig,Ilo),e(ig,NI),e(NI,Nlo),e(ig,qlo),e(A,jlo),e(A,dg),e(dg,jce),e(jce,Dlo),e(dg,Glo),e(dg,qI),e(qI,Olo),e(dg,Vlo),e(A,Xlo),e(A,cg),e(cg,Dce),e(Dce,zlo),e(cg,Qlo),e(cg,jI),e(jI,Wlo),e(cg,Ulo),e(A,Hlo),e(A,mg),e(mg,Gce),e(Gce,Jlo),e(mg,Ylo),e(mg,DI),e(DI,Klo),e(mg,Zlo),e(A,eio),e(A,fg),e(fg,Oce),e(Oce,oio),e(fg,rio),e(fg,GI),e(GI,tio),e(fg,aio),e(A,nio),e(A,gg),e(gg,Vce),e(Vce,sio),e(gg,lio),e(gg,OI),e(OI,iio),e(gg,dio),e(A,cio),e(A,hg),e(hg,Xce),e(Xce,mio),e(hg,fio),e(hg,VI),e(VI,gio),e(hg,hio),e(A,uio),e(A,ug),e(ug,zce),e(zce,pio),e(ug,_io),e(ug,XI),e(XI,bio),e(ug,vio),e(A,Fio),e(A,pg),e(pg,Qce),e(Qce,Tio),e(pg,Mio),e(pg,zI),e(zI,Eio),e(pg,Cio),e(A,wio),e(A,_g),e(_g,Wce),e(Wce,Aio),e(_g,Lio),e(_g,QI),e(QI,yio),e(_g,xio),e(A,$io),e(A,bg),e(bg,Uce),e(Uce,kio),e(bg,Sio),e(bg,WI),e(WI,Rio),e(bg,Pio),e(A,Bio),e(A,vg),e(vg,Hce),e(Hce,Iio),e(vg,Nio),e(vg,UI),e(UI,qio),e(vg,jio),e(A,Dio),e(A,Fg),e(Fg,Jce),e(Jce,Gio),e(Fg,Oio),e(Fg,HI),e(HI,Vio),e(Fg,Xio),e(A,zio),e(A,Tg),e(Tg,Yce),e(Yce,Qio),e(Tg,Wio),e(Tg,JI),e(JI,Uio),e(Tg,Hio),e(A,Jio),e(A,Mg),e(Mg,Kce),e(Kce,Yio),e(Mg,Kio),e(Mg,YI),e(YI,Zio),e(Mg,edo),e(A,odo),e(A,Eg),e(Eg,Zce),e(Zce,rdo),e(Eg,tdo),e(Eg,KI),e(KI,ado),e(Eg,ndo),e(A,sdo),e(A,Cg),e(Cg,eme),e(eme,ldo),e(Cg,ido),e(Cg,ZI),e(ZI,ddo),e(Cg,cdo),e(A,mdo),e(A,wg),e(wg,ome),e(ome,fdo),e(wg,gdo),e(wg,eN),e(eN,hdo),e(wg,udo),e(A,pdo),e(A,Ag),e(Ag,rme),e(rme,_do),e(Ag,bdo),e(Ag,oN),e(oN,vdo),e(Ag,Fdo),e(A,Tdo),e(A,Lg),e(Lg,tme),e(tme,Mdo),e(Lg,Edo),e(Lg,rN),e(rN,Cdo),e(Lg,wdo),e(A,Ado),e(A,yg),e(yg,ame),e(ame,Ldo),e(yg,ydo),e(yg,tN),e(tN,xdo),e(yg,$do),e(A,kdo),e(A,xg),e(xg,nme),e(nme,Sdo),e(xg,Rdo),e(xg,aN),e(aN,Pdo),e(xg,Bdo),e(A,Ido),e(A,$g),e($g,sme),e(sme,Ndo),e($g,qdo),e($g,nN),e(nN,jdo),e($g,Ddo),e(A,Gdo),e(A,kg),e(kg,lme),e(lme,Odo),e(kg,Vdo),e(kg,sN),e(sN,Xdo),e(kg,zdo),e(A,Qdo),e(A,Sg),e(Sg,ime),e(ime,Wdo),e(Sg,Udo),e(Sg,lN),e(lN,Hdo),e(Sg,Jdo),e(A,Ydo),e(A,Rg),e(Rg,dme),e(dme,Kdo),e(Rg,Zdo),e(Rg,iN),e(iN,eco),e(Rg,oco),e(A,rco),e(A,Pg),e(Pg,cme),e(cme,tco),e(Pg,aco),e(Pg,dN),e(dN,nco),e(Pg,sco),e(A,lco),e(A,Bg),e(Bg,mme),e(mme,ico),e(Bg,dco),e(Bg,cN),e(cN,cco),e(Bg,mco),e(A,fco),e(A,Ig),e(Ig,fme),e(fme,gco),e(Ig,hco),e(Ig,mN),e(mN,uco),e(Ig,pco),e(A,_co),e(A,Ng),e(Ng,gme),e(gme,bco),e(Ng,vco),e(Ng,fN),e(fN,Fco),e(Ng,Tco),e(A,Mco),e(A,qg),e(qg,hme),e(hme,Eco),e(qg,Cco),e(qg,gN),e(gN,wco),e(qg,Aco),e(A,Lco),e(A,jg),e(jg,ume),e(ume,yco),e(jg,xco),e(jg,hN),e(hN,$co),e(jg,kco),e(A,Sco),e(A,Dg),e(Dg,pme),e(pme,Rco),e(Dg,Pco),e(Dg,uN),e(uN,Bco),e(Dg,Ico),e(A,Nco),e(A,Gg),e(Gg,_me),e(_me,qco),e(Gg,jco),e(Gg,pN),e(pN,Dco),e(Gg,Gco),e(A,Oco),e(A,Og),e(Og,bme),e(bme,Vco),e(Og,Xco),e(Og,_N),e(_N,zco),e(Og,Qco),e(A,Wco),e(A,Vg),e(Vg,vme),e(vme,Uco),e(Vg,Hco),e(Vg,bN),e(bN,Jco),e(Vg,Yco),e(A,Kco),e(A,Xg),e(Xg,Fme),e(Fme,Zco),e(Xg,emo),e(Xg,vN),e(vN,omo),e(Xg,rmo),e(A,tmo),e(A,zg),e(zg,Tme),e(Tme,amo),e(zg,nmo),e(zg,FN),e(FN,smo),e(zg,lmo),e(A,imo),e(A,Qg),e(Qg,Mme),e(Mme,dmo),e(Qg,cmo),e(Qg,TN),e(TN,mmo),e(Qg,fmo),e(A,gmo),e(A,Wg),e(Wg,Eme),e(Eme,hmo),e(Wg,umo),e(Wg,MN),e(MN,pmo),e(Wg,_mo),e(A,bmo),e(A,Ug),e(Ug,Cme),e(Cme,vmo),e(Ug,Fmo),e(Ug,EN),e(EN,Tmo),e(Ug,Mmo),e(A,Emo),e(A,Hg),e(Hg,wme),e(wme,Cmo),e(Hg,wmo),e(Hg,CN),e(CN,Amo),e(Hg,Lmo),e(A,ymo),e(A,Jg),e(Jg,Ame),e(Ame,xmo),e(Jg,$mo),e(Jg,wN),e(wN,kmo),e(Jg,Smo),e(A,Rmo),e(A,Yg),e(Yg,Lme),e(Lme,Pmo),e(Yg,Bmo),e(Yg,AN),e(AN,Imo),e(Yg,Nmo),e(A,qmo),e(A,Kg),e(Kg,yme),e(yme,jmo),e(Kg,Dmo),e(Kg,LN),e(LN,Gmo),e(Kg,Omo),e(A,Vmo),e(A,Zg),e(Zg,xme),e(xme,Xmo),e(Zg,zmo),e(Zg,yN),e(yN,Qmo),e(Zg,Wmo),e(A,Umo),e(A,eh),e(eh,$me),e($me,Hmo),e(eh,Jmo),e(eh,xN),e(xN,Ymo),e(eh,Kmo),e(A,Zmo),e(A,oh),e(oh,kme),e(kme,efo),e(oh,ofo),e(oh,$N),e($N,rfo),e(oh,tfo),e(A,afo),e(A,rh),e(rh,Sme),e(Sme,nfo),e(rh,sfo),e(rh,kN),e(kN,lfo),e(rh,ifo),e(A,dfo),e(A,th),e(th,Rme),e(Rme,cfo),e(th,mfo),e(th,SN),e(SN,ffo),e(th,gfo),e(A,hfo),e(A,ah),e(ah,Pme),e(Pme,ufo),e(ah,pfo),e(ah,RN),e(RN,_fo),e(ah,bfo),e(A,vfo),e(A,nh),e(nh,Bme),e(Bme,Ffo),e(nh,Tfo),e(nh,PN),e(PN,Mfo),e(nh,Efo),e(A,Cfo),e(A,sh),e(sh,Ime),e(Ime,wfo),e(sh,Afo),e(sh,BN),e(BN,Lfo),e(sh,yfo),e(A,xfo),e(A,lh),e(lh,Nme),e(Nme,$fo),e(lh,kfo),e(lh,IN),e(IN,Sfo),e(lh,Rfo),e(A,Pfo),e(A,ih),e(ih,qme),e(qme,Bfo),e(ih,Ifo),e(ih,NN),e(NN,Nfo),e(ih,qfo),e(A,jfo),e(A,dh),e(dh,jme),e(jme,Dfo),e(dh,Gfo),e(dh,qN),e(qN,Ofo),e(dh,Vfo),e(A,Xfo),e(A,ch),e(ch,Dme),e(Dme,zfo),e(ch,Qfo),e(ch,jN),e(jN,Wfo),e(ch,Ufo),e(A,Hfo),e(A,mh),e(mh,Gme),e(Gme,Jfo),e(mh,Yfo),e(mh,DN),e(DN,Kfo),e(mh,Zfo),e(A,ego),e(A,fh),e(fh,Ome),e(Ome,ogo),e(fh,rgo),e(fh,GN),e(GN,tgo),e(fh,ago),e(A,ngo),e(A,gh),e(gh,Vme),e(Vme,sgo),e(gh,lgo),e(gh,ON),e(ON,igo),e(gh,dgo),e(A,cgo),e(A,hh),e(hh,Xme),e(Xme,mgo),e(hh,fgo),e(hh,VN),e(VN,ggo),e(hh,hgo),e(A,ugo),e(A,uh),e(uh,zme),e(zme,pgo),e(uh,_go),e(uh,XN),e(XN,bgo),e(uh,vgo),e(A,Fgo),e(A,ph),e(ph,Qme),e(Qme,Tgo),e(ph,Mgo),e(ph,zN),e(zN,Ego),e(ph,Cgo),e(A,wgo),e(A,_h),e(_h,Wme),e(Wme,Ago),e(_h,Lgo),e(_h,QN),e(QN,ygo),e(_h,xgo),e(A,$go),e(A,bh),e(bh,Ume),e(Ume,kgo),e(bh,Sgo),e(bh,WN),e(WN,Rgo),e(bh,Pgo),e(A,Bgo),e(A,vh),e(vh,Hme),e(Hme,Igo),e(vh,Ngo),e(vh,UN),e(UN,qgo),e(vh,jgo),e(A,Dgo),e(A,Fh),e(Fh,Jme),e(Jme,Ggo),e(Fh,Ogo),e(Fh,HN),e(HN,Vgo),e(Fh,Xgo),e(A,zgo),e(A,Th),e(Th,Yme),e(Yme,Qgo),e(Th,Wgo),e(Th,JN),e(JN,Ugo),e(Th,Hgo),e(A,Jgo),e(A,Mh),e(Mh,Kme),e(Kme,Ygo),e(Mh,Kgo),e(Mh,YN),e(YN,Zgo),e(Mh,eho),e(A,oho),e(A,Eh),e(Eh,Zme),e(Zme,rho),e(Eh,tho),e(Eh,KN),e(KN,aho),e(Eh,nho),e(A,sho),e(A,Ch),e(Ch,efe),e(efe,lho),e(Ch,iho),e(Ch,ZN),e(ZN,dho),e(Ch,cho),e(A,mho),e(A,wh),e(wh,ofe),e(ofe,fho),e(wh,gho),e(wh,eq),e(eq,hho),e(wh,uho),e(A,pho),e(A,Ah),e(Ah,rfe),e(rfe,_ho),e(Ah,bho),e(Ah,oq),e(oq,vho),e(Ah,Fho),e(A,Tho),e(A,Lh),e(Lh,tfe),e(tfe,Mho),e(Lh,Eho),e(Lh,rq),e(rq,Cho),e(Lh,who),e(A,Aho),e(A,yh),e(yh,afe),e(afe,Lho),e(yh,yho),e(yh,tq),e(tq,xho),e(yh,$ho),e(A,kho),e(A,xh),e(xh,nfe),e(nfe,Sho),e(xh,Rho),e(xh,aq),e(aq,Pho),e(xh,Bho),e(A,Iho),e(A,$h),e($h,sfe),e(sfe,Nho),e($h,qho),e($h,nq),e(nq,jho),e($h,Dho),e(A,Gho),e(A,kh),e(kh,lfe),e(lfe,Oho),e(kh,Vho),e(kh,sq),e(sq,Xho),e(kh,zho),e(A,Qho),e(A,Sh),e(Sh,ife),e(ife,Who),e(Sh,Uho),e(Sh,lq),e(lq,Hho),e(Sh,Jho),e(A,Yho),e(A,Rh),e(Rh,dfe),e(dfe,Kho),e(Rh,Zho),e(Rh,iq),e(iq,euo),e(Rh,ouo),e(A,ruo),e(A,Ph),e(Ph,cfe),e(cfe,tuo),e(Ph,auo),e(Ph,dq),e(dq,nuo),e(Ph,suo),e(A,luo),e(A,Bh),e(Bh,mfe),e(mfe,iuo),e(Bh,duo),e(Bh,cq),e(cq,cuo),e(Bh,muo),e(A,fuo),e(A,Ih),e(Ih,ffe),e(ffe,guo),e(Ih,huo),e(Ih,mq),e(mq,uuo),e(Ih,puo),e(A,_uo),e(A,Nh),e(Nh,gfe),e(gfe,buo),e(Nh,vuo),e(Nh,fq),e(fq,Fuo),e(Nh,Tuo),e(A,Muo),e(A,qh),e(qh,hfe),e(hfe,Euo),e(qh,Cuo),e(qh,gq),e(gq,wuo),e(qh,Auo),e(A,Luo),e(A,jh),e(jh,ufe),e(ufe,yuo),e(jh,xuo),e(jh,hq),e(hq,$uo),e(jh,kuo),e(A,Suo),e(A,Dh),e(Dh,pfe),e(pfe,Ruo),e(Dh,Puo),e(Dh,uq),e(uq,Buo),e(Dh,Iuo),e(A,Nuo),e(A,Gh),e(Gh,_fe),e(_fe,quo),e(Gh,juo),e(Gh,pq),e(pq,Duo),e(Gh,Guo),e(A,Ouo),e(A,Oh),e(Oh,bfe),e(bfe,Vuo),e(Oh,Xuo),e(Oh,_q),e(_q,zuo),e(Oh,Quo),e(A,Wuo),e(A,Vh),e(Vh,vfe),e(vfe,Uuo),e(Vh,Huo),e(Vh,bq),e(bq,Juo),e(Vh,Yuo),e(A,Kuo),e(A,Xh),e(Xh,Ffe),e(Ffe,Zuo),e(Xh,epo),e(Xh,vq),e(vq,opo),e(Xh,rpo),e(A,tpo),e(A,zh),e(zh,Tfe),e(Tfe,apo),e(zh,npo),e(zh,Fq),e(Fq,spo),e(zh,lpo),e(A,ipo),e(A,Qh),e(Qh,Mfe),e(Mfe,dpo),e(Qh,cpo),e(Qh,Tq),e(Tq,mpo),e(Qh,fpo),e(A,gpo),e(A,Wh),e(Wh,Efe),e(Efe,hpo),e(Wh,upo),e(Wh,Mq),e(Mq,ppo),e(Wh,_po),e(A,bpo),e(A,Uh),e(Uh,Cfe),e(Cfe,vpo),e(Uh,Fpo),e(Uh,Eq),e(Eq,Tpo),e(Uh,Mpo),e(A,Epo),e(A,Hh),e(Hh,wfe),e(wfe,Cpo),e(Hh,wpo),e(Hh,Cq),e(Cq,Apo),e(Hh,Lpo),e(A,ypo),e(A,Jh),e(Jh,Afe),e(Afe,xpo),e(Jh,$po),e(Jh,wq),e(wq,kpo),e(Jh,Spo),e(A,Rpo),e(A,Yh),e(Yh,Lfe),e(Lfe,Ppo),e(Yh,Bpo),e(Yh,Aq),e(Aq,Ipo),e(Yh,Npo),e(A,qpo),e(A,Kh),e(Kh,yfe),e(yfe,jpo),e(Kh,Dpo),e(Kh,Lq),e(Lq,Gpo),e(Kh,Opo),e(Pr,Vpo),M(Zh,Pr,null),e($o,Xpo),e($o,eu),M(nx,eu,null),e(eu,zpo),e(eu,xfe),e(xfe,Qpo),b(m,jZe,_),b(m,gd,_),e(gd,ou),e(ou,$fe),M(sx,$fe,null),e(gd,Wpo),e(gd,kfe),e(kfe,Upo),b(m,DZe,_),b(m,ko,_),M(lx,ko,null),e(ko,Hpo),e(ko,ix),e(ix,Jpo),e(ix,yq),e(yq,Ypo),e(ix,Kpo),e(ko,Zpo),e(ko,dx),e(dx,e_o),e(dx,Sfe),e(Sfe,o_o),e(dx,r_o),e(ko,t_o),e(ko,Br),M(cx,Br,null),e(Br,a_o),e(Br,Rfe),e(Rfe,n_o),e(Br,s_o),e(Br,Ua),e(Ua,l_o),e(Ua,Pfe),e(Pfe,i_o),e(Ua,d_o),e(Ua,Bfe),e(Bfe,c_o),e(Ua,m_o),e(Ua,Ife),e(Ife,f_o),e(Ua,g_o),e(Br,h_o),e(Br,k),e(k,ns),e(ns,Nfe),e(Nfe,u_o),e(ns,p_o),e(ns,xq),e(xq,__o),e(ns,b_o),e(ns,$q),e($q,v_o),e(ns,F_o),e(k,T_o),e(k,ss),e(ss,qfe),e(qfe,M_o),e(ss,E_o),e(ss,kq),e(kq,C_o),e(ss,w_o),e(ss,Sq),e(Sq,A_o),e(ss,L_o),e(k,y_o),e(k,ls),e(ls,jfe),e(jfe,x_o),e(ls,$_o),e(ls,Rq),e(Rq,k_o),e(ls,S_o),e(ls,Pq),e(Pq,R_o),e(ls,P_o),e(k,B_o),e(k,ru),e(ru,Dfe),e(Dfe,I_o),e(ru,N_o),e(ru,Bq),e(Bq,q_o),e(ru,j_o),e(k,D_o),e(k,is),e(is,Gfe),e(Gfe,G_o),e(is,O_o),e(is,Iq),e(Iq,V_o),e(is,X_o),e(is,Nq),e(Nq,z_o),e(is,Q_o),e(k,W_o),e(k,tu),e(tu,Ofe),e(Ofe,U_o),e(tu,H_o),e(tu,qq),e(qq,J_o),e(tu,Y_o),e(k,K_o),e(k,au),e(au,Vfe),e(Vfe,Z_o),e(au,e2o),e(au,jq),e(jq,o2o),e(au,r2o),e(k,t2o),e(k,nu),e(nu,Xfe),e(Xfe,a2o),e(nu,n2o),e(nu,Dq),e(Dq,s2o),e(nu,l2o),e(k,i2o),e(k,ds),e(ds,zfe),e(zfe,d2o),e(ds,c2o),e(ds,Gq),e(Gq,m2o),e(ds,f2o),e(ds,Oq),e(Oq,g2o),e(ds,h2o),e(k,u2o),e(k,cs),e(cs,Qfe),e(Qfe,p2o),e(cs,_2o),e(cs,Vq),e(Vq,b2o),e(cs,v2o),e(cs,Xq),e(Xq,F2o),e(cs,T2o),e(k,M2o),e(k,ms),e(ms,Wfe),e(Wfe,E2o),e(ms,C2o),e(ms,zq),e(zq,w2o),e(ms,A2o),e(ms,Qq),e(Qq,L2o),e(ms,y2o),e(k,x2o),e(k,su),e(su,Ufe),e(Ufe,$2o),e(su,k2o),e(su,Wq),e(Wq,S2o),e(su,R2o),e(k,P2o),e(k,lu),e(lu,Hfe),e(Hfe,B2o),e(lu,I2o),e(lu,Uq),e(Uq,N2o),e(lu,q2o),e(k,j2o),e(k,iu),e(iu,Jfe),e(Jfe,D2o),e(iu,G2o),e(iu,Hq),e(Hq,O2o),e(iu,V2o),e(k,X2o),e(k,fs),e(fs,Yfe),e(Yfe,z2o),e(fs,Q2o),e(fs,Jq),e(Jq,W2o),e(fs,U2o),e(fs,Yq),e(Yq,H2o),e(fs,J2o),e(k,Y2o),e(k,du),e(du,Kfe),e(Kfe,K2o),e(du,Z2o),e(du,Kq),e(Kq,e1o),e(du,o1o),e(k,r1o),e(k,gs),e(gs,Zfe),e(Zfe,t1o),e(gs,a1o),e(gs,Zq),e(Zq,n1o),e(gs,s1o),e(gs,ej),e(ej,l1o),e(gs,i1o),e(k,d1o),e(k,hs),e(hs,ege),e(ege,c1o),e(hs,m1o),e(hs,oj),e(oj,f1o),e(hs,g1o),e(hs,rj),e(rj,h1o),e(hs,u1o),e(k,p1o),e(k,us),e(us,oge),e(oge,_1o),e(us,b1o),e(us,tj),e(tj,v1o),e(us,F1o),e(us,aj),e(aj,T1o),e(us,M1o),e(k,E1o),e(k,ps),e(ps,rge),e(rge,C1o),e(ps,w1o),e(ps,nj),e(nj,A1o),e(ps,L1o),e(ps,sj),e(sj,y1o),e(ps,x1o),e(k,$1o),e(k,cu),e(cu,tge),e(tge,k1o),e(cu,S1o),e(cu,lj),e(lj,R1o),e(cu,P1o),e(k,B1o),e(k,_s),e(_s,age),e(age,I1o),e(_s,N1o),e(_s,ij),e(ij,q1o),e(_s,j1o),e(_s,dj),e(dj,D1o),e(_s,G1o),e(k,O1o),e(k,bs),e(bs,nge),e(nge,V1o),e(bs,X1o),e(bs,cj),e(cj,z1o),e(bs,Q1o),e(bs,mj),e(mj,W1o),e(bs,U1o),e(k,H1o),e(k,vs),e(vs,sge),e(sge,J1o),e(vs,Y1o),e(vs,fj),e(fj,K1o),e(vs,Z1o),e(vs,gj),e(gj,ebo),e(vs,obo),e(k,rbo),e(k,Fs),e(Fs,lge),e(lge,tbo),e(Fs,abo),e(Fs,hj),e(hj,nbo),e(Fs,sbo),e(Fs,uj),e(uj,lbo),e(Fs,ibo),e(k,dbo),e(k,Ts),e(Ts,ige),e(ige,cbo),e(Ts,mbo),e(Ts,pj),e(pj,fbo),e(Ts,gbo),e(Ts,_j),e(_j,hbo),e(Ts,ubo),e(k,pbo),e(k,Ms),e(Ms,dge),e(dge,_bo),e(Ms,bbo),e(Ms,bj),e(bj,vbo),e(Ms,Fbo),e(Ms,vj),e(vj,Tbo),e(Ms,Mbo),e(k,Ebo),e(k,Es),e(Es,cge),e(cge,Cbo),e(Es,wbo),e(Es,Fj),e(Fj,Abo),e(Es,Lbo),e(Es,Tj),e(Tj,ybo),e(Es,xbo),e(k,$bo),e(k,mu),e(mu,mge),e(mge,kbo),e(mu,Sbo),e(mu,Mj),e(Mj,Rbo),e(mu,Pbo),e(k,Bbo),e(k,Cs),e(Cs,fge),e(fge,Ibo),e(Cs,Nbo),e(Cs,Ej),e(Ej,qbo),e(Cs,jbo),e(Cs,Cj),e(Cj,Dbo),e(Cs,Gbo),e(k,Obo),e(k,fu),e(fu,gge),e(gge,Vbo),e(fu,Xbo),e(fu,wj),e(wj,zbo),e(fu,Qbo),e(k,Wbo),e(k,ws),e(ws,hge),e(hge,Ubo),e(ws,Hbo),e(ws,Aj),e(Aj,Jbo),e(ws,Ybo),e(ws,Lj),e(Lj,Kbo),e(ws,Zbo),e(k,evo),e(k,As),e(As,uge),e(uge,ovo),e(As,rvo),e(As,yj),e(yj,tvo),e(As,avo),e(As,xj),e(xj,nvo),e(As,svo),e(k,lvo),e(k,Ls),e(Ls,pge),e(pge,ivo),e(Ls,dvo),e(Ls,$j),e($j,cvo),e(Ls,mvo),e(Ls,kj),e(kj,fvo),e(Ls,gvo),e(k,hvo),e(k,gu),e(gu,_ge),e(_ge,uvo),e(gu,pvo),e(gu,Sj),e(Sj,_vo),e(gu,bvo),e(k,vvo),e(k,hu),e(hu,bge),e(bge,Fvo),e(hu,Tvo),e(hu,Rj),e(Rj,Mvo),e(hu,Evo),e(k,Cvo),e(k,ys),e(ys,vge),e(vge,wvo),e(ys,Avo),e(ys,Pj),e(Pj,Lvo),e(ys,yvo),e(ys,Bj),e(Bj,xvo),e(ys,$vo),e(k,kvo),e(k,xs),e(xs,Fge),e(Fge,Svo),e(xs,Rvo),e(xs,Ij),e(Ij,Pvo),e(xs,Bvo),e(xs,Nj),e(Nj,Ivo),e(xs,Nvo),e(k,qvo),e(k,$s),e($s,Tge),e(Tge,jvo),e($s,Dvo),e($s,qj),e(qj,Gvo),e($s,Ovo),e($s,jj),e(jj,Vvo),e($s,Xvo),e(k,zvo),e(k,uu),e(uu,Mge),e(Mge,Qvo),e(uu,Wvo),e(uu,Dj),e(Dj,Uvo),e(uu,Hvo),e(k,Jvo),e(k,ks),e(ks,Ege),e(Ege,Yvo),e(ks,Kvo),e(ks,Gj),e(Gj,Zvo),e(ks,eFo),e(ks,Oj),e(Oj,oFo),e(ks,rFo),e(k,tFo),e(k,Ss),e(Ss,Cge),e(Cge,aFo),e(Ss,nFo),e(Ss,Vj),e(Vj,sFo),e(Ss,lFo),e(Ss,Xj),e(Xj,iFo),e(Ss,dFo),e(k,cFo),e(k,Rs),e(Rs,wge),e(wge,mFo),e(Rs,fFo),e(Rs,zj),e(zj,gFo),e(Rs,hFo),e(Rs,Qj),e(Qj,uFo),e(Rs,pFo),e(k,_Fo),e(k,Ps),e(Ps,Age),e(Age,bFo),e(Ps,vFo),e(Ps,Wj),e(Wj,FFo),e(Ps,TFo),e(Ps,Uj),e(Uj,MFo),e(Ps,EFo),e(k,CFo),e(k,Bs),e(Bs,Lge),e(Lge,wFo),e(Bs,AFo),e(Bs,Hj),e(Hj,LFo),e(Bs,yFo),e(Bs,Jj),e(Jj,xFo),e(Bs,$Fo),e(k,kFo),e(k,Is),e(Is,yge),e(yge,SFo),e(Is,RFo),e(Is,Yj),e(Yj,PFo),e(Is,BFo),e(Is,Kj),e(Kj,IFo),e(Is,NFo),e(k,qFo),e(k,Ns),e(Ns,xge),e(xge,jFo),e(Ns,DFo),e(Ns,Zj),e(Zj,GFo),e(Ns,OFo),e(Ns,eD),e(eD,VFo),e(Ns,XFo),e(k,zFo),e(k,qs),e(qs,$ge),e($ge,QFo),e(qs,WFo),e(qs,oD),e(oD,UFo),e(qs,HFo),e(qs,rD),e(rD,JFo),e(qs,YFo),e(k,KFo),e(k,pu),e(pu,kge),e(kge,ZFo),e(pu,eTo),e(pu,tD),e(tD,oTo),e(pu,rTo),e(k,tTo),e(k,js),e(js,Sge),e(Sge,aTo),e(js,nTo),e(js,aD),e(aD,sTo),e(js,lTo),e(js,nD),e(nD,iTo),e(js,dTo),e(k,cTo),e(k,_u),e(_u,Rge),e(Rge,mTo),e(_u,fTo),e(_u,sD),e(sD,gTo),e(_u,hTo),e(k,uTo),e(k,bu),e(bu,Pge),e(Pge,pTo),e(bu,_To),e(bu,lD),e(lD,bTo),e(bu,vTo),e(k,FTo),e(k,Ds),e(Ds,Bge),e(Bge,TTo),e(Ds,MTo),e(Ds,iD),e(iD,ETo),e(Ds,CTo),e(Ds,dD),e(dD,wTo),e(Ds,ATo),e(k,LTo),e(k,Gs),e(Gs,Ige),e(Ige,yTo),e(Gs,xTo),e(Gs,cD),e(cD,$To),e(Gs,kTo),e(Gs,mD),e(mD,STo),e(Gs,RTo),e(k,PTo),e(k,Os),e(Os,Nge),e(Nge,BTo),e(Os,ITo),e(Os,fD),e(fD,NTo),e(Os,qTo),e(Os,gD),e(gD,jTo),e(Os,DTo),e(k,GTo),e(k,vu),e(vu,qge),e(qge,OTo),e(vu,VTo),e(vu,hD),e(hD,XTo),e(vu,zTo),e(k,QTo),e(k,Vs),e(Vs,jge),e(jge,WTo),e(Vs,UTo),e(Vs,uD),e(uD,HTo),e(Vs,JTo),e(Vs,pD),e(pD,YTo),e(Vs,KTo),e(k,ZTo),e(k,Xs),e(Xs,Dge),e(Dge,eMo),e(Xs,oMo),e(Xs,_D),e(_D,rMo),e(Xs,tMo),e(Xs,bD),e(bD,aMo),e(Xs,nMo),e(k,sMo),e(k,zs),e(zs,Gge),e(Gge,lMo),e(zs,iMo),e(zs,vD),e(vD,dMo),e(zs,cMo),e(zs,FD),e(FD,mMo),e(zs,fMo),e(k,gMo),e(k,Qs),e(Qs,Oge),e(Oge,hMo),e(Qs,uMo),e(Qs,TD),e(TD,pMo),e(Qs,_Mo),e(Qs,MD),e(MD,bMo),e(Qs,vMo),e(k,FMo),e(k,Ws),e(Ws,Vge),e(Vge,TMo),e(Ws,MMo),e(Ws,ED),e(ED,EMo),e(Ws,CMo),e(Ws,CD),e(CD,wMo),e(Ws,AMo),e(k,LMo),e(k,Us),e(Us,Xge),e(Xge,yMo),e(Us,xMo),e(Us,wD),e(wD,$Mo),e(Us,kMo),e(Us,AD),e(AD,SMo),e(Us,RMo),e(k,PMo),e(k,Hs),e(Hs,zge),e(zge,BMo),e(Hs,IMo),e(Hs,LD),e(LD,NMo),e(Hs,qMo),e(Hs,yD),e(yD,jMo),e(Hs,DMo),e(k,GMo),e(k,Js),e(Js,Qge),e(Qge,OMo),e(Js,VMo),e(Js,xD),e(xD,XMo),e(Js,zMo),e(Js,$D),e($D,QMo),e(Js,WMo),e(k,UMo),e(k,Fu),e(Fu,Wge),e(Wge,HMo),e(Fu,JMo),e(Fu,kD),e(kD,YMo),e(Fu,KMo),e(k,ZMo),e(k,Ys),e(Ys,Uge),e(Uge,eEo),e(Ys,oEo),e(Ys,SD),e(SD,rEo),e(Ys,tEo),e(Ys,RD),e(RD,aEo),e(Ys,nEo),e(k,sEo),e(k,Ks),e(Ks,Hge),e(Hge,lEo),e(Ks,iEo),e(Ks,PD),e(PD,dEo),e(Ks,cEo),e(Ks,BD),e(BD,mEo),e(Ks,fEo),e(k,gEo),e(k,Tu),e(Tu,Jge),e(Jge,hEo),e(Tu,uEo),e(Tu,ID),e(ID,pEo),e(Tu,_Eo),e(k,bEo),e(k,Mu),e(Mu,Yge),e(Yge,vEo),e(Mu,FEo),e(Mu,ND),e(ND,TEo),e(Mu,MEo),e(k,EEo),e(k,Eu),e(Eu,Kge),e(Kge,CEo),e(Eu,wEo),e(Eu,qD),e(qD,AEo),e(Eu,LEo),e(k,yEo),e(k,Cu),e(Cu,Zge),e(Zge,xEo),e(Cu,$Eo),e(Cu,jD),e(jD,kEo),e(Cu,SEo),e(k,REo),e(k,Zs),e(Zs,ehe),e(ehe,PEo),e(Zs,BEo),e(Zs,DD),e(DD,IEo),e(Zs,NEo),e(Zs,GD),e(GD,qEo),e(Zs,jEo),e(k,DEo),e(k,wu),e(wu,ohe),e(ohe,GEo),e(wu,OEo),e(wu,OD),e(OD,VEo),e(wu,XEo),e(k,zEo),e(k,el),e(el,rhe),e(rhe,QEo),e(el,WEo),e(el,VD),e(VD,UEo),e(el,HEo),e(el,XD),e(XD,JEo),e(el,YEo),e(k,KEo),e(k,ol),e(ol,the),e(the,ZEo),e(ol,e4o),e(ol,zD),e(zD,o4o),e(ol,r4o),e(ol,QD),e(QD,t4o),e(ol,a4o),e(k,n4o),e(k,rl),e(rl,ahe),e(ahe,s4o),e(rl,l4o),e(rl,WD),e(WD,i4o),e(rl,d4o),e(rl,UD),e(UD,c4o),e(rl,m4o),e(k,f4o),e(k,tl),e(tl,nhe),e(nhe,g4o),e(tl,h4o),e(tl,HD),e(HD,u4o),e(tl,p4o),e(tl,JD),e(JD,_4o),e(tl,b4o),e(k,v4o),e(k,al),e(al,she),e(she,F4o),e(al,T4o),e(al,YD),e(YD,M4o),e(al,E4o),e(al,KD),e(KD,C4o),e(al,w4o),e(k,A4o),e(k,nl),e(nl,lhe),e(lhe,L4o),e(nl,y4o),e(nl,ZD),e(ZD,x4o),e(nl,$4o),e(nl,eG),e(eG,k4o),e(nl,S4o),e(k,R4o),e(k,Au),e(Au,ihe),e(ihe,P4o),e(Au,B4o),e(Au,oG),e(oG,I4o),e(Au,N4o),e(k,q4o),e(k,Lu),e(Lu,dhe),e(dhe,j4o),e(Lu,D4o),e(Lu,rG),e(rG,G4o),e(Lu,O4o),e(k,V4o),e(k,sl),e(sl,che),e(che,X4o),e(sl,z4o),e(sl,tG),e(tG,Q4o),e(sl,W4o),e(sl,aG),e(aG,U4o),e(sl,H4o),e(k,J4o),e(k,ll),e(ll,mhe),e(mhe,Y4o),e(ll,K4o),e(ll,nG),e(nG,Z4o),e(ll,eCo),e(ll,sG),e(sG,oCo),e(ll,rCo),e(k,tCo),e(k,il),e(il,fhe),e(fhe,aCo),e(il,nCo),e(il,lG),e(lG,sCo),e(il,lCo),e(il,iG),e(iG,iCo),e(il,dCo),e(k,cCo),e(k,yu),e(yu,ghe),e(ghe,mCo),e(yu,fCo),e(yu,dG),e(dG,gCo),e(yu,hCo),e(k,uCo),e(k,xu),e(xu,hhe),e(hhe,pCo),e(xu,_Co),e(xu,cG),e(cG,bCo),e(xu,vCo),e(k,FCo),e(k,$u),e($u,uhe),e(uhe,TCo),e($u,MCo),e($u,mG),e(mG,ECo),e($u,CCo),e(k,wCo),e(k,dl),e(dl,phe),e(phe,ACo),e(dl,LCo),e(dl,fG),e(fG,yCo),e(dl,xCo),e(dl,gG),e(gG,$Co),e(dl,kCo),e(k,SCo),e(k,cl),e(cl,_he),e(_he,RCo),e(cl,PCo),e(cl,hG),e(hG,BCo),e(cl,ICo),e(cl,uG),e(uG,NCo),e(cl,qCo),e(k,jCo),e(k,ku),e(ku,bhe),e(bhe,DCo),e(ku,GCo),e(ku,pG),e(pG,OCo),e(ku,VCo),e(k,XCo),e(k,Su),e(Su,vhe),e(vhe,zCo),e(Su,QCo),e(Su,_G),e(_G,WCo),e(Su,UCo),e(k,HCo),e(k,Ru),e(Ru,Fhe),e(Fhe,JCo),e(Ru,YCo),e(Ru,bG),e(bG,KCo),e(Ru,ZCo),e(k,e3o),e(k,ml),e(ml,The),e(The,o3o),e(ml,r3o),e(ml,vG),e(vG,t3o),e(ml,a3o),e(ml,FG),e(FG,n3o),e(ml,s3o),e(k,l3o),e(k,fl),e(fl,Mhe),e(Mhe,i3o),e(fl,d3o),e(fl,TG),e(TG,c3o),e(fl,m3o),e(fl,MG),e(MG,f3o),e(fl,g3o),e(k,h3o),e(k,Pu),e(Pu,Ehe),e(Ehe,u3o),e(Pu,p3o),e(Pu,EG),e(EG,_3o),e(Pu,b3o),e(k,v3o),e(k,Bu),e(Bu,Che),e(Che,F3o),e(Bu,T3o),e(Bu,CG),e(CG,M3o),e(Bu,E3o),e(k,C3o),e(k,gl),e(gl,whe),e(whe,w3o),e(gl,A3o),e(gl,wG),e(wG,L3o),e(gl,y3o),e(gl,AG),e(AG,x3o),e(gl,$3o),e(k,k3o),e(k,hl),e(hl,Ahe),e(Ahe,S3o),e(hl,R3o),e(hl,LG),e(LG,P3o),e(hl,B3o),e(hl,yG),e(yG,I3o),e(hl,N3o),e(k,q3o),e(k,ul),e(ul,Lhe),e(Lhe,j3o),e(ul,D3o),e(ul,xG),e(xG,G3o),e(ul,O3o),e(ul,$G),e($G,V3o),e(ul,X3o),e(k,z3o),e(k,pl),e(pl,yhe),e(yhe,Q3o),e(pl,W3o),e(pl,kG),e(kG,U3o),e(pl,H3o),e(pl,SG),e(SG,J3o),e(pl,Y3o),e(Br,K3o),M(Iu,Br,null),e(ko,Z3o),e(ko,Nu),M(mx,Nu,null),e(Nu,e5o),e(Nu,xhe),e(xhe,o5o),b(m,GZe,_),b(m,hd,_),e(hd,qu),e(qu,$he),M(fx,$he,null),e(hd,r5o),e(hd,khe),e(khe,t5o),b(m,OZe,_),b(m,So,_),M(gx,So,null),e(So,a5o),e(So,hx),e(hx,n5o),e(hx,RG),e(RG,s5o),e(hx,l5o),e(So,i5o),e(So,ux),e(ux,d5o),e(ux,She),e(She,c5o),e(ux,m5o),e(So,f5o),e(So,Ye),M(px,Ye,null),e(Ye,g5o),e(Ye,Rhe),e(Rhe,h5o),e(Ye,u5o),e(Ye,Ha),e(Ha,p5o),e(Ha,Phe),e(Phe,_5o),e(Ha,b5o),e(Ha,Bhe),e(Bhe,v5o),e(Ha,F5o),e(Ha,Ihe),e(Ihe,T5o),e(Ha,M5o),e(Ye,E5o),e(Ye,z),e(z,ju),e(ju,Nhe),e(Nhe,C5o),e(ju,w5o),e(ju,PG),e(PG,A5o),e(ju,L5o),e(z,y5o),e(z,Du),e(Du,qhe),e(qhe,x5o),e(Du,$5o),e(Du,BG),e(BG,k5o),e(Du,S5o),e(z,R5o),e(z,Gu),e(Gu,jhe),e(jhe,P5o),e(Gu,B5o),e(Gu,IG),e(IG,I5o),e(Gu,N5o),e(z,q5o),e(z,Ou),e(Ou,Dhe),e(Dhe,j5o),e(Ou,D5o),e(Ou,NG),e(NG,G5o),e(Ou,O5o),e(z,V5o),e(z,Vu),e(Vu,Ghe),e(Ghe,X5o),e(Vu,z5o),e(Vu,qG),e(qG,Q5o),e(Vu,W5o),e(z,U5o),e(z,Xu),e(Xu,Ohe),e(Ohe,H5o),e(Xu,J5o),e(Xu,jG),e(jG,Y5o),e(Xu,K5o),e(z,Z5o),e(z,zu),e(zu,Vhe),e(Vhe,e0o),e(zu,o0o),e(zu,DG),e(DG,r0o),e(zu,t0o),e(z,a0o),e(z,Qu),e(Qu,Xhe),e(Xhe,n0o),e(Qu,s0o),e(Qu,GG),e(GG,l0o),e(Qu,i0o),e(z,d0o),e(z,Wu),e(Wu,zhe),e(zhe,c0o),e(Wu,m0o),e(Wu,OG),e(OG,f0o),e(Wu,g0o),e(z,h0o),e(z,Uu),e(Uu,Qhe),e(Qhe,u0o),e(Uu,p0o),e(Uu,VG),e(VG,_0o),e(Uu,b0o),e(z,v0o),e(z,Hu),e(Hu,Whe),e(Whe,F0o),e(Hu,T0o),e(Hu,XG),e(XG,M0o),e(Hu,E0o),e(z,C0o),e(z,Ju),e(Ju,Uhe),e(Uhe,w0o),e(Ju,A0o),e(Ju,zG),e(zG,L0o),e(Ju,y0o),e(z,x0o),e(z,Yu),e(Yu,Hhe),e(Hhe,$0o),e(Yu,k0o),e(Yu,QG),e(QG,S0o),e(Yu,R0o),e(z,P0o),e(z,Ku),e(Ku,Jhe),e(Jhe,B0o),e(Ku,I0o),e(Ku,WG),e(WG,N0o),e(Ku,q0o),e(z,j0o),e(z,Zu),e(Zu,Yhe),e(Yhe,D0o),e(Zu,G0o),e(Zu,UG),e(UG,O0o),e(Zu,V0o),e(z,X0o),e(z,ep),e(ep,Khe),e(Khe,z0o),e(ep,Q0o),e(ep,HG),e(HG,W0o),e(ep,U0o),e(z,H0o),e(z,op),e(op,Zhe),e(Zhe,J0o),e(op,Y0o),e(op,JG),e(JG,K0o),e(op,Z0o),e(z,ewo),e(z,rp),e(rp,eue),e(eue,owo),e(rp,rwo),e(rp,YG),e(YG,two),e(rp,awo),e(z,nwo),e(z,tp),e(tp,oue),e(oue,swo),e(tp,lwo),e(tp,KG),e(KG,iwo),e(tp,dwo),e(z,cwo),e(z,ap),e(ap,rue),e(rue,mwo),e(ap,fwo),e(ap,ZG),e(ZG,gwo),e(ap,hwo),e(z,uwo),e(z,np),e(np,tue),e(tue,pwo),e(np,_wo),e(np,eO),e(eO,bwo),e(np,vwo),e(z,Fwo),e(z,sp),e(sp,aue),e(aue,Two),e(sp,Mwo),e(sp,oO),e(oO,Ewo),e(sp,Cwo),e(z,wwo),e(z,lp),e(lp,nue),e(nue,Awo),e(lp,Lwo),e(lp,rO),e(rO,ywo),e(lp,xwo),e(z,$wo),e(z,ip),e(ip,sue),e(sue,kwo),e(ip,Swo),e(ip,tO),e(tO,Rwo),e(ip,Pwo),e(z,Bwo),e(z,dp),e(dp,lue),e(lue,Iwo),e(dp,Nwo),e(dp,aO),e(aO,qwo),e(dp,jwo),e(z,Dwo),e(z,cp),e(cp,iue),e(iue,Gwo),e(cp,Owo),e(cp,nO),e(nO,Vwo),e(cp,Xwo),e(z,zwo),e(z,mp),e(mp,due),e(due,Qwo),e(mp,Wwo),e(mp,sO),e(sO,Uwo),e(mp,Hwo),e(z,Jwo),e(z,fp),e(fp,cue),e(cue,Ywo),e(fp,Kwo),e(fp,lO),e(lO,Zwo),e(fp,eAo),e(z,oAo),e(z,gp),e(gp,mue),e(mue,rAo),e(gp,tAo),e(gp,iO),e(iO,aAo),e(gp,nAo),e(z,sAo),e(z,hp),e(hp,fue),e(fue,lAo),e(hp,iAo),e(hp,dO),e(dO,dAo),e(hp,cAo),e(z,mAo),e(z,up),e(up,gue),e(gue,fAo),e(up,gAo),e(up,cO),e(cO,hAo),e(up,uAo),e(z,pAo),e(z,pp),e(pp,hue),e(hue,_Ao),e(pp,bAo),e(pp,mO),e(mO,vAo),e(pp,FAo),e(z,TAo),e(z,_p),e(_p,uue),e(uue,MAo),e(_p,EAo),e(_p,fO),e(fO,CAo),e(_p,wAo),e(z,AAo),e(z,bp),e(bp,pue),e(pue,LAo),e(bp,yAo),e(bp,gO),e(gO,xAo),e(bp,$Ao),e(z,kAo),e(z,vp),e(vp,_ue),e(_ue,SAo),e(vp,RAo),e(vp,hO),e(hO,PAo),e(vp,BAo),e(z,IAo),e(z,Fp),e(Fp,bue),e(bue,NAo),e(Fp,qAo),e(Fp,uO),e(uO,jAo),e(Fp,DAo),e(z,GAo),e(z,Tp),e(Tp,vue),e(vue,OAo),e(Tp,VAo),e(Tp,pO),e(pO,XAo),e(Tp,zAo),e(z,QAo),e(z,Mp),e(Mp,Fue),e(Fue,WAo),e(Mp,UAo),e(Mp,_O),e(_O,HAo),e(Mp,JAo),e(z,YAo),e(z,Ep),e(Ep,Tue),e(Tue,KAo),e(Ep,ZAo),e(Ep,bO),e(bO,e6o),e(Ep,o6o),e(z,r6o),e(z,Cp),e(Cp,Mue),e(Mue,t6o),e(Cp,a6o),e(Cp,vO),e(vO,n6o),e(Cp,s6o),e(z,l6o),e(z,wp),e(wp,Eue),e(Eue,i6o),e(wp,d6o),e(wp,FO),e(FO,c6o),e(wp,m6o),e(z,f6o),e(z,Ap),e(Ap,Cue),e(Cue,g6o),e(Ap,h6o),e(Ap,TO),e(TO,u6o),e(Ap,p6o),e(Ye,_6o),M(Lp,Ye,null),e(Ye,b6o),M(yp,Ye,null),e(So,v6o),e(So,xp),M(_x,xp,null),e(xp,F6o),e(xp,wue),e(wue,T6o),b(m,VZe,_),b(m,ud,_),e(ud,$p),e($p,Aue),M(bx,Aue,null),e(ud,M6o),e(ud,Lue),e(Lue,E6o),b(m,XZe,_),b(m,Ro,_),M(vx,Ro,null),e(Ro,C6o),e(Ro,Fx),e(Fx,w6o),e(Fx,MO),e(MO,A6o),e(Fx,L6o),e(Ro,y6o),e(Ro,Tx),e(Tx,x6o),e(Tx,yue),e(yue,$6o),e(Tx,k6o),e(Ro,S6o),e(Ro,Ke),M(Mx,Ke,null),e(Ke,R6o),e(Ke,xue),e(xue,P6o),e(Ke,B6o),e(Ke,pd),e(pd,I6o),e(pd,$ue),e($ue,N6o),e(pd,q6o),e(pd,kue),e(kue,j6o),e(pd,D6o),e(Ke,G6o),e(Ke,le),e(le,kp),e(kp,Sue),e(Sue,O6o),e(kp,V6o),e(kp,EO),e(EO,X6o),e(kp,z6o),e(le,Q6o),e(le,Sp),e(Sp,Rue),e(Rue,W6o),e(Sp,U6o),e(Sp,CO),e(CO,H6o),e(Sp,J6o),e(le,Y6o),e(le,Rp),e(Rp,Pue),e(Pue,K6o),e(Rp,Z6o),e(Rp,wO),e(wO,e7o),e(Rp,o7o),e(le,r7o),e(le,Pp),e(Pp,Bue),e(Bue,t7o),e(Pp,a7o),e(Pp,AO),e(AO,n7o),e(Pp,s7o),e(le,l7o),e(le,Bp),e(Bp,Iue),e(Iue,i7o),e(Bp,d7o),e(Bp,LO),e(LO,c7o),e(Bp,m7o),e(le,f7o),e(le,Ip),e(Ip,Nue),e(Nue,g7o),e(Ip,h7o),e(Ip,yO),e(yO,u7o),e(Ip,p7o),e(le,_7o),e(le,Np),e(Np,que),e(que,b7o),e(Np,v7o),e(Np,xO),e(xO,F7o),e(Np,T7o),e(le,M7o),e(le,qp),e(qp,jue),e(jue,E7o),e(qp,C7o),e(qp,$O),e($O,w7o),e(qp,A7o),e(le,L7o),e(le,jp),e(jp,Due),e(Due,y7o),e(jp,x7o),e(jp,kO),e(kO,$7o),e(jp,k7o),e(le,S7o),e(le,Dp),e(Dp,Gue),e(Gue,R7o),e(Dp,P7o),e(Dp,SO),e(SO,B7o),e(Dp,I7o),e(le,N7o),e(le,Gp),e(Gp,Oue),e(Oue,q7o),e(Gp,j7o),e(Gp,RO),e(RO,D7o),e(Gp,G7o),e(le,O7o),e(le,Op),e(Op,Vue),e(Vue,V7o),e(Op,X7o),e(Op,PO),e(PO,z7o),e(Op,Q7o),e(le,W7o),e(le,Vp),e(Vp,Xue),e(Xue,U7o),e(Vp,H7o),e(Vp,BO),e(BO,J7o),e(Vp,Y7o),e(le,K7o),e(le,Xp),e(Xp,zue),e(zue,Z7o),e(Xp,eLo),e(Xp,IO),e(IO,oLo),e(Xp,rLo),e(le,tLo),e(le,zp),e(zp,Que),e(Que,aLo),e(zp,nLo),e(zp,NO),e(NO,sLo),e(zp,lLo),e(le,iLo),e(le,Qp),e(Qp,Wue),e(Wue,dLo),e(Qp,cLo),e(Qp,qO),e(qO,mLo),e(Qp,fLo),e(le,gLo),e(le,Wp),e(Wp,Uue),e(Uue,hLo),e(Wp,uLo),e(Wp,jO),e(jO,pLo),e(Wp,_Lo),e(le,bLo),e(le,Up),e(Up,Hue),e(Hue,vLo),e(Up,FLo),e(Up,DO),e(DO,TLo),e(Up,MLo),e(le,ELo),e(le,Hp),e(Hp,Jue),e(Jue,CLo),e(Hp,wLo),e(Hp,GO),e(GO,ALo),e(Hp,LLo),e(le,yLo),e(le,Jp),e(Jp,Yue),e(Yue,xLo),e(Jp,$Lo),e(Jp,OO),e(OO,kLo),e(Jp,SLo),e(le,RLo),e(le,Yp),e(Yp,Kue),e(Kue,PLo),e(Yp,BLo),e(Yp,VO),e(VO,ILo),e(Yp,NLo),e(le,qLo),e(le,Kp),e(Kp,Zue),e(Zue,jLo),e(Kp,DLo),e(Kp,XO),e(XO,GLo),e(Kp,OLo),e(Ke,VLo),M(Zp,Ke,null),e(Ke,XLo),M(e_,Ke,null),e(Ro,zLo),e(Ro,o_),M(Ex,o_,null),e(o_,QLo),e(o_,epe),e(epe,WLo),b(m,zZe,_),b(m,_d,_),e(_d,r_),e(r_,ope),M(Cx,ope,null),e(_d,ULo),e(_d,rpe),e(rpe,HLo),b(m,QZe,_),b(m,Po,_),M(wx,Po,null),e(Po,JLo),e(Po,bd),e(bd,YLo),e(bd,zO),e(zO,KLo),e(bd,ZLo),e(bd,QO),e(QO,eyo),e(bd,oyo),e(Po,ryo),e(Po,Ax),e(Ax,tyo),e(Ax,tpe),e(tpe,ayo),e(Ax,nyo),e(Po,syo),e(Po,_t),M(Lx,_t,null),e(_t,lyo),e(_t,ape),e(ape,iyo),e(_t,dyo),e(_t,vd),e(vd,cyo),e(vd,npe),e(npe,myo),e(vd,fyo),e(vd,WO),e(WO,gyo),e(vd,hyo),e(_t,uyo),M(t_,_t,null),e(Po,pyo),e(Po,Ze),M(yx,Ze,null),e(Ze,_yo),e(Ze,spe),e(spe,byo),e(Ze,vyo),e(Ze,Ja),e(Ja,Fyo),e(Ja,lpe),e(lpe,Tyo),e(Ja,Myo),e(Ja,ipe),e(ipe,Eyo),e(Ja,Cyo),e(Ja,dpe),e(dpe,wyo),e(Ja,Ayo),e(Ze,Lyo),e(Ze,y),e(y,a_),e(a_,cpe),e(cpe,yyo),e(a_,xyo),e(a_,UO),e(UO,$yo),e(a_,kyo),e(y,Syo),e(y,n_),e(n_,mpe),e(mpe,Ryo),e(n_,Pyo),e(n_,HO),e(HO,Byo),e(n_,Iyo),e(y,Nyo),e(y,s_),e(s_,fpe),e(fpe,qyo),e(s_,jyo),e(s_,JO),e(JO,Dyo),e(s_,Gyo),e(y,Oyo),e(y,l_),e(l_,gpe),e(gpe,Vyo),e(l_,Xyo),e(l_,YO),e(YO,zyo),e(l_,Qyo),e(y,Wyo),e(y,i_),e(i_,hpe),e(hpe,Uyo),e(i_,Hyo),e(i_,KO),e(KO,Jyo),e(i_,Yyo),e(y,Kyo),e(y,d_),e(d_,upe),e(upe,Zyo),e(d_,e8o),e(d_,ZO),e(ZO,o8o),e(d_,r8o),e(y,t8o),e(y,c_),e(c_,ppe),e(ppe,a8o),e(c_,n8o),e(c_,eV),e(eV,s8o),e(c_,l8o),e(y,i8o),e(y,m_),e(m_,_pe),e(_pe,d8o),e(m_,c8o),e(m_,oV),e(oV,m8o),e(m_,f8o),e(y,g8o),e(y,f_),e(f_,bpe),e(bpe,h8o),e(f_,u8o),e(f_,rV),e(rV,p8o),e(f_,_8o),e(y,b8o),e(y,g_),e(g_,vpe),e(vpe,v8o),e(g_,F8o),e(g_,tV),e(tV,T8o),e(g_,M8o),e(y,E8o),e(y,h_),e(h_,Fpe),e(Fpe,C8o),e(h_,w8o),e(h_,aV),e(aV,A8o),e(h_,L8o),e(y,y8o),e(y,u_),e(u_,Tpe),e(Tpe,x8o),e(u_,$8o),e(u_,nV),e(nV,k8o),e(u_,S8o),e(y,R8o),e(y,p_),e(p_,Mpe),e(Mpe,P8o),e(p_,B8o),e(p_,sV),e(sV,I8o),e(p_,N8o),e(y,q8o),e(y,__),e(__,Epe),e(Epe,j8o),e(__,D8o),e(__,lV),e(lV,G8o),e(__,O8o),e(y,V8o),e(y,b_),e(b_,Cpe),e(Cpe,X8o),e(b_,z8o),e(b_,iV),e(iV,Q8o),e(b_,W8o),e(y,U8o),e(y,v_),e(v_,wpe),e(wpe,H8o),e(v_,J8o),e(v_,dV),e(dV,Y8o),e(v_,K8o),e(y,Z8o),e(y,F_),e(F_,Ape),e(Ape,e9o),e(F_,o9o),e(F_,cV),e(cV,r9o),e(F_,t9o),e(y,a9o),e(y,T_),e(T_,Lpe),e(Lpe,n9o),e(T_,s9o),e(T_,mV),e(mV,l9o),e(T_,i9o),e(y,d9o),e(y,M_),e(M_,ype),e(ype,c9o),e(M_,m9o),e(M_,fV),e(fV,f9o),e(M_,g9o),e(y,h9o),e(y,E_),e(E_,xpe),e(xpe,u9o),e(E_,p9o),e(E_,gV),e(gV,_9o),e(E_,b9o),e(y,v9o),e(y,C_),e(C_,$pe),e($pe,F9o),e(C_,T9o),e(C_,hV),e(hV,M9o),e(C_,E9o),e(y,C9o),e(y,w_),e(w_,kpe),e(kpe,w9o),e(w_,A9o),e(w_,uV),e(uV,L9o),e(w_,y9o),e(y,x9o),e(y,A_),e(A_,Spe),e(Spe,$9o),e(A_,k9o),e(A_,pV),e(pV,S9o),e(A_,R9o),e(y,P9o),e(y,L_),e(L_,Rpe),e(Rpe,B9o),e(L_,I9o),e(L_,_V),e(_V,N9o),e(L_,q9o),e(y,j9o),e(y,y_),e(y_,Ppe),e(Ppe,D9o),e(y_,G9o),e(y_,bV),e(bV,O9o),e(y_,V9o),e(y,X9o),e(y,x_),e(x_,Bpe),e(Bpe,z9o),e(x_,Q9o),e(x_,vV),e(vV,W9o),e(x_,U9o),e(y,H9o),e(y,$_),e($_,Ipe),e(Ipe,J9o),e($_,Y9o),e($_,FV),e(FV,K9o),e($_,Z9o),e(y,exo),e(y,k_),e(k_,Npe),e(Npe,oxo),e(k_,rxo),e(k_,TV),e(TV,txo),e(k_,axo),e(y,nxo),e(y,S_),e(S_,qpe),e(qpe,sxo),e(S_,lxo),e(S_,MV),e(MV,ixo),e(S_,dxo),e(y,cxo),e(y,R_),e(R_,jpe),e(jpe,mxo),e(R_,fxo),e(R_,EV),e(EV,gxo),e(R_,hxo),e(y,uxo),e(y,P_),e(P_,Dpe),e(Dpe,pxo),e(P_,_xo),e(P_,CV),e(CV,bxo),e(P_,vxo),e(y,Fxo),e(y,B_),e(B_,Gpe),e(Gpe,Txo),e(B_,Mxo),e(B_,wV),e(wV,Exo),e(B_,Cxo),e(y,wxo),e(y,I_),e(I_,Ope),e(Ope,Axo),e(I_,Lxo),e(I_,AV),e(AV,yxo),e(I_,xxo),e(y,$xo),e(y,N_),e(N_,Vpe),e(Vpe,kxo),e(N_,Sxo),e(N_,LV),e(LV,Rxo),e(N_,Pxo),e(y,Bxo),e(y,q_),e(q_,Xpe),e(Xpe,Ixo),e(q_,Nxo),e(q_,yV),e(yV,qxo),e(q_,jxo),e(y,Dxo),e(y,j_),e(j_,zpe),e(zpe,Gxo),e(j_,Oxo),e(j_,xV),e(xV,Vxo),e(j_,Xxo),e(y,zxo),e(y,D_),e(D_,Qpe),e(Qpe,Qxo),e(D_,Wxo),e(D_,$V),e($V,Uxo),e(D_,Hxo),e(y,Jxo),e(y,G_),e(G_,Wpe),e(Wpe,Yxo),e(G_,Kxo),e(G_,kV),e(kV,Zxo),e(G_,e$o),e(y,o$o),e(y,O_),e(O_,Upe),e(Upe,r$o),e(O_,t$o),e(O_,SV),e(SV,a$o),e(O_,n$o),e(y,s$o),e(y,_l),e(_l,Hpe),e(Hpe,l$o),e(_l,i$o),e(_l,RV),e(RV,d$o),e(_l,c$o),e(_l,PV),e(PV,m$o),e(_l,f$o),e(y,g$o),e(y,V_),e(V_,Jpe),e(Jpe,h$o),e(V_,u$o),e(V_,BV),e(BV,p$o),e(V_,_$o),e(y,b$o),e(y,X_),e(X_,Ype),e(Ype,v$o),e(X_,F$o),e(X_,IV),e(IV,T$o),e(X_,M$o),e(y,E$o),e(y,z_),e(z_,Kpe),e(Kpe,C$o),e(z_,w$o),e(z_,NV),e(NV,A$o),e(z_,L$o),e(y,y$o),e(y,Q_),e(Q_,Zpe),e(Zpe,x$o),e(Q_,$$o),e(Q_,qV),e(qV,k$o),e(Q_,S$o),e(y,R$o),e(y,W_),e(W_,e_e),e(e_e,P$o),e(W_,B$o),e(W_,jV),e(jV,I$o),e(W_,N$o),e(y,q$o),e(y,U_),e(U_,o_e),e(o_e,j$o),e(U_,D$o),e(U_,DV),e(DV,G$o),e(U_,O$o),e(y,V$o),e(y,H_),e(H_,r_e),e(r_e,X$o),e(H_,z$o),e(H_,GV),e(GV,Q$o),e(H_,W$o),e(y,U$o),e(y,J_),e(J_,t_e),e(t_e,H$o),e(J_,J$o),e(J_,OV),e(OV,Y$o),e(J_,K$o),e(y,Z$o),e(y,Y_),e(Y_,a_e),e(a_e,eko),e(Y_,oko),e(Y_,VV),e(VV,rko),e(Y_,tko),e(y,ako),e(y,K_),e(K_,n_e),e(n_e,nko),e(K_,sko),e(K_,XV),e(XV,lko),e(K_,iko),e(y,dko),e(y,Z_),e(Z_,s_e),e(s_e,cko),e(Z_,mko),e(Z_,zV),e(zV,fko),e(Z_,gko),e(y,hko),e(y,e2),e(e2,l_e),e(l_e,uko),e(e2,pko),e(e2,QV),e(QV,_ko),e(e2,bko),e(y,vko),e(y,o2),e(o2,i_e),e(i_e,Fko),e(o2,Tko),e(o2,WV),e(WV,Mko),e(o2,Eko),e(y,Cko),e(y,r2),e(r2,d_e),e(d_e,wko),e(r2,Ako),e(r2,UV),e(UV,Lko),e(r2,yko),e(y,xko),e(y,t2),e(t2,c_e),e(c_e,$ko),e(t2,kko),e(t2,HV),e(HV,Sko),e(t2,Rko),e(y,Pko),e(y,a2),e(a2,m_e),e(m_e,Bko),e(a2,Iko),e(a2,JV),e(JV,Nko),e(a2,qko),e(y,jko),e(y,n2),e(n2,f_e),e(f_e,Dko),e(n2,Gko),e(n2,YV),e(YV,Oko),e(n2,Vko),e(y,Xko),e(y,s2),e(s2,g_e),e(g_e,zko),e(s2,Qko),e(s2,KV),e(KV,Wko),e(s2,Uko),e(y,Hko),e(y,l2),e(l2,h_e),e(h_e,Jko),e(l2,Yko),e(l2,ZV),e(ZV,Kko),e(l2,Zko),e(y,eSo),e(y,i2),e(i2,u_e),e(u_e,oSo),e(i2,rSo),e(i2,eX),e(eX,tSo),e(i2,aSo),e(y,nSo),e(y,d2),e(d2,p_e),e(p_e,sSo),e(d2,lSo),e(d2,oX),e(oX,iSo),e(d2,dSo),e(y,cSo),e(y,c2),e(c2,__e),e(__e,mSo),e(c2,fSo),e(c2,rX),e(rX,gSo),e(c2,hSo),e(y,uSo),e(y,m2),e(m2,b_e),e(b_e,pSo),e(m2,_So),e(m2,tX),e(tX,bSo),e(m2,vSo),e(y,FSo),e(y,f2),e(f2,v_e),e(v_e,TSo),e(f2,MSo),e(f2,aX),e(aX,ESo),e(f2,CSo),e(y,wSo),e(y,g2),e(g2,F_e),e(F_e,ASo),e(g2,LSo),e(g2,nX),e(nX,ySo),e(g2,xSo),e(y,$So),e(y,h2),e(h2,T_e),e(T_e,kSo),e(h2,SSo),e(h2,sX),e(sX,RSo),e(h2,PSo),e(y,BSo),e(y,u2),e(u2,M_e),e(M_e,ISo),e(u2,NSo),e(u2,lX),e(lX,qSo),e(u2,jSo),e(y,DSo),e(y,p2),e(p2,E_e),e(E_e,GSo),e(p2,OSo),e(p2,iX),e(iX,VSo),e(p2,XSo),e(y,zSo),e(y,_2),e(_2,C_e),e(C_e,QSo),e(_2,WSo),e(_2,dX),e(dX,USo),e(_2,HSo),e(y,JSo),e(y,b2),e(b2,w_e),e(w_e,YSo),e(b2,KSo),e(b2,cX),e(cX,ZSo),e(b2,eRo),e(y,oRo),e(y,v2),e(v2,A_e),e(A_e,rRo),e(v2,tRo),e(v2,mX),e(mX,aRo),e(v2,nRo),e(y,sRo),e(y,F2),e(F2,L_e),e(L_e,lRo),e(F2,iRo),e(F2,fX),e(fX,dRo),e(F2,cRo),e(y,mRo),e(y,T2),e(T2,y_e),e(y_e,fRo),e(T2,gRo),e(T2,gX),e(gX,hRo),e(T2,uRo),e(y,pRo),e(y,M2),e(M2,x_e),e(x_e,_Ro),e(M2,bRo),e(M2,hX),e(hX,vRo),e(M2,FRo),e(y,TRo),e(y,E2),e(E2,$_e),e($_e,MRo),e(E2,ERo),e(E2,uX),e(uX,CRo),e(E2,wRo),e(y,ARo),e(y,C2),e(C2,k_e),e(k_e,LRo),e(C2,yRo),e(C2,pX),e(pX,xRo),e(C2,$Ro),e(y,kRo),e(y,w2),e(w2,S_e),e(S_e,SRo),e(w2,RRo),e(w2,_X),e(_X,PRo),e(w2,BRo),e(y,IRo),e(y,A2),e(A2,R_e),e(R_e,NRo),e(A2,qRo),e(A2,bX),e(bX,jRo),e(A2,DRo),e(y,GRo),e(y,L2),e(L2,P_e),e(P_e,ORo),e(L2,VRo),e(L2,vX),e(vX,XRo),e(L2,zRo),e(y,QRo),e(y,y2),e(y2,B_e),e(B_e,WRo),e(y2,URo),e(y2,FX),e(FX,HRo),e(y2,JRo),e(y,YRo),e(y,x2),e(x2,I_e),e(I_e,KRo),e(x2,ZRo),e(x2,TX),e(TX,ePo),e(x2,oPo),e(y,rPo),e(y,$2),e($2,N_e),e(N_e,tPo),e($2,aPo),e($2,MX),e(MX,nPo),e($2,sPo),e(y,lPo),e(y,k2),e(k2,q_e),e(q_e,iPo),e(k2,dPo),e(k2,EX),e(EX,cPo),e(k2,mPo),e(y,fPo),e(y,S2),e(S2,j_e),e(j_e,gPo),e(S2,hPo),e(S2,CX),e(CX,uPo),e(S2,pPo),e(y,_Po),e(y,R2),e(R2,D_e),e(D_e,bPo),e(R2,vPo),e(R2,wX),e(wX,FPo),e(R2,TPo),e(y,MPo),e(y,P2),e(P2,G_e),e(G_e,EPo),e(P2,CPo),e(P2,AX),e(AX,wPo),e(P2,APo),e(y,LPo),e(y,B2),e(B2,O_e),e(O_e,yPo),e(B2,xPo),e(B2,LX),e(LX,$Po),e(B2,kPo),e(y,SPo),e(y,I2),e(I2,V_e),e(V_e,RPo),e(I2,PPo),e(I2,yX),e(yX,BPo),e(I2,IPo),e(y,NPo),e(y,N2),e(N2,X_e),e(X_e,qPo),e(N2,jPo),e(N2,xX),e(xX,DPo),e(N2,GPo),e(y,OPo),e(y,q2),e(q2,z_e),e(z_e,VPo),e(q2,XPo),e(q2,$X),e($X,zPo),e(q2,QPo),e(y,WPo),e(y,j2),e(j2,Q_e),e(Q_e,UPo),e(j2,HPo),e(j2,kX),e(kX,JPo),e(j2,YPo),e(y,KPo),e(y,D2),e(D2,W_e),e(W_e,ZPo),e(D2,eBo),e(D2,SX),e(SX,oBo),e(D2,rBo),e(y,tBo),e(y,G2),e(G2,U_e),e(U_e,aBo),e(G2,nBo),e(G2,RX),e(RX,sBo),e(G2,lBo),e(y,iBo),e(y,O2),e(O2,H_e),e(H_e,dBo),e(O2,cBo),e(O2,PX),e(PX,mBo),e(O2,fBo),e(y,gBo),e(y,V2),e(V2,J_e),e(J_e,hBo),e(V2,uBo),e(V2,BX),e(BX,pBo),e(V2,_Bo),e(y,bBo),e(y,X2),e(X2,Y_e),e(Y_e,vBo),e(X2,FBo),e(X2,IX),e(IX,TBo),e(X2,MBo),e(y,EBo),e(y,z2),e(z2,K_e),e(K_e,CBo),e(z2,wBo),e(z2,NX),e(NX,ABo),e(z2,LBo),e(y,yBo),e(y,Q2),e(Q2,Z_e),e(Z_e,xBo),e(Q2,$Bo),e(Q2,qX),e(qX,kBo),e(Q2,SBo),e(y,RBo),e(y,W2),e(W2,e2e),e(e2e,PBo),e(W2,BBo),e(W2,jX),e(jX,IBo),e(W2,NBo),e(y,qBo),e(y,U2),e(U2,o2e),e(o2e,jBo),e(U2,DBo),e(U2,DX),e(DX,GBo),e(U2,OBo),e(y,VBo),e(y,H2),e(H2,r2e),e(r2e,XBo),e(H2,zBo),e(H2,GX),e(GX,QBo),e(H2,WBo),e(y,UBo),e(y,J2),e(J2,t2e),e(t2e,HBo),e(J2,JBo),e(J2,OX),e(OX,YBo),e(J2,KBo),e(y,ZBo),e(y,Y2),e(Y2,a2e),e(a2e,eIo),e(Y2,oIo),e(Y2,VX),e(VX,rIo),e(Y2,tIo),e(y,aIo),e(y,K2),e(K2,n2e),e(n2e,nIo),e(K2,sIo),e(K2,XX),e(XX,lIo),e(K2,iIo),e(y,dIo),e(y,Z2),e(Z2,s2e),e(s2e,cIo),e(Z2,mIo),e(Z2,zX),e(zX,fIo),e(Z2,gIo),e(y,hIo),e(y,e1),e(e1,l2e),e(l2e,uIo),e(e1,pIo),e(e1,QX),e(QX,_Io),e(e1,bIo),e(y,vIo),e(y,o1),e(o1,i2e),e(i2e,FIo),e(o1,TIo),e(o1,WX),e(WX,MIo),e(o1,EIo),e(y,CIo),e(y,r1),e(r1,d2e),e(d2e,wIo),e(r1,AIo),e(r1,UX),e(UX,LIo),e(r1,yIo),e(y,xIo),e(y,t1),e(t1,c2e),e(c2e,$Io),e(t1,kIo),e(t1,HX),e(HX,SIo),e(t1,RIo),e(y,PIo),e(y,a1),e(a1,m2e),e(m2e,BIo),e(a1,IIo),e(a1,JX),e(JX,NIo),e(a1,qIo),e(y,jIo),e(y,n1),e(n1,f2e),e(f2e,DIo),e(n1,GIo),e(n1,YX),e(YX,OIo),e(n1,VIo),e(y,XIo),e(y,s1),e(s1,g2e),e(g2e,zIo),e(s1,QIo),e(s1,KX),e(KX,WIo),e(s1,UIo),e(y,HIo),e(y,l1),e(l1,h2e),e(h2e,JIo),e(l1,YIo),e(l1,ZX),e(ZX,KIo),e(l1,ZIo),e(y,eNo),e(y,i1),e(i1,u2e),e(u2e,oNo),e(i1,rNo),e(i1,ez),e(ez,tNo),e(i1,aNo),e(y,nNo),e(y,d1),e(d1,p2e),e(p2e,sNo),e(d1,lNo),e(d1,oz),e(oz,iNo),e(d1,dNo),e(y,cNo),e(y,c1),e(c1,_2e),e(_2e,mNo),e(c1,fNo),e(c1,rz),e(rz,gNo),e(c1,hNo),e(y,uNo),e(y,m1),e(m1,b2e),e(b2e,pNo),e(m1,_No),e(m1,tz),e(tz,bNo),e(m1,vNo),e(y,FNo),e(y,f1),e(f1,v2e),e(v2e,TNo),e(f1,MNo),e(f1,az),e(az,ENo),e(f1,CNo),e(y,wNo),e(y,g1),e(g1,F2e),e(F2e,ANo),e(g1,LNo),e(g1,nz),e(nz,yNo),e(g1,xNo),e(y,$No),e(y,h1),e(h1,T2e),e(T2e,kNo),e(h1,SNo),e(h1,sz),e(sz,RNo),e(h1,PNo),e(y,BNo),e(y,u1),e(u1,M2e),e(M2e,INo),e(u1,NNo),e(u1,lz),e(lz,qNo),e(u1,jNo),e(y,DNo),e(y,p1),e(p1,E2e),e(E2e,GNo),e(p1,ONo),e(p1,iz),e(iz,VNo),e(p1,XNo),e(y,zNo),e(y,_1),e(_1,C2e),e(C2e,QNo),e(_1,WNo),e(_1,dz),e(dz,UNo),e(_1,HNo),e(y,JNo),e(y,b1),e(b1,w2e),e(w2e,YNo),e(b1,KNo),e(b1,cz),e(cz,ZNo),e(b1,eqo),e(y,oqo),e(y,v1),e(v1,A2e),e(A2e,rqo),e(v1,tqo),e(v1,mz),e(mz,aqo),e(v1,nqo),e(Ze,sqo),e(Ze,F1),e(F1,lqo),e(F1,L2e),e(L2e,iqo),e(F1,dqo),e(F1,y2e),e(y2e,cqo),e(Ze,mqo),M(T1,Ze,null),b(m,WZe,_),b(m,Fd,_),e(Fd,M1),e(M1,x2e),M(xx,x2e,null),e(Fd,fqo),e(Fd,$2e),e($2e,gqo),b(m,UZe,_),b(m,Bo,_),M($x,Bo,null),e(Bo,hqo),e(Bo,Td),e(Td,uqo),e(Td,fz),e(fz,pqo),e(Td,_qo),e(Td,gz),e(gz,bqo),e(Td,vqo),e(Bo,Fqo),e(Bo,kx),e(kx,Tqo),e(kx,k2e),e(k2e,Mqo),e(kx,Eqo),e(Bo,Cqo),e(Bo,bt),M(Sx,bt,null),e(bt,wqo),e(bt,S2e),e(S2e,Aqo),e(bt,Lqo),e(bt,Md),e(Md,yqo),e(Md,R2e),e(R2e,xqo),e(Md,$qo),e(Md,hz),e(hz,kqo),e(Md,Sqo),e(bt,Rqo),M(E1,bt,null),e(Bo,Pqo),e(Bo,eo),M(Rx,eo,null),e(eo,Bqo),e(eo,P2e),e(P2e,Iqo),e(eo,Nqo),e(eo,Ya),e(Ya,qqo),e(Ya,B2e),e(B2e,jqo),e(Ya,Dqo),e(Ya,I2e),e(I2e,Gqo),e(Ya,Oqo),e(Ya,N2e),e(N2e,Vqo),e(Ya,Xqo),e(eo,zqo),e(eo,G),e(G,C1),e(C1,q2e),e(q2e,Qqo),e(C1,Wqo),e(C1,uz),e(uz,Uqo),e(C1,Hqo),e(G,Jqo),e(G,w1),e(w1,j2e),e(j2e,Yqo),e(w1,Kqo),e(w1,pz),e(pz,Zqo),e(w1,ejo),e(G,ojo),e(G,A1),e(A1,D2e),e(D2e,rjo),e(A1,tjo),e(A1,_z),e(_z,ajo),e(A1,njo),e(G,sjo),e(G,L1),e(L1,G2e),e(G2e,ljo),e(L1,ijo),e(L1,bz),e(bz,djo),e(L1,cjo),e(G,mjo),e(G,y1),e(y1,O2e),e(O2e,fjo),e(y1,gjo),e(y1,vz),e(vz,hjo),e(y1,ujo),e(G,pjo),e(G,x1),e(x1,V2e),e(V2e,_jo),e(x1,bjo),e(x1,Fz),e(Fz,vjo),e(x1,Fjo),e(G,Tjo),e(G,$1),e($1,X2e),e(X2e,Mjo),e($1,Ejo),e($1,Tz),e(Tz,Cjo),e($1,wjo),e(G,Ajo),e(G,k1),e(k1,z2e),e(z2e,Ljo),e(k1,yjo),e(k1,Mz),e(Mz,xjo),e(k1,$jo),e(G,kjo),e(G,S1),e(S1,Q2e),e(Q2e,Sjo),e(S1,Rjo),e(S1,Ez),e(Ez,Pjo),e(S1,Bjo),e(G,Ijo),e(G,R1),e(R1,W2e),e(W2e,Njo),e(R1,qjo),e(R1,Cz),e(Cz,jjo),e(R1,Djo),e(G,Gjo),e(G,P1),e(P1,U2e),e(U2e,Ojo),e(P1,Vjo),e(P1,wz),e(wz,Xjo),e(P1,zjo),e(G,Qjo),e(G,B1),e(B1,H2e),e(H2e,Wjo),e(B1,Ujo),e(B1,Az),e(Az,Hjo),e(B1,Jjo),e(G,Yjo),e(G,I1),e(I1,J2e),e(J2e,Kjo),e(I1,Zjo),e(I1,Lz),e(Lz,eDo),e(I1,oDo),e(G,rDo),e(G,N1),e(N1,Y2e),e(Y2e,tDo),e(N1,aDo),e(N1,yz),e(yz,nDo),e(N1,sDo),e(G,lDo),e(G,q1),e(q1,K2e),e(K2e,iDo),e(q1,dDo),e(q1,xz),e(xz,cDo),e(q1,mDo),e(G,fDo),e(G,j1),e(j1,Z2e),e(Z2e,gDo),e(j1,hDo),e(j1,$z),e($z,uDo),e(j1,pDo),e(G,_Do),e(G,D1),e(D1,e1e),e(e1e,bDo),e(D1,vDo),e(D1,kz),e(kz,FDo),e(D1,TDo),e(G,MDo),e(G,G1),e(G1,o1e),e(o1e,EDo),e(G1,CDo),e(G1,Sz),e(Sz,wDo),e(G1,ADo),e(G,LDo),e(G,O1),e(O1,r1e),e(r1e,yDo),e(O1,xDo),e(O1,Rz),e(Rz,$Do),e(O1,kDo),e(G,SDo),e(G,V1),e(V1,t1e),e(t1e,RDo),e(V1,PDo),e(V1,Pz),e(Pz,BDo),e(V1,IDo),e(G,NDo),e(G,X1),e(X1,a1e),e(a1e,qDo),e(X1,jDo),e(X1,Bz),e(Bz,DDo),e(X1,GDo),e(G,ODo),e(G,z1),e(z1,n1e),e(n1e,VDo),e(z1,XDo),e(z1,Iz),e(Iz,zDo),e(z1,QDo),e(G,WDo),e(G,Q1),e(Q1,s1e),e(s1e,UDo),e(Q1,HDo),e(Q1,Nz),e(Nz,JDo),e(Q1,YDo),e(G,KDo),e(G,W1),e(W1,l1e),e(l1e,ZDo),e(W1,eGo),e(W1,qz),e(qz,oGo),e(W1,rGo),e(G,tGo),e(G,U1),e(U1,i1e),e(i1e,aGo),e(U1,nGo),e(U1,jz),e(jz,sGo),e(U1,lGo),e(G,iGo),e(G,H1),e(H1,d1e),e(d1e,dGo),e(H1,cGo),e(H1,Dz),e(Dz,mGo),e(H1,fGo),e(G,gGo),e(G,J1),e(J1,c1e),e(c1e,hGo),e(J1,uGo),e(J1,Gz),e(Gz,pGo),e(J1,_Go),e(G,bGo),e(G,Y1),e(Y1,m1e),e(m1e,vGo),e(Y1,FGo),e(Y1,Oz),e(Oz,TGo),e(Y1,MGo),e(G,EGo),e(G,K1),e(K1,f1e),e(f1e,CGo),e(K1,wGo),e(K1,Vz),e(Vz,AGo),e(K1,LGo),e(G,yGo),e(G,Z1),e(Z1,g1e),e(g1e,xGo),e(Z1,$Go),e(Z1,Xz),e(Xz,kGo),e(Z1,SGo),e(G,RGo),e(G,eb),e(eb,h1e),e(h1e,PGo),e(eb,BGo),e(eb,zz),e(zz,IGo),e(eb,NGo),e(G,qGo),e(G,ob),e(ob,u1e),e(u1e,jGo),e(ob,DGo),e(ob,Qz),e(Qz,GGo),e(ob,OGo),e(G,VGo),e(G,rb),e(rb,p1e),e(p1e,XGo),e(rb,zGo),e(rb,Wz),e(Wz,QGo),e(rb,WGo),e(G,UGo),e(G,tb),e(tb,_1e),e(_1e,HGo),e(tb,JGo),e(tb,Uz),e(Uz,YGo),e(tb,KGo),e(G,ZGo),e(G,ab),e(ab,b1e),e(b1e,eOo),e(ab,oOo),e(ab,Hz),e(Hz,rOo),e(ab,tOo),e(G,aOo),e(G,nb),e(nb,v1e),e(v1e,nOo),e(nb,sOo),e(nb,Jz),e(Jz,lOo),e(nb,iOo),e(G,dOo),e(G,sb),e(sb,F1e),e(F1e,cOo),e(sb,mOo),e(sb,Yz),e(Yz,fOo),e(sb,gOo),e(G,hOo),e(G,lb),e(lb,T1e),e(T1e,uOo),e(lb,pOo),e(lb,Kz),e(Kz,_Oo),e(lb,bOo),e(G,vOo),e(G,ib),e(ib,M1e),e(M1e,FOo),e(ib,TOo),e(ib,Zz),e(Zz,MOo),e(ib,EOo),e(G,COo),e(G,db),e(db,E1e),e(E1e,wOo),e(db,AOo),e(db,eQ),e(eQ,LOo),e(db,yOo),e(G,xOo),e(G,cb),e(cb,C1e),e(C1e,$Oo),e(cb,kOo),e(cb,oQ),e(oQ,SOo),e(cb,ROo),e(G,POo),e(G,mb),e(mb,w1e),e(w1e,BOo),e(mb,IOo),e(mb,rQ),e(rQ,NOo),e(mb,qOo),e(G,jOo),e(G,fb),e(fb,A1e),e(A1e,DOo),e(fb,GOo),e(fb,tQ),e(tQ,OOo),e(fb,VOo),e(G,XOo),e(G,gb),e(gb,L1e),e(L1e,zOo),e(gb,QOo),e(gb,aQ),e(aQ,WOo),e(gb,UOo),e(G,HOo),e(G,hb),e(hb,y1e),e(y1e,JOo),e(hb,YOo),e(hb,nQ),e(nQ,KOo),e(hb,ZOo),e(G,eVo),e(G,ub),e(ub,x1e),e(x1e,oVo),e(ub,rVo),e(ub,sQ),e(sQ,tVo),e(ub,aVo),e(G,nVo),e(G,pb),e(pb,$1e),e($1e,sVo),e(pb,lVo),e(pb,lQ),e(lQ,iVo),e(pb,dVo),e(G,cVo),e(G,_b),e(_b,k1e),e(k1e,mVo),e(_b,fVo),e(_b,iQ),e(iQ,gVo),e(_b,hVo),e(eo,uVo),e(eo,bb),e(bb,pVo),e(bb,S1e),e(S1e,_Vo),e(bb,bVo),e(bb,R1e),e(R1e,vVo),e(eo,FVo),M(vb,eo,null),b(m,HZe,_),b(m,Ed,_),e(Ed,Fb),e(Fb,P1e),M(Px,P1e,null),e(Ed,TVo),e(Ed,B1e),e(B1e,MVo),b(m,JZe,_),b(m,Io,_),M(Bx,Io,null),e(Io,EVo),e(Io,Cd),e(Cd,CVo),e(Cd,dQ),e(dQ,wVo),e(Cd,AVo),e(Cd,cQ),e(cQ,LVo),e(Cd,yVo),e(Io,xVo),e(Io,Ix),e(Ix,$Vo),e(Ix,I1e),e(I1e,kVo),e(Ix,SVo),e(Io,RVo),e(Io,vt),M(Nx,vt,null),e(vt,PVo),e(vt,N1e),e(N1e,BVo),e(vt,IVo),e(vt,wd),e(wd,NVo),e(wd,q1e),e(q1e,qVo),e(wd,jVo),e(wd,mQ),e(mQ,DVo),e(wd,GVo),e(vt,OVo),M(Tb,vt,null),e(Io,VVo),e(Io,oo),M(qx,oo,null),e(oo,XVo),e(oo,j1e),e(j1e,zVo),e(oo,QVo),e(oo,Ka),e(Ka,WVo),e(Ka,D1e),e(D1e,UVo),e(Ka,HVo),e(Ka,G1e),e(G1e,JVo),e(Ka,YVo),e(Ka,O1e),e(O1e,KVo),e(Ka,ZVo),e(oo,eXo),e(oo,Q),e(Q,Mb),e(Mb,V1e),e(V1e,oXo),e(Mb,rXo),e(Mb,fQ),e(fQ,tXo),e(Mb,aXo),e(Q,nXo),e(Q,Eb),e(Eb,X1e),e(X1e,sXo),e(Eb,lXo),e(Eb,gQ),e(gQ,iXo),e(Eb,dXo),e(Q,cXo),e(Q,Cb),e(Cb,z1e),e(z1e,mXo),e(Cb,fXo),e(Cb,hQ),e(hQ,gXo),e(Cb,hXo),e(Q,uXo),e(Q,wb),e(wb,Q1e),e(Q1e,pXo),e(wb,_Xo),e(wb,uQ),e(uQ,bXo),e(wb,vXo),e(Q,FXo),e(Q,Ab),e(Ab,W1e),e(W1e,TXo),e(Ab,MXo),e(Ab,pQ),e(pQ,EXo),e(Ab,CXo),e(Q,wXo),e(Q,Lb),e(Lb,U1e),e(U1e,AXo),e(Lb,LXo),e(Lb,_Q),e(_Q,yXo),e(Lb,xXo),e(Q,$Xo),e(Q,yb),e(yb,H1e),e(H1e,kXo),e(yb,SXo),e(yb,bQ),e(bQ,RXo),e(yb,PXo),e(Q,BXo),e(Q,xb),e(xb,J1e),e(J1e,IXo),e(xb,NXo),e(xb,vQ),e(vQ,qXo),e(xb,jXo),e(Q,DXo),e(Q,$b),e($b,Y1e),e(Y1e,GXo),e($b,OXo),e($b,FQ),e(FQ,VXo),e($b,XXo),e(Q,zXo),e(Q,kb),e(kb,K1e),e(K1e,QXo),e(kb,WXo),e(kb,TQ),e(TQ,UXo),e(kb,HXo),e(Q,JXo),e(Q,Sb),e(Sb,Z1e),e(Z1e,YXo),e(Sb,KXo),e(Sb,MQ),e(MQ,ZXo),e(Sb,ezo),e(Q,ozo),e(Q,Rb),e(Rb,ebe),e(ebe,rzo),e(Rb,tzo),e(Rb,EQ),e(EQ,azo),e(Rb,nzo),e(Q,szo),e(Q,Pb),e(Pb,obe),e(obe,lzo),e(Pb,izo),e(Pb,CQ),e(CQ,dzo),e(Pb,czo),e(Q,mzo),e(Q,Bb),e(Bb,rbe),e(rbe,fzo),e(Bb,gzo),e(Bb,wQ),e(wQ,hzo),e(Bb,uzo),e(Q,pzo),e(Q,Ib),e(Ib,tbe),e(tbe,_zo),e(Ib,bzo),e(Ib,AQ),e(AQ,vzo),e(Ib,Fzo),e(Q,Tzo),e(Q,Nb),e(Nb,abe),e(abe,Mzo),e(Nb,Ezo),e(Nb,LQ),e(LQ,Czo),e(Nb,wzo),e(Q,Azo),e(Q,qb),e(qb,nbe),e(nbe,Lzo),e(qb,yzo),e(qb,yQ),e(yQ,xzo),e(qb,$zo),e(Q,kzo),e(Q,jb),e(jb,sbe),e(sbe,Szo),e(jb,Rzo),e(jb,xQ),e(xQ,Pzo),e(jb,Bzo),e(Q,Izo),e(Q,Db),e(Db,lbe),e(lbe,Nzo),e(Db,qzo),e(Db,$Q),e($Q,jzo),e(Db,Dzo),e(Q,Gzo),e(Q,Gb),e(Gb,ibe),e(ibe,Ozo),e(Gb,Vzo),e(Gb,kQ),e(kQ,Xzo),e(Gb,zzo),e(Q,Qzo),e(Q,Ob),e(Ob,dbe),e(dbe,Wzo),e(Ob,Uzo),e(Ob,SQ),e(SQ,Hzo),e(Ob,Jzo),e(Q,Yzo),e(Q,Vb),e(Vb,cbe),e(cbe,Kzo),e(Vb,Zzo),e(Vb,RQ),e(RQ,eQo),e(Vb,oQo),e(Q,rQo),e(Q,Xb),e(Xb,mbe),e(mbe,tQo),e(Xb,aQo),e(Xb,PQ),e(PQ,nQo),e(Xb,sQo),e(Q,lQo),e(Q,zb),e(zb,fbe),e(fbe,iQo),e(zb,dQo),e(zb,BQ),e(BQ,cQo),e(zb,mQo),e(Q,fQo),e(Q,Qb),e(Qb,gbe),e(gbe,gQo),e(Qb,hQo),e(Qb,IQ),e(IQ,uQo),e(Qb,pQo),e(Q,_Qo),e(Q,Wb),e(Wb,hbe),e(hbe,bQo),e(Wb,vQo),e(Wb,NQ),e(NQ,FQo),e(Wb,TQo),e(Q,MQo),e(Q,Ub),e(Ub,ube),e(ube,EQo),e(Ub,CQo),e(Ub,qQ),e(qQ,wQo),e(Ub,AQo),e(Q,LQo),e(Q,Hb),e(Hb,pbe),e(pbe,yQo),e(Hb,xQo),e(Hb,jQ),e(jQ,$Qo),e(Hb,kQo),e(Q,SQo),e(Q,Jb),e(Jb,_be),e(_be,RQo),e(Jb,PQo),e(Jb,DQ),e(DQ,BQo),e(Jb,IQo),e(Q,NQo),e(Q,Yb),e(Yb,bbe),e(bbe,qQo),e(Yb,jQo),e(Yb,GQ),e(GQ,DQo),e(Yb,GQo),e(Q,OQo),e(Q,Kb),e(Kb,vbe),e(vbe,VQo),e(Kb,XQo),e(Kb,OQ),e(OQ,zQo),e(Kb,QQo),e(Q,WQo),e(Q,Zb),e(Zb,Fbe),e(Fbe,UQo),e(Zb,HQo),e(Zb,VQ),e(VQ,JQo),e(Zb,YQo),e(Q,KQo),e(Q,ev),e(ev,Tbe),e(Tbe,ZQo),e(ev,eWo),e(ev,XQ),e(XQ,oWo),e(ev,rWo),e(Q,tWo),e(Q,ov),e(ov,Mbe),e(Mbe,aWo),e(ov,nWo),e(ov,zQ),e(zQ,sWo),e(ov,lWo),e(Q,iWo),e(Q,rv),e(rv,Ebe),e(Ebe,dWo),e(rv,cWo),e(rv,QQ),e(QQ,mWo),e(rv,fWo),e(Q,gWo),e(Q,tv),e(tv,Cbe),e(Cbe,hWo),e(tv,uWo),e(tv,WQ),e(WQ,pWo),e(tv,_Wo),e(Q,bWo),e(Q,av),e(av,wbe),e(wbe,vWo),e(av,FWo),e(av,UQ),e(UQ,TWo),e(av,MWo),e(Q,EWo),e(Q,nv),e(nv,Abe),e(Abe,CWo),e(nv,wWo),e(nv,HQ),e(HQ,AWo),e(nv,LWo),e(Q,yWo),e(Q,sv),e(sv,Lbe),e(Lbe,xWo),e(sv,$Wo),e(sv,JQ),e(JQ,kWo),e(sv,SWo),e(Q,RWo),e(Q,lv),e(lv,ybe),e(ybe,PWo),e(lv,BWo),e(lv,YQ),e(YQ,IWo),e(lv,NWo),e(Q,qWo),e(Q,iv),e(iv,xbe),e(xbe,jWo),e(iv,DWo),e(iv,KQ),e(KQ,GWo),e(iv,OWo),e(Q,VWo),e(Q,dv),e(dv,$be),e($be,XWo),e(dv,zWo),e(dv,ZQ),e(ZQ,QWo),e(dv,WWo),e(oo,UWo),e(oo,cv),e(cv,HWo),e(cv,kbe),e(kbe,JWo),e(cv,YWo),e(cv,Sbe),e(Sbe,KWo),e(oo,ZWo),M(mv,oo,null),b(m,YZe,_),b(m,Ad,_),e(Ad,fv),e(fv,Rbe),M(jx,Rbe,null),e(Ad,eUo),e(Ad,Pbe),e(Pbe,oUo),b(m,KZe,_),b(m,No,_),M(Dx,No,null),e(No,rUo),e(No,Ld),e(Ld,tUo),e(Ld,eW),e(eW,aUo),e(Ld,nUo),e(Ld,oW),e(oW,sUo),e(Ld,lUo),e(No,iUo),e(No,Gx),e(Gx,dUo),e(Gx,Bbe),e(Bbe,cUo),e(Gx,mUo),e(No,fUo),e(No,Ft),M(Ox,Ft,null),e(Ft,gUo),e(Ft,Ibe),e(Ibe,hUo),e(Ft,uUo),e(Ft,yd),e(yd,pUo),e(yd,Nbe),e(Nbe,_Uo),e(yd,bUo),e(yd,rW),e(rW,vUo),e(yd,FUo),e(Ft,TUo),M(gv,Ft,null),e(No,MUo),e(No,ro),M(Vx,ro,null),e(ro,EUo),e(ro,qbe),e(qbe,CUo),e(ro,wUo),e(ro,Za),e(Za,AUo),e(Za,jbe),e(jbe,LUo),e(Za,yUo),e(Za,Dbe),e(Dbe,xUo),e(Za,$Uo),e(Za,Gbe),e(Gbe,kUo),e(Za,SUo),e(ro,RUo),e(ro,J),e(J,hv),e(hv,Obe),e(Obe,PUo),e(hv,BUo),e(hv,tW),e(tW,IUo),e(hv,NUo),e(J,qUo),e(J,uv),e(uv,Vbe),e(Vbe,jUo),e(uv,DUo),e(uv,aW),e(aW,GUo),e(uv,OUo),e(J,VUo),e(J,pv),e(pv,Xbe),e(Xbe,XUo),e(pv,zUo),e(pv,nW),e(nW,QUo),e(pv,WUo),e(J,UUo),e(J,_v),e(_v,zbe),e(zbe,HUo),e(_v,JUo),e(_v,sW),e(sW,YUo),e(_v,KUo),e(J,ZUo),e(J,bv),e(bv,Qbe),e(Qbe,eHo),e(bv,oHo),e(bv,lW),e(lW,rHo),e(bv,tHo),e(J,aHo),e(J,vv),e(vv,Wbe),e(Wbe,nHo),e(vv,sHo),e(vv,iW),e(iW,lHo),e(vv,iHo),e(J,dHo),e(J,Fv),e(Fv,Ube),e(Ube,cHo),e(Fv,mHo),e(Fv,dW),e(dW,fHo),e(Fv,gHo),e(J,hHo),e(J,Tv),e(Tv,Hbe),e(Hbe,uHo),e(Tv,pHo),e(Tv,cW),e(cW,_Ho),e(Tv,bHo),e(J,vHo),e(J,Mv),e(Mv,Jbe),e(Jbe,FHo),e(Mv,THo),e(Mv,mW),e(mW,MHo),e(Mv,EHo),e(J,CHo),e(J,Ev),e(Ev,Ybe),e(Ybe,wHo),e(Ev,AHo),e(Ev,fW),e(fW,LHo),e(Ev,yHo),e(J,xHo),e(J,Cv),e(Cv,Kbe),e(Kbe,$Ho),e(Cv,kHo),e(Cv,gW),e(gW,SHo),e(Cv,RHo),e(J,PHo),e(J,wv),e(wv,Zbe),e(Zbe,BHo),e(wv,IHo),e(wv,hW),e(hW,NHo),e(wv,qHo),e(J,jHo),e(J,Av),e(Av,eve),e(eve,DHo),e(Av,GHo),e(Av,uW),e(uW,OHo),e(Av,VHo),e(J,XHo),e(J,Lv),e(Lv,ove),e(ove,zHo),e(Lv,QHo),e(Lv,pW),e(pW,WHo),e(Lv,UHo),e(J,HHo),e(J,yv),e(yv,rve),e(rve,JHo),e(yv,YHo),e(yv,_W),e(_W,KHo),e(yv,ZHo),e(J,eJo),e(J,xv),e(xv,tve),e(tve,oJo),e(xv,rJo),e(xv,bW),e(bW,tJo),e(xv,aJo),e(J,nJo),e(J,$v),e($v,ave),e(ave,sJo),e($v,lJo),e($v,vW),e(vW,iJo),e($v,dJo),e(J,cJo),e(J,kv),e(kv,nve),e(nve,mJo),e(kv,fJo),e(kv,FW),e(FW,gJo),e(kv,hJo),e(J,uJo),e(J,Sv),e(Sv,sve),e(sve,pJo),e(Sv,_Jo),e(Sv,TW),e(TW,bJo),e(Sv,vJo),e(J,FJo),e(J,Rv),e(Rv,lve),e(lve,TJo),e(Rv,MJo),e(Rv,MW),e(MW,EJo),e(Rv,CJo),e(J,wJo),e(J,Pv),e(Pv,ive),e(ive,AJo),e(Pv,LJo),e(Pv,EW),e(EW,yJo),e(Pv,xJo),e(J,$Jo),e(J,Bv),e(Bv,dve),e(dve,kJo),e(Bv,SJo),e(Bv,CW),e(CW,RJo),e(Bv,PJo),e(J,BJo),e(J,Iv),e(Iv,cve),e(cve,IJo),e(Iv,NJo),e(Iv,wW),e(wW,qJo),e(Iv,jJo),e(J,DJo),e(J,Nv),e(Nv,mve),e(mve,GJo),e(Nv,OJo),e(Nv,AW),e(AW,VJo),e(Nv,XJo),e(J,zJo),e(J,qv),e(qv,fve),e(fve,QJo),e(qv,WJo),e(qv,LW),e(LW,UJo),e(qv,HJo),e(J,JJo),e(J,jv),e(jv,gve),e(gve,YJo),e(jv,KJo),e(jv,yW),e(yW,ZJo),e(jv,eYo),e(J,oYo),e(J,Dv),e(Dv,hve),e(hve,rYo),e(Dv,tYo),e(Dv,xW),e(xW,aYo),e(Dv,nYo),e(J,sYo),e(J,Gv),e(Gv,uve),e(uve,lYo),e(Gv,iYo),e(Gv,$W),e($W,dYo),e(Gv,cYo),e(J,mYo),e(J,Ov),e(Ov,pve),e(pve,fYo),e(Ov,gYo),e(Ov,kW),e(kW,hYo),e(Ov,uYo),e(J,pYo),e(J,Vv),e(Vv,_ve),e(_ve,_Yo),e(Vv,bYo),e(Vv,SW),e(SW,vYo),e(Vv,FYo),e(J,TYo),e(J,Xv),e(Xv,bve),e(bve,MYo),e(Xv,EYo),e(Xv,RW),e(RW,CYo),e(Xv,wYo),e(J,AYo),e(J,zv),e(zv,vve),e(vve,LYo),e(zv,yYo),e(zv,PW),e(PW,xYo),e(zv,$Yo),e(J,kYo),e(J,Qv),e(Qv,Fve),e(Fve,SYo),e(Qv,RYo),e(Qv,BW),e(BW,PYo),e(Qv,BYo),e(J,IYo),e(J,Wv),e(Wv,Tve),e(Tve,NYo),e(Wv,qYo),e(Wv,IW),e(IW,jYo),e(Wv,DYo),e(J,GYo),e(J,Uv),e(Uv,Mve),e(Mve,OYo),e(Uv,VYo),e(Uv,Eve),e(Eve,XYo),e(Uv,zYo),e(J,QYo),e(J,Hv),e(Hv,Cve),e(Cve,WYo),e(Hv,UYo),e(Hv,NW),e(NW,HYo),e(Hv,JYo),e(J,YYo),e(J,Jv),e(Jv,wve),e(wve,KYo),e(Jv,ZYo),e(Jv,qW),e(qW,eKo),e(Jv,oKo),e(J,rKo),e(J,Yv),e(Yv,Ave),e(Ave,tKo),e(Yv,aKo),e(Yv,jW),e(jW,nKo),e(Yv,sKo),e(J,lKo),e(J,Kv),e(Kv,Lve),e(Lve,iKo),e(Kv,dKo),e(Kv,DW),e(DW,cKo),e(Kv,mKo),e(ro,fKo),e(ro,Zv),e(Zv,gKo),e(Zv,yve),e(yve,hKo),e(Zv,uKo),e(Zv,xve),e(xve,pKo),e(ro,_Ko),M(eF,ro,null),b(m,ZZe,_),b(m,xd,_),e(xd,oF),e(oF,$ve),M(Xx,$ve,null),e(xd,bKo),e(xd,kve),e(kve,vKo),b(m,eeo,_),b(m,qo,_),M(zx,qo,null),e(qo,FKo),e(qo,$d),e($d,TKo),e($d,GW),e(GW,MKo),e($d,EKo),e($d,OW),e(OW,CKo),e($d,wKo),e(qo,AKo),e(qo,Qx),e(Qx,LKo),e(Qx,Sve),e(Sve,yKo),e(Qx,xKo),e(qo,$Ko),e(qo,Tt),M(Wx,Tt,null),e(Tt,kKo),e(Tt,Rve),e(Rve,SKo),e(Tt,RKo),e(Tt,kd),e(kd,PKo),e(kd,Pve),e(Pve,BKo),e(kd,IKo),e(kd,VW),e(VW,NKo),e(kd,qKo),e(Tt,jKo),M(rF,Tt,null),e(qo,DKo),e(qo,to),M(Ux,to,null),e(to,GKo),e(to,Bve),e(Bve,OKo),e(to,VKo),e(to,en),e(en,XKo),e(en,Ive),e(Ive,zKo),e(en,QKo),e(en,Nve),e(Nve,WKo),e(en,UKo),e(en,qve),e(qve,HKo),e(en,JKo),e(to,YKo),e(to,fe),e(fe,tF),e(tF,jve),e(jve,KKo),e(tF,ZKo),e(tF,XW),e(XW,eZo),e(tF,oZo),e(fe,rZo),e(fe,aF),e(aF,Dve),e(Dve,tZo),e(aF,aZo),e(aF,zW),e(zW,nZo),e(aF,sZo),e(fe,lZo),e(fe,nF),e(nF,Gve),e(Gve,iZo),e(nF,dZo),e(nF,QW),e(QW,cZo),e(nF,mZo),e(fe,fZo),e(fe,sF),e(sF,Ove),e(Ove,gZo),e(sF,hZo),e(sF,WW),e(WW,uZo),e(sF,pZo),e(fe,_Zo),e(fe,lF),e(lF,Vve),e(Vve,bZo),e(lF,vZo),e(lF,UW),e(UW,FZo),e(lF,TZo),e(fe,MZo),e(fe,iF),e(iF,Xve),e(Xve,EZo),e(iF,CZo),e(iF,HW),e(HW,wZo),e(iF,AZo),e(fe,LZo),e(fe,dF),e(dF,zve),e(zve,yZo),e(dF,xZo),e(dF,JW),e(JW,$Zo),e(dF,kZo),e(fe,SZo),e(fe,cF),e(cF,Qve),e(Qve,RZo),e(cF,PZo),e(cF,YW),e(YW,BZo),e(cF,IZo),e(fe,NZo),e(fe,mF),e(mF,Wve),e(Wve,qZo),e(mF,jZo),e(mF,KW),e(KW,DZo),e(mF,GZo),e(fe,OZo),e(fe,fF),e(fF,Uve),e(Uve,VZo),e(fF,XZo),e(fF,ZW),e(ZW,zZo),e(fF,QZo),e(fe,WZo),e(fe,gF),e(gF,Hve),e(Hve,UZo),e(gF,HZo),e(gF,eU),e(eU,JZo),e(gF,YZo),e(fe,KZo),e(fe,hF),e(hF,Jve),e(Jve,ZZo),e(hF,eer),e(hF,oU),e(oU,oer),e(hF,rer),e(fe,ter),e(fe,uF),e(uF,Yve),e(Yve,aer),e(uF,ner),e(uF,rU),e(rU,ser),e(uF,ler),e(fe,ier),e(fe,pF),e(pF,Kve),e(Kve,der),e(pF,cer),e(pF,tU),e(tU,mer),e(pF,fer),e(fe,ger),e(fe,_F),e(_F,Zve),e(Zve,her),e(_F,uer),e(_F,aU),e(aU,per),e(_F,_er),e(fe,ber),e(fe,bF),e(bF,eFe),e(eFe,ver),e(bF,Fer),e(bF,nU),e(nU,Ter),e(bF,Mer),e(fe,Eer),e(fe,vF),e(vF,oFe),e(oFe,Cer),e(vF,wer),e(vF,sU),e(sU,Aer),e(vF,Ler),e(fe,yer),e(fe,FF),e(FF,rFe),e(rFe,xer),e(FF,$er),e(FF,lU),e(lU,ker),e(FF,Ser),e(fe,Rer),e(fe,TF),e(TF,tFe),e(tFe,Per),e(TF,Ber),e(TF,iU),e(iU,Ier),e(TF,Ner),e(fe,qer),e(fe,MF),e(MF,aFe),e(aFe,jer),e(MF,Der),e(MF,dU),e(dU,Ger),e(MF,Oer),e(to,Ver),e(to,EF),e(EF,Xer),e(EF,nFe),e(nFe,zer),e(EF,Qer),e(EF,sFe),e(sFe,Wer),e(to,Uer),M(CF,to,null),b(m,oeo,_),b(m,Sd,_),e(Sd,wF),e(wF,lFe),M(Hx,lFe,null),e(Sd,Her),e(Sd,iFe),e(iFe,Jer),b(m,reo,_),b(m,jo,_),M(Jx,jo,null),e(jo,Yer),e(jo,Rd),e(Rd,Ker),e(Rd,cU),e(cU,Zer),e(Rd,eor),e(Rd,mU),e(mU,oor),e(Rd,ror),e(jo,tor),e(jo,Yx),e(Yx,aor),e(Yx,dFe),e(dFe,nor),e(Yx,sor),e(jo,lor),e(jo,Mt),M(Kx,Mt,null),e(Mt,ior),e(Mt,cFe),e(cFe,dor),e(Mt,cor),e(Mt,Pd),e(Pd,mor),e(Pd,mFe),e(mFe,gor),e(Pd,hor),e(Pd,fU),e(fU,uor),e(Pd,por),e(Mt,_or),M(AF,Mt,null),e(jo,bor),e(jo,ao),M(Zx,ao,null),e(ao,vor),e(ao,fFe),e(fFe,For),e(ao,Tor),e(ao,on),e(on,Mor),e(on,gFe),e(gFe,Eor),e(on,Cor),e(on,hFe),e(hFe,wor),e(on,Aor),e(on,uFe),e(uFe,Lor),e(on,yor),e(ao,xor),e(ao,B),e(B,LF),e(LF,pFe),e(pFe,$or),e(LF,kor),e(LF,gU),e(gU,Sor),e(LF,Ror),e(B,Por),e(B,yF),e(yF,_Fe),e(_Fe,Bor),e(yF,Ior),e(yF,hU),e(hU,Nor),e(yF,qor),e(B,jor),e(B,xF),e(xF,bFe),e(bFe,Dor),e(xF,Gor),e(xF,uU),e(uU,Oor),e(xF,Vor),e(B,Xor),e(B,$F),e($F,vFe),e(vFe,zor),e($F,Qor),e($F,pU),e(pU,Wor),e($F,Uor),e(B,Hor),e(B,kF),e(kF,FFe),e(FFe,Jor),e(kF,Yor),e(kF,_U),e(_U,Kor),e(kF,Zor),e(B,err),e(B,SF),e(SF,TFe),e(TFe,orr),e(SF,rrr),e(SF,bU),e(bU,trr),e(SF,arr),e(B,nrr),e(B,RF),e(RF,MFe),e(MFe,srr),e(RF,lrr),e(RF,vU),e(vU,irr),e(RF,drr),e(B,crr),e(B,PF),e(PF,EFe),e(EFe,mrr),e(PF,frr),e(PF,FU),e(FU,grr),e(PF,hrr),e(B,urr),e(B,BF),e(BF,CFe),e(CFe,prr),e(BF,_rr),e(BF,TU),e(TU,brr),e(BF,vrr),e(B,Frr),e(B,IF),e(IF,wFe),e(wFe,Trr),e(IF,Mrr),e(IF,MU),e(MU,Err),e(IF,Crr),e(B,wrr),e(B,NF),e(NF,AFe),e(AFe,Arr),e(NF,Lrr),e(NF,EU),e(EU,yrr),e(NF,xrr),e(B,$rr),e(B,qF),e(qF,LFe),e(LFe,krr),e(qF,Srr),e(qF,CU),e(CU,Rrr),e(qF,Prr),e(B,Brr),e(B,jF),e(jF,yFe),e(yFe,Irr),e(jF,Nrr),e(jF,wU),e(wU,qrr),e(jF,jrr),e(B,Drr),e(B,DF),e(DF,xFe),e(xFe,Grr),e(DF,Orr),e(DF,AU),e(AU,Vrr),e(DF,Xrr),e(B,zrr),e(B,GF),e(GF,$Fe),e($Fe,Qrr),e(GF,Wrr),e(GF,LU),e(LU,Urr),e(GF,Hrr),e(B,Jrr),e(B,OF),e(OF,kFe),e(kFe,Yrr),e(OF,Krr),e(OF,yU),e(yU,Zrr),e(OF,etr),e(B,otr),e(B,VF),e(VF,SFe),e(SFe,rtr),e(VF,ttr),e(VF,xU),e(xU,atr),e(VF,ntr),e(B,str),e(B,XF),e(XF,RFe),e(RFe,ltr),e(XF,itr),e(XF,$U),e($U,dtr),e(XF,ctr),e(B,mtr),e(B,zF),e(zF,PFe),e(PFe,ftr),e(zF,gtr),e(zF,kU),e(kU,htr),e(zF,utr),e(B,ptr),e(B,QF),e(QF,BFe),e(BFe,_tr),e(QF,btr),e(QF,SU),e(SU,vtr),e(QF,Ftr),e(B,Ttr),e(B,WF),e(WF,IFe),e(IFe,Mtr),e(WF,Etr),e(WF,RU),e(RU,Ctr),e(WF,wtr),e(B,Atr),e(B,UF),e(UF,NFe),e(NFe,Ltr),e(UF,ytr),e(UF,PU),e(PU,xtr),e(UF,$tr),e(B,ktr),e(B,HF),e(HF,qFe),e(qFe,Str),e(HF,Rtr),e(HF,BU),e(BU,Ptr),e(HF,Btr),e(B,Itr),e(B,JF),e(JF,jFe),e(jFe,Ntr),e(JF,qtr),e(JF,IU),e(IU,jtr),e(JF,Dtr),e(B,Gtr),e(B,YF),e(YF,DFe),e(DFe,Otr),e(YF,Vtr),e(YF,NU),e(NU,Xtr),e(YF,ztr),e(B,Qtr),e(B,KF),e(KF,GFe),e(GFe,Wtr),e(KF,Utr),e(KF,qU),e(qU,Htr),e(KF,Jtr),e(B,Ytr),e(B,ZF),e(ZF,OFe),e(OFe,Ktr),e(ZF,Ztr),e(ZF,jU),e(jU,ear),e(ZF,oar),e(B,rar),e(B,eT),e(eT,VFe),e(VFe,tar),e(eT,aar),e(eT,DU),e(DU,nar),e(eT,sar),e(B,lar),e(B,oT),e(oT,XFe),e(XFe,iar),e(oT,dar),e(oT,GU),e(GU,car),e(oT,mar),e(B,far),e(B,rT),e(rT,zFe),e(zFe,gar),e(rT,har),e(rT,OU),e(OU,uar),e(rT,par),e(B,_ar),e(B,tT),e(tT,QFe),e(QFe,bar),e(tT,Far),e(tT,VU),e(VU,Tar),e(tT,Mar),e(B,Ear),e(B,aT),e(aT,WFe),e(WFe,Car),e(aT,war),e(aT,XU),e(XU,Aar),e(aT,Lar),e(B,yar),e(B,nT),e(nT,UFe),e(UFe,xar),e(nT,$ar),e(nT,zU),e(zU,kar),e(nT,Sar),e(B,Rar),e(B,sT),e(sT,HFe),e(HFe,Par),e(sT,Bar),e(sT,QU),e(QU,Iar),e(sT,Nar),e(B,qar),e(B,lT),e(lT,JFe),e(JFe,jar),e(lT,Dar),e(lT,WU),e(WU,Gar),e(lT,Oar),e(B,Var),e(B,iT),e(iT,YFe),e(YFe,Xar),e(iT,zar),e(iT,UU),e(UU,Qar),e(iT,War),e(B,Uar),e(B,dT),e(dT,KFe),e(KFe,Har),e(dT,Jar),e(dT,HU),e(HU,Yar),e(dT,Kar),e(B,Zar),e(B,cT),e(cT,ZFe),e(ZFe,enr),e(cT,onr),e(cT,JU),e(JU,rnr),e(cT,tnr),e(B,anr),e(B,mT),e(mT,eTe),e(eTe,nnr),e(mT,snr),e(mT,YU),e(YU,lnr),e(mT,inr),e(B,dnr),e(B,fT),e(fT,oTe),e(oTe,cnr),e(fT,mnr),e(fT,KU),e(KU,fnr),e(fT,gnr),e(B,hnr),e(B,gT),e(gT,rTe),e(rTe,unr),e(gT,pnr),e(gT,ZU),e(ZU,_nr),e(gT,bnr),e(B,vnr),e(B,hT),e(hT,tTe),e(tTe,Fnr),e(hT,Tnr),e(hT,eH),e(eH,Mnr),e(hT,Enr),e(B,Cnr),e(B,uT),e(uT,aTe),e(aTe,wnr),e(uT,Anr),e(uT,oH),e(oH,Lnr),e(uT,ynr),e(B,xnr),e(B,pT),e(pT,nTe),e(nTe,$nr),e(pT,knr),e(pT,rH),e(rH,Snr),e(pT,Rnr),e(B,Pnr),e(B,_T),e(_T,sTe),e(sTe,Bnr),e(_T,Inr),e(_T,tH),e(tH,Nnr),e(_T,qnr),e(B,jnr),e(B,bT),e(bT,lTe),e(lTe,Dnr),e(bT,Gnr),e(bT,aH),e(aH,Onr),e(bT,Vnr),e(B,Xnr),e(B,vT),e(vT,iTe),e(iTe,znr),e(vT,Qnr),e(vT,nH),e(nH,Wnr),e(vT,Unr),e(B,Hnr),e(B,FT),e(FT,dTe),e(dTe,Jnr),e(FT,Ynr),e(FT,sH),e(sH,Knr),e(FT,Znr),e(B,esr),e(B,TT),e(TT,cTe),e(cTe,osr),e(TT,rsr),e(TT,lH),e(lH,tsr),e(TT,asr),e(B,nsr),e(B,MT),e(MT,mTe),e(mTe,ssr),e(MT,lsr),e(MT,iH),e(iH,isr),e(MT,dsr),e(B,csr),e(B,ET),e(ET,fTe),e(fTe,msr),e(ET,fsr),e(ET,dH),e(dH,gsr),e(ET,hsr),e(B,usr),e(B,CT),e(CT,gTe),e(gTe,psr),e(CT,_sr),e(CT,cH),e(cH,bsr),e(CT,vsr),e(B,Fsr),e(B,wT),e(wT,hTe),e(hTe,Tsr),e(wT,Msr),e(wT,mH),e(mH,Esr),e(wT,Csr),e(B,wsr),e(B,AT),e(AT,uTe),e(uTe,Asr),e(AT,Lsr),e(AT,fH),e(fH,ysr),e(AT,xsr),e(B,$sr),e(B,LT),e(LT,pTe),e(pTe,ksr),e(LT,Ssr),e(LT,gH),e(gH,Rsr),e(LT,Psr),e(ao,Bsr),e(ao,yT),e(yT,Isr),e(yT,_Te),e(_Te,Nsr),e(yT,qsr),e(yT,bTe),e(bTe,jsr),e(ao,Dsr),M(xT,ao,null),b(m,teo,_),b(m,Bd,_),e(Bd,$T),e($T,vTe),M(e$,vTe,null),e(Bd,Gsr),e(Bd,FTe),e(FTe,Osr),b(m,aeo,_),b(m,Do,_),M(o$,Do,null),e(Do,Vsr),e(Do,Id),e(Id,Xsr),e(Id,hH),e(hH,zsr),e(Id,Qsr),e(Id,uH),e(uH,Wsr),e(Id,Usr),e(Do,Hsr),e(Do,r$),e(r$,Jsr),e(r$,TTe),e(TTe,Ysr),e(r$,Ksr),e(Do,Zsr),e(Do,Et),M(t$,Et,null),e(Et,elr),e(Et,MTe),e(MTe,olr),e(Et,rlr),e(Et,Nd),e(Nd,tlr),e(Nd,ETe),e(ETe,alr),e(Nd,nlr),e(Nd,pH),e(pH,slr),e(Nd,llr),e(Et,ilr),M(kT,Et,null),e(Do,dlr),e(Do,no),M(a$,no,null),e(no,clr),e(no,CTe),e(CTe,mlr),e(no,flr),e(no,rn),e(rn,glr),e(rn,wTe),e(wTe,hlr),e(rn,ulr),e(rn,ATe),e(ATe,plr),e(rn,_lr),e(rn,LTe),e(LTe,blr),e(rn,vlr),e(no,Flr),e(no,Z),e(Z,ST),e(ST,yTe),e(yTe,Tlr),e(ST,Mlr),e(ST,_H),e(_H,Elr),e(ST,Clr),e(Z,wlr),e(Z,RT),e(RT,xTe),e(xTe,Alr),e(RT,Llr),e(RT,bH),e(bH,ylr),e(RT,xlr),e(Z,$lr),e(Z,PT),e(PT,$Te),e($Te,klr),e(PT,Slr),e(PT,vH),e(vH,Rlr),e(PT,Plr),e(Z,Blr),e(Z,BT),e(BT,kTe),e(kTe,Ilr),e(BT,Nlr),e(BT,FH),e(FH,qlr),e(BT,jlr),e(Z,Dlr),e(Z,IT),e(IT,STe),e(STe,Glr),e(IT,Olr),e(IT,TH),e(TH,Vlr),e(IT,Xlr),e(Z,zlr),e(Z,NT),e(NT,RTe),e(RTe,Qlr),e(NT,Wlr),e(NT,MH),e(MH,Ulr),e(NT,Hlr),e(Z,Jlr),e(Z,qT),e(qT,PTe),e(PTe,Ylr),e(qT,Klr),e(qT,EH),e(EH,Zlr),e(qT,eir),e(Z,oir),e(Z,jT),e(jT,BTe),e(BTe,rir),e(jT,tir),e(jT,CH),e(CH,air),e(jT,nir),e(Z,sir),e(Z,DT),e(DT,ITe),e(ITe,lir),e(DT,iir),e(DT,wH),e(wH,dir),e(DT,cir),e(Z,mir),e(Z,GT),e(GT,NTe),e(NTe,fir),e(GT,gir),e(GT,AH),e(AH,hir),e(GT,uir),e(Z,pir),e(Z,OT),e(OT,qTe),e(qTe,_ir),e(OT,bir),e(OT,LH),e(LH,vir),e(OT,Fir),e(Z,Tir),e(Z,VT),e(VT,jTe),e(jTe,Mir),e(VT,Eir),e(VT,yH),e(yH,Cir),e(VT,wir),e(Z,Air),e(Z,XT),e(XT,DTe),e(DTe,Lir),e(XT,yir),e(XT,xH),e(xH,xir),e(XT,$ir),e(Z,kir),e(Z,zT),e(zT,GTe),e(GTe,Sir),e(zT,Rir),e(zT,$H),e($H,Pir),e(zT,Bir),e(Z,Iir),e(Z,QT),e(QT,OTe),e(OTe,Nir),e(QT,qir),e(QT,kH),e(kH,jir),e(QT,Dir),e(Z,Gir),e(Z,WT),e(WT,VTe),e(VTe,Oir),e(WT,Vir),e(WT,SH),e(SH,Xir),e(WT,zir),e(Z,Qir),e(Z,UT),e(UT,XTe),e(XTe,Wir),e(UT,Uir),e(UT,RH),e(RH,Hir),e(UT,Jir),e(Z,Yir),e(Z,HT),e(HT,zTe),e(zTe,Kir),e(HT,Zir),e(HT,PH),e(PH,edr),e(HT,odr),e(Z,rdr),e(Z,JT),e(JT,QTe),e(QTe,tdr),e(JT,adr),e(JT,BH),e(BH,ndr),e(JT,sdr),e(Z,ldr),e(Z,YT),e(YT,WTe),e(WTe,idr),e(YT,ddr),e(YT,IH),e(IH,cdr),e(YT,mdr),e(Z,fdr),e(Z,KT),e(KT,UTe),e(UTe,gdr),e(KT,hdr),e(KT,NH),e(NH,udr),e(KT,pdr),e(Z,_dr),e(Z,ZT),e(ZT,HTe),e(HTe,bdr),e(ZT,vdr),e(ZT,qH),e(qH,Fdr),e(ZT,Tdr),e(Z,Mdr),e(Z,eM),e(eM,JTe),e(JTe,Edr),e(eM,Cdr),e(eM,jH),e(jH,wdr),e(eM,Adr),e(Z,Ldr),e(Z,oM),e(oM,YTe),e(YTe,ydr),e(oM,xdr),e(oM,DH),e(DH,$dr),e(oM,kdr),e(Z,Sdr),e(Z,rM),e(rM,KTe),e(KTe,Rdr),e(rM,Pdr),e(rM,GH),e(GH,Bdr),e(rM,Idr),e(Z,Ndr),e(Z,tM),e(tM,ZTe),e(ZTe,qdr),e(tM,jdr),e(tM,OH),e(OH,Ddr),e(tM,Gdr),e(Z,Odr),e(Z,aM),e(aM,eMe),e(eMe,Vdr),e(aM,Xdr),e(aM,VH),e(VH,zdr),e(aM,Qdr),e(Z,Wdr),e(Z,nM),e(nM,oMe),e(oMe,Udr),e(nM,Hdr),e(nM,XH),e(XH,Jdr),e(nM,Ydr),e(Z,Kdr),e(Z,sM),e(sM,rMe),e(rMe,Zdr),e(sM,ecr),e(sM,zH),e(zH,ocr),e(sM,rcr),e(Z,tcr),e(Z,lM),e(lM,tMe),e(tMe,acr),e(lM,ncr),e(lM,QH),e(QH,scr),e(lM,lcr),e(Z,icr),e(Z,iM),e(iM,aMe),e(aMe,dcr),e(iM,ccr),e(iM,WH),e(WH,mcr),e(iM,fcr),e(Z,gcr),e(Z,dM),e(dM,nMe),e(nMe,hcr),e(dM,ucr),e(dM,UH),e(UH,pcr),e(dM,_cr),e(no,bcr),e(no,cM),e(cM,vcr),e(cM,sMe),e(sMe,Fcr),e(cM,Tcr),e(cM,lMe),e(lMe,Mcr),e(no,Ecr),M(mM,no,null),b(m,neo,_),b(m,qd,_),e(qd,fM),e(fM,iMe),M(n$,iMe,null),e(qd,Ccr),e(qd,dMe),e(dMe,wcr),b(m,seo,_),b(m,Go,_),M(s$,Go,null),e(Go,Acr),e(Go,jd),e(jd,Lcr),e(jd,HH),e(HH,ycr),e(jd,xcr),e(jd,JH),e(JH,$cr),e(jd,kcr),e(Go,Scr),e(Go,l$),e(l$,Rcr),e(l$,cMe),e(cMe,Pcr),e(l$,Bcr),e(Go,Icr),e(Go,Ct),M(i$,Ct,null),e(Ct,Ncr),e(Ct,mMe),e(mMe,qcr),e(Ct,jcr),e(Ct,Dd),e(Dd,Dcr),e(Dd,fMe),e(fMe,Gcr),e(Dd,Ocr),e(Dd,YH),e(YH,Vcr),e(Dd,Xcr),e(Ct,zcr),M(gM,Ct,null),e(Go,Qcr),e(Go,so),M(d$,so,null),e(so,Wcr),e(so,gMe),e(gMe,Ucr),e(so,Hcr),e(so,tn),e(tn,Jcr),e(tn,hMe),e(hMe,Ycr),e(tn,Kcr),e(tn,uMe),e(uMe,Zcr),e(tn,emr),e(tn,pMe),e(pMe,omr),e(tn,rmr),e(so,tmr),e(so,Ue),e(Ue,hM),e(hM,_Me),e(_Me,amr),e(hM,nmr),e(hM,KH),e(KH,smr),e(hM,lmr),e(Ue,imr),e(Ue,uM),e(uM,bMe),e(bMe,dmr),e(uM,cmr),e(uM,ZH),e(ZH,mmr),e(uM,fmr),e(Ue,gmr),e(Ue,pM),e(pM,vMe),e(vMe,hmr),e(pM,umr),e(pM,eJ),e(eJ,pmr),e(pM,_mr),e(Ue,bmr),e(Ue,_M),e(_M,FMe),e(FMe,vmr),e(_M,Fmr),e(_M,oJ),e(oJ,Tmr),e(_M,Mmr),e(Ue,Emr),e(Ue,bM),e(bM,TMe),e(TMe,Cmr),e(bM,wmr),e(bM,rJ),e(rJ,Amr),e(bM,Lmr),e(Ue,ymr),e(Ue,vM),e(vM,MMe),e(MMe,xmr),e(vM,$mr),e(vM,tJ),e(tJ,kmr),e(vM,Smr),e(Ue,Rmr),e(Ue,FM),e(FM,EMe),e(EMe,Pmr),e(FM,Bmr),e(FM,aJ),e(aJ,Imr),e(FM,Nmr),e(so,qmr),e(so,TM),e(TM,jmr),e(TM,CMe),e(CMe,Dmr),e(TM,Gmr),e(TM,wMe),e(wMe,Omr),e(so,Vmr),M(MM,so,null),b(m,leo,_),b(m,Gd,_),e(Gd,EM),e(EM,AMe),M(c$,AMe,null),e(Gd,Xmr),e(Gd,LMe),e(LMe,zmr),b(m,ieo,_),b(m,Oo,_),M(m$,Oo,null),e(Oo,Qmr),e(Oo,Od),e(Od,Wmr),e(Od,nJ),e(nJ,Umr),e(Od,Hmr),e(Od,sJ),e(sJ,Jmr),e(Od,Ymr),e(Oo,Kmr),e(Oo,f$),e(f$,Zmr),e(f$,yMe),e(yMe,efr),e(f$,ofr),e(Oo,rfr),e(Oo,wt),M(g$,wt,null),e(wt,tfr),e(wt,xMe),e(xMe,afr),e(wt,nfr),e(wt,Vd),e(Vd,sfr),e(Vd,$Me),e($Me,lfr),e(Vd,ifr),e(Vd,lJ),e(lJ,dfr),e(Vd,cfr),e(wt,mfr),M(CM,wt,null),e(Oo,ffr),e(Oo,lo),M(h$,lo,null),e(lo,gfr),e(lo,kMe),e(kMe,hfr),e(lo,ufr),e(lo,an),e(an,pfr),e(an,SMe),e(SMe,_fr),e(an,bfr),e(an,RMe),e(RMe,vfr),e(an,Ffr),e(an,PMe),e(PMe,Tfr),e(an,Mfr),e(lo,Efr),e(lo,H),e(H,wM),e(wM,BMe),e(BMe,Cfr),e(wM,wfr),e(wM,iJ),e(iJ,Afr),e(wM,Lfr),e(H,yfr),e(H,AM),e(AM,IMe),e(IMe,xfr),e(AM,$fr),e(AM,dJ),e(dJ,kfr),e(AM,Sfr),e(H,Rfr),e(H,LM),e(LM,NMe),e(NMe,Pfr),e(LM,Bfr),e(LM,cJ),e(cJ,Ifr),e(LM,Nfr),e(H,qfr),e(H,yM),e(yM,qMe),e(qMe,jfr),e(yM,Dfr),e(yM,mJ),e(mJ,Gfr),e(yM,Ofr),e(H,Vfr),e(H,xM),e(xM,jMe),e(jMe,Xfr),e(xM,zfr),e(xM,fJ),e(fJ,Qfr),e(xM,Wfr),e(H,Ufr),e(H,$M),e($M,DMe),e(DMe,Hfr),e($M,Jfr),e($M,gJ),e(gJ,Yfr),e($M,Kfr),e(H,Zfr),e(H,kM),e(kM,GMe),e(GMe,egr),e(kM,ogr),e(kM,hJ),e(hJ,rgr),e(kM,tgr),e(H,agr),e(H,SM),e(SM,OMe),e(OMe,ngr),e(SM,sgr),e(SM,uJ),e(uJ,lgr),e(SM,igr),e(H,dgr),e(H,RM),e(RM,VMe),e(VMe,cgr),e(RM,mgr),e(RM,pJ),e(pJ,fgr),e(RM,ggr),e(H,hgr),e(H,PM),e(PM,XMe),e(XMe,ugr),e(PM,pgr),e(PM,_J),e(_J,_gr),e(PM,bgr),e(H,vgr),e(H,BM),e(BM,zMe),e(zMe,Fgr),e(BM,Tgr),e(BM,bJ),e(bJ,Mgr),e(BM,Egr),e(H,Cgr),e(H,IM),e(IM,QMe),e(QMe,wgr),e(IM,Agr),e(IM,vJ),e(vJ,Lgr),e(IM,ygr),e(H,xgr),e(H,NM),e(NM,WMe),e(WMe,$gr),e(NM,kgr),e(NM,FJ),e(FJ,Sgr),e(NM,Rgr),e(H,Pgr),e(H,qM),e(qM,UMe),e(UMe,Bgr),e(qM,Igr),e(qM,TJ),e(TJ,Ngr),e(qM,qgr),e(H,jgr),e(H,jM),e(jM,HMe),e(HMe,Dgr),e(jM,Ggr),e(jM,MJ),e(MJ,Ogr),e(jM,Vgr),e(H,Xgr),e(H,DM),e(DM,JMe),e(JMe,zgr),e(DM,Qgr),e(DM,EJ),e(EJ,Wgr),e(DM,Ugr),e(H,Hgr),e(H,GM),e(GM,YMe),e(YMe,Jgr),e(GM,Ygr),e(GM,CJ),e(CJ,Kgr),e(GM,Zgr),e(H,ehr),e(H,OM),e(OM,KMe),e(KMe,ohr),e(OM,rhr),e(OM,wJ),e(wJ,thr),e(OM,ahr),e(H,nhr),e(H,VM),e(VM,ZMe),e(ZMe,shr),e(VM,lhr),e(VM,AJ),e(AJ,ihr),e(VM,dhr),e(H,chr),e(H,XM),e(XM,eEe),e(eEe,mhr),e(XM,fhr),e(XM,LJ),e(LJ,ghr),e(XM,hhr),e(H,uhr),e(H,zM),e(zM,oEe),e(oEe,phr),e(zM,_hr),e(zM,yJ),e(yJ,bhr),e(zM,vhr),e(H,Fhr),e(H,QM),e(QM,rEe),e(rEe,Thr),e(QM,Mhr),e(QM,xJ),e(xJ,Ehr),e(QM,Chr),e(H,whr),e(H,WM),e(WM,tEe),e(tEe,Ahr),e(WM,Lhr),e(WM,$J),e($J,yhr),e(WM,xhr),e(H,$hr),e(H,UM),e(UM,aEe),e(aEe,khr),e(UM,Shr),e(UM,kJ),e(kJ,Rhr),e(UM,Phr),e(H,Bhr),e(H,HM),e(HM,nEe),e(nEe,Ihr),e(HM,Nhr),e(HM,SJ),e(SJ,qhr),e(HM,jhr),e(H,Dhr),e(H,JM),e(JM,sEe),e(sEe,Ghr),e(JM,Ohr),e(JM,RJ),e(RJ,Vhr),e(JM,Xhr),e(H,zhr),e(H,YM),e(YM,lEe),e(lEe,Qhr),e(YM,Whr),e(YM,PJ),e(PJ,Uhr),e(YM,Hhr),e(H,Jhr),e(H,KM),e(KM,iEe),e(iEe,Yhr),e(KM,Khr),e(KM,BJ),e(BJ,Zhr),e(KM,eur),e(H,our),e(H,ZM),e(ZM,dEe),e(dEe,rur),e(ZM,tur),e(ZM,IJ),e(IJ,aur),e(ZM,nur),e(H,sur),e(H,eE),e(eE,cEe),e(cEe,lur),e(eE,iur),e(eE,NJ),e(NJ,dur),e(eE,cur),e(H,mur),e(H,oE),e(oE,mEe),e(mEe,fur),e(oE,gur),e(oE,qJ),e(qJ,hur),e(oE,uur),e(H,pur),e(H,rE),e(rE,fEe),e(fEe,_ur),e(rE,bur),e(rE,jJ),e(jJ,vur),e(rE,Fur),e(H,Tur),e(H,tE),e(tE,gEe),e(gEe,Mur),e(tE,Eur),e(tE,DJ),e(DJ,Cur),e(tE,wur),e(H,Aur),e(H,aE),e(aE,hEe),e(hEe,Lur),e(aE,yur),e(aE,GJ),e(GJ,xur),e(aE,$ur),e(H,kur),e(H,nE),e(nE,uEe),e(uEe,Sur),e(nE,Rur),e(nE,OJ),e(OJ,Pur),e(nE,Bur),e(H,Iur),e(H,sE),e(sE,pEe),e(pEe,Nur),e(sE,qur),e(sE,VJ),e(VJ,jur),e(sE,Dur),e(H,Gur),e(H,lE),e(lE,_Ee),e(_Ee,Our),e(lE,Vur),e(lE,XJ),e(XJ,Xur),e(lE,zur),e(H,Qur),e(H,iE),e(iE,bEe),e(bEe,Wur),e(iE,Uur),e(iE,zJ),e(zJ,Hur),e(iE,Jur),e(H,Yur),e(H,dE),e(dE,vEe),e(vEe,Kur),e(dE,Zur),e(dE,QJ),e(QJ,epr),e(dE,opr),e(H,rpr),e(H,cE),e(cE,FEe),e(FEe,tpr),e(cE,apr),e(cE,WJ),e(WJ,npr),e(cE,spr),e(lo,lpr),e(lo,mE),e(mE,ipr),e(mE,TEe),e(TEe,dpr),e(mE,cpr),e(mE,MEe),e(MEe,mpr),e(lo,fpr),M(fE,lo,null),b(m,deo,_),b(m,Xd,_),e(Xd,gE),e(gE,EEe),M(u$,EEe,null),e(Xd,gpr),e(Xd,CEe),e(CEe,hpr),b(m,ceo,_),b(m,Vo,_),M(p$,Vo,null),e(Vo,upr),e(Vo,zd),e(zd,ppr),e(zd,UJ),e(UJ,_pr),e(zd,bpr),e(zd,HJ),e(HJ,vpr),e(zd,Fpr),e(Vo,Tpr),e(Vo,_$),e(_$,Mpr),e(_$,wEe),e(wEe,Epr),e(_$,Cpr),e(Vo,wpr),e(Vo,At),M(b$,At,null),e(At,Apr),e(At,AEe),e(AEe,Lpr),e(At,ypr),e(At,Qd),e(Qd,xpr),e(Qd,LEe),e(LEe,$pr),e(Qd,kpr),e(Qd,JJ),e(JJ,Spr),e(Qd,Rpr),e(At,Ppr),M(hE,At,null),e(Vo,Bpr),e(Vo,io),M(v$,io,null),e(io,Ipr),e(io,yEe),e(yEe,Npr),e(io,qpr),e(io,nn),e(nn,jpr),e(nn,xEe),e(xEe,Dpr),e(nn,Gpr),e(nn,$Ee),e($Ee,Opr),e(nn,Vpr),e(nn,kEe),e(kEe,Xpr),e(nn,zpr),e(io,Qpr),e(io,V),e(V,uE),e(uE,SEe),e(SEe,Wpr),e(uE,Upr),e(uE,YJ),e(YJ,Hpr),e(uE,Jpr),e(V,Ypr),e(V,pE),e(pE,REe),e(REe,Kpr),e(pE,Zpr),e(pE,KJ),e(KJ,e_r),e(pE,o_r),e(V,r_r),e(V,_E),e(_E,PEe),e(PEe,t_r),e(_E,a_r),e(_E,ZJ),e(ZJ,n_r),e(_E,s_r),e(V,l_r),e(V,bE),e(bE,BEe),e(BEe,i_r),e(bE,d_r),e(bE,eY),e(eY,c_r),e(bE,m_r),e(V,f_r),e(V,vE),e(vE,IEe),e(IEe,g_r),e(vE,h_r),e(vE,oY),e(oY,u_r),e(vE,p_r),e(V,__r),e(V,FE),e(FE,NEe),e(NEe,b_r),e(FE,v_r),e(FE,rY),e(rY,F_r),e(FE,T_r),e(V,M_r),e(V,TE),e(TE,qEe),e(qEe,E_r),e(TE,C_r),e(TE,tY),e(tY,w_r),e(TE,A_r),e(V,L_r),e(V,ME),e(ME,jEe),e(jEe,y_r),e(ME,x_r),e(ME,aY),e(aY,$_r),e(ME,k_r),e(V,S_r),e(V,EE),e(EE,DEe),e(DEe,R_r),e(EE,P_r),e(EE,nY),e(nY,B_r),e(EE,I_r),e(V,N_r),e(V,CE),e(CE,GEe),e(GEe,q_r),e(CE,j_r),e(CE,sY),e(sY,D_r),e(CE,G_r),e(V,O_r),e(V,wE),e(wE,OEe),e(OEe,V_r),e(wE,X_r),e(wE,lY),e(lY,z_r),e(wE,Q_r),e(V,W_r),e(V,AE),e(AE,VEe),e(VEe,U_r),e(AE,H_r),e(AE,iY),e(iY,J_r),e(AE,Y_r),e(V,K_r),e(V,LE),e(LE,XEe),e(XEe,Z_r),e(LE,e2r),e(LE,dY),e(dY,o2r),e(LE,r2r),e(V,t2r),e(V,yE),e(yE,zEe),e(zEe,a2r),e(yE,n2r),e(yE,cY),e(cY,s2r),e(yE,l2r),e(V,i2r),e(V,xE),e(xE,QEe),e(QEe,d2r),e(xE,c2r),e(xE,mY),e(mY,m2r),e(xE,f2r),e(V,g2r),e(V,$E),e($E,WEe),e(WEe,h2r),e($E,u2r),e($E,fY),e(fY,p2r),e($E,_2r),e(V,b2r),e(V,kE),e(kE,UEe),e(UEe,v2r),e(kE,F2r),e(kE,gY),e(gY,T2r),e(kE,M2r),e(V,E2r),e(V,SE),e(SE,HEe),e(HEe,C2r),e(SE,w2r),e(SE,hY),e(hY,A2r),e(SE,L2r),e(V,y2r),e(V,RE),e(RE,JEe),e(JEe,x2r),e(RE,$2r),e(RE,uY),e(uY,k2r),e(RE,S2r),e(V,R2r),e(V,PE),e(PE,YEe),e(YEe,P2r),e(PE,B2r),e(PE,pY),e(pY,I2r),e(PE,N2r),e(V,q2r),e(V,BE),e(BE,KEe),e(KEe,j2r),e(BE,D2r),e(BE,_Y),e(_Y,G2r),e(BE,O2r),e(V,V2r),e(V,IE),e(IE,ZEe),e(ZEe,X2r),e(IE,z2r),e(IE,bY),e(bY,Q2r),e(IE,W2r),e(V,U2r),e(V,NE),e(NE,e4e),e(e4e,H2r),e(NE,J2r),e(NE,vY),e(vY,Y2r),e(NE,K2r),e(V,Z2r),e(V,qE),e(qE,o4e),e(o4e,e1r),e(qE,o1r),e(qE,FY),e(FY,r1r),e(qE,t1r),e(V,a1r),e(V,jE),e(jE,r4e),e(r4e,n1r),e(jE,s1r),e(jE,TY),e(TY,l1r),e(jE,i1r),e(V,d1r),e(V,DE),e(DE,t4e),e(t4e,c1r),e(DE,m1r),e(DE,MY),e(MY,f1r),e(DE,g1r),e(V,h1r),e(V,GE),e(GE,a4e),e(a4e,u1r),e(GE,p1r),e(GE,EY),e(EY,_1r),e(GE,b1r),e(V,v1r),e(V,OE),e(OE,n4e),e(n4e,F1r),e(OE,T1r),e(OE,CY),e(CY,M1r),e(OE,E1r),e(V,C1r),e(V,VE),e(VE,s4e),e(s4e,w1r),e(VE,A1r),e(VE,wY),e(wY,L1r),e(VE,y1r),e(V,x1r),e(V,XE),e(XE,l4e),e(l4e,$1r),e(XE,k1r),e(XE,AY),e(AY,S1r),e(XE,R1r),e(V,P1r),e(V,zE),e(zE,i4e),e(i4e,B1r),e(zE,I1r),e(zE,LY),e(LY,N1r),e(zE,q1r),e(V,j1r),e(V,QE),e(QE,d4e),e(d4e,D1r),e(QE,G1r),e(QE,yY),e(yY,O1r),e(QE,V1r),e(V,X1r),e(V,WE),e(WE,c4e),e(c4e,z1r),e(WE,Q1r),e(WE,xY),e(xY,W1r),e(WE,U1r),e(V,H1r),e(V,UE),e(UE,m4e),e(m4e,J1r),e(UE,Y1r),e(UE,$Y),e($Y,K1r),e(UE,Z1r),e(V,ebr),e(V,HE),e(HE,f4e),e(f4e,obr),e(HE,rbr),e(HE,kY),e(kY,tbr),e(HE,abr),e(V,nbr),e(V,JE),e(JE,g4e),e(g4e,sbr),e(JE,lbr),e(JE,SY),e(SY,ibr),e(JE,dbr),e(V,cbr),e(V,YE),e(YE,h4e),e(h4e,mbr),e(YE,fbr),e(YE,RY),e(RY,gbr),e(YE,hbr),e(V,ubr),e(V,KE),e(KE,u4e),e(u4e,pbr),e(KE,_br),e(KE,PY),e(PY,bbr),e(KE,vbr),e(V,Fbr),e(V,ZE),e(ZE,p4e),e(p4e,Tbr),e(ZE,Mbr),e(ZE,BY),e(BY,Ebr),e(ZE,Cbr),e(V,wbr),e(V,e4),e(e4,_4e),e(_4e,Abr),e(e4,Lbr),e(e4,IY),e(IY,ybr),e(e4,xbr),e(V,$br),e(V,o4),e(o4,b4e),e(b4e,kbr),e(o4,Sbr),e(o4,NY),e(NY,Rbr),e(o4,Pbr),e(V,Bbr),e(V,r4),e(r4,v4e),e(v4e,Ibr),e(r4,Nbr),e(r4,qY),e(qY,qbr),e(r4,jbr),e(V,Dbr),e(V,t4),e(t4,F4e),e(F4e,Gbr),e(t4,Obr),e(t4,jY),e(jY,Vbr),e(t4,Xbr),e(V,zbr),e(V,a4),e(a4,T4e),e(T4e,Qbr),e(a4,Wbr),e(a4,DY),e(DY,Ubr),e(a4,Hbr),e(V,Jbr),e(V,n4),e(n4,M4e),e(M4e,Ybr),e(n4,Kbr),e(n4,GY),e(GY,Zbr),e(n4,evr),e(io,ovr),e(io,s4),e(s4,rvr),e(s4,E4e),e(E4e,tvr),e(s4,avr),e(s4,C4e),e(C4e,nvr),e(io,svr),M(l4,io,null),b(m,meo,_),b(m,Wd,_),e(Wd,i4),e(i4,w4e),M(F$,w4e,null),e(Wd,lvr),e(Wd,A4e),e(A4e,ivr),b(m,feo,_),b(m,Xo,_),M(T$,Xo,null),e(Xo,dvr),e(Xo,Ud),e(Ud,cvr),e(Ud,OY),e(OY,mvr),e(Ud,fvr),e(Ud,VY),e(VY,gvr),e(Ud,hvr),e(Xo,uvr),e(Xo,M$),e(M$,pvr),e(M$,L4e),e(L4e,_vr),e(M$,bvr),e(Xo,vvr),e(Xo,Lt),M(E$,Lt,null),e(Lt,Fvr),e(Lt,y4e),e(y4e,Tvr),e(Lt,Mvr),e(Lt,Hd),e(Hd,Evr),e(Hd,x4e),e(x4e,Cvr),e(Hd,wvr),e(Hd,XY),e(XY,Avr),e(Hd,Lvr),e(Lt,yvr),M(d4,Lt,null),e(Xo,xvr),e(Xo,co),M(C$,co,null),e(co,$vr),e(co,$4e),e($4e,kvr),e(co,Svr),e(co,sn),e(sn,Rvr),e(sn,k4e),e(k4e,Pvr),e(sn,Bvr),e(sn,S4e),e(S4e,Ivr),e(sn,Nvr),e(sn,R4e),e(R4e,qvr),e(sn,jvr),e(co,Dvr),e(co,P4e),e(P4e,c4),e(c4,B4e),e(B4e,Gvr),e(c4,Ovr),e(c4,zY),e(zY,Vvr),e(c4,Xvr),e(co,zvr),e(co,m4),e(m4,Qvr),e(m4,I4e),e(I4e,Wvr),e(m4,Uvr),e(m4,N4e),e(N4e,Hvr),e(co,Jvr),M(f4,co,null),b(m,geo,_),b(m,Jd,_),e(Jd,g4),e(g4,q4e),M(w$,q4e,null),e(Jd,Yvr),e(Jd,j4e),e(j4e,Kvr),b(m,heo,_),b(m,zo,_),M(A$,zo,null),e(zo,Zvr),e(zo,Yd),e(Yd,eFr),e(Yd,QY),e(QY,oFr),e(Yd,rFr),e(Yd,WY),e(WY,tFr),e(Yd,aFr),e(zo,nFr),e(zo,L$),e(L$,sFr),e(L$,D4e),e(D4e,lFr),e(L$,iFr),e(zo,dFr),e(zo,yt),M(y$,yt,null),e(yt,cFr),e(yt,G4e),e(G4e,mFr),e(yt,fFr),e(yt,Kd),e(Kd,gFr),e(Kd,O4e),e(O4e,hFr),e(Kd,uFr),e(Kd,UY),e(UY,pFr),e(Kd,_Fr),e(yt,bFr),M(h4,yt,null),e(zo,vFr),e(zo,mo),M(x$,mo,null),e(mo,FFr),e(mo,V4e),e(V4e,TFr),e(mo,MFr),e(mo,ln),e(ln,EFr),e(ln,X4e),e(X4e,CFr),e(ln,wFr),e(ln,z4e),e(z4e,AFr),e(ln,LFr),e(ln,Q4e),e(Q4e,yFr),e(ln,xFr),e(mo,$Fr),e(mo,Zd),e(Zd,u4),e(u4,W4e),e(W4e,kFr),e(u4,SFr),e(u4,HY),e(HY,RFr),e(u4,PFr),e(Zd,BFr),e(Zd,p4),e(p4,U4e),e(U4e,IFr),e(p4,NFr),e(p4,JY),e(JY,qFr),e(p4,jFr),e(Zd,DFr),e(Zd,_4),e(_4,H4e),e(H4e,GFr),e(_4,OFr),e(_4,YY),e(YY,VFr),e(_4,XFr),e(mo,zFr),e(mo,b4),e(b4,QFr),e(b4,J4e),e(J4e,WFr),e(b4,UFr),e(b4,Y4e),e(Y4e,HFr),e(mo,JFr),M(v4,mo,null),b(m,ueo,_),b(m,ec,_),e(ec,F4),e(F4,K4e),M($$,K4e,null),e(ec,YFr),e(ec,Z4e),e(Z4e,KFr),b(m,peo,_),b(m,Qo,_),M(k$,Qo,null),e(Qo,ZFr),e(Qo,oc),e(oc,eTr),e(oc,KY),e(KY,oTr),e(oc,rTr),e(oc,ZY),e(ZY,tTr),e(oc,aTr),e(Qo,nTr),e(Qo,S$),e(S$,sTr),e(S$,eCe),e(eCe,lTr),e(S$,iTr),e(Qo,dTr),e(Qo,xt),M(R$,xt,null),e(xt,cTr),e(xt,oCe),e(oCe,mTr),e(xt,fTr),e(xt,rc),e(rc,gTr),e(rc,rCe),e(rCe,hTr),e(rc,uTr),e(rc,eK),e(eK,pTr),e(rc,_Tr),e(xt,bTr),M(T4,xt,null),e(Qo,vTr),e(Qo,fo),M(P$,fo,null),e(fo,FTr),e(fo,tCe),e(tCe,TTr),e(fo,MTr),e(fo,dn),e(dn,ETr),e(dn,aCe),e(aCe,CTr),e(dn,wTr),e(dn,nCe),e(nCe,ATr),e(dn,LTr),e(dn,sCe),e(sCe,yTr),e(dn,xTr),e(fo,$Tr),e(fo,be),e(be,M4),e(M4,lCe),e(lCe,kTr),e(M4,STr),e(M4,oK),e(oK,RTr),e(M4,PTr),e(be,BTr),e(be,E4),e(E4,iCe),e(iCe,ITr),e(E4,NTr),e(E4,rK),e(rK,qTr),e(E4,jTr),e(be,DTr),e(be,C4),e(C4,dCe),e(dCe,GTr),e(C4,OTr),e(C4,tK),e(tK,VTr),e(C4,XTr),e(be,zTr),e(be,w4),e(w4,cCe),e(cCe,QTr),e(w4,WTr),e(w4,aK),e(aK,UTr),e(w4,HTr),e(be,JTr),e(be,bl),e(bl,mCe),e(mCe,YTr),e(bl,KTr),e(bl,nK),e(nK,ZTr),e(bl,eMr),e(bl,sK),e(sK,oMr),e(bl,rMr),e(be,tMr),e(be,A4),e(A4,fCe),e(fCe,aMr),e(A4,nMr),e(A4,lK),e(lK,sMr),e(A4,lMr),e(be,iMr),e(be,vl),e(vl,gCe),e(gCe,dMr),e(vl,cMr),e(vl,iK),e(iK,mMr),e(vl,fMr),e(vl,dK),e(dK,gMr),e(vl,hMr),e(be,uMr),e(be,L4),e(L4,hCe),e(hCe,pMr),e(L4,_Mr),e(L4,cK),e(cK,bMr),e(L4,vMr),e(be,FMr),e(be,$t),e($t,uCe),e(uCe,TMr),e($t,MMr),e($t,mK),e(mK,EMr),e($t,CMr),e($t,fK),e(fK,wMr),e($t,AMr),e($t,gK),e(gK,LMr),e($t,yMr),e(be,xMr),e(be,y4),e(y4,pCe),e(pCe,$Mr),e(y4,kMr),e(y4,hK),e(hK,SMr),e(y4,RMr),e(be,PMr),e(be,x4),e(x4,_Ce),e(_Ce,BMr),e(x4,IMr),e(x4,uK),e(uK,NMr),e(x4,qMr),e(be,jMr),e(be,$4),e($4,bCe),e(bCe,DMr),e($4,GMr),e($4,pK),e(pK,OMr),e($4,VMr),e(be,XMr),e(be,k4),e(k4,vCe),e(vCe,zMr),e(k4,QMr),e(k4,_K),e(_K,WMr),e(k4,UMr),e(be,HMr),e(be,S4),e(S4,FCe),e(FCe,JMr),e(S4,YMr),e(S4,bK),e(bK,KMr),e(S4,ZMr),e(be,eEr),e(be,R4),e(R4,TCe),e(TCe,oEr),e(R4,rEr),e(R4,vK),e(vK,tEr),e(R4,aEr),e(be,nEr),e(be,P4),e(P4,MCe),e(MCe,sEr),e(P4,lEr),e(P4,FK),e(FK,iEr),e(P4,dEr),e(be,cEr),e(be,B4),e(B4,ECe),e(ECe,mEr),e(B4,fEr),e(B4,TK),e(TK,gEr),e(B4,hEr),e(be,uEr),e(be,I4),e(I4,CCe),e(CCe,pEr),e(I4,_Er),e(I4,MK),e(MK,bEr),e(I4,vEr),e(fo,FEr),e(fo,N4),e(N4,TEr),e(N4,wCe),e(wCe,MEr),e(N4,EEr),e(N4,ACe),e(ACe,CEr),e(fo,wEr),M(q4,fo,null),b(m,_eo,_),b(m,tc,_),e(tc,j4),e(j4,LCe),M(B$,LCe,null),e(tc,AEr),e(tc,yCe),e(yCe,LEr),b(m,beo,_),b(m,Wo,_),M(I$,Wo,null),e(Wo,yEr),e(Wo,ac),e(ac,xEr),e(ac,EK),e(EK,$Er),e(ac,kEr),e(ac,CK),e(CK,SEr),e(ac,REr),e(Wo,PEr),e(Wo,N$),e(N$,BEr),e(N$,xCe),e(xCe,IEr),e(N$,NEr),e(Wo,qEr),e(Wo,kt),M(q$,kt,null),e(kt,jEr),e(kt,$Ce),e($Ce,DEr),e(kt,GEr),e(kt,nc),e(nc,OEr),e(nc,kCe),e(kCe,VEr),e(nc,XEr),e(nc,wK),e(wK,zEr),e(nc,QEr),e(kt,WEr),M(D4,kt,null),e(Wo,UEr),e(Wo,go),M(j$,go,null),e(go,HEr),e(go,SCe),e(SCe,JEr),e(go,YEr),e(go,cn),e(cn,KEr),e(cn,RCe),e(RCe,ZEr),e(cn,e4r),e(cn,PCe),e(PCe,o4r),e(cn,r4r),e(cn,BCe),e(BCe,t4r),e(cn,a4r),e(go,n4r),e(go,ICe),e(ICe,G4),e(G4,NCe),e(NCe,s4r),e(G4,l4r),e(G4,AK),e(AK,i4r),e(G4,d4r),e(go,c4r),e(go,O4),e(O4,m4r),e(O4,qCe),e(qCe,f4r),e(O4,g4r),e(O4,jCe),e(jCe,h4r),e(go,u4r),M(V4,go,null),b(m,veo,_),b(m,sc,_),e(sc,X4),e(X4,DCe),M(D$,DCe,null),e(sc,p4r),e(sc,GCe),e(GCe,_4r),b(m,Feo,_),b(m,Uo,_),M(G$,Uo,null),e(Uo,b4r),e(Uo,lc),e(lc,v4r),e(lc,LK),e(LK,F4r),e(lc,T4r),e(lc,yK),e(yK,M4r),e(lc,E4r),e(Uo,C4r),e(Uo,O$),e(O$,w4r),e(O$,OCe),e(OCe,A4r),e(O$,L4r),e(Uo,y4r),e(Uo,St),M(V$,St,null),e(St,x4r),e(St,VCe),e(VCe,$4r),e(St,k4r),e(St,ic),e(ic,S4r),e(ic,XCe),e(XCe,R4r),e(ic,P4r),e(ic,xK),e(xK,B4r),e(ic,I4r),e(St,N4r),M(z4,St,null),e(Uo,q4r),e(Uo,ho),M(X$,ho,null),e(ho,j4r),e(ho,zCe),e(zCe,D4r),e(ho,G4r),e(ho,mn),e(mn,O4r),e(mn,QCe),e(QCe,V4r),e(mn,X4r),e(mn,WCe),e(WCe,z4r),e(mn,Q4r),e(mn,UCe),e(UCe,W4r),e(mn,U4r),e(ho,H4r),e(ho,HCe),e(HCe,Q4),e(Q4,JCe),e(JCe,J4r),e(Q4,Y4r),e(Q4,$K),e($K,K4r),e(Q4,Z4r),e(ho,eCr),e(ho,W4),e(W4,oCr),e(W4,YCe),e(YCe,rCr),e(W4,tCr),e(W4,KCe),e(KCe,aCr),e(ho,nCr),M(U4,ho,null),b(m,Teo,_),b(m,dc,_),e(dc,H4),e(H4,ZCe),M(z$,ZCe,null),e(dc,sCr),e(dc,e3e),e(e3e,lCr),b(m,Meo,_),b(m,Ho,_),M(Q$,Ho,null),e(Ho,iCr),e(Ho,cc),e(cc,dCr),e(cc,kK),e(kK,cCr),e(cc,mCr),e(cc,SK),e(SK,fCr),e(cc,gCr),e(Ho,hCr),e(Ho,W$),e(W$,uCr),e(W$,o3e),e(o3e,pCr),e(W$,_Cr),e(Ho,bCr),e(Ho,Rt),M(U$,Rt,null),e(Rt,vCr),e(Rt,r3e),e(r3e,FCr),e(Rt,TCr),e(Rt,mc),e(mc,MCr),e(mc,t3e),e(t3e,ECr),e(mc,CCr),e(mc,RK),e(RK,wCr),e(mc,ACr),e(Rt,LCr),M(J4,Rt,null),e(Ho,yCr),e(Ho,uo),M(H$,uo,null),e(uo,xCr),e(uo,a3e),e(a3e,$Cr),e(uo,kCr),e(uo,fn),e(fn,SCr),e(fn,n3e),e(n3e,RCr),e(fn,PCr),e(fn,s3e),e(s3e,BCr),e(fn,ICr),e(fn,l3e),e(l3e,NCr),e(fn,qCr),e(uo,jCr),e(uo,i3e),e(i3e,Y4),e(Y4,d3e),e(d3e,DCr),e(Y4,GCr),e(Y4,PK),e(PK,OCr),e(Y4,VCr),e(uo,XCr),e(uo,K4),e(K4,zCr),e(K4,c3e),e(c3e,QCr),e(K4,WCr),e(K4,m3e),e(m3e,UCr),e(uo,HCr),M(Z4,uo,null),b(m,Eeo,_),b(m,fc,_),e(fc,eC),e(eC,f3e),M(J$,f3e,null),e(fc,JCr),e(fc,g3e),e(g3e,YCr),b(m,Ceo,_),b(m,Jo,_),M(Y$,Jo,null),e(Jo,KCr),e(Jo,gc),e(gc,ZCr),e(gc,BK),e(BK,e3r),e(gc,o3r),e(gc,IK),e(IK,r3r),e(gc,t3r),e(Jo,a3r),e(Jo,K$),e(K$,n3r),e(K$,h3e),e(h3e,s3r),e(K$,l3r),e(Jo,i3r),e(Jo,Pt),M(Z$,Pt,null),e(Pt,d3r),e(Pt,u3e),e(u3e,c3r),e(Pt,m3r),e(Pt,hc),e(hc,f3r),e(hc,p3e),e(p3e,g3r),e(hc,h3r),e(hc,NK),e(NK,u3r),e(hc,p3r),e(Pt,_3r),M(oC,Pt,null),e(Jo,b3r),e(Jo,po),M(ek,po,null),e(po,v3r),e(po,_3e),e(_3e,F3r),e(po,T3r),e(po,gn),e(gn,M3r),e(gn,b3e),e(b3e,E3r),e(gn,C3r),e(gn,v3e),e(v3e,w3r),e(gn,A3r),e(gn,F3e),e(F3e,L3r),e(gn,y3r),e(po,x3r),e(po,Pe),e(Pe,rC),e(rC,T3e),e(T3e,$3r),e(rC,k3r),e(rC,qK),e(qK,S3r),e(rC,R3r),e(Pe,P3r),e(Pe,tC),e(tC,M3e),e(M3e,B3r),e(tC,I3r),e(tC,jK),e(jK,N3r),e(tC,q3r),e(Pe,j3r),e(Pe,aC),e(aC,E3e),e(E3e,D3r),e(aC,G3r),e(aC,DK),e(DK,O3r),e(aC,V3r),e(Pe,X3r),e(Pe,nC),e(nC,C3e),e(C3e,z3r),e(nC,Q3r),e(nC,GK),e(GK,W3r),e(nC,U3r),e(Pe,H3r),e(Pe,sC),e(sC,w3e),e(w3e,J3r),e(sC,Y3r),e(sC,OK),e(OK,K3r),e(sC,Z3r),e(Pe,e5r),e(Pe,lC),e(lC,A3e),e(A3e,o5r),e(lC,r5r),e(lC,VK),e(VK,t5r),e(lC,a5r),e(Pe,n5r),e(Pe,iC),e(iC,L3e),e(L3e,s5r),e(iC,l5r),e(iC,XK),e(XK,i5r),e(iC,d5r),e(Pe,c5r),e(Pe,dC),e(dC,y3e),e(y3e,m5r),e(dC,f5r),e(dC,zK),e(zK,g5r),e(dC,h5r),e(Pe,u5r),e(Pe,cC),e(cC,x3e),e(x3e,p5r),e(cC,_5r),e(cC,QK),e(QK,b5r),e(cC,v5r),e(po,F5r),e(po,mC),e(mC,T5r),e(mC,$3e),e($3e,M5r),e(mC,E5r),e(mC,k3e),e(k3e,C5r),e(po,w5r),M(fC,po,null),b(m,weo,_),b(m,uc,_),e(uc,gC),e(gC,S3e),M(ok,S3e,null),e(uc,A5r),e(uc,R3e),e(R3e,L5r),b(m,Aeo,_),b(m,Yo,_),M(rk,Yo,null),e(Yo,y5r),e(Yo,pc),e(pc,x5r),e(pc,WK),e(WK,$5r),e(pc,k5r),e(pc,UK),e(UK,S5r),e(pc,R5r),e(Yo,P5r),e(Yo,tk),e(tk,B5r),e(tk,P3e),e(P3e,I5r),e(tk,N5r),e(Yo,q5r),e(Yo,Bt),M(ak,Bt,null),e(Bt,j5r),e(Bt,B3e),e(B3e,D5r),e(Bt,G5r),e(Bt,_c),e(_c,O5r),e(_c,I3e),e(I3e,V5r),e(_c,X5r),e(_c,HK),e(HK,z5r),e(_c,Q5r),e(Bt,W5r),M(hC,Bt,null),e(Yo,U5r),e(Yo,_o),M(nk,_o,null),e(_o,H5r),e(_o,N3e),e(N3e,J5r),e(_o,Y5r),e(_o,hn),e(hn,K5r),e(hn,q3e),e(q3e,Z5r),e(hn,e0r),e(hn,j3e),e(j3e,o0r),e(hn,r0r),e(hn,D3e),e(D3e,t0r),e(hn,a0r),e(_o,n0r),e(_o,mt),e(mt,uC),e(uC,G3e),e(G3e,s0r),e(uC,l0r),e(uC,JK),e(JK,i0r),e(uC,d0r),e(mt,c0r),e(mt,pC),e(pC,O3e),e(O3e,m0r),e(pC,f0r),e(pC,YK),e(YK,g0r),e(pC,h0r),e(mt,u0r),e(mt,_C),e(_C,V3e),e(V3e,p0r),e(_C,_0r),e(_C,KK),e(KK,b0r),e(_C,v0r),e(mt,F0r),e(mt,bC),e(bC,X3e),e(X3e,T0r),e(bC,M0r),e(bC,ZK),e(ZK,E0r),e(bC,C0r),e(mt,w0r),e(mt,vC),e(vC,z3e),e(z3e,A0r),e(vC,L0r),e(vC,eZ),e(eZ,y0r),e(vC,x0r),e(_o,$0r),e(_o,FC),e(FC,k0r),e(FC,Q3e),e(Q3e,S0r),e(FC,R0r),e(FC,W3e),e(W3e,P0r),e(_o,B0r),M(TC,_o,null),b(m,Leo,_),b(m,bc,_),e(bc,MC),e(MC,U3e),M(sk,U3e,null),e(bc,I0r),e(bc,H3e),e(H3e,N0r),b(m,yeo,_),b(m,Ko,_),M(lk,Ko,null),e(Ko,q0r),e(Ko,vc),e(vc,j0r),e(vc,oZ),e(oZ,D0r),e(vc,G0r),e(vc,rZ),e(rZ,O0r),e(vc,V0r),e(Ko,X0r),e(Ko,ik),e(ik,z0r),e(ik,J3e),e(J3e,Q0r),e(ik,W0r),e(Ko,U0r),e(Ko,It),M(dk,It,null),e(It,H0r),e(It,Y3e),e(Y3e,J0r),e(It,Y0r),e(It,Fc),e(Fc,K0r),e(Fc,K3e),e(K3e,Z0r),e(Fc,ewr),e(Fc,tZ),e(tZ,owr),e(Fc,rwr),e(It,twr),M(EC,It,null),e(Ko,awr),e(Ko,bo),M(ck,bo,null),e(bo,nwr),e(bo,Z3e),e(Z3e,swr),e(bo,lwr),e(bo,un),e(un,iwr),e(un,e5e),e(e5e,dwr),e(un,cwr),e(un,o5e),e(o5e,mwr),e(un,fwr),e(un,r5e),e(r5e,gwr),e(un,hwr),e(bo,uwr),e(bo,Le),e(Le,CC),e(CC,t5e),e(t5e,pwr),e(CC,_wr),e(CC,aZ),e(aZ,bwr),e(CC,vwr),e(Le,Fwr),e(Le,wC),e(wC,a5e),e(a5e,Twr),e(wC,Mwr),e(wC,nZ),e(nZ,Ewr),e(wC,Cwr),e(Le,wwr),e(Le,AC),e(AC,n5e),e(n5e,Awr),e(AC,Lwr),e(AC,sZ),e(sZ,ywr),e(AC,xwr),e(Le,$wr),e(Le,LC),e(LC,s5e),e(s5e,kwr),e(LC,Swr),e(LC,lZ),e(lZ,Rwr),e(LC,Pwr),e(Le,Bwr),e(Le,yC),e(yC,l5e),e(l5e,Iwr),e(yC,Nwr),e(yC,iZ),e(iZ,qwr),e(yC,jwr),e(Le,Dwr),e(Le,xC),e(xC,i5e),e(i5e,Gwr),e(xC,Owr),e(xC,dZ),e(dZ,Vwr),e(xC,Xwr),e(Le,zwr),e(Le,$C),e($C,d5e),e(d5e,Qwr),e($C,Wwr),e($C,cZ),e(cZ,Uwr),e($C,Hwr),e(Le,Jwr),e(Le,kC),e(kC,c5e),e(c5e,Ywr),e(kC,Kwr),e(kC,mZ),e(mZ,Zwr),e(kC,eAr),e(Le,oAr),e(Le,SC),e(SC,m5e),e(m5e,rAr),e(SC,tAr),e(SC,fZ),e(fZ,aAr),e(SC,nAr),e(Le,sAr),e(Le,RC),e(RC,f5e),e(f5e,lAr),e(RC,iAr),e(RC,gZ),e(gZ,dAr),e(RC,cAr),e(bo,mAr),e(bo,PC),e(PC,fAr),e(PC,g5e),e(g5e,gAr),e(PC,hAr),e(PC,h5e),e(h5e,uAr),e(bo,pAr),M(BC,bo,null),b(m,xeo,_),b(m,Tc,_),e(Tc,IC),e(IC,u5e),M(mk,u5e,null),e(Tc,_Ar),e(Tc,p5e),e(p5e,bAr),b(m,$eo,_),b(m,Zo,_),M(fk,Zo,null),e(Zo,vAr),e(Zo,Mc),e(Mc,FAr),e(Mc,hZ),e(hZ,TAr),e(Mc,MAr),e(Mc,uZ),e(uZ,EAr),e(Mc,CAr),e(Zo,wAr),e(Zo,gk),e(gk,AAr),e(gk,_5e),e(_5e,LAr),e(gk,yAr),e(Zo,xAr),e(Zo,Nt),M(hk,Nt,null),e(Nt,$Ar),e(Nt,b5e),e(b5e,kAr),e(Nt,SAr),e(Nt,Ec),e(Ec,RAr),e(Ec,v5e),e(v5e,PAr),e(Ec,BAr),e(Ec,pZ),e(pZ,IAr),e(Ec,NAr),e(Nt,qAr),M(NC,Nt,null),e(Zo,jAr),e(Zo,vo),M(uk,vo,null),e(vo,DAr),e(vo,F5e),e(F5e,GAr),e(vo,OAr),e(vo,pn),e(pn,VAr),e(pn,T5e),e(T5e,XAr),e(pn,zAr),e(pn,M5e),e(M5e,QAr),e(pn,WAr),e(pn,E5e),e(E5e,UAr),e(pn,HAr),e(vo,JAr),e(vo,pk),e(pk,qC),e(qC,C5e),e(C5e,YAr),e(qC,KAr),e(qC,_Z),e(_Z,ZAr),e(qC,e6r),e(pk,o6r),e(pk,jC),e(jC,w5e),e(w5e,r6r),e(jC,t6r),e(jC,bZ),e(bZ,a6r),e(jC,n6r),e(vo,s6r),e(vo,DC),e(DC,l6r),e(DC,A5e),e(A5e,i6r),e(DC,d6r),e(DC,L5e),e(L5e,c6r),e(vo,m6r),M(GC,vo,null),b(m,keo,_),b(m,Cc,_),e(Cc,OC),e(OC,y5e),M(_k,y5e,null),e(Cc,f6r),e(Cc,x5e),e(x5e,g6r),b(m,Seo,_),b(m,er,_),M(bk,er,null),e(er,h6r),e(er,wc),e(wc,u6r),e(wc,vZ),e(vZ,p6r),e(wc,_6r),e(wc,FZ),e(FZ,b6r),e(wc,v6r),e(er,F6r),e(er,vk),e(vk,T6r),e(vk,$5e),e($5e,M6r),e(vk,E6r),e(er,C6r),e(er,qt),M(Fk,qt,null),e(qt,w6r),e(qt,k5e),e(k5e,A6r),e(qt,L6r),e(qt,Ac),e(Ac,y6r),e(Ac,S5e),e(S5e,x6r),e(Ac,$6r),e(Ac,TZ),e(TZ,k6r),e(Ac,S6r),e(qt,R6r),M(VC,qt,null),e(er,P6r),e(er,Fo),M(Tk,Fo,null),e(Fo,B6r),e(Fo,R5e),e(R5e,I6r),e(Fo,N6r),e(Fo,_n),e(_n,q6r),e(_n,P5e),e(P5e,j6r),e(_n,D6r),e(_n,B5e),e(B5e,G6r),e(_n,O6r),e(_n,I5e),e(I5e,V6r),e(_n,X6r),e(Fo,z6r),e(Fo,ft),e(ft,XC),e(XC,N5e),e(N5e,Q6r),e(XC,W6r),e(XC,MZ),e(MZ,U6r),e(XC,H6r),e(ft,J6r),e(ft,zC),e(zC,q5e),e(q5e,Y6r),e(zC,K6r),e(zC,EZ),e(EZ,Z6r),e(zC,e7r),e(ft,o7r),e(ft,QC),e(QC,j5e),e(j5e,r7r),e(QC,t7r),e(QC,CZ),e(CZ,a7r),e(QC,n7r),e(ft,s7r),e(ft,WC),e(WC,D5e),e(D5e,l7r),e(WC,i7r),e(WC,wZ),e(wZ,d7r),e(WC,c7r),e(ft,m7r),e(ft,UC),e(UC,G5e),e(G5e,f7r),e(UC,g7r),e(UC,AZ),e(AZ,h7r),e(UC,u7r),e(Fo,p7r),e(Fo,HC),e(HC,_7r),e(HC,O5e),e(O5e,b7r),e(HC,v7r),e(HC,V5e),e(V5e,F7r),e(Fo,T7r),M(JC,Fo,null),b(m,Reo,_),b(m,Lc,_),e(Lc,YC),e(YC,X5e),M(Mk,X5e,null),e(Lc,M7r),e(Lc,z5e),e(z5e,E7r),b(m,Peo,_),b(m,or,_),M(Ek,or,null),e(or,C7r),e(or,yc),e(yc,w7r),e(yc,LZ),e(LZ,A7r),e(yc,L7r),e(yc,yZ),e(yZ,y7r),e(yc,x7r),e(or,$7r),e(or,Ck),e(Ck,k7r),e(Ck,Q5e),e(Q5e,S7r),e(Ck,R7r),e(or,P7r),e(or,jt),M(wk,jt,null),e(jt,B7r),e(jt,W5e),e(W5e,I7r),e(jt,N7r),e(jt,xc),e(xc,q7r),e(xc,U5e),e(U5e,j7r),e(xc,D7r),e(xc,xZ),e(xZ,G7r),e(xc,O7r),e(jt,V7r),M(KC,jt,null),e(or,X7r),e(or,To),M(Ak,To,null),e(To,z7r),e(To,H5e),e(H5e,Q7r),e(To,W7r),e(To,bn),e(bn,U7r),e(bn,J5e),e(J5e,H7r),e(bn,J7r),e(bn,Y5e),e(Y5e,Y7r),e(bn,K7r),e(bn,K5e),e(K5e,Z7r),e(bn,eLr),e(To,oLr),e(To,vn),e(vn,ZC),e(ZC,Z5e),e(Z5e,rLr),e(ZC,tLr),e(ZC,$Z),e($Z,aLr),e(ZC,nLr),e(vn,sLr),e(vn,e3),e(e3,e0e),e(e0e,lLr),e(e3,iLr),e(e3,kZ),e(kZ,dLr),e(e3,cLr),e(vn,mLr),e(vn,o3),e(o3,o0e),e(o0e,fLr),e(o3,gLr),e(o3,SZ),e(SZ,hLr),e(o3,uLr),e(vn,pLr),e(vn,r3),e(r3,r0e),e(r0e,_Lr),e(r3,bLr),e(r3,RZ),e(RZ,vLr),e(r3,FLr),e(To,TLr),e(To,t3),e(t3,MLr),e(t3,t0e),e(t0e,ELr),e(t3,CLr),e(t3,a0e),e(a0e,wLr),e(To,ALr),M(a3,To,null),b(m,Beo,_),b(m,$c,_),e($c,n3),e(n3,n0e),M(Lk,n0e,null),e($c,LLr),e($c,s0e),e(s0e,yLr),b(m,Ieo,_),b(m,rr,_),M(yk,rr,null),e(rr,xLr),e(rr,kc),e(kc,$Lr),e(kc,PZ),e(PZ,kLr),e(kc,SLr),e(kc,BZ),e(BZ,RLr),e(kc,PLr),e(rr,BLr),e(rr,xk),e(xk,ILr),e(xk,l0e),e(l0e,NLr),e(xk,qLr),e(rr,jLr),e(rr,Dt),M($k,Dt,null),e(Dt,DLr),e(Dt,i0e),e(i0e,GLr),e(Dt,OLr),e(Dt,Sc),e(Sc,VLr),e(Sc,d0e),e(d0e,XLr),e(Sc,zLr),e(Sc,IZ),e(IZ,QLr),e(Sc,WLr),e(Dt,ULr),M(s3,Dt,null),e(rr,HLr),e(rr,Mo),M(kk,Mo,null),e(Mo,JLr),e(Mo,c0e),e(c0e,YLr),e(Mo,KLr),e(Mo,Fn),e(Fn,ZLr),e(Fn,m0e),e(m0e,eyr),e(Fn,oyr),e(Fn,f0e),e(f0e,ryr),e(Fn,tyr),e(Fn,g0e),e(g0e,ayr),e(Fn,nyr),e(Mo,syr),e(Mo,Tn),e(Tn,l3),e(l3,h0e),e(h0e,lyr),e(l3,iyr),e(l3,NZ),e(NZ,dyr),e(l3,cyr),e(Tn,myr),e(Tn,i3),e(i3,u0e),e(u0e,fyr),e(i3,gyr),e(i3,qZ),e(qZ,hyr),e(i3,uyr),e(Tn,pyr),e(Tn,d3),e(d3,p0e),e(p0e,_yr),e(d3,byr),e(d3,jZ),e(jZ,vyr),e(d3,Fyr),e(Tn,Tyr),e(Tn,c3),e(c3,_0e),e(_0e,Myr),e(c3,Eyr),e(c3,DZ),e(DZ,Cyr),e(c3,wyr),e(Mo,Ayr),e(Mo,m3),e(m3,Lyr),e(m3,b0e),e(b0e,yyr),e(m3,xyr),e(m3,v0e),e(v0e,$yr),e(Mo,kyr),M(f3,Mo,null),b(m,Neo,_),b(m,Rc,_),e(Rc,g3),e(g3,F0e),M(Sk,F0e,null),e(Rc,Syr),e(Rc,T0e),e(T0e,Ryr),b(m,qeo,_),b(m,tr,_),M(Rk,tr,null),e(tr,Pyr),e(tr,Pc),e(Pc,Byr),e(Pc,GZ),e(GZ,Iyr),e(Pc,Nyr),e(Pc,OZ),e(OZ,qyr),e(Pc,jyr),e(tr,Dyr),e(tr,Pk),e(Pk,Gyr),e(Pk,M0e),e(M0e,Oyr),e(Pk,Vyr),e(tr,Xyr),e(tr,Gt),M(Bk,Gt,null),e(Gt,zyr),e(Gt,E0e),e(E0e,Qyr),e(Gt,Wyr),e(Gt,Bc),e(Bc,Uyr),e(Bc,C0e),e(C0e,Hyr),e(Bc,Jyr),e(Bc,VZ),e(VZ,Yyr),e(Bc,Kyr),e(Gt,Zyr),M(h3,Gt,null),e(tr,e8r),e(tr,Eo),M(Ik,Eo,null),e(Eo,o8r),e(Eo,w0e),e(w0e,r8r),e(Eo,t8r),e(Eo,Mn),e(Mn,a8r),e(Mn,A0e),e(A0e,n8r),e(Mn,s8r),e(Mn,L0e),e(L0e,l8r),e(Mn,i8r),e(Mn,y0e),e(y0e,d8r),e(Mn,c8r),e(Eo,m8r),e(Eo,x0e),e(x0e,u3),e(u3,$0e),e($0e,f8r),e(u3,g8r),e(u3,XZ),e(XZ,h8r),e(u3,u8r),e(Eo,p8r),e(Eo,p3),e(p3,_8r),e(p3,k0e),e(k0e,b8r),e(p3,v8r),e(p3,S0e),e(S0e,F8r),e(Eo,T8r),M(_3,Eo,null),b(m,jeo,_),b(m,Ic,_),e(Ic,b3),e(b3,R0e),M(Nk,R0e,null),e(Ic,M8r),e(Ic,P0e),e(P0e,E8r),b(m,Deo,_),b(m,ar,_),M(qk,ar,null),e(ar,C8r),e(ar,Nc),e(Nc,w8r),e(Nc,zZ),e(zZ,A8r),e(Nc,L8r),e(Nc,QZ),e(QZ,y8r),e(Nc,x8r),e(ar,$8r),e(ar,jk),e(jk,k8r),e(jk,B0e),e(B0e,S8r),e(jk,R8r),e(ar,P8r),e(ar,Ot),M(Dk,Ot,null),e(Ot,B8r),e(Ot,I0e),e(I0e,I8r),e(Ot,N8r),e(Ot,qc),e(qc,q8r),e(qc,N0e),e(N0e,j8r),e(qc,D8r),e(qc,WZ),e(WZ,G8r),e(qc,O8r),e(Ot,V8r),M(v3,Ot,null),e(ar,X8r),e(ar,Co),M(Gk,Co,null),e(Co,z8r),e(Co,q0e),e(q0e,Q8r),e(Co,W8r),e(Co,En),e(En,U8r),e(En,j0e),e(j0e,H8r),e(En,J8r),e(En,D0e),e(D0e,Y8r),e(En,K8r),e(En,G0e),e(G0e,Z8r),e(En,e9r),e(Co,o9r),e(Co,gt),e(gt,F3),e(F3,O0e),e(O0e,r9r),e(F3,t9r),e(F3,UZ),e(UZ,a9r),e(F3,n9r),e(gt,s9r),e(gt,T3),e(T3,V0e),e(V0e,l9r),e(T3,i9r),e(T3,HZ),e(HZ,d9r),e(T3,c9r),e(gt,m9r),e(gt,M3),e(M3,X0e),e(X0e,f9r),e(M3,g9r),e(M3,JZ),e(JZ,h9r),e(M3,u9r),e(gt,p9r),e(gt,E3),e(E3,z0e),e(z0e,_9r),e(E3,b9r),e(E3,YZ),e(YZ,v9r),e(E3,F9r),e(gt,T9r),e(gt,C3),e(C3,Q0e),e(Q0e,M9r),e(C3,E9r),e(C3,KZ),e(KZ,C9r),e(C3,w9r),e(Co,A9r),e(Co,w3),e(w3,L9r),e(w3,W0e),e(W0e,y9r),e(w3,x9r),e(w3,U0e),e(U0e,$9r),e(Co,k9r),M(A3,Co,null),b(m,Geo,_),b(m,jc,_),e(jc,L3),e(L3,H0e),M(Ok,H0e,null),e(jc,S9r),e(jc,J0e),e(J0e,R9r),b(m,Oeo,_),b(m,nr,_),M(Vk,nr,null),e(nr,P9r),e(nr,Dc),e(Dc,B9r),e(Dc,ZZ),e(ZZ,I9r),e(Dc,N9r),e(Dc,eee),e(eee,q9r),e(Dc,j9r),e(nr,D9r),e(nr,Xk),e(Xk,G9r),e(Xk,Y0e),e(Y0e,O9r),e(Xk,V9r),e(nr,X9r),e(nr,Vt),M(zk,Vt,null),e(Vt,z9r),e(Vt,K0e),e(K0e,Q9r),e(Vt,W9r),e(Vt,Gc),e(Gc,U9r),e(Gc,Z0e),e(Z0e,H9r),e(Gc,J9r),e(Gc,oee),e(oee,Y9r),e(Gc,K9r),e(Vt,Z9r),M(y3,Vt,null),e(nr,exr),e(nr,wo),M(Qk,wo,null),e(wo,oxr),e(wo,ewe),e(ewe,rxr),e(wo,txr),e(wo,Cn),e(Cn,axr),e(Cn,owe),e(owe,nxr),e(Cn,sxr),e(Cn,rwe),e(rwe,lxr),e(Cn,ixr),e(Cn,twe),e(twe,dxr),e(Cn,cxr),e(wo,mxr),e(wo,awe),e(awe,x3),e(x3,nwe),e(nwe,fxr),e(x3,gxr),e(x3,ree),e(ree,hxr),e(x3,uxr),e(wo,pxr),e(wo,$3),e($3,_xr),e($3,swe),e(swe,bxr),e($3,vxr),e($3,lwe),e(lwe,Fxr),e(wo,Txr),M(k3,wo,null),b(m,Veo,_),b(m,Oc,_),e(Oc,S3),e(S3,iwe),M(Wk,iwe,null),e(Oc,Mxr),e(Oc,dwe),e(dwe,Exr),b(m,Xeo,_),b(m,sr,_),M(Uk,sr,null),e(sr,Cxr),e(sr,Vc),e(Vc,wxr),e(Vc,tee),e(tee,Axr),e(Vc,Lxr),e(Vc,aee),e(aee,yxr),e(Vc,xxr),e(sr,$xr),e(sr,Hk),e(Hk,kxr),e(Hk,cwe),e(cwe,Sxr),e(Hk,Rxr),e(sr,Pxr),e(sr,Xt),M(Jk,Xt,null),e(Xt,Bxr),e(Xt,mwe),e(mwe,Ixr),e(Xt,Nxr),e(Xt,Xc),e(Xc,qxr),e(Xc,fwe),e(fwe,jxr),e(Xc,Dxr),e(Xc,nee),e(nee,Gxr),e(Xc,Oxr),e(Xt,Vxr),M(R3,Xt,null),e(sr,Xxr),e(sr,Ir),M(Yk,Ir,null),e(Ir,zxr),e(Ir,gwe),e(gwe,Qxr),e(Ir,Wxr),e(Ir,wn),e(wn,Uxr),e(wn,hwe),e(hwe,Hxr),e(wn,Jxr),e(wn,uwe),e(uwe,Yxr),e(wn,Kxr),e(wn,pwe),e(pwe,Zxr),e(wn,e$r),e(Ir,o$r),e(Ir,I),e(I,P3),e(P3,_we),e(_we,r$r),e(P3,t$r),e(P3,see),e(see,a$r),e(P3,n$r),e(I,s$r),e(I,B3),e(B3,bwe),e(bwe,l$r),e(B3,i$r),e(B3,lee),e(lee,d$r),e(B3,c$r),e(I,m$r),e(I,I3),e(I3,vwe),e(vwe,f$r),e(I3,g$r),e(I3,iee),e(iee,h$r),e(I3,u$r),e(I,p$r),e(I,N3),e(N3,Fwe),e(Fwe,_$r),e(N3,b$r),e(N3,dee),e(dee,v$r),e(N3,F$r),e(I,T$r),e(I,q3),e(q3,Twe),e(Twe,M$r),e(q3,E$r),e(q3,cee),e(cee,C$r),e(q3,w$r),e(I,A$r),e(I,j3),e(j3,Mwe),e(Mwe,L$r),e(j3,y$r),e(j3,mee),e(mee,x$r),e(j3,$$r),e(I,k$r),e(I,D3),e(D3,Ewe),e(Ewe,S$r),e(D3,R$r),e(D3,fee),e(fee,P$r),e(D3,B$r),e(I,I$r),e(I,G3),e(G3,Cwe),e(Cwe,N$r),e(G3,q$r),e(G3,gee),e(gee,j$r),e(G3,D$r),e(I,G$r),e(I,O3),e(O3,wwe),e(wwe,O$r),e(O3,V$r),e(O3,hee),e(hee,X$r),e(O3,z$r),e(I,Q$r),e(I,V3),e(V3,Awe),e(Awe,W$r),e(V3,U$r),e(V3,uee),e(uee,H$r),e(V3,J$r),e(I,Y$r),e(I,X3),e(X3,Lwe),e(Lwe,K$r),e(X3,Z$r),e(X3,pee),e(pee,ekr),e(X3,okr),e(I,rkr),e(I,z3),e(z3,ywe),e(ywe,tkr),e(z3,akr),e(z3,_ee),e(_ee,nkr),e(z3,skr),e(I,lkr),e(I,Q3),e(Q3,xwe),e(xwe,ikr),e(Q3,dkr),e(Q3,bee),e(bee,ckr),e(Q3,mkr),e(I,fkr),e(I,W3),e(W3,$we),e($we,gkr),e(W3,hkr),e(W3,vee),e(vee,ukr),e(W3,pkr),e(I,_kr),e(I,U3),e(U3,kwe),e(kwe,bkr),e(U3,vkr),e(U3,Fee),e(Fee,Fkr),e(U3,Tkr),e(I,Mkr),e(I,H3),e(H3,Swe),e(Swe,Ekr),e(H3,Ckr),e(H3,Tee),e(Tee,wkr),e(H3,Akr),e(I,Lkr),e(I,J3),e(J3,Rwe),e(Rwe,ykr),e(J3,xkr),e(J3,Mee),e(Mee,$kr),e(J3,kkr),e(I,Skr),e(I,Y3),e(Y3,Pwe),e(Pwe,Rkr),e(Y3,Pkr),e(Y3,Eee),e(Eee,Bkr),e(Y3,Ikr),e(I,Nkr),e(I,Fl),e(Fl,Bwe),e(Bwe,qkr),e(Fl,jkr),e(Fl,Cee),e(Cee,Dkr),e(Fl,Gkr),e(Fl,wee),e(wee,Okr),e(Fl,Vkr),e(I,Xkr),e(I,K3),e(K3,Iwe),e(Iwe,zkr),e(K3,Qkr),e(K3,Aee),e(Aee,Wkr),e(K3,Ukr),e(I,Hkr),e(I,Z3),e(Z3,Nwe),e(Nwe,Jkr),e(Z3,Ykr),e(Z3,Lee),e(Lee,Kkr),e(Z3,Zkr),e(I,eSr),e(I,e5),e(e5,qwe),e(qwe,oSr),e(e5,rSr),e(e5,yee),e(yee,tSr),e(e5,aSr),e(I,nSr),e(I,o5),e(o5,jwe),e(jwe,sSr),e(o5,lSr),e(o5,xee),e(xee,iSr),e(o5,dSr),e(I,cSr),e(I,r5),e(r5,Dwe),e(Dwe,mSr),e(r5,fSr),e(r5,$ee),e($ee,gSr),e(r5,hSr),e(I,uSr),e(I,t5),e(t5,Gwe),e(Gwe,pSr),e(t5,_Sr),e(t5,kee),e(kee,bSr),e(t5,vSr),e(I,FSr),e(I,a5),e(a5,Owe),e(Owe,TSr),e(a5,MSr),e(a5,See),e(See,ESr),e(a5,CSr),e(I,wSr),e(I,n5),e(n5,Vwe),e(Vwe,ASr),e(n5,LSr),e(n5,Ree),e(Ree,ySr),e(n5,xSr),e(I,$Sr),e(I,s5),e(s5,Xwe),e(Xwe,kSr),e(s5,SSr),e(s5,Pee),e(Pee,RSr),e(s5,PSr),e(I,BSr),e(I,l5),e(l5,zwe),e(zwe,ISr),e(l5,NSr),e(l5,Bee),e(Bee,qSr),e(l5,jSr),e(I,DSr),e(I,i5),e(i5,Qwe),e(Qwe,GSr),e(i5,OSr),e(i5,Iee),e(Iee,VSr),e(i5,XSr),e(I,zSr),e(I,d5),e(d5,Wwe),e(Wwe,QSr),e(d5,WSr),e(d5,Nee),e(Nee,USr),e(d5,HSr),e(I,JSr),e(I,c5),e(c5,Uwe),e(Uwe,YSr),e(c5,KSr),e(c5,qee),e(qee,ZSr),e(c5,eRr),e(I,oRr),e(I,m5),e(m5,Hwe),e(Hwe,rRr),e(m5,tRr),e(m5,jee),e(jee,aRr),e(m5,nRr),e(I,sRr),e(I,f5),e(f5,Jwe),e(Jwe,lRr),e(f5,iRr),e(f5,Dee),e(Dee,dRr),e(f5,cRr),e(I,mRr),e(I,g5),e(g5,Ywe),e(Ywe,fRr),e(g5,gRr),e(g5,Gee),e(Gee,hRr),e(g5,uRr),e(I,pRr),e(I,h5),e(h5,Kwe),e(Kwe,_Rr),e(h5,bRr),e(h5,Oee),e(Oee,vRr),e(h5,FRr),e(I,TRr),e(I,u5),e(u5,Zwe),e(Zwe,MRr),e(u5,ERr),e(u5,Vee),e(Vee,CRr),e(u5,wRr),e(I,ARr),e(I,p5),e(p5,eAe),e(eAe,LRr),e(p5,yRr),e(p5,Xee),e(Xee,xRr),e(p5,$Rr),e(I,kRr),e(I,_5),e(_5,oAe),e(oAe,SRr),e(_5,RRr),e(_5,zee),e(zee,PRr),e(_5,BRr),e(I,IRr),e(I,b5),e(b5,rAe),e(rAe,NRr),e(b5,qRr),e(b5,Qee),e(Qee,jRr),e(b5,DRr),e(I,GRr),e(I,v5),e(v5,tAe),e(tAe,ORr),e(v5,VRr),e(v5,Wee),e(Wee,XRr),e(v5,zRr),e(I,QRr),e(I,F5),e(F5,aAe),e(aAe,WRr),e(F5,URr),e(F5,Uee),e(Uee,HRr),e(F5,JRr),e(I,YRr),e(I,T5),e(T5,nAe),e(nAe,KRr),e(T5,ZRr),e(T5,Hee),e(Hee,ePr),e(T5,oPr),e(I,rPr),e(I,M5),e(M5,sAe),e(sAe,tPr),e(M5,aPr),e(M5,Jee),e(Jee,nPr),e(M5,sPr),e(I,lPr),e(I,E5),e(E5,lAe),e(lAe,iPr),e(E5,dPr),e(E5,Yee),e(Yee,cPr),e(E5,mPr),e(I,fPr),e(I,C5),e(C5,iAe),e(iAe,gPr),e(C5,hPr),e(C5,Kee),e(Kee,uPr),e(C5,pPr),e(I,_Pr),e(I,w5),e(w5,dAe),e(dAe,bPr),e(w5,vPr),e(w5,Zee),e(Zee,FPr),e(w5,TPr),e(I,MPr),e(I,A5),e(A5,cAe),e(cAe,EPr),e(A5,CPr),e(A5,eoe),e(eoe,wPr),e(A5,APr),e(I,LPr),e(I,L5),e(L5,mAe),e(mAe,yPr),e(L5,xPr),e(L5,ooe),e(ooe,$Pr),e(L5,kPr),e(I,SPr),e(I,y5),e(y5,fAe),e(fAe,RPr),e(y5,PPr),e(y5,roe),e(roe,BPr),e(y5,IPr),e(I,NPr),e(I,x5),e(x5,gAe),e(gAe,qPr),e(x5,jPr),e(x5,toe),e(toe,DPr),e(x5,GPr),e(I,OPr),e(I,$5),e($5,hAe),e(hAe,VPr),e($5,XPr),e($5,aoe),e(aoe,zPr),e($5,QPr),e(I,WPr),e(I,k5),e(k5,uAe),e(uAe,UPr),e(k5,HPr),e(k5,noe),e(noe,JPr),e(k5,YPr),e(I,KPr),e(I,S5),e(S5,pAe),e(pAe,ZPr),e(S5,eBr),e(S5,soe),e(soe,oBr),e(S5,rBr),e(I,tBr),e(I,R5),e(R5,_Ae),e(_Ae,aBr),e(R5,nBr),e(R5,loe),e(loe,sBr),e(R5,lBr),e(Ir,iBr),M(P5,Ir,null),b(m,zeo,_),b(m,zc,_),e(zc,B5),e(B5,bAe),M(Kk,bAe,null),e(zc,dBr),e(zc,vAe),e(vAe,cBr),b(m,Qeo,_),b(m,lr,_),M(Zk,lr,null),e(lr,mBr),e(lr,Qc),e(Qc,fBr),e(Qc,ioe),e(ioe,gBr),e(Qc,hBr),e(Qc,doe),e(doe,uBr),e(Qc,pBr),e(lr,_Br),e(lr,eS),e(eS,bBr),e(eS,FAe),e(FAe,vBr),e(eS,FBr),e(lr,TBr),e(lr,zt),M(oS,zt,null),e(zt,MBr),e(zt,TAe),e(TAe,EBr),e(zt,CBr),e(zt,Wc),e(Wc,wBr),e(Wc,MAe),e(MAe,ABr),e(Wc,LBr),e(Wc,coe),e(coe,yBr),e(Wc,xBr),e(zt,$Br),M(I5,zt,null),e(lr,kBr),e(lr,Nr),M(rS,Nr,null),e(Nr,SBr),e(Nr,EAe),e(EAe,RBr),e(Nr,PBr),e(Nr,An),e(An,BBr),e(An,CAe),e(CAe,IBr),e(An,NBr),e(An,wAe),e(wAe,qBr),e(An,jBr),e(An,AAe),e(AAe,DBr),e(An,GBr),e(Nr,OBr),e(Nr,se),e(se,N5),e(N5,LAe),e(LAe,VBr),e(N5,XBr),e(N5,moe),e(moe,zBr),e(N5,QBr),e(se,WBr),e(se,q5),e(q5,yAe),e(yAe,UBr),e(q5,HBr),e(q5,foe),e(foe,JBr),e(q5,YBr),e(se,KBr),e(se,j5),e(j5,xAe),e(xAe,ZBr),e(j5,eIr),e(j5,goe),e(goe,oIr),e(j5,rIr),e(se,tIr),e(se,D5),e(D5,$Ae),e($Ae,aIr),e(D5,nIr),e(D5,hoe),e(hoe,sIr),e(D5,lIr),e(se,iIr),e(se,G5),e(G5,kAe),e(kAe,dIr),e(G5,cIr),e(G5,uoe),e(uoe,mIr),e(G5,fIr),e(se,gIr),e(se,O5),e(O5,SAe),e(SAe,hIr),e(O5,uIr),e(O5,poe),e(poe,pIr),e(O5,_Ir),e(se,bIr),e(se,V5),e(V5,RAe),e(RAe,vIr),e(V5,FIr),e(V5,_oe),e(_oe,TIr),e(V5,MIr),e(se,EIr),e(se,X5),e(X5,PAe),e(PAe,CIr),e(X5,wIr),e(X5,boe),e(boe,AIr),e(X5,LIr),e(se,yIr),e(se,z5),e(z5,BAe),e(BAe,xIr),e(z5,$Ir),e(z5,voe),e(voe,kIr),e(z5,SIr),e(se,RIr),e(se,Q5),e(Q5,IAe),e(IAe,PIr),e(Q5,BIr),e(Q5,Foe),e(Foe,IIr),e(Q5,NIr),e(se,qIr),e(se,W5),e(W5,NAe),e(NAe,jIr),e(W5,DIr),e(W5,Toe),e(Toe,GIr),e(W5,OIr),e(se,VIr),e(se,U5),e(U5,qAe),e(qAe,XIr),e(U5,zIr),e(U5,Moe),e(Moe,QIr),e(U5,WIr),e(se,UIr),e(se,H5),e(H5,jAe),e(jAe,HIr),e(H5,JIr),e(H5,Eoe),e(Eoe,YIr),e(H5,KIr),e(se,ZIr),e(se,J5),e(J5,DAe),e(DAe,eNr),e(J5,oNr),e(J5,Coe),e(Coe,rNr),e(J5,tNr),e(se,aNr),e(se,Y5),e(Y5,GAe),e(GAe,nNr),e(Y5,sNr),e(Y5,woe),e(woe,lNr),e(Y5,iNr),e(se,dNr),e(se,K5),e(K5,OAe),e(OAe,cNr),e(K5,mNr),e(K5,Aoe),e(Aoe,fNr),e(K5,gNr),e(se,hNr),e(se,Z5),e(Z5,VAe),e(VAe,uNr),e(Z5,pNr),e(Z5,Loe),e(Loe,_Nr),e(Z5,bNr),e(se,vNr),e(se,e0),e(e0,XAe),e(XAe,FNr),e(e0,TNr),e(e0,yoe),e(yoe,MNr),e(e0,ENr),e(se,CNr),e(se,o0),e(o0,zAe),e(zAe,wNr),e(o0,ANr),e(o0,xoe),e(xoe,LNr),e(o0,yNr),e(se,xNr),e(se,r0),e(r0,QAe),e(QAe,$Nr),e(r0,kNr),e(r0,$oe),e($oe,SNr),e(r0,RNr),e(se,PNr),e(se,t0),e(t0,WAe),e(WAe,BNr),e(t0,INr),e(t0,koe),e(koe,NNr),e(t0,qNr),e(se,jNr),e(se,a0),e(a0,UAe),e(UAe,DNr),e(a0,GNr),e(a0,Soe),e(Soe,ONr),e(a0,VNr),e(se,XNr),e(se,n0),e(n0,HAe),e(HAe,zNr),e(n0,QNr),e(n0,Roe),e(Roe,WNr),e(n0,UNr),e(Nr,HNr),M(s0,Nr,null),b(m,Weo,_),b(m,Uc,_),e(Uc,l0),e(l0,JAe),M(tS,JAe,null),e(Uc,JNr),e(Uc,YAe),e(YAe,YNr),b(m,Ueo,_),b(m,ir,_),M(aS,ir,null),e(ir,KNr),e(ir,Hc),e(Hc,ZNr),e(Hc,Poe),e(Poe,eqr),e(Hc,oqr),e(Hc,Boe),e(Boe,rqr),e(Hc,tqr),e(ir,aqr),e(ir,nS),e(nS,nqr),e(nS,KAe),e(KAe,sqr),e(nS,lqr),e(ir,iqr),e(ir,Qt),M(sS,Qt,null),e(Qt,dqr),e(Qt,ZAe),e(ZAe,cqr),e(Qt,mqr),e(Qt,Jc),e(Jc,fqr),e(Jc,e6e),e(e6e,gqr),e(Jc,hqr),e(Jc,Ioe),e(Ioe,uqr),e(Jc,pqr),e(Qt,_qr),M(i0,Qt,null),e(ir,bqr),e(ir,qr),M(lS,qr,null),e(qr,vqr),e(qr,o6e),e(o6e,Fqr),e(qr,Tqr),e(qr,Ln),e(Ln,Mqr),e(Ln,r6e),e(r6e,Eqr),e(Ln,Cqr),e(Ln,t6e),e(t6e,wqr),e(Ln,Aqr),e(Ln,a6e),e(a6e,Lqr),e(Ln,yqr),e(qr,xqr),e(qr,Me),e(Me,d0),e(d0,n6e),e(n6e,$qr),e(d0,kqr),e(d0,Noe),e(Noe,Sqr),e(d0,Rqr),e(Me,Pqr),e(Me,c0),e(c0,s6e),e(s6e,Bqr),e(c0,Iqr),e(c0,qoe),e(qoe,Nqr),e(c0,qqr),e(Me,jqr),e(Me,m0),e(m0,l6e),e(l6e,Dqr),e(m0,Gqr),e(m0,joe),e(joe,Oqr),e(m0,Vqr),e(Me,Xqr),e(Me,f0),e(f0,i6e),e(i6e,zqr),e(f0,Qqr),e(f0,Doe),e(Doe,Wqr),e(f0,Uqr),e(Me,Hqr),e(Me,g0),e(g0,d6e),e(d6e,Jqr),e(g0,Yqr),e(g0,Goe),e(Goe,Kqr),e(g0,Zqr),e(Me,ejr),e(Me,h0),e(h0,c6e),e(c6e,ojr),e(h0,rjr),e(h0,Ooe),e(Ooe,tjr),e(h0,ajr),e(Me,njr),e(Me,u0),e(u0,m6e),e(m6e,sjr),e(u0,ljr),e(u0,Voe),e(Voe,ijr),e(u0,djr),e(Me,cjr),e(Me,p0),e(p0,f6e),e(f6e,mjr),e(p0,fjr),e(p0,Xoe),e(Xoe,gjr),e(p0,hjr),e(Me,ujr),e(Me,_0),e(_0,g6e),e(g6e,pjr),e(_0,_jr),e(_0,zoe),e(zoe,bjr),e(_0,vjr),e(Me,Fjr),e(Me,b0),e(b0,h6e),e(h6e,Tjr),e(b0,Mjr),e(b0,Qoe),e(Qoe,Ejr),e(b0,Cjr),e(Me,wjr),e(Me,v0),e(v0,u6e),e(u6e,Ajr),e(v0,Ljr),e(v0,Woe),e(Woe,yjr),e(v0,xjr),e(Me,$jr),e(Me,F0),e(F0,p6e),e(p6e,kjr),e(F0,Sjr),e(F0,Uoe),e(Uoe,Rjr),e(F0,Pjr),e(Me,Bjr),e(Me,T0),e(T0,_6e),e(_6e,Ijr),e(T0,Njr),e(T0,Hoe),e(Hoe,qjr),e(T0,jjr),e(Me,Djr),e(Me,M0),e(M0,b6e),e(b6e,Gjr),e(M0,Ojr),e(M0,Joe),e(Joe,Vjr),e(M0,Xjr),e(qr,zjr),M(E0,qr,null),b(m,Heo,_),b(m,Yc,_),e(Yc,C0),e(C0,v6e),M(iS,v6e,null),e(Yc,Qjr),e(Yc,F6e),e(F6e,Wjr),b(m,Jeo,_),b(m,dr,_),M(dS,dr,null),e(dr,Ujr),e(dr,Kc),e(Kc,Hjr),e(Kc,Yoe),e(Yoe,Jjr),e(Kc,Yjr),e(Kc,Koe),e(Koe,Kjr),e(Kc,Zjr),e(dr,eDr),e(dr,cS),e(cS,oDr),e(cS,T6e),e(T6e,rDr),e(cS,tDr),e(dr,aDr),e(dr,Wt),M(mS,Wt,null),e(Wt,nDr),e(Wt,M6e),e(M6e,sDr),e(Wt,lDr),e(Wt,Zc),e(Zc,iDr),e(Zc,E6e),e(E6e,dDr),e(Zc,cDr),e(Zc,Zoe),e(Zoe,mDr),e(Zc,fDr),e(Wt,gDr),M(w0,Wt,null),e(dr,hDr),e(dr,jr),M(fS,jr,null),e(jr,uDr),e(jr,C6e),e(C6e,pDr),e(jr,_Dr),e(jr,yn),e(yn,bDr),e(yn,w6e),e(w6e,vDr),e(yn,FDr),e(yn,A6e),e(A6e,TDr),e(yn,MDr),e(yn,L6e),e(L6e,EDr),e(yn,CDr),e(jr,wDr),e(jr,Be),e(Be,A0),e(A0,y6e),e(y6e,ADr),e(A0,LDr),e(A0,ere),e(ere,yDr),e(A0,xDr),e(Be,$Dr),e(Be,L0),e(L0,x6e),e(x6e,kDr),e(L0,SDr),e(L0,ore),e(ore,RDr),e(L0,PDr),e(Be,BDr),e(Be,Tl),e(Tl,$6e),e($6e,IDr),e(Tl,NDr),e(Tl,rre),e(rre,qDr),e(Tl,jDr),e(Tl,tre),e(tre,DDr),e(Tl,GDr),e(Be,ODr),e(Be,y0),e(y0,k6e),e(k6e,VDr),e(y0,XDr),e(y0,are),e(are,zDr),e(y0,QDr),e(Be,WDr),e(Be,x0),e(x0,S6e),e(S6e,UDr),e(x0,HDr),e(x0,nre),e(nre,JDr),e(x0,YDr),e(Be,KDr),e(Be,$0),e($0,R6e),e(R6e,ZDr),e($0,eGr),e($0,sre),e(sre,oGr),e($0,rGr),e(Be,tGr),e(Be,k0),e(k0,P6e),e(P6e,aGr),e(k0,nGr),e(k0,lre),e(lre,sGr),e(k0,lGr),e(Be,iGr),e(Be,S0),e(S0,B6e),e(B6e,dGr),e(S0,cGr),e(S0,ire),e(ire,mGr),e(S0,fGr),e(Be,gGr),e(Be,R0),e(R0,I6e),e(I6e,hGr),e(R0,uGr),e(R0,dre),e(dre,pGr),e(R0,_Gr),e(jr,bGr),M(P0,jr,null),b(m,Yeo,_),b(m,em,_),e(em,B0),e(B0,N6e),M(gS,N6e,null),e(em,vGr),e(em,q6e),e(q6e,FGr),b(m,Keo,_),b(m,cr,_),M(hS,cr,null),e(cr,TGr),e(cr,om),e(om,MGr),e(om,cre),e(cre,EGr),e(om,CGr),e(om,mre),e(mre,wGr),e(om,AGr),e(cr,LGr),e(cr,uS),e(uS,yGr),e(uS,j6e),e(j6e,xGr),e(uS,$Gr),e(cr,kGr),e(cr,Ut),M(pS,Ut,null),e(Ut,SGr),e(Ut,D6e),e(D6e,RGr),e(Ut,PGr),e(Ut,rm),e(rm,BGr),e(rm,G6e),e(G6e,IGr),e(rm,NGr),e(rm,fre),e(fre,qGr),e(rm,jGr),e(Ut,DGr),M(I0,Ut,null),e(cr,GGr),e(cr,Dr),M(_S,Dr,null),e(Dr,OGr),e(Dr,O6e),e(O6e,VGr),e(Dr,XGr),e(Dr,xn),e(xn,zGr),e(xn,V6e),e(V6e,QGr),e(xn,WGr),e(xn,X6e),e(X6e,UGr),e(xn,HGr),e(xn,z6e),e(z6e,JGr),e(xn,YGr),e(Dr,KGr),e(Dr,tm),e(tm,N0),e(N0,Q6e),e(Q6e,ZGr),e(N0,eOr),e(N0,gre),e(gre,oOr),e(N0,rOr),e(tm,tOr),e(tm,q0),e(q0,W6e),e(W6e,aOr),e(q0,nOr),e(q0,hre),e(hre,sOr),e(q0,lOr),e(tm,iOr),e(tm,j0),e(j0,U6e),e(U6e,dOr),e(j0,cOr),e(j0,ure),e(ure,mOr),e(j0,fOr),e(Dr,gOr),M(D0,Dr,null),b(m,Zeo,_),b(m,am,_),e(am,G0),e(G0,H6e),M(bS,H6e,null),e(am,hOr),e(am,J6e),e(J6e,uOr),b(m,eoo,_),b(m,mr,_),M(vS,mr,null),e(mr,pOr),e(mr,nm),e(nm,_Or),e(nm,pre),e(pre,bOr),e(nm,vOr),e(nm,_re),e(_re,FOr),e(nm,TOr),e(mr,MOr),e(mr,FS),e(FS,EOr),e(FS,Y6e),e(Y6e,COr),e(FS,wOr),e(mr,AOr),e(mr,Ht),M(TS,Ht,null),e(Ht,LOr),e(Ht,K6e),e(K6e,yOr),e(Ht,xOr),e(Ht,sm),e(sm,$Or),e(sm,Z6e),e(Z6e,kOr),e(sm,SOr),e(sm,bre),e(bre,ROr),e(sm,POr),e(Ht,BOr),M(O0,Ht,null),e(mr,IOr),e(mr,Gr),M(MS,Gr,null),e(Gr,NOr),e(Gr,e7e),e(e7e,qOr),e(Gr,jOr),e(Gr,$n),e($n,DOr),e($n,o7e),e(o7e,GOr),e($n,OOr),e($n,r7e),e(r7e,VOr),e($n,XOr),e($n,t7e),e(t7e,zOr),e($n,QOr),e(Gr,WOr),e(Gr,ge),e(ge,V0),e(V0,a7e),e(a7e,UOr),e(V0,HOr),e(V0,vre),e(vre,JOr),e(V0,YOr),e(ge,KOr),e(ge,X0),e(X0,n7e),e(n7e,ZOr),e(X0,eVr),e(X0,Fre),e(Fre,oVr),e(X0,rVr),e(ge,tVr),e(ge,z0),e(z0,s7e),e(s7e,aVr),e(z0,nVr),e(z0,Tre),e(Tre,sVr),e(z0,lVr),e(ge,iVr),e(ge,Q0),e(Q0,l7e),e(l7e,dVr),e(Q0,cVr),e(Q0,Mre),e(Mre,mVr),e(Q0,fVr),e(ge,gVr),e(ge,W0),e(W0,i7e),e(i7e,hVr),e(W0,uVr),e(W0,Ere),e(Ere,pVr),e(W0,_Vr),e(ge,bVr),e(ge,U0),e(U0,d7e),e(d7e,vVr),e(U0,FVr),e(U0,Cre),e(Cre,TVr),e(U0,MVr),e(ge,EVr),e(ge,H0),e(H0,c7e),e(c7e,CVr),e(H0,wVr),e(H0,wre),e(wre,AVr),e(H0,LVr),e(ge,yVr),e(ge,J0),e(J0,m7e),e(m7e,xVr),e(J0,$Vr),e(J0,Are),e(Are,kVr),e(J0,SVr),e(ge,RVr),e(ge,Y0),e(Y0,f7e),e(f7e,PVr),e(Y0,BVr),e(Y0,Lre),e(Lre,IVr),e(Y0,NVr),e(ge,qVr),e(ge,K0),e(K0,g7e),e(g7e,jVr),e(K0,DVr),e(K0,yre),e(yre,GVr),e(K0,OVr),e(ge,VVr),e(ge,Z0),e(Z0,h7e),e(h7e,XVr),e(Z0,zVr),e(Z0,xre),e(xre,QVr),e(Z0,WVr),e(ge,UVr),e(ge,ew),e(ew,u7e),e(u7e,HVr),e(ew,JVr),e(ew,$re),e($re,YVr),e(ew,KVr),e(ge,ZVr),e(ge,ow),e(ow,p7e),e(p7e,eXr),e(ow,oXr),e(ow,kre),e(kre,rXr),e(ow,tXr),e(ge,aXr),e(ge,rw),e(rw,_7e),e(_7e,nXr),e(rw,sXr),e(rw,Sre),e(Sre,lXr),e(rw,iXr),e(ge,dXr),e(ge,tw),e(tw,b7e),e(b7e,cXr),e(tw,mXr),e(tw,Rre),e(Rre,fXr),e(tw,gXr),e(ge,hXr),e(ge,aw),e(aw,v7e),e(v7e,uXr),e(aw,pXr),e(aw,Pre),e(Pre,_Xr),e(aw,bXr),e(ge,vXr),e(ge,nw),e(nw,F7e),e(F7e,FXr),e(nw,TXr),e(nw,Bre),e(Bre,MXr),e(nw,EXr),e(ge,CXr),e(ge,sw),e(sw,T7e),e(T7e,wXr),e(sw,AXr),e(sw,Ire),e(Ire,LXr),e(sw,yXr),e(ge,xXr),e(ge,lw),e(lw,M7e),e(M7e,$Xr),e(lw,kXr),e(lw,Nre),e(Nre,SXr),e(lw,RXr),e(ge,PXr),e(ge,iw),e(iw,E7e),e(E7e,BXr),e(iw,IXr),e(iw,qre),e(qre,NXr),e(iw,qXr),e(Gr,jXr),M(dw,Gr,null),b(m,ooo,_),b(m,lm,_),e(lm,cw),e(cw,C7e),M(ES,C7e,null),e(lm,DXr),e(lm,w7e),e(w7e,GXr),b(m,roo,_),b(m,fr,_),M(CS,fr,null),e(fr,OXr),e(fr,im),e(im,VXr),e(im,jre),e(jre,XXr),e(im,zXr),e(im,Dre),e(Dre,QXr),e(im,WXr),e(fr,UXr),e(fr,wS),e(wS,HXr),e(wS,A7e),e(A7e,JXr),e(wS,YXr),e(fr,KXr),e(fr,Jt),M(AS,Jt,null),e(Jt,ZXr),e(Jt,L7e),e(L7e,ezr),e(Jt,ozr),e(Jt,dm),e(dm,rzr),e(dm,y7e),e(y7e,tzr),e(dm,azr),e(dm,Gre),e(Gre,nzr),e(dm,szr),e(Jt,lzr),M(mw,Jt,null),e(fr,izr),e(fr,Or),M(LS,Or,null),e(Or,dzr),e(Or,x7e),e(x7e,czr),e(Or,mzr),e(Or,kn),e(kn,fzr),e(kn,$7e),e($7e,gzr),e(kn,hzr),e(kn,k7e),e(k7e,uzr),e(kn,pzr),e(kn,S7e),e(S7e,_zr),e(kn,bzr),e(Or,vzr),e(Or,ye),e(ye,fw),e(fw,R7e),e(R7e,Fzr),e(fw,Tzr),e(fw,Ore),e(Ore,Mzr),e(fw,Ezr),e(ye,Czr),e(ye,gw),e(gw,P7e),e(P7e,wzr),e(gw,Azr),e(gw,Vre),e(Vre,Lzr),e(gw,yzr),e(ye,xzr),e(ye,hw),e(hw,B7e),e(B7e,$zr),e(hw,kzr),e(hw,Xre),e(Xre,Szr),e(hw,Rzr),e(ye,Pzr),e(ye,uw),e(uw,I7e),e(I7e,Bzr),e(uw,Izr),e(uw,zre),e(zre,Nzr),e(uw,qzr),e(ye,jzr),e(ye,pw),e(pw,N7e),e(N7e,Dzr),e(pw,Gzr),e(pw,Qre),e(Qre,Ozr),e(pw,Vzr),e(ye,Xzr),e(ye,_w),e(_w,q7e),e(q7e,zzr),e(_w,Qzr),e(_w,Wre),e(Wre,Wzr),e(_w,Uzr),e(ye,Hzr),e(ye,bw),e(bw,j7e),e(j7e,Jzr),e(bw,Yzr),e(bw,Ure),e(Ure,Kzr),e(bw,Zzr),e(ye,eQr),e(ye,vw),e(vw,D7e),e(D7e,oQr),e(vw,rQr),e(vw,Hre),e(Hre,tQr),e(vw,aQr),e(ye,nQr),e(ye,Fw),e(Fw,G7e),e(G7e,sQr),e(Fw,lQr),e(Fw,Jre),e(Jre,iQr),e(Fw,dQr),e(ye,cQr),e(ye,Tw),e(Tw,O7e),e(O7e,mQr),e(Tw,fQr),e(Tw,Yre),e(Yre,gQr),e(Tw,hQr),e(Or,uQr),M(Mw,Or,null),b(m,too,_),b(m,cm,_),e(cm,Ew),e(Ew,V7e),M(yS,V7e,null),e(cm,pQr),e(cm,X7e),e(X7e,_Qr),b(m,aoo,_),b(m,gr,_),M(xS,gr,null),e(gr,bQr),e(gr,mm),e(mm,vQr),e(mm,Kre),e(Kre,FQr),e(mm,TQr),e(mm,Zre),e(Zre,MQr),e(mm,EQr),e(gr,CQr),e(gr,$S),e($S,wQr),e($S,z7e),e(z7e,AQr),e($S,LQr),e(gr,yQr),e(gr,Yt),M(kS,Yt,null),e(Yt,xQr),e(Yt,Q7e),e(Q7e,$Qr),e(Yt,kQr),e(Yt,fm),e(fm,SQr),e(fm,W7e),e(W7e,RQr),e(fm,PQr),e(fm,ete),e(ete,BQr),e(fm,IQr),e(Yt,NQr),M(Cw,Yt,null),e(gr,qQr),e(gr,Vr),M(SS,Vr,null),e(Vr,jQr),e(Vr,U7e),e(U7e,DQr),e(Vr,GQr),e(Vr,Sn),e(Sn,OQr),e(Sn,H7e),e(H7e,VQr),e(Sn,XQr),e(Sn,J7e),e(J7e,zQr),e(Sn,QQr),e(Sn,Y7e),e(Y7e,WQr),e(Sn,UQr),e(Vr,HQr),e(Vr,re),e(re,ww),e(ww,K7e),e(K7e,JQr),e(ww,YQr),e(ww,ote),e(ote,KQr),e(ww,ZQr),e(re,eWr),e(re,Aw),e(Aw,Z7e),e(Z7e,oWr),e(Aw,rWr),e(Aw,rte),e(rte,tWr),e(Aw,aWr),e(re,nWr),e(re,Lw),e(Lw,eLe),e(eLe,sWr),e(Lw,lWr),e(Lw,tte),e(tte,iWr),e(Lw,dWr),e(re,cWr),e(re,yw),e(yw,oLe),e(oLe,mWr),e(yw,fWr),e(yw,ate),e(ate,gWr),e(yw,hWr),e(re,uWr),e(re,xw),e(xw,rLe),e(rLe,pWr),e(xw,_Wr),e(xw,nte),e(nte,bWr),e(xw,vWr),e(re,FWr),e(re,$w),e($w,tLe),e(tLe,TWr),e($w,MWr),e($w,ste),e(ste,EWr),e($w,CWr),e(re,wWr),e(re,kw),e(kw,aLe),e(aLe,AWr),e(kw,LWr),e(kw,lte),e(lte,yWr),e(kw,xWr),e(re,$Wr),e(re,Sw),e(Sw,nLe),e(nLe,kWr),e(Sw,SWr),e(Sw,ite),e(ite,RWr),e(Sw,PWr),e(re,BWr),e(re,Rw),e(Rw,sLe),e(sLe,IWr),e(Rw,NWr),e(Rw,dte),e(dte,qWr),e(Rw,jWr),e(re,DWr),e(re,Pw),e(Pw,lLe),e(lLe,GWr),e(Pw,OWr),e(Pw,cte),e(cte,VWr),e(Pw,XWr),e(re,zWr),e(re,Bw),e(Bw,iLe),e(iLe,QWr),e(Bw,WWr),e(Bw,mte),e(mte,UWr),e(Bw,HWr),e(re,JWr),e(re,Iw),e(Iw,dLe),e(dLe,YWr),e(Iw,KWr),e(Iw,fte),e(fte,ZWr),e(Iw,eUr),e(re,oUr),e(re,Nw),e(Nw,cLe),e(cLe,rUr),e(Nw,tUr),e(Nw,gte),e(gte,aUr),e(Nw,nUr),e(re,sUr),e(re,qw),e(qw,mLe),e(mLe,lUr),e(qw,iUr),e(qw,hte),e(hte,dUr),e(qw,cUr),e(re,mUr),e(re,jw),e(jw,fLe),e(fLe,fUr),e(jw,gUr),e(jw,ute),e(ute,hUr),e(jw,uUr),e(re,pUr),e(re,Dw),e(Dw,gLe),e(gLe,_Ur),e(Dw,bUr),e(Dw,pte),e(pte,vUr),e(Dw,FUr),e(re,TUr),e(re,Gw),e(Gw,hLe),e(hLe,MUr),e(Gw,EUr),e(Gw,_te),e(_te,CUr),e(Gw,wUr),e(re,AUr),e(re,Ow),e(Ow,uLe),e(uLe,LUr),e(Ow,yUr),e(Ow,bte),e(bte,xUr),e(Ow,$Ur),e(re,kUr),e(re,Vw),e(Vw,pLe),e(pLe,SUr),e(Vw,RUr),e(Vw,vte),e(vte,PUr),e(Vw,BUr),e(re,IUr),e(re,Xw),e(Xw,_Le),e(_Le,NUr),e(Xw,qUr),e(Xw,Fte),e(Fte,jUr),e(Xw,DUr),e(re,GUr),e(re,zw),e(zw,bLe),e(bLe,OUr),e(zw,VUr),e(zw,Tte),e(Tte,XUr),e(zw,zUr),e(re,QUr),e(re,Qw),e(Qw,vLe),e(vLe,WUr),e(Qw,UUr),e(Qw,Mte),e(Mte,HUr),e(Qw,JUr),e(re,YUr),e(re,Ww),e(Ww,FLe),e(FLe,KUr),e(Ww,ZUr),e(Ww,Ete),e(Ete,eHr),e(Ww,oHr),e(re,rHr),e(re,Uw),e(Uw,TLe),e(TLe,tHr),e(Uw,aHr),e(Uw,Cte),e(Cte,nHr),e(Uw,sHr),e(re,lHr),e(re,Hw),e(Hw,MLe),e(MLe,iHr),e(Hw,dHr),e(Hw,wte),e(wte,cHr),e(Hw,mHr),e(re,fHr),e(re,Jw),e(Jw,ELe),e(ELe,gHr),e(Jw,hHr),e(Jw,Ate),e(Ate,uHr),e(Jw,pHr),e(re,_Hr),e(re,Yw),e(Yw,CLe),e(CLe,bHr),e(Yw,vHr),e(Yw,Lte),e(Lte,FHr),e(Yw,THr),e(Vr,MHr),M(Kw,Vr,null),b(m,noo,_),b(m,gm,_),e(gm,Zw),e(Zw,wLe),M(RS,wLe,null),e(gm,EHr),e(gm,ALe),e(ALe,CHr),b(m,soo,_),b(m,hr,_),M(PS,hr,null),e(hr,wHr),e(hr,hm),e(hm,AHr),e(hm,yte),e(yte,LHr),e(hm,yHr),e(hm,xte),e(xte,xHr),e(hm,$Hr),e(hr,kHr),e(hr,BS),e(BS,SHr),e(BS,LLe),e(LLe,RHr),e(BS,PHr),e(hr,BHr),e(hr,Kt),M(IS,Kt,null),e(Kt,IHr),e(Kt,yLe),e(yLe,NHr),e(Kt,qHr),e(Kt,um),e(um,jHr),e(um,xLe),e(xLe,DHr),e(um,GHr),e(um,$te),e($te,OHr),e(um,VHr),e(Kt,XHr),M(eA,Kt,null),e(hr,zHr),e(hr,Xr),M(NS,Xr,null),e(Xr,QHr),e(Xr,$Le),e($Le,WHr),e(Xr,UHr),e(Xr,Rn),e(Rn,HHr),e(Rn,kLe),e(kLe,JHr),e(Rn,YHr),e(Rn,SLe),e(SLe,KHr),e(Rn,ZHr),e(Rn,RLe),e(RLe,eJr),e(Rn,oJr),e(Xr,rJr),e(Xr,ve),e(ve,oA),e(oA,PLe),e(PLe,tJr),e(oA,aJr),e(oA,kte),e(kte,nJr),e(oA,sJr),e(ve,lJr),e(ve,rA),e(rA,BLe),e(BLe,iJr),e(rA,dJr),e(rA,Ste),e(Ste,cJr),e(rA,mJr),e(ve,fJr),e(ve,tA),e(tA,ILe),e(ILe,gJr),e(tA,hJr),e(tA,Rte),e(Rte,uJr),e(tA,pJr),e(ve,_Jr),e(ve,aA),e(aA,NLe),e(NLe,bJr),e(aA,vJr),e(aA,Pte),e(Pte,FJr),e(aA,TJr),e(ve,MJr),e(ve,nA),e(nA,qLe),e(qLe,EJr),e(nA,CJr),e(nA,Bte),e(Bte,wJr),e(nA,AJr),e(ve,LJr),e(ve,sA),e(sA,jLe),e(jLe,yJr),e(sA,xJr),e(sA,Ite),e(Ite,$Jr),e(sA,kJr),e(ve,SJr),e(ve,lA),e(lA,DLe),e(DLe,RJr),e(lA,PJr),e(lA,Nte),e(Nte,BJr),e(lA,IJr),e(ve,NJr),e(ve,iA),e(iA,GLe),e(GLe,qJr),e(iA,jJr),e(iA,qte),e(qte,DJr),e(iA,GJr),e(ve,OJr),e(ve,dA),e(dA,OLe),e(OLe,VJr),e(dA,XJr),e(dA,jte),e(jte,zJr),e(dA,QJr),e(ve,WJr),e(ve,cA),e(cA,VLe),e(VLe,UJr),e(cA,HJr),e(cA,Dte),e(Dte,JJr),e(cA,YJr),e(ve,KJr),e(ve,mA),e(mA,XLe),e(XLe,ZJr),e(mA,eYr),e(mA,Gte),e(Gte,oYr),e(mA,rYr),e(ve,tYr),e(ve,fA),e(fA,zLe),e(zLe,aYr),e(fA,nYr),e(fA,Ote),e(Ote,sYr),e(fA,lYr),e(ve,iYr),e(ve,gA),e(gA,QLe),e(QLe,dYr),e(gA,cYr),e(gA,Vte),e(Vte,mYr),e(gA,fYr),e(ve,gYr),e(ve,hA),e(hA,WLe),e(WLe,hYr),e(hA,uYr),e(hA,Xte),e(Xte,pYr),e(hA,_Yr),e(ve,bYr),e(ve,uA),e(uA,ULe),e(ULe,vYr),e(uA,FYr),e(uA,zte),e(zte,TYr),e(uA,MYr),e(ve,EYr),e(ve,pA),e(pA,HLe),e(HLe,CYr),e(pA,wYr),e(pA,Qte),e(Qte,AYr),e(pA,LYr),e(ve,yYr),e(ve,_A),e(_A,JLe),e(JLe,xYr),e(_A,$Yr),e(_A,Wte),e(Wte,kYr),e(_A,SYr),e(Xr,RYr),M(bA,Xr,null),b(m,loo,_),b(m,pm,_),e(pm,vA),e(vA,YLe),M(qS,YLe,null),e(pm,PYr),e(pm,KLe),e(KLe,BYr),b(m,ioo,_),b(m,ur,_),M(jS,ur,null),e(ur,IYr),e(ur,_m),e(_m,NYr),e(_m,Ute),e(Ute,qYr),e(_m,jYr),e(_m,Hte),e(Hte,DYr),e(_m,GYr),e(ur,OYr),e(ur,DS),e(DS,VYr),e(DS,ZLe),e(ZLe,XYr),e(DS,zYr),e(ur,QYr),e(ur,Zt),M(GS,Zt,null),e(Zt,WYr),e(Zt,eye),e(eye,UYr),e(Zt,HYr),e(Zt,bm),e(bm,JYr),e(bm,oye),e(oye,YYr),e(bm,KYr),e(bm,Jte),e(Jte,ZYr),e(bm,eKr),e(Zt,oKr),M(FA,Zt,null),e(ur,rKr),e(ur,zr),M(OS,zr,null),e(zr,tKr),e(zr,rye),e(rye,aKr),e(zr,nKr),e(zr,Pn),e(Pn,sKr),e(Pn,tye),e(tye,lKr),e(Pn,iKr),e(Pn,aye),e(aye,dKr),e(Pn,cKr),e(Pn,nye),e(nye,mKr),e(Pn,fKr),e(zr,gKr),e(zr,VS),e(VS,TA),e(TA,sye),e(sye,hKr),e(TA,uKr),e(TA,Yte),e(Yte,pKr),e(TA,_Kr),e(VS,bKr),e(VS,MA),e(MA,lye),e(lye,vKr),e(MA,FKr),e(MA,Kte),e(Kte,TKr),e(MA,MKr),e(zr,EKr),M(EA,zr,null),b(m,doo,_),b(m,vm,_),e(vm,CA),e(CA,iye),M(XS,iye,null),e(vm,CKr),e(vm,dye),e(dye,wKr),b(m,coo,_),b(m,pr,_),M(zS,pr,null),e(pr,AKr),e(pr,Fm),e(Fm,LKr),e(Fm,Zte),e(Zte,yKr),e(Fm,xKr),e(Fm,eae),e(eae,$Kr),e(Fm,kKr),e(pr,SKr),e(pr,QS),e(QS,RKr),e(QS,cye),e(cye,PKr),e(QS,BKr),e(pr,IKr),e(pr,ea),M(WS,ea,null),e(ea,NKr),e(ea,mye),e(mye,qKr),e(ea,jKr),e(ea,Tm),e(Tm,DKr),e(Tm,fye),e(fye,GKr),e(Tm,OKr),e(Tm,oae),e(oae,VKr),e(Tm,XKr),e(ea,zKr),M(wA,ea,null),e(pr,QKr),e(pr,Qr),M(US,Qr,null),e(Qr,WKr),e(Qr,gye),e(gye,UKr),e(Qr,HKr),e(Qr,Bn),e(Bn,JKr),e(Bn,hye),e(hye,YKr),e(Bn,KKr),e(Bn,uye),e(uye,ZKr),e(Bn,eZr),e(Bn,pye),e(pye,oZr),e(Bn,rZr),e(Qr,tZr),e(Qr,_ye),e(_ye,AA),e(AA,bye),e(bye,aZr),e(AA,nZr),e(AA,rae),e(rae,sZr),e(AA,lZr),e(Qr,iZr),M(LA,Qr,null),b(m,moo,_),b(m,Mm,_),e(Mm,yA),e(yA,vye),M(HS,vye,null),e(Mm,dZr),e(Mm,Fye),e(Fye,cZr),b(m,foo,_),b(m,_r,_),M(JS,_r,null),e(_r,mZr),e(_r,Em),e(Em,fZr),e(Em,tae),e(tae,gZr),e(Em,hZr),e(Em,aae),e(aae,uZr),e(Em,pZr),e(_r,_Zr),e(_r,YS),e(YS,bZr),e(YS,Tye),e(Tye,vZr),e(YS,FZr),e(_r,TZr),e(_r,oa),M(KS,oa,null),e(oa,MZr),e(oa,Mye),e(Mye,EZr),e(oa,CZr),e(oa,Cm),e(Cm,wZr),e(Cm,Eye),e(Eye,AZr),e(Cm,LZr),e(Cm,nae),e(nae,yZr),e(Cm,xZr),e(oa,$Zr),M(xA,oa,null),e(_r,kZr),e(_r,Wr),M(ZS,Wr,null),e(Wr,SZr),e(Wr,Cye),e(Cye,RZr),e(Wr,PZr),e(Wr,In),e(In,BZr),e(In,wye),e(wye,IZr),e(In,NZr),e(In,Aye),e(Aye,qZr),e(In,jZr),e(In,Lye),e(Lye,DZr),e(In,GZr),e(Wr,OZr),e(Wr,yye),e(yye,$A),e($A,xye),e(xye,VZr),e($A,XZr),e($A,sae),e(sae,zZr),e($A,QZr),e(Wr,WZr),M(kA,Wr,null),b(m,goo,_),b(m,wm,_),e(wm,SA),e(SA,$ye),M(eR,$ye,null),e(wm,UZr),e(wm,kye),e(kye,HZr),b(m,hoo,_),b(m,br,_),M(oR,br,null),e(br,JZr),e(br,Am),e(Am,YZr),e(Am,lae),e(lae,KZr),e(Am,ZZr),e(Am,iae),e(iae,eet),e(Am,oet),e(br,ret),e(br,rR),e(rR,tet),e(rR,Sye),e(Sye,aet),e(rR,net),e(br,set),e(br,ra),M(tR,ra,null),e(ra,iet),e(ra,Rye),e(Rye,det),e(ra,cet),e(ra,Lm),e(Lm,met),e(Lm,Pye),e(Pye,fet),e(Lm,get),e(Lm,dae),e(dae,het),e(Lm,uet),e(ra,pet),M(RA,ra,null),e(br,_et),e(br,Ur),M(aR,Ur,null),e(Ur,bet),e(Ur,Bye),e(Bye,vet),e(Ur,Fet),e(Ur,Nn),e(Nn,Tet),e(Nn,Iye),e(Iye,Met),e(Nn,Eet),e(Nn,Nye),e(Nye,Cet),e(Nn,wet),e(Nn,qye),e(qye,Aet),e(Nn,Let),e(Ur,yet),e(Ur,de),e(de,PA),e(PA,jye),e(jye,xet),e(PA,$et),e(PA,cae),e(cae,ket),e(PA,Set),e(de,Ret),e(de,BA),e(BA,Dye),e(Dye,Pet),e(BA,Bet),e(BA,mae),e(mae,Iet),e(BA,Net),e(de,qet),e(de,IA),e(IA,Gye),e(Gye,jet),e(IA,Det),e(IA,fae),e(fae,Get),e(IA,Oet),e(de,Vet),e(de,NA),e(NA,Oye),e(Oye,Xet),e(NA,zet),e(NA,gae),e(gae,Qet),e(NA,Wet),e(de,Uet),e(de,qA),e(qA,Vye),e(Vye,Het),e(qA,Jet),e(qA,hae),e(hae,Yet),e(qA,Ket),e(de,Zet),e(de,jA),e(jA,Xye),e(Xye,eot),e(jA,oot),e(jA,uae),e(uae,rot),e(jA,tot),e(de,aot),e(de,DA),e(DA,zye),e(zye,not),e(DA,sot),e(DA,pae),e(pae,lot),e(DA,iot),e(de,dot),e(de,GA),e(GA,Qye),e(Qye,cot),e(GA,mot),e(GA,_ae),e(_ae,fot),e(GA,got),e(de,hot),e(de,OA),e(OA,Wye),e(Wye,uot),e(OA,pot),e(OA,bae),e(bae,_ot),e(OA,bot),e(de,vot),e(de,VA),e(VA,Uye),e(Uye,Fot),e(VA,Tot),e(VA,vae),e(vae,Mot),e(VA,Eot),e(de,Cot),e(de,XA),e(XA,Hye),e(Hye,wot),e(XA,Aot),e(XA,Fae),e(Fae,Lot),e(XA,yot),e(de,xot),e(de,zA),e(zA,Jye),e(Jye,$ot),e(zA,kot),e(zA,Tae),e(Tae,Sot),e(zA,Rot),e(de,Pot),e(de,QA),e(QA,Yye),e(Yye,Bot),e(QA,Iot),e(QA,Mae),e(Mae,Not),e(QA,qot),e(de,jot),e(de,WA),e(WA,Kye),e(Kye,Dot),e(WA,Got),e(WA,Eae),e(Eae,Oot),e(WA,Vot),e(de,Xot),e(de,UA),e(UA,Zye),e(Zye,zot),e(UA,Qot),e(UA,Cae),e(Cae,Wot),e(UA,Uot),e(de,Hot),e(de,HA),e(HA,e8e),e(e8e,Jot),e(HA,Yot),e(HA,wae),e(wae,Kot),e(HA,Zot),e(de,ert),e(de,JA),e(JA,o8e),e(o8e,ort),e(JA,rrt),e(JA,Aae),e(Aae,trt),e(JA,art),e(de,nrt),e(de,YA),e(YA,r8e),e(r8e,srt),e(YA,lrt),e(YA,Lae),e(Lae,irt),e(YA,drt),e(de,crt),e(de,KA),e(KA,t8e),e(t8e,mrt),e(KA,frt),e(KA,yae),e(yae,grt),e(KA,hrt),e(de,urt),e(de,ZA),e(ZA,a8e),e(a8e,prt),e(ZA,_rt),e(ZA,xae),e(xae,brt),e(ZA,vrt),e(de,Frt),e(de,e6),e(e6,n8e),e(n8e,Trt),e(e6,Mrt),e(e6,$ae),e($ae,Ert),e(e6,Crt),e(Ur,wrt),M(o6,Ur,null),b(m,uoo,_),b(m,ym,_),e(ym,r6),e(r6,s8e),M(nR,s8e,null),e(ym,Art),e(ym,l8e),e(l8e,Lrt),b(m,poo,_),b(m,vr,_),M(sR,vr,null),e(vr,yrt),e(vr,xm),e(xm,xrt),e(xm,kae),e(kae,$rt),e(xm,krt),e(xm,Sae),e(Sae,Srt),e(xm,Rrt),e(vr,Prt),e(vr,lR),e(lR,Brt),e(lR,i8e),e(i8e,Irt),e(lR,Nrt),e(vr,qrt),e(vr,ta),M(iR,ta,null),e(ta,jrt),e(ta,d8e),e(d8e,Drt),e(ta,Grt),e(ta,$m),e($m,Ort),e($m,c8e),e(c8e,Vrt),e($m,Xrt),e($m,Rae),e(Rae,zrt),e($m,Qrt),e(ta,Wrt),M(t6,ta,null),e(vr,Urt),e(vr,Hr),M(dR,Hr,null),e(Hr,Hrt),e(Hr,m8e),e(m8e,Jrt),e(Hr,Yrt),e(Hr,qn),e(qn,Krt),e(qn,f8e),e(f8e,Zrt),e(qn,ett),e(qn,g8e),e(g8e,ott),e(qn,rtt),e(qn,h8e),e(h8e,ttt),e(qn,att),e(Hr,ntt),e(Hr,ce),e(ce,a6),e(a6,u8e),e(u8e,stt),e(a6,ltt),e(a6,Pae),e(Pae,itt),e(a6,dtt),e(ce,ctt),e(ce,n6),e(n6,p8e),e(p8e,mtt),e(n6,ftt),e(n6,Bae),e(Bae,gtt),e(n6,htt),e(ce,utt),e(ce,s6),e(s6,_8e),e(_8e,ptt),e(s6,_tt),e(s6,Iae),e(Iae,btt),e(s6,vtt),e(ce,Ftt),e(ce,l6),e(l6,b8e),e(b8e,Ttt),e(l6,Mtt),e(l6,Nae),e(Nae,Ett),e(l6,Ctt),e(ce,wtt),e(ce,i6),e(i6,v8e),e(v8e,Att),e(i6,Ltt),e(i6,qae),e(qae,ytt),e(i6,xtt),e(ce,$tt),e(ce,d6),e(d6,F8e),e(F8e,ktt),e(d6,Stt),e(d6,jae),e(jae,Rtt),e(d6,Ptt),e(ce,Btt),e(ce,c6),e(c6,T8e),e(T8e,Itt),e(c6,Ntt),e(c6,Dae),e(Dae,qtt),e(c6,jtt),e(ce,Dtt),e(ce,m6),e(m6,M8e),e(M8e,Gtt),e(m6,Ott),e(m6,Gae),e(Gae,Vtt),e(m6,Xtt),e(ce,ztt),e(ce,f6),e(f6,E8e),e(E8e,Qtt),e(f6,Wtt),e(f6,Oae),e(Oae,Utt),e(f6,Htt),e(ce,Jtt),e(ce,g6),e(g6,C8e),e(C8e,Ytt),e(g6,Ktt),e(g6,Vae),e(Vae,Ztt),e(g6,eat),e(ce,oat),e(ce,h6),e(h6,w8e),e(w8e,rat),e(h6,tat),e(h6,Xae),e(Xae,aat),e(h6,nat),e(ce,sat),e(ce,u6),e(u6,A8e),e(A8e,lat),e(u6,iat),e(u6,zae),e(zae,dat),e(u6,cat),e(ce,mat),e(ce,p6),e(p6,L8e),e(L8e,fat),e(p6,gat),e(p6,Qae),e(Qae,hat),e(p6,uat),e(ce,pat),e(ce,_6),e(_6,y8e),e(y8e,_at),e(_6,bat),e(_6,Wae),e(Wae,vat),e(_6,Fat),e(ce,Tat),e(ce,b6),e(b6,x8e),e(x8e,Mat),e(b6,Eat),e(b6,Uae),e(Uae,Cat),e(b6,wat),e(ce,Aat),e(ce,v6),e(v6,$8e),e($8e,Lat),e(v6,yat),e(v6,Hae),e(Hae,xat),e(v6,$at),e(ce,kat),e(ce,F6),e(F6,k8e),e(k8e,Sat),e(F6,Rat),e(F6,Jae),e(Jae,Pat),e(F6,Bat),e(ce,Iat),e(ce,T6),e(T6,S8e),e(S8e,Nat),e(T6,qat),e(T6,Yae),e(Yae,jat),e(T6,Dat),e(ce,Gat),e(ce,M6),e(M6,R8e),e(R8e,Oat),e(M6,Vat),e(M6,Kae),e(Kae,Xat),e(M6,zat),e(ce,Qat),e(ce,E6),e(E6,P8e),e(P8e,Wat),e(E6,Uat),e(E6,Zae),e(Zae,Hat),e(E6,Jat),e(ce,Yat),e(ce,C6),e(C6,B8e),e(B8e,Kat),e(C6,Zat),e(C6,ene),e(ene,ent),e(C6,ont),e(Hr,rnt),M(w6,Hr,null),b(m,_oo,_),b(m,km,_),e(km,A6),e(A6,I8e),M(cR,I8e,null),e(km,tnt),e(km,N8e),e(N8e,ant),b(m,boo,_),b(m,Fr,_),M(mR,Fr,null),e(Fr,nnt),e(Fr,Sm),e(Sm,snt),e(Sm,one),e(one,lnt),e(Sm,int),e(Sm,rne),e(rne,dnt),e(Sm,cnt),e(Fr,mnt),e(Fr,fR),e(fR,fnt),e(fR,q8e),e(q8e,gnt),e(fR,hnt),e(Fr,unt),e(Fr,aa),M(gR,aa,null),e(aa,pnt),e(aa,j8e),e(j8e,_nt),e(aa,bnt),e(aa,Rm),e(Rm,vnt),e(Rm,D8e),e(D8e,Fnt),e(Rm,Tnt),e(Rm,tne),e(tne,Mnt),e(Rm,Ent),e(aa,Cnt),M(L6,aa,null),e(Fr,wnt),e(Fr,Jr),M(hR,Jr,null),e(Jr,Ant),e(Jr,G8e),e(G8e,Lnt),e(Jr,ynt),e(Jr,jn),e(jn,xnt),e(jn,O8e),e(O8e,$nt),e(jn,knt),e(jn,V8e),e(V8e,Snt),e(jn,Rnt),e(jn,X8e),e(X8e,Pnt),e(jn,Bnt),e(Jr,Int),e(Jr,z8e),e(z8e,y6),e(y6,Q8e),e(Q8e,Nnt),e(y6,qnt),e(y6,ane),e(ane,jnt),e(y6,Dnt),e(Jr,Gnt),M(x6,Jr,null),b(m,voo,_),b(m,Pm,_),e(Pm,$6),e($6,W8e),M(uR,W8e,null),e(Pm,Ont),e(Pm,U8e),e(U8e,Vnt),b(m,Foo,_),b(m,Tr,_),M(pR,Tr,null),e(Tr,Xnt),e(Tr,Bm),e(Bm,znt),e(Bm,nne),e(nne,Qnt),e(Bm,Wnt),e(Bm,sne),e(sne,Unt),e(Bm,Hnt),e(Tr,Jnt),e(Tr,_R),e(_R,Ynt),e(_R,H8e),e(H8e,Knt),e(_R,Znt),e(Tr,est),e(Tr,na),M(bR,na,null),e(na,ost),e(na,J8e),e(J8e,rst),e(na,tst),e(na,Im),e(Im,ast),e(Im,Y8e),e(Y8e,nst),e(Im,sst),e(Im,lne),e(lne,lst),e(Im,ist),e(na,dst),M(k6,na,null),e(Tr,cst),e(Tr,Yr),M(vR,Yr,null),e(Yr,mst),e(Yr,K8e),e(K8e,fst),e(Yr,gst),e(Yr,Dn),e(Dn,hst),e(Dn,Z8e),e(Z8e,ust),e(Dn,pst),e(Dn,e9e),e(e9e,_st),e(Dn,bst),e(Dn,o9e),e(o9e,vst),e(Dn,Fst),e(Yr,Tst),e(Yr,r9e),e(r9e,S6),e(S6,t9e),e(t9e,Mst),e(S6,Est),e(S6,ine),e(ine,Cst),e(S6,wst),e(Yr,Ast),M(R6,Yr,null),b(m,Too,_),b(m,Nm,_),e(Nm,P6),e(P6,a9e),M(FR,a9e,null),e(Nm,Lst),e(Nm,n9e),e(n9e,yst),b(m,Moo,_),b(m,Mr,_),M(TR,Mr,null),e(Mr,xst),e(Mr,qm),e(qm,$st),e(qm,dne),e(dne,kst),e(qm,Sst),e(qm,cne),e(cne,Rst),e(qm,Pst),e(Mr,Bst),e(Mr,MR),e(MR,Ist),e(MR,s9e),e(s9e,Nst),e(MR,qst),e(Mr,jst),e(Mr,sa),M(ER,sa,null),e(sa,Dst),e(sa,l9e),e(l9e,Gst),e(sa,Ost),e(sa,jm),e(jm,Vst),e(jm,i9e),e(i9e,Xst),e(jm,zst),e(jm,mne),e(mne,Qst),e(jm,Wst),e(sa,Ust),M(B6,sa,null),e(Mr,Hst),e(Mr,Kr),M(CR,Kr,null),e(Kr,Jst),e(Kr,d9e),e(d9e,Yst),e(Kr,Kst),e(Kr,Gn),e(Gn,Zst),e(Gn,c9e),e(c9e,elt),e(Gn,olt),e(Gn,m9e),e(m9e,rlt),e(Gn,tlt),e(Gn,f9e),e(f9e,alt),e(Gn,nlt),e(Kr,slt),e(Kr,te),e(te,I6),e(I6,g9e),e(g9e,llt),e(I6,ilt),e(I6,fne),e(fne,dlt),e(I6,clt),e(te,mlt),e(te,N6),e(N6,h9e),e(h9e,flt),e(N6,glt),e(N6,gne),e(gne,hlt),e(N6,ult),e(te,plt),e(te,q6),e(q6,u9e),e(u9e,_lt),e(q6,blt),e(q6,hne),e(hne,vlt),e(q6,Flt),e(te,Tlt),e(te,j6),e(j6,p9e),e(p9e,Mlt),e(j6,Elt),e(j6,une),e(une,Clt),e(j6,wlt),e(te,Alt),e(te,D6),e(D6,_9e),e(_9e,Llt),e(D6,ylt),e(D6,pne),e(pne,xlt),e(D6,$lt),e(te,klt),e(te,G6),e(G6,b9e),e(b9e,Slt),e(G6,Rlt),e(G6,_ne),e(_ne,Plt),e(G6,Blt),e(te,Ilt),e(te,O6),e(O6,v9e),e(v9e,Nlt),e(O6,qlt),e(O6,bne),e(bne,jlt),e(O6,Dlt),e(te,Glt),e(te,V6),e(V6,F9e),e(F9e,Olt),e(V6,Vlt),e(V6,vne),e(vne,Xlt),e(V6,zlt),e(te,Qlt),e(te,X6),e(X6,T9e),e(T9e,Wlt),e(X6,Ult),e(X6,Fne),e(Fne,Hlt),e(X6,Jlt),e(te,Ylt),e(te,z6),e(z6,M9e),e(M9e,Klt),e(z6,Zlt),e(z6,Tne),e(Tne,eit),e(z6,oit),e(te,rit),e(te,Q6),e(Q6,E9e),e(E9e,tit),e(Q6,ait),e(Q6,Mne),e(Mne,nit),e(Q6,sit),e(te,lit),e(te,W6),e(W6,C9e),e(C9e,iit),e(W6,dit),e(W6,Ene),e(Ene,cit),e(W6,mit),e(te,fit),e(te,U6),e(U6,w9e),e(w9e,git),e(U6,hit),e(U6,Cne),e(Cne,uit),e(U6,pit),e(te,_it),e(te,H6),e(H6,A9e),e(A9e,bit),e(H6,vit),e(H6,wne),e(wne,Fit),e(H6,Tit),e(te,Mit),e(te,J6),e(J6,L9e),e(L9e,Eit),e(J6,Cit),e(J6,Ane),e(Ane,wit),e(J6,Ait),e(te,Lit),e(te,Y6),e(Y6,y9e),e(y9e,yit),e(Y6,xit),e(Y6,Lne),e(Lne,$it),e(Y6,kit),e(te,Sit),e(te,K6),e(K6,x9e),e(x9e,Rit),e(K6,Pit),e(K6,yne),e(yne,Bit),e(K6,Iit),e(te,Nit),e(te,Z6),e(Z6,$9e),e($9e,qit),e(Z6,jit),e(Z6,xne),e(xne,Dit),e(Z6,Git),e(te,Oit),e(te,e7),e(e7,k9e),e(k9e,Vit),e(e7,Xit),e(e7,$ne),e($ne,zit),e(e7,Qit),e(te,Wit),e(te,o7),e(o7,S9e),e(S9e,Uit),e(o7,Hit),e(o7,kne),e(kne,Jit),e(o7,Yit),e(te,Kit),e(te,r7),e(r7,R9e),e(R9e,Zit),e(r7,edt),e(r7,Sne),e(Sne,odt),e(r7,rdt),e(te,tdt),e(te,t7),e(t7,P9e),e(P9e,adt),e(t7,ndt),e(t7,Rne),e(Rne,sdt),e(t7,ldt),e(te,idt),e(te,a7),e(a7,B9e),e(B9e,ddt),e(a7,cdt),e(a7,Pne),e(Pne,mdt),e(a7,fdt),e(te,gdt),e(te,n7),e(n7,I9e),e(I9e,hdt),e(n7,udt),e(n7,Bne),e(Bne,pdt),e(n7,_dt),e(te,bdt),e(te,s7),e(s7,N9e),e(N9e,vdt),e(s7,Fdt),e(s7,Ine),e(Ine,Tdt),e(s7,Mdt),e(te,Edt),e(te,l7),e(l7,q9e),e(q9e,Cdt),e(l7,wdt),e(l7,Nne),e(Nne,Adt),e(l7,Ldt),e(te,ydt),e(te,i7),e(i7,j9e),e(j9e,xdt),e(i7,$dt),e(i7,qne),e(qne,kdt),e(i7,Sdt),e(Kr,Rdt),M(d7,Kr,null),b(m,Eoo,_),b(m,Dm,_),e(Dm,c7),e(c7,D9e),M(wR,D9e,null),e(Dm,Pdt),e(Dm,G9e),e(G9e,Bdt),b(m,Coo,_),b(m,Er,_),M(AR,Er,null),e(Er,Idt),e(Er,Gm),e(Gm,Ndt),e(Gm,jne),e(jne,qdt),e(Gm,jdt),e(Gm,Dne),e(Dne,Ddt),e(Gm,Gdt),e(Er,Odt),e(Er,LR),e(LR,Vdt),e(LR,O9e),e(O9e,Xdt),e(LR,zdt),e(Er,Qdt),e(Er,la),M(yR,la,null),e(la,Wdt),e(la,V9e),e(V9e,Udt),e(la,Hdt),e(la,Om),e(Om,Jdt),e(Om,X9e),e(X9e,Ydt),e(Om,Kdt),e(Om,Gne),e(Gne,Zdt),e(Om,ect),e(la,oct),M(m7,la,null),e(Er,rct),e(Er,Zr),M(xR,Zr,null),e(Zr,tct),e(Zr,z9e),e(z9e,act),e(Zr,nct),e(Zr,On),e(On,sct),e(On,Q9e),e(Q9e,lct),e(On,ict),e(On,W9e),e(W9e,dct),e(On,cct),e(On,U9e),e(U9e,mct),e(On,fct),e(Zr,gct),e(Zr,xe),e(xe,f7),e(f7,H9e),e(H9e,hct),e(f7,uct),e(f7,One),e(One,pct),e(f7,_ct),e(xe,bct),e(xe,g7),e(g7,J9e),e(J9e,vct),e(g7,Fct),e(g7,Vne),e(Vne,Tct),e(g7,Mct),e(xe,Ect),e(xe,h7),e(h7,Y9e),e(Y9e,Cct),e(h7,wct),e(h7,Xne),e(Xne,Act),e(h7,Lct),e(xe,yct),e(xe,u7),e(u7,K9e),e(K9e,xct),e(u7,$ct),e(u7,zne),e(zne,kct),e(u7,Sct),e(xe,Rct),e(xe,p7),e(p7,Z9e),e(Z9e,Pct),e(p7,Bct),e(p7,Qne),e(Qne,Ict),e(p7,Nct),e(xe,qct),e(xe,_7),e(_7,exe),e(exe,jct),e(_7,Dct),e(_7,Wne),e(Wne,Gct),e(_7,Oct),e(xe,Vct),e(xe,b7),e(b7,oxe),e(oxe,Xct),e(b7,zct),e(b7,Une),e(Une,Qct),e(b7,Wct),e(xe,Uct),e(xe,v7),e(v7,rxe),e(rxe,Hct),e(v7,Jct),e(v7,Hne),e(Hne,Yct),e(v7,Kct),e(xe,Zct),e(xe,F7),e(F7,txe),e(txe,emt),e(F7,omt),e(F7,Jne),e(Jne,rmt),e(F7,tmt),e(xe,amt),e(xe,T7),e(T7,axe),e(axe,nmt),e(T7,smt),e(T7,Yne),e(Yne,lmt),e(T7,imt),e(Zr,dmt),M(M7,Zr,null),b(m,woo,_),b(m,Vm,_),e(Vm,E7),e(E7,nxe),M($R,nxe,null),e(Vm,cmt),e(Vm,sxe),e(sxe,mmt),b(m,Aoo,_),b(m,Cr,_),M(kR,Cr,null),e(Cr,fmt),e(Cr,Xm),e(Xm,gmt),e(Xm,Kne),e(Kne,hmt),e(Xm,umt),e(Xm,Zne),e(Zne,pmt),e(Xm,_mt),e(Cr,bmt),e(Cr,SR),e(SR,vmt),e(SR,lxe),e(lxe,Fmt),e(SR,Tmt),e(Cr,Mmt),e(Cr,ia),M(RR,ia,null),e(ia,Emt),e(ia,ixe),e(ixe,Cmt),e(ia,wmt),e(ia,zm),e(zm,Amt),e(zm,dxe),e(dxe,Lmt),e(zm,ymt),e(zm,ese),e(ese,xmt),e(zm,$mt),e(ia,kmt),M(C7,ia,null),e(Cr,Smt),e(Cr,et),M(PR,et,null),e(et,Rmt),e(et,cxe),e(cxe,Pmt),e(et,Bmt),e(et,Vn),e(Vn,Imt),e(Vn,mxe),e(mxe,Nmt),e(Vn,qmt),e(Vn,fxe),e(fxe,jmt),e(Vn,Dmt),e(Vn,gxe),e(gxe,Gmt),e(Vn,Omt),e(et,Vmt),e(et,Ee),e(Ee,w7),e(w7,hxe),e(hxe,Xmt),e(w7,zmt),e(w7,ose),e(ose,Qmt),e(w7,Wmt),e(Ee,Umt),e(Ee,A7),e(A7,uxe),e(uxe,Hmt),e(A7,Jmt),e(A7,rse),e(rse,Ymt),e(A7,Kmt),e(Ee,Zmt),e(Ee,L7),e(L7,pxe),e(pxe,eft),e(L7,oft),e(L7,tse),e(tse,rft),e(L7,tft),e(Ee,aft),e(Ee,y7),e(y7,_xe),e(_xe,nft),e(y7,sft),e(y7,ase),e(ase,lft),e(y7,ift),e(Ee,dft),e(Ee,x7),e(x7,bxe),e(bxe,cft),e(x7,mft),e(x7,nse),e(nse,fft),e(x7,gft),e(Ee,hft),e(Ee,$7),e($7,vxe),e(vxe,uft),e($7,pft),e($7,sse),e(sse,_ft),e($7,bft),e(Ee,vft),e(Ee,k7),e(k7,Fxe),e(Fxe,Fft),e(k7,Tft),e(k7,lse),e(lse,Mft),e(k7,Eft),e(Ee,Cft),e(Ee,S7),e(S7,Txe),e(Txe,wft),e(S7,Aft),e(S7,ise),e(ise,Lft),e(S7,yft),e(Ee,xft),e(Ee,R7),e(R7,Mxe),e(Mxe,$ft),e(R7,kft),e(R7,dse),e(dse,Sft),e(R7,Rft),e(Ee,Pft),e(Ee,P7),e(P7,Exe),e(Exe,Bft),e(P7,Ift),e(P7,cse),e(cse,Nft),e(P7,qft),e(Ee,jft),e(Ee,B7),e(B7,Cxe),e(Cxe,Dft),e(B7,Gft),e(B7,mse),e(mse,Oft),e(B7,Vft),e(Ee,Xft),e(Ee,I7),e(I7,wxe),e(wxe,zft),e(I7,Qft),e(I7,fse),e(fse,Wft),e(I7,Uft),e(Ee,Hft),e(Ee,N7),e(N7,Axe),e(Axe,Jft),e(N7,Yft),e(N7,gse),e(gse,Kft),e(N7,Zft),e(et,egt),M(q7,et,null),b(m,Loo,_),b(m,Qm,_),e(Qm,j7),e(j7,Lxe),M(BR,Lxe,null),e(Qm,ogt),e(Qm,yxe),e(yxe,rgt),b(m,yoo,_),b(m,wr,_),M(IR,wr,null),e(wr,tgt),e(wr,Wm),e(Wm,agt),e(Wm,hse),e(hse,ngt),e(Wm,sgt),e(Wm,use),e(use,lgt),e(Wm,igt),e(wr,dgt),e(wr,NR),e(NR,cgt),e(NR,xxe),e(xxe,mgt),e(NR,fgt),e(wr,ggt),e(wr,da),M(qR,da,null),e(da,hgt),e(da,$xe),e($xe,ugt),e(da,pgt),e(da,Um),e(Um,_gt),e(Um,kxe),e(kxe,bgt),e(Um,vgt),e(Um,pse),e(pse,Fgt),e(Um,Tgt),e(da,Mgt),M(D7,da,null),e(wr,Egt),e(wr,ot),M(jR,ot,null),e(ot,Cgt),e(ot,Sxe),e(Sxe,wgt),e(ot,Agt),e(ot,Xn),e(Xn,Lgt),e(Xn,Rxe),e(Rxe,ygt),e(Xn,xgt),e(Xn,Pxe),e(Pxe,$gt),e(Xn,kgt),e(Xn,Bxe),e(Bxe,Sgt),e(Xn,Rgt),e(ot,Pgt),e(ot,$e),e($e,G7),e(G7,Ixe),e(Ixe,Bgt),e(G7,Igt),e(G7,_se),e(_se,Ngt),e(G7,qgt),e($e,jgt),e($e,O7),e(O7,Nxe),e(Nxe,Dgt),e(O7,Ggt),e(O7,bse),e(bse,Ogt),e(O7,Vgt),e($e,Xgt),e($e,V7),e(V7,qxe),e(qxe,zgt),e(V7,Qgt),e(V7,vse),e(vse,Wgt),e(V7,Ugt),e($e,Hgt),e($e,X7),e(X7,jxe),e(jxe,Jgt),e(X7,Ygt),e(X7,Fse),e(Fse,Kgt),e(X7,Zgt),e($e,eht),e($e,z7),e(z7,Dxe),e(Dxe,oht),e(z7,rht),e(z7,Tse),e(Tse,tht),e(z7,aht),e($e,nht),e($e,Q7),e(Q7,Gxe),e(Gxe,sht),e(Q7,lht),e(Q7,Mse),e(Mse,iht),e(Q7,dht),e($e,cht),e($e,W7),e(W7,Oxe),e(Oxe,mht),e(W7,fht),e(W7,Ese),e(Ese,ght),e(W7,hht),e($e,uht),e($e,U7),e(U7,Vxe),e(Vxe,pht),e(U7,_ht),e(U7,Cse),e(Cse,bht),e(U7,vht),e($e,Fht),e($e,H7),e(H7,Xxe),e(Xxe,Tht),e(H7,Mht),e(H7,wse),e(wse,Eht),e(H7,Cht),e($e,wht),e($e,J7),e(J7,zxe),e(zxe,Aht),e(J7,Lht),e(J7,Ase),e(Ase,yht),e(J7,xht),e(ot,$ht),M(Y7,ot,null),b(m,xoo,_),b(m,Hm,_),e(Hm,K7),e(K7,Qxe),M(DR,Qxe,null),e(Hm,kht),e(Hm,Wxe),e(Wxe,Sht),b(m,$oo,_),b(m,Ar,_),M(GR,Ar,null),e(Ar,Rht),e(Ar,Jm),e(Jm,Pht),e(Jm,Lse),e(Lse,Bht),e(Jm,Iht),e(Jm,yse),e(yse,Nht),e(Jm,qht),e(Ar,jht),e(Ar,OR),e(OR,Dht),e(OR,Uxe),e(Uxe,Ght),e(OR,Oht),e(Ar,Vht),e(Ar,ca),M(VR,ca,null),e(ca,Xht),e(ca,Hxe),e(Hxe,zht),e(ca,Qht),e(ca,Ym),e(Ym,Wht),e(Ym,Jxe),e(Jxe,Uht),e(Ym,Hht),e(Ym,xse),e(xse,Jht),e(Ym,Yht),e(ca,Kht),M(Z7,ca,null),e(Ar,Zht),e(Ar,rt),M(XR,rt,null),e(rt,eut),e(rt,Yxe),e(Yxe,out),e(rt,rut),e(rt,zn),e(zn,tut),e(zn,Kxe),e(Kxe,aut),e(zn,nut),e(zn,Zxe),e(Zxe,sut),e(zn,lut),e(zn,e$e),e(e$e,iut),e(zn,dut),e(rt,cut),e(rt,ke),e(ke,eL),e(eL,o$e),e(o$e,mut),e(eL,fut),e(eL,$se),e($se,gut),e(eL,hut),e(ke,uut),e(ke,oL),e(oL,r$e),e(r$e,put),e(oL,_ut),e(oL,kse),e(kse,but),e(oL,vut),e(ke,Fut),e(ke,rL),e(rL,t$e),e(t$e,Tut),e(rL,Mut),e(rL,Sse),e(Sse,Eut),e(rL,Cut),e(ke,wut),e(ke,tL),e(tL,a$e),e(a$e,Aut),e(tL,Lut),e(tL,Rse),e(Rse,yut),e(tL,xut),e(ke,$ut),e(ke,aL),e(aL,n$e),e(n$e,kut),e(aL,Sut),e(aL,Pse),e(Pse,Rut),e(aL,Put),e(ke,But),e(ke,nL),e(nL,s$e),e(s$e,Iut),e(nL,Nut),e(nL,Bse),e(Bse,qut),e(nL,jut),e(ke,Dut),e(ke,sL),e(sL,l$e),e(l$e,Gut),e(sL,Out),e(sL,Ise),e(Ise,Vut),e(sL,Xut),e(ke,zut),e(ke,lL),e(lL,i$e),e(i$e,Qut),e(lL,Wut),e(lL,Nse),e(Nse,Uut),e(lL,Hut),e(ke,Jut),e(ke,iL),e(iL,d$e),e(d$e,Yut),e(iL,Kut),e(iL,qse),e(qse,Zut),e(iL,ept),e(ke,opt),e(ke,dL),e(dL,c$e),e(c$e,rpt),e(dL,tpt),e(dL,jse),e(jse,apt),e(dL,npt),e(rt,spt),M(cL,rt,null),b(m,koo,_),b(m,Km,_),e(Km,mL),e(mL,m$e),M(zR,m$e,null),e(Km,lpt),e(Km,f$e),e(f$e,ipt),b(m,Soo,_),b(m,Lr,_),M(QR,Lr,null),e(Lr,dpt),e(Lr,Zm),e(Zm,cpt),e(Zm,Dse),e(Dse,mpt),e(Zm,fpt),e(Zm,Gse),e(Gse,gpt),e(Zm,hpt),e(Lr,upt),e(Lr,WR),e(WR,ppt),e(WR,g$e),e(g$e,_pt),e(WR,bpt),e(Lr,vpt),e(Lr,ma),M(UR,ma,null),e(ma,Fpt),e(ma,h$e),e(h$e,Tpt),e(ma,Mpt),e(ma,ef),e(ef,Ept),e(ef,u$e),e(u$e,Cpt),e(ef,wpt),e(ef,Ose),e(Ose,Apt),e(ef,Lpt),e(ma,ypt),M(fL,ma,null),e(Lr,xpt),e(Lr,tt),M(HR,tt,null),e(tt,$pt),e(tt,p$e),e(p$e,kpt),e(tt,Spt),e(tt,Qn),e(Qn,Rpt),e(Qn,_$e),e(_$e,Ppt),e(Qn,Bpt),e(Qn,b$e),e(b$e,Ipt),e(Qn,Npt),e(Qn,v$e),e(v$e,qpt),e(Qn,jpt),e(tt,Dpt),e(tt,Se),e(Se,gL),e(gL,F$e),e(F$e,Gpt),e(gL,Opt),e(gL,Vse),e(Vse,Vpt),e(gL,Xpt),e(Se,zpt),e(Se,hL),e(hL,T$e),e(T$e,Qpt),e(hL,Wpt),e(hL,Xse),e(Xse,Upt),e(hL,Hpt),e(Se,Jpt),e(Se,uL),e(uL,M$e),e(M$e,Ypt),e(uL,Kpt),e(uL,zse),e(zse,Zpt),e(uL,e_t),e(Se,o_t),e(Se,pL),e(pL,E$e),e(E$e,r_t),e(pL,t_t),e(pL,Qse),e(Qse,a_t),e(pL,n_t),e(Se,s_t),e(Se,_L),e(_L,C$e),e(C$e,l_t),e(_L,i_t),e(_L,Wse),e(Wse,d_t),e(_L,c_t),e(Se,m_t),e(Se,bL),e(bL,w$e),e(w$e,f_t),e(bL,g_t),e(bL,Use),e(Use,h_t),e(bL,u_t),e(Se,p_t),e(Se,vL),e(vL,A$e),e(A$e,__t),e(vL,b_t),e(vL,Hse),e(Hse,v_t),e(vL,F_t),e(Se,T_t),e(Se,FL),e(FL,L$e),e(L$e,M_t),e(FL,E_t),e(FL,Jse),e(Jse,C_t),e(FL,w_t),e(Se,A_t),e(Se,TL),e(TL,y$e),e(y$e,L_t),e(TL,y_t),e(TL,Yse),e(Yse,x_t),e(TL,$_t),e(Se,k_t),e(Se,ML),e(ML,x$e),e(x$e,S_t),e(ML,R_t),e(ML,Kse),e(Kse,P_t),e(ML,B_t),e(tt,I_t),M(EL,tt,null),b(m,Roo,_),b(m,of,_),e(of,CL),e(CL,$$e),M(JR,$$e,null),e(of,N_t),e(of,k$e),e(k$e,q_t),b(m,Poo,_),b(m,yr,_),M(YR,yr,null),e(yr,j_t),e(yr,rf),e(rf,D_t),e(rf,Zse),e(Zse,G_t),e(rf,O_t),e(rf,ele),e(ele,V_t),e(rf,X_t),e(yr,z_t),e(yr,KR),e(KR,Q_t),e(KR,S$e),e(S$e,W_t),e(KR,U_t),e(yr,H_t),e(yr,fa),M(ZR,fa,null),e(fa,J_t),e(fa,R$e),e(R$e,Y_t),e(fa,K_t),e(fa,tf),e(tf,Z_t),e(tf,P$e),e(P$e,e2t),e(tf,o2t),e(tf,ole),e(ole,r2t),e(tf,t2t),e(fa,a2t),M(wL,fa,null),e(yr,n2t),e(yr,at),M(eP,at,null),e(at,s2t),e(at,B$e),e(B$e,l2t),e(at,i2t),e(at,Wn),e(Wn,d2t),e(Wn,I$e),e(I$e,c2t),e(Wn,m2t),e(Wn,N$e),e(N$e,f2t),e(Wn,g2t),e(Wn,q$e),e(q$e,h2t),e(Wn,u2t),e(at,p2t),e(at,Re),e(Re,AL),e(AL,j$e),e(j$e,_2t),e(AL,b2t),e(AL,rle),e(rle,v2t),e(AL,F2t),e(Re,T2t),e(Re,LL),e(LL,D$e),e(D$e,M2t),e(LL,E2t),e(LL,tle),e(tle,C2t),e(LL,w2t),e(Re,A2t),e(Re,yL),e(yL,G$e),e(G$e,L2t),e(yL,y2t),e(yL,ale),e(ale,x2t),e(yL,$2t),e(Re,k2t),e(Re,xL),e(xL,O$e),e(O$e,S2t),e(xL,R2t),e(xL,nle),e(nle,P2t),e(xL,B2t),e(Re,I2t),e(Re,$L),e($L,V$e),e(V$e,N2t),e($L,q2t),e($L,sle),e(sle,j2t),e($L,D2t),e(Re,G2t),e(Re,kL),e(kL,X$e),e(X$e,O2t),e(kL,V2t),e(kL,lle),e(lle,X2t),e(kL,z2t),e(Re,Q2t),e(Re,SL),e(SL,z$e),e(z$e,W2t),e(SL,U2t),e(SL,ile),e(ile,H2t),e(SL,J2t),e(Re,Y2t),e(Re,RL),e(RL,Q$e),e(Q$e,K2t),e(RL,Z2t),e(RL,dle),e(dle,e1t),e(RL,o1t),e(Re,r1t),e(Re,PL),e(PL,W$e),e(W$e,t1t),e(PL,a1t),e(PL,cle),e(cle,n1t),e(PL,s1t),e(Re,l1t),e(Re,BL),e(BL,U$e),e(U$e,i1t),e(BL,d1t),e(BL,mle),e(mle,c1t),e(BL,m1t),e(at,f1t),M(IL,at,null),b(m,Boo,_),b(m,af,_),e(af,NL),e(NL,H$e),M(oP,H$e,null),e(af,g1t),e(af,J$e),e(J$e,h1t),b(m,Ioo,_),b(m,xr,_),M(rP,xr,null),e(xr,u1t),e(xr,nf),e(nf,p1t),e(nf,fle),e(fle,_1t),e(nf,b1t),e(nf,gle),e(gle,v1t),e(nf,F1t),e(xr,T1t),e(xr,tP),e(tP,M1t),e(tP,Y$e),e(Y$e,E1t),e(tP,C1t),e(xr,w1t),e(xr,ga),M(aP,ga,null),e(ga,A1t),e(ga,K$e),e(K$e,L1t),e(ga,y1t),e(ga,sf),e(sf,x1t),e(sf,Z$e),e(Z$e,$1t),e(sf,k1t),e(sf,hle),e(hle,S1t),e(sf,R1t),e(ga,P1t),M(qL,ga,null),e(xr,B1t),e(xr,nt),M(nP,nt,null),e(nt,I1t),e(nt,eke),e(eke,N1t),e(nt,q1t),e(nt,Un),e(Un,j1t),e(Un,oke),e(oke,D1t),e(Un,G1t),e(Un,rke),e(rke,O1t),e(Un,V1t),e(Un,tke),e(tke,X1t),e(Un,z1t),e(nt,Q1t),e(nt,Xe),e(Xe,jL),e(jL,ake),e(ake,W1t),e(jL,U1t),e(jL,ule),e(ule,H1t),e(jL,J1t),e(Xe,Y1t),e(Xe,DL),e(DL,nke),e(nke,K1t),e(DL,Z1t),e(DL,ple),e(ple,ebt),e(DL,obt),e(Xe,rbt),e(Xe,GL),e(GL,ske),e(ske,tbt),e(GL,abt),e(GL,_le),e(_le,nbt),e(GL,sbt),e(Xe,lbt),e(Xe,OL),e(OL,lke),e(lke,ibt),e(OL,dbt),e(OL,ble),e(ble,cbt),e(OL,mbt),e(Xe,fbt),e(Xe,VL),e(VL,ike),e(ike,gbt),e(VL,hbt),e(VL,vle),e(vle,ubt),e(VL,pbt),e(Xe,_bt),e(Xe,XL),e(XL,dke),e(dke,bbt),e(XL,vbt),e(XL,Fle),e(Fle,Fbt),e(XL,Tbt),e(Xe,Mbt),e(Xe,zL),e(zL,cke),e(cke,Ebt),e(zL,Cbt),e(zL,Tle),e(Tle,wbt),e(zL,Abt),e(Xe,Lbt),e(Xe,QL),e(QL,mke),e(mke,ybt),e(QL,xbt),e(QL,Mle),e(Mle,$bt),e(QL,kbt),e(nt,Sbt),M(WL,nt,null),b(m,Noo,_),b(m,lf,_),e(lf,UL),e(UL,fke),M(sP,fke,null),e(lf,Rbt),e(lf,gke),e(gke,Pbt),b(m,qoo,_),b(m,$r,_),M(lP,$r,null),e($r,Bbt),e($r,df),e(df,Ibt),e(df,Ele),e(Ele,Nbt),e(df,qbt),e(df,Cle),e(Cle,jbt),e(df,Dbt),e($r,Gbt),e($r,iP),e(iP,Obt),e(iP,hke),e(hke,Vbt),e(iP,Xbt),e($r,zbt),e($r,ha),M(dP,ha,null),e(ha,Qbt),e(ha,uke),e(uke,Wbt),e(ha,Ubt),e(ha,cf),e(cf,Hbt),e(cf,pke),e(pke,Jbt),e(cf,Ybt),e(cf,wle),e(wle,Kbt),e(cf,Zbt),e(ha,evt),M(HL,ha,null),e($r,ovt),e($r,st),M(cP,st,null),e(st,rvt),e(st,_ke),e(_ke,tvt),e(st,avt),e(st,Hn),e(Hn,nvt),e(Hn,bke),e(bke,svt),e(Hn,lvt),e(Hn,vke),e(vke,ivt),e(Hn,dvt),e(Hn,Fke),e(Fke,cvt),e(Hn,mvt),e(st,fvt),e(st,ze),e(ze,JL),e(JL,Tke),e(Tke,gvt),e(JL,hvt),e(JL,Ale),e(Ale,uvt),e(JL,pvt),e(ze,_vt),e(ze,YL),e(YL,Mke),e(Mke,bvt),e(YL,vvt),e(YL,Lle),e(Lle,Fvt),e(YL,Tvt),e(ze,Mvt),e(ze,KL),e(KL,Eke),e(Eke,Evt),e(KL,Cvt),e(KL,yle),e(yle,wvt),e(KL,Avt),e(ze,Lvt),e(ze,ZL),e(ZL,Cke),e(Cke,yvt),e(ZL,xvt),e(ZL,xle),e(xle,$vt),e(ZL,kvt),e(ze,Svt),e(ze,ey),e(ey,wke),e(wke,Rvt),e(ey,Pvt),e(ey,$le),e($le,Bvt),e(ey,Ivt),e(ze,Nvt),e(ze,oy),e(oy,Ake),e(Ake,qvt),e(oy,jvt),e(oy,kle),e(kle,Dvt),e(oy,Gvt),e(ze,Ovt),e(ze,ry),e(ry,Lke),e(Lke,Vvt),e(ry,Xvt),e(ry,Sle),e(Sle,zvt),e(ry,Qvt),e(ze,Wvt),e(ze,ty),e(ty,yke),e(yke,Uvt),e(ty,Hvt),e(ty,Rle),e(Rle,Jvt),e(ty,Yvt),e(st,Kvt),M(ay,st,null),b(m,joo,_),b(m,mf,_),e(mf,ny),e(ny,xke),M(mP,xke,null),e(mf,Zvt),e(mf,$ke),e($ke,eFt),b(m,Doo,_),b(m,kr,_),M(fP,kr,null),e(kr,oFt),e(kr,ff),e(ff,rFt),e(ff,Ple),e(Ple,tFt),e(ff,aFt),e(ff,Ble),e(Ble,nFt),e(ff,sFt),e(kr,lFt),e(kr,gP),e(gP,iFt),e(gP,kke),e(kke,dFt),e(gP,cFt),e(kr,mFt),e(kr,ua),M(hP,ua,null),e(ua,fFt),e(ua,Ske),e(Ske,gFt),e(ua,hFt),e(ua,gf),e(gf,uFt),e(gf,Rke),e(Rke,pFt),e(gf,_Ft),e(gf,Ile),e(Ile,bFt),e(gf,vFt),e(ua,FFt),M(sy,ua,null),e(kr,TFt),e(kr,lt),M(uP,lt,null),e(lt,MFt),e(lt,Pke),e(Pke,EFt),e(lt,CFt),e(lt,Jn),e(Jn,wFt),e(Jn,Bke),e(Bke,AFt),e(Jn,LFt),e(Jn,Ike),e(Ike,yFt),e(Jn,xFt),e(Jn,Nke),e(Nke,$Ft),e(Jn,kFt),e(lt,SFt),e(lt,qke),e(qke,ly),e(ly,jke),e(jke,RFt),e(ly,PFt),e(ly,Nle),e(Nle,BFt),e(ly,IFt),e(lt,NFt),M(iy,lt,null),b(m,Goo,_),b(m,hf,_),e(hf,dy),e(dy,Dke),M(pP,Dke,null),e(hf,qFt),e(hf,Gke),e(Gke,jFt),b(m,Ooo,_),b(m,Sr,_),M(_P,Sr,null),e(Sr,DFt),e(Sr,uf),e(uf,GFt),e(uf,qle),e(qle,OFt),e(uf,VFt),e(uf,jle),e(jle,XFt),e(uf,zFt),e(Sr,QFt),e(Sr,bP),e(bP,WFt),e(bP,Oke),e(Oke,UFt),e(bP,HFt),e(Sr,JFt),e(Sr,pa),M(vP,pa,null),e(pa,YFt),e(pa,Vke),e(Vke,KFt),e(pa,ZFt),e(pa,pf),e(pf,eTt),e(pf,Xke),e(Xke,oTt),e(pf,rTt),e(pf,Dle),e(Dle,tTt),e(pf,aTt),e(pa,nTt),M(cy,pa,null),e(Sr,sTt),e(Sr,it),M(FP,it,null),e(it,lTt),e(it,zke),e(zke,iTt),e(it,dTt),e(it,Yn),e(Yn,cTt),e(Yn,Qke),e(Qke,mTt),e(Yn,fTt),e(Yn,Wke),e(Wke,gTt),e(Yn,hTt),e(Yn,Uke),e(Uke,uTt),e(Yn,pTt),e(it,_Tt),e(it,TP),e(TP,my),e(my,Hke),e(Hke,bTt),e(my,vTt),e(my,Gle),e(Gle,FTt),e(my,TTt),e(TP,MTt),e(TP,fy),e(fy,Jke),e(Jke,ETt),e(fy,CTt),e(fy,Ole),e(Ole,wTt),e(fy,ATt),e(it,LTt),M(gy,it,null),b(m,Voo,_),b(m,_f,_),e(_f,hy),e(hy,Yke),M(MP,Yke,null),e(_f,yTt),e(_f,Kke),e(Kke,xTt),b(m,Xoo,_),b(m,Rr,_),M(EP,Rr,null),e(Rr,$Tt),e(Rr,bf),e(bf,kTt),e(bf,Vle),e(Vle,STt),e(bf,RTt),e(bf,Xle),e(Xle,PTt),e(bf,BTt),e(Rr,ITt),e(Rr,CP),e(CP,NTt),e(CP,Zke),e(Zke,qTt),e(CP,jTt),e(Rr,DTt),e(Rr,_a),M(wP,_a,null),e(_a,GTt),e(_a,eSe),e(eSe,OTt),e(_a,VTt),e(_a,vf),e(vf,XTt),e(vf,oSe),e(oSe,zTt),e(vf,QTt),e(vf,zle),e(zle,WTt),e(vf,UTt),e(_a,HTt),M(uy,_a,null),e(Rr,JTt),e(Rr,dt),M(AP,dt,null),e(dt,YTt),e(dt,rSe),e(rSe,KTt),e(dt,ZTt),e(dt,Kn),e(Kn,eMt),e(Kn,tSe),e(tSe,oMt),e(Kn,rMt),e(Kn,aSe),e(aSe,tMt),e(Kn,aMt),e(Kn,nSe),e(nSe,nMt),e(Kn,sMt),e(dt,lMt),e(dt,sSe),e(sSe,py),e(py,lSe),e(lSe,iMt),e(py,dMt),e(py,Qle),e(Qle,cMt),e(py,mMt),e(dt,fMt),M(_y,dt,null),zoo=!0},p(m,[_]){const LP={};_&2&&(LP.$$scope={dirty:_,ctx:m}),yf.$set(LP);const iSe={};_&2&&(iSe.$$scope={dirty:_,ctx:m}),Zh.$set(iSe);const dSe={};_&2&&(dSe.$$scope={dirty:_,ctx:m}),Iu.$set(dSe);const cSe={};_&2&&(cSe.$$scope={dirty:_,ctx:m}),Lp.$set(cSe);const yP={};_&2&&(yP.$$scope={dirty:_,ctx:m}),yp.$set(yP);const mSe={};_&2&&(mSe.$$scope={dirty:_,ctx:m}),Zp.$set(mSe);const Zn={};_&2&&(Zn.$$scope={dirty:_,ctx:m}),e_.$set(Zn);const fSe={};_&2&&(fSe.$$scope={dirty:_,ctx:m}),t_.$set(fSe);const gSe={};_&2&&(gSe.$$scope={dirty:_,ctx:m}),T1.$set(gSe);const hSe={};_&2&&(hSe.$$scope={dirty:_,ctx:m}),E1.$set(hSe);const xP={};_&2&&(xP.$$scope={dirty:_,ctx:m}),vb.$set(xP);const uSe={};_&2&&(uSe.$$scope={dirty:_,ctx:m}),Tb.$set(uSe);const $P={};_&2&&($P.$$scope={dirty:_,ctx:m}),mv.$set($P);const pSe={};_&2&&(pSe.$$scope={dirty:_,ctx:m}),gv.$set(pSe);const kP={};_&2&&(kP.$$scope={dirty:_,ctx:m}),eF.$set(kP);const _Se={};_&2&&(_Se.$$scope={dirty:_,ctx:m}),rF.$set(_Se);const bSe={};_&2&&(bSe.$$scope={dirty:_,ctx:m}),CF.$set(bSe);const vSe={};_&2&&(vSe.$$scope={dirty:_,ctx:m}),AF.$set(vSe);const Ff={};_&2&&(Ff.$$scope={dirty:_,ctx:m}),xT.$set(Ff);const FSe={};_&2&&(FSe.$$scope={dirty:_,ctx:m}),kT.$set(FSe);const TSe={};_&2&&(TSe.$$scope={dirty:_,ctx:m}),mM.$set(TSe);const MSe={};_&2&&(MSe.$$scope={dirty:_,ctx:m}),gM.$set(MSe);const SP={};_&2&&(SP.$$scope={dirty:_,ctx:m}),MM.$set(SP);const ESe={};_&2&&(ESe.$$scope={dirty:_,ctx:m}),CM.$set(ESe);const CSe={};_&2&&(CSe.$$scope={dirty:_,ctx:m}),fE.$set(CSe);const wSe={};_&2&&(wSe.$$scope={dirty:_,ctx:m}),hE.$set(wSe);const ht={};_&2&&(ht.$$scope={dirty:_,ctx:m}),l4.$set(ht);const RP={};_&2&&(RP.$$scope={dirty:_,ctx:m}),d4.$set(RP);const ASe={};_&2&&(ASe.$$scope={dirty:_,ctx:m}),f4.$set(ASe);const PP={};_&2&&(PP.$$scope={dirty:_,ctx:m}),h4.$set(PP);const LSe={};_&2&&(LSe.$$scope={dirty:_,ctx:m}),v4.$set(LSe);const ut={};_&2&&(ut.$$scope={dirty:_,ctx:m}),T4.$set(ut);const ySe={};_&2&&(ySe.$$scope={dirty:_,ctx:m}),q4.$set(ySe);const Tf={};_&2&&(Tf.$$scope={dirty:_,ctx:m}),D4.$set(Tf);const xSe={};_&2&&(xSe.$$scope={dirty:_,ctx:m}),V4.$set(xSe);const $Se={};_&2&&($Se.$$scope={dirty:_,ctx:m}),z4.$set($Se);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),U4.$set(L);const by={};_&2&&(by.$$scope={dirty:_,ctx:m}),J4.$set(by);const kSe={};_&2&&(kSe.$$scope={dirty:_,ctx:m}),Z4.$set(kSe);const SSe={};_&2&&(SSe.$$scope={dirty:_,ctx:m}),oC.$set(SSe);const vy={};_&2&&(vy.$$scope={dirty:_,ctx:m}),fC.$set(vy);const RSe={};_&2&&(RSe.$$scope={dirty:_,ctx:m}),hC.$set(RSe);const PSe={};_&2&&(PSe.$$scope={dirty:_,ctx:m}),TC.$set(PSe);const Fy={};_&2&&(Fy.$$scope={dirty:_,ctx:m}),EC.$set(Fy);const BSe={};_&2&&(BSe.$$scope={dirty:_,ctx:m}),BC.$set(BSe);const ISe={};_&2&&(ISe.$$scope={dirty:_,ctx:m}),NC.$set(ISe);const Ty={};_&2&&(Ty.$$scope={dirty:_,ctx:m}),GC.$set(Ty);const NSe={};_&2&&(NSe.$$scope={dirty:_,ctx:m}),VC.$set(NSe);const qSe={};_&2&&(qSe.$$scope={dirty:_,ctx:m}),JC.$set(qSe);const My={};_&2&&(My.$$scope={dirty:_,ctx:m}),KC.$set(My);const jSe={};_&2&&(jSe.$$scope={dirty:_,ctx:m}),a3.$set(jSe);const DSe={};_&2&&(DSe.$$scope={dirty:_,ctx:m}),s3.$set(DSe);const Ey={};_&2&&(Ey.$$scope={dirty:_,ctx:m}),f3.$set(Ey);const GSe={};_&2&&(GSe.$$scope={dirty:_,ctx:m}),h3.$set(GSe);const OSe={};_&2&&(OSe.$$scope={dirty:_,ctx:m}),_3.$set(OSe);const Cy={};_&2&&(Cy.$$scope={dirty:_,ctx:m}),v3.$set(Cy);const VSe={};_&2&&(VSe.$$scope={dirty:_,ctx:m}),A3.$set(VSe);const XSe={};_&2&&(XSe.$$scope={dirty:_,ctx:m}),y3.$set(XSe);const wy={};_&2&&(wy.$$scope={dirty:_,ctx:m}),k3.$set(wy);const zSe={};_&2&&(zSe.$$scope={dirty:_,ctx:m}),R3.$set(zSe);const QSe={};_&2&&(QSe.$$scope={dirty:_,ctx:m}),P5.$set(QSe);const Ay={};_&2&&(Ay.$$scope={dirty:_,ctx:m}),I5.$set(Ay);const WSe={};_&2&&(WSe.$$scope={dirty:_,ctx:m}),s0.$set(WSe);const USe={};_&2&&(USe.$$scope={dirty:_,ctx:m}),i0.$set(USe);const Ly={};_&2&&(Ly.$$scope={dirty:_,ctx:m}),E0.$set(Ly);const HSe={};_&2&&(HSe.$$scope={dirty:_,ctx:m}),w0.$set(HSe);const JSe={};_&2&&(JSe.$$scope={dirty:_,ctx:m}),P0.$set(JSe);const yy={};_&2&&(yy.$$scope={dirty:_,ctx:m}),I0.$set(yy);const YSe={};_&2&&(YSe.$$scope={dirty:_,ctx:m}),D0.$set(YSe);const KSe={};_&2&&(KSe.$$scope={dirty:_,ctx:m}),O0.$set(KSe);const xy={};_&2&&(xy.$$scope={dirty:_,ctx:m}),dw.$set(xy);const ZSe={};_&2&&(ZSe.$$scope={dirty:_,ctx:m}),mw.$set(ZSe);const eRe={};_&2&&(eRe.$$scope={dirty:_,ctx:m}),Mw.$set(eRe);const $y={};_&2&&($y.$$scope={dirty:_,ctx:m}),Cw.$set($y);const oRe={};_&2&&(oRe.$$scope={dirty:_,ctx:m}),Kw.$set(oRe);const rRe={};_&2&&(rRe.$$scope={dirty:_,ctx:m}),eA.$set(rRe);const ky={};_&2&&(ky.$$scope={dirty:_,ctx:m}),bA.$set(ky);const tRe={};_&2&&(tRe.$$scope={dirty:_,ctx:m}),FA.$set(tRe);const aRe={};_&2&&(aRe.$$scope={dirty:_,ctx:m}),EA.$set(aRe);const Sy={};_&2&&(Sy.$$scope={dirty:_,ctx:m}),wA.$set(Sy);const nRe={};_&2&&(nRe.$$scope={dirty:_,ctx:m}),LA.$set(nRe);const sRe={};_&2&&(sRe.$$scope={dirty:_,ctx:m}),xA.$set(sRe);const Ry={};_&2&&(Ry.$$scope={dirty:_,ctx:m}),kA.$set(Ry);const lRe={};_&2&&(lRe.$$scope={dirty:_,ctx:m}),RA.$set(lRe);const iRe={};_&2&&(iRe.$$scope={dirty:_,ctx:m}),o6.$set(iRe);const Py={};_&2&&(Py.$$scope={dirty:_,ctx:m}),t6.$set(Py);const dRe={};_&2&&(dRe.$$scope={dirty:_,ctx:m}),w6.$set(dRe);const cRe={};_&2&&(cRe.$$scope={dirty:_,ctx:m}),L6.$set(cRe);const By={};_&2&&(By.$$scope={dirty:_,ctx:m}),x6.$set(By);const mRe={};_&2&&(mRe.$$scope={dirty:_,ctx:m}),k6.$set(mRe);const fRe={};_&2&&(fRe.$$scope={dirty:_,ctx:m}),R6.$set(fRe);const Iy={};_&2&&(Iy.$$scope={dirty:_,ctx:m}),B6.$set(Iy);const gRe={};_&2&&(gRe.$$scope={dirty:_,ctx:m}),d7.$set(gRe);const hRe={};_&2&&(hRe.$$scope={dirty:_,ctx:m}),m7.$set(hRe);const Ny={};_&2&&(Ny.$$scope={dirty:_,ctx:m}),M7.$set(Ny);const uRe={};_&2&&(uRe.$$scope={dirty:_,ctx:m}),C7.$set(uRe);const pRe={};_&2&&(pRe.$$scope={dirty:_,ctx:m}),q7.$set(pRe);const qy={};_&2&&(qy.$$scope={dirty:_,ctx:m}),D7.$set(qy);const _Re={};_&2&&(_Re.$$scope={dirty:_,ctx:m}),Y7.$set(_Re);const bRe={};_&2&&(bRe.$$scope={dirty:_,ctx:m}),Z7.$set(bRe);const jy={};_&2&&(jy.$$scope={dirty:_,ctx:m}),cL.$set(jy);const vRe={};_&2&&(vRe.$$scope={dirty:_,ctx:m}),fL.$set(vRe);const FRe={};_&2&&(FRe.$$scope={dirty:_,ctx:m}),EL.$set(FRe);const Dy={};_&2&&(Dy.$$scope={dirty:_,ctx:m}),wL.$set(Dy);const TRe={};_&2&&(TRe.$$scope={dirty:_,ctx:m}),IL.$set(TRe);const MRe={};_&2&&(MRe.$$scope={dirty:_,ctx:m}),qL.$set(MRe);const Gy={};_&2&&(Gy.$$scope={dirty:_,ctx:m}),WL.$set(Gy);const ERe={};_&2&&(ERe.$$scope={dirty:_,ctx:m}),HL.$set(ERe);const CRe={};_&2&&(CRe.$$scope={dirty:_,ctx:m}),ay.$set(CRe);const Oy={};_&2&&(Oy.$$scope={dirty:_,ctx:m}),sy.$set(Oy);const wRe={};_&2&&(wRe.$$scope={dirty:_,ctx:m}),iy.$set(wRe);const ARe={};_&2&&(ARe.$$scope={dirty:_,ctx:m}),cy.$set(ARe);const Vy={};_&2&&(Vy.$$scope={dirty:_,ctx:m}),gy.$set(Vy);const LRe={};_&2&&(LRe.$$scope={dirty:_,ctx:m}),uy.$set(LRe);const yRe={};_&2&&(yRe.$$scope={dirty:_,ctx:m}),_y.$set(yRe)},i(m){zoo||(E(d.$$.fragment,m),E(Qa.$$.fragment,m),E(K9.$$.fragment,m),E(Z9.$$.fragment,m),E(yf.$$.fragment,m),E(ex.$$.fragment,m),E(ox.$$.fragment,m),E(ax.$$.fragment,m),E(Zh.$$.fragment,m),E(nx.$$.fragment,m),E(sx.$$.fragment,m),E(lx.$$.fragment,m),E(cx.$$.fragment,m),E(Iu.$$.fragment,m),E(mx.$$.fragment,m),E(fx.$$.fragment,m),E(gx.$$.fragment,m),E(px.$$.fragment,m),E(Lp.$$.fragment,m),E(yp.$$.fragment,m),E(_x.$$.fragment,m),E(bx.$$.fragment,m),E(vx.$$.fragment,m),E(Mx.$$.fragment,m),E(Zp.$$.fragment,m),E(e_.$$.fragment,m),E(Ex.$$.fragment,m),E(Cx.$$.fragment,m),E(wx.$$.fragment,m),E(Lx.$$.fragment,m),E(t_.$$.fragment,m),E(yx.$$.fragment,m),E(T1.$$.fragment,m),E(xx.$$.fragment,m),E($x.$$.fragment,m),E(Sx.$$.fragment,m),E(E1.$$.fragment,m),E(Rx.$$.fragment,m),E(vb.$$.fragment,m),E(Px.$$.fragment,m),E(Bx.$$.fragment,m),E(Nx.$$.fragment,m),E(Tb.$$.fragment,m),E(qx.$$.fragment,m),E(mv.$$.fragment,m),E(jx.$$.fragment,m),E(Dx.$$.fragment,m),E(Ox.$$.fragment,m),E(gv.$$.fragment,m),E(Vx.$$.fragment,m),E(eF.$$.fragment,m),E(Xx.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(rF.$$.fragment,m),E(Ux.$$.fragment,m),E(CF.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(AF.$$.fragment,m),E(Zx.$$.fragment,m),E(xT.$$.fragment,m),E(e$.$$.fragment,m),E(o$.$$.fragment,m),E(t$.$$.fragment,m),E(kT.$$.fragment,m),E(a$.$$.fragment,m),E(mM.$$.fragment,m),E(n$.$$.fragment,m),E(s$.$$.fragment,m),E(i$.$$.fragment,m),E(gM.$$.fragment,m),E(d$.$$.fragment,m),E(MM.$$.fragment,m),E(c$.$$.fragment,m),E(m$.$$.fragment,m),E(g$.$$.fragment,m),E(CM.$$.fragment,m),E(h$.$$.fragment,m),E(fE.$$.fragment,m),E(u$.$$.fragment,m),E(p$.$$.fragment,m),E(b$.$$.fragment,m),E(hE.$$.fragment,m),E(v$.$$.fragment,m),E(l4.$$.fragment,m),E(F$.$$.fragment,m),E(T$.$$.fragment,m),E(E$.$$.fragment,m),E(d4.$$.fragment,m),E(C$.$$.fragment,m),E(f4.$$.fragment,m),E(w$.$$.fragment,m),E(A$.$$.fragment,m),E(y$.$$.fragment,m),E(h4.$$.fragment,m),E(x$.$$.fragment,m),E(v4.$$.fragment,m),E($$.$$.fragment,m),E(k$.$$.fragment,m),E(R$.$$.fragment,m),E(T4.$$.fragment,m),E(P$.$$.fragment,m),E(q4.$$.fragment,m),E(B$.$$.fragment,m),E(I$.$$.fragment,m),E(q$.$$.fragment,m),E(D4.$$.fragment,m),E(j$.$$.fragment,m),E(V4.$$.fragment,m),E(D$.$$.fragment,m),E(G$.$$.fragment,m),E(V$.$$.fragment,m),E(z4.$$.fragment,m),E(X$.$$.fragment,m),E(U4.$$.fragment,m),E(z$.$$.fragment,m),E(Q$.$$.fragment,m),E(U$.$$.fragment,m),E(J4.$$.fragment,m),E(H$.$$.fragment,m),E(Z4.$$.fragment,m),E(J$.$$.fragment,m),E(Y$.$$.fragment,m),E(Z$.$$.fragment,m),E(oC.$$.fragment,m),E(ek.$$.fragment,m),E(fC.$$.fragment,m),E(ok.$$.fragment,m),E(rk.$$.fragment,m),E(ak.$$.fragment,m),E(hC.$$.fragment,m),E(nk.$$.fragment,m),E(TC.$$.fragment,m),E(sk.$$.fragment,m),E(lk.$$.fragment,m),E(dk.$$.fragment,m),E(EC.$$.fragment,m),E(ck.$$.fragment,m),E(BC.$$.fragment,m),E(mk.$$.fragment,m),E(fk.$$.fragment,m),E(hk.$$.fragment,m),E(NC.$$.fragment,m),E(uk.$$.fragment,m),E(GC.$$.fragment,m),E(_k.$$.fragment,m),E(bk.$$.fragment,m),E(Fk.$$.fragment,m),E(VC.$$.fragment,m),E(Tk.$$.fragment,m),E(JC.$$.fragment,m),E(Mk.$$.fragment,m),E(Ek.$$.fragment,m),E(wk.$$.fragment,m),E(KC.$$.fragment,m),E(Ak.$$.fragment,m),E(a3.$$.fragment,m),E(Lk.$$.fragment,m),E(yk.$$.fragment,m),E($k.$$.fragment,m),E(s3.$$.fragment,m),E(kk.$$.fragment,m),E(f3.$$.fragment,m),E(Sk.$$.fragment,m),E(Rk.$$.fragment,m),E(Bk.$$.fragment,m),E(h3.$$.fragment,m),E(Ik.$$.fragment,m),E(_3.$$.fragment,m),E(Nk.$$.fragment,m),E(qk.$$.fragment,m),E(Dk.$$.fragment,m),E(v3.$$.fragment,m),E(Gk.$$.fragment,m),E(A3.$$.fragment,m),E(Ok.$$.fragment,m),E(Vk.$$.fragment,m),E(zk.$$.fragment,m),E(y3.$$.fragment,m),E(Qk.$$.fragment,m),E(k3.$$.fragment,m),E(Wk.$$.fragment,m),E(Uk.$$.fragment,m),E(Jk.$$.fragment,m),E(R3.$$.fragment,m),E(Yk.$$.fragment,m),E(P5.$$.fragment,m),E(Kk.$$.fragment,m),E(Zk.$$.fragment,m),E(oS.$$.fragment,m),E(I5.$$.fragment,m),E(rS.$$.fragment,m),E(s0.$$.fragment,m),E(tS.$$.fragment,m),E(aS.$$.fragment,m),E(sS.$$.fragment,m),E(i0.$$.fragment,m),E(lS.$$.fragment,m),E(E0.$$.fragment,m),E(iS.$$.fragment,m),E(dS.$$.fragment,m),E(mS.$$.fragment,m),E(w0.$$.fragment,m),E(fS.$$.fragment,m),E(P0.$$.fragment,m),E(gS.$$.fragment,m),E(hS.$$.fragment,m),E(pS.$$.fragment,m),E(I0.$$.fragment,m),E(_S.$$.fragment,m),E(D0.$$.fragment,m),E(bS.$$.fragment,m),E(vS.$$.fragment,m),E(TS.$$.fragment,m),E(O0.$$.fragment,m),E(MS.$$.fragment,m),E(dw.$$.fragment,m),E(ES.$$.fragment,m),E(CS.$$.fragment,m),E(AS.$$.fragment,m),E(mw.$$.fragment,m),E(LS.$$.fragment,m),E(Mw.$$.fragment,m),E(yS.$$.fragment,m),E(xS.$$.fragment,m),E(kS.$$.fragment,m),E(Cw.$$.fragment,m),E(SS.$$.fragment,m),E(Kw.$$.fragment,m),E(RS.$$.fragment,m),E(PS.$$.fragment,m),E(IS.$$.fragment,m),E(eA.$$.fragment,m),E(NS.$$.fragment,m),E(bA.$$.fragment,m),E(qS.$$.fragment,m),E(jS.$$.fragment,m),E(GS.$$.fragment,m),E(FA.$$.fragment,m),E(OS.$$.fragment,m),E(EA.$$.fragment,m),E(XS.$$.fragment,m),E(zS.$$.fragment,m),E(WS.$$.fragment,m),E(wA.$$.fragment,m),E(US.$$.fragment,m),E(LA.$$.fragment,m),E(HS.$$.fragment,m),E(JS.$$.fragment,m),E(KS.$$.fragment,m),E(xA.$$.fragment,m),E(ZS.$$.fragment,m),E(kA.$$.fragment,m),E(eR.$$.fragment,m),E(oR.$$.fragment,m),E(tR.$$.fragment,m),E(RA.$$.fragment,m),E(aR.$$.fragment,m),E(o6.$$.fragment,m),E(nR.$$.fragment,m),E(sR.$$.fragment,m),E(iR.$$.fragment,m),E(t6.$$.fragment,m),E(dR.$$.fragment,m),E(w6.$$.fragment,m),E(cR.$$.fragment,m),E(mR.$$.fragment,m),E(gR.$$.fragment,m),E(L6.$$.fragment,m),E(hR.$$.fragment,m),E(x6.$$.fragment,m),E(uR.$$.fragment,m),E(pR.$$.fragment,m),E(bR.$$.fragment,m),E(k6.$$.fragment,m),E(vR.$$.fragment,m),E(R6.$$.fragment,m),E(FR.$$.fragment,m),E(TR.$$.fragment,m),E(ER.$$.fragment,m),E(B6.$$.fragment,m),E(CR.$$.fragment,m),E(d7.$$.fragment,m),E(wR.$$.fragment,m),E(AR.$$.fragment,m),E(yR.$$.fragment,m),E(m7.$$.fragment,m),E(xR.$$.fragment,m),E(M7.$$.fragment,m),E($R.$$.fragment,m),E(kR.$$.fragment,m),E(RR.$$.fragment,m),E(C7.$$.fragment,m),E(PR.$$.fragment,m),E(q7.$$.fragment,m),E(BR.$$.fragment,m),E(IR.$$.fragment,m),E(qR.$$.fragment,m),E(D7.$$.fragment,m),E(jR.$$.fragment,m),E(Y7.$$.fragment,m),E(DR.$$.fragment,m),E(GR.$$.fragment,m),E(VR.$$.fragment,m),E(Z7.$$.fragment,m),E(XR.$$.fragment,m),E(cL.$$.fragment,m),E(zR.$$.fragment,m),E(QR.$$.fragment,m),E(UR.$$.fragment,m),E(fL.$$.fragment,m),E(HR.$$.fragment,m),E(EL.$$.fragment,m),E(JR.$$.fragment,m),E(YR.$$.fragment,m),E(ZR.$$.fragment,m),E(wL.$$.fragment,m),E(eP.$$.fragment,m),E(IL.$$.fragment,m),E(oP.$$.fragment,m),E(rP.$$.fragment,m),E(aP.$$.fragment,m),E(qL.$$.fragment,m),E(nP.$$.fragment,m),E(WL.$$.fragment,m),E(sP.$$.fragment,m),E(lP.$$.fragment,m),E(dP.$$.fragment,m),E(HL.$$.fragment,m),E(cP.$$.fragment,m),E(ay.$$.fragment,m),E(mP.$$.fragment,m),E(fP.$$.fragment,m),E(hP.$$.fragment,m),E(sy.$$.fragment,m),E(uP.$$.fragment,m),E(iy.$$.fragment,m),E(pP.$$.fragment,m),E(_P.$$.fragment,m),E(vP.$$.fragment,m),E(cy.$$.fragment,m),E(FP.$$.fragment,m),E(gy.$$.fragment,m),E(MP.$$.fragment,m),E(EP.$$.fragment,m),E(wP.$$.fragment,m),E(uy.$$.fragment,m),E(AP.$$.fragment,m),E(_y.$$.fragment,m),zoo=!0)},o(m){C(d.$$.fragment,m),C(Qa.$$.fragment,m),C(K9.$$.fragment,m),C(Z9.$$.fragment,m),C(yf.$$.fragment,m),C(ex.$$.fragment,m),C(ox.$$.fragment,m),C(ax.$$.fragment,m),C(Zh.$$.fragment,m),C(nx.$$.fragment,m),C(sx.$$.fragment,m),C(lx.$$.fragment,m),C(cx.$$.fragment,m),C(Iu.$$.fragment,m),C(mx.$$.fragment,m),C(fx.$$.fragment,m),C(gx.$$.fragment,m),C(px.$$.fragment,m),C(Lp.$$.fragment,m),C(yp.$$.fragment,m),C(_x.$$.fragment,m),C(bx.$$.fragment,m),C(vx.$$.fragment,m),C(Mx.$$.fragment,m),C(Zp.$$.fragment,m),C(e_.$$.fragment,m),C(Ex.$$.fragment,m),C(Cx.$$.fragment,m),C(wx.$$.fragment,m),C(Lx.$$.fragment,m),C(t_.$$.fragment,m),C(yx.$$.fragment,m),C(T1.$$.fragment,m),C(xx.$$.fragment,m),C($x.$$.fragment,m),C(Sx.$$.fragment,m),C(E1.$$.fragment,m),C(Rx.$$.fragment,m),C(vb.$$.fragment,m),C(Px.$$.fragment,m),C(Bx.$$.fragment,m),C(Nx.$$.fragment,m),C(Tb.$$.fragment,m),C(qx.$$.fragment,m),C(mv.$$.fragment,m),C(jx.$$.fragment,m),C(Dx.$$.fragment,m),C(Ox.$$.fragment,m),C(gv.$$.fragment,m),C(Vx.$$.fragment,m),C(eF.$$.fragment,m),C(Xx.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(rF.$$.fragment,m),C(Ux.$$.fragment,m),C(CF.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(AF.$$.fragment,m),C(Zx.$$.fragment,m),C(xT.$$.fragment,m),C(e$.$$.fragment,m),C(o$.$$.fragment,m),C(t$.$$.fragment,m),C(kT.$$.fragment,m),C(a$.$$.fragment,m),C(mM.$$.fragment,m),C(n$.$$.fragment,m),C(s$.$$.fragment,m),C(i$.$$.fragment,m),C(gM.$$.fragment,m),C(d$.$$.fragment,m),C(MM.$$.fragment,m),C(c$.$$.fragment,m),C(m$.$$.fragment,m),C(g$.$$.fragment,m),C(CM.$$.fragment,m),C(h$.$$.fragment,m),C(fE.$$.fragment,m),C(u$.$$.fragment,m),C(p$.$$.fragment,m),C(b$.$$.fragment,m),C(hE.$$.fragment,m),C(v$.$$.fragment,m),C(l4.$$.fragment,m),C(F$.$$.fragment,m),C(T$.$$.fragment,m),C(E$.$$.fragment,m),C(d4.$$.fragment,m),C(C$.$$.fragment,m),C(f4.$$.fragment,m),C(w$.$$.fragment,m),C(A$.$$.fragment,m),C(y$.$$.fragment,m),C(h4.$$.fragment,m),C(x$.$$.fragment,m),C(v4.$$.fragment,m),C($$.$$.fragment,m),C(k$.$$.fragment,m),C(R$.$$.fragment,m),C(T4.$$.fragment,m),C(P$.$$.fragment,m),C(q4.$$.fragment,m),C(B$.$$.fragment,m),C(I$.$$.fragment,m),C(q$.$$.fragment,m),C(D4.$$.fragment,m),C(j$.$$.fragment,m),C(V4.$$.fragment,m),C(D$.$$.fragment,m),C(G$.$$.fragment,m),C(V$.$$.fragment,m),C(z4.$$.fragment,m),C(X$.$$.fragment,m),C(U4.$$.fragment,m),C(z$.$$.fragment,m),C(Q$.$$.fragment,m),C(U$.$$.fragment,m),C(J4.$$.fragment,m),C(H$.$$.fragment,m),C(Z4.$$.fragment,m),C(J$.$$.fragment,m),C(Y$.$$.fragment,m),C(Z$.$$.fragment,m),C(oC.$$.fragment,m),C(ek.$$.fragment,m),C(fC.$$.fragment,m),C(ok.$$.fragment,m),C(rk.$$.fragment,m),C(ak.$$.fragment,m),C(hC.$$.fragment,m),C(nk.$$.fragment,m),C(TC.$$.fragment,m),C(sk.$$.fragment,m),C(lk.$$.fragment,m),C(dk.$$.fragment,m),C(EC.$$.fragment,m),C(ck.$$.fragment,m),C(BC.$$.fragment,m),C(mk.$$.fragment,m),C(fk.$$.fragment,m),C(hk.$$.fragment,m),C(NC.$$.fragment,m),C(uk.$$.fragment,m),C(GC.$$.fragment,m),C(_k.$$.fragment,m),C(bk.$$.fragment,m),C(Fk.$$.fragment,m),C(VC.$$.fragment,m),C(Tk.$$.fragment,m),C(JC.$$.fragment,m),C(Mk.$$.fragment,m),C(Ek.$$.fragment,m),C(wk.$$.fragment,m),C(KC.$$.fragment,m),C(Ak.$$.fragment,m),C(a3.$$.fragment,m),C(Lk.$$.fragment,m),C(yk.$$.fragment,m),C($k.$$.fragment,m),C(s3.$$.fragment,m),C(kk.$$.fragment,m),C(f3.$$.fragment,m),C(Sk.$$.fragment,m),C(Rk.$$.fragment,m),C(Bk.$$.fragment,m),C(h3.$$.fragment,m),C(Ik.$$.fragment,m),C(_3.$$.fragment,m),C(Nk.$$.fragment,m),C(qk.$$.fragment,m),C(Dk.$$.fragment,m),C(v3.$$.fragment,m),C(Gk.$$.fragment,m),C(A3.$$.fragment,m),C(Ok.$$.fragment,m),C(Vk.$$.fragment,m),C(zk.$$.fragment,m),C(y3.$$.fragment,m),C(Qk.$$.fragment,m),C(k3.$$.fragment,m),C(Wk.$$.fragment,m),C(Uk.$$.fragment,m),C(Jk.$$.fragment,m),C(R3.$$.fragment,m),C(Yk.$$.fragment,m),C(P5.$$.fragment,m),C(Kk.$$.fragment,m),C(Zk.$$.fragment,m),C(oS.$$.fragment,m),C(I5.$$.fragment,m),C(rS.$$.fragment,m),C(s0.$$.fragment,m),C(tS.$$.fragment,m),C(aS.$$.fragment,m),C(sS.$$.fragment,m),C(i0.$$.fragment,m),C(lS.$$.fragment,m),C(E0.$$.fragment,m),C(iS.$$.fragment,m),C(dS.$$.fragment,m),C(mS.$$.fragment,m),C(w0.$$.fragment,m),C(fS.$$.fragment,m),C(P0.$$.fragment,m),C(gS.$$.fragment,m),C(hS.$$.fragment,m),C(pS.$$.fragment,m),C(I0.$$.fragment,m),C(_S.$$.fragment,m),C(D0.$$.fragment,m),C(bS.$$.fragment,m),C(vS.$$.fragment,m),C(TS.$$.fragment,m),C(O0.$$.fragment,m),C(MS.$$.fragment,m),C(dw.$$.fragment,m),C(ES.$$.fragment,m),C(CS.$$.fragment,m),C(AS.$$.fragment,m),C(mw.$$.fragment,m),C(LS.$$.fragment,m),C(Mw.$$.fragment,m),C(yS.$$.fragment,m),C(xS.$$.fragment,m),C(kS.$$.fragment,m),C(Cw.$$.fragment,m),C(SS.$$.fragment,m),C(Kw.$$.fragment,m),C(RS.$$.fragment,m),C(PS.$$.fragment,m),C(IS.$$.fragment,m),C(eA.$$.fragment,m),C(NS.$$.fragment,m),C(bA.$$.fragment,m),C(qS.$$.fragment,m),C(jS.$$.fragment,m),C(GS.$$.fragment,m),C(FA.$$.fragment,m),C(OS.$$.fragment,m),C(EA.$$.fragment,m),C(XS.$$.fragment,m),C(zS.$$.fragment,m),C(WS.$$.fragment,m),C(wA.$$.fragment,m),C(US.$$.fragment,m),C(LA.$$.fragment,m),C(HS.$$.fragment,m),C(JS.$$.fragment,m),C(KS.$$.fragment,m),C(xA.$$.fragment,m),C(ZS.$$.fragment,m),C(kA.$$.fragment,m),C(eR.$$.fragment,m),C(oR.$$.fragment,m),C(tR.$$.fragment,m),C(RA.$$.fragment,m),C(aR.$$.fragment,m),C(o6.$$.fragment,m),C(nR.$$.fragment,m),C(sR.$$.fragment,m),C(iR.$$.fragment,m),C(t6.$$.fragment,m),C(dR.$$.fragment,m),C(w6.$$.fragment,m),C(cR.$$.fragment,m),C(mR.$$.fragment,m),C(gR.$$.fragment,m),C(L6.$$.fragment,m),C(hR.$$.fragment,m),C(x6.$$.fragment,m),C(uR.$$.fragment,m),C(pR.$$.fragment,m),C(bR.$$.fragment,m),C(k6.$$.fragment,m),C(vR.$$.fragment,m),C(R6.$$.fragment,m),C(FR.$$.fragment,m),C(TR.$$.fragment,m),C(ER.$$.fragment,m),C(B6.$$.fragment,m),C(CR.$$.fragment,m),C(d7.$$.fragment,m),C(wR.$$.fragment,m),C(AR.$$.fragment,m),C(yR.$$.fragment,m),C(m7.$$.fragment,m),C(xR.$$.fragment,m),C(M7.$$.fragment,m),C($R.$$.fragment,m),C(kR.$$.fragment,m),C(RR.$$.fragment,m),C(C7.$$.fragment,m),C(PR.$$.fragment,m),C(q7.$$.fragment,m),C(BR.$$.fragment,m),C(IR.$$.fragment,m),C(qR.$$.fragment,m),C(D7.$$.fragment,m),C(jR.$$.fragment,m),C(Y7.$$.fragment,m),C(DR.$$.fragment,m),C(GR.$$.fragment,m),C(VR.$$.fragment,m),C(Z7.$$.fragment,m),C(XR.$$.fragment,m),C(cL.$$.fragment,m),C(zR.$$.fragment,m),C(QR.$$.fragment,m),C(UR.$$.fragment,m),C(fL.$$.fragment,m),C(HR.$$.fragment,m),C(EL.$$.fragment,m),C(JR.$$.fragment,m),C(YR.$$.fragment,m),C(ZR.$$.fragment,m),C(wL.$$.fragment,m),C(eP.$$.fragment,m),C(IL.$$.fragment,m),C(oP.$$.fragment,m),C(rP.$$.fragment,m),C(aP.$$.fragment,m),C(qL.$$.fragment,m),C(nP.$$.fragment,m),C(WL.$$.fragment,m),C(sP.$$.fragment,m),C(lP.$$.fragment,m),C(dP.$$.fragment,m),C(HL.$$.fragment,m),C(cP.$$.fragment,m),C(ay.$$.fragment,m),C(mP.$$.fragment,m),C(fP.$$.fragment,m),C(hP.$$.fragment,m),C(sy.$$.fragment,m),C(uP.$$.fragment,m),C(iy.$$.fragment,m),C(pP.$$.fragment,m),C(_P.$$.fragment,m),C(vP.$$.fragment,m),C(cy.$$.fragment,m),C(FP.$$.fragment,m),C(gy.$$.fragment,m),C(MP.$$.fragment,m),C(EP.$$.fragment,m),C(wP.$$.fragment,m),C(uy.$$.fragment,m),C(AP.$$.fragment,m),C(_y.$$.fragment,m),zoo=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Ef),m&&t(pt),m&&t(Ve),m&&t(He),m&&t(wf),w(Qa,m),m&&t(Je),m&&t(Ae),m&&t(xo),m&&t(Wa),m&&t(SZe),m&&t(cd),w(K9),m&&t(RZe),m&&t(as),m&&t(PZe),w(Z9,m),m&&t(BZe),m&&t(tI),m&&t(IZe),w(yf,m),m&&t(NZe),m&&t(md),w(ex),m&&t(qZe),m&&t($o),w(ox),w(ax),w(Zh),w(nx),m&&t(jZe),m&&t(gd),w(sx),m&&t(DZe),m&&t(ko),w(lx),w(cx),w(Iu),w(mx),m&&t(GZe),m&&t(hd),w(fx),m&&t(OZe),m&&t(So),w(gx),w(px),w(Lp),w(yp),w(_x),m&&t(VZe),m&&t(ud),w(bx),m&&t(XZe),m&&t(Ro),w(vx),w(Mx),w(Zp),w(e_),w(Ex),m&&t(zZe),m&&t(_d),w(Cx),m&&t(QZe),m&&t(Po),w(wx),w(Lx),w(t_),w(yx),w(T1),m&&t(WZe),m&&t(Fd),w(xx),m&&t(UZe),m&&t(Bo),w($x),w(Sx),w(E1),w(Rx),w(vb),m&&t(HZe),m&&t(Ed),w(Px),m&&t(JZe),m&&t(Io),w(Bx),w(Nx),w(Tb),w(qx),w(mv),m&&t(YZe),m&&t(Ad),w(jx),m&&t(KZe),m&&t(No),w(Dx),w(Ox),w(gv),w(Vx),w(eF),m&&t(ZZe),m&&t(xd),w(Xx),m&&t(eeo),m&&t(qo),w(zx),w(Wx),w(rF),w(Ux),w(CF),m&&t(oeo),m&&t(Sd),w(Hx),m&&t(reo),m&&t(jo),w(Jx),w(Kx),w(AF),w(Zx),w(xT),m&&t(teo),m&&t(Bd),w(e$),m&&t(aeo),m&&t(Do),w(o$),w(t$),w(kT),w(a$),w(mM),m&&t(neo),m&&t(qd),w(n$),m&&t(seo),m&&t(Go),w(s$),w(i$),w(gM),w(d$),w(MM),m&&t(leo),m&&t(Gd),w(c$),m&&t(ieo),m&&t(Oo),w(m$),w(g$),w(CM),w(h$),w(fE),m&&t(deo),m&&t(Xd),w(u$),m&&t(ceo),m&&t(Vo),w(p$),w(b$),w(hE),w(v$),w(l4),m&&t(meo),m&&t(Wd),w(F$),m&&t(feo),m&&t(Xo),w(T$),w(E$),w(d4),w(C$),w(f4),m&&t(geo),m&&t(Jd),w(w$),m&&t(heo),m&&t(zo),w(A$),w(y$),w(h4),w(x$),w(v4),m&&t(ueo),m&&t(ec),w($$),m&&t(peo),m&&t(Qo),w(k$),w(R$),w(T4),w(P$),w(q4),m&&t(_eo),m&&t(tc),w(B$),m&&t(beo),m&&t(Wo),w(I$),w(q$),w(D4),w(j$),w(V4),m&&t(veo),m&&t(sc),w(D$),m&&t(Feo),m&&t(Uo),w(G$),w(V$),w(z4),w(X$),w(U4),m&&t(Teo),m&&t(dc),w(z$),m&&t(Meo),m&&t(Ho),w(Q$),w(U$),w(J4),w(H$),w(Z4),m&&t(Eeo),m&&t(fc),w(J$),m&&t(Ceo),m&&t(Jo),w(Y$),w(Z$),w(oC),w(ek),w(fC),m&&t(weo),m&&t(uc),w(ok),m&&t(Aeo),m&&t(Yo),w(rk),w(ak),w(hC),w(nk),w(TC),m&&t(Leo),m&&t(bc),w(sk),m&&t(yeo),m&&t(Ko),w(lk),w(dk),w(EC),w(ck),w(BC),m&&t(xeo),m&&t(Tc),w(mk),m&&t($eo),m&&t(Zo),w(fk),w(hk),w(NC),w(uk),w(GC),m&&t(keo),m&&t(Cc),w(_k),m&&t(Seo),m&&t(er),w(bk),w(Fk),w(VC),w(Tk),w(JC),m&&t(Reo),m&&t(Lc),w(Mk),m&&t(Peo),m&&t(or),w(Ek),w(wk),w(KC),w(Ak),w(a3),m&&t(Beo),m&&t($c),w(Lk),m&&t(Ieo),m&&t(rr),w(yk),w($k),w(s3),w(kk),w(f3),m&&t(Neo),m&&t(Rc),w(Sk),m&&t(qeo),m&&t(tr),w(Rk),w(Bk),w(h3),w(Ik),w(_3),m&&t(jeo),m&&t(Ic),w(Nk),m&&t(Deo),m&&t(ar),w(qk),w(Dk),w(v3),w(Gk),w(A3),m&&t(Geo),m&&t(jc),w(Ok),m&&t(Oeo),m&&t(nr),w(Vk),w(zk),w(y3),w(Qk),w(k3),m&&t(Veo),m&&t(Oc),w(Wk),m&&t(Xeo),m&&t(sr),w(Uk),w(Jk),w(R3),w(Yk),w(P5),m&&t(zeo),m&&t(zc),w(Kk),m&&t(Qeo),m&&t(lr),w(Zk),w(oS),w(I5),w(rS),w(s0),m&&t(Weo),m&&t(Uc),w(tS),m&&t(Ueo),m&&t(ir),w(aS),w(sS),w(i0),w(lS),w(E0),m&&t(Heo),m&&t(Yc),w(iS),m&&t(Jeo),m&&t(dr),w(dS),w(mS),w(w0),w(fS),w(P0),m&&t(Yeo),m&&t(em),w(gS),m&&t(Keo),m&&t(cr),w(hS),w(pS),w(I0),w(_S),w(D0),m&&t(Zeo),m&&t(am),w(bS),m&&t(eoo),m&&t(mr),w(vS),w(TS),w(O0),w(MS),w(dw),m&&t(ooo),m&&t(lm),w(ES),m&&t(roo),m&&t(fr),w(CS),w(AS),w(mw),w(LS),w(Mw),m&&t(too),m&&t(cm),w(yS),m&&t(aoo),m&&t(gr),w(xS),w(kS),w(Cw),w(SS),w(Kw),m&&t(noo),m&&t(gm),w(RS),m&&t(soo),m&&t(hr),w(PS),w(IS),w(eA),w(NS),w(bA),m&&t(loo),m&&t(pm),w(qS),m&&t(ioo),m&&t(ur),w(jS),w(GS),w(FA),w(OS),w(EA),m&&t(doo),m&&t(vm),w(XS),m&&t(coo),m&&t(pr),w(zS),w(WS),w(wA),w(US),w(LA),m&&t(moo),m&&t(Mm),w(HS),m&&t(foo),m&&t(_r),w(JS),w(KS),w(xA),w(ZS),w(kA),m&&t(goo),m&&t(wm),w(eR),m&&t(hoo),m&&t(br),w(oR),w(tR),w(RA),w(aR),w(o6),m&&t(uoo),m&&t(ym),w(nR),m&&t(poo),m&&t(vr),w(sR),w(iR),w(t6),w(dR),w(w6),m&&t(_oo),m&&t(km),w(cR),m&&t(boo),m&&t(Fr),w(mR),w(gR),w(L6),w(hR),w(x6),m&&t(voo),m&&t(Pm),w(uR),m&&t(Foo),m&&t(Tr),w(pR),w(bR),w(k6),w(vR),w(R6),m&&t(Too),m&&t(Nm),w(FR),m&&t(Moo),m&&t(Mr),w(TR),w(ER),w(B6),w(CR),w(d7),m&&t(Eoo),m&&t(Dm),w(wR),m&&t(Coo),m&&t(Er),w(AR),w(yR),w(m7),w(xR),w(M7),m&&t(woo),m&&t(Vm),w($R),m&&t(Aoo),m&&t(Cr),w(kR),w(RR),w(C7),w(PR),w(q7),m&&t(Loo),m&&t(Qm),w(BR),m&&t(yoo),m&&t(wr),w(IR),w(qR),w(D7),w(jR),w(Y7),m&&t(xoo),m&&t(Hm),w(DR),m&&t($oo),m&&t(Ar),w(GR),w(VR),w(Z7),w(XR),w(cL),m&&t(koo),m&&t(Km),w(zR),m&&t(Soo),m&&t(Lr),w(QR),w(UR),w(fL),w(HR),w(EL),m&&t(Roo),m&&t(of),w(JR),m&&t(Poo),m&&t(yr),w(YR),w(ZR),w(wL),w(eP),w(IL),m&&t(Boo),m&&t(af),w(oP),m&&t(Ioo),m&&t(xr),w(rP),w(aP),w(qL),w(nP),w(WL),m&&t(Noo),m&&t(lf),w(sP),m&&t(qoo),m&&t($r),w(lP),w(dP),w(HL),w(cP),w(ay),m&&t(joo),m&&t(mf),w(mP),m&&t(Doo),m&&t(kr),w(fP),w(hP),w(sy),w(uP),w(iy),m&&t(Goo),m&&t(hf),w(pP),m&&t(Ooo),m&&t(Sr),w(_P),w(vP),w(cy),w(FP),w(gy),m&&t(Voo),m&&t(_f),w(MP),m&&t(Xoo),m&&t(Rr),w(EP),w(wP),w(uy),w(AP),w(_y)}}}const Mba={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForDocumentQuestionAnswering",title:"AutoModelForDocumentQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForDocumentQuestionAnswering",title:"TFAutoModelForDocumentQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Eba($){return g2a(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class $ba extends d2a{constructor(g){super();c2a(this,g,Eba,Tba,m2a,{})}}export{$ba as default,Mba as metadata};
