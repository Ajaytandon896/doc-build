import{S as YHt,i as KHt,s as ZHt,e as a,k as l,w as F,t as o,M as eUt,c as n,d as t,m as i,a as s,x as T,h as r,b as d,G as e,g as b,y as M,q as E,o as C,B as w,v as oUt,L as q}from"../../chunks/vendor-hf-doc-builder.js";import{T as Zat}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as N}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function rUt($){let g,v,u,f,p,c,h,wo,xi,Bm,lt,$i,ki,my,Im,Oe,Qe,Si,Pn,fy,Bn,In,gy,Ri,Nn,hy,Pi,Nm,Sa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),c=a("code"),h=o("PretrainedConfig"),wo=o(`, make sure its
`),xi=a("code"),Bm=o("model_type"),lt=o(" attribute is set to the same key you use when registering the config (here "),$i=a("code"),ki=o('"new-model"'),my=o(")."),Im=l(),Oe=a("p"),Qe=o("Likewise, if your "),Si=a("code"),Pn=o("NewModel"),fy=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),gy=o(`, make sure its
`),Ri=a("code"),Nn=o("config_class"),hy=o(` attribute is set to the same class you use when registering the model (here
`),Pi=a("code"),Nm=o("NewModelConfig"),Sa=o(")."),this.h()},l(He){g=n(He,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var HS=s(u);f=r(HS,"NewModelConfig"),HS.forEach(t),p=r(Ae," is a subclass of "),c=n(Ae,"CODE",{});var Bi=s(c);h=r(Bi,"PretrainedConfig"),Bi.forEach(t),wo=r(Ae,`, make sure its
`),xi=n(Ae,"CODE",{});var US=s(xi);Bm=r(US,"model_type"),US.forEach(t),lt=r(Ae," attribute is set to the same key you use when registering the config (here "),$i=n(Ae,"CODE",{});var JS=s($i);ki=r(JS,'"new-model"'),JS.forEach(t),my=r(Ae,")."),Ae.forEach(t),Im=i(He),Oe=n(He,"P",{});var Ao=s(Oe);Qe=r(Ao,"Likewise, if your "),Si=n(Ao,"CODE",{});var Ra=s(Si);Pn=r(Ra,"NewModel"),Ra.forEach(t),fy=r(Ao," is a subclass of "),Bn=n(Ao,"A",{href:!0});var YS=s(Bn);In=r(YS,"PreTrainedModel"),YS.forEach(t),gy=r(Ao,`, make sure its
`),Ri=n(Ao,"CODE",{});var qm=s(Ri);Nn=r(qm,"config_class"),qm.forEach(t),hy=r(Ao,` attribute is set to the same class you use when registering the model (here
`),Pi=n(Ao,"CODE",{});var KS=s(Pi);Nm=r(KS,"NewModelConfig"),KS.forEach(t),Sa=r(Ao,")."),Ao.forEach(t),this.h()},h(){d(Bn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(He,Ae){b(He,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,c),e(c,h),e(g,wo),e(g,xi),e(xi,Bm),e(g,lt),e(g,$i),e($i,ki),e(g,my),b(He,Im,Ae),b(He,Oe,Ae),e(Oe,Qe),e(Oe,Si),e(Si,Pn),e(Oe,fy),e(Oe,Bn),e(Bn,In),e(Oe,gy),e(Oe,Ri),e(Ri,Nn),e(Oe,hy),e(Oe,Pi),e(Pi,Nm),e(Oe,Sa)},d(He){He&&t(g),He&&t(Im),He&&t(Oe)}}}function tUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function aUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function nUt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var wo=s(u);f=r(wo,"use_auth_token=True"),wo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(c){c&&t(g)}}}function sUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function lUt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var wo=s(u);f=r(wo,"use_auth_token=True"),wo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(c,h){b(c,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(c){c&&t(g)}}}function iUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function dUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function cUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function mUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function fUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function gUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function hUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function uUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function pUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function _Ut($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function bUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function vUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function FUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function TUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function MUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function EUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function CUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function wUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function AUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function LUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function yUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function xUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function $Ut($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function kUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function SUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function RUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function PUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function BUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function IUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function NUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function qUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function jUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function DUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function GUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function OUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function VUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function XUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function zUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function WUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function QUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function HUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function UUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function JUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function YUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function KUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function ZUt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function eJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function oJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function rJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function tJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function aJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function nJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function sJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function lJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function iJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function dJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function cJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function mJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function fJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function gJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function hJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function uJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function pJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function _Jt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function bJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function vJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function FJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function TJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function MJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function EJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function CJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function wJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function AJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function LJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function yJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function xJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function $Jt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function kJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function SJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function RJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function PJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function BJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function IJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function NJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function qJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function jJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function DJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function GJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function OJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function VJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function XJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function zJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function WJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function QJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function HJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function UJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function JJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function YJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function KJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function ZJt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function eYt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(c){g=n(c,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(c),T(f.$$.fragment,c)},m(c,h){b(c,g,h),e(g,v),b(c,u,h),M(f,c,h),p=!0},p:q,i(c){p||(E(f.$$.fragment,c),p=!0)},o(c){C(f.$$.fragment,c),p=!1},d(c){c&&t(g),c&&t(u),w(f,c)}}}function oYt($){let g,v,u,f,p,c,h,wo,xi,Bm,lt,$i,ki,my,Im,Oe,Qe,Si,Pn,fy,Bn,In,gy,Ri,Nn,hy,Pi,Nm,Sa,He,Ae,HS,Bi,US,JS,Ao,Ra,YS,qm,KS,aUe,VXe,Ii,jm,Yae,uy,nUe,Kae,sUe,XXe,qn,lUe,Zae,iUe,dUe,ene,cUe,mUe,zXe,py,WXe,ZS,fUe,QXe,Dm,HXe,Ni,Gm,one,_y,gUe,rne,hUe,UXe,Lo,by,uUe,vy,pUe,eR,_Ue,bUe,vUe,Fy,FUe,tne,TUe,MUe,EUe,yr,Ty,CUe,ane,wUe,AUe,qi,LUe,nne,yUe,xUe,sne,$Ue,kUe,SUe,A,Om,lne,RUe,PUe,oR,BUe,IUe,NUe,Vm,ine,qUe,jUe,rR,DUe,GUe,OUe,Xm,dne,VUe,XUe,tR,zUe,WUe,QUe,zm,cne,HUe,UUe,aR,JUe,YUe,KUe,Wm,mne,ZUe,eJe,nR,oJe,rJe,tJe,Qm,fne,aJe,nJe,sR,sJe,lJe,iJe,Hm,gne,dJe,cJe,lR,mJe,fJe,gJe,Um,hne,hJe,uJe,iR,pJe,_Je,bJe,Jm,une,vJe,FJe,dR,TJe,MJe,EJe,Ym,pne,CJe,wJe,cR,AJe,LJe,yJe,Km,_ne,xJe,$Je,mR,kJe,SJe,RJe,Zm,bne,PJe,BJe,fR,IJe,NJe,qJe,ef,vne,jJe,DJe,gR,GJe,OJe,VJe,of,Fne,XJe,zJe,hR,WJe,QJe,HJe,rf,Tne,UJe,JJe,uR,YJe,KJe,ZJe,tf,Mne,eYe,oYe,pR,rYe,tYe,aYe,af,Ene,nYe,sYe,_R,lYe,iYe,dYe,nf,Cne,cYe,mYe,bR,fYe,gYe,hYe,sf,wne,uYe,pYe,vR,_Ye,bYe,vYe,lf,Ane,FYe,TYe,FR,MYe,EYe,CYe,df,Lne,wYe,AYe,TR,LYe,yYe,xYe,cf,yne,$Ye,kYe,MR,SYe,RYe,PYe,mf,xne,BYe,IYe,ER,NYe,qYe,jYe,ff,$ne,DYe,GYe,CR,OYe,VYe,XYe,gf,kne,zYe,WYe,wR,QYe,HYe,UYe,hf,Sne,JYe,YYe,AR,KYe,ZYe,eKe,uf,Rne,oKe,rKe,LR,tKe,aKe,nKe,pf,Pne,sKe,lKe,yR,iKe,dKe,cKe,_f,Bne,mKe,fKe,xR,gKe,hKe,uKe,bf,Ine,pKe,_Ke,$R,bKe,vKe,FKe,vf,Nne,TKe,MKe,kR,EKe,CKe,wKe,Ff,qne,AKe,LKe,SR,yKe,xKe,$Ke,Tf,jne,kKe,SKe,RR,RKe,PKe,BKe,Mf,Dne,IKe,NKe,PR,qKe,jKe,DKe,Ef,Gne,GKe,OKe,BR,VKe,XKe,zKe,Cf,One,WKe,QKe,IR,HKe,UKe,JKe,wf,Vne,YKe,KKe,NR,ZKe,eZe,oZe,Af,Xne,rZe,tZe,qR,aZe,nZe,sZe,Lf,zne,lZe,iZe,jR,dZe,cZe,mZe,yf,Wne,fZe,gZe,DR,hZe,uZe,pZe,xf,Qne,_Ze,bZe,GR,vZe,FZe,TZe,$f,Hne,MZe,EZe,OR,CZe,wZe,AZe,kf,Une,LZe,yZe,VR,xZe,$Ze,kZe,Sf,Jne,SZe,RZe,XR,PZe,BZe,IZe,Rf,Yne,NZe,qZe,zR,jZe,DZe,GZe,Pf,Kne,OZe,VZe,WR,XZe,zZe,WZe,Bf,Zne,QZe,HZe,QR,UZe,JZe,YZe,If,ese,KZe,ZZe,HR,eeo,oeo,reo,Nf,ose,teo,aeo,UR,neo,seo,leo,qf,rse,ieo,deo,JR,ceo,meo,feo,jf,tse,geo,heo,YR,ueo,peo,_eo,Df,ase,beo,veo,KR,Feo,Teo,Meo,Gf,nse,Eeo,Ceo,ZR,weo,Aeo,Leo,Of,sse,yeo,xeo,eP,$eo,keo,Seo,Vf,lse,Reo,Peo,oP,Beo,Ieo,Neo,Xf,ise,qeo,jeo,rP,Deo,Geo,Oeo,zf,dse,Veo,Xeo,tP,zeo,Weo,Qeo,Wf,cse,Heo,Ueo,aP,Jeo,Yeo,Keo,Qf,mse,Zeo,eoo,nP,ooo,roo,too,Hf,fse,aoo,noo,sP,soo,loo,ioo,Uf,gse,doo,coo,lP,moo,foo,goo,Jf,hse,hoo,uoo,iP,poo,_oo,boo,Yf,use,voo,Foo,dP,Too,Moo,Eoo,Kf,pse,Coo,woo,cP,Aoo,Loo,yoo,Zf,_se,xoo,$oo,mP,koo,Soo,Roo,eg,bse,Poo,Boo,fP,Ioo,Noo,qoo,og,vse,joo,Doo,gP,Goo,Ooo,Voo,rg,Fse,Xoo,zoo,hP,Woo,Qoo,Hoo,tg,Tse,Uoo,Joo,uP,Yoo,Koo,Zoo,ag,Mse,ero,oro,pP,rro,tro,aro,ng,Ese,nro,sro,_P,lro,iro,dro,sg,Cse,cro,mro,bP,fro,gro,hro,lg,wse,uro,pro,vP,_ro,bro,vro,ig,Ase,Fro,Tro,FP,Mro,Ero,Cro,dg,Lse,wro,Aro,TP,Lro,yro,xro,cg,yse,$ro,kro,MP,Sro,Rro,Pro,mg,xse,Bro,Iro,EP,Nro,qro,jro,fg,$se,Dro,Gro,CP,Oro,Vro,Xro,gg,kse,zro,Wro,wP,Qro,Hro,Uro,hg,Sse,Jro,Yro,AP,Kro,Zro,eto,ug,Rse,oto,rto,LP,tto,ato,nto,pg,Pse,sto,lto,yP,ito,dto,cto,_g,Bse,mto,fto,xP,gto,hto,uto,bg,Ise,pto,_to,$P,bto,vto,Fto,vg,Nse,Tto,Mto,kP,Eto,Cto,wto,Fg,qse,Ato,Lto,SP,yto,xto,$to,Tg,jse,kto,Sto,RP,Rto,Pto,Bto,Mg,Dse,Ito,Nto,PP,qto,jto,Dto,Eg,Gse,Gto,Oto,BP,Vto,Xto,zto,Cg,Ose,Wto,Qto,IP,Hto,Uto,Jto,wg,Vse,Yto,Kto,NP,Zto,eao,oao,Ag,Xse,rao,tao,qP,aao,nao,sao,Lg,zse,lao,iao,jP,dao,cao,mao,yg,Wse,fao,gao,DP,hao,uao,pao,xg,Qse,_ao,bao,GP,vao,Fao,Tao,$g,Hse,Mao,Eao,OP,Cao,wao,Aao,kg,Use,Lao,yao,VP,xao,$ao,kao,Sg,Jse,Sao,Rao,XP,Pao,Bao,Iao,Rg,Yse,Nao,qao,zP,jao,Dao,Gao,Pg,Kse,Oao,Vao,WP,Xao,zao,Wao,Bg,Zse,Qao,Hao,QP,Uao,Jao,Yao,Ig,ele,Kao,Zao,HP,eno,ono,rno,Ng,ole,tno,ano,UP,nno,sno,lno,qg,rle,ino,dno,JP,cno,mno,fno,jg,tle,gno,hno,YP,uno,pno,_no,Dg,ale,bno,vno,KP,Fno,Tno,Mno,Gg,nle,Eno,Cno,ZP,wno,Ano,Lno,Og,sle,yno,xno,eB,$no,kno,Sno,Vg,lle,Rno,Pno,oB,Bno,Ino,Nno,Xg,ile,qno,jno,rB,Dno,Gno,Ono,zg,dle,Vno,Xno,tB,zno,Wno,Qno,Wg,cle,Hno,Uno,aB,Jno,Yno,Kno,Qg,mle,Zno,eso,nB,oso,rso,tso,Hg,fle,aso,nso,sB,sso,lso,iso,Ug,gle,dso,cso,lB,mso,fso,gso,Jg,hle,hso,uso,iB,pso,_so,bso,Yg,ule,vso,Fso,dB,Tso,Mso,Eso,Kg,ple,Cso,wso,cB,Aso,Lso,yso,Zg,_le,xso,$so,mB,kso,Sso,Rso,eh,Pso,oh,My,Bso,ble,Iso,JXe,ji,rh,vle,Ey,Nso,Fle,qso,YXe,yo,Cy,jso,wy,Dso,fB,Gso,Oso,Vso,Ay,Xso,Tle,zso,Wso,Qso,xr,Ly,Hso,Mle,Uso,Jso,Pa,Yso,Ele,Kso,Zso,Cle,elo,olo,wle,rlo,tlo,alo,k,jn,Ale,nlo,slo,gB,llo,ilo,hB,dlo,clo,mlo,Dn,Lle,flo,glo,uB,hlo,ulo,pB,plo,_lo,blo,Gn,yle,vlo,Flo,_B,Tlo,Mlo,bB,Elo,Clo,wlo,th,xle,Alo,Llo,vB,ylo,xlo,$lo,On,$le,klo,Slo,FB,Rlo,Plo,TB,Blo,Ilo,Nlo,ah,kle,qlo,jlo,MB,Dlo,Glo,Olo,nh,Sle,Vlo,Xlo,EB,zlo,Wlo,Qlo,sh,Rle,Hlo,Ulo,CB,Jlo,Ylo,Klo,Vn,Ple,Zlo,eio,wB,oio,rio,AB,tio,aio,nio,Xn,Ble,sio,lio,LB,iio,dio,yB,cio,mio,fio,zn,Ile,gio,hio,xB,uio,pio,$B,_io,bio,vio,lh,Nle,Fio,Tio,kB,Mio,Eio,Cio,ih,qle,wio,Aio,SB,Lio,yio,xio,dh,jle,$io,kio,RB,Sio,Rio,Pio,Wn,Dle,Bio,Iio,PB,Nio,qio,BB,jio,Dio,Gio,ch,Gle,Oio,Vio,IB,Xio,zio,Wio,Qn,Ole,Qio,Hio,NB,Uio,Jio,qB,Yio,Kio,Zio,Hn,Vle,edo,odo,jB,rdo,tdo,DB,ado,ndo,sdo,Un,Xle,ldo,ido,GB,ddo,cdo,OB,mdo,fdo,gdo,Jn,zle,hdo,udo,VB,pdo,_do,XB,bdo,vdo,Fdo,mh,Wle,Tdo,Mdo,zB,Edo,Cdo,wdo,Yn,Qle,Ado,Ldo,WB,ydo,xdo,QB,$do,kdo,Sdo,Kn,Hle,Rdo,Pdo,HB,Bdo,Ido,UB,Ndo,qdo,jdo,Zn,Ule,Ddo,Gdo,JB,Odo,Vdo,YB,Xdo,zdo,Wdo,es,Jle,Qdo,Hdo,KB,Udo,Jdo,ZB,Ydo,Kdo,Zdo,os,Yle,eco,oco,eI,rco,tco,oI,aco,nco,sco,rs,Kle,lco,ico,rI,dco,cco,tI,mco,fco,gco,fh,Zle,hco,uco,aI,pco,_co,bco,ts,eie,vco,Fco,nI,Tco,Mco,sI,Eco,Cco,wco,gh,oie,Aco,Lco,lI,yco,xco,$co,as,rie,kco,Sco,iI,Rco,Pco,dI,Bco,Ico,Nco,ns,tie,qco,jco,cI,Dco,Gco,mI,Oco,Vco,Xco,ss,aie,zco,Wco,fI,Qco,Hco,gI,Uco,Jco,Yco,hh,nie,Kco,Zco,hI,emo,omo,rmo,ls,sie,tmo,amo,uI,nmo,smo,pI,lmo,imo,dmo,is,lie,cmo,mmo,_I,fmo,gmo,bI,hmo,umo,pmo,ds,iie,_mo,bmo,vI,vmo,Fmo,FI,Tmo,Mmo,Emo,uh,die,Cmo,wmo,TI,Amo,Lmo,ymo,cs,cie,xmo,$mo,MI,kmo,Smo,EI,Rmo,Pmo,Bmo,ms,mie,Imo,Nmo,CI,qmo,jmo,wI,Dmo,Gmo,Omo,fs,fie,Vmo,Xmo,AI,zmo,Wmo,LI,Qmo,Hmo,Umo,gs,gie,Jmo,Ymo,yI,Kmo,Zmo,xI,efo,ofo,rfo,hs,hie,tfo,afo,$I,nfo,sfo,kI,lfo,ifo,dfo,us,uie,cfo,mfo,SI,ffo,gfo,RI,hfo,ufo,pfo,ps,pie,_fo,bfo,PI,vfo,Ffo,BI,Tfo,Mfo,Efo,_s,_ie,Cfo,wfo,II,Afo,Lfo,NI,yfo,xfo,$fo,ph,bie,kfo,Sfo,qI,Rfo,Pfo,Bfo,bs,vie,Ifo,Nfo,jI,qfo,jfo,DI,Dfo,Gfo,Ofo,_h,Fie,Vfo,Xfo,GI,zfo,Wfo,Qfo,bh,Tie,Hfo,Ufo,OI,Jfo,Yfo,Kfo,vs,Mie,Zfo,ego,VI,ogo,rgo,XI,tgo,ago,ngo,Fs,Eie,sgo,lgo,zI,igo,dgo,WI,cgo,mgo,fgo,Ts,Cie,ggo,hgo,QI,ugo,pgo,HI,_go,bgo,vgo,vh,wie,Fgo,Tgo,UI,Mgo,Ego,Cgo,Ms,Aie,wgo,Ago,JI,Lgo,ygo,YI,xgo,$go,kgo,Es,Lie,Sgo,Rgo,KI,Pgo,Bgo,ZI,Igo,Ngo,qgo,Cs,yie,jgo,Dgo,eN,Ggo,Ogo,oN,Vgo,Xgo,zgo,ws,xie,Wgo,Qgo,rN,Hgo,Ugo,tN,Jgo,Ygo,Kgo,As,$ie,Zgo,eho,aN,oho,rho,nN,tho,aho,nho,Ls,kie,sho,lho,sN,iho,dho,lN,cho,mho,fho,ys,Sie,gho,hho,iN,uho,pho,dN,_ho,bho,vho,xs,Rie,Fho,Tho,cN,Mho,Eho,mN,Cho,who,Aho,Fh,Pie,Lho,yho,fN,xho,$ho,kho,$s,Bie,Sho,Rho,gN,Pho,Bho,hN,Iho,Nho,qho,ks,Iie,jho,Dho,uN,Gho,Oho,pN,Vho,Xho,zho,Th,Nie,Who,Qho,_N,Hho,Uho,Jho,Mh,qie,Yho,Kho,bN,Zho,euo,ouo,Eh,jie,ruo,tuo,vN,auo,nuo,suo,Ch,Die,luo,iuo,FN,duo,cuo,muo,Ss,Gie,fuo,guo,TN,huo,uuo,MN,puo,_uo,buo,wh,Oie,vuo,Fuo,EN,Tuo,Muo,Euo,Rs,Vie,Cuo,wuo,CN,Auo,Luo,wN,yuo,xuo,$uo,Ps,Xie,kuo,Suo,AN,Ruo,Puo,LN,Buo,Iuo,Nuo,Bs,zie,quo,juo,yN,Duo,Guo,xN,Ouo,Vuo,Xuo,Is,Wie,zuo,Wuo,$N,Quo,Huo,kN,Uuo,Juo,Yuo,Ns,Qie,Kuo,Zuo,SN,epo,opo,RN,rpo,tpo,apo,qs,Hie,npo,spo,PN,lpo,ipo,BN,dpo,cpo,mpo,Ah,Uie,fpo,gpo,IN,hpo,upo,ppo,Lh,Jie,_po,bpo,NN,vpo,Fpo,Tpo,js,Yie,Mpo,Epo,qN,Cpo,wpo,jN,Apo,Lpo,ypo,Ds,Kie,xpo,$po,DN,kpo,Spo,GN,Rpo,Ppo,Bpo,Gs,Zie,Ipo,Npo,ON,qpo,jpo,VN,Dpo,Gpo,Opo,yh,ede,Vpo,Xpo,XN,zpo,Wpo,Qpo,xh,ode,Hpo,Upo,zN,Jpo,Ypo,Kpo,$h,rde,Zpo,e_o,WN,o_o,r_o,t_o,Os,tde,a_o,n_o,QN,s_o,l_o,HN,i_o,d_o,c_o,Vs,ade,m_o,f_o,UN,g_o,h_o,JN,u_o,p_o,__o,kh,nde,b_o,v_o,YN,F_o,T_o,M_o,Sh,sde,E_o,C_o,KN,w_o,A_o,L_o,Rh,lde,y_o,x_o,ZN,$_o,k_o,S_o,Xs,ide,R_o,P_o,eq,B_o,I_o,oq,N_o,q_o,j_o,Ph,dde,D_o,G_o,rq,O_o,V_o,X_o,Bh,cde,z_o,W_o,tq,Q_o,H_o,U_o,zs,mde,J_o,Y_o,aq,K_o,Z_o,nq,e2o,o2o,r2o,Ws,fde,t2o,a2o,sq,n2o,s2o,lq,l2o,i2o,d2o,Qs,gde,c2o,m2o,iq,f2o,g2o,dq,h2o,u2o,p2o,Hs,hde,_2o,b2o,cq,v2o,F2o,mq,T2o,M2o,E2o,Ih,C2o,Nh,yy,w2o,ude,A2o,KXe,Di,qh,pde,xy,L2o,_de,y2o,ZXe,xo,$y,x2o,ky,$2o,fq,k2o,S2o,R2o,Sy,P2o,bde,B2o,I2o,N2o,Ue,Ry,q2o,vde,j2o,D2o,Ba,G2o,Fde,O2o,V2o,Tde,X2o,z2o,Mde,W2o,Q2o,H2o,J,jh,Ede,U2o,J2o,gq,Y2o,K2o,Z2o,Dh,Cde,ebo,obo,hq,rbo,tbo,abo,Gh,wde,nbo,sbo,uq,lbo,ibo,dbo,Oh,Ade,cbo,mbo,pq,fbo,gbo,hbo,Vh,Lde,ubo,pbo,_q,_bo,bbo,vbo,Xh,yde,Fbo,Tbo,bq,Mbo,Ebo,Cbo,zh,xde,wbo,Abo,vq,Lbo,ybo,xbo,Wh,$de,$bo,kbo,Fq,Sbo,Rbo,Pbo,Qh,kde,Bbo,Ibo,Tq,Nbo,qbo,jbo,Hh,Sde,Dbo,Gbo,Mq,Obo,Vbo,Xbo,Uh,Rde,zbo,Wbo,Eq,Qbo,Hbo,Ubo,Jh,Pde,Jbo,Ybo,Cq,Kbo,Zbo,evo,Yh,Bde,ovo,rvo,wq,tvo,avo,nvo,Kh,Ide,svo,lvo,Aq,ivo,dvo,cvo,Zh,Nde,mvo,fvo,Lq,gvo,hvo,uvo,eu,qde,pvo,_vo,yq,bvo,vvo,Fvo,ou,jde,Tvo,Mvo,xq,Evo,Cvo,wvo,ru,Dde,Avo,Lvo,$q,yvo,xvo,$vo,tu,Gde,kvo,Svo,kq,Rvo,Pvo,Bvo,au,Ode,Ivo,Nvo,Sq,qvo,jvo,Dvo,nu,Vde,Gvo,Ovo,Rq,Vvo,Xvo,zvo,su,Xde,Wvo,Qvo,Pq,Hvo,Uvo,Jvo,lu,zde,Yvo,Kvo,Bq,Zvo,e1o,o1o,iu,Wde,r1o,t1o,Iq,a1o,n1o,s1o,du,Qde,l1o,i1o,Nq,d1o,c1o,m1o,cu,Hde,f1o,g1o,qq,h1o,u1o,p1o,mu,Ude,_1o,b1o,jq,v1o,F1o,T1o,fu,Jde,M1o,E1o,Dq,C1o,w1o,A1o,gu,Yde,L1o,y1o,Gq,x1o,$1o,k1o,hu,Kde,S1o,R1o,Oq,P1o,B1o,I1o,uu,Zde,N1o,q1o,Vq,j1o,D1o,G1o,pu,ece,O1o,V1o,Xq,X1o,z1o,W1o,_u,oce,Q1o,H1o,zq,U1o,J1o,Y1o,bu,rce,K1o,Z1o,Wq,eFo,oFo,rFo,vu,tce,tFo,aFo,Qq,nFo,sFo,lFo,Fu,iFo,Tu,dFo,Mu,Py,cFo,ace,mFo,eze,Gi,Eu,nce,By,fFo,sce,gFo,oze,$o,Iy,hFo,Ny,uFo,Hq,pFo,_Fo,bFo,qy,vFo,lce,FFo,TFo,MFo,Je,jy,EFo,ice,CFo,wFo,Oi,AFo,dce,LFo,yFo,cce,xFo,$Fo,kFo,me,Cu,mce,SFo,RFo,Uq,PFo,BFo,IFo,wu,fce,NFo,qFo,Jq,jFo,DFo,GFo,Au,gce,OFo,VFo,Yq,XFo,zFo,WFo,Lu,hce,QFo,HFo,Kq,UFo,JFo,YFo,yu,uce,KFo,ZFo,Zq,eTo,oTo,rTo,xu,pce,tTo,aTo,ej,nTo,sTo,lTo,$u,_ce,iTo,dTo,oj,cTo,mTo,fTo,ku,bce,gTo,hTo,rj,uTo,pTo,_To,Su,vce,bTo,vTo,tj,FTo,TTo,MTo,Ru,Fce,ETo,CTo,aj,wTo,ATo,LTo,Pu,Tce,yTo,xTo,nj,$To,kTo,STo,Bu,Mce,RTo,PTo,sj,BTo,ITo,NTo,Iu,Ece,qTo,jTo,lj,DTo,GTo,OTo,Nu,Cce,VTo,XTo,ij,zTo,WTo,QTo,qu,wce,HTo,UTo,dj,JTo,YTo,KTo,ju,Ace,ZTo,eMo,cj,oMo,rMo,tMo,Du,Lce,aMo,nMo,mj,sMo,lMo,iMo,Gu,yce,dMo,cMo,fj,mMo,fMo,gMo,Ou,xce,hMo,uMo,gj,pMo,_Mo,bMo,Vu,vMo,Xu,FMo,zu,Dy,TMo,$ce,MMo,rze,Vi,Wu,kce,Gy,EMo,Sce,CMo,tze,ko,Oy,wMo,Xi,AMo,hj,LMo,yMo,uj,xMo,$Mo,kMo,Vy,SMo,Rce,RMo,PMo,BMo,it,Xy,IMo,Pce,NMo,qMo,zi,jMo,Bce,DMo,GMo,pj,OMo,VMo,XMo,Qu,zMo,Ye,zy,WMo,Ice,QMo,HMo,Ia,UMo,Nce,JMo,YMo,qce,KMo,ZMo,jce,e4o,o4o,r4o,y,Hu,Dce,t4o,a4o,_j,n4o,s4o,l4o,Uu,Gce,i4o,d4o,bj,c4o,m4o,f4o,Ju,Oce,g4o,h4o,vj,u4o,p4o,_4o,Yu,Vce,b4o,v4o,Fj,F4o,T4o,M4o,Ku,Xce,E4o,C4o,Tj,w4o,A4o,L4o,Zu,zce,y4o,x4o,Mj,$4o,k4o,S4o,ep,Wce,R4o,P4o,Ej,B4o,I4o,N4o,op,Qce,q4o,j4o,Cj,D4o,G4o,O4o,rp,Hce,V4o,X4o,wj,z4o,W4o,Q4o,tp,Uce,H4o,U4o,Aj,J4o,Y4o,K4o,ap,Jce,Z4o,eEo,Lj,oEo,rEo,tEo,np,Yce,aEo,nEo,yj,sEo,lEo,iEo,sp,Kce,dEo,cEo,xj,mEo,fEo,gEo,lp,Zce,hEo,uEo,$j,pEo,_Eo,bEo,ip,eme,vEo,FEo,kj,TEo,MEo,EEo,dp,ome,CEo,wEo,Sj,AEo,LEo,yEo,cp,rme,xEo,$Eo,Rj,kEo,SEo,REo,mp,tme,PEo,BEo,Pj,IEo,NEo,qEo,fp,ame,jEo,DEo,Bj,GEo,OEo,VEo,gp,nme,XEo,zEo,Ij,WEo,QEo,HEo,hp,sme,UEo,JEo,Nj,YEo,KEo,ZEo,up,lme,eCo,oCo,qj,rCo,tCo,aCo,pp,ime,nCo,sCo,jj,lCo,iCo,dCo,_p,dme,cCo,mCo,Dj,fCo,gCo,hCo,bp,cme,uCo,pCo,Gj,_Co,bCo,vCo,vp,mme,FCo,TCo,Oj,MCo,ECo,CCo,Fp,fme,wCo,ACo,Vj,LCo,yCo,xCo,Tp,gme,$Co,kCo,Xj,SCo,RCo,PCo,Mp,hme,BCo,ICo,zj,NCo,qCo,jCo,Ep,ume,DCo,GCo,Wj,OCo,VCo,XCo,Cp,pme,zCo,WCo,Qj,QCo,HCo,UCo,wp,_me,JCo,YCo,Hj,KCo,ZCo,e5o,Ap,bme,o5o,r5o,Uj,t5o,a5o,n5o,Lp,vme,s5o,l5o,Jj,i5o,d5o,c5o,Us,Fme,m5o,f5o,Yj,g5o,h5o,Kj,u5o,p5o,_5o,yp,Tme,b5o,v5o,Zj,F5o,T5o,M5o,xp,Mme,E5o,C5o,eD,w5o,A5o,L5o,$p,Eme,y5o,x5o,oD,$5o,k5o,S5o,kp,Cme,R5o,P5o,rD,B5o,I5o,N5o,Sp,wme,q5o,j5o,tD,D5o,G5o,O5o,Rp,Ame,V5o,X5o,aD,z5o,W5o,Q5o,Pp,Lme,H5o,U5o,nD,J5o,Y5o,K5o,Bp,yme,Z5o,e3o,sD,o3o,r3o,t3o,Ip,xme,a3o,n3o,lD,s3o,l3o,i3o,Np,$me,d3o,c3o,iD,m3o,f3o,g3o,qp,kme,h3o,u3o,dD,p3o,_3o,b3o,jp,Sme,v3o,F3o,cD,T3o,M3o,E3o,Dp,Rme,C3o,w3o,mD,A3o,L3o,y3o,Gp,Pme,x3o,$3o,fD,k3o,S3o,R3o,Op,Bme,P3o,B3o,gD,I3o,N3o,q3o,Vp,Ime,j3o,D3o,hD,G3o,O3o,V3o,Xp,Nme,X3o,z3o,uD,W3o,Q3o,H3o,zp,qme,U3o,J3o,pD,Y3o,K3o,Z3o,Wp,jme,e0o,o0o,_D,r0o,t0o,a0o,Qp,Dme,n0o,s0o,bD,l0o,i0o,d0o,Hp,Gme,c0o,m0o,vD,f0o,g0o,h0o,Up,Ome,u0o,p0o,FD,_0o,b0o,v0o,Jp,Vme,F0o,T0o,TD,M0o,E0o,C0o,Yp,Xme,w0o,A0o,MD,L0o,y0o,x0o,Kp,zme,$0o,k0o,ED,S0o,R0o,P0o,Zp,Wme,B0o,I0o,CD,N0o,q0o,j0o,e_,Qme,D0o,G0o,wD,O0o,V0o,X0o,o_,Hme,z0o,W0o,AD,Q0o,H0o,U0o,r_,Ume,J0o,Y0o,LD,K0o,Z0o,ewo,t_,Jme,owo,rwo,yD,two,awo,nwo,a_,Yme,swo,lwo,xD,iwo,dwo,cwo,n_,Kme,mwo,fwo,$D,gwo,hwo,uwo,s_,Zme,pwo,_wo,kD,bwo,vwo,Fwo,l_,efe,Two,Mwo,SD,Ewo,Cwo,wwo,i_,ofe,Awo,Lwo,RD,ywo,xwo,$wo,d_,rfe,kwo,Swo,PD,Rwo,Pwo,Bwo,c_,tfe,Iwo,Nwo,BD,qwo,jwo,Dwo,m_,afe,Gwo,Owo,ID,Vwo,Xwo,zwo,f_,nfe,Wwo,Qwo,ND,Hwo,Uwo,Jwo,g_,sfe,Ywo,Kwo,qD,Zwo,eAo,oAo,h_,lfe,rAo,tAo,jD,aAo,nAo,sAo,u_,ife,lAo,iAo,DD,dAo,cAo,mAo,p_,dfe,fAo,gAo,GD,hAo,uAo,pAo,__,cfe,_Ao,bAo,OD,vAo,FAo,TAo,b_,mfe,MAo,EAo,VD,CAo,wAo,AAo,v_,ffe,LAo,yAo,XD,xAo,$Ao,kAo,F_,gfe,SAo,RAo,zD,PAo,BAo,IAo,T_,hfe,NAo,qAo,WD,jAo,DAo,GAo,M_,ufe,OAo,VAo,QD,XAo,zAo,WAo,E_,pfe,QAo,HAo,HD,UAo,JAo,YAo,C_,_fe,KAo,ZAo,UD,e6o,o6o,r6o,w_,bfe,t6o,a6o,JD,n6o,s6o,l6o,A_,vfe,i6o,d6o,YD,c6o,m6o,f6o,L_,Ffe,g6o,h6o,KD,u6o,p6o,_6o,y_,Tfe,b6o,v6o,ZD,F6o,T6o,M6o,x_,Mfe,E6o,C6o,eG,w6o,A6o,L6o,$_,Efe,y6o,x6o,oG,$6o,k6o,S6o,k_,Cfe,R6o,P6o,rG,B6o,I6o,N6o,S_,wfe,q6o,j6o,tG,D6o,G6o,O6o,R_,Afe,V6o,X6o,aG,z6o,W6o,Q6o,P_,Lfe,H6o,U6o,nG,J6o,Y6o,K6o,B_,yfe,Z6o,e7o,sG,o7o,r7o,t7o,I_,xfe,a7o,n7o,lG,s7o,l7o,i7o,N_,$fe,d7o,c7o,iG,m7o,f7o,g7o,q_,kfe,h7o,u7o,dG,p7o,_7o,b7o,j_,Sfe,v7o,F7o,cG,T7o,M7o,E7o,D_,Rfe,C7o,w7o,mG,A7o,L7o,y7o,G_,Pfe,x7o,$7o,fG,k7o,S7o,R7o,O_,Bfe,P7o,B7o,gG,I7o,N7o,q7o,V_,Ife,j7o,D7o,hG,G7o,O7o,V7o,X_,Nfe,X7o,z7o,uG,W7o,Q7o,H7o,z_,qfe,U7o,J7o,pG,Y7o,K7o,Z7o,W_,jfe,eLo,oLo,_G,rLo,tLo,aLo,Q_,Dfe,nLo,sLo,bG,lLo,iLo,dLo,H_,Gfe,cLo,mLo,vG,fLo,gLo,hLo,U_,Ofe,uLo,pLo,FG,_Lo,bLo,vLo,J_,Vfe,FLo,TLo,TG,MLo,ELo,CLo,Y_,Xfe,wLo,ALo,MG,LLo,yLo,xLo,K_,$Lo,zfe,kLo,SLo,Wfe,RLo,PLo,Z_,aze,Wi,e2,Qfe,Wy,BLo,Hfe,ILo,nze,So,Qy,NLo,Qi,qLo,EG,jLo,DLo,CG,GLo,OLo,VLo,Hy,XLo,Ufe,zLo,WLo,QLo,dt,Uy,HLo,Jfe,ULo,JLo,Hi,YLo,Yfe,KLo,ZLo,wG,eyo,oyo,ryo,o2,tyo,Ke,Jy,ayo,Kfe,nyo,syo,Na,lyo,Zfe,iyo,dyo,ege,cyo,myo,oge,fyo,gyo,hyo,G,r2,rge,uyo,pyo,AG,_yo,byo,vyo,t2,tge,Fyo,Tyo,LG,Myo,Eyo,Cyo,a2,age,wyo,Ayo,yG,Lyo,yyo,xyo,n2,nge,$yo,kyo,xG,Syo,Ryo,Pyo,s2,sge,Byo,Iyo,$G,Nyo,qyo,jyo,l2,lge,Dyo,Gyo,kG,Oyo,Vyo,Xyo,i2,ige,zyo,Wyo,SG,Qyo,Hyo,Uyo,d2,dge,Jyo,Yyo,RG,Kyo,Zyo,e8o,c2,cge,o8o,r8o,PG,t8o,a8o,n8o,m2,mge,s8o,l8o,BG,i8o,d8o,c8o,f2,fge,m8o,f8o,IG,g8o,h8o,u8o,g2,gge,p8o,_8o,NG,b8o,v8o,F8o,h2,hge,T8o,M8o,qG,E8o,C8o,w8o,u2,uge,A8o,L8o,jG,y8o,x8o,$8o,p2,pge,k8o,S8o,DG,R8o,P8o,B8o,_2,_ge,I8o,N8o,GG,q8o,j8o,D8o,b2,bge,G8o,O8o,OG,V8o,X8o,z8o,v2,vge,W8o,Q8o,VG,H8o,U8o,J8o,F2,Fge,Y8o,K8o,XG,Z8o,e9o,o9o,T2,Tge,r9o,t9o,zG,a9o,n9o,s9o,M2,Mge,l9o,i9o,WG,d9o,c9o,m9o,E2,Ege,f9o,g9o,QG,h9o,u9o,p9o,C2,Cge,_9o,b9o,HG,v9o,F9o,T9o,w2,wge,M9o,E9o,UG,C9o,w9o,A9o,A2,Age,L9o,y9o,JG,x9o,$9o,k9o,L2,Lge,S9o,R9o,YG,P9o,B9o,I9o,y2,yge,N9o,q9o,KG,j9o,D9o,G9o,x2,xge,O9o,V9o,ZG,X9o,z9o,W9o,$2,$ge,Q9o,H9o,eO,U9o,J9o,Y9o,k2,kge,K9o,Z9o,oO,exo,oxo,rxo,S2,Sge,txo,axo,rO,nxo,sxo,lxo,R2,Rge,ixo,dxo,tO,cxo,mxo,fxo,P2,Pge,gxo,hxo,aO,uxo,pxo,_xo,B2,Bge,bxo,vxo,nO,Fxo,Txo,Mxo,I2,Ige,Exo,Cxo,sO,wxo,Axo,Lxo,N2,Nge,yxo,xxo,lO,$xo,kxo,Sxo,q2,qge,Rxo,Pxo,iO,Bxo,Ixo,Nxo,j2,jge,qxo,jxo,dO,Dxo,Gxo,Oxo,D2,Dge,Vxo,Xxo,cO,zxo,Wxo,Qxo,G2,Gge,Hxo,Uxo,mO,Jxo,Yxo,Kxo,O2,Oge,Zxo,e$o,fO,o$o,r$o,t$o,V2,Vge,a$o,n$o,gO,s$o,l$o,i$o,X2,Xge,d$o,c$o,hO,m$o,f$o,g$o,z2,zge,h$o,u$o,uO,p$o,_$o,b$o,W2,Wge,v$o,F$o,pO,T$o,M$o,E$o,Q2,C$o,Qge,w$o,A$o,Hge,L$o,y$o,H2,sze,Ui,U2,Uge,Yy,x$o,Jge,$$o,lze,Ro,Ky,k$o,Ji,S$o,_O,R$o,P$o,bO,B$o,I$o,N$o,Zy,q$o,Yge,j$o,D$o,G$o,ct,e8,O$o,Kge,V$o,X$o,Yi,z$o,Zge,W$o,Q$o,vO,H$o,U$o,J$o,J2,Y$o,Ze,o8,K$o,ehe,Z$o,eko,qa,oko,ohe,rko,tko,rhe,ako,nko,the,sko,lko,iko,z,Y2,ahe,dko,cko,FO,mko,fko,gko,K2,nhe,hko,uko,TO,pko,_ko,bko,Z2,she,vko,Fko,MO,Tko,Mko,Eko,eb,lhe,Cko,wko,EO,Ako,Lko,yko,ob,ihe,xko,$ko,CO,kko,Sko,Rko,rb,dhe,Pko,Bko,wO,Iko,Nko,qko,tb,che,jko,Dko,AO,Gko,Oko,Vko,ab,mhe,Xko,zko,LO,Wko,Qko,Hko,nb,fhe,Uko,Jko,yO,Yko,Kko,Zko,sb,ghe,eSo,oSo,xO,rSo,tSo,aSo,lb,hhe,nSo,sSo,$O,lSo,iSo,dSo,ib,uhe,cSo,mSo,kO,fSo,gSo,hSo,db,phe,uSo,pSo,SO,_So,bSo,vSo,cb,_he,FSo,TSo,RO,MSo,ESo,CSo,mb,bhe,wSo,ASo,PO,LSo,ySo,xSo,fb,vhe,$So,kSo,BO,SSo,RSo,PSo,gb,Fhe,BSo,ISo,IO,NSo,qSo,jSo,hb,The,DSo,GSo,NO,OSo,VSo,XSo,ub,Mhe,zSo,WSo,qO,QSo,HSo,USo,pb,Ehe,JSo,YSo,jO,KSo,ZSo,eRo,_b,Che,oRo,rRo,DO,tRo,aRo,nRo,bb,whe,sRo,lRo,GO,iRo,dRo,cRo,vb,Ahe,mRo,fRo,OO,gRo,hRo,uRo,Fb,Lhe,pRo,_Ro,VO,bRo,vRo,FRo,Tb,yhe,TRo,MRo,XO,ERo,CRo,wRo,Mb,xhe,ARo,LRo,zO,yRo,xRo,$Ro,Eb,$he,kRo,SRo,WO,RRo,PRo,BRo,Cb,khe,IRo,NRo,QO,qRo,jRo,DRo,wb,She,GRo,ORo,HO,VRo,XRo,zRo,Ab,Rhe,WRo,QRo,UO,HRo,URo,JRo,Lb,Phe,YRo,KRo,JO,ZRo,ePo,oPo,yb,Bhe,rPo,tPo,YO,aPo,nPo,sPo,xb,Ihe,lPo,iPo,KO,dPo,cPo,mPo,$b,Nhe,fPo,gPo,ZO,hPo,uPo,pPo,kb,qhe,_Po,bPo,eV,vPo,FPo,TPo,Sb,jhe,MPo,EPo,oV,CPo,wPo,APo,Rb,Dhe,LPo,yPo,rV,xPo,$Po,kPo,Pb,Ghe,SPo,RPo,tV,PPo,BPo,IPo,Bb,Ohe,NPo,qPo,aV,jPo,DPo,GPo,Ib,Vhe,OPo,VPo,nV,XPo,zPo,WPo,Nb,QPo,Xhe,HPo,UPo,zhe,JPo,YPo,qb,ize,Ki,jb,Whe,r8,KPo,Qhe,ZPo,dze,Po,t8,eBo,Zi,oBo,sV,rBo,tBo,lV,aBo,nBo,sBo,a8,lBo,Hhe,iBo,dBo,cBo,mt,n8,mBo,Uhe,fBo,gBo,ed,hBo,Jhe,uBo,pBo,iV,_Bo,bBo,vBo,Db,FBo,eo,s8,TBo,Yhe,MBo,EBo,ja,CBo,Khe,wBo,ABo,Zhe,LBo,yBo,eue,xBo,$Bo,kBo,Q,Gb,oue,SBo,RBo,dV,PBo,BBo,IBo,Ob,rue,NBo,qBo,cV,jBo,DBo,GBo,Vb,tue,OBo,VBo,mV,XBo,zBo,WBo,Xb,aue,QBo,HBo,fV,UBo,JBo,YBo,zb,nue,KBo,ZBo,gV,eIo,oIo,rIo,Wb,sue,tIo,aIo,hV,nIo,sIo,lIo,Qb,lue,iIo,dIo,uV,cIo,mIo,fIo,Hb,iue,gIo,hIo,pV,uIo,pIo,_Io,Ub,due,bIo,vIo,_V,FIo,TIo,MIo,Jb,cue,EIo,CIo,bV,wIo,AIo,LIo,Yb,mue,yIo,xIo,vV,$Io,kIo,SIo,Kb,fue,RIo,PIo,FV,BIo,IIo,NIo,Zb,gue,qIo,jIo,TV,DIo,GIo,OIo,ev,hue,VIo,XIo,MV,zIo,WIo,QIo,ov,uue,HIo,UIo,EV,JIo,YIo,KIo,rv,pue,ZIo,eNo,CV,oNo,rNo,tNo,tv,_ue,aNo,nNo,wV,sNo,lNo,iNo,av,bue,dNo,cNo,AV,mNo,fNo,gNo,nv,vue,hNo,uNo,LV,pNo,_No,bNo,sv,Fue,vNo,FNo,yV,TNo,MNo,ENo,lv,Tue,CNo,wNo,xV,ANo,LNo,yNo,iv,Mue,xNo,$No,$V,kNo,SNo,RNo,dv,Eue,PNo,BNo,kV,INo,NNo,qNo,cv,Cue,jNo,DNo,SV,GNo,ONo,VNo,mv,wue,XNo,zNo,RV,WNo,QNo,HNo,fv,Aue,UNo,JNo,PV,YNo,KNo,ZNo,gv,Lue,eqo,oqo,BV,rqo,tqo,aqo,hv,yue,nqo,sqo,IV,lqo,iqo,dqo,uv,xue,cqo,mqo,NV,fqo,gqo,hqo,pv,$ue,uqo,pqo,qV,_qo,bqo,vqo,_v,kue,Fqo,Tqo,jV,Mqo,Eqo,Cqo,bv,Sue,wqo,Aqo,DV,Lqo,yqo,xqo,vv,Rue,$qo,kqo,GV,Sqo,Rqo,Pqo,Fv,Pue,Bqo,Iqo,Bue,Nqo,qqo,jqo,Tv,Iue,Dqo,Gqo,OV,Oqo,Vqo,Xqo,Mv,Nue,zqo,Wqo,VV,Qqo,Hqo,Uqo,Ev,que,Jqo,Yqo,XV,Kqo,Zqo,ejo,Cv,jue,ojo,rjo,zV,tjo,ajo,njo,wv,sjo,Due,ljo,ijo,Gue,djo,cjo,Av,cze,od,Lv,Oue,l8,mjo,Vue,fjo,mze,Bo,i8,gjo,rd,hjo,WV,ujo,pjo,QV,_jo,bjo,vjo,d8,Fjo,Xue,Tjo,Mjo,Ejo,ft,c8,Cjo,zue,wjo,Ajo,td,Ljo,Wue,yjo,xjo,HV,$jo,kjo,Sjo,yv,Rjo,oo,m8,Pjo,Que,Bjo,Ijo,Da,Njo,Hue,qjo,jjo,Uue,Djo,Gjo,Jue,Ojo,Vjo,Xjo,fe,xv,Yue,zjo,Wjo,UV,Qjo,Hjo,Ujo,$v,Kue,Jjo,Yjo,JV,Kjo,Zjo,eDo,kv,Zue,oDo,rDo,YV,tDo,aDo,nDo,Sv,epe,sDo,lDo,KV,iDo,dDo,cDo,Rv,ope,mDo,fDo,ZV,gDo,hDo,uDo,Pv,rpe,pDo,_Do,eX,bDo,vDo,FDo,Bv,tpe,TDo,MDo,oX,EDo,CDo,wDo,Iv,ape,ADo,LDo,rX,yDo,xDo,$Do,Nv,npe,kDo,SDo,tX,RDo,PDo,BDo,qv,spe,IDo,NDo,aX,qDo,jDo,DDo,jv,lpe,GDo,ODo,nX,VDo,XDo,zDo,Dv,ipe,WDo,QDo,sX,HDo,UDo,JDo,Gv,dpe,YDo,KDo,lX,ZDo,eGo,oGo,Ov,cpe,rGo,tGo,iX,aGo,nGo,sGo,Vv,mpe,lGo,iGo,dX,dGo,cGo,mGo,Xv,fpe,fGo,gGo,cX,hGo,uGo,pGo,zv,gpe,_Go,bGo,mX,vGo,FGo,TGo,Wv,hpe,MGo,EGo,fX,CGo,wGo,AGo,Qv,upe,LGo,yGo,gX,xGo,$Go,kGo,Hv,SGo,ppe,RGo,PGo,_pe,BGo,IGo,Uv,fze,ad,Jv,bpe,f8,NGo,vpe,qGo,gze,Io,g8,jGo,nd,DGo,hX,GGo,OGo,uX,VGo,XGo,zGo,h8,WGo,Fpe,QGo,HGo,UGo,gt,u8,JGo,Tpe,YGo,KGo,sd,ZGo,Mpe,eOo,oOo,pX,rOo,tOo,aOo,Yv,nOo,ro,p8,sOo,Epe,lOo,iOo,Ga,dOo,Cpe,cOo,mOo,wpe,fOo,gOo,Ape,hOo,uOo,pOo,B,Kv,Lpe,_Oo,bOo,_X,vOo,FOo,TOo,Zv,ype,MOo,EOo,bX,COo,wOo,AOo,e1,xpe,LOo,yOo,vX,xOo,$Oo,kOo,o1,$pe,SOo,ROo,FX,POo,BOo,IOo,r1,kpe,NOo,qOo,TX,jOo,DOo,GOo,t1,Spe,OOo,VOo,MX,XOo,zOo,WOo,a1,Rpe,QOo,HOo,EX,UOo,JOo,YOo,n1,Ppe,KOo,ZOo,CX,eVo,oVo,rVo,s1,Bpe,tVo,aVo,wX,nVo,sVo,lVo,l1,Ipe,iVo,dVo,AX,cVo,mVo,fVo,i1,Npe,gVo,hVo,LX,uVo,pVo,_Vo,d1,qpe,bVo,vVo,yX,FVo,TVo,MVo,c1,jpe,EVo,CVo,xX,wVo,AVo,LVo,m1,Dpe,yVo,xVo,$X,$Vo,kVo,SVo,f1,Gpe,RVo,PVo,kX,BVo,IVo,NVo,g1,Ope,qVo,jVo,SX,DVo,GVo,OVo,h1,Vpe,VVo,XVo,RX,zVo,WVo,QVo,u1,Xpe,HVo,UVo,PX,JVo,YVo,KVo,p1,zpe,ZVo,eXo,BX,oXo,rXo,tXo,_1,Wpe,aXo,nXo,IX,sXo,lXo,iXo,b1,Qpe,dXo,cXo,NX,mXo,fXo,gXo,v1,Hpe,hXo,uXo,qX,pXo,_Xo,bXo,F1,Upe,vXo,FXo,jX,TXo,MXo,EXo,T1,Jpe,CXo,wXo,DX,AXo,LXo,yXo,M1,Ype,xXo,$Xo,GX,kXo,SXo,RXo,E1,Kpe,PXo,BXo,OX,IXo,NXo,qXo,C1,Zpe,jXo,DXo,VX,GXo,OXo,VXo,w1,e_e,XXo,zXo,XX,WXo,QXo,HXo,A1,o_e,UXo,JXo,zX,YXo,KXo,ZXo,L1,r_e,ezo,ozo,WX,rzo,tzo,azo,y1,t_e,nzo,szo,QX,lzo,izo,dzo,x1,a_e,czo,mzo,HX,fzo,gzo,hzo,$1,n_e,uzo,pzo,UX,_zo,bzo,vzo,k1,s_e,Fzo,Tzo,JX,Mzo,Ezo,Czo,S1,l_e,wzo,Azo,YX,Lzo,yzo,xzo,R1,i_e,$zo,kzo,KX,Szo,Rzo,Pzo,P1,d_e,Bzo,Izo,ZX,Nzo,qzo,jzo,B1,c_e,Dzo,Gzo,ez,Ozo,Vzo,Xzo,I1,m_e,zzo,Wzo,oz,Qzo,Hzo,Uzo,N1,f_e,Jzo,Yzo,rz,Kzo,Zzo,eWo,q1,g_e,oWo,rWo,tz,tWo,aWo,nWo,j1,h_e,sWo,lWo,az,iWo,dWo,cWo,D1,u_e,mWo,fWo,nz,gWo,hWo,uWo,G1,p_e,pWo,_Wo,sz,bWo,vWo,FWo,O1,__e,TWo,MWo,lz,EWo,CWo,wWo,V1,b_e,AWo,LWo,iz,yWo,xWo,$Wo,X1,v_e,kWo,SWo,dz,RWo,PWo,BWo,z1,F_e,IWo,NWo,cz,qWo,jWo,DWo,W1,T_e,GWo,OWo,mz,VWo,XWo,zWo,Q1,M_e,WWo,QWo,fz,HWo,UWo,JWo,H1,E_e,YWo,KWo,gz,ZWo,eQo,oQo,U1,rQo,C_e,tQo,aQo,w_e,nQo,sQo,J1,hze,ld,Y1,A_e,_8,lQo,L_e,iQo,uze,No,b8,dQo,id,cQo,hz,mQo,fQo,uz,gQo,hQo,uQo,v8,pQo,y_e,_Qo,bQo,vQo,ht,F8,FQo,x_e,TQo,MQo,dd,EQo,$_e,CQo,wQo,pz,AQo,LQo,yQo,K1,xQo,to,T8,$Qo,k_e,kQo,SQo,Oa,RQo,S_e,PQo,BQo,R_e,IQo,NQo,P_e,qQo,jQo,DQo,Z,Z1,B_e,GQo,OQo,_z,VQo,XQo,zQo,eF,I_e,WQo,QQo,bz,HQo,UQo,JQo,oF,N_e,YQo,KQo,vz,ZQo,eHo,oHo,rF,q_e,rHo,tHo,Fz,aHo,nHo,sHo,tF,j_e,lHo,iHo,Tz,dHo,cHo,mHo,aF,D_e,fHo,gHo,Mz,hHo,uHo,pHo,nF,G_e,_Ho,bHo,Ez,vHo,FHo,THo,sF,O_e,MHo,EHo,Cz,CHo,wHo,AHo,lF,V_e,LHo,yHo,wz,xHo,$Ho,kHo,iF,X_e,SHo,RHo,Az,PHo,BHo,IHo,dF,z_e,NHo,qHo,Lz,jHo,DHo,GHo,cF,W_e,OHo,VHo,yz,XHo,zHo,WHo,mF,Q_e,QHo,HHo,xz,UHo,JHo,YHo,fF,H_e,KHo,ZHo,$z,eUo,oUo,rUo,gF,U_e,tUo,aUo,kz,nUo,sUo,lUo,hF,J_e,iUo,dUo,Sz,cUo,mUo,fUo,uF,Y_e,gUo,hUo,Rz,uUo,pUo,_Uo,pF,K_e,bUo,vUo,Pz,FUo,TUo,MUo,_F,Z_e,EUo,CUo,Bz,wUo,AUo,LUo,bF,e2e,yUo,xUo,Iz,$Uo,kUo,SUo,vF,o2e,RUo,PUo,Nz,BUo,IUo,NUo,FF,r2e,qUo,jUo,qz,DUo,GUo,OUo,TF,t2e,VUo,XUo,jz,zUo,WUo,QUo,MF,a2e,HUo,UUo,Dz,JUo,YUo,KUo,EF,n2e,ZUo,eJo,Gz,oJo,rJo,tJo,CF,s2e,aJo,nJo,Oz,sJo,lJo,iJo,wF,l2e,dJo,cJo,Vz,mJo,fJo,gJo,AF,i2e,hJo,uJo,Xz,pJo,_Jo,bJo,LF,d2e,vJo,FJo,zz,TJo,MJo,EJo,yF,c2e,CJo,wJo,Wz,AJo,LJo,yJo,xF,xJo,m2e,$Jo,kJo,f2e,SJo,RJo,$F,pze,cd,kF,g2e,M8,PJo,h2e,BJo,_ze,qo,E8,IJo,md,NJo,Qz,qJo,jJo,Hz,DJo,GJo,OJo,C8,VJo,u2e,XJo,zJo,WJo,ut,w8,QJo,p2e,HJo,UJo,fd,JJo,_2e,YJo,KJo,Uz,ZJo,eYo,oYo,SF,rYo,ao,A8,tYo,b2e,aYo,nYo,Va,sYo,v2e,lYo,iYo,F2e,dYo,cYo,T2e,mYo,fYo,gYo,jo,RF,M2e,hYo,uYo,Jz,pYo,_Yo,bYo,PF,E2e,vYo,FYo,Yz,TYo,MYo,EYo,BF,C2e,CYo,wYo,Kz,AYo,LYo,yYo,IF,w2e,xYo,$Yo,Zz,kYo,SYo,RYo,NF,A2e,PYo,BYo,eW,IYo,NYo,qYo,qF,L2e,jYo,DYo,oW,GYo,OYo,VYo,jF,XYo,y2e,zYo,WYo,x2e,QYo,HYo,DF,bze,gd,GF,$2e,L8,UYo,k2e,JYo,vze,Do,y8,YYo,hd,KYo,rW,ZYo,eKo,tW,oKo,rKo,tKo,x8,aKo,S2e,nKo,sKo,lKo,pt,$8,iKo,R2e,dKo,cKo,ud,mKo,P2e,fKo,gKo,aW,hKo,uKo,pKo,OF,_Ko,no,k8,bKo,B2e,vKo,FKo,Xa,TKo,I2e,MKo,EKo,N2e,CKo,wKo,q2e,AKo,LKo,yKo,U,VF,j2e,xKo,$Ko,nW,kKo,SKo,RKo,XF,D2e,PKo,BKo,sW,IKo,NKo,qKo,zF,G2e,jKo,DKo,lW,GKo,OKo,VKo,WF,O2e,XKo,zKo,iW,WKo,QKo,HKo,QF,V2e,UKo,JKo,dW,YKo,KKo,ZKo,HF,X2e,eZo,oZo,cW,rZo,tZo,aZo,UF,z2e,nZo,sZo,mW,lZo,iZo,dZo,JF,W2e,cZo,mZo,fW,fZo,gZo,hZo,YF,Q2e,uZo,pZo,gW,_Zo,bZo,vZo,KF,H2e,FZo,TZo,hW,MZo,EZo,CZo,ZF,U2e,wZo,AZo,uW,LZo,yZo,xZo,eT,J2e,$Zo,kZo,pW,SZo,RZo,PZo,oT,Y2e,BZo,IZo,_W,NZo,qZo,jZo,rT,K2e,DZo,GZo,bW,OZo,VZo,XZo,tT,Z2e,zZo,WZo,vW,QZo,HZo,UZo,aT,ebe,JZo,YZo,FW,KZo,ZZo,eer,nT,obe,oer,rer,TW,ter,aer,ner,sT,rbe,ser,ler,MW,ier,der,cer,lT,tbe,mer,fer,EW,ger,her,uer,iT,abe,per,_er,CW,ber,ver,Fer,dT,nbe,Ter,Mer,wW,Eer,Cer,wer,cT,sbe,Aer,Ler,AW,yer,xer,$er,mT,lbe,ker,Ser,LW,Rer,Per,Ber,fT,ibe,Ier,Ner,yW,qer,jer,Der,gT,dbe,Ger,Oer,xW,Ver,Xer,zer,hT,cbe,Wer,Qer,$W,Her,Uer,Jer,uT,mbe,Yer,Ker,kW,Zer,eor,oor,pT,fbe,ror,tor,SW,aor,nor,sor,_T,gbe,lor,ior,RW,dor,cor,mor,bT,hbe,gor,hor,PW,uor,por,_or,vT,ube,bor,vor,BW,For,Tor,Mor,FT,pbe,Eor,Cor,IW,wor,Aor,Lor,TT,_be,yor,xor,NW,$or,kor,Sor,MT,bbe,Ror,Por,qW,Bor,Ior,Nor,ET,vbe,qor,jor,jW,Dor,Gor,Oor,CT,Fbe,Vor,Xor,DW,zor,Wor,Qor,wT,Hor,Tbe,Uor,Jor,Mbe,Yor,Kor,AT,Fze,pd,LT,Ebe,S8,Zor,Cbe,err,Tze,Go,R8,orr,_d,rrr,GW,trr,arr,OW,nrr,srr,lrr,P8,irr,wbe,drr,crr,mrr,_t,B8,frr,Abe,grr,hrr,bd,urr,Lbe,prr,_rr,VW,brr,vrr,Frr,yT,Trr,so,I8,Mrr,ybe,Err,Crr,za,wrr,xbe,Arr,Lrr,$be,yrr,xrr,kbe,$rr,krr,Srr,V,xT,Sbe,Rrr,Prr,XW,Brr,Irr,Nrr,$T,Rbe,qrr,jrr,zW,Drr,Grr,Orr,kT,Pbe,Vrr,Xrr,WW,zrr,Wrr,Qrr,ST,Bbe,Hrr,Urr,QW,Jrr,Yrr,Krr,RT,Ibe,Zrr,etr,HW,otr,rtr,ttr,PT,Nbe,atr,ntr,UW,str,ltr,itr,BT,qbe,dtr,ctr,JW,mtr,ftr,gtr,IT,jbe,htr,utr,YW,ptr,_tr,btr,NT,Dbe,vtr,Ftr,KW,Ttr,Mtr,Etr,qT,Gbe,Ctr,wtr,ZW,Atr,Ltr,ytr,jT,Obe,xtr,$tr,eQ,ktr,Str,Rtr,DT,Vbe,Ptr,Btr,oQ,Itr,Ntr,qtr,GT,Xbe,jtr,Dtr,rQ,Gtr,Otr,Vtr,OT,zbe,Xtr,ztr,tQ,Wtr,Qtr,Htr,VT,Wbe,Utr,Jtr,aQ,Ytr,Ktr,Ztr,XT,Qbe,ear,oar,nQ,rar,tar,aar,zT,Hbe,nar,sar,sQ,lar,iar,dar,WT,Ube,car,mar,lQ,far,gar,har,QT,Jbe,uar,par,iQ,_ar,bar,Far,HT,Ybe,Tar,Mar,dQ,Ear,Car,war,UT,Kbe,Aar,Lar,cQ,yar,xar,$ar,JT,Zbe,kar,Sar,mQ,Rar,Par,Bar,YT,eve,Iar,Nar,fQ,qar,jar,Dar,KT,ove,Gar,Oar,gQ,Var,Xar,zar,ZT,rve,War,Qar,hQ,Har,Uar,Jar,eM,tve,Yar,Kar,uQ,Zar,enr,onr,oM,ave,rnr,tnr,pQ,anr,nnr,snr,rM,nve,lnr,inr,_Q,dnr,cnr,mnr,tM,sve,fnr,gnr,bQ,hnr,unr,pnr,aM,lve,_nr,bnr,vQ,vnr,Fnr,Tnr,nM,ive,Mnr,Enr,FQ,Cnr,wnr,Anr,sM,dve,Lnr,ynr,TQ,xnr,$nr,knr,lM,cve,Snr,Rnr,MQ,Pnr,Bnr,Inr,iM,mve,Nnr,qnr,EQ,jnr,Dnr,Gnr,dM,fve,Onr,Vnr,CQ,Xnr,znr,Wnr,cM,gve,Qnr,Hnr,wQ,Unr,Jnr,Ynr,mM,hve,Knr,Znr,AQ,esr,osr,rsr,fM,uve,tsr,asr,LQ,nsr,ssr,lsr,gM,pve,isr,dsr,yQ,csr,msr,fsr,hM,_ve,gsr,hsr,xQ,usr,psr,_sr,uM,bve,bsr,vsr,$Q,Fsr,Tsr,Msr,pM,vve,Esr,Csr,kQ,wsr,Asr,Lsr,_M,ysr,Fve,xsr,$sr,Tve,ksr,Ssr,bM,Mze,vd,vM,Mve,N8,Rsr,Eve,Psr,Eze,Oo,q8,Bsr,Fd,Isr,SQ,Nsr,qsr,RQ,jsr,Dsr,Gsr,j8,Osr,Cve,Vsr,Xsr,zsr,bt,D8,Wsr,wve,Qsr,Hsr,Td,Usr,Ave,Jsr,Ysr,PQ,Ksr,Zsr,elr,FM,olr,lo,G8,rlr,Lve,tlr,alr,Wa,nlr,yve,slr,llr,xve,ilr,dlr,$ve,clr,mlr,flr,kve,TM,Sve,glr,hlr,BQ,ulr,plr,_lr,MM,blr,Rve,vlr,Flr,Pve,Tlr,Mlr,EM,Cze,Md,CM,Bve,O8,Elr,Ive,Clr,wze,Vo,V8,wlr,Ed,Alr,IQ,Llr,ylr,NQ,xlr,$lr,klr,X8,Slr,Nve,Rlr,Plr,Blr,vt,z8,Ilr,qve,Nlr,qlr,Cd,jlr,jve,Dlr,Glr,qQ,Olr,Vlr,Xlr,wM,zlr,io,W8,Wlr,Dve,Qlr,Hlr,Qa,Ulr,Gve,Jlr,Ylr,Ove,Klr,Zlr,Vve,eir,oir,rir,ve,AM,Xve,tir,air,jQ,nir,sir,lir,LM,zve,iir,dir,DQ,cir,mir,fir,yM,Wve,gir,hir,GQ,uir,pir,_ir,xM,Qve,bir,vir,OQ,Fir,Tir,Mir,Js,Hve,Eir,Cir,VQ,wir,Air,XQ,Lir,yir,xir,$M,Uve,$ir,kir,zQ,Sir,Rir,Pir,Ys,Jve,Bir,Iir,WQ,Nir,qir,QQ,jir,Dir,Gir,kM,Yve,Oir,Vir,HQ,Xir,zir,Wir,Ft,Kve,Qir,Hir,UQ,Uir,Jir,JQ,Yir,Kir,YQ,Zir,edr,odr,SM,Zve,rdr,tdr,KQ,adr,ndr,sdr,RM,e1e,ldr,idr,ZQ,ddr,cdr,mdr,PM,o1e,fdr,gdr,eH,hdr,udr,pdr,BM,r1e,_dr,bdr,oH,vdr,Fdr,Tdr,IM,t1e,Mdr,Edr,rH,Cdr,wdr,Adr,NM,a1e,Ldr,ydr,tH,xdr,$dr,kdr,qM,n1e,Sdr,Rdr,aH,Pdr,Bdr,Idr,jM,Ndr,s1e,qdr,jdr,l1e,Ddr,Gdr,DM,Aze,wd,GM,i1e,Q8,Odr,d1e,Vdr,Lze,Xo,H8,Xdr,Ad,zdr,nH,Wdr,Qdr,sH,Hdr,Udr,Jdr,U8,Ydr,c1e,Kdr,Zdr,ecr,Tt,J8,ocr,m1e,rcr,tcr,Ld,acr,f1e,ncr,scr,lH,lcr,icr,dcr,OM,ccr,co,Y8,mcr,g1e,fcr,gcr,Ha,hcr,h1e,ucr,pcr,u1e,_cr,bcr,p1e,vcr,Fcr,Tcr,_1e,VM,b1e,Mcr,Ecr,iH,Ccr,wcr,Acr,XM,Lcr,v1e,ycr,xcr,F1e,$cr,kcr,zM,yze,yd,WM,T1e,K8,Scr,M1e,Rcr,xze,zo,Z8,Pcr,xd,Bcr,dH,Icr,Ncr,cH,qcr,jcr,Dcr,e9,Gcr,E1e,Ocr,Vcr,Xcr,Mt,o9,zcr,C1e,Wcr,Qcr,$d,Hcr,w1e,Ucr,Jcr,mH,Ycr,Kcr,Zcr,QM,emr,mo,r9,omr,A1e,rmr,tmr,Ua,amr,L1e,nmr,smr,y1e,lmr,imr,x1e,dmr,cmr,mmr,$1e,HM,k1e,fmr,gmr,fH,hmr,umr,pmr,UM,_mr,S1e,bmr,vmr,R1e,Fmr,Tmr,JM,$ze,kd,YM,P1e,t9,Mmr,B1e,Emr,kze,Wo,a9,Cmr,Sd,wmr,gH,Amr,Lmr,hH,ymr,xmr,$mr,n9,kmr,I1e,Smr,Rmr,Pmr,Et,s9,Bmr,N1e,Imr,Nmr,Rd,qmr,q1e,jmr,Dmr,uH,Gmr,Omr,Vmr,KM,Xmr,fo,l9,zmr,j1e,Wmr,Qmr,Ja,Hmr,D1e,Umr,Jmr,G1e,Ymr,Kmr,O1e,Zmr,efr,ofr,Pe,ZM,V1e,rfr,tfr,pH,afr,nfr,sfr,e4,X1e,lfr,ifr,_H,dfr,cfr,mfr,o4,z1e,ffr,gfr,bH,hfr,ufr,pfr,r4,W1e,_fr,bfr,vH,vfr,Ffr,Tfr,t4,Q1e,Mfr,Efr,FH,Cfr,wfr,Afr,a4,H1e,Lfr,yfr,TH,xfr,$fr,kfr,n4,U1e,Sfr,Rfr,MH,Pfr,Bfr,Ifr,s4,J1e,Nfr,qfr,EH,jfr,Dfr,Gfr,l4,Y1e,Ofr,Vfr,CH,Xfr,zfr,Wfr,i4,Qfr,K1e,Hfr,Ufr,Z1e,Jfr,Yfr,d4,Sze,Pd,c4,eFe,i9,Kfr,oFe,Zfr,Rze,Qo,d9,egr,Bd,ogr,wH,rgr,tgr,AH,agr,ngr,sgr,c9,lgr,rFe,igr,dgr,cgr,Ct,m9,mgr,tFe,fgr,ggr,Id,hgr,aFe,ugr,pgr,LH,_gr,bgr,vgr,m4,Fgr,go,f9,Tgr,nFe,Mgr,Egr,Ya,Cgr,sFe,wgr,Agr,lFe,Lgr,ygr,iFe,xgr,$gr,kgr,rt,f4,dFe,Sgr,Rgr,yH,Pgr,Bgr,Igr,g4,cFe,Ngr,qgr,xH,jgr,Dgr,Ggr,h4,mFe,Ogr,Vgr,$H,Xgr,zgr,Wgr,u4,fFe,Qgr,Hgr,kH,Ugr,Jgr,Ygr,p4,gFe,Kgr,Zgr,SH,ehr,ohr,rhr,_4,thr,hFe,ahr,nhr,uFe,shr,lhr,b4,Pze,Nd,v4,pFe,g9,ihr,_Fe,dhr,Bze,Ho,h9,chr,qd,mhr,RH,fhr,ghr,PH,hhr,uhr,phr,u9,_hr,bFe,bhr,vhr,Fhr,wt,p9,Thr,vFe,Mhr,Ehr,jd,Chr,FFe,whr,Ahr,BH,Lhr,yhr,xhr,F4,$hr,ho,_9,khr,TFe,Shr,Rhr,Ka,Phr,MFe,Bhr,Ihr,EFe,Nhr,qhr,CFe,jhr,Dhr,Ghr,Le,T4,wFe,Ohr,Vhr,IH,Xhr,zhr,Whr,M4,AFe,Qhr,Hhr,NH,Uhr,Jhr,Yhr,E4,LFe,Khr,Zhr,qH,eur,our,rur,C4,yFe,tur,aur,jH,nur,sur,lur,w4,xFe,iur,dur,DH,cur,mur,fur,A4,$Fe,gur,hur,GH,uur,pur,_ur,L4,kFe,bur,vur,OH,Fur,Tur,Mur,y4,SFe,Eur,Cur,VH,wur,Aur,Lur,x4,RFe,yur,xur,XH,$ur,kur,Sur,$4,PFe,Rur,Pur,zH,Bur,Iur,Nur,k4,qur,BFe,jur,Dur,IFe,Gur,Our,S4,Ize,Dd,R4,NFe,b9,Vur,qFe,Xur,Nze,Uo,v9,zur,Gd,Wur,WH,Qur,Hur,QH,Uur,Jur,Yur,F9,Kur,jFe,Zur,epr,opr,At,T9,rpr,DFe,tpr,apr,Od,npr,GFe,spr,lpr,HH,ipr,dpr,cpr,P4,mpr,uo,M9,fpr,OFe,gpr,hpr,Za,upr,VFe,ppr,_pr,XFe,bpr,vpr,zFe,Fpr,Tpr,Mpr,E9,B4,WFe,Epr,Cpr,UH,wpr,Apr,Lpr,I4,QFe,ypr,xpr,JH,$pr,kpr,Spr,N4,Rpr,HFe,Ppr,Bpr,UFe,Ipr,Npr,q4,qze,Vd,j4,JFe,C9,qpr,YFe,jpr,jze,Jo,w9,Dpr,Xd,Gpr,YH,Opr,Vpr,KH,Xpr,zpr,Wpr,A9,Qpr,KFe,Hpr,Upr,Jpr,Lt,L9,Ypr,ZFe,Kpr,Zpr,zd,e_r,eTe,o_r,r_r,ZH,t_r,a_r,n_r,D4,s_r,po,y9,l_r,oTe,i_r,d_r,en,c_r,rTe,m_r,f_r,tTe,g_r,h_r,aTe,u_r,p_r,__r,tt,G4,nTe,b_r,v_r,eU,F_r,T_r,M_r,O4,sTe,E_r,C_r,oU,w_r,A_r,L_r,V4,lTe,y_r,x_r,rU,$_r,k_r,S_r,X4,iTe,R_r,P_r,tU,B_r,I_r,N_r,z4,dTe,q_r,j_r,aU,D_r,G_r,O_r,W4,V_r,cTe,X_r,z_r,mTe,W_r,Q_r,Q4,Dze,Wd,H4,fTe,x9,H_r,gTe,U_r,Gze,Yo,$9,J_r,Qd,Y_r,nU,K_r,Z_r,sU,e2r,o2r,r2r,k9,t2r,hTe,a2r,n2r,s2r,yt,S9,l2r,uTe,i2r,d2r,Hd,c2r,pTe,m2r,f2r,lU,g2r,h2r,u2r,U4,p2r,_o,R9,_2r,_Te,b2r,v2r,on,F2r,bTe,T2r,M2r,vTe,E2r,C2r,FTe,w2r,A2r,L2r,Ud,J4,TTe,y2r,x2r,iU,$2r,k2r,S2r,Y4,MTe,R2r,P2r,dU,B2r,I2r,N2r,K4,ETe,q2r,j2r,cU,D2r,G2r,O2r,Z4,V2r,CTe,X2r,z2r,wTe,W2r,Q2r,eE,Oze,Jd,oE,ATe,P9,H2r,LTe,U2r,Vze,Ko,B9,J2r,Yd,Y2r,mU,K2r,Z2r,fU,ebr,obr,rbr,I9,tbr,yTe,abr,nbr,sbr,xt,N9,lbr,xTe,ibr,dbr,Kd,cbr,$Te,mbr,fbr,gU,gbr,hbr,ubr,rE,pbr,bo,q9,_br,kTe,bbr,vbr,rn,Fbr,STe,Tbr,Mbr,RTe,Ebr,Cbr,PTe,wbr,Abr,Lbr,j9,tE,BTe,ybr,xbr,hU,$br,kbr,Sbr,aE,ITe,Rbr,Pbr,uU,Bbr,Ibr,Nbr,nE,qbr,NTe,jbr,Dbr,qTe,Gbr,Obr,sE,Xze,Zd,lE,jTe,D9,Vbr,DTe,Xbr,zze,Zo,G9,zbr,ec,Wbr,pU,Qbr,Hbr,_U,Ubr,Jbr,Ybr,O9,Kbr,GTe,Zbr,evr,ovr,$t,V9,rvr,OTe,tvr,avr,oc,nvr,VTe,svr,lvr,bU,ivr,dvr,cvr,iE,mvr,vo,X9,fvr,XTe,gvr,hvr,tn,uvr,zTe,pvr,_vr,WTe,bvr,vvr,QTe,Fvr,Tvr,Mvr,HTe,dE,UTe,Evr,Cvr,vU,wvr,Avr,Lvr,cE,yvr,JTe,xvr,$vr,YTe,kvr,Svr,mE,Wze,rc,fE,KTe,z9,Rvr,ZTe,Pvr,Qze,er,W9,Bvr,tc,Ivr,FU,Nvr,qvr,TU,jvr,Dvr,Gvr,Q9,Ovr,eMe,Vvr,Xvr,zvr,kt,H9,Wvr,oMe,Qvr,Hvr,ac,Uvr,rMe,Jvr,Yvr,MU,Kvr,Zvr,e1r,gE,o1r,Fo,U9,r1r,tMe,t1r,a1r,an,n1r,aMe,s1r,l1r,nMe,i1r,d1r,sMe,c1r,m1r,f1r,at,hE,lMe,g1r,h1r,EU,u1r,p1r,_1r,uE,iMe,b1r,v1r,CU,F1r,T1r,M1r,pE,dMe,E1r,C1r,wU,w1r,A1r,L1r,_E,cMe,y1r,x1r,AU,$1r,k1r,S1r,bE,mMe,R1r,P1r,LU,B1r,I1r,N1r,vE,q1r,fMe,j1r,D1r,gMe,G1r,O1r,FE,Hze,nc,TE,hMe,J9,V1r,uMe,X1r,Uze,or,Y9,z1r,sc,W1r,yU,Q1r,H1r,xU,U1r,J1r,Y1r,K9,K1r,pMe,Z1r,eFr,oFr,St,Z9,rFr,_Me,tFr,aFr,lc,nFr,bMe,sFr,lFr,$U,iFr,dFr,cFr,ME,mFr,To,ex,fFr,vMe,gFr,hFr,nn,uFr,FMe,pFr,_Fr,TMe,bFr,vFr,MMe,FFr,TFr,MFr,EMe,EE,CMe,EFr,CFr,kU,wFr,AFr,LFr,CE,yFr,wMe,xFr,$Fr,AMe,kFr,SFr,wE,Jze,ic,AE,LMe,ox,RFr,yMe,PFr,Yze,rr,rx,BFr,dc,IFr,SU,NFr,qFr,RU,jFr,DFr,GFr,tx,OFr,xMe,VFr,XFr,zFr,Rt,ax,WFr,$Me,QFr,HFr,cc,UFr,kMe,JFr,YFr,PU,KFr,ZFr,eTr,LE,oTr,$r,nx,rTr,SMe,tTr,aTr,sn,nTr,RMe,sTr,lTr,PMe,iTr,dTr,BMe,cTr,mTr,fTr,I,yE,IMe,gTr,hTr,BU,uTr,pTr,_Tr,xE,NMe,bTr,vTr,IU,FTr,TTr,MTr,$E,qMe,ETr,CTr,NU,wTr,ATr,LTr,kE,jMe,yTr,xTr,qU,$Tr,kTr,STr,SE,DMe,RTr,PTr,jU,BTr,ITr,NTr,RE,GMe,qTr,jTr,DU,DTr,GTr,OTr,PE,OMe,VTr,XTr,GU,zTr,WTr,QTr,BE,VMe,HTr,UTr,OU,JTr,YTr,KTr,IE,XMe,ZTr,eMr,VU,oMr,rMr,tMr,NE,zMe,aMr,nMr,XU,sMr,lMr,iMr,qE,WMe,dMr,cMr,zU,mMr,fMr,gMr,jE,QMe,hMr,uMr,WU,pMr,_Mr,bMr,DE,HMe,vMr,FMr,QU,TMr,MMr,EMr,GE,UMe,CMr,wMr,HU,AMr,LMr,yMr,OE,JMe,xMr,$Mr,UU,kMr,SMr,RMr,VE,YMe,PMr,BMr,JU,IMr,NMr,qMr,XE,KMe,jMr,DMr,YU,GMr,OMr,VMr,zE,ZMe,XMr,zMr,KU,WMr,QMr,HMr,Ks,e4e,UMr,JMr,ZU,YMr,KMr,eJ,ZMr,e4r,o4r,WE,o4e,r4r,t4r,oJ,a4r,n4r,s4r,QE,r4e,l4r,i4r,rJ,d4r,c4r,m4r,HE,t4e,f4r,g4r,tJ,h4r,u4r,p4r,UE,a4e,_4r,b4r,aJ,v4r,F4r,T4r,JE,n4e,M4r,E4r,nJ,C4r,w4r,A4r,YE,s4e,L4r,y4r,sJ,x4r,$4r,k4r,KE,l4e,S4r,R4r,lJ,P4r,B4r,I4r,ZE,i4e,N4r,q4r,iJ,j4r,D4r,G4r,eC,d4e,O4r,V4r,dJ,X4r,z4r,W4r,oC,c4e,Q4r,H4r,cJ,U4r,J4r,Y4r,rC,m4e,K4r,Z4r,mJ,eEr,oEr,rEr,tC,f4e,tEr,aEr,fJ,nEr,sEr,lEr,aC,g4e,iEr,dEr,gJ,cEr,mEr,fEr,nC,h4e,gEr,hEr,hJ,uEr,pEr,_Er,sC,u4e,bEr,vEr,uJ,FEr,TEr,MEr,lC,p4e,EEr,CEr,pJ,wEr,AEr,LEr,iC,_4e,yEr,xEr,_J,$Er,kEr,SEr,dC,b4e,REr,PEr,bJ,BEr,IEr,NEr,cC,v4e,qEr,jEr,vJ,DEr,GEr,OEr,mC,F4e,VEr,XEr,FJ,zEr,WEr,QEr,fC,T4e,HEr,UEr,TJ,JEr,YEr,KEr,gC,M4e,ZEr,eCr,MJ,oCr,rCr,tCr,hC,E4e,aCr,nCr,EJ,sCr,lCr,iCr,uC,C4e,dCr,cCr,CJ,mCr,fCr,gCr,pC,w4e,hCr,uCr,wJ,pCr,_Cr,bCr,_C,A4e,vCr,FCr,AJ,TCr,MCr,ECr,bC,L4e,CCr,wCr,LJ,ACr,LCr,yCr,vC,y4e,xCr,$Cr,yJ,kCr,SCr,RCr,FC,x4e,PCr,BCr,xJ,ICr,NCr,qCr,TC,$4e,jCr,DCr,$J,GCr,OCr,VCr,MC,k4e,XCr,zCr,kJ,WCr,QCr,HCr,EC,S4e,UCr,JCr,SJ,YCr,KCr,ZCr,CC,Kze,mc,wC,R4e,sx,e5r,P4e,o5r,Zze,tr,lx,r5r,fc,t5r,RJ,a5r,n5r,PJ,s5r,l5r,i5r,ix,d5r,B4e,c5r,m5r,f5r,Pt,dx,g5r,I4e,h5r,u5r,gc,p5r,N4e,_5r,b5r,BJ,v5r,F5r,T5r,AC,M5r,kr,cx,E5r,q4e,C5r,w5r,ln,A5r,j4e,L5r,y5r,D4e,x5r,$5r,G4e,k5r,S5r,R5r,se,LC,O4e,P5r,B5r,IJ,I5r,N5r,q5r,yC,V4e,j5r,D5r,NJ,G5r,O5r,V5r,xC,X4e,X5r,z5r,qJ,W5r,Q5r,H5r,$C,z4e,U5r,J5r,jJ,Y5r,K5r,Z5r,kC,W4e,e3r,o3r,DJ,r3r,t3r,a3r,SC,Q4e,n3r,s3r,GJ,l3r,i3r,d3r,RC,H4e,c3r,m3r,OJ,f3r,g3r,h3r,PC,U4e,u3r,p3r,VJ,_3r,b3r,v3r,BC,J4e,F3r,T3r,XJ,M3r,E3r,C3r,IC,Y4e,w3r,A3r,zJ,L3r,y3r,x3r,NC,K4e,$3r,k3r,WJ,S3r,R3r,P3r,qC,Z4e,B3r,I3r,QJ,N3r,q3r,j3r,jC,eEe,D3r,G3r,HJ,O3r,V3r,X3r,DC,oEe,z3r,W3r,UJ,Q3r,H3r,U3r,GC,rEe,J3r,Y3r,JJ,K3r,Z3r,e0r,OC,tEe,o0r,r0r,YJ,t0r,a0r,n0r,VC,aEe,s0r,l0r,KJ,i0r,d0r,c0r,XC,nEe,m0r,f0r,ZJ,g0r,h0r,u0r,zC,sEe,p0r,_0r,eY,b0r,v0r,F0r,WC,lEe,T0r,M0r,oY,E0r,C0r,w0r,QC,iEe,A0r,L0r,rY,y0r,x0r,$0r,HC,dEe,k0r,S0r,tY,R0r,P0r,B0r,UC,cEe,I0r,N0r,aY,q0r,j0r,D0r,JC,eWe,hc,YC,mEe,mx,G0r,fEe,O0r,oWe,ar,fx,V0r,uc,X0r,nY,z0r,W0r,sY,Q0r,H0r,U0r,gx,J0r,gEe,Y0r,K0r,Z0r,Bt,hx,ewr,hEe,owr,rwr,pc,twr,uEe,awr,nwr,lY,swr,lwr,iwr,KC,dwr,Sr,ux,cwr,pEe,mwr,fwr,dn,gwr,_Ee,hwr,uwr,bEe,pwr,_wr,vEe,bwr,vwr,Fwr,Me,ZC,FEe,Twr,Mwr,iY,Ewr,Cwr,wwr,e5,TEe,Awr,Lwr,dY,ywr,xwr,$wr,o5,MEe,kwr,Swr,cY,Rwr,Pwr,Bwr,r5,EEe,Iwr,Nwr,mY,qwr,jwr,Dwr,t5,CEe,Gwr,Owr,fY,Vwr,Xwr,zwr,a5,wEe,Wwr,Qwr,gY,Hwr,Uwr,Jwr,n5,AEe,Ywr,Kwr,hY,Zwr,eAr,oAr,s5,LEe,rAr,tAr,uY,aAr,nAr,sAr,l5,yEe,lAr,iAr,pY,dAr,cAr,mAr,i5,xEe,fAr,gAr,_Y,hAr,uAr,pAr,d5,$Ee,_Ar,bAr,bY,vAr,FAr,TAr,c5,kEe,MAr,EAr,vY,CAr,wAr,AAr,m5,SEe,LAr,yAr,FY,xAr,$Ar,kAr,f5,rWe,_c,g5,REe,px,SAr,PEe,RAr,tWe,nr,_x,PAr,bc,BAr,TY,IAr,NAr,MY,qAr,jAr,DAr,bx,GAr,BEe,OAr,VAr,XAr,It,vx,zAr,IEe,WAr,QAr,vc,HAr,NEe,UAr,JAr,EY,YAr,KAr,ZAr,h5,e6r,Rr,Fx,o6r,qEe,r6r,t6r,cn,a6r,jEe,n6r,s6r,DEe,l6r,i6r,GEe,d6r,c6r,m6r,Ve,u5,OEe,f6r,g6r,CY,h6r,u6r,p6r,p5,VEe,_6r,b6r,wY,v6r,F6r,T6r,Zs,XEe,M6r,E6r,AY,C6r,w6r,LY,A6r,L6r,y6r,_5,zEe,x6r,$6r,yY,k6r,S6r,R6r,b5,WEe,P6r,B6r,xY,I6r,N6r,q6r,v5,QEe,j6r,D6r,$Y,G6r,O6r,V6r,F5,HEe,X6r,z6r,kY,W6r,Q6r,H6r,T5,UEe,U6r,J6r,SY,Y6r,K6r,Z6r,M5,aWe,Fc,E5,JEe,Tx,e7r,YEe,o7r,nWe,sr,Mx,r7r,Tc,t7r,RY,a7r,n7r,PY,s7r,l7r,i7r,Ex,d7r,KEe,c7r,m7r,f7r,Nt,Cx,g7r,ZEe,h7r,u7r,Mc,p7r,eCe,_7r,b7r,BY,v7r,F7r,T7r,C5,M7r,Pr,wx,E7r,oCe,C7r,w7r,mn,A7r,rCe,L7r,y7r,tCe,x7r,$7r,aCe,k7r,S7r,R7r,ie,w5,nCe,P7r,B7r,IY,I7r,N7r,q7r,A5,sCe,j7r,D7r,NY,G7r,O7r,V7r,L5,lCe,X7r,z7r,qY,W7r,Q7r,H7r,y5,iCe,U7r,J7r,jY,Y7r,K7r,Z7r,x5,dCe,eLr,oLr,DY,rLr,tLr,aLr,$5,cCe,nLr,sLr,GY,lLr,iLr,dLr,k5,mCe,cLr,mLr,OY,fLr,gLr,hLr,S5,fCe,uLr,pLr,VY,_Lr,bLr,vLr,R5,gCe,FLr,TLr,XY,MLr,ELr,CLr,P5,hCe,wLr,ALr,zY,LLr,yLr,xLr,B5,uCe,$Lr,kLr,WY,SLr,RLr,PLr,I5,pCe,BLr,ILr,QY,NLr,qLr,jLr,N5,_Ce,DLr,GLr,HY,OLr,VLr,XLr,q5,bCe,zLr,WLr,UY,QLr,HLr,ULr,j5,vCe,JLr,YLr,JY,KLr,ZLr,eyr,D5,FCe,oyr,ryr,YY,tyr,ayr,nyr,G5,TCe,syr,lyr,KY,iyr,dyr,cyr,O5,MCe,myr,fyr,ZY,gyr,hyr,uyr,V5,ECe,pyr,_yr,eK,byr,vyr,Fyr,X5,CCe,Tyr,Myr,oK,Eyr,Cyr,wyr,z5,sWe,Ec,W5,wCe,Ax,Ayr,ACe,Lyr,lWe,lr,Lx,yyr,Cc,xyr,rK,$yr,kyr,tK,Syr,Ryr,Pyr,yx,Byr,LCe,Iyr,Nyr,qyr,qt,xx,jyr,yCe,Dyr,Gyr,wc,Oyr,xCe,Vyr,Xyr,aK,zyr,Wyr,Qyr,Q5,Hyr,Br,$x,Uyr,$Ce,Jyr,Yyr,fn,Kyr,kCe,Zyr,e8r,SCe,o8r,r8r,RCe,t8r,a8r,n8r,ye,H5,PCe,s8r,l8r,nK,i8r,d8r,c8r,U5,BCe,m8r,f8r,sK,g8r,h8r,u8r,J5,ICe,p8r,_8r,lK,b8r,v8r,F8r,Y5,NCe,T8r,M8r,iK,E8r,C8r,w8r,K5,qCe,A8r,L8r,dK,y8r,x8r,$8r,Z5,jCe,k8r,S8r,cK,R8r,P8r,B8r,e3,DCe,I8r,N8r,mK,q8r,j8r,D8r,o3,GCe,G8r,O8r,fK,V8r,X8r,z8r,r3,OCe,W8r,Q8r,gK,H8r,U8r,J8r,t3,VCe,Y8r,K8r,hK,Z8r,e9r,o9r,a3,iWe,Ac,n3,XCe,kx,r9r,zCe,t9r,dWe,ir,Sx,a9r,Lc,n9r,uK,s9r,l9r,pK,i9r,d9r,c9r,Rx,m9r,WCe,f9r,g9r,h9r,jt,Px,u9r,QCe,p9r,_9r,yc,b9r,HCe,v9r,F9r,_K,T9r,M9r,E9r,s3,C9r,Ir,Bx,w9r,UCe,A9r,L9r,gn,y9r,JCe,x9r,$9r,YCe,k9r,S9r,KCe,R9r,P9r,B9r,te,l3,ZCe,I9r,N9r,bK,q9r,j9r,D9r,i3,e5e,G9r,O9r,vK,V9r,X9r,z9r,d3,o5e,W9r,Q9r,FK,H9r,U9r,J9r,c3,r5e,Y9r,K9r,TK,Z9r,exr,oxr,m3,t5e,rxr,txr,MK,axr,nxr,sxr,f3,a5e,lxr,ixr,EK,dxr,cxr,mxr,g3,n5e,fxr,gxr,CK,hxr,uxr,pxr,h3,s5e,_xr,bxr,wK,vxr,Fxr,Txr,u3,l5e,Mxr,Exr,AK,Cxr,wxr,Axr,p3,i5e,Lxr,yxr,LK,xxr,$xr,kxr,_3,d5e,Sxr,Rxr,yK,Pxr,Bxr,Ixr,b3,c5e,Nxr,qxr,xK,jxr,Dxr,Gxr,v3,m5e,Oxr,Vxr,$K,Xxr,zxr,Wxr,F3,f5e,Qxr,Hxr,kK,Uxr,Jxr,Yxr,T3,g5e,Kxr,Zxr,SK,e$r,o$r,r$r,M3,h5e,t$r,a$r,RK,n$r,s$r,l$r,E3,u5e,i$r,d$r,PK,c$r,m$r,f$r,C3,p5e,g$r,h$r,BK,u$r,p$r,_$r,w3,_5e,b$r,v$r,IK,F$r,T$r,M$r,A3,b5e,E$r,C$r,NK,w$r,A$r,L$r,L3,v5e,y$r,x$r,qK,$$r,k$r,S$r,y3,F5e,R$r,P$r,jK,B$r,I$r,N$r,x3,T5e,q$r,j$r,DK,D$r,G$r,O$r,$3,M5e,V$r,X$r,GK,z$r,W$r,Q$r,k3,E5e,H$r,U$r,OK,J$r,Y$r,K$r,S3,C5e,Z$r,ekr,VK,okr,rkr,tkr,R3,cWe,xc,P3,w5e,Ix,akr,A5e,nkr,mWe,dr,Nx,skr,$c,lkr,XK,ikr,dkr,zK,ckr,mkr,fkr,qx,gkr,L5e,hkr,ukr,pkr,Dt,jx,_kr,y5e,bkr,vkr,kc,Fkr,x5e,Tkr,Mkr,WK,Ekr,Ckr,wkr,B3,Akr,Nr,Dx,Lkr,$5e,ykr,xkr,hn,$kr,k5e,kkr,Skr,S5e,Rkr,Pkr,R5e,Bkr,Ikr,Nkr,be,I3,P5e,qkr,jkr,QK,Dkr,Gkr,Okr,N3,B5e,Vkr,Xkr,HK,zkr,Wkr,Qkr,q3,I5e,Hkr,Ukr,UK,Jkr,Ykr,Kkr,j3,N5e,Zkr,eSr,JK,oSr,rSr,tSr,D3,q5e,aSr,nSr,YK,sSr,lSr,iSr,G3,j5e,dSr,cSr,KK,mSr,fSr,gSr,O3,D5e,hSr,uSr,ZK,pSr,_Sr,bSr,V3,G5e,vSr,FSr,eZ,TSr,MSr,ESr,X3,O5e,CSr,wSr,oZ,ASr,LSr,ySr,z3,V5e,xSr,$Sr,rZ,kSr,SSr,RSr,W3,X5e,PSr,BSr,tZ,ISr,NSr,qSr,Q3,z5e,jSr,DSr,aZ,GSr,OSr,VSr,H3,W5e,XSr,zSr,nZ,WSr,QSr,HSr,U3,Q5e,USr,JSr,sZ,YSr,KSr,ZSr,J3,H5e,eRr,oRr,lZ,rRr,tRr,aRr,Y3,U5e,nRr,sRr,iZ,lRr,iRr,dRr,K3,J5e,cRr,mRr,dZ,fRr,gRr,hRr,Z3,fWe,Sc,e0,Y5e,Gx,uRr,K5e,pRr,gWe,cr,Ox,_Rr,Rc,bRr,cZ,vRr,FRr,mZ,TRr,MRr,ERr,Vx,CRr,Z5e,wRr,ARr,LRr,Gt,Xx,yRr,e3e,xRr,$Rr,Pc,kRr,o3e,SRr,RRr,fZ,PRr,BRr,IRr,o0,NRr,qr,zx,qRr,r3e,jRr,DRr,un,GRr,t3e,ORr,VRr,a3e,XRr,zRr,n3e,WRr,QRr,HRr,Wx,r0,s3e,URr,JRr,gZ,YRr,KRr,ZRr,t0,l3e,ePr,oPr,hZ,rPr,tPr,aPr,a0,hWe,Bc,n0,i3e,Qx,nPr,d3e,sPr,uWe,mr,Hx,lPr,Ic,iPr,uZ,dPr,cPr,pZ,mPr,fPr,gPr,Ux,hPr,c3e,uPr,pPr,_Pr,Ot,Jx,bPr,m3e,vPr,FPr,Nc,TPr,f3e,MPr,EPr,_Z,CPr,wPr,APr,s0,LPr,jr,Yx,yPr,g3e,xPr,$Pr,pn,kPr,h3e,SPr,RPr,u3e,PPr,BPr,p3e,IPr,NPr,qPr,_3e,l0,b3e,jPr,DPr,bZ,GPr,OPr,VPr,i0,pWe,qc,d0,v3e,Kx,XPr,F3e,zPr,_We,fr,Zx,WPr,jc,QPr,vZ,HPr,UPr,FZ,JPr,YPr,KPr,e$,ZPr,T3e,eBr,oBr,rBr,Vt,o$,tBr,M3e,aBr,nBr,Dc,sBr,E3e,lBr,iBr,TZ,dBr,cBr,mBr,c0,fBr,Dr,r$,gBr,C3e,hBr,uBr,_n,pBr,w3e,_Br,bBr,A3e,vBr,FBr,L3e,TBr,MBr,EBr,de,m0,y3e,CBr,wBr,MZ,ABr,LBr,yBr,f0,x3e,xBr,$Br,EZ,kBr,SBr,RBr,g0,$3e,PBr,BBr,CZ,IBr,NBr,qBr,h0,k3e,jBr,DBr,wZ,GBr,OBr,VBr,u0,S3e,XBr,zBr,AZ,WBr,QBr,HBr,p0,R3e,UBr,JBr,LZ,YBr,KBr,ZBr,_0,P3e,eIr,oIr,yZ,rIr,tIr,aIr,b0,B3e,nIr,sIr,xZ,lIr,iIr,dIr,v0,I3e,cIr,mIr,$Z,fIr,gIr,hIr,F0,N3e,uIr,pIr,kZ,_Ir,bIr,vIr,T0,q3e,FIr,TIr,SZ,MIr,EIr,CIr,M0,j3e,wIr,AIr,RZ,LIr,yIr,xIr,E0,D3e,$Ir,kIr,PZ,SIr,RIr,PIr,C0,G3e,BIr,IIr,BZ,NIr,qIr,jIr,w0,O3e,DIr,GIr,IZ,OIr,VIr,XIr,A0,V3e,zIr,WIr,NZ,QIr,HIr,UIr,L0,X3e,JIr,YIr,qZ,KIr,ZIr,eNr,y0,z3e,oNr,rNr,jZ,tNr,aNr,nNr,x0,W3e,sNr,lNr,DZ,iNr,dNr,cNr,$0,Q3e,mNr,fNr,GZ,gNr,hNr,uNr,k0,bWe,Gc,S0,H3e,t$,pNr,U3e,_Nr,vWe,gr,a$,bNr,Oc,vNr,OZ,FNr,TNr,VZ,MNr,ENr,CNr,n$,wNr,J3e,ANr,LNr,yNr,Xt,s$,xNr,Y3e,$Nr,kNr,Vc,SNr,K3e,RNr,PNr,XZ,BNr,INr,NNr,R0,qNr,Gr,l$,jNr,Z3e,DNr,GNr,bn,ONr,e0e,VNr,XNr,o0e,zNr,WNr,r0e,QNr,HNr,UNr,ce,P0,t0e,JNr,YNr,zZ,KNr,ZNr,eqr,B0,a0e,oqr,rqr,WZ,tqr,aqr,nqr,I0,n0e,sqr,lqr,QZ,iqr,dqr,cqr,N0,s0e,mqr,fqr,HZ,gqr,hqr,uqr,q0,l0e,pqr,_qr,UZ,bqr,vqr,Fqr,j0,i0e,Tqr,Mqr,JZ,Eqr,Cqr,wqr,D0,d0e,Aqr,Lqr,YZ,yqr,xqr,$qr,G0,c0e,kqr,Sqr,KZ,Rqr,Pqr,Bqr,O0,m0e,Iqr,Nqr,ZZ,qqr,jqr,Dqr,V0,f0e,Gqr,Oqr,eee,Vqr,Xqr,zqr,X0,g0e,Wqr,Qqr,oee,Hqr,Uqr,Jqr,z0,h0e,Yqr,Kqr,ree,Zqr,ejr,ojr,W0,u0e,rjr,tjr,tee,ajr,njr,sjr,Q0,p0e,ljr,ijr,aee,djr,cjr,mjr,H0,_0e,fjr,gjr,nee,hjr,ujr,pjr,U0,b0e,_jr,bjr,see,vjr,Fjr,Tjr,J0,v0e,Mjr,Ejr,lee,Cjr,wjr,Ajr,Y0,F0e,Ljr,yjr,iee,xjr,$jr,kjr,K0,T0e,Sjr,Rjr,dee,Pjr,Bjr,Ijr,Z0,M0e,Njr,qjr,cee,jjr,Djr,Gjr,ew,FWe,Xc,ow,E0e,i$,Ojr,C0e,Vjr,TWe,hr,d$,Xjr,zc,zjr,mee,Wjr,Qjr,fee,Hjr,Ujr,Jjr,c$,Yjr,w0e,Kjr,Zjr,eDr,zt,m$,oDr,A0e,rDr,tDr,Wc,aDr,L0e,nDr,sDr,gee,lDr,iDr,dDr,rw,cDr,Or,f$,mDr,y0e,fDr,gDr,vn,hDr,x0e,uDr,pDr,$0e,_Dr,bDr,k0e,vDr,FDr,TDr,S0e,tw,R0e,MDr,EDr,hee,CDr,wDr,ADr,aw,MWe,Qc,nw,P0e,g$,LDr,B0e,yDr,EWe,ur,h$,xDr,Hc,$Dr,uee,kDr,SDr,pee,RDr,PDr,BDr,u$,IDr,I0e,NDr,qDr,jDr,Wt,p$,DDr,N0e,GDr,ODr,Uc,VDr,q0e,XDr,zDr,_ee,WDr,QDr,HDr,sw,UDr,Vr,_$,JDr,j0e,YDr,KDr,Fn,ZDr,D0e,eGr,oGr,G0e,rGr,tGr,O0e,aGr,nGr,sGr,V0e,lw,X0e,lGr,iGr,bee,dGr,cGr,mGr,iw,CWe,Jc,dw,z0e,b$,fGr,W0e,gGr,wWe,pr,v$,hGr,Yc,uGr,vee,pGr,_Gr,Fee,bGr,vGr,FGr,F$,TGr,Q0e,MGr,EGr,CGr,Qt,T$,wGr,H0e,AGr,LGr,Kc,yGr,U0e,xGr,$Gr,Tee,kGr,SGr,RGr,cw,PGr,Xr,M$,BGr,J0e,IGr,NGr,Tn,qGr,Y0e,jGr,DGr,K0e,GGr,OGr,Z0e,VGr,XGr,zGr,oe,mw,ewe,WGr,QGr,Mee,HGr,UGr,JGr,fw,owe,YGr,KGr,Eee,ZGr,eOr,oOr,gw,rwe,rOr,tOr,Cee,aOr,nOr,sOr,hw,twe,lOr,iOr,wee,dOr,cOr,mOr,uw,awe,fOr,gOr,Aee,hOr,uOr,pOr,pw,nwe,_Or,bOr,Lee,vOr,FOr,TOr,_w,swe,MOr,EOr,yee,COr,wOr,AOr,bw,lwe,LOr,yOr,xee,xOr,$Or,kOr,vw,iwe,SOr,ROr,$ee,POr,BOr,IOr,Fw,dwe,NOr,qOr,kee,jOr,DOr,GOr,Tw,cwe,OOr,VOr,See,XOr,zOr,WOr,Mw,mwe,QOr,HOr,Ree,UOr,JOr,YOr,Ew,fwe,KOr,ZOr,Pee,eVr,oVr,rVr,Cw,gwe,tVr,aVr,Bee,nVr,sVr,lVr,ww,hwe,iVr,dVr,Iee,cVr,mVr,fVr,Aw,uwe,gVr,hVr,Nee,uVr,pVr,_Vr,Lw,pwe,bVr,vVr,qee,FVr,TVr,MVr,yw,_we,EVr,CVr,jee,wVr,AVr,LVr,xw,bwe,yVr,xVr,Dee,$Vr,kVr,SVr,$w,vwe,RVr,PVr,Gee,BVr,IVr,NVr,kw,Fwe,qVr,jVr,Oee,DVr,GVr,OVr,Sw,Twe,VVr,XVr,Vee,zVr,WVr,QVr,Rw,Mwe,HVr,UVr,Xee,JVr,YVr,KVr,Pw,Ewe,ZVr,eXr,zee,oXr,rXr,tXr,Bw,Cwe,aXr,nXr,Wee,sXr,lXr,iXr,Iw,wwe,dXr,cXr,Qee,mXr,fXr,gXr,Nw,Awe,hXr,uXr,Hee,pXr,_Xr,bXr,qw,AWe,Zc,jw,Lwe,E$,vXr,ywe,FXr,LWe,_r,C$,TXr,em,MXr,Uee,EXr,CXr,Jee,wXr,AXr,LXr,w$,yXr,xwe,xXr,$Xr,kXr,Ht,A$,SXr,$we,RXr,PXr,om,BXr,kwe,IXr,NXr,Yee,qXr,jXr,DXr,Dw,GXr,zr,L$,OXr,Swe,VXr,XXr,Mn,zXr,Rwe,WXr,QXr,Pwe,HXr,UXr,Bwe,JXr,YXr,KXr,xe,Gw,Iwe,ZXr,ezr,Kee,ozr,rzr,tzr,Ow,Nwe,azr,nzr,Zee,szr,lzr,izr,Vw,qwe,dzr,czr,eoe,mzr,fzr,gzr,Xw,jwe,hzr,uzr,ooe,pzr,_zr,bzr,zw,Dwe,vzr,Fzr,roe,Tzr,Mzr,Ezr,Ww,Gwe,Czr,wzr,toe,Azr,Lzr,yzr,Qw,Owe,xzr,$zr,aoe,kzr,Szr,Rzr,Hw,Vwe,Pzr,Bzr,noe,Izr,Nzr,qzr,Uw,Xwe,jzr,Dzr,soe,Gzr,Ozr,Vzr,Jw,zwe,Xzr,zzr,loe,Wzr,Qzr,Hzr,Yw,yWe,rm,Kw,Wwe,y$,Uzr,Qwe,Jzr,xWe,br,x$,Yzr,tm,Kzr,ioe,Zzr,eWr,doe,oWr,rWr,tWr,$$,aWr,Hwe,nWr,sWr,lWr,Ut,k$,iWr,Uwe,dWr,cWr,am,mWr,Jwe,fWr,gWr,coe,hWr,uWr,pWr,Zw,_Wr,Wr,S$,bWr,Ywe,vWr,FWr,En,TWr,Kwe,MWr,EWr,Zwe,CWr,wWr,eAe,AWr,LWr,yWr,Ee,eA,oAe,xWr,$Wr,moe,kWr,SWr,RWr,oA,rAe,PWr,BWr,foe,IWr,NWr,qWr,rA,tAe,jWr,DWr,goe,GWr,OWr,VWr,tA,aAe,XWr,zWr,hoe,WWr,QWr,HWr,aA,nAe,UWr,JWr,uoe,YWr,KWr,ZWr,nA,sAe,eQr,oQr,poe,rQr,tQr,aQr,sA,lAe,nQr,sQr,_oe,lQr,iQr,dQr,lA,iAe,cQr,mQr,boe,fQr,gQr,hQr,iA,dAe,uQr,pQr,voe,_Qr,bQr,vQr,dA,cAe,FQr,TQr,Foe,MQr,EQr,CQr,cA,mAe,wQr,AQr,Toe,LQr,yQr,xQr,mA,fAe,$Qr,kQr,Moe,SQr,RQr,PQr,fA,gAe,BQr,IQr,Eoe,NQr,qQr,jQr,gA,$We,nm,hA,hAe,R$,DQr,uAe,GQr,kWe,vr,P$,OQr,sm,VQr,Coe,XQr,zQr,woe,WQr,QQr,HQr,B$,UQr,pAe,JQr,YQr,KQr,Jt,I$,ZQr,_Ae,eHr,oHr,lm,rHr,bAe,tHr,aHr,Aoe,nHr,sHr,lHr,uA,iHr,Qr,N$,dHr,vAe,cHr,mHr,Cn,fHr,FAe,gHr,hHr,TAe,uHr,pHr,MAe,_Hr,bHr,vHr,$e,pA,EAe,FHr,THr,Loe,MHr,EHr,CHr,_A,CAe,wHr,AHr,yoe,LHr,yHr,xHr,bA,wAe,$Hr,kHr,xoe,SHr,RHr,PHr,vA,AAe,BHr,IHr,$oe,NHr,qHr,jHr,FA,LAe,DHr,GHr,koe,OHr,VHr,XHr,TA,yAe,zHr,WHr,Soe,QHr,HHr,UHr,MA,xAe,JHr,YHr,Roe,KHr,ZHr,eUr,EA,$Ae,oUr,rUr,Poe,tUr,aUr,nUr,CA,kAe,sUr,lUr,Boe,iUr,dUr,cUr,wA,SAe,mUr,fUr,Ioe,gUr,hUr,uUr,AA,SWe,im,LA,RAe,q$,pUr,PAe,_Ur,RWe,Fr,j$,bUr,dm,vUr,Noe,FUr,TUr,qoe,MUr,EUr,CUr,D$,wUr,BAe,AUr,LUr,yUr,Yt,G$,xUr,IAe,$Ur,kUr,cm,SUr,NAe,RUr,PUr,joe,BUr,IUr,NUr,yA,qUr,Hr,O$,jUr,qAe,DUr,GUr,wn,OUr,jAe,VUr,XUr,DAe,zUr,WUr,GAe,QUr,HUr,UUr,ke,xA,OAe,JUr,YUr,Doe,KUr,ZUr,eJr,$A,VAe,oJr,rJr,Goe,tJr,aJr,nJr,kA,XAe,sJr,lJr,Ooe,iJr,dJr,cJr,SA,zAe,mJr,fJr,Voe,gJr,hJr,uJr,RA,WAe,pJr,_Jr,Xoe,bJr,vJr,FJr,PA,QAe,TJr,MJr,zoe,EJr,CJr,wJr,BA,HAe,AJr,LJr,Woe,yJr,xJr,$Jr,IA,UAe,kJr,SJr,Qoe,RJr,PJr,BJr,NA,JAe,IJr,NJr,Hoe,qJr,jJr,DJr,qA,YAe,GJr,OJr,Uoe,VJr,XJr,zJr,jA,PWe,mm,DA,KAe,V$,WJr,ZAe,QJr,BWe,Tr,X$,HJr,fm,UJr,Joe,JJr,YJr,Yoe,KJr,ZJr,eYr,z$,oYr,e6e,rYr,tYr,aYr,Kt,W$,nYr,o6e,sYr,lYr,gm,iYr,r6e,dYr,cYr,Koe,mYr,fYr,gYr,GA,hYr,Ur,Q$,uYr,t6e,pYr,_Yr,An,bYr,a6e,vYr,FYr,n6e,TYr,MYr,s6e,EYr,CYr,wYr,Se,OA,l6e,AYr,LYr,Zoe,yYr,xYr,$Yr,VA,i6e,kYr,SYr,ere,RYr,PYr,BYr,XA,d6e,IYr,NYr,ore,qYr,jYr,DYr,zA,c6e,GYr,OYr,rre,VYr,XYr,zYr,WA,m6e,WYr,QYr,tre,HYr,UYr,JYr,QA,f6e,YYr,KYr,are,ZYr,eKr,oKr,HA,g6e,rKr,tKr,nre,aKr,nKr,sKr,UA,h6e,lKr,iKr,sre,dKr,cKr,mKr,JA,u6e,fKr,gKr,lre,hKr,uKr,pKr,YA,p6e,_Kr,bKr,ire,vKr,FKr,TKr,KA,IWe,hm,ZA,_6e,H$,MKr,b6e,EKr,NWe,Mr,U$,CKr,um,wKr,dre,AKr,LKr,cre,yKr,xKr,$Kr,J$,kKr,v6e,SKr,RKr,PKr,Zt,Y$,BKr,F6e,IKr,NKr,pm,qKr,T6e,jKr,DKr,mre,GKr,OKr,VKr,e6,XKr,Jr,K$,zKr,M6e,WKr,QKr,Ln,HKr,E6e,UKr,JKr,C6e,YKr,KKr,w6e,ZKr,eZr,oZr,Re,o6,A6e,rZr,tZr,fre,aZr,nZr,sZr,r6,L6e,lZr,iZr,gre,dZr,cZr,mZr,t6,y6e,fZr,gZr,hre,hZr,uZr,pZr,a6,x6e,_Zr,bZr,ure,vZr,FZr,TZr,n6,$6e,MZr,EZr,pre,CZr,wZr,AZr,s6,k6e,LZr,yZr,_re,xZr,$Zr,kZr,l6,S6e,SZr,RZr,bre,PZr,BZr,IZr,i6,R6e,NZr,qZr,vre,jZr,DZr,GZr,d6,P6e,OZr,VZr,Fre,XZr,zZr,WZr,c6,B6e,QZr,HZr,Tre,UZr,JZr,YZr,m6,qWe,_m,f6,I6e,Z$,KZr,N6e,ZZr,jWe,Er,ek,eet,bm,oet,Mre,ret,tet,Ere,aet,net,set,ok,iet,q6e,det,cet,met,ea,rk,fet,j6e,get,het,vm,uet,D6e,pet,_et,Cre,bet,vet,Fet,g6,Tet,Yr,tk,Met,G6e,Eet,Cet,yn,wet,O6e,Aet,Let,V6e,yet,xet,X6e,$et,ket,Set,Xe,h6,z6e,Ret,Pet,wre,Bet,Iet,Net,u6,W6e,qet,jet,Are,Det,Get,Oet,p6,Q6e,Vet,Xet,Lre,zet,Wet,Qet,_6,H6e,Het,Uet,yre,Jet,Yet,Ket,b6,U6e,Zet,eot,xre,oot,rot,tot,v6,J6e,aot,not,$re,sot,lot,iot,F6,Y6e,dot,cot,kre,mot,fot,got,T6,K6e,hot,uot,Sre,pot,_ot,bot,M6,DWe,Fm,E6,Z6e,ak,vot,e7e,Fot,GWe,Cr,nk,Tot,Tm,Mot,Rre,Eot,Cot,Pre,wot,Aot,Lot,sk,yot,o7e,xot,$ot,kot,oa,lk,Sot,r7e,Rot,Pot,Mm,Bot,t7e,Iot,Not,Bre,qot,jot,Dot,C6,Got,Kr,ik,Oot,a7e,Vot,Xot,xn,zot,n7e,Wot,Qot,s7e,Hot,Uot,l7e,Jot,Yot,Kot,ze,w6,i7e,Zot,ert,Ire,ort,rrt,trt,A6,d7e,art,nrt,Nre,srt,lrt,irt,L6,c7e,drt,crt,qre,mrt,frt,grt,y6,m7e,hrt,urt,jre,prt,_rt,brt,x6,f7e,vrt,Frt,Dre,Trt,Mrt,Ert,$6,g7e,Crt,wrt,Gre,Art,Lrt,yrt,k6,h7e,xrt,$rt,Ore,krt,Srt,Rrt,S6,u7e,Prt,Brt,Vre,Irt,Nrt,qrt,R6,OWe,Em,P6,p7e,dk,jrt,_7e,Drt,VWe,wr,ck,Grt,Cm,Ort,Xre,Vrt,Xrt,zre,zrt,Wrt,Qrt,mk,Hrt,b7e,Urt,Jrt,Yrt,ra,fk,Krt,v7e,Zrt,ett,wm,ott,F7e,rtt,ttt,Wre,att,ntt,stt,B6,ltt,Zr,gk,itt,T7e,dtt,ctt,$n,mtt,M7e,ftt,gtt,E7e,htt,utt,C7e,ptt,_tt,btt,w7e,I6,A7e,vtt,Ftt,Qre,Ttt,Mtt,Ett,N6,XWe,Am,q6,L7e,hk,Ctt,y7e,wtt,zWe,Ar,uk,Att,Lm,Ltt,Hre,ytt,xtt,Ure,$tt,ktt,Stt,pk,Rtt,x7e,Ptt,Btt,Itt,ta,_k,Ntt,$7e,qtt,jtt,ym,Dtt,k7e,Gtt,Ott,Jre,Vtt,Xtt,ztt,j6,Wtt,et,bk,Qtt,S7e,Htt,Utt,kn,Jtt,R7e,Ytt,Ktt,P7e,Ztt,eat,B7e,oat,rat,tat,vk,D6,I7e,aat,nat,Yre,sat,lat,iat,G6,N7e,dat,cat,Kre,mat,fat,gat,O6,WWe,xm,V6,q7e,Fk,hat,j7e,uat,QWe,Lr,Tk,pat,$m,_at,Zre,bat,vat,ete,Fat,Tat,Mat,Mk,Eat,D7e,Cat,wat,Aat,aa,Ek,Lat,G7e,yat,xat,km,$at,O7e,kat,Sat,ote,Rat,Pat,Bat,X6,Iat,ot,Ck,Nat,V7e,qat,jat,Sn,Dat,X7e,Gat,Oat,z7e,Vat,Xat,W7e,zat,Wat,Qat,Q7e,z6,H7e,Hat,Uat,rte,Jat,Yat,Kat,W6,HWe;return c=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),uy=new re({}),py=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Dm=new Zat({props:{warning:!0,$$slots:{default:[rUt]},$$scope:{ctx:$}}}),_y=new re({}),by=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L614"}}),Ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L637"}}),eh=new N({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[tUt]},$$scope:{ctx:$}}}),My=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L760"}}),Ey=new re({}),Cy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L411"}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L425"}}),Ih=new N({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[aUt]},$$scope:{ctx:$}}}),yy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L624"}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L196"}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L210"}}),Fu=new Zat({props:{$$slots:{default:[nUt]},$$scope:{ctx:$}}}),Tu=new N({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[sUt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L337"}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L90"}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L104"}}),Vu=new Zat({props:{$$slots:{default:[lUt]},$$scope:{ctx:$}}}),Xu=new N({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[iUt]},$$scope:{ctx:$}}}),Dy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L257"}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L787"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Qu=new N({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[dUt]},$$scope:{ctx:$}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z_=new N({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[cUt]},$$scope:{ctx:$}}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L794"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[mUt]},$$scope:{ctx:$}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H2=new N({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fUt]},$$scope:{ctx:$}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L809"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J2=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[gUt]},$$scope:{ctx:$}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qb=new N({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[hUt]},$$scope:{ctx:$}}}),r8=new re({}),t8=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L816"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Db=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[uUt]},$$scope:{ctx:$}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Av=new N({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[pUt]},$$scope:{ctx:$}}}),l8=new re({}),i8=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L823"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yv=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[_Ut]},$$scope:{ctx:$}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Uv=new N({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[bUt]},$$scope:{ctx:$}}}),f8=new re({}),g8=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L832"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[vUt]},$$scope:{ctx:$}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),J1=new N({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[FUt]},$$scope:{ctx:$}}}),_8=new re({}),b8=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L877"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[TUt]},$$scope:{ctx:$}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new N({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[MUt]},$$scope:{ctx:$}}}),M8=new re({}),E8=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L884"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[EUt]},$$scope:{ctx:$}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new N({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[CUt]},$$scope:{ctx:$}}}),L8=new re({}),y8=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L870"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[wUt]},$$scope:{ctx:$}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AT=new N({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[AUt]},$$scope:{ctx:$}}}),S8=new re({}),R8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L841"}}),B8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yT=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[LUt]},$$scope:{ctx:$}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new N({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[yUt]},$$scope:{ctx:$}}}),N8=new re({}),q8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L848"}}),D8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[xUt]},$$scope:{ctx:$}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EM=new N({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[$Ut]},$$scope:{ctx:$}}}),O8=new re({}),V8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L893"}}),z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),wM=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[kUt]},$$scope:{ctx:$}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new N({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[SUt]},$$scope:{ctx:$}}}),Q8=new re({}),H8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L932"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[RUt]},$$scope:{ctx:$}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new N({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[PUt]},$$scope:{ctx:$}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L859"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[BUt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JM=new N({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[IUt]},$$scope:{ctx:$}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L939"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KM=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[NUt]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d4=new N({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[qUt]},$$scope:{ctx:$}}}),i9=new re({}),d9=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L962"}}),m9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[jUt]},$$scope:{ctx:$}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new N({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[DUt]},$$scope:{ctx:$}}}),g9=new re({}),h9=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L946"}}),p9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new N({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[GUt]},$$scope:{ctx:$}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S4=new N({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[OUt]},$$scope:{ctx:$}}}),b9=new re({}),v9=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L953"}}),T9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P4=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[VUt]},$$scope:{ctx:$}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new N({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[XUt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L971"}}),L9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D4=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[zUt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new N({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[WUt]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L978"}}),S9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[QUt]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new N({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[HUt]},$$scope:{ctx:$}}}),P9=new re({}),B9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L925"}}),N9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[UUt]},$$scope:{ctx:$}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sE=new N({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[JUt]},$$scope:{ctx:$}}}),D9=new re({}),G9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L900"}}),V9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iE=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[YUt]},$$scope:{ctx:$}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new N({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[KUt]},$$scope:{ctx:$}}}),z9=new re({}),W9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L907"}}),H9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gE=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[ZUt]},$$scope:{ctx:$}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FE=new N({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[eJt]},$$scope:{ctx:$}}}),J9=new re({}),Y9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L916"}}),Z9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ME=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[oJt]},$$scope:{ctx:$}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new N({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[rJt]},$$scope:{ctx:$}}}),ox=new re({}),rx=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new N({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[tJt]},$$scope:{ctx:$}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new N({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[aJt]},$$scope:{ctx:$}}}),sx=new re({}),lx=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L423"}}),dx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[nJt]},$$scope:{ctx:$}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new N({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[sJt]},$$scope:{ctx:$}}}),mx=new re({}),fx=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L438"}}),hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KC=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[lJt]},$$scope:{ctx:$}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new N({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[iJt]},$$scope:{ctx:$}}}),px=new re({}),_x=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L454"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[dJt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M5=new N({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[cJt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L479"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[mJt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new N({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[fJt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L486"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Q5=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[gJt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new N({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[hJt]},$$scope:{ctx:$}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[uJt]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new N({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[pJt]},$$scope:{ctx:$}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L531"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B3=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[_Jt]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new N({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[bJt]},$$scope:{ctx:$}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L538"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[vJt]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new N({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[FJt]},$$scope:{ctx:$}}}),Qx=new re({}),Hx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[TJt]},$$scope:{ctx:$}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new N({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[MJt]},$$scope:{ctx:$}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L522"}}),o$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[EJt]},$$scope:{ctx:$}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k0=new N({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[CJt]},$$scope:{ctx:$}}}),t$=new re({}),a$=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),s$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R0=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[wJt]},$$scope:{ctx:$}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new N({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[AJt]},$$scope:{ctx:$}}}),i$=new re({}),d$=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L472"}}),m$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[LJt]},$$scope:{ctx:$}}}),f$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new N({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[yJt]},$$scope:{ctx:$}}}),g$=new re({}),h$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L547"}}),p$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[xJt]},$$scope:{ctx:$}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new N({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[$Jt]},$$scope:{ctx:$}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new N({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[kJt]},$$scope:{ctx:$}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new N({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[SJt]},$$scope:{ctx:$}}}),E$=new re({}),C$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),A$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[RJt]},$$scope:{ctx:$}}}),L$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Yw=new N({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[PJt]},$$scope:{ctx:$}}}),y$=new re({}),x$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),k$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Zw=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[BJt]},$$scope:{ctx:$}}}),S$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gA=new N({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[IJt]},$$scope:{ctx:$}}}),R$=new re({}),P$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),I$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uA=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[NJt]},$$scope:{ctx:$}}}),N$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AA=new N({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[qJt]},$$scope:{ctx:$}}}),q$=new re({}),j$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),G$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yA=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[jJt]},$$scope:{ctx:$}}}),O$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jA=new N({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[DJt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),W$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),GA=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[GJt]},$$scope:{ctx:$}}}),Q$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KA=new N({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[OJt]},$$scope:{ctx:$}}}),H$=new re({}),U$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),Y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e6=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[VJt]},$$scope:{ctx:$}}}),K$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m6=new N({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[XJt]},$$scope:{ctx:$}}}),Z$=new re({}),ek=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),rk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),g6=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[zJt]},$$scope:{ctx:$}}}),tk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M6=new N({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[WJt]},$$scope:{ctx:$}}}),ak=new re({}),nk=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),lk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C6=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[QJt]},$$scope:{ctx:$}}}),ik=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R6=new N({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[HJt]},$$scope:{ctx:$}}}),dk=new re({}),ck=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),fk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B6=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[UJt]},$$scope:{ctx:$}}}),gk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N6=new N({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[JJt]},$$scope:{ctx:$}}}),hk=new re({}),uk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),_k=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j6=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[YJt]},$$scope:{ctx:$}}}),bk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O6=new N({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[KJt]},$$scope:{ctx:$}}}),Fk=new re({}),Tk=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),Ek=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),X6=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[ZJt]},$$scope:{ctx:$}}}),Ck=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W6=new N({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[eYt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(c.$$.fragment),h=l(),wo=a("span"),xi=o("Auto Classes"),Bm=l(),lt=a("p"),$i=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=a("code"),my=o("from_pretrained()"),Im=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Si=o("Instantiating one of "),Pn=a("a"),fy=o("AutoConfig"),Bn=o(", "),In=a("a"),gy=o("AutoModel"),Ri=o(`, and
`),Nn=a("a"),hy=o("AutoTokenizer"),Pi=o(" will directly create a class of the relevant architecture. For instance"),Nm=l(),F(Sa.$$.fragment),He=l(),Ae=a("p"),HS=o("will create a model that is an instance of "),Bi=a("a"),US=o("BertModel"),JS=o("."),Ao=l(),Ra=a("p"),YS=o("There is one class of "),qm=a("code"),KS=o("AutoModel"),aUe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),VXe=l(),Ii=a("h2"),jm=a("a"),Yae=a("span"),F(uy.$$.fragment),nUe=l(),Kae=a("span"),sUe=o("Extending the Auto Classes"),XXe=l(),qn=a("p"),lUe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Zae=a("code"),iUe=o("NewModel"),dUe=o(", make sure you have a "),ene=a("code"),cUe=o("NewModelConfig"),mUe=o(` then you can add those to the auto
classes like this:`),zXe=l(),F(py.$$.fragment),WXe=l(),ZS=a("p"),fUe=o("You will then be able to use the auto classes like you would usually do!"),QXe=l(),F(Dm.$$.fragment),HXe=l(),Ni=a("h2"),Gm=a("a"),one=a("span"),F(_y.$$.fragment),gUe=l(),rne=a("span"),hUe=o("AutoConfig"),UXe=l(),Lo=a("div"),F(by.$$.fragment),uUe=l(),vy=a("p"),pUe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),eR=a("a"),_Ue=o("from_pretrained()"),bUe=o(" class method."),vUe=l(),Fy=a("p"),FUe=o("This class cannot be instantiated directly using "),tne=a("code"),TUe=o("__init__()"),MUe=o(" (throws an error)."),EUe=l(),yr=a("div"),F(Ty.$$.fragment),CUe=l(),ane=a("p"),wUe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),AUe=l(),qi=a("p"),LUe=o("The configuration class to instantiate is selected based on the "),nne=a("code"),yUe=o("model_type"),xUe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),sne=a("code"),$Ue=o("pretrained_model_name_or_path"),kUe=o(":"),SUe=l(),A=a("ul"),Om=a("li"),lne=a("strong"),RUe=o("albert"),PUe=o(" \u2014 "),oR=a("a"),BUe=o("AlbertConfig"),IUe=o(" (ALBERT model)"),NUe=l(),Vm=a("li"),ine=a("strong"),qUe=o("bart"),jUe=o(" \u2014 "),rR=a("a"),DUe=o("BartConfig"),GUe=o(" (BART model)"),OUe=l(),Xm=a("li"),dne=a("strong"),VUe=o("beit"),XUe=o(" \u2014 "),tR=a("a"),zUe=o("BeitConfig"),WUe=o(" (BEiT model)"),QUe=l(),zm=a("li"),cne=a("strong"),HUe=o("bert"),UUe=o(" \u2014 "),aR=a("a"),JUe=o("BertConfig"),YUe=o(" (BERT model)"),KUe=l(),Wm=a("li"),mne=a("strong"),ZUe=o("bert-generation"),eJe=o(" \u2014 "),nR=a("a"),oJe=o("BertGenerationConfig"),rJe=o(" (Bert Generation model)"),tJe=l(),Qm=a("li"),fne=a("strong"),aJe=o("big_bird"),nJe=o(" \u2014 "),sR=a("a"),sJe=o("BigBirdConfig"),lJe=o(" (BigBird model)"),iJe=l(),Hm=a("li"),gne=a("strong"),dJe=o("bigbird_pegasus"),cJe=o(" \u2014 "),lR=a("a"),mJe=o("BigBirdPegasusConfig"),fJe=o(" (BigBird-Pegasus model)"),gJe=l(),Um=a("li"),hne=a("strong"),hJe=o("blenderbot"),uJe=o(" \u2014 "),iR=a("a"),pJe=o("BlenderbotConfig"),_Je=o(" (Blenderbot model)"),bJe=l(),Jm=a("li"),une=a("strong"),vJe=o("blenderbot-small"),FJe=o(" \u2014 "),dR=a("a"),TJe=o("BlenderbotSmallConfig"),MJe=o(" (BlenderbotSmall model)"),EJe=l(),Ym=a("li"),pne=a("strong"),CJe=o("bloom"),wJe=o(" \u2014 "),cR=a("a"),AJe=o("BloomConfig"),LJe=o(" (BLOOM model)"),yJe=l(),Km=a("li"),_ne=a("strong"),xJe=o("camembert"),$Je=o(" \u2014 "),mR=a("a"),kJe=o("CamembertConfig"),SJe=o(" (CamemBERT model)"),RJe=l(),Zm=a("li"),bne=a("strong"),PJe=o("canine"),BJe=o(" \u2014 "),fR=a("a"),IJe=o("CanineConfig"),NJe=o(" (CANINE model)"),qJe=l(),ef=a("li"),vne=a("strong"),jJe=o("clip"),DJe=o(" \u2014 "),gR=a("a"),GJe=o("CLIPConfig"),OJe=o(" (CLIP model)"),VJe=l(),of=a("li"),Fne=a("strong"),XJe=o("codegen"),zJe=o(" \u2014 "),hR=a("a"),WJe=o("CodeGenConfig"),QJe=o(" (CodeGen model)"),HJe=l(),rf=a("li"),Tne=a("strong"),UJe=o("convbert"),JJe=o(" \u2014 "),uR=a("a"),YJe=o("ConvBertConfig"),KJe=o(" (ConvBERT model)"),ZJe=l(),tf=a("li"),Mne=a("strong"),eYe=o("convnext"),oYe=o(" \u2014 "),pR=a("a"),rYe=o("ConvNextConfig"),tYe=o(" (ConvNeXT model)"),aYe=l(),af=a("li"),Ene=a("strong"),nYe=o("ctrl"),sYe=o(" \u2014 "),_R=a("a"),lYe=o("CTRLConfig"),iYe=o(" (CTRL model)"),dYe=l(),nf=a("li"),Cne=a("strong"),cYe=o("cvt"),mYe=o(" \u2014 "),bR=a("a"),fYe=o("CvtConfig"),gYe=o(" (CvT model)"),hYe=l(),sf=a("li"),wne=a("strong"),uYe=o("data2vec-audio"),pYe=o(" \u2014 "),vR=a("a"),_Ye=o("Data2VecAudioConfig"),bYe=o(" (Data2VecAudio model)"),vYe=l(),lf=a("li"),Ane=a("strong"),FYe=o("data2vec-text"),TYe=o(" \u2014 "),FR=a("a"),MYe=o("Data2VecTextConfig"),EYe=o(" (Data2VecText model)"),CYe=l(),df=a("li"),Lne=a("strong"),wYe=o("data2vec-vision"),AYe=o(" \u2014 "),TR=a("a"),LYe=o("Data2VecVisionConfig"),yYe=o(" (Data2VecVision model)"),xYe=l(),cf=a("li"),yne=a("strong"),$Ye=o("deberta"),kYe=o(" \u2014 "),MR=a("a"),SYe=o("DebertaConfig"),RYe=o(" (DeBERTa model)"),PYe=l(),mf=a("li"),xne=a("strong"),BYe=o("deberta-v2"),IYe=o(" \u2014 "),ER=a("a"),NYe=o("DebertaV2Config"),qYe=o(" (DeBERTa-v2 model)"),jYe=l(),ff=a("li"),$ne=a("strong"),DYe=o("decision_transformer"),GYe=o(" \u2014 "),CR=a("a"),OYe=o("DecisionTransformerConfig"),VYe=o(" (Decision Transformer model)"),XYe=l(),gf=a("li"),kne=a("strong"),zYe=o("deit"),WYe=o(" \u2014 "),wR=a("a"),QYe=o("DeiTConfig"),HYe=o(" (DeiT model)"),UYe=l(),hf=a("li"),Sne=a("strong"),JYe=o("detr"),YYe=o(" \u2014 "),AR=a("a"),KYe=o("DetrConfig"),ZYe=o(" (DETR model)"),eKe=l(),uf=a("li"),Rne=a("strong"),oKe=o("distilbert"),rKe=o(" \u2014 "),LR=a("a"),tKe=o("DistilBertConfig"),aKe=o(" (DistilBERT model)"),nKe=l(),pf=a("li"),Pne=a("strong"),sKe=o("dpr"),lKe=o(" \u2014 "),yR=a("a"),iKe=o("DPRConfig"),dKe=o(" (DPR model)"),cKe=l(),_f=a("li"),Bne=a("strong"),mKe=o("dpt"),fKe=o(" \u2014 "),xR=a("a"),gKe=o("DPTConfig"),hKe=o(" (DPT model)"),uKe=l(),bf=a("li"),Ine=a("strong"),pKe=o("electra"),_Ke=o(" \u2014 "),$R=a("a"),bKe=o("ElectraConfig"),vKe=o(" (ELECTRA model)"),FKe=l(),vf=a("li"),Nne=a("strong"),TKe=o("encoder-decoder"),MKe=o(" \u2014 "),kR=a("a"),EKe=o("EncoderDecoderConfig"),CKe=o(" (Encoder decoder model)"),wKe=l(),Ff=a("li"),qne=a("strong"),AKe=o("flaubert"),LKe=o(" \u2014 "),SR=a("a"),yKe=o("FlaubertConfig"),xKe=o(" (FlauBERT model)"),$Ke=l(),Tf=a("li"),jne=a("strong"),kKe=o("flava"),SKe=o(" \u2014 "),RR=a("a"),RKe=o("FlavaConfig"),PKe=o(" (FLAVA model)"),BKe=l(),Mf=a("li"),Dne=a("strong"),IKe=o("fnet"),NKe=o(" \u2014 "),PR=a("a"),qKe=o("FNetConfig"),jKe=o(" (FNet model)"),DKe=l(),Ef=a("li"),Gne=a("strong"),GKe=o("fsmt"),OKe=o(" \u2014 "),BR=a("a"),VKe=o("FSMTConfig"),XKe=o(" (FairSeq Machine-Translation model)"),zKe=l(),Cf=a("li"),One=a("strong"),WKe=o("funnel"),QKe=o(" \u2014 "),IR=a("a"),HKe=o("FunnelConfig"),UKe=o(" (Funnel Transformer model)"),JKe=l(),wf=a("li"),Vne=a("strong"),YKe=o("glpn"),KKe=o(" \u2014 "),NR=a("a"),ZKe=o("GLPNConfig"),eZe=o(" (GLPN model)"),oZe=l(),Af=a("li"),Xne=a("strong"),rZe=o("gpt2"),tZe=o(" \u2014 "),qR=a("a"),aZe=o("GPT2Config"),nZe=o(" (OpenAI GPT-2 model)"),sZe=l(),Lf=a("li"),zne=a("strong"),lZe=o("gpt_neo"),iZe=o(" \u2014 "),jR=a("a"),dZe=o("GPTNeoConfig"),cZe=o(" (GPT Neo model)"),mZe=l(),yf=a("li"),Wne=a("strong"),fZe=o("gpt_neox"),gZe=o(" \u2014 "),DR=a("a"),hZe=o("GPTNeoXConfig"),uZe=o(" (GPT NeoX model)"),pZe=l(),xf=a("li"),Qne=a("strong"),_Ze=o("gptj"),bZe=o(" \u2014 "),GR=a("a"),vZe=o("GPTJConfig"),FZe=o(" (GPT-J model)"),TZe=l(),$f=a("li"),Hne=a("strong"),MZe=o("groupvit"),EZe=o(" \u2014 "),OR=a("a"),CZe=o("GroupViTConfig"),wZe=o(" (GroupViT model)"),AZe=l(),kf=a("li"),Une=a("strong"),LZe=o("hubert"),yZe=o(" \u2014 "),VR=a("a"),xZe=o("HubertConfig"),$Ze=o(" (Hubert model)"),kZe=l(),Sf=a("li"),Jne=a("strong"),SZe=o("ibert"),RZe=o(" \u2014 "),XR=a("a"),PZe=o("IBertConfig"),BZe=o(" (I-BERT model)"),IZe=l(),Rf=a("li"),Yne=a("strong"),NZe=o("imagegpt"),qZe=o(" \u2014 "),zR=a("a"),jZe=o("ImageGPTConfig"),DZe=o(" (ImageGPT model)"),GZe=l(),Pf=a("li"),Kne=a("strong"),OZe=o("layoutlm"),VZe=o(" \u2014 "),WR=a("a"),XZe=o("LayoutLMConfig"),zZe=o(" (LayoutLM model)"),WZe=l(),Bf=a("li"),Zne=a("strong"),QZe=o("layoutlmv2"),HZe=o(" \u2014 "),QR=a("a"),UZe=o("LayoutLMv2Config"),JZe=o(" (LayoutLMv2 model)"),YZe=l(),If=a("li"),ese=a("strong"),KZe=o("layoutlmv3"),ZZe=o(" \u2014 "),HR=a("a"),eeo=o("LayoutLMv3Config"),oeo=o(" (LayoutLMv3 model)"),reo=l(),Nf=a("li"),ose=a("strong"),teo=o("led"),aeo=o(" \u2014 "),UR=a("a"),neo=o("LEDConfig"),seo=o(" (LED model)"),leo=l(),qf=a("li"),rse=a("strong"),ieo=o("levit"),deo=o(" \u2014 "),JR=a("a"),ceo=o("LevitConfig"),meo=o(" (LeViT model)"),feo=l(),jf=a("li"),tse=a("strong"),geo=o("longformer"),heo=o(" \u2014 "),YR=a("a"),ueo=o("LongformerConfig"),peo=o(" (Longformer model)"),_eo=l(),Df=a("li"),ase=a("strong"),beo=o("longt5"),veo=o(" \u2014 "),KR=a("a"),Feo=o("LongT5Config"),Teo=o(" (LongT5 model)"),Meo=l(),Gf=a("li"),nse=a("strong"),Eeo=o("luke"),Ceo=o(" \u2014 "),ZR=a("a"),weo=o("LukeConfig"),Aeo=o(" (LUKE model)"),Leo=l(),Of=a("li"),sse=a("strong"),yeo=o("lxmert"),xeo=o(" \u2014 "),eP=a("a"),$eo=o("LxmertConfig"),keo=o(" (LXMERT model)"),Seo=l(),Vf=a("li"),lse=a("strong"),Reo=o("m2m_100"),Peo=o(" \u2014 "),oP=a("a"),Beo=o("M2M100Config"),Ieo=o(" (M2M100 model)"),Neo=l(),Xf=a("li"),ise=a("strong"),qeo=o("marian"),jeo=o(" \u2014 "),rP=a("a"),Deo=o("MarianConfig"),Geo=o(" (Marian model)"),Oeo=l(),zf=a("li"),dse=a("strong"),Veo=o("maskformer"),Xeo=o(" \u2014 "),tP=a("a"),zeo=o("MaskFormerConfig"),Weo=o(" (MaskFormer model)"),Qeo=l(),Wf=a("li"),cse=a("strong"),Heo=o("mbart"),Ueo=o(" \u2014 "),aP=a("a"),Jeo=o("MBartConfig"),Yeo=o(" (mBART model)"),Keo=l(),Qf=a("li"),mse=a("strong"),Zeo=o("mctct"),eoo=o(" \u2014 "),nP=a("a"),ooo=o("MCTCTConfig"),roo=o(" (M-CTC-T model)"),too=l(),Hf=a("li"),fse=a("strong"),aoo=o("megatron-bert"),noo=o(" \u2014 "),sP=a("a"),soo=o("MegatronBertConfig"),loo=o(" (Megatron-BERT model)"),ioo=l(),Uf=a("li"),gse=a("strong"),doo=o("mobilebert"),coo=o(" \u2014 "),lP=a("a"),moo=o("MobileBertConfig"),foo=o(" (MobileBERT model)"),goo=l(),Jf=a("li"),hse=a("strong"),hoo=o("mobilevit"),uoo=o(" \u2014 "),iP=a("a"),poo=o("MobileViTConfig"),_oo=o(" (MobileViT model)"),boo=l(),Yf=a("li"),use=a("strong"),voo=o("mpnet"),Foo=o(" \u2014 "),dP=a("a"),Too=o("MPNetConfig"),Moo=o(" (MPNet model)"),Eoo=l(),Kf=a("li"),pse=a("strong"),Coo=o("mt5"),woo=o(" \u2014 "),cP=a("a"),Aoo=o("MT5Config"),Loo=o(" (MT5 model)"),yoo=l(),Zf=a("li"),_se=a("strong"),xoo=o("mvp"),$oo=o(" \u2014 "),mP=a("a"),koo=o("MvpConfig"),Soo=o(" (MVP model)"),Roo=l(),eg=a("li"),bse=a("strong"),Poo=o("nezha"),Boo=o(" \u2014 "),fP=a("a"),Ioo=o("NezhaConfig"),Noo=o(" (Nezha model)"),qoo=l(),og=a("li"),vse=a("strong"),joo=o("nystromformer"),Doo=o(" \u2014 "),gP=a("a"),Goo=o("NystromformerConfig"),Ooo=o(" (Nystr\xF6mformer model)"),Voo=l(),rg=a("li"),Fse=a("strong"),Xoo=o("openai-gpt"),zoo=o(" \u2014 "),hP=a("a"),Woo=o("OpenAIGPTConfig"),Qoo=o(" (OpenAI GPT model)"),Hoo=l(),tg=a("li"),Tse=a("strong"),Uoo=o("opt"),Joo=o(" \u2014 "),uP=a("a"),Yoo=o("OPTConfig"),Koo=o(" (OPT model)"),Zoo=l(),ag=a("li"),Mse=a("strong"),ero=o("owlvit"),oro=o(" \u2014 "),pP=a("a"),rro=o("OwlViTConfig"),tro=o(" (OWL-ViT model)"),aro=l(),ng=a("li"),Ese=a("strong"),nro=o("pegasus"),sro=o(" \u2014 "),_P=a("a"),lro=o("PegasusConfig"),iro=o(" (Pegasus model)"),dro=l(),sg=a("li"),Cse=a("strong"),cro=o("perceiver"),mro=o(" \u2014 "),bP=a("a"),fro=o("PerceiverConfig"),gro=o(" (Perceiver model)"),hro=l(),lg=a("li"),wse=a("strong"),uro=o("plbart"),pro=o(" \u2014 "),vP=a("a"),_ro=o("PLBartConfig"),bro=o(" (PLBart model)"),vro=l(),ig=a("li"),Ase=a("strong"),Fro=o("poolformer"),Tro=o(" \u2014 "),FP=a("a"),Mro=o("PoolFormerConfig"),Ero=o(" (PoolFormer model)"),Cro=l(),dg=a("li"),Lse=a("strong"),wro=o("prophetnet"),Aro=o(" \u2014 "),TP=a("a"),Lro=o("ProphetNetConfig"),yro=o(" (ProphetNet model)"),xro=l(),cg=a("li"),yse=a("strong"),$ro=o("qdqbert"),kro=o(" \u2014 "),MP=a("a"),Sro=o("QDQBertConfig"),Rro=o(" (QDQBert model)"),Pro=l(),mg=a("li"),xse=a("strong"),Bro=o("rag"),Iro=o(" \u2014 "),EP=a("a"),Nro=o("RagConfig"),qro=o(" (RAG model)"),jro=l(),fg=a("li"),$se=a("strong"),Dro=o("realm"),Gro=o(" \u2014 "),CP=a("a"),Oro=o("RealmConfig"),Vro=o(" (REALM model)"),Xro=l(),gg=a("li"),kse=a("strong"),zro=o("reformer"),Wro=o(" \u2014 "),wP=a("a"),Qro=o("ReformerConfig"),Hro=o(" (Reformer model)"),Uro=l(),hg=a("li"),Sse=a("strong"),Jro=o("regnet"),Yro=o(" \u2014 "),AP=a("a"),Kro=o("RegNetConfig"),Zro=o(" (RegNet model)"),eto=l(),ug=a("li"),Rse=a("strong"),oto=o("rembert"),rto=o(" \u2014 "),LP=a("a"),tto=o("RemBertConfig"),ato=o(" (RemBERT model)"),nto=l(),pg=a("li"),Pse=a("strong"),sto=o("resnet"),lto=o(" \u2014 "),yP=a("a"),ito=o("ResNetConfig"),dto=o(" (ResNet model)"),cto=l(),_g=a("li"),Bse=a("strong"),mto=o("retribert"),fto=o(" \u2014 "),xP=a("a"),gto=o("RetriBertConfig"),hto=o(" (RetriBERT model)"),uto=l(),bg=a("li"),Ise=a("strong"),pto=o("roberta"),_to=o(" \u2014 "),$P=a("a"),bto=o("RobertaConfig"),vto=o(" (RoBERTa model)"),Fto=l(),vg=a("li"),Nse=a("strong"),Tto=o("roformer"),Mto=o(" \u2014 "),kP=a("a"),Eto=o("RoFormerConfig"),Cto=o(" (RoFormer model)"),wto=l(),Fg=a("li"),qse=a("strong"),Ato=o("segformer"),Lto=o(" \u2014 "),SP=a("a"),yto=o("SegformerConfig"),xto=o(" (SegFormer model)"),$to=l(),Tg=a("li"),jse=a("strong"),kto=o("sew"),Sto=o(" \u2014 "),RP=a("a"),Rto=o("SEWConfig"),Pto=o(" (SEW model)"),Bto=l(),Mg=a("li"),Dse=a("strong"),Ito=o("sew-d"),Nto=o(" \u2014 "),PP=a("a"),qto=o("SEWDConfig"),jto=o(" (SEW-D model)"),Dto=l(),Eg=a("li"),Gse=a("strong"),Gto=o("speech-encoder-decoder"),Oto=o(" \u2014 "),BP=a("a"),Vto=o("SpeechEncoderDecoderConfig"),Xto=o(" (Speech Encoder decoder model)"),zto=l(),Cg=a("li"),Ose=a("strong"),Wto=o("speech_to_text"),Qto=o(" \u2014 "),IP=a("a"),Hto=o("Speech2TextConfig"),Uto=o(" (Speech2Text model)"),Jto=l(),wg=a("li"),Vse=a("strong"),Yto=o("speech_to_text_2"),Kto=o(" \u2014 "),NP=a("a"),Zto=o("Speech2Text2Config"),eao=o(" (Speech2Text2 model)"),oao=l(),Ag=a("li"),Xse=a("strong"),rao=o("splinter"),tao=o(" \u2014 "),qP=a("a"),aao=o("SplinterConfig"),nao=o(" (Splinter model)"),sao=l(),Lg=a("li"),zse=a("strong"),lao=o("squeezebert"),iao=o(" \u2014 "),jP=a("a"),dao=o("SqueezeBertConfig"),cao=o(" (SqueezeBERT model)"),mao=l(),yg=a("li"),Wse=a("strong"),fao=o("swin"),gao=o(" \u2014 "),DP=a("a"),hao=o("SwinConfig"),uao=o(" (Swin Transformer model)"),pao=l(),xg=a("li"),Qse=a("strong"),_ao=o("t5"),bao=o(" \u2014 "),GP=a("a"),vao=o("T5Config"),Fao=o(" (T5 model)"),Tao=l(),$g=a("li"),Hse=a("strong"),Mao=o("tapas"),Eao=o(" \u2014 "),OP=a("a"),Cao=o("TapasConfig"),wao=o(" (TAPAS model)"),Aao=l(),kg=a("li"),Use=a("strong"),Lao=o("trajectory_transformer"),yao=o(" \u2014 "),VP=a("a"),xao=o("TrajectoryTransformerConfig"),$ao=o(" (Trajectory Transformer model)"),kao=l(),Sg=a("li"),Jse=a("strong"),Sao=o("transfo-xl"),Rao=o(" \u2014 "),XP=a("a"),Pao=o("TransfoXLConfig"),Bao=o(" (Transformer-XL model)"),Iao=l(),Rg=a("li"),Yse=a("strong"),Nao=o("trocr"),qao=o(" \u2014 "),zP=a("a"),jao=o("TrOCRConfig"),Dao=o(" (TrOCR model)"),Gao=l(),Pg=a("li"),Kse=a("strong"),Oao=o("unispeech"),Vao=o(" \u2014 "),WP=a("a"),Xao=o("UniSpeechConfig"),zao=o(" (UniSpeech model)"),Wao=l(),Bg=a("li"),Zse=a("strong"),Qao=o("unispeech-sat"),Hao=o(" \u2014 "),QP=a("a"),Uao=o("UniSpeechSatConfig"),Jao=o(" (UniSpeechSat model)"),Yao=l(),Ig=a("li"),ele=a("strong"),Kao=o("van"),Zao=o(" \u2014 "),HP=a("a"),eno=o("VanConfig"),ono=o(" (VAN model)"),rno=l(),Ng=a("li"),ole=a("strong"),tno=o("vilt"),ano=o(" \u2014 "),UP=a("a"),nno=o("ViltConfig"),sno=o(" (ViLT model)"),lno=l(),qg=a("li"),rle=a("strong"),ino=o("vision-encoder-decoder"),dno=o(" \u2014 "),JP=a("a"),cno=o("VisionEncoderDecoderConfig"),mno=o(" (Vision Encoder decoder model)"),fno=l(),jg=a("li"),tle=a("strong"),gno=o("vision-text-dual-encoder"),hno=o(" \u2014 "),YP=a("a"),uno=o("VisionTextDualEncoderConfig"),pno=o(" (VisionTextDualEncoder model)"),_no=l(),Dg=a("li"),ale=a("strong"),bno=o("visual_bert"),vno=o(" \u2014 "),KP=a("a"),Fno=o("VisualBertConfig"),Tno=o(" (VisualBERT model)"),Mno=l(),Gg=a("li"),nle=a("strong"),Eno=o("vit"),Cno=o(" \u2014 "),ZP=a("a"),wno=o("ViTConfig"),Ano=o(" (ViT model)"),Lno=l(),Og=a("li"),sle=a("strong"),yno=o("vit_mae"),xno=o(" \u2014 "),eB=a("a"),$no=o("ViTMAEConfig"),kno=o(" (ViTMAE model)"),Sno=l(),Vg=a("li"),lle=a("strong"),Rno=o("wav2vec2"),Pno=o(" \u2014 "),oB=a("a"),Bno=o("Wav2Vec2Config"),Ino=o(" (Wav2Vec2 model)"),Nno=l(),Xg=a("li"),ile=a("strong"),qno=o("wav2vec2-conformer"),jno=o(" \u2014 "),rB=a("a"),Dno=o("Wav2Vec2ConformerConfig"),Gno=o(" (Wav2Vec2-Conformer model)"),Ono=l(),zg=a("li"),dle=a("strong"),Vno=o("wavlm"),Xno=o(" \u2014 "),tB=a("a"),zno=o("WavLMConfig"),Wno=o(" (WavLM model)"),Qno=l(),Wg=a("li"),cle=a("strong"),Hno=o("xglm"),Uno=o(" \u2014 "),aB=a("a"),Jno=o("XGLMConfig"),Yno=o(" (XGLM model)"),Kno=l(),Qg=a("li"),mle=a("strong"),Zno=o("xlm"),eso=o(" \u2014 "),nB=a("a"),oso=o("XLMConfig"),rso=o(" (XLM model)"),tso=l(),Hg=a("li"),fle=a("strong"),aso=o("xlm-prophetnet"),nso=o(" \u2014 "),sB=a("a"),sso=o("XLMProphetNetConfig"),lso=o(" (XLM-ProphetNet model)"),iso=l(),Ug=a("li"),gle=a("strong"),dso=o("xlm-roberta"),cso=o(" \u2014 "),lB=a("a"),mso=o("XLMRobertaConfig"),fso=o(" (XLM-RoBERTa model)"),gso=l(),Jg=a("li"),hle=a("strong"),hso=o("xlm-roberta-xl"),uso=o(" \u2014 "),iB=a("a"),pso=o("XLMRobertaXLConfig"),_so=o(" (XLM-RoBERTa-XL model)"),bso=l(),Yg=a("li"),ule=a("strong"),vso=o("xlnet"),Fso=o(" \u2014 "),dB=a("a"),Tso=o("XLNetConfig"),Mso=o(" (XLNet model)"),Eso=l(),Kg=a("li"),ple=a("strong"),Cso=o("yolos"),wso=o(" \u2014 "),cB=a("a"),Aso=o("YolosConfig"),Lso=o(" (YOLOS model)"),yso=l(),Zg=a("li"),_le=a("strong"),xso=o("yoso"),$so=o(" \u2014 "),mB=a("a"),kso=o("YosoConfig"),Sso=o(" (YOSO model)"),Rso=l(),F(eh.$$.fragment),Pso=l(),oh=a("div"),F(My.$$.fragment),Bso=l(),ble=a("p"),Iso=o("Register a new configuration for this class."),JXe=l(),ji=a("h2"),rh=a("a"),vle=a("span"),F(Ey.$$.fragment),Nso=l(),Fle=a("span"),qso=o("AutoTokenizer"),YXe=l(),yo=a("div"),F(Cy.$$.fragment),jso=l(),wy=a("p"),Dso=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),fB=a("a"),Gso=o("AutoTokenizer.from_pretrained()"),Oso=o(" class method."),Vso=l(),Ay=a("p"),Xso=o("This class cannot be instantiated directly using "),Tle=a("code"),zso=o("__init__()"),Wso=o(" (throws an error)."),Qso=l(),xr=a("div"),F(Ly.$$.fragment),Hso=l(),Mle=a("p"),Uso=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Jso=l(),Pa=a("p"),Yso=o("The tokenizer class to instantiate is selected based on the "),Ele=a("code"),Kso=o("model_type"),Zso=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),elo=o("pretrained_model_name_or_path"),olo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=a("code"),rlo=o("pretrained_model_name_or_path"),tlo=o(":"),alo=l(),k=a("ul"),jn=a("li"),Ale=a("strong"),nlo=o("albert"),slo=o(" \u2014 "),gB=a("a"),llo=o("AlbertTokenizer"),ilo=o(" or "),hB=a("a"),dlo=o("AlbertTokenizerFast"),clo=o(" (ALBERT model)"),mlo=l(),Dn=a("li"),Lle=a("strong"),flo=o("bart"),glo=o(" \u2014 "),uB=a("a"),hlo=o("BartTokenizer"),ulo=o(" or "),pB=a("a"),plo=o("BartTokenizerFast"),_lo=o(" (BART model)"),blo=l(),Gn=a("li"),yle=a("strong"),vlo=o("barthez"),Flo=o(" \u2014 "),_B=a("a"),Tlo=o("BarthezTokenizer"),Mlo=o(" or "),bB=a("a"),Elo=o("BarthezTokenizerFast"),Clo=o(" (BARThez model)"),wlo=l(),th=a("li"),xle=a("strong"),Alo=o("bartpho"),Llo=o(" \u2014 "),vB=a("a"),ylo=o("BartphoTokenizer"),xlo=o(" (BARTpho model)"),$lo=l(),On=a("li"),$le=a("strong"),klo=o("bert"),Slo=o(" \u2014 "),FB=a("a"),Rlo=o("BertTokenizer"),Plo=o(" or "),TB=a("a"),Blo=o("BertTokenizerFast"),Ilo=o(" (BERT model)"),Nlo=l(),ah=a("li"),kle=a("strong"),qlo=o("bert-generation"),jlo=o(" \u2014 "),MB=a("a"),Dlo=o("BertGenerationTokenizer"),Glo=o(" (Bert Generation model)"),Olo=l(),nh=a("li"),Sle=a("strong"),Vlo=o("bert-japanese"),Xlo=o(" \u2014 "),EB=a("a"),zlo=o("BertJapaneseTokenizer"),Wlo=o(" (BertJapanese model)"),Qlo=l(),sh=a("li"),Rle=a("strong"),Hlo=o("bertweet"),Ulo=o(" \u2014 "),CB=a("a"),Jlo=o("BertweetTokenizer"),Ylo=o(" (BERTweet model)"),Klo=l(),Vn=a("li"),Ple=a("strong"),Zlo=o("big_bird"),eio=o(" \u2014 "),wB=a("a"),oio=o("BigBirdTokenizer"),rio=o(" or "),AB=a("a"),tio=o("BigBirdTokenizerFast"),aio=o(" (BigBird model)"),nio=l(),Xn=a("li"),Ble=a("strong"),sio=o("bigbird_pegasus"),lio=o(" \u2014 "),LB=a("a"),iio=o("PegasusTokenizer"),dio=o(" or "),yB=a("a"),cio=o("PegasusTokenizerFast"),mio=o(" (BigBird-Pegasus model)"),fio=l(),zn=a("li"),Ile=a("strong"),gio=o("blenderbot"),hio=o(" \u2014 "),xB=a("a"),uio=o("BlenderbotTokenizer"),pio=o(" or "),$B=a("a"),_io=o("BlenderbotTokenizerFast"),bio=o(" (Blenderbot model)"),vio=l(),lh=a("li"),Nle=a("strong"),Fio=o("blenderbot-small"),Tio=o(" \u2014 "),kB=a("a"),Mio=o("BlenderbotSmallTokenizer"),Eio=o(" (BlenderbotSmall model)"),Cio=l(),ih=a("li"),qle=a("strong"),wio=o("bloom"),Aio=o(" \u2014 "),SB=a("a"),Lio=o("BloomTokenizerFast"),yio=o(" (BLOOM model)"),xio=l(),dh=a("li"),jle=a("strong"),$io=o("byt5"),kio=o(" \u2014 "),RB=a("a"),Sio=o("ByT5Tokenizer"),Rio=o(" (ByT5 model)"),Pio=l(),Wn=a("li"),Dle=a("strong"),Bio=o("camembert"),Iio=o(" \u2014 "),PB=a("a"),Nio=o("CamembertTokenizer"),qio=o(" or "),BB=a("a"),jio=o("CamembertTokenizerFast"),Dio=o(" (CamemBERT model)"),Gio=l(),ch=a("li"),Gle=a("strong"),Oio=o("canine"),Vio=o(" \u2014 "),IB=a("a"),Xio=o("CanineTokenizer"),zio=o(" (CANINE model)"),Wio=l(),Qn=a("li"),Ole=a("strong"),Qio=o("clip"),Hio=o(" \u2014 "),NB=a("a"),Uio=o("CLIPTokenizer"),Jio=o(" or "),qB=a("a"),Yio=o("CLIPTokenizerFast"),Kio=o(" (CLIP model)"),Zio=l(),Hn=a("li"),Vle=a("strong"),edo=o("codegen"),odo=o(" \u2014 "),jB=a("a"),rdo=o("CodeGenTokenizer"),tdo=o(" or "),DB=a("a"),ado=o("CodeGenTokenizerFast"),ndo=o(" (CodeGen model)"),sdo=l(),Un=a("li"),Xle=a("strong"),ldo=o("convbert"),ido=o(" \u2014 "),GB=a("a"),ddo=o("ConvBertTokenizer"),cdo=o(" or "),OB=a("a"),mdo=o("ConvBertTokenizerFast"),fdo=o(" (ConvBERT model)"),gdo=l(),Jn=a("li"),zle=a("strong"),hdo=o("cpm"),udo=o(" \u2014 "),VB=a("a"),pdo=o("CpmTokenizer"),_do=o(" or "),XB=a("a"),bdo=o("CpmTokenizerFast"),vdo=o(" (CPM model)"),Fdo=l(),mh=a("li"),Wle=a("strong"),Tdo=o("ctrl"),Mdo=o(" \u2014 "),zB=a("a"),Edo=o("CTRLTokenizer"),Cdo=o(" (CTRL model)"),wdo=l(),Yn=a("li"),Qle=a("strong"),Ado=o("data2vec-text"),Ldo=o(" \u2014 "),WB=a("a"),ydo=o("RobertaTokenizer"),xdo=o(" or "),QB=a("a"),$do=o("RobertaTokenizerFast"),kdo=o(" (Data2VecText model)"),Sdo=l(),Kn=a("li"),Hle=a("strong"),Rdo=o("deberta"),Pdo=o(" \u2014 "),HB=a("a"),Bdo=o("DebertaTokenizer"),Ido=o(" or "),UB=a("a"),Ndo=o("DebertaTokenizerFast"),qdo=o(" (DeBERTa model)"),jdo=l(),Zn=a("li"),Ule=a("strong"),Ddo=o("deberta-v2"),Gdo=o(" \u2014 "),JB=a("a"),Odo=o("DebertaV2Tokenizer"),Vdo=o(" or "),YB=a("a"),Xdo=o("DebertaV2TokenizerFast"),zdo=o(" (DeBERTa-v2 model)"),Wdo=l(),es=a("li"),Jle=a("strong"),Qdo=o("distilbert"),Hdo=o(" \u2014 "),KB=a("a"),Udo=o("DistilBertTokenizer"),Jdo=o(" or "),ZB=a("a"),Ydo=o("DistilBertTokenizerFast"),Kdo=o(" (DistilBERT model)"),Zdo=l(),os=a("li"),Yle=a("strong"),eco=o("dpr"),oco=o(" \u2014 "),eI=a("a"),rco=o("DPRQuestionEncoderTokenizer"),tco=o(" or "),oI=a("a"),aco=o("DPRQuestionEncoderTokenizerFast"),nco=o(" (DPR model)"),sco=l(),rs=a("li"),Kle=a("strong"),lco=o("electra"),ico=o(" \u2014 "),rI=a("a"),dco=o("ElectraTokenizer"),cco=o(" or "),tI=a("a"),mco=o("ElectraTokenizerFast"),fco=o(" (ELECTRA model)"),gco=l(),fh=a("li"),Zle=a("strong"),hco=o("flaubert"),uco=o(" \u2014 "),aI=a("a"),pco=o("FlaubertTokenizer"),_co=o(" (FlauBERT model)"),bco=l(),ts=a("li"),eie=a("strong"),vco=o("fnet"),Fco=o(" \u2014 "),nI=a("a"),Tco=o("FNetTokenizer"),Mco=o(" or "),sI=a("a"),Eco=o("FNetTokenizerFast"),Cco=o(" (FNet model)"),wco=l(),gh=a("li"),oie=a("strong"),Aco=o("fsmt"),Lco=o(" \u2014 "),lI=a("a"),yco=o("FSMTTokenizer"),xco=o(" (FairSeq Machine-Translation model)"),$co=l(),as=a("li"),rie=a("strong"),kco=o("funnel"),Sco=o(" \u2014 "),iI=a("a"),Rco=o("FunnelTokenizer"),Pco=o(" or "),dI=a("a"),Bco=o("FunnelTokenizerFast"),Ico=o(" (Funnel Transformer model)"),Nco=l(),ns=a("li"),tie=a("strong"),qco=o("gpt2"),jco=o(" \u2014 "),cI=a("a"),Dco=o("GPT2Tokenizer"),Gco=o(" or "),mI=a("a"),Oco=o("GPT2TokenizerFast"),Vco=o(" (OpenAI GPT-2 model)"),Xco=l(),ss=a("li"),aie=a("strong"),zco=o("gpt_neo"),Wco=o(" \u2014 "),fI=a("a"),Qco=o("GPT2Tokenizer"),Hco=o(" or "),gI=a("a"),Uco=o("GPT2TokenizerFast"),Jco=o(" (GPT Neo model)"),Yco=l(),hh=a("li"),nie=a("strong"),Kco=o("gpt_neox"),Zco=o(" \u2014 "),hI=a("a"),emo=o("GPTNeoXTokenizerFast"),omo=o(" (GPT NeoX model)"),rmo=l(),ls=a("li"),sie=a("strong"),tmo=o("gptj"),amo=o(" \u2014 "),uI=a("a"),nmo=o("GPT2Tokenizer"),smo=o(" or "),pI=a("a"),lmo=o("GPT2TokenizerFast"),imo=o(" (GPT-J model)"),dmo=l(),is=a("li"),lie=a("strong"),cmo=o("groupvit"),mmo=o(" \u2014 "),_I=a("a"),fmo=o("CLIPTokenizer"),gmo=o(" or "),bI=a("a"),hmo=o("CLIPTokenizerFast"),umo=o(" (GroupViT model)"),pmo=l(),ds=a("li"),iie=a("strong"),_mo=o("herbert"),bmo=o(" \u2014 "),vI=a("a"),vmo=o("HerbertTokenizer"),Fmo=o(" or "),FI=a("a"),Tmo=o("HerbertTokenizerFast"),Mmo=o(" (HerBERT model)"),Emo=l(),uh=a("li"),die=a("strong"),Cmo=o("hubert"),wmo=o(" \u2014 "),TI=a("a"),Amo=o("Wav2Vec2CTCTokenizer"),Lmo=o(" (Hubert model)"),ymo=l(),cs=a("li"),cie=a("strong"),xmo=o("ibert"),$mo=o(" \u2014 "),MI=a("a"),kmo=o("RobertaTokenizer"),Smo=o(" or "),EI=a("a"),Rmo=o("RobertaTokenizerFast"),Pmo=o(" (I-BERT model)"),Bmo=l(),ms=a("li"),mie=a("strong"),Imo=o("layoutlm"),Nmo=o(" \u2014 "),CI=a("a"),qmo=o("LayoutLMTokenizer"),jmo=o(" or "),wI=a("a"),Dmo=o("LayoutLMTokenizerFast"),Gmo=o(" (LayoutLM model)"),Omo=l(),fs=a("li"),fie=a("strong"),Vmo=o("layoutlmv2"),Xmo=o(" \u2014 "),AI=a("a"),zmo=o("LayoutLMv2Tokenizer"),Wmo=o(" or "),LI=a("a"),Qmo=o("LayoutLMv2TokenizerFast"),Hmo=o(" (LayoutLMv2 model)"),Umo=l(),gs=a("li"),gie=a("strong"),Jmo=o("layoutlmv3"),Ymo=o(" \u2014 "),yI=a("a"),Kmo=o("LayoutLMv3Tokenizer"),Zmo=o(" or "),xI=a("a"),efo=o("LayoutLMv3TokenizerFast"),ofo=o(" (LayoutLMv3 model)"),rfo=l(),hs=a("li"),hie=a("strong"),tfo=o("layoutxlm"),afo=o(" \u2014 "),$I=a("a"),nfo=o("LayoutXLMTokenizer"),sfo=o(" or "),kI=a("a"),lfo=o("LayoutXLMTokenizerFast"),ifo=o(" (LayoutXLM model)"),dfo=l(),us=a("li"),uie=a("strong"),cfo=o("led"),mfo=o(" \u2014 "),SI=a("a"),ffo=o("LEDTokenizer"),gfo=o(" or "),RI=a("a"),hfo=o("LEDTokenizerFast"),ufo=o(" (LED model)"),pfo=l(),ps=a("li"),pie=a("strong"),_fo=o("longformer"),bfo=o(" \u2014 "),PI=a("a"),vfo=o("LongformerTokenizer"),Ffo=o(" or "),BI=a("a"),Tfo=o("LongformerTokenizerFast"),Mfo=o(" (Longformer model)"),Efo=l(),_s=a("li"),_ie=a("strong"),Cfo=o("longt5"),wfo=o(" \u2014 "),II=a("a"),Afo=o("T5Tokenizer"),Lfo=o(" or "),NI=a("a"),yfo=o("T5TokenizerFast"),xfo=o(" (LongT5 model)"),$fo=l(),ph=a("li"),bie=a("strong"),kfo=o("luke"),Sfo=o(" \u2014 "),qI=a("a"),Rfo=o("LukeTokenizer"),Pfo=o(" (LUKE model)"),Bfo=l(),bs=a("li"),vie=a("strong"),Ifo=o("lxmert"),Nfo=o(" \u2014 "),jI=a("a"),qfo=o("LxmertTokenizer"),jfo=o(" or "),DI=a("a"),Dfo=o("LxmertTokenizerFast"),Gfo=o(" (LXMERT model)"),Ofo=l(),_h=a("li"),Fie=a("strong"),Vfo=o("m2m_100"),Xfo=o(" \u2014 "),GI=a("a"),zfo=o("M2M100Tokenizer"),Wfo=o(" (M2M100 model)"),Qfo=l(),bh=a("li"),Tie=a("strong"),Hfo=o("marian"),Ufo=o(" \u2014 "),OI=a("a"),Jfo=o("MarianTokenizer"),Yfo=o(" (Marian model)"),Kfo=l(),vs=a("li"),Mie=a("strong"),Zfo=o("mbart"),ego=o(" \u2014 "),VI=a("a"),ogo=o("MBartTokenizer"),rgo=o(" or "),XI=a("a"),tgo=o("MBartTokenizerFast"),ago=o(" (mBART model)"),ngo=l(),Fs=a("li"),Eie=a("strong"),sgo=o("mbart50"),lgo=o(" \u2014 "),zI=a("a"),igo=o("MBart50Tokenizer"),dgo=o(" or "),WI=a("a"),cgo=o("MBart50TokenizerFast"),mgo=o(" (mBART-50 model)"),fgo=l(),Ts=a("li"),Cie=a("strong"),ggo=o("megatron-bert"),hgo=o(" \u2014 "),QI=a("a"),ugo=o("BertTokenizer"),pgo=o(" or "),HI=a("a"),_go=o("BertTokenizerFast"),bgo=o(" (Megatron-BERT model)"),vgo=l(),vh=a("li"),wie=a("strong"),Fgo=o("mluke"),Tgo=o(" \u2014 "),UI=a("a"),Mgo=o("MLukeTokenizer"),Ego=o(" (mLUKE model)"),Cgo=l(),Ms=a("li"),Aie=a("strong"),wgo=o("mobilebert"),Ago=o(" \u2014 "),JI=a("a"),Lgo=o("MobileBertTokenizer"),ygo=o(" or "),YI=a("a"),xgo=o("MobileBertTokenizerFast"),$go=o(" (MobileBERT model)"),kgo=l(),Es=a("li"),Lie=a("strong"),Sgo=o("mpnet"),Rgo=o(" \u2014 "),KI=a("a"),Pgo=o("MPNetTokenizer"),Bgo=o(" or "),ZI=a("a"),Igo=o("MPNetTokenizerFast"),Ngo=o(" (MPNet model)"),qgo=l(),Cs=a("li"),yie=a("strong"),jgo=o("mt5"),Dgo=o(" \u2014 "),eN=a("a"),Ggo=o("MT5Tokenizer"),Ogo=o(" or "),oN=a("a"),Vgo=o("MT5TokenizerFast"),Xgo=o(" (MT5 model)"),zgo=l(),ws=a("li"),xie=a("strong"),Wgo=o("mvp"),Qgo=o(" \u2014 "),rN=a("a"),Hgo=o("MvpTokenizer"),Ugo=o(" or "),tN=a("a"),Jgo=o("MvpTokenizerFast"),Ygo=o(" (MVP model)"),Kgo=l(),As=a("li"),$ie=a("strong"),Zgo=o("nezha"),eho=o(" \u2014 "),aN=a("a"),oho=o("BertTokenizer"),rho=o(" or "),nN=a("a"),tho=o("BertTokenizerFast"),aho=o(" (Nezha model)"),nho=l(),Ls=a("li"),kie=a("strong"),sho=o("nllb"),lho=o(" \u2014 "),sN=a("a"),iho=o("NllbTokenizer"),dho=o(" or "),lN=a("a"),cho=o("NllbTokenizerFast"),mho=o(" (NLLB model)"),fho=l(),ys=a("li"),Sie=a("strong"),gho=o("nystromformer"),hho=o(" \u2014 "),iN=a("a"),uho=o("AlbertTokenizer"),pho=o(" or "),dN=a("a"),_ho=o("AlbertTokenizerFast"),bho=o(" (Nystr\xF6mformer model)"),vho=l(),xs=a("li"),Rie=a("strong"),Fho=o("openai-gpt"),Tho=o(" \u2014 "),cN=a("a"),Mho=o("OpenAIGPTTokenizer"),Eho=o(" or "),mN=a("a"),Cho=o("OpenAIGPTTokenizerFast"),who=o(" (OpenAI GPT model)"),Aho=l(),Fh=a("li"),Pie=a("strong"),Lho=o("opt"),yho=o(" \u2014 "),fN=a("a"),xho=o("GPT2Tokenizer"),$ho=o(" (OPT model)"),kho=l(),$s=a("li"),Bie=a("strong"),Sho=o("owlvit"),Rho=o(" \u2014 "),gN=a("a"),Pho=o("CLIPTokenizer"),Bho=o(" or "),hN=a("a"),Iho=o("CLIPTokenizerFast"),Nho=o(" (OWL-ViT model)"),qho=l(),ks=a("li"),Iie=a("strong"),jho=o("pegasus"),Dho=o(" \u2014 "),uN=a("a"),Gho=o("PegasusTokenizer"),Oho=o(" or "),pN=a("a"),Vho=o("PegasusTokenizerFast"),Xho=o(" (Pegasus model)"),zho=l(),Th=a("li"),Nie=a("strong"),Who=o("perceiver"),Qho=o(" \u2014 "),_N=a("a"),Hho=o("PerceiverTokenizer"),Uho=o(" (Perceiver model)"),Jho=l(),Mh=a("li"),qie=a("strong"),Yho=o("phobert"),Kho=o(" \u2014 "),bN=a("a"),Zho=o("PhobertTokenizer"),euo=o(" (PhoBERT model)"),ouo=l(),Eh=a("li"),jie=a("strong"),ruo=o("plbart"),tuo=o(" \u2014 "),vN=a("a"),auo=o("PLBartTokenizer"),nuo=o(" (PLBart model)"),suo=l(),Ch=a("li"),Die=a("strong"),luo=o("prophetnet"),iuo=o(" \u2014 "),FN=a("a"),duo=o("ProphetNetTokenizer"),cuo=o(" (ProphetNet model)"),muo=l(),Ss=a("li"),Gie=a("strong"),fuo=o("qdqbert"),guo=o(" \u2014 "),TN=a("a"),huo=o("BertTokenizer"),uuo=o(" or "),MN=a("a"),puo=o("BertTokenizerFast"),_uo=o(" (QDQBert model)"),buo=l(),wh=a("li"),Oie=a("strong"),vuo=o("rag"),Fuo=o(" \u2014 "),EN=a("a"),Tuo=o("RagTokenizer"),Muo=o(" (RAG model)"),Euo=l(),Rs=a("li"),Vie=a("strong"),Cuo=o("realm"),wuo=o(" \u2014 "),CN=a("a"),Auo=o("RealmTokenizer"),Luo=o(" or "),wN=a("a"),yuo=o("RealmTokenizerFast"),xuo=o(" (REALM model)"),$uo=l(),Ps=a("li"),Xie=a("strong"),kuo=o("reformer"),Suo=o(" \u2014 "),AN=a("a"),Ruo=o("ReformerTokenizer"),Puo=o(" or "),LN=a("a"),Buo=o("ReformerTokenizerFast"),Iuo=o(" (Reformer model)"),Nuo=l(),Bs=a("li"),zie=a("strong"),quo=o("rembert"),juo=o(" \u2014 "),yN=a("a"),Duo=o("RemBertTokenizer"),Guo=o(" or "),xN=a("a"),Ouo=o("RemBertTokenizerFast"),Vuo=o(" (RemBERT model)"),Xuo=l(),Is=a("li"),Wie=a("strong"),zuo=o("retribert"),Wuo=o(" \u2014 "),$N=a("a"),Quo=o("RetriBertTokenizer"),Huo=o(" or "),kN=a("a"),Uuo=o("RetriBertTokenizerFast"),Juo=o(" (RetriBERT model)"),Yuo=l(),Ns=a("li"),Qie=a("strong"),Kuo=o("roberta"),Zuo=o(" \u2014 "),SN=a("a"),epo=o("RobertaTokenizer"),opo=o(" or "),RN=a("a"),rpo=o("RobertaTokenizerFast"),tpo=o(" (RoBERTa model)"),apo=l(),qs=a("li"),Hie=a("strong"),npo=o("roformer"),spo=o(" \u2014 "),PN=a("a"),lpo=o("RoFormerTokenizer"),ipo=o(" or "),BN=a("a"),dpo=o("RoFormerTokenizerFast"),cpo=o(" (RoFormer model)"),mpo=l(),Ah=a("li"),Uie=a("strong"),fpo=o("speech_to_text"),gpo=o(" \u2014 "),IN=a("a"),hpo=o("Speech2TextTokenizer"),upo=o(" (Speech2Text model)"),ppo=l(),Lh=a("li"),Jie=a("strong"),_po=o("speech_to_text_2"),bpo=o(" \u2014 "),NN=a("a"),vpo=o("Speech2Text2Tokenizer"),Fpo=o(" (Speech2Text2 model)"),Tpo=l(),js=a("li"),Yie=a("strong"),Mpo=o("splinter"),Epo=o(" \u2014 "),qN=a("a"),Cpo=o("SplinterTokenizer"),wpo=o(" or "),jN=a("a"),Apo=o("SplinterTokenizerFast"),Lpo=o(" (Splinter model)"),ypo=l(),Ds=a("li"),Kie=a("strong"),xpo=o("squeezebert"),$po=o(" \u2014 "),DN=a("a"),kpo=o("SqueezeBertTokenizer"),Spo=o(" or "),GN=a("a"),Rpo=o("SqueezeBertTokenizerFast"),Ppo=o(" (SqueezeBERT model)"),Bpo=l(),Gs=a("li"),Zie=a("strong"),Ipo=o("t5"),Npo=o(" \u2014 "),ON=a("a"),qpo=o("T5Tokenizer"),jpo=o(" or "),VN=a("a"),Dpo=o("T5TokenizerFast"),Gpo=o(" (T5 model)"),Opo=l(),yh=a("li"),ede=a("strong"),Vpo=o("tapas"),Xpo=o(" \u2014 "),XN=a("a"),zpo=o("TapasTokenizer"),Wpo=o(" (TAPAS model)"),Qpo=l(),xh=a("li"),ode=a("strong"),Hpo=o("tapex"),Upo=o(" \u2014 "),zN=a("a"),Jpo=o("TapexTokenizer"),Ypo=o(" (TAPEX model)"),Kpo=l(),$h=a("li"),rde=a("strong"),Zpo=o("transfo-xl"),e_o=o(" \u2014 "),WN=a("a"),o_o=o("TransfoXLTokenizer"),r_o=o(" (Transformer-XL model)"),t_o=l(),Os=a("li"),tde=a("strong"),a_o=o("vilt"),n_o=o(" \u2014 "),QN=a("a"),s_o=o("BertTokenizer"),l_o=o(" or "),HN=a("a"),i_o=o("BertTokenizerFast"),d_o=o(" (ViLT model)"),c_o=l(),Vs=a("li"),ade=a("strong"),m_o=o("visual_bert"),f_o=o(" \u2014 "),UN=a("a"),g_o=o("BertTokenizer"),h_o=o(" or "),JN=a("a"),u_o=o("BertTokenizerFast"),p_o=o(" (VisualBERT model)"),__o=l(),kh=a("li"),nde=a("strong"),b_o=o("wav2vec2"),v_o=o(" \u2014 "),YN=a("a"),F_o=o("Wav2Vec2CTCTokenizer"),T_o=o(" (Wav2Vec2 model)"),M_o=l(),Sh=a("li"),sde=a("strong"),E_o=o("wav2vec2-conformer"),C_o=o(" \u2014 "),KN=a("a"),w_o=o("Wav2Vec2CTCTokenizer"),A_o=o(" (Wav2Vec2-Conformer model)"),L_o=l(),Rh=a("li"),lde=a("strong"),y_o=o("wav2vec2_phoneme"),x_o=o(" \u2014 "),ZN=a("a"),$_o=o("Wav2Vec2PhonemeCTCTokenizer"),k_o=o(" (Wav2Vec2Phoneme model)"),S_o=l(),Xs=a("li"),ide=a("strong"),R_o=o("xglm"),P_o=o(" \u2014 "),eq=a("a"),B_o=o("XGLMTokenizer"),I_o=o(" or "),oq=a("a"),N_o=o("XGLMTokenizerFast"),q_o=o(" (XGLM model)"),j_o=l(),Ph=a("li"),dde=a("strong"),D_o=o("xlm"),G_o=o(" \u2014 "),rq=a("a"),O_o=o("XLMTokenizer"),V_o=o(" (XLM model)"),X_o=l(),Bh=a("li"),cde=a("strong"),z_o=o("xlm-prophetnet"),W_o=o(" \u2014 "),tq=a("a"),Q_o=o("XLMProphetNetTokenizer"),H_o=o(" (XLM-ProphetNet model)"),U_o=l(),zs=a("li"),mde=a("strong"),J_o=o("xlm-roberta"),Y_o=o(" \u2014 "),aq=a("a"),K_o=o("XLMRobertaTokenizer"),Z_o=o(" or "),nq=a("a"),e2o=o("XLMRobertaTokenizerFast"),o2o=o(" (XLM-RoBERTa model)"),r2o=l(),Ws=a("li"),fde=a("strong"),t2o=o("xlm-roberta-xl"),a2o=o(" \u2014 "),sq=a("a"),n2o=o("RobertaTokenizer"),s2o=o(" or "),lq=a("a"),l2o=o("RobertaTokenizerFast"),i2o=o(" (XLM-RoBERTa-XL model)"),d2o=l(),Qs=a("li"),gde=a("strong"),c2o=o("xlnet"),m2o=o(" \u2014 "),iq=a("a"),f2o=o("XLNetTokenizer"),g2o=o(" or "),dq=a("a"),h2o=o("XLNetTokenizerFast"),u2o=o(" (XLNet model)"),p2o=l(),Hs=a("li"),hde=a("strong"),_2o=o("yoso"),b2o=o(" \u2014 "),cq=a("a"),v2o=o("AlbertTokenizer"),F2o=o(" or "),mq=a("a"),T2o=o("AlbertTokenizerFast"),M2o=o(" (YOSO model)"),E2o=l(),F(Ih.$$.fragment),C2o=l(),Nh=a("div"),F(yy.$$.fragment),w2o=l(),ude=a("p"),A2o=o("Register a new tokenizer in this mapping."),KXe=l(),Di=a("h2"),qh=a("a"),pde=a("span"),F(xy.$$.fragment),L2o=l(),_de=a("span"),y2o=o("AutoFeatureExtractor"),ZXe=l(),xo=a("div"),F($y.$$.fragment),x2o=l(),ky=a("p"),$2o=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),fq=a("a"),k2o=o("AutoFeatureExtractor.from_pretrained()"),S2o=o(" class method."),R2o=l(),Sy=a("p"),P2o=o("This class cannot be instantiated directly using "),bde=a("code"),B2o=o("__init__()"),I2o=o(" (throws an error)."),N2o=l(),Ue=a("div"),F(Ry.$$.fragment),q2o=l(),vde=a("p"),j2o=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),D2o=l(),Ba=a("p"),G2o=o("The feature extractor class to instantiate is selected based on the "),Fde=a("code"),O2o=o("model_type"),V2o=o(` property of the config object
(either passed as an argument or loaded from `),Tde=a("code"),X2o=o("pretrained_model_name_or_path"),z2o=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mde=a("code"),W2o=o("pretrained_model_name_or_path"),Q2o=o(":"),H2o=l(),J=a("ul"),jh=a("li"),Ede=a("strong"),U2o=o("beit"),J2o=o(" \u2014 "),gq=a("a"),Y2o=o("BeitFeatureExtractor"),K2o=o(" (BEiT model)"),Z2o=l(),Dh=a("li"),Cde=a("strong"),ebo=o("clip"),obo=o(" \u2014 "),hq=a("a"),rbo=o("CLIPFeatureExtractor"),tbo=o(" (CLIP model)"),abo=l(),Gh=a("li"),wde=a("strong"),nbo=o("convnext"),sbo=o(" \u2014 "),uq=a("a"),lbo=o("ConvNextFeatureExtractor"),ibo=o(" (ConvNeXT model)"),dbo=l(),Oh=a("li"),Ade=a("strong"),cbo=o("cvt"),mbo=o(" \u2014 "),pq=a("a"),fbo=o("ConvNextFeatureExtractor"),gbo=o(" (CvT model)"),hbo=l(),Vh=a("li"),Lde=a("strong"),ubo=o("data2vec-audio"),pbo=o(" \u2014 "),_q=a("a"),_bo=o("Wav2Vec2FeatureExtractor"),bbo=o(" (Data2VecAudio model)"),vbo=l(),Xh=a("li"),yde=a("strong"),Fbo=o("data2vec-vision"),Tbo=o(" \u2014 "),bq=a("a"),Mbo=o("BeitFeatureExtractor"),Ebo=o(" (Data2VecVision model)"),Cbo=l(),zh=a("li"),xde=a("strong"),wbo=o("deit"),Abo=o(" \u2014 "),vq=a("a"),Lbo=o("DeiTFeatureExtractor"),ybo=o(" (DeiT model)"),xbo=l(),Wh=a("li"),$de=a("strong"),$bo=o("detr"),kbo=o(" \u2014 "),Fq=a("a"),Sbo=o("DetrFeatureExtractor"),Rbo=o(" (DETR model)"),Pbo=l(),Qh=a("li"),kde=a("strong"),Bbo=o("dpt"),Ibo=o(" \u2014 "),Tq=a("a"),Nbo=o("DPTFeatureExtractor"),qbo=o(" (DPT model)"),jbo=l(),Hh=a("li"),Sde=a("strong"),Dbo=o("flava"),Gbo=o(" \u2014 "),Mq=a("a"),Obo=o("FlavaFeatureExtractor"),Vbo=o(" (FLAVA model)"),Xbo=l(),Uh=a("li"),Rde=a("strong"),zbo=o("glpn"),Wbo=o(" \u2014 "),Eq=a("a"),Qbo=o("GLPNFeatureExtractor"),Hbo=o(" (GLPN model)"),Ubo=l(),Jh=a("li"),Pde=a("strong"),Jbo=o("groupvit"),Ybo=o(" \u2014 "),Cq=a("a"),Kbo=o("CLIPFeatureExtractor"),Zbo=o(" (GroupViT model)"),evo=l(),Yh=a("li"),Bde=a("strong"),ovo=o("hubert"),rvo=o(" \u2014 "),wq=a("a"),tvo=o("Wav2Vec2FeatureExtractor"),avo=o(" (Hubert model)"),nvo=l(),Kh=a("li"),Ide=a("strong"),svo=o("imagegpt"),lvo=o(" \u2014 "),Aq=a("a"),ivo=o("ImageGPTFeatureExtractor"),dvo=o(" (ImageGPT model)"),cvo=l(),Zh=a("li"),Nde=a("strong"),mvo=o("layoutlmv2"),fvo=o(" \u2014 "),Lq=a("a"),gvo=o("LayoutLMv2FeatureExtractor"),hvo=o(" (LayoutLMv2 model)"),uvo=l(),eu=a("li"),qde=a("strong"),pvo=o("layoutlmv3"),_vo=o(" \u2014 "),yq=a("a"),bvo=o("LayoutLMv3FeatureExtractor"),vvo=o(" (LayoutLMv3 model)"),Fvo=l(),ou=a("li"),jde=a("strong"),Tvo=o("levit"),Mvo=o(" \u2014 "),xq=a("a"),Evo=o("LevitFeatureExtractor"),Cvo=o(" (LeViT model)"),wvo=l(),ru=a("li"),Dde=a("strong"),Avo=o("maskformer"),Lvo=o(" \u2014 "),$q=a("a"),yvo=o("MaskFormerFeatureExtractor"),xvo=o(" (MaskFormer model)"),$vo=l(),tu=a("li"),Gde=a("strong"),kvo=o("mctct"),Svo=o(" \u2014 "),kq=a("a"),Rvo=o("MCTCTFeatureExtractor"),Pvo=o(" (M-CTC-T model)"),Bvo=l(),au=a("li"),Ode=a("strong"),Ivo=o("mobilevit"),Nvo=o(" \u2014 "),Sq=a("a"),qvo=o("MobileViTFeatureExtractor"),jvo=o(" (MobileViT model)"),Dvo=l(),nu=a("li"),Vde=a("strong"),Gvo=o("owlvit"),Ovo=o(" \u2014 "),Rq=a("a"),Vvo=o("OwlViTFeatureExtractor"),Xvo=o(" (OWL-ViT model)"),zvo=l(),su=a("li"),Xde=a("strong"),Wvo=o("perceiver"),Qvo=o(" \u2014 "),Pq=a("a"),Hvo=o("PerceiverFeatureExtractor"),Uvo=o(" (Perceiver model)"),Jvo=l(),lu=a("li"),zde=a("strong"),Yvo=o("poolformer"),Kvo=o(" \u2014 "),Bq=a("a"),Zvo=o("PoolFormerFeatureExtractor"),e1o=o(" (PoolFormer model)"),o1o=l(),iu=a("li"),Wde=a("strong"),r1o=o("regnet"),t1o=o(" \u2014 "),Iq=a("a"),a1o=o("ConvNextFeatureExtractor"),n1o=o(" (RegNet model)"),s1o=l(),du=a("li"),Qde=a("strong"),l1o=o("resnet"),i1o=o(" \u2014 "),Nq=a("a"),d1o=o("ConvNextFeatureExtractor"),c1o=o(" (ResNet model)"),m1o=l(),cu=a("li"),Hde=a("strong"),f1o=o("segformer"),g1o=o(" \u2014 "),qq=a("a"),h1o=o("SegformerFeatureExtractor"),u1o=o(" (SegFormer model)"),p1o=l(),mu=a("li"),Ude=a("strong"),_1o=o("speech_to_text"),b1o=o(" \u2014 "),jq=a("a"),v1o=o("Speech2TextFeatureExtractor"),F1o=o(" (Speech2Text model)"),T1o=l(),fu=a("li"),Jde=a("strong"),M1o=o("swin"),E1o=o(" \u2014 "),Dq=a("a"),C1o=o("ViTFeatureExtractor"),w1o=o(" (Swin Transformer model)"),A1o=l(),gu=a("li"),Yde=a("strong"),L1o=o("van"),y1o=o(" \u2014 "),Gq=a("a"),x1o=o("ConvNextFeatureExtractor"),$1o=o(" (VAN model)"),k1o=l(),hu=a("li"),Kde=a("strong"),S1o=o("vilt"),R1o=o(" \u2014 "),Oq=a("a"),P1o=o("ViltFeatureExtractor"),B1o=o(" (ViLT model)"),I1o=l(),uu=a("li"),Zde=a("strong"),N1o=o("vit"),q1o=o(" \u2014 "),Vq=a("a"),j1o=o("ViTFeatureExtractor"),D1o=o(" (ViT model)"),G1o=l(),pu=a("li"),ece=a("strong"),O1o=o("vit_mae"),V1o=o(" \u2014 "),Xq=a("a"),X1o=o("ViTFeatureExtractor"),z1o=o(" (ViTMAE model)"),W1o=l(),_u=a("li"),oce=a("strong"),Q1o=o("wav2vec2"),H1o=o(" \u2014 "),zq=a("a"),U1o=o("Wav2Vec2FeatureExtractor"),J1o=o(" (Wav2Vec2 model)"),Y1o=l(),bu=a("li"),rce=a("strong"),K1o=o("wav2vec2-conformer"),Z1o=o(" \u2014 "),Wq=a("a"),eFo=o("Wav2Vec2FeatureExtractor"),oFo=o(" (Wav2Vec2-Conformer model)"),rFo=l(),vu=a("li"),tce=a("strong"),tFo=o("yolos"),aFo=o(" \u2014 "),Qq=a("a"),nFo=o("YolosFeatureExtractor"),sFo=o(" (YOLOS model)"),lFo=l(),F(Fu.$$.fragment),iFo=l(),F(Tu.$$.fragment),dFo=l(),Mu=a("div"),F(Py.$$.fragment),cFo=l(),ace=a("p"),mFo=o("Register a new feature extractor for this class."),eze=l(),Gi=a("h2"),Eu=a("a"),nce=a("span"),F(By.$$.fragment),fFo=l(),sce=a("span"),gFo=o("AutoProcessor"),oze=l(),$o=a("div"),F(Iy.$$.fragment),hFo=l(),Ny=a("p"),uFo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Hq=a("a"),pFo=o("AutoProcessor.from_pretrained()"),_Fo=o(" class method."),bFo=l(),qy=a("p"),vFo=o("This class cannot be instantiated directly using "),lce=a("code"),FFo=o("__init__()"),TFo=o(" (throws an error)."),MFo=l(),Je=a("div"),F(jy.$$.fragment),EFo=l(),ice=a("p"),CFo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),wFo=l(),Oi=a("p"),AFo=o("The processor class to instantiate is selected based on the "),dce=a("code"),LFo=o("model_type"),yFo=o(` property of the config object (either
passed as an argument or loaded from `),cce=a("code"),xFo=o("pretrained_model_name_or_path"),$Fo=o(" if possible):"),kFo=l(),me=a("ul"),Cu=a("li"),mce=a("strong"),SFo=o("clip"),RFo=o(" \u2014 "),Uq=a("a"),PFo=o("CLIPProcessor"),BFo=o(" (CLIP model)"),IFo=l(),wu=a("li"),fce=a("strong"),NFo=o("flava"),qFo=o(" \u2014 "),Jq=a("a"),jFo=o("FlavaProcessor"),DFo=o(" (FLAVA model)"),GFo=l(),Au=a("li"),gce=a("strong"),OFo=o("groupvit"),VFo=o(" \u2014 "),Yq=a("a"),XFo=o("CLIPProcessor"),zFo=o(" (GroupViT model)"),WFo=l(),Lu=a("li"),hce=a("strong"),QFo=o("layoutlmv2"),HFo=o(" \u2014 "),Kq=a("a"),UFo=o("LayoutLMv2Processor"),JFo=o(" (LayoutLMv2 model)"),YFo=l(),yu=a("li"),uce=a("strong"),KFo=o("layoutlmv3"),ZFo=o(" \u2014 "),Zq=a("a"),eTo=o("LayoutLMv3Processor"),oTo=o(" (LayoutLMv3 model)"),rTo=l(),xu=a("li"),pce=a("strong"),tTo=o("layoutxlm"),aTo=o(" \u2014 "),ej=a("a"),nTo=o("LayoutXLMProcessor"),sTo=o(" (LayoutXLM model)"),lTo=l(),$u=a("li"),_ce=a("strong"),iTo=o("owlvit"),dTo=o(" \u2014 "),oj=a("a"),cTo=o("OwlViTProcessor"),mTo=o(" (OWL-ViT model)"),fTo=l(),ku=a("li"),bce=a("strong"),gTo=o("sew"),hTo=o(" \u2014 "),rj=a("a"),uTo=o("Wav2Vec2Processor"),pTo=o(" (SEW model)"),_To=l(),Su=a("li"),vce=a("strong"),bTo=o("sew-d"),vTo=o(" \u2014 "),tj=a("a"),FTo=o("Wav2Vec2Processor"),TTo=o(" (SEW-D model)"),MTo=l(),Ru=a("li"),Fce=a("strong"),ETo=o("speech_to_text"),CTo=o(" \u2014 "),aj=a("a"),wTo=o("Speech2TextProcessor"),ATo=o(" (Speech2Text model)"),LTo=l(),Pu=a("li"),Tce=a("strong"),yTo=o("speech_to_text_2"),xTo=o(" \u2014 "),nj=a("a"),$To=o("Speech2Text2Processor"),kTo=o(" (Speech2Text2 model)"),STo=l(),Bu=a("li"),Mce=a("strong"),RTo=o("trocr"),PTo=o(" \u2014 "),sj=a("a"),BTo=o("TrOCRProcessor"),ITo=o(" (TrOCR model)"),NTo=l(),Iu=a("li"),Ece=a("strong"),qTo=o("unispeech"),jTo=o(" \u2014 "),lj=a("a"),DTo=o("Wav2Vec2Processor"),GTo=o(" (UniSpeech model)"),OTo=l(),Nu=a("li"),Cce=a("strong"),VTo=o("unispeech-sat"),XTo=o(" \u2014 "),ij=a("a"),zTo=o("Wav2Vec2Processor"),WTo=o(" (UniSpeechSat model)"),QTo=l(),qu=a("li"),wce=a("strong"),HTo=o("vilt"),UTo=o(" \u2014 "),dj=a("a"),JTo=o("ViltProcessor"),YTo=o(" (ViLT model)"),KTo=l(),ju=a("li"),Ace=a("strong"),ZTo=o("vision-text-dual-encoder"),eMo=o(" \u2014 "),cj=a("a"),oMo=o("VisionTextDualEncoderProcessor"),rMo=o(" (VisionTextDualEncoder model)"),tMo=l(),Du=a("li"),Lce=a("strong"),aMo=o("wav2vec2"),nMo=o(" \u2014 "),mj=a("a"),sMo=o("Wav2Vec2Processor"),lMo=o(" (Wav2Vec2 model)"),iMo=l(),Gu=a("li"),yce=a("strong"),dMo=o("wav2vec2-conformer"),cMo=o(" \u2014 "),fj=a("a"),mMo=o("Wav2Vec2Processor"),fMo=o(" (Wav2Vec2-Conformer model)"),gMo=l(),Ou=a("li"),xce=a("strong"),hMo=o("wavlm"),uMo=o(" \u2014 "),gj=a("a"),pMo=o("Wav2Vec2Processor"),_Mo=o(" (WavLM model)"),bMo=l(),F(Vu.$$.fragment),vMo=l(),F(Xu.$$.fragment),FMo=l(),zu=a("div"),F(Dy.$$.fragment),TMo=l(),$ce=a("p"),MMo=o("Register a new processor for this class."),rze=l(),Vi=a("h2"),Wu=a("a"),kce=a("span"),F(Gy.$$.fragment),EMo=l(),Sce=a("span"),CMo=o("AutoModel"),tze=l(),ko=a("div"),F(Oy.$$.fragment),wMo=l(),Xi=a("p"),AMo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hj=a("a"),LMo=o("from_pretrained()"),yMo=o(" class method or the "),uj=a("a"),xMo=o("from_config()"),$Mo=o(` class
method.`),kMo=l(),Vy=a("p"),SMo=o("This class cannot be instantiated directly using "),Rce=a("code"),RMo=o("__init__()"),PMo=o(" (throws an error)."),BMo=l(),it=a("div"),F(Xy.$$.fragment),IMo=l(),Pce=a("p"),NMo=o("Instantiates one of the base model classes of the library from a configuration."),qMo=l(),zi=a("p"),jMo=o(`Note:
Loading a model from its configuration file does `),Bce=a("strong"),DMo=o("not"),GMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pj=a("a"),OMo=o("from_pretrained()"),VMo=o(" to load the model weights."),XMo=l(),F(Qu.$$.fragment),zMo=l(),Ye=a("div"),F(zy.$$.fragment),WMo=l(),Ice=a("p"),QMo=o("Instantiate one of the base model classes of the library from a pretrained model."),HMo=l(),Ia=a("p"),UMo=o("The model class to instantiate is selected based on the "),Nce=a("code"),JMo=o("model_type"),YMo=o(` property of the config object (either
passed as an argument or loaded from `),qce=a("code"),KMo=o("pretrained_model_name_or_path"),ZMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=a("code"),e4o=o("pretrained_model_name_or_path"),o4o=o(":"),r4o=l(),y=a("ul"),Hu=a("li"),Dce=a("strong"),t4o=o("albert"),a4o=o(" \u2014 "),_j=a("a"),n4o=o("AlbertModel"),s4o=o(" (ALBERT model)"),l4o=l(),Uu=a("li"),Gce=a("strong"),i4o=o("bart"),d4o=o(" \u2014 "),bj=a("a"),c4o=o("BartModel"),m4o=o(" (BART model)"),f4o=l(),Ju=a("li"),Oce=a("strong"),g4o=o("beit"),h4o=o(" \u2014 "),vj=a("a"),u4o=o("BeitModel"),p4o=o(" (BEiT model)"),_4o=l(),Yu=a("li"),Vce=a("strong"),b4o=o("bert"),v4o=o(" \u2014 "),Fj=a("a"),F4o=o("BertModel"),T4o=o(" (BERT model)"),M4o=l(),Ku=a("li"),Xce=a("strong"),E4o=o("bert-generation"),C4o=o(" \u2014 "),Tj=a("a"),w4o=o("BertGenerationEncoder"),A4o=o(" (Bert Generation model)"),L4o=l(),Zu=a("li"),zce=a("strong"),y4o=o("big_bird"),x4o=o(" \u2014 "),Mj=a("a"),$4o=o("BigBirdModel"),k4o=o(" (BigBird model)"),S4o=l(),ep=a("li"),Wce=a("strong"),R4o=o("bigbird_pegasus"),P4o=o(" \u2014 "),Ej=a("a"),B4o=o("BigBirdPegasusModel"),I4o=o(" (BigBird-Pegasus model)"),N4o=l(),op=a("li"),Qce=a("strong"),q4o=o("blenderbot"),j4o=o(" \u2014 "),Cj=a("a"),D4o=o("BlenderbotModel"),G4o=o(" (Blenderbot model)"),O4o=l(),rp=a("li"),Hce=a("strong"),V4o=o("blenderbot-small"),X4o=o(" \u2014 "),wj=a("a"),z4o=o("BlenderbotSmallModel"),W4o=o(" (BlenderbotSmall model)"),Q4o=l(),tp=a("li"),Uce=a("strong"),H4o=o("bloom"),U4o=o(" \u2014 "),Aj=a("a"),J4o=o("BloomModel"),Y4o=o(" (BLOOM model)"),K4o=l(),ap=a("li"),Jce=a("strong"),Z4o=o("camembert"),eEo=o(" \u2014 "),Lj=a("a"),oEo=o("CamembertModel"),rEo=o(" (CamemBERT model)"),tEo=l(),np=a("li"),Yce=a("strong"),aEo=o("canine"),nEo=o(" \u2014 "),yj=a("a"),sEo=o("CanineModel"),lEo=o(" (CANINE model)"),iEo=l(),sp=a("li"),Kce=a("strong"),dEo=o("clip"),cEo=o(" \u2014 "),xj=a("a"),mEo=o("CLIPModel"),fEo=o(" (CLIP model)"),gEo=l(),lp=a("li"),Zce=a("strong"),hEo=o("codegen"),uEo=o(" \u2014 "),$j=a("a"),pEo=o("CodeGenModel"),_Eo=o(" (CodeGen model)"),bEo=l(),ip=a("li"),eme=a("strong"),vEo=o("convbert"),FEo=o(" \u2014 "),kj=a("a"),TEo=o("ConvBertModel"),MEo=o(" (ConvBERT model)"),EEo=l(),dp=a("li"),ome=a("strong"),CEo=o("convnext"),wEo=o(" \u2014 "),Sj=a("a"),AEo=o("ConvNextModel"),LEo=o(" (ConvNeXT model)"),yEo=l(),cp=a("li"),rme=a("strong"),xEo=o("ctrl"),$Eo=o(" \u2014 "),Rj=a("a"),kEo=o("CTRLModel"),SEo=o(" (CTRL model)"),REo=l(),mp=a("li"),tme=a("strong"),PEo=o("cvt"),BEo=o(" \u2014 "),Pj=a("a"),IEo=o("CvtModel"),NEo=o(" (CvT model)"),qEo=l(),fp=a("li"),ame=a("strong"),jEo=o("data2vec-audio"),DEo=o(" \u2014 "),Bj=a("a"),GEo=o("Data2VecAudioModel"),OEo=o(" (Data2VecAudio model)"),VEo=l(),gp=a("li"),nme=a("strong"),XEo=o("data2vec-text"),zEo=o(" \u2014 "),Ij=a("a"),WEo=o("Data2VecTextModel"),QEo=o(" (Data2VecText model)"),HEo=l(),hp=a("li"),sme=a("strong"),UEo=o("data2vec-vision"),JEo=o(" \u2014 "),Nj=a("a"),YEo=o("Data2VecVisionModel"),KEo=o(" (Data2VecVision model)"),ZEo=l(),up=a("li"),lme=a("strong"),eCo=o("deberta"),oCo=o(" \u2014 "),qj=a("a"),rCo=o("DebertaModel"),tCo=o(" (DeBERTa model)"),aCo=l(),pp=a("li"),ime=a("strong"),nCo=o("deberta-v2"),sCo=o(" \u2014 "),jj=a("a"),lCo=o("DebertaV2Model"),iCo=o(" (DeBERTa-v2 model)"),dCo=l(),_p=a("li"),dme=a("strong"),cCo=o("decision_transformer"),mCo=o(" \u2014 "),Dj=a("a"),fCo=o("DecisionTransformerModel"),gCo=o(" (Decision Transformer model)"),hCo=l(),bp=a("li"),cme=a("strong"),uCo=o("deit"),pCo=o(" \u2014 "),Gj=a("a"),_Co=o("DeiTModel"),bCo=o(" (DeiT model)"),vCo=l(),vp=a("li"),mme=a("strong"),FCo=o("detr"),TCo=o(" \u2014 "),Oj=a("a"),MCo=o("DetrModel"),ECo=o(" (DETR model)"),CCo=l(),Fp=a("li"),fme=a("strong"),wCo=o("distilbert"),ACo=o(" \u2014 "),Vj=a("a"),LCo=o("DistilBertModel"),yCo=o(" (DistilBERT model)"),xCo=l(),Tp=a("li"),gme=a("strong"),$Co=o("dpr"),kCo=o(" \u2014 "),Xj=a("a"),SCo=o("DPRQuestionEncoder"),RCo=o(" (DPR model)"),PCo=l(),Mp=a("li"),hme=a("strong"),BCo=o("dpt"),ICo=o(" \u2014 "),zj=a("a"),NCo=o("DPTModel"),qCo=o(" (DPT model)"),jCo=l(),Ep=a("li"),ume=a("strong"),DCo=o("electra"),GCo=o(" \u2014 "),Wj=a("a"),OCo=o("ElectraModel"),VCo=o(" (ELECTRA model)"),XCo=l(),Cp=a("li"),pme=a("strong"),zCo=o("flaubert"),WCo=o(" \u2014 "),Qj=a("a"),QCo=o("FlaubertModel"),HCo=o(" (FlauBERT model)"),UCo=l(),wp=a("li"),_me=a("strong"),JCo=o("flava"),YCo=o(" \u2014 "),Hj=a("a"),KCo=o("FlavaModel"),ZCo=o(" (FLAVA model)"),e5o=l(),Ap=a("li"),bme=a("strong"),o5o=o("fnet"),r5o=o(" \u2014 "),Uj=a("a"),t5o=o("FNetModel"),a5o=o(" (FNet model)"),n5o=l(),Lp=a("li"),vme=a("strong"),s5o=o("fsmt"),l5o=o(" \u2014 "),Jj=a("a"),i5o=o("FSMTModel"),d5o=o(" (FairSeq Machine-Translation model)"),c5o=l(),Us=a("li"),Fme=a("strong"),m5o=o("funnel"),f5o=o(" \u2014 "),Yj=a("a"),g5o=o("FunnelModel"),h5o=o(" or "),Kj=a("a"),u5o=o("FunnelBaseModel"),p5o=o(" (Funnel Transformer model)"),_5o=l(),yp=a("li"),Tme=a("strong"),b5o=o("glpn"),v5o=o(" \u2014 "),Zj=a("a"),F5o=o("GLPNModel"),T5o=o(" (GLPN model)"),M5o=l(),xp=a("li"),Mme=a("strong"),E5o=o("gpt2"),C5o=o(" \u2014 "),eD=a("a"),w5o=o("GPT2Model"),A5o=o(" (OpenAI GPT-2 model)"),L5o=l(),$p=a("li"),Eme=a("strong"),y5o=o("gpt_neo"),x5o=o(" \u2014 "),oD=a("a"),$5o=o("GPTNeoModel"),k5o=o(" (GPT Neo model)"),S5o=l(),kp=a("li"),Cme=a("strong"),R5o=o("gpt_neox"),P5o=o(" \u2014 "),rD=a("a"),B5o=o("GPTNeoXModel"),I5o=o(" (GPT NeoX model)"),N5o=l(),Sp=a("li"),wme=a("strong"),q5o=o("gptj"),j5o=o(" \u2014 "),tD=a("a"),D5o=o("GPTJModel"),G5o=o(" (GPT-J model)"),O5o=l(),Rp=a("li"),Ame=a("strong"),V5o=o("groupvit"),X5o=o(" \u2014 "),aD=a("a"),z5o=o("GroupViTModel"),W5o=o(" (GroupViT model)"),Q5o=l(),Pp=a("li"),Lme=a("strong"),H5o=o("hubert"),U5o=o(" \u2014 "),nD=a("a"),J5o=o("HubertModel"),Y5o=o(" (Hubert model)"),K5o=l(),Bp=a("li"),yme=a("strong"),Z5o=o("ibert"),e3o=o(" \u2014 "),sD=a("a"),o3o=o("IBertModel"),r3o=o(" (I-BERT model)"),t3o=l(),Ip=a("li"),xme=a("strong"),a3o=o("imagegpt"),n3o=o(" \u2014 "),lD=a("a"),s3o=o("ImageGPTModel"),l3o=o(" (ImageGPT model)"),i3o=l(),Np=a("li"),$me=a("strong"),d3o=o("layoutlm"),c3o=o(" \u2014 "),iD=a("a"),m3o=o("LayoutLMModel"),f3o=o(" (LayoutLM model)"),g3o=l(),qp=a("li"),kme=a("strong"),h3o=o("layoutlmv2"),u3o=o(" \u2014 "),dD=a("a"),p3o=o("LayoutLMv2Model"),_3o=o(" (LayoutLMv2 model)"),b3o=l(),jp=a("li"),Sme=a("strong"),v3o=o("layoutlmv3"),F3o=o(" \u2014 "),cD=a("a"),T3o=o("LayoutLMv3Model"),M3o=o(" (LayoutLMv3 model)"),E3o=l(),Dp=a("li"),Rme=a("strong"),C3o=o("led"),w3o=o(" \u2014 "),mD=a("a"),A3o=o("LEDModel"),L3o=o(" (LED model)"),y3o=l(),Gp=a("li"),Pme=a("strong"),x3o=o("levit"),$3o=o(" \u2014 "),fD=a("a"),k3o=o("LevitModel"),S3o=o(" (LeViT model)"),R3o=l(),Op=a("li"),Bme=a("strong"),P3o=o("longformer"),B3o=o(" \u2014 "),gD=a("a"),I3o=o("LongformerModel"),N3o=o(" (Longformer model)"),q3o=l(),Vp=a("li"),Ime=a("strong"),j3o=o("longt5"),D3o=o(" \u2014 "),hD=a("a"),G3o=o("LongT5Model"),O3o=o(" (LongT5 model)"),V3o=l(),Xp=a("li"),Nme=a("strong"),X3o=o("luke"),z3o=o(" \u2014 "),uD=a("a"),W3o=o("LukeModel"),Q3o=o(" (LUKE model)"),H3o=l(),zp=a("li"),qme=a("strong"),U3o=o("lxmert"),J3o=o(" \u2014 "),pD=a("a"),Y3o=o("LxmertModel"),K3o=o(" (LXMERT model)"),Z3o=l(),Wp=a("li"),jme=a("strong"),e0o=o("m2m_100"),o0o=o(" \u2014 "),_D=a("a"),r0o=o("M2M100Model"),t0o=o(" (M2M100 model)"),a0o=l(),Qp=a("li"),Dme=a("strong"),n0o=o("marian"),s0o=o(" \u2014 "),bD=a("a"),l0o=o("MarianModel"),i0o=o(" (Marian model)"),d0o=l(),Hp=a("li"),Gme=a("strong"),c0o=o("maskformer"),m0o=o(" \u2014 "),vD=a("a"),f0o=o("MaskFormerModel"),g0o=o(" (MaskFormer model)"),h0o=l(),Up=a("li"),Ome=a("strong"),u0o=o("mbart"),p0o=o(" \u2014 "),FD=a("a"),_0o=o("MBartModel"),b0o=o(" (mBART model)"),v0o=l(),Jp=a("li"),Vme=a("strong"),F0o=o("mctct"),T0o=o(" \u2014 "),TD=a("a"),M0o=o("MCTCTModel"),E0o=o(" (M-CTC-T model)"),C0o=l(),Yp=a("li"),Xme=a("strong"),w0o=o("megatron-bert"),A0o=o(" \u2014 "),MD=a("a"),L0o=o("MegatronBertModel"),y0o=o(" (Megatron-BERT model)"),x0o=l(),Kp=a("li"),zme=a("strong"),$0o=o("mobilebert"),k0o=o(" \u2014 "),ED=a("a"),S0o=o("MobileBertModel"),R0o=o(" (MobileBERT model)"),P0o=l(),Zp=a("li"),Wme=a("strong"),B0o=o("mobilevit"),I0o=o(" \u2014 "),CD=a("a"),N0o=o("MobileViTModel"),q0o=o(" (MobileViT model)"),j0o=l(),e_=a("li"),Qme=a("strong"),D0o=o("mpnet"),G0o=o(" \u2014 "),wD=a("a"),O0o=o("MPNetModel"),V0o=o(" (MPNet model)"),X0o=l(),o_=a("li"),Hme=a("strong"),z0o=o("mt5"),W0o=o(" \u2014 "),AD=a("a"),Q0o=o("MT5Model"),H0o=o(" (MT5 model)"),U0o=l(),r_=a("li"),Ume=a("strong"),J0o=o("mvp"),Y0o=o(" \u2014 "),LD=a("a"),K0o=o("MvpModel"),Z0o=o(" (MVP model)"),ewo=l(),t_=a("li"),Jme=a("strong"),owo=o("nezha"),rwo=o(" \u2014 "),yD=a("a"),two=o("NezhaModel"),awo=o(" (Nezha model)"),nwo=l(),a_=a("li"),Yme=a("strong"),swo=o("nllb"),lwo=o(" \u2014 "),xD=a("a"),iwo=o("M2M100Model"),dwo=o(" (NLLB model)"),cwo=l(),n_=a("li"),Kme=a("strong"),mwo=o("nystromformer"),fwo=o(" \u2014 "),$D=a("a"),gwo=o("NystromformerModel"),hwo=o(" (Nystr\xF6mformer model)"),uwo=l(),s_=a("li"),Zme=a("strong"),pwo=o("openai-gpt"),_wo=o(" \u2014 "),kD=a("a"),bwo=o("OpenAIGPTModel"),vwo=o(" (OpenAI GPT model)"),Fwo=l(),l_=a("li"),efe=a("strong"),Two=o("opt"),Mwo=o(" \u2014 "),SD=a("a"),Ewo=o("OPTModel"),Cwo=o(" (OPT model)"),wwo=l(),i_=a("li"),ofe=a("strong"),Awo=o("owlvit"),Lwo=o(" \u2014 "),RD=a("a"),ywo=o("OwlViTModel"),xwo=o(" (OWL-ViT model)"),$wo=l(),d_=a("li"),rfe=a("strong"),kwo=o("pegasus"),Swo=o(" \u2014 "),PD=a("a"),Rwo=o("PegasusModel"),Pwo=o(" (Pegasus model)"),Bwo=l(),c_=a("li"),tfe=a("strong"),Iwo=o("perceiver"),Nwo=o(" \u2014 "),BD=a("a"),qwo=o("PerceiverModel"),jwo=o(" (Perceiver model)"),Dwo=l(),m_=a("li"),afe=a("strong"),Gwo=o("plbart"),Owo=o(" \u2014 "),ID=a("a"),Vwo=o("PLBartModel"),Xwo=o(" (PLBart model)"),zwo=l(),f_=a("li"),nfe=a("strong"),Wwo=o("poolformer"),Qwo=o(" \u2014 "),ND=a("a"),Hwo=o("PoolFormerModel"),Uwo=o(" (PoolFormer model)"),Jwo=l(),g_=a("li"),sfe=a("strong"),Ywo=o("prophetnet"),Kwo=o(" \u2014 "),qD=a("a"),Zwo=o("ProphetNetModel"),eAo=o(" (ProphetNet model)"),oAo=l(),h_=a("li"),lfe=a("strong"),rAo=o("qdqbert"),tAo=o(" \u2014 "),jD=a("a"),aAo=o("QDQBertModel"),nAo=o(" (QDQBert model)"),sAo=l(),u_=a("li"),ife=a("strong"),lAo=o("reformer"),iAo=o(" \u2014 "),DD=a("a"),dAo=o("ReformerModel"),cAo=o(" (Reformer model)"),mAo=l(),p_=a("li"),dfe=a("strong"),fAo=o("regnet"),gAo=o(" \u2014 "),GD=a("a"),hAo=o("RegNetModel"),uAo=o(" (RegNet model)"),pAo=l(),__=a("li"),cfe=a("strong"),_Ao=o("rembert"),bAo=o(" \u2014 "),OD=a("a"),vAo=o("RemBertModel"),FAo=o(" (RemBERT model)"),TAo=l(),b_=a("li"),mfe=a("strong"),MAo=o("resnet"),EAo=o(" \u2014 "),VD=a("a"),CAo=o("ResNetModel"),wAo=o(" (ResNet model)"),AAo=l(),v_=a("li"),ffe=a("strong"),LAo=o("retribert"),yAo=o(" \u2014 "),XD=a("a"),xAo=o("RetriBertModel"),$Ao=o(" (RetriBERT model)"),kAo=l(),F_=a("li"),gfe=a("strong"),SAo=o("roberta"),RAo=o(" \u2014 "),zD=a("a"),PAo=o("RobertaModel"),BAo=o(" (RoBERTa model)"),IAo=l(),T_=a("li"),hfe=a("strong"),NAo=o("roformer"),qAo=o(" \u2014 "),WD=a("a"),jAo=o("RoFormerModel"),DAo=o(" (RoFormer model)"),GAo=l(),M_=a("li"),ufe=a("strong"),OAo=o("segformer"),VAo=o(" \u2014 "),QD=a("a"),XAo=o("SegformerModel"),zAo=o(" (SegFormer model)"),WAo=l(),E_=a("li"),pfe=a("strong"),QAo=o("sew"),HAo=o(" \u2014 "),HD=a("a"),UAo=o("SEWModel"),JAo=o(" (SEW model)"),YAo=l(),C_=a("li"),_fe=a("strong"),KAo=o("sew-d"),ZAo=o(" \u2014 "),UD=a("a"),e6o=o("SEWDModel"),o6o=o(" (SEW-D model)"),r6o=l(),w_=a("li"),bfe=a("strong"),t6o=o("speech_to_text"),a6o=o(" \u2014 "),JD=a("a"),n6o=o("Speech2TextModel"),s6o=o(" (Speech2Text model)"),l6o=l(),A_=a("li"),vfe=a("strong"),i6o=o("splinter"),d6o=o(" \u2014 "),YD=a("a"),c6o=o("SplinterModel"),m6o=o(" (Splinter model)"),f6o=l(),L_=a("li"),Ffe=a("strong"),g6o=o("squeezebert"),h6o=o(" \u2014 "),KD=a("a"),u6o=o("SqueezeBertModel"),p6o=o(" (SqueezeBERT model)"),_6o=l(),y_=a("li"),Tfe=a("strong"),b6o=o("swin"),v6o=o(" \u2014 "),ZD=a("a"),F6o=o("SwinModel"),T6o=o(" (Swin Transformer model)"),M6o=l(),x_=a("li"),Mfe=a("strong"),E6o=o("t5"),C6o=o(" \u2014 "),eG=a("a"),w6o=o("T5Model"),A6o=o(" (T5 model)"),L6o=l(),$_=a("li"),Efe=a("strong"),y6o=o("tapas"),x6o=o(" \u2014 "),oG=a("a"),$6o=o("TapasModel"),k6o=o(" (TAPAS model)"),S6o=l(),k_=a("li"),Cfe=a("strong"),R6o=o("trajectory_transformer"),P6o=o(" \u2014 "),rG=a("a"),B6o=o("TrajectoryTransformerModel"),I6o=o(" (Trajectory Transformer model)"),N6o=l(),S_=a("li"),wfe=a("strong"),q6o=o("transfo-xl"),j6o=o(" \u2014 "),tG=a("a"),D6o=o("TransfoXLModel"),G6o=o(" (Transformer-XL model)"),O6o=l(),R_=a("li"),Afe=a("strong"),V6o=o("unispeech"),X6o=o(" \u2014 "),aG=a("a"),z6o=o("UniSpeechModel"),W6o=o(" (UniSpeech model)"),Q6o=l(),P_=a("li"),Lfe=a("strong"),H6o=o("unispeech-sat"),U6o=o(" \u2014 "),nG=a("a"),J6o=o("UniSpeechSatModel"),Y6o=o(" (UniSpeechSat model)"),K6o=l(),B_=a("li"),yfe=a("strong"),Z6o=o("van"),e7o=o(" \u2014 "),sG=a("a"),o7o=o("VanModel"),r7o=o(" (VAN model)"),t7o=l(),I_=a("li"),xfe=a("strong"),a7o=o("vilt"),n7o=o(" \u2014 "),lG=a("a"),s7o=o("ViltModel"),l7o=o(" (ViLT model)"),i7o=l(),N_=a("li"),$fe=a("strong"),d7o=o("vision-text-dual-encoder"),c7o=o(" \u2014 "),iG=a("a"),m7o=o("VisionTextDualEncoderModel"),f7o=o(" (VisionTextDualEncoder model)"),g7o=l(),q_=a("li"),kfe=a("strong"),h7o=o("visual_bert"),u7o=o(" \u2014 "),dG=a("a"),p7o=o("VisualBertModel"),_7o=o(" (VisualBERT model)"),b7o=l(),j_=a("li"),Sfe=a("strong"),v7o=o("vit"),F7o=o(" \u2014 "),cG=a("a"),T7o=o("ViTModel"),M7o=o(" (ViT model)"),E7o=l(),D_=a("li"),Rfe=a("strong"),C7o=o("vit_mae"),w7o=o(" \u2014 "),mG=a("a"),A7o=o("ViTMAEModel"),L7o=o(" (ViTMAE model)"),y7o=l(),G_=a("li"),Pfe=a("strong"),x7o=o("wav2vec2"),$7o=o(" \u2014 "),fG=a("a"),k7o=o("Wav2Vec2Model"),S7o=o(" (Wav2Vec2 model)"),R7o=l(),O_=a("li"),Bfe=a("strong"),P7o=o("wav2vec2-conformer"),B7o=o(" \u2014 "),gG=a("a"),I7o=o("Wav2Vec2ConformerModel"),N7o=o(" (Wav2Vec2-Conformer model)"),q7o=l(),V_=a("li"),Ife=a("strong"),j7o=o("wavlm"),D7o=o(" \u2014 "),hG=a("a"),G7o=o("WavLMModel"),O7o=o(" (WavLM model)"),V7o=l(),X_=a("li"),Nfe=a("strong"),X7o=o("xglm"),z7o=o(" \u2014 "),uG=a("a"),W7o=o("XGLMModel"),Q7o=o(" (XGLM model)"),H7o=l(),z_=a("li"),qfe=a("strong"),U7o=o("xlm"),J7o=o(" \u2014 "),pG=a("a"),Y7o=o("XLMModel"),K7o=o(" (XLM model)"),Z7o=l(),W_=a("li"),jfe=a("strong"),eLo=o("xlm-prophetnet"),oLo=o(" \u2014 "),_G=a("a"),rLo=o("XLMProphetNetModel"),tLo=o(" (XLM-ProphetNet model)"),aLo=l(),Q_=a("li"),Dfe=a("strong"),nLo=o("xlm-roberta"),sLo=o(" \u2014 "),bG=a("a"),lLo=o("XLMRobertaModel"),iLo=o(" (XLM-RoBERTa model)"),dLo=l(),H_=a("li"),Gfe=a("strong"),cLo=o("xlm-roberta-xl"),mLo=o(" \u2014 "),vG=a("a"),fLo=o("XLMRobertaXLModel"),gLo=o(" (XLM-RoBERTa-XL model)"),hLo=l(),U_=a("li"),Ofe=a("strong"),uLo=o("xlnet"),pLo=o(" \u2014 "),FG=a("a"),_Lo=o("XLNetModel"),bLo=o(" (XLNet model)"),vLo=l(),J_=a("li"),Vfe=a("strong"),FLo=o("yolos"),TLo=o(" \u2014 "),TG=a("a"),MLo=o("YolosModel"),ELo=o(" (YOLOS model)"),CLo=l(),Y_=a("li"),Xfe=a("strong"),wLo=o("yoso"),ALo=o(" \u2014 "),MG=a("a"),LLo=o("YosoModel"),yLo=o(" (YOSO model)"),xLo=l(),K_=a("p"),$Lo=o("The model is set in evaluation mode by default using "),zfe=a("code"),kLo=o("model.eval()"),SLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=a("code"),RLo=o("model.train()"),PLo=l(),F(Z_.$$.fragment),aze=l(),Wi=a("h2"),e2=a("a"),Qfe=a("span"),F(Wy.$$.fragment),BLo=l(),Hfe=a("span"),ILo=o("AutoModelForPreTraining"),nze=l(),So=a("div"),F(Qy.$$.fragment),NLo=l(),Qi=a("p"),qLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EG=a("a"),jLo=o("from_pretrained()"),DLo=o(" class method or the "),CG=a("a"),GLo=o("from_config()"),OLo=o(` class
method.`),VLo=l(),Hy=a("p"),XLo=o("This class cannot be instantiated directly using "),Ufe=a("code"),zLo=o("__init__()"),WLo=o(" (throws an error)."),QLo=l(),dt=a("div"),F(Uy.$$.fragment),HLo=l(),Jfe=a("p"),ULo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),JLo=l(),Hi=a("p"),YLo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),KLo=o("not"),ZLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=a("a"),eyo=o("from_pretrained()"),oyo=o(" to load the model weights."),ryo=l(),F(o2.$$.fragment),tyo=l(),Ke=a("div"),F(Jy.$$.fragment),ayo=l(),Kfe=a("p"),nyo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),syo=l(),Na=a("p"),lyo=o("The model class to instantiate is selected based on the "),Zfe=a("code"),iyo=o("model_type"),dyo=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),cyo=o("pretrained_model_name_or_path"),myo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),fyo=o("pretrained_model_name_or_path"),gyo=o(":"),hyo=l(),G=a("ul"),r2=a("li"),rge=a("strong"),uyo=o("albert"),pyo=o(" \u2014 "),AG=a("a"),_yo=o("AlbertForPreTraining"),byo=o(" (ALBERT model)"),vyo=l(),t2=a("li"),tge=a("strong"),Fyo=o("bart"),Tyo=o(" \u2014 "),LG=a("a"),Myo=o("BartForConditionalGeneration"),Eyo=o(" (BART model)"),Cyo=l(),a2=a("li"),age=a("strong"),wyo=o("bert"),Ayo=o(" \u2014 "),yG=a("a"),Lyo=o("BertForPreTraining"),yyo=o(" (BERT model)"),xyo=l(),n2=a("li"),nge=a("strong"),$yo=o("big_bird"),kyo=o(" \u2014 "),xG=a("a"),Syo=o("BigBirdForPreTraining"),Ryo=o(" (BigBird model)"),Pyo=l(),s2=a("li"),sge=a("strong"),Byo=o("bloom"),Iyo=o(" \u2014 "),$G=a("a"),Nyo=o("BloomForCausalLM"),qyo=o(" (BLOOM model)"),jyo=l(),l2=a("li"),lge=a("strong"),Dyo=o("camembert"),Gyo=o(" \u2014 "),kG=a("a"),Oyo=o("CamembertForMaskedLM"),Vyo=o(" (CamemBERT model)"),Xyo=l(),i2=a("li"),ige=a("strong"),zyo=o("ctrl"),Wyo=o(" \u2014 "),SG=a("a"),Qyo=o("CTRLLMHeadModel"),Hyo=o(" (CTRL model)"),Uyo=l(),d2=a("li"),dge=a("strong"),Jyo=o("data2vec-text"),Yyo=o(" \u2014 "),RG=a("a"),Kyo=o("Data2VecTextForMaskedLM"),Zyo=o(" (Data2VecText model)"),e8o=l(),c2=a("li"),cge=a("strong"),o8o=o("deberta"),r8o=o(" \u2014 "),PG=a("a"),t8o=o("DebertaForMaskedLM"),a8o=o(" (DeBERTa model)"),n8o=l(),m2=a("li"),mge=a("strong"),s8o=o("deberta-v2"),l8o=o(" \u2014 "),BG=a("a"),i8o=o("DebertaV2ForMaskedLM"),d8o=o(" (DeBERTa-v2 model)"),c8o=l(),f2=a("li"),fge=a("strong"),m8o=o("distilbert"),f8o=o(" \u2014 "),IG=a("a"),g8o=o("DistilBertForMaskedLM"),h8o=o(" (DistilBERT model)"),u8o=l(),g2=a("li"),gge=a("strong"),p8o=o("electra"),_8o=o(" \u2014 "),NG=a("a"),b8o=o("ElectraForPreTraining"),v8o=o(" (ELECTRA model)"),F8o=l(),h2=a("li"),hge=a("strong"),T8o=o("flaubert"),M8o=o(" \u2014 "),qG=a("a"),E8o=o("FlaubertWithLMHeadModel"),C8o=o(" (FlauBERT model)"),w8o=l(),u2=a("li"),uge=a("strong"),A8o=o("flava"),L8o=o(" \u2014 "),jG=a("a"),y8o=o("FlavaForPreTraining"),x8o=o(" (FLAVA model)"),$8o=l(),p2=a("li"),pge=a("strong"),k8o=o("fnet"),S8o=o(" \u2014 "),DG=a("a"),R8o=o("FNetForPreTraining"),P8o=o(" (FNet model)"),B8o=l(),_2=a("li"),_ge=a("strong"),I8o=o("fsmt"),N8o=o(" \u2014 "),GG=a("a"),q8o=o("FSMTForConditionalGeneration"),j8o=o(" (FairSeq Machine-Translation model)"),D8o=l(),b2=a("li"),bge=a("strong"),G8o=o("funnel"),O8o=o(" \u2014 "),OG=a("a"),V8o=o("FunnelForPreTraining"),X8o=o(" (Funnel Transformer model)"),z8o=l(),v2=a("li"),vge=a("strong"),W8o=o("gpt2"),Q8o=o(" \u2014 "),VG=a("a"),H8o=o("GPT2LMHeadModel"),U8o=o(" (OpenAI GPT-2 model)"),J8o=l(),F2=a("li"),Fge=a("strong"),Y8o=o("ibert"),K8o=o(" \u2014 "),XG=a("a"),Z8o=o("IBertForMaskedLM"),e9o=o(" (I-BERT model)"),o9o=l(),T2=a("li"),Tge=a("strong"),r9o=o("layoutlm"),t9o=o(" \u2014 "),zG=a("a"),a9o=o("LayoutLMForMaskedLM"),n9o=o(" (LayoutLM model)"),s9o=l(),M2=a("li"),Mge=a("strong"),l9o=o("longformer"),i9o=o(" \u2014 "),WG=a("a"),d9o=o("LongformerForMaskedLM"),c9o=o(" (Longformer model)"),m9o=l(),E2=a("li"),Ege=a("strong"),f9o=o("lxmert"),g9o=o(" \u2014 "),QG=a("a"),h9o=o("LxmertForPreTraining"),u9o=o(" (LXMERT model)"),p9o=l(),C2=a("li"),Cge=a("strong"),_9o=o("megatron-bert"),b9o=o(" \u2014 "),HG=a("a"),v9o=o("MegatronBertForPreTraining"),F9o=o(" (Megatron-BERT model)"),T9o=l(),w2=a("li"),wge=a("strong"),M9o=o("mobilebert"),E9o=o(" \u2014 "),UG=a("a"),C9o=o("MobileBertForPreTraining"),w9o=o(" (MobileBERT model)"),A9o=l(),A2=a("li"),Age=a("strong"),L9o=o("mpnet"),y9o=o(" \u2014 "),JG=a("a"),x9o=o("MPNetForMaskedLM"),$9o=o(" (MPNet model)"),k9o=l(),L2=a("li"),Lge=a("strong"),S9o=o("mvp"),R9o=o(" \u2014 "),YG=a("a"),P9o=o("MvpForConditionalGeneration"),B9o=o(" (MVP model)"),I9o=l(),y2=a("li"),yge=a("strong"),N9o=o("nezha"),q9o=o(" \u2014 "),KG=a("a"),j9o=o("NezhaForPreTraining"),D9o=o(" (Nezha model)"),G9o=l(),x2=a("li"),xge=a("strong"),O9o=o("openai-gpt"),V9o=o(" \u2014 "),ZG=a("a"),X9o=o("OpenAIGPTLMHeadModel"),z9o=o(" (OpenAI GPT model)"),W9o=l(),$2=a("li"),$ge=a("strong"),Q9o=o("retribert"),H9o=o(" \u2014 "),eO=a("a"),U9o=o("RetriBertModel"),J9o=o(" (RetriBERT model)"),Y9o=l(),k2=a("li"),kge=a("strong"),K9o=o("roberta"),Z9o=o(" \u2014 "),oO=a("a"),exo=o("RobertaForMaskedLM"),oxo=o(" (RoBERTa model)"),rxo=l(),S2=a("li"),Sge=a("strong"),txo=o("splinter"),axo=o(" \u2014 "),rO=a("a"),nxo=o("SplinterForPreTraining"),sxo=o(" (Splinter model)"),lxo=l(),R2=a("li"),Rge=a("strong"),ixo=o("squeezebert"),dxo=o(" \u2014 "),tO=a("a"),cxo=o("SqueezeBertForMaskedLM"),mxo=o(" (SqueezeBERT model)"),fxo=l(),P2=a("li"),Pge=a("strong"),gxo=o("t5"),hxo=o(" \u2014 "),aO=a("a"),uxo=o("T5ForConditionalGeneration"),pxo=o(" (T5 model)"),_xo=l(),B2=a("li"),Bge=a("strong"),bxo=o("tapas"),vxo=o(" \u2014 "),nO=a("a"),Fxo=o("TapasForMaskedLM"),Txo=o(" (TAPAS model)"),Mxo=l(),I2=a("li"),Ige=a("strong"),Exo=o("transfo-xl"),Cxo=o(" \u2014 "),sO=a("a"),wxo=o("TransfoXLLMHeadModel"),Axo=o(" (Transformer-XL model)"),Lxo=l(),N2=a("li"),Nge=a("strong"),yxo=o("unispeech"),xxo=o(" \u2014 "),lO=a("a"),$xo=o("UniSpeechForPreTraining"),kxo=o(" (UniSpeech model)"),Sxo=l(),q2=a("li"),qge=a("strong"),Rxo=o("unispeech-sat"),Pxo=o(" \u2014 "),iO=a("a"),Bxo=o("UniSpeechSatForPreTraining"),Ixo=o(" (UniSpeechSat model)"),Nxo=l(),j2=a("li"),jge=a("strong"),qxo=o("visual_bert"),jxo=o(" \u2014 "),dO=a("a"),Dxo=o("VisualBertForPreTraining"),Gxo=o(" (VisualBERT model)"),Oxo=l(),D2=a("li"),Dge=a("strong"),Vxo=o("vit_mae"),Xxo=o(" \u2014 "),cO=a("a"),zxo=o("ViTMAEForPreTraining"),Wxo=o(" (ViTMAE model)"),Qxo=l(),G2=a("li"),Gge=a("strong"),Hxo=o("wav2vec2"),Uxo=o(" \u2014 "),mO=a("a"),Jxo=o("Wav2Vec2ForPreTraining"),Yxo=o(" (Wav2Vec2 model)"),Kxo=l(),O2=a("li"),Oge=a("strong"),Zxo=o("wav2vec2-conformer"),e$o=o(" \u2014 "),fO=a("a"),o$o=o("Wav2Vec2ConformerForPreTraining"),r$o=o(" (Wav2Vec2-Conformer model)"),t$o=l(),V2=a("li"),Vge=a("strong"),a$o=o("xlm"),n$o=o(" \u2014 "),gO=a("a"),s$o=o("XLMWithLMHeadModel"),l$o=o(" (XLM model)"),i$o=l(),X2=a("li"),Xge=a("strong"),d$o=o("xlm-roberta"),c$o=o(" \u2014 "),hO=a("a"),m$o=o("XLMRobertaForMaskedLM"),f$o=o(" (XLM-RoBERTa model)"),g$o=l(),z2=a("li"),zge=a("strong"),h$o=o("xlm-roberta-xl"),u$o=o(" \u2014 "),uO=a("a"),p$o=o("XLMRobertaXLForMaskedLM"),_$o=o(" (XLM-RoBERTa-XL model)"),b$o=l(),W2=a("li"),Wge=a("strong"),v$o=o("xlnet"),F$o=o(" \u2014 "),pO=a("a"),T$o=o("XLNetLMHeadModel"),M$o=o(" (XLNet model)"),E$o=l(),Q2=a("p"),C$o=o("The model is set in evaluation mode by default using "),Qge=a("code"),w$o=o("model.eval()"),A$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=a("code"),L$o=o("model.train()"),y$o=l(),F(H2.$$.fragment),sze=l(),Ui=a("h2"),U2=a("a"),Uge=a("span"),F(Yy.$$.fragment),x$o=l(),Jge=a("span"),$$o=o("AutoModelForCausalLM"),lze=l(),Ro=a("div"),F(Ky.$$.fragment),k$o=l(),Ji=a("p"),S$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_O=a("a"),R$o=o("from_pretrained()"),P$o=o(" class method or the "),bO=a("a"),B$o=o("from_config()"),I$o=o(` class
method.`),N$o=l(),Zy=a("p"),q$o=o("This class cannot be instantiated directly using "),Yge=a("code"),j$o=o("__init__()"),D$o=o(" (throws an error)."),G$o=l(),ct=a("div"),F(e8.$$.fragment),O$o=l(),Kge=a("p"),V$o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),X$o=l(),Yi=a("p"),z$o=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),W$o=o("not"),Q$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=a("a"),H$o=o("from_pretrained()"),U$o=o(" to load the model weights."),J$o=l(),F(J2.$$.fragment),Y$o=l(),Ze=a("div"),F(o8.$$.fragment),K$o=l(),ehe=a("p"),Z$o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),eko=l(),qa=a("p"),oko=o("The model class to instantiate is selected based on the "),ohe=a("code"),rko=o("model_type"),tko=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),ako=o("pretrained_model_name_or_path"),nko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),sko=o("pretrained_model_name_or_path"),lko=o(":"),iko=l(),z=a("ul"),Y2=a("li"),ahe=a("strong"),dko=o("bart"),cko=o(" \u2014 "),FO=a("a"),mko=o("BartForCausalLM"),fko=o(" (BART model)"),gko=l(),K2=a("li"),nhe=a("strong"),hko=o("bert"),uko=o(" \u2014 "),TO=a("a"),pko=o("BertLMHeadModel"),_ko=o(" (BERT model)"),bko=l(),Z2=a("li"),she=a("strong"),vko=o("bert-generation"),Fko=o(" \u2014 "),MO=a("a"),Tko=o("BertGenerationDecoder"),Mko=o(" (Bert Generation model)"),Eko=l(),eb=a("li"),lhe=a("strong"),Cko=o("big_bird"),wko=o(" \u2014 "),EO=a("a"),Ako=o("BigBirdForCausalLM"),Lko=o(" (BigBird model)"),yko=l(),ob=a("li"),ihe=a("strong"),xko=o("bigbird_pegasus"),$ko=o(" \u2014 "),CO=a("a"),kko=o("BigBirdPegasusForCausalLM"),Sko=o(" (BigBird-Pegasus model)"),Rko=l(),rb=a("li"),dhe=a("strong"),Pko=o("blenderbot"),Bko=o(" \u2014 "),wO=a("a"),Iko=o("BlenderbotForCausalLM"),Nko=o(" (Blenderbot model)"),qko=l(),tb=a("li"),che=a("strong"),jko=o("blenderbot-small"),Dko=o(" \u2014 "),AO=a("a"),Gko=o("BlenderbotSmallForCausalLM"),Oko=o(" (BlenderbotSmall model)"),Vko=l(),ab=a("li"),mhe=a("strong"),Xko=o("bloom"),zko=o(" \u2014 "),LO=a("a"),Wko=o("BloomForCausalLM"),Qko=o(" (BLOOM model)"),Hko=l(),nb=a("li"),fhe=a("strong"),Uko=o("camembert"),Jko=o(" \u2014 "),yO=a("a"),Yko=o("CamembertForCausalLM"),Kko=o(" (CamemBERT model)"),Zko=l(),sb=a("li"),ghe=a("strong"),eSo=o("codegen"),oSo=o(" \u2014 "),xO=a("a"),rSo=o("CodeGenForCausalLM"),tSo=o(" (CodeGen model)"),aSo=l(),lb=a("li"),hhe=a("strong"),nSo=o("ctrl"),sSo=o(" \u2014 "),$O=a("a"),lSo=o("CTRLLMHeadModel"),iSo=o(" (CTRL model)"),dSo=l(),ib=a("li"),uhe=a("strong"),cSo=o("data2vec-text"),mSo=o(" \u2014 "),kO=a("a"),fSo=o("Data2VecTextForCausalLM"),gSo=o(" (Data2VecText model)"),hSo=l(),db=a("li"),phe=a("strong"),uSo=o("electra"),pSo=o(" \u2014 "),SO=a("a"),_So=o("ElectraForCausalLM"),bSo=o(" (ELECTRA model)"),vSo=l(),cb=a("li"),_he=a("strong"),FSo=o("gpt2"),TSo=o(" \u2014 "),RO=a("a"),MSo=o("GPT2LMHeadModel"),ESo=o(" (OpenAI GPT-2 model)"),CSo=l(),mb=a("li"),bhe=a("strong"),wSo=o("gpt_neo"),ASo=o(" \u2014 "),PO=a("a"),LSo=o("GPTNeoForCausalLM"),ySo=o(" (GPT Neo model)"),xSo=l(),fb=a("li"),vhe=a("strong"),$So=o("gpt_neox"),kSo=o(" \u2014 "),BO=a("a"),SSo=o("GPTNeoXForCausalLM"),RSo=o(" (GPT NeoX model)"),PSo=l(),gb=a("li"),Fhe=a("strong"),BSo=o("gptj"),ISo=o(" \u2014 "),IO=a("a"),NSo=o("GPTJForCausalLM"),qSo=o(" (GPT-J model)"),jSo=l(),hb=a("li"),The=a("strong"),DSo=o("marian"),GSo=o(" \u2014 "),NO=a("a"),OSo=o("MarianForCausalLM"),VSo=o(" (Marian model)"),XSo=l(),ub=a("li"),Mhe=a("strong"),zSo=o("mbart"),WSo=o(" \u2014 "),qO=a("a"),QSo=o("MBartForCausalLM"),HSo=o(" (mBART model)"),USo=l(),pb=a("li"),Ehe=a("strong"),JSo=o("megatron-bert"),YSo=o(" \u2014 "),jO=a("a"),KSo=o("MegatronBertForCausalLM"),ZSo=o(" (Megatron-BERT model)"),eRo=l(),_b=a("li"),Che=a("strong"),oRo=o("mvp"),rRo=o(" \u2014 "),DO=a("a"),tRo=o("MvpForCausalLM"),aRo=o(" (MVP model)"),nRo=l(),bb=a("li"),whe=a("strong"),sRo=o("openai-gpt"),lRo=o(" \u2014 "),GO=a("a"),iRo=o("OpenAIGPTLMHeadModel"),dRo=o(" (OpenAI GPT model)"),cRo=l(),vb=a("li"),Ahe=a("strong"),mRo=o("opt"),fRo=o(" \u2014 "),OO=a("a"),gRo=o("OPTForCausalLM"),hRo=o(" (OPT model)"),uRo=l(),Fb=a("li"),Lhe=a("strong"),pRo=o("pegasus"),_Ro=o(" \u2014 "),VO=a("a"),bRo=o("PegasusForCausalLM"),vRo=o(" (Pegasus model)"),FRo=l(),Tb=a("li"),yhe=a("strong"),TRo=o("plbart"),MRo=o(" \u2014 "),XO=a("a"),ERo=o("PLBartForCausalLM"),CRo=o(" (PLBart model)"),wRo=l(),Mb=a("li"),xhe=a("strong"),ARo=o("prophetnet"),LRo=o(" \u2014 "),zO=a("a"),yRo=o("ProphetNetForCausalLM"),xRo=o(" (ProphetNet model)"),$Ro=l(),Eb=a("li"),$he=a("strong"),kRo=o("qdqbert"),SRo=o(" \u2014 "),WO=a("a"),RRo=o("QDQBertLMHeadModel"),PRo=o(" (QDQBert model)"),BRo=l(),Cb=a("li"),khe=a("strong"),IRo=o("reformer"),NRo=o(" \u2014 "),QO=a("a"),qRo=o("ReformerModelWithLMHead"),jRo=o(" (Reformer model)"),DRo=l(),wb=a("li"),She=a("strong"),GRo=o("rembert"),ORo=o(" \u2014 "),HO=a("a"),VRo=o("RemBertForCausalLM"),XRo=o(" (RemBERT model)"),zRo=l(),Ab=a("li"),Rhe=a("strong"),WRo=o("roberta"),QRo=o(" \u2014 "),UO=a("a"),HRo=o("RobertaForCausalLM"),URo=o(" (RoBERTa model)"),JRo=l(),Lb=a("li"),Phe=a("strong"),YRo=o("roformer"),KRo=o(" \u2014 "),JO=a("a"),ZRo=o("RoFormerForCausalLM"),ePo=o(" (RoFormer model)"),oPo=l(),yb=a("li"),Bhe=a("strong"),rPo=o("speech_to_text_2"),tPo=o(" \u2014 "),YO=a("a"),aPo=o("Speech2Text2ForCausalLM"),nPo=o(" (Speech2Text2 model)"),sPo=l(),xb=a("li"),Ihe=a("strong"),lPo=o("transfo-xl"),iPo=o(" \u2014 "),KO=a("a"),dPo=o("TransfoXLLMHeadModel"),cPo=o(" (Transformer-XL model)"),mPo=l(),$b=a("li"),Nhe=a("strong"),fPo=o("trocr"),gPo=o(" \u2014 "),ZO=a("a"),hPo=o("TrOCRForCausalLM"),uPo=o(" (TrOCR model)"),pPo=l(),kb=a("li"),qhe=a("strong"),_Po=o("xglm"),bPo=o(" \u2014 "),eV=a("a"),vPo=o("XGLMForCausalLM"),FPo=o(" (XGLM model)"),TPo=l(),Sb=a("li"),jhe=a("strong"),MPo=o("xlm"),EPo=o(" \u2014 "),oV=a("a"),CPo=o("XLMWithLMHeadModel"),wPo=o(" (XLM model)"),APo=l(),Rb=a("li"),Dhe=a("strong"),LPo=o("xlm-prophetnet"),yPo=o(" \u2014 "),rV=a("a"),xPo=o("XLMProphetNetForCausalLM"),$Po=o(" (XLM-ProphetNet model)"),kPo=l(),Pb=a("li"),Ghe=a("strong"),SPo=o("xlm-roberta"),RPo=o(" \u2014 "),tV=a("a"),PPo=o("XLMRobertaForCausalLM"),BPo=o(" (XLM-RoBERTa model)"),IPo=l(),Bb=a("li"),Ohe=a("strong"),NPo=o("xlm-roberta-xl"),qPo=o(" \u2014 "),aV=a("a"),jPo=o("XLMRobertaXLForCausalLM"),DPo=o(" (XLM-RoBERTa-XL model)"),GPo=l(),Ib=a("li"),Vhe=a("strong"),OPo=o("xlnet"),VPo=o(" \u2014 "),nV=a("a"),XPo=o("XLNetLMHeadModel"),zPo=o(" (XLNet model)"),WPo=l(),Nb=a("p"),QPo=o("The model is set in evaluation mode by default using "),Xhe=a("code"),HPo=o("model.eval()"),UPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=a("code"),JPo=o("model.train()"),YPo=l(),F(qb.$$.fragment),ize=l(),Ki=a("h2"),jb=a("a"),Whe=a("span"),F(r8.$$.fragment),KPo=l(),Qhe=a("span"),ZPo=o("AutoModelForMaskedLM"),dze=l(),Po=a("div"),F(t8.$$.fragment),eBo=l(),Zi=a("p"),oBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sV=a("a"),rBo=o("from_pretrained()"),tBo=o(" class method or the "),lV=a("a"),aBo=o("from_config()"),nBo=o(` class
method.`),sBo=l(),a8=a("p"),lBo=o("This class cannot be instantiated directly using "),Hhe=a("code"),iBo=o("__init__()"),dBo=o(" (throws an error)."),cBo=l(),mt=a("div"),F(n8.$$.fragment),mBo=l(),Uhe=a("p"),fBo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gBo=l(),ed=a("p"),hBo=o(`Note:
Loading a model from its configuration file does `),Jhe=a("strong"),uBo=o("not"),pBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=a("a"),_Bo=o("from_pretrained()"),bBo=o(" to load the model weights."),vBo=l(),F(Db.$$.fragment),FBo=l(),eo=a("div"),F(s8.$$.fragment),TBo=l(),Yhe=a("p"),MBo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),EBo=l(),ja=a("p"),CBo=o("The model class to instantiate is selected based on the "),Khe=a("code"),wBo=o("model_type"),ABo=o(` property of the config object (either
passed as an argument or loaded from `),Zhe=a("code"),LBo=o("pretrained_model_name_or_path"),yBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),xBo=o("pretrained_model_name_or_path"),$Bo=o(":"),kBo=l(),Q=a("ul"),Gb=a("li"),oue=a("strong"),SBo=o("albert"),RBo=o(" \u2014 "),dV=a("a"),PBo=o("AlbertForMaskedLM"),BBo=o(" (ALBERT model)"),IBo=l(),Ob=a("li"),rue=a("strong"),NBo=o("bart"),qBo=o(" \u2014 "),cV=a("a"),jBo=o("BartForConditionalGeneration"),DBo=o(" (BART model)"),GBo=l(),Vb=a("li"),tue=a("strong"),OBo=o("bert"),VBo=o(" \u2014 "),mV=a("a"),XBo=o("BertForMaskedLM"),zBo=o(" (BERT model)"),WBo=l(),Xb=a("li"),aue=a("strong"),QBo=o("big_bird"),HBo=o(" \u2014 "),fV=a("a"),UBo=o("BigBirdForMaskedLM"),JBo=o(" (BigBird model)"),YBo=l(),zb=a("li"),nue=a("strong"),KBo=o("camembert"),ZBo=o(" \u2014 "),gV=a("a"),eIo=o("CamembertForMaskedLM"),oIo=o(" (CamemBERT model)"),rIo=l(),Wb=a("li"),sue=a("strong"),tIo=o("convbert"),aIo=o(" \u2014 "),hV=a("a"),nIo=o("ConvBertForMaskedLM"),sIo=o(" (ConvBERT model)"),lIo=l(),Qb=a("li"),lue=a("strong"),iIo=o("data2vec-text"),dIo=o(" \u2014 "),uV=a("a"),cIo=o("Data2VecTextForMaskedLM"),mIo=o(" (Data2VecText model)"),fIo=l(),Hb=a("li"),iue=a("strong"),gIo=o("deberta"),hIo=o(" \u2014 "),pV=a("a"),uIo=o("DebertaForMaskedLM"),pIo=o(" (DeBERTa model)"),_Io=l(),Ub=a("li"),due=a("strong"),bIo=o("deberta-v2"),vIo=o(" \u2014 "),_V=a("a"),FIo=o("DebertaV2ForMaskedLM"),TIo=o(" (DeBERTa-v2 model)"),MIo=l(),Jb=a("li"),cue=a("strong"),EIo=o("distilbert"),CIo=o(" \u2014 "),bV=a("a"),wIo=o("DistilBertForMaskedLM"),AIo=o(" (DistilBERT model)"),LIo=l(),Yb=a("li"),mue=a("strong"),yIo=o("electra"),xIo=o(" \u2014 "),vV=a("a"),$Io=o("ElectraForMaskedLM"),kIo=o(" (ELECTRA model)"),SIo=l(),Kb=a("li"),fue=a("strong"),RIo=o("flaubert"),PIo=o(" \u2014 "),FV=a("a"),BIo=o("FlaubertWithLMHeadModel"),IIo=o(" (FlauBERT model)"),NIo=l(),Zb=a("li"),gue=a("strong"),qIo=o("fnet"),jIo=o(" \u2014 "),TV=a("a"),DIo=o("FNetForMaskedLM"),GIo=o(" (FNet model)"),OIo=l(),ev=a("li"),hue=a("strong"),VIo=o("funnel"),XIo=o(" \u2014 "),MV=a("a"),zIo=o("FunnelForMaskedLM"),WIo=o(" (Funnel Transformer model)"),QIo=l(),ov=a("li"),uue=a("strong"),HIo=o("ibert"),UIo=o(" \u2014 "),EV=a("a"),JIo=o("IBertForMaskedLM"),YIo=o(" (I-BERT model)"),KIo=l(),rv=a("li"),pue=a("strong"),ZIo=o("layoutlm"),eNo=o(" \u2014 "),CV=a("a"),oNo=o("LayoutLMForMaskedLM"),rNo=o(" (LayoutLM model)"),tNo=l(),tv=a("li"),_ue=a("strong"),aNo=o("longformer"),nNo=o(" \u2014 "),wV=a("a"),sNo=o("LongformerForMaskedLM"),lNo=o(" (Longformer model)"),iNo=l(),av=a("li"),bue=a("strong"),dNo=o("luke"),cNo=o(" \u2014 "),AV=a("a"),mNo=o("LukeForMaskedLM"),fNo=o(" (LUKE model)"),gNo=l(),nv=a("li"),vue=a("strong"),hNo=o("mbart"),uNo=o(" \u2014 "),LV=a("a"),pNo=o("MBartForConditionalGeneration"),_No=o(" (mBART model)"),bNo=l(),sv=a("li"),Fue=a("strong"),vNo=o("megatron-bert"),FNo=o(" \u2014 "),yV=a("a"),TNo=o("MegatronBertForMaskedLM"),MNo=o(" (Megatron-BERT model)"),ENo=l(),lv=a("li"),Tue=a("strong"),CNo=o("mobilebert"),wNo=o(" \u2014 "),xV=a("a"),ANo=o("MobileBertForMaskedLM"),LNo=o(" (MobileBERT model)"),yNo=l(),iv=a("li"),Mue=a("strong"),xNo=o("mpnet"),$No=o(" \u2014 "),$V=a("a"),kNo=o("MPNetForMaskedLM"),SNo=o(" (MPNet model)"),RNo=l(),dv=a("li"),Eue=a("strong"),PNo=o("mvp"),BNo=o(" \u2014 "),kV=a("a"),INo=o("MvpForConditionalGeneration"),NNo=o(" (MVP model)"),qNo=l(),cv=a("li"),Cue=a("strong"),jNo=o("nezha"),DNo=o(" \u2014 "),SV=a("a"),GNo=o("NezhaForMaskedLM"),ONo=o(" (Nezha model)"),VNo=l(),mv=a("li"),wue=a("strong"),XNo=o("nystromformer"),zNo=o(" \u2014 "),RV=a("a"),WNo=o("NystromformerForMaskedLM"),QNo=o(" (Nystr\xF6mformer model)"),HNo=l(),fv=a("li"),Aue=a("strong"),UNo=o("perceiver"),JNo=o(" \u2014 "),PV=a("a"),YNo=o("PerceiverForMaskedLM"),KNo=o(" (Perceiver model)"),ZNo=l(),gv=a("li"),Lue=a("strong"),eqo=o("qdqbert"),oqo=o(" \u2014 "),BV=a("a"),rqo=o("QDQBertForMaskedLM"),tqo=o(" (QDQBert model)"),aqo=l(),hv=a("li"),yue=a("strong"),nqo=o("reformer"),sqo=o(" \u2014 "),IV=a("a"),lqo=o("ReformerForMaskedLM"),iqo=o(" (Reformer model)"),dqo=l(),uv=a("li"),xue=a("strong"),cqo=o("rembert"),mqo=o(" \u2014 "),NV=a("a"),fqo=o("RemBertForMaskedLM"),gqo=o(" (RemBERT model)"),hqo=l(),pv=a("li"),$ue=a("strong"),uqo=o("roberta"),pqo=o(" \u2014 "),qV=a("a"),_qo=o("RobertaForMaskedLM"),bqo=o(" (RoBERTa model)"),vqo=l(),_v=a("li"),kue=a("strong"),Fqo=o("roformer"),Tqo=o(" \u2014 "),jV=a("a"),Mqo=o("RoFormerForMaskedLM"),Eqo=o(" (RoFormer model)"),Cqo=l(),bv=a("li"),Sue=a("strong"),wqo=o("squeezebert"),Aqo=o(" \u2014 "),DV=a("a"),Lqo=o("SqueezeBertForMaskedLM"),yqo=o(" (SqueezeBERT model)"),xqo=l(),vv=a("li"),Rue=a("strong"),$qo=o("tapas"),kqo=o(" \u2014 "),GV=a("a"),Sqo=o("TapasForMaskedLM"),Rqo=o(" (TAPAS model)"),Pqo=l(),Fv=a("li"),Pue=a("strong"),Bqo=o("wav2vec2"),Iqo=o(" \u2014 "),Bue=a("code"),Nqo=o("Wav2Vec2ForMaskedLM"),qqo=o(" (Wav2Vec2 model)"),jqo=l(),Tv=a("li"),Iue=a("strong"),Dqo=o("xlm"),Gqo=o(" \u2014 "),OV=a("a"),Oqo=o("XLMWithLMHeadModel"),Vqo=o(" (XLM model)"),Xqo=l(),Mv=a("li"),Nue=a("strong"),zqo=o("xlm-roberta"),Wqo=o(" \u2014 "),VV=a("a"),Qqo=o("XLMRobertaForMaskedLM"),Hqo=o(" (XLM-RoBERTa model)"),Uqo=l(),Ev=a("li"),que=a("strong"),Jqo=o("xlm-roberta-xl"),Yqo=o(" \u2014 "),XV=a("a"),Kqo=o("XLMRobertaXLForMaskedLM"),Zqo=o(" (XLM-RoBERTa-XL model)"),ejo=l(),Cv=a("li"),jue=a("strong"),ojo=o("yoso"),rjo=o(" \u2014 "),zV=a("a"),tjo=o("YosoForMaskedLM"),ajo=o(" (YOSO model)"),njo=l(),wv=a("p"),sjo=o("The model is set in evaluation mode by default using "),Due=a("code"),ljo=o("model.eval()"),ijo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),djo=o("model.train()"),cjo=l(),F(Av.$$.fragment),cze=l(),od=a("h2"),Lv=a("a"),Oue=a("span"),F(l8.$$.fragment),mjo=l(),Vue=a("span"),fjo=o("AutoModelForSeq2SeqLM"),mze=l(),Bo=a("div"),F(i8.$$.fragment),gjo=l(),rd=a("p"),hjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WV=a("a"),ujo=o("from_pretrained()"),pjo=o(" class method or the "),QV=a("a"),_jo=o("from_config()"),bjo=o(` class
method.`),vjo=l(),d8=a("p"),Fjo=o("This class cannot be instantiated directly using "),Xue=a("code"),Tjo=o("__init__()"),Mjo=o(" (throws an error)."),Ejo=l(),ft=a("div"),F(c8.$$.fragment),Cjo=l(),zue=a("p"),wjo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ajo=l(),td=a("p"),Ljo=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),yjo=o("not"),xjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),$jo=o("from_pretrained()"),kjo=o(" to load the model weights."),Sjo=l(),F(yv.$$.fragment),Rjo=l(),oo=a("div"),F(m8.$$.fragment),Pjo=l(),Que=a("p"),Bjo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ijo=l(),Da=a("p"),Njo=o("The model class to instantiate is selected based on the "),Hue=a("code"),qjo=o("model_type"),jjo=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),Djo=o("pretrained_model_name_or_path"),Gjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),Ojo=o("pretrained_model_name_or_path"),Vjo=o(":"),Xjo=l(),fe=a("ul"),xv=a("li"),Yue=a("strong"),zjo=o("bart"),Wjo=o(" \u2014 "),UV=a("a"),Qjo=o("BartForConditionalGeneration"),Hjo=o(" (BART model)"),Ujo=l(),$v=a("li"),Kue=a("strong"),Jjo=o("bigbird_pegasus"),Yjo=o(" \u2014 "),JV=a("a"),Kjo=o("BigBirdPegasusForConditionalGeneration"),Zjo=o(" (BigBird-Pegasus model)"),eDo=l(),kv=a("li"),Zue=a("strong"),oDo=o("blenderbot"),rDo=o(" \u2014 "),YV=a("a"),tDo=o("BlenderbotForConditionalGeneration"),aDo=o(" (Blenderbot model)"),nDo=l(),Sv=a("li"),epe=a("strong"),sDo=o("blenderbot-small"),lDo=o(" \u2014 "),KV=a("a"),iDo=o("BlenderbotSmallForConditionalGeneration"),dDo=o(" (BlenderbotSmall model)"),cDo=l(),Rv=a("li"),ope=a("strong"),mDo=o("encoder-decoder"),fDo=o(" \u2014 "),ZV=a("a"),gDo=o("EncoderDecoderModel"),hDo=o(" (Encoder decoder model)"),uDo=l(),Pv=a("li"),rpe=a("strong"),pDo=o("fsmt"),_Do=o(" \u2014 "),eX=a("a"),bDo=o("FSMTForConditionalGeneration"),vDo=o(" (FairSeq Machine-Translation model)"),FDo=l(),Bv=a("li"),tpe=a("strong"),TDo=o("led"),MDo=o(" \u2014 "),oX=a("a"),EDo=o("LEDForConditionalGeneration"),CDo=o(" (LED model)"),wDo=l(),Iv=a("li"),ape=a("strong"),ADo=o("longt5"),LDo=o(" \u2014 "),rX=a("a"),yDo=o("LongT5ForConditionalGeneration"),xDo=o(" (LongT5 model)"),$Do=l(),Nv=a("li"),npe=a("strong"),kDo=o("m2m_100"),SDo=o(" \u2014 "),tX=a("a"),RDo=o("M2M100ForConditionalGeneration"),PDo=o(" (M2M100 model)"),BDo=l(),qv=a("li"),spe=a("strong"),IDo=o("marian"),NDo=o(" \u2014 "),aX=a("a"),qDo=o("MarianMTModel"),jDo=o(" (Marian model)"),DDo=l(),jv=a("li"),lpe=a("strong"),GDo=o("mbart"),ODo=o(" \u2014 "),nX=a("a"),VDo=o("MBartForConditionalGeneration"),XDo=o(" (mBART model)"),zDo=l(),Dv=a("li"),ipe=a("strong"),WDo=o("mt5"),QDo=o(" \u2014 "),sX=a("a"),HDo=o("MT5ForConditionalGeneration"),UDo=o(" (MT5 model)"),JDo=l(),Gv=a("li"),dpe=a("strong"),YDo=o("mvp"),KDo=o(" \u2014 "),lX=a("a"),ZDo=o("MvpForConditionalGeneration"),eGo=o(" (MVP model)"),oGo=l(),Ov=a("li"),cpe=a("strong"),rGo=o("nllb"),tGo=o(" \u2014 "),iX=a("a"),aGo=o("M2M100ForConditionalGeneration"),nGo=o(" (NLLB model)"),sGo=l(),Vv=a("li"),mpe=a("strong"),lGo=o("pegasus"),iGo=o(" \u2014 "),dX=a("a"),dGo=o("PegasusForConditionalGeneration"),cGo=o(" (Pegasus model)"),mGo=l(),Xv=a("li"),fpe=a("strong"),fGo=o("plbart"),gGo=o(" \u2014 "),cX=a("a"),hGo=o("PLBartForConditionalGeneration"),uGo=o(" (PLBart model)"),pGo=l(),zv=a("li"),gpe=a("strong"),_Go=o("prophetnet"),bGo=o(" \u2014 "),mX=a("a"),vGo=o("ProphetNetForConditionalGeneration"),FGo=o(" (ProphetNet model)"),TGo=l(),Wv=a("li"),hpe=a("strong"),MGo=o("t5"),EGo=o(" \u2014 "),fX=a("a"),CGo=o("T5ForConditionalGeneration"),wGo=o(" (T5 model)"),AGo=l(),Qv=a("li"),upe=a("strong"),LGo=o("xlm-prophetnet"),yGo=o(" \u2014 "),gX=a("a"),xGo=o("XLMProphetNetForConditionalGeneration"),$Go=o(" (XLM-ProphetNet model)"),kGo=l(),Hv=a("p"),SGo=o("The model is set in evaluation mode by default using "),ppe=a("code"),RGo=o("model.eval()"),PGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=a("code"),BGo=o("model.train()"),IGo=l(),F(Uv.$$.fragment),fze=l(),ad=a("h2"),Jv=a("a"),bpe=a("span"),F(f8.$$.fragment),NGo=l(),vpe=a("span"),qGo=o("AutoModelForSequenceClassification"),gze=l(),Io=a("div"),F(g8.$$.fragment),jGo=l(),nd=a("p"),DGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hX=a("a"),GGo=o("from_pretrained()"),OGo=o(" class method or the "),uX=a("a"),VGo=o("from_config()"),XGo=o(` class
method.`),zGo=l(),h8=a("p"),WGo=o("This class cannot be instantiated directly using "),Fpe=a("code"),QGo=o("__init__()"),HGo=o(" (throws an error)."),UGo=l(),gt=a("div"),F(u8.$$.fragment),JGo=l(),Tpe=a("p"),YGo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KGo=l(),sd=a("p"),ZGo=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),eOo=o("not"),oOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),rOo=o("from_pretrained()"),tOo=o(" to load the model weights."),aOo=l(),F(Yv.$$.fragment),nOo=l(),ro=a("div"),F(p8.$$.fragment),sOo=l(),Epe=a("p"),lOo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iOo=l(),Ga=a("p"),dOo=o("The model class to instantiate is selected based on the "),Cpe=a("code"),cOo=o("model_type"),mOo=o(` property of the config object (either
passed as an argument or loaded from `),wpe=a("code"),fOo=o("pretrained_model_name_or_path"),gOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=a("code"),hOo=o("pretrained_model_name_or_path"),uOo=o(":"),pOo=l(),B=a("ul"),Kv=a("li"),Lpe=a("strong"),_Oo=o("albert"),bOo=o(" \u2014 "),_X=a("a"),vOo=o("AlbertForSequenceClassification"),FOo=o(" (ALBERT model)"),TOo=l(),Zv=a("li"),ype=a("strong"),MOo=o("bart"),EOo=o(" \u2014 "),bX=a("a"),COo=o("BartForSequenceClassification"),wOo=o(" (BART model)"),AOo=l(),e1=a("li"),xpe=a("strong"),LOo=o("bert"),yOo=o(" \u2014 "),vX=a("a"),xOo=o("BertForSequenceClassification"),$Oo=o(" (BERT model)"),kOo=l(),o1=a("li"),$pe=a("strong"),SOo=o("big_bird"),ROo=o(" \u2014 "),FX=a("a"),POo=o("BigBirdForSequenceClassification"),BOo=o(" (BigBird model)"),IOo=l(),r1=a("li"),kpe=a("strong"),NOo=o("bigbird_pegasus"),qOo=o(" \u2014 "),TX=a("a"),jOo=o("BigBirdPegasusForSequenceClassification"),DOo=o(" (BigBird-Pegasus model)"),GOo=l(),t1=a("li"),Spe=a("strong"),OOo=o("bloom"),VOo=o(" \u2014 "),MX=a("a"),XOo=o("BloomForSequenceClassification"),zOo=o(" (BLOOM model)"),WOo=l(),a1=a("li"),Rpe=a("strong"),QOo=o("camembert"),HOo=o(" \u2014 "),EX=a("a"),UOo=o("CamembertForSequenceClassification"),JOo=o(" (CamemBERT model)"),YOo=l(),n1=a("li"),Ppe=a("strong"),KOo=o("canine"),ZOo=o(" \u2014 "),CX=a("a"),eVo=o("CanineForSequenceClassification"),oVo=o(" (CANINE model)"),rVo=l(),s1=a("li"),Bpe=a("strong"),tVo=o("convbert"),aVo=o(" \u2014 "),wX=a("a"),nVo=o("ConvBertForSequenceClassification"),sVo=o(" (ConvBERT model)"),lVo=l(),l1=a("li"),Ipe=a("strong"),iVo=o("ctrl"),dVo=o(" \u2014 "),AX=a("a"),cVo=o("CTRLForSequenceClassification"),mVo=o(" (CTRL model)"),fVo=l(),i1=a("li"),Npe=a("strong"),gVo=o("data2vec-text"),hVo=o(" \u2014 "),LX=a("a"),uVo=o("Data2VecTextForSequenceClassification"),pVo=o(" (Data2VecText model)"),_Vo=l(),d1=a("li"),qpe=a("strong"),bVo=o("deberta"),vVo=o(" \u2014 "),yX=a("a"),FVo=o("DebertaForSequenceClassification"),TVo=o(" (DeBERTa model)"),MVo=l(),c1=a("li"),jpe=a("strong"),EVo=o("deberta-v2"),CVo=o(" \u2014 "),xX=a("a"),wVo=o("DebertaV2ForSequenceClassification"),AVo=o(" (DeBERTa-v2 model)"),LVo=l(),m1=a("li"),Dpe=a("strong"),yVo=o("distilbert"),xVo=o(" \u2014 "),$X=a("a"),$Vo=o("DistilBertForSequenceClassification"),kVo=o(" (DistilBERT model)"),SVo=l(),f1=a("li"),Gpe=a("strong"),RVo=o("electra"),PVo=o(" \u2014 "),kX=a("a"),BVo=o("ElectraForSequenceClassification"),IVo=o(" (ELECTRA model)"),NVo=l(),g1=a("li"),Ope=a("strong"),qVo=o("flaubert"),jVo=o(" \u2014 "),SX=a("a"),DVo=o("FlaubertForSequenceClassification"),GVo=o(" (FlauBERT model)"),OVo=l(),h1=a("li"),Vpe=a("strong"),VVo=o("fnet"),XVo=o(" \u2014 "),RX=a("a"),zVo=o("FNetForSequenceClassification"),WVo=o(" (FNet model)"),QVo=l(),u1=a("li"),Xpe=a("strong"),HVo=o("funnel"),UVo=o(" \u2014 "),PX=a("a"),JVo=o("FunnelForSequenceClassification"),YVo=o(" (Funnel Transformer model)"),KVo=l(),p1=a("li"),zpe=a("strong"),ZVo=o("gpt2"),eXo=o(" \u2014 "),BX=a("a"),oXo=o("GPT2ForSequenceClassification"),rXo=o(" (OpenAI GPT-2 model)"),tXo=l(),_1=a("li"),Wpe=a("strong"),aXo=o("gpt_neo"),nXo=o(" \u2014 "),IX=a("a"),sXo=o("GPTNeoForSequenceClassification"),lXo=o(" (GPT Neo model)"),iXo=l(),b1=a("li"),Qpe=a("strong"),dXo=o("gptj"),cXo=o(" \u2014 "),NX=a("a"),mXo=o("GPTJForSequenceClassification"),fXo=o(" (GPT-J model)"),gXo=l(),v1=a("li"),Hpe=a("strong"),hXo=o("ibert"),uXo=o(" \u2014 "),qX=a("a"),pXo=o("IBertForSequenceClassification"),_Xo=o(" (I-BERT model)"),bXo=l(),F1=a("li"),Upe=a("strong"),vXo=o("layoutlm"),FXo=o(" \u2014 "),jX=a("a"),TXo=o("LayoutLMForSequenceClassification"),MXo=o(" (LayoutLM model)"),EXo=l(),T1=a("li"),Jpe=a("strong"),CXo=o("layoutlmv2"),wXo=o(" \u2014 "),DX=a("a"),AXo=o("LayoutLMv2ForSequenceClassification"),LXo=o(" (LayoutLMv2 model)"),yXo=l(),M1=a("li"),Ype=a("strong"),xXo=o("layoutlmv3"),$Xo=o(" \u2014 "),GX=a("a"),kXo=o("LayoutLMv3ForSequenceClassification"),SXo=o(" (LayoutLMv3 model)"),RXo=l(),E1=a("li"),Kpe=a("strong"),PXo=o("led"),BXo=o(" \u2014 "),OX=a("a"),IXo=o("LEDForSequenceClassification"),NXo=o(" (LED model)"),qXo=l(),C1=a("li"),Zpe=a("strong"),jXo=o("longformer"),DXo=o(" \u2014 "),VX=a("a"),GXo=o("LongformerForSequenceClassification"),OXo=o(" (Longformer model)"),VXo=l(),w1=a("li"),e_e=a("strong"),XXo=o("mbart"),zXo=o(" \u2014 "),XX=a("a"),WXo=o("MBartForSequenceClassification"),QXo=o(" (mBART model)"),HXo=l(),A1=a("li"),o_e=a("strong"),UXo=o("megatron-bert"),JXo=o(" \u2014 "),zX=a("a"),YXo=o("MegatronBertForSequenceClassification"),KXo=o(" (Megatron-BERT model)"),ZXo=l(),L1=a("li"),r_e=a("strong"),ezo=o("mobilebert"),ozo=o(" \u2014 "),WX=a("a"),rzo=o("MobileBertForSequenceClassification"),tzo=o(" (MobileBERT model)"),azo=l(),y1=a("li"),t_e=a("strong"),nzo=o("mpnet"),szo=o(" \u2014 "),QX=a("a"),lzo=o("MPNetForSequenceClassification"),izo=o(" (MPNet model)"),dzo=l(),x1=a("li"),a_e=a("strong"),czo=o("mvp"),mzo=o(" \u2014 "),HX=a("a"),fzo=o("MvpForSequenceClassification"),gzo=o(" (MVP model)"),hzo=l(),$1=a("li"),n_e=a("strong"),uzo=o("nezha"),pzo=o(" \u2014 "),UX=a("a"),_zo=o("NezhaForSequenceClassification"),bzo=o(" (Nezha model)"),vzo=l(),k1=a("li"),s_e=a("strong"),Fzo=o("nystromformer"),Tzo=o(" \u2014 "),JX=a("a"),Mzo=o("NystromformerForSequenceClassification"),Ezo=o(" (Nystr\xF6mformer model)"),Czo=l(),S1=a("li"),l_e=a("strong"),wzo=o("openai-gpt"),Azo=o(" \u2014 "),YX=a("a"),Lzo=o("OpenAIGPTForSequenceClassification"),yzo=o(" (OpenAI GPT model)"),xzo=l(),R1=a("li"),i_e=a("strong"),$zo=o("opt"),kzo=o(" \u2014 "),KX=a("a"),Szo=o("OPTForSequenceClassification"),Rzo=o(" (OPT model)"),Pzo=l(),P1=a("li"),d_e=a("strong"),Bzo=o("perceiver"),Izo=o(" \u2014 "),ZX=a("a"),Nzo=o("PerceiverForSequenceClassification"),qzo=o(" (Perceiver model)"),jzo=l(),B1=a("li"),c_e=a("strong"),Dzo=o("plbart"),Gzo=o(" \u2014 "),ez=a("a"),Ozo=o("PLBartForSequenceClassification"),Vzo=o(" (PLBart model)"),Xzo=l(),I1=a("li"),m_e=a("strong"),zzo=o("qdqbert"),Wzo=o(" \u2014 "),oz=a("a"),Qzo=o("QDQBertForSequenceClassification"),Hzo=o(" (QDQBert model)"),Uzo=l(),N1=a("li"),f_e=a("strong"),Jzo=o("reformer"),Yzo=o(" \u2014 "),rz=a("a"),Kzo=o("ReformerForSequenceClassification"),Zzo=o(" (Reformer model)"),eWo=l(),q1=a("li"),g_e=a("strong"),oWo=o("rembert"),rWo=o(" \u2014 "),tz=a("a"),tWo=o("RemBertForSequenceClassification"),aWo=o(" (RemBERT model)"),nWo=l(),j1=a("li"),h_e=a("strong"),sWo=o("roberta"),lWo=o(" \u2014 "),az=a("a"),iWo=o("RobertaForSequenceClassification"),dWo=o(" (RoBERTa model)"),cWo=l(),D1=a("li"),u_e=a("strong"),mWo=o("roformer"),fWo=o(" \u2014 "),nz=a("a"),gWo=o("RoFormerForSequenceClassification"),hWo=o(" (RoFormer model)"),uWo=l(),G1=a("li"),p_e=a("strong"),pWo=o("squeezebert"),_Wo=o(" \u2014 "),sz=a("a"),bWo=o("SqueezeBertForSequenceClassification"),vWo=o(" (SqueezeBERT model)"),FWo=l(),O1=a("li"),__e=a("strong"),TWo=o("tapas"),MWo=o(" \u2014 "),lz=a("a"),EWo=o("TapasForSequenceClassification"),CWo=o(" (TAPAS model)"),wWo=l(),V1=a("li"),b_e=a("strong"),AWo=o("transfo-xl"),LWo=o(" \u2014 "),iz=a("a"),yWo=o("TransfoXLForSequenceClassification"),xWo=o(" (Transformer-XL model)"),$Wo=l(),X1=a("li"),v_e=a("strong"),kWo=o("xlm"),SWo=o(" \u2014 "),dz=a("a"),RWo=o("XLMForSequenceClassification"),PWo=o(" (XLM model)"),BWo=l(),z1=a("li"),F_e=a("strong"),IWo=o("xlm-roberta"),NWo=o(" \u2014 "),cz=a("a"),qWo=o("XLMRobertaForSequenceClassification"),jWo=o(" (XLM-RoBERTa model)"),DWo=l(),W1=a("li"),T_e=a("strong"),GWo=o("xlm-roberta-xl"),OWo=o(" \u2014 "),mz=a("a"),VWo=o("XLMRobertaXLForSequenceClassification"),XWo=o(" (XLM-RoBERTa-XL model)"),zWo=l(),Q1=a("li"),M_e=a("strong"),WWo=o("xlnet"),QWo=o(" \u2014 "),fz=a("a"),HWo=o("XLNetForSequenceClassification"),UWo=o(" (XLNet model)"),JWo=l(),H1=a("li"),E_e=a("strong"),YWo=o("yoso"),KWo=o(" \u2014 "),gz=a("a"),ZWo=o("YosoForSequenceClassification"),eQo=o(" (YOSO model)"),oQo=l(),U1=a("p"),rQo=o("The model is set in evaluation mode by default using "),C_e=a("code"),tQo=o("model.eval()"),aQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=a("code"),nQo=o("model.train()"),sQo=l(),F(J1.$$.fragment),hze=l(),ld=a("h2"),Y1=a("a"),A_e=a("span"),F(_8.$$.fragment),lQo=l(),L_e=a("span"),iQo=o("AutoModelForMultipleChoice"),uze=l(),No=a("div"),F(b8.$$.fragment),dQo=l(),id=a("p"),cQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hz=a("a"),mQo=o("from_pretrained()"),fQo=o(" class method or the "),uz=a("a"),gQo=o("from_config()"),hQo=o(` class
method.`),uQo=l(),v8=a("p"),pQo=o("This class cannot be instantiated directly using "),y_e=a("code"),_Qo=o("__init__()"),bQo=o(" (throws an error)."),vQo=l(),ht=a("div"),F(F8.$$.fragment),FQo=l(),x_e=a("p"),TQo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MQo=l(),dd=a("p"),EQo=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),CQo=o("not"),wQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),AQo=o("from_pretrained()"),LQo=o(" to load the model weights."),yQo=l(),F(K1.$$.fragment),xQo=l(),to=a("div"),F(T8.$$.fragment),$Qo=l(),k_e=a("p"),kQo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SQo=l(),Oa=a("p"),RQo=o("The model class to instantiate is selected based on the "),S_e=a("code"),PQo=o("model_type"),BQo=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),IQo=o("pretrained_model_name_or_path"),NQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=a("code"),qQo=o("pretrained_model_name_or_path"),jQo=o(":"),DQo=l(),Z=a("ul"),Z1=a("li"),B_e=a("strong"),GQo=o("albert"),OQo=o(" \u2014 "),_z=a("a"),VQo=o("AlbertForMultipleChoice"),XQo=o(" (ALBERT model)"),zQo=l(),eF=a("li"),I_e=a("strong"),WQo=o("bert"),QQo=o(" \u2014 "),bz=a("a"),HQo=o("BertForMultipleChoice"),UQo=o(" (BERT model)"),JQo=l(),oF=a("li"),N_e=a("strong"),YQo=o("big_bird"),KQo=o(" \u2014 "),vz=a("a"),ZQo=o("BigBirdForMultipleChoice"),eHo=o(" (BigBird model)"),oHo=l(),rF=a("li"),q_e=a("strong"),rHo=o("camembert"),tHo=o(" \u2014 "),Fz=a("a"),aHo=o("CamembertForMultipleChoice"),nHo=o(" (CamemBERT model)"),sHo=l(),tF=a("li"),j_e=a("strong"),lHo=o("canine"),iHo=o(" \u2014 "),Tz=a("a"),dHo=o("CanineForMultipleChoice"),cHo=o(" (CANINE model)"),mHo=l(),aF=a("li"),D_e=a("strong"),fHo=o("convbert"),gHo=o(" \u2014 "),Mz=a("a"),hHo=o("ConvBertForMultipleChoice"),uHo=o(" (ConvBERT model)"),pHo=l(),nF=a("li"),G_e=a("strong"),_Ho=o("data2vec-text"),bHo=o(" \u2014 "),Ez=a("a"),vHo=o("Data2VecTextForMultipleChoice"),FHo=o(" (Data2VecText model)"),THo=l(),sF=a("li"),O_e=a("strong"),MHo=o("deberta-v2"),EHo=o(" \u2014 "),Cz=a("a"),CHo=o("DebertaV2ForMultipleChoice"),wHo=o(" (DeBERTa-v2 model)"),AHo=l(),lF=a("li"),V_e=a("strong"),LHo=o("distilbert"),yHo=o(" \u2014 "),wz=a("a"),xHo=o("DistilBertForMultipleChoice"),$Ho=o(" (DistilBERT model)"),kHo=l(),iF=a("li"),X_e=a("strong"),SHo=o("electra"),RHo=o(" \u2014 "),Az=a("a"),PHo=o("ElectraForMultipleChoice"),BHo=o(" (ELECTRA model)"),IHo=l(),dF=a("li"),z_e=a("strong"),NHo=o("flaubert"),qHo=o(" \u2014 "),Lz=a("a"),jHo=o("FlaubertForMultipleChoice"),DHo=o(" (FlauBERT model)"),GHo=l(),cF=a("li"),W_e=a("strong"),OHo=o("fnet"),VHo=o(" \u2014 "),yz=a("a"),XHo=o("FNetForMultipleChoice"),zHo=o(" (FNet model)"),WHo=l(),mF=a("li"),Q_e=a("strong"),QHo=o("funnel"),HHo=o(" \u2014 "),xz=a("a"),UHo=o("FunnelForMultipleChoice"),JHo=o(" (Funnel Transformer model)"),YHo=l(),fF=a("li"),H_e=a("strong"),KHo=o("ibert"),ZHo=o(" \u2014 "),$z=a("a"),eUo=o("IBertForMultipleChoice"),oUo=o(" (I-BERT model)"),rUo=l(),gF=a("li"),U_e=a("strong"),tUo=o("longformer"),aUo=o(" \u2014 "),kz=a("a"),nUo=o("LongformerForMultipleChoice"),sUo=o(" (Longformer model)"),lUo=l(),hF=a("li"),J_e=a("strong"),iUo=o("megatron-bert"),dUo=o(" \u2014 "),Sz=a("a"),cUo=o("MegatronBertForMultipleChoice"),mUo=o(" (Megatron-BERT model)"),fUo=l(),uF=a("li"),Y_e=a("strong"),gUo=o("mobilebert"),hUo=o(" \u2014 "),Rz=a("a"),uUo=o("MobileBertForMultipleChoice"),pUo=o(" (MobileBERT model)"),_Uo=l(),pF=a("li"),K_e=a("strong"),bUo=o("mpnet"),vUo=o(" \u2014 "),Pz=a("a"),FUo=o("MPNetForMultipleChoice"),TUo=o(" (MPNet model)"),MUo=l(),_F=a("li"),Z_e=a("strong"),EUo=o("nezha"),CUo=o(" \u2014 "),Bz=a("a"),wUo=o("NezhaForMultipleChoice"),AUo=o(" (Nezha model)"),LUo=l(),bF=a("li"),e2e=a("strong"),yUo=o("nystromformer"),xUo=o(" \u2014 "),Iz=a("a"),$Uo=o("NystromformerForMultipleChoice"),kUo=o(" (Nystr\xF6mformer model)"),SUo=l(),vF=a("li"),o2e=a("strong"),RUo=o("qdqbert"),PUo=o(" \u2014 "),Nz=a("a"),BUo=o("QDQBertForMultipleChoice"),IUo=o(" (QDQBert model)"),NUo=l(),FF=a("li"),r2e=a("strong"),qUo=o("rembert"),jUo=o(" \u2014 "),qz=a("a"),DUo=o("RemBertForMultipleChoice"),GUo=o(" (RemBERT model)"),OUo=l(),TF=a("li"),t2e=a("strong"),VUo=o("roberta"),XUo=o(" \u2014 "),jz=a("a"),zUo=o("RobertaForMultipleChoice"),WUo=o(" (RoBERTa model)"),QUo=l(),MF=a("li"),a2e=a("strong"),HUo=o("roformer"),UUo=o(" \u2014 "),Dz=a("a"),JUo=o("RoFormerForMultipleChoice"),YUo=o(" (RoFormer model)"),KUo=l(),EF=a("li"),n2e=a("strong"),ZUo=o("squeezebert"),eJo=o(" \u2014 "),Gz=a("a"),oJo=o("SqueezeBertForMultipleChoice"),rJo=o(" (SqueezeBERT model)"),tJo=l(),CF=a("li"),s2e=a("strong"),aJo=o("xlm"),nJo=o(" \u2014 "),Oz=a("a"),sJo=o("XLMForMultipleChoice"),lJo=o(" (XLM model)"),iJo=l(),wF=a("li"),l2e=a("strong"),dJo=o("xlm-roberta"),cJo=o(" \u2014 "),Vz=a("a"),mJo=o("XLMRobertaForMultipleChoice"),fJo=o(" (XLM-RoBERTa model)"),gJo=l(),AF=a("li"),i2e=a("strong"),hJo=o("xlm-roberta-xl"),uJo=o(" \u2014 "),Xz=a("a"),pJo=o("XLMRobertaXLForMultipleChoice"),_Jo=o(" (XLM-RoBERTa-XL model)"),bJo=l(),LF=a("li"),d2e=a("strong"),vJo=o("xlnet"),FJo=o(" \u2014 "),zz=a("a"),TJo=o("XLNetForMultipleChoice"),MJo=o(" (XLNet model)"),EJo=l(),yF=a("li"),c2e=a("strong"),CJo=o("yoso"),wJo=o(" \u2014 "),Wz=a("a"),AJo=o("YosoForMultipleChoice"),LJo=o(" (YOSO model)"),yJo=l(),xF=a("p"),xJo=o("The model is set in evaluation mode by default using "),m2e=a("code"),$Jo=o("model.eval()"),kJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f2e=a("code"),SJo=o("model.train()"),RJo=l(),F($F.$$.fragment),pze=l(),cd=a("h2"),kF=a("a"),g2e=a("span"),F(M8.$$.fragment),PJo=l(),h2e=a("span"),BJo=o("AutoModelForNextSentencePrediction"),_ze=l(),qo=a("div"),F(E8.$$.fragment),IJo=l(),md=a("p"),NJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Qz=a("a"),qJo=o("from_pretrained()"),jJo=o(" class method or the "),Hz=a("a"),DJo=o("from_config()"),GJo=o(` class
method.`),OJo=l(),C8=a("p"),VJo=o("This class cannot be instantiated directly using "),u2e=a("code"),XJo=o("__init__()"),zJo=o(" (throws an error)."),WJo=l(),ut=a("div"),F(w8.$$.fragment),QJo=l(),p2e=a("p"),HJo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),UJo=l(),fd=a("p"),JJo=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),YJo=o("not"),KJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),ZJo=o("from_pretrained()"),eYo=o(" to load the model weights."),oYo=l(),F(SF.$$.fragment),rYo=l(),ao=a("div"),F(A8.$$.fragment),tYo=l(),b2e=a("p"),aYo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nYo=l(),Va=a("p"),sYo=o("The model class to instantiate is selected based on the "),v2e=a("code"),lYo=o("model_type"),iYo=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),dYo=o("pretrained_model_name_or_path"),cYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),mYo=o("pretrained_model_name_or_path"),fYo=o(":"),gYo=l(),jo=a("ul"),RF=a("li"),M2e=a("strong"),hYo=o("bert"),uYo=o(" \u2014 "),Jz=a("a"),pYo=o("BertForNextSentencePrediction"),_Yo=o(" (BERT model)"),bYo=l(),PF=a("li"),E2e=a("strong"),vYo=o("fnet"),FYo=o(" \u2014 "),Yz=a("a"),TYo=o("FNetForNextSentencePrediction"),MYo=o(" (FNet model)"),EYo=l(),BF=a("li"),C2e=a("strong"),CYo=o("megatron-bert"),wYo=o(" \u2014 "),Kz=a("a"),AYo=o("MegatronBertForNextSentencePrediction"),LYo=o(" (Megatron-BERT model)"),yYo=l(),IF=a("li"),w2e=a("strong"),xYo=o("mobilebert"),$Yo=o(" \u2014 "),Zz=a("a"),kYo=o("MobileBertForNextSentencePrediction"),SYo=o(" (MobileBERT model)"),RYo=l(),NF=a("li"),A2e=a("strong"),PYo=o("nezha"),BYo=o(" \u2014 "),eW=a("a"),IYo=o("NezhaForNextSentencePrediction"),NYo=o(" (Nezha model)"),qYo=l(),qF=a("li"),L2e=a("strong"),jYo=o("qdqbert"),DYo=o(" \u2014 "),oW=a("a"),GYo=o("QDQBertForNextSentencePrediction"),OYo=o(" (QDQBert model)"),VYo=l(),jF=a("p"),XYo=o("The model is set in evaluation mode by default using "),y2e=a("code"),zYo=o("model.eval()"),WYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x2e=a("code"),QYo=o("model.train()"),HYo=l(),F(DF.$$.fragment),bze=l(),gd=a("h2"),GF=a("a"),$2e=a("span"),F(L8.$$.fragment),UYo=l(),k2e=a("span"),JYo=o("AutoModelForTokenClassification"),vze=l(),Do=a("div"),F(y8.$$.fragment),YYo=l(),hd=a("p"),KYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rW=a("a"),ZYo=o("from_pretrained()"),eKo=o(" class method or the "),tW=a("a"),oKo=o("from_config()"),rKo=o(` class
method.`),tKo=l(),x8=a("p"),aKo=o("This class cannot be instantiated directly using "),S2e=a("code"),nKo=o("__init__()"),sKo=o(" (throws an error)."),lKo=l(),pt=a("div"),F($8.$$.fragment),iKo=l(),R2e=a("p"),dKo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cKo=l(),ud=a("p"),mKo=o(`Note:
Loading a model from its configuration file does `),P2e=a("strong"),fKo=o("not"),gKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),hKo=o("from_pretrained()"),uKo=o(" to load the model weights."),pKo=l(),F(OF.$$.fragment),_Ko=l(),no=a("div"),F(k8.$$.fragment),bKo=l(),B2e=a("p"),vKo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FKo=l(),Xa=a("p"),TKo=o("The model class to instantiate is selected based on the "),I2e=a("code"),MKo=o("model_type"),EKo=o(` property of the config object (either
passed as an argument or loaded from `),N2e=a("code"),CKo=o("pretrained_model_name_or_path"),wKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),AKo=o("pretrained_model_name_or_path"),LKo=o(":"),yKo=l(),U=a("ul"),VF=a("li"),j2e=a("strong"),xKo=o("albert"),$Ko=o(" \u2014 "),nW=a("a"),kKo=o("AlbertForTokenClassification"),SKo=o(" (ALBERT model)"),RKo=l(),XF=a("li"),D2e=a("strong"),PKo=o("bert"),BKo=o(" \u2014 "),sW=a("a"),IKo=o("BertForTokenClassification"),NKo=o(" (BERT model)"),qKo=l(),zF=a("li"),G2e=a("strong"),jKo=o("big_bird"),DKo=o(" \u2014 "),lW=a("a"),GKo=o("BigBirdForTokenClassification"),OKo=o(" (BigBird model)"),VKo=l(),WF=a("li"),O2e=a("strong"),XKo=o("bloom"),zKo=o(" \u2014 "),iW=a("a"),WKo=o("BloomForTokenClassification"),QKo=o(" (BLOOM model)"),HKo=l(),QF=a("li"),V2e=a("strong"),UKo=o("camembert"),JKo=o(" \u2014 "),dW=a("a"),YKo=o("CamembertForTokenClassification"),KKo=o(" (CamemBERT model)"),ZKo=l(),HF=a("li"),X2e=a("strong"),eZo=o("canine"),oZo=o(" \u2014 "),cW=a("a"),rZo=o("CanineForTokenClassification"),tZo=o(" (CANINE model)"),aZo=l(),UF=a("li"),z2e=a("strong"),nZo=o("convbert"),sZo=o(" \u2014 "),mW=a("a"),lZo=o("ConvBertForTokenClassification"),iZo=o(" (ConvBERT model)"),dZo=l(),JF=a("li"),W2e=a("strong"),cZo=o("data2vec-text"),mZo=o(" \u2014 "),fW=a("a"),fZo=o("Data2VecTextForTokenClassification"),gZo=o(" (Data2VecText model)"),hZo=l(),YF=a("li"),Q2e=a("strong"),uZo=o("deberta"),pZo=o(" \u2014 "),gW=a("a"),_Zo=o("DebertaForTokenClassification"),bZo=o(" (DeBERTa model)"),vZo=l(),KF=a("li"),H2e=a("strong"),FZo=o("deberta-v2"),TZo=o(" \u2014 "),hW=a("a"),MZo=o("DebertaV2ForTokenClassification"),EZo=o(" (DeBERTa-v2 model)"),CZo=l(),ZF=a("li"),U2e=a("strong"),wZo=o("distilbert"),AZo=o(" \u2014 "),uW=a("a"),LZo=o("DistilBertForTokenClassification"),yZo=o(" (DistilBERT model)"),xZo=l(),eT=a("li"),J2e=a("strong"),$Zo=o("electra"),kZo=o(" \u2014 "),pW=a("a"),SZo=o("ElectraForTokenClassification"),RZo=o(" (ELECTRA model)"),PZo=l(),oT=a("li"),Y2e=a("strong"),BZo=o("flaubert"),IZo=o(" \u2014 "),_W=a("a"),NZo=o("FlaubertForTokenClassification"),qZo=o(" (FlauBERT model)"),jZo=l(),rT=a("li"),K2e=a("strong"),DZo=o("fnet"),GZo=o(" \u2014 "),bW=a("a"),OZo=o("FNetForTokenClassification"),VZo=o(" (FNet model)"),XZo=l(),tT=a("li"),Z2e=a("strong"),zZo=o("funnel"),WZo=o(" \u2014 "),vW=a("a"),QZo=o("FunnelForTokenClassification"),HZo=o(" (Funnel Transformer model)"),UZo=l(),aT=a("li"),ebe=a("strong"),JZo=o("gpt2"),YZo=o(" \u2014 "),FW=a("a"),KZo=o("GPT2ForTokenClassification"),ZZo=o(" (OpenAI GPT-2 model)"),eer=l(),nT=a("li"),obe=a("strong"),oer=o("ibert"),rer=o(" \u2014 "),TW=a("a"),ter=o("IBertForTokenClassification"),aer=o(" (I-BERT model)"),ner=l(),sT=a("li"),rbe=a("strong"),ser=o("layoutlm"),ler=o(" \u2014 "),MW=a("a"),ier=o("LayoutLMForTokenClassification"),der=o(" (LayoutLM model)"),cer=l(),lT=a("li"),tbe=a("strong"),mer=o("layoutlmv2"),fer=o(" \u2014 "),EW=a("a"),ger=o("LayoutLMv2ForTokenClassification"),her=o(" (LayoutLMv2 model)"),uer=l(),iT=a("li"),abe=a("strong"),per=o("layoutlmv3"),_er=o(" \u2014 "),CW=a("a"),ber=o("LayoutLMv3ForTokenClassification"),ver=o(" (LayoutLMv3 model)"),Fer=l(),dT=a("li"),nbe=a("strong"),Ter=o("longformer"),Mer=o(" \u2014 "),wW=a("a"),Eer=o("LongformerForTokenClassification"),Cer=o(" (Longformer model)"),wer=l(),cT=a("li"),sbe=a("strong"),Aer=o("megatron-bert"),Ler=o(" \u2014 "),AW=a("a"),yer=o("MegatronBertForTokenClassification"),xer=o(" (Megatron-BERT model)"),$er=l(),mT=a("li"),lbe=a("strong"),ker=o("mobilebert"),Ser=o(" \u2014 "),LW=a("a"),Rer=o("MobileBertForTokenClassification"),Per=o(" (MobileBERT model)"),Ber=l(),fT=a("li"),ibe=a("strong"),Ier=o("mpnet"),Ner=o(" \u2014 "),yW=a("a"),qer=o("MPNetForTokenClassification"),jer=o(" (MPNet model)"),Der=l(),gT=a("li"),dbe=a("strong"),Ger=o("nezha"),Oer=o(" \u2014 "),xW=a("a"),Ver=o("NezhaForTokenClassification"),Xer=o(" (Nezha model)"),zer=l(),hT=a("li"),cbe=a("strong"),Wer=o("nystromformer"),Qer=o(" \u2014 "),$W=a("a"),Her=o("NystromformerForTokenClassification"),Uer=o(" (Nystr\xF6mformer model)"),Jer=l(),uT=a("li"),mbe=a("strong"),Yer=o("qdqbert"),Ker=o(" \u2014 "),kW=a("a"),Zer=o("QDQBertForTokenClassification"),eor=o(" (QDQBert model)"),oor=l(),pT=a("li"),fbe=a("strong"),ror=o("rembert"),tor=o(" \u2014 "),SW=a("a"),aor=o("RemBertForTokenClassification"),nor=o(" (RemBERT model)"),sor=l(),_T=a("li"),gbe=a("strong"),lor=o("roberta"),ior=o(" \u2014 "),RW=a("a"),dor=o("RobertaForTokenClassification"),cor=o(" (RoBERTa model)"),mor=l(),bT=a("li"),hbe=a("strong"),gor=o("roformer"),hor=o(" \u2014 "),PW=a("a"),uor=o("RoFormerForTokenClassification"),por=o(" (RoFormer model)"),_or=l(),vT=a("li"),ube=a("strong"),bor=o("squeezebert"),vor=o(" \u2014 "),BW=a("a"),For=o("SqueezeBertForTokenClassification"),Tor=o(" (SqueezeBERT model)"),Mor=l(),FT=a("li"),pbe=a("strong"),Eor=o("xlm"),Cor=o(" \u2014 "),IW=a("a"),wor=o("XLMForTokenClassification"),Aor=o(" (XLM model)"),Lor=l(),TT=a("li"),_be=a("strong"),yor=o("xlm-roberta"),xor=o(" \u2014 "),NW=a("a"),$or=o("XLMRobertaForTokenClassification"),kor=o(" (XLM-RoBERTa model)"),Sor=l(),MT=a("li"),bbe=a("strong"),Ror=o("xlm-roberta-xl"),Por=o(" \u2014 "),qW=a("a"),Bor=o("XLMRobertaXLForTokenClassification"),Ior=o(" (XLM-RoBERTa-XL model)"),Nor=l(),ET=a("li"),vbe=a("strong"),qor=o("xlnet"),jor=o(" \u2014 "),jW=a("a"),Dor=o("XLNetForTokenClassification"),Gor=o(" (XLNet model)"),Oor=l(),CT=a("li"),Fbe=a("strong"),Vor=o("yoso"),Xor=o(" \u2014 "),DW=a("a"),zor=o("YosoForTokenClassification"),Wor=o(" (YOSO model)"),Qor=l(),wT=a("p"),Hor=o("The model is set in evaluation mode by default using "),Tbe=a("code"),Uor=o("model.eval()"),Jor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mbe=a("code"),Yor=o("model.train()"),Kor=l(),F(AT.$$.fragment),Fze=l(),pd=a("h2"),LT=a("a"),Ebe=a("span"),F(S8.$$.fragment),Zor=l(),Cbe=a("span"),err=o("AutoModelForQuestionAnswering"),Tze=l(),Go=a("div"),F(R8.$$.fragment),orr=l(),_d=a("p"),rrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GW=a("a"),trr=o("from_pretrained()"),arr=o(" class method or the "),OW=a("a"),nrr=o("from_config()"),srr=o(` class
method.`),lrr=l(),P8=a("p"),irr=o("This class cannot be instantiated directly using "),wbe=a("code"),drr=o("__init__()"),crr=o(" (throws an error)."),mrr=l(),_t=a("div"),F(B8.$$.fragment),frr=l(),Abe=a("p"),grr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hrr=l(),bd=a("p"),urr=o(`Note:
Loading a model from its configuration file does `),Lbe=a("strong"),prr=o("not"),_rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),brr=o("from_pretrained()"),vrr=o(" to load the model weights."),Frr=l(),F(yT.$$.fragment),Trr=l(),so=a("div"),F(I8.$$.fragment),Mrr=l(),ybe=a("p"),Err=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Crr=l(),za=a("p"),wrr=o("The model class to instantiate is selected based on the "),xbe=a("code"),Arr=o("model_type"),Lrr=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),yrr=o("pretrained_model_name_or_path"),xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=a("code"),$rr=o("pretrained_model_name_or_path"),krr=o(":"),Srr=l(),V=a("ul"),xT=a("li"),Sbe=a("strong"),Rrr=o("albert"),Prr=o(" \u2014 "),XW=a("a"),Brr=o("AlbertForQuestionAnswering"),Irr=o(" (ALBERT model)"),Nrr=l(),$T=a("li"),Rbe=a("strong"),qrr=o("bart"),jrr=o(" \u2014 "),zW=a("a"),Drr=o("BartForQuestionAnswering"),Grr=o(" (BART model)"),Orr=l(),kT=a("li"),Pbe=a("strong"),Vrr=o("bert"),Xrr=o(" \u2014 "),WW=a("a"),zrr=o("BertForQuestionAnswering"),Wrr=o(" (BERT model)"),Qrr=l(),ST=a("li"),Bbe=a("strong"),Hrr=o("big_bird"),Urr=o(" \u2014 "),QW=a("a"),Jrr=o("BigBirdForQuestionAnswering"),Yrr=o(" (BigBird model)"),Krr=l(),RT=a("li"),Ibe=a("strong"),Zrr=o("bigbird_pegasus"),etr=o(" \u2014 "),HW=a("a"),otr=o("BigBirdPegasusForQuestionAnswering"),rtr=o(" (BigBird-Pegasus model)"),ttr=l(),PT=a("li"),Nbe=a("strong"),atr=o("camembert"),ntr=o(" \u2014 "),UW=a("a"),str=o("CamembertForQuestionAnswering"),ltr=o(" (CamemBERT model)"),itr=l(),BT=a("li"),qbe=a("strong"),dtr=o("canine"),ctr=o(" \u2014 "),JW=a("a"),mtr=o("CanineForQuestionAnswering"),ftr=o(" (CANINE model)"),gtr=l(),IT=a("li"),jbe=a("strong"),htr=o("convbert"),utr=o(" \u2014 "),YW=a("a"),ptr=o("ConvBertForQuestionAnswering"),_tr=o(" (ConvBERT model)"),btr=l(),NT=a("li"),Dbe=a("strong"),vtr=o("data2vec-text"),Ftr=o(" \u2014 "),KW=a("a"),Ttr=o("Data2VecTextForQuestionAnswering"),Mtr=o(" (Data2VecText model)"),Etr=l(),qT=a("li"),Gbe=a("strong"),Ctr=o("deberta"),wtr=o(" \u2014 "),ZW=a("a"),Atr=o("DebertaForQuestionAnswering"),Ltr=o(" (DeBERTa model)"),ytr=l(),jT=a("li"),Obe=a("strong"),xtr=o("deberta-v2"),$tr=o(" \u2014 "),eQ=a("a"),ktr=o("DebertaV2ForQuestionAnswering"),Str=o(" (DeBERTa-v2 model)"),Rtr=l(),DT=a("li"),Vbe=a("strong"),Ptr=o("distilbert"),Btr=o(" \u2014 "),oQ=a("a"),Itr=o("DistilBertForQuestionAnswering"),Ntr=o(" (DistilBERT model)"),qtr=l(),GT=a("li"),Xbe=a("strong"),jtr=o("electra"),Dtr=o(" \u2014 "),rQ=a("a"),Gtr=o("ElectraForQuestionAnswering"),Otr=o(" (ELECTRA model)"),Vtr=l(),OT=a("li"),zbe=a("strong"),Xtr=o("flaubert"),ztr=o(" \u2014 "),tQ=a("a"),Wtr=o("FlaubertForQuestionAnsweringSimple"),Qtr=o(" (FlauBERT model)"),Htr=l(),VT=a("li"),Wbe=a("strong"),Utr=o("fnet"),Jtr=o(" \u2014 "),aQ=a("a"),Ytr=o("FNetForQuestionAnswering"),Ktr=o(" (FNet model)"),Ztr=l(),XT=a("li"),Qbe=a("strong"),ear=o("funnel"),oar=o(" \u2014 "),nQ=a("a"),rar=o("FunnelForQuestionAnswering"),tar=o(" (Funnel Transformer model)"),aar=l(),zT=a("li"),Hbe=a("strong"),nar=o("gptj"),sar=o(" \u2014 "),sQ=a("a"),lar=o("GPTJForQuestionAnswering"),iar=o(" (GPT-J model)"),dar=l(),WT=a("li"),Ube=a("strong"),car=o("ibert"),mar=o(" \u2014 "),lQ=a("a"),far=o("IBertForQuestionAnswering"),gar=o(" (I-BERT model)"),har=l(),QT=a("li"),Jbe=a("strong"),uar=o("layoutlmv2"),par=o(" \u2014 "),iQ=a("a"),_ar=o("LayoutLMv2ForQuestionAnswering"),bar=o(" (LayoutLMv2 model)"),Far=l(),HT=a("li"),Ybe=a("strong"),Tar=o("layoutlmv3"),Mar=o(" \u2014 "),dQ=a("a"),Ear=o("LayoutLMv3ForQuestionAnswering"),Car=o(" (LayoutLMv3 model)"),war=l(),UT=a("li"),Kbe=a("strong"),Aar=o("led"),Lar=o(" \u2014 "),cQ=a("a"),yar=o("LEDForQuestionAnswering"),xar=o(" (LED model)"),$ar=l(),JT=a("li"),Zbe=a("strong"),kar=o("longformer"),Sar=o(" \u2014 "),mQ=a("a"),Rar=o("LongformerForQuestionAnswering"),Par=o(" (Longformer model)"),Bar=l(),YT=a("li"),eve=a("strong"),Iar=o("lxmert"),Nar=o(" \u2014 "),fQ=a("a"),qar=o("LxmertForQuestionAnswering"),jar=o(" (LXMERT model)"),Dar=l(),KT=a("li"),ove=a("strong"),Gar=o("mbart"),Oar=o(" \u2014 "),gQ=a("a"),Var=o("MBartForQuestionAnswering"),Xar=o(" (mBART model)"),zar=l(),ZT=a("li"),rve=a("strong"),War=o("megatron-bert"),Qar=o(" \u2014 "),hQ=a("a"),Har=o("MegatronBertForQuestionAnswering"),Uar=o(" (Megatron-BERT model)"),Jar=l(),eM=a("li"),tve=a("strong"),Yar=o("mobilebert"),Kar=o(" \u2014 "),uQ=a("a"),Zar=o("MobileBertForQuestionAnswering"),enr=o(" (MobileBERT model)"),onr=l(),oM=a("li"),ave=a("strong"),rnr=o("mpnet"),tnr=o(" \u2014 "),pQ=a("a"),anr=o("MPNetForQuestionAnswering"),nnr=o(" (MPNet model)"),snr=l(),rM=a("li"),nve=a("strong"),lnr=o("mvp"),inr=o(" \u2014 "),_Q=a("a"),dnr=o("MvpForQuestionAnswering"),cnr=o(" (MVP model)"),mnr=l(),tM=a("li"),sve=a("strong"),fnr=o("nezha"),gnr=o(" \u2014 "),bQ=a("a"),hnr=o("NezhaForQuestionAnswering"),unr=o(" (Nezha model)"),pnr=l(),aM=a("li"),lve=a("strong"),_nr=o("nystromformer"),bnr=o(" \u2014 "),vQ=a("a"),vnr=o("NystromformerForQuestionAnswering"),Fnr=o(" (Nystr\xF6mformer model)"),Tnr=l(),nM=a("li"),ive=a("strong"),Mnr=o("qdqbert"),Enr=o(" \u2014 "),FQ=a("a"),Cnr=o("QDQBertForQuestionAnswering"),wnr=o(" (QDQBert model)"),Anr=l(),sM=a("li"),dve=a("strong"),Lnr=o("reformer"),ynr=o(" \u2014 "),TQ=a("a"),xnr=o("ReformerForQuestionAnswering"),$nr=o(" (Reformer model)"),knr=l(),lM=a("li"),cve=a("strong"),Snr=o("rembert"),Rnr=o(" \u2014 "),MQ=a("a"),Pnr=o("RemBertForQuestionAnswering"),Bnr=o(" (RemBERT model)"),Inr=l(),iM=a("li"),mve=a("strong"),Nnr=o("roberta"),qnr=o(" \u2014 "),EQ=a("a"),jnr=o("RobertaForQuestionAnswering"),Dnr=o(" (RoBERTa model)"),Gnr=l(),dM=a("li"),fve=a("strong"),Onr=o("roformer"),Vnr=o(" \u2014 "),CQ=a("a"),Xnr=o("RoFormerForQuestionAnswering"),znr=o(" (RoFormer model)"),Wnr=l(),cM=a("li"),gve=a("strong"),Qnr=o("splinter"),Hnr=o(" \u2014 "),wQ=a("a"),Unr=o("SplinterForQuestionAnswering"),Jnr=o(" (Splinter model)"),Ynr=l(),mM=a("li"),hve=a("strong"),Knr=o("squeezebert"),Znr=o(" \u2014 "),AQ=a("a"),esr=o("SqueezeBertForQuestionAnswering"),osr=o(" (SqueezeBERT model)"),rsr=l(),fM=a("li"),uve=a("strong"),tsr=o("xlm"),asr=o(" \u2014 "),LQ=a("a"),nsr=o("XLMForQuestionAnsweringSimple"),ssr=o(" (XLM model)"),lsr=l(),gM=a("li"),pve=a("strong"),isr=o("xlm-roberta"),dsr=o(" \u2014 "),yQ=a("a"),csr=o("XLMRobertaForQuestionAnswering"),msr=o(" (XLM-RoBERTa model)"),fsr=l(),hM=a("li"),_ve=a("strong"),gsr=o("xlm-roberta-xl"),hsr=o(" \u2014 "),xQ=a("a"),usr=o("XLMRobertaXLForQuestionAnswering"),psr=o(" (XLM-RoBERTa-XL model)"),_sr=l(),uM=a("li"),bve=a("strong"),bsr=o("xlnet"),vsr=o(" \u2014 "),$Q=a("a"),Fsr=o("XLNetForQuestionAnsweringSimple"),Tsr=o(" (XLNet model)"),Msr=l(),pM=a("li"),vve=a("strong"),Esr=o("yoso"),Csr=o(" \u2014 "),kQ=a("a"),wsr=o("YosoForQuestionAnswering"),Asr=o(" (YOSO model)"),Lsr=l(),_M=a("p"),ysr=o("The model is set in evaluation mode by default using "),Fve=a("code"),xsr=o("model.eval()"),$sr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tve=a("code"),ksr=o("model.train()"),Ssr=l(),F(bM.$$.fragment),Mze=l(),vd=a("h2"),vM=a("a"),Mve=a("span"),F(N8.$$.fragment),Rsr=l(),Eve=a("span"),Psr=o("AutoModelForTableQuestionAnswering"),Eze=l(),Oo=a("div"),F(q8.$$.fragment),Bsr=l(),Fd=a("p"),Isr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SQ=a("a"),Nsr=o("from_pretrained()"),qsr=o(" class method or the "),RQ=a("a"),jsr=o("from_config()"),Dsr=o(` class
method.`),Gsr=l(),j8=a("p"),Osr=o("This class cannot be instantiated directly using "),Cve=a("code"),Vsr=o("__init__()"),Xsr=o(" (throws an error)."),zsr=l(),bt=a("div"),F(D8.$$.fragment),Wsr=l(),wve=a("p"),Qsr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Hsr=l(),Td=a("p"),Usr=o(`Note:
Loading a model from its configuration file does `),Ave=a("strong"),Jsr=o("not"),Ysr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),Ksr=o("from_pretrained()"),Zsr=o(" to load the model weights."),elr=l(),F(FM.$$.fragment),olr=l(),lo=a("div"),F(G8.$$.fragment),rlr=l(),Lve=a("p"),tlr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),alr=l(),Wa=a("p"),nlr=o("The model class to instantiate is selected based on the "),yve=a("code"),slr=o("model_type"),llr=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),ilr=o("pretrained_model_name_or_path"),dlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=a("code"),clr=o("pretrained_model_name_or_path"),mlr=o(":"),flr=l(),kve=a("ul"),TM=a("li"),Sve=a("strong"),glr=o("tapas"),hlr=o(" \u2014 "),BQ=a("a"),ulr=o("TapasForQuestionAnswering"),plr=o(" (TAPAS model)"),_lr=l(),MM=a("p"),blr=o("The model is set in evaluation mode by default using "),Rve=a("code"),vlr=o("model.eval()"),Flr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=a("code"),Tlr=o("model.train()"),Mlr=l(),F(EM.$$.fragment),Cze=l(),Md=a("h2"),CM=a("a"),Bve=a("span"),F(O8.$$.fragment),Elr=l(),Ive=a("span"),Clr=o("AutoModelForImageClassification"),wze=l(),Vo=a("div"),F(V8.$$.fragment),wlr=l(),Ed=a("p"),Alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IQ=a("a"),Llr=o("from_pretrained()"),ylr=o(" class method or the "),NQ=a("a"),xlr=o("from_config()"),$lr=o(` class
method.`),klr=l(),X8=a("p"),Slr=o("This class cannot be instantiated directly using "),Nve=a("code"),Rlr=o("__init__()"),Plr=o(" (throws an error)."),Blr=l(),vt=a("div"),F(z8.$$.fragment),Ilr=l(),qve=a("p"),Nlr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qlr=l(),Cd=a("p"),jlr=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),Dlr=o("not"),Glr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=a("a"),Olr=o("from_pretrained()"),Vlr=o(" to load the model weights."),Xlr=l(),F(wM.$$.fragment),zlr=l(),io=a("div"),F(W8.$$.fragment),Wlr=l(),Dve=a("p"),Qlr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hlr=l(),Qa=a("p"),Ulr=o("The model class to instantiate is selected based on the "),Gve=a("code"),Jlr=o("model_type"),Ylr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),Klr=o("pretrained_model_name_or_path"),Zlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),eir=o("pretrained_model_name_or_path"),oir=o(":"),rir=l(),ve=a("ul"),AM=a("li"),Xve=a("strong"),tir=o("beit"),air=o(" \u2014 "),jQ=a("a"),nir=o("BeitForImageClassification"),sir=o(" (BEiT model)"),lir=l(),LM=a("li"),zve=a("strong"),iir=o("convnext"),dir=o(" \u2014 "),DQ=a("a"),cir=o("ConvNextForImageClassification"),mir=o(" (ConvNeXT model)"),fir=l(),yM=a("li"),Wve=a("strong"),gir=o("cvt"),hir=o(" \u2014 "),GQ=a("a"),uir=o("CvtForImageClassification"),pir=o(" (CvT model)"),_ir=l(),xM=a("li"),Qve=a("strong"),bir=o("data2vec-vision"),vir=o(" \u2014 "),OQ=a("a"),Fir=o("Data2VecVisionForImageClassification"),Tir=o(" (Data2VecVision model)"),Mir=l(),Js=a("li"),Hve=a("strong"),Eir=o("deit"),Cir=o(" \u2014 "),VQ=a("a"),wir=o("DeiTForImageClassification"),Air=o(" or "),XQ=a("a"),Lir=o("DeiTForImageClassificationWithTeacher"),yir=o(" (DeiT model)"),xir=l(),$M=a("li"),Uve=a("strong"),$ir=o("imagegpt"),kir=o(" \u2014 "),zQ=a("a"),Sir=o("ImageGPTForImageClassification"),Rir=o(" (ImageGPT model)"),Pir=l(),Ys=a("li"),Jve=a("strong"),Bir=o("levit"),Iir=o(" \u2014 "),WQ=a("a"),Nir=o("LevitForImageClassification"),qir=o(" or "),QQ=a("a"),jir=o("LevitForImageClassificationWithTeacher"),Dir=o(" (LeViT model)"),Gir=l(),kM=a("li"),Yve=a("strong"),Oir=o("mobilevit"),Vir=o(" \u2014 "),HQ=a("a"),Xir=o("MobileViTForImageClassification"),zir=o(" (MobileViT model)"),Wir=l(),Ft=a("li"),Kve=a("strong"),Qir=o("perceiver"),Hir=o(" \u2014 "),UQ=a("a"),Uir=o("PerceiverForImageClassificationLearned"),Jir=o(" or "),JQ=a("a"),Yir=o("PerceiverForImageClassificationFourier"),Kir=o(" or "),YQ=a("a"),Zir=o("PerceiverForImageClassificationConvProcessing"),edr=o(" (Perceiver model)"),odr=l(),SM=a("li"),Zve=a("strong"),rdr=o("poolformer"),tdr=o(" \u2014 "),KQ=a("a"),adr=o("PoolFormerForImageClassification"),ndr=o(" (PoolFormer model)"),sdr=l(),RM=a("li"),e1e=a("strong"),ldr=o("regnet"),idr=o(" \u2014 "),ZQ=a("a"),ddr=o("RegNetForImageClassification"),cdr=o(" (RegNet model)"),mdr=l(),PM=a("li"),o1e=a("strong"),fdr=o("resnet"),gdr=o(" \u2014 "),eH=a("a"),hdr=o("ResNetForImageClassification"),udr=o(" (ResNet model)"),pdr=l(),BM=a("li"),r1e=a("strong"),_dr=o("segformer"),bdr=o(" \u2014 "),oH=a("a"),vdr=o("SegformerForImageClassification"),Fdr=o(" (SegFormer model)"),Tdr=l(),IM=a("li"),t1e=a("strong"),Mdr=o("swin"),Edr=o(" \u2014 "),rH=a("a"),Cdr=o("SwinForImageClassification"),wdr=o(" (Swin Transformer model)"),Adr=l(),NM=a("li"),a1e=a("strong"),Ldr=o("van"),ydr=o(" \u2014 "),tH=a("a"),xdr=o("VanForImageClassification"),$dr=o(" (VAN model)"),kdr=l(),qM=a("li"),n1e=a("strong"),Sdr=o("vit"),Rdr=o(" \u2014 "),aH=a("a"),Pdr=o("ViTForImageClassification"),Bdr=o(" (ViT model)"),Idr=l(),jM=a("p"),Ndr=o("The model is set in evaluation mode by default using "),s1e=a("code"),qdr=o("model.eval()"),jdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l1e=a("code"),Ddr=o("model.train()"),Gdr=l(),F(DM.$$.fragment),Aze=l(),wd=a("h2"),GM=a("a"),i1e=a("span"),F(Q8.$$.fragment),Odr=l(),d1e=a("span"),Vdr=o("AutoModelForVision2Seq"),Lze=l(),Xo=a("div"),F(H8.$$.fragment),Xdr=l(),Ad=a("p"),zdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nH=a("a"),Wdr=o("from_pretrained()"),Qdr=o(" class method or the "),sH=a("a"),Hdr=o("from_config()"),Udr=o(` class
method.`),Jdr=l(),U8=a("p"),Ydr=o("This class cannot be instantiated directly using "),c1e=a("code"),Kdr=o("__init__()"),Zdr=o(" (throws an error)."),ecr=l(),Tt=a("div"),F(J8.$$.fragment),ocr=l(),m1e=a("p"),rcr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tcr=l(),Ld=a("p"),acr=o(`Note:
Loading a model from its configuration file does `),f1e=a("strong"),ncr=o("not"),scr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),lcr=o("from_pretrained()"),icr=o(" to load the model weights."),dcr=l(),F(OM.$$.fragment),ccr=l(),co=a("div"),F(Y8.$$.fragment),mcr=l(),g1e=a("p"),fcr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gcr=l(),Ha=a("p"),hcr=o("The model class to instantiate is selected based on the "),h1e=a("code"),ucr=o("model_type"),pcr=o(` property of the config object (either
passed as an argument or loaded from `),u1e=a("code"),_cr=o("pretrained_model_name_or_path"),bcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=a("code"),vcr=o("pretrained_model_name_or_path"),Fcr=o(":"),Tcr=l(),_1e=a("ul"),VM=a("li"),b1e=a("strong"),Mcr=o("vision-encoder-decoder"),Ecr=o(" \u2014 "),iH=a("a"),Ccr=o("VisionEncoderDecoderModel"),wcr=o(" (Vision Encoder decoder model)"),Acr=l(),XM=a("p"),Lcr=o("The model is set in evaluation mode by default using "),v1e=a("code"),ycr=o("model.eval()"),xcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F1e=a("code"),$cr=o("model.train()"),kcr=l(),F(zM.$$.fragment),yze=l(),yd=a("h2"),WM=a("a"),T1e=a("span"),F(K8.$$.fragment),Scr=l(),M1e=a("span"),Rcr=o("AutoModelForVisualQuestionAnswering"),xze=l(),zo=a("div"),F(Z8.$$.fragment),Pcr=l(),xd=a("p"),Bcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),dH=a("a"),Icr=o("from_pretrained()"),Ncr=o(" class method or the "),cH=a("a"),qcr=o("from_config()"),jcr=o(` class
method.`),Dcr=l(),e9=a("p"),Gcr=o("This class cannot be instantiated directly using "),E1e=a("code"),Ocr=o("__init__()"),Vcr=o(" (throws an error)."),Xcr=l(),Mt=a("div"),F(o9.$$.fragment),zcr=l(),C1e=a("p"),Wcr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Qcr=l(),$d=a("p"),Hcr=o(`Note:
Loading a model from its configuration file does `),w1e=a("strong"),Ucr=o("not"),Jcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),Ycr=o("from_pretrained()"),Kcr=o(" to load the model weights."),Zcr=l(),F(QM.$$.fragment),emr=l(),mo=a("div"),F(r9.$$.fragment),omr=l(),A1e=a("p"),rmr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),tmr=l(),Ua=a("p"),amr=o("The model class to instantiate is selected based on the "),L1e=a("code"),nmr=o("model_type"),smr=o(` property of the config object (either
passed as an argument or loaded from `),y1e=a("code"),lmr=o("pretrained_model_name_or_path"),imr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=a("code"),dmr=o("pretrained_model_name_or_path"),cmr=o(":"),mmr=l(),$1e=a("ul"),HM=a("li"),k1e=a("strong"),fmr=o("vilt"),gmr=o(" \u2014 "),fH=a("a"),hmr=o("ViltForQuestionAnswering"),umr=o(" (ViLT model)"),pmr=l(),UM=a("p"),_mr=o("The model is set in evaluation mode by default using "),S1e=a("code"),bmr=o("model.eval()"),vmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R1e=a("code"),Fmr=o("model.train()"),Tmr=l(),F(JM.$$.fragment),$ze=l(),kd=a("h2"),YM=a("a"),P1e=a("span"),F(t9.$$.fragment),Mmr=l(),B1e=a("span"),Emr=o("AutoModelForAudioClassification"),kze=l(),Wo=a("div"),F(a9.$$.fragment),Cmr=l(),Sd=a("p"),wmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),gH=a("a"),Amr=o("from_pretrained()"),Lmr=o(" class method or the "),hH=a("a"),ymr=o("from_config()"),xmr=o(` class
method.`),$mr=l(),n9=a("p"),kmr=o("This class cannot be instantiated directly using "),I1e=a("code"),Smr=o("__init__()"),Rmr=o(" (throws an error)."),Pmr=l(),Et=a("div"),F(s9.$$.fragment),Bmr=l(),N1e=a("p"),Imr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Nmr=l(),Rd=a("p"),qmr=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),jmr=o("not"),Dmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),Gmr=o("from_pretrained()"),Omr=o(" to load the model weights."),Vmr=l(),F(KM.$$.fragment),Xmr=l(),fo=a("div"),F(l9.$$.fragment),zmr=l(),j1e=a("p"),Wmr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Qmr=l(),Ja=a("p"),Hmr=o("The model class to instantiate is selected based on the "),D1e=a("code"),Umr=o("model_type"),Jmr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),Ymr=o("pretrained_model_name_or_path"),Kmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),Zmr=o("pretrained_model_name_or_path"),efr=o(":"),ofr=l(),Pe=a("ul"),ZM=a("li"),V1e=a("strong"),rfr=o("data2vec-audio"),tfr=o(" \u2014 "),pH=a("a"),afr=o("Data2VecAudioForSequenceClassification"),nfr=o(" (Data2VecAudio model)"),sfr=l(),e4=a("li"),X1e=a("strong"),lfr=o("hubert"),ifr=o(" \u2014 "),_H=a("a"),dfr=o("HubertForSequenceClassification"),cfr=o(" (Hubert model)"),mfr=l(),o4=a("li"),z1e=a("strong"),ffr=o("sew"),gfr=o(" \u2014 "),bH=a("a"),hfr=o("SEWForSequenceClassification"),ufr=o(" (SEW model)"),pfr=l(),r4=a("li"),W1e=a("strong"),_fr=o("sew-d"),bfr=o(" \u2014 "),vH=a("a"),vfr=o("SEWDForSequenceClassification"),Ffr=o(" (SEW-D model)"),Tfr=l(),t4=a("li"),Q1e=a("strong"),Mfr=o("unispeech"),Efr=o(" \u2014 "),FH=a("a"),Cfr=o("UniSpeechForSequenceClassification"),wfr=o(" (UniSpeech model)"),Afr=l(),a4=a("li"),H1e=a("strong"),Lfr=o("unispeech-sat"),yfr=o(" \u2014 "),TH=a("a"),xfr=o("UniSpeechSatForSequenceClassification"),$fr=o(" (UniSpeechSat model)"),kfr=l(),n4=a("li"),U1e=a("strong"),Sfr=o("wav2vec2"),Rfr=o(" \u2014 "),MH=a("a"),Pfr=o("Wav2Vec2ForSequenceClassification"),Bfr=o(" (Wav2Vec2 model)"),Ifr=l(),s4=a("li"),J1e=a("strong"),Nfr=o("wav2vec2-conformer"),qfr=o(" \u2014 "),EH=a("a"),jfr=o("Wav2Vec2ConformerForSequenceClassification"),Dfr=o(" (Wav2Vec2-Conformer model)"),Gfr=l(),l4=a("li"),Y1e=a("strong"),Ofr=o("wavlm"),Vfr=o(" \u2014 "),CH=a("a"),Xfr=o("WavLMForSequenceClassification"),zfr=o(" (WavLM model)"),Wfr=l(),i4=a("p"),Qfr=o("The model is set in evaluation mode by default using "),K1e=a("code"),Hfr=o("model.eval()"),Ufr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z1e=a("code"),Jfr=o("model.train()"),Yfr=l(),F(d4.$$.fragment),Sze=l(),Pd=a("h2"),c4=a("a"),eFe=a("span"),F(i9.$$.fragment),Kfr=l(),oFe=a("span"),Zfr=o("AutoModelForAudioFrameClassification"),Rze=l(),Qo=a("div"),F(d9.$$.fragment),egr=l(),Bd=a("p"),ogr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),wH=a("a"),rgr=o("from_pretrained()"),tgr=o(" class method or the "),AH=a("a"),agr=o("from_config()"),ngr=o(` class
method.`),sgr=l(),c9=a("p"),lgr=o("This class cannot be instantiated directly using "),rFe=a("code"),igr=o("__init__()"),dgr=o(" (throws an error)."),cgr=l(),Ct=a("div"),F(m9.$$.fragment),mgr=l(),tFe=a("p"),fgr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ggr=l(),Id=a("p"),hgr=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),ugr=o("not"),pgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=a("a"),_gr=o("from_pretrained()"),bgr=o(" to load the model weights."),vgr=l(),F(m4.$$.fragment),Fgr=l(),go=a("div"),F(f9.$$.fragment),Tgr=l(),nFe=a("p"),Mgr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Egr=l(),Ya=a("p"),Cgr=o("The model class to instantiate is selected based on the "),sFe=a("code"),wgr=o("model_type"),Agr=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),Lgr=o("pretrained_model_name_or_path"),ygr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),xgr=o("pretrained_model_name_or_path"),$gr=o(":"),kgr=l(),rt=a("ul"),f4=a("li"),dFe=a("strong"),Sgr=o("data2vec-audio"),Rgr=o(" \u2014 "),yH=a("a"),Pgr=o("Data2VecAudioForAudioFrameClassification"),Bgr=o(" (Data2VecAudio model)"),Igr=l(),g4=a("li"),cFe=a("strong"),Ngr=o("unispeech-sat"),qgr=o(" \u2014 "),xH=a("a"),jgr=o("UniSpeechSatForAudioFrameClassification"),Dgr=o(" (UniSpeechSat model)"),Ggr=l(),h4=a("li"),mFe=a("strong"),Ogr=o("wav2vec2"),Vgr=o(" \u2014 "),$H=a("a"),Xgr=o("Wav2Vec2ForAudioFrameClassification"),zgr=o(" (Wav2Vec2 model)"),Wgr=l(),u4=a("li"),fFe=a("strong"),Qgr=o("wav2vec2-conformer"),Hgr=o(" \u2014 "),kH=a("a"),Ugr=o("Wav2Vec2ConformerForAudioFrameClassification"),Jgr=o(" (Wav2Vec2-Conformer model)"),Ygr=l(),p4=a("li"),gFe=a("strong"),Kgr=o("wavlm"),Zgr=o(" \u2014 "),SH=a("a"),ehr=o("WavLMForAudioFrameClassification"),ohr=o(" (WavLM model)"),rhr=l(),_4=a("p"),thr=o("The model is set in evaluation mode by default using "),hFe=a("code"),ahr=o("model.eval()"),nhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=a("code"),shr=o("model.train()"),lhr=l(),F(b4.$$.fragment),Pze=l(),Nd=a("h2"),v4=a("a"),pFe=a("span"),F(g9.$$.fragment),ihr=l(),_Fe=a("span"),dhr=o("AutoModelForCTC"),Bze=l(),Ho=a("div"),F(h9.$$.fragment),chr=l(),qd=a("p"),mhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),RH=a("a"),fhr=o("from_pretrained()"),ghr=o(" class method or the "),PH=a("a"),hhr=o("from_config()"),uhr=o(` class
method.`),phr=l(),u9=a("p"),_hr=o("This class cannot be instantiated directly using "),bFe=a("code"),bhr=o("__init__()"),vhr=o(" (throws an error)."),Fhr=l(),wt=a("div"),F(p9.$$.fragment),Thr=l(),vFe=a("p"),Mhr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ehr=l(),jd=a("p"),Chr=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),whr=o("not"),Ahr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),Lhr=o("from_pretrained()"),yhr=o(" to load the model weights."),xhr=l(),F(F4.$$.fragment),$hr=l(),ho=a("div"),F(_9.$$.fragment),khr=l(),TFe=a("p"),Shr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Rhr=l(),Ka=a("p"),Phr=o("The model class to instantiate is selected based on the "),MFe=a("code"),Bhr=o("model_type"),Ihr=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),Nhr=o("pretrained_model_name_or_path"),qhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),jhr=o("pretrained_model_name_or_path"),Dhr=o(":"),Ghr=l(),Le=a("ul"),T4=a("li"),wFe=a("strong"),Ohr=o("data2vec-audio"),Vhr=o(" \u2014 "),IH=a("a"),Xhr=o("Data2VecAudioForCTC"),zhr=o(" (Data2VecAudio model)"),Whr=l(),M4=a("li"),AFe=a("strong"),Qhr=o("hubert"),Hhr=o(" \u2014 "),NH=a("a"),Uhr=o("HubertForCTC"),Jhr=o(" (Hubert model)"),Yhr=l(),E4=a("li"),LFe=a("strong"),Khr=o("mctct"),Zhr=o(" \u2014 "),qH=a("a"),eur=o("MCTCTForCTC"),our=o(" (M-CTC-T model)"),rur=l(),C4=a("li"),yFe=a("strong"),tur=o("sew"),aur=o(" \u2014 "),jH=a("a"),nur=o("SEWForCTC"),sur=o(" (SEW model)"),lur=l(),w4=a("li"),xFe=a("strong"),iur=o("sew-d"),dur=o(" \u2014 "),DH=a("a"),cur=o("SEWDForCTC"),mur=o(" (SEW-D model)"),fur=l(),A4=a("li"),$Fe=a("strong"),gur=o("unispeech"),hur=o(" \u2014 "),GH=a("a"),uur=o("UniSpeechForCTC"),pur=o(" (UniSpeech model)"),_ur=l(),L4=a("li"),kFe=a("strong"),bur=o("unispeech-sat"),vur=o(" \u2014 "),OH=a("a"),Fur=o("UniSpeechSatForCTC"),Tur=o(" (UniSpeechSat model)"),Mur=l(),y4=a("li"),SFe=a("strong"),Eur=o("wav2vec2"),Cur=o(" \u2014 "),VH=a("a"),wur=o("Wav2Vec2ForCTC"),Aur=o(" (Wav2Vec2 model)"),Lur=l(),x4=a("li"),RFe=a("strong"),yur=o("wav2vec2-conformer"),xur=o(" \u2014 "),XH=a("a"),$ur=o("Wav2Vec2ConformerForCTC"),kur=o(" (Wav2Vec2-Conformer model)"),Sur=l(),$4=a("li"),PFe=a("strong"),Rur=o("wavlm"),Pur=o(" \u2014 "),zH=a("a"),Bur=o("WavLMForCTC"),Iur=o(" (WavLM model)"),Nur=l(),k4=a("p"),qur=o("The model is set in evaluation mode by default using "),BFe=a("code"),jur=o("model.eval()"),Dur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=a("code"),Gur=o("model.train()"),Our=l(),F(S4.$$.fragment),Ize=l(),Dd=a("h2"),R4=a("a"),NFe=a("span"),F(b9.$$.fragment),Vur=l(),qFe=a("span"),Xur=o("AutoModelForSpeechSeq2Seq"),Nze=l(),Uo=a("div"),F(v9.$$.fragment),zur=l(),Gd=a("p"),Wur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WH=a("a"),Qur=o("from_pretrained()"),Hur=o(" class method or the "),QH=a("a"),Uur=o("from_config()"),Jur=o(` class
method.`),Yur=l(),F9=a("p"),Kur=o("This class cannot be instantiated directly using "),jFe=a("code"),Zur=o("__init__()"),epr=o(" (throws an error)."),opr=l(),At=a("div"),F(T9.$$.fragment),rpr=l(),DFe=a("p"),tpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),apr=l(),Od=a("p"),npr=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),spr=o("not"),lpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),ipr=o("from_pretrained()"),dpr=o(" to load the model weights."),cpr=l(),F(P4.$$.fragment),mpr=l(),uo=a("div"),F(M9.$$.fragment),fpr=l(),OFe=a("p"),gpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hpr=l(),Za=a("p"),upr=o("The model class to instantiate is selected based on the "),VFe=a("code"),ppr=o("model_type"),_pr=o(` property of the config object (either
passed as an argument or loaded from `),XFe=a("code"),bpr=o("pretrained_model_name_or_path"),vpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=a("code"),Fpr=o("pretrained_model_name_or_path"),Tpr=o(":"),Mpr=l(),E9=a("ul"),B4=a("li"),WFe=a("strong"),Epr=o("speech-encoder-decoder"),Cpr=o(" \u2014 "),UH=a("a"),wpr=o("SpeechEncoderDecoderModel"),Apr=o(" (Speech Encoder decoder model)"),Lpr=l(),I4=a("li"),QFe=a("strong"),ypr=o("speech_to_text"),xpr=o(" \u2014 "),JH=a("a"),$pr=o("Speech2TextForConditionalGeneration"),kpr=o(" (Speech2Text model)"),Spr=l(),N4=a("p"),Rpr=o("The model is set in evaluation mode by default using "),HFe=a("code"),Ppr=o("model.eval()"),Bpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UFe=a("code"),Ipr=o("model.train()"),Npr=l(),F(q4.$$.fragment),qze=l(),Vd=a("h2"),j4=a("a"),JFe=a("span"),F(C9.$$.fragment),qpr=l(),YFe=a("span"),jpr=o("AutoModelForAudioXVector"),jze=l(),Jo=a("div"),F(w9.$$.fragment),Dpr=l(),Xd=a("p"),Gpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YH=a("a"),Opr=o("from_pretrained()"),Vpr=o(" class method or the "),KH=a("a"),Xpr=o("from_config()"),zpr=o(` class
method.`),Wpr=l(),A9=a("p"),Qpr=o("This class cannot be instantiated directly using "),KFe=a("code"),Hpr=o("__init__()"),Upr=o(" (throws an error)."),Jpr=l(),Lt=a("div"),F(L9.$$.fragment),Ypr=l(),ZFe=a("p"),Kpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Zpr=l(),zd=a("p"),e_r=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),o_r=o("not"),r_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),t_r=o("from_pretrained()"),a_r=o(" to load the model weights."),n_r=l(),F(D4.$$.fragment),s_r=l(),po=a("div"),F(y9.$$.fragment),l_r=l(),oTe=a("p"),i_r=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),d_r=l(),en=a("p"),c_r=o("The model class to instantiate is selected based on the "),rTe=a("code"),m_r=o("model_type"),f_r=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),u_r=o("pretrained_model_name_or_path"),p_r=o(":"),__r=l(),tt=a("ul"),G4=a("li"),nTe=a("strong"),b_r=o("data2vec-audio"),v_r=o(" \u2014 "),eU=a("a"),F_r=o("Data2VecAudioForXVector"),T_r=o(" (Data2VecAudio model)"),M_r=l(),O4=a("li"),sTe=a("strong"),E_r=o("unispeech-sat"),C_r=o(" \u2014 "),oU=a("a"),w_r=o("UniSpeechSatForXVector"),A_r=o(" (UniSpeechSat model)"),L_r=l(),V4=a("li"),lTe=a("strong"),y_r=o("wav2vec2"),x_r=o(" \u2014 "),rU=a("a"),$_r=o("Wav2Vec2ForXVector"),k_r=o(" (Wav2Vec2 model)"),S_r=l(),X4=a("li"),iTe=a("strong"),R_r=o("wav2vec2-conformer"),P_r=o(" \u2014 "),tU=a("a"),B_r=o("Wav2Vec2ConformerForXVector"),I_r=o(" (Wav2Vec2-Conformer model)"),N_r=l(),z4=a("li"),dTe=a("strong"),q_r=o("wavlm"),j_r=o(" \u2014 "),aU=a("a"),D_r=o("WavLMForXVector"),G_r=o(" (WavLM model)"),O_r=l(),W4=a("p"),V_r=o("The model is set in evaluation mode by default using "),cTe=a("code"),X_r=o("model.eval()"),z_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mTe=a("code"),W_r=o("model.train()"),Q_r=l(),F(Q4.$$.fragment),Dze=l(),Wd=a("h2"),H4=a("a"),fTe=a("span"),F(x9.$$.fragment),H_r=l(),gTe=a("span"),U_r=o("AutoModelForMaskedImageModeling"),Gze=l(),Yo=a("div"),F($9.$$.fragment),J_r=l(),Qd=a("p"),Y_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nU=a("a"),K_r=o("from_pretrained()"),Z_r=o(" class method or the "),sU=a("a"),e2r=o("from_config()"),o2r=o(` class
method.`),r2r=l(),k9=a("p"),t2r=o("This class cannot be instantiated directly using "),hTe=a("code"),a2r=o("__init__()"),n2r=o(" (throws an error)."),s2r=l(),yt=a("div"),F(S9.$$.fragment),l2r=l(),uTe=a("p"),i2r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),d2r=l(),Hd=a("p"),c2r=o(`Note:
Loading a model from its configuration file does `),pTe=a("strong"),m2r=o("not"),f2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),g2r=o("from_pretrained()"),h2r=o(" to load the model weights."),u2r=l(),F(U4.$$.fragment),p2r=l(),_o=a("div"),F(R9.$$.fragment),_2r=l(),_Te=a("p"),b2r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),v2r=l(),on=a("p"),F2r=o("The model class to instantiate is selected based on the "),bTe=a("code"),T2r=o("model_type"),M2r=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),E2r=o("pretrained_model_name_or_path"),C2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),w2r=o("pretrained_model_name_or_path"),A2r=o(":"),L2r=l(),Ud=a("ul"),J4=a("li"),TTe=a("strong"),y2r=o("deit"),x2r=o(" \u2014 "),iU=a("a"),$2r=o("DeiTForMaskedImageModeling"),k2r=o(" (DeiT model)"),S2r=l(),Y4=a("li"),MTe=a("strong"),R2r=o("swin"),P2r=o(" \u2014 "),dU=a("a"),B2r=o("SwinForMaskedImageModeling"),I2r=o(" (Swin Transformer model)"),N2r=l(),K4=a("li"),ETe=a("strong"),q2r=o("vit"),j2r=o(" \u2014 "),cU=a("a"),D2r=o("ViTForMaskedImageModeling"),G2r=o(" (ViT model)"),O2r=l(),Z4=a("p"),V2r=o("The model is set in evaluation mode by default using "),CTe=a("code"),X2r=o("model.eval()"),z2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wTe=a("code"),W2r=o("model.train()"),Q2r=l(),F(eE.$$.fragment),Oze=l(),Jd=a("h2"),oE=a("a"),ATe=a("span"),F(P9.$$.fragment),H2r=l(),LTe=a("span"),U2r=o("AutoModelForObjectDetection"),Vze=l(),Ko=a("div"),F(B9.$$.fragment),J2r=l(),Yd=a("p"),Y2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mU=a("a"),K2r=o("from_pretrained()"),Z2r=o(" class method or the "),fU=a("a"),ebr=o("from_config()"),obr=o(` class
method.`),rbr=l(),I9=a("p"),tbr=o("This class cannot be instantiated directly using "),yTe=a("code"),abr=o("__init__()"),nbr=o(" (throws an error)."),sbr=l(),xt=a("div"),F(N9.$$.fragment),lbr=l(),xTe=a("p"),ibr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),dbr=l(),Kd=a("p"),cbr=o(`Note:
Loading a model from its configuration file does `),$Te=a("strong"),mbr=o("not"),fbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),gbr=o("from_pretrained()"),hbr=o(" to load the model weights."),ubr=l(),F(rE.$$.fragment),pbr=l(),bo=a("div"),F(q9.$$.fragment),_br=l(),kTe=a("p"),bbr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),vbr=l(),rn=a("p"),Fbr=o("The model class to instantiate is selected based on the "),STe=a("code"),Tbr=o("model_type"),Mbr=o(` property of the config object (either
passed as an argument or loaded from `),RTe=a("code"),Ebr=o("pretrained_model_name_or_path"),Cbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),wbr=o("pretrained_model_name_or_path"),Abr=o(":"),Lbr=l(),j9=a("ul"),tE=a("li"),BTe=a("strong"),ybr=o("detr"),xbr=o(" \u2014 "),hU=a("a"),$br=o("DetrForObjectDetection"),kbr=o(" (DETR model)"),Sbr=l(),aE=a("li"),ITe=a("strong"),Rbr=o("yolos"),Pbr=o(" \u2014 "),uU=a("a"),Bbr=o("YolosForObjectDetection"),Ibr=o(" (YOLOS model)"),Nbr=l(),nE=a("p"),qbr=o("The model is set in evaluation mode by default using "),NTe=a("code"),jbr=o("model.eval()"),Dbr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qTe=a("code"),Gbr=o("model.train()"),Obr=l(),F(sE.$$.fragment),Xze=l(),Zd=a("h2"),lE=a("a"),jTe=a("span"),F(D9.$$.fragment),Vbr=l(),DTe=a("span"),Xbr=o("AutoModelForImageSegmentation"),zze=l(),Zo=a("div"),F(G9.$$.fragment),zbr=l(),ec=a("p"),Wbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pU=a("a"),Qbr=o("from_pretrained()"),Hbr=o(" class method or the "),_U=a("a"),Ubr=o("from_config()"),Jbr=o(` class
method.`),Ybr=l(),O9=a("p"),Kbr=o("This class cannot be instantiated directly using "),GTe=a("code"),Zbr=o("__init__()"),evr=o(" (throws an error)."),ovr=l(),$t=a("div"),F(V9.$$.fragment),rvr=l(),OTe=a("p"),tvr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),avr=l(),oc=a("p"),nvr=o(`Note:
Loading a model from its configuration file does `),VTe=a("strong"),svr=o("not"),lvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=a("a"),ivr=o("from_pretrained()"),dvr=o(" to load the model weights."),cvr=l(),F(iE.$$.fragment),mvr=l(),vo=a("div"),F(X9.$$.fragment),fvr=l(),XTe=a("p"),gvr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),hvr=l(),tn=a("p"),uvr=o("The model class to instantiate is selected based on the "),zTe=a("code"),pvr=o("model_type"),_vr=o(` property of the config object (either
passed as an argument or loaded from `),WTe=a("code"),bvr=o("pretrained_model_name_or_path"),vvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),Fvr=o("pretrained_model_name_or_path"),Tvr=o(":"),Mvr=l(),HTe=a("ul"),dE=a("li"),UTe=a("strong"),Evr=o("detr"),Cvr=o(" \u2014 "),vU=a("a"),wvr=o("DetrForSegmentation"),Avr=o(" (DETR model)"),Lvr=l(),cE=a("p"),yvr=o("The model is set in evaluation mode by default using "),JTe=a("code"),xvr=o("model.eval()"),$vr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),YTe=a("code"),kvr=o("model.train()"),Svr=l(),F(mE.$$.fragment),Wze=l(),rc=a("h2"),fE=a("a"),KTe=a("span"),F(z9.$$.fragment),Rvr=l(),ZTe=a("span"),Pvr=o("AutoModelForSemanticSegmentation"),Qze=l(),er=a("div"),F(W9.$$.fragment),Bvr=l(),tc=a("p"),Ivr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FU=a("a"),Nvr=o("from_pretrained()"),qvr=o(" class method or the "),TU=a("a"),jvr=o("from_config()"),Dvr=o(` class
method.`),Gvr=l(),Q9=a("p"),Ovr=o("This class cannot be instantiated directly using "),eMe=a("code"),Vvr=o("__init__()"),Xvr=o(" (throws an error)."),zvr=l(),kt=a("div"),F(H9.$$.fragment),Wvr=l(),oMe=a("p"),Qvr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Hvr=l(),ac=a("p"),Uvr=o(`Note:
Loading a model from its configuration file does `),rMe=a("strong"),Jvr=o("not"),Yvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=a("a"),Kvr=o("from_pretrained()"),Zvr=o(" to load the model weights."),e1r=l(),F(gE.$$.fragment),o1r=l(),Fo=a("div"),F(U9.$$.fragment),r1r=l(),tMe=a("p"),t1r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),a1r=l(),an=a("p"),n1r=o("The model class to instantiate is selected based on the "),aMe=a("code"),s1r=o("model_type"),l1r=o(` property of the config object (either
passed as an argument or loaded from `),nMe=a("code"),i1r=o("pretrained_model_name_or_path"),d1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=a("code"),c1r=o("pretrained_model_name_or_path"),m1r=o(":"),f1r=l(),at=a("ul"),hE=a("li"),lMe=a("strong"),g1r=o("beit"),h1r=o(" \u2014 "),EU=a("a"),u1r=o("BeitForSemanticSegmentation"),p1r=o(" (BEiT model)"),_1r=l(),uE=a("li"),iMe=a("strong"),b1r=o("data2vec-vision"),v1r=o(" \u2014 "),CU=a("a"),F1r=o("Data2VecVisionForSemanticSegmentation"),T1r=o(" (Data2VecVision model)"),M1r=l(),pE=a("li"),dMe=a("strong"),E1r=o("dpt"),C1r=o(" \u2014 "),wU=a("a"),w1r=o("DPTForSemanticSegmentation"),A1r=o(" (DPT model)"),L1r=l(),_E=a("li"),cMe=a("strong"),y1r=o("mobilevit"),x1r=o(" \u2014 "),AU=a("a"),$1r=o("MobileViTForSemanticSegmentation"),k1r=o(" (MobileViT model)"),S1r=l(),bE=a("li"),mMe=a("strong"),R1r=o("segformer"),P1r=o(" \u2014 "),LU=a("a"),B1r=o("SegformerForSemanticSegmentation"),I1r=o(" (SegFormer model)"),N1r=l(),vE=a("p"),q1r=o("The model is set in evaluation mode by default using "),fMe=a("code"),j1r=o("model.eval()"),D1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gMe=a("code"),G1r=o("model.train()"),O1r=l(),F(FE.$$.fragment),Hze=l(),nc=a("h2"),TE=a("a"),hMe=a("span"),F(J9.$$.fragment),V1r=l(),uMe=a("span"),X1r=o("AutoModelForInstanceSegmentation"),Uze=l(),or=a("div"),F(Y9.$$.fragment),z1r=l(),sc=a("p"),W1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yU=a("a"),Q1r=o("from_pretrained()"),H1r=o(" class method or the "),xU=a("a"),U1r=o("from_config()"),J1r=o(` class
method.`),Y1r=l(),K9=a("p"),K1r=o("This class cannot be instantiated directly using "),pMe=a("code"),Z1r=o("__init__()"),eFr=o(" (throws an error)."),oFr=l(),St=a("div"),F(Z9.$$.fragment),rFr=l(),_Me=a("p"),tFr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),aFr=l(),lc=a("p"),nFr=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),sFr=o("not"),lFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=a("a"),iFr=o("from_pretrained()"),dFr=o(" to load the model weights."),cFr=l(),F(ME.$$.fragment),mFr=l(),To=a("div"),F(ex.$$.fragment),fFr=l(),vMe=a("p"),gFr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hFr=l(),nn=a("p"),uFr=o("The model class to instantiate is selected based on the "),FMe=a("code"),pFr=o("model_type"),_Fr=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),bFr=o("pretrained_model_name_or_path"),vFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),FFr=o("pretrained_model_name_or_path"),TFr=o(":"),MFr=l(),EMe=a("ul"),EE=a("li"),CMe=a("strong"),EFr=o("maskformer"),CFr=o(" \u2014 "),kU=a("a"),wFr=o("MaskFormerForInstanceSegmentation"),AFr=o(" (MaskFormer model)"),LFr=l(),CE=a("p"),yFr=o("The model is set in evaluation mode by default using "),wMe=a("code"),xFr=o("model.eval()"),$Fr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AMe=a("code"),kFr=o("model.train()"),SFr=l(),F(wE.$$.fragment),Jze=l(),ic=a("h2"),AE=a("a"),LMe=a("span"),F(ox.$$.fragment),RFr=l(),yMe=a("span"),PFr=o("TFAutoModel"),Yze=l(),rr=a("div"),F(rx.$$.fragment),BFr=l(),dc=a("p"),IFr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SU=a("a"),NFr=o("from_pretrained()"),qFr=o(" class method or the "),RU=a("a"),jFr=o("from_config()"),DFr=o(` class
method.`),GFr=l(),tx=a("p"),OFr=o("This class cannot be instantiated directly using "),xMe=a("code"),VFr=o("__init__()"),XFr=o(" (throws an error)."),zFr=l(),Rt=a("div"),F(ax.$$.fragment),WFr=l(),$Me=a("p"),QFr=o("Instantiates one of the base model classes of the library from a configuration."),HFr=l(),cc=a("p"),UFr=o(`Note:
Loading a model from its configuration file does `),kMe=a("strong"),JFr=o("not"),YFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),KFr=o("from_pretrained()"),ZFr=o(" to load the model weights."),eTr=l(),F(LE.$$.fragment),oTr=l(),$r=a("div"),F(nx.$$.fragment),rTr=l(),SMe=a("p"),tTr=o("Instantiate one of the base model classes of the library from a pretrained model."),aTr=l(),sn=a("p"),nTr=o("The model class to instantiate is selected based on the "),RMe=a("code"),sTr=o("model_type"),lTr=o(` property of the config object (either
passed as an argument or loaded from `),PMe=a("code"),iTr=o("pretrained_model_name_or_path"),dTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),cTr=o("pretrained_model_name_or_path"),mTr=o(":"),fTr=l(),I=a("ul"),yE=a("li"),IMe=a("strong"),gTr=o("albert"),hTr=o(" \u2014 "),BU=a("a"),uTr=o("TFAlbertModel"),pTr=o(" (ALBERT model)"),_Tr=l(),xE=a("li"),NMe=a("strong"),bTr=o("bart"),vTr=o(" \u2014 "),IU=a("a"),FTr=o("TFBartModel"),TTr=o(" (BART model)"),MTr=l(),$E=a("li"),qMe=a("strong"),ETr=o("bert"),CTr=o(" \u2014 "),NU=a("a"),wTr=o("TFBertModel"),ATr=o(" (BERT model)"),LTr=l(),kE=a("li"),jMe=a("strong"),yTr=o("blenderbot"),xTr=o(" \u2014 "),qU=a("a"),$Tr=o("TFBlenderbotModel"),kTr=o(" (Blenderbot model)"),STr=l(),SE=a("li"),DMe=a("strong"),RTr=o("blenderbot-small"),PTr=o(" \u2014 "),jU=a("a"),BTr=o("TFBlenderbotSmallModel"),ITr=o(" (BlenderbotSmall model)"),NTr=l(),RE=a("li"),GMe=a("strong"),qTr=o("camembert"),jTr=o(" \u2014 "),DU=a("a"),DTr=o("TFCamembertModel"),GTr=o(" (CamemBERT model)"),OTr=l(),PE=a("li"),OMe=a("strong"),VTr=o("clip"),XTr=o(" \u2014 "),GU=a("a"),zTr=o("TFCLIPModel"),WTr=o(" (CLIP model)"),QTr=l(),BE=a("li"),VMe=a("strong"),HTr=o("convbert"),UTr=o(" \u2014 "),OU=a("a"),JTr=o("TFConvBertModel"),YTr=o(" (ConvBERT model)"),KTr=l(),IE=a("li"),XMe=a("strong"),ZTr=o("convnext"),eMr=o(" \u2014 "),VU=a("a"),oMr=o("TFConvNextModel"),rMr=o(" (ConvNeXT model)"),tMr=l(),NE=a("li"),zMe=a("strong"),aMr=o("ctrl"),nMr=o(" \u2014 "),XU=a("a"),sMr=o("TFCTRLModel"),lMr=o(" (CTRL model)"),iMr=l(),qE=a("li"),WMe=a("strong"),dMr=o("data2vec-vision"),cMr=o(" \u2014 "),zU=a("a"),mMr=o("TFData2VecVisionModel"),fMr=o(" (Data2VecVision model)"),gMr=l(),jE=a("li"),QMe=a("strong"),hMr=o("deberta"),uMr=o(" \u2014 "),WU=a("a"),pMr=o("TFDebertaModel"),_Mr=o(" (DeBERTa model)"),bMr=l(),DE=a("li"),HMe=a("strong"),vMr=o("deberta-v2"),FMr=o(" \u2014 "),QU=a("a"),TMr=o("TFDebertaV2Model"),MMr=o(" (DeBERTa-v2 model)"),EMr=l(),GE=a("li"),UMe=a("strong"),CMr=o("deit"),wMr=o(" \u2014 "),HU=a("a"),AMr=o("TFDeiTModel"),LMr=o(" (DeiT model)"),yMr=l(),OE=a("li"),JMe=a("strong"),xMr=o("distilbert"),$Mr=o(" \u2014 "),UU=a("a"),kMr=o("TFDistilBertModel"),SMr=o(" (DistilBERT model)"),RMr=l(),VE=a("li"),YMe=a("strong"),PMr=o("dpr"),BMr=o(" \u2014 "),JU=a("a"),IMr=o("TFDPRQuestionEncoder"),NMr=o(" (DPR model)"),qMr=l(),XE=a("li"),KMe=a("strong"),jMr=o("electra"),DMr=o(" \u2014 "),YU=a("a"),GMr=o("TFElectraModel"),OMr=o(" (ELECTRA model)"),VMr=l(),zE=a("li"),ZMe=a("strong"),XMr=o("flaubert"),zMr=o(" \u2014 "),KU=a("a"),WMr=o("TFFlaubertModel"),QMr=o(" (FlauBERT model)"),HMr=l(),Ks=a("li"),e4e=a("strong"),UMr=o("funnel"),JMr=o(" \u2014 "),ZU=a("a"),YMr=o("TFFunnelModel"),KMr=o(" or "),eJ=a("a"),ZMr=o("TFFunnelBaseModel"),e4r=o(" (Funnel Transformer model)"),o4r=l(),WE=a("li"),o4e=a("strong"),r4r=o("gpt2"),t4r=o(" \u2014 "),oJ=a("a"),a4r=o("TFGPT2Model"),n4r=o(" (OpenAI GPT-2 model)"),s4r=l(),QE=a("li"),r4e=a("strong"),l4r=o("gptj"),i4r=o(" \u2014 "),rJ=a("a"),d4r=o("TFGPTJModel"),c4r=o(" (GPT-J model)"),m4r=l(),HE=a("li"),t4e=a("strong"),f4r=o("hubert"),g4r=o(" \u2014 "),tJ=a("a"),h4r=o("TFHubertModel"),u4r=o(" (Hubert model)"),p4r=l(),UE=a("li"),a4e=a("strong"),_4r=o("layoutlm"),b4r=o(" \u2014 "),aJ=a("a"),v4r=o("TFLayoutLMModel"),F4r=o(" (LayoutLM model)"),T4r=l(),JE=a("li"),n4e=a("strong"),M4r=o("led"),E4r=o(" \u2014 "),nJ=a("a"),C4r=o("TFLEDModel"),w4r=o(" (LED model)"),A4r=l(),YE=a("li"),s4e=a("strong"),L4r=o("longformer"),y4r=o(" \u2014 "),sJ=a("a"),x4r=o("TFLongformerModel"),$4r=o(" (Longformer model)"),k4r=l(),KE=a("li"),l4e=a("strong"),S4r=o("lxmert"),R4r=o(" \u2014 "),lJ=a("a"),P4r=o("TFLxmertModel"),B4r=o(" (LXMERT model)"),I4r=l(),ZE=a("li"),i4e=a("strong"),N4r=o("marian"),q4r=o(" \u2014 "),iJ=a("a"),j4r=o("TFMarianModel"),D4r=o(" (Marian model)"),G4r=l(),eC=a("li"),d4e=a("strong"),O4r=o("mbart"),V4r=o(" \u2014 "),dJ=a("a"),X4r=o("TFMBartModel"),z4r=o(" (mBART model)"),W4r=l(),oC=a("li"),c4e=a("strong"),Q4r=o("mobilebert"),H4r=o(" \u2014 "),cJ=a("a"),U4r=o("TFMobileBertModel"),J4r=o(" (MobileBERT model)"),Y4r=l(),rC=a("li"),m4e=a("strong"),K4r=o("mpnet"),Z4r=o(" \u2014 "),mJ=a("a"),eEr=o("TFMPNetModel"),oEr=o(" (MPNet model)"),rEr=l(),tC=a("li"),f4e=a("strong"),tEr=o("mt5"),aEr=o(" \u2014 "),fJ=a("a"),nEr=o("TFMT5Model"),sEr=o(" (MT5 model)"),lEr=l(),aC=a("li"),g4e=a("strong"),iEr=o("openai-gpt"),dEr=o(" \u2014 "),gJ=a("a"),cEr=o("TFOpenAIGPTModel"),mEr=o(" (OpenAI GPT model)"),fEr=l(),nC=a("li"),h4e=a("strong"),gEr=o("opt"),hEr=o(" \u2014 "),hJ=a("a"),uEr=o("TFOPTModel"),pEr=o(" (OPT model)"),_Er=l(),sC=a("li"),u4e=a("strong"),bEr=o("pegasus"),vEr=o(" \u2014 "),uJ=a("a"),FEr=o("TFPegasusModel"),TEr=o(" (Pegasus model)"),MEr=l(),lC=a("li"),p4e=a("strong"),EEr=o("regnet"),CEr=o(" \u2014 "),pJ=a("a"),wEr=o("TFRegNetModel"),AEr=o(" (RegNet model)"),LEr=l(),iC=a("li"),_4e=a("strong"),yEr=o("rembert"),xEr=o(" \u2014 "),_J=a("a"),$Er=o("TFRemBertModel"),kEr=o(" (RemBERT model)"),SEr=l(),dC=a("li"),b4e=a("strong"),REr=o("resnet"),PEr=o(" \u2014 "),bJ=a("a"),BEr=o("TFResNetModel"),IEr=o(" (ResNet model)"),NEr=l(),cC=a("li"),v4e=a("strong"),qEr=o("roberta"),jEr=o(" \u2014 "),vJ=a("a"),DEr=o("TFRobertaModel"),GEr=o(" (RoBERTa model)"),OEr=l(),mC=a("li"),F4e=a("strong"),VEr=o("roformer"),XEr=o(" \u2014 "),FJ=a("a"),zEr=o("TFRoFormerModel"),WEr=o(" (RoFormer model)"),QEr=l(),fC=a("li"),T4e=a("strong"),HEr=o("segformer"),UEr=o(" \u2014 "),TJ=a("a"),JEr=o("TFSegformerModel"),YEr=o(" (SegFormer model)"),KEr=l(),gC=a("li"),M4e=a("strong"),ZEr=o("speech_to_text"),eCr=o(" \u2014 "),MJ=a("a"),oCr=o("TFSpeech2TextModel"),rCr=o(" (Speech2Text model)"),tCr=l(),hC=a("li"),E4e=a("strong"),aCr=o("swin"),nCr=o(" \u2014 "),EJ=a("a"),sCr=o("TFSwinModel"),lCr=o(" (Swin Transformer model)"),iCr=l(),uC=a("li"),C4e=a("strong"),dCr=o("t5"),cCr=o(" \u2014 "),CJ=a("a"),mCr=o("TFT5Model"),fCr=o(" (T5 model)"),gCr=l(),pC=a("li"),w4e=a("strong"),hCr=o("tapas"),uCr=o(" \u2014 "),wJ=a("a"),pCr=o("TFTapasModel"),_Cr=o(" (TAPAS model)"),bCr=l(),_C=a("li"),A4e=a("strong"),vCr=o("transfo-xl"),FCr=o(" \u2014 "),AJ=a("a"),TCr=o("TFTransfoXLModel"),MCr=o(" (Transformer-XL model)"),ECr=l(),bC=a("li"),L4e=a("strong"),CCr=o("vit"),wCr=o(" \u2014 "),LJ=a("a"),ACr=o("TFViTModel"),LCr=o(" (ViT model)"),yCr=l(),vC=a("li"),y4e=a("strong"),xCr=o("vit_mae"),$Cr=o(" \u2014 "),yJ=a("a"),kCr=o("TFViTMAEModel"),SCr=o(" (ViTMAE model)"),RCr=l(),FC=a("li"),x4e=a("strong"),PCr=o("wav2vec2"),BCr=o(" \u2014 "),xJ=a("a"),ICr=o("TFWav2Vec2Model"),NCr=o(" (Wav2Vec2 model)"),qCr=l(),TC=a("li"),$4e=a("strong"),jCr=o("xlm"),DCr=o(" \u2014 "),$J=a("a"),GCr=o("TFXLMModel"),OCr=o(" (XLM model)"),VCr=l(),MC=a("li"),k4e=a("strong"),XCr=o("xlm-roberta"),zCr=o(" \u2014 "),kJ=a("a"),WCr=o("TFXLMRobertaModel"),QCr=o(" (XLM-RoBERTa model)"),HCr=l(),EC=a("li"),S4e=a("strong"),UCr=o("xlnet"),JCr=o(" \u2014 "),SJ=a("a"),YCr=o("TFXLNetModel"),KCr=o(" (XLNet model)"),ZCr=l(),F(CC.$$.fragment),Kze=l(),mc=a("h2"),wC=a("a"),R4e=a("span"),F(sx.$$.fragment),e5r=l(),P4e=a("span"),o5r=o("TFAutoModelForPreTraining"),Zze=l(),tr=a("div"),F(lx.$$.fragment),r5r=l(),fc=a("p"),t5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RJ=a("a"),a5r=o("from_pretrained()"),n5r=o(" class method or the "),PJ=a("a"),s5r=o("from_config()"),l5r=o(` class
method.`),i5r=l(),ix=a("p"),d5r=o("This class cannot be instantiated directly using "),B4e=a("code"),c5r=o("__init__()"),m5r=o(" (throws an error)."),f5r=l(),Pt=a("div"),F(dx.$$.fragment),g5r=l(),I4e=a("p"),h5r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u5r=l(),gc=a("p"),p5r=o(`Note:
Loading a model from its configuration file does `),N4e=a("strong"),_5r=o("not"),b5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),v5r=o("from_pretrained()"),F5r=o(" to load the model weights."),T5r=l(),F(AC.$$.fragment),M5r=l(),kr=a("div"),F(cx.$$.fragment),E5r=l(),q4e=a("p"),C5r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),w5r=l(),ln=a("p"),A5r=o("The model class to instantiate is selected based on the "),j4e=a("code"),L5r=o("model_type"),y5r=o(` property of the config object (either
passed as an argument or loaded from `),D4e=a("code"),x5r=o("pretrained_model_name_or_path"),$5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=a("code"),k5r=o("pretrained_model_name_or_path"),S5r=o(":"),R5r=l(),se=a("ul"),LC=a("li"),O4e=a("strong"),P5r=o("albert"),B5r=o(" \u2014 "),IJ=a("a"),I5r=o("TFAlbertForPreTraining"),N5r=o(" (ALBERT model)"),q5r=l(),yC=a("li"),V4e=a("strong"),j5r=o("bart"),D5r=o(" \u2014 "),NJ=a("a"),G5r=o("TFBartForConditionalGeneration"),O5r=o(" (BART model)"),V5r=l(),xC=a("li"),X4e=a("strong"),X5r=o("bert"),z5r=o(" \u2014 "),qJ=a("a"),W5r=o("TFBertForPreTraining"),Q5r=o(" (BERT model)"),H5r=l(),$C=a("li"),z4e=a("strong"),U5r=o("camembert"),J5r=o(" \u2014 "),jJ=a("a"),Y5r=o("TFCamembertForMaskedLM"),K5r=o(" (CamemBERT model)"),Z5r=l(),kC=a("li"),W4e=a("strong"),e3r=o("ctrl"),o3r=o(" \u2014 "),DJ=a("a"),r3r=o("TFCTRLLMHeadModel"),t3r=o(" (CTRL model)"),a3r=l(),SC=a("li"),Q4e=a("strong"),n3r=o("distilbert"),s3r=o(" \u2014 "),GJ=a("a"),l3r=o("TFDistilBertForMaskedLM"),i3r=o(" (DistilBERT model)"),d3r=l(),RC=a("li"),H4e=a("strong"),c3r=o("electra"),m3r=o(" \u2014 "),OJ=a("a"),f3r=o("TFElectraForPreTraining"),g3r=o(" (ELECTRA model)"),h3r=l(),PC=a("li"),U4e=a("strong"),u3r=o("flaubert"),p3r=o(" \u2014 "),VJ=a("a"),_3r=o("TFFlaubertWithLMHeadModel"),b3r=o(" (FlauBERT model)"),v3r=l(),BC=a("li"),J4e=a("strong"),F3r=o("funnel"),T3r=o(" \u2014 "),XJ=a("a"),M3r=o("TFFunnelForPreTraining"),E3r=o(" (Funnel Transformer model)"),C3r=l(),IC=a("li"),Y4e=a("strong"),w3r=o("gpt2"),A3r=o(" \u2014 "),zJ=a("a"),L3r=o("TFGPT2LMHeadModel"),y3r=o(" (OpenAI GPT-2 model)"),x3r=l(),NC=a("li"),K4e=a("strong"),$3r=o("layoutlm"),k3r=o(" \u2014 "),WJ=a("a"),S3r=o("TFLayoutLMForMaskedLM"),R3r=o(" (LayoutLM model)"),P3r=l(),qC=a("li"),Z4e=a("strong"),B3r=o("lxmert"),I3r=o(" \u2014 "),QJ=a("a"),N3r=o("TFLxmertForPreTraining"),q3r=o(" (LXMERT model)"),j3r=l(),jC=a("li"),eEe=a("strong"),D3r=o("mobilebert"),G3r=o(" \u2014 "),HJ=a("a"),O3r=o("TFMobileBertForPreTraining"),V3r=o(" (MobileBERT model)"),X3r=l(),DC=a("li"),oEe=a("strong"),z3r=o("mpnet"),W3r=o(" \u2014 "),UJ=a("a"),Q3r=o("TFMPNetForMaskedLM"),H3r=o(" (MPNet model)"),U3r=l(),GC=a("li"),rEe=a("strong"),J3r=o("openai-gpt"),Y3r=o(" \u2014 "),JJ=a("a"),K3r=o("TFOpenAIGPTLMHeadModel"),Z3r=o(" (OpenAI GPT model)"),e0r=l(),OC=a("li"),tEe=a("strong"),o0r=o("roberta"),r0r=o(" \u2014 "),YJ=a("a"),t0r=o("TFRobertaForMaskedLM"),a0r=o(" (RoBERTa model)"),n0r=l(),VC=a("li"),aEe=a("strong"),s0r=o("t5"),l0r=o(" \u2014 "),KJ=a("a"),i0r=o("TFT5ForConditionalGeneration"),d0r=o(" (T5 model)"),c0r=l(),XC=a("li"),nEe=a("strong"),m0r=o("tapas"),f0r=o(" \u2014 "),ZJ=a("a"),g0r=o("TFTapasForMaskedLM"),h0r=o(" (TAPAS model)"),u0r=l(),zC=a("li"),sEe=a("strong"),p0r=o("transfo-xl"),_0r=o(" \u2014 "),eY=a("a"),b0r=o("TFTransfoXLLMHeadModel"),v0r=o(" (Transformer-XL model)"),F0r=l(),WC=a("li"),lEe=a("strong"),T0r=o("vit_mae"),M0r=o(" \u2014 "),oY=a("a"),E0r=o("TFViTMAEForPreTraining"),C0r=o(" (ViTMAE model)"),w0r=l(),QC=a("li"),iEe=a("strong"),A0r=o("xlm"),L0r=o(" \u2014 "),rY=a("a"),y0r=o("TFXLMWithLMHeadModel"),x0r=o(" (XLM model)"),$0r=l(),HC=a("li"),dEe=a("strong"),k0r=o("xlm-roberta"),S0r=o(" \u2014 "),tY=a("a"),R0r=o("TFXLMRobertaForMaskedLM"),P0r=o(" (XLM-RoBERTa model)"),B0r=l(),UC=a("li"),cEe=a("strong"),I0r=o("xlnet"),N0r=o(" \u2014 "),aY=a("a"),q0r=o("TFXLNetLMHeadModel"),j0r=o(" (XLNet model)"),D0r=l(),F(JC.$$.fragment),eWe=l(),hc=a("h2"),YC=a("a"),mEe=a("span"),F(mx.$$.fragment),G0r=l(),fEe=a("span"),O0r=o("TFAutoModelForCausalLM"),oWe=l(),ar=a("div"),F(fx.$$.fragment),V0r=l(),uc=a("p"),X0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nY=a("a"),z0r=o("from_pretrained()"),W0r=o(" class method or the "),sY=a("a"),Q0r=o("from_config()"),H0r=o(` class
method.`),U0r=l(),gx=a("p"),J0r=o("This class cannot be instantiated directly using "),gEe=a("code"),Y0r=o("__init__()"),K0r=o(" (throws an error)."),Z0r=l(),Bt=a("div"),F(hx.$$.fragment),ewr=l(),hEe=a("p"),owr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rwr=l(),pc=a("p"),twr=o(`Note:
Loading a model from its configuration file does `),uEe=a("strong"),awr=o("not"),nwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),swr=o("from_pretrained()"),lwr=o(" to load the model weights."),iwr=l(),F(KC.$$.fragment),dwr=l(),Sr=a("div"),F(ux.$$.fragment),cwr=l(),pEe=a("p"),mwr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fwr=l(),dn=a("p"),gwr=o("The model class to instantiate is selected based on the "),_Ee=a("code"),hwr=o("model_type"),uwr=o(` property of the config object (either
passed as an argument or loaded from `),bEe=a("code"),pwr=o("pretrained_model_name_or_path"),_wr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=a("code"),bwr=o("pretrained_model_name_or_path"),vwr=o(":"),Fwr=l(),Me=a("ul"),ZC=a("li"),FEe=a("strong"),Twr=o("bert"),Mwr=o(" \u2014 "),iY=a("a"),Ewr=o("TFBertLMHeadModel"),Cwr=o(" (BERT model)"),wwr=l(),e5=a("li"),TEe=a("strong"),Awr=o("camembert"),Lwr=o(" \u2014 "),dY=a("a"),ywr=o("TFCamembertForCausalLM"),xwr=o(" (CamemBERT model)"),$wr=l(),o5=a("li"),MEe=a("strong"),kwr=o("ctrl"),Swr=o(" \u2014 "),cY=a("a"),Rwr=o("TFCTRLLMHeadModel"),Pwr=o(" (CTRL model)"),Bwr=l(),r5=a("li"),EEe=a("strong"),Iwr=o("gpt2"),Nwr=o(" \u2014 "),mY=a("a"),qwr=o("TFGPT2LMHeadModel"),jwr=o(" (OpenAI GPT-2 model)"),Dwr=l(),t5=a("li"),CEe=a("strong"),Gwr=o("gptj"),Owr=o(" \u2014 "),fY=a("a"),Vwr=o("TFGPTJForCausalLM"),Xwr=o(" (GPT-J model)"),zwr=l(),a5=a("li"),wEe=a("strong"),Wwr=o("openai-gpt"),Qwr=o(" \u2014 "),gY=a("a"),Hwr=o("TFOpenAIGPTLMHeadModel"),Uwr=o(" (OpenAI GPT model)"),Jwr=l(),n5=a("li"),AEe=a("strong"),Ywr=o("opt"),Kwr=o(" \u2014 "),hY=a("a"),Zwr=o("TFOPTForCausalLM"),eAr=o(" (OPT model)"),oAr=l(),s5=a("li"),LEe=a("strong"),rAr=o("rembert"),tAr=o(" \u2014 "),uY=a("a"),aAr=o("TFRemBertForCausalLM"),nAr=o(" (RemBERT model)"),sAr=l(),l5=a("li"),yEe=a("strong"),lAr=o("roberta"),iAr=o(" \u2014 "),pY=a("a"),dAr=o("TFRobertaForCausalLM"),cAr=o(" (RoBERTa model)"),mAr=l(),i5=a("li"),xEe=a("strong"),fAr=o("roformer"),gAr=o(" \u2014 "),_Y=a("a"),hAr=o("TFRoFormerForCausalLM"),uAr=o(" (RoFormer model)"),pAr=l(),d5=a("li"),$Ee=a("strong"),_Ar=o("transfo-xl"),bAr=o(" \u2014 "),bY=a("a"),vAr=o("TFTransfoXLLMHeadModel"),FAr=o(" (Transformer-XL model)"),TAr=l(),c5=a("li"),kEe=a("strong"),MAr=o("xlm"),EAr=o(" \u2014 "),vY=a("a"),CAr=o("TFXLMWithLMHeadModel"),wAr=o(" (XLM model)"),AAr=l(),m5=a("li"),SEe=a("strong"),LAr=o("xlnet"),yAr=o(" \u2014 "),FY=a("a"),xAr=o("TFXLNetLMHeadModel"),$Ar=o(" (XLNet model)"),kAr=l(),F(f5.$$.fragment),rWe=l(),_c=a("h2"),g5=a("a"),REe=a("span"),F(px.$$.fragment),SAr=l(),PEe=a("span"),RAr=o("TFAutoModelForImageClassification"),tWe=l(),nr=a("div"),F(_x.$$.fragment),PAr=l(),bc=a("p"),BAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TY=a("a"),IAr=o("from_pretrained()"),NAr=o(" class method or the "),MY=a("a"),qAr=o("from_config()"),jAr=o(` class
method.`),DAr=l(),bx=a("p"),GAr=o("This class cannot be instantiated directly using "),BEe=a("code"),OAr=o("__init__()"),VAr=o(" (throws an error)."),XAr=l(),It=a("div"),F(vx.$$.fragment),zAr=l(),IEe=a("p"),WAr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QAr=l(),vc=a("p"),HAr=o(`Note:
Loading a model from its configuration file does `),NEe=a("strong"),UAr=o("not"),JAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),YAr=o("from_pretrained()"),KAr=o(" to load the model weights."),ZAr=l(),F(h5.$$.fragment),e6r=l(),Rr=a("div"),F(Fx.$$.fragment),o6r=l(),qEe=a("p"),r6r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),t6r=l(),cn=a("p"),a6r=o("The model class to instantiate is selected based on the "),jEe=a("code"),n6r=o("model_type"),s6r=o(` property of the config object (either
passed as an argument or loaded from `),DEe=a("code"),l6r=o("pretrained_model_name_or_path"),i6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=a("code"),d6r=o("pretrained_model_name_or_path"),c6r=o(":"),m6r=l(),Ve=a("ul"),u5=a("li"),OEe=a("strong"),f6r=o("convnext"),g6r=o(" \u2014 "),CY=a("a"),h6r=o("TFConvNextForImageClassification"),u6r=o(" (ConvNeXT model)"),p6r=l(),p5=a("li"),VEe=a("strong"),_6r=o("data2vec-vision"),b6r=o(" \u2014 "),wY=a("a"),v6r=o("TFData2VecVisionForImageClassification"),F6r=o(" (Data2VecVision model)"),T6r=l(),Zs=a("li"),XEe=a("strong"),M6r=o("deit"),E6r=o(" \u2014 "),AY=a("a"),C6r=o("TFDeiTForImageClassification"),w6r=o(" or "),LY=a("a"),A6r=o("TFDeiTForImageClassificationWithTeacher"),L6r=o(" (DeiT model)"),y6r=l(),_5=a("li"),zEe=a("strong"),x6r=o("regnet"),$6r=o(" \u2014 "),yY=a("a"),k6r=o("TFRegNetForImageClassification"),S6r=o(" (RegNet model)"),R6r=l(),b5=a("li"),WEe=a("strong"),P6r=o("resnet"),B6r=o(" \u2014 "),xY=a("a"),I6r=o("TFResNetForImageClassification"),N6r=o(" (ResNet model)"),q6r=l(),v5=a("li"),QEe=a("strong"),j6r=o("segformer"),D6r=o(" \u2014 "),$Y=a("a"),G6r=o("TFSegformerForImageClassification"),O6r=o(" (SegFormer model)"),V6r=l(),F5=a("li"),HEe=a("strong"),X6r=o("swin"),z6r=o(" \u2014 "),kY=a("a"),W6r=o("TFSwinForImageClassification"),Q6r=o(" (Swin Transformer model)"),H6r=l(),T5=a("li"),UEe=a("strong"),U6r=o("vit"),J6r=o(" \u2014 "),SY=a("a"),Y6r=o("TFViTForImageClassification"),K6r=o(" (ViT model)"),Z6r=l(),F(M5.$$.fragment),aWe=l(),Fc=a("h2"),E5=a("a"),JEe=a("span"),F(Tx.$$.fragment),e7r=l(),YEe=a("span"),o7r=o("TFAutoModelForMaskedLM"),nWe=l(),sr=a("div"),F(Mx.$$.fragment),r7r=l(),Tc=a("p"),t7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RY=a("a"),a7r=o("from_pretrained()"),n7r=o(" class method or the "),PY=a("a"),s7r=o("from_config()"),l7r=o(` class
method.`),i7r=l(),Ex=a("p"),d7r=o("This class cannot be instantiated directly using "),KEe=a("code"),c7r=o("__init__()"),m7r=o(" (throws an error)."),f7r=l(),Nt=a("div"),F(Cx.$$.fragment),g7r=l(),ZEe=a("p"),h7r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),u7r=l(),Mc=a("p"),p7r=o(`Note:
Loading a model from its configuration file does `),eCe=a("strong"),_7r=o("not"),b7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=a("a"),v7r=o("from_pretrained()"),F7r=o(" to load the model weights."),T7r=l(),F(C5.$$.fragment),M7r=l(),Pr=a("div"),F(wx.$$.fragment),E7r=l(),oCe=a("p"),C7r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),w7r=l(),mn=a("p"),A7r=o("The model class to instantiate is selected based on the "),rCe=a("code"),L7r=o("model_type"),y7r=o(` property of the config object (either
passed as an argument or loaded from `),tCe=a("code"),x7r=o("pretrained_model_name_or_path"),$7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=a("code"),k7r=o("pretrained_model_name_or_path"),S7r=o(":"),R7r=l(),ie=a("ul"),w5=a("li"),nCe=a("strong"),P7r=o("albert"),B7r=o(" \u2014 "),IY=a("a"),I7r=o("TFAlbertForMaskedLM"),N7r=o(" (ALBERT model)"),q7r=l(),A5=a("li"),sCe=a("strong"),j7r=o("bert"),D7r=o(" \u2014 "),NY=a("a"),G7r=o("TFBertForMaskedLM"),O7r=o(" (BERT model)"),V7r=l(),L5=a("li"),lCe=a("strong"),X7r=o("camembert"),z7r=o(" \u2014 "),qY=a("a"),W7r=o("TFCamembertForMaskedLM"),Q7r=o(" (CamemBERT model)"),H7r=l(),y5=a("li"),iCe=a("strong"),U7r=o("convbert"),J7r=o(" \u2014 "),jY=a("a"),Y7r=o("TFConvBertForMaskedLM"),K7r=o(" (ConvBERT model)"),Z7r=l(),x5=a("li"),dCe=a("strong"),eLr=o("deberta"),oLr=o(" \u2014 "),DY=a("a"),rLr=o("TFDebertaForMaskedLM"),tLr=o(" (DeBERTa model)"),aLr=l(),$5=a("li"),cCe=a("strong"),nLr=o("deberta-v2"),sLr=o(" \u2014 "),GY=a("a"),lLr=o("TFDebertaV2ForMaskedLM"),iLr=o(" (DeBERTa-v2 model)"),dLr=l(),k5=a("li"),mCe=a("strong"),cLr=o("distilbert"),mLr=o(" \u2014 "),OY=a("a"),fLr=o("TFDistilBertForMaskedLM"),gLr=o(" (DistilBERT model)"),hLr=l(),S5=a("li"),fCe=a("strong"),uLr=o("electra"),pLr=o(" \u2014 "),VY=a("a"),_Lr=o("TFElectraForMaskedLM"),bLr=o(" (ELECTRA model)"),vLr=l(),R5=a("li"),gCe=a("strong"),FLr=o("flaubert"),TLr=o(" \u2014 "),XY=a("a"),MLr=o("TFFlaubertWithLMHeadModel"),ELr=o(" (FlauBERT model)"),CLr=l(),P5=a("li"),hCe=a("strong"),wLr=o("funnel"),ALr=o(" \u2014 "),zY=a("a"),LLr=o("TFFunnelForMaskedLM"),yLr=o(" (Funnel Transformer model)"),xLr=l(),B5=a("li"),uCe=a("strong"),$Lr=o("layoutlm"),kLr=o(" \u2014 "),WY=a("a"),SLr=o("TFLayoutLMForMaskedLM"),RLr=o(" (LayoutLM model)"),PLr=l(),I5=a("li"),pCe=a("strong"),BLr=o("longformer"),ILr=o(" \u2014 "),QY=a("a"),NLr=o("TFLongformerForMaskedLM"),qLr=o(" (Longformer model)"),jLr=l(),N5=a("li"),_Ce=a("strong"),DLr=o("mobilebert"),GLr=o(" \u2014 "),HY=a("a"),OLr=o("TFMobileBertForMaskedLM"),VLr=o(" (MobileBERT model)"),XLr=l(),q5=a("li"),bCe=a("strong"),zLr=o("mpnet"),WLr=o(" \u2014 "),UY=a("a"),QLr=o("TFMPNetForMaskedLM"),HLr=o(" (MPNet model)"),ULr=l(),j5=a("li"),vCe=a("strong"),JLr=o("rembert"),YLr=o(" \u2014 "),JY=a("a"),KLr=o("TFRemBertForMaskedLM"),ZLr=o(" (RemBERT model)"),eyr=l(),D5=a("li"),FCe=a("strong"),oyr=o("roberta"),ryr=o(" \u2014 "),YY=a("a"),tyr=o("TFRobertaForMaskedLM"),ayr=o(" (RoBERTa model)"),nyr=l(),G5=a("li"),TCe=a("strong"),syr=o("roformer"),lyr=o(" \u2014 "),KY=a("a"),iyr=o("TFRoFormerForMaskedLM"),dyr=o(" (RoFormer model)"),cyr=l(),O5=a("li"),MCe=a("strong"),myr=o("tapas"),fyr=o(" \u2014 "),ZY=a("a"),gyr=o("TFTapasForMaskedLM"),hyr=o(" (TAPAS model)"),uyr=l(),V5=a("li"),ECe=a("strong"),pyr=o("xlm"),_yr=o(" \u2014 "),eK=a("a"),byr=o("TFXLMWithLMHeadModel"),vyr=o(" (XLM model)"),Fyr=l(),X5=a("li"),CCe=a("strong"),Tyr=o("xlm-roberta"),Myr=o(" \u2014 "),oK=a("a"),Eyr=o("TFXLMRobertaForMaskedLM"),Cyr=o(" (XLM-RoBERTa model)"),wyr=l(),F(z5.$$.fragment),sWe=l(),Ec=a("h2"),W5=a("a"),wCe=a("span"),F(Ax.$$.fragment),Ayr=l(),ACe=a("span"),Lyr=o("TFAutoModelForSeq2SeqLM"),lWe=l(),lr=a("div"),F(Lx.$$.fragment),yyr=l(),Cc=a("p"),xyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rK=a("a"),$yr=o("from_pretrained()"),kyr=o(" class method or the "),tK=a("a"),Syr=o("from_config()"),Ryr=o(` class
method.`),Pyr=l(),yx=a("p"),Byr=o("This class cannot be instantiated directly using "),LCe=a("code"),Iyr=o("__init__()"),Nyr=o(" (throws an error)."),qyr=l(),qt=a("div"),F(xx.$$.fragment),jyr=l(),yCe=a("p"),Dyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gyr=l(),wc=a("p"),Oyr=o(`Note:
Loading a model from its configuration file does `),xCe=a("strong"),Vyr=o("not"),Xyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),zyr=o("from_pretrained()"),Wyr=o(" to load the model weights."),Qyr=l(),F(Q5.$$.fragment),Hyr=l(),Br=a("div"),F($x.$$.fragment),Uyr=l(),$Ce=a("p"),Jyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Yyr=l(),fn=a("p"),Kyr=o("The model class to instantiate is selected based on the "),kCe=a("code"),Zyr=o("model_type"),e8r=o(` property of the config object (either
passed as an argument or loaded from `),SCe=a("code"),o8r=o("pretrained_model_name_or_path"),r8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=a("code"),t8r=o("pretrained_model_name_or_path"),a8r=o(":"),n8r=l(),ye=a("ul"),H5=a("li"),PCe=a("strong"),s8r=o("bart"),l8r=o(" \u2014 "),nK=a("a"),i8r=o("TFBartForConditionalGeneration"),d8r=o(" (BART model)"),c8r=l(),U5=a("li"),BCe=a("strong"),m8r=o("blenderbot"),f8r=o(" \u2014 "),sK=a("a"),g8r=o("TFBlenderbotForConditionalGeneration"),h8r=o(" (Blenderbot model)"),u8r=l(),J5=a("li"),ICe=a("strong"),p8r=o("blenderbot-small"),_8r=o(" \u2014 "),lK=a("a"),b8r=o("TFBlenderbotSmallForConditionalGeneration"),v8r=o(" (BlenderbotSmall model)"),F8r=l(),Y5=a("li"),NCe=a("strong"),T8r=o("encoder-decoder"),M8r=o(" \u2014 "),iK=a("a"),E8r=o("TFEncoderDecoderModel"),C8r=o(" (Encoder decoder model)"),w8r=l(),K5=a("li"),qCe=a("strong"),A8r=o("led"),L8r=o(" \u2014 "),dK=a("a"),y8r=o("TFLEDForConditionalGeneration"),x8r=o(" (LED model)"),$8r=l(),Z5=a("li"),jCe=a("strong"),k8r=o("marian"),S8r=o(" \u2014 "),cK=a("a"),R8r=o("TFMarianMTModel"),P8r=o(" (Marian model)"),B8r=l(),e3=a("li"),DCe=a("strong"),I8r=o("mbart"),N8r=o(" \u2014 "),mK=a("a"),q8r=o("TFMBartForConditionalGeneration"),j8r=o(" (mBART model)"),D8r=l(),o3=a("li"),GCe=a("strong"),G8r=o("mt5"),O8r=o(" \u2014 "),fK=a("a"),V8r=o("TFMT5ForConditionalGeneration"),X8r=o(" (MT5 model)"),z8r=l(),r3=a("li"),OCe=a("strong"),W8r=o("pegasus"),Q8r=o(" \u2014 "),gK=a("a"),H8r=o("TFPegasusForConditionalGeneration"),U8r=o(" (Pegasus model)"),J8r=l(),t3=a("li"),VCe=a("strong"),Y8r=o("t5"),K8r=o(" \u2014 "),hK=a("a"),Z8r=o("TFT5ForConditionalGeneration"),e9r=o(" (T5 model)"),o9r=l(),F(a3.$$.fragment),iWe=l(),Ac=a("h2"),n3=a("a"),XCe=a("span"),F(kx.$$.fragment),r9r=l(),zCe=a("span"),t9r=o("TFAutoModelForSequenceClassification"),dWe=l(),ir=a("div"),F(Sx.$$.fragment),a9r=l(),Lc=a("p"),n9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uK=a("a"),s9r=o("from_pretrained()"),l9r=o(" class method or the "),pK=a("a"),i9r=o("from_config()"),d9r=o(` class
method.`),c9r=l(),Rx=a("p"),m9r=o("This class cannot be instantiated directly using "),WCe=a("code"),f9r=o("__init__()"),g9r=o(" (throws an error)."),h9r=l(),jt=a("div"),F(Px.$$.fragment),u9r=l(),QCe=a("p"),p9r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_9r=l(),yc=a("p"),b9r=o(`Note:
Loading a model from its configuration file does `),HCe=a("strong"),v9r=o("not"),F9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=a("a"),T9r=o("from_pretrained()"),M9r=o(" to load the model weights."),E9r=l(),F(s3.$$.fragment),C9r=l(),Ir=a("div"),F(Bx.$$.fragment),w9r=l(),UCe=a("p"),A9r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L9r=l(),gn=a("p"),y9r=o("The model class to instantiate is selected based on the "),JCe=a("code"),x9r=o("model_type"),$9r=o(` property of the config object (either
passed as an argument or loaded from `),YCe=a("code"),k9r=o("pretrained_model_name_or_path"),S9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KCe=a("code"),R9r=o("pretrained_model_name_or_path"),P9r=o(":"),B9r=l(),te=a("ul"),l3=a("li"),ZCe=a("strong"),I9r=o("albert"),N9r=o(" \u2014 "),bK=a("a"),q9r=o("TFAlbertForSequenceClassification"),j9r=o(" (ALBERT model)"),D9r=l(),i3=a("li"),e5e=a("strong"),G9r=o("bert"),O9r=o(" \u2014 "),vK=a("a"),V9r=o("TFBertForSequenceClassification"),X9r=o(" (BERT model)"),z9r=l(),d3=a("li"),o5e=a("strong"),W9r=o("camembert"),Q9r=o(" \u2014 "),FK=a("a"),H9r=o("TFCamembertForSequenceClassification"),U9r=o(" (CamemBERT model)"),J9r=l(),c3=a("li"),r5e=a("strong"),Y9r=o("convbert"),K9r=o(" \u2014 "),TK=a("a"),Z9r=o("TFConvBertForSequenceClassification"),exr=o(" (ConvBERT model)"),oxr=l(),m3=a("li"),t5e=a("strong"),rxr=o("ctrl"),txr=o(" \u2014 "),MK=a("a"),axr=o("TFCTRLForSequenceClassification"),nxr=o(" (CTRL model)"),sxr=l(),f3=a("li"),a5e=a("strong"),lxr=o("deberta"),ixr=o(" \u2014 "),EK=a("a"),dxr=o("TFDebertaForSequenceClassification"),cxr=o(" (DeBERTa model)"),mxr=l(),g3=a("li"),n5e=a("strong"),fxr=o("deberta-v2"),gxr=o(" \u2014 "),CK=a("a"),hxr=o("TFDebertaV2ForSequenceClassification"),uxr=o(" (DeBERTa-v2 model)"),pxr=l(),h3=a("li"),s5e=a("strong"),_xr=o("distilbert"),bxr=o(" \u2014 "),wK=a("a"),vxr=o("TFDistilBertForSequenceClassification"),Fxr=o(" (DistilBERT model)"),Txr=l(),u3=a("li"),l5e=a("strong"),Mxr=o("electra"),Exr=o(" \u2014 "),AK=a("a"),Cxr=o("TFElectraForSequenceClassification"),wxr=o(" (ELECTRA model)"),Axr=l(),p3=a("li"),i5e=a("strong"),Lxr=o("flaubert"),yxr=o(" \u2014 "),LK=a("a"),xxr=o("TFFlaubertForSequenceClassification"),$xr=o(" (FlauBERT model)"),kxr=l(),_3=a("li"),d5e=a("strong"),Sxr=o("funnel"),Rxr=o(" \u2014 "),yK=a("a"),Pxr=o("TFFunnelForSequenceClassification"),Bxr=o(" (Funnel Transformer model)"),Ixr=l(),b3=a("li"),c5e=a("strong"),Nxr=o("gpt2"),qxr=o(" \u2014 "),xK=a("a"),jxr=o("TFGPT2ForSequenceClassification"),Dxr=o(" (OpenAI GPT-2 model)"),Gxr=l(),v3=a("li"),m5e=a("strong"),Oxr=o("gptj"),Vxr=o(" \u2014 "),$K=a("a"),Xxr=o("TFGPTJForSequenceClassification"),zxr=o(" (GPT-J model)"),Wxr=l(),F3=a("li"),f5e=a("strong"),Qxr=o("layoutlm"),Hxr=o(" \u2014 "),kK=a("a"),Uxr=o("TFLayoutLMForSequenceClassification"),Jxr=o(" (LayoutLM model)"),Yxr=l(),T3=a("li"),g5e=a("strong"),Kxr=o("longformer"),Zxr=o(" \u2014 "),SK=a("a"),e$r=o("TFLongformerForSequenceClassification"),o$r=o(" (Longformer model)"),r$r=l(),M3=a("li"),h5e=a("strong"),t$r=o("mobilebert"),a$r=o(" \u2014 "),RK=a("a"),n$r=o("TFMobileBertForSequenceClassification"),s$r=o(" (MobileBERT model)"),l$r=l(),E3=a("li"),u5e=a("strong"),i$r=o("mpnet"),d$r=o(" \u2014 "),PK=a("a"),c$r=o("TFMPNetForSequenceClassification"),m$r=o(" (MPNet model)"),f$r=l(),C3=a("li"),p5e=a("strong"),g$r=o("openai-gpt"),h$r=o(" \u2014 "),BK=a("a"),u$r=o("TFOpenAIGPTForSequenceClassification"),p$r=o(" (OpenAI GPT model)"),_$r=l(),w3=a("li"),_5e=a("strong"),b$r=o("rembert"),v$r=o(" \u2014 "),IK=a("a"),F$r=o("TFRemBertForSequenceClassification"),T$r=o(" (RemBERT model)"),M$r=l(),A3=a("li"),b5e=a("strong"),E$r=o("roberta"),C$r=o(" \u2014 "),NK=a("a"),w$r=o("TFRobertaForSequenceClassification"),A$r=o(" (RoBERTa model)"),L$r=l(),L3=a("li"),v5e=a("strong"),y$r=o("roformer"),x$r=o(" \u2014 "),qK=a("a"),$$r=o("TFRoFormerForSequenceClassification"),k$r=o(" (RoFormer model)"),S$r=l(),y3=a("li"),F5e=a("strong"),R$r=o("tapas"),P$r=o(" \u2014 "),jK=a("a"),B$r=o("TFTapasForSequenceClassification"),I$r=o(" (TAPAS model)"),N$r=l(),x3=a("li"),T5e=a("strong"),q$r=o("transfo-xl"),j$r=o(" \u2014 "),DK=a("a"),D$r=o("TFTransfoXLForSequenceClassification"),G$r=o(" (Transformer-XL model)"),O$r=l(),$3=a("li"),M5e=a("strong"),V$r=o("xlm"),X$r=o(" \u2014 "),GK=a("a"),z$r=o("TFXLMForSequenceClassification"),W$r=o(" (XLM model)"),Q$r=l(),k3=a("li"),E5e=a("strong"),H$r=o("xlm-roberta"),U$r=o(" \u2014 "),OK=a("a"),J$r=o("TFXLMRobertaForSequenceClassification"),Y$r=o(" (XLM-RoBERTa model)"),K$r=l(),S3=a("li"),C5e=a("strong"),Z$r=o("xlnet"),ekr=o(" \u2014 "),VK=a("a"),okr=o("TFXLNetForSequenceClassification"),rkr=o(" (XLNet model)"),tkr=l(),F(R3.$$.fragment),cWe=l(),xc=a("h2"),P3=a("a"),w5e=a("span"),F(Ix.$$.fragment),akr=l(),A5e=a("span"),nkr=o("TFAutoModelForMultipleChoice"),mWe=l(),dr=a("div"),F(Nx.$$.fragment),skr=l(),$c=a("p"),lkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XK=a("a"),ikr=o("from_pretrained()"),dkr=o(" class method or the "),zK=a("a"),ckr=o("from_config()"),mkr=o(` class
method.`),fkr=l(),qx=a("p"),gkr=o("This class cannot be instantiated directly using "),L5e=a("code"),hkr=o("__init__()"),ukr=o(" (throws an error)."),pkr=l(),Dt=a("div"),F(jx.$$.fragment),_kr=l(),y5e=a("p"),bkr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vkr=l(),kc=a("p"),Fkr=o(`Note:
Loading a model from its configuration file does `),x5e=a("strong"),Tkr=o("not"),Mkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),Ekr=o("from_pretrained()"),Ckr=o(" to load the model weights."),wkr=l(),F(B3.$$.fragment),Akr=l(),Nr=a("div"),F(Dx.$$.fragment),Lkr=l(),$5e=a("p"),ykr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xkr=l(),hn=a("p"),$kr=o("The model class to instantiate is selected based on the "),k5e=a("code"),kkr=o("model_type"),Skr=o(` property of the config object (either
passed as an argument or loaded from `),S5e=a("code"),Rkr=o("pretrained_model_name_or_path"),Pkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=a("code"),Bkr=o("pretrained_model_name_or_path"),Ikr=o(":"),Nkr=l(),be=a("ul"),I3=a("li"),P5e=a("strong"),qkr=o("albert"),jkr=o(" \u2014 "),QK=a("a"),Dkr=o("TFAlbertForMultipleChoice"),Gkr=o(" (ALBERT model)"),Okr=l(),N3=a("li"),B5e=a("strong"),Vkr=o("bert"),Xkr=o(" \u2014 "),HK=a("a"),zkr=o("TFBertForMultipleChoice"),Wkr=o(" (BERT model)"),Qkr=l(),q3=a("li"),I5e=a("strong"),Hkr=o("camembert"),Ukr=o(" \u2014 "),UK=a("a"),Jkr=o("TFCamembertForMultipleChoice"),Ykr=o(" (CamemBERT model)"),Kkr=l(),j3=a("li"),N5e=a("strong"),Zkr=o("convbert"),eSr=o(" \u2014 "),JK=a("a"),oSr=o("TFConvBertForMultipleChoice"),rSr=o(" (ConvBERT model)"),tSr=l(),D3=a("li"),q5e=a("strong"),aSr=o("distilbert"),nSr=o(" \u2014 "),YK=a("a"),sSr=o("TFDistilBertForMultipleChoice"),lSr=o(" (DistilBERT model)"),iSr=l(),G3=a("li"),j5e=a("strong"),dSr=o("electra"),cSr=o(" \u2014 "),KK=a("a"),mSr=o("TFElectraForMultipleChoice"),fSr=o(" (ELECTRA model)"),gSr=l(),O3=a("li"),D5e=a("strong"),hSr=o("flaubert"),uSr=o(" \u2014 "),ZK=a("a"),pSr=o("TFFlaubertForMultipleChoice"),_Sr=o(" (FlauBERT model)"),bSr=l(),V3=a("li"),G5e=a("strong"),vSr=o("funnel"),FSr=o(" \u2014 "),eZ=a("a"),TSr=o("TFFunnelForMultipleChoice"),MSr=o(" (Funnel Transformer model)"),ESr=l(),X3=a("li"),O5e=a("strong"),CSr=o("longformer"),wSr=o(" \u2014 "),oZ=a("a"),ASr=o("TFLongformerForMultipleChoice"),LSr=o(" (Longformer model)"),ySr=l(),z3=a("li"),V5e=a("strong"),xSr=o("mobilebert"),$Sr=o(" \u2014 "),rZ=a("a"),kSr=o("TFMobileBertForMultipleChoice"),SSr=o(" (MobileBERT model)"),RSr=l(),W3=a("li"),X5e=a("strong"),PSr=o("mpnet"),BSr=o(" \u2014 "),tZ=a("a"),ISr=o("TFMPNetForMultipleChoice"),NSr=o(" (MPNet model)"),qSr=l(),Q3=a("li"),z5e=a("strong"),jSr=o("rembert"),DSr=o(" \u2014 "),aZ=a("a"),GSr=o("TFRemBertForMultipleChoice"),OSr=o(" (RemBERT model)"),VSr=l(),H3=a("li"),W5e=a("strong"),XSr=o("roberta"),zSr=o(" \u2014 "),nZ=a("a"),WSr=o("TFRobertaForMultipleChoice"),QSr=o(" (RoBERTa model)"),HSr=l(),U3=a("li"),Q5e=a("strong"),USr=o("roformer"),JSr=o(" \u2014 "),sZ=a("a"),YSr=o("TFRoFormerForMultipleChoice"),KSr=o(" (RoFormer model)"),ZSr=l(),J3=a("li"),H5e=a("strong"),eRr=o("xlm"),oRr=o(" \u2014 "),lZ=a("a"),rRr=o("TFXLMForMultipleChoice"),tRr=o(" (XLM model)"),aRr=l(),Y3=a("li"),U5e=a("strong"),nRr=o("xlm-roberta"),sRr=o(" \u2014 "),iZ=a("a"),lRr=o("TFXLMRobertaForMultipleChoice"),iRr=o(" (XLM-RoBERTa model)"),dRr=l(),K3=a("li"),J5e=a("strong"),cRr=o("xlnet"),mRr=o(" \u2014 "),dZ=a("a"),fRr=o("TFXLNetForMultipleChoice"),gRr=o(" (XLNet model)"),hRr=l(),F(Z3.$$.fragment),fWe=l(),Sc=a("h2"),e0=a("a"),Y5e=a("span"),F(Gx.$$.fragment),uRr=l(),K5e=a("span"),pRr=o("TFAutoModelForNextSentencePrediction"),gWe=l(),cr=a("div"),F(Ox.$$.fragment),_Rr=l(),Rc=a("p"),bRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cZ=a("a"),vRr=o("from_pretrained()"),FRr=o(" class method or the "),mZ=a("a"),TRr=o("from_config()"),MRr=o(` class
method.`),ERr=l(),Vx=a("p"),CRr=o("This class cannot be instantiated directly using "),Z5e=a("code"),wRr=o("__init__()"),ARr=o(" (throws an error)."),LRr=l(),Gt=a("div"),F(Xx.$$.fragment),yRr=l(),e3e=a("p"),xRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$Rr=l(),Pc=a("p"),kRr=o(`Note:
Loading a model from its configuration file does `),o3e=a("strong"),SRr=o("not"),RRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),PRr=o("from_pretrained()"),BRr=o(" to load the model weights."),IRr=l(),F(o0.$$.fragment),NRr=l(),qr=a("div"),F(zx.$$.fragment),qRr=l(),r3e=a("p"),jRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DRr=l(),un=a("p"),GRr=o("The model class to instantiate is selected based on the "),t3e=a("code"),ORr=o("model_type"),VRr=o(` property of the config object (either
passed as an argument or loaded from `),a3e=a("code"),XRr=o("pretrained_model_name_or_path"),zRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=a("code"),WRr=o("pretrained_model_name_or_path"),QRr=o(":"),HRr=l(),Wx=a("ul"),r0=a("li"),s3e=a("strong"),URr=o("bert"),JRr=o(" \u2014 "),gZ=a("a"),YRr=o("TFBertForNextSentencePrediction"),KRr=o(" (BERT model)"),ZRr=l(),t0=a("li"),l3e=a("strong"),ePr=o("mobilebert"),oPr=o(" \u2014 "),hZ=a("a"),rPr=o("TFMobileBertForNextSentencePrediction"),tPr=o(" (MobileBERT model)"),aPr=l(),F(a0.$$.fragment),hWe=l(),Bc=a("h2"),n0=a("a"),i3e=a("span"),F(Qx.$$.fragment),nPr=l(),d3e=a("span"),sPr=o("TFAutoModelForTableQuestionAnswering"),uWe=l(),mr=a("div"),F(Hx.$$.fragment),lPr=l(),Ic=a("p"),iPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uZ=a("a"),dPr=o("from_pretrained()"),cPr=o(" class method or the "),pZ=a("a"),mPr=o("from_config()"),fPr=o(` class
method.`),gPr=l(),Ux=a("p"),hPr=o("This class cannot be instantiated directly using "),c3e=a("code"),uPr=o("__init__()"),pPr=o(" (throws an error)."),_Pr=l(),Ot=a("div"),F(Jx.$$.fragment),bPr=l(),m3e=a("p"),vPr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),FPr=l(),Nc=a("p"),TPr=o(`Note:
Loading a model from its configuration file does `),f3e=a("strong"),MPr=o("not"),EPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),CPr=o("from_pretrained()"),wPr=o(" to load the model weights."),APr=l(),F(s0.$$.fragment),LPr=l(),jr=a("div"),F(Yx.$$.fragment),yPr=l(),g3e=a("p"),xPr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$Pr=l(),pn=a("p"),kPr=o("The model class to instantiate is selected based on the "),h3e=a("code"),SPr=o("model_type"),RPr=o(` property of the config object (either
passed as an argument or loaded from `),u3e=a("code"),PPr=o("pretrained_model_name_or_path"),BPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=a("code"),IPr=o("pretrained_model_name_or_path"),NPr=o(":"),qPr=l(),_3e=a("ul"),l0=a("li"),b3e=a("strong"),jPr=o("tapas"),DPr=o(" \u2014 "),bZ=a("a"),GPr=o("TFTapasForQuestionAnswering"),OPr=o(" (TAPAS model)"),VPr=l(),F(i0.$$.fragment),pWe=l(),qc=a("h2"),d0=a("a"),v3e=a("span"),F(Kx.$$.fragment),XPr=l(),F3e=a("span"),zPr=o("TFAutoModelForTokenClassification"),_We=l(),fr=a("div"),F(Zx.$$.fragment),WPr=l(),jc=a("p"),QPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vZ=a("a"),HPr=o("from_pretrained()"),UPr=o(" class method or the "),FZ=a("a"),JPr=o("from_config()"),YPr=o(` class
method.`),KPr=l(),e$=a("p"),ZPr=o("This class cannot be instantiated directly using "),T3e=a("code"),eBr=o("__init__()"),oBr=o(" (throws an error)."),rBr=l(),Vt=a("div"),F(o$.$$.fragment),tBr=l(),M3e=a("p"),aBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nBr=l(),Dc=a("p"),sBr=o(`Note:
Loading a model from its configuration file does `),E3e=a("strong"),lBr=o("not"),iBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),dBr=o("from_pretrained()"),cBr=o(" to load the model weights."),mBr=l(),F(c0.$$.fragment),fBr=l(),Dr=a("div"),F(r$.$$.fragment),gBr=l(),C3e=a("p"),hBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uBr=l(),_n=a("p"),pBr=o("The model class to instantiate is selected based on the "),w3e=a("code"),_Br=o("model_type"),bBr=o(` property of the config object (either
passed as an argument or loaded from `),A3e=a("code"),vBr=o("pretrained_model_name_or_path"),FBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L3e=a("code"),TBr=o("pretrained_model_name_or_path"),MBr=o(":"),EBr=l(),de=a("ul"),m0=a("li"),y3e=a("strong"),CBr=o("albert"),wBr=o(" \u2014 "),MZ=a("a"),ABr=o("TFAlbertForTokenClassification"),LBr=o(" (ALBERT model)"),yBr=l(),f0=a("li"),x3e=a("strong"),xBr=o("bert"),$Br=o(" \u2014 "),EZ=a("a"),kBr=o("TFBertForTokenClassification"),SBr=o(" (BERT model)"),RBr=l(),g0=a("li"),$3e=a("strong"),PBr=o("camembert"),BBr=o(" \u2014 "),CZ=a("a"),IBr=o("TFCamembertForTokenClassification"),NBr=o(" (CamemBERT model)"),qBr=l(),h0=a("li"),k3e=a("strong"),jBr=o("convbert"),DBr=o(" \u2014 "),wZ=a("a"),GBr=o("TFConvBertForTokenClassification"),OBr=o(" (ConvBERT model)"),VBr=l(),u0=a("li"),S3e=a("strong"),XBr=o("deberta"),zBr=o(" \u2014 "),AZ=a("a"),WBr=o("TFDebertaForTokenClassification"),QBr=o(" (DeBERTa model)"),HBr=l(),p0=a("li"),R3e=a("strong"),UBr=o("deberta-v2"),JBr=o(" \u2014 "),LZ=a("a"),YBr=o("TFDebertaV2ForTokenClassification"),KBr=o(" (DeBERTa-v2 model)"),ZBr=l(),_0=a("li"),P3e=a("strong"),eIr=o("distilbert"),oIr=o(" \u2014 "),yZ=a("a"),rIr=o("TFDistilBertForTokenClassification"),tIr=o(" (DistilBERT model)"),aIr=l(),b0=a("li"),B3e=a("strong"),nIr=o("electra"),sIr=o(" \u2014 "),xZ=a("a"),lIr=o("TFElectraForTokenClassification"),iIr=o(" (ELECTRA model)"),dIr=l(),v0=a("li"),I3e=a("strong"),cIr=o("flaubert"),mIr=o(" \u2014 "),$Z=a("a"),fIr=o("TFFlaubertForTokenClassification"),gIr=o(" (FlauBERT model)"),hIr=l(),F0=a("li"),N3e=a("strong"),uIr=o("funnel"),pIr=o(" \u2014 "),kZ=a("a"),_Ir=o("TFFunnelForTokenClassification"),bIr=o(" (Funnel Transformer model)"),vIr=l(),T0=a("li"),q3e=a("strong"),FIr=o("layoutlm"),TIr=o(" \u2014 "),SZ=a("a"),MIr=o("TFLayoutLMForTokenClassification"),EIr=o(" (LayoutLM model)"),CIr=l(),M0=a("li"),j3e=a("strong"),wIr=o("longformer"),AIr=o(" \u2014 "),RZ=a("a"),LIr=o("TFLongformerForTokenClassification"),yIr=o(" (Longformer model)"),xIr=l(),E0=a("li"),D3e=a("strong"),$Ir=o("mobilebert"),kIr=o(" \u2014 "),PZ=a("a"),SIr=o("TFMobileBertForTokenClassification"),RIr=o(" (MobileBERT model)"),PIr=l(),C0=a("li"),G3e=a("strong"),BIr=o("mpnet"),IIr=o(" \u2014 "),BZ=a("a"),NIr=o("TFMPNetForTokenClassification"),qIr=o(" (MPNet model)"),jIr=l(),w0=a("li"),O3e=a("strong"),DIr=o("rembert"),GIr=o(" \u2014 "),IZ=a("a"),OIr=o("TFRemBertForTokenClassification"),VIr=o(" (RemBERT model)"),XIr=l(),A0=a("li"),V3e=a("strong"),zIr=o("roberta"),WIr=o(" \u2014 "),NZ=a("a"),QIr=o("TFRobertaForTokenClassification"),HIr=o(" (RoBERTa model)"),UIr=l(),L0=a("li"),X3e=a("strong"),JIr=o("roformer"),YIr=o(" \u2014 "),qZ=a("a"),KIr=o("TFRoFormerForTokenClassification"),ZIr=o(" (RoFormer model)"),eNr=l(),y0=a("li"),z3e=a("strong"),oNr=o("xlm"),rNr=o(" \u2014 "),jZ=a("a"),tNr=o("TFXLMForTokenClassification"),aNr=o(" (XLM model)"),nNr=l(),x0=a("li"),W3e=a("strong"),sNr=o("xlm-roberta"),lNr=o(" \u2014 "),DZ=a("a"),iNr=o("TFXLMRobertaForTokenClassification"),dNr=o(" (XLM-RoBERTa model)"),cNr=l(),$0=a("li"),Q3e=a("strong"),mNr=o("xlnet"),fNr=o(" \u2014 "),GZ=a("a"),gNr=o("TFXLNetForTokenClassification"),hNr=o(" (XLNet model)"),uNr=l(),F(k0.$$.fragment),bWe=l(),Gc=a("h2"),S0=a("a"),H3e=a("span"),F(t$.$$.fragment),pNr=l(),U3e=a("span"),_Nr=o("TFAutoModelForQuestionAnswering"),vWe=l(),gr=a("div"),F(a$.$$.fragment),bNr=l(),Oc=a("p"),vNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OZ=a("a"),FNr=o("from_pretrained()"),TNr=o(" class method or the "),VZ=a("a"),MNr=o("from_config()"),ENr=o(` class
method.`),CNr=l(),n$=a("p"),wNr=o("This class cannot be instantiated directly using "),J3e=a("code"),ANr=o("__init__()"),LNr=o(" (throws an error)."),yNr=l(),Xt=a("div"),F(s$.$$.fragment),xNr=l(),Y3e=a("p"),$Nr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kNr=l(),Vc=a("p"),SNr=o(`Note:
Loading a model from its configuration file does `),K3e=a("strong"),RNr=o("not"),PNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=a("a"),BNr=o("from_pretrained()"),INr=o(" to load the model weights."),NNr=l(),F(R0.$$.fragment),qNr=l(),Gr=a("div"),F(l$.$$.fragment),jNr=l(),Z3e=a("p"),DNr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),GNr=l(),bn=a("p"),ONr=o("The model class to instantiate is selected based on the "),e0e=a("code"),VNr=o("model_type"),XNr=o(` property of the config object (either
passed as an argument or loaded from `),o0e=a("code"),zNr=o("pretrained_model_name_or_path"),WNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=a("code"),QNr=o("pretrained_model_name_or_path"),HNr=o(":"),UNr=l(),ce=a("ul"),P0=a("li"),t0e=a("strong"),JNr=o("albert"),YNr=o(" \u2014 "),zZ=a("a"),KNr=o("TFAlbertForQuestionAnswering"),ZNr=o(" (ALBERT model)"),eqr=l(),B0=a("li"),a0e=a("strong"),oqr=o("bert"),rqr=o(" \u2014 "),WZ=a("a"),tqr=o("TFBertForQuestionAnswering"),aqr=o(" (BERT model)"),nqr=l(),I0=a("li"),n0e=a("strong"),sqr=o("camembert"),lqr=o(" \u2014 "),QZ=a("a"),iqr=o("TFCamembertForQuestionAnswering"),dqr=o(" (CamemBERT model)"),cqr=l(),N0=a("li"),s0e=a("strong"),mqr=o("convbert"),fqr=o(" \u2014 "),HZ=a("a"),gqr=o("TFConvBertForQuestionAnswering"),hqr=o(" (ConvBERT model)"),uqr=l(),q0=a("li"),l0e=a("strong"),pqr=o("deberta"),_qr=o(" \u2014 "),UZ=a("a"),bqr=o("TFDebertaForQuestionAnswering"),vqr=o(" (DeBERTa model)"),Fqr=l(),j0=a("li"),i0e=a("strong"),Tqr=o("deberta-v2"),Mqr=o(" \u2014 "),JZ=a("a"),Eqr=o("TFDebertaV2ForQuestionAnswering"),Cqr=o(" (DeBERTa-v2 model)"),wqr=l(),D0=a("li"),d0e=a("strong"),Aqr=o("distilbert"),Lqr=o(" \u2014 "),YZ=a("a"),yqr=o("TFDistilBertForQuestionAnswering"),xqr=o(" (DistilBERT model)"),$qr=l(),G0=a("li"),c0e=a("strong"),kqr=o("electra"),Sqr=o(" \u2014 "),KZ=a("a"),Rqr=o("TFElectraForQuestionAnswering"),Pqr=o(" (ELECTRA model)"),Bqr=l(),O0=a("li"),m0e=a("strong"),Iqr=o("flaubert"),Nqr=o(" \u2014 "),ZZ=a("a"),qqr=o("TFFlaubertForQuestionAnsweringSimple"),jqr=o(" (FlauBERT model)"),Dqr=l(),V0=a("li"),f0e=a("strong"),Gqr=o("funnel"),Oqr=o(" \u2014 "),eee=a("a"),Vqr=o("TFFunnelForQuestionAnswering"),Xqr=o(" (Funnel Transformer model)"),zqr=l(),X0=a("li"),g0e=a("strong"),Wqr=o("gptj"),Qqr=o(" \u2014 "),oee=a("a"),Hqr=o("TFGPTJForQuestionAnswering"),Uqr=o(" (GPT-J model)"),Jqr=l(),z0=a("li"),h0e=a("strong"),Yqr=o("longformer"),Kqr=o(" \u2014 "),ree=a("a"),Zqr=o("TFLongformerForQuestionAnswering"),ejr=o(" (Longformer model)"),ojr=l(),W0=a("li"),u0e=a("strong"),rjr=o("mobilebert"),tjr=o(" \u2014 "),tee=a("a"),ajr=o("TFMobileBertForQuestionAnswering"),njr=o(" (MobileBERT model)"),sjr=l(),Q0=a("li"),p0e=a("strong"),ljr=o("mpnet"),ijr=o(" \u2014 "),aee=a("a"),djr=o("TFMPNetForQuestionAnswering"),cjr=o(" (MPNet model)"),mjr=l(),H0=a("li"),_0e=a("strong"),fjr=o("rembert"),gjr=o(" \u2014 "),nee=a("a"),hjr=o("TFRemBertForQuestionAnswering"),ujr=o(" (RemBERT model)"),pjr=l(),U0=a("li"),b0e=a("strong"),_jr=o("roberta"),bjr=o(" \u2014 "),see=a("a"),vjr=o("TFRobertaForQuestionAnswering"),Fjr=o(" (RoBERTa model)"),Tjr=l(),J0=a("li"),v0e=a("strong"),Mjr=o("roformer"),Ejr=o(" \u2014 "),lee=a("a"),Cjr=o("TFRoFormerForQuestionAnswering"),wjr=o(" (RoFormer model)"),Ajr=l(),Y0=a("li"),F0e=a("strong"),Ljr=o("xlm"),yjr=o(" \u2014 "),iee=a("a"),xjr=o("TFXLMForQuestionAnsweringSimple"),$jr=o(" (XLM model)"),kjr=l(),K0=a("li"),T0e=a("strong"),Sjr=o("xlm-roberta"),Rjr=o(" \u2014 "),dee=a("a"),Pjr=o("TFXLMRobertaForQuestionAnswering"),Bjr=o(" (XLM-RoBERTa model)"),Ijr=l(),Z0=a("li"),M0e=a("strong"),Njr=o("xlnet"),qjr=o(" \u2014 "),cee=a("a"),jjr=o("TFXLNetForQuestionAnsweringSimple"),Djr=o(" (XLNet model)"),Gjr=l(),F(ew.$$.fragment),FWe=l(),Xc=a("h2"),ow=a("a"),E0e=a("span"),F(i$.$$.fragment),Ojr=l(),C0e=a("span"),Vjr=o("TFAutoModelForVision2Seq"),TWe=l(),hr=a("div"),F(d$.$$.fragment),Xjr=l(),zc=a("p"),zjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mee=a("a"),Wjr=o("from_pretrained()"),Qjr=o(" class method or the "),fee=a("a"),Hjr=o("from_config()"),Ujr=o(` class
method.`),Jjr=l(),c$=a("p"),Yjr=o("This class cannot be instantiated directly using "),w0e=a("code"),Kjr=o("__init__()"),Zjr=o(" (throws an error)."),eDr=l(),zt=a("div"),F(m$.$$.fragment),oDr=l(),A0e=a("p"),rDr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tDr=l(),Wc=a("p"),aDr=o(`Note:
Loading a model from its configuration file does `),L0e=a("strong"),nDr=o("not"),sDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=a("a"),lDr=o("from_pretrained()"),iDr=o(" to load the model weights."),dDr=l(),F(rw.$$.fragment),cDr=l(),Or=a("div"),F(f$.$$.fragment),mDr=l(),y0e=a("p"),fDr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gDr=l(),vn=a("p"),hDr=o("The model class to instantiate is selected based on the "),x0e=a("code"),uDr=o("model_type"),pDr=o(` property of the config object (either
passed as an argument or loaded from `),$0e=a("code"),_Dr=o("pretrained_model_name_or_path"),bDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k0e=a("code"),vDr=o("pretrained_model_name_or_path"),FDr=o(":"),TDr=l(),S0e=a("ul"),tw=a("li"),R0e=a("strong"),MDr=o("vision-encoder-decoder"),EDr=o(" \u2014 "),hee=a("a"),CDr=o("TFVisionEncoderDecoderModel"),wDr=o(" (Vision Encoder decoder model)"),ADr=l(),F(aw.$$.fragment),MWe=l(),Qc=a("h2"),nw=a("a"),P0e=a("span"),F(g$.$$.fragment),LDr=l(),B0e=a("span"),yDr=o("TFAutoModelForSpeechSeq2Seq"),EWe=l(),ur=a("div"),F(h$.$$.fragment),xDr=l(),Hc=a("p"),$Dr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uee=a("a"),kDr=o("from_pretrained()"),SDr=o(" class method or the "),pee=a("a"),RDr=o("from_config()"),PDr=o(` class
method.`),BDr=l(),u$=a("p"),IDr=o("This class cannot be instantiated directly using "),I0e=a("code"),NDr=o("__init__()"),qDr=o(" (throws an error)."),jDr=l(),Wt=a("div"),F(p$.$$.fragment),DDr=l(),N0e=a("p"),GDr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ODr=l(),Uc=a("p"),VDr=o(`Note:
Loading a model from its configuration file does `),q0e=a("strong"),XDr=o("not"),zDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=a("a"),WDr=o("from_pretrained()"),QDr=o(" to load the model weights."),HDr=l(),F(sw.$$.fragment),UDr=l(),Vr=a("div"),F(_$.$$.fragment),JDr=l(),j0e=a("p"),YDr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),KDr=l(),Fn=a("p"),ZDr=o("The model class to instantiate is selected based on the "),D0e=a("code"),eGr=o("model_type"),oGr=o(` property of the config object (either
passed as an argument or loaded from `),G0e=a("code"),rGr=o("pretrained_model_name_or_path"),tGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=a("code"),aGr=o("pretrained_model_name_or_path"),nGr=o(":"),sGr=l(),V0e=a("ul"),lw=a("li"),X0e=a("strong"),lGr=o("speech_to_text"),iGr=o(" \u2014 "),bee=a("a"),dGr=o("TFSpeech2TextForConditionalGeneration"),cGr=o(" (Speech2Text model)"),mGr=l(),F(iw.$$.fragment),CWe=l(),Jc=a("h2"),dw=a("a"),z0e=a("span"),F(b$.$$.fragment),fGr=l(),W0e=a("span"),gGr=o("FlaxAutoModel"),wWe=l(),pr=a("div"),F(v$.$$.fragment),hGr=l(),Yc=a("p"),uGr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vee=a("a"),pGr=o("from_pretrained()"),_Gr=o(" class method or the "),Fee=a("a"),bGr=o("from_config()"),vGr=o(` class
method.`),FGr=l(),F$=a("p"),TGr=o("This class cannot be instantiated directly using "),Q0e=a("code"),MGr=o("__init__()"),EGr=o(" (throws an error)."),CGr=l(),Qt=a("div"),F(T$.$$.fragment),wGr=l(),H0e=a("p"),AGr=o("Instantiates one of the base model classes of the library from a configuration."),LGr=l(),Kc=a("p"),yGr=o(`Note:
Loading a model from its configuration file does `),U0e=a("strong"),xGr=o("not"),$Gr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=a("a"),kGr=o("from_pretrained()"),SGr=o(" to load the model weights."),RGr=l(),F(cw.$$.fragment),PGr=l(),Xr=a("div"),F(M$.$$.fragment),BGr=l(),J0e=a("p"),IGr=o("Instantiate one of the base model classes of the library from a pretrained model."),NGr=l(),Tn=a("p"),qGr=o("The model class to instantiate is selected based on the "),Y0e=a("code"),jGr=o("model_type"),DGr=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),GGr=o("pretrained_model_name_or_path"),OGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),VGr=o("pretrained_model_name_or_path"),XGr=o(":"),zGr=l(),oe=a("ul"),mw=a("li"),ewe=a("strong"),WGr=o("albert"),QGr=o(" \u2014 "),Mee=a("a"),HGr=o("FlaxAlbertModel"),UGr=o(" (ALBERT model)"),JGr=l(),fw=a("li"),owe=a("strong"),YGr=o("bart"),KGr=o(" \u2014 "),Eee=a("a"),ZGr=o("FlaxBartModel"),eOr=o(" (BART model)"),oOr=l(),gw=a("li"),rwe=a("strong"),rOr=o("beit"),tOr=o(" \u2014 "),Cee=a("a"),aOr=o("FlaxBeitModel"),nOr=o(" (BEiT model)"),sOr=l(),hw=a("li"),twe=a("strong"),lOr=o("bert"),iOr=o(" \u2014 "),wee=a("a"),dOr=o("FlaxBertModel"),cOr=o(" (BERT model)"),mOr=l(),uw=a("li"),awe=a("strong"),fOr=o("big_bird"),gOr=o(" \u2014 "),Aee=a("a"),hOr=o("FlaxBigBirdModel"),uOr=o(" (BigBird model)"),pOr=l(),pw=a("li"),nwe=a("strong"),_Or=o("blenderbot"),bOr=o(" \u2014 "),Lee=a("a"),vOr=o("FlaxBlenderbotModel"),FOr=o(" (Blenderbot model)"),TOr=l(),_w=a("li"),swe=a("strong"),MOr=o("blenderbot-small"),EOr=o(" \u2014 "),yee=a("a"),COr=o("FlaxBlenderbotSmallModel"),wOr=o(" (BlenderbotSmall model)"),AOr=l(),bw=a("li"),lwe=a("strong"),LOr=o("clip"),yOr=o(" \u2014 "),xee=a("a"),xOr=o("FlaxCLIPModel"),$Or=o(" (CLIP model)"),kOr=l(),vw=a("li"),iwe=a("strong"),SOr=o("distilbert"),ROr=o(" \u2014 "),$ee=a("a"),POr=o("FlaxDistilBertModel"),BOr=o(" (DistilBERT model)"),IOr=l(),Fw=a("li"),dwe=a("strong"),NOr=o("electra"),qOr=o(" \u2014 "),kee=a("a"),jOr=o("FlaxElectraModel"),DOr=o(" (ELECTRA model)"),GOr=l(),Tw=a("li"),cwe=a("strong"),OOr=o("gpt2"),VOr=o(" \u2014 "),See=a("a"),XOr=o("FlaxGPT2Model"),zOr=o(" (OpenAI GPT-2 model)"),WOr=l(),Mw=a("li"),mwe=a("strong"),QOr=o("gpt_neo"),HOr=o(" \u2014 "),Ree=a("a"),UOr=o("FlaxGPTNeoModel"),JOr=o(" (GPT Neo model)"),YOr=l(),Ew=a("li"),fwe=a("strong"),KOr=o("gptj"),ZOr=o(" \u2014 "),Pee=a("a"),eVr=o("FlaxGPTJModel"),oVr=o(" (GPT-J model)"),rVr=l(),Cw=a("li"),gwe=a("strong"),tVr=o("longt5"),aVr=o(" \u2014 "),Bee=a("a"),nVr=o("FlaxLongT5Model"),sVr=o(" (LongT5 model)"),lVr=l(),ww=a("li"),hwe=a("strong"),iVr=o("marian"),dVr=o(" \u2014 "),Iee=a("a"),cVr=o("FlaxMarianModel"),mVr=o(" (Marian model)"),fVr=l(),Aw=a("li"),uwe=a("strong"),gVr=o("mbart"),hVr=o(" \u2014 "),Nee=a("a"),uVr=o("FlaxMBartModel"),pVr=o(" (mBART model)"),_Vr=l(),Lw=a("li"),pwe=a("strong"),bVr=o("mt5"),vVr=o(" \u2014 "),qee=a("a"),FVr=o("FlaxMT5Model"),TVr=o(" (MT5 model)"),MVr=l(),yw=a("li"),_we=a("strong"),EVr=o("opt"),CVr=o(" \u2014 "),jee=a("a"),wVr=o("FlaxOPTModel"),AVr=o(" (OPT model)"),LVr=l(),xw=a("li"),bwe=a("strong"),yVr=o("pegasus"),xVr=o(" \u2014 "),Dee=a("a"),$Vr=o("FlaxPegasusModel"),kVr=o(" (Pegasus model)"),SVr=l(),$w=a("li"),vwe=a("strong"),RVr=o("roberta"),PVr=o(" \u2014 "),Gee=a("a"),BVr=o("FlaxRobertaModel"),IVr=o(" (RoBERTa model)"),NVr=l(),kw=a("li"),Fwe=a("strong"),qVr=o("roformer"),jVr=o(" \u2014 "),Oee=a("a"),DVr=o("FlaxRoFormerModel"),GVr=o(" (RoFormer model)"),OVr=l(),Sw=a("li"),Twe=a("strong"),VVr=o("t5"),XVr=o(" \u2014 "),Vee=a("a"),zVr=o("FlaxT5Model"),WVr=o(" (T5 model)"),QVr=l(),Rw=a("li"),Mwe=a("strong"),HVr=o("vision-text-dual-encoder"),UVr=o(" \u2014 "),Xee=a("a"),JVr=o("FlaxVisionTextDualEncoderModel"),YVr=o(" (VisionTextDualEncoder model)"),KVr=l(),Pw=a("li"),Ewe=a("strong"),ZVr=o("vit"),eXr=o(" \u2014 "),zee=a("a"),oXr=o("FlaxViTModel"),rXr=o(" (ViT model)"),tXr=l(),Bw=a("li"),Cwe=a("strong"),aXr=o("wav2vec2"),nXr=o(" \u2014 "),Wee=a("a"),sXr=o("FlaxWav2Vec2Model"),lXr=o(" (Wav2Vec2 model)"),iXr=l(),Iw=a("li"),wwe=a("strong"),dXr=o("xglm"),cXr=o(" \u2014 "),Qee=a("a"),mXr=o("FlaxXGLMModel"),fXr=o(" (XGLM model)"),gXr=l(),Nw=a("li"),Awe=a("strong"),hXr=o("xlm-roberta"),uXr=o(" \u2014 "),Hee=a("a"),pXr=o("FlaxXLMRobertaModel"),_Xr=o(" (XLM-RoBERTa model)"),bXr=l(),F(qw.$$.fragment),AWe=l(),Zc=a("h2"),jw=a("a"),Lwe=a("span"),F(E$.$$.fragment),vXr=l(),ywe=a("span"),FXr=o("FlaxAutoModelForCausalLM"),LWe=l(),_r=a("div"),F(C$.$$.fragment),TXr=l(),em=a("p"),MXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uee=a("a"),EXr=o("from_pretrained()"),CXr=o(" class method or the "),Jee=a("a"),wXr=o("from_config()"),AXr=o(` class
method.`),LXr=l(),w$=a("p"),yXr=o("This class cannot be instantiated directly using "),xwe=a("code"),xXr=o("__init__()"),$Xr=o(" (throws an error)."),kXr=l(),Ht=a("div"),F(A$.$$.fragment),SXr=l(),$we=a("p"),RXr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),PXr=l(),om=a("p"),BXr=o(`Note:
Loading a model from its configuration file does `),kwe=a("strong"),IXr=o("not"),NXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=a("a"),qXr=o("from_pretrained()"),jXr=o(" to load the model weights."),DXr=l(),F(Dw.$$.fragment),GXr=l(),zr=a("div"),F(L$.$$.fragment),OXr=l(),Swe=a("p"),VXr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XXr=l(),Mn=a("p"),zXr=o("The model class to instantiate is selected based on the "),Rwe=a("code"),WXr=o("model_type"),QXr=o(` property of the config object (either
passed as an argument or loaded from `),Pwe=a("code"),HXr=o("pretrained_model_name_or_path"),UXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bwe=a("code"),JXr=o("pretrained_model_name_or_path"),YXr=o(":"),KXr=l(),xe=a("ul"),Gw=a("li"),Iwe=a("strong"),ZXr=o("bart"),ezr=o(" \u2014 "),Kee=a("a"),ozr=o("FlaxBartForCausalLM"),rzr=o(" (BART model)"),tzr=l(),Ow=a("li"),Nwe=a("strong"),azr=o("bert"),nzr=o(" \u2014 "),Zee=a("a"),szr=o("FlaxBertForCausalLM"),lzr=o(" (BERT model)"),izr=l(),Vw=a("li"),qwe=a("strong"),dzr=o("big_bird"),czr=o(" \u2014 "),eoe=a("a"),mzr=o("FlaxBigBirdForCausalLM"),fzr=o(" (BigBird model)"),gzr=l(),Xw=a("li"),jwe=a("strong"),hzr=o("electra"),uzr=o(" \u2014 "),ooe=a("a"),pzr=o("FlaxElectraForCausalLM"),_zr=o(" (ELECTRA model)"),bzr=l(),zw=a("li"),Dwe=a("strong"),vzr=o("gpt2"),Fzr=o(" \u2014 "),roe=a("a"),Tzr=o("FlaxGPT2LMHeadModel"),Mzr=o(" (OpenAI GPT-2 model)"),Ezr=l(),Ww=a("li"),Gwe=a("strong"),Czr=o("gpt_neo"),wzr=o(" \u2014 "),toe=a("a"),Azr=o("FlaxGPTNeoForCausalLM"),Lzr=o(" (GPT Neo model)"),yzr=l(),Qw=a("li"),Owe=a("strong"),xzr=o("gptj"),$zr=o(" \u2014 "),aoe=a("a"),kzr=o("FlaxGPTJForCausalLM"),Szr=o(" (GPT-J model)"),Rzr=l(),Hw=a("li"),Vwe=a("strong"),Pzr=o("opt"),Bzr=o(" \u2014 "),noe=a("a"),Izr=o("FlaxOPTForCausalLM"),Nzr=o(" (OPT model)"),qzr=l(),Uw=a("li"),Xwe=a("strong"),jzr=o("roberta"),Dzr=o(" \u2014 "),soe=a("a"),Gzr=o("FlaxRobertaForCausalLM"),Ozr=o(" (RoBERTa model)"),Vzr=l(),Jw=a("li"),zwe=a("strong"),Xzr=o("xglm"),zzr=o(" \u2014 "),loe=a("a"),Wzr=o("FlaxXGLMForCausalLM"),Qzr=o(" (XGLM model)"),Hzr=l(),F(Yw.$$.fragment),yWe=l(),rm=a("h2"),Kw=a("a"),Wwe=a("span"),F(y$.$$.fragment),Uzr=l(),Qwe=a("span"),Jzr=o("FlaxAutoModelForPreTraining"),xWe=l(),br=a("div"),F(x$.$$.fragment),Yzr=l(),tm=a("p"),Kzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ioe=a("a"),Zzr=o("from_pretrained()"),eWr=o(" class method or the "),doe=a("a"),oWr=o("from_config()"),rWr=o(` class
method.`),tWr=l(),$$=a("p"),aWr=o("This class cannot be instantiated directly using "),Hwe=a("code"),nWr=o("__init__()"),sWr=o(" (throws an error)."),lWr=l(),Ut=a("div"),F(k$.$$.fragment),iWr=l(),Uwe=a("p"),dWr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cWr=l(),am=a("p"),mWr=o(`Note:
Loading a model from its configuration file does `),Jwe=a("strong"),fWr=o("not"),gWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=a("a"),hWr=o("from_pretrained()"),uWr=o(" to load the model weights."),pWr=l(),F(Zw.$$.fragment),_Wr=l(),Wr=a("div"),F(S$.$$.fragment),bWr=l(),Ywe=a("p"),vWr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FWr=l(),En=a("p"),TWr=o("The model class to instantiate is selected based on the "),Kwe=a("code"),MWr=o("model_type"),EWr=o(` property of the config object (either
passed as an argument or loaded from `),Zwe=a("code"),CWr=o("pretrained_model_name_or_path"),wWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eAe=a("code"),AWr=o("pretrained_model_name_or_path"),LWr=o(":"),yWr=l(),Ee=a("ul"),eA=a("li"),oAe=a("strong"),xWr=o("albert"),$Wr=o(" \u2014 "),moe=a("a"),kWr=o("FlaxAlbertForPreTraining"),SWr=o(" (ALBERT model)"),RWr=l(),oA=a("li"),rAe=a("strong"),PWr=o("bart"),BWr=o(" \u2014 "),foe=a("a"),IWr=o("FlaxBartForConditionalGeneration"),NWr=o(" (BART model)"),qWr=l(),rA=a("li"),tAe=a("strong"),jWr=o("bert"),DWr=o(" \u2014 "),goe=a("a"),GWr=o("FlaxBertForPreTraining"),OWr=o(" (BERT model)"),VWr=l(),tA=a("li"),aAe=a("strong"),XWr=o("big_bird"),zWr=o(" \u2014 "),hoe=a("a"),WWr=o("FlaxBigBirdForPreTraining"),QWr=o(" (BigBird model)"),HWr=l(),aA=a("li"),nAe=a("strong"),UWr=o("electra"),JWr=o(" \u2014 "),uoe=a("a"),YWr=o("FlaxElectraForPreTraining"),KWr=o(" (ELECTRA model)"),ZWr=l(),nA=a("li"),sAe=a("strong"),eQr=o("longt5"),oQr=o(" \u2014 "),poe=a("a"),rQr=o("FlaxLongT5ForConditionalGeneration"),tQr=o(" (LongT5 model)"),aQr=l(),sA=a("li"),lAe=a("strong"),nQr=o("mbart"),sQr=o(" \u2014 "),_oe=a("a"),lQr=o("FlaxMBartForConditionalGeneration"),iQr=o(" (mBART model)"),dQr=l(),lA=a("li"),iAe=a("strong"),cQr=o("mt5"),mQr=o(" \u2014 "),boe=a("a"),fQr=o("FlaxMT5ForConditionalGeneration"),gQr=o(" (MT5 model)"),hQr=l(),iA=a("li"),dAe=a("strong"),uQr=o("roberta"),pQr=o(" \u2014 "),voe=a("a"),_Qr=o("FlaxRobertaForMaskedLM"),bQr=o(" (RoBERTa model)"),vQr=l(),dA=a("li"),cAe=a("strong"),FQr=o("roformer"),TQr=o(" \u2014 "),Foe=a("a"),MQr=o("FlaxRoFormerForMaskedLM"),EQr=o(" (RoFormer model)"),CQr=l(),cA=a("li"),mAe=a("strong"),wQr=o("t5"),AQr=o(" \u2014 "),Toe=a("a"),LQr=o("FlaxT5ForConditionalGeneration"),yQr=o(" (T5 model)"),xQr=l(),mA=a("li"),fAe=a("strong"),$Qr=o("wav2vec2"),kQr=o(" \u2014 "),Moe=a("a"),SQr=o("FlaxWav2Vec2ForPreTraining"),RQr=o(" (Wav2Vec2 model)"),PQr=l(),fA=a("li"),gAe=a("strong"),BQr=o("xlm-roberta"),IQr=o(" \u2014 "),Eoe=a("a"),NQr=o("FlaxXLMRobertaForMaskedLM"),qQr=o(" (XLM-RoBERTa model)"),jQr=l(),F(gA.$$.fragment),$We=l(),nm=a("h2"),hA=a("a"),hAe=a("span"),F(R$.$$.fragment),DQr=l(),uAe=a("span"),GQr=o("FlaxAutoModelForMaskedLM"),kWe=l(),vr=a("div"),F(P$.$$.fragment),OQr=l(),sm=a("p"),VQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Coe=a("a"),XQr=o("from_pretrained()"),zQr=o(" class method or the "),woe=a("a"),WQr=o("from_config()"),QQr=o(` class
method.`),HQr=l(),B$=a("p"),UQr=o("This class cannot be instantiated directly using "),pAe=a("code"),JQr=o("__init__()"),YQr=o(" (throws an error)."),KQr=l(),Jt=a("div"),F(I$.$$.fragment),ZQr=l(),_Ae=a("p"),eHr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oHr=l(),lm=a("p"),rHr=o(`Note:
Loading a model from its configuration file does `),bAe=a("strong"),tHr=o("not"),aHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=a("a"),nHr=o("from_pretrained()"),sHr=o(" to load the model weights."),lHr=l(),F(uA.$$.fragment),iHr=l(),Qr=a("div"),F(N$.$$.fragment),dHr=l(),vAe=a("p"),cHr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mHr=l(),Cn=a("p"),fHr=o("The model class to instantiate is selected based on the "),FAe=a("code"),gHr=o("model_type"),hHr=o(` property of the config object (either
passed as an argument or loaded from `),TAe=a("code"),uHr=o("pretrained_model_name_or_path"),pHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MAe=a("code"),_Hr=o("pretrained_model_name_or_path"),bHr=o(":"),vHr=l(),$e=a("ul"),pA=a("li"),EAe=a("strong"),FHr=o("albert"),THr=o(" \u2014 "),Loe=a("a"),MHr=o("FlaxAlbertForMaskedLM"),EHr=o(" (ALBERT model)"),CHr=l(),_A=a("li"),CAe=a("strong"),wHr=o("bart"),AHr=o(" \u2014 "),yoe=a("a"),LHr=o("FlaxBartForConditionalGeneration"),yHr=o(" (BART model)"),xHr=l(),bA=a("li"),wAe=a("strong"),$Hr=o("bert"),kHr=o(" \u2014 "),xoe=a("a"),SHr=o("FlaxBertForMaskedLM"),RHr=o(" (BERT model)"),PHr=l(),vA=a("li"),AAe=a("strong"),BHr=o("big_bird"),IHr=o(" \u2014 "),$oe=a("a"),NHr=o("FlaxBigBirdForMaskedLM"),qHr=o(" (BigBird model)"),jHr=l(),FA=a("li"),LAe=a("strong"),DHr=o("distilbert"),GHr=o(" \u2014 "),koe=a("a"),OHr=o("FlaxDistilBertForMaskedLM"),VHr=o(" (DistilBERT model)"),XHr=l(),TA=a("li"),yAe=a("strong"),zHr=o("electra"),WHr=o(" \u2014 "),Soe=a("a"),QHr=o("FlaxElectraForMaskedLM"),HHr=o(" (ELECTRA model)"),UHr=l(),MA=a("li"),xAe=a("strong"),JHr=o("mbart"),YHr=o(" \u2014 "),Roe=a("a"),KHr=o("FlaxMBartForConditionalGeneration"),ZHr=o(" (mBART model)"),eUr=l(),EA=a("li"),$Ae=a("strong"),oUr=o("roberta"),rUr=o(" \u2014 "),Poe=a("a"),tUr=o("FlaxRobertaForMaskedLM"),aUr=o(" (RoBERTa model)"),nUr=l(),CA=a("li"),kAe=a("strong"),sUr=o("roformer"),lUr=o(" \u2014 "),Boe=a("a"),iUr=o("FlaxRoFormerForMaskedLM"),dUr=o(" (RoFormer model)"),cUr=l(),wA=a("li"),SAe=a("strong"),mUr=o("xlm-roberta"),fUr=o(" \u2014 "),Ioe=a("a"),gUr=o("FlaxXLMRobertaForMaskedLM"),hUr=o(" (XLM-RoBERTa model)"),uUr=l(),F(AA.$$.fragment),SWe=l(),im=a("h2"),LA=a("a"),RAe=a("span"),F(q$.$$.fragment),pUr=l(),PAe=a("span"),_Ur=o("FlaxAutoModelForSeq2SeqLM"),RWe=l(),Fr=a("div"),F(j$.$$.fragment),bUr=l(),dm=a("p"),vUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Noe=a("a"),FUr=o("from_pretrained()"),TUr=o(" class method or the "),qoe=a("a"),MUr=o("from_config()"),EUr=o(` class
method.`),CUr=l(),D$=a("p"),wUr=o("This class cannot be instantiated directly using "),BAe=a("code"),AUr=o("__init__()"),LUr=o(" (throws an error)."),yUr=l(),Yt=a("div"),F(G$.$$.fragment),xUr=l(),IAe=a("p"),$Ur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kUr=l(),cm=a("p"),SUr=o(`Note:
Loading a model from its configuration file does `),NAe=a("strong"),RUr=o("not"),PUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=a("a"),BUr=o("from_pretrained()"),IUr=o(" to load the model weights."),NUr=l(),F(yA.$$.fragment),qUr=l(),Hr=a("div"),F(O$.$$.fragment),jUr=l(),qAe=a("p"),DUr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GUr=l(),wn=a("p"),OUr=o("The model class to instantiate is selected based on the "),jAe=a("code"),VUr=o("model_type"),XUr=o(` property of the config object (either
passed as an argument or loaded from `),DAe=a("code"),zUr=o("pretrained_model_name_or_path"),WUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GAe=a("code"),QUr=o("pretrained_model_name_or_path"),HUr=o(":"),UUr=l(),ke=a("ul"),xA=a("li"),OAe=a("strong"),JUr=o("bart"),YUr=o(" \u2014 "),Doe=a("a"),KUr=o("FlaxBartForConditionalGeneration"),ZUr=o(" (BART model)"),eJr=l(),$A=a("li"),VAe=a("strong"),oJr=o("blenderbot"),rJr=o(" \u2014 "),Goe=a("a"),tJr=o("FlaxBlenderbotForConditionalGeneration"),aJr=o(" (Blenderbot model)"),nJr=l(),kA=a("li"),XAe=a("strong"),sJr=o("blenderbot-small"),lJr=o(" \u2014 "),Ooe=a("a"),iJr=o("FlaxBlenderbotSmallForConditionalGeneration"),dJr=o(" (BlenderbotSmall model)"),cJr=l(),SA=a("li"),zAe=a("strong"),mJr=o("encoder-decoder"),fJr=o(" \u2014 "),Voe=a("a"),gJr=o("FlaxEncoderDecoderModel"),hJr=o(" (Encoder decoder model)"),uJr=l(),RA=a("li"),WAe=a("strong"),pJr=o("longt5"),_Jr=o(" \u2014 "),Xoe=a("a"),bJr=o("FlaxLongT5ForConditionalGeneration"),vJr=o(" (LongT5 model)"),FJr=l(),PA=a("li"),QAe=a("strong"),TJr=o("marian"),MJr=o(" \u2014 "),zoe=a("a"),EJr=o("FlaxMarianMTModel"),CJr=o(" (Marian model)"),wJr=l(),BA=a("li"),HAe=a("strong"),AJr=o("mbart"),LJr=o(" \u2014 "),Woe=a("a"),yJr=o("FlaxMBartForConditionalGeneration"),xJr=o(" (mBART model)"),$Jr=l(),IA=a("li"),UAe=a("strong"),kJr=o("mt5"),SJr=o(" \u2014 "),Qoe=a("a"),RJr=o("FlaxMT5ForConditionalGeneration"),PJr=o(" (MT5 model)"),BJr=l(),NA=a("li"),JAe=a("strong"),IJr=o("pegasus"),NJr=o(" \u2014 "),Hoe=a("a"),qJr=o("FlaxPegasusForConditionalGeneration"),jJr=o(" (Pegasus model)"),DJr=l(),qA=a("li"),YAe=a("strong"),GJr=o("t5"),OJr=o(" \u2014 "),Uoe=a("a"),VJr=o("FlaxT5ForConditionalGeneration"),XJr=o(" (T5 model)"),zJr=l(),F(jA.$$.fragment),PWe=l(),mm=a("h2"),DA=a("a"),KAe=a("span"),F(V$.$$.fragment),WJr=l(),ZAe=a("span"),QJr=o("FlaxAutoModelForSequenceClassification"),BWe=l(),Tr=a("div"),F(X$.$$.fragment),HJr=l(),fm=a("p"),UJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Joe=a("a"),JJr=o("from_pretrained()"),YJr=o(" class method or the "),Yoe=a("a"),KJr=o("from_config()"),ZJr=o(` class
method.`),eYr=l(),z$=a("p"),oYr=o("This class cannot be instantiated directly using "),e6e=a("code"),rYr=o("__init__()"),tYr=o(" (throws an error)."),aYr=l(),Kt=a("div"),F(W$.$$.fragment),nYr=l(),o6e=a("p"),sYr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lYr=l(),gm=a("p"),iYr=o(`Note:
Loading a model from its configuration file does `),r6e=a("strong"),dYr=o("not"),cYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=a("a"),mYr=o("from_pretrained()"),fYr=o(" to load the model weights."),gYr=l(),F(GA.$$.fragment),hYr=l(),Ur=a("div"),F(Q$.$$.fragment),uYr=l(),t6e=a("p"),pYr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_Yr=l(),An=a("p"),bYr=o("The model class to instantiate is selected based on the "),a6e=a("code"),vYr=o("model_type"),FYr=o(` property of the config object (either
passed as an argument or loaded from `),n6e=a("code"),TYr=o("pretrained_model_name_or_path"),MYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=a("code"),EYr=o("pretrained_model_name_or_path"),CYr=o(":"),wYr=l(),Se=a("ul"),OA=a("li"),l6e=a("strong"),AYr=o("albert"),LYr=o(" \u2014 "),Zoe=a("a"),yYr=o("FlaxAlbertForSequenceClassification"),xYr=o(" (ALBERT model)"),$Yr=l(),VA=a("li"),i6e=a("strong"),kYr=o("bart"),SYr=o(" \u2014 "),ere=a("a"),RYr=o("FlaxBartForSequenceClassification"),PYr=o(" (BART model)"),BYr=l(),XA=a("li"),d6e=a("strong"),IYr=o("bert"),NYr=o(" \u2014 "),ore=a("a"),qYr=o("FlaxBertForSequenceClassification"),jYr=o(" (BERT model)"),DYr=l(),zA=a("li"),c6e=a("strong"),GYr=o("big_bird"),OYr=o(" \u2014 "),rre=a("a"),VYr=o("FlaxBigBirdForSequenceClassification"),XYr=o(" (BigBird model)"),zYr=l(),WA=a("li"),m6e=a("strong"),WYr=o("distilbert"),QYr=o(" \u2014 "),tre=a("a"),HYr=o("FlaxDistilBertForSequenceClassification"),UYr=o(" (DistilBERT model)"),JYr=l(),QA=a("li"),f6e=a("strong"),YYr=o("electra"),KYr=o(" \u2014 "),are=a("a"),ZYr=o("FlaxElectraForSequenceClassification"),eKr=o(" (ELECTRA model)"),oKr=l(),HA=a("li"),g6e=a("strong"),rKr=o("mbart"),tKr=o(" \u2014 "),nre=a("a"),aKr=o("FlaxMBartForSequenceClassification"),nKr=o(" (mBART model)"),sKr=l(),UA=a("li"),h6e=a("strong"),lKr=o("roberta"),iKr=o(" \u2014 "),sre=a("a"),dKr=o("FlaxRobertaForSequenceClassification"),cKr=o(" (RoBERTa model)"),mKr=l(),JA=a("li"),u6e=a("strong"),fKr=o("roformer"),gKr=o(" \u2014 "),lre=a("a"),hKr=o("FlaxRoFormerForSequenceClassification"),uKr=o(" (RoFormer model)"),pKr=l(),YA=a("li"),p6e=a("strong"),_Kr=o("xlm-roberta"),bKr=o(" \u2014 "),ire=a("a"),vKr=o("FlaxXLMRobertaForSequenceClassification"),FKr=o(" (XLM-RoBERTa model)"),TKr=l(),F(KA.$$.fragment),IWe=l(),hm=a("h2"),ZA=a("a"),_6e=a("span"),F(H$.$$.fragment),MKr=l(),b6e=a("span"),EKr=o("FlaxAutoModelForQuestionAnswering"),NWe=l(),Mr=a("div"),F(U$.$$.fragment),CKr=l(),um=a("p"),wKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dre=a("a"),AKr=o("from_pretrained()"),LKr=o(" class method or the "),cre=a("a"),yKr=o("from_config()"),xKr=o(` class
method.`),$Kr=l(),J$=a("p"),kKr=o("This class cannot be instantiated directly using "),v6e=a("code"),SKr=o("__init__()"),RKr=o(" (throws an error)."),PKr=l(),Zt=a("div"),F(Y$.$$.fragment),BKr=l(),F6e=a("p"),IKr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),NKr=l(),pm=a("p"),qKr=o(`Note:
Loading a model from its configuration file does `),T6e=a("strong"),jKr=o("not"),DKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=a("a"),GKr=o("from_pretrained()"),OKr=o(" to load the model weights."),VKr=l(),F(e6.$$.fragment),XKr=l(),Jr=a("div"),F(K$.$$.fragment),zKr=l(),M6e=a("p"),WKr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),QKr=l(),Ln=a("p"),HKr=o("The model class to instantiate is selected based on the "),E6e=a("code"),UKr=o("model_type"),JKr=o(` property of the config object (either
passed as an argument or loaded from `),C6e=a("code"),YKr=o("pretrained_model_name_or_path"),KKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w6e=a("code"),ZKr=o("pretrained_model_name_or_path"),eZr=o(":"),oZr=l(),Re=a("ul"),o6=a("li"),A6e=a("strong"),rZr=o("albert"),tZr=o(" \u2014 "),fre=a("a"),aZr=o("FlaxAlbertForQuestionAnswering"),nZr=o(" (ALBERT model)"),sZr=l(),r6=a("li"),L6e=a("strong"),lZr=o("bart"),iZr=o(" \u2014 "),gre=a("a"),dZr=o("FlaxBartForQuestionAnswering"),cZr=o(" (BART model)"),mZr=l(),t6=a("li"),y6e=a("strong"),fZr=o("bert"),gZr=o(" \u2014 "),hre=a("a"),hZr=o("FlaxBertForQuestionAnswering"),uZr=o(" (BERT model)"),pZr=l(),a6=a("li"),x6e=a("strong"),_Zr=o("big_bird"),bZr=o(" \u2014 "),ure=a("a"),vZr=o("FlaxBigBirdForQuestionAnswering"),FZr=o(" (BigBird model)"),TZr=l(),n6=a("li"),$6e=a("strong"),MZr=o("distilbert"),EZr=o(" \u2014 "),pre=a("a"),CZr=o("FlaxDistilBertForQuestionAnswering"),wZr=o(" (DistilBERT model)"),AZr=l(),s6=a("li"),k6e=a("strong"),LZr=o("electra"),yZr=o(" \u2014 "),_re=a("a"),xZr=o("FlaxElectraForQuestionAnswering"),$Zr=o(" (ELECTRA model)"),kZr=l(),l6=a("li"),S6e=a("strong"),SZr=o("mbart"),RZr=o(" \u2014 "),bre=a("a"),PZr=o("FlaxMBartForQuestionAnswering"),BZr=o(" (mBART model)"),IZr=l(),i6=a("li"),R6e=a("strong"),NZr=o("roberta"),qZr=o(" \u2014 "),vre=a("a"),jZr=o("FlaxRobertaForQuestionAnswering"),DZr=o(" (RoBERTa model)"),GZr=l(),d6=a("li"),P6e=a("strong"),OZr=o("roformer"),VZr=o(" \u2014 "),Fre=a("a"),XZr=o("FlaxRoFormerForQuestionAnswering"),zZr=o(" (RoFormer model)"),WZr=l(),c6=a("li"),B6e=a("strong"),QZr=o("xlm-roberta"),HZr=o(" \u2014 "),Tre=a("a"),UZr=o("FlaxXLMRobertaForQuestionAnswering"),JZr=o(" (XLM-RoBERTa model)"),YZr=l(),F(m6.$$.fragment),qWe=l(),_m=a("h2"),f6=a("a"),I6e=a("span"),F(Z$.$$.fragment),KZr=l(),N6e=a("span"),ZZr=o("FlaxAutoModelForTokenClassification"),jWe=l(),Er=a("div"),F(ek.$$.fragment),eet=l(),bm=a("p"),oet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mre=a("a"),ret=o("from_pretrained()"),tet=o(" class method or the "),Ere=a("a"),aet=o("from_config()"),net=o(` class
method.`),set=l(),ok=a("p"),iet=o("This class cannot be instantiated directly using "),q6e=a("code"),det=o("__init__()"),cet=o(" (throws an error)."),met=l(),ea=a("div"),F(rk.$$.fragment),fet=l(),j6e=a("p"),get=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),het=l(),vm=a("p"),uet=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),pet=o("not"),_et=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=a("a"),bet=o("from_pretrained()"),vet=o(" to load the model weights."),Fet=l(),F(g6.$$.fragment),Tet=l(),Yr=a("div"),F(tk.$$.fragment),Met=l(),G6e=a("p"),Eet=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cet=l(),yn=a("p"),wet=o("The model class to instantiate is selected based on the "),O6e=a("code"),Aet=o("model_type"),Let=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),yet=o("pretrained_model_name_or_path"),xet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),$et=o("pretrained_model_name_or_path"),ket=o(":"),Set=l(),Xe=a("ul"),h6=a("li"),z6e=a("strong"),Ret=o("albert"),Pet=o(" \u2014 "),wre=a("a"),Bet=o("FlaxAlbertForTokenClassification"),Iet=o(" (ALBERT model)"),Net=l(),u6=a("li"),W6e=a("strong"),qet=o("bert"),jet=o(" \u2014 "),Are=a("a"),Det=o("FlaxBertForTokenClassification"),Get=o(" (BERT model)"),Oet=l(),p6=a("li"),Q6e=a("strong"),Vet=o("big_bird"),Xet=o(" \u2014 "),Lre=a("a"),zet=o("FlaxBigBirdForTokenClassification"),Wet=o(" (BigBird model)"),Qet=l(),_6=a("li"),H6e=a("strong"),Het=o("distilbert"),Uet=o(" \u2014 "),yre=a("a"),Jet=o("FlaxDistilBertForTokenClassification"),Yet=o(" (DistilBERT model)"),Ket=l(),b6=a("li"),U6e=a("strong"),Zet=o("electra"),eot=o(" \u2014 "),xre=a("a"),oot=o("FlaxElectraForTokenClassification"),rot=o(" (ELECTRA model)"),tot=l(),v6=a("li"),J6e=a("strong"),aot=o("roberta"),not=o(" \u2014 "),$re=a("a"),sot=o("FlaxRobertaForTokenClassification"),lot=o(" (RoBERTa model)"),iot=l(),F6=a("li"),Y6e=a("strong"),dot=o("roformer"),cot=o(" \u2014 "),kre=a("a"),mot=o("FlaxRoFormerForTokenClassification"),fot=o(" (RoFormer model)"),got=l(),T6=a("li"),K6e=a("strong"),hot=o("xlm-roberta"),uot=o(" \u2014 "),Sre=a("a"),pot=o("FlaxXLMRobertaForTokenClassification"),_ot=o(" (XLM-RoBERTa model)"),bot=l(),F(M6.$$.fragment),DWe=l(),Fm=a("h2"),E6=a("a"),Z6e=a("span"),F(ak.$$.fragment),vot=l(),e7e=a("span"),Fot=o("FlaxAutoModelForMultipleChoice"),GWe=l(),Cr=a("div"),F(nk.$$.fragment),Tot=l(),Tm=a("p"),Mot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rre=a("a"),Eot=o("from_pretrained()"),Cot=o(" class method or the "),Pre=a("a"),wot=o("from_config()"),Aot=o(` class
method.`),Lot=l(),sk=a("p"),yot=o("This class cannot be instantiated directly using "),o7e=a("code"),xot=o("__init__()"),$ot=o(" (throws an error)."),kot=l(),oa=a("div"),F(lk.$$.fragment),Sot=l(),r7e=a("p"),Rot=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pot=l(),Mm=a("p"),Bot=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),Iot=o("not"),Not=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=a("a"),qot=o("from_pretrained()"),jot=o(" to load the model weights."),Dot=l(),F(C6.$$.fragment),Got=l(),Kr=a("div"),F(ik.$$.fragment),Oot=l(),a7e=a("p"),Vot=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Xot=l(),xn=a("p"),zot=o("The model class to instantiate is selected based on the "),n7e=a("code"),Wot=o("model_type"),Qot=o(` property of the config object (either
passed as an argument or loaded from `),s7e=a("code"),Hot=o("pretrained_model_name_or_path"),Uot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=a("code"),Jot=o("pretrained_model_name_or_path"),Yot=o(":"),Kot=l(),ze=a("ul"),w6=a("li"),i7e=a("strong"),Zot=o("albert"),ert=o(" \u2014 "),Ire=a("a"),ort=o("FlaxAlbertForMultipleChoice"),rrt=o(" (ALBERT model)"),trt=l(),A6=a("li"),d7e=a("strong"),art=o("bert"),nrt=o(" \u2014 "),Nre=a("a"),srt=o("FlaxBertForMultipleChoice"),lrt=o(" (BERT model)"),irt=l(),L6=a("li"),c7e=a("strong"),drt=o("big_bird"),crt=o(" \u2014 "),qre=a("a"),mrt=o("FlaxBigBirdForMultipleChoice"),frt=o(" (BigBird model)"),grt=l(),y6=a("li"),m7e=a("strong"),hrt=o("distilbert"),urt=o(" \u2014 "),jre=a("a"),prt=o("FlaxDistilBertForMultipleChoice"),_rt=o(" (DistilBERT model)"),brt=l(),x6=a("li"),f7e=a("strong"),vrt=o("electra"),Frt=o(" \u2014 "),Dre=a("a"),Trt=o("FlaxElectraForMultipleChoice"),Mrt=o(" (ELECTRA model)"),Ert=l(),$6=a("li"),g7e=a("strong"),Crt=o("roberta"),wrt=o(" \u2014 "),Gre=a("a"),Art=o("FlaxRobertaForMultipleChoice"),Lrt=o(" (RoBERTa model)"),yrt=l(),k6=a("li"),h7e=a("strong"),xrt=o("roformer"),$rt=o(" \u2014 "),Ore=a("a"),krt=o("FlaxRoFormerForMultipleChoice"),Srt=o(" (RoFormer model)"),Rrt=l(),S6=a("li"),u7e=a("strong"),Prt=o("xlm-roberta"),Brt=o(" \u2014 "),Vre=a("a"),Irt=o("FlaxXLMRobertaForMultipleChoice"),Nrt=o(" (XLM-RoBERTa model)"),qrt=l(),F(R6.$$.fragment),OWe=l(),Em=a("h2"),P6=a("a"),p7e=a("span"),F(dk.$$.fragment),jrt=l(),_7e=a("span"),Drt=o("FlaxAutoModelForNextSentencePrediction"),VWe=l(),wr=a("div"),F(ck.$$.fragment),Grt=l(),Cm=a("p"),Ort=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xre=a("a"),Vrt=o("from_pretrained()"),Xrt=o(" class method or the "),zre=a("a"),zrt=o("from_config()"),Wrt=o(` class
method.`),Qrt=l(),mk=a("p"),Hrt=o("This class cannot be instantiated directly using "),b7e=a("code"),Urt=o("__init__()"),Jrt=o(" (throws an error)."),Yrt=l(),ra=a("div"),F(fk.$$.fragment),Krt=l(),v7e=a("p"),Zrt=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ett=l(),wm=a("p"),ott=o(`Note:
Loading a model from its configuration file does `),F7e=a("strong"),rtt=o("not"),ttt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=a("a"),att=o("from_pretrained()"),ntt=o(" to load the model weights."),stt=l(),F(B6.$$.fragment),ltt=l(),Zr=a("div"),F(gk.$$.fragment),itt=l(),T7e=a("p"),dtt=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ctt=l(),$n=a("p"),mtt=o("The model class to instantiate is selected based on the "),M7e=a("code"),ftt=o("model_type"),gtt=o(` property of the config object (either
passed as an argument or loaded from `),E7e=a("code"),htt=o("pretrained_model_name_or_path"),utt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=a("code"),ptt=o("pretrained_model_name_or_path"),_tt=o(":"),btt=l(),w7e=a("ul"),I6=a("li"),A7e=a("strong"),vtt=o("bert"),Ftt=o(" \u2014 "),Qre=a("a"),Ttt=o("FlaxBertForNextSentencePrediction"),Mtt=o(" (BERT model)"),Ett=l(),F(N6.$$.fragment),XWe=l(),Am=a("h2"),q6=a("a"),L7e=a("span"),F(hk.$$.fragment),Ctt=l(),y7e=a("span"),wtt=o("FlaxAutoModelForImageClassification"),zWe=l(),Ar=a("div"),F(uk.$$.fragment),Att=l(),Lm=a("p"),Ltt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hre=a("a"),ytt=o("from_pretrained()"),xtt=o(" class method or the "),Ure=a("a"),$tt=o("from_config()"),ktt=o(` class
method.`),Stt=l(),pk=a("p"),Rtt=o("This class cannot be instantiated directly using "),x7e=a("code"),Ptt=o("__init__()"),Btt=o(" (throws an error)."),Itt=l(),ta=a("div"),F(_k.$$.fragment),Ntt=l(),$7e=a("p"),qtt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jtt=l(),ym=a("p"),Dtt=o(`Note:
Loading a model from its configuration file does `),k7e=a("strong"),Gtt=o("not"),Ott=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=a("a"),Vtt=o("from_pretrained()"),Xtt=o(" to load the model weights."),ztt=l(),F(j6.$$.fragment),Wtt=l(),et=a("div"),F(bk.$$.fragment),Qtt=l(),S7e=a("p"),Htt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Utt=l(),kn=a("p"),Jtt=o("The model class to instantiate is selected based on the "),R7e=a("code"),Ytt=o("model_type"),Ktt=o(` property of the config object (either
passed as an argument or loaded from `),P7e=a("code"),Ztt=o("pretrained_model_name_or_path"),eat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B7e=a("code"),oat=o("pretrained_model_name_or_path"),rat=o(":"),tat=l(),vk=a("ul"),D6=a("li"),I7e=a("strong"),aat=o("beit"),nat=o(" \u2014 "),Yre=a("a"),sat=o("FlaxBeitForImageClassification"),lat=o(" (BEiT model)"),iat=l(),G6=a("li"),N7e=a("strong"),dat=o("vit"),cat=o(" \u2014 "),Kre=a("a"),mat=o("FlaxViTForImageClassification"),fat=o(" (ViT model)"),gat=l(),F(O6.$$.fragment),WWe=l(),xm=a("h2"),V6=a("a"),q7e=a("span"),F(Fk.$$.fragment),hat=l(),j7e=a("span"),uat=o("FlaxAutoModelForVision2Seq"),QWe=l(),Lr=a("div"),F(Tk.$$.fragment),pat=l(),$m=a("p"),_at=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zre=a("a"),bat=o("from_pretrained()"),vat=o(" class method or the "),ete=a("a"),Fat=o("from_config()"),Tat=o(` class
method.`),Mat=l(),Mk=a("p"),Eat=o("This class cannot be instantiated directly using "),D7e=a("code"),Cat=o("__init__()"),wat=o(" (throws an error)."),Aat=l(),aa=a("div"),F(Ek.$$.fragment),Lat=l(),G7e=a("p"),yat=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xat=l(),km=a("p"),$at=o(`Note:
Loading a model from its configuration file does `),O7e=a("strong"),kat=o("not"),Sat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ote=a("a"),Rat=o("from_pretrained()"),Pat=o(" to load the model weights."),Bat=l(),F(X6.$$.fragment),Iat=l(),ot=a("div"),F(Ck.$$.fragment),Nat=l(),V7e=a("p"),qat=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jat=l(),Sn=a("p"),Dat=o("The model class to instantiate is selected based on the "),X7e=a("code"),Gat=o("model_type"),Oat=o(` property of the config object (either
passed as an argument or loaded from `),z7e=a("code"),Vat=o("pretrained_model_name_or_path"),Xat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=a("code"),zat=o("pretrained_model_name_or_path"),Wat=o(":"),Qat=l(),Q7e=a("ul"),z6=a("li"),H7e=a("strong"),Hat=o("vision-encoder-decoder"),Uat=o(" \u2014 "),rte=a("a"),Jat=o("FlaxVisionEncoderDecoderModel"),Yat=o(" (Vision Encoder decoder model)"),Kat=l(),F(W6.$$.fragment),this.h()},l(m){const _=eUt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var wk=s(u);f=n(wk,"A",{id:!0,class:!0,href:!0});var U7e=s(f);p=n(U7e,"SPAN",{});var J7e=s(p);T(c.$$.fragment,J7e),J7e.forEach(t),U7e.forEach(t),h=i(wk),wo=n(wk,"SPAN",{});var Y7e=s(wo);xi=r(Y7e,"Auto Classes"),Y7e.forEach(t),wk.forEach(t),Bm=i(m),lt=n(m,"P",{});var Ak=s(lt);$i=r(Ak,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ki=n(Ak,"CODE",{});var K7e=s(ki);my=r(K7e,"from_pretrained()"),K7e.forEach(t),Im=r(Ak,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ak.forEach(t),Oe=i(m),Qe=n(m,"P",{});var Rn=s(Qe);Si=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var Z7e=s(Pn);fy=r(Z7e,"AutoConfig"),Z7e.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var eLe=s(In);gy=r(eLe,"AutoModel"),eLe.forEach(t),Ri=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var oLe=s(Nn);hy=r(oLe,"AutoTokenizer"),oLe.forEach(t),Pi=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Nm=i(m),T(Sa.$$.fragment,m),He=i(m),Ae=n(m,"P",{});var Lk=s(Ae);HS=r(Lk,"will create a model that is an instance of "),Bi=n(Lk,"A",{href:!0});var rLe=s(Bi);US=r(rLe,"BertModel"),rLe.forEach(t),JS=r(Lk,"."),Lk.forEach(t),Ao=i(m),Ra=n(m,"P",{});var yk=s(Ra);YS=r(yk,"There is one class of "),qm=n(yk,"CODE",{});var tLe=s(qm);KS=r(tLe,"AutoModel"),tLe.forEach(t),aUe=r(yk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),yk.forEach(t),VXe=i(m),Ii=n(m,"H2",{class:!0});var xk=s(Ii);jm=n(xk,"A",{id:!0,class:!0,href:!0});var aLe=s(jm);Yae=n(aLe,"SPAN",{});var nLe=s(Yae);T(uy.$$.fragment,nLe),nLe.forEach(t),aLe.forEach(t),nUe=i(xk),Kae=n(xk,"SPAN",{});var sLe=s(Kae);sUe=r(sLe,"Extending the Auto Classes"),sLe.forEach(t),xk.forEach(t),XXe=i(m),qn=n(m,"P",{});var Sm=s(qn);lUe=r(Sm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Zae=n(Sm,"CODE",{});var lLe=s(Zae);iUe=r(lLe,"NewModel"),lLe.forEach(t),dUe=r(Sm,", make sure you have a "),ene=n(Sm,"CODE",{});var iLe=s(ene);cUe=r(iLe,"NewModelConfig"),iLe.forEach(t),mUe=r(Sm,` then you can add those to the auto
classes like this:`),Sm.forEach(t),zXe=i(m),T(py.$$.fragment,m),WXe=i(m),ZS=n(m,"P",{});var dLe=s(ZS);fUe=r(dLe,"You will then be able to use the auto classes like you would usually do!"),dLe.forEach(t),QXe=i(m),T(Dm.$$.fragment,m),HXe=i(m),Ni=n(m,"H2",{class:!0});var $k=s(Ni);Gm=n($k,"A",{id:!0,class:!0,href:!0});var cLe=s(Gm);one=n(cLe,"SPAN",{});var mLe=s(one);T(_y.$$.fragment,mLe),mLe.forEach(t),cLe.forEach(t),gUe=i($k),rne=n($k,"SPAN",{});var fLe=s(rne);hUe=r(fLe,"AutoConfig"),fLe.forEach(t),$k.forEach(t),UXe=i(m),Lo=n(m,"DIV",{class:!0});var nt=s(Lo);T(by.$$.fragment,nt),uUe=i(nt),vy=n(nt,"P",{});var kk=s(vy);pUe=r(kk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),eR=n(kk,"A",{href:!0});var gLe=s(eR);_Ue=r(gLe,"from_pretrained()"),gLe.forEach(t),bUe=r(kk," class method."),kk.forEach(t),vUe=i(nt),Fy=n(nt,"P",{});var Sk=s(Fy);FUe=r(Sk,"This class cannot be instantiated directly using "),tne=n(Sk,"CODE",{});var hLe=s(tne);TUe=r(hLe,"__init__()"),hLe.forEach(t),MUe=r(Sk," (throws an error)."),Sk.forEach(t),EUe=i(nt),yr=n(nt,"DIV",{class:!0});var st=s(yr);T(Ty.$$.fragment,st),CUe=i(st),ane=n(st,"P",{});var uLe=s(ane);wUe=r(uLe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),uLe.forEach(t),AUe=i(st),qi=n(st,"P",{});var Rm=s(qi);LUe=r(Rm,"The configuration class to instantiate is selected based on the "),nne=n(Rm,"CODE",{});var pLe=s(nne);yUe=r(pLe,"model_type"),pLe.forEach(t),xUe=r(Rm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),sne=n(Rm,"CODE",{});var _Le=s(sne);$Ue=r(_Le,"pretrained_model_name_or_path"),_Le.forEach(t),kUe=r(Rm,":"),Rm.forEach(t),SUe=i(st),A=n(st,"UL",{});var L=s(A);Om=n(L,"LI",{});var Q6=s(Om);lne=n(Q6,"STRONG",{});var bLe=s(lne);RUe=r(bLe,"albert"),bLe.forEach(t),PUe=r(Q6," \u2014 "),oR=n(Q6,"A",{href:!0});var vLe=s(oR);BUe=r(vLe,"AlbertConfig"),vLe.forEach(t),IUe=r(Q6," (ALBERT model)"),Q6.forEach(t),NUe=i(L),Vm=n(L,"LI",{});var H6=s(Vm);ine=n(H6,"STRONG",{});var FLe=s(ine);qUe=r(FLe,"bart"),FLe.forEach(t),jUe=r(H6," \u2014 "),rR=n(H6,"A",{href:!0});var TLe=s(rR);DUe=r(TLe,"BartConfig"),TLe.forEach(t),GUe=r(H6," (BART model)"),H6.forEach(t),OUe=i(L),Xm=n(L,"LI",{});var U6=s(Xm);dne=n(U6,"STRONG",{});var MLe=s(dne);VUe=r(MLe,"beit"),MLe.forEach(t),XUe=r(U6," \u2014 "),tR=n(U6,"A",{href:!0});var ELe=s(tR);zUe=r(ELe,"BeitConfig"),ELe.forEach(t),WUe=r(U6," (BEiT model)"),U6.forEach(t),QUe=i(L),zm=n(L,"LI",{});var J6=s(zm);cne=n(J6,"STRONG",{});var CLe=s(cne);HUe=r(CLe,"bert"),CLe.forEach(t),UUe=r(J6," \u2014 "),aR=n(J6,"A",{href:!0});var wLe=s(aR);JUe=r(wLe,"BertConfig"),wLe.forEach(t),YUe=r(J6," (BERT model)"),J6.forEach(t),KUe=i(L),Wm=n(L,"LI",{});var Y6=s(Wm);mne=n(Y6,"STRONG",{});var ALe=s(mne);ZUe=r(ALe,"bert-generation"),ALe.forEach(t),eJe=r(Y6," \u2014 "),nR=n(Y6,"A",{href:!0});var LLe=s(nR);oJe=r(LLe,"BertGenerationConfig"),LLe.forEach(t),rJe=r(Y6," (Bert Generation model)"),Y6.forEach(t),tJe=i(L),Qm=n(L,"LI",{});var K6=s(Qm);fne=n(K6,"STRONG",{});var yLe=s(fne);aJe=r(yLe,"big_bird"),yLe.forEach(t),nJe=r(K6," \u2014 "),sR=n(K6,"A",{href:!0});var xLe=s(sR);sJe=r(xLe,"BigBirdConfig"),xLe.forEach(t),lJe=r(K6," (BigBird model)"),K6.forEach(t),iJe=i(L),Hm=n(L,"LI",{});var Z6=s(Hm);gne=n(Z6,"STRONG",{});var $Le=s(gne);dJe=r($Le,"bigbird_pegasus"),$Le.forEach(t),cJe=r(Z6," \u2014 "),lR=n(Z6,"A",{href:!0});var kLe=s(lR);mJe=r(kLe,"BigBirdPegasusConfig"),kLe.forEach(t),fJe=r(Z6," (BigBird-Pegasus model)"),Z6.forEach(t),gJe=i(L),Um=n(L,"LI",{});var e7=s(Um);hne=n(e7,"STRONG",{});var SLe=s(hne);hJe=r(SLe,"blenderbot"),SLe.forEach(t),uJe=r(e7," \u2014 "),iR=n(e7,"A",{href:!0});var RLe=s(iR);pJe=r(RLe,"BlenderbotConfig"),RLe.forEach(t),_Je=r(e7," (Blenderbot model)"),e7.forEach(t),bJe=i(L),Jm=n(L,"LI",{});var o7=s(Jm);une=n(o7,"STRONG",{});var PLe=s(une);vJe=r(PLe,"blenderbot-small"),PLe.forEach(t),FJe=r(o7," \u2014 "),dR=n(o7,"A",{href:!0});var BLe=s(dR);TJe=r(BLe,"BlenderbotSmallConfig"),BLe.forEach(t),MJe=r(o7," (BlenderbotSmall model)"),o7.forEach(t),EJe=i(L),Ym=n(L,"LI",{});var r7=s(Ym);pne=n(r7,"STRONG",{});var ILe=s(pne);CJe=r(ILe,"bloom"),ILe.forEach(t),wJe=r(r7," \u2014 "),cR=n(r7,"A",{href:!0});var NLe=s(cR);AJe=r(NLe,"BloomConfig"),NLe.forEach(t),LJe=r(r7," (BLOOM model)"),r7.forEach(t),yJe=i(L),Km=n(L,"LI",{});var t7=s(Km);_ne=n(t7,"STRONG",{});var qLe=s(_ne);xJe=r(qLe,"camembert"),qLe.forEach(t),$Je=r(t7," \u2014 "),mR=n(t7,"A",{href:!0});var jLe=s(mR);kJe=r(jLe,"CamembertConfig"),jLe.forEach(t),SJe=r(t7," (CamemBERT model)"),t7.forEach(t),RJe=i(L),Zm=n(L,"LI",{});var a7=s(Zm);bne=n(a7,"STRONG",{});var DLe=s(bne);PJe=r(DLe,"canine"),DLe.forEach(t),BJe=r(a7," \u2014 "),fR=n(a7,"A",{href:!0});var GLe=s(fR);IJe=r(GLe,"CanineConfig"),GLe.forEach(t),NJe=r(a7," (CANINE model)"),a7.forEach(t),qJe=i(L),ef=n(L,"LI",{});var n7=s(ef);vne=n(n7,"STRONG",{});var OLe=s(vne);jJe=r(OLe,"clip"),OLe.forEach(t),DJe=r(n7," \u2014 "),gR=n(n7,"A",{href:!0});var VLe=s(gR);GJe=r(VLe,"CLIPConfig"),VLe.forEach(t),OJe=r(n7," (CLIP model)"),n7.forEach(t),VJe=i(L),of=n(L,"LI",{});var s7=s(of);Fne=n(s7,"STRONG",{});var XLe=s(Fne);XJe=r(XLe,"codegen"),XLe.forEach(t),zJe=r(s7," \u2014 "),hR=n(s7,"A",{href:!0});var zLe=s(hR);WJe=r(zLe,"CodeGenConfig"),zLe.forEach(t),QJe=r(s7," (CodeGen model)"),s7.forEach(t),HJe=i(L),rf=n(L,"LI",{});var l7=s(rf);Tne=n(l7,"STRONG",{});var WLe=s(Tne);UJe=r(WLe,"convbert"),WLe.forEach(t),JJe=r(l7," \u2014 "),uR=n(l7,"A",{href:!0});var QLe=s(uR);YJe=r(QLe,"ConvBertConfig"),QLe.forEach(t),KJe=r(l7," (ConvBERT model)"),l7.forEach(t),ZJe=i(L),tf=n(L,"LI",{});var i7=s(tf);Mne=n(i7,"STRONG",{});var HLe=s(Mne);eYe=r(HLe,"convnext"),HLe.forEach(t),oYe=r(i7," \u2014 "),pR=n(i7,"A",{href:!0});var ULe=s(pR);rYe=r(ULe,"ConvNextConfig"),ULe.forEach(t),tYe=r(i7," (ConvNeXT model)"),i7.forEach(t),aYe=i(L),af=n(L,"LI",{});var d7=s(af);Ene=n(d7,"STRONG",{});var JLe=s(Ene);nYe=r(JLe,"ctrl"),JLe.forEach(t),sYe=r(d7," \u2014 "),_R=n(d7,"A",{href:!0});var YLe=s(_R);lYe=r(YLe,"CTRLConfig"),YLe.forEach(t),iYe=r(d7," (CTRL model)"),d7.forEach(t),dYe=i(L),nf=n(L,"LI",{});var c7=s(nf);Cne=n(c7,"STRONG",{});var KLe=s(Cne);cYe=r(KLe,"cvt"),KLe.forEach(t),mYe=r(c7," \u2014 "),bR=n(c7,"A",{href:!0});var ZLe=s(bR);fYe=r(ZLe,"CvtConfig"),ZLe.forEach(t),gYe=r(c7," (CvT model)"),c7.forEach(t),hYe=i(L),sf=n(L,"LI",{});var m7=s(sf);wne=n(m7,"STRONG",{});var eye=s(wne);uYe=r(eye,"data2vec-audio"),eye.forEach(t),pYe=r(m7," \u2014 "),vR=n(m7,"A",{href:!0});var oye=s(vR);_Ye=r(oye,"Data2VecAudioConfig"),oye.forEach(t),bYe=r(m7," (Data2VecAudio model)"),m7.forEach(t),vYe=i(L),lf=n(L,"LI",{});var f7=s(lf);Ane=n(f7,"STRONG",{});var rye=s(Ane);FYe=r(rye,"data2vec-text"),rye.forEach(t),TYe=r(f7," \u2014 "),FR=n(f7,"A",{href:!0});var tye=s(FR);MYe=r(tye,"Data2VecTextConfig"),tye.forEach(t),EYe=r(f7," (Data2VecText model)"),f7.forEach(t),CYe=i(L),df=n(L,"LI",{});var g7=s(df);Lne=n(g7,"STRONG",{});var aye=s(Lne);wYe=r(aye,"data2vec-vision"),aye.forEach(t),AYe=r(g7," \u2014 "),TR=n(g7,"A",{href:!0});var nye=s(TR);LYe=r(nye,"Data2VecVisionConfig"),nye.forEach(t),yYe=r(g7," (Data2VecVision model)"),g7.forEach(t),xYe=i(L),cf=n(L,"LI",{});var h7=s(cf);yne=n(h7,"STRONG",{});var sye=s(yne);$Ye=r(sye,"deberta"),sye.forEach(t),kYe=r(h7," \u2014 "),MR=n(h7,"A",{href:!0});var lye=s(MR);SYe=r(lye,"DebertaConfig"),lye.forEach(t),RYe=r(h7," (DeBERTa model)"),h7.forEach(t),PYe=i(L),mf=n(L,"LI",{});var u7=s(mf);xne=n(u7,"STRONG",{});var iye=s(xne);BYe=r(iye,"deberta-v2"),iye.forEach(t),IYe=r(u7," \u2014 "),ER=n(u7,"A",{href:!0});var dye=s(ER);NYe=r(dye,"DebertaV2Config"),dye.forEach(t),qYe=r(u7," (DeBERTa-v2 model)"),u7.forEach(t),jYe=i(L),ff=n(L,"LI",{});var p7=s(ff);$ne=n(p7,"STRONG",{});var ent=s($ne);DYe=r(ent,"decision_transformer"),ent.forEach(t),GYe=r(p7," \u2014 "),CR=n(p7,"A",{href:!0});var ont=s(CR);OYe=r(ont,"DecisionTransformerConfig"),ont.forEach(t),VYe=r(p7," (Decision Transformer model)"),p7.forEach(t),XYe=i(L),gf=n(L,"LI",{});var cye=s(gf);kne=n(cye,"STRONG",{});var rnt=s(kne);zYe=r(rnt,"deit"),rnt.forEach(t),WYe=r(cye," \u2014 "),wR=n(cye,"A",{href:!0});var tnt=s(wR);QYe=r(tnt,"DeiTConfig"),tnt.forEach(t),HYe=r(cye," (DeiT model)"),cye.forEach(t),UYe=i(L),hf=n(L,"LI",{});var mye=s(hf);Sne=n(mye,"STRONG",{});var ant=s(Sne);JYe=r(ant,"detr"),ant.forEach(t),YYe=r(mye," \u2014 "),AR=n(mye,"A",{href:!0});var nnt=s(AR);KYe=r(nnt,"DetrConfig"),nnt.forEach(t),ZYe=r(mye," (DETR model)"),mye.forEach(t),eKe=i(L),uf=n(L,"LI",{});var fye=s(uf);Rne=n(fye,"STRONG",{});var snt=s(Rne);oKe=r(snt,"distilbert"),snt.forEach(t),rKe=r(fye," \u2014 "),LR=n(fye,"A",{href:!0});var lnt=s(LR);tKe=r(lnt,"DistilBertConfig"),lnt.forEach(t),aKe=r(fye," (DistilBERT model)"),fye.forEach(t),nKe=i(L),pf=n(L,"LI",{});var gye=s(pf);Pne=n(gye,"STRONG",{});var int=s(Pne);sKe=r(int,"dpr"),int.forEach(t),lKe=r(gye," \u2014 "),yR=n(gye,"A",{href:!0});var dnt=s(yR);iKe=r(dnt,"DPRConfig"),dnt.forEach(t),dKe=r(gye," (DPR model)"),gye.forEach(t),cKe=i(L),_f=n(L,"LI",{});var hye=s(_f);Bne=n(hye,"STRONG",{});var cnt=s(Bne);mKe=r(cnt,"dpt"),cnt.forEach(t),fKe=r(hye," \u2014 "),xR=n(hye,"A",{href:!0});var mnt=s(xR);gKe=r(mnt,"DPTConfig"),mnt.forEach(t),hKe=r(hye," (DPT model)"),hye.forEach(t),uKe=i(L),bf=n(L,"LI",{});var uye=s(bf);Ine=n(uye,"STRONG",{});var fnt=s(Ine);pKe=r(fnt,"electra"),fnt.forEach(t),_Ke=r(uye," \u2014 "),$R=n(uye,"A",{href:!0});var gnt=s($R);bKe=r(gnt,"ElectraConfig"),gnt.forEach(t),vKe=r(uye," (ELECTRA model)"),uye.forEach(t),FKe=i(L),vf=n(L,"LI",{});var pye=s(vf);Nne=n(pye,"STRONG",{});var hnt=s(Nne);TKe=r(hnt,"encoder-decoder"),hnt.forEach(t),MKe=r(pye," \u2014 "),kR=n(pye,"A",{href:!0});var unt=s(kR);EKe=r(unt,"EncoderDecoderConfig"),unt.forEach(t),CKe=r(pye," (Encoder decoder model)"),pye.forEach(t),wKe=i(L),Ff=n(L,"LI",{});var _ye=s(Ff);qne=n(_ye,"STRONG",{});var pnt=s(qne);AKe=r(pnt,"flaubert"),pnt.forEach(t),LKe=r(_ye," \u2014 "),SR=n(_ye,"A",{href:!0});var _nt=s(SR);yKe=r(_nt,"FlaubertConfig"),_nt.forEach(t),xKe=r(_ye," (FlauBERT model)"),_ye.forEach(t),$Ke=i(L),Tf=n(L,"LI",{});var bye=s(Tf);jne=n(bye,"STRONG",{});var bnt=s(jne);kKe=r(bnt,"flava"),bnt.forEach(t),SKe=r(bye," \u2014 "),RR=n(bye,"A",{href:!0});var vnt=s(RR);RKe=r(vnt,"FlavaConfig"),vnt.forEach(t),PKe=r(bye," (FLAVA model)"),bye.forEach(t),BKe=i(L),Mf=n(L,"LI",{});var vye=s(Mf);Dne=n(vye,"STRONG",{});var Fnt=s(Dne);IKe=r(Fnt,"fnet"),Fnt.forEach(t),NKe=r(vye," \u2014 "),PR=n(vye,"A",{href:!0});var Tnt=s(PR);qKe=r(Tnt,"FNetConfig"),Tnt.forEach(t),jKe=r(vye," (FNet model)"),vye.forEach(t),DKe=i(L),Ef=n(L,"LI",{});var Fye=s(Ef);Gne=n(Fye,"STRONG",{});var Mnt=s(Gne);GKe=r(Mnt,"fsmt"),Mnt.forEach(t),OKe=r(Fye," \u2014 "),BR=n(Fye,"A",{href:!0});var Ent=s(BR);VKe=r(Ent,"FSMTConfig"),Ent.forEach(t),XKe=r(Fye," (FairSeq Machine-Translation model)"),Fye.forEach(t),zKe=i(L),Cf=n(L,"LI",{});var Tye=s(Cf);One=n(Tye,"STRONG",{});var Cnt=s(One);WKe=r(Cnt,"funnel"),Cnt.forEach(t),QKe=r(Tye," \u2014 "),IR=n(Tye,"A",{href:!0});var wnt=s(IR);HKe=r(wnt,"FunnelConfig"),wnt.forEach(t),UKe=r(Tye," (Funnel Transformer model)"),Tye.forEach(t),JKe=i(L),wf=n(L,"LI",{});var Mye=s(wf);Vne=n(Mye,"STRONG",{});var Ant=s(Vne);YKe=r(Ant,"glpn"),Ant.forEach(t),KKe=r(Mye," \u2014 "),NR=n(Mye,"A",{href:!0});var Lnt=s(NR);ZKe=r(Lnt,"GLPNConfig"),Lnt.forEach(t),eZe=r(Mye," (GLPN model)"),Mye.forEach(t),oZe=i(L),Af=n(L,"LI",{});var Eye=s(Af);Xne=n(Eye,"STRONG",{});var ynt=s(Xne);rZe=r(ynt,"gpt2"),ynt.forEach(t),tZe=r(Eye," \u2014 "),qR=n(Eye,"A",{href:!0});var xnt=s(qR);aZe=r(xnt,"GPT2Config"),xnt.forEach(t),nZe=r(Eye," (OpenAI GPT-2 model)"),Eye.forEach(t),sZe=i(L),Lf=n(L,"LI",{});var Cye=s(Lf);zne=n(Cye,"STRONG",{});var $nt=s(zne);lZe=r($nt,"gpt_neo"),$nt.forEach(t),iZe=r(Cye," \u2014 "),jR=n(Cye,"A",{href:!0});var knt=s(jR);dZe=r(knt,"GPTNeoConfig"),knt.forEach(t),cZe=r(Cye," (GPT Neo model)"),Cye.forEach(t),mZe=i(L),yf=n(L,"LI",{});var wye=s(yf);Wne=n(wye,"STRONG",{});var Snt=s(Wne);fZe=r(Snt,"gpt_neox"),Snt.forEach(t),gZe=r(wye," \u2014 "),DR=n(wye,"A",{href:!0});var Rnt=s(DR);hZe=r(Rnt,"GPTNeoXConfig"),Rnt.forEach(t),uZe=r(wye," (GPT NeoX model)"),wye.forEach(t),pZe=i(L),xf=n(L,"LI",{});var Aye=s(xf);Qne=n(Aye,"STRONG",{});var Pnt=s(Qne);_Ze=r(Pnt,"gptj"),Pnt.forEach(t),bZe=r(Aye," \u2014 "),GR=n(Aye,"A",{href:!0});var Bnt=s(GR);vZe=r(Bnt,"GPTJConfig"),Bnt.forEach(t),FZe=r(Aye," (GPT-J model)"),Aye.forEach(t),TZe=i(L),$f=n(L,"LI",{});var Lye=s($f);Hne=n(Lye,"STRONG",{});var Int=s(Hne);MZe=r(Int,"groupvit"),Int.forEach(t),EZe=r(Lye," \u2014 "),OR=n(Lye,"A",{href:!0});var Nnt=s(OR);CZe=r(Nnt,"GroupViTConfig"),Nnt.forEach(t),wZe=r(Lye," (GroupViT model)"),Lye.forEach(t),AZe=i(L),kf=n(L,"LI",{});var yye=s(kf);Une=n(yye,"STRONG",{});var qnt=s(Une);LZe=r(qnt,"hubert"),qnt.forEach(t),yZe=r(yye," \u2014 "),VR=n(yye,"A",{href:!0});var jnt=s(VR);xZe=r(jnt,"HubertConfig"),jnt.forEach(t),$Ze=r(yye," (Hubert model)"),yye.forEach(t),kZe=i(L),Sf=n(L,"LI",{});var xye=s(Sf);Jne=n(xye,"STRONG",{});var Dnt=s(Jne);SZe=r(Dnt,"ibert"),Dnt.forEach(t),RZe=r(xye," \u2014 "),XR=n(xye,"A",{href:!0});var Gnt=s(XR);PZe=r(Gnt,"IBertConfig"),Gnt.forEach(t),BZe=r(xye," (I-BERT model)"),xye.forEach(t),IZe=i(L),Rf=n(L,"LI",{});var $ye=s(Rf);Yne=n($ye,"STRONG",{});var Ont=s(Yne);NZe=r(Ont,"imagegpt"),Ont.forEach(t),qZe=r($ye," \u2014 "),zR=n($ye,"A",{href:!0});var Vnt=s(zR);jZe=r(Vnt,"ImageGPTConfig"),Vnt.forEach(t),DZe=r($ye," (ImageGPT model)"),$ye.forEach(t),GZe=i(L),Pf=n(L,"LI",{});var kye=s(Pf);Kne=n(kye,"STRONG",{});var Xnt=s(Kne);OZe=r(Xnt,"layoutlm"),Xnt.forEach(t),VZe=r(kye," \u2014 "),WR=n(kye,"A",{href:!0});var znt=s(WR);XZe=r(znt,"LayoutLMConfig"),znt.forEach(t),zZe=r(kye," (LayoutLM model)"),kye.forEach(t),WZe=i(L),Bf=n(L,"LI",{});var Sye=s(Bf);Zne=n(Sye,"STRONG",{});var Wnt=s(Zne);QZe=r(Wnt,"layoutlmv2"),Wnt.forEach(t),HZe=r(Sye," \u2014 "),QR=n(Sye,"A",{href:!0});var Qnt=s(QR);UZe=r(Qnt,"LayoutLMv2Config"),Qnt.forEach(t),JZe=r(Sye," (LayoutLMv2 model)"),Sye.forEach(t),YZe=i(L),If=n(L,"LI",{});var Rye=s(If);ese=n(Rye,"STRONG",{});var Hnt=s(ese);KZe=r(Hnt,"layoutlmv3"),Hnt.forEach(t),ZZe=r(Rye," \u2014 "),HR=n(Rye,"A",{href:!0});var Unt=s(HR);eeo=r(Unt,"LayoutLMv3Config"),Unt.forEach(t),oeo=r(Rye," (LayoutLMv3 model)"),Rye.forEach(t),reo=i(L),Nf=n(L,"LI",{});var Pye=s(Nf);ose=n(Pye,"STRONG",{});var Jnt=s(ose);teo=r(Jnt,"led"),Jnt.forEach(t),aeo=r(Pye," \u2014 "),UR=n(Pye,"A",{href:!0});var Ynt=s(UR);neo=r(Ynt,"LEDConfig"),Ynt.forEach(t),seo=r(Pye," (LED model)"),Pye.forEach(t),leo=i(L),qf=n(L,"LI",{});var Bye=s(qf);rse=n(Bye,"STRONG",{});var Knt=s(rse);ieo=r(Knt,"levit"),Knt.forEach(t),deo=r(Bye," \u2014 "),JR=n(Bye,"A",{href:!0});var Znt=s(JR);ceo=r(Znt,"LevitConfig"),Znt.forEach(t),meo=r(Bye," (LeViT model)"),Bye.forEach(t),feo=i(L),jf=n(L,"LI",{});var Iye=s(jf);tse=n(Iye,"STRONG",{});var est=s(tse);geo=r(est,"longformer"),est.forEach(t),heo=r(Iye," \u2014 "),YR=n(Iye,"A",{href:!0});var ost=s(YR);ueo=r(ost,"LongformerConfig"),ost.forEach(t),peo=r(Iye," (Longformer model)"),Iye.forEach(t),_eo=i(L),Df=n(L,"LI",{});var Nye=s(Df);ase=n(Nye,"STRONG",{});var rst=s(ase);beo=r(rst,"longt5"),rst.forEach(t),veo=r(Nye," \u2014 "),KR=n(Nye,"A",{href:!0});var tst=s(KR);Feo=r(tst,"LongT5Config"),tst.forEach(t),Teo=r(Nye," (LongT5 model)"),Nye.forEach(t),Meo=i(L),Gf=n(L,"LI",{});var qye=s(Gf);nse=n(qye,"STRONG",{});var ast=s(nse);Eeo=r(ast,"luke"),ast.forEach(t),Ceo=r(qye," \u2014 "),ZR=n(qye,"A",{href:!0});var nst=s(ZR);weo=r(nst,"LukeConfig"),nst.forEach(t),Aeo=r(qye," (LUKE model)"),qye.forEach(t),Leo=i(L),Of=n(L,"LI",{});var jye=s(Of);sse=n(jye,"STRONG",{});var sst=s(sse);yeo=r(sst,"lxmert"),sst.forEach(t),xeo=r(jye," \u2014 "),eP=n(jye,"A",{href:!0});var lst=s(eP);$eo=r(lst,"LxmertConfig"),lst.forEach(t),keo=r(jye," (LXMERT model)"),jye.forEach(t),Seo=i(L),Vf=n(L,"LI",{});var Dye=s(Vf);lse=n(Dye,"STRONG",{});var ist=s(lse);Reo=r(ist,"m2m_100"),ist.forEach(t),Peo=r(Dye," \u2014 "),oP=n(Dye,"A",{href:!0});var dst=s(oP);Beo=r(dst,"M2M100Config"),dst.forEach(t),Ieo=r(Dye," (M2M100 model)"),Dye.forEach(t),Neo=i(L),Xf=n(L,"LI",{});var Gye=s(Xf);ise=n(Gye,"STRONG",{});var cst=s(ise);qeo=r(cst,"marian"),cst.forEach(t),jeo=r(Gye," \u2014 "),rP=n(Gye,"A",{href:!0});var mst=s(rP);Deo=r(mst,"MarianConfig"),mst.forEach(t),Geo=r(Gye," (Marian model)"),Gye.forEach(t),Oeo=i(L),zf=n(L,"LI",{});var Oye=s(zf);dse=n(Oye,"STRONG",{});var fst=s(dse);Veo=r(fst,"maskformer"),fst.forEach(t),Xeo=r(Oye," \u2014 "),tP=n(Oye,"A",{href:!0});var gst=s(tP);zeo=r(gst,"MaskFormerConfig"),gst.forEach(t),Weo=r(Oye," (MaskFormer model)"),Oye.forEach(t),Qeo=i(L),Wf=n(L,"LI",{});var Vye=s(Wf);cse=n(Vye,"STRONG",{});var hst=s(cse);Heo=r(hst,"mbart"),hst.forEach(t),Ueo=r(Vye," \u2014 "),aP=n(Vye,"A",{href:!0});var ust=s(aP);Jeo=r(ust,"MBartConfig"),ust.forEach(t),Yeo=r(Vye," (mBART model)"),Vye.forEach(t),Keo=i(L),Qf=n(L,"LI",{});var Xye=s(Qf);mse=n(Xye,"STRONG",{});var pst=s(mse);Zeo=r(pst,"mctct"),pst.forEach(t),eoo=r(Xye," \u2014 "),nP=n(Xye,"A",{href:!0});var _st=s(nP);ooo=r(_st,"MCTCTConfig"),_st.forEach(t),roo=r(Xye," (M-CTC-T model)"),Xye.forEach(t),too=i(L),Hf=n(L,"LI",{});var zye=s(Hf);fse=n(zye,"STRONG",{});var bst=s(fse);aoo=r(bst,"megatron-bert"),bst.forEach(t),noo=r(zye," \u2014 "),sP=n(zye,"A",{href:!0});var vst=s(sP);soo=r(vst,"MegatronBertConfig"),vst.forEach(t),loo=r(zye," (Megatron-BERT model)"),zye.forEach(t),ioo=i(L),Uf=n(L,"LI",{});var Wye=s(Uf);gse=n(Wye,"STRONG",{});var Fst=s(gse);doo=r(Fst,"mobilebert"),Fst.forEach(t),coo=r(Wye," \u2014 "),lP=n(Wye,"A",{href:!0});var Tst=s(lP);moo=r(Tst,"MobileBertConfig"),Tst.forEach(t),foo=r(Wye," (MobileBERT model)"),Wye.forEach(t),goo=i(L),Jf=n(L,"LI",{});var Qye=s(Jf);hse=n(Qye,"STRONG",{});var Mst=s(hse);hoo=r(Mst,"mobilevit"),Mst.forEach(t),uoo=r(Qye," \u2014 "),iP=n(Qye,"A",{href:!0});var Est=s(iP);poo=r(Est,"MobileViTConfig"),Est.forEach(t),_oo=r(Qye," (MobileViT model)"),Qye.forEach(t),boo=i(L),Yf=n(L,"LI",{});var Hye=s(Yf);use=n(Hye,"STRONG",{});var Cst=s(use);voo=r(Cst,"mpnet"),Cst.forEach(t),Foo=r(Hye," \u2014 "),dP=n(Hye,"A",{href:!0});var wst=s(dP);Too=r(wst,"MPNetConfig"),wst.forEach(t),Moo=r(Hye," (MPNet model)"),Hye.forEach(t),Eoo=i(L),Kf=n(L,"LI",{});var Uye=s(Kf);pse=n(Uye,"STRONG",{});var Ast=s(pse);Coo=r(Ast,"mt5"),Ast.forEach(t),woo=r(Uye," \u2014 "),cP=n(Uye,"A",{href:!0});var Lst=s(cP);Aoo=r(Lst,"MT5Config"),Lst.forEach(t),Loo=r(Uye," (MT5 model)"),Uye.forEach(t),yoo=i(L),Zf=n(L,"LI",{});var Jye=s(Zf);_se=n(Jye,"STRONG",{});var yst=s(_se);xoo=r(yst,"mvp"),yst.forEach(t),$oo=r(Jye," \u2014 "),mP=n(Jye,"A",{href:!0});var xst=s(mP);koo=r(xst,"MvpConfig"),xst.forEach(t),Soo=r(Jye," (MVP model)"),Jye.forEach(t),Roo=i(L),eg=n(L,"LI",{});var Yye=s(eg);bse=n(Yye,"STRONG",{});var $st=s(bse);Poo=r($st,"nezha"),$st.forEach(t),Boo=r(Yye," \u2014 "),fP=n(Yye,"A",{href:!0});var kst=s(fP);Ioo=r(kst,"NezhaConfig"),kst.forEach(t),Noo=r(Yye," (Nezha model)"),Yye.forEach(t),qoo=i(L),og=n(L,"LI",{});var Kye=s(og);vse=n(Kye,"STRONG",{});var Sst=s(vse);joo=r(Sst,"nystromformer"),Sst.forEach(t),Doo=r(Kye," \u2014 "),gP=n(Kye,"A",{href:!0});var Rst=s(gP);Goo=r(Rst,"NystromformerConfig"),Rst.forEach(t),Ooo=r(Kye," (Nystr\xF6mformer model)"),Kye.forEach(t),Voo=i(L),rg=n(L,"LI",{});var Zye=s(rg);Fse=n(Zye,"STRONG",{});var Pst=s(Fse);Xoo=r(Pst,"openai-gpt"),Pst.forEach(t),zoo=r(Zye," \u2014 "),hP=n(Zye,"A",{href:!0});var Bst=s(hP);Woo=r(Bst,"OpenAIGPTConfig"),Bst.forEach(t),Qoo=r(Zye," (OpenAI GPT model)"),Zye.forEach(t),Hoo=i(L),tg=n(L,"LI",{});var e8e=s(tg);Tse=n(e8e,"STRONG",{});var Ist=s(Tse);Uoo=r(Ist,"opt"),Ist.forEach(t),Joo=r(e8e," \u2014 "),uP=n(e8e,"A",{href:!0});var Nst=s(uP);Yoo=r(Nst,"OPTConfig"),Nst.forEach(t),Koo=r(e8e," (OPT model)"),e8e.forEach(t),Zoo=i(L),ag=n(L,"LI",{});var o8e=s(ag);Mse=n(o8e,"STRONG",{});var qst=s(Mse);ero=r(qst,"owlvit"),qst.forEach(t),oro=r(o8e," \u2014 "),pP=n(o8e,"A",{href:!0});var jst=s(pP);rro=r(jst,"OwlViTConfig"),jst.forEach(t),tro=r(o8e," (OWL-ViT model)"),o8e.forEach(t),aro=i(L),ng=n(L,"LI",{});var r8e=s(ng);Ese=n(r8e,"STRONG",{});var Dst=s(Ese);nro=r(Dst,"pegasus"),Dst.forEach(t),sro=r(r8e," \u2014 "),_P=n(r8e,"A",{href:!0});var Gst=s(_P);lro=r(Gst,"PegasusConfig"),Gst.forEach(t),iro=r(r8e," (Pegasus model)"),r8e.forEach(t),dro=i(L),sg=n(L,"LI",{});var t8e=s(sg);Cse=n(t8e,"STRONG",{});var Ost=s(Cse);cro=r(Ost,"perceiver"),Ost.forEach(t),mro=r(t8e," \u2014 "),bP=n(t8e,"A",{href:!0});var Vst=s(bP);fro=r(Vst,"PerceiverConfig"),Vst.forEach(t),gro=r(t8e," (Perceiver model)"),t8e.forEach(t),hro=i(L),lg=n(L,"LI",{});var a8e=s(lg);wse=n(a8e,"STRONG",{});var Xst=s(wse);uro=r(Xst,"plbart"),Xst.forEach(t),pro=r(a8e," \u2014 "),vP=n(a8e,"A",{href:!0});var zst=s(vP);_ro=r(zst,"PLBartConfig"),zst.forEach(t),bro=r(a8e," (PLBart model)"),a8e.forEach(t),vro=i(L),ig=n(L,"LI",{});var n8e=s(ig);Ase=n(n8e,"STRONG",{});var Wst=s(Ase);Fro=r(Wst,"poolformer"),Wst.forEach(t),Tro=r(n8e," \u2014 "),FP=n(n8e,"A",{href:!0});var Qst=s(FP);Mro=r(Qst,"PoolFormerConfig"),Qst.forEach(t),Ero=r(n8e," (PoolFormer model)"),n8e.forEach(t),Cro=i(L),dg=n(L,"LI",{});var s8e=s(dg);Lse=n(s8e,"STRONG",{});var Hst=s(Lse);wro=r(Hst,"prophetnet"),Hst.forEach(t),Aro=r(s8e," \u2014 "),TP=n(s8e,"A",{href:!0});var Ust=s(TP);Lro=r(Ust,"ProphetNetConfig"),Ust.forEach(t),yro=r(s8e," (ProphetNet model)"),s8e.forEach(t),xro=i(L),cg=n(L,"LI",{});var l8e=s(cg);yse=n(l8e,"STRONG",{});var Jst=s(yse);$ro=r(Jst,"qdqbert"),Jst.forEach(t),kro=r(l8e," \u2014 "),MP=n(l8e,"A",{href:!0});var Yst=s(MP);Sro=r(Yst,"QDQBertConfig"),Yst.forEach(t),Rro=r(l8e," (QDQBert model)"),l8e.forEach(t),Pro=i(L),mg=n(L,"LI",{});var i8e=s(mg);xse=n(i8e,"STRONG",{});var Kst=s(xse);Bro=r(Kst,"rag"),Kst.forEach(t),Iro=r(i8e," \u2014 "),EP=n(i8e,"A",{href:!0});var Zst=s(EP);Nro=r(Zst,"RagConfig"),Zst.forEach(t),qro=r(i8e," (RAG model)"),i8e.forEach(t),jro=i(L),fg=n(L,"LI",{});var d8e=s(fg);$se=n(d8e,"STRONG",{});var elt=s($se);Dro=r(elt,"realm"),elt.forEach(t),Gro=r(d8e," \u2014 "),CP=n(d8e,"A",{href:!0});var olt=s(CP);Oro=r(olt,"RealmConfig"),olt.forEach(t),Vro=r(d8e," (REALM model)"),d8e.forEach(t),Xro=i(L),gg=n(L,"LI",{});var c8e=s(gg);kse=n(c8e,"STRONG",{});var rlt=s(kse);zro=r(rlt,"reformer"),rlt.forEach(t),Wro=r(c8e," \u2014 "),wP=n(c8e,"A",{href:!0});var tlt=s(wP);Qro=r(tlt,"ReformerConfig"),tlt.forEach(t),Hro=r(c8e," (Reformer model)"),c8e.forEach(t),Uro=i(L),hg=n(L,"LI",{});var m8e=s(hg);Sse=n(m8e,"STRONG",{});var alt=s(Sse);Jro=r(alt,"regnet"),alt.forEach(t),Yro=r(m8e," \u2014 "),AP=n(m8e,"A",{href:!0});var nlt=s(AP);Kro=r(nlt,"RegNetConfig"),nlt.forEach(t),Zro=r(m8e," (RegNet model)"),m8e.forEach(t),eto=i(L),ug=n(L,"LI",{});var f8e=s(ug);Rse=n(f8e,"STRONG",{});var slt=s(Rse);oto=r(slt,"rembert"),slt.forEach(t),rto=r(f8e," \u2014 "),LP=n(f8e,"A",{href:!0});var llt=s(LP);tto=r(llt,"RemBertConfig"),llt.forEach(t),ato=r(f8e," (RemBERT model)"),f8e.forEach(t),nto=i(L),pg=n(L,"LI",{});var g8e=s(pg);Pse=n(g8e,"STRONG",{});var ilt=s(Pse);sto=r(ilt,"resnet"),ilt.forEach(t),lto=r(g8e," \u2014 "),yP=n(g8e,"A",{href:!0});var dlt=s(yP);ito=r(dlt,"ResNetConfig"),dlt.forEach(t),dto=r(g8e," (ResNet model)"),g8e.forEach(t),cto=i(L),_g=n(L,"LI",{});var h8e=s(_g);Bse=n(h8e,"STRONG",{});var clt=s(Bse);mto=r(clt,"retribert"),clt.forEach(t),fto=r(h8e," \u2014 "),xP=n(h8e,"A",{href:!0});var mlt=s(xP);gto=r(mlt,"RetriBertConfig"),mlt.forEach(t),hto=r(h8e," (RetriBERT model)"),h8e.forEach(t),uto=i(L),bg=n(L,"LI",{});var u8e=s(bg);Ise=n(u8e,"STRONG",{});var flt=s(Ise);pto=r(flt,"roberta"),flt.forEach(t),_to=r(u8e," \u2014 "),$P=n(u8e,"A",{href:!0});var glt=s($P);bto=r(glt,"RobertaConfig"),glt.forEach(t),vto=r(u8e," (RoBERTa model)"),u8e.forEach(t),Fto=i(L),vg=n(L,"LI",{});var p8e=s(vg);Nse=n(p8e,"STRONG",{});var hlt=s(Nse);Tto=r(hlt,"roformer"),hlt.forEach(t),Mto=r(p8e," \u2014 "),kP=n(p8e,"A",{href:!0});var ult=s(kP);Eto=r(ult,"RoFormerConfig"),ult.forEach(t),Cto=r(p8e," (RoFormer model)"),p8e.forEach(t),wto=i(L),Fg=n(L,"LI",{});var _8e=s(Fg);qse=n(_8e,"STRONG",{});var plt=s(qse);Ato=r(plt,"segformer"),plt.forEach(t),Lto=r(_8e," \u2014 "),SP=n(_8e,"A",{href:!0});var _lt=s(SP);yto=r(_lt,"SegformerConfig"),_lt.forEach(t),xto=r(_8e," (SegFormer model)"),_8e.forEach(t),$to=i(L),Tg=n(L,"LI",{});var b8e=s(Tg);jse=n(b8e,"STRONG",{});var blt=s(jse);kto=r(blt,"sew"),blt.forEach(t),Sto=r(b8e," \u2014 "),RP=n(b8e,"A",{href:!0});var vlt=s(RP);Rto=r(vlt,"SEWConfig"),vlt.forEach(t),Pto=r(b8e," (SEW model)"),b8e.forEach(t),Bto=i(L),Mg=n(L,"LI",{});var v8e=s(Mg);Dse=n(v8e,"STRONG",{});var Flt=s(Dse);Ito=r(Flt,"sew-d"),Flt.forEach(t),Nto=r(v8e," \u2014 "),PP=n(v8e,"A",{href:!0});var Tlt=s(PP);qto=r(Tlt,"SEWDConfig"),Tlt.forEach(t),jto=r(v8e," (SEW-D model)"),v8e.forEach(t),Dto=i(L),Eg=n(L,"LI",{});var F8e=s(Eg);Gse=n(F8e,"STRONG",{});var Mlt=s(Gse);Gto=r(Mlt,"speech-encoder-decoder"),Mlt.forEach(t),Oto=r(F8e," \u2014 "),BP=n(F8e,"A",{href:!0});var Elt=s(BP);Vto=r(Elt,"SpeechEncoderDecoderConfig"),Elt.forEach(t),Xto=r(F8e," (Speech Encoder decoder model)"),F8e.forEach(t),zto=i(L),Cg=n(L,"LI",{});var T8e=s(Cg);Ose=n(T8e,"STRONG",{});var Clt=s(Ose);Wto=r(Clt,"speech_to_text"),Clt.forEach(t),Qto=r(T8e," \u2014 "),IP=n(T8e,"A",{href:!0});var wlt=s(IP);Hto=r(wlt,"Speech2TextConfig"),wlt.forEach(t),Uto=r(T8e," (Speech2Text model)"),T8e.forEach(t),Jto=i(L),wg=n(L,"LI",{});var M8e=s(wg);Vse=n(M8e,"STRONG",{});var Alt=s(Vse);Yto=r(Alt,"speech_to_text_2"),Alt.forEach(t),Kto=r(M8e," \u2014 "),NP=n(M8e,"A",{href:!0});var Llt=s(NP);Zto=r(Llt,"Speech2Text2Config"),Llt.forEach(t),eao=r(M8e," (Speech2Text2 model)"),M8e.forEach(t),oao=i(L),Ag=n(L,"LI",{});var E8e=s(Ag);Xse=n(E8e,"STRONG",{});var ylt=s(Xse);rao=r(ylt,"splinter"),ylt.forEach(t),tao=r(E8e," \u2014 "),qP=n(E8e,"A",{href:!0});var xlt=s(qP);aao=r(xlt,"SplinterConfig"),xlt.forEach(t),nao=r(E8e," (Splinter model)"),E8e.forEach(t),sao=i(L),Lg=n(L,"LI",{});var C8e=s(Lg);zse=n(C8e,"STRONG",{});var $lt=s(zse);lao=r($lt,"squeezebert"),$lt.forEach(t),iao=r(C8e," \u2014 "),jP=n(C8e,"A",{href:!0});var klt=s(jP);dao=r(klt,"SqueezeBertConfig"),klt.forEach(t),cao=r(C8e," (SqueezeBERT model)"),C8e.forEach(t),mao=i(L),yg=n(L,"LI",{});var w8e=s(yg);Wse=n(w8e,"STRONG",{});var Slt=s(Wse);fao=r(Slt,"swin"),Slt.forEach(t),gao=r(w8e," \u2014 "),DP=n(w8e,"A",{href:!0});var Rlt=s(DP);hao=r(Rlt,"SwinConfig"),Rlt.forEach(t),uao=r(w8e," (Swin Transformer model)"),w8e.forEach(t),pao=i(L),xg=n(L,"LI",{});var A8e=s(xg);Qse=n(A8e,"STRONG",{});var Plt=s(Qse);_ao=r(Plt,"t5"),Plt.forEach(t),bao=r(A8e," \u2014 "),GP=n(A8e,"A",{href:!0});var Blt=s(GP);vao=r(Blt,"T5Config"),Blt.forEach(t),Fao=r(A8e," (T5 model)"),A8e.forEach(t),Tao=i(L),$g=n(L,"LI",{});var L8e=s($g);Hse=n(L8e,"STRONG",{});var Ilt=s(Hse);Mao=r(Ilt,"tapas"),Ilt.forEach(t),Eao=r(L8e," \u2014 "),OP=n(L8e,"A",{href:!0});var Nlt=s(OP);Cao=r(Nlt,"TapasConfig"),Nlt.forEach(t),wao=r(L8e," (TAPAS model)"),L8e.forEach(t),Aao=i(L),kg=n(L,"LI",{});var y8e=s(kg);Use=n(y8e,"STRONG",{});var qlt=s(Use);Lao=r(qlt,"trajectory_transformer"),qlt.forEach(t),yao=r(y8e," \u2014 "),VP=n(y8e,"A",{href:!0});var jlt=s(VP);xao=r(jlt,"TrajectoryTransformerConfig"),jlt.forEach(t),$ao=r(y8e," (Trajectory Transformer model)"),y8e.forEach(t),kao=i(L),Sg=n(L,"LI",{});var x8e=s(Sg);Jse=n(x8e,"STRONG",{});var Dlt=s(Jse);Sao=r(Dlt,"transfo-xl"),Dlt.forEach(t),Rao=r(x8e," \u2014 "),XP=n(x8e,"A",{href:!0});var Glt=s(XP);Pao=r(Glt,"TransfoXLConfig"),Glt.forEach(t),Bao=r(x8e," (Transformer-XL model)"),x8e.forEach(t),Iao=i(L),Rg=n(L,"LI",{});var $8e=s(Rg);Yse=n($8e,"STRONG",{});var Olt=s(Yse);Nao=r(Olt,"trocr"),Olt.forEach(t),qao=r($8e," \u2014 "),zP=n($8e,"A",{href:!0});var Vlt=s(zP);jao=r(Vlt,"TrOCRConfig"),Vlt.forEach(t),Dao=r($8e," (TrOCR model)"),$8e.forEach(t),Gao=i(L),Pg=n(L,"LI",{});var k8e=s(Pg);Kse=n(k8e,"STRONG",{});var Xlt=s(Kse);Oao=r(Xlt,"unispeech"),Xlt.forEach(t),Vao=r(k8e," \u2014 "),WP=n(k8e,"A",{href:!0});var zlt=s(WP);Xao=r(zlt,"UniSpeechConfig"),zlt.forEach(t),zao=r(k8e," (UniSpeech model)"),k8e.forEach(t),Wao=i(L),Bg=n(L,"LI",{});var S8e=s(Bg);Zse=n(S8e,"STRONG",{});var Wlt=s(Zse);Qao=r(Wlt,"unispeech-sat"),Wlt.forEach(t),Hao=r(S8e," \u2014 "),QP=n(S8e,"A",{href:!0});var Qlt=s(QP);Uao=r(Qlt,"UniSpeechSatConfig"),Qlt.forEach(t),Jao=r(S8e," (UniSpeechSat model)"),S8e.forEach(t),Yao=i(L),Ig=n(L,"LI",{});var R8e=s(Ig);ele=n(R8e,"STRONG",{});var Hlt=s(ele);Kao=r(Hlt,"van"),Hlt.forEach(t),Zao=r(R8e," \u2014 "),HP=n(R8e,"A",{href:!0});var Ult=s(HP);eno=r(Ult,"VanConfig"),Ult.forEach(t),ono=r(R8e," (VAN model)"),R8e.forEach(t),rno=i(L),Ng=n(L,"LI",{});var P8e=s(Ng);ole=n(P8e,"STRONG",{});var Jlt=s(ole);tno=r(Jlt,"vilt"),Jlt.forEach(t),ano=r(P8e," \u2014 "),UP=n(P8e,"A",{href:!0});var Ylt=s(UP);nno=r(Ylt,"ViltConfig"),Ylt.forEach(t),sno=r(P8e," (ViLT model)"),P8e.forEach(t),lno=i(L),qg=n(L,"LI",{});var B8e=s(qg);rle=n(B8e,"STRONG",{});var Klt=s(rle);ino=r(Klt,"vision-encoder-decoder"),Klt.forEach(t),dno=r(B8e," \u2014 "),JP=n(B8e,"A",{href:!0});var Zlt=s(JP);cno=r(Zlt,"VisionEncoderDecoderConfig"),Zlt.forEach(t),mno=r(B8e," (Vision Encoder decoder model)"),B8e.forEach(t),fno=i(L),jg=n(L,"LI",{});var I8e=s(jg);tle=n(I8e,"STRONG",{});var eit=s(tle);gno=r(eit,"vision-text-dual-encoder"),eit.forEach(t),hno=r(I8e," \u2014 "),YP=n(I8e,"A",{href:!0});var oit=s(YP);uno=r(oit,"VisionTextDualEncoderConfig"),oit.forEach(t),pno=r(I8e," (VisionTextDualEncoder model)"),I8e.forEach(t),_no=i(L),Dg=n(L,"LI",{});var N8e=s(Dg);ale=n(N8e,"STRONG",{});var rit=s(ale);bno=r(rit,"visual_bert"),rit.forEach(t),vno=r(N8e," \u2014 "),KP=n(N8e,"A",{href:!0});var tit=s(KP);Fno=r(tit,"VisualBertConfig"),tit.forEach(t),Tno=r(N8e," (VisualBERT model)"),N8e.forEach(t),Mno=i(L),Gg=n(L,"LI",{});var q8e=s(Gg);nle=n(q8e,"STRONG",{});var ait=s(nle);Eno=r(ait,"vit"),ait.forEach(t),Cno=r(q8e," \u2014 "),ZP=n(q8e,"A",{href:!0});var nit=s(ZP);wno=r(nit,"ViTConfig"),nit.forEach(t),Ano=r(q8e," (ViT model)"),q8e.forEach(t),Lno=i(L),Og=n(L,"LI",{});var j8e=s(Og);sle=n(j8e,"STRONG",{});var sit=s(sle);yno=r(sit,"vit_mae"),sit.forEach(t),xno=r(j8e," \u2014 "),eB=n(j8e,"A",{href:!0});var lit=s(eB);$no=r(lit,"ViTMAEConfig"),lit.forEach(t),kno=r(j8e," (ViTMAE model)"),j8e.forEach(t),Sno=i(L),Vg=n(L,"LI",{});var D8e=s(Vg);lle=n(D8e,"STRONG",{});var iit=s(lle);Rno=r(iit,"wav2vec2"),iit.forEach(t),Pno=r(D8e," \u2014 "),oB=n(D8e,"A",{href:!0});var dit=s(oB);Bno=r(dit,"Wav2Vec2Config"),dit.forEach(t),Ino=r(D8e," (Wav2Vec2 model)"),D8e.forEach(t),Nno=i(L),Xg=n(L,"LI",{});var G8e=s(Xg);ile=n(G8e,"STRONG",{});var cit=s(ile);qno=r(cit,"wav2vec2-conformer"),cit.forEach(t),jno=r(G8e," \u2014 "),rB=n(G8e,"A",{href:!0});var mit=s(rB);Dno=r(mit,"Wav2Vec2ConformerConfig"),mit.forEach(t),Gno=r(G8e," (Wav2Vec2-Conformer model)"),G8e.forEach(t),Ono=i(L),zg=n(L,"LI",{});var O8e=s(zg);dle=n(O8e,"STRONG",{});var fit=s(dle);Vno=r(fit,"wavlm"),fit.forEach(t),Xno=r(O8e," \u2014 "),tB=n(O8e,"A",{href:!0});var git=s(tB);zno=r(git,"WavLMConfig"),git.forEach(t),Wno=r(O8e," (WavLM model)"),O8e.forEach(t),Qno=i(L),Wg=n(L,"LI",{});var V8e=s(Wg);cle=n(V8e,"STRONG",{});var hit=s(cle);Hno=r(hit,"xglm"),hit.forEach(t),Uno=r(V8e," \u2014 "),aB=n(V8e,"A",{href:!0});var uit=s(aB);Jno=r(uit,"XGLMConfig"),uit.forEach(t),Yno=r(V8e," (XGLM model)"),V8e.forEach(t),Kno=i(L),Qg=n(L,"LI",{});var X8e=s(Qg);mle=n(X8e,"STRONG",{});var pit=s(mle);Zno=r(pit,"xlm"),pit.forEach(t),eso=r(X8e," \u2014 "),nB=n(X8e,"A",{href:!0});var _it=s(nB);oso=r(_it,"XLMConfig"),_it.forEach(t),rso=r(X8e," (XLM model)"),X8e.forEach(t),tso=i(L),Hg=n(L,"LI",{});var z8e=s(Hg);fle=n(z8e,"STRONG",{});var bit=s(fle);aso=r(bit,"xlm-prophetnet"),bit.forEach(t),nso=r(z8e," \u2014 "),sB=n(z8e,"A",{href:!0});var vit=s(sB);sso=r(vit,"XLMProphetNetConfig"),vit.forEach(t),lso=r(z8e," (XLM-ProphetNet model)"),z8e.forEach(t),iso=i(L),Ug=n(L,"LI",{});var W8e=s(Ug);gle=n(W8e,"STRONG",{});var Fit=s(gle);dso=r(Fit,"xlm-roberta"),Fit.forEach(t),cso=r(W8e," \u2014 "),lB=n(W8e,"A",{href:!0});var Tit=s(lB);mso=r(Tit,"XLMRobertaConfig"),Tit.forEach(t),fso=r(W8e," (XLM-RoBERTa model)"),W8e.forEach(t),gso=i(L),Jg=n(L,"LI",{});var Q8e=s(Jg);hle=n(Q8e,"STRONG",{});var Mit=s(hle);hso=r(Mit,"xlm-roberta-xl"),Mit.forEach(t),uso=r(Q8e," \u2014 "),iB=n(Q8e,"A",{href:!0});var Eit=s(iB);pso=r(Eit,"XLMRobertaXLConfig"),Eit.forEach(t),_so=r(Q8e," (XLM-RoBERTa-XL model)"),Q8e.forEach(t),bso=i(L),Yg=n(L,"LI",{});var H8e=s(Yg);ule=n(H8e,"STRONG",{});var Cit=s(ule);vso=r(Cit,"xlnet"),Cit.forEach(t),Fso=r(H8e," \u2014 "),dB=n(H8e,"A",{href:!0});var wit=s(dB);Tso=r(wit,"XLNetConfig"),wit.forEach(t),Mso=r(H8e," (XLNet model)"),H8e.forEach(t),Eso=i(L),Kg=n(L,"LI",{});var U8e=s(Kg);ple=n(U8e,"STRONG",{});var Ait=s(ple);Cso=r(Ait,"yolos"),Ait.forEach(t),wso=r(U8e," \u2014 "),cB=n(U8e,"A",{href:!0});var Lit=s(cB);Aso=r(Lit,"YolosConfig"),Lit.forEach(t),Lso=r(U8e," (YOLOS model)"),U8e.forEach(t),yso=i(L),Zg=n(L,"LI",{});var J8e=s(Zg);_le=n(J8e,"STRONG",{});var yit=s(_le);xso=r(yit,"yoso"),yit.forEach(t),$so=r(J8e," \u2014 "),mB=n(J8e,"A",{href:!0});var xit=s(mB);kso=r(xit,"YosoConfig"),xit.forEach(t),Sso=r(J8e," (YOSO model)"),J8e.forEach(t),L.forEach(t),Rso=i(st),T(eh.$$.fragment,st),st.forEach(t),Pso=i(nt),oh=n(nt,"DIV",{class:!0});var UWe=s(oh);T(My.$$.fragment,UWe),Bso=i(UWe),ble=n(UWe,"P",{});var $it=s(ble);Iso=r($it,"Register a new configuration for this class."),$it.forEach(t),UWe.forEach(t),nt.forEach(t),JXe=i(m),ji=n(m,"H2",{class:!0});var JWe=s(ji);rh=n(JWe,"A",{id:!0,class:!0,href:!0});var kit=s(rh);vle=n(kit,"SPAN",{});var Sit=s(vle);T(Ey.$$.fragment,Sit),Sit.forEach(t),kit.forEach(t),Nso=i(JWe),Fle=n(JWe,"SPAN",{});var Rit=s(Fle);qso=r(Rit,"AutoTokenizer"),Rit.forEach(t),JWe.forEach(t),YXe=i(m),yo=n(m,"DIV",{class:!0});var el=s(yo);T(Cy.$$.fragment,el),jso=i(el),wy=n(el,"P",{});var YWe=s(wy);Dso=r(YWe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),fB=n(YWe,"A",{href:!0});var Pit=s(fB);Gso=r(Pit,"AutoTokenizer.from_pretrained()"),Pit.forEach(t),Oso=r(YWe," class method."),YWe.forEach(t),Vso=i(el),Ay=n(el,"P",{});var KWe=s(Ay);Xso=r(KWe,"This class cannot be instantiated directly using "),Tle=n(KWe,"CODE",{});var Bit=s(Tle);zso=r(Bit,"__init__()"),Bit.forEach(t),Wso=r(KWe," (throws an error)."),KWe.forEach(t),Qso=i(el),xr=n(el,"DIV",{class:!0});var ol=s(xr);T(Ly.$$.fragment,ol),Hso=i(ol),Mle=n(ol,"P",{});var Iit=s(Mle);Uso=r(Iit,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Iit.forEach(t),Jso=i(ol),Pa=n(ol,"P",{});var _7=s(Pa);Yso=r(_7,"The tokenizer class to instantiate is selected based on the "),Ele=n(_7,"CODE",{});var Nit=s(Ele);Kso=r(Nit,"model_type"),Nit.forEach(t),Zso=r(_7,` property of the config object (either
passed as an argument or loaded from `),Cle=n(_7,"CODE",{});var qit=s(Cle);elo=r(qit,"pretrained_model_name_or_path"),qit.forEach(t),olo=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=n(_7,"CODE",{});var jit=s(wle);rlo=r(jit,"pretrained_model_name_or_path"),jit.forEach(t),tlo=r(_7,":"),_7.forEach(t),alo=i(ol),k=n(ol,"UL",{});var S=s(k);jn=n(S,"LI",{});var Rk=s(jn);Ale=n(Rk,"STRONG",{});var Dit=s(Ale);nlo=r(Dit,"albert"),Dit.forEach(t),slo=r(Rk," \u2014 "),gB=n(Rk,"A",{href:!0});var Git=s(gB);llo=r(Git,"AlbertTokenizer"),Git.forEach(t),ilo=r(Rk," or "),hB=n(Rk,"A",{href:!0});var Oit=s(hB);dlo=r(Oit,"AlbertTokenizerFast"),Oit.forEach(t),clo=r(Rk," (ALBERT model)"),Rk.forEach(t),mlo=i(S),Dn=n(S,"LI",{});var Pk=s(Dn);Lle=n(Pk,"STRONG",{});var Vit=s(Lle);flo=r(Vit,"bart"),Vit.forEach(t),glo=r(Pk," \u2014 "),uB=n(Pk,"A",{href:!0});var Xit=s(uB);hlo=r(Xit,"BartTokenizer"),Xit.forEach(t),ulo=r(Pk," or "),pB=n(Pk,"A",{href:!0});var zit=s(pB);plo=r(zit,"BartTokenizerFast"),zit.forEach(t),_lo=r(Pk," (BART model)"),Pk.forEach(t),blo=i(S),Gn=n(S,"LI",{});var Bk=s(Gn);yle=n(Bk,"STRONG",{});var Wit=s(yle);vlo=r(Wit,"barthez"),Wit.forEach(t),Flo=r(Bk," \u2014 "),_B=n(Bk,"A",{href:!0});var Qit=s(_B);Tlo=r(Qit,"BarthezTokenizer"),Qit.forEach(t),Mlo=r(Bk," or "),bB=n(Bk,"A",{href:!0});var Hit=s(bB);Elo=r(Hit,"BarthezTokenizerFast"),Hit.forEach(t),Clo=r(Bk," (BARThez model)"),Bk.forEach(t),wlo=i(S),th=n(S,"LI",{});var Y8e=s(th);xle=n(Y8e,"STRONG",{});var Uit=s(xle);Alo=r(Uit,"bartpho"),Uit.forEach(t),Llo=r(Y8e," \u2014 "),vB=n(Y8e,"A",{href:!0});var Jit=s(vB);ylo=r(Jit,"BartphoTokenizer"),Jit.forEach(t),xlo=r(Y8e," (BARTpho model)"),Y8e.forEach(t),$lo=i(S),On=n(S,"LI",{});var Ik=s(On);$le=n(Ik,"STRONG",{});var Yit=s($le);klo=r(Yit,"bert"),Yit.forEach(t),Slo=r(Ik," \u2014 "),FB=n(Ik,"A",{href:!0});var Kit=s(FB);Rlo=r(Kit,"BertTokenizer"),Kit.forEach(t),Plo=r(Ik," or "),TB=n(Ik,"A",{href:!0});var Zit=s(TB);Blo=r(Zit,"BertTokenizerFast"),Zit.forEach(t),Ilo=r(Ik," (BERT model)"),Ik.forEach(t),Nlo=i(S),ah=n(S,"LI",{});var K8e=s(ah);kle=n(K8e,"STRONG",{});var edt=s(kle);qlo=r(edt,"bert-generation"),edt.forEach(t),jlo=r(K8e," \u2014 "),MB=n(K8e,"A",{href:!0});var odt=s(MB);Dlo=r(odt,"BertGenerationTokenizer"),odt.forEach(t),Glo=r(K8e," (Bert Generation model)"),K8e.forEach(t),Olo=i(S),nh=n(S,"LI",{});var Z8e=s(nh);Sle=n(Z8e,"STRONG",{});var rdt=s(Sle);Vlo=r(rdt,"bert-japanese"),rdt.forEach(t),Xlo=r(Z8e," \u2014 "),EB=n(Z8e,"A",{href:!0});var tdt=s(EB);zlo=r(tdt,"BertJapaneseTokenizer"),tdt.forEach(t),Wlo=r(Z8e," (BertJapanese model)"),Z8e.forEach(t),Qlo=i(S),sh=n(S,"LI",{});var e9e=s(sh);Rle=n(e9e,"STRONG",{});var adt=s(Rle);Hlo=r(adt,"bertweet"),adt.forEach(t),Ulo=r(e9e," \u2014 "),CB=n(e9e,"A",{href:!0});var ndt=s(CB);Jlo=r(ndt,"BertweetTokenizer"),ndt.forEach(t),Ylo=r(e9e," (BERTweet model)"),e9e.forEach(t),Klo=i(S),Vn=n(S,"LI",{});var Nk=s(Vn);Ple=n(Nk,"STRONG",{});var sdt=s(Ple);Zlo=r(sdt,"big_bird"),sdt.forEach(t),eio=r(Nk," \u2014 "),wB=n(Nk,"A",{href:!0});var ldt=s(wB);oio=r(ldt,"BigBirdTokenizer"),ldt.forEach(t),rio=r(Nk," or "),AB=n(Nk,"A",{href:!0});var idt=s(AB);tio=r(idt,"BigBirdTokenizerFast"),idt.forEach(t),aio=r(Nk," (BigBird model)"),Nk.forEach(t),nio=i(S),Xn=n(S,"LI",{});var qk=s(Xn);Ble=n(qk,"STRONG",{});var ddt=s(Ble);sio=r(ddt,"bigbird_pegasus"),ddt.forEach(t),lio=r(qk," \u2014 "),LB=n(qk,"A",{href:!0});var cdt=s(LB);iio=r(cdt,"PegasusTokenizer"),cdt.forEach(t),dio=r(qk," or "),yB=n(qk,"A",{href:!0});var mdt=s(yB);cio=r(mdt,"PegasusTokenizerFast"),mdt.forEach(t),mio=r(qk," (BigBird-Pegasus model)"),qk.forEach(t),fio=i(S),zn=n(S,"LI",{});var jk=s(zn);Ile=n(jk,"STRONG",{});var fdt=s(Ile);gio=r(fdt,"blenderbot"),fdt.forEach(t),hio=r(jk," \u2014 "),xB=n(jk,"A",{href:!0});var gdt=s(xB);uio=r(gdt,"BlenderbotTokenizer"),gdt.forEach(t),pio=r(jk," or "),$B=n(jk,"A",{href:!0});var hdt=s($B);_io=r(hdt,"BlenderbotTokenizerFast"),hdt.forEach(t),bio=r(jk," (Blenderbot model)"),jk.forEach(t),vio=i(S),lh=n(S,"LI",{});var o9e=s(lh);Nle=n(o9e,"STRONG",{});var udt=s(Nle);Fio=r(udt,"blenderbot-small"),udt.forEach(t),Tio=r(o9e," \u2014 "),kB=n(o9e,"A",{href:!0});var pdt=s(kB);Mio=r(pdt,"BlenderbotSmallTokenizer"),pdt.forEach(t),Eio=r(o9e," (BlenderbotSmall model)"),o9e.forEach(t),Cio=i(S),ih=n(S,"LI",{});var r9e=s(ih);qle=n(r9e,"STRONG",{});var _dt=s(qle);wio=r(_dt,"bloom"),_dt.forEach(t),Aio=r(r9e," \u2014 "),SB=n(r9e,"A",{href:!0});var bdt=s(SB);Lio=r(bdt,"BloomTokenizerFast"),bdt.forEach(t),yio=r(r9e," (BLOOM model)"),r9e.forEach(t),xio=i(S),dh=n(S,"LI",{});var t9e=s(dh);jle=n(t9e,"STRONG",{});var vdt=s(jle);$io=r(vdt,"byt5"),vdt.forEach(t),kio=r(t9e," \u2014 "),RB=n(t9e,"A",{href:!0});var Fdt=s(RB);Sio=r(Fdt,"ByT5Tokenizer"),Fdt.forEach(t),Rio=r(t9e," (ByT5 model)"),t9e.forEach(t),Pio=i(S),Wn=n(S,"LI",{});var Dk=s(Wn);Dle=n(Dk,"STRONG",{});var Tdt=s(Dle);Bio=r(Tdt,"camembert"),Tdt.forEach(t),Iio=r(Dk," \u2014 "),PB=n(Dk,"A",{href:!0});var Mdt=s(PB);Nio=r(Mdt,"CamembertTokenizer"),Mdt.forEach(t),qio=r(Dk," or "),BB=n(Dk,"A",{href:!0});var Edt=s(BB);jio=r(Edt,"CamembertTokenizerFast"),Edt.forEach(t),Dio=r(Dk," (CamemBERT model)"),Dk.forEach(t),Gio=i(S),ch=n(S,"LI",{});var a9e=s(ch);Gle=n(a9e,"STRONG",{});var Cdt=s(Gle);Oio=r(Cdt,"canine"),Cdt.forEach(t),Vio=r(a9e," \u2014 "),IB=n(a9e,"A",{href:!0});var wdt=s(IB);Xio=r(wdt,"CanineTokenizer"),wdt.forEach(t),zio=r(a9e," (CANINE model)"),a9e.forEach(t),Wio=i(S),Qn=n(S,"LI",{});var Gk=s(Qn);Ole=n(Gk,"STRONG",{});var Adt=s(Ole);Qio=r(Adt,"clip"),Adt.forEach(t),Hio=r(Gk," \u2014 "),NB=n(Gk,"A",{href:!0});var Ldt=s(NB);Uio=r(Ldt,"CLIPTokenizer"),Ldt.forEach(t),Jio=r(Gk," or "),qB=n(Gk,"A",{href:!0});var ydt=s(qB);Yio=r(ydt,"CLIPTokenizerFast"),ydt.forEach(t),Kio=r(Gk," (CLIP model)"),Gk.forEach(t),Zio=i(S),Hn=n(S,"LI",{});var Ok=s(Hn);Vle=n(Ok,"STRONG",{});var xdt=s(Vle);edo=r(xdt,"codegen"),xdt.forEach(t),odo=r(Ok," \u2014 "),jB=n(Ok,"A",{href:!0});var $dt=s(jB);rdo=r($dt,"CodeGenTokenizer"),$dt.forEach(t),tdo=r(Ok," or "),DB=n(Ok,"A",{href:!0});var kdt=s(DB);ado=r(kdt,"CodeGenTokenizerFast"),kdt.forEach(t),ndo=r(Ok," (CodeGen model)"),Ok.forEach(t),sdo=i(S),Un=n(S,"LI",{});var Vk=s(Un);Xle=n(Vk,"STRONG",{});var Sdt=s(Xle);ldo=r(Sdt,"convbert"),Sdt.forEach(t),ido=r(Vk," \u2014 "),GB=n(Vk,"A",{href:!0});var Rdt=s(GB);ddo=r(Rdt,"ConvBertTokenizer"),Rdt.forEach(t),cdo=r(Vk," or "),OB=n(Vk,"A",{href:!0});var Pdt=s(OB);mdo=r(Pdt,"ConvBertTokenizerFast"),Pdt.forEach(t),fdo=r(Vk," (ConvBERT model)"),Vk.forEach(t),gdo=i(S),Jn=n(S,"LI",{});var Xk=s(Jn);zle=n(Xk,"STRONG",{});var Bdt=s(zle);hdo=r(Bdt,"cpm"),Bdt.forEach(t),udo=r(Xk," \u2014 "),VB=n(Xk,"A",{href:!0});var Idt=s(VB);pdo=r(Idt,"CpmTokenizer"),Idt.forEach(t),_do=r(Xk," or "),XB=n(Xk,"A",{href:!0});var Ndt=s(XB);bdo=r(Ndt,"CpmTokenizerFast"),Ndt.forEach(t),vdo=r(Xk," (CPM model)"),Xk.forEach(t),Fdo=i(S),mh=n(S,"LI",{});var n9e=s(mh);Wle=n(n9e,"STRONG",{});var qdt=s(Wle);Tdo=r(qdt,"ctrl"),qdt.forEach(t),Mdo=r(n9e," \u2014 "),zB=n(n9e,"A",{href:!0});var jdt=s(zB);Edo=r(jdt,"CTRLTokenizer"),jdt.forEach(t),Cdo=r(n9e," (CTRL model)"),n9e.forEach(t),wdo=i(S),Yn=n(S,"LI",{});var zk=s(Yn);Qle=n(zk,"STRONG",{});var Ddt=s(Qle);Ado=r(Ddt,"data2vec-text"),Ddt.forEach(t),Ldo=r(zk," \u2014 "),WB=n(zk,"A",{href:!0});var Gdt=s(WB);ydo=r(Gdt,"RobertaTokenizer"),Gdt.forEach(t),xdo=r(zk," or "),QB=n(zk,"A",{href:!0});var Odt=s(QB);$do=r(Odt,"RobertaTokenizerFast"),Odt.forEach(t),kdo=r(zk," (Data2VecText model)"),zk.forEach(t),Sdo=i(S),Kn=n(S,"LI",{});var Wk=s(Kn);Hle=n(Wk,"STRONG",{});var Vdt=s(Hle);Rdo=r(Vdt,"deberta"),Vdt.forEach(t),Pdo=r(Wk," \u2014 "),HB=n(Wk,"A",{href:!0});var Xdt=s(HB);Bdo=r(Xdt,"DebertaTokenizer"),Xdt.forEach(t),Ido=r(Wk," or "),UB=n(Wk,"A",{href:!0});var zdt=s(UB);Ndo=r(zdt,"DebertaTokenizerFast"),zdt.forEach(t),qdo=r(Wk," (DeBERTa model)"),Wk.forEach(t),jdo=i(S),Zn=n(S,"LI",{});var Qk=s(Zn);Ule=n(Qk,"STRONG",{});var Wdt=s(Ule);Ddo=r(Wdt,"deberta-v2"),Wdt.forEach(t),Gdo=r(Qk," \u2014 "),JB=n(Qk,"A",{href:!0});var Qdt=s(JB);Odo=r(Qdt,"DebertaV2Tokenizer"),Qdt.forEach(t),Vdo=r(Qk," or "),YB=n(Qk,"A",{href:!0});var Hdt=s(YB);Xdo=r(Hdt,"DebertaV2TokenizerFast"),Hdt.forEach(t),zdo=r(Qk," (DeBERTa-v2 model)"),Qk.forEach(t),Wdo=i(S),es=n(S,"LI",{});var Hk=s(es);Jle=n(Hk,"STRONG",{});var Udt=s(Jle);Qdo=r(Udt,"distilbert"),Udt.forEach(t),Hdo=r(Hk," \u2014 "),KB=n(Hk,"A",{href:!0});var Jdt=s(KB);Udo=r(Jdt,"DistilBertTokenizer"),Jdt.forEach(t),Jdo=r(Hk," or "),ZB=n(Hk,"A",{href:!0});var Ydt=s(ZB);Ydo=r(Ydt,"DistilBertTokenizerFast"),Ydt.forEach(t),Kdo=r(Hk," (DistilBERT model)"),Hk.forEach(t),Zdo=i(S),os=n(S,"LI",{});var Uk=s(os);Yle=n(Uk,"STRONG",{});var Kdt=s(Yle);eco=r(Kdt,"dpr"),Kdt.forEach(t),oco=r(Uk," \u2014 "),eI=n(Uk,"A",{href:!0});var Zdt=s(eI);rco=r(Zdt,"DPRQuestionEncoderTokenizer"),Zdt.forEach(t),tco=r(Uk," or "),oI=n(Uk,"A",{href:!0});var ect=s(oI);aco=r(ect,"DPRQuestionEncoderTokenizerFast"),ect.forEach(t),nco=r(Uk," (DPR model)"),Uk.forEach(t),sco=i(S),rs=n(S,"LI",{});var Jk=s(rs);Kle=n(Jk,"STRONG",{});var oct=s(Kle);lco=r(oct,"electra"),oct.forEach(t),ico=r(Jk," \u2014 "),rI=n(Jk,"A",{href:!0});var rct=s(rI);dco=r(rct,"ElectraTokenizer"),rct.forEach(t),cco=r(Jk," or "),tI=n(Jk,"A",{href:!0});var tct=s(tI);mco=r(tct,"ElectraTokenizerFast"),tct.forEach(t),fco=r(Jk," (ELECTRA model)"),Jk.forEach(t),gco=i(S),fh=n(S,"LI",{});var s9e=s(fh);Zle=n(s9e,"STRONG",{});var act=s(Zle);hco=r(act,"flaubert"),act.forEach(t),uco=r(s9e," \u2014 "),aI=n(s9e,"A",{href:!0});var nct=s(aI);pco=r(nct,"FlaubertTokenizer"),nct.forEach(t),_co=r(s9e," (FlauBERT model)"),s9e.forEach(t),bco=i(S),ts=n(S,"LI",{});var Yk=s(ts);eie=n(Yk,"STRONG",{});var sct=s(eie);vco=r(sct,"fnet"),sct.forEach(t),Fco=r(Yk," \u2014 "),nI=n(Yk,"A",{href:!0});var lct=s(nI);Tco=r(lct,"FNetTokenizer"),lct.forEach(t),Mco=r(Yk," or "),sI=n(Yk,"A",{href:!0});var ict=s(sI);Eco=r(ict,"FNetTokenizerFast"),ict.forEach(t),Cco=r(Yk," (FNet model)"),Yk.forEach(t),wco=i(S),gh=n(S,"LI",{});var l9e=s(gh);oie=n(l9e,"STRONG",{});var dct=s(oie);Aco=r(dct,"fsmt"),dct.forEach(t),Lco=r(l9e," \u2014 "),lI=n(l9e,"A",{href:!0});var cct=s(lI);yco=r(cct,"FSMTTokenizer"),cct.forEach(t),xco=r(l9e," (FairSeq Machine-Translation model)"),l9e.forEach(t),$co=i(S),as=n(S,"LI",{});var Kk=s(as);rie=n(Kk,"STRONG",{});var mct=s(rie);kco=r(mct,"funnel"),mct.forEach(t),Sco=r(Kk," \u2014 "),iI=n(Kk,"A",{href:!0});var fct=s(iI);Rco=r(fct,"FunnelTokenizer"),fct.forEach(t),Pco=r(Kk," or "),dI=n(Kk,"A",{href:!0});var gct=s(dI);Bco=r(gct,"FunnelTokenizerFast"),gct.forEach(t),Ico=r(Kk," (Funnel Transformer model)"),Kk.forEach(t),Nco=i(S),ns=n(S,"LI",{});var Zk=s(ns);tie=n(Zk,"STRONG",{});var hct=s(tie);qco=r(hct,"gpt2"),hct.forEach(t),jco=r(Zk," \u2014 "),cI=n(Zk,"A",{href:!0});var uct=s(cI);Dco=r(uct,"GPT2Tokenizer"),uct.forEach(t),Gco=r(Zk," or "),mI=n(Zk,"A",{href:!0});var pct=s(mI);Oco=r(pct,"GPT2TokenizerFast"),pct.forEach(t),Vco=r(Zk," (OpenAI GPT-2 model)"),Zk.forEach(t),Xco=i(S),ss=n(S,"LI",{});var eS=s(ss);aie=n(eS,"STRONG",{});var _ct=s(aie);zco=r(_ct,"gpt_neo"),_ct.forEach(t),Wco=r(eS," \u2014 "),fI=n(eS,"A",{href:!0});var bct=s(fI);Qco=r(bct,"GPT2Tokenizer"),bct.forEach(t),Hco=r(eS," or "),gI=n(eS,"A",{href:!0});var vct=s(gI);Uco=r(vct,"GPT2TokenizerFast"),vct.forEach(t),Jco=r(eS," (GPT Neo model)"),eS.forEach(t),Yco=i(S),hh=n(S,"LI",{});var i9e=s(hh);nie=n(i9e,"STRONG",{});var Fct=s(nie);Kco=r(Fct,"gpt_neox"),Fct.forEach(t),Zco=r(i9e," \u2014 "),hI=n(i9e,"A",{href:!0});var Tct=s(hI);emo=r(Tct,"GPTNeoXTokenizerFast"),Tct.forEach(t),omo=r(i9e," (GPT NeoX model)"),i9e.forEach(t),rmo=i(S),ls=n(S,"LI",{});var oS=s(ls);sie=n(oS,"STRONG",{});var Mct=s(sie);tmo=r(Mct,"gptj"),Mct.forEach(t),amo=r(oS," \u2014 "),uI=n(oS,"A",{href:!0});var Ect=s(uI);nmo=r(Ect,"GPT2Tokenizer"),Ect.forEach(t),smo=r(oS," or "),pI=n(oS,"A",{href:!0});var Cct=s(pI);lmo=r(Cct,"GPT2TokenizerFast"),Cct.forEach(t),imo=r(oS," (GPT-J model)"),oS.forEach(t),dmo=i(S),is=n(S,"LI",{});var rS=s(is);lie=n(rS,"STRONG",{});var wct=s(lie);cmo=r(wct,"groupvit"),wct.forEach(t),mmo=r(rS," \u2014 "),_I=n(rS,"A",{href:!0});var Act=s(_I);fmo=r(Act,"CLIPTokenizer"),Act.forEach(t),gmo=r(rS," or "),bI=n(rS,"A",{href:!0});var Lct=s(bI);hmo=r(Lct,"CLIPTokenizerFast"),Lct.forEach(t),umo=r(rS," (GroupViT model)"),rS.forEach(t),pmo=i(S),ds=n(S,"LI",{});var tS=s(ds);iie=n(tS,"STRONG",{});var yct=s(iie);_mo=r(yct,"herbert"),yct.forEach(t),bmo=r(tS," \u2014 "),vI=n(tS,"A",{href:!0});var xct=s(vI);vmo=r(xct,"HerbertTokenizer"),xct.forEach(t),Fmo=r(tS," or "),FI=n(tS,"A",{href:!0});var $ct=s(FI);Tmo=r($ct,"HerbertTokenizerFast"),$ct.forEach(t),Mmo=r(tS," (HerBERT model)"),tS.forEach(t),Emo=i(S),uh=n(S,"LI",{});var d9e=s(uh);die=n(d9e,"STRONG",{});var kct=s(die);Cmo=r(kct,"hubert"),kct.forEach(t),wmo=r(d9e," \u2014 "),TI=n(d9e,"A",{href:!0});var Sct=s(TI);Amo=r(Sct,"Wav2Vec2CTCTokenizer"),Sct.forEach(t),Lmo=r(d9e," (Hubert model)"),d9e.forEach(t),ymo=i(S),cs=n(S,"LI",{});var aS=s(cs);cie=n(aS,"STRONG",{});var Rct=s(cie);xmo=r(Rct,"ibert"),Rct.forEach(t),$mo=r(aS," \u2014 "),MI=n(aS,"A",{href:!0});var Pct=s(MI);kmo=r(Pct,"RobertaTokenizer"),Pct.forEach(t),Smo=r(aS," or "),EI=n(aS,"A",{href:!0});var Bct=s(EI);Rmo=r(Bct,"RobertaTokenizerFast"),Bct.forEach(t),Pmo=r(aS," (I-BERT model)"),aS.forEach(t),Bmo=i(S),ms=n(S,"LI",{});var nS=s(ms);mie=n(nS,"STRONG",{});var Ict=s(mie);Imo=r(Ict,"layoutlm"),Ict.forEach(t),Nmo=r(nS," \u2014 "),CI=n(nS,"A",{href:!0});var Nct=s(CI);qmo=r(Nct,"LayoutLMTokenizer"),Nct.forEach(t),jmo=r(nS," or "),wI=n(nS,"A",{href:!0});var qct=s(wI);Dmo=r(qct,"LayoutLMTokenizerFast"),qct.forEach(t),Gmo=r(nS," (LayoutLM model)"),nS.forEach(t),Omo=i(S),fs=n(S,"LI",{});var sS=s(fs);fie=n(sS,"STRONG",{});var jct=s(fie);Vmo=r(jct,"layoutlmv2"),jct.forEach(t),Xmo=r(sS," \u2014 "),AI=n(sS,"A",{href:!0});var Dct=s(AI);zmo=r(Dct,"LayoutLMv2Tokenizer"),Dct.forEach(t),Wmo=r(sS," or "),LI=n(sS,"A",{href:!0});var Gct=s(LI);Qmo=r(Gct,"LayoutLMv2TokenizerFast"),Gct.forEach(t),Hmo=r(sS," (LayoutLMv2 model)"),sS.forEach(t),Umo=i(S),gs=n(S,"LI",{});var lS=s(gs);gie=n(lS,"STRONG",{});var Oct=s(gie);Jmo=r(Oct,"layoutlmv3"),Oct.forEach(t),Ymo=r(lS," \u2014 "),yI=n(lS,"A",{href:!0});var Vct=s(yI);Kmo=r(Vct,"LayoutLMv3Tokenizer"),Vct.forEach(t),Zmo=r(lS," or "),xI=n(lS,"A",{href:!0});var Xct=s(xI);efo=r(Xct,"LayoutLMv3TokenizerFast"),Xct.forEach(t),ofo=r(lS," (LayoutLMv3 model)"),lS.forEach(t),rfo=i(S),hs=n(S,"LI",{});var iS=s(hs);hie=n(iS,"STRONG",{});var zct=s(hie);tfo=r(zct,"layoutxlm"),zct.forEach(t),afo=r(iS," \u2014 "),$I=n(iS,"A",{href:!0});var Wct=s($I);nfo=r(Wct,"LayoutXLMTokenizer"),Wct.forEach(t),sfo=r(iS," or "),kI=n(iS,"A",{href:!0});var Qct=s(kI);lfo=r(Qct,"LayoutXLMTokenizerFast"),Qct.forEach(t),ifo=r(iS," (LayoutXLM model)"),iS.forEach(t),dfo=i(S),us=n(S,"LI",{});var dS=s(us);uie=n(dS,"STRONG",{});var Hct=s(uie);cfo=r(Hct,"led"),Hct.forEach(t),mfo=r(dS," \u2014 "),SI=n(dS,"A",{href:!0});var Uct=s(SI);ffo=r(Uct,"LEDTokenizer"),Uct.forEach(t),gfo=r(dS," or "),RI=n(dS,"A",{href:!0});var Jct=s(RI);hfo=r(Jct,"LEDTokenizerFast"),Jct.forEach(t),ufo=r(dS," (LED model)"),dS.forEach(t),pfo=i(S),ps=n(S,"LI",{});var cS=s(ps);pie=n(cS,"STRONG",{});var Yct=s(pie);_fo=r(Yct,"longformer"),Yct.forEach(t),bfo=r(cS," \u2014 "),PI=n(cS,"A",{href:!0});var Kct=s(PI);vfo=r(Kct,"LongformerTokenizer"),Kct.forEach(t),Ffo=r(cS," or "),BI=n(cS,"A",{href:!0});var Zct=s(BI);Tfo=r(Zct,"LongformerTokenizerFast"),Zct.forEach(t),Mfo=r(cS," (Longformer model)"),cS.forEach(t),Efo=i(S),_s=n(S,"LI",{});var mS=s(_s);_ie=n(mS,"STRONG",{});var emt=s(_ie);Cfo=r(emt,"longt5"),emt.forEach(t),wfo=r(mS," \u2014 "),II=n(mS,"A",{href:!0});var omt=s(II);Afo=r(omt,"T5Tokenizer"),omt.forEach(t),Lfo=r(mS," or "),NI=n(mS,"A",{href:!0});var rmt=s(NI);yfo=r(rmt,"T5TokenizerFast"),rmt.forEach(t),xfo=r(mS," (LongT5 model)"),mS.forEach(t),$fo=i(S),ph=n(S,"LI",{});var c9e=s(ph);bie=n(c9e,"STRONG",{});var tmt=s(bie);kfo=r(tmt,"luke"),tmt.forEach(t),Sfo=r(c9e," \u2014 "),qI=n(c9e,"A",{href:!0});var amt=s(qI);Rfo=r(amt,"LukeTokenizer"),amt.forEach(t),Pfo=r(c9e," (LUKE model)"),c9e.forEach(t),Bfo=i(S),bs=n(S,"LI",{});var fS=s(bs);vie=n(fS,"STRONG",{});var nmt=s(vie);Ifo=r(nmt,"lxmert"),nmt.forEach(t),Nfo=r(fS," \u2014 "),jI=n(fS,"A",{href:!0});var smt=s(jI);qfo=r(smt,"LxmertTokenizer"),smt.forEach(t),jfo=r(fS," or "),DI=n(fS,"A",{href:!0});var lmt=s(DI);Dfo=r(lmt,"LxmertTokenizerFast"),lmt.forEach(t),Gfo=r(fS," (LXMERT model)"),fS.forEach(t),Ofo=i(S),_h=n(S,"LI",{});var m9e=s(_h);Fie=n(m9e,"STRONG",{});var imt=s(Fie);Vfo=r(imt,"m2m_100"),imt.forEach(t),Xfo=r(m9e," \u2014 "),GI=n(m9e,"A",{href:!0});var dmt=s(GI);zfo=r(dmt,"M2M100Tokenizer"),dmt.forEach(t),Wfo=r(m9e," (M2M100 model)"),m9e.forEach(t),Qfo=i(S),bh=n(S,"LI",{});var f9e=s(bh);Tie=n(f9e,"STRONG",{});var cmt=s(Tie);Hfo=r(cmt,"marian"),cmt.forEach(t),Ufo=r(f9e," \u2014 "),OI=n(f9e,"A",{href:!0});var mmt=s(OI);Jfo=r(mmt,"MarianTokenizer"),mmt.forEach(t),Yfo=r(f9e," (Marian model)"),f9e.forEach(t),Kfo=i(S),vs=n(S,"LI",{});var gS=s(vs);Mie=n(gS,"STRONG",{});var fmt=s(Mie);Zfo=r(fmt,"mbart"),fmt.forEach(t),ego=r(gS," \u2014 "),VI=n(gS,"A",{href:!0});var gmt=s(VI);ogo=r(gmt,"MBartTokenizer"),gmt.forEach(t),rgo=r(gS," or "),XI=n(gS,"A",{href:!0});var hmt=s(XI);tgo=r(hmt,"MBartTokenizerFast"),hmt.forEach(t),ago=r(gS," (mBART model)"),gS.forEach(t),ngo=i(S),Fs=n(S,"LI",{});var hS=s(Fs);Eie=n(hS,"STRONG",{});var umt=s(Eie);sgo=r(umt,"mbart50"),umt.forEach(t),lgo=r(hS," \u2014 "),zI=n(hS,"A",{href:!0});var pmt=s(zI);igo=r(pmt,"MBart50Tokenizer"),pmt.forEach(t),dgo=r(hS," or "),WI=n(hS,"A",{href:!0});var _mt=s(WI);cgo=r(_mt,"MBart50TokenizerFast"),_mt.forEach(t),mgo=r(hS," (mBART-50 model)"),hS.forEach(t),fgo=i(S),Ts=n(S,"LI",{});var uS=s(Ts);Cie=n(uS,"STRONG",{});var bmt=s(Cie);ggo=r(bmt,"megatron-bert"),bmt.forEach(t),hgo=r(uS," \u2014 "),QI=n(uS,"A",{href:!0});var vmt=s(QI);ugo=r(vmt,"BertTokenizer"),vmt.forEach(t),pgo=r(uS," or "),HI=n(uS,"A",{href:!0});var Fmt=s(HI);_go=r(Fmt,"BertTokenizerFast"),Fmt.forEach(t),bgo=r(uS," (Megatron-BERT model)"),uS.forEach(t),vgo=i(S),vh=n(S,"LI",{});var g9e=s(vh);wie=n(g9e,"STRONG",{});var Tmt=s(wie);Fgo=r(Tmt,"mluke"),Tmt.forEach(t),Tgo=r(g9e," \u2014 "),UI=n(g9e,"A",{href:!0});var Mmt=s(UI);Mgo=r(Mmt,"MLukeTokenizer"),Mmt.forEach(t),Ego=r(g9e," (mLUKE model)"),g9e.forEach(t),Cgo=i(S),Ms=n(S,"LI",{});var pS=s(Ms);Aie=n(pS,"STRONG",{});var Emt=s(Aie);wgo=r(Emt,"mobilebert"),Emt.forEach(t),Ago=r(pS," \u2014 "),JI=n(pS,"A",{href:!0});var Cmt=s(JI);Lgo=r(Cmt,"MobileBertTokenizer"),Cmt.forEach(t),ygo=r(pS," or "),YI=n(pS,"A",{href:!0});var wmt=s(YI);xgo=r(wmt,"MobileBertTokenizerFast"),wmt.forEach(t),$go=r(pS," (MobileBERT model)"),pS.forEach(t),kgo=i(S),Es=n(S,"LI",{});var _S=s(Es);Lie=n(_S,"STRONG",{});var Amt=s(Lie);Sgo=r(Amt,"mpnet"),Amt.forEach(t),Rgo=r(_S," \u2014 "),KI=n(_S,"A",{href:!0});var Lmt=s(KI);Pgo=r(Lmt,"MPNetTokenizer"),Lmt.forEach(t),Bgo=r(_S," or "),ZI=n(_S,"A",{href:!0});var ymt=s(ZI);Igo=r(ymt,"MPNetTokenizerFast"),ymt.forEach(t),Ngo=r(_S," (MPNet model)"),_S.forEach(t),qgo=i(S),Cs=n(S,"LI",{});var bS=s(Cs);yie=n(bS,"STRONG",{});var xmt=s(yie);jgo=r(xmt,"mt5"),xmt.forEach(t),Dgo=r(bS," \u2014 "),eN=n(bS,"A",{href:!0});var $mt=s(eN);Ggo=r($mt,"MT5Tokenizer"),$mt.forEach(t),Ogo=r(bS," or "),oN=n(bS,"A",{href:!0});var kmt=s(oN);Vgo=r(kmt,"MT5TokenizerFast"),kmt.forEach(t),Xgo=r(bS," (MT5 model)"),bS.forEach(t),zgo=i(S),ws=n(S,"LI",{});var vS=s(ws);xie=n(vS,"STRONG",{});var Smt=s(xie);Wgo=r(Smt,"mvp"),Smt.forEach(t),Qgo=r(vS," \u2014 "),rN=n(vS,"A",{href:!0});var Rmt=s(rN);Hgo=r(Rmt,"MvpTokenizer"),Rmt.forEach(t),Ugo=r(vS," or "),tN=n(vS,"A",{href:!0});var Pmt=s(tN);Jgo=r(Pmt,"MvpTokenizerFast"),Pmt.forEach(t),Ygo=r(vS," (MVP model)"),vS.forEach(t),Kgo=i(S),As=n(S,"LI",{});var FS=s(As);$ie=n(FS,"STRONG",{});var Bmt=s($ie);Zgo=r(Bmt,"nezha"),Bmt.forEach(t),eho=r(FS," \u2014 "),aN=n(FS,"A",{href:!0});var Imt=s(aN);oho=r(Imt,"BertTokenizer"),Imt.forEach(t),rho=r(FS," or "),nN=n(FS,"A",{href:!0});var Nmt=s(nN);tho=r(Nmt,"BertTokenizerFast"),Nmt.forEach(t),aho=r(FS," (Nezha model)"),FS.forEach(t),nho=i(S),Ls=n(S,"LI",{});var TS=s(Ls);kie=n(TS,"STRONG",{});var qmt=s(kie);sho=r(qmt,"nllb"),qmt.forEach(t),lho=r(TS," \u2014 "),sN=n(TS,"A",{href:!0});var jmt=s(sN);iho=r(jmt,"NllbTokenizer"),jmt.forEach(t),dho=r(TS," or "),lN=n(TS,"A",{href:!0});var Dmt=s(lN);cho=r(Dmt,"NllbTokenizerFast"),Dmt.forEach(t),mho=r(TS," (NLLB model)"),TS.forEach(t),fho=i(S),ys=n(S,"LI",{});var MS=s(ys);Sie=n(MS,"STRONG",{});var Gmt=s(Sie);gho=r(Gmt,"nystromformer"),Gmt.forEach(t),hho=r(MS," \u2014 "),iN=n(MS,"A",{href:!0});var Omt=s(iN);uho=r(Omt,"AlbertTokenizer"),Omt.forEach(t),pho=r(MS," or "),dN=n(MS,"A",{href:!0});var Vmt=s(dN);_ho=r(Vmt,"AlbertTokenizerFast"),Vmt.forEach(t),bho=r(MS," (Nystr\xF6mformer model)"),MS.forEach(t),vho=i(S),xs=n(S,"LI",{});var ES=s(xs);Rie=n(ES,"STRONG",{});var Xmt=s(Rie);Fho=r(Xmt,"openai-gpt"),Xmt.forEach(t),Tho=r(ES," \u2014 "),cN=n(ES,"A",{href:!0});var zmt=s(cN);Mho=r(zmt,"OpenAIGPTTokenizer"),zmt.forEach(t),Eho=r(ES," or "),mN=n(ES,"A",{href:!0});var Wmt=s(mN);Cho=r(Wmt,"OpenAIGPTTokenizerFast"),Wmt.forEach(t),who=r(ES," (OpenAI GPT model)"),ES.forEach(t),Aho=i(S),Fh=n(S,"LI",{});var h9e=s(Fh);Pie=n(h9e,"STRONG",{});var Qmt=s(Pie);Lho=r(Qmt,"opt"),Qmt.forEach(t),yho=r(h9e," \u2014 "),fN=n(h9e,"A",{href:!0});var Hmt=s(fN);xho=r(Hmt,"GPT2Tokenizer"),Hmt.forEach(t),$ho=r(h9e," (OPT model)"),h9e.forEach(t),kho=i(S),$s=n(S,"LI",{});var CS=s($s);Bie=n(CS,"STRONG",{});var Umt=s(Bie);Sho=r(Umt,"owlvit"),Umt.forEach(t),Rho=r(CS," \u2014 "),gN=n(CS,"A",{href:!0});var Jmt=s(gN);Pho=r(Jmt,"CLIPTokenizer"),Jmt.forEach(t),Bho=r(CS," or "),hN=n(CS,"A",{href:!0});var Ymt=s(hN);Iho=r(Ymt,"CLIPTokenizerFast"),Ymt.forEach(t),Nho=r(CS," (OWL-ViT model)"),CS.forEach(t),qho=i(S),ks=n(S,"LI",{});var wS=s(ks);Iie=n(wS,"STRONG",{});var Kmt=s(Iie);jho=r(Kmt,"pegasus"),Kmt.forEach(t),Dho=r(wS," \u2014 "),uN=n(wS,"A",{href:!0});var Zmt=s(uN);Gho=r(Zmt,"PegasusTokenizer"),Zmt.forEach(t),Oho=r(wS," or "),pN=n(wS,"A",{href:!0});var eft=s(pN);Vho=r(eft,"PegasusTokenizerFast"),eft.forEach(t),Xho=r(wS," (Pegasus model)"),wS.forEach(t),zho=i(S),Th=n(S,"LI",{});var u9e=s(Th);Nie=n(u9e,"STRONG",{});var oft=s(Nie);Who=r(oft,"perceiver"),oft.forEach(t),Qho=r(u9e," \u2014 "),_N=n(u9e,"A",{href:!0});var rft=s(_N);Hho=r(rft,"PerceiverTokenizer"),rft.forEach(t),Uho=r(u9e," (Perceiver model)"),u9e.forEach(t),Jho=i(S),Mh=n(S,"LI",{});var p9e=s(Mh);qie=n(p9e,"STRONG",{});var tft=s(qie);Yho=r(tft,"phobert"),tft.forEach(t),Kho=r(p9e," \u2014 "),bN=n(p9e,"A",{href:!0});var aft=s(bN);Zho=r(aft,"PhobertTokenizer"),aft.forEach(t),euo=r(p9e," (PhoBERT model)"),p9e.forEach(t),ouo=i(S),Eh=n(S,"LI",{});var _9e=s(Eh);jie=n(_9e,"STRONG",{});var nft=s(jie);ruo=r(nft,"plbart"),nft.forEach(t),tuo=r(_9e," \u2014 "),vN=n(_9e,"A",{href:!0});var sft=s(vN);auo=r(sft,"PLBartTokenizer"),sft.forEach(t),nuo=r(_9e," (PLBart model)"),_9e.forEach(t),suo=i(S),Ch=n(S,"LI",{});var b9e=s(Ch);Die=n(b9e,"STRONG",{});var lft=s(Die);luo=r(lft,"prophetnet"),lft.forEach(t),iuo=r(b9e," \u2014 "),FN=n(b9e,"A",{href:!0});var ift=s(FN);duo=r(ift,"ProphetNetTokenizer"),ift.forEach(t),cuo=r(b9e," (ProphetNet model)"),b9e.forEach(t),muo=i(S),Ss=n(S,"LI",{});var AS=s(Ss);Gie=n(AS,"STRONG",{});var dft=s(Gie);fuo=r(dft,"qdqbert"),dft.forEach(t),guo=r(AS," \u2014 "),TN=n(AS,"A",{href:!0});var cft=s(TN);huo=r(cft,"BertTokenizer"),cft.forEach(t),uuo=r(AS," or "),MN=n(AS,"A",{href:!0});var mft=s(MN);puo=r(mft,"BertTokenizerFast"),mft.forEach(t),_uo=r(AS," (QDQBert model)"),AS.forEach(t),buo=i(S),wh=n(S,"LI",{});var v9e=s(wh);Oie=n(v9e,"STRONG",{});var fft=s(Oie);vuo=r(fft,"rag"),fft.forEach(t),Fuo=r(v9e," \u2014 "),EN=n(v9e,"A",{href:!0});var gft=s(EN);Tuo=r(gft,"RagTokenizer"),gft.forEach(t),Muo=r(v9e," (RAG model)"),v9e.forEach(t),Euo=i(S),Rs=n(S,"LI",{});var LS=s(Rs);Vie=n(LS,"STRONG",{});var hft=s(Vie);Cuo=r(hft,"realm"),hft.forEach(t),wuo=r(LS," \u2014 "),CN=n(LS,"A",{href:!0});var uft=s(CN);Auo=r(uft,"RealmTokenizer"),uft.forEach(t),Luo=r(LS," or "),wN=n(LS,"A",{href:!0});var pft=s(wN);yuo=r(pft,"RealmTokenizerFast"),pft.forEach(t),xuo=r(LS," (REALM model)"),LS.forEach(t),$uo=i(S),Ps=n(S,"LI",{});var yS=s(Ps);Xie=n(yS,"STRONG",{});var _ft=s(Xie);kuo=r(_ft,"reformer"),_ft.forEach(t),Suo=r(yS," \u2014 "),AN=n(yS,"A",{href:!0});var bft=s(AN);Ruo=r(bft,"ReformerTokenizer"),bft.forEach(t),Puo=r(yS," or "),LN=n(yS,"A",{href:!0});var vft=s(LN);Buo=r(vft,"ReformerTokenizerFast"),vft.forEach(t),Iuo=r(yS," (Reformer model)"),yS.forEach(t),Nuo=i(S),Bs=n(S,"LI",{});var xS=s(Bs);zie=n(xS,"STRONG",{});var Fft=s(zie);quo=r(Fft,"rembert"),Fft.forEach(t),juo=r(xS," \u2014 "),yN=n(xS,"A",{href:!0});var Tft=s(yN);Duo=r(Tft,"RemBertTokenizer"),Tft.forEach(t),Guo=r(xS," or "),xN=n(xS,"A",{href:!0});var Mft=s(xN);Ouo=r(Mft,"RemBertTokenizerFast"),Mft.forEach(t),Vuo=r(xS," (RemBERT model)"),xS.forEach(t),Xuo=i(S),Is=n(S,"LI",{});var $S=s(Is);Wie=n($S,"STRONG",{});var Eft=s(Wie);zuo=r(Eft,"retribert"),Eft.forEach(t),Wuo=r($S," \u2014 "),$N=n($S,"A",{href:!0});var Cft=s($N);Quo=r(Cft,"RetriBertTokenizer"),Cft.forEach(t),Huo=r($S," or "),kN=n($S,"A",{href:!0});var wft=s(kN);Uuo=r(wft,"RetriBertTokenizerFast"),wft.forEach(t),Juo=r($S," (RetriBERT model)"),$S.forEach(t),Yuo=i(S),Ns=n(S,"LI",{});var kS=s(Ns);Qie=n(kS,"STRONG",{});var Aft=s(Qie);Kuo=r(Aft,"roberta"),Aft.forEach(t),Zuo=r(kS," \u2014 "),SN=n(kS,"A",{href:!0});var Lft=s(SN);epo=r(Lft,"RobertaTokenizer"),Lft.forEach(t),opo=r(kS," or "),RN=n(kS,"A",{href:!0});var yft=s(RN);rpo=r(yft,"RobertaTokenizerFast"),yft.forEach(t),tpo=r(kS," (RoBERTa model)"),kS.forEach(t),apo=i(S),qs=n(S,"LI",{});var SS=s(qs);Hie=n(SS,"STRONG",{});var xft=s(Hie);npo=r(xft,"roformer"),xft.forEach(t),spo=r(SS," \u2014 "),PN=n(SS,"A",{href:!0});var $ft=s(PN);lpo=r($ft,"RoFormerTokenizer"),$ft.forEach(t),ipo=r(SS," or "),BN=n(SS,"A",{href:!0});var kft=s(BN);dpo=r(kft,"RoFormerTokenizerFast"),kft.forEach(t),cpo=r(SS," (RoFormer model)"),SS.forEach(t),mpo=i(S),Ah=n(S,"LI",{});var F9e=s(Ah);Uie=n(F9e,"STRONG",{});var Sft=s(Uie);fpo=r(Sft,"speech_to_text"),Sft.forEach(t),gpo=r(F9e," \u2014 "),IN=n(F9e,"A",{href:!0});var Rft=s(IN);hpo=r(Rft,"Speech2TextTokenizer"),Rft.forEach(t),upo=r(F9e," (Speech2Text model)"),F9e.forEach(t),ppo=i(S),Lh=n(S,"LI",{});var T9e=s(Lh);Jie=n(T9e,"STRONG",{});var Pft=s(Jie);_po=r(Pft,"speech_to_text_2"),Pft.forEach(t),bpo=r(T9e," \u2014 "),NN=n(T9e,"A",{href:!0});var Bft=s(NN);vpo=r(Bft,"Speech2Text2Tokenizer"),Bft.forEach(t),Fpo=r(T9e," (Speech2Text2 model)"),T9e.forEach(t),Tpo=i(S),js=n(S,"LI",{});var RS=s(js);Yie=n(RS,"STRONG",{});var Ift=s(Yie);Mpo=r(Ift,"splinter"),Ift.forEach(t),Epo=r(RS," \u2014 "),qN=n(RS,"A",{href:!0});var Nft=s(qN);Cpo=r(Nft,"SplinterTokenizer"),Nft.forEach(t),wpo=r(RS," or "),jN=n(RS,"A",{href:!0});var qft=s(jN);Apo=r(qft,"SplinterTokenizerFast"),qft.forEach(t),Lpo=r(RS," (Splinter model)"),RS.forEach(t),ypo=i(S),Ds=n(S,"LI",{});var PS=s(Ds);Kie=n(PS,"STRONG",{});var jft=s(Kie);xpo=r(jft,"squeezebert"),jft.forEach(t),$po=r(PS," \u2014 "),DN=n(PS,"A",{href:!0});var Dft=s(DN);kpo=r(Dft,"SqueezeBertTokenizer"),Dft.forEach(t),Spo=r(PS," or "),GN=n(PS,"A",{href:!0});var Gft=s(GN);Rpo=r(Gft,"SqueezeBertTokenizerFast"),Gft.forEach(t),Ppo=r(PS," (SqueezeBERT model)"),PS.forEach(t),Bpo=i(S),Gs=n(S,"LI",{});var BS=s(Gs);Zie=n(BS,"STRONG",{});var Oft=s(Zie);Ipo=r(Oft,"t5"),Oft.forEach(t),Npo=r(BS," \u2014 "),ON=n(BS,"A",{href:!0});var Vft=s(ON);qpo=r(Vft,"T5Tokenizer"),Vft.forEach(t),jpo=r(BS," or "),VN=n(BS,"A",{href:!0});var Xft=s(VN);Dpo=r(Xft,"T5TokenizerFast"),Xft.forEach(t),Gpo=r(BS," (T5 model)"),BS.forEach(t),Opo=i(S),yh=n(S,"LI",{});var M9e=s(yh);ede=n(M9e,"STRONG",{});var zft=s(ede);Vpo=r(zft,"tapas"),zft.forEach(t),Xpo=r(M9e," \u2014 "),XN=n(M9e,"A",{href:!0});var Wft=s(XN);zpo=r(Wft,"TapasTokenizer"),Wft.forEach(t),Wpo=r(M9e," (TAPAS model)"),M9e.forEach(t),Qpo=i(S),xh=n(S,"LI",{});var E9e=s(xh);ode=n(E9e,"STRONG",{});var Qft=s(ode);Hpo=r(Qft,"tapex"),Qft.forEach(t),Upo=r(E9e," \u2014 "),zN=n(E9e,"A",{href:!0});var Hft=s(zN);Jpo=r(Hft,"TapexTokenizer"),Hft.forEach(t),Ypo=r(E9e," (TAPEX model)"),E9e.forEach(t),Kpo=i(S),$h=n(S,"LI",{});var C9e=s($h);rde=n(C9e,"STRONG",{});var Uft=s(rde);Zpo=r(Uft,"transfo-xl"),Uft.forEach(t),e_o=r(C9e," \u2014 "),WN=n(C9e,"A",{href:!0});var Jft=s(WN);o_o=r(Jft,"TransfoXLTokenizer"),Jft.forEach(t),r_o=r(C9e," (Transformer-XL model)"),C9e.forEach(t),t_o=i(S),Os=n(S,"LI",{});var IS=s(Os);tde=n(IS,"STRONG",{});var Yft=s(tde);a_o=r(Yft,"vilt"),Yft.forEach(t),n_o=r(IS," \u2014 "),QN=n(IS,"A",{href:!0});var Kft=s(QN);s_o=r(Kft,"BertTokenizer"),Kft.forEach(t),l_o=r(IS," or "),HN=n(IS,"A",{href:!0});var Zft=s(HN);i_o=r(Zft,"BertTokenizerFast"),Zft.forEach(t),d_o=r(IS," (ViLT model)"),IS.forEach(t),c_o=i(S),Vs=n(S,"LI",{});var NS=s(Vs);ade=n(NS,"STRONG",{});var egt=s(ade);m_o=r(egt,"visual_bert"),egt.forEach(t),f_o=r(NS," \u2014 "),UN=n(NS,"A",{href:!0});var ogt=s(UN);g_o=r(ogt,"BertTokenizer"),ogt.forEach(t),h_o=r(NS," or "),JN=n(NS,"A",{href:!0});var rgt=s(JN);u_o=r(rgt,"BertTokenizerFast"),rgt.forEach(t),p_o=r(NS," (VisualBERT model)"),NS.forEach(t),__o=i(S),kh=n(S,"LI",{});var w9e=s(kh);nde=n(w9e,"STRONG",{});var tgt=s(nde);b_o=r(tgt,"wav2vec2"),tgt.forEach(t),v_o=r(w9e," \u2014 "),YN=n(w9e,"A",{href:!0});var agt=s(YN);F_o=r(agt,"Wav2Vec2CTCTokenizer"),agt.forEach(t),T_o=r(w9e," (Wav2Vec2 model)"),w9e.forEach(t),M_o=i(S),Sh=n(S,"LI",{});var A9e=s(Sh);sde=n(A9e,"STRONG",{});var ngt=s(sde);E_o=r(ngt,"wav2vec2-conformer"),ngt.forEach(t),C_o=r(A9e," \u2014 "),KN=n(A9e,"A",{href:!0});var sgt=s(KN);w_o=r(sgt,"Wav2Vec2CTCTokenizer"),sgt.forEach(t),A_o=r(A9e," (Wav2Vec2-Conformer model)"),A9e.forEach(t),L_o=i(S),Rh=n(S,"LI",{});var L9e=s(Rh);lde=n(L9e,"STRONG",{});var lgt=s(lde);y_o=r(lgt,"wav2vec2_phoneme"),lgt.forEach(t),x_o=r(L9e," \u2014 "),ZN=n(L9e,"A",{href:!0});var igt=s(ZN);$_o=r(igt,"Wav2Vec2PhonemeCTCTokenizer"),igt.forEach(t),k_o=r(L9e," (Wav2Vec2Phoneme model)"),L9e.forEach(t),S_o=i(S),Xs=n(S,"LI",{});var qS=s(Xs);ide=n(qS,"STRONG",{});var dgt=s(ide);R_o=r(dgt,"xglm"),dgt.forEach(t),P_o=r(qS," \u2014 "),eq=n(qS,"A",{href:!0});var cgt=s(eq);B_o=r(cgt,"XGLMTokenizer"),cgt.forEach(t),I_o=r(qS," or "),oq=n(qS,"A",{href:!0});var mgt=s(oq);N_o=r(mgt,"XGLMTokenizerFast"),mgt.forEach(t),q_o=r(qS," (XGLM model)"),qS.forEach(t),j_o=i(S),Ph=n(S,"LI",{});var y9e=s(Ph);dde=n(y9e,"STRONG",{});var fgt=s(dde);D_o=r(fgt,"xlm"),fgt.forEach(t),G_o=r(y9e," \u2014 "),rq=n(y9e,"A",{href:!0});var ggt=s(rq);O_o=r(ggt,"XLMTokenizer"),ggt.forEach(t),V_o=r(y9e," (XLM model)"),y9e.forEach(t),X_o=i(S),Bh=n(S,"LI",{});var x9e=s(Bh);cde=n(x9e,"STRONG",{});var hgt=s(cde);z_o=r(hgt,"xlm-prophetnet"),hgt.forEach(t),W_o=r(x9e," \u2014 "),tq=n(x9e,"A",{href:!0});var ugt=s(tq);Q_o=r(ugt,"XLMProphetNetTokenizer"),ugt.forEach(t),H_o=r(x9e," (XLM-ProphetNet model)"),x9e.forEach(t),U_o=i(S),zs=n(S,"LI",{});var jS=s(zs);mde=n(jS,"STRONG",{});var pgt=s(mde);J_o=r(pgt,"xlm-roberta"),pgt.forEach(t),Y_o=r(jS," \u2014 "),aq=n(jS,"A",{href:!0});var _gt=s(aq);K_o=r(_gt,"XLMRobertaTokenizer"),_gt.forEach(t),Z_o=r(jS," or "),nq=n(jS,"A",{href:!0});var bgt=s(nq);e2o=r(bgt,"XLMRobertaTokenizerFast"),bgt.forEach(t),o2o=r(jS," (XLM-RoBERTa model)"),jS.forEach(t),r2o=i(S),Ws=n(S,"LI",{});var DS=s(Ws);fde=n(DS,"STRONG",{});var vgt=s(fde);t2o=r(vgt,"xlm-roberta-xl"),vgt.forEach(t),a2o=r(DS," \u2014 "),sq=n(DS,"A",{href:!0});var Fgt=s(sq);n2o=r(Fgt,"RobertaTokenizer"),Fgt.forEach(t),s2o=r(DS," or "),lq=n(DS,"A",{href:!0});var Tgt=s(lq);l2o=r(Tgt,"RobertaTokenizerFast"),Tgt.forEach(t),i2o=r(DS," (XLM-RoBERTa-XL model)"),DS.forEach(t),d2o=i(S),Qs=n(S,"LI",{});var GS=s(Qs);gde=n(GS,"STRONG",{});var Mgt=s(gde);c2o=r(Mgt,"xlnet"),Mgt.forEach(t),m2o=r(GS," \u2014 "),iq=n(GS,"A",{href:!0});var Egt=s(iq);f2o=r(Egt,"XLNetTokenizer"),Egt.forEach(t),g2o=r(GS," or "),dq=n(GS,"A",{href:!0});var Cgt=s(dq);h2o=r(Cgt,"XLNetTokenizerFast"),Cgt.forEach(t),u2o=r(GS," (XLNet model)"),GS.forEach(t),p2o=i(S),Hs=n(S,"LI",{});var OS=s(Hs);hde=n(OS,"STRONG",{});var wgt=s(hde);_2o=r(wgt,"yoso"),wgt.forEach(t),b2o=r(OS," \u2014 "),cq=n(OS,"A",{href:!0});var Agt=s(cq);v2o=r(Agt,"AlbertTokenizer"),Agt.forEach(t),F2o=r(OS," or "),mq=n(OS,"A",{href:!0});var Lgt=s(mq);T2o=r(Lgt,"AlbertTokenizerFast"),Lgt.forEach(t),M2o=r(OS," (YOSO model)"),OS.forEach(t),S.forEach(t),E2o=i(ol),T(Ih.$$.fragment,ol),ol.forEach(t),C2o=i(el),Nh=n(el,"DIV",{class:!0});var ZWe=s(Nh);T(yy.$$.fragment,ZWe),w2o=i(ZWe),ude=n(ZWe,"P",{});var ygt=s(ude);A2o=r(ygt,"Register a new tokenizer in this mapping."),ygt.forEach(t),ZWe.forEach(t),el.forEach(t),KXe=i(m),Di=n(m,"H2",{class:!0});var eQe=s(Di);qh=n(eQe,"A",{id:!0,class:!0,href:!0});var xgt=s(qh);pde=n(xgt,"SPAN",{});var $gt=s(pde);T(xy.$$.fragment,$gt),$gt.forEach(t),xgt.forEach(t),L2o=i(eQe),_de=n(eQe,"SPAN",{});var kgt=s(_de);y2o=r(kgt,"AutoFeatureExtractor"),kgt.forEach(t),eQe.forEach(t),ZXe=i(m),xo=n(m,"DIV",{class:!0});var rl=s(xo);T($y.$$.fragment,rl),x2o=i(rl),ky=n(rl,"P",{});var oQe=s(ky);$2o=r(oQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),fq=n(oQe,"A",{href:!0});var Sgt=s(fq);k2o=r(Sgt,"AutoFeatureExtractor.from_pretrained()"),Sgt.forEach(t),S2o=r(oQe," class method."),oQe.forEach(t),R2o=i(rl),Sy=n(rl,"P",{});var rQe=s(Sy);P2o=r(rQe,"This class cannot be instantiated directly using "),bde=n(rQe,"CODE",{});var Rgt=s(bde);B2o=r(Rgt,"__init__()"),Rgt.forEach(t),I2o=r(rQe," (throws an error)."),rQe.forEach(t),N2o=i(rl),Ue=n(rl,"DIV",{class:!0});var na=s(Ue);T(Ry.$$.fragment,na),q2o=i(na),vde=n(na,"P",{});var Pgt=s(vde);j2o=r(Pgt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Pgt.forEach(t),D2o=i(na),Ba=n(na,"P",{});var b7=s(Ba);G2o=r(b7,"The feature extractor class to instantiate is selected based on the "),Fde=n(b7,"CODE",{});var Bgt=s(Fde);O2o=r(Bgt,"model_type"),Bgt.forEach(t),V2o=r(b7,` property of the config object
(either passed as an argument or loaded from `),Tde=n(b7,"CODE",{});var Igt=s(Tde);X2o=r(Igt,"pretrained_model_name_or_path"),Igt.forEach(t),z2o=r(b7,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mde=n(b7,"CODE",{});var Ngt=s(Mde);W2o=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),Q2o=r(b7,":"),b7.forEach(t),H2o=i(na),J=n(na,"UL",{});var K=s(J);jh=n(K,"LI",{});var $9e=s(jh);Ede=n($9e,"STRONG",{});var qgt=s(Ede);U2o=r(qgt,"beit"),qgt.forEach(t),J2o=r($9e," \u2014 "),gq=n($9e,"A",{href:!0});var jgt=s(gq);Y2o=r(jgt,"BeitFeatureExtractor"),jgt.forEach(t),K2o=r($9e," (BEiT model)"),$9e.forEach(t),Z2o=i(K),Dh=n(K,"LI",{});var k9e=s(Dh);Cde=n(k9e,"STRONG",{});var Dgt=s(Cde);ebo=r(Dgt,"clip"),Dgt.forEach(t),obo=r(k9e," \u2014 "),hq=n(k9e,"A",{href:!0});var Ggt=s(hq);rbo=r(Ggt,"CLIPFeatureExtractor"),Ggt.forEach(t),tbo=r(k9e," (CLIP model)"),k9e.forEach(t),abo=i(K),Gh=n(K,"LI",{});var S9e=s(Gh);wde=n(S9e,"STRONG",{});var Ogt=s(wde);nbo=r(Ogt,"convnext"),Ogt.forEach(t),sbo=r(S9e," \u2014 "),uq=n(S9e,"A",{href:!0});var Vgt=s(uq);lbo=r(Vgt,"ConvNextFeatureExtractor"),Vgt.forEach(t),ibo=r(S9e," (ConvNeXT model)"),S9e.forEach(t),dbo=i(K),Oh=n(K,"LI",{});var R9e=s(Oh);Ade=n(R9e,"STRONG",{});var Xgt=s(Ade);cbo=r(Xgt,"cvt"),Xgt.forEach(t),mbo=r(R9e," \u2014 "),pq=n(R9e,"A",{href:!0});var zgt=s(pq);fbo=r(zgt,"ConvNextFeatureExtractor"),zgt.forEach(t),gbo=r(R9e," (CvT model)"),R9e.forEach(t),hbo=i(K),Vh=n(K,"LI",{});var P9e=s(Vh);Lde=n(P9e,"STRONG",{});var Wgt=s(Lde);ubo=r(Wgt,"data2vec-audio"),Wgt.forEach(t),pbo=r(P9e," \u2014 "),_q=n(P9e,"A",{href:!0});var Qgt=s(_q);_bo=r(Qgt,"Wav2Vec2FeatureExtractor"),Qgt.forEach(t),bbo=r(P9e," (Data2VecAudio model)"),P9e.forEach(t),vbo=i(K),Xh=n(K,"LI",{});var B9e=s(Xh);yde=n(B9e,"STRONG",{});var Hgt=s(yde);Fbo=r(Hgt,"data2vec-vision"),Hgt.forEach(t),Tbo=r(B9e," \u2014 "),bq=n(B9e,"A",{href:!0});var Ugt=s(bq);Mbo=r(Ugt,"BeitFeatureExtractor"),Ugt.forEach(t),Ebo=r(B9e," (Data2VecVision model)"),B9e.forEach(t),Cbo=i(K),zh=n(K,"LI",{});var I9e=s(zh);xde=n(I9e,"STRONG",{});var Jgt=s(xde);wbo=r(Jgt,"deit"),Jgt.forEach(t),Abo=r(I9e," \u2014 "),vq=n(I9e,"A",{href:!0});var Ygt=s(vq);Lbo=r(Ygt,"DeiTFeatureExtractor"),Ygt.forEach(t),ybo=r(I9e," (DeiT model)"),I9e.forEach(t),xbo=i(K),Wh=n(K,"LI",{});var N9e=s(Wh);$de=n(N9e,"STRONG",{});var Kgt=s($de);$bo=r(Kgt,"detr"),Kgt.forEach(t),kbo=r(N9e," \u2014 "),Fq=n(N9e,"A",{href:!0});var Zgt=s(Fq);Sbo=r(Zgt,"DetrFeatureExtractor"),Zgt.forEach(t),Rbo=r(N9e," (DETR model)"),N9e.forEach(t),Pbo=i(K),Qh=n(K,"LI",{});var q9e=s(Qh);kde=n(q9e,"STRONG",{});var eht=s(kde);Bbo=r(eht,"dpt"),eht.forEach(t),Ibo=r(q9e," \u2014 "),Tq=n(q9e,"A",{href:!0});var oht=s(Tq);Nbo=r(oht,"DPTFeatureExtractor"),oht.forEach(t),qbo=r(q9e," (DPT model)"),q9e.forEach(t),jbo=i(K),Hh=n(K,"LI",{});var j9e=s(Hh);Sde=n(j9e,"STRONG",{});var rht=s(Sde);Dbo=r(rht,"flava"),rht.forEach(t),Gbo=r(j9e," \u2014 "),Mq=n(j9e,"A",{href:!0});var tht=s(Mq);Obo=r(tht,"FlavaFeatureExtractor"),tht.forEach(t),Vbo=r(j9e," (FLAVA model)"),j9e.forEach(t),Xbo=i(K),Uh=n(K,"LI",{});var D9e=s(Uh);Rde=n(D9e,"STRONG",{});var aht=s(Rde);zbo=r(aht,"glpn"),aht.forEach(t),Wbo=r(D9e," \u2014 "),Eq=n(D9e,"A",{href:!0});var nht=s(Eq);Qbo=r(nht,"GLPNFeatureExtractor"),nht.forEach(t),Hbo=r(D9e," (GLPN model)"),D9e.forEach(t),Ubo=i(K),Jh=n(K,"LI",{});var G9e=s(Jh);Pde=n(G9e,"STRONG",{});var sht=s(Pde);Jbo=r(sht,"groupvit"),sht.forEach(t),Ybo=r(G9e," \u2014 "),Cq=n(G9e,"A",{href:!0});var lht=s(Cq);Kbo=r(lht,"CLIPFeatureExtractor"),lht.forEach(t),Zbo=r(G9e," (GroupViT model)"),G9e.forEach(t),evo=i(K),Yh=n(K,"LI",{});var O9e=s(Yh);Bde=n(O9e,"STRONG",{});var iht=s(Bde);ovo=r(iht,"hubert"),iht.forEach(t),rvo=r(O9e," \u2014 "),wq=n(O9e,"A",{href:!0});var dht=s(wq);tvo=r(dht,"Wav2Vec2FeatureExtractor"),dht.forEach(t),avo=r(O9e," (Hubert model)"),O9e.forEach(t),nvo=i(K),Kh=n(K,"LI",{});var V9e=s(Kh);Ide=n(V9e,"STRONG",{});var cht=s(Ide);svo=r(cht,"imagegpt"),cht.forEach(t),lvo=r(V9e," \u2014 "),Aq=n(V9e,"A",{href:!0});var mht=s(Aq);ivo=r(mht,"ImageGPTFeatureExtractor"),mht.forEach(t),dvo=r(V9e," (ImageGPT model)"),V9e.forEach(t),cvo=i(K),Zh=n(K,"LI",{});var X9e=s(Zh);Nde=n(X9e,"STRONG",{});var fht=s(Nde);mvo=r(fht,"layoutlmv2"),fht.forEach(t),fvo=r(X9e," \u2014 "),Lq=n(X9e,"A",{href:!0});var ght=s(Lq);gvo=r(ght,"LayoutLMv2FeatureExtractor"),ght.forEach(t),hvo=r(X9e," (LayoutLMv2 model)"),X9e.forEach(t),uvo=i(K),eu=n(K,"LI",{});var z9e=s(eu);qde=n(z9e,"STRONG",{});var hht=s(qde);pvo=r(hht,"layoutlmv3"),hht.forEach(t),_vo=r(z9e," \u2014 "),yq=n(z9e,"A",{href:!0});var uht=s(yq);bvo=r(uht,"LayoutLMv3FeatureExtractor"),uht.forEach(t),vvo=r(z9e," (LayoutLMv3 model)"),z9e.forEach(t),Fvo=i(K),ou=n(K,"LI",{});var W9e=s(ou);jde=n(W9e,"STRONG",{});var pht=s(jde);Tvo=r(pht,"levit"),pht.forEach(t),Mvo=r(W9e," \u2014 "),xq=n(W9e,"A",{href:!0});var _ht=s(xq);Evo=r(_ht,"LevitFeatureExtractor"),_ht.forEach(t),Cvo=r(W9e," (LeViT model)"),W9e.forEach(t),wvo=i(K),ru=n(K,"LI",{});var Q9e=s(ru);Dde=n(Q9e,"STRONG",{});var bht=s(Dde);Avo=r(bht,"maskformer"),bht.forEach(t),Lvo=r(Q9e," \u2014 "),$q=n(Q9e,"A",{href:!0});var vht=s($q);yvo=r(vht,"MaskFormerFeatureExtractor"),vht.forEach(t),xvo=r(Q9e," (MaskFormer model)"),Q9e.forEach(t),$vo=i(K),tu=n(K,"LI",{});var H9e=s(tu);Gde=n(H9e,"STRONG",{});var Fht=s(Gde);kvo=r(Fht,"mctct"),Fht.forEach(t),Svo=r(H9e," \u2014 "),kq=n(H9e,"A",{href:!0});var Tht=s(kq);Rvo=r(Tht,"MCTCTFeatureExtractor"),Tht.forEach(t),Pvo=r(H9e," (M-CTC-T model)"),H9e.forEach(t),Bvo=i(K),au=n(K,"LI",{});var U9e=s(au);Ode=n(U9e,"STRONG",{});var Mht=s(Ode);Ivo=r(Mht,"mobilevit"),Mht.forEach(t),Nvo=r(U9e," \u2014 "),Sq=n(U9e,"A",{href:!0});var Eht=s(Sq);qvo=r(Eht,"MobileViTFeatureExtractor"),Eht.forEach(t),jvo=r(U9e," (MobileViT model)"),U9e.forEach(t),Dvo=i(K),nu=n(K,"LI",{});var J9e=s(nu);Vde=n(J9e,"STRONG",{});var Cht=s(Vde);Gvo=r(Cht,"owlvit"),Cht.forEach(t),Ovo=r(J9e," \u2014 "),Rq=n(J9e,"A",{href:!0});var wht=s(Rq);Vvo=r(wht,"OwlViTFeatureExtractor"),wht.forEach(t),Xvo=r(J9e," (OWL-ViT model)"),J9e.forEach(t),zvo=i(K),su=n(K,"LI",{});var Y9e=s(su);Xde=n(Y9e,"STRONG",{});var Aht=s(Xde);Wvo=r(Aht,"perceiver"),Aht.forEach(t),Qvo=r(Y9e," \u2014 "),Pq=n(Y9e,"A",{href:!0});var Lht=s(Pq);Hvo=r(Lht,"PerceiverFeatureExtractor"),Lht.forEach(t),Uvo=r(Y9e," (Perceiver model)"),Y9e.forEach(t),Jvo=i(K),lu=n(K,"LI",{});var K9e=s(lu);zde=n(K9e,"STRONG",{});var yht=s(zde);Yvo=r(yht,"poolformer"),yht.forEach(t),Kvo=r(K9e," \u2014 "),Bq=n(K9e,"A",{href:!0});var xht=s(Bq);Zvo=r(xht,"PoolFormerFeatureExtractor"),xht.forEach(t),e1o=r(K9e," (PoolFormer model)"),K9e.forEach(t),o1o=i(K),iu=n(K,"LI",{});var Z9e=s(iu);Wde=n(Z9e,"STRONG",{});var $ht=s(Wde);r1o=r($ht,"regnet"),$ht.forEach(t),t1o=r(Z9e," \u2014 "),Iq=n(Z9e,"A",{href:!0});var kht=s(Iq);a1o=r(kht,"ConvNextFeatureExtractor"),kht.forEach(t),n1o=r(Z9e," (RegNet model)"),Z9e.forEach(t),s1o=i(K),du=n(K,"LI",{});var exe=s(du);Qde=n(exe,"STRONG",{});var Sht=s(Qde);l1o=r(Sht,"resnet"),Sht.forEach(t),i1o=r(exe," \u2014 "),Nq=n(exe,"A",{href:!0});var Rht=s(Nq);d1o=r(Rht,"ConvNextFeatureExtractor"),Rht.forEach(t),c1o=r(exe," (ResNet model)"),exe.forEach(t),m1o=i(K),cu=n(K,"LI",{});var oxe=s(cu);Hde=n(oxe,"STRONG",{});var Pht=s(Hde);f1o=r(Pht,"segformer"),Pht.forEach(t),g1o=r(oxe," \u2014 "),qq=n(oxe,"A",{href:!0});var Bht=s(qq);h1o=r(Bht,"SegformerFeatureExtractor"),Bht.forEach(t),u1o=r(oxe," (SegFormer model)"),oxe.forEach(t),p1o=i(K),mu=n(K,"LI",{});var rxe=s(mu);Ude=n(rxe,"STRONG",{});var Iht=s(Ude);_1o=r(Iht,"speech_to_text"),Iht.forEach(t),b1o=r(rxe," \u2014 "),jq=n(rxe,"A",{href:!0});var Nht=s(jq);v1o=r(Nht,"Speech2TextFeatureExtractor"),Nht.forEach(t),F1o=r(rxe," (Speech2Text model)"),rxe.forEach(t),T1o=i(K),fu=n(K,"LI",{});var txe=s(fu);Jde=n(txe,"STRONG",{});var qht=s(Jde);M1o=r(qht,"swin"),qht.forEach(t),E1o=r(txe," \u2014 "),Dq=n(txe,"A",{href:!0});var jht=s(Dq);C1o=r(jht,"ViTFeatureExtractor"),jht.forEach(t),w1o=r(txe," (Swin Transformer model)"),txe.forEach(t),A1o=i(K),gu=n(K,"LI",{});var axe=s(gu);Yde=n(axe,"STRONG",{});var Dht=s(Yde);L1o=r(Dht,"van"),Dht.forEach(t),y1o=r(axe," \u2014 "),Gq=n(axe,"A",{href:!0});var Ght=s(Gq);x1o=r(Ght,"ConvNextFeatureExtractor"),Ght.forEach(t),$1o=r(axe," (VAN model)"),axe.forEach(t),k1o=i(K),hu=n(K,"LI",{});var nxe=s(hu);Kde=n(nxe,"STRONG",{});var Oht=s(Kde);S1o=r(Oht,"vilt"),Oht.forEach(t),R1o=r(nxe," \u2014 "),Oq=n(nxe,"A",{href:!0});var Vht=s(Oq);P1o=r(Vht,"ViltFeatureExtractor"),Vht.forEach(t),B1o=r(nxe," (ViLT model)"),nxe.forEach(t),I1o=i(K),uu=n(K,"LI",{});var sxe=s(uu);Zde=n(sxe,"STRONG",{});var Xht=s(Zde);N1o=r(Xht,"vit"),Xht.forEach(t),q1o=r(sxe," \u2014 "),Vq=n(sxe,"A",{href:!0});var zht=s(Vq);j1o=r(zht,"ViTFeatureExtractor"),zht.forEach(t),D1o=r(sxe," (ViT model)"),sxe.forEach(t),G1o=i(K),pu=n(K,"LI",{});var lxe=s(pu);ece=n(lxe,"STRONG",{});var Wht=s(ece);O1o=r(Wht,"vit_mae"),Wht.forEach(t),V1o=r(lxe," \u2014 "),Xq=n(lxe,"A",{href:!0});var Qht=s(Xq);X1o=r(Qht,"ViTFeatureExtractor"),Qht.forEach(t),z1o=r(lxe," (ViTMAE model)"),lxe.forEach(t),W1o=i(K),_u=n(K,"LI",{});var ixe=s(_u);oce=n(ixe,"STRONG",{});var Hht=s(oce);Q1o=r(Hht,"wav2vec2"),Hht.forEach(t),H1o=r(ixe," \u2014 "),zq=n(ixe,"A",{href:!0});var Uht=s(zq);U1o=r(Uht,"Wav2Vec2FeatureExtractor"),Uht.forEach(t),J1o=r(ixe," (Wav2Vec2 model)"),ixe.forEach(t),Y1o=i(K),bu=n(K,"LI",{});var dxe=s(bu);rce=n(dxe,"STRONG",{});var Jht=s(rce);K1o=r(Jht,"wav2vec2-conformer"),Jht.forEach(t),Z1o=r(dxe," \u2014 "),Wq=n(dxe,"A",{href:!0});var Yht=s(Wq);eFo=r(Yht,"Wav2Vec2FeatureExtractor"),Yht.forEach(t),oFo=r(dxe," (Wav2Vec2-Conformer model)"),dxe.forEach(t),rFo=i(K),vu=n(K,"LI",{});var cxe=s(vu);tce=n(cxe,"STRONG",{});var Kht=s(tce);tFo=r(Kht,"yolos"),Kht.forEach(t),aFo=r(cxe," \u2014 "),Qq=n(cxe,"A",{href:!0});var Zht=s(Qq);nFo=r(Zht,"YolosFeatureExtractor"),Zht.forEach(t),sFo=r(cxe," (YOLOS model)"),cxe.forEach(t),K.forEach(t),lFo=i(na),T(Fu.$$.fragment,na),iFo=i(na),T(Tu.$$.fragment,na),na.forEach(t),dFo=i(rl),Mu=n(rl,"DIV",{class:!0});var tQe=s(Mu);T(Py.$$.fragment,tQe),cFo=i(tQe),ace=n(tQe,"P",{});var eut=s(ace);mFo=r(eut,"Register a new feature extractor for this class."),eut.forEach(t),tQe.forEach(t),rl.forEach(t),eze=i(m),Gi=n(m,"H2",{class:!0});var aQe=s(Gi);Eu=n(aQe,"A",{id:!0,class:!0,href:!0});var out=s(Eu);nce=n(out,"SPAN",{});var rut=s(nce);T(By.$$.fragment,rut),rut.forEach(t),out.forEach(t),fFo=i(aQe),sce=n(aQe,"SPAN",{});var tut=s(sce);gFo=r(tut,"AutoProcessor"),tut.forEach(t),aQe.forEach(t),oze=i(m),$o=n(m,"DIV",{class:!0});var tl=s($o);T(Iy.$$.fragment,tl),hFo=i(tl),Ny=n(tl,"P",{});var nQe=s(Ny);uFo=r(nQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Hq=n(nQe,"A",{href:!0});var aut=s(Hq);pFo=r(aut,"AutoProcessor.from_pretrained()"),aut.forEach(t),_Fo=r(nQe," class method."),nQe.forEach(t),bFo=i(tl),qy=n(tl,"P",{});var sQe=s(qy);vFo=r(sQe,"This class cannot be instantiated directly using "),lce=n(sQe,"CODE",{});var nut=s(lce);FFo=r(nut,"__init__()"),nut.forEach(t),TFo=r(sQe," (throws an error)."),sQe.forEach(t),MFo=i(tl),Je=n(tl,"DIV",{class:!0});var sa=s(Je);T(jy.$$.fragment,sa),EFo=i(sa),ice=n(sa,"P",{});var sut=s(ice);CFo=r(sut,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),sut.forEach(t),wFo=i(sa),Oi=n(sa,"P",{});var tte=s(Oi);AFo=r(tte,"The processor class to instantiate is selected based on the "),dce=n(tte,"CODE",{});var lut=s(dce);LFo=r(lut,"model_type"),lut.forEach(t),yFo=r(tte,` property of the config object (either
passed as an argument or loaded from `),cce=n(tte,"CODE",{});var iut=s(cce);xFo=r(iut,"pretrained_model_name_or_path"),iut.forEach(t),$Fo=r(tte," if possible):"),tte.forEach(t),kFo=i(sa),me=n(sa,"UL",{});var pe=s(me);Cu=n(pe,"LI",{});var mxe=s(Cu);mce=n(mxe,"STRONG",{});var dut=s(mce);SFo=r(dut,"clip"),dut.forEach(t),RFo=r(mxe," \u2014 "),Uq=n(mxe,"A",{href:!0});var cut=s(Uq);PFo=r(cut,"CLIPProcessor"),cut.forEach(t),BFo=r(mxe," (CLIP model)"),mxe.forEach(t),IFo=i(pe),wu=n(pe,"LI",{});var fxe=s(wu);fce=n(fxe,"STRONG",{});var mut=s(fce);NFo=r(mut,"flava"),mut.forEach(t),qFo=r(fxe," \u2014 "),Jq=n(fxe,"A",{href:!0});var fut=s(Jq);jFo=r(fut,"FlavaProcessor"),fut.forEach(t),DFo=r(fxe," (FLAVA model)"),fxe.forEach(t),GFo=i(pe),Au=n(pe,"LI",{});var gxe=s(Au);gce=n(gxe,"STRONG",{});var gut=s(gce);OFo=r(gut,"groupvit"),gut.forEach(t),VFo=r(gxe," \u2014 "),Yq=n(gxe,"A",{href:!0});var hut=s(Yq);XFo=r(hut,"CLIPProcessor"),hut.forEach(t),zFo=r(gxe," (GroupViT model)"),gxe.forEach(t),WFo=i(pe),Lu=n(pe,"LI",{});var hxe=s(Lu);hce=n(hxe,"STRONG",{});var uut=s(hce);QFo=r(uut,"layoutlmv2"),uut.forEach(t),HFo=r(hxe," \u2014 "),Kq=n(hxe,"A",{href:!0});var put=s(Kq);UFo=r(put,"LayoutLMv2Processor"),put.forEach(t),JFo=r(hxe," (LayoutLMv2 model)"),hxe.forEach(t),YFo=i(pe),yu=n(pe,"LI",{});var uxe=s(yu);uce=n(uxe,"STRONG",{});var _ut=s(uce);KFo=r(_ut,"layoutlmv3"),_ut.forEach(t),ZFo=r(uxe," \u2014 "),Zq=n(uxe,"A",{href:!0});var but=s(Zq);eTo=r(but,"LayoutLMv3Processor"),but.forEach(t),oTo=r(uxe," (LayoutLMv3 model)"),uxe.forEach(t),rTo=i(pe),xu=n(pe,"LI",{});var pxe=s(xu);pce=n(pxe,"STRONG",{});var vut=s(pce);tTo=r(vut,"layoutxlm"),vut.forEach(t),aTo=r(pxe," \u2014 "),ej=n(pxe,"A",{href:!0});var Fut=s(ej);nTo=r(Fut,"LayoutXLMProcessor"),Fut.forEach(t),sTo=r(pxe," (LayoutXLM model)"),pxe.forEach(t),lTo=i(pe),$u=n(pe,"LI",{});var _xe=s($u);_ce=n(_xe,"STRONG",{});var Tut=s(_ce);iTo=r(Tut,"owlvit"),Tut.forEach(t),dTo=r(_xe," \u2014 "),oj=n(_xe,"A",{href:!0});var Mut=s(oj);cTo=r(Mut,"OwlViTProcessor"),Mut.forEach(t),mTo=r(_xe," (OWL-ViT model)"),_xe.forEach(t),fTo=i(pe),ku=n(pe,"LI",{});var bxe=s(ku);bce=n(bxe,"STRONG",{});var Eut=s(bce);gTo=r(Eut,"sew"),Eut.forEach(t),hTo=r(bxe," \u2014 "),rj=n(bxe,"A",{href:!0});var Cut=s(rj);uTo=r(Cut,"Wav2Vec2Processor"),Cut.forEach(t),pTo=r(bxe," (SEW model)"),bxe.forEach(t),_To=i(pe),Su=n(pe,"LI",{});var vxe=s(Su);vce=n(vxe,"STRONG",{});var wut=s(vce);bTo=r(wut,"sew-d"),wut.forEach(t),vTo=r(vxe," \u2014 "),tj=n(vxe,"A",{href:!0});var Aut=s(tj);FTo=r(Aut,"Wav2Vec2Processor"),Aut.forEach(t),TTo=r(vxe," (SEW-D model)"),vxe.forEach(t),MTo=i(pe),Ru=n(pe,"LI",{});var Fxe=s(Ru);Fce=n(Fxe,"STRONG",{});var Lut=s(Fce);ETo=r(Lut,"speech_to_text"),Lut.forEach(t),CTo=r(Fxe," \u2014 "),aj=n(Fxe,"A",{href:!0});var yut=s(aj);wTo=r(yut,"Speech2TextProcessor"),yut.forEach(t),ATo=r(Fxe," (Speech2Text model)"),Fxe.forEach(t),LTo=i(pe),Pu=n(pe,"LI",{});var Txe=s(Pu);Tce=n(Txe,"STRONG",{});var xut=s(Tce);yTo=r(xut,"speech_to_text_2"),xut.forEach(t),xTo=r(Txe," \u2014 "),nj=n(Txe,"A",{href:!0});var $ut=s(nj);$To=r($ut,"Speech2Text2Processor"),$ut.forEach(t),kTo=r(Txe," (Speech2Text2 model)"),Txe.forEach(t),STo=i(pe),Bu=n(pe,"LI",{});var Mxe=s(Bu);Mce=n(Mxe,"STRONG",{});var kut=s(Mce);RTo=r(kut,"trocr"),kut.forEach(t),PTo=r(Mxe," \u2014 "),sj=n(Mxe,"A",{href:!0});var Sut=s(sj);BTo=r(Sut,"TrOCRProcessor"),Sut.forEach(t),ITo=r(Mxe," (TrOCR model)"),Mxe.forEach(t),NTo=i(pe),Iu=n(pe,"LI",{});var Exe=s(Iu);Ece=n(Exe,"STRONG",{});var Rut=s(Ece);qTo=r(Rut,"unispeech"),Rut.forEach(t),jTo=r(Exe," \u2014 "),lj=n(Exe,"A",{href:!0});var Put=s(lj);DTo=r(Put,"Wav2Vec2Processor"),Put.forEach(t),GTo=r(Exe," (UniSpeech model)"),Exe.forEach(t),OTo=i(pe),Nu=n(pe,"LI",{});var Cxe=s(Nu);Cce=n(Cxe,"STRONG",{});var But=s(Cce);VTo=r(But,"unispeech-sat"),But.forEach(t),XTo=r(Cxe," \u2014 "),ij=n(Cxe,"A",{href:!0});var Iut=s(ij);zTo=r(Iut,"Wav2Vec2Processor"),Iut.forEach(t),WTo=r(Cxe," (UniSpeechSat model)"),Cxe.forEach(t),QTo=i(pe),qu=n(pe,"LI",{});var wxe=s(qu);wce=n(wxe,"STRONG",{});var Nut=s(wce);HTo=r(Nut,"vilt"),Nut.forEach(t),UTo=r(wxe," \u2014 "),dj=n(wxe,"A",{href:!0});var qut=s(dj);JTo=r(qut,"ViltProcessor"),qut.forEach(t),YTo=r(wxe," (ViLT model)"),wxe.forEach(t),KTo=i(pe),ju=n(pe,"LI",{});var Axe=s(ju);Ace=n(Axe,"STRONG",{});var jut=s(Ace);ZTo=r(jut,"vision-text-dual-encoder"),jut.forEach(t),eMo=r(Axe," \u2014 "),cj=n(Axe,"A",{href:!0});var Dut=s(cj);oMo=r(Dut,"VisionTextDualEncoderProcessor"),Dut.forEach(t),rMo=r(Axe," (VisionTextDualEncoder model)"),Axe.forEach(t),tMo=i(pe),Du=n(pe,"LI",{});var Lxe=s(Du);Lce=n(Lxe,"STRONG",{});var Gut=s(Lce);aMo=r(Gut,"wav2vec2"),Gut.forEach(t),nMo=r(Lxe," \u2014 "),mj=n(Lxe,"A",{href:!0});var Out=s(mj);sMo=r(Out,"Wav2Vec2Processor"),Out.forEach(t),lMo=r(Lxe," (Wav2Vec2 model)"),Lxe.forEach(t),iMo=i(pe),Gu=n(pe,"LI",{});var yxe=s(Gu);yce=n(yxe,"STRONG",{});var Vut=s(yce);dMo=r(Vut,"wav2vec2-conformer"),Vut.forEach(t),cMo=r(yxe," \u2014 "),fj=n(yxe,"A",{href:!0});var Xut=s(fj);mMo=r(Xut,"Wav2Vec2Processor"),Xut.forEach(t),fMo=r(yxe," (Wav2Vec2-Conformer model)"),yxe.forEach(t),gMo=i(pe),Ou=n(pe,"LI",{});var xxe=s(Ou);xce=n(xxe,"STRONG",{});var zut=s(xce);hMo=r(zut,"wavlm"),zut.forEach(t),uMo=r(xxe," \u2014 "),gj=n(xxe,"A",{href:!0});var Wut=s(gj);pMo=r(Wut,"Wav2Vec2Processor"),Wut.forEach(t),_Mo=r(xxe," (WavLM model)"),xxe.forEach(t),pe.forEach(t),bMo=i(sa),T(Vu.$$.fragment,sa),vMo=i(sa),T(Xu.$$.fragment,sa),sa.forEach(t),FMo=i(tl),zu=n(tl,"DIV",{class:!0});var lQe=s(zu);T(Dy.$$.fragment,lQe),TMo=i(lQe),$ce=n(lQe,"P",{});var Qut=s($ce);MMo=r(Qut,"Register a new processor for this class."),Qut.forEach(t),lQe.forEach(t),tl.forEach(t),rze=i(m),Vi=n(m,"H2",{class:!0});var iQe=s(Vi);Wu=n(iQe,"A",{id:!0,class:!0,href:!0});var Hut=s(Wu);kce=n(Hut,"SPAN",{});var Uut=s(kce);T(Gy.$$.fragment,Uut),Uut.forEach(t),Hut.forEach(t),EMo=i(iQe),Sce=n(iQe,"SPAN",{});var Jut=s(Sce);CMo=r(Jut,"AutoModel"),Jut.forEach(t),iQe.forEach(t),tze=i(m),ko=n(m,"DIV",{class:!0});var al=s(ko);T(Oy.$$.fragment,al),wMo=i(al),Xi=n(al,"P",{});var ate=s(Xi);AMo=r(ate,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hj=n(ate,"A",{href:!0});var Yut=s(hj);LMo=r(Yut,"from_pretrained()"),Yut.forEach(t),yMo=r(ate," class method or the "),uj=n(ate,"A",{href:!0});var Kut=s(uj);xMo=r(Kut,"from_config()"),Kut.forEach(t),$Mo=r(ate,` class
method.`),ate.forEach(t),kMo=i(al),Vy=n(al,"P",{});var dQe=s(Vy);SMo=r(dQe,"This class cannot be instantiated directly using "),Rce=n(dQe,"CODE",{});var Zut=s(Rce);RMo=r(Zut,"__init__()"),Zut.forEach(t),PMo=r(dQe," (throws an error)."),dQe.forEach(t),BMo=i(al),it=n(al,"DIV",{class:!0});var v7=s(it);T(Xy.$$.fragment,v7),IMo=i(v7),Pce=n(v7,"P",{});var ept=s(Pce);NMo=r(ept,"Instantiates one of the base model classes of the library from a configuration."),ept.forEach(t),qMo=i(v7),zi=n(v7,"P",{});var nte=s(zi);jMo=r(nte,`Note:
Loading a model from its configuration file does `),Bce=n(nte,"STRONG",{});var opt=s(Bce);DMo=r(opt,"not"),opt.forEach(t),GMo=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),pj=n(nte,"A",{href:!0});var rpt=s(pj);OMo=r(rpt,"from_pretrained()"),rpt.forEach(t),VMo=r(nte," to load the model weights."),nte.forEach(t),XMo=i(v7),T(Qu.$$.fragment,v7),v7.forEach(t),zMo=i(al),Ye=n(al,"DIV",{class:!0});var la=s(Ye);T(zy.$$.fragment,la),WMo=i(la),Ice=n(la,"P",{});var tpt=s(Ice);QMo=r(tpt,"Instantiate one of the base model classes of the library from a pretrained model."),tpt.forEach(t),HMo=i(la),Ia=n(la,"P",{});var F7=s(Ia);UMo=r(F7,"The model class to instantiate is selected based on the "),Nce=n(F7,"CODE",{});var apt=s(Nce);JMo=r(apt,"model_type"),apt.forEach(t),YMo=r(F7,` property of the config object (either
passed as an argument or loaded from `),qce=n(F7,"CODE",{});var npt=s(qce);KMo=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),ZMo=r(F7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=n(F7,"CODE",{});var spt=s(jce);e4o=r(spt,"pretrained_model_name_or_path"),spt.forEach(t),o4o=r(F7,":"),F7.forEach(t),r4o=i(la),y=n(la,"UL",{});var x=s(y);Hu=n(x,"LI",{});var $xe=s(Hu);Dce=n($xe,"STRONG",{});var lpt=s(Dce);t4o=r(lpt,"albert"),lpt.forEach(t),a4o=r($xe," \u2014 "),_j=n($xe,"A",{href:!0});var ipt=s(_j);n4o=r(ipt,"AlbertModel"),ipt.forEach(t),s4o=r($xe," (ALBERT model)"),$xe.forEach(t),l4o=i(x),Uu=n(x,"LI",{});var kxe=s(Uu);Gce=n(kxe,"STRONG",{});var dpt=s(Gce);i4o=r(dpt,"bart"),dpt.forEach(t),d4o=r(kxe," \u2014 "),bj=n(kxe,"A",{href:!0});var cpt=s(bj);c4o=r(cpt,"BartModel"),cpt.forEach(t),m4o=r(kxe," (BART model)"),kxe.forEach(t),f4o=i(x),Ju=n(x,"LI",{});var Sxe=s(Ju);Oce=n(Sxe,"STRONG",{});var mpt=s(Oce);g4o=r(mpt,"beit"),mpt.forEach(t),h4o=r(Sxe," \u2014 "),vj=n(Sxe,"A",{href:!0});var fpt=s(vj);u4o=r(fpt,"BeitModel"),fpt.forEach(t),p4o=r(Sxe," (BEiT model)"),Sxe.forEach(t),_4o=i(x),Yu=n(x,"LI",{});var Rxe=s(Yu);Vce=n(Rxe,"STRONG",{});var gpt=s(Vce);b4o=r(gpt,"bert"),gpt.forEach(t),v4o=r(Rxe," \u2014 "),Fj=n(Rxe,"A",{href:!0});var hpt=s(Fj);F4o=r(hpt,"BertModel"),hpt.forEach(t),T4o=r(Rxe," (BERT model)"),Rxe.forEach(t),M4o=i(x),Ku=n(x,"LI",{});var Pxe=s(Ku);Xce=n(Pxe,"STRONG",{});var upt=s(Xce);E4o=r(upt,"bert-generation"),upt.forEach(t),C4o=r(Pxe," \u2014 "),Tj=n(Pxe,"A",{href:!0});var ppt=s(Tj);w4o=r(ppt,"BertGenerationEncoder"),ppt.forEach(t),A4o=r(Pxe," (Bert Generation model)"),Pxe.forEach(t),L4o=i(x),Zu=n(x,"LI",{});var Bxe=s(Zu);zce=n(Bxe,"STRONG",{});var _pt=s(zce);y4o=r(_pt,"big_bird"),_pt.forEach(t),x4o=r(Bxe," \u2014 "),Mj=n(Bxe,"A",{href:!0});var bpt=s(Mj);$4o=r(bpt,"BigBirdModel"),bpt.forEach(t),k4o=r(Bxe," (BigBird model)"),Bxe.forEach(t),S4o=i(x),ep=n(x,"LI",{});var Ixe=s(ep);Wce=n(Ixe,"STRONG",{});var vpt=s(Wce);R4o=r(vpt,"bigbird_pegasus"),vpt.forEach(t),P4o=r(Ixe," \u2014 "),Ej=n(Ixe,"A",{href:!0});var Fpt=s(Ej);B4o=r(Fpt,"BigBirdPegasusModel"),Fpt.forEach(t),I4o=r(Ixe," (BigBird-Pegasus model)"),Ixe.forEach(t),N4o=i(x),op=n(x,"LI",{});var Nxe=s(op);Qce=n(Nxe,"STRONG",{});var Tpt=s(Qce);q4o=r(Tpt,"blenderbot"),Tpt.forEach(t),j4o=r(Nxe," \u2014 "),Cj=n(Nxe,"A",{href:!0});var Mpt=s(Cj);D4o=r(Mpt,"BlenderbotModel"),Mpt.forEach(t),G4o=r(Nxe," (Blenderbot model)"),Nxe.forEach(t),O4o=i(x),rp=n(x,"LI",{});var qxe=s(rp);Hce=n(qxe,"STRONG",{});var Ept=s(Hce);V4o=r(Ept,"blenderbot-small"),Ept.forEach(t),X4o=r(qxe," \u2014 "),wj=n(qxe,"A",{href:!0});var Cpt=s(wj);z4o=r(Cpt,"BlenderbotSmallModel"),Cpt.forEach(t),W4o=r(qxe," (BlenderbotSmall model)"),qxe.forEach(t),Q4o=i(x),tp=n(x,"LI",{});var jxe=s(tp);Uce=n(jxe,"STRONG",{});var wpt=s(Uce);H4o=r(wpt,"bloom"),wpt.forEach(t),U4o=r(jxe," \u2014 "),Aj=n(jxe,"A",{href:!0});var Apt=s(Aj);J4o=r(Apt,"BloomModel"),Apt.forEach(t),Y4o=r(jxe," (BLOOM model)"),jxe.forEach(t),K4o=i(x),ap=n(x,"LI",{});var Dxe=s(ap);Jce=n(Dxe,"STRONG",{});var Lpt=s(Jce);Z4o=r(Lpt,"camembert"),Lpt.forEach(t),eEo=r(Dxe," \u2014 "),Lj=n(Dxe,"A",{href:!0});var ypt=s(Lj);oEo=r(ypt,"CamembertModel"),ypt.forEach(t),rEo=r(Dxe," (CamemBERT model)"),Dxe.forEach(t),tEo=i(x),np=n(x,"LI",{});var Gxe=s(np);Yce=n(Gxe,"STRONG",{});var xpt=s(Yce);aEo=r(xpt,"canine"),xpt.forEach(t),nEo=r(Gxe," \u2014 "),yj=n(Gxe,"A",{href:!0});var $pt=s(yj);sEo=r($pt,"CanineModel"),$pt.forEach(t),lEo=r(Gxe," (CANINE model)"),Gxe.forEach(t),iEo=i(x),sp=n(x,"LI",{});var Oxe=s(sp);Kce=n(Oxe,"STRONG",{});var kpt=s(Kce);dEo=r(kpt,"clip"),kpt.forEach(t),cEo=r(Oxe," \u2014 "),xj=n(Oxe,"A",{href:!0});var Spt=s(xj);mEo=r(Spt,"CLIPModel"),Spt.forEach(t),fEo=r(Oxe," (CLIP model)"),Oxe.forEach(t),gEo=i(x),lp=n(x,"LI",{});var Vxe=s(lp);Zce=n(Vxe,"STRONG",{});var Rpt=s(Zce);hEo=r(Rpt,"codegen"),Rpt.forEach(t),uEo=r(Vxe," \u2014 "),$j=n(Vxe,"A",{href:!0});var Ppt=s($j);pEo=r(Ppt,"CodeGenModel"),Ppt.forEach(t),_Eo=r(Vxe," (CodeGen model)"),Vxe.forEach(t),bEo=i(x),ip=n(x,"LI",{});var Xxe=s(ip);eme=n(Xxe,"STRONG",{});var Bpt=s(eme);vEo=r(Bpt,"convbert"),Bpt.forEach(t),FEo=r(Xxe," \u2014 "),kj=n(Xxe,"A",{href:!0});var Ipt=s(kj);TEo=r(Ipt,"ConvBertModel"),Ipt.forEach(t),MEo=r(Xxe," (ConvBERT model)"),Xxe.forEach(t),EEo=i(x),dp=n(x,"LI",{});var zxe=s(dp);ome=n(zxe,"STRONG",{});var Npt=s(ome);CEo=r(Npt,"convnext"),Npt.forEach(t),wEo=r(zxe," \u2014 "),Sj=n(zxe,"A",{href:!0});var qpt=s(Sj);AEo=r(qpt,"ConvNextModel"),qpt.forEach(t),LEo=r(zxe," (ConvNeXT model)"),zxe.forEach(t),yEo=i(x),cp=n(x,"LI",{});var Wxe=s(cp);rme=n(Wxe,"STRONG",{});var jpt=s(rme);xEo=r(jpt,"ctrl"),jpt.forEach(t),$Eo=r(Wxe," \u2014 "),Rj=n(Wxe,"A",{href:!0});var Dpt=s(Rj);kEo=r(Dpt,"CTRLModel"),Dpt.forEach(t),SEo=r(Wxe," (CTRL model)"),Wxe.forEach(t),REo=i(x),mp=n(x,"LI",{});var Qxe=s(mp);tme=n(Qxe,"STRONG",{});var Gpt=s(tme);PEo=r(Gpt,"cvt"),Gpt.forEach(t),BEo=r(Qxe," \u2014 "),Pj=n(Qxe,"A",{href:!0});var Opt=s(Pj);IEo=r(Opt,"CvtModel"),Opt.forEach(t),NEo=r(Qxe," (CvT model)"),Qxe.forEach(t),qEo=i(x),fp=n(x,"LI",{});var Hxe=s(fp);ame=n(Hxe,"STRONG",{});var Vpt=s(ame);jEo=r(Vpt,"data2vec-audio"),Vpt.forEach(t),DEo=r(Hxe," \u2014 "),Bj=n(Hxe,"A",{href:!0});var Xpt=s(Bj);GEo=r(Xpt,"Data2VecAudioModel"),Xpt.forEach(t),OEo=r(Hxe," (Data2VecAudio model)"),Hxe.forEach(t),VEo=i(x),gp=n(x,"LI",{});var Uxe=s(gp);nme=n(Uxe,"STRONG",{});var zpt=s(nme);XEo=r(zpt,"data2vec-text"),zpt.forEach(t),zEo=r(Uxe," \u2014 "),Ij=n(Uxe,"A",{href:!0});var Wpt=s(Ij);WEo=r(Wpt,"Data2VecTextModel"),Wpt.forEach(t),QEo=r(Uxe," (Data2VecText model)"),Uxe.forEach(t),HEo=i(x),hp=n(x,"LI",{});var Jxe=s(hp);sme=n(Jxe,"STRONG",{});var Qpt=s(sme);UEo=r(Qpt,"data2vec-vision"),Qpt.forEach(t),JEo=r(Jxe," \u2014 "),Nj=n(Jxe,"A",{href:!0});var Hpt=s(Nj);YEo=r(Hpt,"Data2VecVisionModel"),Hpt.forEach(t),KEo=r(Jxe," (Data2VecVision model)"),Jxe.forEach(t),ZEo=i(x),up=n(x,"LI",{});var Yxe=s(up);lme=n(Yxe,"STRONG",{});var Upt=s(lme);eCo=r(Upt,"deberta"),Upt.forEach(t),oCo=r(Yxe," \u2014 "),qj=n(Yxe,"A",{href:!0});var Jpt=s(qj);rCo=r(Jpt,"DebertaModel"),Jpt.forEach(t),tCo=r(Yxe," (DeBERTa model)"),Yxe.forEach(t),aCo=i(x),pp=n(x,"LI",{});var Kxe=s(pp);ime=n(Kxe,"STRONG",{});var Ypt=s(ime);nCo=r(Ypt,"deberta-v2"),Ypt.forEach(t),sCo=r(Kxe," \u2014 "),jj=n(Kxe,"A",{href:!0});var Kpt=s(jj);lCo=r(Kpt,"DebertaV2Model"),Kpt.forEach(t),iCo=r(Kxe," (DeBERTa-v2 model)"),Kxe.forEach(t),dCo=i(x),_p=n(x,"LI",{});var Zxe=s(_p);dme=n(Zxe,"STRONG",{});var Zpt=s(dme);cCo=r(Zpt,"decision_transformer"),Zpt.forEach(t),mCo=r(Zxe," \u2014 "),Dj=n(Zxe,"A",{href:!0});var e_t=s(Dj);fCo=r(e_t,"DecisionTransformerModel"),e_t.forEach(t),gCo=r(Zxe," (Decision Transformer model)"),Zxe.forEach(t),hCo=i(x),bp=n(x,"LI",{});var e$e=s(bp);cme=n(e$e,"STRONG",{});var o_t=s(cme);uCo=r(o_t,"deit"),o_t.forEach(t),pCo=r(e$e," \u2014 "),Gj=n(e$e,"A",{href:!0});var r_t=s(Gj);_Co=r(r_t,"DeiTModel"),r_t.forEach(t),bCo=r(e$e," (DeiT model)"),e$e.forEach(t),vCo=i(x),vp=n(x,"LI",{});var o$e=s(vp);mme=n(o$e,"STRONG",{});var t_t=s(mme);FCo=r(t_t,"detr"),t_t.forEach(t),TCo=r(o$e," \u2014 "),Oj=n(o$e,"A",{href:!0});var a_t=s(Oj);MCo=r(a_t,"DetrModel"),a_t.forEach(t),ECo=r(o$e," (DETR model)"),o$e.forEach(t),CCo=i(x),Fp=n(x,"LI",{});var r$e=s(Fp);fme=n(r$e,"STRONG",{});var n_t=s(fme);wCo=r(n_t,"distilbert"),n_t.forEach(t),ACo=r(r$e," \u2014 "),Vj=n(r$e,"A",{href:!0});var s_t=s(Vj);LCo=r(s_t,"DistilBertModel"),s_t.forEach(t),yCo=r(r$e," (DistilBERT model)"),r$e.forEach(t),xCo=i(x),Tp=n(x,"LI",{});var t$e=s(Tp);gme=n(t$e,"STRONG",{});var l_t=s(gme);$Co=r(l_t,"dpr"),l_t.forEach(t),kCo=r(t$e," \u2014 "),Xj=n(t$e,"A",{href:!0});var i_t=s(Xj);SCo=r(i_t,"DPRQuestionEncoder"),i_t.forEach(t),RCo=r(t$e," (DPR model)"),t$e.forEach(t),PCo=i(x),Mp=n(x,"LI",{});var a$e=s(Mp);hme=n(a$e,"STRONG",{});var d_t=s(hme);BCo=r(d_t,"dpt"),d_t.forEach(t),ICo=r(a$e," \u2014 "),zj=n(a$e,"A",{href:!0});var c_t=s(zj);NCo=r(c_t,"DPTModel"),c_t.forEach(t),qCo=r(a$e," (DPT model)"),a$e.forEach(t),jCo=i(x),Ep=n(x,"LI",{});var n$e=s(Ep);ume=n(n$e,"STRONG",{});var m_t=s(ume);DCo=r(m_t,"electra"),m_t.forEach(t),GCo=r(n$e," \u2014 "),Wj=n(n$e,"A",{href:!0});var f_t=s(Wj);OCo=r(f_t,"ElectraModel"),f_t.forEach(t),VCo=r(n$e," (ELECTRA model)"),n$e.forEach(t),XCo=i(x),Cp=n(x,"LI",{});var s$e=s(Cp);pme=n(s$e,"STRONG",{});var g_t=s(pme);zCo=r(g_t,"flaubert"),g_t.forEach(t),WCo=r(s$e," \u2014 "),Qj=n(s$e,"A",{href:!0});var h_t=s(Qj);QCo=r(h_t,"FlaubertModel"),h_t.forEach(t),HCo=r(s$e," (FlauBERT model)"),s$e.forEach(t),UCo=i(x),wp=n(x,"LI",{});var l$e=s(wp);_me=n(l$e,"STRONG",{});var u_t=s(_me);JCo=r(u_t,"flava"),u_t.forEach(t),YCo=r(l$e," \u2014 "),Hj=n(l$e,"A",{href:!0});var p_t=s(Hj);KCo=r(p_t,"FlavaModel"),p_t.forEach(t),ZCo=r(l$e," (FLAVA model)"),l$e.forEach(t),e5o=i(x),Ap=n(x,"LI",{});var i$e=s(Ap);bme=n(i$e,"STRONG",{});var __t=s(bme);o5o=r(__t,"fnet"),__t.forEach(t),r5o=r(i$e," \u2014 "),Uj=n(i$e,"A",{href:!0});var b_t=s(Uj);t5o=r(b_t,"FNetModel"),b_t.forEach(t),a5o=r(i$e," (FNet model)"),i$e.forEach(t),n5o=i(x),Lp=n(x,"LI",{});var d$e=s(Lp);vme=n(d$e,"STRONG",{});var v_t=s(vme);s5o=r(v_t,"fsmt"),v_t.forEach(t),l5o=r(d$e," \u2014 "),Jj=n(d$e,"A",{href:!0});var F_t=s(Jj);i5o=r(F_t,"FSMTModel"),F_t.forEach(t),d5o=r(d$e," (FairSeq Machine-Translation model)"),d$e.forEach(t),c5o=i(x),Us=n(x,"LI",{});var VS=s(Us);Fme=n(VS,"STRONG",{});var T_t=s(Fme);m5o=r(T_t,"funnel"),T_t.forEach(t),f5o=r(VS," \u2014 "),Yj=n(VS,"A",{href:!0});var M_t=s(Yj);g5o=r(M_t,"FunnelModel"),M_t.forEach(t),h5o=r(VS," or "),Kj=n(VS,"A",{href:!0});var E_t=s(Kj);u5o=r(E_t,"FunnelBaseModel"),E_t.forEach(t),p5o=r(VS," (Funnel Transformer model)"),VS.forEach(t),_5o=i(x),yp=n(x,"LI",{});var c$e=s(yp);Tme=n(c$e,"STRONG",{});var C_t=s(Tme);b5o=r(C_t,"glpn"),C_t.forEach(t),v5o=r(c$e," \u2014 "),Zj=n(c$e,"A",{href:!0});var w_t=s(Zj);F5o=r(w_t,"GLPNModel"),w_t.forEach(t),T5o=r(c$e," (GLPN model)"),c$e.forEach(t),M5o=i(x),xp=n(x,"LI",{});var m$e=s(xp);Mme=n(m$e,"STRONG",{});var A_t=s(Mme);E5o=r(A_t,"gpt2"),A_t.forEach(t),C5o=r(m$e," \u2014 "),eD=n(m$e,"A",{href:!0});var L_t=s(eD);w5o=r(L_t,"GPT2Model"),L_t.forEach(t),A5o=r(m$e," (OpenAI GPT-2 model)"),m$e.forEach(t),L5o=i(x),$p=n(x,"LI",{});var f$e=s($p);Eme=n(f$e,"STRONG",{});var y_t=s(Eme);y5o=r(y_t,"gpt_neo"),y_t.forEach(t),x5o=r(f$e," \u2014 "),oD=n(f$e,"A",{href:!0});var x_t=s(oD);$5o=r(x_t,"GPTNeoModel"),x_t.forEach(t),k5o=r(f$e," (GPT Neo model)"),f$e.forEach(t),S5o=i(x),kp=n(x,"LI",{});var g$e=s(kp);Cme=n(g$e,"STRONG",{});var $_t=s(Cme);R5o=r($_t,"gpt_neox"),$_t.forEach(t),P5o=r(g$e," \u2014 "),rD=n(g$e,"A",{href:!0});var k_t=s(rD);B5o=r(k_t,"GPTNeoXModel"),k_t.forEach(t),I5o=r(g$e," (GPT NeoX model)"),g$e.forEach(t),N5o=i(x),Sp=n(x,"LI",{});var h$e=s(Sp);wme=n(h$e,"STRONG",{});var S_t=s(wme);q5o=r(S_t,"gptj"),S_t.forEach(t),j5o=r(h$e," \u2014 "),tD=n(h$e,"A",{href:!0});var R_t=s(tD);D5o=r(R_t,"GPTJModel"),R_t.forEach(t),G5o=r(h$e," (GPT-J model)"),h$e.forEach(t),O5o=i(x),Rp=n(x,"LI",{});var u$e=s(Rp);Ame=n(u$e,"STRONG",{});var P_t=s(Ame);V5o=r(P_t,"groupvit"),P_t.forEach(t),X5o=r(u$e," \u2014 "),aD=n(u$e,"A",{href:!0});var B_t=s(aD);z5o=r(B_t,"GroupViTModel"),B_t.forEach(t),W5o=r(u$e," (GroupViT model)"),u$e.forEach(t),Q5o=i(x),Pp=n(x,"LI",{});var p$e=s(Pp);Lme=n(p$e,"STRONG",{});var I_t=s(Lme);H5o=r(I_t,"hubert"),I_t.forEach(t),U5o=r(p$e," \u2014 "),nD=n(p$e,"A",{href:!0});var N_t=s(nD);J5o=r(N_t,"HubertModel"),N_t.forEach(t),Y5o=r(p$e," (Hubert model)"),p$e.forEach(t),K5o=i(x),Bp=n(x,"LI",{});var _$e=s(Bp);yme=n(_$e,"STRONG",{});var q_t=s(yme);Z5o=r(q_t,"ibert"),q_t.forEach(t),e3o=r(_$e," \u2014 "),sD=n(_$e,"A",{href:!0});var j_t=s(sD);o3o=r(j_t,"IBertModel"),j_t.forEach(t),r3o=r(_$e," (I-BERT model)"),_$e.forEach(t),t3o=i(x),Ip=n(x,"LI",{});var b$e=s(Ip);xme=n(b$e,"STRONG",{});var D_t=s(xme);a3o=r(D_t,"imagegpt"),D_t.forEach(t),n3o=r(b$e," \u2014 "),lD=n(b$e,"A",{href:!0});var G_t=s(lD);s3o=r(G_t,"ImageGPTModel"),G_t.forEach(t),l3o=r(b$e," (ImageGPT model)"),b$e.forEach(t),i3o=i(x),Np=n(x,"LI",{});var v$e=s(Np);$me=n(v$e,"STRONG",{});var O_t=s($me);d3o=r(O_t,"layoutlm"),O_t.forEach(t),c3o=r(v$e," \u2014 "),iD=n(v$e,"A",{href:!0});var V_t=s(iD);m3o=r(V_t,"LayoutLMModel"),V_t.forEach(t),f3o=r(v$e," (LayoutLM model)"),v$e.forEach(t),g3o=i(x),qp=n(x,"LI",{});var F$e=s(qp);kme=n(F$e,"STRONG",{});var X_t=s(kme);h3o=r(X_t,"layoutlmv2"),X_t.forEach(t),u3o=r(F$e," \u2014 "),dD=n(F$e,"A",{href:!0});var z_t=s(dD);p3o=r(z_t,"LayoutLMv2Model"),z_t.forEach(t),_3o=r(F$e," (LayoutLMv2 model)"),F$e.forEach(t),b3o=i(x),jp=n(x,"LI",{});var T$e=s(jp);Sme=n(T$e,"STRONG",{});var W_t=s(Sme);v3o=r(W_t,"layoutlmv3"),W_t.forEach(t),F3o=r(T$e," \u2014 "),cD=n(T$e,"A",{href:!0});var Q_t=s(cD);T3o=r(Q_t,"LayoutLMv3Model"),Q_t.forEach(t),M3o=r(T$e," (LayoutLMv3 model)"),T$e.forEach(t),E3o=i(x),Dp=n(x,"LI",{});var M$e=s(Dp);Rme=n(M$e,"STRONG",{});var H_t=s(Rme);C3o=r(H_t,"led"),H_t.forEach(t),w3o=r(M$e," \u2014 "),mD=n(M$e,"A",{href:!0});var U_t=s(mD);A3o=r(U_t,"LEDModel"),U_t.forEach(t),L3o=r(M$e," (LED model)"),M$e.forEach(t),y3o=i(x),Gp=n(x,"LI",{});var E$e=s(Gp);Pme=n(E$e,"STRONG",{});var J_t=s(Pme);x3o=r(J_t,"levit"),J_t.forEach(t),$3o=r(E$e," \u2014 "),fD=n(E$e,"A",{href:!0});var Y_t=s(fD);k3o=r(Y_t,"LevitModel"),Y_t.forEach(t),S3o=r(E$e," (LeViT model)"),E$e.forEach(t),R3o=i(x),Op=n(x,"LI",{});var C$e=s(Op);Bme=n(C$e,"STRONG",{});var K_t=s(Bme);P3o=r(K_t,"longformer"),K_t.forEach(t),B3o=r(C$e," \u2014 "),gD=n(C$e,"A",{href:!0});var Z_t=s(gD);I3o=r(Z_t,"LongformerModel"),Z_t.forEach(t),N3o=r(C$e," (Longformer model)"),C$e.forEach(t),q3o=i(x),Vp=n(x,"LI",{});var w$e=s(Vp);Ime=n(w$e,"STRONG",{});var e2t=s(Ime);j3o=r(e2t,"longt5"),e2t.forEach(t),D3o=r(w$e," \u2014 "),hD=n(w$e,"A",{href:!0});var o2t=s(hD);G3o=r(o2t,"LongT5Model"),o2t.forEach(t),O3o=r(w$e," (LongT5 model)"),w$e.forEach(t),V3o=i(x),Xp=n(x,"LI",{});var A$e=s(Xp);Nme=n(A$e,"STRONG",{});var r2t=s(Nme);X3o=r(r2t,"luke"),r2t.forEach(t),z3o=r(A$e," \u2014 "),uD=n(A$e,"A",{href:!0});var t2t=s(uD);W3o=r(t2t,"LukeModel"),t2t.forEach(t),Q3o=r(A$e," (LUKE model)"),A$e.forEach(t),H3o=i(x),zp=n(x,"LI",{});var L$e=s(zp);qme=n(L$e,"STRONG",{});var a2t=s(qme);U3o=r(a2t,"lxmert"),a2t.forEach(t),J3o=r(L$e," \u2014 "),pD=n(L$e,"A",{href:!0});var n2t=s(pD);Y3o=r(n2t,"LxmertModel"),n2t.forEach(t),K3o=r(L$e," (LXMERT model)"),L$e.forEach(t),Z3o=i(x),Wp=n(x,"LI",{});var y$e=s(Wp);jme=n(y$e,"STRONG",{});var s2t=s(jme);e0o=r(s2t,"m2m_100"),s2t.forEach(t),o0o=r(y$e," \u2014 "),_D=n(y$e,"A",{href:!0});var l2t=s(_D);r0o=r(l2t,"M2M100Model"),l2t.forEach(t),t0o=r(y$e," (M2M100 model)"),y$e.forEach(t),a0o=i(x),Qp=n(x,"LI",{});var x$e=s(Qp);Dme=n(x$e,"STRONG",{});var i2t=s(Dme);n0o=r(i2t,"marian"),i2t.forEach(t),s0o=r(x$e," \u2014 "),bD=n(x$e,"A",{href:!0});var d2t=s(bD);l0o=r(d2t,"MarianModel"),d2t.forEach(t),i0o=r(x$e," (Marian model)"),x$e.forEach(t),d0o=i(x),Hp=n(x,"LI",{});var $$e=s(Hp);Gme=n($$e,"STRONG",{});var c2t=s(Gme);c0o=r(c2t,"maskformer"),c2t.forEach(t),m0o=r($$e," \u2014 "),vD=n($$e,"A",{href:!0});var m2t=s(vD);f0o=r(m2t,"MaskFormerModel"),m2t.forEach(t),g0o=r($$e," (MaskFormer model)"),$$e.forEach(t),h0o=i(x),Up=n(x,"LI",{});var k$e=s(Up);Ome=n(k$e,"STRONG",{});var f2t=s(Ome);u0o=r(f2t,"mbart"),f2t.forEach(t),p0o=r(k$e," \u2014 "),FD=n(k$e,"A",{href:!0});var g2t=s(FD);_0o=r(g2t,"MBartModel"),g2t.forEach(t),b0o=r(k$e," (mBART model)"),k$e.forEach(t),v0o=i(x),Jp=n(x,"LI",{});var S$e=s(Jp);Vme=n(S$e,"STRONG",{});var h2t=s(Vme);F0o=r(h2t,"mctct"),h2t.forEach(t),T0o=r(S$e," \u2014 "),TD=n(S$e,"A",{href:!0});var u2t=s(TD);M0o=r(u2t,"MCTCTModel"),u2t.forEach(t),E0o=r(S$e," (M-CTC-T model)"),S$e.forEach(t),C0o=i(x),Yp=n(x,"LI",{});var R$e=s(Yp);Xme=n(R$e,"STRONG",{});var p2t=s(Xme);w0o=r(p2t,"megatron-bert"),p2t.forEach(t),A0o=r(R$e," \u2014 "),MD=n(R$e,"A",{href:!0});var _2t=s(MD);L0o=r(_2t,"MegatronBertModel"),_2t.forEach(t),y0o=r(R$e," (Megatron-BERT model)"),R$e.forEach(t),x0o=i(x),Kp=n(x,"LI",{});var P$e=s(Kp);zme=n(P$e,"STRONG",{});var b2t=s(zme);$0o=r(b2t,"mobilebert"),b2t.forEach(t),k0o=r(P$e," \u2014 "),ED=n(P$e,"A",{href:!0});var v2t=s(ED);S0o=r(v2t,"MobileBertModel"),v2t.forEach(t),R0o=r(P$e," (MobileBERT model)"),P$e.forEach(t),P0o=i(x),Zp=n(x,"LI",{});var B$e=s(Zp);Wme=n(B$e,"STRONG",{});var F2t=s(Wme);B0o=r(F2t,"mobilevit"),F2t.forEach(t),I0o=r(B$e," \u2014 "),CD=n(B$e,"A",{href:!0});var T2t=s(CD);N0o=r(T2t,"MobileViTModel"),T2t.forEach(t),q0o=r(B$e," (MobileViT model)"),B$e.forEach(t),j0o=i(x),e_=n(x,"LI",{});var I$e=s(e_);Qme=n(I$e,"STRONG",{});var M2t=s(Qme);D0o=r(M2t,"mpnet"),M2t.forEach(t),G0o=r(I$e," \u2014 "),wD=n(I$e,"A",{href:!0});var E2t=s(wD);O0o=r(E2t,"MPNetModel"),E2t.forEach(t),V0o=r(I$e," (MPNet model)"),I$e.forEach(t),X0o=i(x),o_=n(x,"LI",{});var N$e=s(o_);Hme=n(N$e,"STRONG",{});var C2t=s(Hme);z0o=r(C2t,"mt5"),C2t.forEach(t),W0o=r(N$e," \u2014 "),AD=n(N$e,"A",{href:!0});var w2t=s(AD);Q0o=r(w2t,"MT5Model"),w2t.forEach(t),H0o=r(N$e," (MT5 model)"),N$e.forEach(t),U0o=i(x),r_=n(x,"LI",{});var q$e=s(r_);Ume=n(q$e,"STRONG",{});var A2t=s(Ume);J0o=r(A2t,"mvp"),A2t.forEach(t),Y0o=r(q$e," \u2014 "),LD=n(q$e,"A",{href:!0});var L2t=s(LD);K0o=r(L2t,"MvpModel"),L2t.forEach(t),Z0o=r(q$e," (MVP model)"),q$e.forEach(t),ewo=i(x),t_=n(x,"LI",{});var j$e=s(t_);Jme=n(j$e,"STRONG",{});var y2t=s(Jme);owo=r(y2t,"nezha"),y2t.forEach(t),rwo=r(j$e," \u2014 "),yD=n(j$e,"A",{href:!0});var x2t=s(yD);two=r(x2t,"NezhaModel"),x2t.forEach(t),awo=r(j$e," (Nezha model)"),j$e.forEach(t),nwo=i(x),a_=n(x,"LI",{});var D$e=s(a_);Yme=n(D$e,"STRONG",{});var $2t=s(Yme);swo=r($2t,"nllb"),$2t.forEach(t),lwo=r(D$e," \u2014 "),xD=n(D$e,"A",{href:!0});var k2t=s(xD);iwo=r(k2t,"M2M100Model"),k2t.forEach(t),dwo=r(D$e," (NLLB model)"),D$e.forEach(t),cwo=i(x),n_=n(x,"LI",{});var G$e=s(n_);Kme=n(G$e,"STRONG",{});var S2t=s(Kme);mwo=r(S2t,"nystromformer"),S2t.forEach(t),fwo=r(G$e," \u2014 "),$D=n(G$e,"A",{href:!0});var R2t=s($D);gwo=r(R2t,"NystromformerModel"),R2t.forEach(t),hwo=r(G$e," (Nystr\xF6mformer model)"),G$e.forEach(t),uwo=i(x),s_=n(x,"LI",{});var O$e=s(s_);Zme=n(O$e,"STRONG",{});var P2t=s(Zme);pwo=r(P2t,"openai-gpt"),P2t.forEach(t),_wo=r(O$e," \u2014 "),kD=n(O$e,"A",{href:!0});var B2t=s(kD);bwo=r(B2t,"OpenAIGPTModel"),B2t.forEach(t),vwo=r(O$e," (OpenAI GPT model)"),O$e.forEach(t),Fwo=i(x),l_=n(x,"LI",{});var V$e=s(l_);efe=n(V$e,"STRONG",{});var I2t=s(efe);Two=r(I2t,"opt"),I2t.forEach(t),Mwo=r(V$e," \u2014 "),SD=n(V$e,"A",{href:!0});var N2t=s(SD);Ewo=r(N2t,"OPTModel"),N2t.forEach(t),Cwo=r(V$e," (OPT model)"),V$e.forEach(t),wwo=i(x),i_=n(x,"LI",{});var X$e=s(i_);ofe=n(X$e,"STRONG",{});var q2t=s(ofe);Awo=r(q2t,"owlvit"),q2t.forEach(t),Lwo=r(X$e," \u2014 "),RD=n(X$e,"A",{href:!0});var j2t=s(RD);ywo=r(j2t,"OwlViTModel"),j2t.forEach(t),xwo=r(X$e," (OWL-ViT model)"),X$e.forEach(t),$wo=i(x),d_=n(x,"LI",{});var z$e=s(d_);rfe=n(z$e,"STRONG",{});var D2t=s(rfe);kwo=r(D2t,"pegasus"),D2t.forEach(t),Swo=r(z$e," \u2014 "),PD=n(z$e,"A",{href:!0});var G2t=s(PD);Rwo=r(G2t,"PegasusModel"),G2t.forEach(t),Pwo=r(z$e," (Pegasus model)"),z$e.forEach(t),Bwo=i(x),c_=n(x,"LI",{});var W$e=s(c_);tfe=n(W$e,"STRONG",{});var O2t=s(tfe);Iwo=r(O2t,"perceiver"),O2t.forEach(t),Nwo=r(W$e," \u2014 "),BD=n(W$e,"A",{href:!0});var V2t=s(BD);qwo=r(V2t,"PerceiverModel"),V2t.forEach(t),jwo=r(W$e," (Perceiver model)"),W$e.forEach(t),Dwo=i(x),m_=n(x,"LI",{});var Q$e=s(m_);afe=n(Q$e,"STRONG",{});var X2t=s(afe);Gwo=r(X2t,"plbart"),X2t.forEach(t),Owo=r(Q$e," \u2014 "),ID=n(Q$e,"A",{href:!0});var z2t=s(ID);Vwo=r(z2t,"PLBartModel"),z2t.forEach(t),Xwo=r(Q$e," (PLBart model)"),Q$e.forEach(t),zwo=i(x),f_=n(x,"LI",{});var H$e=s(f_);nfe=n(H$e,"STRONG",{});var W2t=s(nfe);Wwo=r(W2t,"poolformer"),W2t.forEach(t),Qwo=r(H$e," \u2014 "),ND=n(H$e,"A",{href:!0});var Q2t=s(ND);Hwo=r(Q2t,"PoolFormerModel"),Q2t.forEach(t),Uwo=r(H$e," (PoolFormer model)"),H$e.forEach(t),Jwo=i(x),g_=n(x,"LI",{});var U$e=s(g_);sfe=n(U$e,"STRONG",{});var H2t=s(sfe);Ywo=r(H2t,"prophetnet"),H2t.forEach(t),Kwo=r(U$e," \u2014 "),qD=n(U$e,"A",{href:!0});var U2t=s(qD);Zwo=r(U2t,"ProphetNetModel"),U2t.forEach(t),eAo=r(U$e," (ProphetNet model)"),U$e.forEach(t),oAo=i(x),h_=n(x,"LI",{});var J$e=s(h_);lfe=n(J$e,"STRONG",{});var J2t=s(lfe);rAo=r(J2t,"qdqbert"),J2t.forEach(t),tAo=r(J$e," \u2014 "),jD=n(J$e,"A",{href:!0});var Y2t=s(jD);aAo=r(Y2t,"QDQBertModel"),Y2t.forEach(t),nAo=r(J$e," (QDQBert model)"),J$e.forEach(t),sAo=i(x),u_=n(x,"LI",{});var Y$e=s(u_);ife=n(Y$e,"STRONG",{});var K2t=s(ife);lAo=r(K2t,"reformer"),K2t.forEach(t),iAo=r(Y$e," \u2014 "),DD=n(Y$e,"A",{href:!0});var Z2t=s(DD);dAo=r(Z2t,"ReformerModel"),Z2t.forEach(t),cAo=r(Y$e," (Reformer model)"),Y$e.forEach(t),mAo=i(x),p_=n(x,"LI",{});var K$e=s(p_);dfe=n(K$e,"STRONG",{});var ebt=s(dfe);fAo=r(ebt,"regnet"),ebt.forEach(t),gAo=r(K$e," \u2014 "),GD=n(K$e,"A",{href:!0});var obt=s(GD);hAo=r(obt,"RegNetModel"),obt.forEach(t),uAo=r(K$e," (RegNet model)"),K$e.forEach(t),pAo=i(x),__=n(x,"LI",{});var Z$e=s(__);cfe=n(Z$e,"STRONG",{});var rbt=s(cfe);_Ao=r(rbt,"rembert"),rbt.forEach(t),bAo=r(Z$e," \u2014 "),OD=n(Z$e,"A",{href:!0});var tbt=s(OD);vAo=r(tbt,"RemBertModel"),tbt.forEach(t),FAo=r(Z$e," (RemBERT model)"),Z$e.forEach(t),TAo=i(x),b_=n(x,"LI",{});var eke=s(b_);mfe=n(eke,"STRONG",{});var abt=s(mfe);MAo=r(abt,"resnet"),abt.forEach(t),EAo=r(eke," \u2014 "),VD=n(eke,"A",{href:!0});var nbt=s(VD);CAo=r(nbt,"ResNetModel"),nbt.forEach(t),wAo=r(eke," (ResNet model)"),eke.forEach(t),AAo=i(x),v_=n(x,"LI",{});var oke=s(v_);ffe=n(oke,"STRONG",{});var sbt=s(ffe);LAo=r(sbt,"retribert"),sbt.forEach(t),yAo=r(oke," \u2014 "),XD=n(oke,"A",{href:!0});var lbt=s(XD);xAo=r(lbt,"RetriBertModel"),lbt.forEach(t),$Ao=r(oke," (RetriBERT model)"),oke.forEach(t),kAo=i(x),F_=n(x,"LI",{});var rke=s(F_);gfe=n(rke,"STRONG",{});var ibt=s(gfe);SAo=r(ibt,"roberta"),ibt.forEach(t),RAo=r(rke," \u2014 "),zD=n(rke,"A",{href:!0});var dbt=s(zD);PAo=r(dbt,"RobertaModel"),dbt.forEach(t),BAo=r(rke," (RoBERTa model)"),rke.forEach(t),IAo=i(x),T_=n(x,"LI",{});var tke=s(T_);hfe=n(tke,"STRONG",{});var cbt=s(hfe);NAo=r(cbt,"roformer"),cbt.forEach(t),qAo=r(tke," \u2014 "),WD=n(tke,"A",{href:!0});var mbt=s(WD);jAo=r(mbt,"RoFormerModel"),mbt.forEach(t),DAo=r(tke," (RoFormer model)"),tke.forEach(t),GAo=i(x),M_=n(x,"LI",{});var ake=s(M_);ufe=n(ake,"STRONG",{});var fbt=s(ufe);OAo=r(fbt,"segformer"),fbt.forEach(t),VAo=r(ake," \u2014 "),QD=n(ake,"A",{href:!0});var gbt=s(QD);XAo=r(gbt,"SegformerModel"),gbt.forEach(t),zAo=r(ake," (SegFormer model)"),ake.forEach(t),WAo=i(x),E_=n(x,"LI",{});var nke=s(E_);pfe=n(nke,"STRONG",{});var hbt=s(pfe);QAo=r(hbt,"sew"),hbt.forEach(t),HAo=r(nke," \u2014 "),HD=n(nke,"A",{href:!0});var ubt=s(HD);UAo=r(ubt,"SEWModel"),ubt.forEach(t),JAo=r(nke," (SEW model)"),nke.forEach(t),YAo=i(x),C_=n(x,"LI",{});var ske=s(C_);_fe=n(ske,"STRONG",{});var pbt=s(_fe);KAo=r(pbt,"sew-d"),pbt.forEach(t),ZAo=r(ske," \u2014 "),UD=n(ske,"A",{href:!0});var _bt=s(UD);e6o=r(_bt,"SEWDModel"),_bt.forEach(t),o6o=r(ske," (SEW-D model)"),ske.forEach(t),r6o=i(x),w_=n(x,"LI",{});var lke=s(w_);bfe=n(lke,"STRONG",{});var bbt=s(bfe);t6o=r(bbt,"speech_to_text"),bbt.forEach(t),a6o=r(lke," \u2014 "),JD=n(lke,"A",{href:!0});var vbt=s(JD);n6o=r(vbt,"Speech2TextModel"),vbt.forEach(t),s6o=r(lke," (Speech2Text model)"),lke.forEach(t),l6o=i(x),A_=n(x,"LI",{});var ike=s(A_);vfe=n(ike,"STRONG",{});var Fbt=s(vfe);i6o=r(Fbt,"splinter"),Fbt.forEach(t),d6o=r(ike," \u2014 "),YD=n(ike,"A",{href:!0});var Tbt=s(YD);c6o=r(Tbt,"SplinterModel"),Tbt.forEach(t),m6o=r(ike," (Splinter model)"),ike.forEach(t),f6o=i(x),L_=n(x,"LI",{});var dke=s(L_);Ffe=n(dke,"STRONG",{});var Mbt=s(Ffe);g6o=r(Mbt,"squeezebert"),Mbt.forEach(t),h6o=r(dke," \u2014 "),KD=n(dke,"A",{href:!0});var Ebt=s(KD);u6o=r(Ebt,"SqueezeBertModel"),Ebt.forEach(t),p6o=r(dke," (SqueezeBERT model)"),dke.forEach(t),_6o=i(x),y_=n(x,"LI",{});var cke=s(y_);Tfe=n(cke,"STRONG",{});var Cbt=s(Tfe);b6o=r(Cbt,"swin"),Cbt.forEach(t),v6o=r(cke," \u2014 "),ZD=n(cke,"A",{href:!0});var wbt=s(ZD);F6o=r(wbt,"SwinModel"),wbt.forEach(t),T6o=r(cke," (Swin Transformer model)"),cke.forEach(t),M6o=i(x),x_=n(x,"LI",{});var mke=s(x_);Mfe=n(mke,"STRONG",{});var Abt=s(Mfe);E6o=r(Abt,"t5"),Abt.forEach(t),C6o=r(mke," \u2014 "),eG=n(mke,"A",{href:!0});var Lbt=s(eG);w6o=r(Lbt,"T5Model"),Lbt.forEach(t),A6o=r(mke," (T5 model)"),mke.forEach(t),L6o=i(x),$_=n(x,"LI",{});var fke=s($_);Efe=n(fke,"STRONG",{});var ybt=s(Efe);y6o=r(ybt,"tapas"),ybt.forEach(t),x6o=r(fke," \u2014 "),oG=n(fke,"A",{href:!0});var xbt=s(oG);$6o=r(xbt,"TapasModel"),xbt.forEach(t),k6o=r(fke," (TAPAS model)"),fke.forEach(t),S6o=i(x),k_=n(x,"LI",{});var gke=s(k_);Cfe=n(gke,"STRONG",{});var $bt=s(Cfe);R6o=r($bt,"trajectory_transformer"),$bt.forEach(t),P6o=r(gke," \u2014 "),rG=n(gke,"A",{href:!0});var kbt=s(rG);B6o=r(kbt,"TrajectoryTransformerModel"),kbt.forEach(t),I6o=r(gke," (Trajectory Transformer model)"),gke.forEach(t),N6o=i(x),S_=n(x,"LI",{});var hke=s(S_);wfe=n(hke,"STRONG",{});var Sbt=s(wfe);q6o=r(Sbt,"transfo-xl"),Sbt.forEach(t),j6o=r(hke," \u2014 "),tG=n(hke,"A",{href:!0});var Rbt=s(tG);D6o=r(Rbt,"TransfoXLModel"),Rbt.forEach(t),G6o=r(hke," (Transformer-XL model)"),hke.forEach(t),O6o=i(x),R_=n(x,"LI",{});var uke=s(R_);Afe=n(uke,"STRONG",{});var Pbt=s(Afe);V6o=r(Pbt,"unispeech"),Pbt.forEach(t),X6o=r(uke," \u2014 "),aG=n(uke,"A",{href:!0});var Bbt=s(aG);z6o=r(Bbt,"UniSpeechModel"),Bbt.forEach(t),W6o=r(uke," (UniSpeech model)"),uke.forEach(t),Q6o=i(x),P_=n(x,"LI",{});var pke=s(P_);Lfe=n(pke,"STRONG",{});var Ibt=s(Lfe);H6o=r(Ibt,"unispeech-sat"),Ibt.forEach(t),U6o=r(pke," \u2014 "),nG=n(pke,"A",{href:!0});var Nbt=s(nG);J6o=r(Nbt,"UniSpeechSatModel"),Nbt.forEach(t),Y6o=r(pke," (UniSpeechSat model)"),pke.forEach(t),K6o=i(x),B_=n(x,"LI",{});var _ke=s(B_);yfe=n(_ke,"STRONG",{});var qbt=s(yfe);Z6o=r(qbt,"van"),qbt.forEach(t),e7o=r(_ke," \u2014 "),sG=n(_ke,"A",{href:!0});var jbt=s(sG);o7o=r(jbt,"VanModel"),jbt.forEach(t),r7o=r(_ke," (VAN model)"),_ke.forEach(t),t7o=i(x),I_=n(x,"LI",{});var bke=s(I_);xfe=n(bke,"STRONG",{});var Dbt=s(xfe);a7o=r(Dbt,"vilt"),Dbt.forEach(t),n7o=r(bke," \u2014 "),lG=n(bke,"A",{href:!0});var Gbt=s(lG);s7o=r(Gbt,"ViltModel"),Gbt.forEach(t),l7o=r(bke," (ViLT model)"),bke.forEach(t),i7o=i(x),N_=n(x,"LI",{});var vke=s(N_);$fe=n(vke,"STRONG",{});var Obt=s($fe);d7o=r(Obt,"vision-text-dual-encoder"),Obt.forEach(t),c7o=r(vke," \u2014 "),iG=n(vke,"A",{href:!0});var Vbt=s(iG);m7o=r(Vbt,"VisionTextDualEncoderModel"),Vbt.forEach(t),f7o=r(vke," (VisionTextDualEncoder model)"),vke.forEach(t),g7o=i(x),q_=n(x,"LI",{});var Fke=s(q_);kfe=n(Fke,"STRONG",{});var Xbt=s(kfe);h7o=r(Xbt,"visual_bert"),Xbt.forEach(t),u7o=r(Fke," \u2014 "),dG=n(Fke,"A",{href:!0});var zbt=s(dG);p7o=r(zbt,"VisualBertModel"),zbt.forEach(t),_7o=r(Fke," (VisualBERT model)"),Fke.forEach(t),b7o=i(x),j_=n(x,"LI",{});var Tke=s(j_);Sfe=n(Tke,"STRONG",{});var Wbt=s(Sfe);v7o=r(Wbt,"vit"),Wbt.forEach(t),F7o=r(Tke," \u2014 "),cG=n(Tke,"A",{href:!0});var Qbt=s(cG);T7o=r(Qbt,"ViTModel"),Qbt.forEach(t),M7o=r(Tke," (ViT model)"),Tke.forEach(t),E7o=i(x),D_=n(x,"LI",{});var Mke=s(D_);Rfe=n(Mke,"STRONG",{});var Hbt=s(Rfe);C7o=r(Hbt,"vit_mae"),Hbt.forEach(t),w7o=r(Mke," \u2014 "),mG=n(Mke,"A",{href:!0});var Ubt=s(mG);A7o=r(Ubt,"ViTMAEModel"),Ubt.forEach(t),L7o=r(Mke," (ViTMAE model)"),Mke.forEach(t),y7o=i(x),G_=n(x,"LI",{});var Eke=s(G_);Pfe=n(Eke,"STRONG",{});var Jbt=s(Pfe);x7o=r(Jbt,"wav2vec2"),Jbt.forEach(t),$7o=r(Eke," \u2014 "),fG=n(Eke,"A",{href:!0});var Ybt=s(fG);k7o=r(Ybt,"Wav2Vec2Model"),Ybt.forEach(t),S7o=r(Eke," (Wav2Vec2 model)"),Eke.forEach(t),R7o=i(x),O_=n(x,"LI",{});var Cke=s(O_);Bfe=n(Cke,"STRONG",{});var Kbt=s(Bfe);P7o=r(Kbt,"wav2vec2-conformer"),Kbt.forEach(t),B7o=r(Cke," \u2014 "),gG=n(Cke,"A",{href:!0});var Zbt=s(gG);I7o=r(Zbt,"Wav2Vec2ConformerModel"),Zbt.forEach(t),N7o=r(Cke," (Wav2Vec2-Conformer model)"),Cke.forEach(t),q7o=i(x),V_=n(x,"LI",{});var wke=s(V_);Ife=n(wke,"STRONG",{});var evt=s(Ife);j7o=r(evt,"wavlm"),evt.forEach(t),D7o=r(wke," \u2014 "),hG=n(wke,"A",{href:!0});var ovt=s(hG);G7o=r(ovt,"WavLMModel"),ovt.forEach(t),O7o=r(wke," (WavLM model)"),wke.forEach(t),V7o=i(x),X_=n(x,"LI",{});var Ake=s(X_);Nfe=n(Ake,"STRONG",{});var rvt=s(Nfe);X7o=r(rvt,"xglm"),rvt.forEach(t),z7o=r(Ake," \u2014 "),uG=n(Ake,"A",{href:!0});var tvt=s(uG);W7o=r(tvt,"XGLMModel"),tvt.forEach(t),Q7o=r(Ake," (XGLM model)"),Ake.forEach(t),H7o=i(x),z_=n(x,"LI",{});var Lke=s(z_);qfe=n(Lke,"STRONG",{});var avt=s(qfe);U7o=r(avt,"xlm"),avt.forEach(t),J7o=r(Lke," \u2014 "),pG=n(Lke,"A",{href:!0});var nvt=s(pG);Y7o=r(nvt,"XLMModel"),nvt.forEach(t),K7o=r(Lke," (XLM model)"),Lke.forEach(t),Z7o=i(x),W_=n(x,"LI",{});var yke=s(W_);jfe=n(yke,"STRONG",{});var svt=s(jfe);eLo=r(svt,"xlm-prophetnet"),svt.forEach(t),oLo=r(yke," \u2014 "),_G=n(yke,"A",{href:!0});var lvt=s(_G);rLo=r(lvt,"XLMProphetNetModel"),lvt.forEach(t),tLo=r(yke," (XLM-ProphetNet model)"),yke.forEach(t),aLo=i(x),Q_=n(x,"LI",{});var xke=s(Q_);Dfe=n(xke,"STRONG",{});var ivt=s(Dfe);nLo=r(ivt,"xlm-roberta"),ivt.forEach(t),sLo=r(xke," \u2014 "),bG=n(xke,"A",{href:!0});var dvt=s(bG);lLo=r(dvt,"XLMRobertaModel"),dvt.forEach(t),iLo=r(xke," (XLM-RoBERTa model)"),xke.forEach(t),dLo=i(x),H_=n(x,"LI",{});var $ke=s(H_);Gfe=n($ke,"STRONG",{});var cvt=s(Gfe);cLo=r(cvt,"xlm-roberta-xl"),cvt.forEach(t),mLo=r($ke," \u2014 "),vG=n($ke,"A",{href:!0});var mvt=s(vG);fLo=r(mvt,"XLMRobertaXLModel"),mvt.forEach(t),gLo=r($ke," (XLM-RoBERTa-XL model)"),$ke.forEach(t),hLo=i(x),U_=n(x,"LI",{});var kke=s(U_);Ofe=n(kke,"STRONG",{});var fvt=s(Ofe);uLo=r(fvt,"xlnet"),fvt.forEach(t),pLo=r(kke," \u2014 "),FG=n(kke,"A",{href:!0});var gvt=s(FG);_Lo=r(gvt,"XLNetModel"),gvt.forEach(t),bLo=r(kke," (XLNet model)"),kke.forEach(t),vLo=i(x),J_=n(x,"LI",{});var Ske=s(J_);Vfe=n(Ske,"STRONG",{});var hvt=s(Vfe);FLo=r(hvt,"yolos"),hvt.forEach(t),TLo=r(Ske," \u2014 "),TG=n(Ske,"A",{href:!0});var uvt=s(TG);MLo=r(uvt,"YolosModel"),uvt.forEach(t),ELo=r(Ske," (YOLOS model)"),Ske.forEach(t),CLo=i(x),Y_=n(x,"LI",{});var Rke=s(Y_);Xfe=n(Rke,"STRONG",{});var pvt=s(Xfe);wLo=r(pvt,"yoso"),pvt.forEach(t),ALo=r(Rke," \u2014 "),MG=n(Rke,"A",{href:!0});var _vt=s(MG);LLo=r(_vt,"YosoModel"),_vt.forEach(t),yLo=r(Rke," (YOSO model)"),Rke.forEach(t),x.forEach(t),xLo=i(la),K_=n(la,"P",{});var Pke=s(K_);$Lo=r(Pke,"The model is set in evaluation mode by default using "),zfe=n(Pke,"CODE",{});var bvt=s(zfe);kLo=r(bvt,"model.eval()"),bvt.forEach(t),SLo=r(Pke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=n(Pke,"CODE",{});var vvt=s(Wfe);RLo=r(vvt,"model.train()"),vvt.forEach(t),Pke.forEach(t),PLo=i(la),T(Z_.$$.fragment,la),la.forEach(t),al.forEach(t),aze=i(m),Wi=n(m,"H2",{class:!0});var cQe=s(Wi);e2=n(cQe,"A",{id:!0,class:!0,href:!0});var Fvt=s(e2);Qfe=n(Fvt,"SPAN",{});var Tvt=s(Qfe);T(Wy.$$.fragment,Tvt),Tvt.forEach(t),Fvt.forEach(t),BLo=i(cQe),Hfe=n(cQe,"SPAN",{});var Mvt=s(Hfe);ILo=r(Mvt,"AutoModelForPreTraining"),Mvt.forEach(t),cQe.forEach(t),nze=i(m),So=n(m,"DIV",{class:!0});var nl=s(So);T(Qy.$$.fragment,nl),NLo=i(nl),Qi=n(nl,"P",{});var ste=s(Qi);qLo=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EG=n(ste,"A",{href:!0});var Evt=s(EG);jLo=r(Evt,"from_pretrained()"),Evt.forEach(t),DLo=r(ste," class method or the "),CG=n(ste,"A",{href:!0});var Cvt=s(CG);GLo=r(Cvt,"from_config()"),Cvt.forEach(t),OLo=r(ste,` class
method.`),ste.forEach(t),VLo=i(nl),Hy=n(nl,"P",{});var mQe=s(Hy);XLo=r(mQe,"This class cannot be instantiated directly using "),Ufe=n(mQe,"CODE",{});var wvt=s(Ufe);zLo=r(wvt,"__init__()"),wvt.forEach(t),WLo=r(mQe," (throws an error)."),mQe.forEach(t),QLo=i(nl),dt=n(nl,"DIV",{class:!0});var T7=s(dt);T(Uy.$$.fragment,T7),HLo=i(T7),Jfe=n(T7,"P",{});var Avt=s(Jfe);ULo=r(Avt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Avt.forEach(t),JLo=i(T7),Hi=n(T7,"P",{});var lte=s(Hi);YLo=r(lte,`Note:
Loading a model from its configuration file does `),Yfe=n(lte,"STRONG",{});var Lvt=s(Yfe);KLo=r(Lvt,"not"),Lvt.forEach(t),ZLo=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=n(lte,"A",{href:!0});var yvt=s(wG);eyo=r(yvt,"from_pretrained()"),yvt.forEach(t),oyo=r(lte," to load the model weights."),lte.forEach(t),ryo=i(T7),T(o2.$$.fragment,T7),T7.forEach(t),tyo=i(nl),Ke=n(nl,"DIV",{class:!0});var ia=s(Ke);T(Jy.$$.fragment,ia),ayo=i(ia),Kfe=n(ia,"P",{});var xvt=s(Kfe);nyo=r(xvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xvt.forEach(t),syo=i(ia),Na=n(ia,"P",{});var M7=s(Na);lyo=r(M7,"The model class to instantiate is selected based on the "),Zfe=n(M7,"CODE",{});var $vt=s(Zfe);iyo=r($vt,"model_type"),$vt.forEach(t),dyo=r(M7,` property of the config object (either
passed as an argument or loaded from `),ege=n(M7,"CODE",{});var kvt=s(ege);cyo=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),myo=r(M7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(M7,"CODE",{});var Svt=s(oge);fyo=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),gyo=r(M7,":"),M7.forEach(t),hyo=i(ia),G=n(ia,"UL",{});var O=s(G);r2=n(O,"LI",{});var Bke=s(r2);rge=n(Bke,"STRONG",{});var Rvt=s(rge);uyo=r(Rvt,"albert"),Rvt.forEach(t),pyo=r(Bke," \u2014 "),AG=n(Bke,"A",{href:!0});var Pvt=s(AG);_yo=r(Pvt,"AlbertForPreTraining"),Pvt.forEach(t),byo=r(Bke," (ALBERT model)"),Bke.forEach(t),vyo=i(O),t2=n(O,"LI",{});var Ike=s(t2);tge=n(Ike,"STRONG",{});var Bvt=s(tge);Fyo=r(Bvt,"bart"),Bvt.forEach(t),Tyo=r(Ike," \u2014 "),LG=n(Ike,"A",{href:!0});var Ivt=s(LG);Myo=r(Ivt,"BartForConditionalGeneration"),Ivt.forEach(t),Eyo=r(Ike," (BART model)"),Ike.forEach(t),Cyo=i(O),a2=n(O,"LI",{});var Nke=s(a2);age=n(Nke,"STRONG",{});var Nvt=s(age);wyo=r(Nvt,"bert"),Nvt.forEach(t),Ayo=r(Nke," \u2014 "),yG=n(Nke,"A",{href:!0});var qvt=s(yG);Lyo=r(qvt,"BertForPreTraining"),qvt.forEach(t),yyo=r(Nke," (BERT model)"),Nke.forEach(t),xyo=i(O),n2=n(O,"LI",{});var qke=s(n2);nge=n(qke,"STRONG",{});var jvt=s(nge);$yo=r(jvt,"big_bird"),jvt.forEach(t),kyo=r(qke," \u2014 "),xG=n(qke,"A",{href:!0});var Dvt=s(xG);Syo=r(Dvt,"BigBirdForPreTraining"),Dvt.forEach(t),Ryo=r(qke," (BigBird model)"),qke.forEach(t),Pyo=i(O),s2=n(O,"LI",{});var jke=s(s2);sge=n(jke,"STRONG",{});var Gvt=s(sge);Byo=r(Gvt,"bloom"),Gvt.forEach(t),Iyo=r(jke," \u2014 "),$G=n(jke,"A",{href:!0});var Ovt=s($G);Nyo=r(Ovt,"BloomForCausalLM"),Ovt.forEach(t),qyo=r(jke," (BLOOM model)"),jke.forEach(t),jyo=i(O),l2=n(O,"LI",{});var Dke=s(l2);lge=n(Dke,"STRONG",{});var Vvt=s(lge);Dyo=r(Vvt,"camembert"),Vvt.forEach(t),Gyo=r(Dke," \u2014 "),kG=n(Dke,"A",{href:!0});var Xvt=s(kG);Oyo=r(Xvt,"CamembertForMaskedLM"),Xvt.forEach(t),Vyo=r(Dke," (CamemBERT model)"),Dke.forEach(t),Xyo=i(O),i2=n(O,"LI",{});var Gke=s(i2);ige=n(Gke,"STRONG",{});var zvt=s(ige);zyo=r(zvt,"ctrl"),zvt.forEach(t),Wyo=r(Gke," \u2014 "),SG=n(Gke,"A",{href:!0});var Wvt=s(SG);Qyo=r(Wvt,"CTRLLMHeadModel"),Wvt.forEach(t),Hyo=r(Gke," (CTRL model)"),Gke.forEach(t),Uyo=i(O),d2=n(O,"LI",{});var Oke=s(d2);dge=n(Oke,"STRONG",{});var Qvt=s(dge);Jyo=r(Qvt,"data2vec-text"),Qvt.forEach(t),Yyo=r(Oke," \u2014 "),RG=n(Oke,"A",{href:!0});var Hvt=s(RG);Kyo=r(Hvt,"Data2VecTextForMaskedLM"),Hvt.forEach(t),Zyo=r(Oke," (Data2VecText model)"),Oke.forEach(t),e8o=i(O),c2=n(O,"LI",{});var Vke=s(c2);cge=n(Vke,"STRONG",{});var Uvt=s(cge);o8o=r(Uvt,"deberta"),Uvt.forEach(t),r8o=r(Vke," \u2014 "),PG=n(Vke,"A",{href:!0});var Jvt=s(PG);t8o=r(Jvt,"DebertaForMaskedLM"),Jvt.forEach(t),a8o=r(Vke," (DeBERTa model)"),Vke.forEach(t),n8o=i(O),m2=n(O,"LI",{});var Xke=s(m2);mge=n(Xke,"STRONG",{});var Yvt=s(mge);s8o=r(Yvt,"deberta-v2"),Yvt.forEach(t),l8o=r(Xke," \u2014 "),BG=n(Xke,"A",{href:!0});var Kvt=s(BG);i8o=r(Kvt,"DebertaV2ForMaskedLM"),Kvt.forEach(t),d8o=r(Xke," (DeBERTa-v2 model)"),Xke.forEach(t),c8o=i(O),f2=n(O,"LI",{});var zke=s(f2);fge=n(zke,"STRONG",{});var Zvt=s(fge);m8o=r(Zvt,"distilbert"),Zvt.forEach(t),f8o=r(zke," \u2014 "),IG=n(zke,"A",{href:!0});var e1t=s(IG);g8o=r(e1t,"DistilBertForMaskedLM"),e1t.forEach(t),h8o=r(zke," (DistilBERT model)"),zke.forEach(t),u8o=i(O),g2=n(O,"LI",{});var Wke=s(g2);gge=n(Wke,"STRONG",{});var o1t=s(gge);p8o=r(o1t,"electra"),o1t.forEach(t),_8o=r(Wke," \u2014 "),NG=n(Wke,"A",{href:!0});var r1t=s(NG);b8o=r(r1t,"ElectraForPreTraining"),r1t.forEach(t),v8o=r(Wke," (ELECTRA model)"),Wke.forEach(t),F8o=i(O),h2=n(O,"LI",{});var Qke=s(h2);hge=n(Qke,"STRONG",{});var t1t=s(hge);T8o=r(t1t,"flaubert"),t1t.forEach(t),M8o=r(Qke," \u2014 "),qG=n(Qke,"A",{href:!0});var a1t=s(qG);E8o=r(a1t,"FlaubertWithLMHeadModel"),a1t.forEach(t),C8o=r(Qke," (FlauBERT model)"),Qke.forEach(t),w8o=i(O),u2=n(O,"LI",{});var Hke=s(u2);uge=n(Hke,"STRONG",{});var n1t=s(uge);A8o=r(n1t,"flava"),n1t.forEach(t),L8o=r(Hke," \u2014 "),jG=n(Hke,"A",{href:!0});var s1t=s(jG);y8o=r(s1t,"FlavaForPreTraining"),s1t.forEach(t),x8o=r(Hke," (FLAVA model)"),Hke.forEach(t),$8o=i(O),p2=n(O,"LI",{});var Uke=s(p2);pge=n(Uke,"STRONG",{});var l1t=s(pge);k8o=r(l1t,"fnet"),l1t.forEach(t),S8o=r(Uke," \u2014 "),DG=n(Uke,"A",{href:!0});var i1t=s(DG);R8o=r(i1t,"FNetForPreTraining"),i1t.forEach(t),P8o=r(Uke," (FNet model)"),Uke.forEach(t),B8o=i(O),_2=n(O,"LI",{});var Jke=s(_2);_ge=n(Jke,"STRONG",{});var d1t=s(_ge);I8o=r(d1t,"fsmt"),d1t.forEach(t),N8o=r(Jke," \u2014 "),GG=n(Jke,"A",{href:!0});var c1t=s(GG);q8o=r(c1t,"FSMTForConditionalGeneration"),c1t.forEach(t),j8o=r(Jke," (FairSeq Machine-Translation model)"),Jke.forEach(t),D8o=i(O),b2=n(O,"LI",{});var Yke=s(b2);bge=n(Yke,"STRONG",{});var m1t=s(bge);G8o=r(m1t,"funnel"),m1t.forEach(t),O8o=r(Yke," \u2014 "),OG=n(Yke,"A",{href:!0});var f1t=s(OG);V8o=r(f1t,"FunnelForPreTraining"),f1t.forEach(t),X8o=r(Yke," (Funnel Transformer model)"),Yke.forEach(t),z8o=i(O),v2=n(O,"LI",{});var Kke=s(v2);vge=n(Kke,"STRONG",{});var g1t=s(vge);W8o=r(g1t,"gpt2"),g1t.forEach(t),Q8o=r(Kke," \u2014 "),VG=n(Kke,"A",{href:!0});var h1t=s(VG);H8o=r(h1t,"GPT2LMHeadModel"),h1t.forEach(t),U8o=r(Kke," (OpenAI GPT-2 model)"),Kke.forEach(t),J8o=i(O),F2=n(O,"LI",{});var Zke=s(F2);Fge=n(Zke,"STRONG",{});var u1t=s(Fge);Y8o=r(u1t,"ibert"),u1t.forEach(t),K8o=r(Zke," \u2014 "),XG=n(Zke,"A",{href:!0});var p1t=s(XG);Z8o=r(p1t,"IBertForMaskedLM"),p1t.forEach(t),e9o=r(Zke," (I-BERT model)"),Zke.forEach(t),o9o=i(O),T2=n(O,"LI",{});var eSe=s(T2);Tge=n(eSe,"STRONG",{});var _1t=s(Tge);r9o=r(_1t,"layoutlm"),_1t.forEach(t),t9o=r(eSe," \u2014 "),zG=n(eSe,"A",{href:!0});var b1t=s(zG);a9o=r(b1t,"LayoutLMForMaskedLM"),b1t.forEach(t),n9o=r(eSe," (LayoutLM model)"),eSe.forEach(t),s9o=i(O),M2=n(O,"LI",{});var oSe=s(M2);Mge=n(oSe,"STRONG",{});var v1t=s(Mge);l9o=r(v1t,"longformer"),v1t.forEach(t),i9o=r(oSe," \u2014 "),WG=n(oSe,"A",{href:!0});var F1t=s(WG);d9o=r(F1t,"LongformerForMaskedLM"),F1t.forEach(t),c9o=r(oSe," (Longformer model)"),oSe.forEach(t),m9o=i(O),E2=n(O,"LI",{});var rSe=s(E2);Ege=n(rSe,"STRONG",{});var T1t=s(Ege);f9o=r(T1t,"lxmert"),T1t.forEach(t),g9o=r(rSe," \u2014 "),QG=n(rSe,"A",{href:!0});var M1t=s(QG);h9o=r(M1t,"LxmertForPreTraining"),M1t.forEach(t),u9o=r(rSe," (LXMERT model)"),rSe.forEach(t),p9o=i(O),C2=n(O,"LI",{});var tSe=s(C2);Cge=n(tSe,"STRONG",{});var E1t=s(Cge);_9o=r(E1t,"megatron-bert"),E1t.forEach(t),b9o=r(tSe," \u2014 "),HG=n(tSe,"A",{href:!0});var C1t=s(HG);v9o=r(C1t,"MegatronBertForPreTraining"),C1t.forEach(t),F9o=r(tSe," (Megatron-BERT model)"),tSe.forEach(t),T9o=i(O),w2=n(O,"LI",{});var aSe=s(w2);wge=n(aSe,"STRONG",{});var w1t=s(wge);M9o=r(w1t,"mobilebert"),w1t.forEach(t),E9o=r(aSe," \u2014 "),UG=n(aSe,"A",{href:!0});var A1t=s(UG);C9o=r(A1t,"MobileBertForPreTraining"),A1t.forEach(t),w9o=r(aSe," (MobileBERT model)"),aSe.forEach(t),A9o=i(O),A2=n(O,"LI",{});var nSe=s(A2);Age=n(nSe,"STRONG",{});var L1t=s(Age);L9o=r(L1t,"mpnet"),L1t.forEach(t),y9o=r(nSe," \u2014 "),JG=n(nSe,"A",{href:!0});var y1t=s(JG);x9o=r(y1t,"MPNetForMaskedLM"),y1t.forEach(t),$9o=r(nSe," (MPNet model)"),nSe.forEach(t),k9o=i(O),L2=n(O,"LI",{});var sSe=s(L2);Lge=n(sSe,"STRONG",{});var x1t=s(Lge);S9o=r(x1t,"mvp"),x1t.forEach(t),R9o=r(sSe," \u2014 "),YG=n(sSe,"A",{href:!0});var $1t=s(YG);P9o=r($1t,"MvpForConditionalGeneration"),$1t.forEach(t),B9o=r(sSe," (MVP model)"),sSe.forEach(t),I9o=i(O),y2=n(O,"LI",{});var lSe=s(y2);yge=n(lSe,"STRONG",{});var k1t=s(yge);N9o=r(k1t,"nezha"),k1t.forEach(t),q9o=r(lSe," \u2014 "),KG=n(lSe,"A",{href:!0});var S1t=s(KG);j9o=r(S1t,"NezhaForPreTraining"),S1t.forEach(t),D9o=r(lSe," (Nezha model)"),lSe.forEach(t),G9o=i(O),x2=n(O,"LI",{});var iSe=s(x2);xge=n(iSe,"STRONG",{});var R1t=s(xge);O9o=r(R1t,"openai-gpt"),R1t.forEach(t),V9o=r(iSe," \u2014 "),ZG=n(iSe,"A",{href:!0});var P1t=s(ZG);X9o=r(P1t,"OpenAIGPTLMHeadModel"),P1t.forEach(t),z9o=r(iSe," (OpenAI GPT model)"),iSe.forEach(t),W9o=i(O),$2=n(O,"LI",{});var dSe=s($2);$ge=n(dSe,"STRONG",{});var B1t=s($ge);Q9o=r(B1t,"retribert"),B1t.forEach(t),H9o=r(dSe," \u2014 "),eO=n(dSe,"A",{href:!0});var I1t=s(eO);U9o=r(I1t,"RetriBertModel"),I1t.forEach(t),J9o=r(dSe," (RetriBERT model)"),dSe.forEach(t),Y9o=i(O),k2=n(O,"LI",{});var cSe=s(k2);kge=n(cSe,"STRONG",{});var N1t=s(kge);K9o=r(N1t,"roberta"),N1t.forEach(t),Z9o=r(cSe," \u2014 "),oO=n(cSe,"A",{href:!0});var q1t=s(oO);exo=r(q1t,"RobertaForMaskedLM"),q1t.forEach(t),oxo=r(cSe," (RoBERTa model)"),cSe.forEach(t),rxo=i(O),S2=n(O,"LI",{});var mSe=s(S2);Sge=n(mSe,"STRONG",{});var j1t=s(Sge);txo=r(j1t,"splinter"),j1t.forEach(t),axo=r(mSe," \u2014 "),rO=n(mSe,"A",{href:!0});var D1t=s(rO);nxo=r(D1t,"SplinterForPreTraining"),D1t.forEach(t),sxo=r(mSe," (Splinter model)"),mSe.forEach(t),lxo=i(O),R2=n(O,"LI",{});var fSe=s(R2);Rge=n(fSe,"STRONG",{});var G1t=s(Rge);ixo=r(G1t,"squeezebert"),G1t.forEach(t),dxo=r(fSe," \u2014 "),tO=n(fSe,"A",{href:!0});var O1t=s(tO);cxo=r(O1t,"SqueezeBertForMaskedLM"),O1t.forEach(t),mxo=r(fSe," (SqueezeBERT model)"),fSe.forEach(t),fxo=i(O),P2=n(O,"LI",{});var gSe=s(P2);Pge=n(gSe,"STRONG",{});var V1t=s(Pge);gxo=r(V1t,"t5"),V1t.forEach(t),hxo=r(gSe," \u2014 "),aO=n(gSe,"A",{href:!0});var X1t=s(aO);uxo=r(X1t,"T5ForConditionalGeneration"),X1t.forEach(t),pxo=r(gSe," (T5 model)"),gSe.forEach(t),_xo=i(O),B2=n(O,"LI",{});var hSe=s(B2);Bge=n(hSe,"STRONG",{});var z1t=s(Bge);bxo=r(z1t,"tapas"),z1t.forEach(t),vxo=r(hSe," \u2014 "),nO=n(hSe,"A",{href:!0});var W1t=s(nO);Fxo=r(W1t,"TapasForMaskedLM"),W1t.forEach(t),Txo=r(hSe," (TAPAS model)"),hSe.forEach(t),Mxo=i(O),I2=n(O,"LI",{});var uSe=s(I2);Ige=n(uSe,"STRONG",{});var Q1t=s(Ige);Exo=r(Q1t,"transfo-xl"),Q1t.forEach(t),Cxo=r(uSe," \u2014 "),sO=n(uSe,"A",{href:!0});var H1t=s(sO);wxo=r(H1t,"TransfoXLLMHeadModel"),H1t.forEach(t),Axo=r(uSe," (Transformer-XL model)"),uSe.forEach(t),Lxo=i(O),N2=n(O,"LI",{});var pSe=s(N2);Nge=n(pSe,"STRONG",{});var U1t=s(Nge);yxo=r(U1t,"unispeech"),U1t.forEach(t),xxo=r(pSe," \u2014 "),lO=n(pSe,"A",{href:!0});var J1t=s(lO);$xo=r(J1t,"UniSpeechForPreTraining"),J1t.forEach(t),kxo=r(pSe," (UniSpeech model)"),pSe.forEach(t),Sxo=i(O),q2=n(O,"LI",{});var _Se=s(q2);qge=n(_Se,"STRONG",{});var Y1t=s(qge);Rxo=r(Y1t,"unispeech-sat"),Y1t.forEach(t),Pxo=r(_Se," \u2014 "),iO=n(_Se,"A",{href:!0});var K1t=s(iO);Bxo=r(K1t,"UniSpeechSatForPreTraining"),K1t.forEach(t),Ixo=r(_Se," (UniSpeechSat model)"),_Se.forEach(t),Nxo=i(O),j2=n(O,"LI",{});var bSe=s(j2);jge=n(bSe,"STRONG",{});var Z1t=s(jge);qxo=r(Z1t,"visual_bert"),Z1t.forEach(t),jxo=r(bSe," \u2014 "),dO=n(bSe,"A",{href:!0});var eFt=s(dO);Dxo=r(eFt,"VisualBertForPreTraining"),eFt.forEach(t),Gxo=r(bSe," (VisualBERT model)"),bSe.forEach(t),Oxo=i(O),D2=n(O,"LI",{});var vSe=s(D2);Dge=n(vSe,"STRONG",{});var oFt=s(Dge);Vxo=r(oFt,"vit_mae"),oFt.forEach(t),Xxo=r(vSe," \u2014 "),cO=n(vSe,"A",{href:!0});var rFt=s(cO);zxo=r(rFt,"ViTMAEForPreTraining"),rFt.forEach(t),Wxo=r(vSe," (ViTMAE model)"),vSe.forEach(t),Qxo=i(O),G2=n(O,"LI",{});var FSe=s(G2);Gge=n(FSe,"STRONG",{});var tFt=s(Gge);Hxo=r(tFt,"wav2vec2"),tFt.forEach(t),Uxo=r(FSe," \u2014 "),mO=n(FSe,"A",{href:!0});var aFt=s(mO);Jxo=r(aFt,"Wav2Vec2ForPreTraining"),aFt.forEach(t),Yxo=r(FSe," (Wav2Vec2 model)"),FSe.forEach(t),Kxo=i(O),O2=n(O,"LI",{});var TSe=s(O2);Oge=n(TSe,"STRONG",{});var nFt=s(Oge);Zxo=r(nFt,"wav2vec2-conformer"),nFt.forEach(t),e$o=r(TSe," \u2014 "),fO=n(TSe,"A",{href:!0});var sFt=s(fO);o$o=r(sFt,"Wav2Vec2ConformerForPreTraining"),sFt.forEach(t),r$o=r(TSe," (Wav2Vec2-Conformer model)"),TSe.forEach(t),t$o=i(O),V2=n(O,"LI",{});var MSe=s(V2);Vge=n(MSe,"STRONG",{});var lFt=s(Vge);a$o=r(lFt,"xlm"),lFt.forEach(t),n$o=r(MSe," \u2014 "),gO=n(MSe,"A",{href:!0});var iFt=s(gO);s$o=r(iFt,"XLMWithLMHeadModel"),iFt.forEach(t),l$o=r(MSe," (XLM model)"),MSe.forEach(t),i$o=i(O),X2=n(O,"LI",{});var ESe=s(X2);Xge=n(ESe,"STRONG",{});var dFt=s(Xge);d$o=r(dFt,"xlm-roberta"),dFt.forEach(t),c$o=r(ESe," \u2014 "),hO=n(ESe,"A",{href:!0});var cFt=s(hO);m$o=r(cFt,"XLMRobertaForMaskedLM"),cFt.forEach(t),f$o=r(ESe," (XLM-RoBERTa model)"),ESe.forEach(t),g$o=i(O),z2=n(O,"LI",{});var CSe=s(z2);zge=n(CSe,"STRONG",{});var mFt=s(zge);h$o=r(mFt,"xlm-roberta-xl"),mFt.forEach(t),u$o=r(CSe," \u2014 "),uO=n(CSe,"A",{href:!0});var fFt=s(uO);p$o=r(fFt,"XLMRobertaXLForMaskedLM"),fFt.forEach(t),_$o=r(CSe," (XLM-RoBERTa-XL model)"),CSe.forEach(t),b$o=i(O),W2=n(O,"LI",{});var wSe=s(W2);Wge=n(wSe,"STRONG",{});var gFt=s(Wge);v$o=r(gFt,"xlnet"),gFt.forEach(t),F$o=r(wSe," \u2014 "),pO=n(wSe,"A",{href:!0});var hFt=s(pO);T$o=r(hFt,"XLNetLMHeadModel"),hFt.forEach(t),M$o=r(wSe," (XLNet model)"),wSe.forEach(t),O.forEach(t),E$o=i(ia),Q2=n(ia,"P",{});var ASe=s(Q2);C$o=r(ASe,"The model is set in evaluation mode by default using "),Qge=n(ASe,"CODE",{});var uFt=s(Qge);w$o=r(uFt,"model.eval()"),uFt.forEach(t),A$o=r(ASe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=n(ASe,"CODE",{});var pFt=s(Hge);L$o=r(pFt,"model.train()"),pFt.forEach(t),ASe.forEach(t),y$o=i(ia),T(H2.$$.fragment,ia),ia.forEach(t),nl.forEach(t),sze=i(m),Ui=n(m,"H2",{class:!0});var fQe=s(Ui);U2=n(fQe,"A",{id:!0,class:!0,href:!0});var _Ft=s(U2);Uge=n(_Ft,"SPAN",{});var bFt=s(Uge);T(Yy.$$.fragment,bFt),bFt.forEach(t),_Ft.forEach(t),x$o=i(fQe),Jge=n(fQe,"SPAN",{});var vFt=s(Jge);$$o=r(vFt,"AutoModelForCausalLM"),vFt.forEach(t),fQe.forEach(t),lze=i(m),Ro=n(m,"DIV",{class:!0});var sl=s(Ro);T(Ky.$$.fragment,sl),k$o=i(sl),Ji=n(sl,"P",{});var ite=s(Ji);S$o=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_O=n(ite,"A",{href:!0});var FFt=s(_O);R$o=r(FFt,"from_pretrained()"),FFt.forEach(t),P$o=r(ite," class method or the "),bO=n(ite,"A",{href:!0});var TFt=s(bO);B$o=r(TFt,"from_config()"),TFt.forEach(t),I$o=r(ite,` class
method.`),ite.forEach(t),N$o=i(sl),Zy=n(sl,"P",{});var gQe=s(Zy);q$o=r(gQe,"This class cannot be instantiated directly using "),Yge=n(gQe,"CODE",{});var MFt=s(Yge);j$o=r(MFt,"__init__()"),MFt.forEach(t),D$o=r(gQe," (throws an error)."),gQe.forEach(t),G$o=i(sl),ct=n(sl,"DIV",{class:!0});var E7=s(ct);T(e8.$$.fragment,E7),O$o=i(E7),Kge=n(E7,"P",{});var EFt=s(Kge);V$o=r(EFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EFt.forEach(t),X$o=i(E7),Yi=n(E7,"P",{});var dte=s(Yi);z$o=r(dte,`Note:
Loading a model from its configuration file does `),Zge=n(dte,"STRONG",{});var CFt=s(Zge);W$o=r(CFt,"not"),CFt.forEach(t),Q$o=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=n(dte,"A",{href:!0});var wFt=s(vO);H$o=r(wFt,"from_pretrained()"),wFt.forEach(t),U$o=r(dte," to load the model weights."),dte.forEach(t),J$o=i(E7),T(J2.$$.fragment,E7),E7.forEach(t),Y$o=i(sl),Ze=n(sl,"DIV",{class:!0});var da=s(Ze);T(o8.$$.fragment,da),K$o=i(da),ehe=n(da,"P",{});var AFt=s(ehe);Z$o=r(AFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AFt.forEach(t),eko=i(da),qa=n(da,"P",{});var C7=s(qa);oko=r(C7,"The model class to instantiate is selected based on the "),ohe=n(C7,"CODE",{});var LFt=s(ohe);rko=r(LFt,"model_type"),LFt.forEach(t),tko=r(C7,` property of the config object (either
passed as an argument or loaded from `),rhe=n(C7,"CODE",{});var yFt=s(rhe);ako=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),nko=r(C7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(C7,"CODE",{});var xFt=s(the);sko=r(xFt,"pretrained_model_name_or_path"),xFt.forEach(t),lko=r(C7,":"),C7.forEach(t),iko=i(da),z=n(da,"UL",{});var W=s(z);Y2=n(W,"LI",{});var LSe=s(Y2);ahe=n(LSe,"STRONG",{});var $Ft=s(ahe);dko=r($Ft,"bart"),$Ft.forEach(t),cko=r(LSe," \u2014 "),FO=n(LSe,"A",{href:!0});var kFt=s(FO);mko=r(kFt,"BartForCausalLM"),kFt.forEach(t),fko=r(LSe," (BART model)"),LSe.forEach(t),gko=i(W),K2=n(W,"LI",{});var ySe=s(K2);nhe=n(ySe,"STRONG",{});var SFt=s(nhe);hko=r(SFt,"bert"),SFt.forEach(t),uko=r(ySe," \u2014 "),TO=n(ySe,"A",{href:!0});var RFt=s(TO);pko=r(RFt,"BertLMHeadModel"),RFt.forEach(t),_ko=r(ySe," (BERT model)"),ySe.forEach(t),bko=i(W),Z2=n(W,"LI",{});var xSe=s(Z2);she=n(xSe,"STRONG",{});var PFt=s(she);vko=r(PFt,"bert-generation"),PFt.forEach(t),Fko=r(xSe," \u2014 "),MO=n(xSe,"A",{href:!0});var BFt=s(MO);Tko=r(BFt,"BertGenerationDecoder"),BFt.forEach(t),Mko=r(xSe," (Bert Generation model)"),xSe.forEach(t),Eko=i(W),eb=n(W,"LI",{});var $Se=s(eb);lhe=n($Se,"STRONG",{});var IFt=s(lhe);Cko=r(IFt,"big_bird"),IFt.forEach(t),wko=r($Se," \u2014 "),EO=n($Se,"A",{href:!0});var NFt=s(EO);Ako=r(NFt,"BigBirdForCausalLM"),NFt.forEach(t),Lko=r($Se," (BigBird model)"),$Se.forEach(t),yko=i(W),ob=n(W,"LI",{});var kSe=s(ob);ihe=n(kSe,"STRONG",{});var qFt=s(ihe);xko=r(qFt,"bigbird_pegasus"),qFt.forEach(t),$ko=r(kSe," \u2014 "),CO=n(kSe,"A",{href:!0});var jFt=s(CO);kko=r(jFt,"BigBirdPegasusForCausalLM"),jFt.forEach(t),Sko=r(kSe," (BigBird-Pegasus model)"),kSe.forEach(t),Rko=i(W),rb=n(W,"LI",{});var SSe=s(rb);dhe=n(SSe,"STRONG",{});var DFt=s(dhe);Pko=r(DFt,"blenderbot"),DFt.forEach(t),Bko=r(SSe," \u2014 "),wO=n(SSe,"A",{href:!0});var GFt=s(wO);Iko=r(GFt,"BlenderbotForCausalLM"),GFt.forEach(t),Nko=r(SSe," (Blenderbot model)"),SSe.forEach(t),qko=i(W),tb=n(W,"LI",{});var RSe=s(tb);che=n(RSe,"STRONG",{});var OFt=s(che);jko=r(OFt,"blenderbot-small"),OFt.forEach(t),Dko=r(RSe," \u2014 "),AO=n(RSe,"A",{href:!0});var VFt=s(AO);Gko=r(VFt,"BlenderbotSmallForCausalLM"),VFt.forEach(t),Oko=r(RSe," (BlenderbotSmall model)"),RSe.forEach(t),Vko=i(W),ab=n(W,"LI",{});var PSe=s(ab);mhe=n(PSe,"STRONG",{});var XFt=s(mhe);Xko=r(XFt,"bloom"),XFt.forEach(t),zko=r(PSe," \u2014 "),LO=n(PSe,"A",{href:!0});var zFt=s(LO);Wko=r(zFt,"BloomForCausalLM"),zFt.forEach(t),Qko=r(PSe," (BLOOM model)"),PSe.forEach(t),Hko=i(W),nb=n(W,"LI",{});var BSe=s(nb);fhe=n(BSe,"STRONG",{});var WFt=s(fhe);Uko=r(WFt,"camembert"),WFt.forEach(t),Jko=r(BSe," \u2014 "),yO=n(BSe,"A",{href:!0});var QFt=s(yO);Yko=r(QFt,"CamembertForCausalLM"),QFt.forEach(t),Kko=r(BSe," (CamemBERT model)"),BSe.forEach(t),Zko=i(W),sb=n(W,"LI",{});var ISe=s(sb);ghe=n(ISe,"STRONG",{});var HFt=s(ghe);eSo=r(HFt,"codegen"),HFt.forEach(t),oSo=r(ISe," \u2014 "),xO=n(ISe,"A",{href:!0});var UFt=s(xO);rSo=r(UFt,"CodeGenForCausalLM"),UFt.forEach(t),tSo=r(ISe," (CodeGen model)"),ISe.forEach(t),aSo=i(W),lb=n(W,"LI",{});var NSe=s(lb);hhe=n(NSe,"STRONG",{});var JFt=s(hhe);nSo=r(JFt,"ctrl"),JFt.forEach(t),sSo=r(NSe," \u2014 "),$O=n(NSe,"A",{href:!0});var YFt=s($O);lSo=r(YFt,"CTRLLMHeadModel"),YFt.forEach(t),iSo=r(NSe," (CTRL model)"),NSe.forEach(t),dSo=i(W),ib=n(W,"LI",{});var qSe=s(ib);uhe=n(qSe,"STRONG",{});var KFt=s(uhe);cSo=r(KFt,"data2vec-text"),KFt.forEach(t),mSo=r(qSe," \u2014 "),kO=n(qSe,"A",{href:!0});var ZFt=s(kO);fSo=r(ZFt,"Data2VecTextForCausalLM"),ZFt.forEach(t),gSo=r(qSe," (Data2VecText model)"),qSe.forEach(t),hSo=i(W),db=n(W,"LI",{});var jSe=s(db);phe=n(jSe,"STRONG",{});var eTt=s(phe);uSo=r(eTt,"electra"),eTt.forEach(t),pSo=r(jSe," \u2014 "),SO=n(jSe,"A",{href:!0});var oTt=s(SO);_So=r(oTt,"ElectraForCausalLM"),oTt.forEach(t),bSo=r(jSe," (ELECTRA model)"),jSe.forEach(t),vSo=i(W),cb=n(W,"LI",{});var DSe=s(cb);_he=n(DSe,"STRONG",{});var rTt=s(_he);FSo=r(rTt,"gpt2"),rTt.forEach(t),TSo=r(DSe," \u2014 "),RO=n(DSe,"A",{href:!0});var tTt=s(RO);MSo=r(tTt,"GPT2LMHeadModel"),tTt.forEach(t),ESo=r(DSe," (OpenAI GPT-2 model)"),DSe.forEach(t),CSo=i(W),mb=n(W,"LI",{});var GSe=s(mb);bhe=n(GSe,"STRONG",{});var aTt=s(bhe);wSo=r(aTt,"gpt_neo"),aTt.forEach(t),ASo=r(GSe," \u2014 "),PO=n(GSe,"A",{href:!0});var nTt=s(PO);LSo=r(nTt,"GPTNeoForCausalLM"),nTt.forEach(t),ySo=r(GSe," (GPT Neo model)"),GSe.forEach(t),xSo=i(W),fb=n(W,"LI",{});var OSe=s(fb);vhe=n(OSe,"STRONG",{});var sTt=s(vhe);$So=r(sTt,"gpt_neox"),sTt.forEach(t),kSo=r(OSe," \u2014 "),BO=n(OSe,"A",{href:!0});var lTt=s(BO);SSo=r(lTt,"GPTNeoXForCausalLM"),lTt.forEach(t),RSo=r(OSe," (GPT NeoX model)"),OSe.forEach(t),PSo=i(W),gb=n(W,"LI",{});var VSe=s(gb);Fhe=n(VSe,"STRONG",{});var iTt=s(Fhe);BSo=r(iTt,"gptj"),iTt.forEach(t),ISo=r(VSe," \u2014 "),IO=n(VSe,"A",{href:!0});var dTt=s(IO);NSo=r(dTt,"GPTJForCausalLM"),dTt.forEach(t),qSo=r(VSe," (GPT-J model)"),VSe.forEach(t),jSo=i(W),hb=n(W,"LI",{});var XSe=s(hb);The=n(XSe,"STRONG",{});var cTt=s(The);DSo=r(cTt,"marian"),cTt.forEach(t),GSo=r(XSe," \u2014 "),NO=n(XSe,"A",{href:!0});var mTt=s(NO);OSo=r(mTt,"MarianForCausalLM"),mTt.forEach(t),VSo=r(XSe," (Marian model)"),XSe.forEach(t),XSo=i(W),ub=n(W,"LI",{});var zSe=s(ub);Mhe=n(zSe,"STRONG",{});var fTt=s(Mhe);zSo=r(fTt,"mbart"),fTt.forEach(t),WSo=r(zSe," \u2014 "),qO=n(zSe,"A",{href:!0});var gTt=s(qO);QSo=r(gTt,"MBartForCausalLM"),gTt.forEach(t),HSo=r(zSe," (mBART model)"),zSe.forEach(t),USo=i(W),pb=n(W,"LI",{});var WSe=s(pb);Ehe=n(WSe,"STRONG",{});var hTt=s(Ehe);JSo=r(hTt,"megatron-bert"),hTt.forEach(t),YSo=r(WSe," \u2014 "),jO=n(WSe,"A",{href:!0});var uTt=s(jO);KSo=r(uTt,"MegatronBertForCausalLM"),uTt.forEach(t),ZSo=r(WSe," (Megatron-BERT model)"),WSe.forEach(t),eRo=i(W),_b=n(W,"LI",{});var QSe=s(_b);Che=n(QSe,"STRONG",{});var pTt=s(Che);oRo=r(pTt,"mvp"),pTt.forEach(t),rRo=r(QSe," \u2014 "),DO=n(QSe,"A",{href:!0});var _Tt=s(DO);tRo=r(_Tt,"MvpForCausalLM"),_Tt.forEach(t),aRo=r(QSe," (MVP model)"),QSe.forEach(t),nRo=i(W),bb=n(W,"LI",{});var HSe=s(bb);whe=n(HSe,"STRONG",{});var bTt=s(whe);sRo=r(bTt,"openai-gpt"),bTt.forEach(t),lRo=r(HSe," \u2014 "),GO=n(HSe,"A",{href:!0});var vTt=s(GO);iRo=r(vTt,"OpenAIGPTLMHeadModel"),vTt.forEach(t),dRo=r(HSe," (OpenAI GPT model)"),HSe.forEach(t),cRo=i(W),vb=n(W,"LI",{});var USe=s(vb);Ahe=n(USe,"STRONG",{});var FTt=s(Ahe);mRo=r(FTt,"opt"),FTt.forEach(t),fRo=r(USe," \u2014 "),OO=n(USe,"A",{href:!0});var TTt=s(OO);gRo=r(TTt,"OPTForCausalLM"),TTt.forEach(t),hRo=r(USe," (OPT model)"),USe.forEach(t),uRo=i(W),Fb=n(W,"LI",{});var JSe=s(Fb);Lhe=n(JSe,"STRONG",{});var MTt=s(Lhe);pRo=r(MTt,"pegasus"),MTt.forEach(t),_Ro=r(JSe," \u2014 "),VO=n(JSe,"A",{href:!0});var ETt=s(VO);bRo=r(ETt,"PegasusForCausalLM"),ETt.forEach(t),vRo=r(JSe," (Pegasus model)"),JSe.forEach(t),FRo=i(W),Tb=n(W,"LI",{});var YSe=s(Tb);yhe=n(YSe,"STRONG",{});var CTt=s(yhe);TRo=r(CTt,"plbart"),CTt.forEach(t),MRo=r(YSe," \u2014 "),XO=n(YSe,"A",{href:!0});var wTt=s(XO);ERo=r(wTt,"PLBartForCausalLM"),wTt.forEach(t),CRo=r(YSe," (PLBart model)"),YSe.forEach(t),wRo=i(W),Mb=n(W,"LI",{});var KSe=s(Mb);xhe=n(KSe,"STRONG",{});var ATt=s(xhe);ARo=r(ATt,"prophetnet"),ATt.forEach(t),LRo=r(KSe," \u2014 "),zO=n(KSe,"A",{href:!0});var LTt=s(zO);yRo=r(LTt,"ProphetNetForCausalLM"),LTt.forEach(t),xRo=r(KSe," (ProphetNet model)"),KSe.forEach(t),$Ro=i(W),Eb=n(W,"LI",{});var ZSe=s(Eb);$he=n(ZSe,"STRONG",{});var yTt=s($he);kRo=r(yTt,"qdqbert"),yTt.forEach(t),SRo=r(ZSe," \u2014 "),WO=n(ZSe,"A",{href:!0});var xTt=s(WO);RRo=r(xTt,"QDQBertLMHeadModel"),xTt.forEach(t),PRo=r(ZSe," (QDQBert model)"),ZSe.forEach(t),BRo=i(W),Cb=n(W,"LI",{});var eRe=s(Cb);khe=n(eRe,"STRONG",{});var $Tt=s(khe);IRo=r($Tt,"reformer"),$Tt.forEach(t),NRo=r(eRe," \u2014 "),QO=n(eRe,"A",{href:!0});var kTt=s(QO);qRo=r(kTt,"ReformerModelWithLMHead"),kTt.forEach(t),jRo=r(eRe," (Reformer model)"),eRe.forEach(t),DRo=i(W),wb=n(W,"LI",{});var oRe=s(wb);She=n(oRe,"STRONG",{});var STt=s(She);GRo=r(STt,"rembert"),STt.forEach(t),ORo=r(oRe," \u2014 "),HO=n(oRe,"A",{href:!0});var RTt=s(HO);VRo=r(RTt,"RemBertForCausalLM"),RTt.forEach(t),XRo=r(oRe," (RemBERT model)"),oRe.forEach(t),zRo=i(W),Ab=n(W,"LI",{});var rRe=s(Ab);Rhe=n(rRe,"STRONG",{});var PTt=s(Rhe);WRo=r(PTt,"roberta"),PTt.forEach(t),QRo=r(rRe," \u2014 "),UO=n(rRe,"A",{href:!0});var BTt=s(UO);HRo=r(BTt,"RobertaForCausalLM"),BTt.forEach(t),URo=r(rRe," (RoBERTa model)"),rRe.forEach(t),JRo=i(W),Lb=n(W,"LI",{});var tRe=s(Lb);Phe=n(tRe,"STRONG",{});var ITt=s(Phe);YRo=r(ITt,"roformer"),ITt.forEach(t),KRo=r(tRe," \u2014 "),JO=n(tRe,"A",{href:!0});var NTt=s(JO);ZRo=r(NTt,"RoFormerForCausalLM"),NTt.forEach(t),ePo=r(tRe," (RoFormer model)"),tRe.forEach(t),oPo=i(W),yb=n(W,"LI",{});var aRe=s(yb);Bhe=n(aRe,"STRONG",{});var qTt=s(Bhe);rPo=r(qTt,"speech_to_text_2"),qTt.forEach(t),tPo=r(aRe," \u2014 "),YO=n(aRe,"A",{href:!0});var jTt=s(YO);aPo=r(jTt,"Speech2Text2ForCausalLM"),jTt.forEach(t),nPo=r(aRe," (Speech2Text2 model)"),aRe.forEach(t),sPo=i(W),xb=n(W,"LI",{});var nRe=s(xb);Ihe=n(nRe,"STRONG",{});var DTt=s(Ihe);lPo=r(DTt,"transfo-xl"),DTt.forEach(t),iPo=r(nRe," \u2014 "),KO=n(nRe,"A",{href:!0});var GTt=s(KO);dPo=r(GTt,"TransfoXLLMHeadModel"),GTt.forEach(t),cPo=r(nRe," (Transformer-XL model)"),nRe.forEach(t),mPo=i(W),$b=n(W,"LI",{});var sRe=s($b);Nhe=n(sRe,"STRONG",{});var OTt=s(Nhe);fPo=r(OTt,"trocr"),OTt.forEach(t),gPo=r(sRe," \u2014 "),ZO=n(sRe,"A",{href:!0});var VTt=s(ZO);hPo=r(VTt,"TrOCRForCausalLM"),VTt.forEach(t),uPo=r(sRe," (TrOCR model)"),sRe.forEach(t),pPo=i(W),kb=n(W,"LI",{});var lRe=s(kb);qhe=n(lRe,"STRONG",{});var XTt=s(qhe);_Po=r(XTt,"xglm"),XTt.forEach(t),bPo=r(lRe," \u2014 "),eV=n(lRe,"A",{href:!0});var zTt=s(eV);vPo=r(zTt,"XGLMForCausalLM"),zTt.forEach(t),FPo=r(lRe," (XGLM model)"),lRe.forEach(t),TPo=i(W),Sb=n(W,"LI",{});var iRe=s(Sb);jhe=n(iRe,"STRONG",{});var WTt=s(jhe);MPo=r(WTt,"xlm"),WTt.forEach(t),EPo=r(iRe," \u2014 "),oV=n(iRe,"A",{href:!0});var QTt=s(oV);CPo=r(QTt,"XLMWithLMHeadModel"),QTt.forEach(t),wPo=r(iRe," (XLM model)"),iRe.forEach(t),APo=i(W),Rb=n(W,"LI",{});var dRe=s(Rb);Dhe=n(dRe,"STRONG",{});var HTt=s(Dhe);LPo=r(HTt,"xlm-prophetnet"),HTt.forEach(t),yPo=r(dRe," \u2014 "),rV=n(dRe,"A",{href:!0});var UTt=s(rV);xPo=r(UTt,"XLMProphetNetForCausalLM"),UTt.forEach(t),$Po=r(dRe," (XLM-ProphetNet model)"),dRe.forEach(t),kPo=i(W),Pb=n(W,"LI",{});var cRe=s(Pb);Ghe=n(cRe,"STRONG",{});var JTt=s(Ghe);SPo=r(JTt,"xlm-roberta"),JTt.forEach(t),RPo=r(cRe," \u2014 "),tV=n(cRe,"A",{href:!0});var YTt=s(tV);PPo=r(YTt,"XLMRobertaForCausalLM"),YTt.forEach(t),BPo=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),IPo=i(W),Bb=n(W,"LI",{});var mRe=s(Bb);Ohe=n(mRe,"STRONG",{});var KTt=s(Ohe);NPo=r(KTt,"xlm-roberta-xl"),KTt.forEach(t),qPo=r(mRe," \u2014 "),aV=n(mRe,"A",{href:!0});var ZTt=s(aV);jPo=r(ZTt,"XLMRobertaXLForCausalLM"),ZTt.forEach(t),DPo=r(mRe," (XLM-RoBERTa-XL model)"),mRe.forEach(t),GPo=i(W),Ib=n(W,"LI",{});var fRe=s(Ib);Vhe=n(fRe,"STRONG",{});var eMt=s(Vhe);OPo=r(eMt,"xlnet"),eMt.forEach(t),VPo=r(fRe," \u2014 "),nV=n(fRe,"A",{href:!0});var oMt=s(nV);XPo=r(oMt,"XLNetLMHeadModel"),oMt.forEach(t),zPo=r(fRe," (XLNet model)"),fRe.forEach(t),W.forEach(t),WPo=i(da),Nb=n(da,"P",{});var gRe=s(Nb);QPo=r(gRe,"The model is set in evaluation mode by default using "),Xhe=n(gRe,"CODE",{});var rMt=s(Xhe);HPo=r(rMt,"model.eval()"),rMt.forEach(t),UPo=r(gRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=n(gRe,"CODE",{});var tMt=s(zhe);JPo=r(tMt,"model.train()"),tMt.forEach(t),gRe.forEach(t),YPo=i(da),T(qb.$$.fragment,da),da.forEach(t),sl.forEach(t),ize=i(m),Ki=n(m,"H2",{class:!0});var hQe=s(Ki);jb=n(hQe,"A",{id:!0,class:!0,href:!0});var aMt=s(jb);Whe=n(aMt,"SPAN",{});var nMt=s(Whe);T(r8.$$.fragment,nMt),nMt.forEach(t),aMt.forEach(t),KPo=i(hQe),Qhe=n(hQe,"SPAN",{});var sMt=s(Qhe);ZPo=r(sMt,"AutoModelForMaskedLM"),sMt.forEach(t),hQe.forEach(t),dze=i(m),Po=n(m,"DIV",{class:!0});var ll=s(Po);T(t8.$$.fragment,ll),eBo=i(ll),Zi=n(ll,"P",{});var cte=s(Zi);oBo=r(cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sV=n(cte,"A",{href:!0});var lMt=s(sV);rBo=r(lMt,"from_pretrained()"),lMt.forEach(t),tBo=r(cte," class method or the "),lV=n(cte,"A",{href:!0});var iMt=s(lV);aBo=r(iMt,"from_config()"),iMt.forEach(t),nBo=r(cte,` class
method.`),cte.forEach(t),sBo=i(ll),a8=n(ll,"P",{});var uQe=s(a8);lBo=r(uQe,"This class cannot be instantiated directly using "),Hhe=n(uQe,"CODE",{});var dMt=s(Hhe);iBo=r(dMt,"__init__()"),dMt.forEach(t),dBo=r(uQe," (throws an error)."),uQe.forEach(t),cBo=i(ll),mt=n(ll,"DIV",{class:!0});var w7=s(mt);T(n8.$$.fragment,w7),mBo=i(w7),Uhe=n(w7,"P",{});var cMt=s(Uhe);fBo=r(cMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cMt.forEach(t),gBo=i(w7),ed=n(w7,"P",{});var mte=s(ed);hBo=r(mte,`Note:
Loading a model from its configuration file does `),Jhe=n(mte,"STRONG",{});var mMt=s(Jhe);uBo=r(mMt,"not"),mMt.forEach(t),pBo=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),iV=n(mte,"A",{href:!0});var fMt=s(iV);_Bo=r(fMt,"from_pretrained()"),fMt.forEach(t),bBo=r(mte," to load the model weights."),mte.forEach(t),vBo=i(w7),T(Db.$$.fragment,w7),w7.forEach(t),FBo=i(ll),eo=n(ll,"DIV",{class:!0});var ca=s(eo);T(s8.$$.fragment,ca),TBo=i(ca),Yhe=n(ca,"P",{});var gMt=s(Yhe);MBo=r(gMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gMt.forEach(t),EBo=i(ca),ja=n(ca,"P",{});var A7=s(ja);CBo=r(A7,"The model class to instantiate is selected based on the "),Khe=n(A7,"CODE",{});var hMt=s(Khe);wBo=r(hMt,"model_type"),hMt.forEach(t),ABo=r(A7,` property of the config object (either
passed as an argument or loaded from `),Zhe=n(A7,"CODE",{});var uMt=s(Zhe);LBo=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),yBo=r(A7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(A7,"CODE",{});var pMt=s(eue);xBo=r(pMt,"pretrained_model_name_or_path"),pMt.forEach(t),$Bo=r(A7,":"),A7.forEach(t),kBo=i(ca),Q=n(ca,"UL",{});var H=s(Q);Gb=n(H,"LI",{});var hRe=s(Gb);oue=n(hRe,"STRONG",{});var _Mt=s(oue);SBo=r(_Mt,"albert"),_Mt.forEach(t),RBo=r(hRe," \u2014 "),dV=n(hRe,"A",{href:!0});var bMt=s(dV);PBo=r(bMt,"AlbertForMaskedLM"),bMt.forEach(t),BBo=r(hRe," (ALBERT model)"),hRe.forEach(t),IBo=i(H),Ob=n(H,"LI",{});var uRe=s(Ob);rue=n(uRe,"STRONG",{});var vMt=s(rue);NBo=r(vMt,"bart"),vMt.forEach(t),qBo=r(uRe," \u2014 "),cV=n(uRe,"A",{href:!0});var FMt=s(cV);jBo=r(FMt,"BartForConditionalGeneration"),FMt.forEach(t),DBo=r(uRe," (BART model)"),uRe.forEach(t),GBo=i(H),Vb=n(H,"LI",{});var pRe=s(Vb);tue=n(pRe,"STRONG",{});var TMt=s(tue);OBo=r(TMt,"bert"),TMt.forEach(t),VBo=r(pRe," \u2014 "),mV=n(pRe,"A",{href:!0});var MMt=s(mV);XBo=r(MMt,"BertForMaskedLM"),MMt.forEach(t),zBo=r(pRe," (BERT model)"),pRe.forEach(t),WBo=i(H),Xb=n(H,"LI",{});var _Re=s(Xb);aue=n(_Re,"STRONG",{});var EMt=s(aue);QBo=r(EMt,"big_bird"),EMt.forEach(t),HBo=r(_Re," \u2014 "),fV=n(_Re,"A",{href:!0});var CMt=s(fV);UBo=r(CMt,"BigBirdForMaskedLM"),CMt.forEach(t),JBo=r(_Re," (BigBird model)"),_Re.forEach(t),YBo=i(H),zb=n(H,"LI",{});var bRe=s(zb);nue=n(bRe,"STRONG",{});var wMt=s(nue);KBo=r(wMt,"camembert"),wMt.forEach(t),ZBo=r(bRe," \u2014 "),gV=n(bRe,"A",{href:!0});var AMt=s(gV);eIo=r(AMt,"CamembertForMaskedLM"),AMt.forEach(t),oIo=r(bRe," (CamemBERT model)"),bRe.forEach(t),rIo=i(H),Wb=n(H,"LI",{});var vRe=s(Wb);sue=n(vRe,"STRONG",{});var LMt=s(sue);tIo=r(LMt,"convbert"),LMt.forEach(t),aIo=r(vRe," \u2014 "),hV=n(vRe,"A",{href:!0});var yMt=s(hV);nIo=r(yMt,"ConvBertForMaskedLM"),yMt.forEach(t),sIo=r(vRe," (ConvBERT model)"),vRe.forEach(t),lIo=i(H),Qb=n(H,"LI",{});var FRe=s(Qb);lue=n(FRe,"STRONG",{});var xMt=s(lue);iIo=r(xMt,"data2vec-text"),xMt.forEach(t),dIo=r(FRe," \u2014 "),uV=n(FRe,"A",{href:!0});var $Mt=s(uV);cIo=r($Mt,"Data2VecTextForMaskedLM"),$Mt.forEach(t),mIo=r(FRe," (Data2VecText model)"),FRe.forEach(t),fIo=i(H),Hb=n(H,"LI",{});var TRe=s(Hb);iue=n(TRe,"STRONG",{});var kMt=s(iue);gIo=r(kMt,"deberta"),kMt.forEach(t),hIo=r(TRe," \u2014 "),pV=n(TRe,"A",{href:!0});var SMt=s(pV);uIo=r(SMt,"DebertaForMaskedLM"),SMt.forEach(t),pIo=r(TRe," (DeBERTa model)"),TRe.forEach(t),_Io=i(H),Ub=n(H,"LI",{});var MRe=s(Ub);due=n(MRe,"STRONG",{});var RMt=s(due);bIo=r(RMt,"deberta-v2"),RMt.forEach(t),vIo=r(MRe," \u2014 "),_V=n(MRe,"A",{href:!0});var PMt=s(_V);FIo=r(PMt,"DebertaV2ForMaskedLM"),PMt.forEach(t),TIo=r(MRe," (DeBERTa-v2 model)"),MRe.forEach(t),MIo=i(H),Jb=n(H,"LI",{});var ERe=s(Jb);cue=n(ERe,"STRONG",{});var BMt=s(cue);EIo=r(BMt,"distilbert"),BMt.forEach(t),CIo=r(ERe," \u2014 "),bV=n(ERe,"A",{href:!0});var IMt=s(bV);wIo=r(IMt,"DistilBertForMaskedLM"),IMt.forEach(t),AIo=r(ERe," (DistilBERT model)"),ERe.forEach(t),LIo=i(H),Yb=n(H,"LI",{});var CRe=s(Yb);mue=n(CRe,"STRONG",{});var NMt=s(mue);yIo=r(NMt,"electra"),NMt.forEach(t),xIo=r(CRe," \u2014 "),vV=n(CRe,"A",{href:!0});var qMt=s(vV);$Io=r(qMt,"ElectraForMaskedLM"),qMt.forEach(t),kIo=r(CRe," (ELECTRA model)"),CRe.forEach(t),SIo=i(H),Kb=n(H,"LI",{});var wRe=s(Kb);fue=n(wRe,"STRONG",{});var jMt=s(fue);RIo=r(jMt,"flaubert"),jMt.forEach(t),PIo=r(wRe," \u2014 "),FV=n(wRe,"A",{href:!0});var DMt=s(FV);BIo=r(DMt,"FlaubertWithLMHeadModel"),DMt.forEach(t),IIo=r(wRe," (FlauBERT model)"),wRe.forEach(t),NIo=i(H),Zb=n(H,"LI",{});var ARe=s(Zb);gue=n(ARe,"STRONG",{});var GMt=s(gue);qIo=r(GMt,"fnet"),GMt.forEach(t),jIo=r(ARe," \u2014 "),TV=n(ARe,"A",{href:!0});var OMt=s(TV);DIo=r(OMt,"FNetForMaskedLM"),OMt.forEach(t),GIo=r(ARe," (FNet model)"),ARe.forEach(t),OIo=i(H),ev=n(H,"LI",{});var LRe=s(ev);hue=n(LRe,"STRONG",{});var VMt=s(hue);VIo=r(VMt,"funnel"),VMt.forEach(t),XIo=r(LRe," \u2014 "),MV=n(LRe,"A",{href:!0});var XMt=s(MV);zIo=r(XMt,"FunnelForMaskedLM"),XMt.forEach(t),WIo=r(LRe," (Funnel Transformer model)"),LRe.forEach(t),QIo=i(H),ov=n(H,"LI",{});var yRe=s(ov);uue=n(yRe,"STRONG",{});var zMt=s(uue);HIo=r(zMt,"ibert"),zMt.forEach(t),UIo=r(yRe," \u2014 "),EV=n(yRe,"A",{href:!0});var WMt=s(EV);JIo=r(WMt,"IBertForMaskedLM"),WMt.forEach(t),YIo=r(yRe," (I-BERT model)"),yRe.forEach(t),KIo=i(H),rv=n(H,"LI",{});var xRe=s(rv);pue=n(xRe,"STRONG",{});var QMt=s(pue);ZIo=r(QMt,"layoutlm"),QMt.forEach(t),eNo=r(xRe," \u2014 "),CV=n(xRe,"A",{href:!0});var HMt=s(CV);oNo=r(HMt,"LayoutLMForMaskedLM"),HMt.forEach(t),rNo=r(xRe," (LayoutLM model)"),xRe.forEach(t),tNo=i(H),tv=n(H,"LI",{});var $Re=s(tv);_ue=n($Re,"STRONG",{});var UMt=s(_ue);aNo=r(UMt,"longformer"),UMt.forEach(t),nNo=r($Re," \u2014 "),wV=n($Re,"A",{href:!0});var JMt=s(wV);sNo=r(JMt,"LongformerForMaskedLM"),JMt.forEach(t),lNo=r($Re," (Longformer model)"),$Re.forEach(t),iNo=i(H),av=n(H,"LI",{});var kRe=s(av);bue=n(kRe,"STRONG",{});var YMt=s(bue);dNo=r(YMt,"luke"),YMt.forEach(t),cNo=r(kRe," \u2014 "),AV=n(kRe,"A",{href:!0});var KMt=s(AV);mNo=r(KMt,"LukeForMaskedLM"),KMt.forEach(t),fNo=r(kRe," (LUKE model)"),kRe.forEach(t),gNo=i(H),nv=n(H,"LI",{});var SRe=s(nv);vue=n(SRe,"STRONG",{});var ZMt=s(vue);hNo=r(ZMt,"mbart"),ZMt.forEach(t),uNo=r(SRe," \u2014 "),LV=n(SRe,"A",{href:!0});var e4t=s(LV);pNo=r(e4t,"MBartForConditionalGeneration"),e4t.forEach(t),_No=r(SRe," (mBART model)"),SRe.forEach(t),bNo=i(H),sv=n(H,"LI",{});var RRe=s(sv);Fue=n(RRe,"STRONG",{});var o4t=s(Fue);vNo=r(o4t,"megatron-bert"),o4t.forEach(t),FNo=r(RRe," \u2014 "),yV=n(RRe,"A",{href:!0});var r4t=s(yV);TNo=r(r4t,"MegatronBertForMaskedLM"),r4t.forEach(t),MNo=r(RRe," (Megatron-BERT model)"),RRe.forEach(t),ENo=i(H),lv=n(H,"LI",{});var PRe=s(lv);Tue=n(PRe,"STRONG",{});var t4t=s(Tue);CNo=r(t4t,"mobilebert"),t4t.forEach(t),wNo=r(PRe," \u2014 "),xV=n(PRe,"A",{href:!0});var a4t=s(xV);ANo=r(a4t,"MobileBertForMaskedLM"),a4t.forEach(t),LNo=r(PRe," (MobileBERT model)"),PRe.forEach(t),yNo=i(H),iv=n(H,"LI",{});var BRe=s(iv);Mue=n(BRe,"STRONG",{});var n4t=s(Mue);xNo=r(n4t,"mpnet"),n4t.forEach(t),$No=r(BRe," \u2014 "),$V=n(BRe,"A",{href:!0});var s4t=s($V);kNo=r(s4t,"MPNetForMaskedLM"),s4t.forEach(t),SNo=r(BRe," (MPNet model)"),BRe.forEach(t),RNo=i(H),dv=n(H,"LI",{});var IRe=s(dv);Eue=n(IRe,"STRONG",{});var l4t=s(Eue);PNo=r(l4t,"mvp"),l4t.forEach(t),BNo=r(IRe," \u2014 "),kV=n(IRe,"A",{href:!0});var i4t=s(kV);INo=r(i4t,"MvpForConditionalGeneration"),i4t.forEach(t),NNo=r(IRe," (MVP model)"),IRe.forEach(t),qNo=i(H),cv=n(H,"LI",{});var NRe=s(cv);Cue=n(NRe,"STRONG",{});var d4t=s(Cue);jNo=r(d4t,"nezha"),d4t.forEach(t),DNo=r(NRe," \u2014 "),SV=n(NRe,"A",{href:!0});var c4t=s(SV);GNo=r(c4t,"NezhaForMaskedLM"),c4t.forEach(t),ONo=r(NRe," (Nezha model)"),NRe.forEach(t),VNo=i(H),mv=n(H,"LI",{});var qRe=s(mv);wue=n(qRe,"STRONG",{});var m4t=s(wue);XNo=r(m4t,"nystromformer"),m4t.forEach(t),zNo=r(qRe," \u2014 "),RV=n(qRe,"A",{href:!0});var f4t=s(RV);WNo=r(f4t,"NystromformerForMaskedLM"),f4t.forEach(t),QNo=r(qRe," (Nystr\xF6mformer model)"),qRe.forEach(t),HNo=i(H),fv=n(H,"LI",{});var jRe=s(fv);Aue=n(jRe,"STRONG",{});var g4t=s(Aue);UNo=r(g4t,"perceiver"),g4t.forEach(t),JNo=r(jRe," \u2014 "),PV=n(jRe,"A",{href:!0});var h4t=s(PV);YNo=r(h4t,"PerceiverForMaskedLM"),h4t.forEach(t),KNo=r(jRe," (Perceiver model)"),jRe.forEach(t),ZNo=i(H),gv=n(H,"LI",{});var DRe=s(gv);Lue=n(DRe,"STRONG",{});var u4t=s(Lue);eqo=r(u4t,"qdqbert"),u4t.forEach(t),oqo=r(DRe," \u2014 "),BV=n(DRe,"A",{href:!0});var p4t=s(BV);rqo=r(p4t,"QDQBertForMaskedLM"),p4t.forEach(t),tqo=r(DRe," (QDQBert model)"),DRe.forEach(t),aqo=i(H),hv=n(H,"LI",{});var GRe=s(hv);yue=n(GRe,"STRONG",{});var _4t=s(yue);nqo=r(_4t,"reformer"),_4t.forEach(t),sqo=r(GRe," \u2014 "),IV=n(GRe,"A",{href:!0});var b4t=s(IV);lqo=r(b4t,"ReformerForMaskedLM"),b4t.forEach(t),iqo=r(GRe," (Reformer model)"),GRe.forEach(t),dqo=i(H),uv=n(H,"LI",{});var ORe=s(uv);xue=n(ORe,"STRONG",{});var v4t=s(xue);cqo=r(v4t,"rembert"),v4t.forEach(t),mqo=r(ORe," \u2014 "),NV=n(ORe,"A",{href:!0});var F4t=s(NV);fqo=r(F4t,"RemBertForMaskedLM"),F4t.forEach(t),gqo=r(ORe," (RemBERT model)"),ORe.forEach(t),hqo=i(H),pv=n(H,"LI",{});var VRe=s(pv);$ue=n(VRe,"STRONG",{});var T4t=s($ue);uqo=r(T4t,"roberta"),T4t.forEach(t),pqo=r(VRe," \u2014 "),qV=n(VRe,"A",{href:!0});var M4t=s(qV);_qo=r(M4t,"RobertaForMaskedLM"),M4t.forEach(t),bqo=r(VRe," (RoBERTa model)"),VRe.forEach(t),vqo=i(H),_v=n(H,"LI",{});var XRe=s(_v);kue=n(XRe,"STRONG",{});var E4t=s(kue);Fqo=r(E4t,"roformer"),E4t.forEach(t),Tqo=r(XRe," \u2014 "),jV=n(XRe,"A",{href:!0});var C4t=s(jV);Mqo=r(C4t,"RoFormerForMaskedLM"),C4t.forEach(t),Eqo=r(XRe," (RoFormer model)"),XRe.forEach(t),Cqo=i(H),bv=n(H,"LI",{});var zRe=s(bv);Sue=n(zRe,"STRONG",{});var w4t=s(Sue);wqo=r(w4t,"squeezebert"),w4t.forEach(t),Aqo=r(zRe," \u2014 "),DV=n(zRe,"A",{href:!0});var A4t=s(DV);Lqo=r(A4t,"SqueezeBertForMaskedLM"),A4t.forEach(t),yqo=r(zRe," (SqueezeBERT model)"),zRe.forEach(t),xqo=i(H),vv=n(H,"LI",{});var WRe=s(vv);Rue=n(WRe,"STRONG",{});var L4t=s(Rue);$qo=r(L4t,"tapas"),L4t.forEach(t),kqo=r(WRe," \u2014 "),GV=n(WRe,"A",{href:!0});var y4t=s(GV);Sqo=r(y4t,"TapasForMaskedLM"),y4t.forEach(t),Rqo=r(WRe," (TAPAS model)"),WRe.forEach(t),Pqo=i(H),Fv=n(H,"LI",{});var QRe=s(Fv);Pue=n(QRe,"STRONG",{});var x4t=s(Pue);Bqo=r(x4t,"wav2vec2"),x4t.forEach(t),Iqo=r(QRe," \u2014 "),Bue=n(QRe,"CODE",{});var $4t=s(Bue);Nqo=r($4t,"Wav2Vec2ForMaskedLM"),$4t.forEach(t),qqo=r(QRe," (Wav2Vec2 model)"),QRe.forEach(t),jqo=i(H),Tv=n(H,"LI",{});var HRe=s(Tv);Iue=n(HRe,"STRONG",{});var k4t=s(Iue);Dqo=r(k4t,"xlm"),k4t.forEach(t),Gqo=r(HRe," \u2014 "),OV=n(HRe,"A",{href:!0});var S4t=s(OV);Oqo=r(S4t,"XLMWithLMHeadModel"),S4t.forEach(t),Vqo=r(HRe," (XLM model)"),HRe.forEach(t),Xqo=i(H),Mv=n(H,"LI",{});var URe=s(Mv);Nue=n(URe,"STRONG",{});var R4t=s(Nue);zqo=r(R4t,"xlm-roberta"),R4t.forEach(t),Wqo=r(URe," \u2014 "),VV=n(URe,"A",{href:!0});var P4t=s(VV);Qqo=r(P4t,"XLMRobertaForMaskedLM"),P4t.forEach(t),Hqo=r(URe," (XLM-RoBERTa model)"),URe.forEach(t),Uqo=i(H),Ev=n(H,"LI",{});var JRe=s(Ev);que=n(JRe,"STRONG",{});var B4t=s(que);Jqo=r(B4t,"xlm-roberta-xl"),B4t.forEach(t),Yqo=r(JRe," \u2014 "),XV=n(JRe,"A",{href:!0});var I4t=s(XV);Kqo=r(I4t,"XLMRobertaXLForMaskedLM"),I4t.forEach(t),Zqo=r(JRe," (XLM-RoBERTa-XL model)"),JRe.forEach(t),ejo=i(H),Cv=n(H,"LI",{});var YRe=s(Cv);jue=n(YRe,"STRONG",{});var N4t=s(jue);ojo=r(N4t,"yoso"),N4t.forEach(t),rjo=r(YRe," \u2014 "),zV=n(YRe,"A",{href:!0});var q4t=s(zV);tjo=r(q4t,"YosoForMaskedLM"),q4t.forEach(t),ajo=r(YRe," (YOSO model)"),YRe.forEach(t),H.forEach(t),njo=i(ca),wv=n(ca,"P",{});var KRe=s(wv);sjo=r(KRe,"The model is set in evaluation mode by default using "),Due=n(KRe,"CODE",{});var j4t=s(Due);ljo=r(j4t,"model.eval()"),j4t.forEach(t),ijo=r(KRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(KRe,"CODE",{});var D4t=s(Gue);djo=r(D4t,"model.train()"),D4t.forEach(t),KRe.forEach(t),cjo=i(ca),T(Av.$$.fragment,ca),ca.forEach(t),ll.forEach(t),cze=i(m),od=n(m,"H2",{class:!0});var pQe=s(od);Lv=n(pQe,"A",{id:!0,class:!0,href:!0});var G4t=s(Lv);Oue=n(G4t,"SPAN",{});var O4t=s(Oue);T(l8.$$.fragment,O4t),O4t.forEach(t),G4t.forEach(t),mjo=i(pQe),Vue=n(pQe,"SPAN",{});var V4t=s(Vue);fjo=r(V4t,"AutoModelForSeq2SeqLM"),V4t.forEach(t),pQe.forEach(t),mze=i(m),Bo=n(m,"DIV",{class:!0});var il=s(Bo);T(i8.$$.fragment,il),gjo=i(il),rd=n(il,"P",{});var fte=s(rd);hjo=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WV=n(fte,"A",{href:!0});var X4t=s(WV);ujo=r(X4t,"from_pretrained()"),X4t.forEach(t),pjo=r(fte," class method or the "),QV=n(fte,"A",{href:!0});var z4t=s(QV);_jo=r(z4t,"from_config()"),z4t.forEach(t),bjo=r(fte,` class
method.`),fte.forEach(t),vjo=i(il),d8=n(il,"P",{});var _Qe=s(d8);Fjo=r(_Qe,"This class cannot be instantiated directly using "),Xue=n(_Qe,"CODE",{});var W4t=s(Xue);Tjo=r(W4t,"__init__()"),W4t.forEach(t),Mjo=r(_Qe," (throws an error)."),_Qe.forEach(t),Ejo=i(il),ft=n(il,"DIV",{class:!0});var L7=s(ft);T(c8.$$.fragment,L7),Cjo=i(L7),zue=n(L7,"P",{});var Q4t=s(zue);wjo=r(Q4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q4t.forEach(t),Ajo=i(L7),td=n(L7,"P",{});var gte=s(td);Ljo=r(gte,`Note:
Loading a model from its configuration file does `),Wue=n(gte,"STRONG",{});var H4t=s(Wue);yjo=r(H4t,"not"),H4t.forEach(t),xjo=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(gte,"A",{href:!0});var U4t=s(HV);$jo=r(U4t,"from_pretrained()"),U4t.forEach(t),kjo=r(gte," to load the model weights."),gte.forEach(t),Sjo=i(L7),T(yv.$$.fragment,L7),L7.forEach(t),Rjo=i(il),oo=n(il,"DIV",{class:!0});var ma=s(oo);T(m8.$$.fragment,ma),Pjo=i(ma),Que=n(ma,"P",{});var J4t=s(Que);Bjo=r(J4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),J4t.forEach(t),Ijo=i(ma),Da=n(ma,"P",{});var y7=s(Da);Njo=r(y7,"The model class to instantiate is selected based on the "),Hue=n(y7,"CODE",{});var Y4t=s(Hue);qjo=r(Y4t,"model_type"),Y4t.forEach(t),jjo=r(y7,` property of the config object (either
passed as an argument or loaded from `),Uue=n(y7,"CODE",{});var K4t=s(Uue);Djo=r(K4t,"pretrained_model_name_or_path"),K4t.forEach(t),Gjo=r(y7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(y7,"CODE",{});var Z4t=s(Jue);Ojo=r(Z4t,"pretrained_model_name_or_path"),Z4t.forEach(t),Vjo=r(y7,":"),y7.forEach(t),Xjo=i(ma),fe=n(ma,"UL",{});var _e=s(fe);xv=n(_e,"LI",{});var ZRe=s(xv);Yue=n(ZRe,"STRONG",{});var eEt=s(Yue);zjo=r(eEt,"bart"),eEt.forEach(t),Wjo=r(ZRe," \u2014 "),UV=n(ZRe,"A",{href:!0});var oEt=s(UV);Qjo=r(oEt,"BartForConditionalGeneration"),oEt.forEach(t),Hjo=r(ZRe," (BART model)"),ZRe.forEach(t),Ujo=i(_e),$v=n(_e,"LI",{});var ePe=s($v);Kue=n(ePe,"STRONG",{});var rEt=s(Kue);Jjo=r(rEt,"bigbird_pegasus"),rEt.forEach(t),Yjo=r(ePe," \u2014 "),JV=n(ePe,"A",{href:!0});var tEt=s(JV);Kjo=r(tEt,"BigBirdPegasusForConditionalGeneration"),tEt.forEach(t),Zjo=r(ePe," (BigBird-Pegasus model)"),ePe.forEach(t),eDo=i(_e),kv=n(_e,"LI",{});var oPe=s(kv);Zue=n(oPe,"STRONG",{});var aEt=s(Zue);oDo=r(aEt,"blenderbot"),aEt.forEach(t),rDo=r(oPe," \u2014 "),YV=n(oPe,"A",{href:!0});var nEt=s(YV);tDo=r(nEt,"BlenderbotForConditionalGeneration"),nEt.forEach(t),aDo=r(oPe," (Blenderbot model)"),oPe.forEach(t),nDo=i(_e),Sv=n(_e,"LI",{});var rPe=s(Sv);epe=n(rPe,"STRONG",{});var sEt=s(epe);sDo=r(sEt,"blenderbot-small"),sEt.forEach(t),lDo=r(rPe," \u2014 "),KV=n(rPe,"A",{href:!0});var lEt=s(KV);iDo=r(lEt,"BlenderbotSmallForConditionalGeneration"),lEt.forEach(t),dDo=r(rPe," (BlenderbotSmall model)"),rPe.forEach(t),cDo=i(_e),Rv=n(_e,"LI",{});var tPe=s(Rv);ope=n(tPe,"STRONG",{});var iEt=s(ope);mDo=r(iEt,"encoder-decoder"),iEt.forEach(t),fDo=r(tPe," \u2014 "),ZV=n(tPe,"A",{href:!0});var dEt=s(ZV);gDo=r(dEt,"EncoderDecoderModel"),dEt.forEach(t),hDo=r(tPe," (Encoder decoder model)"),tPe.forEach(t),uDo=i(_e),Pv=n(_e,"LI",{});var aPe=s(Pv);rpe=n(aPe,"STRONG",{});var cEt=s(rpe);pDo=r(cEt,"fsmt"),cEt.forEach(t),_Do=r(aPe," \u2014 "),eX=n(aPe,"A",{href:!0});var mEt=s(eX);bDo=r(mEt,"FSMTForConditionalGeneration"),mEt.forEach(t),vDo=r(aPe," (FairSeq Machine-Translation model)"),aPe.forEach(t),FDo=i(_e),Bv=n(_e,"LI",{});var nPe=s(Bv);tpe=n(nPe,"STRONG",{});var fEt=s(tpe);TDo=r(fEt,"led"),fEt.forEach(t),MDo=r(nPe," \u2014 "),oX=n(nPe,"A",{href:!0});var gEt=s(oX);EDo=r(gEt,"LEDForConditionalGeneration"),gEt.forEach(t),CDo=r(nPe," (LED model)"),nPe.forEach(t),wDo=i(_e),Iv=n(_e,"LI",{});var sPe=s(Iv);ape=n(sPe,"STRONG",{});var hEt=s(ape);ADo=r(hEt,"longt5"),hEt.forEach(t),LDo=r(sPe," \u2014 "),rX=n(sPe,"A",{href:!0});var uEt=s(rX);yDo=r(uEt,"LongT5ForConditionalGeneration"),uEt.forEach(t),xDo=r(sPe," (LongT5 model)"),sPe.forEach(t),$Do=i(_e),Nv=n(_e,"LI",{});var lPe=s(Nv);npe=n(lPe,"STRONG",{});var pEt=s(npe);kDo=r(pEt,"m2m_100"),pEt.forEach(t),SDo=r(lPe," \u2014 "),tX=n(lPe,"A",{href:!0});var _Et=s(tX);RDo=r(_Et,"M2M100ForConditionalGeneration"),_Et.forEach(t),PDo=r(lPe," (M2M100 model)"),lPe.forEach(t),BDo=i(_e),qv=n(_e,"LI",{});var iPe=s(qv);spe=n(iPe,"STRONG",{});var bEt=s(spe);IDo=r(bEt,"marian"),bEt.forEach(t),NDo=r(iPe," \u2014 "),aX=n(iPe,"A",{href:!0});var vEt=s(aX);qDo=r(vEt,"MarianMTModel"),vEt.forEach(t),jDo=r(iPe," (Marian model)"),iPe.forEach(t),DDo=i(_e),jv=n(_e,"LI",{});var dPe=s(jv);lpe=n(dPe,"STRONG",{});var FEt=s(lpe);GDo=r(FEt,"mbart"),FEt.forEach(t),ODo=r(dPe," \u2014 "),nX=n(dPe,"A",{href:!0});var TEt=s(nX);VDo=r(TEt,"MBartForConditionalGeneration"),TEt.forEach(t),XDo=r(dPe," (mBART model)"),dPe.forEach(t),zDo=i(_e),Dv=n(_e,"LI",{});var cPe=s(Dv);ipe=n(cPe,"STRONG",{});var MEt=s(ipe);WDo=r(MEt,"mt5"),MEt.forEach(t),QDo=r(cPe," \u2014 "),sX=n(cPe,"A",{href:!0});var EEt=s(sX);HDo=r(EEt,"MT5ForConditionalGeneration"),EEt.forEach(t),UDo=r(cPe," (MT5 model)"),cPe.forEach(t),JDo=i(_e),Gv=n(_e,"LI",{});var mPe=s(Gv);dpe=n(mPe,"STRONG",{});var CEt=s(dpe);YDo=r(CEt,"mvp"),CEt.forEach(t),KDo=r(mPe," \u2014 "),lX=n(mPe,"A",{href:!0});var wEt=s(lX);ZDo=r(wEt,"MvpForConditionalGeneration"),wEt.forEach(t),eGo=r(mPe," (MVP model)"),mPe.forEach(t),oGo=i(_e),Ov=n(_e,"LI",{});var fPe=s(Ov);cpe=n(fPe,"STRONG",{});var AEt=s(cpe);rGo=r(AEt,"nllb"),AEt.forEach(t),tGo=r(fPe," \u2014 "),iX=n(fPe,"A",{href:!0});var LEt=s(iX);aGo=r(LEt,"M2M100ForConditionalGeneration"),LEt.forEach(t),nGo=r(fPe," (NLLB model)"),fPe.forEach(t),sGo=i(_e),Vv=n(_e,"LI",{});var gPe=s(Vv);mpe=n(gPe,"STRONG",{});var yEt=s(mpe);lGo=r(yEt,"pegasus"),yEt.forEach(t),iGo=r(gPe," \u2014 "),dX=n(gPe,"A",{href:!0});var xEt=s(dX);dGo=r(xEt,"PegasusForConditionalGeneration"),xEt.forEach(t),cGo=r(gPe," (Pegasus model)"),gPe.forEach(t),mGo=i(_e),Xv=n(_e,"LI",{});var hPe=s(Xv);fpe=n(hPe,"STRONG",{});var $Et=s(fpe);fGo=r($Et,"plbart"),$Et.forEach(t),gGo=r(hPe," \u2014 "),cX=n(hPe,"A",{href:!0});var kEt=s(cX);hGo=r(kEt,"PLBartForConditionalGeneration"),kEt.forEach(t),uGo=r(hPe," (PLBart model)"),hPe.forEach(t),pGo=i(_e),zv=n(_e,"LI",{});var uPe=s(zv);gpe=n(uPe,"STRONG",{});var SEt=s(gpe);_Go=r(SEt,"prophetnet"),SEt.forEach(t),bGo=r(uPe," \u2014 "),mX=n(uPe,"A",{href:!0});var REt=s(mX);vGo=r(REt,"ProphetNetForConditionalGeneration"),REt.forEach(t),FGo=r(uPe," (ProphetNet model)"),uPe.forEach(t),TGo=i(_e),Wv=n(_e,"LI",{});var pPe=s(Wv);hpe=n(pPe,"STRONG",{});var PEt=s(hpe);MGo=r(PEt,"t5"),PEt.forEach(t),EGo=r(pPe," \u2014 "),fX=n(pPe,"A",{href:!0});var BEt=s(fX);CGo=r(BEt,"T5ForConditionalGeneration"),BEt.forEach(t),wGo=r(pPe," (T5 model)"),pPe.forEach(t),AGo=i(_e),Qv=n(_e,"LI",{});var _Pe=s(Qv);upe=n(_Pe,"STRONG",{});var IEt=s(upe);LGo=r(IEt,"xlm-prophetnet"),IEt.forEach(t),yGo=r(_Pe," \u2014 "),gX=n(_Pe,"A",{href:!0});var NEt=s(gX);xGo=r(NEt,"XLMProphetNetForConditionalGeneration"),NEt.forEach(t),$Go=r(_Pe," (XLM-ProphetNet model)"),_Pe.forEach(t),_e.forEach(t),kGo=i(ma),Hv=n(ma,"P",{});var bPe=s(Hv);SGo=r(bPe,"The model is set in evaluation mode by default using "),ppe=n(bPe,"CODE",{});var qEt=s(ppe);RGo=r(qEt,"model.eval()"),qEt.forEach(t),PGo=r(bPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=n(bPe,"CODE",{});var jEt=s(_pe);BGo=r(jEt,"model.train()"),jEt.forEach(t),bPe.forEach(t),IGo=i(ma),T(Uv.$$.fragment,ma),ma.forEach(t),il.forEach(t),fze=i(m),ad=n(m,"H2",{class:!0});var bQe=s(ad);Jv=n(bQe,"A",{id:!0,class:!0,href:!0});var DEt=s(Jv);bpe=n(DEt,"SPAN",{});var GEt=s(bpe);T(f8.$$.fragment,GEt),GEt.forEach(t),DEt.forEach(t),NGo=i(bQe),vpe=n(bQe,"SPAN",{});var OEt=s(vpe);qGo=r(OEt,"AutoModelForSequenceClassification"),OEt.forEach(t),bQe.forEach(t),gze=i(m),Io=n(m,"DIV",{class:!0});var dl=s(Io);T(g8.$$.fragment,dl),jGo=i(dl),nd=n(dl,"P",{});var hte=s(nd);DGo=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hX=n(hte,"A",{href:!0});var VEt=s(hX);GGo=r(VEt,"from_pretrained()"),VEt.forEach(t),OGo=r(hte," class method or the "),uX=n(hte,"A",{href:!0});var XEt=s(uX);VGo=r(XEt,"from_config()"),XEt.forEach(t),XGo=r(hte,` class
method.`),hte.forEach(t),zGo=i(dl),h8=n(dl,"P",{});var vQe=s(h8);WGo=r(vQe,"This class cannot be instantiated directly using "),Fpe=n(vQe,"CODE",{});var zEt=s(Fpe);QGo=r(zEt,"__init__()"),zEt.forEach(t),HGo=r(vQe," (throws an error)."),vQe.forEach(t),UGo=i(dl),gt=n(dl,"DIV",{class:!0});var x7=s(gt);T(u8.$$.fragment,x7),JGo=i(x7),Tpe=n(x7,"P",{});var WEt=s(Tpe);YGo=r(WEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),WEt.forEach(t),KGo=i(x7),sd=n(x7,"P",{});var ute=s(sd);ZGo=r(ute,`Note:
Loading a model from its configuration file does `),Mpe=n(ute,"STRONG",{});var QEt=s(Mpe);eOo=r(QEt,"not"),QEt.forEach(t),oOo=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(ute,"A",{href:!0});var HEt=s(pX);rOo=r(HEt,"from_pretrained()"),HEt.forEach(t),tOo=r(ute," to load the model weights."),ute.forEach(t),aOo=i(x7),T(Yv.$$.fragment,x7),x7.forEach(t),nOo=i(dl),ro=n(dl,"DIV",{class:!0});var fa=s(ro);T(p8.$$.fragment,fa),sOo=i(fa),Epe=n(fa,"P",{});var UEt=s(Epe);lOo=r(UEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),UEt.forEach(t),iOo=i(fa),Ga=n(fa,"P",{});var $7=s(Ga);dOo=r($7,"The model class to instantiate is selected based on the "),Cpe=n($7,"CODE",{});var JEt=s(Cpe);cOo=r(JEt,"model_type"),JEt.forEach(t),mOo=r($7,` property of the config object (either
passed as an argument or loaded from `),wpe=n($7,"CODE",{});var YEt=s(wpe);fOo=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),gOo=r($7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ape=n($7,"CODE",{});var KEt=s(Ape);hOo=r(KEt,"pretrained_model_name_or_path"),KEt.forEach(t),uOo=r($7,":"),$7.forEach(t),pOo=i(fa),B=n(fa,"UL",{});var j=s(B);Kv=n(j,"LI",{});var vPe=s(Kv);Lpe=n(vPe,"STRONG",{});var ZEt=s(Lpe);_Oo=r(ZEt,"albert"),ZEt.forEach(t),bOo=r(vPe," \u2014 "),_X=n(vPe,"A",{href:!0});var eCt=s(_X);vOo=r(eCt,"AlbertForSequenceClassification"),eCt.forEach(t),FOo=r(vPe," (ALBERT model)"),vPe.forEach(t),TOo=i(j),Zv=n(j,"LI",{});var FPe=s(Zv);ype=n(FPe,"STRONG",{});var oCt=s(ype);MOo=r(oCt,"bart"),oCt.forEach(t),EOo=r(FPe," \u2014 "),bX=n(FPe,"A",{href:!0});var rCt=s(bX);COo=r(rCt,"BartForSequenceClassification"),rCt.forEach(t),wOo=r(FPe," (BART model)"),FPe.forEach(t),AOo=i(j),e1=n(j,"LI",{});var TPe=s(e1);xpe=n(TPe,"STRONG",{});var tCt=s(xpe);LOo=r(tCt,"bert"),tCt.forEach(t),yOo=r(TPe," \u2014 "),vX=n(TPe,"A",{href:!0});var aCt=s(vX);xOo=r(aCt,"BertForSequenceClassification"),aCt.forEach(t),$Oo=r(TPe," (BERT model)"),TPe.forEach(t),kOo=i(j),o1=n(j,"LI",{});var MPe=s(o1);$pe=n(MPe,"STRONG",{});var nCt=s($pe);SOo=r(nCt,"big_bird"),nCt.forEach(t),ROo=r(MPe," \u2014 "),FX=n(MPe,"A",{href:!0});var sCt=s(FX);POo=r(sCt,"BigBirdForSequenceClassification"),sCt.forEach(t),BOo=r(MPe," (BigBird model)"),MPe.forEach(t),IOo=i(j),r1=n(j,"LI",{});var EPe=s(r1);kpe=n(EPe,"STRONG",{});var lCt=s(kpe);NOo=r(lCt,"bigbird_pegasus"),lCt.forEach(t),qOo=r(EPe," \u2014 "),TX=n(EPe,"A",{href:!0});var iCt=s(TX);jOo=r(iCt,"BigBirdPegasusForSequenceClassification"),iCt.forEach(t),DOo=r(EPe," (BigBird-Pegasus model)"),EPe.forEach(t),GOo=i(j),t1=n(j,"LI",{});var CPe=s(t1);Spe=n(CPe,"STRONG",{});var dCt=s(Spe);OOo=r(dCt,"bloom"),dCt.forEach(t),VOo=r(CPe," \u2014 "),MX=n(CPe,"A",{href:!0});var cCt=s(MX);XOo=r(cCt,"BloomForSequenceClassification"),cCt.forEach(t),zOo=r(CPe," (BLOOM model)"),CPe.forEach(t),WOo=i(j),a1=n(j,"LI",{});var wPe=s(a1);Rpe=n(wPe,"STRONG",{});var mCt=s(Rpe);QOo=r(mCt,"camembert"),mCt.forEach(t),HOo=r(wPe," \u2014 "),EX=n(wPe,"A",{href:!0});var fCt=s(EX);UOo=r(fCt,"CamembertForSequenceClassification"),fCt.forEach(t),JOo=r(wPe," (CamemBERT model)"),wPe.forEach(t),YOo=i(j),n1=n(j,"LI",{});var APe=s(n1);Ppe=n(APe,"STRONG",{});var gCt=s(Ppe);KOo=r(gCt,"canine"),gCt.forEach(t),ZOo=r(APe," \u2014 "),CX=n(APe,"A",{href:!0});var hCt=s(CX);eVo=r(hCt,"CanineForSequenceClassification"),hCt.forEach(t),oVo=r(APe," (CANINE model)"),APe.forEach(t),rVo=i(j),s1=n(j,"LI",{});var LPe=s(s1);Bpe=n(LPe,"STRONG",{});var uCt=s(Bpe);tVo=r(uCt,"convbert"),uCt.forEach(t),aVo=r(LPe," \u2014 "),wX=n(LPe,"A",{href:!0});var pCt=s(wX);nVo=r(pCt,"ConvBertForSequenceClassification"),pCt.forEach(t),sVo=r(LPe," (ConvBERT model)"),LPe.forEach(t),lVo=i(j),l1=n(j,"LI",{});var yPe=s(l1);Ipe=n(yPe,"STRONG",{});var _Ct=s(Ipe);iVo=r(_Ct,"ctrl"),_Ct.forEach(t),dVo=r(yPe," \u2014 "),AX=n(yPe,"A",{href:!0});var bCt=s(AX);cVo=r(bCt,"CTRLForSequenceClassification"),bCt.forEach(t),mVo=r(yPe," (CTRL model)"),yPe.forEach(t),fVo=i(j),i1=n(j,"LI",{});var xPe=s(i1);Npe=n(xPe,"STRONG",{});var vCt=s(Npe);gVo=r(vCt,"data2vec-text"),vCt.forEach(t),hVo=r(xPe," \u2014 "),LX=n(xPe,"A",{href:!0});var FCt=s(LX);uVo=r(FCt,"Data2VecTextForSequenceClassification"),FCt.forEach(t),pVo=r(xPe," (Data2VecText model)"),xPe.forEach(t),_Vo=i(j),d1=n(j,"LI",{});var $Pe=s(d1);qpe=n($Pe,"STRONG",{});var TCt=s(qpe);bVo=r(TCt,"deberta"),TCt.forEach(t),vVo=r($Pe," \u2014 "),yX=n($Pe,"A",{href:!0});var MCt=s(yX);FVo=r(MCt,"DebertaForSequenceClassification"),MCt.forEach(t),TVo=r($Pe," (DeBERTa model)"),$Pe.forEach(t),MVo=i(j),c1=n(j,"LI",{});var kPe=s(c1);jpe=n(kPe,"STRONG",{});var ECt=s(jpe);EVo=r(ECt,"deberta-v2"),ECt.forEach(t),CVo=r(kPe," \u2014 "),xX=n(kPe,"A",{href:!0});var CCt=s(xX);wVo=r(CCt,"DebertaV2ForSequenceClassification"),CCt.forEach(t),AVo=r(kPe," (DeBERTa-v2 model)"),kPe.forEach(t),LVo=i(j),m1=n(j,"LI",{});var SPe=s(m1);Dpe=n(SPe,"STRONG",{});var wCt=s(Dpe);yVo=r(wCt,"distilbert"),wCt.forEach(t),xVo=r(SPe," \u2014 "),$X=n(SPe,"A",{href:!0});var ACt=s($X);$Vo=r(ACt,"DistilBertForSequenceClassification"),ACt.forEach(t),kVo=r(SPe," (DistilBERT model)"),SPe.forEach(t),SVo=i(j),f1=n(j,"LI",{});var RPe=s(f1);Gpe=n(RPe,"STRONG",{});var LCt=s(Gpe);RVo=r(LCt,"electra"),LCt.forEach(t),PVo=r(RPe," \u2014 "),kX=n(RPe,"A",{href:!0});var yCt=s(kX);BVo=r(yCt,"ElectraForSequenceClassification"),yCt.forEach(t),IVo=r(RPe," (ELECTRA model)"),RPe.forEach(t),NVo=i(j),g1=n(j,"LI",{});var PPe=s(g1);Ope=n(PPe,"STRONG",{});var xCt=s(Ope);qVo=r(xCt,"flaubert"),xCt.forEach(t),jVo=r(PPe," \u2014 "),SX=n(PPe,"A",{href:!0});var $Ct=s(SX);DVo=r($Ct,"FlaubertForSequenceClassification"),$Ct.forEach(t),GVo=r(PPe," (FlauBERT model)"),PPe.forEach(t),OVo=i(j),h1=n(j,"LI",{});var BPe=s(h1);Vpe=n(BPe,"STRONG",{});var kCt=s(Vpe);VVo=r(kCt,"fnet"),kCt.forEach(t),XVo=r(BPe," \u2014 "),RX=n(BPe,"A",{href:!0});var SCt=s(RX);zVo=r(SCt,"FNetForSequenceClassification"),SCt.forEach(t),WVo=r(BPe," (FNet model)"),BPe.forEach(t),QVo=i(j),u1=n(j,"LI",{});var IPe=s(u1);Xpe=n(IPe,"STRONG",{});var RCt=s(Xpe);HVo=r(RCt,"funnel"),RCt.forEach(t),UVo=r(IPe," \u2014 "),PX=n(IPe,"A",{href:!0});var PCt=s(PX);JVo=r(PCt,"FunnelForSequenceClassification"),PCt.forEach(t),YVo=r(IPe," (Funnel Transformer model)"),IPe.forEach(t),KVo=i(j),p1=n(j,"LI",{});var NPe=s(p1);zpe=n(NPe,"STRONG",{});var BCt=s(zpe);ZVo=r(BCt,"gpt2"),BCt.forEach(t),eXo=r(NPe," \u2014 "),BX=n(NPe,"A",{href:!0});var ICt=s(BX);oXo=r(ICt,"GPT2ForSequenceClassification"),ICt.forEach(t),rXo=r(NPe," (OpenAI GPT-2 model)"),NPe.forEach(t),tXo=i(j),_1=n(j,"LI",{});var qPe=s(_1);Wpe=n(qPe,"STRONG",{});var NCt=s(Wpe);aXo=r(NCt,"gpt_neo"),NCt.forEach(t),nXo=r(qPe," \u2014 "),IX=n(qPe,"A",{href:!0});var qCt=s(IX);sXo=r(qCt,"GPTNeoForSequenceClassification"),qCt.forEach(t),lXo=r(qPe," (GPT Neo model)"),qPe.forEach(t),iXo=i(j),b1=n(j,"LI",{});var jPe=s(b1);Qpe=n(jPe,"STRONG",{});var jCt=s(Qpe);dXo=r(jCt,"gptj"),jCt.forEach(t),cXo=r(jPe," \u2014 "),NX=n(jPe,"A",{href:!0});var DCt=s(NX);mXo=r(DCt,"GPTJForSequenceClassification"),DCt.forEach(t),fXo=r(jPe," (GPT-J model)"),jPe.forEach(t),gXo=i(j),v1=n(j,"LI",{});var DPe=s(v1);Hpe=n(DPe,"STRONG",{});var GCt=s(Hpe);hXo=r(GCt,"ibert"),GCt.forEach(t),uXo=r(DPe," \u2014 "),qX=n(DPe,"A",{href:!0});var OCt=s(qX);pXo=r(OCt,"IBertForSequenceClassification"),OCt.forEach(t),_Xo=r(DPe," (I-BERT model)"),DPe.forEach(t),bXo=i(j),F1=n(j,"LI",{});var GPe=s(F1);Upe=n(GPe,"STRONG",{});var VCt=s(Upe);vXo=r(VCt,"layoutlm"),VCt.forEach(t),FXo=r(GPe," \u2014 "),jX=n(GPe,"A",{href:!0});var XCt=s(jX);TXo=r(XCt,"LayoutLMForSequenceClassification"),XCt.forEach(t),MXo=r(GPe," (LayoutLM model)"),GPe.forEach(t),EXo=i(j),T1=n(j,"LI",{});var OPe=s(T1);Jpe=n(OPe,"STRONG",{});var zCt=s(Jpe);CXo=r(zCt,"layoutlmv2"),zCt.forEach(t),wXo=r(OPe," \u2014 "),DX=n(OPe,"A",{href:!0});var WCt=s(DX);AXo=r(WCt,"LayoutLMv2ForSequenceClassification"),WCt.forEach(t),LXo=r(OPe," (LayoutLMv2 model)"),OPe.forEach(t),yXo=i(j),M1=n(j,"LI",{});var VPe=s(M1);Ype=n(VPe,"STRONG",{});var QCt=s(Ype);xXo=r(QCt,"layoutlmv3"),QCt.forEach(t),$Xo=r(VPe," \u2014 "),GX=n(VPe,"A",{href:!0});var HCt=s(GX);kXo=r(HCt,"LayoutLMv3ForSequenceClassification"),HCt.forEach(t),SXo=r(VPe," (LayoutLMv3 model)"),VPe.forEach(t),RXo=i(j),E1=n(j,"LI",{});var XPe=s(E1);Kpe=n(XPe,"STRONG",{});var UCt=s(Kpe);PXo=r(UCt,"led"),UCt.forEach(t),BXo=r(XPe," \u2014 "),OX=n(XPe,"A",{href:!0});var JCt=s(OX);IXo=r(JCt,"LEDForSequenceClassification"),JCt.forEach(t),NXo=r(XPe," (LED model)"),XPe.forEach(t),qXo=i(j),C1=n(j,"LI",{});var zPe=s(C1);Zpe=n(zPe,"STRONG",{});var YCt=s(Zpe);jXo=r(YCt,"longformer"),YCt.forEach(t),DXo=r(zPe," \u2014 "),VX=n(zPe,"A",{href:!0});var KCt=s(VX);GXo=r(KCt,"LongformerForSequenceClassification"),KCt.forEach(t),OXo=r(zPe," (Longformer model)"),zPe.forEach(t),VXo=i(j),w1=n(j,"LI",{});var WPe=s(w1);e_e=n(WPe,"STRONG",{});var ZCt=s(e_e);XXo=r(ZCt,"mbart"),ZCt.forEach(t),zXo=r(WPe," \u2014 "),XX=n(WPe,"A",{href:!0});var e5t=s(XX);WXo=r(e5t,"MBartForSequenceClassification"),e5t.forEach(t),QXo=r(WPe," (mBART model)"),WPe.forEach(t),HXo=i(j),A1=n(j,"LI",{});var QPe=s(A1);o_e=n(QPe,"STRONG",{});var o5t=s(o_e);UXo=r(o5t,"megatron-bert"),o5t.forEach(t),JXo=r(QPe," \u2014 "),zX=n(QPe,"A",{href:!0});var r5t=s(zX);YXo=r(r5t,"MegatronBertForSequenceClassification"),r5t.forEach(t),KXo=r(QPe," (Megatron-BERT model)"),QPe.forEach(t),ZXo=i(j),L1=n(j,"LI",{});var HPe=s(L1);r_e=n(HPe,"STRONG",{});var t5t=s(r_e);ezo=r(t5t,"mobilebert"),t5t.forEach(t),ozo=r(HPe," \u2014 "),WX=n(HPe,"A",{href:!0});var a5t=s(WX);rzo=r(a5t,"MobileBertForSequenceClassification"),a5t.forEach(t),tzo=r(HPe," (MobileBERT model)"),HPe.forEach(t),azo=i(j),y1=n(j,"LI",{});var UPe=s(y1);t_e=n(UPe,"STRONG",{});var n5t=s(t_e);nzo=r(n5t,"mpnet"),n5t.forEach(t),szo=r(UPe," \u2014 "),QX=n(UPe,"A",{href:!0});var s5t=s(QX);lzo=r(s5t,"MPNetForSequenceClassification"),s5t.forEach(t),izo=r(UPe," (MPNet model)"),UPe.forEach(t),dzo=i(j),x1=n(j,"LI",{});var JPe=s(x1);a_e=n(JPe,"STRONG",{});var l5t=s(a_e);czo=r(l5t,"mvp"),l5t.forEach(t),mzo=r(JPe," \u2014 "),HX=n(JPe,"A",{href:!0});var i5t=s(HX);fzo=r(i5t,"MvpForSequenceClassification"),i5t.forEach(t),gzo=r(JPe," (MVP model)"),JPe.forEach(t),hzo=i(j),$1=n(j,"LI",{});var YPe=s($1);n_e=n(YPe,"STRONG",{});var d5t=s(n_e);uzo=r(d5t,"nezha"),d5t.forEach(t),pzo=r(YPe," \u2014 "),UX=n(YPe,"A",{href:!0});var c5t=s(UX);_zo=r(c5t,"NezhaForSequenceClassification"),c5t.forEach(t),bzo=r(YPe," (Nezha model)"),YPe.forEach(t),vzo=i(j),k1=n(j,"LI",{});var KPe=s(k1);s_e=n(KPe,"STRONG",{});var m5t=s(s_e);Fzo=r(m5t,"nystromformer"),m5t.forEach(t),Tzo=r(KPe," \u2014 "),JX=n(KPe,"A",{href:!0});var f5t=s(JX);Mzo=r(f5t,"NystromformerForSequenceClassification"),f5t.forEach(t),Ezo=r(KPe," (Nystr\xF6mformer model)"),KPe.forEach(t),Czo=i(j),S1=n(j,"LI",{});var ZPe=s(S1);l_e=n(ZPe,"STRONG",{});var g5t=s(l_e);wzo=r(g5t,"openai-gpt"),g5t.forEach(t),Azo=r(ZPe," \u2014 "),YX=n(ZPe,"A",{href:!0});var h5t=s(YX);Lzo=r(h5t,"OpenAIGPTForSequenceClassification"),h5t.forEach(t),yzo=r(ZPe," (OpenAI GPT model)"),ZPe.forEach(t),xzo=i(j),R1=n(j,"LI",{});var eBe=s(R1);i_e=n(eBe,"STRONG",{});var u5t=s(i_e);$zo=r(u5t,"opt"),u5t.forEach(t),kzo=r(eBe," \u2014 "),KX=n(eBe,"A",{href:!0});var p5t=s(KX);Szo=r(p5t,"OPTForSequenceClassification"),p5t.forEach(t),Rzo=r(eBe," (OPT model)"),eBe.forEach(t),Pzo=i(j),P1=n(j,"LI",{});var oBe=s(P1);d_e=n(oBe,"STRONG",{});var _5t=s(d_e);Bzo=r(_5t,"perceiver"),_5t.forEach(t),Izo=r(oBe," \u2014 "),ZX=n(oBe,"A",{href:!0});var b5t=s(ZX);Nzo=r(b5t,"PerceiverForSequenceClassification"),b5t.forEach(t),qzo=r(oBe," (Perceiver model)"),oBe.forEach(t),jzo=i(j),B1=n(j,"LI",{});var rBe=s(B1);c_e=n(rBe,"STRONG",{});var v5t=s(c_e);Dzo=r(v5t,"plbart"),v5t.forEach(t),Gzo=r(rBe," \u2014 "),ez=n(rBe,"A",{href:!0});var F5t=s(ez);Ozo=r(F5t,"PLBartForSequenceClassification"),F5t.forEach(t),Vzo=r(rBe," (PLBart model)"),rBe.forEach(t),Xzo=i(j),I1=n(j,"LI",{});var tBe=s(I1);m_e=n(tBe,"STRONG",{});var T5t=s(m_e);zzo=r(T5t,"qdqbert"),T5t.forEach(t),Wzo=r(tBe," \u2014 "),oz=n(tBe,"A",{href:!0});var M5t=s(oz);Qzo=r(M5t,"QDQBertForSequenceClassification"),M5t.forEach(t),Hzo=r(tBe," (QDQBert model)"),tBe.forEach(t),Uzo=i(j),N1=n(j,"LI",{});var aBe=s(N1);f_e=n(aBe,"STRONG",{});var E5t=s(f_e);Jzo=r(E5t,"reformer"),E5t.forEach(t),Yzo=r(aBe," \u2014 "),rz=n(aBe,"A",{href:!0});var C5t=s(rz);Kzo=r(C5t,"ReformerForSequenceClassification"),C5t.forEach(t),Zzo=r(aBe," (Reformer model)"),aBe.forEach(t),eWo=i(j),q1=n(j,"LI",{});var nBe=s(q1);g_e=n(nBe,"STRONG",{});var w5t=s(g_e);oWo=r(w5t,"rembert"),w5t.forEach(t),rWo=r(nBe," \u2014 "),tz=n(nBe,"A",{href:!0});var A5t=s(tz);tWo=r(A5t,"RemBertForSequenceClassification"),A5t.forEach(t),aWo=r(nBe," (RemBERT model)"),nBe.forEach(t),nWo=i(j),j1=n(j,"LI",{});var sBe=s(j1);h_e=n(sBe,"STRONG",{});var L5t=s(h_e);sWo=r(L5t,"roberta"),L5t.forEach(t),lWo=r(sBe," \u2014 "),az=n(sBe,"A",{href:!0});var y5t=s(az);iWo=r(y5t,"RobertaForSequenceClassification"),y5t.forEach(t),dWo=r(sBe," (RoBERTa model)"),sBe.forEach(t),cWo=i(j),D1=n(j,"LI",{});var lBe=s(D1);u_e=n(lBe,"STRONG",{});var x5t=s(u_e);mWo=r(x5t,"roformer"),x5t.forEach(t),fWo=r(lBe," \u2014 "),nz=n(lBe,"A",{href:!0});var $5t=s(nz);gWo=r($5t,"RoFormerForSequenceClassification"),$5t.forEach(t),hWo=r(lBe," (RoFormer model)"),lBe.forEach(t),uWo=i(j),G1=n(j,"LI",{});var iBe=s(G1);p_e=n(iBe,"STRONG",{});var k5t=s(p_e);pWo=r(k5t,"squeezebert"),k5t.forEach(t),_Wo=r(iBe," \u2014 "),sz=n(iBe,"A",{href:!0});var S5t=s(sz);bWo=r(S5t,"SqueezeBertForSequenceClassification"),S5t.forEach(t),vWo=r(iBe," (SqueezeBERT model)"),iBe.forEach(t),FWo=i(j),O1=n(j,"LI",{});var dBe=s(O1);__e=n(dBe,"STRONG",{});var R5t=s(__e);TWo=r(R5t,"tapas"),R5t.forEach(t),MWo=r(dBe," \u2014 "),lz=n(dBe,"A",{href:!0});var P5t=s(lz);EWo=r(P5t,"TapasForSequenceClassification"),P5t.forEach(t),CWo=r(dBe," (TAPAS model)"),dBe.forEach(t),wWo=i(j),V1=n(j,"LI",{});var cBe=s(V1);b_e=n(cBe,"STRONG",{});var B5t=s(b_e);AWo=r(B5t,"transfo-xl"),B5t.forEach(t),LWo=r(cBe," \u2014 "),iz=n(cBe,"A",{href:!0});var I5t=s(iz);yWo=r(I5t,"TransfoXLForSequenceClassification"),I5t.forEach(t),xWo=r(cBe," (Transformer-XL model)"),cBe.forEach(t),$Wo=i(j),X1=n(j,"LI",{});var mBe=s(X1);v_e=n(mBe,"STRONG",{});var N5t=s(v_e);kWo=r(N5t,"xlm"),N5t.forEach(t),SWo=r(mBe," \u2014 "),dz=n(mBe,"A",{href:!0});var q5t=s(dz);RWo=r(q5t,"XLMForSequenceClassification"),q5t.forEach(t),PWo=r(mBe," (XLM model)"),mBe.forEach(t),BWo=i(j),z1=n(j,"LI",{});var fBe=s(z1);F_e=n(fBe,"STRONG",{});var j5t=s(F_e);IWo=r(j5t,"xlm-roberta"),j5t.forEach(t),NWo=r(fBe," \u2014 "),cz=n(fBe,"A",{href:!0});var D5t=s(cz);qWo=r(D5t,"XLMRobertaForSequenceClassification"),D5t.forEach(t),jWo=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),DWo=i(j),W1=n(j,"LI",{});var gBe=s(W1);T_e=n(gBe,"STRONG",{});var G5t=s(T_e);GWo=r(G5t,"xlm-roberta-xl"),G5t.forEach(t),OWo=r(gBe," \u2014 "),mz=n(gBe,"A",{href:!0});var O5t=s(mz);VWo=r(O5t,"XLMRobertaXLForSequenceClassification"),O5t.forEach(t),XWo=r(gBe," (XLM-RoBERTa-XL model)"),gBe.forEach(t),zWo=i(j),Q1=n(j,"LI",{});var hBe=s(Q1);M_e=n(hBe,"STRONG",{});var V5t=s(M_e);WWo=r(V5t,"xlnet"),V5t.forEach(t),QWo=r(hBe," \u2014 "),fz=n(hBe,"A",{href:!0});var X5t=s(fz);HWo=r(X5t,"XLNetForSequenceClassification"),X5t.forEach(t),UWo=r(hBe," (XLNet model)"),hBe.forEach(t),JWo=i(j),H1=n(j,"LI",{});var uBe=s(H1);E_e=n(uBe,"STRONG",{});var z5t=s(E_e);YWo=r(z5t,"yoso"),z5t.forEach(t),KWo=r(uBe," \u2014 "),gz=n(uBe,"A",{href:!0});var W5t=s(gz);ZWo=r(W5t,"YosoForSequenceClassification"),W5t.forEach(t),eQo=r(uBe," (YOSO model)"),uBe.forEach(t),j.forEach(t),oQo=i(fa),U1=n(fa,"P",{});var pBe=s(U1);rQo=r(pBe,"The model is set in evaluation mode by default using "),C_e=n(pBe,"CODE",{});var Q5t=s(C_e);tQo=r(Q5t,"model.eval()"),Q5t.forEach(t),aQo=r(pBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=n(pBe,"CODE",{});var H5t=s(w_e);nQo=r(H5t,"model.train()"),H5t.forEach(t),pBe.forEach(t),sQo=i(fa),T(J1.$$.fragment,fa),fa.forEach(t),dl.forEach(t),hze=i(m),ld=n(m,"H2",{class:!0});var FQe=s(ld);Y1=n(FQe,"A",{id:!0,class:!0,href:!0});var U5t=s(Y1);A_e=n(U5t,"SPAN",{});var J5t=s(A_e);T(_8.$$.fragment,J5t),J5t.forEach(t),U5t.forEach(t),lQo=i(FQe),L_e=n(FQe,"SPAN",{});var Y5t=s(L_e);iQo=r(Y5t,"AutoModelForMultipleChoice"),Y5t.forEach(t),FQe.forEach(t),uze=i(m),No=n(m,"DIV",{class:!0});var cl=s(No);T(b8.$$.fragment,cl),dQo=i(cl),id=n(cl,"P",{});var pte=s(id);cQo=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hz=n(pte,"A",{href:!0});var K5t=s(hz);mQo=r(K5t,"from_pretrained()"),K5t.forEach(t),fQo=r(pte," class method or the "),uz=n(pte,"A",{href:!0});var Z5t=s(uz);gQo=r(Z5t,"from_config()"),Z5t.forEach(t),hQo=r(pte,` class
method.`),pte.forEach(t),uQo=i(cl),v8=n(cl,"P",{});var TQe=s(v8);pQo=r(TQe,"This class cannot be instantiated directly using "),y_e=n(TQe,"CODE",{});var e3t=s(y_e);_Qo=r(e3t,"__init__()"),e3t.forEach(t),bQo=r(TQe," (throws an error)."),TQe.forEach(t),vQo=i(cl),ht=n(cl,"DIV",{class:!0});var k7=s(ht);T(F8.$$.fragment,k7),FQo=i(k7),x_e=n(k7,"P",{});var o3t=s(x_e);TQo=r(o3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),o3t.forEach(t),MQo=i(k7),dd=n(k7,"P",{});var _te=s(dd);EQo=r(_te,`Note:
Loading a model from its configuration file does `),$_e=n(_te,"STRONG",{});var r3t=s($_e);CQo=r(r3t,"not"),r3t.forEach(t),wQo=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(_te,"A",{href:!0});var t3t=s(pz);AQo=r(t3t,"from_pretrained()"),t3t.forEach(t),LQo=r(_te," to load the model weights."),_te.forEach(t),yQo=i(k7),T(K1.$$.fragment,k7),k7.forEach(t),xQo=i(cl),to=n(cl,"DIV",{class:!0});var ga=s(to);T(T8.$$.fragment,ga),$Qo=i(ga),k_e=n(ga,"P",{});var a3t=s(k_e);kQo=r(a3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),a3t.forEach(t),SQo=i(ga),Oa=n(ga,"P",{});var S7=s(Oa);RQo=r(S7,"The model class to instantiate is selected based on the "),S_e=n(S7,"CODE",{});var n3t=s(S_e);PQo=r(n3t,"model_type"),n3t.forEach(t),BQo=r(S7,` property of the config object (either
passed as an argument or loaded from `),R_e=n(S7,"CODE",{});var s3t=s(R_e);IQo=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),NQo=r(S7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P_e=n(S7,"CODE",{});var l3t=s(P_e);qQo=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),jQo=r(S7,":"),S7.forEach(t),DQo=i(ga),Z=n(ga,"UL",{});var ee=s(Z);Z1=n(ee,"LI",{});var _Be=s(Z1);B_e=n(_Be,"STRONG",{});var i3t=s(B_e);GQo=r(i3t,"albert"),i3t.forEach(t),OQo=r(_Be," \u2014 "),_z=n(_Be,"A",{href:!0});var d3t=s(_z);VQo=r(d3t,"AlbertForMultipleChoice"),d3t.forEach(t),XQo=r(_Be," (ALBERT model)"),_Be.forEach(t),zQo=i(ee),eF=n(ee,"LI",{});var bBe=s(eF);I_e=n(bBe,"STRONG",{});var c3t=s(I_e);WQo=r(c3t,"bert"),c3t.forEach(t),QQo=r(bBe," \u2014 "),bz=n(bBe,"A",{href:!0});var m3t=s(bz);HQo=r(m3t,"BertForMultipleChoice"),m3t.forEach(t),UQo=r(bBe," (BERT model)"),bBe.forEach(t),JQo=i(ee),oF=n(ee,"LI",{});var vBe=s(oF);N_e=n(vBe,"STRONG",{});var f3t=s(N_e);YQo=r(f3t,"big_bird"),f3t.forEach(t),KQo=r(vBe," \u2014 "),vz=n(vBe,"A",{href:!0});var g3t=s(vz);ZQo=r(g3t,"BigBirdForMultipleChoice"),g3t.forEach(t),eHo=r(vBe," (BigBird model)"),vBe.forEach(t),oHo=i(ee),rF=n(ee,"LI",{});var FBe=s(rF);q_e=n(FBe,"STRONG",{});var h3t=s(q_e);rHo=r(h3t,"camembert"),h3t.forEach(t),tHo=r(FBe," \u2014 "),Fz=n(FBe,"A",{href:!0});var u3t=s(Fz);aHo=r(u3t,"CamembertForMultipleChoice"),u3t.forEach(t),nHo=r(FBe," (CamemBERT model)"),FBe.forEach(t),sHo=i(ee),tF=n(ee,"LI",{});var TBe=s(tF);j_e=n(TBe,"STRONG",{});var p3t=s(j_e);lHo=r(p3t,"canine"),p3t.forEach(t),iHo=r(TBe," \u2014 "),Tz=n(TBe,"A",{href:!0});var _3t=s(Tz);dHo=r(_3t,"CanineForMultipleChoice"),_3t.forEach(t),cHo=r(TBe," (CANINE model)"),TBe.forEach(t),mHo=i(ee),aF=n(ee,"LI",{});var MBe=s(aF);D_e=n(MBe,"STRONG",{});var b3t=s(D_e);fHo=r(b3t,"convbert"),b3t.forEach(t),gHo=r(MBe," \u2014 "),Mz=n(MBe,"A",{href:!0});var v3t=s(Mz);hHo=r(v3t,"ConvBertForMultipleChoice"),v3t.forEach(t),uHo=r(MBe," (ConvBERT model)"),MBe.forEach(t),pHo=i(ee),nF=n(ee,"LI",{});var EBe=s(nF);G_e=n(EBe,"STRONG",{});var F3t=s(G_e);_Ho=r(F3t,"data2vec-text"),F3t.forEach(t),bHo=r(EBe," \u2014 "),Ez=n(EBe,"A",{href:!0});var T3t=s(Ez);vHo=r(T3t,"Data2VecTextForMultipleChoice"),T3t.forEach(t),FHo=r(EBe," (Data2VecText model)"),EBe.forEach(t),THo=i(ee),sF=n(ee,"LI",{});var CBe=s(sF);O_e=n(CBe,"STRONG",{});var M3t=s(O_e);MHo=r(M3t,"deberta-v2"),M3t.forEach(t),EHo=r(CBe," \u2014 "),Cz=n(CBe,"A",{href:!0});var E3t=s(Cz);CHo=r(E3t,"DebertaV2ForMultipleChoice"),E3t.forEach(t),wHo=r(CBe," (DeBERTa-v2 model)"),CBe.forEach(t),AHo=i(ee),lF=n(ee,"LI",{});var wBe=s(lF);V_e=n(wBe,"STRONG",{});var C3t=s(V_e);LHo=r(C3t,"distilbert"),C3t.forEach(t),yHo=r(wBe," \u2014 "),wz=n(wBe,"A",{href:!0});var w3t=s(wz);xHo=r(w3t,"DistilBertForMultipleChoice"),w3t.forEach(t),$Ho=r(wBe," (DistilBERT model)"),wBe.forEach(t),kHo=i(ee),iF=n(ee,"LI",{});var ABe=s(iF);X_e=n(ABe,"STRONG",{});var A3t=s(X_e);SHo=r(A3t,"electra"),A3t.forEach(t),RHo=r(ABe," \u2014 "),Az=n(ABe,"A",{href:!0});var L3t=s(Az);PHo=r(L3t,"ElectraForMultipleChoice"),L3t.forEach(t),BHo=r(ABe," (ELECTRA model)"),ABe.forEach(t),IHo=i(ee),dF=n(ee,"LI",{});var LBe=s(dF);z_e=n(LBe,"STRONG",{});var y3t=s(z_e);NHo=r(y3t,"flaubert"),y3t.forEach(t),qHo=r(LBe," \u2014 "),Lz=n(LBe,"A",{href:!0});var x3t=s(Lz);jHo=r(x3t,"FlaubertForMultipleChoice"),x3t.forEach(t),DHo=r(LBe," (FlauBERT model)"),LBe.forEach(t),GHo=i(ee),cF=n(ee,"LI",{});var yBe=s(cF);W_e=n(yBe,"STRONG",{});var $3t=s(W_e);OHo=r($3t,"fnet"),$3t.forEach(t),VHo=r(yBe," \u2014 "),yz=n(yBe,"A",{href:!0});var k3t=s(yz);XHo=r(k3t,"FNetForMultipleChoice"),k3t.forEach(t),zHo=r(yBe," (FNet model)"),yBe.forEach(t),WHo=i(ee),mF=n(ee,"LI",{});var xBe=s(mF);Q_e=n(xBe,"STRONG",{});var S3t=s(Q_e);QHo=r(S3t,"funnel"),S3t.forEach(t),HHo=r(xBe," \u2014 "),xz=n(xBe,"A",{href:!0});var R3t=s(xz);UHo=r(R3t,"FunnelForMultipleChoice"),R3t.forEach(t),JHo=r(xBe," (Funnel Transformer model)"),xBe.forEach(t),YHo=i(ee),fF=n(ee,"LI",{});var $Be=s(fF);H_e=n($Be,"STRONG",{});var P3t=s(H_e);KHo=r(P3t,"ibert"),P3t.forEach(t),ZHo=r($Be," \u2014 "),$z=n($Be,"A",{href:!0});var B3t=s($z);eUo=r(B3t,"IBertForMultipleChoice"),B3t.forEach(t),oUo=r($Be," (I-BERT model)"),$Be.forEach(t),rUo=i(ee),gF=n(ee,"LI",{});var kBe=s(gF);U_e=n(kBe,"STRONG",{});var I3t=s(U_e);tUo=r(I3t,"longformer"),I3t.forEach(t),aUo=r(kBe," \u2014 "),kz=n(kBe,"A",{href:!0});var N3t=s(kz);nUo=r(N3t,"LongformerForMultipleChoice"),N3t.forEach(t),sUo=r(kBe," (Longformer model)"),kBe.forEach(t),lUo=i(ee),hF=n(ee,"LI",{});var SBe=s(hF);J_e=n(SBe,"STRONG",{});var q3t=s(J_e);iUo=r(q3t,"megatron-bert"),q3t.forEach(t),dUo=r(SBe," \u2014 "),Sz=n(SBe,"A",{href:!0});var j3t=s(Sz);cUo=r(j3t,"MegatronBertForMultipleChoice"),j3t.forEach(t),mUo=r(SBe," (Megatron-BERT model)"),SBe.forEach(t),fUo=i(ee),uF=n(ee,"LI",{});var RBe=s(uF);Y_e=n(RBe,"STRONG",{});var D3t=s(Y_e);gUo=r(D3t,"mobilebert"),D3t.forEach(t),hUo=r(RBe," \u2014 "),Rz=n(RBe,"A",{href:!0});var G3t=s(Rz);uUo=r(G3t,"MobileBertForMultipleChoice"),G3t.forEach(t),pUo=r(RBe," (MobileBERT model)"),RBe.forEach(t),_Uo=i(ee),pF=n(ee,"LI",{});var PBe=s(pF);K_e=n(PBe,"STRONG",{});var O3t=s(K_e);bUo=r(O3t,"mpnet"),O3t.forEach(t),vUo=r(PBe," \u2014 "),Pz=n(PBe,"A",{href:!0});var V3t=s(Pz);FUo=r(V3t,"MPNetForMultipleChoice"),V3t.forEach(t),TUo=r(PBe," (MPNet model)"),PBe.forEach(t),MUo=i(ee),_F=n(ee,"LI",{});var BBe=s(_F);Z_e=n(BBe,"STRONG",{});var X3t=s(Z_e);EUo=r(X3t,"nezha"),X3t.forEach(t),CUo=r(BBe," \u2014 "),Bz=n(BBe,"A",{href:!0});var z3t=s(Bz);wUo=r(z3t,"NezhaForMultipleChoice"),z3t.forEach(t),AUo=r(BBe," (Nezha model)"),BBe.forEach(t),LUo=i(ee),bF=n(ee,"LI",{});var IBe=s(bF);e2e=n(IBe,"STRONG",{});var W3t=s(e2e);yUo=r(W3t,"nystromformer"),W3t.forEach(t),xUo=r(IBe," \u2014 "),Iz=n(IBe,"A",{href:!0});var Q3t=s(Iz);$Uo=r(Q3t,"NystromformerForMultipleChoice"),Q3t.forEach(t),kUo=r(IBe," (Nystr\xF6mformer model)"),IBe.forEach(t),SUo=i(ee),vF=n(ee,"LI",{});var NBe=s(vF);o2e=n(NBe,"STRONG",{});var H3t=s(o2e);RUo=r(H3t,"qdqbert"),H3t.forEach(t),PUo=r(NBe," \u2014 "),Nz=n(NBe,"A",{href:!0});var U3t=s(Nz);BUo=r(U3t,"QDQBertForMultipleChoice"),U3t.forEach(t),IUo=r(NBe," (QDQBert model)"),NBe.forEach(t),NUo=i(ee),FF=n(ee,"LI",{});var qBe=s(FF);r2e=n(qBe,"STRONG",{});var J3t=s(r2e);qUo=r(J3t,"rembert"),J3t.forEach(t),jUo=r(qBe," \u2014 "),qz=n(qBe,"A",{href:!0});var Y3t=s(qz);DUo=r(Y3t,"RemBertForMultipleChoice"),Y3t.forEach(t),GUo=r(qBe," (RemBERT model)"),qBe.forEach(t),OUo=i(ee),TF=n(ee,"LI",{});var jBe=s(TF);t2e=n(jBe,"STRONG",{});var K3t=s(t2e);VUo=r(K3t,"roberta"),K3t.forEach(t),XUo=r(jBe," \u2014 "),jz=n(jBe,"A",{href:!0});var Z3t=s(jz);zUo=r(Z3t,"RobertaForMultipleChoice"),Z3t.forEach(t),WUo=r(jBe," (RoBERTa model)"),jBe.forEach(t),QUo=i(ee),MF=n(ee,"LI",{});var DBe=s(MF);a2e=n(DBe,"STRONG",{});var e0t=s(a2e);HUo=r(e0t,"roformer"),e0t.forEach(t),UUo=r(DBe," \u2014 "),Dz=n(DBe,"A",{href:!0});var o0t=s(Dz);JUo=r(o0t,"RoFormerForMultipleChoice"),o0t.forEach(t),YUo=r(DBe," (RoFormer model)"),DBe.forEach(t),KUo=i(ee),EF=n(ee,"LI",{});var GBe=s(EF);n2e=n(GBe,"STRONG",{});var r0t=s(n2e);ZUo=r(r0t,"squeezebert"),r0t.forEach(t),eJo=r(GBe," \u2014 "),Gz=n(GBe,"A",{href:!0});var t0t=s(Gz);oJo=r(t0t,"SqueezeBertForMultipleChoice"),t0t.forEach(t),rJo=r(GBe," (SqueezeBERT model)"),GBe.forEach(t),tJo=i(ee),CF=n(ee,"LI",{});var OBe=s(CF);s2e=n(OBe,"STRONG",{});var a0t=s(s2e);aJo=r(a0t,"xlm"),a0t.forEach(t),nJo=r(OBe," \u2014 "),Oz=n(OBe,"A",{href:!0});var n0t=s(Oz);sJo=r(n0t,"XLMForMultipleChoice"),n0t.forEach(t),lJo=r(OBe," (XLM model)"),OBe.forEach(t),iJo=i(ee),wF=n(ee,"LI",{});var VBe=s(wF);l2e=n(VBe,"STRONG",{});var s0t=s(l2e);dJo=r(s0t,"xlm-roberta"),s0t.forEach(t),cJo=r(VBe," \u2014 "),Vz=n(VBe,"A",{href:!0});var l0t=s(Vz);mJo=r(l0t,"XLMRobertaForMultipleChoice"),l0t.forEach(t),fJo=r(VBe," (XLM-RoBERTa model)"),VBe.forEach(t),gJo=i(ee),AF=n(ee,"LI",{});var XBe=s(AF);i2e=n(XBe,"STRONG",{});var i0t=s(i2e);hJo=r(i0t,"xlm-roberta-xl"),i0t.forEach(t),uJo=r(XBe," \u2014 "),Xz=n(XBe,"A",{href:!0});var d0t=s(Xz);pJo=r(d0t,"XLMRobertaXLForMultipleChoice"),d0t.forEach(t),_Jo=r(XBe," (XLM-RoBERTa-XL model)"),XBe.forEach(t),bJo=i(ee),LF=n(ee,"LI",{});var zBe=s(LF);d2e=n(zBe,"STRONG",{});var c0t=s(d2e);vJo=r(c0t,"xlnet"),c0t.forEach(t),FJo=r(zBe," \u2014 "),zz=n(zBe,"A",{href:!0});var m0t=s(zz);TJo=r(m0t,"XLNetForMultipleChoice"),m0t.forEach(t),MJo=r(zBe," (XLNet model)"),zBe.forEach(t),EJo=i(ee),yF=n(ee,"LI",{});var WBe=s(yF);c2e=n(WBe,"STRONG",{});var f0t=s(c2e);CJo=r(f0t,"yoso"),f0t.forEach(t),wJo=r(WBe," \u2014 "),Wz=n(WBe,"A",{href:!0});var g0t=s(Wz);AJo=r(g0t,"YosoForMultipleChoice"),g0t.forEach(t),LJo=r(WBe," (YOSO model)"),WBe.forEach(t),ee.forEach(t),yJo=i(ga),xF=n(ga,"P",{});var QBe=s(xF);xJo=r(QBe,"The model is set in evaluation mode by default using "),m2e=n(QBe,"CODE",{});var h0t=s(m2e);$Jo=r(h0t,"model.eval()"),h0t.forEach(t),kJo=r(QBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f2e=n(QBe,"CODE",{});var u0t=s(f2e);SJo=r(u0t,"model.train()"),u0t.forEach(t),QBe.forEach(t),RJo=i(ga),T($F.$$.fragment,ga),ga.forEach(t),cl.forEach(t),pze=i(m),cd=n(m,"H2",{class:!0});var MQe=s(cd);kF=n(MQe,"A",{id:!0,class:!0,href:!0});var p0t=s(kF);g2e=n(p0t,"SPAN",{});var _0t=s(g2e);T(M8.$$.fragment,_0t),_0t.forEach(t),p0t.forEach(t),PJo=i(MQe),h2e=n(MQe,"SPAN",{});var b0t=s(h2e);BJo=r(b0t,"AutoModelForNextSentencePrediction"),b0t.forEach(t),MQe.forEach(t),_ze=i(m),qo=n(m,"DIV",{class:!0});var ml=s(qo);T(E8.$$.fragment,ml),IJo=i(ml),md=n(ml,"P",{});var bte=s(md);NJo=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Qz=n(bte,"A",{href:!0});var v0t=s(Qz);qJo=r(v0t,"from_pretrained()"),v0t.forEach(t),jJo=r(bte," class method or the "),Hz=n(bte,"A",{href:!0});var F0t=s(Hz);DJo=r(F0t,"from_config()"),F0t.forEach(t),GJo=r(bte,` class
method.`),bte.forEach(t),OJo=i(ml),C8=n(ml,"P",{});var EQe=s(C8);VJo=r(EQe,"This class cannot be instantiated directly using "),u2e=n(EQe,"CODE",{});var T0t=s(u2e);XJo=r(T0t,"__init__()"),T0t.forEach(t),zJo=r(EQe," (throws an error)."),EQe.forEach(t),WJo=i(ml),ut=n(ml,"DIV",{class:!0});var R7=s(ut);T(w8.$$.fragment,R7),QJo=i(R7),p2e=n(R7,"P",{});var M0t=s(p2e);HJo=r(M0t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),M0t.forEach(t),UJo=i(R7),fd=n(R7,"P",{});var vte=s(fd);JJo=r(vte,`Note:
Loading a model from its configuration file does `),_2e=n(vte,"STRONG",{});var E0t=s(_2e);YJo=r(E0t,"not"),E0t.forEach(t),KJo=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(vte,"A",{href:!0});var C0t=s(Uz);ZJo=r(C0t,"from_pretrained()"),C0t.forEach(t),eYo=r(vte," to load the model weights."),vte.forEach(t),oYo=i(R7),T(SF.$$.fragment,R7),R7.forEach(t),rYo=i(ml),ao=n(ml,"DIV",{class:!0});var ha=s(ao);T(A8.$$.fragment,ha),tYo=i(ha),b2e=n(ha,"P",{});var w0t=s(b2e);aYo=r(w0t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),w0t.forEach(t),nYo=i(ha),Va=n(ha,"P",{});var P7=s(Va);sYo=r(P7,"The model class to instantiate is selected based on the "),v2e=n(P7,"CODE",{});var A0t=s(v2e);lYo=r(A0t,"model_type"),A0t.forEach(t),iYo=r(P7,` property of the config object (either
passed as an argument or loaded from `),F2e=n(P7,"CODE",{});var L0t=s(F2e);dYo=r(L0t,"pretrained_model_name_or_path"),L0t.forEach(t),cYo=r(P7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=n(P7,"CODE",{});var y0t=s(T2e);mYo=r(y0t,"pretrained_model_name_or_path"),y0t.forEach(t),fYo=r(P7,":"),P7.forEach(t),gYo=i(ha),jo=n(ha,"UL",{});var ua=s(jo);RF=n(ua,"LI",{});var HBe=s(RF);M2e=n(HBe,"STRONG",{});var x0t=s(M2e);hYo=r(x0t,"bert"),x0t.forEach(t),uYo=r(HBe," \u2014 "),Jz=n(HBe,"A",{href:!0});var $0t=s(Jz);pYo=r($0t,"BertForNextSentencePrediction"),$0t.forEach(t),_Yo=r(HBe," (BERT model)"),HBe.forEach(t),bYo=i(ua),PF=n(ua,"LI",{});var UBe=s(PF);E2e=n(UBe,"STRONG",{});var k0t=s(E2e);vYo=r(k0t,"fnet"),k0t.forEach(t),FYo=r(UBe," \u2014 "),Yz=n(UBe,"A",{href:!0});var S0t=s(Yz);TYo=r(S0t,"FNetForNextSentencePrediction"),S0t.forEach(t),MYo=r(UBe," (FNet model)"),UBe.forEach(t),EYo=i(ua),BF=n(ua,"LI",{});var JBe=s(BF);C2e=n(JBe,"STRONG",{});var R0t=s(C2e);CYo=r(R0t,"megatron-bert"),R0t.forEach(t),wYo=r(JBe," \u2014 "),Kz=n(JBe,"A",{href:!0});var P0t=s(Kz);AYo=r(P0t,"MegatronBertForNextSentencePrediction"),P0t.forEach(t),LYo=r(JBe," (Megatron-BERT model)"),JBe.forEach(t),yYo=i(ua),IF=n(ua,"LI",{});var YBe=s(IF);w2e=n(YBe,"STRONG",{});var B0t=s(w2e);xYo=r(B0t,"mobilebert"),B0t.forEach(t),$Yo=r(YBe," \u2014 "),Zz=n(YBe,"A",{href:!0});var I0t=s(Zz);kYo=r(I0t,"MobileBertForNextSentencePrediction"),I0t.forEach(t),SYo=r(YBe," (MobileBERT model)"),YBe.forEach(t),RYo=i(ua),NF=n(ua,"LI",{});var KBe=s(NF);A2e=n(KBe,"STRONG",{});var N0t=s(A2e);PYo=r(N0t,"nezha"),N0t.forEach(t),BYo=r(KBe," \u2014 "),eW=n(KBe,"A",{href:!0});var q0t=s(eW);IYo=r(q0t,"NezhaForNextSentencePrediction"),q0t.forEach(t),NYo=r(KBe," (Nezha model)"),KBe.forEach(t),qYo=i(ua),qF=n(ua,"LI",{});var ZBe=s(qF);L2e=n(ZBe,"STRONG",{});var j0t=s(L2e);jYo=r(j0t,"qdqbert"),j0t.forEach(t),DYo=r(ZBe," \u2014 "),oW=n(ZBe,"A",{href:!0});var D0t=s(oW);GYo=r(D0t,"QDQBertForNextSentencePrediction"),D0t.forEach(t),OYo=r(ZBe," (QDQBert model)"),ZBe.forEach(t),ua.forEach(t),VYo=i(ha),jF=n(ha,"P",{});var eIe=s(jF);XYo=r(eIe,"The model is set in evaluation mode by default using "),y2e=n(eIe,"CODE",{});var G0t=s(y2e);zYo=r(G0t,"model.eval()"),G0t.forEach(t),WYo=r(eIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x2e=n(eIe,"CODE",{});var O0t=s(x2e);QYo=r(O0t,"model.train()"),O0t.forEach(t),eIe.forEach(t),HYo=i(ha),T(DF.$$.fragment,ha),ha.forEach(t),ml.forEach(t),bze=i(m),gd=n(m,"H2",{class:!0});var CQe=s(gd);GF=n(CQe,"A",{id:!0,class:!0,href:!0});var V0t=s(GF);$2e=n(V0t,"SPAN",{});var X0t=s($2e);T(L8.$$.fragment,X0t),X0t.forEach(t),V0t.forEach(t),UYo=i(CQe),k2e=n(CQe,"SPAN",{});var z0t=s(k2e);JYo=r(z0t,"AutoModelForTokenClassification"),z0t.forEach(t),CQe.forEach(t),vze=i(m),Do=n(m,"DIV",{class:!0});var fl=s(Do);T(y8.$$.fragment,fl),YYo=i(fl),hd=n(fl,"P",{});var Fte=s(hd);KYo=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rW=n(Fte,"A",{href:!0});var W0t=s(rW);ZYo=r(W0t,"from_pretrained()"),W0t.forEach(t),eKo=r(Fte," class method or the "),tW=n(Fte,"A",{href:!0});var Q0t=s(tW);oKo=r(Q0t,"from_config()"),Q0t.forEach(t),rKo=r(Fte,` class
method.`),Fte.forEach(t),tKo=i(fl),x8=n(fl,"P",{});var wQe=s(x8);aKo=r(wQe,"This class cannot be instantiated directly using "),S2e=n(wQe,"CODE",{});var H0t=s(S2e);nKo=r(H0t,"__init__()"),H0t.forEach(t),sKo=r(wQe," (throws an error)."),wQe.forEach(t),lKo=i(fl),pt=n(fl,"DIV",{class:!0});var B7=s(pt);T($8.$$.fragment,B7),iKo=i(B7),R2e=n(B7,"P",{});var U0t=s(R2e);dKo=r(U0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),U0t.forEach(t),cKo=i(B7),ud=n(B7,"P",{});var Tte=s(ud);mKo=r(Tte,`Note:
Loading a model from its configuration file does `),P2e=n(Tte,"STRONG",{});var J0t=s(P2e);fKo=r(J0t,"not"),J0t.forEach(t),gKo=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(Tte,"A",{href:!0});var Y0t=s(aW);hKo=r(Y0t,"from_pretrained()"),Y0t.forEach(t),uKo=r(Tte," to load the model weights."),Tte.forEach(t),pKo=i(B7),T(OF.$$.fragment,B7),B7.forEach(t),_Ko=i(fl),no=n(fl,"DIV",{class:!0});var pa=s(no);T(k8.$$.fragment,pa),bKo=i(pa),B2e=n(pa,"P",{});var K0t=s(B2e);vKo=r(K0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),K0t.forEach(t),FKo=i(pa),Xa=n(pa,"P",{});var I7=s(Xa);TKo=r(I7,"The model class to instantiate is selected based on the "),I2e=n(I7,"CODE",{});var Z0t=s(I2e);MKo=r(Z0t,"model_type"),Z0t.forEach(t),EKo=r(I7,` property of the config object (either
passed as an argument or loaded from `),N2e=n(I7,"CODE",{});var ewt=s(N2e);CKo=r(ewt,"pretrained_model_name_or_path"),ewt.forEach(t),wKo=r(I7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(I7,"CODE",{});var owt=s(q2e);AKo=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),LKo=r(I7,":"),I7.forEach(t),yKo=i(pa),U=n(pa,"UL",{});var Y=s(U);VF=n(Y,"LI",{});var oIe=s(VF);j2e=n(oIe,"STRONG",{});var rwt=s(j2e);xKo=r(rwt,"albert"),rwt.forEach(t),$Ko=r(oIe," \u2014 "),nW=n(oIe,"A",{href:!0});var twt=s(nW);kKo=r(twt,"AlbertForTokenClassification"),twt.forEach(t),SKo=r(oIe," (ALBERT model)"),oIe.forEach(t),RKo=i(Y),XF=n(Y,"LI",{});var rIe=s(XF);D2e=n(rIe,"STRONG",{});var awt=s(D2e);PKo=r(awt,"bert"),awt.forEach(t),BKo=r(rIe," \u2014 "),sW=n(rIe,"A",{href:!0});var nwt=s(sW);IKo=r(nwt,"BertForTokenClassification"),nwt.forEach(t),NKo=r(rIe," (BERT model)"),rIe.forEach(t),qKo=i(Y),zF=n(Y,"LI",{});var tIe=s(zF);G2e=n(tIe,"STRONG",{});var swt=s(G2e);jKo=r(swt,"big_bird"),swt.forEach(t),DKo=r(tIe," \u2014 "),lW=n(tIe,"A",{href:!0});var lwt=s(lW);GKo=r(lwt,"BigBirdForTokenClassification"),lwt.forEach(t),OKo=r(tIe," (BigBird model)"),tIe.forEach(t),VKo=i(Y),WF=n(Y,"LI",{});var aIe=s(WF);O2e=n(aIe,"STRONG",{});var iwt=s(O2e);XKo=r(iwt,"bloom"),iwt.forEach(t),zKo=r(aIe," \u2014 "),iW=n(aIe,"A",{href:!0});var dwt=s(iW);WKo=r(dwt,"BloomForTokenClassification"),dwt.forEach(t),QKo=r(aIe," (BLOOM model)"),aIe.forEach(t),HKo=i(Y),QF=n(Y,"LI",{});var nIe=s(QF);V2e=n(nIe,"STRONG",{});var cwt=s(V2e);UKo=r(cwt,"camembert"),cwt.forEach(t),JKo=r(nIe," \u2014 "),dW=n(nIe,"A",{href:!0});var mwt=s(dW);YKo=r(mwt,"CamembertForTokenClassification"),mwt.forEach(t),KKo=r(nIe," (CamemBERT model)"),nIe.forEach(t),ZKo=i(Y),HF=n(Y,"LI",{});var sIe=s(HF);X2e=n(sIe,"STRONG",{});var fwt=s(X2e);eZo=r(fwt,"canine"),fwt.forEach(t),oZo=r(sIe," \u2014 "),cW=n(sIe,"A",{href:!0});var gwt=s(cW);rZo=r(gwt,"CanineForTokenClassification"),gwt.forEach(t),tZo=r(sIe," (CANINE model)"),sIe.forEach(t),aZo=i(Y),UF=n(Y,"LI",{});var lIe=s(UF);z2e=n(lIe,"STRONG",{});var hwt=s(z2e);nZo=r(hwt,"convbert"),hwt.forEach(t),sZo=r(lIe," \u2014 "),mW=n(lIe,"A",{href:!0});var uwt=s(mW);lZo=r(uwt,"ConvBertForTokenClassification"),uwt.forEach(t),iZo=r(lIe," (ConvBERT model)"),lIe.forEach(t),dZo=i(Y),JF=n(Y,"LI",{});var iIe=s(JF);W2e=n(iIe,"STRONG",{});var pwt=s(W2e);cZo=r(pwt,"data2vec-text"),pwt.forEach(t),mZo=r(iIe," \u2014 "),fW=n(iIe,"A",{href:!0});var _wt=s(fW);fZo=r(_wt,"Data2VecTextForTokenClassification"),_wt.forEach(t),gZo=r(iIe," (Data2VecText model)"),iIe.forEach(t),hZo=i(Y),YF=n(Y,"LI",{});var dIe=s(YF);Q2e=n(dIe,"STRONG",{});var bwt=s(Q2e);uZo=r(bwt,"deberta"),bwt.forEach(t),pZo=r(dIe," \u2014 "),gW=n(dIe,"A",{href:!0});var vwt=s(gW);_Zo=r(vwt,"DebertaForTokenClassification"),vwt.forEach(t),bZo=r(dIe," (DeBERTa model)"),dIe.forEach(t),vZo=i(Y),KF=n(Y,"LI",{});var cIe=s(KF);H2e=n(cIe,"STRONG",{});var Fwt=s(H2e);FZo=r(Fwt,"deberta-v2"),Fwt.forEach(t),TZo=r(cIe," \u2014 "),hW=n(cIe,"A",{href:!0});var Twt=s(hW);MZo=r(Twt,"DebertaV2ForTokenClassification"),Twt.forEach(t),EZo=r(cIe," (DeBERTa-v2 model)"),cIe.forEach(t),CZo=i(Y),ZF=n(Y,"LI",{});var mIe=s(ZF);U2e=n(mIe,"STRONG",{});var Mwt=s(U2e);wZo=r(Mwt,"distilbert"),Mwt.forEach(t),AZo=r(mIe," \u2014 "),uW=n(mIe,"A",{href:!0});var Ewt=s(uW);LZo=r(Ewt,"DistilBertForTokenClassification"),Ewt.forEach(t),yZo=r(mIe," (DistilBERT model)"),mIe.forEach(t),xZo=i(Y),eT=n(Y,"LI",{});var fIe=s(eT);J2e=n(fIe,"STRONG",{});var Cwt=s(J2e);$Zo=r(Cwt,"electra"),Cwt.forEach(t),kZo=r(fIe," \u2014 "),pW=n(fIe,"A",{href:!0});var wwt=s(pW);SZo=r(wwt,"ElectraForTokenClassification"),wwt.forEach(t),RZo=r(fIe," (ELECTRA model)"),fIe.forEach(t),PZo=i(Y),oT=n(Y,"LI",{});var gIe=s(oT);Y2e=n(gIe,"STRONG",{});var Awt=s(Y2e);BZo=r(Awt,"flaubert"),Awt.forEach(t),IZo=r(gIe," \u2014 "),_W=n(gIe,"A",{href:!0});var Lwt=s(_W);NZo=r(Lwt,"FlaubertForTokenClassification"),Lwt.forEach(t),qZo=r(gIe," (FlauBERT model)"),gIe.forEach(t),jZo=i(Y),rT=n(Y,"LI",{});var hIe=s(rT);K2e=n(hIe,"STRONG",{});var ywt=s(K2e);DZo=r(ywt,"fnet"),ywt.forEach(t),GZo=r(hIe," \u2014 "),bW=n(hIe,"A",{href:!0});var xwt=s(bW);OZo=r(xwt,"FNetForTokenClassification"),xwt.forEach(t),VZo=r(hIe," (FNet model)"),hIe.forEach(t),XZo=i(Y),tT=n(Y,"LI",{});var uIe=s(tT);Z2e=n(uIe,"STRONG",{});var $wt=s(Z2e);zZo=r($wt,"funnel"),$wt.forEach(t),WZo=r(uIe," \u2014 "),vW=n(uIe,"A",{href:!0});var kwt=s(vW);QZo=r(kwt,"FunnelForTokenClassification"),kwt.forEach(t),HZo=r(uIe," (Funnel Transformer model)"),uIe.forEach(t),UZo=i(Y),aT=n(Y,"LI",{});var pIe=s(aT);ebe=n(pIe,"STRONG",{});var Swt=s(ebe);JZo=r(Swt,"gpt2"),Swt.forEach(t),YZo=r(pIe," \u2014 "),FW=n(pIe,"A",{href:!0});var Rwt=s(FW);KZo=r(Rwt,"GPT2ForTokenClassification"),Rwt.forEach(t),ZZo=r(pIe," (OpenAI GPT-2 model)"),pIe.forEach(t),eer=i(Y),nT=n(Y,"LI",{});var _Ie=s(nT);obe=n(_Ie,"STRONG",{});var Pwt=s(obe);oer=r(Pwt,"ibert"),Pwt.forEach(t),rer=r(_Ie," \u2014 "),TW=n(_Ie,"A",{href:!0});var Bwt=s(TW);ter=r(Bwt,"IBertForTokenClassification"),Bwt.forEach(t),aer=r(_Ie," (I-BERT model)"),_Ie.forEach(t),ner=i(Y),sT=n(Y,"LI",{});var bIe=s(sT);rbe=n(bIe,"STRONG",{});var Iwt=s(rbe);ser=r(Iwt,"layoutlm"),Iwt.forEach(t),ler=r(bIe," \u2014 "),MW=n(bIe,"A",{href:!0});var Nwt=s(MW);ier=r(Nwt,"LayoutLMForTokenClassification"),Nwt.forEach(t),der=r(bIe," (LayoutLM model)"),bIe.forEach(t),cer=i(Y),lT=n(Y,"LI",{});var vIe=s(lT);tbe=n(vIe,"STRONG",{});var qwt=s(tbe);mer=r(qwt,"layoutlmv2"),qwt.forEach(t),fer=r(vIe," \u2014 "),EW=n(vIe,"A",{href:!0});var jwt=s(EW);ger=r(jwt,"LayoutLMv2ForTokenClassification"),jwt.forEach(t),her=r(vIe," (LayoutLMv2 model)"),vIe.forEach(t),uer=i(Y),iT=n(Y,"LI",{});var FIe=s(iT);abe=n(FIe,"STRONG",{});var Dwt=s(abe);per=r(Dwt,"layoutlmv3"),Dwt.forEach(t),_er=r(FIe," \u2014 "),CW=n(FIe,"A",{href:!0});var Gwt=s(CW);ber=r(Gwt,"LayoutLMv3ForTokenClassification"),Gwt.forEach(t),ver=r(FIe," (LayoutLMv3 model)"),FIe.forEach(t),Fer=i(Y),dT=n(Y,"LI",{});var TIe=s(dT);nbe=n(TIe,"STRONG",{});var Owt=s(nbe);Ter=r(Owt,"longformer"),Owt.forEach(t),Mer=r(TIe," \u2014 "),wW=n(TIe,"A",{href:!0});var Vwt=s(wW);Eer=r(Vwt,"LongformerForTokenClassification"),Vwt.forEach(t),Cer=r(TIe," (Longformer model)"),TIe.forEach(t),wer=i(Y),cT=n(Y,"LI",{});var MIe=s(cT);sbe=n(MIe,"STRONG",{});var Xwt=s(sbe);Aer=r(Xwt,"megatron-bert"),Xwt.forEach(t),Ler=r(MIe," \u2014 "),AW=n(MIe,"A",{href:!0});var zwt=s(AW);yer=r(zwt,"MegatronBertForTokenClassification"),zwt.forEach(t),xer=r(MIe," (Megatron-BERT model)"),MIe.forEach(t),$er=i(Y),mT=n(Y,"LI",{});var EIe=s(mT);lbe=n(EIe,"STRONG",{});var Wwt=s(lbe);ker=r(Wwt,"mobilebert"),Wwt.forEach(t),Ser=r(EIe," \u2014 "),LW=n(EIe,"A",{href:!0});var Qwt=s(LW);Rer=r(Qwt,"MobileBertForTokenClassification"),Qwt.forEach(t),Per=r(EIe," (MobileBERT model)"),EIe.forEach(t),Ber=i(Y),fT=n(Y,"LI",{});var CIe=s(fT);ibe=n(CIe,"STRONG",{});var Hwt=s(ibe);Ier=r(Hwt,"mpnet"),Hwt.forEach(t),Ner=r(CIe," \u2014 "),yW=n(CIe,"A",{href:!0});var Uwt=s(yW);qer=r(Uwt,"MPNetForTokenClassification"),Uwt.forEach(t),jer=r(CIe," (MPNet model)"),CIe.forEach(t),Der=i(Y),gT=n(Y,"LI",{});var wIe=s(gT);dbe=n(wIe,"STRONG",{});var Jwt=s(dbe);Ger=r(Jwt,"nezha"),Jwt.forEach(t),Oer=r(wIe," \u2014 "),xW=n(wIe,"A",{href:!0});var Ywt=s(xW);Ver=r(Ywt,"NezhaForTokenClassification"),Ywt.forEach(t),Xer=r(wIe," (Nezha model)"),wIe.forEach(t),zer=i(Y),hT=n(Y,"LI",{});var AIe=s(hT);cbe=n(AIe,"STRONG",{});var Kwt=s(cbe);Wer=r(Kwt,"nystromformer"),Kwt.forEach(t),Qer=r(AIe," \u2014 "),$W=n(AIe,"A",{href:!0});var Zwt=s($W);Her=r(Zwt,"NystromformerForTokenClassification"),Zwt.forEach(t),Uer=r(AIe," (Nystr\xF6mformer model)"),AIe.forEach(t),Jer=i(Y),uT=n(Y,"LI",{});var LIe=s(uT);mbe=n(LIe,"STRONG",{});var eAt=s(mbe);Yer=r(eAt,"qdqbert"),eAt.forEach(t),Ker=r(LIe," \u2014 "),kW=n(LIe,"A",{href:!0});var oAt=s(kW);Zer=r(oAt,"QDQBertForTokenClassification"),oAt.forEach(t),eor=r(LIe," (QDQBert model)"),LIe.forEach(t),oor=i(Y),pT=n(Y,"LI",{});var yIe=s(pT);fbe=n(yIe,"STRONG",{});var rAt=s(fbe);ror=r(rAt,"rembert"),rAt.forEach(t),tor=r(yIe," \u2014 "),SW=n(yIe,"A",{href:!0});var tAt=s(SW);aor=r(tAt,"RemBertForTokenClassification"),tAt.forEach(t),nor=r(yIe," (RemBERT model)"),yIe.forEach(t),sor=i(Y),_T=n(Y,"LI",{});var xIe=s(_T);gbe=n(xIe,"STRONG",{});var aAt=s(gbe);lor=r(aAt,"roberta"),aAt.forEach(t),ior=r(xIe," \u2014 "),RW=n(xIe,"A",{href:!0});var nAt=s(RW);dor=r(nAt,"RobertaForTokenClassification"),nAt.forEach(t),cor=r(xIe," (RoBERTa model)"),xIe.forEach(t),mor=i(Y),bT=n(Y,"LI",{});var $Ie=s(bT);hbe=n($Ie,"STRONG",{});var sAt=s(hbe);gor=r(sAt,"roformer"),sAt.forEach(t),hor=r($Ie," \u2014 "),PW=n($Ie,"A",{href:!0});var lAt=s(PW);uor=r(lAt,"RoFormerForTokenClassification"),lAt.forEach(t),por=r($Ie," (RoFormer model)"),$Ie.forEach(t),_or=i(Y),vT=n(Y,"LI",{});var kIe=s(vT);ube=n(kIe,"STRONG",{});var iAt=s(ube);bor=r(iAt,"squeezebert"),iAt.forEach(t),vor=r(kIe," \u2014 "),BW=n(kIe,"A",{href:!0});var dAt=s(BW);For=r(dAt,"SqueezeBertForTokenClassification"),dAt.forEach(t),Tor=r(kIe," (SqueezeBERT model)"),kIe.forEach(t),Mor=i(Y),FT=n(Y,"LI",{});var SIe=s(FT);pbe=n(SIe,"STRONG",{});var cAt=s(pbe);Eor=r(cAt,"xlm"),cAt.forEach(t),Cor=r(SIe," \u2014 "),IW=n(SIe,"A",{href:!0});var mAt=s(IW);wor=r(mAt,"XLMForTokenClassification"),mAt.forEach(t),Aor=r(SIe," (XLM model)"),SIe.forEach(t),Lor=i(Y),TT=n(Y,"LI",{});var RIe=s(TT);_be=n(RIe,"STRONG",{});var fAt=s(_be);yor=r(fAt,"xlm-roberta"),fAt.forEach(t),xor=r(RIe," \u2014 "),NW=n(RIe,"A",{href:!0});var gAt=s(NW);$or=r(gAt,"XLMRobertaForTokenClassification"),gAt.forEach(t),kor=r(RIe," (XLM-RoBERTa model)"),RIe.forEach(t),Sor=i(Y),MT=n(Y,"LI",{});var PIe=s(MT);bbe=n(PIe,"STRONG",{});var hAt=s(bbe);Ror=r(hAt,"xlm-roberta-xl"),hAt.forEach(t),Por=r(PIe," \u2014 "),qW=n(PIe,"A",{href:!0});var uAt=s(qW);Bor=r(uAt,"XLMRobertaXLForTokenClassification"),uAt.forEach(t),Ior=r(PIe," (XLM-RoBERTa-XL model)"),PIe.forEach(t),Nor=i(Y),ET=n(Y,"LI",{});var BIe=s(ET);vbe=n(BIe,"STRONG",{});var pAt=s(vbe);qor=r(pAt,"xlnet"),pAt.forEach(t),jor=r(BIe," \u2014 "),jW=n(BIe,"A",{href:!0});var _At=s(jW);Dor=r(_At,"XLNetForTokenClassification"),_At.forEach(t),Gor=r(BIe," (XLNet model)"),BIe.forEach(t),Oor=i(Y),CT=n(Y,"LI",{});var IIe=s(CT);Fbe=n(IIe,"STRONG",{});var bAt=s(Fbe);Vor=r(bAt,"yoso"),bAt.forEach(t),Xor=r(IIe," \u2014 "),DW=n(IIe,"A",{href:!0});var vAt=s(DW);zor=r(vAt,"YosoForTokenClassification"),vAt.forEach(t),Wor=r(IIe," (YOSO model)"),IIe.forEach(t),Y.forEach(t),Qor=i(pa),wT=n(pa,"P",{});var NIe=s(wT);Hor=r(NIe,"The model is set in evaluation mode by default using "),Tbe=n(NIe,"CODE",{});var FAt=s(Tbe);Uor=r(FAt,"model.eval()"),FAt.forEach(t),Jor=r(NIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mbe=n(NIe,"CODE",{});var TAt=s(Mbe);Yor=r(TAt,"model.train()"),TAt.forEach(t),NIe.forEach(t),Kor=i(pa),T(AT.$$.fragment,pa),pa.forEach(t),fl.forEach(t),Fze=i(m),pd=n(m,"H2",{class:!0});var AQe=s(pd);LT=n(AQe,"A",{id:!0,class:!0,href:!0});var MAt=s(LT);Ebe=n(MAt,"SPAN",{});var EAt=s(Ebe);T(S8.$$.fragment,EAt),EAt.forEach(t),MAt.forEach(t),Zor=i(AQe),Cbe=n(AQe,"SPAN",{});var CAt=s(Cbe);err=r(CAt,"AutoModelForQuestionAnswering"),CAt.forEach(t),AQe.forEach(t),Tze=i(m),Go=n(m,"DIV",{class:!0});var gl=s(Go);T(R8.$$.fragment,gl),orr=i(gl),_d=n(gl,"P",{});var Mte=s(_d);rrr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GW=n(Mte,"A",{href:!0});var wAt=s(GW);trr=r(wAt,"from_pretrained()"),wAt.forEach(t),arr=r(Mte," class method or the "),OW=n(Mte,"A",{href:!0});var AAt=s(OW);nrr=r(AAt,"from_config()"),AAt.forEach(t),srr=r(Mte,` class
method.`),Mte.forEach(t),lrr=i(gl),P8=n(gl,"P",{});var LQe=s(P8);irr=r(LQe,"This class cannot be instantiated directly using "),wbe=n(LQe,"CODE",{});var LAt=s(wbe);drr=r(LAt,"__init__()"),LAt.forEach(t),crr=r(LQe," (throws an error)."),LQe.forEach(t),mrr=i(gl),_t=n(gl,"DIV",{class:!0});var N7=s(_t);T(B8.$$.fragment,N7),frr=i(N7),Abe=n(N7,"P",{});var yAt=s(Abe);grr=r(yAt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yAt.forEach(t),hrr=i(N7),bd=n(N7,"P",{});var Ete=s(bd);urr=r(Ete,`Note:
Loading a model from its configuration file does `),Lbe=n(Ete,"STRONG",{});var xAt=s(Lbe);prr=r(xAt,"not"),xAt.forEach(t),_rr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(Ete,"A",{href:!0});var $At=s(VW);brr=r($At,"from_pretrained()"),$At.forEach(t),vrr=r(Ete," to load the model weights."),Ete.forEach(t),Frr=i(N7),T(yT.$$.fragment,N7),N7.forEach(t),Trr=i(gl),so=n(gl,"DIV",{class:!0});var _a=s(so);T(I8.$$.fragment,_a),Mrr=i(_a),ybe=n(_a,"P",{});var kAt=s(ybe);Err=r(kAt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),kAt.forEach(t),Crr=i(_a),za=n(_a,"P",{});var q7=s(za);wrr=r(q7,"The model class to instantiate is selected based on the "),xbe=n(q7,"CODE",{});var SAt=s(xbe);Arr=r(SAt,"model_type"),SAt.forEach(t),Lrr=r(q7,` property of the config object (either
passed as an argument or loaded from `),$be=n(q7,"CODE",{});var RAt=s($be);yrr=r(RAt,"pretrained_model_name_or_path"),RAt.forEach(t),xrr=r(q7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=n(q7,"CODE",{});var PAt=s(kbe);$rr=r(PAt,"pretrained_model_name_or_path"),PAt.forEach(t),krr=r(q7,":"),q7.forEach(t),Srr=i(_a),V=n(_a,"UL",{});var X=s(V);xT=n(X,"LI",{});var qIe=s(xT);Sbe=n(qIe,"STRONG",{});var BAt=s(Sbe);Rrr=r(BAt,"albert"),BAt.forEach(t),Prr=r(qIe," \u2014 "),XW=n(qIe,"A",{href:!0});var IAt=s(XW);Brr=r(IAt,"AlbertForQuestionAnswering"),IAt.forEach(t),Irr=r(qIe," (ALBERT model)"),qIe.forEach(t),Nrr=i(X),$T=n(X,"LI",{});var jIe=s($T);Rbe=n(jIe,"STRONG",{});var NAt=s(Rbe);qrr=r(NAt,"bart"),NAt.forEach(t),jrr=r(jIe," \u2014 "),zW=n(jIe,"A",{href:!0});var qAt=s(zW);Drr=r(qAt,"BartForQuestionAnswering"),qAt.forEach(t),Grr=r(jIe," (BART model)"),jIe.forEach(t),Orr=i(X),kT=n(X,"LI",{});var DIe=s(kT);Pbe=n(DIe,"STRONG",{});var jAt=s(Pbe);Vrr=r(jAt,"bert"),jAt.forEach(t),Xrr=r(DIe," \u2014 "),WW=n(DIe,"A",{href:!0});var DAt=s(WW);zrr=r(DAt,"BertForQuestionAnswering"),DAt.forEach(t),Wrr=r(DIe," (BERT model)"),DIe.forEach(t),Qrr=i(X),ST=n(X,"LI",{});var GIe=s(ST);Bbe=n(GIe,"STRONG",{});var GAt=s(Bbe);Hrr=r(GAt,"big_bird"),GAt.forEach(t),Urr=r(GIe," \u2014 "),QW=n(GIe,"A",{href:!0});var OAt=s(QW);Jrr=r(OAt,"BigBirdForQuestionAnswering"),OAt.forEach(t),Yrr=r(GIe," (BigBird model)"),GIe.forEach(t),Krr=i(X),RT=n(X,"LI",{});var OIe=s(RT);Ibe=n(OIe,"STRONG",{});var VAt=s(Ibe);Zrr=r(VAt,"bigbird_pegasus"),VAt.forEach(t),etr=r(OIe," \u2014 "),HW=n(OIe,"A",{href:!0});var XAt=s(HW);otr=r(XAt,"BigBirdPegasusForQuestionAnswering"),XAt.forEach(t),rtr=r(OIe," (BigBird-Pegasus model)"),OIe.forEach(t),ttr=i(X),PT=n(X,"LI",{});var VIe=s(PT);Nbe=n(VIe,"STRONG",{});var zAt=s(Nbe);atr=r(zAt,"camembert"),zAt.forEach(t),ntr=r(VIe," \u2014 "),UW=n(VIe,"A",{href:!0});var WAt=s(UW);str=r(WAt,"CamembertForQuestionAnswering"),WAt.forEach(t),ltr=r(VIe," (CamemBERT model)"),VIe.forEach(t),itr=i(X),BT=n(X,"LI",{});var XIe=s(BT);qbe=n(XIe,"STRONG",{});var QAt=s(qbe);dtr=r(QAt,"canine"),QAt.forEach(t),ctr=r(XIe," \u2014 "),JW=n(XIe,"A",{href:!0});var HAt=s(JW);mtr=r(HAt,"CanineForQuestionAnswering"),HAt.forEach(t),ftr=r(XIe," (CANINE model)"),XIe.forEach(t),gtr=i(X),IT=n(X,"LI",{});var zIe=s(IT);jbe=n(zIe,"STRONG",{});var UAt=s(jbe);htr=r(UAt,"convbert"),UAt.forEach(t),utr=r(zIe," \u2014 "),YW=n(zIe,"A",{href:!0});var JAt=s(YW);ptr=r(JAt,"ConvBertForQuestionAnswering"),JAt.forEach(t),_tr=r(zIe," (ConvBERT model)"),zIe.forEach(t),btr=i(X),NT=n(X,"LI",{});var WIe=s(NT);Dbe=n(WIe,"STRONG",{});var YAt=s(Dbe);vtr=r(YAt,"data2vec-text"),YAt.forEach(t),Ftr=r(WIe," \u2014 "),KW=n(WIe,"A",{href:!0});var KAt=s(KW);Ttr=r(KAt,"Data2VecTextForQuestionAnswering"),KAt.forEach(t),Mtr=r(WIe," (Data2VecText model)"),WIe.forEach(t),Etr=i(X),qT=n(X,"LI",{});var QIe=s(qT);Gbe=n(QIe,"STRONG",{});var ZAt=s(Gbe);Ctr=r(ZAt,"deberta"),ZAt.forEach(t),wtr=r(QIe," \u2014 "),ZW=n(QIe,"A",{href:!0});var e6t=s(ZW);Atr=r(e6t,"DebertaForQuestionAnswering"),e6t.forEach(t),Ltr=r(QIe," (DeBERTa model)"),QIe.forEach(t),ytr=i(X),jT=n(X,"LI",{});var HIe=s(jT);Obe=n(HIe,"STRONG",{});var o6t=s(Obe);xtr=r(o6t,"deberta-v2"),o6t.forEach(t),$tr=r(HIe," \u2014 "),eQ=n(HIe,"A",{href:!0});var r6t=s(eQ);ktr=r(r6t,"DebertaV2ForQuestionAnswering"),r6t.forEach(t),Str=r(HIe," (DeBERTa-v2 model)"),HIe.forEach(t),Rtr=i(X),DT=n(X,"LI",{});var UIe=s(DT);Vbe=n(UIe,"STRONG",{});var t6t=s(Vbe);Ptr=r(t6t,"distilbert"),t6t.forEach(t),Btr=r(UIe," \u2014 "),oQ=n(UIe,"A",{href:!0});var a6t=s(oQ);Itr=r(a6t,"DistilBertForQuestionAnswering"),a6t.forEach(t),Ntr=r(UIe," (DistilBERT model)"),UIe.forEach(t),qtr=i(X),GT=n(X,"LI",{});var JIe=s(GT);Xbe=n(JIe,"STRONG",{});var n6t=s(Xbe);jtr=r(n6t,"electra"),n6t.forEach(t),Dtr=r(JIe," \u2014 "),rQ=n(JIe,"A",{href:!0});var s6t=s(rQ);Gtr=r(s6t,"ElectraForQuestionAnswering"),s6t.forEach(t),Otr=r(JIe," (ELECTRA model)"),JIe.forEach(t),Vtr=i(X),OT=n(X,"LI",{});var YIe=s(OT);zbe=n(YIe,"STRONG",{});var l6t=s(zbe);Xtr=r(l6t,"flaubert"),l6t.forEach(t),ztr=r(YIe," \u2014 "),tQ=n(YIe,"A",{href:!0});var i6t=s(tQ);Wtr=r(i6t,"FlaubertForQuestionAnsweringSimple"),i6t.forEach(t),Qtr=r(YIe," (FlauBERT model)"),YIe.forEach(t),Htr=i(X),VT=n(X,"LI",{});var KIe=s(VT);Wbe=n(KIe,"STRONG",{});var d6t=s(Wbe);Utr=r(d6t,"fnet"),d6t.forEach(t),Jtr=r(KIe," \u2014 "),aQ=n(KIe,"A",{href:!0});var c6t=s(aQ);Ytr=r(c6t,"FNetForQuestionAnswering"),c6t.forEach(t),Ktr=r(KIe," (FNet model)"),KIe.forEach(t),Ztr=i(X),XT=n(X,"LI",{});var ZIe=s(XT);Qbe=n(ZIe,"STRONG",{});var m6t=s(Qbe);ear=r(m6t,"funnel"),m6t.forEach(t),oar=r(ZIe," \u2014 "),nQ=n(ZIe,"A",{href:!0});var f6t=s(nQ);rar=r(f6t,"FunnelForQuestionAnswering"),f6t.forEach(t),tar=r(ZIe," (Funnel Transformer model)"),ZIe.forEach(t),aar=i(X),zT=n(X,"LI",{});var eNe=s(zT);Hbe=n(eNe,"STRONG",{});var g6t=s(Hbe);nar=r(g6t,"gptj"),g6t.forEach(t),sar=r(eNe," \u2014 "),sQ=n(eNe,"A",{href:!0});var h6t=s(sQ);lar=r(h6t,"GPTJForQuestionAnswering"),h6t.forEach(t),iar=r(eNe," (GPT-J model)"),eNe.forEach(t),dar=i(X),WT=n(X,"LI",{});var oNe=s(WT);Ube=n(oNe,"STRONG",{});var u6t=s(Ube);car=r(u6t,"ibert"),u6t.forEach(t),mar=r(oNe," \u2014 "),lQ=n(oNe,"A",{href:!0});var p6t=s(lQ);far=r(p6t,"IBertForQuestionAnswering"),p6t.forEach(t),gar=r(oNe," (I-BERT model)"),oNe.forEach(t),har=i(X),QT=n(X,"LI",{});var rNe=s(QT);Jbe=n(rNe,"STRONG",{});var _6t=s(Jbe);uar=r(_6t,"layoutlmv2"),_6t.forEach(t),par=r(rNe," \u2014 "),iQ=n(rNe,"A",{href:!0});var b6t=s(iQ);_ar=r(b6t,"LayoutLMv2ForQuestionAnswering"),b6t.forEach(t),bar=r(rNe," (LayoutLMv2 model)"),rNe.forEach(t),Far=i(X),HT=n(X,"LI",{});var tNe=s(HT);Ybe=n(tNe,"STRONG",{});var v6t=s(Ybe);Tar=r(v6t,"layoutlmv3"),v6t.forEach(t),Mar=r(tNe," \u2014 "),dQ=n(tNe,"A",{href:!0});var F6t=s(dQ);Ear=r(F6t,"LayoutLMv3ForQuestionAnswering"),F6t.forEach(t),Car=r(tNe," (LayoutLMv3 model)"),tNe.forEach(t),war=i(X),UT=n(X,"LI",{});var aNe=s(UT);Kbe=n(aNe,"STRONG",{});var T6t=s(Kbe);Aar=r(T6t,"led"),T6t.forEach(t),Lar=r(aNe," \u2014 "),cQ=n(aNe,"A",{href:!0});var M6t=s(cQ);yar=r(M6t,"LEDForQuestionAnswering"),M6t.forEach(t),xar=r(aNe," (LED model)"),aNe.forEach(t),$ar=i(X),JT=n(X,"LI",{});var nNe=s(JT);Zbe=n(nNe,"STRONG",{});var E6t=s(Zbe);kar=r(E6t,"longformer"),E6t.forEach(t),Sar=r(nNe," \u2014 "),mQ=n(nNe,"A",{href:!0});var C6t=s(mQ);Rar=r(C6t,"LongformerForQuestionAnswering"),C6t.forEach(t),Par=r(nNe," (Longformer model)"),nNe.forEach(t),Bar=i(X),YT=n(X,"LI",{});var sNe=s(YT);eve=n(sNe,"STRONG",{});var w6t=s(eve);Iar=r(w6t,"lxmert"),w6t.forEach(t),Nar=r(sNe," \u2014 "),fQ=n(sNe,"A",{href:!0});var A6t=s(fQ);qar=r(A6t,"LxmertForQuestionAnswering"),A6t.forEach(t),jar=r(sNe," (LXMERT model)"),sNe.forEach(t),Dar=i(X),KT=n(X,"LI",{});var lNe=s(KT);ove=n(lNe,"STRONG",{});var L6t=s(ove);Gar=r(L6t,"mbart"),L6t.forEach(t),Oar=r(lNe," \u2014 "),gQ=n(lNe,"A",{href:!0});var y6t=s(gQ);Var=r(y6t,"MBartForQuestionAnswering"),y6t.forEach(t),Xar=r(lNe," (mBART model)"),lNe.forEach(t),zar=i(X),ZT=n(X,"LI",{});var iNe=s(ZT);rve=n(iNe,"STRONG",{});var x6t=s(rve);War=r(x6t,"megatron-bert"),x6t.forEach(t),Qar=r(iNe," \u2014 "),hQ=n(iNe,"A",{href:!0});var $6t=s(hQ);Har=r($6t,"MegatronBertForQuestionAnswering"),$6t.forEach(t),Uar=r(iNe," (Megatron-BERT model)"),iNe.forEach(t),Jar=i(X),eM=n(X,"LI",{});var dNe=s(eM);tve=n(dNe,"STRONG",{});var k6t=s(tve);Yar=r(k6t,"mobilebert"),k6t.forEach(t),Kar=r(dNe," \u2014 "),uQ=n(dNe,"A",{href:!0});var S6t=s(uQ);Zar=r(S6t,"MobileBertForQuestionAnswering"),S6t.forEach(t),enr=r(dNe," (MobileBERT model)"),dNe.forEach(t),onr=i(X),oM=n(X,"LI",{});var cNe=s(oM);ave=n(cNe,"STRONG",{});var R6t=s(ave);rnr=r(R6t,"mpnet"),R6t.forEach(t),tnr=r(cNe," \u2014 "),pQ=n(cNe,"A",{href:!0});var P6t=s(pQ);anr=r(P6t,"MPNetForQuestionAnswering"),P6t.forEach(t),nnr=r(cNe," (MPNet model)"),cNe.forEach(t),snr=i(X),rM=n(X,"LI",{});var mNe=s(rM);nve=n(mNe,"STRONG",{});var B6t=s(nve);lnr=r(B6t,"mvp"),B6t.forEach(t),inr=r(mNe," \u2014 "),_Q=n(mNe,"A",{href:!0});var I6t=s(_Q);dnr=r(I6t,"MvpForQuestionAnswering"),I6t.forEach(t),cnr=r(mNe," (MVP model)"),mNe.forEach(t),mnr=i(X),tM=n(X,"LI",{});var fNe=s(tM);sve=n(fNe,"STRONG",{});var N6t=s(sve);fnr=r(N6t,"nezha"),N6t.forEach(t),gnr=r(fNe," \u2014 "),bQ=n(fNe,"A",{href:!0});var q6t=s(bQ);hnr=r(q6t,"NezhaForQuestionAnswering"),q6t.forEach(t),unr=r(fNe," (Nezha model)"),fNe.forEach(t),pnr=i(X),aM=n(X,"LI",{});var gNe=s(aM);lve=n(gNe,"STRONG",{});var j6t=s(lve);_nr=r(j6t,"nystromformer"),j6t.forEach(t),bnr=r(gNe," \u2014 "),vQ=n(gNe,"A",{href:!0});var D6t=s(vQ);vnr=r(D6t,"NystromformerForQuestionAnswering"),D6t.forEach(t),Fnr=r(gNe," (Nystr\xF6mformer model)"),gNe.forEach(t),Tnr=i(X),nM=n(X,"LI",{});var hNe=s(nM);ive=n(hNe,"STRONG",{});var G6t=s(ive);Mnr=r(G6t,"qdqbert"),G6t.forEach(t),Enr=r(hNe," \u2014 "),FQ=n(hNe,"A",{href:!0});var O6t=s(FQ);Cnr=r(O6t,"QDQBertForQuestionAnswering"),O6t.forEach(t),wnr=r(hNe," (QDQBert model)"),hNe.forEach(t),Anr=i(X),sM=n(X,"LI",{});var uNe=s(sM);dve=n(uNe,"STRONG",{});var V6t=s(dve);Lnr=r(V6t,"reformer"),V6t.forEach(t),ynr=r(uNe," \u2014 "),TQ=n(uNe,"A",{href:!0});var X6t=s(TQ);xnr=r(X6t,"ReformerForQuestionAnswering"),X6t.forEach(t),$nr=r(uNe," (Reformer model)"),uNe.forEach(t),knr=i(X),lM=n(X,"LI",{});var pNe=s(lM);cve=n(pNe,"STRONG",{});var z6t=s(cve);Snr=r(z6t,"rembert"),z6t.forEach(t),Rnr=r(pNe," \u2014 "),MQ=n(pNe,"A",{href:!0});var W6t=s(MQ);Pnr=r(W6t,"RemBertForQuestionAnswering"),W6t.forEach(t),Bnr=r(pNe," (RemBERT model)"),pNe.forEach(t),Inr=i(X),iM=n(X,"LI",{});var _Ne=s(iM);mve=n(_Ne,"STRONG",{});var Q6t=s(mve);Nnr=r(Q6t,"roberta"),Q6t.forEach(t),qnr=r(_Ne," \u2014 "),EQ=n(_Ne,"A",{href:!0});var H6t=s(EQ);jnr=r(H6t,"RobertaForQuestionAnswering"),H6t.forEach(t),Dnr=r(_Ne," (RoBERTa model)"),_Ne.forEach(t),Gnr=i(X),dM=n(X,"LI",{});var bNe=s(dM);fve=n(bNe,"STRONG",{});var U6t=s(fve);Onr=r(U6t,"roformer"),U6t.forEach(t),Vnr=r(bNe," \u2014 "),CQ=n(bNe,"A",{href:!0});var J6t=s(CQ);Xnr=r(J6t,"RoFormerForQuestionAnswering"),J6t.forEach(t),znr=r(bNe," (RoFormer model)"),bNe.forEach(t),Wnr=i(X),cM=n(X,"LI",{});var vNe=s(cM);gve=n(vNe,"STRONG",{});var Y6t=s(gve);Qnr=r(Y6t,"splinter"),Y6t.forEach(t),Hnr=r(vNe," \u2014 "),wQ=n(vNe,"A",{href:!0});var K6t=s(wQ);Unr=r(K6t,"SplinterForQuestionAnswering"),K6t.forEach(t),Jnr=r(vNe," (Splinter model)"),vNe.forEach(t),Ynr=i(X),mM=n(X,"LI",{});var FNe=s(mM);hve=n(FNe,"STRONG",{});var Z6t=s(hve);Knr=r(Z6t,"squeezebert"),Z6t.forEach(t),Znr=r(FNe," \u2014 "),AQ=n(FNe,"A",{href:!0});var e7t=s(AQ);esr=r(e7t,"SqueezeBertForQuestionAnswering"),e7t.forEach(t),osr=r(FNe," (SqueezeBERT model)"),FNe.forEach(t),rsr=i(X),fM=n(X,"LI",{});var TNe=s(fM);uve=n(TNe,"STRONG",{});var o7t=s(uve);tsr=r(o7t,"xlm"),o7t.forEach(t),asr=r(TNe," \u2014 "),LQ=n(TNe,"A",{href:!0});var r7t=s(LQ);nsr=r(r7t,"XLMForQuestionAnsweringSimple"),r7t.forEach(t),ssr=r(TNe," (XLM model)"),TNe.forEach(t),lsr=i(X),gM=n(X,"LI",{});var MNe=s(gM);pve=n(MNe,"STRONG",{});var t7t=s(pve);isr=r(t7t,"xlm-roberta"),t7t.forEach(t),dsr=r(MNe," \u2014 "),yQ=n(MNe,"A",{href:!0});var a7t=s(yQ);csr=r(a7t,"XLMRobertaForQuestionAnswering"),a7t.forEach(t),msr=r(MNe," (XLM-RoBERTa model)"),MNe.forEach(t),fsr=i(X),hM=n(X,"LI",{});var ENe=s(hM);_ve=n(ENe,"STRONG",{});var n7t=s(_ve);gsr=r(n7t,"xlm-roberta-xl"),n7t.forEach(t),hsr=r(ENe," \u2014 "),xQ=n(ENe,"A",{href:!0});var s7t=s(xQ);usr=r(s7t,"XLMRobertaXLForQuestionAnswering"),s7t.forEach(t),psr=r(ENe," (XLM-RoBERTa-XL model)"),ENe.forEach(t),_sr=i(X),uM=n(X,"LI",{});var CNe=s(uM);bve=n(CNe,"STRONG",{});var l7t=s(bve);bsr=r(l7t,"xlnet"),l7t.forEach(t),vsr=r(CNe," \u2014 "),$Q=n(CNe,"A",{href:!0});var i7t=s($Q);Fsr=r(i7t,"XLNetForQuestionAnsweringSimple"),i7t.forEach(t),Tsr=r(CNe," (XLNet model)"),CNe.forEach(t),Msr=i(X),pM=n(X,"LI",{});var wNe=s(pM);vve=n(wNe,"STRONG",{});var d7t=s(vve);Esr=r(d7t,"yoso"),d7t.forEach(t),Csr=r(wNe," \u2014 "),kQ=n(wNe,"A",{href:!0});var c7t=s(kQ);wsr=r(c7t,"YosoForQuestionAnswering"),c7t.forEach(t),Asr=r(wNe," (YOSO model)"),wNe.forEach(t),X.forEach(t),Lsr=i(_a),_M=n(_a,"P",{});var ANe=s(_M);ysr=r(ANe,"The model is set in evaluation mode by default using "),Fve=n(ANe,"CODE",{});var m7t=s(Fve);xsr=r(m7t,"model.eval()"),m7t.forEach(t),$sr=r(ANe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tve=n(ANe,"CODE",{});var f7t=s(Tve);ksr=r(f7t,"model.train()"),f7t.forEach(t),ANe.forEach(t),Ssr=i(_a),T(bM.$$.fragment,_a),_a.forEach(t),gl.forEach(t),Mze=i(m),vd=n(m,"H2",{class:!0});var yQe=s(vd);vM=n(yQe,"A",{id:!0,class:!0,href:!0});var g7t=s(vM);Mve=n(g7t,"SPAN",{});var h7t=s(Mve);T(N8.$$.fragment,h7t),h7t.forEach(t),g7t.forEach(t),Rsr=i(yQe),Eve=n(yQe,"SPAN",{});var u7t=s(Eve);Psr=r(u7t,"AutoModelForTableQuestionAnswering"),u7t.forEach(t),yQe.forEach(t),Eze=i(m),Oo=n(m,"DIV",{class:!0});var hl=s(Oo);T(q8.$$.fragment,hl),Bsr=i(hl),Fd=n(hl,"P",{});var Cte=s(Fd);Isr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),SQ=n(Cte,"A",{href:!0});var p7t=s(SQ);Nsr=r(p7t,"from_pretrained()"),p7t.forEach(t),qsr=r(Cte," class method or the "),RQ=n(Cte,"A",{href:!0});var _7t=s(RQ);jsr=r(_7t,"from_config()"),_7t.forEach(t),Dsr=r(Cte,` class
method.`),Cte.forEach(t),Gsr=i(hl),j8=n(hl,"P",{});var xQe=s(j8);Osr=r(xQe,"This class cannot be instantiated directly using "),Cve=n(xQe,"CODE",{});var b7t=s(Cve);Vsr=r(b7t,"__init__()"),b7t.forEach(t),Xsr=r(xQe," (throws an error)."),xQe.forEach(t),zsr=i(hl),bt=n(hl,"DIV",{class:!0});var j7=s(bt);T(D8.$$.fragment,j7),Wsr=i(j7),wve=n(j7,"P",{});var v7t=s(wve);Qsr=r(v7t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),v7t.forEach(t),Hsr=i(j7),Td=n(j7,"P",{});var wte=s(Td);Usr=r(wte,`Note:
Loading a model from its configuration file does `),Ave=n(wte,"STRONG",{});var F7t=s(Ave);Jsr=r(F7t,"not"),F7t.forEach(t),Ysr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(wte,"A",{href:!0});var T7t=s(PQ);Ksr=r(T7t,"from_pretrained()"),T7t.forEach(t),Zsr=r(wte," to load the model weights."),wte.forEach(t),elr=i(j7),T(FM.$$.fragment,j7),j7.forEach(t),olr=i(hl),lo=n(hl,"DIV",{class:!0});var ba=s(lo);T(G8.$$.fragment,ba),rlr=i(ba),Lve=n(ba,"P",{});var M7t=s(Lve);tlr=r(M7t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),M7t.forEach(t),alr=i(ba),Wa=n(ba,"P",{});var D7=s(Wa);nlr=r(D7,"The model class to instantiate is selected based on the "),yve=n(D7,"CODE",{});var E7t=s(yve);slr=r(E7t,"model_type"),E7t.forEach(t),llr=r(D7,` property of the config object (either
passed as an argument or loaded from `),xve=n(D7,"CODE",{});var C7t=s(xve);ilr=r(C7t,"pretrained_model_name_or_path"),C7t.forEach(t),dlr=r(D7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=n(D7,"CODE",{});var w7t=s($ve);clr=r(w7t,"pretrained_model_name_or_path"),w7t.forEach(t),mlr=r(D7,":"),D7.forEach(t),flr=i(ba),kve=n(ba,"UL",{});var A7t=s(kve);TM=n(A7t,"LI",{});var LNe=s(TM);Sve=n(LNe,"STRONG",{});var L7t=s(Sve);glr=r(L7t,"tapas"),L7t.forEach(t),hlr=r(LNe," \u2014 "),BQ=n(LNe,"A",{href:!0});var y7t=s(BQ);ulr=r(y7t,"TapasForQuestionAnswering"),y7t.forEach(t),plr=r(LNe," (TAPAS model)"),LNe.forEach(t),A7t.forEach(t),_lr=i(ba),MM=n(ba,"P",{});var yNe=s(MM);blr=r(yNe,"The model is set in evaluation mode by default using "),Rve=n(yNe,"CODE",{});var x7t=s(Rve);vlr=r(x7t,"model.eval()"),x7t.forEach(t),Flr=r(yNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pve=n(yNe,"CODE",{});var $7t=s(Pve);Tlr=r($7t,"model.train()"),$7t.forEach(t),yNe.forEach(t),Mlr=i(ba),T(EM.$$.fragment,ba),ba.forEach(t),hl.forEach(t),Cze=i(m),Md=n(m,"H2",{class:!0});var $Qe=s(Md);CM=n($Qe,"A",{id:!0,class:!0,href:!0});var k7t=s(CM);Bve=n(k7t,"SPAN",{});var S7t=s(Bve);T(O8.$$.fragment,S7t),S7t.forEach(t),k7t.forEach(t),Elr=i($Qe),Ive=n($Qe,"SPAN",{});var R7t=s(Ive);Clr=r(R7t,"AutoModelForImageClassification"),R7t.forEach(t),$Qe.forEach(t),wze=i(m),Vo=n(m,"DIV",{class:!0});var ul=s(Vo);T(V8.$$.fragment,ul),wlr=i(ul),Ed=n(ul,"P",{});var Ate=s(Ed);Alr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),IQ=n(Ate,"A",{href:!0});var P7t=s(IQ);Llr=r(P7t,"from_pretrained()"),P7t.forEach(t),ylr=r(Ate," class method or the "),NQ=n(Ate,"A",{href:!0});var B7t=s(NQ);xlr=r(B7t,"from_config()"),B7t.forEach(t),$lr=r(Ate,` class
method.`),Ate.forEach(t),klr=i(ul),X8=n(ul,"P",{});var kQe=s(X8);Slr=r(kQe,"This class cannot be instantiated directly using "),Nve=n(kQe,"CODE",{});var I7t=s(Nve);Rlr=r(I7t,"__init__()"),I7t.forEach(t),Plr=r(kQe," (throws an error)."),kQe.forEach(t),Blr=i(ul),vt=n(ul,"DIV",{class:!0});var G7=s(vt);T(z8.$$.fragment,G7),Ilr=i(G7),qve=n(G7,"P",{});var N7t=s(qve);Nlr=r(N7t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),N7t.forEach(t),qlr=i(G7),Cd=n(G7,"P",{});var Lte=s(Cd);jlr=r(Lte,`Note:
Loading a model from its configuration file does `),jve=n(Lte,"STRONG",{});var q7t=s(jve);Dlr=r(q7t,"not"),q7t.forEach(t),Glr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qQ=n(Lte,"A",{href:!0});var j7t=s(qQ);Olr=r(j7t,"from_pretrained()"),j7t.forEach(t),Vlr=r(Lte," to load the model weights."),Lte.forEach(t),Xlr=i(G7),T(wM.$$.fragment,G7),G7.forEach(t),zlr=i(ul),io=n(ul,"DIV",{class:!0});var va=s(io);T(W8.$$.fragment,va),Wlr=i(va),Dve=n(va,"P",{});var D7t=s(Dve);Qlr=r(D7t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),D7t.forEach(t),Hlr=i(va),Qa=n(va,"P",{});var O7=s(Qa);Ulr=r(O7,"The model class to instantiate is selected based on the "),Gve=n(O7,"CODE",{});var G7t=s(Gve);Jlr=r(G7t,"model_type"),G7t.forEach(t),Ylr=r(O7,` property of the config object (either
passed as an argument or loaded from `),Ove=n(O7,"CODE",{});var O7t=s(Ove);Klr=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),Zlr=r(O7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(O7,"CODE",{});var V7t=s(Vve);eir=r(V7t,"pretrained_model_name_or_path"),V7t.forEach(t),oir=r(O7,":"),O7.forEach(t),rir=i(va),ve=n(va,"UL",{});var Te=s(ve);AM=n(Te,"LI",{});var xNe=s(AM);Xve=n(xNe,"STRONG",{});var X7t=s(Xve);tir=r(X7t,"beit"),X7t.forEach(t),air=r(xNe," \u2014 "),jQ=n(xNe,"A",{href:!0});var z7t=s(jQ);nir=r(z7t,"BeitForImageClassification"),z7t.forEach(t),sir=r(xNe," (BEiT model)"),xNe.forEach(t),lir=i(Te),LM=n(Te,"LI",{});var $Ne=s(LM);zve=n($Ne,"STRONG",{});var W7t=s(zve);iir=r(W7t,"convnext"),W7t.forEach(t),dir=r($Ne," \u2014 "),DQ=n($Ne,"A",{href:!0});var Q7t=s(DQ);cir=r(Q7t,"ConvNextForImageClassification"),Q7t.forEach(t),mir=r($Ne," (ConvNeXT model)"),$Ne.forEach(t),fir=i(Te),yM=n(Te,"LI",{});var kNe=s(yM);Wve=n(kNe,"STRONG",{});var H7t=s(Wve);gir=r(H7t,"cvt"),H7t.forEach(t),hir=r(kNe," \u2014 "),GQ=n(kNe,"A",{href:!0});var U7t=s(GQ);uir=r(U7t,"CvtForImageClassification"),U7t.forEach(t),pir=r(kNe," (CvT model)"),kNe.forEach(t),_ir=i(Te),xM=n(Te,"LI",{});var SNe=s(xM);Qve=n(SNe,"STRONG",{});var J7t=s(Qve);bir=r(J7t,"data2vec-vision"),J7t.forEach(t),vir=r(SNe," \u2014 "),OQ=n(SNe,"A",{href:!0});var Y7t=s(OQ);Fir=r(Y7t,"Data2VecVisionForImageClassification"),Y7t.forEach(t),Tir=r(SNe," (Data2VecVision model)"),SNe.forEach(t),Mir=i(Te),Js=n(Te,"LI",{});var XS=s(Js);Hve=n(XS,"STRONG",{});var K7t=s(Hve);Eir=r(K7t,"deit"),K7t.forEach(t),Cir=r(XS," \u2014 "),VQ=n(XS,"A",{href:!0});var Z7t=s(VQ);wir=r(Z7t,"DeiTForImageClassification"),Z7t.forEach(t),Air=r(XS," or "),XQ=n(XS,"A",{href:!0});var eLt=s(XQ);Lir=r(eLt,"DeiTForImageClassificationWithTeacher"),eLt.forEach(t),yir=r(XS," (DeiT model)"),XS.forEach(t),xir=i(Te),$M=n(Te,"LI",{});var RNe=s($M);Uve=n(RNe,"STRONG",{});var oLt=s(Uve);$ir=r(oLt,"imagegpt"),oLt.forEach(t),kir=r(RNe," \u2014 "),zQ=n(RNe,"A",{href:!0});var rLt=s(zQ);Sir=r(rLt,"ImageGPTForImageClassification"),rLt.forEach(t),Rir=r(RNe," (ImageGPT model)"),RNe.forEach(t),Pir=i(Te),Ys=n(Te,"LI",{});var zS=s(Ys);Jve=n(zS,"STRONG",{});var tLt=s(Jve);Bir=r(tLt,"levit"),tLt.forEach(t),Iir=r(zS," \u2014 "),WQ=n(zS,"A",{href:!0});var aLt=s(WQ);Nir=r(aLt,"LevitForImageClassification"),aLt.forEach(t),qir=r(zS," or "),QQ=n(zS,"A",{href:!0});var nLt=s(QQ);jir=r(nLt,"LevitForImageClassificationWithTeacher"),nLt.forEach(t),Dir=r(zS," (LeViT model)"),zS.forEach(t),Gir=i(Te),kM=n(Te,"LI",{});var PNe=s(kM);Yve=n(PNe,"STRONG",{});var sLt=s(Yve);Oir=r(sLt,"mobilevit"),sLt.forEach(t),Vir=r(PNe," \u2014 "),HQ=n(PNe,"A",{href:!0});var lLt=s(HQ);Xir=r(lLt,"MobileViTForImageClassification"),lLt.forEach(t),zir=r(PNe," (MobileViT model)"),PNe.forEach(t),Wir=i(Te),Ft=n(Te,"LI",{});var Pm=s(Ft);Kve=n(Pm,"STRONG",{});var iLt=s(Kve);Qir=r(iLt,"perceiver"),iLt.forEach(t),Hir=r(Pm," \u2014 "),UQ=n(Pm,"A",{href:!0});var dLt=s(UQ);Uir=r(dLt,"PerceiverForImageClassificationLearned"),dLt.forEach(t),Jir=r(Pm," or "),JQ=n(Pm,"A",{href:!0});var cLt=s(JQ);Yir=r(cLt,"PerceiverForImageClassificationFourier"),cLt.forEach(t),Kir=r(Pm," or "),YQ=n(Pm,"A",{href:!0});var mLt=s(YQ);Zir=r(mLt,"PerceiverForImageClassificationConvProcessing"),mLt.forEach(t),edr=r(Pm," (Perceiver model)"),Pm.forEach(t),odr=i(Te),SM=n(Te,"LI",{});var BNe=s(SM);Zve=n(BNe,"STRONG",{});var fLt=s(Zve);rdr=r(fLt,"poolformer"),fLt.forEach(t),tdr=r(BNe," \u2014 "),KQ=n(BNe,"A",{href:!0});var gLt=s(KQ);adr=r(gLt,"PoolFormerForImageClassification"),gLt.forEach(t),ndr=r(BNe," (PoolFormer model)"),BNe.forEach(t),sdr=i(Te),RM=n(Te,"LI",{});var INe=s(RM);e1e=n(INe,"STRONG",{});var hLt=s(e1e);ldr=r(hLt,"regnet"),hLt.forEach(t),idr=r(INe," \u2014 "),ZQ=n(INe,"A",{href:!0});var uLt=s(ZQ);ddr=r(uLt,"RegNetForImageClassification"),uLt.forEach(t),cdr=r(INe," (RegNet model)"),INe.forEach(t),mdr=i(Te),PM=n(Te,"LI",{});var NNe=s(PM);o1e=n(NNe,"STRONG",{});var pLt=s(o1e);fdr=r(pLt,"resnet"),pLt.forEach(t),gdr=r(NNe," \u2014 "),eH=n(NNe,"A",{href:!0});var _Lt=s(eH);hdr=r(_Lt,"ResNetForImageClassification"),_Lt.forEach(t),udr=r(NNe," (ResNet model)"),NNe.forEach(t),pdr=i(Te),BM=n(Te,"LI",{});var qNe=s(BM);r1e=n(qNe,"STRONG",{});var bLt=s(r1e);_dr=r(bLt,"segformer"),bLt.forEach(t),bdr=r(qNe," \u2014 "),oH=n(qNe,"A",{href:!0});var vLt=s(oH);vdr=r(vLt,"SegformerForImageClassification"),vLt.forEach(t),Fdr=r(qNe," (SegFormer model)"),qNe.forEach(t),Tdr=i(Te),IM=n(Te,"LI",{});var jNe=s(IM);t1e=n(jNe,"STRONG",{});var FLt=s(t1e);Mdr=r(FLt,"swin"),FLt.forEach(t),Edr=r(jNe," \u2014 "),rH=n(jNe,"A",{href:!0});var TLt=s(rH);Cdr=r(TLt,"SwinForImageClassification"),TLt.forEach(t),wdr=r(jNe," (Swin Transformer model)"),jNe.forEach(t),Adr=i(Te),NM=n(Te,"LI",{});var DNe=s(NM);a1e=n(DNe,"STRONG",{});var MLt=s(a1e);Ldr=r(MLt,"van"),MLt.forEach(t),ydr=r(DNe," \u2014 "),tH=n(DNe,"A",{href:!0});var ELt=s(tH);xdr=r(ELt,"VanForImageClassification"),ELt.forEach(t),$dr=r(DNe," (VAN model)"),DNe.forEach(t),kdr=i(Te),qM=n(Te,"LI",{});var GNe=s(qM);n1e=n(GNe,"STRONG",{});var CLt=s(n1e);Sdr=r(CLt,"vit"),CLt.forEach(t),Rdr=r(GNe," \u2014 "),aH=n(GNe,"A",{href:!0});var wLt=s(aH);Pdr=r(wLt,"ViTForImageClassification"),wLt.forEach(t),Bdr=r(GNe," (ViT model)"),GNe.forEach(t),Te.forEach(t),Idr=i(va),jM=n(va,"P",{});var ONe=s(jM);Ndr=r(ONe,"The model is set in evaluation mode by default using "),s1e=n(ONe,"CODE",{});var ALt=s(s1e);qdr=r(ALt,"model.eval()"),ALt.forEach(t),jdr=r(ONe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l1e=n(ONe,"CODE",{});var LLt=s(l1e);Ddr=r(LLt,"model.train()"),LLt.forEach(t),ONe.forEach(t),Gdr=i(va),T(DM.$$.fragment,va),va.forEach(t),ul.forEach(t),Aze=i(m),wd=n(m,"H2",{class:!0});var SQe=s(wd);GM=n(SQe,"A",{id:!0,class:!0,href:!0});var yLt=s(GM);i1e=n(yLt,"SPAN",{});var xLt=s(i1e);T(Q8.$$.fragment,xLt),xLt.forEach(t),yLt.forEach(t),Odr=i(SQe),d1e=n(SQe,"SPAN",{});var $Lt=s(d1e);Vdr=r($Lt,"AutoModelForVision2Seq"),$Lt.forEach(t),SQe.forEach(t),Lze=i(m),Xo=n(m,"DIV",{class:!0});var pl=s(Xo);T(H8.$$.fragment,pl),Xdr=i(pl),Ad=n(pl,"P",{});var yte=s(Ad);zdr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nH=n(yte,"A",{href:!0});var kLt=s(nH);Wdr=r(kLt,"from_pretrained()"),kLt.forEach(t),Qdr=r(yte," class method or the "),sH=n(yte,"A",{href:!0});var SLt=s(sH);Hdr=r(SLt,"from_config()"),SLt.forEach(t),Udr=r(yte,` class
method.`),yte.forEach(t),Jdr=i(pl),U8=n(pl,"P",{});var RQe=s(U8);Ydr=r(RQe,"This class cannot be instantiated directly using "),c1e=n(RQe,"CODE",{});var RLt=s(c1e);Kdr=r(RLt,"__init__()"),RLt.forEach(t),Zdr=r(RQe," (throws an error)."),RQe.forEach(t),ecr=i(pl),Tt=n(pl,"DIV",{class:!0});var V7=s(Tt);T(J8.$$.fragment,V7),ocr=i(V7),m1e=n(V7,"P",{});var PLt=s(m1e);rcr=r(PLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PLt.forEach(t),tcr=i(V7),Ld=n(V7,"P",{});var xte=s(Ld);acr=r(xte,`Note:
Loading a model from its configuration file does `),f1e=n(xte,"STRONG",{});var BLt=s(f1e);ncr=r(BLt,"not"),BLt.forEach(t),scr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(xte,"A",{href:!0});var ILt=s(lH);lcr=r(ILt,"from_pretrained()"),ILt.forEach(t),icr=r(xte," to load the model weights."),xte.forEach(t),dcr=i(V7),T(OM.$$.fragment,V7),V7.forEach(t),ccr=i(pl),co=n(pl,"DIV",{class:!0});var Fa=s(co);T(Y8.$$.fragment,Fa),mcr=i(Fa),g1e=n(Fa,"P",{});var NLt=s(g1e);fcr=r(NLt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NLt.forEach(t),gcr=i(Fa),Ha=n(Fa,"P",{});var X7=s(Ha);hcr=r(X7,"The model class to instantiate is selected based on the "),h1e=n(X7,"CODE",{});var qLt=s(h1e);ucr=r(qLt,"model_type"),qLt.forEach(t),pcr=r(X7,` property of the config object (either
passed as an argument or loaded from `),u1e=n(X7,"CODE",{});var jLt=s(u1e);_cr=r(jLt,"pretrained_model_name_or_path"),jLt.forEach(t),bcr=r(X7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=n(X7,"CODE",{});var DLt=s(p1e);vcr=r(DLt,"pretrained_model_name_or_path"),DLt.forEach(t),Fcr=r(X7,":"),X7.forEach(t),Tcr=i(Fa),_1e=n(Fa,"UL",{});var GLt=s(_1e);VM=n(GLt,"LI",{});var VNe=s(VM);b1e=n(VNe,"STRONG",{});var OLt=s(b1e);Mcr=r(OLt,"vision-encoder-decoder"),OLt.forEach(t),Ecr=r(VNe," \u2014 "),iH=n(VNe,"A",{href:!0});var VLt=s(iH);Ccr=r(VLt,"VisionEncoderDecoderModel"),VLt.forEach(t),wcr=r(VNe," (Vision Encoder decoder model)"),VNe.forEach(t),GLt.forEach(t),Acr=i(Fa),XM=n(Fa,"P",{});var XNe=s(XM);Lcr=r(XNe,"The model is set in evaluation mode by default using "),v1e=n(XNe,"CODE",{});var XLt=s(v1e);ycr=r(XLt,"model.eval()"),XLt.forEach(t),xcr=r(XNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F1e=n(XNe,"CODE",{});var zLt=s(F1e);$cr=r(zLt,"model.train()"),zLt.forEach(t),XNe.forEach(t),kcr=i(Fa),T(zM.$$.fragment,Fa),Fa.forEach(t),pl.forEach(t),yze=i(m),yd=n(m,"H2",{class:!0});var PQe=s(yd);WM=n(PQe,"A",{id:!0,class:!0,href:!0});var WLt=s(WM);T1e=n(WLt,"SPAN",{});var QLt=s(T1e);T(K8.$$.fragment,QLt),QLt.forEach(t),WLt.forEach(t),Scr=i(PQe),M1e=n(PQe,"SPAN",{});var HLt=s(M1e);Rcr=r(HLt,"AutoModelForVisualQuestionAnswering"),HLt.forEach(t),PQe.forEach(t),xze=i(m),zo=n(m,"DIV",{class:!0});var _l=s(zo);T(Z8.$$.fragment,_l),Pcr=i(_l),xd=n(_l,"P",{});var $te=s(xd);Bcr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),dH=n($te,"A",{href:!0});var ULt=s(dH);Icr=r(ULt,"from_pretrained()"),ULt.forEach(t),Ncr=r($te," class method or the "),cH=n($te,"A",{href:!0});var JLt=s(cH);qcr=r(JLt,"from_config()"),JLt.forEach(t),jcr=r($te,` class
method.`),$te.forEach(t),Dcr=i(_l),e9=n(_l,"P",{});var BQe=s(e9);Gcr=r(BQe,"This class cannot be instantiated directly using "),E1e=n(BQe,"CODE",{});var YLt=s(E1e);Ocr=r(YLt,"__init__()"),YLt.forEach(t),Vcr=r(BQe," (throws an error)."),BQe.forEach(t),Xcr=i(_l),Mt=n(_l,"DIV",{class:!0});var z7=s(Mt);T(o9.$$.fragment,z7),zcr=i(z7),C1e=n(z7,"P",{});var KLt=s(C1e);Wcr=r(KLt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),KLt.forEach(t),Qcr=i(z7),$d=n(z7,"P",{});var kte=s($d);Hcr=r(kte,`Note:
Loading a model from its configuration file does `),w1e=n(kte,"STRONG",{});var ZLt=s(w1e);Ucr=r(ZLt,"not"),ZLt.forEach(t),Jcr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(kte,"A",{href:!0});var eyt=s(mH);Ycr=r(eyt,"from_pretrained()"),eyt.forEach(t),Kcr=r(kte," to load the model weights."),kte.forEach(t),Zcr=i(z7),T(QM.$$.fragment,z7),z7.forEach(t),emr=i(_l),mo=n(_l,"DIV",{class:!0});var Ta=s(mo);T(r9.$$.fragment,Ta),omr=i(Ta),A1e=n(Ta,"P",{});var oyt=s(A1e);rmr=r(oyt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),oyt.forEach(t),tmr=i(Ta),Ua=n(Ta,"P",{});var W7=s(Ua);amr=r(W7,"The model class to instantiate is selected based on the "),L1e=n(W7,"CODE",{});var ryt=s(L1e);nmr=r(ryt,"model_type"),ryt.forEach(t),smr=r(W7,` property of the config object (either
passed as an argument or loaded from `),y1e=n(W7,"CODE",{});var tyt=s(y1e);lmr=r(tyt,"pretrained_model_name_or_path"),tyt.forEach(t),imr=r(W7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=n(W7,"CODE",{});var ayt=s(x1e);dmr=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),cmr=r(W7,":"),W7.forEach(t),mmr=i(Ta),$1e=n(Ta,"UL",{});var nyt=s($1e);HM=n(nyt,"LI",{});var zNe=s(HM);k1e=n(zNe,"STRONG",{});var syt=s(k1e);fmr=r(syt,"vilt"),syt.forEach(t),gmr=r(zNe," \u2014 "),fH=n(zNe,"A",{href:!0});var lyt=s(fH);hmr=r(lyt,"ViltForQuestionAnswering"),lyt.forEach(t),umr=r(zNe," (ViLT model)"),zNe.forEach(t),nyt.forEach(t),pmr=i(Ta),UM=n(Ta,"P",{});var WNe=s(UM);_mr=r(WNe,"The model is set in evaluation mode by default using "),S1e=n(WNe,"CODE",{});var iyt=s(S1e);bmr=r(iyt,"model.eval()"),iyt.forEach(t),vmr=r(WNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R1e=n(WNe,"CODE",{});var dyt=s(R1e);Fmr=r(dyt,"model.train()"),dyt.forEach(t),WNe.forEach(t),Tmr=i(Ta),T(JM.$$.fragment,Ta),Ta.forEach(t),_l.forEach(t),$ze=i(m),kd=n(m,"H2",{class:!0});var IQe=s(kd);YM=n(IQe,"A",{id:!0,class:!0,href:!0});var cyt=s(YM);P1e=n(cyt,"SPAN",{});var myt=s(P1e);T(t9.$$.fragment,myt),myt.forEach(t),cyt.forEach(t),Mmr=i(IQe),B1e=n(IQe,"SPAN",{});var fyt=s(B1e);Emr=r(fyt,"AutoModelForAudioClassification"),fyt.forEach(t),IQe.forEach(t),kze=i(m),Wo=n(m,"DIV",{class:!0});var bl=s(Wo);T(a9.$$.fragment,bl),Cmr=i(bl),Sd=n(bl,"P",{});var Ste=s(Sd);wmr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),gH=n(Ste,"A",{href:!0});var gyt=s(gH);Amr=r(gyt,"from_pretrained()"),gyt.forEach(t),Lmr=r(Ste," class method or the "),hH=n(Ste,"A",{href:!0});var hyt=s(hH);ymr=r(hyt,"from_config()"),hyt.forEach(t),xmr=r(Ste,` class
method.`),Ste.forEach(t),$mr=i(bl),n9=n(bl,"P",{});var NQe=s(n9);kmr=r(NQe,"This class cannot be instantiated directly using "),I1e=n(NQe,"CODE",{});var uyt=s(I1e);Smr=r(uyt,"__init__()"),uyt.forEach(t),Rmr=r(NQe," (throws an error)."),NQe.forEach(t),Pmr=i(bl),Et=n(bl,"DIV",{class:!0});var Q7=s(Et);T(s9.$$.fragment,Q7),Bmr=i(Q7),N1e=n(Q7,"P",{});var pyt=s(N1e);Imr=r(pyt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),pyt.forEach(t),Nmr=i(Q7),Rd=n(Q7,"P",{});var Rte=s(Rd);qmr=r(Rte,`Note:
Loading a model from its configuration file does `),q1e=n(Rte,"STRONG",{});var _yt=s(q1e);jmr=r(_yt,"not"),_yt.forEach(t),Dmr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(Rte,"A",{href:!0});var byt=s(uH);Gmr=r(byt,"from_pretrained()"),byt.forEach(t),Omr=r(Rte," to load the model weights."),Rte.forEach(t),Vmr=i(Q7),T(KM.$$.fragment,Q7),Q7.forEach(t),Xmr=i(bl),fo=n(bl,"DIV",{class:!0});var Ma=s(fo);T(l9.$$.fragment,Ma),zmr=i(Ma),j1e=n(Ma,"P",{});var vyt=s(j1e);Wmr=r(vyt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),vyt.forEach(t),Qmr=i(Ma),Ja=n(Ma,"P",{});var H7=s(Ja);Hmr=r(H7,"The model class to instantiate is selected based on the "),D1e=n(H7,"CODE",{});var Fyt=s(D1e);Umr=r(Fyt,"model_type"),Fyt.forEach(t),Jmr=r(H7,` property of the config object (either
passed as an argument or loaded from `),G1e=n(H7,"CODE",{});var Tyt=s(G1e);Ymr=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),Kmr=r(H7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(H7,"CODE",{});var Myt=s(O1e);Zmr=r(Myt,"pretrained_model_name_or_path"),Myt.forEach(t),efr=r(H7,":"),H7.forEach(t),ofr=i(Ma),Pe=n(Ma,"UL",{});var We=s(Pe);ZM=n(We,"LI",{});var QNe=s(ZM);V1e=n(QNe,"STRONG",{});var Eyt=s(V1e);rfr=r(Eyt,"data2vec-audio"),Eyt.forEach(t),tfr=r(QNe," \u2014 "),pH=n(QNe,"A",{href:!0});var Cyt=s(pH);afr=r(Cyt,"Data2VecAudioForSequenceClassification"),Cyt.forEach(t),nfr=r(QNe," (Data2VecAudio model)"),QNe.forEach(t),sfr=i(We),e4=n(We,"LI",{});var HNe=s(e4);X1e=n(HNe,"STRONG",{});var wyt=s(X1e);lfr=r(wyt,"hubert"),wyt.forEach(t),ifr=r(HNe," \u2014 "),_H=n(HNe,"A",{href:!0});var Ayt=s(_H);dfr=r(Ayt,"HubertForSequenceClassification"),Ayt.forEach(t),cfr=r(HNe," (Hubert model)"),HNe.forEach(t),mfr=i(We),o4=n(We,"LI",{});var UNe=s(o4);z1e=n(UNe,"STRONG",{});var Lyt=s(z1e);ffr=r(Lyt,"sew"),Lyt.forEach(t),gfr=r(UNe," \u2014 "),bH=n(UNe,"A",{href:!0});var yyt=s(bH);hfr=r(yyt,"SEWForSequenceClassification"),yyt.forEach(t),ufr=r(UNe," (SEW model)"),UNe.forEach(t),pfr=i(We),r4=n(We,"LI",{});var JNe=s(r4);W1e=n(JNe,"STRONG",{});var xyt=s(W1e);_fr=r(xyt,"sew-d"),xyt.forEach(t),bfr=r(JNe," \u2014 "),vH=n(JNe,"A",{href:!0});var $yt=s(vH);vfr=r($yt,"SEWDForSequenceClassification"),$yt.forEach(t),Ffr=r(JNe," (SEW-D model)"),JNe.forEach(t),Tfr=i(We),t4=n(We,"LI",{});var YNe=s(t4);Q1e=n(YNe,"STRONG",{});var kyt=s(Q1e);Mfr=r(kyt,"unispeech"),kyt.forEach(t),Efr=r(YNe," \u2014 "),FH=n(YNe,"A",{href:!0});var Syt=s(FH);Cfr=r(Syt,"UniSpeechForSequenceClassification"),Syt.forEach(t),wfr=r(YNe," (UniSpeech model)"),YNe.forEach(t),Afr=i(We),a4=n(We,"LI",{});var KNe=s(a4);H1e=n(KNe,"STRONG",{});var Ryt=s(H1e);Lfr=r(Ryt,"unispeech-sat"),Ryt.forEach(t),yfr=r(KNe," \u2014 "),TH=n(KNe,"A",{href:!0});var Pyt=s(TH);xfr=r(Pyt,"UniSpeechSatForSequenceClassification"),Pyt.forEach(t),$fr=r(KNe," (UniSpeechSat model)"),KNe.forEach(t),kfr=i(We),n4=n(We,"LI",{});var ZNe=s(n4);U1e=n(ZNe,"STRONG",{});var Byt=s(U1e);Sfr=r(Byt,"wav2vec2"),Byt.forEach(t),Rfr=r(ZNe," \u2014 "),MH=n(ZNe,"A",{href:!0});var Iyt=s(MH);Pfr=r(Iyt,"Wav2Vec2ForSequenceClassification"),Iyt.forEach(t),Bfr=r(ZNe," (Wav2Vec2 model)"),ZNe.forEach(t),Ifr=i(We),s4=n(We,"LI",{});var eqe=s(s4);J1e=n(eqe,"STRONG",{});var Nyt=s(J1e);Nfr=r(Nyt,"wav2vec2-conformer"),Nyt.forEach(t),qfr=r(eqe," \u2014 "),EH=n(eqe,"A",{href:!0});var qyt=s(EH);jfr=r(qyt,"Wav2Vec2ConformerForSequenceClassification"),qyt.forEach(t),Dfr=r(eqe," (Wav2Vec2-Conformer model)"),eqe.forEach(t),Gfr=i(We),l4=n(We,"LI",{});var oqe=s(l4);Y1e=n(oqe,"STRONG",{});var jyt=s(Y1e);Ofr=r(jyt,"wavlm"),jyt.forEach(t),Vfr=r(oqe," \u2014 "),CH=n(oqe,"A",{href:!0});var Dyt=s(CH);Xfr=r(Dyt,"WavLMForSequenceClassification"),Dyt.forEach(t),zfr=r(oqe," (WavLM model)"),oqe.forEach(t),We.forEach(t),Wfr=i(Ma),i4=n(Ma,"P",{});var rqe=s(i4);Qfr=r(rqe,"The model is set in evaluation mode by default using "),K1e=n(rqe,"CODE",{});var Gyt=s(K1e);Hfr=r(Gyt,"model.eval()"),Gyt.forEach(t),Ufr=r(rqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Z1e=n(rqe,"CODE",{});var Oyt=s(Z1e);Jfr=r(Oyt,"model.train()"),Oyt.forEach(t),rqe.forEach(t),Yfr=i(Ma),T(d4.$$.fragment,Ma),Ma.forEach(t),bl.forEach(t),Sze=i(m),Pd=n(m,"H2",{class:!0});var qQe=s(Pd);c4=n(qQe,"A",{id:!0,class:!0,href:!0});var Vyt=s(c4);eFe=n(Vyt,"SPAN",{});var Xyt=s(eFe);T(i9.$$.fragment,Xyt),Xyt.forEach(t),Vyt.forEach(t),Kfr=i(qQe),oFe=n(qQe,"SPAN",{});var zyt=s(oFe);Zfr=r(zyt,"AutoModelForAudioFrameClassification"),zyt.forEach(t),qQe.forEach(t),Rze=i(m),Qo=n(m,"DIV",{class:!0});var vl=s(Qo);T(d9.$$.fragment,vl),egr=i(vl),Bd=n(vl,"P",{});var Pte=s(Bd);ogr=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),wH=n(Pte,"A",{href:!0});var Wyt=s(wH);rgr=r(Wyt,"from_pretrained()"),Wyt.forEach(t),tgr=r(Pte," class method or the "),AH=n(Pte,"A",{href:!0});var Qyt=s(AH);agr=r(Qyt,"from_config()"),Qyt.forEach(t),ngr=r(Pte,` class
method.`),Pte.forEach(t),sgr=i(vl),c9=n(vl,"P",{});var jQe=s(c9);lgr=r(jQe,"This class cannot be instantiated directly using "),rFe=n(jQe,"CODE",{});var Hyt=s(rFe);igr=r(Hyt,"__init__()"),Hyt.forEach(t),dgr=r(jQe," (throws an error)."),jQe.forEach(t),cgr=i(vl),Ct=n(vl,"DIV",{class:!0});var U7=s(Ct);T(m9.$$.fragment,U7),mgr=i(U7),tFe=n(U7,"P",{});var Uyt=s(tFe);fgr=r(Uyt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Uyt.forEach(t),ggr=i(U7),Id=n(U7,"P",{});var Bte=s(Id);hgr=r(Bte,`Note:
Loading a model from its configuration file does `),aFe=n(Bte,"STRONG",{});var Jyt=s(aFe);ugr=r(Jyt,"not"),Jyt.forEach(t),pgr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LH=n(Bte,"A",{href:!0});var Yyt=s(LH);_gr=r(Yyt,"from_pretrained()"),Yyt.forEach(t),bgr=r(Bte," to load the model weights."),Bte.forEach(t),vgr=i(U7),T(m4.$$.fragment,U7),U7.forEach(t),Fgr=i(vl),go=n(vl,"DIV",{class:!0});var Ea=s(go);T(f9.$$.fragment,Ea),Tgr=i(Ea),nFe=n(Ea,"P",{});var Kyt=s(nFe);Mgr=r(Kyt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Kyt.forEach(t),Egr=i(Ea),Ya=n(Ea,"P",{});var J7=s(Ya);Cgr=r(J7,"The model class to instantiate is selected based on the "),sFe=n(J7,"CODE",{});var Zyt=s(sFe);wgr=r(Zyt,"model_type"),Zyt.forEach(t),Agr=r(J7,` property of the config object (either
passed as an argument or loaded from `),lFe=n(J7,"CODE",{});var e8t=s(lFe);Lgr=r(e8t,"pretrained_model_name_or_path"),e8t.forEach(t),ygr=r(J7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(J7,"CODE",{});var o8t=s(iFe);xgr=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),$gr=r(J7,":"),J7.forEach(t),kgr=i(Ea),rt=n(Ea,"UL",{});var Fl=s(rt);f4=n(Fl,"LI",{});var tqe=s(f4);dFe=n(tqe,"STRONG",{});var r8t=s(dFe);Sgr=r(r8t,"data2vec-audio"),r8t.forEach(t),Rgr=r(tqe," \u2014 "),yH=n(tqe,"A",{href:!0});var t8t=s(yH);Pgr=r(t8t,"Data2VecAudioForAudioFrameClassification"),t8t.forEach(t),Bgr=r(tqe," (Data2VecAudio model)"),tqe.forEach(t),Igr=i(Fl),g4=n(Fl,"LI",{});var aqe=s(g4);cFe=n(aqe,"STRONG",{});var a8t=s(cFe);Ngr=r(a8t,"unispeech-sat"),a8t.forEach(t),qgr=r(aqe," \u2014 "),xH=n(aqe,"A",{href:!0});var n8t=s(xH);jgr=r(n8t,"UniSpeechSatForAudioFrameClassification"),n8t.forEach(t),Dgr=r(aqe," (UniSpeechSat model)"),aqe.forEach(t),Ggr=i(Fl),h4=n(Fl,"LI",{});var nqe=s(h4);mFe=n(nqe,"STRONG",{});var s8t=s(mFe);Ogr=r(s8t,"wav2vec2"),s8t.forEach(t),Vgr=r(nqe," \u2014 "),$H=n(nqe,"A",{href:!0});var l8t=s($H);Xgr=r(l8t,"Wav2Vec2ForAudioFrameClassification"),l8t.forEach(t),zgr=r(nqe," (Wav2Vec2 model)"),nqe.forEach(t),Wgr=i(Fl),u4=n(Fl,"LI",{});var sqe=s(u4);fFe=n(sqe,"STRONG",{});var i8t=s(fFe);Qgr=r(i8t,"wav2vec2-conformer"),i8t.forEach(t),Hgr=r(sqe," \u2014 "),kH=n(sqe,"A",{href:!0});var d8t=s(kH);Ugr=r(d8t,"Wav2Vec2ConformerForAudioFrameClassification"),d8t.forEach(t),Jgr=r(sqe," (Wav2Vec2-Conformer model)"),sqe.forEach(t),Ygr=i(Fl),p4=n(Fl,"LI",{});var lqe=s(p4);gFe=n(lqe,"STRONG",{});var c8t=s(gFe);Kgr=r(c8t,"wavlm"),c8t.forEach(t),Zgr=r(lqe," \u2014 "),SH=n(lqe,"A",{href:!0});var m8t=s(SH);ehr=r(m8t,"WavLMForAudioFrameClassification"),m8t.forEach(t),ohr=r(lqe," (WavLM model)"),lqe.forEach(t),Fl.forEach(t),rhr=i(Ea),_4=n(Ea,"P",{});var iqe=s(_4);thr=r(iqe,"The model is set in evaluation mode by default using "),hFe=n(iqe,"CODE",{});var f8t=s(hFe);ahr=r(f8t,"model.eval()"),f8t.forEach(t),nhr=r(iqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uFe=n(iqe,"CODE",{});var g8t=s(uFe);shr=r(g8t,"model.train()"),g8t.forEach(t),iqe.forEach(t),lhr=i(Ea),T(b4.$$.fragment,Ea),Ea.forEach(t),vl.forEach(t),Pze=i(m),Nd=n(m,"H2",{class:!0});var DQe=s(Nd);v4=n(DQe,"A",{id:!0,class:!0,href:!0});var h8t=s(v4);pFe=n(h8t,"SPAN",{});var u8t=s(pFe);T(g9.$$.fragment,u8t),u8t.forEach(t),h8t.forEach(t),ihr=i(DQe),_Fe=n(DQe,"SPAN",{});var p8t=s(_Fe);dhr=r(p8t,"AutoModelForCTC"),p8t.forEach(t),DQe.forEach(t),Bze=i(m),Ho=n(m,"DIV",{class:!0});var Tl=s(Ho);T(h9.$$.fragment,Tl),chr=i(Tl),qd=n(Tl,"P",{});var Ite=s(qd);mhr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),RH=n(Ite,"A",{href:!0});var _8t=s(RH);fhr=r(_8t,"from_pretrained()"),_8t.forEach(t),ghr=r(Ite," class method or the "),PH=n(Ite,"A",{href:!0});var b8t=s(PH);hhr=r(b8t,"from_config()"),b8t.forEach(t),uhr=r(Ite,` class
method.`),Ite.forEach(t),phr=i(Tl),u9=n(Tl,"P",{});var GQe=s(u9);_hr=r(GQe,"This class cannot be instantiated directly using "),bFe=n(GQe,"CODE",{});var v8t=s(bFe);bhr=r(v8t,"__init__()"),v8t.forEach(t),vhr=r(GQe," (throws an error)."),GQe.forEach(t),Fhr=i(Tl),wt=n(Tl,"DIV",{class:!0});var Y7=s(wt);T(p9.$$.fragment,Y7),Thr=i(Y7),vFe=n(Y7,"P",{});var F8t=s(vFe);Mhr=r(F8t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),F8t.forEach(t),Ehr=i(Y7),jd=n(Y7,"P",{});var Nte=s(jd);Chr=r(Nte,`Note:
Loading a model from its configuration file does `),FFe=n(Nte,"STRONG",{});var T8t=s(FFe);whr=r(T8t,"not"),T8t.forEach(t),Ahr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(Nte,"A",{href:!0});var M8t=s(BH);Lhr=r(M8t,"from_pretrained()"),M8t.forEach(t),yhr=r(Nte," to load the model weights."),Nte.forEach(t),xhr=i(Y7),T(F4.$$.fragment,Y7),Y7.forEach(t),$hr=i(Tl),ho=n(Tl,"DIV",{class:!0});var Ca=s(ho);T(_9.$$.fragment,Ca),khr=i(Ca),TFe=n(Ca,"P",{});var E8t=s(TFe);Shr=r(E8t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),E8t.forEach(t),Rhr=i(Ca),Ka=n(Ca,"P",{});var K7=s(Ka);Phr=r(K7,"The model class to instantiate is selected based on the "),MFe=n(K7,"CODE",{});var C8t=s(MFe);Bhr=r(C8t,"model_type"),C8t.forEach(t),Ihr=r(K7,` property of the config object (either
passed as an argument or loaded from `),EFe=n(K7,"CODE",{});var w8t=s(EFe);Nhr=r(w8t,"pretrained_model_name_or_path"),w8t.forEach(t),qhr=r(K7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(K7,"CODE",{});var A8t=s(CFe);jhr=r(A8t,"pretrained_model_name_or_path"),A8t.forEach(t),Dhr=r(K7,":"),K7.forEach(t),Ghr=i(Ca),Le=n(Ca,"UL",{});var Be=s(Le);T4=n(Be,"LI",{});var dqe=s(T4);wFe=n(dqe,"STRONG",{});var L8t=s(wFe);Ohr=r(L8t,"data2vec-audio"),L8t.forEach(t),Vhr=r(dqe," \u2014 "),IH=n(dqe,"A",{href:!0});var y8t=s(IH);Xhr=r(y8t,"Data2VecAudioForCTC"),y8t.forEach(t),zhr=r(dqe," (Data2VecAudio model)"),dqe.forEach(t),Whr=i(Be),M4=n(Be,"LI",{});var cqe=s(M4);AFe=n(cqe,"STRONG",{});var x8t=s(AFe);Qhr=r(x8t,"hubert"),x8t.forEach(t),Hhr=r(cqe," \u2014 "),NH=n(cqe,"A",{href:!0});var $8t=s(NH);Uhr=r($8t,"HubertForCTC"),$8t.forEach(t),Jhr=r(cqe," (Hubert model)"),cqe.forEach(t),Yhr=i(Be),E4=n(Be,"LI",{});var mqe=s(E4);LFe=n(mqe,"STRONG",{});var k8t=s(LFe);Khr=r(k8t,"mctct"),k8t.forEach(t),Zhr=r(mqe," \u2014 "),qH=n(mqe,"A",{href:!0});var S8t=s(qH);eur=r(S8t,"MCTCTForCTC"),S8t.forEach(t),our=r(mqe," (M-CTC-T model)"),mqe.forEach(t),rur=i(Be),C4=n(Be,"LI",{});var fqe=s(C4);yFe=n(fqe,"STRONG",{});var R8t=s(yFe);tur=r(R8t,"sew"),R8t.forEach(t),aur=r(fqe," \u2014 "),jH=n(fqe,"A",{href:!0});var P8t=s(jH);nur=r(P8t,"SEWForCTC"),P8t.forEach(t),sur=r(fqe," (SEW model)"),fqe.forEach(t),lur=i(Be),w4=n(Be,"LI",{});var gqe=s(w4);xFe=n(gqe,"STRONG",{});var B8t=s(xFe);iur=r(B8t,"sew-d"),B8t.forEach(t),dur=r(gqe," \u2014 "),DH=n(gqe,"A",{href:!0});var I8t=s(DH);cur=r(I8t,"SEWDForCTC"),I8t.forEach(t),mur=r(gqe," (SEW-D model)"),gqe.forEach(t),fur=i(Be),A4=n(Be,"LI",{});var hqe=s(A4);$Fe=n(hqe,"STRONG",{});var N8t=s($Fe);gur=r(N8t,"unispeech"),N8t.forEach(t),hur=r(hqe," \u2014 "),GH=n(hqe,"A",{href:!0});var q8t=s(GH);uur=r(q8t,"UniSpeechForCTC"),q8t.forEach(t),pur=r(hqe," (UniSpeech model)"),hqe.forEach(t),_ur=i(Be),L4=n(Be,"LI",{});var uqe=s(L4);kFe=n(uqe,"STRONG",{});var j8t=s(kFe);bur=r(j8t,"unispeech-sat"),j8t.forEach(t),vur=r(uqe," \u2014 "),OH=n(uqe,"A",{href:!0});var D8t=s(OH);Fur=r(D8t,"UniSpeechSatForCTC"),D8t.forEach(t),Tur=r(uqe," (UniSpeechSat model)"),uqe.forEach(t),Mur=i(Be),y4=n(Be,"LI",{});var pqe=s(y4);SFe=n(pqe,"STRONG",{});var G8t=s(SFe);Eur=r(G8t,"wav2vec2"),G8t.forEach(t),Cur=r(pqe," \u2014 "),VH=n(pqe,"A",{href:!0});var O8t=s(VH);wur=r(O8t,"Wav2Vec2ForCTC"),O8t.forEach(t),Aur=r(pqe," (Wav2Vec2 model)"),pqe.forEach(t),Lur=i(Be),x4=n(Be,"LI",{});var _qe=s(x4);RFe=n(_qe,"STRONG",{});var V8t=s(RFe);yur=r(V8t,"wav2vec2-conformer"),V8t.forEach(t),xur=r(_qe," \u2014 "),XH=n(_qe,"A",{href:!0});var X8t=s(XH);$ur=r(X8t,"Wav2Vec2ConformerForCTC"),X8t.forEach(t),kur=r(_qe," (Wav2Vec2-Conformer model)"),_qe.forEach(t),Sur=i(Be),$4=n(Be,"LI",{});var bqe=s($4);PFe=n(bqe,"STRONG",{});var z8t=s(PFe);Rur=r(z8t,"wavlm"),z8t.forEach(t),Pur=r(bqe," \u2014 "),zH=n(bqe,"A",{href:!0});var W8t=s(zH);Bur=r(W8t,"WavLMForCTC"),W8t.forEach(t),Iur=r(bqe," (WavLM model)"),bqe.forEach(t),Be.forEach(t),Nur=i(Ca),k4=n(Ca,"P",{});var vqe=s(k4);qur=r(vqe,"The model is set in evaluation mode by default using "),BFe=n(vqe,"CODE",{});var Q8t=s(BFe);jur=r(Q8t,"model.eval()"),Q8t.forEach(t),Dur=r(vqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),IFe=n(vqe,"CODE",{});var H8t=s(IFe);Gur=r(H8t,"model.train()"),H8t.forEach(t),vqe.forEach(t),Our=i(Ca),T(S4.$$.fragment,Ca),Ca.forEach(t),Tl.forEach(t),Ize=i(m),Dd=n(m,"H2",{class:!0});var OQe=s(Dd);R4=n(OQe,"A",{id:!0,class:!0,href:!0});var U8t=s(R4);NFe=n(U8t,"SPAN",{});var J8t=s(NFe);T(b9.$$.fragment,J8t),J8t.forEach(t),U8t.forEach(t),Vur=i(OQe),qFe=n(OQe,"SPAN",{});var Y8t=s(qFe);Xur=r(Y8t,"AutoModelForSpeechSeq2Seq"),Y8t.forEach(t),OQe.forEach(t),Nze=i(m),Uo=n(m,"DIV",{class:!0});var Ml=s(Uo);T(v9.$$.fragment,Ml),zur=i(Ml),Gd=n(Ml,"P",{});var qte=s(Gd);Wur=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),WH=n(qte,"A",{href:!0});var K8t=s(WH);Qur=r(K8t,"from_pretrained()"),K8t.forEach(t),Hur=r(qte," class method or the "),QH=n(qte,"A",{href:!0});var Z8t=s(QH);Uur=r(Z8t,"from_config()"),Z8t.forEach(t),Jur=r(qte,` class
method.`),qte.forEach(t),Yur=i(Ml),F9=n(Ml,"P",{});var VQe=s(F9);Kur=r(VQe,"This class cannot be instantiated directly using "),jFe=n(VQe,"CODE",{});var e9t=s(jFe);Zur=r(e9t,"__init__()"),e9t.forEach(t),epr=r(VQe," (throws an error)."),VQe.forEach(t),opr=i(Ml),At=n(Ml,"DIV",{class:!0});var Z7=s(At);T(T9.$$.fragment,Z7),rpr=i(Z7),DFe=n(Z7,"P",{});var o9t=s(DFe);tpr=r(o9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),o9t.forEach(t),apr=i(Z7),Od=n(Z7,"P",{});var jte=s(Od);npr=r(jte,`Note:
Loading a model from its configuration file does `),GFe=n(jte,"STRONG",{});var r9t=s(GFe);spr=r(r9t,"not"),r9t.forEach(t),lpr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(jte,"A",{href:!0});var t9t=s(HH);ipr=r(t9t,"from_pretrained()"),t9t.forEach(t),dpr=r(jte," to load the model weights."),jte.forEach(t),cpr=i(Z7),T(P4.$$.fragment,Z7),Z7.forEach(t),mpr=i(Ml),uo=n(Ml,"DIV",{class:!0});var wa=s(uo);T(M9.$$.fragment,wa),fpr=i(wa),OFe=n(wa,"P",{});var a9t=s(OFe);gpr=r(a9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),a9t.forEach(t),hpr=i(wa),Za=n(wa,"P",{});var eL=s(Za);upr=r(eL,"The model class to instantiate is selected based on the "),VFe=n(eL,"CODE",{});var n9t=s(VFe);ppr=r(n9t,"model_type"),n9t.forEach(t),_pr=r(eL,` property of the config object (either
passed as an argument or loaded from `),XFe=n(eL,"CODE",{});var s9t=s(XFe);bpr=r(s9t,"pretrained_model_name_or_path"),s9t.forEach(t),vpr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zFe=n(eL,"CODE",{});var l9t=s(zFe);Fpr=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),Tpr=r(eL,":"),eL.forEach(t),Mpr=i(wa),E9=n(wa,"UL",{});var XQe=s(E9);B4=n(XQe,"LI",{});var Fqe=s(B4);WFe=n(Fqe,"STRONG",{});var i9t=s(WFe);Epr=r(i9t,"speech-encoder-decoder"),i9t.forEach(t),Cpr=r(Fqe," \u2014 "),UH=n(Fqe,"A",{href:!0});var d9t=s(UH);wpr=r(d9t,"SpeechEncoderDecoderModel"),d9t.forEach(t),Apr=r(Fqe," (Speech Encoder decoder model)"),Fqe.forEach(t),Lpr=i(XQe),I4=n(XQe,"LI",{});var Tqe=s(I4);QFe=n(Tqe,"STRONG",{});var c9t=s(QFe);ypr=r(c9t,"speech_to_text"),c9t.forEach(t),xpr=r(Tqe," \u2014 "),JH=n(Tqe,"A",{href:!0});var m9t=s(JH);$pr=r(m9t,"Speech2TextForConditionalGeneration"),m9t.forEach(t),kpr=r(Tqe," (Speech2Text model)"),Tqe.forEach(t),XQe.forEach(t),Spr=i(wa),N4=n(wa,"P",{});var Mqe=s(N4);Rpr=r(Mqe,"The model is set in evaluation mode by default using "),HFe=n(Mqe,"CODE",{});var f9t=s(HFe);Ppr=r(f9t,"model.eval()"),f9t.forEach(t),Bpr=r(Mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),UFe=n(Mqe,"CODE",{});var g9t=s(UFe);Ipr=r(g9t,"model.train()"),g9t.forEach(t),Mqe.forEach(t),Npr=i(wa),T(q4.$$.fragment,wa),wa.forEach(t),Ml.forEach(t),qze=i(m),Vd=n(m,"H2",{class:!0});var zQe=s(Vd);j4=n(zQe,"A",{id:!0,class:!0,href:!0});var h9t=s(j4);JFe=n(h9t,"SPAN",{});var u9t=s(JFe);T(C9.$$.fragment,u9t),u9t.forEach(t),h9t.forEach(t),qpr=i(zQe),YFe=n(zQe,"SPAN",{});var p9t=s(YFe);jpr=r(p9t,"AutoModelForAudioXVector"),p9t.forEach(t),zQe.forEach(t),jze=i(m),Jo=n(m,"DIV",{class:!0});var El=s(Jo);T(w9.$$.fragment,El),Dpr=i(El),Xd=n(El,"P",{});var Dte=s(Xd);Gpr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),YH=n(Dte,"A",{href:!0});var _9t=s(YH);Opr=r(_9t,"from_pretrained()"),_9t.forEach(t),Vpr=r(Dte," class method or the "),KH=n(Dte,"A",{href:!0});var b9t=s(KH);Xpr=r(b9t,"from_config()"),b9t.forEach(t),zpr=r(Dte,` class
method.`),Dte.forEach(t),Wpr=i(El),A9=n(El,"P",{});var WQe=s(A9);Qpr=r(WQe,"This class cannot be instantiated directly using "),KFe=n(WQe,"CODE",{});var v9t=s(KFe);Hpr=r(v9t,"__init__()"),v9t.forEach(t),Upr=r(WQe," (throws an error)."),WQe.forEach(t),Jpr=i(El),Lt=n(El,"DIV",{class:!0});var oL=s(Lt);T(L9.$$.fragment,oL),Ypr=i(oL),ZFe=n(oL,"P",{});var F9t=s(ZFe);Kpr=r(F9t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),F9t.forEach(t),Zpr=i(oL),zd=n(oL,"P",{});var Gte=s(zd);e_r=r(Gte,`Note:
Loading a model from its configuration file does `),eTe=n(Gte,"STRONG",{});var T9t=s(eTe);o_r=r(T9t,"not"),T9t.forEach(t),r_r=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(Gte,"A",{href:!0});var M9t=s(ZH);t_r=r(M9t,"from_pretrained()"),M9t.forEach(t),a_r=r(Gte," to load the model weights."),Gte.forEach(t),n_r=i(oL),T(D4.$$.fragment,oL),oL.forEach(t),s_r=i(El),po=n(El,"DIV",{class:!0});var Aa=s(po);T(y9.$$.fragment,Aa),l_r=i(Aa),oTe=n(Aa,"P",{});var E9t=s(oTe);i_r=r(E9t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),E9t.forEach(t),d_r=i(Aa),en=n(Aa,"P",{});var rL=s(en);c_r=r(rL,"The model class to instantiate is selected based on the "),rTe=n(rL,"CODE",{});var C9t=s(rTe);m_r=r(C9t,"model_type"),C9t.forEach(t),f_r=r(rL,` property of the config object (either
passed as an argument or loaded from `),tTe=n(rL,"CODE",{});var w9t=s(tTe);g_r=r(w9t,"pretrained_model_name_or_path"),w9t.forEach(t),h_r=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(rL,"CODE",{});var A9t=s(aTe);u_r=r(A9t,"pretrained_model_name_or_path"),A9t.forEach(t),p_r=r(rL,":"),rL.forEach(t),__r=i(Aa),tt=n(Aa,"UL",{});var Cl=s(tt);G4=n(Cl,"LI",{});var Eqe=s(G4);nTe=n(Eqe,"STRONG",{});var L9t=s(nTe);b_r=r(L9t,"data2vec-audio"),L9t.forEach(t),v_r=r(Eqe," \u2014 "),eU=n(Eqe,"A",{href:!0});var y9t=s(eU);F_r=r(y9t,"Data2VecAudioForXVector"),y9t.forEach(t),T_r=r(Eqe," (Data2VecAudio model)"),Eqe.forEach(t),M_r=i(Cl),O4=n(Cl,"LI",{});var Cqe=s(O4);sTe=n(Cqe,"STRONG",{});var x9t=s(sTe);E_r=r(x9t,"unispeech-sat"),x9t.forEach(t),C_r=r(Cqe," \u2014 "),oU=n(Cqe,"A",{href:!0});var $9t=s(oU);w_r=r($9t,"UniSpeechSatForXVector"),$9t.forEach(t),A_r=r(Cqe," (UniSpeechSat model)"),Cqe.forEach(t),L_r=i(Cl),V4=n(Cl,"LI",{});var wqe=s(V4);lTe=n(wqe,"STRONG",{});var k9t=s(lTe);y_r=r(k9t,"wav2vec2"),k9t.forEach(t),x_r=r(wqe," \u2014 "),rU=n(wqe,"A",{href:!0});var S9t=s(rU);$_r=r(S9t,"Wav2Vec2ForXVector"),S9t.forEach(t),k_r=r(wqe," (Wav2Vec2 model)"),wqe.forEach(t),S_r=i(Cl),X4=n(Cl,"LI",{});var Aqe=s(X4);iTe=n(Aqe,"STRONG",{});var R9t=s(iTe);R_r=r(R9t,"wav2vec2-conformer"),R9t.forEach(t),P_r=r(Aqe," \u2014 "),tU=n(Aqe,"A",{href:!0});var P9t=s(tU);B_r=r(P9t,"Wav2Vec2ConformerForXVector"),P9t.forEach(t),I_r=r(Aqe," (Wav2Vec2-Conformer model)"),Aqe.forEach(t),N_r=i(Cl),z4=n(Cl,"LI",{});var Lqe=s(z4);dTe=n(Lqe,"STRONG",{});var B9t=s(dTe);q_r=r(B9t,"wavlm"),B9t.forEach(t),j_r=r(Lqe," \u2014 "),aU=n(Lqe,"A",{href:!0});var I9t=s(aU);D_r=r(I9t,"WavLMForXVector"),I9t.forEach(t),G_r=r(Lqe," (WavLM model)"),Lqe.forEach(t),Cl.forEach(t),O_r=i(Aa),W4=n(Aa,"P",{});var yqe=s(W4);V_r=r(yqe,"The model is set in evaluation mode by default using "),cTe=n(yqe,"CODE",{});var N9t=s(cTe);X_r=r(N9t,"model.eval()"),N9t.forEach(t),z_r=r(yqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mTe=n(yqe,"CODE",{});var q9t=s(mTe);W_r=r(q9t,"model.train()"),q9t.forEach(t),yqe.forEach(t),Q_r=i(Aa),T(Q4.$$.fragment,Aa),Aa.forEach(t),El.forEach(t),Dze=i(m),Wd=n(m,"H2",{class:!0});var QQe=s(Wd);H4=n(QQe,"A",{id:!0,class:!0,href:!0});var j9t=s(H4);fTe=n(j9t,"SPAN",{});var D9t=s(fTe);T(x9.$$.fragment,D9t),D9t.forEach(t),j9t.forEach(t),H_r=i(QQe),gTe=n(QQe,"SPAN",{});var G9t=s(gTe);U_r=r(G9t,"AutoModelForMaskedImageModeling"),G9t.forEach(t),QQe.forEach(t),Gze=i(m),Yo=n(m,"DIV",{class:!0});var wl=s(Yo);T($9.$$.fragment,wl),J_r=i(wl),Qd=n(wl,"P",{});var Ote=s(Qd);Y_r=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),nU=n(Ote,"A",{href:!0});var O9t=s(nU);K_r=r(O9t,"from_pretrained()"),O9t.forEach(t),Z_r=r(Ote," class method or the "),sU=n(Ote,"A",{href:!0});var V9t=s(sU);e2r=r(V9t,"from_config()"),V9t.forEach(t),o2r=r(Ote,` class
method.`),Ote.forEach(t),r2r=i(wl),k9=n(wl,"P",{});var HQe=s(k9);t2r=r(HQe,"This class cannot be instantiated directly using "),hTe=n(HQe,"CODE",{});var X9t=s(hTe);a2r=r(X9t,"__init__()"),X9t.forEach(t),n2r=r(HQe," (throws an error)."),HQe.forEach(t),s2r=i(wl),yt=n(wl,"DIV",{class:!0});var tL=s(yt);T(S9.$$.fragment,tL),l2r=i(tL),uTe=n(tL,"P",{});var z9t=s(uTe);i2r=r(z9t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),z9t.forEach(t),d2r=i(tL),Hd=n(tL,"P",{});var Vte=s(Hd);c2r=r(Vte,`Note:
Loading a model from its configuration file does `),pTe=n(Vte,"STRONG",{});var W9t=s(pTe);m2r=r(W9t,"not"),W9t.forEach(t),f2r=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(Vte,"A",{href:!0});var Q9t=s(lU);g2r=r(Q9t,"from_pretrained()"),Q9t.forEach(t),h2r=r(Vte," to load the model weights."),Vte.forEach(t),u2r=i(tL),T(U4.$$.fragment,tL),tL.forEach(t),p2r=i(wl),_o=n(wl,"DIV",{class:!0});var La=s(_o);T(R9.$$.fragment,La),_2r=i(La),_Te=n(La,"P",{});var H9t=s(_Te);b2r=r(H9t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),H9t.forEach(t),v2r=i(La),on=n(La,"P",{});var aL=s(on);F2r=r(aL,"The model class to instantiate is selected based on the "),bTe=n(aL,"CODE",{});var U9t=s(bTe);T2r=r(U9t,"model_type"),U9t.forEach(t),M2r=r(aL,` property of the config object (either
passed as an argument or loaded from `),vTe=n(aL,"CODE",{});var J9t=s(vTe);E2r=r(J9t,"pretrained_model_name_or_path"),J9t.forEach(t),C2r=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(aL,"CODE",{});var Y9t=s(FTe);w2r=r(Y9t,"pretrained_model_name_or_path"),Y9t.forEach(t),A2r=r(aL,":"),aL.forEach(t),L2r=i(La),Ud=n(La,"UL",{});var Xte=s(Ud);J4=n(Xte,"LI",{});var xqe=s(J4);TTe=n(xqe,"STRONG",{});var K9t=s(TTe);y2r=r(K9t,"deit"),K9t.forEach(t),x2r=r(xqe," \u2014 "),iU=n(xqe,"A",{href:!0});var Z9t=s(iU);$2r=r(Z9t,"DeiTForMaskedImageModeling"),Z9t.forEach(t),k2r=r(xqe," (DeiT model)"),xqe.forEach(t),S2r=i(Xte),Y4=n(Xte,"LI",{});var $qe=s(Y4);MTe=n($qe,"STRONG",{});var ext=s(MTe);R2r=r(ext,"swin"),ext.forEach(t),P2r=r($qe," \u2014 "),dU=n($qe,"A",{href:!0});var oxt=s(dU);B2r=r(oxt,"SwinForMaskedImageModeling"),oxt.forEach(t),I2r=r($qe," (Swin Transformer model)"),$qe.forEach(t),N2r=i(Xte),K4=n(Xte,"LI",{});var kqe=s(K4);ETe=n(kqe,"STRONG",{});var rxt=s(ETe);q2r=r(rxt,"vit"),rxt.forEach(t),j2r=r(kqe," \u2014 "),cU=n(kqe,"A",{href:!0});var txt=s(cU);D2r=r(txt,"ViTForMaskedImageModeling"),txt.forEach(t),G2r=r(kqe," (ViT model)"),kqe.forEach(t),Xte.forEach(t),O2r=i(La),Z4=n(La,"P",{});var Sqe=s(Z4);V2r=r(Sqe,"The model is set in evaluation mode by default using "),CTe=n(Sqe,"CODE",{});var axt=s(CTe);X2r=r(axt,"model.eval()"),axt.forEach(t),z2r=r(Sqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wTe=n(Sqe,"CODE",{});var nxt=s(wTe);W2r=r(nxt,"model.train()"),nxt.forEach(t),Sqe.forEach(t),Q2r=i(La),T(eE.$$.fragment,La),La.forEach(t),wl.forEach(t),Oze=i(m),Jd=n(m,"H2",{class:!0});var UQe=s(Jd);oE=n(UQe,"A",{id:!0,class:!0,href:!0});var sxt=s(oE);ATe=n(sxt,"SPAN",{});var lxt=s(ATe);T(P9.$$.fragment,lxt),lxt.forEach(t),sxt.forEach(t),H2r=i(UQe),LTe=n(UQe,"SPAN",{});var ixt=s(LTe);U2r=r(ixt,"AutoModelForObjectDetection"),ixt.forEach(t),UQe.forEach(t),Vze=i(m),Ko=n(m,"DIV",{class:!0});var Al=s(Ko);T(B9.$$.fragment,Al),J2r=i(Al),Yd=n(Al,"P",{});var zte=s(Yd);Y2r=r(zte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mU=n(zte,"A",{href:!0});var dxt=s(mU);K2r=r(dxt,"from_pretrained()"),dxt.forEach(t),Z2r=r(zte," class method or the "),fU=n(zte,"A",{href:!0});var cxt=s(fU);ebr=r(cxt,"from_config()"),cxt.forEach(t),obr=r(zte,` class
method.`),zte.forEach(t),rbr=i(Al),I9=n(Al,"P",{});var JQe=s(I9);tbr=r(JQe,"This class cannot be instantiated directly using "),yTe=n(JQe,"CODE",{});var mxt=s(yTe);abr=r(mxt,"__init__()"),mxt.forEach(t),nbr=r(JQe," (throws an error)."),JQe.forEach(t),sbr=i(Al),xt=n(Al,"DIV",{class:!0});var nL=s(xt);T(N9.$$.fragment,nL),lbr=i(nL),xTe=n(nL,"P",{});var fxt=s(xTe);ibr=r(fxt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),fxt.forEach(t),dbr=i(nL),Kd=n(nL,"P",{});var Wte=s(Kd);cbr=r(Wte,`Note:
Loading a model from its configuration file does `),$Te=n(Wte,"STRONG",{});var gxt=s($Te);mbr=r(gxt,"not"),gxt.forEach(t),fbr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(Wte,"A",{href:!0});var hxt=s(gU);gbr=r(hxt,"from_pretrained()"),hxt.forEach(t),hbr=r(Wte," to load the model weights."),Wte.forEach(t),ubr=i(nL),T(rE.$$.fragment,nL),nL.forEach(t),pbr=i(Al),bo=n(Al,"DIV",{class:!0});var ya=s(bo);T(q9.$$.fragment,ya),_br=i(ya),kTe=n(ya,"P",{});var uxt=s(kTe);bbr=r(uxt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),uxt.forEach(t),vbr=i(ya),rn=n(ya,"P",{});var sL=s(rn);Fbr=r(sL,"The model class to instantiate is selected based on the "),STe=n(sL,"CODE",{});var pxt=s(STe);Tbr=r(pxt,"model_type"),pxt.forEach(t),Mbr=r(sL,` property of the config object (either
passed as an argument or loaded from `),RTe=n(sL,"CODE",{});var _xt=s(RTe);Ebr=r(_xt,"pretrained_model_name_or_path"),_xt.forEach(t),Cbr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(sL,"CODE",{});var bxt=s(PTe);wbr=r(bxt,"pretrained_model_name_or_path"),bxt.forEach(t),Abr=r(sL,":"),sL.forEach(t),Lbr=i(ya),j9=n(ya,"UL",{});var YQe=s(j9);tE=n(YQe,"LI",{});var Rqe=s(tE);BTe=n(Rqe,"STRONG",{});var vxt=s(BTe);ybr=r(vxt,"detr"),vxt.forEach(t),xbr=r(Rqe," \u2014 "),hU=n(Rqe,"A",{href:!0});var Fxt=s(hU);$br=r(Fxt,"DetrForObjectDetection"),Fxt.forEach(t),kbr=r(Rqe," (DETR model)"),Rqe.forEach(t),Sbr=i(YQe),aE=n(YQe,"LI",{});var Pqe=s(aE);ITe=n(Pqe,"STRONG",{});var Txt=s(ITe);Rbr=r(Txt,"yolos"),Txt.forEach(t),Pbr=r(Pqe," \u2014 "),uU=n(Pqe,"A",{href:!0});var Mxt=s(uU);Bbr=r(Mxt,"YolosForObjectDetection"),Mxt.forEach(t),Ibr=r(Pqe," (YOLOS model)"),Pqe.forEach(t),YQe.forEach(t),Nbr=i(ya),nE=n(ya,"P",{});var Bqe=s(nE);qbr=r(Bqe,"The model is set in evaluation mode by default using "),NTe=n(Bqe,"CODE",{});var Ext=s(NTe);jbr=r(Ext,"model.eval()"),Ext.forEach(t),Dbr=r(Bqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qTe=n(Bqe,"CODE",{});var Cxt=s(qTe);Gbr=r(Cxt,"model.train()"),Cxt.forEach(t),Bqe.forEach(t),Obr=i(ya),T(sE.$$.fragment,ya),ya.forEach(t),Al.forEach(t),Xze=i(m),Zd=n(m,"H2",{class:!0});var KQe=s(Zd);lE=n(KQe,"A",{id:!0,class:!0,href:!0});var wxt=s(lE);jTe=n(wxt,"SPAN",{});var Axt=s(jTe);T(D9.$$.fragment,Axt),Axt.forEach(t),wxt.forEach(t),Vbr=i(KQe),DTe=n(KQe,"SPAN",{});var Lxt=s(DTe);Xbr=r(Lxt,"AutoModelForImageSegmentation"),Lxt.forEach(t),KQe.forEach(t),zze=i(m),Zo=n(m,"DIV",{class:!0});var Ll=s(Zo);T(G9.$$.fragment,Ll),zbr=i(Ll),ec=n(Ll,"P",{});var Qte=s(ec);Wbr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),pU=n(Qte,"A",{href:!0});var yxt=s(pU);Qbr=r(yxt,"from_pretrained()"),yxt.forEach(t),Hbr=r(Qte," class method or the "),_U=n(Qte,"A",{href:!0});var xxt=s(_U);Ubr=r(xxt,"from_config()"),xxt.forEach(t),Jbr=r(Qte,` class
method.`),Qte.forEach(t),Ybr=i(Ll),O9=n(Ll,"P",{});var ZQe=s(O9);Kbr=r(ZQe,"This class cannot be instantiated directly using "),GTe=n(ZQe,"CODE",{});var $xt=s(GTe);Zbr=r($xt,"__init__()"),$xt.forEach(t),evr=r(ZQe," (throws an error)."),ZQe.forEach(t),ovr=i(Ll),$t=n(Ll,"DIV",{class:!0});var lL=s($t);T(V9.$$.fragment,lL),rvr=i(lL),OTe=n(lL,"P",{});var kxt=s(OTe);tvr=r(kxt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),kxt.forEach(t),avr=i(lL),oc=n(lL,"P",{});var Hte=s(oc);nvr=r(Hte,`Note:
Loading a model from its configuration file does `),VTe=n(Hte,"STRONG",{});var Sxt=s(VTe);svr=r(Sxt,"not"),Sxt.forEach(t),lvr=r(Hte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bU=n(Hte,"A",{href:!0});var Rxt=s(bU);ivr=r(Rxt,"from_pretrained()"),Rxt.forEach(t),dvr=r(Hte," to load the model weights."),Hte.forEach(t),cvr=i(lL),T(iE.$$.fragment,lL),lL.forEach(t),mvr=i(Ll),vo=n(Ll,"DIV",{class:!0});var xa=s(vo);T(X9.$$.fragment,xa),fvr=i(xa),XTe=n(xa,"P",{});var Pxt=s(XTe);gvr=r(Pxt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Pxt.forEach(t),hvr=i(xa),tn=n(xa,"P",{});var iL=s(tn);uvr=r(iL,"The model class to instantiate is selected based on the "),zTe=n(iL,"CODE",{});var Bxt=s(zTe);pvr=r(Bxt,"model_type"),Bxt.forEach(t),_vr=r(iL,` property of the config object (either
passed as an argument or loaded from `),WTe=n(iL,"CODE",{});var Ixt=s(WTe);bvr=r(Ixt,"pretrained_model_name_or_path"),Ixt.forEach(t),vvr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(iL,"CODE",{});var Nxt=s(QTe);Fvr=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),Tvr=r(iL,":"),iL.forEach(t),Mvr=i(xa),HTe=n(xa,"UL",{});var qxt=s(HTe);dE=n(qxt,"LI",{});var Iqe=s(dE);UTe=n(Iqe,"STRONG",{});var jxt=s(UTe);Evr=r(jxt,"detr"),jxt.forEach(t),Cvr=r(Iqe," \u2014 "),vU=n(Iqe,"A",{href:!0});var Dxt=s(vU);wvr=r(Dxt,"DetrForSegmentation"),Dxt.forEach(t),Avr=r(Iqe," (DETR model)"),Iqe.forEach(t),qxt.forEach(t),Lvr=i(xa),cE=n(xa,"P",{});var Nqe=s(cE);yvr=r(Nqe,"The model is set in evaluation mode by default using "),JTe=n(Nqe,"CODE",{});var Gxt=s(JTe);xvr=r(Gxt,"model.eval()"),Gxt.forEach(t),$vr=r(Nqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),YTe=n(Nqe,"CODE",{});var Oxt=s(YTe);kvr=r(Oxt,"model.train()"),Oxt.forEach(t),Nqe.forEach(t),Svr=i(xa),T(mE.$$.fragment,xa),xa.forEach(t),Ll.forEach(t),Wze=i(m),rc=n(m,"H2",{class:!0});var eHe=s(rc);fE=n(eHe,"A",{id:!0,class:!0,href:!0});var Vxt=s(fE);KTe=n(Vxt,"SPAN",{});var Xxt=s(KTe);T(z9.$$.fragment,Xxt),Xxt.forEach(t),Vxt.forEach(t),Rvr=i(eHe),ZTe=n(eHe,"SPAN",{});var zxt=s(ZTe);Pvr=r(zxt,"AutoModelForSemanticSegmentation"),zxt.forEach(t),eHe.forEach(t),Qze=i(m),er=n(m,"DIV",{class:!0});var yl=s(er);T(W9.$$.fragment,yl),Bvr=i(yl),tc=n(yl,"P",{});var Ute=s(tc);Ivr=r(Ute,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FU=n(Ute,"A",{href:!0});var Wxt=s(FU);Nvr=r(Wxt,"from_pretrained()"),Wxt.forEach(t),qvr=r(Ute," class method or the "),TU=n(Ute,"A",{href:!0});var Qxt=s(TU);jvr=r(Qxt,"from_config()"),Qxt.forEach(t),Dvr=r(Ute,` class
method.`),Ute.forEach(t),Gvr=i(yl),Q9=n(yl,"P",{});var oHe=s(Q9);Ovr=r(oHe,"This class cannot be instantiated directly using "),eMe=n(oHe,"CODE",{});var Hxt=s(eMe);Vvr=r(Hxt,"__init__()"),Hxt.forEach(t),Xvr=r(oHe," (throws an error)."),oHe.forEach(t),zvr=i(yl),kt=n(yl,"DIV",{class:!0});var dL=s(kt);T(H9.$$.fragment,dL),Wvr=i(dL),oMe=n(dL,"P",{});var Uxt=s(oMe);Qvr=r(Uxt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Uxt.forEach(t),Hvr=i(dL),ac=n(dL,"P",{});var Jte=s(ac);Uvr=r(Jte,`Note:
Loading a model from its configuration file does `),rMe=n(Jte,"STRONG",{});var Jxt=s(rMe);Jvr=r(Jxt,"not"),Jxt.forEach(t),Yvr=r(Jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),MU=n(Jte,"A",{href:!0});var Yxt=s(MU);Kvr=r(Yxt,"from_pretrained()"),Yxt.forEach(t),Zvr=r(Jte," to load the model weights."),Jte.forEach(t),e1r=i(dL),T(gE.$$.fragment,dL),dL.forEach(t),o1r=i(yl),Fo=n(yl,"DIV",{class:!0});var $a=s(Fo);T(U9.$$.fragment,$a),r1r=i($a),tMe=n($a,"P",{});var Kxt=s(tMe);t1r=r(Kxt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Kxt.forEach(t),a1r=i($a),an=n($a,"P",{});var cL=s(an);n1r=r(cL,"The model class to instantiate is selected based on the "),aMe=n(cL,"CODE",{});var Zxt=s(aMe);s1r=r(Zxt,"model_type"),Zxt.forEach(t),l1r=r(cL,` property of the config object (either
passed as an argument or loaded from `),nMe=n(cL,"CODE",{});var e$t=s(nMe);i1r=r(e$t,"pretrained_model_name_or_path"),e$t.forEach(t),d1r=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sMe=n(cL,"CODE",{});var o$t=s(sMe);c1r=r(o$t,"pretrained_model_name_or_path"),o$t.forEach(t),m1r=r(cL,":"),cL.forEach(t),f1r=i($a),at=n($a,"UL",{});var xl=s(at);hE=n(xl,"LI",{});var qqe=s(hE);lMe=n(qqe,"STRONG",{});var r$t=s(lMe);g1r=r(r$t,"beit"),r$t.forEach(t),h1r=r(qqe," \u2014 "),EU=n(qqe,"A",{href:!0});var t$t=s(EU);u1r=r(t$t,"BeitForSemanticSegmentation"),t$t.forEach(t),p1r=r(qqe," (BEiT model)"),qqe.forEach(t),_1r=i(xl),uE=n(xl,"LI",{});var jqe=s(uE);iMe=n(jqe,"STRONG",{});var a$t=s(iMe);b1r=r(a$t,"data2vec-vision"),a$t.forEach(t),v1r=r(jqe," \u2014 "),CU=n(jqe,"A",{href:!0});var n$t=s(CU);F1r=r(n$t,"Data2VecVisionForSemanticSegmentation"),n$t.forEach(t),T1r=r(jqe," (Data2VecVision model)"),jqe.forEach(t),M1r=i(xl),pE=n(xl,"LI",{});var Dqe=s(pE);dMe=n(Dqe,"STRONG",{});var s$t=s(dMe);E1r=r(s$t,"dpt"),s$t.forEach(t),C1r=r(Dqe," \u2014 "),wU=n(Dqe,"A",{href:!0});var l$t=s(wU);w1r=r(l$t,"DPTForSemanticSegmentation"),l$t.forEach(t),A1r=r(Dqe," (DPT model)"),Dqe.forEach(t),L1r=i(xl),_E=n(xl,"LI",{});var Gqe=s(_E);cMe=n(Gqe,"STRONG",{});var i$t=s(cMe);y1r=r(i$t,"mobilevit"),i$t.forEach(t),x1r=r(Gqe," \u2014 "),AU=n(Gqe,"A",{href:!0});var d$t=s(AU);$1r=r(d$t,"MobileViTForSemanticSegmentation"),d$t.forEach(t),k1r=r(Gqe," (MobileViT model)"),Gqe.forEach(t),S1r=i(xl),bE=n(xl,"LI",{});var Oqe=s(bE);mMe=n(Oqe,"STRONG",{});var c$t=s(mMe);R1r=r(c$t,"segformer"),c$t.forEach(t),P1r=r(Oqe," \u2014 "),LU=n(Oqe,"A",{href:!0});var m$t=s(LU);B1r=r(m$t,"SegformerForSemanticSegmentation"),m$t.forEach(t),I1r=r(Oqe," (SegFormer model)"),Oqe.forEach(t),xl.forEach(t),N1r=i($a),vE=n($a,"P",{});var Vqe=s(vE);q1r=r(Vqe,"The model is set in evaluation mode by default using "),fMe=n(Vqe,"CODE",{});var f$t=s(fMe);j1r=r(f$t,"model.eval()"),f$t.forEach(t),D1r=r(Vqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gMe=n(Vqe,"CODE",{});var g$t=s(gMe);G1r=r(g$t,"model.train()"),g$t.forEach(t),Vqe.forEach(t),O1r=i($a),T(FE.$$.fragment,$a),$a.forEach(t),yl.forEach(t),Hze=i(m),nc=n(m,"H2",{class:!0});var rHe=s(nc);TE=n(rHe,"A",{id:!0,class:!0,href:!0});var h$t=s(TE);hMe=n(h$t,"SPAN",{});var u$t=s(hMe);T(J9.$$.fragment,u$t),u$t.forEach(t),h$t.forEach(t),V1r=i(rHe),uMe=n(rHe,"SPAN",{});var p$t=s(uMe);X1r=r(p$t,"AutoModelForInstanceSegmentation"),p$t.forEach(t),rHe.forEach(t),Uze=i(m),or=n(m,"DIV",{class:!0});var $l=s(or);T(Y9.$$.fragment,$l),z1r=i($l),sc=n($l,"P",{});var Yte=s(sc);W1r=r(Yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yU=n(Yte,"A",{href:!0});var _$t=s(yU);Q1r=r(_$t,"from_pretrained()"),_$t.forEach(t),H1r=r(Yte," class method or the "),xU=n(Yte,"A",{href:!0});var b$t=s(xU);U1r=r(b$t,"from_config()"),b$t.forEach(t),J1r=r(Yte,` class
method.`),Yte.forEach(t),Y1r=i($l),K9=n($l,"P",{});var tHe=s(K9);K1r=r(tHe,"This class cannot be instantiated directly using "),pMe=n(tHe,"CODE",{});var v$t=s(pMe);Z1r=r(v$t,"__init__()"),v$t.forEach(t),eFr=r(tHe," (throws an error)."),tHe.forEach(t),oFr=i($l),St=n($l,"DIV",{class:!0});var mL=s(St);T(Z9.$$.fragment,mL),rFr=i(mL),_Me=n(mL,"P",{});var F$t=s(_Me);tFr=r(F$t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),F$t.forEach(t),aFr=i(mL),lc=n(mL,"P",{});var Kte=s(lc);nFr=r(Kte,`Note:
Loading a model from its configuration file does `),bMe=n(Kte,"STRONG",{});var T$t=s(bMe);sFr=r(T$t,"not"),T$t.forEach(t),lFr=r(Kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=n(Kte,"A",{href:!0});var M$t=s($U);iFr=r(M$t,"from_pretrained()"),M$t.forEach(t),dFr=r(Kte," to load the model weights."),Kte.forEach(t),cFr=i(mL),T(ME.$$.fragment,mL),mL.forEach(t),mFr=i($l),To=n($l,"DIV",{class:!0});var ka=s(To);T(ex.$$.fragment,ka),fFr=i(ka),vMe=n(ka,"P",{});var E$t=s(vMe);gFr=r(E$t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),E$t.forEach(t),hFr=i(ka),nn=n(ka,"P",{});var fL=s(nn);uFr=r(fL,"The model class to instantiate is selected based on the "),FMe=n(fL,"CODE",{});var C$t=s(FMe);pFr=r(C$t,"model_type"),C$t.forEach(t),_Fr=r(fL,` property of the config object (either
passed as an argument or loaded from `),TMe=n(fL,"CODE",{});var w$t=s(TMe);bFr=r(w$t,"pretrained_model_name_or_path"),w$t.forEach(t),vFr=r(fL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(fL,"CODE",{});var A$t=s(MMe);FFr=r(A$t,"pretrained_model_name_or_path"),A$t.forEach(t),TFr=r(fL,":"),fL.forEach(t),MFr=i(ka),EMe=n(ka,"UL",{});var L$t=s(EMe);EE=n(L$t,"LI",{});var Xqe=s(EE);CMe=n(Xqe,"STRONG",{});var y$t=s(CMe);EFr=r(y$t,"maskformer"),y$t.forEach(t),CFr=r(Xqe," \u2014 "),kU=n(Xqe,"A",{href:!0});var x$t=s(kU);wFr=r(x$t,"MaskFormerForInstanceSegmentation"),x$t.forEach(t),AFr=r(Xqe," (MaskFormer model)"),Xqe.forEach(t),L$t.forEach(t),LFr=i(ka),CE=n(ka,"P",{});var zqe=s(CE);yFr=r(zqe,"The model is set in evaluation mode by default using "),wMe=n(zqe,"CODE",{});var $$t=s(wMe);xFr=r($$t,"model.eval()"),$$t.forEach(t),$Fr=r(zqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AMe=n(zqe,"CODE",{});var k$t=s(AMe);kFr=r(k$t,"model.train()"),k$t.forEach(t),zqe.forEach(t),SFr=i(ka),T(wE.$$.fragment,ka),ka.forEach(t),$l.forEach(t),Jze=i(m),ic=n(m,"H2",{class:!0});var aHe=s(ic);AE=n(aHe,"A",{id:!0,class:!0,href:!0});var S$t=s(AE);LMe=n(S$t,"SPAN",{});var R$t=s(LMe);T(ox.$$.fragment,R$t),R$t.forEach(t),S$t.forEach(t),RFr=i(aHe),yMe=n(aHe,"SPAN",{});var P$t=s(yMe);PFr=r(P$t,"TFAutoModel"),P$t.forEach(t),aHe.forEach(t),Yze=i(m),rr=n(m,"DIV",{class:!0});var kl=s(rr);T(rx.$$.fragment,kl),BFr=i(kl),dc=n(kl,"P",{});var Zte=s(dc);IFr=r(Zte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SU=n(Zte,"A",{href:!0});var B$t=s(SU);NFr=r(B$t,"from_pretrained()"),B$t.forEach(t),qFr=r(Zte," class method or the "),RU=n(Zte,"A",{href:!0});var I$t=s(RU);jFr=r(I$t,"from_config()"),I$t.forEach(t),DFr=r(Zte,` class
method.`),Zte.forEach(t),GFr=i(kl),tx=n(kl,"P",{});var nHe=s(tx);OFr=r(nHe,"This class cannot be instantiated directly using "),xMe=n(nHe,"CODE",{});var N$t=s(xMe);VFr=r(N$t,"__init__()"),N$t.forEach(t),XFr=r(nHe," (throws an error)."),nHe.forEach(t),zFr=i(kl),Rt=n(kl,"DIV",{class:!0});var gL=s(Rt);T(ax.$$.fragment,gL),WFr=i(gL),$Me=n(gL,"P",{});var q$t=s($Me);QFr=r(q$t,"Instantiates one of the base model classes of the library from a configuration."),q$t.forEach(t),HFr=i(gL),cc=n(gL,"P",{});var eae=s(cc);UFr=r(eae,`Note:
Loading a model from its configuration file does `),kMe=n(eae,"STRONG",{});var j$t=s(kMe);JFr=r(j$t,"not"),j$t.forEach(t),YFr=r(eae,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(eae,"A",{href:!0});var D$t=s(PU);KFr=r(D$t,"from_pretrained()"),D$t.forEach(t),ZFr=r(eae," to load the model weights."),eae.forEach(t),eTr=i(gL),T(LE.$$.fragment,gL),gL.forEach(t),oTr=i(kl),$r=n(kl,"DIV",{class:!0});var Sl=s($r);T(nx.$$.fragment,Sl),rTr=i(Sl),SMe=n(Sl,"P",{});var G$t=s(SMe);tTr=r(G$t,"Instantiate one of the base model classes of the library from a pretrained model."),G$t.forEach(t),aTr=i(Sl),sn=n(Sl,"P",{});var hL=s(sn);nTr=r(hL,"The model class to instantiate is selected based on the "),RMe=n(hL,"CODE",{});var O$t=s(RMe);sTr=r(O$t,"model_type"),O$t.forEach(t),lTr=r(hL,` property of the config object (either
passed as an argument or loaded from `),PMe=n(hL,"CODE",{});var V$t=s(PMe);iTr=r(V$t,"pretrained_model_name_or_path"),V$t.forEach(t),dTr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(hL,"CODE",{});var X$t=s(BMe);cTr=r(X$t,"pretrained_model_name_or_path"),X$t.forEach(t),mTr=r(hL,":"),hL.forEach(t),fTr=i(Sl),I=n(Sl,"UL",{});var D=s(I);yE=n(D,"LI",{});var Wqe=s(yE);IMe=n(Wqe,"STRONG",{});var z$t=s(IMe);gTr=r(z$t,"albert"),z$t.forEach(t),hTr=r(Wqe," \u2014 "),BU=n(Wqe,"A",{href:!0});var W$t=s(BU);uTr=r(W$t,"TFAlbertModel"),W$t.forEach(t),pTr=r(Wqe," (ALBERT model)"),Wqe.forEach(t),_Tr=i(D),xE=n(D,"LI",{});var Qqe=s(xE);NMe=n(Qqe,"STRONG",{});var Q$t=s(NMe);bTr=r(Q$t,"bart"),Q$t.forEach(t),vTr=r(Qqe," \u2014 "),IU=n(Qqe,"A",{href:!0});var H$t=s(IU);FTr=r(H$t,"TFBartModel"),H$t.forEach(t),TTr=r(Qqe," (BART model)"),Qqe.forEach(t),MTr=i(D),$E=n(D,"LI",{});var Hqe=s($E);qMe=n(Hqe,"STRONG",{});var U$t=s(qMe);ETr=r(U$t,"bert"),U$t.forEach(t),CTr=r(Hqe," \u2014 "),NU=n(Hqe,"A",{href:!0});var J$t=s(NU);wTr=r(J$t,"TFBertModel"),J$t.forEach(t),ATr=r(Hqe," (BERT model)"),Hqe.forEach(t),LTr=i(D),kE=n(D,"LI",{});var Uqe=s(kE);jMe=n(Uqe,"STRONG",{});var Y$t=s(jMe);yTr=r(Y$t,"blenderbot"),Y$t.forEach(t),xTr=r(Uqe," \u2014 "),qU=n(Uqe,"A",{href:!0});var K$t=s(qU);$Tr=r(K$t,"TFBlenderbotModel"),K$t.forEach(t),kTr=r(Uqe," (Blenderbot model)"),Uqe.forEach(t),STr=i(D),SE=n(D,"LI",{});var Jqe=s(SE);DMe=n(Jqe,"STRONG",{});var Z$t=s(DMe);RTr=r(Z$t,"blenderbot-small"),Z$t.forEach(t),PTr=r(Jqe," \u2014 "),jU=n(Jqe,"A",{href:!0});var ekt=s(jU);BTr=r(ekt,"TFBlenderbotSmallModel"),ekt.forEach(t),ITr=r(Jqe," (BlenderbotSmall model)"),Jqe.forEach(t),NTr=i(D),RE=n(D,"LI",{});var Yqe=s(RE);GMe=n(Yqe,"STRONG",{});var okt=s(GMe);qTr=r(okt,"camembert"),okt.forEach(t),jTr=r(Yqe," \u2014 "),DU=n(Yqe,"A",{href:!0});var rkt=s(DU);DTr=r(rkt,"TFCamembertModel"),rkt.forEach(t),GTr=r(Yqe," (CamemBERT model)"),Yqe.forEach(t),OTr=i(D),PE=n(D,"LI",{});var Kqe=s(PE);OMe=n(Kqe,"STRONG",{});var tkt=s(OMe);VTr=r(tkt,"clip"),tkt.forEach(t),XTr=r(Kqe," \u2014 "),GU=n(Kqe,"A",{href:!0});var akt=s(GU);zTr=r(akt,"TFCLIPModel"),akt.forEach(t),WTr=r(Kqe," (CLIP model)"),Kqe.forEach(t),QTr=i(D),BE=n(D,"LI",{});var Zqe=s(BE);VMe=n(Zqe,"STRONG",{});var nkt=s(VMe);HTr=r(nkt,"convbert"),nkt.forEach(t),UTr=r(Zqe," \u2014 "),OU=n(Zqe,"A",{href:!0});var skt=s(OU);JTr=r(skt,"TFConvBertModel"),skt.forEach(t),YTr=r(Zqe," (ConvBERT model)"),Zqe.forEach(t),KTr=i(D),IE=n(D,"LI",{});var eje=s(IE);XMe=n(eje,"STRONG",{});var lkt=s(XMe);ZTr=r(lkt,"convnext"),lkt.forEach(t),eMr=r(eje," \u2014 "),VU=n(eje,"A",{href:!0});var ikt=s(VU);oMr=r(ikt,"TFConvNextModel"),ikt.forEach(t),rMr=r(eje," (ConvNeXT model)"),eje.forEach(t),tMr=i(D),NE=n(D,"LI",{});var oje=s(NE);zMe=n(oje,"STRONG",{});var dkt=s(zMe);aMr=r(dkt,"ctrl"),dkt.forEach(t),nMr=r(oje," \u2014 "),XU=n(oje,"A",{href:!0});var ckt=s(XU);sMr=r(ckt,"TFCTRLModel"),ckt.forEach(t),lMr=r(oje," (CTRL model)"),oje.forEach(t),iMr=i(D),qE=n(D,"LI",{});var rje=s(qE);WMe=n(rje,"STRONG",{});var mkt=s(WMe);dMr=r(mkt,"data2vec-vision"),mkt.forEach(t),cMr=r(rje," \u2014 "),zU=n(rje,"A",{href:!0});var fkt=s(zU);mMr=r(fkt,"TFData2VecVisionModel"),fkt.forEach(t),fMr=r(rje," (Data2VecVision model)"),rje.forEach(t),gMr=i(D),jE=n(D,"LI",{});var tje=s(jE);QMe=n(tje,"STRONG",{});var gkt=s(QMe);hMr=r(gkt,"deberta"),gkt.forEach(t),uMr=r(tje," \u2014 "),WU=n(tje,"A",{href:!0});var hkt=s(WU);pMr=r(hkt,"TFDebertaModel"),hkt.forEach(t),_Mr=r(tje," (DeBERTa model)"),tje.forEach(t),bMr=i(D),DE=n(D,"LI",{});var aje=s(DE);HMe=n(aje,"STRONG",{});var ukt=s(HMe);vMr=r(ukt,"deberta-v2"),ukt.forEach(t),FMr=r(aje," \u2014 "),QU=n(aje,"A",{href:!0});var pkt=s(QU);TMr=r(pkt,"TFDebertaV2Model"),pkt.forEach(t),MMr=r(aje," (DeBERTa-v2 model)"),aje.forEach(t),EMr=i(D),GE=n(D,"LI",{});var nje=s(GE);UMe=n(nje,"STRONG",{});var _kt=s(UMe);CMr=r(_kt,"deit"),_kt.forEach(t),wMr=r(nje," \u2014 "),HU=n(nje,"A",{href:!0});var bkt=s(HU);AMr=r(bkt,"TFDeiTModel"),bkt.forEach(t),LMr=r(nje," (DeiT model)"),nje.forEach(t),yMr=i(D),OE=n(D,"LI",{});var sje=s(OE);JMe=n(sje,"STRONG",{});var vkt=s(JMe);xMr=r(vkt,"distilbert"),vkt.forEach(t),$Mr=r(sje," \u2014 "),UU=n(sje,"A",{href:!0});var Fkt=s(UU);kMr=r(Fkt,"TFDistilBertModel"),Fkt.forEach(t),SMr=r(sje," (DistilBERT model)"),sje.forEach(t),RMr=i(D),VE=n(D,"LI",{});var lje=s(VE);YMe=n(lje,"STRONG",{});var Tkt=s(YMe);PMr=r(Tkt,"dpr"),Tkt.forEach(t),BMr=r(lje," \u2014 "),JU=n(lje,"A",{href:!0});var Mkt=s(JU);IMr=r(Mkt,"TFDPRQuestionEncoder"),Mkt.forEach(t),NMr=r(lje," (DPR model)"),lje.forEach(t),qMr=i(D),XE=n(D,"LI",{});var ije=s(XE);KMe=n(ije,"STRONG",{});var Ekt=s(KMe);jMr=r(Ekt,"electra"),Ekt.forEach(t),DMr=r(ije," \u2014 "),YU=n(ije,"A",{href:!0});var Ckt=s(YU);GMr=r(Ckt,"TFElectraModel"),Ckt.forEach(t),OMr=r(ije," (ELECTRA model)"),ije.forEach(t),VMr=i(D),zE=n(D,"LI",{});var dje=s(zE);ZMe=n(dje,"STRONG",{});var wkt=s(ZMe);XMr=r(wkt,"flaubert"),wkt.forEach(t),zMr=r(dje," \u2014 "),KU=n(dje,"A",{href:!0});var Akt=s(KU);WMr=r(Akt,"TFFlaubertModel"),Akt.forEach(t),QMr=r(dje," (FlauBERT model)"),dje.forEach(t),HMr=i(D),Ks=n(D,"LI",{});var WS=s(Ks);e4e=n(WS,"STRONG",{});var Lkt=s(e4e);UMr=r(Lkt,"funnel"),Lkt.forEach(t),JMr=r(WS," \u2014 "),ZU=n(WS,"A",{href:!0});var ykt=s(ZU);YMr=r(ykt,"TFFunnelModel"),ykt.forEach(t),KMr=r(WS," or "),eJ=n(WS,"A",{href:!0});var xkt=s(eJ);ZMr=r(xkt,"TFFunnelBaseModel"),xkt.forEach(t),e4r=r(WS," (Funnel Transformer model)"),WS.forEach(t),o4r=i(D),WE=n(D,"LI",{});var cje=s(WE);o4e=n(cje,"STRONG",{});var $kt=s(o4e);r4r=r($kt,"gpt2"),$kt.forEach(t),t4r=r(cje," \u2014 "),oJ=n(cje,"A",{href:!0});var kkt=s(oJ);a4r=r(kkt,"TFGPT2Model"),kkt.forEach(t),n4r=r(cje," (OpenAI GPT-2 model)"),cje.forEach(t),s4r=i(D),QE=n(D,"LI",{});var mje=s(QE);r4e=n(mje,"STRONG",{});var Skt=s(r4e);l4r=r(Skt,"gptj"),Skt.forEach(t),i4r=r(mje," \u2014 "),rJ=n(mje,"A",{href:!0});var Rkt=s(rJ);d4r=r(Rkt,"TFGPTJModel"),Rkt.forEach(t),c4r=r(mje," (GPT-J model)"),mje.forEach(t),m4r=i(D),HE=n(D,"LI",{});var fje=s(HE);t4e=n(fje,"STRONG",{});var Pkt=s(t4e);f4r=r(Pkt,"hubert"),Pkt.forEach(t),g4r=r(fje," \u2014 "),tJ=n(fje,"A",{href:!0});var Bkt=s(tJ);h4r=r(Bkt,"TFHubertModel"),Bkt.forEach(t),u4r=r(fje," (Hubert model)"),fje.forEach(t),p4r=i(D),UE=n(D,"LI",{});var gje=s(UE);a4e=n(gje,"STRONG",{});var Ikt=s(a4e);_4r=r(Ikt,"layoutlm"),Ikt.forEach(t),b4r=r(gje," \u2014 "),aJ=n(gje,"A",{href:!0});var Nkt=s(aJ);v4r=r(Nkt,"TFLayoutLMModel"),Nkt.forEach(t),F4r=r(gje," (LayoutLM model)"),gje.forEach(t),T4r=i(D),JE=n(D,"LI",{});var hje=s(JE);n4e=n(hje,"STRONG",{});var qkt=s(n4e);M4r=r(qkt,"led"),qkt.forEach(t),E4r=r(hje," \u2014 "),nJ=n(hje,"A",{href:!0});var jkt=s(nJ);C4r=r(jkt,"TFLEDModel"),jkt.forEach(t),w4r=r(hje," (LED model)"),hje.forEach(t),A4r=i(D),YE=n(D,"LI",{});var uje=s(YE);s4e=n(uje,"STRONG",{});var Dkt=s(s4e);L4r=r(Dkt,"longformer"),Dkt.forEach(t),y4r=r(uje," \u2014 "),sJ=n(uje,"A",{href:!0});var Gkt=s(sJ);x4r=r(Gkt,"TFLongformerModel"),Gkt.forEach(t),$4r=r(uje," (Longformer model)"),uje.forEach(t),k4r=i(D),KE=n(D,"LI",{});var pje=s(KE);l4e=n(pje,"STRONG",{});var Okt=s(l4e);S4r=r(Okt,"lxmert"),Okt.forEach(t),R4r=r(pje," \u2014 "),lJ=n(pje,"A",{href:!0});var Vkt=s(lJ);P4r=r(Vkt,"TFLxmertModel"),Vkt.forEach(t),B4r=r(pje," (LXMERT model)"),pje.forEach(t),I4r=i(D),ZE=n(D,"LI",{});var _je=s(ZE);i4e=n(_je,"STRONG",{});var Xkt=s(i4e);N4r=r(Xkt,"marian"),Xkt.forEach(t),q4r=r(_je," \u2014 "),iJ=n(_je,"A",{href:!0});var zkt=s(iJ);j4r=r(zkt,"TFMarianModel"),zkt.forEach(t),D4r=r(_je," (Marian model)"),_je.forEach(t),G4r=i(D),eC=n(D,"LI",{});var bje=s(eC);d4e=n(bje,"STRONG",{});var Wkt=s(d4e);O4r=r(Wkt,"mbart"),Wkt.forEach(t),V4r=r(bje," \u2014 "),dJ=n(bje,"A",{href:!0});var Qkt=s(dJ);X4r=r(Qkt,"TFMBartModel"),Qkt.forEach(t),z4r=r(bje," (mBART model)"),bje.forEach(t),W4r=i(D),oC=n(D,"LI",{});var vje=s(oC);c4e=n(vje,"STRONG",{});var Hkt=s(c4e);Q4r=r(Hkt,"mobilebert"),Hkt.forEach(t),H4r=r(vje," \u2014 "),cJ=n(vje,"A",{href:!0});var Ukt=s(cJ);U4r=r(Ukt,"TFMobileBertModel"),Ukt.forEach(t),J4r=r(vje," (MobileBERT model)"),vje.forEach(t),Y4r=i(D),rC=n(D,"LI",{});var Fje=s(rC);m4e=n(Fje,"STRONG",{});var Jkt=s(m4e);K4r=r(Jkt,"mpnet"),Jkt.forEach(t),Z4r=r(Fje," \u2014 "),mJ=n(Fje,"A",{href:!0});var Ykt=s(mJ);eEr=r(Ykt,"TFMPNetModel"),Ykt.forEach(t),oEr=r(Fje," (MPNet model)"),Fje.forEach(t),rEr=i(D),tC=n(D,"LI",{});var Tje=s(tC);f4e=n(Tje,"STRONG",{});var Kkt=s(f4e);tEr=r(Kkt,"mt5"),Kkt.forEach(t),aEr=r(Tje," \u2014 "),fJ=n(Tje,"A",{href:!0});var Zkt=s(fJ);nEr=r(Zkt,"TFMT5Model"),Zkt.forEach(t),sEr=r(Tje," (MT5 model)"),Tje.forEach(t),lEr=i(D),aC=n(D,"LI",{});var Mje=s(aC);g4e=n(Mje,"STRONG",{});var eSt=s(g4e);iEr=r(eSt,"openai-gpt"),eSt.forEach(t),dEr=r(Mje," \u2014 "),gJ=n(Mje,"A",{href:!0});var oSt=s(gJ);cEr=r(oSt,"TFOpenAIGPTModel"),oSt.forEach(t),mEr=r(Mje," (OpenAI GPT model)"),Mje.forEach(t),fEr=i(D),nC=n(D,"LI",{});var Eje=s(nC);h4e=n(Eje,"STRONG",{});var rSt=s(h4e);gEr=r(rSt,"opt"),rSt.forEach(t),hEr=r(Eje," \u2014 "),hJ=n(Eje,"A",{href:!0});var tSt=s(hJ);uEr=r(tSt,"TFOPTModel"),tSt.forEach(t),pEr=r(Eje," (OPT model)"),Eje.forEach(t),_Er=i(D),sC=n(D,"LI",{});var Cje=s(sC);u4e=n(Cje,"STRONG",{});var aSt=s(u4e);bEr=r(aSt,"pegasus"),aSt.forEach(t),vEr=r(Cje," \u2014 "),uJ=n(Cje,"A",{href:!0});var nSt=s(uJ);FEr=r(nSt,"TFPegasusModel"),nSt.forEach(t),TEr=r(Cje," (Pegasus model)"),Cje.forEach(t),MEr=i(D),lC=n(D,"LI",{});var wje=s(lC);p4e=n(wje,"STRONG",{});var sSt=s(p4e);EEr=r(sSt,"regnet"),sSt.forEach(t),CEr=r(wje," \u2014 "),pJ=n(wje,"A",{href:!0});var lSt=s(pJ);wEr=r(lSt,"TFRegNetModel"),lSt.forEach(t),AEr=r(wje," (RegNet model)"),wje.forEach(t),LEr=i(D),iC=n(D,"LI",{});var Aje=s(iC);_4e=n(Aje,"STRONG",{});var iSt=s(_4e);yEr=r(iSt,"rembert"),iSt.forEach(t),xEr=r(Aje," \u2014 "),_J=n(Aje,"A",{href:!0});var dSt=s(_J);$Er=r(dSt,"TFRemBertModel"),dSt.forEach(t),kEr=r(Aje," (RemBERT model)"),Aje.forEach(t),SEr=i(D),dC=n(D,"LI",{});var Lje=s(dC);b4e=n(Lje,"STRONG",{});var cSt=s(b4e);REr=r(cSt,"resnet"),cSt.forEach(t),PEr=r(Lje," \u2014 "),bJ=n(Lje,"A",{href:!0});var mSt=s(bJ);BEr=r(mSt,"TFResNetModel"),mSt.forEach(t),IEr=r(Lje," (ResNet model)"),Lje.forEach(t),NEr=i(D),cC=n(D,"LI",{});var yje=s(cC);v4e=n(yje,"STRONG",{});var fSt=s(v4e);qEr=r(fSt,"roberta"),fSt.forEach(t),jEr=r(yje," \u2014 "),vJ=n(yje,"A",{href:!0});var gSt=s(vJ);DEr=r(gSt,"TFRobertaModel"),gSt.forEach(t),GEr=r(yje," (RoBERTa model)"),yje.forEach(t),OEr=i(D),mC=n(D,"LI",{});var xje=s(mC);F4e=n(xje,"STRONG",{});var hSt=s(F4e);VEr=r(hSt,"roformer"),hSt.forEach(t),XEr=r(xje," \u2014 "),FJ=n(xje,"A",{href:!0});var uSt=s(FJ);zEr=r(uSt,"TFRoFormerModel"),uSt.forEach(t),WEr=r(xje," (RoFormer model)"),xje.forEach(t),QEr=i(D),fC=n(D,"LI",{});var $je=s(fC);T4e=n($je,"STRONG",{});var pSt=s(T4e);HEr=r(pSt,"segformer"),pSt.forEach(t),UEr=r($je," \u2014 "),TJ=n($je,"A",{href:!0});var _St=s(TJ);JEr=r(_St,"TFSegformerModel"),_St.forEach(t),YEr=r($je," (SegFormer model)"),$je.forEach(t),KEr=i(D),gC=n(D,"LI",{});var kje=s(gC);M4e=n(kje,"STRONG",{});var bSt=s(M4e);ZEr=r(bSt,"speech_to_text"),bSt.forEach(t),eCr=r(kje," \u2014 "),MJ=n(kje,"A",{href:!0});var vSt=s(MJ);oCr=r(vSt,"TFSpeech2TextModel"),vSt.forEach(t),rCr=r(kje," (Speech2Text model)"),kje.forEach(t),tCr=i(D),hC=n(D,"LI",{});var Sje=s(hC);E4e=n(Sje,"STRONG",{});var FSt=s(E4e);aCr=r(FSt,"swin"),FSt.forEach(t),nCr=r(Sje," \u2014 "),EJ=n(Sje,"A",{href:!0});var TSt=s(EJ);sCr=r(TSt,"TFSwinModel"),TSt.forEach(t),lCr=r(Sje," (Swin Transformer model)"),Sje.forEach(t),iCr=i(D),uC=n(D,"LI",{});var Rje=s(uC);C4e=n(Rje,"STRONG",{});var MSt=s(C4e);dCr=r(MSt,"t5"),MSt.forEach(t),cCr=r(Rje," \u2014 "),CJ=n(Rje,"A",{href:!0});var ESt=s(CJ);mCr=r(ESt,"TFT5Model"),ESt.forEach(t),fCr=r(Rje," (T5 model)"),Rje.forEach(t),gCr=i(D),pC=n(D,"LI",{});var Pje=s(pC);w4e=n(Pje,"STRONG",{});var CSt=s(w4e);hCr=r(CSt,"tapas"),CSt.forEach(t),uCr=r(Pje," \u2014 "),wJ=n(Pje,"A",{href:!0});var wSt=s(wJ);pCr=r(wSt,"TFTapasModel"),wSt.forEach(t),_Cr=r(Pje," (TAPAS model)"),Pje.forEach(t),bCr=i(D),_C=n(D,"LI",{});var Bje=s(_C);A4e=n(Bje,"STRONG",{});var ASt=s(A4e);vCr=r(ASt,"transfo-xl"),ASt.forEach(t),FCr=r(Bje," \u2014 "),AJ=n(Bje,"A",{href:!0});var LSt=s(AJ);TCr=r(LSt,"TFTransfoXLModel"),LSt.forEach(t),MCr=r(Bje," (Transformer-XL model)"),Bje.forEach(t),ECr=i(D),bC=n(D,"LI",{});var Ije=s(bC);L4e=n(Ije,"STRONG",{});var ySt=s(L4e);CCr=r(ySt,"vit"),ySt.forEach(t),wCr=r(Ije," \u2014 "),LJ=n(Ije,"A",{href:!0});var xSt=s(LJ);ACr=r(xSt,"TFViTModel"),xSt.forEach(t),LCr=r(Ije," (ViT model)"),Ije.forEach(t),yCr=i(D),vC=n(D,"LI",{});var Nje=s(vC);y4e=n(Nje,"STRONG",{});var $St=s(y4e);xCr=r($St,"vit_mae"),$St.forEach(t),$Cr=r(Nje," \u2014 "),yJ=n(Nje,"A",{href:!0});var kSt=s(yJ);kCr=r(kSt,"TFViTMAEModel"),kSt.forEach(t),SCr=r(Nje," (ViTMAE model)"),Nje.forEach(t),RCr=i(D),FC=n(D,"LI",{});var qje=s(FC);x4e=n(qje,"STRONG",{});var SSt=s(x4e);PCr=r(SSt,"wav2vec2"),SSt.forEach(t),BCr=r(qje," \u2014 "),xJ=n(qje,"A",{href:!0});var RSt=s(xJ);ICr=r(RSt,"TFWav2Vec2Model"),RSt.forEach(t),NCr=r(qje," (Wav2Vec2 model)"),qje.forEach(t),qCr=i(D),TC=n(D,"LI",{});var jje=s(TC);$4e=n(jje,"STRONG",{});var PSt=s($4e);jCr=r(PSt,"xlm"),PSt.forEach(t),DCr=r(jje," \u2014 "),$J=n(jje,"A",{href:!0});var BSt=s($J);GCr=r(BSt,"TFXLMModel"),BSt.forEach(t),OCr=r(jje," (XLM model)"),jje.forEach(t),VCr=i(D),MC=n(D,"LI",{});var Dje=s(MC);k4e=n(Dje,"STRONG",{});var ISt=s(k4e);XCr=r(ISt,"xlm-roberta"),ISt.forEach(t),zCr=r(Dje," \u2014 "),kJ=n(Dje,"A",{href:!0});var NSt=s(kJ);WCr=r(NSt,"TFXLMRobertaModel"),NSt.forEach(t),QCr=r(Dje," (XLM-RoBERTa model)"),Dje.forEach(t),HCr=i(D),EC=n(D,"LI",{});var Gje=s(EC);S4e=n(Gje,"STRONG",{});var qSt=s(S4e);UCr=r(qSt,"xlnet"),qSt.forEach(t),JCr=r(Gje," \u2014 "),SJ=n(Gje,"A",{href:!0});var jSt=s(SJ);YCr=r(jSt,"TFXLNetModel"),jSt.forEach(t),KCr=r(Gje," (XLNet model)"),Gje.forEach(t),D.forEach(t),ZCr=i(Sl),T(CC.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),Kze=i(m),mc=n(m,"H2",{class:!0});var sHe=s(mc);wC=n(sHe,"A",{id:!0,class:!0,href:!0});var DSt=s(wC);R4e=n(DSt,"SPAN",{});var GSt=s(R4e);T(sx.$$.fragment,GSt),GSt.forEach(t),DSt.forEach(t),e5r=i(sHe),P4e=n(sHe,"SPAN",{});var OSt=s(P4e);o5r=r(OSt,"TFAutoModelForPreTraining"),OSt.forEach(t),sHe.forEach(t),Zze=i(m),tr=n(m,"DIV",{class:!0});var Rl=s(tr);T(lx.$$.fragment,Rl),r5r=i(Rl),fc=n(Rl,"P",{});var oae=s(fc);t5r=r(oae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RJ=n(oae,"A",{href:!0});var VSt=s(RJ);a5r=r(VSt,"from_pretrained()"),VSt.forEach(t),n5r=r(oae," class method or the "),PJ=n(oae,"A",{href:!0});var XSt=s(PJ);s5r=r(XSt,"from_config()"),XSt.forEach(t),l5r=r(oae,` class
method.`),oae.forEach(t),i5r=i(Rl),ix=n(Rl,"P",{});var lHe=s(ix);d5r=r(lHe,"This class cannot be instantiated directly using "),B4e=n(lHe,"CODE",{});var zSt=s(B4e);c5r=r(zSt,"__init__()"),zSt.forEach(t),m5r=r(lHe," (throws an error)."),lHe.forEach(t),f5r=i(Rl),Pt=n(Rl,"DIV",{class:!0});var uL=s(Pt);T(dx.$$.fragment,uL),g5r=i(uL),I4e=n(uL,"P",{});var WSt=s(I4e);h5r=r(WSt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WSt.forEach(t),u5r=i(uL),gc=n(uL,"P",{});var rae=s(gc);p5r=r(rae,`Note:
Loading a model from its configuration file does `),N4e=n(rae,"STRONG",{});var QSt=s(N4e);_5r=r(QSt,"not"),QSt.forEach(t),b5r=r(rae,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(rae,"A",{href:!0});var HSt=s(BJ);v5r=r(HSt,"from_pretrained()"),HSt.forEach(t),F5r=r(rae," to load the model weights."),rae.forEach(t),T5r=i(uL),T(AC.$$.fragment,uL),uL.forEach(t),M5r=i(Rl),kr=n(Rl,"DIV",{class:!0});var Pl=s(kr);T(cx.$$.fragment,Pl),E5r=i(Pl),q4e=n(Pl,"P",{});var USt=s(q4e);C5r=r(USt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),USt.forEach(t),w5r=i(Pl),ln=n(Pl,"P",{});var pL=s(ln);A5r=r(pL,"The model class to instantiate is selected based on the "),j4e=n(pL,"CODE",{});var JSt=s(j4e);L5r=r(JSt,"model_type"),JSt.forEach(t),y5r=r(pL,` property of the config object (either
passed as an argument or loaded from `),D4e=n(pL,"CODE",{});var YSt=s(D4e);x5r=r(YSt,"pretrained_model_name_or_path"),YSt.forEach(t),$5r=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G4e=n(pL,"CODE",{});var KSt=s(G4e);k5r=r(KSt,"pretrained_model_name_or_path"),KSt.forEach(t),S5r=r(pL,":"),pL.forEach(t),R5r=i(Pl),se=n(Pl,"UL",{});var le=s(se);LC=n(le,"LI",{});var Oje=s(LC);O4e=n(Oje,"STRONG",{});var ZSt=s(O4e);P5r=r(ZSt,"albert"),ZSt.forEach(t),B5r=r(Oje," \u2014 "),IJ=n(Oje,"A",{href:!0});var eRt=s(IJ);I5r=r(eRt,"TFAlbertForPreTraining"),eRt.forEach(t),N5r=r(Oje," (ALBERT model)"),Oje.forEach(t),q5r=i(le),yC=n(le,"LI",{});var Vje=s(yC);V4e=n(Vje,"STRONG",{});var oRt=s(V4e);j5r=r(oRt,"bart"),oRt.forEach(t),D5r=r(Vje," \u2014 "),NJ=n(Vje,"A",{href:!0});var rRt=s(NJ);G5r=r(rRt,"TFBartForConditionalGeneration"),rRt.forEach(t),O5r=r(Vje," (BART model)"),Vje.forEach(t),V5r=i(le),xC=n(le,"LI",{});var Xje=s(xC);X4e=n(Xje,"STRONG",{});var tRt=s(X4e);X5r=r(tRt,"bert"),tRt.forEach(t),z5r=r(Xje," \u2014 "),qJ=n(Xje,"A",{href:!0});var aRt=s(qJ);W5r=r(aRt,"TFBertForPreTraining"),aRt.forEach(t),Q5r=r(Xje," (BERT model)"),Xje.forEach(t),H5r=i(le),$C=n(le,"LI",{});var zje=s($C);z4e=n(zje,"STRONG",{});var nRt=s(z4e);U5r=r(nRt,"camembert"),nRt.forEach(t),J5r=r(zje," \u2014 "),jJ=n(zje,"A",{href:!0});var sRt=s(jJ);Y5r=r(sRt,"TFCamembertForMaskedLM"),sRt.forEach(t),K5r=r(zje," (CamemBERT model)"),zje.forEach(t),Z5r=i(le),kC=n(le,"LI",{});var Wje=s(kC);W4e=n(Wje,"STRONG",{});var lRt=s(W4e);e3r=r(lRt,"ctrl"),lRt.forEach(t),o3r=r(Wje," \u2014 "),DJ=n(Wje,"A",{href:!0});var iRt=s(DJ);r3r=r(iRt,"TFCTRLLMHeadModel"),iRt.forEach(t),t3r=r(Wje," (CTRL model)"),Wje.forEach(t),a3r=i(le),SC=n(le,"LI",{});var Qje=s(SC);Q4e=n(Qje,"STRONG",{});var dRt=s(Q4e);n3r=r(dRt,"distilbert"),dRt.forEach(t),s3r=r(Qje," \u2014 "),GJ=n(Qje,"A",{href:!0});var cRt=s(GJ);l3r=r(cRt,"TFDistilBertForMaskedLM"),cRt.forEach(t),i3r=r(Qje," (DistilBERT model)"),Qje.forEach(t),d3r=i(le),RC=n(le,"LI",{});var Hje=s(RC);H4e=n(Hje,"STRONG",{});var mRt=s(H4e);c3r=r(mRt,"electra"),mRt.forEach(t),m3r=r(Hje," \u2014 "),OJ=n(Hje,"A",{href:!0});var fRt=s(OJ);f3r=r(fRt,"TFElectraForPreTraining"),fRt.forEach(t),g3r=r(Hje," (ELECTRA model)"),Hje.forEach(t),h3r=i(le),PC=n(le,"LI",{});var Uje=s(PC);U4e=n(Uje,"STRONG",{});var gRt=s(U4e);u3r=r(gRt,"flaubert"),gRt.forEach(t),p3r=r(Uje," \u2014 "),VJ=n(Uje,"A",{href:!0});var hRt=s(VJ);_3r=r(hRt,"TFFlaubertWithLMHeadModel"),hRt.forEach(t),b3r=r(Uje," (FlauBERT model)"),Uje.forEach(t),v3r=i(le),BC=n(le,"LI",{});var Jje=s(BC);J4e=n(Jje,"STRONG",{});var uRt=s(J4e);F3r=r(uRt,"funnel"),uRt.forEach(t),T3r=r(Jje," \u2014 "),XJ=n(Jje,"A",{href:!0});var pRt=s(XJ);M3r=r(pRt,"TFFunnelForPreTraining"),pRt.forEach(t),E3r=r(Jje," (Funnel Transformer model)"),Jje.forEach(t),C3r=i(le),IC=n(le,"LI",{});var Yje=s(IC);Y4e=n(Yje,"STRONG",{});var _Rt=s(Y4e);w3r=r(_Rt,"gpt2"),_Rt.forEach(t),A3r=r(Yje," \u2014 "),zJ=n(Yje,"A",{href:!0});var bRt=s(zJ);L3r=r(bRt,"TFGPT2LMHeadModel"),bRt.forEach(t),y3r=r(Yje," (OpenAI GPT-2 model)"),Yje.forEach(t),x3r=i(le),NC=n(le,"LI",{});var Kje=s(NC);K4e=n(Kje,"STRONG",{});var vRt=s(K4e);$3r=r(vRt,"layoutlm"),vRt.forEach(t),k3r=r(Kje," \u2014 "),WJ=n(Kje,"A",{href:!0});var FRt=s(WJ);S3r=r(FRt,"TFLayoutLMForMaskedLM"),FRt.forEach(t),R3r=r(Kje," (LayoutLM model)"),Kje.forEach(t),P3r=i(le),qC=n(le,"LI",{});var Zje=s(qC);Z4e=n(Zje,"STRONG",{});var TRt=s(Z4e);B3r=r(TRt,"lxmert"),TRt.forEach(t),I3r=r(Zje," \u2014 "),QJ=n(Zje,"A",{href:!0});var MRt=s(QJ);N3r=r(MRt,"TFLxmertForPreTraining"),MRt.forEach(t),q3r=r(Zje," (LXMERT model)"),Zje.forEach(t),j3r=i(le),jC=n(le,"LI",{});var eDe=s(jC);eEe=n(eDe,"STRONG",{});var ERt=s(eEe);D3r=r(ERt,"mobilebert"),ERt.forEach(t),G3r=r(eDe," \u2014 "),HJ=n(eDe,"A",{href:!0});var CRt=s(HJ);O3r=r(CRt,"TFMobileBertForPreTraining"),CRt.forEach(t),V3r=r(eDe," (MobileBERT model)"),eDe.forEach(t),X3r=i(le),DC=n(le,"LI",{});var oDe=s(DC);oEe=n(oDe,"STRONG",{});var wRt=s(oEe);z3r=r(wRt,"mpnet"),wRt.forEach(t),W3r=r(oDe," \u2014 "),UJ=n(oDe,"A",{href:!0});var ARt=s(UJ);Q3r=r(ARt,"TFMPNetForMaskedLM"),ARt.forEach(t),H3r=r(oDe," (MPNet model)"),oDe.forEach(t),U3r=i(le),GC=n(le,"LI",{});var rDe=s(GC);rEe=n(rDe,"STRONG",{});var LRt=s(rEe);J3r=r(LRt,"openai-gpt"),LRt.forEach(t),Y3r=r(rDe," \u2014 "),JJ=n(rDe,"A",{href:!0});var yRt=s(JJ);K3r=r(yRt,"TFOpenAIGPTLMHeadModel"),yRt.forEach(t),Z3r=r(rDe," (OpenAI GPT model)"),rDe.forEach(t),e0r=i(le),OC=n(le,"LI",{});var tDe=s(OC);tEe=n(tDe,"STRONG",{});var xRt=s(tEe);o0r=r(xRt,"roberta"),xRt.forEach(t),r0r=r(tDe," \u2014 "),YJ=n(tDe,"A",{href:!0});var $Rt=s(YJ);t0r=r($Rt,"TFRobertaForMaskedLM"),$Rt.forEach(t),a0r=r(tDe," (RoBERTa model)"),tDe.forEach(t),n0r=i(le),VC=n(le,"LI",{});var aDe=s(VC);aEe=n(aDe,"STRONG",{});var kRt=s(aEe);s0r=r(kRt,"t5"),kRt.forEach(t),l0r=r(aDe," \u2014 "),KJ=n(aDe,"A",{href:!0});var SRt=s(KJ);i0r=r(SRt,"TFT5ForConditionalGeneration"),SRt.forEach(t),d0r=r(aDe," (T5 model)"),aDe.forEach(t),c0r=i(le),XC=n(le,"LI",{});var nDe=s(XC);nEe=n(nDe,"STRONG",{});var RRt=s(nEe);m0r=r(RRt,"tapas"),RRt.forEach(t),f0r=r(nDe," \u2014 "),ZJ=n(nDe,"A",{href:!0});var PRt=s(ZJ);g0r=r(PRt,"TFTapasForMaskedLM"),PRt.forEach(t),h0r=r(nDe," (TAPAS model)"),nDe.forEach(t),u0r=i(le),zC=n(le,"LI",{});var sDe=s(zC);sEe=n(sDe,"STRONG",{});var BRt=s(sEe);p0r=r(BRt,"transfo-xl"),BRt.forEach(t),_0r=r(sDe," \u2014 "),eY=n(sDe,"A",{href:!0});var IRt=s(eY);b0r=r(IRt,"TFTransfoXLLMHeadModel"),IRt.forEach(t),v0r=r(sDe," (Transformer-XL model)"),sDe.forEach(t),F0r=i(le),WC=n(le,"LI",{});var lDe=s(WC);lEe=n(lDe,"STRONG",{});var NRt=s(lEe);T0r=r(NRt,"vit_mae"),NRt.forEach(t),M0r=r(lDe," \u2014 "),oY=n(lDe,"A",{href:!0});var qRt=s(oY);E0r=r(qRt,"TFViTMAEForPreTraining"),qRt.forEach(t),C0r=r(lDe," (ViTMAE model)"),lDe.forEach(t),w0r=i(le),QC=n(le,"LI",{});var iDe=s(QC);iEe=n(iDe,"STRONG",{});var jRt=s(iEe);A0r=r(jRt,"xlm"),jRt.forEach(t),L0r=r(iDe," \u2014 "),rY=n(iDe,"A",{href:!0});var DRt=s(rY);y0r=r(DRt,"TFXLMWithLMHeadModel"),DRt.forEach(t),x0r=r(iDe," (XLM model)"),iDe.forEach(t),$0r=i(le),HC=n(le,"LI",{});var dDe=s(HC);dEe=n(dDe,"STRONG",{});var GRt=s(dEe);k0r=r(GRt,"xlm-roberta"),GRt.forEach(t),S0r=r(dDe," \u2014 "),tY=n(dDe,"A",{href:!0});var ORt=s(tY);R0r=r(ORt,"TFXLMRobertaForMaskedLM"),ORt.forEach(t),P0r=r(dDe," (XLM-RoBERTa model)"),dDe.forEach(t),B0r=i(le),UC=n(le,"LI",{});var cDe=s(UC);cEe=n(cDe,"STRONG",{});var VRt=s(cEe);I0r=r(VRt,"xlnet"),VRt.forEach(t),N0r=r(cDe," \u2014 "),aY=n(cDe,"A",{href:!0});var XRt=s(aY);q0r=r(XRt,"TFXLNetLMHeadModel"),XRt.forEach(t),j0r=r(cDe," (XLNet model)"),cDe.forEach(t),le.forEach(t),D0r=i(Pl),T(JC.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),eWe=i(m),hc=n(m,"H2",{class:!0});var iHe=s(hc);YC=n(iHe,"A",{id:!0,class:!0,href:!0});var zRt=s(YC);mEe=n(zRt,"SPAN",{});var WRt=s(mEe);T(mx.$$.fragment,WRt),WRt.forEach(t),zRt.forEach(t),G0r=i(iHe),fEe=n(iHe,"SPAN",{});var QRt=s(fEe);O0r=r(QRt,"TFAutoModelForCausalLM"),QRt.forEach(t),iHe.forEach(t),oWe=i(m),ar=n(m,"DIV",{class:!0});var Bl=s(ar);T(fx.$$.fragment,Bl),V0r=i(Bl),uc=n(Bl,"P",{});var tae=s(uc);X0r=r(tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),nY=n(tae,"A",{href:!0});var HRt=s(nY);z0r=r(HRt,"from_pretrained()"),HRt.forEach(t),W0r=r(tae," class method or the "),sY=n(tae,"A",{href:!0});var URt=s(sY);Q0r=r(URt,"from_config()"),URt.forEach(t),H0r=r(tae,` class
method.`),tae.forEach(t),U0r=i(Bl),gx=n(Bl,"P",{});var dHe=s(gx);J0r=r(dHe,"This class cannot be instantiated directly using "),gEe=n(dHe,"CODE",{});var JRt=s(gEe);Y0r=r(JRt,"__init__()"),JRt.forEach(t),K0r=r(dHe," (throws an error)."),dHe.forEach(t),Z0r=i(Bl),Bt=n(Bl,"DIV",{class:!0});var _L=s(Bt);T(hx.$$.fragment,_L),ewr=i(_L),hEe=n(_L,"P",{});var YRt=s(hEe);owr=r(YRt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),YRt.forEach(t),rwr=i(_L),pc=n(_L,"P",{});var aae=s(pc);twr=r(aae,`Note:
Loading a model from its configuration file does `),uEe=n(aae,"STRONG",{});var KRt=s(uEe);awr=r(KRt,"not"),KRt.forEach(t),nwr=r(aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(aae,"A",{href:!0});var ZRt=s(lY);swr=r(ZRt,"from_pretrained()"),ZRt.forEach(t),lwr=r(aae," to load the model weights."),aae.forEach(t),iwr=i(_L),T(KC.$$.fragment,_L),_L.forEach(t),dwr=i(Bl),Sr=n(Bl,"DIV",{class:!0});var Il=s(Sr);T(ux.$$.fragment,Il),cwr=i(Il),pEe=n(Il,"P",{});var ePt=s(pEe);mwr=r(ePt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ePt.forEach(t),fwr=i(Il),dn=n(Il,"P",{});var bL=s(dn);gwr=r(bL,"The model class to instantiate is selected based on the "),_Ee=n(bL,"CODE",{});var oPt=s(_Ee);hwr=r(oPt,"model_type"),oPt.forEach(t),uwr=r(bL,` property of the config object (either
passed as an argument or loaded from `),bEe=n(bL,"CODE",{});var rPt=s(bEe);pwr=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),_wr=r(bL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=n(bL,"CODE",{});var tPt=s(vEe);bwr=r(tPt,"pretrained_model_name_or_path"),tPt.forEach(t),vwr=r(bL,":"),bL.forEach(t),Fwr=i(Il),Me=n(Il,"UL",{});var Ce=s(Me);ZC=n(Ce,"LI",{});var mDe=s(ZC);FEe=n(mDe,"STRONG",{});var aPt=s(FEe);Twr=r(aPt,"bert"),aPt.forEach(t),Mwr=r(mDe," \u2014 "),iY=n(mDe,"A",{href:!0});var nPt=s(iY);Ewr=r(nPt,"TFBertLMHeadModel"),nPt.forEach(t),Cwr=r(mDe," (BERT model)"),mDe.forEach(t),wwr=i(Ce),e5=n(Ce,"LI",{});var fDe=s(e5);TEe=n(fDe,"STRONG",{});var sPt=s(TEe);Awr=r(sPt,"camembert"),sPt.forEach(t),Lwr=r(fDe," \u2014 "),dY=n(fDe,"A",{href:!0});var lPt=s(dY);ywr=r(lPt,"TFCamembertForCausalLM"),lPt.forEach(t),xwr=r(fDe," (CamemBERT model)"),fDe.forEach(t),$wr=i(Ce),o5=n(Ce,"LI",{});var gDe=s(o5);MEe=n(gDe,"STRONG",{});var iPt=s(MEe);kwr=r(iPt,"ctrl"),iPt.forEach(t),Swr=r(gDe," \u2014 "),cY=n(gDe,"A",{href:!0});var dPt=s(cY);Rwr=r(dPt,"TFCTRLLMHeadModel"),dPt.forEach(t),Pwr=r(gDe," (CTRL model)"),gDe.forEach(t),Bwr=i(Ce),r5=n(Ce,"LI",{});var hDe=s(r5);EEe=n(hDe,"STRONG",{});var cPt=s(EEe);Iwr=r(cPt,"gpt2"),cPt.forEach(t),Nwr=r(hDe," \u2014 "),mY=n(hDe,"A",{href:!0});var mPt=s(mY);qwr=r(mPt,"TFGPT2LMHeadModel"),mPt.forEach(t),jwr=r(hDe," (OpenAI GPT-2 model)"),hDe.forEach(t),Dwr=i(Ce),t5=n(Ce,"LI",{});var uDe=s(t5);CEe=n(uDe,"STRONG",{});var fPt=s(CEe);Gwr=r(fPt,"gptj"),fPt.forEach(t),Owr=r(uDe," \u2014 "),fY=n(uDe,"A",{href:!0});var gPt=s(fY);Vwr=r(gPt,"TFGPTJForCausalLM"),gPt.forEach(t),Xwr=r(uDe," (GPT-J model)"),uDe.forEach(t),zwr=i(Ce),a5=n(Ce,"LI",{});var pDe=s(a5);wEe=n(pDe,"STRONG",{});var hPt=s(wEe);Wwr=r(hPt,"openai-gpt"),hPt.forEach(t),Qwr=r(pDe," \u2014 "),gY=n(pDe,"A",{href:!0});var uPt=s(gY);Hwr=r(uPt,"TFOpenAIGPTLMHeadModel"),uPt.forEach(t),Uwr=r(pDe," (OpenAI GPT model)"),pDe.forEach(t),Jwr=i(Ce),n5=n(Ce,"LI",{});var _De=s(n5);AEe=n(_De,"STRONG",{});var pPt=s(AEe);Ywr=r(pPt,"opt"),pPt.forEach(t),Kwr=r(_De," \u2014 "),hY=n(_De,"A",{href:!0});var _Pt=s(hY);Zwr=r(_Pt,"TFOPTForCausalLM"),_Pt.forEach(t),eAr=r(_De," (OPT model)"),_De.forEach(t),oAr=i(Ce),s5=n(Ce,"LI",{});var bDe=s(s5);LEe=n(bDe,"STRONG",{});var bPt=s(LEe);rAr=r(bPt,"rembert"),bPt.forEach(t),tAr=r(bDe," \u2014 "),uY=n(bDe,"A",{href:!0});var vPt=s(uY);aAr=r(vPt,"TFRemBertForCausalLM"),vPt.forEach(t),nAr=r(bDe," (RemBERT model)"),bDe.forEach(t),sAr=i(Ce),l5=n(Ce,"LI",{});var vDe=s(l5);yEe=n(vDe,"STRONG",{});var FPt=s(yEe);lAr=r(FPt,"roberta"),FPt.forEach(t),iAr=r(vDe," \u2014 "),pY=n(vDe,"A",{href:!0});var TPt=s(pY);dAr=r(TPt,"TFRobertaForCausalLM"),TPt.forEach(t),cAr=r(vDe," (RoBERTa model)"),vDe.forEach(t),mAr=i(Ce),i5=n(Ce,"LI",{});var FDe=s(i5);xEe=n(FDe,"STRONG",{});var MPt=s(xEe);fAr=r(MPt,"roformer"),MPt.forEach(t),gAr=r(FDe," \u2014 "),_Y=n(FDe,"A",{href:!0});var EPt=s(_Y);hAr=r(EPt,"TFRoFormerForCausalLM"),EPt.forEach(t),uAr=r(FDe," (RoFormer model)"),FDe.forEach(t),pAr=i(Ce),d5=n(Ce,"LI",{});var TDe=s(d5);$Ee=n(TDe,"STRONG",{});var CPt=s($Ee);_Ar=r(CPt,"transfo-xl"),CPt.forEach(t),bAr=r(TDe," \u2014 "),bY=n(TDe,"A",{href:!0});var wPt=s(bY);vAr=r(wPt,"TFTransfoXLLMHeadModel"),wPt.forEach(t),FAr=r(TDe," (Transformer-XL model)"),TDe.forEach(t),TAr=i(Ce),c5=n(Ce,"LI",{});var MDe=s(c5);kEe=n(MDe,"STRONG",{});var APt=s(kEe);MAr=r(APt,"xlm"),APt.forEach(t),EAr=r(MDe," \u2014 "),vY=n(MDe,"A",{href:!0});var LPt=s(vY);CAr=r(LPt,"TFXLMWithLMHeadModel"),LPt.forEach(t),wAr=r(MDe," (XLM model)"),MDe.forEach(t),AAr=i(Ce),m5=n(Ce,"LI",{});var EDe=s(m5);SEe=n(EDe,"STRONG",{});var yPt=s(SEe);LAr=r(yPt,"xlnet"),yPt.forEach(t),yAr=r(EDe," \u2014 "),FY=n(EDe,"A",{href:!0});var xPt=s(FY);xAr=r(xPt,"TFXLNetLMHeadModel"),xPt.forEach(t),$Ar=r(EDe," (XLNet model)"),EDe.forEach(t),Ce.forEach(t),kAr=i(Il),T(f5.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),rWe=i(m),_c=n(m,"H2",{class:!0});var cHe=s(_c);g5=n(cHe,"A",{id:!0,class:!0,href:!0});var $Pt=s(g5);REe=n($Pt,"SPAN",{});var kPt=s(REe);T(px.$$.fragment,kPt),kPt.forEach(t),$Pt.forEach(t),SAr=i(cHe),PEe=n(cHe,"SPAN",{});var SPt=s(PEe);RAr=r(SPt,"TFAutoModelForImageClassification"),SPt.forEach(t),cHe.forEach(t),tWe=i(m),nr=n(m,"DIV",{class:!0});var Nl=s(nr);T(_x.$$.fragment,Nl),PAr=i(Nl),bc=n(Nl,"P",{});var nae=s(bc);BAr=r(nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TY=n(nae,"A",{href:!0});var RPt=s(TY);IAr=r(RPt,"from_pretrained()"),RPt.forEach(t),NAr=r(nae," class method or the "),MY=n(nae,"A",{href:!0});var PPt=s(MY);qAr=r(PPt,"from_config()"),PPt.forEach(t),jAr=r(nae,` class
method.`),nae.forEach(t),DAr=i(Nl),bx=n(Nl,"P",{});var mHe=s(bx);GAr=r(mHe,"This class cannot be instantiated directly using "),BEe=n(mHe,"CODE",{});var BPt=s(BEe);OAr=r(BPt,"__init__()"),BPt.forEach(t),VAr=r(mHe," (throws an error)."),mHe.forEach(t),XAr=i(Nl),It=n(Nl,"DIV",{class:!0});var vL=s(It);T(vx.$$.fragment,vL),zAr=i(vL),IEe=n(vL,"P",{});var IPt=s(IEe);WAr=r(IPt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),IPt.forEach(t),QAr=i(vL),vc=n(vL,"P",{});var sae=s(vc);HAr=r(sae,`Note:
Loading a model from its configuration file does `),NEe=n(sae,"STRONG",{});var NPt=s(NEe);UAr=r(NPt,"not"),NPt.forEach(t),JAr=r(sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(sae,"A",{href:!0});var qPt=s(EY);YAr=r(qPt,"from_pretrained()"),qPt.forEach(t),KAr=r(sae," to load the model weights."),sae.forEach(t),ZAr=i(vL),T(h5.$$.fragment,vL),vL.forEach(t),e6r=i(Nl),Rr=n(Nl,"DIV",{class:!0});var ql=s(Rr);T(Fx.$$.fragment,ql),o6r=i(ql),qEe=n(ql,"P",{});var jPt=s(qEe);r6r=r(jPt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jPt.forEach(t),t6r=i(ql),cn=n(ql,"P",{});var FL=s(cn);a6r=r(FL,"The model class to instantiate is selected based on the "),jEe=n(FL,"CODE",{});var DPt=s(jEe);n6r=r(DPt,"model_type"),DPt.forEach(t),s6r=r(FL,` property of the config object (either
passed as an argument or loaded from `),DEe=n(FL,"CODE",{});var GPt=s(DEe);l6r=r(GPt,"pretrained_model_name_or_path"),GPt.forEach(t),i6r=r(FL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GEe=n(FL,"CODE",{});var OPt=s(GEe);d6r=r(OPt,"pretrained_model_name_or_path"),OPt.forEach(t),c6r=r(FL,":"),FL.forEach(t),m6r=i(ql),Ve=n(ql,"UL",{});var Mo=s(Ve);u5=n(Mo,"LI",{});var CDe=s(u5);OEe=n(CDe,"STRONG",{});var VPt=s(OEe);f6r=r(VPt,"convnext"),VPt.forEach(t),g6r=r(CDe," \u2014 "),CY=n(CDe,"A",{href:!0});var XPt=s(CY);h6r=r(XPt,"TFConvNextForImageClassification"),XPt.forEach(t),u6r=r(CDe," (ConvNeXT model)"),CDe.forEach(t),p6r=i(Mo),p5=n(Mo,"LI",{});var wDe=s(p5);VEe=n(wDe,"STRONG",{});var zPt=s(VEe);_6r=r(zPt,"data2vec-vision"),zPt.forEach(t),b6r=r(wDe," \u2014 "),wY=n(wDe,"A",{href:!0});var WPt=s(wY);v6r=r(WPt,"TFData2VecVisionForImageClassification"),WPt.forEach(t),F6r=r(wDe," (Data2VecVision model)"),wDe.forEach(t),T6r=i(Mo),Zs=n(Mo,"LI",{});var QS=s(Zs);XEe=n(QS,"STRONG",{});var QPt=s(XEe);M6r=r(QPt,"deit"),QPt.forEach(t),E6r=r(QS," \u2014 "),AY=n(QS,"A",{href:!0});var HPt=s(AY);C6r=r(HPt,"TFDeiTForImageClassification"),HPt.forEach(t),w6r=r(QS," or "),LY=n(QS,"A",{href:!0});var UPt=s(LY);A6r=r(UPt,"TFDeiTForImageClassificationWithTeacher"),UPt.forEach(t),L6r=r(QS," (DeiT model)"),QS.forEach(t),y6r=i(Mo),_5=n(Mo,"LI",{});var ADe=s(_5);zEe=n(ADe,"STRONG",{});var JPt=s(zEe);x6r=r(JPt,"regnet"),JPt.forEach(t),$6r=r(ADe," \u2014 "),yY=n(ADe,"A",{href:!0});var YPt=s(yY);k6r=r(YPt,"TFRegNetForImageClassification"),YPt.forEach(t),S6r=r(ADe," (RegNet model)"),ADe.forEach(t),R6r=i(Mo),b5=n(Mo,"LI",{});var LDe=s(b5);WEe=n(LDe,"STRONG",{});var KPt=s(WEe);P6r=r(KPt,"resnet"),KPt.forEach(t),B6r=r(LDe," \u2014 "),xY=n(LDe,"A",{href:!0});var ZPt=s(xY);I6r=r(ZPt,"TFResNetForImageClassification"),ZPt.forEach(t),N6r=r(LDe," (ResNet model)"),LDe.forEach(t),q6r=i(Mo),v5=n(Mo,"LI",{});var yDe=s(v5);QEe=n(yDe,"STRONG",{});var eBt=s(QEe);j6r=r(eBt,"segformer"),eBt.forEach(t),D6r=r(yDe," \u2014 "),$Y=n(yDe,"A",{href:!0});var oBt=s($Y);G6r=r(oBt,"TFSegformerForImageClassification"),oBt.forEach(t),O6r=r(yDe," (SegFormer model)"),yDe.forEach(t),V6r=i(Mo),F5=n(Mo,"LI",{});var xDe=s(F5);HEe=n(xDe,"STRONG",{});var rBt=s(HEe);X6r=r(rBt,"swin"),rBt.forEach(t),z6r=r(xDe," \u2014 "),kY=n(xDe,"A",{href:!0});var tBt=s(kY);W6r=r(tBt,"TFSwinForImageClassification"),tBt.forEach(t),Q6r=r(xDe," (Swin Transformer model)"),xDe.forEach(t),H6r=i(Mo),T5=n(Mo,"LI",{});var $De=s(T5);UEe=n($De,"STRONG",{});var aBt=s(UEe);U6r=r(aBt,"vit"),aBt.forEach(t),J6r=r($De," \u2014 "),SY=n($De,"A",{href:!0});var nBt=s(SY);Y6r=r(nBt,"TFViTForImageClassification"),nBt.forEach(t),K6r=r($De," (ViT model)"),$De.forEach(t),Mo.forEach(t),Z6r=i(ql),T(M5.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),aWe=i(m),Fc=n(m,"H2",{class:!0});var fHe=s(Fc);E5=n(fHe,"A",{id:!0,class:!0,href:!0});var sBt=s(E5);JEe=n(sBt,"SPAN",{});var lBt=s(JEe);T(Tx.$$.fragment,lBt),lBt.forEach(t),sBt.forEach(t),e7r=i(fHe),YEe=n(fHe,"SPAN",{});var iBt=s(YEe);o7r=r(iBt,"TFAutoModelForMaskedLM"),iBt.forEach(t),fHe.forEach(t),nWe=i(m),sr=n(m,"DIV",{class:!0});var jl=s(sr);T(Mx.$$.fragment,jl),r7r=i(jl),Tc=n(jl,"P",{});var lae=s(Tc);t7r=r(lae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RY=n(lae,"A",{href:!0});var dBt=s(RY);a7r=r(dBt,"from_pretrained()"),dBt.forEach(t),n7r=r(lae," class method or the "),PY=n(lae,"A",{href:!0});var cBt=s(PY);s7r=r(cBt,"from_config()"),cBt.forEach(t),l7r=r(lae,` class
method.`),lae.forEach(t),i7r=i(jl),Ex=n(jl,"P",{});var gHe=s(Ex);d7r=r(gHe,"This class cannot be instantiated directly using "),KEe=n(gHe,"CODE",{});var mBt=s(KEe);c7r=r(mBt,"__init__()"),mBt.forEach(t),m7r=r(gHe," (throws an error)."),gHe.forEach(t),f7r=i(jl),Nt=n(jl,"DIV",{class:!0});var TL=s(Nt);T(Cx.$$.fragment,TL),g7r=i(TL),ZEe=n(TL,"P",{});var fBt=s(ZEe);h7r=r(fBt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fBt.forEach(t),u7r=i(TL),Mc=n(TL,"P",{});var iae=s(Mc);p7r=r(iae,`Note:
Loading a model from its configuration file does `),eCe=n(iae,"STRONG",{});var gBt=s(eCe);_7r=r(gBt,"not"),gBt.forEach(t),b7r=r(iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),BY=n(iae,"A",{href:!0});var hBt=s(BY);v7r=r(hBt,"from_pretrained()"),hBt.forEach(t),F7r=r(iae," to load the model weights."),iae.forEach(t),T7r=i(TL),T(C5.$$.fragment,TL),TL.forEach(t),M7r=i(jl),Pr=n(jl,"DIV",{class:!0});var Dl=s(Pr);T(wx.$$.fragment,Dl),E7r=i(Dl),oCe=n(Dl,"P",{});var uBt=s(oCe);C7r=r(uBt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uBt.forEach(t),w7r=i(Dl),mn=n(Dl,"P",{});var ML=s(mn);A7r=r(ML,"The model class to instantiate is selected based on the "),rCe=n(ML,"CODE",{});var pBt=s(rCe);L7r=r(pBt,"model_type"),pBt.forEach(t),y7r=r(ML,` property of the config object (either
passed as an argument or loaded from `),tCe=n(ML,"CODE",{});var _Bt=s(tCe);x7r=r(_Bt,"pretrained_model_name_or_path"),_Bt.forEach(t),$7r=r(ML,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aCe=n(ML,"CODE",{});var bBt=s(aCe);k7r=r(bBt,"pretrained_model_name_or_path"),bBt.forEach(t),S7r=r(ML,":"),ML.forEach(t),R7r=i(Dl),ie=n(Dl,"UL",{});var ge=s(ie);w5=n(ge,"LI",{});var kDe=s(w5);nCe=n(kDe,"STRONG",{});var vBt=s(nCe);P7r=r(vBt,"albert"),vBt.forEach(t),B7r=r(kDe," \u2014 "),IY=n(kDe,"A",{href:!0});var FBt=s(IY);I7r=r(FBt,"TFAlbertForMaskedLM"),FBt.forEach(t),N7r=r(kDe," (ALBERT model)"),kDe.forEach(t),q7r=i(ge),A5=n(ge,"LI",{});var SDe=s(A5);sCe=n(SDe,"STRONG",{});var TBt=s(sCe);j7r=r(TBt,"bert"),TBt.forEach(t),D7r=r(SDe," \u2014 "),NY=n(SDe,"A",{href:!0});var MBt=s(NY);G7r=r(MBt,"TFBertForMaskedLM"),MBt.forEach(t),O7r=r(SDe," (BERT model)"),SDe.forEach(t),V7r=i(ge),L5=n(ge,"LI",{});var RDe=s(L5);lCe=n(RDe,"STRONG",{});var EBt=s(lCe);X7r=r(EBt,"camembert"),EBt.forEach(t),z7r=r(RDe," \u2014 "),qY=n(RDe,"A",{href:!0});var CBt=s(qY);W7r=r(CBt,"TFCamembertForMaskedLM"),CBt.forEach(t),Q7r=r(RDe," (CamemBERT model)"),RDe.forEach(t),H7r=i(ge),y5=n(ge,"LI",{});var PDe=s(y5);iCe=n(PDe,"STRONG",{});var wBt=s(iCe);U7r=r(wBt,"convbert"),wBt.forEach(t),J7r=r(PDe," \u2014 "),jY=n(PDe,"A",{href:!0});var ABt=s(jY);Y7r=r(ABt,"TFConvBertForMaskedLM"),ABt.forEach(t),K7r=r(PDe," (ConvBERT model)"),PDe.forEach(t),Z7r=i(ge),x5=n(ge,"LI",{});var BDe=s(x5);dCe=n(BDe,"STRONG",{});var LBt=s(dCe);eLr=r(LBt,"deberta"),LBt.forEach(t),oLr=r(BDe," \u2014 "),DY=n(BDe,"A",{href:!0});var yBt=s(DY);rLr=r(yBt,"TFDebertaForMaskedLM"),yBt.forEach(t),tLr=r(BDe," (DeBERTa model)"),BDe.forEach(t),aLr=i(ge),$5=n(ge,"LI",{});var IDe=s($5);cCe=n(IDe,"STRONG",{});var xBt=s(cCe);nLr=r(xBt,"deberta-v2"),xBt.forEach(t),sLr=r(IDe," \u2014 "),GY=n(IDe,"A",{href:!0});var $Bt=s(GY);lLr=r($Bt,"TFDebertaV2ForMaskedLM"),$Bt.forEach(t),iLr=r(IDe," (DeBERTa-v2 model)"),IDe.forEach(t),dLr=i(ge),k5=n(ge,"LI",{});var NDe=s(k5);mCe=n(NDe,"STRONG",{});var kBt=s(mCe);cLr=r(kBt,"distilbert"),kBt.forEach(t),mLr=r(NDe," \u2014 "),OY=n(NDe,"A",{href:!0});var SBt=s(OY);fLr=r(SBt,"TFDistilBertForMaskedLM"),SBt.forEach(t),gLr=r(NDe," (DistilBERT model)"),NDe.forEach(t),hLr=i(ge),S5=n(ge,"LI",{});var qDe=s(S5);fCe=n(qDe,"STRONG",{});var RBt=s(fCe);uLr=r(RBt,"electra"),RBt.forEach(t),pLr=r(qDe," \u2014 "),VY=n(qDe,"A",{href:!0});var PBt=s(VY);_Lr=r(PBt,"TFElectraForMaskedLM"),PBt.forEach(t),bLr=r(qDe," (ELECTRA model)"),qDe.forEach(t),vLr=i(ge),R5=n(ge,"LI",{});var jDe=s(R5);gCe=n(jDe,"STRONG",{});var BBt=s(gCe);FLr=r(BBt,"flaubert"),BBt.forEach(t),TLr=r(jDe," \u2014 "),XY=n(jDe,"A",{href:!0});var IBt=s(XY);MLr=r(IBt,"TFFlaubertWithLMHeadModel"),IBt.forEach(t),ELr=r(jDe," (FlauBERT model)"),jDe.forEach(t),CLr=i(ge),P5=n(ge,"LI",{});var DDe=s(P5);hCe=n(DDe,"STRONG",{});var NBt=s(hCe);wLr=r(NBt,"funnel"),NBt.forEach(t),ALr=r(DDe," \u2014 "),zY=n(DDe,"A",{href:!0});var qBt=s(zY);LLr=r(qBt,"TFFunnelForMaskedLM"),qBt.forEach(t),yLr=r(DDe," (Funnel Transformer model)"),DDe.forEach(t),xLr=i(ge),B5=n(ge,"LI",{});var GDe=s(B5);uCe=n(GDe,"STRONG",{});var jBt=s(uCe);$Lr=r(jBt,"layoutlm"),jBt.forEach(t),kLr=r(GDe," \u2014 "),WY=n(GDe,"A",{href:!0});var DBt=s(WY);SLr=r(DBt,"TFLayoutLMForMaskedLM"),DBt.forEach(t),RLr=r(GDe," (LayoutLM model)"),GDe.forEach(t),PLr=i(ge),I5=n(ge,"LI",{});var ODe=s(I5);pCe=n(ODe,"STRONG",{});var GBt=s(pCe);BLr=r(GBt,"longformer"),GBt.forEach(t),ILr=r(ODe," \u2014 "),QY=n(ODe,"A",{href:!0});var OBt=s(QY);NLr=r(OBt,"TFLongformerForMaskedLM"),OBt.forEach(t),qLr=r(ODe," (Longformer model)"),ODe.forEach(t),jLr=i(ge),N5=n(ge,"LI",{});var VDe=s(N5);_Ce=n(VDe,"STRONG",{});var VBt=s(_Ce);DLr=r(VBt,"mobilebert"),VBt.forEach(t),GLr=r(VDe," \u2014 "),HY=n(VDe,"A",{href:!0});var XBt=s(HY);OLr=r(XBt,"TFMobileBertForMaskedLM"),XBt.forEach(t),VLr=r(VDe," (MobileBERT model)"),VDe.forEach(t),XLr=i(ge),q5=n(ge,"LI",{});var XDe=s(q5);bCe=n(XDe,"STRONG",{});var zBt=s(bCe);zLr=r(zBt,"mpnet"),zBt.forEach(t),WLr=r(XDe," \u2014 "),UY=n(XDe,"A",{href:!0});var WBt=s(UY);QLr=r(WBt,"TFMPNetForMaskedLM"),WBt.forEach(t),HLr=r(XDe," (MPNet model)"),XDe.forEach(t),ULr=i(ge),j5=n(ge,"LI",{});var zDe=s(j5);vCe=n(zDe,"STRONG",{});var QBt=s(vCe);JLr=r(QBt,"rembert"),QBt.forEach(t),YLr=r(zDe," \u2014 "),JY=n(zDe,"A",{href:!0});var HBt=s(JY);KLr=r(HBt,"TFRemBertForMaskedLM"),HBt.forEach(t),ZLr=r(zDe," (RemBERT model)"),zDe.forEach(t),eyr=i(ge),D5=n(ge,"LI",{});var WDe=s(D5);FCe=n(WDe,"STRONG",{});var UBt=s(FCe);oyr=r(UBt,"roberta"),UBt.forEach(t),ryr=r(WDe," \u2014 "),YY=n(WDe,"A",{href:!0});var JBt=s(YY);tyr=r(JBt,"TFRobertaForMaskedLM"),JBt.forEach(t),ayr=r(WDe," (RoBERTa model)"),WDe.forEach(t),nyr=i(ge),G5=n(ge,"LI",{});var QDe=s(G5);TCe=n(QDe,"STRONG",{});var YBt=s(TCe);syr=r(YBt,"roformer"),YBt.forEach(t),lyr=r(QDe," \u2014 "),KY=n(QDe,"A",{href:!0});var KBt=s(KY);iyr=r(KBt,"TFRoFormerForMaskedLM"),KBt.forEach(t),dyr=r(QDe," (RoFormer model)"),QDe.forEach(t),cyr=i(ge),O5=n(ge,"LI",{});var HDe=s(O5);MCe=n(HDe,"STRONG",{});var ZBt=s(MCe);myr=r(ZBt,"tapas"),ZBt.forEach(t),fyr=r(HDe," \u2014 "),ZY=n(HDe,"A",{href:!0});var eIt=s(ZY);gyr=r(eIt,"TFTapasForMaskedLM"),eIt.forEach(t),hyr=r(HDe," (TAPAS model)"),HDe.forEach(t),uyr=i(ge),V5=n(ge,"LI",{});var UDe=s(V5);ECe=n(UDe,"STRONG",{});var oIt=s(ECe);pyr=r(oIt,"xlm"),oIt.forEach(t),_yr=r(UDe," \u2014 "),eK=n(UDe,"A",{href:!0});var rIt=s(eK);byr=r(rIt,"TFXLMWithLMHeadModel"),rIt.forEach(t),vyr=r(UDe," (XLM model)"),UDe.forEach(t),Fyr=i(ge),X5=n(ge,"LI",{});var JDe=s(X5);CCe=n(JDe,"STRONG",{});var tIt=s(CCe);Tyr=r(tIt,"xlm-roberta"),tIt.forEach(t),Myr=r(JDe," \u2014 "),oK=n(JDe,"A",{href:!0});var aIt=s(oK);Eyr=r(aIt,"TFXLMRobertaForMaskedLM"),aIt.forEach(t),Cyr=r(JDe," (XLM-RoBERTa model)"),JDe.forEach(t),ge.forEach(t),wyr=i(Dl),T(z5.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),sWe=i(m),Ec=n(m,"H2",{class:!0});var hHe=s(Ec);W5=n(hHe,"A",{id:!0,class:!0,href:!0});var nIt=s(W5);wCe=n(nIt,"SPAN",{});var sIt=s(wCe);T(Ax.$$.fragment,sIt),sIt.forEach(t),nIt.forEach(t),Ayr=i(hHe),ACe=n(hHe,"SPAN",{});var lIt=s(ACe);Lyr=r(lIt,"TFAutoModelForSeq2SeqLM"),lIt.forEach(t),hHe.forEach(t),lWe=i(m),lr=n(m,"DIV",{class:!0});var Gl=s(lr);T(Lx.$$.fragment,Gl),yyr=i(Gl),Cc=n(Gl,"P",{});var dae=s(Cc);xyr=r(dae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rK=n(dae,"A",{href:!0});var iIt=s(rK);$yr=r(iIt,"from_pretrained()"),iIt.forEach(t),kyr=r(dae," class method or the "),tK=n(dae,"A",{href:!0});var dIt=s(tK);Syr=r(dIt,"from_config()"),dIt.forEach(t),Ryr=r(dae,` class
method.`),dae.forEach(t),Pyr=i(Gl),yx=n(Gl,"P",{});var uHe=s(yx);Byr=r(uHe,"This class cannot be instantiated directly using "),LCe=n(uHe,"CODE",{});var cIt=s(LCe);Iyr=r(cIt,"__init__()"),cIt.forEach(t),Nyr=r(uHe," (throws an error)."),uHe.forEach(t),qyr=i(Gl),qt=n(Gl,"DIV",{class:!0});var EL=s(qt);T(xx.$$.fragment,EL),jyr=i(EL),yCe=n(EL,"P",{});var mIt=s(yCe);Dyr=r(mIt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),mIt.forEach(t),Gyr=i(EL),wc=n(EL,"P",{});var cae=s(wc);Oyr=r(cae,`Note:
Loading a model from its configuration file does `),xCe=n(cae,"STRONG",{});var fIt=s(xCe);Vyr=r(fIt,"not"),fIt.forEach(t),Xyr=r(cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(cae,"A",{href:!0});var gIt=s(aK);zyr=r(gIt,"from_pretrained()"),gIt.forEach(t),Wyr=r(cae," to load the model weights."),cae.forEach(t),Qyr=i(EL),T(Q5.$$.fragment,EL),EL.forEach(t),Hyr=i(Gl),Br=n(Gl,"DIV",{class:!0});var Ol=s(Br);T($x.$$.fragment,Ol),Uyr=i(Ol),$Ce=n(Ol,"P",{});var hIt=s($Ce);Jyr=r(hIt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hIt.forEach(t),Yyr=i(Ol),fn=n(Ol,"P",{});var CL=s(fn);Kyr=r(CL,"The model class to instantiate is selected based on the "),kCe=n(CL,"CODE",{});var uIt=s(kCe);Zyr=r(uIt,"model_type"),uIt.forEach(t),e8r=r(CL,` property of the config object (either
passed as an argument or loaded from `),SCe=n(CL,"CODE",{});var pIt=s(SCe);o8r=r(pIt,"pretrained_model_name_or_path"),pIt.forEach(t),r8r=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=n(CL,"CODE",{});var _It=s(RCe);t8r=r(_It,"pretrained_model_name_or_path"),_It.forEach(t),a8r=r(CL,":"),CL.forEach(t),n8r=i(Ol),ye=n(Ol,"UL",{});var Ie=s(ye);H5=n(Ie,"LI",{});var YDe=s(H5);PCe=n(YDe,"STRONG",{});var bIt=s(PCe);s8r=r(bIt,"bart"),bIt.forEach(t),l8r=r(YDe," \u2014 "),nK=n(YDe,"A",{href:!0});var vIt=s(nK);i8r=r(vIt,"TFBartForConditionalGeneration"),vIt.forEach(t),d8r=r(YDe," (BART model)"),YDe.forEach(t),c8r=i(Ie),U5=n(Ie,"LI",{});var KDe=s(U5);BCe=n(KDe,"STRONG",{});var FIt=s(BCe);m8r=r(FIt,"blenderbot"),FIt.forEach(t),f8r=r(KDe," \u2014 "),sK=n(KDe,"A",{href:!0});var TIt=s(sK);g8r=r(TIt,"TFBlenderbotForConditionalGeneration"),TIt.forEach(t),h8r=r(KDe," (Blenderbot model)"),KDe.forEach(t),u8r=i(Ie),J5=n(Ie,"LI",{});var ZDe=s(J5);ICe=n(ZDe,"STRONG",{});var MIt=s(ICe);p8r=r(MIt,"blenderbot-small"),MIt.forEach(t),_8r=r(ZDe," \u2014 "),lK=n(ZDe,"A",{href:!0});var EIt=s(lK);b8r=r(EIt,"TFBlenderbotSmallForConditionalGeneration"),EIt.forEach(t),v8r=r(ZDe," (BlenderbotSmall model)"),ZDe.forEach(t),F8r=i(Ie),Y5=n(Ie,"LI",{});var eGe=s(Y5);NCe=n(eGe,"STRONG",{});var CIt=s(NCe);T8r=r(CIt,"encoder-decoder"),CIt.forEach(t),M8r=r(eGe," \u2014 "),iK=n(eGe,"A",{href:!0});var wIt=s(iK);E8r=r(wIt,"TFEncoderDecoderModel"),wIt.forEach(t),C8r=r(eGe," (Encoder decoder model)"),eGe.forEach(t),w8r=i(Ie),K5=n(Ie,"LI",{});var oGe=s(K5);qCe=n(oGe,"STRONG",{});var AIt=s(qCe);A8r=r(AIt,"led"),AIt.forEach(t),L8r=r(oGe," \u2014 "),dK=n(oGe,"A",{href:!0});var LIt=s(dK);y8r=r(LIt,"TFLEDForConditionalGeneration"),LIt.forEach(t),x8r=r(oGe," (LED model)"),oGe.forEach(t),$8r=i(Ie),Z5=n(Ie,"LI",{});var rGe=s(Z5);jCe=n(rGe,"STRONG",{});var yIt=s(jCe);k8r=r(yIt,"marian"),yIt.forEach(t),S8r=r(rGe," \u2014 "),cK=n(rGe,"A",{href:!0});var xIt=s(cK);R8r=r(xIt,"TFMarianMTModel"),xIt.forEach(t),P8r=r(rGe," (Marian model)"),rGe.forEach(t),B8r=i(Ie),e3=n(Ie,"LI",{});var tGe=s(e3);DCe=n(tGe,"STRONG",{});var $It=s(DCe);I8r=r($It,"mbart"),$It.forEach(t),N8r=r(tGe," \u2014 "),mK=n(tGe,"A",{href:!0});var kIt=s(mK);q8r=r(kIt,"TFMBartForConditionalGeneration"),kIt.forEach(t),j8r=r(tGe," (mBART model)"),tGe.forEach(t),D8r=i(Ie),o3=n(Ie,"LI",{});var aGe=s(o3);GCe=n(aGe,"STRONG",{});var SIt=s(GCe);G8r=r(SIt,"mt5"),SIt.forEach(t),O8r=r(aGe," \u2014 "),fK=n(aGe,"A",{href:!0});var RIt=s(fK);V8r=r(RIt,"TFMT5ForConditionalGeneration"),RIt.forEach(t),X8r=r(aGe," (MT5 model)"),aGe.forEach(t),z8r=i(Ie),r3=n(Ie,"LI",{});var nGe=s(r3);OCe=n(nGe,"STRONG",{});var PIt=s(OCe);W8r=r(PIt,"pegasus"),PIt.forEach(t),Q8r=r(nGe," \u2014 "),gK=n(nGe,"A",{href:!0});var BIt=s(gK);H8r=r(BIt,"TFPegasusForConditionalGeneration"),BIt.forEach(t),U8r=r(nGe," (Pegasus model)"),nGe.forEach(t),J8r=i(Ie),t3=n(Ie,"LI",{});var sGe=s(t3);VCe=n(sGe,"STRONG",{});var IIt=s(VCe);Y8r=r(IIt,"t5"),IIt.forEach(t),K8r=r(sGe," \u2014 "),hK=n(sGe,"A",{href:!0});var NIt=s(hK);Z8r=r(NIt,"TFT5ForConditionalGeneration"),NIt.forEach(t),e9r=r(sGe," (T5 model)"),sGe.forEach(t),Ie.forEach(t),o9r=i(Ol),T(a3.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),iWe=i(m),Ac=n(m,"H2",{class:!0});var pHe=s(Ac);n3=n(pHe,"A",{id:!0,class:!0,href:!0});var qIt=s(n3);XCe=n(qIt,"SPAN",{});var jIt=s(XCe);T(kx.$$.fragment,jIt),jIt.forEach(t),qIt.forEach(t),r9r=i(pHe),zCe=n(pHe,"SPAN",{});var DIt=s(zCe);t9r=r(DIt,"TFAutoModelForSequenceClassification"),DIt.forEach(t),pHe.forEach(t),dWe=i(m),ir=n(m,"DIV",{class:!0});var Vl=s(ir);T(Sx.$$.fragment,Vl),a9r=i(Vl),Lc=n(Vl,"P",{});var mae=s(Lc);n9r=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uK=n(mae,"A",{href:!0});var GIt=s(uK);s9r=r(GIt,"from_pretrained()"),GIt.forEach(t),l9r=r(mae," class method or the "),pK=n(mae,"A",{href:!0});var OIt=s(pK);i9r=r(OIt,"from_config()"),OIt.forEach(t),d9r=r(mae,` class
method.`),mae.forEach(t),c9r=i(Vl),Rx=n(Vl,"P",{});var _He=s(Rx);m9r=r(_He,"This class cannot be instantiated directly using "),WCe=n(_He,"CODE",{});var VIt=s(WCe);f9r=r(VIt,"__init__()"),VIt.forEach(t),g9r=r(_He," (throws an error)."),_He.forEach(t),h9r=i(Vl),jt=n(Vl,"DIV",{class:!0});var wL=s(jt);T(Px.$$.fragment,wL),u9r=i(wL),QCe=n(wL,"P",{});var XIt=s(QCe);p9r=r(XIt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XIt.forEach(t),_9r=i(wL),yc=n(wL,"P",{});var fae=s(yc);b9r=r(fae,`Note:
Loading a model from its configuration file does `),HCe=n(fae,"STRONG",{});var zIt=s(HCe);v9r=r(zIt,"not"),zIt.forEach(t),F9r=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=n(fae,"A",{href:!0});var WIt=s(_K);T9r=r(WIt,"from_pretrained()"),WIt.forEach(t),M9r=r(fae," to load the model weights."),fae.forEach(t),E9r=i(wL),T(s3.$$.fragment,wL),wL.forEach(t),C9r=i(Vl),Ir=n(Vl,"DIV",{class:!0});var Xl=s(Ir);T(Bx.$$.fragment,Xl),w9r=i(Xl),UCe=n(Xl,"P",{});var QIt=s(UCe);A9r=r(QIt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QIt.forEach(t),L9r=i(Xl),gn=n(Xl,"P",{});var AL=s(gn);y9r=r(AL,"The model class to instantiate is selected based on the "),JCe=n(AL,"CODE",{});var HIt=s(JCe);x9r=r(HIt,"model_type"),HIt.forEach(t),$9r=r(AL,` property of the config object (either
passed as an argument or loaded from `),YCe=n(AL,"CODE",{});var UIt=s(YCe);k9r=r(UIt,"pretrained_model_name_or_path"),UIt.forEach(t),S9r=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KCe=n(AL,"CODE",{});var JIt=s(KCe);R9r=r(JIt,"pretrained_model_name_or_path"),JIt.forEach(t),P9r=r(AL,":"),AL.forEach(t),B9r=i(Xl),te=n(Xl,"UL",{});var ne=s(te);l3=n(ne,"LI",{});var lGe=s(l3);ZCe=n(lGe,"STRONG",{});var YIt=s(ZCe);I9r=r(YIt,"albert"),YIt.forEach(t),N9r=r(lGe," \u2014 "),bK=n(lGe,"A",{href:!0});var KIt=s(bK);q9r=r(KIt,"TFAlbertForSequenceClassification"),KIt.forEach(t),j9r=r(lGe," (ALBERT model)"),lGe.forEach(t),D9r=i(ne),i3=n(ne,"LI",{});var iGe=s(i3);e5e=n(iGe,"STRONG",{});var ZIt=s(e5e);G9r=r(ZIt,"bert"),ZIt.forEach(t),O9r=r(iGe," \u2014 "),vK=n(iGe,"A",{href:!0});var eNt=s(vK);V9r=r(eNt,"TFBertForSequenceClassification"),eNt.forEach(t),X9r=r(iGe," (BERT model)"),iGe.forEach(t),z9r=i(ne),d3=n(ne,"LI",{});var dGe=s(d3);o5e=n(dGe,"STRONG",{});var oNt=s(o5e);W9r=r(oNt,"camembert"),oNt.forEach(t),Q9r=r(dGe," \u2014 "),FK=n(dGe,"A",{href:!0});var rNt=s(FK);H9r=r(rNt,"TFCamembertForSequenceClassification"),rNt.forEach(t),U9r=r(dGe," (CamemBERT model)"),dGe.forEach(t),J9r=i(ne),c3=n(ne,"LI",{});var cGe=s(c3);r5e=n(cGe,"STRONG",{});var tNt=s(r5e);Y9r=r(tNt,"convbert"),tNt.forEach(t),K9r=r(cGe," \u2014 "),TK=n(cGe,"A",{href:!0});var aNt=s(TK);Z9r=r(aNt,"TFConvBertForSequenceClassification"),aNt.forEach(t),exr=r(cGe," (ConvBERT model)"),cGe.forEach(t),oxr=i(ne),m3=n(ne,"LI",{});var mGe=s(m3);t5e=n(mGe,"STRONG",{});var nNt=s(t5e);rxr=r(nNt,"ctrl"),nNt.forEach(t),txr=r(mGe," \u2014 "),MK=n(mGe,"A",{href:!0});var sNt=s(MK);axr=r(sNt,"TFCTRLForSequenceClassification"),sNt.forEach(t),nxr=r(mGe," (CTRL model)"),mGe.forEach(t),sxr=i(ne),f3=n(ne,"LI",{});var fGe=s(f3);a5e=n(fGe,"STRONG",{});var lNt=s(a5e);lxr=r(lNt,"deberta"),lNt.forEach(t),ixr=r(fGe," \u2014 "),EK=n(fGe,"A",{href:!0});var iNt=s(EK);dxr=r(iNt,"TFDebertaForSequenceClassification"),iNt.forEach(t),cxr=r(fGe," (DeBERTa model)"),fGe.forEach(t),mxr=i(ne),g3=n(ne,"LI",{});var gGe=s(g3);n5e=n(gGe,"STRONG",{});var dNt=s(n5e);fxr=r(dNt,"deberta-v2"),dNt.forEach(t),gxr=r(gGe," \u2014 "),CK=n(gGe,"A",{href:!0});var cNt=s(CK);hxr=r(cNt,"TFDebertaV2ForSequenceClassification"),cNt.forEach(t),uxr=r(gGe," (DeBERTa-v2 model)"),gGe.forEach(t),pxr=i(ne),h3=n(ne,"LI",{});var hGe=s(h3);s5e=n(hGe,"STRONG",{});var mNt=s(s5e);_xr=r(mNt,"distilbert"),mNt.forEach(t),bxr=r(hGe," \u2014 "),wK=n(hGe,"A",{href:!0});var fNt=s(wK);vxr=r(fNt,"TFDistilBertForSequenceClassification"),fNt.forEach(t),Fxr=r(hGe," (DistilBERT model)"),hGe.forEach(t),Txr=i(ne),u3=n(ne,"LI",{});var uGe=s(u3);l5e=n(uGe,"STRONG",{});var gNt=s(l5e);Mxr=r(gNt,"electra"),gNt.forEach(t),Exr=r(uGe," \u2014 "),AK=n(uGe,"A",{href:!0});var hNt=s(AK);Cxr=r(hNt,"TFElectraForSequenceClassification"),hNt.forEach(t),wxr=r(uGe," (ELECTRA model)"),uGe.forEach(t),Axr=i(ne),p3=n(ne,"LI",{});var pGe=s(p3);i5e=n(pGe,"STRONG",{});var uNt=s(i5e);Lxr=r(uNt,"flaubert"),uNt.forEach(t),yxr=r(pGe," \u2014 "),LK=n(pGe,"A",{href:!0});var pNt=s(LK);xxr=r(pNt,"TFFlaubertForSequenceClassification"),pNt.forEach(t),$xr=r(pGe," (FlauBERT model)"),pGe.forEach(t),kxr=i(ne),_3=n(ne,"LI",{});var _Ge=s(_3);d5e=n(_Ge,"STRONG",{});var _Nt=s(d5e);Sxr=r(_Nt,"funnel"),_Nt.forEach(t),Rxr=r(_Ge," \u2014 "),yK=n(_Ge,"A",{href:!0});var bNt=s(yK);Pxr=r(bNt,"TFFunnelForSequenceClassification"),bNt.forEach(t),Bxr=r(_Ge," (Funnel Transformer model)"),_Ge.forEach(t),Ixr=i(ne),b3=n(ne,"LI",{});var bGe=s(b3);c5e=n(bGe,"STRONG",{});var vNt=s(c5e);Nxr=r(vNt,"gpt2"),vNt.forEach(t),qxr=r(bGe," \u2014 "),xK=n(bGe,"A",{href:!0});var FNt=s(xK);jxr=r(FNt,"TFGPT2ForSequenceClassification"),FNt.forEach(t),Dxr=r(bGe," (OpenAI GPT-2 model)"),bGe.forEach(t),Gxr=i(ne),v3=n(ne,"LI",{});var vGe=s(v3);m5e=n(vGe,"STRONG",{});var TNt=s(m5e);Oxr=r(TNt,"gptj"),TNt.forEach(t),Vxr=r(vGe," \u2014 "),$K=n(vGe,"A",{href:!0});var MNt=s($K);Xxr=r(MNt,"TFGPTJForSequenceClassification"),MNt.forEach(t),zxr=r(vGe," (GPT-J model)"),vGe.forEach(t),Wxr=i(ne),F3=n(ne,"LI",{});var FGe=s(F3);f5e=n(FGe,"STRONG",{});var ENt=s(f5e);Qxr=r(ENt,"layoutlm"),ENt.forEach(t),Hxr=r(FGe," \u2014 "),kK=n(FGe,"A",{href:!0});var CNt=s(kK);Uxr=r(CNt,"TFLayoutLMForSequenceClassification"),CNt.forEach(t),Jxr=r(FGe," (LayoutLM model)"),FGe.forEach(t),Yxr=i(ne),T3=n(ne,"LI",{});var TGe=s(T3);g5e=n(TGe,"STRONG",{});var wNt=s(g5e);Kxr=r(wNt,"longformer"),wNt.forEach(t),Zxr=r(TGe," \u2014 "),SK=n(TGe,"A",{href:!0});var ANt=s(SK);e$r=r(ANt,"TFLongformerForSequenceClassification"),ANt.forEach(t),o$r=r(TGe," (Longformer model)"),TGe.forEach(t),r$r=i(ne),M3=n(ne,"LI",{});var MGe=s(M3);h5e=n(MGe,"STRONG",{});var LNt=s(h5e);t$r=r(LNt,"mobilebert"),LNt.forEach(t),a$r=r(MGe," \u2014 "),RK=n(MGe,"A",{href:!0});var yNt=s(RK);n$r=r(yNt,"TFMobileBertForSequenceClassification"),yNt.forEach(t),s$r=r(MGe," (MobileBERT model)"),MGe.forEach(t),l$r=i(ne),E3=n(ne,"LI",{});var EGe=s(E3);u5e=n(EGe,"STRONG",{});var xNt=s(u5e);i$r=r(xNt,"mpnet"),xNt.forEach(t),d$r=r(EGe," \u2014 "),PK=n(EGe,"A",{href:!0});var $Nt=s(PK);c$r=r($Nt,"TFMPNetForSequenceClassification"),$Nt.forEach(t),m$r=r(EGe," (MPNet model)"),EGe.forEach(t),f$r=i(ne),C3=n(ne,"LI",{});var CGe=s(C3);p5e=n(CGe,"STRONG",{});var kNt=s(p5e);g$r=r(kNt,"openai-gpt"),kNt.forEach(t),h$r=r(CGe," \u2014 "),BK=n(CGe,"A",{href:!0});var SNt=s(BK);u$r=r(SNt,"TFOpenAIGPTForSequenceClassification"),SNt.forEach(t),p$r=r(CGe," (OpenAI GPT model)"),CGe.forEach(t),_$r=i(ne),w3=n(ne,"LI",{});var wGe=s(w3);_5e=n(wGe,"STRONG",{});var RNt=s(_5e);b$r=r(RNt,"rembert"),RNt.forEach(t),v$r=r(wGe," \u2014 "),IK=n(wGe,"A",{href:!0});var PNt=s(IK);F$r=r(PNt,"TFRemBertForSequenceClassification"),PNt.forEach(t),T$r=r(wGe," (RemBERT model)"),wGe.forEach(t),M$r=i(ne),A3=n(ne,"LI",{});var AGe=s(A3);b5e=n(AGe,"STRONG",{});var BNt=s(b5e);E$r=r(BNt,"roberta"),BNt.forEach(t),C$r=r(AGe," \u2014 "),NK=n(AGe,"A",{href:!0});var INt=s(NK);w$r=r(INt,"TFRobertaForSequenceClassification"),INt.forEach(t),A$r=r(AGe," (RoBERTa model)"),AGe.forEach(t),L$r=i(ne),L3=n(ne,"LI",{});var LGe=s(L3);v5e=n(LGe,"STRONG",{});var NNt=s(v5e);y$r=r(NNt,"roformer"),NNt.forEach(t),x$r=r(LGe," \u2014 "),qK=n(LGe,"A",{href:!0});var qNt=s(qK);$$r=r(qNt,"TFRoFormerForSequenceClassification"),qNt.forEach(t),k$r=r(LGe," (RoFormer model)"),LGe.forEach(t),S$r=i(ne),y3=n(ne,"LI",{});var yGe=s(y3);F5e=n(yGe,"STRONG",{});var jNt=s(F5e);R$r=r(jNt,"tapas"),jNt.forEach(t),P$r=r(yGe," \u2014 "),jK=n(yGe,"A",{href:!0});var DNt=s(jK);B$r=r(DNt,"TFTapasForSequenceClassification"),DNt.forEach(t),I$r=r(yGe," (TAPAS model)"),yGe.forEach(t),N$r=i(ne),x3=n(ne,"LI",{});var xGe=s(x3);T5e=n(xGe,"STRONG",{});var GNt=s(T5e);q$r=r(GNt,"transfo-xl"),GNt.forEach(t),j$r=r(xGe," \u2014 "),DK=n(xGe,"A",{href:!0});var ONt=s(DK);D$r=r(ONt,"TFTransfoXLForSequenceClassification"),ONt.forEach(t),G$r=r(xGe," (Transformer-XL model)"),xGe.forEach(t),O$r=i(ne),$3=n(ne,"LI",{});var $Ge=s($3);M5e=n($Ge,"STRONG",{});var VNt=s(M5e);V$r=r(VNt,"xlm"),VNt.forEach(t),X$r=r($Ge," \u2014 "),GK=n($Ge,"A",{href:!0});var XNt=s(GK);z$r=r(XNt,"TFXLMForSequenceClassification"),XNt.forEach(t),W$r=r($Ge," (XLM model)"),$Ge.forEach(t),Q$r=i(ne),k3=n(ne,"LI",{});var kGe=s(k3);E5e=n(kGe,"STRONG",{});var zNt=s(E5e);H$r=r(zNt,"xlm-roberta"),zNt.forEach(t),U$r=r(kGe," \u2014 "),OK=n(kGe,"A",{href:!0});var WNt=s(OK);J$r=r(WNt,"TFXLMRobertaForSequenceClassification"),WNt.forEach(t),Y$r=r(kGe," (XLM-RoBERTa model)"),kGe.forEach(t),K$r=i(ne),S3=n(ne,"LI",{});var SGe=s(S3);C5e=n(SGe,"STRONG",{});var QNt=s(C5e);Z$r=r(QNt,"xlnet"),QNt.forEach(t),ekr=r(SGe," \u2014 "),VK=n(SGe,"A",{href:!0});var HNt=s(VK);okr=r(HNt,"TFXLNetForSequenceClassification"),HNt.forEach(t),rkr=r(SGe," (XLNet model)"),SGe.forEach(t),ne.forEach(t),tkr=i(Xl),T(R3.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),cWe=i(m),xc=n(m,"H2",{class:!0});var bHe=s(xc);P3=n(bHe,"A",{id:!0,class:!0,href:!0});var UNt=s(P3);w5e=n(UNt,"SPAN",{});var JNt=s(w5e);T(Ix.$$.fragment,JNt),JNt.forEach(t),UNt.forEach(t),akr=i(bHe),A5e=n(bHe,"SPAN",{});var YNt=s(A5e);nkr=r(YNt,"TFAutoModelForMultipleChoice"),YNt.forEach(t),bHe.forEach(t),mWe=i(m),dr=n(m,"DIV",{class:!0});var zl=s(dr);T(Nx.$$.fragment,zl),skr=i(zl),$c=n(zl,"P",{});var gae=s($c);lkr=r(gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XK=n(gae,"A",{href:!0});var KNt=s(XK);ikr=r(KNt,"from_pretrained()"),KNt.forEach(t),dkr=r(gae," class method or the "),zK=n(gae,"A",{href:!0});var ZNt=s(zK);ckr=r(ZNt,"from_config()"),ZNt.forEach(t),mkr=r(gae,` class
method.`),gae.forEach(t),fkr=i(zl),qx=n(zl,"P",{});var vHe=s(qx);gkr=r(vHe,"This class cannot be instantiated directly using "),L5e=n(vHe,"CODE",{});var eqt=s(L5e);hkr=r(eqt,"__init__()"),eqt.forEach(t),ukr=r(vHe," (throws an error)."),vHe.forEach(t),pkr=i(zl),Dt=n(zl,"DIV",{class:!0});var LL=s(Dt);T(jx.$$.fragment,LL),_kr=i(LL),y5e=n(LL,"P",{});var oqt=s(y5e);bkr=r(oqt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oqt.forEach(t),vkr=i(LL),kc=n(LL,"P",{});var hae=s(kc);Fkr=r(hae,`Note:
Loading a model from its configuration file does `),x5e=n(hae,"STRONG",{});var rqt=s(x5e);Tkr=r(rqt,"not"),rqt.forEach(t),Mkr=r(hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(hae,"A",{href:!0});var tqt=s(WK);Ekr=r(tqt,"from_pretrained()"),tqt.forEach(t),Ckr=r(hae," to load the model weights."),hae.forEach(t),wkr=i(LL),T(B3.$$.fragment,LL),LL.forEach(t),Akr=i(zl),Nr=n(zl,"DIV",{class:!0});var Wl=s(Nr);T(Dx.$$.fragment,Wl),Lkr=i(Wl),$5e=n(Wl,"P",{});var aqt=s($5e);ykr=r(aqt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aqt.forEach(t),xkr=i(Wl),hn=n(Wl,"P",{});var yL=s(hn);$kr=r(yL,"The model class to instantiate is selected based on the "),k5e=n(yL,"CODE",{});var nqt=s(k5e);kkr=r(nqt,"model_type"),nqt.forEach(t),Skr=r(yL,` property of the config object (either
passed as an argument or loaded from `),S5e=n(yL,"CODE",{});var sqt=s(S5e);Rkr=r(sqt,"pretrained_model_name_or_path"),sqt.forEach(t),Pkr=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R5e=n(yL,"CODE",{});var lqt=s(R5e);Bkr=r(lqt,"pretrained_model_name_or_path"),lqt.forEach(t),Ikr=r(yL,":"),yL.forEach(t),Nkr=i(Wl),be=n(Wl,"UL",{});var Fe=s(be);I3=n(Fe,"LI",{});var RGe=s(I3);P5e=n(RGe,"STRONG",{});var iqt=s(P5e);qkr=r(iqt,"albert"),iqt.forEach(t),jkr=r(RGe," \u2014 "),QK=n(RGe,"A",{href:!0});var dqt=s(QK);Dkr=r(dqt,"TFAlbertForMultipleChoice"),dqt.forEach(t),Gkr=r(RGe," (ALBERT model)"),RGe.forEach(t),Okr=i(Fe),N3=n(Fe,"LI",{});var PGe=s(N3);B5e=n(PGe,"STRONG",{});var cqt=s(B5e);Vkr=r(cqt,"bert"),cqt.forEach(t),Xkr=r(PGe," \u2014 "),HK=n(PGe,"A",{href:!0});var mqt=s(HK);zkr=r(mqt,"TFBertForMultipleChoice"),mqt.forEach(t),Wkr=r(PGe," (BERT model)"),PGe.forEach(t),Qkr=i(Fe),q3=n(Fe,"LI",{});var BGe=s(q3);I5e=n(BGe,"STRONG",{});var fqt=s(I5e);Hkr=r(fqt,"camembert"),fqt.forEach(t),Ukr=r(BGe," \u2014 "),UK=n(BGe,"A",{href:!0});var gqt=s(UK);Jkr=r(gqt,"TFCamembertForMultipleChoice"),gqt.forEach(t),Ykr=r(BGe," (CamemBERT model)"),BGe.forEach(t),Kkr=i(Fe),j3=n(Fe,"LI",{});var IGe=s(j3);N5e=n(IGe,"STRONG",{});var hqt=s(N5e);Zkr=r(hqt,"convbert"),hqt.forEach(t),eSr=r(IGe," \u2014 "),JK=n(IGe,"A",{href:!0});var uqt=s(JK);oSr=r(uqt,"TFConvBertForMultipleChoice"),uqt.forEach(t),rSr=r(IGe," (ConvBERT model)"),IGe.forEach(t),tSr=i(Fe),D3=n(Fe,"LI",{});var NGe=s(D3);q5e=n(NGe,"STRONG",{});var pqt=s(q5e);aSr=r(pqt,"distilbert"),pqt.forEach(t),nSr=r(NGe," \u2014 "),YK=n(NGe,"A",{href:!0});var _qt=s(YK);sSr=r(_qt,"TFDistilBertForMultipleChoice"),_qt.forEach(t),lSr=r(NGe," (DistilBERT model)"),NGe.forEach(t),iSr=i(Fe),G3=n(Fe,"LI",{});var qGe=s(G3);j5e=n(qGe,"STRONG",{});var bqt=s(j5e);dSr=r(bqt,"electra"),bqt.forEach(t),cSr=r(qGe," \u2014 "),KK=n(qGe,"A",{href:!0});var vqt=s(KK);mSr=r(vqt,"TFElectraForMultipleChoice"),vqt.forEach(t),fSr=r(qGe," (ELECTRA model)"),qGe.forEach(t),gSr=i(Fe),O3=n(Fe,"LI",{});var jGe=s(O3);D5e=n(jGe,"STRONG",{});var Fqt=s(D5e);hSr=r(Fqt,"flaubert"),Fqt.forEach(t),uSr=r(jGe," \u2014 "),ZK=n(jGe,"A",{href:!0});var Tqt=s(ZK);pSr=r(Tqt,"TFFlaubertForMultipleChoice"),Tqt.forEach(t),_Sr=r(jGe," (FlauBERT model)"),jGe.forEach(t),bSr=i(Fe),V3=n(Fe,"LI",{});var DGe=s(V3);G5e=n(DGe,"STRONG",{});var Mqt=s(G5e);vSr=r(Mqt,"funnel"),Mqt.forEach(t),FSr=r(DGe," \u2014 "),eZ=n(DGe,"A",{href:!0});var Eqt=s(eZ);TSr=r(Eqt,"TFFunnelForMultipleChoice"),Eqt.forEach(t),MSr=r(DGe," (Funnel Transformer model)"),DGe.forEach(t),ESr=i(Fe),X3=n(Fe,"LI",{});var GGe=s(X3);O5e=n(GGe,"STRONG",{});var Cqt=s(O5e);CSr=r(Cqt,"longformer"),Cqt.forEach(t),wSr=r(GGe," \u2014 "),oZ=n(GGe,"A",{href:!0});var wqt=s(oZ);ASr=r(wqt,"TFLongformerForMultipleChoice"),wqt.forEach(t),LSr=r(GGe," (Longformer model)"),GGe.forEach(t),ySr=i(Fe),z3=n(Fe,"LI",{});var OGe=s(z3);V5e=n(OGe,"STRONG",{});var Aqt=s(V5e);xSr=r(Aqt,"mobilebert"),Aqt.forEach(t),$Sr=r(OGe," \u2014 "),rZ=n(OGe,"A",{href:!0});var Lqt=s(rZ);kSr=r(Lqt,"TFMobileBertForMultipleChoice"),Lqt.forEach(t),SSr=r(OGe," (MobileBERT model)"),OGe.forEach(t),RSr=i(Fe),W3=n(Fe,"LI",{});var VGe=s(W3);X5e=n(VGe,"STRONG",{});var yqt=s(X5e);PSr=r(yqt,"mpnet"),yqt.forEach(t),BSr=r(VGe," \u2014 "),tZ=n(VGe,"A",{href:!0});var xqt=s(tZ);ISr=r(xqt,"TFMPNetForMultipleChoice"),xqt.forEach(t),NSr=r(VGe," (MPNet model)"),VGe.forEach(t),qSr=i(Fe),Q3=n(Fe,"LI",{});var XGe=s(Q3);z5e=n(XGe,"STRONG",{});var $qt=s(z5e);jSr=r($qt,"rembert"),$qt.forEach(t),DSr=r(XGe," \u2014 "),aZ=n(XGe,"A",{href:!0});var kqt=s(aZ);GSr=r(kqt,"TFRemBertForMultipleChoice"),kqt.forEach(t),OSr=r(XGe," (RemBERT model)"),XGe.forEach(t),VSr=i(Fe),H3=n(Fe,"LI",{});var zGe=s(H3);W5e=n(zGe,"STRONG",{});var Sqt=s(W5e);XSr=r(Sqt,"roberta"),Sqt.forEach(t),zSr=r(zGe," \u2014 "),nZ=n(zGe,"A",{href:!0});var Rqt=s(nZ);WSr=r(Rqt,"TFRobertaForMultipleChoice"),Rqt.forEach(t),QSr=r(zGe," (RoBERTa model)"),zGe.forEach(t),HSr=i(Fe),U3=n(Fe,"LI",{});var WGe=s(U3);Q5e=n(WGe,"STRONG",{});var Pqt=s(Q5e);USr=r(Pqt,"roformer"),Pqt.forEach(t),JSr=r(WGe," \u2014 "),sZ=n(WGe,"A",{href:!0});var Bqt=s(sZ);YSr=r(Bqt,"TFRoFormerForMultipleChoice"),Bqt.forEach(t),KSr=r(WGe," (RoFormer model)"),WGe.forEach(t),ZSr=i(Fe),J3=n(Fe,"LI",{});var QGe=s(J3);H5e=n(QGe,"STRONG",{});var Iqt=s(H5e);eRr=r(Iqt,"xlm"),Iqt.forEach(t),oRr=r(QGe," \u2014 "),lZ=n(QGe,"A",{href:!0});var Nqt=s(lZ);rRr=r(Nqt,"TFXLMForMultipleChoice"),Nqt.forEach(t),tRr=r(QGe," (XLM model)"),QGe.forEach(t),aRr=i(Fe),Y3=n(Fe,"LI",{});var HGe=s(Y3);U5e=n(HGe,"STRONG",{});var qqt=s(U5e);nRr=r(qqt,"xlm-roberta"),qqt.forEach(t),sRr=r(HGe," \u2014 "),iZ=n(HGe,"A",{href:!0});var jqt=s(iZ);lRr=r(jqt,"TFXLMRobertaForMultipleChoice"),jqt.forEach(t),iRr=r(HGe," (XLM-RoBERTa model)"),HGe.forEach(t),dRr=i(Fe),K3=n(Fe,"LI",{});var UGe=s(K3);J5e=n(UGe,"STRONG",{});var Dqt=s(J5e);cRr=r(Dqt,"xlnet"),Dqt.forEach(t),mRr=r(UGe," \u2014 "),dZ=n(UGe,"A",{href:!0});var Gqt=s(dZ);fRr=r(Gqt,"TFXLNetForMultipleChoice"),Gqt.forEach(t),gRr=r(UGe," (XLNet model)"),UGe.forEach(t),Fe.forEach(t),hRr=i(Wl),T(Z3.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),fWe=i(m),Sc=n(m,"H2",{class:!0});var FHe=s(Sc);e0=n(FHe,"A",{id:!0,class:!0,href:!0});var Oqt=s(e0);Y5e=n(Oqt,"SPAN",{});var Vqt=s(Y5e);T(Gx.$$.fragment,Vqt),Vqt.forEach(t),Oqt.forEach(t),uRr=i(FHe),K5e=n(FHe,"SPAN",{});var Xqt=s(K5e);pRr=r(Xqt,"TFAutoModelForNextSentencePrediction"),Xqt.forEach(t),FHe.forEach(t),gWe=i(m),cr=n(m,"DIV",{class:!0});var Ql=s(cr);T(Ox.$$.fragment,Ql),_Rr=i(Ql),Rc=n(Ql,"P",{});var uae=s(Rc);bRr=r(uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cZ=n(uae,"A",{href:!0});var zqt=s(cZ);vRr=r(zqt,"from_pretrained()"),zqt.forEach(t),FRr=r(uae," class method or the "),mZ=n(uae,"A",{href:!0});var Wqt=s(mZ);TRr=r(Wqt,"from_config()"),Wqt.forEach(t),MRr=r(uae,` class
method.`),uae.forEach(t),ERr=i(Ql),Vx=n(Ql,"P",{});var THe=s(Vx);CRr=r(THe,"This class cannot be instantiated directly using "),Z5e=n(THe,"CODE",{});var Qqt=s(Z5e);wRr=r(Qqt,"__init__()"),Qqt.forEach(t),ARr=r(THe," (throws an error)."),THe.forEach(t),LRr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var xL=s(Gt);T(Xx.$$.fragment,xL),yRr=i(xL),e3e=n(xL,"P",{});var Hqt=s(e3e);xRr=r(Hqt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Hqt.forEach(t),$Rr=i(xL),Pc=n(xL,"P",{});var pae=s(Pc);kRr=r(pae,`Note:
Loading a model from its configuration file does `),o3e=n(pae,"STRONG",{});var Uqt=s(o3e);SRr=r(Uqt,"not"),Uqt.forEach(t),RRr=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(pae,"A",{href:!0});var Jqt=s(fZ);PRr=r(Jqt,"from_pretrained()"),Jqt.forEach(t),BRr=r(pae," to load the model weights."),pae.forEach(t),IRr=i(xL),T(o0.$$.fragment,xL),xL.forEach(t),NRr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Hl=s(qr);T(zx.$$.fragment,Hl),qRr=i(Hl),r3e=n(Hl,"P",{});var Yqt=s(r3e);jRr=r(Yqt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Yqt.forEach(t),DRr=i(Hl),un=n(Hl,"P",{});var $L=s(un);GRr=r($L,"The model class to instantiate is selected based on the "),t3e=n($L,"CODE",{});var Kqt=s(t3e);ORr=r(Kqt,"model_type"),Kqt.forEach(t),VRr=r($L,` property of the config object (either
passed as an argument or loaded from `),a3e=n($L,"CODE",{});var Zqt=s(a3e);XRr=r(Zqt,"pretrained_model_name_or_path"),Zqt.forEach(t),zRr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=n($L,"CODE",{});var ejt=s(n3e);WRr=r(ejt,"pretrained_model_name_or_path"),ejt.forEach(t),QRr=r($L,":"),$L.forEach(t),HRr=i(Hl),Wx=n(Hl,"UL",{});var MHe=s(Wx);r0=n(MHe,"LI",{});var JGe=s(r0);s3e=n(JGe,"STRONG",{});var ojt=s(s3e);URr=r(ojt,"bert"),ojt.forEach(t),JRr=r(JGe," \u2014 "),gZ=n(JGe,"A",{href:!0});var rjt=s(gZ);YRr=r(rjt,"TFBertForNextSentencePrediction"),rjt.forEach(t),KRr=r(JGe," (BERT model)"),JGe.forEach(t),ZRr=i(MHe),t0=n(MHe,"LI",{});var YGe=s(t0);l3e=n(YGe,"STRONG",{});var tjt=s(l3e);ePr=r(tjt,"mobilebert"),tjt.forEach(t),oPr=r(YGe," \u2014 "),hZ=n(YGe,"A",{href:!0});var ajt=s(hZ);rPr=r(ajt,"TFMobileBertForNextSentencePrediction"),ajt.forEach(t),tPr=r(YGe," (MobileBERT model)"),YGe.forEach(t),MHe.forEach(t),aPr=i(Hl),T(a0.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),hWe=i(m),Bc=n(m,"H2",{class:!0});var EHe=s(Bc);n0=n(EHe,"A",{id:!0,class:!0,href:!0});var njt=s(n0);i3e=n(njt,"SPAN",{});var sjt=s(i3e);T(Qx.$$.fragment,sjt),sjt.forEach(t),njt.forEach(t),nPr=i(EHe),d3e=n(EHe,"SPAN",{});var ljt=s(d3e);sPr=r(ljt,"TFAutoModelForTableQuestionAnswering"),ljt.forEach(t),EHe.forEach(t),uWe=i(m),mr=n(m,"DIV",{class:!0});var Ul=s(mr);T(Hx.$$.fragment,Ul),lPr=i(Ul),Ic=n(Ul,"P",{});var _ae=s(Ic);iPr=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uZ=n(_ae,"A",{href:!0});var ijt=s(uZ);dPr=r(ijt,"from_pretrained()"),ijt.forEach(t),cPr=r(_ae," class method or the "),pZ=n(_ae,"A",{href:!0});var djt=s(pZ);mPr=r(djt,"from_config()"),djt.forEach(t),fPr=r(_ae,` class
method.`),_ae.forEach(t),gPr=i(Ul),Ux=n(Ul,"P",{});var CHe=s(Ux);hPr=r(CHe,"This class cannot be instantiated directly using "),c3e=n(CHe,"CODE",{});var cjt=s(c3e);uPr=r(cjt,"__init__()"),cjt.forEach(t),pPr=r(CHe," (throws an error)."),CHe.forEach(t),_Pr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var kL=s(Ot);T(Jx.$$.fragment,kL),bPr=i(kL),m3e=n(kL,"P",{});var mjt=s(m3e);vPr=r(mjt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mjt.forEach(t),FPr=i(kL),Nc=n(kL,"P",{});var bae=s(Nc);TPr=r(bae,`Note:
Loading a model from its configuration file does `),f3e=n(bae,"STRONG",{});var fjt=s(f3e);MPr=r(fjt,"not"),fjt.forEach(t),EPr=r(bae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(bae,"A",{href:!0});var gjt=s(_Z);CPr=r(gjt,"from_pretrained()"),gjt.forEach(t),wPr=r(bae," to load the model weights."),bae.forEach(t),APr=i(kL),T(s0.$$.fragment,kL),kL.forEach(t),LPr=i(Ul),jr=n(Ul,"DIV",{class:!0});var Jl=s(jr);T(Yx.$$.fragment,Jl),yPr=i(Jl),g3e=n(Jl,"P",{});var hjt=s(g3e);xPr=r(hjt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),hjt.forEach(t),$Pr=i(Jl),pn=n(Jl,"P",{});var SL=s(pn);kPr=r(SL,"The model class to instantiate is selected based on the "),h3e=n(SL,"CODE",{});var ujt=s(h3e);SPr=r(ujt,"model_type"),ujt.forEach(t),RPr=r(SL,` property of the config object (either
passed as an argument or loaded from `),u3e=n(SL,"CODE",{});var pjt=s(u3e);PPr=r(pjt,"pretrained_model_name_or_path"),pjt.forEach(t),BPr=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p3e=n(SL,"CODE",{});var _jt=s(p3e);IPr=r(_jt,"pretrained_model_name_or_path"),_jt.forEach(t),NPr=r(SL,":"),SL.forEach(t),qPr=i(Jl),_3e=n(Jl,"UL",{});var bjt=s(_3e);l0=n(bjt,"LI",{});var KGe=s(l0);b3e=n(KGe,"STRONG",{});var vjt=s(b3e);jPr=r(vjt,"tapas"),vjt.forEach(t),DPr=r(KGe," \u2014 "),bZ=n(KGe,"A",{href:!0});var Fjt=s(bZ);GPr=r(Fjt,"TFTapasForQuestionAnswering"),Fjt.forEach(t),OPr=r(KGe," (TAPAS model)"),KGe.forEach(t),bjt.forEach(t),VPr=i(Jl),T(i0.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),pWe=i(m),qc=n(m,"H2",{class:!0});var wHe=s(qc);d0=n(wHe,"A",{id:!0,class:!0,href:!0});var Tjt=s(d0);v3e=n(Tjt,"SPAN",{});var Mjt=s(v3e);T(Kx.$$.fragment,Mjt),Mjt.forEach(t),Tjt.forEach(t),XPr=i(wHe),F3e=n(wHe,"SPAN",{});var Ejt=s(F3e);zPr=r(Ejt,"TFAutoModelForTokenClassification"),Ejt.forEach(t),wHe.forEach(t),_We=i(m),fr=n(m,"DIV",{class:!0});var Yl=s(fr);T(Zx.$$.fragment,Yl),WPr=i(Yl),jc=n(Yl,"P",{});var vae=s(jc);QPr=r(vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vZ=n(vae,"A",{href:!0});var Cjt=s(vZ);HPr=r(Cjt,"from_pretrained()"),Cjt.forEach(t),UPr=r(vae," class method or the "),FZ=n(vae,"A",{href:!0});var wjt=s(FZ);JPr=r(wjt,"from_config()"),wjt.forEach(t),YPr=r(vae,` class
method.`),vae.forEach(t),KPr=i(Yl),e$=n(Yl,"P",{});var AHe=s(e$);ZPr=r(AHe,"This class cannot be instantiated directly using "),T3e=n(AHe,"CODE",{});var Ajt=s(T3e);eBr=r(Ajt,"__init__()"),Ajt.forEach(t),oBr=r(AHe," (throws an error)."),AHe.forEach(t),rBr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var RL=s(Vt);T(o$.$$.fragment,RL),tBr=i(RL),M3e=n(RL,"P",{});var Ljt=s(M3e);aBr=r(Ljt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ljt.forEach(t),nBr=i(RL),Dc=n(RL,"P",{});var Fae=s(Dc);sBr=r(Fae,`Note:
Loading a model from its configuration file does `),E3e=n(Fae,"STRONG",{});var yjt=s(E3e);lBr=r(yjt,"not"),yjt.forEach(t),iBr=r(Fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(Fae,"A",{href:!0});var xjt=s(TZ);dBr=r(xjt,"from_pretrained()"),xjt.forEach(t),cBr=r(Fae," to load the model weights."),Fae.forEach(t),mBr=i(RL),T(c0.$$.fragment,RL),RL.forEach(t),fBr=i(Yl),Dr=n(Yl,"DIV",{class:!0});var Kl=s(Dr);T(r$.$$.fragment,Kl),gBr=i(Kl),C3e=n(Kl,"P",{});var $jt=s(C3e);hBr=r($jt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$jt.forEach(t),uBr=i(Kl),_n=n(Kl,"P",{});var PL=s(_n);pBr=r(PL,"The model class to instantiate is selected based on the "),w3e=n(PL,"CODE",{});var kjt=s(w3e);_Br=r(kjt,"model_type"),kjt.forEach(t),bBr=r(PL,` property of the config object (either
passed as an argument or loaded from `),A3e=n(PL,"CODE",{});var Sjt=s(A3e);vBr=r(Sjt,"pretrained_model_name_or_path"),Sjt.forEach(t),FBr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L3e=n(PL,"CODE",{});var Rjt=s(L3e);TBr=r(Rjt,"pretrained_model_name_or_path"),Rjt.forEach(t),MBr=r(PL,":"),PL.forEach(t),EBr=i(Kl),de=n(Kl,"UL",{});var he=s(de);m0=n(he,"LI",{});var ZGe=s(m0);y3e=n(ZGe,"STRONG",{});var Pjt=s(y3e);CBr=r(Pjt,"albert"),Pjt.forEach(t),wBr=r(ZGe," \u2014 "),MZ=n(ZGe,"A",{href:!0});var Bjt=s(MZ);ABr=r(Bjt,"TFAlbertForTokenClassification"),Bjt.forEach(t),LBr=r(ZGe," (ALBERT model)"),ZGe.forEach(t),yBr=i(he),f0=n(he,"LI",{});var eOe=s(f0);x3e=n(eOe,"STRONG",{});var Ijt=s(x3e);xBr=r(Ijt,"bert"),Ijt.forEach(t),$Br=r(eOe," \u2014 "),EZ=n(eOe,"A",{href:!0});var Njt=s(EZ);kBr=r(Njt,"TFBertForTokenClassification"),Njt.forEach(t),SBr=r(eOe," (BERT model)"),eOe.forEach(t),RBr=i(he),g0=n(he,"LI",{});var oOe=s(g0);$3e=n(oOe,"STRONG",{});var qjt=s($3e);PBr=r(qjt,"camembert"),qjt.forEach(t),BBr=r(oOe," \u2014 "),CZ=n(oOe,"A",{href:!0});var jjt=s(CZ);IBr=r(jjt,"TFCamembertForTokenClassification"),jjt.forEach(t),NBr=r(oOe," (CamemBERT model)"),oOe.forEach(t),qBr=i(he),h0=n(he,"LI",{});var rOe=s(h0);k3e=n(rOe,"STRONG",{});var Djt=s(k3e);jBr=r(Djt,"convbert"),Djt.forEach(t),DBr=r(rOe," \u2014 "),wZ=n(rOe,"A",{href:!0});var Gjt=s(wZ);GBr=r(Gjt,"TFConvBertForTokenClassification"),Gjt.forEach(t),OBr=r(rOe," (ConvBERT model)"),rOe.forEach(t),VBr=i(he),u0=n(he,"LI",{});var tOe=s(u0);S3e=n(tOe,"STRONG",{});var Ojt=s(S3e);XBr=r(Ojt,"deberta"),Ojt.forEach(t),zBr=r(tOe," \u2014 "),AZ=n(tOe,"A",{href:!0});var Vjt=s(AZ);WBr=r(Vjt,"TFDebertaForTokenClassification"),Vjt.forEach(t),QBr=r(tOe," (DeBERTa model)"),tOe.forEach(t),HBr=i(he),p0=n(he,"LI",{});var aOe=s(p0);R3e=n(aOe,"STRONG",{});var Xjt=s(R3e);UBr=r(Xjt,"deberta-v2"),Xjt.forEach(t),JBr=r(aOe," \u2014 "),LZ=n(aOe,"A",{href:!0});var zjt=s(LZ);YBr=r(zjt,"TFDebertaV2ForTokenClassification"),zjt.forEach(t),KBr=r(aOe," (DeBERTa-v2 model)"),aOe.forEach(t),ZBr=i(he),_0=n(he,"LI",{});var nOe=s(_0);P3e=n(nOe,"STRONG",{});var Wjt=s(P3e);eIr=r(Wjt,"distilbert"),Wjt.forEach(t),oIr=r(nOe," \u2014 "),yZ=n(nOe,"A",{href:!0});var Qjt=s(yZ);rIr=r(Qjt,"TFDistilBertForTokenClassification"),Qjt.forEach(t),tIr=r(nOe," (DistilBERT model)"),nOe.forEach(t),aIr=i(he),b0=n(he,"LI",{});var sOe=s(b0);B3e=n(sOe,"STRONG",{});var Hjt=s(B3e);nIr=r(Hjt,"electra"),Hjt.forEach(t),sIr=r(sOe," \u2014 "),xZ=n(sOe,"A",{href:!0});var Ujt=s(xZ);lIr=r(Ujt,"TFElectraForTokenClassification"),Ujt.forEach(t),iIr=r(sOe," (ELECTRA model)"),sOe.forEach(t),dIr=i(he),v0=n(he,"LI",{});var lOe=s(v0);I3e=n(lOe,"STRONG",{});var Jjt=s(I3e);cIr=r(Jjt,"flaubert"),Jjt.forEach(t),mIr=r(lOe," \u2014 "),$Z=n(lOe,"A",{href:!0});var Yjt=s($Z);fIr=r(Yjt,"TFFlaubertForTokenClassification"),Yjt.forEach(t),gIr=r(lOe," (FlauBERT model)"),lOe.forEach(t),hIr=i(he),F0=n(he,"LI",{});var iOe=s(F0);N3e=n(iOe,"STRONG",{});var Kjt=s(N3e);uIr=r(Kjt,"funnel"),Kjt.forEach(t),pIr=r(iOe," \u2014 "),kZ=n(iOe,"A",{href:!0});var Zjt=s(kZ);_Ir=r(Zjt,"TFFunnelForTokenClassification"),Zjt.forEach(t),bIr=r(iOe," (Funnel Transformer model)"),iOe.forEach(t),vIr=i(he),T0=n(he,"LI",{});var dOe=s(T0);q3e=n(dOe,"STRONG",{});var eDt=s(q3e);FIr=r(eDt,"layoutlm"),eDt.forEach(t),TIr=r(dOe," \u2014 "),SZ=n(dOe,"A",{href:!0});var oDt=s(SZ);MIr=r(oDt,"TFLayoutLMForTokenClassification"),oDt.forEach(t),EIr=r(dOe," (LayoutLM model)"),dOe.forEach(t),CIr=i(he),M0=n(he,"LI",{});var cOe=s(M0);j3e=n(cOe,"STRONG",{});var rDt=s(j3e);wIr=r(rDt,"longformer"),rDt.forEach(t),AIr=r(cOe," \u2014 "),RZ=n(cOe,"A",{href:!0});var tDt=s(RZ);LIr=r(tDt,"TFLongformerForTokenClassification"),tDt.forEach(t),yIr=r(cOe," (Longformer model)"),cOe.forEach(t),xIr=i(he),E0=n(he,"LI",{});var mOe=s(E0);D3e=n(mOe,"STRONG",{});var aDt=s(D3e);$Ir=r(aDt,"mobilebert"),aDt.forEach(t),kIr=r(mOe," \u2014 "),PZ=n(mOe,"A",{href:!0});var nDt=s(PZ);SIr=r(nDt,"TFMobileBertForTokenClassification"),nDt.forEach(t),RIr=r(mOe," (MobileBERT model)"),mOe.forEach(t),PIr=i(he),C0=n(he,"LI",{});var fOe=s(C0);G3e=n(fOe,"STRONG",{});var sDt=s(G3e);BIr=r(sDt,"mpnet"),sDt.forEach(t),IIr=r(fOe," \u2014 "),BZ=n(fOe,"A",{href:!0});var lDt=s(BZ);NIr=r(lDt,"TFMPNetForTokenClassification"),lDt.forEach(t),qIr=r(fOe," (MPNet model)"),fOe.forEach(t),jIr=i(he),w0=n(he,"LI",{});var gOe=s(w0);O3e=n(gOe,"STRONG",{});var iDt=s(O3e);DIr=r(iDt,"rembert"),iDt.forEach(t),GIr=r(gOe," \u2014 "),IZ=n(gOe,"A",{href:!0});var dDt=s(IZ);OIr=r(dDt,"TFRemBertForTokenClassification"),dDt.forEach(t),VIr=r(gOe," (RemBERT model)"),gOe.forEach(t),XIr=i(he),A0=n(he,"LI",{});var hOe=s(A0);V3e=n(hOe,"STRONG",{});var cDt=s(V3e);zIr=r(cDt,"roberta"),cDt.forEach(t),WIr=r(hOe," \u2014 "),NZ=n(hOe,"A",{href:!0});var mDt=s(NZ);QIr=r(mDt,"TFRobertaForTokenClassification"),mDt.forEach(t),HIr=r(hOe," (RoBERTa model)"),hOe.forEach(t),UIr=i(he),L0=n(he,"LI",{});var uOe=s(L0);X3e=n(uOe,"STRONG",{});var fDt=s(X3e);JIr=r(fDt,"roformer"),fDt.forEach(t),YIr=r(uOe," \u2014 "),qZ=n(uOe,"A",{href:!0});var gDt=s(qZ);KIr=r(gDt,"TFRoFormerForTokenClassification"),gDt.forEach(t),ZIr=r(uOe," (RoFormer model)"),uOe.forEach(t),eNr=i(he),y0=n(he,"LI",{});var pOe=s(y0);z3e=n(pOe,"STRONG",{});var hDt=s(z3e);oNr=r(hDt,"xlm"),hDt.forEach(t),rNr=r(pOe," \u2014 "),jZ=n(pOe,"A",{href:!0});var uDt=s(jZ);tNr=r(uDt,"TFXLMForTokenClassification"),uDt.forEach(t),aNr=r(pOe," (XLM model)"),pOe.forEach(t),nNr=i(he),x0=n(he,"LI",{});var _Oe=s(x0);W3e=n(_Oe,"STRONG",{});var pDt=s(W3e);sNr=r(pDt,"xlm-roberta"),pDt.forEach(t),lNr=r(_Oe," \u2014 "),DZ=n(_Oe,"A",{href:!0});var _Dt=s(DZ);iNr=r(_Dt,"TFXLMRobertaForTokenClassification"),_Dt.forEach(t),dNr=r(_Oe," (XLM-RoBERTa model)"),_Oe.forEach(t),cNr=i(he),$0=n(he,"LI",{});var bOe=s($0);Q3e=n(bOe,"STRONG",{});var bDt=s(Q3e);mNr=r(bDt,"xlnet"),bDt.forEach(t),fNr=r(bOe," \u2014 "),GZ=n(bOe,"A",{href:!0});var vDt=s(GZ);gNr=r(vDt,"TFXLNetForTokenClassification"),vDt.forEach(t),hNr=r(bOe," (XLNet model)"),bOe.forEach(t),he.forEach(t),uNr=i(Kl),T(k0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),bWe=i(m),Gc=n(m,"H2",{class:!0});var LHe=s(Gc);S0=n(LHe,"A",{id:!0,class:!0,href:!0});var FDt=s(S0);H3e=n(FDt,"SPAN",{});var TDt=s(H3e);T(t$.$$.fragment,TDt),TDt.forEach(t),FDt.forEach(t),pNr=i(LHe),U3e=n(LHe,"SPAN",{});var MDt=s(U3e);_Nr=r(MDt,"TFAutoModelForQuestionAnswering"),MDt.forEach(t),LHe.forEach(t),vWe=i(m),gr=n(m,"DIV",{class:!0});var Zl=s(gr);T(a$.$$.fragment,Zl),bNr=i(Zl),Oc=n(Zl,"P",{});var Tae=s(Oc);vNr=r(Tae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),OZ=n(Tae,"A",{href:!0});var EDt=s(OZ);FNr=r(EDt,"from_pretrained()"),EDt.forEach(t),TNr=r(Tae," class method or the "),VZ=n(Tae,"A",{href:!0});var CDt=s(VZ);MNr=r(CDt,"from_config()"),CDt.forEach(t),ENr=r(Tae,` class
method.`),Tae.forEach(t),CNr=i(Zl),n$=n(Zl,"P",{});var yHe=s(n$);wNr=r(yHe,"This class cannot be instantiated directly using "),J3e=n(yHe,"CODE",{});var wDt=s(J3e);ANr=r(wDt,"__init__()"),wDt.forEach(t),LNr=r(yHe," (throws an error)."),yHe.forEach(t),yNr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var BL=s(Xt);T(s$.$$.fragment,BL),xNr=i(BL),Y3e=n(BL,"P",{});var ADt=s(Y3e);$Nr=r(ADt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ADt.forEach(t),kNr=i(BL),Vc=n(BL,"P",{});var Mae=s(Vc);SNr=r(Mae,`Note:
Loading a model from its configuration file does `),K3e=n(Mae,"STRONG",{});var LDt=s(K3e);RNr=r(LDt,"not"),LDt.forEach(t),PNr=r(Mae,` load the model weights. It only affects the
model\u2019s configuration. Use `),XZ=n(Mae,"A",{href:!0});var yDt=s(XZ);BNr=r(yDt,"from_pretrained()"),yDt.forEach(t),INr=r(Mae," to load the model weights."),Mae.forEach(t),NNr=i(BL),T(R0.$$.fragment,BL),BL.forEach(t),qNr=i(Zl),Gr=n(Zl,"DIV",{class:!0});var ei=s(Gr);T(l$.$$.fragment,ei),jNr=i(ei),Z3e=n(ei,"P",{});var xDt=s(Z3e);DNr=r(xDt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xDt.forEach(t),GNr=i(ei),bn=n(ei,"P",{});var IL=s(bn);ONr=r(IL,"The model class to instantiate is selected based on the "),e0e=n(IL,"CODE",{});var $Dt=s(e0e);VNr=r($Dt,"model_type"),$Dt.forEach(t),XNr=r(IL,` property of the config object (either
passed as an argument or loaded from `),o0e=n(IL,"CODE",{});var kDt=s(o0e);zNr=r(kDt,"pretrained_model_name_or_path"),kDt.forEach(t),WNr=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r0e=n(IL,"CODE",{});var SDt=s(r0e);QNr=r(SDt,"pretrained_model_name_or_path"),SDt.forEach(t),HNr=r(IL,":"),IL.forEach(t),UNr=i(ei),ce=n(ei,"UL",{});var ue=s(ce);P0=n(ue,"LI",{});var vOe=s(P0);t0e=n(vOe,"STRONG",{});var RDt=s(t0e);JNr=r(RDt,"albert"),RDt.forEach(t),YNr=r(vOe," \u2014 "),zZ=n(vOe,"A",{href:!0});var PDt=s(zZ);KNr=r(PDt,"TFAlbertForQuestionAnswering"),PDt.forEach(t),ZNr=r(vOe," (ALBERT model)"),vOe.forEach(t),eqr=i(ue),B0=n(ue,"LI",{});var FOe=s(B0);a0e=n(FOe,"STRONG",{});var BDt=s(a0e);oqr=r(BDt,"bert"),BDt.forEach(t),rqr=r(FOe," \u2014 "),WZ=n(FOe,"A",{href:!0});var IDt=s(WZ);tqr=r(IDt,"TFBertForQuestionAnswering"),IDt.forEach(t),aqr=r(FOe," (BERT model)"),FOe.forEach(t),nqr=i(ue),I0=n(ue,"LI",{});var TOe=s(I0);n0e=n(TOe,"STRONG",{});var NDt=s(n0e);sqr=r(NDt,"camembert"),NDt.forEach(t),lqr=r(TOe," \u2014 "),QZ=n(TOe,"A",{href:!0});var qDt=s(QZ);iqr=r(qDt,"TFCamembertForQuestionAnswering"),qDt.forEach(t),dqr=r(TOe," (CamemBERT model)"),TOe.forEach(t),cqr=i(ue),N0=n(ue,"LI",{});var MOe=s(N0);s0e=n(MOe,"STRONG",{});var jDt=s(s0e);mqr=r(jDt,"convbert"),jDt.forEach(t),fqr=r(MOe," \u2014 "),HZ=n(MOe,"A",{href:!0});var DDt=s(HZ);gqr=r(DDt,"TFConvBertForQuestionAnswering"),DDt.forEach(t),hqr=r(MOe," (ConvBERT model)"),MOe.forEach(t),uqr=i(ue),q0=n(ue,"LI",{});var EOe=s(q0);l0e=n(EOe,"STRONG",{});var GDt=s(l0e);pqr=r(GDt,"deberta"),GDt.forEach(t),_qr=r(EOe," \u2014 "),UZ=n(EOe,"A",{href:!0});var ODt=s(UZ);bqr=r(ODt,"TFDebertaForQuestionAnswering"),ODt.forEach(t),vqr=r(EOe," (DeBERTa model)"),EOe.forEach(t),Fqr=i(ue),j0=n(ue,"LI",{});var COe=s(j0);i0e=n(COe,"STRONG",{});var VDt=s(i0e);Tqr=r(VDt,"deberta-v2"),VDt.forEach(t),Mqr=r(COe," \u2014 "),JZ=n(COe,"A",{href:!0});var XDt=s(JZ);Eqr=r(XDt,"TFDebertaV2ForQuestionAnswering"),XDt.forEach(t),Cqr=r(COe," (DeBERTa-v2 model)"),COe.forEach(t),wqr=i(ue),D0=n(ue,"LI",{});var wOe=s(D0);d0e=n(wOe,"STRONG",{});var zDt=s(d0e);Aqr=r(zDt,"distilbert"),zDt.forEach(t),Lqr=r(wOe," \u2014 "),YZ=n(wOe,"A",{href:!0});var WDt=s(YZ);yqr=r(WDt,"TFDistilBertForQuestionAnswering"),WDt.forEach(t),xqr=r(wOe," (DistilBERT model)"),wOe.forEach(t),$qr=i(ue),G0=n(ue,"LI",{});var AOe=s(G0);c0e=n(AOe,"STRONG",{});var QDt=s(c0e);kqr=r(QDt,"electra"),QDt.forEach(t),Sqr=r(AOe," \u2014 "),KZ=n(AOe,"A",{href:!0});var HDt=s(KZ);Rqr=r(HDt,"TFElectraForQuestionAnswering"),HDt.forEach(t),Pqr=r(AOe," (ELECTRA model)"),AOe.forEach(t),Bqr=i(ue),O0=n(ue,"LI",{});var LOe=s(O0);m0e=n(LOe,"STRONG",{});var UDt=s(m0e);Iqr=r(UDt,"flaubert"),UDt.forEach(t),Nqr=r(LOe," \u2014 "),ZZ=n(LOe,"A",{href:!0});var JDt=s(ZZ);qqr=r(JDt,"TFFlaubertForQuestionAnsweringSimple"),JDt.forEach(t),jqr=r(LOe," (FlauBERT model)"),LOe.forEach(t),Dqr=i(ue),V0=n(ue,"LI",{});var yOe=s(V0);f0e=n(yOe,"STRONG",{});var YDt=s(f0e);Gqr=r(YDt,"funnel"),YDt.forEach(t),Oqr=r(yOe," \u2014 "),eee=n(yOe,"A",{href:!0});var KDt=s(eee);Vqr=r(KDt,"TFFunnelForQuestionAnswering"),KDt.forEach(t),Xqr=r(yOe," (Funnel Transformer model)"),yOe.forEach(t),zqr=i(ue),X0=n(ue,"LI",{});var xOe=s(X0);g0e=n(xOe,"STRONG",{});var ZDt=s(g0e);Wqr=r(ZDt,"gptj"),ZDt.forEach(t),Qqr=r(xOe," \u2014 "),oee=n(xOe,"A",{href:!0});var eGt=s(oee);Hqr=r(eGt,"TFGPTJForQuestionAnswering"),eGt.forEach(t),Uqr=r(xOe," (GPT-J model)"),xOe.forEach(t),Jqr=i(ue),z0=n(ue,"LI",{});var $Oe=s(z0);h0e=n($Oe,"STRONG",{});var oGt=s(h0e);Yqr=r(oGt,"longformer"),oGt.forEach(t),Kqr=r($Oe," \u2014 "),ree=n($Oe,"A",{href:!0});var rGt=s(ree);Zqr=r(rGt,"TFLongformerForQuestionAnswering"),rGt.forEach(t),ejr=r($Oe," (Longformer model)"),$Oe.forEach(t),ojr=i(ue),W0=n(ue,"LI",{});var kOe=s(W0);u0e=n(kOe,"STRONG",{});var tGt=s(u0e);rjr=r(tGt,"mobilebert"),tGt.forEach(t),tjr=r(kOe," \u2014 "),tee=n(kOe,"A",{href:!0});var aGt=s(tee);ajr=r(aGt,"TFMobileBertForQuestionAnswering"),aGt.forEach(t),njr=r(kOe," (MobileBERT model)"),kOe.forEach(t),sjr=i(ue),Q0=n(ue,"LI",{});var SOe=s(Q0);p0e=n(SOe,"STRONG",{});var nGt=s(p0e);ljr=r(nGt,"mpnet"),nGt.forEach(t),ijr=r(SOe," \u2014 "),aee=n(SOe,"A",{href:!0});var sGt=s(aee);djr=r(sGt,"TFMPNetForQuestionAnswering"),sGt.forEach(t),cjr=r(SOe," (MPNet model)"),SOe.forEach(t),mjr=i(ue),H0=n(ue,"LI",{});var ROe=s(H0);_0e=n(ROe,"STRONG",{});var lGt=s(_0e);fjr=r(lGt,"rembert"),lGt.forEach(t),gjr=r(ROe," \u2014 "),nee=n(ROe,"A",{href:!0});var iGt=s(nee);hjr=r(iGt,"TFRemBertForQuestionAnswering"),iGt.forEach(t),ujr=r(ROe," (RemBERT model)"),ROe.forEach(t),pjr=i(ue),U0=n(ue,"LI",{});var POe=s(U0);b0e=n(POe,"STRONG",{});var dGt=s(b0e);_jr=r(dGt,"roberta"),dGt.forEach(t),bjr=r(POe," \u2014 "),see=n(POe,"A",{href:!0});var cGt=s(see);vjr=r(cGt,"TFRobertaForQuestionAnswering"),cGt.forEach(t),Fjr=r(POe," (RoBERTa model)"),POe.forEach(t),Tjr=i(ue),J0=n(ue,"LI",{});var BOe=s(J0);v0e=n(BOe,"STRONG",{});var mGt=s(v0e);Mjr=r(mGt,"roformer"),mGt.forEach(t),Ejr=r(BOe," \u2014 "),lee=n(BOe,"A",{href:!0});var fGt=s(lee);Cjr=r(fGt,"TFRoFormerForQuestionAnswering"),fGt.forEach(t),wjr=r(BOe," (RoFormer model)"),BOe.forEach(t),Ajr=i(ue),Y0=n(ue,"LI",{});var IOe=s(Y0);F0e=n(IOe,"STRONG",{});var gGt=s(F0e);Ljr=r(gGt,"xlm"),gGt.forEach(t),yjr=r(IOe," \u2014 "),iee=n(IOe,"A",{href:!0});var hGt=s(iee);xjr=r(hGt,"TFXLMForQuestionAnsweringSimple"),hGt.forEach(t),$jr=r(IOe," (XLM model)"),IOe.forEach(t),kjr=i(ue),K0=n(ue,"LI",{});var NOe=s(K0);T0e=n(NOe,"STRONG",{});var uGt=s(T0e);Sjr=r(uGt,"xlm-roberta"),uGt.forEach(t),Rjr=r(NOe," \u2014 "),dee=n(NOe,"A",{href:!0});var pGt=s(dee);Pjr=r(pGt,"TFXLMRobertaForQuestionAnswering"),pGt.forEach(t),Bjr=r(NOe," (XLM-RoBERTa model)"),NOe.forEach(t),Ijr=i(ue),Z0=n(ue,"LI",{});var qOe=s(Z0);M0e=n(qOe,"STRONG",{});var _Gt=s(M0e);Njr=r(_Gt,"xlnet"),_Gt.forEach(t),qjr=r(qOe," \u2014 "),cee=n(qOe,"A",{href:!0});var bGt=s(cee);jjr=r(bGt,"TFXLNetForQuestionAnsweringSimple"),bGt.forEach(t),Djr=r(qOe," (XLNet model)"),qOe.forEach(t),ue.forEach(t),Gjr=i(ei),T(ew.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),FWe=i(m),Xc=n(m,"H2",{class:!0});var xHe=s(Xc);ow=n(xHe,"A",{id:!0,class:!0,href:!0});var vGt=s(ow);E0e=n(vGt,"SPAN",{});var FGt=s(E0e);T(i$.$$.fragment,FGt),FGt.forEach(t),vGt.forEach(t),Ojr=i(xHe),C0e=n(xHe,"SPAN",{});var TGt=s(C0e);Vjr=r(TGt,"TFAutoModelForVision2Seq"),TGt.forEach(t),xHe.forEach(t),TWe=i(m),hr=n(m,"DIV",{class:!0});var oi=s(hr);T(d$.$$.fragment,oi),Xjr=i(oi),zc=n(oi,"P",{});var Eae=s(zc);zjr=r(Eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mee=n(Eae,"A",{href:!0});var MGt=s(mee);Wjr=r(MGt,"from_pretrained()"),MGt.forEach(t),Qjr=r(Eae," class method or the "),fee=n(Eae,"A",{href:!0});var EGt=s(fee);Hjr=r(EGt,"from_config()"),EGt.forEach(t),Ujr=r(Eae,` class
method.`),Eae.forEach(t),Jjr=i(oi),c$=n(oi,"P",{});var $He=s(c$);Yjr=r($He,"This class cannot be instantiated directly using "),w0e=n($He,"CODE",{});var CGt=s(w0e);Kjr=r(CGt,"__init__()"),CGt.forEach(t),Zjr=r($He," (throws an error)."),$He.forEach(t),eDr=i(oi),zt=n(oi,"DIV",{class:!0});var NL=s(zt);T(m$.$$.fragment,NL),oDr=i(NL),A0e=n(NL,"P",{});var wGt=s(A0e);rDr=r(wGt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wGt.forEach(t),tDr=i(NL),Wc=n(NL,"P",{});var Cae=s(Wc);aDr=r(Cae,`Note:
Loading a model from its configuration file does `),L0e=n(Cae,"STRONG",{});var AGt=s(L0e);nDr=r(AGt,"not"),AGt.forEach(t),sDr=r(Cae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=n(Cae,"A",{href:!0});var LGt=s(gee);lDr=r(LGt,"from_pretrained()"),LGt.forEach(t),iDr=r(Cae," to load the model weights."),Cae.forEach(t),dDr=i(NL),T(rw.$$.fragment,NL),NL.forEach(t),cDr=i(oi),Or=n(oi,"DIV",{class:!0});var ri=s(Or);T(f$.$$.fragment,ri),mDr=i(ri),y0e=n(ri,"P",{});var yGt=s(y0e);fDr=r(yGt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yGt.forEach(t),gDr=i(ri),vn=n(ri,"P",{});var qL=s(vn);hDr=r(qL,"The model class to instantiate is selected based on the "),x0e=n(qL,"CODE",{});var xGt=s(x0e);uDr=r(xGt,"model_type"),xGt.forEach(t),pDr=r(qL,` property of the config object (either
passed as an argument or loaded from `),$0e=n(qL,"CODE",{});var $Gt=s($0e);_Dr=r($Gt,"pretrained_model_name_or_path"),$Gt.forEach(t),bDr=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k0e=n(qL,"CODE",{});var kGt=s(k0e);vDr=r(kGt,"pretrained_model_name_or_path"),kGt.forEach(t),FDr=r(qL,":"),qL.forEach(t),TDr=i(ri),S0e=n(ri,"UL",{});var SGt=s(S0e);tw=n(SGt,"LI",{});var jOe=s(tw);R0e=n(jOe,"STRONG",{});var RGt=s(R0e);MDr=r(RGt,"vision-encoder-decoder"),RGt.forEach(t),EDr=r(jOe," \u2014 "),hee=n(jOe,"A",{href:!0});var PGt=s(hee);CDr=r(PGt,"TFVisionEncoderDecoderModel"),PGt.forEach(t),wDr=r(jOe," (Vision Encoder decoder model)"),jOe.forEach(t),SGt.forEach(t),ADr=i(ri),T(aw.$$.fragment,ri),ri.forEach(t),oi.forEach(t),MWe=i(m),Qc=n(m,"H2",{class:!0});var kHe=s(Qc);nw=n(kHe,"A",{id:!0,class:!0,href:!0});var BGt=s(nw);P0e=n(BGt,"SPAN",{});var IGt=s(P0e);T(g$.$$.fragment,IGt),IGt.forEach(t),BGt.forEach(t),LDr=i(kHe),B0e=n(kHe,"SPAN",{});var NGt=s(B0e);yDr=r(NGt,"TFAutoModelForSpeechSeq2Seq"),NGt.forEach(t),kHe.forEach(t),EWe=i(m),ur=n(m,"DIV",{class:!0});var ti=s(ur);T(h$.$$.fragment,ti),xDr=i(ti),Hc=n(ti,"P",{});var wae=s(Hc);$Dr=r(wae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uee=n(wae,"A",{href:!0});var qGt=s(uee);kDr=r(qGt,"from_pretrained()"),qGt.forEach(t),SDr=r(wae," class method or the "),pee=n(wae,"A",{href:!0});var jGt=s(pee);RDr=r(jGt,"from_config()"),jGt.forEach(t),PDr=r(wae,` class
method.`),wae.forEach(t),BDr=i(ti),u$=n(ti,"P",{});var SHe=s(u$);IDr=r(SHe,"This class cannot be instantiated directly using "),I0e=n(SHe,"CODE",{});var DGt=s(I0e);NDr=r(DGt,"__init__()"),DGt.forEach(t),qDr=r(SHe," (throws an error)."),SHe.forEach(t),jDr=i(ti),Wt=n(ti,"DIV",{class:!0});var jL=s(Wt);T(p$.$$.fragment,jL),DDr=i(jL),N0e=n(jL,"P",{});var GGt=s(N0e);GDr=r(GGt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),GGt.forEach(t),ODr=i(jL),Uc=n(jL,"P",{});var Aae=s(Uc);VDr=r(Aae,`Note:
Loading a model from its configuration file does `),q0e=n(Aae,"STRONG",{});var OGt=s(q0e);XDr=r(OGt,"not"),OGt.forEach(t),zDr=r(Aae,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=n(Aae,"A",{href:!0});var VGt=s(_ee);WDr=r(VGt,"from_pretrained()"),VGt.forEach(t),QDr=r(Aae," to load the model weights."),Aae.forEach(t),HDr=i(jL),T(sw.$$.fragment,jL),jL.forEach(t),UDr=i(ti),Vr=n(ti,"DIV",{class:!0});var ai=s(Vr);T(_$.$$.fragment,ai),JDr=i(ai),j0e=n(ai,"P",{});var XGt=s(j0e);YDr=r(XGt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),XGt.forEach(t),KDr=i(ai),Fn=n(ai,"P",{});var DL=s(Fn);ZDr=r(DL,"The model class to instantiate is selected based on the "),D0e=n(DL,"CODE",{});var zGt=s(D0e);eGr=r(zGt,"model_type"),zGt.forEach(t),oGr=r(DL,` property of the config object (either
passed as an argument or loaded from `),G0e=n(DL,"CODE",{});var WGt=s(G0e);rGr=r(WGt,"pretrained_model_name_or_path"),WGt.forEach(t),tGr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O0e=n(DL,"CODE",{});var QGt=s(O0e);aGr=r(QGt,"pretrained_model_name_or_path"),QGt.forEach(t),nGr=r(DL,":"),DL.forEach(t),sGr=i(ai),V0e=n(ai,"UL",{});var HGt=s(V0e);lw=n(HGt,"LI",{});var DOe=s(lw);X0e=n(DOe,"STRONG",{});var UGt=s(X0e);lGr=r(UGt,"speech_to_text"),UGt.forEach(t),iGr=r(DOe," \u2014 "),bee=n(DOe,"A",{href:!0});var JGt=s(bee);dGr=r(JGt,"TFSpeech2TextForConditionalGeneration"),JGt.forEach(t),cGr=r(DOe," (Speech2Text model)"),DOe.forEach(t),HGt.forEach(t),mGr=i(ai),T(iw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),CWe=i(m),Jc=n(m,"H2",{class:!0});var RHe=s(Jc);dw=n(RHe,"A",{id:!0,class:!0,href:!0});var YGt=s(dw);z0e=n(YGt,"SPAN",{});var KGt=s(z0e);T(b$.$$.fragment,KGt),KGt.forEach(t),YGt.forEach(t),fGr=i(RHe),W0e=n(RHe,"SPAN",{});var ZGt=s(W0e);gGr=r(ZGt,"FlaxAutoModel"),ZGt.forEach(t),RHe.forEach(t),wWe=i(m),pr=n(m,"DIV",{class:!0});var ni=s(pr);T(v$.$$.fragment,ni),hGr=i(ni),Yc=n(ni,"P",{});var Lae=s(Yc);uGr=r(Lae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vee=n(Lae,"A",{href:!0});var eOt=s(vee);pGr=r(eOt,"from_pretrained()"),eOt.forEach(t),_Gr=r(Lae," class method or the "),Fee=n(Lae,"A",{href:!0});var oOt=s(Fee);bGr=r(oOt,"from_config()"),oOt.forEach(t),vGr=r(Lae,` class
method.`),Lae.forEach(t),FGr=i(ni),F$=n(ni,"P",{});var PHe=s(F$);TGr=r(PHe,"This class cannot be instantiated directly using "),Q0e=n(PHe,"CODE",{});var rOt=s(Q0e);MGr=r(rOt,"__init__()"),rOt.forEach(t),EGr=r(PHe," (throws an error)."),PHe.forEach(t),CGr=i(ni),Qt=n(ni,"DIV",{class:!0});var GL=s(Qt);T(T$.$$.fragment,GL),wGr=i(GL),H0e=n(GL,"P",{});var tOt=s(H0e);AGr=r(tOt,"Instantiates one of the base model classes of the library from a configuration."),tOt.forEach(t),LGr=i(GL),Kc=n(GL,"P",{});var yae=s(Kc);yGr=r(yae,`Note:
Loading a model from its configuration file does `),U0e=n(yae,"STRONG",{});var aOt=s(U0e);xGr=r(aOt,"not"),aOt.forEach(t),$Gr=r(yae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tee=n(yae,"A",{href:!0});var nOt=s(Tee);kGr=r(nOt,"from_pretrained()"),nOt.forEach(t),SGr=r(yae," to load the model weights."),yae.forEach(t),RGr=i(GL),T(cw.$$.fragment,GL),GL.forEach(t),PGr=i(ni),Xr=n(ni,"DIV",{class:!0});var si=s(Xr);T(M$.$$.fragment,si),BGr=i(si),J0e=n(si,"P",{});var sOt=s(J0e);IGr=r(sOt,"Instantiate one of the base model classes of the library from a pretrained model."),sOt.forEach(t),NGr=i(si),Tn=n(si,"P",{});var OL=s(Tn);qGr=r(OL,"The model class to instantiate is selected based on the "),Y0e=n(OL,"CODE",{});var lOt=s(Y0e);jGr=r(lOt,"model_type"),lOt.forEach(t),DGr=r(OL,` property of the config object (either
passed as an argument or loaded from `),K0e=n(OL,"CODE",{});var iOt=s(K0e);GGr=r(iOt,"pretrained_model_name_or_path"),iOt.forEach(t),OGr=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(OL,"CODE",{});var dOt=s(Z0e);VGr=r(dOt,"pretrained_model_name_or_path"),dOt.forEach(t),XGr=r(OL,":"),OL.forEach(t),zGr=i(si),oe=n(si,"UL",{});var ae=s(oe);mw=n(ae,"LI",{});var GOe=s(mw);ewe=n(GOe,"STRONG",{});var cOt=s(ewe);WGr=r(cOt,"albert"),cOt.forEach(t),QGr=r(GOe," \u2014 "),Mee=n(GOe,"A",{href:!0});var mOt=s(Mee);HGr=r(mOt,"FlaxAlbertModel"),mOt.forEach(t),UGr=r(GOe," (ALBERT model)"),GOe.forEach(t),JGr=i(ae),fw=n(ae,"LI",{});var OOe=s(fw);owe=n(OOe,"STRONG",{});var fOt=s(owe);YGr=r(fOt,"bart"),fOt.forEach(t),KGr=r(OOe," \u2014 "),Eee=n(OOe,"A",{href:!0});var gOt=s(Eee);ZGr=r(gOt,"FlaxBartModel"),gOt.forEach(t),eOr=r(OOe," (BART model)"),OOe.forEach(t),oOr=i(ae),gw=n(ae,"LI",{});var VOe=s(gw);rwe=n(VOe,"STRONG",{});var hOt=s(rwe);rOr=r(hOt,"beit"),hOt.forEach(t),tOr=r(VOe," \u2014 "),Cee=n(VOe,"A",{href:!0});var uOt=s(Cee);aOr=r(uOt,"FlaxBeitModel"),uOt.forEach(t),nOr=r(VOe," (BEiT model)"),VOe.forEach(t),sOr=i(ae),hw=n(ae,"LI",{});var XOe=s(hw);twe=n(XOe,"STRONG",{});var pOt=s(twe);lOr=r(pOt,"bert"),pOt.forEach(t),iOr=r(XOe," \u2014 "),wee=n(XOe,"A",{href:!0});var _Ot=s(wee);dOr=r(_Ot,"FlaxBertModel"),_Ot.forEach(t),cOr=r(XOe," (BERT model)"),XOe.forEach(t),mOr=i(ae),uw=n(ae,"LI",{});var zOe=s(uw);awe=n(zOe,"STRONG",{});var bOt=s(awe);fOr=r(bOt,"big_bird"),bOt.forEach(t),gOr=r(zOe," \u2014 "),Aee=n(zOe,"A",{href:!0});var vOt=s(Aee);hOr=r(vOt,"FlaxBigBirdModel"),vOt.forEach(t),uOr=r(zOe," (BigBird model)"),zOe.forEach(t),pOr=i(ae),pw=n(ae,"LI",{});var WOe=s(pw);nwe=n(WOe,"STRONG",{});var FOt=s(nwe);_Or=r(FOt,"blenderbot"),FOt.forEach(t),bOr=r(WOe," \u2014 "),Lee=n(WOe,"A",{href:!0});var TOt=s(Lee);vOr=r(TOt,"FlaxBlenderbotModel"),TOt.forEach(t),FOr=r(WOe," (Blenderbot model)"),WOe.forEach(t),TOr=i(ae),_w=n(ae,"LI",{});var QOe=s(_w);swe=n(QOe,"STRONG",{});var MOt=s(swe);MOr=r(MOt,"blenderbot-small"),MOt.forEach(t),EOr=r(QOe," \u2014 "),yee=n(QOe,"A",{href:!0});var EOt=s(yee);COr=r(EOt,"FlaxBlenderbotSmallModel"),EOt.forEach(t),wOr=r(QOe," (BlenderbotSmall model)"),QOe.forEach(t),AOr=i(ae),bw=n(ae,"LI",{});var HOe=s(bw);lwe=n(HOe,"STRONG",{});var COt=s(lwe);LOr=r(COt,"clip"),COt.forEach(t),yOr=r(HOe," \u2014 "),xee=n(HOe,"A",{href:!0});var wOt=s(xee);xOr=r(wOt,"FlaxCLIPModel"),wOt.forEach(t),$Or=r(HOe," (CLIP model)"),HOe.forEach(t),kOr=i(ae),vw=n(ae,"LI",{});var UOe=s(vw);iwe=n(UOe,"STRONG",{});var AOt=s(iwe);SOr=r(AOt,"distilbert"),AOt.forEach(t),ROr=r(UOe," \u2014 "),$ee=n(UOe,"A",{href:!0});var LOt=s($ee);POr=r(LOt,"FlaxDistilBertModel"),LOt.forEach(t),BOr=r(UOe," (DistilBERT model)"),UOe.forEach(t),IOr=i(ae),Fw=n(ae,"LI",{});var JOe=s(Fw);dwe=n(JOe,"STRONG",{});var yOt=s(dwe);NOr=r(yOt,"electra"),yOt.forEach(t),qOr=r(JOe," \u2014 "),kee=n(JOe,"A",{href:!0});var xOt=s(kee);jOr=r(xOt,"FlaxElectraModel"),xOt.forEach(t),DOr=r(JOe," (ELECTRA model)"),JOe.forEach(t),GOr=i(ae),Tw=n(ae,"LI",{});var YOe=s(Tw);cwe=n(YOe,"STRONG",{});var $Ot=s(cwe);OOr=r($Ot,"gpt2"),$Ot.forEach(t),VOr=r(YOe," \u2014 "),See=n(YOe,"A",{href:!0});var kOt=s(See);XOr=r(kOt,"FlaxGPT2Model"),kOt.forEach(t),zOr=r(YOe," (OpenAI GPT-2 model)"),YOe.forEach(t),WOr=i(ae),Mw=n(ae,"LI",{});var KOe=s(Mw);mwe=n(KOe,"STRONG",{});var SOt=s(mwe);QOr=r(SOt,"gpt_neo"),SOt.forEach(t),HOr=r(KOe," \u2014 "),Ree=n(KOe,"A",{href:!0});var ROt=s(Ree);UOr=r(ROt,"FlaxGPTNeoModel"),ROt.forEach(t),JOr=r(KOe," (GPT Neo model)"),KOe.forEach(t),YOr=i(ae),Ew=n(ae,"LI",{});var ZOe=s(Ew);fwe=n(ZOe,"STRONG",{});var POt=s(fwe);KOr=r(POt,"gptj"),POt.forEach(t),ZOr=r(ZOe," \u2014 "),Pee=n(ZOe,"A",{href:!0});var BOt=s(Pee);eVr=r(BOt,"FlaxGPTJModel"),BOt.forEach(t),oVr=r(ZOe," (GPT-J model)"),ZOe.forEach(t),rVr=i(ae),Cw=n(ae,"LI",{});var eVe=s(Cw);gwe=n(eVe,"STRONG",{});var IOt=s(gwe);tVr=r(IOt,"longt5"),IOt.forEach(t),aVr=r(eVe," \u2014 "),Bee=n(eVe,"A",{href:!0});var NOt=s(Bee);nVr=r(NOt,"FlaxLongT5Model"),NOt.forEach(t),sVr=r(eVe," (LongT5 model)"),eVe.forEach(t),lVr=i(ae),ww=n(ae,"LI",{});var oVe=s(ww);hwe=n(oVe,"STRONG",{});var qOt=s(hwe);iVr=r(qOt,"marian"),qOt.forEach(t),dVr=r(oVe," \u2014 "),Iee=n(oVe,"A",{href:!0});var jOt=s(Iee);cVr=r(jOt,"FlaxMarianModel"),jOt.forEach(t),mVr=r(oVe," (Marian model)"),oVe.forEach(t),fVr=i(ae),Aw=n(ae,"LI",{});var rVe=s(Aw);uwe=n(rVe,"STRONG",{});var DOt=s(uwe);gVr=r(DOt,"mbart"),DOt.forEach(t),hVr=r(rVe," \u2014 "),Nee=n(rVe,"A",{href:!0});var GOt=s(Nee);uVr=r(GOt,"FlaxMBartModel"),GOt.forEach(t),pVr=r(rVe," (mBART model)"),rVe.forEach(t),_Vr=i(ae),Lw=n(ae,"LI",{});var tVe=s(Lw);pwe=n(tVe,"STRONG",{});var OOt=s(pwe);bVr=r(OOt,"mt5"),OOt.forEach(t),vVr=r(tVe," \u2014 "),qee=n(tVe,"A",{href:!0});var VOt=s(qee);FVr=r(VOt,"FlaxMT5Model"),VOt.forEach(t),TVr=r(tVe," (MT5 model)"),tVe.forEach(t),MVr=i(ae),yw=n(ae,"LI",{});var aVe=s(yw);_we=n(aVe,"STRONG",{});var XOt=s(_we);EVr=r(XOt,"opt"),XOt.forEach(t),CVr=r(aVe," \u2014 "),jee=n(aVe,"A",{href:!0});var zOt=s(jee);wVr=r(zOt,"FlaxOPTModel"),zOt.forEach(t),AVr=r(aVe," (OPT model)"),aVe.forEach(t),LVr=i(ae),xw=n(ae,"LI",{});var nVe=s(xw);bwe=n(nVe,"STRONG",{});var WOt=s(bwe);yVr=r(WOt,"pegasus"),WOt.forEach(t),xVr=r(nVe," \u2014 "),Dee=n(nVe,"A",{href:!0});var QOt=s(Dee);$Vr=r(QOt,"FlaxPegasusModel"),QOt.forEach(t),kVr=r(nVe," (Pegasus model)"),nVe.forEach(t),SVr=i(ae),$w=n(ae,"LI",{});var sVe=s($w);vwe=n(sVe,"STRONG",{});var HOt=s(vwe);RVr=r(HOt,"roberta"),HOt.forEach(t),PVr=r(sVe," \u2014 "),Gee=n(sVe,"A",{href:!0});var UOt=s(Gee);BVr=r(UOt,"FlaxRobertaModel"),UOt.forEach(t),IVr=r(sVe," (RoBERTa model)"),sVe.forEach(t),NVr=i(ae),kw=n(ae,"LI",{});var lVe=s(kw);Fwe=n(lVe,"STRONG",{});var JOt=s(Fwe);qVr=r(JOt,"roformer"),JOt.forEach(t),jVr=r(lVe," \u2014 "),Oee=n(lVe,"A",{href:!0});var YOt=s(Oee);DVr=r(YOt,"FlaxRoFormerModel"),YOt.forEach(t),GVr=r(lVe," (RoFormer model)"),lVe.forEach(t),OVr=i(ae),Sw=n(ae,"LI",{});var iVe=s(Sw);Twe=n(iVe,"STRONG",{});var KOt=s(Twe);VVr=r(KOt,"t5"),KOt.forEach(t),XVr=r(iVe," \u2014 "),Vee=n(iVe,"A",{href:!0});var ZOt=s(Vee);zVr=r(ZOt,"FlaxT5Model"),ZOt.forEach(t),WVr=r(iVe," (T5 model)"),iVe.forEach(t),QVr=i(ae),Rw=n(ae,"LI",{});var dVe=s(Rw);Mwe=n(dVe,"STRONG",{});var eVt=s(Mwe);HVr=r(eVt,"vision-text-dual-encoder"),eVt.forEach(t),UVr=r(dVe," \u2014 "),Xee=n(dVe,"A",{href:!0});var oVt=s(Xee);JVr=r(oVt,"FlaxVisionTextDualEncoderModel"),oVt.forEach(t),YVr=r(dVe," (VisionTextDualEncoder model)"),dVe.forEach(t),KVr=i(ae),Pw=n(ae,"LI",{});var cVe=s(Pw);Ewe=n(cVe,"STRONG",{});var rVt=s(Ewe);ZVr=r(rVt,"vit"),rVt.forEach(t),eXr=r(cVe," \u2014 "),zee=n(cVe,"A",{href:!0});var tVt=s(zee);oXr=r(tVt,"FlaxViTModel"),tVt.forEach(t),rXr=r(cVe," (ViT model)"),cVe.forEach(t),tXr=i(ae),Bw=n(ae,"LI",{});var mVe=s(Bw);Cwe=n(mVe,"STRONG",{});var aVt=s(Cwe);aXr=r(aVt,"wav2vec2"),aVt.forEach(t),nXr=r(mVe," \u2014 "),Wee=n(mVe,"A",{href:!0});var nVt=s(Wee);sXr=r(nVt,"FlaxWav2Vec2Model"),nVt.forEach(t),lXr=r(mVe," (Wav2Vec2 model)"),mVe.forEach(t),iXr=i(ae),Iw=n(ae,"LI",{});var fVe=s(Iw);wwe=n(fVe,"STRONG",{});var sVt=s(wwe);dXr=r(sVt,"xglm"),sVt.forEach(t),cXr=r(fVe," \u2014 "),Qee=n(fVe,"A",{href:!0});var lVt=s(Qee);mXr=r(lVt,"FlaxXGLMModel"),lVt.forEach(t),fXr=r(fVe," (XGLM model)"),fVe.forEach(t),gXr=i(ae),Nw=n(ae,"LI",{});var gVe=s(Nw);Awe=n(gVe,"STRONG",{});var iVt=s(Awe);hXr=r(iVt,"xlm-roberta"),iVt.forEach(t),uXr=r(gVe," \u2014 "),Hee=n(gVe,"A",{href:!0});var dVt=s(Hee);pXr=r(dVt,"FlaxXLMRobertaModel"),dVt.forEach(t),_Xr=r(gVe," (XLM-RoBERTa model)"),gVe.forEach(t),ae.forEach(t),bXr=i(si),T(qw.$$.fragment,si),si.forEach(t),ni.forEach(t),AWe=i(m),Zc=n(m,"H2",{class:!0});var BHe=s(Zc);jw=n(BHe,"A",{id:!0,class:!0,href:!0});var cVt=s(jw);Lwe=n(cVt,"SPAN",{});var mVt=s(Lwe);T(E$.$$.fragment,mVt),mVt.forEach(t),cVt.forEach(t),vXr=i(BHe),ywe=n(BHe,"SPAN",{});var fVt=s(ywe);FXr=r(fVt,"FlaxAutoModelForCausalLM"),fVt.forEach(t),BHe.forEach(t),LWe=i(m),_r=n(m,"DIV",{class:!0});var li=s(_r);T(C$.$$.fragment,li),TXr=i(li),em=n(li,"P",{});var xae=s(em);MXr=r(xae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Uee=n(xae,"A",{href:!0});var gVt=s(Uee);EXr=r(gVt,"from_pretrained()"),gVt.forEach(t),CXr=r(xae," class method or the "),Jee=n(xae,"A",{href:!0});var hVt=s(Jee);wXr=r(hVt,"from_config()"),hVt.forEach(t),AXr=r(xae,` class
method.`),xae.forEach(t),LXr=i(li),w$=n(li,"P",{});var IHe=s(w$);yXr=r(IHe,"This class cannot be instantiated directly using "),xwe=n(IHe,"CODE",{});var uVt=s(xwe);xXr=r(uVt,"__init__()"),uVt.forEach(t),$Xr=r(IHe," (throws an error)."),IHe.forEach(t),kXr=i(li),Ht=n(li,"DIV",{class:!0});var VL=s(Ht);T(A$.$$.fragment,VL),SXr=i(VL),$we=n(VL,"P",{});var pVt=s($we);RXr=r(pVt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pVt.forEach(t),PXr=i(VL),om=n(VL,"P",{});var $ae=s(om);BXr=r($ae,`Note:
Loading a model from its configuration file does `),kwe=n($ae,"STRONG",{});var _Vt=s(kwe);IXr=r(_Vt,"not"),_Vt.forEach(t),NXr=r($ae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yee=n($ae,"A",{href:!0});var bVt=s(Yee);qXr=r(bVt,"from_pretrained()"),bVt.forEach(t),jXr=r($ae," to load the model weights."),$ae.forEach(t),DXr=i(VL),T(Dw.$$.fragment,VL),VL.forEach(t),GXr=i(li),zr=n(li,"DIV",{class:!0});var ii=s(zr);T(L$.$$.fragment,ii),OXr=i(ii),Swe=n(ii,"P",{});var vVt=s(Swe);VXr=r(vVt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vVt.forEach(t),XXr=i(ii),Mn=n(ii,"P",{});var XL=s(Mn);zXr=r(XL,"The model class to instantiate is selected based on the "),Rwe=n(XL,"CODE",{});var FVt=s(Rwe);WXr=r(FVt,"model_type"),FVt.forEach(t),QXr=r(XL,` property of the config object (either
passed as an argument or loaded from `),Pwe=n(XL,"CODE",{});var TVt=s(Pwe);HXr=r(TVt,"pretrained_model_name_or_path"),TVt.forEach(t),UXr=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bwe=n(XL,"CODE",{});var MVt=s(Bwe);JXr=r(MVt,"pretrained_model_name_or_path"),MVt.forEach(t),YXr=r(XL,":"),XL.forEach(t),KXr=i(ii),xe=n(ii,"UL",{});var Ne=s(xe);Gw=n(Ne,"LI",{});var hVe=s(Gw);Iwe=n(hVe,"STRONG",{});var EVt=s(Iwe);ZXr=r(EVt,"bart"),EVt.forEach(t),ezr=r(hVe," \u2014 "),Kee=n(hVe,"A",{href:!0});var CVt=s(Kee);ozr=r(CVt,"FlaxBartForCausalLM"),CVt.forEach(t),rzr=r(hVe," (BART model)"),hVe.forEach(t),tzr=i(Ne),Ow=n(Ne,"LI",{});var uVe=s(Ow);Nwe=n(uVe,"STRONG",{});var wVt=s(Nwe);azr=r(wVt,"bert"),wVt.forEach(t),nzr=r(uVe," \u2014 "),Zee=n(uVe,"A",{href:!0});var AVt=s(Zee);szr=r(AVt,"FlaxBertForCausalLM"),AVt.forEach(t),lzr=r(uVe," (BERT model)"),uVe.forEach(t),izr=i(Ne),Vw=n(Ne,"LI",{});var pVe=s(Vw);qwe=n(pVe,"STRONG",{});var LVt=s(qwe);dzr=r(LVt,"big_bird"),LVt.forEach(t),czr=r(pVe," \u2014 "),eoe=n(pVe,"A",{href:!0});var yVt=s(eoe);mzr=r(yVt,"FlaxBigBirdForCausalLM"),yVt.forEach(t),fzr=r(pVe," (BigBird model)"),pVe.forEach(t),gzr=i(Ne),Xw=n(Ne,"LI",{});var _Ve=s(Xw);jwe=n(_Ve,"STRONG",{});var xVt=s(jwe);hzr=r(xVt,"electra"),xVt.forEach(t),uzr=r(_Ve," \u2014 "),ooe=n(_Ve,"A",{href:!0});var $Vt=s(ooe);pzr=r($Vt,"FlaxElectraForCausalLM"),$Vt.forEach(t),_zr=r(_Ve," (ELECTRA model)"),_Ve.forEach(t),bzr=i(Ne),zw=n(Ne,"LI",{});var bVe=s(zw);Dwe=n(bVe,"STRONG",{});var kVt=s(Dwe);vzr=r(kVt,"gpt2"),kVt.forEach(t),Fzr=r(bVe," \u2014 "),roe=n(bVe,"A",{href:!0});var SVt=s(roe);Tzr=r(SVt,"FlaxGPT2LMHeadModel"),SVt.forEach(t),Mzr=r(bVe," (OpenAI GPT-2 model)"),bVe.forEach(t),Ezr=i(Ne),Ww=n(Ne,"LI",{});var vVe=s(Ww);Gwe=n(vVe,"STRONG",{});var RVt=s(Gwe);Czr=r(RVt,"gpt_neo"),RVt.forEach(t),wzr=r(vVe," \u2014 "),toe=n(vVe,"A",{href:!0});var PVt=s(toe);Azr=r(PVt,"FlaxGPTNeoForCausalLM"),PVt.forEach(t),Lzr=r(vVe," (GPT Neo model)"),vVe.forEach(t),yzr=i(Ne),Qw=n(Ne,"LI",{});var FVe=s(Qw);Owe=n(FVe,"STRONG",{});var BVt=s(Owe);xzr=r(BVt,"gptj"),BVt.forEach(t),$zr=r(FVe," \u2014 "),aoe=n(FVe,"A",{href:!0});var IVt=s(aoe);kzr=r(IVt,"FlaxGPTJForCausalLM"),IVt.forEach(t),Szr=r(FVe," (GPT-J model)"),FVe.forEach(t),Rzr=i(Ne),Hw=n(Ne,"LI",{});var TVe=s(Hw);Vwe=n(TVe,"STRONG",{});var NVt=s(Vwe);Pzr=r(NVt,"opt"),NVt.forEach(t),Bzr=r(TVe," \u2014 "),noe=n(TVe,"A",{href:!0});var qVt=s(noe);Izr=r(qVt,"FlaxOPTForCausalLM"),qVt.forEach(t),Nzr=r(TVe," (OPT model)"),TVe.forEach(t),qzr=i(Ne),Uw=n(Ne,"LI",{});var MVe=s(Uw);Xwe=n(MVe,"STRONG",{});var jVt=s(Xwe);jzr=r(jVt,"roberta"),jVt.forEach(t),Dzr=r(MVe," \u2014 "),soe=n(MVe,"A",{href:!0});var DVt=s(soe);Gzr=r(DVt,"FlaxRobertaForCausalLM"),DVt.forEach(t),Ozr=r(MVe," (RoBERTa model)"),MVe.forEach(t),Vzr=i(Ne),Jw=n(Ne,"LI",{});var EVe=s(Jw);zwe=n(EVe,"STRONG",{});var GVt=s(zwe);Xzr=r(GVt,"xglm"),GVt.forEach(t),zzr=r(EVe," \u2014 "),loe=n(EVe,"A",{href:!0});var OVt=s(loe);Wzr=r(OVt,"FlaxXGLMForCausalLM"),OVt.forEach(t),Qzr=r(EVe," (XGLM model)"),EVe.forEach(t),Ne.forEach(t),Hzr=i(ii),T(Yw.$$.fragment,ii),ii.forEach(t),li.forEach(t),yWe=i(m),rm=n(m,"H2",{class:!0});var NHe=s(rm);Kw=n(NHe,"A",{id:!0,class:!0,href:!0});var VVt=s(Kw);Wwe=n(VVt,"SPAN",{});var XVt=s(Wwe);T(y$.$$.fragment,XVt),XVt.forEach(t),VVt.forEach(t),Uzr=i(NHe),Qwe=n(NHe,"SPAN",{});var zVt=s(Qwe);Jzr=r(zVt,"FlaxAutoModelForPreTraining"),zVt.forEach(t),NHe.forEach(t),xWe=i(m),br=n(m,"DIV",{class:!0});var di=s(br);T(x$.$$.fragment,di),Yzr=i(di),tm=n(di,"P",{});var kae=s(tm);Kzr=r(kae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ioe=n(kae,"A",{href:!0});var WVt=s(ioe);Zzr=r(WVt,"from_pretrained()"),WVt.forEach(t),eWr=r(kae," class method or the "),doe=n(kae,"A",{href:!0});var QVt=s(doe);oWr=r(QVt,"from_config()"),QVt.forEach(t),rWr=r(kae,` class
method.`),kae.forEach(t),tWr=i(di),$$=n(di,"P",{});var qHe=s($$);aWr=r(qHe,"This class cannot be instantiated directly using "),Hwe=n(qHe,"CODE",{});var HVt=s(Hwe);nWr=r(HVt,"__init__()"),HVt.forEach(t),sWr=r(qHe," (throws an error)."),qHe.forEach(t),lWr=i(di),Ut=n(di,"DIV",{class:!0});var zL=s(Ut);T(k$.$$.fragment,zL),iWr=i(zL),Uwe=n(zL,"P",{});var UVt=s(Uwe);dWr=r(UVt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),UVt.forEach(t),cWr=i(zL),am=n(zL,"P",{});var Sae=s(am);mWr=r(Sae,`Note:
Loading a model from its configuration file does `),Jwe=n(Sae,"STRONG",{});var JVt=s(Jwe);fWr=r(JVt,"not"),JVt.forEach(t),gWr=r(Sae,` load the model weights. It only affects the
model\u2019s configuration. Use `),coe=n(Sae,"A",{href:!0});var YVt=s(coe);hWr=r(YVt,"from_pretrained()"),YVt.forEach(t),uWr=r(Sae," to load the model weights."),Sae.forEach(t),pWr=i(zL),T(Zw.$$.fragment,zL),zL.forEach(t),_Wr=i(di),Wr=n(di,"DIV",{class:!0});var ci=s(Wr);T(S$.$$.fragment,ci),bWr=i(ci),Ywe=n(ci,"P",{});var KVt=s(Ywe);vWr=r(KVt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),KVt.forEach(t),FWr=i(ci),En=n(ci,"P",{});var WL=s(En);TWr=r(WL,"The model class to instantiate is selected based on the "),Kwe=n(WL,"CODE",{});var ZVt=s(Kwe);MWr=r(ZVt,"model_type"),ZVt.forEach(t),EWr=r(WL,` property of the config object (either
passed as an argument or loaded from `),Zwe=n(WL,"CODE",{});var eXt=s(Zwe);CWr=r(eXt,"pretrained_model_name_or_path"),eXt.forEach(t),wWr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eAe=n(WL,"CODE",{});var oXt=s(eAe);AWr=r(oXt,"pretrained_model_name_or_path"),oXt.forEach(t),LWr=r(WL,":"),WL.forEach(t),yWr=i(ci),Ee=n(ci,"UL",{});var we=s(Ee);eA=n(we,"LI",{});var CVe=s(eA);oAe=n(CVe,"STRONG",{});var rXt=s(oAe);xWr=r(rXt,"albert"),rXt.forEach(t),$Wr=r(CVe," \u2014 "),moe=n(CVe,"A",{href:!0});var tXt=s(moe);kWr=r(tXt,"FlaxAlbertForPreTraining"),tXt.forEach(t),SWr=r(CVe," (ALBERT model)"),CVe.forEach(t),RWr=i(we),oA=n(we,"LI",{});var wVe=s(oA);rAe=n(wVe,"STRONG",{});var aXt=s(rAe);PWr=r(aXt,"bart"),aXt.forEach(t),BWr=r(wVe," \u2014 "),foe=n(wVe,"A",{href:!0});var nXt=s(foe);IWr=r(nXt,"FlaxBartForConditionalGeneration"),nXt.forEach(t),NWr=r(wVe," (BART model)"),wVe.forEach(t),qWr=i(we),rA=n(we,"LI",{});var AVe=s(rA);tAe=n(AVe,"STRONG",{});var sXt=s(tAe);jWr=r(sXt,"bert"),sXt.forEach(t),DWr=r(AVe," \u2014 "),goe=n(AVe,"A",{href:!0});var lXt=s(goe);GWr=r(lXt,"FlaxBertForPreTraining"),lXt.forEach(t),OWr=r(AVe," (BERT model)"),AVe.forEach(t),VWr=i(we),tA=n(we,"LI",{});var LVe=s(tA);aAe=n(LVe,"STRONG",{});var iXt=s(aAe);XWr=r(iXt,"big_bird"),iXt.forEach(t),zWr=r(LVe," \u2014 "),hoe=n(LVe,"A",{href:!0});var dXt=s(hoe);WWr=r(dXt,"FlaxBigBirdForPreTraining"),dXt.forEach(t),QWr=r(LVe," (BigBird model)"),LVe.forEach(t),HWr=i(we),aA=n(we,"LI",{});var yVe=s(aA);nAe=n(yVe,"STRONG",{});var cXt=s(nAe);UWr=r(cXt,"electra"),cXt.forEach(t),JWr=r(yVe," \u2014 "),uoe=n(yVe,"A",{href:!0});var mXt=s(uoe);YWr=r(mXt,"FlaxElectraForPreTraining"),mXt.forEach(t),KWr=r(yVe," (ELECTRA model)"),yVe.forEach(t),ZWr=i(we),nA=n(we,"LI",{});var xVe=s(nA);sAe=n(xVe,"STRONG",{});var fXt=s(sAe);eQr=r(fXt,"longt5"),fXt.forEach(t),oQr=r(xVe," \u2014 "),poe=n(xVe,"A",{href:!0});var gXt=s(poe);rQr=r(gXt,"FlaxLongT5ForConditionalGeneration"),gXt.forEach(t),tQr=r(xVe," (LongT5 model)"),xVe.forEach(t),aQr=i(we),sA=n(we,"LI",{});var $Ve=s(sA);lAe=n($Ve,"STRONG",{});var hXt=s(lAe);nQr=r(hXt,"mbart"),hXt.forEach(t),sQr=r($Ve," \u2014 "),_oe=n($Ve,"A",{href:!0});var uXt=s(_oe);lQr=r(uXt,"FlaxMBartForConditionalGeneration"),uXt.forEach(t),iQr=r($Ve," (mBART model)"),$Ve.forEach(t),dQr=i(we),lA=n(we,"LI",{});var kVe=s(lA);iAe=n(kVe,"STRONG",{});var pXt=s(iAe);cQr=r(pXt,"mt5"),pXt.forEach(t),mQr=r(kVe," \u2014 "),boe=n(kVe,"A",{href:!0});var _Xt=s(boe);fQr=r(_Xt,"FlaxMT5ForConditionalGeneration"),_Xt.forEach(t),gQr=r(kVe," (MT5 model)"),kVe.forEach(t),hQr=i(we),iA=n(we,"LI",{});var SVe=s(iA);dAe=n(SVe,"STRONG",{});var bXt=s(dAe);uQr=r(bXt,"roberta"),bXt.forEach(t),pQr=r(SVe," \u2014 "),voe=n(SVe,"A",{href:!0});var vXt=s(voe);_Qr=r(vXt,"FlaxRobertaForMaskedLM"),vXt.forEach(t),bQr=r(SVe," (RoBERTa model)"),SVe.forEach(t),vQr=i(we),dA=n(we,"LI",{});var RVe=s(dA);cAe=n(RVe,"STRONG",{});var FXt=s(cAe);FQr=r(FXt,"roformer"),FXt.forEach(t),TQr=r(RVe," \u2014 "),Foe=n(RVe,"A",{href:!0});var TXt=s(Foe);MQr=r(TXt,"FlaxRoFormerForMaskedLM"),TXt.forEach(t),EQr=r(RVe," (RoFormer model)"),RVe.forEach(t),CQr=i(we),cA=n(we,"LI",{});var PVe=s(cA);mAe=n(PVe,"STRONG",{});var MXt=s(mAe);wQr=r(MXt,"t5"),MXt.forEach(t),AQr=r(PVe," \u2014 "),Toe=n(PVe,"A",{href:!0});var EXt=s(Toe);LQr=r(EXt,"FlaxT5ForConditionalGeneration"),EXt.forEach(t),yQr=r(PVe," (T5 model)"),PVe.forEach(t),xQr=i(we),mA=n(we,"LI",{});var BVe=s(mA);fAe=n(BVe,"STRONG",{});var CXt=s(fAe);$Qr=r(CXt,"wav2vec2"),CXt.forEach(t),kQr=r(BVe," \u2014 "),Moe=n(BVe,"A",{href:!0});var wXt=s(Moe);SQr=r(wXt,"FlaxWav2Vec2ForPreTraining"),wXt.forEach(t),RQr=r(BVe," (Wav2Vec2 model)"),BVe.forEach(t),PQr=i(we),fA=n(we,"LI",{});var IVe=s(fA);gAe=n(IVe,"STRONG",{});var AXt=s(gAe);BQr=r(AXt,"xlm-roberta"),AXt.forEach(t),IQr=r(IVe," \u2014 "),Eoe=n(IVe,"A",{href:!0});var LXt=s(Eoe);NQr=r(LXt,"FlaxXLMRobertaForMaskedLM"),LXt.forEach(t),qQr=r(IVe," (XLM-RoBERTa model)"),IVe.forEach(t),we.forEach(t),jQr=i(ci),T(gA.$$.fragment,ci),ci.forEach(t),di.forEach(t),$We=i(m),nm=n(m,"H2",{class:!0});var jHe=s(nm);hA=n(jHe,"A",{id:!0,class:!0,href:!0});var yXt=s(hA);hAe=n(yXt,"SPAN",{});var xXt=s(hAe);T(R$.$$.fragment,xXt),xXt.forEach(t),yXt.forEach(t),DQr=i(jHe),uAe=n(jHe,"SPAN",{});var $Xt=s(uAe);GQr=r($Xt,"FlaxAutoModelForMaskedLM"),$Xt.forEach(t),jHe.forEach(t),kWe=i(m),vr=n(m,"DIV",{class:!0});var mi=s(vr);T(P$.$$.fragment,mi),OQr=i(mi),sm=n(mi,"P",{});var Rae=s(sm);VQr=r(Rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Coe=n(Rae,"A",{href:!0});var kXt=s(Coe);XQr=r(kXt,"from_pretrained()"),kXt.forEach(t),zQr=r(Rae," class method or the "),woe=n(Rae,"A",{href:!0});var SXt=s(woe);WQr=r(SXt,"from_config()"),SXt.forEach(t),QQr=r(Rae,` class
method.`),Rae.forEach(t),HQr=i(mi),B$=n(mi,"P",{});var DHe=s(B$);UQr=r(DHe,"This class cannot be instantiated directly using "),pAe=n(DHe,"CODE",{});var RXt=s(pAe);JQr=r(RXt,"__init__()"),RXt.forEach(t),YQr=r(DHe," (throws an error)."),DHe.forEach(t),KQr=i(mi),Jt=n(mi,"DIV",{class:!0});var QL=s(Jt);T(I$.$$.fragment,QL),ZQr=i(QL),_Ae=n(QL,"P",{});var PXt=s(_Ae);eHr=r(PXt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PXt.forEach(t),oHr=i(QL),lm=n(QL,"P",{});var Pae=s(lm);rHr=r(Pae,`Note:
Loading a model from its configuration file does `),bAe=n(Pae,"STRONG",{});var BXt=s(bAe);tHr=r(BXt,"not"),BXt.forEach(t),aHr=r(Pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aoe=n(Pae,"A",{href:!0});var IXt=s(Aoe);nHr=r(IXt,"from_pretrained()"),IXt.forEach(t),sHr=r(Pae," to load the model weights."),Pae.forEach(t),lHr=i(QL),T(uA.$$.fragment,QL),QL.forEach(t),iHr=i(mi),Qr=n(mi,"DIV",{class:!0});var fi=s(Qr);T(N$.$$.fragment,fi),dHr=i(fi),vAe=n(fi,"P",{});var NXt=s(vAe);cHr=r(NXt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),NXt.forEach(t),mHr=i(fi),Cn=n(fi,"P",{});var HL=s(Cn);fHr=r(HL,"The model class to instantiate is selected based on the "),FAe=n(HL,"CODE",{});var qXt=s(FAe);gHr=r(qXt,"model_type"),qXt.forEach(t),hHr=r(HL,` property of the config object (either
passed as an argument or loaded from `),TAe=n(HL,"CODE",{});var jXt=s(TAe);uHr=r(jXt,"pretrained_model_name_or_path"),jXt.forEach(t),pHr=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MAe=n(HL,"CODE",{});var DXt=s(MAe);_Hr=r(DXt,"pretrained_model_name_or_path"),DXt.forEach(t),bHr=r(HL,":"),HL.forEach(t),vHr=i(fi),$e=n(fi,"UL",{});var qe=s($e);pA=n(qe,"LI",{});var NVe=s(pA);EAe=n(NVe,"STRONG",{});var GXt=s(EAe);FHr=r(GXt,"albert"),GXt.forEach(t),THr=r(NVe," \u2014 "),Loe=n(NVe,"A",{href:!0});var OXt=s(Loe);MHr=r(OXt,"FlaxAlbertForMaskedLM"),OXt.forEach(t),EHr=r(NVe," (ALBERT model)"),NVe.forEach(t),CHr=i(qe),_A=n(qe,"LI",{});var qVe=s(_A);CAe=n(qVe,"STRONG",{});var VXt=s(CAe);wHr=r(VXt,"bart"),VXt.forEach(t),AHr=r(qVe," \u2014 "),yoe=n(qVe,"A",{href:!0});var XXt=s(yoe);LHr=r(XXt,"FlaxBartForConditionalGeneration"),XXt.forEach(t),yHr=r(qVe," (BART model)"),qVe.forEach(t),xHr=i(qe),bA=n(qe,"LI",{});var jVe=s(bA);wAe=n(jVe,"STRONG",{});var zXt=s(wAe);$Hr=r(zXt,"bert"),zXt.forEach(t),kHr=r(jVe," \u2014 "),xoe=n(jVe,"A",{href:!0});var WXt=s(xoe);SHr=r(WXt,"FlaxBertForMaskedLM"),WXt.forEach(t),RHr=r(jVe," (BERT model)"),jVe.forEach(t),PHr=i(qe),vA=n(qe,"LI",{});var DVe=s(vA);AAe=n(DVe,"STRONG",{});var QXt=s(AAe);BHr=r(QXt,"big_bird"),QXt.forEach(t),IHr=r(DVe," \u2014 "),$oe=n(DVe,"A",{href:!0});var HXt=s($oe);NHr=r(HXt,"FlaxBigBirdForMaskedLM"),HXt.forEach(t),qHr=r(DVe," (BigBird model)"),DVe.forEach(t),jHr=i(qe),FA=n(qe,"LI",{});var GVe=s(FA);LAe=n(GVe,"STRONG",{});var UXt=s(LAe);DHr=r(UXt,"distilbert"),UXt.forEach(t),GHr=r(GVe," \u2014 "),koe=n(GVe,"A",{href:!0});var JXt=s(koe);OHr=r(JXt,"FlaxDistilBertForMaskedLM"),JXt.forEach(t),VHr=r(GVe," (DistilBERT model)"),GVe.forEach(t),XHr=i(qe),TA=n(qe,"LI",{});var OVe=s(TA);yAe=n(OVe,"STRONG",{});var YXt=s(yAe);zHr=r(YXt,"electra"),YXt.forEach(t),WHr=r(OVe," \u2014 "),Soe=n(OVe,"A",{href:!0});var KXt=s(Soe);QHr=r(KXt,"FlaxElectraForMaskedLM"),KXt.forEach(t),HHr=r(OVe," (ELECTRA model)"),OVe.forEach(t),UHr=i(qe),MA=n(qe,"LI",{});var VVe=s(MA);xAe=n(VVe,"STRONG",{});var ZXt=s(xAe);JHr=r(ZXt,"mbart"),ZXt.forEach(t),YHr=r(VVe," \u2014 "),Roe=n(VVe,"A",{href:!0});var ezt=s(Roe);KHr=r(ezt,"FlaxMBartForConditionalGeneration"),ezt.forEach(t),ZHr=r(VVe," (mBART model)"),VVe.forEach(t),eUr=i(qe),EA=n(qe,"LI",{});var XVe=s(EA);$Ae=n(XVe,"STRONG",{});var ozt=s($Ae);oUr=r(ozt,"roberta"),ozt.forEach(t),rUr=r(XVe," \u2014 "),Poe=n(XVe,"A",{href:!0});var rzt=s(Poe);tUr=r(rzt,"FlaxRobertaForMaskedLM"),rzt.forEach(t),aUr=r(XVe," (RoBERTa model)"),XVe.forEach(t),nUr=i(qe),CA=n(qe,"LI",{});var zVe=s(CA);kAe=n(zVe,"STRONG",{});var tzt=s(kAe);sUr=r(tzt,"roformer"),tzt.forEach(t),lUr=r(zVe," \u2014 "),Boe=n(zVe,"A",{href:!0});var azt=s(Boe);iUr=r(azt,"FlaxRoFormerForMaskedLM"),azt.forEach(t),dUr=r(zVe," (RoFormer model)"),zVe.forEach(t),cUr=i(qe),wA=n(qe,"LI",{});var WVe=s(wA);SAe=n(WVe,"STRONG",{});var nzt=s(SAe);mUr=r(nzt,"xlm-roberta"),nzt.forEach(t),fUr=r(WVe," \u2014 "),Ioe=n(WVe,"A",{href:!0});var szt=s(Ioe);gUr=r(szt,"FlaxXLMRobertaForMaskedLM"),szt.forEach(t),hUr=r(WVe," (XLM-RoBERTa model)"),WVe.forEach(t),qe.forEach(t),uUr=i(fi),T(AA.$$.fragment,fi),fi.forEach(t),mi.forEach(t),SWe=i(m),im=n(m,"H2",{class:!0});var GHe=s(im);LA=n(GHe,"A",{id:!0,class:!0,href:!0});var lzt=s(LA);RAe=n(lzt,"SPAN",{});var izt=s(RAe);T(q$.$$.fragment,izt),izt.forEach(t),lzt.forEach(t),pUr=i(GHe),PAe=n(GHe,"SPAN",{});var dzt=s(PAe);_Ur=r(dzt,"FlaxAutoModelForSeq2SeqLM"),dzt.forEach(t),GHe.forEach(t),RWe=i(m),Fr=n(m,"DIV",{class:!0});var gi=s(Fr);T(j$.$$.fragment,gi),bUr=i(gi),dm=n(gi,"P",{});var Bae=s(dm);vUr=r(Bae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Noe=n(Bae,"A",{href:!0});var czt=s(Noe);FUr=r(czt,"from_pretrained()"),czt.forEach(t),TUr=r(Bae," class method or the "),qoe=n(Bae,"A",{href:!0});var mzt=s(qoe);MUr=r(mzt,"from_config()"),mzt.forEach(t),EUr=r(Bae,` class
method.`),Bae.forEach(t),CUr=i(gi),D$=n(gi,"P",{});var OHe=s(D$);wUr=r(OHe,"This class cannot be instantiated directly using "),BAe=n(OHe,"CODE",{});var fzt=s(BAe);AUr=r(fzt,"__init__()"),fzt.forEach(t),LUr=r(OHe," (throws an error)."),OHe.forEach(t),yUr=i(gi),Yt=n(gi,"DIV",{class:!0});var UL=s(Yt);T(G$.$$.fragment,UL),xUr=i(UL),IAe=n(UL,"P",{});var gzt=s(IAe);$Ur=r(gzt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gzt.forEach(t),kUr=i(UL),cm=n(UL,"P",{});var Iae=s(cm);SUr=r(Iae,`Note:
Loading a model from its configuration file does `),NAe=n(Iae,"STRONG",{});var hzt=s(NAe);RUr=r(hzt,"not"),hzt.forEach(t),PUr=r(Iae,` load the model weights. It only affects the
model\u2019s configuration. Use `),joe=n(Iae,"A",{href:!0});var uzt=s(joe);BUr=r(uzt,"from_pretrained()"),uzt.forEach(t),IUr=r(Iae," to load the model weights."),Iae.forEach(t),NUr=i(UL),T(yA.$$.fragment,UL),UL.forEach(t),qUr=i(gi),Hr=n(gi,"DIV",{class:!0});var hi=s(Hr);T(O$.$$.fragment,hi),jUr=i(hi),qAe=n(hi,"P",{});var pzt=s(qAe);DUr=r(pzt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pzt.forEach(t),GUr=i(hi),wn=n(hi,"P",{});var JL=s(wn);OUr=r(JL,"The model class to instantiate is selected based on the "),jAe=n(JL,"CODE",{});var _zt=s(jAe);VUr=r(_zt,"model_type"),_zt.forEach(t),XUr=r(JL,` property of the config object (either
passed as an argument or loaded from `),DAe=n(JL,"CODE",{});var bzt=s(DAe);zUr=r(bzt,"pretrained_model_name_or_path"),bzt.forEach(t),WUr=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GAe=n(JL,"CODE",{});var vzt=s(GAe);QUr=r(vzt,"pretrained_model_name_or_path"),vzt.forEach(t),HUr=r(JL,":"),JL.forEach(t),UUr=i(hi),ke=n(hi,"UL",{});var je=s(ke);xA=n(je,"LI",{});var QVe=s(xA);OAe=n(QVe,"STRONG",{});var Fzt=s(OAe);JUr=r(Fzt,"bart"),Fzt.forEach(t),YUr=r(QVe," \u2014 "),Doe=n(QVe,"A",{href:!0});var Tzt=s(Doe);KUr=r(Tzt,"FlaxBartForConditionalGeneration"),Tzt.forEach(t),ZUr=r(QVe," (BART model)"),QVe.forEach(t),eJr=i(je),$A=n(je,"LI",{});var HVe=s($A);VAe=n(HVe,"STRONG",{});var Mzt=s(VAe);oJr=r(Mzt,"blenderbot"),Mzt.forEach(t),rJr=r(HVe," \u2014 "),Goe=n(HVe,"A",{href:!0});var Ezt=s(Goe);tJr=r(Ezt,"FlaxBlenderbotForConditionalGeneration"),Ezt.forEach(t),aJr=r(HVe," (Blenderbot model)"),HVe.forEach(t),nJr=i(je),kA=n(je,"LI",{});var UVe=s(kA);XAe=n(UVe,"STRONG",{});var Czt=s(XAe);sJr=r(Czt,"blenderbot-small"),Czt.forEach(t),lJr=r(UVe," \u2014 "),Ooe=n(UVe,"A",{href:!0});var wzt=s(Ooe);iJr=r(wzt,"FlaxBlenderbotSmallForConditionalGeneration"),wzt.forEach(t),dJr=r(UVe," (BlenderbotSmall model)"),UVe.forEach(t),cJr=i(je),SA=n(je,"LI",{});var JVe=s(SA);zAe=n(JVe,"STRONG",{});var Azt=s(zAe);mJr=r(Azt,"encoder-decoder"),Azt.forEach(t),fJr=r(JVe," \u2014 "),Voe=n(JVe,"A",{href:!0});var Lzt=s(Voe);gJr=r(Lzt,"FlaxEncoderDecoderModel"),Lzt.forEach(t),hJr=r(JVe," (Encoder decoder model)"),JVe.forEach(t),uJr=i(je),RA=n(je,"LI",{});var YVe=s(RA);WAe=n(YVe,"STRONG",{});var yzt=s(WAe);pJr=r(yzt,"longt5"),yzt.forEach(t),_Jr=r(YVe," \u2014 "),Xoe=n(YVe,"A",{href:!0});var xzt=s(Xoe);bJr=r(xzt,"FlaxLongT5ForConditionalGeneration"),xzt.forEach(t),vJr=r(YVe," (LongT5 model)"),YVe.forEach(t),FJr=i(je),PA=n(je,"LI",{});var KVe=s(PA);QAe=n(KVe,"STRONG",{});var $zt=s(QAe);TJr=r($zt,"marian"),$zt.forEach(t),MJr=r(KVe," \u2014 "),zoe=n(KVe,"A",{href:!0});var kzt=s(zoe);EJr=r(kzt,"FlaxMarianMTModel"),kzt.forEach(t),CJr=r(KVe," (Marian model)"),KVe.forEach(t),wJr=i(je),BA=n(je,"LI",{});var ZVe=s(BA);HAe=n(ZVe,"STRONG",{});var Szt=s(HAe);AJr=r(Szt,"mbart"),Szt.forEach(t),LJr=r(ZVe," \u2014 "),Woe=n(ZVe,"A",{href:!0});var Rzt=s(Woe);yJr=r(Rzt,"FlaxMBartForConditionalGeneration"),Rzt.forEach(t),xJr=r(ZVe," (mBART model)"),ZVe.forEach(t),$Jr=i(je),IA=n(je,"LI",{});var eXe=s(IA);UAe=n(eXe,"STRONG",{});var Pzt=s(UAe);kJr=r(Pzt,"mt5"),Pzt.forEach(t),SJr=r(eXe," \u2014 "),Qoe=n(eXe,"A",{href:!0});var Bzt=s(Qoe);RJr=r(Bzt,"FlaxMT5ForConditionalGeneration"),Bzt.forEach(t),PJr=r(eXe," (MT5 model)"),eXe.forEach(t),BJr=i(je),NA=n(je,"LI",{});var oXe=s(NA);JAe=n(oXe,"STRONG",{});var Izt=s(JAe);IJr=r(Izt,"pegasus"),Izt.forEach(t),NJr=r(oXe," \u2014 "),Hoe=n(oXe,"A",{href:!0});var Nzt=s(Hoe);qJr=r(Nzt,"FlaxPegasusForConditionalGeneration"),Nzt.forEach(t),jJr=r(oXe," (Pegasus model)"),oXe.forEach(t),DJr=i(je),qA=n(je,"LI",{});var rXe=s(qA);YAe=n(rXe,"STRONG",{});var qzt=s(YAe);GJr=r(qzt,"t5"),qzt.forEach(t),OJr=r(rXe," \u2014 "),Uoe=n(rXe,"A",{href:!0});var jzt=s(Uoe);VJr=r(jzt,"FlaxT5ForConditionalGeneration"),jzt.forEach(t),XJr=r(rXe," (T5 model)"),rXe.forEach(t),je.forEach(t),zJr=i(hi),T(jA.$$.fragment,hi),hi.forEach(t),gi.forEach(t),PWe=i(m),mm=n(m,"H2",{class:!0});var VHe=s(mm);DA=n(VHe,"A",{id:!0,class:!0,href:!0});var Dzt=s(DA);KAe=n(Dzt,"SPAN",{});var Gzt=s(KAe);T(V$.$$.fragment,Gzt),Gzt.forEach(t),Dzt.forEach(t),WJr=i(VHe),ZAe=n(VHe,"SPAN",{});var Ozt=s(ZAe);QJr=r(Ozt,"FlaxAutoModelForSequenceClassification"),Ozt.forEach(t),VHe.forEach(t),BWe=i(m),Tr=n(m,"DIV",{class:!0});var ui=s(Tr);T(X$.$$.fragment,ui),HJr=i(ui),fm=n(ui,"P",{});var Nae=s(fm);UJr=r(Nae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Joe=n(Nae,"A",{href:!0});var Vzt=s(Joe);JJr=r(Vzt,"from_pretrained()"),Vzt.forEach(t),YJr=r(Nae," class method or the "),Yoe=n(Nae,"A",{href:!0});var Xzt=s(Yoe);KJr=r(Xzt,"from_config()"),Xzt.forEach(t),ZJr=r(Nae,` class
method.`),Nae.forEach(t),eYr=i(ui),z$=n(ui,"P",{});var XHe=s(z$);oYr=r(XHe,"This class cannot be instantiated directly using "),e6e=n(XHe,"CODE",{});var zzt=s(e6e);rYr=r(zzt,"__init__()"),zzt.forEach(t),tYr=r(XHe," (throws an error)."),XHe.forEach(t),aYr=i(ui),Kt=n(ui,"DIV",{class:!0});var YL=s(Kt);T(W$.$$.fragment,YL),nYr=i(YL),o6e=n(YL,"P",{});var Wzt=s(o6e);sYr=r(Wzt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wzt.forEach(t),lYr=i(YL),gm=n(YL,"P",{});var qae=s(gm);iYr=r(qae,`Note:
Loading a model from its configuration file does `),r6e=n(qae,"STRONG",{});var Qzt=s(r6e);dYr=r(Qzt,"not"),Qzt.forEach(t),cYr=r(qae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Koe=n(qae,"A",{href:!0});var Hzt=s(Koe);mYr=r(Hzt,"from_pretrained()"),Hzt.forEach(t),fYr=r(qae," to load the model weights."),qae.forEach(t),gYr=i(YL),T(GA.$$.fragment,YL),YL.forEach(t),hYr=i(ui),Ur=n(ui,"DIV",{class:!0});var pi=s(Ur);T(Q$.$$.fragment,pi),uYr=i(pi),t6e=n(pi,"P",{});var Uzt=s(t6e);pYr=r(Uzt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Uzt.forEach(t),_Yr=i(pi),An=n(pi,"P",{});var KL=s(An);bYr=r(KL,"The model class to instantiate is selected based on the "),a6e=n(KL,"CODE",{});var Jzt=s(a6e);vYr=r(Jzt,"model_type"),Jzt.forEach(t),FYr=r(KL,` property of the config object (either
passed as an argument or loaded from `),n6e=n(KL,"CODE",{});var Yzt=s(n6e);TYr=r(Yzt,"pretrained_model_name_or_path"),Yzt.forEach(t),MYr=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=n(KL,"CODE",{});var Kzt=s(s6e);EYr=r(Kzt,"pretrained_model_name_or_path"),Kzt.forEach(t),CYr=r(KL,":"),KL.forEach(t),wYr=i(pi),Se=n(pi,"UL",{});var De=s(Se);OA=n(De,"LI",{});var tXe=s(OA);l6e=n(tXe,"STRONG",{});var Zzt=s(l6e);AYr=r(Zzt,"albert"),Zzt.forEach(t),LYr=r(tXe," \u2014 "),Zoe=n(tXe,"A",{href:!0});var eWt=s(Zoe);yYr=r(eWt,"FlaxAlbertForSequenceClassification"),eWt.forEach(t),xYr=r(tXe," (ALBERT model)"),tXe.forEach(t),$Yr=i(De),VA=n(De,"LI",{});var aXe=s(VA);i6e=n(aXe,"STRONG",{});var oWt=s(i6e);kYr=r(oWt,"bart"),oWt.forEach(t),SYr=r(aXe," \u2014 "),ere=n(aXe,"A",{href:!0});var rWt=s(ere);RYr=r(rWt,"FlaxBartForSequenceClassification"),rWt.forEach(t),PYr=r(aXe," (BART model)"),aXe.forEach(t),BYr=i(De),XA=n(De,"LI",{});var nXe=s(XA);d6e=n(nXe,"STRONG",{});var tWt=s(d6e);IYr=r(tWt,"bert"),tWt.forEach(t),NYr=r(nXe," \u2014 "),ore=n(nXe,"A",{href:!0});var aWt=s(ore);qYr=r(aWt,"FlaxBertForSequenceClassification"),aWt.forEach(t),jYr=r(nXe," (BERT model)"),nXe.forEach(t),DYr=i(De),zA=n(De,"LI",{});var sXe=s(zA);c6e=n(sXe,"STRONG",{});var nWt=s(c6e);GYr=r(nWt,"big_bird"),nWt.forEach(t),OYr=r(sXe," \u2014 "),rre=n(sXe,"A",{href:!0});var sWt=s(rre);VYr=r(sWt,"FlaxBigBirdForSequenceClassification"),sWt.forEach(t),XYr=r(sXe," (BigBird model)"),sXe.forEach(t),zYr=i(De),WA=n(De,"LI",{});var lXe=s(WA);m6e=n(lXe,"STRONG",{});var lWt=s(m6e);WYr=r(lWt,"distilbert"),lWt.forEach(t),QYr=r(lXe," \u2014 "),tre=n(lXe,"A",{href:!0});var iWt=s(tre);HYr=r(iWt,"FlaxDistilBertForSequenceClassification"),iWt.forEach(t),UYr=r(lXe," (DistilBERT model)"),lXe.forEach(t),JYr=i(De),QA=n(De,"LI",{});var iXe=s(QA);f6e=n(iXe,"STRONG",{});var dWt=s(f6e);YYr=r(dWt,"electra"),dWt.forEach(t),KYr=r(iXe," \u2014 "),are=n(iXe,"A",{href:!0});var cWt=s(are);ZYr=r(cWt,"FlaxElectraForSequenceClassification"),cWt.forEach(t),eKr=r(iXe," (ELECTRA model)"),iXe.forEach(t),oKr=i(De),HA=n(De,"LI",{});var dXe=s(HA);g6e=n(dXe,"STRONG",{});var mWt=s(g6e);rKr=r(mWt,"mbart"),mWt.forEach(t),tKr=r(dXe," \u2014 "),nre=n(dXe,"A",{href:!0});var fWt=s(nre);aKr=r(fWt,"FlaxMBartForSequenceClassification"),fWt.forEach(t),nKr=r(dXe," (mBART model)"),dXe.forEach(t),sKr=i(De),UA=n(De,"LI",{});var cXe=s(UA);h6e=n(cXe,"STRONG",{});var gWt=s(h6e);lKr=r(gWt,"roberta"),gWt.forEach(t),iKr=r(cXe," \u2014 "),sre=n(cXe,"A",{href:!0});var hWt=s(sre);dKr=r(hWt,"FlaxRobertaForSequenceClassification"),hWt.forEach(t),cKr=r(cXe," (RoBERTa model)"),cXe.forEach(t),mKr=i(De),JA=n(De,"LI",{});var mXe=s(JA);u6e=n(mXe,"STRONG",{});var uWt=s(u6e);fKr=r(uWt,"roformer"),uWt.forEach(t),gKr=r(mXe," \u2014 "),lre=n(mXe,"A",{href:!0});var pWt=s(lre);hKr=r(pWt,"FlaxRoFormerForSequenceClassification"),pWt.forEach(t),uKr=r(mXe," (RoFormer model)"),mXe.forEach(t),pKr=i(De),YA=n(De,"LI",{});var fXe=s(YA);p6e=n(fXe,"STRONG",{});var _Wt=s(p6e);_Kr=r(_Wt,"xlm-roberta"),_Wt.forEach(t),bKr=r(fXe," \u2014 "),ire=n(fXe,"A",{href:!0});var bWt=s(ire);vKr=r(bWt,"FlaxXLMRobertaForSequenceClassification"),bWt.forEach(t),FKr=r(fXe," (XLM-RoBERTa model)"),fXe.forEach(t),De.forEach(t),TKr=i(pi),T(KA.$$.fragment,pi),pi.forEach(t),ui.forEach(t),IWe=i(m),hm=n(m,"H2",{class:!0});var zHe=s(hm);ZA=n(zHe,"A",{id:!0,class:!0,href:!0});var vWt=s(ZA);_6e=n(vWt,"SPAN",{});var FWt=s(_6e);T(H$.$$.fragment,FWt),FWt.forEach(t),vWt.forEach(t),MKr=i(zHe),b6e=n(zHe,"SPAN",{});var TWt=s(b6e);EKr=r(TWt,"FlaxAutoModelForQuestionAnswering"),TWt.forEach(t),zHe.forEach(t),NWe=i(m),Mr=n(m,"DIV",{class:!0});var _i=s(Mr);T(U$.$$.fragment,_i),CKr=i(_i),um=n(_i,"P",{});var jae=s(um);wKr=r(jae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dre=n(jae,"A",{href:!0});var MWt=s(dre);AKr=r(MWt,"from_pretrained()"),MWt.forEach(t),LKr=r(jae," class method or the "),cre=n(jae,"A",{href:!0});var EWt=s(cre);yKr=r(EWt,"from_config()"),EWt.forEach(t),xKr=r(jae,` class
method.`),jae.forEach(t),$Kr=i(_i),J$=n(_i,"P",{});var WHe=s(J$);kKr=r(WHe,"This class cannot be instantiated directly using "),v6e=n(WHe,"CODE",{});var CWt=s(v6e);SKr=r(CWt,"__init__()"),CWt.forEach(t),RKr=r(WHe," (throws an error)."),WHe.forEach(t),PKr=i(_i),Zt=n(_i,"DIV",{class:!0});var ZL=s(Zt);T(Y$.$$.fragment,ZL),BKr=i(ZL),F6e=n(ZL,"P",{});var wWt=s(F6e);IKr=r(wWt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),wWt.forEach(t),NKr=i(ZL),pm=n(ZL,"P",{});var Dae=s(pm);qKr=r(Dae,`Note:
Loading a model from its configuration file does `),T6e=n(Dae,"STRONG",{});var AWt=s(T6e);jKr=r(AWt,"not"),AWt.forEach(t),DKr=r(Dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=n(Dae,"A",{href:!0});var LWt=s(mre);GKr=r(LWt,"from_pretrained()"),LWt.forEach(t),OKr=r(Dae," to load the model weights."),Dae.forEach(t),VKr=i(ZL),T(e6.$$.fragment,ZL),ZL.forEach(t),XKr=i(_i),Jr=n(_i,"DIV",{class:!0});var bi=s(Jr);T(K$.$$.fragment,bi),zKr=i(bi),M6e=n(bi,"P",{});var yWt=s(M6e);WKr=r(yWt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yWt.forEach(t),QKr=i(bi),Ln=n(bi,"P",{});var ey=s(Ln);HKr=r(ey,"The model class to instantiate is selected based on the "),E6e=n(ey,"CODE",{});var xWt=s(E6e);UKr=r(xWt,"model_type"),xWt.forEach(t),JKr=r(ey,` property of the config object (either
passed as an argument or loaded from `),C6e=n(ey,"CODE",{});var $Wt=s(C6e);YKr=r($Wt,"pretrained_model_name_or_path"),$Wt.forEach(t),KKr=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w6e=n(ey,"CODE",{});var kWt=s(w6e);ZKr=r(kWt,"pretrained_model_name_or_path"),kWt.forEach(t),eZr=r(ey,":"),ey.forEach(t),oZr=i(bi),Re=n(bi,"UL",{});var Ge=s(Re);o6=n(Ge,"LI",{});var gXe=s(o6);A6e=n(gXe,"STRONG",{});var SWt=s(A6e);rZr=r(SWt,"albert"),SWt.forEach(t),tZr=r(gXe," \u2014 "),fre=n(gXe,"A",{href:!0});var RWt=s(fre);aZr=r(RWt,"FlaxAlbertForQuestionAnswering"),RWt.forEach(t),nZr=r(gXe," (ALBERT model)"),gXe.forEach(t),sZr=i(Ge),r6=n(Ge,"LI",{});var hXe=s(r6);L6e=n(hXe,"STRONG",{});var PWt=s(L6e);lZr=r(PWt,"bart"),PWt.forEach(t),iZr=r(hXe," \u2014 "),gre=n(hXe,"A",{href:!0});var BWt=s(gre);dZr=r(BWt,"FlaxBartForQuestionAnswering"),BWt.forEach(t),cZr=r(hXe," (BART model)"),hXe.forEach(t),mZr=i(Ge),t6=n(Ge,"LI",{});var uXe=s(t6);y6e=n(uXe,"STRONG",{});var IWt=s(y6e);fZr=r(IWt,"bert"),IWt.forEach(t),gZr=r(uXe," \u2014 "),hre=n(uXe,"A",{href:!0});var NWt=s(hre);hZr=r(NWt,"FlaxBertForQuestionAnswering"),NWt.forEach(t),uZr=r(uXe," (BERT model)"),uXe.forEach(t),pZr=i(Ge),a6=n(Ge,"LI",{});var pXe=s(a6);x6e=n(pXe,"STRONG",{});var qWt=s(x6e);_Zr=r(qWt,"big_bird"),qWt.forEach(t),bZr=r(pXe," \u2014 "),ure=n(pXe,"A",{href:!0});var jWt=s(ure);vZr=r(jWt,"FlaxBigBirdForQuestionAnswering"),jWt.forEach(t),FZr=r(pXe," (BigBird model)"),pXe.forEach(t),TZr=i(Ge),n6=n(Ge,"LI",{});var _Xe=s(n6);$6e=n(_Xe,"STRONG",{});var DWt=s($6e);MZr=r(DWt,"distilbert"),DWt.forEach(t),EZr=r(_Xe," \u2014 "),pre=n(_Xe,"A",{href:!0});var GWt=s(pre);CZr=r(GWt,"FlaxDistilBertForQuestionAnswering"),GWt.forEach(t),wZr=r(_Xe," (DistilBERT model)"),_Xe.forEach(t),AZr=i(Ge),s6=n(Ge,"LI",{});var bXe=s(s6);k6e=n(bXe,"STRONG",{});var OWt=s(k6e);LZr=r(OWt,"electra"),OWt.forEach(t),yZr=r(bXe," \u2014 "),_re=n(bXe,"A",{href:!0});var VWt=s(_re);xZr=r(VWt,"FlaxElectraForQuestionAnswering"),VWt.forEach(t),$Zr=r(bXe," (ELECTRA model)"),bXe.forEach(t),kZr=i(Ge),l6=n(Ge,"LI",{});var vXe=s(l6);S6e=n(vXe,"STRONG",{});var XWt=s(S6e);SZr=r(XWt,"mbart"),XWt.forEach(t),RZr=r(vXe," \u2014 "),bre=n(vXe,"A",{href:!0});var zWt=s(bre);PZr=r(zWt,"FlaxMBartForQuestionAnswering"),zWt.forEach(t),BZr=r(vXe," (mBART model)"),vXe.forEach(t),IZr=i(Ge),i6=n(Ge,"LI",{});var FXe=s(i6);R6e=n(FXe,"STRONG",{});var WWt=s(R6e);NZr=r(WWt,"roberta"),WWt.forEach(t),qZr=r(FXe," \u2014 "),vre=n(FXe,"A",{href:!0});var QWt=s(vre);jZr=r(QWt,"FlaxRobertaForQuestionAnswering"),QWt.forEach(t),DZr=r(FXe," (RoBERTa model)"),FXe.forEach(t),GZr=i(Ge),d6=n(Ge,"LI",{});var TXe=s(d6);P6e=n(TXe,"STRONG",{});var HWt=s(P6e);OZr=r(HWt,"roformer"),HWt.forEach(t),VZr=r(TXe," \u2014 "),Fre=n(TXe,"A",{href:!0});var UWt=s(Fre);XZr=r(UWt,"FlaxRoFormerForQuestionAnswering"),UWt.forEach(t),zZr=r(TXe," (RoFormer model)"),TXe.forEach(t),WZr=i(Ge),c6=n(Ge,"LI",{});var MXe=s(c6);B6e=n(MXe,"STRONG",{});var JWt=s(B6e);QZr=r(JWt,"xlm-roberta"),JWt.forEach(t),HZr=r(MXe," \u2014 "),Tre=n(MXe,"A",{href:!0});var YWt=s(Tre);UZr=r(YWt,"FlaxXLMRobertaForQuestionAnswering"),YWt.forEach(t),JZr=r(MXe," (XLM-RoBERTa model)"),MXe.forEach(t),Ge.forEach(t),YZr=i(bi),T(m6.$$.fragment,bi),bi.forEach(t),_i.forEach(t),qWe=i(m),_m=n(m,"H2",{class:!0});var QHe=s(_m);f6=n(QHe,"A",{id:!0,class:!0,href:!0});var KWt=s(f6);I6e=n(KWt,"SPAN",{});var ZWt=s(I6e);T(Z$.$$.fragment,ZWt),ZWt.forEach(t),KWt.forEach(t),KZr=i(QHe),N6e=n(QHe,"SPAN",{});var eQt=s(N6e);ZZr=r(eQt,"FlaxAutoModelForTokenClassification"),eQt.forEach(t),QHe.forEach(t),jWe=i(m),Er=n(m,"DIV",{class:!0});var vi=s(Er);T(ek.$$.fragment,vi),eet=i(vi),bm=n(vi,"P",{});var Gae=s(bm);oet=r(Gae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mre=n(Gae,"A",{href:!0});var oQt=s(Mre);ret=r(oQt,"from_pretrained()"),oQt.forEach(t),tet=r(Gae," class method or the "),Ere=n(Gae,"A",{href:!0});var rQt=s(Ere);aet=r(rQt,"from_config()"),rQt.forEach(t),net=r(Gae,` class
method.`),Gae.forEach(t),set=i(vi),ok=n(vi,"P",{});var HHe=s(ok);iet=r(HHe,"This class cannot be instantiated directly using "),q6e=n(HHe,"CODE",{});var tQt=s(q6e);det=r(tQt,"__init__()"),tQt.forEach(t),cet=r(HHe," (throws an error)."),HHe.forEach(t),met=i(vi),ea=n(vi,"DIV",{class:!0});var oy=s(ea);T(rk.$$.fragment,oy),fet=i(oy),j6e=n(oy,"P",{});var aQt=s(j6e);get=r(aQt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aQt.forEach(t),het=i(oy),vm=n(oy,"P",{});var Oae=s(vm);uet=r(Oae,`Note:
Loading a model from its configuration file does `),D6e=n(Oae,"STRONG",{});var nQt=s(D6e);pet=r(nQt,"not"),nQt.forEach(t),_et=r(Oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cre=n(Oae,"A",{href:!0});var sQt=s(Cre);bet=r(sQt,"from_pretrained()"),sQt.forEach(t),vet=r(Oae," to load the model weights."),Oae.forEach(t),Fet=i(oy),T(g6.$$.fragment,oy),oy.forEach(t),Tet=i(vi),Yr=n(vi,"DIV",{class:!0});var Fi=s(Yr);T(tk.$$.fragment,Fi),Met=i(Fi),G6e=n(Fi,"P",{});var lQt=s(G6e);Eet=r(lQt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lQt.forEach(t),Cet=i(Fi),yn=n(Fi,"P",{});var ry=s(yn);wet=r(ry,"The model class to instantiate is selected based on the "),O6e=n(ry,"CODE",{});var iQt=s(O6e);Aet=r(iQt,"model_type"),iQt.forEach(t),Let=r(ry,` property of the config object (either
passed as an argument or loaded from `),V6e=n(ry,"CODE",{});var dQt=s(V6e);yet=r(dQt,"pretrained_model_name_or_path"),dQt.forEach(t),xet=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(ry,"CODE",{});var cQt=s(X6e);$et=r(cQt,"pretrained_model_name_or_path"),cQt.forEach(t),ket=r(ry,":"),ry.forEach(t),Set=i(Fi),Xe=n(Fi,"UL",{});var Eo=s(Xe);h6=n(Eo,"LI",{});var EXe=s(h6);z6e=n(EXe,"STRONG",{});var mQt=s(z6e);Ret=r(mQt,"albert"),mQt.forEach(t),Pet=r(EXe," \u2014 "),wre=n(EXe,"A",{href:!0});var fQt=s(wre);Bet=r(fQt,"FlaxAlbertForTokenClassification"),fQt.forEach(t),Iet=r(EXe," (ALBERT model)"),EXe.forEach(t),Net=i(Eo),u6=n(Eo,"LI",{});var CXe=s(u6);W6e=n(CXe,"STRONG",{});var gQt=s(W6e);qet=r(gQt,"bert"),gQt.forEach(t),jet=r(CXe," \u2014 "),Are=n(CXe,"A",{href:!0});var hQt=s(Are);Det=r(hQt,"FlaxBertForTokenClassification"),hQt.forEach(t),Get=r(CXe," (BERT model)"),CXe.forEach(t),Oet=i(Eo),p6=n(Eo,"LI",{});var wXe=s(p6);Q6e=n(wXe,"STRONG",{});var uQt=s(Q6e);Vet=r(uQt,"big_bird"),uQt.forEach(t),Xet=r(wXe," \u2014 "),Lre=n(wXe,"A",{href:!0});var pQt=s(Lre);zet=r(pQt,"FlaxBigBirdForTokenClassification"),pQt.forEach(t),Wet=r(wXe," (BigBird model)"),wXe.forEach(t),Qet=i(Eo),_6=n(Eo,"LI",{});var AXe=s(_6);H6e=n(AXe,"STRONG",{});var _Qt=s(H6e);Het=r(_Qt,"distilbert"),_Qt.forEach(t),Uet=r(AXe," \u2014 "),yre=n(AXe,"A",{href:!0});var bQt=s(yre);Jet=r(bQt,"FlaxDistilBertForTokenClassification"),bQt.forEach(t),Yet=r(AXe," (DistilBERT model)"),AXe.forEach(t),Ket=i(Eo),b6=n(Eo,"LI",{});var LXe=s(b6);U6e=n(LXe,"STRONG",{});var vQt=s(U6e);Zet=r(vQt,"electra"),vQt.forEach(t),eot=r(LXe," \u2014 "),xre=n(LXe,"A",{href:!0});var FQt=s(xre);oot=r(FQt,"FlaxElectraForTokenClassification"),FQt.forEach(t),rot=r(LXe," (ELECTRA model)"),LXe.forEach(t),tot=i(Eo),v6=n(Eo,"LI",{});var yXe=s(v6);J6e=n(yXe,"STRONG",{});var TQt=s(J6e);aot=r(TQt,"roberta"),TQt.forEach(t),not=r(yXe," \u2014 "),$re=n(yXe,"A",{href:!0});var MQt=s($re);sot=r(MQt,"FlaxRobertaForTokenClassification"),MQt.forEach(t),lot=r(yXe," (RoBERTa model)"),yXe.forEach(t),iot=i(Eo),F6=n(Eo,"LI",{});var xXe=s(F6);Y6e=n(xXe,"STRONG",{});var EQt=s(Y6e);dot=r(EQt,"roformer"),EQt.forEach(t),cot=r(xXe," \u2014 "),kre=n(xXe,"A",{href:!0});var CQt=s(kre);mot=r(CQt,"FlaxRoFormerForTokenClassification"),CQt.forEach(t),fot=r(xXe," (RoFormer model)"),xXe.forEach(t),got=i(Eo),T6=n(Eo,"LI",{});var $Xe=s(T6);K6e=n($Xe,"STRONG",{});var wQt=s(K6e);hot=r(wQt,"xlm-roberta"),wQt.forEach(t),uot=r($Xe," \u2014 "),Sre=n($Xe,"A",{href:!0});var AQt=s(Sre);pot=r(AQt,"FlaxXLMRobertaForTokenClassification"),AQt.forEach(t),_ot=r($Xe," (XLM-RoBERTa model)"),$Xe.forEach(t),Eo.forEach(t),bot=i(Fi),T(M6.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),DWe=i(m),Fm=n(m,"H2",{class:!0});var UHe=s(Fm);E6=n(UHe,"A",{id:!0,class:!0,href:!0});var LQt=s(E6);Z6e=n(LQt,"SPAN",{});var yQt=s(Z6e);T(ak.$$.fragment,yQt),yQt.forEach(t),LQt.forEach(t),vot=i(UHe),e7e=n(UHe,"SPAN",{});var xQt=s(e7e);Fot=r(xQt,"FlaxAutoModelForMultipleChoice"),xQt.forEach(t),UHe.forEach(t),GWe=i(m),Cr=n(m,"DIV",{class:!0});var Ti=s(Cr);T(nk.$$.fragment,Ti),Tot=i(Ti),Tm=n(Ti,"P",{});var Vae=s(Tm);Mot=r(Vae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Rre=n(Vae,"A",{href:!0});var $Qt=s(Rre);Eot=r($Qt,"from_pretrained()"),$Qt.forEach(t),Cot=r(Vae," class method or the "),Pre=n(Vae,"A",{href:!0});var kQt=s(Pre);wot=r(kQt,"from_config()"),kQt.forEach(t),Aot=r(Vae,` class
method.`),Vae.forEach(t),Lot=i(Ti),sk=n(Ti,"P",{});var JHe=s(sk);yot=r(JHe,"This class cannot be instantiated directly using "),o7e=n(JHe,"CODE",{});var SQt=s(o7e);xot=r(SQt,"__init__()"),SQt.forEach(t),$ot=r(JHe," (throws an error)."),JHe.forEach(t),kot=i(Ti),oa=n(Ti,"DIV",{class:!0});var ty=s(oa);T(lk.$$.fragment,ty),Sot=i(ty),r7e=n(ty,"P",{});var RQt=s(r7e);Rot=r(RQt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RQt.forEach(t),Pot=i(ty),Mm=n(ty,"P",{});var Xae=s(Mm);Bot=r(Xae,`Note:
Loading a model from its configuration file does `),t7e=n(Xae,"STRONG",{});var PQt=s(t7e);Iot=r(PQt,"not"),PQt.forEach(t),Not=r(Xae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=n(Xae,"A",{href:!0});var BQt=s(Bre);qot=r(BQt,"from_pretrained()"),BQt.forEach(t),jot=r(Xae," to load the model weights."),Xae.forEach(t),Dot=i(ty),T(C6.$$.fragment,ty),ty.forEach(t),Got=i(Ti),Kr=n(Ti,"DIV",{class:!0});var Mi=s(Kr);T(ik.$$.fragment,Mi),Oot=i(Mi),a7e=n(Mi,"P",{});var IQt=s(a7e);Vot=r(IQt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IQt.forEach(t),Xot=i(Mi),xn=n(Mi,"P",{});var ay=s(xn);zot=r(ay,"The model class to instantiate is selected based on the "),n7e=n(ay,"CODE",{});var NQt=s(n7e);Wot=r(NQt,"model_type"),NQt.forEach(t),Qot=r(ay,` property of the config object (either
passed as an argument or loaded from `),s7e=n(ay,"CODE",{});var qQt=s(s7e);Hot=r(qQt,"pretrained_model_name_or_path"),qQt.forEach(t),Uot=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l7e=n(ay,"CODE",{});var jQt=s(l7e);Jot=r(jQt,"pretrained_model_name_or_path"),jQt.forEach(t),Yot=r(ay,":"),ay.forEach(t),Kot=i(Mi),ze=n(Mi,"UL",{});var Co=s(ze);w6=n(Co,"LI",{});var kXe=s(w6);i7e=n(kXe,"STRONG",{});var DQt=s(i7e);Zot=r(DQt,"albert"),DQt.forEach(t),ert=r(kXe," \u2014 "),Ire=n(kXe,"A",{href:!0});var GQt=s(Ire);ort=r(GQt,"FlaxAlbertForMultipleChoice"),GQt.forEach(t),rrt=r(kXe," (ALBERT model)"),kXe.forEach(t),trt=i(Co),A6=n(Co,"LI",{});var SXe=s(A6);d7e=n(SXe,"STRONG",{});var OQt=s(d7e);art=r(OQt,"bert"),OQt.forEach(t),nrt=r(SXe," \u2014 "),Nre=n(SXe,"A",{href:!0});var VQt=s(Nre);srt=r(VQt,"FlaxBertForMultipleChoice"),VQt.forEach(t),lrt=r(SXe," (BERT model)"),SXe.forEach(t),irt=i(Co),L6=n(Co,"LI",{});var RXe=s(L6);c7e=n(RXe,"STRONG",{});var XQt=s(c7e);drt=r(XQt,"big_bird"),XQt.forEach(t),crt=r(RXe," \u2014 "),qre=n(RXe,"A",{href:!0});var zQt=s(qre);mrt=r(zQt,"FlaxBigBirdForMultipleChoice"),zQt.forEach(t),frt=r(RXe," (BigBird model)"),RXe.forEach(t),grt=i(Co),y6=n(Co,"LI",{});var PXe=s(y6);m7e=n(PXe,"STRONG",{});var WQt=s(m7e);hrt=r(WQt,"distilbert"),WQt.forEach(t),urt=r(PXe," \u2014 "),jre=n(PXe,"A",{href:!0});var QQt=s(jre);prt=r(QQt,"FlaxDistilBertForMultipleChoice"),QQt.forEach(t),_rt=r(PXe," (DistilBERT model)"),PXe.forEach(t),brt=i(Co),x6=n(Co,"LI",{});var BXe=s(x6);f7e=n(BXe,"STRONG",{});var HQt=s(f7e);vrt=r(HQt,"electra"),HQt.forEach(t),Frt=r(BXe," \u2014 "),Dre=n(BXe,"A",{href:!0});var UQt=s(Dre);Trt=r(UQt,"FlaxElectraForMultipleChoice"),UQt.forEach(t),Mrt=r(BXe," (ELECTRA model)"),BXe.forEach(t),Ert=i(Co),$6=n(Co,"LI",{});var IXe=s($6);g7e=n(IXe,"STRONG",{});var JQt=s(g7e);Crt=r(JQt,"roberta"),JQt.forEach(t),wrt=r(IXe," \u2014 "),Gre=n(IXe,"A",{href:!0});var YQt=s(Gre);Art=r(YQt,"FlaxRobertaForMultipleChoice"),YQt.forEach(t),Lrt=r(IXe," (RoBERTa model)"),IXe.forEach(t),yrt=i(Co),k6=n(Co,"LI",{});var NXe=s(k6);h7e=n(NXe,"STRONG",{});var KQt=s(h7e);xrt=r(KQt,"roformer"),KQt.forEach(t),$rt=r(NXe," \u2014 "),Ore=n(NXe,"A",{href:!0});var ZQt=s(Ore);krt=r(ZQt,"FlaxRoFormerForMultipleChoice"),ZQt.forEach(t),Srt=r(NXe," (RoFormer model)"),NXe.forEach(t),Rrt=i(Co),S6=n(Co,"LI",{});var qXe=s(S6);u7e=n(qXe,"STRONG",{});var eHt=s(u7e);Prt=r(eHt,"xlm-roberta"),eHt.forEach(t),Brt=r(qXe," \u2014 "),Vre=n(qXe,"A",{href:!0});var oHt=s(Vre);Irt=r(oHt,"FlaxXLMRobertaForMultipleChoice"),oHt.forEach(t),Nrt=r(qXe," (XLM-RoBERTa model)"),qXe.forEach(t),Co.forEach(t),qrt=i(Mi),T(R6.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),OWe=i(m),Em=n(m,"H2",{class:!0});var YHe=s(Em);P6=n(YHe,"A",{id:!0,class:!0,href:!0});var rHt=s(P6);p7e=n(rHt,"SPAN",{});var tHt=s(p7e);T(dk.$$.fragment,tHt),tHt.forEach(t),rHt.forEach(t),jrt=i(YHe),_7e=n(YHe,"SPAN",{});var aHt=s(_7e);Drt=r(aHt,"FlaxAutoModelForNextSentencePrediction"),aHt.forEach(t),YHe.forEach(t),VWe=i(m),wr=n(m,"DIV",{class:!0});var Ei=s(wr);T(ck.$$.fragment,Ei),Grt=i(Ei),Cm=n(Ei,"P",{});var zae=s(Cm);Ort=r(zae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Xre=n(zae,"A",{href:!0});var nHt=s(Xre);Vrt=r(nHt,"from_pretrained()"),nHt.forEach(t),Xrt=r(zae," class method or the "),zre=n(zae,"A",{href:!0});var sHt=s(zre);zrt=r(sHt,"from_config()"),sHt.forEach(t),Wrt=r(zae,` class
method.`),zae.forEach(t),Qrt=i(Ei),mk=n(Ei,"P",{});var KHe=s(mk);Hrt=r(KHe,"This class cannot be instantiated directly using "),b7e=n(KHe,"CODE",{});var lHt=s(b7e);Urt=r(lHt,"__init__()"),lHt.forEach(t),Jrt=r(KHe," (throws an error)."),KHe.forEach(t),Yrt=i(Ei),ra=n(Ei,"DIV",{class:!0});var ny=s(ra);T(fk.$$.fragment,ny),Krt=i(ny),v7e=n(ny,"P",{});var iHt=s(v7e);Zrt=r(iHt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iHt.forEach(t),ett=i(ny),wm=n(ny,"P",{});var Wae=s(wm);ott=r(Wae,`Note:
Loading a model from its configuration file does `),F7e=n(Wae,"STRONG",{});var dHt=s(F7e);rtt=r(dHt,"not"),dHt.forEach(t),ttt=r(Wae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wre=n(Wae,"A",{href:!0});var cHt=s(Wre);att=r(cHt,"from_pretrained()"),cHt.forEach(t),ntt=r(Wae," to load the model weights."),Wae.forEach(t),stt=i(ny),T(B6.$$.fragment,ny),ny.forEach(t),ltt=i(Ei),Zr=n(Ei,"DIV",{class:!0});var Ci=s(Zr);T(gk.$$.fragment,Ci),itt=i(Ci),T7e=n(Ci,"P",{});var mHt=s(T7e);dtt=r(mHt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mHt.forEach(t),ctt=i(Ci),$n=n(Ci,"P",{});var sy=s($n);mtt=r(sy,"The model class to instantiate is selected based on the "),M7e=n(sy,"CODE",{});var fHt=s(M7e);ftt=r(fHt,"model_type"),fHt.forEach(t),gtt=r(sy,` property of the config object (either
passed as an argument or loaded from `),E7e=n(sy,"CODE",{});var gHt=s(E7e);htt=r(gHt,"pretrained_model_name_or_path"),gHt.forEach(t),utt=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=n(sy,"CODE",{});var hHt=s(C7e);ptt=r(hHt,"pretrained_model_name_or_path"),hHt.forEach(t),_tt=r(sy,":"),sy.forEach(t),btt=i(Ci),w7e=n(Ci,"UL",{});var uHt=s(w7e);I6=n(uHt,"LI",{});var jXe=s(I6);A7e=n(jXe,"STRONG",{});var pHt=s(A7e);vtt=r(pHt,"bert"),pHt.forEach(t),Ftt=r(jXe," \u2014 "),Qre=n(jXe,"A",{href:!0});var _Ht=s(Qre);Ttt=r(_Ht,"FlaxBertForNextSentencePrediction"),_Ht.forEach(t),Mtt=r(jXe," (BERT model)"),jXe.forEach(t),uHt.forEach(t),Ett=i(Ci),T(N6.$$.fragment,Ci),Ci.forEach(t),Ei.forEach(t),XWe=i(m),Am=n(m,"H2",{class:!0});var ZHe=s(Am);q6=n(ZHe,"A",{id:!0,class:!0,href:!0});var bHt=s(q6);L7e=n(bHt,"SPAN",{});var vHt=s(L7e);T(hk.$$.fragment,vHt),vHt.forEach(t),bHt.forEach(t),Ctt=i(ZHe),y7e=n(ZHe,"SPAN",{});var FHt=s(y7e);wtt=r(FHt,"FlaxAutoModelForImageClassification"),FHt.forEach(t),ZHe.forEach(t),zWe=i(m),Ar=n(m,"DIV",{class:!0});var wi=s(Ar);T(uk.$$.fragment,wi),Att=i(wi),Lm=n(wi,"P",{});var Qae=s(Lm);Ltt=r(Qae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Hre=n(Qae,"A",{href:!0});var THt=s(Hre);ytt=r(THt,"from_pretrained()"),THt.forEach(t),xtt=r(Qae," class method or the "),Ure=n(Qae,"A",{href:!0});var MHt=s(Ure);$tt=r(MHt,"from_config()"),MHt.forEach(t),ktt=r(Qae,` class
method.`),Qae.forEach(t),Stt=i(wi),pk=n(wi,"P",{});var eUe=s(pk);Rtt=r(eUe,"This class cannot be instantiated directly using "),x7e=n(eUe,"CODE",{});var EHt=s(x7e);Ptt=r(EHt,"__init__()"),EHt.forEach(t),Btt=r(eUe," (throws an error)."),eUe.forEach(t),Itt=i(wi),ta=n(wi,"DIV",{class:!0});var ly=s(ta);T(_k.$$.fragment,ly),Ntt=i(ly),$7e=n(ly,"P",{});var CHt=s($7e);qtt=r(CHt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),CHt.forEach(t),jtt=i(ly),ym=n(ly,"P",{});var Hae=s(ym);Dtt=r(Hae,`Note:
Loading a model from its configuration file does `),k7e=n(Hae,"STRONG",{});var wHt=s(k7e);Gtt=r(wHt,"not"),wHt.forEach(t),Ott=r(Hae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jre=n(Hae,"A",{href:!0});var AHt=s(Jre);Vtt=r(AHt,"from_pretrained()"),AHt.forEach(t),Xtt=r(Hae," to load the model weights."),Hae.forEach(t),ztt=i(ly),T(j6.$$.fragment,ly),ly.forEach(t),Wtt=i(wi),et=n(wi,"DIV",{class:!0});var Ai=s(et);T(bk.$$.fragment,Ai),Qtt=i(Ai),S7e=n(Ai,"P",{});var LHt=s(S7e);Htt=r(LHt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LHt.forEach(t),Utt=i(Ai),kn=n(Ai,"P",{});var iy=s(kn);Jtt=r(iy,"The model class to instantiate is selected based on the "),R7e=n(iy,"CODE",{});var yHt=s(R7e);Ytt=r(yHt,"model_type"),yHt.forEach(t),Ktt=r(iy,` property of the config object (either
passed as an argument or loaded from `),P7e=n(iy,"CODE",{});var xHt=s(P7e);Ztt=r(xHt,"pretrained_model_name_or_path"),xHt.forEach(t),eat=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B7e=n(iy,"CODE",{});var $Ht=s(B7e);oat=r($Ht,"pretrained_model_name_or_path"),$Ht.forEach(t),rat=r(iy,":"),iy.forEach(t),tat=i(Ai),vk=n(Ai,"UL",{});var oUe=s(vk);D6=n(oUe,"LI",{});var DXe=s(D6);I7e=n(DXe,"STRONG",{});var kHt=s(I7e);aat=r(kHt,"beit"),kHt.forEach(t),nat=r(DXe," \u2014 "),Yre=n(DXe,"A",{href:!0});var SHt=s(Yre);sat=r(SHt,"FlaxBeitForImageClassification"),SHt.forEach(t),lat=r(DXe," (BEiT model)"),DXe.forEach(t),iat=i(oUe),G6=n(oUe,"LI",{});var GXe=s(G6);N7e=n(GXe,"STRONG",{});var RHt=s(N7e);dat=r(RHt,"vit"),RHt.forEach(t),cat=r(GXe," \u2014 "),Kre=n(GXe,"A",{href:!0});var PHt=s(Kre);mat=r(PHt,"FlaxViTForImageClassification"),PHt.forEach(t),fat=r(GXe," (ViT model)"),GXe.forEach(t),oUe.forEach(t),gat=i(Ai),T(O6.$$.fragment,Ai),Ai.forEach(t),wi.forEach(t),WWe=i(m),xm=n(m,"H2",{class:!0});var rUe=s(xm);V6=n(rUe,"A",{id:!0,class:!0,href:!0});var BHt=s(V6);q7e=n(BHt,"SPAN",{});var IHt=s(q7e);T(Fk.$$.fragment,IHt),IHt.forEach(t),BHt.forEach(t),hat=i(rUe),j7e=n(rUe,"SPAN",{});var NHt=s(j7e);uat=r(NHt,"FlaxAutoModelForVision2Seq"),NHt.forEach(t),rUe.forEach(t),QWe=i(m),Lr=n(m,"DIV",{class:!0});var Li=s(Lr);T(Tk.$$.fragment,Li),pat=i(Li),$m=n(Li,"P",{});var Uae=s($m);_at=r(Uae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Zre=n(Uae,"A",{href:!0});var qHt=s(Zre);bat=r(qHt,"from_pretrained()"),qHt.forEach(t),vat=r(Uae," class method or the "),ete=n(Uae,"A",{href:!0});var jHt=s(ete);Fat=r(jHt,"from_config()"),jHt.forEach(t),Tat=r(Uae,` class
method.`),Uae.forEach(t),Mat=i(Li),Mk=n(Li,"P",{});var tUe=s(Mk);Eat=r(tUe,"This class cannot be instantiated directly using "),D7e=n(tUe,"CODE",{});var DHt=s(D7e);Cat=r(DHt,"__init__()"),DHt.forEach(t),wat=r(tUe," (throws an error)."),tUe.forEach(t),Aat=i(Li),aa=n(Li,"DIV",{class:!0});var dy=s(aa);T(Ek.$$.fragment,dy),Lat=i(dy),G7e=n(dy,"P",{});var GHt=s(G7e);yat=r(GHt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),GHt.forEach(t),xat=i(dy),km=n(dy,"P",{});var Jae=s(km);$at=r(Jae,`Note:
Loading a model from its configuration file does `),O7e=n(Jae,"STRONG",{});var OHt=s(O7e);kat=r(OHt,"not"),OHt.forEach(t),Sat=r(Jae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ote=n(Jae,"A",{href:!0});var VHt=s(ote);Rat=r(VHt,"from_pretrained()"),VHt.forEach(t),Pat=r(Jae," to load the model weights."),Jae.forEach(t),Bat=i(dy),T(X6.$$.fragment,dy),dy.forEach(t),Iat=i(Li),ot=n(Li,"DIV",{class:!0});var yi=s(ot);T(Ck.$$.fragment,yi),Nat=i(yi),V7e=n(yi,"P",{});var XHt=s(V7e);qat=r(XHt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XHt.forEach(t),jat=i(yi),Sn=n(yi,"P",{});var cy=s(Sn);Dat=r(cy,"The model class to instantiate is selected based on the "),X7e=n(cy,"CODE",{});var zHt=s(X7e);Gat=r(zHt,"model_type"),zHt.forEach(t),Oat=r(cy,` property of the config object (either
passed as an argument or loaded from `),z7e=n(cy,"CODE",{});var WHt=s(z7e);Vat=r(WHt,"pretrained_model_name_or_path"),WHt.forEach(t),Xat=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W7e=n(cy,"CODE",{});var QHt=s(W7e);zat=r(QHt,"pretrained_model_name_or_path"),QHt.forEach(t),Wat=r(cy,":"),cy.forEach(t),Qat=i(yi),Q7e=n(yi,"UL",{});var HHt=s(Q7e);z6=n(HHt,"LI",{});var OXe=s(z6);H7e=n(OXe,"STRONG",{});var UHt=s(H7e);Hat=r(UHt,"vision-encoder-decoder"),UHt.forEach(t),Uat=r(OXe," \u2014 "),rte=n(OXe,"A",{href:!0});var JHt=s(rte);Jat=r(JHt,"FlaxVisionEncoderDecoderModel"),JHt.forEach(t),Yat=r(OXe," (Vision Encoder decoder model)"),OXe.forEach(t),HHt.forEach(t),Kat=i(yi),T(W6.$$.fragment,yi),yi.forEach(t),Li.forEach(t),this.h()},h(){d(g,"name","hf:doc:metadata"),d(g,"content",JSON.stringify(rYt)),d(f,"id","auto-classes"),d(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f,"href","#auto-classes"),d(u,"class","relative group"),d(Pn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),d(In,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),d(Nn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),d(Bi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(jm,"id","extending-the-auto-classes"),d(jm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jm,"href","#extending-the-auto-classes"),d(Ii,"class","relative group"),d(Gm,"id","transformers.AutoConfig"),d(Gm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gm,"href","#transformers.AutoConfig"),d(Ni,"class","relative group"),d(eR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(oR,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),d(rR,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(tR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),d(aR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),d(nR,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(sR,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),d(lR,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(iR,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(dR,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(cR,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),d(mR,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),d(fR,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),d(gR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),d(hR,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),d(uR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),d(pR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),d(_R,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),d(bR,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),d(vR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(FR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(TR,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(MR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),d(ER,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(CR,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(wR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),d(AR,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),d(LR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),d(yR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),d(xR,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),d($R,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),d(kR,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(SR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),d(RR,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),d(PR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),d(BR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),d(IR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),d(NR,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),d(qR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),d(jR,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(DR,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),d(GR,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),d(OR,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),d(VR,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),d(XR,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),d(zR,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(WR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(QR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(HR,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),d(UR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),d(JR,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),d(YR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),d(KR,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),d(ZR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),d(eP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),d(oP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),d(rP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),d(tP,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(aP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),d(nP,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),d(sP,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(lP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(iP,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),d(dP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),d(cP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),d(mP,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),d(fP,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),d(gP,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(hP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(uP,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),d(pP,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),d(_P,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),d(bP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),d(vP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),d(FP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(TP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(MP,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(EP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),d(CP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),d(wP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),d(AP,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),d(LP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),d(yP,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),d(xP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),d($P,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),d(kP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),d(SP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),d(RP,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),d(PP,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),d(BP,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(IP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(NP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(qP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),d(jP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(DP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),d(GP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),d(OP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),d(VP,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),d(XP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(zP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),d(WP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(QP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(HP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),d(UP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),d(JP,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(YP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(KP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(ZP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),d(eB,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(oB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(rB,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),d(tB,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),d(aB,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),d(nB,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),d(sB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(lB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(iB,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(dB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),d(cB,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),d(mB,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rh,"id","transformers.AutoTokenizer"),d(rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rh,"href","#transformers.AutoTokenizer"),d(ji,"class","relative group"),d(fB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(gB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(hB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(uB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),d(pB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),d(_B,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),d(bB,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(vB,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(FB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(TB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(MB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(EB,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(CB,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(wB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(AB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(LB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(yB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(xB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d($B,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(kB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(SB,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),d(RB,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(PB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),d(BB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(IB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),d(NB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(qB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(jB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),d(DB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),d(GB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(OB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(VB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),d(XB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),d(zB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(WB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(QB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(HB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),d(UB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(JB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(YB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(KB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(ZB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(eI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(oI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(rI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),d(tI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(aI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(nI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),d(sI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(lI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(iI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),d(dI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(cI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(mI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(fI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(gI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(hI,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),d(uI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(pI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(_I,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(bI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(vI,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),d(FI,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(TI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(MI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(EI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(CI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(wI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(AI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(LI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(yI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),d(xI,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),d($I,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(kI,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(SI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),d(RI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),d(PI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),d(BI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(II,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(NI,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(qI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),d(jI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(DI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(GI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(OI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),d(VI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),d(XI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(zI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(WI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(QI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(HI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(UI,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),d(JI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(YI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(KI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(ZI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(eN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(oN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(rN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),d(tN,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),d(aN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(nN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(sN,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),d(lN,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),d(iN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(dN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(cN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(mN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(fN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(gN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(hN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(uN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(pN,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(_N,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(bN,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),d(vN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),d(FN,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(TN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(MN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(EN,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),d(CN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),d(wN,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),d(AN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),d(LN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(yN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),d(xN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d($N,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(kN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(SN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(RN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(PN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(BN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(IN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(NN,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(qN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),d(jN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(DN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(GN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(ON,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(VN,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(XN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),d(zN,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),d(WN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(QN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(HN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(UN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(JN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(YN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(KN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(ZN,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(eq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),d(oq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(rq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),d(tq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(aq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(nq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(sq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(lq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(iq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(dq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(cq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(mq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qh,"id","transformers.AutoFeatureExtractor"),d(qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qh,"href","#transformers.AutoFeatureExtractor"),d(Di,"class","relative group"),d(fq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(gq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(hq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(uq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(pq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(_q,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(bq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(vq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(Fq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(Tq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d(Mq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),d(Eq,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d(Cq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(wq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Aq,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),d(Lq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(yq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),d(xq,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),d($q,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(kq,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),d(Sq,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),d(Rq,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),d(Pq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(Bq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(Iq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Nq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(qq,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(jq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(Dq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Gq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(Oq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),d(Vq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(Xq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(zq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Wq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Qq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Eu,"id","transformers.AutoProcessor"),d(Eu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Eu,"href","#transformers.AutoProcessor"),d(Gi,"class","relative group"),d(Hq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(Uq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(Jq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),d(Yq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(Kq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(Zq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),d(ej,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(oj,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),d(rj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(tj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(aj,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(nj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(sj,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),d(lj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(ij,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(dj,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),d(cj,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(mj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(fj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(gj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wu,"id","transformers.AutoModel"),d(Wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wu,"href","#transformers.AutoModel"),d(Vi,"class","relative group"),d(hj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_j,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),d(bj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),d(vj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),d(Fj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(Tj,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(Mj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),d(Ej,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(Cj,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(wj,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(Aj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),d(Lj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),d(yj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),d(xj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),d($j,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),d(kj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),d(Sj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(Rj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),d(Pj,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),d(Bj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(Ij,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(Nj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(qj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),d(jj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(Dj,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(Gj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),d(Oj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),d(Vj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),d(Xj,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(zj,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),d(Wj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),d(Qj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),d(Hj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),d(Uj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),d(Jj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),d(Yj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),d(Kj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),d(Zj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),d(eD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),d(oD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(rD,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),d(tD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),d(aD,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),d(nD,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),d(sD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),d(lD,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(iD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(dD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(cD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),d(mD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),d(fD,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),d(gD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),d(hD,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),d(uD,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),d(pD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),d(_D,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(bD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),d(vD,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),d(FD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),d(TD,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),d(MD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(ED,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),d(CD,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),d(wD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),d(AD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),d(LD,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),d(yD,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),d(xD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d($D,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),d(kD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(SD,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),d(RD,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),d(PD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),d(BD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),d(ID,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),d(ND,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(qD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(jD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),d(DD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),d(GD,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),d(OD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),d(VD,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),d(XD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(zD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),d(WD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),d(QD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),d(HD,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),d(UD,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),d(JD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(YD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),d(KD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(ZD,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),d(eG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),d(oG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),d(rG,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),d(tG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(aG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),d(nG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(sG,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),d(lG,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),d(iG,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(dG,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),d(cG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),d(mG,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(fG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(gG,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),d(hG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),d(uG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),d(pG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),d(_G,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(bG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(vG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(FG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),d(TG,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),d(MG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e2,"id","transformers.AutoModelForPreTraining"),d(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e2,"href","#transformers.AutoModelForPreTraining"),d(Wi,"class","relative group"),d(EG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),d(LG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(yG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),d(xG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d($G,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),d(kG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(SG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(RG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(PG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(BG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(IG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(NG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),d(qG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(jG,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),d(DG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),d(GG,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(OG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(VG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(XG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(zG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(WG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(QG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(HG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(UG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(JG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(YG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(KG,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),d(ZG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(eO,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(oO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(rO,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),d(tO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(aO,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(nO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(sO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(lO,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(iO,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(dO,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(cO,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(mO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(fO,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),d(gO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(hO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(uO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(pO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U2,"id","transformers.AutoModelForCausalLM"),d(U2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U2,"href","#transformers.AutoModelForCausalLM"),d(Ui,"class","relative group"),d(_O,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),d(TO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),d(MO,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(EO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(CO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(wO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(AO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(LO,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),d(yO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(xO,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),d($O,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(kO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(SO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),d(RO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(PO,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(BO,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),d(IO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(NO,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),d(qO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),d(jO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(DO,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),d(GO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(OO,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),d(VO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(XO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(zO,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(WO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(QO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(HO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(UO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(JO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(YO,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(KO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(ZO,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(eV,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(oV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(rV,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(tV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(aV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(nV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jb,"id","transformers.AutoModelForMaskedLM"),d(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jb,"href","#transformers.AutoModelForMaskedLM"),d(Ki,"class","relative group"),d(sV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(cV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(mV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),d(fV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(gV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(hV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(uV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(pV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(_V,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(bV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(vV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(FV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(TV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(MV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(EV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(CV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(wV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(AV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),d(LV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(yV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(xV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d($V,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(kV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(SV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),d(RV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(PV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(BV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(IV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(NV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(qV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(jV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(DV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(GV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(OV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(VV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(XV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(zV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lv,"id","transformers.AutoModelForSeq2SeqLM"),d(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lv,"href","#transformers.AutoModelForSeq2SeqLM"),d(od,"class","relative group"),d(WV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(JV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(YV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(KV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(ZV,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(eX,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(oX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(rX,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(tX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(aX,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),d(nX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(sX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(lX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),d(iX,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(dX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(cX,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(mX,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(fX,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(gX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jv,"id","transformers.AutoModelForSequenceClassification"),d(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jv,"href","#transformers.AutoModelForSequenceClassification"),d(ad,"class","relative group"),d(hX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_X,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(bX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(vX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),d(FX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(TX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(MX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),d(EX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(CX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(wX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(AX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(LX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(yX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(xX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d($X,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(kX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(SX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(RX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(PX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(BX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(IX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(NX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(qX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(jX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(DX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(GX,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),d(OX,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),d(VX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(XX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(zX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(WX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(QX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(HX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),d(UX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),d(JX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(YX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(KX,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),d(ZX,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(ez,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(oz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(rz,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(tz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(az,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(nz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(sz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(lz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(iz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(dz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(cz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(mz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(fz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(gz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y1,"id","transformers.AutoModelForMultipleChoice"),d(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y1,"href","#transformers.AutoModelForMultipleChoice"),d(ld,"class","relative group"),d(hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_z,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(bz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),d(vz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(Fz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(Tz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Mz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Ez,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(Cz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),d(wz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Az,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(Lz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(yz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(xz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d($z,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(kz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Sz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Rz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Pz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(Bz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),d(Iz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Nz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(qz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(jz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Dz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Gz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Oz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Vz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Xz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(zz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(Wz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kF,"id","transformers.AutoModelForNextSentencePrediction"),d(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kF,"href","#transformers.AutoModelForNextSentencePrediction"),d(cd,"class","relative group"),d(Qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(Yz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(Kz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(Zz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(eW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),d(oW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GF,"id","transformers.AutoModelForTokenClassification"),d(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GF,"href","#transformers.AutoModelForTokenClassification"),d(gd,"class","relative group"),d(rW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(sW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),d(lW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(iW,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),d(dW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(cW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),d(mW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(fW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(gW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(hW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(uW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(pW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(_W,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(bW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(vW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(FW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(TW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(MW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(EW,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(CW,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),d(wW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(AW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(LW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(yW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(xW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),d($W,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(kW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(SW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(RW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(PW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(BW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(IW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(NW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(qW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(jW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(DW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LT,"id","transformers.AutoModelForQuestionAnswering"),d(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LT,"href","#transformers.AutoModelForQuestionAnswering"),d(pd,"class","relative group"),d(GW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(zW,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(WW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(QW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(HW,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(UW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(JW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(YW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(KW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(ZW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(eQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(oQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(rQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(tQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(aQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(nQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(sQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(lQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(iQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(dQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),d(cQ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(mQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(fQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(gQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(hQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(uQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(pQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(_Q,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),d(bQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),d(vQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(FQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(TQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(MQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(EQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(CQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(wQ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(AQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(LQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(yQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(xQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d($Q,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(kQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vM,"id","transformers.AutoModelForTableQuestionAnswering"),d(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vM,"href","#transformers.AutoModelForTableQuestionAnswering"),d(vd,"class","relative group"),d(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CM,"id","transformers.AutoModelForImageClassification"),d(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CM,"href","#transformers.AutoModelForImageClassification"),d(Md,"class","relative group"),d(IQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jQ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),d(DQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(GQ,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),d(OQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(VQ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),d(XQ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(zQ,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(WQ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),d(QQ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),d(HQ,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),d(UQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(JQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(YQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(KQ,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(ZQ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(eH,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(oH,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(rH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),d(tH,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),d(aH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),d(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GM,"id","transformers.AutoModelForVision2Seq"),d(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GM,"href","#transformers.AutoModelForVision2Seq"),d(wd,"class","relative group"),d(nH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iH,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WM,"id","transformers.AutoModelForVisualQuestionAnswering"),d(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WM,"href","#transformers.AutoModelForVisualQuestionAnswering"),d(yd,"class","relative group"),d(dH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fH,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YM,"id","transformers.AutoModelForAudioClassification"),d(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YM,"href","#transformers.AutoModelForAudioClassification"),d(kd,"class","relative group"),d(gH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(_H,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(bH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(vH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(FH,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(TH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(MH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(EH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),d(CH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c4,"id","transformers.AutoModelForAudioFrameClassification"),d(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c4,"href","#transformers.AutoModelForAudioFrameClassification"),d(Pd,"class","relative group"),d(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(xH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d($H,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(kH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),d(SH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v4,"id","transformers.AutoModelForCTC"),d(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v4,"href","#transformers.AutoModelForCTC"),d(Nd,"class","relative group"),d(RH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(NH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),d(qH,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),d(jH,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),d(DH,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),d(GH,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(OH,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(VH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(XH,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),d(zH,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R4,"id","transformers.AutoModelForSpeechSeq2Seq"),d(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R4,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Dd,"class","relative group"),d(WH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UH,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(JH,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j4,"id","transformers.AutoModelForAudioXVector"),d(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j4,"href","#transformers.AutoModelForAudioXVector"),d(Vd,"class","relative group"),d(YH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(oU,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(rU,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(tU,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),d(aU,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H4,"id","transformers.AutoModelForMaskedImageModeling"),d(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H4,"href","#transformers.AutoModelForMaskedImageModeling"),d(Wd,"class","relative group"),d(nU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iU,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(dU,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(cU,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oE,"id","transformers.AutoModelForObjectDetection"),d(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oE,"href","#transformers.AutoModelForObjectDetection"),d(Jd,"class","relative group"),d(mU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hU,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),d(uU,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lE,"id","transformers.AutoModelForImageSegmentation"),d(lE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lE,"href","#transformers.AutoModelForImageSegmentation"),d(Zd,"class","relative group"),d(pU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vU,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fE,"id","transformers.AutoModelForSemanticSegmentation"),d(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fE,"href","#transformers.AutoModelForSemanticSegmentation"),d(rc,"class","relative group"),d(FU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EU,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(CU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(wU,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(AU,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),d(LU,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TE,"id","transformers.AutoModelForInstanceSegmentation"),d(TE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TE,"href","#transformers.AutoModelForInstanceSegmentation"),d(nc,"class","relative group"),d(yU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kU,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AE,"id","transformers.TFAutoModel"),d(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AE,"href","#transformers.TFAutoModel"),d(ic,"class","relative group"),d(SU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),d(IU,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),d(NU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),d(qU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(jU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(DU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),d(GU,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),d(OU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),d(VU,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(XU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),d(zU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),d(WU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),d(QU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(HU,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),d(UU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(JU,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(YU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),d(KU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(ZU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),d(eJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(oJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),d(rJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),d(tJ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),d(aJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(nJ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),d(sJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),d(lJ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),d(iJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),d(dJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),d(cJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(mJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),d(fJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),d(gJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(hJ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),d(uJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),d(pJ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),d(_J,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),d(bJ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),d(vJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),d(FJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),d(TJ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),d(MJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(EJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),d(CJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),d(wJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),d(AJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(LJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),d(yJ,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(xJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d($J,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),d(kJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(SJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wC,"id","transformers.TFAutoModelForPreTraining"),d(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wC,"href","#transformers.TFAutoModelForPreTraining"),d(mc,"class","relative group"),d(RJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(NJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(qJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),d(jJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(DJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(GJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(OJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(VJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(XJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(zJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(WJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(QJ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(HJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(UJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(JJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(YJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(KJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(ZJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(eY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(oY,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(rY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(tY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(aY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YC,"id","transformers.TFAutoModelForCausalLM"),d(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YC,"href","#transformers.TFAutoModelForCausalLM"),d(hc,"class","relative group"),d(nY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(dY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(cY,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(mY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(fY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(gY,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(hY,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),d(uY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(pY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(_Y,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(bY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(vY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(FY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(g5,"id","transformers.TFAutoModelForImageClassification"),d(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g5,"href","#transformers.TFAutoModelForImageClassification"),d(_c,"class","relative group"),d(TY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(wY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),d(AY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),d(LY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),d(yY,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),d(xY,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),d($Y,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),d(kY,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),d(SY,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E5,"id","transformers.TFAutoModelForMaskedLM"),d(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E5,"href","#transformers.TFAutoModelForMaskedLM"),d(Fc,"class","relative group"),d(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(NY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(qY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(jY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(DY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(GY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(OY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(VY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(XY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(zY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(WY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(QY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(HY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(UY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(JY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(YY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(KY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(ZY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(eK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(oK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W5,"id","transformers.TFAutoModelForSeq2SeqLM"),d(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W5,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ec,"class","relative group"),d(rK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nK,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(sK,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(lK,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(iK,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(dK,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(cK,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),d(mK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(fK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(gK,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(hK,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n3,"id","transformers.TFAutoModelForSequenceClassification"),d(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n3,"href","#transformers.TFAutoModelForSequenceClassification"),d(Ac,"class","relative group"),d(uK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(vK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(FK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(TK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(MK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(EK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(CK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(wK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(AK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(LK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(yK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(xK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d($K,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(kK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(SK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(RK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(PK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(BK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(IK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(NK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(qK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(jK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(DK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(GK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(OK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(VK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P3,"id","transformers.TFAutoModelForMultipleChoice"),d(P3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P3,"href","#transformers.TFAutoModelForMultipleChoice"),d(xc,"class","relative group"),d(XK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(HK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(UK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(JK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(YK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(KK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(ZK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(eZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(oZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(rZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(tZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(aZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(nZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(sZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(lZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(iZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(dZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(e0,"id","transformers.TFAutoModelForNextSentencePrediction"),d(e0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e0,"href","#transformers.TFAutoModelForNextSentencePrediction"),d(Sc,"class","relative group"),d(cZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),d(hZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n0,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n0,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Bc,"class","relative group"),d(uZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_Z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d0,"id","transformers.TFAutoModelForTokenClassification"),d(d0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d0,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(vZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(EZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(CZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(wZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(AZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(LZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(yZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(xZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d($Z,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(kZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(SZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(RZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(PZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(BZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(IZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(NZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(qZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(jZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(DZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(GZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S0,"id","transformers.TFAutoModelForQuestionAnswering"),d(S0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S0,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Gc,"class","relative group"),d(OZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(WZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(QZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(HZ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(UZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(JZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(YZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(KZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(ZZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(eee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(oee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(ree,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(tee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(aee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(nee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(see,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(lee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(iee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(dee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(cee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ow,"id","transformers.TFAutoModelForVision2Seq"),d(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ow,"href","#transformers.TFAutoModelForVision2Seq"),d(Xc,"class","relative group"),d(mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hee,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nw,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nw,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Qc,"class","relative group"),d(uee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_ee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bee,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dw,"id","transformers.FlaxAutoModel"),d(dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dw,"href","#transformers.FlaxAutoModel"),d(Jc,"class","relative group"),d(vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Tee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),d(Eee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),d(Cee,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),d(wee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),d(Aee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(Lee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(yee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(xee,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),d($ee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(kee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),d(See,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(Ree,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(Pee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(Bee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(Iee,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),d(Nee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),d(qee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),d(jee,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),d(Dee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(Gee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(Oee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(Vee,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),d(Xee,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(zee,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),d(Wee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(Qee,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(Hee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jw,"id","transformers.FlaxAutoModelForCausalLM"),d(jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jw,"href","#transformers.FlaxAutoModelForCausalLM"),d(Zc,"class","relative group"),d(Uee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Yee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(Zee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),d(eoe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),d(ooe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),d(roe,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(toe,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(aoe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(noe,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),d(soe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),d(loe,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kw,"id","transformers.FlaxAutoModelForPreTraining"),d(Kw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kw,"href","#transformers.FlaxAutoModelForPreTraining"),d(rm,"class","relative group"),d(ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(doe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(coe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(moe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(foe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(goe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(hoe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(uoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(poe,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(_oe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(boe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(voe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(Foe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Toe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Moe,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(Eoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hA,"id","transformers.FlaxAutoModelForMaskedLM"),d(hA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hA,"href","#transformers.FlaxAutoModelForMaskedLM"),d(nm,"class","relative group"),d(Coe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(woe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Aoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Loe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(yoe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(xoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d($oe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(koe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(Soe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(Roe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(Poe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(Boe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(Ioe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(LA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(im,"class","relative group"),d(Noe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(joe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Doe,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(Goe,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(Ooe,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(Voe,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(Xoe,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(zoe,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(Woe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(Qoe,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(Hoe,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(Uoe,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DA,"id","transformers.FlaxAutoModelForSequenceClassification"),d(DA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DA,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(mm,"class","relative group"),d(Joe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Koe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(ere,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(ore,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(rre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(tre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(are,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(nre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(sre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(lre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(ire,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZA,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(ZA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(hm,"class","relative group"),d(dre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(gre,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(hre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(ure,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(pre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(_re,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(bre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(vre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Fre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Tre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f6,"id","transformers.FlaxAutoModelForTokenClassification"),d(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f6,"href","#transformers.FlaxAutoModelForTokenClassification"),d(_m,"class","relative group"),d(Mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ere,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Are,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Lre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(yre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(xre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d($re,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(kre,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Sre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E6,"id","transformers.FlaxAutoModelForMultipleChoice"),d(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E6,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Fm,"class","relative group"),d(Rre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Bre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ire,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Nre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(qre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(jre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Dre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Gre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Ore,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Vre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P6,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(P6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P6,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Em,"class","relative group"),d(Xre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Wre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(q6,"id","transformers.FlaxAutoModelForImageClassification"),d(q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q6,"href","#transformers.FlaxAutoModelForImageClassification"),d(Am,"class","relative group"),d(Hre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ure,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yre,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Kre,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V6,"id","transformers.FlaxAutoModelForVision2Seq"),d(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V6,"href","#transformers.FlaxAutoModelForVision2Seq"),d(xm,"class","relative group"),d(Zre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ete,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ote,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rte,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(c,p,null),e(u,h),e(u,wo),e(wo,xi),b(m,Bm,_),b(m,lt,_),e(lt,$i),e(lt,ki),e(ki,my),e(lt,Im),b(m,Oe,_),b(m,Qe,_),e(Qe,Si),e(Qe,Pn),e(Pn,fy),e(Qe,Bn),e(Qe,In),e(In,gy),e(Qe,Ri),e(Qe,Nn),e(Nn,hy),e(Qe,Pi),b(m,Nm,_),M(Sa,m,_),b(m,He,_),b(m,Ae,_),e(Ae,HS),e(Ae,Bi),e(Bi,US),e(Ae,JS),b(m,Ao,_),b(m,Ra,_),e(Ra,YS),e(Ra,qm),e(qm,KS),e(Ra,aUe),b(m,VXe,_),b(m,Ii,_),e(Ii,jm),e(jm,Yae),M(uy,Yae,null),e(Ii,nUe),e(Ii,Kae),e(Kae,sUe),b(m,XXe,_),b(m,qn,_),e(qn,lUe),e(qn,Zae),e(Zae,iUe),e(qn,dUe),e(qn,ene),e(ene,cUe),e(qn,mUe),b(m,zXe,_),M(py,m,_),b(m,WXe,_),b(m,ZS,_),e(ZS,fUe),b(m,QXe,_),M(Dm,m,_),b(m,HXe,_),b(m,Ni,_),e(Ni,Gm),e(Gm,one),M(_y,one,null),e(Ni,gUe),e(Ni,rne),e(rne,hUe),b(m,UXe,_),b(m,Lo,_),M(by,Lo,null),e(Lo,uUe),e(Lo,vy),e(vy,pUe),e(vy,eR),e(eR,_Ue),e(vy,bUe),e(Lo,vUe),e(Lo,Fy),e(Fy,FUe),e(Fy,tne),e(tne,TUe),e(Fy,MUe),e(Lo,EUe),e(Lo,yr),M(Ty,yr,null),e(yr,CUe),e(yr,ane),e(ane,wUe),e(yr,AUe),e(yr,qi),e(qi,LUe),e(qi,nne),e(nne,yUe),e(qi,xUe),e(qi,sne),e(sne,$Ue),e(qi,kUe),e(yr,SUe),e(yr,A),e(A,Om),e(Om,lne),e(lne,RUe),e(Om,PUe),e(Om,oR),e(oR,BUe),e(Om,IUe),e(A,NUe),e(A,Vm),e(Vm,ine),e(ine,qUe),e(Vm,jUe),e(Vm,rR),e(rR,DUe),e(Vm,GUe),e(A,OUe),e(A,Xm),e(Xm,dne),e(dne,VUe),e(Xm,XUe),e(Xm,tR),e(tR,zUe),e(Xm,WUe),e(A,QUe),e(A,zm),e(zm,cne),e(cne,HUe),e(zm,UUe),e(zm,aR),e(aR,JUe),e(zm,YUe),e(A,KUe),e(A,Wm),e(Wm,mne),e(mne,ZUe),e(Wm,eJe),e(Wm,nR),e(nR,oJe),e(Wm,rJe),e(A,tJe),e(A,Qm),e(Qm,fne),e(fne,aJe),e(Qm,nJe),e(Qm,sR),e(sR,sJe),e(Qm,lJe),e(A,iJe),e(A,Hm),e(Hm,gne),e(gne,dJe),e(Hm,cJe),e(Hm,lR),e(lR,mJe),e(Hm,fJe),e(A,gJe),e(A,Um),e(Um,hne),e(hne,hJe),e(Um,uJe),e(Um,iR),e(iR,pJe),e(Um,_Je),e(A,bJe),e(A,Jm),e(Jm,une),e(une,vJe),e(Jm,FJe),e(Jm,dR),e(dR,TJe),e(Jm,MJe),e(A,EJe),e(A,Ym),e(Ym,pne),e(pne,CJe),e(Ym,wJe),e(Ym,cR),e(cR,AJe),e(Ym,LJe),e(A,yJe),e(A,Km),e(Km,_ne),e(_ne,xJe),e(Km,$Je),e(Km,mR),e(mR,kJe),e(Km,SJe),e(A,RJe),e(A,Zm),e(Zm,bne),e(bne,PJe),e(Zm,BJe),e(Zm,fR),e(fR,IJe),e(Zm,NJe),e(A,qJe),e(A,ef),e(ef,vne),e(vne,jJe),e(ef,DJe),e(ef,gR),e(gR,GJe),e(ef,OJe),e(A,VJe),e(A,of),e(of,Fne),e(Fne,XJe),e(of,zJe),e(of,hR),e(hR,WJe),e(of,QJe),e(A,HJe),e(A,rf),e(rf,Tne),e(Tne,UJe),e(rf,JJe),e(rf,uR),e(uR,YJe),e(rf,KJe),e(A,ZJe),e(A,tf),e(tf,Mne),e(Mne,eYe),e(tf,oYe),e(tf,pR),e(pR,rYe),e(tf,tYe),e(A,aYe),e(A,af),e(af,Ene),e(Ene,nYe),e(af,sYe),e(af,_R),e(_R,lYe),e(af,iYe),e(A,dYe),e(A,nf),e(nf,Cne),e(Cne,cYe),e(nf,mYe),e(nf,bR),e(bR,fYe),e(nf,gYe),e(A,hYe),e(A,sf),e(sf,wne),e(wne,uYe),e(sf,pYe),e(sf,vR),e(vR,_Ye),e(sf,bYe),e(A,vYe),e(A,lf),e(lf,Ane),e(Ane,FYe),e(lf,TYe),e(lf,FR),e(FR,MYe),e(lf,EYe),e(A,CYe),e(A,df),e(df,Lne),e(Lne,wYe),e(df,AYe),e(df,TR),e(TR,LYe),e(df,yYe),e(A,xYe),e(A,cf),e(cf,yne),e(yne,$Ye),e(cf,kYe),e(cf,MR),e(MR,SYe),e(cf,RYe),e(A,PYe),e(A,mf),e(mf,xne),e(xne,BYe),e(mf,IYe),e(mf,ER),e(ER,NYe),e(mf,qYe),e(A,jYe),e(A,ff),e(ff,$ne),e($ne,DYe),e(ff,GYe),e(ff,CR),e(CR,OYe),e(ff,VYe),e(A,XYe),e(A,gf),e(gf,kne),e(kne,zYe),e(gf,WYe),e(gf,wR),e(wR,QYe),e(gf,HYe),e(A,UYe),e(A,hf),e(hf,Sne),e(Sne,JYe),e(hf,YYe),e(hf,AR),e(AR,KYe),e(hf,ZYe),e(A,eKe),e(A,uf),e(uf,Rne),e(Rne,oKe),e(uf,rKe),e(uf,LR),e(LR,tKe),e(uf,aKe),e(A,nKe),e(A,pf),e(pf,Pne),e(Pne,sKe),e(pf,lKe),e(pf,yR),e(yR,iKe),e(pf,dKe),e(A,cKe),e(A,_f),e(_f,Bne),e(Bne,mKe),e(_f,fKe),e(_f,xR),e(xR,gKe),e(_f,hKe),e(A,uKe),e(A,bf),e(bf,Ine),e(Ine,pKe),e(bf,_Ke),e(bf,$R),e($R,bKe),e(bf,vKe),e(A,FKe),e(A,vf),e(vf,Nne),e(Nne,TKe),e(vf,MKe),e(vf,kR),e(kR,EKe),e(vf,CKe),e(A,wKe),e(A,Ff),e(Ff,qne),e(qne,AKe),e(Ff,LKe),e(Ff,SR),e(SR,yKe),e(Ff,xKe),e(A,$Ke),e(A,Tf),e(Tf,jne),e(jne,kKe),e(Tf,SKe),e(Tf,RR),e(RR,RKe),e(Tf,PKe),e(A,BKe),e(A,Mf),e(Mf,Dne),e(Dne,IKe),e(Mf,NKe),e(Mf,PR),e(PR,qKe),e(Mf,jKe),e(A,DKe),e(A,Ef),e(Ef,Gne),e(Gne,GKe),e(Ef,OKe),e(Ef,BR),e(BR,VKe),e(Ef,XKe),e(A,zKe),e(A,Cf),e(Cf,One),e(One,WKe),e(Cf,QKe),e(Cf,IR),e(IR,HKe),e(Cf,UKe),e(A,JKe),e(A,wf),e(wf,Vne),e(Vne,YKe),e(wf,KKe),e(wf,NR),e(NR,ZKe),e(wf,eZe),e(A,oZe),e(A,Af),e(Af,Xne),e(Xne,rZe),e(Af,tZe),e(Af,qR),e(qR,aZe),e(Af,nZe),e(A,sZe),e(A,Lf),e(Lf,zne),e(zne,lZe),e(Lf,iZe),e(Lf,jR),e(jR,dZe),e(Lf,cZe),e(A,mZe),e(A,yf),e(yf,Wne),e(Wne,fZe),e(yf,gZe),e(yf,DR),e(DR,hZe),e(yf,uZe),e(A,pZe),e(A,xf),e(xf,Qne),e(Qne,_Ze),e(xf,bZe),e(xf,GR),e(GR,vZe),e(xf,FZe),e(A,TZe),e(A,$f),e($f,Hne),e(Hne,MZe),e($f,EZe),e($f,OR),e(OR,CZe),e($f,wZe),e(A,AZe),e(A,kf),e(kf,Une),e(Une,LZe),e(kf,yZe),e(kf,VR),e(VR,xZe),e(kf,$Ze),e(A,kZe),e(A,Sf),e(Sf,Jne),e(Jne,SZe),e(Sf,RZe),e(Sf,XR),e(XR,PZe),e(Sf,BZe),e(A,IZe),e(A,Rf),e(Rf,Yne),e(Yne,NZe),e(Rf,qZe),e(Rf,zR),e(zR,jZe),e(Rf,DZe),e(A,GZe),e(A,Pf),e(Pf,Kne),e(Kne,OZe),e(Pf,VZe),e(Pf,WR),e(WR,XZe),e(Pf,zZe),e(A,WZe),e(A,Bf),e(Bf,Zne),e(Zne,QZe),e(Bf,HZe),e(Bf,QR),e(QR,UZe),e(Bf,JZe),e(A,YZe),e(A,If),e(If,ese),e(ese,KZe),e(If,ZZe),e(If,HR),e(HR,eeo),e(If,oeo),e(A,reo),e(A,Nf),e(Nf,ose),e(ose,teo),e(Nf,aeo),e(Nf,UR),e(UR,neo),e(Nf,seo),e(A,leo),e(A,qf),e(qf,rse),e(rse,ieo),e(qf,deo),e(qf,JR),e(JR,ceo),e(qf,meo),e(A,feo),e(A,jf),e(jf,tse),e(tse,geo),e(jf,heo),e(jf,YR),e(YR,ueo),e(jf,peo),e(A,_eo),e(A,Df),e(Df,ase),e(ase,beo),e(Df,veo),e(Df,KR),e(KR,Feo),e(Df,Teo),e(A,Meo),e(A,Gf),e(Gf,nse),e(nse,Eeo),e(Gf,Ceo),e(Gf,ZR),e(ZR,weo),e(Gf,Aeo),e(A,Leo),e(A,Of),e(Of,sse),e(sse,yeo),e(Of,xeo),e(Of,eP),e(eP,$eo),e(Of,keo),e(A,Seo),e(A,Vf),e(Vf,lse),e(lse,Reo),e(Vf,Peo),e(Vf,oP),e(oP,Beo),e(Vf,Ieo),e(A,Neo),e(A,Xf),e(Xf,ise),e(ise,qeo),e(Xf,jeo),e(Xf,rP),e(rP,Deo),e(Xf,Geo),e(A,Oeo),e(A,zf),e(zf,dse),e(dse,Veo),e(zf,Xeo),e(zf,tP),e(tP,zeo),e(zf,Weo),e(A,Qeo),e(A,Wf),e(Wf,cse),e(cse,Heo),e(Wf,Ueo),e(Wf,aP),e(aP,Jeo),e(Wf,Yeo),e(A,Keo),e(A,Qf),e(Qf,mse),e(mse,Zeo),e(Qf,eoo),e(Qf,nP),e(nP,ooo),e(Qf,roo),e(A,too),e(A,Hf),e(Hf,fse),e(fse,aoo),e(Hf,noo),e(Hf,sP),e(sP,soo),e(Hf,loo),e(A,ioo),e(A,Uf),e(Uf,gse),e(gse,doo),e(Uf,coo),e(Uf,lP),e(lP,moo),e(Uf,foo),e(A,goo),e(A,Jf),e(Jf,hse),e(hse,hoo),e(Jf,uoo),e(Jf,iP),e(iP,poo),e(Jf,_oo),e(A,boo),e(A,Yf),e(Yf,use),e(use,voo),e(Yf,Foo),e(Yf,dP),e(dP,Too),e(Yf,Moo),e(A,Eoo),e(A,Kf),e(Kf,pse),e(pse,Coo),e(Kf,woo),e(Kf,cP),e(cP,Aoo),e(Kf,Loo),e(A,yoo),e(A,Zf),e(Zf,_se),e(_se,xoo),e(Zf,$oo),e(Zf,mP),e(mP,koo),e(Zf,Soo),e(A,Roo),e(A,eg),e(eg,bse),e(bse,Poo),e(eg,Boo),e(eg,fP),e(fP,Ioo),e(eg,Noo),e(A,qoo),e(A,og),e(og,vse),e(vse,joo),e(og,Doo),e(og,gP),e(gP,Goo),e(og,Ooo),e(A,Voo),e(A,rg),e(rg,Fse),e(Fse,Xoo),e(rg,zoo),e(rg,hP),e(hP,Woo),e(rg,Qoo),e(A,Hoo),e(A,tg),e(tg,Tse),e(Tse,Uoo),e(tg,Joo),e(tg,uP),e(uP,Yoo),e(tg,Koo),e(A,Zoo),e(A,ag),e(ag,Mse),e(Mse,ero),e(ag,oro),e(ag,pP),e(pP,rro),e(ag,tro),e(A,aro),e(A,ng),e(ng,Ese),e(Ese,nro),e(ng,sro),e(ng,_P),e(_P,lro),e(ng,iro),e(A,dro),e(A,sg),e(sg,Cse),e(Cse,cro),e(sg,mro),e(sg,bP),e(bP,fro),e(sg,gro),e(A,hro),e(A,lg),e(lg,wse),e(wse,uro),e(lg,pro),e(lg,vP),e(vP,_ro),e(lg,bro),e(A,vro),e(A,ig),e(ig,Ase),e(Ase,Fro),e(ig,Tro),e(ig,FP),e(FP,Mro),e(ig,Ero),e(A,Cro),e(A,dg),e(dg,Lse),e(Lse,wro),e(dg,Aro),e(dg,TP),e(TP,Lro),e(dg,yro),e(A,xro),e(A,cg),e(cg,yse),e(yse,$ro),e(cg,kro),e(cg,MP),e(MP,Sro),e(cg,Rro),e(A,Pro),e(A,mg),e(mg,xse),e(xse,Bro),e(mg,Iro),e(mg,EP),e(EP,Nro),e(mg,qro),e(A,jro),e(A,fg),e(fg,$se),e($se,Dro),e(fg,Gro),e(fg,CP),e(CP,Oro),e(fg,Vro),e(A,Xro),e(A,gg),e(gg,kse),e(kse,zro),e(gg,Wro),e(gg,wP),e(wP,Qro),e(gg,Hro),e(A,Uro),e(A,hg),e(hg,Sse),e(Sse,Jro),e(hg,Yro),e(hg,AP),e(AP,Kro),e(hg,Zro),e(A,eto),e(A,ug),e(ug,Rse),e(Rse,oto),e(ug,rto),e(ug,LP),e(LP,tto),e(ug,ato),e(A,nto),e(A,pg),e(pg,Pse),e(Pse,sto),e(pg,lto),e(pg,yP),e(yP,ito),e(pg,dto),e(A,cto),e(A,_g),e(_g,Bse),e(Bse,mto),e(_g,fto),e(_g,xP),e(xP,gto),e(_g,hto),e(A,uto),e(A,bg),e(bg,Ise),e(Ise,pto),e(bg,_to),e(bg,$P),e($P,bto),e(bg,vto),e(A,Fto),e(A,vg),e(vg,Nse),e(Nse,Tto),e(vg,Mto),e(vg,kP),e(kP,Eto),e(vg,Cto),e(A,wto),e(A,Fg),e(Fg,qse),e(qse,Ato),e(Fg,Lto),e(Fg,SP),e(SP,yto),e(Fg,xto),e(A,$to),e(A,Tg),e(Tg,jse),e(jse,kto),e(Tg,Sto),e(Tg,RP),e(RP,Rto),e(Tg,Pto),e(A,Bto),e(A,Mg),e(Mg,Dse),e(Dse,Ito),e(Mg,Nto),e(Mg,PP),e(PP,qto),e(Mg,jto),e(A,Dto),e(A,Eg),e(Eg,Gse),e(Gse,Gto),e(Eg,Oto),e(Eg,BP),e(BP,Vto),e(Eg,Xto),e(A,zto),e(A,Cg),e(Cg,Ose),e(Ose,Wto),e(Cg,Qto),e(Cg,IP),e(IP,Hto),e(Cg,Uto),e(A,Jto),e(A,wg),e(wg,Vse),e(Vse,Yto),e(wg,Kto),e(wg,NP),e(NP,Zto),e(wg,eao),e(A,oao),e(A,Ag),e(Ag,Xse),e(Xse,rao),e(Ag,tao),e(Ag,qP),e(qP,aao),e(Ag,nao),e(A,sao),e(A,Lg),e(Lg,zse),e(zse,lao),e(Lg,iao),e(Lg,jP),e(jP,dao),e(Lg,cao),e(A,mao),e(A,yg),e(yg,Wse),e(Wse,fao),e(yg,gao),e(yg,DP),e(DP,hao),e(yg,uao),e(A,pao),e(A,xg),e(xg,Qse),e(Qse,_ao),e(xg,bao),e(xg,GP),e(GP,vao),e(xg,Fao),e(A,Tao),e(A,$g),e($g,Hse),e(Hse,Mao),e($g,Eao),e($g,OP),e(OP,Cao),e($g,wao),e(A,Aao),e(A,kg),e(kg,Use),e(Use,Lao),e(kg,yao),e(kg,VP),e(VP,xao),e(kg,$ao),e(A,kao),e(A,Sg),e(Sg,Jse),e(Jse,Sao),e(Sg,Rao),e(Sg,XP),e(XP,Pao),e(Sg,Bao),e(A,Iao),e(A,Rg),e(Rg,Yse),e(Yse,Nao),e(Rg,qao),e(Rg,zP),e(zP,jao),e(Rg,Dao),e(A,Gao),e(A,Pg),e(Pg,Kse),e(Kse,Oao),e(Pg,Vao),e(Pg,WP),e(WP,Xao),e(Pg,zao),e(A,Wao),e(A,Bg),e(Bg,Zse),e(Zse,Qao),e(Bg,Hao),e(Bg,QP),e(QP,Uao),e(Bg,Jao),e(A,Yao),e(A,Ig),e(Ig,ele),e(ele,Kao),e(Ig,Zao),e(Ig,HP),e(HP,eno),e(Ig,ono),e(A,rno),e(A,Ng),e(Ng,ole),e(ole,tno),e(Ng,ano),e(Ng,UP),e(UP,nno),e(Ng,sno),e(A,lno),e(A,qg),e(qg,rle),e(rle,ino),e(qg,dno),e(qg,JP),e(JP,cno),e(qg,mno),e(A,fno),e(A,jg),e(jg,tle),e(tle,gno),e(jg,hno),e(jg,YP),e(YP,uno),e(jg,pno),e(A,_no),e(A,Dg),e(Dg,ale),e(ale,bno),e(Dg,vno),e(Dg,KP),e(KP,Fno),e(Dg,Tno),e(A,Mno),e(A,Gg),e(Gg,nle),e(nle,Eno),e(Gg,Cno),e(Gg,ZP),e(ZP,wno),e(Gg,Ano),e(A,Lno),e(A,Og),e(Og,sle),e(sle,yno),e(Og,xno),e(Og,eB),e(eB,$no),e(Og,kno),e(A,Sno),e(A,Vg),e(Vg,lle),e(lle,Rno),e(Vg,Pno),e(Vg,oB),e(oB,Bno),e(Vg,Ino),e(A,Nno),e(A,Xg),e(Xg,ile),e(ile,qno),e(Xg,jno),e(Xg,rB),e(rB,Dno),e(Xg,Gno),e(A,Ono),e(A,zg),e(zg,dle),e(dle,Vno),e(zg,Xno),e(zg,tB),e(tB,zno),e(zg,Wno),e(A,Qno),e(A,Wg),e(Wg,cle),e(cle,Hno),e(Wg,Uno),e(Wg,aB),e(aB,Jno),e(Wg,Yno),e(A,Kno),e(A,Qg),e(Qg,mle),e(mle,Zno),e(Qg,eso),e(Qg,nB),e(nB,oso),e(Qg,rso),e(A,tso),e(A,Hg),e(Hg,fle),e(fle,aso),e(Hg,nso),e(Hg,sB),e(sB,sso),e(Hg,lso),e(A,iso),e(A,Ug),e(Ug,gle),e(gle,dso),e(Ug,cso),e(Ug,lB),e(lB,mso),e(Ug,fso),e(A,gso),e(A,Jg),e(Jg,hle),e(hle,hso),e(Jg,uso),e(Jg,iB),e(iB,pso),e(Jg,_so),e(A,bso),e(A,Yg),e(Yg,ule),e(ule,vso),e(Yg,Fso),e(Yg,dB),e(dB,Tso),e(Yg,Mso),e(A,Eso),e(A,Kg),e(Kg,ple),e(ple,Cso),e(Kg,wso),e(Kg,cB),e(cB,Aso),e(Kg,Lso),e(A,yso),e(A,Zg),e(Zg,_le),e(_le,xso),e(Zg,$so),e(Zg,mB),e(mB,kso),e(Zg,Sso),e(yr,Rso),M(eh,yr,null),e(Lo,Pso),e(Lo,oh),M(My,oh,null),e(oh,Bso),e(oh,ble),e(ble,Iso),b(m,JXe,_),b(m,ji,_),e(ji,rh),e(rh,vle),M(Ey,vle,null),e(ji,Nso),e(ji,Fle),e(Fle,qso),b(m,YXe,_),b(m,yo,_),M(Cy,yo,null),e(yo,jso),e(yo,wy),e(wy,Dso),e(wy,fB),e(fB,Gso),e(wy,Oso),e(yo,Vso),e(yo,Ay),e(Ay,Xso),e(Ay,Tle),e(Tle,zso),e(Ay,Wso),e(yo,Qso),e(yo,xr),M(Ly,xr,null),e(xr,Hso),e(xr,Mle),e(Mle,Uso),e(xr,Jso),e(xr,Pa),e(Pa,Yso),e(Pa,Ele),e(Ele,Kso),e(Pa,Zso),e(Pa,Cle),e(Cle,elo),e(Pa,olo),e(Pa,wle),e(wle,rlo),e(Pa,tlo),e(xr,alo),e(xr,k),e(k,jn),e(jn,Ale),e(Ale,nlo),e(jn,slo),e(jn,gB),e(gB,llo),e(jn,ilo),e(jn,hB),e(hB,dlo),e(jn,clo),e(k,mlo),e(k,Dn),e(Dn,Lle),e(Lle,flo),e(Dn,glo),e(Dn,uB),e(uB,hlo),e(Dn,ulo),e(Dn,pB),e(pB,plo),e(Dn,_lo),e(k,blo),e(k,Gn),e(Gn,yle),e(yle,vlo),e(Gn,Flo),e(Gn,_B),e(_B,Tlo),e(Gn,Mlo),e(Gn,bB),e(bB,Elo),e(Gn,Clo),e(k,wlo),e(k,th),e(th,xle),e(xle,Alo),e(th,Llo),e(th,vB),e(vB,ylo),e(th,xlo),e(k,$lo),e(k,On),e(On,$le),e($le,klo),e(On,Slo),e(On,FB),e(FB,Rlo),e(On,Plo),e(On,TB),e(TB,Blo),e(On,Ilo),e(k,Nlo),e(k,ah),e(ah,kle),e(kle,qlo),e(ah,jlo),e(ah,MB),e(MB,Dlo),e(ah,Glo),e(k,Olo),e(k,nh),e(nh,Sle),e(Sle,Vlo),e(nh,Xlo),e(nh,EB),e(EB,zlo),e(nh,Wlo),e(k,Qlo),e(k,sh),e(sh,Rle),e(Rle,Hlo),e(sh,Ulo),e(sh,CB),e(CB,Jlo),e(sh,Ylo),e(k,Klo),e(k,Vn),e(Vn,Ple),e(Ple,Zlo),e(Vn,eio),e(Vn,wB),e(wB,oio),e(Vn,rio),e(Vn,AB),e(AB,tio),e(Vn,aio),e(k,nio),e(k,Xn),e(Xn,Ble),e(Ble,sio),e(Xn,lio),e(Xn,LB),e(LB,iio),e(Xn,dio),e(Xn,yB),e(yB,cio),e(Xn,mio),e(k,fio),e(k,zn),e(zn,Ile),e(Ile,gio),e(zn,hio),e(zn,xB),e(xB,uio),e(zn,pio),e(zn,$B),e($B,_io),e(zn,bio),e(k,vio),e(k,lh),e(lh,Nle),e(Nle,Fio),e(lh,Tio),e(lh,kB),e(kB,Mio),e(lh,Eio),e(k,Cio),e(k,ih),e(ih,qle),e(qle,wio),e(ih,Aio),e(ih,SB),e(SB,Lio),e(ih,yio),e(k,xio),e(k,dh),e(dh,jle),e(jle,$io),e(dh,kio),e(dh,RB),e(RB,Sio),e(dh,Rio),e(k,Pio),e(k,Wn),e(Wn,Dle),e(Dle,Bio),e(Wn,Iio),e(Wn,PB),e(PB,Nio),e(Wn,qio),e(Wn,BB),e(BB,jio),e(Wn,Dio),e(k,Gio),e(k,ch),e(ch,Gle),e(Gle,Oio),e(ch,Vio),e(ch,IB),e(IB,Xio),e(ch,zio),e(k,Wio),e(k,Qn),e(Qn,Ole),e(Ole,Qio),e(Qn,Hio),e(Qn,NB),e(NB,Uio),e(Qn,Jio),e(Qn,qB),e(qB,Yio),e(Qn,Kio),e(k,Zio),e(k,Hn),e(Hn,Vle),e(Vle,edo),e(Hn,odo),e(Hn,jB),e(jB,rdo),e(Hn,tdo),e(Hn,DB),e(DB,ado),e(Hn,ndo),e(k,sdo),e(k,Un),e(Un,Xle),e(Xle,ldo),e(Un,ido),e(Un,GB),e(GB,ddo),e(Un,cdo),e(Un,OB),e(OB,mdo),e(Un,fdo),e(k,gdo),e(k,Jn),e(Jn,zle),e(zle,hdo),e(Jn,udo),e(Jn,VB),e(VB,pdo),e(Jn,_do),e(Jn,XB),e(XB,bdo),e(Jn,vdo),e(k,Fdo),e(k,mh),e(mh,Wle),e(Wle,Tdo),e(mh,Mdo),e(mh,zB),e(zB,Edo),e(mh,Cdo),e(k,wdo),e(k,Yn),e(Yn,Qle),e(Qle,Ado),e(Yn,Ldo),e(Yn,WB),e(WB,ydo),e(Yn,xdo),e(Yn,QB),e(QB,$do),e(Yn,kdo),e(k,Sdo),e(k,Kn),e(Kn,Hle),e(Hle,Rdo),e(Kn,Pdo),e(Kn,HB),e(HB,Bdo),e(Kn,Ido),e(Kn,UB),e(UB,Ndo),e(Kn,qdo),e(k,jdo),e(k,Zn),e(Zn,Ule),e(Ule,Ddo),e(Zn,Gdo),e(Zn,JB),e(JB,Odo),e(Zn,Vdo),e(Zn,YB),e(YB,Xdo),e(Zn,zdo),e(k,Wdo),e(k,es),e(es,Jle),e(Jle,Qdo),e(es,Hdo),e(es,KB),e(KB,Udo),e(es,Jdo),e(es,ZB),e(ZB,Ydo),e(es,Kdo),e(k,Zdo),e(k,os),e(os,Yle),e(Yle,eco),e(os,oco),e(os,eI),e(eI,rco),e(os,tco),e(os,oI),e(oI,aco),e(os,nco),e(k,sco),e(k,rs),e(rs,Kle),e(Kle,lco),e(rs,ico),e(rs,rI),e(rI,dco),e(rs,cco),e(rs,tI),e(tI,mco),e(rs,fco),e(k,gco),e(k,fh),e(fh,Zle),e(Zle,hco),e(fh,uco),e(fh,aI),e(aI,pco),e(fh,_co),e(k,bco),e(k,ts),e(ts,eie),e(eie,vco),e(ts,Fco),e(ts,nI),e(nI,Tco),e(ts,Mco),e(ts,sI),e(sI,Eco),e(ts,Cco),e(k,wco),e(k,gh),e(gh,oie),e(oie,Aco),e(gh,Lco),e(gh,lI),e(lI,yco),e(gh,xco),e(k,$co),e(k,as),e(as,rie),e(rie,kco),e(as,Sco),e(as,iI),e(iI,Rco),e(as,Pco),e(as,dI),e(dI,Bco),e(as,Ico),e(k,Nco),e(k,ns),e(ns,tie),e(tie,qco),e(ns,jco),e(ns,cI),e(cI,Dco),e(ns,Gco),e(ns,mI),e(mI,Oco),e(ns,Vco),e(k,Xco),e(k,ss),e(ss,aie),e(aie,zco),e(ss,Wco),e(ss,fI),e(fI,Qco),e(ss,Hco),e(ss,gI),e(gI,Uco),e(ss,Jco),e(k,Yco),e(k,hh),e(hh,nie),e(nie,Kco),e(hh,Zco),e(hh,hI),e(hI,emo),e(hh,omo),e(k,rmo),e(k,ls),e(ls,sie),e(sie,tmo),e(ls,amo),e(ls,uI),e(uI,nmo),e(ls,smo),e(ls,pI),e(pI,lmo),e(ls,imo),e(k,dmo),e(k,is),e(is,lie),e(lie,cmo),e(is,mmo),e(is,_I),e(_I,fmo),e(is,gmo),e(is,bI),e(bI,hmo),e(is,umo),e(k,pmo),e(k,ds),e(ds,iie),e(iie,_mo),e(ds,bmo),e(ds,vI),e(vI,vmo),e(ds,Fmo),e(ds,FI),e(FI,Tmo),e(ds,Mmo),e(k,Emo),e(k,uh),e(uh,die),e(die,Cmo),e(uh,wmo),e(uh,TI),e(TI,Amo),e(uh,Lmo),e(k,ymo),e(k,cs),e(cs,cie),e(cie,xmo),e(cs,$mo),e(cs,MI),e(MI,kmo),e(cs,Smo),e(cs,EI),e(EI,Rmo),e(cs,Pmo),e(k,Bmo),e(k,ms),e(ms,mie),e(mie,Imo),e(ms,Nmo),e(ms,CI),e(CI,qmo),e(ms,jmo),e(ms,wI),e(wI,Dmo),e(ms,Gmo),e(k,Omo),e(k,fs),e(fs,fie),e(fie,Vmo),e(fs,Xmo),e(fs,AI),e(AI,zmo),e(fs,Wmo),e(fs,LI),e(LI,Qmo),e(fs,Hmo),e(k,Umo),e(k,gs),e(gs,gie),e(gie,Jmo),e(gs,Ymo),e(gs,yI),e(yI,Kmo),e(gs,Zmo),e(gs,xI),e(xI,efo),e(gs,ofo),e(k,rfo),e(k,hs),e(hs,hie),e(hie,tfo),e(hs,afo),e(hs,$I),e($I,nfo),e(hs,sfo),e(hs,kI),e(kI,lfo),e(hs,ifo),e(k,dfo),e(k,us),e(us,uie),e(uie,cfo),e(us,mfo),e(us,SI),e(SI,ffo),e(us,gfo),e(us,RI),e(RI,hfo),e(us,ufo),e(k,pfo),e(k,ps),e(ps,pie),e(pie,_fo),e(ps,bfo),e(ps,PI),e(PI,vfo),e(ps,Ffo),e(ps,BI),e(BI,Tfo),e(ps,Mfo),e(k,Efo),e(k,_s),e(_s,_ie),e(_ie,Cfo),e(_s,wfo),e(_s,II),e(II,Afo),e(_s,Lfo),e(_s,NI),e(NI,yfo),e(_s,xfo),e(k,$fo),e(k,ph),e(ph,bie),e(bie,kfo),e(ph,Sfo),e(ph,qI),e(qI,Rfo),e(ph,Pfo),e(k,Bfo),e(k,bs),e(bs,vie),e(vie,Ifo),e(bs,Nfo),e(bs,jI),e(jI,qfo),e(bs,jfo),e(bs,DI),e(DI,Dfo),e(bs,Gfo),e(k,Ofo),e(k,_h),e(_h,Fie),e(Fie,Vfo),e(_h,Xfo),e(_h,GI),e(GI,zfo),e(_h,Wfo),e(k,Qfo),e(k,bh),e(bh,Tie),e(Tie,Hfo),e(bh,Ufo),e(bh,OI),e(OI,Jfo),e(bh,Yfo),e(k,Kfo),e(k,vs),e(vs,Mie),e(Mie,Zfo),e(vs,ego),e(vs,VI),e(VI,ogo),e(vs,rgo),e(vs,XI),e(XI,tgo),e(vs,ago),e(k,ngo),e(k,Fs),e(Fs,Eie),e(Eie,sgo),e(Fs,lgo),e(Fs,zI),e(zI,igo),e(Fs,dgo),e(Fs,WI),e(WI,cgo),e(Fs,mgo),e(k,fgo),e(k,Ts),e(Ts,Cie),e(Cie,ggo),e(Ts,hgo),e(Ts,QI),e(QI,ugo),e(Ts,pgo),e(Ts,HI),e(HI,_go),e(Ts,bgo),e(k,vgo),e(k,vh),e(vh,wie),e(wie,Fgo),e(vh,Tgo),e(vh,UI),e(UI,Mgo),e(vh,Ego),e(k,Cgo),e(k,Ms),e(Ms,Aie),e(Aie,wgo),e(Ms,Ago),e(Ms,JI),e(JI,Lgo),e(Ms,ygo),e(Ms,YI),e(YI,xgo),e(Ms,$go),e(k,kgo),e(k,Es),e(Es,Lie),e(Lie,Sgo),e(Es,Rgo),e(Es,KI),e(KI,Pgo),e(Es,Bgo),e(Es,ZI),e(ZI,Igo),e(Es,Ngo),e(k,qgo),e(k,Cs),e(Cs,yie),e(yie,jgo),e(Cs,Dgo),e(Cs,eN),e(eN,Ggo),e(Cs,Ogo),e(Cs,oN),e(oN,Vgo),e(Cs,Xgo),e(k,zgo),e(k,ws),e(ws,xie),e(xie,Wgo),e(ws,Qgo),e(ws,rN),e(rN,Hgo),e(ws,Ugo),e(ws,tN),e(tN,Jgo),e(ws,Ygo),e(k,Kgo),e(k,As),e(As,$ie),e($ie,Zgo),e(As,eho),e(As,aN),e(aN,oho),e(As,rho),e(As,nN),e(nN,tho),e(As,aho),e(k,nho),e(k,Ls),e(Ls,kie),e(kie,sho),e(Ls,lho),e(Ls,sN),e(sN,iho),e(Ls,dho),e(Ls,lN),e(lN,cho),e(Ls,mho),e(k,fho),e(k,ys),e(ys,Sie),e(Sie,gho),e(ys,hho),e(ys,iN),e(iN,uho),e(ys,pho),e(ys,dN),e(dN,_ho),e(ys,bho),e(k,vho),e(k,xs),e(xs,Rie),e(Rie,Fho),e(xs,Tho),e(xs,cN),e(cN,Mho),e(xs,Eho),e(xs,mN),e(mN,Cho),e(xs,who),e(k,Aho),e(k,Fh),e(Fh,Pie),e(Pie,Lho),e(Fh,yho),e(Fh,fN),e(fN,xho),e(Fh,$ho),e(k,kho),e(k,$s),e($s,Bie),e(Bie,Sho),e($s,Rho),e($s,gN),e(gN,Pho),e($s,Bho),e($s,hN),e(hN,Iho),e($s,Nho),e(k,qho),e(k,ks),e(ks,Iie),e(Iie,jho),e(ks,Dho),e(ks,uN),e(uN,Gho),e(ks,Oho),e(ks,pN),e(pN,Vho),e(ks,Xho),e(k,zho),e(k,Th),e(Th,Nie),e(Nie,Who),e(Th,Qho),e(Th,_N),e(_N,Hho),e(Th,Uho),e(k,Jho),e(k,Mh),e(Mh,qie),e(qie,Yho),e(Mh,Kho),e(Mh,bN),e(bN,Zho),e(Mh,euo),e(k,ouo),e(k,Eh),e(Eh,jie),e(jie,ruo),e(Eh,tuo),e(Eh,vN),e(vN,auo),e(Eh,nuo),e(k,suo),e(k,Ch),e(Ch,Die),e(Die,luo),e(Ch,iuo),e(Ch,FN),e(FN,duo),e(Ch,cuo),e(k,muo),e(k,Ss),e(Ss,Gie),e(Gie,fuo),e(Ss,guo),e(Ss,TN),e(TN,huo),e(Ss,uuo),e(Ss,MN),e(MN,puo),e(Ss,_uo),e(k,buo),e(k,wh),e(wh,Oie),e(Oie,vuo),e(wh,Fuo),e(wh,EN),e(EN,Tuo),e(wh,Muo),e(k,Euo),e(k,Rs),e(Rs,Vie),e(Vie,Cuo),e(Rs,wuo),e(Rs,CN),e(CN,Auo),e(Rs,Luo),e(Rs,wN),e(wN,yuo),e(Rs,xuo),e(k,$uo),e(k,Ps),e(Ps,Xie),e(Xie,kuo),e(Ps,Suo),e(Ps,AN),e(AN,Ruo),e(Ps,Puo),e(Ps,LN),e(LN,Buo),e(Ps,Iuo),e(k,Nuo),e(k,Bs),e(Bs,zie),e(zie,quo),e(Bs,juo),e(Bs,yN),e(yN,Duo),e(Bs,Guo),e(Bs,xN),e(xN,Ouo),e(Bs,Vuo),e(k,Xuo),e(k,Is),e(Is,Wie),e(Wie,zuo),e(Is,Wuo),e(Is,$N),e($N,Quo),e(Is,Huo),e(Is,kN),e(kN,Uuo),e(Is,Juo),e(k,Yuo),e(k,Ns),e(Ns,Qie),e(Qie,Kuo),e(Ns,Zuo),e(Ns,SN),e(SN,epo),e(Ns,opo),e(Ns,RN),e(RN,rpo),e(Ns,tpo),e(k,apo),e(k,qs),e(qs,Hie),e(Hie,npo),e(qs,spo),e(qs,PN),e(PN,lpo),e(qs,ipo),e(qs,BN),e(BN,dpo),e(qs,cpo),e(k,mpo),e(k,Ah),e(Ah,Uie),e(Uie,fpo),e(Ah,gpo),e(Ah,IN),e(IN,hpo),e(Ah,upo),e(k,ppo),e(k,Lh),e(Lh,Jie),e(Jie,_po),e(Lh,bpo),e(Lh,NN),e(NN,vpo),e(Lh,Fpo),e(k,Tpo),e(k,js),e(js,Yie),e(Yie,Mpo),e(js,Epo),e(js,qN),e(qN,Cpo),e(js,wpo),e(js,jN),e(jN,Apo),e(js,Lpo),e(k,ypo),e(k,Ds),e(Ds,Kie),e(Kie,xpo),e(Ds,$po),e(Ds,DN),e(DN,kpo),e(Ds,Spo),e(Ds,GN),e(GN,Rpo),e(Ds,Ppo),e(k,Bpo),e(k,Gs),e(Gs,Zie),e(Zie,Ipo),e(Gs,Npo),e(Gs,ON),e(ON,qpo),e(Gs,jpo),e(Gs,VN),e(VN,Dpo),e(Gs,Gpo),e(k,Opo),e(k,yh),e(yh,ede),e(ede,Vpo),e(yh,Xpo),e(yh,XN),e(XN,zpo),e(yh,Wpo),e(k,Qpo),e(k,xh),e(xh,ode),e(ode,Hpo),e(xh,Upo),e(xh,zN),e(zN,Jpo),e(xh,Ypo),e(k,Kpo),e(k,$h),e($h,rde),e(rde,Zpo),e($h,e_o),e($h,WN),e(WN,o_o),e($h,r_o),e(k,t_o),e(k,Os),e(Os,tde),e(tde,a_o),e(Os,n_o),e(Os,QN),e(QN,s_o),e(Os,l_o),e(Os,HN),e(HN,i_o),e(Os,d_o),e(k,c_o),e(k,Vs),e(Vs,ade),e(ade,m_o),e(Vs,f_o),e(Vs,UN),e(UN,g_o),e(Vs,h_o),e(Vs,JN),e(JN,u_o),e(Vs,p_o),e(k,__o),e(k,kh),e(kh,nde),e(nde,b_o),e(kh,v_o),e(kh,YN),e(YN,F_o),e(kh,T_o),e(k,M_o),e(k,Sh),e(Sh,sde),e(sde,E_o),e(Sh,C_o),e(Sh,KN),e(KN,w_o),e(Sh,A_o),e(k,L_o),e(k,Rh),e(Rh,lde),e(lde,y_o),e(Rh,x_o),e(Rh,ZN),e(ZN,$_o),e(Rh,k_o),e(k,S_o),e(k,Xs),e(Xs,ide),e(ide,R_o),e(Xs,P_o),e(Xs,eq),e(eq,B_o),e(Xs,I_o),e(Xs,oq),e(oq,N_o),e(Xs,q_o),e(k,j_o),e(k,Ph),e(Ph,dde),e(dde,D_o),e(Ph,G_o),e(Ph,rq),e(rq,O_o),e(Ph,V_o),e(k,X_o),e(k,Bh),e(Bh,cde),e(cde,z_o),e(Bh,W_o),e(Bh,tq),e(tq,Q_o),e(Bh,H_o),e(k,U_o),e(k,zs),e(zs,mde),e(mde,J_o),e(zs,Y_o),e(zs,aq),e(aq,K_o),e(zs,Z_o),e(zs,nq),e(nq,e2o),e(zs,o2o),e(k,r2o),e(k,Ws),e(Ws,fde),e(fde,t2o),e(Ws,a2o),e(Ws,sq),e(sq,n2o),e(Ws,s2o),e(Ws,lq),e(lq,l2o),e(Ws,i2o),e(k,d2o),e(k,Qs),e(Qs,gde),e(gde,c2o),e(Qs,m2o),e(Qs,iq),e(iq,f2o),e(Qs,g2o),e(Qs,dq),e(dq,h2o),e(Qs,u2o),e(k,p2o),e(k,Hs),e(Hs,hde),e(hde,_2o),e(Hs,b2o),e(Hs,cq),e(cq,v2o),e(Hs,F2o),e(Hs,mq),e(mq,T2o),e(Hs,M2o),e(xr,E2o),M(Ih,xr,null),e(yo,C2o),e(yo,Nh),M(yy,Nh,null),e(Nh,w2o),e(Nh,ude),e(ude,A2o),b(m,KXe,_),b(m,Di,_),e(Di,qh),e(qh,pde),M(xy,pde,null),e(Di,L2o),e(Di,_de),e(_de,y2o),b(m,ZXe,_),b(m,xo,_),M($y,xo,null),e(xo,x2o),e(xo,ky),e(ky,$2o),e(ky,fq),e(fq,k2o),e(ky,S2o),e(xo,R2o),e(xo,Sy),e(Sy,P2o),e(Sy,bde),e(bde,B2o),e(Sy,I2o),e(xo,N2o),e(xo,Ue),M(Ry,Ue,null),e(Ue,q2o),e(Ue,vde),e(vde,j2o),e(Ue,D2o),e(Ue,Ba),e(Ba,G2o),e(Ba,Fde),e(Fde,O2o),e(Ba,V2o),e(Ba,Tde),e(Tde,X2o),e(Ba,z2o),e(Ba,Mde),e(Mde,W2o),e(Ba,Q2o),e(Ue,H2o),e(Ue,J),e(J,jh),e(jh,Ede),e(Ede,U2o),e(jh,J2o),e(jh,gq),e(gq,Y2o),e(jh,K2o),e(J,Z2o),e(J,Dh),e(Dh,Cde),e(Cde,ebo),e(Dh,obo),e(Dh,hq),e(hq,rbo),e(Dh,tbo),e(J,abo),e(J,Gh),e(Gh,wde),e(wde,nbo),e(Gh,sbo),e(Gh,uq),e(uq,lbo),e(Gh,ibo),e(J,dbo),e(J,Oh),e(Oh,Ade),e(Ade,cbo),e(Oh,mbo),e(Oh,pq),e(pq,fbo),e(Oh,gbo),e(J,hbo),e(J,Vh),e(Vh,Lde),e(Lde,ubo),e(Vh,pbo),e(Vh,_q),e(_q,_bo),e(Vh,bbo),e(J,vbo),e(J,Xh),e(Xh,yde),e(yde,Fbo),e(Xh,Tbo),e(Xh,bq),e(bq,Mbo),e(Xh,Ebo),e(J,Cbo),e(J,zh),e(zh,xde),e(xde,wbo),e(zh,Abo),e(zh,vq),e(vq,Lbo),e(zh,ybo),e(J,xbo),e(J,Wh),e(Wh,$de),e($de,$bo),e(Wh,kbo),e(Wh,Fq),e(Fq,Sbo),e(Wh,Rbo),e(J,Pbo),e(J,Qh),e(Qh,kde),e(kde,Bbo),e(Qh,Ibo),e(Qh,Tq),e(Tq,Nbo),e(Qh,qbo),e(J,jbo),e(J,Hh),e(Hh,Sde),e(Sde,Dbo),e(Hh,Gbo),e(Hh,Mq),e(Mq,Obo),e(Hh,Vbo),e(J,Xbo),e(J,Uh),e(Uh,Rde),e(Rde,zbo),e(Uh,Wbo),e(Uh,Eq),e(Eq,Qbo),e(Uh,Hbo),e(J,Ubo),e(J,Jh),e(Jh,Pde),e(Pde,Jbo),e(Jh,Ybo),e(Jh,Cq),e(Cq,Kbo),e(Jh,Zbo),e(J,evo),e(J,Yh),e(Yh,Bde),e(Bde,ovo),e(Yh,rvo),e(Yh,wq),e(wq,tvo),e(Yh,avo),e(J,nvo),e(J,Kh),e(Kh,Ide),e(Ide,svo),e(Kh,lvo),e(Kh,Aq),e(Aq,ivo),e(Kh,dvo),e(J,cvo),e(J,Zh),e(Zh,Nde),e(Nde,mvo),e(Zh,fvo),e(Zh,Lq),e(Lq,gvo),e(Zh,hvo),e(J,uvo),e(J,eu),e(eu,qde),e(qde,pvo),e(eu,_vo),e(eu,yq),e(yq,bvo),e(eu,vvo),e(J,Fvo),e(J,ou),e(ou,jde),e(jde,Tvo),e(ou,Mvo),e(ou,xq),e(xq,Evo),e(ou,Cvo),e(J,wvo),e(J,ru),e(ru,Dde),e(Dde,Avo),e(ru,Lvo),e(ru,$q),e($q,yvo),e(ru,xvo),e(J,$vo),e(J,tu),e(tu,Gde),e(Gde,kvo),e(tu,Svo),e(tu,kq),e(kq,Rvo),e(tu,Pvo),e(J,Bvo),e(J,au),e(au,Ode),e(Ode,Ivo),e(au,Nvo),e(au,Sq),e(Sq,qvo),e(au,jvo),e(J,Dvo),e(J,nu),e(nu,Vde),e(Vde,Gvo),e(nu,Ovo),e(nu,Rq),e(Rq,Vvo),e(nu,Xvo),e(J,zvo),e(J,su),e(su,Xde),e(Xde,Wvo),e(su,Qvo),e(su,Pq),e(Pq,Hvo),e(su,Uvo),e(J,Jvo),e(J,lu),e(lu,zde),e(zde,Yvo),e(lu,Kvo),e(lu,Bq),e(Bq,Zvo),e(lu,e1o),e(J,o1o),e(J,iu),e(iu,Wde),e(Wde,r1o),e(iu,t1o),e(iu,Iq),e(Iq,a1o),e(iu,n1o),e(J,s1o),e(J,du),e(du,Qde),e(Qde,l1o),e(du,i1o),e(du,Nq),e(Nq,d1o),e(du,c1o),e(J,m1o),e(J,cu),e(cu,Hde),e(Hde,f1o),e(cu,g1o),e(cu,qq),e(qq,h1o),e(cu,u1o),e(J,p1o),e(J,mu),e(mu,Ude),e(Ude,_1o),e(mu,b1o),e(mu,jq),e(jq,v1o),e(mu,F1o),e(J,T1o),e(J,fu),e(fu,Jde),e(Jde,M1o),e(fu,E1o),e(fu,Dq),e(Dq,C1o),e(fu,w1o),e(J,A1o),e(J,gu),e(gu,Yde),e(Yde,L1o),e(gu,y1o),e(gu,Gq),e(Gq,x1o),e(gu,$1o),e(J,k1o),e(J,hu),e(hu,Kde),e(Kde,S1o),e(hu,R1o),e(hu,Oq),e(Oq,P1o),e(hu,B1o),e(J,I1o),e(J,uu),e(uu,Zde),e(Zde,N1o),e(uu,q1o),e(uu,Vq),e(Vq,j1o),e(uu,D1o),e(J,G1o),e(J,pu),e(pu,ece),e(ece,O1o),e(pu,V1o),e(pu,Xq),e(Xq,X1o),e(pu,z1o),e(J,W1o),e(J,_u),e(_u,oce),e(oce,Q1o),e(_u,H1o),e(_u,zq),e(zq,U1o),e(_u,J1o),e(J,Y1o),e(J,bu),e(bu,rce),e(rce,K1o),e(bu,Z1o),e(bu,Wq),e(Wq,eFo),e(bu,oFo),e(J,rFo),e(J,vu),e(vu,tce),e(tce,tFo),e(vu,aFo),e(vu,Qq),e(Qq,nFo),e(vu,sFo),e(Ue,lFo),M(Fu,Ue,null),e(Ue,iFo),M(Tu,Ue,null),e(xo,dFo),e(xo,Mu),M(Py,Mu,null),e(Mu,cFo),e(Mu,ace),e(ace,mFo),b(m,eze,_),b(m,Gi,_),e(Gi,Eu),e(Eu,nce),M(By,nce,null),e(Gi,fFo),e(Gi,sce),e(sce,gFo),b(m,oze,_),b(m,$o,_),M(Iy,$o,null),e($o,hFo),e($o,Ny),e(Ny,uFo),e(Ny,Hq),e(Hq,pFo),e(Ny,_Fo),e($o,bFo),e($o,qy),e(qy,vFo),e(qy,lce),e(lce,FFo),e(qy,TFo),e($o,MFo),e($o,Je),M(jy,Je,null),e(Je,EFo),e(Je,ice),e(ice,CFo),e(Je,wFo),e(Je,Oi),e(Oi,AFo),e(Oi,dce),e(dce,LFo),e(Oi,yFo),e(Oi,cce),e(cce,xFo),e(Oi,$Fo),e(Je,kFo),e(Je,me),e(me,Cu),e(Cu,mce),e(mce,SFo),e(Cu,RFo),e(Cu,Uq),e(Uq,PFo),e(Cu,BFo),e(me,IFo),e(me,wu),e(wu,fce),e(fce,NFo),e(wu,qFo),e(wu,Jq),e(Jq,jFo),e(wu,DFo),e(me,GFo),e(me,Au),e(Au,gce),e(gce,OFo),e(Au,VFo),e(Au,Yq),e(Yq,XFo),e(Au,zFo),e(me,WFo),e(me,Lu),e(Lu,hce),e(hce,QFo),e(Lu,HFo),e(Lu,Kq),e(Kq,UFo),e(Lu,JFo),e(me,YFo),e(me,yu),e(yu,uce),e(uce,KFo),e(yu,ZFo),e(yu,Zq),e(Zq,eTo),e(yu,oTo),e(me,rTo),e(me,xu),e(xu,pce),e(pce,tTo),e(xu,aTo),e(xu,ej),e(ej,nTo),e(xu,sTo),e(me,lTo),e(me,$u),e($u,_ce),e(_ce,iTo),e($u,dTo),e($u,oj),e(oj,cTo),e($u,mTo),e(me,fTo),e(me,ku),e(ku,bce),e(bce,gTo),e(ku,hTo),e(ku,rj),e(rj,uTo),e(ku,pTo),e(me,_To),e(me,Su),e(Su,vce),e(vce,bTo),e(Su,vTo),e(Su,tj),e(tj,FTo),e(Su,TTo),e(me,MTo),e(me,Ru),e(Ru,Fce),e(Fce,ETo),e(Ru,CTo),e(Ru,aj),e(aj,wTo),e(Ru,ATo),e(me,LTo),e(me,Pu),e(Pu,Tce),e(Tce,yTo),e(Pu,xTo),e(Pu,nj),e(nj,$To),e(Pu,kTo),e(me,STo),e(me,Bu),e(Bu,Mce),e(Mce,RTo),e(Bu,PTo),e(Bu,sj),e(sj,BTo),e(Bu,ITo),e(me,NTo),e(me,Iu),e(Iu,Ece),e(Ece,qTo),e(Iu,jTo),e(Iu,lj),e(lj,DTo),e(Iu,GTo),e(me,OTo),e(me,Nu),e(Nu,Cce),e(Cce,VTo),e(Nu,XTo),e(Nu,ij),e(ij,zTo),e(Nu,WTo),e(me,QTo),e(me,qu),e(qu,wce),e(wce,HTo),e(qu,UTo),e(qu,dj),e(dj,JTo),e(qu,YTo),e(me,KTo),e(me,ju),e(ju,Ace),e(Ace,ZTo),e(ju,eMo),e(ju,cj),e(cj,oMo),e(ju,rMo),e(me,tMo),e(me,Du),e(Du,Lce),e(Lce,aMo),e(Du,nMo),e(Du,mj),e(mj,sMo),e(Du,lMo),e(me,iMo),e(me,Gu),e(Gu,yce),e(yce,dMo),e(Gu,cMo),e(Gu,fj),e(fj,mMo),e(Gu,fMo),e(me,gMo),e(me,Ou),e(Ou,xce),e(xce,hMo),e(Ou,uMo),e(Ou,gj),e(gj,pMo),e(Ou,_Mo),e(Je,bMo),M(Vu,Je,null),e(Je,vMo),M(Xu,Je,null),e($o,FMo),e($o,zu),M(Dy,zu,null),e(zu,TMo),e(zu,$ce),e($ce,MMo),b(m,rze,_),b(m,Vi,_),e(Vi,Wu),e(Wu,kce),M(Gy,kce,null),e(Vi,EMo),e(Vi,Sce),e(Sce,CMo),b(m,tze,_),b(m,ko,_),M(Oy,ko,null),e(ko,wMo),e(ko,Xi),e(Xi,AMo),e(Xi,hj),e(hj,LMo),e(Xi,yMo),e(Xi,uj),e(uj,xMo),e(Xi,$Mo),e(ko,kMo),e(ko,Vy),e(Vy,SMo),e(Vy,Rce),e(Rce,RMo),e(Vy,PMo),e(ko,BMo),e(ko,it),M(Xy,it,null),e(it,IMo),e(it,Pce),e(Pce,NMo),e(it,qMo),e(it,zi),e(zi,jMo),e(zi,Bce),e(Bce,DMo),e(zi,GMo),e(zi,pj),e(pj,OMo),e(zi,VMo),e(it,XMo),M(Qu,it,null),e(ko,zMo),e(ko,Ye),M(zy,Ye,null),e(Ye,WMo),e(Ye,Ice),e(Ice,QMo),e(Ye,HMo),e(Ye,Ia),e(Ia,UMo),e(Ia,Nce),e(Nce,JMo),e(Ia,YMo),e(Ia,qce),e(qce,KMo),e(Ia,ZMo),e(Ia,jce),e(jce,e4o),e(Ia,o4o),e(Ye,r4o),e(Ye,y),e(y,Hu),e(Hu,Dce),e(Dce,t4o),e(Hu,a4o),e(Hu,_j),e(_j,n4o),e(Hu,s4o),e(y,l4o),e(y,Uu),e(Uu,Gce),e(Gce,i4o),e(Uu,d4o),e(Uu,bj),e(bj,c4o),e(Uu,m4o),e(y,f4o),e(y,Ju),e(Ju,Oce),e(Oce,g4o),e(Ju,h4o),e(Ju,vj),e(vj,u4o),e(Ju,p4o),e(y,_4o),e(y,Yu),e(Yu,Vce),e(Vce,b4o),e(Yu,v4o),e(Yu,Fj),e(Fj,F4o),e(Yu,T4o),e(y,M4o),e(y,Ku),e(Ku,Xce),e(Xce,E4o),e(Ku,C4o),e(Ku,Tj),e(Tj,w4o),e(Ku,A4o),e(y,L4o),e(y,Zu),e(Zu,zce),e(zce,y4o),e(Zu,x4o),e(Zu,Mj),e(Mj,$4o),e(Zu,k4o),e(y,S4o),e(y,ep),e(ep,Wce),e(Wce,R4o),e(ep,P4o),e(ep,Ej),e(Ej,B4o),e(ep,I4o),e(y,N4o),e(y,op),e(op,Qce),e(Qce,q4o),e(op,j4o),e(op,Cj),e(Cj,D4o),e(op,G4o),e(y,O4o),e(y,rp),e(rp,Hce),e(Hce,V4o),e(rp,X4o),e(rp,wj),e(wj,z4o),e(rp,W4o),e(y,Q4o),e(y,tp),e(tp,Uce),e(Uce,H4o),e(tp,U4o),e(tp,Aj),e(Aj,J4o),e(tp,Y4o),e(y,K4o),e(y,ap),e(ap,Jce),e(Jce,Z4o),e(ap,eEo),e(ap,Lj),e(Lj,oEo),e(ap,rEo),e(y,tEo),e(y,np),e(np,Yce),e(Yce,aEo),e(np,nEo),e(np,yj),e(yj,sEo),e(np,lEo),e(y,iEo),e(y,sp),e(sp,Kce),e(Kce,dEo),e(sp,cEo),e(sp,xj),e(xj,mEo),e(sp,fEo),e(y,gEo),e(y,lp),e(lp,Zce),e(Zce,hEo),e(lp,uEo),e(lp,$j),e($j,pEo),e(lp,_Eo),e(y,bEo),e(y,ip),e(ip,eme),e(eme,vEo),e(ip,FEo),e(ip,kj),e(kj,TEo),e(ip,MEo),e(y,EEo),e(y,dp),e(dp,ome),e(ome,CEo),e(dp,wEo),e(dp,Sj),e(Sj,AEo),e(dp,LEo),e(y,yEo),e(y,cp),e(cp,rme),e(rme,xEo),e(cp,$Eo),e(cp,Rj),e(Rj,kEo),e(cp,SEo),e(y,REo),e(y,mp),e(mp,tme),e(tme,PEo),e(mp,BEo),e(mp,Pj),e(Pj,IEo),e(mp,NEo),e(y,qEo),e(y,fp),e(fp,ame),e(ame,jEo),e(fp,DEo),e(fp,Bj),e(Bj,GEo),e(fp,OEo),e(y,VEo),e(y,gp),e(gp,nme),e(nme,XEo),e(gp,zEo),e(gp,Ij),e(Ij,WEo),e(gp,QEo),e(y,HEo),e(y,hp),e(hp,sme),e(sme,UEo),e(hp,JEo),e(hp,Nj),e(Nj,YEo),e(hp,KEo),e(y,ZEo),e(y,up),e(up,lme),e(lme,eCo),e(up,oCo),e(up,qj),e(qj,rCo),e(up,tCo),e(y,aCo),e(y,pp),e(pp,ime),e(ime,nCo),e(pp,sCo),e(pp,jj),e(jj,lCo),e(pp,iCo),e(y,dCo),e(y,_p),e(_p,dme),e(dme,cCo),e(_p,mCo),e(_p,Dj),e(Dj,fCo),e(_p,gCo),e(y,hCo),e(y,bp),e(bp,cme),e(cme,uCo),e(bp,pCo),e(bp,Gj),e(Gj,_Co),e(bp,bCo),e(y,vCo),e(y,vp),e(vp,mme),e(mme,FCo),e(vp,TCo),e(vp,Oj),e(Oj,MCo),e(vp,ECo),e(y,CCo),e(y,Fp),e(Fp,fme),e(fme,wCo),e(Fp,ACo),e(Fp,Vj),e(Vj,LCo),e(Fp,yCo),e(y,xCo),e(y,Tp),e(Tp,gme),e(gme,$Co),e(Tp,kCo),e(Tp,Xj),e(Xj,SCo),e(Tp,RCo),e(y,PCo),e(y,Mp),e(Mp,hme),e(hme,BCo),e(Mp,ICo),e(Mp,zj),e(zj,NCo),e(Mp,qCo),e(y,jCo),e(y,Ep),e(Ep,ume),e(ume,DCo),e(Ep,GCo),e(Ep,Wj),e(Wj,OCo),e(Ep,VCo),e(y,XCo),e(y,Cp),e(Cp,pme),e(pme,zCo),e(Cp,WCo),e(Cp,Qj),e(Qj,QCo),e(Cp,HCo),e(y,UCo),e(y,wp),e(wp,_me),e(_me,JCo),e(wp,YCo),e(wp,Hj),e(Hj,KCo),e(wp,ZCo),e(y,e5o),e(y,Ap),e(Ap,bme),e(bme,o5o),e(Ap,r5o),e(Ap,Uj),e(Uj,t5o),e(Ap,a5o),e(y,n5o),e(y,Lp),e(Lp,vme),e(vme,s5o),e(Lp,l5o),e(Lp,Jj),e(Jj,i5o),e(Lp,d5o),e(y,c5o),e(y,Us),e(Us,Fme),e(Fme,m5o),e(Us,f5o),e(Us,Yj),e(Yj,g5o),e(Us,h5o),e(Us,Kj),e(Kj,u5o),e(Us,p5o),e(y,_5o),e(y,yp),e(yp,Tme),e(Tme,b5o),e(yp,v5o),e(yp,Zj),e(Zj,F5o),e(yp,T5o),e(y,M5o),e(y,xp),e(xp,Mme),e(Mme,E5o),e(xp,C5o),e(xp,eD),e(eD,w5o),e(xp,A5o),e(y,L5o),e(y,$p),e($p,Eme),e(Eme,y5o),e($p,x5o),e($p,oD),e(oD,$5o),e($p,k5o),e(y,S5o),e(y,kp),e(kp,Cme),e(Cme,R5o),e(kp,P5o),e(kp,rD),e(rD,B5o),e(kp,I5o),e(y,N5o),e(y,Sp),e(Sp,wme),e(wme,q5o),e(Sp,j5o),e(Sp,tD),e(tD,D5o),e(Sp,G5o),e(y,O5o),e(y,Rp),e(Rp,Ame),e(Ame,V5o),e(Rp,X5o),e(Rp,aD),e(aD,z5o),e(Rp,W5o),e(y,Q5o),e(y,Pp),e(Pp,Lme),e(Lme,H5o),e(Pp,U5o),e(Pp,nD),e(nD,J5o),e(Pp,Y5o),e(y,K5o),e(y,Bp),e(Bp,yme),e(yme,Z5o),e(Bp,e3o),e(Bp,sD),e(sD,o3o),e(Bp,r3o),e(y,t3o),e(y,Ip),e(Ip,xme),e(xme,a3o),e(Ip,n3o),e(Ip,lD),e(lD,s3o),e(Ip,l3o),e(y,i3o),e(y,Np),e(Np,$me),e($me,d3o),e(Np,c3o),e(Np,iD),e(iD,m3o),e(Np,f3o),e(y,g3o),e(y,qp),e(qp,kme),e(kme,h3o),e(qp,u3o),e(qp,dD),e(dD,p3o),e(qp,_3o),e(y,b3o),e(y,jp),e(jp,Sme),e(Sme,v3o),e(jp,F3o),e(jp,cD),e(cD,T3o),e(jp,M3o),e(y,E3o),e(y,Dp),e(Dp,Rme),e(Rme,C3o),e(Dp,w3o),e(Dp,mD),e(mD,A3o),e(Dp,L3o),e(y,y3o),e(y,Gp),e(Gp,Pme),e(Pme,x3o),e(Gp,$3o),e(Gp,fD),e(fD,k3o),e(Gp,S3o),e(y,R3o),e(y,Op),e(Op,Bme),e(Bme,P3o),e(Op,B3o),e(Op,gD),e(gD,I3o),e(Op,N3o),e(y,q3o),e(y,Vp),e(Vp,Ime),e(Ime,j3o),e(Vp,D3o),e(Vp,hD),e(hD,G3o),e(Vp,O3o),e(y,V3o),e(y,Xp),e(Xp,Nme),e(Nme,X3o),e(Xp,z3o),e(Xp,uD),e(uD,W3o),e(Xp,Q3o),e(y,H3o),e(y,zp),e(zp,qme),e(qme,U3o),e(zp,J3o),e(zp,pD),e(pD,Y3o),e(zp,K3o),e(y,Z3o),e(y,Wp),e(Wp,jme),e(jme,e0o),e(Wp,o0o),e(Wp,_D),e(_D,r0o),e(Wp,t0o),e(y,a0o),e(y,Qp),e(Qp,Dme),e(Dme,n0o),e(Qp,s0o),e(Qp,bD),e(bD,l0o),e(Qp,i0o),e(y,d0o),e(y,Hp),e(Hp,Gme),e(Gme,c0o),e(Hp,m0o),e(Hp,vD),e(vD,f0o),e(Hp,g0o),e(y,h0o),e(y,Up),e(Up,Ome),e(Ome,u0o),e(Up,p0o),e(Up,FD),e(FD,_0o),e(Up,b0o),e(y,v0o),e(y,Jp),e(Jp,Vme),e(Vme,F0o),e(Jp,T0o),e(Jp,TD),e(TD,M0o),e(Jp,E0o),e(y,C0o),e(y,Yp),e(Yp,Xme),e(Xme,w0o),e(Yp,A0o),e(Yp,MD),e(MD,L0o),e(Yp,y0o),e(y,x0o),e(y,Kp),e(Kp,zme),e(zme,$0o),e(Kp,k0o),e(Kp,ED),e(ED,S0o),e(Kp,R0o),e(y,P0o),e(y,Zp),e(Zp,Wme),e(Wme,B0o),e(Zp,I0o),e(Zp,CD),e(CD,N0o),e(Zp,q0o),e(y,j0o),e(y,e_),e(e_,Qme),e(Qme,D0o),e(e_,G0o),e(e_,wD),e(wD,O0o),e(e_,V0o),e(y,X0o),e(y,o_),e(o_,Hme),e(Hme,z0o),e(o_,W0o),e(o_,AD),e(AD,Q0o),e(o_,H0o),e(y,U0o),e(y,r_),e(r_,Ume),e(Ume,J0o),e(r_,Y0o),e(r_,LD),e(LD,K0o),e(r_,Z0o),e(y,ewo),e(y,t_),e(t_,Jme),e(Jme,owo),e(t_,rwo),e(t_,yD),e(yD,two),e(t_,awo),e(y,nwo),e(y,a_),e(a_,Yme),e(Yme,swo),e(a_,lwo),e(a_,xD),e(xD,iwo),e(a_,dwo),e(y,cwo),e(y,n_),e(n_,Kme),e(Kme,mwo),e(n_,fwo),e(n_,$D),e($D,gwo),e(n_,hwo),e(y,uwo),e(y,s_),e(s_,Zme),e(Zme,pwo),e(s_,_wo),e(s_,kD),e(kD,bwo),e(s_,vwo),e(y,Fwo),e(y,l_),e(l_,efe),e(efe,Two),e(l_,Mwo),e(l_,SD),e(SD,Ewo),e(l_,Cwo),e(y,wwo),e(y,i_),e(i_,ofe),e(ofe,Awo),e(i_,Lwo),e(i_,RD),e(RD,ywo),e(i_,xwo),e(y,$wo),e(y,d_),e(d_,rfe),e(rfe,kwo),e(d_,Swo),e(d_,PD),e(PD,Rwo),e(d_,Pwo),e(y,Bwo),e(y,c_),e(c_,tfe),e(tfe,Iwo),e(c_,Nwo),e(c_,BD),e(BD,qwo),e(c_,jwo),e(y,Dwo),e(y,m_),e(m_,afe),e(afe,Gwo),e(m_,Owo),e(m_,ID),e(ID,Vwo),e(m_,Xwo),e(y,zwo),e(y,f_),e(f_,nfe),e(nfe,Wwo),e(f_,Qwo),e(f_,ND),e(ND,Hwo),e(f_,Uwo),e(y,Jwo),e(y,g_),e(g_,sfe),e(sfe,Ywo),e(g_,Kwo),e(g_,qD),e(qD,Zwo),e(g_,eAo),e(y,oAo),e(y,h_),e(h_,lfe),e(lfe,rAo),e(h_,tAo),e(h_,jD),e(jD,aAo),e(h_,nAo),e(y,sAo),e(y,u_),e(u_,ife),e(ife,lAo),e(u_,iAo),e(u_,DD),e(DD,dAo),e(u_,cAo),e(y,mAo),e(y,p_),e(p_,dfe),e(dfe,fAo),e(p_,gAo),e(p_,GD),e(GD,hAo),e(p_,uAo),e(y,pAo),e(y,__),e(__,cfe),e(cfe,_Ao),e(__,bAo),e(__,OD),e(OD,vAo),e(__,FAo),e(y,TAo),e(y,b_),e(b_,mfe),e(mfe,MAo),e(b_,EAo),e(b_,VD),e(VD,CAo),e(b_,wAo),e(y,AAo),e(y,v_),e(v_,ffe),e(ffe,LAo),e(v_,yAo),e(v_,XD),e(XD,xAo),e(v_,$Ao),e(y,kAo),e(y,F_),e(F_,gfe),e(gfe,SAo),e(F_,RAo),e(F_,zD),e(zD,PAo),e(F_,BAo),e(y,IAo),e(y,T_),e(T_,hfe),e(hfe,NAo),e(T_,qAo),e(T_,WD),e(WD,jAo),e(T_,DAo),e(y,GAo),e(y,M_),e(M_,ufe),e(ufe,OAo),e(M_,VAo),e(M_,QD),e(QD,XAo),e(M_,zAo),e(y,WAo),e(y,E_),e(E_,pfe),e(pfe,QAo),e(E_,HAo),e(E_,HD),e(HD,UAo),e(E_,JAo),e(y,YAo),e(y,C_),e(C_,_fe),e(_fe,KAo),e(C_,ZAo),e(C_,UD),e(UD,e6o),e(C_,o6o),e(y,r6o),e(y,w_),e(w_,bfe),e(bfe,t6o),e(w_,a6o),e(w_,JD),e(JD,n6o),e(w_,s6o),e(y,l6o),e(y,A_),e(A_,vfe),e(vfe,i6o),e(A_,d6o),e(A_,YD),e(YD,c6o),e(A_,m6o),e(y,f6o),e(y,L_),e(L_,Ffe),e(Ffe,g6o),e(L_,h6o),e(L_,KD),e(KD,u6o),e(L_,p6o),e(y,_6o),e(y,y_),e(y_,Tfe),e(Tfe,b6o),e(y_,v6o),e(y_,ZD),e(ZD,F6o),e(y_,T6o),e(y,M6o),e(y,x_),e(x_,Mfe),e(Mfe,E6o),e(x_,C6o),e(x_,eG),e(eG,w6o),e(x_,A6o),e(y,L6o),e(y,$_),e($_,Efe),e(Efe,y6o),e($_,x6o),e($_,oG),e(oG,$6o),e($_,k6o),e(y,S6o),e(y,k_),e(k_,Cfe),e(Cfe,R6o),e(k_,P6o),e(k_,rG),e(rG,B6o),e(k_,I6o),e(y,N6o),e(y,S_),e(S_,wfe),e(wfe,q6o),e(S_,j6o),e(S_,tG),e(tG,D6o),e(S_,G6o),e(y,O6o),e(y,R_),e(R_,Afe),e(Afe,V6o),e(R_,X6o),e(R_,aG),e(aG,z6o),e(R_,W6o),e(y,Q6o),e(y,P_),e(P_,Lfe),e(Lfe,H6o),e(P_,U6o),e(P_,nG),e(nG,J6o),e(P_,Y6o),e(y,K6o),e(y,B_),e(B_,yfe),e(yfe,Z6o),e(B_,e7o),e(B_,sG),e(sG,o7o),e(B_,r7o),e(y,t7o),e(y,I_),e(I_,xfe),e(xfe,a7o),e(I_,n7o),e(I_,lG),e(lG,s7o),e(I_,l7o),e(y,i7o),e(y,N_),e(N_,$fe),e($fe,d7o),e(N_,c7o),e(N_,iG),e(iG,m7o),e(N_,f7o),e(y,g7o),e(y,q_),e(q_,kfe),e(kfe,h7o),e(q_,u7o),e(q_,dG),e(dG,p7o),e(q_,_7o),e(y,b7o),e(y,j_),e(j_,Sfe),e(Sfe,v7o),e(j_,F7o),e(j_,cG),e(cG,T7o),e(j_,M7o),e(y,E7o),e(y,D_),e(D_,Rfe),e(Rfe,C7o),e(D_,w7o),e(D_,mG),e(mG,A7o),e(D_,L7o),e(y,y7o),e(y,G_),e(G_,Pfe),e(Pfe,x7o),e(G_,$7o),e(G_,fG),e(fG,k7o),e(G_,S7o),e(y,R7o),e(y,O_),e(O_,Bfe),e(Bfe,P7o),e(O_,B7o),e(O_,gG),e(gG,I7o),e(O_,N7o),e(y,q7o),e(y,V_),e(V_,Ife),e(Ife,j7o),e(V_,D7o),e(V_,hG),e(hG,G7o),e(V_,O7o),e(y,V7o),e(y,X_),e(X_,Nfe),e(Nfe,X7o),e(X_,z7o),e(X_,uG),e(uG,W7o),e(X_,Q7o),e(y,H7o),e(y,z_),e(z_,qfe),e(qfe,U7o),e(z_,J7o),e(z_,pG),e(pG,Y7o),e(z_,K7o),e(y,Z7o),e(y,W_),e(W_,jfe),e(jfe,eLo),e(W_,oLo),e(W_,_G),e(_G,rLo),e(W_,tLo),e(y,aLo),e(y,Q_),e(Q_,Dfe),e(Dfe,nLo),e(Q_,sLo),e(Q_,bG),e(bG,lLo),e(Q_,iLo),e(y,dLo),e(y,H_),e(H_,Gfe),e(Gfe,cLo),e(H_,mLo),e(H_,vG),e(vG,fLo),e(H_,gLo),e(y,hLo),e(y,U_),e(U_,Ofe),e(Ofe,uLo),e(U_,pLo),e(U_,FG),e(FG,_Lo),e(U_,bLo),e(y,vLo),e(y,J_),e(J_,Vfe),e(Vfe,FLo),e(J_,TLo),e(J_,TG),e(TG,MLo),e(J_,ELo),e(y,CLo),e(y,Y_),e(Y_,Xfe),e(Xfe,wLo),e(Y_,ALo),e(Y_,MG),e(MG,LLo),e(Y_,yLo),e(Ye,xLo),e(Ye,K_),e(K_,$Lo),e(K_,zfe),e(zfe,kLo),e(K_,SLo),e(K_,Wfe),e(Wfe,RLo),e(Ye,PLo),M(Z_,Ye,null),b(m,aze,_),b(m,Wi,_),e(Wi,e2),e(e2,Qfe),M(Wy,Qfe,null),e(Wi,BLo),e(Wi,Hfe),e(Hfe,ILo),b(m,nze,_),b(m,So,_),M(Qy,So,null),e(So,NLo),e(So,Qi),e(Qi,qLo),e(Qi,EG),e(EG,jLo),e(Qi,DLo),e(Qi,CG),e(CG,GLo),e(Qi,OLo),e(So,VLo),e(So,Hy),e(Hy,XLo),e(Hy,Ufe),e(Ufe,zLo),e(Hy,WLo),e(So,QLo),e(So,dt),M(Uy,dt,null),e(dt,HLo),e(dt,Jfe),e(Jfe,ULo),e(dt,JLo),e(dt,Hi),e(Hi,YLo),e(Hi,Yfe),e(Yfe,KLo),e(Hi,ZLo),e(Hi,wG),e(wG,eyo),e(Hi,oyo),e(dt,ryo),M(o2,dt,null),e(So,tyo),e(So,Ke),M(Jy,Ke,null),e(Ke,ayo),e(Ke,Kfe),e(Kfe,nyo),e(Ke,syo),e(Ke,Na),e(Na,lyo),e(Na,Zfe),e(Zfe,iyo),e(Na,dyo),e(Na,ege),e(ege,cyo),e(Na,myo),e(Na,oge),e(oge,fyo),e(Na,gyo),e(Ke,hyo),e(Ke,G),e(G,r2),e(r2,rge),e(rge,uyo),e(r2,pyo),e(r2,AG),e(AG,_yo),e(r2,byo),e(G,vyo),e(G,t2),e(t2,tge),e(tge,Fyo),e(t2,Tyo),e(t2,LG),e(LG,Myo),e(t2,Eyo),e(G,Cyo),e(G,a2),e(a2,age),e(age,wyo),e(a2,Ayo),e(a2,yG),e(yG,Lyo),e(a2,yyo),e(G,xyo),e(G,n2),e(n2,nge),e(nge,$yo),e(n2,kyo),e(n2,xG),e(xG,Syo),e(n2,Ryo),e(G,Pyo),e(G,s2),e(s2,sge),e(sge,Byo),e(s2,Iyo),e(s2,$G),e($G,Nyo),e(s2,qyo),e(G,jyo),e(G,l2),e(l2,lge),e(lge,Dyo),e(l2,Gyo),e(l2,kG),e(kG,Oyo),e(l2,Vyo),e(G,Xyo),e(G,i2),e(i2,ige),e(ige,zyo),e(i2,Wyo),e(i2,SG),e(SG,Qyo),e(i2,Hyo),e(G,Uyo),e(G,d2),e(d2,dge),e(dge,Jyo),e(d2,Yyo),e(d2,RG),e(RG,Kyo),e(d2,Zyo),e(G,e8o),e(G,c2),e(c2,cge),e(cge,o8o),e(c2,r8o),e(c2,PG),e(PG,t8o),e(c2,a8o),e(G,n8o),e(G,m2),e(m2,mge),e(mge,s8o),e(m2,l8o),e(m2,BG),e(BG,i8o),e(m2,d8o),e(G,c8o),e(G,f2),e(f2,fge),e(fge,m8o),e(f2,f8o),e(f2,IG),e(IG,g8o),e(f2,h8o),e(G,u8o),e(G,g2),e(g2,gge),e(gge,p8o),e(g2,_8o),e(g2,NG),e(NG,b8o),e(g2,v8o),e(G,F8o),e(G,h2),e(h2,hge),e(hge,T8o),e(h2,M8o),e(h2,qG),e(qG,E8o),e(h2,C8o),e(G,w8o),e(G,u2),e(u2,uge),e(uge,A8o),e(u2,L8o),e(u2,jG),e(jG,y8o),e(u2,x8o),e(G,$8o),e(G,p2),e(p2,pge),e(pge,k8o),e(p2,S8o),e(p2,DG),e(DG,R8o),e(p2,P8o),e(G,B8o),e(G,_2),e(_2,_ge),e(_ge,I8o),e(_2,N8o),e(_2,GG),e(GG,q8o),e(_2,j8o),e(G,D8o),e(G,b2),e(b2,bge),e(bge,G8o),e(b2,O8o),e(b2,OG),e(OG,V8o),e(b2,X8o),e(G,z8o),e(G,v2),e(v2,vge),e(vge,W8o),e(v2,Q8o),e(v2,VG),e(VG,H8o),e(v2,U8o),e(G,J8o),e(G,F2),e(F2,Fge),e(Fge,Y8o),e(F2,K8o),e(F2,XG),e(XG,Z8o),e(F2,e9o),e(G,o9o),e(G,T2),e(T2,Tge),e(Tge,r9o),e(T2,t9o),e(T2,zG),e(zG,a9o),e(T2,n9o),e(G,s9o),e(G,M2),e(M2,Mge),e(Mge,l9o),e(M2,i9o),e(M2,WG),e(WG,d9o),e(M2,c9o),e(G,m9o),e(G,E2),e(E2,Ege),e(Ege,f9o),e(E2,g9o),e(E2,QG),e(QG,h9o),e(E2,u9o),e(G,p9o),e(G,C2),e(C2,Cge),e(Cge,_9o),e(C2,b9o),e(C2,HG),e(HG,v9o),e(C2,F9o),e(G,T9o),e(G,w2),e(w2,wge),e(wge,M9o),e(w2,E9o),e(w2,UG),e(UG,C9o),e(w2,w9o),e(G,A9o),e(G,A2),e(A2,Age),e(Age,L9o),e(A2,y9o),e(A2,JG),e(JG,x9o),e(A2,$9o),e(G,k9o),e(G,L2),e(L2,Lge),e(Lge,S9o),e(L2,R9o),e(L2,YG),e(YG,P9o),e(L2,B9o),e(G,I9o),e(G,y2),e(y2,yge),e(yge,N9o),e(y2,q9o),e(y2,KG),e(KG,j9o),e(y2,D9o),e(G,G9o),e(G,x2),e(x2,xge),e(xge,O9o),e(x2,V9o),e(x2,ZG),e(ZG,X9o),e(x2,z9o),e(G,W9o),e(G,$2),e($2,$ge),e($ge,Q9o),e($2,H9o),e($2,eO),e(eO,U9o),e($2,J9o),e(G,Y9o),e(G,k2),e(k2,kge),e(kge,K9o),e(k2,Z9o),e(k2,oO),e(oO,exo),e(k2,oxo),e(G,rxo),e(G,S2),e(S2,Sge),e(Sge,txo),e(S2,axo),e(S2,rO),e(rO,nxo),e(S2,sxo),e(G,lxo),e(G,R2),e(R2,Rge),e(Rge,ixo),e(R2,dxo),e(R2,tO),e(tO,cxo),e(R2,mxo),e(G,fxo),e(G,P2),e(P2,Pge),e(Pge,gxo),e(P2,hxo),e(P2,aO),e(aO,uxo),e(P2,pxo),e(G,_xo),e(G,B2),e(B2,Bge),e(Bge,bxo),e(B2,vxo),e(B2,nO),e(nO,Fxo),e(B2,Txo),e(G,Mxo),e(G,I2),e(I2,Ige),e(Ige,Exo),e(I2,Cxo),e(I2,sO),e(sO,wxo),e(I2,Axo),e(G,Lxo),e(G,N2),e(N2,Nge),e(Nge,yxo),e(N2,xxo),e(N2,lO),e(lO,$xo),e(N2,kxo),e(G,Sxo),e(G,q2),e(q2,qge),e(qge,Rxo),e(q2,Pxo),e(q2,iO),e(iO,Bxo),e(q2,Ixo),e(G,Nxo),e(G,j2),e(j2,jge),e(jge,qxo),e(j2,jxo),e(j2,dO),e(dO,Dxo),e(j2,Gxo),e(G,Oxo),e(G,D2),e(D2,Dge),e(Dge,Vxo),e(D2,Xxo),e(D2,cO),e(cO,zxo),e(D2,Wxo),e(G,Qxo),e(G,G2),e(G2,Gge),e(Gge,Hxo),e(G2,Uxo),e(G2,mO),e(mO,Jxo),e(G2,Yxo),e(G,Kxo),e(G,O2),e(O2,Oge),e(Oge,Zxo),e(O2,e$o),e(O2,fO),e(fO,o$o),e(O2,r$o),e(G,t$o),e(G,V2),e(V2,Vge),e(Vge,a$o),e(V2,n$o),e(V2,gO),e(gO,s$o),e(V2,l$o),e(G,i$o),e(G,X2),e(X2,Xge),e(Xge,d$o),e(X2,c$o),e(X2,hO),e(hO,m$o),e(X2,f$o),e(G,g$o),e(G,z2),e(z2,zge),e(zge,h$o),e(z2,u$o),e(z2,uO),e(uO,p$o),e(z2,_$o),e(G,b$o),e(G,W2),e(W2,Wge),e(Wge,v$o),e(W2,F$o),e(W2,pO),e(pO,T$o),e(W2,M$o),e(Ke,E$o),e(Ke,Q2),e(Q2,C$o),e(Q2,Qge),e(Qge,w$o),e(Q2,A$o),e(Q2,Hge),e(Hge,L$o),e(Ke,y$o),M(H2,Ke,null),b(m,sze,_),b(m,Ui,_),e(Ui,U2),e(U2,Uge),M(Yy,Uge,null),e(Ui,x$o),e(Ui,Jge),e(Jge,$$o),b(m,lze,_),b(m,Ro,_),M(Ky,Ro,null),e(Ro,k$o),e(Ro,Ji),e(Ji,S$o),e(Ji,_O),e(_O,R$o),e(Ji,P$o),e(Ji,bO),e(bO,B$o),e(Ji,I$o),e(Ro,N$o),e(Ro,Zy),e(Zy,q$o),e(Zy,Yge),e(Yge,j$o),e(Zy,D$o),e(Ro,G$o),e(Ro,ct),M(e8,ct,null),e(ct,O$o),e(ct,Kge),e(Kge,V$o),e(ct,X$o),e(ct,Yi),e(Yi,z$o),e(Yi,Zge),e(Zge,W$o),e(Yi,Q$o),e(Yi,vO),e(vO,H$o),e(Yi,U$o),e(ct,J$o),M(J2,ct,null),e(Ro,Y$o),e(Ro,Ze),M(o8,Ze,null),e(Ze,K$o),e(Ze,ehe),e(ehe,Z$o),e(Ze,eko),e(Ze,qa),e(qa,oko),e(qa,ohe),e(ohe,rko),e(qa,tko),e(qa,rhe),e(rhe,ako),e(qa,nko),e(qa,the),e(the,sko),e(qa,lko),e(Ze,iko),e(Ze,z),e(z,Y2),e(Y2,ahe),e(ahe,dko),e(Y2,cko),e(Y2,FO),e(FO,mko),e(Y2,fko),e(z,gko),e(z,K2),e(K2,nhe),e(nhe,hko),e(K2,uko),e(K2,TO),e(TO,pko),e(K2,_ko),e(z,bko),e(z,Z2),e(Z2,she),e(she,vko),e(Z2,Fko),e(Z2,MO),e(MO,Tko),e(Z2,Mko),e(z,Eko),e(z,eb),e(eb,lhe),e(lhe,Cko),e(eb,wko),e(eb,EO),e(EO,Ako),e(eb,Lko),e(z,yko),e(z,ob),e(ob,ihe),e(ihe,xko),e(ob,$ko),e(ob,CO),e(CO,kko),e(ob,Sko),e(z,Rko),e(z,rb),e(rb,dhe),e(dhe,Pko),e(rb,Bko),e(rb,wO),e(wO,Iko),e(rb,Nko),e(z,qko),e(z,tb),e(tb,che),e(che,jko),e(tb,Dko),e(tb,AO),e(AO,Gko),e(tb,Oko),e(z,Vko),e(z,ab),e(ab,mhe),e(mhe,Xko),e(ab,zko),e(ab,LO),e(LO,Wko),e(ab,Qko),e(z,Hko),e(z,nb),e(nb,fhe),e(fhe,Uko),e(nb,Jko),e(nb,yO),e(yO,Yko),e(nb,Kko),e(z,Zko),e(z,sb),e(sb,ghe),e(ghe,eSo),e(sb,oSo),e(sb,xO),e(xO,rSo),e(sb,tSo),e(z,aSo),e(z,lb),e(lb,hhe),e(hhe,nSo),e(lb,sSo),e(lb,$O),e($O,lSo),e(lb,iSo),e(z,dSo),e(z,ib),e(ib,uhe),e(uhe,cSo),e(ib,mSo),e(ib,kO),e(kO,fSo),e(ib,gSo),e(z,hSo),e(z,db),e(db,phe),e(phe,uSo),e(db,pSo),e(db,SO),e(SO,_So),e(db,bSo),e(z,vSo),e(z,cb),e(cb,_he),e(_he,FSo),e(cb,TSo),e(cb,RO),e(RO,MSo),e(cb,ESo),e(z,CSo),e(z,mb),e(mb,bhe),e(bhe,wSo),e(mb,ASo),e(mb,PO),e(PO,LSo),e(mb,ySo),e(z,xSo),e(z,fb),e(fb,vhe),e(vhe,$So),e(fb,kSo),e(fb,BO),e(BO,SSo),e(fb,RSo),e(z,PSo),e(z,gb),e(gb,Fhe),e(Fhe,BSo),e(gb,ISo),e(gb,IO),e(IO,NSo),e(gb,qSo),e(z,jSo),e(z,hb),e(hb,The),e(The,DSo),e(hb,GSo),e(hb,NO),e(NO,OSo),e(hb,VSo),e(z,XSo),e(z,ub),e(ub,Mhe),e(Mhe,zSo),e(ub,WSo),e(ub,qO),e(qO,QSo),e(ub,HSo),e(z,USo),e(z,pb),e(pb,Ehe),e(Ehe,JSo),e(pb,YSo),e(pb,jO),e(jO,KSo),e(pb,ZSo),e(z,eRo),e(z,_b),e(_b,Che),e(Che,oRo),e(_b,rRo),e(_b,DO),e(DO,tRo),e(_b,aRo),e(z,nRo),e(z,bb),e(bb,whe),e(whe,sRo),e(bb,lRo),e(bb,GO),e(GO,iRo),e(bb,dRo),e(z,cRo),e(z,vb),e(vb,Ahe),e(Ahe,mRo),e(vb,fRo),e(vb,OO),e(OO,gRo),e(vb,hRo),e(z,uRo),e(z,Fb),e(Fb,Lhe),e(Lhe,pRo),e(Fb,_Ro),e(Fb,VO),e(VO,bRo),e(Fb,vRo),e(z,FRo),e(z,Tb),e(Tb,yhe),e(yhe,TRo),e(Tb,MRo),e(Tb,XO),e(XO,ERo),e(Tb,CRo),e(z,wRo),e(z,Mb),e(Mb,xhe),e(xhe,ARo),e(Mb,LRo),e(Mb,zO),e(zO,yRo),e(Mb,xRo),e(z,$Ro),e(z,Eb),e(Eb,$he),e($he,kRo),e(Eb,SRo),e(Eb,WO),e(WO,RRo),e(Eb,PRo),e(z,BRo),e(z,Cb),e(Cb,khe),e(khe,IRo),e(Cb,NRo),e(Cb,QO),e(QO,qRo),e(Cb,jRo),e(z,DRo),e(z,wb),e(wb,She),e(She,GRo),e(wb,ORo),e(wb,HO),e(HO,VRo),e(wb,XRo),e(z,zRo),e(z,Ab),e(Ab,Rhe),e(Rhe,WRo),e(Ab,QRo),e(Ab,UO),e(UO,HRo),e(Ab,URo),e(z,JRo),e(z,Lb),e(Lb,Phe),e(Phe,YRo),e(Lb,KRo),e(Lb,JO),e(JO,ZRo),e(Lb,ePo),e(z,oPo),e(z,yb),e(yb,Bhe),e(Bhe,rPo),e(yb,tPo),e(yb,YO),e(YO,aPo),e(yb,nPo),e(z,sPo),e(z,xb),e(xb,Ihe),e(Ihe,lPo),e(xb,iPo),e(xb,KO),e(KO,dPo),e(xb,cPo),e(z,mPo),e(z,$b),e($b,Nhe),e(Nhe,fPo),e($b,gPo),e($b,ZO),e(ZO,hPo),e($b,uPo),e(z,pPo),e(z,kb),e(kb,qhe),e(qhe,_Po),e(kb,bPo),e(kb,eV),e(eV,vPo),e(kb,FPo),e(z,TPo),e(z,Sb),e(Sb,jhe),e(jhe,MPo),e(Sb,EPo),e(Sb,oV),e(oV,CPo),e(Sb,wPo),e(z,APo),e(z,Rb),e(Rb,Dhe),e(Dhe,LPo),e(Rb,yPo),e(Rb,rV),e(rV,xPo),e(Rb,$Po),e(z,kPo),e(z,Pb),e(Pb,Ghe),e(Ghe,SPo),e(Pb,RPo),e(Pb,tV),e(tV,PPo),e(Pb,BPo),e(z,IPo),e(z,Bb),e(Bb,Ohe),e(Ohe,NPo),e(Bb,qPo),e(Bb,aV),e(aV,jPo),e(Bb,DPo),e(z,GPo),e(z,Ib),e(Ib,Vhe),e(Vhe,OPo),e(Ib,VPo),e(Ib,nV),e(nV,XPo),e(Ib,zPo),e(Ze,WPo),e(Ze,Nb),e(Nb,QPo),e(Nb,Xhe),e(Xhe,HPo),e(Nb,UPo),e(Nb,zhe),e(zhe,JPo),e(Ze,YPo),M(qb,Ze,null),b(m,ize,_),b(m,Ki,_),e(Ki,jb),e(jb,Whe),M(r8,Whe,null),e(Ki,KPo),e(Ki,Qhe),e(Qhe,ZPo),b(m,dze,_),b(m,Po,_),M(t8,Po,null),e(Po,eBo),e(Po,Zi),e(Zi,oBo),e(Zi,sV),e(sV,rBo),e(Zi,tBo),e(Zi,lV),e(lV,aBo),e(Zi,nBo),e(Po,sBo),e(Po,a8),e(a8,lBo),e(a8,Hhe),e(Hhe,iBo),e(a8,dBo),e(Po,cBo),e(Po,mt),M(n8,mt,null),e(mt,mBo),e(mt,Uhe),e(Uhe,fBo),e(mt,gBo),e(mt,ed),e(ed,hBo),e(ed,Jhe),e(Jhe,uBo),e(ed,pBo),e(ed,iV),e(iV,_Bo),e(ed,bBo),e(mt,vBo),M(Db,mt,null),e(Po,FBo),e(Po,eo),M(s8,eo,null),e(eo,TBo),e(eo,Yhe),e(Yhe,MBo),e(eo,EBo),e(eo,ja),e(ja,CBo),e(ja,Khe),e(Khe,wBo),e(ja,ABo),e(ja,Zhe),e(Zhe,LBo),e(ja,yBo),e(ja,eue),e(eue,xBo),e(ja,$Bo),e(eo,kBo),e(eo,Q),e(Q,Gb),e(Gb,oue),e(oue,SBo),e(Gb,RBo),e(Gb,dV),e(dV,PBo),e(Gb,BBo),e(Q,IBo),e(Q,Ob),e(Ob,rue),e(rue,NBo),e(Ob,qBo),e(Ob,cV),e(cV,jBo),e(Ob,DBo),e(Q,GBo),e(Q,Vb),e(Vb,tue),e(tue,OBo),e(Vb,VBo),e(Vb,mV),e(mV,XBo),e(Vb,zBo),e(Q,WBo),e(Q,Xb),e(Xb,aue),e(aue,QBo),e(Xb,HBo),e(Xb,fV),e(fV,UBo),e(Xb,JBo),e(Q,YBo),e(Q,zb),e(zb,nue),e(nue,KBo),e(zb,ZBo),e(zb,gV),e(gV,eIo),e(zb,oIo),e(Q,rIo),e(Q,Wb),e(Wb,sue),e(sue,tIo),e(Wb,aIo),e(Wb,hV),e(hV,nIo),e(Wb,sIo),e(Q,lIo),e(Q,Qb),e(Qb,lue),e(lue,iIo),e(Qb,dIo),e(Qb,uV),e(uV,cIo),e(Qb,mIo),e(Q,fIo),e(Q,Hb),e(Hb,iue),e(iue,gIo),e(Hb,hIo),e(Hb,pV),e(pV,uIo),e(Hb,pIo),e(Q,_Io),e(Q,Ub),e(Ub,due),e(due,bIo),e(Ub,vIo),e(Ub,_V),e(_V,FIo),e(Ub,TIo),e(Q,MIo),e(Q,Jb),e(Jb,cue),e(cue,EIo),e(Jb,CIo),e(Jb,bV),e(bV,wIo),e(Jb,AIo),e(Q,LIo),e(Q,Yb),e(Yb,mue),e(mue,yIo),e(Yb,xIo),e(Yb,vV),e(vV,$Io),e(Yb,kIo),e(Q,SIo),e(Q,Kb),e(Kb,fue),e(fue,RIo),e(Kb,PIo),e(Kb,FV),e(FV,BIo),e(Kb,IIo),e(Q,NIo),e(Q,Zb),e(Zb,gue),e(gue,qIo),e(Zb,jIo),e(Zb,TV),e(TV,DIo),e(Zb,GIo),e(Q,OIo),e(Q,ev),e(ev,hue),e(hue,VIo),e(ev,XIo),e(ev,MV),e(MV,zIo),e(ev,WIo),e(Q,QIo),e(Q,ov),e(ov,uue),e(uue,HIo),e(ov,UIo),e(ov,EV),e(EV,JIo),e(ov,YIo),e(Q,KIo),e(Q,rv),e(rv,pue),e(pue,ZIo),e(rv,eNo),e(rv,CV),e(CV,oNo),e(rv,rNo),e(Q,tNo),e(Q,tv),e(tv,_ue),e(_ue,aNo),e(tv,nNo),e(tv,wV),e(wV,sNo),e(tv,lNo),e(Q,iNo),e(Q,av),e(av,bue),e(bue,dNo),e(av,cNo),e(av,AV),e(AV,mNo),e(av,fNo),e(Q,gNo),e(Q,nv),e(nv,vue),e(vue,hNo),e(nv,uNo),e(nv,LV),e(LV,pNo),e(nv,_No),e(Q,bNo),e(Q,sv),e(sv,Fue),e(Fue,vNo),e(sv,FNo),e(sv,yV),e(yV,TNo),e(sv,MNo),e(Q,ENo),e(Q,lv),e(lv,Tue),e(Tue,CNo),e(lv,wNo),e(lv,xV),e(xV,ANo),e(lv,LNo),e(Q,yNo),e(Q,iv),e(iv,Mue),e(Mue,xNo),e(iv,$No),e(iv,$V),e($V,kNo),e(iv,SNo),e(Q,RNo),e(Q,dv),e(dv,Eue),e(Eue,PNo),e(dv,BNo),e(dv,kV),e(kV,INo),e(dv,NNo),e(Q,qNo),e(Q,cv),e(cv,Cue),e(Cue,jNo),e(cv,DNo),e(cv,SV),e(SV,GNo),e(cv,ONo),e(Q,VNo),e(Q,mv),e(mv,wue),e(wue,XNo),e(mv,zNo),e(mv,RV),e(RV,WNo),e(mv,QNo),e(Q,HNo),e(Q,fv),e(fv,Aue),e(Aue,UNo),e(fv,JNo),e(fv,PV),e(PV,YNo),e(fv,KNo),e(Q,ZNo),e(Q,gv),e(gv,Lue),e(Lue,eqo),e(gv,oqo),e(gv,BV),e(BV,rqo),e(gv,tqo),e(Q,aqo),e(Q,hv),e(hv,yue),e(yue,nqo),e(hv,sqo),e(hv,IV),e(IV,lqo),e(hv,iqo),e(Q,dqo),e(Q,uv),e(uv,xue),e(xue,cqo),e(uv,mqo),e(uv,NV),e(NV,fqo),e(uv,gqo),e(Q,hqo),e(Q,pv),e(pv,$ue),e($ue,uqo),e(pv,pqo),e(pv,qV),e(qV,_qo),e(pv,bqo),e(Q,vqo),e(Q,_v),e(_v,kue),e(kue,Fqo),e(_v,Tqo),e(_v,jV),e(jV,Mqo),e(_v,Eqo),e(Q,Cqo),e(Q,bv),e(bv,Sue),e(Sue,wqo),e(bv,Aqo),e(bv,DV),e(DV,Lqo),e(bv,yqo),e(Q,xqo),e(Q,vv),e(vv,Rue),e(Rue,$qo),e(vv,kqo),e(vv,GV),e(GV,Sqo),e(vv,Rqo),e(Q,Pqo),e(Q,Fv),e(Fv,Pue),e(Pue,Bqo),e(Fv,Iqo),e(Fv,Bue),e(Bue,Nqo),e(Fv,qqo),e(Q,jqo),e(Q,Tv),e(Tv,Iue),e(Iue,Dqo),e(Tv,Gqo),e(Tv,OV),e(OV,Oqo),e(Tv,Vqo),e(Q,Xqo),e(Q,Mv),e(Mv,Nue),e(Nue,zqo),e(Mv,Wqo),e(Mv,VV),e(VV,Qqo),e(Mv,Hqo),e(Q,Uqo),e(Q,Ev),e(Ev,que),e(que,Jqo),e(Ev,Yqo),e(Ev,XV),e(XV,Kqo),e(Ev,Zqo),e(Q,ejo),e(Q,Cv),e(Cv,jue),e(jue,ojo),e(Cv,rjo),e(Cv,zV),e(zV,tjo),e(Cv,ajo),e(eo,njo),e(eo,wv),e(wv,sjo),e(wv,Due),e(Due,ljo),e(wv,ijo),e(wv,Gue),e(Gue,djo),e(eo,cjo),M(Av,eo,null),b(m,cze,_),b(m,od,_),e(od,Lv),e(Lv,Oue),M(l8,Oue,null),e(od,mjo),e(od,Vue),e(Vue,fjo),b(m,mze,_),b(m,Bo,_),M(i8,Bo,null),e(Bo,gjo),e(Bo,rd),e(rd,hjo),e(rd,WV),e(WV,ujo),e(rd,pjo),e(rd,QV),e(QV,_jo),e(rd,bjo),e(Bo,vjo),e(Bo,d8),e(d8,Fjo),e(d8,Xue),e(Xue,Tjo),e(d8,Mjo),e(Bo,Ejo),e(Bo,ft),M(c8,ft,null),e(ft,Cjo),e(ft,zue),e(zue,wjo),e(ft,Ajo),e(ft,td),e(td,Ljo),e(td,Wue),e(Wue,yjo),e(td,xjo),e(td,HV),e(HV,$jo),e(td,kjo),e(ft,Sjo),M(yv,ft,null),e(Bo,Rjo),e(Bo,oo),M(m8,oo,null),e(oo,Pjo),e(oo,Que),e(Que,Bjo),e(oo,Ijo),e(oo,Da),e(Da,Njo),e(Da,Hue),e(Hue,qjo),e(Da,jjo),e(Da,Uue),e(Uue,Djo),e(Da,Gjo),e(Da,Jue),e(Jue,Ojo),e(Da,Vjo),e(oo,Xjo),e(oo,fe),e(fe,xv),e(xv,Yue),e(Yue,zjo),e(xv,Wjo),e(xv,UV),e(UV,Qjo),e(xv,Hjo),e(fe,Ujo),e(fe,$v),e($v,Kue),e(Kue,Jjo),e($v,Yjo),e($v,JV),e(JV,Kjo),e($v,Zjo),e(fe,eDo),e(fe,kv),e(kv,Zue),e(Zue,oDo),e(kv,rDo),e(kv,YV),e(YV,tDo),e(kv,aDo),e(fe,nDo),e(fe,Sv),e(Sv,epe),e(epe,sDo),e(Sv,lDo),e(Sv,KV),e(KV,iDo),e(Sv,dDo),e(fe,cDo),e(fe,Rv),e(Rv,ope),e(ope,mDo),e(Rv,fDo),e(Rv,ZV),e(ZV,gDo),e(Rv,hDo),e(fe,uDo),e(fe,Pv),e(Pv,rpe),e(rpe,pDo),e(Pv,_Do),e(Pv,eX),e(eX,bDo),e(Pv,vDo),e(fe,FDo),e(fe,Bv),e(Bv,tpe),e(tpe,TDo),e(Bv,MDo),e(Bv,oX),e(oX,EDo),e(Bv,CDo),e(fe,wDo),e(fe,Iv),e(Iv,ape),e(ape,ADo),e(Iv,LDo),e(Iv,rX),e(rX,yDo),e(Iv,xDo),e(fe,$Do),e(fe,Nv),e(Nv,npe),e(npe,kDo),e(Nv,SDo),e(Nv,tX),e(tX,RDo),e(Nv,PDo),e(fe,BDo),e(fe,qv),e(qv,spe),e(spe,IDo),e(qv,NDo),e(qv,aX),e(aX,qDo),e(qv,jDo),e(fe,DDo),e(fe,jv),e(jv,lpe),e(lpe,GDo),e(jv,ODo),e(jv,nX),e(nX,VDo),e(jv,XDo),e(fe,zDo),e(fe,Dv),e(Dv,ipe),e(ipe,WDo),e(Dv,QDo),e(Dv,sX),e(sX,HDo),e(Dv,UDo),e(fe,JDo),e(fe,Gv),e(Gv,dpe),e(dpe,YDo),e(Gv,KDo),e(Gv,lX),e(lX,ZDo),e(Gv,eGo),e(fe,oGo),e(fe,Ov),e(Ov,cpe),e(cpe,rGo),e(Ov,tGo),e(Ov,iX),e(iX,aGo),e(Ov,nGo),e(fe,sGo),e(fe,Vv),e(Vv,mpe),e(mpe,lGo),e(Vv,iGo),e(Vv,dX),e(dX,dGo),e(Vv,cGo),e(fe,mGo),e(fe,Xv),e(Xv,fpe),e(fpe,fGo),e(Xv,gGo),e(Xv,cX),e(cX,hGo),e(Xv,uGo),e(fe,pGo),e(fe,zv),e(zv,gpe),e(gpe,_Go),e(zv,bGo),e(zv,mX),e(mX,vGo),e(zv,FGo),e(fe,TGo),e(fe,Wv),e(Wv,hpe),e(hpe,MGo),e(Wv,EGo),e(Wv,fX),e(fX,CGo),e(Wv,wGo),e(fe,AGo),e(fe,Qv),e(Qv,upe),e(upe,LGo),e(Qv,yGo),e(Qv,gX),e(gX,xGo),e(Qv,$Go),e(oo,kGo),e(oo,Hv),e(Hv,SGo),e(Hv,ppe),e(ppe,RGo),e(Hv,PGo),e(Hv,_pe),e(_pe,BGo),e(oo,IGo),M(Uv,oo,null),b(m,fze,_),b(m,ad,_),e(ad,Jv),e(Jv,bpe),M(f8,bpe,null),e(ad,NGo),e(ad,vpe),e(vpe,qGo),b(m,gze,_),b(m,Io,_),M(g8,Io,null),e(Io,jGo),e(Io,nd),e(nd,DGo),e(nd,hX),e(hX,GGo),e(nd,OGo),e(nd,uX),e(uX,VGo),e(nd,XGo),e(Io,zGo),e(Io,h8),e(h8,WGo),e(h8,Fpe),e(Fpe,QGo),e(h8,HGo),e(Io,UGo),e(Io,gt),M(u8,gt,null),e(gt,JGo),e(gt,Tpe),e(Tpe,YGo),e(gt,KGo),e(gt,sd),e(sd,ZGo),e(sd,Mpe),e(Mpe,eOo),e(sd,oOo),e(sd,pX),e(pX,rOo),e(sd,tOo),e(gt,aOo),M(Yv,gt,null),e(Io,nOo),e(Io,ro),M(p8,ro,null),e(ro,sOo),e(ro,Epe),e(Epe,lOo),e(ro,iOo),e(ro,Ga),e(Ga,dOo),e(Ga,Cpe),e(Cpe,cOo),e(Ga,mOo),e(Ga,wpe),e(wpe,fOo),e(Ga,gOo),e(Ga,Ape),e(Ape,hOo),e(Ga,uOo),e(ro,pOo),e(ro,B),e(B,Kv),e(Kv,Lpe),e(Lpe,_Oo),e(Kv,bOo),e(Kv,_X),e(_X,vOo),e(Kv,FOo),e(B,TOo),e(B,Zv),e(Zv,ype),e(ype,MOo),e(Zv,EOo),e(Zv,bX),e(bX,COo),e(Zv,wOo),e(B,AOo),e(B,e1),e(e1,xpe),e(xpe,LOo),e(e1,yOo),e(e1,vX),e(vX,xOo),e(e1,$Oo),e(B,kOo),e(B,o1),e(o1,$pe),e($pe,SOo),e(o1,ROo),e(o1,FX),e(FX,POo),e(o1,BOo),e(B,IOo),e(B,r1),e(r1,kpe),e(kpe,NOo),e(r1,qOo),e(r1,TX),e(TX,jOo),e(r1,DOo),e(B,GOo),e(B,t1),e(t1,Spe),e(Spe,OOo),e(t1,VOo),e(t1,MX),e(MX,XOo),e(t1,zOo),e(B,WOo),e(B,a1),e(a1,Rpe),e(Rpe,QOo),e(a1,HOo),e(a1,EX),e(EX,UOo),e(a1,JOo),e(B,YOo),e(B,n1),e(n1,Ppe),e(Ppe,KOo),e(n1,ZOo),e(n1,CX),e(CX,eVo),e(n1,oVo),e(B,rVo),e(B,s1),e(s1,Bpe),e(Bpe,tVo),e(s1,aVo),e(s1,wX),e(wX,nVo),e(s1,sVo),e(B,lVo),e(B,l1),e(l1,Ipe),e(Ipe,iVo),e(l1,dVo),e(l1,AX),e(AX,cVo),e(l1,mVo),e(B,fVo),e(B,i1),e(i1,Npe),e(Npe,gVo),e(i1,hVo),e(i1,LX),e(LX,uVo),e(i1,pVo),e(B,_Vo),e(B,d1),e(d1,qpe),e(qpe,bVo),e(d1,vVo),e(d1,yX),e(yX,FVo),e(d1,TVo),e(B,MVo),e(B,c1),e(c1,jpe),e(jpe,EVo),e(c1,CVo),e(c1,xX),e(xX,wVo),e(c1,AVo),e(B,LVo),e(B,m1),e(m1,Dpe),e(Dpe,yVo),e(m1,xVo),e(m1,$X),e($X,$Vo),e(m1,kVo),e(B,SVo),e(B,f1),e(f1,Gpe),e(Gpe,RVo),e(f1,PVo),e(f1,kX),e(kX,BVo),e(f1,IVo),e(B,NVo),e(B,g1),e(g1,Ope),e(Ope,qVo),e(g1,jVo),e(g1,SX),e(SX,DVo),e(g1,GVo),e(B,OVo),e(B,h1),e(h1,Vpe),e(Vpe,VVo),e(h1,XVo),e(h1,RX),e(RX,zVo),e(h1,WVo),e(B,QVo),e(B,u1),e(u1,Xpe),e(Xpe,HVo),e(u1,UVo),e(u1,PX),e(PX,JVo),e(u1,YVo),e(B,KVo),e(B,p1),e(p1,zpe),e(zpe,ZVo),e(p1,eXo),e(p1,BX),e(BX,oXo),e(p1,rXo),e(B,tXo),e(B,_1),e(_1,Wpe),e(Wpe,aXo),e(_1,nXo),e(_1,IX),e(IX,sXo),e(_1,lXo),e(B,iXo),e(B,b1),e(b1,Qpe),e(Qpe,dXo),e(b1,cXo),e(b1,NX),e(NX,mXo),e(b1,fXo),e(B,gXo),e(B,v1),e(v1,Hpe),e(Hpe,hXo),e(v1,uXo),e(v1,qX),e(qX,pXo),e(v1,_Xo),e(B,bXo),e(B,F1),e(F1,Upe),e(Upe,vXo),e(F1,FXo),e(F1,jX),e(jX,TXo),e(F1,MXo),e(B,EXo),e(B,T1),e(T1,Jpe),e(Jpe,CXo),e(T1,wXo),e(T1,DX),e(DX,AXo),e(T1,LXo),e(B,yXo),e(B,M1),e(M1,Ype),e(Ype,xXo),e(M1,$Xo),e(M1,GX),e(GX,kXo),e(M1,SXo),e(B,RXo),e(B,E1),e(E1,Kpe),e(Kpe,PXo),e(E1,BXo),e(E1,OX),e(OX,IXo),e(E1,NXo),e(B,qXo),e(B,C1),e(C1,Zpe),e(Zpe,jXo),e(C1,DXo),e(C1,VX),e(VX,GXo),e(C1,OXo),e(B,VXo),e(B,w1),e(w1,e_e),e(e_e,XXo),e(w1,zXo),e(w1,XX),e(XX,WXo),e(w1,QXo),e(B,HXo),e(B,A1),e(A1,o_e),e(o_e,UXo),e(A1,JXo),e(A1,zX),e(zX,YXo),e(A1,KXo),e(B,ZXo),e(B,L1),e(L1,r_e),e(r_e,ezo),e(L1,ozo),e(L1,WX),e(WX,rzo),e(L1,tzo),e(B,azo),e(B,y1),e(y1,t_e),e(t_e,nzo),e(y1,szo),e(y1,QX),e(QX,lzo),e(y1,izo),e(B,dzo),e(B,x1),e(x1,a_e),e(a_e,czo),e(x1,mzo),e(x1,HX),e(HX,fzo),e(x1,gzo),e(B,hzo),e(B,$1),e($1,n_e),e(n_e,uzo),e($1,pzo),e($1,UX),e(UX,_zo),e($1,bzo),e(B,vzo),e(B,k1),e(k1,s_e),e(s_e,Fzo),e(k1,Tzo),e(k1,JX),e(JX,Mzo),e(k1,Ezo),e(B,Czo),e(B,S1),e(S1,l_e),e(l_e,wzo),e(S1,Azo),e(S1,YX),e(YX,Lzo),e(S1,yzo),e(B,xzo),e(B,R1),e(R1,i_e),e(i_e,$zo),e(R1,kzo),e(R1,KX),e(KX,Szo),e(R1,Rzo),e(B,Pzo),e(B,P1),e(P1,d_e),e(d_e,Bzo),e(P1,Izo),e(P1,ZX),e(ZX,Nzo),e(P1,qzo),e(B,jzo),e(B,B1),e(B1,c_e),e(c_e,Dzo),e(B1,Gzo),e(B1,ez),e(ez,Ozo),e(B1,Vzo),e(B,Xzo),e(B,I1),e(I1,m_e),e(m_e,zzo),e(I1,Wzo),e(I1,oz),e(oz,Qzo),e(I1,Hzo),e(B,Uzo),e(B,N1),e(N1,f_e),e(f_e,Jzo),e(N1,Yzo),e(N1,rz),e(rz,Kzo),e(N1,Zzo),e(B,eWo),e(B,q1),e(q1,g_e),e(g_e,oWo),e(q1,rWo),e(q1,tz),e(tz,tWo),e(q1,aWo),e(B,nWo),e(B,j1),e(j1,h_e),e(h_e,sWo),e(j1,lWo),e(j1,az),e(az,iWo),e(j1,dWo),e(B,cWo),e(B,D1),e(D1,u_e),e(u_e,mWo),e(D1,fWo),e(D1,nz),e(nz,gWo),e(D1,hWo),e(B,uWo),e(B,G1),e(G1,p_e),e(p_e,pWo),e(G1,_Wo),e(G1,sz),e(sz,bWo),e(G1,vWo),e(B,FWo),e(B,O1),e(O1,__e),e(__e,TWo),e(O1,MWo),e(O1,lz),e(lz,EWo),e(O1,CWo),e(B,wWo),e(B,V1),e(V1,b_e),e(b_e,AWo),e(V1,LWo),e(V1,iz),e(iz,yWo),e(V1,xWo),e(B,$Wo),e(B,X1),e(X1,v_e),e(v_e,kWo),e(X1,SWo),e(X1,dz),e(dz,RWo),e(X1,PWo),e(B,BWo),e(B,z1),e(z1,F_e),e(F_e,IWo),e(z1,NWo),e(z1,cz),e(cz,qWo),e(z1,jWo),e(B,DWo),e(B,W1),e(W1,T_e),e(T_e,GWo),e(W1,OWo),e(W1,mz),e(mz,VWo),e(W1,XWo),e(B,zWo),e(B,Q1),e(Q1,M_e),e(M_e,WWo),e(Q1,QWo),e(Q1,fz),e(fz,HWo),e(Q1,UWo),e(B,JWo),e(B,H1),e(H1,E_e),e(E_e,YWo),e(H1,KWo),e(H1,gz),e(gz,ZWo),e(H1,eQo),e(ro,oQo),e(ro,U1),e(U1,rQo),e(U1,C_e),e(C_e,tQo),e(U1,aQo),e(U1,w_e),e(w_e,nQo),e(ro,sQo),M(J1,ro,null),b(m,hze,_),b(m,ld,_),e(ld,Y1),e(Y1,A_e),M(_8,A_e,null),e(ld,lQo),e(ld,L_e),e(L_e,iQo),b(m,uze,_),b(m,No,_),M(b8,No,null),e(No,dQo),e(No,id),e(id,cQo),e(id,hz),e(hz,mQo),e(id,fQo),e(id,uz),e(uz,gQo),e(id,hQo),e(No,uQo),e(No,v8),e(v8,pQo),e(v8,y_e),e(y_e,_Qo),e(v8,bQo),e(No,vQo),e(No,ht),M(F8,ht,null),e(ht,FQo),e(ht,x_e),e(x_e,TQo),e(ht,MQo),e(ht,dd),e(dd,EQo),e(dd,$_e),e($_e,CQo),e(dd,wQo),e(dd,pz),e(pz,AQo),e(dd,LQo),e(ht,yQo),M(K1,ht,null),e(No,xQo),e(No,to),M(T8,to,null),e(to,$Qo),e(to,k_e),e(k_e,kQo),e(to,SQo),e(to,Oa),e(Oa,RQo),e(Oa,S_e),e(S_e,PQo),e(Oa,BQo),e(Oa,R_e),e(R_e,IQo),e(Oa,NQo),e(Oa,P_e),e(P_e,qQo),e(Oa,jQo),e(to,DQo),e(to,Z),e(Z,Z1),e(Z1,B_e),e(B_e,GQo),e(Z1,OQo),e(Z1,_z),e(_z,VQo),e(Z1,XQo),e(Z,zQo),e(Z,eF),e(eF,I_e),e(I_e,WQo),e(eF,QQo),e(eF,bz),e(bz,HQo),e(eF,UQo),e(Z,JQo),e(Z,oF),e(oF,N_e),e(N_e,YQo),e(oF,KQo),e(oF,vz),e(vz,ZQo),e(oF,eHo),e(Z,oHo),e(Z,rF),e(rF,q_e),e(q_e,rHo),e(rF,tHo),e(rF,Fz),e(Fz,aHo),e(rF,nHo),e(Z,sHo),e(Z,tF),e(tF,j_e),e(j_e,lHo),e(tF,iHo),e(tF,Tz),e(Tz,dHo),e(tF,cHo),e(Z,mHo),e(Z,aF),e(aF,D_e),e(D_e,fHo),e(aF,gHo),e(aF,Mz),e(Mz,hHo),e(aF,uHo),e(Z,pHo),e(Z,nF),e(nF,G_e),e(G_e,_Ho),e(nF,bHo),e(nF,Ez),e(Ez,vHo),e(nF,FHo),e(Z,THo),e(Z,sF),e(sF,O_e),e(O_e,MHo),e(sF,EHo),e(sF,Cz),e(Cz,CHo),e(sF,wHo),e(Z,AHo),e(Z,lF),e(lF,V_e),e(V_e,LHo),e(lF,yHo),e(lF,wz),e(wz,xHo),e(lF,$Ho),e(Z,kHo),e(Z,iF),e(iF,X_e),e(X_e,SHo),e(iF,RHo),e(iF,Az),e(Az,PHo),e(iF,BHo),e(Z,IHo),e(Z,dF),e(dF,z_e),e(z_e,NHo),e(dF,qHo),e(dF,Lz),e(Lz,jHo),e(dF,DHo),e(Z,GHo),e(Z,cF),e(cF,W_e),e(W_e,OHo),e(cF,VHo),e(cF,yz),e(yz,XHo),e(cF,zHo),e(Z,WHo),e(Z,mF),e(mF,Q_e),e(Q_e,QHo),e(mF,HHo),e(mF,xz),e(xz,UHo),e(mF,JHo),e(Z,YHo),e(Z,fF),e(fF,H_e),e(H_e,KHo),e(fF,ZHo),e(fF,$z),e($z,eUo),e(fF,oUo),e(Z,rUo),e(Z,gF),e(gF,U_e),e(U_e,tUo),e(gF,aUo),e(gF,kz),e(kz,nUo),e(gF,sUo),e(Z,lUo),e(Z,hF),e(hF,J_e),e(J_e,iUo),e(hF,dUo),e(hF,Sz),e(Sz,cUo),e(hF,mUo),e(Z,fUo),e(Z,uF),e(uF,Y_e),e(Y_e,gUo),e(uF,hUo),e(uF,Rz),e(Rz,uUo),e(uF,pUo),e(Z,_Uo),e(Z,pF),e(pF,K_e),e(K_e,bUo),e(pF,vUo),e(pF,Pz),e(Pz,FUo),e(pF,TUo),e(Z,MUo),e(Z,_F),e(_F,Z_e),e(Z_e,EUo),e(_F,CUo),e(_F,Bz),e(Bz,wUo),e(_F,AUo),e(Z,LUo),e(Z,bF),e(bF,e2e),e(e2e,yUo),e(bF,xUo),e(bF,Iz),e(Iz,$Uo),e(bF,kUo),e(Z,SUo),e(Z,vF),e(vF,o2e),e(o2e,RUo),e(vF,PUo),e(vF,Nz),e(Nz,BUo),e(vF,IUo),e(Z,NUo),e(Z,FF),e(FF,r2e),e(r2e,qUo),e(FF,jUo),e(FF,qz),e(qz,DUo),e(FF,GUo),e(Z,OUo),e(Z,TF),e(TF,t2e),e(t2e,VUo),e(TF,XUo),e(TF,jz),e(jz,zUo),e(TF,WUo),e(Z,QUo),e(Z,MF),e(MF,a2e),e(a2e,HUo),e(MF,UUo),e(MF,Dz),e(Dz,JUo),e(MF,YUo),e(Z,KUo),e(Z,EF),e(EF,n2e),e(n2e,ZUo),e(EF,eJo),e(EF,Gz),e(Gz,oJo),e(EF,rJo),e(Z,tJo),e(Z,CF),e(CF,s2e),e(s2e,aJo),e(CF,nJo),e(CF,Oz),e(Oz,sJo),e(CF,lJo),e(Z,iJo),e(Z,wF),e(wF,l2e),e(l2e,dJo),e(wF,cJo),e(wF,Vz),e(Vz,mJo),e(wF,fJo),e(Z,gJo),e(Z,AF),e(AF,i2e),e(i2e,hJo),e(AF,uJo),e(AF,Xz),e(Xz,pJo),e(AF,_Jo),e(Z,bJo),e(Z,LF),e(LF,d2e),e(d2e,vJo),e(LF,FJo),e(LF,zz),e(zz,TJo),e(LF,MJo),e(Z,EJo),e(Z,yF),e(yF,c2e),e(c2e,CJo),e(yF,wJo),e(yF,Wz),e(Wz,AJo),e(yF,LJo),e(to,yJo),e(to,xF),e(xF,xJo),e(xF,m2e),e(m2e,$Jo),e(xF,kJo),e(xF,f2e),e(f2e,SJo),e(to,RJo),M($F,to,null),b(m,pze,_),b(m,cd,_),e(cd,kF),e(kF,g2e),M(M8,g2e,null),e(cd,PJo),e(cd,h2e),e(h2e,BJo),b(m,_ze,_),b(m,qo,_),M(E8,qo,null),e(qo,IJo),e(qo,md),e(md,NJo),e(md,Qz),e(Qz,qJo),e(md,jJo),e(md,Hz),e(Hz,DJo),e(md,GJo),e(qo,OJo),e(qo,C8),e(C8,VJo),e(C8,u2e),e(u2e,XJo),e(C8,zJo),e(qo,WJo),e(qo,ut),M(w8,ut,null),e(ut,QJo),e(ut,p2e),e(p2e,HJo),e(ut,UJo),e(ut,fd),e(fd,JJo),e(fd,_2e),e(_2e,YJo),e(fd,KJo),e(fd,Uz),e(Uz,ZJo),e(fd,eYo),e(ut,oYo),M(SF,ut,null),e(qo,rYo),e(qo,ao),M(A8,ao,null),e(ao,tYo),e(ao,b2e),e(b2e,aYo),e(ao,nYo),e(ao,Va),e(Va,sYo),e(Va,v2e),e(v2e,lYo),e(Va,iYo),e(Va,F2e),e(F2e,dYo),e(Va,cYo),e(Va,T2e),e(T2e,mYo),e(Va,fYo),e(ao,gYo),e(ao,jo),e(jo,RF),e(RF,M2e),e(M2e,hYo),e(RF,uYo),e(RF,Jz),e(Jz,pYo),e(RF,_Yo),e(jo,bYo),e(jo,PF),e(PF,E2e),e(E2e,vYo),e(PF,FYo),e(PF,Yz),e(Yz,TYo),e(PF,MYo),e(jo,EYo),e(jo,BF),e(BF,C2e),e(C2e,CYo),e(BF,wYo),e(BF,Kz),e(Kz,AYo),e(BF,LYo),e(jo,yYo),e(jo,IF),e(IF,w2e),e(w2e,xYo),e(IF,$Yo),e(IF,Zz),e(Zz,kYo),e(IF,SYo),e(jo,RYo),e(jo,NF),e(NF,A2e),e(A2e,PYo),e(NF,BYo),e(NF,eW),e(eW,IYo),e(NF,NYo),e(jo,qYo),e(jo,qF),e(qF,L2e),e(L2e,jYo),e(qF,DYo),e(qF,oW),e(oW,GYo),e(qF,OYo),e(ao,VYo),e(ao,jF),e(jF,XYo),e(jF,y2e),e(y2e,zYo),e(jF,WYo),e(jF,x2e),e(x2e,QYo),e(ao,HYo),M(DF,ao,null),b(m,bze,_),b(m,gd,_),e(gd,GF),e(GF,$2e),M(L8,$2e,null),e(gd,UYo),e(gd,k2e),e(k2e,JYo),b(m,vze,_),b(m,Do,_),M(y8,Do,null),e(Do,YYo),e(Do,hd),e(hd,KYo),e(hd,rW),e(rW,ZYo),e(hd,eKo),e(hd,tW),e(tW,oKo),e(hd,rKo),e(Do,tKo),e(Do,x8),e(x8,aKo),e(x8,S2e),e(S2e,nKo),e(x8,sKo),e(Do,lKo),e(Do,pt),M($8,pt,null),e(pt,iKo),e(pt,R2e),e(R2e,dKo),e(pt,cKo),e(pt,ud),e(ud,mKo),e(ud,P2e),e(P2e,fKo),e(ud,gKo),e(ud,aW),e(aW,hKo),e(ud,uKo),e(pt,pKo),M(OF,pt,null),e(Do,_Ko),e(Do,no),M(k8,no,null),e(no,bKo),e(no,B2e),e(B2e,vKo),e(no,FKo),e(no,Xa),e(Xa,TKo),e(Xa,I2e),e(I2e,MKo),e(Xa,EKo),e(Xa,N2e),e(N2e,CKo),e(Xa,wKo),e(Xa,q2e),e(q2e,AKo),e(Xa,LKo),e(no,yKo),e(no,U),e(U,VF),e(VF,j2e),e(j2e,xKo),e(VF,$Ko),e(VF,nW),e(nW,kKo),e(VF,SKo),e(U,RKo),e(U,XF),e(XF,D2e),e(D2e,PKo),e(XF,BKo),e(XF,sW),e(sW,IKo),e(XF,NKo),e(U,qKo),e(U,zF),e(zF,G2e),e(G2e,jKo),e(zF,DKo),e(zF,lW),e(lW,GKo),e(zF,OKo),e(U,VKo),e(U,WF),e(WF,O2e),e(O2e,XKo),e(WF,zKo),e(WF,iW),e(iW,WKo),e(WF,QKo),e(U,HKo),e(U,QF),e(QF,V2e),e(V2e,UKo),e(QF,JKo),e(QF,dW),e(dW,YKo),e(QF,KKo),e(U,ZKo),e(U,HF),e(HF,X2e),e(X2e,eZo),e(HF,oZo),e(HF,cW),e(cW,rZo),e(HF,tZo),e(U,aZo),e(U,UF),e(UF,z2e),e(z2e,nZo),e(UF,sZo),e(UF,mW),e(mW,lZo),e(UF,iZo),e(U,dZo),e(U,JF),e(JF,W2e),e(W2e,cZo),e(JF,mZo),e(JF,fW),e(fW,fZo),e(JF,gZo),e(U,hZo),e(U,YF),e(YF,Q2e),e(Q2e,uZo),e(YF,pZo),e(YF,gW),e(gW,_Zo),e(YF,bZo),e(U,vZo),e(U,KF),e(KF,H2e),e(H2e,FZo),e(KF,TZo),e(KF,hW),e(hW,MZo),e(KF,EZo),e(U,CZo),e(U,ZF),e(ZF,U2e),e(U2e,wZo),e(ZF,AZo),e(ZF,uW),e(uW,LZo),e(ZF,yZo),e(U,xZo),e(U,eT),e(eT,J2e),e(J2e,$Zo),e(eT,kZo),e(eT,pW),e(pW,SZo),e(eT,RZo),e(U,PZo),e(U,oT),e(oT,Y2e),e(Y2e,BZo),e(oT,IZo),e(oT,_W),e(_W,NZo),e(oT,qZo),e(U,jZo),e(U,rT),e(rT,K2e),e(K2e,DZo),e(rT,GZo),e(rT,bW),e(bW,OZo),e(rT,VZo),e(U,XZo),e(U,tT),e(tT,Z2e),e(Z2e,zZo),e(tT,WZo),e(tT,vW),e(vW,QZo),e(tT,HZo),e(U,UZo),e(U,aT),e(aT,ebe),e(ebe,JZo),e(aT,YZo),e(aT,FW),e(FW,KZo),e(aT,ZZo),e(U,eer),e(U,nT),e(nT,obe),e(obe,oer),e(nT,rer),e(nT,TW),e(TW,ter),e(nT,aer),e(U,ner),e(U,sT),e(sT,rbe),e(rbe,ser),e(sT,ler),e(sT,MW),e(MW,ier),e(sT,der),e(U,cer),e(U,lT),e(lT,tbe),e(tbe,mer),e(lT,fer),e(lT,EW),e(EW,ger),e(lT,her),e(U,uer),e(U,iT),e(iT,abe),e(abe,per),e(iT,_er),e(iT,CW),e(CW,ber),e(iT,ver),e(U,Fer),e(U,dT),e(dT,nbe),e(nbe,Ter),e(dT,Mer),e(dT,wW),e(wW,Eer),e(dT,Cer),e(U,wer),e(U,cT),e(cT,sbe),e(sbe,Aer),e(cT,Ler),e(cT,AW),e(AW,yer),e(cT,xer),e(U,$er),e(U,mT),e(mT,lbe),e(lbe,ker),e(mT,Ser),e(mT,LW),e(LW,Rer),e(mT,Per),e(U,Ber),e(U,fT),e(fT,ibe),e(ibe,Ier),e(fT,Ner),e(fT,yW),e(yW,qer),e(fT,jer),e(U,Der),e(U,gT),e(gT,dbe),e(dbe,Ger),e(gT,Oer),e(gT,xW),e(xW,Ver),e(gT,Xer),e(U,zer),e(U,hT),e(hT,cbe),e(cbe,Wer),e(hT,Qer),e(hT,$W),e($W,Her),e(hT,Uer),e(U,Jer),e(U,uT),e(uT,mbe),e(mbe,Yer),e(uT,Ker),e(uT,kW),e(kW,Zer),e(uT,eor),e(U,oor),e(U,pT),e(pT,fbe),e(fbe,ror),e(pT,tor),e(pT,SW),e(SW,aor),e(pT,nor),e(U,sor),e(U,_T),e(_T,gbe),e(gbe,lor),e(_T,ior),e(_T,RW),e(RW,dor),e(_T,cor),e(U,mor),e(U,bT),e(bT,hbe),e(hbe,gor),e(bT,hor),e(bT,PW),e(PW,uor),e(bT,por),e(U,_or),e(U,vT),e(vT,ube),e(ube,bor),e(vT,vor),e(vT,BW),e(BW,For),e(vT,Tor),e(U,Mor),e(U,FT),e(FT,pbe),e(pbe,Eor),e(FT,Cor),e(FT,IW),e(IW,wor),e(FT,Aor),e(U,Lor),e(U,TT),e(TT,_be),e(_be,yor),e(TT,xor),e(TT,NW),e(NW,$or),e(TT,kor),e(U,Sor),e(U,MT),e(MT,bbe),e(bbe,Ror),e(MT,Por),e(MT,qW),e(qW,Bor),e(MT,Ior),e(U,Nor),e(U,ET),e(ET,vbe),e(vbe,qor),e(ET,jor),e(ET,jW),e(jW,Dor),e(ET,Gor),e(U,Oor),e(U,CT),e(CT,Fbe),e(Fbe,Vor),e(CT,Xor),e(CT,DW),e(DW,zor),e(CT,Wor),e(no,Qor),e(no,wT),e(wT,Hor),e(wT,Tbe),e(Tbe,Uor),e(wT,Jor),e(wT,Mbe),e(Mbe,Yor),e(no,Kor),M(AT,no,null),b(m,Fze,_),b(m,pd,_),e(pd,LT),e(LT,Ebe),M(S8,Ebe,null),e(pd,Zor),e(pd,Cbe),e(Cbe,err),b(m,Tze,_),b(m,Go,_),M(R8,Go,null),e(Go,orr),e(Go,_d),e(_d,rrr),e(_d,GW),e(GW,trr),e(_d,arr),e(_d,OW),e(OW,nrr),e(_d,srr),e(Go,lrr),e(Go,P8),e(P8,irr),e(P8,wbe),e(wbe,drr),e(P8,crr),e(Go,mrr),e(Go,_t),M(B8,_t,null),e(_t,frr),e(_t,Abe),e(Abe,grr),e(_t,hrr),e(_t,bd),e(bd,urr),e(bd,Lbe),e(Lbe,prr),e(bd,_rr),e(bd,VW),e(VW,brr),e(bd,vrr),e(_t,Frr),M(yT,_t,null),e(Go,Trr),e(Go,so),M(I8,so,null),e(so,Mrr),e(so,ybe),e(ybe,Err),e(so,Crr),e(so,za),e(za,wrr),e(za,xbe),e(xbe,Arr),e(za,Lrr),e(za,$be),e($be,yrr),e(za,xrr),e(za,kbe),e(kbe,$rr),e(za,krr),e(so,Srr),e(so,V),e(V,xT),e(xT,Sbe),e(Sbe,Rrr),e(xT,Prr),e(xT,XW),e(XW,Brr),e(xT,Irr),e(V,Nrr),e(V,$T),e($T,Rbe),e(Rbe,qrr),e($T,jrr),e($T,zW),e(zW,Drr),e($T,Grr),e(V,Orr),e(V,kT),e(kT,Pbe),e(Pbe,Vrr),e(kT,Xrr),e(kT,WW),e(WW,zrr),e(kT,Wrr),e(V,Qrr),e(V,ST),e(ST,Bbe),e(Bbe,Hrr),e(ST,Urr),e(ST,QW),e(QW,Jrr),e(ST,Yrr),e(V,Krr),e(V,RT),e(RT,Ibe),e(Ibe,Zrr),e(RT,etr),e(RT,HW),e(HW,otr),e(RT,rtr),e(V,ttr),e(V,PT),e(PT,Nbe),e(Nbe,atr),e(PT,ntr),e(PT,UW),e(UW,str),e(PT,ltr),e(V,itr),e(V,BT),e(BT,qbe),e(qbe,dtr),e(BT,ctr),e(BT,JW),e(JW,mtr),e(BT,ftr),e(V,gtr),e(V,IT),e(IT,jbe),e(jbe,htr),e(IT,utr),e(IT,YW),e(YW,ptr),e(IT,_tr),e(V,btr),e(V,NT),e(NT,Dbe),e(Dbe,vtr),e(NT,Ftr),e(NT,KW),e(KW,Ttr),e(NT,Mtr),e(V,Etr),e(V,qT),e(qT,Gbe),e(Gbe,Ctr),e(qT,wtr),e(qT,ZW),e(ZW,Atr),e(qT,Ltr),e(V,ytr),e(V,jT),e(jT,Obe),e(Obe,xtr),e(jT,$tr),e(jT,eQ),e(eQ,ktr),e(jT,Str),e(V,Rtr),e(V,DT),e(DT,Vbe),e(Vbe,Ptr),e(DT,Btr),e(DT,oQ),e(oQ,Itr),e(DT,Ntr),e(V,qtr),e(V,GT),e(GT,Xbe),e(Xbe,jtr),e(GT,Dtr),e(GT,rQ),e(rQ,Gtr),e(GT,Otr),e(V,Vtr),e(V,OT),e(OT,zbe),e(zbe,Xtr),e(OT,ztr),e(OT,tQ),e(tQ,Wtr),e(OT,Qtr),e(V,Htr),e(V,VT),e(VT,Wbe),e(Wbe,Utr),e(VT,Jtr),e(VT,aQ),e(aQ,Ytr),e(VT,Ktr),e(V,Ztr),e(V,XT),e(XT,Qbe),e(Qbe,ear),e(XT,oar),e(XT,nQ),e(nQ,rar),e(XT,tar),e(V,aar),e(V,zT),e(zT,Hbe),e(Hbe,nar),e(zT,sar),e(zT,sQ),e(sQ,lar),e(zT,iar),e(V,dar),e(V,WT),e(WT,Ube),e(Ube,car),e(WT,mar),e(WT,lQ),e(lQ,far),e(WT,gar),e(V,har),e(V,QT),e(QT,Jbe),e(Jbe,uar),e(QT,par),e(QT,iQ),e(iQ,_ar),e(QT,bar),e(V,Far),e(V,HT),e(HT,Ybe),e(Ybe,Tar),e(HT,Mar),e(HT,dQ),e(dQ,Ear),e(HT,Car),e(V,war),e(V,UT),e(UT,Kbe),e(Kbe,Aar),e(UT,Lar),e(UT,cQ),e(cQ,yar),e(UT,xar),e(V,$ar),e(V,JT),e(JT,Zbe),e(Zbe,kar),e(JT,Sar),e(JT,mQ),e(mQ,Rar),e(JT,Par),e(V,Bar),e(V,YT),e(YT,eve),e(eve,Iar),e(YT,Nar),e(YT,fQ),e(fQ,qar),e(YT,jar),e(V,Dar),e(V,KT),e(KT,ove),e(ove,Gar),e(KT,Oar),e(KT,gQ),e(gQ,Var),e(KT,Xar),e(V,zar),e(V,ZT),e(ZT,rve),e(rve,War),e(ZT,Qar),e(ZT,hQ),e(hQ,Har),e(ZT,Uar),e(V,Jar),e(V,eM),e(eM,tve),e(tve,Yar),e(eM,Kar),e(eM,uQ),e(uQ,Zar),e(eM,enr),e(V,onr),e(V,oM),e(oM,ave),e(ave,rnr),e(oM,tnr),e(oM,pQ),e(pQ,anr),e(oM,nnr),e(V,snr),e(V,rM),e(rM,nve),e(nve,lnr),e(rM,inr),e(rM,_Q),e(_Q,dnr),e(rM,cnr),e(V,mnr),e(V,tM),e(tM,sve),e(sve,fnr),e(tM,gnr),e(tM,bQ),e(bQ,hnr),e(tM,unr),e(V,pnr),e(V,aM),e(aM,lve),e(lve,_nr),e(aM,bnr),e(aM,vQ),e(vQ,vnr),e(aM,Fnr),e(V,Tnr),e(V,nM),e(nM,ive),e(ive,Mnr),e(nM,Enr),e(nM,FQ),e(FQ,Cnr),e(nM,wnr),e(V,Anr),e(V,sM),e(sM,dve),e(dve,Lnr),e(sM,ynr),e(sM,TQ),e(TQ,xnr),e(sM,$nr),e(V,knr),e(V,lM),e(lM,cve),e(cve,Snr),e(lM,Rnr),e(lM,MQ),e(MQ,Pnr),e(lM,Bnr),e(V,Inr),e(V,iM),e(iM,mve),e(mve,Nnr),e(iM,qnr),e(iM,EQ),e(EQ,jnr),e(iM,Dnr),e(V,Gnr),e(V,dM),e(dM,fve),e(fve,Onr),e(dM,Vnr),e(dM,CQ),e(CQ,Xnr),e(dM,znr),e(V,Wnr),e(V,cM),e(cM,gve),e(gve,Qnr),e(cM,Hnr),e(cM,wQ),e(wQ,Unr),e(cM,Jnr),e(V,Ynr),e(V,mM),e(mM,hve),e(hve,Knr),e(mM,Znr),e(mM,AQ),e(AQ,esr),e(mM,osr),e(V,rsr),e(V,fM),e(fM,uve),e(uve,tsr),e(fM,asr),e(fM,LQ),e(LQ,nsr),e(fM,ssr),e(V,lsr),e(V,gM),e(gM,pve),e(pve,isr),e(gM,dsr),e(gM,yQ),e(yQ,csr),e(gM,msr),e(V,fsr),e(V,hM),e(hM,_ve),e(_ve,gsr),e(hM,hsr),e(hM,xQ),e(xQ,usr),e(hM,psr),e(V,_sr),e(V,uM),e(uM,bve),e(bve,bsr),e(uM,vsr),e(uM,$Q),e($Q,Fsr),e(uM,Tsr),e(V,Msr),e(V,pM),e(pM,vve),e(vve,Esr),e(pM,Csr),e(pM,kQ),e(kQ,wsr),e(pM,Asr),e(so,Lsr),e(so,_M),e(_M,ysr),e(_M,Fve),e(Fve,xsr),e(_M,$sr),e(_M,Tve),e(Tve,ksr),e(so,Ssr),M(bM,so,null),b(m,Mze,_),b(m,vd,_),e(vd,vM),e(vM,Mve),M(N8,Mve,null),e(vd,Rsr),e(vd,Eve),e(Eve,Psr),b(m,Eze,_),b(m,Oo,_),M(q8,Oo,null),e(Oo,Bsr),e(Oo,Fd),e(Fd,Isr),e(Fd,SQ),e(SQ,Nsr),e(Fd,qsr),e(Fd,RQ),e(RQ,jsr),e(Fd,Dsr),e(Oo,Gsr),e(Oo,j8),e(j8,Osr),e(j8,Cve),e(Cve,Vsr),e(j8,Xsr),e(Oo,zsr),e(Oo,bt),M(D8,bt,null),e(bt,Wsr),e(bt,wve),e(wve,Qsr),e(bt,Hsr),e(bt,Td),e(Td,Usr),e(Td,Ave),e(Ave,Jsr),e(Td,Ysr),e(Td,PQ),e(PQ,Ksr),e(Td,Zsr),e(bt,elr),M(FM,bt,null),e(Oo,olr),e(Oo,lo),M(G8,lo,null),e(lo,rlr),e(lo,Lve),e(Lve,tlr),e(lo,alr),e(lo,Wa),e(Wa,nlr),e(Wa,yve),e(yve,slr),e(Wa,llr),e(Wa,xve),e(xve,ilr),e(Wa,dlr),e(Wa,$ve),e($ve,clr),e(Wa,mlr),e(lo,flr),e(lo,kve),e(kve,TM),e(TM,Sve),e(Sve,glr),e(TM,hlr),e(TM,BQ),e(BQ,ulr),e(TM,plr),e(lo,_lr),e(lo,MM),e(MM,blr),e(MM,Rve),e(Rve,vlr),e(MM,Flr),e(MM,Pve),e(Pve,Tlr),e(lo,Mlr),M(EM,lo,null),b(m,Cze,_),b(m,Md,_),e(Md,CM),e(CM,Bve),M(O8,Bve,null),e(Md,Elr),e(Md,Ive),e(Ive,Clr),b(m,wze,_),b(m,Vo,_),M(V8,Vo,null),e(Vo,wlr),e(Vo,Ed),e(Ed,Alr),e(Ed,IQ),e(IQ,Llr),e(Ed,ylr),e(Ed,NQ),e(NQ,xlr),e(Ed,$lr),e(Vo,klr),e(Vo,X8),e(X8,Slr),e(X8,Nve),e(Nve,Rlr),e(X8,Plr),e(Vo,Blr),e(Vo,vt),M(z8,vt,null),e(vt,Ilr),e(vt,qve),e(qve,Nlr),e(vt,qlr),e(vt,Cd),e(Cd,jlr),e(Cd,jve),e(jve,Dlr),e(Cd,Glr),e(Cd,qQ),e(qQ,Olr),e(Cd,Vlr),e(vt,Xlr),M(wM,vt,null),e(Vo,zlr),e(Vo,io),M(W8,io,null),e(io,Wlr),e(io,Dve),e(Dve,Qlr),e(io,Hlr),e(io,Qa),e(Qa,Ulr),e(Qa,Gve),e(Gve,Jlr),e(Qa,Ylr),e(Qa,Ove),e(Ove,Klr),e(Qa,Zlr),e(Qa,Vve),e(Vve,eir),e(Qa,oir),e(io,rir),e(io,ve),e(ve,AM),e(AM,Xve),e(Xve,tir),e(AM,air),e(AM,jQ),e(jQ,nir),e(AM,sir),e(ve,lir),e(ve,LM),e(LM,zve),e(zve,iir),e(LM,dir),e(LM,DQ),e(DQ,cir),e(LM,mir),e(ve,fir),e(ve,yM),e(yM,Wve),e(Wve,gir),e(yM,hir),e(yM,GQ),e(GQ,uir),e(yM,pir),e(ve,_ir),e(ve,xM),e(xM,Qve),e(Qve,bir),e(xM,vir),e(xM,OQ),e(OQ,Fir),e(xM,Tir),e(ve,Mir),e(ve,Js),e(Js,Hve),e(Hve,Eir),e(Js,Cir),e(Js,VQ),e(VQ,wir),e(Js,Air),e(Js,XQ),e(XQ,Lir),e(Js,yir),e(ve,xir),e(ve,$M),e($M,Uve),e(Uve,$ir),e($M,kir),e($M,zQ),e(zQ,Sir),e($M,Rir),e(ve,Pir),e(ve,Ys),e(Ys,Jve),e(Jve,Bir),e(Ys,Iir),e(Ys,WQ),e(WQ,Nir),e(Ys,qir),e(Ys,QQ),e(QQ,jir),e(Ys,Dir),e(ve,Gir),e(ve,kM),e(kM,Yve),e(Yve,Oir),e(kM,Vir),e(kM,HQ),e(HQ,Xir),e(kM,zir),e(ve,Wir),e(ve,Ft),e(Ft,Kve),e(Kve,Qir),e(Ft,Hir),e(Ft,UQ),e(UQ,Uir),e(Ft,Jir),e(Ft,JQ),e(JQ,Yir),e(Ft,Kir),e(Ft,YQ),e(YQ,Zir),e(Ft,edr),e(ve,odr),e(ve,SM),e(SM,Zve),e(Zve,rdr),e(SM,tdr),e(SM,KQ),e(KQ,adr),e(SM,ndr),e(ve,sdr),e(ve,RM),e(RM,e1e),e(e1e,ldr),e(RM,idr),e(RM,ZQ),e(ZQ,ddr),e(RM,cdr),e(ve,mdr),e(ve,PM),e(PM,o1e),e(o1e,fdr),e(PM,gdr),e(PM,eH),e(eH,hdr),e(PM,udr),e(ve,pdr),e(ve,BM),e(BM,r1e),e(r1e,_dr),e(BM,bdr),e(BM,oH),e(oH,vdr),e(BM,Fdr),e(ve,Tdr),e(ve,IM),e(IM,t1e),e(t1e,Mdr),e(IM,Edr),e(IM,rH),e(rH,Cdr),e(IM,wdr),e(ve,Adr),e(ve,NM),e(NM,a1e),e(a1e,Ldr),e(NM,ydr),e(NM,tH),e(tH,xdr),e(NM,$dr),e(ve,kdr),e(ve,qM),e(qM,n1e),e(n1e,Sdr),e(qM,Rdr),e(qM,aH),e(aH,Pdr),e(qM,Bdr),e(io,Idr),e(io,jM),e(jM,Ndr),e(jM,s1e),e(s1e,qdr),e(jM,jdr),e(jM,l1e),e(l1e,Ddr),e(io,Gdr),M(DM,io,null),b(m,Aze,_),b(m,wd,_),e(wd,GM),e(GM,i1e),M(Q8,i1e,null),e(wd,Odr),e(wd,d1e),e(d1e,Vdr),b(m,Lze,_),b(m,Xo,_),M(H8,Xo,null),e(Xo,Xdr),e(Xo,Ad),e(Ad,zdr),e(Ad,nH),e(nH,Wdr),e(Ad,Qdr),e(Ad,sH),e(sH,Hdr),e(Ad,Udr),e(Xo,Jdr),e(Xo,U8),e(U8,Ydr),e(U8,c1e),e(c1e,Kdr),e(U8,Zdr),e(Xo,ecr),e(Xo,Tt),M(J8,Tt,null),e(Tt,ocr),e(Tt,m1e),e(m1e,rcr),e(Tt,tcr),e(Tt,Ld),e(Ld,acr),e(Ld,f1e),e(f1e,ncr),e(Ld,scr),e(Ld,lH),e(lH,lcr),e(Ld,icr),e(Tt,dcr),M(OM,Tt,null),e(Xo,ccr),e(Xo,co),M(Y8,co,null),e(co,mcr),e(co,g1e),e(g1e,fcr),e(co,gcr),e(co,Ha),e(Ha,hcr),e(Ha,h1e),e(h1e,ucr),e(Ha,pcr),e(Ha,u1e),e(u1e,_cr),e(Ha,bcr),e(Ha,p1e),e(p1e,vcr),e(Ha,Fcr),e(co,Tcr),e(co,_1e),e(_1e,VM),e(VM,b1e),e(b1e,Mcr),e(VM,Ecr),e(VM,iH),e(iH,Ccr),e(VM,wcr),e(co,Acr),e(co,XM),e(XM,Lcr),e(XM,v1e),e(v1e,ycr),e(XM,xcr),e(XM,F1e),e(F1e,$cr),e(co,kcr),M(zM,co,null),b(m,yze,_),b(m,yd,_),e(yd,WM),e(WM,T1e),M(K8,T1e,null),e(yd,Scr),e(yd,M1e),e(M1e,Rcr),b(m,xze,_),b(m,zo,_),M(Z8,zo,null),e(zo,Pcr),e(zo,xd),e(xd,Bcr),e(xd,dH),e(dH,Icr),e(xd,Ncr),e(xd,cH),e(cH,qcr),e(xd,jcr),e(zo,Dcr),e(zo,e9),e(e9,Gcr),e(e9,E1e),e(E1e,Ocr),e(e9,Vcr),e(zo,Xcr),e(zo,Mt),M(o9,Mt,null),e(Mt,zcr),e(Mt,C1e),e(C1e,Wcr),e(Mt,Qcr),e(Mt,$d),e($d,Hcr),e($d,w1e),e(w1e,Ucr),e($d,Jcr),e($d,mH),e(mH,Ycr),e($d,Kcr),e(Mt,Zcr),M(QM,Mt,null),e(zo,emr),e(zo,mo),M(r9,mo,null),e(mo,omr),e(mo,A1e),e(A1e,rmr),e(mo,tmr),e(mo,Ua),e(Ua,amr),e(Ua,L1e),e(L1e,nmr),e(Ua,smr),e(Ua,y1e),e(y1e,lmr),e(Ua,imr),e(Ua,x1e),e(x1e,dmr),e(Ua,cmr),e(mo,mmr),e(mo,$1e),e($1e,HM),e(HM,k1e),e(k1e,fmr),e(HM,gmr),e(HM,fH),e(fH,hmr),e(HM,umr),e(mo,pmr),e(mo,UM),e(UM,_mr),e(UM,S1e),e(S1e,bmr),e(UM,vmr),e(UM,R1e),e(R1e,Fmr),e(mo,Tmr),M(JM,mo,null),b(m,$ze,_),b(m,kd,_),e(kd,YM),e(YM,P1e),M(t9,P1e,null),e(kd,Mmr),e(kd,B1e),e(B1e,Emr),b(m,kze,_),b(m,Wo,_),M(a9,Wo,null),e(Wo,Cmr),e(Wo,Sd),e(Sd,wmr),e(Sd,gH),e(gH,Amr),e(Sd,Lmr),e(Sd,hH),e(hH,ymr),e(Sd,xmr),e(Wo,$mr),e(Wo,n9),e(n9,kmr),e(n9,I1e),e(I1e,Smr),e(n9,Rmr),e(Wo,Pmr),e(Wo,Et),M(s9,Et,null),e(Et,Bmr),e(Et,N1e),e(N1e,Imr),e(Et,Nmr),e(Et,Rd),e(Rd,qmr),e(Rd,q1e),e(q1e,jmr),e(Rd,Dmr),e(Rd,uH),e(uH,Gmr),e(Rd,Omr),e(Et,Vmr),M(KM,Et,null),e(Wo,Xmr),e(Wo,fo),M(l9,fo,null),e(fo,zmr),e(fo,j1e),e(j1e,Wmr),e(fo,Qmr),e(fo,Ja),e(Ja,Hmr),e(Ja,D1e),e(D1e,Umr),e(Ja,Jmr),e(Ja,G1e),e(G1e,Ymr),e(Ja,Kmr),e(Ja,O1e),e(O1e,Zmr),e(Ja,efr),e(fo,ofr),e(fo,Pe),e(Pe,ZM),e(ZM,V1e),e(V1e,rfr),e(ZM,tfr),e(ZM,pH),e(pH,afr),e(ZM,nfr),e(Pe,sfr),e(Pe,e4),e(e4,X1e),e(X1e,lfr),e(e4,ifr),e(e4,_H),e(_H,dfr),e(e4,cfr),e(Pe,mfr),e(Pe,o4),e(o4,z1e),e(z1e,ffr),e(o4,gfr),e(o4,bH),e(bH,hfr),e(o4,ufr),e(Pe,pfr),e(Pe,r4),e(r4,W1e),e(W1e,_fr),e(r4,bfr),e(r4,vH),e(vH,vfr),e(r4,Ffr),e(Pe,Tfr),e(Pe,t4),e(t4,Q1e),e(Q1e,Mfr),e(t4,Efr),e(t4,FH),e(FH,Cfr),e(t4,wfr),e(Pe,Afr),e(Pe,a4),e(a4,H1e),e(H1e,Lfr),e(a4,yfr),e(a4,TH),e(TH,xfr),e(a4,$fr),e(Pe,kfr),e(Pe,n4),e(n4,U1e),e(U1e,Sfr),e(n4,Rfr),e(n4,MH),e(MH,Pfr),e(n4,Bfr),e(Pe,Ifr),e(Pe,s4),e(s4,J1e),e(J1e,Nfr),e(s4,qfr),e(s4,EH),e(EH,jfr),e(s4,Dfr),e(Pe,Gfr),e(Pe,l4),e(l4,Y1e),e(Y1e,Ofr),e(l4,Vfr),e(l4,CH),e(CH,Xfr),e(l4,zfr),e(fo,Wfr),e(fo,i4),e(i4,Qfr),e(i4,K1e),e(K1e,Hfr),e(i4,Ufr),e(i4,Z1e),e(Z1e,Jfr),e(fo,Yfr),M(d4,fo,null),b(m,Sze,_),b(m,Pd,_),e(Pd,c4),e(c4,eFe),M(i9,eFe,null),e(Pd,Kfr),e(Pd,oFe),e(oFe,Zfr),b(m,Rze,_),b(m,Qo,_),M(d9,Qo,null),e(Qo,egr),e(Qo,Bd),e(Bd,ogr),e(Bd,wH),e(wH,rgr),e(Bd,tgr),e(Bd,AH),e(AH,agr),e(Bd,ngr),e(Qo,sgr),e(Qo,c9),e(c9,lgr),e(c9,rFe),e(rFe,igr),e(c9,dgr),e(Qo,cgr),e(Qo,Ct),M(m9,Ct,null),e(Ct,mgr),e(Ct,tFe),e(tFe,fgr),e(Ct,ggr),e(Ct,Id),e(Id,hgr),e(Id,aFe),e(aFe,ugr),e(Id,pgr),e(Id,LH),e(LH,_gr),e(Id,bgr),e(Ct,vgr),M(m4,Ct,null),e(Qo,Fgr),e(Qo,go),M(f9,go,null),e(go,Tgr),e(go,nFe),e(nFe,Mgr),e(go,Egr),e(go,Ya),e(Ya,Cgr),e(Ya,sFe),e(sFe,wgr),e(Ya,Agr),e(Ya,lFe),e(lFe,Lgr),e(Ya,ygr),e(Ya,iFe),e(iFe,xgr),e(Ya,$gr),e(go,kgr),e(go,rt),e(rt,f4),e(f4,dFe),e(dFe,Sgr),e(f4,Rgr),e(f4,yH),e(yH,Pgr),e(f4,Bgr),e(rt,Igr),e(rt,g4),e(g4,cFe),e(cFe,Ngr),e(g4,qgr),e(g4,xH),e(xH,jgr),e(g4,Dgr),e(rt,Ggr),e(rt,h4),e(h4,mFe),e(mFe,Ogr),e(h4,Vgr),e(h4,$H),e($H,Xgr),e(h4,zgr),e(rt,Wgr),e(rt,u4),e(u4,fFe),e(fFe,Qgr),e(u4,Hgr),e(u4,kH),e(kH,Ugr),e(u4,Jgr),e(rt,Ygr),e(rt,p4),e(p4,gFe),e(gFe,Kgr),e(p4,Zgr),e(p4,SH),e(SH,ehr),e(p4,ohr),e(go,rhr),e(go,_4),e(_4,thr),e(_4,hFe),e(hFe,ahr),e(_4,nhr),e(_4,uFe),e(uFe,shr),e(go,lhr),M(b4,go,null),b(m,Pze,_),b(m,Nd,_),e(Nd,v4),e(v4,pFe),M(g9,pFe,null),e(Nd,ihr),e(Nd,_Fe),e(_Fe,dhr),b(m,Bze,_),b(m,Ho,_),M(h9,Ho,null),e(Ho,chr),e(Ho,qd),e(qd,mhr),e(qd,RH),e(RH,fhr),e(qd,ghr),e(qd,PH),e(PH,hhr),e(qd,uhr),e(Ho,phr),e(Ho,u9),e(u9,_hr),e(u9,bFe),e(bFe,bhr),e(u9,vhr),e(Ho,Fhr),e(Ho,wt),M(p9,wt,null),e(wt,Thr),e(wt,vFe),e(vFe,Mhr),e(wt,Ehr),e(wt,jd),e(jd,Chr),e(jd,FFe),e(FFe,whr),e(jd,Ahr),e(jd,BH),e(BH,Lhr),e(jd,yhr),e(wt,xhr),M(F4,wt,null),e(Ho,$hr),e(Ho,ho),M(_9,ho,null),e(ho,khr),e(ho,TFe),e(TFe,Shr),e(ho,Rhr),e(ho,Ka),e(Ka,Phr),e(Ka,MFe),e(MFe,Bhr),e(Ka,Ihr),e(Ka,EFe),e(EFe,Nhr),e(Ka,qhr),e(Ka,CFe),e(CFe,jhr),e(Ka,Dhr),e(ho,Ghr),e(ho,Le),e(Le,T4),e(T4,wFe),e(wFe,Ohr),e(T4,Vhr),e(T4,IH),e(IH,Xhr),e(T4,zhr),e(Le,Whr),e(Le,M4),e(M4,AFe),e(AFe,Qhr),e(M4,Hhr),e(M4,NH),e(NH,Uhr),e(M4,Jhr),e(Le,Yhr),e(Le,E4),e(E4,LFe),e(LFe,Khr),e(E4,Zhr),e(E4,qH),e(qH,eur),e(E4,our),e(Le,rur),e(Le,C4),e(C4,yFe),e(yFe,tur),e(C4,aur),e(C4,jH),e(jH,nur),e(C4,sur),e(Le,lur),e(Le,w4),e(w4,xFe),e(xFe,iur),e(w4,dur),e(w4,DH),e(DH,cur),e(w4,mur),e(Le,fur),e(Le,A4),e(A4,$Fe),e($Fe,gur),e(A4,hur),e(A4,GH),e(GH,uur),e(A4,pur),e(Le,_ur),e(Le,L4),e(L4,kFe),e(kFe,bur),e(L4,vur),e(L4,OH),e(OH,Fur),e(L4,Tur),e(Le,Mur),e(Le,y4),e(y4,SFe),e(SFe,Eur),e(y4,Cur),e(y4,VH),e(VH,wur),e(y4,Aur),e(Le,Lur),e(Le,x4),e(x4,RFe),e(RFe,yur),e(x4,xur),e(x4,XH),e(XH,$ur),e(x4,kur),e(Le,Sur),e(Le,$4),e($4,PFe),e(PFe,Rur),e($4,Pur),e($4,zH),e(zH,Bur),e($4,Iur),e(ho,Nur),e(ho,k4),e(k4,qur),e(k4,BFe),e(BFe,jur),e(k4,Dur),e(k4,IFe),e(IFe,Gur),e(ho,Our),M(S4,ho,null),b(m,Ize,_),b(m,Dd,_),e(Dd,R4),e(R4,NFe),M(b9,NFe,null),e(Dd,Vur),e(Dd,qFe),e(qFe,Xur),b(m,Nze,_),b(m,Uo,_),M(v9,Uo,null),e(Uo,zur),e(Uo,Gd),e(Gd,Wur),e(Gd,WH),e(WH,Qur),e(Gd,Hur),e(Gd,QH),e(QH,Uur),e(Gd,Jur),e(Uo,Yur),e(Uo,F9),e(F9,Kur),e(F9,jFe),e(jFe,Zur),e(F9,epr),e(Uo,opr),e(Uo,At),M(T9,At,null),e(At,rpr),e(At,DFe),e(DFe,tpr),e(At,apr),e(At,Od),e(Od,npr),e(Od,GFe),e(GFe,spr),e(Od,lpr),e(Od,HH),e(HH,ipr),e(Od,dpr),e(At,cpr),M(P4,At,null),e(Uo,mpr),e(Uo,uo),M(M9,uo,null),e(uo,fpr),e(uo,OFe),e(OFe,gpr),e(uo,hpr),e(uo,Za),e(Za,upr),e(Za,VFe),e(VFe,ppr),e(Za,_pr),e(Za,XFe),e(XFe,bpr),e(Za,vpr),e(Za,zFe),e(zFe,Fpr),e(Za,Tpr),e(uo,Mpr),e(uo,E9),e(E9,B4),e(B4,WFe),e(WFe,Epr),e(B4,Cpr),e(B4,UH),e(UH,wpr),e(B4,Apr),e(E9,Lpr),e(E9,I4),e(I4,QFe),e(QFe,ypr),e(I4,xpr),e(I4,JH),e(JH,$pr),e(I4,kpr),e(uo,Spr),e(uo,N4),e(N4,Rpr),e(N4,HFe),e(HFe,Ppr),e(N4,Bpr),e(N4,UFe),e(UFe,Ipr),e(uo,Npr),M(q4,uo,null),b(m,qze,_),b(m,Vd,_),e(Vd,j4),e(j4,JFe),M(C9,JFe,null),e(Vd,qpr),e(Vd,YFe),e(YFe,jpr),b(m,jze,_),b(m,Jo,_),M(w9,Jo,null),e(Jo,Dpr),e(Jo,Xd),e(Xd,Gpr),e(Xd,YH),e(YH,Opr),e(Xd,Vpr),e(Xd,KH),e(KH,Xpr),e(Xd,zpr),e(Jo,Wpr),e(Jo,A9),e(A9,Qpr),e(A9,KFe),e(KFe,Hpr),e(A9,Upr),e(Jo,Jpr),e(Jo,Lt),M(L9,Lt,null),e(Lt,Ypr),e(Lt,ZFe),e(ZFe,Kpr),e(Lt,Zpr),e(Lt,zd),e(zd,e_r),e(zd,eTe),e(eTe,o_r),e(zd,r_r),e(zd,ZH),e(ZH,t_r),e(zd,a_r),e(Lt,n_r),M(D4,Lt,null),e(Jo,s_r),e(Jo,po),M(y9,po,null),e(po,l_r),e(po,oTe),e(oTe,i_r),e(po,d_r),e(po,en),e(en,c_r),e(en,rTe),e(rTe,m_r),e(en,f_r),e(en,tTe),e(tTe,g_r),e(en,h_r),e(en,aTe),e(aTe,u_r),e(en,p_r),e(po,__r),e(po,tt),e(tt,G4),e(G4,nTe),e(nTe,b_r),e(G4,v_r),e(G4,eU),e(eU,F_r),e(G4,T_r),e(tt,M_r),e(tt,O4),e(O4,sTe),e(sTe,E_r),e(O4,C_r),e(O4,oU),e(oU,w_r),e(O4,A_r),e(tt,L_r),e(tt,V4),e(V4,lTe),e(lTe,y_r),e(V4,x_r),e(V4,rU),e(rU,$_r),e(V4,k_r),e(tt,S_r),e(tt,X4),e(X4,iTe),e(iTe,R_r),e(X4,P_r),e(X4,tU),e(tU,B_r),e(X4,I_r),e(tt,N_r),e(tt,z4),e(z4,dTe),e(dTe,q_r),e(z4,j_r),e(z4,aU),e(aU,D_r),e(z4,G_r),e(po,O_r),e(po,W4),e(W4,V_r),e(W4,cTe),e(cTe,X_r),e(W4,z_r),e(W4,mTe),e(mTe,W_r),e(po,Q_r),M(Q4,po,null),b(m,Dze,_),b(m,Wd,_),e(Wd,H4),e(H4,fTe),M(x9,fTe,null),e(Wd,H_r),e(Wd,gTe),e(gTe,U_r),b(m,Gze,_),b(m,Yo,_),M($9,Yo,null),e(Yo,J_r),e(Yo,Qd),e(Qd,Y_r),e(Qd,nU),e(nU,K_r),e(Qd,Z_r),e(Qd,sU),e(sU,e2r),e(Qd,o2r),e(Yo,r2r),e(Yo,k9),e(k9,t2r),e(k9,hTe),e(hTe,a2r),e(k9,n2r),e(Yo,s2r),e(Yo,yt),M(S9,yt,null),e(yt,l2r),e(yt,uTe),e(uTe,i2r),e(yt,d2r),e(yt,Hd),e(Hd,c2r),e(Hd,pTe),e(pTe,m2r),e(Hd,f2r),e(Hd,lU),e(lU,g2r),e(Hd,h2r),e(yt,u2r),M(U4,yt,null),e(Yo,p2r),e(Yo,_o),M(R9,_o,null),e(_o,_2r),e(_o,_Te),e(_Te,b2r),e(_o,v2r),e(_o,on),e(on,F2r),e(on,bTe),e(bTe,T2r),e(on,M2r),e(on,vTe),e(vTe,E2r),e(on,C2r),e(on,FTe),e(FTe,w2r),e(on,A2r),e(_o,L2r),e(_o,Ud),e(Ud,J4),e(J4,TTe),e(TTe,y2r),e(J4,x2r),e(J4,iU),e(iU,$2r),e(J4,k2r),e(Ud,S2r),e(Ud,Y4),e(Y4,MTe),e(MTe,R2r),e(Y4,P2r),e(Y4,dU),e(dU,B2r),e(Y4,I2r),e(Ud,N2r),e(Ud,K4),e(K4,ETe),e(ETe,q2r),e(K4,j2r),e(K4,cU),e(cU,D2r),e(K4,G2r),e(_o,O2r),e(_o,Z4),e(Z4,V2r),e(Z4,CTe),e(CTe,X2r),e(Z4,z2r),e(Z4,wTe),e(wTe,W2r),e(_o,Q2r),M(eE,_o,null),b(m,Oze,_),b(m,Jd,_),e(Jd,oE),e(oE,ATe),M(P9,ATe,null),e(Jd,H2r),e(Jd,LTe),e(LTe,U2r),b(m,Vze,_),b(m,Ko,_),M(B9,Ko,null),e(Ko,J2r),e(Ko,Yd),e(Yd,Y2r),e(Yd,mU),e(mU,K2r),e(Yd,Z2r),e(Yd,fU),e(fU,ebr),e(Yd,obr),e(Ko,rbr),e(Ko,I9),e(I9,tbr),e(I9,yTe),e(yTe,abr),e(I9,nbr),e(Ko,sbr),e(Ko,xt),M(N9,xt,null),e(xt,lbr),e(xt,xTe),e(xTe,ibr),e(xt,dbr),e(xt,Kd),e(Kd,cbr),e(Kd,$Te),e($Te,mbr),e(Kd,fbr),e(Kd,gU),e(gU,gbr),e(Kd,hbr),e(xt,ubr),M(rE,xt,null),e(Ko,pbr),e(Ko,bo),M(q9,bo,null),e(bo,_br),e(bo,kTe),e(kTe,bbr),e(bo,vbr),e(bo,rn),e(rn,Fbr),e(rn,STe),e(STe,Tbr),e(rn,Mbr),e(rn,RTe),e(RTe,Ebr),e(rn,Cbr),e(rn,PTe),e(PTe,wbr),e(rn,Abr),e(bo,Lbr),e(bo,j9),e(j9,tE),e(tE,BTe),e(BTe,ybr),e(tE,xbr),e(tE,hU),e(hU,$br),e(tE,kbr),e(j9,Sbr),e(j9,aE),e(aE,ITe),e(ITe,Rbr),e(aE,Pbr),e(aE,uU),e(uU,Bbr),e(aE,Ibr),e(bo,Nbr),e(bo,nE),e(nE,qbr),e(nE,NTe),e(NTe,jbr),e(nE,Dbr),e(nE,qTe),e(qTe,Gbr),e(bo,Obr),M(sE,bo,null),b(m,Xze,_),b(m,Zd,_),e(Zd,lE),e(lE,jTe),M(D9,jTe,null),e(Zd,Vbr),e(Zd,DTe),e(DTe,Xbr),b(m,zze,_),b(m,Zo,_),M(G9,Zo,null),e(Zo,zbr),e(Zo,ec),e(ec,Wbr),e(ec,pU),e(pU,Qbr),e(ec,Hbr),e(ec,_U),e(_U,Ubr),e(ec,Jbr),e(Zo,Ybr),e(Zo,O9),e(O9,Kbr),e(O9,GTe),e(GTe,Zbr),e(O9,evr),e(Zo,ovr),e(Zo,$t),M(V9,$t,null),e($t,rvr),e($t,OTe),e(OTe,tvr),e($t,avr),e($t,oc),e(oc,nvr),e(oc,VTe),e(VTe,svr),e(oc,lvr),e(oc,bU),e(bU,ivr),e(oc,dvr),e($t,cvr),M(iE,$t,null),e(Zo,mvr),e(Zo,vo),M(X9,vo,null),e(vo,fvr),e(vo,XTe),e(XTe,gvr),e(vo,hvr),e(vo,tn),e(tn,uvr),e(tn,zTe),e(zTe,pvr),e(tn,_vr),e(tn,WTe),e(WTe,bvr),e(tn,vvr),e(tn,QTe),e(QTe,Fvr),e(tn,Tvr),e(vo,Mvr),e(vo,HTe),e(HTe,dE),e(dE,UTe),e(UTe,Evr),e(dE,Cvr),e(dE,vU),e(vU,wvr),e(dE,Avr),e(vo,Lvr),e(vo,cE),e(cE,yvr),e(cE,JTe),e(JTe,xvr),e(cE,$vr),e(cE,YTe),e(YTe,kvr),e(vo,Svr),M(mE,vo,null),b(m,Wze,_),b(m,rc,_),e(rc,fE),e(fE,KTe),M(z9,KTe,null),e(rc,Rvr),e(rc,ZTe),e(ZTe,Pvr),b(m,Qze,_),b(m,er,_),M(W9,er,null),e(er,Bvr),e(er,tc),e(tc,Ivr),e(tc,FU),e(FU,Nvr),e(tc,qvr),e(tc,TU),e(TU,jvr),e(tc,Dvr),e(er,Gvr),e(er,Q9),e(Q9,Ovr),e(Q9,eMe),e(eMe,Vvr),e(Q9,Xvr),e(er,zvr),e(er,kt),M(H9,kt,null),e(kt,Wvr),e(kt,oMe),e(oMe,Qvr),e(kt,Hvr),e(kt,ac),e(ac,Uvr),e(ac,rMe),e(rMe,Jvr),e(ac,Yvr),e(ac,MU),e(MU,Kvr),e(ac,Zvr),e(kt,e1r),M(gE,kt,null),e(er,o1r),e(er,Fo),M(U9,Fo,null),e(Fo,r1r),e(Fo,tMe),e(tMe,t1r),e(Fo,a1r),e(Fo,an),e(an,n1r),e(an,aMe),e(aMe,s1r),e(an,l1r),e(an,nMe),e(nMe,i1r),e(an,d1r),e(an,sMe),e(sMe,c1r),e(an,m1r),e(Fo,f1r),e(Fo,at),e(at,hE),e(hE,lMe),e(lMe,g1r),e(hE,h1r),e(hE,EU),e(EU,u1r),e(hE,p1r),e(at,_1r),e(at,uE),e(uE,iMe),e(iMe,b1r),e(uE,v1r),e(uE,CU),e(CU,F1r),e(uE,T1r),e(at,M1r),e(at,pE),e(pE,dMe),e(dMe,E1r),e(pE,C1r),e(pE,wU),e(wU,w1r),e(pE,A1r),e(at,L1r),e(at,_E),e(_E,cMe),e(cMe,y1r),e(_E,x1r),e(_E,AU),e(AU,$1r),e(_E,k1r),e(at,S1r),e(at,bE),e(bE,mMe),e(mMe,R1r),e(bE,P1r),e(bE,LU),e(LU,B1r),e(bE,I1r),e(Fo,N1r),e(Fo,vE),e(vE,q1r),e(vE,fMe),e(fMe,j1r),e(vE,D1r),e(vE,gMe),e(gMe,G1r),e(Fo,O1r),M(FE,Fo,null),b(m,Hze,_),b(m,nc,_),e(nc,TE),e(TE,hMe),M(J9,hMe,null),e(nc,V1r),e(nc,uMe),e(uMe,X1r),b(m,Uze,_),b(m,or,_),M(Y9,or,null),e(or,z1r),e(or,sc),e(sc,W1r),e(sc,yU),e(yU,Q1r),e(sc,H1r),e(sc,xU),e(xU,U1r),e(sc,J1r),e(or,Y1r),e(or,K9),e(K9,K1r),e(K9,pMe),e(pMe,Z1r),e(K9,eFr),e(or,oFr),e(or,St),M(Z9,St,null),e(St,rFr),e(St,_Me),e(_Me,tFr),e(St,aFr),e(St,lc),e(lc,nFr),e(lc,bMe),e(bMe,sFr),e(lc,lFr),e(lc,$U),e($U,iFr),e(lc,dFr),e(St,cFr),M(ME,St,null),e(or,mFr),e(or,To),M(ex,To,null),e(To,fFr),e(To,vMe),e(vMe,gFr),e(To,hFr),e(To,nn),e(nn,uFr),e(nn,FMe),e(FMe,pFr),e(nn,_Fr),e(nn,TMe),e(TMe,bFr),e(nn,vFr),e(nn,MMe),e(MMe,FFr),e(nn,TFr),e(To,MFr),e(To,EMe),e(EMe,EE),e(EE,CMe),e(CMe,EFr),e(EE,CFr),e(EE,kU),e(kU,wFr),e(EE,AFr),e(To,LFr),e(To,CE),e(CE,yFr),e(CE,wMe),e(wMe,xFr),e(CE,$Fr),e(CE,AMe),e(AMe,kFr),e(To,SFr),M(wE,To,null),b(m,Jze,_),b(m,ic,_),e(ic,AE),e(AE,LMe),M(ox,LMe,null),e(ic,RFr),e(ic,yMe),e(yMe,PFr),b(m,Yze,_),b(m,rr,_),M(rx,rr,null),e(rr,BFr),e(rr,dc),e(dc,IFr),e(dc,SU),e(SU,NFr),e(dc,qFr),e(dc,RU),e(RU,jFr),e(dc,DFr),e(rr,GFr),e(rr,tx),e(tx,OFr),e(tx,xMe),e(xMe,VFr),e(tx,XFr),e(rr,zFr),e(rr,Rt),M(ax,Rt,null),e(Rt,WFr),e(Rt,$Me),e($Me,QFr),e(Rt,HFr),e(Rt,cc),e(cc,UFr),e(cc,kMe),e(kMe,JFr),e(cc,YFr),e(cc,PU),e(PU,KFr),e(cc,ZFr),e(Rt,eTr),M(LE,Rt,null),e(rr,oTr),e(rr,$r),M(nx,$r,null),e($r,rTr),e($r,SMe),e(SMe,tTr),e($r,aTr),e($r,sn),e(sn,nTr),e(sn,RMe),e(RMe,sTr),e(sn,lTr),e(sn,PMe),e(PMe,iTr),e(sn,dTr),e(sn,BMe),e(BMe,cTr),e(sn,mTr),e($r,fTr),e($r,I),e(I,yE),e(yE,IMe),e(IMe,gTr),e(yE,hTr),e(yE,BU),e(BU,uTr),e(yE,pTr),e(I,_Tr),e(I,xE),e(xE,NMe),e(NMe,bTr),e(xE,vTr),e(xE,IU),e(IU,FTr),e(xE,TTr),e(I,MTr),e(I,$E),e($E,qMe),e(qMe,ETr),e($E,CTr),e($E,NU),e(NU,wTr),e($E,ATr),e(I,LTr),e(I,kE),e(kE,jMe),e(jMe,yTr),e(kE,xTr),e(kE,qU),e(qU,$Tr),e(kE,kTr),e(I,STr),e(I,SE),e(SE,DMe),e(DMe,RTr),e(SE,PTr),e(SE,jU),e(jU,BTr),e(SE,ITr),e(I,NTr),e(I,RE),e(RE,GMe),e(GMe,qTr),e(RE,jTr),e(RE,DU),e(DU,DTr),e(RE,GTr),e(I,OTr),e(I,PE),e(PE,OMe),e(OMe,VTr),e(PE,XTr),e(PE,GU),e(GU,zTr),e(PE,WTr),e(I,QTr),e(I,BE),e(BE,VMe),e(VMe,HTr),e(BE,UTr),e(BE,OU),e(OU,JTr),e(BE,YTr),e(I,KTr),e(I,IE),e(IE,XMe),e(XMe,ZTr),e(IE,eMr),e(IE,VU),e(VU,oMr),e(IE,rMr),e(I,tMr),e(I,NE),e(NE,zMe),e(zMe,aMr),e(NE,nMr),e(NE,XU),e(XU,sMr),e(NE,lMr),e(I,iMr),e(I,qE),e(qE,WMe),e(WMe,dMr),e(qE,cMr),e(qE,zU),e(zU,mMr),e(qE,fMr),e(I,gMr),e(I,jE),e(jE,QMe),e(QMe,hMr),e(jE,uMr),e(jE,WU),e(WU,pMr),e(jE,_Mr),e(I,bMr),e(I,DE),e(DE,HMe),e(HMe,vMr),e(DE,FMr),e(DE,QU),e(QU,TMr),e(DE,MMr),e(I,EMr),e(I,GE),e(GE,UMe),e(UMe,CMr),e(GE,wMr),e(GE,HU),e(HU,AMr),e(GE,LMr),e(I,yMr),e(I,OE),e(OE,JMe),e(JMe,xMr),e(OE,$Mr),e(OE,UU),e(UU,kMr),e(OE,SMr),e(I,RMr),e(I,VE),e(VE,YMe),e(YMe,PMr),e(VE,BMr),e(VE,JU),e(JU,IMr),e(VE,NMr),e(I,qMr),e(I,XE),e(XE,KMe),e(KMe,jMr),e(XE,DMr),e(XE,YU),e(YU,GMr),e(XE,OMr),e(I,VMr),e(I,zE),e(zE,ZMe),e(ZMe,XMr),e(zE,zMr),e(zE,KU),e(KU,WMr),e(zE,QMr),e(I,HMr),e(I,Ks),e(Ks,e4e),e(e4e,UMr),e(Ks,JMr),e(Ks,ZU),e(ZU,YMr),e(Ks,KMr),e(Ks,eJ),e(eJ,ZMr),e(Ks,e4r),e(I,o4r),e(I,WE),e(WE,o4e),e(o4e,r4r),e(WE,t4r),e(WE,oJ),e(oJ,a4r),e(WE,n4r),e(I,s4r),e(I,QE),e(QE,r4e),e(r4e,l4r),e(QE,i4r),e(QE,rJ),e(rJ,d4r),e(QE,c4r),e(I,m4r),e(I,HE),e(HE,t4e),e(t4e,f4r),e(HE,g4r),e(HE,tJ),e(tJ,h4r),e(HE,u4r),e(I,p4r),e(I,UE),e(UE,a4e),e(a4e,_4r),e(UE,b4r),e(UE,aJ),e(aJ,v4r),e(UE,F4r),e(I,T4r),e(I,JE),e(JE,n4e),e(n4e,M4r),e(JE,E4r),e(JE,nJ),e(nJ,C4r),e(JE,w4r),e(I,A4r),e(I,YE),e(YE,s4e),e(s4e,L4r),e(YE,y4r),e(YE,sJ),e(sJ,x4r),e(YE,$4r),e(I,k4r),e(I,KE),e(KE,l4e),e(l4e,S4r),e(KE,R4r),e(KE,lJ),e(lJ,P4r),e(KE,B4r),e(I,I4r),e(I,ZE),e(ZE,i4e),e(i4e,N4r),e(ZE,q4r),e(ZE,iJ),e(iJ,j4r),e(ZE,D4r),e(I,G4r),e(I,eC),e(eC,d4e),e(d4e,O4r),e(eC,V4r),e(eC,dJ),e(dJ,X4r),e(eC,z4r),e(I,W4r),e(I,oC),e(oC,c4e),e(c4e,Q4r),e(oC,H4r),e(oC,cJ),e(cJ,U4r),e(oC,J4r),e(I,Y4r),e(I,rC),e(rC,m4e),e(m4e,K4r),e(rC,Z4r),e(rC,mJ),e(mJ,eEr),e(rC,oEr),e(I,rEr),e(I,tC),e(tC,f4e),e(f4e,tEr),e(tC,aEr),e(tC,fJ),e(fJ,nEr),e(tC,sEr),e(I,lEr),e(I,aC),e(aC,g4e),e(g4e,iEr),e(aC,dEr),e(aC,gJ),e(gJ,cEr),e(aC,mEr),e(I,fEr),e(I,nC),e(nC,h4e),e(h4e,gEr),e(nC,hEr),e(nC,hJ),e(hJ,uEr),e(nC,pEr),e(I,_Er),e(I,sC),e(sC,u4e),e(u4e,bEr),e(sC,vEr),e(sC,uJ),e(uJ,FEr),e(sC,TEr),e(I,MEr),e(I,lC),e(lC,p4e),e(p4e,EEr),e(lC,CEr),e(lC,pJ),e(pJ,wEr),e(lC,AEr),e(I,LEr),e(I,iC),e(iC,_4e),e(_4e,yEr),e(iC,xEr),e(iC,_J),e(_J,$Er),e(iC,kEr),e(I,SEr),e(I,dC),e(dC,b4e),e(b4e,REr),e(dC,PEr),e(dC,bJ),e(bJ,BEr),e(dC,IEr),e(I,NEr),e(I,cC),e(cC,v4e),e(v4e,qEr),e(cC,jEr),e(cC,vJ),e(vJ,DEr),e(cC,GEr),e(I,OEr),e(I,mC),e(mC,F4e),e(F4e,VEr),e(mC,XEr),e(mC,FJ),e(FJ,zEr),e(mC,WEr),e(I,QEr),e(I,fC),e(fC,T4e),e(T4e,HEr),e(fC,UEr),e(fC,TJ),e(TJ,JEr),e(fC,YEr),e(I,KEr),e(I,gC),e(gC,M4e),e(M4e,ZEr),e(gC,eCr),e(gC,MJ),e(MJ,oCr),e(gC,rCr),e(I,tCr),e(I,hC),e(hC,E4e),e(E4e,aCr),e(hC,nCr),e(hC,EJ),e(EJ,sCr),e(hC,lCr),e(I,iCr),e(I,uC),e(uC,C4e),e(C4e,dCr),e(uC,cCr),e(uC,CJ),e(CJ,mCr),e(uC,fCr),e(I,gCr),e(I,pC),e(pC,w4e),e(w4e,hCr),e(pC,uCr),e(pC,wJ),e(wJ,pCr),e(pC,_Cr),e(I,bCr),e(I,_C),e(_C,A4e),e(A4e,vCr),e(_C,FCr),e(_C,AJ),e(AJ,TCr),e(_C,MCr),e(I,ECr),e(I,bC),e(bC,L4e),e(L4e,CCr),e(bC,wCr),e(bC,LJ),e(LJ,ACr),e(bC,LCr),e(I,yCr),e(I,vC),e(vC,y4e),e(y4e,xCr),e(vC,$Cr),e(vC,yJ),e(yJ,kCr),e(vC,SCr),e(I,RCr),e(I,FC),e(FC,x4e),e(x4e,PCr),e(FC,BCr),e(FC,xJ),e(xJ,ICr),e(FC,NCr),e(I,qCr),e(I,TC),e(TC,$4e),e($4e,jCr),e(TC,DCr),e(TC,$J),e($J,GCr),e(TC,OCr),e(I,VCr),e(I,MC),e(MC,k4e),e(k4e,XCr),e(MC,zCr),e(MC,kJ),e(kJ,WCr),e(MC,QCr),e(I,HCr),e(I,EC),e(EC,S4e),e(S4e,UCr),e(EC,JCr),e(EC,SJ),e(SJ,YCr),e(EC,KCr),e($r,ZCr),M(CC,$r,null),b(m,Kze,_),b(m,mc,_),e(mc,wC),e(wC,R4e),M(sx,R4e,null),e(mc,e5r),e(mc,P4e),e(P4e,o5r),b(m,Zze,_),b(m,tr,_),M(lx,tr,null),e(tr,r5r),e(tr,fc),e(fc,t5r),e(fc,RJ),e(RJ,a5r),e(fc,n5r),e(fc,PJ),e(PJ,s5r),e(fc,l5r),e(tr,i5r),e(tr,ix),e(ix,d5r),e(ix,B4e),e(B4e,c5r),e(ix,m5r),e(tr,f5r),e(tr,Pt),M(dx,Pt,null),e(Pt,g5r),e(Pt,I4e),e(I4e,h5r),e(Pt,u5r),e(Pt,gc),e(gc,p5r),e(gc,N4e),e(N4e,_5r),e(gc,b5r),e(gc,BJ),e(BJ,v5r),e(gc,F5r),e(Pt,T5r),M(AC,Pt,null),e(tr,M5r),e(tr,kr),M(cx,kr,null),e(kr,E5r),e(kr,q4e),e(q4e,C5r),e(kr,w5r),e(kr,ln),e(ln,A5r),e(ln,j4e),e(j4e,L5r),e(ln,y5r),e(ln,D4e),e(D4e,x5r),e(ln,$5r),e(ln,G4e),e(G4e,k5r),e(ln,S5r),e(kr,R5r),e(kr,se),e(se,LC),e(LC,O4e),e(O4e,P5r),e(LC,B5r),e(LC,IJ),e(IJ,I5r),e(LC,N5r),e(se,q5r),e(se,yC),e(yC,V4e),e(V4e,j5r),e(yC,D5r),e(yC,NJ),e(NJ,G5r),e(yC,O5r),e(se,V5r),e(se,xC),e(xC,X4e),e(X4e,X5r),e(xC,z5r),e(xC,qJ),e(qJ,W5r),e(xC,Q5r),e(se,H5r),e(se,$C),e($C,z4e),e(z4e,U5r),e($C,J5r),e($C,jJ),e(jJ,Y5r),e($C,K5r),e(se,Z5r),e(se,kC),e(kC,W4e),e(W4e,e3r),e(kC,o3r),e(kC,DJ),e(DJ,r3r),e(kC,t3r),e(se,a3r),e(se,SC),e(SC,Q4e),e(Q4e,n3r),e(SC,s3r),e(SC,GJ),e(GJ,l3r),e(SC,i3r),e(se,d3r),e(se,RC),e(RC,H4e),e(H4e,c3r),e(RC,m3r),e(RC,OJ),e(OJ,f3r),e(RC,g3r),e(se,h3r),e(se,PC),e(PC,U4e),e(U4e,u3r),e(PC,p3r),e(PC,VJ),e(VJ,_3r),e(PC,b3r),e(se,v3r),e(se,BC),e(BC,J4e),e(J4e,F3r),e(BC,T3r),e(BC,XJ),e(XJ,M3r),e(BC,E3r),e(se,C3r),e(se,IC),e(IC,Y4e),e(Y4e,w3r),e(IC,A3r),e(IC,zJ),e(zJ,L3r),e(IC,y3r),e(se,x3r),e(se,NC),e(NC,K4e),e(K4e,$3r),e(NC,k3r),e(NC,WJ),e(WJ,S3r),e(NC,R3r),e(se,P3r),e(se,qC),e(qC,Z4e),e(Z4e,B3r),e(qC,I3r),e(qC,QJ),e(QJ,N3r),e(qC,q3r),e(se,j3r),e(se,jC),e(jC,eEe),e(eEe,D3r),e(jC,G3r),e(jC,HJ),e(HJ,O3r),e(jC,V3r),e(se,X3r),e(se,DC),e(DC,oEe),e(oEe,z3r),e(DC,W3r),e(DC,UJ),e(UJ,Q3r),e(DC,H3r),e(se,U3r),e(se,GC),e(GC,rEe),e(rEe,J3r),e(GC,Y3r),e(GC,JJ),e(JJ,K3r),e(GC,Z3r),e(se,e0r),e(se,OC),e(OC,tEe),e(tEe,o0r),e(OC,r0r),e(OC,YJ),e(YJ,t0r),e(OC,a0r),e(se,n0r),e(se,VC),e(VC,aEe),e(aEe,s0r),e(VC,l0r),e(VC,KJ),e(KJ,i0r),e(VC,d0r),e(se,c0r),e(se,XC),e(XC,nEe),e(nEe,m0r),e(XC,f0r),e(XC,ZJ),e(ZJ,g0r),e(XC,h0r),e(se,u0r),e(se,zC),e(zC,sEe),e(sEe,p0r),e(zC,_0r),e(zC,eY),e(eY,b0r),e(zC,v0r),e(se,F0r),e(se,WC),e(WC,lEe),e(lEe,T0r),e(WC,M0r),e(WC,oY),e(oY,E0r),e(WC,C0r),e(se,w0r),e(se,QC),e(QC,iEe),e(iEe,A0r),e(QC,L0r),e(QC,rY),e(rY,y0r),e(QC,x0r),e(se,$0r),e(se,HC),e(HC,dEe),e(dEe,k0r),e(HC,S0r),e(HC,tY),e(tY,R0r),e(HC,P0r),e(se,B0r),e(se,UC),e(UC,cEe),e(cEe,I0r),e(UC,N0r),e(UC,aY),e(aY,q0r),e(UC,j0r),e(kr,D0r),M(JC,kr,null),b(m,eWe,_),b(m,hc,_),e(hc,YC),e(YC,mEe),M(mx,mEe,null),e(hc,G0r),e(hc,fEe),e(fEe,O0r),b(m,oWe,_),b(m,ar,_),M(fx,ar,null),e(ar,V0r),e(ar,uc),e(uc,X0r),e(uc,nY),e(nY,z0r),e(uc,W0r),e(uc,sY),e(sY,Q0r),e(uc,H0r),e(ar,U0r),e(ar,gx),e(gx,J0r),e(gx,gEe),e(gEe,Y0r),e(gx,K0r),e(ar,Z0r),e(ar,Bt),M(hx,Bt,null),e(Bt,ewr),e(Bt,hEe),e(hEe,owr),e(Bt,rwr),e(Bt,pc),e(pc,twr),e(pc,uEe),e(uEe,awr),e(pc,nwr),e(pc,lY),e(lY,swr),e(pc,lwr),e(Bt,iwr),M(KC,Bt,null),e(ar,dwr),e(ar,Sr),M(ux,Sr,null),e(Sr,cwr),e(Sr,pEe),e(pEe,mwr),e(Sr,fwr),e(Sr,dn),e(dn,gwr),e(dn,_Ee),e(_Ee,hwr),e(dn,uwr),e(dn,bEe),e(bEe,pwr),e(dn,_wr),e(dn,vEe),e(vEe,bwr),e(dn,vwr),e(Sr,Fwr),e(Sr,Me),e(Me,ZC),e(ZC,FEe),e(FEe,Twr),e(ZC,Mwr),e(ZC,iY),e(iY,Ewr),e(ZC,Cwr),e(Me,wwr),e(Me,e5),e(e5,TEe),e(TEe,Awr),e(e5,Lwr),e(e5,dY),e(dY,ywr),e(e5,xwr),e(Me,$wr),e(Me,o5),e(o5,MEe),e(MEe,kwr),e(o5,Swr),e(o5,cY),e(cY,Rwr),e(o5,Pwr),e(Me,Bwr),e(Me,r5),e(r5,EEe),e(EEe,Iwr),e(r5,Nwr),e(r5,mY),e(mY,qwr),e(r5,jwr),e(Me,Dwr),e(Me,t5),e(t5,CEe),e(CEe,Gwr),e(t5,Owr),e(t5,fY),e(fY,Vwr),e(t5,Xwr),e(Me,zwr),e(Me,a5),e(a5,wEe),e(wEe,Wwr),e(a5,Qwr),e(a5,gY),e(gY,Hwr),e(a5,Uwr),e(Me,Jwr),e(Me,n5),e(n5,AEe),e(AEe,Ywr),e(n5,Kwr),e(n5,hY),e(hY,Zwr),e(n5,eAr),e(Me,oAr),e(Me,s5),e(s5,LEe),e(LEe,rAr),e(s5,tAr),e(s5,uY),e(uY,aAr),e(s5,nAr),e(Me,sAr),e(Me,l5),e(l5,yEe),e(yEe,lAr),e(l5,iAr),e(l5,pY),e(pY,dAr),e(l5,cAr),e(Me,mAr),e(Me,i5),e(i5,xEe),e(xEe,fAr),e(i5,gAr),e(i5,_Y),e(_Y,hAr),e(i5,uAr),e(Me,pAr),e(Me,d5),e(d5,$Ee),e($Ee,_Ar),e(d5,bAr),e(d5,bY),e(bY,vAr),e(d5,FAr),e(Me,TAr),e(Me,c5),e(c5,kEe),e(kEe,MAr),e(c5,EAr),e(c5,vY),e(vY,CAr),e(c5,wAr),e(Me,AAr),e(Me,m5),e(m5,SEe),e(SEe,LAr),e(m5,yAr),e(m5,FY),e(FY,xAr),e(m5,$Ar),e(Sr,kAr),M(f5,Sr,null),b(m,rWe,_),b(m,_c,_),e(_c,g5),e(g5,REe),M(px,REe,null),e(_c,SAr),e(_c,PEe),e(PEe,RAr),b(m,tWe,_),b(m,nr,_),M(_x,nr,null),e(nr,PAr),e(nr,bc),e(bc,BAr),e(bc,TY),e(TY,IAr),e(bc,NAr),e(bc,MY),e(MY,qAr),e(bc,jAr),e(nr,DAr),e(nr,bx),e(bx,GAr),e(bx,BEe),e(BEe,OAr),e(bx,VAr),e(nr,XAr),e(nr,It),M(vx,It,null),e(It,zAr),e(It,IEe),e(IEe,WAr),e(It,QAr),e(It,vc),e(vc,HAr),e(vc,NEe),e(NEe,UAr),e(vc,JAr),e(vc,EY),e(EY,YAr),e(vc,KAr),e(It,ZAr),M(h5,It,null),e(nr,e6r),e(nr,Rr),M(Fx,Rr,null),e(Rr,o6r),e(Rr,qEe),e(qEe,r6r),e(Rr,t6r),e(Rr,cn),e(cn,a6r),e(cn,jEe),e(jEe,n6r),e(cn,s6r),e(cn,DEe),e(DEe,l6r),e(cn,i6r),e(cn,GEe),e(GEe,d6r),e(cn,c6r),e(Rr,m6r),e(Rr,Ve),e(Ve,u5),e(u5,OEe),e(OEe,f6r),e(u5,g6r),e(u5,CY),e(CY,h6r),e(u5,u6r),e(Ve,p6r),e(Ve,p5),e(p5,VEe),e(VEe,_6r),e(p5,b6r),e(p5,wY),e(wY,v6r),e(p5,F6r),e(Ve,T6r),e(Ve,Zs),e(Zs,XEe),e(XEe,M6r),e(Zs,E6r),e(Zs,AY),e(AY,C6r),e(Zs,w6r),e(Zs,LY),e(LY,A6r),e(Zs,L6r),e(Ve,y6r),e(Ve,_5),e(_5,zEe),e(zEe,x6r),e(_5,$6r),e(_5,yY),e(yY,k6r),e(_5,S6r),e(Ve,R6r),e(Ve,b5),e(b5,WEe),e(WEe,P6r),e(b5,B6r),e(b5,xY),e(xY,I6r),e(b5,N6r),e(Ve,q6r),e(Ve,v5),e(v5,QEe),e(QEe,j6r),e(v5,D6r),e(v5,$Y),e($Y,G6r),e(v5,O6r),e(Ve,V6r),e(Ve,F5),e(F5,HEe),e(HEe,X6r),e(F5,z6r),e(F5,kY),e(kY,W6r),e(F5,Q6r),e(Ve,H6r),e(Ve,T5),e(T5,UEe),e(UEe,U6r),e(T5,J6r),e(T5,SY),e(SY,Y6r),e(T5,K6r),e(Rr,Z6r),M(M5,Rr,null),b(m,aWe,_),b(m,Fc,_),e(Fc,E5),e(E5,JEe),M(Tx,JEe,null),e(Fc,e7r),e(Fc,YEe),e(YEe,o7r),b(m,nWe,_),b(m,sr,_),M(Mx,sr,null),e(sr,r7r),e(sr,Tc),e(Tc,t7r),e(Tc,RY),e(RY,a7r),e(Tc,n7r),e(Tc,PY),e(PY,s7r),e(Tc,l7r),e(sr,i7r),e(sr,Ex),e(Ex,d7r),e(Ex,KEe),e(KEe,c7r),e(Ex,m7r),e(sr,f7r),e(sr,Nt),M(Cx,Nt,null),e(Nt,g7r),e(Nt,ZEe),e(ZEe,h7r),e(Nt,u7r),e(Nt,Mc),e(Mc,p7r),e(Mc,eCe),e(eCe,_7r),e(Mc,b7r),e(Mc,BY),e(BY,v7r),e(Mc,F7r),e(Nt,T7r),M(C5,Nt,null),e(sr,M7r),e(sr,Pr),M(wx,Pr,null),e(Pr,E7r),e(Pr,oCe),e(oCe,C7r),e(Pr,w7r),e(Pr,mn),e(mn,A7r),e(mn,rCe),e(rCe,L7r),e(mn,y7r),e(mn,tCe),e(tCe,x7r),e(mn,$7r),e(mn,aCe),e(aCe,k7r),e(mn,S7r),e(Pr,R7r),e(Pr,ie),e(ie,w5),e(w5,nCe),e(nCe,P7r),e(w5,B7r),e(w5,IY),e(IY,I7r),e(w5,N7r),e(ie,q7r),e(ie,A5),e(A5,sCe),e(sCe,j7r),e(A5,D7r),e(A5,NY),e(NY,G7r),e(A5,O7r),e(ie,V7r),e(ie,L5),e(L5,lCe),e(lCe,X7r),e(L5,z7r),e(L5,qY),e(qY,W7r),e(L5,Q7r),e(ie,H7r),e(ie,y5),e(y5,iCe),e(iCe,U7r),e(y5,J7r),e(y5,jY),e(jY,Y7r),e(y5,K7r),e(ie,Z7r),e(ie,x5),e(x5,dCe),e(dCe,eLr),e(x5,oLr),e(x5,DY),e(DY,rLr),e(x5,tLr),e(ie,aLr),e(ie,$5),e($5,cCe),e(cCe,nLr),e($5,sLr),e($5,GY),e(GY,lLr),e($5,iLr),e(ie,dLr),e(ie,k5),e(k5,mCe),e(mCe,cLr),e(k5,mLr),e(k5,OY),e(OY,fLr),e(k5,gLr),e(ie,hLr),e(ie,S5),e(S5,fCe),e(fCe,uLr),e(S5,pLr),e(S5,VY),e(VY,_Lr),e(S5,bLr),e(ie,vLr),e(ie,R5),e(R5,gCe),e(gCe,FLr),e(R5,TLr),e(R5,XY),e(XY,MLr),e(R5,ELr),e(ie,CLr),e(ie,P5),e(P5,hCe),e(hCe,wLr),e(P5,ALr),e(P5,zY),e(zY,LLr),e(P5,yLr),e(ie,xLr),e(ie,B5),e(B5,uCe),e(uCe,$Lr),e(B5,kLr),e(B5,WY),e(WY,SLr),e(B5,RLr),e(ie,PLr),e(ie,I5),e(I5,pCe),e(pCe,BLr),e(I5,ILr),e(I5,QY),e(QY,NLr),e(I5,qLr),e(ie,jLr),e(ie,N5),e(N5,_Ce),e(_Ce,DLr),e(N5,GLr),e(N5,HY),e(HY,OLr),e(N5,VLr),e(ie,XLr),e(ie,q5),e(q5,bCe),e(bCe,zLr),e(q5,WLr),e(q5,UY),e(UY,QLr),e(q5,HLr),e(ie,ULr),e(ie,j5),e(j5,vCe),e(vCe,JLr),e(j5,YLr),e(j5,JY),e(JY,KLr),e(j5,ZLr),e(ie,eyr),e(ie,D5),e(D5,FCe),e(FCe,oyr),e(D5,ryr),e(D5,YY),e(YY,tyr),e(D5,ayr),e(ie,nyr),e(ie,G5),e(G5,TCe),e(TCe,syr),e(G5,lyr),e(G5,KY),e(KY,iyr),e(G5,dyr),e(ie,cyr),e(ie,O5),e(O5,MCe),e(MCe,myr),e(O5,fyr),e(O5,ZY),e(ZY,gyr),e(O5,hyr),e(ie,uyr),e(ie,V5),e(V5,ECe),e(ECe,pyr),e(V5,_yr),e(V5,eK),e(eK,byr),e(V5,vyr),e(ie,Fyr),e(ie,X5),e(X5,CCe),e(CCe,Tyr),e(X5,Myr),e(X5,oK),e(oK,Eyr),e(X5,Cyr),e(Pr,wyr),M(z5,Pr,null),b(m,sWe,_),b(m,Ec,_),e(Ec,W5),e(W5,wCe),M(Ax,wCe,null),e(Ec,Ayr),e(Ec,ACe),e(ACe,Lyr),b(m,lWe,_),b(m,lr,_),M(Lx,lr,null),e(lr,yyr),e(lr,Cc),e(Cc,xyr),e(Cc,rK),e(rK,$yr),e(Cc,kyr),e(Cc,tK),e(tK,Syr),e(Cc,Ryr),e(lr,Pyr),e(lr,yx),e(yx,Byr),e(yx,LCe),e(LCe,Iyr),e(yx,Nyr),e(lr,qyr),e(lr,qt),M(xx,qt,null),e(qt,jyr),e(qt,yCe),e(yCe,Dyr),e(qt,Gyr),e(qt,wc),e(wc,Oyr),e(wc,xCe),e(xCe,Vyr),e(wc,Xyr),e(wc,aK),e(aK,zyr),e(wc,Wyr),e(qt,Qyr),M(Q5,qt,null),e(lr,Hyr),e(lr,Br),M($x,Br,null),e(Br,Uyr),e(Br,$Ce),e($Ce,Jyr),e(Br,Yyr),e(Br,fn),e(fn,Kyr),e(fn,kCe),e(kCe,Zyr),e(fn,e8r),e(fn,SCe),e(SCe,o8r),e(fn,r8r),e(fn,RCe),e(RCe,t8r),e(fn,a8r),e(Br,n8r),e(Br,ye),e(ye,H5),e(H5,PCe),e(PCe,s8r),e(H5,l8r),e(H5,nK),e(nK,i8r),e(H5,d8r),e(ye,c8r),e(ye,U5),e(U5,BCe),e(BCe,m8r),e(U5,f8r),e(U5,sK),e(sK,g8r),e(U5,h8r),e(ye,u8r),e(ye,J5),e(J5,ICe),e(ICe,p8r),e(J5,_8r),e(J5,lK),e(lK,b8r),e(J5,v8r),e(ye,F8r),e(ye,Y5),e(Y5,NCe),e(NCe,T8r),e(Y5,M8r),e(Y5,iK),e(iK,E8r),e(Y5,C8r),e(ye,w8r),e(ye,K5),e(K5,qCe),e(qCe,A8r),e(K5,L8r),e(K5,dK),e(dK,y8r),e(K5,x8r),e(ye,$8r),e(ye,Z5),e(Z5,jCe),e(jCe,k8r),e(Z5,S8r),e(Z5,cK),e(cK,R8r),e(Z5,P8r),e(ye,B8r),e(ye,e3),e(e3,DCe),e(DCe,I8r),e(e3,N8r),e(e3,mK),e(mK,q8r),e(e3,j8r),e(ye,D8r),e(ye,o3),e(o3,GCe),e(GCe,G8r),e(o3,O8r),e(o3,fK),e(fK,V8r),e(o3,X8r),e(ye,z8r),e(ye,r3),e(r3,OCe),e(OCe,W8r),e(r3,Q8r),e(r3,gK),e(gK,H8r),e(r3,U8r),e(ye,J8r),e(ye,t3),e(t3,VCe),e(VCe,Y8r),e(t3,K8r),e(t3,hK),e(hK,Z8r),e(t3,e9r),e(Br,o9r),M(a3,Br,null),b(m,iWe,_),b(m,Ac,_),e(Ac,n3),e(n3,XCe),M(kx,XCe,null),e(Ac,r9r),e(Ac,zCe),e(zCe,t9r),b(m,dWe,_),b(m,ir,_),M(Sx,ir,null),e(ir,a9r),e(ir,Lc),e(Lc,n9r),e(Lc,uK),e(uK,s9r),e(Lc,l9r),e(Lc,pK),e(pK,i9r),e(Lc,d9r),e(ir,c9r),e(ir,Rx),e(Rx,m9r),e(Rx,WCe),e(WCe,f9r),e(Rx,g9r),e(ir,h9r),e(ir,jt),M(Px,jt,null),e(jt,u9r),e(jt,QCe),e(QCe,p9r),e(jt,_9r),e(jt,yc),e(yc,b9r),e(yc,HCe),e(HCe,v9r),e(yc,F9r),e(yc,_K),e(_K,T9r),e(yc,M9r),e(jt,E9r),M(s3,jt,null),e(ir,C9r),e(ir,Ir),M(Bx,Ir,null),e(Ir,w9r),e(Ir,UCe),e(UCe,A9r),e(Ir,L9r),e(Ir,gn),e(gn,y9r),e(gn,JCe),e(JCe,x9r),e(gn,$9r),e(gn,YCe),e(YCe,k9r),e(gn,S9r),e(gn,KCe),e(KCe,R9r),e(gn,P9r),e(Ir,B9r),e(Ir,te),e(te,l3),e(l3,ZCe),e(ZCe,I9r),e(l3,N9r),e(l3,bK),e(bK,q9r),e(l3,j9r),e(te,D9r),e(te,i3),e(i3,e5e),e(e5e,G9r),e(i3,O9r),e(i3,vK),e(vK,V9r),e(i3,X9r),e(te,z9r),e(te,d3),e(d3,o5e),e(o5e,W9r),e(d3,Q9r),e(d3,FK),e(FK,H9r),e(d3,U9r),e(te,J9r),e(te,c3),e(c3,r5e),e(r5e,Y9r),e(c3,K9r),e(c3,TK),e(TK,Z9r),e(c3,exr),e(te,oxr),e(te,m3),e(m3,t5e),e(t5e,rxr),e(m3,txr),e(m3,MK),e(MK,axr),e(m3,nxr),e(te,sxr),e(te,f3),e(f3,a5e),e(a5e,lxr),e(f3,ixr),e(f3,EK),e(EK,dxr),e(f3,cxr),e(te,mxr),e(te,g3),e(g3,n5e),e(n5e,fxr),e(g3,gxr),e(g3,CK),e(CK,hxr),e(g3,uxr),e(te,pxr),e(te,h3),e(h3,s5e),e(s5e,_xr),e(h3,bxr),e(h3,wK),e(wK,vxr),e(h3,Fxr),e(te,Txr),e(te,u3),e(u3,l5e),e(l5e,Mxr),e(u3,Exr),e(u3,AK),e(AK,Cxr),e(u3,wxr),e(te,Axr),e(te,p3),e(p3,i5e),e(i5e,Lxr),e(p3,yxr),e(p3,LK),e(LK,xxr),e(p3,$xr),e(te,kxr),e(te,_3),e(_3,d5e),e(d5e,Sxr),e(_3,Rxr),e(_3,yK),e(yK,Pxr),e(_3,Bxr),e(te,Ixr),e(te,b3),e(b3,c5e),e(c5e,Nxr),e(b3,qxr),e(b3,xK),e(xK,jxr),e(b3,Dxr),e(te,Gxr),e(te,v3),e(v3,m5e),e(m5e,Oxr),e(v3,Vxr),e(v3,$K),e($K,Xxr),e(v3,zxr),e(te,Wxr),e(te,F3),e(F3,f5e),e(f5e,Qxr),e(F3,Hxr),e(F3,kK),e(kK,Uxr),e(F3,Jxr),e(te,Yxr),e(te,T3),e(T3,g5e),e(g5e,Kxr),e(T3,Zxr),e(T3,SK),e(SK,e$r),e(T3,o$r),e(te,r$r),e(te,M3),e(M3,h5e),e(h5e,t$r),e(M3,a$r),e(M3,RK),e(RK,n$r),e(M3,s$r),e(te,l$r),e(te,E3),e(E3,u5e),e(u5e,i$r),e(E3,d$r),e(E3,PK),e(PK,c$r),e(E3,m$r),e(te,f$r),e(te,C3),e(C3,p5e),e(p5e,g$r),e(C3,h$r),e(C3,BK),e(BK,u$r),e(C3,p$r),e(te,_$r),e(te,w3),e(w3,_5e),e(_5e,b$r),e(w3,v$r),e(w3,IK),e(IK,F$r),e(w3,T$r),e(te,M$r),e(te,A3),e(A3,b5e),e(b5e,E$r),e(A3,C$r),e(A3,NK),e(NK,w$r),e(A3,A$r),e(te,L$r),e(te,L3),e(L3,v5e),e(v5e,y$r),e(L3,x$r),e(L3,qK),e(qK,$$r),e(L3,k$r),e(te,S$r),e(te,y3),e(y3,F5e),e(F5e,R$r),e(y3,P$r),e(y3,jK),e(jK,B$r),e(y3,I$r),e(te,N$r),e(te,x3),e(x3,T5e),e(T5e,q$r),e(x3,j$r),e(x3,DK),e(DK,D$r),e(x3,G$r),e(te,O$r),e(te,$3),e($3,M5e),e(M5e,V$r),e($3,X$r),e($3,GK),e(GK,z$r),e($3,W$r),e(te,Q$r),e(te,k3),e(k3,E5e),e(E5e,H$r),e(k3,U$r),e(k3,OK),e(OK,J$r),e(k3,Y$r),e(te,K$r),e(te,S3),e(S3,C5e),e(C5e,Z$r),e(S3,ekr),e(S3,VK),e(VK,okr),e(S3,rkr),e(Ir,tkr),M(R3,Ir,null),b(m,cWe,_),b(m,xc,_),e(xc,P3),e(P3,w5e),M(Ix,w5e,null),e(xc,akr),e(xc,A5e),e(A5e,nkr),b(m,mWe,_),b(m,dr,_),M(Nx,dr,null),e(dr,skr),e(dr,$c),e($c,lkr),e($c,XK),e(XK,ikr),e($c,dkr),e($c,zK),e(zK,ckr),e($c,mkr),e(dr,fkr),e(dr,qx),e(qx,gkr),e(qx,L5e),e(L5e,hkr),e(qx,ukr),e(dr,pkr),e(dr,Dt),M(jx,Dt,null),e(Dt,_kr),e(Dt,y5e),e(y5e,bkr),e(Dt,vkr),e(Dt,kc),e(kc,Fkr),e(kc,x5e),e(x5e,Tkr),e(kc,Mkr),e(kc,WK),e(WK,Ekr),e(kc,Ckr),e(Dt,wkr),M(B3,Dt,null),e(dr,Akr),e(dr,Nr),M(Dx,Nr,null),e(Nr,Lkr),e(Nr,$5e),e($5e,ykr),e(Nr,xkr),e(Nr,hn),e(hn,$kr),e(hn,k5e),e(k5e,kkr),e(hn,Skr),e(hn,S5e),e(S5e,Rkr),e(hn,Pkr),e(hn,R5e),e(R5e,Bkr),e(hn,Ikr),e(Nr,Nkr),e(Nr,be),e(be,I3),e(I3,P5e),e(P5e,qkr),e(I3,jkr),e(I3,QK),e(QK,Dkr),e(I3,Gkr),e(be,Okr),e(be,N3),e(N3,B5e),e(B5e,Vkr),e(N3,Xkr),e(N3,HK),e(HK,zkr),e(N3,Wkr),e(be,Qkr),e(be,q3),e(q3,I5e),e(I5e,Hkr),e(q3,Ukr),e(q3,UK),e(UK,Jkr),e(q3,Ykr),e(be,Kkr),e(be,j3),e(j3,N5e),e(N5e,Zkr),e(j3,eSr),e(j3,JK),e(JK,oSr),e(j3,rSr),e(be,tSr),e(be,D3),e(D3,q5e),e(q5e,aSr),e(D3,nSr),e(D3,YK),e(YK,sSr),e(D3,lSr),e(be,iSr),e(be,G3),e(G3,j5e),e(j5e,dSr),e(G3,cSr),e(G3,KK),e(KK,mSr),e(G3,fSr),e(be,gSr),e(be,O3),e(O3,D5e),e(D5e,hSr),e(O3,uSr),e(O3,ZK),e(ZK,pSr),e(O3,_Sr),e(be,bSr),e(be,V3),e(V3,G5e),e(G5e,vSr),e(V3,FSr),e(V3,eZ),e(eZ,TSr),e(V3,MSr),e(be,ESr),e(be,X3),e(X3,O5e),e(O5e,CSr),e(X3,wSr),e(X3,oZ),e(oZ,ASr),e(X3,LSr),e(be,ySr),e(be,z3),e(z3,V5e),e(V5e,xSr),e(z3,$Sr),e(z3,rZ),e(rZ,kSr),e(z3,SSr),e(be,RSr),e(be,W3),e(W3,X5e),e(X5e,PSr),e(W3,BSr),e(W3,tZ),e(tZ,ISr),e(W3,NSr),e(be,qSr),e(be,Q3),e(Q3,z5e),e(z5e,jSr),e(Q3,DSr),e(Q3,aZ),e(aZ,GSr),e(Q3,OSr),e(be,VSr),e(be,H3),e(H3,W5e),e(W5e,XSr),e(H3,zSr),e(H3,nZ),e(nZ,WSr),e(H3,QSr),e(be,HSr),e(be,U3),e(U3,Q5e),e(Q5e,USr),e(U3,JSr),e(U3,sZ),e(sZ,YSr),e(U3,KSr),e(be,ZSr),e(be,J3),e(J3,H5e),e(H5e,eRr),e(J3,oRr),e(J3,lZ),e(lZ,rRr),e(J3,tRr),e(be,aRr),e(be,Y3),e(Y3,U5e),e(U5e,nRr),e(Y3,sRr),e(Y3,iZ),e(iZ,lRr),e(Y3,iRr),e(be,dRr),e(be,K3),e(K3,J5e),e(J5e,cRr),e(K3,mRr),e(K3,dZ),e(dZ,fRr),e(K3,gRr),e(Nr,hRr),M(Z3,Nr,null),b(m,fWe,_),b(m,Sc,_),e(Sc,e0),e(e0,Y5e),M(Gx,Y5e,null),e(Sc,uRr),e(Sc,K5e),e(K5e,pRr),b(m,gWe,_),b(m,cr,_),M(Ox,cr,null),e(cr,_Rr),e(cr,Rc),e(Rc,bRr),e(Rc,cZ),e(cZ,vRr),e(Rc,FRr),e(Rc,mZ),e(mZ,TRr),e(Rc,MRr),e(cr,ERr),e(cr,Vx),e(Vx,CRr),e(Vx,Z5e),e(Z5e,wRr),e(Vx,ARr),e(cr,LRr),e(cr,Gt),M(Xx,Gt,null),e(Gt,yRr),e(Gt,e3e),e(e3e,xRr),e(Gt,$Rr),e(Gt,Pc),e(Pc,kRr),e(Pc,o3e),e(o3e,SRr),e(Pc,RRr),e(Pc,fZ),e(fZ,PRr),e(Pc,BRr),e(Gt,IRr),M(o0,Gt,null),e(cr,NRr),e(cr,qr),M(zx,qr,null),e(qr,qRr),e(qr,r3e),e(r3e,jRr),e(qr,DRr),e(qr,un),e(un,GRr),e(un,t3e),e(t3e,ORr),e(un,VRr),e(un,a3e),e(a3e,XRr),e(un,zRr),e(un,n3e),e(n3e,WRr),e(un,QRr),e(qr,HRr),e(qr,Wx),e(Wx,r0),e(r0,s3e),e(s3e,URr),e(r0,JRr),e(r0,gZ),e(gZ,YRr),e(r0,KRr),e(Wx,ZRr),e(Wx,t0),e(t0,l3e),e(l3e,ePr),e(t0,oPr),e(t0,hZ),e(hZ,rPr),e(t0,tPr),e(qr,aPr),M(a0,qr,null),b(m,hWe,_),b(m,Bc,_),e(Bc,n0),e(n0,i3e),M(Qx,i3e,null),e(Bc,nPr),e(Bc,d3e),e(d3e,sPr),b(m,uWe,_),b(m,mr,_),M(Hx,mr,null),e(mr,lPr),e(mr,Ic),e(Ic,iPr),e(Ic,uZ),e(uZ,dPr),e(Ic,cPr),e(Ic,pZ),e(pZ,mPr),e(Ic,fPr),e(mr,gPr),e(mr,Ux),e(Ux,hPr),e(Ux,c3e),e(c3e,uPr),e(Ux,pPr),e(mr,_Pr),e(mr,Ot),M(Jx,Ot,null),e(Ot,bPr),e(Ot,m3e),e(m3e,vPr),e(Ot,FPr),e(Ot,Nc),e(Nc,TPr),e(Nc,f3e),e(f3e,MPr),e(Nc,EPr),e(Nc,_Z),e(_Z,CPr),e(Nc,wPr),e(Ot,APr),M(s0,Ot,null),e(mr,LPr),e(mr,jr),M(Yx,jr,null),e(jr,yPr),e(jr,g3e),e(g3e,xPr),e(jr,$Pr),e(jr,pn),e(pn,kPr),e(pn,h3e),e(h3e,SPr),e(pn,RPr),e(pn,u3e),e(u3e,PPr),e(pn,BPr),e(pn,p3e),e(p3e,IPr),e(pn,NPr),e(jr,qPr),e(jr,_3e),e(_3e,l0),e(l0,b3e),e(b3e,jPr),e(l0,DPr),e(l0,bZ),e(bZ,GPr),e(l0,OPr),e(jr,VPr),M(i0,jr,null),b(m,pWe,_),b(m,qc,_),e(qc,d0),e(d0,v3e),M(Kx,v3e,null),e(qc,XPr),e(qc,F3e),e(F3e,zPr),b(m,_We,_),b(m,fr,_),M(Zx,fr,null),e(fr,WPr),e(fr,jc),e(jc,QPr),e(jc,vZ),e(vZ,HPr),e(jc,UPr),e(jc,FZ),e(FZ,JPr),e(jc,YPr),e(fr,KPr),e(fr,e$),e(e$,ZPr),e(e$,T3e),e(T3e,eBr),e(e$,oBr),e(fr,rBr),e(fr,Vt),M(o$,Vt,null),e(Vt,tBr),e(Vt,M3e),e(M3e,aBr),e(Vt,nBr),e(Vt,Dc),e(Dc,sBr),e(Dc,E3e),e(E3e,lBr),e(Dc,iBr),e(Dc,TZ),e(TZ,dBr),e(Dc,cBr),e(Vt,mBr),M(c0,Vt,null),e(fr,fBr),e(fr,Dr),M(r$,Dr,null),e(Dr,gBr),e(Dr,C3e),e(C3e,hBr),e(Dr,uBr),e(Dr,_n),e(_n,pBr),e(_n,w3e),e(w3e,_Br),e(_n,bBr),e(_n,A3e),e(A3e,vBr),e(_n,FBr),e(_n,L3e),e(L3e,TBr),e(_n,MBr),e(Dr,EBr),e(Dr,de),e(de,m0),e(m0,y3e),e(y3e,CBr),e(m0,wBr),e(m0,MZ),e(MZ,ABr),e(m0,LBr),e(de,yBr),e(de,f0),e(f0,x3e),e(x3e,xBr),e(f0,$Br),e(f0,EZ),e(EZ,kBr),e(f0,SBr),e(de,RBr),e(de,g0),e(g0,$3e),e($3e,PBr),e(g0,BBr),e(g0,CZ),e(CZ,IBr),e(g0,NBr),e(de,qBr),e(de,h0),e(h0,k3e),e(k3e,jBr),e(h0,DBr),e(h0,wZ),e(wZ,GBr),e(h0,OBr),e(de,VBr),e(de,u0),e(u0,S3e),e(S3e,XBr),e(u0,zBr),e(u0,AZ),e(AZ,WBr),e(u0,QBr),e(de,HBr),e(de,p0),e(p0,R3e),e(R3e,UBr),e(p0,JBr),e(p0,LZ),e(LZ,YBr),e(p0,KBr),e(de,ZBr),e(de,_0),e(_0,P3e),e(P3e,eIr),e(_0,oIr),e(_0,yZ),e(yZ,rIr),e(_0,tIr),e(de,aIr),e(de,b0),e(b0,B3e),e(B3e,nIr),e(b0,sIr),e(b0,xZ),e(xZ,lIr),e(b0,iIr),e(de,dIr),e(de,v0),e(v0,I3e),e(I3e,cIr),e(v0,mIr),e(v0,$Z),e($Z,fIr),e(v0,gIr),e(de,hIr),e(de,F0),e(F0,N3e),e(N3e,uIr),e(F0,pIr),e(F0,kZ),e(kZ,_Ir),e(F0,bIr),e(de,vIr),e(de,T0),e(T0,q3e),e(q3e,FIr),e(T0,TIr),e(T0,SZ),e(SZ,MIr),e(T0,EIr),e(de,CIr),e(de,M0),e(M0,j3e),e(j3e,wIr),e(M0,AIr),e(M0,RZ),e(RZ,LIr),e(M0,yIr),e(de,xIr),e(de,E0),e(E0,D3e),e(D3e,$Ir),e(E0,kIr),e(E0,PZ),e(PZ,SIr),e(E0,RIr),e(de,PIr),e(de,C0),e(C0,G3e),e(G3e,BIr),e(C0,IIr),e(C0,BZ),e(BZ,NIr),e(C0,qIr),e(de,jIr),e(de,w0),e(w0,O3e),e(O3e,DIr),e(w0,GIr),e(w0,IZ),e(IZ,OIr),e(w0,VIr),e(de,XIr),e(de,A0),e(A0,V3e),e(V3e,zIr),e(A0,WIr),e(A0,NZ),e(NZ,QIr),e(A0,HIr),e(de,UIr),e(de,L0),e(L0,X3e),e(X3e,JIr),e(L0,YIr),e(L0,qZ),e(qZ,KIr),e(L0,ZIr),e(de,eNr),e(de,y0),e(y0,z3e),e(z3e,oNr),e(y0,rNr),e(y0,jZ),e(jZ,tNr),e(y0,aNr),e(de,nNr),e(de,x0),e(x0,W3e),e(W3e,sNr),e(x0,lNr),e(x0,DZ),e(DZ,iNr),e(x0,dNr),e(de,cNr),e(de,$0),e($0,Q3e),e(Q3e,mNr),e($0,fNr),e($0,GZ),e(GZ,gNr),e($0,hNr),e(Dr,uNr),M(k0,Dr,null),b(m,bWe,_),b(m,Gc,_),e(Gc,S0),e(S0,H3e),M(t$,H3e,null),e(Gc,pNr),e(Gc,U3e),e(U3e,_Nr),b(m,vWe,_),b(m,gr,_),M(a$,gr,null),e(gr,bNr),e(gr,Oc),e(Oc,vNr),e(Oc,OZ),e(OZ,FNr),e(Oc,TNr),e(Oc,VZ),e(VZ,MNr),e(Oc,ENr),e(gr,CNr),e(gr,n$),e(n$,wNr),e(n$,J3e),e(J3e,ANr),e(n$,LNr),e(gr,yNr),e(gr,Xt),M(s$,Xt,null),e(Xt,xNr),e(Xt,Y3e),e(Y3e,$Nr),e(Xt,kNr),e(Xt,Vc),e(Vc,SNr),e(Vc,K3e),e(K3e,RNr),e(Vc,PNr),e(Vc,XZ),e(XZ,BNr),e(Vc,INr),e(Xt,NNr),M(R0,Xt,null),e(gr,qNr),e(gr,Gr),M(l$,Gr,null),e(Gr,jNr),e(Gr,Z3e),e(Z3e,DNr),e(Gr,GNr),e(Gr,bn),e(bn,ONr),e(bn,e0e),e(e0e,VNr),e(bn,XNr),e(bn,o0e),e(o0e,zNr),e(bn,WNr),e(bn,r0e),e(r0e,QNr),e(bn,HNr),e(Gr,UNr),e(Gr,ce),e(ce,P0),e(P0,t0e),e(t0e,JNr),e(P0,YNr),e(P0,zZ),e(zZ,KNr),e(P0,ZNr),e(ce,eqr),e(ce,B0),e(B0,a0e),e(a0e,oqr),e(B0,rqr),e(B0,WZ),e(WZ,tqr),e(B0,aqr),e(ce,nqr),e(ce,I0),e(I0,n0e),e(n0e,sqr),e(I0,lqr),e(I0,QZ),e(QZ,iqr),e(I0,dqr),e(ce,cqr),e(ce,N0),e(N0,s0e),e(s0e,mqr),e(N0,fqr),e(N0,HZ),e(HZ,gqr),e(N0,hqr),e(ce,uqr),e(ce,q0),e(q0,l0e),e(l0e,pqr),e(q0,_qr),e(q0,UZ),e(UZ,bqr),e(q0,vqr),e(ce,Fqr),e(ce,j0),e(j0,i0e),e(i0e,Tqr),e(j0,Mqr),e(j0,JZ),e(JZ,Eqr),e(j0,Cqr),e(ce,wqr),e(ce,D0),e(D0,d0e),e(d0e,Aqr),e(D0,Lqr),e(D0,YZ),e(YZ,yqr),e(D0,xqr),e(ce,$qr),e(ce,G0),e(G0,c0e),e(c0e,kqr),e(G0,Sqr),e(G0,KZ),e(KZ,Rqr),e(G0,Pqr),e(ce,Bqr),e(ce,O0),e(O0,m0e),e(m0e,Iqr),e(O0,Nqr),e(O0,ZZ),e(ZZ,qqr),e(O0,jqr),e(ce,Dqr),e(ce,V0),e(V0,f0e),e(f0e,Gqr),e(V0,Oqr),e(V0,eee),e(eee,Vqr),e(V0,Xqr),e(ce,zqr),e(ce,X0),e(X0,g0e),e(g0e,Wqr),e(X0,Qqr),e(X0,oee),e(oee,Hqr),e(X0,Uqr),e(ce,Jqr),e(ce,z0),e(z0,h0e),e(h0e,Yqr),e(z0,Kqr),e(z0,ree),e(ree,Zqr),e(z0,ejr),e(ce,ojr),e(ce,W0),e(W0,u0e),e(u0e,rjr),e(W0,tjr),e(W0,tee),e(tee,ajr),e(W0,njr),e(ce,sjr),e(ce,Q0),e(Q0,p0e),e(p0e,ljr),e(Q0,ijr),e(Q0,aee),e(aee,djr),e(Q0,cjr),e(ce,mjr),e(ce,H0),e(H0,_0e),e(_0e,fjr),e(H0,gjr),e(H0,nee),e(nee,hjr),e(H0,ujr),e(ce,pjr),e(ce,U0),e(U0,b0e),e(b0e,_jr),e(U0,bjr),e(U0,see),e(see,vjr),e(U0,Fjr),e(ce,Tjr),e(ce,J0),e(J0,v0e),e(v0e,Mjr),e(J0,Ejr),e(J0,lee),e(lee,Cjr),e(J0,wjr),e(ce,Ajr),e(ce,Y0),e(Y0,F0e),e(F0e,Ljr),e(Y0,yjr),e(Y0,iee),e(iee,xjr),e(Y0,$jr),e(ce,kjr),e(ce,K0),e(K0,T0e),e(T0e,Sjr),e(K0,Rjr),e(K0,dee),e(dee,Pjr),e(K0,Bjr),e(ce,Ijr),e(ce,Z0),e(Z0,M0e),e(M0e,Njr),e(Z0,qjr),e(Z0,cee),e(cee,jjr),e(Z0,Djr),e(Gr,Gjr),M(ew,Gr,null),b(m,FWe,_),b(m,Xc,_),e(Xc,ow),e(ow,E0e),M(i$,E0e,null),e(Xc,Ojr),e(Xc,C0e),e(C0e,Vjr),b(m,TWe,_),b(m,hr,_),M(d$,hr,null),e(hr,Xjr),e(hr,zc),e(zc,zjr),e(zc,mee),e(mee,Wjr),e(zc,Qjr),e(zc,fee),e(fee,Hjr),e(zc,Ujr),e(hr,Jjr),e(hr,c$),e(c$,Yjr),e(c$,w0e),e(w0e,Kjr),e(c$,Zjr),e(hr,eDr),e(hr,zt),M(m$,zt,null),e(zt,oDr),e(zt,A0e),e(A0e,rDr),e(zt,tDr),e(zt,Wc),e(Wc,aDr),e(Wc,L0e),e(L0e,nDr),e(Wc,sDr),e(Wc,gee),e(gee,lDr),e(Wc,iDr),e(zt,dDr),M(rw,zt,null),e(hr,cDr),e(hr,Or),M(f$,Or,null),e(Or,mDr),e(Or,y0e),e(y0e,fDr),e(Or,gDr),e(Or,vn),e(vn,hDr),e(vn,x0e),e(x0e,uDr),e(vn,pDr),e(vn,$0e),e($0e,_Dr),e(vn,bDr),e(vn,k0e),e(k0e,vDr),e(vn,FDr),e(Or,TDr),e(Or,S0e),e(S0e,tw),e(tw,R0e),e(R0e,MDr),e(tw,EDr),e(tw,hee),e(hee,CDr),e(tw,wDr),e(Or,ADr),M(aw,Or,null),b(m,MWe,_),b(m,Qc,_),e(Qc,nw),e(nw,P0e),M(g$,P0e,null),e(Qc,LDr),e(Qc,B0e),e(B0e,yDr),b(m,EWe,_),b(m,ur,_),M(h$,ur,null),e(ur,xDr),e(ur,Hc),e(Hc,$Dr),e(Hc,uee),e(uee,kDr),e(Hc,SDr),e(Hc,pee),e(pee,RDr),e(Hc,PDr),e(ur,BDr),e(ur,u$),e(u$,IDr),e(u$,I0e),e(I0e,NDr),e(u$,qDr),e(ur,jDr),e(ur,Wt),M(p$,Wt,null),e(Wt,DDr),e(Wt,N0e),e(N0e,GDr),e(Wt,ODr),e(Wt,Uc),e(Uc,VDr),e(Uc,q0e),e(q0e,XDr),e(Uc,zDr),e(Uc,_ee),e(_ee,WDr),e(Uc,QDr),e(Wt,HDr),M(sw,Wt,null),e(ur,UDr),e(ur,Vr),M(_$,Vr,null),e(Vr,JDr),e(Vr,j0e),e(j0e,YDr),e(Vr,KDr),e(Vr,Fn),e(Fn,ZDr),e(Fn,D0e),e(D0e,eGr),e(Fn,oGr),e(Fn,G0e),e(G0e,rGr),e(Fn,tGr),e(Fn,O0e),e(O0e,aGr),e(Fn,nGr),e(Vr,sGr),e(Vr,V0e),e(V0e,lw),e(lw,X0e),e(X0e,lGr),e(lw,iGr),e(lw,bee),e(bee,dGr),e(lw,cGr),e(Vr,mGr),M(iw,Vr,null),b(m,CWe,_),b(m,Jc,_),e(Jc,dw),e(dw,z0e),M(b$,z0e,null),e(Jc,fGr),e(Jc,W0e),e(W0e,gGr),b(m,wWe,_),b(m,pr,_),M(v$,pr,null),e(pr,hGr),e(pr,Yc),e(Yc,uGr),e(Yc,vee),e(vee,pGr),e(Yc,_Gr),e(Yc,Fee),e(Fee,bGr),e(Yc,vGr),e(pr,FGr),e(pr,F$),e(F$,TGr),e(F$,Q0e),e(Q0e,MGr),e(F$,EGr),e(pr,CGr),e(pr,Qt),M(T$,Qt,null),e(Qt,wGr),e(Qt,H0e),e(H0e,AGr),e(Qt,LGr),e(Qt,Kc),e(Kc,yGr),e(Kc,U0e),e(U0e,xGr),e(Kc,$Gr),e(Kc,Tee),e(Tee,kGr),e(Kc,SGr),e(Qt,RGr),M(cw,Qt,null),e(pr,PGr),e(pr,Xr),M(M$,Xr,null),e(Xr,BGr),e(Xr,J0e),e(J0e,IGr),e(Xr,NGr),e(Xr,Tn),e(Tn,qGr),e(Tn,Y0e),e(Y0e,jGr),e(Tn,DGr),e(Tn,K0e),e(K0e,GGr),e(Tn,OGr),e(Tn,Z0e),e(Z0e,VGr),e(Tn,XGr),e(Xr,zGr),e(Xr,oe),e(oe,mw),e(mw,ewe),e(ewe,WGr),e(mw,QGr),e(mw,Mee),e(Mee,HGr),e(mw,UGr),e(oe,JGr),e(oe,fw),e(fw,owe),e(owe,YGr),e(fw,KGr),e(fw,Eee),e(Eee,ZGr),e(fw,eOr),e(oe,oOr),e(oe,gw),e(gw,rwe),e(rwe,rOr),e(gw,tOr),e(gw,Cee),e(Cee,aOr),e(gw,nOr),e(oe,sOr),e(oe,hw),e(hw,twe),e(twe,lOr),e(hw,iOr),e(hw,wee),e(wee,dOr),e(hw,cOr),e(oe,mOr),e(oe,uw),e(uw,awe),e(awe,fOr),e(uw,gOr),e(uw,Aee),e(Aee,hOr),e(uw,uOr),e(oe,pOr),e(oe,pw),e(pw,nwe),e(nwe,_Or),e(pw,bOr),e(pw,Lee),e(Lee,vOr),e(pw,FOr),e(oe,TOr),e(oe,_w),e(_w,swe),e(swe,MOr),e(_w,EOr),e(_w,yee),e(yee,COr),e(_w,wOr),e(oe,AOr),e(oe,bw),e(bw,lwe),e(lwe,LOr),e(bw,yOr),e(bw,xee),e(xee,xOr),e(bw,$Or),e(oe,kOr),e(oe,vw),e(vw,iwe),e(iwe,SOr),e(vw,ROr),e(vw,$ee),e($ee,POr),e(vw,BOr),e(oe,IOr),e(oe,Fw),e(Fw,dwe),e(dwe,NOr),e(Fw,qOr),e(Fw,kee),e(kee,jOr),e(Fw,DOr),e(oe,GOr),e(oe,Tw),e(Tw,cwe),e(cwe,OOr),e(Tw,VOr),e(Tw,See),e(See,XOr),e(Tw,zOr),e(oe,WOr),e(oe,Mw),e(Mw,mwe),e(mwe,QOr),e(Mw,HOr),e(Mw,Ree),e(Ree,UOr),e(Mw,JOr),e(oe,YOr),e(oe,Ew),e(Ew,fwe),e(fwe,KOr),e(Ew,ZOr),e(Ew,Pee),e(Pee,eVr),e(Ew,oVr),e(oe,rVr),e(oe,Cw),e(Cw,gwe),e(gwe,tVr),e(Cw,aVr),e(Cw,Bee),e(Bee,nVr),e(Cw,sVr),e(oe,lVr),e(oe,ww),e(ww,hwe),e(hwe,iVr),e(ww,dVr),e(ww,Iee),e(Iee,cVr),e(ww,mVr),e(oe,fVr),e(oe,Aw),e(Aw,uwe),e(uwe,gVr),e(Aw,hVr),e(Aw,Nee),e(Nee,uVr),e(Aw,pVr),e(oe,_Vr),e(oe,Lw),e(Lw,pwe),e(pwe,bVr),e(Lw,vVr),e(Lw,qee),e(qee,FVr),e(Lw,TVr),e(oe,MVr),e(oe,yw),e(yw,_we),e(_we,EVr),e(yw,CVr),e(yw,jee),e(jee,wVr),e(yw,AVr),e(oe,LVr),e(oe,xw),e(xw,bwe),e(bwe,yVr),e(xw,xVr),e(xw,Dee),e(Dee,$Vr),e(xw,kVr),e(oe,SVr),e(oe,$w),e($w,vwe),e(vwe,RVr),e($w,PVr),e($w,Gee),e(Gee,BVr),e($w,IVr),e(oe,NVr),e(oe,kw),e(kw,Fwe),e(Fwe,qVr),e(kw,jVr),e(kw,Oee),e(Oee,DVr),e(kw,GVr),e(oe,OVr),e(oe,Sw),e(Sw,Twe),e(Twe,VVr),e(Sw,XVr),e(Sw,Vee),e(Vee,zVr),e(Sw,WVr),e(oe,QVr),e(oe,Rw),e(Rw,Mwe),e(Mwe,HVr),e(Rw,UVr),e(Rw,Xee),e(Xee,JVr),e(Rw,YVr),e(oe,KVr),e(oe,Pw),e(Pw,Ewe),e(Ewe,ZVr),e(Pw,eXr),e(Pw,zee),e(zee,oXr),e(Pw,rXr),e(oe,tXr),e(oe,Bw),e(Bw,Cwe),e(Cwe,aXr),e(Bw,nXr),e(Bw,Wee),e(Wee,sXr),e(Bw,lXr),e(oe,iXr),e(oe,Iw),e(Iw,wwe),e(wwe,dXr),e(Iw,cXr),e(Iw,Qee),e(Qee,mXr),e(Iw,fXr),e(oe,gXr),e(oe,Nw),e(Nw,Awe),e(Awe,hXr),e(Nw,uXr),e(Nw,Hee),e(Hee,pXr),e(Nw,_Xr),e(Xr,bXr),M(qw,Xr,null),b(m,AWe,_),b(m,Zc,_),e(Zc,jw),e(jw,Lwe),M(E$,Lwe,null),e(Zc,vXr),e(Zc,ywe),e(ywe,FXr),b(m,LWe,_),b(m,_r,_),M(C$,_r,null),e(_r,TXr),e(_r,em),e(em,MXr),e(em,Uee),e(Uee,EXr),e(em,CXr),e(em,Jee),e(Jee,wXr),e(em,AXr),e(_r,LXr),e(_r,w$),e(w$,yXr),e(w$,xwe),e(xwe,xXr),e(w$,$Xr),e(_r,kXr),e(_r,Ht),M(A$,Ht,null),e(Ht,SXr),e(Ht,$we),e($we,RXr),e(Ht,PXr),e(Ht,om),e(om,BXr),e(om,kwe),e(kwe,IXr),e(om,NXr),e(om,Yee),e(Yee,qXr),e(om,jXr),e(Ht,DXr),M(Dw,Ht,null),e(_r,GXr),e(_r,zr),M(L$,zr,null),e(zr,OXr),e(zr,Swe),e(Swe,VXr),e(zr,XXr),e(zr,Mn),e(Mn,zXr),e(Mn,Rwe),e(Rwe,WXr),e(Mn,QXr),e(Mn,Pwe),e(Pwe,HXr),e(Mn,UXr),e(Mn,Bwe),e(Bwe,JXr),e(Mn,YXr),e(zr,KXr),e(zr,xe),e(xe,Gw),e(Gw,Iwe),e(Iwe,ZXr),e(Gw,ezr),e(Gw,Kee),e(Kee,ozr),e(Gw,rzr),e(xe,tzr),e(xe,Ow),e(Ow,Nwe),e(Nwe,azr),e(Ow,nzr),e(Ow,Zee),e(Zee,szr),e(Ow,lzr),e(xe,izr),e(xe,Vw),e(Vw,qwe),e(qwe,dzr),e(Vw,czr),e(Vw,eoe),e(eoe,mzr),e(Vw,fzr),e(xe,gzr),e(xe,Xw),e(Xw,jwe),e(jwe,hzr),e(Xw,uzr),e(Xw,ooe),e(ooe,pzr),e(Xw,_zr),e(xe,bzr),e(xe,zw),e(zw,Dwe),e(Dwe,vzr),e(zw,Fzr),e(zw,roe),e(roe,Tzr),e(zw,Mzr),e(xe,Ezr),e(xe,Ww),e(Ww,Gwe),e(Gwe,Czr),e(Ww,wzr),e(Ww,toe),e(toe,Azr),e(Ww,Lzr),e(xe,yzr),e(xe,Qw),e(Qw,Owe),e(Owe,xzr),e(Qw,$zr),e(Qw,aoe),e(aoe,kzr),e(Qw,Szr),e(xe,Rzr),e(xe,Hw),e(Hw,Vwe),e(Vwe,Pzr),e(Hw,Bzr),e(Hw,noe),e(noe,Izr),e(Hw,Nzr),e(xe,qzr),e(xe,Uw),e(Uw,Xwe),e(Xwe,jzr),e(Uw,Dzr),e(Uw,soe),e(soe,Gzr),e(Uw,Ozr),e(xe,Vzr),e(xe,Jw),e(Jw,zwe),e(zwe,Xzr),e(Jw,zzr),e(Jw,loe),e(loe,Wzr),e(Jw,Qzr),e(zr,Hzr),M(Yw,zr,null),b(m,yWe,_),b(m,rm,_),e(rm,Kw),e(Kw,Wwe),M(y$,Wwe,null),e(rm,Uzr),e(rm,Qwe),e(Qwe,Jzr),b(m,xWe,_),b(m,br,_),M(x$,br,null),e(br,Yzr),e(br,tm),e(tm,Kzr),e(tm,ioe),e(ioe,Zzr),e(tm,eWr),e(tm,doe),e(doe,oWr),e(tm,rWr),e(br,tWr),e(br,$$),e($$,aWr),e($$,Hwe),e(Hwe,nWr),e($$,sWr),e(br,lWr),e(br,Ut),M(k$,Ut,null),e(Ut,iWr),e(Ut,Uwe),e(Uwe,dWr),e(Ut,cWr),e(Ut,am),e(am,mWr),e(am,Jwe),e(Jwe,fWr),e(am,gWr),e(am,coe),e(coe,hWr),e(am,uWr),e(Ut,pWr),M(Zw,Ut,null),e(br,_Wr),e(br,Wr),M(S$,Wr,null),e(Wr,bWr),e(Wr,Ywe),e(Ywe,vWr),e(Wr,FWr),e(Wr,En),e(En,TWr),e(En,Kwe),e(Kwe,MWr),e(En,EWr),e(En,Zwe),e(Zwe,CWr),e(En,wWr),e(En,eAe),e(eAe,AWr),e(En,LWr),e(Wr,yWr),e(Wr,Ee),e(Ee,eA),e(eA,oAe),e(oAe,xWr),e(eA,$Wr),e(eA,moe),e(moe,kWr),e(eA,SWr),e(Ee,RWr),e(Ee,oA),e(oA,rAe),e(rAe,PWr),e(oA,BWr),e(oA,foe),e(foe,IWr),e(oA,NWr),e(Ee,qWr),e(Ee,rA),e(rA,tAe),e(tAe,jWr),e(rA,DWr),e(rA,goe),e(goe,GWr),e(rA,OWr),e(Ee,VWr),e(Ee,tA),e(tA,aAe),e(aAe,XWr),e(tA,zWr),e(tA,hoe),e(hoe,WWr),e(tA,QWr),e(Ee,HWr),e(Ee,aA),e(aA,nAe),e(nAe,UWr),e(aA,JWr),e(aA,uoe),e(uoe,YWr),e(aA,KWr),e(Ee,ZWr),e(Ee,nA),e(nA,sAe),e(sAe,eQr),e(nA,oQr),e(nA,poe),e(poe,rQr),e(nA,tQr),e(Ee,aQr),e(Ee,sA),e(sA,lAe),e(lAe,nQr),e(sA,sQr),e(sA,_oe),e(_oe,lQr),e(sA,iQr),e(Ee,dQr),e(Ee,lA),e(lA,iAe),e(iAe,cQr),e(lA,mQr),e(lA,boe),e(boe,fQr),e(lA,gQr),e(Ee,hQr),e(Ee,iA),e(iA,dAe),e(dAe,uQr),e(iA,pQr),e(iA,voe),e(voe,_Qr),e(iA,bQr),e(Ee,vQr),e(Ee,dA),e(dA,cAe),e(cAe,FQr),e(dA,TQr),e(dA,Foe),e(Foe,MQr),e(dA,EQr),e(Ee,CQr),e(Ee,cA),e(cA,mAe),e(mAe,wQr),e(cA,AQr),e(cA,Toe),e(Toe,LQr),e(cA,yQr),e(Ee,xQr),e(Ee,mA),e(mA,fAe),e(fAe,$Qr),e(mA,kQr),e(mA,Moe),e(Moe,SQr),e(mA,RQr),e(Ee,PQr),e(Ee,fA),e(fA,gAe),e(gAe,BQr),e(fA,IQr),e(fA,Eoe),e(Eoe,NQr),e(fA,qQr),e(Wr,jQr),M(gA,Wr,null),b(m,$We,_),b(m,nm,_),e(nm,hA),e(hA,hAe),M(R$,hAe,null),e(nm,DQr),e(nm,uAe),e(uAe,GQr),b(m,kWe,_),b(m,vr,_),M(P$,vr,null),e(vr,OQr),e(vr,sm),e(sm,VQr),e(sm,Coe),e(Coe,XQr),e(sm,zQr),e(sm,woe),e(woe,WQr),e(sm,QQr),e(vr,HQr),e(vr,B$),e(B$,UQr),e(B$,pAe),e(pAe,JQr),e(B$,YQr),e(vr,KQr),e(vr,Jt),M(I$,Jt,null),e(Jt,ZQr),e(Jt,_Ae),e(_Ae,eHr),e(Jt,oHr),e(Jt,lm),e(lm,rHr),e(lm,bAe),e(bAe,tHr),e(lm,aHr),e(lm,Aoe),e(Aoe,nHr),e(lm,sHr),e(Jt,lHr),M(uA,Jt,null),e(vr,iHr),e(vr,Qr),M(N$,Qr,null),e(Qr,dHr),e(Qr,vAe),e(vAe,cHr),e(Qr,mHr),e(Qr,Cn),e(Cn,fHr),e(Cn,FAe),e(FAe,gHr),e(Cn,hHr),e(Cn,TAe),e(TAe,uHr),e(Cn,pHr),e(Cn,MAe),e(MAe,_Hr),e(Cn,bHr),e(Qr,vHr),e(Qr,$e),e($e,pA),e(pA,EAe),e(EAe,FHr),e(pA,THr),e(pA,Loe),e(Loe,MHr),e(pA,EHr),e($e,CHr),e($e,_A),e(_A,CAe),e(CAe,wHr),e(_A,AHr),e(_A,yoe),e(yoe,LHr),e(_A,yHr),e($e,xHr),e($e,bA),e(bA,wAe),e(wAe,$Hr),e(bA,kHr),e(bA,xoe),e(xoe,SHr),e(bA,RHr),e($e,PHr),e($e,vA),e(vA,AAe),e(AAe,BHr),e(vA,IHr),e(vA,$oe),e($oe,NHr),e(vA,qHr),e($e,jHr),e($e,FA),e(FA,LAe),e(LAe,DHr),e(FA,GHr),e(FA,koe),e(koe,OHr),e(FA,VHr),e($e,XHr),e($e,TA),e(TA,yAe),e(yAe,zHr),e(TA,WHr),e(TA,Soe),e(Soe,QHr),e(TA,HHr),e($e,UHr),e($e,MA),e(MA,xAe),e(xAe,JHr),e(MA,YHr),e(MA,Roe),e(Roe,KHr),e(MA,ZHr),e($e,eUr),e($e,EA),e(EA,$Ae),e($Ae,oUr),e(EA,rUr),e(EA,Poe),e(Poe,tUr),e(EA,aUr),e($e,nUr),e($e,CA),e(CA,kAe),e(kAe,sUr),e(CA,lUr),e(CA,Boe),e(Boe,iUr),e(CA,dUr),e($e,cUr),e($e,wA),e(wA,SAe),e(SAe,mUr),e(wA,fUr),e(wA,Ioe),e(Ioe,gUr),e(wA,hUr),e(Qr,uUr),M(AA,Qr,null),b(m,SWe,_),b(m,im,_),e(im,LA),e(LA,RAe),M(q$,RAe,null),e(im,pUr),e(im,PAe),e(PAe,_Ur),b(m,RWe,_),b(m,Fr,_),M(j$,Fr,null),e(Fr,bUr),e(Fr,dm),e(dm,vUr),e(dm,Noe),e(Noe,FUr),e(dm,TUr),e(dm,qoe),e(qoe,MUr),e(dm,EUr),e(Fr,CUr),e(Fr,D$),e(D$,wUr),e(D$,BAe),e(BAe,AUr),e(D$,LUr),e(Fr,yUr),e(Fr,Yt),M(G$,Yt,null),e(Yt,xUr),e(Yt,IAe),e(IAe,$Ur),e(Yt,kUr),e(Yt,cm),e(cm,SUr),e(cm,NAe),e(NAe,RUr),e(cm,PUr),e(cm,joe),e(joe,BUr),e(cm,IUr),e(Yt,NUr),M(yA,Yt,null),e(Fr,qUr),e(Fr,Hr),M(O$,Hr,null),e(Hr,jUr),e(Hr,qAe),e(qAe,DUr),e(Hr,GUr),e(Hr,wn),e(wn,OUr),e(wn,jAe),e(jAe,VUr),e(wn,XUr),e(wn,DAe),e(DAe,zUr),e(wn,WUr),e(wn,GAe),e(GAe,QUr),e(wn,HUr),e(Hr,UUr),e(Hr,ke),e(ke,xA),e(xA,OAe),e(OAe,JUr),e(xA,YUr),e(xA,Doe),e(Doe,KUr),e(xA,ZUr),e(ke,eJr),e(ke,$A),e($A,VAe),e(VAe,oJr),e($A,rJr),e($A,Goe),e(Goe,tJr),e($A,aJr),e(ke,nJr),e(ke,kA),e(kA,XAe),e(XAe,sJr),e(kA,lJr),e(kA,Ooe),e(Ooe,iJr),e(kA,dJr),e(ke,cJr),e(ke,SA),e(SA,zAe),e(zAe,mJr),e(SA,fJr),e(SA,Voe),e(Voe,gJr),e(SA,hJr),e(ke,uJr),e(ke,RA),e(RA,WAe),e(WAe,pJr),e(RA,_Jr),e(RA,Xoe),e(Xoe,bJr),e(RA,vJr),e(ke,FJr),e(ke,PA),e(PA,QAe),e(QAe,TJr),e(PA,MJr),e(PA,zoe),e(zoe,EJr),e(PA,CJr),e(ke,wJr),e(ke,BA),e(BA,HAe),e(HAe,AJr),e(BA,LJr),e(BA,Woe),e(Woe,yJr),e(BA,xJr),e(ke,$Jr),e(ke,IA),e(IA,UAe),e(UAe,kJr),e(IA,SJr),e(IA,Qoe),e(Qoe,RJr),e(IA,PJr),e(ke,BJr),e(ke,NA),e(NA,JAe),e(JAe,IJr),e(NA,NJr),e(NA,Hoe),e(Hoe,qJr),e(NA,jJr),e(ke,DJr),e(ke,qA),e(qA,YAe),e(YAe,GJr),e(qA,OJr),e(qA,Uoe),e(Uoe,VJr),e(qA,XJr),e(Hr,zJr),M(jA,Hr,null),b(m,PWe,_),b(m,mm,_),e(mm,DA),e(DA,KAe),M(V$,KAe,null),e(mm,WJr),e(mm,ZAe),e(ZAe,QJr),b(m,BWe,_),b(m,Tr,_),M(X$,Tr,null),e(Tr,HJr),e(Tr,fm),e(fm,UJr),e(fm,Joe),e(Joe,JJr),e(fm,YJr),e(fm,Yoe),e(Yoe,KJr),e(fm,ZJr),e(Tr,eYr),e(Tr,z$),e(z$,oYr),e(z$,e6e),e(e6e,rYr),e(z$,tYr),e(Tr,aYr),e(Tr,Kt),M(W$,Kt,null),e(Kt,nYr),e(Kt,o6e),e(o6e,sYr),e(Kt,lYr),e(Kt,gm),e(gm,iYr),e(gm,r6e),e(r6e,dYr),e(gm,cYr),e(gm,Koe),e(Koe,mYr),e(gm,fYr),e(Kt,gYr),M(GA,Kt,null),e(Tr,hYr),e(Tr,Ur),M(Q$,Ur,null),e(Ur,uYr),e(Ur,t6e),e(t6e,pYr),e(Ur,_Yr),e(Ur,An),e(An,bYr),e(An,a6e),e(a6e,vYr),e(An,FYr),e(An,n6e),e(n6e,TYr),e(An,MYr),e(An,s6e),e(s6e,EYr),e(An,CYr),e(Ur,wYr),e(Ur,Se),e(Se,OA),e(OA,l6e),e(l6e,AYr),e(OA,LYr),e(OA,Zoe),e(Zoe,yYr),e(OA,xYr),e(Se,$Yr),e(Se,VA),e(VA,i6e),e(i6e,kYr),e(VA,SYr),e(VA,ere),e(ere,RYr),e(VA,PYr),e(Se,BYr),e(Se,XA),e(XA,d6e),e(d6e,IYr),e(XA,NYr),e(XA,ore),e(ore,qYr),e(XA,jYr),e(Se,DYr),e(Se,zA),e(zA,c6e),e(c6e,GYr),e(zA,OYr),e(zA,rre),e(rre,VYr),e(zA,XYr),e(Se,zYr),e(Se,WA),e(WA,m6e),e(m6e,WYr),e(WA,QYr),e(WA,tre),e(tre,HYr),e(WA,UYr),e(Se,JYr),e(Se,QA),e(QA,f6e),e(f6e,YYr),e(QA,KYr),e(QA,are),e(are,ZYr),e(QA,eKr),e(Se,oKr),e(Se,HA),e(HA,g6e),e(g6e,rKr),e(HA,tKr),e(HA,nre),e(nre,aKr),e(HA,nKr),e(Se,sKr),e(Se,UA),e(UA,h6e),e(h6e,lKr),e(UA,iKr),e(UA,sre),e(sre,dKr),e(UA,cKr),e(Se,mKr),e(Se,JA),e(JA,u6e),e(u6e,fKr),e(JA,gKr),e(JA,lre),e(lre,hKr),e(JA,uKr),e(Se,pKr),e(Se,YA),e(YA,p6e),e(p6e,_Kr),e(YA,bKr),e(YA,ire),e(ire,vKr),e(YA,FKr),e(Ur,TKr),M(KA,Ur,null),b(m,IWe,_),b(m,hm,_),e(hm,ZA),e(ZA,_6e),M(H$,_6e,null),e(hm,MKr),e(hm,b6e),e(b6e,EKr),b(m,NWe,_),b(m,Mr,_),M(U$,Mr,null),e(Mr,CKr),e(Mr,um),e(um,wKr),e(um,dre),e(dre,AKr),e(um,LKr),e(um,cre),e(cre,yKr),e(um,xKr),e(Mr,$Kr),e(Mr,J$),e(J$,kKr),e(J$,v6e),e(v6e,SKr),e(J$,RKr),e(Mr,PKr),e(Mr,Zt),M(Y$,Zt,null),e(Zt,BKr),e(Zt,F6e),e(F6e,IKr),e(Zt,NKr),e(Zt,pm),e(pm,qKr),e(pm,T6e),e(T6e,jKr),e(pm,DKr),e(pm,mre),e(mre,GKr),e(pm,OKr),e(Zt,VKr),M(e6,Zt,null),e(Mr,XKr),e(Mr,Jr),M(K$,Jr,null),e(Jr,zKr),e(Jr,M6e),e(M6e,WKr),e(Jr,QKr),e(Jr,Ln),e(Ln,HKr),e(Ln,E6e),e(E6e,UKr),e(Ln,JKr),e(Ln,C6e),e(C6e,YKr),e(Ln,KKr),e(Ln,w6e),e(w6e,ZKr),e(Ln,eZr),e(Jr,oZr),e(Jr,Re),e(Re,o6),e(o6,A6e),e(A6e,rZr),e(o6,tZr),e(o6,fre),e(fre,aZr),e(o6,nZr),e(Re,sZr),e(Re,r6),e(r6,L6e),e(L6e,lZr),e(r6,iZr),e(r6,gre),e(gre,dZr),e(r6,cZr),e(Re,mZr),e(Re,t6),e(t6,y6e),e(y6e,fZr),e(t6,gZr),e(t6,hre),e(hre,hZr),e(t6,uZr),e(Re,pZr),e(Re,a6),e(a6,x6e),e(x6e,_Zr),e(a6,bZr),e(a6,ure),e(ure,vZr),e(a6,FZr),e(Re,TZr),e(Re,n6),e(n6,$6e),e($6e,MZr),e(n6,EZr),e(n6,pre),e(pre,CZr),e(n6,wZr),e(Re,AZr),e(Re,s6),e(s6,k6e),e(k6e,LZr),e(s6,yZr),e(s6,_re),e(_re,xZr),e(s6,$Zr),e(Re,kZr),e(Re,l6),e(l6,S6e),e(S6e,SZr),e(l6,RZr),e(l6,bre),e(bre,PZr),e(l6,BZr),e(Re,IZr),e(Re,i6),e(i6,R6e),e(R6e,NZr),e(i6,qZr),e(i6,vre),e(vre,jZr),e(i6,DZr),e(Re,GZr),e(Re,d6),e(d6,P6e),e(P6e,OZr),e(d6,VZr),e(d6,Fre),e(Fre,XZr),e(d6,zZr),e(Re,WZr),e(Re,c6),e(c6,B6e),e(B6e,QZr),e(c6,HZr),e(c6,Tre),e(Tre,UZr),e(c6,JZr),e(Jr,YZr),M(m6,Jr,null),b(m,qWe,_),b(m,_m,_),e(_m,f6),e(f6,I6e),M(Z$,I6e,null),e(_m,KZr),e(_m,N6e),e(N6e,ZZr),b(m,jWe,_),b(m,Er,_),M(ek,Er,null),e(Er,eet),e(Er,bm),e(bm,oet),e(bm,Mre),e(Mre,ret),e(bm,tet),e(bm,Ere),e(Ere,aet),e(bm,net),e(Er,set),e(Er,ok),e(ok,iet),e(ok,q6e),e(q6e,det),e(ok,cet),e(Er,met),e(Er,ea),M(rk,ea,null),e(ea,fet),e(ea,j6e),e(j6e,get),e(ea,het),e(ea,vm),e(vm,uet),e(vm,D6e),e(D6e,pet),e(vm,_et),e(vm,Cre),e(Cre,bet),e(vm,vet),e(ea,Fet),M(g6,ea,null),e(Er,Tet),e(Er,Yr),M(tk,Yr,null),e(Yr,Met),e(Yr,G6e),e(G6e,Eet),e(Yr,Cet),e(Yr,yn),e(yn,wet),e(yn,O6e),e(O6e,Aet),e(yn,Let),e(yn,V6e),e(V6e,yet),e(yn,xet),e(yn,X6e),e(X6e,$et),e(yn,ket),e(Yr,Set),e(Yr,Xe),e(Xe,h6),e(h6,z6e),e(z6e,Ret),e(h6,Pet),e(h6,wre),e(wre,Bet),e(h6,Iet),e(Xe,Net),e(Xe,u6),e(u6,W6e),e(W6e,qet),e(u6,jet),e(u6,Are),e(Are,Det),e(u6,Get),e(Xe,Oet),e(Xe,p6),e(p6,Q6e),e(Q6e,Vet),e(p6,Xet),e(p6,Lre),e(Lre,zet),e(p6,Wet),e(Xe,Qet),e(Xe,_6),e(_6,H6e),e(H6e,Het),e(_6,Uet),e(_6,yre),e(yre,Jet),e(_6,Yet),e(Xe,Ket),e(Xe,b6),e(b6,U6e),e(U6e,Zet),e(b6,eot),e(b6,xre),e(xre,oot),e(b6,rot),e(Xe,tot),e(Xe,v6),e(v6,J6e),e(J6e,aot),e(v6,not),e(v6,$re),e($re,sot),e(v6,lot),e(Xe,iot),e(Xe,F6),e(F6,Y6e),e(Y6e,dot),e(F6,cot),e(F6,kre),e(kre,mot),e(F6,fot),e(Xe,got),e(Xe,T6),e(T6,K6e),e(K6e,hot),e(T6,uot),e(T6,Sre),e(Sre,pot),e(T6,_ot),e(Yr,bot),M(M6,Yr,null),b(m,DWe,_),b(m,Fm,_),e(Fm,E6),e(E6,Z6e),M(ak,Z6e,null),e(Fm,vot),e(Fm,e7e),e(e7e,Fot),b(m,GWe,_),b(m,Cr,_),M(nk,Cr,null),e(Cr,Tot),e(Cr,Tm),e(Tm,Mot),e(Tm,Rre),e(Rre,Eot),e(Tm,Cot),e(Tm,Pre),e(Pre,wot),e(Tm,Aot),e(Cr,Lot),e(Cr,sk),e(sk,yot),e(sk,o7e),e(o7e,xot),e(sk,$ot),e(Cr,kot),e(Cr,oa),M(lk,oa,null),e(oa,Sot),e(oa,r7e),e(r7e,Rot),e(oa,Pot),e(oa,Mm),e(Mm,Bot),e(Mm,t7e),e(t7e,Iot),e(Mm,Not),e(Mm,Bre),e(Bre,qot),e(Mm,jot),e(oa,Dot),M(C6,oa,null),e(Cr,Got),e(Cr,Kr),M(ik,Kr,null),e(Kr,Oot),e(Kr,a7e),e(a7e,Vot),e(Kr,Xot),e(Kr,xn),e(xn,zot),e(xn,n7e),e(n7e,Wot),e(xn,Qot),e(xn,s7e),e(s7e,Hot),e(xn,Uot),e(xn,l7e),e(l7e,Jot),e(xn,Yot),e(Kr,Kot),e(Kr,ze),e(ze,w6),e(w6,i7e),e(i7e,Zot),e(w6,ert),e(w6,Ire),e(Ire,ort),e(w6,rrt),e(ze,trt),e(ze,A6),e(A6,d7e),e(d7e,art),e(A6,nrt),e(A6,Nre),e(Nre,srt),e(A6,lrt),e(ze,irt),e(ze,L6),e(L6,c7e),e(c7e,drt),e(L6,crt),e(L6,qre),e(qre,mrt),e(L6,frt),e(ze,grt),e(ze,y6),e(y6,m7e),e(m7e,hrt),e(y6,urt),e(y6,jre),e(jre,prt),e(y6,_rt),e(ze,brt),e(ze,x6),e(x6,f7e),e(f7e,vrt),e(x6,Frt),e(x6,Dre),e(Dre,Trt),e(x6,Mrt),e(ze,Ert),e(ze,$6),e($6,g7e),e(g7e,Crt),e($6,wrt),e($6,Gre),e(Gre,Art),e($6,Lrt),e(ze,yrt),e(ze,k6),e(k6,h7e),e(h7e,xrt),e(k6,$rt),e(k6,Ore),e(Ore,krt),e(k6,Srt),e(ze,Rrt),e(ze,S6),e(S6,u7e),e(u7e,Prt),e(S6,Brt),e(S6,Vre),e(Vre,Irt),e(S6,Nrt),e(Kr,qrt),M(R6,Kr,null),b(m,OWe,_),b(m,Em,_),e(Em,P6),e(P6,p7e),M(dk,p7e,null),e(Em,jrt),e(Em,_7e),e(_7e,Drt),b(m,VWe,_),b(m,wr,_),M(ck,wr,null),e(wr,Grt),e(wr,Cm),e(Cm,Ort),e(Cm,Xre),e(Xre,Vrt),e(Cm,Xrt),e(Cm,zre),e(zre,zrt),e(Cm,Wrt),e(wr,Qrt),e(wr,mk),e(mk,Hrt),e(mk,b7e),e(b7e,Urt),e(mk,Jrt),e(wr,Yrt),e(wr,ra),M(fk,ra,null),e(ra,Krt),e(ra,v7e),e(v7e,Zrt),e(ra,ett),e(ra,wm),e(wm,ott),e(wm,F7e),e(F7e,rtt),e(wm,ttt),e(wm,Wre),e(Wre,att),e(wm,ntt),e(ra,stt),M(B6,ra,null),e(wr,ltt),e(wr,Zr),M(gk,Zr,null),e(Zr,itt),e(Zr,T7e),e(T7e,dtt),e(Zr,ctt),e(Zr,$n),e($n,mtt),e($n,M7e),e(M7e,ftt),e($n,gtt),e($n,E7e),e(E7e,htt),e($n,utt),e($n,C7e),e(C7e,ptt),e($n,_tt),e(Zr,btt),e(Zr,w7e),e(w7e,I6),e(I6,A7e),e(A7e,vtt),e(I6,Ftt),e(I6,Qre),e(Qre,Ttt),e(I6,Mtt),e(Zr,Ett),M(N6,Zr,null),b(m,XWe,_),b(m,Am,_),e(Am,q6),e(q6,L7e),M(hk,L7e,null),e(Am,Ctt),e(Am,y7e),e(y7e,wtt),b(m,zWe,_),b(m,Ar,_),M(uk,Ar,null),e(Ar,Att),e(Ar,Lm),e(Lm,Ltt),e(Lm,Hre),e(Hre,ytt),e(Lm,xtt),e(Lm,Ure),e(Ure,$tt),e(Lm,ktt),e(Ar,Stt),e(Ar,pk),e(pk,Rtt),e(pk,x7e),e(x7e,Ptt),e(pk,Btt),e(Ar,Itt),e(Ar,ta),M(_k,ta,null),e(ta,Ntt),e(ta,$7e),e($7e,qtt),e(ta,jtt),e(ta,ym),e(ym,Dtt),e(ym,k7e),e(k7e,Gtt),e(ym,Ott),e(ym,Jre),e(Jre,Vtt),e(ym,Xtt),e(ta,ztt),M(j6,ta,null),e(Ar,Wtt),e(Ar,et),M(bk,et,null),e(et,Qtt),e(et,S7e),e(S7e,Htt),e(et,Utt),e(et,kn),e(kn,Jtt),e(kn,R7e),e(R7e,Ytt),e(kn,Ktt),e(kn,P7e),e(P7e,Ztt),e(kn,eat),e(kn,B7e),e(B7e,oat),e(kn,rat),e(et,tat),e(et,vk),e(vk,D6),e(D6,I7e),e(I7e,aat),e(D6,nat),e(D6,Yre),e(Yre,sat),e(D6,lat),e(vk,iat),e(vk,G6),e(G6,N7e),e(N7e,dat),e(G6,cat),e(G6,Kre),e(Kre,mat),e(G6,fat),e(et,gat),M(O6,et,null),b(m,WWe,_),b(m,xm,_),e(xm,V6),e(V6,q7e),M(Fk,q7e,null),e(xm,hat),e(xm,j7e),e(j7e,uat),b(m,QWe,_),b(m,Lr,_),M(Tk,Lr,null),e(Lr,pat),e(Lr,$m),e($m,_at),e($m,Zre),e(Zre,bat),e($m,vat),e($m,ete),e(ete,Fat),e($m,Tat),e(Lr,Mat),e(Lr,Mk),e(Mk,Eat),e(Mk,D7e),e(D7e,Cat),e(Mk,wat),e(Lr,Aat),e(Lr,aa),M(Ek,aa,null),e(aa,Lat),e(aa,G7e),e(G7e,yat),e(aa,xat),e(aa,km),e(km,$at),e(km,O7e),e(O7e,kat),e(km,Sat),e(km,ote),e(ote,Rat),e(km,Pat),e(aa,Bat),M(X6,aa,null),e(Lr,Iat),e(Lr,ot),M(Ck,ot,null),e(ot,Nat),e(ot,V7e),e(V7e,qat),e(ot,jat),e(ot,Sn),e(Sn,Dat),e(Sn,X7e),e(X7e,Gat),e(Sn,Oat),e(Sn,z7e),e(z7e,Vat),e(Sn,Xat),e(Sn,W7e),e(W7e,zat),e(Sn,Wat),e(ot,Qat),e(ot,Q7e),e(Q7e,z6),e(z6,H7e),e(H7e,Hat),e(z6,Uat),e(z6,rte),e(rte,Jat),e(z6,Yat),e(ot,Kat),M(W6,ot,null),HWe=!0},p(m,[_]){const wk={};_&2&&(wk.$$scope={dirty:_,ctx:m}),Dm.$set(wk);const U7e={};_&2&&(U7e.$$scope={dirty:_,ctx:m}),eh.$set(U7e);const J7e={};_&2&&(J7e.$$scope={dirty:_,ctx:m}),Ih.$set(J7e);const Y7e={};_&2&&(Y7e.$$scope={dirty:_,ctx:m}),Fu.$set(Y7e);const Ak={};_&2&&(Ak.$$scope={dirty:_,ctx:m}),Tu.$set(Ak);const K7e={};_&2&&(K7e.$$scope={dirty:_,ctx:m}),Vu.$set(K7e);const Rn={};_&2&&(Rn.$$scope={dirty:_,ctx:m}),Xu.$set(Rn);const Z7e={};_&2&&(Z7e.$$scope={dirty:_,ctx:m}),Qu.$set(Z7e);const eLe={};_&2&&(eLe.$$scope={dirty:_,ctx:m}),Z_.$set(eLe);const oLe={};_&2&&(oLe.$$scope={dirty:_,ctx:m}),o2.$set(oLe);const Lk={};_&2&&(Lk.$$scope={dirty:_,ctx:m}),H2.$set(Lk);const rLe={};_&2&&(rLe.$$scope={dirty:_,ctx:m}),J2.$set(rLe);const yk={};_&2&&(yk.$$scope={dirty:_,ctx:m}),qb.$set(yk);const tLe={};_&2&&(tLe.$$scope={dirty:_,ctx:m}),Db.$set(tLe);const xk={};_&2&&(xk.$$scope={dirty:_,ctx:m}),Av.$set(xk);const aLe={};_&2&&(aLe.$$scope={dirty:_,ctx:m}),yv.$set(aLe);const nLe={};_&2&&(nLe.$$scope={dirty:_,ctx:m}),Uv.$set(nLe);const sLe={};_&2&&(sLe.$$scope={dirty:_,ctx:m}),Yv.$set(sLe);const Sm={};_&2&&(Sm.$$scope={dirty:_,ctx:m}),J1.$set(Sm);const lLe={};_&2&&(lLe.$$scope={dirty:_,ctx:m}),K1.$set(lLe);const iLe={};_&2&&(iLe.$$scope={dirty:_,ctx:m}),$F.$set(iLe);const dLe={};_&2&&(dLe.$$scope={dirty:_,ctx:m}),SF.$set(dLe);const $k={};_&2&&($k.$$scope={dirty:_,ctx:m}),DF.$set($k);const cLe={};_&2&&(cLe.$$scope={dirty:_,ctx:m}),OF.$set(cLe);const mLe={};_&2&&(mLe.$$scope={dirty:_,ctx:m}),AT.$set(mLe);const fLe={};_&2&&(fLe.$$scope={dirty:_,ctx:m}),yT.$set(fLe);const nt={};_&2&&(nt.$$scope={dirty:_,ctx:m}),bM.$set(nt);const kk={};_&2&&(kk.$$scope={dirty:_,ctx:m}),FM.$set(kk);const gLe={};_&2&&(gLe.$$scope={dirty:_,ctx:m}),EM.$set(gLe);const Sk={};_&2&&(Sk.$$scope={dirty:_,ctx:m}),wM.$set(Sk);const hLe={};_&2&&(hLe.$$scope={dirty:_,ctx:m}),DM.$set(hLe);const st={};_&2&&(st.$$scope={dirty:_,ctx:m}),OM.$set(st);const uLe={};_&2&&(uLe.$$scope={dirty:_,ctx:m}),zM.$set(uLe);const Rm={};_&2&&(Rm.$$scope={dirty:_,ctx:m}),QM.$set(Rm);const pLe={};_&2&&(pLe.$$scope={dirty:_,ctx:m}),JM.$set(pLe);const _Le={};_&2&&(_Le.$$scope={dirty:_,ctx:m}),KM.$set(_Le);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),d4.$set(L);const Q6={};_&2&&(Q6.$$scope={dirty:_,ctx:m}),m4.$set(Q6);const bLe={};_&2&&(bLe.$$scope={dirty:_,ctx:m}),b4.$set(bLe);const vLe={};_&2&&(vLe.$$scope={dirty:_,ctx:m}),F4.$set(vLe);const H6={};_&2&&(H6.$$scope={dirty:_,ctx:m}),S4.$set(H6);const FLe={};_&2&&(FLe.$$scope={dirty:_,ctx:m}),P4.$set(FLe);const TLe={};_&2&&(TLe.$$scope={dirty:_,ctx:m}),q4.$set(TLe);const U6={};_&2&&(U6.$$scope={dirty:_,ctx:m}),D4.$set(U6);const MLe={};_&2&&(MLe.$$scope={dirty:_,ctx:m}),Q4.$set(MLe);const ELe={};_&2&&(ELe.$$scope={dirty:_,ctx:m}),U4.$set(ELe);const J6={};_&2&&(J6.$$scope={dirty:_,ctx:m}),eE.$set(J6);const CLe={};_&2&&(CLe.$$scope={dirty:_,ctx:m}),rE.$set(CLe);const wLe={};_&2&&(wLe.$$scope={dirty:_,ctx:m}),sE.$set(wLe);const Y6={};_&2&&(Y6.$$scope={dirty:_,ctx:m}),iE.$set(Y6);const ALe={};_&2&&(ALe.$$scope={dirty:_,ctx:m}),mE.$set(ALe);const LLe={};_&2&&(LLe.$$scope={dirty:_,ctx:m}),gE.$set(LLe);const K6={};_&2&&(K6.$$scope={dirty:_,ctx:m}),FE.$set(K6);const yLe={};_&2&&(yLe.$$scope={dirty:_,ctx:m}),ME.$set(yLe);const xLe={};_&2&&(xLe.$$scope={dirty:_,ctx:m}),wE.$set(xLe);const Z6={};_&2&&(Z6.$$scope={dirty:_,ctx:m}),LE.$set(Z6);const $Le={};_&2&&($Le.$$scope={dirty:_,ctx:m}),CC.$set($Le);const kLe={};_&2&&(kLe.$$scope={dirty:_,ctx:m}),AC.$set(kLe);const e7={};_&2&&(e7.$$scope={dirty:_,ctx:m}),JC.$set(e7);const SLe={};_&2&&(SLe.$$scope={dirty:_,ctx:m}),KC.$set(SLe);const RLe={};_&2&&(RLe.$$scope={dirty:_,ctx:m}),f5.$set(RLe);const o7={};_&2&&(o7.$$scope={dirty:_,ctx:m}),h5.$set(o7);const PLe={};_&2&&(PLe.$$scope={dirty:_,ctx:m}),M5.$set(PLe);const BLe={};_&2&&(BLe.$$scope={dirty:_,ctx:m}),C5.$set(BLe);const r7={};_&2&&(r7.$$scope={dirty:_,ctx:m}),z5.$set(r7);const ILe={};_&2&&(ILe.$$scope={dirty:_,ctx:m}),Q5.$set(ILe);const NLe={};_&2&&(NLe.$$scope={dirty:_,ctx:m}),a3.$set(NLe);const t7={};_&2&&(t7.$$scope={dirty:_,ctx:m}),s3.$set(t7);const qLe={};_&2&&(qLe.$$scope={dirty:_,ctx:m}),R3.$set(qLe);const jLe={};_&2&&(jLe.$$scope={dirty:_,ctx:m}),B3.$set(jLe);const a7={};_&2&&(a7.$$scope={dirty:_,ctx:m}),Z3.$set(a7);const DLe={};_&2&&(DLe.$$scope={dirty:_,ctx:m}),o0.$set(DLe);const GLe={};_&2&&(GLe.$$scope={dirty:_,ctx:m}),a0.$set(GLe);const n7={};_&2&&(n7.$$scope={dirty:_,ctx:m}),s0.$set(n7);const OLe={};_&2&&(OLe.$$scope={dirty:_,ctx:m}),i0.$set(OLe);const VLe={};_&2&&(VLe.$$scope={dirty:_,ctx:m}),c0.$set(VLe);const s7={};_&2&&(s7.$$scope={dirty:_,ctx:m}),k0.$set(s7);const XLe={};_&2&&(XLe.$$scope={dirty:_,ctx:m}),R0.$set(XLe);const zLe={};_&2&&(zLe.$$scope={dirty:_,ctx:m}),ew.$set(zLe);const l7={};_&2&&(l7.$$scope={dirty:_,ctx:m}),rw.$set(l7);const WLe={};_&2&&(WLe.$$scope={dirty:_,ctx:m}),aw.$set(WLe);const QLe={};_&2&&(QLe.$$scope={dirty:_,ctx:m}),sw.$set(QLe);const i7={};_&2&&(i7.$$scope={dirty:_,ctx:m}),iw.$set(i7);const HLe={};_&2&&(HLe.$$scope={dirty:_,ctx:m}),cw.$set(HLe);const ULe={};_&2&&(ULe.$$scope={dirty:_,ctx:m}),qw.$set(ULe);const d7={};_&2&&(d7.$$scope={dirty:_,ctx:m}),Dw.$set(d7);const JLe={};_&2&&(JLe.$$scope={dirty:_,ctx:m}),Yw.$set(JLe);const YLe={};_&2&&(YLe.$$scope={dirty:_,ctx:m}),Zw.$set(YLe);const c7={};_&2&&(c7.$$scope={dirty:_,ctx:m}),gA.$set(c7);const KLe={};_&2&&(KLe.$$scope={dirty:_,ctx:m}),uA.$set(KLe);const ZLe={};_&2&&(ZLe.$$scope={dirty:_,ctx:m}),AA.$set(ZLe);const m7={};_&2&&(m7.$$scope={dirty:_,ctx:m}),yA.$set(m7);const eye={};_&2&&(eye.$$scope={dirty:_,ctx:m}),jA.$set(eye);const oye={};_&2&&(oye.$$scope={dirty:_,ctx:m}),GA.$set(oye);const f7={};_&2&&(f7.$$scope={dirty:_,ctx:m}),KA.$set(f7);const rye={};_&2&&(rye.$$scope={dirty:_,ctx:m}),e6.$set(rye);const tye={};_&2&&(tye.$$scope={dirty:_,ctx:m}),m6.$set(tye);const g7={};_&2&&(g7.$$scope={dirty:_,ctx:m}),g6.$set(g7);const aye={};_&2&&(aye.$$scope={dirty:_,ctx:m}),M6.$set(aye);const nye={};_&2&&(nye.$$scope={dirty:_,ctx:m}),C6.$set(nye);const h7={};_&2&&(h7.$$scope={dirty:_,ctx:m}),R6.$set(h7);const sye={};_&2&&(sye.$$scope={dirty:_,ctx:m}),B6.$set(sye);const lye={};_&2&&(lye.$$scope={dirty:_,ctx:m}),N6.$set(lye);const u7={};_&2&&(u7.$$scope={dirty:_,ctx:m}),j6.$set(u7);const iye={};_&2&&(iye.$$scope={dirty:_,ctx:m}),O6.$set(iye);const dye={};_&2&&(dye.$$scope={dirty:_,ctx:m}),X6.$set(dye);const p7={};_&2&&(p7.$$scope={dirty:_,ctx:m}),W6.$set(p7)},i(m){HWe||(E(c.$$.fragment,m),E(Sa.$$.fragment,m),E(uy.$$.fragment,m),E(py.$$.fragment,m),E(Dm.$$.fragment,m),E(_y.$$.fragment,m),E(by.$$.fragment,m),E(Ty.$$.fragment,m),E(eh.$$.fragment,m),E(My.$$.fragment,m),E(Ey.$$.fragment,m),E(Cy.$$.fragment,m),E(Ly.$$.fragment,m),E(Ih.$$.fragment,m),E(yy.$$.fragment,m),E(xy.$$.fragment,m),E($y.$$.fragment,m),E(Ry.$$.fragment,m),E(Fu.$$.fragment,m),E(Tu.$$.fragment,m),E(Py.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(jy.$$.fragment,m),E(Vu.$$.fragment,m),E(Xu.$$.fragment,m),E(Dy.$$.fragment,m),E(Gy.$$.fragment,m),E(Oy.$$.fragment,m),E(Xy.$$.fragment,m),E(Qu.$$.fragment,m),E(zy.$$.fragment,m),E(Z_.$$.fragment,m),E(Wy.$$.fragment,m),E(Qy.$$.fragment,m),E(Uy.$$.fragment,m),E(o2.$$.fragment,m),E(Jy.$$.fragment,m),E(H2.$$.fragment,m),E(Yy.$$.fragment,m),E(Ky.$$.fragment,m),E(e8.$$.fragment,m),E(J2.$$.fragment,m),E(o8.$$.fragment,m),E(qb.$$.fragment,m),E(r8.$$.fragment,m),E(t8.$$.fragment,m),E(n8.$$.fragment,m),E(Db.$$.fragment,m),E(s8.$$.fragment,m),E(Av.$$.fragment,m),E(l8.$$.fragment,m),E(i8.$$.fragment,m),E(c8.$$.fragment,m),E(yv.$$.fragment,m),E(m8.$$.fragment,m),E(Uv.$$.fragment,m),E(f8.$$.fragment,m),E(g8.$$.fragment,m),E(u8.$$.fragment,m),E(Yv.$$.fragment,m),E(p8.$$.fragment,m),E(J1.$$.fragment,m),E(_8.$$.fragment,m),E(b8.$$.fragment,m),E(F8.$$.fragment,m),E(K1.$$.fragment,m),E(T8.$$.fragment,m),E($F.$$.fragment,m),E(M8.$$.fragment,m),E(E8.$$.fragment,m),E(w8.$$.fragment,m),E(SF.$$.fragment,m),E(A8.$$.fragment,m),E(DF.$$.fragment,m),E(L8.$$.fragment,m),E(y8.$$.fragment,m),E($8.$$.fragment,m),E(OF.$$.fragment,m),E(k8.$$.fragment,m),E(AT.$$.fragment,m),E(S8.$$.fragment,m),E(R8.$$.fragment,m),E(B8.$$.fragment,m),E(yT.$$.fragment,m),E(I8.$$.fragment,m),E(bM.$$.fragment,m),E(N8.$$.fragment,m),E(q8.$$.fragment,m),E(D8.$$.fragment,m),E(FM.$$.fragment,m),E(G8.$$.fragment,m),E(EM.$$.fragment,m),E(O8.$$.fragment,m),E(V8.$$.fragment,m),E(z8.$$.fragment,m),E(wM.$$.fragment,m),E(W8.$$.fragment,m),E(DM.$$.fragment,m),E(Q8.$$.fragment,m),E(H8.$$.fragment,m),E(J8.$$.fragment,m),E(OM.$$.fragment,m),E(Y8.$$.fragment,m),E(zM.$$.fragment,m),E(K8.$$.fragment,m),E(Z8.$$.fragment,m),E(o9.$$.fragment,m),E(QM.$$.fragment,m),E(r9.$$.fragment,m),E(JM.$$.fragment,m),E(t9.$$.fragment,m),E(a9.$$.fragment,m),E(s9.$$.fragment,m),E(KM.$$.fragment,m),E(l9.$$.fragment,m),E(d4.$$.fragment,m),E(i9.$$.fragment,m),E(d9.$$.fragment,m),E(m9.$$.fragment,m),E(m4.$$.fragment,m),E(f9.$$.fragment,m),E(b4.$$.fragment,m),E(g9.$$.fragment,m),E(h9.$$.fragment,m),E(p9.$$.fragment,m),E(F4.$$.fragment,m),E(_9.$$.fragment,m),E(S4.$$.fragment,m),E(b9.$$.fragment,m),E(v9.$$.fragment,m),E(T9.$$.fragment,m),E(P4.$$.fragment,m),E(M9.$$.fragment,m),E(q4.$$.fragment,m),E(C9.$$.fragment,m),E(w9.$$.fragment,m),E(L9.$$.fragment,m),E(D4.$$.fragment,m),E(y9.$$.fragment,m),E(Q4.$$.fragment,m),E(x9.$$.fragment,m),E($9.$$.fragment,m),E(S9.$$.fragment,m),E(U4.$$.fragment,m),E(R9.$$.fragment,m),E(eE.$$.fragment,m),E(P9.$$.fragment,m),E(B9.$$.fragment,m),E(N9.$$.fragment,m),E(rE.$$.fragment,m),E(q9.$$.fragment,m),E(sE.$$.fragment,m),E(D9.$$.fragment,m),E(G9.$$.fragment,m),E(V9.$$.fragment,m),E(iE.$$.fragment,m),E(X9.$$.fragment,m),E(mE.$$.fragment,m),E(z9.$$.fragment,m),E(W9.$$.fragment,m),E(H9.$$.fragment,m),E(gE.$$.fragment,m),E(U9.$$.fragment,m),E(FE.$$.fragment,m),E(J9.$$.fragment,m),E(Y9.$$.fragment,m),E(Z9.$$.fragment,m),E(ME.$$.fragment,m),E(ex.$$.fragment,m),E(wE.$$.fragment,m),E(ox.$$.fragment,m),E(rx.$$.fragment,m),E(ax.$$.fragment,m),E(LE.$$.fragment,m),E(nx.$$.fragment,m),E(CC.$$.fragment,m),E(sx.$$.fragment,m),E(lx.$$.fragment,m),E(dx.$$.fragment,m),E(AC.$$.fragment,m),E(cx.$$.fragment,m),E(JC.$$.fragment,m),E(mx.$$.fragment,m),E(fx.$$.fragment,m),E(hx.$$.fragment,m),E(KC.$$.fragment,m),E(ux.$$.fragment,m),E(f5.$$.fragment,m),E(px.$$.fragment,m),E(_x.$$.fragment,m),E(vx.$$.fragment,m),E(h5.$$.fragment,m),E(Fx.$$.fragment,m),E(M5.$$.fragment,m),E(Tx.$$.fragment,m),E(Mx.$$.fragment,m),E(Cx.$$.fragment,m),E(C5.$$.fragment,m),E(wx.$$.fragment,m),E(z5.$$.fragment,m),E(Ax.$$.fragment,m),E(Lx.$$.fragment,m),E(xx.$$.fragment,m),E(Q5.$$.fragment,m),E($x.$$.fragment,m),E(a3.$$.fragment,m),E(kx.$$.fragment,m),E(Sx.$$.fragment,m),E(Px.$$.fragment,m),E(s3.$$.fragment,m),E(Bx.$$.fragment,m),E(R3.$$.fragment,m),E(Ix.$$.fragment,m),E(Nx.$$.fragment,m),E(jx.$$.fragment,m),E(B3.$$.fragment,m),E(Dx.$$.fragment,m),E(Z3.$$.fragment,m),E(Gx.$$.fragment,m),E(Ox.$$.fragment,m),E(Xx.$$.fragment,m),E(o0.$$.fragment,m),E(zx.$$.fragment,m),E(a0.$$.fragment,m),E(Qx.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(s0.$$.fragment,m),E(Yx.$$.fragment,m),E(i0.$$.fragment,m),E(Kx.$$.fragment,m),E(Zx.$$.fragment,m),E(o$.$$.fragment,m),E(c0.$$.fragment,m),E(r$.$$.fragment,m),E(k0.$$.fragment,m),E(t$.$$.fragment,m),E(a$.$$.fragment,m),E(s$.$$.fragment,m),E(R0.$$.fragment,m),E(l$.$$.fragment,m),E(ew.$$.fragment,m),E(i$.$$.fragment,m),E(d$.$$.fragment,m),E(m$.$$.fragment,m),E(rw.$$.fragment,m),E(f$.$$.fragment,m),E(aw.$$.fragment,m),E(g$.$$.fragment,m),E(h$.$$.fragment,m),E(p$.$$.fragment,m),E(sw.$$.fragment,m),E(_$.$$.fragment,m),E(iw.$$.fragment,m),E(b$.$$.fragment,m),E(v$.$$.fragment,m),E(T$.$$.fragment,m),E(cw.$$.fragment,m),E(M$.$$.fragment,m),E(qw.$$.fragment,m),E(E$.$$.fragment,m),E(C$.$$.fragment,m),E(A$.$$.fragment,m),E(Dw.$$.fragment,m),E(L$.$$.fragment,m),E(Yw.$$.fragment,m),E(y$.$$.fragment,m),E(x$.$$.fragment,m),E(k$.$$.fragment,m),E(Zw.$$.fragment,m),E(S$.$$.fragment,m),E(gA.$$.fragment,m),E(R$.$$.fragment,m),E(P$.$$.fragment,m),E(I$.$$.fragment,m),E(uA.$$.fragment,m),E(N$.$$.fragment,m),E(AA.$$.fragment,m),E(q$.$$.fragment,m),E(j$.$$.fragment,m),E(G$.$$.fragment,m),E(yA.$$.fragment,m),E(O$.$$.fragment,m),E(jA.$$.fragment,m),E(V$.$$.fragment,m),E(X$.$$.fragment,m),E(W$.$$.fragment,m),E(GA.$$.fragment,m),E(Q$.$$.fragment,m),E(KA.$$.fragment,m),E(H$.$$.fragment,m),E(U$.$$.fragment,m),E(Y$.$$.fragment,m),E(e6.$$.fragment,m),E(K$.$$.fragment,m),E(m6.$$.fragment,m),E(Z$.$$.fragment,m),E(ek.$$.fragment,m),E(rk.$$.fragment,m),E(g6.$$.fragment,m),E(tk.$$.fragment,m),E(M6.$$.fragment,m),E(ak.$$.fragment,m),E(nk.$$.fragment,m),E(lk.$$.fragment,m),E(C6.$$.fragment,m),E(ik.$$.fragment,m),E(R6.$$.fragment,m),E(dk.$$.fragment,m),E(ck.$$.fragment,m),E(fk.$$.fragment,m),E(B6.$$.fragment,m),E(gk.$$.fragment,m),E(N6.$$.fragment,m),E(hk.$$.fragment,m),E(uk.$$.fragment,m),E(_k.$$.fragment,m),E(j6.$$.fragment,m),E(bk.$$.fragment,m),E(O6.$$.fragment,m),E(Fk.$$.fragment,m),E(Tk.$$.fragment,m),E(Ek.$$.fragment,m),E(X6.$$.fragment,m),E(Ck.$$.fragment,m),E(W6.$$.fragment,m),HWe=!0)},o(m){C(c.$$.fragment,m),C(Sa.$$.fragment,m),C(uy.$$.fragment,m),C(py.$$.fragment,m),C(Dm.$$.fragment,m),C(_y.$$.fragment,m),C(by.$$.fragment,m),C(Ty.$$.fragment,m),C(eh.$$.fragment,m),C(My.$$.fragment,m),C(Ey.$$.fragment,m),C(Cy.$$.fragment,m),C(Ly.$$.fragment,m),C(Ih.$$.fragment,m),C(yy.$$.fragment,m),C(xy.$$.fragment,m),C($y.$$.fragment,m),C(Ry.$$.fragment,m),C(Fu.$$.fragment,m),C(Tu.$$.fragment,m),C(Py.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(jy.$$.fragment,m),C(Vu.$$.fragment,m),C(Xu.$$.fragment,m),C(Dy.$$.fragment,m),C(Gy.$$.fragment,m),C(Oy.$$.fragment,m),C(Xy.$$.fragment,m),C(Qu.$$.fragment,m),C(zy.$$.fragment,m),C(Z_.$$.fragment,m),C(Wy.$$.fragment,m),C(Qy.$$.fragment,m),C(Uy.$$.fragment,m),C(o2.$$.fragment,m),C(Jy.$$.fragment,m),C(H2.$$.fragment,m),C(Yy.$$.fragment,m),C(Ky.$$.fragment,m),C(e8.$$.fragment,m),C(J2.$$.fragment,m),C(o8.$$.fragment,m),C(qb.$$.fragment,m),C(r8.$$.fragment,m),C(t8.$$.fragment,m),C(n8.$$.fragment,m),C(Db.$$.fragment,m),C(s8.$$.fragment,m),C(Av.$$.fragment,m),C(l8.$$.fragment,m),C(i8.$$.fragment,m),C(c8.$$.fragment,m),C(yv.$$.fragment,m),C(m8.$$.fragment,m),C(Uv.$$.fragment,m),C(f8.$$.fragment,m),C(g8.$$.fragment,m),C(u8.$$.fragment,m),C(Yv.$$.fragment,m),C(p8.$$.fragment,m),C(J1.$$.fragment,m),C(_8.$$.fragment,m),C(b8.$$.fragment,m),C(F8.$$.fragment,m),C(K1.$$.fragment,m),C(T8.$$.fragment,m),C($F.$$.fragment,m),C(M8.$$.fragment,m),C(E8.$$.fragment,m),C(w8.$$.fragment,m),C(SF.$$.fragment,m),C(A8.$$.fragment,m),C(DF.$$.fragment,m),C(L8.$$.fragment,m),C(y8.$$.fragment,m),C($8.$$.fragment,m),C(OF.$$.fragment,m),C(k8.$$.fragment,m),C(AT.$$.fragment,m),C(S8.$$.fragment,m),C(R8.$$.fragment,m),C(B8.$$.fragment,m),C(yT.$$.fragment,m),C(I8.$$.fragment,m),C(bM.$$.fragment,m),C(N8.$$.fragment,m),C(q8.$$.fragment,m),C(D8.$$.fragment,m),C(FM.$$.fragment,m),C(G8.$$.fragment,m),C(EM.$$.fragment,m),C(O8.$$.fragment,m),C(V8.$$.fragment,m),C(z8.$$.fragment,m),C(wM.$$.fragment,m),C(W8.$$.fragment,m),C(DM.$$.fragment,m),C(Q8.$$.fragment,m),C(H8.$$.fragment,m),C(J8.$$.fragment,m),C(OM.$$.fragment,m),C(Y8.$$.fragment,m),C(zM.$$.fragment,m),C(K8.$$.fragment,m),C(Z8.$$.fragment,m),C(o9.$$.fragment,m),C(QM.$$.fragment,m),C(r9.$$.fragment,m),C(JM.$$.fragment,m),C(t9.$$.fragment,m),C(a9.$$.fragment,m),C(s9.$$.fragment,m),C(KM.$$.fragment,m),C(l9.$$.fragment,m),C(d4.$$.fragment,m),C(i9.$$.fragment,m),C(d9.$$.fragment,m),C(m9.$$.fragment,m),C(m4.$$.fragment,m),C(f9.$$.fragment,m),C(b4.$$.fragment,m),C(g9.$$.fragment,m),C(h9.$$.fragment,m),C(p9.$$.fragment,m),C(F4.$$.fragment,m),C(_9.$$.fragment,m),C(S4.$$.fragment,m),C(b9.$$.fragment,m),C(v9.$$.fragment,m),C(T9.$$.fragment,m),C(P4.$$.fragment,m),C(M9.$$.fragment,m),C(q4.$$.fragment,m),C(C9.$$.fragment,m),C(w9.$$.fragment,m),C(L9.$$.fragment,m),C(D4.$$.fragment,m),C(y9.$$.fragment,m),C(Q4.$$.fragment,m),C(x9.$$.fragment,m),C($9.$$.fragment,m),C(S9.$$.fragment,m),C(U4.$$.fragment,m),C(R9.$$.fragment,m),C(eE.$$.fragment,m),C(P9.$$.fragment,m),C(B9.$$.fragment,m),C(N9.$$.fragment,m),C(rE.$$.fragment,m),C(q9.$$.fragment,m),C(sE.$$.fragment,m),C(D9.$$.fragment,m),C(G9.$$.fragment,m),C(V9.$$.fragment,m),C(iE.$$.fragment,m),C(X9.$$.fragment,m),C(mE.$$.fragment,m),C(z9.$$.fragment,m),C(W9.$$.fragment,m),C(H9.$$.fragment,m),C(gE.$$.fragment,m),C(U9.$$.fragment,m),C(FE.$$.fragment,m),C(J9.$$.fragment,m),C(Y9.$$.fragment,m),C(Z9.$$.fragment,m),C(ME.$$.fragment,m),C(ex.$$.fragment,m),C(wE.$$.fragment,m),C(ox.$$.fragment,m),C(rx.$$.fragment,m),C(ax.$$.fragment,m),C(LE.$$.fragment,m),C(nx.$$.fragment,m),C(CC.$$.fragment,m),C(sx.$$.fragment,m),C(lx.$$.fragment,m),C(dx.$$.fragment,m),C(AC.$$.fragment,m),C(cx.$$.fragment,m),C(JC.$$.fragment,m),C(mx.$$.fragment,m),C(fx.$$.fragment,m),C(hx.$$.fragment,m),C(KC.$$.fragment,m),C(ux.$$.fragment,m),C(f5.$$.fragment,m),C(px.$$.fragment,m),C(_x.$$.fragment,m),C(vx.$$.fragment,m),C(h5.$$.fragment,m),C(Fx.$$.fragment,m),C(M5.$$.fragment,m),C(Tx.$$.fragment,m),C(Mx.$$.fragment,m),C(Cx.$$.fragment,m),C(C5.$$.fragment,m),C(wx.$$.fragment,m),C(z5.$$.fragment,m),C(Ax.$$.fragment,m),C(Lx.$$.fragment,m),C(xx.$$.fragment,m),C(Q5.$$.fragment,m),C($x.$$.fragment,m),C(a3.$$.fragment,m),C(kx.$$.fragment,m),C(Sx.$$.fragment,m),C(Px.$$.fragment,m),C(s3.$$.fragment,m),C(Bx.$$.fragment,m),C(R3.$$.fragment,m),C(Ix.$$.fragment,m),C(Nx.$$.fragment,m),C(jx.$$.fragment,m),C(B3.$$.fragment,m),C(Dx.$$.fragment,m),C(Z3.$$.fragment,m),C(Gx.$$.fragment,m),C(Ox.$$.fragment,m),C(Xx.$$.fragment,m),C(o0.$$.fragment,m),C(zx.$$.fragment,m),C(a0.$$.fragment,m),C(Qx.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(s0.$$.fragment,m),C(Yx.$$.fragment,m),C(i0.$$.fragment,m),C(Kx.$$.fragment,m),C(Zx.$$.fragment,m),C(o$.$$.fragment,m),C(c0.$$.fragment,m),C(r$.$$.fragment,m),C(k0.$$.fragment,m),C(t$.$$.fragment,m),C(a$.$$.fragment,m),C(s$.$$.fragment,m),C(R0.$$.fragment,m),C(l$.$$.fragment,m),C(ew.$$.fragment,m),C(i$.$$.fragment,m),C(d$.$$.fragment,m),C(m$.$$.fragment,m),C(rw.$$.fragment,m),C(f$.$$.fragment,m),C(aw.$$.fragment,m),C(g$.$$.fragment,m),C(h$.$$.fragment,m),C(p$.$$.fragment,m),C(sw.$$.fragment,m),C(_$.$$.fragment,m),C(iw.$$.fragment,m),C(b$.$$.fragment,m),C(v$.$$.fragment,m),C(T$.$$.fragment,m),C(cw.$$.fragment,m),C(M$.$$.fragment,m),C(qw.$$.fragment,m),C(E$.$$.fragment,m),C(C$.$$.fragment,m),C(A$.$$.fragment,m),C(Dw.$$.fragment,m),C(L$.$$.fragment,m),C(Yw.$$.fragment,m),C(y$.$$.fragment,m),C(x$.$$.fragment,m),C(k$.$$.fragment,m),C(Zw.$$.fragment,m),C(S$.$$.fragment,m),C(gA.$$.fragment,m),C(R$.$$.fragment,m),C(P$.$$.fragment,m),C(I$.$$.fragment,m),C(uA.$$.fragment,m),C(N$.$$.fragment,m),C(AA.$$.fragment,m),C(q$.$$.fragment,m),C(j$.$$.fragment,m),C(G$.$$.fragment,m),C(yA.$$.fragment,m),C(O$.$$.fragment,m),C(jA.$$.fragment,m),C(V$.$$.fragment,m),C(X$.$$.fragment,m),C(W$.$$.fragment,m),C(GA.$$.fragment,m),C(Q$.$$.fragment,m),C(KA.$$.fragment,m),C(H$.$$.fragment,m),C(U$.$$.fragment,m),C(Y$.$$.fragment,m),C(e6.$$.fragment,m),C(K$.$$.fragment,m),C(m6.$$.fragment,m),C(Z$.$$.fragment,m),C(ek.$$.fragment,m),C(rk.$$.fragment,m),C(g6.$$.fragment,m),C(tk.$$.fragment,m),C(M6.$$.fragment,m),C(ak.$$.fragment,m),C(nk.$$.fragment,m),C(lk.$$.fragment,m),C(C6.$$.fragment,m),C(ik.$$.fragment,m),C(R6.$$.fragment,m),C(dk.$$.fragment,m),C(ck.$$.fragment,m),C(fk.$$.fragment,m),C(B6.$$.fragment,m),C(gk.$$.fragment,m),C(N6.$$.fragment,m),C(hk.$$.fragment,m),C(uk.$$.fragment,m),C(_k.$$.fragment,m),C(j6.$$.fragment,m),C(bk.$$.fragment,m),C(O6.$$.fragment,m),C(Fk.$$.fragment,m),C(Tk.$$.fragment,m),C(Ek.$$.fragment,m),C(X6.$$.fragment,m),C(Ck.$$.fragment,m),C(W6.$$.fragment,m),HWe=!1},d(m){t(g),m&&t(v),m&&t(u),w(c),m&&t(Bm),m&&t(lt),m&&t(Oe),m&&t(Qe),m&&t(Nm),w(Sa,m),m&&t(He),m&&t(Ae),m&&t(Ao),m&&t(Ra),m&&t(VXe),m&&t(Ii),w(uy),m&&t(XXe),m&&t(qn),m&&t(zXe),w(py,m),m&&t(WXe),m&&t(ZS),m&&t(QXe),w(Dm,m),m&&t(HXe),m&&t(Ni),w(_y),m&&t(UXe),m&&t(Lo),w(by),w(Ty),w(eh),w(My),m&&t(JXe),m&&t(ji),w(Ey),m&&t(YXe),m&&t(yo),w(Cy),w(Ly),w(Ih),w(yy),m&&t(KXe),m&&t(Di),w(xy),m&&t(ZXe),m&&t(xo),w($y),w(Ry),w(Fu),w(Tu),w(Py),m&&t(eze),m&&t(Gi),w(By),m&&t(oze),m&&t($o),w(Iy),w(jy),w(Vu),w(Xu),w(Dy),m&&t(rze),m&&t(Vi),w(Gy),m&&t(tze),m&&t(ko),w(Oy),w(Xy),w(Qu),w(zy),w(Z_),m&&t(aze),m&&t(Wi),w(Wy),m&&t(nze),m&&t(So),w(Qy),w(Uy),w(o2),w(Jy),w(H2),m&&t(sze),m&&t(Ui),w(Yy),m&&t(lze),m&&t(Ro),w(Ky),w(e8),w(J2),w(o8),w(qb),m&&t(ize),m&&t(Ki),w(r8),m&&t(dze),m&&t(Po),w(t8),w(n8),w(Db),w(s8),w(Av),m&&t(cze),m&&t(od),w(l8),m&&t(mze),m&&t(Bo),w(i8),w(c8),w(yv),w(m8),w(Uv),m&&t(fze),m&&t(ad),w(f8),m&&t(gze),m&&t(Io),w(g8),w(u8),w(Yv),w(p8),w(J1),m&&t(hze),m&&t(ld),w(_8),m&&t(uze),m&&t(No),w(b8),w(F8),w(K1),w(T8),w($F),m&&t(pze),m&&t(cd),w(M8),m&&t(_ze),m&&t(qo),w(E8),w(w8),w(SF),w(A8),w(DF),m&&t(bze),m&&t(gd),w(L8),m&&t(vze),m&&t(Do),w(y8),w($8),w(OF),w(k8),w(AT),m&&t(Fze),m&&t(pd),w(S8),m&&t(Tze),m&&t(Go),w(R8),w(B8),w(yT),w(I8),w(bM),m&&t(Mze),m&&t(vd),w(N8),m&&t(Eze),m&&t(Oo),w(q8),w(D8),w(FM),w(G8),w(EM),m&&t(Cze),m&&t(Md),w(O8),m&&t(wze),m&&t(Vo),w(V8),w(z8),w(wM),w(W8),w(DM),m&&t(Aze),m&&t(wd),w(Q8),m&&t(Lze),m&&t(Xo),w(H8),w(J8),w(OM),w(Y8),w(zM),m&&t(yze),m&&t(yd),w(K8),m&&t(xze),m&&t(zo),w(Z8),w(o9),w(QM),w(r9),w(JM),m&&t($ze),m&&t(kd),w(t9),m&&t(kze),m&&t(Wo),w(a9),w(s9),w(KM),w(l9),w(d4),m&&t(Sze),m&&t(Pd),w(i9),m&&t(Rze),m&&t(Qo),w(d9),w(m9),w(m4),w(f9),w(b4),m&&t(Pze),m&&t(Nd),w(g9),m&&t(Bze),m&&t(Ho),w(h9),w(p9),w(F4),w(_9),w(S4),m&&t(Ize),m&&t(Dd),w(b9),m&&t(Nze),m&&t(Uo),w(v9),w(T9),w(P4),w(M9),w(q4),m&&t(qze),m&&t(Vd),w(C9),m&&t(jze),m&&t(Jo),w(w9),w(L9),w(D4),w(y9),w(Q4),m&&t(Dze),m&&t(Wd),w(x9),m&&t(Gze),m&&t(Yo),w($9),w(S9),w(U4),w(R9),w(eE),m&&t(Oze),m&&t(Jd),w(P9),m&&t(Vze),m&&t(Ko),w(B9),w(N9),w(rE),w(q9),w(sE),m&&t(Xze),m&&t(Zd),w(D9),m&&t(zze),m&&t(Zo),w(G9),w(V9),w(iE),w(X9),w(mE),m&&t(Wze),m&&t(rc),w(z9),m&&t(Qze),m&&t(er),w(W9),w(H9),w(gE),w(U9),w(FE),m&&t(Hze),m&&t(nc),w(J9),m&&t(Uze),m&&t(or),w(Y9),w(Z9),w(ME),w(ex),w(wE),m&&t(Jze),m&&t(ic),w(ox),m&&t(Yze),m&&t(rr),w(rx),w(ax),w(LE),w(nx),w(CC),m&&t(Kze),m&&t(mc),w(sx),m&&t(Zze),m&&t(tr),w(lx),w(dx),w(AC),w(cx),w(JC),m&&t(eWe),m&&t(hc),w(mx),m&&t(oWe),m&&t(ar),w(fx),w(hx),w(KC),w(ux),w(f5),m&&t(rWe),m&&t(_c),w(px),m&&t(tWe),m&&t(nr),w(_x),w(vx),w(h5),w(Fx),w(M5),m&&t(aWe),m&&t(Fc),w(Tx),m&&t(nWe),m&&t(sr),w(Mx),w(Cx),w(C5),w(wx),w(z5),m&&t(sWe),m&&t(Ec),w(Ax),m&&t(lWe),m&&t(lr),w(Lx),w(xx),w(Q5),w($x),w(a3),m&&t(iWe),m&&t(Ac),w(kx),m&&t(dWe),m&&t(ir),w(Sx),w(Px),w(s3),w(Bx),w(R3),m&&t(cWe),m&&t(xc),w(Ix),m&&t(mWe),m&&t(dr),w(Nx),w(jx),w(B3),w(Dx),w(Z3),m&&t(fWe),m&&t(Sc),w(Gx),m&&t(gWe),m&&t(cr),w(Ox),w(Xx),w(o0),w(zx),w(a0),m&&t(hWe),m&&t(Bc),w(Qx),m&&t(uWe),m&&t(mr),w(Hx),w(Jx),w(s0),w(Yx),w(i0),m&&t(pWe),m&&t(qc),w(Kx),m&&t(_We),m&&t(fr),w(Zx),w(o$),w(c0),w(r$),w(k0),m&&t(bWe),m&&t(Gc),w(t$),m&&t(vWe),m&&t(gr),w(a$),w(s$),w(R0),w(l$),w(ew),m&&t(FWe),m&&t(Xc),w(i$),m&&t(TWe),m&&t(hr),w(d$),w(m$),w(rw),w(f$),w(aw),m&&t(MWe),m&&t(Qc),w(g$),m&&t(EWe),m&&t(ur),w(h$),w(p$),w(sw),w(_$),w(iw),m&&t(CWe),m&&t(Jc),w(b$),m&&t(wWe),m&&t(pr),w(v$),w(T$),w(cw),w(M$),w(qw),m&&t(AWe),m&&t(Zc),w(E$),m&&t(LWe),m&&t(_r),w(C$),w(A$),w(Dw),w(L$),w(Yw),m&&t(yWe),m&&t(rm),w(y$),m&&t(xWe),m&&t(br),w(x$),w(k$),w(Zw),w(S$),w(gA),m&&t($We),m&&t(nm),w(R$),m&&t(kWe),m&&t(vr),w(P$),w(I$),w(uA),w(N$),w(AA),m&&t(SWe),m&&t(im),w(q$),m&&t(RWe),m&&t(Fr),w(j$),w(G$),w(yA),w(O$),w(jA),m&&t(PWe),m&&t(mm),w(V$),m&&t(BWe),m&&t(Tr),w(X$),w(W$),w(GA),w(Q$),w(KA),m&&t(IWe),m&&t(hm),w(H$),m&&t(NWe),m&&t(Mr),w(U$),w(Y$),w(e6),w(K$),w(m6),m&&t(qWe),m&&t(_m),w(Z$),m&&t(jWe),m&&t(Er),w(ek),w(rk),w(g6),w(tk),w(M6),m&&t(DWe),m&&t(Fm),w(ak),m&&t(GWe),m&&t(Cr),w(nk),w(lk),w(C6),w(ik),w(R6),m&&t(OWe),m&&t(Em),w(dk),m&&t(VWe),m&&t(wr),w(ck),w(fk),w(B6),w(gk),w(N6),m&&t(XWe),m&&t(Am),w(hk),m&&t(zWe),m&&t(Ar),w(uk),w(_k),w(j6),w(bk),w(O6),m&&t(WWe),m&&t(xm),w(Fk),m&&t(QWe),m&&t(Lr),w(Tk),w(Ek),w(X6),w(Ck),w(W6)}}}const rYt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function tYt($){return oUt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class cYt extends YHt{constructor(g){super();KHt(this,g,tYt,oYt,ZHt,{})}}export{cYt as default,rYt as metadata};
